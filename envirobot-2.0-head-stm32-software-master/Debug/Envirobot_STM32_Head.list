
Envirobot_STM32_Head.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c29c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  0801c540  0801c540  0001d540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801cc18  0801cc18  0001dc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  0801cc20  0801cc20  0001dc20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0801cc2c  0801cc2c  0001dc2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0801cc34  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009554  24000078  0801ccac  0001e078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240095cc  0801ccac  0001e5cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001e078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00344b88  00000000  00000000  0001e0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00011276  00000000  00000000  00362c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0006c464  00000000  00000000  00373ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003e68  00000000  00000000  003e0308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000bacf  00000000  00000000  003e4170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00013206  00000000  00000000  003efc3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00085104  00000000  00000000  00402e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00238cb3  00000000  00000000  00487f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  006c0bfc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000d674  00000000  00000000  006c0c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000007d  00000000  00000000  006ce2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801c524 	.word	0x0801c524

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0801c524 	.word	0x0801c524

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <__aeabi_drsub>:
 80002f4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f8:	e002      	b.n	8000300 <__adddf3>
 80002fa:	bf00      	nop

080002fc <__aeabi_dsub>:
 80002fc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000300 <__adddf3>:
 8000300:	b530      	push	{r4, r5, lr}
 8000302:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000306:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800030a:	ea94 0f05 	teq	r4, r5
 800030e:	bf08      	it	eq
 8000310:	ea90 0f02 	teqeq	r0, r2
 8000314:	bf1f      	itttt	ne
 8000316:	ea54 0c00 	orrsne.w	ip, r4, r0
 800031a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000322:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000326:	f000 80e2 	beq.w	80004ee <__adddf3+0x1ee>
 800032a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000332:	bfb8      	it	lt
 8000334:	426d      	neglt	r5, r5
 8000336:	dd0c      	ble.n	8000352 <__adddf3+0x52>
 8000338:	442c      	add	r4, r5
 800033a:	ea80 0202 	eor.w	r2, r0, r2
 800033e:	ea81 0303 	eor.w	r3, r1, r3
 8000342:	ea82 0000 	eor.w	r0, r2, r0
 8000346:	ea83 0101 	eor.w	r1, r3, r1
 800034a:	ea80 0202 	eor.w	r2, r0, r2
 800034e:	ea81 0303 	eor.w	r3, r1, r3
 8000352:	2d36      	cmp	r5, #54	@ 0x36
 8000354:	bf88      	it	hi
 8000356:	bd30      	pophi	{r4, r5, pc}
 8000358:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800035c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000360:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000364:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x70>
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000374:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000378:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800037c:	d002      	beq.n	8000384 <__adddf3+0x84>
 800037e:	4252      	negs	r2, r2
 8000380:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000384:	ea94 0f05 	teq	r4, r5
 8000388:	f000 80a7 	beq.w	80004da <__adddf3+0x1da>
 800038c:	f1a4 0401 	sub.w	r4, r4, #1
 8000390:	f1d5 0e20 	rsbs	lr, r5, #32
 8000394:	db0d      	blt.n	80003b2 <__adddf3+0xb2>
 8000396:	fa02 fc0e 	lsl.w	ip, r2, lr
 800039a:	fa22 f205 	lsr.w	r2, r2, r5
 800039e:	1880      	adds	r0, r0, r2
 80003a0:	f141 0100 	adc.w	r1, r1, #0
 80003a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a8:	1880      	adds	r0, r0, r2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	4159      	adcs	r1, r3
 80003b0:	e00e      	b.n	80003d0 <__adddf3+0xd0>
 80003b2:	f1a5 0520 	sub.w	r5, r5, #32
 80003b6:	f10e 0e20 	add.w	lr, lr, #32
 80003ba:	2a01      	cmp	r2, #1
 80003bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003c0:	bf28      	it	cs
 80003c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	18c0      	adds	r0, r0, r3
 80003cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d4:	d507      	bpl.n	80003e6 <__adddf3+0xe6>
 80003d6:	f04f 0e00 	mov.w	lr, #0
 80003da:	f1dc 0c00 	rsbs	ip, ip, #0
 80003de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ea:	d31b      	bcc.n	8000424 <__adddf3+0x124>
 80003ec:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003f0:	d30c      	bcc.n	800040c <__adddf3+0x10c>
 80003f2:	0849      	lsrs	r1, r1, #1
 80003f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003fc:	f104 0401 	add.w	r4, r4, #1
 8000400:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000404:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000408:	f080 809a 	bcs.w	8000540 <__adddf3+0x240>
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000410:	bf08      	it	eq
 8000412:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000416:	f150 0000 	adcs.w	r0, r0, #0
 800041a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041e:	ea41 0105 	orr.w	r1, r1, r5
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000428:	4140      	adcs	r0, r0
 800042a:	eb41 0101 	adc.w	r1, r1, r1
 800042e:	3c01      	subs	r4, #1
 8000430:	bf28      	it	cs
 8000432:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000436:	d2e9      	bcs.n	800040c <__adddf3+0x10c>
 8000438:	f091 0f00 	teq	r1, #0
 800043c:	bf04      	itt	eq
 800043e:	4601      	moveq	r1, r0
 8000440:	2000      	moveq	r0, #0
 8000442:	fab1 f381 	clz	r3, r1
 8000446:	bf08      	it	eq
 8000448:	3320      	addeq	r3, #32
 800044a:	f1a3 030b 	sub.w	r3, r3, #11
 800044e:	f1b3 0220 	subs.w	r2, r3, #32
 8000452:	da0c      	bge.n	800046e <__adddf3+0x16e>
 8000454:	320c      	adds	r2, #12
 8000456:	dd08      	ble.n	800046a <__adddf3+0x16a>
 8000458:	f102 0c14 	add.w	ip, r2, #20
 800045c:	f1c2 020c 	rsb	r2, r2, #12
 8000460:	fa01 f00c 	lsl.w	r0, r1, ip
 8000464:	fa21 f102 	lsr.w	r1, r1, r2
 8000468:	e00c      	b.n	8000484 <__adddf3+0x184>
 800046a:	f102 0214 	add.w	r2, r2, #20
 800046e:	bfd8      	it	le
 8000470:	f1c2 0c20 	rsble	ip, r2, #32
 8000474:	fa01 f102 	lsl.w	r1, r1, r2
 8000478:	fa20 fc0c 	lsr.w	ip, r0, ip
 800047c:	bfdc      	itt	le
 800047e:	ea41 010c 	orrle.w	r1, r1, ip
 8000482:	4090      	lslle	r0, r2
 8000484:	1ae4      	subs	r4, r4, r3
 8000486:	bfa2      	ittt	ge
 8000488:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800048c:	4329      	orrge	r1, r5
 800048e:	bd30      	popge	{r4, r5, pc}
 8000490:	ea6f 0404 	mvn.w	r4, r4
 8000494:	3c1f      	subs	r4, #31
 8000496:	da1c      	bge.n	80004d2 <__adddf3+0x1d2>
 8000498:	340c      	adds	r4, #12
 800049a:	dc0e      	bgt.n	80004ba <__adddf3+0x1ba>
 800049c:	f104 0414 	add.w	r4, r4, #20
 80004a0:	f1c4 0220 	rsb	r2, r4, #32
 80004a4:	fa20 f004 	lsr.w	r0, r0, r4
 80004a8:	fa01 f302 	lsl.w	r3, r1, r2
 80004ac:	ea40 0003 	orr.w	r0, r0, r3
 80004b0:	fa21 f304 	lsr.w	r3, r1, r4
 80004b4:	ea45 0103 	orr.w	r1, r5, r3
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	f1c4 040c 	rsb	r4, r4, #12
 80004be:	f1c4 0220 	rsb	r2, r4, #32
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 f304 	lsl.w	r3, r1, r4
 80004ca:	ea40 0003 	orr.w	r0, r0, r3
 80004ce:	4629      	mov	r1, r5
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	fa21 f004 	lsr.w	r0, r1, r4
 80004d6:	4629      	mov	r1, r5
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	f094 0f00 	teq	r4, #0
 80004de:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004e2:	bf06      	itte	eq
 80004e4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e8:	3401      	addeq	r4, #1
 80004ea:	3d01      	subne	r5, #1
 80004ec:	e74e      	b.n	800038c <__adddf3+0x8c>
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf18      	it	ne
 80004f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f8:	d029      	beq.n	800054e <__adddf3+0x24e>
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	d005      	beq.n	8000512 <__adddf3+0x212>
 8000506:	ea54 0c00 	orrs.w	ip, r4, r0
 800050a:	bf04      	itt	eq
 800050c:	4619      	moveq	r1, r3
 800050e:	4610      	moveq	r0, r2
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf1e      	ittt	ne
 8000518:	2100      	movne	r1, #0
 800051a:	2000      	movne	r0, #0
 800051c:	bd30      	popne	{r4, r5, pc}
 800051e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000522:	d105      	bne.n	8000530 <__adddf3+0x230>
 8000524:	0040      	lsls	r0, r0, #1
 8000526:	4149      	adcs	r1, r1
 8000528:	bf28      	it	cs
 800052a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052e:	bd30      	pop	{r4, r5, pc}
 8000530:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000534:	bf3c      	itt	cc
 8000536:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800053a:	bd30      	popcc	{r4, r5, pc}
 800053c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000540:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000544:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000548:	f04f 0000 	mov.w	r0, #0
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000552:	bf1a      	itte	ne
 8000554:	4619      	movne	r1, r3
 8000556:	4610      	movne	r0, r2
 8000558:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800055c:	bf1c      	itt	ne
 800055e:	460b      	movne	r3, r1
 8000560:	4602      	movne	r2, r0
 8000562:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000566:	bf06      	itte	eq
 8000568:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800056c:	ea91 0f03 	teqeq	r1, r3
 8000570:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	bf00      	nop

08000578 <__aeabi_ui2d>:
 8000578:	f090 0f00 	teq	r0, #0
 800057c:	bf04      	itt	eq
 800057e:	2100      	moveq	r1, #0
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000588:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058c:	f04f 0500 	mov.w	r5, #0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e750      	b.n	8000438 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_i2d>:
 8000598:	f090 0f00 	teq	r0, #0
 800059c:	bf04      	itt	eq
 800059e:	2100      	moveq	r1, #0
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ac:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005b0:	bf48      	it	mi
 80005b2:	4240      	negmi	r0, r0
 80005b4:	f04f 0100 	mov.w	r1, #0
 80005b8:	e73e      	b.n	8000438 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_f2d>:
 80005bc:	0042      	lsls	r2, r0, #1
 80005be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ca:	bf1f      	itttt	ne
 80005cc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005d0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d8:	4770      	bxne	lr
 80005da:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005de:	bf08      	it	eq
 80005e0:	4770      	bxeq	lr
 80005e2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e6:	bf04      	itt	eq
 80005e8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005fc:	e71c      	b.n	8000438 <__adddf3+0x138>
 80005fe:	bf00      	nop

08000600 <__aeabi_ul2d>:
 8000600:	ea50 0201 	orrs.w	r2, r0, r1
 8000604:	bf08      	it	eq
 8000606:	4770      	bxeq	lr
 8000608:	b530      	push	{r4, r5, lr}
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	e00a      	b.n	8000626 <__aeabi_l2d+0x16>

08000610 <__aeabi_l2d>:
 8000610:	ea50 0201 	orrs.w	r2, r0, r1
 8000614:	bf08      	it	eq
 8000616:	4770      	bxeq	lr
 8000618:	b530      	push	{r4, r5, lr}
 800061a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061e:	d502      	bpl.n	8000626 <__aeabi_l2d+0x16>
 8000620:	4240      	negs	r0, r0
 8000622:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000626:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800062a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000632:	f43f aed8 	beq.w	80003e6 <__adddf3+0xe6>
 8000636:	f04f 0203 	mov.w	r2, #3
 800063a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063e:	bf18      	it	ne
 8000640:	3203      	addne	r2, #3
 8000642:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000646:	bf18      	it	ne
 8000648:	3203      	addne	r2, #3
 800064a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064e:	f1c2 0320 	rsb	r3, r2, #32
 8000652:	fa00 fc03 	lsl.w	ip, r0, r3
 8000656:	fa20 f002 	lsr.w	r0, r0, r2
 800065a:	fa01 fe03 	lsl.w	lr, r1, r3
 800065e:	ea40 000e 	orr.w	r0, r0, lr
 8000662:	fa21 f102 	lsr.w	r1, r1, r2
 8000666:	4414      	add	r4, r2
 8000668:	e6bd      	b.n	80003e6 <__adddf3+0xe6>
 800066a:	bf00      	nop

0800066c <__aeabi_uldivmod>:
 800066c:	b953      	cbnz	r3, 8000684 <__aeabi_uldivmod+0x18>
 800066e:	b94a      	cbnz	r2, 8000684 <__aeabi_uldivmod+0x18>
 8000670:	2900      	cmp	r1, #0
 8000672:	bf08      	it	eq
 8000674:	2800      	cmpeq	r0, #0
 8000676:	bf1c      	itt	ne
 8000678:	f04f 31ff 	movne.w	r1, #4294967295
 800067c:	f04f 30ff 	movne.w	r0, #4294967295
 8000680:	f000 b96a 	b.w	8000958 <__aeabi_idiv0>
 8000684:	f1ad 0c08 	sub.w	ip, sp, #8
 8000688:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800068c:	f000 f806 	bl	800069c <__udivmoddi4>
 8000690:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000694:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000698:	b004      	add	sp, #16
 800069a:	4770      	bx	lr

0800069c <__udivmoddi4>:
 800069c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006a0:	9d08      	ldr	r5, [sp, #32]
 80006a2:	460c      	mov	r4, r1
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d14e      	bne.n	8000746 <__udivmoddi4+0xaa>
 80006a8:	4694      	mov	ip, r2
 80006aa:	458c      	cmp	ip, r1
 80006ac:	4686      	mov	lr, r0
 80006ae:	fab2 f282 	clz	r2, r2
 80006b2:	d962      	bls.n	800077a <__udivmoddi4+0xde>
 80006b4:	b14a      	cbz	r2, 80006ca <__udivmoddi4+0x2e>
 80006b6:	f1c2 0320 	rsb	r3, r2, #32
 80006ba:	4091      	lsls	r1, r2
 80006bc:	fa20 f303 	lsr.w	r3, r0, r3
 80006c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80006c4:	4319      	orrs	r1, r3
 80006c6:	fa00 fe02 	lsl.w	lr, r0, r2
 80006ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006ce:	fa1f f68c 	uxth.w	r6, ip
 80006d2:	fbb1 f4f7 	udiv	r4, r1, r7
 80006d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006da:	fb07 1114 	mls	r1, r7, r4, r1
 80006de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006e2:	fb04 f106 	mul.w	r1, r4, r6
 80006e6:	4299      	cmp	r1, r3
 80006e8:	d90a      	bls.n	8000700 <__udivmoddi4+0x64>
 80006ea:	eb1c 0303 	adds.w	r3, ip, r3
 80006ee:	f104 30ff 	add.w	r0, r4, #4294967295
 80006f2:	f080 8112 	bcs.w	800091a <__udivmoddi4+0x27e>
 80006f6:	4299      	cmp	r1, r3
 80006f8:	f240 810f 	bls.w	800091a <__udivmoddi4+0x27e>
 80006fc:	3c02      	subs	r4, #2
 80006fe:	4463      	add	r3, ip
 8000700:	1a59      	subs	r1, r3, r1
 8000702:	fa1f f38e 	uxth.w	r3, lr
 8000706:	fbb1 f0f7 	udiv	r0, r1, r7
 800070a:	fb07 1110 	mls	r1, r7, r0, r1
 800070e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000712:	fb00 f606 	mul.w	r6, r0, r6
 8000716:	429e      	cmp	r6, r3
 8000718:	d90a      	bls.n	8000730 <__udivmoddi4+0x94>
 800071a:	eb1c 0303 	adds.w	r3, ip, r3
 800071e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000722:	f080 80fc 	bcs.w	800091e <__udivmoddi4+0x282>
 8000726:	429e      	cmp	r6, r3
 8000728:	f240 80f9 	bls.w	800091e <__udivmoddi4+0x282>
 800072c:	4463      	add	r3, ip
 800072e:	3802      	subs	r0, #2
 8000730:	1b9b      	subs	r3, r3, r6
 8000732:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000736:	2100      	movs	r1, #0
 8000738:	b11d      	cbz	r5, 8000742 <__udivmoddi4+0xa6>
 800073a:	40d3      	lsrs	r3, r2
 800073c:	2200      	movs	r2, #0
 800073e:	e9c5 3200 	strd	r3, r2, [r5]
 8000742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000746:	428b      	cmp	r3, r1
 8000748:	d905      	bls.n	8000756 <__udivmoddi4+0xba>
 800074a:	b10d      	cbz	r5, 8000750 <__udivmoddi4+0xb4>
 800074c:	e9c5 0100 	strd	r0, r1, [r5]
 8000750:	2100      	movs	r1, #0
 8000752:	4608      	mov	r0, r1
 8000754:	e7f5      	b.n	8000742 <__udivmoddi4+0xa6>
 8000756:	fab3 f183 	clz	r1, r3
 800075a:	2900      	cmp	r1, #0
 800075c:	d146      	bne.n	80007ec <__udivmoddi4+0x150>
 800075e:	42a3      	cmp	r3, r4
 8000760:	d302      	bcc.n	8000768 <__udivmoddi4+0xcc>
 8000762:	4290      	cmp	r0, r2
 8000764:	f0c0 80f0 	bcc.w	8000948 <__udivmoddi4+0x2ac>
 8000768:	1a86      	subs	r6, r0, r2
 800076a:	eb64 0303 	sbc.w	r3, r4, r3
 800076e:	2001      	movs	r0, #1
 8000770:	2d00      	cmp	r5, #0
 8000772:	d0e6      	beq.n	8000742 <__udivmoddi4+0xa6>
 8000774:	e9c5 6300 	strd	r6, r3, [r5]
 8000778:	e7e3      	b.n	8000742 <__udivmoddi4+0xa6>
 800077a:	2a00      	cmp	r2, #0
 800077c:	f040 8090 	bne.w	80008a0 <__udivmoddi4+0x204>
 8000780:	eba1 040c 	sub.w	r4, r1, ip
 8000784:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000788:	fa1f f78c 	uxth.w	r7, ip
 800078c:	2101      	movs	r1, #1
 800078e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000792:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000796:	fb08 4416 	mls	r4, r8, r6, r4
 800079a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800079e:	fb07 f006 	mul.w	r0, r7, r6
 80007a2:	4298      	cmp	r0, r3
 80007a4:	d908      	bls.n	80007b8 <__udivmoddi4+0x11c>
 80007a6:	eb1c 0303 	adds.w	r3, ip, r3
 80007aa:	f106 34ff 	add.w	r4, r6, #4294967295
 80007ae:	d202      	bcs.n	80007b6 <__udivmoddi4+0x11a>
 80007b0:	4298      	cmp	r0, r3
 80007b2:	f200 80cd 	bhi.w	8000950 <__udivmoddi4+0x2b4>
 80007b6:	4626      	mov	r6, r4
 80007b8:	1a1c      	subs	r4, r3, r0
 80007ba:	fa1f f38e 	uxth.w	r3, lr
 80007be:	fbb4 f0f8 	udiv	r0, r4, r8
 80007c2:	fb08 4410 	mls	r4, r8, r0, r4
 80007c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007ca:	fb00 f707 	mul.w	r7, r0, r7
 80007ce:	429f      	cmp	r7, r3
 80007d0:	d908      	bls.n	80007e4 <__udivmoddi4+0x148>
 80007d2:	eb1c 0303 	adds.w	r3, ip, r3
 80007d6:	f100 34ff 	add.w	r4, r0, #4294967295
 80007da:	d202      	bcs.n	80007e2 <__udivmoddi4+0x146>
 80007dc:	429f      	cmp	r7, r3
 80007de:	f200 80b0 	bhi.w	8000942 <__udivmoddi4+0x2a6>
 80007e2:	4620      	mov	r0, r4
 80007e4:	1bdb      	subs	r3, r3, r7
 80007e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007ea:	e7a5      	b.n	8000738 <__udivmoddi4+0x9c>
 80007ec:	f1c1 0620 	rsb	r6, r1, #32
 80007f0:	408b      	lsls	r3, r1
 80007f2:	fa22 f706 	lsr.w	r7, r2, r6
 80007f6:	431f      	orrs	r7, r3
 80007f8:	fa20 fc06 	lsr.w	ip, r0, r6
 80007fc:	fa04 f301 	lsl.w	r3, r4, r1
 8000800:	ea43 030c 	orr.w	r3, r3, ip
 8000804:	40f4      	lsrs	r4, r6
 8000806:	fa00 f801 	lsl.w	r8, r0, r1
 800080a:	0c38      	lsrs	r0, r7, #16
 800080c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000810:	fbb4 fef0 	udiv	lr, r4, r0
 8000814:	fa1f fc87 	uxth.w	ip, r7
 8000818:	fb00 441e 	mls	r4, r0, lr, r4
 800081c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000820:	fb0e f90c 	mul.w	r9, lr, ip
 8000824:	45a1      	cmp	r9, r4
 8000826:	fa02 f201 	lsl.w	r2, r2, r1
 800082a:	d90a      	bls.n	8000842 <__udivmoddi4+0x1a6>
 800082c:	193c      	adds	r4, r7, r4
 800082e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000832:	f080 8084 	bcs.w	800093e <__udivmoddi4+0x2a2>
 8000836:	45a1      	cmp	r9, r4
 8000838:	f240 8081 	bls.w	800093e <__udivmoddi4+0x2a2>
 800083c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000840:	443c      	add	r4, r7
 8000842:	eba4 0409 	sub.w	r4, r4, r9
 8000846:	fa1f f983 	uxth.w	r9, r3
 800084a:	fbb4 f3f0 	udiv	r3, r4, r0
 800084e:	fb00 4413 	mls	r4, r0, r3, r4
 8000852:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000856:	fb03 fc0c 	mul.w	ip, r3, ip
 800085a:	45a4      	cmp	ip, r4
 800085c:	d907      	bls.n	800086e <__udivmoddi4+0x1d2>
 800085e:	193c      	adds	r4, r7, r4
 8000860:	f103 30ff 	add.w	r0, r3, #4294967295
 8000864:	d267      	bcs.n	8000936 <__udivmoddi4+0x29a>
 8000866:	45a4      	cmp	ip, r4
 8000868:	d965      	bls.n	8000936 <__udivmoddi4+0x29a>
 800086a:	3b02      	subs	r3, #2
 800086c:	443c      	add	r4, r7
 800086e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000872:	fba0 9302 	umull	r9, r3, r0, r2
 8000876:	eba4 040c 	sub.w	r4, r4, ip
 800087a:	429c      	cmp	r4, r3
 800087c:	46ce      	mov	lr, r9
 800087e:	469c      	mov	ip, r3
 8000880:	d351      	bcc.n	8000926 <__udivmoddi4+0x28a>
 8000882:	d04e      	beq.n	8000922 <__udivmoddi4+0x286>
 8000884:	b155      	cbz	r5, 800089c <__udivmoddi4+0x200>
 8000886:	ebb8 030e 	subs.w	r3, r8, lr
 800088a:	eb64 040c 	sbc.w	r4, r4, ip
 800088e:	fa04 f606 	lsl.w	r6, r4, r6
 8000892:	40cb      	lsrs	r3, r1
 8000894:	431e      	orrs	r6, r3
 8000896:	40cc      	lsrs	r4, r1
 8000898:	e9c5 6400 	strd	r6, r4, [r5]
 800089c:	2100      	movs	r1, #0
 800089e:	e750      	b.n	8000742 <__udivmoddi4+0xa6>
 80008a0:	f1c2 0320 	rsb	r3, r2, #32
 80008a4:	fa20 f103 	lsr.w	r1, r0, r3
 80008a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ac:	fa24 f303 	lsr.w	r3, r4, r3
 80008b0:	4094      	lsls	r4, r2
 80008b2:	430c      	orrs	r4, r1
 80008b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b8:	fa00 fe02 	lsl.w	lr, r0, r2
 80008bc:	fa1f f78c 	uxth.w	r7, ip
 80008c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80008c4:	fb08 3110 	mls	r1, r8, r0, r3
 80008c8:	0c23      	lsrs	r3, r4, #16
 80008ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ce:	fb00 f107 	mul.w	r1, r0, r7
 80008d2:	4299      	cmp	r1, r3
 80008d4:	d908      	bls.n	80008e8 <__udivmoddi4+0x24c>
 80008d6:	eb1c 0303 	adds.w	r3, ip, r3
 80008da:	f100 36ff 	add.w	r6, r0, #4294967295
 80008de:	d22c      	bcs.n	800093a <__udivmoddi4+0x29e>
 80008e0:	4299      	cmp	r1, r3
 80008e2:	d92a      	bls.n	800093a <__udivmoddi4+0x29e>
 80008e4:	3802      	subs	r0, #2
 80008e6:	4463      	add	r3, ip
 80008e8:	1a5b      	subs	r3, r3, r1
 80008ea:	b2a4      	uxth	r4, r4
 80008ec:	fbb3 f1f8 	udiv	r1, r3, r8
 80008f0:	fb08 3311 	mls	r3, r8, r1, r3
 80008f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f8:	fb01 f307 	mul.w	r3, r1, r7
 80008fc:	42a3      	cmp	r3, r4
 80008fe:	d908      	bls.n	8000912 <__udivmoddi4+0x276>
 8000900:	eb1c 0404 	adds.w	r4, ip, r4
 8000904:	f101 36ff 	add.w	r6, r1, #4294967295
 8000908:	d213      	bcs.n	8000932 <__udivmoddi4+0x296>
 800090a:	42a3      	cmp	r3, r4
 800090c:	d911      	bls.n	8000932 <__udivmoddi4+0x296>
 800090e:	3902      	subs	r1, #2
 8000910:	4464      	add	r4, ip
 8000912:	1ae4      	subs	r4, r4, r3
 8000914:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000918:	e739      	b.n	800078e <__udivmoddi4+0xf2>
 800091a:	4604      	mov	r4, r0
 800091c:	e6f0      	b.n	8000700 <__udivmoddi4+0x64>
 800091e:	4608      	mov	r0, r1
 8000920:	e706      	b.n	8000730 <__udivmoddi4+0x94>
 8000922:	45c8      	cmp	r8, r9
 8000924:	d2ae      	bcs.n	8000884 <__udivmoddi4+0x1e8>
 8000926:	ebb9 0e02 	subs.w	lr, r9, r2
 800092a:	eb63 0c07 	sbc.w	ip, r3, r7
 800092e:	3801      	subs	r0, #1
 8000930:	e7a8      	b.n	8000884 <__udivmoddi4+0x1e8>
 8000932:	4631      	mov	r1, r6
 8000934:	e7ed      	b.n	8000912 <__udivmoddi4+0x276>
 8000936:	4603      	mov	r3, r0
 8000938:	e799      	b.n	800086e <__udivmoddi4+0x1d2>
 800093a:	4630      	mov	r0, r6
 800093c:	e7d4      	b.n	80008e8 <__udivmoddi4+0x24c>
 800093e:	46d6      	mov	lr, sl
 8000940:	e77f      	b.n	8000842 <__udivmoddi4+0x1a6>
 8000942:	4463      	add	r3, ip
 8000944:	3802      	subs	r0, #2
 8000946:	e74d      	b.n	80007e4 <__udivmoddi4+0x148>
 8000948:	4606      	mov	r6, r0
 800094a:	4623      	mov	r3, r4
 800094c:	4608      	mov	r0, r1
 800094e:	e70f      	b.n	8000770 <__udivmoddi4+0xd4>
 8000950:	3e02      	subs	r6, #2
 8000952:	4463      	add	r3, ip
 8000954:	e730      	b.n	80007b8 <__udivmoddi4+0x11c>
 8000956:	bf00      	nop

08000958 <__aeabi_idiv0>:
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <_Z11SensorsTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SensorsTask */
void SensorsTask(void *argument)
{
 800095c:	b508      	push	{r3, lr}
  for(;;)
  {
#ifdef USE_SENSORS
	  sensors.Spin();
#else
	  osDelay(1000);
 800095e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000962:	f00b fead 	bl	800c6c0 <osDelay>
  for(;;)
 8000966:	e7fa      	b.n	800095e <_Z11SensorsTaskPv+0x2>

08000968 <_Z17CommunicationTaskPv>:
{
  /* USER CODE BEGIN CommunicationTask */
  /* Infinite loop */
  for(;;)
  {
	  communication.Spin();
 8000968:	4c02      	ldr	r4, [pc, #8]	@ (8000974 <_Z17CommunicationTaskPv+0xc>)
{
 800096a:	b508      	push	{r3, lr}
	  communication.Spin();
 800096c:	4620      	mov	r0, r4
 800096e:	f00f f8dd 	bl	800fb2c <_ZN13Communication4SpinEv>
  for(;;)
 8000972:	e7fb      	b.n	800096c <_Z17CommunicationTaskPv+0x4>
 8000974:	24001660 	.word	0x24001660

08000978 <_Z8LEDsTaskPv>:
  /* USER CODE BEGIN LEDsTask */
  /* Infinite loop */
  for(;;)
  {
#ifdef USE_LEDS
	  leds.Spin();
 8000978:	4c02      	ldr	r4, [pc, #8]	@ (8000984 <_Z8LEDsTaskPv+0xc>)
{
 800097a:	b508      	push	{r3, lr}
	  leds.Spin();
 800097c:	4620      	mov	r0, r4
 800097e:	f013 f99c 	bl	8013cba <_ZN4LEDS4SpinEv>
  for(;;)
 8000982:	e7fb      	b.n	800097c <_Z8LEDsTaskPv+0x4>
 8000984:	24000144 	.word	0x24000144

08000988 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb>:
 * @param input pointer: the hardware interface handle pointer
 * @param output success: whether successful
 * @return the interface ID associated to the input handle
 */
template<typename H>
uint8_t TemplateCommunicationProtocol<H>::GetID(void* pointer, bool* success) {
 8000988:	b4f0      	push	{r4, r5, r6, r7}
 800098a:	e9d0 350e 	ldrd	r3, r5, [r0, #56]	@ 0x38
	uint8_t index = 0;
	for (H* interface : interfaces) {
 800098e:	2400      	movs	r4, #0
 8000990:	429d      	cmp	r5, r3
 8000992:	461e      	mov	r6, r3
 8000994:	d103      	bne.n	800099e <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x16>
		if (interface == pointer)
			return GetIDFromIndex(index, success);
		index += 1;
	}
	*success = false;
 8000996:	2000      	movs	r0, #0
	return 0;
}
 8000998:	bcf0      	pop	{r4, r5, r6, r7}
	*success = false;
 800099a:	7010      	strb	r0, [r2, #0]
}
 800099c:	4770      	bx	lr
		if (interface == pointer)
 800099e:	6836      	ldr	r6, [r6, #0]
 80009a0:	3304      	adds	r3, #4
 80009a2:	1c67      	adds	r7, r4, #1
 80009a4:	428e      	cmp	r6, r1
 80009a6:	d103      	bne.n	80009b0 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x28>
			return GetIDFromIndex(index, success);
 80009a8:	b2e1      	uxtb	r1, r4
}
 80009aa:	bcf0      	pop	{r4, r5, r6, r7}
			return GetIDFromIndex(index, success);
 80009ac:	f014 bfd1 	b.w	8015952 <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>
 80009b0:	463c      	mov	r4, r7
 80009b2:	e7ed      	b.n	8000990 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x8>

080009b4 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb>:
uint8_t TemplateCommunicationProtocol<H>::GetID(void* pointer, bool* success) {
 80009b4:	b4f0      	push	{r4, r5, r6, r7}
 80009b6:	e9d0 350e 	ldrd	r3, r5, [r0, #56]	@ 0x38
	for (H* interface : interfaces) {
 80009ba:	2400      	movs	r4, #0
 80009bc:	429d      	cmp	r5, r3
 80009be:	461e      	mov	r6, r3
 80009c0:	d103      	bne.n	80009ca <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x16>
	*success = false;
 80009c2:	2000      	movs	r0, #0
}
 80009c4:	bcf0      	pop	{r4, r5, r6, r7}
	*success = false;
 80009c6:	7010      	strb	r0, [r2, #0]
}
 80009c8:	4770      	bx	lr
		if (interface == pointer)
 80009ca:	6836      	ldr	r6, [r6, #0]
 80009cc:	3304      	adds	r3, #4
 80009ce:	1c67      	adds	r7, r4, #1
 80009d0:	428e      	cmp	r6, r1
 80009d2:	d103      	bne.n	80009dc <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x28>
			return GetIDFromIndex(index, success);
 80009d4:	b2e1      	uxtb	r1, r4
}
 80009d6:	bcf0      	pop	{r4, r5, r6, r7}
			return GetIDFromIndex(index, success);
 80009d8:	f014 bfbb 	b.w	8015952 <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>
 80009dc:	463c      	mov	r4, r7
 80009de:	e7ed      	b.n	80009bc <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x8>

080009e0 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>:
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80009e0:	0089      	lsls	r1, r1, #2
 80009e2:	f01b b8f3 	b.w	801bbcc <_ZdlPvj>

080009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>:
 80009e6:	0109      	lsls	r1, r1, #4
 80009e8:	f01b b8f0 	b.w	801bbcc <_ZdlPvj>

080009ec <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
      _GLIBCXX20_CONSTEXPR
      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80009ec:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 80009ee:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80009f0:	d006      	beq.n	8000a00 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80009f2:	da01      	bge.n	80009f8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 80009f4:	f01b f9be 	bl	801bd74 <_ZSt17__throw_bad_allocv>
      }
 80009f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80009fc:	f01b b90b 	b.w	801bc16 <_Znwj>
 8000a00:	bd08      	pop	{r3, pc}
	...

08000a04 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000a04:	b513      	push	{r0, r1, r4, lr}
 8000a06:	4601      	mov	r1, r0
	uint8_t ID = communication.GetID((void*) huart, &success);
 8000a08:	f10d 0207 	add.w	r2, sp, #7
 8000a0c:	480a      	ldr	r0, [pc, #40]	@ (8000a38 <HAL_UART_ErrorCallback+0x34>)
 8000a0e:	f00e fb9b 	bl	800f148 <_ZN13Communication5GetIDEPvPb>
	if (!success) {return;}
 8000a12:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t ID = communication.GetID((void*) huart, &success);
 8000a16:	4604      	mov	r4, r0
	if (!success) {return;}
 8000a18:	b15b      	cbz	r3, 8000a32 <HAL_UART_ErrorCallback+0x2e>
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 8000a1a:	4601      	mov	r1, r0
 8000a1c:	f10d 0207 	add.w	r2, sp, #7
 8000a20:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <HAL_UART_ErrorCallback+0x34>)
 8000a22:	f00e fbb0 	bl	800f186 <_ZN13Communication14GetBufferIndexEhPb>
	*buffer_index = 0; // resets the buffer index to the DMA pointer
 8000a26:	2300      	movs	r3, #0
	communication.ActivateReception(ID);
 8000a28:	4621      	mov	r1, r4
	*buffer_index = 0; // resets the buffer index to the DMA pointer
 8000a2a:	8003      	strh	r3, [r0, #0]
	communication.ActivateReception(ID);
 8000a2c:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <HAL_UART_ErrorCallback+0x34>)
 8000a2e:	f00e fbc5 	bl	800f1bc <_ZN13Communication17ActivateReceptionEh>
}
 8000a32:	b002      	add	sp, #8
 8000a34:	bd10      	pop	{r4, pc}
 8000a36:	bf00      	nop
 8000a38:	24001660 	.word	0x24001660

08000a3c <HAL_FDCAN_ErrorCallback>:
void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan) {
 8000a3c:	b507      	push	{r0, r1, r2, lr}
 8000a3e:	4601      	mov	r1, r0
	uint8_t ID = communication.GetID((void*) hfdcan, &success);
 8000a40:	f10d 0207 	add.w	r2, sp, #7
 8000a44:	4806      	ldr	r0, [pc, #24]	@ (8000a60 <HAL_FDCAN_ErrorCallback+0x24>)
 8000a46:	f00e fb7f 	bl	800f148 <_ZN13Communication5GetIDEPvPb>
	if (!success) {return;}
 8000a4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t ID = communication.GetID((void*) hfdcan, &success);
 8000a4e:	4601      	mov	r1, r0
	if (!success) {return;}
 8000a50:	b113      	cbz	r3, 8000a58 <HAL_FDCAN_ErrorCallback+0x1c>
	communication.ActivateReception(ID);
 8000a52:	4803      	ldr	r0, [pc, #12]	@ (8000a60 <HAL_FDCAN_ErrorCallback+0x24>)
 8000a54:	f00e fbb2 	bl	800f1bc <_ZN13Communication17ActivateReceptionEh>
}
 8000a58:	b003      	add	sp, #12
 8000a5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a5e:	bf00      	nop
 8000a60:	24001660 	.word	0x24001660

08000a64 <_Z18SystemClock_Configv>:
{
 8000a64:	b510      	push	{r4, lr}
 8000a66:	b09e      	sub	sp, #120	@ 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a68:	224c      	movs	r2, #76	@ 0x4c
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	a80b      	add	r0, sp, #44	@ 0x2c
 8000a6e:	f01b fc23 	bl	801c2b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a72:	2220      	movs	r2, #32
 8000a74:	2100      	movs	r1, #0
 8000a76:	a803      	add	r0, sp, #12
 8000a78:	f01b fc1e 	bl	801c2b8 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	f006 fa8f 	bl	8006fa0 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a82:	2300      	movs	r3, #0
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	4b3a      	ldr	r3, [pc, #232]	@ (8000b70 <_Z18SystemClock_Configv+0x10c>)
 8000a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a8a:	f022 0201 	bic.w	r2, r2, #1
 8000a8e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	4b36      	ldr	r3, [pc, #216]	@ (8000b74 <_Z18SystemClock_Configv+0x110>)
 8000a9a:	699a      	ldr	r2, [r3, #24]
 8000a9c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000aa0:	619a      	str	r2, [r3, #24]
 8000aa2:	699a      	ldr	r2, [r3, #24]
 8000aa4:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000aa8:	9200      	str	r2, [sp, #0]
 8000aaa:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aac:	699a      	ldr	r2, [r3, #24]
 8000aae:	0492      	lsls	r2, r2, #18
 8000ab0:	d5fc      	bpl.n	8000aac <_Z18SystemClock_Configv+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4a31      	ldr	r2, [pc, #196]	@ (8000b78 <_Z18SystemClock_Configv+0x114>)
 8000ab4:	f8d2 10f4 	ldr.w	r1, [r2, #244]	@ 0xf4
 8000ab8:	f041 0102 	orr.w	r1, r1, #2
 8000abc:	f8c2 10f4 	str.w	r1, [r2, #244]	@ 0xf4
 8000ac0:	f8d2 10f4 	ldr.w	r1, [r2, #244]	@ 0xf4
 8000ac4:	f001 0102 	and.w	r1, r1, #2
 8000ac8:	9101      	str	r1, [sp, #4]
 8000aca:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000acc:	2100      	movs	r1, #0
 8000ace:	9102      	str	r1, [sp, #8]
 8000ad0:	6999      	ldr	r1, [r3, #24]
 8000ad2:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8000ad6:	6199      	str	r1, [r3, #24]
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ade:	9302      	str	r3, [sp, #8]
 8000ae0:	4b23      	ldr	r3, [pc, #140]	@ (8000b70 <_Z18SystemClock_Configv+0x10c>)
 8000ae2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000ae4:	f041 0101 	orr.w	r1, r1, #1
 8000ae8:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aec:	4921      	ldr	r1, [pc, #132]	@ (8000b74 <_Z18SystemClock_Configv+0x110>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	9302      	str	r3, [sp, #8]
 8000af4:	9b02      	ldr	r3, [sp, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000af6:	698b      	ldr	r3, [r1, #24]
 8000af8:	049b      	lsls	r3, r3, #18
 8000afa:	d5fc      	bpl.n	8000af6 <_Z18SystemClock_Configv+0x92>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000afc:	6a93      	ldr	r3, [r2, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000afe:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000b00:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b02:	f04f 0c0c 	mov.w	ip, #12
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000b06:	f023 0303 	bic.w	r3, r3, #3
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	6293      	str	r3, [r2, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000b14:	2250      	movs	r2, #80	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b16:	e9cd 030b 	strd	r0, r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1a:	2302      	movs	r3, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1c:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1e:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b22:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b24:	e9cd 2317 	strd	r2, r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000b28:	2318      	movs	r3, #24
 8000b2a:	e9cd 3419 	strd	r3, r4, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e9cd c31b 	strd	ip, r3, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b34:	931d      	str	r3, [sp, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b36:	f006 fa5d 	bl	8006ff4 <HAL_RCC_OscConfig>
 8000b3a:	b108      	cbz	r0, 8000b40 <_Z18SystemClock_Configv+0xdc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <_Z18SystemClock_Configv+0xda>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b40:	223f      	movs	r2, #63	@ 0x3f
 8000b42:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b44:	2108      	movs	r1, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b46:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b48:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b4e:	2340      	movs	r3, #64	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b54:	e9cd 1306 	strd	r1, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b58:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b5a:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b5c:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b60:	f006 fe7c 	bl	800785c <HAL_RCC_ClockConfig>
 8000b64:	b108      	cbz	r0, 8000b6a <_Z18SystemClock_Configv+0x106>
 8000b66:	b672      	cpsid	i
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <_Z18SystemClock_Configv+0x104>
}
 8000b6a:	b01e      	add	sp, #120	@ 0x78
 8000b6c:	bd10      	pop	{r4, pc}
 8000b6e:	bf00      	nop
 8000b70:	58000400 	.word	0x58000400
 8000b74:	58024800 	.word	0x58024800
 8000b78:	58024400 	.word	0x58024400

08000b7c <_Z24PeriphCommonClock_Configv>:
{
 8000b7c:	b500      	push	{lr}
 8000b7e:	b0b1      	sub	sp, #196	@ 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b80:	22a0      	movs	r2, #160	@ 0xa0
 8000b82:	2100      	movs	r1, #0
 8000b84:	a808      	add	r0, sp, #32
 8000b86:	f01b fb97 	bl	801c2b8 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 3;
 8000b8a:	f44f 2308 	mov.w	r3, #557056	@ 0x88000
 8000b8e:	2203      	movs	r2, #3
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b90:	2119      	movs	r1, #25
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b92:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLL2.PLL2M = 3;
 8000b94:	e9cd 3201 	strd	r3, r2, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	e9cd 1303 	strd	r1, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b9e:	21c0      	movs	r1, #192	@ 0xc0
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000ba0:	930a      	str	r3, [sp, #40]	@ 0x28
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ba2:	9107      	str	r1, [sp, #28]
  PeriphClkInitStruct.PLL3.PLL3N = 40;
 8000ba4:	2128      	movs	r1, #40	@ 0x28
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ba6:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000baa:	e9cd 130b 	strd	r1, r3, [sp, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000bae:	e9cd 320d 	strd	r3, r2, [sp, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000bb2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000bb6:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000bb8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000bbc:	931c      	str	r3, [sp, #112]	@ 0x70
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000bbe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bc2:	9329      	str	r3, [sp, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc4:	f007 f910 	bl	8007de8 <HAL_RCCEx_PeriphCLKConfig>
 8000bc8:	b108      	cbz	r0, 8000bce <_Z24PeriphCommonClock_Configv+0x52>
 8000bca:	b672      	cpsid	i
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <_Z24PeriphCommonClock_Configv+0x50>
}
 8000bce:	b031      	add	sp, #196	@ 0xc4
 8000bd0:	f85d fb04 	ldr.w	pc, [sp], #4

08000bd4 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM5) {
 8000bd4:	6802      	ldr	r2, [r0, #0]
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000bd8:	429a      	cmp	r2, r3
{
 8000bda:	b510      	push	{r4, lr}
 8000bdc:	4604      	mov	r4, r0
  if (htim->Instance == TIM5) {
 8000bde:	d101      	bne.n	8000be4 <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8000be0:	f002 fd70 	bl	80036c4 <HAL_IncTick>
  if (hardware_delay.AssignedTimer(htim)) {
 8000be4:	4621      	mov	r1, r4
 8000be6:	4806      	ldr	r0, [pc, #24]	@ (8000c00 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000be8:	f012 ff42 	bl	8013a70 <_ZN13HardwareDelay13AssignedTimerEP17TIM_HandleTypeDef>
 8000bec:	b120      	cbz	r0, 8000bf8 <HAL_TIM_PeriodElapsedCallback+0x24>
    hardware_delay.TriggeredDelay();
 8000bee:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <HAL_TIM_PeriodElapsedCallback+0x2c>)
}
 8000bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hardware_delay.TriggeredDelay();
 8000bf4:	f012 bfab 	b.w	8013b4e <_ZN13HardwareDelay14TriggeredDelayEv>
}
 8000bf8:	bd10      	pop	{r4, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40000c00 	.word	0x40000c00
 8000c00:	240001e8 	.word	0x240001e8

08000c04 <Error_Handler>:
 8000c04:	b672      	cpsid	i
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <Error_Handler+0x2>

08000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000c08:	b510      	push	{r4, lr}
 8000c0a:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8000c0c:	6800      	ldr	r0, [r0, #0]
      _GLIBCXX20_CONSTEXPR
      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 8000c0e:	b118      	cbz	r0, 8000c18 <_ZNSt12_Vector_baseIhSaIhEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000c10:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000c12:	1a09      	subs	r1, r1, r0
 8000c14:	f01a ffda 	bl	801bbcc <_ZdlPvj>
      }
 8000c18:	4620      	mov	r0, r4
 8000c1a:	bd10      	pop	{r4, pc}

08000c1c <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      _GLIBCXX20_CONSTEXPR
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8000c1c:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8000c1e:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8000c20:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8000c22:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8000c24:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8000c28:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8000c2a:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8000c2c:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8000c2e:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8000c30:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8000c32:	688d      	ldr	r5, [r1, #8]
 8000c34:	6085      	str	r5, [r0, #8]
      }
 8000c36:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8000c38:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8000c3a:	e9c1 3300 	strd	r3, r3, [r1]
 8000c3e:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8000c42:	f7ff ffe1 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	constexpr bool __move_storage =
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
	return *this;
      }
 8000c46:	b005      	add	sp, #20
 8000c48:	bd30      	pop	{r4, r5, pc}

08000c4a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8000c4a:	b510      	push	{r4, lr}
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000c50:	e9d4 2300 	ldrd	r2, r3, [r4]
      {
	if (max_size() - size() < __n)
 8000c54:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000c58:	1a9b      	subs	r3, r3, r2
	if (max_size() - size() < __n)
 8000c5a:	1ae2      	subs	r2, r4, r3
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	d201      	bcs.n	8000c64 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x1a>
	  __throw_length_error(__N(__s));
 8000c60:	f01b f88e 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
 8000c64:	4299      	cmp	r1, r3
 8000c66:	bf38      	it	cc
 8000c68:	4619      	movcc	r1, r3
 8000c6a:	185b      	adds	r3, r3, r1
 8000c6c:	d204      	bcs.n	8000c78 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x2e>
 8000c6e:	42a3      	cmp	r3, r4
 8000c70:	bf28      	it	cs
 8000c72:	4623      	movcs	r3, r4
 8000c74:	4618      	mov	r0, r3

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }
 8000c76:	bd10      	pop	{r4, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000c78:	4620      	mov	r0, r4
 8000c7a:	e7fc      	b.n	8000c76 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x2c>

08000c7c <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8000c7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000c80:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8000c84:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8000c86:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000c8a:	ebaa 0208 	sub.w	r2, sl, r8
 8000c8e:	4607      	mov	r7, r0
 8000c90:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 8000c92:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000c96:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 8000c9a:	d102      	bne.n	8000ca2 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8000c9c:	481f      	ldr	r0, [pc, #124]	@ (8000d1c <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>)
 8000c9e:	f01b f86f 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000ca2:	45c2      	cmp	sl, r8
 8000ca4:	bf14      	ite	ne
 8000ca6:	4622      	movne	r2, r4
 8000ca8:	2201      	moveq	r2, #1
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8000caa:	eba1 0508 	sub.w	r5, r1, r8
 8000cae:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000cb0:	d22f      	bcs.n	8000d12 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000cb2:	b384      	cbz	r4, 8000d16 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000cb4:	429c      	cmp	r4, r3
 8000cb6:	bf28      	it	cs
 8000cb8:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8000cba:	00a0      	lsls	r0, r4, #2
 8000cbc:	f01a ffab 	bl	801bc16 <_Znwj>
 8000cc0:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000cc2:	f8db 3000 	ldr.w	r3, [fp]
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result,
		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	5173      	str	r3, [r6, r5]
 8000cca:	dd04      	ble.n	8000cd6 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000ccc:	462a      	mov	r2, r5
 8000cce:	4641      	mov	r1, r8
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	f01b fad7 	bl	801c284 <memmove>
      ptrdiff_t __count = __last - __first;
 8000cd6:	ebaa 0a09 	sub.w	sl, sl, r9
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 8000cda:	3504      	adds	r5, #4
      if (__count > 0)
 8000cdc:	f1ba 0f00 	cmp.w	sl, #0
 8000ce0:	4435      	add	r5, r6
 8000ce2:	dd04      	ble.n	8000cee <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000ce4:	4652      	mov	r2, sl
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	4628      	mov	r0, r5
 8000cea:	f01b fbc3 	bl	801c474 <memcpy>
	}
      return __result + __count;
 8000cee:	4455      	add	r5, sl
	if (__p)
 8000cf0:	f1b8 0f00 	cmp.w	r8, #0
 8000cf4:	d006      	beq.n	8000d04 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x88>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 8000cf6:	68b9      	ldr	r1, [r7, #8]
 8000cf8:	4640      	mov	r0, r8
 8000cfa:	eba1 0108 	sub.w	r1, r1, r8
 8000cfe:	1089      	asrs	r1, r1, #2
 8000d00:	f7ff fe6e 	bl	80009e0 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
 8000d04:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000d08:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8000d0c:	60be      	str	r6, [r7, #8]
    }
 8000d0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000d12:	461c      	mov	r4, r3
 8000d14:	e7d1      	b.n	8000cba <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000d16:	4626      	mov	r6, r4
 8000d18:	e7d3      	b.n	8000cc2 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8000d1a:	bf00      	nop
 8000d1c:	0801c592 	.word	0x0801c592

08000d20 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>:
void TemplateCommunicationProtocol<H>::AddInterface(uint8_t ID, H* interface) {
 8000d20:	b513      	push	{r0, r1, r4, lr}
 8000d22:	4604      	mov	r4, r0
 8000d24:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 8000d26:	f014 fdaf 	bl	8015888 <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	f014 ff46 	bl	8015bbc <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000d30:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	@ 0x3c
 8000d34:	4299      	cmp	r1, r3
 8000d36:	d005      	beq.n	8000d44 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_+0x24>
 8000d38:	9b01      	ldr	r3, [sp, #4]
 8000d3a:	f841 3b04 	str.w	r3, [r1], #4
	    ++this->_M_impl._M_finish;
 8000d3e:	63e1      	str	r1, [r4, #60]	@ 0x3c
}
 8000d40:	b002      	add	sp, #8
 8000d42:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 8000d44:	aa01      	add	r2, sp, #4
 8000d46:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8000d4a:	f7ff ff97 	bl	8000c7c <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 8000d4e:	e7f7      	b.n	8000d40 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_+0x20>

08000d50 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8000d50:	b510      	push	{r4, lr}
	  if (__n > 0)
 8000d52:	460a      	mov	r2, r1
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8000d54:	4604      	mov	r4, r0
	  if (__n > 0)
 8000d56:	b141      	cbz	r1, 8000d6a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_+0x1a>
	  // Allow std::_Construct to be used in constant expressions.
	  std::construct_at(__p, std::forward<_Args>(__args)...);
	  return;
	}
#endif
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8000d58:	2100      	movs	r1, #0
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
 8000d5a:	2a01      	cmp	r2, #1
 8000d5c:	f800 1b01 	strb.w	r1, [r0], #1
 8000d60:	d005      	beq.n	8000d6e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_+0x1e>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
 8000d62:	4414      	add	r4, r2
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8000d64:	3a01      	subs	r2, #1
 8000d66:	f01b faa7 	bl	801c2b8 <memset>
	}
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	bd10      	pop	{r4, pc}
	      ++__first;
 8000d6e:	4604      	mov	r4, r0
 8000d70:	e7fb      	b.n	8000d6a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_+0x1a>
	...

08000d74 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
 8000d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d78:	4604      	mov	r4, r0
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	b159      	cbz	r1, 8000d96 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x22>
	{
	  const size_type __size = size();
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
					 - this->_M_impl._M_finish);
 8000d7e:	6882      	ldr	r2, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000d80:	e9d0 7300 	ldrd	r7, r3, [r0]
 8000d84:	1ad2      	subs	r2, r2, r3
 8000d86:	eba3 0807 	sub.w	r8, r3, r7

	  if (__size > max_size() || __navail > max_size() - __size)
	    __builtin_unreachable();

	  if (__navail >= __n)
 8000d8a:	428a      	cmp	r2, r1
 8000d8c:	d305      	bcc.n	8000d9a <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x26>
	__uninit_default_n(__first, __n);
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ffde 	bl	8000d50 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
 8000d94:	6060      	str	r0, [r4, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 8000d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		_M_check_len(__n, "vector::_M_default_append");
 8000d9a:	4a11      	ldr	r2, [pc, #68]	@ (8000de0 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x6c>)
 8000d9c:	f7ff ff55 	bl	8000c4a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8000da0:	4681      	mov	r9, r0
	      pointer __new_start(this->_M_allocate(__len));
 8000da2:	f7ff fe23 	bl	80009ec <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8000da6:	4629      	mov	r1, r5
 8000da8:	4606      	mov	r6, r0
 8000daa:	4440      	add	r0, r8
 8000dac:	f7ff ffd0 	bl	8000d50 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
      if (__count > 0)
 8000db0:	f1b8 0f00 	cmp.w	r8, #0
 8000db4:	d00a      	beq.n	8000dcc <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x58>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000db6:	4642      	mov	r2, r8
 8000db8:	4639      	mov	r1, r7
 8000dba:	4630      	mov	r0, r6
 8000dbc:	f01b fa62 	bl	801c284 <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 8000dc0:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000dc2:	4638      	mov	r0, r7
 8000dc4:	1bc9      	subs	r1, r1, r7
 8000dc6:	f01a ff01 	bl	801bbcc <_ZdlPvj>
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
 8000dca:	e001      	b.n	8000dd0 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x5c>
	if (__p)
 8000dcc:	2f00      	cmp	r7, #0
 8000dce:	d1f7      	bne.n	8000dc0 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4c>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8000dd0:	4445      	add	r5, r8
	      this->_M_impl._M_start = __new_start;
 8000dd2:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8000dd4:	4435      	add	r5, r6
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000dd6:	444e      	add	r6, r9
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8000dd8:	6065      	str	r5, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000dda:	60a6      	str	r6, [r4, #8]
    }
 8000ddc:	e7db      	b.n	8000d96 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x22>
 8000dde:	bf00      	nop
 8000de0:	0801c5ac 	.word	0x0801c5ac

08000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8000de4:	b510      	push	{r4, lr}
	  if (_Num)
 8000de6:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8000de8:	4613      	mov	r3, r2
	  if (_Num)
 8000dea:	d005      	beq.n	8000df8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8000dec:	4601      	mov	r1, r0
 8000dee:	4622      	mov	r2, r4
 8000df0:	4618      	mov	r0, r3
 8000df2:	f01b fa47 	bl	801c284 <memmove>
 8000df6:	4603      	mov	r3, r0
	}
 8000df8:	1918      	adds	r0, r3, r4
 8000dfa:	bd10      	pop	{r4, pc}

08000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>:
      vector(const vector& __x)
 8000dfc:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000dfe:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 8000e02:	4604      	mov	r4, r0
 8000e04:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000e06:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000e08:	2300      	movs	r3, #0
 8000e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8000e0e:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8000e10:	4630      	mov	r0, r6
 8000e12:	f7ff fdeb 	bl	80009ec <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000e16:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8000e18:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000e1a:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8000e1c:	e9c4 0000 	strd	r0, r0, [r4]
			      _Category>::__copy_m(__first, __last, __result);
 8000e20:	e9d5 0100 	ldrd	r0, r1, [r5]
 8000e24:	f7ff ffde 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 8000e28:	6060      	str	r0, [r4, #4]
      }
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000e30 <HAL_FDCAN_RxFifo0Callback>:
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000e30:	07cb      	lsls	r3, r1, #31
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000e32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e36:	4604      	mov	r4, r0
 8000e38:	b0a3      	sub	sp, #140	@ 0x8c
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000e3a:	d512      	bpl.n	8000e62 <HAL_FDCAN_RxFifo0Callback+0x32>
	    HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8000e3c:	ab12      	add	r3, sp, #72	@ 0x48
 8000e3e:	aa08      	add	r2, sp, #32
 8000e40:	2140      	movs	r1, #64	@ 0x40
 8000e42:	f005 f8f3 	bl	800602c <HAL_FDCAN_GetRxMessage>
		ID = communication.GetID((void*) hfdcan, &success);
 8000e46:	f10d 0207 	add.w	r2, sp, #7
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	482c      	ldr	r0, [pc, #176]	@ (8000f00 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000e4e:	f00e f97b 	bl	800f148 <_ZN13Communication5GetIDEPvPb>
		if (!success) {communication.ActivateReception(ID); return;}
 8000e52:	f89d 3007 	ldrb.w	r3, [sp, #7]
		ID = communication.GetID((void*) hfdcan, &success);
 8000e56:	4606      	mov	r6, r0
		if (!success) {communication.ActivateReception(ID); return;}
 8000e58:	b933      	cbnz	r3, 8000e68 <HAL_FDCAN_RxFifo0Callback+0x38>
 8000e5a:	4601      	mov	r1, r0
 8000e5c:	4828      	ldr	r0, [pc, #160]	@ (8000f00 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000e5e:	f00e f9ad 	bl	800f1bc <_ZN13Communication17ActivateReceptionEh>
}
 8000e62:	b023      	add	sp, #140	@ 0x8c
 8000e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000e68:	2040      	movs	r0, #64	@ 0x40
	    uint8_t target_address = (uint8_t) RxHeader.Identifier;
 8000e6a:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8000e6e:	f7ff fdbd 	bl	80009ec <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8000e72:	ab12      	add	r3, sp, #72	@ 0x48
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000e74:	f100 0740 	add.w	r7, r0, #64	@ 0x40
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000e78:	4605      	mov	r5, r0
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	f10d 0c88 	add.w	ip, sp, #136	@ 0x88
 8000e80:	9002      	str	r0, [sp, #8]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000e82:	9704      	str	r7, [sp, #16]
 8000e84:	461a      	mov	r2, r3
 8000e86:	3408      	adds	r4, #8
 8000e88:	ca03      	ldmia	r2!, {r0, r1}
 8000e8a:	4562      	cmp	r2, ip
 8000e8c:	f844 0c08 	str.w	r0, [r4, #-8]
 8000e90:	f844 1c04 	str.w	r1, [r4, #-4]
 8000e94:	4613      	mov	r3, r2
 8000e96:	d1f5      	bne.n	8000e84 <HAL_FDCAN_RxFifo0Callback+0x54>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8000e98:	4a1a      	ldr	r2, [pc, #104]	@ (8000f04 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	a802      	add	r0, sp, #8
	  this->_M_impl._M_finish =
 8000e9e:	9703      	str	r7, [sp, #12]
 8000ea0:	f7ff fed3 	bl	8000c4a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8000ea4:	4681      	mov	r9, r0
      pointer __new_start(this->_M_allocate(__len));
 8000ea6:	f7ff fda1 	bl	80009ec <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8000eaa:	462a      	mov	r2, r5
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000eac:	4603      	mov	r3, r0
 8000eae:	4604      	mov	r4, r0
 8000eb0:	f803 8b01 	strb.w	r8, [r3], #1
 8000eb4:	f852 1b04 	ldr.w	r1, [r2], #4
 8000eb8:	42ba      	cmp	r2, r7
 8000eba:	f843 1b04 	str.w	r1, [r3], #4
 8000ebe:	d1f9      	bne.n	8000eb4 <HAL_FDCAN_RxFifo0Callback+0x84>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	2140      	movs	r1, #64	@ 0x40
 8000ec4:	f01a fe82 	bl	801bbcc <_ZdlPvj>
      return __result + __count;
 8000ec8:	f104 0341 	add.w	r3, r4, #65	@ 0x41
      this->_M_impl._M_start = __new_start;
 8000ecc:	9402      	str	r4, [sp, #8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000ece:	444c      	add	r4, r9
		communication.Process(ID, received_data, &success);
 8000ed0:	a902      	add	r1, sp, #8
 8000ed2:	a805      	add	r0, sp, #20
      this->_M_impl._M_finish = __new_finish;
 8000ed4:	9303      	str	r3, [sp, #12]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000ed6:	9404      	str	r4, [sp, #16]
 8000ed8:	f7ff ff90 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8000edc:	f10d 0307 	add.w	r3, sp, #7
 8000ee0:	aa05      	add	r2, sp, #20
 8000ee2:	4631      	mov	r1, r6
 8000ee4:	4806      	ldr	r0, [pc, #24]	@ (8000f00 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000ee6:	f012 fd43 	bl	8013970 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>
      }
 8000eea:	a805      	add	r0, sp, #20
 8000eec:	f7ff fe8c 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		communication.ActivateReception(ID);
 8000ef0:	4631      	mov	r1, r6
 8000ef2:	4803      	ldr	r0, [pc, #12]	@ (8000f00 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000ef4:	f00e f962 	bl	800f1bc <_ZN13Communication17ActivateReceptionEh>
 8000ef8:	a802      	add	r0, sp, #8
 8000efa:	f7ff fe85 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8000efe:	e7b0      	b.n	8000e62 <HAL_FDCAN_RxFifo0Callback+0x32>
 8000f00:	24001660 	.word	0x24001660
 8000f04:	0801c592 	.word	0x0801c592

08000f08 <_Z14TrajectoryTaskPv>:
{
 8000f08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 * @return whether successful
 */
template <typename T>
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8000f0c:	4d66      	ldr	r5, [pc, #408]	@ (80010a8 <_Z14TrajectoryTaskPv+0x1a0>)
  uint8_t base_address = STM32_HEAD;
 8000f0e:	2601      	movs	r6, #1
  osDelay(AUTO_ID_DELAY); // leave some time to modules to configure themselves
 8000f10:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f14:	f00b fbd4 	bl	800c6c0 <osDelay>
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	6828      	ldr	r0, [r5, #0]
  uint8_t base_address = STM32_HEAD;
 8000f1e:	f88d 6006 	strb.w	r6, [sp, #6]
 8000f22:	f00b fc37 	bl	800c794 <osSemaphoreAcquire>
	// Find register
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8000f26:	f10d 0207 	add.w	r2, sp, #7
 8000f2a:	4631      	mov	r1, r6
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	f017 f9f4 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8000f32:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8000f36:	4604      	mov	r4, r0
	if (!success) {
 8000f38:	b93b      	cbnz	r3, 8000f4a <_Z14TrajectoryTaskPv+0x42>
		// Release semaphore
		if (use_semaphore && target_register->register_semaphore != NULL) {
			osSemaphoreRelease(*(target_register->register_semaphore));
		}

		osSemaphoreRelease(RegistersSemaphore);
 8000f3a:	6828      	ldr	r0, [r5, #0]
 8000f3c:	f00b fc5e 	bl	800c7fc <osSemaphoreRelease>
	  osDelay(1000);
 8000f40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f44:	f00b fbbc 	bl	800c6c0 <osDelay>
  for(;;)
 8000f48:	e7fa      	b.n	8000f40 <_Z14TrajectoryTaskPv+0x38>
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8000f4a:	4958      	ldr	r1, [pc, #352]	@ (80010ac <_Z14TrajectoryTaskPv+0x1a4>)
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	f01a fef9 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8000f52:	2800      	cmp	r0, #0
 8000f54:	d155      	bne.n	8001002 <_Z14TrajectoryTaskPv+0xfa>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8000f56:	4956      	ldr	r1, [pc, #344]	@ (80010b0 <_Z14TrajectoryTaskPv+0x1a8>)
 8000f58:	4854      	ldr	r0, [pc, #336]	@ (80010ac <_Z14TrajectoryTaskPv+0x1a4>)
 8000f5a:	f01a fef3 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d151      	bne.n	8001006 <_Z14TrajectoryTaskPv+0xfe>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8000f62:	4954      	ldr	r1, [pc, #336]	@ (80010b4 <_Z14TrajectoryTaskPv+0x1ac>)
 8000f64:	4851      	ldr	r0, [pc, #324]	@ (80010ac <_Z14TrajectoryTaskPv+0x1a4>)
 8000f66:	f01a feed 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	d14d      	bne.n	800100a <_Z14TrajectoryTaskPv+0x102>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8000f6e:	4952      	ldr	r1, [pc, #328]	@ (80010b8 <_Z14TrajectoryTaskPv+0x1b0>)
 8000f70:	484e      	ldr	r0, [pc, #312]	@ (80010ac <_Z14TrajectoryTaskPv+0x1a4>)
 8000f72:	f01a fee7 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8000f76:	2800      	cmp	r0, #0
 8000f78:	d149      	bne.n	800100e <_Z14TrajectoryTaskPv+0x106>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8000f7a:	4950      	ldr	r1, [pc, #320]	@ (80010bc <_Z14TrajectoryTaskPv+0x1b4>)
 8000f7c:	484b      	ldr	r0, [pc, #300]	@ (80010ac <_Z14TrajectoryTaskPv+0x1a4>)
 8000f7e:	f01a fee1 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8000f82:	2800      	cmp	r0, #0
 8000f84:	d145      	bne.n	8001012 <_Z14TrajectoryTaskPv+0x10a>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8000f86:	494e      	ldr	r1, [pc, #312]	@ (80010c0 <_Z14TrajectoryTaskPv+0x1b8>)
 8000f88:	4848      	ldr	r0, [pc, #288]	@ (80010ac <_Z14TrajectoryTaskPv+0x1a4>)
 8000f8a:	f01a fedb 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8000f8e:	2800      	cmp	r0, #0
 8000f90:	d141      	bne.n	8001016 <_Z14TrajectoryTaskPv+0x10e>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8000f92:	494c      	ldr	r1, [pc, #304]	@ (80010c4 <_Z14TrajectoryTaskPv+0x1bc>)
 8000f94:	4845      	ldr	r0, [pc, #276]	@ (80010ac <_Z14TrajectoryTaskPv+0x1a4>)
 8000f96:	f01a fed5 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	d13d      	bne.n	800101a <_Z14TrajectoryTaskPv+0x112>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8000f9e:	494a      	ldr	r1, [pc, #296]	@ (80010c8 <_Z14TrajectoryTaskPv+0x1c0>)
 8000fa0:	4842      	ldr	r0, [pc, #264]	@ (80010ac <_Z14TrajectoryTaskPv+0x1a4>)
 8000fa2:	f01a fecf 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d139      	bne.n	800101e <_Z14TrajectoryTaskPv+0x116>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8000faa:	4948      	ldr	r1, [pc, #288]	@ (80010cc <_Z14TrajectoryTaskPv+0x1c4>)
 8000fac:	483f      	ldr	r0, [pc, #252]	@ (80010ac <_Z14TrajectoryTaskPv+0x1a4>)
 8000fae:	f01a fec9 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d135      	bne.n	8001022 <_Z14TrajectoryTaskPv+0x11a>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8000fb6:	4946      	ldr	r1, [pc, #280]	@ (80010d0 <_Z14TrajectoryTaskPv+0x1c8>)
 8000fb8:	483c      	ldr	r0, [pc, #240]	@ (80010ac <_Z14TrajectoryTaskPv+0x1a4>)
 8000fba:	f01a fec3 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8000fbe:	2800      	cmp	r0, #0
 8000fc0:	bf14      	ite	ne
 8000fc2:	2109      	movne	r1, #9
 8000fc4:	2100      	moveq	r1, #0
 8000fc6:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!success) {
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	d0b5      	beq.n	8000f3a <_Z14TrajectoryTaskPv+0x32>
	if (target_register->register_info.type != registered_type) {
 8000fce:	7923      	ldrb	r3, [r4, #4]
 8000fd0:	428b      	cmp	r3, r1
 8000fd2:	d1b2      	bne.n	8000f3a <_Z14TrajectoryTaskPv+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 8000fd4:	3104      	adds	r1, #4
 8000fd6:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0ad      	beq.n	8000f3a <_Z14TrajectoryTaskPv+0x32>
	if (target_register->access.write) {
 8000fde:	7a22      	ldrb	r2, [r4, #8]
 8000fe0:	2a00      	cmp	r2, #0
 8000fe2:	d0aa      	beq.n	8000f3a <_Z14TrajectoryTaskPv+0x32>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8000fe4:	8961      	ldrh	r1, [r4, #10]
		success = false;
 8000fe6:	2200      	movs	r2, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000fe8:	e9d3 0300 	ldrd	r0, r3, [r3]
 8000fec:	f88d 2007 	strb.w	r2, [sp, #7]
 8000ff0:	1a1b      	subs	r3, r3, r0
	if (__n >= this->size())
 8000ff2:	ebb1 1f23 	cmp.w	r1, r3, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000ff6:	ea4f 1223 	mov.w	r2, r3, asr #4
	if (__n >= this->size())
 8000ffa:	d314      	bcc.n	8001026 <_Z14TrajectoryTaskPv+0x11e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8000ffc:	4835      	ldr	r0, [pc, #212]	@ (80010d4 <_Z14TrajectoryTaskPv+0x1cc>)
 8000ffe:	f01a fec2 	bl	801bd86 <_ZSt24__throw_out_of_range_fmtPKcz>
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8001002:	2100      	movs	r1, #0
 8001004:	e7df      	b.n	8000fc6 <_Z14TrajectoryTaskPv+0xbe>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8001006:	4631      	mov	r1, r6
 8001008:	e7dd      	b.n	8000fc6 <_Z14TrajectoryTaskPv+0xbe>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800100a:	2102      	movs	r1, #2
 800100c:	e7db      	b.n	8000fc6 <_Z14TrajectoryTaskPv+0xbe>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800100e:	2103      	movs	r1, #3
 8001010:	e7d9      	b.n	8000fc6 <_Z14TrajectoryTaskPv+0xbe>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8001012:	2104      	movs	r1, #4
 8001014:	e7d7      	b.n	8000fc6 <_Z14TrajectoryTaskPv+0xbe>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8001016:	2105      	movs	r1, #5
 8001018:	e7d5      	b.n	8000fc6 <_Z14TrajectoryTaskPv+0xbe>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800101a:	2106      	movs	r1, #6
 800101c:	e7d3      	b.n	8000fc6 <_Z14TrajectoryTaskPv+0xbe>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800101e:	2107      	movs	r1, #7
 8001020:	e7d1      	b.n	8000fc6 <_Z14TrajectoryTaskPv+0xbe>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8001022:	2108      	movs	r1, #8
 8001024:	e7cf      	b.n	8000fc6 <_Z14TrajectoryTaskPv+0xbe>
	return *(this->_M_impl._M_start + __n);
 8001026:	010b      	lsls	r3, r1, #4
 8001028:	eb00 1101 	add.w	r1, r0, r1, lsl #4
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800102c:	58c6      	ldr	r6, [r0, r3]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800102e:	68e3      	ldr	r3, [r4, #12]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8001030:	e9d1 8701 	ldrd	r8, r7, [r1, #4]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8001034:	b123      	cbz	r3, 8001040 <_Z14TrajectoryTaskPv+0x138>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8001036:	f04f 31ff 	mov.w	r1, #4294967295
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	f00b fbaa 	bl	800c794 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 8001040:	7823      	ldrb	r3, [r4, #0]
 8001042:	b15b      	cbz	r3, 800105c <_Z14TrajectoryTaskPv+0x154>
			success = true;
 8001044:	2301      	movs	r3, #1
 8001046:	f88d 3007 	strb.w	r3, [sp, #7]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800104a:	7963      	ldrb	r3, [r4, #5]
 800104c:	b31b      	cbz	r3, 8001096 <_Z14TrajectoryTaskPv+0x18e>
 800104e:	88e1      	ldrh	r1, [r4, #6]
 8001050:	b9c9      	cbnz	r1, 8001086 <_Z14TrajectoryTaskPv+0x17e>
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8001052:	e9d6 3200 	ldrd	r3, r2, [r6]
 8001056:	4293      	cmp	r3, r2
 8001058:	d000      	beq.n	800105c <_Z14TrajectoryTaskPv+0x154>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
 800105a:	6073      	str	r3, [r6, #4]
		if (target_register->mode.callbacks) {
 800105c:	7863      	ldrb	r3, [r4, #1]
 800105e:	b153      	cbz	r3, 8001076 <_Z14TrajectoryTaskPv+0x16e>
			if (callbacks.write != NULL) {
 8001060:	b14f      	cbz	r7, 8001076 <_Z14TrajectoryTaskPv+0x16e>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8001062:	7963      	ldrb	r3, [r4, #5]
 8001064:	b1db      	cbz	r3, 800109e <_Z14TrajectoryTaskPv+0x196>
 8001066:	88e3      	ldrh	r3, [r4, #6]
					success = callbacks.write(callbacks.context, ID, value, length);
 8001068:	f10d 0206 	add.w	r2, sp, #6
 800106c:	2101      	movs	r1, #1
					success = callbacks.write(callbacks.context, ID, value, 1);
 800106e:	4640      	mov	r0, r8
 8001070:	47b8      	blx	r7
 8001072:	f88d 0007 	strb.w	r0, [sp, #7]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8001076:	68e3      	ldr	r3, [r4, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	f43f af5e 	beq.w	8000f3a <_Z14TrajectoryTaskPv+0x32>
			osSemaphoreRelease(*(target_register->register_semaphore));
 800107e:	6818      	ldr	r0, [r3, #0]
 8001080:	f00b fbbc 	bl	800c7fc <osSemaphoreRelease>
 8001084:	e759      	b.n	8000f3a <_Z14TrajectoryTaskPv+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8001086:	f10d 0306 	add.w	r3, sp, #6
 800108a:	4632      	mov	r2, r6
 800108c:	4419      	add	r1, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fea8 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001094:	e7e2      	b.n	800105c <_Z14TrajectoryTaskPv+0x154>
				*(callbacks.pointer) = *value;
 8001096:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800109a:	7033      	strb	r3, [r6, #0]
 800109c:	e7de      	b.n	800105c <_Z14TrajectoryTaskPv+0x154>
					success = callbacks.write(callbacks.context, ID, value, 1);
 800109e:	2301      	movs	r3, #1
 80010a0:	f10d 0206 	add.w	r2, sp, #6
 80010a4:	4619      	mov	r1, r3
 80010a6:	e7e2      	b.n	800106e <_Z14TrajectoryTaskPv+0x166>
 80010a8:	2400177c 	.word	0x2400177c
 80010ac:	0801ca50 	.word	0x0801ca50
 80010b0:	0801ca40 	.word	0x0801ca40
 80010b4:	0801ca30 	.word	0x0801ca30
 80010b8:	0801ca20 	.word	0x0801ca20
 80010bc:	0801ca58 	.word	0x0801ca58
 80010c0:	0801ca48 	.word	0x0801ca48
 80010c4:	0801ca38 	.word	0x0801ca38
 80010c8:	0801ca28 	.word	0x0801ca28
 80010cc:	0801ca18 	.word	0x0801ca18
 80010d0:	0801ca10 	.word	0x0801ca10
 80010d4:	0801c5c6 	.word	0x0801c5c6

080010d8 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_>:
	vector(_InputIterator __first, _InputIterator __last,
 80010d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 80010da:	2300      	movs	r3, #0
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80010dc:	1a57      	subs	r7, r2, r1
	vector(_InputIterator __first, _InputIterator __last,
 80010de:	4604      	mov	r4, r0
 80010e0:	460d      	mov	r5, r1
 80010e2:	4616      	mov	r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 80010e4:	6083      	str	r3, [r0, #8]
 80010e6:	e9c0 3300 	strd	r3, r3, [r0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80010ea:	d502      	bpl.n	80010f2 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_+0x1a>
	  __throw_length_error(
 80010ec:	4808      	ldr	r0, [pc, #32]	@ (8001110 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_+0x38>)
 80010ee:	f01a fe47 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80010f2:	4638      	mov	r0, r7
 80010f4:	f7ff fc7a 	bl	80009ec <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80010f8:	4407      	add	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80010fa:	4602      	mov	r2, r0
 80010fc:	6020      	str	r0, [r4, #0]
			      _Category>::__copy_m(__first, __last, __result);
 80010fe:	4631      	mov	r1, r6
 8001100:	4628      	mov	r0, r5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001102:	60a7      	str	r7, [r4, #8]
 8001104:	f7ff fe6e 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8001108:	6060      	str	r0, [r4, #4]
	}
 800110a:	4620      	mov	r0, r4
 800110c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800110e:	bf00      	nop
 8001110:	0801c610 	.word	0x0801c610

08001114 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>:
      vector(initializer_list<value_type> __l,
 8001114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001116:	ab02      	add	r3, sp, #8
 8001118:	4604      	mov	r4, r0
 800111a:	460e      	mov	r6, r1
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }

      // Number of elements.
      constexpr size_type
      size() const noexcept { return _M_len; }
 800111c:	4615      	mov	r5, r2
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800111e:	188f      	adds	r7, r1, r2
 8001120:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001124:	2300      	movs	r3, #0
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001126:	429a      	cmp	r2, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001128:	6083      	str	r3, [r0, #8]
 800112a:	e9c0 3300 	strd	r3, r3, [r0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800112e:	da02      	bge.n	8001136 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_+0x22>
	  __throw_length_error(
 8001130:	4808      	ldr	r0, [pc, #32]	@ (8001154 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_+0x40>)
 8001132:	f01a fe25 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8001136:	4610      	mov	r0, r2
 8001138:	f7ff fc58 	bl	80009ec <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800113c:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800113e:	4602      	mov	r2, r0
 8001140:	6020      	str	r0, [r4, #0]
 8001142:	4639      	mov	r1, r7
 8001144:	4630      	mov	r0, r6
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001146:	60a5      	str	r5, [r4, #8]
 8001148:	f7ff fe4c 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 800114c:	6060      	str	r0, [r4, #4]
      }
 800114e:	4620      	mov	r0, r4
 8001150:	b003      	add	sp, #12
 8001152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001154:	0801c610 	.word	0x0801c610

08001158 <main>:
{
 8001158:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f04f 0814 	mov.w	r8, #20
{
 8001160:	b0b7      	sub	sp, #220	@ 0xdc
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001162:	4dd6      	ldr	r5, [pc, #856]	@ (80014bc <main+0x364>)
  HAL_Init();
 8001164:	f002 fa80 	bl	8003668 <HAL_Init>
  SystemClock_Config();
 8001168:	f7ff fc7c 	bl	8000a64 <_Z18SystemClock_Configv>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2400      	movs	r4, #0
  PeriphCommonClock_Config();
 800116e:	f7ff fd05 	bl	8000b7c <_Z24PeriphCommonClock_Configv>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	4642      	mov	r2, r8
 8001174:	2100      	movs	r1, #0
 8001176:	a82f      	add	r0, sp, #188	@ 0xbc
 8001178:	f01b f89e 	bl	801c2b8 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800117c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOE, EN_CM4_Pin|nBT_CM4_Pin|nWL_CM4_Pin, GPIO_PIN_SET);
 8001180:	2201      	movs	r2, #1
 8001182:	2134      	movs	r1, #52	@ 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001184:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOE, EN_CM4_Pin|nBT_CM4_Pin|nWL_CM4_Pin, GPIO_PIN_SET);
 8001188:	48cd      	ldr	r0, [pc, #820]	@ (80014c0 <main+0x368>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800118a:	2711      	movs	r7, #17
  GPIO_InitStruct.Pin = PG_CM4_Pin;
 800118c:	f04f 0b08 	mov.w	fp, #8
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001190:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2601      	movs	r6, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001196:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  GPIO_InitStruct.Pin = nRST_IMU_Pin;
 800119a:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = WAKE_4G_Pin;
 800119e:	f04f 0910 	mov.w	r9, #16
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011a2:	f003 0310 	and.w	r3, r3, #16
 80011a6:	9306      	str	r3, [sp, #24]
 80011a8:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011aa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80011ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011b2:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80011b6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80011ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011be:	9307      	str	r3, [sp, #28]
 80011c0:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80011ce:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	9308      	str	r3, [sp, #32]
 80011d8:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80011e6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80011f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80011f6:	f043 0302 	orr.w	r3, r3, #2
 80011fa:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80011fe:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	930a      	str	r3, [sp, #40]	@ 0x28
 8001208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800120e:	f043 0308 	orr.w	r3, r3, #8
 8001212:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8001216:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001220:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_WritePin(GPIOE, EN_CM4_Pin|nBT_CM4_Pin|nWL_CM4_Pin, GPIO_PIN_SET);
 8001222:	f005 fae7 	bl	80067f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, STOP_CM4_Pin|LED_STATUS_Pin|LED_ACTIVITY_Pin|LED_FAULT_Pin
 8001226:	2200      	movs	r2, #0
 8001228:	f64f 0140 	movw	r1, #63552	@ 0xf840
 800122c:	48a4      	ldr	r0, [pc, #656]	@ (80014c0 <main+0x368>)
 800122e:	f005 fae1 	bl	80067f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nRST_IMU_GPIO_Port, nRST_IMU_Pin, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	2102      	movs	r1, #2
 8001236:	48a3      	ldr	r0, [pc, #652]	@ (80014c4 <main+0x36c>)
 8001238:	f005 fadc 	bl	80067f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WDISABLE_4G_GPIO_Port, WDISABLE_4G_Pin, GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	2120      	movs	r1, #32
 8001240:	48a1      	ldr	r0, [pc, #644]	@ (80014c8 <main+0x370>)
 8001242:	f005 fad7 	bl	80067f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PERST_4G_GPIO_Port, PERST_4G_Pin, GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	2102      	movs	r1, #2
 800124a:	48a0      	ldr	r0, [pc, #640]	@ (80014cc <main+0x374>)
 800124c:	f005 fad2 	bl	80067f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_USER3_Pin|LED_UART_CM4_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8001256:	489d      	ldr	r0, [pc, #628]	@ (80014cc <main+0x374>)
 8001258:	f005 facc 	bl	80067f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, SW_OUTPUT_Pin|SW_OVERWRITE_Pin|LED_UART_BACK_Pin|LED_FDCAN2_Pin
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
 8001262:	489b      	ldr	r0, [pc, #620]	@ (80014d0 <main+0x378>)
 8001264:	f005 fac6 	bl	80067f4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001268:	2334      	movs	r3, #52	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800126a:	a92f      	add	r1, sp, #188	@ 0xbc
 800126c:	4894      	ldr	r0, [pc, #592]	@ (80014c0 <main+0x368>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800126e:	e9cd 372f 	strd	r3, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001276:	f005 f9ad 	bl	80065d4 <HAL_GPIO_Init>
  HAL_GPIO_Init(PG_CM4_GPIO_Port, &GPIO_InitStruct);
 800127a:	a92f      	add	r1, sp, #188	@ 0xbc
 800127c:	4890      	ldr	r0, [pc, #576]	@ (80014c0 <main+0x368>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	9431      	str	r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001280:	e9cd b42f 	strd	fp, r4, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(PG_CM4_GPIO_Port, &GPIO_InitStruct);
 8001284:	f005 f9a6 	bl	80065d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	f64f 0340 	movw	r3, #63552	@ 0xf840
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800128c:	a92f      	add	r1, sp, #188	@ 0xbc
 800128e:	488c      	ldr	r0, [pc, #560]	@ (80014c0 <main+0x368>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001290:	e9cd 362f 	strd	r3, r6, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001298:	f005 f99c 	bl	80065d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DRDY_IMU_Pin|SD_PRESENCE_Pin;
 800129c:	f248 0301 	movw	r3, #32769	@ 0x8001
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	a92f      	add	r1, sp, #188	@ 0xbc
 80012a2:	4888      	ldr	r0, [pc, #544]	@ (80014c4 <main+0x36c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	9431      	str	r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a6:	e9cd 342f 	strd	r3, r4, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f005 f993 	bl	80065d4 <HAL_GPIO_Init>
  HAL_GPIO_Init(nRST_IMU_GPIO_Port, &GPIO_InitStruct);
 80012ae:	a92f      	add	r1, sp, #188	@ 0xbc
 80012b0:	4884      	ldr	r0, [pc, #528]	@ (80014c4 <main+0x36c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012b2:	e9cd a72f 	strd	sl, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(nRST_IMU_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f005 f98b 	bl	80065d4 <HAL_GPIO_Init>
  HAL_GPIO_Init(WAKE_4G_GPIO_Port, &GPIO_InitStruct);
 80012be:	a92f      	add	r1, sp, #188	@ 0xbc
 80012c0:	4881      	ldr	r0, [pc, #516]	@ (80014c8 <main+0x370>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c2:	9631      	str	r6, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c4:	e9cd 942f 	strd	r9, r4, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(WAKE_4G_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f005 f984 	bl	80065d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WDISABLE_4G_Pin;
 80012cc:	2320      	movs	r3, #32
  HAL_GPIO_Init(WDISABLE_4G_GPIO_Port, &GPIO_InitStruct);
 80012ce:	a92f      	add	r1, sp, #188	@ 0xbc
 80012d0:	487d      	ldr	r0, [pc, #500]	@ (80014c8 <main+0x370>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012d2:	e9cd 372f 	strd	r3, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(WDISABLE_4G_GPIO_Port, &GPIO_InitStruct);
 80012da:	f005 f97b 	bl	80065d4 <HAL_GPIO_Init>
  HAL_GPIO_Init(PERST_4G_GPIO_Port, &GPIO_InitStruct);
 80012de:	a92f      	add	r1, sp, #188	@ 0xbc
 80012e0:	487a      	ldr	r0, [pc, #488]	@ (80014cc <main+0x374>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012e2:	e9cd a72f 	strd	sl, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ea:	f44f 1a88 	mov.w	sl, #1114112	@ 0x110000
  HAL_GPIO_Init(PERST_4G_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f005 f971 	bl	80065d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f2:	2324      	movs	r3, #36	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f4:	a92f      	add	r1, sp, #188	@ 0xbc
 80012f6:	4875      	ldr	r0, [pc, #468]	@ (80014cc <main+0x374>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	9431      	str	r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012fa:	e9cd 3a2f 	strd	r3, sl, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f005 f969 	bl	80065d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_USER3_Pin|LED_UART_CM4_Pin;
 8001302:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	a92f      	add	r1, sp, #188	@ 0xbc
 8001308:	4870      	ldr	r0, [pc, #448]	@ (80014cc <main+0x374>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130a:	e9cd 362f 	strd	r3, r6, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001312:	f005 f95f 	bl	80065d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_OUTPUT_Pin|SW_OVERWRITE_Pin|LED_UART_BACK_Pin|LED_FDCAN2_Pin
 8001316:	f44f 634f 	mov.w	r3, #3312	@ 0xcf0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800131a:	a92f      	add	r1, sp, #188	@ 0xbc
 800131c:	486c      	ldr	r0, [pc, #432]	@ (80014d0 <main+0x378>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	e9cd 362f 	strd	r3, r6, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001326:	f005 f955 	bl	80065d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW_INPUT_Pin;
 800132a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  HAL_GPIO_Init(SW_INPUT_GPIO_Port, &GPIO_InitStruct);
 800132e:	a92f      	add	r1, sp, #188	@ 0xbc
 8001330:	4867      	ldr	r0, [pc, #412]	@ (80014d0 <main+0x378>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	9431      	str	r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001334:	e9cd 342f 	strd	r3, r4, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(SW_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001338:	f005 f94c 	bl	80065d4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_RS485_GPIO_Port, &GPIO_InitStruct);
 800133c:	a92f      	add	r1, sp, #188	@ 0xbc
 800133e:	4864      	ldr	r0, [pc, #400]	@ (80014d0 <main+0x378>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	9431      	str	r4, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001342:	e9cd ba2f 	strd	fp, sl, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LED_RS485_GPIO_Port, &GPIO_InitStruct);
 8001346:	f005 f945 	bl	80065d4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800134a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800134e:	4622      	mov	r2, r4
 8001350:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001352:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001354:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001356:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 800135a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 800135e:	4033      	ands	r3, r6
 8001360:	9304      	str	r3, [sp, #16]
 8001362:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001364:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8001370:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  hadc1.Instance = ADC1;
 8001374:	4d57      	ldr	r5, [pc, #348]	@ (80014d4 <main+0x37c>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	9305      	str	r3, [sp, #20]
 800137c:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800137e:	f002 ffb5 	bl	80042ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001382:	200b      	movs	r0, #11
 8001384:	f002 ffc2 	bl	800430c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001388:	4622      	mov	r2, r4
 800138a:	2105      	movs	r1, #5
 800138c:	200c      	movs	r0, #12
 800138e:	f002 ffad 	bl	80042ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001392:	200c      	movs	r0, #12
 8001394:	f002 ffba 	bl	800430c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001398:	4622      	mov	r2, r4
 800139a:	2105      	movs	r1, #5
 800139c:	200d      	movs	r0, #13
 800139e:	f002 ffa5 	bl	80042ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80013a2:	200d      	movs	r0, #13
 80013a4:	f002 ffb2 	bl	800430c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80013a8:	4622      	mov	r2, r4
 80013aa:	2105      	movs	r1, #5
 80013ac:	200e      	movs	r0, #14
 80013ae:	f002 ff9d 	bl	80042ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80013b2:	200e      	movs	r0, #14
 80013b4:	f002 ffaa 	bl	800430c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80013b8:	4622      	mov	r2, r4
 80013ba:	2105      	movs	r1, #5
 80013bc:	200f      	movs	r0, #15
 80013be:	f002 ff95 	bl	80042ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80013c2:	200f      	movs	r0, #15
 80013c4:	f002 ffa2 	bl	800430c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80013c8:	4622      	mov	r2, r4
 80013ca:	2105      	movs	r1, #5
 80013cc:	4648      	mov	r0, r9
 80013ce:	f002 ff8d 	bl	80042ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013d2:	4648      	mov	r0, r9
 80013d4:	f002 ff9a 	bl	800430c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80013d8:	4622      	mov	r2, r4
 80013da:	2105      	movs	r1, #5
 80013dc:	4638      	mov	r0, r7
 80013de:	f002 ff85 	bl	80042ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80013e2:	4638      	mov	r0, r7
 80013e4:	f002 ff92 	bl	800430c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80013e8:	4622      	mov	r2, r4
 80013ea:	2105      	movs	r1, #5
 80013ec:	202f      	movs	r0, #47	@ 0x2f
 80013ee:	f002 ff7d 	bl	80042ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80013f2:	202f      	movs	r0, #47	@ 0x2f
 80013f4:	f002 ff8a 	bl	800430c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80013f8:	4622      	mov	r2, r4
 80013fa:	2105      	movs	r1, #5
 80013fc:	2038      	movs	r0, #56	@ 0x38
 80013fe:	f002 ff75 	bl	80042ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001402:	2038      	movs	r0, #56	@ 0x38
 8001404:	f002 ff82 	bl	800430c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001408:	4622      	mov	r2, r4
 800140a:	2105      	movs	r1, #5
 800140c:	2039      	movs	r0, #57	@ 0x39
 800140e:	f002 ff6d 	bl	80042ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001412:	2039      	movs	r0, #57	@ 0x39
 8001414:	f002 ff7a 	bl	800430c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001418:	4622      	mov	r2, r4
 800141a:	2105      	movs	r1, #5
 800141c:	203a      	movs	r0, #58	@ 0x3a
 800141e:	f002 ff65 	bl	80042ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001422:	203a      	movs	r0, #58	@ 0x3a
 8001424:	f002 ff72 	bl	800430c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001428:	4622      	mov	r2, r4
 800142a:	2105      	movs	r1, #5
 800142c:	203b      	movs	r0, #59	@ 0x3b
 800142e:	f002 ff5d 	bl	80042ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001432:	203b      	movs	r0, #59	@ 0x3b
 8001434:	f002 ff6a 	bl	800430c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001438:	4622      	mov	r2, r4
 800143a:	2105      	movs	r1, #5
 800143c:	203c      	movs	r0, #60	@ 0x3c
 800143e:	f002 ff55 	bl	80042ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001442:	203c      	movs	r0, #60	@ 0x3c
 8001444:	f002 ff62 	bl	800430c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8001448:	4622      	mov	r2, r4
 800144a:	2105      	movs	r1, #5
 800144c:	2044      	movs	r0, #68	@ 0x44
 800144e:	f002 ff4d 	bl	80042ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001452:	2044      	movs	r0, #68	@ 0x44
 8001454:	f002 ff5a 	bl	800430c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001458:	4622      	mov	r2, r4
 800145a:	2105      	movs	r1, #5
 800145c:	2045      	movs	r0, #69	@ 0x45
 800145e:	f002 ff45 	bl	80042ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001462:	2045      	movs	r0, #69	@ 0x45
 8001464:	f002 ff52 	bl	800430c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001468:	4622      	mov	r2, r4
 800146a:	2105      	movs	r1, #5
 800146c:	2046      	movs	r0, #70	@ 0x46
 800146e:	f002 ff3d 	bl	80042ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001472:	2046      	movs	r0, #70	@ 0x46
 8001474:	f002 ff4a 	bl	800430c <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001478:	221c      	movs	r2, #28
 800147a:	4621      	mov	r1, r4
 800147c:	a82f      	add	r0, sp, #188	@ 0xbc
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 800147e:	4f16      	ldr	r7, [pc, #88]	@ (80014d8 <main+0x380>)
  ADC_MultiModeTypeDef multimode = {0};
 8001480:	942d      	str	r4, [sp, #180]	@ 0xb4
 8001482:	e9cd 442b 	strd	r4, r4, [sp, #172]	@ 0xac
  ADC_ChannelConfTypeDef sConfig = {0};
 8001486:	f01a ff17 	bl	801c2b8 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 800148a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800148e:	4628      	mov	r0, r5
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001490:	82ac      	strh	r4, [r5, #20]
  hadc1.Init.NbrOfConversion = 1;
 8001492:	61ae      	str	r6, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001494:	772c      	strb	r4, [r5, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001496:	636c      	str	r4, [r5, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001498:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 800149c:	e9c5 7300 	strd	r7, r3, [r5]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014a0:	2704      	movs	r7, #4
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014a2:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014a6:	612f      	str	r7, [r5, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014a8:	e9c5 4409 	strd	r4, r4, [r5, #36]	@ 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014ac:	e9c5 440b 	strd	r4, r4, [r5, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014b0:	f002 fca2 	bl	8003df8 <HAL_ADC_Init>
 80014b4:	b190      	cbz	r0, 80014dc <main+0x384>
 80014b6:	b672      	cpsid	i
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <main+0x360>
 80014ba:	bf00      	nop
 80014bc:	58024400 	.word	0x58024400
 80014c0:	58021000 	.word	0x58021000
 80014c4:	58020000 	.word	0x58020000
 80014c8:	58020800 	.word	0x58020800
 80014cc:	58020400 	.word	0x58020400
 80014d0:	58020c00 	.word	0x58020c00
 80014d4:	240026fc 	.word	0x240026fc
 80014d8:	40022000 	.word	0x40022000
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014dc:	902b      	str	r0, [sp, #172]	@ 0xac
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014de:	a92b      	add	r1, sp, #172	@ 0xac
 80014e0:	4628      	mov	r0, r5
 80014e2:	f002 fe09 	bl	80040f8 <HAL_ADCEx_MultiModeConfigChannel>
 80014e6:	b108      	cbz	r0, 80014ec <main+0x394>
 80014e8:	b672      	cpsid	i
  while (1)
 80014ea:	e7fe      	b.n	80014ea <main+0x392>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014ec:	4ca7      	ldr	r4, [pc, #668]	@ (800178c <main+0x634>)
 80014ee:	2306      	movs	r3, #6
  sConfig.OffsetSignedSaturation = DISABLE;
 80014f0:	f88d 00d5 	strb.w	r0, [sp, #213]	@ 0xd5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f4:	a92f      	add	r1, sp, #188	@ 0xbc
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014f6:	e9cd 432f 	strd	r4, r3, [sp, #188]	@ 0xbc
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014fa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80014fe:	2403      	movs	r4, #3
  sConfig.Offset = 0;
 8001500:	e9cd 7033 	strd	r7, r0, [sp, #204]	@ 0xcc
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001504:	4628      	mov	r0, r5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001506:	e9cd 4331 	strd	r4, r3, [sp, #196]	@ 0xc4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800150a:	f002 f935 	bl	8003778 <HAL_ADC_ConfigChannel>
 800150e:	4602      	mov	r2, r0
 8001510:	b108      	cbz	r0, 8001516 <main+0x3be>
 8001512:	b672      	cpsid	i
  while (1)
 8001514:	e7fe      	b.n	8001514 <main+0x3bc>
  hfdcan1.Instance = FDCAN1;
 8001516:	489e      	ldr	r0, [pc, #632]	@ (8001790 <main+0x638>)
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8001518:	f04f 090a 	mov.w	r9, #10
  hfdcan1.Instance = FDCAN1;
 800151c:	4b9d      	ldr	r3, [pc, #628]	@ (8001794 <main+0x63c>)
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 800151e:	2512      	movs	r5, #18
  hfdcan1.Init.NominalTimeSeg1 = 79;
 8001520:	f04f 0b4f 	mov.w	fp, #79	@ 0x4f
  hfdcan1.Init.DataTimeSeg1 = 21;
 8001524:	f04f 0a15 	mov.w	sl, #21
  hfdcan1.Instance = FDCAN1;
 8001528:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800152a:	f44f 7340 	mov.w	r3, #768	@ 0x300
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800152e:	8202      	strh	r2, [r0, #16]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001530:	7482      	strb	r2, [r0, #18]
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001532:	63c2      	str	r2, [r0, #60]	@ 0x3c
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 8001534:	6685      	str	r5, [r0, #104]	@ 0x68
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001536:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hfdcan1.Init.StdFiltersNbr = 0;
 800153a:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800153e:	e9c0 2712 	strd	r2, r7, [r0, #72]	@ 0x48
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001542:	e9c0 2714 	strd	r2, r7, [r0, #80]	@ 0x50
  hfdcan1.Init.TxBuffersNbr = 0;
 8001546:	e9c0 2216 	strd	r2, r2, [r0, #88]	@ 0x58
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800154a:	e9c0 9218 	strd	r9, r2, [r0, #96]	@ 0x60
  hfdcan1.Init.NominalSyncJumpWidth = 20;
 800154e:	e9c0 6805 	strd	r6, r8, [r0, #20]
  hfdcan1.Init.NominalTimeSeg2 = 20;
 8001552:	e9c0 b807 	strd	fp, r8, [r0, #28]
  hfdcan1.Init.DataSyncJumpWidth = 3;
 8001556:	e9c0 6409 	strd	r6, r4, [r0, #36]	@ 0x24
  hfdcan1.Init.DataTimeSeg2 = 3;
 800155a:	e9c0 a40b 	strd	sl, r4, [r0, #44]	@ 0x2c
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 800155e:	e9c0 9510 	strd	r9, r5, [r0, #64]	@ 0x40
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001562:	f004 fba9 	bl	8005cb8 <HAL_FDCAN_Init>
 8001566:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800156a:	4602      	mov	r2, r0
 800156c:	b108      	cbz	r0, 8001572 <main+0x41a>
 800156e:	b672      	cpsid	i
  while (1)
 8001570:	e7fe      	b.n	8001570 <main+0x418>
  hfdcan2.Instance = FDCAN2;
 8001572:	4889      	ldr	r0, [pc, #548]	@ (8001798 <main+0x640>)
 8001574:	4989      	ldr	r1, [pc, #548]	@ (800179c <main+0x644>)
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001576:	8202      	strh	r2, [r0, #16]
  hfdcan2.Instance = FDCAN2;
 8001578:	6001      	str	r1, [r0, #0]
  hfdcan2.Init.ProtocolException = DISABLE;
 800157a:	7482      	strb	r2, [r0, #18]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800157c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hfdcan2.Init.MessageRAMOffset = 360;
 8001580:	f44f 73b4 	mov.w	r3, #360	@ 0x168
  hfdcan2.Init.NominalSyncJumpWidth = 20;
 8001584:	e9c0 6805 	strd	r6, r8, [r0, #20]
  hfdcan2.Init.NominalTimeSeg2 = 20;
 8001588:	e9c0 b807 	strd	fp, r8, [r0, #28]
  hfdcan2.Init.DataSyncJumpWidth = 3;
 800158c:	e9c0 6409 	strd	r6, r4, [r0, #36]	@ 0x24
  hfdcan2.Init.DataTimeSeg2 = 3;
 8001590:	e9c0 a40b 	strd	sl, r4, [r0, #44]	@ 0x2c
  hfdcan2.Init.StdFiltersNbr = 0;
 8001594:	e9c0 320d 	strd	r3, r2, [r0, #52]	@ 0x34
  hfdcan2.Init.RxFifo0ElmtsNbr = 10;
 8001598:	e9c0 290f 	strd	r2, r9, [r0, #60]	@ 0x3c
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800159c:	e9c0 5211 	strd	r5, r2, [r0, #68]	@ 0x44
  hfdcan2.Init.RxBuffersNbr = 0;
 80015a0:	e9c0 7213 	strd	r7, r2, [r0, #76]	@ 0x4c
  hfdcan2.Init.TxEventsNbr = 0;
 80015a4:	e9c0 7215 	strd	r7, r2, [r0, #84]	@ 0x54
  hfdcan2.Init.TxFifoQueueElmtsNbr = 10;
 80015a8:	e9c0 2917 	strd	r2, r9, [r0, #92]	@ 0x5c
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 80015ac:	e9c0 2519 	strd	r2, r5, [r0, #100]	@ 0x64
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80015b0:	f004 fb82 	bl	8005cb8 <HAL_FDCAN_Init>
 80015b4:	b108      	cbz	r0, 80015ba <main+0x462>
 80015b6:	b672      	cpsid	i
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <main+0x460>
  hi2c1.Instance = I2C1;
 80015ba:	4c79      	ldr	r4, [pc, #484]	@ (80017a0 <main+0x648>)
  hi2c1.Init.Timing = 0x307075B1;
 80015bc:	4b79      	ldr	r3, [pc, #484]	@ (80017a4 <main+0x64c>)
 80015be:	4d7a      	ldr	r5, [pc, #488]	@ (80017a8 <main+0x650>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c0:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c2:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 80015c6:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ca:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ce:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x307075B1;
 80015d0:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d4:	f005 fa98 	bl	8006b08 <HAL_I2C_Init>
 80015d8:	4601      	mov	r1, r0
 80015da:	b108      	cbz	r0, 80015e0 <main+0x488>
 80015dc:	b672      	cpsid	i
  while (1)
 80015de:	e7fe      	b.n	80015de <main+0x486>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015e0:	4620      	mov	r0, r4
 80015e2:	f005 fc83 	bl	8006eec <HAL_I2CEx_ConfigAnalogFilter>
 80015e6:	4601      	mov	r1, r0
 80015e8:	b108      	cbz	r0, 80015ee <main+0x496>
 80015ea:	b672      	cpsid	i
  while (1)
 80015ec:	e7fe      	b.n	80015ec <main+0x494>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015ee:	4620      	mov	r0, r4
 80015f0:	f005 fcaa 	bl	8006f48 <HAL_I2CEx_ConfigDigitalFilter>
 80015f4:	b108      	cbz	r0, 80015fa <main+0x4a2>
 80015f6:	b672      	cpsid	i
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <main+0x4a0>
  hi2c4.Instance = I2C4;
 80015fa:	4c6c      	ldr	r4, [pc, #432]	@ (80017ac <main+0x654>)
 80015fc:	4b6c      	ldr	r3, [pc, #432]	@ (80017b0 <main+0x658>)
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015fe:	6220      	str	r0, [r4, #32]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001600:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c4.Init.OwnAddress2 = 0;
 8001604:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001608:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800160c:	4620      	mov	r0, r4
  hi2c4.Init.Timing = 0x307075B1;
 800160e:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001612:	f005 fa79 	bl	8006b08 <HAL_I2C_Init>
 8001616:	4601      	mov	r1, r0
 8001618:	b108      	cbz	r0, 800161e <main+0x4c6>
 800161a:	b672      	cpsid	i
  while (1)
 800161c:	e7fe      	b.n	800161c <main+0x4c4>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800161e:	4620      	mov	r0, r4
 8001620:	f005 fc64 	bl	8006eec <HAL_I2CEx_ConfigAnalogFilter>
 8001624:	b108      	cbz	r0, 800162a <main+0x4d2>
 8001626:	b672      	cpsid	i
  while (1)
 8001628:	e7fe      	b.n	8001628 <main+0x4d0>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800162a:	2100      	movs	r1, #0
 800162c:	485f      	ldr	r0, [pc, #380]	@ (80017ac <main+0x654>)
 800162e:	f005 fc8b 	bl	8006f48 <HAL_I2CEx_ConfigDigitalFilter>
 8001632:	b108      	cbz	r0, 8001638 <main+0x4e0>
 8001634:	b672      	cpsid	i
  while (1)
 8001636:	e7fe      	b.n	8001636 <main+0x4de>
  huart1.Instance = USART1;
 8001638:	4c5e      	ldr	r4, [pc, #376]	@ (80017b4 <main+0x65c>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 800163a:	250c      	movs	r5, #12
  huart1.Init.BaudRate = 115200;
 800163c:	4b5e      	ldr	r3, [pc, #376]	@ (80017b8 <main+0x660>)
 800163e:	f44f 36e1 	mov.w	r6, #115200	@ 0x1c200
  huart1.Init.Parity = UART_PARITY_NONE;
 8001642:	6120      	str	r0, [r4, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001644:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001648:	e9c4 5005 	strd	r5, r0, [r4, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164c:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001650:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001654:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 8001656:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800165a:	f00a faa6 	bl	800bbaa <HAL_UART_Init>
 800165e:	4601      	mov	r1, r0
 8001660:	b108      	cbz	r0, 8001666 <main+0x50e>
 8001662:	b672      	cpsid	i
  while (1)
 8001664:	e7fe      	b.n	8001664 <main+0x50c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001666:	4620      	mov	r0, r4
 8001668:	f00a fbb8 	bl	800bddc <HAL_UARTEx_SetTxFifoThreshold>
 800166c:	4601      	mov	r1, r0
 800166e:	b108      	cbz	r0, 8001674 <main+0x51c>
 8001670:	b672      	cpsid	i
  while (1)
 8001672:	e7fe      	b.n	8001672 <main+0x51a>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001674:	4620      	mov	r0, r4
 8001676:	f00a fbd6 	bl	800be26 <HAL_UARTEx_SetRxFifoThreshold>
 800167a:	b108      	cbz	r0, 8001680 <main+0x528>
 800167c:	b672      	cpsid	i
  while (1)
 800167e:	e7fe      	b.n	800167e <main+0x526>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001680:	4620      	mov	r0, r4
 8001682:	f00a fb8c 	bl	800bd9e <HAL_UARTEx_DisableFifoMode>
 8001686:	b108      	cbz	r0, 800168c <main+0x534>
 8001688:	b672      	cpsid	i
  while (1)
 800168a:	e7fe      	b.n	800168a <main+0x532>
  huart2.Instance = USART2;
 800168c:	4c4b      	ldr	r4, [pc, #300]	@ (80017bc <main+0x664>)
  huart2.Init.BaudRate = 56800;
 800168e:	f64d 53e0 	movw	r3, #56800	@ 0xdde0
 8001692:	f8df b138 	ldr.w	fp, [pc, #312]	@ 80017cc <main+0x674>
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001696:	62a0      	str	r0, [r4, #40]	@ 0x28
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001698:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800169c:	e9c4 0504 	strd	r0, r5, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016a4:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016a8:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 56800;
 80016aa:	e9c4 b300 	strd	fp, r3, [r4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ae:	f00a fa7c 	bl	800bbaa <HAL_UART_Init>
 80016b2:	4601      	mov	r1, r0
 80016b4:	b108      	cbz	r0, 80016ba <main+0x562>
 80016b6:	b672      	cpsid	i
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <main+0x560>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ba:	4620      	mov	r0, r4
 80016bc:	f00a fb8e 	bl	800bddc <HAL_UARTEx_SetTxFifoThreshold>
 80016c0:	4601      	mov	r1, r0
 80016c2:	b108      	cbz	r0, 80016c8 <main+0x570>
 80016c4:	b672      	cpsid	i
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <main+0x56e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c8:	4620      	mov	r0, r4
 80016ca:	f00a fbac 	bl	800be26 <HAL_UARTEx_SetRxFifoThreshold>
 80016ce:	b108      	cbz	r0, 80016d4 <main+0x57c>
 80016d0:	b672      	cpsid	i
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <main+0x57a>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016d4:	4620      	mov	r0, r4
 80016d6:	f00a fb62 	bl	800bd9e <HAL_UARTEx_DisableFifoMode>
 80016da:	4603      	mov	r3, r0
 80016dc:	b108      	cbz	r0, 80016e2 <main+0x58a>
 80016de:	b672      	cpsid	i
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <main+0x588>
  huart3.Instance = USART3;
 80016e2:	4837      	ldr	r0, [pc, #220]	@ (80017c0 <main+0x668>)
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80016e4:	4619      	mov	r1, r3
  huart3.Instance = USART3;
 80016e6:	4a37      	ldr	r2, [pc, #220]	@ (80017c4 <main+0x66c>)
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016e8:	6283      	str	r3, [r0, #40]	@ 0x28
  huart3.Init.BaudRate = 115200;
 80016ea:	e9c0 2600 	strd	r2, r6, [r0]
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80016ee:	461a      	mov	r2, r3
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016f0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016fc:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001700:	f00a fb06 	bl	800bd10 <HAL_RS485Ex_Init>
 8001704:	b108      	cbz	r0, 800170a <main+0x5b2>
 8001706:	b672      	cpsid	i
  while (1)
 8001708:	e7fe      	b.n	8001708 <main+0x5b0>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800170a:	2100      	movs	r1, #0
 800170c:	482c      	ldr	r0, [pc, #176]	@ (80017c0 <main+0x668>)
 800170e:	f00a fb65 	bl	800bddc <HAL_UARTEx_SetTxFifoThreshold>
 8001712:	4601      	mov	r1, r0
 8001714:	b108      	cbz	r0, 800171a <main+0x5c2>
 8001716:	b672      	cpsid	i
  while (1)
 8001718:	e7fe      	b.n	8001718 <main+0x5c0>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800171a:	4829      	ldr	r0, [pc, #164]	@ (80017c0 <main+0x668>)
 800171c:	f00a fb83 	bl	800be26 <HAL_UARTEx_SetRxFifoThreshold>
 8001720:	b108      	cbz	r0, 8001726 <main+0x5ce>
 8001722:	b672      	cpsid	i
  while (1)
 8001724:	e7fe      	b.n	8001724 <main+0x5cc>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001726:	4826      	ldr	r0, [pc, #152]	@ (80017c0 <main+0x668>)
 8001728:	f00a fb39 	bl	800bd9e <HAL_UARTEx_DisableFifoMode>
 800172c:	b108      	cbz	r0, 8001732 <main+0x5da>
 800172e:	b672      	cpsid	i
  while (1)
 8001730:	e7fe      	b.n	8001730 <main+0x5d8>
  huart6.Instance = USART6;
 8001732:	4c25      	ldr	r4, [pc, #148]	@ (80017c8 <main+0x670>)
  huart6.Init.BaudRate = 115200;
 8001734:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001738:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80017d0 <main+0x678>
  huart6.Init.Parity = UART_PARITY_NONE;
 800173c:	6120      	str	r0, [r4, #16]
  huart6.Init.BaudRate = 115200;
 800173e:	e9c4 a300 	strd	sl, r3, [r4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001742:	230c      	movs	r3, #12
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001744:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001748:	e9c4 3005 	strd	r3, r0, [r4, #20]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800174c:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001750:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001754:	4620      	mov	r0, r4
 8001756:	f00a fa28 	bl	800bbaa <HAL_UART_Init>
 800175a:	4601      	mov	r1, r0
 800175c:	b108      	cbz	r0, 8001762 <main+0x60a>
 800175e:	b672      	cpsid	i
  while (1)
 8001760:	e7fe      	b.n	8001760 <main+0x608>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001762:	4620      	mov	r0, r4
 8001764:	f00a fb3a 	bl	800bddc <HAL_UARTEx_SetTxFifoThreshold>
 8001768:	4601      	mov	r1, r0
 800176a:	b108      	cbz	r0, 8001770 <main+0x618>
 800176c:	b672      	cpsid	i
  while (1)
 800176e:	e7fe      	b.n	800176e <main+0x616>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001770:	4620      	mov	r0, r4
 8001772:	f00a fb58 	bl	800be26 <HAL_UARTEx_SetRxFifoThreshold>
 8001776:	b108      	cbz	r0, 800177c <main+0x624>
 8001778:	b672      	cpsid	i
  while (1)
 800177a:	e7fe      	b.n	800177a <main+0x622>
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800177c:	4620      	mov	r0, r4
 800177e:	f00a fb0e 	bl	800bd9e <HAL_UARTEx_DisableFifoMode>
 8001782:	4604      	mov	r4, r0
 8001784:	b330      	cbz	r0, 80017d4 <main+0x67c>
 8001786:	b672      	cpsid	i
  while (1)
 8001788:	e7fe      	b.n	8001788 <main+0x630>
 800178a:	bf00      	nop
 800178c:	4b840000 	.word	0x4b840000
 8001790:	240025f8 	.word	0x240025f8
 8001794:	4000a000 	.word	0x4000a000
 8001798:	24002558 	.word	0x24002558
 800179c:	4000a400 	.word	0x4000a400
 80017a0:	2400250c 	.word	0x2400250c
 80017a4:	40005400 	.word	0x40005400
 80017a8:	307075b1 	.word	0x307075b1
 80017ac:	240024c0 	.word	0x240024c0
 80017b0:	58001c00 	.word	0x58001c00
 80017b4:	2400207c 	.word	0x2400207c
 80017b8:	40011000 	.word	0x40011000
 80017bc:	24001fec 	.word	0x24001fec
 80017c0:	24001f5c 	.word	0x24001f5c
 80017c4:	40004800 	.word	0x40004800
 80017c8:	24001ecc 	.word	0x24001ecc
 80017cc:	40004400 	.word	0x40004400
 80017d0:	40011400 	.word	0x40011400
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d4:	4601      	mov	r1, r0
 80017d6:	2210      	movs	r2, #16
 80017d8:	a82f      	add	r0, sp, #188	@ 0xbc
  htim4.Instance = TIM4;
 80017da:	4da5      	ldr	r5, [pc, #660]	@ (8001a70 <main+0x918>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017dc:	f01a fd6c 	bl	801c2b8 <memset>
  htim4.Init.Prescaler = 60000;
 80017e0:	f8df 92c0 	ldr.w	r9, [pc, #704]	@ 8001aa4 <main+0x94c>
 80017e4:	f64e 2360 	movw	r3, #60000	@ 0xea60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e8:	ae2b      	add	r6, sp, #172	@ 0xac
 80017ea:	942b      	str	r4, [sp, #172]	@ 0xac
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017ec:	4628      	mov	r0, r5
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ee:	60ac      	str	r4, [r5, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f0:	61ac      	str	r4, [r5, #24]
  htim4.Init.Prescaler = 60000;
 80017f2:	e9c5 9300 	strd	r9, r3, [r5]
  htim4.Init.Period = 65535;
 80017f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fa:	e9c6 4401 	strd	r4, r4, [r6, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fe:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001802:	f008 ff87 	bl	800a714 <HAL_TIM_Base_Init>
 8001806:	b108      	cbz	r0, 800180c <main+0x6b4>
 8001808:	b672      	cpsid	i
  while (1)
 800180a:	e7fe      	b.n	800180a <main+0x6b2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001810:	a92f      	add	r1, sp, #188	@ 0xbc
 8001812:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001814:	932f      	str	r3, [sp, #188]	@ 0xbc
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001816:	f009 f8d1 	bl	800a9bc <HAL_TIM_ConfigClockSource>
 800181a:	b108      	cbz	r0, 8001820 <main+0x6c8>
 800181c:	b672      	cpsid	i
  while (1)
 800181e:	e7fe      	b.n	800181e <main+0x6c6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001820:	902b      	str	r0, [sp, #172]	@ 0xac
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001822:	4631      	mov	r1, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001824:	902d      	str	r0, [sp, #180]	@ 0xb4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001826:	4628      	mov	r0, r5
 8001828:	f009 fa2c 	bl	800ac84 <HAL_TIMEx_MasterConfigSynchronization>
 800182c:	b108      	cbz	r0, 8001832 <main+0x6da>
 800182e:	b672      	cpsid	i
  while (1)
 8001830:	e7fe      	b.n	8001830 <main+0x6d8>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001832:	221c      	movs	r2, #28
 8001834:	2100      	movs	r1, #0
 8001836:	a82f      	add	r0, sp, #188	@ 0xbc
  hadc3.Instance = ADC3;
 8001838:	4c8e      	ldr	r4, [pc, #568]	@ (8001a74 <main+0x91c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800183a:	f01a fd3d 	bl	801c2b8 <memset>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 800183e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001842:	f8df e264 	ldr.w	lr, [pc, #612]	@ 8001aa8 <main+0x950>
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001846:	f04f 0808 	mov.w	r8, #8
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800184a:	2504      	movs	r5, #4
  hadc3.Init.NbrOfConversion = 1;
 800184c:	2201      	movs	r2, #1
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800184e:	4620      	mov	r0, r4
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001850:	6125      	str	r5, [r4, #16]
  hadc3.Init.NbrOfConversion = 1;
 8001852:	61a2      	str	r2, [r4, #24]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001854:	e9c4 e300 	strd	lr, r3, [r4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	e9c4 8302 	strd	r8, r3, [r4, #8]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800185e:	82a3      	strh	r3, [r4, #20]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001860:	7723      	strb	r3, [r4, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001862:	6363      	str	r3, [r4, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001864:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001868:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800186c:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001870:	f002 fac2 	bl	8003df8 <HAL_ADC_Init>
 8001874:	b108      	cbz	r0, 800187a <main+0x722>
 8001876:	b672      	cpsid	i
  while (1)
 8001878:	e7fe      	b.n	8001878 <main+0x720>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800187a:	2306      	movs	r3, #6
 800187c:	4f7e      	ldr	r7, [pc, #504]	@ (8001a78 <main+0x920>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800187e:	f04f 0c03 	mov.w	ip, #3
  sConfig.OffsetSignedSaturation = DISABLE;
 8001882:	f88d 00d5 	strb.w	r0, [sp, #213]	@ 0xd5
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001886:	a92f      	add	r1, sp, #188	@ 0xbc
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001888:	e9cd 732f 	strd	r7, r3, [sp, #188]	@ 0xbc
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800188c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
  sConfig.Offset = 0;
 8001890:	e9cd 5033 	strd	r5, r0, [sp, #204]	@ 0xcc
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001894:	4620      	mov	r0, r4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001896:	e9cd c331 	strd	ip, r3, [sp, #196]	@ 0xc4
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800189a:	f001 ff6d 	bl	8003778 <HAL_ADC_ConfigChannel>
 800189e:	b108      	cbz	r0, 80018a4 <main+0x74c>
 80018a0:	b672      	cpsid	i
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <main+0x74a>
  huart4.Instance = UART4;
 80018a4:	4c75      	ldr	r4, [pc, #468]	@ (8001a7c <main+0x924>)
  huart4.Init.Mode = UART_MODE_TX_RX;
 80018a6:	250c      	movs	r5, #12
  huart4.Init.BaudRate = 115200;
 80018a8:	4b75      	ldr	r3, [pc, #468]	@ (8001a80 <main+0x928>)
 80018aa:	f44f 37e1 	mov.w	r7, #115200	@ 0x1c200
  huart4.Init.Parity = UART_PARITY_NONE;
 80018ae:	6120      	str	r0, [r4, #16]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80018b0:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b4:	e9c4 5005 	strd	r5, r0, [r4, #20]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018b8:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018bc:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80018c0:	4620      	mov	r0, r4
  huart4.Init.BaudRate = 115200;
 80018c2:	e9c4 3700 	strd	r3, r7, [r4]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80018c6:	f00a f970 	bl	800bbaa <HAL_UART_Init>
 80018ca:	4601      	mov	r1, r0
 80018cc:	b108      	cbz	r0, 80018d2 <main+0x77a>
 80018ce:	b672      	cpsid	i
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <main+0x778>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018d2:	4620      	mov	r0, r4
 80018d4:	f00a fa82 	bl	800bddc <HAL_UARTEx_SetTxFifoThreshold>
 80018d8:	4601      	mov	r1, r0
 80018da:	b108      	cbz	r0, 80018e0 <main+0x788>
 80018dc:	b672      	cpsid	i
  while (1)
 80018de:	e7fe      	b.n	80018de <main+0x786>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018e0:	4620      	mov	r0, r4
 80018e2:	f00a faa0 	bl	800be26 <HAL_UARTEx_SetRxFifoThreshold>
 80018e6:	b108      	cbz	r0, 80018ec <main+0x794>
 80018e8:	b672      	cpsid	i
  while (1)
 80018ea:	e7fe      	b.n	80018ea <main+0x792>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80018ec:	4620      	mov	r0, r4
 80018ee:	f00a fa56 	bl	800bd9e <HAL_UARTEx_DisableFifoMode>
 80018f2:	b108      	cbz	r0, 80018f8 <main+0x7a0>
 80018f4:	b672      	cpsid	i
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <main+0x79e>
  huart8.Instance = UART8;
 80018f8:	4c62      	ldr	r4, [pc, #392]	@ (8001a84 <main+0x92c>)
 80018fa:	4b63      	ldr	r3, [pc, #396]	@ (8001a88 <main+0x930>)
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018fc:	62a0      	str	r0, [r4, #40]	@ 0x28
  huart8.Init.StopBits = UART_STOPBITS_1;
 80018fe:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001902:	e9c4 0504 	strd	r0, r5, [r4, #16]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001906:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800190a:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800190e:	4620      	mov	r0, r4
  huart8.Init.BaudRate = 115200;
 8001910:	e9c4 3700 	strd	r3, r7, [r4]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001914:	f00a f949 	bl	800bbaa <HAL_UART_Init>
 8001918:	4601      	mov	r1, r0
 800191a:	b108      	cbz	r0, 8001920 <main+0x7c8>
 800191c:	b672      	cpsid	i
  while (1)
 800191e:	e7fe      	b.n	800191e <main+0x7c6>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001920:	4620      	mov	r0, r4
 8001922:	f00a fa5b 	bl	800bddc <HAL_UARTEx_SetTxFifoThreshold>
 8001926:	4601      	mov	r1, r0
 8001928:	b108      	cbz	r0, 800192e <main+0x7d6>
 800192a:	b672      	cpsid	i
  while (1)
 800192c:	e7fe      	b.n	800192c <main+0x7d4>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800192e:	4620      	mov	r0, r4
 8001930:	f00a fa79 	bl	800be26 <HAL_UARTEx_SetRxFifoThreshold>
 8001934:	b108      	cbz	r0, 800193a <main+0x7e2>
 8001936:	b672      	cpsid	i
  while (1)
 8001938:	e7fe      	b.n	8001938 <main+0x7e0>
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 800193a:	4620      	mov	r0, r4
 800193c:	f00a fa2f 	bl	800bd9e <HAL_UARTEx_DisableFifoMode>
 8001940:	b108      	cbz	r0, 8001946 <main+0x7ee>
 8001942:	b672      	cpsid	i
  while (1)
 8001944:	e7fe      	b.n	8001944 <main+0x7ec>
  huart7.Instance = UART7;
 8001946:	4c51      	ldr	r4, [pc, #324]	@ (8001a8c <main+0x934>)
  huart7.Init.BaudRate = 115200;
 8001948:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800194c:	4950      	ldr	r1, [pc, #320]	@ (8001a90 <main+0x938>)
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800194e:	200c      	movs	r0, #12
 8001950:	f44f 7240 	mov.w	r2, #768	@ 0x300
  huart7.Init.BaudRate = 115200;
 8001954:	e9c4 1300 	strd	r1, r3, [r4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001958:	2300      	movs	r3, #0
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800195a:	e9c4 0205 	strd	r0, r2, [r4, #20]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800195e:	4620      	mov	r0, r4
  huart7.Init.Parity = UART_PARITY_NONE;
 8001960:	6123      	str	r3, [r4, #16]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001962:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001966:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800196a:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800196e:	f00a f91c 	bl	800bbaa <HAL_UART_Init>
 8001972:	4601      	mov	r1, r0
 8001974:	b108      	cbz	r0, 800197a <main+0x822>
 8001976:	b672      	cpsid	i
  while (1)
 8001978:	e7fe      	b.n	8001978 <main+0x820>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800197a:	4620      	mov	r0, r4
 800197c:	f00a fa2e 	bl	800bddc <HAL_UARTEx_SetTxFifoThreshold>
 8001980:	4601      	mov	r1, r0
 8001982:	b108      	cbz	r0, 8001988 <main+0x830>
 8001984:	b672      	cpsid	i
  while (1)
 8001986:	e7fe      	b.n	8001986 <main+0x82e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001988:	4620      	mov	r0, r4
 800198a:	f00a fa4c 	bl	800be26 <HAL_UARTEx_SetRxFifoThreshold>
 800198e:	b108      	cbz	r0, 8001994 <main+0x83c>
 8001990:	b672      	cpsid	i
  while (1)
 8001992:	e7fe      	b.n	8001992 <main+0x83a>
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001994:	4620      	mov	r0, r4
 8001996:	f00a fa02 	bl	800bd9e <HAL_UARTEx_DisableFifoMode>
 800199a:	4603      	mov	r3, r0
 800199c:	b108      	cbz	r0, 80019a2 <main+0x84a>
 800199e:	b672      	cpsid	i
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <main+0x848>
  hsd1.Instance = SDMMC1;
 80019a2:	483c      	ldr	r0, [pc, #240]	@ (8001a94 <main+0x93c>)
 80019a4:	4a3c      	ldr	r2, [pc, #240]	@ (8001a98 <main+0x940>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80019a6:	6083      	str	r3, [r0, #8]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80019a8:	e9c0 2300 	strd	r2, r3, [r0]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80019ac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80019b0:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hsd1.Init.ClockDiv = 4;
 80019b4:	2304      	movs	r3, #4
 80019b6:	6143      	str	r3, [r0, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80019b8:	f008 fa03 	bl	8009dc2 <HAL_SD_Init>
 80019bc:	4605      	mov	r5, r0
 80019be:	b108      	cbz	r0, 80019c4 <main+0x86c>
 80019c0:	b672      	cpsid	i
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <main+0x86a>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c4:	af28      	add	r7, sp, #160	@ 0xa0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	4601      	mov	r1, r0
 80019c8:	2210      	movs	r2, #16
 80019ca:	4630      	mov	r0, r6
 80019cc:	f01a fc74 	bl	801c2b8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d0:	221c      	movs	r2, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d2:	9528      	str	r5, [sp, #160]	@ 0xa0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d4:	4629      	mov	r1, r5
 80019d6:	a82f      	add	r0, sp, #188	@ 0xbc
  htim3.Instance = TIM3;
 80019d8:	4c30      	ldr	r4, [pc, #192]	@ (8001a9c <main+0x944>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019da:	e9c7 5501 	strd	r5, r5, [r7, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019de:	f01a fc6b 	bl	801c2b8 <memset>
  htim3.Init.Prescaler = 10;
 80019e2:	230a      	movs	r3, #10
 80019e4:	4a2e      	ldr	r2, [pc, #184]	@ (8001aa0 <main+0x948>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019e6:	4620      	mov	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e8:	60a5      	str	r5, [r4, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ea:	61a5      	str	r5, [r4, #24]
  htim3.Init.Prescaler = 10;
 80019ec:	e9c4 2300 	strd	r2, r3, [r4]
  htim3.Init.Period = 255;
 80019f0:	23ff      	movs	r3, #255	@ 0xff
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f2:	e9c4 3503 	strd	r3, r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019f6:	f008 fe8d 	bl	800a714 <HAL_TIM_Base_Init>
 80019fa:	b108      	cbz	r0, 8001a00 <main+0x8a8>
 80019fc:	b672      	cpsid	i
  while (1)
 80019fe:	e7fe      	b.n	80019fe <main+0x8a6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a04:	4631      	mov	r1, r6
 8001a06:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a08:	932b      	str	r3, [sp, #172]	@ 0xac
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a0a:	f008 ffd7 	bl	800a9bc <HAL_TIM_ConfigClockSource>
 8001a0e:	b108      	cbz	r0, 8001a14 <main+0x8bc>
 8001a10:	b672      	cpsid	i
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <main+0x8ba>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a14:	4620      	mov	r0, r4
 8001a16:	f008 fead 	bl	800a774 <HAL_TIM_PWM_Init>
 8001a1a:	b108      	cbz	r0, 8001a20 <main+0x8c8>
 8001a1c:	b672      	cpsid	i
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <main+0x8c6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a20:	9028      	str	r0, [sp, #160]	@ 0xa0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a22:	4639      	mov	r1, r7
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a24:	902a      	str	r0, [sp, #168]	@ 0xa8
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a26:	4620      	mov	r0, r4
 8001a28:	f009 f92c 	bl	800ac84 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	b108      	cbz	r0, 8001a34 <main+0x8dc>
 8001a30:	b672      	cpsid	i
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <main+0x8da>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a34:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a36:	9033      	str	r0, [sp, #204]	@ 0xcc
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a38:	a92f      	add	r1, sp, #188	@ 0xbc
  sConfigOC.Pulse = 0;
 8001a3a:	e9cd 302f 	strd	r3, r0, [sp, #188]	@ 0xbc
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001a3e:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a40:	4620      	mov	r0, r4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001a42:	9331      	str	r3, [sp, #196]	@ 0xc4
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a44:	f008 ff10 	bl	800a868 <HAL_TIM_PWM_ConfigChannel>
 8001a48:	b108      	cbz	r0, 8001a4e <main+0x8f6>
 8001a4a:	b672      	cpsid	i
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <main+0x8f4>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a4e:	2204      	movs	r2, #4
 8001a50:	a92f      	add	r1, sp, #188	@ 0xbc
 8001a52:	4812      	ldr	r0, [pc, #72]	@ (8001a9c <main+0x944>)
 8001a54:	f008 ff08 	bl	800a868 <HAL_TIM_PWM_ConfigChannel>
 8001a58:	b108      	cbz	r0, 8001a5e <main+0x906>
 8001a5a:	b672      	cpsid	i
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <main+0x904>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a5e:	2208      	movs	r2, #8
 8001a60:	a92f      	add	r1, sp, #188	@ 0xbc
 8001a62:	480e      	ldr	r0, [pc, #56]	@ (8001a9c <main+0x944>)
 8001a64:	f008 ff00 	bl	800a868 <HAL_TIM_PWM_ConfigChannel>
 8001a68:	4605      	mov	r5, r0
 8001a6a:	b1f8      	cbz	r0, 8001aac <main+0x954>
 8001a6c:	b672      	cpsid	i
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <main+0x916>
 8001a70:	240022bc 	.word	0x240022bc
 8001a74:	24002698 	.word	0x24002698
 8001a78:	cfb80000 	.word	0xcfb80000
 8001a7c:	2400222c 	.word	0x2400222c
 8001a80:	40004c00 	.word	0x40004c00
 8001a84:	2400210c 	.word	0x2400210c
 8001a88:	40007c00 	.word	0x40007c00
 8001a8c:	2400219c 	.word	0x2400219c
 8001a90:	40007800 	.word	0x40007800
 8001a94:	24002354 	.word	0x24002354
 8001a98:	52007000 	.word	0x52007000
 8001a9c:	24002308 	.word	0x24002308
 8001aa0:	40000400 	.word	0x40000400
 8001aa4:	40000800 	.word	0x40000800
 8001aa8:	58026000 	.word	0x58026000
  HAL_TIM_MspPostInit(&htim3);
 8001aac:	48d0      	ldr	r0, [pc, #832]	@ (8001df0 <main+0xc98>)
  leds.AddLED(LED_UART_RS485, GPIO {LED_RS485_GPIO_Port, LED_RS485_Pin});
 8001aae:	f04f 0a08 	mov.w	sl, #8
  HAL_TIM_MspPostInit(&htim3);
 8001ab2:	f000 fffb 	bl	8002aac <HAL_TIM_MspPostInit>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8001ab6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001aba:	4629      	mov	r1, r5
 8001abc:	48cd      	ldr	r0, [pc, #820]	@ (8001df4 <main+0xc9c>)
  leds.Init(&registers);
 8001abe:	4cce      	ldr	r4, [pc, #824]	@ (8001df8 <main+0xca0>)
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8001ac0:	f002 fac6 	bl	8004050 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8001ac4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001ac8:	4629      	mov	r1, r5
 8001aca:	48cc      	ldr	r0, [pc, #816]	@ (8001dfc <main+0xca4>)
  leds.AddLED(LED_UART_CM4, GPIO {LED_UART_CM4_GPIO_Port, LED_UART_CM4_Pin});
 8001acc:	f44f 6b00 	mov.w	fp, #2048	@ 0x800
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8001ad0:	f002 fabe 	bl	8004050 <HAL_ADCEx_Calibration_Start>
  registers.Init();
 8001ad4:	48ca      	ldr	r0, [pc, #808]	@ (8001e00 <main+0xca8>)
 8001ad6:	f016 fc14 	bl	8018302 <_ZN9Registers4InitEv>
  leds.Init(&registers);
 8001ada:	49c9      	ldr	r1, [pc, #804]	@ (8001e00 <main+0xca8>)
 8001adc:	4620      	mov	r0, r4
  leds.AddLED(LED_UART_RS485, GPIO {LED_RS485_GPIO_Port, LED_RS485_Pin});
 8001ade:	f8df 8360 	ldr.w	r8, [pc, #864]	@ 8001e40 <main+0xce8>
  leds.Init(&registers);
 8001ae2:	f012 f8dd 	bl	8013ca0 <_ZN4LEDS4InitEP9Registers>
  registers.Init(); 																registers.AddBaseRegisters();
 8001ae6:	48c6      	ldr	r0, [pc, #792]	@ (8001e00 <main+0xca8>)
 8001ae8:	f016 fc0b 	bl	8018302 <_ZN9Registers4InitEv>
 8001aec:	48c4      	ldr	r0, [pc, #784]	@ (8001e00 <main+0xca8>)
 8001aee:	f016 fcbd 	bl	801846c <_ZN9Registers16AddBaseRegistersEv>
  communication.Init(&registers, &services, &subscribers, &leds);					communication.AddRegisters();
 8001af2:	4bc4      	ldr	r3, [pc, #784]	@ (8001e04 <main+0xcac>)
 8001af4:	4ac4      	ldr	r2, [pc, #784]	@ (8001e08 <main+0xcb0>)
 8001af6:	49c2      	ldr	r1, [pc, #776]	@ (8001e00 <main+0xca8>)
 8001af8:	48c4      	ldr	r0, [pc, #784]	@ (8001e0c <main+0xcb4>)
 8001afa:	9400      	str	r4, [sp, #0]
 8001afc:	f00d fae5 	bl	800f0ca <_ZN13Communication4InitEP9RegistersP8ServicesP17MasterSubscribersP4LEDS>
 8001b00:	48c2      	ldr	r0, [pc, #776]	@ (8001e0c <main+0xcb4>)
 8001b02:	f00d fddf 	bl	800f6c4 <_ZN13Communication12AddRegistersEv>
  services.Init(&registers, &communication, &leds);
 8001b06:	4623      	mov	r3, r4
 8001b08:	4ac0      	ldr	r2, [pc, #768]	@ (8001e0c <main+0xcb4>)
 8001b0a:	49bd      	ldr	r1, [pc, #756]	@ (8001e00 <main+0xca8>)
 8001b0c:	48be      	ldr	r0, [pc, #760]	@ (8001e08 <main+0xcb0>)
 8001b0e:	f017 fadb 	bl	80190c8 <_ZN8Services4InitEP9RegistersP13CommunicationP4LEDS>
  publishers.Init(&registers, &communication); 										publishers.AddRegisters();
 8001b12:	4abe      	ldr	r2, [pc, #760]	@ (8001e0c <main+0xcb4>)
 8001b14:	49ba      	ldr	r1, [pc, #744]	@ (8001e00 <main+0xca8>)
 8001b16:	48be      	ldr	r0, [pc, #760]	@ (8001e10 <main+0xcb8>)
 8001b18:	f014 ff08 	bl	801692c <_ZN10Publishers4InitEP9RegistersP13Communication>
 8001b1c:	48bc      	ldr	r0, [pc, #752]	@ (8001e10 <main+0xcb8>)
 8001b1e:	f015 fbfd 	bl	801731c <_ZN10Publishers12AddRegistersEv>
  subscribers.Init(&registers, &leds);												subscribers.AddRegisters();
 8001b22:	4622      	mov	r2, r4
 8001b24:	49b6      	ldr	r1, [pc, #728]	@ (8001e00 <main+0xca8>)
 8001b26:	48b7      	ldr	r0, [pc, #732]	@ (8001e04 <main+0xcac>)
 8001b28:	f017 fc7e 	bl	8019428 <_ZN17MasterSubscribers4InitEP9RegistersP4LEDS>
 8001b2c:	48b5      	ldr	r0, [pc, #724]	@ (8001e04 <main+0xcac>)
 8001b2e:	f018 f92d 	bl	8019d8c <_ZN17MasterSubscribers12AddRegistersEv>
  sensors.Init(&registers, &publishers, &hardware_delay, &leds);					sensors.AddRegisters();
 8001b32:	4bb8      	ldr	r3, [pc, #736]	@ (8001e14 <main+0xcbc>)
 8001b34:	4ab6      	ldr	r2, [pc, #728]	@ (8001e10 <main+0xcb8>)
 8001b36:	49b2      	ldr	r1, [pc, #712]	@ (8001e00 <main+0xca8>)
 8001b38:	48b7      	ldr	r0, [pc, #732]	@ (8001e18 <main+0xcc0>)
 8001b3a:	9400      	str	r4, [sp, #0]
 8001b3c:	f016 fe8d 	bl	801885a <_ZN7Sensors4InitEP9RegistersP10PublishersP13HardwareDelayP4LEDS>
 8001b40:	48b5      	ldr	r0, [pc, #724]	@ (8001e18 <main+0xcc0>)
 8001b42:	f017 f953 	bl	8018dec <_ZN7Sensors12AddRegistersEv>
  leds.Init(&registers);															leds.AddRegisters();
 8001b46:	49ae      	ldr	r1, [pc, #696]	@ (8001e00 <main+0xca8>)
 8001b48:	4620      	mov	r0, r4
  leds.AddLED(LED_UART_CM4, GPIO {LED_UART_CM4_GPIO_Port, LED_UART_CM4_Pin});
 8001b4a:	f8df 92f8 	ldr.w	r9, [pc, #760]	@ 8001e44 <main+0xcec>
  leds.Init(&registers);															leds.AddRegisters();
 8001b4e:	f012 f8a7 	bl	8013ca0 <_ZN4LEDS4InitEP9Registers>
 8001b52:	4620      	mov	r0, r4
 8001b54:	f012 fd00 	bl	8014558 <_ZN4LEDS12AddRegistersEv>
  motion_generator.Init(&registers, &publishers, &services, &leds);					motion_generator.AddRegisters();
 8001b58:	4bab      	ldr	r3, [pc, #684]	@ (8001e08 <main+0xcb0>)
 8001b5a:	4aad      	ldr	r2, [pc, #692]	@ (8001e10 <main+0xcb8>)
 8001b5c:	49a8      	ldr	r1, [pc, #672]	@ (8001e00 <main+0xca8>)
 8001b5e:	48af      	ldr	r0, [pc, #700]	@ (8001e1c <main+0xcc4>)
 8001b60:	9400      	str	r4, [sp, #0]
 8001b62:	f013 fdd7 	bl	8015714 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS>
 8001b66:	48ad      	ldr	r0, [pc, #692]	@ (8001e1c <main+0xcc4>)
 8001b68:	f013 fb9e 	bl	80152a8 <_ZN15MotionGenerator12AddRegistersEv>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); 			// R LED
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	48a0      	ldr	r0, [pc, #640]	@ (8001df0 <main+0xc98>)
 8001b70:	f008 ffd0 	bl	800ab14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); 			// G LED
 8001b74:	2104      	movs	r1, #4
 8001b76:	489e      	ldr	r0, [pc, #632]	@ (8001df0 <main+0xc98>)
 8001b78:	f008 ffcc 	bl	800ab14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); 			// B LED
 8001b7c:	2108      	movs	r1, #8
 8001b7e:	489c      	ldr	r0, [pc, #624]	@ (8001df0 <main+0xc98>)
 8001b80:	f008 ffc8 	bl	800ab14 <HAL_TIM_PWM_Start>
  leds.AddLED(LED_UART_RS485, GPIO {LED_RS485_GPIO_Port, LED_RS485_Pin});
 8001b84:	f8ad a05c 	strh.w	sl, [sp, #92]	@ 0x5c
 8001b88:	4642      	mov	r2, r8
 8001b8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
 8001b94:	f012 fe10 	bl	80147b8 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_UART_BACK, GPIO {LED_UART_BACK_GPIO_Port, LED_UART_BACK_Pin});
 8001b98:	2310      	movs	r3, #16
 8001b9a:	4642      	mov	r2, r8
 8001b9c:	2103      	movs	r1, #3
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 8001ba4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8001ba6:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
 8001baa:	f012 fe05 	bl	80147b8 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_CANFD2, GPIO {LED_FDCAN2_GPIO_Port, LED_FDCAN2_Pin});
 8001bae:	2320      	movs	r3, #32
 8001bb0:	4642      	mov	r2, r8
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	f8ad 306c 	strh.w	r3, [sp, #108]	@ 0x6c
 8001bba:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8001bbc:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
 8001bc0:	f012 fdfa 	bl	80147b8 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_CANFD1, GPIO {LED_FDCAN1_GPIO_Port, LED_FDCAN1_Pin});
 8001bc4:	2340      	movs	r3, #64	@ 0x40
 8001bc6:	4642      	mov	r2, r8
 8001bc8:	4629      	mov	r1, r5
 8001bca:	4620      	mov	r0, r4
 8001bcc:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
 8001bd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8001bd2:	f8cd 8070 	str.w	r8, [sp, #112]	@ 0x70
 8001bd6:	f012 fdef 	bl	80147b8 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_UART_CM4, GPIO {LED_UART_CM4_GPIO_Port, LED_UART_CM4_Pin});
 8001bda:	f8ad b07c 	strh.w	fp, [sp, #124]	@ 0x7c
  leds.AddLED(LED_STATUS, GPIO {LED_STATUS_GPIO_Port, LED_STATUS_Pin});
 8001bde:	f508 6880 	add.w	r8, r8, #1024	@ 0x400
  leds.AddLED(LED_UART_CM4, GPIO {LED_UART_CM4_GPIO_Port, LED_UART_CM4_Pin});
 8001be2:	464a      	mov	r2, r9
 8001be4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8001be6:	2102      	movs	r1, #2
 8001be8:	4620      	mov	r0, r4
 8001bea:	f8cd 9078 	str.w	r9, [sp, #120]	@ 0x78
 8001bee:	f012 fde3 	bl	80147b8 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_STATUS, GPIO {LED_STATUS_GPIO_Port, LED_STATUS_Pin});
 8001bf2:	f8ad b084 	strh.w	fp, [sp, #132]	@ 0x84
 8001bf6:	4642      	mov	r2, r8
 8001bf8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8001bfa:	2107      	movs	r1, #7
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	f8cd 8080 	str.w	r8, [sp, #128]	@ 0x80
 8001c02:	f012 fdd9 	bl	80147b8 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_ACTIVITY, GPIO {LED_ACTIVITY_GPIO_Port, LED_ACTIVITY_Pin});
 8001c06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c0a:	4642      	mov	r2, r8
 8001c0c:	4651      	mov	r1, sl
 8001c0e:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
 8001c12:	4620      	mov	r0, r4
 8001c14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8001c16:	f8cd 8088 	str.w	r8, [sp, #136]	@ 0x88
 8001c1a:	f012 fdcd 	bl	80147b8 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_FAULT, GPIO {LED_FAULT_GPIO_Port, LED_FAULT_Pin});
 8001c1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c22:	4642      	mov	r2, r8
 8001c24:	2109      	movs	r1, #9
 8001c26:	4620      	mov	r0, r4
 8001c28:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
 8001c2c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8001c2e:	f8cd 8090 	str.w	r8, [sp, #144]	@ 0x90
 8001c32:	f012 fdc1 	bl	80147b8 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER1, GPIO {LED_USER1_GPIO_Port, LED_USER1_Pin});
 8001c36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c3a:	4642      	mov	r2, r8
 8001c3c:	210a      	movs	r1, #10
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f8ad 309c 	strh.w	r3, [sp, #156]	@ 0x9c
 8001c44:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8001c46:	f8cd 8098 	str.w	r8, [sp, #152]	@ 0x98
 8001c4a:	f012 fdb5 	bl	80147b8 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER2, GPIO {LED_USER2_GPIO_Port, LED_USER2_Pin});
 8001c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c52:	f8cd 80a0 	str.w	r8, [sp, #160]	@ 0xa0
 8001c56:	210b      	movs	r1, #11
 8001c58:	4620      	mov	r0, r4
 8001c5a:	f8ad 30a4 	strh.w	r3, [sp, #164]	@ 0xa4
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 8001c5e:	f10d 0848 	add.w	r8, sp, #72	@ 0x48
  leds.AddLED(LED_USER2, GPIO {LED_USER2_GPIO_Port, LED_USER2_Pin});
 8001c62:	e897 000c 	ldmia.w	r7, {r2, r3}
 8001c66:	f012 fda7 	bl	80147b8 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 8001c6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 8001c6e:	af14      	add	r7, sp, #80	@ 0x50
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 8001c70:	f8cd 90ac 	str.w	r9, [sp, #172]	@ 0xac
 8001c74:	f8ad 30b0 	strh.w	r3, [sp, #176]	@ 0xb0
 8001c78:	210c      	movs	r1, #12
 8001c7a:	4620      	mov	r0, r4
  leds.ConfigureTimings(LED_UART_BACK, std::vector<uint8_t>{1}, 2);
 8001c7c:	f10d 090c 	add.w	r9, sp, #12
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 8001c80:	e896 000c 	ldmia.w	r6, {r2, r3}
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 8001c84:	2601      	movs	r6, #1
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 8001c86:	f012 fd97 	bl	80147b8 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	4641      	mov	r1, r8
 8001c8e:	4632      	mov	r2, r6
 8001c90:	a82f      	add	r0, sp, #188	@ 0xbc
 8001c92:	f88d 6048 	strb.w	r6, [sp, #72]	@ 0x48
 8001c96:	e9cd 860c 	strd	r8, r6, [sp, #48]	@ 0x30
 8001c9a:	f7ff fa3b 	bl	8001114 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	aa2f      	add	r2, sp, #188	@ 0xbc
 8001ca2:	4629      	mov	r1, r5
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	f012 fdca 	bl	801483e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
      }
 8001caa:	a82f      	add	r0, sp, #188	@ 0xbc
 8001cac:	f7fe ffac 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_CANFD2, std::vector<uint8_t>{1}, 2);
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	4632      	mov	r2, r6
 8001cb4:	4641      	mov	r1, r8
 8001cb6:	a82f      	add	r0, sp, #188	@ 0xbc
 8001cb8:	f88d 6048 	strb.w	r6, [sp, #72]	@ 0x48
 8001cbc:	e9cd 860e 	strd	r8, r6, [sp, #56]	@ 0x38
 8001cc0:	f7ff fa28 	bl	8001114 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	aa2f      	add	r2, sp, #188	@ 0xbc
 8001cc8:	4631      	mov	r1, r6
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f012 fdb7 	bl	801483e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 8001cd0:	a82f      	add	r0, sp, #188	@ 0xbc
 8001cd2:	f7fe ff99 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_CM4, std::vector<uint8_t>{1}, 2);
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	4632      	mov	r2, r6
 8001cda:	4641      	mov	r1, r8
 8001cdc:	a82f      	add	r0, sp, #188	@ 0xbc
 8001cde:	f88d 6048 	strb.w	r6, [sp, #72]	@ 0x48
 8001ce2:	e9cd 8610 	strd	r8, r6, [sp, #64]	@ 0x40
 8001ce6:	f7ff fa15 	bl	8001114 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8001cea:	2302      	movs	r3, #2
 8001cec:	aa2f      	add	r2, sp, #188	@ 0xbc
 8001cee:	4620      	mov	r0, r4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f012 fda4 	bl	801483e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 8001cf6:	a82f      	add	r0, sp, #188	@ 0xbc
 8001cf8:	f7fe ff86 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_BACK, std::vector<uint8_t>{1}, 2);
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	a82f      	add	r0, sp, #188	@ 0xbc
 8001d00:	f88d 600c 	strb.w	r6, [sp, #12]
 8001d04:	e9cd 9612 	strd	r9, r6, [sp, #72]	@ 0x48
 8001d08:	e898 0006 	ldmia.w	r8, {r1, r2}
 8001d0c:	f7ff fa02 	bl	8001114 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8001d10:	2302      	movs	r3, #2
 8001d12:	aa2f      	add	r2, sp, #188	@ 0xbc
 8001d14:	2103      	movs	r1, #3
 8001d16:	4620      	mov	r0, r4
 8001d18:	f012 fd91 	bl	801483e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 8001d1c:	a82f      	add	r0, sp, #188	@ 0xbc
 8001d1e:	f7fe ff73 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_RS485, std::vector<uint8_t>{1}, 2);
 8001d22:	eb0d 030a 	add.w	r3, sp, sl
 8001d26:	a82f      	add	r0, sp, #188	@ 0xbc
 8001d28:	f88d 6008 	strb.w	r6, [sp, #8]
 8001d2c:	e9cd 3614 	strd	r3, r6, [sp, #80]	@ 0x50
 8001d30:	464b      	mov	r3, r9
 8001d32:	e897 0006 	ldmia.w	r7, {r1, r2}
 8001d36:	f7ff f9ed 	bl	8001114 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	aa2f      	add	r2, sp, #188	@ 0xbc
 8001d3e:	2104      	movs	r1, #4
 8001d40:	4620      	mov	r0, r4
 8001d42:	f012 fd7c 	bl	801483e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 8001d46:	a82f      	add	r0, sp, #188	@ 0xbc
 8001d48:	f7fe ff5e 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.AddRGBLED(LED_RGB, const_cast<uint32_t*>(&(TIM3->CCR1)), const_cast<uint32_t*>(&(TIM3->CCR2)), const_cast<uint32_t*>(&(TIM3->CCR3)));
 8001d4c:	4b34      	ldr	r3, [pc, #208]	@ (8001e20 <main+0xcc8>)
 8001d4e:	4a35      	ldr	r2, [pc, #212]	@ (8001e24 <main+0xccc>)
 8001d50:	210d      	movs	r1, #13
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	4620      	mov	r0, r4
 8001d56:	3b04      	subs	r3, #4
 8001d58:	f012 fb32 	bl	80143c0 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_>
  leds.TestLEDs();
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	f012 fc90 	bl	8014682 <_ZN4LEDS8TestLEDsEv>
  StartupLEDS(&leds);
 8001d62:	4620      	mov	r0, r4
 8001d64:	f00c fe26 	bl	800e9b4 <_Z11StartupLEDSP4LEDS>
  communication.SetModuleAddress(STM32_HEAD);
 8001d68:	4631      	mov	r1, r6
 8001d6a:	4828      	ldr	r0, [pc, #160]	@ (8001e0c <main+0xcb4>)
 8001d6c:	f00d fa39 	bl	800f1e2 <_ZN13Communication16SetModuleAddressEh>
  protocol_uart.SetProtocolPayloadMaxLength(256);
 8001d70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d74:	482c      	ldr	r0, [pc, #176]	@ (8001e28 <main+0xcd0>)
 8001d76:	f013 fe13 	bl	80159a0 <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>
  protocol_uart.AddInterface(UART_CM4, &huart1);
 8001d7a:	4a2c      	ldr	r2, [pc, #176]	@ (8001e2c <main+0xcd4>)
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	482a      	ldr	r0, [pc, #168]	@ (8001e28 <main+0xcd0>)
 8001d80:	f7fe ffce 	bl	8000d20 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  protocol_uart.AddInterface(UART_BACK, &huart6);
 8001d84:	4a2a      	ldr	r2, [pc, #168]	@ (8001e30 <main+0xcd8>)
 8001d86:	2103      	movs	r1, #3
 8001d88:	4827      	ldr	r0, [pc, #156]	@ (8001e28 <main+0xcd0>)
 8001d8a:	f7fe ffc9 	bl	8000d20 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  protocol_uart.AddInterface(UART_PIC, &huart2);
 8001d8e:	4a29      	ldr	r2, [pc, #164]	@ (8001e34 <main+0xcdc>)
 8001d90:	2105      	movs	r1, #5
 8001d92:	4825      	ldr	r0, [pc, #148]	@ (8001e28 <main+0xcd0>)
 8001d94:	f7fe ffc4 	bl	8000d20 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  communication.AddProtocol(&protocol_uart);
 8001d98:	4923      	ldr	r1, [pc, #140]	@ (8001e28 <main+0xcd0>)
 8001d9a:	481c      	ldr	r0, [pc, #112]	@ (8001e0c <main+0xcb4>)
 8001d9c:	f00d faf0 	bl	800f380 <_ZN13Communication11AddProtocolEP21CommunicationProtocol>
  communication.ActivateReception(UART_CM4);
 8001da0:	2102      	movs	r1, #2
 8001da2:	481a      	ldr	r0, [pc, #104]	@ (8001e0c <main+0xcb4>)
 8001da4:	f00d fa0a 	bl	800f1bc <_ZN13Communication17ActivateReceptionEh>
  communication.ActivateReception(UART_BACK);
 8001da8:	2103      	movs	r1, #3
 8001daa:	4818      	ldr	r0, [pc, #96]	@ (8001e0c <main+0xcb4>)
 8001dac:	f00d fa06 	bl	800f1bc <_ZN13Communication17ActivateReceptionEh>
  communication.ActivateReception(UART_PIC);
 8001db0:	2105      	movs	r1, #5
 8001db2:	4816      	ldr	r0, [pc, #88]	@ (8001e0c <main+0xcb4>)
 8001db4:	f00d fa02 	bl	800f1bc <_ZN13Communication17ActivateReceptionEh>
  protocol_canfd.SetProtocolPayloadMaxLength(62);
 8001db8:	213e      	movs	r1, #62	@ 0x3e
 8001dba:	481f      	ldr	r0, [pc, #124]	@ (8001e38 <main+0xce0>)
 8001dbc:	f013 fdf0 	bl	80159a0 <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>
  protocol_canfd.AddInterface(CANFD1, &hfdcan1);
 8001dc0:	4a1e      	ldr	r2, [pc, #120]	@ (8001e3c <main+0xce4>)
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	481c      	ldr	r0, [pc, #112]	@ (8001e38 <main+0xce0>)
 8001dc6:	f014 f887 	bl	8015ed8 <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef>
  protocol_canfd.ConfigureFilters(CANFD1);
 8001dca:	4629      	mov	r1, r5
 8001dcc:	481a      	ldr	r0, [pc, #104]	@ (8001e38 <main+0xce0>)
 8001dce:	f013 ffe2 	bl	8015d96 <_ZN11CANProtocol16ConfigureFiltersEh>
  protocol_canfd.ActivateReception(CANFD1);
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	4818      	ldr	r0, [pc, #96]	@ (8001e38 <main+0xce0>)
 8001dd6:	f013 fff1 	bl	8015dbc <_ZN11CANProtocol17ActivateReceptionEh>
  protocol_canfd.Start(CANFD1);
 8001dda:	4629      	mov	r1, r5
 8001ddc:	4816      	ldr	r0, [pc, #88]	@ (8001e38 <main+0xce0>)
 8001dde:	f013 fffe 	bl	8015dde <_ZN11CANProtocol5StartEh>
  communication.AddProtocol(&protocol_canfd);
 8001de2:	4915      	ldr	r1, [pc, #84]	@ (8001e38 <main+0xce0>)
 8001de4:	4809      	ldr	r0, [pc, #36]	@ (8001e0c <main+0xcb4>)
 8001de6:	f00d facb 	bl	800f380 <_ZN13Communication11AddProtocolEP21CommunicationProtocol>
  communication.ActivateReception(CANFD1);
 8001dea:	4629      	mov	r1, r5
 8001dec:	e02c      	b.n	8001e48 <main+0xcf0>
 8001dee:	bf00      	nop
 8001df0:	24002308 	.word	0x24002308
 8001df4:	240026fc 	.word	0x240026fc
 8001df8:	24000144 	.word	0x24000144
 8001dfc:	24002698 	.word	0x24002698
 8001e00:	2400177c 	.word	0x2400177c
 8001e04:	2400169c 	.word	0x2400169c
 8001e08:	2400021c 	.word	0x2400021c
 8001e0c:	24001660 	.word	0x24001660
 8001e10:	24000204 	.word	0x24000204
 8001e14:	240001e8 	.word	0x240001e8
 8001e18:	2400017c 	.word	0x2400017c
 8001e1c:	240000dc 	.word	0x240000dc
 8001e20:	4000043c 	.word	0x4000043c
 8001e24:	40000434 	.word	0x40000434
 8001e28:	24001714 	.word	0x24001714
 8001e2c:	2400207c 	.word	0x2400207c
 8001e30:	24001ecc 	.word	0x24001ecc
 8001e34:	24001fec 	.word	0x24001fec
 8001e38:	240016c0 	.word	0x240016c0
 8001e3c:	240025f8 	.word	0x240025f8
 8001e40:	58020c00 	.word	0x58020c00
 8001e44:	58020400 	.word	0x58020400
 8001e48:	4814      	ldr	r0, [pc, #80]	@ (8001e9c <main+0xd44>)
 8001e4a:	f00d f9b7 	bl	800f1bc <_ZN13Communication17ActivateReceptionEh>
  user.Init();
 8001e4e:	4814      	ldr	r0, [pc, #80]	@ (8001ea0 <main+0xd48>)
 8001e50:	f018 fc7c 	bl	801a74c <_ZN4User4InitEv>
  osKernelInitialize();
 8001e54:	f00a fba8 	bl	800c5a8 <osKernelInitialize>
  TrajectoryHandle = osThreadNew(TrajectoryTask, NULL, &Trajectory_attributes);
 8001e58:	4a12      	ldr	r2, [pc, #72]	@ (8001ea4 <main+0xd4c>)
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	4812      	ldr	r0, [pc, #72]	@ (8001ea8 <main+0xd50>)
 8001e5e:	f00a fbd1 	bl	800c604 <osThreadNew>
 8001e62:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <main+0xd54>)
  SensorsHandle = osThreadNew(SensorsTask, NULL, &Sensors_attributes);
 8001e64:	4a12      	ldr	r2, [pc, #72]	@ (8001eb0 <main+0xd58>)
 8001e66:	4629      	mov	r1, r5
  TrajectoryHandle = osThreadNew(TrajectoryTask, NULL, &Trajectory_attributes);
 8001e68:	6018      	str	r0, [r3, #0]
  SensorsHandle = osThreadNew(SensorsTask, NULL, &Sensors_attributes);
 8001e6a:	4812      	ldr	r0, [pc, #72]	@ (8001eb4 <main+0xd5c>)
 8001e6c:	f00a fbca 	bl	800c604 <osThreadNew>
 8001e70:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <main+0xd60>)
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 8001e72:	4a12      	ldr	r2, [pc, #72]	@ (8001ebc <main+0xd64>)
 8001e74:	4629      	mov	r1, r5
  SensorsHandle = osThreadNew(SensorsTask, NULL, &Sensors_attributes);
 8001e76:	6018      	str	r0, [r3, #0]
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 8001e78:	4811      	ldr	r0, [pc, #68]	@ (8001ec0 <main+0xd68>)
 8001e7a:	f00a fbc3 	bl	800c604 <osThreadNew>
 8001e7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <main+0xd6c>)
  LEDsHandle = osThreadNew(LEDsTask, NULL, &LEDs_attributes);
 8001e80:	4a11      	ldr	r2, [pc, #68]	@ (8001ec8 <main+0xd70>)
 8001e82:	4629      	mov	r1, r5
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 8001e84:	6018      	str	r0, [r3, #0]
  LEDsHandle = osThreadNew(LEDsTask, NULL, &LEDs_attributes);
 8001e86:	4811      	ldr	r0, [pc, #68]	@ (8001ecc <main+0xd74>)
 8001e88:	f00a fbbc 	bl	800c604 <osThreadNew>
 8001e8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <main+0xd78>)
 8001e8e:	6018      	str	r0, [r3, #0]
  user.AddOSThreads();
 8001e90:	4803      	ldr	r0, [pc, #12]	@ (8001ea0 <main+0xd48>)
 8001e92:	f018 fc5d 	bl	801a750 <_ZN4User12AddOSThreadsEv>
  osKernelStart();
 8001e96:	f00a fb99 	bl	800c5cc <osKernelStart>
  while (1)
 8001e9a:	e7fe      	b.n	8001e9a <main+0xd42>
 8001e9c:	24001660 	.word	0x24001660
 8001ea0:	24000094 	.word	0x24000094
 8001ea4:	0801c7ac 	.word	0x0801c7ac
 8001ea8:	08000f09 	.word	0x08000f09
 8001eac:	24001838 	.word	0x24001838
 8001eb0:	0801c788 	.word	0x0801c788
 8001eb4:	0800095d 	.word	0x0800095d
 8001eb8:	24001834 	.word	0x24001834
 8001ebc:	0801c764 	.word	0x0801c764
 8001ec0:	08000969 	.word	0x08000969
 8001ec4:	24001830 	.word	0x24001830
 8001ec8:	0801c740 	.word	0x0801c740
 8001ecc:	08000979 	.word	0x08000979
 8001ed0:	2400182c 	.word	0x2400182c

08001ed4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001ed4:	b510      	push	{r4, lr}
	  if (_Num)
 8001ed6:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001ed8:	4613      	mov	r3, r2
	  if (_Num)
 8001eda:	d005      	beq.n	8001ee8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001edc:	4601      	mov	r1, r0
 8001ede:	4622      	mov	r2, r4
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f01a f9cf 	bl	801c284 <memmove>
 8001ee6:	4603      	mov	r3, r0
	}
 8001ee8:	1918      	adds	r0, r3, r4
 8001eea:	bd10      	pop	{r4, pc}

08001eec <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ef0:	b08b      	sub	sp, #44	@ 0x2c
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	460c      	mov	r4, r1
	ID = communication.GetID((void*) huart, &success);
 8001ef6:	4601      	mov	r1, r0
 8001ef8:	f10d 020f 	add.w	r2, sp, #15
 8001efc:	4852      	ldr	r0, [pc, #328]	@ (8002048 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001efe:	9306      	str	r3, [sp, #24]
 8001f00:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001f04:	f00d f920 	bl	800f148 <_ZN13Communication5GetIDEPvPb>
	if (!success) {return;}
 8001f08:	f89d 300f 	ldrb.w	r3, [sp, #15]
	ID = communication.GetID((void*) huart, &success);
 8001f0c:	4605      	mov	r5, r0
	if (!success) {return;}
 8001f0e:	b1a3      	cbz	r3, 8001f3a <HAL_UARTEx_RxEventCallback+0x4e>
	std::vector<uint8_t>* buffer = communication.GetBuffer(ID, &success);
 8001f10:	4601      	mov	r1, r0
 8001f12:	f10d 020f 	add.w	r2, sp, #15
 8001f16:	484c      	ldr	r0, [pc, #304]	@ (8002048 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001f18:	f00d f92a 	bl	800f170 <_ZN13Communication9GetBufferEhPb>
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 8001f1c:	f10d 020f 	add.w	r2, sp, #15
	std::vector<uint8_t>* buffer = communication.GetBuffer(ID, &success);
 8001f20:	4607      	mov	r7, r0
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 8001f22:	4629      	mov	r1, r5
 8001f24:	4848      	ldr	r0, [pc, #288]	@ (8002048 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001f26:	f00d f92e 	bl	800f186 <_ZN13Communication14GetBufferIndexEhPb>
	if (!success) {communication.ActivateReception(ID); return;}
 8001f2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 8001f2e:	4680      	mov	r8, r0
	if (!success) {communication.ActivateReception(ID); return;}
 8001f30:	b94b      	cbnz	r3, 8001f46 <HAL_UARTEx_RxEventCallback+0x5a>
	communication.ActivateReception(ID);
 8001f32:	4629      	mov	r1, r5
 8001f34:	4844      	ldr	r0, [pc, #272]	@ (8002048 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001f36:	f00d f941 	bl	800f1bc <_ZN13Communication17ActivateReceptionEh>
      }
 8001f3a:	a804      	add	r0, sp, #16
 8001f3c:	f7fe fe64 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8001f40:	b00b      	add	sp, #44	@ 0x2c
 8001f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (Size == *buffer_index) {communication.ActivateReception(ID); return;}
 8001f46:	8801      	ldrh	r1, [r0, #0]
 8001f48:	42a1      	cmp	r1, r4
 8001f4a:	d0f2      	beq.n	8001f32 <HAL_UARTEx_RxEventCallback+0x46>
      : _M_current(__i) { }
 8001f4c:	683a      	ldr	r2, [r7, #0]
		received_data = std::vector<uint8_t>(buffer->begin() + *buffer_index, buffer->begin() + Size);
 8001f4e:	ab03      	add	r3, sp, #12
      { return __normal_iterator(_M_current + __n); }
 8001f50:	4411      	add	r1, r2
	if (Size > *buffer_index)
 8001f52:	d228      	bcs.n	8001fa6 <HAL_UARTEx_RxEventCallback+0xba>
		received_data = std::vector<uint8_t>(buffer->begin() + *buffer_index, buffer->begin() + Size);
 8001f54:	4422      	add	r2, r4
 8001f56:	a807      	add	r0, sp, #28
 8001f58:	f7ff f8be 	bl	80010d8 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_>
 8001f5c:	a804      	add	r0, sp, #16
 8001f5e:	a907      	add	r1, sp, #28
 8001f60:	f7fe fe5c 	bl	8000c1c <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8001f64:	a807      	add	r0, sp, #28
 8001f66:	f7fe fe4f 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	uint16_t processed_length = communication.Process(ID, received_data, &success);
 8001f6a:	a904      	add	r1, sp, #16
 8001f6c:	a807      	add	r0, sp, #28
 8001f6e:	f7fe ff45 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8001f72:	f10d 030f 	add.w	r3, sp, #15
 8001f76:	aa07      	add	r2, sp, #28
 8001f78:	4629      	mov	r1, r5
 8001f7a:	4833      	ldr	r0, [pc, #204]	@ (8002048 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001f7c:	f011 fcf8 	bl	8013970 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>
 8001f80:	4604      	mov	r4, r0
 8001f82:	a807      	add	r0, sp, #28
 8001f84:	f7fe fe40 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	*buffer_index += processed_length;
 8001f88:	f8b8 3000 	ldrh.w	r3, [r8]
 8001f8c:	18e0      	adds	r0, r4, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001f8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f92:	b280      	uxth	r0, r0
 8001f94:	1a9b      	subs	r3, r3, r2
 8001f96:	f8a8 0000 	strh.w	r0, [r8]
	if (*buffer_index >= buffer->size())
 8001f9a:	4298      	cmp	r0, r3
		*buffer_index -= buffer->size();
 8001f9c:	bf24      	itt	cs
 8001f9e:	1ac0      	subcs	r0, r0, r3
 8001fa0:	f8a8 0000 	strhcs.w	r0, [r8]
 8001fa4:	e7c5      	b.n	8001f32 <HAL_UARTEx_RxEventCallback+0x46>
		received_data = std::vector<uint8_t>(buffer->begin() + *buffer_index, buffer->end());
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	a807      	add	r0, sp, #28
 8001faa:	f7ff f895 	bl	80010d8 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_>
 8001fae:	a907      	add	r1, sp, #28
 8001fb0:	a804      	add	r0, sp, #16
 8001fb2:	f7fe fe33 	bl	8000c1c <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8001fb6:	a807      	add	r0, sp, #28
 8001fb8:	f7fe fe26 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      : _M_current(__i) { }
 8001fbc:	f8d7 9000 	ldr.w	r9, [r7]
      { return __normal_iterator(_M_current + __n); }
 8001fc0:	eb09 0b04 	add.w	fp, r9, r4
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
 8001fc4:	45cb      	cmp	fp, r9
 8001fc6:	d0d0      	beq.n	8001f6a <HAL_UARTEx_RxEventCallback+0x7e>
	  {
	    const size_type __n = std::distance(__first, __last);
	    if (size_type(this->_M_impl._M_end_of_storage
 8001fc8:	9b06      	ldr	r3, [sp, #24]
      : _M_current(__i) { }
 8001fca:	e9dd a604 	ldrd	sl, r6, [sp, #16]
			  - this->_M_impl._M_finish) >= __n)
 8001fce:	1b9a      	subs	r2, r3, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 8001fd0:	42a2      	cmp	r2, r4
 8001fd2:	d310      	bcc.n	8001ff6 <HAL_UARTEx_RxEventCallback+0x10a>
			      _Category>::__copy_m(__first, __last, __result);
 8001fd4:	4632      	mov	r2, r6
 8001fd6:	4659      	mov	r1, fp
 8001fd8:	4648      	mov	r0, r9
 8001fda:	f7fe ff03 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    std::advance(__mid, __elems_after);
		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		    std::__uninitialized_copy_a(__mid, __last,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
		    this->_M_impl._M_finish += __n - __elems_after;
 8001fde:	1932      	adds	r2, r6, r4
 8001fe0:	4631      	mov	r1, r6
 8001fe2:	4630      	mov	r0, r6
 8001fe4:	9205      	str	r2, [sp, #20]
 8001fe6:	f7ff ff75 	bl	8001ed4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001fea:	4632      	mov	r2, r6
 8001fec:	4649      	mov	r1, r9
 8001fee:	4648      	mov	r0, r9
 8001ff0:	f7fe fef8 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001ff4:	e7b9      	b.n	8001f6a <HAL_UARTEx_RxEventCallback+0x7e>
		// reachable.
		pointer __old_start = this->_M_impl._M_start;
		pointer __old_finish = this->_M_impl._M_finish;

		const size_type __len =
		  _M_check_len(__n, "vector::_M_range_insert");
 8001ff6:	4621      	mov	r1, r4
 8001ff8:	4a14      	ldr	r2, [pc, #80]	@ (800204c <HAL_UARTEx_RxEventCallback+0x160>)
 8001ffa:	a804      	add	r0, sp, #16
 8001ffc:	9301      	str	r3, [sp, #4]
 8001ffe:	f7fe fe24 	bl	8000c4a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8002002:	9000      	str	r0, [sp, #0]
		pointer __new_start(this->_M_allocate(__len));
 8002004:	f7fe fcf2 	bl	80009ec <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8002008:	4631      	mov	r1, r6
 800200a:	4602      	mov	r2, r0
 800200c:	4604      	mov	r4, r0
 800200e:	4650      	mov	r0, sl
 8002010:	f7ff ff60 	bl	8001ed4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8002014:	4659      	mov	r1, fp
 8002016:	4602      	mov	r2, r0
 8002018:	4648      	mov	r0, r9
 800201a:	f7fe fee3 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 800201e:	4631      	mov	r1, r6
 8002020:	4602      	mov	r2, r0
 8002022:	4630      	mov	r0, r6
 8002024:	f7ff ff56 	bl	8001ed4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8002028:	4606      	mov	r6, r0
	if (__p)
 800202a:	f1ba 0f00 	cmp.w	sl, #0
 800202e:	d005      	beq.n	800203c <HAL_UARTEx_RxEventCallback+0x150>
 8002030:	9b01      	ldr	r3, [sp, #4]
 8002032:	4650      	mov	r0, sl
 8002034:	eba3 010a 	sub.w	r1, r3, sl
 8002038:	f019 fdc8 	bl	801bbcc <_ZdlPvj>
		_GLIBCXX_ASAN_ANNOTATE_REINIT;
		_M_deallocate(__old_start,
			      this->_M_impl._M_end_of_storage - __old_start);
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
		this->_M_impl._M_end_of_storage = __new_start + __len;
 800203c:	9b00      	ldr	r3, [sp, #0]
		this->_M_impl._M_finish = __new_finish;
 800203e:	e9cd 4604 	strd	r4, r6, [sp, #16]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8002042:	441c      	add	r4, r3
 8002044:	9406      	str	r4, [sp, #24]
 8002046:	e790      	b.n	8001f6a <HAL_UARTEx_RxEventCallback+0x7e>
 8002048:	24001660 	.word	0x24001660
 800204c:	0801c641 	.word	0x0801c641

08002050 <_ZN4LEDSD1Ev>:
    uint16_t G_address;
    uint16_t B_address;
};

// LEDS class used to control the LED
class LEDS {
 8002050:	b570      	push	{r4, r5, r6, lr}
 8002052:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8002054:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
	if (__p)
 8002056:	b118      	cbz	r0, 8002060 <_ZN4LEDSD1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800205a:	1a09      	subs	r1, r1, r0
 800205c:	f019 fdb6 	bl	801bbcc <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8002060:	6a20      	ldr	r0, [r4, #32]
	if (__p)
 8002062:	b120      	cbz	r0, 800206e <_ZN4LEDSD1Ev+0x1e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002064:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002066:	1a09      	subs	r1, r1, r0
 8002068:	1109      	asrs	r1, r1, #4
 800206a:	f7fe fcbc 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 800206e:	6960      	ldr	r0, [r4, #20]
	if (__p)
 8002070:	b120      	cbz	r0, 800207c <_ZN4LEDSD1Ev+0x2c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002072:	69e1      	ldr	r1, [r4, #28]
 8002074:	1a09      	subs	r1, r1, r0
 8002076:	1109      	asrs	r1, r1, #4
 8002078:	f7fe fcb5 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800207c:	e9d4 5602 	ldrd	r5, r6, [r4, #8]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
 8002080:	42ae      	cmp	r6, r5
 8002082:	d107      	bne.n	8002094 <_ZN4LEDSD1Ev+0x44>
	_M_deallocate(_M_impl._M_start,
 8002084:	68a0      	ldr	r0, [r4, #8]
	if (__p)
 8002086:	b118      	cbz	r0, 8002090 <_ZN4LEDSD1Ev+0x40>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002088:	6921      	ldr	r1, [r4, #16]
 800208a:	1a09      	subs	r1, r1, r0
 800208c:	f019 fd9e 	bl	801bbcc <_ZdlPvj>
 8002090:	4620      	mov	r0, r4
 8002092:	bd70      	pop	{r4, r5, r6, pc}
      }
 8002094:	f105 0010 	add.w	r0, r5, #16
 8002098:	3520      	adds	r5, #32
 800209a:	f7fe fdb5 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800209e:	e7ef      	b.n	8002080 <_ZN4LEDSD1Ev+0x30>

080020a0 <_ZN13CommunicationD1Ev>:

	std::vector<uint8_t> data; // TODO, set as the register type with template
};

// Communication Class to communication with other modules
class Communication {
 80020a0:	b570      	push	{r4, r5, r6, lr}
 80020a2:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80020a4:	e9d0 560c 	ldrd	r5, r6, [r0, #48]	@ 0x30
 80020a8:	42ae      	cmp	r6, r5
 80020aa:	d112      	bne.n	80020d2 <_ZN13CommunicationD1Ev+0x32>
	_M_deallocate(_M_impl._M_start,
 80020ac:	6b20      	ldr	r0, [r4, #48]	@ 0x30
	if (__p)
 80020ae:	b118      	cbz	r0, 80020b8 <_ZN13CommunicationD1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020b0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80020b2:	1a09      	subs	r1, r1, r0
 80020b4:	f019 fd8a 	bl	801bbcc <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80020b8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
	if (__p)
 80020ba:	b120      	cbz	r0, 80020c6 <_ZN13CommunicationD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020bc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80020be:	1a09      	subs	r1, r1, r0
 80020c0:	1089      	asrs	r1, r1, #2
 80020c2:	f7fe fc8d 	bl	80009e0 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      }
 80020c6:	f104 0018 	add.w	r0, r4, #24
 80020ca:	f7fe fd9d 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80020ce:	4620      	mov	r0, r4
 80020d0:	bd70      	pop	{r4, r5, r6, pc}
 80020d2:	1d28      	adds	r0, r5, #4
 80020d4:	3514      	adds	r5, #20
 80020d6:	f7fe fd97 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80020da:	e7e5      	b.n	80020a8 <_ZN13CommunicationD1Ev+0x8>

080020dc <_ZN17MasterSubscribersD1Ev>:
	std::vector<SubscriberInterface> interfaces;    // interfaces associated to remote_registers (index by index)
	std::vector<uint8_t> filters;					// list of module address filters
};

// MasterSubscribers class used to receive published data from other modules
class MasterSubscribers {
 80020dc:	b570      	push	{r4, r5, r6, lr}
 80020de:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 80020e0:	6980      	ldr	r0, [r0, #24]
	if (__p)
 80020e2:	b120      	cbz	r0, 80020ee <_ZN17MasterSubscribersD1Ev+0x12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020e4:	6a21      	ldr	r1, [r4, #32]
 80020e6:	1a09      	subs	r1, r1, r0
 80020e8:	1089      	asrs	r1, r1, #2
 80020ea:	f7fe fc79 	bl	80009e0 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80020ee:	e9d4 5603 	ldrd	r5, r6, [r4, #12]
 80020f2:	42ae      	cmp	r6, r5
 80020f4:	d107      	bne.n	8002106 <_ZN17MasterSubscribersD1Ev+0x2a>
	_M_deallocate(_M_impl._M_start,
 80020f6:	68e0      	ldr	r0, [r4, #12]
	if (__p)
 80020f8:	b118      	cbz	r0, 8002102 <_ZN17MasterSubscribersD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020fa:	6961      	ldr	r1, [r4, #20]
 80020fc:	1a09      	subs	r1, r1, r0
 80020fe:	f019 fd65 	bl	801bbcc <_ZdlPvj>
 8002102:	4620      	mov	r0, r4
 8002104:	bd70      	pop	{r4, r5, r6, pc}
      }
 8002106:	f105 001c 	add.w	r0, r5, #28
 800210a:	f7fe fd7d 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	_M_deallocate(_M_impl._M_start,
 800210e:	6928      	ldr	r0, [r5, #16]
	if (__p)
 8002110:	b118      	cbz	r0, 800211a <_ZN17MasterSubscribersD1Ev+0x3e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002112:	69a9      	ldr	r1, [r5, #24]
 8002114:	1a09      	subs	r1, r1, r0
 8002116:	f019 fd59 	bl	801bbcc <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800211a:	6868      	ldr	r0, [r5, #4]
	if (__p)
 800211c:	b118      	cbz	r0, 8002126 <_ZN17MasterSubscribersD1Ev+0x4a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800211e:	68e9      	ldr	r1, [r5, #12]
 8002120:	1a09      	subs	r1, r1, r0
 8002122:	f019 fd53 	bl	801bbcc <_ZdlPvj>
 8002126:	3528      	adds	r5, #40	@ 0x28
 8002128:	e7e3      	b.n	80020f2 <_ZN17MasterSubscribersD1Ev+0x16>

0800212a <_ZN9RegistersD1Ev>:
class Registers {
 800212a:	b510      	push	{r4, lr}
 800212c:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 800212e:	f8d0 00a4 	ldr.w	r0, [r0, #164]	@ 0xa4
	if (__p)
 8002132:	b128      	cbz	r0, 8002140 <_ZN9RegistersD1Ev+0x16>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002134:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8002138:	1a09      	subs	r1, r1, r0
 800213a:	1109      	asrs	r1, r1, #4
 800213c:	f7fe fc53 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8002140:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
	if (__p)
 8002144:	b128      	cbz	r0, 8002152 <_ZN9RegistersD1Ev+0x28>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002146:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800214a:	1a09      	subs	r1, r1, r0
 800214c:	1109      	asrs	r1, r1, #4
 800214e:	f7fe fc4a 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8002152:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
	if (__p)
 8002156:	b128      	cbz	r0, 8002164 <_ZN9RegistersD1Ev+0x3a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002158:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800215c:	1a09      	subs	r1, r1, r0
 800215e:	1109      	asrs	r1, r1, #4
 8002160:	f7fe fc41 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8002164:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
	if (__p)
 8002168:	b128      	cbz	r0, 8002176 <_ZN9RegistersD1Ev+0x4c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800216a:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 800216e:	1a09      	subs	r1, r1, r0
 8002170:	1109      	asrs	r1, r1, #4
 8002172:	f7fe fc38 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8002176:	6f60      	ldr	r0, [r4, #116]	@ 0x74
	if (__p)
 8002178:	b120      	cbz	r0, 8002184 <_ZN9RegistersD1Ev+0x5a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800217a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800217c:	1a09      	subs	r1, r1, r0
 800217e:	1109      	asrs	r1, r1, #4
 8002180:	f7fe fc31 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8002184:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
	if (__p)
 8002186:	b120      	cbz	r0, 8002192 <_ZN9RegistersD1Ev+0x68>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002188:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800218a:	1a09      	subs	r1, r1, r0
 800218c:	1109      	asrs	r1, r1, #4
 800218e:	f7fe fc2a 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8002192:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
	if (__p)
 8002194:	b120      	cbz	r0, 80021a0 <_ZN9RegistersD1Ev+0x76>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002196:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8002198:	1a09      	subs	r1, r1, r0
 800219a:	1109      	asrs	r1, r1, #4
 800219c:	f7fe fc23 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 80021a0:	6d20      	ldr	r0, [r4, #80]	@ 0x50
	if (__p)
 80021a2:	b120      	cbz	r0, 80021ae <_ZN9RegistersD1Ev+0x84>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80021a4:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80021a6:	1a09      	subs	r1, r1, r0
 80021a8:	1109      	asrs	r1, r1, #4
 80021aa:	f7fe fc1c 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 80021ae:	6c60      	ldr	r0, [r4, #68]	@ 0x44
	if (__p)
 80021b0:	b120      	cbz	r0, 80021bc <_ZN9RegistersD1Ev+0x92>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80021b2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80021b4:	1a09      	subs	r1, r1, r0
 80021b6:	1109      	asrs	r1, r1, #4
 80021b8:	f7fe fc15 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 80021bc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
	if (__p)
 80021be:	b120      	cbz	r0, 80021ca <_ZN9RegistersD1Ev+0xa0>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80021c0:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80021c2:	1a09      	subs	r1, r1, r0
 80021c4:	1109      	asrs	r1, r1, #4
 80021c6:	f7fe fc0e 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 80021ca:	6860      	ldr	r0, [r4, #4]
	if (__p)
 80021cc:	b120      	cbz	r0, 80021d8 <_ZN9RegistersD1Ev+0xae>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80021ce:	68e1      	ldr	r1, [r4, #12]
 80021d0:	1a09      	subs	r1, r1, r0
 80021d2:	1109      	asrs	r1, r1, #4
 80021d4:	f7fe fc07 	bl	80009e6 <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
 80021d8:	4620      	mov	r0, r4
 80021da:	bd10      	pop	{r4, pc}

080021dc <_ZNSt6vectorI9PublisherSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80021dc:	b570      	push	{r4, r5, r6, lr}
 80021de:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80021e0:	e9d0 5600 	ldrd	r5, r6, [r0]
 80021e4:	42ae      	cmp	r6, r5
 80021e6:	d107      	bne.n	80021f8 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x1c>
	_M_deallocate(_M_impl._M_start,
 80021e8:	6820      	ldr	r0, [r4, #0]
	if (__p)
 80021ea:	b118      	cbz	r0, 80021f4 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80021ec:	68a1      	ldr	r1, [r4, #8]
 80021ee:	1a09      	subs	r1, r1, r0
 80021f0:	f019 fcec 	bl	801bbcc <_ZdlPvj>
      }
 80021f4:	4620      	mov	r0, r4
 80021f6:	bd70      	pop	{r4, r5, r6, pc}
	_M_deallocate(_M_impl._M_start,
 80021f8:	6968      	ldr	r0, [r5, #20]
	if (__p)
 80021fa:	b120      	cbz	r0, 8002206 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x2a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80021fc:	69e9      	ldr	r1, [r5, #28]
 80021fe:	1a09      	subs	r1, r1, r0
 8002200:	1089      	asrs	r1, r1, #2
 8002202:	f7fe fbed 	bl	80009e0 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8002206:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8002208:	b118      	cbz	r0, 8002212 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x36>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800220a:	6929      	ldr	r1, [r5, #16]
 800220c:	1a09      	subs	r1, r1, r0
 800220e:	f019 fcdd 	bl	801bbcc <_ZdlPvj>
 8002212:	3520      	adds	r5, #32
 8002214:	e7e6      	b.n	80021e4 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x8>

08002216 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002216:	b570      	push	{r4, r5, r6, lr}
 8002218:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800221a:	e9d0 5600 	ldrd	r5, r6, [r0]
 800221e:	42ae      	cmp	r6, r5
 8002220:	d107      	bne.n	8002232 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x1c>
	_M_deallocate(_M_impl._M_start,
 8002222:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8002224:	b118      	cbz	r0, 800222e <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002226:	68a1      	ldr	r1, [r4, #8]
 8002228:	1a09      	subs	r1, r1, r0
 800222a:	f019 fccf 	bl	801bbcc <_ZdlPvj>
      }
 800222e:	4620      	mov	r0, r4
 8002230:	bd70      	pop	{r4, r5, r6, pc}
 8002232:	4628      	mov	r0, r5
 8002234:	350c      	adds	r5, #12
 8002236:	f7fe fce7 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800223a:	e7f0      	b.n	800221e <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x8>

0800223c <_ZN21CommunicationProtocolD1Ev>:
	uint8_t target_address;
	uint8_t source_address;
};

// CommunicationProtocol class used as a basis to derive custom Protocols
class CommunicationProtocol {
 800223c:	4b0b      	ldr	r3, [pc, #44]	@ (800226c <_ZN21CommunicationProtocolD1Ev+0x30>)
 800223e:	b510      	push	{r4, lr}
 8002240:	4604      	mov	r4, r0
 8002242:	6003      	str	r3, [r0, #0]
	_M_deallocate(_M_impl._M_start,
 8002244:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
	if (__p)
 8002246:	b118      	cbz	r0, 8002250 <_ZN21CommunicationProtocolD1Ev+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002248:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800224a:	1a09      	subs	r1, r1, r0
 800224c:	f019 fcbe 	bl	801bbcc <_ZdlPvj>
 8002250:	f104 0020 	add.w	r0, r4, #32
 8002254:	f7ff ffdf 	bl	8002216 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
      }
 8002258:	f104 0010 	add.w	r0, r4, #16
 800225c:	f7fe fcd4 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8002260:	1d20      	adds	r0, r4, #4
 8002262:	f7ff ffd8 	bl	8002216 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
 8002266:	4620      	mov	r0, r4
 8002268:	bd10      	pop	{r4, pc}
 800226a:	bf00      	nop
 800226c:	0801c860 	.word	0x0801c860

08002270 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002270:	b510      	push	{r4, lr}
 8002272:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8002274:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8002276:	b120      	cbz	r0, 8002282 <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002278:	68a1      	ldr	r1, [r4, #8]
 800227a:	1a09      	subs	r1, r1, r0
 800227c:	1089      	asrs	r1, r1, #2
 800227e:	f7fe fbaf 	bl	80009e0 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      }
 8002282:	4620      	mov	r0, r4
 8002284:	bd10      	pop	{r4, pc}

08002286 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002286:	b510      	push	{r4, lr}
 8002288:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 800228a:	6800      	ldr	r0, [r0, #0]
	if (__p)
 800228c:	b118      	cbz	r0, 8002296 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800228e:	68a1      	ldr	r1, [r4, #8]
 8002290:	1a09      	subs	r1, r1, r0
 8002292:	f019 fc9b 	bl	801bbcc <_ZdlPvj>
      }
 8002296:	4620      	mov	r0, r4
 8002298:	bd10      	pop	{r4, pc}

0800229a <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800229a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800229e:	4604      	mov	r4, r0
 80022a0:	460f      	mov	r7, r1
	  for (; __first != __last; ++__first)
 80022a2:	42bc      	cmp	r4, r7
 80022a4:	d101      	bne.n	80022aa <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x10>
	    std::_Destroy(std::__addressof(*__first));
	}
 80022a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80022aa:	e9d4 5803 	ldrd	r5, r8, [r4, #12]
	  for (; __first != __last; ++__first)
 80022ae:	45a8      	cmp	r8, r5
 80022b0:	d107      	bne.n	80022c2 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x28>
	_M_deallocate(_M_impl._M_start,
 80022b2:	68e0      	ldr	r0, [r4, #12]
	if (__p)
 80022b4:	b118      	cbz	r0, 80022be <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x24>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80022b6:	6961      	ldr	r1, [r4, #20]
 80022b8:	1a09      	subs	r1, r1, r0
 80022ba:	f019 fc87 	bl	801bbcc <_ZdlPvj>
 80022be:	3418      	adds	r4, #24
 80022c0:	e7ef      	b.n	80022a2 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x8>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80022c2:	e9d5 6905 	ldrd	r6, r9, [r5, #20]
 80022c6:	45b1      	cmp	r9, r6
 80022c8:	d107      	bne.n	80022da <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x40>
	_M_deallocate(_M_impl._M_start,
 80022ca:	6968      	ldr	r0, [r5, #20]
	if (__p)
 80022cc:	b118      	cbz	r0, 80022d6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x3c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80022ce:	69e9      	ldr	r1, [r5, #28]
 80022d0:	1a09      	subs	r1, r1, r0
 80022d2:	f019 fc7b 	bl	801bbcc <_ZdlPvj>
 80022d6:	3528      	adds	r5, #40	@ 0x28
 80022d8:	e7e9      	b.n	80022ae <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x14>
      }
 80022da:	f106 000c 	add.w	r0, r6, #12
 80022de:	3618      	adds	r6, #24
 80022e0:	f7ff ffd1 	bl	8002286 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 80022e4:	e7ef      	b.n	80022c6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x2c>

080022e6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80022e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e8:	4604      	mov	r4, r0
 80022ea:	460e      	mov	r6, r1
	  for (; __first != __last; ++__first)
 80022ec:	42b4      	cmp	r4, r6
 80022ee:	d100      	bne.n	80022f2 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0xc>
	}
 80022f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80022f2:	e9d4 571c 	ldrd	r5, r7, [r4, #112]	@ 0x70
	  for (; __first != __last; ++__first)
 80022f6:	42af      	cmp	r7, r5
 80022f8:	d118      	bne.n	800232c <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x46>
	_M_deallocate(_M_impl._M_start,
 80022fa:	6f20      	ldr	r0, [r4, #112]	@ 0x70
	if (__p)
 80022fc:	b118      	cbz	r0, 8002306 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80022fe:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8002300:	1a09      	subs	r1, r1, r0
 8002302:	f019 fc63 	bl	801bbcc <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8002306:	6e60      	ldr	r0, [r4, #100]	@ 0x64
	if (__p)
 8002308:	b120      	cbz	r0, 8002314 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x2e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800230a:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800230c:	1a09      	subs	r1, r1, r0
 800230e:	1089      	asrs	r1, r1, #2
 8002310:	f7fe fb66 	bl	80009e0 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8002314:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	@ 0x58
 8002318:	f7ff ffbf 	bl	800229a <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
 800231c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
	if (__p)
 800231e:	b118      	cbz	r0, 8002328 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x42>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002320:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8002322:	1a09      	subs	r1, r1, r0
 8002324:	f019 fc52 	bl	801bbcc <_ZdlPvj>
	  for (; __first != __last; ++__first)
 8002328:	347c      	adds	r4, #124	@ 0x7c
 800232a:	e7df      	b.n	80022ec <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x6>
      }
 800232c:	f105 0014 	add.w	r0, r5, #20
 8002330:	3520      	adds	r5, #32
 8002332:	f7ff ffa8 	bl	8002286 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 8002336:	e7de      	b.n	80022f6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x10>

08002338 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8002338:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800233c:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8002340:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8002342:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002346:	ebaa 0208 	sub.w	r2, sl, r8
 800234a:	4607      	mov	r7, r0
 800234c:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 800234e:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002352:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 8002356:	d102      	bne.n	800235e <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8002358:	481f      	ldr	r0, [pc, #124]	@ (80023d8 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>)
 800235a:	f019 fd11 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 800235e:	45c2      	cmp	sl, r8
 8002360:	bf14      	ite	ne
 8002362:	4622      	movne	r2, r4
 8002364:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8002366:	eba1 0508 	sub.w	r5, r1, r8
 800236a:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800236c:	d22f      	bcs.n	80023ce <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800236e:	b384      	cbz	r4, 80023d2 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002370:	429c      	cmp	r4, r3
 8002372:	bf28      	it	cs
 8002374:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8002376:	00a0      	lsls	r0, r4, #2
 8002378:	f019 fc4d 	bl	801bc16 <_Znwj>
 800237c:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800237e:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 8002382:	2d00      	cmp	r5, #0
 8002384:	5173      	str	r3, [r6, r5]
 8002386:	dd04      	ble.n	8002392 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002388:	462a      	mov	r2, r5
 800238a:	4641      	mov	r1, r8
 800238c:	4630      	mov	r0, r6
 800238e:	f019 ff79 	bl	801c284 <memmove>
      ptrdiff_t __count = __last - __first;
 8002392:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 8002396:	3504      	adds	r5, #4
      if (__count > 0)
 8002398:	f1ba 0f00 	cmp.w	sl, #0
 800239c:	4435      	add	r5, r6
 800239e:	dd04      	ble.n	80023aa <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80023a0:	4652      	mov	r2, sl
 80023a2:	4649      	mov	r1, r9
 80023a4:	4628      	mov	r0, r5
 80023a6:	f01a f865 	bl	801c474 <memcpy>
      return __result + __count;
 80023aa:	4455      	add	r5, sl
	if (__p)
 80023ac:	f1b8 0f00 	cmp.w	r8, #0
 80023b0:	d006      	beq.n	80023c0 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x88>
		    this->_M_impl._M_end_of_storage - __old_start);
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	4640      	mov	r0, r8
 80023b6:	eba1 0108 	sub.w	r1, r1, r8
 80023ba:	1089      	asrs	r1, r1, #2
 80023bc:	f7fe fb10 	bl	80009e0 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      this->_M_impl._M_finish = __new_finish;
 80023c0:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80023c4:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 80023c8:	60be      	str	r6, [r7, #8]
    }
 80023ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80023ce:	461c      	mov	r4, r3
 80023d0:	e7d1      	b.n	8002376 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80023d2:	4626      	mov	r6, r4
 80023d4:	e7d3      	b.n	800237e <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 80023d6:	bf00      	nop
 80023d8:	0801c592 	.word	0x0801c592

080023dc <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_>:
void TemplateCommunicationProtocol<H>::AddInterface(uint8_t ID, H* interface) {
 80023dc:	b513      	push	{r0, r1, r4, lr}
 80023de:	4604      	mov	r4, r0
 80023e0:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 80023e2:	f013 fa51 	bl	8015888 <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 80023e6:	4620      	mov	r0, r4
 80023e8:	f013 fbe8 	bl	8015bbc <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80023ec:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	@ 0x3c
 80023f0:	4299      	cmp	r1, r3
 80023f2:	d005      	beq.n	8002400 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_+0x24>
 80023f4:	9b01      	ldr	r3, [sp, #4]
 80023f6:	f841 3b04 	str.w	r3, [r1], #4
	    ++this->_M_impl._M_finish;
 80023fa:	63e1      	str	r1, [r4, #60]	@ 0x3c
}
 80023fc:	b002      	add	sp, #8
 80023fe:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 8002400:	aa01      	add	r2, sp, #4
 8002402:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8002406:	f7ff ff97 	bl	8002338 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 800240a:	e7f7      	b.n	80023fc <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_+0x20>

0800240c <_GLOBAL__sub_I_hadc1>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800240c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
Registers registers;
 8002410:	4c1f      	ldr	r4, [pc, #124]	@ (8002490 <_GLOBAL__sub_I_hadc1+0x84>)
}
 8002412:	b087      	sub	sp, #28
MasterSubscribers subscribers;
 8002414:	4d1f      	ldr	r5, [pc, #124]	@ (8002494 <_GLOBAL__sub_I_hadc1+0x88>)
Registers registers;
 8002416:	4620      	mov	r0, r4
Communication communication;
 8002418:	4e1f      	ldr	r6, [pc, #124]	@ (8002498 <_GLOBAL__sub_I_hadc1+0x8c>)
Registers registers;
 800241a:	f015 ff31 	bl	8018280 <_ZN9RegistersC1Ev>
UARTProtocol protocol_uart;
 800241e:	481f      	ldr	r0, [pc, #124]	@ (800249c <_GLOBAL__sub_I_hadc1+0x90>)
 8002420:	f014 f84c 	bl	80164bc <_ZN12UARTProtocolC1Ev>
CANProtocol protocol_canfd;
 8002424:	481e      	ldr	r0, [pc, #120]	@ (80024a0 <_GLOBAL__sub_I_hadc1+0x94>)
 8002426:	f013 fc2d 	bl	8015c84 <_ZN11CANProtocolC1Ev>
Services services;
 800242a:	4f1e      	ldr	r7, [pc, #120]	@ (80024a4 <_GLOBAL__sub_I_hadc1+0x98>)
MasterSubscribers subscribers;
 800242c:	4628      	mov	r0, r5
Publishers publishers;
 800242e:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 80024b8 <_GLOBAL__sub_I_hadc1+0xac>
MasterSubscribers subscribers;
 8002432:	f016 fff1 	bl	8019418 <_ZN17MasterSubscribersC1Ev>
Communication communication;
 8002436:	4630      	mov	r0, r6
 8002438:	f00c fe3a 	bl	800f0b0 <_ZN13CommunicationC1Ev>
HardwareDelay hardware_delay(&htim4);
 800243c:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 80024bc <_GLOBAL__sub_I_hadc1+0xb0>
Services services;
 8002440:	4638      	mov	r0, r7
Sensors sensors;
 8002442:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80024c0 <_GLOBAL__sub_I_hadc1+0xb4>
Services services;
 8002446:	f016 fe66 	bl	8019116 <_ZN8ServicesC1Ev>
Publishers publishers;
 800244a:	4640      	mov	r0, r8
 800244c:	f014 fc55 	bl	8016cfa <_ZN10PublishersC1Ev>
LEDS leds;
 8002450:	f8df b070 	ldr.w	fp, [pc, #112]	@ 80024c4 <_GLOBAL__sub_I_hadc1+0xb8>
HardwareDelay hardware_delay(&htim4);
 8002454:	4914      	ldr	r1, [pc, #80]	@ (80024a8 <_GLOBAL__sub_I_hadc1+0x9c>)
 8002456:	4648      	mov	r0, r9
 8002458:	f011 fae9 	bl	8013a2e <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef>
Sensors sensors;
 800245c:	4650      	mov	r0, sl
 800245e:	f016 f9c9 	bl	80187f4 <_ZN7SensorsC1Ev>
LEDS leds;
 8002462:	4658      	mov	r0, fp
 8002464:	f011 fc0e 	bl	8013c84 <_ZN4LEDSC1Ev>
MotionGenerator motion_generator;
 8002468:	4810      	ldr	r0, [pc, #64]	@ (80024ac <_GLOBAL__sub_I_hadc1+0xa0>)
 800246a:	f012 fbed 	bl	8014c48 <_ZN15MotionGeneratorC1Ev>
PlatformSensors platform_sensors;
 800246e:	4810      	ldr	r0, [pc, #64]	@ (80024b0 <_GLOBAL__sub_I_hadc1+0xa4>)
 8002470:	f00c fb36 	bl	800eae0 <_ZN15PlatformSensorsC1Ev>
User user(&registers, &subscribers, &communication, &services, &publishers, &hardware_delay, &sensors, &leds);
 8002474:	4633      	mov	r3, r6
 8002476:	462a      	mov	r2, r5
 8002478:	4621      	mov	r1, r4
 800247a:	9700      	str	r7, [sp, #0]
 800247c:	480d      	ldr	r0, [pc, #52]	@ (80024b4 <_GLOBAL__sub_I_hadc1+0xa8>)
 800247e:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002482:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8002486:	f018 f952 	bl	801a72e <_ZN4UserC1EP9RegistersP17MasterSubscribersP13CommunicationP8ServicesP10PublishersP13HardwareDelayP7SensorsP4LEDS>
}
 800248a:	b007      	add	sp, #28
 800248c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002490:	2400177c 	.word	0x2400177c
 8002494:	2400169c 	.word	0x2400169c
 8002498:	24001660 	.word	0x24001660
 800249c:	24001714 	.word	0x24001714
 80024a0:	240016c0 	.word	0x240016c0
 80024a4:	2400021c 	.word	0x2400021c
 80024a8:	240022bc 	.word	0x240022bc
 80024ac:	240000dc 	.word	0x240000dc
 80024b0:	240000b4 	.word	0x240000b4
 80024b4:	24000094 	.word	0x24000094
 80024b8:	24000204 	.word	0x24000204
 80024bc:	240001e8 	.word	0x240001e8
 80024c0:	2400017c 	.word	0x2400017c
 80024c4:	24000144 	.word	0x24000144

080024c8 <_GLOBAL__sub_D_hadc1>:
 80024c8:	b510      	push	{r4, lr}
      }
 80024ca:	4832      	ldr	r0, [pc, #200]	@ (8002594 <_GLOBAL__sub_D_hadc1+0xcc>)
 80024cc:	f7ff fed0 	bl	8002270 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80024d0:	4831      	ldr	r0, [pc, #196]	@ (8002598 <_GLOBAL__sub_D_hadc1+0xd0>)
 80024d2:	f7ff fecd 	bl	8002270 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	_M_deallocate(_M_impl._M_start,
 80024d6:	4c31      	ldr	r4, [pc, #196]	@ (800259c <_GLOBAL__sub_D_hadc1+0xd4>)
      }
 80024d8:	4831      	ldr	r0, [pc, #196]	@ (80025a0 <_GLOBAL__sub_D_hadc1+0xd8>)
 80024da:	f7ff fec9 	bl	8002270 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
LEDS leds;
 80024de:	4831      	ldr	r0, [pc, #196]	@ (80025a4 <_GLOBAL__sub_D_hadc1+0xdc>)
 80024e0:	f7ff fdb6 	bl	8002050 <_ZN4LEDSD1Ev>
	_M_deallocate(_M_impl._M_start,
 80024e4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
	if (__p)
 80024e6:	b118      	cbz	r0, 80024f0 <_GLOBAL__sub_D_hadc1+0x28>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80024e8:	6da1      	ldr	r1, [r4, #88]	@ 0x58
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80024ea:	1a09      	subs	r1, r1, r0
 80024ec:	f019 fb6e 	bl	801bbcc <_ZdlPvj>
      }
 80024f0:	482d      	ldr	r0, [pc, #180]	@ (80025a8 <_GLOBAL__sub_D_hadc1+0xe0>)
 80024f2:	f7ff febd 	bl	8002270 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	__destroy(__first, __last);
 80024f6:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 80024fa:	f7ff fef4 	bl	80022e6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
 80024fe:	6920      	ldr	r0, [r4, #16]
	if (__p)
 8002500:	b118      	cbz	r0, 800250a <_GLOBAL__sub_D_hadc1+0x42>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002502:	69a1      	ldr	r1, [r4, #24]
 8002504:	1a09      	subs	r1, r1, r0
 8002506:	f019 fb61 	bl	801bbcc <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800250a:	4b28      	ldr	r3, [pc, #160]	@ (80025ac <_GLOBAL__sub_D_hadc1+0xe4>)
 800250c:	6918      	ldr	r0, [r3, #16]
	if (__p)
 800250e:	b118      	cbz	r0, 8002518 <_GLOBAL__sub_D_hadc1+0x50>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002510:	6999      	ldr	r1, [r3, #24]
 8002512:	1a09      	subs	r1, r1, r0
 8002514:	f019 fb5a 	bl	801bbcc <_ZdlPvj>
	std::vector<PublishInterface> interfaces; 	// links interfaces to the publisher
	std::vector<Topic> topics;					// topics of the publisher
};

// Publishers class used to broadcast registers on the bus
class Publishers {
 8002518:	4825      	ldr	r0, [pc, #148]	@ (80025b0 <_GLOBAL__sub_D_hadc1+0xe8>)
 800251a:	f7ff fe5f 	bl	80021dc <_ZNSt6vectorI9PublisherSaIS0_EED1Ev>
#include <stm32h7xx_hal.h>

#include "Protocols/Communication/Core/TemplateCommunicationProtocol.hpp"

// CANProtocol class used to interface with every CANFD interface
class CANProtocol : public TemplateCommunicationProtocol<FDCAN_HandleTypeDef> {
 800251e:	4c25      	ldr	r4, [pc, #148]	@ (80025b4 <_GLOBAL__sub_D_hadc1+0xec>)
Communication communication;
 8002520:	4825      	ldr	r0, [pc, #148]	@ (80025b8 <_GLOBAL__sub_D_hadc1+0xf0>)
 8002522:	f7ff fdbd 	bl	80020a0 <_ZN13CommunicationD1Ev>
MasterSubscribers subscribers;
 8002526:	4825      	ldr	r0, [pc, #148]	@ (80025bc <_GLOBAL__sub_D_hadc1+0xf4>)
 8002528:	f7ff fdd8 	bl	80020dc <_ZN17MasterSubscribersD1Ev>
 800252c:	4b24      	ldr	r3, [pc, #144]	@ (80025c0 <_GLOBAL__sub_D_hadc1+0xf8>)
	_M_deallocate(_M_impl._M_start,
 800252e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8002530:	6023      	str	r3, [r4, #0]
	if (__p)
 8002532:	b118      	cbz	r0, 800253c <_GLOBAL__sub_D_hadc1+0x74>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002534:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002536:	1a09      	subs	r1, r1, r0
 8002538:	f019 fb48 	bl	801bbcc <_ZdlPvj>
class TemplateCommunicationProtocol : public CommunicationProtocol {
 800253c:	4b21      	ldr	r3, [pc, #132]	@ (80025c4 <_GLOBAL__sub_D_hadc1+0xfc>)
	_M_deallocate(_M_impl._M_start,
 800253e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002540:	6023      	str	r3, [r4, #0]
	if (__p)
 8002542:	b120      	cbz	r0, 800254e <_GLOBAL__sub_D_hadc1+0x86>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002544:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002546:	1a09      	subs	r1, r1, r0
 8002548:	1089      	asrs	r1, r1, #2
 800254a:	f7fe fa49 	bl	80009e0 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
#include "Protocols/Communication/Core/TemplateCommunicationProtocol.hpp"

#include "Definitions/CommunicationDefinition.h"

// UARTProtocol class used to interface with every UART interface
class UARTProtocol : public TemplateCommunicationProtocol<UART_HandleTypeDef> {
 800254e:	4c1e      	ldr	r4, [pc, #120]	@ (80025c8 <_GLOBAL__sub_D_hadc1+0x100>)
 8002550:	4818      	ldr	r0, [pc, #96]	@ (80025b4 <_GLOBAL__sub_D_hadc1+0xec>)
 8002552:	f7ff fe73 	bl	800223c <_ZN21CommunicationProtocolD1Ev>
 8002556:	4b1d      	ldr	r3, [pc, #116]	@ (80025cc <_GLOBAL__sub_D_hadc1+0x104>)
 8002558:	4620      	mov	r0, r4
 800255a:	f840 3b5c 	str.w	r3, [r0], #92
      }
 800255e:	f7fe fb53 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8002562:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002566:	f7fe fb4f 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800256a:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 800256e:	f7fe fb4b 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8002572:	4b17      	ldr	r3, [pc, #92]	@ (80025d0 <_GLOBAL__sub_D_hadc1+0x108>)
	_M_deallocate(_M_impl._M_start,
 8002574:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002576:	6023      	str	r3, [r4, #0]
	if (__p)
 8002578:	b120      	cbz	r0, 8002584 <_GLOBAL__sub_D_hadc1+0xbc>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800257a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800257c:	1a09      	subs	r1, r1, r0
 800257e:	1089      	asrs	r1, r1, #2
 8002580:	f7fe fa2e 	bl	80009e0 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
 8002584:	4810      	ldr	r0, [pc, #64]	@ (80025c8 <_GLOBAL__sub_D_hadc1+0x100>)
 8002586:	f7ff fe59 	bl	800223c <_ZN21CommunicationProtocolD1Ev>
Registers registers;
 800258a:	4812      	ldr	r0, [pc, #72]	@ (80025d4 <_GLOBAL__sub_D_hadc1+0x10c>)
 800258c:	f7ff fdcd 	bl	800212a <_ZN9RegistersD1Ev>
}
 8002590:	bd10      	pop	{r4, pc}
 8002592:	bf00      	nop
 8002594:	2400012c 	.word	0x2400012c
 8002598:	2400010c 	.word	0x2400010c
 800259c:	2400017c 	.word	0x2400017c
 80025a0:	24000100 	.word	0x24000100
 80025a4:	24000144 	.word	0x24000144
 80025a8:	24000198 	.word	0x24000198
 80025ac:	240001e8 	.word	0x240001e8
 80025b0:	24000210 	.word	0x24000210
 80025b4:	240016c0 	.word	0x240016c0
 80025b8:	24001660 	.word	0x24001660
 80025bc:	2400169c 	.word	0x2400169c
 80025c0:	0801c894 	.word	0x0801c894
 80025c4:	0801c704 	.word	0x0801c704
 80025c8:	24001714 	.word	0x24001714
 80025cc:	0801c8d0 	.word	0x0801c8d0
 80025d0:	0801c6e8 	.word	0x0801c6e8
 80025d4:	2400177c 	.word	0x2400177c

080025d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d8:	b500      	push	{lr}
 80025da:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002608 <HAL_MspInit+0x30>)
 80025de:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80025e2:	f042 0202 	orr.w	r2, r2, #2
 80025e6:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 80025ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	9301      	str	r3, [sp, #4]
 80025f4:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	210f      	movs	r1, #15
 80025fa:	f06f 0001 	mvn.w	r0, #1
 80025fe:	f001 fe75 	bl	80042ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002602:	b003      	add	sp, #12
 8002604:	f85d fb04 	ldr.w	pc, [sp], #4
 8002608:	58024400 	.word	0x58024400

0800260c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800260c:	b500      	push	{lr}
 800260e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	2300      	movs	r3, #0
 8002612:	9303      	str	r3, [sp, #12]
 8002614:	9304      	str	r3, [sp, #16]
 8002616:	9305      	str	r3, [sp, #20]
 8002618:	9306      	str	r3, [sp, #24]
 800261a:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 800261c:	6803      	ldr	r3, [r0, #0]
 800261e:	4a1c      	ldr	r2, [pc, #112]	@ (8002690 <HAL_ADC_MspInit+0x84>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d005      	beq.n	8002630 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8002624:	4a1b      	ldr	r2, [pc, #108]	@ (8002694 <HAL_ADC_MspInit+0x88>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d024      	beq.n	8002674 <HAL_ADC_MspInit+0x68>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800262a:	b009      	add	sp, #36	@ 0x24
 800262c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002630:	4b19      	ldr	r3, [pc, #100]	@ (8002698 <HAL_ADC_MspInit+0x8c>)
 8002632:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8002636:	f042 0220 	orr.w	r2, r2, #32
 800263a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 800263e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8002642:	f002 0220 	and.w	r2, r2, #32
 8002646:	9200      	str	r2, [sp, #0]
 8002648:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	9301      	str	r3, [sp, #4]
 8002660:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002662:	2310      	movs	r3, #16
 8002664:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002666:	2303      	movs	r3, #3
 8002668:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266a:	a903      	add	r1, sp, #12
 800266c:	480b      	ldr	r0, [pc, #44]	@ (800269c <HAL_ADC_MspInit+0x90>)
 800266e:	f003 ffb1 	bl	80065d4 <HAL_GPIO_Init>
 8002672:	e7da      	b.n	800262a <HAL_ADC_MspInit+0x1e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002674:	4b08      	ldr	r3, [pc, #32]	@ (8002698 <HAL_ADC_MspInit+0x8c>)
 8002676:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800267a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800267e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002686:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800268a:	9302      	str	r3, [sp, #8]
 800268c:	9b02      	ldr	r3, [sp, #8]
}
 800268e:	e7cc      	b.n	800262a <HAL_ADC_MspInit+0x1e>
 8002690:	40022000 	.word	0x40022000
 8002694:	58026000 	.word	0x58026000
 8002698:	58024400 	.word	0x58024400
 800269c:	58020000 	.word	0x58020000

080026a0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80026a0:	b500      	push	{lr}
 80026a2:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	2300      	movs	r3, #0
 80026a6:	9305      	str	r3, [sp, #20]
 80026a8:	9306      	str	r3, [sp, #24]
 80026aa:	9307      	str	r3, [sp, #28]
 80026ac:	9308      	str	r3, [sp, #32]
 80026ae:	9309      	str	r3, [sp, #36]	@ 0x24
  if(hfdcan->Instance==FDCAN1)
 80026b0:	6803      	ldr	r3, [r0, #0]
 80026b2:	4a3b      	ldr	r2, [pc, #236]	@ (80027a0 <HAL_FDCAN_MspInit+0x100>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d005      	beq.n	80026c4 <HAL_FDCAN_MspInit+0x24>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
  else if(hfdcan->Instance==FDCAN2)
 80026b8:	4a3a      	ldr	r2, [pc, #232]	@ (80027a4 <HAL_FDCAN_MspInit+0x104>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d039      	beq.n	8002732 <HAL_FDCAN_MspInit+0x92>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80026be:	b00b      	add	sp, #44	@ 0x2c
 80026c0:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80026c4:	4a38      	ldr	r2, [pc, #224]	@ (80027a8 <HAL_FDCAN_MspInit+0x108>)
 80026c6:	6813      	ldr	r3, [r2, #0]
 80026c8:	3301      	adds	r3, #1
 80026ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d022      	beq.n	8002716 <HAL_FDCAN_MspInit+0x76>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d0:	4b36      	ldr	r3, [pc, #216]	@ (80027ac <HAL_FDCAN_MspInit+0x10c>)
 80026d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80026de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	9302      	str	r3, [sp, #8]
 80026e8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80026ea:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80026ee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f4:	2303      	movs	r3, #3
 80026f6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80026f8:	2309      	movs	r3, #9
 80026fa:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fc:	a905      	add	r1, sp, #20
 80026fe:	482c      	ldr	r0, [pc, #176]	@ (80027b0 <HAL_FDCAN_MspInit+0x110>)
 8002700:	f003 ff68 	bl	80065d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8002704:	2200      	movs	r2, #0
 8002706:	2105      	movs	r1, #5
 8002708:	2013      	movs	r0, #19
 800270a:	f001 fdef 	bl	80042ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800270e:	2013      	movs	r0, #19
 8002710:	f001 fdfc 	bl	800430c <HAL_NVIC_EnableIRQ>
 8002714:	e7d3      	b.n	80026be <HAL_FDCAN_MspInit+0x1e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002716:	4b25      	ldr	r3, [pc, #148]	@ (80027ac <HAL_FDCAN_MspInit+0x10c>)
 8002718:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800271c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002720:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 8002724:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	9b01      	ldr	r3, [sp, #4]
 8002730:	e7ce      	b.n	80026d0 <HAL_FDCAN_MspInit+0x30>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002732:	4a1d      	ldr	r2, [pc, #116]	@ (80027a8 <HAL_FDCAN_MspInit+0x108>)
 8002734:	6813      	ldr	r3, [r2, #0]
 8002736:	3301      	adds	r3, #1
 8002738:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800273a:	2b01      	cmp	r3, #1
 800273c:	d021      	beq.n	8002782 <HAL_FDCAN_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800273e:	4b1b      	ldr	r3, [pc, #108]	@ (80027ac <HAL_FDCAN_MspInit+0x10c>)
 8002740:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002744:	f042 0202 	orr.w	r2, r2, #2
 8002748:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800274c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	9304      	str	r3, [sp, #16]
 8002756:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002758:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800275c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002762:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002764:	2309      	movs	r3, #9
 8002766:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002768:	a905      	add	r1, sp, #20
 800276a:	4812      	ldr	r0, [pc, #72]	@ (80027b4 <HAL_FDCAN_MspInit+0x114>)
 800276c:	f003 ff32 	bl	80065d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 5, 0);
 8002770:	2200      	movs	r2, #0
 8002772:	2105      	movs	r1, #5
 8002774:	2014      	movs	r0, #20
 8002776:	f001 fdb9 	bl	80042ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 800277a:	2014      	movs	r0, #20
 800277c:	f001 fdc6 	bl	800430c <HAL_NVIC_EnableIRQ>
}
 8002780:	e79d      	b.n	80026be <HAL_FDCAN_MspInit+0x1e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002782:	4b0a      	ldr	r3, [pc, #40]	@ (80027ac <HAL_FDCAN_MspInit+0x10c>)
 8002784:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8002788:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800278c:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 8002790:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002798:	9303      	str	r3, [sp, #12]
 800279a:	9b03      	ldr	r3, [sp, #12]
 800279c:	e7cf      	b.n	800273e <HAL_FDCAN_MspInit+0x9e>
 800279e:	bf00      	nop
 80027a0:	4000a000 	.word	0x4000a000
 80027a4:	4000a400 	.word	0x4000a400
 80027a8:	24002760 	.word	0x24002760
 80027ac:	58024400 	.word	0x58024400
 80027b0:	58020000 	.word	0x58020000
 80027b4:	58020400 	.word	0x58020400

080027b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027b8:	b570      	push	{r4, r5, r6, lr}
 80027ba:	b0b8      	sub	sp, #224	@ 0xe0
 80027bc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027be:	2100      	movs	r1, #0
 80027c0:	9133      	str	r1, [sp, #204]	@ 0xcc
 80027c2:	9134      	str	r1, [sp, #208]	@ 0xd0
 80027c4:	9135      	str	r1, [sp, #212]	@ 0xd4
 80027c6:	9136      	str	r1, [sp, #216]	@ 0xd8
 80027c8:	9137      	str	r1, [sp, #220]	@ 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027ca:	22bc      	movs	r2, #188	@ 0xbc
 80027cc:	a804      	add	r0, sp, #16
 80027ce:	f019 fd73 	bl	801c2b8 <memset>
  if(hi2c->Instance==I2C1)
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	4a52      	ldr	r2, [pc, #328]	@ (8002920 <HAL_I2C_MspInit+0x168>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d004      	beq.n	80027e4 <HAL_I2C_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 80027da:	4a52      	ldr	r2, [pc, #328]	@ (8002924 <HAL_I2C_MspInit+0x16c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d06c      	beq.n	80028ba <HAL_I2C_MspInit+0x102>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80027e0:	b038      	add	sp, #224	@ 0xe0
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80027e4:	2308      	movs	r3, #8
 80027e6:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027e8:	a804      	add	r0, sp, #16
 80027ea:	f005 fafd 	bl	8007de8 <HAL_RCCEx_PeriphCLKConfig>
 80027ee:	2800      	cmp	r0, #0
 80027f0:	d15a      	bne.n	80028a8 <HAL_I2C_MspInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f2:	4e4d      	ldr	r6, [pc, #308]	@ (8002928 <HAL_I2C_MspInit+0x170>)
 80027f4:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80027f8:	f043 0302 	orr.w	r3, r3, #2
 80027fc:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 8002800:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800280c:	23c0      	movs	r3, #192	@ 0xc0
 800280e:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002810:	2312      	movs	r3, #18
 8002812:	9334      	str	r3, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2500      	movs	r5, #0
 8002816:	9535      	str	r5, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002818:	9536      	str	r5, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800281a:	2304      	movs	r3, #4
 800281c:	9337      	str	r3, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281e:	a933      	add	r1, sp, #204	@ 0xcc
 8002820:	4842      	ldr	r0, [pc, #264]	@ (800292c <HAL_I2C_MspInit+0x174>)
 8002822:	f003 fed7 	bl	80065d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002826:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
 800282a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800282e:	f8c6 30e8 	str.w	r3, [r6, #232]	@ 0xe8
 8002832:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
 8002836:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c1_tx.Instance = DMA2_Stream0;
 800283e:	483c      	ldr	r0, [pc, #240]	@ (8002930 <HAL_I2C_MspInit+0x178>)
 8002840:	4b3c      	ldr	r3, [pc, #240]	@ (8002934 <HAL_I2C_MspInit+0x17c>)
 8002842:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002844:	2322      	movs	r3, #34	@ 0x22
 8002846:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002848:	2340      	movs	r3, #64	@ 0x40
 800284a:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800284c:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800284e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002852:	6103      	str	r3, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002854:	6145      	str	r5, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002856:	6185      	str	r5, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002858:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800285a:	6205      	str	r5, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800285c:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800285e:	f001 ff6b 	bl	8004738 <HAL_DMA_Init>
 8002862:	bb20      	cbnz	r0, 80028ae <HAL_I2C_MspInit+0xf6>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002864:	4b32      	ldr	r3, [pc, #200]	@ (8002930 <HAL_I2C_MspInit+0x178>)
 8002866:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002868:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_i2c1_rx.Instance = DMA2_Stream1;
 800286a:	4833      	ldr	r0, [pc, #204]	@ (8002938 <HAL_I2C_MspInit+0x180>)
 800286c:	4b33      	ldr	r3, [pc, #204]	@ (800293c <HAL_I2C_MspInit+0x184>)
 800286e:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002870:	2321      	movs	r3, #33	@ 0x21
 8002872:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002874:	2300      	movs	r3, #0
 8002876:	6083      	str	r3, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002878:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800287a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800287e:	6102      	str	r2, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002880:	6143      	str	r3, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002882:	6183      	str	r3, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002884:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002886:	6203      	str	r3, [r0, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002888:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800288a:	f001 ff55 	bl	8004738 <HAL_DMA_Init>
 800288e:	b988      	cbnz	r0, 80028b4 <HAL_I2C_MspInit+0xfc>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002890:	4b29      	ldr	r3, [pc, #164]	@ (8002938 <HAL_I2C_MspInit+0x180>)
 8002892:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002894:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2105      	movs	r1, #5
 800289a:	201f      	movs	r0, #31
 800289c:	f001 fd26 	bl	80042ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80028a0:	201f      	movs	r0, #31
 80028a2:	f001 fd33 	bl	800430c <HAL_NVIC_EnableIRQ>
 80028a6:	e79b      	b.n	80027e0 <HAL_I2C_MspInit+0x28>
      Error_Handler();
 80028a8:	f7fe f9ac 	bl	8000c04 <Error_Handler>
 80028ac:	e7a1      	b.n	80027f2 <HAL_I2C_MspInit+0x3a>
      Error_Handler();
 80028ae:	f7fe f9a9 	bl	8000c04 <Error_Handler>
 80028b2:	e7d7      	b.n	8002864 <HAL_I2C_MspInit+0xac>
      Error_Handler();
 80028b4:	f7fe f9a6 	bl	8000c04 <Error_Handler>
 80028b8:	e7ea      	b.n	8002890 <HAL_I2C_MspInit+0xd8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80028ba:	2310      	movs	r3, #16
 80028bc:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028be:	eb0d 0003 	add.w	r0, sp, r3
 80028c2:	f005 fa91 	bl	8007de8 <HAL_RCCEx_PeriphCLKConfig>
 80028c6:	bb38      	cbnz	r0, 8002918 <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c8:	4c17      	ldr	r4, [pc, #92]	@ (8002928 <HAL_I2C_MspInit+0x170>)
 80028ca:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80028ce:	f043 0302 	orr.w	r3, r3, #2
 80028d2:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80028d6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	9302      	str	r3, [sp, #8]
 80028e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028e6:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e8:	2312      	movs	r3, #18
 80028ea:	9334      	str	r3, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f0:	9336      	str	r3, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 80028f2:	2306      	movs	r3, #6
 80028f4:	9337      	str	r3, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f6:	a933      	add	r1, sp, #204	@ 0xcc
 80028f8:	480c      	ldr	r0, [pc, #48]	@ (800292c <HAL_I2C_MspInit+0x174>)
 80028fa:	f003 fe6b 	bl	80065d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80028fe:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 8002902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002906:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
 800290a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
 800290e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002912:	9303      	str	r3, [sp, #12]
 8002914:	9b03      	ldr	r3, [sp, #12]
}
 8002916:	e763      	b.n	80027e0 <HAL_I2C_MspInit+0x28>
      Error_Handler();
 8002918:	f7fe f974 	bl	8000c04 <Error_Handler>
 800291c:	e7d4      	b.n	80028c8 <HAL_I2C_MspInit+0x110>
 800291e:	bf00      	nop
 8002920:	40005400 	.word	0x40005400
 8002924:	58001c00 	.word	0x58001c00
 8002928:	58024400 	.word	0x58024400
 800292c:	58020400 	.word	0x58020400
 8002930:	24002448 	.word	0x24002448
 8002934:	40020410 	.word	0x40020410
 8002938:	240023d0 	.word	0x240023d0
 800293c:	40020428 	.word	0x40020428

08002940 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002944:	b0b9      	sub	sp, #228	@ 0xe4
 8002946:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	2100      	movs	r1, #0
 800294a:	9133      	str	r1, [sp, #204]	@ 0xcc
 800294c:	9134      	str	r1, [sp, #208]	@ 0xd0
 800294e:	9135      	str	r1, [sp, #212]	@ 0xd4
 8002950:	9136      	str	r1, [sp, #216]	@ 0xd8
 8002952:	9137      	str	r1, [sp, #220]	@ 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002954:	22bc      	movs	r2, #188	@ 0xbc
 8002956:	a804      	add	r0, sp, #16
 8002958:	f019 fcae 	bl	801c2b8 <memset>
  if(hsd->Instance==SDMMC1)
 800295c:	6822      	ldr	r2, [r4, #0]
 800295e:	4b34      	ldr	r3, [pc, #208]	@ (8002a30 <HAL_SD_MspInit+0xf0>)
 8002960:	429a      	cmp	r2, r3
 8002962:	d002      	beq.n	800296a <HAL_SD_MspInit+0x2a>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002964:	b039      	add	sp, #228	@ 0xe4
 8002966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800296a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800296e:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002970:	a804      	add	r0, sp, #16
 8002972:	f005 fa39 	bl	8007de8 <HAL_RCCEx_PeriphCLKConfig>
 8002976:	2800      	cmp	r0, #0
 8002978:	d157      	bne.n	8002a2a <HAL_SD_MspInit+0xea>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800297a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a34 <HAL_SD_MspInit+0xf4>)
 800297c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002980:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002984:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002988:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800298c:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8002990:	9201      	str	r2, [sp, #4]
 8002992:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002994:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002998:	f042 0204 	orr.w	r2, r2, #4
 800299c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80029a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80029a4:	f002 0204 	and.w	r2, r2, #4
 80029a8:	9202      	str	r2, [sp, #8]
 80029aa:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80029b0:	f042 0208 	orr.w	r2, r2, #8
 80029b4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80029b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	9303      	str	r3, [sp, #12]
 80029c2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80029c4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80029c8:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ca:	2602      	movs	r6, #2
 80029cc:	9634      	str	r6, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ce:	f04f 0801 	mov.w	r8, #1
 80029d2:	f8cd 80d4 	str.w	r8, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d6:	2503      	movs	r5, #3
 80029d8:	9536      	str	r5, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80029da:	240c      	movs	r4, #12
 80029dc:	9437      	str	r4, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029de:	f8df 905c 	ldr.w	r9, [pc, #92]	@ 8002a3c <HAL_SD_MspInit+0xfc>
 80029e2:	a933      	add	r1, sp, #204	@ 0xcc
 80029e4:	4648      	mov	r0, r9
 80029e6:	f003 fdf5 	bl	80065d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80029ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029ee:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	9634      	str	r6, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2700      	movs	r7, #0
 80029f4:	9735      	str	r7, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f6:	9536      	str	r5, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80029f8:	9437      	str	r4, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029fa:	a933      	add	r1, sp, #204	@ 0xcc
 80029fc:	4648      	mov	r0, r9
 80029fe:	f003 fde9 	bl	80065d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a02:	2304      	movs	r3, #4
 8002a04:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	9634      	str	r6, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a08:	f8cd 80d4 	str.w	r8, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0c:	9536      	str	r5, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002a0e:	9437      	str	r4, [sp, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a10:	a933      	add	r1, sp, #204	@ 0xcc
 8002a12:	4809      	ldr	r0, [pc, #36]	@ (8002a38 <HAL_SD_MspInit+0xf8>)
 8002a14:	f003 fdde 	bl	80065d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8002a18:	463a      	mov	r2, r7
 8002a1a:	2105      	movs	r1, #5
 8002a1c:	2031      	movs	r0, #49	@ 0x31
 8002a1e:	f001 fc65 	bl	80042ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002a22:	2031      	movs	r0, #49	@ 0x31
 8002a24:	f001 fc72 	bl	800430c <HAL_NVIC_EnableIRQ>
}
 8002a28:	e79c      	b.n	8002964 <HAL_SD_MspInit+0x24>
      Error_Handler();
 8002a2a:	f7fe f8eb 	bl	8000c04 <Error_Handler>
 8002a2e:	e7a4      	b.n	800297a <HAL_SD_MspInit+0x3a>
 8002a30:	52007000 	.word	0x52007000
 8002a34:	58024400 	.word	0x58024400
 8002a38:	58020c00 	.word	0x58020c00
 8002a3c:	58020800 	.word	0x58020800

08002a40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a40:	b500      	push	{lr}
 8002a42:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 8002a44:	6803      	ldr	r3, [r0, #0]
 8002a46:	4a16      	ldr	r2, [pc, #88]	@ (8002aa0 <HAL_TIM_Base_MspInit+0x60>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d005      	beq.n	8002a58 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8002a4c:	4a15      	ldr	r2, [pc, #84]	@ (8002aa4 <HAL_TIM_Base_MspInit+0x64>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d010      	beq.n	8002a74 <HAL_TIM_Base_MspInit+0x34>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a52:	b003      	add	sp, #12
 8002a54:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a58:	4b13      	ldr	r3, [pc, #76]	@ (8002aa8 <HAL_TIM_Base_MspInit+0x68>)
 8002a5a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002a5e:	f042 0202 	orr.w	r2, r2, #2
 8002a62:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002a66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	9b00      	ldr	r3, [sp, #0]
 8002a72:	e7ee      	b.n	8002a52 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a74:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa8 <HAL_TIM_Base_MspInit+0x68>)
 8002a76:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002a7a:	f042 0204 	orr.w	r2, r2, #4
 8002a7e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002a82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2105      	movs	r1, #5
 8002a92:	201e      	movs	r0, #30
 8002a94:	f001 fc2a 	bl	80042ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a98:	201e      	movs	r0, #30
 8002a9a:	f001 fc37 	bl	800430c <HAL_NVIC_EnableIRQ>
}
 8002a9e:	e7d8      	b.n	8002a52 <HAL_TIM_Base_MspInit+0x12>
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	58024400 	.word	0x58024400

08002aac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002aac:	b510      	push	{r4, lr}
 8002aae:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	9303      	str	r3, [sp, #12]
 8002ab4:	9304      	str	r3, [sp, #16]
 8002ab6:	9305      	str	r3, [sp, #20]
 8002ab8:	9306      	str	r3, [sp, #24]
 8002aba:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 8002abc:	6802      	ldr	r2, [r0, #0]
 8002abe:	4b19      	ldr	r3, [pc, #100]	@ (8002b24 <HAL_TIM_MspPostInit+0x78>)
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002ac4:	b008      	add	sp, #32
 8002ac6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac8:	4b17      	ldr	r3, [pc, #92]	@ (8002b28 <HAL_TIM_MspPostInit+0x7c>)
 8002aca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002ad6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002ada:	f002 0201 	and.w	r2, r2, #1
 8002ade:	9201      	str	r2, [sp, #4]
 8002ae0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002ae6:	f042 0202 	orr.w	r2, r2, #2
 8002aea:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	9302      	str	r3, [sp, #8]
 8002af8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin;
 8002afa:	23c0      	movs	r3, #192	@ 0xc0
 8002afc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2402      	movs	r4, #2
 8002b00:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b02:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b04:	a903      	add	r1, sp, #12
 8002b06:	4809      	ldr	r0, [pc, #36]	@ (8002b2c <HAL_TIM_MspPostInit+0x80>)
 8002b08:	f003 fd64 	bl	80065d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_B_Pin;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b10:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b16:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b18:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8002b1a:	a903      	add	r1, sp, #12
 8002b1c:	4804      	ldr	r0, [pc, #16]	@ (8002b30 <HAL_TIM_MspPostInit+0x84>)
 8002b1e:	f003 fd59 	bl	80065d4 <HAL_GPIO_Init>
}
 8002b22:	e7cf      	b.n	8002ac4 <HAL_TIM_MspPostInit+0x18>
 8002b24:	40000400 	.word	0x40000400
 8002b28:	58024400 	.word	0x58024400
 8002b2c:	58020000 	.word	0x58020000
 8002b30:	58020400 	.word	0x58020400

08002b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b36:	b0c5      	sub	sp, #276	@ 0x114
 8002b38:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	913f      	str	r1, [sp, #252]	@ 0xfc
 8002b3e:	9140      	str	r1, [sp, #256]	@ 0x100
 8002b40:	9141      	str	r1, [sp, #260]	@ 0x104
 8002b42:	9142      	str	r1, [sp, #264]	@ 0x108
 8002b44:	9143      	str	r1, [sp, #268]	@ 0x10c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b46:	22bc      	movs	r2, #188	@ 0xbc
 8002b48:	a810      	add	r0, sp, #64	@ 0x40
 8002b4a:	f019 fbb5 	bl	801c2b8 <memset>
  if(huart->Instance==UART4)
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	4a7b      	ldr	r2, [pc, #492]	@ (8002d40 <HAL_UART_MspInit+0x20c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d019      	beq.n	8002b8a <HAL_UART_MspInit+0x56>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 8002b56:	4a7b      	ldr	r2, [pc, #492]	@ (8002d44 <HAL_UART_MspInit+0x210>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	f000 8082 	beq.w	8002c62 <HAL_UART_MspInit+0x12e>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==UART8)
 8002b5e:	4a7a      	ldr	r2, [pc, #488]	@ (8002d48 <HAL_UART_MspInit+0x214>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	f000 8111 	beq.w	8002d88 <HAL_UART_MspInit+0x254>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(huart->Instance==USART1)
 8002b66:	4a79      	ldr	r2, [pc, #484]	@ (8002d4c <HAL_UART_MspInit+0x218>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	f000 817a 	beq.w	8002e62 <HAL_UART_MspInit+0x32e>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8002b6e:	4a78      	ldr	r2, [pc, #480]	@ (8002d50 <HAL_UART_MspInit+0x21c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	f000 81e4 	beq.w	8002f3e <HAL_UART_MspInit+0x40a>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8002b76:	4a77      	ldr	r2, [pc, #476]	@ (8002d54 <HAL_UART_MspInit+0x220>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	f000 826b 	beq.w	8003054 <HAL_UART_MspInit+0x520>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8002b7e:	4a76      	ldr	r2, [pc, #472]	@ (8002d58 <HAL_UART_MspInit+0x224>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	f000 82ec 	beq.w	800315e <HAL_UART_MspInit+0x62a>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002b86:	b045      	add	sp, #276	@ 0x114
 8002b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b8e:	a810      	add	r0, sp, #64	@ 0x40
 8002b90:	f005 f92a 	bl	8007de8 <HAL_RCCEx_PeriphCLKConfig>
 8002b94:	2800      	cmp	r0, #0
 8002b96:	d15b      	bne.n	8002c50 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002b98:	4b70      	ldr	r3, [pc, #448]	@ (8002d5c <HAL_UART_MspInit+0x228>)
 8002b9a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002b9e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8002ba2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002ba6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002baa:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 8002bae:	9201      	str	r2, [sp, #4]
 8002bb0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bb2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002bb6:	f042 0208 	orr.w	r2, r2, #8
 8002bba:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	9302      	str	r3, [sp, #8]
 8002bc8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = RX4_GNSS_Pin|TX4_GNSS_Pin;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2500      	movs	r5, #0
 8002bd4:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd6:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002bd8:	2308      	movs	r3, #8
 8002bda:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bdc:	a93f      	add	r1, sp, #252	@ 0xfc
 8002bde:	4860      	ldr	r0, [pc, #384]	@ (8002d60 <HAL_UART_MspInit+0x22c>)
 8002be0:	f003 fcf8 	bl	80065d4 <HAL_GPIO_Init>
    hdma_uart4_tx.Instance = DMA2_Stream2;
 8002be4:	485f      	ldr	r0, [pc, #380]	@ (8002d64 <HAL_UART_MspInit+0x230>)
 8002be6:	4b60      	ldr	r3, [pc, #384]	@ (8002d68 <HAL_UART_MspInit+0x234>)
 8002be8:	6003      	str	r3, [r0, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002bea:	2340      	movs	r3, #64	@ 0x40
 8002bec:	6043      	str	r3, [r0, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bee:	6083      	str	r3, [r0, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bf0:	60c5      	str	r5, [r0, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bf6:	6103      	str	r3, [r0, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bf8:	6145      	str	r5, [r0, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bfa:	6185      	str	r5, [r0, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002bfc:	61c5      	str	r5, [r0, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bfe:	6205      	str	r5, [r0, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c00:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002c02:	f001 fd99 	bl	8004738 <HAL_DMA_Init>
 8002c06:	bb30      	cbnz	r0, 8002c56 <HAL_UART_MspInit+0x122>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002c08:	4b56      	ldr	r3, [pc, #344]	@ (8002d64 <HAL_UART_MspInit+0x230>)
 8002c0a:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002c0c:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_uart4_rx.Instance = DMA2_Stream3;
 8002c0e:	4857      	ldr	r0, [pc, #348]	@ (8002d6c <HAL_UART_MspInit+0x238>)
 8002c10:	4b57      	ldr	r3, [pc, #348]	@ (8002d70 <HAL_UART_MspInit+0x23c>)
 8002c12:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002c14:	233f      	movs	r3, #63	@ 0x3f
 8002c16:	6043      	str	r3, [r0, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	6083      	str	r3, [r0, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c1c:	60c3      	str	r3, [r0, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c22:	6102      	str	r2, [r0, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c24:	6143      	str	r3, [r0, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c26:	6183      	str	r3, [r0, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002c28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c2c:	61c2      	str	r2, [r0, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c2e:	6203      	str	r3, [r0, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c30:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002c32:	f001 fd81 	bl	8004738 <HAL_DMA_Init>
 8002c36:	b988      	cbnz	r0, 8002c5c <HAL_UART_MspInit+0x128>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002c38:	4b4c      	ldr	r3, [pc, #304]	@ (8002d6c <HAL_UART_MspInit+0x238>)
 8002c3a:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002c3c:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2105      	movs	r1, #5
 8002c42:	2034      	movs	r0, #52	@ 0x34
 8002c44:	f001 fb52 	bl	80042ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002c48:	2034      	movs	r0, #52	@ 0x34
 8002c4a:	f001 fb5f 	bl	800430c <HAL_NVIC_EnableIRQ>
 8002c4e:	e79a      	b.n	8002b86 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002c50:	f7fd ffd8 	bl	8000c04 <Error_Handler>
 8002c54:	e7a0      	b.n	8002b98 <HAL_UART_MspInit+0x64>
      Error_Handler();
 8002c56:	f7fd ffd5 	bl	8000c04 <Error_Handler>
 8002c5a:	e7d5      	b.n	8002c08 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002c5c:	f7fd ffd2 	bl	8000c04 <Error_Handler>
 8002c60:	e7ea      	b.n	8002c38 <HAL_UART_MspInit+0x104>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002c62:	2302      	movs	r3, #2
 8002c64:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c66:	a810      	add	r0, sp, #64	@ 0x40
 8002c68:	f005 f8be 	bl	8007de8 <HAL_RCCEx_PeriphCLKConfig>
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	d15d      	bne.n	8002d2c <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002c70:	4b3a      	ldr	r3, [pc, #232]	@ (8002d5c <HAL_UART_MspInit+0x228>)
 8002c72:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002c76:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c7a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002c7e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002c82:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002c86:	9203      	str	r2, [sp, #12]
 8002c88:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002c8e:	f042 0210 	orr.w	r2, r2, #16
 8002c92:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	9304      	str	r3, [sp, #16]
 8002ca0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = RX7_4G_Pin|TX7_4G_Pin|RTS7_4G_Pin|CTS7_4G_Pin;
 8002ca2:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8002ca6:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2500      	movs	r5, #0
 8002cae:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb0:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cb6:	a93f      	add	r1, sp, #252	@ 0xfc
 8002cb8:	482e      	ldr	r0, [pc, #184]	@ (8002d74 <HAL_UART_MspInit+0x240>)
 8002cba:	f003 fc8b 	bl	80065d4 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA2_Stream4;
 8002cbe:	482e      	ldr	r0, [pc, #184]	@ (8002d78 <HAL_UART_MspInit+0x244>)
 8002cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8002d7c <HAL_UART_MspInit+0x248>)
 8002cc2:	6003      	str	r3, [r0, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8002cc4:	2350      	movs	r3, #80	@ 0x50
 8002cc6:	6043      	str	r3, [r0, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cc8:	2340      	movs	r3, #64	@ 0x40
 8002cca:	6083      	str	r3, [r0, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ccc:	60c5      	str	r5, [r0, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cd2:	6103      	str	r3, [r0, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cd4:	6145      	str	r5, [r0, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cd6:	6185      	str	r5, [r0, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8002cd8:	61c5      	str	r5, [r0, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cda:	6205      	str	r5, [r0, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cdc:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8002cde:	f001 fd2b 	bl	8004738 <HAL_DMA_Init>
 8002ce2:	bb30      	cbnz	r0, 8002d32 <HAL_UART_MspInit+0x1fe>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 8002ce4:	4b24      	ldr	r3, [pc, #144]	@ (8002d78 <HAL_UART_MspInit+0x244>)
 8002ce6:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002ce8:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_uart7_rx.Instance = DMA2_Stream5;
 8002cea:	4825      	ldr	r0, [pc, #148]	@ (8002d80 <HAL_UART_MspInit+0x24c>)
 8002cec:	4b25      	ldr	r3, [pc, #148]	@ (8002d84 <HAL_UART_MspInit+0x250>)
 8002cee:	6003      	str	r3, [r0, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8002cf0:	234f      	movs	r3, #79	@ 0x4f
 8002cf2:	6043      	str	r3, [r0, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	6083      	str	r3, [r0, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cf8:	60c3      	str	r3, [r0, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cfe:	6102      	str	r2, [r0, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d00:	6143      	str	r3, [r0, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d02:	6183      	str	r3, [r0, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8002d04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d08:	61c2      	str	r2, [r0, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d0a:	6203      	str	r3, [r0, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d0c:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002d0e:	f001 fd13 	bl	8004738 <HAL_DMA_Init>
 8002d12:	b988      	cbnz	r0, 8002d38 <HAL_UART_MspInit+0x204>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8002d14:	4b1a      	ldr	r3, [pc, #104]	@ (8002d80 <HAL_UART_MspInit+0x24c>)
 8002d16:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002d18:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2105      	movs	r1, #5
 8002d1e:	2052      	movs	r0, #82	@ 0x52
 8002d20:	f001 fae4 	bl	80042ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002d24:	2052      	movs	r0, #82	@ 0x52
 8002d26:	f001 faf1 	bl	800430c <HAL_NVIC_EnableIRQ>
 8002d2a:	e72c      	b.n	8002b86 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002d2c:	f7fd ff6a 	bl	8000c04 <Error_Handler>
 8002d30:	e79e      	b.n	8002c70 <HAL_UART_MspInit+0x13c>
      Error_Handler();
 8002d32:	f7fd ff67 	bl	8000c04 <Error_Handler>
 8002d36:	e7d5      	b.n	8002ce4 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 8002d38:	f7fd ff64 	bl	8000c04 <Error_Handler>
 8002d3c:	e7ea      	b.n	8002d14 <HAL_UART_MspInit+0x1e0>
 8002d3e:	bf00      	nop
 8002d40:	40004c00 	.word	0x40004c00
 8002d44:	40007800 	.word	0x40007800
 8002d48:	40007c00 	.word	0x40007c00
 8002d4c:	40011000 	.word	0x40011000
 8002d50:	40004400 	.word	0x40004400
 8002d54:	40004800 	.word	0x40004800
 8002d58:	40011400 	.word	0x40011400
 8002d5c:	58024400 	.word	0x58024400
 8002d60:	58020c00 	.word	0x58020c00
 8002d64:	24001e54 	.word	0x24001e54
 8002d68:	40020440 	.word	0x40020440
 8002d6c:	24001ddc 	.word	0x24001ddc
 8002d70:	40020458 	.word	0x40020458
 8002d74:	58021000 	.word	0x58021000
 8002d78:	24001d64 	.word	0x24001d64
 8002d7c:	40020470 	.word	0x40020470
 8002d80:	24001cec 	.word	0x24001cec
 8002d84:	40020488 	.word	0x40020488
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d8c:	a810      	add	r0, sp, #64	@ 0x40
 8002d8e:	f005 f82b 	bl	8007de8 <HAL_RCCEx_PeriphCLKConfig>
 8002d92:	2800      	cmp	r0, #0
 8002d94:	d15c      	bne.n	8002e50 <HAL_UART_MspInit+0x31c>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002d96:	4ba0      	ldr	r3, [pc, #640]	@ (8003018 <HAL_UART_MspInit+0x4e4>)
 8002d98:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002d9c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002da0:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002da4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002da8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002dac:	9205      	str	r2, [sp, #20]
 8002dae:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002db0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002db4:	f042 0210 	orr.w	r2, r2, #16
 8002db8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	9306      	str	r3, [sp, #24]
 8002dc6:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RX8_EXT_Pin|TX8_EXT_Pin;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2500      	movs	r5, #0
 8002dd2:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd4:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002dd6:	2308      	movs	r3, #8
 8002dd8:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dda:	a93f      	add	r1, sp, #252	@ 0xfc
 8002ddc:	488f      	ldr	r0, [pc, #572]	@ (800301c <HAL_UART_MspInit+0x4e8>)
 8002dde:	f003 fbf9 	bl	80065d4 <HAL_GPIO_Init>
    hdma_uart8_tx.Instance = DMA2_Stream6;
 8002de2:	488f      	ldr	r0, [pc, #572]	@ (8003020 <HAL_UART_MspInit+0x4ec>)
 8002de4:	4b8f      	ldr	r3, [pc, #572]	@ (8003024 <HAL_UART_MspInit+0x4f0>)
 8002de6:	6003      	str	r3, [r0, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8002de8:	2352      	movs	r3, #82	@ 0x52
 8002dea:	6043      	str	r3, [r0, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dec:	2340      	movs	r3, #64	@ 0x40
 8002dee:	6083      	str	r3, [r0, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002df0:	60c5      	str	r5, [r0, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002df2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002df6:	6103      	str	r3, [r0, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002df8:	6145      	str	r5, [r0, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dfa:	6185      	str	r5, [r0, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8002dfc:	61c5      	str	r5, [r0, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dfe:	6205      	str	r5, [r0, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e00:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8002e02:	f001 fc99 	bl	8004738 <HAL_DMA_Init>
 8002e06:	bb30      	cbnz	r0, 8002e56 <HAL_UART_MspInit+0x322>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8002e08:	4b85      	ldr	r3, [pc, #532]	@ (8003020 <HAL_UART_MspInit+0x4ec>)
 8002e0a:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002e0c:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_uart8_rx.Instance = DMA2_Stream7;
 8002e0e:	4886      	ldr	r0, [pc, #536]	@ (8003028 <HAL_UART_MspInit+0x4f4>)
 8002e10:	4b86      	ldr	r3, [pc, #536]	@ (800302c <HAL_UART_MspInit+0x4f8>)
 8002e12:	6003      	str	r3, [r0, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8002e14:	2351      	movs	r3, #81	@ 0x51
 8002e16:	6043      	str	r3, [r0, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	6083      	str	r3, [r0, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e1c:	60c3      	str	r3, [r0, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e22:	6102      	str	r2, [r0, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e24:	6143      	str	r3, [r0, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e26:	6183      	str	r3, [r0, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8002e28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e2c:	61c2      	str	r2, [r0, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e2e:	6203      	str	r3, [r0, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e30:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8002e32:	f001 fc81 	bl	8004738 <HAL_DMA_Init>
 8002e36:	b988      	cbnz	r0, 8002e5c <HAL_UART_MspInit+0x328>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8002e38:	4b7b      	ldr	r3, [pc, #492]	@ (8003028 <HAL_UART_MspInit+0x4f4>)
 8002e3a:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002e3c:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2105      	movs	r1, #5
 8002e42:	2053      	movs	r0, #83	@ 0x53
 8002e44:	f001 fa52 	bl	80042ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002e48:	2053      	movs	r0, #83	@ 0x53
 8002e4a:	f001 fa5f 	bl	800430c <HAL_NVIC_EnableIRQ>
 8002e4e:	e69a      	b.n	8002b86 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002e50:	f7fd fed8 	bl	8000c04 <Error_Handler>
 8002e54:	e79f      	b.n	8002d96 <HAL_UART_MspInit+0x262>
      Error_Handler();
 8002e56:	f7fd fed5 	bl	8000c04 <Error_Handler>
 8002e5a:	e7d5      	b.n	8002e08 <HAL_UART_MspInit+0x2d4>
      Error_Handler();
 8002e5c:	f7fd fed2 	bl	8000c04 <Error_Handler>
 8002e60:	e7ea      	b.n	8002e38 <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e62:	2301      	movs	r3, #1
 8002e64:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e66:	a810      	add	r0, sp, #64	@ 0x40
 8002e68:	f004 ffbe 	bl	8007de8 <HAL_RCCEx_PeriphCLKConfig>
 8002e6c:	2800      	cmp	r0, #0
 8002e6e:	d15d      	bne.n	8002f2c <HAL_UART_MspInit+0x3f8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e70:	4b69      	ldr	r3, [pc, #420]	@ (8003018 <HAL_UART_MspInit+0x4e4>)
 8002e72:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002e76:	f042 0210 	orr.w	r2, r2, #16
 8002e7a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8002e7e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002e82:	f002 0210 	and.w	r2, r2, #16
 8002e86:	9207      	str	r2, [sp, #28]
 8002e88:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	9308      	str	r3, [sp, #32]
 8002ea0:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = TX1_FRONT_Pin|RX1_FRONT_Pin;
 8002ea2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002ea6:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2500      	movs	r5, #0
 8002eae:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb0:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002eb2:	2307      	movs	r3, #7
 8002eb4:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb6:	a93f      	add	r1, sp, #252	@ 0xfc
 8002eb8:	485d      	ldr	r0, [pc, #372]	@ (8003030 <HAL_UART_MspInit+0x4fc>)
 8002eba:	f003 fb8b 	bl	80065d4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8002ebe:	485d      	ldr	r0, [pc, #372]	@ (8003034 <HAL_UART_MspInit+0x500>)
 8002ec0:	4b5d      	ldr	r3, [pc, #372]	@ (8003038 <HAL_UART_MspInit+0x504>)
 8002ec2:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002ec4:	232a      	movs	r3, #42	@ 0x2a
 8002ec6:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ec8:	2340      	movs	r3, #64	@ 0x40
 8002eca:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ecc:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ece:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ed2:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ed4:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ed6:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ed8:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002eda:	6205      	str	r5, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002edc:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002ede:	f001 fc2b 	bl	8004738 <HAL_DMA_Init>
 8002ee2:	bb30      	cbnz	r0, 8002f32 <HAL_UART_MspInit+0x3fe>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002ee4:	4b53      	ldr	r3, [pc, #332]	@ (8003034 <HAL_UART_MspInit+0x500>)
 8002ee6:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002ee8:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart1_rx.Instance = DMA1_Stream1;
 8002eea:	4854      	ldr	r0, [pc, #336]	@ (800303c <HAL_UART_MspInit+0x508>)
 8002eec:	4b54      	ldr	r3, [pc, #336]	@ (8003040 <HAL_UART_MspInit+0x50c>)
 8002eee:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002ef0:	2329      	movs	r3, #41	@ 0x29
 8002ef2:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ef8:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002efa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002efe:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f00:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f02:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002f04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f08:	61c2      	str	r2, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f0a:	6203      	str	r3, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f0c:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f0e:	f001 fc13 	bl	8004738 <HAL_DMA_Init>
 8002f12:	b988      	cbnz	r0, 8002f38 <HAL_UART_MspInit+0x404>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002f14:	4b49      	ldr	r3, [pc, #292]	@ (800303c <HAL_UART_MspInit+0x508>)
 8002f16:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002f18:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2105      	movs	r1, #5
 8002f1e:	2025      	movs	r0, #37	@ 0x25
 8002f20:	f001 f9e4 	bl	80042ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f24:	2025      	movs	r0, #37	@ 0x25
 8002f26:	f001 f9f1 	bl	800430c <HAL_NVIC_EnableIRQ>
 8002f2a:	e62c      	b.n	8002b86 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002f2c:	f7fd fe6a 	bl	8000c04 <Error_Handler>
 8002f30:	e79e      	b.n	8002e70 <HAL_UART_MspInit+0x33c>
      Error_Handler();
 8002f32:	f7fd fe67 	bl	8000c04 <Error_Handler>
 8002f36:	e7d5      	b.n	8002ee4 <HAL_UART_MspInit+0x3b0>
      Error_Handler();
 8002f38:	f7fd fe64 	bl	8000c04 <Error_Handler>
 8002f3c:	e7ea      	b.n	8002f14 <HAL_UART_MspInit+0x3e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f42:	a810      	add	r0, sp, #64	@ 0x40
 8002f44:	f004 ff50 	bl	8007de8 <HAL_RCCEx_PeriphCLKConfig>
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	d15c      	bne.n	8003006 <HAL_UART_MspInit+0x4d2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f4c:	4b32      	ldr	r3, [pc, #200]	@ (8003018 <HAL_UART_MspInit+0x4e4>)
 8002f4e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002f52:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002f56:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002f5a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002f5e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8002f62:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8002f7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pin = TX2_RADIO_Pin|RX2_RADIO_Pin;
 8002f7e:	230c      	movs	r3, #12
 8002f80:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f82:	2302      	movs	r3, #2
 8002f84:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	2500      	movs	r5, #0
 8002f88:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8a:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f8c:	2307      	movs	r3, #7
 8002f8e:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f90:	a93f      	add	r1, sp, #252	@ 0xfc
 8002f92:	4827      	ldr	r0, [pc, #156]	@ (8003030 <HAL_UART_MspInit+0x4fc>)
 8002f94:	f003 fb1e 	bl	80065d4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream2;
 8002f98:	482a      	ldr	r0, [pc, #168]	@ (8003044 <HAL_UART_MspInit+0x510>)
 8002f9a:	4b2b      	ldr	r3, [pc, #172]	@ (8003048 <HAL_UART_MspInit+0x514>)
 8002f9c:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002f9e:	232c      	movs	r3, #44	@ 0x2c
 8002fa0:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fa2:	2340      	movs	r3, #64	@ 0x40
 8002fa4:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fa6:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fac:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fae:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fb0:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002fb2:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fb4:	6205      	str	r5, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fb6:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002fb8:	f001 fbbe 	bl	8004738 <HAL_DMA_Init>
 8002fbc:	bb30      	cbnz	r0, 800300c <HAL_UART_MspInit+0x4d8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002fbe:	4b21      	ldr	r3, [pc, #132]	@ (8003044 <HAL_UART_MspInit+0x510>)
 8002fc0:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002fc2:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream3;
 8002fc4:	4821      	ldr	r0, [pc, #132]	@ (800304c <HAL_UART_MspInit+0x518>)
 8002fc6:	4b22      	ldr	r3, [pc, #136]	@ (8003050 <HAL_UART_MspInit+0x51c>)
 8002fc8:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002fca:	232b      	movs	r3, #43	@ 0x2b
 8002fcc:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fd2:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fd8:	6102      	str	r2, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fda:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fdc:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002fde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fe2:	61c2      	str	r2, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fe4:	6203      	str	r3, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fe6:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002fe8:	f001 fba6 	bl	8004738 <HAL_DMA_Init>
 8002fec:	b988      	cbnz	r0, 8003012 <HAL_UART_MspInit+0x4de>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002fee:	4b17      	ldr	r3, [pc, #92]	@ (800304c <HAL_UART_MspInit+0x518>)
 8002ff0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002ff2:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2105      	movs	r1, #5
 8002ff8:	2026      	movs	r0, #38	@ 0x26
 8002ffa:	f001 f977 	bl	80042ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ffe:	2026      	movs	r0, #38	@ 0x26
 8003000:	f001 f984 	bl	800430c <HAL_NVIC_EnableIRQ>
 8003004:	e5bf      	b.n	8002b86 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8003006:	f7fd fdfd 	bl	8000c04 <Error_Handler>
 800300a:	e79f      	b.n	8002f4c <HAL_UART_MspInit+0x418>
      Error_Handler();
 800300c:	f7fd fdfa 	bl	8000c04 <Error_Handler>
 8003010:	e7d5      	b.n	8002fbe <HAL_UART_MspInit+0x48a>
      Error_Handler();
 8003012:	f7fd fdf7 	bl	8000c04 <Error_Handler>
 8003016:	e7ea      	b.n	8002fee <HAL_UART_MspInit+0x4ba>
 8003018:	58024400 	.word	0x58024400
 800301c:	58021000 	.word	0x58021000
 8003020:	24001c74 	.word	0x24001c74
 8003024:	400204a0 	.word	0x400204a0
 8003028:	24001bfc 	.word	0x24001bfc
 800302c:	400204b8 	.word	0x400204b8
 8003030:	58020000 	.word	0x58020000
 8003034:	24001b84 	.word	0x24001b84
 8003038:	40020010 	.word	0x40020010
 800303c:	24001b0c 	.word	0x24001b0c
 8003040:	40020028 	.word	0x40020028
 8003044:	24001a94 	.word	0x24001a94
 8003048:	40020040 	.word	0x40020040
 800304c:	24001a1c 	.word	0x24001a1c
 8003050:	40020058 	.word	0x40020058
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003054:	2302      	movs	r3, #2
 8003056:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003058:	a810      	add	r0, sp, #64	@ 0x40
 800305a:	f004 fec5 	bl	8007de8 <HAL_RCCEx_PeriphCLKConfig>
 800305e:	2800      	cmp	r0, #0
 8003060:	d174      	bne.n	800314c <HAL_UART_MspInit+0x618>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003062:	4b75      	ldr	r3, [pc, #468]	@ (8003238 <HAL_UART_MspInit+0x704>)
 8003064:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8003068:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800306c:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8003070:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8003074:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8003078:	920b      	str	r2, [sp, #44]	@ 0x2c
 800307a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800307c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8003080:	f042 0202 	orr.w	r2, r2, #2
 8003084:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8003088:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800308c:	f002 0202 	and.w	r2, r2, #2
 8003090:	920c      	str	r2, [sp, #48]	@ 0x30
 8003092:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003094:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8003098:	f042 0208 	orr.w	r2, r2, #8
 800309c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80030a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	930d      	str	r3, [sp, #52]	@ 0x34
 80030aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    GPIO_InitStruct.Pin = DE3_RS485_Pin;
 80030ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030b0:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b2:	2702      	movs	r7, #2
 80030b4:	9740      	str	r7, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	2500      	movs	r5, #0
 80030b8:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ba:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030bc:	2607      	movs	r6, #7
 80030be:	9643      	str	r6, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(DE3_RS485_GPIO_Port, &GPIO_InitStruct);
 80030c0:	a93f      	add	r1, sp, #252	@ 0xfc
 80030c2:	485e      	ldr	r0, [pc, #376]	@ (800323c <HAL_UART_MspInit+0x708>)
 80030c4:	f003 fa86 	bl	80065d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_RS485_Pin|RX3_RS485_Pin;
 80030c8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030cc:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	9740      	str	r7, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d2:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030d4:	9643      	str	r6, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030d6:	a93f      	add	r1, sp, #252	@ 0xfc
 80030d8:	4859      	ldr	r0, [pc, #356]	@ (8003240 <HAL_UART_MspInit+0x70c>)
 80030da:	f003 fa7b 	bl	80065d4 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream4;
 80030de:	4859      	ldr	r0, [pc, #356]	@ (8003244 <HAL_UART_MspInit+0x710>)
 80030e0:	4b59      	ldr	r3, [pc, #356]	@ (8003248 <HAL_UART_MspInit+0x714>)
 80030e2:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80030e4:	232e      	movs	r3, #46	@ 0x2e
 80030e6:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030e8:	2340      	movs	r3, #64	@ 0x40
 80030ea:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ec:	60c5      	str	r5, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030f2:	6103      	str	r3, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030f4:	6145      	str	r5, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030f6:	6185      	str	r5, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80030f8:	61c5      	str	r5, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030fa:	6205      	str	r5, [r0, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030fc:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80030fe:	f001 fb1b 	bl	8004738 <HAL_DMA_Init>
 8003102:	bb30      	cbnz	r0, 8003152 <HAL_UART_MspInit+0x61e>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003104:	4b4f      	ldr	r3, [pc, #316]	@ (8003244 <HAL_UART_MspInit+0x710>)
 8003106:	67a3      	str	r3, [r4, #120]	@ 0x78
 8003108:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart3_rx.Instance = DMA1_Stream5;
 800310a:	4850      	ldr	r0, [pc, #320]	@ (800324c <HAL_UART_MspInit+0x718>)
 800310c:	4b50      	ldr	r3, [pc, #320]	@ (8003250 <HAL_UART_MspInit+0x71c>)
 800310e:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003110:	232d      	movs	r3, #45	@ 0x2d
 8003112:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003114:	2300      	movs	r3, #0
 8003116:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003118:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800311a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800311e:	6102      	str	r2, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003120:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003122:	6183      	str	r3, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003124:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003128:	61c2      	str	r2, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800312a:	6203      	str	r3, [r0, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800312c:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800312e:	f001 fb03 	bl	8004738 <HAL_DMA_Init>
 8003132:	b988      	cbnz	r0, 8003158 <HAL_UART_MspInit+0x624>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003134:	4b45      	ldr	r3, [pc, #276]	@ (800324c <HAL_UART_MspInit+0x718>)
 8003136:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8003138:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800313a:	2200      	movs	r2, #0
 800313c:	2105      	movs	r1, #5
 800313e:	2027      	movs	r0, #39	@ 0x27
 8003140:	f001 f8d4 	bl	80042ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003144:	2027      	movs	r0, #39	@ 0x27
 8003146:	f001 f8e1 	bl	800430c <HAL_NVIC_EnableIRQ>
 800314a:	e51c      	b.n	8002b86 <HAL_UART_MspInit+0x52>
      Error_Handler();
 800314c:	f7fd fd5a 	bl	8000c04 <Error_Handler>
 8003150:	e787      	b.n	8003062 <HAL_UART_MspInit+0x52e>
      Error_Handler();
 8003152:	f7fd fd57 	bl	8000c04 <Error_Handler>
 8003156:	e7d5      	b.n	8003104 <HAL_UART_MspInit+0x5d0>
      Error_Handler();
 8003158:	f7fd fd54 	bl	8000c04 <Error_Handler>
 800315c:	e7ea      	b.n	8003134 <HAL_UART_MspInit+0x600>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800315e:	2301      	movs	r3, #1
 8003160:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003162:	a810      	add	r0, sp, #64	@ 0x40
 8003164:	f004 fe40 	bl	8007de8 <HAL_RCCEx_PeriphCLKConfig>
 8003168:	2800      	cmp	r0, #0
 800316a:	d15c      	bne.n	8003226 <HAL_UART_MspInit+0x6f2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800316c:	4b32      	ldr	r3, [pc, #200]	@ (8003238 <HAL_UART_MspInit+0x704>)
 800316e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003172:	f042 0220 	orr.w	r2, r2, #32
 8003176:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800317a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800317e:	f002 0220 	and.w	r2, r2, #32
 8003182:	920e      	str	r2, [sp, #56]	@ 0x38
 8003184:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003186:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800318a:	f042 0204 	orr.w	r2, r2, #4
 800318e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8003192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800319c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    GPIO_InitStruct.Pin = TX6_BACK_Pin|RX6_BACK_Pin;
 800319e:	23c0      	movs	r3, #192	@ 0xc0
 80031a0:	933f      	str	r3, [sp, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a2:	2302      	movs	r3, #2
 80031a4:	9340      	str	r3, [sp, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a6:	2500      	movs	r5, #0
 80031a8:	9541      	str	r5, [sp, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031aa:	9542      	str	r5, [sp, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80031ac:	2307      	movs	r3, #7
 80031ae:	9343      	str	r3, [sp, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031b0:	a93f      	add	r1, sp, #252	@ 0xfc
 80031b2:	4828      	ldr	r0, [pc, #160]	@ (8003254 <HAL_UART_MspInit+0x720>)
 80031b4:	f003 fa0e 	bl	80065d4 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA1_Stream6;
 80031b8:	4827      	ldr	r0, [pc, #156]	@ (8003258 <HAL_UART_MspInit+0x724>)
 80031ba:	4b28      	ldr	r3, [pc, #160]	@ (800325c <HAL_UART_MspInit+0x728>)
 80031bc:	6003      	str	r3, [r0, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 80031be:	2348      	movs	r3, #72	@ 0x48
 80031c0:	6043      	str	r3, [r0, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031c2:	2340      	movs	r3, #64	@ 0x40
 80031c4:	6083      	str	r3, [r0, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031c6:	60c5      	str	r5, [r0, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031cc:	6103      	str	r3, [r0, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031ce:	6145      	str	r5, [r0, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031d0:	6185      	str	r5, [r0, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80031d2:	61c5      	str	r5, [r0, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031d4:	6205      	str	r5, [r0, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031d6:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80031d8:	f001 faae 	bl	8004738 <HAL_DMA_Init>
 80031dc:	bb30      	cbnz	r0, 800322c <HAL_UART_MspInit+0x6f8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80031de:	4b1e      	ldr	r3, [pc, #120]	@ (8003258 <HAL_UART_MspInit+0x724>)
 80031e0:	67a3      	str	r3, [r4, #120]	@ 0x78
 80031e2:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart6_rx.Instance = DMA1_Stream7;
 80031e4:	481e      	ldr	r0, [pc, #120]	@ (8003260 <HAL_UART_MspInit+0x72c>)
 80031e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003264 <HAL_UART_MspInit+0x730>)
 80031e8:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 80031ea:	2347      	movs	r3, #71	@ 0x47
 80031ec:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031ee:	2300      	movs	r3, #0
 80031f0:	6083      	str	r3, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f2:	60c3      	str	r3, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031f8:	6102      	str	r2, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031fa:	6143      	str	r3, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031fc:	6183      	str	r3, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80031fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003202:	61c2      	str	r2, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003204:	6203      	str	r3, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003206:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003208:	f001 fa96 	bl	8004738 <HAL_DMA_Init>
 800320c:	b988      	cbnz	r0, 8003232 <HAL_UART_MspInit+0x6fe>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800320e:	4b14      	ldr	r3, [pc, #80]	@ (8003260 <HAL_UART_MspInit+0x72c>)
 8003210:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8003212:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003214:	2200      	movs	r2, #0
 8003216:	2105      	movs	r1, #5
 8003218:	2047      	movs	r0, #71	@ 0x47
 800321a:	f001 f867 	bl	80042ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800321e:	2047      	movs	r0, #71	@ 0x47
 8003220:	f001 f874 	bl	800430c <HAL_NVIC_EnableIRQ>
}
 8003224:	e4af      	b.n	8002b86 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8003226:	f7fd fced 	bl	8000c04 <Error_Handler>
 800322a:	e79f      	b.n	800316c <HAL_UART_MspInit+0x638>
      Error_Handler();
 800322c:	f7fd fcea 	bl	8000c04 <Error_Handler>
 8003230:	e7d5      	b.n	80031de <HAL_UART_MspInit+0x6aa>
      Error_Handler();
 8003232:	f7fd fce7 	bl	8000c04 <Error_Handler>
 8003236:	e7ea      	b.n	800320e <HAL_UART_MspInit+0x6da>
 8003238:	58024400 	.word	0x58024400
 800323c:	58020400 	.word	0x58020400
 8003240:	58020c00 	.word	0x58020c00
 8003244:	240019a4 	.word	0x240019a4
 8003248:	40020070 	.word	0x40020070
 800324c:	2400192c 	.word	0x2400192c
 8003250:	40020088 	.word	0x40020088
 8003254:	58020800 	.word	0x58020800
 8003258:	240018b4 	.word	0x240018b4
 800325c:	400200a0 	.word	0x400200a0
 8003260:	2400183c 	.word	0x2400183c
 8003264:	400200b8 	.word	0x400200b8

08003268 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM5 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003268:	280f      	cmp	r0, #15
 800326a:	d901      	bls.n	8003270 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 800326c:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim5);
  }

  /* Return function status */
  return HAL_ERROR;
}
 800326e:	4770      	bx	lr
{
 8003270:	b510      	push	{r4, lr}
 8003272:	b08a      	sub	sp, #40	@ 0x28
 8003274:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0U);
 8003276:	2200      	movs	r2, #0
 8003278:	4601      	mov	r1, r0
 800327a:	2032      	movs	r0, #50	@ 0x32
 800327c:	f001 f836 	bl	80042ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003280:	2032      	movs	r0, #50	@ 0x32
 8003282:	f001 f843 	bl	800430c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003286:	4b1a      	ldr	r3, [pc, #104]	@ (80032f0 <HAL_InitTick+0x88>)
 8003288:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM5_CLK_ENABLE();
 800328a:	4b1a      	ldr	r3, [pc, #104]	@ (80032f4 <HAL_InitTick+0x8c>)
 800328c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8003290:	f042 0208 	orr.w	r2, r2, #8
 8003294:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8003298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032a4:	a901      	add	r1, sp, #4
 80032a6:	a802      	add	r0, sp, #8
 80032a8:	f004 fc68 	bl	8007b7c <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80032ac:	9b07      	ldr	r3, [sp, #28]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80032ae:	b9bb      	cbnz	r3, 80032e0 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80032b0:	f004 fc40 	bl	8007b34 <HAL_RCC_GetPCLK1Freq>
 80032b4:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032b6:	4a10      	ldr	r2, [pc, #64]	@ (80032f8 <HAL_InitTick+0x90>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	0c9b      	lsrs	r3, r3, #18
 80032be:	3b01      	subs	r3, #1
  htim5.Instance = TIM5;
 80032c0:	480e      	ldr	r0, [pc, #56]	@ (80032fc <HAL_InitTick+0x94>)
 80032c2:	4a0f      	ldr	r2, [pc, #60]	@ (8003300 <HAL_InitTick+0x98>)
 80032c4:	6002      	str	r2, [r0, #0]
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80032c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80032ca:	60c2      	str	r2, [r0, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80032cc:	6043      	str	r3, [r0, #4]
  htim5.Init.ClockDivision = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	6103      	str	r3, [r0, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d2:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80032d4:	f007 fa1e 	bl	800a714 <HAL_TIM_Base_Init>
 80032d8:	b130      	cbz	r0, 80032e8 <HAL_InitTick+0x80>
  return HAL_ERROR;
 80032da:	2001      	movs	r0, #1
}
 80032dc:	b00a      	add	sp, #40	@ 0x28
 80032de:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80032e0:	f004 fc28 	bl	8007b34 <HAL_RCC_GetPCLK1Freq>
 80032e4:	0043      	lsls	r3, r0, #1
 80032e6:	e7e6      	b.n	80032b6 <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim5);
 80032e8:	4804      	ldr	r0, [pc, #16]	@ (80032fc <HAL_InitTick+0x94>)
 80032ea:	f007 f85d 	bl	800a3a8 <HAL_TIM_Base_Start_IT>
 80032ee:	e7f5      	b.n	80032dc <HAL_InitTick+0x74>
 80032f0:	2400000c 	.word	0x2400000c
 80032f4:	58024400 	.word	0x58024400
 80032f8:	431bde83 	.word	0x431bde83
 80032fc:	24002764 	.word	0x24002764
 8003300:	40000c00 	.word	0x40000c00

08003304 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003304:	e7fe      	b.n	8003304 <NMI_Handler>

08003306 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003306:	e7fe      	b.n	8003306 <HardFault_Handler>

08003308 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003308:	e7fe      	b.n	8003308 <MemManage_Handler>

0800330a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800330a:	e7fe      	b.n	800330a <BusFault_Handler>

0800330c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800330c:	e7fe      	b.n	800330c <UsageFault_Handler>

0800330e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800330e:	4770      	bx	lr

08003310 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003310:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003312:	4802      	ldr	r0, [pc, #8]	@ (800331c <DMA1_Stream0_IRQHandler+0xc>)
 8003314:	f002 f806 	bl	8005324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003318:	bd08      	pop	{r3, pc}
 800331a:	bf00      	nop
 800331c:	24001b84 	.word	0x24001b84

08003320 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003320:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003322:	4802      	ldr	r0, [pc, #8]	@ (800332c <DMA1_Stream1_IRQHandler+0xc>)
 8003324:	f001 fffe 	bl	8005324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003328:	bd08      	pop	{r3, pc}
 800332a:	bf00      	nop
 800332c:	24001b0c 	.word	0x24001b0c

08003330 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003330:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003332:	4802      	ldr	r0, [pc, #8]	@ (800333c <DMA1_Stream2_IRQHandler+0xc>)
 8003334:	f001 fff6 	bl	8005324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003338:	bd08      	pop	{r3, pc}
 800333a:	bf00      	nop
 800333c:	24001a94 	.word	0x24001a94

08003340 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003340:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003342:	4802      	ldr	r0, [pc, #8]	@ (800334c <DMA1_Stream3_IRQHandler+0xc>)
 8003344:	f001 ffee 	bl	8005324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003348:	bd08      	pop	{r3, pc}
 800334a:	bf00      	nop
 800334c:	24001a1c 	.word	0x24001a1c

08003350 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003350:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003352:	4802      	ldr	r0, [pc, #8]	@ (800335c <DMA1_Stream4_IRQHandler+0xc>)
 8003354:	f001 ffe6 	bl	8005324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003358:	bd08      	pop	{r3, pc}
 800335a:	bf00      	nop
 800335c:	240019a4 	.word	0x240019a4

08003360 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003360:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003362:	4802      	ldr	r0, [pc, #8]	@ (800336c <DMA1_Stream5_IRQHandler+0xc>)
 8003364:	f001 ffde 	bl	8005324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003368:	bd08      	pop	{r3, pc}
 800336a:	bf00      	nop
 800336c:	2400192c 	.word	0x2400192c

08003370 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003370:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003372:	4802      	ldr	r0, [pc, #8]	@ (800337c <DMA1_Stream6_IRQHandler+0xc>)
 8003374:	f001 ffd6 	bl	8005324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003378:	bd08      	pop	{r3, pc}
 800337a:	bf00      	nop
 800337c:	240018b4 	.word	0x240018b4

08003380 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8003380:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003382:	4802      	ldr	r0, [pc, #8]	@ (800338c <FDCAN1_IT0_IRQHandler+0xc>)
 8003384:	f002 ff98 	bl	80062b8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8003388:	bd08      	pop	{r3, pc}
 800338a:	bf00      	nop
 800338c:	240025f8 	.word	0x240025f8

08003390 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8003390:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8003392:	4802      	ldr	r0, [pc, #8]	@ (800339c <FDCAN2_IT0_IRQHandler+0xc>)
 8003394:	f002 ff90 	bl	80062b8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8003398:	bd08      	pop	{r3, pc}
 800339a:	bf00      	nop
 800339c:	24002558 	.word	0x24002558

080033a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80033a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80033a2:	4802      	ldr	r0, [pc, #8]	@ (80033ac <TIM4_IRQHandler+0xc>)
 80033a4:	f007 f866 	bl	800a474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80033a8:	bd08      	pop	{r3, pc}
 80033aa:	bf00      	nop
 80033ac:	240022bc 	.word	0x240022bc

080033b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80033b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80033b2:	4802      	ldr	r0, [pc, #8]	@ (80033bc <I2C1_EV_IRQHandler+0xc>)
 80033b4:	f003 fd92 	bl	8006edc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80033b8:	bd08      	pop	{r3, pc}
 80033ba:	bf00      	nop
 80033bc:	2400250c 	.word	0x2400250c

080033c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033c2:	4802      	ldr	r0, [pc, #8]	@ (80033cc <USART1_IRQHandler+0xc>)
 80033c4:	f007 fdc6 	bl	800af54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033c8:	bd08      	pop	{r3, pc}
 80033ca:	bf00      	nop
 80033cc:	2400207c 	.word	0x2400207c

080033d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80033d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80033d2:	4802      	ldr	r0, [pc, #8]	@ (80033dc <USART2_IRQHandler+0xc>)
 80033d4:	f007 fdbe 	bl	800af54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80033d8:	bd08      	pop	{r3, pc}
 80033da:	bf00      	nop
 80033dc:	24001fec 	.word	0x24001fec

080033e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80033e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80033e2:	4802      	ldr	r0, [pc, #8]	@ (80033ec <USART3_IRQHandler+0xc>)
 80033e4:	f007 fdb6 	bl	800af54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80033e8:	bd08      	pop	{r3, pc}
 80033ea:	bf00      	nop
 80033ec:	24001f5c 	.word	0x24001f5c

080033f0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80033f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80033f2:	4802      	ldr	r0, [pc, #8]	@ (80033fc <DMA1_Stream7_IRQHandler+0xc>)
 80033f4:	f001 ff96 	bl	8005324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80033f8:	bd08      	pop	{r3, pc}
 80033fa:	bf00      	nop
 80033fc:	2400183c 	.word	0x2400183c

08003400 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003400:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003402:	4802      	ldr	r0, [pc, #8]	@ (800340c <SDMMC1_IRQHandler+0xc>)
 8003404:	f006 fd3e 	bl	8009e84 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003408:	bd08      	pop	{r3, pc}
 800340a:	bf00      	nop
 800340c:	24002354 	.word	0x24002354

08003410 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003410:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003412:	4802      	ldr	r0, [pc, #8]	@ (800341c <TIM5_IRQHandler+0xc>)
 8003414:	f007 f82e 	bl	800a474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003418:	bd08      	pop	{r3, pc}
 800341a:	bf00      	nop
 800341c:	24002764 	.word	0x24002764

08003420 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003420:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003422:	4802      	ldr	r0, [pc, #8]	@ (800342c <UART4_IRQHandler+0xc>)
 8003424:	f007 fd96 	bl	800af54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003428:	bd08      	pop	{r3, pc}
 800342a:	bf00      	nop
 800342c:	2400222c 	.word	0x2400222c

08003430 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003430:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003432:	4802      	ldr	r0, [pc, #8]	@ (800343c <DMA2_Stream0_IRQHandler+0xc>)
 8003434:	f001 ff76 	bl	8005324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003438:	bd08      	pop	{r3, pc}
 800343a:	bf00      	nop
 800343c:	24002448 	.word	0x24002448

08003440 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003440:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003442:	4802      	ldr	r0, [pc, #8]	@ (800344c <DMA2_Stream1_IRQHandler+0xc>)
 8003444:	f001 ff6e 	bl	8005324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003448:	bd08      	pop	{r3, pc}
 800344a:	bf00      	nop
 800344c:	240023d0 	.word	0x240023d0

08003450 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003450:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003452:	4802      	ldr	r0, [pc, #8]	@ (800345c <DMA2_Stream2_IRQHandler+0xc>)
 8003454:	f001 ff66 	bl	8005324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003458:	bd08      	pop	{r3, pc}
 800345a:	bf00      	nop
 800345c:	24001e54 	.word	0x24001e54

08003460 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003460:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003462:	4802      	ldr	r0, [pc, #8]	@ (800346c <DMA2_Stream3_IRQHandler+0xc>)
 8003464:	f001 ff5e 	bl	8005324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003468:	bd08      	pop	{r3, pc}
 800346a:	bf00      	nop
 800346c:	24001ddc 	.word	0x24001ddc

08003470 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003470:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8003472:	4802      	ldr	r0, [pc, #8]	@ (800347c <DMA2_Stream4_IRQHandler+0xc>)
 8003474:	f001 ff56 	bl	8005324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003478:	bd08      	pop	{r3, pc}
 800347a:	bf00      	nop
 800347c:	24001d64 	.word	0x24001d64

08003480 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003480:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8003482:	4802      	ldr	r0, [pc, #8]	@ (800348c <DMA2_Stream5_IRQHandler+0xc>)
 8003484:	f001 ff4e 	bl	8005324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003488:	bd08      	pop	{r3, pc}
 800348a:	bf00      	nop
 800348c:	24001cec 	.word	0x24001cec

08003490 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003490:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8003492:	4802      	ldr	r0, [pc, #8]	@ (800349c <DMA2_Stream6_IRQHandler+0xc>)
 8003494:	f001 ff46 	bl	8005324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003498:	bd08      	pop	{r3, pc}
 800349a:	bf00      	nop
 800349c:	24001c74 	.word	0x24001c74

080034a0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80034a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80034a2:	4802      	ldr	r0, [pc, #8]	@ (80034ac <DMA2_Stream7_IRQHandler+0xc>)
 80034a4:	f001 ff3e 	bl	8005324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80034a8:	bd08      	pop	{r3, pc}
 80034aa:	bf00      	nop
 80034ac:	24001bfc 	.word	0x24001bfc

080034b0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80034b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80034b2:	4802      	ldr	r0, [pc, #8]	@ (80034bc <USART6_IRQHandler+0xc>)
 80034b4:	f007 fd4e 	bl	800af54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80034b8:	bd08      	pop	{r3, pc}
 80034ba:	bf00      	nop
 80034bc:	24001ecc 	.word	0x24001ecc

080034c0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80034c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80034c2:	4802      	ldr	r0, [pc, #8]	@ (80034cc <UART7_IRQHandler+0xc>)
 80034c4:	f007 fd46 	bl	800af54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80034c8:	bd08      	pop	{r3, pc}
 80034ca:	bf00      	nop
 80034cc:	2400219c 	.word	0x2400219c

080034d0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80034d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80034d2:	4802      	ldr	r0, [pc, #8]	@ (80034dc <UART8_IRQHandler+0xc>)
 80034d4:	f007 fd3e 	bl	800af54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80034d8:	bd08      	pop	{r3, pc}
 80034da:	bf00      	nop
 80034dc:	2400210c 	.word	0x2400210c

080034e0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80034e0:	2001      	movs	r0, #1
 80034e2:	4770      	bx	lr

080034e4 <_kill>:

int _kill(int pid, int sig)
{
 80034e4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80034e6:	f018 ff99 	bl	801c41c <__errno>
 80034ea:	2316      	movs	r3, #22
 80034ec:	6003      	str	r3, [r0, #0]
	return -1;
}
 80034ee:	f04f 30ff 	mov.w	r0, #4294967295
 80034f2:	bd08      	pop	{r3, pc}

080034f4 <_exit>:

void _exit (int status)
{
 80034f4:	b508      	push	{r3, lr}
	_kill(status, -1);
 80034f6:	f04f 31ff 	mov.w	r1, #4294967295
 80034fa:	f7ff fff3 	bl	80034e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80034fe:	e7fe      	b.n	80034fe <_exit+0xa>

08003500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003500:	b510      	push	{r4, lr}
 8003502:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003504:	4a0c      	ldr	r2, [pc, #48]	@ (8003538 <_sbrk+0x38>)
 8003506:	490d      	ldr	r1, [pc, #52]	@ (800353c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003508:	480d      	ldr	r0, [pc, #52]	@ (8003540 <_sbrk+0x40>)
 800350a:	6800      	ldr	r0, [r0, #0]
 800350c:	b140      	cbz	r0, 8003520 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800350e:	480c      	ldr	r0, [pc, #48]	@ (8003540 <_sbrk+0x40>)
 8003510:	6800      	ldr	r0, [r0, #0]
 8003512:	4403      	add	r3, r0
 8003514:	1a52      	subs	r2, r2, r1
 8003516:	4293      	cmp	r3, r2
 8003518:	d806      	bhi.n	8003528 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800351a:	4a09      	ldr	r2, [pc, #36]	@ (8003540 <_sbrk+0x40>)
 800351c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800351e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003520:	4807      	ldr	r0, [pc, #28]	@ (8003540 <_sbrk+0x40>)
 8003522:	4c08      	ldr	r4, [pc, #32]	@ (8003544 <_sbrk+0x44>)
 8003524:	6004      	str	r4, [r0, #0]
 8003526:	e7f2      	b.n	800350e <_sbrk+0xe>
    errno = ENOMEM;
 8003528:	f018 ff78 	bl	801c41c <__errno>
 800352c:	230c      	movs	r3, #12
 800352e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003530:	f04f 30ff 	mov.w	r0, #4294967295
 8003534:	e7f3      	b.n	800351e <_sbrk+0x1e>
 8003536:	bf00      	nop
 8003538:	24080000 	.word	0x24080000
 800353c:	00000400 	.word	0x00000400
 8003540:	240027b0 	.word	0x240027b0
 8003544:	240095d0 	.word	0x240095d0

08003548 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003548:	4a27      	ldr	r2, [pc, #156]	@ (80035e8 <SystemInit+0xa0>)
 800354a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800354e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003552:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003556:	4b25      	ldr	r3, [pc, #148]	@ (80035ec <SystemInit+0xa4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	2b06      	cmp	r3, #6
 8003560:	d806      	bhi.n	8003570 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003562:	4a22      	ldr	r2, [pc, #136]	@ (80035ec <SystemInit+0xa4>)
 8003564:	6813      	ldr	r3, [r2, #0]
 8003566:	f023 030f 	bic.w	r3, r3, #15
 800356a:	f043 0307 	orr.w	r3, r3, #7
 800356e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003570:	4b1f      	ldr	r3, [pc, #124]	@ (80035f0 <SystemInit+0xa8>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800357a:	2200      	movs	r2, #0
 800357c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800357e:	6819      	ldr	r1, [r3, #0]
 8003580:	4a1c      	ldr	r2, [pc, #112]	@ (80035f4 <SystemInit+0xac>)
 8003582:	400a      	ands	r2, r1
 8003584:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003586:	4b19      	ldr	r3, [pc, #100]	@ (80035ec <SystemInit+0xa4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f013 0f08 	tst.w	r3, #8
 800358e:	d006      	beq.n	800359e <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003590:	4a16      	ldr	r2, [pc, #88]	@ (80035ec <SystemInit+0xa4>)
 8003592:	6813      	ldr	r3, [r2, #0]
 8003594:	f023 030f 	bic.w	r3, r3, #15
 8003598:	f043 0307 	orr.w	r3, r3, #7
 800359c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800359e:	4b14      	ldr	r3, [pc, #80]	@ (80035f0 <SystemInit+0xa8>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80035a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80035a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80035a8:	4913      	ldr	r1, [pc, #76]	@ (80035f8 <SystemInit+0xb0>)
 80035aa:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80035ac:	4913      	ldr	r1, [pc, #76]	@ (80035fc <SystemInit+0xb4>)
 80035ae:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80035b0:	4913      	ldr	r1, [pc, #76]	@ (8003600 <SystemInit+0xb8>)
 80035b2:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80035b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80035b6:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80035b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80035ba:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80035bc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80035be:	6819      	ldr	r1, [r3, #0]
 80035c0:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80035c4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80035c6:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80035c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003604 <SystemInit+0xbc>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003608 <SystemInit+0xc0>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035d4:	d203      	bcs.n	80035de <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80035d6:	4b0d      	ldr	r3, [pc, #52]	@ (800360c <SystemInit+0xc4>)
 80035d8:	2201      	movs	r2, #1
 80035da:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80035de:	4b0c      	ldr	r3, [pc, #48]	@ (8003610 <SystemInit+0xc8>)
 80035e0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80035e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80035e6:	4770      	bx	lr
 80035e8:	e000ed00 	.word	0xe000ed00
 80035ec:	52002000 	.word	0x52002000
 80035f0:	58024400 	.word	0x58024400
 80035f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80035f8:	02020200 	.word	0x02020200
 80035fc:	01ff0000 	.word	0x01ff0000
 8003600:	01010280 	.word	0x01010280
 8003604:	5c001000 	.word	0x5c001000
 8003608:	ffff0000 	.word	0xffff0000
 800360c:	51008000 	.word	0x51008000
 8003610:	52004000 	.word	0x52004000

08003614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003614:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800364c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003618:	f7ff ff96 	bl	8003548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800361c:	480c      	ldr	r0, [pc, #48]	@ (8003650 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800361e:	490d      	ldr	r1, [pc, #52]	@ (8003654 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003620:	4a0d      	ldr	r2, [pc, #52]	@ (8003658 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003624:	e002      	b.n	800362c <LoopCopyDataInit>

08003626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800362a:	3304      	adds	r3, #4

0800362c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800362c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800362e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003630:	d3f9      	bcc.n	8003626 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003632:	4a0a      	ldr	r2, [pc, #40]	@ (800365c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003634:	4c0a      	ldr	r4, [pc, #40]	@ (8003660 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003638:	e001      	b.n	800363e <LoopFillZerobss>

0800363a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800363a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800363c:	3204      	adds	r2, #4

0800363e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800363e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003640:	d3fb      	bcc.n	800363a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003642:	f018 fef1 	bl	801c428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003646:	f7fd fd87 	bl	8001158 <main>
  bx  lr
 800364a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800364c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003650:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003654:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8003658:	0801cc34 	.word	0x0801cc34
  ldr r2, =_sbss
 800365c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8003660:	240095cc 	.word	0x240095cc

08003664 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003664:	e7fe      	b.n	8003664 <ADC3_IRQHandler>
	...

08003668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003668:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800366a:	2003      	movs	r0, #3
 800366c:	f000 fe2c 	bl	80042c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003670:	f003 fffa 	bl	8007668 <HAL_RCC_GetSysClockFreq>
 8003674:	490f      	ldr	r1, [pc, #60]	@ (80036b4 <HAL_Init+0x4c>)
 8003676:	698b      	ldr	r3, [r1, #24]
 8003678:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800367c:	4a0e      	ldr	r2, [pc, #56]	@ (80036b8 <HAL_Init+0x50>)
 800367e:	5cd3      	ldrb	r3, [r2, r3]
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003686:	698b      	ldr	r3, [r1, #24]
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	5cd3      	ldrb	r3, [r2, r3]
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	fa20 f303 	lsr.w	r3, r0, r3
 8003696:	4a09      	ldr	r2, [pc, #36]	@ (80036bc <HAL_Init+0x54>)
 8003698:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800369a:	4b09      	ldr	r3, [pc, #36]	@ (80036c0 <HAL_Init+0x58>)
 800369c:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800369e:	2000      	movs	r0, #0
 80036a0:	f7ff fde2 	bl	8003268 <HAL_InitTick>
 80036a4:	b110      	cbz	r0, 80036ac <HAL_Init+0x44>
  {
    return HAL_ERROR;
 80036a6:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 80036a8:	4620      	mov	r0, r4
 80036aa:	bd10      	pop	{r4, pc}
 80036ac:	4604      	mov	r4, r0
  HAL_MspInit();
 80036ae:	f7fe ff93 	bl	80025d8 <HAL_MspInit>
  return HAL_OK;
 80036b2:	e7f9      	b.n	80036a8 <HAL_Init+0x40>
 80036b4:	58024400 	.word	0x58024400
 80036b8:	0801c7d0 	.word	0x0801c7d0
 80036bc:	24000000 	.word	0x24000000
 80036c0:	24000004 	.word	0x24000004

080036c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80036c4:	4b03      	ldr	r3, [pc, #12]	@ (80036d4 <HAL_IncTick+0x10>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	4a03      	ldr	r2, [pc, #12]	@ (80036d8 <HAL_IncTick+0x14>)
 80036ca:	6811      	ldr	r1, [r2, #0]
 80036cc:	440b      	add	r3, r1
 80036ce:	6013      	str	r3, [r2, #0]
}
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	24000008 	.word	0x24000008
 80036d8:	240027b4 	.word	0x240027b4

080036dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80036dc:	4b01      	ldr	r3, [pc, #4]	@ (80036e4 <HAL_GetTick+0x8>)
 80036de:	6818      	ldr	r0, [r3, #0]
}
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	240027b4 	.word	0x240027b4

080036e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036e8:	b538      	push	{r3, r4, r5, lr}
 80036ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80036ec:	f7ff fff6 	bl	80036dc <HAL_GetTick>
 80036f0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036f2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80036f6:	d002      	beq.n	80036fe <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80036f8:	4b04      	ldr	r3, [pc, #16]	@ (800370c <HAL_Delay+0x24>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036fe:	f7ff ffed 	bl	80036dc <HAL_GetTick>
 8003702:	1b40      	subs	r0, r0, r5
 8003704:	42a0      	cmp	r0, r4
 8003706:	d3fa      	bcc.n	80036fe <HAL_Delay+0x16>
  {
  }
}
 8003708:	bd38      	pop	{r3, r4, r5, pc}
 800370a:	bf00      	nop
 800370c:	24000008 	.word	0x24000008

08003710 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8003710:	4b01      	ldr	r3, [pc, #4]	@ (8003718 <HAL_GetREVID+0x8>)
 8003712:	6818      	ldr	r0, [r3, #0]
}
 8003714:	0c00      	lsrs	r0, r0, #16
 8003716:	4770      	bx	lr
 8003718:	5c001000 	.word	0x5c001000

0800371c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800371c:	b410      	push	{r4}
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800371e:	3030      	adds	r0, #48	@ 0x30
 8003720:	0a0b      	lsrs	r3, r1, #8
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	f003 030c 	and.w	r3, r3, #12

  MODIFY_REG(*preg,
 8003728:	58c4      	ldr	r4, [r0, r3]
 800372a:	f001 011f 	and.w	r1, r1, #31
 800372e:	f04f 0c1f 	mov.w	ip, #31
 8003732:	fa0c fc01 	lsl.w	ip, ip, r1
 8003736:	ea24 0c0c 	bic.w	ip, r4, ip
 800373a:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800373e:	408a      	lsls	r2, r1
 8003740:	ea4c 0202 	orr.w	r2, ip, r2
 8003744:	50c2      	str	r2, [r0, r3]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800374a:	4770      	bx	lr

0800374c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800374c:	b410      	push	{r4}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800374e:	3014      	adds	r0, #20
 8003750:	0e4b      	lsrs	r3, r1, #25
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	f003 0304 	and.w	r3, r3, #4

  MODIFY_REG(*preg,
 8003758:	58c4      	ldr	r4, [r0, r3]
 800375a:	f3c1 5104 	ubfx	r1, r1, #20, #5
 800375e:	f04f 0c07 	mov.w	ip, #7
 8003762:	fa0c fc01 	lsl.w	ip, ip, r1
 8003766:	ea24 0c0c 	bic.w	ip, r4, ip
 800376a:	408a      	lsls	r2, r1
 800376c:	ea4c 0202 	orr.w	r2, ip, r2
 8003770:	50c2      	str	r2, [r0, r3]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003772:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003778:	b570      	push	{r4, r5, r6, lr}
 800377a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	9301      	str	r3, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003780:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8003784:	2b01      	cmp	r3, #1
 8003786:	f000 8224 	beq.w	8003bd2 <HAL_ADC_ConfigChannel+0x45a>
 800378a:	4604      	mov	r4, r0
 800378c:	460d      	mov	r5, r1
 800378e:	2301      	movs	r3, #1
 8003790:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003794:	6802      	ldr	r2, [r0, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003796:	6893      	ldr	r3, [r2, #8]
 8003798:	f013 0f04 	tst.w	r3, #4
 800379c:	d009      	beq.n	80037b2 <HAL_ADC_ConfigChannel+0x3a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800379e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80037a0:	f043 0320 	orr.w	r3, r3, #32
 80037a4:	6543      	str	r3, [r0, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80037a6:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037a8:	2300      	movs	r3, #0
 80037aa:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80037ae:	b002      	add	sp, #8
 80037b0:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80037b2:	680b      	ldr	r3, [r1, #0]
 80037b4:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80037b8:	2900      	cmp	r1, #0
 80037ba:	d13c      	bne.n	8003836 <HAL_ADC_ConfigChannel+0xbe>
 80037bc:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80037c0:	2101      	movs	r1, #1
 80037c2:	4099      	lsls	r1, r3
 80037c4:	69d3      	ldr	r3, [r2, #28]
 80037c6:	430b      	orrs	r3, r1
 80037c8:	61d3      	str	r3, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80037ca:	682a      	ldr	r2, [r5, #0]
 80037cc:	6869      	ldr	r1, [r5, #4]
 80037ce:	6820      	ldr	r0, [r4, #0]
 80037d0:	f7ff ffa4 	bl	800371c <LL_ADC_REG_SetSequencerRanks>
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037d4:	6820      	ldr	r0, [r4, #0]
 80037d6:	6883      	ldr	r3, [r0, #8]
 80037d8:	f013 0304 	ands.w	r3, r3, #4
 80037dc:	d000      	beq.n	80037e0 <HAL_ADC_ConfigChannel+0x68>
 80037de:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037e0:	6882      	ldr	r2, [r0, #8]
 80037e2:	f012 0208 	ands.w	r2, r2, #8
 80037e6:	d000      	beq.n	80037ea <HAL_ADC_ConfigChannel+0x72>
 80037e8:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037ea:	ea52 0603 	orrs.w	r6, r2, r3
 80037ee:	d02e      	beq.n	800384e <HAL_ADC_ConfigChannel+0xd6>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037f0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037f2:	6893      	ldr	r3, [r2, #8]
 80037f4:	f013 0f01 	tst.w	r3, #1
 80037f8:	f040 81e7 	bne.w	8003bca <HAL_ADC_ConfigChannel+0x452>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80037fc:	682b      	ldr	r3, [r5, #0]
 80037fe:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8003800:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 8003804:	f3c3 0613 	ubfx	r6, r3, #0, #20
 8003808:	ea21 0106 	bic.w	r1, r1, r6
 800380c:	f000 0618 	and.w	r6, r0, #24
 8003810:	48ae      	ldr	r0, [pc, #696]	@ (8003acc <HAL_ADC_ConfigChannel+0x354>)
 8003812:	40f0      	lsrs	r0, r6
 8003814:	4003      	ands	r3, r0
 8003816:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800381a:	430b      	orrs	r3, r1
 800381c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003820:	68ea      	ldr	r2, [r5, #12]
 8003822:	4bab      	ldr	r3, [pc, #684]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x358>)
 8003824:	429a      	cmp	r2, r3
 8003826:	f000 80a1 	beq.w	800396c <HAL_ADC_ConfigChannel+0x1f4>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800382a:	682b      	ldr	r3, [r5, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	f2c0 8153 	blt.w	8003ad8 <HAL_ADC_ConfigChannel+0x360>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003832:	2000      	movs	r0, #0
 8003834:	e7b8      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800383a:	b133      	cbz	r3, 800384a <HAL_ADC_ConfigChannel+0xd2>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800383c:	fab3 f383 	clz	r3, r3
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	2101      	movs	r1, #1
 8003846:	4099      	lsls	r1, r3
 8003848:	e7bc      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x4c>
    return 32U;
 800384a:	2320      	movs	r3, #32
 800384c:	e7f8      	b.n	8003840 <HAL_ADC_ConfigChannel+0xc8>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800384e:	68aa      	ldr	r2, [r5, #8]
 8003850:	6829      	ldr	r1, [r5, #0]
 8003852:	f7ff ff7b 	bl	800374c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003856:	4b9f      	ldr	r3, [pc, #636]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x35c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800385e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003862:	d00b      	beq.n	800387c <HAL_ADC_ConfigChannel+0x104>
 8003864:	6822      	ldr	r2, [r4, #0]
 8003866:	68d3      	ldr	r3, [r2, #12]
 8003868:	f013 0f10 	tst.w	r3, #16
 800386c:	d13b      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x16e>
 800386e:	696b      	ldr	r3, [r5, #20]
 8003870:	68d2      	ldr	r2, [r2, #12]
 8003872:	f3c2 0282 	ubfx	r2, r2, #2, #3
 8003876:	0052      	lsls	r2, r2, #1
 8003878:	4093      	lsls	r3, r2
 800387a:	e006      	b.n	800388a <HAL_ADC_ConfigChannel+0x112>
 800387c:	696b      	ldr	r3, [r5, #20]
 800387e:	6822      	ldr	r2, [r4, #0]
 8003880:	68d2      	ldr	r2, [r2, #12]
 8003882:	f3c2 0282 	ubfx	r2, r2, #2, #3
 8003886:	0052      	lsls	r2, r2, #1
 8003888:	4093      	lsls	r3, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800388a:	6929      	ldr	r1, [r5, #16]
 800388c:	2904      	cmp	r1, #4
 800388e:	d038      	beq.n	8003902 <HAL_ADC_ConfigChannel+0x18a>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003890:	6822      	ldr	r2, [r4, #0]
 8003892:	6828      	ldr	r0, [r5, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003894:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 8003898:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 800389c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80038a0:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80038a4:	4303      	orrs	r3, r0
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	6928      	ldr	r0, [r5, #16]
 80038b0:	7e6a      	ldrb	r2, [r5, #25]
 80038b2:	2a01      	cmp	r2, #1
 80038b4:	d01f      	beq.n	80038f6 <HAL_ADC_ConfigChannel+0x17e>
 80038b6:	4631      	mov	r1, r6
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038b8:	3360      	adds	r3, #96	@ 0x60
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80038ba:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80038be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038c2:	430a      	orrs	r2, r1
 80038c4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80038c8:	6821      	ldr	r1, [r4, #0]
 80038ca:	692a      	ldr	r2, [r5, #16]
 80038cc:	7e2b      	ldrb	r3, [r5, #24]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d014      	beq.n	80038fc <HAL_ADC_ConfigChannel+0x184>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80038d2:	690b      	ldr	r3, [r1, #16]
 80038d4:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 80038d8:	f002 021f 	and.w	r2, r2, #31
 80038dc:	fa06 f202 	lsl.w	r2, r6, r2
 80038e0:	4313      	orrs	r3, r2
 80038e2:	610b      	str	r3, [r1, #16]
}
 80038e4:	e784      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x78>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80038e6:	696b      	ldr	r3, [r5, #20]
 80038e8:	68d2      	ldr	r2, [r2, #12]
 80038ea:	0892      	lsrs	r2, r2, #2
 80038ec:	f002 0204 	and.w	r2, r2, #4
 80038f0:	0052      	lsls	r2, r2, #1
 80038f2:	4093      	lsls	r3, r2
 80038f4:	e7c9      	b.n	800388a <HAL_ADC_ConfigChannel+0x112>
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80038f6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80038fa:	e7dd      	b.n	80038b8 <HAL_ADC_ConfigChannel+0x140>
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80038fc:	f44f 6600 	mov.w	r6, #2048	@ 0x800
 8003900:	e7e7      	b.n	80038d2 <HAL_ADC_ConfigChannel+0x15a>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003902:	6822      	ldr	r2, [r4, #0]
 8003904:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8003906:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 800390a:	6829      	ldr	r1, [r5, #0]
 800390c:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8003910:	d01d      	beq.n	800394e <HAL_ADC_ConfigChannel+0x1d6>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003912:	6822      	ldr	r2, [r4, #0]
 8003914:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8003916:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 800391a:	6829      	ldr	r1, [r5, #0]
 800391c:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8003920:	d01a      	beq.n	8003958 <HAL_ADC_ConfigChannel+0x1e0>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003922:	6822      	ldr	r2, [r4, #0]
 8003924:	6e93      	ldr	r3, [r2, #104]	@ 0x68
 8003926:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 800392a:	6829      	ldr	r1, [r5, #0]
 800392c:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8003930:	d017      	beq.n	8003962 <HAL_ADC_ConfigChannel+0x1ea>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003932:	6822      	ldr	r2, [r4, #0]
 8003934:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 8003936:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 800393a:	6829      	ldr	r1, [r5, #0]
 800393c:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8003940:	f47f af56 	bne.w	80037f0 <HAL_ADC_ConfigChannel+0x78>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003944:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 8003946:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800394a:	66d3      	str	r3, [r2, #108]	@ 0x6c
 800394c:	e750      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x78>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800394e:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8003950:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003954:	6613      	str	r3, [r2, #96]	@ 0x60
 8003956:	e7dc      	b.n	8003912 <HAL_ADC_ConfigChannel+0x19a>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003958:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800395a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800395e:	6653      	str	r3, [r2, #100]	@ 0x64
 8003960:	e7df      	b.n	8003922 <HAL_ADC_ConfigChannel+0x1aa>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003962:	6e93      	ldr	r3, [r2, #104]	@ 0x68
 8003964:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003968:	6693      	str	r3, [r2, #104]	@ 0x68
 800396a:	e7e2      	b.n	8003932 <HAL_ADC_ConfigChannel+0x1ba>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800396c:	6820      	ldr	r0, [r4, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800396e:	682b      	ldr	r3, [r5, #0]
 8003970:	f3c3 0613 	ubfx	r6, r3, #0, #20
 8003974:	bb3e      	cbnz	r6, 80039c6 <HAL_ADC_ConfigChannel+0x24e>
 8003976:	0e9a      	lsrs	r2, r3, #26
 8003978:	3201      	adds	r2, #1
 800397a:	f002 021f 	and.w	r2, r2, #31
 800397e:	2a09      	cmp	r2, #9
 8003980:	bf8c      	ite	hi
 8003982:	2200      	movhi	r2, #0
 8003984:	2201      	movls	r2, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003986:	2a00      	cmp	r2, #0
 8003988:	d055      	beq.n	8003a36 <HAL_ADC_ConfigChannel+0x2be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800398a:	bb5e      	cbnz	r6, 80039e4 <HAL_ADC_ConfigChannel+0x26c>
 800398c:	0e99      	lsrs	r1, r3, #26
 800398e:	3101      	adds	r1, #1
 8003990:	0689      	lsls	r1, r1, #26
 8003992:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8003996:	bb8e      	cbnz	r6, 80039fc <HAL_ADC_ConfigChannel+0x284>
 8003998:	ea4f 6c93 	mov.w	ip, r3, lsr #26
 800399c:	f10c 0c01 	add.w	ip, ip, #1
 80039a0:	f00c 0c1f 	and.w	ip, ip, #31
 80039a4:	2201      	movs	r2, #1
 80039a6:	fa02 f20c 	lsl.w	r2, r2, ip
 80039aa:	4311      	orrs	r1, r2
 80039ac:	bbae      	cbnz	r6, 8003a1a <HAL_ADC_ConfigChannel+0x2a2>
 80039ae:	0e9b      	lsrs	r3, r3, #26
 80039b0:	3301      	adds	r3, #1
 80039b2:	f003 031f 	and.w	r3, r3, #31
 80039b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80039ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039bc:	4319      	orrs	r1, r3
 80039be:	68aa      	ldr	r2, [r5, #8]
 80039c0:	f7ff fec4 	bl	800374c <LL_ADC_SetChannelSamplingTime>
 80039c4:	e731      	b.n	800382a <HAL_ADC_ConfigChannel+0xb2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c6:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80039ca:	b14a      	cbz	r2, 80039e0 <HAL_ADC_ConfigChannel+0x268>
  return __builtin_clz(value);
 80039cc:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039d0:	3201      	adds	r2, #1
 80039d2:	f002 021f 	and.w	r2, r2, #31
 80039d6:	2a09      	cmp	r2, #9
 80039d8:	bf8c      	ite	hi
 80039da:	2200      	movhi	r2, #0
 80039dc:	2201      	movls	r2, #1
 80039de:	e7d2      	b.n	8003986 <HAL_ADC_ConfigChannel+0x20e>
    return 32U;
 80039e0:	2220      	movs	r2, #32
 80039e2:	e7f5      	b.n	80039d0 <HAL_ADC_ConfigChannel+0x258>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e4:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 80039e8:	b131      	cbz	r1, 80039f8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80039ea:	fab1 f181 	clz	r1, r1
 80039ee:	3101      	adds	r1, #1
 80039f0:	0689      	lsls	r1, r1, #26
 80039f2:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 80039f6:	e7ce      	b.n	8003996 <HAL_ADC_ConfigChannel+0x21e>
    return 32U;
 80039f8:	2120      	movs	r1, #32
 80039fa:	e7f8      	b.n	80039ee <HAL_ADC_ConfigChannel+0x276>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fc:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8003a00:	b14a      	cbz	r2, 8003a16 <HAL_ADC_ConfigChannel+0x29e>
  return __builtin_clz(value);
 8003a02:	fab2 f282 	clz	r2, r2
 8003a06:	3201      	adds	r2, #1
 8003a08:	f002 021f 	and.w	r2, r2, #31
 8003a0c:	f04f 0c01 	mov.w	ip, #1
 8003a10:	fa0c f202 	lsl.w	r2, ip, r2
 8003a14:	e7c9      	b.n	80039aa <HAL_ADC_ConfigChannel+0x232>
    return 32U;
 8003a16:	2220      	movs	r2, #32
 8003a18:	e7f5      	b.n	8003a06 <HAL_ADC_ConfigChannel+0x28e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8003a1e:	b143      	cbz	r3, 8003a32 <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8003a20:	fab3 f383 	clz	r3, r3
 8003a24:	3301      	adds	r3, #1
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003a2e:	051b      	lsls	r3, r3, #20
 8003a30:	e7c4      	b.n	80039bc <HAL_ADC_ConfigChannel+0x244>
    return 32U;
 8003a32:	2320      	movs	r3, #32
 8003a34:	e7f6      	b.n	8003a24 <HAL_ADC_ConfigChannel+0x2ac>
 8003a36:	b9e6      	cbnz	r6, 8003a72 <HAL_ADC_ConfigChannel+0x2fa>
 8003a38:	0e99      	lsrs	r1, r3, #26
 8003a3a:	3101      	adds	r1, #1
 8003a3c:	0689      	lsls	r1, r1, #26
 8003a3e:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8003a42:	bb16      	cbnz	r6, 8003a8a <HAL_ADC_ConfigChannel+0x312>
 8003a44:	ea4f 6c93 	mov.w	ip, r3, lsr #26
 8003a48:	f10c 0c01 	add.w	ip, ip, #1
 8003a4c:	f00c 0c1f 	and.w	ip, ip, #31
 8003a50:	2201      	movs	r2, #1
 8003a52:	fa02 f20c 	lsl.w	r2, r2, ip
 8003a56:	4311      	orrs	r1, r2
 8003a58:	bb36      	cbnz	r6, 8003aa8 <HAL_ADC_ConfigChannel+0x330>
 8003a5a:	0e9b      	lsrs	r3, r3, #26
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	f003 031f 	and.w	r3, r3, #31
 8003a62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003a66:	3b1e      	subs	r3, #30
 8003a68:	051b      	lsls	r3, r3, #20
 8003a6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a6e:	4319      	orrs	r1, r3
 8003a70:	e7a5      	b.n	80039be <HAL_ADC_ConfigChannel+0x246>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 8003a76:	b131      	cbz	r1, 8003a86 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003a78:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a7c:	3101      	adds	r1, #1
 8003a7e:	0689      	lsls	r1, r1, #26
 8003a80:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8003a84:	e7dd      	b.n	8003a42 <HAL_ADC_ConfigChannel+0x2ca>
    return 32U;
 8003a86:	2120      	movs	r1, #32
 8003a88:	e7f8      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x304>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8003a8e:	b14a      	cbz	r2, 8003aa4 <HAL_ADC_ConfigChannel+0x32c>
  return __builtin_clz(value);
 8003a90:	fab2 f282 	clz	r2, r2
 8003a94:	3201      	adds	r2, #1
 8003a96:	f002 021f 	and.w	r2, r2, #31
 8003a9a:	f04f 0c01 	mov.w	ip, #1
 8003a9e:	fa0c f202 	lsl.w	r2, ip, r2
 8003aa2:	e7d8      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x2de>
    return 32U;
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	e7f5      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x31c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa8:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8003aac:	b15b      	cbz	r3, 8003ac6 <HAL_ADC_ConfigChannel+0x34e>
  return __builtin_clz(value);
 8003aae:	fab3 f383 	clz	r3, r3
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003abc:	3b1e      	subs	r3, #30
 8003abe:	051b      	lsls	r3, r3, #20
 8003ac0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ac4:	e7d3      	b.n	8003a6e <HAL_ADC_ConfigChannel+0x2f6>
    return 32U;
 8003ac6:	2320      	movs	r3, #32
 8003ac8:	e7f3      	b.n	8003ab2 <HAL_ADC_ConfigChannel+0x33a>
 8003aca:	bf00      	nop
 8003acc:	000fffff 	.word	0x000fffff
 8003ad0:	47ff0000 	.word	0x47ff0000
 8003ad4:	5c001000 	.word	0x5c001000
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ad8:	6822      	ldr	r2, [r4, #0]
 8003ada:	493f      	ldr	r1, [pc, #252]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x460>)
 8003adc:	483f      	ldr	r0, [pc, #252]	@ (8003bdc <HAL_ADC_ConfigChannel+0x464>)
 8003ade:	4282      	cmp	r2, r0
 8003ae0:	bf18      	it	ne
 8003ae2:	428a      	cmpne	r2, r1
 8003ae4:	bf0c      	ite	eq
 8003ae6:	2101      	moveq	r1, #1
 8003ae8:	2100      	movne	r1, #0
 8003aea:	d118      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0x3a6>
 8003aec:	4e3c      	ldr	r6, [pc, #240]	@ (8003be0 <HAL_ADC_ConfigChannel+0x468>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003aee:	68b5      	ldr	r5, [r6, #8]
 8003af0:	f005 7ce0 	and.w	ip, r5, #29360128	@ 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003af4:	b1a9      	cbz	r1, 8003b22 <HAL_ADC_ConfigChannel+0x3aa>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003af6:	4938      	ldr	r1, [pc, #224]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x460>)
 8003af8:	6888      	ldr	r0, [r1, #8]
 8003afa:	f010 0001 	ands.w	r0, r0, #1
 8003afe:	d000      	beq.n	8003b02 <HAL_ADC_ConfigChannel+0x38a>
 8003b00:	2001      	movs	r0, #1
 8003b02:	4936      	ldr	r1, [pc, #216]	@ (8003bdc <HAL_ADC_ConfigChannel+0x464>)
 8003b04:	6889      	ldr	r1, [r1, #8]
 8003b06:	f011 0101 	ands.w	r1, r1, #1
 8003b0a:	d000      	beq.n	8003b0e <HAL_ADC_ConfigChannel+0x396>
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	4301      	orrs	r1, r0
 8003b10:	d00c      	beq.n	8003b2c <HAL_ADC_ConfigChannel+0x3b4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b12:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003b14:	f043 0320 	orr.w	r3, r3, #32
 8003b18:	6563      	str	r3, [r4, #84]	@ 0x54
          tmp_hal_status = HAL_ERROR;
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	e644      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x30>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b1e:	4e31      	ldr	r6, [pc, #196]	@ (8003be4 <HAL_ADC_ConfigChannel+0x46c>)
 8003b20:	e7e5      	b.n	8003aee <HAL_ADC_ConfigChannel+0x376>
 8003b22:	4931      	ldr	r1, [pc, #196]	@ (8003be8 <HAL_ADC_ConfigChannel+0x470>)
 8003b24:	6889      	ldr	r1, [r1, #8]
 8003b26:	f011 0f01 	tst.w	r1, #1
 8003b2a:	d1f2      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x39a>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b2c:	492f      	ldr	r1, [pc, #188]	@ (8003bec <HAL_ADC_ConfigChannel+0x474>)
 8003b2e:	428b      	cmp	r3, r1
 8003b30:	d007      	beq.n	8003b42 <HAL_ADC_ConfigChannel+0x3ca>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b32:	492f      	ldr	r1, [pc, #188]	@ (8003bf0 <HAL_ADC_ConfigChannel+0x478>)
 8003b34:	428b      	cmp	r3, r1
 8003b36:	d026      	beq.n	8003b86 <HAL_ADC_ConfigChannel+0x40e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b38:	492e      	ldr	r1, [pc, #184]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x47c>)
 8003b3a:	428b      	cmp	r3, r1
 8003b3c:	d034      	beq.n	8003ba8 <HAL_ADC_ConfigChannel+0x430>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b3e:	2000      	movs	r0, #0
 8003b40:	e632      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x30>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b42:	f415 0f00 	tst.w	r5, #8388608	@ 0x800000
 8003b46:	d1f4      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x3ba>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b48:	4b27      	ldr	r3, [pc, #156]	@ (8003be8 <HAL_ADC_ConfigChannel+0x470>)
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d001      	beq.n	8003b52 <HAL_ADC_ConfigChannel+0x3da>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b4e:	2000      	movs	r0, #0
 8003b50:	e62a      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x30>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003b52:	f44c 0300 	orr.w	r3, ip, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b56:	68b2      	ldr	r2, [r6, #8]
 8003b58:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60b3      	str	r3, [r6, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b60:	4b25      	ldr	r3, [pc, #148]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x480>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	099b      	lsrs	r3, r3, #6
 8003b66:	4a25      	ldr	r2, [pc, #148]	@ (8003bfc <HAL_ADC_ConfigChannel+0x484>)
 8003b68:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6c:	099b      	lsrs	r3, r3, #6
 8003b6e:	3301      	adds	r3, #1
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8003b74:	e002      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x404>
                wait_loop_index--;
 8003b76:	9b01      	ldr	r3, [sp, #4]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8003b7c:	9b01      	ldr	r3, [sp, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f9      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x3fe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b82:	2000      	movs	r0, #0
 8003b84:	e610      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x30>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b86:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 8003b8a:	d1d5      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x3c0>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b8c:	4b16      	ldr	r3, [pc, #88]	@ (8003be8 <HAL_ADC_ConfigChannel+0x470>)
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d001      	beq.n	8003b96 <HAL_ADC_ConfigChannel+0x41e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b92:	2000      	movs	r0, #0
 8003b94:	e608      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x30>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003b96:	f04c 7380 	orr.w	r3, ip, #16777216	@ 0x1000000
 8003b9a:	68b2      	ldr	r2, [r6, #8]
 8003b9c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60b3      	str	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ba4:	2000      	movs	r0, #0
}
 8003ba6:	e5ff      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x30>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ba8:	f415 0f80 	tst.w	r5, #4194304	@ 0x400000
 8003bac:	d10f      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x456>
            if (ADC_VREFINT_INSTANCE(hadc))
 8003bae:	4b0e      	ldr	r3, [pc, #56]	@ (8003be8 <HAL_ADC_ConfigChannel+0x470>)
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d001      	beq.n	8003bb8 <HAL_ADC_ConfigChannel+0x440>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	e5f7      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x30>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003bb8:	f44c 0380 	orr.w	r3, ip, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003bbc:	68b2      	ldr	r2, [r6, #8]
 8003bbe:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60b3      	str	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bc6:	2000      	movs	r0, #0
}
 8003bc8:	e5ee      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x30>
 8003bca:	2000      	movs	r0, #0
 8003bcc:	e5ec      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x30>
 8003bce:	2000      	movs	r0, #0
 8003bd0:	e5ea      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8003bd2:	2002      	movs	r0, #2
 8003bd4:	e5eb      	b.n	80037ae <HAL_ADC_ConfigChannel+0x36>
 8003bd6:	bf00      	nop
 8003bd8:	40022000 	.word	0x40022000
 8003bdc:	40022100 	.word	0x40022100
 8003be0:	40022300 	.word	0x40022300
 8003be4:	58026300 	.word	0x58026300
 8003be8:	58026000 	.word	0x58026000
 8003bec:	cb840000 	.word	0xcb840000
 8003bf0:	c7520000 	.word	0xc7520000
 8003bf4:	cfb80000 	.word	0xcfb80000
 8003bf8:	24000004 	.word	0x24000004
 8003bfc:	053e2d63 	.word	0x053e2d63

08003c00 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c00:	b538      	push	{r3, r4, r5, lr}
 8003c02:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c04:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003c06:	6893      	ldr	r3, [r2, #8]
 8003c08:	f013 0302 	ands.w	r3, r3, #2
 8003c0c:	d000      	beq.n	8003c10 <ADC_Disable+0x10>
 8003c0e:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c10:	6891      	ldr	r1, [r2, #8]
 8003c12:	f011 0f01 	tst.w	r1, #1
 8003c16:	d037      	beq.n	8003c88 <ADC_Disable+0x88>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d137      	bne.n	8003c8c <ADC_Disable+0x8c>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c1c:	6893      	ldr	r3, [r2, #8]
 8003c1e:	f003 030d 	and.w	r3, r3, #13
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d009      	beq.n	8003c3a <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c26:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003c28:	f043 0310 	orr.w	r3, r3, #16
 8003c2c:	6563      	str	r3, [r4, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c2e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	65a3      	str	r3, [r4, #88]	@ 0x58

      return HAL_ERROR;
 8003c36:	2001      	movs	r0, #1
 8003c38:	e027      	b.n	8003c8a <ADC_Disable+0x8a>
  MODIFY_REG(ADCx->CR,
 8003c3a:	6891      	ldr	r1, [r2, #8]
 8003c3c:	4b14      	ldr	r3, [pc, #80]	@ (8003c90 <ADC_Disable+0x90>)
 8003c3e:	400b      	ands	r3, r1
 8003c40:	f043 0302 	orr.w	r3, r3, #2
 8003c44:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	2203      	movs	r2, #3
 8003c4a:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c4c:	f7ff fd46 	bl	80036dc <HAL_GetTick>
 8003c50:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f013 0f01 	tst.w	r3, #1
 8003c5a:	d013      	beq.n	8003c84 <ADC_Disable+0x84>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c5c:	f7ff fd3e 	bl	80036dc <HAL_GetTick>
 8003c60:	1b40      	subs	r0, r0, r5
 8003c62:	2802      	cmp	r0, #2
 8003c64:	d9f5      	bls.n	8003c52 <ADC_Disable+0x52>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f013 0f01 	tst.w	r3, #1
 8003c6e:	d0f0      	beq.n	8003c52 <ADC_Disable+0x52>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c70:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003c72:	f043 0310 	orr.w	r3, r3, #16
 8003c76:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	65a3      	str	r3, [r4, #88]	@ 0x58

          return HAL_ERROR;
 8003c80:	2001      	movs	r0, #1
 8003c82:	e002      	b.n	8003c8a <ADC_Disable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c84:	2000      	movs	r0, #0
 8003c86:	e000      	b.n	8003c8a <ADC_Disable+0x8a>
 8003c88:	2000      	movs	r0, #0
}
 8003c8a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	e7fc      	b.n	8003c8a <ADC_Disable+0x8a>
 8003c90:	7fffffc0 	.word	0x7fffffc0

08003c94 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	4604      	mov	r4, r0
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003c98:	6803      	ldr	r3, [r0, #0]
 8003c9a:	494f      	ldr	r1, [pc, #316]	@ (8003dd8 <ADC_ConfigureBoostMode+0x144>)
 8003c9c:	4a4f      	ldr	r2, [pc, #316]	@ (8003ddc <ADC_ConfigureBoostMode+0x148>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	bf18      	it	ne
 8003ca2:	428b      	cmpne	r3, r1
 8003ca4:	d123      	bne.n	8003cee <ADC_ConfigureBoostMode+0x5a>
 8003ca6:	4b4e      	ldr	r3, [pc, #312]	@ (8003de0 <ADC_ConfigureBoostMode+0x14c>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8003cae:	bf14      	ite	ne
 8003cb0:	2301      	movne	r3, #1
 8003cb2:	2300      	moveq	r3, #0
 8003cb4:	b34b      	cbz	r3, 8003d0a <ADC_ConfigureBoostMode+0x76>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003cb6:	f003 ff1b 	bl	8007af0 <HAL_RCC_GetHCLKFreq>
 8003cba:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8003cbc:	6863      	ldr	r3, [r4, #4]
 8003cbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cc2:	d01c      	beq.n	8003cfe <ADC_ConfigureBoostMode+0x6a>
 8003cc4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cc8:	d01d      	beq.n	8003d06 <ADC_ConfigureBoostMode+0x72>
 8003cca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cce:	d016      	beq.n	8003cfe <ADC_ConfigureBoostMode+0x6a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003cd0:	f7ff fd1e 	bl	8003710 <HAL_GetREVID>
 8003cd4:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003cd8:	4298      	cmp	r0, r3
 8003cda:	d857      	bhi.n	8003d8c <ADC_ConfigureBoostMode+0xf8>
  {
    if (freq > 20000000UL)
 8003cdc:	4b41      	ldr	r3, [pc, #260]	@ (8003de4 <ADC_ConfigureBoostMode+0x150>)
 8003cde:	429d      	cmp	r5, r3
 8003ce0:	d94e      	bls.n	8003d80 <ADC_ConfigureBoostMode+0xec>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ce2:	6822      	ldr	r2, [r4, #0]
 8003ce4:	6893      	ldr	r3, [r2, #8]
 8003ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cea:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003cec:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003cee:	4b3e      	ldr	r3, [pc, #248]	@ (8003de8 <ADC_ConfigureBoostMode+0x154>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	e7da      	b.n	8003cb4 <ADC_ConfigureBoostMode+0x20>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003cfe:	0c1b      	lsrs	r3, r3, #16
 8003d00:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8003d04:	e7e4      	b.n	8003cd0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 4UL;
 8003d06:	0885      	lsrs	r5, r0, #2
        break;
 8003d08:	e7e2      	b.n	8003cd0 <ADC_ConfigureBoostMode+0x3c>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003d0a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003d0e:	f005 f859 	bl	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d12:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8003d14:	6863      	ldr	r3, [r4, #4]
 8003d16:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003d1a:	d02d      	beq.n	8003d78 <ADC_ConfigureBoostMode+0xe4>
 8003d1c:	d822      	bhi.n	8003d64 <ADC_ConfigureBoostMode+0xd0>
 8003d1e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003d22:	d027      	beq.n	8003d74 <ADC_ConfigureBoostMode+0xe0>
 8003d24:	d904      	bls.n	8003d30 <ADC_ConfigureBoostMode+0x9c>
 8003d26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d2a:	d1d1      	bne.n	8003cd0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 8003d2c:	0945      	lsrs	r5, r0, #5
        break;
 8003d2e:	e7cf      	b.n	8003cd0 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8003d30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d34:	d00d      	beq.n	8003d52 <ADC_ConfigureBoostMode+0xbe>
 8003d36:	d906      	bls.n	8003d46 <ADC_ConfigureBoostMode+0xb2>
 8003d38:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003d3c:	d009      	beq.n	8003d52 <ADC_ConfigureBoostMode+0xbe>
 8003d3e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003d42:	d006      	beq.n	8003d52 <ADC_ConfigureBoostMode+0xbe>
 8003d44:	e7c4      	b.n	8003cd0 <ADC_ConfigureBoostMode+0x3c>
 8003d46:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d4a:	d002      	beq.n	8003d52 <ADC_ConfigureBoostMode+0xbe>
 8003d4c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d50:	d104      	bne.n	8003d5c <ADC_ConfigureBoostMode+0xc8>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003d52:	0c9b      	lsrs	r3, r3, #18
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8003d5a:	e7b9      	b.n	8003cd0 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8003d5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d60:	d0f7      	beq.n	8003d52 <ADC_ConfigureBoostMode+0xbe>
 8003d62:	e7b5      	b.n	8003cd0 <ADC_ConfigureBoostMode+0x3c>
 8003d64:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003d68:	d008      	beq.n	8003d7c <ADC_ConfigureBoostMode+0xe8>
 8003d6a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003d6e:	d1af      	bne.n	8003cd0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 256UL;
 8003d70:	0a05      	lsrs	r5, r0, #8
        break;
 8003d72:	e7ad      	b.n	8003cd0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 8003d74:	0905      	lsrs	r5, r0, #4
        break;
 8003d76:	e7ab      	b.n	8003cd0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 8003d78:	0985      	lsrs	r5, r0, #6
        break;
 8003d7a:	e7a9      	b.n	8003cd0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 8003d7c:	09c5      	lsrs	r5, r0, #7
        break;
 8003d7e:	e7a7      	b.n	8003cd0 <ADC_ConfigureBoostMode+0x3c>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003d80:	6822      	ldr	r2, [r4, #0]
 8003d82:	6893      	ldr	r3, [r2, #8]
 8003d84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d88:	6093      	str	r3, [r2, #8]
 8003d8a:	e7af      	b.n	8003cec <ADC_ConfigureBoostMode+0x58>
    if (freq <= 6250000UL)
 8003d8c:	4b17      	ldr	r3, [pc, #92]	@ (8003dec <ADC_ConfigureBoostMode+0x158>)
 8003d8e:	429d      	cmp	r5, r3
 8003d90:	d805      	bhi.n	8003d9e <ADC_ConfigureBoostMode+0x10a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003d92:	6822      	ldr	r2, [r4, #0]
 8003d94:	6893      	ldr	r3, [r2, #8]
 8003d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d9a:	6093      	str	r3, [r2, #8]
 8003d9c:	e7a6      	b.n	8003cec <ADC_ConfigureBoostMode+0x58>
    else if (freq <= 12500000UL)
 8003d9e:	4b14      	ldr	r3, [pc, #80]	@ (8003df0 <ADC_ConfigureBoostMode+0x15c>)
 8003da0:	429d      	cmp	r5, r3
 8003da2:	d807      	bhi.n	8003db4 <ADC_ConfigureBoostMode+0x120>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003da4:	6822      	ldr	r2, [r4, #0]
 8003da6:	6893      	ldr	r3, [r2, #8]
 8003da8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db0:	6093      	str	r3, [r2, #8]
 8003db2:	e79b      	b.n	8003cec <ADC_ConfigureBoostMode+0x58>
    else if (freq <= 25000000UL)
 8003db4:	4b0f      	ldr	r3, [pc, #60]	@ (8003df4 <ADC_ConfigureBoostMode+0x160>)
 8003db6:	429d      	cmp	r5, r3
 8003db8:	d807      	bhi.n	8003dca <ADC_ConfigureBoostMode+0x136>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003dba:	6822      	ldr	r2, [r4, #0]
 8003dbc:	6893      	ldr	r3, [r2, #8]
 8003dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dc6:	6093      	str	r3, [r2, #8]
 8003dc8:	e790      	b.n	8003cec <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003dca:	6822      	ldr	r2, [r4, #0]
 8003dcc:	6893      	ldr	r3, [r2, #8]
 8003dce:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003dd2:	6093      	str	r3, [r2, #8]
}
 8003dd4:	e78a      	b.n	8003cec <ADC_ConfigureBoostMode+0x58>
 8003dd6:	bf00      	nop
 8003dd8:	40022000 	.word	0x40022000
 8003ddc:	40022100 	.word	0x40022100
 8003de0:	40022300 	.word	0x40022300
 8003de4:	01312d00 	.word	0x01312d00
 8003de8:	58026300 	.word	0x58026300
 8003dec:	00bebc21 	.word	0x00bebc21
 8003df0:	017d7841 	.word	0x017d7841
 8003df4:	02faf081 	.word	0x02faf081

08003df8 <HAL_ADC_Init>:
{
 8003df8:	b530      	push	{r4, r5, lr}
 8003dfa:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8003e00:	2800      	cmp	r0, #0
 8003e02:	f000 810a 	beq.w	800401a <HAL_ADC_Init+0x222>
 8003e06:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e08:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003e0a:	b1eb      	cbz	r3, 8003e48 <HAL_ADC_Init+0x50>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e0c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	f012 5f00 	tst.w	r2, #536870912	@ 0x20000000
 8003e14:	d003      	beq.n	8003e1e <HAL_ADC_Init+0x26>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e16:	6899      	ldr	r1, [r3, #8]
 8003e18:	4a81      	ldr	r2, [pc, #516]	@ (8004020 <HAL_ADC_Init+0x228>)
 8003e1a:	400a      	ands	r2, r1
 8003e1c:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e1e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 8003e26:	d11c      	bne.n	8003e62 <HAL_ADC_Init+0x6a>
  MODIFY_REG(ADCx->CR,
 8003e28:	6899      	ldr	r1, [r3, #8]
 8003e2a:	4a7e      	ldr	r2, [pc, #504]	@ (8004024 <HAL_ADC_Init+0x22c>)
 8003e2c:	400a      	ands	r2, r1
 8003e2e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003e32:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e34:	4b7c      	ldr	r3, [pc, #496]	@ (8004028 <HAL_ADC_Init+0x230>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	099b      	lsrs	r3, r3, #6
 8003e3a:	4a7c      	ldr	r2, [pc, #496]	@ (800402c <HAL_ADC_Init+0x234>)
 8003e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e40:	099b      	lsrs	r3, r3, #6
 8003e42:	3301      	adds	r3, #1
 8003e44:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003e46:	e009      	b.n	8003e5c <HAL_ADC_Init+0x64>
    HAL_ADC_MspInit(hadc);
 8003e48:	f7fe fbe0 	bl	800260c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	65a3      	str	r3, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8003e50:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 8003e54:	e7da      	b.n	8003e0c <HAL_ADC_Init+0x14>
      wait_loop_index--;
 8003e56:	9b01      	ldr	r3, [sp, #4]
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003e5c:	9b01      	ldr	r3, [sp, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f9      	bne.n	8003e56 <HAL_ADC_Init+0x5e>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e62:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e64:	6893      	ldr	r3, [r2, #8]
 8003e66:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003e6a:	f040 8099 	bne.w	8003fa0 <HAL_ADC_Init+0x1a8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e6e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003e70:	f043 0310 	orr.w	r3, r3, #16
 8003e74:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e76:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8003e7e:	2501      	movs	r5, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e80:	6893      	ldr	r3, [r2, #8]
 8003e82:	f013 0304 	ands.w	r3, r3, #4
 8003e86:	d000      	beq.n	8003e8a <HAL_ADC_Init+0x92>
 8003e88:	2301      	movs	r3, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e8a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8003e8c:	f011 0f10 	tst.w	r1, #16
 8003e90:	f040 80bb 	bne.w	800400a <HAL_ADC_Init+0x212>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f040 80b8 	bne.w	800400a <HAL_ADC_Init+0x212>
    ADC_STATE_CLR_SET(hadc->State,
 8003e9a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003e9c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003ea0:	f043 0302 	orr.w	r3, r3, #2
 8003ea4:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ea6:	6893      	ldr	r3, [r2, #8]
 8003ea8:	f013 0f01 	tst.w	r3, #1
 8003eac:	d11e      	bne.n	8003eec <HAL_ADC_Init+0xf4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003eae:	4960      	ldr	r1, [pc, #384]	@ (8004030 <HAL_ADC_Init+0x238>)
 8003eb0:	4b60      	ldr	r3, [pc, #384]	@ (8004034 <HAL_ADC_Init+0x23c>)
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	bf18      	it	ne
 8003eb6:	428a      	cmpne	r2, r1
 8003eb8:	bf0c      	ite	eq
 8003eba:	2201      	moveq	r2, #1
 8003ebc:	2200      	movne	r2, #0
 8003ebe:	d171      	bne.n	8003fa4 <HAL_ADC_Init+0x1ac>
 8003ec0:	6889      	ldr	r1, [r1, #8]
 8003ec2:	f011 0101 	ands.w	r1, r1, #1
 8003ec6:	d000      	beq.n	8003eca <HAL_ADC_Init+0xd2>
 8003ec8:	2101      	movs	r1, #1
 8003eca:	4b5a      	ldr	r3, [pc, #360]	@ (8004034 <HAL_ADC_Init+0x23c>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f013 0301 	ands.w	r3, r3, #1
 8003ed2:	d000      	beq.n	8003ed6 <HAL_ADC_Init+0xde>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	d108      	bne.n	8003eec <HAL_ADC_Init+0xf4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003eda:	2a00      	cmp	r2, #0
 8003edc:	d068      	beq.n	8003fb0 <HAL_ADC_Init+0x1b8>
 8003ede:	4956      	ldr	r1, [pc, #344]	@ (8004038 <HAL_ADC_Init+0x240>)
 8003ee0:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003ee2:	688a      	ldr	r2, [r1, #8]
 8003ee4:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	608b      	str	r3, [r1, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003eec:	f7ff fc10 	bl	8003710 <HAL_GetREVID>
 8003ef0:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003ef4:	4298      	cmp	r0, r3
 8003ef6:	d902      	bls.n	8003efe <HAL_ADC_Init+0x106>
 8003ef8:	68a3      	ldr	r3, [r4, #8]
 8003efa:	2b10      	cmp	r3, #16
 8003efc:	d05a      	beq.n	8003fb4 <HAL_ADC_Init+0x1bc>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003efe:	7d62      	ldrb	r2, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8003f00:	6b23      	ldr	r3, [r4, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f02:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                  hadc->Init.Resolution                                                 |
 8003f06:	68a2      	ldr	r2, [r4, #8]
                  hadc->Init.Overrun                                                    |
 8003f08:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f0a:	7f22      	ldrb	r2, [r4, #28]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f10:	7f22      	ldrb	r2, [r4, #28]
 8003f12:	2a01      	cmp	r2, #1
 8003f14:	d059      	beq.n	8003fca <HAL_ADC_Init+0x1d2>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f16:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003f18:	b122      	cbz	r2, 8003f24 <HAL_ADC_Init+0x12c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f1a:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003f1e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003f20:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f22:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003f24:	6821      	ldr	r1, [r4, #0]
 8003f26:	68c8      	ldr	r0, [r1, #12]
 8003f28:	4a44      	ldr	r2, [pc, #272]	@ (800403c <HAL_ADC_Init+0x244>)
 8003f2a:	4002      	ands	r2, r0
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	60ca      	str	r2, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f30:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f32:	688a      	ldr	r2, [r1, #8]
 8003f34:	f012 0204 	ands.w	r2, r2, #4
 8003f38:	d000      	beq.n	8003f3c <HAL_ADC_Init+0x144>
 8003f3a:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f3c:	688b      	ldr	r3, [r1, #8]
 8003f3e:	f013 0308 	ands.w	r3, r3, #8
 8003f42:	d000      	beq.n	8003f46 <HAL_ADC_Init+0x14e>
 8003f44:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	d11b      	bne.n	8003f82 <HAL_ADC_Init+0x18a>
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f4a:	7d22      	ldrb	r2, [r4, #20]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003f4c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
      tmpCFGR = (
 8003f4e:	ea43 3282 	orr.w	r2, r3, r2, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003f52:	68c8      	ldr	r0, [r1, #12]
 8003f54:	4b3a      	ldr	r3, [pc, #232]	@ (8004040 <HAL_ADC_Init+0x248>)
 8003f56:	4003      	ands	r3, r0
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60cb      	str	r3, [r1, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8003f5c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d037      	beq.n	8003fd4 <HAL_ADC_Init+0x1dc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f64:	6822      	ldr	r2, [r4, #0]
 8003f66:	6913      	ldr	r3, [r2, #16]
 8003f68:	f023 0301 	bic.w	r3, r3, #1
 8003f6c:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003f6e:	6822      	ldr	r2, [r4, #0]
 8003f70:	6913      	ldr	r3, [r2, #16]
 8003f72:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003f76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	f7ff fe89 	bl	8003c94 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f82:	68e3      	ldr	r3, [r4, #12]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d037      	beq.n	8003ff8 <HAL_ADC_Init+0x200>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f88:	6822      	ldr	r2, [r4, #0]
 8003f8a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003f8c:	f023 030f 	bic.w	r3, r3, #15
 8003f90:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f92:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003f94:	f023 0303 	bic.w	r3, r3, #3
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	6563      	str	r3, [r4, #84]	@ 0x54
 8003f9e:	e039      	b.n	8004014 <HAL_ADC_Init+0x21c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fa0:	2500      	movs	r5, #0
 8003fa2:	e76d      	b.n	8003e80 <HAL_ADC_Init+0x88>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fa4:	4b27      	ldr	r3, [pc, #156]	@ (8004044 <HAL_ADC_Init+0x24c>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f013 0f01 	tst.w	r3, #1
 8003fac:	d19e      	bne.n	8003eec <HAL_ADC_Init+0xf4>
 8003fae:	e794      	b.n	8003eda <HAL_ADC_Init+0xe2>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003fb0:	4925      	ldr	r1, [pc, #148]	@ (8004048 <HAL_ADC_Init+0x250>)
 8003fb2:	e795      	b.n	8003ee0 <HAL_ADC_Init+0xe8>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003fb4:	7d61      	ldrb	r1, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8003fb6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003fb8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
                  hadc->Init.Overrun                                                    |
 8003fbc:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003fbe:	7f22      	ldrb	r2, [r4, #28]
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003fc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003fc4:	f043 030c 	orr.w	r3, r3, #12
 8003fc8:	e7a2      	b.n	8003f10 <HAL_ADC_Init+0x118>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003fca:	6a22      	ldr	r2, [r4, #32]
 8003fcc:	3a01      	subs	r2, #1
 8003fce:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8003fd2:	e7a0      	b.n	8003f16 <HAL_ADC_Init+0x11e>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003fd4:	6820      	ldr	r0, [r4, #0]
 8003fd6:	6902      	ldr	r2, [r0, #16]
 8003fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800404c <HAL_ADC_Init+0x254>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003fde:	1e51      	subs	r1, r2, #1
 8003fe0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003fe2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003fe6:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003fec:	430a      	orrs	r2, r1
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	6103      	str	r3, [r0, #16]
 8003ff6:	e7ba      	b.n	8003f6e <HAL_ADC_Init+0x176>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ff8:	6821      	ldr	r1, [r4, #0]
 8003ffa:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8003ffc:	f023 030f 	bic.w	r3, r3, #15
 8004000:	69a2      	ldr	r2, [r4, #24]
 8004002:	3a01      	subs	r2, #1
 8004004:	4313      	orrs	r3, r2
 8004006:	630b      	str	r3, [r1, #48]	@ 0x30
 8004008:	e7c3      	b.n	8003f92 <HAL_ADC_Init+0x19a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800400a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800400c:	f043 0310 	orr.w	r3, r3, #16
 8004010:	6563      	str	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8004012:	2501      	movs	r5, #1
}
 8004014:	4628      	mov	r0, r5
 8004016:	b003      	add	sp, #12
 8004018:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800401a:	2501      	movs	r5, #1
 800401c:	e7fa      	b.n	8004014 <HAL_ADC_Init+0x21c>
 800401e:	bf00      	nop
 8004020:	5fffffc0 	.word	0x5fffffc0
 8004024:	6fffffc0 	.word	0x6fffffc0
 8004028:	24000004 	.word	0x24000004
 800402c:	053e2d63 	.word	0x053e2d63
 8004030:	40022000 	.word	0x40022000
 8004034:	40022100 	.word	0x40022100
 8004038:	40022300 	.word	0x40022300
 800403c:	fff0c003 	.word	0xfff0c003
 8004040:	ffffbffc 	.word	0xffffbffc
 8004044:	58026000 	.word	0x58026000
 8004048:	58026300 	.word	0x58026300
 800404c:	fc00f81e 	.word	0xfc00f81e

08004050 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004054:	2300      	movs	r3, #0
 8004056:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004058:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800405c:	2b01      	cmp	r3, #1
 800405e:	d043      	beq.n	80040e8 <HAL_ADCEx_Calibration_Start+0x98>
 8004060:	4604      	mov	r4, r0
 8004062:	460d      	mov	r5, r1
 8004064:	4616      	mov	r6, r2
 8004066:	2301      	movs	r3, #1
 8004068:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800406c:	f7ff fdc8 	bl	8003c00 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004070:	2800      	cmp	r0, #0
 8004072:	d130      	bne.n	80040d6 <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004074:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004076:	4b1d      	ldr	r3, [pc, #116]	@ (80040ec <HAL_ADCEx_Calibration_Start+0x9c>)
 8004078:	4013      	ands	r3, r2
 800407a:	f043 0302 	orr.w	r3, r3, #2
 800407e:	6563      	str	r3, [r4, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004080:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004082:	688a      	ldr	r2, [r1, #8]
 8004084:	4b1a      	ldr	r3, [pc, #104]	@ (80040f0 <HAL_ADCEx_Calibration_Start+0xa0>)
 8004086:	4013      	ands	r3, r2
 8004088:	f405 3580 	and.w	r5, r5, #65536	@ 0x10000
 800408c:	f006 4680 	and.w	r6, r6, #1073741824	@ 0x40000000
 8004090:	ea45 0206 	orr.w	r2, r5, r6
 8004094:	4313      	orrs	r3, r2
 8004096:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800409a:	608b      	str	r3, [r1, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800409c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	db06      	blt.n	80040b2 <HAL_ADCEx_Calibration_Start+0x62>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80040a6:	f023 0303 	bic.w	r3, r3, #3
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	6563      	str	r3, [r4, #84]	@ 0x54
 80040b0:	e015      	b.n	80040de <HAL_ADCEx_Calibration_Start+0x8e>
      wait_loop_index++;
 80040b2:	9b01      	ldr	r3, [sp, #4]
 80040b4:	3301      	adds	r3, #1
 80040b6:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80040b8:	9a01      	ldr	r2, [sp, #4]
 80040ba:	4b0e      	ldr	r3, [pc, #56]	@ (80040f4 <HAL_ADCEx_Calibration_Start+0xa4>)
 80040bc:	429a      	cmp	r2, r3
 80040be:	d3ed      	bcc.n	800409c <HAL_ADCEx_Calibration_Start+0x4c>
        ADC_STATE_CLR_SET(hadc->State,
 80040c0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80040c2:	f023 0312 	bic.w	r3, r3, #18
 80040c6:	f043 0310 	orr.w	r3, r3, #16
 80040ca:	6563      	str	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 80040cc:	2300      	movs	r3, #0
 80040ce:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_ERROR;
 80040d2:	2001      	movs	r0, #1
 80040d4:	e006      	b.n	80040e4 <HAL_ADCEx_Calibration_Start+0x94>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040d6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80040d8:	f043 0310 	orr.w	r3, r3, #16
 80040dc:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040de:	2300      	movs	r3, #0
 80040e0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80040e4:	b002      	add	sp, #8
 80040e6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 80040e8:	2002      	movs	r0, #2
 80040ea:	e7fb      	b.n	80040e4 <HAL_ADCEx_Calibration_Start+0x94>
 80040ec:	ffffeefd 	.word	0xffffeefd
 80040f0:	3ffeffc0 	.word	0x3ffeffc0
 80040f4:	25c3f800 	.word	0x25c3f800

080040f8 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040f8:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 80040fc:	2a01      	cmp	r2, #1
 80040fe:	f000 8096 	beq.w	800422e <HAL_ADCEx_MultiModeConfigChannel+0x136>
{
 8004102:	b430      	push	{r4, r5}
 8004104:	b09a      	sub	sp, #104	@ 0x68
 8004106:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004108:	2201      	movs	r2, #1
 800410a:	f880 2050 	strb.w	r2, [r0, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800410e:	2200      	movs	r2, #0
 8004110:	9216      	str	r2, [sp, #88]	@ 0x58
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004112:	9217      	str	r2, [sp, #92]	@ 0x5c

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004114:	6800      	ldr	r0, [r0, #0]
 8004116:	4a47      	ldr	r2, [pc, #284]	@ (8004234 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004118:	4290      	cmp	r0, r2
 800411a:	d036      	beq.n	800418a <HAL_ADCEx_MultiModeConfigChannel+0x92>
 800411c:	2200      	movs	r2, #0
 800411e:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8004120:	9a01      	ldr	r2, [sp, #4]
 8004122:	2a00      	cmp	r2, #0
 8004124:	d035      	beq.n	8004192 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004126:	6892      	ldr	r2, [r2, #8]
 8004128:	f012 0204 	ands.w	r2, r2, #4
 800412c:	d000      	beq.n	8004130 <HAL_ADCEx_MultiModeConfigChannel+0x38>
 800412e:	2201      	movs	r2, #1
 8004130:	6884      	ldr	r4, [r0, #8]
 8004132:	f014 0f04 	tst.w	r4, #4
 8004136:	d16b      	bne.n	8004210 <HAL_ADCEx_MultiModeConfigChannel+0x118>
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004138:	2a00      	cmp	r2, #0
 800413a:	d169      	bne.n	8004210 <HAL_ADCEx_MultiModeConfigChannel+0x118>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800413c:	4c3d      	ldr	r4, [pc, #244]	@ (8004234 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800413e:	4a3e      	ldr	r2, [pc, #248]	@ (8004238 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004140:	4290      	cmp	r0, r2
 8004142:	bf18      	it	ne
 8004144:	42a0      	cmpne	r0, r4
 8004146:	d12d      	bne.n	80041a4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004148:	f502 7200 	add.w	r2, r2, #512	@ 0x200

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800414c:	6808      	ldr	r0, [r1, #0]
 800414e:	2800      	cmp	r0, #0
 8004150:	d039      	beq.n	80041c6 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004152:	6890      	ldr	r0, [r2, #8]
 8004154:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 8004158:	684c      	ldr	r4, [r1, #4]
 800415a:	4320      	orrs	r0, r4
 800415c:	6090      	str	r0, [r2, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	4d34      	ldr	r5, [pc, #208]	@ (8004234 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004162:	4c35      	ldr	r4, [pc, #212]	@ (8004238 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004164:	42a0      	cmp	r0, r4
 8004166:	bf18      	it	ne
 8004168:	42a8      	cmpne	r0, r5
 800416a:	d11d      	bne.n	80041a8 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800416c:	68ac      	ldr	r4, [r5, #8]
 800416e:	f014 0401 	ands.w	r4, r4, #1
 8004172:	d000      	beq.n	8004176 <HAL_ADCEx_MultiModeConfigChannel+0x7e>
 8004174:	2401      	movs	r4, #1
 8004176:	4830      	ldr	r0, [pc, #192]	@ (8004238 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004178:	6880      	ldr	r0, [r0, #8]
 800417a:	f010 0001 	ands.w	r0, r0, #1
 800417e:	d000      	beq.n	8004182 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8004180:	2001      	movs	r0, #1
 8004182:	4320      	orrs	r0, r4
 8004184:	d015      	beq.n	80041b2 <HAL_ADCEx_MultiModeConfigChannel+0xba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004186:	2000      	movs	r0, #0
 8004188:	e047      	b.n	800421a <HAL_ADCEx_MultiModeConfigChannel+0x122>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800418a:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 800418e:	9201      	str	r2, [sp, #4]
 8004190:	e7c6      	b.n	8004120 <HAL_ADCEx_MultiModeConfigChannel+0x28>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004192:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004194:	f042 0220 	orr.w	r2, r2, #32
 8004198:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80041a0:	2001      	movs	r0, #1
 80041a2:	e03d      	b.n	8004220 <HAL_ADCEx_MultiModeConfigChannel+0x128>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80041a4:	4a25      	ldr	r2, [pc, #148]	@ (800423c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80041a6:	e7d1      	b.n	800414c <HAL_ADCEx_MultiModeConfigChannel+0x54>
 80041a8:	4825      	ldr	r0, [pc, #148]	@ (8004240 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80041aa:	6880      	ldr	r0, [r0, #8]
 80041ac:	f010 0f01 	tst.w	r0, #1
 80041b0:	d139      	bne.n	8004226 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80041b2:	6894      	ldr	r4, [r2, #8]
 80041b4:	4823      	ldr	r0, [pc, #140]	@ (8004244 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80041b6:	4020      	ands	r0, r4
 80041b8:	680c      	ldr	r4, [r1, #0]
 80041ba:	6889      	ldr	r1, [r1, #8]
 80041bc:	4321      	orrs	r1, r4
 80041be:	4308      	orrs	r0, r1
 80041c0:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041c2:	2000      	movs	r0, #0
 80041c4:	e029      	b.n	800421a <HAL_ADCEx_MultiModeConfigChannel+0x122>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80041c6:	6891      	ldr	r1, [r2, #8]
 80041c8:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 80041cc:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041ce:	6819      	ldr	r1, [r3, #0]
 80041d0:	4c18      	ldr	r4, [pc, #96]	@ (8004234 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80041d2:	4819      	ldr	r0, [pc, #100]	@ (8004238 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80041d4:	4281      	cmp	r1, r0
 80041d6:	bf18      	it	ne
 80041d8:	42a1      	cmpne	r1, r4
 80041da:	d10e      	bne.n	80041fa <HAL_ADCEx_MultiModeConfigChannel+0x102>
 80041dc:	68a0      	ldr	r0, [r4, #8]
 80041de:	f010 0001 	ands.w	r0, r0, #1
 80041e2:	d000      	beq.n	80041e6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80041e4:	2001      	movs	r0, #1
 80041e6:	4914      	ldr	r1, [pc, #80]	@ (8004238 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80041e8:	6889      	ldr	r1, [r1, #8]
 80041ea:	f011 0101 	ands.w	r1, r1, #1
 80041ee:	d000      	beq.n	80041f2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80041f0:	2101      	movs	r1, #1
 80041f2:	4301      	orrs	r1, r0
 80041f4:	d006      	beq.n	8004204 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041f6:	2000      	movs	r0, #0
 80041f8:	e00f      	b.n	800421a <HAL_ADCEx_MultiModeConfigChannel+0x122>
 80041fa:	4911      	ldr	r1, [pc, #68]	@ (8004240 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80041fc:	6889      	ldr	r1, [r1, #8]
 80041fe:	f011 0f01 	tst.w	r1, #1
 8004202:	d112      	bne.n	800422a <HAL_ADCEx_MultiModeConfigChannel+0x132>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004204:	6890      	ldr	r0, [r2, #8]
 8004206:	490f      	ldr	r1, [pc, #60]	@ (8004244 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004208:	4001      	ands	r1, r0
 800420a:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800420c:	2000      	movs	r0, #0
 800420e:	e004      	b.n	800421a <HAL_ADCEx_MultiModeConfigChannel+0x122>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004210:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004212:	f042 0220 	orr.w	r2, r2, #32
 8004216:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004218:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8004220:	b01a      	add	sp, #104	@ 0x68
 8004222:	bc30      	pop	{r4, r5}
 8004224:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004226:	2000      	movs	r0, #0
 8004228:	e7f7      	b.n	800421a <HAL_ADCEx_MultiModeConfigChannel+0x122>
 800422a:	2000      	movs	r0, #0
 800422c:	e7f5      	b.n	800421a <HAL_ADCEx_MultiModeConfigChannel+0x122>
  __HAL_LOCK(hadc);
 800422e:	2002      	movs	r0, #2
}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40022000 	.word	0x40022000
 8004238:	40022100 	.word	0x40022100
 800423c:	58026300 	.word	0x58026300
 8004240:	58026000 	.word	0x58026000
 8004244:	fffff0e0 	.word	0xfffff0e0

08004248 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8004248:	2800      	cmp	r0, #0
 800424a:	db07      	blt.n	800425c <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800424c:	f000 021f 	and.w	r2, r0, #31
 8004250:	0940      	lsrs	r0, r0, #5
 8004252:	2301      	movs	r3, #1
 8004254:	4093      	lsls	r3, r2
 8004256:	4a02      	ldr	r2, [pc, #8]	@ (8004260 <__NVIC_EnableIRQ+0x18>)
 8004258:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	e000e100 	.word	0xe000e100

08004264 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8004264:	2800      	cmp	r0, #0
 8004266:	db04      	blt.n	8004272 <__NVIC_SetPriority+0xe>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004268:	0109      	lsls	r1, r1, #4
 800426a:	b2c9      	uxtb	r1, r1
 800426c:	4b04      	ldr	r3, [pc, #16]	@ (8004280 <__NVIC_SetPriority+0x1c>)
 800426e:	5419      	strb	r1, [r3, r0]
 8004270:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004272:	f000 000f 	and.w	r0, r0, #15
 8004276:	0109      	lsls	r1, r1, #4
 8004278:	b2c9      	uxtb	r1, r1
 800427a:	4b02      	ldr	r3, [pc, #8]	@ (8004284 <__NVIC_SetPriority+0x20>)
 800427c:	5419      	strb	r1, [r3, r0]
  }
}
 800427e:	4770      	bx	lr
 8004280:	e000e400 	.word	0xe000e400
 8004284:	e000ed14 	.word	0xe000ed14

08004288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004288:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800428a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800428e:	f1c0 0c07 	rsb	ip, r0, #7
 8004292:	f1bc 0f04 	cmp.w	ip, #4
 8004296:	bf28      	it	cs
 8004298:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800429c:	1d03      	adds	r3, r0, #4
 800429e:	2b06      	cmp	r3, #6
 80042a0:	d90f      	bls.n	80042c2 <NVIC_EncodePriority+0x3a>
 80042a2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a4:	f04f 3eff 	mov.w	lr, #4294967295
 80042a8:	fa0e f00c 	lsl.w	r0, lr, ip
 80042ac:	ea21 0100 	bic.w	r1, r1, r0
 80042b0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042b2:	fa0e fe03 	lsl.w	lr, lr, r3
 80042b6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80042ba:	ea41 0002 	orr.w	r0, r1, r2
 80042be:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042c2:	2300      	movs	r3, #0
 80042c4:	e7ee      	b.n	80042a4 <NVIC_EncodePriority+0x1c>
	...

080042c8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042c8:	4906      	ldr	r1, [pc, #24]	@ (80042e4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80042ca:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042cc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80042d0:	041b      	lsls	r3, r3, #16
 80042d2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042d4:	0200      	lsls	r0, r0, #8
 80042d6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042da:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80042dc:	4a02      	ldr	r2, [pc, #8]	@ (80042e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80042de:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80042e0:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80042e2:	4770      	bx	lr
 80042e4:	e000ed00 	.word	0xe000ed00
 80042e8:	05fa0000 	.word	0x05fa0000

080042ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042ec:	b510      	push	{r4, lr}
 80042ee:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042f0:	4b05      	ldr	r3, [pc, #20]	@ (8004308 <HAL_NVIC_SetPriority+0x1c>)
 80042f2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042f4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80042f8:	f7ff ffc6 	bl	8004288 <NVIC_EncodePriority>
 80042fc:	4601      	mov	r1, r0
 80042fe:	4620      	mov	r0, r4
 8004300:	f7ff ffb0 	bl	8004264 <__NVIC_SetPriority>
}
 8004304:	bd10      	pop	{r4, pc}
 8004306:	bf00      	nop
 8004308:	e000ed00 	.word	0xe000ed00

0800430c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800430c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800430e:	f7ff ff9b 	bl	8004248 <__NVIC_EnableIRQ>
}
 8004312:	bd08      	pop	{r3, pc}

08004314 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004314:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004316:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004318:	6804      	ldr	r4, [r0, #0]
 800431a:	4e66      	ldr	r6, [pc, #408]	@ (80044b4 <DMA_SetConfig+0x1a0>)
 800431c:	4d66      	ldr	r5, [pc, #408]	@ (80044b8 <DMA_SetConfig+0x1a4>)
 800431e:	42ac      	cmp	r4, r5
 8004320:	bf18      	it	ne
 8004322:	42b4      	cmpne	r4, r6
 8004324:	d042      	beq.n	80043ac <DMA_SetConfig+0x98>
 8004326:	3518      	adds	r5, #24
 8004328:	42ac      	cmp	r4, r5
 800432a:	d03f      	beq.n	80043ac <DMA_SetConfig+0x98>
 800432c:	3518      	adds	r5, #24
 800432e:	42ac      	cmp	r4, r5
 8004330:	d03c      	beq.n	80043ac <DMA_SetConfig+0x98>
 8004332:	3518      	adds	r5, #24
 8004334:	42ac      	cmp	r4, r5
 8004336:	d039      	beq.n	80043ac <DMA_SetConfig+0x98>
 8004338:	3518      	adds	r5, #24
 800433a:	42ac      	cmp	r4, r5
 800433c:	d036      	beq.n	80043ac <DMA_SetConfig+0x98>
 800433e:	3518      	adds	r5, #24
 8004340:	42ac      	cmp	r4, r5
 8004342:	d033      	beq.n	80043ac <DMA_SetConfig+0x98>
 8004344:	3518      	adds	r5, #24
 8004346:	42ac      	cmp	r4, r5
 8004348:	d030      	beq.n	80043ac <DMA_SetConfig+0x98>
 800434a:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 800434e:	42ac      	cmp	r4, r5
 8004350:	d02c      	beq.n	80043ac <DMA_SetConfig+0x98>
 8004352:	3518      	adds	r5, #24
 8004354:	42ac      	cmp	r4, r5
 8004356:	d029      	beq.n	80043ac <DMA_SetConfig+0x98>
 8004358:	3518      	adds	r5, #24
 800435a:	42ac      	cmp	r4, r5
 800435c:	d026      	beq.n	80043ac <DMA_SetConfig+0x98>
 800435e:	3518      	adds	r5, #24
 8004360:	42ac      	cmp	r4, r5
 8004362:	d023      	beq.n	80043ac <DMA_SetConfig+0x98>
 8004364:	3518      	adds	r5, #24
 8004366:	42ac      	cmp	r4, r5
 8004368:	d020      	beq.n	80043ac <DMA_SetConfig+0x98>
 800436a:	3518      	adds	r5, #24
 800436c:	42ac      	cmp	r4, r5
 800436e:	d01d      	beq.n	80043ac <DMA_SetConfig+0x98>
 8004370:	3518      	adds	r5, #24
 8004372:	42ac      	cmp	r4, r5
 8004374:	d01a      	beq.n	80043ac <DMA_SetConfig+0x98>
 8004376:	3518      	adds	r5, #24
 8004378:	42ac      	cmp	r4, r5
 800437a:	d017      	beq.n	80043ac <DMA_SetConfig+0x98>
 800437c:	4d4f      	ldr	r5, [pc, #316]	@ (80044bc <DMA_SetConfig+0x1a8>)
 800437e:	42ac      	cmp	r4, r5
 8004380:	d014      	beq.n	80043ac <DMA_SetConfig+0x98>
 8004382:	3514      	adds	r5, #20
 8004384:	42ac      	cmp	r4, r5
 8004386:	d011      	beq.n	80043ac <DMA_SetConfig+0x98>
 8004388:	3514      	adds	r5, #20
 800438a:	42ac      	cmp	r4, r5
 800438c:	d00e      	beq.n	80043ac <DMA_SetConfig+0x98>
 800438e:	3514      	adds	r5, #20
 8004390:	42ac      	cmp	r4, r5
 8004392:	d00b      	beq.n	80043ac <DMA_SetConfig+0x98>
 8004394:	3514      	adds	r5, #20
 8004396:	42ac      	cmp	r4, r5
 8004398:	d008      	beq.n	80043ac <DMA_SetConfig+0x98>
 800439a:	3514      	adds	r5, #20
 800439c:	42ac      	cmp	r4, r5
 800439e:	d005      	beq.n	80043ac <DMA_SetConfig+0x98>
 80043a0:	3514      	adds	r5, #20
 80043a2:	42ac      	cmp	r4, r5
 80043a4:	d002      	beq.n	80043ac <DMA_SetConfig+0x98>
 80043a6:	3514      	adds	r5, #20
 80043a8:	42ac      	cmp	r4, r5
 80043aa:	d107      	bne.n	80043bc <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043ac:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 80043ae:	6e85      	ldr	r5, [r0, #104]	@ 0x68
 80043b0:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80043b2:	6ec4      	ldr	r4, [r0, #108]	@ 0x6c
 80043b4:	b114      	cbz	r4, 80043bc <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043b6:	6f04      	ldr	r4, [r0, #112]	@ 0x70
 80043b8:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 80043ba:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043bc:	6804      	ldr	r4, [r0, #0]
 80043be:	4e3d      	ldr	r6, [pc, #244]	@ (80044b4 <DMA_SetConfig+0x1a0>)
 80043c0:	4d3d      	ldr	r5, [pc, #244]	@ (80044b8 <DMA_SetConfig+0x1a4>)
 80043c2:	42ac      	cmp	r4, r5
 80043c4:	bf18      	it	ne
 80043c6:	42b4      	cmpne	r4, r6
 80043c8:	d052      	beq.n	8004470 <DMA_SetConfig+0x15c>
 80043ca:	3518      	adds	r5, #24
 80043cc:	42ac      	cmp	r4, r5
 80043ce:	d04f      	beq.n	8004470 <DMA_SetConfig+0x15c>
 80043d0:	3518      	adds	r5, #24
 80043d2:	42ac      	cmp	r4, r5
 80043d4:	d04c      	beq.n	8004470 <DMA_SetConfig+0x15c>
 80043d6:	3518      	adds	r5, #24
 80043d8:	42ac      	cmp	r4, r5
 80043da:	d049      	beq.n	8004470 <DMA_SetConfig+0x15c>
 80043dc:	3518      	adds	r5, #24
 80043de:	42ac      	cmp	r4, r5
 80043e0:	d046      	beq.n	8004470 <DMA_SetConfig+0x15c>
 80043e2:	3518      	adds	r5, #24
 80043e4:	42ac      	cmp	r4, r5
 80043e6:	d043      	beq.n	8004470 <DMA_SetConfig+0x15c>
 80043e8:	3518      	adds	r5, #24
 80043ea:	42ac      	cmp	r4, r5
 80043ec:	d040      	beq.n	8004470 <DMA_SetConfig+0x15c>
 80043ee:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 80043f2:	42ac      	cmp	r4, r5
 80043f4:	d03c      	beq.n	8004470 <DMA_SetConfig+0x15c>
 80043f6:	3518      	adds	r5, #24
 80043f8:	42ac      	cmp	r4, r5
 80043fa:	d039      	beq.n	8004470 <DMA_SetConfig+0x15c>
 80043fc:	3518      	adds	r5, #24
 80043fe:	42ac      	cmp	r4, r5
 8004400:	d036      	beq.n	8004470 <DMA_SetConfig+0x15c>
 8004402:	3518      	adds	r5, #24
 8004404:	42ac      	cmp	r4, r5
 8004406:	d033      	beq.n	8004470 <DMA_SetConfig+0x15c>
 8004408:	3518      	adds	r5, #24
 800440a:	42ac      	cmp	r4, r5
 800440c:	d030      	beq.n	8004470 <DMA_SetConfig+0x15c>
 800440e:	3518      	adds	r5, #24
 8004410:	42ac      	cmp	r4, r5
 8004412:	d02d      	beq.n	8004470 <DMA_SetConfig+0x15c>
 8004414:	3518      	adds	r5, #24
 8004416:	42ac      	cmp	r4, r5
 8004418:	d02a      	beq.n	8004470 <DMA_SetConfig+0x15c>
 800441a:	3518      	adds	r5, #24
 800441c:	42ac      	cmp	r4, r5
 800441e:	d027      	beq.n	8004470 <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004420:	4e26      	ldr	r6, [pc, #152]	@ (80044bc <DMA_SetConfig+0x1a8>)
 8004422:	4d27      	ldr	r5, [pc, #156]	@ (80044c0 <DMA_SetConfig+0x1ac>)
 8004424:	42ac      	cmp	r4, r5
 8004426:	bf18      	it	ne
 8004428:	42b4      	cmpne	r4, r6
 800442a:	d011      	beq.n	8004450 <DMA_SetConfig+0x13c>
 800442c:	4d25      	ldr	r5, [pc, #148]	@ (80044c4 <DMA_SetConfig+0x1b0>)
 800442e:	42ac      	cmp	r4, r5
 8004430:	d00e      	beq.n	8004450 <DMA_SetConfig+0x13c>
 8004432:	3514      	adds	r5, #20
 8004434:	42ac      	cmp	r4, r5
 8004436:	d00b      	beq.n	8004450 <DMA_SetConfig+0x13c>
 8004438:	3514      	adds	r5, #20
 800443a:	42ac      	cmp	r4, r5
 800443c:	d008      	beq.n	8004450 <DMA_SetConfig+0x13c>
 800443e:	3514      	adds	r5, #20
 8004440:	42ac      	cmp	r4, r5
 8004442:	d005      	beq.n	8004450 <DMA_SetConfig+0x13c>
 8004444:	3514      	adds	r5, #20
 8004446:	42ac      	cmp	r4, r5
 8004448:	d002      	beq.n	8004450 <DMA_SetConfig+0x13c>
 800444a:	3514      	adds	r5, #20
 800444c:	42ac      	cmp	r4, r5
 800444e:	d124      	bne.n	800449a <DMA_SetConfig+0x186>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004450:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 8004452:	f004 051f 	and.w	r5, r4, #31
 8004456:	2401      	movs	r4, #1
 8004458:	40ac      	lsls	r4, r5
 800445a:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800445c:	6804      	ldr	r4, [r0, #0]
 800445e:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004460:	6883      	ldr	r3, [r0, #8]
 8004462:	2b40      	cmp	r3, #64	@ 0x40
 8004464:	d020      	beq.n	80044a8 <DMA_SetConfig+0x194>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004466:	6803      	ldr	r3, [r0, #0]
 8004468:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800446a:	6803      	ldr	r3, [r0, #0]
 800446c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800446e:	e014      	b.n	800449a <DMA_SetConfig+0x186>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004470:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 8004472:	f004 0c1f 	and.w	ip, r4, #31
 8004476:	243f      	movs	r4, #63	@ 0x3f
 8004478:	fa04 f40c 	lsl.w	r4, r4, ip
 800447c:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800447e:	6805      	ldr	r5, [r0, #0]
 8004480:	682c      	ldr	r4, [r5, #0]
 8004482:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8004486:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004488:	6804      	ldr	r4, [r0, #0]
 800448a:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800448c:	6883      	ldr	r3, [r0, #8]
 800448e:	2b40      	cmp	r3, #64	@ 0x40
 8004490:	d005      	beq.n	800449e <DMA_SetConfig+0x18a>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004492:	6803      	ldr	r3, [r0, #0]
 8004494:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004496:	6803      	ldr	r3, [r0, #0]
 8004498:	60da      	str	r2, [r3, #12]
}
 800449a:	bcf0      	pop	{r4, r5, r6, r7}
 800449c:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800449e:	6803      	ldr	r3, [r0, #0]
 80044a0:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80044a2:	6803      	ldr	r3, [r0, #0]
 80044a4:	60d9      	str	r1, [r3, #12]
 80044a6:	e7f8      	b.n	800449a <DMA_SetConfig+0x186>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80044a8:	6803      	ldr	r3, [r0, #0]
 80044aa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80044ac:	6803      	ldr	r3, [r0, #0]
 80044ae:	60d9      	str	r1, [r3, #12]
 80044b0:	e7f3      	b.n	800449a <DMA_SetConfig+0x186>
 80044b2:	bf00      	nop
 80044b4:	40020010 	.word	0x40020010
 80044b8:	40020028 	.word	0x40020028
 80044bc:	58025408 	.word	0x58025408
 80044c0:	5802541c 	.word	0x5802541c
 80044c4:	58025430 	.word	0x58025430

080044c8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044c8:	6803      	ldr	r3, [r0, #0]
 80044ca:	4927      	ldr	r1, [pc, #156]	@ (8004568 <DMA_CalcBaseAndBitshift+0xa0>)
 80044cc:	4a27      	ldr	r2, [pc, #156]	@ (800456c <DMA_CalcBaseAndBitshift+0xa4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	bf18      	it	ne
 80044d2:	428b      	cmpne	r3, r1
 80044d4:	d02f      	beq.n	8004536 <DMA_CalcBaseAndBitshift+0x6e>
 80044d6:	3218      	adds	r2, #24
 80044d8:	4293      	cmp	r3, r2
 80044da:	d02c      	beq.n	8004536 <DMA_CalcBaseAndBitshift+0x6e>
 80044dc:	3218      	adds	r2, #24
 80044de:	4293      	cmp	r3, r2
 80044e0:	d029      	beq.n	8004536 <DMA_CalcBaseAndBitshift+0x6e>
 80044e2:	3218      	adds	r2, #24
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d026      	beq.n	8004536 <DMA_CalcBaseAndBitshift+0x6e>
 80044e8:	3218      	adds	r2, #24
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d023      	beq.n	8004536 <DMA_CalcBaseAndBitshift+0x6e>
 80044ee:	3218      	adds	r2, #24
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d020      	beq.n	8004536 <DMA_CalcBaseAndBitshift+0x6e>
 80044f4:	3218      	adds	r2, #24
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d01d      	beq.n	8004536 <DMA_CalcBaseAndBitshift+0x6e>
 80044fa:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80044fe:	4293      	cmp	r3, r2
 8004500:	d019      	beq.n	8004536 <DMA_CalcBaseAndBitshift+0x6e>
 8004502:	3218      	adds	r2, #24
 8004504:	4293      	cmp	r3, r2
 8004506:	d016      	beq.n	8004536 <DMA_CalcBaseAndBitshift+0x6e>
 8004508:	3218      	adds	r2, #24
 800450a:	4293      	cmp	r3, r2
 800450c:	d013      	beq.n	8004536 <DMA_CalcBaseAndBitshift+0x6e>
 800450e:	3218      	adds	r2, #24
 8004510:	4293      	cmp	r3, r2
 8004512:	d010      	beq.n	8004536 <DMA_CalcBaseAndBitshift+0x6e>
 8004514:	3218      	adds	r2, #24
 8004516:	4293      	cmp	r3, r2
 8004518:	d00d      	beq.n	8004536 <DMA_CalcBaseAndBitshift+0x6e>
 800451a:	3218      	adds	r2, #24
 800451c:	4293      	cmp	r3, r2
 800451e:	d00a      	beq.n	8004536 <DMA_CalcBaseAndBitshift+0x6e>
 8004520:	3218      	adds	r2, #24
 8004522:	4293      	cmp	r3, r2
 8004524:	d007      	beq.n	8004536 <DMA_CalcBaseAndBitshift+0x6e>
 8004526:	3218      	adds	r2, #24
 8004528:	4293      	cmp	r3, r2
 800452a:	d004      	beq.n	8004536 <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800452c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004530:	6583      	str	r3, [r0, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
}
 8004532:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8004534:	4770      	bx	lr
{
 8004536:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004538:	b2d9      	uxtb	r1, r3
 800453a:	3910      	subs	r1, #16
 800453c:	4a0c      	ldr	r2, [pc, #48]	@ (8004570 <DMA_CalcBaseAndBitshift+0xa8>)
 800453e:	fba2 4201 	umull	r4, r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004542:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004546:	4c0b      	ldr	r4, [pc, #44]	@ (8004574 <DMA_CalcBaseAndBitshift+0xac>)
 8004548:	5ca2      	ldrb	r2, [r4, r2]
 800454a:	65c2      	str	r2, [r0, #92]	@ 0x5c
    if (stream_number > 3U)
 800454c:	295f      	cmp	r1, #95	@ 0x5f
 800454e:	d907      	bls.n	8004560 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004550:	4a09      	ldr	r2, [pc, #36]	@ (8004578 <DMA_CalcBaseAndBitshift+0xb0>)
 8004552:	401a      	ands	r2, r3
 8004554:	3204      	adds	r2, #4
 8004556:	6582      	str	r2, [r0, #88]	@ 0x58
}
 8004558:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 800455a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800455e:	4770      	bx	lr
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004560:	4a05      	ldr	r2, [pc, #20]	@ (8004578 <DMA_CalcBaseAndBitshift+0xb0>)
 8004562:	401a      	ands	r2, r3
 8004564:	6582      	str	r2, [r0, #88]	@ 0x58
 8004566:	e7f7      	b.n	8004558 <DMA_CalcBaseAndBitshift+0x90>
 8004568:	40020010 	.word	0x40020010
 800456c:	40020028 	.word	0x40020028
 8004570:	aaaaaaab 	.word	0xaaaaaaab
 8004574:	0801c7e0 	.word	0x0801c7e0
 8004578:	fffffc00 	.word	0xfffffc00

0800457c <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800457c:	6983      	ldr	r3, [r0, #24]
 800457e:	b99b      	cbnz	r3, 80045a8 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 8004580:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004582:	2b01      	cmp	r3, #1
 8004584:	d00a      	beq.n	800459c <DMA_CheckFifoParam+0x20>
 8004586:	2b02      	cmp	r3, #2
 8004588:	d002      	beq.n	8004590 <DMA_CheckFifoParam+0x14>
 800458a:	b10b      	cbz	r3, 8004590 <DMA_CheckFifoParam+0x14>
 800458c:	2000      	movs	r0, #0
 800458e:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004590:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004592:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8004596:	d12a      	bne.n	80045ee <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8004598:	2000      	movs	r0, #0
 800459a:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800459c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800459e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045a2:	d026      	beq.n	80045f2 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 80045a4:	2000      	movs	r0, #0
 80045a6:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ac:	d00a      	beq.n	80045c4 <DMA_CheckFifoParam+0x48>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80045ae:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d926      	bls.n	8004602 <DMA_CheckFifoParam+0x86>
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d126      	bne.n	8004606 <DMA_CheckFifoParam+0x8a>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045b8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80045ba:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80045be:	d124      	bne.n	800460a <DMA_CheckFifoParam+0x8e>
  HAL_StatusTypeDef status = HAL_OK;
 80045c0:	2000      	movs	r0, #0
 80045c2:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 80045c4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d803      	bhi.n	80045d2 <DMA_CheckFifoParam+0x56>
 80045ca:	e8df f003 	tbb	[pc, r3]
 80045ce:	0414      	.short	0x0414
 80045d0:	0a14      	.short	0x0a14
 80045d2:	2000      	movs	r0, #0
 80045d4:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045d6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80045d8:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80045dc:	d10d      	bne.n	80045fa <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80045de:	2000      	movs	r0, #0
 80045e0:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045e2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80045e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045e8:	d009      	beq.n	80045fe <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 80045ea:	2000      	movs	r0, #0
 80045ec:	4770      	bx	lr
          status = HAL_ERROR;
 80045ee:	2001      	movs	r0, #1
 80045f0:	4770      	bx	lr
          status = HAL_ERROR;
 80045f2:	2001      	movs	r0, #1
 80045f4:	4770      	bx	lr
        status = HAL_ERROR;
 80045f6:	2001      	movs	r0, #1
 80045f8:	4770      	bx	lr
          status = HAL_ERROR;
 80045fa:	2001      	movs	r0, #1
 80045fc:	4770      	bx	lr
          status = HAL_ERROR;
 80045fe:	2001      	movs	r0, #1
 8004600:	4770      	bx	lr
        status = HAL_ERROR;
 8004602:	2001      	movs	r0, #1
 8004604:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8004606:	2000      	movs	r0, #0
 8004608:	4770      	bx	lr
        {
          status = HAL_ERROR;
 800460a:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 800460c:	4770      	bx	lr
	...

08004610 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004610:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004612:	4921      	ldr	r1, [pc, #132]	@ (8004698 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004614:	4a21      	ldr	r2, [pc, #132]	@ (800469c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	bf18      	it	ne
 800461a:	428b      	cmpne	r3, r1
 800461c:	d027      	beq.n	800466e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800461e:	3214      	adds	r2, #20
 8004620:	4293      	cmp	r3, r2
 8004622:	d024      	beq.n	800466e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004624:	3214      	adds	r2, #20
 8004626:	4293      	cmp	r3, r2
 8004628:	d021      	beq.n	800466e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800462a:	3214      	adds	r2, #20
 800462c:	4293      	cmp	r3, r2
 800462e:	d01e      	beq.n	800466e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004630:	3214      	adds	r2, #20
 8004632:	4293      	cmp	r3, r2
 8004634:	d01b      	beq.n	800466e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004636:	3214      	adds	r2, #20
 8004638:	4293      	cmp	r3, r2
 800463a:	d018      	beq.n	800466e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800463c:	3214      	adds	r2, #20
 800463e:	4293      	cmp	r3, r2
 8004640:	d015      	beq.n	800466e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004642:	b2da      	uxtb	r2, r3
 8004644:	3a10      	subs	r2, #16
 8004646:	4916      	ldr	r1, [pc, #88]	@ (80046a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8004648:	fba1 1202 	umull	r1, r2, r1, r2
 800464c:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800464e:	4915      	ldr	r1, [pc, #84]	@ (80046a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 8004650:	4419      	add	r1, r3
 8004652:	29a8      	cmp	r1, #168	@ 0xa8
 8004654:	d91e      	bls.n	8004694 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004656:	4b14      	ldr	r3, [pc, #80]	@ (80046a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 8004658:	4413      	add	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	6603      	str	r3, [r0, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800465e:	4b13      	ldr	r3, [pc, #76]	@ (80046ac <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 8004660:	6643      	str	r3, [r0, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004662:	f002 021f 	and.w	r2, r2, #31
 8004666:	2301      	movs	r3, #1
 8004668:	4093      	lsls	r3, r2
 800466a:	6683      	str	r3, [r0, #104]	@ 0x68
  }
}
 800466c:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800466e:	b2db      	uxtb	r3, r3
 8004670:	3b08      	subs	r3, #8
 8004672:	4a0f      	ldr	r2, [pc, #60]	@ (80046b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8004674:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004678:	4a0e      	ldr	r2, [pc, #56]	@ (80046b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 800467a:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 800467e:	0092      	lsls	r2, r2, #2
 8004680:	6602      	str	r2, [r0, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004682:	4a0d      	ldr	r2, [pc, #52]	@ (80046b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8004684:	6642      	str	r2, [r0, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004686:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800468a:	2201      	movs	r2, #1
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	6683      	str	r3, [r0, #104]	@ 0x68
 8004692:	4770      	bx	lr
      stream_number += 8U;
 8004694:	3208      	adds	r2, #8
 8004696:	e7de      	b.n	8004656 <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 8004698:	58025408 	.word	0x58025408
 800469c:	5802541c 	.word	0x5802541c
 80046a0:	aaaaaaab 	.word	0xaaaaaaab
 80046a4:	bffdfbf0 	.word	0xbffdfbf0
 80046a8:	10008200 	.word	0x10008200
 80046ac:	40020880 	.word	0x40020880
 80046b0:	cccccccd 	.word	0xcccccccd
 80046b4:	16009600 	.word	0x16009600
 80046b8:	58025880 	.word	0x58025880

080046bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80046bc:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80046be:	1e4a      	subs	r2, r1, #1
 80046c0:	2a07      	cmp	r2, #7
 80046c2:	d82b      	bhi.n	800471c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>
{
 80046c4:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80046c6:	6803      	ldr	r3, [r0, #0]
 80046c8:	4d15      	ldr	r5, [pc, #84]	@ (8004720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 80046ca:	4c16      	ldr	r4, [pc, #88]	@ (8004724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 80046cc:	42a3      	cmp	r3, r4
 80046ce:	bf18      	it	ne
 80046d0:	42ab      	cmpne	r3, r5
 80046d2:	d018      	beq.n	8004706 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80046d4:	3414      	adds	r4, #20
 80046d6:	42a3      	cmp	r3, r4
 80046d8:	d015      	beq.n	8004706 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80046da:	3414      	adds	r4, #20
 80046dc:	42a3      	cmp	r3, r4
 80046de:	d012      	beq.n	8004706 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80046e0:	3414      	adds	r4, #20
 80046e2:	42a3      	cmp	r3, r4
 80046e4:	d00f      	beq.n	8004706 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80046e6:	3414      	adds	r4, #20
 80046e8:	42a3      	cmp	r3, r4
 80046ea:	d00c      	beq.n	8004706 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80046ec:	3414      	adds	r4, #20
 80046ee:	42a3      	cmp	r3, r4
 80046f0:	d009      	beq.n	8004706 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80046f2:	3414      	adds	r4, #20
 80046f4:	42a3      	cmp	r3, r4
 80046f6:	d006      	beq.n	8004706 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80046f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 80046fa:	440b      	add	r3, r1
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	66c3      	str	r3, [r0, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004700:	4b0a      	ldr	r3, [pc, #40]	@ (800472c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 8004702:	6703      	str	r3, [r0, #112]	@ 0x70
 8004704:	e005      	b.n	8004712 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004706:	4b0a      	ldr	r3, [pc, #40]	@ (8004730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 8004708:	440b      	add	r3, r1
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	66c3      	str	r3, [r0, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800470e:	4b09      	ldr	r3, [pc, #36]	@ (8004734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 8004710:	6703      	str	r3, [r0, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004712:	2301      	movs	r3, #1
 8004714:	4093      	lsls	r3, r2
 8004716:	6743      	str	r3, [r0, #116]	@ 0x74
  }
}
 8004718:	bc30      	pop	{r4, r5}
 800471a:	4770      	bx	lr
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	58025408 	.word	0x58025408
 8004724:	5802541c 	.word	0x5802541c
 8004728:	1000823f 	.word	0x1000823f
 800472c:	40020940 	.word	0x40020940
 8004730:	1600963f 	.word	0x1600963f
 8004734:	58025940 	.word	0x58025940

08004738 <HAL_DMA_Init>:
{
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800473c:	f7fe ffce 	bl	80036dc <HAL_GetTick>
  if(hdma == NULL)
 8004740:	2c00      	cmp	r4, #0
 8004742:	f000 81b6 	beq.w	8004ab2 <HAL_DMA_Init+0x37a>
 8004746:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	4953      	ldr	r1, [pc, #332]	@ (8004898 <HAL_DMA_Init+0x160>)
 800474c:	4a53      	ldr	r2, [pc, #332]	@ (800489c <HAL_DMA_Init+0x164>)
 800474e:	4293      	cmp	r3, r2
 8004750:	bf18      	it	ne
 8004752:	428b      	cmpne	r3, r1
 8004754:	bf0c      	ite	eq
 8004756:	2101      	moveq	r1, #1
 8004758:	2100      	movne	r1, #0
 800475a:	d050      	beq.n	80047fe <HAL_DMA_Init+0xc6>
 800475c:	3218      	adds	r2, #24
 800475e:	4293      	cmp	r3, r2
 8004760:	d04d      	beq.n	80047fe <HAL_DMA_Init+0xc6>
 8004762:	3218      	adds	r2, #24
 8004764:	4293      	cmp	r3, r2
 8004766:	d04a      	beq.n	80047fe <HAL_DMA_Init+0xc6>
 8004768:	3218      	adds	r2, #24
 800476a:	4293      	cmp	r3, r2
 800476c:	d047      	beq.n	80047fe <HAL_DMA_Init+0xc6>
 800476e:	3218      	adds	r2, #24
 8004770:	4293      	cmp	r3, r2
 8004772:	d044      	beq.n	80047fe <HAL_DMA_Init+0xc6>
 8004774:	3218      	adds	r2, #24
 8004776:	4293      	cmp	r3, r2
 8004778:	d041      	beq.n	80047fe <HAL_DMA_Init+0xc6>
 800477a:	3218      	adds	r2, #24
 800477c:	4293      	cmp	r3, r2
 800477e:	d03e      	beq.n	80047fe <HAL_DMA_Init+0xc6>
 8004780:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004784:	4293      	cmp	r3, r2
 8004786:	d03a      	beq.n	80047fe <HAL_DMA_Init+0xc6>
 8004788:	3218      	adds	r2, #24
 800478a:	4293      	cmp	r3, r2
 800478c:	d037      	beq.n	80047fe <HAL_DMA_Init+0xc6>
 800478e:	3218      	adds	r2, #24
 8004790:	4293      	cmp	r3, r2
 8004792:	d034      	beq.n	80047fe <HAL_DMA_Init+0xc6>
 8004794:	3218      	adds	r2, #24
 8004796:	4293      	cmp	r3, r2
 8004798:	d031      	beq.n	80047fe <HAL_DMA_Init+0xc6>
 800479a:	3218      	adds	r2, #24
 800479c:	4293      	cmp	r3, r2
 800479e:	d02e      	beq.n	80047fe <HAL_DMA_Init+0xc6>
 80047a0:	3218      	adds	r2, #24
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d02b      	beq.n	80047fe <HAL_DMA_Init+0xc6>
 80047a6:	3218      	adds	r2, #24
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d028      	beq.n	80047fe <HAL_DMA_Init+0xc6>
 80047ac:	3218      	adds	r2, #24
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d025      	beq.n	80047fe <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80047b2:	493b      	ldr	r1, [pc, #236]	@ (80048a0 <HAL_DMA_Init+0x168>)
 80047b4:	4a3b      	ldr	r2, [pc, #236]	@ (80048a4 <HAL_DMA_Init+0x16c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	bf18      	it	ne
 80047ba:	428b      	cmpne	r3, r1
 80047bc:	f000 8131 	beq.w	8004a22 <HAL_DMA_Init+0x2ea>
 80047c0:	4a39      	ldr	r2, [pc, #228]	@ (80048a8 <HAL_DMA_Init+0x170>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	f000 812d 	beq.w	8004a22 <HAL_DMA_Init+0x2ea>
 80047c8:	3214      	adds	r2, #20
 80047ca:	4293      	cmp	r3, r2
 80047cc:	f000 8129 	beq.w	8004a22 <HAL_DMA_Init+0x2ea>
 80047d0:	3214      	adds	r2, #20
 80047d2:	4293      	cmp	r3, r2
 80047d4:	f000 8125 	beq.w	8004a22 <HAL_DMA_Init+0x2ea>
 80047d8:	3214      	adds	r2, #20
 80047da:	4293      	cmp	r3, r2
 80047dc:	f000 8121 	beq.w	8004a22 <HAL_DMA_Init+0x2ea>
 80047e0:	3214      	adds	r2, #20
 80047e2:	4293      	cmp	r3, r2
 80047e4:	f000 811d 	beq.w	8004a22 <HAL_DMA_Init+0x2ea>
 80047e8:	3214      	adds	r2, #20
 80047ea:	4293      	cmp	r3, r2
 80047ec:	f000 8119 	beq.w	8004a22 <HAL_DMA_Init+0x2ea>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047f0:	2340      	movs	r3, #64	@ 0x40
 80047f2:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80047f4:	2303      	movs	r3, #3
 80047f6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 80047fa:	2001      	movs	r0, #1
 80047fc:	e04a      	b.n	8004894 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80047fe:	2202      	movs	r2, #2
 8004800:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004804:	2200      	movs	r2, #0
 8004806:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 800480a:	bb79      	cbnz	r1, 800486c <HAL_DMA_Init+0x134>
 800480c:	4a27      	ldr	r2, [pc, #156]	@ (80048ac <HAL_DMA_Init+0x174>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d02c      	beq.n	800486c <HAL_DMA_Init+0x134>
 8004812:	3218      	adds	r2, #24
 8004814:	4293      	cmp	r3, r2
 8004816:	d029      	beq.n	800486c <HAL_DMA_Init+0x134>
 8004818:	3218      	adds	r2, #24
 800481a:	4293      	cmp	r3, r2
 800481c:	d026      	beq.n	800486c <HAL_DMA_Init+0x134>
 800481e:	3218      	adds	r2, #24
 8004820:	4293      	cmp	r3, r2
 8004822:	d023      	beq.n	800486c <HAL_DMA_Init+0x134>
 8004824:	3218      	adds	r2, #24
 8004826:	4293      	cmp	r3, r2
 8004828:	d020      	beq.n	800486c <HAL_DMA_Init+0x134>
 800482a:	3218      	adds	r2, #24
 800482c:	4293      	cmp	r3, r2
 800482e:	d01d      	beq.n	800486c <HAL_DMA_Init+0x134>
 8004830:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004834:	4293      	cmp	r3, r2
 8004836:	d019      	beq.n	800486c <HAL_DMA_Init+0x134>
 8004838:	3218      	adds	r2, #24
 800483a:	4293      	cmp	r3, r2
 800483c:	d016      	beq.n	800486c <HAL_DMA_Init+0x134>
 800483e:	3218      	adds	r2, #24
 8004840:	4293      	cmp	r3, r2
 8004842:	d013      	beq.n	800486c <HAL_DMA_Init+0x134>
 8004844:	3218      	adds	r2, #24
 8004846:	4293      	cmp	r3, r2
 8004848:	d010      	beq.n	800486c <HAL_DMA_Init+0x134>
 800484a:	3218      	adds	r2, #24
 800484c:	4293      	cmp	r3, r2
 800484e:	d00d      	beq.n	800486c <HAL_DMA_Init+0x134>
 8004850:	3218      	adds	r2, #24
 8004852:	4293      	cmp	r3, r2
 8004854:	d00a      	beq.n	800486c <HAL_DMA_Init+0x134>
 8004856:	3218      	adds	r2, #24
 8004858:	4293      	cmp	r3, r2
 800485a:	d007      	beq.n	800486c <HAL_DMA_Init+0x134>
 800485c:	3218      	adds	r2, #24
 800485e:	4293      	cmp	r3, r2
 8004860:	d004      	beq.n	800486c <HAL_DMA_Init+0x134>
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	f022 0201 	bic.w	r2, r2, #1
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e003      	b.n	8004874 <HAL_DMA_Init+0x13c>
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	f022 0201 	bic.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	f012 0f01 	tst.w	r2, #1
 800487c:	d018      	beq.n	80048b0 <HAL_DMA_Init+0x178>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800487e:	f7fe ff2d 	bl	80036dc <HAL_GetTick>
 8004882:	1b43      	subs	r3, r0, r5
 8004884:	2b05      	cmp	r3, #5
 8004886:	d9f5      	bls.n	8004874 <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004888:	2320      	movs	r3, #32
 800488a:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800488c:	2303      	movs	r3, #3
 800488e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        return HAL_ERROR;
 8004892:	2001      	movs	r0, #1
}
 8004894:	bd70      	pop	{r4, r5, r6, pc}
 8004896:	bf00      	nop
 8004898:	40020010 	.word	0x40020010
 800489c:	40020028 	.word	0x40020028
 80048a0:	58025408 	.word	0x58025408
 80048a4:	5802541c 	.word	0x5802541c
 80048a8:	58025430 	.word	0x58025430
 80048ac:	40020040 	.word	0x40020040
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80048b0:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048b2:	4981      	ldr	r1, [pc, #516]	@ (8004ab8 <HAL_DMA_Init+0x380>)
 80048b4:	4011      	ands	r1, r2
    registerValue |=  hdma->Init.Direction           |
 80048b6:	68a2      	ldr	r2, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048b8:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 80048ba:	4302      	orrs	r2, r0
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048bc:	6920      	ldr	r0, [r4, #16]
 80048be:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048c0:	6960      	ldr	r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048c2:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048c4:	69a0      	ldr	r0, [r4, #24]
 80048c6:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 80048c8:	69e0      	ldr	r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ca:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 80048cc:	6a20      	ldr	r0, [r4, #32]
 80048ce:	4302      	orrs	r2, r0
    registerValue |=  hdma->Init.Direction           |
 80048d0:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048d2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80048d4:	2904      	cmp	r1, #4
 80048d6:	f000 8099 	beq.w	8004a0c <HAL_DMA_Init+0x2d4>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80048da:	4978      	ldr	r1, [pc, #480]	@ (8004abc <HAL_DMA_Init+0x384>)
 80048dc:	6808      	ldr	r0, [r1, #0]
 80048de:	4978      	ldr	r1, [pc, #480]	@ (8004ac0 <HAL_DMA_Init+0x388>)
 80048e0:	4001      	ands	r1, r0
 80048e2:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80048e6:	d311      	bcc.n	800490c <HAL_DMA_Init+0x1d4>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80048e8:	6861      	ldr	r1, [r4, #4]
 80048ea:	f1a1 0529 	sub.w	r5, r1, #41	@ 0x29
 80048ee:	f1a1 003f 	sub.w	r0, r1, #63	@ 0x3f
 80048f2:	2803      	cmp	r0, #3
 80048f4:	bf88      	it	hi
 80048f6:	2d05      	cmphi	r5, #5
 80048f8:	d906      	bls.n	8004908 <HAL_DMA_Init+0x1d0>
 80048fa:	f1a1 0047 	sub.w	r0, r1, #71	@ 0x47
 80048fe:	2801      	cmp	r0, #1
 8004900:	d902      	bls.n	8004908 <HAL_DMA_Init+0x1d0>
 8004902:	394f      	subs	r1, #79	@ 0x4f
 8004904:	2903      	cmp	r1, #3
 8004906:	d801      	bhi.n	800490c <HAL_DMA_Init+0x1d4>
        registerValue |= DMA_SxCR_TRBUFF;
 8004908:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800490c:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800490e:	6826      	ldr	r6, [r4, #0]
 8004910:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004912:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 8004916:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004918:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800491a:	2b04      	cmp	r3, #4
 800491c:	d108      	bne.n	8004930 <HAL_DMA_Init+0x1f8>
      registerValue |= hdma->Init.FIFOThreshold;
 800491e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004920:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004922:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004924:	b123      	cbz	r3, 8004930 <HAL_DMA_Init+0x1f8>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004926:	4620      	mov	r0, r4
 8004928:	f7ff fe28 	bl	800457c <DMA_CheckFifoParam>
 800492c:	2800      	cmp	r0, #0
 800492e:	d172      	bne.n	8004a16 <HAL_DMA_Init+0x2de>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004930:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004932:	4620      	mov	r0, r4
 8004934:	f7ff fdc8 	bl	80044c8 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004938:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800493a:	f003 021f 	and.w	r2, r3, #31
 800493e:	233f      	movs	r3, #63	@ 0x3f
 8004940:	4093      	lsls	r3, r2
 8004942:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	495f      	ldr	r1, [pc, #380]	@ (8004ac4 <HAL_DMA_Init+0x38c>)
 8004948:	4a5f      	ldr	r2, [pc, #380]	@ (8004ac8 <HAL_DMA_Init+0x390>)
 800494a:	4293      	cmp	r3, r2
 800494c:	bf18      	it	ne
 800494e:	428b      	cmpne	r3, r1
 8004950:	d042      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 8004952:	3218      	adds	r2, #24
 8004954:	4293      	cmp	r3, r2
 8004956:	d03f      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 8004958:	3218      	adds	r2, #24
 800495a:	4293      	cmp	r3, r2
 800495c:	d03c      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 800495e:	3218      	adds	r2, #24
 8004960:	4293      	cmp	r3, r2
 8004962:	d039      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 8004964:	3218      	adds	r2, #24
 8004966:	4293      	cmp	r3, r2
 8004968:	d036      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 800496a:	3218      	adds	r2, #24
 800496c:	4293      	cmp	r3, r2
 800496e:	d033      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 8004970:	3218      	adds	r2, #24
 8004972:	4293      	cmp	r3, r2
 8004974:	d030      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 8004976:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800497a:	4293      	cmp	r3, r2
 800497c:	d02c      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 800497e:	3218      	adds	r2, #24
 8004980:	4293      	cmp	r3, r2
 8004982:	d029      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 8004984:	3218      	adds	r2, #24
 8004986:	4293      	cmp	r3, r2
 8004988:	d026      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 800498a:	3218      	adds	r2, #24
 800498c:	4293      	cmp	r3, r2
 800498e:	d023      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 8004990:	3218      	adds	r2, #24
 8004992:	4293      	cmp	r3, r2
 8004994:	d020      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 8004996:	3218      	adds	r2, #24
 8004998:	4293      	cmp	r3, r2
 800499a:	d01d      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 800499c:	3218      	adds	r2, #24
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01a      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 80049a2:	3218      	adds	r2, #24
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d017      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 80049a8:	4a48      	ldr	r2, [pc, #288]	@ (8004acc <HAL_DMA_Init+0x394>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d014      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 80049ae:	3214      	adds	r2, #20
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d011      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 80049b4:	3214      	adds	r2, #20
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00e      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 80049ba:	3214      	adds	r2, #20
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00b      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 80049c0:	3214      	adds	r2, #20
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d008      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 80049c6:	3214      	adds	r2, #20
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d005      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 80049cc:	3214      	adds	r2, #20
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d002      	beq.n	80049d8 <HAL_DMA_Init+0x2a0>
 80049d2:	3214      	adds	r2, #20
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d113      	bne.n	8004a00 <HAL_DMA_Init+0x2c8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80049d8:	4620      	mov	r0, r4
 80049da:	f7ff fe19 	bl	8004610 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80049de:	68a3      	ldr	r3, [r4, #8]
 80049e0:	2b80      	cmp	r3, #128	@ 0x80
 80049e2:	d059      	beq.n	8004a98 <HAL_DMA_Init+0x360>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80049e4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80049e6:	7922      	ldrb	r2, [r4, #4]
 80049e8:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049ec:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 80049ee:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80049f0:	6863      	ldr	r3, [r4, #4]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	2b07      	cmp	r3, #7
 80049f6:	d952      	bls.n	8004a9e <HAL_DMA_Init+0x366>
      hdma->DMAmuxRequestGen = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	66e3      	str	r3, [r4, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80049fc:	6723      	str	r3, [r4, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80049fe:	6763      	str	r3, [r4, #116]	@ 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a00:	2000      	movs	r0, #0
 8004a02:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004a04:	2301      	movs	r3, #1
 8004a06:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8004a0a:	e743      	b.n	8004894 <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a0c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004a0e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004a10:	4301      	orrs	r1, r0
 8004a12:	430a      	orrs	r2, r1
 8004a14:	e761      	b.n	80048da <HAL_DMA_Init+0x1a2>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a16:	2340      	movs	r3, #64	@ 0x40
 8004a18:	6563      	str	r3, [r4, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8004a1a:	2001      	movs	r0, #1
 8004a1c:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
          return HAL_ERROR;
 8004a20:	e738      	b.n	8004894 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a22:	2202      	movs	r2, #2
 8004a24:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004a2e:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004a30:	4927      	ldr	r1, [pc, #156]	@ (8004ad0 <HAL_DMA_Init+0x398>)
 8004a32:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a34:	68a2      	ldr	r2, [r4, #8]
 8004a36:	2a40      	cmp	r2, #64	@ 0x40
 8004a38:	d02c      	beq.n	8004a94 <HAL_DMA_Init+0x35c>
 8004a3a:	2a80      	cmp	r2, #128	@ 0x80
 8004a3c:	d027      	beq.n	8004a8e <HAL_DMA_Init+0x356>
 8004a3e:	2200      	movs	r2, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004a40:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a42:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004a46:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004a48:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004a4c:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004a4e:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004a52:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004a54:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004a58:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004a5a:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004a5e:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004a60:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a64:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004a66:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004a68:	6822      	ldr	r2, [r4, #0]
 8004a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ad4 <HAL_DMA_Init+0x39c>)
 8004a6c:	4413      	add	r3, r2
 8004a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ad8 <HAL_DMA_Init+0x3a0>)
 8004a70:	fba2 2303 	umull	r2, r3, r2, r3
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	65e3      	str	r3, [r4, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f7ff fd24 	bl	80044c8 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004a80:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004a82:	f002 011f 	and.w	r1, r2, #31
 8004a86:	2201      	movs	r2, #1
 8004a88:	408a      	lsls	r2, r1
 8004a8a:	6042      	str	r2, [r0, #4]
 8004a8c:	e75a      	b.n	8004944 <HAL_DMA_Init+0x20c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004a92:	e7d5      	b.n	8004a40 <HAL_DMA_Init+0x308>
 8004a94:	2210      	movs	r2, #16
 8004a96:	e7d3      	b.n	8004a40 <HAL_DMA_Init+0x308>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	6063      	str	r3, [r4, #4]
 8004a9c:	e7a2      	b.n	80049e4 <HAL_DMA_Init+0x2ac>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f7ff fe0c 	bl	80046bc <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004aa4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aaa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8004aac:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8004aae:	605a      	str	r2, [r3, #4]
 8004ab0:	e7a6      	b.n	8004a00 <HAL_DMA_Init+0x2c8>
    return HAL_ERROR;
 8004ab2:	2001      	movs	r0, #1
 8004ab4:	e6ee      	b.n	8004894 <HAL_DMA_Init+0x15c>
 8004ab6:	bf00      	nop
 8004ab8:	fe10803f 	.word	0xfe10803f
 8004abc:	5c001000 	.word	0x5c001000
 8004ac0:	ffff0000 	.word	0xffff0000
 8004ac4:	40020010 	.word	0x40020010
 8004ac8:	40020028 	.word	0x40020028
 8004acc:	58025408 	.word	0x58025408
 8004ad0:	fffe000f 	.word	0xfffe000f
 8004ad4:	a7fdabf8 	.word	0xa7fdabf8
 8004ad8:	cccccccd 	.word	0xcccccccd

08004adc <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8004adc:	2800      	cmp	r0, #0
 8004ade:	f000 813e 	beq.w	8004d5e <HAL_DMA_Start_IT+0x282>
{
 8004ae2:	b570      	push	{r4, r5, r6, lr}
 8004ae4:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004ae6:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8004aea:	2801      	cmp	r0, #1
 8004aec:	f000 8139 	beq.w	8004d62 <HAL_DMA_Start_IT+0x286>
 8004af0:	2001      	movs	r0, #1
 8004af2:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004af6:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8004afa:	b2c0      	uxtb	r0, r0
 8004afc:	2801      	cmp	r0, #1
 8004afe:	d007      	beq.n	8004b10 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004b00:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b04:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8004b06:	2300      	movs	r3, #0
 8004b08:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_ERROR;
 8004b0c:	2001      	movs	r0, #1
}
 8004b0e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b10:	2002      	movs	r0, #2
 8004b12:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b16:	2000      	movs	r0, #0
 8004b18:	6560      	str	r0, [r4, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 8004b1a:	6820      	ldr	r0, [r4, #0]
 8004b1c:	4e92      	ldr	r6, [pc, #584]	@ (8004d68 <HAL_DMA_Start_IT+0x28c>)
 8004b1e:	4d93      	ldr	r5, [pc, #588]	@ (8004d6c <HAL_DMA_Start_IT+0x290>)
 8004b20:	42a8      	cmp	r0, r5
 8004b22:	bf18      	it	ne
 8004b24:	42b0      	cmpne	r0, r6
 8004b26:	d02f      	beq.n	8004b88 <HAL_DMA_Start_IT+0xac>
 8004b28:	3518      	adds	r5, #24
 8004b2a:	42a8      	cmp	r0, r5
 8004b2c:	d02c      	beq.n	8004b88 <HAL_DMA_Start_IT+0xac>
 8004b2e:	3518      	adds	r5, #24
 8004b30:	42a8      	cmp	r0, r5
 8004b32:	d029      	beq.n	8004b88 <HAL_DMA_Start_IT+0xac>
 8004b34:	3518      	adds	r5, #24
 8004b36:	42a8      	cmp	r0, r5
 8004b38:	d026      	beq.n	8004b88 <HAL_DMA_Start_IT+0xac>
 8004b3a:	3518      	adds	r5, #24
 8004b3c:	42a8      	cmp	r0, r5
 8004b3e:	d023      	beq.n	8004b88 <HAL_DMA_Start_IT+0xac>
 8004b40:	3518      	adds	r5, #24
 8004b42:	42a8      	cmp	r0, r5
 8004b44:	d020      	beq.n	8004b88 <HAL_DMA_Start_IT+0xac>
 8004b46:	3518      	adds	r5, #24
 8004b48:	42a8      	cmp	r0, r5
 8004b4a:	d01d      	beq.n	8004b88 <HAL_DMA_Start_IT+0xac>
 8004b4c:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8004b50:	42a8      	cmp	r0, r5
 8004b52:	d019      	beq.n	8004b88 <HAL_DMA_Start_IT+0xac>
 8004b54:	3518      	adds	r5, #24
 8004b56:	42a8      	cmp	r0, r5
 8004b58:	d016      	beq.n	8004b88 <HAL_DMA_Start_IT+0xac>
 8004b5a:	3518      	adds	r5, #24
 8004b5c:	42a8      	cmp	r0, r5
 8004b5e:	d013      	beq.n	8004b88 <HAL_DMA_Start_IT+0xac>
 8004b60:	3518      	adds	r5, #24
 8004b62:	42a8      	cmp	r0, r5
 8004b64:	d010      	beq.n	8004b88 <HAL_DMA_Start_IT+0xac>
 8004b66:	3518      	adds	r5, #24
 8004b68:	42a8      	cmp	r0, r5
 8004b6a:	d00d      	beq.n	8004b88 <HAL_DMA_Start_IT+0xac>
 8004b6c:	3518      	adds	r5, #24
 8004b6e:	42a8      	cmp	r0, r5
 8004b70:	d00a      	beq.n	8004b88 <HAL_DMA_Start_IT+0xac>
 8004b72:	3518      	adds	r5, #24
 8004b74:	42a8      	cmp	r0, r5
 8004b76:	d007      	beq.n	8004b88 <HAL_DMA_Start_IT+0xac>
 8004b78:	3518      	adds	r5, #24
 8004b7a:	42a8      	cmp	r0, r5
 8004b7c:	d004      	beq.n	8004b88 <HAL_DMA_Start_IT+0xac>
 8004b7e:	6805      	ldr	r5, [r0, #0]
 8004b80:	f025 0501 	bic.w	r5, r5, #1
 8004b84:	6005      	str	r5, [r0, #0]
 8004b86:	e003      	b.n	8004b90 <HAL_DMA_Start_IT+0xb4>
 8004b88:	6805      	ldr	r5, [r0, #0]
 8004b8a:	f025 0501 	bic.w	r5, r5, #1
 8004b8e:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b90:	4620      	mov	r0, r4
 8004b92:	f7ff fbbf 	bl	8004314 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	4973      	ldr	r1, [pc, #460]	@ (8004d68 <HAL_DMA_Start_IT+0x28c>)
 8004b9a:	4a74      	ldr	r2, [pc, #464]	@ (8004d6c <HAL_DMA_Start_IT+0x290>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	bf18      	it	ne
 8004ba0:	428b      	cmpne	r3, r1
 8004ba2:	d038      	beq.n	8004c16 <HAL_DMA_Start_IT+0x13a>
 8004ba4:	3218      	adds	r2, #24
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d035      	beq.n	8004c16 <HAL_DMA_Start_IT+0x13a>
 8004baa:	3218      	adds	r2, #24
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d032      	beq.n	8004c16 <HAL_DMA_Start_IT+0x13a>
 8004bb0:	3218      	adds	r2, #24
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d02f      	beq.n	8004c16 <HAL_DMA_Start_IT+0x13a>
 8004bb6:	3218      	adds	r2, #24
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d02c      	beq.n	8004c16 <HAL_DMA_Start_IT+0x13a>
 8004bbc:	3218      	adds	r2, #24
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d029      	beq.n	8004c16 <HAL_DMA_Start_IT+0x13a>
 8004bc2:	3218      	adds	r2, #24
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d026      	beq.n	8004c16 <HAL_DMA_Start_IT+0x13a>
 8004bc8:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d022      	beq.n	8004c16 <HAL_DMA_Start_IT+0x13a>
 8004bd0:	3218      	adds	r2, #24
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d01f      	beq.n	8004c16 <HAL_DMA_Start_IT+0x13a>
 8004bd6:	3218      	adds	r2, #24
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d01c      	beq.n	8004c16 <HAL_DMA_Start_IT+0x13a>
 8004bdc:	3218      	adds	r2, #24
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d019      	beq.n	8004c16 <HAL_DMA_Start_IT+0x13a>
 8004be2:	3218      	adds	r2, #24
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d016      	beq.n	8004c16 <HAL_DMA_Start_IT+0x13a>
 8004be8:	3218      	adds	r2, #24
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d013      	beq.n	8004c16 <HAL_DMA_Start_IT+0x13a>
 8004bee:	3218      	adds	r2, #24
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d010      	beq.n	8004c16 <HAL_DMA_Start_IT+0x13a>
 8004bf4:	3218      	adds	r2, #24
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00d      	beq.n	8004c16 <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	f022 020e 	bic.w	r2, r2, #14
 8004c00:	f042 020a 	orr.w	r2, r2, #10
 8004c04:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004c06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c08:	b193      	cbz	r3, 8004c30 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004c0a:	6822      	ldr	r2, [r4, #0]
 8004c0c:	6813      	ldr	r3, [r2, #0]
 8004c0e:	f043 0304 	orr.w	r3, r3, #4
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	e00c      	b.n	8004c30 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	f022 021e 	bic.w	r2, r2, #30
 8004c1c:	f042 0216 	orr.w	r2, r2, #22
 8004c20:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004c22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c24:	b123      	cbz	r3, 8004c30 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004c26:	6822      	ldr	r2, [r4, #0]
 8004c28:	6813      	ldr	r3, [r2, #0]
 8004c2a:	f043 0308 	orr.w	r3, r3, #8
 8004c2e:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	494d      	ldr	r1, [pc, #308]	@ (8004d68 <HAL_DMA_Start_IT+0x28c>)
 8004c34:	4a4d      	ldr	r2, [pc, #308]	@ (8004d6c <HAL_DMA_Start_IT+0x290>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	bf18      	it	ne
 8004c3a:	428b      	cmpne	r3, r1
 8004c3c:	d042      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004c3e:	3218      	adds	r2, #24
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d03f      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004c44:	3218      	adds	r2, #24
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d03c      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004c4a:	3218      	adds	r2, #24
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d039      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004c50:	3218      	adds	r2, #24
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d036      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004c56:	3218      	adds	r2, #24
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d033      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004c5c:	3218      	adds	r2, #24
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d030      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004c62:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d02c      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004c6a:	3218      	adds	r2, #24
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d029      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004c70:	3218      	adds	r2, #24
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d026      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004c76:	3218      	adds	r2, #24
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d023      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004c7c:	3218      	adds	r2, #24
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d020      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004c82:	3218      	adds	r2, #24
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d01d      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004c88:	3218      	adds	r2, #24
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d01a      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004c8e:	3218      	adds	r2, #24
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d017      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004c94:	4a36      	ldr	r2, [pc, #216]	@ (8004d70 <HAL_DMA_Start_IT+0x294>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d014      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004c9a:	3214      	adds	r2, #20
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d011      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004ca0:	3214      	adds	r2, #20
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00e      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004ca6:	3214      	adds	r2, #20
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00b      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004cac:	3214      	adds	r2, #20
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d008      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004cb2:	3214      	adds	r2, #20
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d005      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004cb8:	3214      	adds	r2, #20
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d002      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x1e8>
 8004cbe:	3214      	adds	r2, #20
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d10e      	bne.n	8004ce2 <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004cc4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8004ccc:	d003      	beq.n	8004cd6 <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cd4:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8004cd6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004cd8:	b11b      	cbz	r3, 8004ce2 <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ce0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	4920      	ldr	r1, [pc, #128]	@ (8004d68 <HAL_DMA_Start_IT+0x28c>)
 8004ce6:	4a21      	ldr	r2, [pc, #132]	@ (8004d6c <HAL_DMA_Start_IT+0x290>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	bf18      	it	ne
 8004cec:	428b      	cmpne	r3, r1
 8004cee:	d030      	beq.n	8004d52 <HAL_DMA_Start_IT+0x276>
 8004cf0:	3218      	adds	r2, #24
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d02d      	beq.n	8004d52 <HAL_DMA_Start_IT+0x276>
 8004cf6:	3218      	adds	r2, #24
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d02a      	beq.n	8004d52 <HAL_DMA_Start_IT+0x276>
 8004cfc:	3218      	adds	r2, #24
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d027      	beq.n	8004d52 <HAL_DMA_Start_IT+0x276>
 8004d02:	3218      	adds	r2, #24
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d024      	beq.n	8004d52 <HAL_DMA_Start_IT+0x276>
 8004d08:	3218      	adds	r2, #24
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d021      	beq.n	8004d52 <HAL_DMA_Start_IT+0x276>
 8004d0e:	3218      	adds	r2, #24
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d01e      	beq.n	8004d52 <HAL_DMA_Start_IT+0x276>
 8004d14:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d01a      	beq.n	8004d52 <HAL_DMA_Start_IT+0x276>
 8004d1c:	3218      	adds	r2, #24
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d017      	beq.n	8004d52 <HAL_DMA_Start_IT+0x276>
 8004d22:	3218      	adds	r2, #24
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d014      	beq.n	8004d52 <HAL_DMA_Start_IT+0x276>
 8004d28:	3218      	adds	r2, #24
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d011      	beq.n	8004d52 <HAL_DMA_Start_IT+0x276>
 8004d2e:	3218      	adds	r2, #24
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00e      	beq.n	8004d52 <HAL_DMA_Start_IT+0x276>
 8004d34:	3218      	adds	r2, #24
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00b      	beq.n	8004d52 <HAL_DMA_Start_IT+0x276>
 8004d3a:	3218      	adds	r2, #24
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d008      	beq.n	8004d52 <HAL_DMA_Start_IT+0x276>
 8004d40:	3218      	adds	r2, #24
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d005      	beq.n	8004d52 <HAL_DMA_Start_IT+0x276>
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4e:	2000      	movs	r0, #0
 8004d50:	e6dd      	b.n	8004b0e <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	f042 0201 	orr.w	r2, r2, #1
 8004d58:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d5a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004d5c:	e6d7      	b.n	8004b0e <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 8004d5e:	2001      	movs	r0, #1
}
 8004d60:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8004d62:	2002      	movs	r0, #2
 8004d64:	e6d3      	b.n	8004b0e <HAL_DMA_Start_IT+0x32>
 8004d66:	bf00      	nop
 8004d68:	40020010 	.word	0x40020010
 8004d6c:	40020028 	.word	0x40020028
 8004d70:	58025408 	.word	0x58025408

08004d74 <HAL_DMA_Abort>:
{
 8004d74:	b570      	push	{r4, r5, r6, lr}
 8004d76:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004d78:	f7fe fcb0 	bl	80036dc <HAL_GetTick>
  if(hdma == NULL)
 8004d7c:	2c00      	cmp	r4, #0
 8004d7e:	f000 8191 	beq.w	80050a4 <HAL_DMA_Abort+0x330>
 8004d82:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d84:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d006      	beq.n	8004d9c <HAL_DMA_Abort+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d8e:	2380      	movs	r3, #128	@ 0x80
 8004d90:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8004d92:	2300      	movs	r3, #0
 8004d94:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8004d98:	2001      	movs	r0, #1
}
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	498c      	ldr	r1, [pc, #560]	@ (8004fd0 <HAL_DMA_Abort+0x25c>)
 8004da0:	4a8c      	ldr	r2, [pc, #560]	@ (8004fd4 <HAL_DMA_Abort+0x260>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	bf18      	it	ne
 8004da6:	428b      	cmpne	r3, r1
 8004da8:	d030      	beq.n	8004e0c <HAL_DMA_Abort+0x98>
 8004daa:	3218      	adds	r2, #24
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d02d      	beq.n	8004e0c <HAL_DMA_Abort+0x98>
 8004db0:	3218      	adds	r2, #24
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d02a      	beq.n	8004e0c <HAL_DMA_Abort+0x98>
 8004db6:	3218      	adds	r2, #24
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d027      	beq.n	8004e0c <HAL_DMA_Abort+0x98>
 8004dbc:	3218      	adds	r2, #24
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d024      	beq.n	8004e0c <HAL_DMA_Abort+0x98>
 8004dc2:	3218      	adds	r2, #24
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d021      	beq.n	8004e0c <HAL_DMA_Abort+0x98>
 8004dc8:	3218      	adds	r2, #24
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d01e      	beq.n	8004e0c <HAL_DMA_Abort+0x98>
 8004dce:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01a      	beq.n	8004e0c <HAL_DMA_Abort+0x98>
 8004dd6:	3218      	adds	r2, #24
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d017      	beq.n	8004e0c <HAL_DMA_Abort+0x98>
 8004ddc:	3218      	adds	r2, #24
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d014      	beq.n	8004e0c <HAL_DMA_Abort+0x98>
 8004de2:	3218      	adds	r2, #24
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d011      	beq.n	8004e0c <HAL_DMA_Abort+0x98>
 8004de8:	3218      	adds	r2, #24
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00e      	beq.n	8004e0c <HAL_DMA_Abort+0x98>
 8004dee:	3218      	adds	r2, #24
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00b      	beq.n	8004e0c <HAL_DMA_Abort+0x98>
 8004df4:	3218      	adds	r2, #24
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d008      	beq.n	8004e0c <HAL_DMA_Abort+0x98>
 8004dfa:	3218      	adds	r2, #24
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d005      	beq.n	8004e0c <HAL_DMA_Abort+0x98>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	f022 020e 	bic.w	r2, r2, #14
 8004e06:	601a      	str	r2, [r3, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004e08:	6826      	ldr	r6, [r4, #0]
 8004e0a:	e009      	b.n	8004e20 <HAL_DMA_Abort+0xac>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	f022 021e 	bic.w	r2, r2, #30
 8004e12:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004e14:	6822      	ldr	r2, [r4, #0]
 8004e16:	6953      	ldr	r3, [r2, #20]
 8004e18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e1c:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004e1e:	6826      	ldr	r6, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	496b      	ldr	r1, [pc, #428]	@ (8004fd0 <HAL_DMA_Abort+0x25c>)
 8004e24:	4a6b      	ldr	r2, [pc, #428]	@ (8004fd4 <HAL_DMA_Abort+0x260>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	bf18      	it	ne
 8004e2a:	428b      	cmpne	r3, r1
 8004e2c:	d042      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004e2e:	3218      	adds	r2, #24
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d03f      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004e34:	3218      	adds	r2, #24
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d03c      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004e3a:	3218      	adds	r2, #24
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d039      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004e40:	3218      	adds	r2, #24
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d036      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004e46:	3218      	adds	r2, #24
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d033      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004e4c:	3218      	adds	r2, #24
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d030      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004e52:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d02c      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004e5a:	3218      	adds	r2, #24
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d029      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004e60:	3218      	adds	r2, #24
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d026      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004e66:	3218      	adds	r2, #24
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d023      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004e6c:	3218      	adds	r2, #24
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d020      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004e72:	3218      	adds	r2, #24
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d01d      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004e78:	3218      	adds	r2, #24
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d01a      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004e7e:	3218      	adds	r2, #24
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d017      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004e84:	4a54      	ldr	r2, [pc, #336]	@ (8004fd8 <HAL_DMA_Abort+0x264>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d014      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004e8a:	3214      	adds	r2, #20
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d011      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004e90:	3214      	adds	r2, #20
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004e96:	3214      	adds	r2, #20
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00b      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004e9c:	3214      	adds	r2, #20
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d008      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004ea2:	3214      	adds	r2, #20
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d005      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004ea8:	3214      	adds	r2, #20
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d002      	beq.n	8004eb4 <HAL_DMA_Abort+0x140>
 8004eae:	3214      	adds	r2, #20
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d104      	bne.n	8004ebe <HAL_DMA_Abort+0x14a>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004eb4:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004eb6:	6813      	ldr	r3, [r2, #0]
 8004eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ebc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	4943      	ldr	r1, [pc, #268]	@ (8004fd0 <HAL_DMA_Abort+0x25c>)
 8004ec2:	4a44      	ldr	r2, [pc, #272]	@ (8004fd4 <HAL_DMA_Abort+0x260>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	bf18      	it	ne
 8004ec8:	428b      	cmpne	r3, r1
 8004eca:	d02f      	beq.n	8004f2c <HAL_DMA_Abort+0x1b8>
 8004ecc:	3218      	adds	r2, #24
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d02c      	beq.n	8004f2c <HAL_DMA_Abort+0x1b8>
 8004ed2:	3218      	adds	r2, #24
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d029      	beq.n	8004f2c <HAL_DMA_Abort+0x1b8>
 8004ed8:	3218      	adds	r2, #24
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d026      	beq.n	8004f2c <HAL_DMA_Abort+0x1b8>
 8004ede:	3218      	adds	r2, #24
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d023      	beq.n	8004f2c <HAL_DMA_Abort+0x1b8>
 8004ee4:	3218      	adds	r2, #24
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d020      	beq.n	8004f2c <HAL_DMA_Abort+0x1b8>
 8004eea:	3218      	adds	r2, #24
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d01d      	beq.n	8004f2c <HAL_DMA_Abort+0x1b8>
 8004ef0:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d019      	beq.n	8004f2c <HAL_DMA_Abort+0x1b8>
 8004ef8:	3218      	adds	r2, #24
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d016      	beq.n	8004f2c <HAL_DMA_Abort+0x1b8>
 8004efe:	3218      	adds	r2, #24
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d013      	beq.n	8004f2c <HAL_DMA_Abort+0x1b8>
 8004f04:	3218      	adds	r2, #24
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d010      	beq.n	8004f2c <HAL_DMA_Abort+0x1b8>
 8004f0a:	3218      	adds	r2, #24
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00d      	beq.n	8004f2c <HAL_DMA_Abort+0x1b8>
 8004f10:	3218      	adds	r2, #24
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00a      	beq.n	8004f2c <HAL_DMA_Abort+0x1b8>
 8004f16:	3218      	adds	r2, #24
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d007      	beq.n	8004f2c <HAL_DMA_Abort+0x1b8>
 8004f1c:	3218      	adds	r2, #24
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d004      	beq.n	8004f2c <HAL_DMA_Abort+0x1b8>
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	f022 0201 	bic.w	r2, r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	e003      	b.n	8004f34 <HAL_DMA_Abort+0x1c0>
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	f022 0201 	bic.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004f34:	6833      	ldr	r3, [r6, #0]
 8004f36:	f013 0f01 	tst.w	r3, #1
 8004f3a:	d00e      	beq.n	8004f5a <HAL_DMA_Abort+0x1e6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f3c:	f7fe fbce 	bl	80036dc <HAL_GetTick>
 8004f40:	1b43      	subs	r3, r0, r5
 8004f42:	2b05      	cmp	r3, #5
 8004f44:	d9f6      	bls.n	8004f34 <HAL_DMA_Abort+0x1c0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f46:	2320      	movs	r3, #32
 8004f48:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8004f50:	2300      	movs	r3, #0
 8004f52:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_ERROR;
 8004f56:	2001      	movs	r0, #1
 8004f58:	e71f      	b.n	8004d9a <HAL_DMA_Abort+0x26>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	491c      	ldr	r1, [pc, #112]	@ (8004fd0 <HAL_DMA_Abort+0x25c>)
 8004f5e:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd4 <HAL_DMA_Abort+0x260>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	bf18      	it	ne
 8004f64:	428b      	cmpne	r3, r1
 8004f66:	d039      	beq.n	8004fdc <HAL_DMA_Abort+0x268>
 8004f68:	3218      	adds	r2, #24
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d036      	beq.n	8004fdc <HAL_DMA_Abort+0x268>
 8004f6e:	3218      	adds	r2, #24
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d033      	beq.n	8004fdc <HAL_DMA_Abort+0x268>
 8004f74:	3218      	adds	r2, #24
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d030      	beq.n	8004fdc <HAL_DMA_Abort+0x268>
 8004f7a:	3218      	adds	r2, #24
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d02d      	beq.n	8004fdc <HAL_DMA_Abort+0x268>
 8004f80:	3218      	adds	r2, #24
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d02a      	beq.n	8004fdc <HAL_DMA_Abort+0x268>
 8004f86:	3218      	adds	r2, #24
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d027      	beq.n	8004fdc <HAL_DMA_Abort+0x268>
 8004f8c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d023      	beq.n	8004fdc <HAL_DMA_Abort+0x268>
 8004f94:	3218      	adds	r2, #24
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d020      	beq.n	8004fdc <HAL_DMA_Abort+0x268>
 8004f9a:	3218      	adds	r2, #24
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d01d      	beq.n	8004fdc <HAL_DMA_Abort+0x268>
 8004fa0:	3218      	adds	r2, #24
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01a      	beq.n	8004fdc <HAL_DMA_Abort+0x268>
 8004fa6:	3218      	adds	r2, #24
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d017      	beq.n	8004fdc <HAL_DMA_Abort+0x268>
 8004fac:	3218      	adds	r2, #24
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d014      	beq.n	8004fdc <HAL_DMA_Abort+0x268>
 8004fb2:	3218      	adds	r2, #24
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d011      	beq.n	8004fdc <HAL_DMA_Abort+0x268>
 8004fb8:	3218      	adds	r2, #24
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00e      	beq.n	8004fdc <HAL_DMA_Abort+0x268>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fbe:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004fc0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004fc2:	f003 021f 	and.w	r2, r3, #31
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	4093      	lsls	r3, r2
 8004fca:	604b      	str	r3, [r1, #4]
 8004fcc:	e00d      	b.n	8004fea <HAL_DMA_Abort+0x276>
 8004fce:	bf00      	nop
 8004fd0:	40020010 	.word	0x40020010
 8004fd4:	40020028 	.word	0x40020028
 8004fd8:	58025408 	.word	0x58025408
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fdc:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fde:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004fe0:	f003 021f 	and.w	r2, r3, #31
 8004fe4:	233f      	movs	r3, #63	@ 0x3f
 8004fe6:	4093      	lsls	r3, r2
 8004fe8:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	492e      	ldr	r1, [pc, #184]	@ (80050a8 <HAL_DMA_Abort+0x334>)
 8004fee:	4a2f      	ldr	r2, [pc, #188]	@ (80050ac <HAL_DMA_Abort+0x338>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	bf18      	it	ne
 8004ff4:	428b      	cmpne	r3, r1
 8004ff6:	d042      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 8004ff8:	3218      	adds	r2, #24
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d03f      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 8004ffe:	3218      	adds	r2, #24
 8005000:	4293      	cmp	r3, r2
 8005002:	d03c      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 8005004:	3218      	adds	r2, #24
 8005006:	4293      	cmp	r3, r2
 8005008:	d039      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 800500a:	3218      	adds	r2, #24
 800500c:	4293      	cmp	r3, r2
 800500e:	d036      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 8005010:	3218      	adds	r2, #24
 8005012:	4293      	cmp	r3, r2
 8005014:	d033      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 8005016:	3218      	adds	r2, #24
 8005018:	4293      	cmp	r3, r2
 800501a:	d030      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 800501c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8005020:	4293      	cmp	r3, r2
 8005022:	d02c      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 8005024:	3218      	adds	r2, #24
 8005026:	4293      	cmp	r3, r2
 8005028:	d029      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 800502a:	3218      	adds	r2, #24
 800502c:	4293      	cmp	r3, r2
 800502e:	d026      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 8005030:	3218      	adds	r2, #24
 8005032:	4293      	cmp	r3, r2
 8005034:	d023      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 8005036:	3218      	adds	r2, #24
 8005038:	4293      	cmp	r3, r2
 800503a:	d020      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 800503c:	3218      	adds	r2, #24
 800503e:	4293      	cmp	r3, r2
 8005040:	d01d      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 8005042:	3218      	adds	r2, #24
 8005044:	4293      	cmp	r3, r2
 8005046:	d01a      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 8005048:	3218      	adds	r2, #24
 800504a:	4293      	cmp	r3, r2
 800504c:	d017      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 800504e:	4a18      	ldr	r2, [pc, #96]	@ (80050b0 <HAL_DMA_Abort+0x33c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d014      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 8005054:	3214      	adds	r2, #20
 8005056:	4293      	cmp	r3, r2
 8005058:	d011      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 800505a:	3214      	adds	r2, #20
 800505c:	4293      	cmp	r3, r2
 800505e:	d00e      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 8005060:	3214      	adds	r2, #20
 8005062:	4293      	cmp	r3, r2
 8005064:	d00b      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 8005066:	3214      	adds	r2, #20
 8005068:	4293      	cmp	r3, r2
 800506a:	d008      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 800506c:	3214      	adds	r2, #20
 800506e:	4293      	cmp	r3, r2
 8005070:	d005      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 8005072:	3214      	adds	r2, #20
 8005074:	4293      	cmp	r3, r2
 8005076:	d002      	beq.n	800507e <HAL_DMA_Abort+0x30a>
 8005078:	3214      	adds	r2, #20
 800507a:	4293      	cmp	r3, r2
 800507c:	d10b      	bne.n	8005096 <HAL_DMA_Abort+0x322>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800507e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005080:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8005082:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8005084:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8005086:	b133      	cbz	r3, 8005096 <HAL_DMA_Abort+0x322>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800508e:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005090:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8005092:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8005094:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005096:	2301      	movs	r3, #1
 8005098:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 800509c:	2000      	movs	r0, #0
 800509e:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 80050a2:	e67a      	b.n	8004d9a <HAL_DMA_Abort+0x26>
    return HAL_ERROR;
 80050a4:	2001      	movs	r0, #1
 80050a6:	e678      	b.n	8004d9a <HAL_DMA_Abort+0x26>
 80050a8:	40020010 	.word	0x40020010
 80050ac:	40020028 	.word	0x40020028
 80050b0:	58025408 	.word	0x58025408

080050b4 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80050b4:	2800      	cmp	r0, #0
 80050b6:	f000 8128 	beq.w	800530a <HAL_DMA_Abort_IT+0x256>
{
 80050ba:	b508      	push	{r3, lr}
 80050bc:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050be:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d003      	beq.n	80050d0 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050c8:	2380      	movs	r3, #128	@ 0x80
 80050ca:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 80050cc:	2001      	movs	r0, #1
}
 80050ce:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050d0:	6803      	ldr	r3, [r0, #0]
 80050d2:	4890      	ldr	r0, [pc, #576]	@ (8005314 <HAL_DMA_Abort_IT+0x260>)
 80050d4:	4990      	ldr	r1, [pc, #576]	@ (8005318 <HAL_DMA_Abort_IT+0x264>)
 80050d6:	428b      	cmp	r3, r1
 80050d8:	bf18      	it	ne
 80050da:	4283      	cmpne	r3, r0
 80050dc:	bf0c      	ite	eq
 80050de:	2001      	moveq	r0, #1
 80050e0:	2000      	movne	r0, #0
 80050e2:	d065      	beq.n	80051b0 <HAL_DMA_Abort_IT+0xfc>
 80050e4:	3118      	adds	r1, #24
 80050e6:	428b      	cmp	r3, r1
 80050e8:	d062      	beq.n	80051b0 <HAL_DMA_Abort_IT+0xfc>
 80050ea:	3118      	adds	r1, #24
 80050ec:	428b      	cmp	r3, r1
 80050ee:	d05f      	beq.n	80051b0 <HAL_DMA_Abort_IT+0xfc>
 80050f0:	3118      	adds	r1, #24
 80050f2:	428b      	cmp	r3, r1
 80050f4:	d05c      	beq.n	80051b0 <HAL_DMA_Abort_IT+0xfc>
 80050f6:	3118      	adds	r1, #24
 80050f8:	428b      	cmp	r3, r1
 80050fa:	d059      	beq.n	80051b0 <HAL_DMA_Abort_IT+0xfc>
 80050fc:	3118      	adds	r1, #24
 80050fe:	428b      	cmp	r3, r1
 8005100:	d056      	beq.n	80051b0 <HAL_DMA_Abort_IT+0xfc>
 8005102:	3118      	adds	r1, #24
 8005104:	428b      	cmp	r3, r1
 8005106:	d053      	beq.n	80051b0 <HAL_DMA_Abort_IT+0xfc>
 8005108:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800510c:	428b      	cmp	r3, r1
 800510e:	d04f      	beq.n	80051b0 <HAL_DMA_Abort_IT+0xfc>
 8005110:	3118      	adds	r1, #24
 8005112:	428b      	cmp	r3, r1
 8005114:	d04c      	beq.n	80051b0 <HAL_DMA_Abort_IT+0xfc>
 8005116:	3118      	adds	r1, #24
 8005118:	428b      	cmp	r3, r1
 800511a:	d049      	beq.n	80051b0 <HAL_DMA_Abort_IT+0xfc>
 800511c:	3118      	adds	r1, #24
 800511e:	428b      	cmp	r3, r1
 8005120:	d046      	beq.n	80051b0 <HAL_DMA_Abort_IT+0xfc>
 8005122:	3118      	adds	r1, #24
 8005124:	428b      	cmp	r3, r1
 8005126:	d043      	beq.n	80051b0 <HAL_DMA_Abort_IT+0xfc>
 8005128:	3118      	adds	r1, #24
 800512a:	428b      	cmp	r3, r1
 800512c:	d040      	beq.n	80051b0 <HAL_DMA_Abort_IT+0xfc>
 800512e:	3118      	adds	r1, #24
 8005130:	428b      	cmp	r3, r1
 8005132:	d03d      	beq.n	80051b0 <HAL_DMA_Abort_IT+0xfc>
 8005134:	3118      	adds	r1, #24
 8005136:	428b      	cmp	r3, r1
 8005138:	d03a      	beq.n	80051b0 <HAL_DMA_Abort_IT+0xfc>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800513a:	6819      	ldr	r1, [r3, #0]
 800513c:	f021 010e 	bic.w	r1, r1, #14
 8005140:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8005142:	6813      	ldr	r3, [r2, #0]
 8005144:	4873      	ldr	r0, [pc, #460]	@ (8005314 <HAL_DMA_Abort_IT+0x260>)
 8005146:	4974      	ldr	r1, [pc, #464]	@ (8005318 <HAL_DMA_Abort_IT+0x264>)
 8005148:	428b      	cmp	r3, r1
 800514a:	bf18      	it	ne
 800514c:	4283      	cmpne	r3, r0
 800514e:	d06a      	beq.n	8005226 <HAL_DMA_Abort_IT+0x172>
 8005150:	4972      	ldr	r1, [pc, #456]	@ (800531c <HAL_DMA_Abort_IT+0x268>)
 8005152:	428b      	cmp	r3, r1
 8005154:	d067      	beq.n	8005226 <HAL_DMA_Abort_IT+0x172>
 8005156:	3118      	adds	r1, #24
 8005158:	428b      	cmp	r3, r1
 800515a:	d064      	beq.n	8005226 <HAL_DMA_Abort_IT+0x172>
 800515c:	3118      	adds	r1, #24
 800515e:	428b      	cmp	r3, r1
 8005160:	d061      	beq.n	8005226 <HAL_DMA_Abort_IT+0x172>
 8005162:	3118      	adds	r1, #24
 8005164:	428b      	cmp	r3, r1
 8005166:	d05e      	beq.n	8005226 <HAL_DMA_Abort_IT+0x172>
 8005168:	3118      	adds	r1, #24
 800516a:	428b      	cmp	r3, r1
 800516c:	d05b      	beq.n	8005226 <HAL_DMA_Abort_IT+0x172>
 800516e:	3118      	adds	r1, #24
 8005170:	428b      	cmp	r3, r1
 8005172:	d058      	beq.n	8005226 <HAL_DMA_Abort_IT+0x172>
 8005174:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8005178:	428b      	cmp	r3, r1
 800517a:	d054      	beq.n	8005226 <HAL_DMA_Abort_IT+0x172>
 800517c:	3118      	adds	r1, #24
 800517e:	428b      	cmp	r3, r1
 8005180:	d051      	beq.n	8005226 <HAL_DMA_Abort_IT+0x172>
 8005182:	3118      	adds	r1, #24
 8005184:	428b      	cmp	r3, r1
 8005186:	d04e      	beq.n	8005226 <HAL_DMA_Abort_IT+0x172>
 8005188:	3118      	adds	r1, #24
 800518a:	428b      	cmp	r3, r1
 800518c:	d04b      	beq.n	8005226 <HAL_DMA_Abort_IT+0x172>
 800518e:	3118      	adds	r1, #24
 8005190:	428b      	cmp	r3, r1
 8005192:	d048      	beq.n	8005226 <HAL_DMA_Abort_IT+0x172>
 8005194:	3118      	adds	r1, #24
 8005196:	428b      	cmp	r3, r1
 8005198:	d045      	beq.n	8005226 <HAL_DMA_Abort_IT+0x172>
 800519a:	3118      	adds	r1, #24
 800519c:	428b      	cmp	r3, r1
 800519e:	d042      	beq.n	8005226 <HAL_DMA_Abort_IT+0x172>
 80051a0:	3118      	adds	r1, #24
 80051a2:	428b      	cmp	r3, r1
 80051a4:	d03f      	beq.n	8005226 <HAL_DMA_Abort_IT+0x172>
 80051a6:	6819      	ldr	r1, [r3, #0]
 80051a8:	f021 0101 	bic.w	r1, r1, #1
 80051ac:	6019      	str	r1, [r3, #0]
 80051ae:	e03e      	b.n	800522e <HAL_DMA_Abort_IT+0x17a>
      hdma->State = HAL_DMA_STATE_ABORT;
 80051b0:	2104      	movs	r1, #4
 80051b2:	f882 1035 	strb.w	r1, [r2, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80051b6:	bb80      	cbnz	r0, 800521a <HAL_DMA_Abort_IT+0x166>
 80051b8:	4a58      	ldr	r2, [pc, #352]	@ (800531c <HAL_DMA_Abort_IT+0x268>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d02d      	beq.n	800521a <HAL_DMA_Abort_IT+0x166>
 80051be:	3218      	adds	r2, #24
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d02a      	beq.n	800521a <HAL_DMA_Abort_IT+0x166>
 80051c4:	3218      	adds	r2, #24
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d027      	beq.n	800521a <HAL_DMA_Abort_IT+0x166>
 80051ca:	3218      	adds	r2, #24
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d024      	beq.n	800521a <HAL_DMA_Abort_IT+0x166>
 80051d0:	3218      	adds	r2, #24
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d021      	beq.n	800521a <HAL_DMA_Abort_IT+0x166>
 80051d6:	3218      	adds	r2, #24
 80051d8:	4293      	cmp	r3, r2
 80051da:	d01e      	beq.n	800521a <HAL_DMA_Abort_IT+0x166>
 80051dc:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d01a      	beq.n	800521a <HAL_DMA_Abort_IT+0x166>
 80051e4:	3218      	adds	r2, #24
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d017      	beq.n	800521a <HAL_DMA_Abort_IT+0x166>
 80051ea:	3218      	adds	r2, #24
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d014      	beq.n	800521a <HAL_DMA_Abort_IT+0x166>
 80051f0:	3218      	adds	r2, #24
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d011      	beq.n	800521a <HAL_DMA_Abort_IT+0x166>
 80051f6:	3218      	adds	r2, #24
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00e      	beq.n	800521a <HAL_DMA_Abort_IT+0x166>
 80051fc:	3218      	adds	r2, #24
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00b      	beq.n	800521a <HAL_DMA_Abort_IT+0x166>
 8005202:	3218      	adds	r2, #24
 8005204:	4293      	cmp	r3, r2
 8005206:	d008      	beq.n	800521a <HAL_DMA_Abort_IT+0x166>
 8005208:	3218      	adds	r2, #24
 800520a:	4293      	cmp	r3, r2
 800520c:	d005      	beq.n	800521a <HAL_DMA_Abort_IT+0x166>
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	f022 0201 	bic.w	r2, r2, #1
 8005214:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005216:	2000      	movs	r0, #0
 8005218:	e759      	b.n	80050ce <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	f022 0201 	bic.w	r2, r2, #1
 8005220:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005222:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8005224:	e753      	b.n	80050ce <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8005226:	6819      	ldr	r1, [r3, #0]
 8005228:	f021 0101 	bic.w	r1, r1, #1
 800522c:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800522e:	6813      	ldr	r3, [r2, #0]
 8005230:	4838      	ldr	r0, [pc, #224]	@ (8005314 <HAL_DMA_Abort_IT+0x260>)
 8005232:	4939      	ldr	r1, [pc, #228]	@ (8005318 <HAL_DMA_Abort_IT+0x264>)
 8005234:	428b      	cmp	r3, r1
 8005236:	bf18      	it	ne
 8005238:	4283      	cmpne	r3, r0
 800523a:	d042      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 800523c:	3118      	adds	r1, #24
 800523e:	428b      	cmp	r3, r1
 8005240:	d03f      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 8005242:	3118      	adds	r1, #24
 8005244:	428b      	cmp	r3, r1
 8005246:	d03c      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 8005248:	3118      	adds	r1, #24
 800524a:	428b      	cmp	r3, r1
 800524c:	d039      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 800524e:	3118      	adds	r1, #24
 8005250:	428b      	cmp	r3, r1
 8005252:	d036      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 8005254:	3118      	adds	r1, #24
 8005256:	428b      	cmp	r3, r1
 8005258:	d033      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 800525a:	3118      	adds	r1, #24
 800525c:	428b      	cmp	r3, r1
 800525e:	d030      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 8005260:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8005264:	428b      	cmp	r3, r1
 8005266:	d02c      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 8005268:	3118      	adds	r1, #24
 800526a:	428b      	cmp	r3, r1
 800526c:	d029      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 800526e:	3118      	adds	r1, #24
 8005270:	428b      	cmp	r3, r1
 8005272:	d026      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 8005274:	3118      	adds	r1, #24
 8005276:	428b      	cmp	r3, r1
 8005278:	d023      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 800527a:	3118      	adds	r1, #24
 800527c:	428b      	cmp	r3, r1
 800527e:	d020      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 8005280:	3118      	adds	r1, #24
 8005282:	428b      	cmp	r3, r1
 8005284:	d01d      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 8005286:	3118      	adds	r1, #24
 8005288:	428b      	cmp	r3, r1
 800528a:	d01a      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 800528c:	3118      	adds	r1, #24
 800528e:	428b      	cmp	r3, r1
 8005290:	d017      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 8005292:	4923      	ldr	r1, [pc, #140]	@ (8005320 <HAL_DMA_Abort_IT+0x26c>)
 8005294:	428b      	cmp	r3, r1
 8005296:	d014      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 8005298:	3114      	adds	r1, #20
 800529a:	428b      	cmp	r3, r1
 800529c:	d011      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 800529e:	3114      	adds	r1, #20
 80052a0:	428b      	cmp	r3, r1
 80052a2:	d00e      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 80052a4:	3114      	adds	r1, #20
 80052a6:	428b      	cmp	r3, r1
 80052a8:	d00b      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 80052aa:	3114      	adds	r1, #20
 80052ac:	428b      	cmp	r3, r1
 80052ae:	d008      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 80052b0:	3114      	adds	r1, #20
 80052b2:	428b      	cmp	r3, r1
 80052b4:	d005      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 80052b6:	3114      	adds	r1, #20
 80052b8:	428b      	cmp	r3, r1
 80052ba:	d002      	beq.n	80052c2 <HAL_DMA_Abort_IT+0x20e>
 80052bc:	3114      	adds	r1, #20
 80052be:	428b      	cmp	r3, r1
 80052c0:	d117      	bne.n	80052f2 <HAL_DMA_Abort_IT+0x23e>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052c2:	6e11      	ldr	r1, [r2, #96]	@ 0x60
 80052c4:	680b      	ldr	r3, [r1, #0]
 80052c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052ca:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80052cc:	6d90      	ldr	r0, [r2, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80052ce:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80052d0:	f003 011f 	and.w	r1, r3, #31
 80052d4:	2301      	movs	r3, #1
 80052d6:	408b      	lsls	r3, r1
 80052d8:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052da:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 80052dc:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 80052de:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80052e0:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 80052e2:	b133      	cbz	r3, 80052f2 <HAL_DMA_Abort_IT+0x23e>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052e4:	6819      	ldr	r1, [r3, #0]
 80052e6:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80052ea:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052ec:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80052ee:	6f51      	ldr	r1, [r2, #116]	@ 0x74
 80052f0:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 80052f2:	2301      	movs	r3, #1
 80052f4:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80052f8:	2300      	movs	r3, #0
 80052fa:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 80052fe:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005300:	b12b      	cbz	r3, 800530e <HAL_DMA_Abort_IT+0x25a>
        hdma->XferAbortCallback(hdma);
 8005302:	4610      	mov	r0, r2
 8005304:	4798      	blx	r3
  return HAL_OK;
 8005306:	2000      	movs	r0, #0
 8005308:	e6e1      	b.n	80050ce <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 800530a:	2001      	movs	r0, #1
}
 800530c:	4770      	bx	lr
  return HAL_OK;
 800530e:	2000      	movs	r0, #0
 8005310:	e6dd      	b.n	80050ce <HAL_DMA_Abort_IT+0x1a>
 8005312:	bf00      	nop
 8005314:	40020010 	.word	0x40020010
 8005318:	40020028 	.word	0x40020028
 800531c:	40020040 	.word	0x40020040
 8005320:	58025408 	.word	0x58025408

08005324 <HAL_DMA_IRQHandler>:
{
 8005324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005326:	b083      	sub	sp, #12
 8005328:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800532a:	2300      	movs	r3, #0
 800532c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800532e:	4b7d      	ldr	r3, [pc, #500]	@ (8005524 <HAL_DMA_IRQHandler+0x200>)
 8005330:	681d      	ldr	r5, [r3, #0]
 8005332:	4b7d      	ldr	r3, [pc, #500]	@ (8005528 <HAL_DMA_IRQHandler+0x204>)
 8005334:	fba3 3505 	umull	r3, r5, r3, r5
 8005338:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800533a:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr_dma  = regs_dma->ISR;
 800533c:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 800533e:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005342:	6803      	ldr	r3, [r0, #0]
 8005344:	4979      	ldr	r1, [pc, #484]	@ (800552c <HAL_DMA_IRQHandler+0x208>)
 8005346:	487a      	ldr	r0, [pc, #488]	@ (8005530 <HAL_DMA_IRQHandler+0x20c>)
 8005348:	4283      	cmp	r3, r0
 800534a:	bf18      	it	ne
 800534c:	428b      	cmpne	r3, r1
 800534e:	bf0c      	ite	eq
 8005350:	2001      	moveq	r0, #1
 8005352:	2000      	movne	r0, #0
 8005354:	d061      	beq.n	800541a <HAL_DMA_IRQHandler+0xf6>
 8005356:	4a77      	ldr	r2, [pc, #476]	@ (8005534 <HAL_DMA_IRQHandler+0x210>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d05e      	beq.n	800541a <HAL_DMA_IRQHandler+0xf6>
 800535c:	3218      	adds	r2, #24
 800535e:	4293      	cmp	r3, r2
 8005360:	d05b      	beq.n	800541a <HAL_DMA_IRQHandler+0xf6>
 8005362:	3218      	adds	r2, #24
 8005364:	4293      	cmp	r3, r2
 8005366:	d058      	beq.n	800541a <HAL_DMA_IRQHandler+0xf6>
 8005368:	3218      	adds	r2, #24
 800536a:	4293      	cmp	r3, r2
 800536c:	d055      	beq.n	800541a <HAL_DMA_IRQHandler+0xf6>
 800536e:	3218      	adds	r2, #24
 8005370:	4293      	cmp	r3, r2
 8005372:	d052      	beq.n	800541a <HAL_DMA_IRQHandler+0xf6>
 8005374:	3218      	adds	r2, #24
 8005376:	4293      	cmp	r3, r2
 8005378:	d04f      	beq.n	800541a <HAL_DMA_IRQHandler+0xf6>
 800537a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800537e:	4293      	cmp	r3, r2
 8005380:	d04b      	beq.n	800541a <HAL_DMA_IRQHandler+0xf6>
 8005382:	3218      	adds	r2, #24
 8005384:	4293      	cmp	r3, r2
 8005386:	d048      	beq.n	800541a <HAL_DMA_IRQHandler+0xf6>
 8005388:	3218      	adds	r2, #24
 800538a:	4293      	cmp	r3, r2
 800538c:	d045      	beq.n	800541a <HAL_DMA_IRQHandler+0xf6>
 800538e:	3218      	adds	r2, #24
 8005390:	4293      	cmp	r3, r2
 8005392:	d042      	beq.n	800541a <HAL_DMA_IRQHandler+0xf6>
 8005394:	3218      	adds	r2, #24
 8005396:	4293      	cmp	r3, r2
 8005398:	d03f      	beq.n	800541a <HAL_DMA_IRQHandler+0xf6>
 800539a:	3218      	adds	r2, #24
 800539c:	4293      	cmp	r3, r2
 800539e:	d03c      	beq.n	800541a <HAL_DMA_IRQHandler+0xf6>
 80053a0:	3218      	adds	r2, #24
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d039      	beq.n	800541a <HAL_DMA_IRQHandler+0xf6>
 80053a6:	3218      	adds	r2, #24
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d036      	beq.n	800541a <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80053ac:	4962      	ldr	r1, [pc, #392]	@ (8005538 <HAL_DMA_IRQHandler+0x214>)
 80053ae:	4a63      	ldr	r2, [pc, #396]	@ (800553c <HAL_DMA_IRQHandler+0x218>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	bf18      	it	ne
 80053b4:	428b      	cmpne	r3, r1
 80053b6:	d012      	beq.n	80053de <HAL_DMA_IRQHandler+0xba>
 80053b8:	4a61      	ldr	r2, [pc, #388]	@ (8005540 <HAL_DMA_IRQHandler+0x21c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00f      	beq.n	80053de <HAL_DMA_IRQHandler+0xba>
 80053be:	3214      	adds	r2, #20
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00c      	beq.n	80053de <HAL_DMA_IRQHandler+0xba>
 80053c4:	3214      	adds	r2, #20
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d009      	beq.n	80053de <HAL_DMA_IRQHandler+0xba>
 80053ca:	3214      	adds	r2, #20
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d006      	beq.n	80053de <HAL_DMA_IRQHandler+0xba>
 80053d0:	3214      	adds	r2, #20
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d003      	beq.n	80053de <HAL_DMA_IRQHandler+0xba>
 80053d6:	3214      	adds	r2, #20
 80053d8:	4293      	cmp	r3, r2
 80053da:	f040 8261 	bne.w	80058a0 <HAL_DMA_IRQHandler+0x57c>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80053de:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80053e0:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80053e2:	f001 011f 	and.w	r1, r1, #31
 80053e6:	2004      	movs	r0, #4
 80053e8:	4088      	lsls	r0, r1
 80053ea:	ea10 0f0c 	tst.w	r0, ip
 80053ee:	f000 82a7 	beq.w	8005940 <HAL_DMA_IRQHandler+0x61c>
 80053f2:	f012 0f04 	tst.w	r2, #4
 80053f6:	f000 82a3 	beq.w	8005940 <HAL_DMA_IRQHandler+0x61c>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80053fa:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053fc:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8005400:	f000 825a 	beq.w	80058b8 <HAL_DMA_IRQHandler+0x594>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005404:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8005408:	f040 8250 	bne.w	80058ac <HAL_DMA_IRQHandler+0x588>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800540c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 8246 	beq.w	80058a0 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1HalfCpltCallback(hdma);
 8005414:	4620      	mov	r0, r4
 8005416:	4798      	blx	r3
 8005418:	e242      	b.n	80058a0 <HAL_DMA_IRQHandler+0x57c>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800541a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800541c:	f002 011f 	and.w	r1, r2, #31
 8005420:	2208      	movs	r2, #8
 8005422:	408a      	lsls	r2, r1
 8005424:	4232      	tst	r2, r6
 8005426:	d041      	beq.n	80054ac <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005428:	bb70      	cbnz	r0, 8005488 <HAL_DMA_IRQHandler+0x164>
 800542a:	4a42      	ldr	r2, [pc, #264]	@ (8005534 <HAL_DMA_IRQHandler+0x210>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d02b      	beq.n	8005488 <HAL_DMA_IRQHandler+0x164>
 8005430:	3218      	adds	r2, #24
 8005432:	4293      	cmp	r3, r2
 8005434:	d028      	beq.n	8005488 <HAL_DMA_IRQHandler+0x164>
 8005436:	3218      	adds	r2, #24
 8005438:	4293      	cmp	r3, r2
 800543a:	d025      	beq.n	8005488 <HAL_DMA_IRQHandler+0x164>
 800543c:	3218      	adds	r2, #24
 800543e:	4293      	cmp	r3, r2
 8005440:	d022      	beq.n	8005488 <HAL_DMA_IRQHandler+0x164>
 8005442:	3218      	adds	r2, #24
 8005444:	4293      	cmp	r3, r2
 8005446:	d01f      	beq.n	8005488 <HAL_DMA_IRQHandler+0x164>
 8005448:	3218      	adds	r2, #24
 800544a:	4293      	cmp	r3, r2
 800544c:	d01c      	beq.n	8005488 <HAL_DMA_IRQHandler+0x164>
 800544e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8005452:	4293      	cmp	r3, r2
 8005454:	d018      	beq.n	8005488 <HAL_DMA_IRQHandler+0x164>
 8005456:	3218      	adds	r2, #24
 8005458:	4293      	cmp	r3, r2
 800545a:	d015      	beq.n	8005488 <HAL_DMA_IRQHandler+0x164>
 800545c:	3218      	adds	r2, #24
 800545e:	4293      	cmp	r3, r2
 8005460:	d012      	beq.n	8005488 <HAL_DMA_IRQHandler+0x164>
 8005462:	3218      	adds	r2, #24
 8005464:	4293      	cmp	r3, r2
 8005466:	d00f      	beq.n	8005488 <HAL_DMA_IRQHandler+0x164>
 8005468:	3218      	adds	r2, #24
 800546a:	4293      	cmp	r3, r2
 800546c:	d00c      	beq.n	8005488 <HAL_DMA_IRQHandler+0x164>
 800546e:	3218      	adds	r2, #24
 8005470:	4293      	cmp	r3, r2
 8005472:	d009      	beq.n	8005488 <HAL_DMA_IRQHandler+0x164>
 8005474:	3218      	adds	r2, #24
 8005476:	4293      	cmp	r3, r2
 8005478:	d006      	beq.n	8005488 <HAL_DMA_IRQHandler+0x164>
 800547a:	3218      	adds	r2, #24
 800547c:	4293      	cmp	r3, r2
 800547e:	d003      	beq.n	8005488 <HAL_DMA_IRQHandler+0x164>
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8005486:	e002      	b.n	800548e <HAL_DMA_IRQHandler+0x16a>
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800548e:	b16a      	cbz	r2, 80054ac <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	f022 0204 	bic.w	r2, r2, #4
 8005496:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005498:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800549a:	f003 021f 	and.w	r2, r3, #31
 800549e:	2308      	movs	r3, #8
 80054a0:	4093      	lsls	r3, r2
 80054a2:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80054a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80054a6:	f043 0301 	orr.w	r3, r3, #1
 80054aa:	6563      	str	r3, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054ac:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80054ae:	f002 021f 	and.w	r2, r2, #31
 80054b2:	fa26 f302 	lsr.w	r3, r6, r2
 80054b6:	f013 0f01 	tst.w	r3, #1
 80054ba:	d047      	beq.n	800554c <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	481b      	ldr	r0, [pc, #108]	@ (800552c <HAL_DMA_IRQHandler+0x208>)
 80054c0:	491b      	ldr	r1, [pc, #108]	@ (8005530 <HAL_DMA_IRQHandler+0x20c>)
 80054c2:	428b      	cmp	r3, r1
 80054c4:	bf18      	it	ne
 80054c6:	4283      	cmpne	r3, r0
 80054c8:	d03c      	beq.n	8005544 <HAL_DMA_IRQHandler+0x220>
 80054ca:	3118      	adds	r1, #24
 80054cc:	428b      	cmp	r3, r1
 80054ce:	d039      	beq.n	8005544 <HAL_DMA_IRQHandler+0x220>
 80054d0:	3118      	adds	r1, #24
 80054d2:	428b      	cmp	r3, r1
 80054d4:	d036      	beq.n	8005544 <HAL_DMA_IRQHandler+0x220>
 80054d6:	3118      	adds	r1, #24
 80054d8:	428b      	cmp	r3, r1
 80054da:	d033      	beq.n	8005544 <HAL_DMA_IRQHandler+0x220>
 80054dc:	3118      	adds	r1, #24
 80054de:	428b      	cmp	r3, r1
 80054e0:	d030      	beq.n	8005544 <HAL_DMA_IRQHandler+0x220>
 80054e2:	3118      	adds	r1, #24
 80054e4:	428b      	cmp	r3, r1
 80054e6:	d02d      	beq.n	8005544 <HAL_DMA_IRQHandler+0x220>
 80054e8:	3118      	adds	r1, #24
 80054ea:	428b      	cmp	r3, r1
 80054ec:	d02a      	beq.n	8005544 <HAL_DMA_IRQHandler+0x220>
 80054ee:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80054f2:	428b      	cmp	r3, r1
 80054f4:	d026      	beq.n	8005544 <HAL_DMA_IRQHandler+0x220>
 80054f6:	3118      	adds	r1, #24
 80054f8:	428b      	cmp	r3, r1
 80054fa:	d023      	beq.n	8005544 <HAL_DMA_IRQHandler+0x220>
 80054fc:	3118      	adds	r1, #24
 80054fe:	428b      	cmp	r3, r1
 8005500:	d020      	beq.n	8005544 <HAL_DMA_IRQHandler+0x220>
 8005502:	3118      	adds	r1, #24
 8005504:	428b      	cmp	r3, r1
 8005506:	d01d      	beq.n	8005544 <HAL_DMA_IRQHandler+0x220>
 8005508:	3118      	adds	r1, #24
 800550a:	428b      	cmp	r3, r1
 800550c:	d01a      	beq.n	8005544 <HAL_DMA_IRQHandler+0x220>
 800550e:	3118      	adds	r1, #24
 8005510:	428b      	cmp	r3, r1
 8005512:	d017      	beq.n	8005544 <HAL_DMA_IRQHandler+0x220>
 8005514:	3118      	adds	r1, #24
 8005516:	428b      	cmp	r3, r1
 8005518:	d014      	beq.n	8005544 <HAL_DMA_IRQHandler+0x220>
 800551a:	3118      	adds	r1, #24
 800551c:	428b      	cmp	r3, r1
 800551e:	d011      	beq.n	8005544 <HAL_DMA_IRQHandler+0x220>
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	e013      	b.n	800554c <HAL_DMA_IRQHandler+0x228>
 8005524:	24000004 	.word	0x24000004
 8005528:	1b4e81b5 	.word	0x1b4e81b5
 800552c:	40020010 	.word	0x40020010
 8005530:	40020028 	.word	0x40020028
 8005534:	40020040 	.word	0x40020040
 8005538:	58025408 	.word	0x58025408
 800553c:	5802541c 	.word	0x5802541c
 8005540:	58025430 	.word	0x58025430
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800554a:	d13b      	bne.n	80055c4 <HAL_DMA_IRQHandler+0x2a0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800554c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800554e:	f003 031f 	and.w	r3, r3, #31
 8005552:	2204      	movs	r2, #4
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	4233      	tst	r3, r6
 800555a:	d03f      	beq.n	80055dc <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800555c:	6822      	ldr	r2, [r4, #0]
 800555e:	4896      	ldr	r0, [pc, #600]	@ (80057b8 <HAL_DMA_IRQHandler+0x494>)
 8005560:	4996      	ldr	r1, [pc, #600]	@ (80057bc <HAL_DMA_IRQHandler+0x498>)
 8005562:	428a      	cmp	r2, r1
 8005564:	bf18      	it	ne
 8005566:	4282      	cmpne	r2, r0
 8005568:	d034      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x2b0>
 800556a:	3118      	adds	r1, #24
 800556c:	428a      	cmp	r2, r1
 800556e:	d031      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x2b0>
 8005570:	3118      	adds	r1, #24
 8005572:	428a      	cmp	r2, r1
 8005574:	d02e      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x2b0>
 8005576:	3118      	adds	r1, #24
 8005578:	428a      	cmp	r2, r1
 800557a:	d02b      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x2b0>
 800557c:	3118      	adds	r1, #24
 800557e:	428a      	cmp	r2, r1
 8005580:	d028      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x2b0>
 8005582:	3118      	adds	r1, #24
 8005584:	428a      	cmp	r2, r1
 8005586:	d025      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x2b0>
 8005588:	3118      	adds	r1, #24
 800558a:	428a      	cmp	r2, r1
 800558c:	d022      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x2b0>
 800558e:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8005592:	428a      	cmp	r2, r1
 8005594:	d01e      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x2b0>
 8005596:	3118      	adds	r1, #24
 8005598:	428a      	cmp	r2, r1
 800559a:	d01b      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x2b0>
 800559c:	3118      	adds	r1, #24
 800559e:	428a      	cmp	r2, r1
 80055a0:	d018      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x2b0>
 80055a2:	3118      	adds	r1, #24
 80055a4:	428a      	cmp	r2, r1
 80055a6:	d015      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x2b0>
 80055a8:	3118      	adds	r1, #24
 80055aa:	428a      	cmp	r2, r1
 80055ac:	d012      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x2b0>
 80055ae:	3118      	adds	r1, #24
 80055b0:	428a      	cmp	r2, r1
 80055b2:	d00f      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x2b0>
 80055b4:	3118      	adds	r1, #24
 80055b6:	428a      	cmp	r2, r1
 80055b8:	d00c      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x2b0>
 80055ba:	3118      	adds	r1, #24
 80055bc:	428a      	cmp	r2, r1
 80055be:	d009      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x2b0>
 80055c0:	6813      	ldr	r3, [r2, #0]
 80055c2:	e00b      	b.n	80055dc <HAL_DMA_IRQHandler+0x2b8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055c4:	2301      	movs	r3, #1
 80055c6:	4093      	lsls	r3, r2
 80055c8:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80055ca:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80055cc:	f043 0302 	orr.w	r3, r3, #2
 80055d0:	6563      	str	r3, [r4, #84]	@ 0x54
 80055d2:	e7bb      	b.n	800554c <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	f012 0f02 	tst.w	r2, #2
 80055da:	d13d      	bne.n	8005658 <HAL_DMA_IRQHandler+0x334>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055dc:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	2210      	movs	r2, #16
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	4233      	tst	r3, r6
 80055ea:	d05f      	beq.n	80056ac <HAL_DMA_IRQHandler+0x388>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80055ec:	6822      	ldr	r2, [r4, #0]
 80055ee:	4872      	ldr	r0, [pc, #456]	@ (80057b8 <HAL_DMA_IRQHandler+0x494>)
 80055f0:	4972      	ldr	r1, [pc, #456]	@ (80057bc <HAL_DMA_IRQHandler+0x498>)
 80055f2:	428a      	cmp	r2, r1
 80055f4:	bf18      	it	ne
 80055f6:	4282      	cmpne	r2, r0
 80055f8:	d034      	beq.n	8005664 <HAL_DMA_IRQHandler+0x340>
 80055fa:	3118      	adds	r1, #24
 80055fc:	428a      	cmp	r2, r1
 80055fe:	d031      	beq.n	8005664 <HAL_DMA_IRQHandler+0x340>
 8005600:	3118      	adds	r1, #24
 8005602:	428a      	cmp	r2, r1
 8005604:	d02e      	beq.n	8005664 <HAL_DMA_IRQHandler+0x340>
 8005606:	3118      	adds	r1, #24
 8005608:	428a      	cmp	r2, r1
 800560a:	d02b      	beq.n	8005664 <HAL_DMA_IRQHandler+0x340>
 800560c:	3118      	adds	r1, #24
 800560e:	428a      	cmp	r2, r1
 8005610:	d028      	beq.n	8005664 <HAL_DMA_IRQHandler+0x340>
 8005612:	3118      	adds	r1, #24
 8005614:	428a      	cmp	r2, r1
 8005616:	d025      	beq.n	8005664 <HAL_DMA_IRQHandler+0x340>
 8005618:	3118      	adds	r1, #24
 800561a:	428a      	cmp	r2, r1
 800561c:	d022      	beq.n	8005664 <HAL_DMA_IRQHandler+0x340>
 800561e:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8005622:	428a      	cmp	r2, r1
 8005624:	d01e      	beq.n	8005664 <HAL_DMA_IRQHandler+0x340>
 8005626:	3118      	adds	r1, #24
 8005628:	428a      	cmp	r2, r1
 800562a:	d01b      	beq.n	8005664 <HAL_DMA_IRQHandler+0x340>
 800562c:	3118      	adds	r1, #24
 800562e:	428a      	cmp	r2, r1
 8005630:	d018      	beq.n	8005664 <HAL_DMA_IRQHandler+0x340>
 8005632:	3118      	adds	r1, #24
 8005634:	428a      	cmp	r2, r1
 8005636:	d015      	beq.n	8005664 <HAL_DMA_IRQHandler+0x340>
 8005638:	3118      	adds	r1, #24
 800563a:	428a      	cmp	r2, r1
 800563c:	d012      	beq.n	8005664 <HAL_DMA_IRQHandler+0x340>
 800563e:	3118      	adds	r1, #24
 8005640:	428a      	cmp	r2, r1
 8005642:	d00f      	beq.n	8005664 <HAL_DMA_IRQHandler+0x340>
 8005644:	3118      	adds	r1, #24
 8005646:	428a      	cmp	r2, r1
 8005648:	d00c      	beq.n	8005664 <HAL_DMA_IRQHandler+0x340>
 800564a:	3118      	adds	r1, #24
 800564c:	428a      	cmp	r2, r1
 800564e:	d009      	beq.n	8005664 <HAL_DMA_IRQHandler+0x340>
 8005650:	6812      	ldr	r2, [r2, #0]
 8005652:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8005656:	e008      	b.n	800566a <HAL_DMA_IRQHandler+0x346>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005658:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800565a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800565c:	f043 0304 	orr.w	r3, r3, #4
 8005660:	6563      	str	r3, [r4, #84]	@ 0x54
 8005662:	e7bb      	b.n	80055dc <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005664:	6812      	ldr	r2, [r2, #0]
 8005666:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800566a:	b1fa      	cbz	r2, 80056ac <HAL_DMA_IRQHandler+0x388>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800566c:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8005676:	d00d      	beq.n	8005694 <HAL_DMA_IRQHandler+0x370>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800567e:	d104      	bne.n	800568a <HAL_DMA_IRQHandler+0x366>
            if(hdma->XferHalfCpltCallback != NULL)
 8005680:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005682:	b19b      	cbz	r3, 80056ac <HAL_DMA_IRQHandler+0x388>
              hdma->XferHalfCpltCallback(hdma);
 8005684:	4620      	mov	r0, r4
 8005686:	4798      	blx	r3
 8005688:	e010      	b.n	80056ac <HAL_DMA_IRQHandler+0x388>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800568a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800568c:	b173      	cbz	r3, 80056ac <HAL_DMA_IRQHandler+0x388>
              hdma->XferM1HalfCpltCallback(hdma);
 800568e:	4620      	mov	r0, r4
 8005690:	4798      	blx	r3
 8005692:	e00b      	b.n	80056ac <HAL_DMA_IRQHandler+0x388>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800569a:	d103      	bne.n	80056a4 <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	f022 0208 	bic.w	r2, r2, #8
 80056a2:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80056a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80056a6:	b10b      	cbz	r3, 80056ac <HAL_DMA_IRQHandler+0x388>
            hdma->XferHalfCpltCallback(hdma);
 80056a8:	4620      	mov	r0, r4
 80056aa:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056ac:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	2220      	movs	r2, #32
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	4233      	tst	r3, r6
 80056ba:	f000 8093 	beq.w	80057e4 <HAL_DMA_IRQHandler+0x4c0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80056be:	6822      	ldr	r2, [r4, #0]
 80056c0:	483d      	ldr	r0, [pc, #244]	@ (80057b8 <HAL_DMA_IRQHandler+0x494>)
 80056c2:	493e      	ldr	r1, [pc, #248]	@ (80057bc <HAL_DMA_IRQHandler+0x498>)
 80056c4:	428a      	cmp	r2, r1
 80056c6:	bf18      	it	ne
 80056c8:	4282      	cmpne	r2, r0
 80056ca:	d02e      	beq.n	800572a <HAL_DMA_IRQHandler+0x406>
 80056cc:	3118      	adds	r1, #24
 80056ce:	428a      	cmp	r2, r1
 80056d0:	d02b      	beq.n	800572a <HAL_DMA_IRQHandler+0x406>
 80056d2:	3118      	adds	r1, #24
 80056d4:	428a      	cmp	r2, r1
 80056d6:	d028      	beq.n	800572a <HAL_DMA_IRQHandler+0x406>
 80056d8:	3118      	adds	r1, #24
 80056da:	428a      	cmp	r2, r1
 80056dc:	d025      	beq.n	800572a <HAL_DMA_IRQHandler+0x406>
 80056de:	3118      	adds	r1, #24
 80056e0:	428a      	cmp	r2, r1
 80056e2:	d022      	beq.n	800572a <HAL_DMA_IRQHandler+0x406>
 80056e4:	3118      	adds	r1, #24
 80056e6:	428a      	cmp	r2, r1
 80056e8:	d01f      	beq.n	800572a <HAL_DMA_IRQHandler+0x406>
 80056ea:	3118      	adds	r1, #24
 80056ec:	428a      	cmp	r2, r1
 80056ee:	d01c      	beq.n	800572a <HAL_DMA_IRQHandler+0x406>
 80056f0:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80056f4:	428a      	cmp	r2, r1
 80056f6:	d018      	beq.n	800572a <HAL_DMA_IRQHandler+0x406>
 80056f8:	3118      	adds	r1, #24
 80056fa:	428a      	cmp	r2, r1
 80056fc:	d015      	beq.n	800572a <HAL_DMA_IRQHandler+0x406>
 80056fe:	3118      	adds	r1, #24
 8005700:	428a      	cmp	r2, r1
 8005702:	d012      	beq.n	800572a <HAL_DMA_IRQHandler+0x406>
 8005704:	3118      	adds	r1, #24
 8005706:	428a      	cmp	r2, r1
 8005708:	d00f      	beq.n	800572a <HAL_DMA_IRQHandler+0x406>
 800570a:	3118      	adds	r1, #24
 800570c:	428a      	cmp	r2, r1
 800570e:	d00c      	beq.n	800572a <HAL_DMA_IRQHandler+0x406>
 8005710:	3118      	adds	r1, #24
 8005712:	428a      	cmp	r2, r1
 8005714:	d009      	beq.n	800572a <HAL_DMA_IRQHandler+0x406>
 8005716:	3118      	adds	r1, #24
 8005718:	428a      	cmp	r2, r1
 800571a:	d006      	beq.n	800572a <HAL_DMA_IRQHandler+0x406>
 800571c:	3118      	adds	r1, #24
 800571e:	428a      	cmp	r2, r1
 8005720:	d003      	beq.n	800572a <HAL_DMA_IRQHandler+0x406>
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8005728:	e002      	b.n	8005730 <HAL_DMA_IRQHandler+0x40c>
 800572a:	6812      	ldr	r2, [r2, #0]
 800572c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8005730:	2a00      	cmp	r2, #0
 8005732:	d057      	beq.n	80057e4 <HAL_DMA_IRQHandler+0x4c0>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005734:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005736:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b04      	cmp	r3, #4
 800573e:	d00e      	beq.n	800575e <HAL_DMA_IRQHandler+0x43a>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8005748:	d03a      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x49c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8005750:	d12d      	bne.n	80057ae <HAL_DMA_IRQHandler+0x48a>
            if(hdma->XferM1CpltCallback != NULL)
 8005752:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005754:	2b00      	cmp	r3, #0
 8005756:	d045      	beq.n	80057e4 <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferM1CpltCallback(hdma);
 8005758:	4620      	mov	r0, r4
 800575a:	4798      	blx	r3
 800575c:	e042      	b.n	80057e4 <HAL_DMA_IRQHandler+0x4c0>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800575e:	6822      	ldr	r2, [r4, #0]
 8005760:	6813      	ldr	r3, [r2, #0]
 8005762:	f023 0316 	bic.w	r3, r3, #22
 8005766:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005768:	6822      	ldr	r2, [r4, #0]
 800576a:	6953      	ldr	r3, [r2, #20]
 800576c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005770:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005772:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005774:	b1bb      	cbz	r3, 80057a6 <HAL_DMA_IRQHandler+0x482>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005776:	6822      	ldr	r2, [r4, #0]
 8005778:	6813      	ldr	r3, [r2, #0]
 800577a:	f023 0308 	bic.w	r3, r3, #8
 800577e:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005780:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005782:	f003 021f 	and.w	r2, r3, #31
 8005786:	233f      	movs	r3, #63	@ 0x3f
 8005788:	4093      	lsls	r3, r2
 800578a:	60bb      	str	r3, [r7, #8]
          hdma->State = HAL_DMA_STATE_READY;
 800578c:	2301      	movs	r3, #1
 800578e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8005792:	2300      	movs	r3, #0
 8005794:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8005798:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 8080 	beq.w	80058a0 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferAbortCallback(hdma);
 80057a0:	4620      	mov	r0, r4
 80057a2:	4798      	blx	r3
          return;
 80057a4:	e07c      	b.n	80058a0 <HAL_DMA_IRQHandler+0x57c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057a6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e4      	bne.n	8005776 <HAL_DMA_IRQHandler+0x452>
 80057ac:	e7e8      	b.n	8005780 <HAL_DMA_IRQHandler+0x45c>
            if(hdma->XferCpltCallback != NULL)
 80057ae:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80057b0:	b1c3      	cbz	r3, 80057e4 <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferCpltCallback(hdma);
 80057b2:	4620      	mov	r0, r4
 80057b4:	4798      	blx	r3
 80057b6:	e015      	b.n	80057e4 <HAL_DMA_IRQHandler+0x4c0>
 80057b8:	40020010 	.word	0x40020010
 80057bc:	40020028 	.word	0x40020028
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80057c6:	d109      	bne.n	80057dc <HAL_DMA_IRQHandler+0x4b8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	f022 0210 	bic.w	r2, r2, #16
 80057ce:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80057d0:	2301      	movs	r3, #1
 80057d2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 80057d6:	2300      	movs	r3, #0
 80057d8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferCpltCallback != NULL)
 80057dc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80057de:	b10b      	cbz	r3, 80057e4 <HAL_DMA_IRQHandler+0x4c0>
            hdma->XferCpltCallback(hdma);
 80057e0:	4620      	mov	r0, r4
 80057e2:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80057e4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d05a      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x57c>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80057ea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80057ec:	f013 0f01 	tst.w	r3, #1
 80057f0:	d052      	beq.n	8005898 <HAL_DMA_IRQHandler+0x574>
        hdma->State = HAL_DMA_STATE_ABORT;
 80057f2:	2304      	movs	r3, #4
 80057f4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_DMA_DISABLE(hdma);
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	4996      	ldr	r1, [pc, #600]	@ (8005a54 <HAL_DMA_IRQHandler+0x730>)
 80057fc:	4a96      	ldr	r2, [pc, #600]	@ (8005a58 <HAL_DMA_IRQHandler+0x734>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	bf18      	it	ne
 8005802:	428b      	cmpne	r3, r1
 8005804:	d02f      	beq.n	8005866 <HAL_DMA_IRQHandler+0x542>
 8005806:	3218      	adds	r2, #24
 8005808:	4293      	cmp	r3, r2
 800580a:	d02c      	beq.n	8005866 <HAL_DMA_IRQHandler+0x542>
 800580c:	3218      	adds	r2, #24
 800580e:	4293      	cmp	r3, r2
 8005810:	d029      	beq.n	8005866 <HAL_DMA_IRQHandler+0x542>
 8005812:	3218      	adds	r2, #24
 8005814:	4293      	cmp	r3, r2
 8005816:	d026      	beq.n	8005866 <HAL_DMA_IRQHandler+0x542>
 8005818:	3218      	adds	r2, #24
 800581a:	4293      	cmp	r3, r2
 800581c:	d023      	beq.n	8005866 <HAL_DMA_IRQHandler+0x542>
 800581e:	3218      	adds	r2, #24
 8005820:	4293      	cmp	r3, r2
 8005822:	d020      	beq.n	8005866 <HAL_DMA_IRQHandler+0x542>
 8005824:	3218      	adds	r2, #24
 8005826:	4293      	cmp	r3, r2
 8005828:	d01d      	beq.n	8005866 <HAL_DMA_IRQHandler+0x542>
 800582a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800582e:	4293      	cmp	r3, r2
 8005830:	d019      	beq.n	8005866 <HAL_DMA_IRQHandler+0x542>
 8005832:	3218      	adds	r2, #24
 8005834:	4293      	cmp	r3, r2
 8005836:	d016      	beq.n	8005866 <HAL_DMA_IRQHandler+0x542>
 8005838:	3218      	adds	r2, #24
 800583a:	4293      	cmp	r3, r2
 800583c:	d013      	beq.n	8005866 <HAL_DMA_IRQHandler+0x542>
 800583e:	3218      	adds	r2, #24
 8005840:	4293      	cmp	r3, r2
 8005842:	d010      	beq.n	8005866 <HAL_DMA_IRQHandler+0x542>
 8005844:	3218      	adds	r2, #24
 8005846:	4293      	cmp	r3, r2
 8005848:	d00d      	beq.n	8005866 <HAL_DMA_IRQHandler+0x542>
 800584a:	3218      	adds	r2, #24
 800584c:	4293      	cmp	r3, r2
 800584e:	d00a      	beq.n	8005866 <HAL_DMA_IRQHandler+0x542>
 8005850:	3218      	adds	r2, #24
 8005852:	4293      	cmp	r3, r2
 8005854:	d007      	beq.n	8005866 <HAL_DMA_IRQHandler+0x542>
 8005856:	3218      	adds	r2, #24
 8005858:	4293      	cmp	r3, r2
 800585a:	d004      	beq.n	8005866 <HAL_DMA_IRQHandler+0x542>
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	f022 0201 	bic.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	e003      	b.n	800586e <HAL_DMA_IRQHandler+0x54a>
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	f022 0201 	bic.w	r2, r2, #1
 800586c:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 800586e:	9b01      	ldr	r3, [sp, #4]
 8005870:	3301      	adds	r3, #1
 8005872:	9301      	str	r3, [sp, #4]
 8005874:	42ab      	cmp	r3, r5
 8005876:	d804      	bhi.n	8005882 <HAL_DMA_IRQHandler+0x55e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f013 0f01 	tst.w	r3, #1
 8005880:	d1f5      	bne.n	800586e <HAL_DMA_IRQHandler+0x54a>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f013 0f01 	tst.w	r3, #1
 800588a:	d00b      	beq.n	80058a4 <HAL_DMA_IRQHandler+0x580>
          hdma->State = HAL_DMA_STATE_ERROR;
 800588c:	2303      	movs	r3, #3
 800588e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8005892:	2300      	movs	r3, #0
 8005894:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 8005898:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800589a:	b10b      	cbz	r3, 80058a0 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 800589c:	4620      	mov	r0, r4
 800589e:	4798      	blx	r3
}
 80058a0:	b003      	add	sp, #12
 80058a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 80058a4:	2301      	movs	r3, #1
 80058a6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
 80058aa:	e7f2      	b.n	8005892 <HAL_DMA_IRQHandler+0x56e>
          if(hdma->XferHalfCpltCallback != NULL)
 80058ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0f6      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferHalfCpltCallback(hdma);
 80058b2:	4620      	mov	r0, r4
 80058b4:	4798      	blx	r3
 80058b6:	e7f3      	b.n	80058a0 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80058b8:	f012 0f20 	tst.w	r2, #32
 80058bc:	d13a      	bne.n	8005934 <HAL_DMA_IRQHandler+0x610>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	4964      	ldr	r1, [pc, #400]	@ (8005a54 <HAL_DMA_IRQHandler+0x730>)
 80058c2:	4a65      	ldr	r2, [pc, #404]	@ (8005a58 <HAL_DMA_IRQHandler+0x734>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	bf18      	it	ne
 80058c8:	428b      	cmpne	r3, r1
 80058ca:	d02f      	beq.n	800592c <HAL_DMA_IRQHandler+0x608>
 80058cc:	3218      	adds	r2, #24
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d02c      	beq.n	800592c <HAL_DMA_IRQHandler+0x608>
 80058d2:	3218      	adds	r2, #24
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d029      	beq.n	800592c <HAL_DMA_IRQHandler+0x608>
 80058d8:	3218      	adds	r2, #24
 80058da:	4293      	cmp	r3, r2
 80058dc:	d026      	beq.n	800592c <HAL_DMA_IRQHandler+0x608>
 80058de:	3218      	adds	r2, #24
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d023      	beq.n	800592c <HAL_DMA_IRQHandler+0x608>
 80058e4:	3218      	adds	r2, #24
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d020      	beq.n	800592c <HAL_DMA_IRQHandler+0x608>
 80058ea:	3218      	adds	r2, #24
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d01d      	beq.n	800592c <HAL_DMA_IRQHandler+0x608>
 80058f0:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d019      	beq.n	800592c <HAL_DMA_IRQHandler+0x608>
 80058f8:	3218      	adds	r2, #24
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d016      	beq.n	800592c <HAL_DMA_IRQHandler+0x608>
 80058fe:	3218      	adds	r2, #24
 8005900:	4293      	cmp	r3, r2
 8005902:	d013      	beq.n	800592c <HAL_DMA_IRQHandler+0x608>
 8005904:	3218      	adds	r2, #24
 8005906:	4293      	cmp	r3, r2
 8005908:	d010      	beq.n	800592c <HAL_DMA_IRQHandler+0x608>
 800590a:	3218      	adds	r2, #24
 800590c:	4293      	cmp	r3, r2
 800590e:	d00d      	beq.n	800592c <HAL_DMA_IRQHandler+0x608>
 8005910:	3218      	adds	r2, #24
 8005912:	4293      	cmp	r3, r2
 8005914:	d00a      	beq.n	800592c <HAL_DMA_IRQHandler+0x608>
 8005916:	3218      	adds	r2, #24
 8005918:	4293      	cmp	r3, r2
 800591a:	d007      	beq.n	800592c <HAL_DMA_IRQHandler+0x608>
 800591c:	3218      	adds	r2, #24
 800591e:	4293      	cmp	r3, r2
 8005920:	d004      	beq.n	800592c <HAL_DMA_IRQHandler+0x608>
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	f022 0204 	bic.w	r2, r2, #4
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	e003      	b.n	8005934 <HAL_DMA_IRQHandler+0x610>
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	f022 0208 	bic.w	r2, r2, #8
 8005932:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8005934:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0b2      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferHalfCpltCallback(hdma);
 800593a:	4620      	mov	r0, r4
 800593c:	4798      	blx	r3
 800593e:	e7af      	b.n	80058a0 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005940:	2002      	movs	r0, #2
 8005942:	4088      	lsls	r0, r1
 8005944:	ea10 0f0c 	tst.w	r0, ip
 8005948:	d060      	beq.n	8005a0c <HAL_DMA_IRQHandler+0x6e8>
 800594a:	f012 0f02 	tst.w	r2, #2
 800594e:	d05d      	beq.n	8005a0c <HAL_DMA_IRQHandler+0x6e8>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005950:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005952:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8005956:	d00e      	beq.n	8005976 <HAL_DMA_IRQHandler+0x652>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005958:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 800595c:	d105      	bne.n	800596a <HAL_DMA_IRQHandler+0x646>
          if(hdma->XferM1CpltCallback != NULL)
 800595e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005960:	2b00      	cmp	r3, #0
 8005962:	d09d      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1CpltCallback(hdma);
 8005964:	4620      	mov	r0, r4
 8005966:	4798      	blx	r3
 8005968:	e79a      	b.n	80058a0 <HAL_DMA_IRQHandler+0x57c>
          if(hdma->XferCpltCallback != NULL)
 800596a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800596c:	2b00      	cmp	r3, #0
 800596e:	d097      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferCpltCallback(hdma);
 8005970:	4620      	mov	r0, r4
 8005972:	4798      	blx	r3
 8005974:	e794      	b.n	80058a0 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005976:	f012 0f20 	tst.w	r2, #32
 800597a:	d140      	bne.n	80059fe <HAL_DMA_IRQHandler+0x6da>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	4935      	ldr	r1, [pc, #212]	@ (8005a54 <HAL_DMA_IRQHandler+0x730>)
 8005980:	4a35      	ldr	r2, [pc, #212]	@ (8005a58 <HAL_DMA_IRQHandler+0x734>)
 8005982:	4293      	cmp	r3, r2
 8005984:	bf18      	it	ne
 8005986:	428b      	cmpne	r3, r1
 8005988:	d02f      	beq.n	80059ea <HAL_DMA_IRQHandler+0x6c6>
 800598a:	3218      	adds	r2, #24
 800598c:	4293      	cmp	r3, r2
 800598e:	d02c      	beq.n	80059ea <HAL_DMA_IRQHandler+0x6c6>
 8005990:	3218      	adds	r2, #24
 8005992:	4293      	cmp	r3, r2
 8005994:	d029      	beq.n	80059ea <HAL_DMA_IRQHandler+0x6c6>
 8005996:	3218      	adds	r2, #24
 8005998:	4293      	cmp	r3, r2
 800599a:	d026      	beq.n	80059ea <HAL_DMA_IRQHandler+0x6c6>
 800599c:	3218      	adds	r2, #24
 800599e:	4293      	cmp	r3, r2
 80059a0:	d023      	beq.n	80059ea <HAL_DMA_IRQHandler+0x6c6>
 80059a2:	3218      	adds	r2, #24
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d020      	beq.n	80059ea <HAL_DMA_IRQHandler+0x6c6>
 80059a8:	3218      	adds	r2, #24
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d01d      	beq.n	80059ea <HAL_DMA_IRQHandler+0x6c6>
 80059ae:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d019      	beq.n	80059ea <HAL_DMA_IRQHandler+0x6c6>
 80059b6:	3218      	adds	r2, #24
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d016      	beq.n	80059ea <HAL_DMA_IRQHandler+0x6c6>
 80059bc:	3218      	adds	r2, #24
 80059be:	4293      	cmp	r3, r2
 80059c0:	d013      	beq.n	80059ea <HAL_DMA_IRQHandler+0x6c6>
 80059c2:	3218      	adds	r2, #24
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d010      	beq.n	80059ea <HAL_DMA_IRQHandler+0x6c6>
 80059c8:	3218      	adds	r2, #24
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00d      	beq.n	80059ea <HAL_DMA_IRQHandler+0x6c6>
 80059ce:	3218      	adds	r2, #24
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00a      	beq.n	80059ea <HAL_DMA_IRQHandler+0x6c6>
 80059d4:	3218      	adds	r2, #24
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d007      	beq.n	80059ea <HAL_DMA_IRQHandler+0x6c6>
 80059da:	3218      	adds	r2, #24
 80059dc:	4293      	cmp	r3, r2
 80059de:	d004      	beq.n	80059ea <HAL_DMA_IRQHandler+0x6c6>
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	f022 020a 	bic.w	r2, r2, #10
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	e003      	b.n	80059f2 <HAL_DMA_IRQHandler+0x6ce>
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	f022 0214 	bic.w	r2, r2, #20
 80059f0:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80059f2:	2301      	movs	r3, #1
 80059f4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80059f8:	2300      	movs	r3, #0
 80059fa:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80059fe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f43f af4d 	beq.w	80058a0 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferCpltCallback(hdma);
 8005a06:	4620      	mov	r0, r4
 8005a08:	4798      	blx	r3
 8005a0a:	e749      	b.n	80058a0 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005a0c:	2008      	movs	r0, #8
 8005a0e:	fa00 f101 	lsl.w	r1, r0, r1
 8005a12:	ea11 0f0c 	tst.w	r1, ip
 8005a16:	f43f af43 	beq.w	80058a0 <HAL_DMA_IRQHandler+0x57c>
 8005a1a:	f012 0f08 	tst.w	r2, #8
 8005a1e:	f43f af3f 	beq.w	80058a0 <HAL_DMA_IRQHandler+0x57c>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	f022 020e 	bic.w	r2, r2, #14
 8005a28:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005a2a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	2201      	movs	r2, #1
 8005a32:	fa02 f303 	lsl.w	r3, r2, r3
 8005a36:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a38:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_READY;
 8005a3a:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if (hdma->XferErrorCallback != NULL)
 8005a44:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f43f af2a 	beq.w	80058a0 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	4798      	blx	r3
  }
 8005a50:	e726      	b.n	80058a0 <HAL_DMA_IRQHandler+0x57c>
 8005a52:	bf00      	nop
 8005a54:	40020010 	.word	0x40020010
 8005a58:	40020028 	.word	0x40020028

08005a5c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005a5c:	b430      	push	{r4, r5}
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005a5e:	6b41      	ldr	r1, [r0, #52]	@ 0x34

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005a60:	6804      	ldr	r4, [r0, #0]
 8005a62:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8005a66:	4a6f      	ldr	r2, [pc, #444]	@ (8005c24 <FDCAN_CalcultateRamBlockAddresses+0x1c8>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8005a6e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005a72:	6804      	ldr	r4, [r0, #0]
 8005a74:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8005a78:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8005a7c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8005a7e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8005a82:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005a86:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005a88:	440b      	add	r3, r1
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005a8a:	6804      	ldr	r4, [r0, #0]
 8005a8c:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8005a90:	4011      	ands	r1, r2
 8005a92:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005a96:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005a9a:	6804      	ldr	r4, [r0, #0]
 8005a9c:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8005aa0:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 8005aa4:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8005aa6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005aaa:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005aae:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8005ab0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005ab4:	6804      	ldr	r4, [r0, #0]
 8005ab6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8005aba:	4011      	ands	r1, r2
 8005abc:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005ac0:	f8c4 10a0 	str.w	r1, [r4, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005ac4:	6804      	ldr	r4, [r0, #0]
 8005ac6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8005aca:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 8005ace:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8005ad0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005ad4:	f8c4 10a0 	str.w	r1, [r4, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005ad8:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8005ada:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005adc:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005ae0:	6804      	ldr	r4, [r0, #0]
 8005ae2:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8005ae6:	4011      	ands	r1, r2
 8005ae8:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005aec:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005af0:	6804      	ldr	r4, [r0, #0]
 8005af2:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8005af6:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 8005afa:	6c85      	ldr	r5, [r0, #72]	@ 0x48
 8005afc:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005b00:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005b04:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005b06:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8005b08:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005b0c:	6804      	ldr	r4, [r0, #0]
 8005b0e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8005b12:	4011      	ands	r1, r2
 8005b14:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005b18:	f8c4 10ac 	str.w	r1, [r4, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005b1c:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8005b1e:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8005b20:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005b24:	6804      	ldr	r4, [r0, #0]
 8005b26:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 8005b2a:	4011      	ands	r1, r2
 8005b2c:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005b30:	f8c4 10f0 	str.w	r1, [r4, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005b34:	6804      	ldr	r4, [r0, #0]
 8005b36:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 8005b3a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
 8005b3e:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8005b40:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005b44:	f8c4 10f0 	str.w	r1, [r4, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005b48:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8005b4a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005b4e:	6804      	ldr	r4, [r0, #0]
 8005b50:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 8005b54:	400a      	ands	r2, r1
 8005b56:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 8005b5a:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005b5e:	6802      	ldr	r2, [r0, #0]
 8005b60:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005b64:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8005b68:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 8005b6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005b6e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005b72:	6802      	ldr	r2, [r0, #0]
 8005b74:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005b78:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8005b7c:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 8005b7e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005b82:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005b86:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8005b88:	4a27      	ldr	r2, [pc, #156]	@ (8005c28 <FDCAN_CalcultateRamBlockAddresses+0x1cc>)
 8005b8a:	441a      	add	r2, r3
 8005b8c:	0092      	lsls	r2, r2, #2
 8005b8e:	66c2      	str	r2, [r0, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005b90:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005b92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b96:	6703      	str	r3, [r0, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005b98:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8005b9a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005b9e:	6743      	str	r3, [r0, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005ba0:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8005ba2:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005ba4:	fb04 f101 	mul.w	r1, r4, r1
 8005ba8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005bac:	6783      	str	r3, [r0, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005bae:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005bb0:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8005bb2:	fb04 f101 	mul.w	r1, r4, r1
 8005bb6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005bba:	67c3      	str	r3, [r0, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005bbc:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8005bbe:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8005bc0:	fb04 f101 	mul.w	r1, r4, r1
 8005bc4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005bc8:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005bcc:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8005bce:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005bd2:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005bd6:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8005bd8:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 8005bda:	fb01 fc04 	mul.w	ip, r1, r4
 8005bde:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8005be2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005be6:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 8005be8:	fb04 f101 	mul.w	r1, r4, r1
 8005bec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005bf0:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005bf4:	490d      	ldr	r1, [pc, #52]	@ (8005c2c <FDCAN_CalcultateRamBlockAddresses+0x1d0>)
 8005bf6:	428b      	cmp	r3, r1
 8005bf8:	d90d      	bls.n	8005c16 <FDCAN_CalcultateRamBlockAddresses+0x1ba>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005bfa:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005bfe:	f043 0320 	orr.w	r3, r3, #32
 8005c02:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005c06:	2303      	movs	r3, #3
 8005c08:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98

    return HAL_ERROR;
 8005c0c:	2001      	movs	r0, #1
 8005c0e:	e007      	b.n	8005c20 <FDCAN_CalcultateRamBlockAddresses+0x1c4>
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005c10:	2300      	movs	r3, #0
 8005c12:	f842 3b04 	str.w	r3, [r2], #4
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005c16:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d8f8      	bhi.n	8005c10 <FDCAN_CalcultateRamBlockAddresses+0x1b4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005c1e:	2000      	movs	r0, #0
}
 8005c20:	bc30      	pop	{r4, r5}
 8005c22:	4770      	bx	lr
 8005c24:	ffff0003 	.word	0xffff0003
 8005c28:	10002b00 	.word	0x10002b00
 8005c2c:	4000d3fc 	.word	0x4000d3fc

08005c30 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8005c30:	b570      	push	{r4, r5, r6, lr}
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005c32:	684c      	ldr	r4, [r1, #4]
 8005c34:	b9f4      	cbnz	r4, 8005c74 <FDCAN_CopyMessageToRAM+0x44>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005c36:	690d      	ldr	r5, [r1, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005c38:	688c      	ldr	r4, [r1, #8]
                   FDCAN_STANDARD_ID |
 8005c3a:	4325      	orrs	r5, r4
                   (pTxHeader->Identifier << 18));
 8005c3c:	680c      	ldr	r4, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005c3e:	ea45 4584 	orr.w	r5, r5, r4, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005c42:	6a0e      	ldr	r6, [r1, #32]
                 pTxHeader->TxEventFifoControl |
 8005c44:	69cc      	ldr	r4, [r1, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005c46:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
                 pTxHeader->FDFormat |
 8005c4a:	698e      	ldr	r6, [r1, #24]
                 pTxHeader->TxEventFifoControl |
 8005c4c:	4334      	orrs	r4, r6
                 pTxHeader->BitRateSwitch |
 8005c4e:	694e      	ldr	r6, [r1, #20]
                 pTxHeader->FDFormat |
 8005c50:	4334      	orrs	r4, r6
                 pTxHeader->DataLength);
 8005c52:	68ce      	ldr	r6, [r1, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005c54:	4334      	orrs	r4, r6

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005c56:	f8d0 6084 	ldr.w	r6, [r0, #132]	@ 0x84
 8005c5a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8005c5c:	fb00 f303 	mul.w	r3, r0, r3
 8005c60:	eb06 0e83 	add.w	lr, r6, r3, lsl #2

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005c64:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
  TxAddress++;
  *TxAddress = TxElementW2;
 8005c68:	f8ce 4004 	str.w	r4, [lr, #4]
  TxAddress++;
 8005c6c:	f10e 0e08 	add.w	lr, lr, #8

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005c70:	2000      	movs	r0, #0
 8005c72:	e019      	b.n	8005ca8 <FDCAN_CopyMessageToRAM+0x78>
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005c74:	690c      	ldr	r4, [r1, #16]
                   pTxHeader->TxFrameType |
 8005c76:	688d      	ldr	r5, [r1, #8]
                   FDCAN_EXTENDED_ID |
 8005c78:	4325      	orrs	r5, r4
                   pTxHeader->Identifier);
 8005c7a:	680c      	ldr	r4, [r1, #0]
                   pTxHeader->TxFrameType |
 8005c7c:	4325      	orrs	r5, r4
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005c7e:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
 8005c82:	e7de      	b.n	8005c42 <FDCAN_CopyMessageToRAM+0x12>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005c84:	eb02 0c00 	add.w	ip, r2, r0
 8005c88:	f89c 4003 	ldrb.w	r4, [ip, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005c8c:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8005c90:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005c92:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8005c96:	f89c 4001 	ldrb.w	r4, [ip, #1]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005c9a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                  (uint32_t)pTxData[ByteCounter]);
 8005c9e:	5c14      	ldrb	r4, [r2, r0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8005ca0:	4323      	orrs	r3, r4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005ca2:	f84e 3b04 	str.w	r3, [lr], #4
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005ca6:	3004      	adds	r0, #4
 8005ca8:	89cb      	ldrh	r3, [r1, #14]
 8005caa:	4c02      	ldr	r4, [pc, #8]	@ (8005cb4 <FDCAN_CopyMessageToRAM+0x84>)
 8005cac:	5ce3      	ldrb	r3, [r4, r3]
 8005cae:	4283      	cmp	r3, r0
 8005cb0:	d8e8      	bhi.n	8005c84 <FDCAN_CopyMessageToRAM+0x54>
    TxAddress++;
  }
}
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
 8005cb4:	0801c7e8 	.word	0x0801c7e8

08005cb8 <HAL_FDCAN_Init>:
{
 8005cb8:	b530      	push	{r4, r5, lr}
 8005cba:	b095      	sub	sp, #84	@ 0x54
 8005cbc:	4604      	mov	r4, r0
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005cbe:	224c      	movs	r2, #76	@ 0x4c
 8005cc0:	49a0      	ldr	r1, [pc, #640]	@ (8005f44 <HAL_FDCAN_Init+0x28c>)
 8005cc2:	a801      	add	r0, sp, #4
 8005cc4:	f016 fbd6 	bl	801c474 <memcpy>
  if (hfdcan == NULL)
 8005cc8:	2c00      	cmp	r4, #0
 8005cca:	f000 8138 	beq.w	8005f3e <HAL_FDCAN_Init+0x286>
  if (hfdcan->Instance == FDCAN1)
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	4a9d      	ldr	r2, [pc, #628]	@ (8005f48 <HAL_FDCAN_Init+0x290>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d020      	beq.n	8005d18 <HAL_FDCAN_Init+0x60>
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005cd6:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8005cda:	b30b      	cbz	r3, 8005d20 <HAL_FDCAN_Init+0x68>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005cdc:	6822      	ldr	r2, [r4, #0]
 8005cde:	6993      	ldr	r3, [r2, #24]
 8005ce0:	f023 0310 	bic.w	r3, r3, #16
 8005ce4:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 8005ce6:	f7fd fcf9 	bl	80036dc <HAL_GetTick>
 8005cea:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	699a      	ldr	r2, [r3, #24]
 8005cf0:	f012 0f08 	tst.w	r2, #8
 8005cf4:	d01a      	beq.n	8005d2c <HAL_FDCAN_Init+0x74>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005cf6:	f7fd fcf1 	bl	80036dc <HAL_GetTick>
 8005cfa:	1b43      	subs	r3, r0, r5
 8005cfc:	2b0a      	cmp	r3, #10
 8005cfe:	d9f5      	bls.n	8005cec <HAL_FDCAN_Init+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005d00:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005d04:	f043 0301 	orr.w	r3, r3, #1
 8005d08:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
      return HAL_ERROR;
 8005d12:	2001      	movs	r0, #1
}
 8005d14:	b015      	add	sp, #84	@ 0x54
 8005d16:	bd30      	pop	{r4, r5, pc}
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005d18:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005d1c:	6063      	str	r3, [r4, #4]
 8005d1e:	e7da      	b.n	8005cd6 <HAL_FDCAN_Init+0x1e>
    hfdcan->Lock = HAL_UNLOCKED;
 8005d20:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
    HAL_FDCAN_MspInit(hfdcan);
 8005d24:	4620      	mov	r0, r4
 8005d26:	f7fc fcbb 	bl	80026a0 <HAL_FDCAN_MspInit>
 8005d2a:	e7d7      	b.n	8005cdc <HAL_FDCAN_Init+0x24>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	f042 0201 	orr.w	r2, r2, #1
 8005d32:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8005d34:	f7fd fcd2 	bl	80036dc <HAL_GetTick>
 8005d38:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	699a      	ldr	r2, [r3, #24]
 8005d3e:	f012 0f01 	tst.w	r2, #1
 8005d42:	d10f      	bne.n	8005d64 <HAL_FDCAN_Init+0xac>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005d44:	f7fd fcca 	bl	80036dc <HAL_GetTick>
 8005d48:	1b40      	subs	r0, r0, r5
 8005d4a:	280a      	cmp	r0, #10
 8005d4c:	d9f5      	bls.n	8005d3a <HAL_FDCAN_Init+0x82>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005d4e:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005d52:	f043 0301 	orr.w	r3, r3, #1
 8005d56:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
      return HAL_ERROR;
 8005d60:	2001      	movs	r0, #1
 8005d62:	e7d7      	b.n	8005d14 <HAL_FDCAN_Init+0x5c>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005d64:	699a      	ldr	r2, [r3, #24]
 8005d66:	f042 0202 	orr.w	r2, r2, #2
 8005d6a:	619a      	str	r2, [r3, #24]
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005d6c:	7c23      	ldrb	r3, [r4, #16]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d040      	beq.n	8005df4 <HAL_FDCAN_Init+0x13c>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005d72:	6822      	ldr	r2, [r4, #0]
 8005d74:	6993      	ldr	r3, [r2, #24]
 8005d76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d7a:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005d7c:	7c63      	ldrb	r3, [r4, #17]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d03e      	beq.n	8005e00 <HAL_FDCAN_Init+0x148>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005d82:	6822      	ldr	r2, [r4, #0]
 8005d84:	6993      	ldr	r3, [r2, #24]
 8005d86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d8a:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005d8c:	7ca3      	ldrb	r3, [r4, #18]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d03c      	beq.n	8005e0c <HAL_FDCAN_Init+0x154>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005d92:	6822      	ldr	r2, [r4, #0]
 8005d94:	6993      	ldr	r3, [r2, #24]
 8005d96:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005d9a:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005d9c:	6822      	ldr	r2, [r4, #0]
 8005d9e:	6993      	ldr	r3, [r2, #24]
 8005da0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005da4:	68a1      	ldr	r1, [r4, #8]
 8005da6:	430b      	orrs	r3, r1
 8005da8:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005daa:	6822      	ldr	r2, [r4, #0]
 8005dac:	6993      	ldr	r3, [r2, #24]
 8005dae:	f023 03a4 	bic.w	r3, r3, #164	@ 0xa4
 8005db2:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005db4:	6822      	ldr	r2, [r4, #0]
 8005db6:	6913      	ldr	r3, [r2, #16]
 8005db8:	f023 0310 	bic.w	r3, r3, #16
 8005dbc:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005dbe:	68e3      	ldr	r3, [r4, #12]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d029      	beq.n	8005e18 <HAL_FDCAN_Init+0x160>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d02c      	beq.n	8005e22 <HAL_FDCAN_Init+0x16a>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	f000 809b 	beq.w	8005f04 <HAL_FDCAN_Init+0x24c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005dce:	6822      	ldr	r2, [r4, #0]
 8005dd0:	6993      	ldr	r3, [r2, #24]
 8005dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dd6:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005dd8:	6822      	ldr	r2, [r4, #0]
 8005dda:	6913      	ldr	r3, [r2, #16]
 8005ddc:	f043 0310 	orr.w	r3, r3, #16
 8005de0:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005de2:	68e3      	ldr	r3, [r4, #12]
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d11c      	bne.n	8005e22 <HAL_FDCAN_Init+0x16a>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005de8:	6822      	ldr	r2, [r4, #0]
 8005dea:	6993      	ldr	r3, [r2, #24]
 8005dec:	f043 0320 	orr.w	r3, r3, #32
 8005df0:	6193      	str	r3, [r2, #24]
 8005df2:	e016      	b.n	8005e22 <HAL_FDCAN_Init+0x16a>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005df4:	6822      	ldr	r2, [r4, #0]
 8005df6:	6993      	ldr	r3, [r2, #24]
 8005df8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dfc:	6193      	str	r3, [r2, #24]
 8005dfe:	e7bd      	b.n	8005d7c <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005e00:	6822      	ldr	r2, [r4, #0]
 8005e02:	6993      	ldr	r3, [r2, #24]
 8005e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e08:	6193      	str	r3, [r2, #24]
 8005e0a:	e7bf      	b.n	8005d8c <HAL_FDCAN_Init+0xd4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005e0c:	6822      	ldr	r2, [r4, #0]
 8005e0e:	6993      	ldr	r3, [r2, #24]
 8005e10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e14:	6193      	str	r3, [r2, #24]
 8005e16:	e7c1      	b.n	8005d9c <HAL_FDCAN_Init+0xe4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005e18:	6822      	ldr	r2, [r4, #0]
 8005e1a:	6993      	ldr	r3, [r2, #24]
 8005e1c:	f043 0304 	orr.w	r3, r3, #4
 8005e20:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e22:	69a3      	ldr	r3, [r4, #24]
 8005e24:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005e26:	69e3      	ldr	r3, [r4, #28]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e2c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005e30:	6a22      	ldr	r2, [r4, #32]
 8005e32:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005e34:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005e36:	6962      	ldr	r2, [r4, #20]
 8005e38:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e3a:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005e3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e40:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005e42:	68a3      	ldr	r3, [r4, #8]
 8005e44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e48:	d062      	beq.n	8005f10 <HAL_FDCAN_Init+0x258>
  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005e4a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005e4c:	b133      	cbz	r3, 8005e5c <HAL_FDCAN_Init+0x1a4>
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005e4e:	6822      	ldr	r2, [r4, #0]
 8005e50:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005e54:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8005e56:	430b      	orrs	r3, r1
 8005e58:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005e5c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005e5e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005e60:	42d3      	cmn	r3, r2
 8005e62:	d00d      	beq.n	8005e80 <HAL_FDCAN_Init+0x1c8>
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005e64:	6821      	ldr	r1, [r4, #0]
 8005e66:	f8d1 30c8 	ldr.w	r3, [r1, #200]	@ 0xc8
 8005e6a:	f023 0307 	bic.w	r3, r3, #7
 8005e6e:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8005e70:	a814      	add	r0, sp, #80	@ 0x50
 8005e72:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005e76:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005e80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e82:	b16b      	cbz	r3, 8005ea0 <HAL_FDCAN_Init+0x1e8>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005e84:	6821      	ldr	r1, [r4, #0]
 8005e86:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 8005e8a:	f023 0307 	bic.w	r3, r3, #7
 8005e8e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005e90:	a814      	add	r0, sp, #80	@ 0x50
 8005e92:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005e96:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005ea0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8005ea2:	b173      	cbz	r3, 8005ec2 <HAL_FDCAN_Init+0x20a>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005ea4:	6821      	ldr	r1, [r4, #0]
 8005ea6:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 8005eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eae:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8005eb0:	a814      	add	r0, sp, #80	@ 0x50
 8005eb2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005eb6:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005eba:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005ebe:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005ec2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8005ec4:	b173      	cbz	r3, 8005ee4 <HAL_FDCAN_Init+0x22c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005ec6:	6821      	ldr	r1, [r4, #0]
 8005ec8:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 8005ecc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005ed0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ed2:	a814      	add	r0, sp, #80	@ 0x50
 8005ed4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005ed8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005edc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ee0:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Instance == FDCAN1)
 8005ee4:	6822      	ldr	r2, [r4, #0]
 8005ee6:	4b18      	ldr	r3, [pc, #96]	@ (8005f48 <HAL_FDCAN_Init+0x290>)
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d022      	beq.n	8005f32 <HAL_FDCAN_Init+0x27a>
  hfdcan->LatestTxFifoQRequest = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005ef2:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005efc:	4620      	mov	r0, r4
 8005efe:	f7ff fdad 	bl	8005a5c <FDCAN_CalcultateRamBlockAddresses>
  return status;
 8005f02:	e707      	b.n	8005d14 <HAL_FDCAN_Init+0x5c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005f04:	6822      	ldr	r2, [r4, #0]
 8005f06:	6993      	ldr	r3, [r2, #24]
 8005f08:	f043 0320 	orr.w	r3, r3, #32
 8005f0c:	6193      	str	r3, [r2, #24]
 8005f0e:	e788      	b.n	8005e22 <HAL_FDCAN_Init+0x16a>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005f10:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005f12:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005f14:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005f16:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005f18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005f1c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005f1e:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005f20:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005f24:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005f26:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005f28:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005f2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005f2e:	60cb      	str	r3, [r1, #12]
 8005f30:	e78b      	b.n	8005e4a <HAL_FDCAN_Init+0x192>
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005f32:	6862      	ldr	r2, [r4, #4]
 8005f34:	6893      	ldr	r3, [r2, #8]
 8005f36:	f023 0303 	bic.w	r3, r3, #3
 8005f3a:	6093      	str	r3, [r2, #8]
 8005f3c:	e7d6      	b.n	8005eec <HAL_FDCAN_Init+0x234>
    return HAL_ERROR;
 8005f3e:	2001      	movs	r0, #1
 8005f40:	e6e8      	b.n	8005d14 <HAL_FDCAN_Init+0x5c>
 8005f42:	bf00      	nop
 8005f44:	0801c540 	.word	0x0801c540
 8005f48:	4000a000 	.word	0x4000a000

08005f4c <HAL_FDCAN_ConfigGlobalFilter>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005f4c:	f890 c098 	ldrb.w	ip, [r0, #152]	@ 0x98
 8005f50:	fa5f fc8c 	uxtb.w	ip, ip
 8005f54:	f1bc 0f01 	cmp.w	ip, #1
 8005f58:	d007      	beq.n	8005f6a <HAL_FDCAN_ConfigGlobalFilter+0x1e>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005f5a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005f5e:	f043 0304 	orr.w	r3, r3, #4
 8005f62:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8005f66:	2001      	movs	r0, #1
}
 8005f68:	4770      	bx	lr
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005f6a:	0092      	lsls	r2, r2, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005f6c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005f70:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005f74:	6801      	ldr	r1, [r0, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8005f76:	9a00      	ldr	r2, [sp, #0]
 8005f78:	431a      	orrs	r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005f7a:	f8c1 2080 	str.w	r2, [r1, #128]	@ 0x80
    return HAL_OK;
 8005f7e:	2000      	movs	r0, #0
 8005f80:	4770      	bx	lr

08005f82 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005f82:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d007      	beq.n	8005f9c <HAL_FDCAN_Start+0x1a>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005f8c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005f90:	f043 0304 	orr.w	r3, r3, #4
 8005f94:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8005f98:	2001      	movs	r0, #1
}
 8005f9a:	4770      	bx	lr
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005fa2:	6802      	ldr	r2, [r0, #0]
 8005fa4:	6993      	ldr	r3, [r2, #24]
 8005fa6:	f023 0301 	bic.w	r3, r3, #1
 8005faa:	6193      	str	r3, [r2, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005fac:	2300      	movs	r3, #0
 8005fae:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_OK;
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	4770      	bx	lr

08005fb6 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8005fb6:	b538      	push	{r3, r4, r5, lr}
 8005fb8:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005fba:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d12b      	bne.n	800601c <HAL_FDCAN_AddMessageToTxFifoQ+0x66>
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8005fc4:	6803      	ldr	r3, [r0, #0]
 8005fc6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8005fca:	f010 5f7c 	tst.w	r0, #1056964608	@ 0x3f000000
 8005fce:	d00c      	beq.n	8005fea <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005fd0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8005fd4:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8005fd8:	d00f      	beq.n	8005ffa <HAL_FDCAN_AddMessageToTxFifoQ+0x44>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005fda:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005fde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005fe2:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      return HAL_ERROR;
 8005fe6:	2001      	movs	r0, #1
 8005fe8:	e01f      	b.n	800602a <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005fea:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005fee:	f043 0320 	orr.w	r3, r3, #32
 8005ff2:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      return HAL_ERROR;
 8005ff6:	2001      	movs	r0, #1
 8005ff8:	e017      	b.n	800602a <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005ffa:	f8d3 50c4 	ldr.w	r5, [r3, #196]	@ 0xc4
 8005ffe:	f3c5 4504 	ubfx	r5, r5, #16, #5
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006002:	462b      	mov	r3, r5
 8006004:	4620      	mov	r0, r4
 8006006:	f7ff fe13 	bl	8005c30 <FDCAN_CopyMessageToRAM>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800600a:	6822      	ldr	r2, [r4, #0]
 800600c:	2301      	movs	r3, #1
 800600e:	40ab      	lsls	r3, r5
 8006010:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006014:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    return HAL_OK;
 8006018:	2000      	movs	r0, #0
 800601a:	e006      	b.n	800602a <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800601c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8006020:	f043 0308 	orr.w	r3, r3, #8
 8006024:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8006028:	2001      	movs	r0, #1
}
 800602a:	bd38      	pop	{r3, r4, r5, pc}

0800602c <HAL_FDCAN_GetRxMessage>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800602c:	f890 c098 	ldrb.w	ip, [r0, #152]	@ 0x98
 8006030:	fa5f fc8c 	uxtb.w	ip, ip
  if (state == HAL_FDCAN_STATE_BUSY)
 8006034:	f1bc 0f02 	cmp.w	ip, #2
 8006038:	f040 80db 	bne.w	80061f2 <HAL_FDCAN_GetRxMessage+0x1c6>
{
 800603c:	b570      	push	{r4, r5, r6, lr}
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800603e:	2940      	cmp	r1, #64	@ 0x40
 8006040:	d00c      	beq.n	800605c <HAL_FDCAN_GetRxMessage+0x30>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006042:	2941      	cmp	r1, #65	@ 0x41
 8006044:	d03b      	beq.n	80060be <HAL_FDCAN_GetRxMessage+0x92>
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8006046:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 8006048:	428c      	cmp	r4, r1
 800604a:	d869      	bhi.n	8006120 <HAL_FDCAN_GetRxMessage+0xf4>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800604c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8006050:	f043 0320 	orr.w	r3, r3, #32
 8006054:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8006058:	2001      	movs	r0, #1
 800605a:	e0bd      	b.n	80061d8 <HAL_FDCAN_GetRxMessage+0x1ac>
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800605c:	6804      	ldr	r4, [r0, #0]
 800605e:	f8d4 50a0 	ldr.w	r5, [r4, #160]	@ 0xa0
 8006062:	f415 0ffe 	tst.w	r5, #8323072	@ 0x7f0000
 8006066:	d00c      	beq.n	8006082 <HAL_FDCAN_GetRxMessage+0x56>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006068:	f8d4 50a4 	ldr.w	r5, [r4, #164]	@ 0xa4
 800606c:	f015 0f7f 	tst.w	r5, #127	@ 0x7f
 8006070:	d10f      	bne.n	8006092 <HAL_FDCAN_GetRxMessage+0x66>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006072:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8006076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800607a:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 800607e:	2001      	movs	r0, #1
 8006080:	e0aa      	b.n	80061d8 <HAL_FDCAN_GetRxMessage+0x1ac>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006082:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8006086:	f043 0320 	orr.w	r3, r3, #32
 800608a:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 800608e:	2001      	movs	r0, #1
 8006090:	e0a2      	b.n	80061d8 <HAL_FDCAN_GetRxMessage+0x1ac>
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006092:	f8d4 50a4 	ldr.w	r5, [r4, #164]	@ 0xa4
 8006096:	f3c5 6600 	ubfx	r6, r5, #24, #1
 800609a:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 800609e:	d002      	beq.n	80060a6 <HAL_FDCAN_GetRxMessage+0x7a>
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80060a0:	f8d4 50a0 	ldr.w	r5, [r4, #160]	@ 0xa0
  uint32_t GetIndex = 0;
 80060a4:	2600      	movs	r6, #0
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80060a6:	f8d4 40a4 	ldr.w	r4, [r4, #164]	@ 0xa4
 80060aa:	f3c4 2405 	ubfx	r4, r4, #8, #6
 80060ae:	4426      	add	r6, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80060b0:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 80060b2:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80060b4:	fb06 f404 	mul.w	r4, r6, r4
 80060b8:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
 80060bc:	e037      	b.n	800612e <HAL_FDCAN_GetRxMessage+0x102>
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80060be:	6804      	ldr	r4, [r0, #0]
 80060c0:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
 80060c4:	f415 0ffe 	tst.w	r5, #8323072	@ 0x7f0000
 80060c8:	d00c      	beq.n	80060e4 <HAL_FDCAN_GetRxMessage+0xb8>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80060ca:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 80060ce:	f015 0f7f 	tst.w	r5, #127	@ 0x7f
 80060d2:	d10f      	bne.n	80060f4 <HAL_FDCAN_GetRxMessage+0xc8>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80060d4:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80060d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060dc:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 80060e0:	2001      	movs	r0, #1
 80060e2:	e079      	b.n	80061d8 <HAL_FDCAN_GetRxMessage+0x1ac>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80060e4:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80060e8:	f043 0320 	orr.w	r3, r3, #32
 80060ec:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 80060f0:	2001      	movs	r0, #1
 80060f2:	e071      	b.n	80061d8 <HAL_FDCAN_GetRxMessage+0x1ac>
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80060f4:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 80060f8:	f3c5 6600 	ubfx	r6, r5, #24, #1
 80060fc:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 8006100:	d002      	beq.n	8006108 <HAL_FDCAN_GetRxMessage+0xdc>
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006102:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
  uint32_t GetIndex = 0;
 8006106:	2600      	movs	r6, #0
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006108:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 800610c:	f3c4 2405 	ubfx	r4, r4, #8, #6
 8006110:	4426      	add	r6, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8006112:	6f85      	ldr	r5, [r0, #120]	@ 0x78
 8006114:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8006116:	fb06 f404 	mul.w	r4, r6, r4
 800611a:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
 800611e:	e006      	b.n	800612e <HAL_FDCAN_GetRxMessage+0x102>
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8006120:	6fc5      	ldr	r5, [r0, #124]	@ 0x7c
 8006122:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8006124:	fb01 f404 	mul.w	r4, r1, r4
 8006128:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
  uint32_t GetIndex = 0;
 800612c:	2600      	movs	r6, #0
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800612e:	f8de 4000 	ldr.w	r4, [lr]
 8006132:	f004 4480 	and.w	r4, r4, #1073741824	@ 0x40000000
 8006136:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006138:	bb64      	cbnz	r4, 8006194 <HAL_FDCAN_GetRxMessage+0x168>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800613a:	f8de 4000 	ldr.w	r4, [lr]
 800613e:	f3c4 448a 	ubfx	r4, r4, #18, #11
 8006142:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006144:	f8de 4000 	ldr.w	r4, [lr]
 8006148:	f004 5400 	and.w	r4, r4, #536870912	@ 0x20000000
 800614c:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800614e:	f8de 4000 	ldr.w	r4, [lr]
 8006152:	f004 4400 	and.w	r4, r4, #2147483648	@ 0x80000000
 8006156:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006158:	f8be 4004 	ldrh.w	r4, [lr, #4]
 800615c:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800615e:	f8de 4004 	ldr.w	r4, [lr, #4]
 8006162:	f404 2470 	and.w	r4, r4, #983040	@ 0xf0000
 8006166:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006168:	f8de 4004 	ldr.w	r4, [lr, #4]
 800616c:	f404 1480 	and.w	r4, r4, #1048576	@ 0x100000
 8006170:	6154      	str	r4, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006172:	f8de 4004 	ldr.w	r4, [lr, #4]
 8006176:	f404 1400 	and.w	r4, r4, #2097152	@ 0x200000
 800617a:	6194      	str	r4, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 800617c:	f89e 4007 	ldrb.w	r4, [lr, #7]
 8006180:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8006184:	6214      	str	r4, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8006186:	f8de 4004 	ldr.w	r4, [lr, #4]
 800618a:	0fe4      	lsrs	r4, r4, #31
 800618c:	6254      	str	r4, [r2, #36]	@ 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800618e:	f04f 0c00 	mov.w	ip, #0
 8006192:	e00c      	b.n	80061ae <HAL_FDCAN_GetRxMessage+0x182>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006194:	f8de 4000 	ldr.w	r4, [lr]
 8006198:	f024 4460 	bic.w	r4, r4, #3758096384	@ 0xe0000000
 800619c:	6014      	str	r4, [r2, #0]
 800619e:	e7d1      	b.n	8006144 <HAL_FDCAN_GetRxMessage+0x118>
      pRxData[ByteCounter] = pData[ByteCounter];
 80061a0:	eb0e 040c 	add.w	r4, lr, ip
 80061a4:	7a24      	ldrb	r4, [r4, #8]
 80061a6:	f803 400c 	strb.w	r4, [r3, ip]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80061aa:	f10c 0c01 	add.w	ip, ip, #1
 80061ae:	89d4      	ldrh	r4, [r2, #14]
 80061b0:	4d14      	ldr	r5, [pc, #80]	@ (8006204 <HAL_FDCAN_GetRxMessage+0x1d8>)
 80061b2:	5d2c      	ldrb	r4, [r5, r4]
 80061b4:	4564      	cmp	r4, ip
 80061b6:	d8f3      	bhi.n	80061a0 <HAL_FDCAN_GetRxMessage+0x174>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80061b8:	2940      	cmp	r1, #64	@ 0x40
 80061ba:	d009      	beq.n	80061d0 <HAL_FDCAN_GetRxMessage+0x1a4>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80061bc:	2941      	cmp	r1, #65	@ 0x41
 80061be:	d00c      	beq.n	80061da <HAL_FDCAN_GetRxMessage+0x1ae>
      if (RxLocation < FDCAN_RX_BUFFER32)
 80061c0:	291f      	cmp	r1, #31
 80061c2:	d80e      	bhi.n	80061e2 <HAL_FDCAN_GetRxMessage+0x1b6>
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80061c4:	6802      	ldr	r2, [r0, #0]
 80061c6:	2301      	movs	r3, #1
 80061c8:	408b      	lsls	r3, r1
 80061ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 80061ce:	e002      	b.n	80061d6 <HAL_FDCAN_GetRxMessage+0x1aa>
      hfdcan->Instance->RXF0A = GetIndex;
 80061d0:	6803      	ldr	r3, [r0, #0]
 80061d2:	f8c3 60a8 	str.w	r6, [r3, #168]	@ 0xa8
    return HAL_OK;
 80061d6:	2000      	movs	r0, #0
}
 80061d8:	bd70      	pop	{r4, r5, r6, pc}
      hfdcan->Instance->RXF1A = GetIndex;
 80061da:	6803      	ldr	r3, [r0, #0]
 80061dc:	f8c3 60b8 	str.w	r6, [r3, #184]	@ 0xb8
 80061e0:	e7f9      	b.n	80061d6 <HAL_FDCAN_GetRxMessage+0x1aa>
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80061e2:	f001 011f 	and.w	r1, r1, #31
 80061e6:	6802      	ldr	r2, [r0, #0]
 80061e8:	2301      	movs	r3, #1
 80061ea:	408b      	lsls	r3, r1
 80061ec:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80061f0:	e7f1      	b.n	80061d6 <HAL_FDCAN_GetRxMessage+0x1aa>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80061f2:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80061f6:	f043 0308 	orr.w	r3, r3, #8
 80061fa:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 80061fe:	2001      	movs	r0, #1
}
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	0801c7e8 	.word	0x0801c7e8

08006208 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006208:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800620c:	3b01      	subs	r3, #1
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b01      	cmp	r3, #1
 8006212:	d907      	bls.n	8006224 <HAL_FDCAN_ActivateNotification+0x1c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006214:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8006218:	f043 0302 	orr.w	r3, r3, #2
 800621c:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8006220:	2001      	movs	r0, #1
}
 8006222:	4770      	bx	lr
{
 8006224:	b410      	push	{r4}
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8006226:	6803      	ldr	r3, [r0, #0]
 8006228:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 800622a:	420c      	tst	r4, r1
 800622c:	d124      	bne.n	8006278 <HAL_FDCAN_ActivateNotification+0x70>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800622e:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 8006230:	f044 0401 	orr.w	r4, r4, #1
 8006234:	65dc      	str	r4, [r3, #92]	@ 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006236:	f411 7f00 	tst.w	r1, #512	@ 0x200
 800623a:	d005      	beq.n	8006248 <HAL_FDCAN_ActivateNotification+0x40>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800623c:	6804      	ldr	r4, [r0, #0]
 800623e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8006242:	4313      	orrs	r3, r2
 8006244:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006248:	f411 6f80 	tst.w	r1, #1024	@ 0x400
 800624c:	d005      	beq.n	800625a <HAL_FDCAN_ActivateNotification+0x52>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800624e:	6804      	ldr	r4, [r0, #0]
 8006250:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
 8006254:	4313      	orrs	r3, r2
 8006256:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800625a:	6800      	ldr	r0, [r0, #0]
 800625c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800625e:	4a0c      	ldr	r2, [pc, #48]	@ (8006290 <HAL_FDCAN_ActivateNotification+0x88>)
 8006260:	400a      	ands	r2, r1
 8006262:	4313      	orrs	r3, r2
 8006264:	6543      	str	r3, [r0, #84]	@ 0x54
 8006266:	4a0b      	ldr	r2, [pc, #44]	@ (8006294 <HAL_FDCAN_ActivateNotification+0x8c>)
 8006268:	6953      	ldr	r3, [r2, #20]
 800626a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800626e:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8006270:	2000      	movs	r0, #0
}
 8006272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006276:	4770      	bx	lr
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8006278:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 800627a:	ea31 0404 	bics.w	r4, r1, r4
 800627e:	d002      	beq.n	8006286 <HAL_FDCAN_ActivateNotification+0x7e>
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8006280:	2403      	movs	r4, #3
 8006282:	65dc      	str	r4, [r3, #92]	@ 0x5c
 8006284:	e7d7      	b.n	8006236 <HAL_FDCAN_ActivateNotification+0x2e>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006286:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 8006288:	f044 0402 	orr.w	r4, r4, #2
 800628c:	65dc      	str	r4, [r3, #92]	@ 0x5c
 800628e:	e7d2      	b.n	8006236 <HAL_FDCAN_ActivateNotification+0x2e>
 8006290:	3fcfffff 	.word	0x3fcfffff
 8006294:	4000a800 	.word	0x4000a800

08006298 <HAL_FDCAN_ClockCalibrationCallback>:
}
 8006298:	4770      	bx	lr

0800629a <HAL_FDCAN_TxEventFifoCallback>:
}
 800629a:	4770      	bx	lr

0800629c <HAL_FDCAN_RxFifo1Callback>:
}
 800629c:	4770      	bx	lr

0800629e <HAL_FDCAN_TxFifoEmptyCallback>:
}
 800629e:	4770      	bx	lr

080062a0 <HAL_FDCAN_TxBufferCompleteCallback>:
}
 80062a0:	4770      	bx	lr

080062a2 <HAL_FDCAN_TxBufferAbortCallback>:
}
 80062a2:	4770      	bx	lr

080062a4 <HAL_FDCAN_RxBufferNewMessageCallback>:
}
 80062a4:	4770      	bx	lr

080062a6 <HAL_FDCAN_TimestampWraparoundCallback>:
}
 80062a6:	4770      	bx	lr

080062a8 <HAL_FDCAN_TimeoutOccurredCallback>:
}
 80062a8:	4770      	bx	lr

080062aa <HAL_FDCAN_HighPriorityMessageCallback>:
}
 80062aa:	4770      	bx	lr

080062ac <HAL_FDCAN_ErrorStatusCallback>:
}
 80062ac:	4770      	bx	lr

080062ae <HAL_FDCAN_TT_ScheduleSyncCallback>:
}
 80062ae:	4770      	bx	lr

080062b0 <HAL_FDCAN_TT_TimeMarkCallback>:
}
 80062b0:	4770      	bx	lr

080062b2 <HAL_FDCAN_TT_StopWatchCallback>:
}
 80062b2:	4770      	bx	lr

080062b4 <HAL_FDCAN_TT_GlobalTimeCallback>:
}
 80062b4:	4770      	bx	lr
	...

080062b8 <HAL_FDCAN_IRQHandler>:
{
 80062b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062bc:	b083      	sub	sp, #12
 80062be:	4604      	mov	r4, r0
  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80062c0:	4bb0      	ldr	r3, [pc, #704]	@ (8006584 <HAL_FDCAN_IRQHandler+0x2cc>)
 80062c2:	691a      	ldr	r2, [r3, #16]
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	079b      	lsls	r3, r3, #30
 80062c8:	ea03 7382 	and.w	r3, r3, r2, lsl #30
 80062cc:	9301      	str	r3, [sp, #4]
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80062ce:	6803      	ldr	r3, [r0, #0]
 80062d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062d2:	f402 4a70 	and.w	sl, r2, #61440	@ 0xf000
  TxEventFifoITs &= hfdcan->Instance->IE;
 80062d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062d8:	ea0a 0a02 	and.w	sl, sl, r2
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80062dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062de:	f002 090f 	and.w	r9, r2, #15
  RxFifo0ITs &= hfdcan->Instance->IE;
 80062e2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062e4:	ea09 0902 	and.w	r9, r9, r2
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80062e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062ea:	f002 08f0 	and.w	r8, r2, #240	@ 0xf0
  RxFifo1ITs &= hfdcan->Instance->IE;
 80062ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062f0:	ea08 0802 	and.w	r8, r8, r2
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80062f4:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
 80062f6:	f006 5671 	and.w	r6, r6, #1010827264	@ 0x3c400000
  Errors &= hfdcan->Instance->IE;
 80062fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062fc:	4016      	ands	r6, r2
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80062fe:	6d1f      	ldr	r7, [r3, #80]	@ 0x50
 8006300:	f007 7760 	and.w	r7, r7, #58720256	@ 0x3800000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006304:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006306:	4017      	ands	r7, r2
  itsourceIE = hfdcan->Instance->IE;
 8006308:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
  itflagIR = hfdcan->Instance->IR;
 800630a:	f8d3 b050 	ldr.w	fp, [r3, #80]	@ 0x50
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800630e:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8006312:	d002      	beq.n	800631a <HAL_FDCAN_IRQHandler+0x62>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006314:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 8006318:	d164      	bne.n	80063e4 <HAL_FDCAN_IRQHandler+0x12c>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800631a:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 800631e:	d002      	beq.n	8006326 <HAL_FDCAN_IRQHandler+0x6e>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8006320:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 8006324:	d167      	bne.n	80063f6 <HAL_FDCAN_IRQHandler+0x13e>
  if (ClkCalibrationITs != 0U)
 8006326:	9b01      	ldr	r3, [sp, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d174      	bne.n	8006416 <HAL_FDCAN_IRQHandler+0x15e>
  if (TxEventFifoITs != 0U)
 800632c:	f1ba 0f00 	cmp.w	sl, #0
 8006330:	d17c      	bne.n	800642c <HAL_FDCAN_IRQHandler+0x174>
  if (RxFifo0ITs != 0U)
 8006332:	f1b9 0f00 	cmp.w	r9, #0
 8006336:	f040 8085 	bne.w	8006444 <HAL_FDCAN_IRQHandler+0x18c>
  if (RxFifo1ITs != 0U)
 800633a:	f1b8 0f00 	cmp.w	r8, #0
 800633e:	f040 808d 	bne.w	800645c <HAL_FDCAN_IRQHandler+0x1a4>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006342:	f415 6f00 	tst.w	r5, #2048	@ 0x800
 8006346:	d003      	beq.n	8006350 <HAL_FDCAN_IRQHandler+0x98>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006348:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 800634c:	f040 8092 	bne.w	8006474 <HAL_FDCAN_IRQHandler+0x1bc>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8006350:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8006354:	d003      	beq.n	800635e <HAL_FDCAN_IRQHandler+0xa6>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006356:	f41b 7f00 	tst.w	fp, #512	@ 0x200
 800635a:	f040 8096 	bne.w	800648a <HAL_FDCAN_IRQHandler+0x1d2>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800635e:	f415 2f00 	tst.w	r5, #524288	@ 0x80000
 8006362:	d003      	beq.n	800636c <HAL_FDCAN_IRQHandler+0xb4>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006364:	f41b 2f00 	tst.w	fp, #524288	@ 0x80000
 8006368:	f040 809f 	bne.w	80064aa <HAL_FDCAN_IRQHandler+0x1f2>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800636c:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8006370:	d003      	beq.n	800637a <HAL_FDCAN_IRQHandler+0xc2>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006372:	f41b 3f80 	tst.w	fp, #65536	@ 0x10000
 8006376:	f040 80a3 	bne.w	80064c0 <HAL_FDCAN_IRQHandler+0x208>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800637a:	f415 2f80 	tst.w	r5, #262144	@ 0x40000
 800637e:	d003      	beq.n	8006388 <HAL_FDCAN_IRQHandler+0xd0>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006380:	f41b 2f80 	tst.w	fp, #262144	@ 0x40000
 8006384:	f040 80a7 	bne.w	80064d6 <HAL_FDCAN_IRQHandler+0x21e>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006388:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
 800638c:	d00f      	beq.n	80063ae <HAL_FDCAN_IRQHandler+0xf6>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800638e:	f41b 3f00 	tst.w	fp, #131072	@ 0x20000
 8006392:	d00c      	beq.n	80063ae <HAL_FDCAN_IRQHandler+0xf6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800639a:	651a      	str	r2, [r3, #80]	@ 0x50
 800639c:	4b79      	ldr	r3, [pc, #484]	@ (8006584 <HAL_FDCAN_IRQHandler+0x2cc>)
 800639e:	2200      	movs	r2, #0
 80063a0:	611a      	str	r2, [r3, #16]
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80063a2:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80063a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063aa:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  if (ErrorStatusITs != 0U)
 80063ae:	2f00      	cmp	r7, #0
 80063b0:	f040 809c 	bne.w	80064ec <HAL_FDCAN_IRQHandler+0x234>
  if (Errors != 0U)
 80063b4:	b14e      	cbz	r6, 80063ca <HAL_FDCAN_IRQHandler+0x112>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	651e      	str	r6, [r3, #80]	@ 0x50
 80063ba:	0fb2      	lsrs	r2, r6, #30
 80063bc:	4b71      	ldr	r3, [pc, #452]	@ (8006584 <HAL_FDCAN_IRQHandler+0x2cc>)
 80063be:	611a      	str	r2, [r3, #16]
    hfdcan->ErrorCode |= Errors;
 80063c0:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80063c4:	4333      	orrs	r3, r6
 80063c6:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  if (hfdcan->Instance == FDCAN1)
 80063ca:	6822      	ldr	r2, [r4, #0]
 80063cc:	4b6e      	ldr	r3, [pc, #440]	@ (8006588 <HAL_FDCAN_IRQHandler+0x2d0>)
 80063ce:	429a      	cmp	r2, r3
 80063d0:	f000 8096 	beq.w	8006500 <HAL_FDCAN_IRQHandler+0x248>
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80063d4:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f040 80f7 	bne.w	80065cc <HAL_FDCAN_IRQHandler+0x314>
}
 80063de:	b003      	add	sp, #12
 80063e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80063e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80063e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80063ea:	4b66      	ldr	r3, [pc, #408]	@ (8006584 <HAL_FDCAN_IRQHandler+0x2cc>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80063f0:	f7ff ff5b 	bl	80062aa <HAL_FDCAN_HighPriorityMessageCallback>
 80063f4:	e791      	b.n	800631a <HAL_FDCAN_IRQHandler+0x62>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80063fc:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006400:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006404:	6518      	str	r0, [r3, #80]	@ 0x50
 8006406:	4b5f      	ldr	r3, [pc, #380]	@ (8006584 <HAL_FDCAN_IRQHandler+0x2cc>)
 8006408:	2000      	movs	r0, #0
 800640a:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800640c:	4011      	ands	r1, r2
 800640e:	4620      	mov	r0, r4
 8006410:	f7ff ff47 	bl	80062a2 <HAL_FDCAN_TxBufferAbortCallback>
 8006414:	e787      	b.n	8006326 <HAL_FDCAN_IRQHandler+0x6e>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	2200      	movs	r2, #0
 800641a:	651a      	str	r2, [r3, #80]	@ 0x50
 800641c:	9901      	ldr	r1, [sp, #4]
 800641e:	0f8a      	lsrs	r2, r1, #30
 8006420:	4b58      	ldr	r3, [pc, #352]	@ (8006584 <HAL_FDCAN_IRQHandler+0x2cc>)
 8006422:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8006424:	4620      	mov	r0, r4
 8006426:	f7ff ff37 	bl	8006298 <HAL_FDCAN_ClockCalibrationCallback>
 800642a:	e77f      	b.n	800632c <HAL_FDCAN_IRQHandler+0x74>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	f8c3 a050 	str.w	sl, [r3, #80]	@ 0x50
 8006432:	ea4f 729a 	mov.w	r2, sl, lsr #30
 8006436:	4b53      	ldr	r3, [pc, #332]	@ (8006584 <HAL_FDCAN_IRQHandler+0x2cc>)
 8006438:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800643a:	4651      	mov	r1, sl
 800643c:	4620      	mov	r0, r4
 800643e:	f7ff ff2c 	bl	800629a <HAL_FDCAN_TxEventFifoCallback>
 8006442:	e776      	b.n	8006332 <HAL_FDCAN_IRQHandler+0x7a>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	f8c3 9050 	str.w	r9, [r3, #80]	@ 0x50
 800644a:	ea4f 7299 	mov.w	r2, r9, lsr #30
 800644e:	4b4d      	ldr	r3, [pc, #308]	@ (8006584 <HAL_FDCAN_IRQHandler+0x2cc>)
 8006450:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006452:	4649      	mov	r1, r9
 8006454:	4620      	mov	r0, r4
 8006456:	f7fa fceb 	bl	8000e30 <HAL_FDCAN_RxFifo0Callback>
 800645a:	e76e      	b.n	800633a <HAL_FDCAN_IRQHandler+0x82>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	f8c3 8050 	str.w	r8, [r3, #80]	@ 0x50
 8006462:	ea4f 7298 	mov.w	r2, r8, lsr #30
 8006466:	4b47      	ldr	r3, [pc, #284]	@ (8006584 <HAL_FDCAN_IRQHandler+0x2cc>)
 8006468:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800646a:	4641      	mov	r1, r8
 800646c:	4620      	mov	r0, r4
 800646e:	f7ff ff15 	bl	800629c <HAL_FDCAN_RxFifo1Callback>
 8006472:	e766      	b.n	8006342 <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800647a:	651a      	str	r2, [r3, #80]	@ 0x50
 800647c:	4b41      	ldr	r3, [pc, #260]	@ (8006584 <HAL_FDCAN_IRQHandler+0x2cc>)
 800647e:	2200      	movs	r2, #0
 8006480:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006482:	4620      	mov	r0, r4
 8006484:	f7ff ff0b 	bl	800629e <HAL_FDCAN_TxFifoEmptyCallback>
 8006488:	e762      	b.n	8006350 <HAL_FDCAN_IRQHandler+0x98>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006490:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006494:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8006498:	6518      	str	r0, [r3, #80]	@ 0x50
 800649a:	4b3a      	ldr	r3, [pc, #232]	@ (8006584 <HAL_FDCAN_IRQHandler+0x2cc>)
 800649c:	2000      	movs	r0, #0
 800649e:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80064a0:	4011      	ands	r1, r2
 80064a2:	4620      	mov	r0, r4
 80064a4:	f7ff fefc 	bl	80062a0 <HAL_FDCAN_TxBufferCompleteCallback>
 80064a8:	e759      	b.n	800635e <HAL_FDCAN_IRQHandler+0xa6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80064b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80064b2:	4b34      	ldr	r3, [pc, #208]	@ (8006584 <HAL_FDCAN_IRQHandler+0x2cc>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80064b8:	4620      	mov	r0, r4
 80064ba:	f7ff fef3 	bl	80062a4 <HAL_FDCAN_RxBufferNewMessageCallback>
 80064be:	e755      	b.n	800636c <HAL_FDCAN_IRQHandler+0xb4>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80064c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80064c8:	4b2e      	ldr	r3, [pc, #184]	@ (8006584 <HAL_FDCAN_IRQHandler+0x2cc>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80064ce:	4620      	mov	r0, r4
 80064d0:	f7ff fee9 	bl	80062a6 <HAL_FDCAN_TimestampWraparoundCallback>
 80064d4:	e751      	b.n	800637a <HAL_FDCAN_IRQHandler+0xc2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80064dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80064de:	4b29      	ldr	r3, [pc, #164]	@ (8006584 <HAL_FDCAN_IRQHandler+0x2cc>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80064e4:	4620      	mov	r0, r4
 80064e6:	f7ff fedf 	bl	80062a8 <HAL_FDCAN_TimeoutOccurredCallback>
 80064ea:	e74d      	b.n	8006388 <HAL_FDCAN_IRQHandler+0xd0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	651f      	str	r7, [r3, #80]	@ 0x50
 80064f0:	0fba      	lsrs	r2, r7, #30
 80064f2:	4b24      	ldr	r3, [pc, #144]	@ (8006584 <HAL_FDCAN_IRQHandler+0x2cc>)
 80064f4:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80064f6:	4639      	mov	r1, r7
 80064f8:	4620      	mov	r0, r4
 80064fa:	f7ff fed7 	bl	80062ac <HAL_FDCAN_ErrorStatusCallback>
 80064fe:	e759      	b.n	80063b4 <HAL_FDCAN_IRQHandler+0xfc>
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8006500:	6863      	ldr	r3, [r4, #4]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	f012 0f03 	tst.w	r2, #3
 8006508:	f43f af64 	beq.w	80063d4 <HAL_FDCAN_IRQHandler+0x11c>
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800650c:	6a19      	ldr	r1, [r3, #32]
 800650e:	f001 010f 	and.w	r1, r1, #15
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8006512:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006514:	6a18      	ldr	r0, [r3, #32]
 8006516:	f000 0830 	and.w	r8, r0, #48	@ 0x30
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800651a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800651c:	ea08 0800 	and.w	r8, r8, r0
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8006520:	6a1f      	ldr	r7, [r3, #32]
 8006522:	f407 77c0 	and.w	r7, r7, #384	@ 0x180
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8006526:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006528:	4007      	ands	r7, r0
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800652a:	6a1e      	ldr	r6, [r3, #32]
 800652c:	f406 46fc 	and.w	r6, r6, #32256	@ 0x7e00
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8006530:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006532:	4006      	ands	r6, r0
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006534:	6a1d      	ldr	r5, [r3, #32]
 8006536:	f405 25f0 	and.w	r5, r5, #491520	@ 0x78000
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800653a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800653c:	4005      	ands	r5, r0
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800653e:	f8d3 9024 	ldr.w	r9, [r3, #36]	@ 0x24
      itflagTTIR = hfdcan->ttcan->TTIR;
 8006542:	f8d3 a020 	ldr.w	sl, [r3, #32]
      if (TTSchedSyncITs != 0U)
 8006546:	4011      	ands	r1, r2
 8006548:	d120      	bne.n	800658c <HAL_FDCAN_IRQHandler+0x2d4>
      if (TTTimeMarkITs != 0U)
 800654a:	f1b8 0f00 	cmp.w	r8, #0
 800654e:	d122      	bne.n	8006596 <HAL_FDCAN_IRQHandler+0x2de>
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8006550:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8006554:	d002      	beq.n	800655c <HAL_FDCAN_IRQHandler+0x2a4>
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8006556:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800655a:	d124      	bne.n	80065a6 <HAL_FDCAN_IRQHandler+0x2ee>
      if (TTGlobTimeITs != 0U)
 800655c:	bb7f      	cbnz	r7, 80065be <HAL_FDCAN_IRQHandler+0x306>
      if (TTDistErrors != 0U)
 800655e:	b136      	cbz	r6, 800656e <HAL_FDCAN_IRQHandler+0x2b6>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006560:	6863      	ldr	r3, [r4, #4]
 8006562:	621e      	str	r6, [r3, #32]
        hfdcan->ErrorCode |= TTDistErrors;
 8006564:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006568:	4333      	orrs	r3, r6
 800656a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      if (TTFatalErrors != 0U)
 800656e:	2d00      	cmp	r5, #0
 8006570:	f43f af30 	beq.w	80063d4 <HAL_FDCAN_IRQHandler+0x11c>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8006574:	6863      	ldr	r3, [r4, #4]
 8006576:	621d      	str	r5, [r3, #32]
        hfdcan->ErrorCode |= TTFatalErrors;
 8006578:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800657c:	432b      	orrs	r3, r5
 800657e:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8006582:	e727      	b.n	80063d4 <HAL_FDCAN_IRQHandler+0x11c>
 8006584:	4000a800 	.word	0x4000a800
 8006588:	4000a000 	.word	0x4000a000
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800658c:	6219      	str	r1, [r3, #32]
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800658e:	4620      	mov	r0, r4
 8006590:	f7ff fe8d 	bl	80062ae <HAL_FDCAN_TT_ScheduleSyncCallback>
 8006594:	e7d9      	b.n	800654a <HAL_FDCAN_IRQHandler+0x292>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8006596:	6863      	ldr	r3, [r4, #4]
 8006598:	f8c3 8020 	str.w	r8, [r3, #32]
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800659c:	4641      	mov	r1, r8
 800659e:	4620      	mov	r0, r4
 80065a0:	f7ff fe86 	bl	80062b0 <HAL_FDCAN_TT_TimeMarkCallback>
 80065a4:	e7d4      	b.n	8006550 <HAL_FDCAN_IRQHandler+0x298>
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80065a6:	6863      	ldr	r3, [r4, #4]
 80065a8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80065aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80065ac:	2040      	movs	r0, #64	@ 0x40
 80065ae:	6218      	str	r0, [r3, #32]
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80065b0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80065b4:	0c09      	lsrs	r1, r1, #16
 80065b6:	4620      	mov	r0, r4
 80065b8:	f7ff fe7b 	bl	80062b2 <HAL_FDCAN_TT_StopWatchCallback>
 80065bc:	e7ce      	b.n	800655c <HAL_FDCAN_IRQHandler+0x2a4>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80065be:	6863      	ldr	r3, [r4, #4]
 80065c0:	621f      	str	r7, [r3, #32]
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80065c2:	4639      	mov	r1, r7
 80065c4:	4620      	mov	r0, r4
 80065c6:	f7ff fe75 	bl	80062b4 <HAL_FDCAN_TT_GlobalTimeCallback>
 80065ca:	e7c8      	b.n	800655e <HAL_FDCAN_IRQHandler+0x2a6>
    HAL_FDCAN_ErrorCallback(hfdcan);
 80065cc:	4620      	mov	r0, r4
 80065ce:	f7fa fa35 	bl	8000a3c <HAL_FDCAN_ErrorCallback>
}
 80065d2:	e704      	b.n	80063de <HAL_FDCAN_IRQHandler+0x126>

080065d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065d6:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 80065d8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80065da:	e06b      	b.n	80066b4 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80065dc:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80065de:	005e      	lsls	r6, r3, #1
 80065e0:	2403      	movs	r4, #3
 80065e2:	40b4      	lsls	r4, r6
 80065e4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065e8:	68cc      	ldr	r4, [r1, #12]
 80065ea:	40b4      	lsls	r4, r6
 80065ec:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80065ee:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065f0:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80065f2:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065f6:	684c      	ldr	r4, [r1, #4]
 80065f8:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80065fc:	409c      	lsls	r4, r3
 80065fe:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8006600:	6044      	str	r4, [r0, #4]
 8006602:	e069      	b.n	80066d8 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006604:	08dd      	lsrs	r5, r3, #3
 8006606:	3508      	adds	r5, #8
 8006608:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800660c:	f003 0c07 	and.w	ip, r3, #7
 8006610:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006614:	f04f 0e0f 	mov.w	lr, #15
 8006618:	fa0e fe0c 	lsl.w	lr, lr, ip
 800661c:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006620:	690c      	ldr	r4, [r1, #16]
 8006622:	fa04 f40c 	lsl.w	r4, r4, ip
 8006626:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 800662a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800662e:	e06b      	b.n	8006708 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006630:	2409      	movs	r4, #9
 8006632:	e000      	b.n	8006636 <HAL_GPIO_Init+0x62>
 8006634:	2400      	movs	r4, #0
 8006636:	fa04 f40e 	lsl.w	r4, r4, lr
 800663a:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800663c:	f10c 0c02 	add.w	ip, ip, #2
 8006640:	4d69      	ldr	r5, [pc, #420]	@ (80067e8 <HAL_GPIO_Init+0x214>)
 8006642:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006646:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 800664a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800664c:	43d4      	mvns	r4, r2
 800664e:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006652:	684f      	ldr	r7, [r1, #4]
 8006654:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 8006658:	d001      	beq.n	800665e <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 800665a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800665e:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8006662:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8006664:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8006666:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800666a:	684f      	ldr	r7, [r1, #4]
 800666c:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 8006670:	d001      	beq.n	8006676 <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 8006672:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8006676:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 800667a:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800667c:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
        temp &= ~(iocurrent);
 8006680:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006684:	684f      	ldr	r7, [r1, #4]
 8006686:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 800668a:	d001      	beq.n	8006690 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 800668c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006690:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8006694:	f8c5 6084 	str.w	r6, [r5, #132]	@ 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006698:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
        temp &= ~(iocurrent);
 800669c:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800669e:	684e      	ldr	r6, [r1, #4]
 80066a0:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 80066a4:	d001      	beq.n	80066aa <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 80066a6:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80066aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066ae:	f8c2 4080 	str.w	r4, [r2, #128]	@ 0x80
      }
    }

    position++;
 80066b2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80066b4:	680a      	ldr	r2, [r1, #0]
 80066b6:	fa32 f403 	lsrs.w	r4, r2, r3
 80066ba:	f000 8092 	beq.w	80067e2 <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80066be:	f04f 0c01 	mov.w	ip, #1
 80066c2:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 80066c6:	ea1c 0202 	ands.w	r2, ip, r2
 80066ca:	d0f2      	beq.n	80066b2 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80066cc:	684c      	ldr	r4, [r1, #4]
 80066ce:	f004 0403 	and.w	r4, r4, #3
 80066d2:	3c01      	subs	r4, #1
 80066d4:	2c01      	cmp	r4, #1
 80066d6:	d981      	bls.n	80065dc <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066d8:	684c      	ldr	r4, [r1, #4]
 80066da:	f004 0403 	and.w	r4, r4, #3
 80066de:	2c03      	cmp	r4, #3
 80066e0:	d00c      	beq.n	80066fc <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 80066e2:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066e4:	005d      	lsls	r5, r3, #1
 80066e6:	f04f 0c03 	mov.w	ip, #3
 80066ea:	fa0c fc05 	lsl.w	ip, ip, r5
 80066ee:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066f2:	688c      	ldr	r4, [r1, #8]
 80066f4:	40ac      	lsls	r4, r5
 80066f6:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 80066fa:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066fc:	684c      	ldr	r4, [r1, #4]
 80066fe:	f004 0403 	and.w	r4, r4, #3
 8006702:	2c02      	cmp	r4, #2
 8006704:	f43f af7e 	beq.w	8006604 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8006708:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800670a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800670e:	f04f 0c03 	mov.w	ip, #3
 8006712:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006716:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800671a:	684c      	ldr	r4, [r1, #4]
 800671c:	f004 0403 	and.w	r4, r4, #3
 8006720:	fa04 f40e 	lsl.w	r4, r4, lr
 8006724:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8006728:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800672a:	684c      	ldr	r4, [r1, #4]
 800672c:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 8006730:	d0bf      	beq.n	80066b2 <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006732:	4c2e      	ldr	r4, [pc, #184]	@ (80067ec <HAL_GPIO_Init+0x218>)
 8006734:	f8d4 50f4 	ldr.w	r5, [r4, #244]	@ 0xf4
 8006738:	f045 0502 	orr.w	r5, r5, #2
 800673c:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
 8006740:	f8d4 40f4 	ldr.w	r4, [r4, #244]	@ 0xf4
 8006744:	f004 0402 	and.w	r4, r4, #2
 8006748:	9401      	str	r4, [sp, #4]
 800674a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800674c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8006750:	f10c 0502 	add.w	r5, ip, #2
 8006754:	4c24      	ldr	r4, [pc, #144]	@ (80067e8 <HAL_GPIO_Init+0x214>)
 8006756:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800675a:	f003 0e03 	and.w	lr, r3, #3
 800675e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8006762:	240f      	movs	r4, #15
 8006764:	fa04 f40e 	lsl.w	r4, r4, lr
 8006768:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800676c:	4c20      	ldr	r4, [pc, #128]	@ (80067f0 <HAL_GPIO_Init+0x21c>)
 800676e:	42a0      	cmp	r0, r4
 8006770:	f43f af60 	beq.w	8006634 <HAL_GPIO_Init+0x60>
 8006774:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006778:	42a0      	cmp	r0, r4
 800677a:	d022      	beq.n	80067c2 <HAL_GPIO_Init+0x1ee>
 800677c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006780:	42a0      	cmp	r0, r4
 8006782:	d020      	beq.n	80067c6 <HAL_GPIO_Init+0x1f2>
 8006784:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006788:	42a0      	cmp	r0, r4
 800678a:	d01e      	beq.n	80067ca <HAL_GPIO_Init+0x1f6>
 800678c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006790:	42a0      	cmp	r0, r4
 8006792:	d01c      	beq.n	80067ce <HAL_GPIO_Init+0x1fa>
 8006794:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006798:	42a0      	cmp	r0, r4
 800679a:	d01a      	beq.n	80067d2 <HAL_GPIO_Init+0x1fe>
 800679c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80067a0:	42a0      	cmp	r0, r4
 80067a2:	d018      	beq.n	80067d6 <HAL_GPIO_Init+0x202>
 80067a4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80067a8:	42a0      	cmp	r0, r4
 80067aa:	d016      	beq.n	80067da <HAL_GPIO_Init+0x206>
 80067ac:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80067b0:	42a0      	cmp	r0, r4
 80067b2:	d014      	beq.n	80067de <HAL_GPIO_Init+0x20a>
 80067b4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80067b8:	42a0      	cmp	r0, r4
 80067ba:	f43f af39 	beq.w	8006630 <HAL_GPIO_Init+0x5c>
 80067be:	240a      	movs	r4, #10
 80067c0:	e739      	b.n	8006636 <HAL_GPIO_Init+0x62>
 80067c2:	2401      	movs	r4, #1
 80067c4:	e737      	b.n	8006636 <HAL_GPIO_Init+0x62>
 80067c6:	2402      	movs	r4, #2
 80067c8:	e735      	b.n	8006636 <HAL_GPIO_Init+0x62>
 80067ca:	2403      	movs	r4, #3
 80067cc:	e733      	b.n	8006636 <HAL_GPIO_Init+0x62>
 80067ce:	2404      	movs	r4, #4
 80067d0:	e731      	b.n	8006636 <HAL_GPIO_Init+0x62>
 80067d2:	2405      	movs	r4, #5
 80067d4:	e72f      	b.n	8006636 <HAL_GPIO_Init+0x62>
 80067d6:	2406      	movs	r4, #6
 80067d8:	e72d      	b.n	8006636 <HAL_GPIO_Init+0x62>
 80067da:	2407      	movs	r4, #7
 80067dc:	e72b      	b.n	8006636 <HAL_GPIO_Init+0x62>
 80067de:	2408      	movs	r4, #8
 80067e0:	e729      	b.n	8006636 <HAL_GPIO_Init+0x62>
  }
}
 80067e2:	b003      	add	sp, #12
 80067e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067e6:	bf00      	nop
 80067e8:	58000400 	.word	0x58000400
 80067ec:	58024400 	.word	0x58024400
 80067f0:	58020000 	.word	0x58020000

080067f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067f4:	b10a      	cbz	r2, 80067fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067f6:	6181      	str	r1, [r0, #24]
 80067f8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80067fa:	0409      	lsls	r1, r1, #16
 80067fc:	6181      	str	r1, [r0, #24]
  }
}
 80067fe:	4770      	bx	lr

08006800 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006800:	6803      	ldr	r3, [r0, #0]
 8006802:	699a      	ldr	r2, [r3, #24]
 8006804:	f012 0f02 	tst.w	r2, #2
 8006808:	d001      	beq.n	800680e <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800680a:	2200      	movs	r2, #0
 800680c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800680e:	6803      	ldr	r3, [r0, #0]
 8006810:	699a      	ldr	r2, [r3, #24]
 8006812:	f012 0f01 	tst.w	r2, #1
 8006816:	d103      	bne.n	8006820 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006818:	699a      	ldr	r2, [r3, #24]
 800681a:	f042 0201 	orr.w	r2, r2, #1
 800681e:	619a      	str	r2, [r3, #24]
  }
}
 8006820:	4770      	bx	lr

08006822 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006822:	b410      	push	{r4}
 8006824:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006826:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800682a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800682e:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006830:	4321      	orrs	r1, r4
 8006832:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006836:	6802      	ldr	r2, [r0, #0]
 8006838:	6853      	ldr	r3, [r2, #4]
 800683a:	0d64      	lsrs	r4, r4, #21
 800683c:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 8006840:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 8006844:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 8006848:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 800684c:	f044 0403 	orr.w	r4, r4, #3
 8006850:	ea23 0304 	bic.w	r3, r3, r4
 8006854:	430b      	orrs	r3, r1
 8006856:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006858:	f85d 4b04 	ldr.w	r4, [sp], #4
 800685c:	4770      	bx	lr

0800685e <I2C_IsErrorOccurred>:
{
 800685e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006862:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8006864:	6803      	ldr	r3, [r0, #0]
 8006866:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006868:	f017 0710 	ands.w	r7, r7, #16
 800686c:	d04e      	beq.n	800690c <I2C_IsErrorOccurred+0xae>
 800686e:	460e      	mov	r6, r1
 8006870:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006872:	2210      	movs	r2, #16
 8006874:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006876:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	6998      	ldr	r0, [r3, #24]
 800687c:	f010 0f20 	tst.w	r0, #32
 8006880:	d13d      	bne.n	80068fe <I2C_IsErrorOccurred+0xa0>
 8006882:	2d00      	cmp	r5, #0
 8006884:	d13b      	bne.n	80068fe <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8006886:	f1b6 3fff 	cmp.w	r6, #4294967295
 800688a:	d0f5      	beq.n	8006878 <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800688c:	f7fc ff26 	bl	80036dc <HAL_GetTick>
 8006890:	eba0 0008 	sub.w	r0, r0, r8
 8006894:	42b0      	cmp	r0, r6
 8006896:	d801      	bhi.n	800689c <I2C_IsErrorOccurred+0x3e>
 8006898:	2e00      	cmp	r6, #0
 800689a:	d1ed      	bne.n	8006878 <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800689c:	6821      	ldr	r1, [r4, #0]
 800689e:	684a      	ldr	r2, [r1, #4]
 80068a0:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 80068a4:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 80068a8:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80068aa:	6988      	ldr	r0, [r1, #24]
 80068ac:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 80068b0:	d004      	beq.n	80068bc <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 80068b2:	3b20      	subs	r3, #32
 80068b4:	bf18      	it	ne
 80068b6:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 80068b8:	b902      	cbnz	r2, 80068bc <I2C_IsErrorOccurred+0x5e>
 80068ba:	b9c3      	cbnz	r3, 80068ee <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	f013 0f20 	tst.w	r3, #32
 80068c4:	d1d8      	bne.n	8006878 <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80068c6:	f7fc ff09 	bl	80036dc <HAL_GetTick>
 80068ca:	eba0 0008 	sub.w	r0, r0, r8
 80068ce:	2819      	cmp	r0, #25
 80068d0:	d9f4      	bls.n	80068bc <I2C_IsErrorOccurred+0x5e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068d2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80068d4:	f043 0320 	orr.w	r3, r3, #32
 80068d8:	6463      	str	r3, [r4, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80068da:	2320      	movs	r3, #32
 80068dc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80068e0:	2300      	movs	r3, #0
 80068e2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
              __HAL_UNLOCK(hi2c);
 80068e6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
              status = HAL_ERROR;
 80068ea:	2501      	movs	r5, #1
 80068ec:	e7e6      	b.n	80068bc <I2C_IsErrorOccurred+0x5e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068ee:	684b      	ldr	r3, [r1, #4]
 80068f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068f4:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80068f6:	f7fc fef1 	bl	80036dc <HAL_GetTick>
 80068fa:	4680      	mov	r8, r0
 80068fc:	e7de      	b.n	80068bc <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 80068fe:	2d00      	cmp	r5, #0
 8006900:	d140      	bne.n	8006984 <I2C_IsErrorOccurred+0x126>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006902:	2220      	movs	r2, #32
 8006904:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8006906:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8006908:	2501      	movs	r5, #1
 800690a:	e000      	b.n	800690e <I2C_IsErrorOccurred+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 800690c:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 800690e:	6822      	ldr	r2, [r4, #0]
 8006910:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006912:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006916:	d005      	beq.n	8006924 <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 8006918:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800691c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006920:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8006922:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006924:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8006928:	d006      	beq.n	8006938 <I2C_IsErrorOccurred+0xda>
    error_code |= HAL_I2C_ERROR_OVR;
 800692a:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800692e:	6822      	ldr	r2, [r4, #0]
 8006930:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006934:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8006936:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006938:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800693c:	d024      	beq.n	8006988 <I2C_IsErrorOccurred+0x12a>
    error_code |= HAL_I2C_ERROR_ARLO;
 800693e:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006948:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 800694a:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 800694c:	4620      	mov	r0, r4
 800694e:	f7ff ff57 	bl	8006800 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8006952:	6822      	ldr	r2, [r4, #0]
 8006954:	6853      	ldr	r3, [r2, #4]
 8006956:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800695a:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800695e:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8006962:	f023 0301 	bic.w	r3, r3, #1
 8006966:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8006968:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800696a:	433b      	orrs	r3, r7
 800696c:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800696e:	2320      	movs	r3, #32
 8006970:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006974:	2300      	movs	r3, #0
 8006976:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800697a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800697e:	4628      	mov	r0, r5
 8006980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 8006984:	2704      	movs	r7, #4
 8006986:	e7c2      	b.n	800690e <I2C_IsErrorOccurred+0xb0>
  if (status != HAL_OK)
 8006988:	2d00      	cmp	r5, #0
 800698a:	d0f8      	beq.n	800697e <I2C_IsErrorOccurred+0x120>
 800698c:	e7de      	b.n	800694c <I2C_IsErrorOccurred+0xee>

0800698e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800698e:	b570      	push	{r4, r5, r6, lr}
 8006990:	4604      	mov	r4, r0
 8006992:	460d      	mov	r5, r1
 8006994:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	f013 0f02 	tst.w	r3, #2
 800699e:	d11d      	bne.n	80069dc <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069a0:	4632      	mov	r2, r6
 80069a2:	4629      	mov	r1, r5
 80069a4:	4620      	mov	r0, r4
 80069a6:	f7ff ff5a 	bl	800685e <I2C_IsErrorOccurred>
 80069aa:	b9c8      	cbnz	r0, 80069e0 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80069ac:	f1b5 3fff 	cmp.w	r5, #4294967295
 80069b0:	d0f1      	beq.n	8006996 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069b2:	f7fc fe93 	bl	80036dc <HAL_GetTick>
 80069b6:	1b80      	subs	r0, r0, r6
 80069b8:	42a8      	cmp	r0, r5
 80069ba:	d801      	bhi.n	80069c0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80069bc:	2d00      	cmp	r5, #0
 80069be:	d1ea      	bne.n	8006996 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069c0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80069c2:	f043 0320 	orr.w	r3, r3, #32
 80069c6:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80069c8:	2320      	movs	r3, #32
 80069ca:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ce:	2300      	movs	r3, #0
 80069d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 80069d4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 80069d8:	2001      	movs	r0, #1
 80069da:	e000      	b.n	80069de <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80069dc:	2000      	movs	r0, #0
}
 80069de:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80069e0:	2001      	movs	r0, #1
 80069e2:	e7fc      	b.n	80069de <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080069e4 <I2C_WaitOnFlagUntilTimeout>:
{
 80069e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e8:	4606      	mov	r6, r0
 80069ea:	4688      	mov	r8, r1
 80069ec:	4617      	mov	r7, r2
 80069ee:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069f0:	6834      	ldr	r4, [r6, #0]
 80069f2:	69a4      	ldr	r4, [r4, #24]
 80069f4:	ea38 0404 	bics.w	r4, r8, r4
 80069f8:	bf0c      	ite	eq
 80069fa:	2401      	moveq	r4, #1
 80069fc:	2400      	movne	r4, #0
 80069fe:	42bc      	cmp	r4, r7
 8006a00:	d118      	bne.n	8006a34 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8006a02:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006a06:	d0f3      	beq.n	80069f0 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a08:	f7fc fe68 	bl	80036dc <HAL_GetTick>
 8006a0c:	9b06      	ldr	r3, [sp, #24]
 8006a0e:	1ac0      	subs	r0, r0, r3
 8006a10:	42a8      	cmp	r0, r5
 8006a12:	d801      	bhi.n	8006a18 <I2C_WaitOnFlagUntilTimeout+0x34>
 8006a14:	2d00      	cmp	r5, #0
 8006a16:	d1eb      	bne.n	80069f0 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a18:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8006a1a:	f043 0320 	orr.w	r3, r3, #32
 8006a1e:	6473      	str	r3, [r6, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a20:	2320      	movs	r3, #32
 8006a22:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a26:	2300      	movs	r3, #0
 8006a28:	f886 3042 	strb.w	r3, [r6, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8006a2c:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_ERROR;
 8006a30:	2001      	movs	r0, #1
 8006a32:	e000      	b.n	8006a36 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8006a34:	2000      	movs	r0, #0
}
 8006a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006a3c <I2C_RequestMemoryWrite>:
{
 8006a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a40:	b082      	sub	sp, #8
 8006a42:	4604      	mov	r4, r0
 8006a44:	4690      	mov	r8, r2
 8006a46:	461d      	mov	r5, r3
 8006a48:	9e08      	ldr	r6, [sp, #32]
 8006a4a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006a4c:	4b19      	ldr	r3, [pc, #100]	@ (8006ab4 <I2C_RequestMemoryWrite+0x78>)
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a54:	b2ea      	uxtb	r2, r5
 8006a56:	f7ff fee4 	bl	8006822 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a5a:	463a      	mov	r2, r7
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f7ff ff95 	bl	800698e <I2C_WaitOnTXISFlagUntilTimeout>
 8006a64:	b9f8      	cbnz	r0, 8006aa6 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a66:	2d01      	cmp	r5, #1
 8006a68:	d10e      	bne.n	8006a88 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	fa5f f288 	uxtb.w	r2, r8
 8006a70:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006a72:	9700      	str	r7, [sp, #0]
 8006a74:	4633      	mov	r3, r6
 8006a76:	2200      	movs	r2, #0
 8006a78:	2180      	movs	r1, #128	@ 0x80
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f7ff ffb2 	bl	80069e4 <I2C_WaitOnFlagUntilTimeout>
 8006a80:	b9a8      	cbnz	r0, 8006aae <I2C_RequestMemoryWrite+0x72>
}
 8006a82:	b002      	add	sp, #8
 8006a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8006a8e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a90:	463a      	mov	r2, r7
 8006a92:	4631      	mov	r1, r6
 8006a94:	4620      	mov	r0, r4
 8006a96:	f7ff ff7a 	bl	800698e <I2C_WaitOnTXISFlagUntilTimeout>
 8006a9a:	b930      	cbnz	r0, 8006aaa <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	fa5f f288 	uxtb.w	r2, r8
 8006aa2:	629a      	str	r2, [r3, #40]	@ 0x28
 8006aa4:	e7e5      	b.n	8006a72 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8006aa6:	2001      	movs	r0, #1
 8006aa8:	e7eb      	b.n	8006a82 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8006aaa:	2001      	movs	r0, #1
 8006aac:	e7e9      	b.n	8006a82 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8006aae:	2001      	movs	r0, #1
 8006ab0:	e7e7      	b.n	8006a82 <I2C_RequestMemoryWrite+0x46>
 8006ab2:	bf00      	nop
 8006ab4:	80002000 	.word	0x80002000

08006ab8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006ab8:	b570      	push	{r4, r5, r6, lr}
 8006aba:	4605      	mov	r5, r0
 8006abc:	460c      	mov	r4, r1
 8006abe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ac0:	682b      	ldr	r3, [r5, #0]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	f013 0f20 	tst.w	r3, #32
 8006ac8:	d11a      	bne.n	8006b00 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006aca:	4632      	mov	r2, r6
 8006acc:	4621      	mov	r1, r4
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f7ff fec5 	bl	800685e <I2C_IsErrorOccurred>
 8006ad4:	b9b0      	cbnz	r0, 8006b04 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ad6:	f7fc fe01 	bl	80036dc <HAL_GetTick>
 8006ada:	1b80      	subs	r0, r0, r6
 8006adc:	42a0      	cmp	r0, r4
 8006ade:	d801      	bhi.n	8006ae4 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8006ae0:	2c00      	cmp	r4, #0
 8006ae2:	d1ed      	bne.n	8006ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ae4:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8006ae6:	f043 0320 	orr.w	r3, r3, #32
 8006aea:	646b      	str	r3, [r5, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006aec:	2320      	movs	r3, #32
 8006aee:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af2:	2300      	movs	r3, #0
 8006af4:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006af8:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 8006afc:	2001      	movs	r0, #1
}
 8006afe:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8006b00:	2000      	movs	r0, #0
 8006b02:	e7fc      	b.n	8006afe <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8006b04:	2001      	movs	r0, #1
 8006b06:	e7fa      	b.n	8006afe <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08006b08 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	d057      	beq.n	8006bbc <HAL_I2C_Init+0xb4>
{
 8006b0c:	b510      	push	{r4, lr}
 8006b0e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b10:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d041      	beq.n	8006b9c <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b18:	2324      	movs	r3, #36	@ 0x24
 8006b1a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006b1e:	6822      	ldr	r2, [r4, #0]
 8006b20:	6813      	ldr	r3, [r2, #0]
 8006b22:	f023 0301 	bic.w	r3, r3, #1
 8006b26:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b28:	6863      	ldr	r3, [r4, #4]
 8006b2a:	6822      	ldr	r2, [r4, #0]
 8006b2c:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8006b30:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006b32:	6822      	ldr	r2, [r4, #0]
 8006b34:	6893      	ldr	r3, [r2, #8]
 8006b36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b3a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b3c:	68e3      	ldr	r3, [r4, #12]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d031      	beq.n	8006ba6 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006b42:	68a3      	ldr	r3, [r4, #8]
 8006b44:	6822      	ldr	r2, [r4, #0]
 8006b46:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 8006b4a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b4c:	68e3      	ldr	r3, [r4, #12]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d02f      	beq.n	8006bb2 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006b52:	6822      	ldr	r2, [r4, #0]
 8006b54:	6851      	ldr	r1, [r2, #4]
 8006b56:	4b1a      	ldr	r3, [pc, #104]	@ (8006bc0 <HAL_I2C_Init+0xb8>)
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006b5c:	6822      	ldr	r2, [r4, #0]
 8006b5e:	68d3      	ldr	r3, [r2, #12]
 8006b60:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b64:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b66:	6923      	ldr	r3, [r4, #16]
 8006b68:	6962      	ldr	r2, [r4, #20]
 8006b6a:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006b6c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b6e:	6822      	ldr	r2, [r4, #0]
 8006b70:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006b74:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b76:	69e3      	ldr	r3, [r4, #28]
 8006b78:	6a21      	ldr	r1, [r4, #32]
 8006b7a:	6822      	ldr	r2, [r4, #0]
 8006b7c:	430b      	orrs	r3, r1
 8006b7e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006b80:	6822      	ldr	r2, [r4, #0]
 8006b82:	6813      	ldr	r3, [r2, #0]
 8006b84:	f043 0301 	orr.w	r3, r3, #1
 8006b88:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b8e:	2320      	movs	r3, #32
 8006b90:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b94:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b96:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8006b9a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006b9c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8006ba0:	f7fb fe0a 	bl	80027b8 <HAL_I2C_MspInit>
 8006ba4:	e7b8      	b.n	8006b18 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ba6:	68a3      	ldr	r3, [r4, #8]
 8006ba8:	6822      	ldr	r2, [r4, #0]
 8006baa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bae:	6093      	str	r3, [r2, #8]
 8006bb0:	e7cc      	b.n	8006b4c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006bb8:	605a      	str	r2, [r3, #4]
 8006bba:	e7ca      	b.n	8006b52 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8006bbc:	2001      	movs	r0, #1
}
 8006bbe:	4770      	bx	lr
 8006bc0:	02008000 	.word	0x02008000

08006bc4 <HAL_I2C_Mem_Write>:
{
 8006bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	460d      	mov	r5, r1
 8006bcc:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8006bd0:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bd2:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8006bd6:	b2c9      	uxtb	r1, r1
 8006bd8:	2920      	cmp	r1, #32
 8006bda:	f040 80bc 	bne.w	8006d56 <HAL_I2C_Mem_Write+0x192>
 8006bde:	4604      	mov	r4, r0
 8006be0:	4690      	mov	r8, r2
 8006be2:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8006be4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006be6:	f1ba 0f00 	cmp.w	sl, #0
 8006bea:	bf18      	it	ne
 8006bec:	2b00      	cmpne	r3, #0
 8006bee:	d016      	beq.n	8006c1e <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8006bf0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	f000 80b2 	beq.w	8006d5e <HAL_I2C_Mem_Write+0x19a>
 8006bfa:	f04f 0b01 	mov.w	fp, #1
 8006bfe:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8006c02:	f7fc fd6b 	bl	80036dc <HAL_GetTick>
 8006c06:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c08:	9000      	str	r0, [sp, #0]
 8006c0a:	2319      	movs	r3, #25
 8006c0c:	465a      	mov	r2, fp
 8006c0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006c12:	4620      	mov	r0, r4
 8006c14:	f7ff fee6 	bl	80069e4 <I2C_WaitOnFlagUntilTimeout>
 8006c18:	b130      	cbz	r0, 8006c28 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 8006c1a:	2001      	movs	r0, #1
 8006c1c:	e09c      	b.n	8006d58 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006c1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c22:	6443      	str	r3, [r0, #68]	@ 0x44
      return  HAL_ERROR;
 8006c24:	2001      	movs	r0, #1
 8006c26:	e097      	b.n	8006d58 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006c28:	2321      	movs	r3, #33	@ 0x21
 8006c2a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c2e:	2340      	movs	r3, #64	@ 0x40
 8006c30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c34:	2300      	movs	r3, #0
 8006c36:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8006c38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006c3a:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006c3c:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006c40:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c42:	9601      	str	r6, [sp, #4]
 8006c44:	9700      	str	r7, [sp, #0]
 8006c46:	464b      	mov	r3, r9
 8006c48:	4642      	mov	r2, r8
 8006c4a:	4629      	mov	r1, r5
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	f7ff fef5 	bl	8006a3c <I2C_RequestMemoryWrite>
 8006c52:	b970      	cbnz	r0, 8006c72 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c54:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	2bff      	cmp	r3, #255	@ 0xff
 8006c5a:	d90f      	bls.n	8006c7c <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c5c:	22ff      	movs	r2, #255	@ 0xff
 8006c5e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006c60:	2300      	movs	r3, #0
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c68:	4629      	mov	r1, r5
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f7ff fdd9 	bl	8006822 <I2C_TransferConfig>
 8006c70:	e021      	b.n	8006cb6 <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8006c72:	2300      	movs	r3, #0
 8006c74:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8006c78:	4658      	mov	r0, fp
 8006c7a:	e06d      	b.n	8006d58 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8006c7c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8006c7e:	b292      	uxth	r2, r2
 8006c80:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006c82:	2300      	movs	r3, #0
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f7ff fdc7 	bl	8006822 <I2C_TransferConfig>
 8006c94:	e00f      	b.n	8006cb6 <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8006c96:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8006c98:	b292      	uxth	r2, r2
 8006c9a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ca4:	b2d2      	uxtb	r2, r2
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f7ff fdba 	bl	8006822 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006cae:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d033      	beq.n	8006d1e <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cb6:	4632      	mov	r2, r6
 8006cb8:	4639      	mov	r1, r7
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f7ff fe67 	bl	800698e <I2C_WaitOnTXISFlagUntilTimeout>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d14e      	bne.n	8006d62 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006cc4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	7812      	ldrb	r2, [r2, #0]
 8006cca:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8006ccc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006cce:	3301      	adds	r3, #1
 8006cd0:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8006cd2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8006cdc:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ce4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8006ce6:	b292      	uxth	r2, r2
 8006ce8:	2a00      	cmp	r2, #0
 8006cea:	d0e0      	beq.n	8006cae <HAL_I2C_Mem_Write+0xea>
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1de      	bne.n	8006cae <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006cf0:	9600      	str	r6, [sp, #0]
 8006cf2:	463b      	mov	r3, r7
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	2180      	movs	r1, #128	@ 0x80
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f7ff fe73 	bl	80069e4 <I2C_WaitOnFlagUntilTimeout>
 8006cfe:	bb90      	cbnz	r0, 8006d66 <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d00:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	2bff      	cmp	r3, #255	@ 0xff
 8006d06:	d9c6      	bls.n	8006c96 <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d08:	22ff      	movs	r2, #255	@ 0xff
 8006d0a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d14:	4629      	mov	r1, r5
 8006d16:	4620      	mov	r0, r4
 8006d18:	f7ff fd83 	bl	8006822 <I2C_TransferConfig>
 8006d1c:	e7c7      	b.n	8006cae <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d1e:	4632      	mov	r2, r6
 8006d20:	4639      	mov	r1, r7
 8006d22:	4620      	mov	r0, r4
 8006d24:	f7ff fec8 	bl	8006ab8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d28:	b9f8      	cbnz	r0, 8006d6a <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006d30:	6821      	ldr	r1, [r4, #0]
 8006d32:	684b      	ldr	r3, [r1, #4]
 8006d34:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8006d38:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8006d3c:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8006d40:	f023 0301 	bic.w	r3, r3, #1
 8006d44:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006d46:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8006d50:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8006d54:	e000      	b.n	8006d58 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 8006d56:	2002      	movs	r0, #2
}
 8006d58:	b003      	add	sp, #12
 8006d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8006d5e:	2002      	movs	r0, #2
 8006d60:	e7fa      	b.n	8006d58 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8006d62:	2001      	movs	r0, #1
 8006d64:	e7f8      	b.n	8006d58 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 8006d66:	2001      	movs	r0, #1
 8006d68:	e7f6      	b.n	8006d58 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 8006d6a:	2001      	movs	r0, #1
 8006d6c:	e7f4      	b.n	8006d58 <HAL_I2C_Mem_Write+0x194>
	...

08006d70 <HAL_I2C_IsDeviceReady>:
{
 8006d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d74:	b085      	sub	sp, #20
 8006d76:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d7c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b20      	cmp	r3, #32
 8006d84:	f040 809c 	bne.w	8006ec0 <HAL_I2C_IsDeviceReady+0x150>
 8006d88:	4606      	mov	r6, r0
 8006d8a:	4689      	mov	r9, r1
 8006d8c:	4690      	mov	r8, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006d8e:	6803      	ldr	r3, [r0, #0]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8006d96:	f040 8095 	bne.w	8006ec4 <HAL_I2C_IsDeviceReady+0x154>
    __HAL_LOCK(hi2c);
 8006d9a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	f000 8092 	beq.w	8006ec8 <HAL_I2C_IsDeviceReady+0x158>
 8006da4:	2301      	movs	r3, #1
 8006da6:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006daa:	2324      	movs	r3, #36	@ 0x24
 8006dac:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006db0:	2300      	movs	r3, #0
 8006db2:	6443      	str	r3, [r0, #68]	@ 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006db4:	68f3      	ldr	r3, [r6, #12]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d010      	beq.n	8006ddc <HAL_I2C_IsDeviceReady+0x6c>
 8006dba:	f3c9 0309 	ubfx	r3, r9, #0, #10
 8006dbe:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8006dc2:	6832      	ldr	r2, [r6, #0]
 8006dc4:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8006dc6:	f7fc fc89 	bl	80036dc <HAL_GetTick>
 8006dca:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dcc:	6832      	ldr	r2, [r6, #0]
 8006dce:	6993      	ldr	r3, [r2, #24]
 8006dd0:	f3c3 1c40 	ubfx	ip, r3, #5, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006dd4:	6993      	ldr	r3, [r2, #24]
 8006dd6:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006dda:	e00b      	b.n	8006df4 <HAL_I2C_IsDeviceReady+0x84>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006ddc:	f3c9 0209 	ubfx	r2, r9, #0, #10
 8006de0:	4b3d      	ldr	r3, [pc, #244]	@ (8006ed8 <HAL_I2C_IsDeviceReady+0x168>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	e7ed      	b.n	8006dc2 <HAL_I2C_IsDeviceReady+0x52>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006de6:	6833      	ldr	r3, [r6, #0]
 8006de8:	699c      	ldr	r4, [r3, #24]
 8006dea:	f3c4 1c40 	ubfx	ip, r4, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006df4:	ea5c 0c03 	orrs.w	ip, ip, r3
 8006df8:	d117      	bne.n	8006e2a <HAL_I2C_IsDeviceReady+0xba>
        if (Timeout != HAL_MAX_DELAY)
 8006dfa:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006dfe:	d0f2      	beq.n	8006de6 <HAL_I2C_IsDeviceReady+0x76>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006e00:	f7fc fc6c 	bl	80036dc <HAL_GetTick>
 8006e04:	1bc0      	subs	r0, r0, r7
 8006e06:	42a8      	cmp	r0, r5
 8006e08:	d801      	bhi.n	8006e0e <HAL_I2C_IsDeviceReady+0x9e>
 8006e0a:	2d00      	cmp	r5, #0
 8006e0c:	d1eb      	bne.n	8006de6 <HAL_I2C_IsDeviceReady+0x76>
            hi2c->State = HAL_I2C_STATE_READY;
 8006e0e:	2320      	movs	r3, #32
 8006e10:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e14:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8006e16:	f043 0320 	orr.w	r3, r3, #32
 8006e1a:	6473      	str	r3, [r6, #68]	@ 0x44
            __HAL_UNLOCK(hi2c);
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
            return HAL_ERROR;
 8006e22:	2001      	movs	r0, #1
}
 8006e24:	b005      	add	sp, #20
 8006e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006e2a:	6833      	ldr	r3, [r6, #0]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	f013 0f10 	tst.w	r3, #16
 8006e32:	d023      	beq.n	8006e7c <HAL_I2C_IsDeviceReady+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006e34:	9700      	str	r7, [sp, #0]
 8006e36:	462b      	mov	r3, r5
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2120      	movs	r1, #32
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f7ff fdd1 	bl	80069e4 <I2C_WaitOnFlagUntilTimeout>
 8006e42:	2800      	cmp	r0, #0
 8006e44:	d144      	bne.n	8006ed0 <HAL_I2C_IsDeviceReady+0x160>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e46:	6833      	ldr	r3, [r6, #0]
 8006e48:	2210      	movs	r2, #16
 8006e4a:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e4c:	6833      	ldr	r3, [r6, #0]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	61da      	str	r2, [r3, #28]
      if (I2C_Trials == Trials)
 8006e52:	9b03      	ldr	r3, [sp, #12]
 8006e54:	4543      	cmp	r3, r8
 8006e56:	d022      	beq.n	8006e9e <HAL_I2C_IsDeviceReady+0x12e>
      I2C_Trials++;
 8006e58:	9b03      	ldr	r3, [sp, #12]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 8006e5e:	9b03      	ldr	r3, [sp, #12]
 8006e60:	4543      	cmp	r3, r8
 8006e62:	d3a7      	bcc.n	8006db4 <HAL_I2C_IsDeviceReady+0x44>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e64:	2320      	movs	r3, #32
 8006e66:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e6a:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8006e6c:	f043 0320 	orr.w	r3, r3, #32
 8006e70:	6473      	str	r3, [r6, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 8006e72:	2300      	movs	r3, #0
 8006e74:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
    return HAL_ERROR;
 8006e78:	2001      	movs	r0, #1
 8006e7a:	e7d3      	b.n	8006e24 <HAL_I2C_IsDeviceReady+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006e7c:	9700      	str	r7, [sp, #0]
 8006e7e:	462b      	mov	r3, r5
 8006e80:	2200      	movs	r2, #0
 8006e82:	2120      	movs	r1, #32
 8006e84:	4630      	mov	r0, r6
 8006e86:	f7ff fdad 	bl	80069e4 <I2C_WaitOnFlagUntilTimeout>
 8006e8a:	b9f8      	cbnz	r0, 8006ecc <HAL_I2C_IsDeviceReady+0x15c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e8c:	6832      	ldr	r2, [r6, #0]
 8006e8e:	2320      	movs	r3, #32
 8006e90:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8006e92:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 8006e96:	2300      	movs	r3, #0
 8006e98:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_OK;
 8006e9c:	e7c2      	b.n	8006e24 <HAL_I2C_IsDeviceReady+0xb4>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006e9e:	6832      	ldr	r2, [r6, #0]
 8006ea0:	6853      	ldr	r3, [r2, #4]
 8006ea2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ea6:	6053      	str	r3, [r2, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006ea8:	9700      	str	r7, [sp, #0]
 8006eaa:	462b      	mov	r3, r5
 8006eac:	2200      	movs	r2, #0
 8006eae:	2120      	movs	r1, #32
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	f7ff fd97 	bl	80069e4 <I2C_WaitOnFlagUntilTimeout>
 8006eb6:	b968      	cbnz	r0, 8006ed4 <HAL_I2C_IsDeviceReady+0x164>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006eb8:	6833      	ldr	r3, [r6, #0]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	61da      	str	r2, [r3, #28]
 8006ebe:	e7cb      	b.n	8006e58 <HAL_I2C_IsDeviceReady+0xe8>
    return HAL_BUSY;
 8006ec0:	2002      	movs	r0, #2
 8006ec2:	e7af      	b.n	8006e24 <HAL_I2C_IsDeviceReady+0xb4>
      return HAL_BUSY;
 8006ec4:	2002      	movs	r0, #2
 8006ec6:	e7ad      	b.n	8006e24 <HAL_I2C_IsDeviceReady+0xb4>
    __HAL_LOCK(hi2c);
 8006ec8:	2002      	movs	r0, #2
 8006eca:	e7ab      	b.n	8006e24 <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 8006ecc:	2001      	movs	r0, #1
 8006ece:	e7a9      	b.n	8006e24 <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 8006ed0:	2001      	movs	r0, #1
 8006ed2:	e7a7      	b.n	8006e24 <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 8006ed4:	2001      	movs	r0, #1
 8006ed6:	e7a5      	b.n	8006e24 <HAL_I2C_IsDeviceReady+0xb4>
 8006ed8:	02002000 	.word	0x02002000

08006edc <HAL_I2C_EV_IRQHandler>:
{
 8006edc:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006ede:	6803      	ldr	r3, [r0, #0]
 8006ee0:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006ee2:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8006ee4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006ee6:	b103      	cbz	r3, 8006eea <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8006ee8:	4798      	blx	r3
}
 8006eea:	bd08      	pop	{r3, pc}

08006eec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006eec:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eee:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	2a20      	cmp	r2, #32
 8006ef6:	d123      	bne.n	8006f40 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ef8:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8006efc:	2a01      	cmp	r2, #1
 8006efe:	d021      	beq.n	8006f44 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8006f00:	2201      	movs	r2, #1
 8006f02:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f06:	2224      	movs	r2, #36	@ 0x24
 8006f08:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f0c:	6800      	ldr	r0, [r0, #0]
 8006f0e:	6802      	ldr	r2, [r0, #0]
 8006f10:	f022 0201 	bic.w	r2, r2, #1
 8006f14:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006f16:	6818      	ldr	r0, [r3, #0]
 8006f18:	6802      	ldr	r2, [r0, #0]
 8006f1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f1e:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	6802      	ldr	r2, [r0, #0]
 8006f24:	4311      	orrs	r1, r2
 8006f26:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f28:	6819      	ldr	r1, [r3, #0]
 8006f2a:	680a      	ldr	r2, [r1, #0]
 8006f2c:	f042 0201 	orr.w	r2, r2, #1
 8006f30:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f32:	2220      	movs	r2, #32
 8006f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f38:	2000      	movs	r0, #0
 8006f3a:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f3e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006f40:	2002      	movs	r0, #2
 8006f42:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006f44:	2002      	movs	r0, #2
  }
}
 8006f46:	4770      	bx	lr

08006f48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006f48:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f4a:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8006f4e:	b2d2      	uxtb	r2, r2
 8006f50:	2a20      	cmp	r2, #32
 8006f52:	d121      	bne.n	8006f98 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f54:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8006f58:	2a01      	cmp	r2, #1
 8006f5a:	d01f      	beq.n	8006f9c <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f62:	2224      	movs	r2, #36	@ 0x24
 8006f64:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f68:	6800      	ldr	r0, [r0, #0]
 8006f6a:	6802      	ldr	r2, [r0, #0]
 8006f6c:	f022 0201 	bic.w	r2, r2, #1
 8006f70:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f72:	6818      	ldr	r0, [r3, #0]
 8006f74:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006f76:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006f7a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f7e:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f80:	6819      	ldr	r1, [r3, #0]
 8006f82:	680a      	ldr	r2, [r1, #0]
 8006f84:	f042 0201 	orr.w	r2, r2, #1
 8006f88:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f90:	2000      	movs	r0, #0
 8006f92:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f96:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006f98:	2002      	movs	r0, #2
 8006f9a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006f9c:	2002      	movs	r0, #2
  }
}
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006fa0:	4b13      	ldr	r3, [pc, #76]	@ (8006ff0 <HAL_PWREx_ConfigSupply+0x50>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f013 0f04 	tst.w	r3, #4
 8006fa8:	d107      	bne.n	8006fba <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006faa:	4b11      	ldr	r3, [pc, #68]	@ (8006ff0 <HAL_PWREx_ConfigSupply+0x50>)
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	f003 0307 	and.w	r3, r3, #7
 8006fb2:	4283      	cmp	r3, r0
 8006fb4:	d01a      	beq.n	8006fec <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006fb6:	2001      	movs	r0, #1
 8006fb8:	4770      	bx	lr
{
 8006fba:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006fbc:	4a0c      	ldr	r2, [pc, #48]	@ (8006ff0 <HAL_PWREx_ConfigSupply+0x50>)
 8006fbe:	68d3      	ldr	r3, [r2, #12]
 8006fc0:	f023 0307 	bic.w	r3, r3, #7
 8006fc4:	4303      	orrs	r3, r0
 8006fc6:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006fc8:	f7fc fb88 	bl	80036dc <HAL_GetTick>
 8006fcc:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006fce:	4b08      	ldr	r3, [pc, #32]	@ (8006ff0 <HAL_PWREx_ConfigSupply+0x50>)
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8006fd6:	d107      	bne.n	8006fe8 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006fd8:	f7fc fb80 	bl	80036dc <HAL_GetTick>
 8006fdc:	1b00      	subs	r0, r0, r4
 8006fde:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006fe2:	d9f4      	bls.n	8006fce <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 8006fe4:	2001      	movs	r0, #1
 8006fe6:	e000      	b.n	8006fea <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006fe8:	2000      	movs	r0, #0
}
 8006fea:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8006fec:	2000      	movs	r0, #0
}
 8006fee:	4770      	bx	lr
 8006ff0:	58024800 	.word	0x58024800

08006ff4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	f000 8318 	beq.w	800762a <HAL_RCC_OscConfig+0x636>
{
 8006ffa:	b538      	push	{r3, r4, r5, lr}
 8006ffc:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ffe:	6803      	ldr	r3, [r0, #0]
 8007000:	f013 0f01 	tst.w	r3, #1
 8007004:	d025      	beq.n	8007052 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007006:	4a94      	ldr	r2, [pc, #592]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 8007008:	6913      	ldr	r3, [r2, #16]
 800700a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800700e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007010:	2b10      	cmp	r3, #16
 8007012:	d015      	beq.n	8007040 <HAL_RCC_OscConfig+0x4c>
 8007014:	2b18      	cmp	r3, #24
 8007016:	d00f      	beq.n	8007038 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007018:	6863      	ldr	r3, [r4, #4]
 800701a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800701e:	d03f      	beq.n	80070a0 <HAL_RCC_OscConfig+0xac>
 8007020:	2b00      	cmp	r3, #0
 8007022:	d153      	bne.n	80070cc <HAL_RCC_OscConfig+0xd8>
 8007024:	4b8c      	ldr	r3, [pc, #560]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	e038      	b.n	80070aa <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007038:	f002 0203 	and.w	r2, r2, #3
 800703c:	2a02      	cmp	r2, #2
 800703e:	d1eb      	bne.n	8007018 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007040:	4b85      	ldr	r3, [pc, #532]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8007048:	d003      	beq.n	8007052 <HAL_RCC_OscConfig+0x5e>
 800704a:	6863      	ldr	r3, [r4, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 82ee 	beq.w	800762e <HAL_RCC_OscConfig+0x63a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	f013 0f02 	tst.w	r3, #2
 8007058:	f000 80a1 	beq.w	800719e <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800705c:	4a7e      	ldr	r2, [pc, #504]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 800705e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007060:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007062:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8007066:	d05a      	beq.n	800711e <HAL_RCC_OscConfig+0x12a>
 8007068:	2b18      	cmp	r3, #24
 800706a:	d055      	beq.n	8007118 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800706c:	68e3      	ldr	r3, [r4, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	f000 80de 	beq.w	8007230 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007074:	4978      	ldr	r1, [pc, #480]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 8007076:	680a      	ldr	r2, [r1, #0]
 8007078:	f022 0219 	bic.w	r2, r2, #25
 800707c:	4313      	orrs	r3, r2
 800707e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007080:	f7fc fb2c 	bl	80036dc <HAL_GetTick>
 8007084:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007086:	4b74      	ldr	r3, [pc, #464]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f013 0f04 	tst.w	r3, #4
 800708e:	f040 80ad 	bne.w	80071ec <HAL_RCC_OscConfig+0x1f8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007092:	f7fc fb23 	bl	80036dc <HAL_GetTick>
 8007096:	1b40      	subs	r0, r0, r5
 8007098:	2802      	cmp	r0, #2
 800709a:	d9f4      	bls.n	8007086 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 800709c:	2003      	movs	r0, #3
 800709e:	e2cd      	b.n	800763c <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070a0:	4a6d      	ldr	r2, [pc, #436]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 80070a2:	6813      	ldr	r3, [r2, #0]
 80070a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070a8:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070aa:	6863      	ldr	r3, [r4, #4]
 80070ac:	b32b      	cbz	r3, 80070fa <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 80070ae:	f7fc fb15 	bl	80036dc <HAL_GetTick>
 80070b2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070b4:	4b68      	ldr	r3, [pc, #416]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80070bc:	d1c9      	bne.n	8007052 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070be:	f7fc fb0d 	bl	80036dc <HAL_GetTick>
 80070c2:	1b40      	subs	r0, r0, r5
 80070c4:	2864      	cmp	r0, #100	@ 0x64
 80070c6:	d9f5      	bls.n	80070b4 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 80070c8:	2003      	movs	r0, #3
 80070ca:	e2b7      	b.n	800763c <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070d0:	d009      	beq.n	80070e6 <HAL_RCC_OscConfig+0xf2>
 80070d2:	4b61      	ldr	r3, [pc, #388]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	e7e1      	b.n	80070aa <HAL_RCC_OscConfig+0xb6>
 80070e6:	4b5c      	ldr	r3, [pc, #368]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80070f6:	601a      	str	r2, [r3, #0]
 80070f8:	e7d7      	b.n	80070aa <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 80070fa:	f7fc faef 	bl	80036dc <HAL_GetTick>
 80070fe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007100:	4b55      	ldr	r3, [pc, #340]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8007108:	d0a3      	beq.n	8007052 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800710a:	f7fc fae7 	bl	80036dc <HAL_GetTick>
 800710e:	1b40      	subs	r0, r0, r5
 8007110:	2864      	cmp	r0, #100	@ 0x64
 8007112:	d9f5      	bls.n	8007100 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8007114:	2003      	movs	r0, #3
 8007116:	e291      	b.n	800763c <HAL_RCC_OscConfig+0x648>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007118:	f012 0f03 	tst.w	r2, #3
 800711c:	d1a6      	bne.n	800706c <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800711e:	4b4e      	ldr	r3, [pc, #312]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f013 0f04 	tst.w	r3, #4
 8007126:	d003      	beq.n	8007130 <HAL_RCC_OscConfig+0x13c>
 8007128:	68e3      	ldr	r3, [r4, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 8281 	beq.w	8007632 <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007130:	4a49      	ldr	r2, [pc, #292]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 8007132:	6813      	ldr	r3, [r2, #0]
 8007134:	f023 0319 	bic.w	r3, r3, #25
 8007138:	68e1      	ldr	r1, [r4, #12]
 800713a:	430b      	orrs	r3, r1
 800713c:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 800713e:	f7fc facd 	bl	80036dc <HAL_GetTick>
 8007142:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007144:	4b44      	ldr	r3, [pc, #272]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f013 0f04 	tst.w	r3, #4
 800714c:	d106      	bne.n	800715c <HAL_RCC_OscConfig+0x168>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800714e:	f7fc fac5 	bl	80036dc <HAL_GetTick>
 8007152:	1b40      	subs	r0, r0, r5
 8007154:	2802      	cmp	r0, #2
 8007156:	d9f5      	bls.n	8007144 <HAL_RCC_OscConfig+0x150>
              return HAL_TIMEOUT;
 8007158:	2003      	movs	r0, #3
 800715a:	e26f      	b.n	800763c <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800715c:	f7fc fad8 	bl	8003710 <HAL_GetREVID>
 8007160:	f241 0303 	movw	r3, #4099	@ 0x1003
 8007164:	4298      	cmp	r0, r3
 8007166:	d812      	bhi.n	800718e <HAL_RCC_OscConfig+0x19a>
 8007168:	6922      	ldr	r2, [r4, #16]
 800716a:	2a40      	cmp	r2, #64	@ 0x40
 800716c:	d007      	beq.n	800717e <HAL_RCC_OscConfig+0x18a>
 800716e:	493a      	ldr	r1, [pc, #232]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 8007170:	684b      	ldr	r3, [r1, #4]
 8007172:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007176:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800717a:	604b      	str	r3, [r1, #4]
 800717c:	e00f      	b.n	800719e <HAL_RCC_OscConfig+0x1aa>
 800717e:	4a36      	ldr	r2, [pc, #216]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 8007180:	6853      	ldr	r3, [r2, #4]
 8007182:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800718a:	6053      	str	r3, [r2, #4]
 800718c:	e007      	b.n	800719e <HAL_RCC_OscConfig+0x1aa>
 800718e:	4a32      	ldr	r2, [pc, #200]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 8007190:	6853      	ldr	r3, [r2, #4]
 8007192:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007196:	6921      	ldr	r1, [r4, #16]
 8007198:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800719c:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	f013 0f10 	tst.w	r3, #16
 80071a4:	f000 8088 	beq.w	80072b8 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071a8:	4a2b      	ldr	r2, [pc, #172]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 80071aa:	6913      	ldr	r3, [r2, #16]
 80071ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071b0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80071b2:	2b08      	cmp	r3, #8
 80071b4:	d056      	beq.n	8007264 <HAL_RCC_OscConfig+0x270>
 80071b6:	2b18      	cmp	r3, #24
 80071b8:	d050      	beq.n	800725c <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80071ba:	69e3      	ldr	r3, [r4, #28]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 80b8 	beq.w	8007332 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80071c2:	4a25      	ldr	r2, [pc, #148]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 80071c4:	6813      	ldr	r3, [r2, #0]
 80071c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071cc:	f7fc fa86 	bl	80036dc <HAL_GetTick>
 80071d0:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071d2:	4b21      	ldr	r3, [pc, #132]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80071da:	f040 8088 	bne.w	80072ee <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80071de:	f7fc fa7d 	bl	80036dc <HAL_GetTick>
 80071e2:	1b40      	subs	r0, r0, r5
 80071e4:	2802      	cmp	r0, #2
 80071e6:	d9f4      	bls.n	80071d2 <HAL_RCC_OscConfig+0x1de>
          {
            return HAL_TIMEOUT;
 80071e8:	2003      	movs	r0, #3
 80071ea:	e227      	b.n	800763c <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ec:	f7fc fa90 	bl	8003710 <HAL_GetREVID>
 80071f0:	f241 0303 	movw	r3, #4099	@ 0x1003
 80071f4:	4298      	cmp	r0, r3
 80071f6:	d812      	bhi.n	800721e <HAL_RCC_OscConfig+0x22a>
 80071f8:	6922      	ldr	r2, [r4, #16]
 80071fa:	2a40      	cmp	r2, #64	@ 0x40
 80071fc:	d007      	beq.n	800720e <HAL_RCC_OscConfig+0x21a>
 80071fe:	4916      	ldr	r1, [pc, #88]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 8007200:	684b      	ldr	r3, [r1, #4]
 8007202:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007206:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800720a:	604b      	str	r3, [r1, #4]
 800720c:	e7c7      	b.n	800719e <HAL_RCC_OscConfig+0x1aa>
 800720e:	4a12      	ldr	r2, [pc, #72]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 8007210:	6853      	ldr	r3, [r2, #4]
 8007212:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800721a:	6053      	str	r3, [r2, #4]
 800721c:	e7bf      	b.n	800719e <HAL_RCC_OscConfig+0x1aa>
 800721e:	4a0e      	ldr	r2, [pc, #56]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 8007220:	6853      	ldr	r3, [r2, #4]
 8007222:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007226:	6921      	ldr	r1, [r4, #16]
 8007228:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800722c:	6053      	str	r3, [r2, #4]
 800722e:	e7b6      	b.n	800719e <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 8007230:	4a09      	ldr	r2, [pc, #36]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 8007232:	6813      	ldr	r3, [r2, #0]
 8007234:	f023 0301 	bic.w	r3, r3, #1
 8007238:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800723a:	f7fc fa4f 	bl	80036dc <HAL_GetTick>
 800723e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007240:	4b05      	ldr	r3, [pc, #20]	@ (8007258 <HAL_RCC_OscConfig+0x264>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f013 0f04 	tst.w	r3, #4
 8007248:	d0a9      	beq.n	800719e <HAL_RCC_OscConfig+0x1aa>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800724a:	f7fc fa47 	bl	80036dc <HAL_GetTick>
 800724e:	1b40      	subs	r0, r0, r5
 8007250:	2802      	cmp	r0, #2
 8007252:	d9f5      	bls.n	8007240 <HAL_RCC_OscConfig+0x24c>
            return HAL_TIMEOUT;
 8007254:	2003      	movs	r0, #3
 8007256:	e1f1      	b.n	800763c <HAL_RCC_OscConfig+0x648>
 8007258:	58024400 	.word	0x58024400
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800725c:	f002 0203 	and.w	r2, r2, #3
 8007260:	2a01      	cmp	r2, #1
 8007262:	d1aa      	bne.n	80071ba <HAL_RCC_OscConfig+0x1c6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007264:	4ba1      	ldr	r3, [pc, #644]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800726c:	d003      	beq.n	8007276 <HAL_RCC_OscConfig+0x282>
 800726e:	69e3      	ldr	r3, [r4, #28]
 8007270:	2b80      	cmp	r3, #128	@ 0x80
 8007272:	f040 81e0 	bne.w	8007636 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007276:	f7fc fa4b 	bl	8003710 <HAL_GetREVID>
 800727a:	f241 0303 	movw	r3, #4099	@ 0x1003
 800727e:	4298      	cmp	r0, r3
 8007280:	d812      	bhi.n	80072a8 <HAL_RCC_OscConfig+0x2b4>
 8007282:	6a22      	ldr	r2, [r4, #32]
 8007284:	2a20      	cmp	r2, #32
 8007286:	d007      	beq.n	8007298 <HAL_RCC_OscConfig+0x2a4>
 8007288:	4998      	ldr	r1, [pc, #608]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 800728a:	684b      	ldr	r3, [r1, #4]
 800728c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007290:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8007294:	604b      	str	r3, [r1, #4]
 8007296:	e00f      	b.n	80072b8 <HAL_RCC_OscConfig+0x2c4>
 8007298:	4a94      	ldr	r2, [pc, #592]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 800729a:	6853      	ldr	r3, [r2, #4]
 800729c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80072a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072a4:	6053      	str	r3, [r2, #4]
 80072a6:	e007      	b.n	80072b8 <HAL_RCC_OscConfig+0x2c4>
 80072a8:	4a90      	ldr	r2, [pc, #576]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 80072aa:	68d3      	ldr	r3, [r2, #12]
 80072ac:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80072b0:	6a21      	ldr	r1, [r4, #32]
 80072b2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80072b6:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	f013 0f08 	tst.w	r3, #8
 80072be:	d060      	beq.n	8007382 <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072c0:	6963      	ldr	r3, [r4, #20]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d049      	beq.n	800735a <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072c6:	4a89      	ldr	r2, [pc, #548]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 80072c8:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80072ca:	f043 0301 	orr.w	r3, r3, #1
 80072ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d0:	f7fc fa04 	bl	80036dc <HAL_GetTick>
 80072d4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072d6:	4b85      	ldr	r3, [pc, #532]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 80072d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072da:	f013 0f02 	tst.w	r3, #2
 80072de:	d150      	bne.n	8007382 <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072e0:	f7fc f9fc 	bl	80036dc <HAL_GetTick>
 80072e4:	1b40      	subs	r0, r0, r5
 80072e6:	2802      	cmp	r0, #2
 80072e8:	d9f5      	bls.n	80072d6 <HAL_RCC_OscConfig+0x2e2>
        {
          return HAL_TIMEOUT;
 80072ea:	2003      	movs	r0, #3
 80072ec:	e1a6      	b.n	800763c <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072ee:	f7fc fa0f 	bl	8003710 <HAL_GetREVID>
 80072f2:	f241 0303 	movw	r3, #4099	@ 0x1003
 80072f6:	4298      	cmp	r0, r3
 80072f8:	d812      	bhi.n	8007320 <HAL_RCC_OscConfig+0x32c>
 80072fa:	6a22      	ldr	r2, [r4, #32]
 80072fc:	2a20      	cmp	r2, #32
 80072fe:	d007      	beq.n	8007310 <HAL_RCC_OscConfig+0x31c>
 8007300:	497a      	ldr	r1, [pc, #488]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 8007302:	684b      	ldr	r3, [r1, #4]
 8007304:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007308:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800730c:	604b      	str	r3, [r1, #4]
 800730e:	e7d3      	b.n	80072b8 <HAL_RCC_OscConfig+0x2c4>
 8007310:	4a76      	ldr	r2, [pc, #472]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 8007312:	6853      	ldr	r3, [r2, #4]
 8007314:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007318:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800731c:	6053      	str	r3, [r2, #4]
 800731e:	e7cb      	b.n	80072b8 <HAL_RCC_OscConfig+0x2c4>
 8007320:	4a72      	ldr	r2, [pc, #456]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 8007322:	68d3      	ldr	r3, [r2, #12]
 8007324:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8007328:	6a21      	ldr	r1, [r4, #32]
 800732a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800732e:	60d3      	str	r3, [r2, #12]
 8007330:	e7c2      	b.n	80072b8 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 8007332:	4a6e      	ldr	r2, [pc, #440]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 8007334:	6813      	ldr	r3, [r2, #0]
 8007336:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800733a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800733c:	f7fc f9ce 	bl	80036dc <HAL_GetTick>
 8007340:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007342:	4b6a      	ldr	r3, [pc, #424]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800734a:	d0b5      	beq.n	80072b8 <HAL_RCC_OscConfig+0x2c4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800734c:	f7fc f9c6 	bl	80036dc <HAL_GetTick>
 8007350:	1b40      	subs	r0, r0, r5
 8007352:	2802      	cmp	r0, #2
 8007354:	d9f5      	bls.n	8007342 <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8007356:	2003      	movs	r0, #3
 8007358:	e170      	b.n	800763c <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800735a:	4a64      	ldr	r2, [pc, #400]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 800735c:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800735e:	f023 0301 	bic.w	r3, r3, #1
 8007362:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007364:	f7fc f9ba 	bl	80036dc <HAL_GetTick>
 8007368:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800736a:	4b60      	ldr	r3, [pc, #384]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 800736c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800736e:	f013 0f02 	tst.w	r3, #2
 8007372:	d006      	beq.n	8007382 <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007374:	f7fc f9b2 	bl	80036dc <HAL_GetTick>
 8007378:	1b40      	subs	r0, r0, r5
 800737a:	2802      	cmp	r0, #2
 800737c:	d9f5      	bls.n	800736a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800737e:	2003      	movs	r0, #3
 8007380:	e15c      	b.n	800763c <HAL_RCC_OscConfig+0x648>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	f013 0f20 	tst.w	r3, #32
 8007388:	d029      	beq.n	80073de <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800738a:	69a3      	ldr	r3, [r4, #24]
 800738c:	b19b      	cbz	r3, 80073b6 <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800738e:	4a57      	ldr	r2, [pc, #348]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 8007390:	6813      	ldr	r3, [r2, #0]
 8007392:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007396:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007398:	f7fc f9a0 	bl	80036dc <HAL_GetTick>
 800739c:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800739e:	4b53      	ldr	r3, [pc, #332]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80073a6:	d11a      	bne.n	80073de <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80073a8:	f7fc f998 	bl	80036dc <HAL_GetTick>
 80073ac:	1b40      	subs	r0, r0, r5
 80073ae:	2802      	cmp	r0, #2
 80073b0:	d9f5      	bls.n	800739e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80073b2:	2003      	movs	r0, #3
 80073b4:	e142      	b.n	800763c <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80073b6:	4a4d      	ldr	r2, [pc, #308]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 80073b8:	6813      	ldr	r3, [r2, #0]
 80073ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80073c0:	f7fc f98c 	bl	80036dc <HAL_GetTick>
 80073c4:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80073c6:	4b49      	ldr	r3, [pc, #292]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80073ce:	d006      	beq.n	80073de <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80073d0:	f7fc f984 	bl	80036dc <HAL_GetTick>
 80073d4:	1b40      	subs	r0, r0, r5
 80073d6:	2802      	cmp	r0, #2
 80073d8:	d9f5      	bls.n	80073c6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80073da:	2003      	movs	r0, #3
 80073dc:	e12e      	b.n	800763c <HAL_RCC_OscConfig+0x648>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	f013 0f04 	tst.w	r3, #4
 80073e4:	d121      	bne.n	800742a <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073e6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 8126 	beq.w	800763a <HAL_RCC_OscConfig+0x646>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80073ee:	4a3f      	ldr	r2, [pc, #252]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 80073f0:	6912      	ldr	r2, [r2, #16]
 80073f2:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80073f6:	2a18      	cmp	r2, #24
 80073f8:	f000 80ee 	beq.w	80075d8 <HAL_RCC_OscConfig+0x5e4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d079      	beq.n	80074f4 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007400:	4a3a      	ldr	r2, [pc, #232]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 8007402:	6813      	ldr	r3, [r2, #0]
 8007404:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800740a:	f7fc f967 	bl	80036dc <HAL_GetTick>
 800740e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007410:	4b36      	ldr	r3, [pc, #216]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8007418:	f000 80dc 	beq.w	80075d4 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800741c:	f7fc f95e 	bl	80036dc <HAL_GetTick>
 8007420:	1b00      	subs	r0, r0, r4
 8007422:	2802      	cmp	r0, #2
 8007424:	d9f4      	bls.n	8007410 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007426:	2003      	movs	r0, #3
 8007428:	e108      	b.n	800763c <HAL_RCC_OscConfig+0x648>
    PWR->CR1 |= PWR_CR1_DBP;
 800742a:	4a31      	ldr	r2, [pc, #196]	@ (80074f0 <HAL_RCC_OscConfig+0x4fc>)
 800742c:	6813      	ldr	r3, [r2, #0]
 800742e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007432:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007434:	f7fc f952 	bl	80036dc <HAL_GetTick>
 8007438:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800743a:	4b2d      	ldr	r3, [pc, #180]	@ (80074f0 <HAL_RCC_OscConfig+0x4fc>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007442:	d106      	bne.n	8007452 <HAL_RCC_OscConfig+0x45e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007444:	f7fc f94a 	bl	80036dc <HAL_GetTick>
 8007448:	1b40      	subs	r0, r0, r5
 800744a:	2864      	cmp	r0, #100	@ 0x64
 800744c:	d9f5      	bls.n	800743a <HAL_RCC_OscConfig+0x446>
        return HAL_TIMEOUT;
 800744e:	2003      	movs	r0, #3
 8007450:	e0f4      	b.n	800763c <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007452:	68a3      	ldr	r3, [r4, #8]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d00a      	beq.n	800746e <HAL_RCC_OscConfig+0x47a>
 8007458:	bb0b      	cbnz	r3, 800749e <HAL_RCC_OscConfig+0x4aa>
 800745a:	4b24      	ldr	r3, [pc, #144]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 800745c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800745e:	f022 0201 	bic.w	r2, r2, #1
 8007462:	671a      	str	r2, [r3, #112]	@ 0x70
 8007464:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007466:	f022 0204 	bic.w	r2, r2, #4
 800746a:	671a      	str	r2, [r3, #112]	@ 0x70
 800746c:	e004      	b.n	8007478 <HAL_RCC_OscConfig+0x484>
 800746e:	4a1f      	ldr	r2, [pc, #124]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 8007470:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8007472:	f043 0301 	orr.w	r3, r3, #1
 8007476:	6713      	str	r3, [r2, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007478:	68a3      	ldr	r3, [r4, #8]
 800747a:	b333      	cbz	r3, 80074ca <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 800747c:	f7fc f92e 	bl	80036dc <HAL_GetTick>
 8007480:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007482:	4b1a      	ldr	r3, [pc, #104]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 8007484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007486:	f013 0f02 	tst.w	r3, #2
 800748a:	d1ac      	bne.n	80073e6 <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800748c:	f7fc f926 	bl	80036dc <HAL_GetTick>
 8007490:	1b40      	subs	r0, r0, r5
 8007492:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007496:	4298      	cmp	r0, r3
 8007498:	d9f3      	bls.n	8007482 <HAL_RCC_OscConfig+0x48e>
          return HAL_TIMEOUT;
 800749a:	2003      	movs	r0, #3
 800749c:	e0ce      	b.n	800763c <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800749e:	2b05      	cmp	r3, #5
 80074a0:	d009      	beq.n	80074b6 <HAL_RCC_OscConfig+0x4c2>
 80074a2:	4b12      	ldr	r3, [pc, #72]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 80074a4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80074a6:	f022 0201 	bic.w	r2, r2, #1
 80074aa:	671a      	str	r2, [r3, #112]	@ 0x70
 80074ac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80074ae:	f022 0204 	bic.w	r2, r2, #4
 80074b2:	671a      	str	r2, [r3, #112]	@ 0x70
 80074b4:	e7e0      	b.n	8007478 <HAL_RCC_OscConfig+0x484>
 80074b6:	4b0d      	ldr	r3, [pc, #52]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 80074b8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80074ba:	f042 0204 	orr.w	r2, r2, #4
 80074be:	671a      	str	r2, [r3, #112]	@ 0x70
 80074c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80074c2:	f042 0201 	orr.w	r2, r2, #1
 80074c6:	671a      	str	r2, [r3, #112]	@ 0x70
 80074c8:	e7d6      	b.n	8007478 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 80074ca:	f7fc f907 	bl	80036dc <HAL_GetTick>
 80074ce:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074d0:	4b06      	ldr	r3, [pc, #24]	@ (80074ec <HAL_RCC_OscConfig+0x4f8>)
 80074d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074d4:	f013 0f02 	tst.w	r3, #2
 80074d8:	d085      	beq.n	80073e6 <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074da:	f7fc f8ff 	bl	80036dc <HAL_GetTick>
 80074de:	1b40      	subs	r0, r0, r5
 80074e0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80074e4:	4298      	cmp	r0, r3
 80074e6:	d9f3      	bls.n	80074d0 <HAL_RCC_OscConfig+0x4dc>
          return HAL_TIMEOUT;
 80074e8:	2003      	movs	r0, #3
 80074ea:	e0a7      	b.n	800763c <HAL_RCC_OscConfig+0x648>
 80074ec:	58024400 	.word	0x58024400
 80074f0:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 80074f4:	4a59      	ldr	r2, [pc, #356]	@ (800765c <HAL_RCC_OscConfig+0x668>)
 80074f6:	6813      	ldr	r3, [r2, #0]
 80074f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074fc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80074fe:	f7fc f8ed 	bl	80036dc <HAL_GetTick>
 8007502:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007504:	4b55      	ldr	r3, [pc, #340]	@ (800765c <HAL_RCC_OscConfig+0x668>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800750c:	d006      	beq.n	800751c <HAL_RCC_OscConfig+0x528>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800750e:	f7fc f8e5 	bl	80036dc <HAL_GetTick>
 8007512:	1b40      	subs	r0, r0, r5
 8007514:	2802      	cmp	r0, #2
 8007516:	d9f5      	bls.n	8007504 <HAL_RCC_OscConfig+0x510>
            return HAL_TIMEOUT;
 8007518:	2003      	movs	r0, #3
 800751a:	e08f      	b.n	800763c <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800751c:	4b4f      	ldr	r3, [pc, #316]	@ (800765c <HAL_RCC_OscConfig+0x668>)
 800751e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8007520:	4a4f      	ldr	r2, [pc, #316]	@ (8007660 <HAL_RCC_OscConfig+0x66c>)
 8007522:	400a      	ands	r2, r1
 8007524:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8007526:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8007528:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800752c:	430a      	orrs	r2, r1
 800752e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007530:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8007532:	3a01      	subs	r2, #1
 8007534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007538:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800753a:	3901      	subs	r1, #1
 800753c:	0249      	lsls	r1, r1, #9
 800753e:	b289      	uxth	r1, r1
 8007540:	430a      	orrs	r2, r1
 8007542:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007544:	3901      	subs	r1, #1
 8007546:	0409      	lsls	r1, r1, #16
 8007548:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 800754c:	430a      	orrs	r2, r1
 800754e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8007550:	3901      	subs	r1, #1
 8007552:	0609      	lsls	r1, r1, #24
 8007554:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8007558:	430a      	orrs	r2, r1
 800755a:	631a      	str	r2, [r3, #48]	@ 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800755c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800755e:	f022 0201 	bic.w	r2, r2, #1
 8007562:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007564:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007566:	4a3f      	ldr	r2, [pc, #252]	@ (8007664 <HAL_RCC_OscConfig+0x670>)
 8007568:	400a      	ands	r2, r1
 800756a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800756c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8007570:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007574:	f022 020c 	bic.w	r2, r2, #12
 8007578:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800757a:	430a      	orrs	r2, r1
 800757c:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800757e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007580:	f022 0202 	bic.w	r2, r2, #2
 8007584:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007586:	430a      	orrs	r2, r1
 8007588:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800758a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800758c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007590:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007594:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007598:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800759a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800759c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80075a0:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80075a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a4:	f042 0201 	orr.w	r2, r2, #1
 80075a8:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80075b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80075b2:	f7fc f893 	bl	80036dc <HAL_GetTick>
 80075b6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075b8:	4b28      	ldr	r3, [pc, #160]	@ (800765c <HAL_RCC_OscConfig+0x668>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80075c0:	d106      	bne.n	80075d0 <HAL_RCC_OscConfig+0x5dc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075c2:	f7fc f88b 	bl	80036dc <HAL_GetTick>
 80075c6:	1b00      	subs	r0, r0, r4
 80075c8:	2802      	cmp	r0, #2
 80075ca:	d9f5      	bls.n	80075b8 <HAL_RCC_OscConfig+0x5c4>
            return HAL_TIMEOUT;
 80075cc:	2003      	movs	r0, #3
 80075ce:	e035      	b.n	800763c <HAL_RCC_OscConfig+0x648>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80075d0:	2000      	movs	r0, #0
 80075d2:	e033      	b.n	800763c <HAL_RCC_OscConfig+0x648>
 80075d4:	2000      	movs	r0, #0
 80075d6:	e031      	b.n	800763c <HAL_RCC_OscConfig+0x648>
      temp1_pllckcfg = RCC->PLLCKSELR;
 80075d8:	4a20      	ldr	r2, [pc, #128]	@ (800765c <HAL_RCC_OscConfig+0x668>)
 80075da:	6a91      	ldr	r1, [r2, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80075dc:	6b10      	ldr	r0, [r2, #48]	@ 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d02d      	beq.n	800763e <HAL_RCC_OscConfig+0x64a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075e2:	f001 0303 	and.w	r3, r1, #3
 80075e6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d12a      	bne.n	8007642 <HAL_RCC_OscConfig+0x64e>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075ec:	f3c1 1105 	ubfx	r1, r1, #4, #6
 80075f0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075f2:	4299      	cmp	r1, r3
 80075f4:	d127      	bne.n	8007646 <HAL_RCC_OscConfig+0x652>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80075f6:	f3c0 0208 	ubfx	r2, r0, #0, #9
 80075fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80075fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075fe:	429a      	cmp	r2, r3
 8007600:	d123      	bne.n	800764a <HAL_RCC_OscConfig+0x656>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007602:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8007606:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007608:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800760a:	429a      	cmp	r2, r3
 800760c:	d11f      	bne.n	800764e <HAL_RCC_OscConfig+0x65a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800760e:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8007612:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007614:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007616:	429a      	cmp	r2, r3
 8007618:	d11b      	bne.n	8007652 <HAL_RCC_OscConfig+0x65e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800761a:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800761e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007620:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007622:	4298      	cmp	r0, r3
 8007624:	d117      	bne.n	8007656 <HAL_RCC_OscConfig+0x662>
  return HAL_OK;
 8007626:	2000      	movs	r0, #0
 8007628:	e008      	b.n	800763c <HAL_RCC_OscConfig+0x648>
    return HAL_ERROR;
 800762a:	2001      	movs	r0, #1
}
 800762c:	4770      	bx	lr
        return HAL_ERROR;
 800762e:	2001      	movs	r0, #1
 8007630:	e004      	b.n	800763c <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 8007632:	2001      	movs	r0, #1
 8007634:	e002      	b.n	800763c <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 8007636:	2001      	movs	r0, #1
 8007638:	e000      	b.n	800763c <HAL_RCC_OscConfig+0x648>
  return HAL_OK;
 800763a:	2000      	movs	r0, #0
}
 800763c:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800763e:	2001      	movs	r0, #1
 8007640:	e7fc      	b.n	800763c <HAL_RCC_OscConfig+0x648>
 8007642:	2001      	movs	r0, #1
 8007644:	e7fa      	b.n	800763c <HAL_RCC_OscConfig+0x648>
 8007646:	2001      	movs	r0, #1
 8007648:	e7f8      	b.n	800763c <HAL_RCC_OscConfig+0x648>
 800764a:	2001      	movs	r0, #1
 800764c:	e7f6      	b.n	800763c <HAL_RCC_OscConfig+0x648>
 800764e:	2001      	movs	r0, #1
 8007650:	e7f4      	b.n	800763c <HAL_RCC_OscConfig+0x648>
 8007652:	2001      	movs	r0, #1
 8007654:	e7f2      	b.n	800763c <HAL_RCC_OscConfig+0x648>
 8007656:	2001      	movs	r0, #1
 8007658:	e7f0      	b.n	800763c <HAL_RCC_OscConfig+0x648>
 800765a:	bf00      	nop
 800765c:	58024400 	.word	0x58024400
 8007660:	fffffc0c 	.word	0xfffffc0c
 8007664:	ffff0007 	.word	0xffff0007

08007668 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007668:	4b74      	ldr	r3, [pc, #464]	@ (800783c <HAL_RCC_GetSysClockFreq+0x1d4>)
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007670:	2b10      	cmp	r3, #16
 8007672:	f000 80de 	beq.w	8007832 <HAL_RCC_GetSysClockFreq+0x1ca>
 8007676:	2b18      	cmp	r3, #24
 8007678:	d00f      	beq.n	800769a <HAL_RCC_GetSysClockFreq+0x32>
 800767a:	b10b      	cbz	r3, 8007680 <HAL_RCC_GetSysClockFreq+0x18>
 800767c:	4870      	ldr	r0, [pc, #448]	@ (8007840 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800767e:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007680:	4b6e      	ldr	r3, [pc, #440]	@ (800783c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f013 0f20 	tst.w	r3, #32
 8007688:	f000 80d5 	beq.w	8007836 <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800768c:	4b6b      	ldr	r3, [pc, #428]	@ (800783c <HAL_RCC_GetSysClockFreq+0x1d4>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007694:	486b      	ldr	r0, [pc, #428]	@ (8007844 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8007696:	40d8      	lsrs	r0, r3
 8007698:	4770      	bx	lr
{
 800769a:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800769c:	4b67      	ldr	r3, [pc, #412]	@ (800783c <HAL_RCC_GetSysClockFreq+0x1d4>)
 800769e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80076a0:	f002 0203 	and.w	r2, r2, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80076a4:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80076a6:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80076aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80076ac:	f001 0101 	and.w	r1, r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80076b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076b2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80076b6:	fb01 f303 	mul.w	r3, r1, r3
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 80076c2:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
 80076c6:	f000 8094 	beq.w	80077f2 <HAL_RCC_GetSysClockFreq+0x18a>
    {
      switch (pllsource)
 80076ca:	2a01      	cmp	r2, #1
 80076cc:	d066      	beq.n	800779c <HAL_RCC_GetSysClockFreq+0x134>
 80076ce:	2a02      	cmp	r2, #2
 80076d0:	f000 8092 	beq.w	80077f8 <HAL_RCC_GetSysClockFreq+0x190>
 80076d4:	b1e2      	cbz	r2, 8007710 <HAL_RCC_GetSysClockFreq+0xa8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076d6:	ee07 0a10 	vmov	s14, r0
 80076da:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80076de:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 8007848 <HAL_RCC_GetSysClockFreq+0x1e0>
 80076e2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80076e6:	4b55      	ldr	r3, [pc, #340]	@ (800783c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80076e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ee:	ee06 3a90 	vmov	s13, r3
 80076f2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80076f6:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 800784c <HAL_RCC_GetSysClockFreq+0x1e4>
 80076fa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80076fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007702:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800770a:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800770e:	e061      	b.n	80077d4 <HAL_RCC_GetSysClockFreq+0x16c>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007710:	4b4a      	ldr	r3, [pc, #296]	@ (800783c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f013 0f20 	tst.w	r3, #32
 8007718:	d023      	beq.n	8007762 <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800771a:	4948      	ldr	r1, [pc, #288]	@ (800783c <HAL_RCC_GetSysClockFreq+0x1d4>)
 800771c:	680a      	ldr	r2, [r1, #0]
 800771e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8007722:	4b48      	ldr	r3, [pc, #288]	@ (8007844 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8007724:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007726:	ee07 3a10 	vmov	s14, r3
 800772a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800772e:	ee07 0a10 	vmov	s14, r0
 8007732:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8007736:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800773a:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800773c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007740:	ee06 3a90 	vmov	s13, r3
 8007744:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007748:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 800784c <HAL_RCC_GetSysClockFreq+0x1e4>
 800774c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007750:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007754:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007758:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800775c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007760:	e038      	b.n	80077d4 <HAL_RCC_GetSysClockFreq+0x16c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007762:	ee07 0a10 	vmov	s14, r0
 8007766:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800776a:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 8007850 <HAL_RCC_GetSysClockFreq+0x1e8>
 800776e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007772:	4b32      	ldr	r3, [pc, #200]	@ (800783c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777a:	ee06 3a90 	vmov	s13, r3
 800777e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007782:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 800784c <HAL_RCC_GetSysClockFreq+0x1e4>
 8007786:	ee67 7a86 	vmul.f32	s15, s15, s12
 800778a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800778e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007796:	ee27 7a27 	vmul.f32	s14, s14, s15
 800779a:	e01b      	b.n	80077d4 <HAL_RCC_GetSysClockFreq+0x16c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800779c:	ee07 0a10 	vmov	s14, r0
 80077a0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80077a4:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 8007848 <HAL_RCC_GetSysClockFreq+0x1e0>
 80077a8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80077ac:	4b23      	ldr	r3, [pc, #140]	@ (800783c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80077ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077b4:	ee06 3a90 	vmov	s13, r3
 80077b8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80077bc:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 800784c <HAL_RCC_GetSysClockFreq+0x1e4>
 80077c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80077c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077d0:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80077d4:	4b19      	ldr	r3, [pc, #100]	@ (800783c <HAL_RCC_GetSysClockFreq+0x1d4>)
 80077d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80077dc:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80077de:	ee07 3a90 	vmov	s15, r3
 80077e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80077ea:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80077ee:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80077f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077f6:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077f8:	ee07 0a10 	vmov	s14, r0
 80077fc:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007800:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8007854 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007804:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007808:	4b0c      	ldr	r3, [pc, #48]	@ (800783c <HAL_RCC_GetSysClockFreq+0x1d4>)
 800780a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800780c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007810:	ee06 3a90 	vmov	s13, r3
 8007814:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007818:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 800784c <HAL_RCC_GetSysClockFreq+0x1e4>
 800781c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007820:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007824:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007828:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800782c:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007830:	e7d0      	b.n	80077d4 <HAL_RCC_GetSysClockFreq+0x16c>
    sysclockfreq = HSE_VALUE;
 8007832:	4809      	ldr	r0, [pc, #36]	@ (8007858 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007834:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007836:	4803      	ldr	r0, [pc, #12]	@ (8007844 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	58024400 	.word	0x58024400
 8007840:	003d0900 	.word	0x003d0900
 8007844:	03d09000 	.word	0x03d09000
 8007848:	4a742400 	.word	0x4a742400
 800784c:	39000000 	.word	0x39000000
 8007850:	4c742400 	.word	0x4c742400
 8007854:	4bb71b00 	.word	0x4bb71b00
 8007858:	016e3600 	.word	0x016e3600

0800785c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800785c:	2800      	cmp	r0, #0
 800785e:	f000 8132 	beq.w	8007ac6 <HAL_RCC_ClockConfig+0x26a>
{
 8007862:	b570      	push	{r4, r5, r6, lr}
 8007864:	460d      	mov	r5, r1
 8007866:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007868:	4b9b      	ldr	r3, [pc, #620]	@ (8007ad8 <HAL_RCC_ClockConfig+0x27c>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 030f 	and.w	r3, r3, #15
 8007870:	428b      	cmp	r3, r1
 8007872:	d20b      	bcs.n	800788c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007874:	4a98      	ldr	r2, [pc, #608]	@ (8007ad8 <HAL_RCC_ClockConfig+0x27c>)
 8007876:	6813      	ldr	r3, [r2, #0]
 8007878:	f023 030f 	bic.w	r3, r3, #15
 800787c:	430b      	orrs	r3, r1
 800787e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007880:	6813      	ldr	r3, [r2, #0]
 8007882:	f003 030f 	and.w	r3, r3, #15
 8007886:	428b      	cmp	r3, r1
 8007888:	f040 811f 	bne.w	8007aca <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	f013 0f04 	tst.w	r3, #4
 8007892:	d00c      	beq.n	80078ae <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007894:	6922      	ldr	r2, [r4, #16]
 8007896:	4b91      	ldr	r3, [pc, #580]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800789e:	429a      	cmp	r2, r3
 80078a0:	d905      	bls.n	80078ae <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078a2:	498e      	ldr	r1, [pc, #568]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 80078a4:	698b      	ldr	r3, [r1, #24]
 80078a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078aa:	431a      	orrs	r2, r3
 80078ac:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	f013 0f08 	tst.w	r3, #8
 80078b4:	d00c      	beq.n	80078d0 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80078b6:	6962      	ldr	r2, [r4, #20]
 80078b8:	4b88      	ldr	r3, [pc, #544]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d905      	bls.n	80078d0 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078c4:	4985      	ldr	r1, [pc, #532]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 80078c6:	69cb      	ldr	r3, [r1, #28]
 80078c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078cc:	431a      	orrs	r2, r3
 80078ce:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	f013 0f10 	tst.w	r3, #16
 80078d6:	d00c      	beq.n	80078f2 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078d8:	69a2      	ldr	r2, [r4, #24]
 80078da:	4b80      	ldr	r3, [pc, #512]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d905      	bls.n	80078f2 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078e6:	497d      	ldr	r1, [pc, #500]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 80078e8:	69cb      	ldr	r3, [r1, #28]
 80078ea:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80078ee:	431a      	orrs	r2, r3
 80078f0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	f013 0f20 	tst.w	r3, #32
 80078f8:	d00c      	beq.n	8007914 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078fa:	69e2      	ldr	r2, [r4, #28]
 80078fc:	4b77      	ldr	r3, [pc, #476]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007904:	429a      	cmp	r2, r3
 8007906:	d905      	bls.n	8007914 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007908:	4974      	ldr	r1, [pc, #464]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 800790a:	6a0b      	ldr	r3, [r1, #32]
 800790c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007910:	431a      	orrs	r2, r3
 8007912:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	f013 0f02 	tst.w	r3, #2
 800791a:	d00c      	beq.n	8007936 <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800791c:	68e2      	ldr	r2, [r4, #12]
 800791e:	4b6f      	ldr	r3, [pc, #444]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	f003 030f 	and.w	r3, r3, #15
 8007926:	429a      	cmp	r2, r3
 8007928:	d905      	bls.n	8007936 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800792a:	496c      	ldr	r1, [pc, #432]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 800792c:	698b      	ldr	r3, [r1, #24]
 800792e:	f023 030f 	bic.w	r3, r3, #15
 8007932:	431a      	orrs	r2, r3
 8007934:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	f013 0f01 	tst.w	r3, #1
 800793c:	d041      	beq.n	80079c2 <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800793e:	4a67      	ldr	r2, [pc, #412]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 8007940:	6993      	ldr	r3, [r2, #24]
 8007942:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007946:	68a1      	ldr	r1, [r4, #8]
 8007948:	430b      	orrs	r3, r1
 800794a:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800794c:	6863      	ldr	r3, [r4, #4]
 800794e:	2b02      	cmp	r3, #2
 8007950:	d00a      	beq.n	8007968 <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007952:	2b03      	cmp	r3, #3
 8007954:	d027      	beq.n	80079a6 <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007956:	2b01      	cmp	r3, #1
 8007958:	d02c      	beq.n	80079b4 <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800795a:	4a60      	ldr	r2, [pc, #384]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 800795c:	6812      	ldr	r2, [r2, #0]
 800795e:	f012 0f04 	tst.w	r2, #4
 8007962:	d106      	bne.n	8007972 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8007964:	2001      	movs	r0, #1
 8007966:	e0ad      	b.n	8007ac4 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007968:	6812      	ldr	r2, [r2, #0]
 800796a:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800796e:	f000 80ae 	beq.w	8007ace <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007972:	495a      	ldr	r1, [pc, #360]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 8007974:	690a      	ldr	r2, [r1, #16]
 8007976:	f022 0207 	bic.w	r2, r2, #7
 800797a:	4313      	orrs	r3, r2
 800797c:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 800797e:	f7fb fead 	bl	80036dc <HAL_GetTick>
 8007982:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007984:	4b55      	ldr	r3, [pc, #340]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800798c:	6862      	ldr	r2, [r4, #4]
 800798e:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8007992:	d016      	beq.n	80079c2 <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007994:	f7fb fea2 	bl	80036dc <HAL_GetTick>
 8007998:	1b80      	subs	r0, r0, r6
 800799a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800799e:	4298      	cmp	r0, r3
 80079a0:	d9f0      	bls.n	8007984 <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 80079a2:	2003      	movs	r0, #3
 80079a4:	e08e      	b.n	8007ac4 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079a6:	4a4d      	ldr	r2, [pc, #308]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 80079a8:	6812      	ldr	r2, [r2, #0]
 80079aa:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80079ae:	d1e0      	bne.n	8007972 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80079b0:	2001      	movs	r0, #1
 80079b2:	e087      	b.n	8007ac4 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079b4:	4a49      	ldr	r2, [pc, #292]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 80079b6:	6812      	ldr	r2, [r2, #0]
 80079b8:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80079bc:	d1d9      	bne.n	8007972 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80079be:	2001      	movs	r0, #1
 80079c0:	e080      	b.n	8007ac4 <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	f013 0f02 	tst.w	r3, #2
 80079c8:	d00c      	beq.n	80079e4 <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80079ca:	68e2      	ldr	r2, [r4, #12]
 80079cc:	4b43      	ldr	r3, [pc, #268]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	f003 030f 	and.w	r3, r3, #15
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d205      	bcs.n	80079e4 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079d8:	4940      	ldr	r1, [pc, #256]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 80079da:	698b      	ldr	r3, [r1, #24]
 80079dc:	f023 030f 	bic.w	r3, r3, #15
 80079e0:	431a      	orrs	r2, r3
 80079e2:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079e4:	4b3c      	ldr	r3, [pc, #240]	@ (8007ad8 <HAL_RCC_ClockConfig+0x27c>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 030f 	and.w	r3, r3, #15
 80079ec:	42ab      	cmp	r3, r5
 80079ee:	d90a      	bls.n	8007a06 <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079f0:	4a39      	ldr	r2, [pc, #228]	@ (8007ad8 <HAL_RCC_ClockConfig+0x27c>)
 80079f2:	6813      	ldr	r3, [r2, #0]
 80079f4:	f023 030f 	bic.w	r3, r3, #15
 80079f8:	432b      	orrs	r3, r5
 80079fa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079fc:	6813      	ldr	r3, [r2, #0]
 80079fe:	f003 030f 	and.w	r3, r3, #15
 8007a02:	42ab      	cmp	r3, r5
 8007a04:	d165      	bne.n	8007ad2 <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	f013 0f04 	tst.w	r3, #4
 8007a0c:	d00c      	beq.n	8007a28 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a0e:	6922      	ldr	r2, [r4, #16]
 8007a10:	4b32      	ldr	r3, [pc, #200]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d205      	bcs.n	8007a28 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a1c:	492f      	ldr	r1, [pc, #188]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 8007a1e:	698b      	ldr	r3, [r1, #24]
 8007a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a24:	431a      	orrs	r2, r3
 8007a26:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	f013 0f08 	tst.w	r3, #8
 8007a2e:	d00c      	beq.n	8007a4a <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a30:	6962      	ldr	r2, [r4, #20]
 8007a32:	4b2a      	ldr	r3, [pc, #168]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d205      	bcs.n	8007a4a <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a3e:	4927      	ldr	r1, [pc, #156]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 8007a40:	69cb      	ldr	r3, [r1, #28]
 8007a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a46:	431a      	orrs	r2, r3
 8007a48:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	f013 0f10 	tst.w	r3, #16
 8007a50:	d00c      	beq.n	8007a6c <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007a52:	69a2      	ldr	r2, [r4, #24]
 8007a54:	4b21      	ldr	r3, [pc, #132]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 8007a56:	69db      	ldr	r3, [r3, #28]
 8007a58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d205      	bcs.n	8007a6c <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a60:	491e      	ldr	r1, [pc, #120]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 8007a62:	69cb      	ldr	r3, [r1, #28]
 8007a64:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	f013 0f20 	tst.w	r3, #32
 8007a72:	d00c      	beq.n	8007a8e <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007a74:	69e2      	ldr	r2, [r4, #28]
 8007a76:	4b19      	ldr	r3, [pc, #100]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d205      	bcs.n	8007a8e <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007a82:	4916      	ldr	r1, [pc, #88]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 8007a84:	6a0b      	ldr	r3, [r1, #32]
 8007a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a8a:	431a      	orrs	r2, r3
 8007a8c:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007a8e:	f7ff fdeb 	bl	8007668 <HAL_RCC_GetSysClockFreq>
 8007a92:	4912      	ldr	r1, [pc, #72]	@ (8007adc <HAL_RCC_ClockConfig+0x280>)
 8007a94:	698b      	ldr	r3, [r1, #24]
 8007a96:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007a9a:	4a11      	ldr	r2, [pc, #68]	@ (8007ae0 <HAL_RCC_ClockConfig+0x284>)
 8007a9c:	5cd3      	ldrb	r3, [r2, r3]
 8007a9e:	f003 031f 	and.w	r3, r3, #31
 8007aa2:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007aa4:	698b      	ldr	r3, [r1, #24]
 8007aa6:	f003 030f 	and.w	r3, r3, #15
 8007aaa:	5cd3      	ldrb	r3, [r2, r3]
 8007aac:	f003 031f 	and.w	r3, r3, #31
 8007ab0:	fa20 f303 	lsr.w	r3, r0, r3
 8007ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8007ae4 <HAL_RCC_ClockConfig+0x288>)
 8007ab6:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8007ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ae8 <HAL_RCC_ClockConfig+0x28c>)
 8007aba:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8007abc:	4b0b      	ldr	r3, [pc, #44]	@ (8007aec <HAL_RCC_ClockConfig+0x290>)
 8007abe:	6818      	ldr	r0, [r3, #0]
 8007ac0:	f7fb fbd2 	bl	8003268 <HAL_InitTick>
}
 8007ac4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8007ac6:	2001      	movs	r0, #1
}
 8007ac8:	4770      	bx	lr
      return HAL_ERROR;
 8007aca:	2001      	movs	r0, #1
 8007acc:	e7fa      	b.n	8007ac4 <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 8007ace:	2001      	movs	r0, #1
 8007ad0:	e7f8      	b.n	8007ac4 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 8007ad2:	2001      	movs	r0, #1
 8007ad4:	e7f6      	b.n	8007ac4 <HAL_RCC_ClockConfig+0x268>
 8007ad6:	bf00      	nop
 8007ad8:	52002000 	.word	0x52002000
 8007adc:	58024400 	.word	0x58024400
 8007ae0:	0801c7d0 	.word	0x0801c7d0
 8007ae4:	24000000 	.word	0x24000000
 8007ae8:	24000004 	.word	0x24000004
 8007aec:	2400000c 	.word	0x2400000c

08007af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007af0:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007af2:	f7ff fdb9 	bl	8007668 <HAL_RCC_GetSysClockFreq>
 8007af6:	4a0b      	ldr	r2, [pc, #44]	@ (8007b24 <HAL_RCC_GetHCLKFreq+0x34>)
 8007af8:	6993      	ldr	r3, [r2, #24]
 8007afa:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007afe:	490a      	ldr	r1, [pc, #40]	@ (8007b28 <HAL_RCC_GetHCLKFreq+0x38>)
 8007b00:	5ccb      	ldrb	r3, [r1, r3]
 8007b02:	f003 031f 	and.w	r3, r3, #31
 8007b06:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b0a:	6992      	ldr	r2, [r2, #24]
 8007b0c:	f002 020f 	and.w	r2, r2, #15
 8007b10:	5c88      	ldrb	r0, [r1, r2]
 8007b12:	f000 001f 	and.w	r0, r0, #31
 8007b16:	fa23 f000 	lsr.w	r0, r3, r0
 8007b1a:	4a04      	ldr	r2, [pc, #16]	@ (8007b2c <HAL_RCC_GetHCLKFreq+0x3c>)
 8007b1c:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b1e:	4a04      	ldr	r2, [pc, #16]	@ (8007b30 <HAL_RCC_GetHCLKFreq+0x40>)
 8007b20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8007b22:	bd08      	pop	{r3, pc}
 8007b24:	58024400 	.word	0x58024400
 8007b28:	0801c7d0 	.word	0x0801c7d0
 8007b2c:	24000000 	.word	0x24000000
 8007b30:	24000004 	.word	0x24000004

08007b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b34:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007b36:	f7ff ffdb 	bl	8007af0 <HAL_RCC_GetHCLKFreq>
 8007b3a:	4b05      	ldr	r3, [pc, #20]	@ (8007b50 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007b42:	4a04      	ldr	r2, [pc, #16]	@ (8007b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b44:	5cd3      	ldrb	r3, [r2, r3]
 8007b46:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007b4a:	40d8      	lsrs	r0, r3
 8007b4c:	bd08      	pop	{r3, pc}
 8007b4e:	bf00      	nop
 8007b50:	58024400 	.word	0x58024400
 8007b54:	0801c7d0 	.word	0x0801c7d0

08007b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b58:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007b5a:	f7ff ffc9 	bl	8007af0 <HAL_RCC_GetHCLKFreq>
 8007b5e:	4b05      	ldr	r3, [pc, #20]	@ (8007b74 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007b66:	4a04      	ldr	r2, [pc, #16]	@ (8007b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b68:	5cd3      	ldrb	r3, [r2, r3]
 8007b6a:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007b6e:	40d8      	lsrs	r0, r3
 8007b70:	bd08      	pop	{r3, pc}
 8007b72:	bf00      	nop
 8007b74:	58024400 	.word	0x58024400
 8007b78:	0801c7d0 	.word	0x0801c7d0

08007b7c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007b7c:	233f      	movs	r3, #63	@ 0x3f
 8007b7e:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007b80:	4b11      	ldr	r3, [pc, #68]	@ (8007bc8 <HAL_RCC_GetClockConfig+0x4c>)
 8007b82:	691a      	ldr	r2, [r3, #16]
 8007b84:	f002 0207 	and.w	r2, r2, #7
 8007b88:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007b8a:	699a      	ldr	r2, [r3, #24]
 8007b8c:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8007b90:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007b92:	699a      	ldr	r2, [r3, #24]
 8007b94:	f002 020f 	and.w	r2, r2, #15
 8007b98:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007b9a:	699a      	ldr	r2, [r3, #24]
 8007b9c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8007ba0:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007ba2:	69da      	ldr	r2, [r3, #28]
 8007ba4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8007ba8:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007baa:	69da      	ldr	r2, [r3, #28]
 8007bac:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8007bb0:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007bb8:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007bba:	4b04      	ldr	r3, [pc, #16]	@ (8007bcc <HAL_RCC_GetClockConfig+0x50>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 030f 	and.w	r3, r3, #15
 8007bc2:	600b      	str	r3, [r1, #0]
}
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	58024400 	.word	0x58024400
 8007bcc:	52002000 	.word	0x52002000

08007bd0 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bd0:	4b40      	ldr	r3, [pc, #256]	@ (8007cd4 <RCCEx_PLL2_Config+0x104>)
 8007bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd4:	f003 0303 	and.w	r3, r3, #3
 8007bd8:	2b03      	cmp	r3, #3
 8007bda:	d079      	beq.n	8007cd0 <RCCEx_PLL2_Config+0x100>
{
 8007bdc:	b570      	push	{r4, r5, r6, lr}
 8007bde:	4605      	mov	r5, r0
 8007be0:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007be2:	4a3c      	ldr	r2, [pc, #240]	@ (8007cd4 <RCCEx_PLL2_Config+0x104>)
 8007be4:	6813      	ldr	r3, [r2, #0]
 8007be6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bec:	f7fb fd76 	bl	80036dc <HAL_GetTick>
 8007bf0:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007bf2:	4b38      	ldr	r3, [pc, #224]	@ (8007cd4 <RCCEx_PLL2_Config+0x104>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8007bfa:	d006      	beq.n	8007c0a <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007bfc:	f7fb fd6e 	bl	80036dc <HAL_GetTick>
 8007c00:	1b03      	subs	r3, r0, r4
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d9f5      	bls.n	8007bf2 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8007c06:	2003      	movs	r0, #3

  }


  return status;
}
 8007c08:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c0a:	4b32      	ldr	r3, [pc, #200]	@ (8007cd4 <RCCEx_PLL2_Config+0x104>)
 8007c0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c0e:	f422 327c 	bic.w	r2, r2, #258048	@ 0x3f000
 8007c12:	6829      	ldr	r1, [r5, #0]
 8007c14:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8007c18:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c1a:	686a      	ldr	r2, [r5, #4]
 8007c1c:	3a01      	subs	r2, #1
 8007c1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c22:	68a9      	ldr	r1, [r5, #8]
 8007c24:	3901      	subs	r1, #1
 8007c26:	0249      	lsls	r1, r1, #9
 8007c28:	b289      	uxth	r1, r1
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	68e9      	ldr	r1, [r5, #12]
 8007c2e:	3901      	subs	r1, #1
 8007c30:	0409      	lsls	r1, r1, #16
 8007c32:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 8007c36:	430a      	orrs	r2, r1
 8007c38:	6929      	ldr	r1, [r5, #16]
 8007c3a:	3901      	subs	r1, #1
 8007c3c:	0609      	lsls	r1, r1, #24
 8007c3e:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8007c42:	430a      	orrs	r2, r1
 8007c44:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c48:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8007c4c:	6969      	ldr	r1, [r5, #20]
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c54:	f022 0220 	bic.w	r2, r2, #32
 8007c58:	69a9      	ldr	r1, [r5, #24]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c60:	f022 0210 	bic.w	r2, r2, #16
 8007c64:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007c66:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007c68:	4a1b      	ldr	r2, [pc, #108]	@ (8007cd8 <RCCEx_PLL2_Config+0x108>)
 8007c6a:	400a      	ands	r2, r1
 8007c6c:	69e9      	ldr	r1, [r5, #28]
 8007c6e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8007c72:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c76:	f042 0210 	orr.w	r2, r2, #16
 8007c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007c7c:	b9c6      	cbnz	r6, 8007cb0 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c7e:	461a      	mov	r2, r3
 8007c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c86:	62d3      	str	r3, [r2, #44]	@ 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8007c88:	4a12      	ldr	r2, [pc, #72]	@ (8007cd4 <RCCEx_PLL2_Config+0x104>)
 8007c8a:	6813      	ldr	r3, [r2, #0]
 8007c8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007c90:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007c92:	f7fb fd23 	bl	80036dc <HAL_GetTick>
 8007c96:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c98:	4b0e      	ldr	r3, [pc, #56]	@ (8007cd4 <RCCEx_PLL2_Config+0x104>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8007ca0:	d114      	bne.n	8007ccc <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007ca2:	f7fb fd1b 	bl	80036dc <HAL_GetTick>
 8007ca6:	1b00      	subs	r0, r0, r4
 8007ca8:	2802      	cmp	r0, #2
 8007caa:	d9f5      	bls.n	8007c98 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8007cac:	2003      	movs	r0, #3
 8007cae:	e7ab      	b.n	8007c08 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8007cb0:	2e01      	cmp	r6, #1
 8007cb2:	d005      	beq.n	8007cc0 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007cb4:	4a07      	ldr	r2, [pc, #28]	@ (8007cd4 <RCCEx_PLL2_Config+0x104>)
 8007cb6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007cb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007cbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007cbe:	e7e3      	b.n	8007c88 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007cc0:	4a04      	ldr	r2, [pc, #16]	@ (8007cd4 <RCCEx_PLL2_Config+0x104>)
 8007cc2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007cc4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007cca:	e7dd      	b.n	8007c88 <RCCEx_PLL2_Config+0xb8>
  return status;
 8007ccc:	2000      	movs	r0, #0
 8007cce:	e79b      	b.n	8007c08 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8007cd0:	2001      	movs	r0, #1
}
 8007cd2:	4770      	bx	lr
 8007cd4:	58024400 	.word	0x58024400
 8007cd8:	ffff0007 	.word	0xffff0007

08007cdc <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cdc:	4b40      	ldr	r3, [pc, #256]	@ (8007de0 <RCCEx_PLL3_Config+0x104>)
 8007cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce0:	f003 0303 	and.w	r3, r3, #3
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d079      	beq.n	8007ddc <RCCEx_PLL3_Config+0x100>
{
 8007ce8:	b570      	push	{r4, r5, r6, lr}
 8007cea:	4605      	mov	r5, r0
 8007cec:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007cee:	4a3c      	ldr	r2, [pc, #240]	@ (8007de0 <RCCEx_PLL3_Config+0x104>)
 8007cf0:	6813      	ldr	r3, [r2, #0]
 8007cf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cf8:	f7fb fcf0 	bl	80036dc <HAL_GetTick>
 8007cfc:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cfe:	4b38      	ldr	r3, [pc, #224]	@ (8007de0 <RCCEx_PLL3_Config+0x104>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8007d06:	d006      	beq.n	8007d16 <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007d08:	f7fb fce8 	bl	80036dc <HAL_GetTick>
 8007d0c:	1b03      	subs	r3, r0, r4
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d9f5      	bls.n	8007cfe <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8007d12:	2003      	movs	r0, #3

  }


  return status;
}
 8007d14:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007d16:	4b32      	ldr	r3, [pc, #200]	@ (8007de0 <RCCEx_PLL3_Config+0x104>)
 8007d18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d1a:	f022 727c 	bic.w	r2, r2, #66060288	@ 0x3f00000
 8007d1e:	6829      	ldr	r1, [r5, #0]
 8007d20:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8007d24:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d26:	686a      	ldr	r2, [r5, #4]
 8007d28:	3a01      	subs	r2, #1
 8007d2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d2e:	68a9      	ldr	r1, [r5, #8]
 8007d30:	3901      	subs	r1, #1
 8007d32:	0249      	lsls	r1, r1, #9
 8007d34:	b289      	uxth	r1, r1
 8007d36:	430a      	orrs	r2, r1
 8007d38:	68e9      	ldr	r1, [r5, #12]
 8007d3a:	3901      	subs	r1, #1
 8007d3c:	0409      	lsls	r1, r1, #16
 8007d3e:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 8007d42:	430a      	orrs	r2, r1
 8007d44:	6929      	ldr	r1, [r5, #16]
 8007d46:	3901      	subs	r1, #1
 8007d48:	0609      	lsls	r1, r1, #24
 8007d4a:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d54:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007d58:	6969      	ldr	r1, [r5, #20]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d60:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007d64:	69a9      	ldr	r1, [r5, #24]
 8007d66:	430a      	orrs	r2, r1
 8007d68:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d70:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d72:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8007d74:	4a1b      	ldr	r2, [pc, #108]	@ (8007de4 <RCCEx_PLL3_Config+0x108>)
 8007d76:	400a      	ands	r2, r1
 8007d78:	69e9      	ldr	r1, [r5, #28]
 8007d7a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8007d7e:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d86:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007d88:	b9c6      	cbnz	r6, 8007dbc <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007d92:	62d3      	str	r3, [r2, #44]	@ 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8007d94:	4a12      	ldr	r2, [pc, #72]	@ (8007de0 <RCCEx_PLL3_Config+0x104>)
 8007d96:	6813      	ldr	r3, [r2, #0]
 8007d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d9c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007d9e:	f7fb fc9d 	bl	80036dc <HAL_GetTick>
 8007da2:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007da4:	4b0e      	ldr	r3, [pc, #56]	@ (8007de0 <RCCEx_PLL3_Config+0x104>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8007dac:	d114      	bne.n	8007dd8 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007dae:	f7fb fc95 	bl	80036dc <HAL_GetTick>
 8007db2:	1b00      	subs	r0, r0, r4
 8007db4:	2802      	cmp	r0, #2
 8007db6:	d9f5      	bls.n	8007da4 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8007db8:	2003      	movs	r0, #3
 8007dba:	e7ab      	b.n	8007d14 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8007dbc:	2e01      	cmp	r6, #1
 8007dbe:	d005      	beq.n	8007dcc <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007dc0:	4a07      	ldr	r2, [pc, #28]	@ (8007de0 <RCCEx_PLL3_Config+0x104>)
 8007dc2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007dc4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007dca:	e7e3      	b.n	8007d94 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007dcc:	4a04      	ldr	r2, [pc, #16]	@ (8007de0 <RCCEx_PLL3_Config+0x104>)
 8007dce:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007dd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007dd6:	e7dd      	b.n	8007d94 <RCCEx_PLL3_Config+0xb8>
  return status;
 8007dd8:	2000      	movs	r0, #0
 8007dda:	e79b      	b.n	8007d14 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8007ddc:	2001      	movs	r0, #1
}
 8007dde:	4770      	bx	lr
 8007de0:	58024400 	.word	0x58024400
 8007de4:	ffff0007 	.word	0xffff0007

08007de8 <HAL_RCCEx_PeriphCLKConfig>:
{
 8007de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dea:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007dec:	6803      	ldr	r3, [r0, #0]
 8007dee:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8007df2:	d030      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007df4:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8007df6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dfa:	d026      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007dfc:	d80e      	bhi.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8007dfe:	b1eb      	cbz	r3, 8007e3c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007e00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e04:	d107      	bne.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e06:	2102      	movs	r1, #2
 8007e08:	3004      	adds	r0, #4
 8007e0a:	f7ff fee1 	bl	8007bd0 <RCCEx_PLL2_Config>
 8007e0e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007e10:	b145      	cbz	r5, 8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8007e12:	462e      	mov	r6, r5
 8007e14:	e021      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007e16:	2601      	movs	r6, #1
 8007e18:	4635      	mov	r5, r6
 8007e1a:	e01e      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007e1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e20:	d109      	bne.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007e22:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007e24:	4a95      	ldr	r2, [pc, #596]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007e26:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007e28:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007e2c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8007e2e:	430b      	orrs	r3, r1
 8007e30:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e32:	2600      	movs	r6, #0
 8007e34:	e011      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007e36:	2601      	movs	r6, #1
 8007e38:	4635      	mov	r5, r6
 8007e3a:	e00e      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e3c:	4a8f      	ldr	r2, [pc, #572]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007e3e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e44:	62d3      	str	r3, [r2, #44]	@ 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e46:	2500      	movs	r5, #0
 8007e48:	e7ec      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e4a:	2102      	movs	r1, #2
 8007e4c:	3024      	adds	r0, #36	@ 0x24
 8007e4e:	f7ff ff45 	bl	8007cdc <RCCEx_PLL3_Config>
 8007e52:	4605      	mov	r5, r0
      break;
 8007e54:	e7dc      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e56:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e58:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007e60:	d014      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007e62:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007e64:	2b04      	cmp	r3, #4
 8007e66:	d830      	bhi.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007e68:	e8df f003 	tbb	[pc, r3]
 8007e6c:	08282203 	.word	0x08282203
 8007e70:	08          	.byte	0x08
 8007e71:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e72:	4a82      	ldr	r2, [pc, #520]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007e74:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8007e7c:	bb45      	cbnz	r5, 8007ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e7e:	4a7f      	ldr	r2, [pc, #508]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007e80:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007e82:	f023 0307 	bic.w	r3, r3, #7
 8007e86:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8007e88:	430b      	orrs	r3, r1
 8007e8a:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8007e92:	d02f      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai23ClockSelection)
 8007e94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e96:	2b80      	cmp	r3, #128	@ 0x80
 8007e98:	d049      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x146>
 8007e9a:	d81e      	bhi.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d040      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8007ea0:	2b40      	cmp	r3, #64	@ 0x40
 8007ea2:	d117      	bne.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	1d20      	adds	r0, r4, #4
 8007ea8:	f7ff fe92 	bl	8007bd0 <RCCEx_PLL2_Config>
 8007eac:	4605      	mov	r5, r0
      break;
 8007eae:	e019      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	1d20      	adds	r0, r4, #4
 8007eb4:	f7ff fe8c 	bl	8007bd0 <RCCEx_PLL2_Config>
 8007eb8:	4605      	mov	r5, r0
      break;
 8007eba:	e7df      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007ec2:	f7ff ff0b 	bl	8007cdc <RCCEx_PLL3_Config>
 8007ec6:	4605      	mov	r5, r0
      break;
 8007ec8:	e7d8      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007eca:	2601      	movs	r6, #1
 8007ecc:	4635      	mov	r5, r6
 8007ece:	e7dd      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007ed0:	462e      	mov	r6, r5
 8007ed2:	e7db      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai23ClockSelection)
 8007ed4:	2601      	movs	r6, #1
 8007ed6:	4635      	mov	r5, r6
 8007ed8:	e00c      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007eda:	2bc0      	cmp	r3, #192	@ 0xc0
 8007edc:	d002      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007ede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ee2:	d11b      	bne.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 8007ee4:	bb55      	cbnz	r5, 8007f3c <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007ee6:	4a65      	ldr	r2, [pc, #404]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007ee8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007eea:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8007eee:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8007ef0:	430b      	orrs	r3, r1
 8007ef2:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8007efa:	d045      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007efc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8007f00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f04:	d038      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007f06:	d81e      	bhi.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007f08:	b383      	cbz	r3, 8007f6c <HAL_RCCEx_PeriphCLKConfig+0x184>
 8007f0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f0e:	d117      	bne.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x158>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f10:	2100      	movs	r1, #0
 8007f12:	1d20      	adds	r0, r4, #4
 8007f14:	f7ff fe5c 	bl	8007bd0 <RCCEx_PLL2_Config>
 8007f18:	4605      	mov	r5, r0
      break;
 8007f1a:	e01a      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8007f1c:	2601      	movs	r6, #1
 8007f1e:	4635      	mov	r5, r6
 8007f20:	e7e8      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f22:	4a56      	ldr	r2, [pc, #344]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007f24:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 8007f2c:	e7da      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f2e:	2100      	movs	r1, #0
 8007f30:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007f34:	f7ff fed2 	bl	8007cdc <RCCEx_PLL3_Config>
 8007f38:	4605      	mov	r5, r0
      break;
 8007f3a:	e7d3      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007f3c:	462e      	mov	r6, r5
 8007f3e:	e7d9      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007f40:	2601      	movs	r6, #1
 8007f42:	4635      	mov	r5, r6
 8007f44:	e020      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8007f46:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007f4a:	d002      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8007f4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f50:	d109      	bne.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    if(ret == HAL_OK)
 8007f52:	b9c5      	cbnz	r5, 8007f86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007f54:	4a49      	ldr	r2, [pc, #292]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007f56:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007f58:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8007f5c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8007f60:	430b      	orrs	r3, r1
 8007f62:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f64:	e010      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007f66:	2601      	movs	r6, #1
 8007f68:	4635      	mov	r5, r6
 8007f6a:	e00d      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f6c:	4a43      	ldr	r2, [pc, #268]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007f6e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f74:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 8007f76:	e7ec      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x16a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f78:	2100      	movs	r1, #0
 8007f7a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007f7e:	f7ff fead 	bl	8007cdc <RCCEx_PLL3_Config>
 8007f82:	4605      	mov	r5, r0
      break;
 8007f84:	e7e5      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8007f86:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8007f8e:	d023      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007f90:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 8007f94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f98:	d041      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x236>
 8007f9a:	d80d      	bhi.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d038      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fa4:	d105      	bne.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	1d20      	adds	r0, r4, #4
 8007faa:	f7ff fe11 	bl	8007bd0 <RCCEx_PLL2_Config>
 8007fae:	4605      	mov	r5, r0
      break;
 8007fb0:	e008      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007fb2:	2601      	movs	r6, #1
 8007fb4:	4635      	mov	r5, r6
 8007fb6:	e00f      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8007fb8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007fbc:	d002      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007fbe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007fc2:	d123      	bne.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 8007fc4:	2d00      	cmp	r5, #0
 8007fc6:	d131      	bne.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007fc8:	4a2c      	ldr	r2, [pc, #176]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007fca:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007fcc:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8007fd0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8007fd4:	430b      	orrs	r3, r1
 8007fd6:	6593      	str	r3, [r2, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8007fde:	d02e      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->QspiClockSelection)
 8007fe0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8007fe2:	2b20      	cmp	r3, #32
 8007fe4:	d03f      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8007fe6:	d826      	bhi.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8007fe8:	b133      	cbz	r3, 8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007fea:	2b10      	cmp	r3, #16
 8007fec:	d120      	bne.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fee:	4a23      	ldr	r2, [pc, #140]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007ff0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007ff2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8007ff8:	2d00      	cmp	r5, #0
 8007ffa:	d13a      	bne.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007ffe:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008000:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8008004:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008006:	430b      	orrs	r3, r1
 8008008:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800800a:	e018      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->Sai4BClockSelection)
 800800c:	2601      	movs	r6, #1
 800800e:	4635      	mov	r5, r6
 8008010:	e7e2      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008012:	4a1a      	ldr	r2, [pc, #104]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008014:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800801a:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 800801c:	e7d2      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800801e:	2100      	movs	r1, #0
 8008020:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008024:	f7ff fe5a 	bl	8007cdc <RCCEx_PLL3_Config>
 8008028:	4605      	mov	r5, r0
      break;
 800802a:	e7cb      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800802c:	462e      	mov	r6, r5
 800802e:	e7d3      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->QspiClockSelection)
 8008030:	2601      	movs	r6, #1
 8008032:	4635      	mov	r5, r6
 8008034:	e003      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8008036:	2b30      	cmp	r3, #48	@ 0x30
 8008038:	d0de      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800803a:	2601      	movs	r6, #1
 800803c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8008044:	d02b      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008046:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8008048:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800804c:	d04c      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800804e:	d817      	bhi.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008050:	2b00      	cmp	r3, #0
 8008052:	d043      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8008054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008058:	d10d      	bne.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x28e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800805a:	2100      	movs	r1, #0
 800805c:	1d20      	adds	r0, r4, #4
 800805e:	f7ff fdb7 	bl	8007bd0 <RCCEx_PLL2_Config>
 8008062:	4605      	mov	r5, r0
      break;
 8008064:	e012      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008066:	2102      	movs	r1, #2
 8008068:	1d20      	adds	r0, r4, #4
 800806a:	f7ff fdb1 	bl	8007bd0 <RCCEx_PLL2_Config>
 800806e:	4605      	mov	r5, r0
      break;
 8008070:	e7c2      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8008072:	462e      	mov	r6, r5
 8008074:	e7e3      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008076:	2601      	movs	r6, #1
 8008078:	4635      	mov	r5, r6
 800807a:	e010      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800807c:	58024400 	.word	0x58024400
 8008080:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008084:	d002      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8008086:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800808a:	d124      	bne.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    if(ret == HAL_OK)
 800808c:	2d00      	cmp	r5, #0
 800808e:	d132      	bne.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008090:	4a75      	ldr	r2, [pc, #468]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008092:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8008094:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008098:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800809a:	430b      	orrs	r3, r1
 800809c:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80080a4:	d037      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi45ClockSelection)
 80080a6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80080a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080ac:	d051      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80080ae:	d827      	bhi.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80080b0:	b13b      	cbz	r3, 80080c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80080b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080b6:	d120      	bne.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080b8:	2101      	movs	r1, #1
 80080ba:	1d20      	adds	r0, r4, #4
 80080bc:	f7ff fd88 	bl	8007bd0 <RCCEx_PLL2_Config>
 80080c0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80080c2:	2d00      	cmp	r5, #0
 80080c4:	d14c      	bne.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80080c6:	4a68      	ldr	r2, [pc, #416]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80080c8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80080ca:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80080ce:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80080d0:	430b      	orrs	r3, r1
 80080d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80080d4:	e01f      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi123ClockSelection)
 80080d6:	2601      	movs	r6, #1
 80080d8:	4635      	mov	r5, r6
 80080da:	e7e0      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080dc:	4a62      	ldr	r2, [pc, #392]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80080de:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80080e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 80080e6:	e7d1      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80080e8:	2100      	movs	r1, #0
 80080ea:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80080ee:	f7ff fdf5 	bl	8007cdc <RCCEx_PLL3_Config>
 80080f2:	4605      	mov	r5, r0
      break;
 80080f4:	e7ca      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 80080f6:	462e      	mov	r6, r5
 80080f8:	e7d1      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 80080fa:	2601      	movs	r6, #1
 80080fc:	4635      	mov	r5, r6
 80080fe:	e00a      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8008100:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008104:	d0dd      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008106:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800810a:	d0da      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800810c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008110:	d0d7      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008112:	2601      	movs	r6, #1
 8008114:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800811c:	d030      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x398>
    switch(PeriphClkInit->Spi6ClockSelection)
 800811e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8008122:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008126:	d044      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8008128:	d81f      	bhi.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800812a:	b13b      	cbz	r3, 800813c <HAL_RCCEx_PeriphCLKConfig+0x354>
 800812c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008130:	d118      	bne.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008132:	2101      	movs	r1, #1
 8008134:	1d20      	adds	r0, r4, #4
 8008136:	f7ff fd4b 	bl	8007bd0 <RCCEx_PLL2_Config>
 800813a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800813c:	2d00      	cmp	r5, #0
 800813e:	d13f      	bne.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008140:	4a49      	ldr	r2, [pc, #292]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008142:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8008144:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8008148:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 800814c:	430b      	orrs	r3, r1
 800814e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008150:	e016      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x398>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008152:	2101      	movs	r1, #1
 8008154:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008158:	f7ff fdc0 	bl	8007cdc <RCCEx_PLL3_Config>
 800815c:	4605      	mov	r5, r0
      break;
 800815e:	e7b0      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008160:	462e      	mov	r6, r5
 8008162:	e7d8      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008164:	2601      	movs	r6, #1
 8008166:	4635      	mov	r5, r6
 8008168:	e00a      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800816a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800816e:	d0e5      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8008170:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008174:	d0e2      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8008176:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800817a:	d0df      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x354>
 800817c:	2601      	movs	r6, #1
 800817e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8008186:	d009      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FdcanClockSelection)
 8008188:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800818a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800818e:	d019      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8008190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008194:	d024      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008196:	b1d3      	cbz	r3, 80081ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008198:	2601      	movs	r6, #1
 800819a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80081a2:	d032      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x422>
    switch(PeriphClkInit->FmcClockSelection)
 80081a4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80081a6:	2b03      	cmp	r3, #3
 80081a8:	d859      	bhi.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80081aa:	e8df f003 	tbb	[pc, r3]
 80081ae:	2126      	.short	0x2126
 80081b0:	2652      	.short	0x2652
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081b2:	2101      	movs	r1, #1
 80081b4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80081b8:	f7ff fd90 	bl	8007cdc <RCCEx_PLL3_Config>
 80081bc:	4605      	mov	r5, r0
      break;
 80081be:	e7bd      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x354>
 80081c0:	462e      	mov	r6, r5
 80081c2:	e7dd      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x398>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081c4:	4a28      	ldr	r2, [pc, #160]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80081c6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80081c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 80081ce:	b96d      	cbnz	r5, 80081ec <HAL_RCCEx_PeriphCLKConfig+0x404>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80081d0:	4a25      	ldr	r2, [pc, #148]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80081d2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80081d4:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80081d8:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 80081da:	430b      	orrs	r3, r1
 80081dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80081de:	e7dd      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081e0:	2101      	movs	r1, #1
 80081e2:	1d20      	adds	r0, r4, #4
 80081e4:	f7ff fcf4 	bl	8007bd0 <RCCEx_PLL2_Config>
 80081e8:	4605      	mov	r5, r0
      break;
 80081ea:	e7f0      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80081ec:	462e      	mov	r6, r5
 80081ee:	e7d5      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081f0:	4a1d      	ldr	r2, [pc, #116]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80081f2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80081f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 80081fa:	bb9d      	cbnz	r5, 8008264 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80081fc:	4a1a      	ldr	r2, [pc, #104]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80081fe:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008200:	f023 0303 	bic.w	r3, r3, #3
 8008204:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008206:	430b      	orrs	r3, r1
 8008208:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8008210:	d12c      	bne.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x484>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	f013 0f01 	tst.w	r3, #1
 8008218:	f000 80a3 	beq.w	8008362 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch(PeriphClkInit->Usart16ClockSelection)
 800821c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800821e:	2b28      	cmp	r3, #40	@ 0x28
 8008220:	f200 809d 	bhi.w	800835e <HAL_RCCEx_PeriphCLKConfig+0x576>
 8008224:	e8df f003 	tbb	[pc, r3]
 8008228:	9b9b9b8b 	.word	0x9b9b9b8b
 800822c:	9b9b9b9b 	.word	0x9b9b9b9b
 8008230:	9b9b9b86 	.word	0x9b9b9b86
 8008234:	9b9b9b9b 	.word	0x9b9b9b9b
 8008238:	9b9b9b94 	.word	0x9b9b9b94
 800823c:	9b9b9b9b 	.word	0x9b9b9b9b
 8008240:	9b9b9b8b 	.word	0x9b9b9b8b
 8008244:	9b9b9b9b 	.word	0x9b9b9b9b
 8008248:	9b9b9b8b 	.word	0x9b9b9b8b
 800824c:	9b9b9b9b 	.word	0x9b9b9b9b
 8008250:	8b          	.byte	0x8b
 8008251:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008252:	2102      	movs	r1, #2
 8008254:	1d20      	adds	r0, r4, #4
 8008256:	f7ff fcbb 	bl	8007bd0 <RCCEx_PLL2_Config>
 800825a:	4605      	mov	r5, r0
      break;
 800825c:	e7cd      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    switch(PeriphClkInit->FmcClockSelection)
 800825e:	2601      	movs	r6, #1
 8008260:	4635      	mov	r5, r6
 8008262:	e7d2      	b.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x422>
 8008264:	462e      	mov	r6, r5
 8008266:	e7d0      	b.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x422>
 8008268:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800826c:	4a8f      	ldr	r2, [pc, #572]	@ (80084ac <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800826e:	6813      	ldr	r3, [r2, #0]
 8008270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008274:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008276:	f7fb fa31 	bl	80036dc <HAL_GetTick>
 800827a:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800827c:	4b8b      	ldr	r3, [pc, #556]	@ (80084ac <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8008284:	d105      	bne.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008286:	f7fb fa29 	bl	80036dc <HAL_GetTick>
 800828a:	1bc0      	subs	r0, r0, r7
 800828c:	2864      	cmp	r0, #100	@ 0x64
 800828e:	d9f5      	bls.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = HAL_TIMEOUT;
 8008290:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8008292:	2d00      	cmp	r5, #0
 8008294:	d14a      	bne.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x544>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008296:	4b86      	ldr	r3, [pc, #536]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800829a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 800829e:	4053      	eors	r3, r2
 80082a0:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80082a4:	d00c      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80082a6:	4b82      	ldr	r3, [pc, #520]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80082a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80082aa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80082ae:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80082b0:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80082b4:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082b6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80082b8:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80082bc:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 80082be:	671a      	str	r2, [r3, #112]	@ 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80082c0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 80082c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082c8:	d015      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      if(ret == HAL_OK)
 80082ca:	bb8d      	cbnz	r5, 8008330 <HAL_RCCEx_PeriphCLKConfig+0x548>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082cc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 80082d0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80082d4:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80082d8:	d01e      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x530>
 80082da:	4a75      	ldr	r2, [pc, #468]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80082dc:	6913      	ldr	r3, [r2, #16]
 80082de:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80082e2:	6113      	str	r3, [r2, #16]
 80082e4:	4972      	ldr	r1, [pc, #456]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80082e6:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 80082e8:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 80082ec:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80082f0:	4313      	orrs	r3, r2
 80082f2:	670b      	str	r3, [r1, #112]	@ 0x70
 80082f4:	e78d      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x42a>
        tickstart = HAL_GetTick();
 80082f6:	f7fb f9f1 	bl	80036dc <HAL_GetTick>
 80082fa:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082fc:	4b6c      	ldr	r3, [pc, #432]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80082fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008300:	f013 0f02 	tst.w	r3, #2
 8008304:	d1e1      	bne.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008306:	f7fb f9e9 	bl	80036dc <HAL_GetTick>
 800830a:	1bc0      	subs	r0, r0, r7
 800830c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008310:	4298      	cmp	r0, r3
 8008312:	d9f3      	bls.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x514>
            ret = HAL_TIMEOUT;
 8008314:	2503      	movs	r5, #3
 8008316:	e7d8      	b.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008318:	4865      	ldr	r0, [pc, #404]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800831a:	6902      	ldr	r2, [r0, #16]
 800831c:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8008320:	4964      	ldr	r1, [pc, #400]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008322:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8008326:	4313      	orrs	r3, r2
 8008328:	6103      	str	r3, [r0, #16]
 800832a:	e7db      	b.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      status = ret;
 800832c:	462e      	mov	r6, r5
 800832e:	e770      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x42a>
        status = ret;
 8008330:	462e      	mov	r6, r5
 8008332:	e76e      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008334:	2101      	movs	r1, #1
 8008336:	1d20      	adds	r0, r4, #4
 8008338:	f7ff fc4a 	bl	8007bd0 <RCCEx_PLL2_Config>
 800833c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800833e:	b9e5      	cbnz	r5, 800837a <HAL_RCCEx_PeriphCLKConfig+0x592>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008340:	4a5b      	ldr	r2, [pc, #364]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008342:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008344:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8008348:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 800834a:	430b      	orrs	r3, r1
 800834c:	6553      	str	r3, [r2, #84]	@ 0x54
 800834e:	e008      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x57a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008350:	2101      	movs	r1, #1
 8008352:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008356:	f7ff fcc1 	bl	8007cdc <RCCEx_PLL3_Config>
 800835a:	4605      	mov	r5, r0
      break;
 800835c:	e7ef      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch(PeriphClkInit->Usart16ClockSelection)
 800835e:	2601      	movs	r6, #1
 8008360:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	f013 0f02 	tst.w	r3, #2
 8008368:	d016      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800836a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800836c:	2b05      	cmp	r3, #5
 800836e:	d827      	bhi.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 8008370:	e8df f003 	tbb	[pc, r3]
 8008374:	0a1f050a 	.word	0x0a1f050a
 8008378:	0a0a      	.short	0x0a0a
 800837a:	462e      	mov	r6, r5
 800837c:	e7f1      	b.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x57a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800837e:	2101      	movs	r1, #1
 8008380:	1d20      	adds	r0, r4, #4
 8008382:	f7ff fc25 	bl	8007bd0 <RCCEx_PLL2_Config>
 8008386:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008388:	b9ed      	cbnz	r5, 80083c6 <HAL_RCCEx_PeriphCLKConfig+0x5de>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800838a:	4a49      	ldr	r2, [pc, #292]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800838c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800838e:	f023 0307 	bic.w	r3, r3, #7
 8008392:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8008394:	430b      	orrs	r3, r1
 8008396:	6553      	str	r3, [r2, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	f013 0f04 	tst.w	r3, #4
 800839e:	d022      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80083a0:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80083a4:	2b05      	cmp	r3, #5
 80083a6:	d843      	bhi.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80083a8:	e8df f003 	tbb	[pc, r3]
 80083ac:	143b0f14 	.word	0x143b0f14
 80083b0:	1414      	.short	0x1414
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083b2:	2101      	movs	r1, #1
 80083b4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80083b8:	f7ff fc90 	bl	8007cdc <RCCEx_PLL3_Config>
 80083bc:	4605      	mov	r5, r0
      break;
 80083be:	e7e3      	b.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80083c0:	2601      	movs	r6, #1
 80083c2:	4635      	mov	r5, r6
 80083c4:	e7e8      	b.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 80083c6:	462e      	mov	r6, r5
 80083c8:	e7e6      	b.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083ca:	2101      	movs	r1, #1
 80083cc:	1d20      	adds	r0, r4, #4
 80083ce:	f7ff fbff 	bl	8007bd0 <RCCEx_PLL2_Config>
 80083d2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80083d4:	bb7d      	cbnz	r5, 8008436 <HAL_RCCEx_PeriphCLKConfig+0x64e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083d6:	4a36      	ldr	r2, [pc, #216]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80083d8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80083da:	f023 0307 	bic.w	r3, r3, #7
 80083de:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 80083e2:	430b      	orrs	r3, r1
 80083e4:	6593      	str	r3, [r2, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	f013 0f20 	tst.w	r3, #32
 80083ec:	d033      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80083ee:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 80083f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083f6:	d04c      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 80083f8:	d822      	bhi.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x658>
 80083fa:	b13b      	cbz	r3, 800840c <HAL_RCCEx_PeriphCLKConfig+0x624>
 80083fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008400:	d11b      	bne.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x652>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008402:	2100      	movs	r1, #0
 8008404:	1d20      	adds	r0, r4, #4
 8008406:	f7ff fbe3 	bl	8007bd0 <RCCEx_PLL2_Config>
 800840a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800840c:	2d00      	cmp	r5, #0
 800840e:	d147      	bne.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008410:	4a27      	ldr	r2, [pc, #156]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008412:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008414:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8008418:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 800841c:	430b      	orrs	r3, r1
 800841e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008420:	e019      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x66e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008422:	2101      	movs	r1, #1
 8008424:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008428:	f7ff fc58 	bl	8007cdc <RCCEx_PLL3_Config>
 800842c:	4605      	mov	r5, r0
      break;
 800842e:	e7d1      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008430:	2601      	movs	r6, #1
 8008432:	4635      	mov	r5, r6
 8008434:	e7d7      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
 8008436:	462e      	mov	r6, r5
 8008438:	e7d5      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800843a:	2601      	movs	r6, #1
 800843c:	4635      	mov	r5, r6
 800843e:	e00a      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008444:	d0e2      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x624>
 8008446:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800844a:	d0df      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x624>
 800844c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008450:	d0dc      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x624>
 8008452:	2601      	movs	r6, #1
 8008454:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800845c:	d037      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800845e:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8008462:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008466:	d052      	beq.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x726>
 8008468:	d826      	bhi.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 800846a:	b13b      	cbz	r3, 800847c <HAL_RCCEx_PeriphCLKConfig+0x694>
 800846c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008470:	d118      	bne.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008472:	2100      	movs	r1, #0
 8008474:	1d20      	adds	r0, r4, #4
 8008476:	f7ff fbab 	bl	8007bd0 <RCCEx_PLL2_Config>
 800847a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800847c:	2d00      	cmp	r5, #0
 800847e:	d14d      	bne.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008480:	4a0b      	ldr	r2, [pc, #44]	@ (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008482:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8008484:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8008488:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 800848c:	430b      	orrs	r3, r1
 800848e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008490:	e01d      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x6e6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008492:	2102      	movs	r1, #2
 8008494:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008498:	f7ff fc20 	bl	8007cdc <RCCEx_PLL3_Config>
 800849c:	4605      	mov	r5, r0
      break;
 800849e:	e7b5      	b.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x624>
 80084a0:	462e      	mov	r6, r5
 80084a2:	e7d8      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80084a4:	2601      	movs	r6, #1
 80084a6:	4635      	mov	r5, r6
 80084a8:	e011      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x6e6>
 80084aa:	bf00      	nop
 80084ac:	58024800 	.word	0x58024800
 80084b0:	58024400 	.word	0x58024400
 80084b4:	00ffffcf 	.word	0x00ffffcf
 80084b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084bc:	d0de      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x694>
 80084be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80084c2:	d0db      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x694>
 80084c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084c8:	d0d8      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x694>
 80084ca:	2601      	movs	r6, #1
 80084cc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80084d4:	d032      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x754>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80084d6:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80084da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084de:	f000 809d 	beq.w	800861c <HAL_RCCEx_PeriphCLKConfig+0x834>
 80084e2:	d820      	bhi.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80084e4:	b13b      	cbz	r3, 80084f6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80084e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084ea:	d119      	bne.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x738>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084ec:	2100      	movs	r1, #0
 80084ee:	1d20      	adds	r0, r4, #4
 80084f0:	f7ff fb6e 	bl	8007bd0 <RCCEx_PLL2_Config>
 80084f4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80084f6:	2d00      	cmp	r5, #0
 80084f8:	f040 8097 	bne.w	800862a <HAL_RCCEx_PeriphCLKConfig+0x842>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80084fc:	4aa5      	ldr	r2, [pc, #660]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80084fe:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8008500:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8008504:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8008508:	430b      	orrs	r3, r1
 800850a:	6593      	str	r3, [r2, #88]	@ 0x58
 800850c:	e016      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x754>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800850e:	2102      	movs	r1, #2
 8008510:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008514:	f7ff fbe2 	bl	8007cdc <RCCEx_PLL3_Config>
 8008518:	4605      	mov	r5, r0
      break;
 800851a:	e7af      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x694>
 800851c:	462e      	mov	r6, r5
 800851e:	e7d6      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008520:	2601      	movs	r6, #1
 8008522:	4635      	mov	r5, r6
 8008524:	e00a      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x754>
 8008526:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800852a:	d0e4      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 800852c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008530:	d0e1      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8008532:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008536:	d0de      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8008538:	2601      	movs	r6, #1
 800853a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800853c:	6823      	ldr	r3, [r4, #0]
 800853e:	f013 0f08 	tst.w	r3, #8
 8008542:	d00c      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x776>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008544:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8008548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800854c:	d06f      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800854e:	4a91      	ldr	r2, [pc, #580]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008550:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008552:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8008556:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800855a:	430b      	orrs	r3, r1
 800855c:	6553      	str	r3, [r2, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	f013 0f10 	tst.w	r3, #16
 8008564:	d00c      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x798>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008566:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 800856a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800856e:	d067      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x858>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008570:	4a88      	ldr	r2, [pc, #544]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008572:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8008574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008578:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800857c:	430b      	orrs	r3, r1
 800857e:	6593      	str	r3, [r2, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008580:	6823      	ldr	r3, [r4, #0]
 8008582:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8008586:	d00b      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    switch(PeriphClkInit->AdcClockSelection)
 8008588:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800858c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008590:	d06e      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8008592:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008596:	d061      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x874>
 8008598:	2b00      	cmp	r3, #0
 800859a:	d05a      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x86a>
 800859c:	2601      	movs	r6, #1
 800859e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80085a0:	6823      	ldr	r3, [r4, #0]
 80085a2:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80085a6:	d00c      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x7da>
    switch(PeriphClkInit->UsbClockSelection)
 80085a8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80085ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80085b0:	d076      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80085b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80085b6:	d069      	beq.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80085b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085bc:	d061      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 80085be:	2601      	movs	r6, #1
 80085c0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80085c8:	d007      	beq.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    switch(PeriphClkInit->SdmmcClockSelection)
 80085ca:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d070      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 80085d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085d4:	d07b      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 80085d6:	2601      	movs	r6, #1
 80085d8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80085e0:	d17d      	bne.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80085e8:	f000 8086 	beq.w	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    switch(PeriphClkInit->RngClockSelection)
 80085ec:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80085ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085f2:	f000 80c6 	beq.w	8008782 <HAL_RCCEx_PeriphCLKConfig+0x99a>
 80085f6:	d97c      	bls.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80085f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085fc:	d003      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80085fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008602:	f040 80bc 	bne.w	800877e <HAL_RCCEx_PeriphCLKConfig+0x996>
    if(ret == HAL_OK)
 8008606:	2d00      	cmp	r5, #0
 8008608:	f040 80c1 	bne.w	800878e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800860c:	4a61      	ldr	r2, [pc, #388]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800860e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008614:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8008616:	430b      	orrs	r3, r1
 8008618:	6553      	str	r3, [r2, #84]	@ 0x54
 800861a:	e06d      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x910>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800861c:	2102      	movs	r1, #2
 800861e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008622:	f7ff fb5b 	bl	8007cdc <RCCEx_PLL3_Config>
 8008626:	4605      	mov	r5, r0
      break;
 8008628:	e765      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 800862a:	462e      	mov	r6, r5
 800862c:	e786      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x754>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800862e:	2102      	movs	r1, #2
 8008630:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008634:	f7ff fb52 	bl	8007cdc <RCCEx_PLL3_Config>
 8008638:	2800      	cmp	r0, #0
 800863a:	d088      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x766>
          status = HAL_ERROR;
 800863c:	2601      	movs	r6, #1
 800863e:	e786      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x766>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008640:	2102      	movs	r1, #2
 8008642:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008646:	f7ff fb49 	bl	8007cdc <RCCEx_PLL3_Config>
 800864a:	2800      	cmp	r0, #0
 800864c:	d090      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x788>
        status = HAL_ERROR;
 800864e:	2601      	movs	r6, #1
 8008650:	e78e      	b.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x788>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008652:	2100      	movs	r1, #0
 8008654:	1d20      	adds	r0, r4, #4
 8008656:	f7ff fabb 	bl	8007bd0 <RCCEx_PLL2_Config>
 800865a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800865c:	b97d      	cbnz	r5, 800867e <HAL_RCCEx_PeriphCLKConfig+0x896>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800865e:	4a4d      	ldr	r2, [pc, #308]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008660:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8008662:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8008666:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800866a:	430b      	orrs	r3, r1
 800866c:	6593      	str	r3, [r2, #88]	@ 0x58
 800866e:	e797      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008670:	2102      	movs	r1, #2
 8008672:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008676:	f7ff fb31 	bl	8007cdc <RCCEx_PLL3_Config>
 800867a:	4605      	mov	r5, r0
      break;
 800867c:	e7ee      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x874>
 800867e:	462e      	mov	r6, r5
 8008680:	e78e      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008682:	4a44      	ldr	r2, [pc, #272]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008684:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008686:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800868a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 800868c:	b97d      	cbnz	r5, 80086ae <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800868e:	4a41      	ldr	r2, [pc, #260]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008690:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8008692:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008696:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800869a:	430b      	orrs	r3, r1
 800869c:	6553      	str	r3, [r2, #84]	@ 0x54
 800869e:	e790      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x7da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80086a0:	2101      	movs	r1, #1
 80086a2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80086a6:	f7ff fb19 	bl	8007cdc <RCCEx_PLL3_Config>
 80086aa:	4605      	mov	r5, r0
      break;
 80086ac:	e7ee      	b.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80086ae:	462e      	mov	r6, r5
 80086b0:	e787      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x7da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086b2:	4a38      	ldr	r2, [pc, #224]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80086b4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80086b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 80086bc:	b96d      	cbnz	r5, 80086da <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80086be:	4a35      	ldr	r2, [pc, #212]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80086c0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80086c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086c6:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80086c8:	430b      	orrs	r3, r1
 80086ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80086cc:	e785      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80086ce:	2102      	movs	r1, #2
 80086d0:	1d20      	adds	r0, r4, #4
 80086d2:	f7ff fa7d 	bl	8007bd0 <RCCEx_PLL2_Config>
 80086d6:	4605      	mov	r5, r0
      break;
 80086d8:	e7f0      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 80086da:	462e      	mov	r6, r5
 80086dc:	e77d      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80086de:	2102      	movs	r1, #2
 80086e0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80086e4:	f7ff fafa 	bl	8007cdc <RCCEx_PLL3_Config>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	f43f af7a 	beq.w	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
      status=HAL_ERROR;
 80086ee:	2601      	movs	r6, #1
 80086f0:	e777      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    switch(PeriphClkInit->RngClockSelection)
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d087      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80086f6:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80086f8:	6823      	ldr	r3, [r4, #0]
 80086fa:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80086fe:	d006      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x926>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008700:	4a24      	ldr	r2, [pc, #144]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008702:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8008704:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008708:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800870a:	430b      	orrs	r3, r1
 800870c:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8008714:	d007      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x93e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008716:	4a1f      	ldr	r2, [pc, #124]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008718:	6913      	ldr	r3, [r2, #16]
 800871a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800871e:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 8008722:	430b      	orrs	r3, r1
 8008724:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008726:	6823      	ldr	r3, [r4, #0]
 8008728:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800872c:	d006      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x954>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800872e:	4a19      	ldr	r2, [pc, #100]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008730:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8008732:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008736:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008738:	430b      	orrs	r3, r1
 800873a:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800873c:	6823      	ldr	r3, [r4, #0]
 800873e:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008742:	d009      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x970>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008744:	4b13      	ldr	r3, [pc, #76]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008746:	691a      	ldr	r2, [r3, #16]
 8008748:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800874c:	611a      	str	r2, [r3, #16]
 800874e:	691a      	ldr	r2, [r3, #16]
 8008750:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
 8008754:	430a      	orrs	r2, r1
 8008756:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008758:	6823      	ldr	r3, [r4, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	db1c      	blt.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8008764:	d007      	beq.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x98e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008766:	4a0b      	ldr	r2, [pc, #44]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008768:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800876a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800876e:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8008772:	430b      	orrs	r3, r1
 8008774:	6553      	str	r3, [r2, #84]	@ 0x54
  if (status == HAL_OK)
 8008776:	b106      	cbz	r6, 800877a <HAL_RCCEx_PeriphCLKConfig+0x992>
  return HAL_ERROR;
 8008778:	2601      	movs	r6, #1
}
 800877a:	4630      	mov	r0, r6
 800877c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 800877e:	2601      	movs	r6, #1
 8008780:	e7ba      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008782:	4a04      	ldr	r2, [pc, #16]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008784:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800878a:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 800878c:	e73b      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800878e:	462e      	mov	r6, r5
 8008790:	e7b2      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8008792:	bf00      	nop
 8008794:	58024400 	.word	0x58024400
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008798:	4a03      	ldr	r2, [pc, #12]	@ (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800879a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800879c:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80087a0:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80087a2:	430b      	orrs	r3, r1
 80087a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80087a6:	e7da      	b.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x976>
 80087a8:	58024400 	.word	0x58024400

080087ac <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80087ac:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80087ae:	f7ff f99f 	bl	8007af0 <HAL_RCC_GetHCLKFreq>
 80087b2:	4b05      	ldr	r3, [pc, #20]	@ (80087c8 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80087ba:	4a04      	ldr	r2, [pc, #16]	@ (80087cc <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80087bc:	5cd3      	ldrb	r3, [r2, r3]
 80087be:	f003 031f 	and.w	r3, r3, #31
}
 80087c2:	40d8      	lsrs	r0, r3
 80087c4:	bd08      	pop	{r3, pc}
 80087c6:	bf00      	nop
 80087c8:	58024400 	.word	0x58024400
 80087cc:	0801c7d0 	.word	0x0801c7d0

080087d0 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 80087d0:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087d2:	4b78      	ldr	r3, [pc, #480]	@ (80089b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80087d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80087d6:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80087d8:	f3c4 3c05 	ubfx	ip, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80087dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80087de:	f3c1 1100 	ubfx	r1, r1, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80087e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087e4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80087e8:	fb01 f303 	mul.w	r3, r1, r3
  if (pll2m != 0U)
 80087ec:	f414 3f7c 	tst.w	r4, #258048	@ 0x3f000
 80087f0:	f000 80db 	beq.w	80089aa <HAL_RCCEx_GetPLL2ClockFreq+0x1da>
 80087f4:	f002 0203 	and.w	r2, r2, #3
 80087f8:	ee07 3a90 	vmov	s15, r3
 80087fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8008800:	2a01      	cmp	r2, #1
 8008802:	d066      	beq.n	80088d2 <HAL_RCCEx_GetPLL2ClockFreq+0x102>
 8008804:	2a02      	cmp	r2, #2
 8008806:	f000 80b3 	beq.w	8008970 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800880a:	b1e2      	cbz	r2, 8008846 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800880c:	ee07 ca10 	vmov	s14, ip
 8008810:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008814:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8008818:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800881c:	4b65      	ldr	r3, [pc, #404]	@ (80089b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800881e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008824:	ee06 3a90 	vmov	s13, r3
 8008828:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800882c:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 80089bc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8008830:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008838:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800883c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008840:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 8008844:	e061      	b.n	800890a <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008846:	4b5b      	ldr	r3, [pc, #364]	@ (80089b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f013 0f20 	tst.w	r3, #32
 800884e:	d023      	beq.n	8008898 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008850:	4958      	ldr	r1, [pc, #352]	@ (80089b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8008852:	680a      	ldr	r2, [r1, #0]
 8008854:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008858:	4b59      	ldr	r3, [pc, #356]	@ (80089c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 800885a:	40d3      	lsrs	r3, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800885c:	ee07 3a10 	vmov	s14, r3
 8008860:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008864:	ee07 ca10 	vmov	s14, ip
 8008868:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800886c:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8008870:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8008872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008876:	ee06 3a90 	vmov	s13, r3
 800887a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800887e:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 80089bc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8008882:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800888a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800888e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008892:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008896:	e038      	b.n	800890a <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008898:	ee07 ca10 	vmov	s14, ip
 800889c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80088a0:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 80089c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 80088a4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80088a8:	4b42      	ldr	r3, [pc, #264]	@ (80089b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80088aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b0:	ee06 3a90 	vmov	s13, r3
 80088b4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80088b8:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 80089bc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80088bc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80088c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80088d0:	e01b      	b.n	800890a <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80088d2:	ee07 ca10 	vmov	s14, ip
 80088d6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80088da:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80088de:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80088e2:	4b34      	ldr	r3, [pc, #208]	@ (80089b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80088e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ea:	ee06 3a90 	vmov	s13, r3
 80088ee:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80088f2:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 80089bc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80088f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80088fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008906:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800890a:	4a2a      	ldr	r2, [pc, #168]	@ (80089b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800890c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800890e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008912:	ee07 3a90 	vmov	s15, r3
 8008916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800891a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800891e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008922:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008926:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800892a:	ed80 6a00 	vstr	s12, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800892e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8008930:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008934:	ee07 3a90 	vmov	s15, r3
 8008938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800893c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008940:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008944:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8008948:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800894c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800894e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008952:	ee07 3a90 	vmov	s15, r3
 8008956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800895a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800895e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008962:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008966:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800896a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800896e:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008970:	ee07 ca10 	vmov	s14, ip
 8008974:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008978:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80089c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 800897c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008980:	4b0c      	ldr	r3, [pc, #48]	@ (80089b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8008982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008988:	ee06 3a90 	vmov	s13, r3
 800898c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008990:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 80089bc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8008994:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008998:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800899c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089a4:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 80089a8:	e7af      	b.n	800890a <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80089aa:	2300      	movs	r3, #0
 80089ac:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80089ae:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80089b0:	6083      	str	r3, [r0, #8]
}
 80089b2:	e7da      	b.n	800896a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 80089b4:	58024400 	.word	0x58024400
 80089b8:	4a742400 	.word	0x4a742400
 80089bc:	39000000 	.word	0x39000000
 80089c0:	03d09000 	.word	0x03d09000
 80089c4:	4c742400 	.word	0x4c742400
 80089c8:	4bb71b00 	.word	0x4bb71b00

080089cc <HAL_RCCEx_GetPLL3ClockFreq>:
{
 80089cc:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089ce:	4b78      	ldr	r3, [pc, #480]	@ (8008bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80089d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80089d2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80089d4:	f3c4 5c05 	ubfx	ip, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80089d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80089da:	f3c1 2100 	ubfx	r1, r1, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80089de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089e0:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80089e4:	fb01 f303 	mul.w	r3, r1, r3
  if (pll3m != 0U)
 80089e8:	f014 7f7c 	tst.w	r4, #66060288	@ 0x3f00000
 80089ec:	f000 80db 	beq.w	8008ba6 <HAL_RCCEx_GetPLL3ClockFreq+0x1da>
 80089f0:	f002 0203 	and.w	r2, r2, #3
 80089f4:	ee07 3a90 	vmov	s15, r3
 80089f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 80089fc:	2a01      	cmp	r2, #1
 80089fe:	d066      	beq.n	8008ace <HAL_RCCEx_GetPLL3ClockFreq+0x102>
 8008a00:	2a02      	cmp	r2, #2
 8008a02:	f000 80b3 	beq.w	8008b6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008a06:	b1e2      	cbz	r2, 8008a42 <HAL_RCCEx_GetPLL3ClockFreq+0x76>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a08:	ee07 ca10 	vmov	s14, ip
 8008a0c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008a10:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 8008bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8008a14:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008a18:	4b65      	ldr	r3, [pc, #404]	@ (8008bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8008a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a20:	ee06 3a90 	vmov	s13, r3
 8008a24:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008a28:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8008a2c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008a30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 8008a40:	e061      	b.n	8008b06 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a42:	4b5b      	ldr	r3, [pc, #364]	@ (8008bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f013 0f20 	tst.w	r3, #32
 8008a4a:	d023      	beq.n	8008a94 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a4c:	4958      	ldr	r1, [pc, #352]	@ (8008bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8008a4e:	680a      	ldr	r2, [r1, #0]
 8008a50:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008a54:	4b59      	ldr	r3, [pc, #356]	@ (8008bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 8008a56:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a58:	ee07 3a10 	vmov	s14, r3
 8008a5c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008a60:	ee07 ca10 	vmov	s14, ip
 8008a64:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8008a68:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8008a6c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a72:	ee06 3a90 	vmov	s13, r3
 8008a76:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008a7a:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8008a7e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a92:	e038      	b.n	8008b06 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a94:	ee07 ca10 	vmov	s14, ip
 8008a98:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008a9c:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 8008bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8008aa0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008aa4:	4b42      	ldr	r3, [pc, #264]	@ (8008bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8008aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aac:	ee06 3a90 	vmov	s13, r3
 8008ab0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008ab4:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8008ab8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008abc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ac0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ac4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ac8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008acc:	e01b      	b.n	8008b06 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ace:	ee07 ca10 	vmov	s14, ip
 8008ad2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008ad6:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8008bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8008ada:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008ade:	4b34      	ldr	r3, [pc, #208]	@ (8008bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8008ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ae6:	ee06 3a90 	vmov	s13, r3
 8008aea:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008aee:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8008af2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008afa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b02:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008b06:	4a2a      	ldr	r2, [pc, #168]	@ (8008bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8008b08:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8008b0a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008b0e:	ee07 3a90 	vmov	s15, r3
 8008b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b1e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008b22:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8008b26:	ed80 6a00 	vstr	s12, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008b2a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8008b2c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008b30:	ee07 3a90 	vmov	s15, r3
 8008b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b3c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008b40:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8008b44:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008b48:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8008b4a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008b4e:	ee07 3a90 	vmov	s15, r3
 8008b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b5a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008b5e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008b62:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8008b66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b6a:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b6c:	ee07 ca10 	vmov	s14, ip
 8008b70:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008b74:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8008bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8008b78:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8008bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8008b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b84:	ee06 3a90 	vmov	s13, r3
 8008b88:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008b8c:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8008b90:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008b94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ba0:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 8008ba4:	e7af      	b.n	8008b06 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008baa:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008bac:	6083      	str	r3, [r0, #8]
}
 8008bae:	e7da      	b.n	8008b66 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 8008bb0:	58024400 	.word	0x58024400
 8008bb4:	4a742400 	.word	0x4a742400
 8008bb8:	39000000 	.word	0x39000000
 8008bbc:	03d09000 	.word	0x03d09000
 8008bc0:	4c742400 	.word	0x4c742400
 8008bc4:	4bb71b00 	.word	0x4bb71b00

08008bc8 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 8008bc8:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bca:	4b78      	ldr	r3, [pc, #480]	@ (8008dac <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008bcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008bce:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008bd0:	f3c4 1c05 	ubfx	ip, r4, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008bd4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008bd6:	f001 0101 	and.w	r1, r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bdc:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8008be0:	fb01 f303 	mul.w	r3, r1, r3
  if (pll1m != 0U)
 8008be4:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
 8008be8:	f000 80db 	beq.w	8008da2 <HAL_RCCEx_GetPLL1ClockFreq+0x1da>
 8008bec:	f002 0203 	and.w	r2, r2, #3
 8008bf0:	ee07 3a90 	vmov	s15, r3
 8008bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8008bf8:	2a01      	cmp	r2, #1
 8008bfa:	d066      	beq.n	8008cca <HAL_RCCEx_GetPLL1ClockFreq+0x102>
 8008bfc:	2a02      	cmp	r2, #2
 8008bfe:	f000 80b3 	beq.w	8008d68 <HAL_RCCEx_GetPLL1ClockFreq+0x1a0>
 8008c02:	b1e2      	cbz	r2, 8008c3e <HAL_RCCEx_GetPLL1ClockFreq+0x76>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c04:	ee07 ca10 	vmov	s14, ip
 8008c08:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008c0c:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 8008db0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8008c10:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008c14:	4b65      	ldr	r3, [pc, #404]	@ (8008dac <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c1c:	ee06 3a90 	vmov	s13, r3
 8008c20:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008c24:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 8008db4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8008c28:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c38:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 8008c3c:	e061      	b.n	8008d02 <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c3e:	4b5b      	ldr	r3, [pc, #364]	@ (8008dac <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f013 0f20 	tst.w	r3, #32
 8008c46:	d023      	beq.n	8008c90 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c48:	4958      	ldr	r1, [pc, #352]	@ (8008dac <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008c4a:	680a      	ldr	r2, [r1, #0]
 8008c4c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008c50:	4b59      	ldr	r3, [pc, #356]	@ (8008db8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 8008c52:	40d3      	lsrs	r3, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c54:	ee07 3a10 	vmov	s14, r3
 8008c58:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008c5c:	ee07 ca10 	vmov	s14, ip
 8008c60:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8008c64:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8008c68:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8008c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c6e:	ee06 3a90 	vmov	s13, r3
 8008c72:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008c76:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 8008db4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8008c7a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008c8e:	e038      	b.n	8008d02 <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c90:	ee07 ca10 	vmov	s14, ip
 8008c94:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008c98:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8008db0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8008c9c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008ca0:	4b42      	ldr	r3, [pc, #264]	@ (8008dac <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca8:	ee06 3a90 	vmov	s13, r3
 8008cac:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008cb0:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8008db4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8008cb4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008cc8:	e01b      	b.n	8008d02 <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008cca:	ee07 ca10 	vmov	s14, ip
 8008cce:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008cd2:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8008dbc <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 8008cd6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008cda:	4b34      	ldr	r3, [pc, #208]	@ (8008dac <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce2:	ee06 3a90 	vmov	s13, r3
 8008ce6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008cea:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 8008db4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8008cee:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008d02:	4a2a      	ldr	r2, [pc, #168]	@ (8008dac <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008d04:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008d06:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008d0a:	ee07 3a90 	vmov	s15, r3
 8008d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d1a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008d1e:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8008d22:	ed80 6a00 	vstr	s12, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008d26:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008d28:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008d2c:	ee07 3a90 	vmov	s15, r3
 8008d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d38:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008d3c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8008d40:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008d44:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008d46:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008d4a:	ee07 3a90 	vmov	s15, r3
 8008d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d56:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008d5a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008d5e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8008d62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d66:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d68:	ee07 ca10 	vmov	s14, ip
 8008d6c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008d70:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8008dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 8008d74:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008d78:	4b0c      	ldr	r3, [pc, #48]	@ (8008dac <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d80:	ee06 3a90 	vmov	s13, r3
 8008d84:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008d88:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8008db4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8008d8c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d9c:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 8008da0:	e7af      	b.n	8008d02 <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008da2:	2300      	movs	r3, #0
 8008da4:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008da6:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008da8:	6083      	str	r3, [r0, #8]
}
 8008daa:	e7da      	b.n	8008d62 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 8008dac:	58024400 	.word	0x58024400
 8008db0:	4c742400 	.word	0x4c742400
 8008db4:	39000000 	.word	0x39000000
 8008db8:	03d09000 	.word	0x03d09000
 8008dbc:	4a742400 	.word	0x4a742400
 8008dc0:	4bb71b00 	.word	0x4bb71b00

08008dc4 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8008dc4:	b500      	push	{lr}
 8008dc6:	b08b      	sub	sp, #44	@ 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008dc8:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8008dcc:	d020      	beq.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008dce:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8008dd2:	d071      	beq.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008dd4:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8008dd8:	f000 80c8 	beq.w	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008ddc:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8008de0:	f000 8121 	beq.w	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008de4:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8008de8:	f000 8182 	beq.w	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008dec:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 8008df0:	f000 81db 	beq.w	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008df4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008df8:	f000 821f 	beq.w	800923a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008dfc:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 8008e00:	f000 8239 	beq.w	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008e04:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008e08:	f000 8284 	beq.w	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
      frequency = 0;
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	e2b2      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008e10:	4b95      	ldr	r3, [pc, #596]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e14:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8008e18:	2b04      	cmp	r3, #4
 8008e1a:	f200 82a3 	bhi.w	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008e1e:	e8df f003 	tbb	[pc, r3]
 8008e22:	1005      	.short	0x1005
 8008e24:	031b      	.short	0x031b
 8008e26:	26          	.byte	0x26
 8008e27:	00          	.byte	0x00
 8008e28:	4890      	ldr	r0, [pc, #576]	@ (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008e2a:	e2a4      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e2c:	4b8e      	ldr	r3, [pc, #568]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008e34:	f000 829f 	beq.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e38:	a807      	add	r0, sp, #28
 8008e3a:	f7ff fec5 	bl	8008bc8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e3e:	9808      	ldr	r0, [sp, #32]
 8008e40:	e299      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e42:	4b89      	ldr	r3, [pc, #548]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e44:	6818      	ldr	r0, [r3, #0]
 8008e46:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008e4a:	f000 8294 	beq.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e4e:	a804      	add	r0, sp, #16
 8008e50:	f7ff fcbe 	bl	80087d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e54:	9804      	ldr	r0, [sp, #16]
 8008e56:	e28e      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e58:	4b83      	ldr	r3, [pc, #524]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e5a:	6818      	ldr	r0, [r3, #0]
 8008e5c:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008e60:	f000 8289 	beq.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e64:	a801      	add	r0, sp, #4
 8008e66:	f7ff fdb1 	bl	80089cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e6a:	9801      	ldr	r0, [sp, #4]
 8008e6c:	e283      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e6e:	4a7e      	ldr	r2, [pc, #504]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e70:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008e72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e76:	6812      	ldr	r2, [r2, #0]
 8008e78:	f012 0f04 	tst.w	r2, #4
 8008e7c:	d007      	beq.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8008e7e:	b933      	cbnz	r3, 8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0xca>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e80:	4b79      	ldr	r3, [pc, #484]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008e88:	4879      	ldr	r0, [pc, #484]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8008e8a:	40d8      	lsrs	r0, r3
 8008e8c:	e273      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e8e:	4a76      	ldr	r2, [pc, #472]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008e90:	6812      	ldr	r2, [r2, #0]
 8008e92:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008e96:	d003      	beq.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008e98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e9c:	f000 8264 	beq.w	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ea0:	4a71      	ldr	r2, [pc, #452]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008ea2:	6812      	ldr	r2, [r2, #0]
 8008ea4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008ea8:	f000 8260 	beq.w	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008eac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008eb0:	f000 825e 	beq.w	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
            frequency = 0;
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	e25e      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008eb8:	4b6b      	ldr	r3, [pc, #428]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ebc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
      switch (saiclocksource)
 8008ec0:	2b80      	cmp	r3, #128	@ 0x80
 8008ec2:	d033      	beq.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8008ec4:	d915      	bls.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8008ec6:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ec8:	f000 8254 	beq.w	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8008ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ed0:	d11f      	bne.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ed2:	4a65      	ldr	r2, [pc, #404]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008ed4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008ed6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008eda:	6812      	ldr	r2, [r2, #0]
 8008edc:	f012 0f04 	tst.w	r2, #4
 8008ee0:	d02f      	beq.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8008ee2:	bb73      	cbnz	r3, 8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ee4:	4b60      	ldr	r3, [pc, #384]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008eec:	4860      	ldr	r0, [pc, #384]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8008eee:	40d8      	lsrs	r0, r3
 8008ef0:	e241      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8008ef2:	b183      	cbz	r3, 8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8008ef4:	2b40      	cmp	r3, #64	@ 0x40
 8008ef6:	d10a      	bne.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ef8:	4b5b      	ldr	r3, [pc, #364]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008efa:	6818      	ldr	r0, [r3, #0]
 8008efc:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008f00:	f000 8239 	beq.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f04:	a804      	add	r0, sp, #16
 8008f06:	f7ff fc63 	bl	80087d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f0a:	9804      	ldr	r0, [sp, #16]
 8008f0c:	e233      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8008f0e:	2000      	movs	r0, #0
 8008f10:	e231      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008f12:	2000      	movs	r0, #0
 8008f14:	e22f      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f16:	4b54      	ldr	r3, [pc, #336]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f18:	6818      	ldr	r0, [r3, #0]
 8008f1a:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008f1e:	f000 822a 	beq.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f22:	a807      	add	r0, sp, #28
 8008f24:	f7ff fe50 	bl	8008bc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f28:	9808      	ldr	r0, [sp, #32]
 8008f2a:	e224      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f2c:	4b4e      	ldr	r3, [pc, #312]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f2e:	6818      	ldr	r0, [r3, #0]
 8008f30:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008f34:	f000 821f 	beq.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f38:	a801      	add	r0, sp, #4
 8008f3a:	f7ff fd47 	bl	80089cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f3e:	9801      	ldr	r0, [sp, #4]
 8008f40:	e219      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f42:	4a49      	ldr	r2, [pc, #292]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f44:	6812      	ldr	r2, [r2, #0]
 8008f46:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008f4a:	d003      	beq.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8008f4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f50:	f000 8214 	beq.w	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f54:	4a44      	ldr	r2, [pc, #272]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f56:	6812      	ldr	r2, [r2, #0]
 8008f58:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008f5c:	f000 8210 	beq.w	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 8008f60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f64:	f000 820e 	beq.w	8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
            frequency = 0;
 8008f68:	2000      	movs	r0, #0
 8008f6a:	e204      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008f6c:	4b3e      	ldr	r3, [pc, #248]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f70:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
      switch (saiclocksource)
 8008f74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f78:	d035      	beq.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 8008f7a:	d916      	bls.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008f7c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f80:	f000 8202 	beq.w	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8008f84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f88:	d120      	bne.n	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f8a:	4a37      	ldr	r2, [pc, #220]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f8c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008f8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f92:	6812      	ldr	r2, [r2, #0]
 8008f94:	f012 0f04 	tst.w	r2, #4
 8008f98:	d030      	beq.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8008f9a:	bb7b      	cbnz	r3, 8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x238>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f9c:	4b32      	ldr	r3, [pc, #200]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008fa4:	4832      	ldr	r0, [pc, #200]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8008fa6:	40d8      	lsrs	r0, r3
 8008fa8:	e1e5      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8008faa:	b18b      	cbz	r3, 8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8008fac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fb0:	d10a      	bne.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fb2:	4b2d      	ldr	r3, [pc, #180]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008fb4:	6818      	ldr	r0, [r3, #0]
 8008fb6:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008fba:	f000 81dc 	beq.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fbe:	a804      	add	r0, sp, #16
 8008fc0:	f7ff fc06 	bl	80087d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fc4:	9804      	ldr	r0, [sp, #16]
 8008fc6:	e1d6      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8008fc8:	2000      	movs	r0, #0
 8008fca:	e1d4      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008fcc:	2000      	movs	r0, #0
 8008fce:	e1d2      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fd0:	4b25      	ldr	r3, [pc, #148]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008fd2:	6818      	ldr	r0, [r3, #0]
 8008fd4:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008fd8:	f000 81cd 	beq.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fdc:	a807      	add	r0, sp, #28
 8008fde:	f7ff fdf3 	bl	8008bc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fe2:	9808      	ldr	r0, [sp, #32]
 8008fe4:	e1c7      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fe6:	4b20      	ldr	r3, [pc, #128]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008fe8:	6818      	ldr	r0, [r3, #0]
 8008fea:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008fee:	f000 81c2 	beq.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ff2:	a801      	add	r0, sp, #4
 8008ff4:	f7ff fcea 	bl	80089cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ff8:	9801      	ldr	r0, [sp, #4]
 8008ffa:	e1bc      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008ffe:	6812      	ldr	r2, [r2, #0]
 8009000:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8009004:	d003      	beq.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 8009006:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800900a:	f000 81bf 	beq.w	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800900e:	4a16      	ldr	r2, [pc, #88]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009010:	6812      	ldr	r2, [r2, #0]
 8009012:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8009016:	f000 81bb 	beq.w	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800901a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800901e:	f000 81b9 	beq.w	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
            frequency = 0;
 8009022:	2000      	movs	r0, #0
 8009024:	e1a7      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009026:	4b10      	ldr	r3, [pc, #64]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800902a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
      switch (saiclocksource)
 800902e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009032:	d03d      	beq.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8009034:	d91e      	bls.n	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8009036:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800903a:	f000 81ad 	beq.w	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800903e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009042:	d128      	bne.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009044:	4a08      	ldr	r2, [pc, #32]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009046:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8009048:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800904c:	6812      	ldr	r2, [r2, #0]
 800904e:	f012 0f04 	tst.w	r2, #4
 8009052:	d038      	beq.n	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8009054:	2b00      	cmp	r3, #0
 8009056:	d136      	bne.n	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009058:	4b03      	ldr	r3, [pc, #12]	@ (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009060:	4803      	ldr	r0, [pc, #12]	@ (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8009062:	40d8      	lsrs	r0, r3
 8009064:	e187      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8009066:	bf00      	nop
 8009068:	58024400 	.word	0x58024400
 800906c:	00bb8000 	.word	0x00bb8000
 8009070:	03d09000 	.word	0x03d09000
      switch (saiclocksource)
 8009074:	b18b      	cbz	r3, 800909a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8009076:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800907a:	d10a      	bne.n	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800907c:	4b99      	ldr	r3, [pc, #612]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800907e:	6818      	ldr	r0, [r3, #0]
 8009080:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8009084:	f000 8177 	beq.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009088:	a804      	add	r0, sp, #16
 800908a:	f7ff fba1 	bl	80087d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800908e:	9804      	ldr	r0, [sp, #16]
 8009090:	e171      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8009092:	2000      	movs	r0, #0
 8009094:	e16f      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8009096:	2000      	movs	r0, #0
 8009098:	e16d      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800909a:	4b92      	ldr	r3, [pc, #584]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800909c:	6818      	ldr	r0, [r3, #0]
 800909e:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 80090a2:	f000 8168 	beq.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090a6:	a807      	add	r0, sp, #28
 80090a8:	f7ff fd8e 	bl	8008bc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090ac:	9808      	ldr	r0, [sp, #32]
 80090ae:	e162      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090b0:	4b8c      	ldr	r3, [pc, #560]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80090b2:	6818      	ldr	r0, [r3, #0]
 80090b4:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80090b8:	f000 815d 	beq.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090bc:	a801      	add	r0, sp, #4
 80090be:	f7ff fc85 	bl	80089cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090c2:	9801      	ldr	r0, [sp, #4]
 80090c4:	e157      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090c6:	4a87      	ldr	r2, [pc, #540]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80090c8:	6812      	ldr	r2, [r2, #0]
 80090ca:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80090ce:	d003      	beq.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80090d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090d4:	f000 8162 	beq.w	800939c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090d8:	4a82      	ldr	r2, [pc, #520]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80090da:	6812      	ldr	r2, [r2, #0]
 80090dc:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80090e0:	f000 815e 	beq.w	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 80090e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090e8:	f000 815c 	beq.w	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
            frequency = 0;
 80090ec:	2000      	movs	r0, #0
 80090ee:	e142      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80090f0:	4b7c      	ldr	r3, [pc, #496]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80090f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090f4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
      switch (srcclk)
 80090f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090fc:	d035      	beq.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 80090fe:	d916      	bls.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8009100:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009104:	f000 8150 	beq.w	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8009108:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800910c:	d120      	bne.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800910e:	4a75      	ldr	r2, [pc, #468]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009110:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8009112:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009116:	6812      	ldr	r2, [r2, #0]
 8009118:	f012 0f04 	tst.w	r2, #4
 800911c:	d030      	beq.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800911e:	bb7b      	cbnz	r3, 8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009120:	4b70      	ldr	r3, [pc, #448]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009128:	486f      	ldr	r0, [pc, #444]	@ (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800912a:	40d8      	lsrs	r0, r3
 800912c:	e123      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 800912e:	b18b      	cbz	r3, 8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8009130:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009134:	d10a      	bne.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009136:	4b6b      	ldr	r3, [pc, #428]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009138:	6818      	ldr	r0, [r3, #0]
 800913a:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800913e:	f000 811a 	beq.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009142:	a804      	add	r0, sp, #16
 8009144:	f7ff fb44 	bl	80087d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009148:	9804      	ldr	r0, [sp, #16]
 800914a:	e114      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 800914c:	2000      	movs	r0, #0
 800914e:	e112      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8009150:	2000      	movs	r0, #0
 8009152:	e110      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009154:	4b63      	ldr	r3, [pc, #396]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009156:	6818      	ldr	r0, [r3, #0]
 8009158:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800915c:	f000 810b 	beq.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009160:	a807      	add	r0, sp, #28
 8009162:	f7ff fd31 	bl	8008bc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009166:	9808      	ldr	r0, [sp, #32]
 8009168:	e105      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800916a:	4b5e      	ldr	r3, [pc, #376]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800916c:	6818      	ldr	r0, [r3, #0]
 800916e:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8009172:	f000 8100 	beq.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009176:	a801      	add	r0, sp, #4
 8009178:	f7ff fc28 	bl	80089cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800917c:	9801      	ldr	r0, [sp, #4]
 800917e:	e0fa      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009180:	4a58      	ldr	r2, [pc, #352]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009182:	6812      	ldr	r2, [r2, #0]
 8009184:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8009188:	d003      	beq.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800918a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800918e:	f000 810d 	beq.w	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009192:	4a54      	ldr	r2, [pc, #336]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009194:	6812      	ldr	r2, [r2, #0]
 8009196:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800919a:	f000 8109 	beq.w	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 800919e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091a2:	f000 8107 	beq.w	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            frequency = 0;
 80091a6:	2000      	movs	r0, #0
 80091a8:	e0e5      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80091aa:	4b4e      	ldr	r3, [pc, #312]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80091ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
      switch (srcclk)
 80091b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091b6:	d010      	beq.n	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 80091b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091bc:	d018      	beq.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 80091be:	b10b      	cbz	r3, 80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
 80091c0:	2000      	movs	r0, #0
 80091c2:	e0d8      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091c4:	4b47      	ldr	r3, [pc, #284]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80091c6:	6818      	ldr	r0, [r3, #0]
 80091c8:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80091cc:	f000 80d3 	beq.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091d0:	a804      	add	r0, sp, #16
 80091d2:	f7ff fafd 	bl	80087d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091d6:	9804      	ldr	r0, [sp, #16]
 80091d8:	e0cd      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091da:	4b42      	ldr	r3, [pc, #264]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80091dc:	6818      	ldr	r0, [r3, #0]
 80091de:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80091e2:	f000 80c8 	beq.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091e6:	a801      	add	r0, sp, #4
 80091e8:	f7ff fbf0 	bl	80089cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80091ec:	9803      	ldr	r0, [sp, #12]
 80091ee:	e0c2      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80091f0:	4a3c      	ldr	r2, [pc, #240]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80091f2:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80091f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091f8:	6812      	ldr	r2, [r2, #0]
 80091fa:	f012 0f04 	tst.w	r2, #4
 80091fe:	d007      	beq.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
 8009200:	b933      	cbnz	r3, 8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009202:	4b38      	ldr	r3, [pc, #224]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800920a:	4837      	ldr	r0, [pc, #220]	@ (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800920c:	40d8      	lsrs	r0, r3
 800920e:	e0b2      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009210:	4a34      	ldr	r2, [pc, #208]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009212:	6812      	ldr	r2, [r2, #0]
 8009214:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8009218:	d003      	beq.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 800921a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800921e:	f000 80cb 	beq.w	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009222:	4a30      	ldr	r2, [pc, #192]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009224:	6812      	ldr	r2, [r2, #0]
 8009226:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800922a:	f000 80c7 	beq.w	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800922e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009232:	f000 80c5 	beq.w	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
            frequency = 0;
 8009236:	2000      	movs	r0, #0
 8009238:	e09d      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800923a:	4b2a      	ldr	r3, [pc, #168]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800923c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      switch (srcclk)
 800923e:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8009242:	d002      	beq.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8009244:	b963      	cbnz	r3, 8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
 8009246:	2000      	movs	r0, #0
 8009248:	e095      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800924a:	4b26      	ldr	r3, [pc, #152]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800924c:	6818      	ldr	r0, [r3, #0]
 800924e:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8009252:	f000 8090 	beq.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009256:	a807      	add	r0, sp, #28
 8009258:	f7ff fcb6 	bl	8008bc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800925c:	9808      	ldr	r0, [sp, #32]
 800925e:	e08a      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009260:	4b20      	ldr	r3, [pc, #128]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009262:	6818      	ldr	r0, [r3, #0]
 8009264:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8009268:	f000 8085 	beq.w	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800926c:	a804      	add	r0, sp, #16
 800926e:	f7ff faaf 	bl	80087d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009272:	9806      	ldr	r0, [sp, #24]
 8009274:	e07f      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009276:	4b1b      	ldr	r3, [pc, #108]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800927a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
      switch (srcclk)
 800927e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009282:	d035      	beq.n	80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 8009284:	d815      	bhi.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8009286:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800928a:	d021      	beq.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 800928c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009290:	d109      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009292:	4b14      	ldr	r3, [pc, #80]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009294:	6818      	ldr	r0, [r3, #0]
 8009296:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800929a:	d06c      	beq.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800929c:	a801      	add	r0, sp, #4
 800929e:	f7ff fb95 	bl	80089cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80092a2:	9802      	ldr	r0, [sp, #8]
 80092a4:	e067      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 80092a6:	b913      	cbnz	r3, 80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80092a8:	f7ff fa80 	bl	80087ac <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 80092ac:	e063      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 80092ae:	2000      	movs	r0, #0
 80092b0:	e061      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 80092b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092b6:	d026      	beq.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
 80092b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80092bc:	d106      	bne.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x508>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80092be:	4b09      	ldr	r3, [pc, #36]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80092c0:	6818      	ldr	r0, [r3, #0]
 80092c2:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80092c6:	d056      	beq.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 80092c8:	4808      	ldr	r0, [pc, #32]	@ (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80092ca:	e054      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 80092cc:	2000      	movs	r0, #0
 80092ce:	e052      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092d0:	4b04      	ldr	r3, [pc, #16]	@ (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80092d2:	6818      	ldr	r0, [r3, #0]
 80092d4:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80092d8:	d04d      	beq.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092da:	a804      	add	r0, sp, #16
 80092dc:	f7ff fa78 	bl	80087d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80092e0:	9805      	ldr	r0, [sp, #20]
 80092e2:	e048      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 80092e4:	58024400 	.word	0x58024400
 80092e8:	03d09000 	.word	0x03d09000
 80092ec:	016e3600 	.word	0x016e3600
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80092f0:	4b34      	ldr	r3, [pc, #208]	@ (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 80092f2:	6818      	ldr	r0, [r3, #0]
 80092f4:	f010 0004 	ands.w	r0, r0, #4
 80092f8:	d03d      	beq.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009300:	4831      	ldr	r0, [pc, #196]	@ (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8009302:	40d8      	lsrs	r0, r3
 8009304:	e037      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009306:	4b2f      	ldr	r3, [pc, #188]	@ (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8009308:	6818      	ldr	r0, [r3, #0]
 800930a:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 800930e:	d032      	beq.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = CSI_VALUE;
 8009310:	482e      	ldr	r0, [pc, #184]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8009312:	e030      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009314:	4b2b      	ldr	r3, [pc, #172]	@ (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8009316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009318:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (srcclk)
 800931c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009320:	d00c      	beq.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8009322:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009326:	d013      	beq.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 8009328:	b10b      	cbz	r3, 800932e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800932a:	2000      	movs	r0, #0
  return frequency;
 800932c:	e023      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800932e:	4b25      	ldr	r3, [pc, #148]	@ (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8009330:	6818      	ldr	r0, [r3, #0]
 8009332:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8009336:	d01e      	beq.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 8009338:	4825      	ldr	r0, [pc, #148]	@ (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800933a:	e01c      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800933c:	4b21      	ldr	r3, [pc, #132]	@ (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800933e:	6818      	ldr	r0, [r3, #0]
 8009340:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8009344:	d017      	beq.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009346:	a807      	add	r0, sp, #28
 8009348:	f7ff fc3e 	bl	8008bc8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800934c:	9808      	ldr	r0, [sp, #32]
 800934e:	e012      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009350:	4b1c      	ldr	r3, [pc, #112]	@ (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8009352:	6818      	ldr	r0, [r3, #0]
 8009354:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8009358:	d00d      	beq.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800935a:	a804      	add	r0, sp, #16
 800935c:	f7ff fa38 	bl	80087d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009360:	9805      	ldr	r0, [sp, #20]
 8009362:	e008      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8009364:	2000      	movs	r0, #0
 8009366:	e006      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 8009368:	4818      	ldr	r0, [pc, #96]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800936a:	e004      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 800936c:	2000      	movs	r0, #0
 800936e:	e002      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8009370:	4817      	ldr	r0, [pc, #92]	@ (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8009372:	e000      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8009374:	4817      	ldr	r0, [pc, #92]	@ (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
}
 8009376:	b00b      	add	sp, #44	@ 0x2c
 8009378:	f85d fb04 	ldr.w	pc, [sp], #4
            frequency = CSI_VALUE;
 800937c:	4813      	ldr	r0, [pc, #76]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800937e:	e7fa      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8009380:	2000      	movs	r0, #0
 8009382:	e7f8      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8009384:	4812      	ldr	r0, [pc, #72]	@ (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8009386:	e7f6      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8009388:	4812      	ldr	r0, [pc, #72]	@ (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 800938a:	e7f4      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 800938c:	480f      	ldr	r0, [pc, #60]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800938e:	e7f2      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 8009390:	2000      	movs	r0, #0
 8009392:	e7f0      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8009394:	480e      	ldr	r0, [pc, #56]	@ (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8009396:	e7ee      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8009398:	480e      	ldr	r0, [pc, #56]	@ (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 800939a:	e7ec      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 800939c:	480b      	ldr	r0, [pc, #44]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800939e:	e7ea      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 80093a0:	2000      	movs	r0, #0
 80093a2:	e7e8      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 80093a4:	480a      	ldr	r0, [pc, #40]	@ (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 80093a6:	e7e6      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 80093a8:	480a      	ldr	r0, [pc, #40]	@ (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 80093aa:	e7e4      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 80093ac:	4807      	ldr	r0, [pc, #28]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 80093ae:	e7e2      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 80093b0:	2000      	movs	r0, #0
 80093b2:	e7e0      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 80093b4:	4806      	ldr	r0, [pc, #24]	@ (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 80093b6:	e7de      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 80093b8:	4804      	ldr	r0, [pc, #16]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 80093ba:	e7dc      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 80093bc:	2000      	movs	r0, #0
 80093be:	e7da      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 80093c0:	4803      	ldr	r0, [pc, #12]	@ (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 80093c2:	e7d8      	b.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 80093c4:	58024400 	.word	0x58024400
 80093c8:	03d09000 	.word	0x03d09000
 80093cc:	003d0900 	.word	0x003d0900
 80093d0:	016e3600 	.word	0x016e3600
 80093d4:	00bb8000 	.word	0x00bb8000

080093d8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80093d8:	b570      	push	{r4, r5, r6, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80093de:	2300      	movs	r3, #0
 80093e0:	9301      	str	r3, [sp, #4]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80093e2:	6800      	ldr	r0, [r0, #0]
 80093e4:	f002 fde4 	bl	800bfb0 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 80093e8:	4605      	mov	r5, r0
 80093ea:	b110      	cbz	r0, 80093f2 <SD_PowerON+0x1a>
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
}
 80093ec:	4628      	mov	r0, r5
 80093ee:	b002      	add	sp, #8
 80093f0:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80093f2:	6820      	ldr	r0, [r4, #0]
 80093f4:	f003 f8b4 	bl	800c560 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80093f8:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80093fc:	d007      	beq.n	800940e <SD_PowerON+0x36>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80093fe:	2301      	movs	r3, #1
 8009400:	63e3      	str	r3, [r4, #60]	@ 0x3c
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009402:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009404:	2b01      	cmp	r3, #1
 8009406:	d00b      	beq.n	8009420 <SD_PowerON+0x48>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009408:	462e      	mov	r6, r5
 800940a:	4628      	mov	r0, r5
 800940c:	e014      	b.n	8009438 <SD_PowerON+0x60>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800940e:	2300      	movs	r3, #0
 8009410:	63e3      	str	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009412:	6820      	ldr	r0, [r4, #0]
 8009414:	f002 fdcc 	bl	800bfb0 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009418:	2800      	cmp	r0, #0
 800941a:	d0f2      	beq.n	8009402 <SD_PowerON+0x2a>
      return errorstate;
 800941c:	4605      	mov	r5, r0
 800941e:	e7e5      	b.n	80093ec <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009420:	2100      	movs	r1, #0
 8009422:	6820      	ldr	r0, [r4, #0]
 8009424:	f002 fee7 	bl	800c1f6 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009428:	2800      	cmp	r0, #0
 800942a:	d0ed      	beq.n	8009408 <SD_PowerON+0x30>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800942c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8009430:	e7dc      	b.n	80093ec <SD_PowerON+0x14>
    count++;
 8009432:	9b01      	ldr	r3, [sp, #4]
 8009434:	3301      	adds	r3, #1
 8009436:	9301      	str	r3, [sp, #4]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009438:	9a01      	ldr	r2, [sp, #4]
 800943a:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800943e:	429a      	cmp	r2, r3
 8009440:	d813      	bhi.n	800946a <SD_PowerON+0x92>
 8009442:	b996      	cbnz	r6, 800946a <SD_PowerON+0x92>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009444:	2100      	movs	r1, #0
 8009446:	6820      	ldr	r0, [r4, #0]
 8009448:	f002 fed5 	bl	800c1f6 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800944c:	b9d0      	cbnz	r0, 8009484 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800944e:	4912      	ldr	r1, [pc, #72]	@ (8009498 <SD_PowerON+0xc0>)
 8009450:	6820      	ldr	r0, [r4, #0]
 8009452:	f002 ffd1 	bl	800c3f8 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009456:	4606      	mov	r6, r0
 8009458:	b9b0      	cbnz	r0, 8009488 <SD_PowerON+0xb0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800945a:	2100      	movs	r1, #0
 800945c:	6820      	ldr	r0, [r4, #0]
 800945e:	f002 fd92 	bl	800bf86 <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009462:	0fc3      	lsrs	r3, r0, #31
 8009464:	d0e5      	beq.n	8009432 <SD_PowerON+0x5a>
 8009466:	461e      	mov	r6, r3
 8009468:	e7e3      	b.n	8009432 <SD_PowerON+0x5a>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800946a:	9a01      	ldr	r2, [sp, #4]
 800946c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8009470:	429a      	cmp	r2, r3
 8009472:	d80c      	bhi.n	800948e <SD_PowerON+0xb6>
  hsd->SdCard.CardType = CARD_SDSC;
 8009474:	2300      	movs	r3, #0
 8009476:	63a3      	str	r3, [r4, #56]	@ 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009478:	f010 4380 	ands.w	r3, r0, #1073741824	@ 0x40000000
 800947c:	d00a      	beq.n	8009494 <SD_PowerON+0xbc>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800947e:	2301      	movs	r3, #1
 8009480:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009482:	e7b3      	b.n	80093ec <SD_PowerON+0x14>
      return errorstate;
 8009484:	4605      	mov	r5, r0
 8009486:	e7b1      	b.n	80093ec <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009488:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800948c:	e7ae      	b.n	80093ec <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800948e:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 8009492:	e7ab      	b.n	80093ec <SD_PowerON+0x14>
  return HAL_SD_ERROR_NONE;
 8009494:	461d      	mov	r5, r3
 8009496:	e7a9      	b.n	80093ec <SD_PowerON+0x14>
 8009498:	c1100000 	.word	0xc1100000

0800949c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800949c:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800949e:	6a44      	ldr	r4, [r0, #36]	@ 0x24

  if (hsd->RxXferSize >= 32U)
 80094a0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80094a2:	2b1f      	cmp	r3, #31
 80094a4:	d815      	bhi.n	80094d2 <SD_Read_IT+0x36>
    }

    hsd->pRxBuffPtr = tmp;
    hsd->RxXferSize -= 32U;
  }
}
 80094a6:	bd70      	pop	{r4, r5, r6, pc}
      data = SDMMC_ReadFIFO(hsd->Instance);
 80094a8:	6830      	ldr	r0, [r6, #0]
 80094aa:	f002 fd45 	bl	800bf38 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 80094ae:	7020      	strb	r0, [r4, #0]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80094b0:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80094b4:	7063      	strb	r3, [r4, #1]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80094b6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80094ba:	70a3      	strb	r3, [r4, #2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80094bc:	0e00      	lsrs	r0, r0, #24
 80094be:	70e0      	strb	r0, [r4, #3]
      tmp++;
 80094c0:	3404      	adds	r4, #4
    for (count = 0U; count < 8U; count++)
 80094c2:	3501      	adds	r5, #1
 80094c4:	2d07      	cmp	r5, #7
 80094c6:	d9ef      	bls.n	80094a8 <SD_Read_IT+0xc>
    hsd->pRxBuffPtr = tmp;
 80094c8:	6274      	str	r4, [r6, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 80094ca:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80094cc:	3b20      	subs	r3, #32
 80094ce:	62b3      	str	r3, [r6, #40]	@ 0x28
}
 80094d0:	e7e9      	b.n	80094a6 <SD_Read_IT+0xa>
 80094d2:	4606      	mov	r6, r0
    for (count = 0U; count < 8U; count++)
 80094d4:	2500      	movs	r5, #0
 80094d6:	e7f5      	b.n	80094c4 <SD_Read_IT+0x28>

080094d8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80094d8:	b570      	push	{r4, r5, r6, lr}
 80094da:	b082      	sub	sp, #8
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80094dc:	69c4      	ldr	r4, [r0, #28]

  if (hsd->TxXferSize >= 32U)
 80094de:	6a03      	ldr	r3, [r0, #32]
 80094e0:	2b1f      	cmp	r3, #31
 80094e2:	d81c      	bhi.n	800951e <SD_Write_IT+0x46>
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize -= 32U;
  }
}
 80094e4:	b002      	add	sp, #8
 80094e6:	bd70      	pop	{r4, r5, r6, pc}
      data = (uint32_t)(*tmp);
 80094e8:	7823      	ldrb	r3, [r4, #0]
 80094ea:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 80094ec:	7862      	ldrb	r2, [r4, #1]
 80094ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80094f2:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 80094f4:	78a2      	ldrb	r2, [r4, #2]
 80094f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094fa:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 80094fc:	78e2      	ldrb	r2, [r4, #3]
 80094fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009502:	9301      	str	r3, [sp, #4]
      tmp++;
 8009504:	3404      	adds	r4, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009506:	a901      	add	r1, sp, #4
 8009508:	6830      	ldr	r0, [r6, #0]
 800950a:	f002 fd18 	bl	800bf3e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800950e:	3501      	adds	r5, #1
 8009510:	2d07      	cmp	r5, #7
 8009512:	d9e9      	bls.n	80094e8 <SD_Write_IT+0x10>
    hsd->pTxBuffPtr = tmp;
 8009514:	61f4      	str	r4, [r6, #28]
    hsd->TxXferSize -= 32U;
 8009516:	6a33      	ldr	r3, [r6, #32]
 8009518:	3b20      	subs	r3, #32
 800951a:	6233      	str	r3, [r6, #32]
}
 800951c:	e7e2      	b.n	80094e4 <SD_Write_IT+0xc>
 800951e:	4606      	mov	r6, r0
    for (count = 0U; count < 8U; count++)
 8009520:	2500      	movs	r5, #0
 8009522:	e7f5      	b.n	8009510 <SD_Write_IT+0x38>

08009524 <SD_SendSDStatus>:
{
 8009524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009526:	b087      	sub	sp, #28
 8009528:	4605      	mov	r5, r0
 800952a:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 800952c:	f7fa f8d6 	bl	80036dc <HAL_GetTick>
 8009530:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009532:	2100      	movs	r1, #0
 8009534:	6828      	ldr	r0, [r5, #0]
 8009536:	f002 fd26 	bl	800bf86 <SDMMC_GetResponse>
 800953a:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 800953e:	d164      	bne.n	800960a <SD_SendSDStatus+0xe6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009540:	2140      	movs	r1, #64	@ 0x40
 8009542:	6828      	ldr	r0, [r5, #0]
 8009544:	f002 fdf8 	bl	800c138 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009548:	4603      	mov	r3, r0
 800954a:	b110      	cbz	r0, 8009552 <SD_SendSDStatus+0x2e>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800954c:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 800954e:	636a      	str	r2, [r5, #52]	@ 0x34
    return errorstate;
 8009550:	e05d      	b.n	800960e <SD_SendSDStatus+0xea>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009552:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8009554:	0409      	lsls	r1, r1, #16
 8009556:	6828      	ldr	r0, [r5, #0]
 8009558:	f002 fe4d 	bl	800c1f6 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800955c:	4603      	mov	r3, r0
 800955e:	b110      	cbz	r0, 8009566 <SD_SendSDStatus+0x42>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009560:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8009562:	636a      	str	r2, [r5, #52]	@ 0x34
    return errorstate;
 8009564:	e053      	b.n	800960e <SD_SendSDStatus+0xea>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009566:	f04f 33ff 	mov.w	r3, #4294967295
 800956a:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 800956c:	2340      	movs	r3, #64	@ 0x40
 800956e:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009570:	2360      	movs	r3, #96	@ 0x60
 8009572:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009574:	2302      	movs	r3, #2
 8009576:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009578:	2300      	movs	r3, #0
 800957a:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800957c:	2301      	movs	r3, #1
 800957e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009580:	4669      	mov	r1, sp
 8009582:	6828      	ldr	r0, [r5, #0]
 8009584:	f002 fd02 	bl	800bf8c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009588:	6828      	ldr	r0, [r5, #0]
 800958a:	f002 fe98 	bl	800c2be <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 800958e:	4603      	mov	r3, r0
 8009590:	b180      	cbz	r0, 80095b4 <SD_SendSDStatus+0x90>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009592:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8009594:	636a      	str	r2, [r5, #52]	@ 0x34
    return errorstate;
 8009596:	e03a      	b.n	800960e <SD_SendSDStatus+0xea>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009598:	6828      	ldr	r0, [r5, #0]
 800959a:	f002 fccd 	bl	800bf38 <SDMMC_ReadFIFO>
 800959e:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 80095a2:	3401      	adds	r4, #1
 80095a4:	2c07      	cmp	r4, #7
 80095a6:	d9f7      	bls.n	8009598 <SD_SendSDStatus+0x74>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80095a8:	f7fa f898 	bl	80036dc <HAL_GetTick>
 80095ac:	1bc0      	subs	r0, r0, r7
 80095ae:	f1b0 3fff 	cmp.w	r0, #4294967295
 80095b2:	d02f      	beq.n	8009614 <SD_SendSDStatus+0xf0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 80095b8:	f414 7495 	ands.w	r4, r4, #298	@ 0x12a
 80095bc:	d104      	bne.n	80095c8 <SD_SendSDStatus+0xa4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80095be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095c0:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80095c4:	d0f0      	beq.n	80095a8 <SD_SendSDStatus+0x84>
 80095c6:	e7ed      	b.n	80095a4 <SD_SendSDStatus+0x80>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80095c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095ca:	f012 0f08 	tst.w	r2, #8
 80095ce:	d124      	bne.n	800961a <SD_SendSDStatus+0xf6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80095d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095d2:	f012 0f02 	tst.w	r2, #2
 80095d6:	d122      	bne.n	800961e <SD_SendSDStatus+0xfa>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80095d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095da:	f013 0f20 	tst.w	r3, #32
 80095de:	d120      	bne.n	8009622 <SD_SendSDStatus+0xfe>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80095e0:	6828      	ldr	r0, [r5, #0]
 80095e2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80095e4:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 80095e8:	d00c      	beq.n	8009604 <SD_SendSDStatus+0xe0>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80095ea:	f002 fca5 	bl	800bf38 <SDMMC_ReadFIFO>
 80095ee:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80095f2:	f7fa f873 	bl	80036dc <HAL_GetTick>
 80095f6:	1bc0      	subs	r0, r0, r7
 80095f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80095fc:	d1f0      	bne.n	80095e0 <SD_SendSDStatus+0xbc>
      return HAL_SD_ERROR_TIMEOUT;
 80095fe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009602:	e004      	b.n	800960e <SD_SendSDStatus+0xea>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009604:	4a08      	ldr	r2, [pc, #32]	@ (8009628 <SD_SendSDStatus+0x104>)
 8009606:	6382      	str	r2, [r0, #56]	@ 0x38
  return HAL_SD_ERROR_NONE;
 8009608:	e001      	b.n	800960e <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800960a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
}
 800960e:	4618      	mov	r0, r3
 8009610:	b007      	add	sp, #28
 8009612:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_SD_ERROR_TIMEOUT;
 8009614:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009618:	e7f9      	b.n	800960e <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800961a:	2308      	movs	r3, #8
 800961c:	e7f7      	b.n	800960e <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800961e:	2302      	movs	r3, #2
 8009620:	e7f5      	b.n	800960e <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_RX_OVERRUN;
 8009622:	2320      	movs	r3, #32
 8009624:	e7f3      	b.n	800960e <SD_SendSDStatus+0xea>
 8009626:	bf00      	nop
 8009628:	18000f3a 	.word	0x18000f3a

0800962c <SD_FindSCR>:
{
 800962c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800962e:	b089      	sub	sp, #36	@ 0x24
 8009630:	4604      	mov	r4, r0
 8009632:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8009634:	f7fa f852 	bl	80036dc <HAL_GetTick>
 8009638:	4605      	mov	r5, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 800963a:	2300      	movs	r3, #0
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009640:	2108      	movs	r1, #8
 8009642:	6820      	ldr	r0, [r4, #0]
 8009644:	f002 fd78 	bl	800c138 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009648:	4606      	mov	r6, r0
 800964a:	b110      	cbz	r0, 8009652 <SD_FindSCR+0x26>
}
 800964c:	4630      	mov	r0, r6
 800964e:	b009      	add	sp, #36	@ 0x24
 8009650:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009652:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009654:	0409      	lsls	r1, r1, #16
 8009656:	6820      	ldr	r0, [r4, #0]
 8009658:	f002 fdcd 	bl	800c1f6 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800965c:	4606      	mov	r6, r0
 800965e:	2800      	cmp	r0, #0
 8009660:	d1f4      	bne.n	800964c <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009662:	f04f 33ff 	mov.w	r3, #4294967295
 8009666:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8009668:	2308      	movs	r3, #8
 800966a:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800966c:	2330      	movs	r3, #48	@ 0x30
 800966e:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009670:	2302      	movs	r3, #2
 8009672:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009674:	2300      	movs	r3, #0
 8009676:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009678:	2301      	movs	r3, #1
 800967a:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800967c:	a902      	add	r1, sp, #8
 800967e:	6820      	ldr	r0, [r4, #0]
 8009680:	f002 fc84 	bl	800bf8c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009684:	6820      	ldr	r0, [r4, #0]
 8009686:	f002 fde8 	bl	800c25a <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800968a:	4606      	mov	r6, r0
 800968c:	b130      	cbz	r0, 800969c <SD_FindSCR+0x70>
 800968e:	e7dd      	b.n	800964c <SD_FindSCR+0x20>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009690:	f7fa f824 	bl	80036dc <HAL_GetTick>
 8009694:	1b43      	subs	r3, r0, r5
 8009696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800969a:	d046      	beq.n	800972a <SD_FindSCR+0xfe>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800969c:	6820      	ldr	r0, [r4, #0]
 800969e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80096a0:	f240 532a 	movw	r3, #1322	@ 0x52a
 80096a4:	421a      	tst	r2, r3
 80096a6:	d10e      	bne.n	80096c6 <SD_FindSCR+0x9a>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80096a8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80096aa:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80096ae:	d1ef      	bne.n	8009690 <SD_FindSCR+0x64>
 80096b0:	2e00      	cmp	r6, #0
 80096b2:	d1ed      	bne.n	8009690 <SD_FindSCR+0x64>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80096b4:	f002 fc40 	bl	800bf38 <SDMMC_ReadFIFO>
 80096b8:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80096ba:	6820      	ldr	r0, [r4, #0]
 80096bc:	f002 fc3c 	bl	800bf38 <SDMMC_ReadFIFO>
 80096c0:	9001      	str	r0, [sp, #4]
      index++;
 80096c2:	3601      	adds	r6, #1
 80096c4:	e7e4      	b.n	8009690 <SD_FindSCR+0x64>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80096c6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80096c8:	f013 0f08 	tst.w	r3, #8
 80096cc:	d124      	bne.n	8009718 <SD_FindSCR+0xec>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80096ce:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80096d0:	f013 0f02 	tst.w	r3, #2
 80096d4:	d123      	bne.n	800971e <SD_FindSCR+0xf2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80096d6:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 80096d8:	f016 0620 	ands.w	r6, r6, #32
 80096dc:	d122      	bne.n	8009724 <SD_FindSCR+0xf8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80096de:	4b14      	ldr	r3, [pc, #80]	@ (8009730 <SD_FindSCR+0x104>)
 80096e0:	6383      	str	r3, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80096e2:	9a01      	ldr	r2, [sp, #4]
 80096e4:	0213      	lsls	r3, r2, #8
 80096e6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80096ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80096ee:	0a11      	lsrs	r1, r2, #8
 80096f0:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80096f4:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80096f6:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80096fa:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80096fc:	9a00      	ldr	r2, [sp, #0]
 80096fe:	0213      	lsls	r3, r2, #8
 8009700:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009704:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009708:	0a11      	lsrs	r1, r2, #8
 800970a:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800970e:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009710:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009714:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8009716:	e799      	b.n	800964c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009718:	2608      	movs	r6, #8
 800971a:	6386      	str	r6, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800971c:	e796      	b.n	800964c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800971e:	2602      	movs	r6, #2
 8009720:	6386      	str	r6, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009722:	e793      	b.n	800964c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009724:	2620      	movs	r6, #32
 8009726:	6386      	str	r6, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8009728:	e790      	b.n	800964c <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 800972a:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 800972e:	e78d      	b.n	800964c <SD_FindSCR+0x20>
 8009730:	18000f3a 	.word	0x18000f3a

08009734 <SD_WideBus_Enable>:
{
 8009734:	b510      	push	{r4, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 800973a:	2100      	movs	r1, #0
 800973c:	9100      	str	r1, [sp, #0]
 800973e:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009740:	6800      	ldr	r0, [r0, #0]
 8009742:	f002 fc20 	bl	800bf86 <SDMMC_GetResponse>
 8009746:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 800974a:	d113      	bne.n	8009774 <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 800974c:	4669      	mov	r1, sp
 800974e:	4620      	mov	r0, r4
 8009750:	f7ff ff6c 	bl	800962c <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009754:	b980      	cbnz	r0, 8009778 <SD_WideBus_Enable+0x44>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009756:	9b01      	ldr	r3, [sp, #4]
 8009758:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800975c:	d00e      	beq.n	800977c <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800975e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009760:	0409      	lsls	r1, r1, #16
 8009762:	6820      	ldr	r0, [r4, #0]
 8009764:	f002 fd47 	bl	800c1f6 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009768:	b930      	cbnz	r0, 8009778 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800976a:	2102      	movs	r1, #2
 800976c:	6820      	ldr	r0, [r4, #0]
 800976e:	f002 fd5b 	bl	800c228 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009772:	e001      	b.n	8009778 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009774:	f44f 6000 	mov.w	r0, #2048	@ 0x800
}
 8009778:	b002      	add	sp, #8
 800977a:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800977c:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8009780:	e7fa      	b.n	8009778 <SD_WideBus_Enable+0x44>

08009782 <SD_WideBus_Disable>:
{
 8009782:	b510      	push	{r4, lr}
 8009784:	b082      	sub	sp, #8
 8009786:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 8009788:	2100      	movs	r1, #0
 800978a:	9100      	str	r1, [sp, #0]
 800978c:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800978e:	6800      	ldr	r0, [r0, #0]
 8009790:	f002 fbf9 	bl	800bf86 <SDMMC_GetResponse>
 8009794:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 8009798:	d113      	bne.n	80097c2 <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 800979a:	4669      	mov	r1, sp
 800979c:	4620      	mov	r0, r4
 800979e:	f7ff ff45 	bl	800962c <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80097a2:	b980      	cbnz	r0, 80097c6 <SD_WideBus_Disable+0x44>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80097a4:	9b01      	ldr	r3, [sp, #4]
 80097a6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80097aa:	d00e      	beq.n	80097ca <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80097ac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80097ae:	0409      	lsls	r1, r1, #16
 80097b0:	6820      	ldr	r0, [r4, #0]
 80097b2:	f002 fd20 	bl	800c1f6 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80097b6:	b930      	cbnz	r0, 80097c6 <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80097b8:	2100      	movs	r1, #0
 80097ba:	6820      	ldr	r0, [r4, #0]
 80097bc:	f002 fd34 	bl	800c228 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 80097c0:	e001      	b.n	80097c6 <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80097c2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
}
 80097c6:	b002      	add	sp, #8
 80097c8:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80097ca:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80097ce:	e7fa      	b.n	80097c6 <SD_WideBus_Disable+0x44>

080097d0 <SD_SendStatus>:
{
 80097d0:	b570      	push	{r4, r5, r6, lr}
  if (pCardStatus == NULL)
 80097d2:	b181      	cbz	r1, 80097f6 <SD_SendStatus+0x26>
 80097d4:	4604      	mov	r4, r0
 80097d6:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80097d8:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80097da:	0409      	lsls	r1, r1, #16
 80097dc:	6800      	ldr	r0, [r0, #0]
 80097de:	f002 fd55 	bl	800c28c <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 80097e2:	4605      	mov	r5, r0
 80097e4:	b108      	cbz	r0, 80097ea <SD_SendStatus+0x1a>
}
 80097e6:	4628      	mov	r0, r5
 80097e8:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80097ea:	2100      	movs	r1, #0
 80097ec:	6820      	ldr	r0, [r4, #0]
 80097ee:	f002 fbca 	bl	800bf86 <SDMMC_GetResponse>
 80097f2:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 80097f4:	e7f7      	b.n	80097e6 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 80097f6:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
 80097fa:	e7f4      	b.n	80097e6 <SD_SendStatus+0x16>

080097fc <HAL_SD_TxCpltCallback>:
}
 80097fc:	4770      	bx	lr

080097fe <HAL_SD_RxCpltCallback>:
}
 80097fe:	4770      	bx	lr

08009800 <HAL_SD_ErrorCallback>:
}
 8009800:	4770      	bx	lr
	...

08009804 <HAL_SD_GetCardCSD>:
{
 8009804:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009806:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8009808:	0f92      	lsrs	r2, r2, #30
 800980a:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800980c:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800980e:	f3c2 6283 	ubfx	r2, r2, #26, #4
 8009812:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009814:	f890 205f 	ldrb.w	r2, [r0, #95]	@ 0x5f
 8009818:	f002 0203 	and.w	r2, r2, #3
 800981c:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800981e:	f890 205e 	ldrb.w	r2, [r0, #94]	@ 0x5e
 8009822:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009824:	f890 205d 	ldrb.w	r2, [r0, #93]	@ 0x5d
 8009828:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800982a:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
 800982e:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009830:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8009832:	0d12      	lsrs	r2, r2, #20
 8009834:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009836:	f8b0 2062 	ldrh.w	r2, [r0, #98]	@ 0x62
 800983a:	f002 020f 	and.w	r2, r2, #15
 800983e:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009840:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8009842:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8009846:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009848:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 800984a:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800984e:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009850:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8009852:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8009856:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009858:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 800985a:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800985e:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009860:	2200      	movs	r2, #0
 8009862:	734a      	strb	r2, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 8009864:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8009866:	2a00      	cmp	r2, #0
 8009868:	f040 8086 	bne.w	8009978 <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800986c:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 800986e:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8009872:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 8009876:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8009878:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 800987c:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800987e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009880:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8009884:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009886:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 800988a:	f002 0207 	and.w	r2, r2, #7
 800988e:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009890:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009892:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8009896:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009898:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800989a:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800989e:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80098a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80098a2:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 80098a6:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80098a8:	690a      	ldr	r2, [r1, #16]
 80098aa:	3201      	adds	r2, #1
 80098ac:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80098ae:	7e08      	ldrb	r0, [r1, #24]
 80098b0:	f000 0007 	and.w	r0, r0, #7
 80098b4:	3002      	adds	r0, #2
 80098b6:	4082      	lsls	r2, r0
 80098b8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80098ba:	f891 c008 	ldrb.w	ip, [r1, #8]
 80098be:	f00c 0c0f 	and.w	ip, ip, #15
 80098c2:	2001      	movs	r0, #1
 80098c4:	fa00 f00c 	lsl.w	r0, r0, ip
 80098c8:	64d8      	str	r0, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80098ca:	0a40      	lsrs	r0, r0, #9
 80098cc:	fb00 f202 	mul.w	r2, r0, r2
 80098d0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80098d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098d6:	655a      	str	r2, [r3, #84]	@ 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80098d8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80098da:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80098de:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80098e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80098e2:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 80098e6:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80098e8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80098ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80098ee:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80098f0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80098f2:	0fd2      	lsrs	r2, r2, #31
 80098f4:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80098f6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80098f8:	f3c2 7241 	ubfx	r2, r2, #29, #2
 80098fc:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80098fe:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009900:	f3c2 6282 	ubfx	r2, r2, #26, #3
 8009904:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009906:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009908:	f3c2 5283 	ubfx	r2, r2, #22, #4
 800990c:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800990e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009910:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8009914:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8009918:	2000      	movs	r0, #0
 800991a:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800991e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009922:	f002 0201 	and.w	r2, r2, #1
 8009926:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800992a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800992c:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8009930:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009934:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009936:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800993a:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800993e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009940:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8009944:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009948:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800994a:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800994e:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009952:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009954:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8009958:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800995c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800995e:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8009962:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009966:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009968:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800996c:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8009970:	2301      	movs	r3, #1
 8009972:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
}
 8009976:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009978:	2a01      	cmp	r2, #1
 800997a:	d111      	bne.n	80099a0 <HAL_SD_GetCardCSD+0x19c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800997c:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 800997e:	0412      	lsls	r2, r2, #16
 8009980:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8009984:	f8b0 0066 	ldrh.w	r0, [r0, #102]	@ 0x66
 8009988:	4302      	orrs	r2, r0
 800998a:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800998c:	690a      	ldr	r2, [r1, #16]
 800998e:	3201      	adds	r2, #1
 8009990:	0292      	lsls	r2, r2, #10
 8009992:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009994:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8009996:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800999a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800999c:	655a      	str	r2, [r3, #84]	@ 0x54
 800999e:	e79b      	b.n	80098d8 <HAL_SD_GetCardCSD+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099a0:	6802      	ldr	r2, [r0, #0]
 80099a2:	4905      	ldr	r1, [pc, #20]	@ (80099b8 <HAL_SD_GetCardCSD+0x1b4>)
 80099a4:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099a6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80099a8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80099ac:	6342      	str	r2, [r0, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80099ae:	2001      	movs	r0, #1
 80099b0:	f883 0030 	strb.w	r0, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	1fe00fff 	.word	0x1fe00fff

080099bc <SD_InitCard>:
{
 80099bc:	b530      	push	{r4, r5, lr}
 80099be:	b08d      	sub	sp, #52	@ 0x34
 80099c0:	4604      	mov	r4, r0
  uint16_t sd_rca = 0U;
 80099c2:	2300      	movs	r3, #0
 80099c4:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tickstart = HAL_GetTick();
 80099c8:	f7f9 fe88 	bl	80036dc <HAL_GetTick>
 80099cc:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80099ce:	6820      	ldr	r0, [r4, #0]
 80099d0:	f002 fac0 	bl	800bf54 <SDMMC_GetPowerState>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d067      	beq.n	8009aa8 <SD_InitCard+0xec>
  if (hsd->SdCard.CardType != CARD_SECURED)
 80099d8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80099da:	2b03      	cmp	r3, #3
 80099dc:	d117      	bne.n	8009a0e <SD_InitCard+0x52>
  if (hsd->SdCard.CardType != CARD_SECURED)
 80099de:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	d02f      	beq.n	8009a44 <SD_InitCard+0x88>
    while (sd_rca == 0U)
 80099e4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80099e8:	bb63      	cbnz	r3, 8009a44 <SD_InitCard+0x88>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80099ea:	f10d 0102 	add.w	r1, sp, #2
 80099ee:	6820      	ldr	r0, [r4, #0]
 80099f0:	f002 fd6a 	bl	800c4c8 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 80099f4:	4603      	mov	r3, r0
 80099f6:	2800      	cmp	r0, #0
 80099f8:	d158      	bne.n	8009aac <SD_InitCard+0xf0>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80099fa:	f7f9 fe6f 	bl	80036dc <HAL_GetTick>
 80099fe:	1b43      	subs	r3, r0, r5
 8009a00:	f241 3287 	movw	r2, #4999	@ 0x1387
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d9ed      	bls.n	80099e4 <SD_InitCard+0x28>
        return HAL_SD_ERROR_TIMEOUT;
 8009a08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009a0c:	e04e      	b.n	8009aac <SD_InitCard+0xf0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009a0e:	6820      	ldr	r0, [r4, #0]
 8009a10:	f002 fc9e 	bl	800c350 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a14:	4603      	mov	r3, r0
 8009a16:	2800      	cmp	r0, #0
 8009a18:	d148      	bne.n	8009aac <SD_InitCard+0xf0>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	6820      	ldr	r0, [r4, #0]
 8009a1e:	f002 fab2 	bl	800bf86 <SDMMC_GetResponse>
 8009a22:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009a24:	2104      	movs	r1, #4
 8009a26:	6820      	ldr	r0, [r4, #0]
 8009a28:	f002 faad 	bl	800bf86 <SDMMC_GetResponse>
 8009a2c:	6720      	str	r0, [r4, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009a2e:	2108      	movs	r1, #8
 8009a30:	6820      	ldr	r0, [r4, #0]
 8009a32:	f002 faa8 	bl	800bf86 <SDMMC_GetResponse>
 8009a36:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009a38:	210c      	movs	r1, #12
 8009a3a:	6820      	ldr	r0, [r4, #0]
 8009a3c:	f002 faa3 	bl	800bf86 <SDMMC_GetResponse>
 8009a40:	67a0      	str	r0, [r4, #120]	@ 0x78
 8009a42:	e7cc      	b.n	80099de <SD_InitCard+0x22>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009a44:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009a46:	2b03      	cmp	r3, #3
 8009a48:	d01c      	beq.n	8009a84 <SD_InitCard+0xc8>
    hsd->SdCard.RelCardAdd = sd_rca;
 8009a4a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8009a4e:	6461      	str	r1, [r4, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a50:	0409      	lsls	r1, r1, #16
 8009a52:	6820      	ldr	r0, [r4, #0]
 8009a54:	f002 fc92 	bl	800c37c <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a58:	4603      	mov	r3, r0
 8009a5a:	bb38      	cbnz	r0, 8009aac <SD_InitCard+0xf0>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	6820      	ldr	r0, [r4, #0]
 8009a60:	f002 fa91 	bl	800bf86 <SDMMC_GetResponse>
 8009a64:	65e0      	str	r0, [r4, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009a66:	2104      	movs	r1, #4
 8009a68:	6820      	ldr	r0, [r4, #0]
 8009a6a:	f002 fa8c 	bl	800bf86 <SDMMC_GetResponse>
 8009a6e:	6620      	str	r0, [r4, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009a70:	2108      	movs	r1, #8
 8009a72:	6820      	ldr	r0, [r4, #0]
 8009a74:	f002 fa87 	bl	800bf86 <SDMMC_GetResponse>
 8009a78:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009a7a:	210c      	movs	r1, #12
 8009a7c:	6820      	ldr	r0, [r4, #0]
 8009a7e:	f002 fa82 	bl	800bf86 <SDMMC_GetResponse>
 8009a82:	66a0      	str	r0, [r4, #104]	@ 0x68
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009a84:	2104      	movs	r1, #4
 8009a86:	6820      	ldr	r0, [r4, #0]
 8009a88:	f002 fa7d 	bl	800bf86 <SDMMC_GetResponse>
 8009a8c:	0d00      	lsrs	r0, r0, #20
 8009a8e:	6420      	str	r0, [r4, #64]	@ 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009a90:	a901      	add	r1, sp, #4
 8009a92:	4620      	mov	r0, r4
 8009a94:	f7ff feb6 	bl	8009804 <HAL_SD_GetCardCSD>
 8009a98:	b958      	cbnz	r0, 8009ab2 <SD_InitCard+0xf6>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009a9a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009a9c:	0409      	lsls	r1, r1, #16
 8009a9e:	6820      	ldr	r0, [r4, #0]
 8009aa0:	f002 fb90 	bl	800c1c4 <SDMMC_CmdSelDesel>
 8009aa4:	4603      	mov	r3, r0
  if (errorstate != HAL_SD_ERROR_NONE)
 8009aa6:	e001      	b.n	8009aac <SD_InitCard+0xf0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009aa8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	b00d      	add	sp, #52	@ 0x34
 8009ab0:	bd30      	pop	{r4, r5, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ab2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009ab6:	e7f9      	b.n	8009aac <SD_InitCard+0xf0>

08009ab8 <HAL_SD_InitCard>:
{
 8009ab8:	b570      	push	{r4, r5, r6, lr}
 8009aba:	b088      	sub	sp, #32
 8009abc:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	9303      	str	r3, [sp, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009ac2:	9304      	str	r3, [sp, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009ac4:	9305      	str	r3, [sp, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009ac6:	9306      	str	r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009ac8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009acc:	f7ff f97a 	bl	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 8009ad0:	b938      	cbnz	r0, 8009ae2 <HAL_SD_InitCard+0x2a>
    hsd->State = HAL_SD_STATE_READY;
 8009ad2:	2001      	movs	r0, #1
 8009ad4:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009ad8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009adc:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8009ade:	b008      	add	sp, #32
 8009ae0:	bd70      	pop	{r4, r5, r6, pc}
 8009ae2:	4606      	mov	r6, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009ae4:	0a05      	lsrs	r5, r0, #8
 8009ae6:	4b22      	ldr	r3, [pc, #136]	@ (8009b70 <HAL_SD_InitCard+0xb8>)
 8009ae8:	fba3 3505 	umull	r3, r5, r3, r5
 8009aec:	092d      	lsrs	r5, r5, #4
 8009aee:	9507      	str	r5, [sp, #28]
  (void)SDMMC_Init(hsd->Instance, Init);
 8009af0:	ab08      	add	r3, sp, #32
 8009af2:	e913 0003 	ldmdb	r3, {r0, r1}
 8009af6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009afa:	ab03      	add	r3, sp, #12
 8009afc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009afe:	6820      	ldr	r0, [r4, #0]
 8009b00:	f002 fa02 	bl	800bf08 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009b04:	6820      	ldr	r0, [r4, #0]
 8009b06:	f002 fa1f 	bl	800bf48 <SDMMC_PowerState_ON>
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009b0a:	006d      	lsls	r5, r5, #1
 8009b0c:	fbb6 f6f5 	udiv	r6, r6, r5
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009b10:	4818      	ldr	r0, [pc, #96]	@ (8009b74 <HAL_SD_InitCard+0xbc>)
 8009b12:	fbb0 f0f6 	udiv	r0, r0, r6
 8009b16:	3001      	adds	r0, #1
 8009b18:	f7f9 fde6 	bl	80036e8 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f7ff fc5b 	bl	80093d8 <SD_PowerON>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b22:	4602      	mov	r2, r0
 8009b24:	b130      	cbz	r0, 8009b34 <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 8009b26:	2001      	movs	r0, #1
 8009b28:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009b2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8009b32:	e7d4      	b.n	8009ade <HAL_SD_InitCard+0x26>
  errorstate = SD_InitCard(hsd);
 8009b34:	4620      	mov	r0, r4
 8009b36:	f7ff ff41 	bl	80099bc <SD_InitCard>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	b130      	cbz	r0, 8009b4c <HAL_SD_InitCard+0x94>
    hsd->State = HAL_SD_STATE_READY;
 8009b3e:	2001      	movs	r0, #1
 8009b40:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009b44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b46:	4313      	orrs	r3, r2
 8009b48:	6363      	str	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8009b4a:	e7c8      	b.n	8009ade <HAL_SD_InitCard+0x26>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009b4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009b50:	6820      	ldr	r0, [r4, #0]
 8009b52:	f002 faf1 	bl	800c138 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b56:	b908      	cbnz	r0, 8009b5c <HAL_SD_InitCard+0xa4>
  return HAL_OK;
 8009b58:	2000      	movs	r0, #0
 8009b5a:	e7c0      	b.n	8009ade <HAL_SD_InitCard+0x26>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	4906      	ldr	r1, [pc, #24]	@ (8009b78 <HAL_SD_InitCard+0xc0>)
 8009b60:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009b62:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b64:	4303      	orrs	r3, r0
 8009b66:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009b68:	2001      	movs	r0, #1
 8009b6a:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
    return HAL_ERROR;
 8009b6e:	e7b6      	b.n	8009ade <HAL_SD_InitCard+0x26>
 8009b70:	014f8b59 	.word	0x014f8b59
 8009b74:	00012110 	.word	0x00012110
 8009b78:	1fe00fff 	.word	0x1fe00fff

08009b7c <HAL_SD_GetCardStatus>:
{
 8009b7c:	b530      	push	{r4, r5, lr}
 8009b7e:	b091      	sub	sp, #68	@ 0x44
  if (hsd->State == HAL_SD_STATE_BUSY)
 8009b80:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	d059      	beq.n	8009c3e <HAL_SD_GetCardStatus+0xc2>
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	460d      	mov	r5, r1
  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009b8e:	4669      	mov	r1, sp
 8009b90:	f7ff fcc8 	bl	8009524 <SD_SendSDStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b94:	b1b8      	cbz	r0, 8009bc6 <HAL_SD_GetCardStatus+0x4a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	492b      	ldr	r1, [pc, #172]	@ (8009c48 <HAL_SD_GetCardStatus+0xcc>)
 8009b9a:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009b9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b9e:	4303      	orrs	r3, r0
 8009ba0:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009ba2:	2501      	movs	r5, #1
 8009ba4:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009ba8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009bac:	6820      	ldr	r0, [r4, #0]
 8009bae:	f002 fac3 	bl	800c138 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d044      	beq.n	8009c40 <HAL_SD_GetCardStatus+0xc4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bb6:	6822      	ldr	r2, [r4, #0]
 8009bb8:	4923      	ldr	r1, [pc, #140]	@ (8009c48 <HAL_SD_GetCardStatus+0xcc>)
 8009bba:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8009bbc:	6360      	str	r0, [r4, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009bbe:	2501      	movs	r5, #1
 8009bc0:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
    status = HAL_ERROR;
 8009bc4:	e03c      	b.n	8009c40 <HAL_SD_GetCardStatus+0xc4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009bc6:	9a00      	ldr	r2, [sp, #0]
 8009bc8:	f3c2 1381 	ubfx	r3, r2, #6, #2
 8009bcc:	702b      	strb	r3, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009bce:	f3c2 1340 	ubfx	r3, r2, #5, #1
 8009bd2:	706b      	strb	r3, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009bd4:	0a13      	lsrs	r3, r2, #8
 8009bd6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009bda:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	806b      	strh	r3, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009be2:	9a01      	ldr	r2, [sp, #4]
 8009be4:	0213      	lsls	r3, r2, #8
 8009be6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009bea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009bee:	0a11      	lsrs	r1, r2, #8
 8009bf0:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009bf4:	430b      	orrs	r3, r1
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009bf6:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009bfa:	606b      	str	r3, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009bfc:	9b02      	ldr	r3, [sp, #8]
 8009bfe:	b2da      	uxtb	r2, r3
 8009c00:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009c02:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009c06:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009c08:	f3c3 5203 	ubfx	r2, r3, #20, #4
 8009c0c:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009c0e:	0c1b      	lsrs	r3, r3, #16
 8009c10:	9a03      	ldr	r2, [sp, #12]
 8009c12:	b2d1      	uxtb	r1, r2
 8009c14:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009c18:	430b      	orrs	r3, r1
 8009c1a:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009c1c:	f3c2 2385 	ubfx	r3, r2, #10, #6
 8009c20:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009c22:	f3c2 2301 	ubfx	r3, r2, #8, #2
 8009c26:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009c28:	f3c2 1303 	ubfx	r3, r2, #4, #4
 8009c2c:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009c2e:	f002 020f 	and.w	r2, r2, #15
 8009c32:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009c34:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8009c38:	74ab      	strb	r3, [r5, #18]
  HAL_StatusTypeDef status = HAL_OK;
 8009c3a:	2500      	movs	r5, #0
 8009c3c:	e7b4      	b.n	8009ba8 <HAL_SD_GetCardStatus+0x2c>
    return HAL_ERROR;
 8009c3e:	2501      	movs	r5, #1
}
 8009c40:	4628      	mov	r0, r5
 8009c42:	b011      	add	sp, #68	@ 0x44
 8009c44:	bd30      	pop	{r4, r5, pc}
 8009c46:	bf00      	nop
 8009c48:	1fe00fff 	.word	0x1fe00fff

08009c4c <HAL_SD_ConfigWideBusOperation>:
{
 8009c4c:	b530      	push	{r4, r5, lr}
 8009c4e:	b089      	sub	sp, #36	@ 0x24
 8009c50:	4604      	mov	r4, r0
 8009c52:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8009c54:	2303      	movs	r3, #3
 8009c56:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009c5a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009c5c:	2b03      	cmp	r3, #3
 8009c5e:	d01c      	beq.n	8009c9a <HAL_SD_ConfigWideBusOperation+0x4e>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009c60:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8009c64:	d008      	beq.n	8009c78 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8009c66:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8009c6a:	d00a      	beq.n	8009c82 <HAL_SD_ConfigWideBusOperation+0x36>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009c6c:	b179      	cbz	r1, 8009c8e <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c6e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009c70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009c74:	6343      	str	r3, [r0, #52]	@ 0x34
 8009c76:	e014      	b.n	8009ca2 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c78:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009c7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c7e:	6343      	str	r3, [r0, #52]	@ 0x34
 8009c80:	e00f      	b.n	8009ca2 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8009c82:	f7ff fd57 	bl	8009734 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8009c86:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c88:	4303      	orrs	r3, r0
 8009c8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c8c:	e009      	b.n	8009ca2 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8009c8e:	f7ff fd78 	bl	8009782 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8009c92:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c94:	4303      	orrs	r3, r0
 8009c96:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c98:	e003      	b.n	8009ca2 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c9a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ca0:	6343      	str	r3, [r0, #52]	@ 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009ca2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009ca4:	b1b3      	cbz	r3, 8009cd4 <HAL_SD_ConfigWideBusOperation+0x88>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	4a39      	ldr	r2, [pc, #228]	@ (8009d90 <HAL_SD_ConfigWideBusOperation+0x144>)
 8009caa:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8009cac:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009cae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009cb2:	6820      	ldr	r0, [r4, #0]
 8009cb4:	f002 fa40 	bl	800c138 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cb8:	b130      	cbz	r0, 8009cc8 <HAL_SD_ConfigWideBusOperation+0x7c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	4934      	ldr	r1, [pc, #208]	@ (8009d90 <HAL_SD_ConfigWideBusOperation+0x144>)
 8009cbe:	6399      	str	r1, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009cc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009cc2:	4303      	orrs	r3, r0
 8009cc4:	6363      	str	r3, [r4, #52]	@ 0x34
    status = HAL_ERROR;
 8009cc6:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 8009cce:	4628      	mov	r0, r5
 8009cd0:	b009      	add	sp, #36	@ 0x24
 8009cd2:	bd30      	pop	{r4, r5, pc}
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009cd4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009cd8:	f7ff f874 	bl	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 8009cdc:	4602      	mov	r2, r0
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d050      	beq.n	8009d84 <HAL_SD_ConfigWideBusOperation+0x138>
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009ce2:	6863      	ldr	r3, [r4, #4]
 8009ce4:	9303      	str	r3, [sp, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009ce6:	68a3      	ldr	r3, [r4, #8]
 8009ce8:	9304      	str	r3, [sp, #16]
      Init.BusWide             = WideMode;
 8009cea:	9505      	str	r5, [sp, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009cec:	6923      	ldr	r3, [r4, #16]
 8009cee:	9306      	str	r3, [sp, #24]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009cf0:	6961      	ldr	r1, [r4, #20]
 8009cf2:	4b28      	ldr	r3, [pc, #160]	@ (8009d94 <HAL_SD_ConfigWideBusOperation+0x148>)
 8009cf4:	fba3 0302 	umull	r0, r3, r3, r2
 8009cf8:	0e18      	lsrs	r0, r3, #24
 8009cfa:	ebb1 6f13 	cmp.w	r1, r3, lsr #24
 8009cfe:	d30c      	bcc.n	8009d1a <HAL_SD_ConfigWideBusOperation+0xce>
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009d00:	9107      	str	r1, [sp, #28]
      (void)SDMMC_Init(hsd->Instance, Init);
 8009d02:	ab08      	add	r3, sp, #32
 8009d04:	e913 0003 	ldmdb	r3, {r0, r1}
 8009d08:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009d0c:	ab03      	add	r3, sp, #12
 8009d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009d10:	6820      	ldr	r0, [r4, #0]
 8009d12:	f002 f8f9 	bl	800bf08 <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8009d16:	2500      	movs	r5, #0
 8009d18:	e7c9      	b.n	8009cae <HAL_SD_ConfigWideBusOperation+0x62>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009d1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d20:	d008      	beq.n	8009d34 <HAL_SD_ConfigWideBusOperation+0xe8>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d26:	d007      	beq.n	8009d38 <HAL_SD_ConfigWideBusOperation+0xec>
        if (hsd->Init.ClockDiv == 0U)
 8009d28:	bb11      	cbnz	r1, 8009d70 <HAL_SD_ConfigWideBusOperation+0x124>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8009d98 <HAL_SD_ConfigWideBusOperation+0x14c>)
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d91d      	bls.n	8009d6c <HAL_SD_ConfigWideBusOperation+0x120>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009d30:	9007      	str	r0, [sp, #28]
 8009d32:	e7e6      	b.n	8009d02 <HAL_SD_ConfigWideBusOperation+0xb6>
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009d34:	9107      	str	r1, [sp, #28]
 8009d36:	e7e4      	b.n	8009d02 <HAL_SD_ConfigWideBusOperation+0xb6>
        if (hsd->Init.ClockDiv == 0U)
 8009d38:	b951      	cbnz	r1, 8009d50 <HAL_SD_ConfigWideBusOperation+0x104>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009d3a:	4b18      	ldr	r3, [pc, #96]	@ (8009d9c <HAL_SD_ConfigWideBusOperation+0x150>)
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d905      	bls.n	8009d4c <HAL_SD_ConfigWideBusOperation+0x100>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009d40:	4b14      	ldr	r3, [pc, #80]	@ (8009d94 <HAL_SD_ConfigWideBusOperation+0x148>)
 8009d42:	fba3 2302 	umull	r2, r3, r3, r2
 8009d46:	0e5b      	lsrs	r3, r3, #25
 8009d48:	9307      	str	r3, [sp, #28]
 8009d4a:	e7da      	b.n	8009d02 <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009d4c:	9107      	str	r1, [sp, #28]
 8009d4e:	e7d8      	b.n	8009d02 <HAL_SD_ConfigWideBusOperation+0xb6>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009d50:	004b      	lsls	r3, r1, #1
 8009d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d56:	4811      	ldr	r0, [pc, #68]	@ (8009d9c <HAL_SD_ConfigWideBusOperation+0x150>)
 8009d58:	4283      	cmp	r3, r0
 8009d5a:	d905      	bls.n	8009d68 <HAL_SD_ConfigWideBusOperation+0x11c>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d94 <HAL_SD_ConfigWideBusOperation+0x148>)
 8009d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8009d62:	0e5b      	lsrs	r3, r3, #25
 8009d64:	9307      	str	r3, [sp, #28]
 8009d66:	e7cc      	b.n	8009d02 <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009d68:	9107      	str	r1, [sp, #28]
 8009d6a:	e7ca      	b.n	8009d02 <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009d6c:	9107      	str	r1, [sp, #28]
 8009d6e:	e7c8      	b.n	8009d02 <HAL_SD_ConfigWideBusOperation+0xb6>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009d70:	004b      	lsls	r3, r1, #1
 8009d72:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d76:	4b08      	ldr	r3, [pc, #32]	@ (8009d98 <HAL_SD_ConfigWideBusOperation+0x14c>)
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d901      	bls.n	8009d80 <HAL_SD_ConfigWideBusOperation+0x134>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009d7c:	9007      	str	r0, [sp, #28]
 8009d7e:	e7c0      	b.n	8009d02 <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009d80:	9107      	str	r1, [sp, #28]
 8009d82:	e7be      	b.n	8009d02 <HAL_SD_ConfigWideBusOperation+0xb6>
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009d84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d8a:	6363      	str	r3, [r4, #52]	@ 0x34
      status = HAL_ERROR;
 8009d8c:	2501      	movs	r5, #1
 8009d8e:	e78e      	b.n	8009cae <HAL_SD_ConfigWideBusOperation+0x62>
 8009d90:	1fe00fff 	.word	0x1fe00fff
 8009d94:	55e63b89 	.word	0x55e63b89
 8009d98:	017d7840 	.word	0x017d7840
 8009d9c:	02faf080 	.word	0x02faf080

08009da0 <HAL_SD_GetCardState>:
{
 8009da0:	b510      	push	{r4, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 8009daa:	a901      	add	r1, sp, #4
 8009dac:	f7ff fd10 	bl	80097d0 <SD_SendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009db0:	b110      	cbz	r0, 8009db8 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 8009db2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009db4:	4303      	orrs	r3, r0
 8009db6:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8009db8:	9801      	ldr	r0, [sp, #4]
 8009dba:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8009dbe:	b002      	add	sp, #8
 8009dc0:	bd10      	pop	{r4, pc}

08009dc2 <HAL_SD_Init>:
{
 8009dc2:	b570      	push	{r4, r5, r6, lr}
 8009dc4:	b086      	sub	sp, #24
  if (hsd == NULL)
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d054      	beq.n	8009e74 <HAL_SD_Init+0xb2>
 8009dca:	4604      	mov	r4, r0
  if (hsd->State == HAL_SD_STATE_RESET)
 8009dcc:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8009dd0:	b153      	cbz	r3, 8009de8 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009dd2:	2304      	movs	r3, #4
 8009dd4:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f7ff fe6d 	bl	8009ab8 <HAL_SD_InitCard>
 8009dde:	b138      	cbz	r0, 8009df0 <HAL_SD_Init+0x2e>
    return HAL_ERROR;
 8009de0:	2501      	movs	r5, #1
}
 8009de2:	4628      	mov	r0, r5
 8009de4:	b006      	add	sp, #24
 8009de6:	bd70      	pop	{r4, r5, r6, pc}
    hsd->Lock = HAL_UNLOCKED;
 8009de8:	7603      	strb	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8009dea:	f7f8 fda9 	bl	8002940 <HAL_SD_MspInit>
 8009dee:	e7f0      	b.n	8009dd2 <HAL_SD_Init+0x10>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009df0:	a901      	add	r1, sp, #4
 8009df2:	4620      	mov	r0, r4
 8009df4:	f7ff fec2 	bl	8009b7c <HAL_SD_GetCardStatus>
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	d13d      	bne.n	8009e78 <HAL_SD_Init+0xb6>
  speedgrade = CardStatus.UhsSpeedGrade;
 8009dfc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009e00:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009e02:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8009e06:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009e08:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009e0a:	2901      	cmp	r1, #1
 8009e0c:	d00b      	beq.n	8009e26 <HAL_SD_Init+0x64>
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009e0e:	2901      	cmp	r1, #1
 8009e10:	d00f      	beq.n	8009e32 <HAL_SD_Init+0x70>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009e12:	2300      	movs	r3, #0
 8009e14:	65a3      	str	r3, [r4, #88]	@ 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009e16:	68e1      	ldr	r1, [r4, #12]
 8009e18:	4620      	mov	r0, r4
 8009e1a:	f7ff ff17 	bl	8009c4c <HAL_SD_ConfigWideBusOperation>
 8009e1e:	4605      	mov	r5, r0
 8009e20:	b158      	cbz	r0, 8009e3a <HAL_SD_Init+0x78>
    return HAL_ERROR;
 8009e22:	2501      	movs	r5, #1
 8009e24:	e7dd      	b.n	8009de2 <HAL_SD_Init+0x20>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009e26:	4313      	orrs	r3, r2
 8009e28:	d0f1      	beq.n	8009e0e <HAL_SD_Init+0x4c>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009e2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e2e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009e30:	e7f1      	b.n	8009e16 <HAL_SD_Init+0x54>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009e32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e36:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009e38:	e7ed      	b.n	8009e16 <HAL_SD_Init+0x54>
  tickstart = HAL_GetTick();
 8009e3a:	f7f9 fc4f 	bl	80036dc <HAL_GetTick>
 8009e3e:	4606      	mov	r6, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009e40:	4620      	mov	r0, r4
 8009e42:	f7ff ffad 	bl	8009da0 <HAL_SD_GetCardState>
 8009e46:	2804      	cmp	r0, #4
 8009e48:	d00d      	beq.n	8009e66 <HAL_SD_Init+0xa4>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e4a:	f7f9 fc47 	bl	80036dc <HAL_GetTick>
 8009e4e:	1b80      	subs	r0, r0, r6
 8009e50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009e54:	d1f4      	bne.n	8009e40 <HAL_SD_Init+0x7e>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009e56:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009e5a:	6363      	str	r3, [r4, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009e62:	2503      	movs	r5, #3
 8009e64:	e7bd      	b.n	8009de2 <HAL_SD_Init+0x20>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009e66:	2300      	movs	r3, #0
 8009e68:	6363      	str	r3, [r4, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009e6a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hsd->State = HAL_SD_STATE_READY;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  return HAL_OK;
 8009e72:	e7b6      	b.n	8009de2 <HAL_SD_Init+0x20>
    return HAL_ERROR;
 8009e74:	2501      	movs	r5, #1
 8009e76:	e7b4      	b.n	8009de2 <HAL_SD_Init+0x20>
    return HAL_ERROR;
 8009e78:	2501      	movs	r5, #1
 8009e7a:	e7b2      	b.n	8009de2 <HAL_SD_Init+0x20>

08009e7c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009e7c:	4770      	bx	lr

08009e7e <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009e7e:	4770      	bx	lr

08009e80 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009e80:	4770      	bx	lr

08009e82 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009e82:	4770      	bx	lr

08009e84 <HAL_SD_IRQHandler>:
{
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 8009e88:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009e8a:	6803      	ldr	r3, [r0, #0]
 8009e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e8e:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8009e92:	d002      	beq.n	8009e9a <HAL_SD_IRQHandler+0x16>
 8009e94:	f015 0f08 	tst.w	r5, #8
 8009e98:	d12a      	bne.n	8009ef0 <HAL_SD_IRQHandler+0x6c>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e9c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8009ea0:	d067      	beq.n	8009f72 <HAL_SD_IRQHandler+0xee>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009ea2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009ea6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009ea8:	6822      	ldr	r2, [r4, #0]
 8009eaa:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8009eac:	4b7e      	ldr	r3, [pc, #504]	@ (800a0a8 <HAL_SD_IRQHandler+0x224>)
 8009eae:	400b      	ands	r3, r1
 8009eb0:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009eb2:	6822      	ldr	r2, [r4, #0]
 8009eb4:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8009eb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009eba:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009ebc:	6822      	ldr	r2, [r4, #0]
 8009ebe:	68d3      	ldr	r3, [r2, #12]
 8009ec0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ec4:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 8009ec6:	f015 0f08 	tst.w	r5, #8
 8009eca:	d025      	beq.n	8009f18 <HAL_SD_IRQHandler+0x94>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009ecc:	f015 0f22 	tst.w	r5, #34	@ 0x22
 8009ed0:	d111      	bne.n	8009ef6 <HAL_SD_IRQHandler+0x72>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009ed2:	6823      	ldr	r3, [r4, #0]
 8009ed4:	4a75      	ldr	r2, [pc, #468]	@ (800a0ac <HAL_SD_IRQHandler+0x228>)
 8009ed6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009ee2:	f015 0f03 	tst.w	r5, #3
 8009ee6:	d013      	beq.n	8009f10 <HAL_SD_IRQHandler+0x8c>
        HAL_SD_RxCpltCallback(hsd);
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f7ff fc88 	bl	80097fe <HAL_SD_RxCpltCallback>
 8009eee:	e001      	b.n	8009ef4 <HAL_SD_IRQHandler+0x70>
    SD_Read_IT(hsd);
 8009ef0:	f7ff fad4 	bl	800949c <SD_Read_IT>
}
 8009ef4:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ef6:	6820      	ldr	r0, [r4, #0]
 8009ef8:	f002 f938 	bl	800c16c <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009efc:	4603      	mov	r3, r0
 8009efe:	2800      	cmp	r0, #0
 8009f00:	d0e7      	beq.n	8009ed2 <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 8009f02:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009f04:	4313      	orrs	r3, r2
 8009f06:	6363      	str	r3, [r4, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f7ff fc79 	bl	8009800 <HAL_SD_ErrorCallback>
 8009f0e:	e7e0      	b.n	8009ed2 <HAL_SD_IRQHandler+0x4e>
        HAL_SD_TxCpltCallback(hsd);
 8009f10:	4620      	mov	r0, r4
 8009f12:	f7ff fc73 	bl	80097fc <HAL_SD_TxCpltCallback>
 8009f16:	e7ed      	b.n	8009ef4 <HAL_SD_IRQHandler+0x70>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009f18:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8009f1c:	d0ea      	beq.n	8009ef4 <HAL_SD_IRQHandler+0x70>
      hsd->Instance->DLEN = 0;
 8009f1e:	6822      	ldr	r2, [r4, #0]
 8009f20:	2300      	movs	r3, #0
 8009f22:	6293      	str	r3, [r2, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8009f24:	6822      	ldr	r2, [r4, #0]
 8009f26:	62d3      	str	r3, [r2, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009f28:	6822      	ldr	r2, [r4, #0]
 8009f2a:	6513      	str	r3, [r2, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009f2c:	f015 0f22 	tst.w	r5, #34	@ 0x22
 8009f30:	d10e      	bne.n	8009f50 <HAL_SD_IRQHandler+0xcc>
      hsd->State = HAL_SD_STATE_READY;
 8009f32:	2301      	movs	r3, #1
 8009f34:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009f3c:	f015 0f30 	tst.w	r5, #48	@ 0x30
 8009f40:	d113      	bne.n	8009f6a <HAL_SD_IRQHandler+0xe6>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009f42:	f015 0f03 	tst.w	r5, #3
 8009f46:	d0d5      	beq.n	8009ef4 <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f7ff fc58 	bl	80097fe <HAL_SD_RxCpltCallback>
 8009f4e:	e7d1      	b.n	8009ef4 <HAL_SD_IRQHandler+0x70>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009f50:	6820      	ldr	r0, [r4, #0]
 8009f52:	f002 f90b 	bl	800c16c <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009f56:	4603      	mov	r3, r0
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d0ea      	beq.n	8009f32 <HAL_SD_IRQHandler+0xae>
          hsd->ErrorCode |= errorstate;
 8009f5c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	6363      	str	r3, [r4, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8009f62:	4620      	mov	r0, r4
 8009f64:	f7ff fc4c 	bl	8009800 <HAL_SD_ErrorCallback>
 8009f68:	e7e3      	b.n	8009f32 <HAL_SD_IRQHandler+0xae>
        HAL_SD_TxCpltCallback(hsd);
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f7ff fc46 	bl	80097fc <HAL_SD_TxCpltCallback>
 8009f70:	e7e7      	b.n	8009f42 <HAL_SD_IRQHandler+0xbe>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009f72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f74:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8009f78:	d002      	beq.n	8009f80 <HAL_SD_IRQHandler+0xfc>
 8009f7a:	f015 0f08 	tst.w	r5, #8
 8009f7e:	d162      	bne.n	800a046 <HAL_SD_IRQHandler+0x1c2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f82:	f012 0f3a 	tst.w	r2, #58	@ 0x3a
 8009f86:	d06b      	beq.n	800a060 <HAL_SD_IRQHandler+0x1dc>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009f88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f8a:	f012 0f02 	tst.w	r2, #2
 8009f8e:	d003      	beq.n	8009f98 <HAL_SD_IRQHandler+0x114>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009f90:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009f92:	f042 0202 	orr.w	r2, r2, #2
 8009f96:	6362      	str	r2, [r4, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f9a:	f012 0f08 	tst.w	r2, #8
 8009f9e:	d003      	beq.n	8009fa8 <HAL_SD_IRQHandler+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009fa0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009fa2:	f042 0208 	orr.w	r2, r2, #8
 8009fa6:	6362      	str	r2, [r4, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009fa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009faa:	f012 0f20 	tst.w	r2, #32
 8009fae:	d003      	beq.n	8009fb8 <HAL_SD_IRQHandler+0x134>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009fb0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009fb2:	f042 0220 	orr.w	r2, r2, #32
 8009fb6:	6362      	str	r2, [r4, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009fb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fba:	f012 0f10 	tst.w	r2, #16
 8009fbe:	d003      	beq.n	8009fc8 <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009fc0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009fc2:	f042 0210 	orr.w	r2, r2, #16
 8009fc6:	6362      	str	r2, [r4, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009fc8:	4a38      	ldr	r2, [pc, #224]	@ (800a0ac <HAL_SD_IRQHandler+0x228>)
 8009fca:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009fcc:	6822      	ldr	r2, [r4, #0]
 8009fce:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8009fd0:	f423 739d 	bic.w	r3, r3, #314	@ 0x13a
 8009fd4:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009fd6:	6822      	ldr	r2, [r4, #0]
 8009fd8:	68d3      	ldr	r3, [r2, #12]
 8009fda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fde:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009fe0:	6822      	ldr	r2, [r4, #0]
 8009fe2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009fe4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009fea:	6822      	ldr	r2, [r4, #0]
 8009fec:	68d3      	ldr	r3, [r2, #12]
 8009fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ff2:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009ff4:	6820      	ldr	r0, [r4, #0]
 8009ff6:	f002 f8b9 	bl	800c16c <SDMMC_CmdStopTransfer>
 8009ffa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009ffc:	4303      	orrs	r3, r0
 8009ffe:	6363      	str	r3, [r4, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a000:	6822      	ldr	r2, [r4, #0]
 800a002:	68d3      	ldr	r3, [r2, #12]
 800a004:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a008:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a010:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a012:	f015 0f08 	tst.w	r5, #8
 800a016:	d11a      	bne.n	800a04e <HAL_SD_IRQHandler+0x1ca>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a018:	f015 0f80 	tst.w	r5, #128	@ 0x80
 800a01c:	f43f af6a 	beq.w	8009ef4 <HAL_SD_IRQHandler+0x70>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a020:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a022:	2b00      	cmp	r3, #0
 800a024:	f43f af66 	beq.w	8009ef4 <HAL_SD_IRQHandler+0x70>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a028:	6822      	ldr	r2, [r4, #0]
 800a02a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800a02c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a030:	63d3      	str	r3, [r2, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a032:	6823      	ldr	r3, [r4, #0]
 800a034:	2200      	movs	r2, #0
 800a036:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a038:	2301      	movs	r3, #1
 800a03a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800a03e:	4620      	mov	r0, r4
 800a040:	f7ff fbde 	bl	8009800 <HAL_SD_ErrorCallback>
 800a044:	e756      	b.n	8009ef4 <HAL_SD_IRQHandler+0x70>
    SD_Write_IT(hsd);
 800a046:	4620      	mov	r0, r4
 800a048:	f7ff fa46 	bl	80094d8 <SD_Write_IT>
 800a04c:	e752      	b.n	8009ef4 <HAL_SD_IRQHandler+0x70>
      hsd->State = HAL_SD_STATE_READY;
 800a04e:	2301      	movs	r3, #1
 800a050:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a054:	2300      	movs	r3, #0
 800a056:	62e3      	str	r3, [r4, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a058:	4620      	mov	r0, r4
 800a05a:	f7ff fbd1 	bl	8009800 <HAL_SD_ErrorCallback>
 800a05e:	e749      	b.n	8009ef4 <HAL_SD_IRQHandler+0x70>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a060:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a062:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 800a066:	f43f af45 	beq.w	8009ef4 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a06a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a06e:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a070:	6823      	ldr	r3, [r4, #0]
 800a072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a074:	f013 0f04 	tst.w	r3, #4
 800a078:	d10a      	bne.n	800a090 <HAL_SD_IRQHandler+0x20c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a07a:	f015 0f20 	tst.w	r5, #32
 800a07e:	d003      	beq.n	800a088 <HAL_SD_IRQHandler+0x204>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a080:	4620      	mov	r0, r4
 800a082:	f7ff fefe 	bl	8009e82 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800a086:	e735      	b.n	8009ef4 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a088:	4620      	mov	r0, r4
 800a08a:	f7ff fef8 	bl	8009e7e <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800a08e:	e731      	b.n	8009ef4 <HAL_SD_IRQHandler+0x70>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a090:	f015 0f20 	tst.w	r5, #32
 800a094:	d003      	beq.n	800a09e <HAL_SD_IRQHandler+0x21a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a096:	4620      	mov	r0, r4
 800a098:	f7ff fef2 	bl	8009e80 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800a09c:	e72a      	b.n	8009ef4 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f7ff feec 	bl	8009e7c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a0a4:	e726      	b.n	8009ef4 <HAL_SD_IRQHandler+0x70>
 800a0a6:	bf00      	nop
 800a0a8:	ffff3ec5 	.word	0xffff3ec5
 800a0ac:	18000f3a 	.word	0x18000f3a

0800a0b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0b0:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0b2:	6a03      	ldr	r3, [r0, #32]
 800a0b4:	f023 0301 	bic.w	r3, r3, #1
 800a0b8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ba:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0bc:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0be:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a0c0:	4b1e      	ldr	r3, [pc, #120]	@ (800a13c <TIM_OC1_SetConfig+0x8c>)
 800a0c2:	4023      	ands	r3, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0c4:	680d      	ldr	r5, [r1, #0]
 800a0c6:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a0c8:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a0cc:	688b      	ldr	r3, [r1, #8]
 800a0ce:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a0d0:	4a1b      	ldr	r2, [pc, #108]	@ (800a140 <TIM_OC1_SetConfig+0x90>)
 800a0d2:	4c1c      	ldr	r4, [pc, #112]	@ (800a144 <TIM_OC1_SetConfig+0x94>)
 800a0d4:	42a0      	cmp	r0, r4
 800a0d6:	bf18      	it	ne
 800a0d8:	4290      	cmpne	r0, r2
 800a0da:	bf0c      	ite	eq
 800a0dc:	2201      	moveq	r2, #1
 800a0de:	2200      	movne	r2, #0
 800a0e0:	d00c      	beq.n	800a0fc <TIM_OC1_SetConfig+0x4c>
 800a0e2:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
 800a0e6:	42a0      	cmp	r0, r4
 800a0e8:	bf14      	ite	ne
 800a0ea:	2400      	movne	r4, #0
 800a0ec:	2401      	moveq	r4, #1
 800a0ee:	4f16      	ldr	r7, [pc, #88]	@ (800a148 <TIM_OC1_SetConfig+0x98>)
 800a0f0:	42b8      	cmp	r0, r7
 800a0f2:	d003      	beq.n	800a0fc <TIM_OC1_SetConfig+0x4c>
 800a0f4:	b914      	cbnz	r4, 800a0fc <TIM_OC1_SetConfig+0x4c>
 800a0f6:	4c15      	ldr	r4, [pc, #84]	@ (800a14c <TIM_OC1_SetConfig+0x9c>)
 800a0f8:	42a0      	cmp	r0, r4
 800a0fa:	d105      	bne.n	800a108 <TIM_OC1_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a0fc:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a100:	68cc      	ldr	r4, [r1, #12]
 800a102:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a104:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a108:	b95a      	cbnz	r2, 800a122 <TIM_OC1_SetConfig+0x72>
 800a10a:	4a11      	ldr	r2, [pc, #68]	@ (800a150 <TIM_OC1_SetConfig+0xa0>)
 800a10c:	4290      	cmp	r0, r2
 800a10e:	bf14      	ite	ne
 800a110:	2200      	movne	r2, #0
 800a112:	2201      	moveq	r2, #1
 800a114:	4c0c      	ldr	r4, [pc, #48]	@ (800a148 <TIM_OC1_SetConfig+0x98>)
 800a116:	42a0      	cmp	r0, r4
 800a118:	d003      	beq.n	800a122 <TIM_OC1_SetConfig+0x72>
 800a11a:	b912      	cbnz	r2, 800a122 <TIM_OC1_SetConfig+0x72>
 800a11c:	4a0b      	ldr	r2, [pc, #44]	@ (800a14c <TIM_OC1_SetConfig+0x9c>)
 800a11e:	4290      	cmp	r0, r2
 800a120:	d105      	bne.n	800a12e <TIM_OC1_SetConfig+0x7e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a122:	f426 7640 	bic.w	r6, r6, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a126:	694a      	ldr	r2, [r1, #20]
 800a128:	4332      	orrs	r2, r6
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a12a:	698e      	ldr	r6, [r1, #24]
 800a12c:	4316      	orrs	r6, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a12e:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a130:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a132:	684a      	ldr	r2, [r1, #4]
 800a134:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a136:	6203      	str	r3, [r0, #32]
}
 800a138:	bcf0      	pop	{r4, r5, r6, r7}
 800a13a:	4770      	bx	lr
 800a13c:	fffeff8c 	.word	0xfffeff8c
 800a140:	40010000 	.word	0x40010000
 800a144:	40010400 	.word	0x40010400
 800a148:	40014000 	.word	0x40014000
 800a14c:	40014800 	.word	0x40014800
 800a150:	40014400 	.word	0x40014400

0800a154 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a154:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a156:	6a03      	ldr	r3, [r0, #32]
 800a158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a15c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a15e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a160:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a162:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a164:	4a1a      	ldr	r2, [pc, #104]	@ (800a1d0 <TIM_OC3_SetConfig+0x7c>)
 800a166:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a168:	680e      	ldr	r6, [r1, #0]
 800a16a:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a16c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a170:	688a      	ldr	r2, [r1, #8]
 800a172:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a176:	4a17      	ldr	r2, [pc, #92]	@ (800a1d4 <TIM_OC3_SetConfig+0x80>)
 800a178:	4c17      	ldr	r4, [pc, #92]	@ (800a1d8 <TIM_OC3_SetConfig+0x84>)
 800a17a:	42a0      	cmp	r0, r4
 800a17c:	bf18      	it	ne
 800a17e:	4290      	cmpne	r0, r2
 800a180:	bf0c      	ite	eq
 800a182:	2201      	moveq	r2, #1
 800a184:	2200      	movne	r2, #0
 800a186:	d106      	bne.n	800a196 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a188:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a18c:	68cc      	ldr	r4, [r1, #12]
 800a18e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a192:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a196:	b95a      	cbnz	r2, 800a1b0 <TIM_OC3_SetConfig+0x5c>
 800a198:	4a10      	ldr	r2, [pc, #64]	@ (800a1dc <TIM_OC3_SetConfig+0x88>)
 800a19a:	4290      	cmp	r0, r2
 800a19c:	bf14      	ite	ne
 800a19e:	2200      	movne	r2, #0
 800a1a0:	2201      	moveq	r2, #1
 800a1a2:	4c0f      	ldr	r4, [pc, #60]	@ (800a1e0 <TIM_OC3_SetConfig+0x8c>)
 800a1a4:	42a0      	cmp	r0, r4
 800a1a6:	d003      	beq.n	800a1b0 <TIM_OC3_SetConfig+0x5c>
 800a1a8:	b912      	cbnz	r2, 800a1b0 <TIM_OC3_SetConfig+0x5c>
 800a1aa:	4a0e      	ldr	r2, [pc, #56]	@ (800a1e4 <TIM_OC3_SetConfig+0x90>)
 800a1ac:	4290      	cmp	r0, r2
 800a1ae:	d107      	bne.n	800a1c0 <TIM_OC3_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a1b0:	f425 5240 	bic.w	r2, r5, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a1b4:	694c      	ldr	r4, [r1, #20]
 800a1b6:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a1ba:	698c      	ldr	r4, [r1, #24]
 800a1bc:	ea42 1504 	orr.w	r5, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1c0:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1c2:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a1c4:	684a      	ldr	r2, [r1, #4]
 800a1c6:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1c8:	6203      	str	r3, [r0, #32]
}
 800a1ca:	bc70      	pop	{r4, r5, r6}
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	fffeff8c 	.word	0xfffeff8c
 800a1d4:	40010000 	.word	0x40010000
 800a1d8:	40010400 	.word	0x40010400
 800a1dc:	40014400 	.word	0x40014400
 800a1e0:	40014000 	.word	0x40014000
 800a1e4:	40014800 	.word	0x40014800

0800a1e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1e8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1ea:	6a03      	ldr	r3, [r0, #32]
 800a1ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a1f0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1f2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1f4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1f6:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a1f8:	4a14      	ldr	r2, [pc, #80]	@ (800a24c <TIM_OC4_SetConfig+0x64>)
 800a1fa:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1fc:	680d      	ldr	r5, [r1, #0]
 800a1fe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a202:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a206:	688d      	ldr	r5, [r1, #8]
 800a208:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a20c:	4e10      	ldr	r6, [pc, #64]	@ (800a250 <TIM_OC4_SetConfig+0x68>)
 800a20e:	4d11      	ldr	r5, [pc, #68]	@ (800a254 <TIM_OC4_SetConfig+0x6c>)
 800a210:	42a8      	cmp	r0, r5
 800a212:	bf18      	it	ne
 800a214:	42b0      	cmpne	r0, r6
 800a216:	d00d      	beq.n	800a234 <TIM_OC4_SetConfig+0x4c>
 800a218:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 800a21c:	42a8      	cmp	r0, r5
 800a21e:	bf14      	ite	ne
 800a220:	2500      	movne	r5, #0
 800a222:	2501      	moveq	r5, #1
 800a224:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 800a228:	42b0      	cmp	r0, r6
 800a22a:	d003      	beq.n	800a234 <TIM_OC4_SetConfig+0x4c>
 800a22c:	b915      	cbnz	r5, 800a234 <TIM_OC4_SetConfig+0x4c>
 800a22e:	4d0a      	ldr	r5, [pc, #40]	@ (800a258 <TIM_OC4_SetConfig+0x70>)
 800a230:	42a8      	cmp	r0, r5
 800a232:	d104      	bne.n	800a23e <TIM_OC4_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a234:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a238:	694d      	ldr	r5, [r1, #20]
 800a23a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a23e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a240:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a242:	684a      	ldr	r2, [r1, #4]
 800a244:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a246:	6203      	str	r3, [r0, #32]
}
 800a248:	bc70      	pop	{r4, r5, r6}
 800a24a:	4770      	bx	lr
 800a24c:	feff8cff 	.word	0xfeff8cff
 800a250:	40010000 	.word	0x40010000
 800a254:	40010400 	.word	0x40010400
 800a258:	40014800 	.word	0x40014800

0800a25c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a25c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a25e:	6a03      	ldr	r3, [r0, #32]
 800a260:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a264:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a266:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a268:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a26a:	6d45      	ldr	r5, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a26c:	4e14      	ldr	r6, [pc, #80]	@ (800a2c0 <TIM_OC5_SetConfig+0x64>)
 800a26e:	402e      	ands	r6, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a270:	680d      	ldr	r5, [r1, #0]
 800a272:	432e      	orrs	r6, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a274:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a278:	688c      	ldr	r4, [r1, #8]
 800a27a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a27e:	4d11      	ldr	r5, [pc, #68]	@ (800a2c4 <TIM_OC5_SetConfig+0x68>)
 800a280:	4c11      	ldr	r4, [pc, #68]	@ (800a2c8 <TIM_OC5_SetConfig+0x6c>)
 800a282:	42a0      	cmp	r0, r4
 800a284:	bf18      	it	ne
 800a286:	42a8      	cmpne	r0, r5
 800a288:	d00d      	beq.n	800a2a6 <TIM_OC5_SetConfig+0x4a>
 800a28a:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
 800a28e:	42a0      	cmp	r0, r4
 800a290:	bf14      	ite	ne
 800a292:	2400      	movne	r4, #0
 800a294:	2401      	moveq	r4, #1
 800a296:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 800a29a:	42a8      	cmp	r0, r5
 800a29c:	d003      	beq.n	800a2a6 <TIM_OC5_SetConfig+0x4a>
 800a29e:	b914      	cbnz	r4, 800a2a6 <TIM_OC5_SetConfig+0x4a>
 800a2a0:	4c0a      	ldr	r4, [pc, #40]	@ (800a2cc <TIM_OC5_SetConfig+0x70>)
 800a2a2:	42a0      	cmp	r0, r4
 800a2a4:	d104      	bne.n	800a2b0 <TIM_OC5_SetConfig+0x54>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a2a6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a2aa:	694c      	ldr	r4, [r1, #20]
 800a2ac:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2b0:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a2b2:	6546      	str	r6, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a2b4:	684a      	ldr	r2, [r1, #4]
 800a2b6:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2b8:	6203      	str	r3, [r0, #32]
}
 800a2ba:	bc70      	pop	{r4, r5, r6}
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	fffeff8f 	.word	0xfffeff8f
 800a2c4:	40010000 	.word	0x40010000
 800a2c8:	40010400 	.word	0x40010400
 800a2cc:	40014800 	.word	0x40014800

0800a2d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a2d0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a2d2:	6a03      	ldr	r3, [r0, #32]
 800a2d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a2d8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2da:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2dc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a2de:	6d45      	ldr	r5, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a2e0:	4a14      	ldr	r2, [pc, #80]	@ (800a334 <TIM_OC6_SetConfig+0x64>)
 800a2e2:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2e4:	680d      	ldr	r5, [r1, #0]
 800a2e6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a2ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a2ee:	688d      	ldr	r5, [r1, #8]
 800a2f0:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2f4:	4e10      	ldr	r6, [pc, #64]	@ (800a338 <TIM_OC6_SetConfig+0x68>)
 800a2f6:	4d11      	ldr	r5, [pc, #68]	@ (800a33c <TIM_OC6_SetConfig+0x6c>)
 800a2f8:	42a8      	cmp	r0, r5
 800a2fa:	bf18      	it	ne
 800a2fc:	42b0      	cmpne	r0, r6
 800a2fe:	d00d      	beq.n	800a31c <TIM_OC6_SetConfig+0x4c>
 800a300:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 800a304:	42a8      	cmp	r0, r5
 800a306:	bf14      	ite	ne
 800a308:	2500      	movne	r5, #0
 800a30a:	2501      	moveq	r5, #1
 800a30c:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 800a310:	42b0      	cmp	r0, r6
 800a312:	d003      	beq.n	800a31c <TIM_OC6_SetConfig+0x4c>
 800a314:	b915      	cbnz	r5, 800a31c <TIM_OC6_SetConfig+0x4c>
 800a316:	4d0a      	ldr	r5, [pc, #40]	@ (800a340 <TIM_OC6_SetConfig+0x70>)
 800a318:	42a8      	cmp	r0, r5
 800a31a:	d104      	bne.n	800a326 <TIM_OC6_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a31c:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a320:	694d      	ldr	r5, [r1, #20]
 800a322:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a326:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a328:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a32a:	684a      	ldr	r2, [r1, #4]
 800a32c:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a32e:	6203      	str	r3, [r0, #32]
}
 800a330:	bc70      	pop	{r4, r5, r6}
 800a332:	4770      	bx	lr
 800a334:	feff8fff 	.word	0xfeff8fff
 800a338:	40010000 	.word	0x40010000
 800a33c:	40010400 	.word	0x40010400
 800a340:	40014800 	.word	0x40014800

0800a344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a344:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a346:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a348:	6a04      	ldr	r4, [r0, #32]
 800a34a:	f024 0401 	bic.w	r4, r4, #1
 800a34e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a350:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a352:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a356:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a35a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800a35e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a360:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800a362:	6203      	str	r3, [r0, #32]
}
 800a364:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a36a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a36c:	6a03      	ldr	r3, [r0, #32]
 800a36e:	f023 0310 	bic.w	r3, r3, #16
 800a372:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a374:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800a376:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a378:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a37c:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a380:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800a384:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a388:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800a38a:	6203      	str	r3, [r0, #32]
}
 800a38c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a390:	4770      	bx	lr
	...

0800a394 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a394:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a396:	4b03      	ldr	r3, [pc, #12]	@ (800a3a4 <TIM_ITRx_SetConfig+0x10>)
 800a398:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a39a:	430b      	orrs	r3, r1
 800a39c:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3a0:	6083      	str	r3, [r0, #8]
}
 800a3a2:	4770      	bx	lr
 800a3a4:	ffcfff8f 	.word	0xffcfff8f

0800a3a8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800a3a8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d13a      	bne.n	800a428 <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 800a3b2:	2302      	movs	r3, #2
 800a3b4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3b8:	6802      	ldr	r2, [r0, #0]
 800a3ba:	68d3      	ldr	r3, [r2, #12]
 800a3bc:	f043 0301 	orr.w	r3, r3, #1
 800a3c0:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3c2:	6803      	ldr	r3, [r0, #0]
 800a3c4:	4a1a      	ldr	r2, [pc, #104]	@ (800a430 <HAL_TIM_Base_Start_IT+0x88>)
 800a3c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3ca:	bf18      	it	ne
 800a3cc:	4293      	cmpne	r3, r2
 800a3ce:	d01d      	beq.n	800a40c <HAL_TIM_Base_Start_IT+0x64>
 800a3d0:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d019      	beq.n	800a40c <HAL_TIM_Base_Start_IT+0x64>
 800a3d8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d015      	beq.n	800a40c <HAL_TIM_Base_Start_IT+0x64>
 800a3e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d011      	beq.n	800a40c <HAL_TIM_Base_Start_IT+0x64>
 800a3e8:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d00d      	beq.n	800a40c <HAL_TIM_Base_Start_IT+0x64>
 800a3f0:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d009      	beq.n	800a40c <HAL_TIM_Base_Start_IT+0x64>
 800a3f8:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d005      	beq.n	800a40c <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	f042 0201 	orr.w	r2, r2, #1
 800a406:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a408:	2000      	movs	r0, #0
 800a40a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a40c:	6899      	ldr	r1, [r3, #8]
 800a40e:	4a09      	ldr	r2, [pc, #36]	@ (800a434 <HAL_TIM_Base_Start_IT+0x8c>)
 800a410:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a412:	2a06      	cmp	r2, #6
 800a414:	bf18      	it	ne
 800a416:	f5b2 3f80 	cmpne.w	r2, #65536	@ 0x10000
 800a41a:	d007      	beq.n	800a42c <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	f042 0201 	orr.w	r2, r2, #1
 800a422:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a424:	2000      	movs	r0, #0
 800a426:	4770      	bx	lr
    return HAL_ERROR;
 800a428:	2001      	movs	r0, #1
 800a42a:	4770      	bx	lr
  return HAL_OK;
 800a42c:	2000      	movs	r0, #0
}
 800a42e:	4770      	bx	lr
 800a430:	40010000 	.word	0x40010000
 800a434:	00010007 	.word	0x00010007

0800a438 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a438:	6802      	ldr	r2, [r0, #0]
 800a43a:	68d3      	ldr	r3, [r2, #12]
 800a43c:	f023 0301 	bic.w	r3, r3, #1
 800a440:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800a442:	6803      	ldr	r3, [r0, #0]
 800a444:	6a19      	ldr	r1, [r3, #32]
 800a446:	f241 1211 	movw	r2, #4369	@ 0x1111
 800a44a:	4211      	tst	r1, r2
 800a44c:	d108      	bne.n	800a460 <HAL_TIM_Base_Stop_IT+0x28>
 800a44e:	6a19      	ldr	r1, [r3, #32]
 800a450:	f240 4244 	movw	r2, #1092	@ 0x444
 800a454:	4211      	tst	r1, r2
 800a456:	d103      	bne.n	800a460 <HAL_TIM_Base_Stop_IT+0x28>
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	f022 0201 	bic.w	r2, r2, #1
 800a45e:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800a460:	2301      	movs	r3, #1
 800a462:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 800a466:	2000      	movs	r0, #0
 800a468:	4770      	bx	lr

0800a46a <HAL_TIM_PWM_MspInit>:
}
 800a46a:	4770      	bx	lr

0800a46c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800a46c:	4770      	bx	lr

0800a46e <HAL_TIM_IC_CaptureCallback>:
}
 800a46e:	4770      	bx	lr

0800a470 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800a470:	4770      	bx	lr

0800a472 <HAL_TIM_TriggerCallback>:
}
 800a472:	4770      	bx	lr

0800a474 <HAL_TIM_IRQHandler>:
{
 800a474:	b510      	push	{r4, lr}
 800a476:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a478:	6803      	ldr	r3, [r0, #0]
 800a47a:	691a      	ldr	r2, [r3, #16]
 800a47c:	f012 0f02 	tst.w	r2, #2
 800a480:	d011      	beq.n	800a4a6 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a482:	68da      	ldr	r2, [r3, #12]
 800a484:	f012 0f02 	tst.w	r2, #2
 800a488:	d00d      	beq.n	800a4a6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a48a:	f06f 0202 	mvn.w	r2, #2
 800a48e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a490:	2301      	movs	r3, #1
 800a492:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a494:	6803      	ldr	r3, [r0, #0]
 800a496:	699b      	ldr	r3, [r3, #24]
 800a498:	f013 0f03 	tst.w	r3, #3
 800a49c:	d079      	beq.n	800a592 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800a49e:	f7ff ffe6 	bl	800a46e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a4a6:	6823      	ldr	r3, [r4, #0]
 800a4a8:	691a      	ldr	r2, [r3, #16]
 800a4aa:	f012 0f04 	tst.w	r2, #4
 800a4ae:	d012      	beq.n	800a4d6 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a4b0:	68da      	ldr	r2, [r3, #12]
 800a4b2:	f012 0f04 	tst.w	r2, #4
 800a4b6:	d00e      	beq.n	800a4d6 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a4b8:	f06f 0204 	mvn.w	r2, #4
 800a4bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4be:	2302      	movs	r3, #2
 800a4c0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a4c2:	6823      	ldr	r3, [r4, #0]
 800a4c4:	699b      	ldr	r3, [r3, #24]
 800a4c6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800a4ca:	d068      	beq.n	800a59e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f7ff ffce 	bl	800a46e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	691a      	ldr	r2, [r3, #16]
 800a4da:	f012 0f08 	tst.w	r2, #8
 800a4de:	d012      	beq.n	800a506 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a4e0:	68da      	ldr	r2, [r3, #12]
 800a4e2:	f012 0f08 	tst.w	r2, #8
 800a4e6:	d00e      	beq.n	800a506 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a4e8:	f06f 0208 	mvn.w	r2, #8
 800a4ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4ee:	2304      	movs	r3, #4
 800a4f0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a4f2:	6823      	ldr	r3, [r4, #0]
 800a4f4:	69db      	ldr	r3, [r3, #28]
 800a4f6:	f013 0f03 	tst.w	r3, #3
 800a4fa:	d057      	beq.n	800a5ac <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f7ff ffb6 	bl	800a46e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a502:	2300      	movs	r3, #0
 800a504:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	691a      	ldr	r2, [r3, #16]
 800a50a:	f012 0f10 	tst.w	r2, #16
 800a50e:	d012      	beq.n	800a536 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a510:	68da      	ldr	r2, [r3, #12]
 800a512:	f012 0f10 	tst.w	r2, #16
 800a516:	d00e      	beq.n	800a536 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a518:	f06f 0210 	mvn.w	r2, #16
 800a51c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a51e:	2308      	movs	r3, #8
 800a520:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a522:	6823      	ldr	r3, [r4, #0]
 800a524:	69db      	ldr	r3, [r3, #28]
 800a526:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800a52a:	d046      	beq.n	800a5ba <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800a52c:	4620      	mov	r0, r4
 800a52e:	f7ff ff9e 	bl	800a46e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a532:	2300      	movs	r3, #0
 800a534:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a536:	6823      	ldr	r3, [r4, #0]
 800a538:	691a      	ldr	r2, [r3, #16]
 800a53a:	f012 0f01 	tst.w	r2, #1
 800a53e:	d003      	beq.n	800a548 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a540:	68da      	ldr	r2, [r3, #12]
 800a542:	f012 0f01 	tst.w	r2, #1
 800a546:	d13f      	bne.n	800a5c8 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a548:	6823      	ldr	r3, [r4, #0]
 800a54a:	691a      	ldr	r2, [r3, #16]
 800a54c:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800a550:	d003      	beq.n	800a55a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a552:	68da      	ldr	r2, [r3, #12]
 800a554:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800a558:	d13d      	bne.n	800a5d6 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a55a:	6823      	ldr	r3, [r4, #0]
 800a55c:	691a      	ldr	r2, [r3, #16]
 800a55e:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800a562:	d003      	beq.n	800a56c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a564:	68da      	ldr	r2, [r3, #12]
 800a566:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800a56a:	d13b      	bne.n	800a5e4 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a56c:	6823      	ldr	r3, [r4, #0]
 800a56e:	691a      	ldr	r2, [r3, #16]
 800a570:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800a574:	d003      	beq.n	800a57e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a576:	68da      	ldr	r2, [r3, #12]
 800a578:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800a57c:	d139      	bne.n	800a5f2 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a57e:	6823      	ldr	r3, [r4, #0]
 800a580:	691a      	ldr	r2, [r3, #16]
 800a582:	f012 0f20 	tst.w	r2, #32
 800a586:	d003      	beq.n	800a590 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a588:	68da      	ldr	r2, [r3, #12]
 800a58a:	f012 0f20 	tst.w	r2, #32
 800a58e:	d137      	bne.n	800a600 <HAL_TIM_IRQHandler+0x18c>
}
 800a590:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a592:	f7ff ff6b 	bl	800a46c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a596:	4620      	mov	r0, r4
 800a598:	f7ff ff6a 	bl	800a470 <HAL_TIM_PWM_PulseFinishedCallback>
 800a59c:	e781      	b.n	800a4a2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f7ff ff64 	bl	800a46c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	f7ff ff63 	bl	800a470 <HAL_TIM_PWM_PulseFinishedCallback>
 800a5aa:	e792      	b.n	800a4d2 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	f7ff ff5d 	bl	800a46c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f7ff ff5c 	bl	800a470 <HAL_TIM_PWM_PulseFinishedCallback>
 800a5b8:	e7a3      	b.n	800a502 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f7ff ff56 	bl	800a46c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f7ff ff55 	bl	800a470 <HAL_TIM_PWM_PulseFinishedCallback>
 800a5c6:	e7b4      	b.n	800a532 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a5c8:	f06f 0201 	mvn.w	r2, #1
 800a5cc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f7f6 fb00 	bl	8000bd4 <HAL_TIM_PeriodElapsedCallback>
 800a5d4:	e7b8      	b.n	800a548 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a5d6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a5da:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f000 fba2 	bl	800ad26 <HAL_TIMEx_BreakCallback>
 800a5e2:	e7ba      	b.n	800a55a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a5e4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a5e8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f000 fb9c 	bl	800ad28 <HAL_TIMEx_Break2Callback>
 800a5f0:	e7bc      	b.n	800a56c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a5f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a5f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	f7ff ff3a 	bl	800a472 <HAL_TIM_TriggerCallback>
 800a5fe:	e7be      	b.n	800a57e <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a600:	f06f 0220 	mvn.w	r2, #32
 800a604:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800a606:	4620      	mov	r0, r4
 800a608:	f000 fb8c 	bl	800ad24 <HAL_TIMEx_CommutCallback>
}
 800a60c:	e7c0      	b.n	800a590 <HAL_TIM_IRQHandler+0x11c>
	...

0800a610 <TIM_Base_SetConfig>:
{
 800a610:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 800a612:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a614:	4a39      	ldr	r2, [pc, #228]	@ (800a6fc <TIM_Base_SetConfig+0xec>)
 800a616:	4290      	cmp	r0, r2
 800a618:	bf14      	ite	ne
 800a61a:	f04f 0e00 	movne.w	lr, #0
 800a61e:	f04f 0e01 	moveq.w	lr, #1
 800a622:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800a626:	bf14      	ite	ne
 800a628:	4672      	movne	r2, lr
 800a62a:	f04e 0201 	orreq.w	r2, lr, #1
 800a62e:	b9aa      	cbnz	r2, 800a65c <TIM_Base_SetConfig+0x4c>
 800a630:	4c33      	ldr	r4, [pc, #204]	@ (800a700 <TIM_Base_SetConfig+0xf0>)
 800a632:	42a0      	cmp	r0, r4
 800a634:	bf14      	ite	ne
 800a636:	2400      	movne	r4, #0
 800a638:	2401      	moveq	r4, #1
 800a63a:	4d32      	ldr	r5, [pc, #200]	@ (800a704 <TIM_Base_SetConfig+0xf4>)
 800a63c:	42a8      	cmp	r0, r5
 800a63e:	d00d      	beq.n	800a65c <TIM_Base_SetConfig+0x4c>
 800a640:	b964      	cbnz	r4, 800a65c <TIM_Base_SetConfig+0x4c>
 800a642:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800a646:	f504 3482 	add.w	r4, r4, #66560	@ 0x10400
 800a64a:	42a0      	cmp	r0, r4
 800a64c:	bf14      	ite	ne
 800a64e:	2400      	movne	r4, #0
 800a650:	2401      	moveq	r4, #1
 800a652:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800a656:	42a8      	cmp	r0, r5
 800a658:	d000      	beq.n	800a65c <TIM_Base_SetConfig+0x4c>
 800a65a:	b11c      	cbz	r4, 800a664 <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a65c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800a660:	684c      	ldr	r4, [r1, #4]
 800a662:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a664:	bb12      	cbnz	r2, 800a6ac <TIM_Base_SetConfig+0x9c>
 800a666:	4a26      	ldr	r2, [pc, #152]	@ (800a700 <TIM_Base_SetConfig+0xf0>)
 800a668:	4290      	cmp	r0, r2
 800a66a:	bf14      	ite	ne
 800a66c:	2200      	movne	r2, #0
 800a66e:	2201      	moveq	r2, #1
 800a670:	4c24      	ldr	r4, [pc, #144]	@ (800a704 <TIM_Base_SetConfig+0xf4>)
 800a672:	42a0      	cmp	r0, r4
 800a674:	d01a      	beq.n	800a6ac <TIM_Base_SetConfig+0x9c>
 800a676:	b9ca      	cbnz	r2, 800a6ac <TIM_Base_SetConfig+0x9c>
 800a678:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800a67c:	f502 3282 	add.w	r2, r2, #66560	@ 0x10400
 800a680:	4290      	cmp	r0, r2
 800a682:	bf14      	ite	ne
 800a684:	2200      	movne	r2, #0
 800a686:	2201      	moveq	r2, #1
 800a688:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 800a68c:	42a0      	cmp	r0, r4
 800a68e:	d00d      	beq.n	800a6ac <TIM_Base_SetConfig+0x9c>
 800a690:	b962      	cbnz	r2, 800a6ac <TIM_Base_SetConfig+0x9c>
 800a692:	4a1d      	ldr	r2, [pc, #116]	@ (800a708 <TIM_Base_SetConfig+0xf8>)
 800a694:	4290      	cmp	r0, r2
 800a696:	bf14      	ite	ne
 800a698:	2200      	movne	r2, #0
 800a69a:	2201      	moveq	r2, #1
 800a69c:	f504 349a 	add.w	r4, r4, #78848	@ 0x13400
 800a6a0:	42a0      	cmp	r0, r4
 800a6a2:	d003      	beq.n	800a6ac <TIM_Base_SetConfig+0x9c>
 800a6a4:	b912      	cbnz	r2, 800a6ac <TIM_Base_SetConfig+0x9c>
 800a6a6:	4a19      	ldr	r2, [pc, #100]	@ (800a70c <TIM_Base_SetConfig+0xfc>)
 800a6a8:	4290      	cmp	r0, r2
 800a6aa:	d104      	bne.n	800a6b6 <TIM_Base_SetConfig+0xa6>
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6ac:	f423 7c40 	bic.w	ip, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6b0:	68cb      	ldr	r3, [r1, #12]
 800a6b2:	ea43 030c 	orr.w	r3, r3, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a6ba:	694a      	ldr	r2, [r1, #20]
 800a6bc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800a6be:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6c0:	688a      	ldr	r2, [r1, #8]
 800a6c2:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a6c4:	680a      	ldr	r2, [r1, #0]
 800a6c6:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6c8:	4a11      	ldr	r2, [pc, #68]	@ (800a710 <TIM_Base_SetConfig+0x100>)
 800a6ca:	4290      	cmp	r0, r2
 800a6cc:	bf14      	ite	ne
 800a6ce:	4673      	movne	r3, lr
 800a6d0:	f04e 0301 	orreq.w	r3, lr, #1
 800a6d4:	b963      	cbnz	r3, 800a6f0 <TIM_Base_SetConfig+0xe0>
 800a6d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a708 <TIM_Base_SetConfig+0xf8>)
 800a6d8:	4298      	cmp	r0, r3
 800a6da:	bf14      	ite	ne
 800a6dc:	2300      	movne	r3, #0
 800a6de:	2301      	moveq	r3, #1
 800a6e0:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800a6e4:	4290      	cmp	r0, r2
 800a6e6:	d003      	beq.n	800a6f0 <TIM_Base_SetConfig+0xe0>
 800a6e8:	b913      	cbnz	r3, 800a6f0 <TIM_Base_SetConfig+0xe0>
 800a6ea:	4b08      	ldr	r3, [pc, #32]	@ (800a70c <TIM_Base_SetConfig+0xfc>)
 800a6ec:	4298      	cmp	r0, r3
 800a6ee:	d101      	bne.n	800a6f4 <TIM_Base_SetConfig+0xe4>
    TIMx->RCR = Structure->RepetitionCounter;
 800a6f0:	690b      	ldr	r3, [r1, #16]
 800a6f2:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	6143      	str	r3, [r0, #20]
}
 800a6f8:	bd30      	pop	{r4, r5, pc}
 800a6fa:	bf00      	nop
 800a6fc:	40010000 	.word	0x40010000
 800a700:	40000800 	.word	0x40000800
 800a704:	40000400 	.word	0x40000400
 800a708:	40014400 	.word	0x40014400
 800a70c:	40014800 	.word	0x40014800
 800a710:	40010400 	.word	0x40010400

0800a714 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800a714:	b360      	cbz	r0, 800a770 <HAL_TIM_Base_Init+0x5c>
{
 800a716:	b510      	push	{r4, lr}
 800a718:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800a71a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a71e:	b313      	cbz	r3, 800a766 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800a720:	2302      	movs	r3, #2
 800a722:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a726:	4621      	mov	r1, r4
 800a728:	f851 0b04 	ldr.w	r0, [r1], #4
 800a72c:	f7ff ff70 	bl	800a610 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a730:	2301      	movs	r3, #1
 800a732:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a736:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800a73a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800a73e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800a742:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800a746:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a74a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a74e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800a752:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800a756:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800a75a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a75e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800a762:	2000      	movs	r0, #0
}
 800a764:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800a766:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800a76a:	f7f8 f969 	bl	8002a40 <HAL_TIM_Base_MspInit>
 800a76e:	e7d7      	b.n	800a720 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800a770:	2001      	movs	r0, #1
}
 800a772:	4770      	bx	lr

0800a774 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800a774:	b360      	cbz	r0, 800a7d0 <HAL_TIM_PWM_Init+0x5c>
{
 800a776:	b510      	push	{r4, lr}
 800a778:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800a77a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a77e:	b313      	cbz	r3, 800a7c6 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800a780:	2302      	movs	r3, #2
 800a782:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a786:	4621      	mov	r1, r4
 800a788:	f851 0b04 	ldr.w	r0, [r1], #4
 800a78c:	f7ff ff40 	bl	800a610 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a790:	2301      	movs	r3, #1
 800a792:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a796:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800a79a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800a79e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800a7a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800a7a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a7aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7ae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800a7b2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800a7b6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800a7ba:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a7be:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800a7c2:	2000      	movs	r0, #0
}
 800a7c4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800a7c6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800a7ca:	f7ff fe4e 	bl	800a46a <HAL_TIM_PWM_MspInit>
 800a7ce:	e7d7      	b.n	800a780 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800a7d0:	2001      	movs	r0, #1
}
 800a7d2:	4770      	bx	lr

0800a7d4 <TIM_OC2_SetConfig>:
{
 800a7d4:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7d6:	6a03      	ldr	r3, [r0, #32]
 800a7d8:	f023 0310 	bic.w	r3, r3, #16
 800a7dc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800a7de:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800a7e0:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800a7e2:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a7e4:	4e1a      	ldr	r6, [pc, #104]	@ (800a850 <TIM_OC2_SetConfig+0x7c>)
 800a7e6:	4026      	ands	r6, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7e8:	680c      	ldr	r4, [r1, #0]
 800a7ea:	ea46 2604 	orr.w	r6, r6, r4, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800a7ee:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a7f2:	688a      	ldr	r2, [r1, #8]
 800a7f4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a7f8:	4a16      	ldr	r2, [pc, #88]	@ (800a854 <TIM_OC2_SetConfig+0x80>)
 800a7fa:	4c17      	ldr	r4, [pc, #92]	@ (800a858 <TIM_OC2_SetConfig+0x84>)
 800a7fc:	42a0      	cmp	r0, r4
 800a7fe:	bf18      	it	ne
 800a800:	4290      	cmpne	r0, r2
 800a802:	bf0c      	ite	eq
 800a804:	2201      	moveq	r2, #1
 800a806:	2200      	movne	r2, #0
 800a808:	d106      	bne.n	800a818 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 800a80a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a80e:	68cc      	ldr	r4, [r1, #12]
 800a810:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800a814:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a818:	b95a      	cbnz	r2, 800a832 <TIM_OC2_SetConfig+0x5e>
 800a81a:	4a10      	ldr	r2, [pc, #64]	@ (800a85c <TIM_OC2_SetConfig+0x88>)
 800a81c:	4290      	cmp	r0, r2
 800a81e:	bf14      	ite	ne
 800a820:	2200      	movne	r2, #0
 800a822:	2201      	moveq	r2, #1
 800a824:	4c0e      	ldr	r4, [pc, #56]	@ (800a860 <TIM_OC2_SetConfig+0x8c>)
 800a826:	42a0      	cmp	r0, r4
 800a828:	d003      	beq.n	800a832 <TIM_OC2_SetConfig+0x5e>
 800a82a:	b912      	cbnz	r2, 800a832 <TIM_OC2_SetConfig+0x5e>
 800a82c:	4a0d      	ldr	r2, [pc, #52]	@ (800a864 <TIM_OC2_SetConfig+0x90>)
 800a82e:	4290      	cmp	r0, r2
 800a830:	d107      	bne.n	800a842 <TIM_OC2_SetConfig+0x6e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a832:	f425 6c40 	bic.w	ip, r5, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a836:	694a      	ldr	r2, [r1, #20]
 800a838:	ea4c 0c82 	orr.w	ip, ip, r2, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a83c:	698a      	ldr	r2, [r1, #24]
 800a83e:	ea4c 0582 	orr.w	r5, ip, r2, lsl #2
  TIMx->CR2 = tmpcr2;
 800a842:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800a844:	6186      	str	r6, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800a846:	684a      	ldr	r2, [r1, #4]
 800a848:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800a84a:	6203      	str	r3, [r0, #32]
}
 800a84c:	bc70      	pop	{r4, r5, r6}
 800a84e:	4770      	bx	lr
 800a850:	feff8cff 	.word	0xfeff8cff
 800a854:	40010000 	.word	0x40010000
 800a858:	40010400 	.word	0x40010400
 800a85c:	40014400 	.word	0x40014400
 800a860:	40014000 	.word	0x40014000
 800a864:	40014800 	.word	0x40014800

0800a868 <HAL_TIM_PWM_ConfigChannel>:
{
 800a868:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800a86a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800a86e:	2b01      	cmp	r3, #1
 800a870:	f000 8095 	beq.w	800a99e <HAL_TIM_PWM_ConfigChannel+0x136>
 800a874:	4604      	mov	r4, r0
 800a876:	460d      	mov	r5, r1
 800a878:	2301      	movs	r3, #1
 800a87a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800a87e:	2a14      	cmp	r2, #20
 800a880:	f200 8088 	bhi.w	800a994 <HAL_TIM_PWM_ConfigChannel+0x12c>
 800a884:	e8df f002 	tbb	[pc, r2]
 800a888:	8686860b 	.word	0x8686860b
 800a88c:	8686861f 	.word	0x8686861f
 800a890:	86868634 	.word	0x86868634
 800a894:	86868648 	.word	0x86868648
 800a898:	8686865d 	.word	0x8686865d
 800a89c:	71          	.byte	0x71
 800a89d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a89e:	6800      	ldr	r0, [r0, #0]
 800a8a0:	f7ff fc06 	bl	800a0b0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a8a4:	6822      	ldr	r2, [r4, #0]
 800a8a6:	6993      	ldr	r3, [r2, #24]
 800a8a8:	f043 0308 	orr.w	r3, r3, #8
 800a8ac:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a8ae:	6822      	ldr	r2, [r4, #0]
 800a8b0:	6993      	ldr	r3, [r2, #24]
 800a8b2:	f023 0304 	bic.w	r3, r3, #4
 800a8b6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a8b8:	6822      	ldr	r2, [r4, #0]
 800a8ba:	6993      	ldr	r3, [r2, #24]
 800a8bc:	6929      	ldr	r1, [r5, #16]
 800a8be:	430b      	orrs	r3, r1
 800a8c0:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800a8c2:	2000      	movs	r0, #0
      break;
 800a8c4:	e067      	b.n	800a996 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a8c6:	6800      	ldr	r0, [r0, #0]
 800a8c8:	f7ff ff84 	bl	800a7d4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a8cc:	6822      	ldr	r2, [r4, #0]
 800a8ce:	6993      	ldr	r3, [r2, #24]
 800a8d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a8d4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a8d6:	6822      	ldr	r2, [r4, #0]
 800a8d8:	6993      	ldr	r3, [r2, #24]
 800a8da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a8de:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a8e0:	6822      	ldr	r2, [r4, #0]
 800a8e2:	6993      	ldr	r3, [r2, #24]
 800a8e4:	6929      	ldr	r1, [r5, #16]
 800a8e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a8ea:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800a8ec:	2000      	movs	r0, #0
      break;
 800a8ee:	e052      	b.n	800a996 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a8f0:	6800      	ldr	r0, [r0, #0]
 800a8f2:	f7ff fc2f 	bl	800a154 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a8f6:	6822      	ldr	r2, [r4, #0]
 800a8f8:	69d3      	ldr	r3, [r2, #28]
 800a8fa:	f043 0308 	orr.w	r3, r3, #8
 800a8fe:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a900:	6822      	ldr	r2, [r4, #0]
 800a902:	69d3      	ldr	r3, [r2, #28]
 800a904:	f023 0304 	bic.w	r3, r3, #4
 800a908:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a90a:	6822      	ldr	r2, [r4, #0]
 800a90c:	69d3      	ldr	r3, [r2, #28]
 800a90e:	6929      	ldr	r1, [r5, #16]
 800a910:	430b      	orrs	r3, r1
 800a912:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800a914:	2000      	movs	r0, #0
      break;
 800a916:	e03e      	b.n	800a996 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a918:	6800      	ldr	r0, [r0, #0]
 800a91a:	f7ff fc65 	bl	800a1e8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a91e:	6822      	ldr	r2, [r4, #0]
 800a920:	69d3      	ldr	r3, [r2, #28]
 800a922:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a926:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a928:	6822      	ldr	r2, [r4, #0]
 800a92a:	69d3      	ldr	r3, [r2, #28]
 800a92c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a930:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a932:	6822      	ldr	r2, [r4, #0]
 800a934:	69d3      	ldr	r3, [r2, #28]
 800a936:	6929      	ldr	r1, [r5, #16]
 800a938:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a93c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800a93e:	2000      	movs	r0, #0
      break;
 800a940:	e029      	b.n	800a996 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a942:	6800      	ldr	r0, [r0, #0]
 800a944:	f7ff fc8a 	bl	800a25c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a948:	6822      	ldr	r2, [r4, #0]
 800a94a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a94c:	f043 0308 	orr.w	r3, r3, #8
 800a950:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a952:	6822      	ldr	r2, [r4, #0]
 800a954:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a956:	f023 0304 	bic.w	r3, r3, #4
 800a95a:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a95c:	6822      	ldr	r2, [r4, #0]
 800a95e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a960:	6929      	ldr	r1, [r5, #16]
 800a962:	430b      	orrs	r3, r1
 800a964:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800a966:	2000      	movs	r0, #0
      break;
 800a968:	e015      	b.n	800a996 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a96a:	6800      	ldr	r0, [r0, #0]
 800a96c:	f7ff fcb0 	bl	800a2d0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a970:	6822      	ldr	r2, [r4, #0]
 800a972:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a974:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a978:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a97a:	6822      	ldr	r2, [r4, #0]
 800a97c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a97e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a982:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a984:	6822      	ldr	r2, [r4, #0]
 800a986:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a988:	6929      	ldr	r1, [r5, #16]
 800a98a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a98e:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800a990:	2000      	movs	r0, #0
      break;
 800a992:	e000      	b.n	800a996 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 800a994:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800a996:	2300      	movs	r3, #0
 800a998:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800a99c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800a99e:	2002      	movs	r0, #2
 800a9a0:	e7fc      	b.n	800a99c <HAL_TIM_PWM_ConfigChannel+0x134>

0800a9a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a9a2:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a9a4:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9a6:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a9aa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800a9ae:	430a      	orrs	r2, r1
 800a9b0:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9b4:	6082      	str	r2, [r0, #8]
}
 800a9b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800a9bc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	f000 808f 	beq.w	800aae4 <HAL_TIM_ConfigClockSource+0x128>
{
 800a9c6:	b510      	push	{r4, lr}
 800a9c8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800a9d0:	2302      	movs	r3, #2
 800a9d2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800a9d6:	6802      	ldr	r2, [r0, #0]
 800a9d8:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9da:	4b43      	ldr	r3, [pc, #268]	@ (800aae8 <HAL_TIM_ConfigClockSource+0x12c>)
 800a9dc:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800a9de:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800a9e0:	680b      	ldr	r3, [r1, #0]
 800a9e2:	2b70      	cmp	r3, #112	@ 0x70
 800a9e4:	d055      	beq.n	800aa92 <HAL_TIM_ConfigClockSource+0xd6>
 800a9e6:	d831      	bhi.n	800aa4c <HAL_TIM_ConfigClockSource+0x90>
 800a9e8:	2b50      	cmp	r3, #80	@ 0x50
 800a9ea:	d06c      	beq.n	800aac6 <HAL_TIM_ConfigClockSource+0x10a>
 800a9ec:	d90c      	bls.n	800aa08 <HAL_TIM_ConfigClockSource+0x4c>
 800a9ee:	2b60      	cmp	r3, #96	@ 0x60
 800a9f0:	d12a      	bne.n	800aa48 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9f2:	68ca      	ldr	r2, [r1, #12]
 800a9f4:	6849      	ldr	r1, [r1, #4]
 800a9f6:	6820      	ldr	r0, [r4, #0]
 800a9f8:	f7ff fcb7 	bl	800a36a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a9fc:	2160      	movs	r1, #96	@ 0x60
 800a9fe:	6820      	ldr	r0, [r4, #0]
 800aa00:	f7ff fcc8 	bl	800a394 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800aa04:	2000      	movs	r0, #0
      break;
 800aa06:	e035      	b.n	800aa74 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800aa08:	2b40      	cmp	r3, #64	@ 0x40
 800aa0a:	d10a      	bne.n	800aa22 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa0c:	68ca      	ldr	r2, [r1, #12]
 800aa0e:	6849      	ldr	r1, [r1, #4]
 800aa10:	6820      	ldr	r0, [r4, #0]
 800aa12:	f7ff fc97 	bl	800a344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa16:	2140      	movs	r1, #64	@ 0x40
 800aa18:	6820      	ldr	r0, [r4, #0]
 800aa1a:	f7ff fcbb 	bl	800a394 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800aa1e:	2000      	movs	r0, #0
      break;
 800aa20:	e028      	b.n	800aa74 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800aa22:	d85b      	bhi.n	800aadc <HAL_TIM_ConfigClockSource+0x120>
 800aa24:	2b20      	cmp	r3, #32
 800aa26:	d007      	beq.n	800aa38 <HAL_TIM_ConfigClockSource+0x7c>
 800aa28:	d903      	bls.n	800aa32 <HAL_TIM_ConfigClockSource+0x76>
 800aa2a:	2b30      	cmp	r3, #48	@ 0x30
 800aa2c:	d004      	beq.n	800aa38 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800aa2e:	2001      	movs	r0, #1
 800aa30:	e020      	b.n	800aa74 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800aa32:	b10b      	cbz	r3, 800aa38 <HAL_TIM_ConfigClockSource+0x7c>
 800aa34:	2b10      	cmp	r3, #16
 800aa36:	d105      	bne.n	800aa44 <HAL_TIM_ConfigClockSource+0x88>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa38:	4619      	mov	r1, r3
 800aa3a:	6820      	ldr	r0, [r4, #0]
 800aa3c:	f7ff fcaa 	bl	800a394 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800aa40:	2000      	movs	r0, #0
      break;
 800aa42:	e017      	b.n	800aa74 <HAL_TIM_ConfigClockSource+0xb8>
      status = HAL_ERROR;
 800aa44:	2001      	movs	r0, #1
 800aa46:	e015      	b.n	800aa74 <HAL_TIM_ConfigClockSource+0xb8>
 800aa48:	2001      	movs	r0, #1
 800aa4a:	e013      	b.n	800aa74 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800aa4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa50:	d02c      	beq.n	800aaac <HAL_TIM_ConfigClockSource+0xf0>
 800aa52:	d90b      	bls.n	800aa6c <HAL_TIM_ConfigClockSource+0xb0>
 800aa54:	4a25      	ldr	r2, [pc, #148]	@ (800aaec <HAL_TIM_ConfigClockSource+0x130>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d0ee      	beq.n	800aa38 <HAL_TIM_ConfigClockSource+0x7c>
 800aa5a:	d912      	bls.n	800aa82 <HAL_TIM_ConfigClockSource+0xc6>
 800aa5c:	4a24      	ldr	r2, [pc, #144]	@ (800aaf0 <HAL_TIM_ConfigClockSource+0x134>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d0ea      	beq.n	800aa38 <HAL_TIM_ConfigClockSource+0x7c>
 800aa62:	3210      	adds	r2, #16
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d0e7      	beq.n	800aa38 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800aa68:	2001      	movs	r0, #1
 800aa6a:	e003      	b.n	800aa74 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800aa6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa70:	d136      	bne.n	800aae0 <HAL_TIM_ConfigClockSource+0x124>
 800aa72:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800aa74:	2301      	movs	r3, #1
 800aa76:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800aa80:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800aa82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa86:	d0d7      	beq.n	800aa38 <HAL_TIM_ConfigClockSource+0x7c>
 800aa88:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aa8c:	d0d4      	beq.n	800aa38 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800aa8e:	2001      	movs	r0, #1
 800aa90:	e7f0      	b.n	800aa74 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_ETR_SetConfig(htim->Instance,
 800aa92:	68cb      	ldr	r3, [r1, #12]
 800aa94:	684a      	ldr	r2, [r1, #4]
 800aa96:	6889      	ldr	r1, [r1, #8]
 800aa98:	6820      	ldr	r0, [r4, #0]
 800aa9a:	f7ff ff82 	bl	800a9a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800aa9e:	6822      	ldr	r2, [r4, #0]
 800aaa0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aaa2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800aaa6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800aaa8:	2000      	movs	r0, #0
      break;
 800aaaa:	e7e3      	b.n	800aa74 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_ETR_SetConfig(htim->Instance,
 800aaac:	68cb      	ldr	r3, [r1, #12]
 800aaae:	684a      	ldr	r2, [r1, #4]
 800aab0:	6889      	ldr	r1, [r1, #8]
 800aab2:	6820      	ldr	r0, [r4, #0]
 800aab4:	f7ff ff75 	bl	800a9a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aab8:	6822      	ldr	r2, [r4, #0]
 800aaba:	6893      	ldr	r3, [r2, #8]
 800aabc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800aac0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800aac2:	2000      	movs	r0, #0
      break;
 800aac4:	e7d6      	b.n	800aa74 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aac6:	68ca      	ldr	r2, [r1, #12]
 800aac8:	6849      	ldr	r1, [r1, #4]
 800aaca:	6820      	ldr	r0, [r4, #0]
 800aacc:	f7ff fc3a 	bl	800a344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aad0:	2150      	movs	r1, #80	@ 0x50
 800aad2:	6820      	ldr	r0, [r4, #0]
 800aad4:	f7ff fc5e 	bl	800a394 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800aad8:	2000      	movs	r0, #0
      break;
 800aada:	e7cb      	b.n	800aa74 <HAL_TIM_ConfigClockSource+0xb8>
      status = HAL_ERROR;
 800aadc:	2001      	movs	r0, #1
 800aade:	e7c9      	b.n	800aa74 <HAL_TIM_ConfigClockSource+0xb8>
 800aae0:	2001      	movs	r0, #1
 800aae2:	e7c7      	b.n	800aa74 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 800aae4:	2002      	movs	r0, #2
}
 800aae6:	4770      	bx	lr
 800aae8:	ffce0088 	.word	0xffce0088
 800aaec:	00100020 	.word	0x00100020
 800aaf0:	00100030 	.word	0x00100030

0800aaf4 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aaf4:	f001 011f 	and.w	r1, r1, #31
 800aaf8:	f04f 0c01 	mov.w	ip, #1
 800aafc:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab00:	6a03      	ldr	r3, [r0, #32]
 800ab02:	ea23 030c 	bic.w	r3, r3, ip
 800ab06:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab08:	6a03      	ldr	r3, [r0, #32]
 800ab0a:	408a      	lsls	r2, r1
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	6203      	str	r3, [r0, #32]
}
 800ab10:	4770      	bx	lr
	...

0800ab14 <HAL_TIM_PWM_Start>:
{
 800ab14:	b510      	push	{r4, lr}
 800ab16:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab18:	2910      	cmp	r1, #16
 800ab1a:	d83d      	bhi.n	800ab98 <HAL_TIM_PWM_Start+0x84>
 800ab1c:	e8df f001 	tbb	[pc, r1]
 800ab20:	3c3c3c09 	.word	0x3c3c3c09
 800ab24:	3c3c3c20 	.word	0x3c3c3c20
 800ab28:	3c3c3c27 	.word	0x3c3c3c27
 800ab2c:	3c3c3c2e 	.word	0x3c3c3c2e
 800ab30:	35          	.byte	0x35
 800ab31:	00          	.byte	0x00
 800ab32:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	3b01      	subs	r3, #1
 800ab3a:	bf18      	it	ne
 800ab3c:	2301      	movne	r3, #1
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f040 8096 	bne.w	800ac70 <HAL_TIM_PWM_Start+0x15c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab44:	2910      	cmp	r1, #16
 800ab46:	f200 8081 	bhi.w	800ac4c <HAL_TIM_PWM_Start+0x138>
 800ab4a:	e8df f001 	tbb	[pc, r1]
 800ab4e:	7f2c      	.short	0x7f2c
 800ab50:	7f6f7f7f 	.word	0x7f6f7f7f
 800ab54:	7f737f7f 	.word	0x7f737f7f
 800ab58:	7f777f7f 	.word	0x7f777f7f
 800ab5c:	7f7f      	.short	0x7f7f
 800ab5e:	7b          	.byte	0x7b
 800ab5f:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab60:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	3b01      	subs	r3, #1
 800ab68:	bf18      	it	ne
 800ab6a:	2301      	movne	r3, #1
 800ab6c:	e7e7      	b.n	800ab3e <HAL_TIM_PWM_Start+0x2a>
 800ab6e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	3b01      	subs	r3, #1
 800ab76:	bf18      	it	ne
 800ab78:	2301      	movne	r3, #1
 800ab7a:	e7e0      	b.n	800ab3e <HAL_TIM_PWM_Start+0x2a>
 800ab7c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	3b01      	subs	r3, #1
 800ab84:	bf18      	it	ne
 800ab86:	2301      	movne	r3, #1
 800ab88:	e7d9      	b.n	800ab3e <HAL_TIM_PWM_Start+0x2a>
 800ab8a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	3b01      	subs	r3, #1
 800ab92:	bf18      	it	ne
 800ab94:	2301      	movne	r3, #1
 800ab96:	e7d2      	b.n	800ab3e <HAL_TIM_PWM_Start+0x2a>
 800ab98:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	bf18      	it	ne
 800aba2:	2301      	movne	r3, #1
 800aba4:	e7cb      	b.n	800ab3e <HAL_TIM_PWM_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aba6:	2302      	movs	r3, #2
 800aba8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800abac:	2201      	movs	r2, #1
 800abae:	6820      	ldr	r0, [r4, #0]
 800abb0:	f7ff ffa0 	bl	800aaf4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800abb4:	6823      	ldr	r3, [r4, #0]
 800abb6:	4930      	ldr	r1, [pc, #192]	@ (800ac78 <HAL_TIM_PWM_Start+0x164>)
 800abb8:	4a30      	ldr	r2, [pc, #192]	@ (800ac7c <HAL_TIM_PWM_Start+0x168>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	bf18      	it	ne
 800abbe:	428b      	cmpne	r3, r1
 800abc0:	d00b      	beq.n	800abda <HAL_TIM_PWM_Start+0xc6>
 800abc2:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d007      	beq.n	800abda <HAL_TIM_PWM_Start+0xc6>
 800abca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800abce:	4293      	cmp	r3, r2
 800abd0:	d003      	beq.n	800abda <HAL_TIM_PWM_Start+0xc6>
 800abd2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d103      	bne.n	800abe2 <HAL_TIM_PWM_Start+0xce>
    __HAL_TIM_MOE_ENABLE(htim);
 800abda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800abdc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800abe0:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	4a24      	ldr	r2, [pc, #144]	@ (800ac78 <HAL_TIM_PWM_Start+0x164>)
 800abe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abea:	bf18      	it	ne
 800abec:	4293      	cmpne	r3, r2
 800abee:	d031      	beq.n	800ac54 <HAL_TIM_PWM_Start+0x140>
 800abf0:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d02d      	beq.n	800ac54 <HAL_TIM_PWM_Start+0x140>
 800abf8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d029      	beq.n	800ac54 <HAL_TIM_PWM_Start+0x140>
 800ac00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d025      	beq.n	800ac54 <HAL_TIM_PWM_Start+0x140>
 800ac08:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d021      	beq.n	800ac54 <HAL_TIM_PWM_Start+0x140>
 800ac10:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d01d      	beq.n	800ac54 <HAL_TIM_PWM_Start+0x140>
 800ac18:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d019      	beq.n	800ac54 <HAL_TIM_PWM_Start+0x140>
    __HAL_TIM_ENABLE(htim);
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	f042 0201 	orr.w	r2, r2, #1
 800ac26:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800ac28:	2000      	movs	r0, #0
 800ac2a:	e022      	b.n	800ac72 <HAL_TIM_PWM_Start+0x15e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800ac32:	e7bb      	b.n	800abac <HAL_TIM_PWM_Start+0x98>
 800ac34:	2302      	movs	r3, #2
 800ac36:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800ac3a:	e7b7      	b.n	800abac <HAL_TIM_PWM_Start+0x98>
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800ac42:	e7b3      	b.n	800abac <HAL_TIM_PWM_Start+0x98>
 800ac44:	2302      	movs	r3, #2
 800ac46:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ac4a:	e7af      	b.n	800abac <HAL_TIM_PWM_Start+0x98>
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac52:	e7ab      	b.n	800abac <HAL_TIM_PWM_Start+0x98>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac54:	6899      	ldr	r1, [r3, #8]
 800ac56:	4a0a      	ldr	r2, [pc, #40]	@ (800ac80 <HAL_TIM_PWM_Start+0x16c>)
 800ac58:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac5a:	2a06      	cmp	r2, #6
 800ac5c:	bf18      	it	ne
 800ac5e:	f5b2 3f80 	cmpne.w	r2, #65536	@ 0x10000
 800ac62:	d007      	beq.n	800ac74 <HAL_TIM_PWM_Start+0x160>
      __HAL_TIM_ENABLE(htim);
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	f042 0201 	orr.w	r2, r2, #1
 800ac6a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	e000      	b.n	800ac72 <HAL_TIM_PWM_Start+0x15e>
    return HAL_ERROR;
 800ac70:	2001      	movs	r0, #1
}
 800ac72:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800ac74:	2000      	movs	r0, #0
 800ac76:	e7fc      	b.n	800ac72 <HAL_TIM_PWM_Start+0x15e>
 800ac78:	40010000 	.word	0x40010000
 800ac7c:	40010400 	.word	0x40010400
 800ac80:	00010007 	.word	0x00010007

0800ac84 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac84:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800ac88:	2a01      	cmp	r2, #1
 800ac8a:	d045      	beq.n	800ad18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
{
 800ac8c:	b470      	push	{r4, r5, r6}
 800ac8e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800ac90:	2201      	movs	r2, #1
 800ac92:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac96:	2202      	movs	r2, #2
 800ac98:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac9c:	6802      	ldr	r2, [r0, #0]
 800ac9e:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aca0:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aca2:	4e1e      	ldr	r6, [pc, #120]	@ (800ad1c <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800aca4:	4d1e      	ldr	r5, [pc, #120]	@ (800ad20 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 800aca6:	42aa      	cmp	r2, r5
 800aca8:	bf18      	it	ne
 800acaa:	42b2      	cmpne	r2, r6
 800acac:	d103      	bne.n	800acb6 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800acae:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800acb2:	684d      	ldr	r5, [r1, #4]
 800acb4:	4328      	orrs	r0, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800acb6:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800acba:	680d      	ldr	r5, [r1, #0]
 800acbc:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800acbe:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	4816      	ldr	r0, [pc, #88]	@ (800ad1c <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800acc4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800acc8:	bf18      	it	ne
 800acca:	4282      	cmpne	r2, r0
 800accc:	d017      	beq.n	800acfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800acce:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 800acd2:	4282      	cmp	r2, r0
 800acd4:	d013      	beq.n	800acfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800acd6:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800acda:	4282      	cmp	r2, r0
 800acdc:	d00f      	beq.n	800acfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800acde:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800ace2:	4282      	cmp	r2, r0
 800ace4:	d00b      	beq.n	800acfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800ace6:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 800acea:	4282      	cmp	r2, r0
 800acec:	d007      	beq.n	800acfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800acee:	f5a0 406c 	sub.w	r0, r0, #60416	@ 0xec00
 800acf2:	4282      	cmp	r2, r0
 800acf4:	d003      	beq.n	800acfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800acf6:	f500 3094 	add.w	r0, r0, #75776	@ 0x12800
 800acfa:	4282      	cmp	r2, r0
 800acfc:	d104      	bne.n	800ad08 <HAL_TIMEx_MasterConfigSynchronization+0x84>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800acfe:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad02:	6889      	ldr	r1, [r1, #8]
 800ad04:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad06:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad08:	2201      	movs	r2, #1
 800ad0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ad0e:	2000      	movs	r0, #0
 800ad10:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800ad14:	bc70      	pop	{r4, r5, r6}
 800ad16:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ad18:	2002      	movs	r0, #2
}
 800ad1a:	4770      	bx	lr
 800ad1c:	40010000 	.word	0x40010000
 800ad20:	40010400 	.word	0x40010400

0800ad24 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad24:	4770      	bx	lr

0800ad26 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad26:	4770      	bx	lr

0800ad28 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad28:	4770      	bx	lr

0800ad2a <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ad2a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2c:	e852 3f00 	ldrex	r3, [r2]
 800ad30:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad34:	e842 3100 	strex	r1, r3, [r2]
 800ad38:	2900      	cmp	r1, #0
 800ad3a:	d1f6      	bne.n	800ad2a <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ad3c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3e:	f102 0308 	add.w	r3, r2, #8
 800ad42:	e853 3f00 	ldrex	r3, [r3]
 800ad46:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4a:	3208      	adds	r2, #8
 800ad4c:	e842 3100 	strex	r1, r3, [r2]
 800ad50:	2900      	cmp	r1, #0
 800ad52:	d1f3      	bne.n	800ad3c <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad54:	2320      	movs	r3, #32
 800ad56:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
}
 800ad5a:	4770      	bx	lr

0800ad5c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad5c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5e:	e852 3f00 	ldrex	r3, [r2]
 800ad62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad66:	e842 3100 	strex	r1, r3, [r2]
 800ad6a:	2900      	cmp	r1, #0
 800ad6c:	d1f6      	bne.n	800ad5c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad6e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad70:	f102 0308 	add.w	r3, r2, #8
 800ad74:	e853 1f00 	ldrex	r1, [r3]
 800ad78:	4b0d      	ldr	r3, [pc, #52]	@ (800adb0 <UART_EndRxTransfer+0x54>)
 800ad7a:	400b      	ands	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7c:	3208      	adds	r2, #8
 800ad7e:	e842 3100 	strex	r1, r3, [r2]
 800ad82:	2900      	cmp	r1, #0
 800ad84:	d1f3      	bne.n	800ad6e <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad86:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d006      	beq.n	800ad9a <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad8c:	2320      	movs	r3, #32
 800ad8e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad92:	2300      	movs	r3, #0
 800ad94:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad96:	6703      	str	r3, [r0, #112]	@ 0x70
}
 800ad98:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad9a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9c:	e852 3f00 	ldrex	r3, [r2]
 800ada0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada4:	e842 3100 	strex	r1, r3, [r2]
 800ada8:	2900      	cmp	r1, #0
 800adaa:	d1f6      	bne.n	800ad9a <UART_EndRxTransfer+0x3e>
 800adac:	e7ee      	b.n	800ad8c <UART_EndRxTransfer+0x30>
 800adae:	bf00      	nop
 800adb0:	effffffe 	.word	0xeffffffe

0800adb4 <HAL_UART_Transmit_DMA>:
{
 800adb4:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800adb6:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800adba:	2a20      	cmp	r2, #32
 800adbc:	d14a      	bne.n	800ae54 <HAL_UART_Transmit_DMA+0xa0>
{
 800adbe:	b510      	push	{r4, lr}
 800adc0:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	bf18      	it	ne
 800adc6:	2900      	cmpne	r1, #0
 800adc8:	d046      	beq.n	800ae58 <HAL_UART_Transmit_DMA+0xa4>
    __HAL_LOCK(huart);
 800adca:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 800adce:	2a01      	cmp	r2, #1
 800add0:	d044      	beq.n	800ae5c <HAL_UART_Transmit_DMA+0xa8>
 800add2:	2201      	movs	r2, #1
 800add4:	f880 2080 	strb.w	r2, [r0, #128]	@ 0x80
    huart->pTxBuffPtr  = pData;
 800add8:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800adda:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 800adde:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ade2:	2200      	movs	r2, #0
 800ade4:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ade8:	2221      	movs	r2, #33	@ 0x21
 800adea:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    if (huart->hdmatx != NULL)
 800adee:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800adf0:	b1e2      	cbz	r2, 800ae2c <HAL_UART_Transmit_DMA+0x78>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800adf2:	491b      	ldr	r1, [pc, #108]	@ (800ae60 <HAL_UART_Transmit_DMA+0xac>)
 800adf4:	63d1      	str	r1, [r2, #60]	@ 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800adf6:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800adf8:	491a      	ldr	r1, [pc, #104]	@ (800ae64 <HAL_UART_Transmit_DMA+0xb0>)
 800adfa:	6411      	str	r1, [r2, #64]	@ 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800adfc:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800adfe:	491a      	ldr	r1, [pc, #104]	@ (800ae68 <HAL_UART_Transmit_DMA+0xb4>)
 800ae00:	64d1      	str	r1, [r2, #76]	@ 0x4c
      huart->hdmatx->XferAbortCallback = NULL;
 800ae02:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800ae04:	2100      	movs	r1, #0
 800ae06:	6511      	str	r1, [r2, #80]	@ 0x50
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ae08:	6802      	ldr	r2, [r0, #0]
 800ae0a:	3228      	adds	r2, #40	@ 0x28
 800ae0c:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800ae0e:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 800ae10:	f7f9 fe64 	bl	8004adc <HAL_DMA_Start_IT>
 800ae14:	b150      	cbz	r0, 800ae2c <HAL_UART_Transmit_DMA+0x78>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ae16:	2310      	movs	r3, #16
 800ae18:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        __HAL_UNLOCK(huart);
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
        huart->gState = HAL_UART_STATE_READY;
 800ae22:	2320      	movs	r3, #32
 800ae24:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        return HAL_ERROR;
 800ae28:	2001      	movs	r0, #1
 800ae2a:	e012      	b.n	800ae52 <HAL_UART_Transmit_DMA+0x9e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ae2c:	6823      	ldr	r3, [r4, #0]
 800ae2e:	2240      	movs	r2, #64	@ 0x40
 800ae30:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800ae32:	2300      	movs	r3, #0
 800ae34:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae38:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3a:	f102 0308 	add.w	r3, r2, #8
 800ae3e:	e853 3f00 	ldrex	r3, [r3]
 800ae42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae46:	3208      	adds	r2, #8
 800ae48:	e842 3100 	strex	r1, r3, [r2]
 800ae4c:	2900      	cmp	r1, #0
 800ae4e:	d1f3      	bne.n	800ae38 <HAL_UART_Transmit_DMA+0x84>
    return HAL_OK;
 800ae50:	2000      	movs	r0, #0
}
 800ae52:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800ae54:	2002      	movs	r0, #2
}
 800ae56:	4770      	bx	lr
      return HAL_ERROR;
 800ae58:	2001      	movs	r0, #1
 800ae5a:	e7fa      	b.n	800ae52 <HAL_UART_Transmit_DMA+0x9e>
    __HAL_LOCK(huart);
 800ae5c:	2002      	movs	r0, #2
 800ae5e:	e7f8      	b.n	800ae52 <HAL_UART_Transmit_DMA+0x9e>
 800ae60:	0800ae6f 	.word	0x0800ae6f
 800ae64:	0800aedb 	.word	0x0800aedb
 800ae68:	0800aee9 	.word	0x0800aee9

0800ae6c <HAL_UART_TxCpltCallback>:
}
 800ae6c:	4770      	bx	lr

0800ae6e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ae6e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae70:	6b81      	ldr	r1, [r0, #56]	@ 0x38

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ae72:	69c3      	ldr	r3, [r0, #28]
 800ae74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae78:	d018      	beq.n	800aeac <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	f8a1 3056 	strh.w	r3, [r1, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae80:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae82:	f102 0308 	add.w	r3, r2, #8
 800ae86:	e853 3f00 	ldrex	r3, [r3]
 800ae8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8e:	3208      	adds	r2, #8
 800ae90:	e842 3000 	strex	r0, r3, [r2]
 800ae94:	2800      	cmp	r0, #0
 800ae96:	d1f3      	bne.n	800ae80 <UART_DMATransmitCplt+0x12>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae98:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9a:	e852 3f00 	ldrex	r3, [r2]
 800ae9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea2:	e842 3000 	strex	r0, r3, [r2]
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d1f6      	bne.n	800ae98 <UART_DMATransmitCplt+0x2a>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aeaa:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800aeac:	4608      	mov	r0, r1
 800aeae:	f7ff ffdd 	bl	800ae6c <HAL_UART_TxCpltCallback>
}
 800aeb2:	e7fa      	b.n	800aeaa <UART_DMATransmitCplt+0x3c>

0800aeb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aeb4:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aeb6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb8:	e852 3f00 	ldrex	r3, [r2]
 800aebc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec0:	e842 3100 	strex	r1, r3, [r2]
 800aec4:	2900      	cmp	r1, #0
 800aec6:	d1f6      	bne.n	800aeb6 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aec8:	2320      	movs	r3, #32
 800aeca:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aece:	2300      	movs	r3, #0
 800aed0:	6743      	str	r3, [r0, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aed2:	f7ff ffcb 	bl	800ae6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aed6:	bd08      	pop	{r3, pc}

0800aed8 <HAL_UART_TxHalfCpltCallback>:
}
 800aed8:	4770      	bx	lr

0800aeda <UART_DMATxHalfCplt>:
{
 800aeda:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800aedc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800aede:	f7ff fffb 	bl	800aed8 <HAL_UART_TxHalfCpltCallback>
}
 800aee2:	bd08      	pop	{r3, pc}

0800aee4 <HAL_UART_RxCpltCallback>:
}
 800aee4:	4770      	bx	lr

0800aee6 <HAL_UART_RxHalfCpltCallback>:
}
 800aee6:	4770      	bx	lr

0800aee8 <UART_DMAError>:
{
 800aee8:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aeea:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aeec:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aef0:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aef4:	6823      	ldr	r3, [r4, #0]
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aefc:	d001      	beq.n	800af02 <UART_DMAError+0x1a>
 800aefe:	2a21      	cmp	r2, #33	@ 0x21
 800af00:	d010      	beq.n	800af24 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800af02:	6823      	ldr	r3, [r4, #0]
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800af0a:	d001      	beq.n	800af10 <UART_DMAError+0x28>
 800af0c:	2d22      	cmp	r5, #34	@ 0x22
 800af0e:	d010      	beq.n	800af32 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800af10:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800af14:	f043 0310 	orr.w	r3, r3, #16
 800af18:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  HAL_UART_ErrorCallback(huart);
 800af1c:	4620      	mov	r0, r4
 800af1e:	f7f5 fd71 	bl	8000a04 <HAL_UART_ErrorCallback>
}
 800af22:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800af24:	2300      	movs	r3, #0
 800af26:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800af2a:	4620      	mov	r0, r4
 800af2c:	f7ff fefd 	bl	800ad2a <UART_EndTxTransfer>
 800af30:	e7e7      	b.n	800af02 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 800af32:	2300      	movs	r3, #0
 800af34:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800af38:	4620      	mov	r0, r4
 800af3a:	f7ff ff0f 	bl	800ad5c <UART_EndRxTransfer>
 800af3e:	e7e7      	b.n	800af10 <UART_DMAError+0x28>

0800af40 <UART_DMAAbortOnError>:
{
 800af40:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af42:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 800af44:	2300      	movs	r3, #0
 800af46:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800af4a:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 800af4e:	f7f5 fd59 	bl	8000a04 <HAL_UART_ErrorCallback>
}
 800af52:	bd08      	pop	{r3, pc}

0800af54 <HAL_UART_IRQHandler>:
{
 800af54:	b570      	push	{r4, r5, r6, lr}
 800af56:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800af58:	6802      	ldr	r2, [r0, #0]
 800af5a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af5c:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af5e:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800af60:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 800af64:	ea13 0f0c 	tst.w	r3, ip
 800af68:	d10d      	bne.n	800af86 <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af6a:	f013 0f20 	tst.w	r3, #32
 800af6e:	d010      	beq.n	800af92 <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af70:	f010 0f20 	tst.w	r0, #32
 800af74:	d102      	bne.n	800af7c <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af76:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 800af7a:	d00a      	beq.n	800af92 <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 800af7c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800af7e:	b393      	cbz	r3, 800afe6 <HAL_UART_IRQHandler+0x92>
        huart->RxISR(huart);
 800af80:	4620      	mov	r0, r4
 800af82:	4798      	blx	r3
      return;
 800af84:	e02f      	b.n	800afe6 <HAL_UART_IRQHandler+0x92>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800af86:	4d86      	ldr	r5, [pc, #536]	@ (800b1a0 <HAL_UART_IRQHandler+0x24c>)
 800af88:	400d      	ands	r5, r1
 800af8a:	d12d      	bne.n	800afe8 <HAL_UART_IRQHandler+0x94>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800af8c:	4e85      	ldr	r6, [pc, #532]	@ (800b1a4 <HAL_UART_IRQHandler+0x250>)
 800af8e:	4230      	tst	r0, r6
 800af90:	d12a      	bne.n	800afe8 <HAL_UART_IRQHandler+0x94>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af92:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 800af94:	2d01      	cmp	r5, #1
 800af96:	f000 80bd 	beq.w	800b114 <HAL_UART_IRQHandler+0x1c0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800af9a:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800af9e:	d003      	beq.n	800afa8 <HAL_UART_IRQHandler+0x54>
 800afa0:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 800afa4:	f040 818b 	bne.w	800b2be <HAL_UART_IRQHandler+0x36a>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800afa8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800afac:	d007      	beq.n	800afbe <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800afae:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800afb2:	f040 818b 	bne.w	800b2cc <HAL_UART_IRQHandler+0x378>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800afb6:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 800afba:	f040 8187 	bne.w	800b2cc <HAL_UART_IRQHandler+0x378>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800afbe:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800afc2:	d003      	beq.n	800afcc <HAL_UART_IRQHandler+0x78>
 800afc4:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800afc8:	f040 8187 	bne.w	800b2da <HAL_UART_IRQHandler+0x386>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800afcc:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800afd0:	d003      	beq.n	800afda <HAL_UART_IRQHandler+0x86>
 800afd2:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 800afd6:	f040 8184 	bne.w	800b2e2 <HAL_UART_IRQHandler+0x38e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800afda:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800afde:	d002      	beq.n	800afe6 <HAL_UART_IRQHandler+0x92>
 800afe0:	2800      	cmp	r0, #0
 800afe2:	f2c0 8182 	blt.w	800b2ea <HAL_UART_IRQHandler+0x396>
}
 800afe6:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800afe8:	f013 0f01 	tst.w	r3, #1
 800afec:	d009      	beq.n	800b002 <HAL_UART_IRQHandler+0xae>
 800afee:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800aff2:	d006      	beq.n	800b002 <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aff4:	2601      	movs	r6, #1
 800aff6:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aff8:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800affc:	4332      	orrs	r2, r6
 800affe:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b002:	f013 0f02 	tst.w	r3, #2
 800b006:	d00b      	beq.n	800b020 <HAL_UART_IRQHandler+0xcc>
 800b008:	f011 0f01 	tst.w	r1, #1
 800b00c:	d008      	beq.n	800b020 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b00e:	6822      	ldr	r2, [r4, #0]
 800b010:	2602      	movs	r6, #2
 800b012:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b014:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800b018:	f042 0204 	orr.w	r2, r2, #4
 800b01c:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b020:	f013 0f04 	tst.w	r3, #4
 800b024:	d00b      	beq.n	800b03e <HAL_UART_IRQHandler+0xea>
 800b026:	f011 0f01 	tst.w	r1, #1
 800b02a:	d008      	beq.n	800b03e <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b02c:	6822      	ldr	r2, [r4, #0]
 800b02e:	2604      	movs	r6, #4
 800b030:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b032:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800b036:	f042 0202 	orr.w	r2, r2, #2
 800b03a:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b03e:	f013 0f08 	tst.w	r3, #8
 800b042:	d00b      	beq.n	800b05c <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b044:	f010 0f20 	tst.w	r0, #32
 800b048:	d100      	bne.n	800b04c <HAL_UART_IRQHandler+0xf8>
 800b04a:	b13d      	cbz	r5, 800b05c <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b04c:	6822      	ldr	r2, [r4, #0]
 800b04e:	2508      	movs	r5, #8
 800b050:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b052:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800b056:	432a      	orrs	r2, r5
 800b058:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b05c:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800b060:	d00c      	beq.n	800b07c <HAL_UART_IRQHandler+0x128>
 800b062:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 800b066:	d009      	beq.n	800b07c <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b068:	6822      	ldr	r2, [r4, #0]
 800b06a:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800b06e:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b070:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800b074:	f042 0220 	orr.w	r2, r2, #32
 800b078:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b07c:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800b080:	2a00      	cmp	r2, #0
 800b082:	d0b0      	beq.n	800afe6 <HAL_UART_IRQHandler+0x92>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b084:	f013 0f20 	tst.w	r3, #32
 800b088:	d009      	beq.n	800b09e <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b08a:	f010 0f20 	tst.w	r0, #32
 800b08e:	d102      	bne.n	800b096 <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b090:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 800b094:	d003      	beq.n	800b09e <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 800b096:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b098:	b10b      	cbz	r3, 800b09e <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 800b09a:	4620      	mov	r0, r4
 800b09c:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800b09e:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b0a2:	6823      	ldr	r3, [r4, #0]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800b0aa:	d102      	bne.n	800b0b2 <HAL_UART_IRQHandler+0x15e>
 800b0ac:	f012 0f28 	tst.w	r2, #40	@ 0x28
 800b0b0:	d029      	beq.n	800b106 <HAL_UART_IRQHandler+0x1b2>
        UART_EndRxTransfer(huart);
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f7ff fe52 	bl	800ad5c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0b8:	6823      	ldr	r3, [r4, #0]
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800b0c0:	d01d      	beq.n	800b0fe <HAL_UART_IRQHandler+0x1aa>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0c2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c4:	f102 0308 	add.w	r3, r2, #8
 800b0c8:	e853 3f00 	ldrex	r3, [r3]
 800b0cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d0:	3208      	adds	r2, #8
 800b0d2:	e842 3100 	strex	r1, r3, [r2]
 800b0d6:	2900      	cmp	r1, #0
 800b0d8:	d1f3      	bne.n	800b0c2 <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 800b0da:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800b0dc:	b15b      	cbz	r3, 800b0f6 <HAL_UART_IRQHandler+0x1a2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b0de:	4a32      	ldr	r2, [pc, #200]	@ (800b1a8 <HAL_UART_IRQHandler+0x254>)
 800b0e0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b0e2:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800b0e4:	f7f9 ffe6 	bl	80050b4 <HAL_DMA_Abort_IT>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	f43f af7c 	beq.w	800afe6 <HAL_UART_IRQHandler+0x92>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b0ee:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800b0f0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800b0f2:	4798      	blx	r3
 800b0f4:	e777      	b.n	800afe6 <HAL_UART_IRQHandler+0x92>
            HAL_UART_ErrorCallback(huart);
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f7f5 fc84 	bl	8000a04 <HAL_UART_ErrorCallback>
 800b0fc:	e773      	b.n	800afe6 <HAL_UART_IRQHandler+0x92>
          HAL_UART_ErrorCallback(huart);
 800b0fe:	4620      	mov	r0, r4
 800b100:	f7f5 fc80 	bl	8000a04 <HAL_UART_ErrorCallback>
 800b104:	e76f      	b.n	800afe6 <HAL_UART_IRQHandler+0x92>
        HAL_UART_ErrorCallback(huart);
 800b106:	4620      	mov	r0, r4
 800b108:	f7f5 fc7c 	bl	8000a04 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b10c:	2300      	movs	r3, #0
 800b10e:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    return;
 800b112:	e768      	b.n	800afe6 <HAL_UART_IRQHandler+0x92>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b114:	f013 0f10 	tst.w	r3, #16
 800b118:	f43f af3f 	beq.w	800af9a <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b11c:	f010 0f10 	tst.w	r0, #16
 800b120:	f43f af3b 	beq.w	800af9a <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b124:	2310      	movs	r3, #16
 800b126:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b128:	6823      	ldr	r3, [r4, #0]
 800b12a:	689b      	ldr	r3, [r3, #8]
 800b12c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800b130:	f000 808d 	beq.w	800b24e <HAL_UART_IRQHandler+0x2fa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b134:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800b136:	6813      	ldr	r3, [r2, #0]
 800b138:	481c      	ldr	r0, [pc, #112]	@ (800b1ac <HAL_UART_IRQHandler+0x258>)
 800b13a:	491d      	ldr	r1, [pc, #116]	@ (800b1b0 <HAL_UART_IRQHandler+0x25c>)
 800b13c:	428b      	cmp	r3, r1
 800b13e:	bf18      	it	ne
 800b140:	4283      	cmpne	r3, r0
 800b142:	d037      	beq.n	800b1b4 <HAL_UART_IRQHandler+0x260>
 800b144:	3118      	adds	r1, #24
 800b146:	428b      	cmp	r3, r1
 800b148:	d034      	beq.n	800b1b4 <HAL_UART_IRQHandler+0x260>
 800b14a:	3118      	adds	r1, #24
 800b14c:	428b      	cmp	r3, r1
 800b14e:	d031      	beq.n	800b1b4 <HAL_UART_IRQHandler+0x260>
 800b150:	3118      	adds	r1, #24
 800b152:	428b      	cmp	r3, r1
 800b154:	d02e      	beq.n	800b1b4 <HAL_UART_IRQHandler+0x260>
 800b156:	3118      	adds	r1, #24
 800b158:	428b      	cmp	r3, r1
 800b15a:	d02b      	beq.n	800b1b4 <HAL_UART_IRQHandler+0x260>
 800b15c:	3118      	adds	r1, #24
 800b15e:	428b      	cmp	r3, r1
 800b160:	d028      	beq.n	800b1b4 <HAL_UART_IRQHandler+0x260>
 800b162:	3118      	adds	r1, #24
 800b164:	428b      	cmp	r3, r1
 800b166:	d025      	beq.n	800b1b4 <HAL_UART_IRQHandler+0x260>
 800b168:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800b16c:	428b      	cmp	r3, r1
 800b16e:	d021      	beq.n	800b1b4 <HAL_UART_IRQHandler+0x260>
 800b170:	3118      	adds	r1, #24
 800b172:	428b      	cmp	r3, r1
 800b174:	d01e      	beq.n	800b1b4 <HAL_UART_IRQHandler+0x260>
 800b176:	3118      	adds	r1, #24
 800b178:	428b      	cmp	r3, r1
 800b17a:	d01b      	beq.n	800b1b4 <HAL_UART_IRQHandler+0x260>
 800b17c:	3118      	adds	r1, #24
 800b17e:	428b      	cmp	r3, r1
 800b180:	d018      	beq.n	800b1b4 <HAL_UART_IRQHandler+0x260>
 800b182:	3118      	adds	r1, #24
 800b184:	428b      	cmp	r3, r1
 800b186:	d015      	beq.n	800b1b4 <HAL_UART_IRQHandler+0x260>
 800b188:	3118      	adds	r1, #24
 800b18a:	428b      	cmp	r3, r1
 800b18c:	d012      	beq.n	800b1b4 <HAL_UART_IRQHandler+0x260>
 800b18e:	3118      	adds	r1, #24
 800b190:	428b      	cmp	r3, r1
 800b192:	d00f      	beq.n	800b1b4 <HAL_UART_IRQHandler+0x260>
 800b194:	3118      	adds	r1, #24
 800b196:	428b      	cmp	r3, r1
 800b198:	d00c      	beq.n	800b1b4 <HAL_UART_IRQHandler+0x260>
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	e00b      	b.n	800b1b8 <HAL_UART_IRQHandler+0x264>
 800b1a0:	10000001 	.word	0x10000001
 800b1a4:	04000120 	.word	0x04000120
 800b1a8:	0800af41 	.word	0x0800af41
 800b1ac:	40020010 	.word	0x40020010
 800b1b0:	40020028 	.word	0x40020028
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f43f af14 	beq.w	800afe6 <HAL_UART_IRQHandler+0x92>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b1be:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800b1c2:	4299      	cmp	r1, r3
 800b1c4:	f67f af0f 	bls.w	800afe6 <HAL_UART_IRQHandler+0x92>
        huart->RxXferCount = nb_remaining_rx_data;
 800b1c8:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b1cc:	69d3      	ldr	r3, [r2, #28]
 800b1ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1d2:	d031      	beq.n	800b238 <HAL_UART_IRQHandler+0x2e4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1d4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d6:	e852 3f00 	ldrex	r3, [r2]
 800b1da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1de:	e842 3100 	strex	r1, r3, [r2]
 800b1e2:	2900      	cmp	r1, #0
 800b1e4:	d1f6      	bne.n	800b1d4 <HAL_UART_IRQHandler+0x280>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1e6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e8:	f102 0308 	add.w	r3, r2, #8
 800b1ec:	e853 3f00 	ldrex	r3, [r3]
 800b1f0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f4:	3208      	adds	r2, #8
 800b1f6:	e842 3100 	strex	r1, r3, [r2]
 800b1fa:	2900      	cmp	r1, #0
 800b1fc:	d1f3      	bne.n	800b1e6 <HAL_UART_IRQHandler+0x292>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1fe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b200:	f102 0308 	add.w	r3, r2, #8
 800b204:	e853 3f00 	ldrex	r3, [r3]
 800b208:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b20c:	3208      	adds	r2, #8
 800b20e:	e842 3100 	strex	r1, r3, [r2]
 800b212:	2900      	cmp	r1, #0
 800b214:	d1f3      	bne.n	800b1fe <HAL_UART_IRQHandler+0x2aa>
          huart->RxState = HAL_UART_STATE_READY;
 800b216:	2320      	movs	r3, #32
 800b218:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b21c:	2300      	movs	r3, #0
 800b21e:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b220:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b222:	e852 3f00 	ldrex	r3, [r2]
 800b226:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b22a:	e842 3100 	strex	r1, r3, [r2]
 800b22e:	2900      	cmp	r1, #0
 800b230:	d1f6      	bne.n	800b220 <HAL_UART_IRQHandler+0x2cc>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b232:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800b234:	f7f9 fd9e 	bl	8004d74 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b238:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800b23c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800b240:	b29b      	uxth	r3, r3
 800b242:	1ac9      	subs	r1, r1, r3
 800b244:	b289      	uxth	r1, r1
 800b246:	4620      	mov	r0, r4
 800b248:	f7f6 fe50 	bl	8001eec <HAL_UARTEx_RxEventCallback>
      return;
 800b24c:	e6cb      	b.n	800afe6 <HAL_UART_IRQHandler+0x92>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b24e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800b252:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800b256:	b29b      	uxth	r3, r3
 800b258:	1ac9      	subs	r1, r1, r3
 800b25a:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800b25c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800b260:	b29b      	uxth	r3, r3
 800b262:	2b00      	cmp	r3, #0
 800b264:	f43f aebf 	beq.w	800afe6 <HAL_UART_IRQHandler+0x92>
          && (nb_rx_data > 0U))
 800b268:	2900      	cmp	r1, #0
 800b26a:	f43f aebc 	beq.w	800afe6 <HAL_UART_IRQHandler+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b26e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b270:	e852 3f00 	ldrex	r3, [r2]
 800b274:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b278:	e842 3000 	strex	r0, r3, [r2]
 800b27c:	2800      	cmp	r0, #0
 800b27e:	d1f6      	bne.n	800b26e <HAL_UART_IRQHandler+0x31a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b280:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b282:	f102 0308 	add.w	r3, r2, #8
 800b286:	e853 0f00 	ldrex	r0, [r3]
 800b28a:	4b1a      	ldr	r3, [pc, #104]	@ (800b2f4 <HAL_UART_IRQHandler+0x3a0>)
 800b28c:	4003      	ands	r3, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b28e:	3208      	adds	r2, #8
 800b290:	e842 3000 	strex	r0, r3, [r2]
 800b294:	2800      	cmp	r0, #0
 800b296:	d1f3      	bne.n	800b280 <HAL_UART_IRQHandler+0x32c>
        huart->RxState = HAL_UART_STATE_READY;
 800b298:	2320      	movs	r3, #32
 800b29a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 800b2a2:	6723      	str	r3, [r4, #112]	@ 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2a4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a6:	e852 3f00 	ldrex	r3, [r2]
 800b2aa:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ae:	e842 3000 	strex	r0, r3, [r2]
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	d1f6      	bne.n	800b2a4 <HAL_UART_IRQHandler+0x350>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f7f6 fe18 	bl	8001eec <HAL_UARTEx_RxEventCallback>
      return;
 800b2bc:	e693      	b.n	800afe6 <HAL_UART_IRQHandler+0x92>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b2be:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b2c2:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	f000 fd67 	bl	800bd98 <HAL_UARTEx_WakeupCallback>
    return;
 800b2ca:	e68c      	b.n	800afe6 <HAL_UART_IRQHandler+0x92>
    if (huart->TxISR != NULL)
 800b2cc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	f43f ae89 	beq.w	800afe6 <HAL_UART_IRQHandler+0x92>
      huart->TxISR(huart);
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	4798      	blx	r3
    return;
 800b2d8:	e685      	b.n	800afe6 <HAL_UART_IRQHandler+0x92>
    UART_EndTransmit_IT(huart);
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f7ff fdea 	bl	800aeb4 <UART_EndTransmit_IT>
    return;
 800b2e0:	e681      	b.n	800afe6 <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	f000 fd5a 	bl	800bd9c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800b2e8:	e67d      	b.n	800afe6 <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f000 fd55 	bl	800bd9a <HAL_UARTEx_RxFifoFullCallback>
    return;
 800b2f0:	e679      	b.n	800afe6 <HAL_UART_IRQHandler+0x92>
 800b2f2:	bf00      	nop
 800b2f4:	effffffe 	.word	0xeffffffe

0800b2f8 <UART_DMARxHalfCplt>:
{
 800b2f8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2fa:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2fc:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d002      	beq.n	800b308 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800b302:	f7ff fdf0 	bl	800aee6 <HAL_UART_RxHalfCpltCallback>
}
 800b306:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b308:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800b30c:	0849      	lsrs	r1, r1, #1
 800b30e:	f7f6 fded 	bl	8001eec <HAL_UARTEx_RxEventCallback>
 800b312:	e7f8      	b.n	800b306 <UART_DMARxHalfCplt+0xe>

0800b314 <UART_DMAReceiveCplt>:
{
 800b314:	b508      	push	{r3, lr}
 800b316:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b318:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b31a:	69db      	ldr	r3, [r3, #28]
 800b31c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b320:	d029      	beq.n	800b376 <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 800b322:	2300      	movs	r3, #0
 800b324:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b328:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32a:	e852 3f00 	ldrex	r3, [r2]
 800b32e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b332:	e842 3100 	strex	r1, r3, [r2]
 800b336:	2900      	cmp	r1, #0
 800b338:	d1f6      	bne.n	800b328 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b33a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33c:	f102 0308 	add.w	r3, r2, #8
 800b340:	e853 3f00 	ldrex	r3, [r3]
 800b344:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b348:	3208      	adds	r2, #8
 800b34a:	e842 3100 	strex	r1, r3, [r2]
 800b34e:	2900      	cmp	r1, #0
 800b350:	d1f3      	bne.n	800b33a <UART_DMAReceiveCplt+0x26>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b352:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b354:	f102 0308 	add.w	r3, r2, #8
 800b358:	e853 3f00 	ldrex	r3, [r3]
 800b35c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b360:	3208      	adds	r2, #8
 800b362:	e842 3100 	strex	r1, r3, [r2]
 800b366:	2900      	cmp	r1, #0
 800b368:	d1f3      	bne.n	800b352 <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 800b36a:	2320      	movs	r3, #32
 800b36c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b370:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800b372:	2b01      	cmp	r3, #1
 800b374:	d005      	beq.n	800b382 <UART_DMAReceiveCplt+0x6e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b376:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d00c      	beq.n	800b396 <UART_DMAReceiveCplt+0x82>
    HAL_UART_RxCpltCallback(huart);
 800b37c:	f7ff fdb2 	bl	800aee4 <HAL_UART_RxCpltCallback>
}
 800b380:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b382:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b384:	e852 3f00 	ldrex	r3, [r2]
 800b388:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38c:	e842 3100 	strex	r1, r3, [r2]
 800b390:	2900      	cmp	r1, #0
 800b392:	d1f6      	bne.n	800b382 <UART_DMAReceiveCplt+0x6e>
 800b394:	e7ef      	b.n	800b376 <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b396:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800b39a:	f7f6 fda7 	bl	8001eec <HAL_UARTEx_RxEventCallback>
 800b39e:	e7ef      	b.n	800b380 <UART_DMAReceiveCplt+0x6c>

0800b3a0 <UART_SetConfig>:
{
 800b3a0:	b570      	push	{r4, r5, r6, lr}
 800b3a2:	b086      	sub	sp, #24
 800b3a4:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800b3a6:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3a8:	6883      	ldr	r3, [r0, #8]
 800b3aa:	6902      	ldr	r2, [r0, #16]
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	6942      	ldr	r2, [r0, #20]
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	69c2      	ldr	r2, [r0, #28]
 800b3b4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3b6:	6808      	ldr	r0, [r1, #0]
 800b3b8:	4a88      	ldr	r2, [pc, #544]	@ (800b5dc <UART_SetConfig+0x23c>)
 800b3ba:	4002      	ands	r2, r0
 800b3bc:	431a      	orrs	r2, r3
 800b3be:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3c0:	6822      	ldr	r2, [r4, #0]
 800b3c2:	6853      	ldr	r3, [r2, #4]
 800b3c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800b3c8:	68e1      	ldr	r1, [r4, #12]
 800b3ca:	430b      	orrs	r3, r1
 800b3cc:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b3ce:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b3d0:	6822      	ldr	r2, [r4, #0]
 800b3d2:	4b83      	ldr	r3, [pc, #524]	@ (800b5e0 <UART_SetConfig+0x240>)
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d001      	beq.n	800b3dc <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 800b3d8:	6a23      	ldr	r3, [r4, #32]
 800b3da:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3dc:	6890      	ldr	r0, [r2, #8]
 800b3de:	4b81      	ldr	r3, [pc, #516]	@ (800b5e4 <UART_SetConfig+0x244>)
 800b3e0:	4003      	ands	r3, r0
 800b3e2:	430b      	orrs	r3, r1
 800b3e4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b3e6:	6822      	ldr	r2, [r4, #0]
 800b3e8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b3ea:	f023 030f 	bic.w	r3, r3, #15
 800b3ee:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b3f0:	430b      	orrs	r3, r1
 800b3f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b3f4:	6822      	ldr	r2, [r4, #0]
 800b3f6:	4b7c      	ldr	r3, [pc, #496]	@ (800b5e8 <UART_SetConfig+0x248>)
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d021      	beq.n	800b440 <UART_SetConfig+0xa0>
 800b3fc:	4b7b      	ldr	r3, [pc, #492]	@ (800b5ec <UART_SetConfig+0x24c>)
 800b3fe:	429a      	cmp	r2, r3
 800b400:	f000 808c 	beq.w	800b51c <UART_SetConfig+0x17c>
 800b404:	4b7a      	ldr	r3, [pc, #488]	@ (800b5f0 <UART_SetConfig+0x250>)
 800b406:	429a      	cmp	r2, r3
 800b408:	f000 80a2 	beq.w	800b550 <UART_SetConfig+0x1b0>
 800b40c:	4b79      	ldr	r3, [pc, #484]	@ (800b5f4 <UART_SetConfig+0x254>)
 800b40e:	429a      	cmp	r2, r3
 800b410:	f000 80b5 	beq.w	800b57e <UART_SetConfig+0x1de>
 800b414:	4b78      	ldr	r3, [pc, #480]	@ (800b5f8 <UART_SetConfig+0x258>)
 800b416:	429a      	cmp	r2, r3
 800b418:	f000 80c8 	beq.w	800b5ac <UART_SetConfig+0x20c>
 800b41c:	4b77      	ldr	r3, [pc, #476]	@ (800b5fc <UART_SetConfig+0x25c>)
 800b41e:	429a      	cmp	r2, r3
 800b420:	f000 80f4 	beq.w	800b60c <UART_SetConfig+0x26c>
 800b424:	4b76      	ldr	r3, [pc, #472]	@ (800b600 <UART_SetConfig+0x260>)
 800b426:	429a      	cmp	r2, r3
 800b428:	f000 8119 	beq.w	800b65e <UART_SetConfig+0x2be>
 800b42c:	4b75      	ldr	r3, [pc, #468]	@ (800b604 <UART_SetConfig+0x264>)
 800b42e:	429a      	cmp	r2, r3
 800b430:	f000 812c 	beq.w	800b68c <UART_SetConfig+0x2ec>
 800b434:	4b6a      	ldr	r3, [pc, #424]	@ (800b5e0 <UART_SetConfig+0x240>)
 800b436:	429a      	cmp	r2, r3
 800b438:	f000 813f 	beq.w	800b6ba <UART_SetConfig+0x31a>
 800b43c:	2380      	movs	r3, #128	@ 0x80
 800b43e:	e033      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b440:	4b71      	ldr	r3, [pc, #452]	@ (800b608 <UART_SetConfig+0x268>)
 800b442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b444:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b448:	2b28      	cmp	r3, #40	@ 0x28
 800b44a:	d865      	bhi.n	800b518 <UART_SetConfig+0x178>
 800b44c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b450:	00640029 	.word	0x00640029
 800b454:	00640064 	.word	0x00640064
 800b458:	00640064 	.word	0x00640064
 800b45c:	00640064 	.word	0x00640064
 800b460:	0064014d 	.word	0x0064014d
 800b464:	00640064 	.word	0x00640064
 800b468:	00640064 	.word	0x00640064
 800b46c:	00640064 	.word	0x00640064
 800b470:	0064002b 	.word	0x0064002b
 800b474:	00640064 	.word	0x00640064
 800b478:	00640064 	.word	0x00640064
 800b47c:	00640064 	.word	0x00640064
 800b480:	0064005e 	.word	0x0064005e
 800b484:	00640064 	.word	0x00640064
 800b488:	00640064 	.word	0x00640064
 800b48c:	00640064 	.word	0x00640064
 800b490:	00640060 	.word	0x00640060
 800b494:	00640064 	.word	0x00640064
 800b498:	00640064 	.word	0x00640064
 800b49c:	00640064 	.word	0x00640064
 800b4a0:	0062      	.short	0x0062
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e000      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b4a6:	2308      	movs	r3, #8
  if (UART_INSTANCE_LOWPOWER(huart))
 800b4a8:	494d      	ldr	r1, [pc, #308]	@ (800b5e0 <UART_SetConfig+0x240>)
 800b4aa:	428a      	cmp	r2, r1
 800b4ac:	f000 812f 	beq.w	800b70e <UART_SetConfig+0x36e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4b0:	69e0      	ldr	r0, [r4, #28]
 800b4b2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800b4b6:	f000 81af 	beq.w	800b818 <UART_SetConfig+0x478>
    switch (clocksource)
 800b4ba:	2b20      	cmp	r3, #32
 800b4bc:	f200 8207 	bhi.w	800b8ce <UART_SetConfig+0x52e>
 800b4c0:	2b20      	cmp	r3, #32
 800b4c2:	f200 8251 	bhi.w	800b968 <UART_SetConfig+0x5c8>
 800b4c6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b4ca:	021e      	.short	0x021e
 800b4cc:	024f0224 	.word	0x024f0224
 800b4d0:	0227024f 	.word	0x0227024f
 800b4d4:	024f024f 	.word	0x024f024f
 800b4d8:	022c024f 	.word	0x022c024f
 800b4dc:	024f024f 	.word	0x024f024f
 800b4e0:	024f024f 	.word	0x024f024f
 800b4e4:	024f024f 	.word	0x024f024f
 800b4e8:	0231024f 	.word	0x0231024f
 800b4ec:	024f024f 	.word	0x024f024f
 800b4f0:	024f024f 	.word	0x024f024f
 800b4f4:	024f024f 	.word	0x024f024f
 800b4f8:	024f024f 	.word	0x024f024f
 800b4fc:	024f024f 	.word	0x024f024f
 800b500:	024f024f 	.word	0x024f024f
 800b504:	024f024f 	.word	0x024f024f
 800b508:	023d024f 	.word	0x023d024f
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b50c:	2310      	movs	r3, #16
 800b50e:	e7cb      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b510:	2320      	movs	r3, #32
 800b512:	e7c9      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b514:	2340      	movs	r3, #64	@ 0x40
 800b516:	e7c7      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b518:	2380      	movs	r3, #128	@ 0x80
 800b51a:	e7c5      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b51c:	4b3a      	ldr	r3, [pc, #232]	@ (800b608 <UART_SetConfig+0x268>)
 800b51e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b520:	f003 0307 	and.w	r3, r3, #7
 800b524:	2b05      	cmp	r3, #5
 800b526:	d811      	bhi.n	800b54c <UART_SetConfig+0x1ac>
 800b528:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b52c:	00e10006 	.word	0x00e10006
 800b530:	000a0008 	.word	0x000a0008
 800b534:	000e000c 	.word	0x000e000c
 800b538:	2300      	movs	r3, #0
 800b53a:	e7b5      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b53c:	2308      	movs	r3, #8
 800b53e:	e7b3      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b540:	2310      	movs	r3, #16
 800b542:	e7b1      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b544:	2320      	movs	r3, #32
 800b546:	e7af      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b548:	2340      	movs	r3, #64	@ 0x40
 800b54a:	e7ad      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b54c:	2380      	movs	r3, #128	@ 0x80
 800b54e:	e7ab      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b550:	4b2d      	ldr	r3, [pc, #180]	@ (800b608 <UART_SetConfig+0x268>)
 800b552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b554:	f003 0307 	and.w	r3, r3, #7
 800b558:	2b05      	cmp	r3, #5
 800b55a:	d80e      	bhi.n	800b57a <UART_SetConfig+0x1da>
 800b55c:	e8df f003 	tbb	[pc, r3]
 800b560:	0705c903 	.word	0x0705c903
 800b564:	0b09      	.short	0x0b09
 800b566:	2300      	movs	r3, #0
 800b568:	e79e      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b56a:	2308      	movs	r3, #8
 800b56c:	e79c      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b56e:	2310      	movs	r3, #16
 800b570:	e79a      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b572:	2320      	movs	r3, #32
 800b574:	e798      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b576:	2340      	movs	r3, #64	@ 0x40
 800b578:	e796      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b57a:	2380      	movs	r3, #128	@ 0x80
 800b57c:	e794      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b57e:	4b22      	ldr	r3, [pc, #136]	@ (800b608 <UART_SetConfig+0x268>)
 800b580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b582:	f003 0307 	and.w	r3, r3, #7
 800b586:	2b05      	cmp	r3, #5
 800b588:	d80e      	bhi.n	800b5a8 <UART_SetConfig+0x208>
 800b58a:	e8df f003 	tbb	[pc, r3]
 800b58e:	b403      	.short	0xb403
 800b590:	0b090705 	.word	0x0b090705
 800b594:	2300      	movs	r3, #0
 800b596:	e787      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b598:	2308      	movs	r3, #8
 800b59a:	e785      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b59c:	2310      	movs	r3, #16
 800b59e:	e783      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b5a0:	2320      	movs	r3, #32
 800b5a2:	e781      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b5a4:	2340      	movs	r3, #64	@ 0x40
 800b5a6:	e77f      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b5a8:	2380      	movs	r3, #128	@ 0x80
 800b5aa:	e77d      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b5ac:	4b16      	ldr	r3, [pc, #88]	@ (800b608 <UART_SetConfig+0x268>)
 800b5ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5b0:	f003 0307 	and.w	r3, r3, #7
 800b5b4:	2b05      	cmp	r3, #5
 800b5b6:	d80e      	bhi.n	800b5d6 <UART_SetConfig+0x236>
 800b5b8:	e8df f003 	tbb	[pc, r3]
 800b5bc:	07059f03 	.word	0x07059f03
 800b5c0:	0b09      	.short	0x0b09
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	e770      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b5c6:	2308      	movs	r3, #8
 800b5c8:	e76e      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b5ca:	2310      	movs	r3, #16
 800b5cc:	e76c      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b5ce:	2320      	movs	r3, #32
 800b5d0:	e76a      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b5d2:	2340      	movs	r3, #64	@ 0x40
 800b5d4:	e768      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b5d6:	2380      	movs	r3, #128	@ 0x80
 800b5d8:	e766      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b5da:	bf00      	nop
 800b5dc:	cfff69f3 	.word	0xcfff69f3
 800b5e0:	58000c00 	.word	0x58000c00
 800b5e4:	11fff4ff 	.word	0x11fff4ff
 800b5e8:	40011000 	.word	0x40011000
 800b5ec:	40004400 	.word	0x40004400
 800b5f0:	40004800 	.word	0x40004800
 800b5f4:	40004c00 	.word	0x40004c00
 800b5f8:	40005000 	.word	0x40005000
 800b5fc:	40011400 	.word	0x40011400
 800b600:	40007800 	.word	0x40007800
 800b604:	40007c00 	.word	0x40007c00
 800b608:	58024400 	.word	0x58024400
 800b60c:	4b7d      	ldr	r3, [pc, #500]	@ (800b804 <UART_SetConfig+0x464>)
 800b60e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b610:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b614:	2b28      	cmp	r3, #40	@ 0x28
 800b616:	d820      	bhi.n	800b65a <UART_SetConfig+0x2ba>
 800b618:	e8df f003 	tbb	[pc, r3]
 800b61c:	1f1f1f15 	.word	0x1f1f1f15
 800b620:	1f1f1f1f 	.word	0x1f1f1f1f
 800b624:	1f1f1f71 	.word	0x1f1f1f71
 800b628:	1f1f1f1f 	.word	0x1f1f1f1f
 800b62c:	1f1f1f17 	.word	0x1f1f1f17
 800b630:	1f1f1f1f 	.word	0x1f1f1f1f
 800b634:	1f1f1f19 	.word	0x1f1f1f19
 800b638:	1f1f1f1f 	.word	0x1f1f1f1f
 800b63c:	1f1f1f1b 	.word	0x1f1f1f1b
 800b640:	1f1f1f1f 	.word	0x1f1f1f1f
 800b644:	1d          	.byte	0x1d
 800b645:	00          	.byte	0x00
 800b646:	2301      	movs	r3, #1
 800b648:	e72e      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b64a:	2308      	movs	r3, #8
 800b64c:	e72c      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b64e:	2310      	movs	r3, #16
 800b650:	e72a      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b652:	2320      	movs	r3, #32
 800b654:	e728      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b656:	2340      	movs	r3, #64	@ 0x40
 800b658:	e726      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b65a:	2380      	movs	r3, #128	@ 0x80
 800b65c:	e724      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b65e:	4b69      	ldr	r3, [pc, #420]	@ (800b804 <UART_SetConfig+0x464>)
 800b660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b662:	f003 0307 	and.w	r3, r3, #7
 800b666:	2b05      	cmp	r3, #5
 800b668:	d80e      	bhi.n	800b688 <UART_SetConfig+0x2e8>
 800b66a:	e8df f003 	tbb	[pc, r3]
 800b66e:	4a03      	.short	0x4a03
 800b670:	0b090705 	.word	0x0b090705
 800b674:	2300      	movs	r3, #0
 800b676:	e717      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b678:	2308      	movs	r3, #8
 800b67a:	e715      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b67c:	2310      	movs	r3, #16
 800b67e:	e713      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b680:	2320      	movs	r3, #32
 800b682:	e711      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b684:	2340      	movs	r3, #64	@ 0x40
 800b686:	e70f      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b688:	2380      	movs	r3, #128	@ 0x80
 800b68a:	e70d      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b68c:	4b5d      	ldr	r3, [pc, #372]	@ (800b804 <UART_SetConfig+0x464>)
 800b68e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b690:	f003 0307 	and.w	r3, r3, #7
 800b694:	2b05      	cmp	r3, #5
 800b696:	d80e      	bhi.n	800b6b6 <UART_SetConfig+0x316>
 800b698:	e8df f003 	tbb	[pc, r3]
 800b69c:	07053503 	.word	0x07053503
 800b6a0:	0b09      	.short	0x0b09
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	e700      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b6a6:	2308      	movs	r3, #8
 800b6a8:	e6fe      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b6aa:	2310      	movs	r3, #16
 800b6ac:	e6fc      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b6ae:	2320      	movs	r3, #32
 800b6b0:	e6fa      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b6b2:	2340      	movs	r3, #64	@ 0x40
 800b6b4:	e6f8      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b6b6:	2380      	movs	r3, #128	@ 0x80
 800b6b8:	e6f6      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b6ba:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 800b6be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6c0:	f003 0307 	and.w	r3, r3, #7
 800b6c4:	2b05      	cmp	r3, #5
 800b6c6:	d80e      	bhi.n	800b6e6 <UART_SetConfig+0x346>
 800b6c8:	e8df f003 	tbb	[pc, r3]
 800b6cc:	07051f03 	.word	0x07051f03
 800b6d0:	0b09      	.short	0x0b09
 800b6d2:	2302      	movs	r3, #2
 800b6d4:	e6e8      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b6d6:	2308      	movs	r3, #8
 800b6d8:	e6e6      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b6da:	2310      	movs	r3, #16
 800b6dc:	e6e4      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b6de:	2320      	movs	r3, #32
 800b6e0:	e6e2      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b6e2:	2340      	movs	r3, #64	@ 0x40
 800b6e4:	e6e0      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b6e6:	2380      	movs	r3, #128	@ 0x80
 800b6e8:	e6de      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b6ea:	2304      	movs	r3, #4
 800b6ec:	e6dc      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b6ee:	2304      	movs	r3, #4
 800b6f0:	e6da      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b6f2:	2304      	movs	r3, #4
 800b6f4:	e6d8      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b6f6:	2304      	movs	r3, #4
 800b6f8:	e6d6      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b6fa:	2304      	movs	r3, #4
 800b6fc:	e6d4      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b6fe:	2304      	movs	r3, #4
 800b700:	e6d2      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b702:	2304      	movs	r3, #4
 800b704:	e6d0      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b706:	2304      	movs	r3, #4
 800b708:	e6ce      	b.n	800b4a8 <UART_SetConfig+0x108>
 800b70a:	2304      	movs	r3, #4
 800b70c:	e6cc      	b.n	800b4a8 <UART_SetConfig+0x108>
    switch (clocksource)
 800b70e:	2b20      	cmp	r3, #32
 800b710:	d827      	bhi.n	800b762 <UART_SetConfig+0x3c2>
 800b712:	2b02      	cmp	r3, #2
 800b714:	f0c0 811a 	bcc.w	800b94c <UART_SetConfig+0x5ac>
 800b718:	3b02      	subs	r3, #2
 800b71a:	2b1e      	cmp	r3, #30
 800b71c:	f200 8118 	bhi.w	800b950 <UART_SetConfig+0x5b0>
 800b720:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b724:	01160050 	.word	0x01160050
 800b728:	01160056 	.word	0x01160056
 800b72c:	01160116 	.word	0x01160116
 800b730:	0116005b 	.word	0x0116005b
 800b734:	01160116 	.word	0x01160116
 800b738:	01160116 	.word	0x01160116
 800b73c:	01160116 	.word	0x01160116
 800b740:	01160060 	.word	0x01160060
 800b744:	01160116 	.word	0x01160116
 800b748:	01160116 	.word	0x01160116
 800b74c:	01160116 	.word	0x01160116
 800b750:	01160116 	.word	0x01160116
 800b754:	01160116 	.word	0x01160116
 800b758:	01160116 	.word	0x01160116
 800b75c:	01160116 	.word	0x01160116
 800b760:	006c      	.short	0x006c
 800b762:	2b40      	cmp	r3, #64	@ 0x40
 800b764:	d12c      	bne.n	800b7c0 <UART_SetConfig+0x420>
        pclk = (uint32_t) LSE_VALUE;
 800b766:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b76a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b76c:	4b26      	ldr	r3, [pc, #152]	@ (800b808 <UART_SetConfig+0x468>)
 800b76e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800b772:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b776:	6865      	ldr	r5, [r4, #4]
 800b778:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800b77c:	4299      	cmp	r1, r3
 800b77e:	f200 80e9 	bhi.w	800b954 <UART_SetConfig+0x5b4>
 800b782:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800b786:	f200 80e7 	bhi.w	800b958 <UART_SetConfig+0x5b8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b78a:	2600      	movs	r6, #0
 800b78c:	4633      	mov	r3, r6
 800b78e:	4631      	mov	r1, r6
 800b790:	f7f4 ff6c 	bl	800066c <__aeabi_uldivmod>
 800b794:	0209      	lsls	r1, r1, #8
 800b796:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800b79a:	0200      	lsls	r0, r0, #8
 800b79c:	086b      	lsrs	r3, r5, #1
 800b79e:	18c0      	adds	r0, r0, r3
 800b7a0:	462a      	mov	r2, r5
 800b7a2:	4633      	mov	r3, r6
 800b7a4:	f141 0100 	adc.w	r1, r1, #0
 800b7a8:	f7f4 ff60 	bl	800066c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b7ac:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800b7b0:	4b16      	ldr	r3, [pc, #88]	@ (800b80c <UART_SetConfig+0x46c>)
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	f200 80d2 	bhi.w	800b95c <UART_SetConfig+0x5bc>
          huart->Instance->BRR = usartdiv;
 800b7b8:	6823      	ldr	r3, [r4, #0]
 800b7ba:	60d8      	str	r0, [r3, #12]
 800b7bc:	4630      	mov	r0, r6
 800b7be:	e0d4      	b.n	800b96a <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b7c0:	2001      	movs	r0, #1
 800b7c2:	e0d2      	b.n	800b96a <UART_SetConfig+0x5ca>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b7c4:	f7fc fff2 	bl	80087ac <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	d1ce      	bne.n	800b76a <UART_SetConfig+0x3ca>
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	e0cc      	b.n	800b96a <UART_SetConfig+0x5ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7d0:	a803      	add	r0, sp, #12
 800b7d2:	f7fc fffd 	bl	80087d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b7d6:	9804      	ldr	r0, [sp, #16]
        break;
 800b7d8:	e7f6      	b.n	800b7c8 <UART_SetConfig+0x428>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7da:	4668      	mov	r0, sp
 800b7dc:	f7fd f8f6 	bl	80089cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b7e0:	9801      	ldr	r0, [sp, #4]
        break;
 800b7e2:	e7f1      	b.n	800b7c8 <UART_SetConfig+0x428>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7e4:	4b07      	ldr	r3, [pc, #28]	@ (800b804 <UART_SetConfig+0x464>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f013 0f20 	tst.w	r3, #32
 800b7ec:	d008      	beq.n	800b800 <UART_SetConfig+0x460>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b7ee:	4b05      	ldr	r3, [pc, #20]	@ (800b804 <UART_SetConfig+0x464>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b7f6:	4806      	ldr	r0, [pc, #24]	@ (800b810 <UART_SetConfig+0x470>)
 800b7f8:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800b7fa:	e7b6      	b.n	800b76a <UART_SetConfig+0x3ca>
    switch (clocksource)
 800b7fc:	4805      	ldr	r0, [pc, #20]	@ (800b814 <UART_SetConfig+0x474>)
 800b7fe:	e7b4      	b.n	800b76a <UART_SetConfig+0x3ca>
          pclk = (uint32_t) HSI_VALUE;
 800b800:	4803      	ldr	r0, [pc, #12]	@ (800b810 <UART_SetConfig+0x470>)
 800b802:	e7b2      	b.n	800b76a <UART_SetConfig+0x3ca>
 800b804:	58024400 	.word	0x58024400
 800b808:	0801c7f8 	.word	0x0801c7f8
 800b80c:	000ffcff 	.word	0x000ffcff
 800b810:	03d09000 	.word	0x03d09000
 800b814:	003d0900 	.word	0x003d0900
    switch (clocksource)
 800b818:	2b20      	cmp	r3, #32
 800b81a:	d815      	bhi.n	800b848 <UART_SetConfig+0x4a8>
 800b81c:	2b20      	cmp	r3, #32
 800b81e:	f200 809f 	bhi.w	800b960 <UART_SetConfig+0x5c0>
 800b822:	e8df f003 	tbb	[pc, r3]
 800b826:	3731      	.short	0x3731
 800b828:	9d3a9d9d 	.word	0x9d3a9d9d
 800b82c:	9d3f9d9d 	.word	0x9d3f9d9d
 800b830:	9d9d9d9d 	.word	0x9d9d9d9d
 800b834:	9d449d9d 	.word	0x9d449d9d
 800b838:	9d9d9d9d 	.word	0x9d9d9d9d
 800b83c:	9d9d9d9d 	.word	0x9d9d9d9d
 800b840:	9d9d9d9d 	.word	0x9d9d9d9d
 800b844:	9d9d      	.short	0x9d9d
 800b846:	50          	.byte	0x50
 800b847:	00          	.byte	0x00
 800b848:	2b40      	cmp	r3, #64	@ 0x40
 800b84a:	d11b      	bne.n	800b884 <UART_SetConfig+0x4e4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b84c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b84e:	4b4d      	ldr	r3, [pc, #308]	@ (800b984 <UART_SetConfig+0x5e4>)
 800b850:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b854:	fbb0 f0f3 	udiv	r0, r0, r3
 800b858:	6862      	ldr	r2, [r4, #4]
 800b85a:	0853      	lsrs	r3, r2, #1
 800b85c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b860:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b864:	f1a3 0110 	sub.w	r1, r3, #16
 800b868:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800b86c:	4291      	cmp	r1, r2
 800b86e:	d879      	bhi.n	800b964 <UART_SetConfig+0x5c4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b870:	b29a      	uxth	r2, r3
 800b872:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b876:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800b87a:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800b87c:	6822      	ldr	r2, [r4, #0]
 800b87e:	60d3      	str	r3, [r2, #12]
 800b880:	2000      	movs	r0, #0
 800b882:	e072      	b.n	800b96a <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b884:	2001      	movs	r0, #1
 800b886:	e070      	b.n	800b96a <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b888:	f7fc f954 	bl	8007b34 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800b88c:	2800      	cmp	r0, #0
 800b88e:	d1dd      	bne.n	800b84c <UART_SetConfig+0x4ac>
 800b890:	2000      	movs	r0, #0
 800b892:	e06a      	b.n	800b96a <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b894:	f7fc f960 	bl	8007b58 <HAL_RCC_GetPCLK2Freq>
        break;
 800b898:	e7f8      	b.n	800b88c <UART_SetConfig+0x4ec>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b89a:	a803      	add	r0, sp, #12
 800b89c:	f7fc ff98 	bl	80087d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b8a0:	9804      	ldr	r0, [sp, #16]
        break;
 800b8a2:	e7f3      	b.n	800b88c <UART_SetConfig+0x4ec>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8a4:	4668      	mov	r0, sp
 800b8a6:	f7fd f891 	bl	80089cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b8aa:	9801      	ldr	r0, [sp, #4]
        break;
 800b8ac:	e7ee      	b.n	800b88c <UART_SetConfig+0x4ec>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8ae:	4b36      	ldr	r3, [pc, #216]	@ (800b988 <UART_SetConfig+0x5e8>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f013 0f20 	tst.w	r3, #32
 800b8b6:	d008      	beq.n	800b8ca <UART_SetConfig+0x52a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b8b8:	4b33      	ldr	r3, [pc, #204]	@ (800b988 <UART_SetConfig+0x5e8>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b8c0:	4832      	ldr	r0, [pc, #200]	@ (800b98c <UART_SetConfig+0x5ec>)
 800b8c2:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800b8c4:	e7c2      	b.n	800b84c <UART_SetConfig+0x4ac>
    switch (clocksource)
 800b8c6:	4832      	ldr	r0, [pc, #200]	@ (800b990 <UART_SetConfig+0x5f0>)
 800b8c8:	e7c0      	b.n	800b84c <UART_SetConfig+0x4ac>
          pclk = (uint32_t) HSI_VALUE;
 800b8ca:	4830      	ldr	r0, [pc, #192]	@ (800b98c <UART_SetConfig+0x5ec>)
 800b8cc:	e7be      	b.n	800b84c <UART_SetConfig+0x4ac>
    switch (clocksource)
 800b8ce:	2b40      	cmp	r3, #64	@ 0x40
 800b8d0:	d117      	bne.n	800b902 <UART_SetConfig+0x562>
        pclk = (uint32_t) LSE_VALUE;
 800b8d2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8d6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b8d8:	4b2a      	ldr	r3, [pc, #168]	@ (800b984 <UART_SetConfig+0x5e4>)
 800b8da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b8de:	fbb0 f0f3 	udiv	r0, r0, r3
 800b8e2:	6863      	ldr	r3, [r4, #4]
 800b8e4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800b8e8:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8ec:	f1a0 0210 	sub.w	r2, r0, #16
 800b8f0:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d842      	bhi.n	800b97e <UART_SetConfig+0x5de>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b8f8:	6823      	ldr	r3, [r4, #0]
 800b8fa:	b280      	uxth	r0, r0
 800b8fc:	60d8      	str	r0, [r3, #12]
 800b8fe:	2000      	movs	r0, #0
 800b900:	e033      	b.n	800b96a <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b902:	2001      	movs	r0, #1
 800b904:	e031      	b.n	800b96a <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b906:	f7fc f915 	bl	8007b34 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800b90a:	2800      	cmp	r0, #0
 800b90c:	d1e3      	bne.n	800b8d6 <UART_SetConfig+0x536>
 800b90e:	2000      	movs	r0, #0
 800b910:	e02b      	b.n	800b96a <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b912:	f7fc f921 	bl	8007b58 <HAL_RCC_GetPCLK2Freq>
        break;
 800b916:	e7f8      	b.n	800b90a <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b918:	a803      	add	r0, sp, #12
 800b91a:	f7fc ff59 	bl	80087d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b91e:	9804      	ldr	r0, [sp, #16]
        break;
 800b920:	e7f3      	b.n	800b90a <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b922:	4668      	mov	r0, sp
 800b924:	f7fd f852 	bl	80089cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b928:	9801      	ldr	r0, [sp, #4]
        break;
 800b92a:	e7ee      	b.n	800b90a <UART_SetConfig+0x56a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b92c:	4b16      	ldr	r3, [pc, #88]	@ (800b988 <UART_SetConfig+0x5e8>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f013 0f20 	tst.w	r3, #32
 800b934:	d008      	beq.n	800b948 <UART_SetConfig+0x5a8>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b936:	4b14      	ldr	r3, [pc, #80]	@ (800b988 <UART_SetConfig+0x5e8>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b93e:	4813      	ldr	r0, [pc, #76]	@ (800b98c <UART_SetConfig+0x5ec>)
 800b940:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800b942:	e7c8      	b.n	800b8d6 <UART_SetConfig+0x536>
    switch (clocksource)
 800b944:	4812      	ldr	r0, [pc, #72]	@ (800b990 <UART_SetConfig+0x5f0>)
 800b946:	e7c6      	b.n	800b8d6 <UART_SetConfig+0x536>
          pclk = (uint32_t) HSI_VALUE;
 800b948:	4810      	ldr	r0, [pc, #64]	@ (800b98c <UART_SetConfig+0x5ec>)
 800b94a:	e7c4      	b.n	800b8d6 <UART_SetConfig+0x536>
    switch (clocksource)
 800b94c:	2001      	movs	r0, #1
 800b94e:	e00c      	b.n	800b96a <UART_SetConfig+0x5ca>
 800b950:	2001      	movs	r0, #1
 800b952:	e00a      	b.n	800b96a <UART_SetConfig+0x5ca>
        ret = HAL_ERROR;
 800b954:	2001      	movs	r0, #1
 800b956:	e008      	b.n	800b96a <UART_SetConfig+0x5ca>
 800b958:	2001      	movs	r0, #1
 800b95a:	e006      	b.n	800b96a <UART_SetConfig+0x5ca>
          ret = HAL_ERROR;
 800b95c:	2001      	movs	r0, #1
 800b95e:	e004      	b.n	800b96a <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b960:	2001      	movs	r0, #1
 800b962:	e002      	b.n	800b96a <UART_SetConfig+0x5ca>
        ret = HAL_ERROR;
 800b964:	2001      	movs	r0, #1
 800b966:	e000      	b.n	800b96a <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b968:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 800b96a:	2301      	movs	r3, #1
 800b96c:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b970:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800b974:	2300      	movs	r3, #0
 800b976:	6723      	str	r3, [r4, #112]	@ 0x70
  huart->TxISR = NULL;
 800b978:	6763      	str	r3, [r4, #116]	@ 0x74
}
 800b97a:	b006      	add	sp, #24
 800b97c:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 800b97e:	2001      	movs	r0, #1
 800b980:	e7f3      	b.n	800b96a <UART_SetConfig+0x5ca>
 800b982:	bf00      	nop
 800b984:	0801c7f8 	.word	0x0801c7f8
 800b988:	58024400 	.word	0x58024400
 800b98c:	03d09000 	.word	0x03d09000
 800b990:	003d0900 	.word	0x003d0900

0800b994 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b994:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b996:	f013 0f01 	tst.w	r3, #1
 800b99a:	d006      	beq.n	800b9aa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b99c:	6802      	ldr	r2, [r0, #0]
 800b99e:	6853      	ldr	r3, [r2, #4]
 800b9a0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b9a4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800b9a6:	430b      	orrs	r3, r1
 800b9a8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b9aa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b9ac:	f013 0f02 	tst.w	r3, #2
 800b9b0:	d006      	beq.n	800b9c0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b9b2:	6802      	ldr	r2, [r0, #0]
 800b9b4:	6853      	ldr	r3, [r2, #4]
 800b9b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b9ba:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800b9bc:	430b      	orrs	r3, r1
 800b9be:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b9c0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b9c2:	f013 0f04 	tst.w	r3, #4
 800b9c6:	d006      	beq.n	800b9d6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b9c8:	6802      	ldr	r2, [r0, #0]
 800b9ca:	6853      	ldr	r3, [r2, #4]
 800b9cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b9d0:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800b9d2:	430b      	orrs	r3, r1
 800b9d4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b9d6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b9d8:	f013 0f08 	tst.w	r3, #8
 800b9dc:	d006      	beq.n	800b9ec <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b9de:	6802      	ldr	r2, [r0, #0]
 800b9e0:	6853      	ldr	r3, [r2, #4]
 800b9e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b9e6:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800b9e8:	430b      	orrs	r3, r1
 800b9ea:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b9ec:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800b9ee:	f013 0f10 	tst.w	r3, #16
 800b9f2:	d006      	beq.n	800ba02 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b9f4:	6802      	ldr	r2, [r0, #0]
 800b9f6:	6893      	ldr	r3, [r2, #8]
 800b9f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b9fc:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800b9fe:	430b      	orrs	r3, r1
 800ba00:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba02:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ba04:	f013 0f20 	tst.w	r3, #32
 800ba08:	d006      	beq.n	800ba18 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba0a:	6802      	ldr	r2, [r0, #0]
 800ba0c:	6893      	ldr	r3, [r2, #8]
 800ba0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ba12:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800ba14:	430b      	orrs	r3, r1
 800ba16:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba18:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ba1a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800ba1e:	d00a      	beq.n	800ba36 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba20:	6802      	ldr	r2, [r0, #0]
 800ba22:	6853      	ldr	r3, [r2, #4]
 800ba24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ba28:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800ba2a:	430b      	orrs	r3, r1
 800ba2c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba2e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800ba30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba34:	d00b      	beq.n	800ba4e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba36:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ba38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ba3c:	d006      	beq.n	800ba4c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba3e:	6802      	ldr	r2, [r0, #0]
 800ba40:	6853      	ldr	r3, [r2, #4]
 800ba42:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800ba46:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800ba48:	430b      	orrs	r3, r1
 800ba4a:	6053      	str	r3, [r2, #4]
}
 800ba4c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba4e:	6802      	ldr	r2, [r0, #0]
 800ba50:	6853      	ldr	r3, [r2, #4]
 800ba52:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800ba56:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800ba58:	430b      	orrs	r3, r1
 800ba5a:	6053      	str	r3, [r2, #4]
 800ba5c:	e7eb      	b.n	800ba36 <UART_AdvFeatureConfig+0xa2>

0800ba5e <UART_WaitOnFlagUntilTimeout>:
{
 800ba5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba62:	4605      	mov	r5, r0
 800ba64:	460f      	mov	r7, r1
 800ba66:	4616      	mov	r6, r2
 800ba68:	4699      	mov	r9, r3
 800ba6a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba6e:	682b      	ldr	r3, [r5, #0]
 800ba70:	69dc      	ldr	r4, [r3, #28]
 800ba72:	ea37 0404 	bics.w	r4, r7, r4
 800ba76:	bf0c      	ite	eq
 800ba78:	2401      	moveq	r4, #1
 800ba7a:	2400      	movne	r4, #0
 800ba7c:	42b4      	cmp	r4, r6
 800ba7e:	d157      	bne.n	800bb30 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 800ba80:	f1b8 3fff 	cmp.w	r8, #4294967295
 800ba84:	d0f3      	beq.n	800ba6e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba86:	f7f7 fe29 	bl	80036dc <HAL_GetTick>
 800ba8a:	eba0 0009 	sub.w	r0, r0, r9
 800ba8e:	4540      	cmp	r0, r8
 800ba90:	d82f      	bhi.n	800baf2 <UART_WaitOnFlagUntilTimeout+0x94>
 800ba92:	f1b8 0f00 	cmp.w	r8, #0
 800ba96:	d02c      	beq.n	800baf2 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ba98:	682b      	ldr	r3, [r5, #0]
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	f012 0f04 	tst.w	r2, #4
 800baa0:	d0e5      	beq.n	800ba6e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800baa2:	69da      	ldr	r2, [r3, #28]
 800baa4:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800baa8:	d0e1      	beq.n	800ba6e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800baaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800baae:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bab0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab2:	e852 3f00 	ldrex	r3, [r2]
 800bab6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baba:	e842 3100 	strex	r1, r3, [r2]
 800babe:	2900      	cmp	r1, #0
 800bac0:	d1f6      	bne.n	800bab0 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bac2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac4:	f102 0308 	add.w	r3, r2, #8
 800bac8:	e853 3f00 	ldrex	r3, [r3]
 800bacc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bad0:	3208      	adds	r2, #8
 800bad2:	e842 3100 	strex	r1, r3, [r2]
 800bad6:	2900      	cmp	r1, #0
 800bad8:	d1f3      	bne.n	800bac2 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 800bada:	2320      	movs	r3, #32
 800badc:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bae0:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bae4:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 800bae8:	2300      	movs	r3, #0
 800baea:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
          return HAL_TIMEOUT;
 800baee:	2003      	movs	r0, #3
 800baf0:	e01f      	b.n	800bb32 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800baf2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf4:	e852 3f00 	ldrex	r3, [r2]
 800baf8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafc:	e842 3100 	strex	r1, r3, [r2]
 800bb00:	2900      	cmp	r1, #0
 800bb02:	d1f6      	bne.n	800baf2 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb04:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb06:	f102 0308 	add.w	r3, r2, #8
 800bb0a:	e853 3f00 	ldrex	r3, [r3]
 800bb0e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb12:	3208      	adds	r2, #8
 800bb14:	e842 3100 	strex	r1, r3, [r2]
 800bb18:	2900      	cmp	r1, #0
 800bb1a:	d1f3      	bne.n	800bb04 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 800bb1c:	2320      	movs	r3, #32
 800bb1e:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bb22:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
        __HAL_UNLOCK(huart);
 800bb26:	2300      	movs	r3, #0
 800bb28:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
        return HAL_TIMEOUT;
 800bb2c:	2003      	movs	r0, #3
 800bb2e:	e000      	b.n	800bb32 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 800bb30:	2000      	movs	r0, #0
}
 800bb32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800bb36 <UART_CheckIdleState>:
{
 800bb36:	b530      	push	{r4, r5, lr}
 800bb38:	b083      	sub	sp, #12
 800bb3a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  tickstart = HAL_GetTick();
 800bb42:	f7f7 fdcb 	bl	80036dc <HAL_GetTick>
 800bb46:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb48:	6822      	ldr	r2, [r4, #0]
 800bb4a:	6812      	ldr	r2, [r2, #0]
 800bb4c:	f012 0f08 	tst.w	r2, #8
 800bb50:	d10f      	bne.n	800bb72 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb52:	6823      	ldr	r3, [r4, #0]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f013 0f04 	tst.w	r3, #4
 800bb5a:	d118      	bne.n	800bb8e <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800bb5c:	2320      	movs	r3, #32
 800bb5e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bb62:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb66:	2000      	movs	r0, #0
 800bb68:	66e0      	str	r0, [r4, #108]	@ 0x6c
  __HAL_UNLOCK(huart);
 800bb6a:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 800bb6e:	b003      	add	sp, #12
 800bb70:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bb80:	4620      	mov	r0, r4
 800bb82:	f7ff ff6c 	bl	800ba5e <UART_WaitOnFlagUntilTimeout>
 800bb86:	2800      	cmp	r0, #0
 800bb88:	d0e3      	beq.n	800bb52 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800bb8a:	2003      	movs	r0, #3
 800bb8c:	e7ef      	b.n	800bb6e <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb8e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bb92:	9300      	str	r3, [sp, #0]
 800bb94:	462b      	mov	r3, r5
 800bb96:	2200      	movs	r2, #0
 800bb98:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	f7ff ff5e 	bl	800ba5e <UART_WaitOnFlagUntilTimeout>
 800bba2:	2800      	cmp	r0, #0
 800bba4:	d0da      	beq.n	800bb5c <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800bba6:	2003      	movs	r0, #3
 800bba8:	e7e1      	b.n	800bb6e <UART_CheckIdleState+0x38>

0800bbaa <HAL_UART_Init>:
  if (huart == NULL)
 800bbaa:	b378      	cbz	r0, 800bc0c <HAL_UART_Init+0x62>
{
 800bbac:	b510      	push	{r4, lr}
 800bbae:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800bbb0:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800bbb4:	b30b      	cbz	r3, 800bbfa <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800bbb6:	2324      	movs	r3, #36	@ 0x24
 800bbb8:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 800bbbc:	6822      	ldr	r2, [r4, #0]
 800bbbe:	6813      	ldr	r3, [r2, #0]
 800bbc0:	f023 0301 	bic.w	r3, r3, #1
 800bbc4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	f7ff fbea 	bl	800b3a0 <UART_SetConfig>
 800bbcc:	2801      	cmp	r0, #1
 800bbce:	d013      	beq.n	800bbf8 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bbd0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800bbd2:	b9bb      	cbnz	r3, 800bc04 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbd4:	6822      	ldr	r2, [r4, #0]
 800bbd6:	6853      	ldr	r3, [r2, #4]
 800bbd8:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800bbdc:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbde:	6822      	ldr	r2, [r4, #0]
 800bbe0:	6893      	ldr	r3, [r2, #8]
 800bbe2:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800bbe6:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800bbe8:	6822      	ldr	r2, [r4, #0]
 800bbea:	6813      	ldr	r3, [r2, #0]
 800bbec:	f043 0301 	orr.w	r3, r3, #1
 800bbf0:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	f7ff ff9f 	bl	800bb36 <UART_CheckIdleState>
}
 800bbf8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800bbfa:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 800bbfe:	f7f6 ff99 	bl	8002b34 <HAL_UART_MspInit>
 800bc02:	e7d8      	b.n	800bbb6 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800bc04:	4620      	mov	r0, r4
 800bc06:	f7ff fec5 	bl	800b994 <UART_AdvFeatureConfig>
 800bc0a:	e7e3      	b.n	800bbd4 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800bc0c:	2001      	movs	r0, #1
}
 800bc0e:	4770      	bx	lr

0800bc10 <UART_Start_Receive_DMA>:
{
 800bc10:	b510      	push	{r4, lr}
 800bc12:	4604      	mov	r4, r0
 800bc14:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 800bc16:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize = Size;
 800bc18:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc22:	2222      	movs	r2, #34	@ 0x22
 800bc24:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  if (huart->hdmarx != NULL)
 800bc28:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800bc2a:	b18a      	cbz	r2, 800bc50 <UART_Start_Receive_DMA+0x40>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bc2c:	4922      	ldr	r1, [pc, #136]	@ (800bcb8 <UART_Start_Receive_DMA+0xa8>)
 800bc2e:	63d1      	str	r1, [r2, #60]	@ 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bc30:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800bc32:	4922      	ldr	r1, [pc, #136]	@ (800bcbc <UART_Start_Receive_DMA+0xac>)
 800bc34:	6411      	str	r1, [r2, #64]	@ 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bc36:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800bc38:	4921      	ldr	r1, [pc, #132]	@ (800bcc0 <UART_Start_Receive_DMA+0xb0>)
 800bc3a:	64d1      	str	r1, [r2, #76]	@ 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 800bc3c:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800bc3e:	2100      	movs	r1, #0
 800bc40:	6511      	str	r1, [r2, #80]	@ 0x50
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bc42:	6801      	ldr	r1, [r0, #0]
 800bc44:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800bc46:	3124      	adds	r1, #36	@ 0x24
 800bc48:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800bc4a:	f7f8 ff47 	bl	8004adc <HAL_DMA_Start_IT>
 800bc4e:	bb38      	cbnz	r0, 800bca0 <UART_Start_Receive_DMA+0x90>
  __HAL_UNLOCK(huart);
 800bc50:	2300      	movs	r3, #0
 800bc52:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bc56:	6923      	ldr	r3, [r4, #16]
 800bc58:	b143      	cbz	r3, 800bc6c <UART_Start_Receive_DMA+0x5c>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc5a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc5c:	e852 3f00 	ldrex	r3, [r2]
 800bc60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc64:	e842 3100 	strex	r1, r3, [r2]
 800bc68:	2900      	cmp	r1, #0
 800bc6a:	d1f6      	bne.n	800bc5a <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc6c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6e:	f102 0308 	add.w	r3, r2, #8
 800bc72:	e853 3f00 	ldrex	r3, [r3]
 800bc76:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc7a:	3208      	adds	r2, #8
 800bc7c:	e842 3100 	strex	r1, r3, [r2]
 800bc80:	2900      	cmp	r1, #0
 800bc82:	d1f3      	bne.n	800bc6c <UART_Start_Receive_DMA+0x5c>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc84:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc86:	f102 0308 	add.w	r3, r2, #8
 800bc8a:	e853 3f00 	ldrex	r3, [r3]
 800bc8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc92:	3208      	adds	r2, #8
 800bc94:	e842 3100 	strex	r1, r3, [r2]
 800bc98:	2900      	cmp	r1, #0
 800bc9a:	d1f3      	bne.n	800bc84 <UART_Start_Receive_DMA+0x74>
  return HAL_OK;
 800bc9c:	2000      	movs	r0, #0
}
 800bc9e:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bca0:	2310      	movs	r3, #16
 800bca2:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_UNLOCK(huart);
 800bca6:	2300      	movs	r3, #0
 800bca8:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
      huart->RxState = HAL_UART_STATE_READY;
 800bcac:	2320      	movs	r3, #32
 800bcae:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_ERROR;
 800bcb2:	2001      	movs	r0, #1
 800bcb4:	e7f3      	b.n	800bc9e <UART_Start_Receive_DMA+0x8e>
 800bcb6:	bf00      	nop
 800bcb8:	0800b315 	.word	0x0800b315
 800bcbc:	0800b2f9 	.word	0x0800b2f9
 800bcc0:	0800aee9 	.word	0x0800aee9

0800bcc4 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bcc4:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800bcc6:	b92b      	cbnz	r3, 800bcd4 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bcce:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 800bcd2:	4770      	bx	lr
{
 800bcd4:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bcd6:	6803      	ldr	r3, [r0, #0]
 800bcd8:	689a      	ldr	r2, [r3, #8]
 800bcda:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bcde:	6899      	ldr	r1, [r3, #8]
 800bce0:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bce2:	4d09      	ldr	r5, [pc, #36]	@ (800bd08 <UARTEx_SetNbDataToProcess+0x44>)
 800bce4:	5c6b      	ldrb	r3, [r5, r1]
 800bce6:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 800bce8:	4c08      	ldr	r4, [pc, #32]	@ (800bd0c <UARTEx_SetNbDataToProcess+0x48>)
 800bcea:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcec:	fb93 f3f1 	sdiv	r3, r3, r1
 800bcf0:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bcf4:	5cab      	ldrb	r3, [r5, r2]
 800bcf6:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800bcf8:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bcfa:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcfe:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 800bd02:	bc30      	pop	{r4, r5}
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	0801c818 	.word	0x0801c818
 800bd0c:	0801c810 	.word	0x0801c810

0800bd10 <HAL_RS485Ex_Init>:
  if (huart == NULL)
 800bd10:	2800      	cmp	r0, #0
 800bd12:	d03c      	beq.n	800bd8e <HAL_RS485Ex_Init+0x7e>
{
 800bd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd16:	460f      	mov	r7, r1
 800bd18:	4616      	mov	r6, r2
 800bd1a:	461d      	mov	r5, r3
 800bd1c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800bd1e:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800bd22:	b35b      	cbz	r3, 800bd7c <HAL_RS485Ex_Init+0x6c>
  huart->gState = HAL_UART_STATE_BUSY;
 800bd24:	2324      	movs	r3, #36	@ 0x24
 800bd26:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 800bd2a:	6822      	ldr	r2, [r4, #0]
 800bd2c:	6813      	ldr	r3, [r2, #0]
 800bd2e:	f023 0301 	bic.w	r3, r3, #1
 800bd32:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd34:	4620      	mov	r0, r4
 800bd36:	f7ff fb33 	bl	800b3a0 <UART_SetConfig>
 800bd3a:	2801      	cmp	r0, #1
 800bd3c:	d01d      	beq.n	800bd7a <HAL_RS485Ex_Init+0x6a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd3e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800bd40:	bb0b      	cbnz	r3, 800bd86 <HAL_RS485Ex_Init+0x76>
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800bd42:	6822      	ldr	r2, [r4, #0]
 800bd44:	6893      	ldr	r3, [r2, #8]
 800bd46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bd4a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800bd4c:	6822      	ldr	r2, [r4, #0]
 800bd4e:	6893      	ldr	r3, [r2, #8]
 800bd50:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bd54:	433b      	orrs	r3, r7
 800bd56:	6093      	str	r3, [r2, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800bd58:	042d      	lsls	r5, r5, #16
 800bd5a:	ea45 5246 	orr.w	r2, r5, r6, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800bd5e:	6821      	ldr	r1, [r4, #0]
 800bd60:	6808      	ldr	r0, [r1, #0]
 800bd62:	4b0c      	ldr	r3, [pc, #48]	@ (800bd94 <HAL_RS485Ex_Init+0x84>)
 800bd64:	4003      	ands	r3, r0
 800bd66:	4313      	orrs	r3, r2
 800bd68:	600b      	str	r3, [r1, #0]
  __HAL_UART_ENABLE(huart);
 800bd6a:	6822      	ldr	r2, [r4, #0]
 800bd6c:	6813      	ldr	r3, [r2, #0]
 800bd6e:	f043 0301 	orr.w	r3, r3, #1
 800bd72:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800bd74:	4620      	mov	r0, r4
 800bd76:	f7ff fede 	bl	800bb36 <UART_CheckIdleState>
}
 800bd7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 800bd7c:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 800bd80:	f7f6 fed8 	bl	8002b34 <HAL_UART_MspInit>
 800bd84:	e7ce      	b.n	800bd24 <HAL_RS485Ex_Init+0x14>
    UART_AdvFeatureConfig(huart);
 800bd86:	4620      	mov	r0, r4
 800bd88:	f7ff fe04 	bl	800b994 <UART_AdvFeatureConfig>
 800bd8c:	e7d9      	b.n	800bd42 <HAL_RS485Ex_Init+0x32>
    return HAL_ERROR;
 800bd8e:	2001      	movs	r0, #1
}
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop
 800bd94:	fc00ffff 	.word	0xfc00ffff

0800bd98 <HAL_UARTEx_WakeupCallback>:
}
 800bd98:	4770      	bx	lr

0800bd9a <HAL_UARTEx_RxFifoFullCallback>:
}
 800bd9a:	4770      	bx	lr

0800bd9c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800bd9c:	4770      	bx	lr

0800bd9e <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800bd9e:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d018      	beq.n	800bdd8 <HAL_UARTEx_DisableFifoMode+0x3a>
 800bda6:	2301      	movs	r3, #1
 800bda8:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800bdac:	2324      	movs	r3, #36	@ 0x24
 800bdae:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdb2:	6803      	ldr	r3, [r0, #0]
 800bdb4:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800bdb6:	6819      	ldr	r1, [r3, #0]
 800bdb8:	f021 0101 	bic.w	r1, r1, #1
 800bdbc:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bdbe:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdc6:	6801      	ldr	r1, [r0, #0]
 800bdc8:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800bdca:	2220      	movs	r2, #32
 800bdcc:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 800bdd0:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  return HAL_OK;
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	4770      	bx	lr
  __HAL_LOCK(huart);
 800bdd8:	2002      	movs	r0, #2
}
 800bdda:	4770      	bx	lr

0800bddc <HAL_UARTEx_SetTxFifoThreshold>:
{
 800bddc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800bdde:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d01d      	beq.n	800be22 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800bde6:	4604      	mov	r4, r0
 800bde8:	2301      	movs	r3, #1
 800bdea:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800bdee:	2324      	movs	r3, #36	@ 0x24
 800bdf0:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdf4:	6803      	ldr	r3, [r0, #0]
 800bdf6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	f022 0201 	bic.w	r2, r2, #1
 800bdfe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800be00:	6802      	ldr	r2, [r0, #0]
 800be02:	6893      	ldr	r3, [r2, #8]
 800be04:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800be08:	4319      	orrs	r1, r3
 800be0a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800be0c:	f7ff ff5a 	bl	800bcc4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be10:	6823      	ldr	r3, [r4, #0]
 800be12:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800be14:	2320      	movs	r3, #32
 800be16:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 800be1a:	2000      	movs	r0, #0
 800be1c:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 800be20:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800be22:	2002      	movs	r0, #2
 800be24:	e7fc      	b.n	800be20 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800be26 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800be26:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800be28:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d01d      	beq.n	800be6c <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800be30:	4604      	mov	r4, r0
 800be32:	2301      	movs	r3, #1
 800be34:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800be38:	2324      	movs	r3, #36	@ 0x24
 800be3a:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be3e:	6803      	ldr	r3, [r0, #0]
 800be40:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	f022 0201 	bic.w	r2, r2, #1
 800be48:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800be4a:	6802      	ldr	r2, [r0, #0]
 800be4c:	6893      	ldr	r3, [r2, #8]
 800be4e:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800be52:	4319      	orrs	r1, r3
 800be54:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800be56:	f7ff ff35 	bl	800bcc4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be5a:	6823      	ldr	r3, [r4, #0]
 800be5c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800be5e:	2320      	movs	r3, #32
 800be60:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 800be64:	2000      	movs	r0, #0
 800be66:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 800be6a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800be6c:	2002      	movs	r0, #2
 800be6e:	e7fc      	b.n	800be6a <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800be70 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800be70:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800be74:	2b20      	cmp	r3, #32
 800be76:	d122      	bne.n	800bebe <HAL_UARTEx_ReceiveToIdle_DMA+0x4e>
{
 800be78:	b510      	push	{r4, lr}
 800be7a:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800be7c:	2a00      	cmp	r2, #0
 800be7e:	bf18      	it	ne
 800be80:	2900      	cmpne	r1, #0
 800be82:	d01e      	beq.n	800bec2 <HAL_UARTEx_ReceiveToIdle_DMA+0x52>
    __HAL_LOCK(huart);
 800be84:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d01c      	beq.n	800bec6 <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
 800be8c:	2301      	movs	r3, #1
 800be8e:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800be92:	66c3      	str	r3, [r0, #108]	@ 0x6c
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800be94:	f7ff febc 	bl	800bc10 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800be98:	b9a0      	cbnz	r0, 800bec4 <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be9a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d001      	beq.n	800bea4 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
        status = HAL_ERROR;
 800bea0:	2001      	movs	r0, #1
    return status;
 800bea2:	e00f      	b.n	800bec4 <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bea4:	6823      	ldr	r3, [r4, #0]
 800bea6:	2210      	movs	r2, #16
 800bea8:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800beaa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beac:	e852 3f00 	ldrex	r3, [r2]
 800beb0:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb4:	e842 3100 	strex	r1, r3, [r2]
 800beb8:	2900      	cmp	r1, #0
 800beba:	d1f6      	bne.n	800beaa <HAL_UARTEx_ReceiveToIdle_DMA+0x3a>
 800bebc:	e002      	b.n	800bec4 <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
    return HAL_BUSY;
 800bebe:	2002      	movs	r0, #2
}
 800bec0:	4770      	bx	lr
      return HAL_ERROR;
 800bec2:	2001      	movs	r0, #1
}
 800bec4:	bd10      	pop	{r4, pc}
    __HAL_LOCK(huart);
 800bec6:	2002      	movs	r0, #2
 800bec8:	e7fc      	b.n	800bec4 <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
	...

0800becc <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800becc:	4b0b      	ldr	r3, [pc, #44]	@ (800befc <SDMMC_GetCmdError+0x30>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a0b      	ldr	r2, [pc, #44]	@ (800bf00 <SDMMC_GetCmdError+0x34>)
 800bed2:	fba2 2303 	umull	r2, r3, r2, r3
 800bed6:	0a5b      	lsrs	r3, r3, #9
 800bed8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bedc:	fb02 f303 	mul.w	r3, r2, r3

  do
  {
    if (count-- == 0U)
 800bee0:	461a      	mov	r2, r3
 800bee2:	3b01      	subs	r3, #1
 800bee4:	b13a      	cbz	r2, 800bef6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bee6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bee8:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800beec:	d0f8      	beq.n	800bee0 <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800beee:	4b05      	ldr	r3, [pc, #20]	@ (800bf04 <SDMMC_GetCmdError+0x38>)
 800bef0:	6383      	str	r3, [r0, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800bef2:	2000      	movs	r0, #0
 800bef4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800bef6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800befa:	4770      	bx	lr
 800befc:	24000004 	.word	0x24000004
 800bf00:	10624dd3 	.word	0x10624dd3
 800bf04:	002000c5 	.word	0x002000c5

0800bf08 <SDMMC_Init>:
{
 800bf08:	b084      	sub	sp, #16
 800bf0a:	f10d 0c04 	add.w	ip, sp, #4
 800bf0e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800bf12:	460b      	mov	r3, r1
 800bf14:	4313      	orrs	r3, r2
             Init.BusWide             | \
 800bf16:	9a03      	ldr	r2, [sp, #12]
             Init.ClockPowerSave      | \
 800bf18:	4313      	orrs	r3, r2
             Init.HardwareFlowControl | \
 800bf1a:	9a04      	ldr	r2, [sp, #16]
             Init.BusWide             | \
 800bf1c:	4313      	orrs	r3, r2
             Init.ClockDiv
 800bf1e:	9a05      	ldr	r2, [sp, #20]
             Init.HardwareFlowControl | \
 800bf20:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800bf22:	6841      	ldr	r1, [r0, #4]
 800bf24:	4a03      	ldr	r2, [pc, #12]	@ (800bf34 <SDMMC_Init+0x2c>)
 800bf26:	400a      	ands	r2, r1
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	6043      	str	r3, [r0, #4]
}
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	b004      	add	sp, #16
 800bf30:	4770      	bx	lr
 800bf32:	bf00      	nop
 800bf34:	ffc02c00 	.word	0xffc02c00

0800bf38 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800bf38:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 800bf3c:	4770      	bx	lr

0800bf3e <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800bf3e:	680b      	ldr	r3, [r1, #0]
 800bf40:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 800bf44:	2000      	movs	r0, #0
 800bf46:	4770      	bx	lr

0800bf48 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800bf48:	6803      	ldr	r3, [r0, #0]
 800bf4a:	f043 0303 	orr.w	r3, r3, #3
 800bf4e:	6003      	str	r3, [r0, #0]
}
 800bf50:	2000      	movs	r0, #0
 800bf52:	4770      	bx	lr

0800bf54 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bf54:	6800      	ldr	r0, [r0, #0]
}
 800bf56:	f000 0003 	and.w	r0, r0, #3
 800bf5a:	4770      	bx	lr

0800bf5c <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 800bf5c:	680b      	ldr	r3, [r1, #0]
 800bf5e:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bf60:	684b      	ldr	r3, [r1, #4]
                       Command->Response         | \
 800bf62:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bf64:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt | \
 800bf66:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         | \
 800bf68:	4313      	orrs	r3, r2
                       Command->CPSM);
 800bf6a:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt | \
 800bf6c:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf6e:	68c1      	ldr	r1, [r0, #12]
 800bf70:	4a02      	ldr	r2, [pc, #8]	@ (800bf7c <SDMMC_SendCommand+0x20>)
 800bf72:	400a      	ands	r2, r1
 800bf74:	4313      	orrs	r3, r2
 800bf76:	60c3      	str	r3, [r0, #12]
}
 800bf78:	2000      	movs	r0, #0
 800bf7a:	4770      	bx	lr
 800bf7c:	fffee0c0 	.word	0xfffee0c0

0800bf80 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 800bf80:	6900      	ldr	r0, [r0, #16]
}
 800bf82:	b2c0      	uxtb	r0, r0
 800bf84:	4770      	bx	lr

0800bf86 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bf86:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800bf88:	5840      	ldr	r0, [r0, r1]
}
 800bf8a:	4770      	bx	lr

0800bf8c <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bf8c:	680b      	ldr	r3, [r1, #0]
 800bf8e:	6243      	str	r3, [r0, #36]	@ 0x24
  SDMMCx->DLEN = Data->DataLength;
 800bf90:	684b      	ldr	r3, [r1, #4]
 800bf92:	6283      	str	r3, [r0, #40]	@ 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bf94:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   | \
 800bf96:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bf98:	4313      	orrs	r3, r2
                       Data->TransferMode  | \
 800bf9a:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   | \
 800bf9c:	4313      	orrs	r3, r2
                       Data->DPSM);
 800bf9e:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  | \
 800bfa0:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bfa2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800bfa4:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	62c3      	str	r3, [r0, #44]	@ 0x2c
}
 800bfac:	2000      	movs	r0, #0
 800bfae:	4770      	bx	lr

0800bfb0 <SDMMC_CmdGoIdleState>:
{
 800bfb0:	b510      	push	{r4, lr}
 800bfb2:	b086      	sub	sp, #24
 800bfb4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bfba:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bfbc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfbe:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bfc4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfc6:	a901      	add	r1, sp, #4
 800bfc8:	f7ff ffc8 	bl	800bf5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f7ff ff7d 	bl	800becc <SDMMC_GetCmdError>
}
 800bfd2:	b006      	add	sp, #24
 800bfd4:	bd10      	pop	{r4, pc}
	...

0800bfd8 <SDMMC_GetCmdResp1>:
{
 800bfd8:	b570      	push	{r4, r5, r6, lr}
 800bfda:	4605      	mov	r5, r0
 800bfdc:	460e      	mov	r6, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bfde:	4b51      	ldr	r3, [pc, #324]	@ (800c124 <SDMMC_GetCmdResp1+0x14c>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4951      	ldr	r1, [pc, #324]	@ (800c128 <SDMMC_GetCmdResp1+0x150>)
 800bfe4:	fba1 1303 	umull	r1, r3, r1, r3
 800bfe8:	0a5b      	lsrs	r3, r3, #9
 800bfea:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 800bfee:	4613      	mov	r3, r2
 800bff0:	3a01      	subs	r2, #1
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d05e      	beq.n	800c0b4 <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDMMCx->STA;
 800bff6:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bff8:	4b4c      	ldr	r3, [pc, #304]	@ (800c12c <SDMMC_GetCmdResp1+0x154>)
 800bffa:	4023      	ands	r3, r4
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d0f6      	beq.n	800bfee <SDMMC_GetCmdResp1+0x16>
 800c000:	f414 5f00 	tst.w	r4, #8192	@ 0x2000
 800c004:	d1f3      	bne.n	800bfee <SDMMC_GetCmdResp1+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c006:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800c008:	f013 0f04 	tst.w	r3, #4
 800c00c:	d106      	bne.n	800c01c <SDMMC_GetCmdResp1+0x44>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c00e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800c010:	f013 0f01 	tst.w	r3, #1
 800c014:	d005      	beq.n	800c022 <SDMMC_GetCmdResp1+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c016:	2001      	movs	r0, #1
 800c018:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c01a:	e04d      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c01c:	2004      	movs	r0, #4
 800c01e:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c020:	e04a      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c022:	4b43      	ldr	r3, [pc, #268]	@ (800c130 <SDMMC_GetCmdResp1+0x158>)
 800c024:	63ab      	str	r3, [r5, #56]	@ 0x38
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c026:	4628      	mov	r0, r5
 800c028:	f7ff ffaa 	bl	800bf80 <SDMMC_GetCommandResponse>
 800c02c:	42b0      	cmp	r0, r6
 800c02e:	d001      	beq.n	800c034 <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c030:	2001      	movs	r0, #1
 800c032:	e041      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c034:	2100      	movs	r1, #0
 800c036:	4628      	mov	r0, r5
 800c038:	f7ff ffa5 	bl	800bf86 <SDMMC_GetResponse>
 800c03c:	4603      	mov	r3, r0
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c03e:	483d      	ldr	r0, [pc, #244]	@ (800c134 <SDMMC_GetCmdResp1+0x15c>)
 800c040:	4018      	ands	r0, r3
 800c042:	b3c8      	cbz	r0, 800c0b8 <SDMMC_GetCmdResp1+0xe0>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c044:	2b00      	cmp	r3, #0
 800c046:	db38      	blt.n	800c0ba <SDMMC_GetCmdResp1+0xe2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c048:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c04c:	d138      	bne.n	800c0c0 <SDMMC_GetCmdResp1+0xe8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c04e:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800c052:	d137      	bne.n	800c0c4 <SDMMC_GetCmdResp1+0xec>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c054:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800c058:	d136      	bne.n	800c0c8 <SDMMC_GetCmdResp1+0xf0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c05a:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800c05e:	d136      	bne.n	800c0ce <SDMMC_GetCmdResp1+0xf6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c060:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 800c064:	d136      	bne.n	800c0d4 <SDMMC_GetCmdResp1+0xfc>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c066:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800c06a:	d136      	bne.n	800c0da <SDMMC_GetCmdResp1+0x102>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c06c:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800c070:	d136      	bne.n	800c0e0 <SDMMC_GetCmdResp1+0x108>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c072:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800c076:	d136      	bne.n	800c0e6 <SDMMC_GetCmdResp1+0x10e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c078:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800c07c:	d136      	bne.n	800c0ec <SDMMC_GetCmdResp1+0x114>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c07e:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800c082:	d136      	bne.n	800c0f2 <SDMMC_GetCmdResp1+0x11a>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c084:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800c088:	d136      	bne.n	800c0f8 <SDMMC_GetCmdResp1+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c08a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800c08e:	d136      	bne.n	800c0fe <SDMMC_GetCmdResp1+0x126>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c090:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800c094:	d136      	bne.n	800c104 <SDMMC_GetCmdResp1+0x12c>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c096:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800c09a:	d136      	bne.n	800c10a <SDMMC_GetCmdResp1+0x132>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c09c:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800c0a0:	d136      	bne.n	800c110 <SDMMC_GetCmdResp1+0x138>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c0a2:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800c0a6:	d136      	bne.n	800c116 <SDMMC_GetCmdResp1+0x13e>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c0a8:	f013 0f08 	tst.w	r3, #8
 800c0ac:	d036      	beq.n	800c11c <SDMMC_GetCmdResp1+0x144>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c0ae:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800c0b2:	e001      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
 800c0b4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800c0b8:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c0ba:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800c0be:	e7fb      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c0c0:	2040      	movs	r0, #64	@ 0x40
 800c0c2:	e7f9      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c0c4:	2080      	movs	r0, #128	@ 0x80
 800c0c6:	e7f7      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c0c8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800c0cc:	e7f4      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c0ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800c0d2:	e7f1      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c0d4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800c0d8:	e7ee      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c0da:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800c0de:	e7eb      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c0e0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800c0e4:	e7e8      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c0e6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800c0ea:	e7e5      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c0ec:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800c0f0:	e7e2      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
 800c0f2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800c0f6:	e7df      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c0f8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800c0fc:	e7dc      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c0fe:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800c102:	e7d9      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c104:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800c108:	e7d6      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c10a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c10e:	e7d3      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c110:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800c114:	e7d0      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
 800c116:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800c11a:	e7cd      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c11c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c120:	e7ca      	b.n	800c0b8 <SDMMC_GetCmdResp1+0xe0>
 800c122:	bf00      	nop
 800c124:	24000004 	.word	0x24000004
 800c128:	10624dd3 	.word	0x10624dd3
 800c12c:	00200045 	.word	0x00200045
 800c130:	002000c5 	.word	0x002000c5
 800c134:	fdffe008 	.word	0xfdffe008

0800c138 <SDMMC_CmdBlockLength>:
{
 800c138:	b530      	push	{r4, r5, lr}
 800c13a:	b087      	sub	sp, #28
 800c13c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c13e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c140:	2510      	movs	r5, #16
 800c142:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c144:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c148:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c14a:	2300      	movs	r3, #0
 800c14c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c14e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c152:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c154:	a901      	add	r1, sp, #4
 800c156:	f7ff ff01 	bl	800bf5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c15a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c15e:	4629      	mov	r1, r5
 800c160:	4620      	mov	r0, r4
 800c162:	f7ff ff39 	bl	800bfd8 <SDMMC_GetCmdResp1>
}
 800c166:	b007      	add	sp, #28
 800c168:	bd30      	pop	{r4, r5, pc}
	...

0800c16c <SDMMC_CmdStopTransfer>:
{
 800c16c:	b530      	push	{r4, r5, lr}
 800c16e:	b087      	sub	sp, #28
 800c170:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800c172:	2300      	movs	r3, #0
 800c174:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c176:	250c      	movs	r5, #12
 800c178:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c17a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c17e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c180:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c182:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c186:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c188:	68c3      	ldr	r3, [r0, #12]
 800c18a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c18e:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c190:	68c3      	ldr	r3, [r0, #12]
 800c192:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c196:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c198:	a901      	add	r1, sp, #4
 800c19a:	f7ff fedf 	bl	800bf5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c19e:	4a08      	ldr	r2, [pc, #32]	@ (800c1c0 <SDMMC_CmdStopTransfer+0x54>)
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f7ff ff18 	bl	800bfd8 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c1a8:	68e3      	ldr	r3, [r4, #12]
 800c1aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c1ae:	60e3      	str	r3, [r4, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c1b0:	f1b0 7f00 	cmp.w	r0, #33554432	@ 0x2000000
 800c1b4:	d001      	beq.n	800c1ba <SDMMC_CmdStopTransfer+0x4e>
}
 800c1b6:	b007      	add	sp, #28
 800c1b8:	bd30      	pop	{r4, r5, pc}
    errorstate = SDMMC_ERROR_NONE;
 800c1ba:	2000      	movs	r0, #0
  return errorstate;
 800c1bc:	e7fb      	b.n	800c1b6 <SDMMC_CmdStopTransfer+0x4a>
 800c1be:	bf00      	nop
 800c1c0:	05f5e100 	.word	0x05f5e100

0800c1c4 <SDMMC_CmdSelDesel>:
{
 800c1c4:	b530      	push	{r4, r5, lr}
 800c1c6:	b087      	sub	sp, #28
 800c1c8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c1ca:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c1cc:	2507      	movs	r5, #7
 800c1ce:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c1d4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c1de:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1e0:	a901      	add	r1, sp, #4
 800c1e2:	f7ff febb 	bl	800bf5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c1e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c1ea:	4629      	mov	r1, r5
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	f7ff fef3 	bl	800bfd8 <SDMMC_GetCmdResp1>
}
 800c1f2:	b007      	add	sp, #28
 800c1f4:	bd30      	pop	{r4, r5, pc}

0800c1f6 <SDMMC_CmdAppCommand>:
{
 800c1f6:	b530      	push	{r4, r5, lr}
 800c1f8:	b087      	sub	sp, #28
 800c1fa:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c1fc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c1fe:	2537      	movs	r5, #55	@ 0x37
 800c200:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c202:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c206:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c208:	2300      	movs	r3, #0
 800c20a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c20c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c210:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c212:	a901      	add	r1, sp, #4
 800c214:	f7ff fea2 	bl	800bf5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c21c:	4629      	mov	r1, r5
 800c21e:	4620      	mov	r0, r4
 800c220:	f7ff feda 	bl	800bfd8 <SDMMC_GetCmdResp1>
}
 800c224:	b007      	add	sp, #28
 800c226:	bd30      	pop	{r4, r5, pc}

0800c228 <SDMMC_CmdBusWidth>:
{
 800c228:	b530      	push	{r4, r5, lr}
 800c22a:	b087      	sub	sp, #28
 800c22c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c22e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c230:	2506      	movs	r5, #6
 800c232:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c234:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c238:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c23a:	2300      	movs	r3, #0
 800c23c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c23e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c242:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c244:	a901      	add	r1, sp, #4
 800c246:	f7ff fe89 	bl	800bf5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c24a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c24e:	4629      	mov	r1, r5
 800c250:	4620      	mov	r0, r4
 800c252:	f7ff fec1 	bl	800bfd8 <SDMMC_GetCmdResp1>
}
 800c256:	b007      	add	sp, #28
 800c258:	bd30      	pop	{r4, r5, pc}

0800c25a <SDMMC_CmdSendSCR>:
{
 800c25a:	b530      	push	{r4, r5, lr}
 800c25c:	b087      	sub	sp, #28
 800c25e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800c260:	2300      	movs	r3, #0
 800c262:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c264:	2533      	movs	r5, #51	@ 0x33
 800c266:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c268:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c26c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c26e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c270:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c274:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c276:	a901      	add	r1, sp, #4
 800c278:	f7ff fe70 	bl	800bf5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c27c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c280:	4629      	mov	r1, r5
 800c282:	4620      	mov	r0, r4
 800c284:	f7ff fea8 	bl	800bfd8 <SDMMC_GetCmdResp1>
}
 800c288:	b007      	add	sp, #28
 800c28a:	bd30      	pop	{r4, r5, pc}

0800c28c <SDMMC_CmdSendStatus>:
{
 800c28c:	b530      	push	{r4, r5, lr}
 800c28e:	b087      	sub	sp, #28
 800c290:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800c292:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c294:	250d      	movs	r5, #13
 800c296:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c298:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c29c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c2a6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2a8:	a901      	add	r1, sp, #4
 800c2aa:	f7ff fe57 	bl	800bf5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c2ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2b2:	4629      	mov	r1, r5
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	f7ff fe8f 	bl	800bfd8 <SDMMC_GetCmdResp1>
}
 800c2ba:	b007      	add	sp, #28
 800c2bc:	bd30      	pop	{r4, r5, pc}

0800c2be <SDMMC_CmdStatusRegister>:
{
 800c2be:	b530      	push	{r4, r5, lr}
 800c2c0:	b087      	sub	sp, #28
 800c2c2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c2c8:	250d      	movs	r5, #13
 800c2ca:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c2d0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2d2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c2d8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2da:	a901      	add	r1, sp, #4
 800c2dc:	f7ff fe3e 	bl	800bf5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c2e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2e4:	4629      	mov	r1, r5
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	f7ff fe76 	bl	800bfd8 <SDMMC_GetCmdResp1>
}
 800c2ec:	b007      	add	sp, #28
 800c2ee:	bd30      	pop	{r4, r5, pc}

0800c2f0 <SDMMC_GetCmdResp2>:
{
 800c2f0:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c2f2:	4b14      	ldr	r3, [pc, #80]	@ (800c344 <SDMMC_GetCmdResp2+0x54>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a14      	ldr	r2, [pc, #80]	@ (800c348 <SDMMC_GetCmdResp2+0x58>)
 800c2f8:	fba2 2303 	umull	r2, r3, r2, r3
 800c2fc:	0a5b      	lsrs	r3, r3, #9
 800c2fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c302:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800c306:	461a      	mov	r2, r3
 800c308:	3b01      	subs	r3, #1
 800c30a:	b1ba      	cbz	r2, 800c33c <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDMMCx->STA;
 800c30c:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c30e:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800c312:	d0f8      	beq.n	800c306 <SDMMC_GetCmdResp2+0x16>
 800c314:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 800c318:	d1f5      	bne.n	800c306 <SDMMC_GetCmdResp2+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c31a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800c31c:	f013 0f04 	tst.w	r3, #4
 800c320:	d106      	bne.n	800c330 <SDMMC_GetCmdResp2+0x40>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c322:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800c324:	f010 0001 	ands.w	r0, r0, #1
 800c328:	d105      	bne.n	800c336 <SDMMC_GetCmdResp2+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c32a:	4b08      	ldr	r3, [pc, #32]	@ (800c34c <SDMMC_GetCmdResp2+0x5c>)
 800c32c:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800c32e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c330:	2004      	movs	r0, #4
 800c332:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c334:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c336:	2001      	movs	r0, #1
 800c338:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c33a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800c33c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	24000004 	.word	0x24000004
 800c348:	10624dd3 	.word	0x10624dd3
 800c34c:	002000c5 	.word	0x002000c5

0800c350 <SDMMC_CmdSendCID>:
{
 800c350:	b510      	push	{r4, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800c356:	2300      	movs	r3, #0
 800c358:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c35a:	2202      	movs	r2, #2
 800c35c:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c35e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800c362:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c364:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c366:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c36a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c36c:	a901      	add	r1, sp, #4
 800c36e:	f7ff fdf5 	bl	800bf5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c372:	4620      	mov	r0, r4
 800c374:	f7ff ffbc 	bl	800c2f0 <SDMMC_GetCmdResp2>
}
 800c378:	b006      	add	sp, #24
 800c37a:	bd10      	pop	{r4, pc}

0800c37c <SDMMC_CmdSendCSD>:
{
 800c37c:	b510      	push	{r4, lr}
 800c37e:	b086      	sub	sp, #24
 800c380:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800c382:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c384:	2309      	movs	r3, #9
 800c386:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c388:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c38c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c38e:	2300      	movs	r3, #0
 800c390:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c392:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c396:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c398:	a901      	add	r1, sp, #4
 800c39a:	f7ff fddf 	bl	800bf5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c39e:	4620      	mov	r0, r4
 800c3a0:	f7ff ffa6 	bl	800c2f0 <SDMMC_GetCmdResp2>
}
 800c3a4:	b006      	add	sp, #24
 800c3a6:	bd10      	pop	{r4, pc}

0800c3a8 <SDMMC_GetCmdResp3>:
{
 800c3a8:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c3aa:	4b10      	ldr	r3, [pc, #64]	@ (800c3ec <SDMMC_GetCmdResp3+0x44>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a10      	ldr	r2, [pc, #64]	@ (800c3f0 <SDMMC_GetCmdResp3+0x48>)
 800c3b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c3b4:	0a5b      	lsrs	r3, r3, #9
 800c3b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c3ba:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800c3be:	461a      	mov	r2, r3
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	b182      	cbz	r2, 800c3e6 <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDMMCx->STA;
 800c3c4:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3c6:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800c3ca:	d0f8      	beq.n	800c3be <SDMMC_GetCmdResp3+0x16>
 800c3cc:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 800c3d0:	d1f5      	bne.n	800c3be <SDMMC_GetCmdResp3+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c3d2:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800c3d4:	f010 0004 	ands.w	r0, r0, #4
 800c3d8:	d102      	bne.n	800c3e0 <SDMMC_GetCmdResp3+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c3da:	4b06      	ldr	r3, [pc, #24]	@ (800c3f4 <SDMMC_GetCmdResp3+0x4c>)
 800c3dc:	638b      	str	r3, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800c3de:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c3e0:	2004      	movs	r0, #4
 800c3e2:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c3e4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800c3e6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800c3ea:	4770      	bx	lr
 800c3ec:	24000004 	.word	0x24000004
 800c3f0:	10624dd3 	.word	0x10624dd3
 800c3f4:	002000c5 	.word	0x002000c5

0800c3f8 <SDMMC_CmdAppOperCommand>:
{
 800c3f8:	b510      	push	{r4, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800c3fe:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c400:	2329      	movs	r3, #41	@ 0x29
 800c402:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c404:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c408:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c40a:	2300      	movs	r3, #0
 800c40c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c40e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c412:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c414:	a901      	add	r1, sp, #4
 800c416:	f7ff fda1 	bl	800bf5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c41a:	4620      	mov	r0, r4
 800c41c:	f7ff ffc4 	bl	800c3a8 <SDMMC_GetCmdResp3>
}
 800c420:	b006      	add	sp, #24
 800c422:	bd10      	pop	{r4, pc}

0800c424 <SDMMC_GetCmdResp6>:
{
 800c424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c426:	4605      	mov	r5, r0
 800c428:	460e      	mov	r6, r1
 800c42a:	4617      	mov	r7, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c42c:	4b23      	ldr	r3, [pc, #140]	@ (800c4bc <SDMMC_GetCmdResp6+0x98>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a23      	ldr	r2, [pc, #140]	@ (800c4c0 <SDMMC_GetCmdResp6+0x9c>)
 800c432:	fba2 2303 	umull	r2, r3, r2, r3
 800c436:	0a5b      	lsrs	r3, r3, #9
 800c438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c43c:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800c440:	461a      	mov	r2, r3
 800c442:	3b01      	subs	r3, #1
 800c444:	b38a      	cbz	r2, 800c4aa <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDMMCx->STA;
 800c446:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c448:	f014 0f45 	tst.w	r4, #69	@ 0x45
 800c44c:	d0f8      	beq.n	800c440 <SDMMC_GetCmdResp6+0x1c>
 800c44e:	f414 5f00 	tst.w	r4, #8192	@ 0x2000
 800c452:	d1f5      	bne.n	800c440 <SDMMC_GetCmdResp6+0x1c>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c454:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800c456:	f013 0f04 	tst.w	r3, #4
 800c45a:	d106      	bne.n	800c46a <SDMMC_GetCmdResp6+0x46>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c45c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800c45e:	f013 0f01 	tst.w	r3, #1
 800c462:	d005      	beq.n	800c470 <SDMMC_GetCmdResp6+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c464:	2001      	movs	r0, #1
 800c466:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c468:	e021      	b.n	800c4ae <SDMMC_GetCmdResp6+0x8a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c46a:	2004      	movs	r0, #4
 800c46c:	63a8      	str	r0, [r5, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c46e:	e01e      	b.n	800c4ae <SDMMC_GetCmdResp6+0x8a>
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c470:	4628      	mov	r0, r5
 800c472:	f7ff fd85 	bl	800bf80 <SDMMC_GetCommandResponse>
 800c476:	42b0      	cmp	r0, r6
 800c478:	d001      	beq.n	800c47e <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c47a:	2001      	movs	r0, #1
 800c47c:	e017      	b.n	800c4ae <SDMMC_GetCmdResp6+0x8a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c47e:	4b11      	ldr	r3, [pc, #68]	@ (800c4c4 <SDMMC_GetCmdResp6+0xa0>)
 800c480:	63ab      	str	r3, [r5, #56]	@ 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c482:	2100      	movs	r1, #0
 800c484:	4628      	mov	r0, r5
 800c486:	f7ff fd7e 	bl	800bf86 <SDMMC_GetResponse>
 800c48a:	4603      	mov	r3, r0
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c48c:	f410 4060 	ands.w	r0, r0, #57344	@ 0xe000
 800c490:	d008      	beq.n	800c4a4 <SDMMC_GetCmdResp6+0x80>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c492:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800c496:	d10b      	bne.n	800c4b0 <SDMMC_GetCmdResp6+0x8c>
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c498:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800c49c:	d00b      	beq.n	800c4b6 <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c49e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800c4a2:	e004      	b.n	800c4ae <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c4a4:	0c1b      	lsrs	r3, r3, #16
 800c4a6:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 800c4a8:	e001      	b.n	800c4ae <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 800c4aa:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800c4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c4b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800c4b4:	e7fb      	b.n	800c4ae <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c4b6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c4ba:	e7f8      	b.n	800c4ae <SDMMC_GetCmdResp6+0x8a>
 800c4bc:	24000004 	.word	0x24000004
 800c4c0:	10624dd3 	.word	0x10624dd3
 800c4c4:	002000c5 	.word	0x002000c5

0800c4c8 <SDMMC_CmdSetRelAdd>:
{
 800c4c8:	b570      	push	{r4, r5, r6, lr}
 800c4ca:	b086      	sub	sp, #24
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c4d4:	2603      	movs	r6, #3
 800c4d6:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c4dc:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4de:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c4e4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4e6:	a901      	add	r1, sp, #4
 800c4e8:	f7ff fd38 	bl	800bf5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c4ec:	462a      	mov	r2, r5
 800c4ee:	4631      	mov	r1, r6
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	f7ff ff97 	bl	800c424 <SDMMC_GetCmdResp6>
}
 800c4f6:	b006      	add	sp, #24
 800c4f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c4fc <SDMMC_GetCmdResp7>:
{
 800c4fc:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c4fe:	4b16      	ldr	r3, [pc, #88]	@ (800c558 <SDMMC_GetCmdResp7+0x5c>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a16      	ldr	r2, [pc, #88]	@ (800c55c <SDMMC_GetCmdResp7+0x60>)
 800c504:	fba2 2303 	umull	r2, r3, r2, r3
 800c508:	0a5b      	lsrs	r3, r3, #9
 800c50a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c50e:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800c512:	461a      	mov	r2, r3
 800c514:	3b01      	subs	r3, #1
 800c516:	b1e2      	cbz	r2, 800c552 <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDMMCx->STA;
 800c518:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c51a:	f012 0f45 	tst.w	r2, #69	@ 0x45
 800c51e:	d0f8      	beq.n	800c512 <SDMMC_GetCmdResp7+0x16>
 800c520:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
 800c524:	d1f5      	bne.n	800c512 <SDMMC_GetCmdResp7+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c526:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800c528:	f013 0f04 	tst.w	r3, #4
 800c52c:	d10b      	bne.n	800c546 <SDMMC_GetCmdResp7+0x4a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c52e:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800c530:	f013 0301 	ands.w	r3, r3, #1
 800c534:	d10a      	bne.n	800c54c <SDMMC_GetCmdResp7+0x50>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c536:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 800c538:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 800c53c:	d00b      	beq.n	800c556 <SDMMC_GetCmdResp7+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c53e:	2240      	movs	r2, #64	@ 0x40
 800c540:	638a      	str	r2, [r1, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 800c542:	4618      	mov	r0, r3
 800c544:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c546:	2004      	movs	r0, #4
 800c548:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c54a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c54c:	2001      	movs	r0, #1
 800c54e:	6388      	str	r0, [r1, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c550:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800c552:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800c556:	4770      	bx	lr
 800c558:	24000004 	.word	0x24000004
 800c55c:	10624dd3 	.word	0x10624dd3

0800c560 <SDMMC_CmdOperCond>:
{
 800c560:	b510      	push	{r4, lr}
 800c562:	b086      	sub	sp, #24
 800c564:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c566:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c56a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c56c:	2308      	movs	r3, #8
 800c56e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c570:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c574:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c576:	2300      	movs	r3, #0
 800c578:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c57a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c57e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c580:	a901      	add	r1, sp, #4
 800c582:	f7ff fceb 	bl	800bf5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c586:	4620      	mov	r0, r4
 800c588:	f7ff ffb8 	bl	800c4fc <SDMMC_GetCmdResp7>
}
 800c58c:	b006      	add	sp, #24
 800c58e:	bd10      	pop	{r4, pc}

0800c590 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c590:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800c592:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c596:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c598:	f001 fbf6 	bl	800dd88 <xTaskGetSchedulerState>
 800c59c:	2801      	cmp	r0, #1
 800c59e:	d100      	bne.n	800c5a2 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800c5a0:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 800c5a2:	f001 ffff 	bl	800e5a4 <xPortSysTickHandler>
}
 800c5a6:	e7fb      	b.n	800c5a0 <SysTick_Handler+0x10>

0800c5a8 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5a8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5ac:	b92b      	cbnz	r3, 800c5ba <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800c5ae:	4b06      	ldr	r3, [pc, #24]	@ (800c5c8 <osKernelInitialize+0x20>)
 800c5b0:	6818      	ldr	r0, [r3, #0]
 800c5b2:	b928      	cbnz	r0, 800c5c0 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c5b8:	4770      	bx	lr
    stat = osErrorISR;
 800c5ba:	f06f 0005 	mvn.w	r0, #5
 800c5be:	4770      	bx	lr
    } else {
      stat = osError;
 800c5c0:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800c5c4:	4770      	bx	lr
 800c5c6:	bf00      	nop
 800c5c8:	24002f08 	.word	0x24002f08

0800c5cc <osKernelStart>:
 800c5cc:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5d0:	b973      	cbnz	r3, 800c5f0 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800c5d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c5fc <osKernelStart+0x30>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2b01      	cmp	r3, #1
 800c5d8:	d10d      	bne.n	800c5f6 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800c5da:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c5dc:	2400      	movs	r4, #0
 800c5de:	4b08      	ldr	r3, [pc, #32]	@ (800c600 <osKernelStart+0x34>)
 800c5e0:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c5e2:	4b06      	ldr	r3, [pc, #24]	@ (800c5fc <osKernelStart+0x30>)
 800c5e4:	2202      	movs	r2, #2
 800c5e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c5e8:	f001 f91c 	bl	800d824 <vTaskStartScheduler>
      stat = osOK;
 800c5ec:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800c5ee:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800c5f0:	f06f 0005 	mvn.w	r0, #5
 800c5f4:	4770      	bx	lr
      stat = osError;
 800c5f6:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c5fa:	4770      	bx	lr
 800c5fc:	24002f08 	.word	0x24002f08
 800c600:	e000ed00 	.word	0xe000ed00

0800c604 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c604:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c606:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c608:	2400      	movs	r4, #0
 800c60a:	9405      	str	r4, [sp, #20]
 800c60c:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800c610:	bb74      	cbnz	r4, 800c670 <osThreadNew+0x6c>
 800c612:	b368      	cbz	r0, 800c670 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800c614:	b322      	cbz	r2, 800c660 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 800c616:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800c618:	6993      	ldr	r3, [r2, #24]
 800c61a:	b903      	cbnz	r3, 800c61e <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 800c61c:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c61e:	1e5c      	subs	r4, r3, #1
 800c620:	2c37      	cmp	r4, #55	@ 0x37
 800c622:	d849      	bhi.n	800c6b8 <osThreadNew+0xb4>
 800c624:	6854      	ldr	r4, [r2, #4]
 800c626:	f014 0f01 	tst.w	r4, #1
 800c62a:	d147      	bne.n	800c6bc <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800c62c:	6956      	ldr	r6, [r2, #20]
 800c62e:	b16e      	cbz	r6, 800c64c <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c630:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c634:	6894      	ldr	r4, [r2, #8]
 800c636:	b12c      	cbz	r4, 800c644 <osThreadNew+0x40>
 800c638:	68d7      	ldr	r7, [r2, #12]
 800c63a:	2fa7      	cmp	r7, #167	@ 0xa7
 800c63c:	d902      	bls.n	800c644 <osThreadNew+0x40>
 800c63e:	6917      	ldr	r7, [r2, #16]
 800c640:	b107      	cbz	r7, 800c644 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c642:	b9c6      	cbnz	r6, 800c676 <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c644:	b12c      	cbz	r4, 800c652 <osThreadNew+0x4e>
    mem  = -1;
 800c646:	f04f 34ff 	mov.w	r4, #4294967295
 800c64a:	e00e      	b.n	800c66a <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 800c64c:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 800c650:	e7f0      	b.n	800c634 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c652:	68d4      	ldr	r4, [r2, #12]
 800c654:	b98c      	cbnz	r4, 800c67a <osThreadNew+0x76>
 800c656:	6914      	ldr	r4, [r2, #16]
 800c658:	b194      	cbz	r4, 800c680 <osThreadNew+0x7c>
    mem  = -1;
 800c65a:	f04f 34ff 	mov.w	r4, #4294967295
 800c65e:	e004      	b.n	800c66a <osThreadNew+0x66>
    name = NULL;
 800c660:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800c662:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800c664:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800c666:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 800c66a:	2c01      	cmp	r4, #1
 800c66c:	d00a      	beq.n	800c684 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800c66e:	b1ac      	cbz	r4, 800c69c <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c670:	9805      	ldr	r0, [sp, #20]
}
 800c672:	b007      	add	sp, #28
 800c674:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800c676:	2401      	movs	r4, #1
 800c678:	e7f7      	b.n	800c66a <osThreadNew+0x66>
    mem  = -1;
 800c67a:	f04f 34ff 	mov.w	r4, #4294967295
 800c67e:	e7f4      	b.n	800c66a <osThreadNew+0x66>
          mem = 0;
 800c680:	2400      	movs	r4, #0
 800c682:	e7f2      	b.n	800c66a <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c684:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c686:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c688:	9202      	str	r2, [sp, #8]
 800c68a:	9401      	str	r4, [sp, #4]
 800c68c:	9300      	str	r3, [sp, #0]
 800c68e:	460b      	mov	r3, r1
 800c690:	4662      	mov	r2, ip
 800c692:	4629      	mov	r1, r5
 800c694:	f001 f858 	bl	800d748 <xTaskCreateStatic>
 800c698:	9005      	str	r0, [sp, #20]
 800c69a:	e7e9      	b.n	800c670 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c69c:	aa05      	add	r2, sp, #20
 800c69e:	9201      	str	r2, [sp, #4]
 800c6a0:	9300      	str	r3, [sp, #0]
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	fa1f f28c 	uxth.w	r2, ip
 800c6a8:	4629      	mov	r1, r5
 800c6aa:	f001 f888 	bl	800d7be <xTaskCreate>
 800c6ae:	2801      	cmp	r0, #1
 800c6b0:	d0de      	beq.n	800c670 <osThreadNew+0x6c>
            hTask = NULL;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	9305      	str	r3, [sp, #20]
 800c6b6:	e7db      	b.n	800c670 <osThreadNew+0x6c>
        return (NULL);
 800c6b8:	2000      	movs	r0, #0
 800c6ba:	e7da      	b.n	800c672 <osThreadNew+0x6e>
 800c6bc:	2000      	movs	r0, #0
 800c6be:	e7d8      	b.n	800c672 <osThreadNew+0x6e>

0800c6c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c6c0:	b508      	push	{r3, lr}
 800c6c2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800c6c6:	b933      	cbnz	r3, 800c6d6 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800c6c8:	b908      	cbnz	r0, 800c6ce <osDelay+0xe>
    stat = osOK;
 800c6ca:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800c6cc:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800c6ce:	f001 fa15 	bl	800dafc <vTaskDelay>
    stat = osOK;
 800c6d2:	2000      	movs	r0, #0
 800c6d4:	e7fa      	b.n	800c6cc <osDelay+0xc>
    stat = osErrorISR;
 800c6d6:	f06f 0005 	mvn.w	r0, #5
 800c6da:	e7f7      	b.n	800c6cc <osDelay+0xc>

0800c6dc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c6dc:	b570      	push	{r4, r5, r6, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d14d      	bne.n	800c784 <osSemaphoreNew+0xa8>
 800c6e8:	460e      	mov	r6, r1
 800c6ea:	4614      	mov	r4, r2
 800c6ec:	4288      	cmp	r0, r1
 800c6ee:	bf34      	ite	cc
 800c6f0:	2300      	movcc	r3, #0
 800c6f2:	2301      	movcs	r3, #1
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	d049      	beq.n	800c78c <osSemaphoreNew+0xb0>
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d047      	beq.n	800c78c <osSemaphoreNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 800c6fc:	b14a      	cbz	r2, 800c712 <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c6fe:	6895      	ldr	r5, [r2, #8]
 800c700:	b115      	cbz	r5, 800c708 <osSemaphoreNew+0x2c>
 800c702:	68d3      	ldr	r3, [r2, #12]
 800c704:	2b4f      	cmp	r3, #79	@ 0x4f
 800c706:	d814      	bhi.n	800c732 <osSemaphoreNew+0x56>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c708:	2d00      	cmp	r5, #0
 800c70a:	d141      	bne.n	800c790 <osSemaphoreNew+0xb4>
 800c70c:	68e3      	ldr	r3, [r4, #12]
 800c70e:	b10b      	cbz	r3, 800c714 <osSemaphoreNew+0x38>
 800c710:	e039      	b.n	800c786 <osSemaphoreNew+0xaa>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800c712:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800c714:	2801      	cmp	r0, #1
 800c716:	d00e      	beq.n	800c736 <osSemaphoreNew+0x5a>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 800c718:	bb73      	cbnz	r3, 800c778 <osSemaphoreNew+0x9c>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c71a:	4631      	mov	r1, r6
 800c71c:	f000 fa90 	bl	800cc40 <xQueueCreateCountingSemaphore>
 800c720:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c722:	b385      	cbz	r5, 800c786 <osSemaphoreNew+0xaa>
        if (attr != NULL) {
 800c724:	b104      	cbz	r4, 800c728 <osSemaphoreNew+0x4c>
          name = attr->name;
 800c726:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c728:	4621      	mov	r1, r4
 800c72a:	4628      	mov	r0, r5
 800c72c:	f000 fe04 	bl	800d338 <vQueueAddToRegistry>
 800c730:	e029      	b.n	800c786 <osSemaphoreNew+0xaa>
        mem = 1;
 800c732:	2301      	movs	r3, #1
 800c734:	e7ee      	b.n	800c714 <osSemaphoreNew+0x38>
        if (mem == 1) {
 800c736:	b9b3      	cbnz	r3, 800c766 <osSemaphoreNew+0x8a>
            hSemaphore = xSemaphoreCreateBinary();
 800c738:	2203      	movs	r2, #3
 800c73a:	2100      	movs	r1, #0
 800c73c:	2001      	movs	r0, #1
 800c73e:	f000 fa38 	bl	800cbb2 <xQueueGenericCreate>
 800c742:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c744:	2d00      	cmp	r5, #0
 800c746:	bf18      	it	ne
 800c748:	2e00      	cmpne	r6, #0
 800c74a:	d0ea      	beq.n	800c722 <osSemaphoreNew+0x46>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c74c:	2300      	movs	r3, #0
 800c74e:	461a      	mov	r2, r3
 800c750:	4619      	mov	r1, r3
 800c752:	4628      	mov	r0, r5
 800c754:	f000 fa92 	bl	800cc7c <xQueueGenericSend>
 800c758:	2801      	cmp	r0, #1
 800c75a:	d0e2      	beq.n	800c722 <osSemaphoreNew+0x46>
            vSemaphoreDelete (hSemaphore);
 800c75c:	4628      	mov	r0, r5
 800c75e:	f000 fe15 	bl	800d38c <vQueueDelete>
            hSemaphore = NULL;
 800c762:	2500      	movs	r5, #0
 800c764:	e00f      	b.n	800c786 <osSemaphoreNew+0xaa>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c766:	68a3      	ldr	r3, [r4, #8]
 800c768:	2203      	movs	r2, #3
 800c76a:	9200      	str	r2, [sp, #0]
 800c76c:	2200      	movs	r2, #0
 800c76e:	4611      	mov	r1, r2
 800c770:	f000 f9cc 	bl	800cb0c <xQueueGenericCreateStatic>
 800c774:	4605      	mov	r5, r0
 800c776:	e7e5      	b.n	800c744 <osSemaphoreNew+0x68>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c778:	68a2      	ldr	r2, [r4, #8]
 800c77a:	4631      	mov	r1, r6
 800c77c:	f000 fa3d 	bl	800cbfa <xQueueCreateCountingSemaphoreStatic>
 800c780:	4605      	mov	r5, r0
 800c782:	e7ce      	b.n	800c722 <osSemaphoreNew+0x46>
  hSemaphore = NULL;
 800c784:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800c786:	4628      	mov	r0, r5
 800c788:	b002      	add	sp, #8
 800c78a:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 800c78c:	2500      	movs	r5, #0
 800c78e:	e7fa      	b.n	800c786 <osSemaphoreNew+0xaa>
 800c790:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 800c792:	e7f8      	b.n	800c786 <osSemaphoreNew+0xaa>

0800c794 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800c794:	b320      	cbz	r0, 800c7e0 <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c796:	b510      	push	{r4, lr}
 800c798:	b082      	sub	sp, #8
 800c79a:	460c      	mov	r4, r1
 800c79c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800c7a0:	b1b3      	cbz	r3, 800c7d0 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800c7a2:	bb01      	cbnz	r1, 800c7e6 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800c7a4:	2100      	movs	r1, #0
 800c7a6:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c7a8:	aa01      	add	r2, sp, #4
 800c7aa:	f000 fd6d 	bl	800d288 <xQueueReceiveFromISR>
 800c7ae:	2801      	cmp	r0, #1
 800c7b0:	d11c      	bne.n	800c7ec <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800c7b2:	9801      	ldr	r0, [sp, #4]
 800c7b4:	b150      	cbz	r0, 800c7cc <osSemaphoreAcquire+0x38>
 800c7b6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c7ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7be:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c7c2:	f3bf 8f4f 	dsb	sy
 800c7c6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800c7ca:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800c7cc:	b002      	add	sp, #8
 800c7ce:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c7d0:	f000 fc87 	bl	800d0e2 <xQueueSemaphoreTake>
 800c7d4:	2801      	cmp	r0, #1
 800c7d6:	d00c      	beq.n	800c7f2 <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 800c7d8:	b16c      	cbz	r4, 800c7f6 <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 800c7da:	f06f 0001 	mvn.w	r0, #1
 800c7de:	e7f5      	b.n	800c7cc <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 800c7e0:	f06f 0003 	mvn.w	r0, #3
}
 800c7e4:	4770      	bx	lr
      stat = osErrorParameter;
 800c7e6:	f06f 0003 	mvn.w	r0, #3
 800c7ea:	e7ef      	b.n	800c7cc <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800c7ec:	f06f 0002 	mvn.w	r0, #2
 800c7f0:	e7ec      	b.n	800c7cc <osSemaphoreAcquire+0x38>
  stat = osOK;
 800c7f2:	2000      	movs	r0, #0
 800c7f4:	e7ea      	b.n	800c7cc <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800c7f6:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800c7fa:	e7e7      	b.n	800c7cc <osSemaphoreAcquire+0x38>

0800c7fc <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800c7fc:	b320      	cbz	r0, 800c848 <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c7fe:	b500      	push	{lr}
 800c800:	b083      	sub	sp, #12
 800c802:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800c806:	b1a3      	cbz	r3, 800c832 <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 800c808:	2300      	movs	r3, #0
 800c80a:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c80c:	a901      	add	r1, sp, #4
 800c80e:	f000 fb60 	bl	800ced2 <xQueueGiveFromISR>
 800c812:	2801      	cmp	r0, #1
 800c814:	d11b      	bne.n	800c84e <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800c816:	9801      	ldr	r0, [sp, #4]
 800c818:	b198      	cbz	r0, 800c842 <osSemaphoreRelease+0x46>
 800c81a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c81e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c822:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c826:	f3bf 8f4f 	dsb	sy
 800c82a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800c82e:	2000      	movs	r0, #0
 800c830:	e007      	b.n	800c842 <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c832:	2300      	movs	r3, #0
 800c834:	461a      	mov	r2, r3
 800c836:	4619      	mov	r1, r3
 800c838:	f000 fa20 	bl	800cc7c <xQueueGenericSend>
 800c83c:	2801      	cmp	r0, #1
 800c83e:	d109      	bne.n	800c854 <osSemaphoreRelease+0x58>
  stat = osOK;
 800c840:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800c842:	b003      	add	sp, #12
 800c844:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 800c848:	f06f 0003 	mvn.w	r0, #3
}
 800c84c:	4770      	bx	lr
      stat = osErrorResource;
 800c84e:	f06f 0002 	mvn.w	r0, #2
 800c852:	e7f6      	b.n	800c842 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800c854:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800c858:	e7f3      	b.n	800c842 <osSemaphoreRelease+0x46>
	...

0800c85c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c85c:	4b03      	ldr	r3, [pc, #12]	@ (800c86c <vApplicationGetIdleTaskMemory+0x10>)
 800c85e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c860:	4b03      	ldr	r3, [pc, #12]	@ (800c870 <vApplicationGetIdleTaskMemory+0x14>)
 800c862:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c864:	2380      	movs	r3, #128	@ 0x80
 800c866:	6013      	str	r3, [r2, #0]
}
 800c868:	4770      	bx	lr
 800c86a:	bf00      	nop
 800c86c:	24002e60 	.word	0x24002e60
 800c870:	24002c60 	.word	0x24002c60

0800c874 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c874:	4b03      	ldr	r3, [pc, #12]	@ (800c884 <vApplicationGetTimerTaskMemory+0x10>)
 800c876:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c878:	4b03      	ldr	r3, [pc, #12]	@ (800c888 <vApplicationGetTimerTaskMemory+0x14>)
 800c87a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c87c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c880:	6013      	str	r3, [r2, #0]
}
 800c882:	4770      	bx	lr
 800c884:	24002bb8 	.word	0x24002bb8
 800c888:	240027b8 	.word	0x240027b8

0800c88c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c88c:	f100 0308 	add.w	r3, r0, #8
 800c890:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c892:	f04f 32ff 	mov.w	r2, #4294967295
 800c896:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c898:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c89a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c89c:	2300      	movs	r3, #0
 800c89e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c8a0:	4770      	bx	lr

0800c8a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c8a6:	4770      	bx	lr

0800c8a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800c8a8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c8aa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c8ac:	689a      	ldr	r2, [r3, #8]
 800c8ae:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c8b0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c8b2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c8b4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800c8b6:	6803      	ldr	r3, [r0, #0]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	6003      	str	r3, [r0, #0]
}
 800c8bc:	4770      	bx	lr

0800c8be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c8be:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c8c0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c8c2:	f1b5 3fff 	cmp.w	r5, #4294967295
 800c8c6:	d011      	beq.n	800c8ec <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c8c8:	f100 0308 	add.w	r3, r0, #8
 800c8cc:	461c      	mov	r4, r3
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	42aa      	cmp	r2, r5
 800c8d4:	d9fa      	bls.n	800c8cc <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c8d6:	6863      	ldr	r3, [r4, #4]
 800c8d8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c8da:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c8dc:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800c8de:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c8e0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800c8e2:	6803      	ldr	r3, [r0, #0]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	6003      	str	r3, [r0, #0]
}
 800c8e8:	bc30      	pop	{r4, r5}
 800c8ea:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800c8ec:	6904      	ldr	r4, [r0, #16]
 800c8ee:	e7f2      	b.n	800c8d6 <vListInsert+0x18>

0800c8f0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c8f0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c8f2:	6841      	ldr	r1, [r0, #4]
 800c8f4:	6882      	ldr	r2, [r0, #8]
 800c8f6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c8f8:	6841      	ldr	r1, [r0, #4]
 800c8fa:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c8fc:	685a      	ldr	r2, [r3, #4]
 800c8fe:	4282      	cmp	r2, r0
 800c900:	d006      	beq.n	800c910 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c902:	2200      	movs	r2, #0
 800c904:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	3a01      	subs	r2, #1
 800c90a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c90c:	6818      	ldr	r0, [r3, #0]
}
 800c90e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c910:	6882      	ldr	r2, [r0, #8]
 800c912:	605a      	str	r2, [r3, #4]
 800c914:	e7f5      	b.n	800c902 <uxListRemove+0x12>

0800c916 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c916:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c918:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800c91a:	b118      	cbz	r0, 800c924 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c91c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c91e:	6818      	ldr	r0, [r3, #0]
 800c920:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800c924:	4770      	bx	lr

0800c926 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c926:	b510      	push	{r4, lr}
 800c928:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c92a:	f001 fdcb 	bl	800e4c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c92e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c930:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c932:	429a      	cmp	r2, r3
 800c934:	d004      	beq.n	800c940 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800c936:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800c938:	f001 fde6 	bl	800e508 <vPortExitCritical>

	return xReturn;
}
 800c93c:	4620      	mov	r0, r4
 800c93e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800c940:	2401      	movs	r4, #1
 800c942:	e7f9      	b.n	800c938 <prvIsQueueFull+0x12>

0800c944 <prvIsQueueEmpty>:
{
 800c944:	b510      	push	{r4, lr}
 800c946:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800c948:	f001 fdbc 	bl	800e4c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c94c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c94e:	b923      	cbnz	r3, 800c95a <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800c950:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800c952:	f001 fdd9 	bl	800e508 <vPortExitCritical>
}
 800c956:	4620      	mov	r0, r4
 800c958:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800c95a:	2400      	movs	r4, #0
 800c95c:	e7f9      	b.n	800c952 <prvIsQueueEmpty+0xe>

0800c95e <prvCopyDataToQueue>:
{
 800c95e:	b570      	push	{r4, r5, r6, lr}
 800c960:	4604      	mov	r4, r0
 800c962:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c964:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c966:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800c968:	b95a      	cbnz	r2, 800c982 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c96a:	6803      	ldr	r3, [r0, #0]
 800c96c:	b11b      	cbz	r3, 800c976 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800c96e:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c970:	3601      	adds	r6, #1
 800c972:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 800c974:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c976:	6880      	ldr	r0, [r0, #8]
 800c978:	f001 fa62 	bl	800de40 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c97c:	2300      	movs	r3, #0
 800c97e:	60a3      	str	r3, [r4, #8]
 800c980:	e7f6      	b.n	800c970 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800c982:	b96d      	cbnz	r5, 800c9a0 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c984:	6840      	ldr	r0, [r0, #4]
 800c986:	f00f fd75 	bl	801c474 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c98a:	6863      	ldr	r3, [r4, #4]
 800c98c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c98e:	4413      	add	r3, r2
 800c990:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c992:	68a2      	ldr	r2, [r4, #8]
 800c994:	4293      	cmp	r3, r2
 800c996:	d319      	bcc.n	800c9cc <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c998:	6823      	ldr	r3, [r4, #0]
 800c99a:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800c99c:	4628      	mov	r0, r5
 800c99e:	e7e7      	b.n	800c970 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c9a0:	68c0      	ldr	r0, [r0, #12]
 800c9a2:	f00f fd67 	bl	801c474 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c9a6:	68e3      	ldr	r3, [r4, #12]
 800c9a8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c9aa:	4251      	negs	r1, r2
 800c9ac:	1a9b      	subs	r3, r3, r2
 800c9ae:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9b0:	6822      	ldr	r2, [r4, #0]
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d202      	bcs.n	800c9bc <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c9b6:	68a3      	ldr	r3, [r4, #8]
 800c9b8:	440b      	add	r3, r1
 800c9ba:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800c9bc:	2d02      	cmp	r5, #2
 800c9be:	d001      	beq.n	800c9c4 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800c9c0:	2000      	movs	r0, #0
 800c9c2:	e7d5      	b.n	800c970 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c9c4:	b126      	cbz	r6, 800c9d0 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800c9c6:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	e7d1      	b.n	800c970 <prvCopyDataToQueue+0x12>
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	e7cf      	b.n	800c970 <prvCopyDataToQueue+0x12>
 800c9d0:	2000      	movs	r0, #0
 800c9d2:	e7cd      	b.n	800c970 <prvCopyDataToQueue+0x12>

0800c9d4 <prvCopyDataFromQueue>:
{
 800c9d4:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c9d6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800c9d8:	b16a      	cbz	r2, 800c9f6 <prvCopyDataFromQueue+0x22>
{
 800c9da:	b510      	push	{r4, lr}
 800c9dc:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c9de:	68d9      	ldr	r1, [r3, #12]
 800c9e0:	4411      	add	r1, r2
 800c9e2:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c9e4:	689c      	ldr	r4, [r3, #8]
 800c9e6:	42a1      	cmp	r1, r4
 800c9e8:	d301      	bcc.n	800c9ee <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c9ea:	6819      	ldr	r1, [r3, #0]
 800c9ec:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9ee:	68d9      	ldr	r1, [r3, #12]
 800c9f0:	f00f fd40 	bl	801c474 <memcpy>
}
 800c9f4:	bd10      	pop	{r4, pc}
 800c9f6:	4770      	bx	lr

0800c9f8 <prvUnlockQueue>:
{
 800c9f8:	b538      	push	{r3, r4, r5, lr}
 800c9fa:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800c9fc:	f001 fd62 	bl	800e4c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ca00:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 800ca04:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca06:	e001      	b.n	800ca0c <prvUnlockQueue+0x14>
			--cTxLock;
 800ca08:	3c01      	subs	r4, #1
 800ca0a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca0c:	2c00      	cmp	r4, #0
 800ca0e:	dd0a      	ble.n	800ca26 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca10:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800ca12:	b143      	cbz	r3, 800ca26 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca14:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800ca18:	f001 f91c 	bl	800dc54 <xTaskRemoveFromEventList>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d0f3      	beq.n	800ca08 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800ca20:	f001 f9ac 	bl	800dd7c <vTaskMissedYield>
 800ca24:	e7f0      	b.n	800ca08 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800ca26:	23ff      	movs	r3, #255	@ 0xff
 800ca28:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800ca2c:	f001 fd6c 	bl	800e508 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ca30:	f001 fd48 	bl	800e4c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ca34:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 800ca38:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca3a:	e001      	b.n	800ca40 <prvUnlockQueue+0x48>
				--cRxLock;
 800ca3c:	3c01      	subs	r4, #1
 800ca3e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca40:	2c00      	cmp	r4, #0
 800ca42:	dd0a      	ble.n	800ca5a <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca44:	692b      	ldr	r3, [r5, #16]
 800ca46:	b143      	cbz	r3, 800ca5a <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca48:	f105 0010 	add.w	r0, r5, #16
 800ca4c:	f001 f902 	bl	800dc54 <xTaskRemoveFromEventList>
 800ca50:	2800      	cmp	r0, #0
 800ca52:	d0f3      	beq.n	800ca3c <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800ca54:	f001 f992 	bl	800dd7c <vTaskMissedYield>
 800ca58:	e7f0      	b.n	800ca3c <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800ca5a:	23ff      	movs	r3, #255	@ 0xff
 800ca5c:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 800ca60:	f001 fd52 	bl	800e508 <vPortExitCritical>
}
 800ca64:	bd38      	pop	{r3, r4, r5, pc}

0800ca66 <xQueueGenericReset>:
{
 800ca66:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800ca68:	b1e0      	cbz	r0, 800caa4 <xQueueGenericReset+0x3e>
 800ca6a:	460d      	mov	r5, r1
 800ca6c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800ca6e:	f001 fd29 	bl	800e4c4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca72:	6823      	ldr	r3, [r4, #0]
 800ca74:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800ca76:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800ca78:	fb01 3002 	mla	r0, r1, r2, r3
 800ca7c:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ca7e:	2000      	movs	r0, #0
 800ca80:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca82:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca84:	3a01      	subs	r2, #1
 800ca86:	fb02 3301 	mla	r3, r2, r1, r3
 800ca8a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ca8c:	23ff      	movs	r3, #255	@ 0xff
 800ca8e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ca92:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800ca96:	b9fd      	cbnz	r5, 800cad8 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca98:	6923      	ldr	r3, [r4, #16]
 800ca9a:	b963      	cbnz	r3, 800cab6 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800ca9c:	f001 fd34 	bl	800e508 <vPortExitCritical>
}
 800caa0:	2001      	movs	r0, #1
 800caa2:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800caa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caa8:	f383 8811 	msr	BASEPRI, r3
 800caac:	f3bf 8f6f 	isb	sy
 800cab0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800cab4:	e7fe      	b.n	800cab4 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cab6:	f104 0010 	add.w	r0, r4, #16
 800caba:	f001 f8cb 	bl	800dc54 <xTaskRemoveFromEventList>
 800cabe:	2800      	cmp	r0, #0
 800cac0:	d0ec      	beq.n	800ca9c <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800cac2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800caca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cace:	f3bf 8f4f 	dsb	sy
 800cad2:	f3bf 8f6f 	isb	sy
 800cad6:	e7e1      	b.n	800ca9c <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cad8:	f104 0010 	add.w	r0, r4, #16
 800cadc:	f7ff fed6 	bl	800c88c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cae0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800cae4:	f7ff fed2 	bl	800c88c <vListInitialise>
 800cae8:	e7d8      	b.n	800ca9c <xQueueGenericReset+0x36>

0800caea <prvInitialiseNewQueue>:
{
 800caea:	b538      	push	{r3, r4, r5, lr}
 800caec:	461d      	mov	r5, r3
 800caee:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800caf0:	460b      	mov	r3, r1
 800caf2:	b949      	cbnz	r1, 800cb08 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800caf4:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800caf6:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800caf8:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cafa:	2101      	movs	r1, #1
 800cafc:	4620      	mov	r0, r4
 800cafe:	f7ff ffb2 	bl	800ca66 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800cb02:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 800cb06:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cb08:	6022      	str	r2, [r4, #0]
 800cb0a:	e7f4      	b.n	800caf6 <prvInitialiseNewQueue+0xc>

0800cb0c <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb0c:	b940      	cbnz	r0, 800cb20 <xQueueGenericCreateStatic+0x14>
 800cb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb12:	f383 8811 	msr	BASEPRI, r3
 800cb16:	f3bf 8f6f 	isb	sy
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	e7fe      	b.n	800cb1e <xQueueGenericCreateStatic+0x12>
	{
 800cb20:	b510      	push	{r4, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 800cb26:	b183      	cbz	r3, 800cb4a <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cb28:	1e0b      	subs	r3, r1, #0
 800cb2a:	bf18      	it	ne
 800cb2c:	2301      	movne	r3, #1
 800cb2e:	2a00      	cmp	r2, #0
 800cb30:	bf08      	it	eq
 800cb32:	f043 0301 	orreq.w	r3, r3, #1
 800cb36:	b98b      	cbnz	r3, 800cb5c <xQueueGenericCreateStatic+0x50>
 800cb38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb3c:	f383 8811 	msr	BASEPRI, r3
 800cb40:	f3bf 8f6f 	isb	sy
 800cb44:	f3bf 8f4f 	dsb	sy
 800cb48:	e7fe      	b.n	800cb48 <xQueueGenericCreateStatic+0x3c>
 800cb4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb4e:	f383 8811 	msr	BASEPRI, r3
 800cb52:	f3bf 8f6f 	isb	sy
 800cb56:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800cb5a:	e7fe      	b.n	800cb5a <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cb5c:	fab1 f381 	clz	r3, r1
 800cb60:	095b      	lsrs	r3, r3, #5
 800cb62:	2a00      	cmp	r2, #0
 800cb64:	bf18      	it	ne
 800cb66:	f043 0301 	orrne.w	r3, r3, #1
 800cb6a:	b943      	cbnz	r3, 800cb7e <xQueueGenericCreateStatic+0x72>
 800cb6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb70:	f383 8811 	msr	BASEPRI, r3
 800cb74:	f3bf 8f6f 	isb	sy
 800cb78:	f3bf 8f4f 	dsb	sy
 800cb7c:	e7fe      	b.n	800cb7c <xQueueGenericCreateStatic+0x70>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cb7e:	2350      	movs	r3, #80	@ 0x50
 800cb80:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cb82:	9b03      	ldr	r3, [sp, #12]
 800cb84:	2b50      	cmp	r3, #80	@ 0x50
 800cb86:	d008      	beq.n	800cb9a <xQueueGenericCreateStatic+0x8e>
 800cb88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb8c:	f383 8811 	msr	BASEPRI, r3
 800cb90:	f3bf 8f6f 	isb	sy
 800cb94:	f3bf 8f4f 	dsb	sy
 800cb98:	e7fe      	b.n	800cb98 <xQueueGenericCreateStatic+0x8c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cb9a:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cba2:	9400      	str	r4, [sp, #0]
 800cba4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800cba8:	f7ff ff9f 	bl	800caea <prvInitialiseNewQueue>
	}
 800cbac:	4620      	mov	r0, r4
 800cbae:	b004      	add	sp, #16
 800cbb0:	bd10      	pop	{r4, pc}

0800cbb2 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cbb2:	b940      	cbnz	r0, 800cbc6 <xQueueGenericCreate+0x14>
 800cbb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbb8:	f383 8811 	msr	BASEPRI, r3
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	e7fe      	b.n	800cbc4 <xQueueGenericCreate+0x12>
	{
 800cbc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbc8:	b083      	sub	sp, #12
 800cbca:	460d      	mov	r5, r1
 800cbcc:	4614      	mov	r4, r2
 800cbce:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbd0:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cbd4:	3050      	adds	r0, #80	@ 0x50
 800cbd6:	f001 fe2d 	bl	800e834 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800cbda:	4607      	mov	r7, r0
 800cbdc:	b150      	cbz	r0, 800cbf4 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cbe4:	9000      	str	r0, [sp, #0]
 800cbe6:	4623      	mov	r3, r4
 800cbe8:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 800cbec:	4629      	mov	r1, r5
 800cbee:	4630      	mov	r0, r6
 800cbf0:	f7ff ff7b 	bl	800caea <prvInitialiseNewQueue>
	}
 800cbf4:	4638      	mov	r0, r7
 800cbf6:	b003      	add	sp, #12
 800cbf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cbfa <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 800cbfa:	b940      	cbnz	r0, 800cc0e <xQueueCreateCountingSemaphoreStatic+0x14>
 800cbfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc00:	f383 8811 	msr	BASEPRI, r3
 800cc04:	f3bf 8f6f 	isb	sy
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	e7fe      	b.n	800cc0c <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 800cc0e:	b510      	push	{r4, lr}
 800cc10:	b082      	sub	sp, #8
 800cc12:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800cc14:	4288      	cmp	r0, r1
 800cc16:	d208      	bcs.n	800cc2a <xQueueCreateCountingSemaphoreStatic+0x30>
 800cc18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc1c:	f383 8811 	msr	BASEPRI, r3
 800cc20:	f3bf 8f6f 	isb	sy
 800cc24:	f3bf 8f4f 	dsb	sy
 800cc28:	e7fe      	b.n	800cc28 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cc2a:	2302      	movs	r3, #2
 800cc2c:	9300      	str	r3, [sp, #0]
 800cc2e:	4613      	mov	r3, r2
 800cc30:	2200      	movs	r2, #0
 800cc32:	4611      	mov	r1, r2
 800cc34:	f7ff ff6a 	bl	800cb0c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800cc38:	b100      	cbz	r0, 800cc3c <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cc3a:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800cc3c:	b002      	add	sp, #8
 800cc3e:	bd10      	pop	{r4, pc}

0800cc40 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800cc40:	b940      	cbnz	r0, 800cc54 <xQueueCreateCountingSemaphore+0x14>
 800cc42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc46:	f383 8811 	msr	BASEPRI, r3
 800cc4a:	f3bf 8f6f 	isb	sy
 800cc4e:	f3bf 8f4f 	dsb	sy
 800cc52:	e7fe      	b.n	800cc52 <xQueueCreateCountingSemaphore+0x12>
	{
 800cc54:	b510      	push	{r4, lr}
 800cc56:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800cc58:	4288      	cmp	r0, r1
 800cc5a:	d208      	bcs.n	800cc6e <xQueueCreateCountingSemaphore+0x2e>
 800cc5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc60:	f383 8811 	msr	BASEPRI, r3
 800cc64:	f3bf 8f6f 	isb	sy
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	e7fe      	b.n	800cc6c <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cc6e:	2202      	movs	r2, #2
 800cc70:	2100      	movs	r1, #0
 800cc72:	f7ff ff9e 	bl	800cbb2 <xQueueGenericCreate>
		if( xHandle != NULL )
 800cc76:	b100      	cbz	r0, 800cc7a <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cc78:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800cc7a:	bd10      	pop	{r4, pc}

0800cc7c <xQueueGenericSend>:
{
 800cc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc7e:	b085      	sub	sp, #20
 800cc80:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800cc82:	b188      	cbz	r0, 800cca8 <xQueueGenericSend+0x2c>
 800cc84:	460f      	mov	r7, r1
 800cc86:	461d      	mov	r5, r3
 800cc88:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc8a:	b1b1      	cbz	r1, 800ccba <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc8c:	2d02      	cmp	r5, #2
 800cc8e:	d120      	bne.n	800ccd2 <xQueueGenericSend+0x56>
 800cc90:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d01d      	beq.n	800ccd2 <xQueueGenericSend+0x56>
 800cc96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc9a:	f383 8811 	msr	BASEPRI, r3
 800cc9e:	f3bf 8f6f 	isb	sy
 800cca2:	f3bf 8f4f 	dsb	sy
 800cca6:	e7fe      	b.n	800cca6 <xQueueGenericSend+0x2a>
 800cca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccac:	f383 8811 	msr	BASEPRI, r3
 800ccb0:	f3bf 8f6f 	isb	sy
 800ccb4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800ccb8:	e7fe      	b.n	800ccb8 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccba:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d0e5      	beq.n	800cc8c <xQueueGenericSend+0x10>
 800ccc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	e7fe      	b.n	800ccd0 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ccd2:	f001 f859 	bl	800dd88 <xTaskGetSchedulerState>
 800ccd6:	4606      	mov	r6, r0
 800ccd8:	b958      	cbnz	r0, 800ccf2 <xQueueGenericSend+0x76>
 800ccda:	9b01      	ldr	r3, [sp, #4]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d048      	beq.n	800cd72 <xQueueGenericSend+0xf6>
 800cce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce4:	f383 8811 	msr	BASEPRI, r3
 800cce8:	f3bf 8f6f 	isb	sy
 800ccec:	f3bf 8f4f 	dsb	sy
 800ccf0:	e7fe      	b.n	800ccf0 <xQueueGenericSend+0x74>
 800ccf2:	2600      	movs	r6, #0
 800ccf4:	e03d      	b.n	800cd72 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ccf6:	462a      	mov	r2, r5
 800ccf8:	4639      	mov	r1, r7
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f7ff fe2f 	bl	800c95e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd00:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cd02:	b97b      	cbnz	r3, 800cd24 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800cd04:	b148      	cbz	r0, 800cd1a <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800cd06:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cd0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cd12:	f3bf 8f4f 	dsb	sy
 800cd16:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800cd1a:	f001 fbf5 	bl	800e508 <vPortExitCritical>
				return pdPASS;
 800cd1e:	2001      	movs	r0, #1
}
 800cd20:	b005      	add	sp, #20
 800cd22:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd24:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800cd28:	f000 ff94 	bl	800dc54 <xTaskRemoveFromEventList>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d0f4      	beq.n	800cd1a <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800cd30:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cd34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd38:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cd3c:	f3bf 8f4f 	dsb	sy
 800cd40:	f3bf 8f6f 	isb	sy
 800cd44:	e7e9      	b.n	800cd1a <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800cd46:	f001 fbdf 	bl	800e508 <vPortExitCritical>
					return errQUEUE_FULL;
 800cd4a:	2000      	movs	r0, #0
 800cd4c:	e7e8      	b.n	800cd20 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd4e:	a802      	add	r0, sp, #8
 800cd50:	f000 ffc6 	bl	800dce0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd54:	2601      	movs	r6, #1
 800cd56:	e019      	b.n	800cd8c <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800cd58:	2300      	movs	r3, #0
 800cd5a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800cd5e:	e021      	b.n	800cda4 <xQueueGenericSend+0x128>
 800cd60:	2300      	movs	r3, #0
 800cd62:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800cd66:	e023      	b.n	800cdb0 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800cd68:	4620      	mov	r0, r4
 800cd6a:	f7ff fe45 	bl	800c9f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd6e:	f000 fe49 	bl	800da04 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800cd72:	f001 fba7 	bl	800e4c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd76:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800cd78:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d3bb      	bcc.n	800ccf6 <xQueueGenericSend+0x7a>
 800cd7e:	2d02      	cmp	r5, #2
 800cd80:	d0b9      	beq.n	800ccf6 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd82:	9b01      	ldr	r3, [sp, #4]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d0de      	beq.n	800cd46 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800cd88:	2e00      	cmp	r6, #0
 800cd8a:	d0e0      	beq.n	800cd4e <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 800cd8c:	f001 fbbc 	bl	800e508 <vPortExitCritical>
		vTaskSuspendAll();
 800cd90:	f000 fd9e 	bl	800d8d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd94:	f001 fb96 	bl	800e4c4 <vPortEnterCritical>
 800cd98:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 800cd9c:	b252      	sxtb	r2, r2
 800cd9e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cda2:	d0d9      	beq.n	800cd58 <xQueueGenericSend+0xdc>
 800cda4:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 800cda8:	b252      	sxtb	r2, r2
 800cdaa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cdae:	d0d7      	beq.n	800cd60 <xQueueGenericSend+0xe4>
 800cdb0:	f001 fbaa 	bl	800e508 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cdb4:	a901      	add	r1, sp, #4
 800cdb6:	a802      	add	r0, sp, #8
 800cdb8:	f000 ff9e 	bl	800dcf8 <xTaskCheckForTimeOut>
 800cdbc:	b9d8      	cbnz	r0, 800cdf6 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	f7ff fdb1 	bl	800c926 <prvIsQueueFull>
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	d0cf      	beq.n	800cd68 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cdc8:	9901      	ldr	r1, [sp, #4]
 800cdca:	f104 0010 	add.w	r0, r4, #16
 800cdce:	f000 ff0d 	bl	800dbec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f7ff fe10 	bl	800c9f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cdd8:	f000 fe14 	bl	800da04 <xTaskResumeAll>
 800cddc:	2800      	cmp	r0, #0
 800cdde:	d1c8      	bne.n	800cd72 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800cde0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cde4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cde8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cdec:	f3bf 8f4f 	dsb	sy
 800cdf0:	f3bf 8f6f 	isb	sy
 800cdf4:	e7bd      	b.n	800cd72 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	f7ff fdfe 	bl	800c9f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cdfc:	f000 fe02 	bl	800da04 <xTaskResumeAll>
			return errQUEUE_FULL;
 800ce00:	2000      	movs	r0, #0
 800ce02:	e78d      	b.n	800cd20 <xQueueGenericSend+0xa4>

0800ce04 <xQueueGenericSendFromISR>:
{
 800ce04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800ce08:	b190      	cbz	r0, 800ce30 <xQueueGenericSendFromISR+0x2c>
 800ce0a:	460f      	mov	r7, r1
 800ce0c:	4616      	mov	r6, r2
 800ce0e:	461c      	mov	r4, r3
 800ce10:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce12:	b1b1      	cbz	r1, 800ce42 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce14:	2c02      	cmp	r4, #2
 800ce16:	d120      	bne.n	800ce5a <xQueueGenericSendFromISR+0x56>
 800ce18:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	d01d      	beq.n	800ce5a <xQueueGenericSendFromISR+0x56>
 800ce1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce22:	f383 8811 	msr	BASEPRI, r3
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	f3bf 8f4f 	dsb	sy
 800ce2e:	e7fe      	b.n	800ce2e <xQueueGenericSendFromISR+0x2a>
 800ce30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce34:	f383 8811 	msr	BASEPRI, r3
 800ce38:	f3bf 8f6f 	isb	sy
 800ce3c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800ce40:	e7fe      	b.n	800ce40 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce42:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d0e5      	beq.n	800ce14 <xQueueGenericSendFromISR+0x10>
 800ce48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce4c:	f383 8811 	msr	BASEPRI, r3
 800ce50:	f3bf 8f6f 	isb	sy
 800ce54:	f3bf 8f4f 	dsb	sy
 800ce58:	e7fe      	b.n	800ce58 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce5a:	f001 fc59 	bl	800e710 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ce5e:	f3ef 8811 	mrs	r8, BASEPRI
 800ce62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce66:	f383 8811 	msr	BASEPRI, r3
 800ce6a:	f3bf 8f6f 	isb	sy
 800ce6e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce72:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 800ce74:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d306      	bcc.n	800ce88 <xQueueGenericSendFromISR+0x84>
 800ce7a:	2c02      	cmp	r4, #2
 800ce7c:	d004      	beq.n	800ce88 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800ce7e:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ce80:	f388 8811 	msr	BASEPRI, r8
}
 800ce84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce88:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 800ce8c:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce90:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce92:	4622      	mov	r2, r4
 800ce94:	4639      	mov	r1, r7
 800ce96:	4628      	mov	r0, r5
 800ce98:	f7ff fd61 	bl	800c95e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800ce9c:	f1b9 3fff 	cmp.w	r9, #4294967295
 800cea0:	d006      	beq.n	800ceb0 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cea2:	f109 0301 	add.w	r3, r9, #1
 800cea6:	b25b      	sxtb	r3, r3
 800cea8:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800ceac:	2001      	movs	r0, #1
 800ceae:	e7e7      	b.n	800ce80 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ceb0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800ceb2:	b90b      	cbnz	r3, 800ceb8 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800ceb4:	2001      	movs	r0, #1
 800ceb6:	e7e3      	b.n	800ce80 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ceb8:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800cebc:	f000 feca 	bl	800dc54 <xTaskRemoveFromEventList>
 800cec0:	b118      	cbz	r0, 800ceca <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800cec2:	b126      	cbz	r6, 800cece <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cec4:	2001      	movs	r0, #1
 800cec6:	6030      	str	r0, [r6, #0]
 800cec8:	e7da      	b.n	800ce80 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800ceca:	2001      	movs	r0, #1
 800cecc:	e7d8      	b.n	800ce80 <xQueueGenericSendFromISR+0x7c>
 800cece:	2001      	movs	r0, #1
 800ced0:	e7d6      	b.n	800ce80 <xQueueGenericSendFromISR+0x7c>

0800ced2 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800ced2:	b168      	cbz	r0, 800cef0 <xQueueGiveFromISR+0x1e>
{
 800ced4:	b570      	push	{r4, r5, r6, lr}
 800ced6:	460c      	mov	r4, r1
 800ced8:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800ceda:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800cedc:	b18b      	cbz	r3, 800cf02 <xQueueGiveFromISR+0x30>
	__asm volatile
 800cede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cee2:	f383 8811 	msr	BASEPRI, r3
 800cee6:	f3bf 8f6f 	isb	sy
 800ceea:	f3bf 8f4f 	dsb	sy
 800ceee:	e7fe      	b.n	800ceee <xQueueGiveFromISR+0x1c>
 800cef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cef4:	f383 8811 	msr	BASEPRI, r3
 800cef8:	f3bf 8f6f 	isb	sy
 800cefc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800cf00:	e7fe      	b.n	800cf00 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cf02:	6803      	ldr	r3, [r0, #0]
 800cf04:	b1eb      	cbz	r3, 800cf42 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf06:	f001 fc03 	bl	800e710 <vPortValidateInterruptPriority>
	__asm volatile
 800cf0a:	f3ef 8611 	mrs	r6, BASEPRI
 800cf0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf12:	f383 8811 	msr	BASEPRI, r3
 800cf16:	f3bf 8f6f 	isb	sy
 800cf1a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf1e:	6baa      	ldr	r2, [r5, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cf20:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d926      	bls.n	800cf74 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf26:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 800cf2a:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf2c:	3201      	adds	r2, #1
 800cf2e:	63aa      	str	r2, [r5, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800cf30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf34:	d011      	beq.n	800cf5a <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf36:	3301      	adds	r3, #1
 800cf38:	b25b      	sxtb	r3, r3
 800cf3a:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800cf3e:	2001      	movs	r0, #1
 800cf40:	e019      	b.n	800cf76 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cf42:	6883      	ldr	r3, [r0, #8]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d0de      	beq.n	800cf06 <xQueueGiveFromISR+0x34>
	__asm volatile
 800cf48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf4c:	f383 8811 	msr	BASEPRI, r3
 800cf50:	f3bf 8f6f 	isb	sy
 800cf54:	f3bf 8f4f 	dsb	sy
 800cf58:	e7fe      	b.n	800cf58 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf5a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800cf5c:	b90b      	cbnz	r3, 800cf62 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800cf5e:	2001      	movs	r0, #1
 800cf60:	e009      	b.n	800cf76 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf62:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800cf66:	f000 fe75 	bl	800dc54 <xTaskRemoveFromEventList>
 800cf6a:	b138      	cbz	r0, 800cf7c <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800cf6c:	b144      	cbz	r4, 800cf80 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf6e:	2001      	movs	r0, #1
 800cf70:	6020      	str	r0, [r4, #0]
 800cf72:	e000      	b.n	800cf76 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800cf74:	2000      	movs	r0, #0
	__asm volatile
 800cf76:	f386 8811 	msr	BASEPRI, r6
}
 800cf7a:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800cf7c:	2001      	movs	r0, #1
 800cf7e:	e7fa      	b.n	800cf76 <xQueueGiveFromISR+0xa4>
 800cf80:	2001      	movs	r0, #1
 800cf82:	e7f8      	b.n	800cf76 <xQueueGiveFromISR+0xa4>

0800cf84 <xQueueReceive>:
{
 800cf84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf86:	b085      	sub	sp, #20
 800cf88:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800cf8a:	b190      	cbz	r0, 800cfb2 <xQueueReceive+0x2e>
 800cf8c:	460f      	mov	r7, r1
 800cf8e:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf90:	b1c1      	cbz	r1, 800cfc4 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf92:	f000 fef9 	bl	800dd88 <xTaskGetSchedulerState>
 800cf96:	4606      	mov	r6, r0
 800cf98:	bb00      	cbnz	r0, 800cfdc <xQueueReceive+0x58>
 800cf9a:	9b01      	ldr	r3, [sp, #4]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d05e      	beq.n	800d05e <xQueueReceive+0xda>
	__asm volatile
 800cfa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfa4:	f383 8811 	msr	BASEPRI, r3
 800cfa8:	f3bf 8f6f 	isb	sy
 800cfac:	f3bf 8f4f 	dsb	sy
 800cfb0:	e7fe      	b.n	800cfb0 <xQueueReceive+0x2c>
 800cfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfb6:	f383 8811 	msr	BASEPRI, r3
 800cfba:	f3bf 8f6f 	isb	sy
 800cfbe:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800cfc2:	e7fe      	b.n	800cfc2 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfc4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d0e3      	beq.n	800cf92 <xQueueReceive+0xe>
 800cfca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfce:	f383 8811 	msr	BASEPRI, r3
 800cfd2:	f3bf 8f6f 	isb	sy
 800cfd6:	f3bf 8f4f 	dsb	sy
 800cfda:	e7fe      	b.n	800cfda <xQueueReceive+0x56>
 800cfdc:	2600      	movs	r6, #0
 800cfde:	e03e      	b.n	800d05e <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cfe0:	4639      	mov	r1, r7
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	f7ff fcf6 	bl	800c9d4 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cfe8:	3d01      	subs	r5, #1
 800cfea:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfec:	6923      	ldr	r3, [r4, #16]
 800cfee:	b923      	cbnz	r3, 800cffa <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 800cff0:	f001 fa8a 	bl	800e508 <vPortExitCritical>
				return pdPASS;
 800cff4:	2001      	movs	r0, #1
}
 800cff6:	b005      	add	sp, #20
 800cff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cffa:	f104 0010 	add.w	r0, r4, #16
 800cffe:	f000 fe29 	bl	800dc54 <xTaskRemoveFromEventList>
 800d002:	2800      	cmp	r0, #0
 800d004:	d0f4      	beq.n	800cff0 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800d006:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d00a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d00e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d012:	f3bf 8f4f 	dsb	sy
 800d016:	f3bf 8f6f 	isb	sy
 800d01a:	e7e9      	b.n	800cff0 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800d01c:	f001 fa74 	bl	800e508 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d020:	2000      	movs	r0, #0
 800d022:	e7e8      	b.n	800cff6 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d024:	a802      	add	r0, sp, #8
 800d026:	f000 fe5b 	bl	800dce0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d02a:	2601      	movs	r6, #1
 800d02c:	e021      	b.n	800d072 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800d02e:	2300      	movs	r3, #0
 800d030:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800d034:	e029      	b.n	800d08a <xQueueReceive+0x106>
 800d036:	2300      	movs	r3, #0
 800d038:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800d03c:	e02b      	b.n	800d096 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800d03e:	4620      	mov	r0, r4
 800d040:	f7ff fcda 	bl	800c9f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d044:	f000 fcde 	bl	800da04 <xTaskResumeAll>
 800d048:	e009      	b.n	800d05e <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800d04a:	4620      	mov	r0, r4
 800d04c:	f7ff fcd4 	bl	800c9f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d050:	f000 fcd8 	bl	800da04 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d054:	4620      	mov	r0, r4
 800d056:	f7ff fc75 	bl	800c944 <prvIsQueueEmpty>
 800d05a:	2800      	cmp	r0, #0
 800d05c:	d13f      	bne.n	800d0de <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800d05e:	f001 fa31 	bl	800e4c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d062:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d064:	2d00      	cmp	r5, #0
 800d066:	d1bb      	bne.n	800cfe0 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d068:	9b01      	ldr	r3, [sp, #4]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d0d6      	beq.n	800d01c <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800d06e:	2e00      	cmp	r6, #0
 800d070:	d0d8      	beq.n	800d024 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800d072:	f001 fa49 	bl	800e508 <vPortExitCritical>
		vTaskSuspendAll();
 800d076:	f000 fc2b 	bl	800d8d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d07a:	f001 fa23 	bl	800e4c4 <vPortEnterCritical>
 800d07e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d082:	b25b      	sxtb	r3, r3
 800d084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d088:	d0d1      	beq.n	800d02e <xQueueReceive+0xaa>
 800d08a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d08e:	b25b      	sxtb	r3, r3
 800d090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d094:	d0cf      	beq.n	800d036 <xQueueReceive+0xb2>
 800d096:	f001 fa37 	bl	800e508 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d09a:	a901      	add	r1, sp, #4
 800d09c:	a802      	add	r0, sp, #8
 800d09e:	f000 fe2b 	bl	800dcf8 <xTaskCheckForTimeOut>
 800d0a2:	2800      	cmp	r0, #0
 800d0a4:	d1d1      	bne.n	800d04a <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	f7ff fc4c 	bl	800c944 <prvIsQueueEmpty>
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	d0c6      	beq.n	800d03e <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d0b0:	9901      	ldr	r1, [sp, #4]
 800d0b2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d0b6:	f000 fd99 	bl	800dbec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	f7ff fc9c 	bl	800c9f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d0c0:	f000 fca0 	bl	800da04 <xTaskResumeAll>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	d1ca      	bne.n	800d05e <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800d0c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d0cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d0d4:	f3bf 8f4f 	dsb	sy
 800d0d8:	f3bf 8f6f 	isb	sy
 800d0dc:	e7bf      	b.n	800d05e <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800d0de:	2000      	movs	r0, #0
 800d0e0:	e789      	b.n	800cff6 <xQueueReceive+0x72>

0800d0e2 <xQueueSemaphoreTake>:
{
 800d0e2:	b570      	push	{r4, r5, r6, lr}
 800d0e4:	b084      	sub	sp, #16
 800d0e6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d0e8:	b158      	cbz	r0, 800d102 <xQueueSemaphoreTake+0x20>
 800d0ea:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800d0ec:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d0ee:	b18b      	cbz	r3, 800d114 <xQueueSemaphoreTake+0x32>
 800d0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0f4:	f383 8811 	msr	BASEPRI, r3
 800d0f8:	f3bf 8f6f 	isb	sy
 800d0fc:	f3bf 8f4f 	dsb	sy
 800d100:	e7fe      	b.n	800d100 <xQueueSemaphoreTake+0x1e>
 800d102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d106:	f383 8811 	msr	BASEPRI, r3
 800d10a:	f3bf 8f6f 	isb	sy
 800d10e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800d112:	e7fe      	b.n	800d112 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d114:	f000 fe38 	bl	800dd88 <xTaskGetSchedulerState>
 800d118:	4605      	mov	r5, r0
 800d11a:	b950      	cbnz	r0, 800d132 <xQueueSemaphoreTake+0x50>
 800d11c:	9b01      	ldr	r3, [sp, #4]
 800d11e:	b15b      	cbz	r3, 800d138 <xQueueSemaphoreTake+0x56>
 800d120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d124:	f383 8811 	msr	BASEPRI, r3
 800d128:	f3bf 8f6f 	isb	sy
 800d12c:	f3bf 8f4f 	dsb	sy
 800d130:	e7fe      	b.n	800d130 <xQueueSemaphoreTake+0x4e>
 800d132:	2600      	movs	r6, #0
 800d134:	4635      	mov	r5, r6
 800d136:	e055      	b.n	800d1e4 <xQueueSemaphoreTake+0x102>
 800d138:	4606      	mov	r6, r0
 800d13a:	e053      	b.n	800d1e4 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d13c:	3b01      	subs	r3, #1
 800d13e:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d140:	6823      	ldr	r3, [r4, #0]
 800d142:	b13b      	cbz	r3, 800d154 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d144:	6923      	ldr	r3, [r4, #16]
 800d146:	b94b      	cbnz	r3, 800d15c <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800d148:	f001 f9de 	bl	800e508 <vPortExitCritical>
				return pdPASS;
 800d14c:	2601      	movs	r6, #1
}
 800d14e:	4630      	mov	r0, r6
 800d150:	b004      	add	sp, #16
 800d152:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d154:	f000 ff0c 	bl	800df70 <pvTaskIncrementMutexHeldCount>
 800d158:	60a0      	str	r0, [r4, #8]
 800d15a:	e7f3      	b.n	800d144 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d15c:	f104 0010 	add.w	r0, r4, #16
 800d160:	f000 fd78 	bl	800dc54 <xTaskRemoveFromEventList>
 800d164:	2800      	cmp	r0, #0
 800d166:	d0ef      	beq.n	800d148 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800d168:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d16c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d170:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d174:	f3bf 8f4f 	dsb	sy
 800d178:	f3bf 8f6f 	isb	sy
 800d17c:	e7e4      	b.n	800d148 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d17e:	b146      	cbz	r6, 800d192 <xQueueSemaphoreTake+0xb0>
 800d180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d184:	f383 8811 	msr	BASEPRI, r3
 800d188:	f3bf 8f6f 	isb	sy
 800d18c:	f3bf 8f4f 	dsb	sy
 800d190:	e7fe      	b.n	800d190 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 800d192:	f001 f9b9 	bl	800e508 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d196:	e7da      	b.n	800d14e <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d198:	a802      	add	r0, sp, #8
 800d19a:	f000 fda1 	bl	800dce0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d19e:	2501      	movs	r5, #1
 800d1a0:	e02a      	b.n	800d1f8 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800d1a8:	e032      	b.n	800d210 <xQueueSemaphoreTake+0x12e>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800d1b0:	e034      	b.n	800d21c <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800d1b2:	f001 f987 	bl	800e4c4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d1b6:	68a0      	ldr	r0, [r4, #8]
 800d1b8:	f000 fdf6 	bl	800dda8 <xTaskPriorityInherit>
 800d1bc:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800d1be:	f001 f9a3 	bl	800e508 <vPortExitCritical>
 800d1c2:	e03b      	b.n	800d23c <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	f7ff fc17 	bl	800c9f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1ca:	f000 fc1b 	bl	800da04 <xTaskResumeAll>
 800d1ce:	e009      	b.n	800d1e4 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f7ff fc11 	bl	800c9f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d1d6:	f000 fc15 	bl	800da04 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1da:	4620      	mov	r0, r4
 800d1dc:	f7ff fbb2 	bl	800c944 <prvIsQueueEmpty>
 800d1e0:	2800      	cmp	r0, #0
 800d1e2:	d142      	bne.n	800d26a <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 800d1e4:	f001 f96e 	bl	800e4c4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d1e8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d1a6      	bne.n	800d13c <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1ee:	9b01      	ldr	r3, [sp, #4]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d0c4      	beq.n	800d17e <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 800d1f4:	2d00      	cmp	r5, #0
 800d1f6:	d0cf      	beq.n	800d198 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 800d1f8:	f001 f986 	bl	800e508 <vPortExitCritical>
		vTaskSuspendAll();
 800d1fc:	f000 fb68 	bl	800d8d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d200:	f001 f960 	bl	800e4c4 <vPortEnterCritical>
 800d204:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d208:	b25b      	sxtb	r3, r3
 800d20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d20e:	d0c8      	beq.n	800d1a2 <xQueueSemaphoreTake+0xc0>
 800d210:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d214:	b25b      	sxtb	r3, r3
 800d216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d21a:	d0c6      	beq.n	800d1aa <xQueueSemaphoreTake+0xc8>
 800d21c:	f001 f974 	bl	800e508 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d220:	a901      	add	r1, sp, #4
 800d222:	a802      	add	r0, sp, #8
 800d224:	f000 fd68 	bl	800dcf8 <xTaskCheckForTimeOut>
 800d228:	2800      	cmp	r0, #0
 800d22a:	d1d1      	bne.n	800d1d0 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d22c:	4620      	mov	r0, r4
 800d22e:	f7ff fb89 	bl	800c944 <prvIsQueueEmpty>
 800d232:	2800      	cmp	r0, #0
 800d234:	d0c6      	beq.n	800d1c4 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d236:	6823      	ldr	r3, [r4, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d0ba      	beq.n	800d1b2 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d23c:	9901      	ldr	r1, [sp, #4]
 800d23e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d242:	f000 fcd3 	bl	800dbec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d246:	4620      	mov	r0, r4
 800d248:	f7ff fbd6 	bl	800c9f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d24c:	f000 fbda 	bl	800da04 <xTaskResumeAll>
 800d250:	2800      	cmp	r0, #0
 800d252:	d1c7      	bne.n	800d1e4 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 800d254:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d258:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d25c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d260:	f3bf 8f4f 	dsb	sy
 800d264:	f3bf 8f6f 	isb	sy
 800d268:	e7bc      	b.n	800d1e4 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 800d26a:	b90e      	cbnz	r6, 800d270 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 800d26c:	2600      	movs	r6, #0
 800d26e:	e76e      	b.n	800d14e <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800d270:	f001 f928 	bl	800e4c4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d274:	4620      	mov	r0, r4
 800d276:	f7ff fb4e 	bl	800c916 <prvGetDisinheritPriorityAfterTimeout>
 800d27a:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d27c:	68a0      	ldr	r0, [r4, #8]
 800d27e:	f000 fe27 	bl	800ded0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800d282:	f001 f941 	bl	800e508 <vPortExitCritical>
 800d286:	e7f1      	b.n	800d26c <xQueueSemaphoreTake+0x18a>

0800d288 <xQueueReceiveFromISR>:
{
 800d288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800d28c:	b1b0      	cbz	r0, 800d2bc <xQueueReceiveFromISR+0x34>
 800d28e:	460d      	mov	r5, r1
 800d290:	4690      	mov	r8, r2
 800d292:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d294:	b1d9      	cbz	r1, 800d2ce <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d296:	f001 fa3b 	bl	800e710 <vPortValidateInterruptPriority>
	__asm volatile
 800d29a:	f3ef 8711 	mrs	r7, BASEPRI
 800d29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a2:	f383 8811 	msr	BASEPRI, r3
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2ae:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2b0:	b9ce      	cbnz	r6, 800d2e6 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800d2b2:	2000      	movs	r0, #0
	__asm volatile
 800d2b4:	f387 8811 	msr	BASEPRI, r7
}
 800d2b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800d2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2c0:	f383 8811 	msr	BASEPRI, r3
 800d2c4:	f3bf 8f6f 	isb	sy
 800d2c8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800d2cc:	e7fe      	b.n	800d2cc <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2ce:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d0e0      	beq.n	800d296 <xQueueReceiveFromISR+0xe>
 800d2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d8:	f383 8811 	msr	BASEPRI, r3
 800d2dc:	f3bf 8f6f 	isb	sy
 800d2e0:	f3bf 8f4f 	dsb	sy
 800d2e4:	e7fe      	b.n	800d2e4 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800d2e6:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 800d2ea:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d2ee:	4629      	mov	r1, r5
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	f7ff fb6f 	bl	800c9d4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d2f6:	1e73      	subs	r3, r6, #1
 800d2f8:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800d2fa:	f1b9 3fff 	cmp.w	r9, #4294967295
 800d2fe:	d006      	beq.n	800d30e <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d300:	f109 0301 	add.w	r3, r9, #1
 800d304:	b25b      	sxtb	r3, r3
 800d306:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 800d30a:	2001      	movs	r0, #1
 800d30c:	e7d2      	b.n	800d2b4 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d30e:	6923      	ldr	r3, [r4, #16]
 800d310:	b90b      	cbnz	r3, 800d316 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800d312:	2001      	movs	r0, #1
 800d314:	e7ce      	b.n	800d2b4 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d316:	f104 0010 	add.w	r0, r4, #16
 800d31a:	f000 fc9b 	bl	800dc54 <xTaskRemoveFromEventList>
 800d31e:	b130      	cbz	r0, 800d32e <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 800d320:	f1b8 0f00 	cmp.w	r8, #0
 800d324:	d005      	beq.n	800d332 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d326:	2001      	movs	r0, #1
 800d328:	f8c8 0000 	str.w	r0, [r8]
 800d32c:	e7c2      	b.n	800d2b4 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800d32e:	2001      	movs	r0, #1
 800d330:	e7c0      	b.n	800d2b4 <xQueueReceiveFromISR+0x2c>
 800d332:	2001      	movs	r0, #1
 800d334:	e7be      	b.n	800d2b4 <xQueueReceiveFromISR+0x2c>
	...

0800d338 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d338:	2300      	movs	r3, #0
 800d33a:	2b07      	cmp	r3, #7
 800d33c:	d80c      	bhi.n	800d358 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d33e:	4a07      	ldr	r2, [pc, #28]	@ (800d35c <vQueueAddToRegistry+0x24>)
 800d340:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d344:	b10a      	cbz	r2, 800d34a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d346:	3301      	adds	r3, #1
 800d348:	e7f7      	b.n	800d33a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d34a:	4a04      	ldr	r2, [pc, #16]	@ (800d35c <vQueueAddToRegistry+0x24>)
 800d34c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d350:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d354:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d356:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d358:	4770      	bx	lr
 800d35a:	bf00      	nop
 800d35c:	24002f0c 	.word	0x24002f0c

0800d360 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d360:	2300      	movs	r3, #0
 800d362:	2b07      	cmp	r3, #7
 800d364:	d80f      	bhi.n	800d386 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d366:	4a08      	ldr	r2, [pc, #32]	@ (800d388 <vQueueUnregisterQueue+0x28>)
 800d368:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d36c:	6852      	ldr	r2, [r2, #4]
 800d36e:	4282      	cmp	r2, r0
 800d370:	d001      	beq.n	800d376 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d372:	3301      	adds	r3, #1
 800d374:	e7f5      	b.n	800d362 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d376:	4a04      	ldr	r2, [pc, #16]	@ (800d388 <vQueueUnregisterQueue+0x28>)
 800d378:	2100      	movs	r1, #0
 800d37a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d37e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d382:	6051      	str	r1, [r2, #4]
				break;
 800d384:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d386:	4770      	bx	lr
 800d388:	24002f0c 	.word	0x24002f0c

0800d38c <vQueueDelete>:
	configASSERT( pxQueue );
 800d38c:	b138      	cbz	r0, 800d39e <vQueueDelete+0x12>
{
 800d38e:	b510      	push	{r4, lr}
 800d390:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800d392:	f7ff ffe5 	bl	800d360 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d396:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800d39a:	b14b      	cbz	r3, 800d3b0 <vQueueDelete+0x24>
}
 800d39c:	bd10      	pop	{r4, pc}
 800d39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3a2:	f383 8811 	msr	BASEPRI, r3
 800d3a6:	f3bf 8f6f 	isb	sy
 800d3aa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800d3ae:	e7fe      	b.n	800d3ae <vQueueDelete+0x22>
			vPortFree( pxQueue );
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	f001 fac1 	bl	800e938 <vPortFree>
}
 800d3b6:	e7f1      	b.n	800d39c <vQueueDelete+0x10>

0800d3b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d3b8:	b570      	push	{r4, r5, r6, lr}
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	460d      	mov	r5, r1
 800d3be:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d3c0:	f001 f880 	bl	800e4c4 <vPortEnterCritical>
 800d3c4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d3c8:	b25b      	sxtb	r3, r3
 800d3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ce:	d00d      	beq.n	800d3ec <vQueueWaitForMessageRestricted+0x34>
 800d3d0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d3d4:	b25b      	sxtb	r3, r3
 800d3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3da:	d00b      	beq.n	800d3f4 <vQueueWaitForMessageRestricted+0x3c>
 800d3dc:	f001 f894 	bl	800e508 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d3e0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d3e2:	b15b      	cbz	r3, 800d3fc <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d3e4:	4620      	mov	r0, r4
 800d3e6:	f7ff fb07 	bl	800c9f8 <prvUnlockQueue>
	}
 800d3ea:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800d3f2:	e7ed      	b.n	800d3d0 <vQueueWaitForMessageRestricted+0x18>
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800d3fa:	e7ef      	b.n	800d3dc <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d3fc:	4632      	mov	r2, r6
 800d3fe:	4629      	mov	r1, r5
 800d400:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d404:	f000 fc0a 	bl	800dc1c <vTaskPlaceOnEventListRestricted>
 800d408:	e7ec      	b.n	800d3e4 <vQueueWaitForMessageRestricted+0x2c>
	...

0800d40c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d40c:	4b08      	ldr	r3, [pc, #32]	@ (800d430 <prvResetNextTaskUnblockTime+0x24>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	b923      	cbnz	r3, 800d41e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d414:	4b07      	ldr	r3, [pc, #28]	@ (800d434 <prvResetNextTaskUnblockTime+0x28>)
 800d416:	f04f 32ff 	mov.w	r2, #4294967295
 800d41a:	601a      	str	r2, [r3, #0]
 800d41c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d41e:	4b04      	ldr	r3, [pc, #16]	@ (800d430 <prvResetNextTaskUnblockTime+0x24>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	68db      	ldr	r3, [r3, #12]
 800d424:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d426:	685a      	ldr	r2, [r3, #4]
 800d428:	4b02      	ldr	r3, [pc, #8]	@ (800d434 <prvResetNextTaskUnblockTime+0x28>)
 800d42a:	601a      	str	r2, [r3, #0]
	}
}
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	24002fbc 	.word	0x24002fbc
 800d434:	24002f54 	.word	0x24002f54

0800d438 <prvInitialiseNewTask>:
{
 800d438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d43c:	4680      	mov	r8, r0
 800d43e:	460d      	mov	r5, r1
 800d440:	4617      	mov	r7, r2
 800d442:	4699      	mov	r9, r3
 800d444:	9e08      	ldr	r6, [sp, #32]
 800d446:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 800d44a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d44c:	0092      	lsls	r2, r2, #2
 800d44e:	21a5      	movs	r1, #165	@ 0xa5
 800d450:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800d452:	f00e ff31 	bl	801c2b8 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d456:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d458:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 800d45c:	443a      	add	r2, r7
 800d45e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d462:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800d466:	2d00      	cmp	r5, #0
 800d468:	d042      	beq.n	800d4f0 <prvInitialiseNewTask+0xb8>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d46a:	f04f 0c00 	mov.w	ip, #0
 800d46e:	f1bc 0f0f 	cmp.w	ip, #15
 800d472:	d809      	bhi.n	800d488 <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d474:	f815 300c 	ldrb.w	r3, [r5, ip]
 800d478:	eb04 020c 	add.w	r2, r4, ip
 800d47c:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800d480:	b113      	cbz	r3, 800d488 <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d482:	f10c 0c01 	add.w	ip, ip, #1
 800d486:	e7f2      	b.n	800d46e <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d488:	2300      	movs	r3, #0
 800d48a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d48e:	2e37      	cmp	r6, #55	@ 0x37
 800d490:	d900      	bls.n	800d494 <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d492:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800d494:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800d496:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d498:	2500      	movs	r5, #0
 800d49a:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d49c:	1d20      	adds	r0, r4, #4
 800d49e:	f7ff fa00 	bl	800c8a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d4a2:	f104 0018 	add.w	r0, r4, #24
 800d4a6:	f7ff f9fc 	bl	800c8a2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d4aa:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4ac:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 800d4b0:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d4b2:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800d4b4:	f8c4 50a0 	str.w	r5, [r4, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d4b8:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d4bc:	224c      	movs	r2, #76	@ 0x4c
 800d4be:	4629      	mov	r1, r5
 800d4c0:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 800d4c4:	f00e fef8 	bl	801c2b8 <memset>
 800d4c8:	4b0b      	ldr	r3, [pc, #44]	@ (800d4f8 <prvInitialiseNewTask+0xc0>)
 800d4ca:	65a3      	str	r3, [r4, #88]	@ 0x58
 800d4cc:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d4d0:	65e2      	str	r2, [r4, #92]	@ 0x5c
 800d4d2:	33d0      	adds	r3, #208	@ 0xd0
 800d4d4:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d4d6:	464a      	mov	r2, r9
 800d4d8:	4641      	mov	r1, r8
 800d4da:	4638      	mov	r0, r7
 800d4dc:	f000 ffc4 	bl	800e468 <pxPortInitialiseStack>
 800d4e0:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800d4e2:	f1ba 0f00 	cmp.w	sl, #0
 800d4e6:	d001      	beq.n	800d4ec <prvInitialiseNewTask+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d4e8:	f8ca 4000 	str.w	r4, [sl]
}
 800d4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800d4f6:	e7ca      	b.n	800d48e <prvInitialiseNewTask+0x56>
 800d4f8:	2400948c 	.word	0x2400948c

0800d4fc <prvInitialiseTaskLists>:
{
 800d4fc:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d4fe:	2400      	movs	r4, #0
 800d500:	e007      	b.n	800d512 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d502:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800d506:	0093      	lsls	r3, r2, #2
 800d508:	480e      	ldr	r0, [pc, #56]	@ (800d544 <prvInitialiseTaskLists+0x48>)
 800d50a:	4418      	add	r0, r3
 800d50c:	f7ff f9be 	bl	800c88c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d510:	3401      	adds	r4, #1
 800d512:	2c37      	cmp	r4, #55	@ 0x37
 800d514:	d9f5      	bls.n	800d502 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800d516:	4d0c      	ldr	r5, [pc, #48]	@ (800d548 <prvInitialiseTaskLists+0x4c>)
 800d518:	4628      	mov	r0, r5
 800d51a:	f7ff f9b7 	bl	800c88c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d51e:	4c0b      	ldr	r4, [pc, #44]	@ (800d54c <prvInitialiseTaskLists+0x50>)
 800d520:	4620      	mov	r0, r4
 800d522:	f7ff f9b3 	bl	800c88c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d526:	480a      	ldr	r0, [pc, #40]	@ (800d550 <prvInitialiseTaskLists+0x54>)
 800d528:	f7ff f9b0 	bl	800c88c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800d52c:	4809      	ldr	r0, [pc, #36]	@ (800d554 <prvInitialiseTaskLists+0x58>)
 800d52e:	f7ff f9ad 	bl	800c88c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800d532:	4809      	ldr	r0, [pc, #36]	@ (800d558 <prvInitialiseTaskLists+0x5c>)
 800d534:	f7ff f9aa 	bl	800c88c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800d538:	4b08      	ldr	r3, [pc, #32]	@ (800d55c <prvInitialiseTaskLists+0x60>)
 800d53a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d53c:	4b08      	ldr	r3, [pc, #32]	@ (800d560 <prvInitialiseTaskLists+0x64>)
 800d53e:	601c      	str	r4, [r3, #0]
}
 800d540:	bd38      	pop	{r3, r4, r5, pc}
 800d542:	bf00      	nop
 800d544:	24002fe8 	.word	0x24002fe8
 800d548:	24002fd4 	.word	0x24002fd4
 800d54c:	24002fc0 	.word	0x24002fc0
 800d550:	24002fa4 	.word	0x24002fa4
 800d554:	24002f90 	.word	0x24002f90
 800d558:	24002f78 	.word	0x24002f78
 800d55c:	24002fbc 	.word	0x24002fbc
 800d560:	24002fb8 	.word	0x24002fb8

0800d564 <prvAddNewTaskToReadyList>:
{
 800d564:	b510      	push	{r4, lr}
 800d566:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d568:	f000 ffac 	bl	800e4c4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800d56c:	4a22      	ldr	r2, [pc, #136]	@ (800d5f8 <prvAddNewTaskToReadyList+0x94>)
 800d56e:	6813      	ldr	r3, [r2, #0]
 800d570:	3301      	adds	r3, #1
 800d572:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d574:	4b21      	ldr	r3, [pc, #132]	@ (800d5fc <prvAddNewTaskToReadyList+0x98>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	b15b      	cbz	r3, 800d592 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800d57a:	4b21      	ldr	r3, [pc, #132]	@ (800d600 <prvAddNewTaskToReadyList+0x9c>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	b96b      	cbnz	r3, 800d59c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d580:	4b1e      	ldr	r3, [pc, #120]	@ (800d5fc <prvAddNewTaskToReadyList+0x98>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d586:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d588:	429a      	cmp	r2, r3
 800d58a:	d807      	bhi.n	800d59c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800d58c:	4b1b      	ldr	r3, [pc, #108]	@ (800d5fc <prvAddNewTaskToReadyList+0x98>)
 800d58e:	601c      	str	r4, [r3, #0]
 800d590:	e004      	b.n	800d59c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800d592:	4b1a      	ldr	r3, [pc, #104]	@ (800d5fc <prvAddNewTaskToReadyList+0x98>)
 800d594:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d596:	6813      	ldr	r3, [r2, #0]
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d029      	beq.n	800d5f0 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800d59c:	4a19      	ldr	r2, [pc, #100]	@ (800d604 <prvAddNewTaskToReadyList+0xa0>)
 800d59e:	6813      	ldr	r3, [r2, #0]
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d5a4:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800d5a6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800d5a8:	4b17      	ldr	r3, [pc, #92]	@ (800d608 <prvAddNewTaskToReadyList+0xa4>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4298      	cmp	r0, r3
 800d5ae:	d901      	bls.n	800d5b4 <prvAddNewTaskToReadyList+0x50>
 800d5b0:	4b15      	ldr	r3, [pc, #84]	@ (800d608 <prvAddNewTaskToReadyList+0xa4>)
 800d5b2:	6018      	str	r0, [r3, #0]
 800d5b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d5b8:	1d21      	adds	r1, r4, #4
 800d5ba:	4b14      	ldr	r3, [pc, #80]	@ (800d60c <prvAddNewTaskToReadyList+0xa8>)
 800d5bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d5c0:	f7ff f972 	bl	800c8a8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800d5c4:	f000 ffa0 	bl	800e508 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800d5c8:	4b0d      	ldr	r3, [pc, #52]	@ (800d600 <prvAddNewTaskToReadyList+0x9c>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	b17b      	cbz	r3, 800d5ee <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d5ce:	4b0b      	ldr	r3, [pc, #44]	@ (800d5fc <prvAddNewTaskToReadyList+0x98>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5d4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d209      	bcs.n	800d5ee <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800d5da:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d5de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5e2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d5e6:	f3bf 8f4f 	dsb	sy
 800d5ea:	f3bf 8f6f 	isb	sy
}
 800d5ee:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800d5f0:	f7ff ff84 	bl	800d4fc <prvInitialiseTaskLists>
 800d5f4:	e7d2      	b.n	800d59c <prvAddNewTaskToReadyList+0x38>
 800d5f6:	bf00      	nop
 800d5f8:	24002f74 	.word	0x24002f74
 800d5fc:	24003448 	.word	0x24003448
 800d600:	24002f68 	.word	0x24002f68
 800d604:	24002f58 	.word	0x24002f58
 800d608:	24002f6c 	.word	0x24002f6c
 800d60c:	24002fe8 	.word	0x24002fe8

0800d610 <prvDeleteTCB>:
	{
 800d610:	b510      	push	{r4, lr}
 800d612:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d614:	3054      	adds	r0, #84	@ 0x54
 800d616:	f00e fe87 	bl	801c328 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d61a:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 800d61e:	b163      	cbz	r3, 800d63a <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d620:	2b01      	cmp	r3, #1
 800d622:	d011      	beq.n	800d648 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d624:	2b02      	cmp	r3, #2
 800d626:	d00e      	beq.n	800d646 <prvDeleteTCB+0x36>
 800d628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d62c:	f383 8811 	msr	BASEPRI, r3
 800d630:	f3bf 8f6f 	isb	sy
 800d634:	f3bf 8f4f 	dsb	sy
 800d638:	e7fe      	b.n	800d638 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800d63a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800d63c:	f001 f97c 	bl	800e938 <vPortFree>
				vPortFree( pxTCB );
 800d640:	4620      	mov	r0, r4
 800d642:	f001 f979 	bl	800e938 <vPortFree>
	}
 800d646:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800d648:	4620      	mov	r0, r4
 800d64a:	f001 f975 	bl	800e938 <vPortFree>
 800d64e:	e7fa      	b.n	800d646 <prvDeleteTCB+0x36>

0800d650 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d650:	4b0f      	ldr	r3, [pc, #60]	@ (800d690 <prvCheckTasksWaitingTermination+0x40>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	b1d3      	cbz	r3, 800d68c <prvCheckTasksWaitingTermination+0x3c>
{
 800d656:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800d658:	f000 ff34 	bl	800e4c4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d65c:	4b0d      	ldr	r3, [pc, #52]	@ (800d694 <prvCheckTasksWaitingTermination+0x44>)
 800d65e:	68db      	ldr	r3, [r3, #12]
 800d660:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d662:	1d20      	adds	r0, r4, #4
 800d664:	f7ff f944 	bl	800c8f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d668:	4a0b      	ldr	r2, [pc, #44]	@ (800d698 <prvCheckTasksWaitingTermination+0x48>)
 800d66a:	6813      	ldr	r3, [r2, #0]
 800d66c:	3b01      	subs	r3, #1
 800d66e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d670:	4a07      	ldr	r2, [pc, #28]	@ (800d690 <prvCheckTasksWaitingTermination+0x40>)
 800d672:	6813      	ldr	r3, [r2, #0]
 800d674:	3b01      	subs	r3, #1
 800d676:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800d678:	f000 ff46 	bl	800e508 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800d67c:	4620      	mov	r0, r4
 800d67e:	f7ff ffc7 	bl	800d610 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d682:	4b03      	ldr	r3, [pc, #12]	@ (800d690 <prvCheckTasksWaitingTermination+0x40>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d1e6      	bne.n	800d658 <prvCheckTasksWaitingTermination+0x8>
}
 800d68a:	bd10      	pop	{r4, pc}
 800d68c:	4770      	bx	lr
 800d68e:	bf00      	nop
 800d690:	24002f8c 	.word	0x24002f8c
 800d694:	24002f90 	.word	0x24002f90
 800d698:	24002f74 	.word	0x24002f74

0800d69c <prvIdleTask>:
{
 800d69c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800d69e:	f7ff ffd7 	bl	800d650 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d6a2:	4b07      	ldr	r3, [pc, #28]	@ (800d6c0 <prvIdleTask+0x24>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d9f9      	bls.n	800d69e <prvIdleTask+0x2>
				taskYIELD();
 800d6aa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d6ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6b2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d6b6:	f3bf 8f4f 	dsb	sy
 800d6ba:	f3bf 8f6f 	isb	sy
 800d6be:	e7ee      	b.n	800d69e <prvIdleTask+0x2>
 800d6c0:	24002fe8 	.word	0x24002fe8

0800d6c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d6c4:	b570      	push	{r4, r5, r6, lr}
 800d6c6:	4604      	mov	r4, r0
 800d6c8:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d6ca:	4b19      	ldr	r3, [pc, #100]	@ (800d730 <prvAddCurrentTaskToDelayedList+0x6c>)
 800d6cc:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6ce:	4b19      	ldr	r3, [pc, #100]	@ (800d734 <prvAddCurrentTaskToDelayedList+0x70>)
 800d6d0:	6818      	ldr	r0, [r3, #0]
 800d6d2:	3004      	adds	r0, #4
 800d6d4:	f7ff f90c 	bl	800c8f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d6d8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d6dc:	bf14      	ite	ne
 800d6de:	2300      	movne	r3, #0
 800d6e0:	2301      	moveq	r3, #1
 800d6e2:	2d00      	cmp	r5, #0
 800d6e4:	bf08      	it	eq
 800d6e6:	2300      	moveq	r3, #0
 800d6e8:	b96b      	cbnz	r3, 800d706 <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d6ea:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d6ec:	4b11      	ldr	r3, [pc, #68]	@ (800d734 <prvAddCurrentTaskToDelayedList+0x70>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800d6f2:	42a6      	cmp	r6, r4
 800d6f4:	d90e      	bls.n	800d714 <prvAddCurrentTaskToDelayedList+0x50>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6f6:	4b10      	ldr	r3, [pc, #64]	@ (800d738 <prvAddCurrentTaskToDelayedList+0x74>)
 800d6f8:	6818      	ldr	r0, [r3, #0]
 800d6fa:	4b0e      	ldr	r3, [pc, #56]	@ (800d734 <prvAddCurrentTaskToDelayedList+0x70>)
 800d6fc:	6819      	ldr	r1, [r3, #0]
 800d6fe:	3104      	adds	r1, #4
 800d700:	f7ff f8dd 	bl	800c8be <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d704:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d706:	4b0b      	ldr	r3, [pc, #44]	@ (800d734 <prvAddCurrentTaskToDelayedList+0x70>)
 800d708:	6819      	ldr	r1, [r3, #0]
 800d70a:	3104      	adds	r1, #4
 800d70c:	480b      	ldr	r0, [pc, #44]	@ (800d73c <prvAddCurrentTaskToDelayedList+0x78>)
 800d70e:	f7ff f8cb 	bl	800c8a8 <vListInsertEnd>
 800d712:	e7f7      	b.n	800d704 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d714:	4b0a      	ldr	r3, [pc, #40]	@ (800d740 <prvAddCurrentTaskToDelayedList+0x7c>)
 800d716:	6818      	ldr	r0, [r3, #0]
 800d718:	4b06      	ldr	r3, [pc, #24]	@ (800d734 <prvAddCurrentTaskToDelayedList+0x70>)
 800d71a:	6819      	ldr	r1, [r3, #0]
 800d71c:	3104      	adds	r1, #4
 800d71e:	f7ff f8ce 	bl	800c8be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d722:	4b08      	ldr	r3, [pc, #32]	@ (800d744 <prvAddCurrentTaskToDelayedList+0x80>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	42a3      	cmp	r3, r4
 800d728:	d9ec      	bls.n	800d704 <prvAddCurrentTaskToDelayedList+0x40>
					xNextTaskUnblockTime = xTimeToWake;
 800d72a:	4b06      	ldr	r3, [pc, #24]	@ (800d744 <prvAddCurrentTaskToDelayedList+0x80>)
 800d72c:	601c      	str	r4, [r3, #0]
}
 800d72e:	e7e9      	b.n	800d704 <prvAddCurrentTaskToDelayedList+0x40>
 800d730:	24002f70 	.word	0x24002f70
 800d734:	24003448 	.word	0x24003448
 800d738:	24002fb8 	.word	0x24002fb8
 800d73c:	24002f78 	.word	0x24002f78
 800d740:	24002fbc 	.word	0x24002fbc
 800d744:	24002f54 	.word	0x24002f54

0800d748 <xTaskCreateStatic>:
	{
 800d748:	b530      	push	{r4, r5, lr}
 800d74a:	b087      	sub	sp, #28
 800d74c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800d74e:	b17c      	cbz	r4, 800d770 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d750:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800d752:	b1b5      	cbz	r5, 800d782 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800d754:	25a8      	movs	r5, #168	@ 0xa8
 800d756:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d758:	9d04      	ldr	r5, [sp, #16]
 800d75a:	2da8      	cmp	r5, #168	@ 0xa8
 800d75c:	d01a      	beq.n	800d794 <xTaskCreateStatic+0x4c>
 800d75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d762:	f383 8811 	msr	BASEPRI, r3
 800d766:	f3bf 8f6f 	isb	sy
 800d76a:	f3bf 8f4f 	dsb	sy
 800d76e:	e7fe      	b.n	800d76e <xTaskCreateStatic+0x26>
 800d770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d774:	f383 8811 	msr	BASEPRI, r3
 800d778:	f3bf 8f6f 	isb	sy
 800d77c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800d780:	e7fe      	b.n	800d780 <xTaskCreateStatic+0x38>
 800d782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d786:	f383 8811 	msr	BASEPRI, r3
 800d78a:	f3bf 8f6f 	isb	sy
 800d78e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800d792:	e7fe      	b.n	800d792 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d794:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d796:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800d798:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d79a:	2402      	movs	r4, #2
 800d79c:	f885 40a5 	strb.w	r4, [r5, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d7a0:	2400      	movs	r4, #0
 800d7a2:	9403      	str	r4, [sp, #12]
 800d7a4:	9502      	str	r5, [sp, #8]
 800d7a6:	ac05      	add	r4, sp, #20
 800d7a8:	9401      	str	r4, [sp, #4]
 800d7aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d7ac:	9400      	str	r4, [sp, #0]
 800d7ae:	f7ff fe43 	bl	800d438 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d7b2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d7b4:	f7ff fed6 	bl	800d564 <prvAddNewTaskToReadyList>
	}
 800d7b8:	9805      	ldr	r0, [sp, #20]
 800d7ba:	b007      	add	sp, #28
 800d7bc:	bd30      	pop	{r4, r5, pc}

0800d7be <xTaskCreate>:
	{
 800d7be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7c2:	b085      	sub	sp, #20
 800d7c4:	4607      	mov	r7, r0
 800d7c6:	4688      	mov	r8, r1
 800d7c8:	4614      	mov	r4, r2
 800d7ca:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d7cc:	0090      	lsls	r0, r2, #2
 800d7ce:	f001 f831 	bl	800e834 <pvPortMalloc>
			if( pxStack != NULL )
 800d7d2:	b308      	cbz	r0, 800d818 <xTaskCreate+0x5a>
 800d7d4:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d7d6:	20a8      	movs	r0, #168	@ 0xa8
 800d7d8:	f001 f82c 	bl	800e834 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800d7dc:	4605      	mov	r5, r0
 800d7de:	b1a8      	cbz	r0, 800d80c <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800d7e0:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	f880 30a5 	strb.w	r3, [r0, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d7ea:	9303      	str	r3, [sp, #12]
 800d7ec:	9002      	str	r0, [sp, #8]
 800d7ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d7f0:	9301      	str	r3, [sp, #4]
 800d7f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d7f4:	9300      	str	r3, [sp, #0]
 800d7f6:	4633      	mov	r3, r6
 800d7f8:	4622      	mov	r2, r4
 800d7fa:	4641      	mov	r1, r8
 800d7fc:	4638      	mov	r0, r7
 800d7fe:	f7ff fe1b 	bl	800d438 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d802:	4628      	mov	r0, r5
 800d804:	f7ff feae 	bl	800d564 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d808:	2001      	movs	r0, #1
 800d80a:	e007      	b.n	800d81c <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800d80c:	4648      	mov	r0, r9
 800d80e:	f001 f893 	bl	800e938 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d812:	f04f 30ff 	mov.w	r0, #4294967295
 800d816:	e001      	b.n	800d81c <xTaskCreate+0x5e>
 800d818:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800d81c:	b005      	add	sp, #20
 800d81e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800d824 <vTaskStartScheduler>:
{
 800d824:	b510      	push	{r4, lr}
 800d826:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d828:	2400      	movs	r4, #0
 800d82a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d82c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d82e:	aa07      	add	r2, sp, #28
 800d830:	a906      	add	r1, sp, #24
 800d832:	a805      	add	r0, sp, #20
 800d834:	f7ff f812 	bl	800c85c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d838:	9b05      	ldr	r3, [sp, #20]
 800d83a:	9302      	str	r3, [sp, #8]
 800d83c:	9b06      	ldr	r3, [sp, #24]
 800d83e:	9301      	str	r3, [sp, #4]
 800d840:	9400      	str	r4, [sp, #0]
 800d842:	4623      	mov	r3, r4
 800d844:	9a07      	ldr	r2, [sp, #28]
 800d846:	491a      	ldr	r1, [pc, #104]	@ (800d8b0 <vTaskStartScheduler+0x8c>)
 800d848:	481a      	ldr	r0, [pc, #104]	@ (800d8b4 <vTaskStartScheduler+0x90>)
 800d84a:	f7ff ff7d 	bl	800d748 <xTaskCreateStatic>
 800d84e:	4b1a      	ldr	r3, [pc, #104]	@ (800d8b8 <vTaskStartScheduler+0x94>)
 800d850:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800d852:	b1e8      	cbz	r0, 800d890 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 800d854:	f000 fc0a 	bl	800e06c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800d858:	2801      	cmp	r0, #1
 800d85a:	d11a      	bne.n	800d892 <vTaskStartScheduler+0x6e>
 800d85c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d860:	f383 8811 	msr	BASEPRI, r3
 800d864:	f3bf 8f6f 	isb	sy
 800d868:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d86c:	4b13      	ldr	r3, [pc, #76]	@ (800d8bc <vTaskStartScheduler+0x98>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	3354      	adds	r3, #84	@ 0x54
 800d872:	4a13      	ldr	r2, [pc, #76]	@ (800d8c0 <vTaskStartScheduler+0x9c>)
 800d874:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800d876:	4b13      	ldr	r3, [pc, #76]	@ (800d8c4 <vTaskStartScheduler+0xa0>)
 800d878:	f04f 32ff 	mov.w	r2, #4294967295
 800d87c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d87e:	4b12      	ldr	r3, [pc, #72]	@ (800d8c8 <vTaskStartScheduler+0xa4>)
 800d880:	2201      	movs	r2, #1
 800d882:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d884:	4b11      	ldr	r3, [pc, #68]	@ (800d8cc <vTaskStartScheduler+0xa8>)
 800d886:	2200      	movs	r2, #0
 800d888:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800d88a:	f000 feb5 	bl	800e5f8 <xPortStartScheduler>
 800d88e:	e003      	b.n	800d898 <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 800d890:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d892:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d896:	d001      	beq.n	800d89c <vTaskStartScheduler+0x78>
}
 800d898:	b008      	add	sp, #32
 800d89a:	bd10      	pop	{r4, pc}
 800d89c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8a0:	f383 8811 	msr	BASEPRI, r3
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d8ac:	e7fe      	b.n	800d8ac <vTaskStartScheduler+0x88>
 800d8ae:	bf00      	nop
 800d8b0:	0801c820 	.word	0x0801c820
 800d8b4:	0800d69d 	.word	0x0800d69d
 800d8b8:	24002f50 	.word	0x24002f50
 800d8bc:	24003448 	.word	0x24003448
 800d8c0:	24000028 	.word	0x24000028
 800d8c4:	24002f54 	.word	0x24002f54
 800d8c8:	24002f68 	.word	0x24002f68
 800d8cc:	24002f70 	.word	0x24002f70

0800d8d0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d8d0:	4a02      	ldr	r2, [pc, #8]	@ (800d8dc <vTaskSuspendAll+0xc>)
 800d8d2:	6813      	ldr	r3, [r2, #0]
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	6013      	str	r3, [r2, #0]
}
 800d8d8:	4770      	bx	lr
 800d8da:	bf00      	nop
 800d8dc:	24002f4c 	.word	0x24002f4c

0800d8e0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800d8e0:	4b01      	ldr	r3, [pc, #4]	@ (800d8e8 <xTaskGetTickCount+0x8>)
 800d8e2:	6818      	ldr	r0, [r3, #0]
}
 800d8e4:	4770      	bx	lr
 800d8e6:	bf00      	nop
 800d8e8:	24002f70 	.word	0x24002f70

0800d8ec <xTaskIncrementTick>:
{
 800d8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8ee:	4b3a      	ldr	r3, [pc, #232]	@ (800d9d8 <xTaskIncrementTick+0xec>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d169      	bne.n	800d9ca <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d8f6:	4b39      	ldr	r3, [pc, #228]	@ (800d9dc <xTaskIncrementTick+0xf0>)
 800d8f8:	681d      	ldr	r5, [r3, #0]
 800d8fa:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800d8fc:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d8fe:	b9c5      	cbnz	r5, 800d932 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800d900:	4b37      	ldr	r3, [pc, #220]	@ (800d9e0 <xTaskIncrementTick+0xf4>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	b143      	cbz	r3, 800d91a <xTaskIncrementTick+0x2e>
 800d908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d90c:	f383 8811 	msr	BASEPRI, r3
 800d910:	f3bf 8f6f 	isb	sy
 800d914:	f3bf 8f4f 	dsb	sy
 800d918:	e7fe      	b.n	800d918 <xTaskIncrementTick+0x2c>
 800d91a:	4a31      	ldr	r2, [pc, #196]	@ (800d9e0 <xTaskIncrementTick+0xf4>)
 800d91c:	6811      	ldr	r1, [r2, #0]
 800d91e:	4b31      	ldr	r3, [pc, #196]	@ (800d9e4 <xTaskIncrementTick+0xf8>)
 800d920:	6818      	ldr	r0, [r3, #0]
 800d922:	6010      	str	r0, [r2, #0]
 800d924:	6019      	str	r1, [r3, #0]
 800d926:	4a30      	ldr	r2, [pc, #192]	@ (800d9e8 <xTaskIncrementTick+0xfc>)
 800d928:	6813      	ldr	r3, [r2, #0]
 800d92a:	3301      	adds	r3, #1
 800d92c:	6013      	str	r3, [r2, #0]
 800d92e:	f7ff fd6d 	bl	800d40c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d932:	4b2e      	ldr	r3, [pc, #184]	@ (800d9ec <xTaskIncrementTick+0x100>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	42ab      	cmp	r3, r5
 800d938:	d93d      	bls.n	800d9b6 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800d93a:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d93c:	4b2c      	ldr	r3, [pc, #176]	@ (800d9f0 <xTaskIncrementTick+0x104>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d942:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d946:	009a      	lsls	r2, r3, #2
 800d948:	4b2a      	ldr	r3, [pc, #168]	@ (800d9f4 <xTaskIncrementTick+0x108>)
 800d94a:	589b      	ldr	r3, [r3, r2]
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d900      	bls.n	800d952 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800d950:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800d952:	4b29      	ldr	r3, [pc, #164]	@ (800d9f8 <xTaskIncrementTick+0x10c>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d03c      	beq.n	800d9d4 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800d95a:	2701      	movs	r7, #1
	return xSwitchRequired;
 800d95c:	e03a      	b.n	800d9d4 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800d95e:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d960:	4b1f      	ldr	r3, [pc, #124]	@ (800d9e0 <xTaskIncrementTick+0xf4>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	b343      	cbz	r3, 800d9ba <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d968:	4b1d      	ldr	r3, [pc, #116]	@ (800d9e0 <xTaskIncrementTick+0xf4>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	68db      	ldr	r3, [r3, #12]
 800d96e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d970:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800d972:	429d      	cmp	r5, r3
 800d974:	d326      	bcc.n	800d9c4 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d976:	1d26      	adds	r6, r4, #4
 800d978:	4630      	mov	r0, r6
 800d97a:	f7fe ffb9 	bl	800c8f0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d97e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d980:	b11b      	cbz	r3, 800d98a <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d982:	f104 0018 	add.w	r0, r4, #24
 800d986:	f7fe ffb3 	bl	800c8f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d98a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d98c:	4a1b      	ldr	r2, [pc, #108]	@ (800d9fc <xTaskIncrementTick+0x110>)
 800d98e:	6812      	ldr	r2, [r2, #0]
 800d990:	4293      	cmp	r3, r2
 800d992:	d901      	bls.n	800d998 <xTaskIncrementTick+0xac>
 800d994:	4a19      	ldr	r2, [pc, #100]	@ (800d9fc <xTaskIncrementTick+0x110>)
 800d996:	6013      	str	r3, [r2, #0]
 800d998:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d99c:	009a      	lsls	r2, r3, #2
 800d99e:	4631      	mov	r1, r6
 800d9a0:	4814      	ldr	r0, [pc, #80]	@ (800d9f4 <xTaskIncrementTick+0x108>)
 800d9a2:	4410      	add	r0, r2
 800d9a4:	f7fe ff80 	bl	800c8a8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d9a8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d9aa:	4b11      	ldr	r3, [pc, #68]	@ (800d9f0 <xTaskIncrementTick+0x104>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d2d4      	bcs.n	800d95e <xTaskIncrementTick+0x72>
 800d9b4:	e7d4      	b.n	800d960 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800d9b6:	2700      	movs	r7, #0
 800d9b8:	e7d2      	b.n	800d960 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9ba:	4b0c      	ldr	r3, [pc, #48]	@ (800d9ec <xTaskIncrementTick+0x100>)
 800d9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d9c0:	601a      	str	r2, [r3, #0]
					break;
 800d9c2:	e7bb      	b.n	800d93c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800d9c4:	4a09      	ldr	r2, [pc, #36]	@ (800d9ec <xTaskIncrementTick+0x100>)
 800d9c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d9c8:	e7b8      	b.n	800d93c <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800d9ca:	4a0d      	ldr	r2, [pc, #52]	@ (800da00 <xTaskIncrementTick+0x114>)
 800d9cc:	6813      	ldr	r3, [r2, #0]
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800d9d2:	2700      	movs	r7, #0
}
 800d9d4:	4638      	mov	r0, r7
 800d9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9d8:	24002f4c 	.word	0x24002f4c
 800d9dc:	24002f70 	.word	0x24002f70
 800d9e0:	24002fbc 	.word	0x24002fbc
 800d9e4:	24002fb8 	.word	0x24002fb8
 800d9e8:	24002f5c 	.word	0x24002f5c
 800d9ec:	24002f54 	.word	0x24002f54
 800d9f0:	24003448 	.word	0x24003448
 800d9f4:	24002fe8 	.word	0x24002fe8
 800d9f8:	24002f60 	.word	0x24002f60
 800d9fc:	24002f6c 	.word	0x24002f6c
 800da00:	24002f64 	.word	0x24002f64

0800da04 <xTaskResumeAll>:
{
 800da04:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800da06:	4b35      	ldr	r3, [pc, #212]	@ (800dadc <xTaskResumeAll+0xd8>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	b943      	cbnz	r3, 800da1e <xTaskResumeAll+0x1a>
 800da0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da10:	f383 8811 	msr	BASEPRI, r3
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	f3bf 8f4f 	dsb	sy
 800da1c:	e7fe      	b.n	800da1c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800da1e:	f000 fd51 	bl	800e4c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800da22:	4b2e      	ldr	r3, [pc, #184]	@ (800dadc <xTaskResumeAll+0xd8>)
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	3a01      	subs	r2, #1
 800da28:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d14f      	bne.n	800dad0 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800da30:	4b2b      	ldr	r3, [pc, #172]	@ (800dae0 <xTaskResumeAll+0xdc>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	b90b      	cbnz	r3, 800da3a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800da36:	2400      	movs	r4, #0
 800da38:	e04b      	b.n	800dad2 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800da3a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da3c:	4b29      	ldr	r3, [pc, #164]	@ (800dae4 <xTaskResumeAll+0xe0>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	b31b      	cbz	r3, 800da8a <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da42:	4b28      	ldr	r3, [pc, #160]	@ (800dae4 <xTaskResumeAll+0xe0>)
 800da44:	68db      	ldr	r3, [r3, #12]
 800da46:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da48:	f104 0018 	add.w	r0, r4, #24
 800da4c:	f7fe ff50 	bl	800c8f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da50:	1d25      	adds	r5, r4, #4
 800da52:	4628      	mov	r0, r5
 800da54:	f7fe ff4c 	bl	800c8f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800da58:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800da5a:	4b23      	ldr	r3, [pc, #140]	@ (800dae8 <xTaskResumeAll+0xe4>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4298      	cmp	r0, r3
 800da60:	d901      	bls.n	800da66 <xTaskResumeAll+0x62>
 800da62:	4b21      	ldr	r3, [pc, #132]	@ (800dae8 <xTaskResumeAll+0xe4>)
 800da64:	6018      	str	r0, [r3, #0]
 800da66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800da6a:	4629      	mov	r1, r5
 800da6c:	4b1f      	ldr	r3, [pc, #124]	@ (800daec <xTaskResumeAll+0xe8>)
 800da6e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800da72:	f7fe ff19 	bl	800c8a8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da76:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800da78:	4b1d      	ldr	r3, [pc, #116]	@ (800daf0 <xTaskResumeAll+0xec>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da7e:	429a      	cmp	r2, r3
 800da80:	d3dc      	bcc.n	800da3c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800da82:	4b1c      	ldr	r3, [pc, #112]	@ (800daf4 <xTaskResumeAll+0xf0>)
 800da84:	2201      	movs	r2, #1
 800da86:	601a      	str	r2, [r3, #0]
 800da88:	e7d8      	b.n	800da3c <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800da8a:	b10c      	cbz	r4, 800da90 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800da8c:	f7ff fcbe 	bl	800d40c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800da90:	4b19      	ldr	r3, [pc, #100]	@ (800daf8 <xTaskResumeAll+0xf4>)
 800da92:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800da94:	b984      	cbnz	r4, 800dab8 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800da96:	4b17      	ldr	r3, [pc, #92]	@ (800daf4 <xTaskResumeAll+0xf0>)
 800da98:	681c      	ldr	r4, [r3, #0]
 800da9a:	b1d4      	cbz	r4, 800dad2 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800da9c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800daa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daa4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800daa8:	f3bf 8f4f 	dsb	sy
 800daac:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800dab0:	2401      	movs	r4, #1
 800dab2:	e00e      	b.n	800dad2 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dab4:	3c01      	subs	r4, #1
 800dab6:	d007      	beq.n	800dac8 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800dab8:	f7ff ff18 	bl	800d8ec <xTaskIncrementTick>
 800dabc:	2800      	cmp	r0, #0
 800dabe:	d0f9      	beq.n	800dab4 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800dac0:	4b0c      	ldr	r3, [pc, #48]	@ (800daf4 <xTaskResumeAll+0xf0>)
 800dac2:	2201      	movs	r2, #1
 800dac4:	601a      	str	r2, [r3, #0]
 800dac6:	e7f5      	b.n	800dab4 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800dac8:	4b0b      	ldr	r3, [pc, #44]	@ (800daf8 <xTaskResumeAll+0xf4>)
 800daca:	2200      	movs	r2, #0
 800dacc:	601a      	str	r2, [r3, #0]
 800dace:	e7e2      	b.n	800da96 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800dad0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800dad2:	f000 fd19 	bl	800e508 <vPortExitCritical>
}
 800dad6:	4620      	mov	r0, r4
 800dad8:	bd38      	pop	{r3, r4, r5, pc}
 800dada:	bf00      	nop
 800dadc:	24002f4c 	.word	0x24002f4c
 800dae0:	24002f74 	.word	0x24002f74
 800dae4:	24002fa4 	.word	0x24002fa4
 800dae8:	24002f6c 	.word	0x24002f6c
 800daec:	24002fe8 	.word	0x24002fe8
 800daf0:	24003448 	.word	0x24003448
 800daf4:	24002f60 	.word	0x24002f60
 800daf8:	24002f64 	.word	0x24002f64

0800dafc <vTaskDelay>:
	{
 800dafc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dafe:	b1a8      	cbz	r0, 800db2c <vTaskDelay+0x30>
 800db00:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800db02:	4b10      	ldr	r3, [pc, #64]	@ (800db44 <vTaskDelay+0x48>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	b143      	cbz	r3, 800db1a <vTaskDelay+0x1e>
 800db08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db0c:	f383 8811 	msr	BASEPRI, r3
 800db10:	f3bf 8f6f 	isb	sy
 800db14:	f3bf 8f4f 	dsb	sy
 800db18:	e7fe      	b.n	800db18 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800db1a:	f7ff fed9 	bl	800d8d0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800db1e:	2100      	movs	r1, #0
 800db20:	4620      	mov	r0, r4
 800db22:	f7ff fdcf 	bl	800d6c4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800db26:	f7ff ff6d 	bl	800da04 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800db2a:	b948      	cbnz	r0, 800db40 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800db2c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800db30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db34:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800db38:	f3bf 8f4f 	dsb	sy
 800db3c:	f3bf 8f6f 	isb	sy
	}
 800db40:	bd10      	pop	{r4, pc}
 800db42:	bf00      	nop
 800db44:	24002f4c 	.word	0x24002f4c

0800db48 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800db48:	4b22      	ldr	r3, [pc, #136]	@ (800dbd4 <vTaskSwitchContext+0x8c>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	b11b      	cbz	r3, 800db56 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800db4e:	4b22      	ldr	r3, [pc, #136]	@ (800dbd8 <vTaskSwitchContext+0x90>)
 800db50:	2201      	movs	r2, #1
 800db52:	601a      	str	r2, [r3, #0]
 800db54:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800db56:	4b20      	ldr	r3, [pc, #128]	@ (800dbd8 <vTaskSwitchContext+0x90>)
 800db58:	2200      	movs	r2, #0
 800db5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db5c:	4b1f      	ldr	r3, [pc, #124]	@ (800dbdc <vTaskSwitchContext+0x94>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800db64:	008a      	lsls	r2, r1, #2
 800db66:	491e      	ldr	r1, [pc, #120]	@ (800dbe0 <vTaskSwitchContext+0x98>)
 800db68:	588a      	ldr	r2, [r1, r2]
 800db6a:	b95a      	cbnz	r2, 800db84 <vTaskSwitchContext+0x3c>
 800db6c:	b10b      	cbz	r3, 800db72 <vTaskSwitchContext+0x2a>
 800db6e:	3b01      	subs	r3, #1
 800db70:	e7f6      	b.n	800db60 <vTaskSwitchContext+0x18>
 800db72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db76:	f383 8811 	msr	BASEPRI, r3
 800db7a:	f3bf 8f6f 	isb	sy
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	e7fe      	b.n	800db82 <vTaskSwitchContext+0x3a>
 800db84:	4608      	mov	r0, r1
 800db86:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800db8a:	008a      	lsls	r2, r1, #2
 800db8c:	4402      	add	r2, r0
 800db8e:	6851      	ldr	r1, [r2, #4]
 800db90:	6849      	ldr	r1, [r1, #4]
 800db92:	6051      	str	r1, [r2, #4]
 800db94:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800db98:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800db9c:	3208      	adds	r2, #8
 800db9e:	4402      	add	r2, r0
 800dba0:	4291      	cmp	r1, r2
 800dba2:	d00f      	beq.n	800dbc4 <vTaskSwitchContext+0x7c>
 800dba4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800dba8:	0091      	lsls	r1, r2, #2
 800dbaa:	4a0d      	ldr	r2, [pc, #52]	@ (800dbe0 <vTaskSwitchContext+0x98>)
 800dbac:	440a      	add	r2, r1
 800dbae:	6852      	ldr	r2, [r2, #4]
 800dbb0:	68d1      	ldr	r1, [r2, #12]
 800dbb2:	4a0c      	ldr	r2, [pc, #48]	@ (800dbe4 <vTaskSwitchContext+0x9c>)
 800dbb4:	6011      	str	r1, [r2, #0]
 800dbb6:	4909      	ldr	r1, [pc, #36]	@ (800dbdc <vTaskSwitchContext+0x94>)
 800dbb8:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dbba:	6813      	ldr	r3, [r2, #0]
 800dbbc:	3354      	adds	r3, #84	@ 0x54
 800dbbe:	4a0a      	ldr	r2, [pc, #40]	@ (800dbe8 <vTaskSwitchContext+0xa0>)
 800dbc0:	6013      	str	r3, [r2, #0]
}
 800dbc2:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbc4:	6848      	ldr	r0, [r1, #4]
 800dbc6:	4662      	mov	r2, ip
 800dbc8:	0091      	lsls	r1, r2, #2
 800dbca:	4a05      	ldr	r2, [pc, #20]	@ (800dbe0 <vTaskSwitchContext+0x98>)
 800dbcc:	440a      	add	r2, r1
 800dbce:	6050      	str	r0, [r2, #4]
 800dbd0:	e7e8      	b.n	800dba4 <vTaskSwitchContext+0x5c>
 800dbd2:	bf00      	nop
 800dbd4:	24002f4c 	.word	0x24002f4c
 800dbd8:	24002f60 	.word	0x24002f60
 800dbdc:	24002f6c 	.word	0x24002f6c
 800dbe0:	24002fe8 	.word	0x24002fe8
 800dbe4:	24003448 	.word	0x24003448
 800dbe8:	24000028 	.word	0x24000028

0800dbec <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800dbec:	b158      	cbz	r0, 800dc06 <vTaskPlaceOnEventList+0x1a>
{
 800dbee:	b510      	push	{r4, lr}
 800dbf0:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dbf2:	4a09      	ldr	r2, [pc, #36]	@ (800dc18 <vTaskPlaceOnEventList+0x2c>)
 800dbf4:	6811      	ldr	r1, [r2, #0]
 800dbf6:	3118      	adds	r1, #24
 800dbf8:	f7fe fe61 	bl	800c8be <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dbfc:	2101      	movs	r1, #1
 800dbfe:	4620      	mov	r0, r4
 800dc00:	f7ff fd60 	bl	800d6c4 <prvAddCurrentTaskToDelayedList>
}
 800dc04:	bd10      	pop	{r4, pc}
 800dc06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc0a:	f383 8811 	msr	BASEPRI, r3
 800dc0e:	f3bf 8f6f 	isb	sy
 800dc12:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800dc16:	e7fe      	b.n	800dc16 <vTaskPlaceOnEventList+0x2a>
 800dc18:	24003448 	.word	0x24003448

0800dc1c <vTaskPlaceOnEventListRestricted>:
	{
 800dc1c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800dc1e:	b170      	cbz	r0, 800dc3e <vTaskPlaceOnEventListRestricted+0x22>
 800dc20:	460d      	mov	r5, r1
 800dc22:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc24:	4a0a      	ldr	r2, [pc, #40]	@ (800dc50 <vTaskPlaceOnEventListRestricted+0x34>)
 800dc26:	6811      	ldr	r1, [r2, #0]
 800dc28:	3118      	adds	r1, #24
 800dc2a:	f7fe fe3d 	bl	800c8a8 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800dc2e:	b10c      	cbz	r4, 800dc34 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800dc30:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dc34:	4621      	mov	r1, r4
 800dc36:	4628      	mov	r0, r5
 800dc38:	f7ff fd44 	bl	800d6c4 <prvAddCurrentTaskToDelayedList>
	}
 800dc3c:	bd38      	pop	{r3, r4, r5, pc}
 800dc3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc42:	f383 8811 	msr	BASEPRI, r3
 800dc46:	f3bf 8f6f 	isb	sy
 800dc4a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800dc4e:	e7fe      	b.n	800dc4e <vTaskPlaceOnEventListRestricted+0x32>
 800dc50:	24003448 	.word	0x24003448

0800dc54 <xTaskRemoveFromEventList>:
{
 800dc54:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc56:	68c3      	ldr	r3, [r0, #12]
 800dc58:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800dc5a:	b324      	cbz	r4, 800dca6 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dc5c:	f104 0518 	add.w	r5, r4, #24
 800dc60:	4628      	mov	r0, r5
 800dc62:	f7fe fe45 	bl	800c8f0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc66:	4b18      	ldr	r3, [pc, #96]	@ (800dcc8 <xTaskRemoveFromEventList+0x74>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	bb2b      	cbnz	r3, 800dcb8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dc6c:	1d25      	adds	r5, r4, #4
 800dc6e:	4628      	mov	r0, r5
 800dc70:	f7fe fe3e 	bl	800c8f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dc74:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800dc76:	4b15      	ldr	r3, [pc, #84]	@ (800dccc <xTaskRemoveFromEventList+0x78>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4298      	cmp	r0, r3
 800dc7c:	d901      	bls.n	800dc82 <xTaskRemoveFromEventList+0x2e>
 800dc7e:	4b13      	ldr	r3, [pc, #76]	@ (800dccc <xTaskRemoveFromEventList+0x78>)
 800dc80:	6018      	str	r0, [r3, #0]
 800dc82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dc86:	4629      	mov	r1, r5
 800dc88:	4b11      	ldr	r3, [pc, #68]	@ (800dcd0 <xTaskRemoveFromEventList+0x7c>)
 800dc8a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dc8e:	f7fe fe0b 	bl	800c8a8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dc92:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800dc94:	4b0f      	ldr	r3, [pc, #60]	@ (800dcd4 <xTaskRemoveFromEventList+0x80>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d911      	bls.n	800dcc2 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800dc9e:	2001      	movs	r0, #1
 800dca0:	4b0d      	ldr	r3, [pc, #52]	@ (800dcd8 <xTaskRemoveFromEventList+0x84>)
 800dca2:	6018      	str	r0, [r3, #0]
}
 800dca4:	bd38      	pop	{r3, r4, r5, pc}
 800dca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcaa:	f383 8811 	msr	BASEPRI, r3
 800dcae:	f3bf 8f6f 	isb	sy
 800dcb2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800dcb6:	e7fe      	b.n	800dcb6 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dcb8:	4629      	mov	r1, r5
 800dcba:	4808      	ldr	r0, [pc, #32]	@ (800dcdc <xTaskRemoveFromEventList+0x88>)
 800dcbc:	f7fe fdf4 	bl	800c8a8 <vListInsertEnd>
 800dcc0:	e7e7      	b.n	800dc92 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800dcc2:	2000      	movs	r0, #0
	return xReturn;
 800dcc4:	e7ee      	b.n	800dca4 <xTaskRemoveFromEventList+0x50>
 800dcc6:	bf00      	nop
 800dcc8:	24002f4c 	.word	0x24002f4c
 800dccc:	24002f6c 	.word	0x24002f6c
 800dcd0:	24002fe8 	.word	0x24002fe8
 800dcd4:	24003448 	.word	0x24003448
 800dcd8:	24002f60 	.word	0x24002f60
 800dcdc:	24002fa4 	.word	0x24002fa4

0800dce0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dce0:	4b03      	ldr	r3, [pc, #12]	@ (800dcf0 <vTaskInternalSetTimeOutState+0x10>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dce6:	4b03      	ldr	r3, [pc, #12]	@ (800dcf4 <vTaskInternalSetTimeOutState+0x14>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	6043      	str	r3, [r0, #4]
}
 800dcec:	4770      	bx	lr
 800dcee:	bf00      	nop
 800dcf0:	24002f5c 	.word	0x24002f5c
 800dcf4:	24002f70 	.word	0x24002f70

0800dcf8 <xTaskCheckForTimeOut>:
{
 800dcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800dcfa:	b1c8      	cbz	r0, 800dd30 <xTaskCheckForTimeOut+0x38>
 800dcfc:	460c      	mov	r4, r1
 800dcfe:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800dd00:	b1f9      	cbz	r1, 800dd42 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800dd02:	f000 fbdf 	bl	800e4c4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800dd06:	4b1b      	ldr	r3, [pc, #108]	@ (800dd74 <xTaskCheckForTimeOut+0x7c>)
 800dd08:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dd0a:	686b      	ldr	r3, [r5, #4]
 800dd0c:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800dd0e:	6822      	ldr	r2, [r4, #0]
 800dd10:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dd14:	d026      	beq.n	800dd64 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dd16:	4e18      	ldr	r6, [pc, #96]	@ (800dd78 <xTaskCheckForTimeOut+0x80>)
 800dd18:	6836      	ldr	r6, [r6, #0]
 800dd1a:	682f      	ldr	r7, [r5, #0]
 800dd1c:	42b7      	cmp	r7, r6
 800dd1e:	d001      	beq.n	800dd24 <xTaskCheckForTimeOut+0x2c>
 800dd20:	428b      	cmp	r3, r1
 800dd22:	d924      	bls.n	800dd6e <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dd24:	4282      	cmp	r2, r0
 800dd26:	d815      	bhi.n	800dd54 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800dd2c:	2401      	movs	r4, #1
 800dd2e:	e01a      	b.n	800dd66 <xTaskCheckForTimeOut+0x6e>
 800dd30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd34:	f383 8811 	msr	BASEPRI, r3
 800dd38:	f3bf 8f6f 	isb	sy
 800dd3c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800dd40:	e7fe      	b.n	800dd40 <xTaskCheckForTimeOut+0x48>
 800dd42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd46:	f383 8811 	msr	BASEPRI, r3
 800dd4a:	f3bf 8f6f 	isb	sy
 800dd4e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800dd52:	e7fe      	b.n	800dd52 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800dd54:	1a5b      	subs	r3, r3, r1
 800dd56:	4413      	add	r3, r2
 800dd58:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dd5a:	4628      	mov	r0, r5
 800dd5c:	f7ff ffc0 	bl	800dce0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dd60:	2400      	movs	r4, #0
 800dd62:	e000      	b.n	800dd66 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800dd64:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800dd66:	f000 fbcf 	bl	800e508 <vPortExitCritical>
}
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800dd6e:	2401      	movs	r4, #1
 800dd70:	e7f9      	b.n	800dd66 <xTaskCheckForTimeOut+0x6e>
 800dd72:	bf00      	nop
 800dd74:	24002f70 	.word	0x24002f70
 800dd78:	24002f5c 	.word	0x24002f5c

0800dd7c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800dd7c:	4b01      	ldr	r3, [pc, #4]	@ (800dd84 <vTaskMissedYield+0x8>)
 800dd7e:	2201      	movs	r2, #1
 800dd80:	601a      	str	r2, [r3, #0]
}
 800dd82:	4770      	bx	lr
 800dd84:	24002f60 	.word	0x24002f60

0800dd88 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800dd88:	4b05      	ldr	r3, [pc, #20]	@ (800dda0 <xTaskGetSchedulerState+0x18>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	b133      	cbz	r3, 800dd9c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd8e:	4b05      	ldr	r3, [pc, #20]	@ (800dda4 <xTaskGetSchedulerState+0x1c>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	b10b      	cbz	r3, 800dd98 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800dd94:	2000      	movs	r0, #0
	}
 800dd96:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800dd98:	2002      	movs	r0, #2
 800dd9a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dd9c:	2001      	movs	r0, #1
 800dd9e:	4770      	bx	lr
 800dda0:	24002f68 	.word	0x24002f68
 800dda4:	24002f4c 	.word	0x24002f4c

0800dda8 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800dda8:	2800      	cmp	r0, #0
 800ddaa:	d03e      	beq.n	800de2a <xTaskPriorityInherit+0x82>
	{
 800ddac:	b538      	push	{r3, r4, r5, lr}
 800ddae:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ddb0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800ddb2:	4a20      	ldr	r2, [pc, #128]	@ (800de34 <xTaskPriorityInherit+0x8c>)
 800ddb4:	6812      	ldr	r2, [r2, #0]
 800ddb6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d22e      	bcs.n	800de1a <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ddbc:	6982      	ldr	r2, [r0, #24]
 800ddbe:	2a00      	cmp	r2, #0
 800ddc0:	db05      	blt.n	800ddce <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddc2:	4a1c      	ldr	r2, [pc, #112]	@ (800de34 <xTaskPriorityInherit+0x8c>)
 800ddc4:	6812      	ldr	r2, [r2, #0]
 800ddc6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ddc8:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800ddcc:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ddce:	6961      	ldr	r1, [r4, #20]
 800ddd0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ddd4:	4a18      	ldr	r2, [pc, #96]	@ (800de38 <xTaskPriorityInherit+0x90>)
 800ddd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ddda:	4299      	cmp	r1, r3
 800dddc:	d005      	beq.n	800ddea <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ddde:	4b15      	ldr	r3, [pc, #84]	@ (800de34 <xTaskPriorityInherit+0x8c>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dde4:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 800dde6:	2001      	movs	r0, #1
	}
 800dde8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddea:	1d25      	adds	r5, r4, #4
 800ddec:	4628      	mov	r0, r5
 800ddee:	f7fe fd7f 	bl	800c8f0 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ddf2:	4b10      	ldr	r3, [pc, #64]	@ (800de34 <xTaskPriorityInherit+0x8c>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800ddf8:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ddfa:	4b10      	ldr	r3, [pc, #64]	@ (800de3c <xTaskPriorityInherit+0x94>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	4298      	cmp	r0, r3
 800de00:	d901      	bls.n	800de06 <xTaskPriorityInherit+0x5e>
 800de02:	4b0e      	ldr	r3, [pc, #56]	@ (800de3c <xTaskPriorityInherit+0x94>)
 800de04:	6018      	str	r0, [r3, #0]
 800de06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800de0a:	4629      	mov	r1, r5
 800de0c:	4b0a      	ldr	r3, [pc, #40]	@ (800de38 <xTaskPriorityInherit+0x90>)
 800de0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800de12:	f7fe fd49 	bl	800c8a8 <vListInsertEnd>
				xReturn = pdTRUE;
 800de16:	2001      	movs	r0, #1
 800de18:	e7e6      	b.n	800dde8 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800de1a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800de1c:	4b05      	ldr	r3, [pc, #20]	@ (800de34 <xTaskPriorityInherit+0x8c>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de22:	429a      	cmp	r2, r3
 800de24:	d303      	bcc.n	800de2e <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 800de26:	2000      	movs	r0, #0
 800de28:	e7de      	b.n	800dde8 <xTaskPriorityInherit+0x40>
 800de2a:	2000      	movs	r0, #0
	}
 800de2c:	4770      	bx	lr
					xReturn = pdTRUE;
 800de2e:	2001      	movs	r0, #1
		return xReturn;
 800de30:	e7da      	b.n	800dde8 <xTaskPriorityInherit+0x40>
 800de32:	bf00      	nop
 800de34:	24003448 	.word	0x24003448
 800de38:	24002fe8 	.word	0x24002fe8
 800de3c:	24002f6c 	.word	0x24002f6c

0800de40 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800de40:	2800      	cmp	r0, #0
 800de42:	d03b      	beq.n	800debc <xTaskPriorityDisinherit+0x7c>
	{
 800de44:	b538      	push	{r3, r4, r5, lr}
 800de46:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800de48:	4b1e      	ldr	r3, [pc, #120]	@ (800dec4 <xTaskPriorityDisinherit+0x84>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4283      	cmp	r3, r0
 800de4e:	d008      	beq.n	800de62 <xTaskPriorityDisinherit+0x22>
 800de50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de54:	f383 8811 	msr	BASEPRI, r3
 800de58:	f3bf 8f6f 	isb	sy
 800de5c:	f3bf 8f4f 	dsb	sy
 800de60:	e7fe      	b.n	800de60 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800de62:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800de64:	b943      	cbnz	r3, 800de78 <xTaskPriorityDisinherit+0x38>
 800de66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de6a:	f383 8811 	msr	BASEPRI, r3
 800de6e:	f3bf 8f6f 	isb	sy
 800de72:	f3bf 8f4f 	dsb	sy
 800de76:	e7fe      	b.n	800de76 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800de78:	3b01      	subs	r3, #1
 800de7a:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800de7c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800de7e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800de80:	4291      	cmp	r1, r2
 800de82:	d01d      	beq.n	800dec0 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800de84:	b10b      	cbz	r3, 800de8a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800de86:	2000      	movs	r0, #0
	}
 800de88:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de8a:	1d05      	adds	r5, r0, #4
 800de8c:	4628      	mov	r0, r5
 800de8e:	f7fe fd2f 	bl	800c8f0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800de92:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800de94:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de96:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 800de9a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800de9c:	4b0a      	ldr	r3, [pc, #40]	@ (800dec8 <xTaskPriorityDisinherit+0x88>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	4298      	cmp	r0, r3
 800dea2:	d901      	bls.n	800dea8 <xTaskPriorityDisinherit+0x68>
 800dea4:	4b08      	ldr	r3, [pc, #32]	@ (800dec8 <xTaskPriorityDisinherit+0x88>)
 800dea6:	6018      	str	r0, [r3, #0]
 800dea8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800deac:	4629      	mov	r1, r5
 800deae:	4b07      	ldr	r3, [pc, #28]	@ (800decc <xTaskPriorityDisinherit+0x8c>)
 800deb0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800deb4:	f7fe fcf8 	bl	800c8a8 <vListInsertEnd>
					xReturn = pdTRUE;
 800deb8:	2001      	movs	r0, #1
 800deba:	e7e5      	b.n	800de88 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800debc:	2000      	movs	r0, #0
	}
 800debe:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800dec0:	2000      	movs	r0, #0
 800dec2:	e7e1      	b.n	800de88 <xTaskPriorityDisinherit+0x48>
 800dec4:	24003448 	.word	0x24003448
 800dec8:	24002f6c 	.word	0x24002f6c
 800decc:	24002fe8 	.word	0x24002fe8

0800ded0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800ded0:	2800      	cmp	r0, #0
 800ded2:	d046      	beq.n	800df62 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800ded4:	b538      	push	{r3, r4, r5, lr}
 800ded6:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800ded8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800deda:	b943      	cbnz	r3, 800deee <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800dedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dee0:	f383 8811 	msr	BASEPRI, r3
 800dee4:	f3bf 8f6f 	isb	sy
 800dee8:	f3bf 8f4f 	dsb	sy
 800deec:	e7fe      	b.n	800deec <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800deee:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800def0:	428a      	cmp	r2, r1
 800def2:	d200      	bcs.n	800def6 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800def4:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800def6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800def8:	4291      	cmp	r1, r2
 800defa:	d001      	beq.n	800df00 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800defc:	2b01      	cmp	r3, #1
 800defe:	d000      	beq.n	800df02 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800df00:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800df02:	4b18      	ldr	r3, [pc, #96]	@ (800df64 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	42a3      	cmp	r3, r4
 800df08:	d022      	beq.n	800df50 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800df0a:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800df0c:	69a3      	ldr	r3, [r4, #24]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	db02      	blt.n	800df18 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df12:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800df16:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800df18:	6962      	ldr	r2, [r4, #20]
 800df1a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800df1e:	4b12      	ldr	r3, [pc, #72]	@ (800df68 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800df20:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800df24:	429a      	cmp	r2, r3
 800df26:	d1eb      	bne.n	800df00 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df28:	1d25      	adds	r5, r4, #4
 800df2a:	4628      	mov	r0, r5
 800df2c:	f7fe fce0 	bl	800c8f0 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800df30:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800df32:	4b0e      	ldr	r3, [pc, #56]	@ (800df6c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	4298      	cmp	r0, r3
 800df38:	d901      	bls.n	800df3e <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800df3a:	4b0c      	ldr	r3, [pc, #48]	@ (800df6c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800df3c:	6018      	str	r0, [r3, #0]
 800df3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800df42:	4629      	mov	r1, r5
 800df44:	4b08      	ldr	r3, [pc, #32]	@ (800df68 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800df46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800df4a:	f7fe fcad 	bl	800c8a8 <vListInsertEnd>
	}
 800df4e:	e7d7      	b.n	800df00 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800df50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df54:	f383 8811 	msr	BASEPRI, r3
 800df58:	f3bf 8f6f 	isb	sy
 800df5c:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800df60:	e7fe      	b.n	800df60 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800df62:	4770      	bx	lr
 800df64:	24003448 	.word	0x24003448
 800df68:	24002fe8 	.word	0x24002fe8
 800df6c:	24002f6c 	.word	0x24002f6c

0800df70 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800df70:	4b05      	ldr	r3, [pc, #20]	@ (800df88 <pvTaskIncrementMutexHeldCount+0x18>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	b123      	cbz	r3, 800df80 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800df76:	4b04      	ldr	r3, [pc, #16]	@ (800df88 <pvTaskIncrementMutexHeldCount+0x18>)
 800df78:	681a      	ldr	r2, [r3, #0]
 800df7a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800df7c:	3301      	adds	r3, #1
 800df7e:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 800df80:	4b01      	ldr	r3, [pc, #4]	@ (800df88 <pvTaskIncrementMutexHeldCount+0x18>)
 800df82:	6818      	ldr	r0, [r3, #0]
	}
 800df84:	4770      	bx	lr
 800df86:	bf00      	nop
 800df88:	24003448 	.word	0x24003448

0800df8c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800df8c:	4b06      	ldr	r3, [pc, #24]	@ (800dfa8 <prvGetNextExpireTime+0x1c>)
 800df8e:	681a      	ldr	r2, [r3, #0]
 800df90:	6813      	ldr	r3, [r2, #0]
 800df92:	b92b      	cbnz	r3, 800dfa0 <prvGetNextExpireTime+0x14>
 800df94:	2301      	movs	r3, #1
 800df96:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800df98:	b923      	cbnz	r3, 800dfa4 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df9a:	68d3      	ldr	r3, [r2, #12]
 800df9c:	6818      	ldr	r0, [r3, #0]
 800df9e:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	e7f8      	b.n	800df96 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dfa4:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800dfa6:	4770      	bx	lr
 800dfa8:	2400354c 	.word	0x2400354c

0800dfac <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dfac:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dfae:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dfb0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dfb2:	4291      	cmp	r1, r2
 800dfb4:	d80c      	bhi.n	800dfd0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfb6:	1ad2      	subs	r2, r2, r3
 800dfb8:	6983      	ldr	r3, [r0, #24]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d301      	bcc.n	800dfc2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dfbe:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800dfc0:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dfc2:	1d01      	adds	r1, r0, #4
 800dfc4:	4b0b      	ldr	r3, [pc, #44]	@ (800dff4 <prvInsertTimerInActiveList+0x48>)
 800dfc6:	6818      	ldr	r0, [r3, #0]
 800dfc8:	f7fe fc79 	bl	800c8be <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800dfcc:	2000      	movs	r0, #0
 800dfce:	e7f7      	b.n	800dfc0 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	bf2c      	ite	cs
 800dfd4:	2200      	movcs	r2, #0
 800dfd6:	2201      	movcc	r2, #1
 800dfd8:	4299      	cmp	r1, r3
 800dfda:	bf38      	it	cc
 800dfdc:	2200      	movcc	r2, #0
 800dfde:	b10a      	cbz	r2, 800dfe4 <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 800dfe0:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800dfe2:	e7ed      	b.n	800dfc0 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dfe4:	1d01      	adds	r1, r0, #4
 800dfe6:	4b04      	ldr	r3, [pc, #16]	@ (800dff8 <prvInsertTimerInActiveList+0x4c>)
 800dfe8:	6818      	ldr	r0, [r3, #0]
 800dfea:	f7fe fc68 	bl	800c8be <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800dfee:	2000      	movs	r0, #0
 800dff0:	e7e6      	b.n	800dfc0 <prvInsertTimerInActiveList+0x14>
 800dff2:	bf00      	nop
 800dff4:	24003548 	.word	0x24003548
 800dff8:	2400354c 	.word	0x2400354c

0800dffc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dffc:	b530      	push	{r4, r5, lr}
 800dffe:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e000:	f000 fa60 	bl	800e4c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e004:	4b11      	ldr	r3, [pc, #68]	@ (800e04c <prvCheckForValidListAndQueue+0x50>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	b11b      	cbz	r3, 800e012 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e00a:	f000 fa7d 	bl	800e508 <vPortExitCritical>
}
 800e00e:	b003      	add	sp, #12
 800e010:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800e012:	4d0f      	ldr	r5, [pc, #60]	@ (800e050 <prvCheckForValidListAndQueue+0x54>)
 800e014:	4628      	mov	r0, r5
 800e016:	f7fe fc39 	bl	800c88c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e01a:	4c0e      	ldr	r4, [pc, #56]	@ (800e054 <prvCheckForValidListAndQueue+0x58>)
 800e01c:	4620      	mov	r0, r4
 800e01e:	f7fe fc35 	bl	800c88c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e022:	4b0d      	ldr	r3, [pc, #52]	@ (800e058 <prvCheckForValidListAndQueue+0x5c>)
 800e024:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e026:	4b0d      	ldr	r3, [pc, #52]	@ (800e05c <prvCheckForValidListAndQueue+0x60>)
 800e028:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e02a:	2300      	movs	r3, #0
 800e02c:	9300      	str	r3, [sp, #0]
 800e02e:	4b0c      	ldr	r3, [pc, #48]	@ (800e060 <prvCheckForValidListAndQueue+0x64>)
 800e030:	4a0c      	ldr	r2, [pc, #48]	@ (800e064 <prvCheckForValidListAndQueue+0x68>)
 800e032:	2110      	movs	r1, #16
 800e034:	200a      	movs	r0, #10
 800e036:	f7fe fd69 	bl	800cb0c <xQueueGenericCreateStatic>
 800e03a:	4b04      	ldr	r3, [pc, #16]	@ (800e04c <prvCheckForValidListAndQueue+0x50>)
 800e03c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800e03e:	2800      	cmp	r0, #0
 800e040:	d0e3      	beq.n	800e00a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e042:	4909      	ldr	r1, [pc, #36]	@ (800e068 <prvCheckForValidListAndQueue+0x6c>)
 800e044:	f7ff f978 	bl	800d338 <vQueueAddToRegistry>
 800e048:	e7df      	b.n	800e00a <prvCheckForValidListAndQueue+0xe>
 800e04a:	bf00      	nop
 800e04c:	24003544 	.word	0x24003544
 800e050:	24003564 	.word	0x24003564
 800e054:	24003550 	.word	0x24003550
 800e058:	2400354c 	.word	0x2400354c
 800e05c:	24003548 	.word	0x24003548
 800e060:	2400344c 	.word	0x2400344c
 800e064:	2400349c 	.word	0x2400349c
 800e068:	0801c828 	.word	0x0801c828

0800e06c <xTimerCreateTimerTask>:
{
 800e06c:	b510      	push	{r4, lr}
 800e06e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800e070:	f7ff ffc4 	bl	800dffc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800e074:	4b12      	ldr	r3, [pc, #72]	@ (800e0c0 <xTimerCreateTimerTask+0x54>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	b1cb      	cbz	r3, 800e0ae <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e07a:	2400      	movs	r4, #0
 800e07c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e07e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e080:	aa07      	add	r2, sp, #28
 800e082:	a906      	add	r1, sp, #24
 800e084:	a805      	add	r0, sp, #20
 800e086:	f7fe fbf5 	bl	800c874 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e08a:	9b05      	ldr	r3, [sp, #20]
 800e08c:	9302      	str	r3, [sp, #8]
 800e08e:	9b06      	ldr	r3, [sp, #24]
 800e090:	9301      	str	r3, [sp, #4]
 800e092:	2302      	movs	r3, #2
 800e094:	9300      	str	r3, [sp, #0]
 800e096:	4623      	mov	r3, r4
 800e098:	9a07      	ldr	r2, [sp, #28]
 800e09a:	490a      	ldr	r1, [pc, #40]	@ (800e0c4 <xTimerCreateTimerTask+0x58>)
 800e09c:	480a      	ldr	r0, [pc, #40]	@ (800e0c8 <xTimerCreateTimerTask+0x5c>)
 800e09e:	f7ff fb53 	bl	800d748 <xTaskCreateStatic>
 800e0a2:	4b0a      	ldr	r3, [pc, #40]	@ (800e0cc <xTimerCreateTimerTask+0x60>)
 800e0a4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800e0a6:	b110      	cbz	r0, 800e0ae <xTimerCreateTimerTask+0x42>
}
 800e0a8:	2001      	movs	r0, #1
 800e0aa:	b008      	add	sp, #32
 800e0ac:	bd10      	pop	{r4, pc}
 800e0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0b2:	f383 8811 	msr	BASEPRI, r3
 800e0b6:	f3bf 8f6f 	isb	sy
 800e0ba:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800e0be:	e7fe      	b.n	800e0be <xTimerCreateTimerTask+0x52>
 800e0c0:	24003544 	.word	0x24003544
 800e0c4:	0801c830 	.word	0x0801c830
 800e0c8:	0800e3d5 	.word	0x0800e3d5
 800e0cc:	24003540 	.word	0x24003540

0800e0d0 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800e0d0:	b1b8      	cbz	r0, 800e102 <xTimerGenericCommand+0x32>
 800e0d2:	469c      	mov	ip, r3
 800e0d4:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800e0d6:	4818      	ldr	r0, [pc, #96]	@ (800e138 <xTimerGenericCommand+0x68>)
 800e0d8:	6800      	ldr	r0, [r0, #0]
 800e0da:	b358      	cbz	r0, 800e134 <xTimerGenericCommand+0x64>
{
 800e0dc:	b500      	push	{lr}
 800e0de:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800e0e0:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e0e2:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e0e4:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e0e6:	2905      	cmp	r1, #5
 800e0e8:	dc1c      	bgt.n	800e124 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e0ea:	f7ff fe4d 	bl	800dd88 <xTaskGetSchedulerState>
 800e0ee:	2802      	cmp	r0, #2
 800e0f0:	d010      	beq.n	800e114 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	4669      	mov	r1, sp
 800e0f8:	480f      	ldr	r0, [pc, #60]	@ (800e138 <xTimerGenericCommand+0x68>)
 800e0fa:	6800      	ldr	r0, [r0, #0]
 800e0fc:	f7fe fdbe 	bl	800cc7c <xQueueGenericSend>
 800e100:	e015      	b.n	800e12e <xTimerGenericCommand+0x5e>
 800e102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e106:	f383 8811 	msr	BASEPRI, r3
 800e10a:	f3bf 8f6f 	isb	sy
 800e10e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800e112:	e7fe      	b.n	800e112 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e114:	2300      	movs	r3, #0
 800e116:	9a06      	ldr	r2, [sp, #24]
 800e118:	4669      	mov	r1, sp
 800e11a:	4807      	ldr	r0, [pc, #28]	@ (800e138 <xTimerGenericCommand+0x68>)
 800e11c:	6800      	ldr	r0, [r0, #0]
 800e11e:	f7fe fdad 	bl	800cc7c <xQueueGenericSend>
 800e122:	e004      	b.n	800e12e <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e124:	2300      	movs	r3, #0
 800e126:	4662      	mov	r2, ip
 800e128:	4669      	mov	r1, sp
 800e12a:	f7fe fe6b 	bl	800ce04 <xQueueGenericSendFromISR>
}
 800e12e:	b005      	add	sp, #20
 800e130:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800e134:	2000      	movs	r0, #0
}
 800e136:	4770      	bx	lr
 800e138:	24003544 	.word	0x24003544

0800e13c <prvSwitchTimerLists>:
{
 800e13c:	b570      	push	{r4, r5, r6, lr}
 800e13e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e140:	4b1b      	ldr	r3, [pc, #108]	@ (800e1b0 <prvSwitchTimerLists+0x74>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	681a      	ldr	r2, [r3, #0]
 800e146:	b362      	cbz	r2, 800e1a2 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e148:	68db      	ldr	r3, [r3, #12]
 800e14a:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e14c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e14e:	1d25      	adds	r5, r4, #4
 800e150:	4628      	mov	r0, r5
 800e152:	f7fe fbcd 	bl	800c8f0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e156:	6a23      	ldr	r3, [r4, #32]
 800e158:	4620      	mov	r0, r4
 800e15a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e15c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e160:	f013 0f04 	tst.w	r3, #4
 800e164:	d0ec      	beq.n	800e140 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e166:	69a3      	ldr	r3, [r4, #24]
 800e168:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800e16a:	429e      	cmp	r6, r3
 800e16c:	d207      	bcs.n	800e17e <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e16e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e170:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e172:	4629      	mov	r1, r5
 800e174:	4b0e      	ldr	r3, [pc, #56]	@ (800e1b0 <prvSwitchTimerLists+0x74>)
 800e176:	6818      	ldr	r0, [r3, #0]
 800e178:	f7fe fba1 	bl	800c8be <vListInsert>
 800e17c:	e7e0      	b.n	800e140 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e17e:	2100      	movs	r1, #0
 800e180:	9100      	str	r1, [sp, #0]
 800e182:	460b      	mov	r3, r1
 800e184:	4632      	mov	r2, r6
 800e186:	4620      	mov	r0, r4
 800e188:	f7ff ffa2 	bl	800e0d0 <xTimerGenericCommand>
				configASSERT( xResult );
 800e18c:	2800      	cmp	r0, #0
 800e18e:	d1d7      	bne.n	800e140 <prvSwitchTimerLists+0x4>
 800e190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e194:	f383 8811 	msr	BASEPRI, r3
 800e198:	f3bf 8f6f 	isb	sy
 800e19c:	f3bf 8f4f 	dsb	sy
 800e1a0:	e7fe      	b.n	800e1a0 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800e1a2:	4a04      	ldr	r2, [pc, #16]	@ (800e1b4 <prvSwitchTimerLists+0x78>)
 800e1a4:	6810      	ldr	r0, [r2, #0]
 800e1a6:	4902      	ldr	r1, [pc, #8]	@ (800e1b0 <prvSwitchTimerLists+0x74>)
 800e1a8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800e1aa:	6013      	str	r3, [r2, #0]
}
 800e1ac:	b002      	add	sp, #8
 800e1ae:	bd70      	pop	{r4, r5, r6, pc}
 800e1b0:	2400354c 	.word	0x2400354c
 800e1b4:	24003548 	.word	0x24003548

0800e1b8 <prvSampleTimeNow>:
{
 800e1b8:	b538      	push	{r3, r4, r5, lr}
 800e1ba:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800e1bc:	f7ff fb90 	bl	800d8e0 <xTaskGetTickCount>
 800e1c0:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800e1c2:	4b07      	ldr	r3, [pc, #28]	@ (800e1e0 <prvSampleTimeNow+0x28>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4283      	cmp	r3, r0
 800e1c8:	d805      	bhi.n	800e1d6 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800e1ce:	4b04      	ldr	r3, [pc, #16]	@ (800e1e0 <prvSampleTimeNow+0x28>)
 800e1d0:	601c      	str	r4, [r3, #0]
}
 800e1d2:	4620      	mov	r0, r4
 800e1d4:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800e1d6:	f7ff ffb1 	bl	800e13c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e1da:	2301      	movs	r3, #1
 800e1dc:	602b      	str	r3, [r5, #0]
 800e1de:	e7f6      	b.n	800e1ce <prvSampleTimeNow+0x16>
 800e1e0:	2400353c 	.word	0x2400353c

0800e1e4 <prvProcessExpiredTimer>:
{
 800e1e4:	b570      	push	{r4, r5, r6, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	4606      	mov	r6, r0
 800e1ea:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1ec:	4917      	ldr	r1, [pc, #92]	@ (800e24c <prvProcessExpiredTimer+0x68>)
 800e1ee:	6809      	ldr	r1, [r1, #0]
 800e1f0:	68c9      	ldr	r1, [r1, #12]
 800e1f2:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e1f4:	1d20      	adds	r0, r4, #4
 800e1f6:	f7fe fb7b 	bl	800c8f0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e1fa:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 800e1fe:	f01c 0f04 	tst.w	ip, #4
 800e202:	d108      	bne.n	800e216 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e204:	f02c 0c01 	bic.w	ip, ip, #1
 800e208:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e20c:	6a23      	ldr	r3, [r4, #32]
 800e20e:	4620      	mov	r0, r4
 800e210:	4798      	blx	r3
}
 800e212:	b002      	add	sp, #8
 800e214:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e216:	69a1      	ldr	r1, [r4, #24]
 800e218:	4633      	mov	r3, r6
 800e21a:	462a      	mov	r2, r5
 800e21c:	4431      	add	r1, r6
 800e21e:	4620      	mov	r0, r4
 800e220:	f7ff fec4 	bl	800dfac <prvInsertTimerInActiveList>
 800e224:	2800      	cmp	r0, #0
 800e226:	d0f1      	beq.n	800e20c <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e228:	2100      	movs	r1, #0
 800e22a:	9100      	str	r1, [sp, #0]
 800e22c:	460b      	mov	r3, r1
 800e22e:	4632      	mov	r2, r6
 800e230:	4620      	mov	r0, r4
 800e232:	f7ff ff4d 	bl	800e0d0 <xTimerGenericCommand>
			configASSERT( xResult );
 800e236:	2800      	cmp	r0, #0
 800e238:	d1e8      	bne.n	800e20c <prvProcessExpiredTimer+0x28>
 800e23a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e23e:	f383 8811 	msr	BASEPRI, r3
 800e242:	f3bf 8f6f 	isb	sy
 800e246:	f3bf 8f4f 	dsb	sy
 800e24a:	e7fe      	b.n	800e24a <prvProcessExpiredTimer+0x66>
 800e24c:	2400354c 	.word	0x2400354c

0800e250 <prvProcessTimerOrBlockTask>:
{
 800e250:	b570      	push	{r4, r5, r6, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	4606      	mov	r6, r0
 800e256:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800e258:	f7ff fb3a 	bl	800d8d0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e25c:	a801      	add	r0, sp, #4
 800e25e:	f7ff ffab 	bl	800e1b8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800e262:	9b01      	ldr	r3, [sp, #4]
 800e264:	bb3b      	cbnz	r3, 800e2b6 <prvProcessTimerOrBlockTask+0x66>
 800e266:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e268:	42b0      	cmp	r0, r6
 800e26a:	bf28      	it	cs
 800e26c:	2c00      	cmpcs	r4, #0
 800e26e:	d019      	beq.n	800e2a4 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 800e270:	b124      	cbz	r4, 800e27c <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e272:	4a13      	ldr	r2, [pc, #76]	@ (800e2c0 <prvProcessTimerOrBlockTask+0x70>)
 800e274:	6812      	ldr	r2, [r2, #0]
 800e276:	6812      	ldr	r2, [r2, #0]
 800e278:	b9da      	cbnz	r2, 800e2b2 <prvProcessTimerOrBlockTask+0x62>
 800e27a:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e27c:	4622      	mov	r2, r4
 800e27e:	1b71      	subs	r1, r6, r5
 800e280:	4b10      	ldr	r3, [pc, #64]	@ (800e2c4 <prvProcessTimerOrBlockTask+0x74>)
 800e282:	6818      	ldr	r0, [r3, #0]
 800e284:	f7ff f898 	bl	800d3b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e288:	f7ff fbbc 	bl	800da04 <xTaskResumeAll>
 800e28c:	b9a8      	cbnz	r0, 800e2ba <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 800e28e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e296:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e29a:	f3bf 8f4f 	dsb	sy
 800e29e:	f3bf 8f6f 	isb	sy
 800e2a2:	e00a      	b.n	800e2ba <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 800e2a4:	f7ff fbae 	bl	800da04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e2a8:	4629      	mov	r1, r5
 800e2aa:	4630      	mov	r0, r6
 800e2ac:	f7ff ff9a 	bl	800e1e4 <prvProcessExpiredTimer>
 800e2b0:	e003      	b.n	800e2ba <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e2b2:	461c      	mov	r4, r3
 800e2b4:	e7e2      	b.n	800e27c <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 800e2b6:	f7ff fba5 	bl	800da04 <xTaskResumeAll>
}
 800e2ba:	b002      	add	sp, #8
 800e2bc:	bd70      	pop	{r4, r5, r6, pc}
 800e2be:	bf00      	nop
 800e2c0:	24003548 	.word	0x24003548
 800e2c4:	24003544 	.word	0x24003544

0800e2c8 <prvProcessReceivedCommands>:
{
 800e2c8:	b510      	push	{r4, lr}
 800e2ca:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e2cc:	e002      	b.n	800e2d4 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e2ce:	9b04      	ldr	r3, [sp, #16]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	da0f      	bge.n	800e2f4 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	a904      	add	r1, sp, #16
 800e2d8:	4b3d      	ldr	r3, [pc, #244]	@ (800e3d0 <prvProcessReceivedCommands+0x108>)
 800e2da:	6818      	ldr	r0, [r3, #0]
 800e2dc:	f7fe fe52 	bl	800cf84 <xQueueReceive>
 800e2e0:	2800      	cmp	r0, #0
 800e2e2:	d073      	beq.n	800e3cc <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e2e4:	9b04      	ldr	r3, [sp, #16]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	daf1      	bge.n	800e2ce <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e2ea:	9907      	ldr	r1, [sp, #28]
 800e2ec:	9806      	ldr	r0, [sp, #24]
 800e2ee:	9b05      	ldr	r3, [sp, #20]
 800e2f0:	4798      	blx	r3
 800e2f2:	e7ec      	b.n	800e2ce <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e2f4:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e2f6:	6963      	ldr	r3, [r4, #20]
 800e2f8:	b113      	cbz	r3, 800e300 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e2fa:	1d20      	adds	r0, r4, #4
 800e2fc:	f7fe faf8 	bl	800c8f0 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e300:	a803      	add	r0, sp, #12
 800e302:	f7ff ff59 	bl	800e1b8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800e306:	9b04      	ldr	r3, [sp, #16]
 800e308:	2b09      	cmp	r3, #9
 800e30a:	d8e3      	bhi.n	800e2d4 <prvProcessReceivedCommands+0xc>
 800e30c:	e8df f003 	tbb	[pc, r3]
 800e310:	30050505 	.word	0x30050505
 800e314:	05055037 	.word	0x05055037
 800e318:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e31a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e31e:	f043 0301 	orr.w	r3, r3, #1
 800e322:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e326:	9b05      	ldr	r3, [sp, #20]
 800e328:	69a1      	ldr	r1, [r4, #24]
 800e32a:	4602      	mov	r2, r0
 800e32c:	4419      	add	r1, r3
 800e32e:	4620      	mov	r0, r4
 800e330:	f7ff fe3c 	bl	800dfac <prvInsertTimerInActiveList>
 800e334:	2800      	cmp	r0, #0
 800e336:	d0cd      	beq.n	800e2d4 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e338:	6a23      	ldr	r3, [r4, #32]
 800e33a:	4620      	mov	r0, r4
 800e33c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e33e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e342:	f013 0f04 	tst.w	r3, #4
 800e346:	d0c5      	beq.n	800e2d4 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e348:	69a2      	ldr	r2, [r4, #24]
 800e34a:	2100      	movs	r1, #0
 800e34c:	9100      	str	r1, [sp, #0]
 800e34e:	460b      	mov	r3, r1
 800e350:	9805      	ldr	r0, [sp, #20]
 800e352:	4402      	add	r2, r0
 800e354:	4620      	mov	r0, r4
 800e356:	f7ff febb 	bl	800e0d0 <xTimerGenericCommand>
							configASSERT( xResult );
 800e35a:	2800      	cmp	r0, #0
 800e35c:	d1ba      	bne.n	800e2d4 <prvProcessReceivedCommands+0xc>
 800e35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e362:	f383 8811 	msr	BASEPRI, r3
 800e366:	f3bf 8f6f 	isb	sy
 800e36a:	f3bf 8f4f 	dsb	sy
 800e36e:	e7fe      	b.n	800e36e <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e370:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e374:	f023 0301 	bic.w	r3, r3, #1
 800e378:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 800e37c:	e7aa      	b.n	800e2d4 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e37e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e382:	f043 0301 	orr.w	r3, r3, #1
 800e386:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e38a:	9905      	ldr	r1, [sp, #20]
 800e38c:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e38e:	b131      	cbz	r1, 800e39e <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e390:	4603      	mov	r3, r0
 800e392:	4602      	mov	r2, r0
 800e394:	4401      	add	r1, r0
 800e396:	4620      	mov	r0, r4
 800e398:	f7ff fe08 	bl	800dfac <prvInsertTimerInActiveList>
					break;
 800e39c:	e79a      	b.n	800e2d4 <prvProcessReceivedCommands+0xc>
 800e39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3a2:	f383 8811 	msr	BASEPRI, r3
 800e3a6:	f3bf 8f6f 	isb	sy
 800e3aa:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e3ae:	e7fe      	b.n	800e3ae <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e3b0:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e3b4:	f013 0f02 	tst.w	r3, #2
 800e3b8:	d004      	beq.n	800e3c4 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e3ba:	f023 0301 	bic.w	r3, r3, #1
 800e3be:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800e3c2:	e787      	b.n	800e2d4 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	f000 fab7 	bl	800e938 <vPortFree>
 800e3ca:	e783      	b.n	800e2d4 <prvProcessReceivedCommands+0xc>
}
 800e3cc:	b008      	add	sp, #32
 800e3ce:	bd10      	pop	{r4, pc}
 800e3d0:	24003544 	.word	0x24003544

0800e3d4 <prvTimerTask>:
{
 800e3d4:	b500      	push	{lr}
 800e3d6:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e3d8:	a801      	add	r0, sp, #4
 800e3da:	f7ff fdd7 	bl	800df8c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e3de:	9901      	ldr	r1, [sp, #4]
 800e3e0:	f7ff ff36 	bl	800e250 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800e3e4:	f7ff ff70 	bl	800e2c8 <prvProcessReceivedCommands>
	for( ;; )
 800e3e8:	e7f6      	b.n	800e3d8 <prvTimerTask+0x4>
	...

0800e3ec <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e3ec:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e3f2:	4b0d      	ldr	r3, [pc, #52]	@ (800e428 <prvTaskExitError+0x3c>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3fa:	d008      	beq.n	800e40e <prvTaskExitError+0x22>
 800e3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e400:	f383 8811 	msr	BASEPRI, r3
 800e404:	f3bf 8f6f 	isb	sy
 800e408:	f3bf 8f4f 	dsb	sy
 800e40c:	e7fe      	b.n	800e40c <prvTaskExitError+0x20>
 800e40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e412:	f383 8811 	msr	BASEPRI, r3
 800e416:	f3bf 8f6f 	isb	sy
 800e41a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e41e:	9b01      	ldr	r3, [sp, #4]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d0fc      	beq.n	800e41e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e424:	b002      	add	sp, #8
 800e426:	4770      	bx	lr
 800e428:	24000010 	.word	0x24000010

0800e42c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e42c:	4808      	ldr	r0, [pc, #32]	@ (800e450 <prvPortStartFirstTask+0x24>)
 800e42e:	6800      	ldr	r0, [r0, #0]
 800e430:	6800      	ldr	r0, [r0, #0]
 800e432:	f380 8808 	msr	MSP, r0
 800e436:	f04f 0000 	mov.w	r0, #0
 800e43a:	f380 8814 	msr	CONTROL, r0
 800e43e:	b662      	cpsie	i
 800e440:	b661      	cpsie	f
 800e442:	f3bf 8f4f 	dsb	sy
 800e446:	f3bf 8f6f 	isb	sy
 800e44a:	df00      	svc	0
 800e44c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e44e:	0000      	.short	0x0000
 800e450:	e000ed08 	.word	0xe000ed08

0800e454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e454:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e464 <vPortEnableVFP+0x10>
 800e458:	6801      	ldr	r1, [r0, #0]
 800e45a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e45e:	6001      	str	r1, [r0, #0]
 800e460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e462:	0000      	.short	0x0000
 800e464:	e000ed88 	.word	0xe000ed88

0800e468 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e468:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e46c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e470:	f021 0101 	bic.w	r1, r1, #1
 800e474:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e478:	4b05      	ldr	r3, [pc, #20]	@ (800e490 <pxPortInitialiseStack+0x28>)
 800e47a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e47e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e482:	f06f 0302 	mvn.w	r3, #2
 800e486:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800e48a:	3844      	subs	r0, #68	@ 0x44
 800e48c:	4770      	bx	lr
 800e48e:	bf00      	nop
 800e490:	0800e3ed 	.word	0x0800e3ed
	...

0800e4a0 <SVC_Handler>:
	__asm volatile (
 800e4a0:	4b07      	ldr	r3, [pc, #28]	@ (800e4c0 <pxCurrentTCBConst2>)
 800e4a2:	6819      	ldr	r1, [r3, #0]
 800e4a4:	6808      	ldr	r0, [r1, #0]
 800e4a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4aa:	f380 8809 	msr	PSP, r0
 800e4ae:	f3bf 8f6f 	isb	sy
 800e4b2:	f04f 0000 	mov.w	r0, #0
 800e4b6:	f380 8811 	msr	BASEPRI, r0
 800e4ba:	4770      	bx	lr
 800e4bc:	f3af 8000 	nop.w

0800e4c0 <pxCurrentTCBConst2>:
 800e4c0:	24003448 	.word	0x24003448

0800e4c4 <vPortEnterCritical>:
 800e4c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4c8:	f383 8811 	msr	BASEPRI, r3
 800e4cc:	f3bf 8f6f 	isb	sy
 800e4d0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800e4d4:	4a0b      	ldr	r2, [pc, #44]	@ (800e504 <vPortEnterCritical+0x40>)
 800e4d6:	6813      	ldr	r3, [r2, #0]
 800e4d8:	3301      	adds	r3, #1
 800e4da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	d000      	beq.n	800e4e2 <vPortEnterCritical+0x1e>
}
 800e4e0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e4e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e4e6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800e4ea:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800e4ee:	d0f7      	beq.n	800e4e0 <vPortEnterCritical+0x1c>
 800e4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4f4:	f383 8811 	msr	BASEPRI, r3
 800e4f8:	f3bf 8f6f 	isb	sy
 800e4fc:	f3bf 8f4f 	dsb	sy
 800e500:	e7fe      	b.n	800e500 <vPortEnterCritical+0x3c>
 800e502:	bf00      	nop
 800e504:	24000010 	.word	0x24000010

0800e508 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800e508:	4b09      	ldr	r3, [pc, #36]	@ (800e530 <vPortExitCritical+0x28>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	b943      	cbnz	r3, 800e520 <vPortExitCritical+0x18>
 800e50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e512:	f383 8811 	msr	BASEPRI, r3
 800e516:	f3bf 8f6f 	isb	sy
 800e51a:	f3bf 8f4f 	dsb	sy
 800e51e:	e7fe      	b.n	800e51e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800e520:	3b01      	subs	r3, #1
 800e522:	4a03      	ldr	r2, [pc, #12]	@ (800e530 <vPortExitCritical+0x28>)
 800e524:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e526:	b90b      	cbnz	r3, 800e52c <vPortExitCritical+0x24>
	__asm volatile
 800e528:	f383 8811 	msr	BASEPRI, r3
}
 800e52c:	4770      	bx	lr
 800e52e:	bf00      	nop
 800e530:	24000010 	.word	0x24000010
	...

0800e540 <PendSV_Handler>:
	__asm volatile
 800e540:	f3ef 8009 	mrs	r0, PSP
 800e544:	f3bf 8f6f 	isb	sy
 800e548:	4b15      	ldr	r3, [pc, #84]	@ (800e5a0 <pxCurrentTCBConst>)
 800e54a:	681a      	ldr	r2, [r3, #0]
 800e54c:	f01e 0f10 	tst.w	lr, #16
 800e550:	bf08      	it	eq
 800e552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e55a:	6010      	str	r0, [r2, #0]
 800e55c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e560:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e564:	f380 8811 	msr	BASEPRI, r0
 800e568:	f3bf 8f4f 	dsb	sy
 800e56c:	f3bf 8f6f 	isb	sy
 800e570:	f7ff faea 	bl	800db48 <vTaskSwitchContext>
 800e574:	f04f 0000 	mov.w	r0, #0
 800e578:	f380 8811 	msr	BASEPRI, r0
 800e57c:	bc09      	pop	{r0, r3}
 800e57e:	6819      	ldr	r1, [r3, #0]
 800e580:	6808      	ldr	r0, [r1, #0]
 800e582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e586:	f01e 0f10 	tst.w	lr, #16
 800e58a:	bf08      	it	eq
 800e58c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e590:	f380 8809 	msr	PSP, r0
 800e594:	f3bf 8f6f 	isb	sy
 800e598:	4770      	bx	lr
 800e59a:	bf00      	nop
 800e59c:	f3af 8000 	nop.w

0800e5a0 <pxCurrentTCBConst>:
 800e5a0:	24003448 	.word	0x24003448

0800e5a4 <xPortSysTickHandler>:
{
 800e5a4:	b508      	push	{r3, lr}
	__asm volatile
 800e5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5aa:	f383 8811 	msr	BASEPRI, r3
 800e5ae:	f3bf 8f6f 	isb	sy
 800e5b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800e5b6:	f7ff f999 	bl	800d8ec <xTaskIncrementTick>
 800e5ba:	b128      	cbz	r0, 800e5c8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e5bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e5c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	f383 8811 	msr	BASEPRI, r3
}
 800e5ce:	bd08      	pop	{r3, pc}

0800e5d0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e5d0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e5d8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e5da:	4b05      	ldr	r3, [pc, #20]	@ (800e5f0 <vPortSetupTimerInterrupt+0x20>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	4905      	ldr	r1, [pc, #20]	@ (800e5f4 <vPortSetupTimerInterrupt+0x24>)
 800e5e0:	fba1 1303 	umull	r1, r3, r1, r3
 800e5e4:	099b      	lsrs	r3, r3, #6
 800e5e6:	3b01      	subs	r3, #1
 800e5e8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e5ea:	2307      	movs	r3, #7
 800e5ec:	6113      	str	r3, [r2, #16]
}
 800e5ee:	4770      	bx	lr
 800e5f0:	24000004 	.word	0x24000004
 800e5f4:	10624dd3 	.word	0x10624dd3

0800e5f8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e5f8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e5fc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800e600:	4b3d      	ldr	r3, [pc, #244]	@ (800e6f8 <xPortStartScheduler+0x100>)
 800e602:	429a      	cmp	r2, r3
 800e604:	d01c      	beq.n	800e640 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e606:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e60a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800e60e:	4b3b      	ldr	r3, [pc, #236]	@ (800e6fc <xPortStartScheduler+0x104>)
 800e610:	429a      	cmp	r2, r3
 800e612:	d01e      	beq.n	800e652 <xPortStartScheduler+0x5a>
{
 800e614:	b530      	push	{r4, r5, lr}
 800e616:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e618:	4b39      	ldr	r3, [pc, #228]	@ (800e700 <xPortStartScheduler+0x108>)
 800e61a:	781a      	ldrb	r2, [r3, #0]
 800e61c:	b2d2      	uxtb	r2, r2
 800e61e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e620:	22ff      	movs	r2, #255	@ 0xff
 800e622:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e624:	781b      	ldrb	r3, [r3, #0]
 800e626:	b2db      	uxtb	r3, r3
 800e628:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e62c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e630:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e634:	4a33      	ldr	r2, [pc, #204]	@ (800e704 <xPortStartScheduler+0x10c>)
 800e636:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e638:	4b33      	ldr	r3, [pc, #204]	@ (800e708 <xPortStartScheduler+0x110>)
 800e63a:	2207      	movs	r2, #7
 800e63c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e63e:	e01b      	b.n	800e678 <xPortStartScheduler+0x80>
	__asm volatile
 800e640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e644:	f383 8811 	msr	BASEPRI, r3
 800e648:	f3bf 8f6f 	isb	sy
 800e64c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e650:	e7fe      	b.n	800e650 <xPortStartScheduler+0x58>
 800e652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e656:	f383 8811 	msr	BASEPRI, r3
 800e65a:	f3bf 8f6f 	isb	sy
 800e65e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e662:	e7fe      	b.n	800e662 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800e664:	4a28      	ldr	r2, [pc, #160]	@ (800e708 <xPortStartScheduler+0x110>)
 800e666:	6813      	ldr	r3, [r2, #0]
 800e668:	3b01      	subs	r3, #1
 800e66a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e66c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e670:	005b      	lsls	r3, r3, #1
 800e672:	b2db      	uxtb	r3, r3
 800e674:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e678:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e67c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e680:	d1f0      	bne.n	800e664 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e682:	4b21      	ldr	r3, [pc, #132]	@ (800e708 <xPortStartScheduler+0x110>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b03      	cmp	r3, #3
 800e688:	d008      	beq.n	800e69c <xPortStartScheduler+0xa4>
 800e68a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e68e:	f383 8811 	msr	BASEPRI, r3
 800e692:	f3bf 8f6f 	isb	sy
 800e696:	f3bf 8f4f 	dsb	sy
 800e69a:	e7fe      	b.n	800e69a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e69c:	021b      	lsls	r3, r3, #8
 800e69e:	4a1a      	ldr	r2, [pc, #104]	@ (800e708 <xPortStartScheduler+0x110>)
 800e6a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6a2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e6a6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e6a8:	9b01      	ldr	r3, [sp, #4]
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	4a14      	ldr	r2, [pc, #80]	@ (800e700 <xPortStartScheduler+0x108>)
 800e6ae:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e6b0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 800e6b4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800e6b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e6bc:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e6c0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800e6c4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e6c8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800e6cc:	f7ff ff80 	bl	800e5d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800e6d0:	2500      	movs	r5, #0
 800e6d2:	4b0e      	ldr	r3, [pc, #56]	@ (800e70c <xPortStartScheduler+0x114>)
 800e6d4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800e6d6:	f7ff febd 	bl	800e454 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e6da:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800e6de:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e6e2:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800e6e6:	f7ff fea1 	bl	800e42c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800e6ea:	f7ff fa2d 	bl	800db48 <vTaskSwitchContext>
	prvTaskExitError();
 800e6ee:	f7ff fe7d 	bl	800e3ec <prvTaskExitError>
}
 800e6f2:	4628      	mov	r0, r5
 800e6f4:	b003      	add	sp, #12
 800e6f6:	bd30      	pop	{r4, r5, pc}
 800e6f8:	410fc271 	.word	0x410fc271
 800e6fc:	410fc270 	.word	0x410fc270
 800e700:	e000e400 	.word	0xe000e400
 800e704:	2400357c 	.word	0x2400357c
 800e708:	24003578 	.word	0x24003578
 800e70c:	24000010 	.word	0x24000010

0800e710 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e710:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e714:	2b0f      	cmp	r3, #15
 800e716:	d90f      	bls.n	800e738 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e718:	4a11      	ldr	r2, [pc, #68]	@ (800e760 <vPortValidateInterruptPriority+0x50>)
 800e71a:	5c9b      	ldrb	r3, [r3, r2]
 800e71c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e71e:	4a11      	ldr	r2, [pc, #68]	@ (800e764 <vPortValidateInterruptPriority+0x54>)
 800e720:	7812      	ldrb	r2, [r2, #0]
 800e722:	429a      	cmp	r2, r3
 800e724:	d908      	bls.n	800e738 <vPortValidateInterruptPriority+0x28>
 800e726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e72a:	f383 8811 	msr	BASEPRI, r3
 800e72e:	f3bf 8f6f 	isb	sy
 800e732:	f3bf 8f4f 	dsb	sy
 800e736:	e7fe      	b.n	800e736 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e738:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e73c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800e740:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e744:	4a08      	ldr	r2, [pc, #32]	@ (800e768 <vPortValidateInterruptPriority+0x58>)
 800e746:	6812      	ldr	r2, [r2, #0]
 800e748:	4293      	cmp	r3, r2
 800e74a:	d908      	bls.n	800e75e <vPortValidateInterruptPriority+0x4e>
 800e74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e750:	f383 8811 	msr	BASEPRI, r3
 800e754:	f3bf 8f6f 	isb	sy
 800e758:	f3bf 8f4f 	dsb	sy
 800e75c:	e7fe      	b.n	800e75c <vPortValidateInterruptPriority+0x4c>
	}
 800e75e:	4770      	bx	lr
 800e760:	e000e3f0 	.word	0xe000e3f0
 800e764:	2400357c 	.word	0x2400357c
 800e768:	24003578 	.word	0x24003578

0800e76c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e76c:	4a12      	ldr	r2, [pc, #72]	@ (800e7b8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e76e:	f012 0f07 	tst.w	r2, #7
 800e772:	d01e      	beq.n	800e7b2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e774:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e776:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e77a:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 800e77e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e780:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e782:	480e      	ldr	r0, [pc, #56]	@ (800e7bc <prvHeapInit+0x50>)
 800e784:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e786:	2100      	movs	r1, #0
 800e788:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e78a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800e78c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e78e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800e792:	480b      	ldr	r0, [pc, #44]	@ (800e7c0 <prvHeapInit+0x54>)
 800e794:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800e796:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e798:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e79a:	1a99      	subs	r1, r3, r2
 800e79c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e79e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7a0:	4b08      	ldr	r3, [pc, #32]	@ (800e7c4 <prvHeapInit+0x58>)
 800e7a2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7a4:	4b08      	ldr	r3, [pc, #32]	@ (800e7c8 <prvHeapInit+0x5c>)
 800e7a6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e7a8:	4b08      	ldr	r3, [pc, #32]	@ (800e7cc <prvHeapInit+0x60>)
 800e7aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e7ae:	601a      	str	r2, [r3, #0]
}
 800e7b0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e7b2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e7b6:	e7e4      	b.n	800e782 <prvHeapInit+0x16>
 800e7b8:	240035a0 	.word	0x240035a0
 800e7bc:	24003598 	.word	0x24003598
 800e7c0:	24003594 	.word	0x24003594
 800e7c4:	2400358c 	.word	0x2400358c
 800e7c8:	24003590 	.word	0x24003590
 800e7cc:	24003580 	.word	0x24003580

0800e7d0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e7d0:	4b16      	ldr	r3, [pc, #88]	@ (800e82c <prvInsertBlockIntoFreeList+0x5c>)
 800e7d2:	461a      	mov	r2, r3
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4283      	cmp	r3, r0
 800e7d8:	d3fb      	bcc.n	800e7d2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e7da:	6851      	ldr	r1, [r2, #4]
 800e7dc:	eb02 0c01 	add.w	ip, r2, r1
 800e7e0:	4584      	cmp	ip, r0
 800e7e2:	d009      	beq.n	800e7f8 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e7e4:	6841      	ldr	r1, [r0, #4]
 800e7e6:	eb00 0c01 	add.w	ip, r0, r1
 800e7ea:	4563      	cmp	r3, ip
 800e7ec:	d009      	beq.n	800e802 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e7ee:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e7f0:	4290      	cmp	r0, r2
 800e7f2:	d019      	beq.n	800e828 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e7f4:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800e7f6:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e7f8:	6840      	ldr	r0, [r0, #4]
 800e7fa:	4401      	add	r1, r0
 800e7fc:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800e7fe:	4610      	mov	r0, r2
 800e800:	e7f0      	b.n	800e7e4 <prvInsertBlockIntoFreeList+0x14>
{
 800e802:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e804:	4c0a      	ldr	r4, [pc, #40]	@ (800e830 <prvInsertBlockIntoFreeList+0x60>)
 800e806:	6824      	ldr	r4, [r4, #0]
 800e808:	42a3      	cmp	r3, r4
 800e80a:	d00b      	beq.n	800e824 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	4419      	add	r1, r3
 800e810:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e812:	6813      	ldr	r3, [r2, #0]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800e818:	4290      	cmp	r0, r2
 800e81a:	d000      	beq.n	800e81e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e81c:	6010      	str	r0, [r2, #0]
	}
}
 800e81e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e822:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e824:	6004      	str	r4, [r0, #0]
 800e826:	e7f7      	b.n	800e818 <prvInsertBlockIntoFreeList+0x48>
 800e828:	4770      	bx	lr
 800e82a:	bf00      	nop
 800e82c:	24003598 	.word	0x24003598
 800e830:	24003594 	.word	0x24003594

0800e834 <pvPortMalloc>:
{
 800e834:	b538      	push	{r3, r4, r5, lr}
 800e836:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800e838:	f7ff f84a 	bl	800d8d0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800e83c:	4b38      	ldr	r3, [pc, #224]	@ (800e920 <pvPortMalloc+0xec>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	b1b3      	cbz	r3, 800e870 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e842:	4b38      	ldr	r3, [pc, #224]	@ (800e924 <pvPortMalloc+0xf0>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	421c      	tst	r4, r3
 800e848:	d150      	bne.n	800e8ec <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 800e84a:	2c00      	cmp	r4, #0
 800e84c:	d050      	beq.n	800e8f0 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 800e84e:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e852:	f014 0f07 	tst.w	r4, #7
 800e856:	d002      	beq.n	800e85e <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e858:	f022 0207 	bic.w	r2, r2, #7
 800e85c:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e85e:	2a00      	cmp	r2, #0
 800e860:	d055      	beq.n	800e90e <pvPortMalloc+0xda>
 800e862:	4b31      	ldr	r3, [pc, #196]	@ (800e928 <pvPortMalloc+0xf4>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	4293      	cmp	r3, r2
 800e868:	d353      	bcc.n	800e912 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 800e86a:	4930      	ldr	r1, [pc, #192]	@ (800e92c <pvPortMalloc+0xf8>)
 800e86c:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e86e:	e004      	b.n	800e87a <pvPortMalloc+0x46>
			prvHeapInit();
 800e870:	f7ff ff7c 	bl	800e76c <prvHeapInit>
 800e874:	e7e5      	b.n	800e842 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800e876:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800e878:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e87a:	6863      	ldr	r3, [r4, #4]
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d202      	bcs.n	800e886 <pvPortMalloc+0x52>
 800e880:	6823      	ldr	r3, [r4, #0]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d1f7      	bne.n	800e876 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 800e886:	4b26      	ldr	r3, [pc, #152]	@ (800e920 <pvPortMalloc+0xec>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	42a3      	cmp	r3, r4
 800e88c:	d043      	beq.n	800e916 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e88e:	680d      	ldr	r5, [r1, #0]
 800e890:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e892:	6823      	ldr	r3, [r4, #0]
 800e894:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e896:	6863      	ldr	r3, [r4, #4]
 800e898:	1a9b      	subs	r3, r3, r2
 800e89a:	2b10      	cmp	r3, #16
 800e89c:	d910      	bls.n	800e8c0 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e89e:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8a0:	f010 0f07 	tst.w	r0, #7
 800e8a4:	d008      	beq.n	800e8b8 <pvPortMalloc+0x84>
 800e8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8aa:	f383 8811 	msr	BASEPRI, r3
 800e8ae:	f3bf 8f6f 	isb	sy
 800e8b2:	f3bf 8f4f 	dsb	sy
 800e8b6:	e7fe      	b.n	800e8b6 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e8b8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e8ba:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e8bc:	f7ff ff88 	bl	800e7d0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e8c0:	6862      	ldr	r2, [r4, #4]
 800e8c2:	4919      	ldr	r1, [pc, #100]	@ (800e928 <pvPortMalloc+0xf4>)
 800e8c4:	680b      	ldr	r3, [r1, #0]
 800e8c6:	1a9b      	subs	r3, r3, r2
 800e8c8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e8ca:	4919      	ldr	r1, [pc, #100]	@ (800e930 <pvPortMalloc+0xfc>)
 800e8cc:	6809      	ldr	r1, [r1, #0]
 800e8ce:	428b      	cmp	r3, r1
 800e8d0:	d201      	bcs.n	800e8d6 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e8d2:	4917      	ldr	r1, [pc, #92]	@ (800e930 <pvPortMalloc+0xfc>)
 800e8d4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e8d6:	4b13      	ldr	r3, [pc, #76]	@ (800e924 <pvPortMalloc+0xf0>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4313      	orrs	r3, r2
 800e8dc:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800e8e2:	4a14      	ldr	r2, [pc, #80]	@ (800e934 <pvPortMalloc+0x100>)
 800e8e4:	6813      	ldr	r3, [r2, #0]
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	6013      	str	r3, [r2, #0]
 800e8ea:	e002      	b.n	800e8f2 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 800e8ec:	2500      	movs	r5, #0
 800e8ee:	e000      	b.n	800e8f2 <pvPortMalloc+0xbe>
 800e8f0:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 800e8f2:	f7ff f887 	bl	800da04 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8f6:	f015 0f07 	tst.w	r5, #7
 800e8fa:	d00e      	beq.n	800e91a <pvPortMalloc+0xe6>
 800e8fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e900:	f383 8811 	msr	BASEPRI, r3
 800e904:	f3bf 8f6f 	isb	sy
 800e908:	f3bf 8f4f 	dsb	sy
 800e90c:	e7fe      	b.n	800e90c <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 800e90e:	2500      	movs	r5, #0
 800e910:	e7ef      	b.n	800e8f2 <pvPortMalloc+0xbe>
 800e912:	2500      	movs	r5, #0
 800e914:	e7ed      	b.n	800e8f2 <pvPortMalloc+0xbe>
 800e916:	2500      	movs	r5, #0
 800e918:	e7eb      	b.n	800e8f2 <pvPortMalloc+0xbe>
}
 800e91a:	4628      	mov	r0, r5
 800e91c:	bd38      	pop	{r3, r4, r5, pc}
 800e91e:	bf00      	nop
 800e920:	24003594 	.word	0x24003594
 800e924:	24003580 	.word	0x24003580
 800e928:	24003590 	.word	0x24003590
 800e92c:	24003598 	.word	0x24003598
 800e930:	2400358c 	.word	0x2400358c
 800e934:	24003588 	.word	0x24003588

0800e938 <vPortFree>:
	if( pv != NULL )
 800e938:	2800      	cmp	r0, #0
 800e93a:	d034      	beq.n	800e9a6 <vPortFree+0x6e>
{
 800e93c:	b538      	push	{r3, r4, r5, lr}
 800e93e:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800e940:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e944:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e948:	4a17      	ldr	r2, [pc, #92]	@ (800e9a8 <vPortFree+0x70>)
 800e94a:	6812      	ldr	r2, [r2, #0]
 800e94c:	4213      	tst	r3, r2
 800e94e:	d108      	bne.n	800e962 <vPortFree+0x2a>
 800e950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e954:	f383 8811 	msr	BASEPRI, r3
 800e958:	f3bf 8f6f 	isb	sy
 800e95c:	f3bf 8f4f 	dsb	sy
 800e960:	e7fe      	b.n	800e960 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e962:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800e966:	b141      	cbz	r1, 800e97a <vPortFree+0x42>
 800e968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e96c:	f383 8811 	msr	BASEPRI, r3
 800e970:	f3bf 8f6f 	isb	sy
 800e974:	f3bf 8f4f 	dsb	sy
 800e978:	e7fe      	b.n	800e978 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e97a:	ea23 0302 	bic.w	r3, r3, r2
 800e97e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800e982:	f7fe ffa5 	bl	800d8d0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e986:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800e98a:	4a08      	ldr	r2, [pc, #32]	@ (800e9ac <vPortFree+0x74>)
 800e98c:	6813      	ldr	r3, [r2, #0]
 800e98e:	440b      	add	r3, r1
 800e990:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e992:	4628      	mov	r0, r5
 800e994:	f7ff ff1c 	bl	800e7d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e998:	4a05      	ldr	r2, [pc, #20]	@ (800e9b0 <vPortFree+0x78>)
 800e99a:	6813      	ldr	r3, [r2, #0]
 800e99c:	3301      	adds	r3, #1
 800e99e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800e9a0:	f7ff f830 	bl	800da04 <xTaskResumeAll>
}
 800e9a4:	bd38      	pop	{r3, r4, r5, pc}
 800e9a6:	4770      	bx	lr
 800e9a8:	24003580 	.word	0x24003580
 800e9ac:	24003590 	.word	0x24003590
 800e9b0:	24003584 	.word	0x24003584

0800e9b4 <_Z11StartupLEDSP4LEDS>:
/**
 * @brief LEDs after initialization
 *
 * @param input leds: LEDS instance pointer
 */
void StartupLEDS(LEDS* leds) {
 800e9b4:	b510      	push	{r4, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	b086      	sub	sp, #24
 800e9ba:	4604      	mov	r4, r0
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e9bc:	2001      	movs	r0, #1
 800e9be:	9305      	str	r3, [sp, #20]
 800e9c0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800e9c4:	f00d f927 	bl	801bc16 <_Znwj>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800e9c8:	2205      	movs	r2, #5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800e9ca:	1c43      	adds	r3, r0, #1
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800e9cc:	9003      	str	r0, [sp, #12]
 800e9ce:	7002      	strb	r2, [r0, #0]
#ifdef USE_SMD_LEDs
	leds->ConfigureTimings(LED_STATUS, std::vector<uint8_t>{5}, 10);
 800e9d0:	2107      	movs	r1, #7
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800e9d2:	9305      	str	r3, [sp, #20]
 800e9d4:	aa03      	add	r2, sp, #12
	  this->_M_impl._M_finish =
 800e9d6:	9304      	str	r3, [sp, #16]
 800e9d8:	4620      	mov	r0, r4
 800e9da:	230a      	movs	r3, #10
 800e9dc:	f005 ff2f 	bl	801483e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
	_M_deallocate(_M_impl._M_start,
 800e9e0:	9803      	ldr	r0, [sp, #12]
	if (__p)
 800e9e2:	b118      	cbz	r0, 800e9ec <_Z11StartupLEDSP4LEDS+0x38>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800e9e4:	9905      	ldr	r1, [sp, #20]
 800e9e6:	1a09      	subs	r1, r1, r0
 800e9e8:	f00d f8f0 	bl	801bbcc <_ZdlPvj>
	leds->Blink(LED_STATUS); // blink until ID allocated
 800e9ec:	2107      	movs	r1, #7
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f005 f9cf 	bl	8013d92 <_ZN4LEDS5BlinkEh>

	leds->SetRGB(LED_RGB, 0, 0, 0);
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	210d      	movs	r1, #13
 800e9f8:	4620      	mov	r0, r4
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	9300      	str	r3, [sp, #0]
 800e9fe:	f005 fa22 	bl	8013e46 <_ZN4LEDS6SetRGBEhhhh>
#endif
}
 800ea02:	b006      	add	sp, #24
 800ea04:	bd10      	pop	{r4, pc}

0800ea06 <_Z11IDFoundLEDSP4LEDS>:
 *
 * @param input leds: LEDS instance pointer
 */
void IDFoundLEDS(LEDS* leds) {
#ifdef USE_SMD_LEDs
	leds->SetLED(LED_STATUS, GPIO_PIN_SET);
 800ea06:	2201      	movs	r2, #1
 800ea08:	2107      	movs	r1, #7
 800ea0a:	f005 b9a1 	b.w	8013d50 <_ZN4LEDS6SetLEDEh13GPIO_PinState>

0800ea0e <_Z16CommunicationLEDP4LEDSh>:
 * @param input leds: LEDS instance pointer
 * @param input interface_ID: the interface from Communication that asks for a LED single blinking. The ID should be the same than the LED ID
 */
void CommunicationLED(LEDS* leds, uint8_t interface_ID) {
#ifdef USE_SMD_LEDs
	if (interface_ID == UART_PIC || interface_ID == UART_EXTENSION) return; // no LED for these interfaces
 800ea0e:	1f4b      	subs	r3, r1, #5
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	d901      	bls.n	800ea18 <_Z16CommunicationLEDP4LEDSh+0xa>

	leds->BlinkOnce(interface_ID);
 800ea14:	f005 b9e0 	b.w	8013dd8 <_ZN4LEDS9BlinkOnceEh>
#endif
}
 800ea18:	4770      	bx	lr
	...

0800ea1c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 800ea1c:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ea1e:	4926      	ldr	r1, [pc, #152]	@ (800eab8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 800ea20:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ea22:	4826      	ldr	r0, [pc, #152]	@ (800eabc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ea24:	f00d f98e 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ea28:	2800      	cmp	r0, #0
 800ea2a:	d133      	bne.n	800ea94 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800ea2c:	4924      	ldr	r1, [pc, #144]	@ (800eac0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa4>)
 800ea2e:	4823      	ldr	r0, [pc, #140]	@ (800eabc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ea30:	f00d f988 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ea34:	2800      	cmp	r0, #0
 800ea36:	d12f      	bne.n	800ea98 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800ea38:	4922      	ldr	r1, [pc, #136]	@ (800eac4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa8>)
 800ea3a:	4820      	ldr	r0, [pc, #128]	@ (800eabc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ea3c:	f00d f982 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ea40:	bb60      	cbnz	r0, 800ea9c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800ea42:	4921      	ldr	r1, [pc, #132]	@ (800eac8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xac>)
 800ea44:	481d      	ldr	r0, [pc, #116]	@ (800eabc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ea46:	f00d f97d 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ea4a:	bb48      	cbnz	r0, 800eaa0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800ea4c:	491f      	ldr	r1, [pc, #124]	@ (800eacc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb0>)
 800ea4e:	481b      	ldr	r0, [pc, #108]	@ (800eabc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ea50:	f00d f978 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ea54:	bb30      	cbnz	r0, 800eaa4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800ea56:	491e      	ldr	r1, [pc, #120]	@ (800ead0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb4>)
 800ea58:	4818      	ldr	r0, [pc, #96]	@ (800eabc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ea5a:	f00d f973 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ea5e:	bb18      	cbnz	r0, 800eaa8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800ea60:	491c      	ldr	r1, [pc, #112]	@ (800ead4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb8>)
 800ea62:	4816      	ldr	r0, [pc, #88]	@ (800eabc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ea64:	f00d f96e 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ea68:	bb00      	cbnz	r0, 800eaac <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800ea6a:	491b      	ldr	r1, [pc, #108]	@ (800ead8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xbc>)
 800ea6c:	4813      	ldr	r0, [pc, #76]	@ (800eabc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ea6e:	f00d f969 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ea72:	b9e8      	cbnz	r0, 800eab0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800ea74:	4911      	ldr	r1, [pc, #68]	@ (800eabc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ea76:	4608      	mov	r0, r1
 800ea78:	f00d f964 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ea7c:	b9d0      	cbnz	r0, 800eab4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800ea7e:	4917      	ldr	r1, [pc, #92]	@ (800eadc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xc0>)
 800ea80:	480e      	ldr	r0, [pc, #56]	@ (800eabc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ea82:	f00d f95f 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800ea86:	2800      	cmp	r0, #0
 800ea88:	bf14      	ite	ne
 800ea8a:	2309      	movne	r3, #9
 800ea8c:	2300      	moveq	r3, #0
 800ea8e:	7020      	strb	r0, [r4, #0]
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ea94:	2300      	movs	r3, #0
 800ea96:	e7fa      	b.n	800ea8e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800ea98:	2301      	movs	r3, #1
 800ea9a:	e7f8      	b.n	800ea8e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800ea9c:	2302      	movs	r3, #2
 800ea9e:	e7f6      	b.n	800ea8e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800eaa0:	2303      	movs	r3, #3
 800eaa2:	e7f4      	b.n	800ea8e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800eaa4:	2304      	movs	r3, #4
 800eaa6:	e7f2      	b.n	800ea8e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800eaa8:	2305      	movs	r3, #5
 800eaaa:	e7f0      	b.n	800ea8e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800eaac:	2306      	movs	r3, #6
 800eaae:	e7ee      	b.n	800ea8e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800eab0:	2307      	movs	r3, #7
 800eab2:	e7ec      	b.n	800ea8e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800eab4:	2308      	movs	r3, #8
 800eab6:	e7ea      	b.n	800ea8e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
 800eab8:	0801ca50 	.word	0x0801ca50
 800eabc:	0801ca18 	.word	0x0801ca18
 800eac0:	0801ca40 	.word	0x0801ca40
 800eac4:	0801ca30 	.word	0x0801ca30
 800eac8:	0801ca20 	.word	0x0801ca20
 800eacc:	0801ca58 	.word	0x0801ca58
 800ead0:	0801ca48 	.word	0x0801ca48
 800ead4:	0801ca38 	.word	0x0801ca38
 800ead8:	0801ca28 	.word	0x0801ca28
 800eadc:	0801ca10 	.word	0x0801ca10

0800eae0 <_ZN15PlatformSensorsC1Ev>:
/**
 * @brief Class constructor
 */
PlatformSensors::PlatformSensors() {

}
 800eae0:	4770      	bx	lr
	...

0800eae4 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb>:
 * @param output length: output length
 * @param input use_semaphore: false to disable the use of semaphores for this access. DEFAULT=true
 * @return whether successful
 */
template <typename T>
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800eae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eae8:	f2ad 4d14 	subw	sp, sp, #1044	@ 0x414
 800eaec:	4689      	mov	r9, r1
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800eaee:	f04f 31ff 	mov.w	r1, #4294967295
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800eaf2:	461f      	mov	r7, r3
 800eaf4:	9000      	str	r0, [sp, #0]
 800eaf6:	4614      	mov	r4, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800eaf8:	6800      	ldr	r0, [r0, #0]
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800eafa:	f89d b438 	ldrb.w	fp, [sp, #1080]	@ 0x438
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800eafe:	f7fd fe49 	bl	800c794 <osSemaphoreAcquire>
	// Find register
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800eb02:	f10d 020f 	add.w	r2, sp, #15
 800eb06:	4649      	mov	r1, r9
 800eb08:	9800      	ldr	r0, [sp, #0]
 800eb0a:	f009 fc06 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800eb0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800eb12:	4605      	mov	r5, r0
	if (!success) {
 800eb14:	b953      	cbnz	r3, 800eb2c <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x48>
	}

	// Get type ID
	uint8_t registered_type = GetTypeID<T>(&success);
	if (!success) {
		osSemaphoreRelease(RegistersSemaphore);
 800eb16:	9b00      	ldr	r3, [sp, #0]
		return false;
 800eb18:	f04f 0a00 	mov.w	sl, #0
		osSemaphoreRelease(RegistersSemaphore);
 800eb1c:	6818      	ldr	r0, [r3, #0]
 800eb1e:	f7fd fe6d 	bl	800c7fc <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
		return true;
	}
	osSemaphoreRelease(RegistersSemaphore);
	return true;
}
 800eb22:	4650      	mov	r0, sl
 800eb24:	f20d 4d14 	addw	sp, sp, #1044	@ 0x414
 800eb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800eb2c:	f10d 000f 	add.w	r0, sp, #15
 800eb30:	f7ff ff74 	bl	800ea1c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 800eb34:	f89d a00f 	ldrb.w	sl, [sp, #15]
 800eb38:	f1ba 0f00 	cmp.w	sl, #0
 800eb3c:	d0eb      	beq.n	800eb16 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x32>
	if (target_register->register_info.type != registered_type) {
 800eb3e:	792b      	ldrb	r3, [r5, #4]
 800eb40:	4283      	cmp	r3, r0
 800eb42:	d1e8      	bne.n	800eb16 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 800eb44:	3304      	adds	r3, #4
 800eb46:	9a00      	ldr	r2, [sp, #0]
 800eb48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d0e2      	beq.n	800eb16 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x32>
	if (target_register->access.read) {
 800eb50:	7a6a      	ldrb	r2, [r5, #9]
 800eb52:	2a00      	cmp	r2, #0
 800eb54:	d05f      	beq.n	800ec16 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x132>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800eb56:	8969      	ldrh	r1, [r5, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 800eb58:	2200      	movs	r2, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800eb5a:	e9d3 0300 	ldrd	r0, r3, [r3]
 800eb5e:	f88d 200f 	strb.w	r2, [sp, #15]
 800eb62:	1a1b      	subs	r3, r3, r0
	if (__n >= this->size())
 800eb64:	ebb1 1f23 	cmp.w	r1, r3, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800eb68:	ea4f 1223 	mov.w	r2, r3, asr #4
	if (__n >= this->size())
 800eb6c:	d302      	bcc.n	800eb74 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x90>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800eb6e:	4839      	ldr	r0, [pc, #228]	@ (800ec54 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x170>)
 800eb70:	f00d f909 	bl	801bd86 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 800eb74:	010b      	lsls	r3, r1, #4
 800eb76:	eb00 1101 	add.w	r1, r0, r1, lsl #4
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800eb7a:	f850 8003 	ldr.w	r8, [r0, r3]
 800eb7e:	684b      	ldr	r3, [r1, #4]
 800eb80:	9301      	str	r3, [sp, #4]
 800eb82:	68cb      	ldr	r3, [r1, #12]
 800eb84:	461e      	mov	r6, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800eb86:	f1bb 0f00 	cmp.w	fp, #0
 800eb8a:	d006      	beq.n	800eb9a <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xb6>
 800eb8c:	68eb      	ldr	r3, [r5, #12]
 800eb8e:	b123      	cbz	r3, 800eb9a <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xb6>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 800eb90:	f04f 31ff 	mov.w	r1, #4294967295
 800eb94:	6818      	ldr	r0, [r3, #0]
 800eb96:	f7fd fdfd 	bl	800c794 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 800eb9a:	786b      	ldrb	r3, [r5, #1]
 800eb9c:	b1e3      	cbz	r3, 800ebd8 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xf4>
			if (output != NULL) {
 800eb9e:	2c00      	cmp	r4, #0
 800eba0:	d03e      	beq.n	800ec20 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x13c>
				*callback_output = output;
 800eba2:	4622      	mov	r2, r4
 800eba4:	2300      	movs	r3, #0
 800eba6:	601a      	str	r2, [r3, #0]
			if (callbacks.read != NULL) {
 800eba8:	b1b6      	cbz	r6, 800ebd8 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xf4>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800ebaa:	463b      	mov	r3, r7
 800ebac:	2200      	movs	r2, #0
 800ebae:	4649      	mov	r1, r9
 800ebb0:	9801      	ldr	r0, [sp, #4]
 800ebb2:	47b0      	blx	r6
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800ebb4:	796b      	ldrb	r3, [r5, #5]
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800ebb6:	f88d 000f 	strb.w	r0, [sp, #15]
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d032      	beq.n	800ec24 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x140>
 800ebbe:	88eb      	ldrh	r3, [r5, #6]
 800ebc0:	b103      	cbz	r3, 800ebc4 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xe0>
					*length = 1;
 800ebc2:	803b      	strh	r3, [r7, #0]
				if (*callback_output != output && output != NULL) {
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	6819      	ldr	r1, [r3, #0]
 800ebc8:	42a1      	cmp	r1, r4
 800ebca:	d005      	beq.n	800ebd8 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xf4>
 800ebcc:	b124      	cbz	r4, 800ebd8 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xf4>
						output[index] = (*callback_output )[index];
 800ebce:	883a      	ldrh	r2, [r7, #0]
 800ebd0:	4620      	mov	r0, r4
 800ebd2:	0092      	lsls	r2, r2, #2
 800ebd4:	f00d fc4e 	bl	801c474 <memcpy>
		if (not success && target_register->mode.pointer) {
 800ebd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800ebdc:	b99b      	cbnz	r3, 800ec06 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
 800ebde:	782b      	ldrb	r3, [r5, #0]
 800ebe0:	b18b      	cbz	r3, 800ec06 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
			success = true;
 800ebe2:	2301      	movs	r3, #1
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800ebe4:	796a      	ldrb	r2, [r5, #5]
			success = true;
 800ebe6:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800ebea:	b35a      	cbz	r2, 800ec44 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x160>
 800ebec:	88ea      	ldrh	r2, [r5, #6]
 800ebee:	bb02      	cbnz	r2, 800ec32 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x14e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ebf0:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ebf4:	1a9b      	subs	r3, r3, r2
 800ebf6:	109b      	asrs	r3, r3, #2
				*length = register_vector->size();
 800ebf8:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 800ebfa:	b124      	cbz	r4, 800ec06 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
 800ebfc:	b29b      	uxth	r3, r3
 800ebfe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
					for (uint16_t index = 0; index < *length; index++) {
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d110      	bne.n	800ec28 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x144>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800ec06:	f1bb 0f00 	cmp.w	fp, #0
 800ec0a:	d004      	beq.n	800ec16 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x132>
 800ec0c:	68eb      	ldr	r3, [r5, #12]
 800ec0e:	b113      	cbz	r3, 800ec16 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x132>
			osSemaphoreRelease(*(target_register->register_semaphore));
 800ec10:	6818      	ldr	r0, [r3, #0]
 800ec12:	f7fd fdf3 	bl	800c7fc <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 800ec16:	9b00      	ldr	r3, [sp, #0]
 800ec18:	6818      	ldr	r0, [r3, #0]
 800ec1a:	f7fd fdef 	bl	800c7fc <osSemaphoreRelease>
	return true;
 800ec1e:	e780      	b.n	800eb22 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x3e>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 800ec20:	aa04      	add	r2, sp, #16
 800ec22:	e7bf      	b.n	800eba4 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xc0>
					*length = 1;
 800ec24:	2301      	movs	r3, #1
 800ec26:	e7cc      	b.n	800ebc2 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xde>
						output[index] = (*register_vector)[index];
 800ec28:	f852 1b04 	ldr.w	r1, [r2], #4
 800ec2c:	f844 1b04 	str.w	r1, [r4], #4
					for (uint16_t index = 0; index < *length; index++) {
 800ec30:	e7e7      	b.n	800ec02 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x11e>
				*length = target_register->register_info.length;
 800ec32:	803a      	strh	r2, [r7, #0]
				if (output != NULL) {
 800ec34:	2c00      	cmp	r4, #0
 800ec36:	d0e6      	beq.n	800ec06 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
 800ec38:	0092      	lsls	r2, r2, #2
 800ec3a:	4641      	mov	r1, r8
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	f00d fb21 	bl	801c284 <memmove>
	  return __result + _Num;
 800ec42:	e7e0      	b.n	800ec06 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
				*length = 1;
 800ec44:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 800ec46:	2c00      	cmp	r4, #0
 800ec48:	d0dd      	beq.n	800ec06 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
					*output = *callbacks.pointer;
 800ec4a:	f8d8 3000 	ldr.w	r3, [r8]
 800ec4e:	6023      	str	r3, [r4, #0]
 800ec50:	e7d9      	b.n	800ec06 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
 800ec52:	bf00      	nop
 800ec54:	0801c5c6 	.word	0x0801c5c6

0800ec58 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>:
 800ec58:	0089      	lsls	r1, r1, #2
 800ec5a:	f00c bfb7 	b.w	801bbcc <_ZdlPvj>

0800ec5e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 800ec5e:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ec60:	b170      	cbz	r0, 800ec80 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800ec62:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 800ec66:	d306      	bcc.n	800ec76 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800ec68:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ec6c:	d301      	bcc.n	800ec72 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 800ec6e:	f00d f884 	bl	801bd7a <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800ec72:	f00d f87f 	bl	801bd74 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800ec76:	0080      	lsls	r0, r0, #2
      }
 800ec78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ec7c:	f00c bfcb 	b.w	801bc16 <_Znwj>
 800ec80:	bd08      	pop	{r3, pc}

0800ec82 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ec82:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 800ec84:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ec86:	d006      	beq.n	800ec96 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800ec88:	da01      	bge.n	800ec8e <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 800ec8a:	f00d f873 	bl	801bd74 <_ZSt17__throw_bad_allocv>
      }
 800ec8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800ec92:	f00c bfc0 	b.w	801bc16 <_Znwj>
 800ec96:	bd08      	pop	{r3, pc}

0800ec98 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 800ec98:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ec9a:	b170      	cbz	r0, 800ecba <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800ec9c:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 800eca0:	d306      	bcc.n	800ecb0 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800eca2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800eca6:	d301      	bcc.n	800ecac <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 800eca8:	f00d f867 	bl	801bd7a <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800ecac:	f00d f862 	bl	801bd74 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800ecb0:	0080      	lsls	r0, r0, #2
      }
 800ecb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ecb6:	f00c bfae 	b.w	801bc16 <_Znwj>
 800ecba:	bd08      	pop	{r3, pc}

0800ecbc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 800ecbc:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ecbe:	4926      	ldr	r1, [pc, #152]	@ (800ed58 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 800ecc0:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ecc2:	4826      	ldr	r0, [pc, #152]	@ (800ed5c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ecc4:	f00d f83e 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	d133      	bne.n	800ed34 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800eccc:	4924      	ldr	r1, [pc, #144]	@ (800ed60 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa4>)
 800ecce:	4823      	ldr	r0, [pc, #140]	@ (800ed5c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ecd0:	f00d f838 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ecd4:	2800      	cmp	r0, #0
 800ecd6:	d12f      	bne.n	800ed38 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800ecd8:	4922      	ldr	r1, [pc, #136]	@ (800ed64 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa8>)
 800ecda:	4820      	ldr	r0, [pc, #128]	@ (800ed5c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ecdc:	f00d f832 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ece0:	bb60      	cbnz	r0, 800ed3c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800ece2:	4921      	ldr	r1, [pc, #132]	@ (800ed68 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xac>)
 800ece4:	481d      	ldr	r0, [pc, #116]	@ (800ed5c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ece6:	f00d f82d 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ecea:	bb48      	cbnz	r0, 800ed40 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800ecec:	491f      	ldr	r1, [pc, #124]	@ (800ed6c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb0>)
 800ecee:	481b      	ldr	r0, [pc, #108]	@ (800ed5c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ecf0:	f00d f828 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ecf4:	bb30      	cbnz	r0, 800ed44 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800ecf6:	491e      	ldr	r1, [pc, #120]	@ (800ed70 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb4>)
 800ecf8:	4818      	ldr	r0, [pc, #96]	@ (800ed5c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ecfa:	f00d f823 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ecfe:	bb18      	cbnz	r0, 800ed48 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800ed00:	491c      	ldr	r1, [pc, #112]	@ (800ed74 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb8>)
 800ed02:	4816      	ldr	r0, [pc, #88]	@ (800ed5c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ed04:	f00d f81e 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ed08:	bb00      	cbnz	r0, 800ed4c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800ed0a:	491b      	ldr	r1, [pc, #108]	@ (800ed78 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xbc>)
 800ed0c:	4813      	ldr	r0, [pc, #76]	@ (800ed5c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ed0e:	f00d f819 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ed12:	b9e8      	cbnz	r0, 800ed50 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800ed14:	4911      	ldr	r1, [pc, #68]	@ (800ed5c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ed16:	4608      	mov	r0, r1
 800ed18:	f00d f814 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ed1c:	b9d0      	cbnz	r0, 800ed54 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800ed1e:	4917      	ldr	r1, [pc, #92]	@ (800ed7c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xc0>)
 800ed20:	480e      	ldr	r0, [pc, #56]	@ (800ed5c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 800ed22:	f00d f80f 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800ed26:	2800      	cmp	r0, #0
 800ed28:	bf14      	ite	ne
 800ed2a:	2309      	movne	r3, #9
 800ed2c:	2300      	moveq	r3, #0
 800ed2e:	7020      	strb	r0, [r4, #0]
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ed34:	2300      	movs	r3, #0
 800ed36:	e7fa      	b.n	800ed2e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800ed38:	2301      	movs	r3, #1
 800ed3a:	e7f8      	b.n	800ed2e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800ed3c:	2302      	movs	r3, #2
 800ed3e:	e7f6      	b.n	800ed2e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800ed40:	2303      	movs	r3, #3
 800ed42:	e7f4      	b.n	800ed2e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800ed44:	2304      	movs	r3, #4
 800ed46:	e7f2      	b.n	800ed2e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800ed48:	2305      	movs	r3, #5
 800ed4a:	e7f0      	b.n	800ed2e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800ed4c:	2306      	movs	r3, #6
 800ed4e:	e7ee      	b.n	800ed2e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800ed50:	2307      	movs	r3, #7
 800ed52:	e7ec      	b.n	800ed2e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800ed54:	2308      	movs	r3, #8
 800ed56:	e7ea      	b.n	800ed2e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
 800ed58:	0801ca50 	.word	0x0801ca50
 800ed5c:	0801ca18 	.word	0x0801ca18
 800ed60:	0801ca40 	.word	0x0801ca40
 800ed64:	0801ca30 	.word	0x0801ca30
 800ed68:	0801ca20 	.word	0x0801ca20
 800ed6c:	0801ca58 	.word	0x0801ca58
 800ed70:	0801ca48 	.word	0x0801ca48
 800ed74:	0801ca38 	.word	0x0801ca38
 800ed78:	0801ca28 	.word	0x0801ca28
 800ed7c:	0801ca10 	.word	0x0801ca10

0800ed80 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 800ed80:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ed82:	4926      	ldr	r1, [pc, #152]	@ (800ee1c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 800ed84:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ed86:	4826      	ldr	r0, [pc, #152]	@ (800ee20 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800ed88:	f00c ffdc 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ed8c:	2800      	cmp	r0, #0
 800ed8e:	d133      	bne.n	800edf8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800ed90:	4924      	ldr	r1, [pc, #144]	@ (800ee24 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa4>)
 800ed92:	4823      	ldr	r0, [pc, #140]	@ (800ee20 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800ed94:	f00c ffd6 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ed98:	2800      	cmp	r0, #0
 800ed9a:	d12f      	bne.n	800edfc <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800ed9c:	4922      	ldr	r1, [pc, #136]	@ (800ee28 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa8>)
 800ed9e:	4820      	ldr	r0, [pc, #128]	@ (800ee20 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800eda0:	f00c ffd0 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800eda4:	bb60      	cbnz	r0, 800ee00 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800eda6:	4921      	ldr	r1, [pc, #132]	@ (800ee2c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xac>)
 800eda8:	481d      	ldr	r0, [pc, #116]	@ (800ee20 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800edaa:	f00c ffcb 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800edae:	bb48      	cbnz	r0, 800ee04 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800edb0:	491b      	ldr	r1, [pc, #108]	@ (800ee20 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800edb2:	4608      	mov	r0, r1
 800edb4:	f00c ffc6 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800edb8:	bb30      	cbnz	r0, 800ee08 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800edba:	491d      	ldr	r1, [pc, #116]	@ (800ee30 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xb0>)
 800edbc:	4818      	ldr	r0, [pc, #96]	@ (800ee20 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800edbe:	f00c ffc1 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800edc2:	bb18      	cbnz	r0, 800ee0c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800edc4:	491b      	ldr	r1, [pc, #108]	@ (800ee34 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xb4>)
 800edc6:	4816      	ldr	r0, [pc, #88]	@ (800ee20 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800edc8:	f00c ffbc 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800edcc:	bb00      	cbnz	r0, 800ee10 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800edce:	491a      	ldr	r1, [pc, #104]	@ (800ee38 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xb8>)
 800edd0:	4813      	ldr	r0, [pc, #76]	@ (800ee20 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800edd2:	f00c ffb7 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800edd6:	b9e8      	cbnz	r0, 800ee14 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800edd8:	4918      	ldr	r1, [pc, #96]	@ (800ee3c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xbc>)
 800edda:	4811      	ldr	r0, [pc, #68]	@ (800ee20 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800eddc:	f00c ffb2 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ede0:	b9d0      	cbnz	r0, 800ee18 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800ede2:	4917      	ldr	r1, [pc, #92]	@ (800ee40 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xc0>)
 800ede4:	480e      	ldr	r0, [pc, #56]	@ (800ee20 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 800ede6:	f00c ffad 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800edea:	2800      	cmp	r0, #0
 800edec:	bf14      	ite	ne
 800edee:	2309      	movne	r3, #9
 800edf0:	2300      	moveq	r3, #0
 800edf2:	7020      	strb	r0, [r4, #0]
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800edf8:	2300      	movs	r3, #0
 800edfa:	e7fa      	b.n	800edf2 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800edfc:	2301      	movs	r3, #1
 800edfe:	e7f8      	b.n	800edf2 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800ee00:	2302      	movs	r3, #2
 800ee02:	e7f6      	b.n	800edf2 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800ee04:	2303      	movs	r3, #3
 800ee06:	e7f4      	b.n	800edf2 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800ee08:	2304      	movs	r3, #4
 800ee0a:	e7f2      	b.n	800edf2 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800ee0c:	2305      	movs	r3, #5
 800ee0e:	e7f0      	b.n	800edf2 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800ee10:	2306      	movs	r3, #6
 800ee12:	e7ee      	b.n	800edf2 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800ee14:	2307      	movs	r3, #7
 800ee16:	e7ec      	b.n	800edf2 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800ee18:	2308      	movs	r3, #8
 800ee1a:	e7ea      	b.n	800edf2 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
 800ee1c:	0801ca50 	.word	0x0801ca50
 800ee20:	0801ca58 	.word	0x0801ca58
 800ee24:	0801ca40 	.word	0x0801ca40
 800ee28:	0801ca30 	.word	0x0801ca30
 800ee2c:	0801ca20 	.word	0x0801ca20
 800ee30:	0801ca48 	.word	0x0801ca48
 800ee34:	0801ca38 	.word	0x0801ca38
 800ee38:	0801ca28 	.word	0x0801ca28
 800ee3c:	0801ca18 	.word	0x0801ca18
 800ee40:	0801ca10 	.word	0x0801ca10

0800ee44 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 800ee44:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ee46:	4926      	ldr	r1, [pc, #152]	@ (800eee0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 800ee48:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ee4a:	4826      	ldr	r0, [pc, #152]	@ (800eee4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800ee4c:	f00c ff7a 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ee50:	2800      	cmp	r0, #0
 800ee52:	d133      	bne.n	800eebc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800ee54:	4924      	ldr	r1, [pc, #144]	@ (800eee8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa4>)
 800ee56:	4823      	ldr	r0, [pc, #140]	@ (800eee4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800ee58:	f00c ff74 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ee5c:	2800      	cmp	r0, #0
 800ee5e:	d12f      	bne.n	800eec0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800ee60:	4920      	ldr	r1, [pc, #128]	@ (800eee4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800ee62:	4608      	mov	r0, r1
 800ee64:	f00c ff6e 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ee68:	bb60      	cbnz	r0, 800eec4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800ee6a:	4920      	ldr	r1, [pc, #128]	@ (800eeec <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa8>)
 800ee6c:	481d      	ldr	r0, [pc, #116]	@ (800eee4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800ee6e:	f00c ff69 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ee72:	bb48      	cbnz	r0, 800eec8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800ee74:	491e      	ldr	r1, [pc, #120]	@ (800eef0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xac>)
 800ee76:	481b      	ldr	r0, [pc, #108]	@ (800eee4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800ee78:	f00c ff64 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ee7c:	bb30      	cbnz	r0, 800eecc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800ee7e:	491d      	ldr	r1, [pc, #116]	@ (800eef4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb0>)
 800ee80:	4818      	ldr	r0, [pc, #96]	@ (800eee4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800ee82:	f00c ff5f 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ee86:	bb18      	cbnz	r0, 800eed0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800ee88:	491b      	ldr	r1, [pc, #108]	@ (800eef8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb4>)
 800ee8a:	4816      	ldr	r0, [pc, #88]	@ (800eee4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800ee8c:	f00c ff5a 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ee90:	bb00      	cbnz	r0, 800eed4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800ee92:	491a      	ldr	r1, [pc, #104]	@ (800eefc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb8>)
 800ee94:	4813      	ldr	r0, [pc, #76]	@ (800eee4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800ee96:	f00c ff55 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800ee9a:	b9e8      	cbnz	r0, 800eed8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800ee9c:	4918      	ldr	r1, [pc, #96]	@ (800ef00 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xbc>)
 800ee9e:	4811      	ldr	r0, [pc, #68]	@ (800eee4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800eea0:	f00c ff50 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800eea4:	b9d0      	cbnz	r0, 800eedc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800eea6:	4917      	ldr	r1, [pc, #92]	@ (800ef04 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xc0>)
 800eea8:	480e      	ldr	r0, [pc, #56]	@ (800eee4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 800eeaa:	f00c ff4b 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800eeae:	2800      	cmp	r0, #0
 800eeb0:	bf14      	ite	ne
 800eeb2:	2309      	movne	r3, #9
 800eeb4:	2300      	moveq	r3, #0
 800eeb6:	7020      	strb	r0, [r4, #0]
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800eebc:	2300      	movs	r3, #0
 800eebe:	e7fa      	b.n	800eeb6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800eec0:	2301      	movs	r3, #1
 800eec2:	e7f8      	b.n	800eeb6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800eec4:	2302      	movs	r3, #2
 800eec6:	e7f6      	b.n	800eeb6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800eec8:	2303      	movs	r3, #3
 800eeca:	e7f4      	b.n	800eeb6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800eecc:	2304      	movs	r3, #4
 800eece:	e7f2      	b.n	800eeb6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800eed0:	2305      	movs	r3, #5
 800eed2:	e7f0      	b.n	800eeb6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800eed4:	2306      	movs	r3, #6
 800eed6:	e7ee      	b.n	800eeb6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800eed8:	2307      	movs	r3, #7
 800eeda:	e7ec      	b.n	800eeb6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800eedc:	2308      	movs	r3, #8
 800eede:	e7ea      	b.n	800eeb6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
 800eee0:	0801ca50 	.word	0x0801ca50
 800eee4:	0801ca30 	.word	0x0801ca30
 800eee8:	0801ca40 	.word	0x0801ca40
 800eeec:	0801ca20 	.word	0x0801ca20
 800eef0:	0801ca58 	.word	0x0801ca58
 800eef4:	0801ca48 	.word	0x0801ca48
 800eef8:	0801ca38 	.word	0x0801ca38
 800eefc:	0801ca28 	.word	0x0801ca28
 800ef00:	0801ca18 	.word	0x0801ca18
 800ef04:	0801ca10 	.word	0x0801ca10

0800ef08 <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0>:
 * @param input from: base pointer to copy data from
 * @param output to: base pointer to copy data to
 * @param input length: number of elements to copy
 */
template<typename T>
void Services::TranferData(T* from, T* to, uint16_t length) {
 800ef08:	eb00 0282 	add.w	r2, r0, r2, lsl #2
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800ef0c:	4290      	cmp	r0, r2
 800ef0e:	d100      	bne.n	800ef12 <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0+0xa>
		to[buffer_index] = from[buffer_index];
	}
}
 800ef10:	4770      	bx	lr
		to[buffer_index] = from[buffer_index];
 800ef12:	f850 3b04 	ldr.w	r3, [r0], #4
 800ef16:	f841 3b04 	str.w	r3, [r1], #4
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800ef1a:	e7f7      	b.n	800ef0c <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0+0x4>

0800ef1c <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0>:
void Services::TranferData(T* from, T* to, uint16_t length) {
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	b510      	push	{r4, lr}
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800ef20:	b29c      	uxth	r4, r3
 800ef22:	42a2      	cmp	r2, r4
 800ef24:	d800      	bhi.n	800ef28 <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0+0xc>
}
 800ef26:	bd10      	pop	{r4, pc}
		to[buffer_index] = from[buffer_index];
 800ef28:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800ef2c:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800ef30:	3301      	adds	r3, #1
 800ef32:	e7f5      	b.n	800ef20 <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0+0x4>

0800ef34 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>:
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ef34:	e9d0 3000 	ldrd	r3, r0, [r0]
 * @param input start_index: the index to start the extraction
 * @param output success: whether successful
 * @return the typed extracted value
 */
template<typename T>
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 800ef38:	b510      	push	{r4, lr}
 800ef3a:	1ac0      	subs	r0, r0, r3
	uint64_t data = 0;
	uint8_t type_length = sizeof(T);

	// Check payload length
	if (payload.size() < start_index + type_length) {
 800ef3c:	1d0c      	adds	r4, r1, #4
 800ef3e:	42a0      	cmp	r0, r4
 800ef40:	d310      	bcc.n	800ef64 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x30>
 800ef42:	4419      	add	r1, r3
 800ef44:	2018      	movs	r0, #24
	uint64_t data = 0;
 800ef46:	2300      	movs	r3, #0
		return 0;
	}

	// Fill a uint64 variable
	for (uint8_t index = 0; index < type_length; index++) {
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 800ef48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef4c:	4084      	lsls	r4, r0
	for (uint8_t index = 0; index < type_length; index++) {
 800ef4e:	3808      	subs	r0, #8
 800ef50:	f110 0f08 	cmn.w	r0, #8
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 800ef54:	ea43 0304 	orr.w	r3, r3, r4
	for (uint8_t index = 0; index < type_length; index++) {
 800ef58:	d1f6      	bne.n	800ef48 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x14>
	// Recast to the expected type
    T* reinterpreted_data = reinterpret_cast<T*>(&data);

    // Return data
    *success = true;
	return *reinterpreted_data;
 800ef5a:	ee00 3a10 	vmov	s0, r3
 800ef5e:	2301      	movs	r3, #1
		*success = false;
 800ef60:	7013      	strb	r3, [r2, #0]
}
 800ef62:	bd10      	pop	{r4, pc}
 800ef64:	2300      	movs	r3, #0
		return 0;
 800ef66:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ef6c <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x38>
 800ef6a:	e7f9      	b.n	800ef60 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x2c>
 800ef6c:	00000000 	.word	0x00000000

0800ef70 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>:
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 800ef70:	b510      	push	{r4, lr}
 800ef72:	e9d0 4300 	ldrd	r4, r3, [r0]
	if (payload.size() < start_index + type_length) {
 800ef76:	1c48      	adds	r0, r1, #1
 800ef78:	1b1b      	subs	r3, r3, r4
 800ef7a:	4283      	cmp	r3, r0
		*success = false;
 800ef7c:	bf33      	iteet	cc
 800ef7e:	2300      	movcc	r3, #0
    *success = true;
 800ef80:	2301      	movcs	r3, #1
	return *reinterpreted_data;
 800ef82:	5660      	ldrsbcs	r0, [r4, r1]
		return 0;
 800ef84:	4618      	movcc	r0, r3
 800ef86:	7013      	strb	r3, [r2, #0]
}
 800ef88:	bd10      	pop	{r4, pc}

0800ef8a <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>:
 800ef8a:	e9d0 3000 	ldrd	r3, r0, [r0]
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 800ef8e:	b510      	push	{r4, lr}
 800ef90:	1ac0      	subs	r0, r0, r3
	if (payload.size() < start_index + type_length) {
 800ef92:	1d0c      	adds	r4, r1, #4
 800ef94:	42a0      	cmp	r0, r4
 800ef96:	d30e      	bcc.n	800efb6 <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0+0x2c>
 800ef98:	4419      	add	r1, r3
	uint64_t data = 0;
 800ef9a:	2000      	movs	r0, #0
	if (payload.size() < start_index + type_length) {
 800ef9c:	2318      	movs	r3, #24
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 800ef9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efa2:	409c      	lsls	r4, r3
	for (uint8_t index = 0; index < type_length; index++) {
 800efa4:	3b08      	subs	r3, #8
 800efa6:	f113 0f08 	cmn.w	r3, #8
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 800efaa:	ea40 0004 	orr.w	r0, r0, r4
	for (uint8_t index = 0; index < type_length; index++) {
 800efae:	d1f6      	bne.n	800ef9e <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0+0x14>
	return *reinterpreted_data;
 800efb0:	2301      	movs	r3, #1
		*success = false;
 800efb2:	7013      	strb	r3, [r2, #0]
}
 800efb4:	bd10      	pop	{r4, pc}
 800efb6:	2300      	movs	r3, #0
		return 0;
 800efb8:	4618      	mov	r0, r3
 800efba:	e7fa      	b.n	800efb2 <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0+0x28>

0800efbc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>:
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 800efbc:	b510      	push	{r4, lr}
 800efbe:	e9d0 4300 	ldrd	r4, r3, [r0]
	if (payload.size() < start_index + type_length) {
 800efc2:	1c48      	adds	r0, r1, #1
 800efc4:	1b1b      	subs	r3, r3, r4
 800efc6:	4283      	cmp	r3, r0
		*success = false;
 800efc8:	bf33      	iteet	cc
 800efca:	2300      	movcc	r3, #0
    *success = true;
 800efcc:	2301      	movcs	r3, #1
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 800efce:	5c60      	ldrbcs	r0, [r4, r1]
		return 0;
 800efd0:	4618      	movcc	r0, r3
 800efd2:	7013      	strb	r3, [r2, #0]
}
 800efd4:	bd10      	pop	{r4, pc}

0800efd6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800efd6:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 800efd8:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800efda:	d006      	beq.n	800efea <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800efdc:	da01      	bge.n	800efe2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 800efde:	f00c fec9 	bl	801bd74 <_ZSt17__throw_bad_allocv>
      }
 800efe2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800efe6:	f00c be16 	b.w	801bc16 <_Znwj>
 800efea:	bd08      	pop	{r3, pc}

0800efec <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800efec:	4926      	ldr	r1, [pc, #152]	@ (800f088 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 800efee:	b510      	push	{r4, lr}
 800eff0:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800eff2:	4608      	mov	r0, r1
 800eff4:	f00c fea6 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800eff8:	2800      	cmp	r0, #0
 800effa:	d133      	bne.n	800f064 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800effc:	4923      	ldr	r1, [pc, #140]	@ (800f08c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa0>)
 800effe:	4822      	ldr	r0, [pc, #136]	@ (800f088 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800f000:	f00c fea0 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800f004:	2800      	cmp	r0, #0
 800f006:	d12f      	bne.n	800f068 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f008:	4921      	ldr	r1, [pc, #132]	@ (800f090 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa4>)
 800f00a:	481f      	ldr	r0, [pc, #124]	@ (800f088 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800f00c:	f00c fe9a 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800f010:	bb60      	cbnz	r0, 800f06c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f012:	4920      	ldr	r1, [pc, #128]	@ (800f094 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa8>)
 800f014:	481c      	ldr	r0, [pc, #112]	@ (800f088 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800f016:	f00c fe95 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800f01a:	bb48      	cbnz	r0, 800f070 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f01c:	491e      	ldr	r1, [pc, #120]	@ (800f098 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xac>)
 800f01e:	481a      	ldr	r0, [pc, #104]	@ (800f088 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800f020:	f00c fe90 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800f024:	bb30      	cbnz	r0, 800f074 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800f026:	491d      	ldr	r1, [pc, #116]	@ (800f09c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb0>)
 800f028:	4817      	ldr	r0, [pc, #92]	@ (800f088 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800f02a:	f00c fe8b 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800f02e:	bb18      	cbnz	r0, 800f078 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f030:	491b      	ldr	r1, [pc, #108]	@ (800f0a0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb4>)
 800f032:	4815      	ldr	r0, [pc, #84]	@ (800f088 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800f034:	f00c fe86 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800f038:	bb00      	cbnz	r0, 800f07c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800f03a:	491a      	ldr	r1, [pc, #104]	@ (800f0a4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb8>)
 800f03c:	4812      	ldr	r0, [pc, #72]	@ (800f088 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800f03e:	f00c fe81 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800f042:	b9e8      	cbnz	r0, 800f080 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f044:	4918      	ldr	r1, [pc, #96]	@ (800f0a8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xbc>)
 800f046:	4810      	ldr	r0, [pc, #64]	@ (800f088 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800f048:	f00c fe7c 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 800f04c:	b9d0      	cbnz	r0, 800f084 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800f04e:	4917      	ldr	r1, [pc, #92]	@ (800f0ac <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xc0>)
 800f050:	480d      	ldr	r0, [pc, #52]	@ (800f088 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 800f052:	f00c fe77 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800f056:	2800      	cmp	r0, #0
 800f058:	bf14      	ite	ne
 800f05a:	2309      	movne	r3, #9
 800f05c:	2300      	moveq	r3, #0
 800f05e:	7020      	strb	r0, [r4, #0]
}
 800f060:	4618      	mov	r0, r3
 800f062:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f064:	2300      	movs	r3, #0
 800f066:	e7fa      	b.n	800f05e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f068:	2301      	movs	r3, #1
 800f06a:	e7f8      	b.n	800f05e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f06c:	2302      	movs	r3, #2
 800f06e:	e7f6      	b.n	800f05e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f070:	2303      	movs	r3, #3
 800f072:	e7f4      	b.n	800f05e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f074:	2304      	movs	r3, #4
 800f076:	e7f2      	b.n	800f05e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 800f078:	2305      	movs	r3, #5
 800f07a:	e7f0      	b.n	800f05e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f07c:	2306      	movs	r3, #6
 800f07e:	e7ee      	b.n	800f05e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 800f080:	2307      	movs	r3, #7
 800f082:	e7ec      	b.n	800f05e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f084:	2308      	movs	r3, #8
 800f086:	e7ea      	b.n	800f05e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
 800f088:	0801ca50 	.word	0x0801ca50
 800f08c:	0801ca40 	.word	0x0801ca40
 800f090:	0801ca30 	.word	0x0801ca30
 800f094:	0801ca20 	.word	0x0801ca20
 800f098:	0801ca58 	.word	0x0801ca58
 800f09c:	0801ca48 	.word	0x0801ca48
 800f0a0:	0801ca38 	.word	0x0801ca38
 800f0a4:	0801ca28 	.word	0x0801ca28
 800f0a8:	0801ca18 	.word	0x0801ca18
 800f0ac:	0801ca10 	.word	0x0801ca10

0800f0b0 <_ZN13CommunicationC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800f0b6:	e9c0 2208 	strd	r2, r2, [r0, #32]
 800f0ba:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 800f0be:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
 800f0c2:	6382      	str	r2, [r0, #56]	@ 0x38

/**
 * @brief class Constructor
 */
Communication::Communication() {
	address = UNKNOWN;
 800f0c4:	22fd      	movs	r2, #253	@ 0xfd
 800f0c6:	7502      	strb	r2, [r0, #20]
}
 800f0c8:	4770      	bx	lr

0800f0ca <_ZN13Communication4InitEP9RegistersP8ServicesP17MasterSubscribersP4LEDS>:
 * @param input registers_: the Registers instance
 * @param input services_: the Services instance
 * @param input subscribers_: the MasterSubscribers instance
 * @param input leds_: the LEDS instance
 */
void Communication::Init(Registers* registers_, Services* services_, MasterSubscribers* subscribers_, LEDS* leds_) {
 800f0ca:	b510      	push	{r4, lr}
	registers = registers_;
	services = services_;
 800f0cc:	e9c0 1201 	strd	r1, r2, [r0, #4]
	subscribers = subscribers_;
 800f0d0:	60c3      	str	r3, [r0, #12]
	leds = leds_;

	CommunicationSemaphore = osSemaphoreNew(1,1,NULL);
 800f0d2:	2101      	movs	r1, #1
	leds = leds_;
 800f0d4:	9b02      	ldr	r3, [sp, #8]
void Communication::Init(Registers* registers_, Services* services_, MasterSubscribers* subscribers_, LEDS* leds_) {
 800f0d6:	4604      	mov	r4, r0
	CommunicationSemaphore = osSemaphoreNew(1,1,NULL);
 800f0d8:	2200      	movs	r2, #0
	leds = leds_;
 800f0da:	6103      	str	r3, [r0, #16]
	CommunicationSemaphore = osSemaphoreNew(1,1,NULL);
 800f0dc:	4608      	mov	r0, r1
 800f0de:	f7fd fafd 	bl	800c6dc <osSemaphoreNew>
 800f0e2:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(CommunicationSemaphore);
}
 800f0e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(CommunicationSemaphore);
 800f0e8:	f7fd bb88 	b.w	800c7fc <osSemaphoreRelease>

0800f0ec <_ZN13Communication12FindProtocolEhPb>:
 *
 * @param input ID: the protocol ID to find
 * @param output success: true if protocol found
 * @return the protocol pointer
 */
CommunicationProtocol* Communication::FindProtocol(uint8_t ID, bool* success) {
 800f0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f0:	460e      	mov	r6, r1
 800f0f2:	4615      	mov	r5, r2
 800f0f4:	e9d0 4809 	ldrd	r4, r8, [r0, #36]	@ 0x24
	for (CommunicationProtocol* &protocol : protocols) {
 800f0f8:	45a0      	cmp	r8, r4
 800f0fa:	4627      	mov	r7, r4
 800f0fc:	d102      	bne.n	800f104 <_ZN13Communication12FindProtocolEhPb+0x18>
 800f0fe:	2300      	movs	r3, #0
			*success = true;
			return protocol_pointer;
		}
	}
	*success = false;
	return NULL;
 800f100:	4618      	mov	r0, r3
 800f102:	e008      	b.n	800f116 <_ZN13Communication12FindProtocolEhPb+0x2a>
		if (protocol->InterfaceExists(ID)) {
 800f104:	4631      	mov	r1, r6
 800f106:	6838      	ldr	r0, [r7, #0]
 800f108:	f006 fc19 	bl	801593e <_ZN21CommunicationProtocol15InterfaceExistsEh>
 800f10c:	3404      	adds	r4, #4
 800f10e:	4603      	mov	r3, r0
 800f110:	2800      	cmp	r0, #0
 800f112:	d0f1      	beq.n	800f0f8 <_ZN13Communication12FindProtocolEhPb+0xc>
			CommunicationProtocol* protocol_pointer = protocol;
 800f114:	6838      	ldr	r0, [r7, #0]
			*success = true;
 800f116:	702b      	strb	r3, [r5, #0]
}
 800f118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f11c <_ZN13Communication16InGroupAddressesEh>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800f11c:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 *
 * @param input address: a 8-bit address
 * @return true if the input adddress is part of the group addresses
 */
bool Communication::InGroupAddresses(uint8_t address) {
	for (uint8_t group_address : group_addresses) {
 800f120:	4293      	cmp	r3, r2
 800f122:	d101      	bne.n	800f128 <_ZN13Communication16InGroupAddressesEh+0xc>
		if (group_address == address) return true;
	}
	return false;
 800f124:	2000      	movs	r0, #0
 800f126:	4770      	bx	lr
	for (uint8_t group_address : group_addresses) {
 800f128:	f813 0b01 	ldrb.w	r0, [r3], #1
		if (group_address == address) return true;
 800f12c:	4288      	cmp	r0, r1
 800f12e:	d1f7      	bne.n	800f120 <_ZN13Communication16InGroupAddressesEh+0x4>
 800f130:	2001      	movs	r0, #1
}
 800f132:	4770      	bx	lr

0800f134 <_ZN13Communication13AcceptMessageE13MessageHeader>:
	return (message.target_address == ALL || message.target_address == address || InGroupAddresses(message.target_address));
 800f134:	7c09      	ldrb	r1, [r1, #16]
 800f136:	29ff      	cmp	r1, #255	@ 0xff
 800f138:	d004      	beq.n	800f144 <_ZN13Communication13AcceptMessageE13MessageHeader+0x10>
 800f13a:	7d03      	ldrb	r3, [r0, #20]
 800f13c:	428b      	cmp	r3, r1
 800f13e:	d001      	beq.n	800f144 <_ZN13Communication13AcceptMessageE13MessageHeader+0x10>
 800f140:	f7ff bfec 	b.w	800f11c <_ZN13Communication16InGroupAddressesEh>
}
 800f144:	2001      	movs	r0, #1
 800f146:	4770      	bx	lr

0800f148 <_ZN13Communication5GetIDEPvPb>:
 *
 * @param input handle: base pointer of an hardware interface
 * @param output success: return true if the protocol has been successfully found
 * @return the registered interface ID of the input hardware handle
 */
uint8_t Communication::GetID(void* handle, bool* success) {
 800f148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f14a:	460e      	mov	r6, r1
 800f14c:	4614      	mov	r4, r2
 800f14e:	e9d0 5709 	ldrd	r5, r7, [r0, #36]	@ 0x24
	uint8_t ID;
	for (CommunicationProtocol* protocol : protocols) {
 800f152:	42af      	cmp	r7, r5
 800f154:	d101      	bne.n	800f15a <_ZN13Communication5GetIDEPvPb+0x12>
		ID = protocol->GetID(handle, success);
		if (*success)
			return ID;
	}
	return 0;
 800f156:	2000      	movs	r0, #0
 800f158:	e009      	b.n	800f16e <_ZN13Communication5GetIDEPvPb+0x26>
	for (CommunicationProtocol* protocol : protocols) {
 800f15a:	f855 0b04 	ldr.w	r0, [r5], #4
		ID = protocol->GetID(handle, success);
 800f15e:	4622      	mov	r2, r4
 800f160:	4631      	mov	r1, r6
 800f162:	6803      	ldr	r3, [r0, #0]
 800f164:	68db      	ldr	r3, [r3, #12]
 800f166:	4798      	blx	r3
		if (*success)
 800f168:	7823      	ldrb	r3, [r4, #0]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d0f1      	beq.n	800f152 <_ZN13Communication5GetIDEPvPb+0xa>
}
 800f16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f170 <_ZN13Communication9GetBufferEhPb>:
 *
 * @param input ID: the interface ID
 * @param output success: return true if the memory pointer successfully found
 * @return the memory pointer allocated to the hardware interface
 */
std::vector<uint8_t>* Communication::GetBuffer(uint8_t ID, bool* success) {
 800f170:	b538      	push	{r3, r4, r5, lr}
 800f172:	460c      	mov	r4, r1
 800f174:	4615      	mov	r5, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 800f176:	f7ff ffb9 	bl	800f0ec <_ZN13Communication12FindProtocolEhPb>
	if (*success) {
		std::vector<uint8_t>* buffer = protocol->GetBuffer(ID, success);
 800f17a:	462a      	mov	r2, r5
 800f17c:	4621      	mov	r1, r4
		if (*success)
			return buffer;
	}
}
 800f17e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		std::vector<uint8_t>* buffer = protocol->GetBuffer(ID, success);
 800f182:	f006 bbf3 	b.w	801596c <_ZN21CommunicationProtocol9GetBufferEhPb>

0800f186 <_ZN13Communication14GetBufferIndexEhPb>:
 *
 * @param input ID: the interface ID
 * @param output success: return true if the index has been successfully found
 * @return the pointer to the index variable
 */
uint16_t* Communication::GetBufferIndex(uint8_t ID, bool* success) {
 800f186:	b538      	push	{r3, r4, r5, lr}
 800f188:	4614      	mov	r4, r2
 800f18a:	460d      	mov	r5, r1
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 800f18c:	f7ff ffae 	bl	800f0ec <_ZN13Communication12FindProtocolEhPb>
	if (*success) {
 800f190:	7823      	ldrb	r3, [r4, #0]
 800f192:	b12b      	cbz	r3, 800f1a0 <_ZN13Communication14GetBufferIndexEhPb+0x1a>
		uint16_t* buffer_index = protocol->GetBufferIndex(ID, success);
 800f194:	4622      	mov	r2, r4
 800f196:	4629      	mov	r1, r5
 800f198:	f006 fbf6 	bl	8015988 <_ZN21CommunicationProtocol14GetBufferIndexEhPb>
		if (*success)
 800f19c:	7823      	ldrb	r3, [r4, #0]
 800f19e:	b903      	cbnz	r3, 800f1a2 <_ZN13Communication14GetBufferIndexEhPb+0x1c>
			return buffer_index;
	}
	return NULL;
 800f1a0:	2000      	movs	r0, #0
}
 800f1a2:	bd38      	pop	{r3, r4, r5, pc}

0800f1a4 <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb>:
 *
 * @param input ID: the protocol ID
 * @param output success: return true if protocol found
 * @return the maximum payload size of the input protocol
 */
uint16_t Communication::GetProtocolPayloadMaxLength(uint8_t ID, bool* success) {
 800f1a4:	b510      	push	{r4, lr}
 800f1a6:	4614      	mov	r4, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 800f1a8:	f7ff ffa0 	bl	800f0ec <_ZN13Communication12FindProtocolEhPb>
	if (not *success)
 800f1ac:	7823      	ldrb	r3, [r4, #0]
 800f1ae:	b11b      	cbz	r3, 800f1b8 <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb+0x14>
		return 0;

	return protocol->GetProtocolPayloadMaxLength();
}
 800f1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return protocol->GetProtocolPayloadMaxLength();
 800f1b4:	f006 bbf6 	b.w	80159a4 <_ZN21CommunicationProtocol27GetProtocolPayloadMaxLengthEv>
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	bd10      	pop	{r4, pc}

0800f1bc <_ZN13Communication17ActivateReceptionEh>:
 * @brief Activate the hardware reading of the input protocol
 *
 * @param input ID: the protocol ID
 * @return the status of the reading activation request
 */
HAL_StatusTypeDef Communication::ActivateReception(uint8_t ID) {
 800f1bc:	b513      	push	{r0, r1, r4, lr}
	bool success;
	CommunicationProtocol* protocol = FindProtocol(ID, &success);
 800f1be:	f10d 0207 	add.w	r2, sp, #7
HAL_StatusTypeDef Communication::ActivateReception(uint8_t ID) {
 800f1c2:	460c      	mov	r4, r1
	CommunicationProtocol* protocol = FindProtocol(ID, &success);
 800f1c4:	f7ff ff92 	bl	800f0ec <_ZN13Communication12FindProtocolEhPb>
	if (not success) return HAL_ERROR;
 800f1c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f1cc:	b132      	cbz	r2, 800f1dc <_ZN13Communication17ActivateReceptionEh+0x20>
	return protocol->ActivateReception(ID);
 800f1ce:	6803      	ldr	r3, [r0, #0]
 800f1d0:	4621      	mov	r1, r4
 800f1d2:	685b      	ldr	r3, [r3, #4]
}
 800f1d4:	b002      	add	sp, #8
 800f1d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return protocol->ActivateReception(ID);
 800f1da:	4718      	bx	r3
}
 800f1dc:	2001      	movs	r0, #1
 800f1de:	b002      	add	sp, #8
 800f1e0:	bd10      	pop	{r4, pc}

0800f1e2 <_ZN13Communication16SetModuleAddressEh>:
 * @brief Set the module address
 *
 * @param input address_: the new module address
 * @return whether successful
 */
bool Communication::SetModuleAddress(uint8_t address_) {
 800f1e2:	b538      	push	{r3, r4, r5, lr}
 800f1e4:	4604      	mov	r4, r0
 800f1e6:	460d      	mov	r5, r1
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800f1e8:	6800      	ldr	r0, [r0, #0]
 800f1ea:	f04f 31ff 	mov.w	r1, #4294967295
 800f1ee:	f7fd fad1 	bl	800c794 <osSemaphoreAcquire>
	address = address_;
	osSemaphoreRelease(CommunicationSemaphore);
 800f1f2:	6820      	ldr	r0, [r4, #0]
	address = address_;
 800f1f4:	7525      	strb	r5, [r4, #20]
	osSemaphoreRelease(CommunicationSemaphore);
 800f1f6:	f7fd fb01 	bl	800c7fc <osSemaphoreRelease>
	return true;
}
 800f1fa:	2001      	movs	r0, #1
 800f1fc:	bd38      	pop	{r3, r4, r5, pc}

0800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f1fe:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 800f200:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f202:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 800f204:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 800f206:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 800f20a:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 800f20c:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f20e:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 800f210:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 800f212:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f214:	688d      	ldr	r5, [r1, #8]
 800f216:	6085      	str	r5, [r0, #8]
      }
 800f218:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 800f21a:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 800f21c:	e9c1 3300 	strd	r3, r3, [r1]
 800f220:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 800f224:	f7f1 fcf0 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      }
 800f228:	b005      	add	sp, #20
 800f22a:	bd30      	pop	{r4, r5, pc}

0800f22c <_ZNSt6vectorIhSaIhEE5clearEv>:
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800f22c:	e9d0 3200 	ldrd	r3, r2, [r0]
 800f230:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
 800f232:	bf18      	it	ne
 800f234:	6043      	strne	r3, [r0, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800f236:	4770      	bx	lr

0800f238 <_ZN13Communication17ClearGroupAddressEv>:
/**
 * @brief Clear the list of group addresses
 *
 * @return whether successful
 */
bool Communication::ClearGroupAddress(void) {
 800f238:	b538      	push	{r3, r4, r5, lr}
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800f23a:	4605      	mov	r5, r0
bool Communication::ClearGroupAddress(void) {
 800f23c:	4604      	mov	r4, r0
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800f23e:	f04f 31ff 	mov.w	r1, #4294967295
 800f242:	f855 0b18 	ldr.w	r0, [r5], #24
 800f246:	f7fd faa5 	bl	800c794 <osSemaphoreAcquire>
	group_addresses.clear();
 800f24a:	4628      	mov	r0, r5
 800f24c:	f7ff ffee 	bl	800f22c <_ZNSt6vectorIhSaIhEE5clearEv>
	osSemaphoreRelease(CommunicationSemaphore);
 800f250:	6820      	ldr	r0, [r4, #0]
 800f252:	f7fd fad3 	bl	800c7fc <osSemaphoreRelease>
	return true;
}
 800f256:	2001      	movs	r0, #1
 800f258:	bd38      	pop	{r3, r4, r5, pc}

0800f25a <_ZZN13Communication12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			return self->ClearGroupAddress();
 800f25a:	f7ff bfed 	b.w	800f238 <_ZN13Communication17ClearGroupAddressEv>
	...

0800f260 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>:
      at(size_type __n)
 800f260:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f262:	e9d0 5400 	ldrd	r5, r4, [r0]
 800f266:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 800f268:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f26c:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 800f270:	d302      	bcc.n	800f278 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800f272:	4803      	ldr	r0, [pc, #12]	@ (800f280 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj+0x20>)
 800f274:	f00c fd87 	bl	801bd86 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800f278:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 800f27c:	bd38      	pop	{r3, r4, r5, pc}
 800f27e:	bf00      	nop
 800f280:	0801c5c6 	.word	0x0801c5c6

0800f284 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 800f284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return __normal_iterator(_M_current + __n); }
 800f286:	f101 0314 	add.w	r3, r1, #20
      : _M_current(__i) { }
 800f28a:	6844      	ldr	r4, [r0, #4]
 800f28c:	4607      	mov	r7, r0
 800f28e:	460e      	mov	r6, r1
      if (__position + 1 != end())
 800f290:	429c      	cmp	r4, r3
 800f292:	d008      	beq.n	800f2a6 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x22>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800f294:	1ae4      	subs	r4, r4, r3
 800f296:	4b10      	ldr	r3, [pc, #64]	@ (800f2d8 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x54>)
 800f298:	1d08      	adds	r0, r1, #4
 800f29a:	10a4      	asrs	r4, r4, #2
 800f29c:	435c      	muls	r4, r3
 800f29e:	2c00      	cmp	r4, #0
 800f2a0:	f100 0514 	add.w	r5, r0, #20
 800f2a4:	dc08      	bgt.n	800f2b8 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x34>
      --this->_M_impl._M_finish;
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f1a0 0314 	sub.w	r3, r0, #20
      }
 800f2ac:	3810      	subs	r0, #16
 800f2ae:	607b      	str	r3, [r7, #4]
 800f2b0:	f7f1 fcaa 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
    }
 800f2b4:	4630      	mov	r0, r6
 800f2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
struct MessageHeader {
 800f2b8:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 800f2bc:	4629      	mov	r1, r5
 800f2be:	3c01      	subs	r4, #1
 800f2c0:	f805 3c18 	strb.w	r3, [r5, #-24]
 800f2c4:	f7ff ff9b 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 800f2c8:	7b2b      	ldrb	r3, [r5, #12]
 800f2ca:	4628      	mov	r0, r5
 800f2cc:	f805 3c08 	strb.w	r3, [r5, #-8]
 800f2d0:	7b6b      	ldrb	r3, [r5, #13]
 800f2d2:	f805 3c07 	strb.w	r3, [r5, #-7]
 800f2d6:	e7e2      	b.n	800f29e <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x1a>
 800f2d8:	cccccccd 	.word	0xcccccccd

0800f2dc <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800f2dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f2e0:	e9d0 8a00 	ldrd	r8, sl, [r0]
 800f2e4:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 800f2e6:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f2ea:	ebaa 0208 	sub.w	r2, sl, r8
 800f2ee:	4607      	mov	r7, r0
 800f2f0:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 800f2f2:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f2f6:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 800f2fa:	d102      	bne.n	800f302 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 800f2fc:	481f      	ldr	r0, [pc, #124]	@ (800f37c <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>)
 800f2fe:	f00c fd3f 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 800f302:	45c2      	cmp	sl, r8
 800f304:	bf14      	ite	ne
 800f306:	4622      	movne	r2, r4
 800f308:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 800f30a:	eba1 0508 	sub.w	r5, r1, r8
 800f30e:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f310:	d22f      	bcs.n	800f372 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f312:	b384      	cbz	r4, 800f376 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f314:	429c      	cmp	r4, r3
 800f316:	bf28      	it	cs
 800f318:	461c      	movcs	r4, r3
 800f31a:	00a0      	lsls	r0, r4, #2
 800f31c:	f00c fc7b 	bl	801bc16 <_Znwj>
 800f320:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f322:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 800f326:	2d00      	cmp	r5, #0
 800f328:	5173      	str	r3, [r6, r5]
 800f32a:	dd04      	ble.n	800f336 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800f32c:	462a      	mov	r2, r5
 800f32e:	4641      	mov	r1, r8
 800f330:	4630      	mov	r0, r6
 800f332:	f00c ffa7 	bl	801c284 <memmove>
      ptrdiff_t __count = __last - __first;
 800f336:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 800f33a:	3504      	adds	r5, #4
      if (__count > 0)
 800f33c:	f1ba 0f00 	cmp.w	sl, #0
 800f340:	4435      	add	r5, r6
 800f342:	dd04      	ble.n	800f34e <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800f344:	4652      	mov	r2, sl
 800f346:	4649      	mov	r1, r9
 800f348:	4628      	mov	r0, r5
 800f34a:	f00d f893 	bl	801c474 <memcpy>
      return __result + __count;
 800f34e:	4455      	add	r5, sl
	if (__p)
 800f350:	f1b8 0f00 	cmp.w	r8, #0
 800f354:	d006      	beq.n	800f364 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x88>
		    this->_M_impl._M_end_of_storage - __old_start);
 800f356:	68b9      	ldr	r1, [r7, #8]
 800f358:	4640      	mov	r0, r8
 800f35a:	eba1 0108 	sub.w	r1, r1, r8
 800f35e:	1089      	asrs	r1, r1, #2
 800f360:	f7ff fc7a 	bl	800ec58 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
      this->_M_impl._M_finish = __new_finish;
 800f364:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f368:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 800f36c:	60be      	str	r6, [r7, #8]
    }
 800f36e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f372:	461c      	mov	r4, r3
 800f374:	e7d1      	b.n	800f31a <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f376:	4626      	mov	r6, r4
 800f378:	e7d3      	b.n	800f322 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 800f37a:	bf00      	nop
 800f37c:	0801c592 	.word	0x0801c592

0800f380 <_ZN13Communication11AddProtocolEP21CommunicationProtocol>:
void Communication::AddProtocol(CommunicationProtocol* protocol) {
 800f380:	b513      	push	{r0, r1, r4, lr}
 800f382:	4604      	mov	r4, r0
 800f384:	9101      	str	r1, [sp, #4]
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800f386:	6800      	ldr	r0, [r0, #0]
 800f388:	f04f 31ff 	mov.w	r1, #4294967295
 800f38c:	f7fd fa02 	bl	800c794 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f390:	e9d4 130a 	ldrd	r1, r3, [r4, #40]	@ 0x28
 800f394:	4299      	cmp	r1, r3
 800f396:	d008      	beq.n	800f3aa <_ZN13Communication11AddProtocolEP21CommunicationProtocol+0x2a>
 800f398:	9b01      	ldr	r3, [sp, #4]
 800f39a:	f841 3b04 	str.w	r3, [r1], #4
	    ++this->_M_impl._M_finish;
 800f39e:	62a1      	str	r1, [r4, #40]	@ 0x28
	osSemaphoreRelease(CommunicationSemaphore);
 800f3a0:	6820      	ldr	r0, [r4, #0]
 800f3a2:	f7fd fa2b 	bl	800c7fc <osSemaphoreRelease>
}
 800f3a6:	b002      	add	sp, #8
 800f3a8:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 800f3aa:	aa01      	add	r2, sp, #4
 800f3ac:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f3b0:	f7ff ff94 	bl	800f2dc <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 800f3b4:	e7f4      	b.n	800f3a0 <_ZN13Communication11AddProtocolEP21CommunicationProtocol+0x20>
	...

0800f3b8 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800f3b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f3bc:	e9d0 9a00 	ldrd	r9, sl, [r0]
 800f3c0:	4617      	mov	r7, r2
	if (max_size() - size() < __n)
 800f3c2:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f3c6:	ebaa 0209 	sub.w	r2, sl, r9
 800f3ca:	4680      	mov	r8, r0
 800f3cc:	468b      	mov	fp, r1
	if (max_size() - size() < __n)
 800f3ce:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f3d2:	ea4f 1522 	mov.w	r5, r2, asr #4
	if (max_size() - size() < __n)
 800f3d6:	d102      	bne.n	800f3de <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 800f3d8:	4826      	ldr	r0, [pc, #152]	@ (800f474 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
 800f3da:	f00c fcd1 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
 800f3de:	45ca      	cmp	sl, r9
 800f3e0:	bf14      	ite	ne
 800f3e2:	462a      	movne	r2, r5
 800f3e4:	2201      	moveq	r2, #1
 800f3e6:	eba1 0409 	sub.w	r4, r1, r9
 800f3ea:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f3ec:	d232      	bcs.n	800f454 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f3ee:	b39d      	cbz	r5, 800f458 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f3f0:	429d      	cmp	r5, r3
 800f3f2:	bf28      	it	cs
 800f3f4:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800f3f6:	0128      	lsls	r0, r5, #4
 800f3f8:	f00c fc0d 	bl	801bc16 <_Znwj>
 800f3fc:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f3fe:	4434      	add	r4, r6
      _ForwardIterator __cur = __result;
 800f400:	46b4      	mov	ip, r6
 800f402:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800f406:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f40a:	464c      	mov	r4, r9
      for (; __first != __last; ++__first, (void)++__cur)
 800f40c:	45a3      	cmp	fp, r4
 800f40e:	f10c 0c10 	add.w	ip, ip, #16
 800f412:	f104 0710 	add.w	r7, r4, #16
 800f416:	d121      	bne.n	800f45c <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>
 800f418:	eba7 0709 	sub.w	r7, r7, r9
 800f41c:	46a4      	mov	ip, r4
 800f41e:	4437      	add	r7, r6
 800f420:	46be      	mov	lr, r7
 800f422:	4554      	cmp	r4, sl
 800f424:	f10e 0e10 	add.w	lr, lr, #16
 800f428:	d11e      	bne.n	800f468 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb0>
 800f42a:	eba4 040c 	sub.w	r4, r4, ip
 800f42e:	4427      	add	r7, r4
	if (__p)
 800f430:	f1b9 0f00 	cmp.w	r9, #0
 800f434:	d006      	beq.n	800f444 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 800f436:	f8d8 1008 	ldr.w	r1, [r8, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f43a:	4648      	mov	r0, r9
 800f43c:	eba1 0109 	sub.w	r1, r1, r9
 800f440:	f00c fbc4 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800f444:	e9c8 6700 	strd	r6, r7, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f448:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 800f44c:	f8c8 6008 	str.w	r6, [r8, #8]
    }
 800f450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f454:	461d      	mov	r5, r3
 800f456:	e7ce      	b.n	800f3f6 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f458:	462e      	mov	r6, r5
 800f45a:	e7d0      	b.n	800f3fe <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f45c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f460:	463c      	mov	r4, r7
 800f462:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 800f466:	e7d1      	b.n	800f40c <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
 800f468:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f46c:	3410      	adds	r4, #16
 800f46e:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
 800f472:	e7d6      	b.n	800f422 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
 800f474:	0801c592 	.word	0x0801c592

0800f478 <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 800f478:	b570      	push	{r4, r5, r6, lr}
 800f47a:	4604      	mov	r4, r0
 800f47c:	b086      	sub	sp, #24
 800f47e:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f480:	6800      	ldr	r0, [r0, #0]
 800f482:	f04f 31ff 	mov.w	r1, #4294967295
 800f486:	f7fd f985 	bl	800c794 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 800f48a:	f10d 0207 	add.w	r2, sp, #7
 800f48e:	4631      	mov	r1, r6
 800f490:	4620      	mov	r0, r4
 800f492:	f008 ff42 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 800f496:	f89d 5007 	ldrb.w	r5, [sp, #7]
 800f49a:	b125      	cbz	r5, 800f4a6 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 800f49c:	6820      	ldr	r0, [r4, #0]
 800f49e:	f7fd f9ad 	bl	800c7fc <osSemaphoreRelease>
}
 800f4a2:	b006      	add	sp, #24
 800f4a4:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 800f4a6:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 800f4aa:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 800f4ae:	f7ff fd9d 	bl	800efec <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	f8ad 600a 	strh.w	r6, [sp, #10]
 800f4b8:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 800f4bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 800f4c0:	f88d 000c 	strb.w	r0, [sp, #12]
 800f4c4:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 800f4c8:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d0e5      	beq.n	800f49c <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
      push_back(const value_type& __x)
 800f4d0:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f4d2:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800f4d6:	429d      	cmp	r5, r3
 800f4d8:	d005      	beq.n	800f4e6 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x6e>
 800f4da:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800f4dc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 800f4e0:	3510      	adds	r5, #16
 800f4e2:	60a5      	str	r5, [r4, #8]
 800f4e4:	e7da      	b.n	800f49c <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	  _M_realloc_insert(end(), __x);
 800f4e6:	4629      	mov	r1, r5
 800f4e8:	1d20      	adds	r0, r4, #4
 800f4ea:	f7ff ff65 	bl	800f3b8 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 800f4ee:	e7d5      	b.n	800f49c <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

0800f4f0 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800f4f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f4f4:	e9d0 8900 	ldrd	r8, r9, [r0]
 800f4f8:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 800f4fa:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f4fe:	eba9 0208 	sub.w	r2, r9, r8
 800f502:	4607      	mov	r7, r0
 800f504:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 800f506:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f50a:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 800f50e:	d102      	bne.n	800f516 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 800f510:	4820      	ldr	r0, [pc, #128]	@ (800f594 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 800f512:	f00c fc35 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
 800f516:	45c1      	cmp	r9, r8
 800f518:	bf14      	ite	ne
 800f51a:	4622      	movne	r2, r4
 800f51c:	2201      	moveq	r2, #1
 800f51e:	eba1 0508 	sub.w	r5, r1, r8
 800f522:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f524:	d231      	bcs.n	800f58a <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f526:	b394      	cbz	r4, 800f58e <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f528:	429c      	cmp	r4, r3
 800f52a:	bf28      	it	cs
 800f52c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800f52e:	0120      	lsls	r0, r4, #4
 800f530:	f00c fb71 	bl	801bc16 <_Znwj>
 800f534:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f536:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 800f53a:	2d00      	cmp	r5, #0
 800f53c:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800f540:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800f544:	dd04      	ble.n	800f550 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800f546:	462a      	mov	r2, r5
 800f548:	4641      	mov	r1, r8
 800f54a:	4630      	mov	r0, r6
 800f54c:	f00c fe9a 	bl	801c284 <memmove>
      ptrdiff_t __count = __last - __first;
 800f550:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 800f554:	3510      	adds	r5, #16
      if (__count > 0)
 800f556:	f1b9 0f00 	cmp.w	r9, #0
 800f55a:	4435      	add	r5, r6
 800f55c:	dd04      	ble.n	800f568 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800f55e:	464a      	mov	r2, r9
 800f560:	4651      	mov	r1, sl
 800f562:	4628      	mov	r0, r5
 800f564:	f00c ff86 	bl	801c474 <memcpy>
      return __result + __count;
 800f568:	444d      	add	r5, r9
	if (__p)
 800f56a:	f1b8 0f00 	cmp.w	r8, #0
 800f56e:	d005      	beq.n	800f57c <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 800f570:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f572:	4640      	mov	r0, r8
 800f574:	eba1 0108 	sub.w	r1, r1, r8
 800f578:	f00c fb28 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800f57c:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f580:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 800f584:	60be      	str	r6, [r7, #8]
    }
 800f586:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f58a:	461c      	mov	r4, r3
 800f58c:	e7cf      	b.n	800f52e <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f58e:	4626      	mov	r6, r4
 800f590:	e7d1      	b.n	800f536 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 800f592:	bf00      	nop
 800f594:	0801c592 	.word	0x0801c592

0800f598 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 800f598:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f59a:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 800f59e:	4605      	mov	r5, r0
 800f5a0:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f5a2:	429c      	cmp	r4, r3
 800f5a4:	d005      	beq.n	800f5b2 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f5a6:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800f5a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 800f5ac:	3410      	adds	r4, #16
 800f5ae:	606c      	str	r4, [r5, #4]
      }
 800f5b0:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 800f5b2:	4621      	mov	r1, r4
 800f5b4:	f7ff ff9c 	bl	800f4f0 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800f5b8:	e7fa      	b.n	800f5b0 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_+0x18>

0800f5ba <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 800f5ba:	b570      	push	{r4, r5, r6, lr}
 800f5bc:	460c      	mov	r4, r1
 800f5be:	b086      	sub	sp, #24
 800f5c0:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f5c2:	f04f 31ff 	mov.w	r1, #4294967295
 800f5c6:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 800f5c8:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f5ca:	f7fd f8e3 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f5ce:	4621      	mov	r1, r4
 800f5d0:	f10d 0207 	add.w	r2, sp, #7
 800f5d4:	4628      	mov	r0, r5
 800f5d6:	f008 fea0 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800f5da:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f5de:	4604      	mov	r4, r0
	if (!success) {
 800f5e0:	b923      	cbnz	r3, 800f5ec <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 800f5e2:	6828      	ldr	r0, [r5, #0]
 800f5e4:	f7fd f90a 	bl	800c7fc <osSemaphoreRelease>
}
 800f5e8:	b006      	add	sp, #24
 800f5ea:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800f5ec:	f10d 0007 	add.w	r0, sp, #7
 800f5f0:	f7ff fcfc 	bl	800efec <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 800f5f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d0f2      	beq.n	800f5e2 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 800f5fc:	7923      	ldrb	r3, [r4, #4]
 800f5fe:	4298      	cmp	r0, r3
 800f600:	d1ef      	bne.n	800f5e2 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 800f602:	3004      	adds	r0, #4
 800f604:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800f608:	2800      	cmp	r0, #0
 800f60a:	d0ea      	beq.n	800f5e2 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 800f60c:	7823      	ldrb	r3, [r4, #0]
 800f60e:	b983      	cbnz	r3, 800f632 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x78>
 800f610:	7863      	ldrb	r3, [r4, #1]
 800f612:	b973      	cbnz	r3, 800f632 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x78>
		target_callback_list->push_back(callback);
 800f614:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 800f616:	9602      	str	r6, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f618:	e9d0 2300 	ldrd	r2, r3, [r0]
 800f61c:	1a9b      	subs	r3, r3, r2
 800f61e:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 800f620:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 800f622:	f7ff ffb9 	bl	800f598 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 800f626:	2301      	movs	r3, #1
 800f628:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 800f62a:	f240 1301 	movw	r3, #257	@ 0x101
 800f62e:	8123      	strh	r3, [r4, #8]
 800f630:	e7d7      	b.n	800f5e2 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 800f632:	8961      	ldrh	r1, [r4, #10]
 800f634:	f7ff fe14 	bl	800f260 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->pointer = pointer;
 800f638:	6006      	str	r6, [r0, #0]
 800f63a:	e7f4      	b.n	800f626 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x6c>

0800f63c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 800f63c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f63e:	460c      	mov	r4, r1
 800f640:	b087      	sub	sp, #28
 800f642:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f644:	f04f 31ff 	mov.w	r1, #4294967295
 800f648:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 800f64a:	461e      	mov	r6, r3
 800f64c:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f64e:	f7fd f8a1 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f652:	4621      	mov	r1, r4
 800f654:	f10d 0207 	add.w	r2, sp, #7
 800f658:	4628      	mov	r0, r5
 800f65a:	f008 fe5e 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800f65e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f662:	4604      	mov	r4, r0
	if (!success) {
 800f664:	b923      	cbnz	r3, 800f670 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 800f666:	6828      	ldr	r0, [r5, #0]
 800f668:	f7fd f8c8 	bl	800c7fc <osSemaphoreRelease>
}
 800f66c:	b007      	add	sp, #28
 800f66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800f670:	f10d 0007 	add.w	r0, sp, #7
 800f674:	f7ff fcba 	bl	800efec <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 800f678:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d0f2      	beq.n	800f666 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 800f680:	7923      	ldrb	r3, [r4, #4]
 800f682:	4298      	cmp	r0, r3
 800f684:	d1ef      	bne.n	800f666 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 800f686:	3004      	adds	r0, #4
 800f688:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800f68c:	2800      	cmp	r0, #0
 800f68e:	d0ea      	beq.n	800f666 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 800f690:	7823      	ldrb	r3, [r4, #0]
 800f692:	b983      	cbnz	r3, 800f6b6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 800f694:	7863      	ldrb	r3, [r4, #1]
 800f696:	b973      	cbnz	r3, 800f6b6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 800f698:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 800f69a:	a902      	add	r1, sp, #8
 800f69c:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 800f6a0:	e9cd 7603 	strd	r7, r6, [sp, #12]
 800f6a4:	1a9b      	subs	r3, r3, r2
 800f6a6:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 800f6a8:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 800f6aa:	f7ff ff75 	bl	800f598 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 800f6b2:	7223      	strb	r3, [r4, #8]
 800f6b4:	e7d7      	b.n	800f666 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 800f6b6:	8961      	ldrh	r1, [r4, #10]
 800f6b8:	f7ff fdd2 	bl	800f260 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 800f6bc:	e9c0 7601 	strd	r7, r6, [r0, #4]
 800f6c0:	e7f5      	b.n	800f6ae <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x72>
	...

0800f6c4 <_ZN13Communication12AddRegistersEv>:
void Communication::AddRegisters(void) {
 800f6c4:	b510      	push	{r4, lr}
 800f6c6:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_COM_ID_PROPAGATION);
 800f6c8:	2101      	movs	r1, #1
 800f6ca:	6840      	ldr	r0, [r0, #4]
 800f6cc:	f7ff fed4 	bl	800f478 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_ID_PROPAGATION);
 800f6d0:	2101      	movs	r1, #1
 800f6d2:	6860      	ldr	r0, [r4, #4]
 800f6d4:	f008 fe5a 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_ID_PROPAGATION, (void*) this,
 800f6d8:	4b32      	ldr	r3, [pc, #200]	@ (800f7a4 <_ZN13Communication12AddRegistersEv+0xe0>)
 800f6da:	4622      	mov	r2, r4
 800f6dc:	6860      	ldr	r0, [r4, #4]
 800f6de:	2101      	movs	r1, #1
 800f6e0:	f7ff ffac 	bl	800f63c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_ADDRESS);
 800f6e4:	6860      	ldr	r0, [r4, #4]
 800f6e6:	2102      	movs	r1, #2
 800f6e8:	f7ff fec6 	bl	800f478 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_ADDRESS);
 800f6ec:	2102      	movs	r1, #2
 800f6ee:	6860      	ldr	r0, [r4, #4]
 800f6f0:	f008 fe4c 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_COM_ADDRESS, &CommunicationSemaphore);
 800f6f4:	4622      	mov	r2, r4
 800f6f6:	2102      	movs	r1, #2
 800f6f8:	6860      	ldr	r0, [r4, #4]
 800f6fa:	f008 fe2d 	bl	8018358 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer(REG_COM_ADDRESS, &address);
 800f6fe:	f104 0214 	add.w	r2, r4, #20
 800f702:	6860      	ldr	r0, [r4, #4]
 800f704:	2102      	movs	r1, #2
 800f706:	f7ff ff58 	bl	800f5ba <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_ADD_GROUP_ADDRESS);
 800f70a:	6860      	ldr	r0, [r4, #4]
 800f70c:	2103      	movs	r1, #3
 800f70e:	f7ff feb3 	bl	800f478 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_ADD_GROUP_ADDRESS);
 800f712:	2103      	movs	r1, #3
 800f714:	6860      	ldr	r0, [r4, #4]
 800f716:	f008 fe39 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_ADD_GROUP_ADDRESS, (void*) this,
 800f71a:	4622      	mov	r2, r4
 800f71c:	4b22      	ldr	r3, [pc, #136]	@ (800f7a8 <_ZN13Communication12AddRegistersEv+0xe4>)
 800f71e:	2103      	movs	r1, #3
 800f720:	6860      	ldr	r0, [r4, #4]
 800f722:	f7ff ff8b 	bl	800f63c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_REMOVE_GROUP_ADDRESS);
 800f726:	6860      	ldr	r0, [r4, #4]
 800f728:	2104      	movs	r1, #4
 800f72a:	f7ff fea5 	bl	800f478 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_REMOVE_GROUP_ADDRESS);
 800f72e:	2104      	movs	r1, #4
 800f730:	6860      	ldr	r0, [r4, #4]
 800f732:	f008 fe2b 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_REMOVE_GROUP_ADDRESS, (void*) this,
 800f736:	4622      	mov	r2, r4
 800f738:	4b1c      	ldr	r3, [pc, #112]	@ (800f7ac <_ZN13Communication12AddRegistersEv+0xe8>)
 800f73a:	2104      	movs	r1, #4
 800f73c:	6860      	ldr	r0, [r4, #4]
 800f73e:	f7ff ff7d 	bl	800f63c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_CLEAR_GROUP_ADDRESS);
 800f742:	6860      	ldr	r0, [r4, #4]
 800f744:	2105      	movs	r1, #5
 800f746:	f7ff fe97 	bl	800f478 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_CLEAR_GROUP_ADDRESS);
 800f74a:	2105      	movs	r1, #5
 800f74c:	6860      	ldr	r0, [r4, #4]
 800f74e:	f008 fe1d 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_CLEAR_GROUP_ADDRESS, (void*) this,
 800f752:	4b17      	ldr	r3, [pc, #92]	@ (800f7b0 <_ZN13Communication12AddRegistersEv+0xec>)
 800f754:	4622      	mov	r2, r4
 800f756:	6860      	ldr	r0, [r4, #4]
 800f758:	2105      	movs	r1, #5
 800f75a:	f7ff ff6f 	bl	800f63c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_GET_GROUP_ADDRESS);
 800f75e:	6860      	ldr	r0, [r4, #4]
 800f760:	2106      	movs	r1, #6
 800f762:	f7ff fe89 	bl	800f478 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsVector(REG_COM_GET_GROUP_ADDRESS);
 800f766:	2106      	movs	r1, #6
 800f768:	6860      	ldr	r0, [r4, #4]
 800f76a:	f008 fe47 	bl	80183fc <_ZN9Registers19SetRegisterAsVectorEt>
	return AddRegisterPointer(ID, reinterpreted_pointer);
 800f76e:	f104 0218 	add.w	r2, r4, #24
 800f772:	6860      	ldr	r0, [r4, #4]
 800f774:	2106      	movs	r1, #6
 800f776:	f7ff ff20 	bl	800f5ba <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_COM_GET_GROUP_ADDRESS, READ_PERMISSION);
 800f77a:	2202      	movs	r2, #2
 800f77c:	2106      	movs	r1, #6
 800f77e:	6860      	ldr	r0, [r4, #4]
 800f780:	f008 fe3f 	bl	8018402 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<uint8_t>(REG_COM_FORWARD_MESSAGE);
 800f784:	6860      	ldr	r0, [r4, #4]
 800f786:	2107      	movs	r1, #7
 800f788:	f7ff fe76 	bl	800f478 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsVector(REG_COM_FORWARD_MESSAGE);
 800f78c:	2107      	movs	r1, #7
 800f78e:	6860      	ldr	r0, [r4, #4]
 800f790:	f008 fe34 	bl	80183fc <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_FORWARD_MESSAGE, (void*) this,
 800f794:	4622      	mov	r2, r4
 800f796:	6860      	ldr	r0, [r4, #4]
 800f798:	2107      	movs	r1, #7
 800f79a:	4b06      	ldr	r3, [pc, #24]	@ (800f7b4 <_ZN13Communication12AddRegistersEv+0xf0>)
}
 800f79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_COM_FORWARD_MESSAGE, (void*) this,
 800f7a0:	f7ff bf4c 	b.w	800f63c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 800f7a4:	08011793 	.word	0x08011793
 800f7a8:	0800f989 	.word	0x0800f989
 800f7ac:	0800fae7 	.word	0x0800fae7
 800f7b0:	0800f25b 	.word	0x0800f25b
 800f7b4:	0801144d 	.word	0x0801144d

0800f7b8 <_ZN23SubscriberConfigurationD1Ev>:
struct SubscriberConfiguration {
 800f7b8:	b510      	push	{r4, lr}
 800f7ba:	4604      	mov	r4, r0
      }
 800f7bc:	301c      	adds	r0, #28
 800f7be:	f7f1 fa23 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	_M_deallocate(_M_impl._M_start,
 800f7c2:	6920      	ldr	r0, [r4, #16]
	if (__p)
 800f7c4:	b118      	cbz	r0, 800f7ce <_ZN23SubscriberConfigurationD1Ev+0x16>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800f7c6:	69a1      	ldr	r1, [r4, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f7c8:	1a09      	subs	r1, r1, r0
 800f7ca:	f00c f9ff 	bl	801bbcc <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800f7ce:	6860      	ldr	r0, [r4, #4]
	if (__p)
 800f7d0:	b118      	cbz	r0, 800f7da <_ZN23SubscriberConfigurationD1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800f7d2:	68e1      	ldr	r1, [r4, #12]
 800f7d4:	1a09      	subs	r1, r1, r0
 800f7d6:	f00c f9f9 	bl	801bbcc <_ZdlPvj>
 800f7da:	4620      	mov	r0, r4
 800f7dc:	bd10      	pop	{r4, pc}

0800f7de <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800f7de:	b510      	push	{r4, lr}
 800f7e0:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 800f7e2:	6800      	ldr	r0, [r0, #0]
	if (__p)
 800f7e4:	b120      	cbz	r0, 800f7f0 <_ZNSt12_Vector_baseImSaImEED1Ev+0x12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800f7e6:	68a1      	ldr	r1, [r4, #8]
 800f7e8:	1a09      	subs	r1, r1, r0
 800f7ea:	1089      	asrs	r1, r1, #2
 800f7ec:	f7ff fa34 	bl	800ec58 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
      }
 800f7f0:	4620      	mov	r0, r4
 800f7f2:	bd10      	pop	{r4, pc}

0800f7f4 <_ZNSt6vectorImSaImEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f7f4:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 800f7f6:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f7f8:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 800f7fa:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 800f7fc:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 800f800:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 800f802:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f804:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 800f806:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 800f808:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f80a:	688d      	ldr	r5, [r1, #8]
 800f80c:	6085      	str	r5, [r0, #8]
      }
 800f80e:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 800f810:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 800f812:	e9c1 3300 	strd	r3, r3, [r1]
 800f816:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 800f81a:	f7ff ffe0 	bl	800f7de <_ZNSt12_Vector_baseImSaImEED1Ev>
      }
 800f81e:	b005      	add	sp, #20
 800f820:	bd30      	pop	{r4, r5, pc}

0800f822 <_ZNSt12_Vector_baseIaSaIaEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800f822:	b510      	push	{r4, lr}
 800f824:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 800f826:	6800      	ldr	r0, [r0, #0]
	if (__p)
 800f828:	b118      	cbz	r0, 800f832 <_ZNSt12_Vector_baseIaSaIaEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800f82a:	68a1      	ldr	r1, [r4, #8]
 800f82c:	1a09      	subs	r1, r1, r0
 800f82e:	f00c f9cd 	bl	801bbcc <_ZdlPvj>
      }
 800f832:	4620      	mov	r0, r4
 800f834:	bd10      	pop	{r4, pc}

0800f836 <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f836:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 800f838:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f83a:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 800f83c:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 800f83e:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 800f842:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 800f844:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f846:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 800f848:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 800f84a:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f84c:	688d      	ldr	r5, [r1, #8]
 800f84e:	6085      	str	r5, [r0, #8]
      }
 800f850:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 800f852:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 800f854:	e9c1 3300 	strd	r3, r3, [r1]
 800f858:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 800f85c:	f7ff ffe1 	bl	800f822 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
      }
 800f860:	b005      	add	sp, #20
 800f862:	bd30      	pop	{r4, r5, pc}

0800f864 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f864:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 800f866:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800f868:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 800f86a:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 800f86c:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 800f870:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 800f872:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f874:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 800f876:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 800f878:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f87a:	688d      	ldr	r5, [r1, #8]
 800f87c:	6085      	str	r5, [r0, #8]
      }
 800f87e:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 800f880:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 800f882:	e9c1 3300 	strd	r3, r3, [r1]
 800f886:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 800f88a:	f7f2 fcf1 	bl	8002270 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      }
 800f88e:	b005      	add	sp, #20
 800f890:	bd30      	pop	{r4, r5, pc}
	...

0800f894 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800f894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f898:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      vector<_Tp, _Alloc>::
 800f89c:	4605      	mov	r5, r0
 800f89e:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f8a0:	429c      	cmp	r4, r3
 800f8a2:	d006      	beq.n	800f8b2 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f8a4:	780b      	ldrb	r3, [r1, #0]
 800f8a6:	7023      	strb	r3, [r4, #0]
	    ++this->_M_impl._M_finish;
 800f8a8:	6843      	ldr	r3, [r0, #4]
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	6043      	str	r3, [r0, #4]
      }
 800f8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800f8b2:	4a10      	ldr	r2, [pc, #64]	@ (800f8f4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x60>)
 800f8b4:	2101      	movs	r1, #1
 800f8b6:	f7f1 f9c8 	bl	8000c4a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 800f8ba:	682f      	ldr	r7, [r5, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800f8bc:	4680      	mov	r8, r0
      pointer __new_start(this->_M_allocate(__len));
 800f8be:	f7ff fb8a 	bl	800efd6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 800f8c2:	1be4      	subs	r4, r4, r7
 800f8c4:	f899 3000 	ldrb.w	r3, [r9]
 800f8c8:	4606      	mov	r6, r0
      if (__count > 0)
 800f8ca:	2c00      	cmp	r4, #0
 800f8cc:	5503      	strb	r3, [r0, r4]
 800f8ce:	dd03      	ble.n	800f8d8 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x44>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800f8d0:	4622      	mov	r2, r4
 800f8d2:	4639      	mov	r1, r7
 800f8d4:	f00c fcd6 	bl	801c284 <memmove>
	      ++__new_finish;
 800f8d8:	3401      	adds	r4, #1
 800f8da:	4434      	add	r4, r6
	if (__p)
 800f8dc:	b127      	cbz	r7, 800f8e8 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x54>
		    this->_M_impl._M_end_of_storage - __old_start);
 800f8de:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f8e0:	4638      	mov	r0, r7
 800f8e2:	1bc9      	subs	r1, r1, r7
 800f8e4:	f00c f972 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800f8e8:	e9c5 6400 	strd	r6, r4, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f8ec:	4446      	add	r6, r8
 800f8ee:	60ae      	str	r6, [r5, #8]
      }
 800f8f0:	e7dd      	b.n	800f8ae <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x1a>
 800f8f2:	bf00      	nop
 800f8f4:	0801c592 	.word	0x0801c592

0800f8f8 <_ZNSt6vectorIhSaIhEE9push_backERKh>:
      push_back(const value_type& __x)
 800f8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f8fc:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 800f900:	4605      	mov	r5, r0
 800f902:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f904:	429c      	cmp	r4, r3
 800f906:	d006      	beq.n	800f916 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f908:	780b      	ldrb	r3, [r1, #0]
 800f90a:	7023      	strb	r3, [r4, #0]
	    ++this->_M_impl._M_finish;
 800f90c:	6843      	ldr	r3, [r0, #4]
 800f90e:	3301      	adds	r3, #1
 800f910:	6043      	str	r3, [r0, #4]
      }
 800f912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800f916:	4a10      	ldr	r2, [pc, #64]	@ (800f958 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x60>)
 800f918:	2101      	movs	r1, #1
 800f91a:	f7f1 f996 	bl	8000c4a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 800f91e:	682f      	ldr	r7, [r5, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800f920:	4680      	mov	r8, r0
      pointer __new_start(this->_M_allocate(__len));
 800f922:	f7ff fb58 	bl	800efd6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 800f926:	1be4      	subs	r4, r4, r7
 800f928:	f899 3000 	ldrb.w	r3, [r9]
 800f92c:	4606      	mov	r6, r0
      if (__count > 0)
 800f92e:	2c00      	cmp	r4, #0
 800f930:	5503      	strb	r3, [r0, r4]
 800f932:	dd03      	ble.n	800f93c <_ZNSt6vectorIhSaIhEE9push_backERKh+0x44>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800f934:	4622      	mov	r2, r4
 800f936:	4639      	mov	r1, r7
 800f938:	f00c fca4 	bl	801c284 <memmove>
	      ++__new_finish;
 800f93c:	3401      	adds	r4, #1
 800f93e:	4434      	add	r4, r6
	if (__p)
 800f940:	b127      	cbz	r7, 800f94c <_ZNSt6vectorIhSaIhEE9push_backERKh+0x54>
		    this->_M_impl._M_end_of_storage - __old_start);
 800f942:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800f944:	4638      	mov	r0, r7
 800f946:	1bc9      	subs	r1, r1, r7
 800f948:	f00c f940 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800f94c:	e9c5 6400 	strd	r6, r4, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f950:	4446      	add	r6, r8
 800f952:	60ae      	str	r6, [r5, #8]
      }
 800f954:	e7dd      	b.n	800f912 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x1a>
 800f956:	bf00      	nop
 800f958:	0801c592 	.word	0x0801c592

0800f95c <_ZN13Communication15AddGroupAddressEh>:
bool Communication::AddGroupAddress(uint8_t address) {
 800f95c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800f95e:	4605      	mov	r5, r0
bool Communication::AddGroupAddress(uint8_t address) {
 800f960:	4604      	mov	r4, r0
 800f962:	f88d 1007 	strb.w	r1, [sp, #7]
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800f966:	f04f 31ff 	mov.w	r1, #4294967295
 800f96a:	f855 0b18 	ldr.w	r0, [r5], #24
 800f96e:	f7fc ff11 	bl	800c794 <osSemaphoreAcquire>
	group_addresses.push_back(address);
 800f972:	f10d 0107 	add.w	r1, sp, #7
 800f976:	4628      	mov	r0, r5
 800f978:	f7ff ffbe 	bl	800f8f8 <_ZNSt6vectorIhSaIhEE9push_backERKh>
	osSemaphoreRelease(CommunicationSemaphore);
 800f97c:	6820      	ldr	r0, [r4, #0]
 800f97e:	f7fc ff3d 	bl	800c7fc <osSemaphoreRelease>
}
 800f982:	2001      	movs	r0, #1
 800f984:	b003      	add	sp, #12
 800f986:	bd30      	pop	{r4, r5, pc}

0800f988 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			return self->AddGroupAddress(*input);
 800f988:	7811      	ldrb	r1, [r2, #0]
 800f98a:	f7ff bfe7 	b.w	800f95c <_ZN13Communication15AddGroupAddressEh>
	...

0800f990 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>:
      at(size_type __n)
 800f990:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f992:	e9d0 5400 	ldrd	r5, r4, [r0]
 800f996:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 800f998:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f99c:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 800f9a0:	d302      	bcc.n	800f9a8 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800f9a2:	4803      	ldr	r0, [pc, #12]	@ (800f9b0 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj+0x20>)
 800f9a4:	f00c f9ef 	bl	801bd86 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800f9a8:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 800f9ac:	bd38      	pop	{r3, r4, r5, pc}
 800f9ae:	bf00      	nop
 800f9b0:	0801c5c6 	.word	0x0801c5c6

0800f9b4 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>:
      at(size_type __n)
 800f9b4:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f9b6:	e9d0 5400 	ldrd	r5, r4, [r0]
 800f9ba:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 800f9bc:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f9c0:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 800f9c4:	d302      	bcc.n	800f9cc <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800f9c6:	4803      	ldr	r0, [pc, #12]	@ (800f9d4 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj+0x20>)
 800f9c8:	f00c f9dd 	bl	801bd86 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800f9cc:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 800f9d0:	bd38      	pop	{r3, r4, r5, pc}
 800f9d2:	bf00      	nop
 800f9d4:	0801c5c6 	.word	0x0801c5c6

0800f9d8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>:
      at(size_type __n)
 800f9d8:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f9da:	e9d0 5400 	ldrd	r5, r4, [r0]
 800f9de:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 800f9e0:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f9e4:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 800f9e8:	d302      	bcc.n	800f9f0 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800f9ea:	4803      	ldr	r0, [pc, #12]	@ (800f9f8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj+0x20>)
 800f9ec:	f00c f9cb 	bl	801bd86 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800f9f0:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 800f9f4:	bd38      	pop	{r3, r4, r5, pc}
 800f9f6:	bf00      	nop
 800f9f8:	0801c5c6 	.word	0x0801c5c6

0800f9fc <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800f9fc:	b538      	push	{r3, r4, r5, lr}
 800f9fe:	4603      	mov	r3, r0
 800fa00:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fa02:	e9d3 3500 	ldrd	r3, r5, [r3]
 800fa06:	1aed      	subs	r5, r5, r3
	if (max_size() - size() < __n)
 800fa08:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fa0c:	10ac      	asrs	r4, r5, #2
	if (max_size() - size() < __n)
 800fa0e:	eba3 05a5 	sub.w	r5, r3, r5, asr #2
 800fa12:	428d      	cmp	r5, r1
 800fa14:	d201      	bcs.n	800fa1a <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x1e>
	  __throw_length_error(__N(__s));
 800fa16:	f00c f9b3 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
 800fa1a:	42a1      	cmp	r1, r4
 800fa1c:	bf38      	it	cc
 800fa1e:	4621      	movcc	r1, r4
 800fa20:	1864      	adds	r4, r4, r1
 800fa22:	d204      	bcs.n	800fa2e <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x32>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800fa24:	429c      	cmp	r4, r3
 800fa26:	4620      	mov	r0, r4
 800fa28:	bf28      	it	cs
 800fa2a:	4618      	movcs	r0, r3
      }
 800fa2c:	bd38      	pop	{r3, r4, r5, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800fa2e:	4618      	mov	r0, r3
 800fa30:	e7fc      	b.n	800fa2c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x30>

0800fa32 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800fa32:	b510      	push	{r4, lr}
 800fa34:	4604      	mov	r4, r0
 800fa36:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fa38:	e9d4 2300 	ldrd	r2, r3, [r4]
	if (max_size() - size() < __n)
 800fa3c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fa40:	1a9b      	subs	r3, r3, r2
	if (max_size() - size() < __n)
 800fa42:	1ae2      	subs	r2, r4, r3
 800fa44:	428a      	cmp	r2, r1
 800fa46:	d201      	bcs.n	800fa4c <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc+0x1a>
	  __throw_length_error(__N(__s));
 800fa48:	f00c f99a 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
 800fa4c:	4299      	cmp	r1, r3
 800fa4e:	bf38      	it	cc
 800fa50:	4619      	movcc	r1, r3
 800fa52:	185b      	adds	r3, r3, r1
 800fa54:	d204      	bcs.n	800fa60 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc+0x2e>
 800fa56:	42a3      	cmp	r3, r4
 800fa58:	bf28      	it	cs
 800fa5a:	4623      	movcs	r3, r4
 800fa5c:	4618      	mov	r0, r3
      }
 800fa5e:	bd10      	pop	{r4, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800fa60:	4620      	mov	r0, r4
 800fa62:	e7fc      	b.n	800fa5e <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc+0x2c>

0800fa64 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800fa64:	b538      	push	{r3, r4, r5, lr}
 800fa66:	4603      	mov	r3, r0
 800fa68:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fa6a:	e9d3 3500 	ldrd	r3, r5, [r3]
 800fa6e:	1aed      	subs	r5, r5, r3
	if (max_size() - size() < __n)
 800fa70:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fa74:	10ac      	asrs	r4, r5, #2
	if (max_size() - size() < __n)
 800fa76:	eba3 05a5 	sub.w	r5, r3, r5, asr #2
 800fa7a:	428d      	cmp	r5, r1
 800fa7c:	d201      	bcs.n	800fa82 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x1e>
	  __throw_length_error(__N(__s));
 800fa7e:	f00c f97f 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
 800fa82:	42a1      	cmp	r1, r4
 800fa84:	bf38      	it	cc
 800fa86:	4621      	movcc	r1, r4
 800fa88:	1864      	adds	r4, r4, r1
 800fa8a:	d204      	bcs.n	800fa96 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x32>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800fa8c:	429c      	cmp	r4, r3
 800fa8e:	4620      	mov	r0, r4
 800fa90:	bf28      	it	cs
 800fa92:	4618      	movcs	r0, r3
      }
 800fa94:	bd38      	pop	{r3, r4, r5, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800fa96:	4618      	mov	r0, r3
 800fa98:	e7fc      	b.n	800fa94 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x30>

0800fa9a <_ZN13Communication18RemoveGroupAddressEh>:
bool Communication::RemoveGroupAddress(uint8_t address_) {
 800fa9a:	b570      	push	{r4, r5, r6, lr}
 800fa9c:	4604      	mov	r4, r0
 800fa9e:	460d      	mov	r5, r1
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800faa0:	6800      	ldr	r0, [r0, #0]
 800faa2:	f04f 31ff 	mov.w	r1, #4294967295
 800faa6:	f7fc fe75 	bl	800c794 <osSemaphoreAcquire>
      : _M_current(__i) { }
 800faaa:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
	for (uint8_t address : group_addresses) {
 800faae:	4603      	mov	r3, r0
 800fab0:	428b      	cmp	r3, r1
 800fab2:	d104      	bne.n	800fabe <_ZN13Communication18RemoveGroupAddressEh+0x24>
	osSemaphoreRelease(CommunicationSemaphore);
 800fab4:	6820      	ldr	r0, [r4, #0]
 800fab6:	f7fc fea1 	bl	800c7fc <osSemaphoreRelease>
	return false;
 800faba:	2000      	movs	r0, #0
 800fabc:	e010      	b.n	800fae0 <_ZN13Communication18RemoveGroupAddressEh+0x46>
 800fabe:	461a      	mov	r2, r3
		if (address == address_) {
 800fac0:	f812 6b01 	ldrb.w	r6, [r2], #1
 800fac4:	42ae      	cmp	r6, r5
 800fac6:	d10c      	bne.n	800fae2 <_ZN13Communication18RemoveGroupAddressEh+0x48>
      { return __normal_iterator(_M_current + __n); }
 800fac8:	1a1a      	subs	r2, r3, r0
 800faca:	fa50 f282 	uxtab	r2, r0, r2
 800face:	1c50      	adds	r0, r2, #1
      if (__position + 1 != end())
 800fad0:	4281      	cmp	r1, r0
 800fad2:	d001      	beq.n	800fad8 <_ZN13Communication18RemoveGroupAddressEh+0x3e>
			      _Category>::__copy_m(__first, __last, __result);
 800fad4:	f7f2 f9fe 	bl	8001ed4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      --this->_M_impl._M_finish;
 800fad8:	69e3      	ldr	r3, [r4, #28]
			return true;
 800fada:	2001      	movs	r0, #1
 800fadc:	3b01      	subs	r3, #1
 800fade:	61e3      	str	r3, [r4, #28]
}
 800fae0:	bd70      	pop	{r4, r5, r6, pc}
 800fae2:	4613      	mov	r3, r2
 800fae4:	e7e4      	b.n	800fab0 <_ZN13Communication18RemoveGroupAddressEh+0x16>

0800fae6 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			return self->RemoveGroupAddress(*input);
 800fae6:	7811      	ldrb	r1, [r2, #0]
 800fae8:	f7ff bfd7 	b.w	800fa9a <_ZN13Communication18RemoveGroupAddressEh>

0800faec <_ZN14MessageElementC1ERKS_>:
struct MessageElement {
 800faec:	b510      	push	{r4, lr}
 800faee:	460b      	mov	r3, r1
 800faf0:	4604      	mov	r4, r0
 800faf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800faf6:	7a1a      	ldrb	r2, [r3, #8]
 800faf8:	80a1      	strh	r1, [r4, #4]
 800fafa:	88d9      	ldrh	r1, [r3, #6]
 800fafc:	6020      	str	r0, [r4, #0]
 800fafe:	f104 000c 	add.w	r0, r4, #12
 800fb02:	80e1      	strh	r1, [r4, #6]
 800fb04:	f103 010c 	add.w	r1, r3, #12
 800fb08:	7222      	strb	r2, [r4, #8]
 800fb0a:	f7f1 f977 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800fb0e:	4620      	mov	r0, r4
 800fb10:	bd10      	pop	{r4, pc}

0800fb12 <_ZN13MessageHeaderC1ERKS_>:
 800fb12:	b538      	push	{r3, r4, r5, lr}
 800fb14:	460d      	mov	r5, r1
 800fb16:	f811 3b04 	ldrb.w	r3, [r1], #4
 800fb1a:	4604      	mov	r4, r0
 800fb1c:	f800 3b04 	strb.w	r3, [r0], #4
 800fb20:	f7f1 f96c 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800fb24:	8a2b      	ldrh	r3, [r5, #16]
 800fb26:	4620      	mov	r0, r4
 800fb28:	8223      	strh	r3, [r4, #16]
 800fb2a:	bd38      	pop	{r3, r4, r5, pc}

0800fb2c <_ZN13Communication4SpinEv>:
void Communication::Spin(void) {
 800fb2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t index = 0;
 800fb30:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fb32:	4f29      	ldr	r7, [pc, #164]	@ (800fbd8 <_ZN13Communication4SpinEv+0xac>)
void Communication::Spin(void) {
 800fb34:	b08d      	sub	sp, #52	@ 0x34
 800fb36:	4604      	mov	r4, r0
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800fb38:	f04f 31ff 	mov.w	r1, #4294967295
 800fb3c:	6800      	ldr	r0, [r0, #0]
 800fb3e:	f7fc fe29 	bl	800c794 <osSemaphoreAcquire>
 800fb42:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800fb46:	1a9b      	subs	r3, r3, r2
 800fb48:	109b      	asrs	r3, r3, #2
 800fb4a:	437b      	muls	r3, r7
	while (index < pending_messages.size()) {
 800fb4c:	429d      	cmp	r5, r3
 800fb4e:	d308      	bcc.n	800fb62 <_ZN13Communication4SpinEv+0x36>
	osSemaphoreRelease(CommunicationSemaphore);
 800fb50:	6820      	ldr	r0, [r4, #0]
 800fb52:	f7fc fe53 	bl	800c7fc <osSemaphoreRelease>
	osDelay(DEFAULT_COMMUNICATION_PERIOD);
 800fb56:	2064      	movs	r0, #100	@ 0x64
}
 800fb58:	b00d      	add	sp, #52	@ 0x34
 800fb5a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	osDelay(DEFAULT_COMMUNICATION_PERIOD);
 800fb5e:	f7fc bdaf 	b.w	800c6c0 <osDelay>
	return *(this->_M_impl._M_start + __n);
 800fb62:	eb05 0185 	add.w	r1, r5, r5, lsl #2
		MessageHeader message = pending_messages[index];
 800fb66:	a802      	add	r0, sp, #8
 800fb68:	ea4f 0881 	mov.w	r8, r1, lsl #2
 800fb6c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800fb70:	f7ff ffcf 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
		CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 800fb74:	f10d 0207 	add.w	r2, sp, #7
 800fb78:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800fb7c:	4620      	mov	r0, r4
 800fb7e:	f7ff fab5 	bl	800f0ec <_ZN13Communication12FindProtocolEhPb>
		if (!success)
 800fb82:	f89d 3007 	ldrb.w	r3, [sp, #7]
		CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 800fb86:	4606      	mov	r6, r0
		if (!success)
 800fb88:	b92b      	cbnz	r3, 800fb96 <_ZN13Communication4SpinEv+0x6a>
 800fb8a:	4620      	mov	r0, r4
 800fb8c:	f850 1f30 	ldr.w	r1, [r0, #48]!
      { return _M_erase(begin() + (__position - cbegin())); }
 800fb90:	4441      	add	r1, r8
 800fb92:	f7ff fb77 	bl	800f284 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
		message.source_address = address; // set the source address as the module address
 800fb96:	7d23      	ldrb	r3, [r4, #20]
		HAL_StatusTypeDef status = protocol->Send(message);
 800fb98:	a902      	add	r1, sp, #8
 800fb9a:	a807      	add	r0, sp, #28
		message.source_address = address; // set the source address as the module address
 800fb9c:	f88d 3019 	strb.w	r3, [sp, #25]
		HAL_StatusTypeDef status = protocol->Send(message);
 800fba0:	6833      	ldr	r3, [r6, #0]
 800fba2:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800fba6:	f7ff ffb4 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 800fbaa:	a907      	add	r1, sp, #28
 800fbac:	4630      	mov	r0, r6
 800fbae:	47c8      	blx	r9
 800fbb0:	4606      	mov	r6, r0
      }
 800fbb2:	a808      	add	r0, sp, #32
 800fbb4:	f7f1 f828 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (status == HAL_OK || status == HAL_ERROR)
 800fbb8:	2e01      	cmp	r6, #1
 800fbba:	d809      	bhi.n	800fbd0 <_ZN13Communication4SpinEv+0xa4>
 800fbbc:	4620      	mov	r0, r4
 800fbbe:	f850 1f30 	ldr.w	r1, [r0, #48]!
      { return _M_erase(begin() + (__position - cbegin())); }
 800fbc2:	4441      	add	r1, r8
 800fbc4:	f7ff fb5e 	bl	800f284 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
      }
 800fbc8:	a803      	add	r0, sp, #12
 800fbca:	f7f1 f81d 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800fbce:	e7b8      	b.n	800fb42 <_ZN13Communication4SpinEv+0x16>
			index++;
 800fbd0:	3501      	adds	r5, #1
 800fbd2:	b2ed      	uxtb	r5, r5
 800fbd4:	e7f8      	b.n	800fbc8 <_ZN13Communication4SpinEv+0x9c>
 800fbd6:	bf00      	nop
 800fbd8:	cccccccd 	.word	0xcccccccd

0800fbdc <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800fbdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fbe0:	e9d0 7900 	ldrd	r7, r9, [r0]
 800fbe4:	4b3f      	ldr	r3, [pc, #252]	@ (800fce4 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x108>)
 800fbe6:	4606      	mov	r6, r0
 800fbe8:	eba9 0507 	sub.w	r5, r9, r7
 800fbec:	4688      	mov	r8, r1
 800fbee:	4614      	mov	r4, r2
 800fbf0:	10ad      	asrs	r5, r5, #2
 800fbf2:	435d      	muls	r5, r3
	if (max_size() - size() < __n)
 800fbf4:	4b3c      	ldr	r3, [pc, #240]	@ (800fce8 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x10c>)
 800fbf6:	429d      	cmp	r5, r3
 800fbf8:	d102      	bne.n	800fc00 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 800fbfa:	483c      	ldr	r0, [pc, #240]	@ (800fcec <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x110>)
 800fbfc:	f00c f8c0 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 800fc00:	45b9      	cmp	r9, r7
 800fc02:	bf14      	ite	ne
 800fc04:	462a      	movne	r2, r5
 800fc06:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 800fc08:	eba1 0b07 	sub.w	fp, r1, r7
 800fc0c:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800fc0e:	d22d      	bcs.n	800fc6c <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fc10:	b375      	cbz	r5, 800fc70 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800fc12:	429d      	cmp	r5, r3
 800fc14:	bf28      	it	cs
 800fc16:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800fc18:	2014      	movs	r0, #20
 800fc1a:	4368      	muls	r0, r5
 800fc1c:	f00b fffb 	bl	801bc16 <_Znwj>
 800fc20:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800fc22:	4621      	mov	r1, r4
 800fc24:	eb0a 000b 	add.w	r0, sl, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fc28:	463c      	mov	r4, r7
      _ForwardIterator __cur = __result;
 800fc2a:	46d3      	mov	fp, sl
 800fc2c:	f7ff ff71 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
      for (; __first != __last; ++__first, (void)++__cur)
 800fc30:	45a0      	cmp	r8, r4
 800fc32:	f04f 0300 	mov.w	r3, #0
 800fc36:	f10b 0b14 	add.w	fp, fp, #20
 800fc3a:	d11b      	bne.n	800fc74 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800fc3c:	f04f 0800 	mov.w	r8, #0
 800fc40:	454c      	cmp	r4, r9
 800fc42:	465b      	mov	r3, fp
 800fc44:	f10b 0b14 	add.w	fp, fp, #20
 800fc48:	d12f      	bne.n	800fcaa <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xce>
	if (__p)
 800fc4a:	b137      	cbz	r7, 800fc5a <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
 800fc4c:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800fc4e:	4638      	mov	r0, r7
 800fc50:	9301      	str	r3, [sp, #4]
 800fc52:	1bc9      	subs	r1, r1, r7
 800fc54:	f00b ffba 	bl	801bbcc <_ZdlPvj>
 800fc58:	9b01      	ldr	r3, [sp, #4]
      this->_M_impl._M_finish = __new_finish;
 800fc5a:	e9c6 a300 	strd	sl, r3, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800fc5e:	2314      	movs	r3, #20
 800fc60:	fb03 a305 	mla	r3, r3, r5, sl
 800fc64:	60b3      	str	r3, [r6, #8]
    }
 800fc66:	b003      	add	sp, #12
 800fc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc6c:	461d      	mov	r5, r3
 800fc6e:	e7d3      	b.n	800fc18 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fc70:	46aa      	mov	sl, r5
 800fc72:	e7d6      	b.n	800fc22 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 800fc74:	7822      	ldrb	r2, [r4, #0]
      }
 800fc76:	1d20      	adds	r0, r4, #4
 800fc78:	f80b 2c14 	strb.w	r2, [fp, #-20]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800fc7c:	6862      	ldr	r2, [r4, #4]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800fc7e:	6063      	str	r3, [r4, #4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800fc80:	f84b 2c10 	str.w	r2, [fp, #-16]
 800fc84:	68a2      	ldr	r2, [r4, #8]
 800fc86:	f84b 2c0c 	str.w	r2, [fp, #-12]
	  _M_end_of_storage(__x._M_end_of_storage)
 800fc8a:	68e2      	ldr	r2, [r4, #12]
 800fc8c:	f84b 2c08 	str.w	r2, [fp, #-8]
 800fc90:	7c22      	ldrb	r2, [r4, #16]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800fc92:	e9c4 3302 	strd	r3, r3, [r4, #8]
 800fc96:	f80b 2c04 	strb.w	r2, [fp, #-4]
 800fc9a:	3414      	adds	r4, #20
 800fc9c:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 800fca0:	f80b 2c03 	strb.w	r2, [fp, #-3]
      }
 800fca4:	f7f0 ffb0 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800fca8:	e7c2      	b.n	800fc30 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
 800fcaa:	7823      	ldrb	r3, [r4, #0]
 800fcac:	1d20      	adds	r0, r4, #4
 800fcae:	f80b 3c14 	strb.w	r3, [fp, #-20]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800fcb2:	6863      	ldr	r3, [r4, #4]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800fcb4:	f8c4 8004 	str.w	r8, [r4, #4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800fcb8:	f84b 3c10 	str.w	r3, [fp, #-16]
 800fcbc:	68a3      	ldr	r3, [r4, #8]
 800fcbe:	f84b 3c0c 	str.w	r3, [fp, #-12]
	  _M_end_of_storage(__x._M_end_of_storage)
 800fcc2:	68e3      	ldr	r3, [r4, #12]
 800fcc4:	f84b 3c08 	str.w	r3, [fp, #-8]
 800fcc8:	7c23      	ldrb	r3, [r4, #16]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800fcca:	e9c4 8802 	strd	r8, r8, [r4, #8]
 800fcce:	f80b 3c04 	strb.w	r3, [fp, #-4]
 800fcd2:	3414      	adds	r4, #20
 800fcd4:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 800fcd8:	f80b 3c03 	strb.w	r3, [fp, #-3]
      }
 800fcdc:	f7f0 ff94 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800fce0:	e7ae      	b.n	800fc40 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x64>
 800fce2:	bf00      	nop
 800fce4:	cccccccd 	.word	0xcccccccd
 800fce8:	06666666 	.word	0x06666666
 800fcec:	0801c592 	.word	0x0801c592

0800fcf0 <_ZN13Communication4SendE13MessageHeader>:
HAL_StatusTypeDef Communication::Send(MessageHeader message) {
 800fcf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcf2:	b087      	sub	sp, #28
 800fcf4:	460d      	mov	r5, r1
	CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 800fcf6:	7809      	ldrb	r1, [r1, #0]
HAL_StatusTypeDef Communication::Send(MessageHeader message) {
 800fcf8:	4604      	mov	r4, r0
	CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 800fcfa:	f10d 0203 	add.w	r2, sp, #3
 800fcfe:	f7ff f9f5 	bl	800f0ec <_ZN13Communication12FindProtocolEhPb>
	if (!success) return HAL_ERROR;
 800fd02:	f89d 3003 	ldrb.w	r3, [sp, #3]
	CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 800fd06:	4606      	mov	r6, r0
	if (!success) return HAL_ERROR;
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d032      	beq.n	800fd72 <_ZN13Communication4SendE13MessageHeader+0x82>
	message.source_address = address; // set the source address as the module address
 800fd0c:	7d23      	ldrb	r3, [r4, #20]
	CommunicationLED(leds, message.interface);
 800fd0e:	7829      	ldrb	r1, [r5, #0]
	message.source_address = address; // set the source address as the module address
 800fd10:	746b      	strb	r3, [r5, #17]
	CommunicationLED(leds, message.interface);
 800fd12:	6920      	ldr	r0, [r4, #16]
 800fd14:	f7fe fe7b 	bl	800ea0e <_Z16CommunicationLEDP4LEDSh>
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800fd18:	f04f 31ff 	mov.w	r1, #4294967295
 800fd1c:	6820      	ldr	r0, [r4, #0]
 800fd1e:	f7fc fd39 	bl	800c794 <osSemaphoreAcquire>
	HAL_StatusTypeDef status = protocol->Send(message);
 800fd22:	6833      	ldr	r3, [r6, #0]
 800fd24:	4629      	mov	r1, r5
 800fd26:	a801      	add	r0, sp, #4
 800fd28:	689f      	ldr	r7, [r3, #8]
 800fd2a:	f7ff fef2 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 800fd2e:	a901      	add	r1, sp, #4
 800fd30:	4630      	mov	r0, r6
 800fd32:	47b8      	blx	r7
 800fd34:	4606      	mov	r6, r0
 800fd36:	a802      	add	r0, sp, #8
 800fd38:	f7f0 ff66 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (status == HAL_BUSY || status == HAL_TIMEOUT) {
 800fd3c:	1eb3      	subs	r3, r6, #2
 800fd3e:	b2db      	uxtb	r3, r3
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d809      	bhi.n	800fd58 <_ZN13Communication4SendE13MessageHeader+0x68>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800fd44:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	@ 0x34
 800fd48:	4298      	cmp	r0, r3
 800fd4a:	d00b      	beq.n	800fd64 <_ZN13Communication4SendE13MessageHeader+0x74>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800fd4c:	4629      	mov	r1, r5
 800fd4e:	f7ff fee0 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
	    ++this->_M_impl._M_finish;
 800fd52:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fd54:	3314      	adds	r3, #20
 800fd56:	6363      	str	r3, [r4, #52]	@ 0x34
	osSemaphoreRelease(CommunicationSemaphore);
 800fd58:	6820      	ldr	r0, [r4, #0]
 800fd5a:	f7fc fd4f 	bl	800c7fc <osSemaphoreRelease>
}
 800fd5e:	4630      	mov	r0, r6
 800fd60:	b007      	add	sp, #28
 800fd62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  _M_realloc_insert(end(), __x);
 800fd64:	4601      	mov	r1, r0
 800fd66:	462a      	mov	r2, r5
 800fd68:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800fd6c:	f7ff ff36 	bl	800fbdc <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 800fd70:	e7f2      	b.n	800fd58 <_ZN13Communication4SendE13MessageHeader+0x68>
	if (!success) return HAL_ERROR;
 800fd72:	2601      	movs	r6, #1
 800fd74:	e7f3      	b.n	800fd5e <_ZN13Communication4SendE13MessageHeader+0x6e>

0800fd76 <_ZN23SubscriberConfigurationC1ERKS_>:
 800fd76:	b570      	push	{r4, r5, r6, lr}
 800fd78:	880b      	ldrh	r3, [r1, #0]
 800fd7a:	4604      	mov	r4, r0
 800fd7c:	460d      	mov	r5, r1
 800fd7e:	8003      	strh	r3, [r0, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800fd80:	2300      	movs	r3, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fd82:	e9d1 2601 	ldrd	r2, r6, [r1, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800fd86:	e9c0 3301 	strd	r3, r3, [r0, #4]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fd8a:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 800fd8c:	60c3      	str	r3, [r0, #12]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fd8e:	d043      	beq.n	800fe18 <_ZN23SubscriberConfigurationC1ERKS_+0xa2>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800fd90:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fd94:	429e      	cmp	r6, r3
 800fd96:	d301      	bcc.n	800fd9c <_ZN23SubscriberConfigurationC1ERKS_+0x26>
	      std::__throw_bad_array_new_length();
 800fd98:	f00b ffef 	bl	801bd7a <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800fd9c:	4630      	mov	r0, r6
 800fd9e:	f00b ff3a 	bl	801bc16 <_Znwj>
 800fda2:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800fda4:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800fda6:	e9c4 3301 	strd	r3, r3, [r4, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800fdaa:	60e6      	str	r6, [r4, #12]
      : _M_current(__i) { }
 800fdac:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
	  if (_Num)
 800fdb0:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 800fdb2:	eba2 0601 	sub.w	r6, r2, r1
	  if (_Num)
 800fdb6:	d004      	beq.n	800fdc2 <_ZN23SubscriberConfigurationC1ERKS_+0x4c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800fdb8:	4618      	mov	r0, r3
 800fdba:	4632      	mov	r2, r6
 800fdbc:	f00c fa62 	bl	801c284 <memmove>
 800fdc0:	4603      	mov	r3, r0
	  return __result + _Num;
 800fdc2:	4433      	add	r3, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fdc4:	e9d5 2604 	ldrd	r2, r6, [r5, #16]
	this->_M_impl._M_finish =
 800fdc8:	60a3      	str	r3, [r4, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800fdca:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fdcc:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 800fdce:	61a3      	str	r3, [r4, #24]
 800fdd0:	e9c4 3304 	strd	r3, r3, [r4, #16]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fdd4:	d022      	beq.n	800fe1c <_ZN23SubscriberConfigurationC1ERKS_+0xa6>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800fdd6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fdda:	429e      	cmp	r6, r3
 800fddc:	d2dc      	bcs.n	800fd98 <_ZN23SubscriberConfigurationC1ERKS_+0x22>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800fdde:	4630      	mov	r0, r6
 800fde0:	f00b ff19 	bl	801bc16 <_Znwj>
 800fde4:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800fde6:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800fde8:	e9c4 3304 	strd	r3, r3, [r4, #16]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800fdec:	61a6      	str	r6, [r4, #24]
 800fdee:	e9d5 1204 	ldrd	r1, r2, [r5, #16]
	  if (_Num)
 800fdf2:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 800fdf4:	eba2 0601 	sub.w	r6, r2, r1
	  if (_Num)
 800fdf8:	d004      	beq.n	800fe04 <_ZN23SubscriberConfigurationC1ERKS_+0x8e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	4632      	mov	r2, r6
 800fdfe:	f00c fa41 	bl	801c284 <memmove>
 800fe02:	4603      	mov	r3, r0
	  return __result + _Num;
 800fe04:	4433      	add	r3, r6
 800fe06:	f105 011c 	add.w	r1, r5, #28
 800fe0a:	f104 001c 	add.w	r0, r4, #28
	this->_M_impl._M_finish =
 800fe0e:	6163      	str	r3, [r4, #20]
 800fe10:	f7f0 fff4 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 800fe14:	4620      	mov	r0, r4
 800fe16:	bd70      	pop	{r4, r5, r6, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fe18:	4633      	mov	r3, r6
 800fe1a:	e7c3      	b.n	800fda4 <_ZN23SubscriberConfigurationC1ERKS_+0x2e>
 800fe1c:	4633      	mov	r3, r6
 800fe1e:	e7e2      	b.n	800fde6 <_ZN23SubscriberConfigurationC1ERKS_+0x70>

0800fe20 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_>:
 *
 * @param input information: input register and interface information
 * @param input data: published data for the input register
 */
template<typename T>
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800fe20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe24:	b090      	sub	sp, #64	@ 0x40
 800fe26:	4605      	mov	r5, r0
	uint8_t index = 0;
	for (SubscriberConfiguration configuration : configurations) {
 800fe28:	2600      	movs	r6, #0
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800fe2a:	ac03      	add	r4, sp, #12
 800fe2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 800fe30:	e9d0 7903 	ldrd	r7, r9, [r0, #12]
 800fe34:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	for (SubscriberConfiguration configuration : configurations) {
 800fe38:	45b9      	cmp	r9, r7
 800fe3a:	d102      	bne.n	800fe42 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x22>
				}
			}
		}
		index++;
	}
}
 800fe3c:	b010      	add	sp, #64	@ 0x40
 800fe3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (SubscriberConfiguration configuration : configurations) {
 800fe42:	4639      	mov	r1, r7
 800fe44:	a806      	add	r0, sp, #24
 800fe46:	f7ff ff96 	bl	800fd76 <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 800fe4a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fe4e:	b37b      	cbz	r3, 800feb0 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x90>
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 800fe50:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800fe54:	4628      	mov	r0, r5
 800fe56:	f89d a018 	ldrb.w	sl, [sp, #24]
 800fe5a:	f8ad 3000 	strh.w	r3, [sp]
 800fe5e:	4651      	mov	r1, sl
 800fe60:	e894 000c 	ldmia.w	r4, {r2, r3}
 800fe64:	f009 fc68 	bl	8019738 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 800fe68:	b310      	cbz	r0, 800feb0 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x90>
				if (AddressAccepted(configuration.ID, information.interface.address)) {
 800fe6a:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800fe6e:	4651      	mov	r1, sl
 800fe70:	4628      	mov	r0, r5
 800fe72:	f009 fb42 	bl	80194fa <_ZN17MasterSubscribers15AddressAcceptedEhh>
 800fe76:	b1d8      	cbz	r0, 800feb0 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x90>
					CommunicationLED(leds, information.interface.interface);
 800fe78:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800fe7c:	6868      	ldr	r0, [r5, #4]
 800fe7e:	f7fe fdc6 	bl	800ea0e <_Z16CommunicationLEDP4LEDSh>
					switch (information.register_.type) {
 800fe82:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800fe86:	2b08      	cmp	r3, #8
 800fe88:	d812      	bhi.n	800feb0 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x90>
 800fe8a:	e8df f003 	tbb	[pc, r3]
 800fe8e:	1105      	.short	0x1105
 800fe90:	11211117 	.word	0x11211117
 800fe94:	1111      	.short	0x1111
 800fe96:	2b          	.byte	0x2b
 800fe97:	00          	.byte	0x00
	return *(this->_M_impl._M_start + __n);
 800fe98:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT8(information, (uint8_t*) data);
 800fe9a:	69aa      	ldr	r2, [r5, #24]
 800fe9c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fea0:	6803      	ldr	r3, [r0, #0]
 800fea2:	f8cd 8000 	str.w	r8, [sp]
 800fea6:	f8d3 a000 	ldr.w	sl, [r3]
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800feaa:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800feae:	47d0      	blx	sl
	for (SubscriberConfiguration configuration : configurations) {
 800feb0:	a806      	add	r0, sp, #24
 800feb2:	3601      	adds	r6, #1
 800feb4:	3728      	adds	r7, #40	@ 0x28
 800feb6:	f7ff fc7f 	bl	800f7b8 <_ZN23SubscriberConfigurationD1Ev>
	return *this;
 800feba:	e7bd      	b.n	800fe38 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x18>
 800febc:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT32(information, (uint32_t*) data);
 800febe:	69aa      	ldr	r2, [r5, #24]
 800fec0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fec4:	6803      	ldr	r3, [r0, #0]
 800fec6:	f8cd 8000 	str.w	r8, [sp]
 800feca:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800fece:	e7ec      	b.n	800feaa <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x8a>
 800fed0:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveINT8(information, (int8_t*) data);
 800fed2:	69aa      	ldr	r2, [r5, #24]
 800fed4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fed8:	6803      	ldr	r3, [r0, #0]
 800feda:	f8cd 8000 	str.w	r8, [sp]
 800fede:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800fee2:	e7e2      	b.n	800feaa <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x8a>
 800fee4:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800fee6:	69aa      	ldr	r2, [r5, #24]
 800fee8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800feec:	6803      	ldr	r3, [r0, #0]
 800feee:	f8cd 8000 	str.w	r8, [sp]
 800fef2:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800fef6:	e7d8      	b.n	800feaa <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x8a>

0800fef8 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_>:
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800fef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fefc:	b090      	sub	sp, #64	@ 0x40
 800fefe:	4605      	mov	r5, r0
	for (SubscriberConfiguration configuration : configurations) {
 800ff00:	2600      	movs	r6, #0
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800ff02:	ac03      	add	r4, sp, #12
 800ff04:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 800ff08:	e9d0 7903 	ldrd	r7, r9, [r0, #12]
 800ff0c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	for (SubscriberConfiguration configuration : configurations) {
 800ff10:	45b9      	cmp	r9, r7
 800ff12:	d102      	bne.n	800ff1a <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x22>
}
 800ff14:	b010      	add	sp, #64	@ 0x40
 800ff16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (SubscriberConfiguration configuration : configurations) {
 800ff1a:	4639      	mov	r1, r7
 800ff1c:	a806      	add	r0, sp, #24
 800ff1e:	f7ff ff2a 	bl	800fd76 <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 800ff22:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ff26:	b37b      	cbz	r3, 800ff88 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x90>
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 800ff28:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	f89d a018 	ldrb.w	sl, [sp, #24]
 800ff32:	f8ad 3000 	strh.w	r3, [sp]
 800ff36:	4651      	mov	r1, sl
 800ff38:	e894 000c 	ldmia.w	r4, {r2, r3}
 800ff3c:	f009 fbfc 	bl	8019738 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 800ff40:	b310      	cbz	r0, 800ff88 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x90>
				if (AddressAccepted(configuration.ID, information.interface.address)) {
 800ff42:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800ff46:	4651      	mov	r1, sl
 800ff48:	4628      	mov	r0, r5
 800ff4a:	f009 fad6 	bl	80194fa <_ZN17MasterSubscribers15AddressAcceptedEhh>
 800ff4e:	b1d8      	cbz	r0, 800ff88 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x90>
					CommunicationLED(leds, information.interface.interface);
 800ff50:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800ff54:	6868      	ldr	r0, [r5, #4]
 800ff56:	f7fe fd5a 	bl	800ea0e <_Z16CommunicationLEDP4LEDSh>
					switch (information.register_.type) {
 800ff5a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800ff5e:	2b08      	cmp	r3, #8
 800ff60:	d812      	bhi.n	800ff88 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x90>
 800ff62:	e8df f003 	tbb	[pc, r3]
 800ff66:	1105      	.short	0x1105
 800ff68:	11211117 	.word	0x11211117
 800ff6c:	1111      	.short	0x1111
 800ff6e:	2b          	.byte	0x2b
 800ff6f:	00          	.byte	0x00
 800ff70:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT8(information, (uint8_t*) data);
 800ff72:	69aa      	ldr	r2, [r5, #24]
 800ff74:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ff78:	6803      	ldr	r3, [r0, #0]
 800ff7a:	f8cd 8000 	str.w	r8, [sp]
 800ff7e:	f8d3 a000 	ldr.w	sl, [r3]
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800ff82:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ff86:	47d0      	blx	sl
	for (SubscriberConfiguration configuration : configurations) {
 800ff88:	a806      	add	r0, sp, #24
 800ff8a:	3601      	adds	r6, #1
 800ff8c:	3728      	adds	r7, #40	@ 0x28
 800ff8e:	f7ff fc13 	bl	800f7b8 <_ZN23SubscriberConfigurationD1Ev>
 800ff92:	e7bd      	b.n	800ff10 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x18>
 800ff94:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT32(information, (uint32_t*) data);
 800ff96:	69aa      	ldr	r2, [r5, #24]
 800ff98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ff9c:	6803      	ldr	r3, [r0, #0]
 800ff9e:	f8cd 8000 	str.w	r8, [sp]
 800ffa2:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800ffa6:	e7ec      	b.n	800ff82 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x8a>
 800ffa8:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveINT8(information, (int8_t*) data);
 800ffaa:	69aa      	ldr	r2, [r5, #24]
 800ffac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ffb0:	6803      	ldr	r3, [r0, #0]
 800ffb2:	f8cd 8000 	str.w	r8, [sp]
 800ffb6:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800ffba:	e7e2      	b.n	800ff82 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x8a>
 800ffbc:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 800ffbe:	69aa      	ldr	r2, [r5, #24]
 800ffc0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ffc4:	6803      	ldr	r3, [r0, #0]
 800ffc6:	f8cd 8000 	str.w	r8, [sp]
 800ffca:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800ffce:	e7d8      	b.n	800ff82 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x8a>

0800ffd0 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_>:
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800ffd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffd4:	b090      	sub	sp, #64	@ 0x40
 800ffd6:	4605      	mov	r5, r0
	for (SubscriberConfiguration configuration : configurations) {
 800ffd8:	2600      	movs	r6, #0
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 800ffda:	ac03      	add	r4, sp, #12
 800ffdc:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 800ffe0:	e9d0 7903 	ldrd	r7, r9, [r0, #12]
 800ffe4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	for (SubscriberConfiguration configuration : configurations) {
 800ffe8:	45b9      	cmp	r9, r7
 800ffea:	d102      	bne.n	800fff2 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x22>
}
 800ffec:	b010      	add	sp, #64	@ 0x40
 800ffee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (SubscriberConfiguration configuration : configurations) {
 800fff2:	4639      	mov	r1, r7
 800fff4:	a806      	add	r0, sp, #24
 800fff6:	f7ff febe 	bl	800fd76 <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 800fffa:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fffe:	b37b      	cbz	r3, 8010060 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x90>
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 8010000:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010004:	4628      	mov	r0, r5
 8010006:	f89d a018 	ldrb.w	sl, [sp, #24]
 801000a:	f8ad 3000 	strh.w	r3, [sp]
 801000e:	4651      	mov	r1, sl
 8010010:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010014:	f009 fb90 	bl	8019738 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 8010018:	b310      	cbz	r0, 8010060 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x90>
				if (AddressAccepted(configuration.ID, information.interface.address)) {
 801001a:	f89d 2013 	ldrb.w	r2, [sp, #19]
 801001e:	4651      	mov	r1, sl
 8010020:	4628      	mov	r0, r5
 8010022:	f009 fa6a 	bl	80194fa <_ZN17MasterSubscribers15AddressAcceptedEhh>
 8010026:	b1d8      	cbz	r0, 8010060 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x90>
					CommunicationLED(leds, information.interface.interface);
 8010028:	f89d 1012 	ldrb.w	r1, [sp, #18]
 801002c:	6868      	ldr	r0, [r5, #4]
 801002e:	f7fe fcee 	bl	800ea0e <_Z16CommunicationLEDP4LEDSh>
					switch (information.register_.type) {
 8010032:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8010036:	2b08      	cmp	r3, #8
 8010038:	d812      	bhi.n	8010060 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x90>
 801003a:	e8df f003 	tbb	[pc, r3]
 801003e:	1105      	.short	0x1105
 8010040:	11211117 	.word	0x11211117
 8010044:	1111      	.short	0x1111
 8010046:	2b          	.byte	0x2b
 8010047:	00          	.byte	0x00
 8010048:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT8(information, (uint8_t*) data);
 801004a:	69aa      	ldr	r2, [r5, #24]
 801004c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010050:	6803      	ldr	r3, [r0, #0]
 8010052:	f8cd 8000 	str.w	r8, [sp]
 8010056:	f8d3 a000 	ldr.w	sl, [r3]
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 801005a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801005e:	47d0      	blx	sl
	for (SubscriberConfiguration configuration : configurations) {
 8010060:	a806      	add	r0, sp, #24
 8010062:	3601      	adds	r6, #1
 8010064:	3728      	adds	r7, #40	@ 0x28
 8010066:	f7ff fba7 	bl	800f7b8 <_ZN23SubscriberConfigurationD1Ev>
 801006a:	e7bd      	b.n	800ffe8 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x18>
 801006c:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT32(information, (uint32_t*) data);
 801006e:	69aa      	ldr	r2, [r5, #24]
 8010070:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010074:	6803      	ldr	r3, [r0, #0]
 8010076:	f8cd 8000 	str.w	r8, [sp]
 801007a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801007e:	e7ec      	b.n	801005a <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x8a>
 8010080:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveINT8(information, (int8_t*) data);
 8010082:	69aa      	ldr	r2, [r5, #24]
 8010084:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010088:	6803      	ldr	r3, [r0, #0]
 801008a:	f8cd 8000 	str.w	r8, [sp]
 801008e:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8010092:	e7e2      	b.n	801005a <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x8a>
 8010094:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 8010096:	69aa      	ldr	r2, [r5, #24]
 8010098:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801009c:	6803      	ldr	r3, [r0, #0]
 801009e:	f8cd 8000 	str.w	r8, [sp]
 80100a2:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 80100a6:	e7d8      	b.n	801005a <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x8a>

080100a8 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_>:
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 80100a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100ac:	b090      	sub	sp, #64	@ 0x40
 80100ae:	4605      	mov	r5, r0
	for (SubscriberConfiguration configuration : configurations) {
 80100b0:	2600      	movs	r6, #0
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 80100b2:	ac03      	add	r4, sp, #12
 80100b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 80100b8:	e9d0 7903 	ldrd	r7, r9, [r0, #12]
 80100bc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	for (SubscriberConfiguration configuration : configurations) {
 80100c0:	45b9      	cmp	r9, r7
 80100c2:	d102      	bne.n	80100ca <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x22>
}
 80100c4:	b010      	add	sp, #64	@ 0x40
 80100c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (SubscriberConfiguration configuration : configurations) {
 80100ca:	4639      	mov	r1, r7
 80100cc:	a806      	add	r0, sp, #24
 80100ce:	f7ff fe52 	bl	800fd76 <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 80100d2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80100d6:	b37b      	cbz	r3, 8010138 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x90>
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 80100d8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80100dc:	4628      	mov	r0, r5
 80100de:	f89d a018 	ldrb.w	sl, [sp, #24]
 80100e2:	f8ad 3000 	strh.w	r3, [sp]
 80100e6:	4651      	mov	r1, sl
 80100e8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80100ec:	f009 fb24 	bl	8019738 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 80100f0:	b310      	cbz	r0, 8010138 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x90>
				if (AddressAccepted(configuration.ID, information.interface.address)) {
 80100f2:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80100f6:	4651      	mov	r1, sl
 80100f8:	4628      	mov	r0, r5
 80100fa:	f009 f9fe 	bl	80194fa <_ZN17MasterSubscribers15AddressAcceptedEhh>
 80100fe:	b1d8      	cbz	r0, 8010138 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x90>
					CommunicationLED(leds, information.interface.interface);
 8010100:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8010104:	6868      	ldr	r0, [r5, #4]
 8010106:	f7fe fc82 	bl	800ea0e <_Z16CommunicationLEDP4LEDSh>
					switch (information.register_.type) {
 801010a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 801010e:	2b08      	cmp	r3, #8
 8010110:	d812      	bhi.n	8010138 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x90>
 8010112:	e8df f003 	tbb	[pc, r3]
 8010116:	1105      	.short	0x1105
 8010118:	11211117 	.word	0x11211117
 801011c:	1111      	.short	0x1111
 801011e:	2b          	.byte	0x2b
 801011f:	00          	.byte	0x00
 8010120:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT8(information, (uint8_t*) data);
 8010122:	69aa      	ldr	r2, [r5, #24]
 8010124:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010128:	6803      	ldr	r3, [r0, #0]
 801012a:	f8cd 8000 	str.w	r8, [sp]
 801012e:	f8d3 a000 	ldr.w	sl, [r3]
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 8010132:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010136:	47d0      	blx	sl
	for (SubscriberConfiguration configuration : configurations) {
 8010138:	a806      	add	r0, sp, #24
 801013a:	3601      	adds	r6, #1
 801013c:	3728      	adds	r7, #40	@ 0x28
 801013e:	f7ff fb3b 	bl	800f7b8 <_ZN23SubscriberConfigurationD1Ev>
 8010142:	e7bd      	b.n	80100c0 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x18>
 8010144:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT32(information, (uint32_t*) data);
 8010146:	69aa      	ldr	r2, [r5, #24]
 8010148:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801014c:	6803      	ldr	r3, [r0, #0]
 801014e:	f8cd 8000 	str.w	r8, [sp]
 8010152:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8010156:	e7ec      	b.n	8010132 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x8a>
 8010158:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveINT8(information, (int8_t*) data);
 801015a:	69aa      	ldr	r2, [r5, #24]
 801015c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010160:	6803      	ldr	r3, [r0, #0]
 8010162:	f8cd 8000 	str.w	r8, [sp]
 8010166:	f8d3 a008 	ldr.w	sl, [r3, #8]
 801016a:	e7e2      	b.n	8010132 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x8a>
 801016c:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 801016e:	69aa      	ldr	r2, [r5, #24]
 8010170:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010174:	6803      	ldr	r3, [r0, #0]
 8010176:	f8cd 8000 	str.w	r8, [sp]
 801017a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 801017e:	e7d8      	b.n	8010132 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x8a>

08010180 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>:
 * @param input length: the number of values to extract
 * @param output success: whether successful
 * @return a vector with extracted values
 */
template<typename T>
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8010180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010184:	2600      	movs	r6, #0
 8010186:	4605      	mov	r5, r0
 8010188:	4688      	mov	r8, r1
 801018a:	4691      	mov	r9, r2
 801018c:	ed2d 8b02 	vpush	{d8}
 8010190:	b087      	sub	sp, #28
 8010192:	6086      	str	r6, [r0, #8]
 8010194:	9301      	str	r3, [sp, #4]
 8010196:	e9c0 6600 	strd	r6, r6, [r0]
 801019a:	b2f4      	uxtb	r4, r6
	std::vector<T> data;
	uint8_t type_length = sizeof(T);

	for (uint8_t index = 0; index < length; index++) {
 801019c:	9b01      	ldr	r3, [sp, #4]
 801019e:	429c      	cmp	r4, r3
 80101a0:	db05      	blt.n	80101ae <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x2e>
		if (not *success)
			return data;
		data.push_back(element);
	}
	return data;
}
 80101a2:	4628      	mov	r0, r5
 80101a4:	b007      	add	sp, #28
 80101a6:	ecbd 8b02 	vpop	{d8}
 80101aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 80101ae:	4641      	mov	r1, r8
 80101b0:	a803      	add	r0, sp, #12
 80101b2:	f7f0 fe23 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80101b6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80101b8:	eb09 0184 	add.w	r1, r9, r4, lsl #2
 80101bc:	a803      	add	r0, sp, #12
 80101be:	b289      	uxth	r1, r1
 80101c0:	f7fe feb8 	bl	800ef34 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 80101c4:	a803      	add	r0, sp, #12
 80101c6:	eeb0 8a40 	vmov.f32	s16, s0
 80101ca:	f7f0 fd1d 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 80101ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80101d0:	781b      	ldrb	r3, [r3, #0]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d0e5      	beq.n	80101a2 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x22>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80101d6:	e9d5 4301 	ldrd	r4, r3, [r5, #4]
 80101da:	429c      	cmp	r4, r3
 80101dc:	d004      	beq.n	80101e8 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x68>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80101de:	eca4 8a01 	vstmia	r4!, {s16}
	    ++this->_M_impl._M_finish;
 80101e2:	606c      	str	r4, [r5, #4]
	for (uint8_t index = 0; index < length; index++) {
 80101e4:	3601      	adds	r6, #1
 80101e6:	e7d8      	b.n	801019a <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x1a>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80101e8:	2101      	movs	r1, #1
 80101ea:	4a13      	ldr	r2, [pc, #76]	@ (8010238 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xb8>)
 80101ec:	4628      	mov	r0, r5
 80101ee:	f7ff fc39 	bl	800fa64 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 80101f2:	682f      	ldr	r7, [r5, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80101f4:	4682      	mov	sl, r0
      pointer __new_start(this->_M_allocate(__len));
 80101f6:	f7fe fd32 	bl	800ec5e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
    { return __lhs.base() - __rhs.base(); }
 80101fa:	eba4 0b07 	sub.w	fp, r4, r7
 80101fe:	4604      	mov	r4, r0
 8010200:	eb00 010b 	add.w	r1, r0, fp
      if (__count > 0)
 8010204:	f1bb 0f00 	cmp.w	fp, #0
 8010208:	ed81 8a00 	vstr	s16, [r1]
 801020c:	dd03      	ble.n	8010216 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x96>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801020e:	465a      	mov	r2, fp
 8010210:	4639      	mov	r1, r7
 8010212:	f00c f837 	bl	801c284 <memmove>
	      ++__new_finish;
 8010216:	f10b 0204 	add.w	r2, fp, #4
 801021a:	eb04 0b02 	add.w	fp, r4, r2
	if (__p)
 801021e:	b12f      	cbz	r7, 801022c <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xac>
		    this->_M_impl._M_end_of_storage - __old_start);
 8010220:	68a9      	ldr	r1, [r5, #8]
 8010222:	4638      	mov	r0, r7
 8010224:	1bc9      	subs	r1, r1, r7
 8010226:	1089      	asrs	r1, r1, #2
 8010228:	f7fe fd16 	bl	800ec58 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
      this->_M_impl._M_finish = __new_finish;
 801022c:	e9c5 4b00 	strd	r4, fp, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010230:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 8010234:	60ac      	str	r4, [r5, #8]
 8010236:	e7d5      	b.n	80101e4 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x64>
 8010238:	0801c592 	.word	0x0801c592

0801023c <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 801023c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010240:	ed2d 8b02 	vpush	{d8}
 8010244:	b085      	sub	sp, #20
 8010246:	4607      	mov	r7, r0
 8010248:	4688      	mov	r8, r1
 801024a:	4691      	mov	r9, r2
 801024c:	461d      	mov	r5, r3
 801024e:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 8010252:	2600      	movs	r6, #0
 8010254:	b2f4      	uxtb	r4, r6
	for (uint8_t index = 0; index < length; index++) {
 8010256:	42ac      	cmp	r4, r5
 8010258:	db04      	blt.n	8010264 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x28>
}
 801025a:	b005      	add	sp, #20
 801025c:	ecbd 8b02 	vpop	{d8}
 8010260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8010264:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010268:	4641      	mov	r1, r8
 801026a:	eb09 0484 	add.w	r4, r9, r4, lsl #2
 801026e:	a801      	add	r0, sp, #4
 8010270:	f7f0 fdc4 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010274:	4652      	mov	r2, sl
 8010276:	b2a1      	uxth	r1, r4
 8010278:	a801      	add	r0, sp, #4
 801027a:	f7fe fe5b 	bl	800ef34 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 801027e:	a801      	add	r0, sp, #4
 8010280:	eeb0 8a40 	vmov.f32	s16, s0
 8010284:	f7f0 fcc0 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 8010288:	f89a 3000 	ldrb.w	r3, [sl]
 801028c:	3601      	adds	r6, #1
 801028e:	2b00      	cmp	r3, #0
 8010290:	d0e3      	beq.n	801025a <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x1e>
		data[index] = element;
 8010292:	44bb      	add	fp, r7
 8010294:	ed8b 8a00 	vstr	s16, [fp]
	for (uint8_t index = 0; index < length; index++) {
 8010298:	e7dc      	b.n	8010254 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x18>

0801029a <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 801029a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801029e:	b08f      	sub	sp, #60	@ 0x3c
 80102a0:	461c      	mov	r4, r3
 80102a2:	4691      	mov	r9, r2
 80102a4:	468a      	mov	sl, r1
	T array_values[element.element_register.length];
 80102a6:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80102aa:	466a      	mov	r2, sp
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 80102ac:	af02      	add	r7, sp, #8
	T array_values[element.element_register.length];
 80102ae:	ea4f 0388 	mov.w	r3, r8, lsl #2
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80102b2:	3104      	adds	r1, #4
 80102b4:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 80102b8:	f107 060b 	add.w	r6, r7, #11
	T array_values[element.element_register.length];
 80102bc:	3307      	adds	r3, #7
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 80102be:	6078      	str	r0, [r7, #4]
	T array_values[element.element_register.length];
 80102c0:	08db      	lsrs	r3, r3, #3
 80102c2:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 80102c6:	469d      	mov	sp, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 80102c8:	2300      	movs	r3, #0
 80102ca:	e9c7 3303 	strd	r3, r3, [r7, #12]
 80102ce:	617b      	str	r3, [r7, #20]
 80102d0:	f10d 0b08 	add.w	fp, sp, #8
	if (not element.element_register.isArray) {
 80102d4:	f899 3003 	ldrb.w	r3, [r9, #3]
 80102d8:	bb93      	cbnz	r3, 8010340 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0xa6>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80102da:	4628      	mov	r0, r5
		data = &single_value;
 80102dc:	f107 0b18 	add.w	fp, r7, #24
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80102e0:	f7f0 fd8c 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		length_to_extract = 1;
 80102e4:	f04f 0801 	mov.w	r8, #1
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80102e8:	4632      	mov	r2, r6
 80102ea:	4621      	mov	r1, r4
 80102ec:	4628      	mov	r0, r5
 80102ee:	f7fe fe21 	bl	800ef34 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 80102f2:	4628      	mov	r0, r5
 80102f4:	ed87 0a06 	vstr	s0, [r7, #24]
 80102f8:	f7f0 fc86 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	subscriber_information.interface.interface = message.interface;
 80102fc:	f89a 3000 	ldrb.w	r3, [sl]
	return start_index + sizeof(T) * length_to_extract;
 8010300:	eb04 0488 	add.w	r4, r4, r8, lsl #2
	subscriber_information.length = length_to_extract;
 8010304:	f8a7 802c 	strh.w	r8, [r7, #44]	@ 0x2c
	subscriber_information.interface.interface = message.interface;
 8010308:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	return start_index + sizeof(T) * length_to_extract;
 801030c:	b2a4      	uxth	r4, r4
	subscriber_information.interface.address = message.source_address;
 801030e:	f89a 3011 	ldrb.w	r3, [sl, #17]
	subscriber_information.register_ = element.element_register;
 8010312:	e899 0003 	ldmia.w	r9, {r0, r1}
	subscriber_information.interface.address = message.source_address;
 8010316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	subscriber_information.register_ = element.element_register;
 801031a:	6278      	str	r0, [r7, #36]	@ 0x24
 801031c:	8539      	strh	r1, [r7, #40]	@ 0x28
	subscribers->Receive<T>(subscriber_information, data);
 801031e:	f8cd b000 	str.w	fp, [sp]
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8010328:	68c0      	ldr	r0, [r0, #12]
 801032a:	f7ff febd 	bl	80100a8 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_>
 801032e:	f107 000c 	add.w	r0, r7, #12
 8010332:	f7f1 ff9d 	bl	8002270 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
}
 8010336:	4620      	mov	r0, r4
 8010338:	3734      	adds	r7, #52	@ 0x34
 801033a:	46bd      	mov	sp, r7
 801033c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8010340:	f1b8 0f00 	cmp.w	r8, #0
 8010344:	d00d      	beq.n	8010362 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0xc8>
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8010346:	4628      	mov	r0, r5
 8010348:	f7f0 fd58 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801034c:	4658      	mov	r0, fp
 801034e:	4643      	mov	r3, r8
 8010350:	4622      	mov	r2, r4
 8010352:	4629      	mov	r1, r5
 8010354:	9600      	str	r6, [sp, #0]
 8010356:	f7ff ff71 	bl	801023c <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 801035a:	4628      	mov	r0, r5
 801035c:	f7f0 fc54 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = array_values;
 8010360:	e7cc      	b.n	80102fc <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x62>
		length_to_extract = message.payload[start_index];
 8010362:	f8da 3004 	ldr.w	r3, [sl, #4]
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010366:	f107 0018 	add.w	r0, r7, #24
		length_to_extract = message.payload[start_index];
 801036a:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 801036e:	3401      	adds	r4, #1
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010370:	f7f0 fd44 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010374:	f107 0118 	add.w	r1, r7, #24
		start_index++;
 8010378:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801037a:	4643      	mov	r3, r8
 801037c:	4628      	mov	r0, r5
 801037e:	9600      	str	r6, [sp, #0]
 8010380:	4622      	mov	r2, r4
 8010382:	f7ff fefd 	bl	8010180 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8010386:	4629      	mov	r1, r5
 8010388:	f107 000c 	add.w	r0, r7, #12
 801038c:	f7ff fa6a 	bl	800f864 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>
 8010390:	4628      	mov	r0, r5
 8010392:	f7f1 ff6d 	bl	8002270 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8010396:	f107 0018 	add.w	r0, r7, #24
 801039a:	f7f0 fc35 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 801039e:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 80103a2:	e7ab      	b.n	80102fc <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x62>

080103a4 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 80103a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a8:	b097      	sub	sp, #92	@ 0x5c
 80103aa:	468c      	mov	ip, r1
 80103ac:	4682      	mov	sl, r0
 80103ae:	461c      	mov	r4, r3
 80103b0:	af04      	add	r7, sp, #16
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 80103b2:	f89c 3000 	ldrb.w	r3, [ip]
 80103b6:	f89c b011 	ldrb.w	fp, [ip, #17]
 80103ba:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
	service_information.access = element.access;
 80103be:	7a16      	ldrb	r6, [r2, #8]
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 80103c0:	60fb      	str	r3, [r7, #12]
	service_information.register_ = element.element_register;
 80103c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80103c6:	61b8      	str	r0, [r7, #24]
	if (element.command) {
 80103c8:	79d0      	ldrb	r0, [r2, #7]
	service_information.register_ = element.element_register;
 80103ca:	83b9      	strh	r1, [r7, #28]
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 80103cc:	f10c 0104 	add.w	r1, ip, #4
	if (element.command) {
 80103d0:	b340      	cbz	r0, 8010424 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x80>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 80103d2:	4628      	mov	r0, r5
 80103d4:	f7f0 fd12 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80103d8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80103dc:	4621      	mov	r1, r4
 80103de:	4628      	mov	r0, r5
 80103e0:	f7fe fdec 	bl	800efbc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 80103e4:	4680      	mov	r8, r0
      }
 80103e6:	4628      	mov	r0, r5
 80103e8:	f7f0 fc0e 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 80103ec:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80103f0:	b18b      	cbz	r3, 8010416 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 80103f2:	2301      	movs	r3, #1
 80103f4:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 80103f8:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 80103fc:	83fb      	strh	r3, [r7, #30]
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	f8da 0008 	ldr.w	r0, [sl, #8]
 8010404:	f887 3020 	strb.w	r3, [r7, #32]
 8010408:	f107 0318 	add.w	r3, r7, #24
 801040c:	f8cd 8000 	str.w	r8, [sp]
 8010410:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010412:	f008 ff02 	bl	801921a <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
		return start_index + 1;
 8010416:	3401      	adds	r4, #1
 8010418:	b2a4      	uxth	r4, r4
}
 801041a:	4620      	mov	r0, r4
 801041c:	374c      	adds	r7, #76	@ 0x4c
 801041e:	46bd      	mov	sp, r7
 8010420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (element.access == WRITE) {
 8010424:	bb1e      	cbnz	r6, 801046e <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0xca>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010426:	4628      	mov	r0, r5
 8010428:	f7f0 fce8 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801042c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010430:	4621      	mov	r1, r4
 8010432:	4628      	mov	r0, r5
 8010434:	f7fe fdc2 	bl	800efbc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8010438:	4680      	mov	r8, r0
 801043a:	4628      	mov	r0, r5
 801043c:	f7f0 fbe4 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010440:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8010444:	2b00      	cmp	r3, #0
 8010446:	d0e6      	beq.n	8010416 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 8010448:	2301      	movs	r3, #1
 801044a:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 801044e:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 8010452:	83fb      	strh	r3, [r7, #30]
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	f8da 0008 	ldr.w	r0, [sl, #8]
 801045a:	f887 3020 	strb.w	r3, [r7, #32]
 801045e:	f107 0318 	add.w	r3, r7, #24
 8010462:	f8cd 8000 	str.w	r8, [sp]
 8010466:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010468:	f008 fe9a 	bl	80191a0 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 801046c:	e7d3      	b.n	8010416 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x72>
		T array_values[element.element_register.length];
 801046e:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8010472:	466e      	mov	r6, sp
	}
 8010474:	f8c7 d004 	str.w	sp, [r7, #4]
		T array_values[element.element_register.length];
 8010478:	ea4f 0388 	mov.w	r3, r8, lsl #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 801047c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801047e:	3307      	adds	r3, #7
 8010480:	08db      	lsrs	r3, r3, #3
 8010482:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
 8010486:	f107 0616 	add.w	r6, r7, #22
 801048a:	469d      	mov	sp, r3
		if (not element.element_register.isArray) {
 801048c:	78d3      	ldrb	r3, [r2, #3]
		T array_values[element.element_register.length];
 801048e:	f10d 0910 	add.w	r9, sp, #16
 8010492:	e9c7 0009 	strd	r0, r0, [r7, #36]	@ 0x24
		if (not element.element_register.isArray) {
 8010496:	2b00      	cmp	r3, #0
 8010498:	d13a      	bne.n	8010510 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x16c>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801049a:	4628      	mov	r0, r5
			data = &single_value;
 801049c:	f107 0930 	add.w	r9, r7, #48	@ 0x30
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80104a0:	f7f0 fcac 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
			length_to_extract = 1;
 80104a4:	f04f 0801 	mov.w	r8, #1
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80104a8:	4632      	mov	r2, r6
 80104aa:	4621      	mov	r1, r4
 80104ac:	4628      	mov	r0, r5
 80104ae:	f7fe fd41 	bl	800ef34 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 80104b2:	4628      	mov	r0, r5
 80104b4:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 80104b8:	f7f0 fba6 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 80104bc:	7dbb      	ldrb	r3, [r7, #22]
 80104be:	b1eb      	cbz	r3, 80104fc <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x158>
 80104c0:	68fb      	ldr	r3, [r7, #12]
			services->ReceiveRead<T>(service_information, data);
 80104c2:	f8da 6008 	ldr.w	r6, [sl, #8]
 80104c6:	f04f 0a01 	mov.w	sl, #1
 80104ca:	f887 3020 	strb.w	r3, [r7, #32]
 80104ce:	f107 0318 	add.w	r3, r7, #24
 80104d2:	f8a7 801e 	strh.w	r8, [r7, #30]
 80104d6:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 80104da:	f887 a022 	strb.w	sl, [r7, #34]	@ 0x22
	bool success = true;
 80104de:	f887 a017 	strb.w	sl, [r7, #23]
 80104e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80104e6:	7ebb      	ldrb	r3, [r7, #26]
 80104e8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80104ec:	60bb      	str	r3, [r7, #8]
	uint8_t start_index = 0;
 80104ee:	2100      	movs	r1, #0
		CommunicationLED(leds, information.interface.interface);
 80104f0:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 80104f4:	603b      	str	r3, [r7, #0]
	while (success) {
 80104f6:	7dfb      	ldrb	r3, [r7, #23]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d13b      	bne.n	8010574 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x1d0>
		return start_index + sizeof(T) * length_to_extract;
 80104fc:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8010500:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010504:	f7f1 feb4 	bl	8002270 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8010508:	f8d7 d004 	ldr.w	sp, [r7, #4]
 801050c:	b2a4      	uxth	r4, r4
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 801050e:	e784      	b.n	801041a <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x76>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 8010510:	f1b8 0f00 	cmp.w	r8, #0
 8010514:	d00d      	beq.n	8010532 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x18e>
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8010516:	4628      	mov	r0, r5
 8010518:	f7f0 fc70 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801051c:	4648      	mov	r0, r9
 801051e:	4643      	mov	r3, r8
 8010520:	4622      	mov	r2, r4
 8010522:	4629      	mov	r1, r5
 8010524:	9600      	str	r6, [sp, #0]
 8010526:	f7ff fe89 	bl	801023c <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 801052a:	4628      	mov	r0, r5
 801052c:	f7f0 fb6c 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			data = array_values;
 8010530:	e7c4      	b.n	80104bc <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x118>
			length_to_extract = message.payload[start_index];
 8010532:	f8dc 3004 	ldr.w	r3, [ip, #4]
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010536:	f107 0030 	add.w	r0, r7, #48	@ 0x30
			length_to_extract = message.payload[start_index];
 801053a:	f813 8004 	ldrb.w	r8, [r3, r4]
			start_index++;
 801053e:	3401      	adds	r4, #1
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010540:	f7f0 fc5c 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010544:	f107 0130 	add.w	r1, r7, #48	@ 0x30
			start_index++;
 8010548:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801054a:	4643      	mov	r3, r8
 801054c:	4628      	mov	r0, r5
 801054e:	9600      	str	r6, [sp, #0]
 8010550:	4622      	mov	r2, r4
 8010552:	f7ff fe15 	bl	8010180 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8010556:	4629      	mov	r1, r5
 8010558:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801055c:	f7ff f982 	bl	800f864 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>
 8010560:	4628      	mov	r0, r5
 8010562:	f7f1 fe85 	bl	8002270 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8010566:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801056a:	f7f0 fb4d 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 801056e:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 8010572:	e7a3      	b.n	80104bc <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x118>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	4630      	mov	r0, r6
 8010578:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 801057c:	f107 0317 	add.w	r3, r7, #23
 8010580:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010584:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010588:	f8ad 3000 	strh.w	r3, [sp]
 801058c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010590:	f008 fdc7 	bl	8019122 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 8010594:	7dfa      	ldrb	r2, [r7, #23]
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8010596:	4683      	mov	fp, r0
		if (not success) return;
 8010598:	2a00      	cmp	r2, #0
 801059a:	d0af      	beq.n	80104fc <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x158>
		if (information.length > SERVICES_BUFFER_SIZE) return;
 801059c:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 80105a0:	d8ac      	bhi.n	80104fc <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x158>
		CommunicationLED(leds, information.interface.interface);
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	68f9      	ldr	r1, [r7, #12]
 80105a6:	f8d3 0440 	ldr.w	r0, [r3, #1088]	@ 0x440
 80105aa:	f7fe fa30 	bl	800ea0e <_Z16CommunicationLEDP4LEDSh>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 80105ae:	f04f 31ff 	mov.w	r1, #4294967295
 80105b2:	6830      	ldr	r0, [r6, #0]
 80105b4:	f7fc f8ee 	bl	800c794 <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 80105b8:	2218      	movs	r2, #24
		switch (information.register_.type) {
 80105ba:	68bb      	ldr	r3, [r7, #8]
		services[index].configuration.length = information.length;
 80105bc:	fb02 620b 	mla	r2, r2, fp, r6
 80105c0:	f8a2 8010 	strh.w	r8, [r2, #16]
		switch (information.register_.type) {
 80105c4:	2b08      	cmp	r3, #8
 80105c6:	d80d      	bhi.n	80105e4 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x240>
 80105c8:	e8df f003 	tbb	[pc, r3]
 80105cc:	0c1d0c05 	.word	0x0c1d0c05
 80105d0:	0c0c0c26 	.word	0x0c0c0c26
 80105d4:	33          	.byte	0x33
 80105d5:	00          	.byte	0x00
			TranferData<uint8_t>((uint8_t*) data, &buffer_uint8[index][0], information.length);
 80105d6:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 80105da:	2200      	movs	r2, #0
 80105dc:	3138      	adds	r1, #56	@ 0x38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 80105de:	b290      	uxth	r0, r2
 80105e0:	4580      	cmp	r8, r0
 80105e2:	d80b      	bhi.n	80105fc <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x258>
		services[index].reception_flag = true;
 80105e4:	2218      	movs	r2, #24
		osSemaphoreRelease(ServiceSemaphore);
 80105e6:	6830      	ldr	r0, [r6, #0]
		services[index].reception_flag = true;
 80105e8:	fb02 620b 	mla	r2, r2, fp, r6
 80105ec:	f882 a009 	strb.w	sl, [r2, #9]
		osSemaphoreRelease(ServiceSemaphore);
 80105f0:	f7fc f904 	bl	800c7fc <osSemaphoreRelease>
		start_index = index + 1;
 80105f4:	f10b 0101 	add.w	r1, fp, #1
 80105f8:	b2c9      	uxtb	r1, r1
 80105fa:	e77c      	b.n	80104f6 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x152>
		to[buffer_index] = from[buffer_index];
 80105fc:	f819 0002 	ldrb.w	r0, [r9, r2]
 8010600:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010602:	3201      	adds	r2, #1
 8010604:	e7eb      	b.n	80105de <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x23a>
			TranferData<uint32_t>((uint32_t*) data, &buffer_uint32[index][0], information.length);
 8010606:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 801060a:	4642      	mov	r2, r8
 801060c:	4648      	mov	r0, r9
 801060e:	f501 710e 	add.w	r1, r1, #568	@ 0x238
 8010612:	f7fe fc83 	bl	800ef1c <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0>
			break;
 8010616:	e7e5      	b.n	80105e4 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x240>
			TranferData<int8_t>((int8_t*) data, &buffer_int8[index][0], information.length);
 8010618:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 801061c:	2200      	movs	r2, #0
 801061e:	f601 2138 	addw	r1, r1, #2616	@ 0xa38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010622:	b290      	uxth	r0, r2
 8010624:	4580      	cmp	r8, r0
 8010626:	d9dd      	bls.n	80105e4 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x240>
		to[buffer_index] = from[buffer_index];
 8010628:	f919 0002 	ldrsb.w	r0, [r9, r2]
 801062c:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 801062e:	3201      	adds	r2, #1
 8010630:	e7f7      	b.n	8010622 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x27e>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 8010632:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 8010636:	4642      	mov	r2, r8
 8010638:	4648      	mov	r0, r9
 801063a:	f601 4138 	addw	r1, r1, #3128	@ 0xc38
 801063e:	f7fe fc63 	bl	800ef08 <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0>
			break;
 8010642:	e7cf      	b.n	80105e4 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x240>

08010644 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>:
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8010644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010648:	2600      	movs	r6, #0
 801064a:	b087      	sub	sp, #28
 801064c:	4604      	mov	r4, r0
 801064e:	4691      	mov	r9, r2
 8010650:	9100      	str	r1, [sp, #0]
 8010652:	9301      	str	r3, [sp, #4]
 8010654:	6086      	str	r6, [r0, #8]
 8010656:	e9c0 6600 	strd	r6, r6, [r0]
 801065a:	b2f5      	uxtb	r5, r6
	for (uint8_t index = 0; index < length; index++) {
 801065c:	9b01      	ldr	r3, [sp, #4]
 801065e:	429d      	cmp	r5, r3
 8010660:	db03      	blt.n	801066a <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x26>
}
 8010662:	4620      	mov	r0, r4
 8010664:	b007      	add	sp, #28
 8010666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 801066a:	9900      	ldr	r1, [sp, #0]
 801066c:	a803      	add	r0, sp, #12
 801066e:	f7f0 fbc5 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010672:	eb05 0109 	add.w	r1, r5, r9
 8010676:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8010678:	a803      	add	r0, sp, #12
 801067a:	b289      	uxth	r1, r1
 801067c:	f7fe fc78 	bl	800ef70 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 8010680:	4607      	mov	r7, r0
      }
 8010682:	a803      	add	r0, sp, #12
 8010684:	f7f0 fac0 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 8010688:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801068a:	781b      	ldrb	r3, [r3, #0]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d0e8      	beq.n	8010662 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x1e>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010690:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
 8010694:	429d      	cmp	r5, r3
 8010696:	d005      	beq.n	80106a4 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x60>
 8010698:	702f      	strb	r7, [r5, #0]
	    ++this->_M_impl._M_finish;
 801069a:	6863      	ldr	r3, [r4, #4]
 801069c:	3301      	adds	r3, #1
 801069e:	6063      	str	r3, [r4, #4]
	for (uint8_t index = 0; index < length; index++) {
 80106a0:	3601      	adds	r6, #1
 80106a2:	e7da      	b.n	801065a <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x16>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80106a4:	4a13      	ldr	r2, [pc, #76]	@ (80106f4 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xb0>)
 80106a6:	2101      	movs	r1, #1
 80106a8:	4620      	mov	r0, r4
 80106aa:	f7ff f9c2 	bl	800fa32 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 80106ae:	f8d4 b000 	ldr.w	fp, [r4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80106b2:	4682      	mov	sl, r0
      pointer __new_start(this->_M_allocate(__len));
 80106b4:	f7fe fae5 	bl	800ec82 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 80106b8:	eba5 080b 	sub.w	r8, r5, fp
 80106bc:	4605      	mov	r5, r0
      if (__count > 0)
 80106be:	f1b8 0f00 	cmp.w	r8, #0
 80106c2:	f800 7008 	strb.w	r7, [r0, r8]
 80106c6:	dd03      	ble.n	80106d0 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x8c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80106c8:	4642      	mov	r2, r8
 80106ca:	4659      	mov	r1, fp
 80106cc:	f00b fdda 	bl	801c284 <memmove>
	      ++__new_finish;
 80106d0:	f108 0201 	add.w	r2, r8, #1
 80106d4:	18af      	adds	r7, r5, r2
	if (__p)
 80106d6:	f1bb 0f00 	cmp.w	fp, #0
 80106da:	d005      	beq.n	80106e8 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xa4>
		    this->_M_impl._M_end_of_storage - __old_start);
 80106dc:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80106de:	4658      	mov	r0, fp
 80106e0:	eba1 010b 	sub.w	r1, r1, fp
 80106e4:	f00b fa72 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 80106e8:	e9c4 5700 	strd	r5, r7, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80106ec:	4455      	add	r5, sl
 80106ee:	60a5      	str	r5, [r4, #8]
 80106f0:	e7d6      	b.n	80106a0 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x5c>
 80106f2:	bf00      	nop
 80106f4:	0801c592 	.word	0x0801c592

080106f8 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 80106f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106fc:	b085      	sub	sp, #20
 80106fe:	4607      	mov	r7, r0
 8010700:	4688      	mov	r8, r1
 8010702:	4691      	mov	r9, r2
 8010704:	461c      	mov	r4, r3
 8010706:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801070a:	2600      	movs	r6, #0
 801070c:	b2f5      	uxtb	r5, r6
	for (uint8_t index = 0; index < length; index++) {
 801070e:	42a5      	cmp	r5, r4
 8010710:	db02      	blt.n	8010718 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x20>
}
 8010712:	b005      	add	sp, #20
 8010714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8010718:	4641      	mov	r1, r8
 801071a:	a801      	add	r0, sp, #4
 801071c:	f7f0 fb6e 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010720:	eb05 0109 	add.w	r1, r5, r9
 8010724:	465a      	mov	r2, fp
 8010726:	a801      	add	r0, sp, #4
 8010728:	b289      	uxth	r1, r1
		if (not *success)
 801072a:	3601      	adds	r6, #1
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 801072c:	f7fe fc20 	bl	800ef70 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 8010730:	4682      	mov	sl, r0
      }
 8010732:	a801      	add	r0, sp, #4
 8010734:	f7f0 fa68 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 8010738:	f89b 3000 	ldrb.w	r3, [fp]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d0e8      	beq.n	8010712 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x1a>
		data[index] = element;
 8010740:	f807 a005 	strb.w	sl, [r7, r5]
	for (uint8_t index = 0; index < length; index++) {
 8010744:	e7e2      	b.n	801070c <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x14>

08010746 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010746:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801074a:	b08f      	sub	sp, #60	@ 0x3c
 801074c:	461c      	mov	r4, r3
 801074e:	4691      	mov	r9, r2
 8010750:	468a      	mov	sl, r1
	T array_values[element.element_register.length];
 8010752:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8010756:	466a      	mov	r2, sp
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010758:	af02      	add	r7, sp, #8
	T array_values[element.element_register.length];
 801075a:	f108 0307 	add.w	r3, r8, #7
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801075e:	3104      	adds	r1, #4
 8010760:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 8010764:	f107 060b 	add.w	r6, r7, #11
	T array_values[element.element_register.length];
 8010768:	08db      	lsrs	r3, r3, #3
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 801076a:	6078      	str	r0, [r7, #4]
	T array_values[element.element_register.length];
 801076c:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8010770:	469d      	mov	sp, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010772:	2300      	movs	r3, #0
 8010774:	e9c7 3303 	strd	r3, r3, [r7, #12]
 8010778:	617b      	str	r3, [r7, #20]
 801077a:	f10d 0b08 	add.w	fp, sp, #8
	if (not element.element_register.isArray) {
 801077e:	f899 3003 	ldrb.w	r3, [r9, #3]
 8010782:	bb83      	cbnz	r3, 80107e6 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0xa0>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010784:	4628      	mov	r0, r5
		data = &single_value;
 8010786:	f107 0b18 	add.w	fp, r7, #24
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801078a:	f7f0 fb37 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		length_to_extract = 1;
 801078e:	f04f 0801 	mov.w	r8, #1
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010792:	4632      	mov	r2, r6
 8010794:	4621      	mov	r1, r4
 8010796:	4628      	mov	r0, r5
 8010798:	f7fe fbea 	bl	800ef70 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 801079c:	7638      	strb	r0, [r7, #24]
      }
 801079e:	4628      	mov	r0, r5
 80107a0:	f7f0 fa32 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	subscriber_information.interface.interface = message.interface;
 80107a4:	f89a 3000 	ldrb.w	r3, [sl]
	return start_index + sizeof(T) * length_to_extract;
 80107a8:	4444      	add	r4, r8
	subscriber_information.length = length_to_extract;
 80107aa:	f8a7 802c 	strh.w	r8, [r7, #44]	@ 0x2c
	subscriber_information.interface.interface = message.interface;
 80107ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	return start_index + sizeof(T) * length_to_extract;
 80107b2:	b2a4      	uxth	r4, r4
	subscriber_information.interface.address = message.source_address;
 80107b4:	f89a 3011 	ldrb.w	r3, [sl, #17]
	subscriber_information.register_ = element.element_register;
 80107b8:	e899 0003 	ldmia.w	r9, {r0, r1}
	subscriber_information.interface.address = message.source_address;
 80107bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	subscriber_information.register_ = element.element_register;
 80107c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80107c2:	8539      	strh	r1, [r7, #40]	@ 0x28
	subscribers->Receive<T>(subscriber_information, data);
 80107c4:	f8cd b000 	str.w	fp, [sp]
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80107ce:	68c0      	ldr	r0, [r0, #12]
 80107d0:	f7ff fbfe 	bl	800ffd0 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_>
 80107d4:	f107 000c 	add.w	r0, r7, #12
 80107d8:	f7ff f823 	bl	800f822 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
}
 80107dc:	4620      	mov	r0, r4
 80107de:	3734      	adds	r7, #52	@ 0x34
 80107e0:	46bd      	mov	sp, r7
 80107e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 80107e6:	f1b8 0f00 	cmp.w	r8, #0
 80107ea:	d00d      	beq.n	8010808 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0xc2>
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 80107ec:	4628      	mov	r0, r5
 80107ee:	f7f0 fb05 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80107f2:	4658      	mov	r0, fp
 80107f4:	4643      	mov	r3, r8
 80107f6:	4622      	mov	r2, r4
 80107f8:	4629      	mov	r1, r5
 80107fa:	9600      	str	r6, [sp, #0]
 80107fc:	f7ff ff7c 	bl	80106f8 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8010800:	4628      	mov	r0, r5
 8010802:	f7f0 fa01 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = array_values;
 8010806:	e7cd      	b.n	80107a4 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x5e>
		length_to_extract = message.payload[start_index];
 8010808:	f8da 3004 	ldr.w	r3, [sl, #4]
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801080c:	f107 0018 	add.w	r0, r7, #24
		length_to_extract = message.payload[start_index];
 8010810:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8010814:	3401      	adds	r4, #1
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010816:	f7f0 faf1 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801081a:	f107 0118 	add.w	r1, r7, #24
		start_index++;
 801081e:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010820:	4643      	mov	r3, r8
 8010822:	4628      	mov	r0, r5
 8010824:	9600      	str	r6, [sp, #0]
 8010826:	4622      	mov	r2, r4
 8010828:	f7ff ff0c 	bl	8010644 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 801082c:	4629      	mov	r1, r5
 801082e:	f107 000c 	add.w	r0, r7, #12
 8010832:	f7ff f800 	bl	800f836 <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>
 8010836:	4628      	mov	r0, r5
 8010838:	f7fe fff3 	bl	800f822 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 801083c:	f107 0018 	add.w	r0, r7, #24
 8010840:	f7f0 f9e2 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8010844:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8010848:	e7ac      	b.n	80107a4 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x5e>

0801084a <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 801084a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801084e:	468c      	mov	ip, r1
 8010850:	b097      	sub	sp, #92	@ 0x5c
 8010852:	461c      	mov	r4, r3
 8010854:	4682      	mov	sl, r0
 8010856:	af04      	add	r7, sp, #16
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 8010858:	f89c 3000 	ldrb.w	r3, [ip]
 801085c:	f89c b011 	ldrb.w	fp, [ip, #17]
 8010860:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8010864:	60fb      	str	r3, [r7, #12]
	if (element.command) {
 8010866:	79d3      	ldrb	r3, [r2, #7]
	service_information.access = element.access;
 8010868:	7a16      	ldrb	r6, [r2, #8]
	service_information.register_ = element.element_register;
 801086a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801086e:	83b9      	strh	r1, [r7, #28]
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010870:	f10c 0104 	add.w	r1, ip, #4
	service_information.register_ = element.element_register;
 8010874:	61b8      	str	r0, [r7, #24]
	if (element.command) {
 8010876:	b343      	cbz	r3, 80108ca <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x80>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010878:	4628      	mov	r0, r5
 801087a:	f7f0 fabf 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801087e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010882:	4621      	mov	r1, r4
 8010884:	4628      	mov	r0, r5
 8010886:	f7fe fb99 	bl	800efbc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 801088a:	4680      	mov	r8, r0
      }
 801088c:	4628      	mov	r0, r5
 801088e:	f7f0 f9bb 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010892:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8010896:	b18b      	cbz	r3, 80108bc <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 8010898:	2301      	movs	r3, #1
 801089a:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 801089e:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 80108a2:	83fb      	strh	r3, [r7, #30]
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	f8da 0008 	ldr.w	r0, [sl, #8]
 80108aa:	f887 3020 	strb.w	r3, [r7, #32]
 80108ae:	f107 0318 	add.w	r3, r7, #24
 80108b2:	f8cd 8000 	str.w	r8, [sp]
 80108b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80108b8:	f008 fcaf 	bl	801921a <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
		return start_index + 1;
 80108bc:	3401      	adds	r4, #1
 80108be:	b2a4      	uxth	r4, r4
}
 80108c0:	4620      	mov	r0, r4
 80108c2:	374c      	adds	r7, #76	@ 0x4c
 80108c4:	46bd      	mov	sp, r7
 80108c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (element.access == WRITE) {
 80108ca:	bb1e      	cbnz	r6, 8010914 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0xca>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 80108cc:	4628      	mov	r0, r5
 80108ce:	f7f0 fa95 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80108d2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80108d6:	4621      	mov	r1, r4
 80108d8:	4628      	mov	r0, r5
 80108da:	f7fe fb6f 	bl	800efbc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 80108de:	4680      	mov	r8, r0
 80108e0:	4628      	mov	r0, r5
 80108e2:	f7f0 f991 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 80108e6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d0e6      	beq.n	80108bc <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 80108ee:	2301      	movs	r3, #1
 80108f0:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 80108f4:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 80108f8:	83fb      	strh	r3, [r7, #30]
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	f8da 0008 	ldr.w	r0, [sl, #8]
 8010900:	f887 3020 	strb.w	r3, [r7, #32]
 8010904:	f107 0318 	add.w	r3, r7, #24
 8010908:	f8cd 8000 	str.w	r8, [sp]
 801090c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801090e:	f008 fc47 	bl	80191a0 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 8010912:	e7d3      	b.n	80108bc <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x72>
		T array_values[element.element_register.length];
 8010914:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8010918:	466e      	mov	r6, sp
	}
 801091a:	f8c7 d004 	str.w	sp, [r7, #4]
		T array_values[element.element_register.length];
 801091e:	f108 0007 	add.w	r0, r8, #7
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010922:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010924:	08c0      	lsrs	r0, r0, #3
 8010926:	eba6 00c0 	sub.w	r0, r6, r0, lsl #3
 801092a:	f107 0617 	add.w	r6, r7, #23
 801092e:	4685      	mov	sp, r0
 8010930:	e9c7 3309 	strd	r3, r3, [r7, #36]	@ 0x24
		if (not element.element_register.isArray) {
 8010934:	78d3      	ldrb	r3, [r2, #3]
		T array_values[element.element_register.length];
 8010936:	f10d 0910 	add.w	r9, sp, #16
		if (not element.element_register.isArray) {
 801093a:	bbc3      	cbnz	r3, 80109ae <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x164>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801093c:	4628      	mov	r0, r5
			data = &single_value;
 801093e:	f107 0916 	add.w	r9, r7, #22
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010942:	f7f0 fa5b 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
			length_to_extract = 1;
 8010946:	f04f 0801 	mov.w	r8, #1
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801094a:	4632      	mov	r2, r6
 801094c:	4621      	mov	r1, r4
 801094e:	4628      	mov	r0, r5
 8010950:	f7fe fb0e 	bl	800ef70 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 8010954:	75b8      	strb	r0, [r7, #22]
      }
 8010956:	4628      	mov	r0, r5
 8010958:	f7f0 f956 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 801095c:	7dfb      	ldrb	r3, [r7, #23]
 801095e:	b1eb      	cbz	r3, 801099c <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x152>
 8010960:	68fb      	ldr	r3, [r7, #12]
			services->ReceiveRead<T>(service_information, data);
 8010962:	f8da 6008 	ldr.w	r6, [sl, #8]
 8010966:	f04f 0a01 	mov.w	sl, #1
 801096a:	f887 3020 	strb.w	r3, [r7, #32]
 801096e:	f107 0318 	add.w	r3, r7, #24
 8010972:	f8a7 801e 	strh.w	r8, [r7, #30]
 8010976:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 801097a:	f887 a022 	strb.w	sl, [r7, #34]	@ 0x22
	bool success = true;
 801097e:	f887 a030 	strb.w	sl, [r7, #48]	@ 0x30
 8010982:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010986:	7ebb      	ldrb	r3, [r7, #26]
 8010988:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801098c:	60bb      	str	r3, [r7, #8]
	uint8_t start_index = 0;
 801098e:	2100      	movs	r1, #0
		CommunicationLED(leds, information.interface.interface);
 8010990:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 8010994:	603b      	str	r3, [r7, #0]
	while (success) {
 8010996:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801099a:	bbd3      	cbnz	r3, 8010a12 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x1c8>
		return start_index + sizeof(T) * length_to_extract;
 801099c:	4444      	add	r4, r8
 801099e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80109a2:	f7fe ff3e 	bl	800f822 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 80109a6:	f8d7 d004 	ldr.w	sp, [r7, #4]
 80109aa:	b2a4      	uxth	r4, r4
 80109ac:	e788      	b.n	80108c0 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x76>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 80109ae:	f1b8 0f00 	cmp.w	r8, #0
 80109b2:	d00d      	beq.n	80109d0 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x186>
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 80109b4:	4628      	mov	r0, r5
 80109b6:	f7f0 fa21 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80109ba:	4648      	mov	r0, r9
 80109bc:	4643      	mov	r3, r8
 80109be:	4622      	mov	r2, r4
 80109c0:	4629      	mov	r1, r5
 80109c2:	9600      	str	r6, [sp, #0]
 80109c4:	f7ff fe98 	bl	80106f8 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 80109c8:	4628      	mov	r0, r5
 80109ca:	f7f0 f91d 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			data = array_values;
 80109ce:	e7c5      	b.n	801095c <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x112>
			length_to_extract = message.payload[start_index];
 80109d0:	f8dc 3004 	ldr.w	r3, [ip, #4]
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80109d4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
			length_to_extract = message.payload[start_index];
 80109d8:	f813 8004 	ldrb.w	r8, [r3, r4]
			start_index++;
 80109dc:	3401      	adds	r4, #1
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80109de:	f7f0 fa0d 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80109e2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
			start_index++;
 80109e6:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80109e8:	4643      	mov	r3, r8
 80109ea:	4628      	mov	r0, r5
 80109ec:	9600      	str	r6, [sp, #0]
 80109ee:	4622      	mov	r2, r4
 80109f0:	f7ff fe28 	bl	8010644 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 80109f4:	4629      	mov	r1, r5
 80109f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80109fa:	f7fe ff1c 	bl	800f836 <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>
 80109fe:	4628      	mov	r0, r5
 8010a00:	f7fe ff0f 	bl	800f822 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8010a04:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8010a08:	f7f0 f8fe 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8010a0c:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 8010a10:	e7a4      	b.n	801095c <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x112>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	4630      	mov	r0, r6
 8010a16:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8010a1a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010a1e:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010a22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010a26:	f8ad 3000 	strh.w	r3, [sp]
 8010a2a:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010a2e:	f008 fb78 	bl	8019122 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 8010a32:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8010a36:	4683      	mov	fp, r0
		if (not success) return;
 8010a38:	2a00      	cmp	r2, #0
 8010a3a:	d0af      	beq.n	801099c <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x152>
		if (information.length > SERVICES_BUFFER_SIZE) return;
 8010a3c:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 8010a40:	d8ac      	bhi.n	801099c <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x152>
		CommunicationLED(leds, information.interface.interface);
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	68f9      	ldr	r1, [r7, #12]
 8010a46:	f8d3 0440 	ldr.w	r0, [r3, #1088]	@ 0x440
 8010a4a:	f7fd ffe0 	bl	800ea0e <_Z16CommunicationLEDP4LEDSh>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8010a4e:	f04f 31ff 	mov.w	r1, #4294967295
 8010a52:	6830      	ldr	r0, [r6, #0]
 8010a54:	f7fb fe9e 	bl	800c794 <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 8010a58:	2218      	movs	r2, #24
		switch (information.register_.type) {
 8010a5a:	68bb      	ldr	r3, [r7, #8]
		services[index].configuration.length = information.length;
 8010a5c:	fb02 620b 	mla	r2, r2, fp, r6
 8010a60:	f8a2 8010 	strh.w	r8, [r2, #16]
		switch (information.register_.type) {
 8010a64:	2b08      	cmp	r3, #8
 8010a66:	d80d      	bhi.n	8010a84 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x23a>
 8010a68:	e8df f003 	tbb	[pc, r3]
 8010a6c:	0c1d0c05 	.word	0x0c1d0c05
 8010a70:	0c0c0c26 	.word	0x0c0c0c26
 8010a74:	33          	.byte	0x33
 8010a75:	00          	.byte	0x00
			TranferData<uint8_t>((uint8_t*) data, &buffer_uint8[index][0], information.length);
 8010a76:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	3138      	adds	r1, #56	@ 0x38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010a7e:	b290      	uxth	r0, r2
 8010a80:	4580      	cmp	r8, r0
 8010a82:	d80b      	bhi.n	8010a9c <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x252>
		services[index].reception_flag = true;
 8010a84:	2218      	movs	r2, #24
		osSemaphoreRelease(ServiceSemaphore);
 8010a86:	6830      	ldr	r0, [r6, #0]
		services[index].reception_flag = true;
 8010a88:	fb02 620b 	mla	r2, r2, fp, r6
 8010a8c:	f882 a009 	strb.w	sl, [r2, #9]
		osSemaphoreRelease(ServiceSemaphore);
 8010a90:	f7fb feb4 	bl	800c7fc <osSemaphoreRelease>
		start_index = index + 1;
 8010a94:	f10b 0101 	add.w	r1, fp, #1
 8010a98:	b2c9      	uxtb	r1, r1
 8010a9a:	e77c      	b.n	8010996 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x14c>
		to[buffer_index] = from[buffer_index];
 8010a9c:	f819 0002 	ldrb.w	r0, [r9, r2]
 8010aa0:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010aa2:	3201      	adds	r2, #1
 8010aa4:	e7eb      	b.n	8010a7e <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x234>
			TranferData<uint32_t>((uint32_t*) data, &buffer_uint32[index][0], information.length);
 8010aa6:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 8010aaa:	4642      	mov	r2, r8
 8010aac:	4648      	mov	r0, r9
 8010aae:	f501 710e 	add.w	r1, r1, #568	@ 0x238
 8010ab2:	f7fe fa33 	bl	800ef1c <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0>
			break;
 8010ab6:	e7e5      	b.n	8010a84 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x23a>
			TranferData<int8_t>((int8_t*) data, &buffer_int8[index][0], information.length);
 8010ab8:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 8010abc:	2200      	movs	r2, #0
 8010abe:	f601 2138 	addw	r1, r1, #2616	@ 0xa38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010ac2:	b290      	uxth	r0, r2
 8010ac4:	4580      	cmp	r8, r0
 8010ac6:	d9dd      	bls.n	8010a84 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x23a>
		to[buffer_index] = from[buffer_index];
 8010ac8:	f919 0002 	ldrsb.w	r0, [r9, r2]
 8010acc:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010ace:	3201      	adds	r2, #1
 8010ad0:	e7f7      	b.n	8010ac2 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x278>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 8010ad2:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 8010ad6:	4642      	mov	r2, r8
 8010ad8:	4648      	mov	r0, r9
 8010ada:	f601 4138 	addw	r1, r1, #3128	@ 0xc38
 8010ade:	f7fe fa13 	bl	800ef08 <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0>
			break;
 8010ae2:	e7cf      	b.n	8010a84 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x23a>

08010ae4 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>:
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8010ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010ae8:	2600      	movs	r6, #0
 8010aea:	b087      	sub	sp, #28
 8010aec:	4605      	mov	r5, r0
 8010aee:	4691      	mov	r9, r2
 8010af0:	9100      	str	r1, [sp, #0]
 8010af2:	9301      	str	r3, [sp, #4]
 8010af4:	6086      	str	r6, [r0, #8]
 8010af6:	e9c0 6600 	strd	r6, r6, [r0]
 8010afa:	b2f4      	uxtb	r4, r6
	for (uint8_t index = 0; index < length; index++) {
 8010afc:	9b01      	ldr	r3, [sp, #4]
 8010afe:	429c      	cmp	r4, r3
 8010b00:	db03      	blt.n	8010b0a <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x26>
}
 8010b02:	4628      	mov	r0, r5
 8010b04:	b007      	add	sp, #28
 8010b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8010b0a:	9900      	ldr	r1, [sp, #0]
 8010b0c:	a803      	add	r0, sp, #12
 8010b0e:	f7f0 f975 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010b12:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8010b14:	eb09 0184 	add.w	r1, r9, r4, lsl #2
 8010b18:	a803      	add	r0, sp, #12
 8010b1a:	b289      	uxth	r1, r1
 8010b1c:	f7fe fa35 	bl	800ef8a <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>
 8010b20:	4607      	mov	r7, r0
      }
 8010b22:	a803      	add	r0, sp, #12
 8010b24:	f7f0 f870 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 8010b28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010b2a:	781b      	ldrb	r3, [r3, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d0e8      	beq.n	8010b02 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x1e>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010b30:	e9d5 4301 	ldrd	r4, r3, [r5, #4]
 8010b34:	429c      	cmp	r4, r3
 8010b36:	d004      	beq.n	8010b42 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x5e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010b38:	f844 7b04 	str.w	r7, [r4], #4
	    ++this->_M_impl._M_finish;
 8010b3c:	606c      	str	r4, [r5, #4]
	for (uint8_t index = 0; index < length; index++) {
 8010b3e:	3601      	adds	r6, #1
 8010b40:	e7db      	b.n	8010afa <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x16>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8010b42:	4a14      	ldr	r2, [pc, #80]	@ (8010b94 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xb0>)
 8010b44:	2101      	movs	r1, #1
 8010b46:	4628      	mov	r0, r5
 8010b48:	f7fe ff58 	bl	800f9fc <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 8010b4c:	f8d5 b000 	ldr.w	fp, [r5]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8010b50:	4682      	mov	sl, r0
      pointer __new_start(this->_M_allocate(__len));
 8010b52:	f7fe f8a1 	bl	800ec98 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8010b56:	eba4 080b 	sub.w	r8, r4, fp
 8010b5a:	4604      	mov	r4, r0
      if (__count > 0)
 8010b5c:	f1b8 0f00 	cmp.w	r8, #0
 8010b60:	f840 7008 	str.w	r7, [r0, r8]
 8010b64:	dd03      	ble.n	8010b6e <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x8a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010b66:	4642      	mov	r2, r8
 8010b68:	4659      	mov	r1, fp
 8010b6a:	f00b fb8b 	bl	801c284 <memmove>
	      ++__new_finish;
 8010b6e:	f108 0204 	add.w	r2, r8, #4
 8010b72:	18a7      	adds	r7, r4, r2
	if (__p)
 8010b74:	f1bb 0f00 	cmp.w	fp, #0
 8010b78:	d006      	beq.n	8010b88 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xa4>
		    this->_M_impl._M_end_of_storage - __old_start);
 8010b7a:	68a9      	ldr	r1, [r5, #8]
 8010b7c:	4658      	mov	r0, fp
 8010b7e:	eba1 010b 	sub.w	r1, r1, fp
 8010b82:	1089      	asrs	r1, r1, #2
 8010b84:	f7fe f868 	bl	800ec58 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
      this->_M_impl._M_finish = __new_finish;
 8010b88:	e9c5 4700 	strd	r4, r7, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010b8c:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 8010b90:	60ac      	str	r4, [r5, #8]
 8010b92:	e7d4      	b.n	8010b3e <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x5a>
 8010b94:	0801c592 	.word	0x0801c592

08010b98 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8010b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b9c:	b085      	sub	sp, #20
 8010b9e:	4607      	mov	r7, r0
 8010ba0:	4688      	mov	r8, r1
 8010ba2:	4691      	mov	r9, r2
 8010ba4:	461c      	mov	r4, r3
 8010ba6:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8010baa:	2600      	movs	r6, #0
 8010bac:	b2f5      	uxtb	r5, r6
	for (uint8_t index = 0; index < length; index++) {
 8010bae:	42a5      	cmp	r5, r4
 8010bb0:	db02      	blt.n	8010bb8 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x20>
}
 8010bb2:	b005      	add	sp, #20
 8010bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8010bb8:	4641      	mov	r1, r8
 8010bba:	a801      	add	r0, sp, #4
 8010bbc:	f7f0 f91e 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010bc0:	465a      	mov	r2, fp
 8010bc2:	eb09 0185 	add.w	r1, r9, r5, lsl #2
 8010bc6:	a801      	add	r0, sp, #4
		if (not *success)
 8010bc8:	3601      	adds	r6, #1
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8010bca:	b289      	uxth	r1, r1
 8010bcc:	f7fe f9dd 	bl	800ef8a <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>
 8010bd0:	4682      	mov	sl, r0
      }
 8010bd2:	a801      	add	r0, sp, #4
 8010bd4:	f7f0 f818 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 8010bd8:	f89b 3000 	ldrb.w	r3, [fp]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d0e8      	beq.n	8010bb2 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x1a>
		data[index] = element;
 8010be0:	f847 a025 	str.w	sl, [r7, r5, lsl #2]
	for (uint8_t index = 0; index < length; index++) {
 8010be4:	e7e2      	b.n	8010bac <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x14>

08010be6 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010be6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bea:	b08f      	sub	sp, #60	@ 0x3c
 8010bec:	461c      	mov	r4, r3
 8010bee:	4691      	mov	r9, r2
 8010bf0:	468a      	mov	sl, r1
	T array_values[element.element_register.length];
 8010bf2:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8010bf6:	466a      	mov	r2, sp
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010bf8:	af02      	add	r7, sp, #8
	T array_values[element.element_register.length];
 8010bfa:	ea4f 0388 	mov.w	r3, r8, lsl #2
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010bfe:	3104      	adds	r1, #4
 8010c00:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 8010c04:	f107 060b 	add.w	r6, r7, #11
	T array_values[element.element_register.length];
 8010c08:	3307      	adds	r3, #7
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010c0a:	6078      	str	r0, [r7, #4]
	T array_values[element.element_register.length];
 8010c0c:	08db      	lsrs	r3, r3, #3
 8010c0e:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8010c12:	469d      	mov	sp, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010c14:	2300      	movs	r3, #0
 8010c16:	e9c7 3303 	strd	r3, r3, [r7, #12]
 8010c1a:	617b      	str	r3, [r7, #20]
 8010c1c:	f10d 0b08 	add.w	fp, sp, #8
	if (not element.element_register.isArray) {
 8010c20:	f899 3003 	ldrb.w	r3, [r9, #3]
 8010c24:	bb8b      	cbnz	r3, 8010c8a <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0xa4>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010c26:	4628      	mov	r0, r5
		data = &single_value;
 8010c28:	f107 0b18 	add.w	fp, r7, #24
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010c2c:	f7f0 f8e6 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		length_to_extract = 1;
 8010c30:	f04f 0801 	mov.w	r8, #1
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010c34:	4632      	mov	r2, r6
 8010c36:	4621      	mov	r1, r4
 8010c38:	4628      	mov	r0, r5
 8010c3a:	f7fe f9a6 	bl	800ef8a <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>
 8010c3e:	61b8      	str	r0, [r7, #24]
      }
 8010c40:	4628      	mov	r0, r5
 8010c42:	f7ef ffe1 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	subscriber_information.interface.interface = message.interface;
 8010c46:	f89a 3000 	ldrb.w	r3, [sl]
	return start_index + sizeof(T) * length_to_extract;
 8010c4a:	eb04 0488 	add.w	r4, r4, r8, lsl #2
	subscriber_information.length = length_to_extract;
 8010c4e:	f8a7 802c 	strh.w	r8, [r7, #44]	@ 0x2c
	subscriber_information.interface.interface = message.interface;
 8010c52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	return start_index + sizeof(T) * length_to_extract;
 8010c56:	b2a4      	uxth	r4, r4
	subscriber_information.interface.address = message.source_address;
 8010c58:	f89a 3011 	ldrb.w	r3, [sl, #17]
	subscriber_information.register_ = element.element_register;
 8010c5c:	e899 0003 	ldmia.w	r9, {r0, r1}
	subscriber_information.interface.address = message.source_address;
 8010c60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	subscriber_information.register_ = element.element_register;
 8010c64:	6278      	str	r0, [r7, #36]	@ 0x24
 8010c66:	8539      	strh	r1, [r7, #40]	@ 0x28
	subscribers->Receive<T>(subscriber_information, data);
 8010c68:	f8cd b000 	str.w	fp, [sp]
 8010c6c:	6878      	ldr	r0, [r7, #4]
 8010c6e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8010c72:	68c0      	ldr	r0, [r0, #12]
 8010c74:	f7ff f940 	bl	800fef8 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_>
 8010c78:	f107 000c 	add.w	r0, r7, #12
 8010c7c:	f7fe fdaf 	bl	800f7de <_ZNSt12_Vector_baseImSaImEED1Ev>
}
 8010c80:	4620      	mov	r0, r4
 8010c82:	3734      	adds	r7, #52	@ 0x34
 8010c84:	46bd      	mov	sp, r7
 8010c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8010c8a:	f1b8 0f00 	cmp.w	r8, #0
 8010c8e:	d00d      	beq.n	8010cac <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0xc6>
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8010c90:	4628      	mov	r0, r5
 8010c92:	f7f0 f8b3 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010c96:	4658      	mov	r0, fp
 8010c98:	4643      	mov	r3, r8
 8010c9a:	4622      	mov	r2, r4
 8010c9c:	4629      	mov	r1, r5
 8010c9e:	9600      	str	r6, [sp, #0]
 8010ca0:	f7ff ff7a 	bl	8010b98 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8010ca4:	4628      	mov	r0, r5
 8010ca6:	f7ef ffaf 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = array_values;
 8010caa:	e7cc      	b.n	8010c46 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0x60>
		length_to_extract = message.payload[start_index];
 8010cac:	f8da 3004 	ldr.w	r3, [sl, #4]
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010cb0:	f107 0018 	add.w	r0, r7, #24
		length_to_extract = message.payload[start_index];
 8010cb4:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8010cb8:	3401      	adds	r4, #1
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010cba:	f7f0 f89f 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010cbe:	f107 0118 	add.w	r1, r7, #24
		start_index++;
 8010cc2:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010cc4:	4643      	mov	r3, r8
 8010cc6:	4628      	mov	r0, r5
 8010cc8:	9600      	str	r6, [sp, #0]
 8010cca:	4622      	mov	r2, r4
 8010ccc:	f7ff ff0a 	bl	8010ae4 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8010cd0:	4629      	mov	r1, r5
 8010cd2:	f107 000c 	add.w	r0, r7, #12
 8010cd6:	f7fe fd8d 	bl	800f7f4 <_ZNSt6vectorImSaImEEaSEOS1_.isra.0>
 8010cda:	4628      	mov	r0, r5
 8010cdc:	f7fe fd7f 	bl	800f7de <_ZNSt12_Vector_baseImSaImEED1Ev>
 8010ce0:	f107 0018 	add.w	r0, r7, #24
 8010ce4:	f7ef ff90 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8010ce8:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8010cec:	e7ab      	b.n	8010c46 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0x60>

08010cee <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 8010cee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cf2:	b097      	sub	sp, #92	@ 0x5c
 8010cf4:	468c      	mov	ip, r1
 8010cf6:	4682      	mov	sl, r0
 8010cf8:	461c      	mov	r4, r3
 8010cfa:	af04      	add	r7, sp, #16
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 8010cfc:	f89c 3000 	ldrb.w	r3, [ip]
 8010d00:	f89c b011 	ldrb.w	fp, [ip, #17]
 8010d04:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
	service_information.access = element.access;
 8010d08:	7a16      	ldrb	r6, [r2, #8]
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 8010d0a:	60fb      	str	r3, [r7, #12]
	service_information.register_ = element.element_register;
 8010d0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d10:	61b8      	str	r0, [r7, #24]
	if (element.command) {
 8010d12:	79d0      	ldrb	r0, [r2, #7]
	service_information.register_ = element.element_register;
 8010d14:	83b9      	strh	r1, [r7, #28]
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010d16:	f10c 0104 	add.w	r1, ip, #4
	if (element.command) {
 8010d1a:	b340      	cbz	r0, 8010d6e <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x80>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010d1c:	4628      	mov	r0, r5
 8010d1e:	f7f0 f86d 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010d22:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010d26:	4621      	mov	r1, r4
 8010d28:	4628      	mov	r0, r5
 8010d2a:	f7fe f947 	bl	800efbc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8010d2e:	4680      	mov	r8, r0
      }
 8010d30:	4628      	mov	r0, r5
 8010d32:	f7ef ff69 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010d36:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8010d3a:	b18b      	cbz	r3, 8010d60 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 8010d42:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 8010d46:	83fb      	strh	r3, [r7, #30]
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	f8da 0008 	ldr.w	r0, [sl, #8]
 8010d4e:	f887 3020 	strb.w	r3, [r7, #32]
 8010d52:	f107 0318 	add.w	r3, r7, #24
 8010d56:	f8cd 8000 	str.w	r8, [sp]
 8010d5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010d5c:	f008 fa5d 	bl	801921a <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
		return start_index + 1;
 8010d60:	3401      	adds	r4, #1
 8010d62:	b2a4      	uxth	r4, r4
}
 8010d64:	4620      	mov	r0, r4
 8010d66:	374c      	adds	r7, #76	@ 0x4c
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (element.access == WRITE) {
 8010d6e:	bb1e      	cbnz	r6, 8010db8 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0xca>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8010d70:	4628      	mov	r0, r5
 8010d72:	f7f0 f843 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010d76:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010d7a:	4621      	mov	r1, r4
 8010d7c:	4628      	mov	r0, r5
 8010d7e:	f7fe f91d 	bl	800efbc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8010d82:	4680      	mov	r8, r0
 8010d84:	4628      	mov	r0, r5
 8010d86:	f7ef ff3f 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010d8a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d0e6      	beq.n	8010d60 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 8010d92:	2301      	movs	r3, #1
 8010d94:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 8010d98:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 8010d9c:	83fb      	strh	r3, [r7, #30]
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	f8da 0008 	ldr.w	r0, [sl, #8]
 8010da4:	f887 3020 	strb.w	r3, [r7, #32]
 8010da8:	f107 0318 	add.w	r3, r7, #24
 8010dac:	f8cd 8000 	str.w	r8, [sp]
 8010db0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010db2:	f008 f9f5 	bl	80191a0 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 8010db6:	e7d3      	b.n	8010d60 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x72>
		T array_values[element.element_register.length];
 8010db8:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8010dbc:	466e      	mov	r6, sp
	}
 8010dbe:	f8c7 d004 	str.w	sp, [r7, #4]
		T array_values[element.element_register.length];
 8010dc2:	ea4f 0388 	mov.w	r3, r8, lsl #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010dc6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8010dc8:	3307      	adds	r3, #7
 8010dca:	08db      	lsrs	r3, r3, #3
 8010dcc:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
 8010dd0:	f107 0616 	add.w	r6, r7, #22
 8010dd4:	469d      	mov	sp, r3
		if (not element.element_register.isArray) {
 8010dd6:	78d3      	ldrb	r3, [r2, #3]
		T array_values[element.element_register.length];
 8010dd8:	f10d 0910 	add.w	r9, sp, #16
 8010ddc:	e9c7 0009 	strd	r0, r0, [r7, #36]	@ 0x24
		if (not element.element_register.isArray) {
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d139      	bne.n	8010e58 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x16a>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010de4:	4628      	mov	r0, r5
			data = &single_value;
 8010de6:	f107 0930 	add.w	r9, r7, #48	@ 0x30
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010dea:	f7f0 f807 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
			length_to_extract = 1;
 8010dee:	f04f 0801 	mov.w	r8, #1
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8010df2:	4632      	mov	r2, r6
 8010df4:	4621      	mov	r1, r4
 8010df6:	4628      	mov	r0, r5
 8010df8:	f7fe f8c7 	bl	800ef8a <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>
 8010dfc:	6338      	str	r0, [r7, #48]	@ 0x30
      }
 8010dfe:	4628      	mov	r0, r5
 8010e00:	f7ef ff02 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8010e04:	7dbb      	ldrb	r3, [r7, #22]
 8010e06:	b1eb      	cbz	r3, 8010e44 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x156>
 8010e08:	68fb      	ldr	r3, [r7, #12]
			services->ReceiveRead<T>(service_information, data);
 8010e0a:	f8da 6008 	ldr.w	r6, [sl, #8]
 8010e0e:	f04f 0a01 	mov.w	sl, #1
 8010e12:	f887 3020 	strb.w	r3, [r7, #32]
 8010e16:	f107 0318 	add.w	r3, r7, #24
 8010e1a:	f8a7 801e 	strh.w	r8, [r7, #30]
 8010e1e:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 8010e22:	f887 a022 	strb.w	sl, [r7, #34]	@ 0x22
	bool success = true;
 8010e26:	f887 a017 	strb.w	sl, [r7, #23]
 8010e2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010e2e:	7ebb      	ldrb	r3, [r7, #26]
 8010e30:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8010e34:	60bb      	str	r3, [r7, #8]
	uint8_t start_index = 0;
 8010e36:	2100      	movs	r1, #0
		CommunicationLED(leds, information.interface.interface);
 8010e38:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 8010e3c:	603b      	str	r3, [r7, #0]
	while (success) {
 8010e3e:	7dfb      	ldrb	r3, [r7, #23]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d13b      	bne.n	8010ebc <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x1ce>
		return start_index + sizeof(T) * length_to_extract;
 8010e44:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8010e48:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010e4c:	f7fe fcc7 	bl	800f7de <_ZNSt12_Vector_baseImSaImEED1Ev>
 8010e50:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8010e54:	b2a4      	uxth	r4, r4
 8010e56:	e785      	b.n	8010d64 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x76>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 8010e58:	f1b8 0f00 	cmp.w	r8, #0
 8010e5c:	d00d      	beq.n	8010e7a <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x18c>
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8010e5e:	4628      	mov	r0, r5
 8010e60:	f7ef ffcc 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010e64:	4648      	mov	r0, r9
 8010e66:	4643      	mov	r3, r8
 8010e68:	4622      	mov	r2, r4
 8010e6a:	4629      	mov	r1, r5
 8010e6c:	9600      	str	r6, [sp, #0]
 8010e6e:	f7ff fe93 	bl	8010b98 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8010e72:	4628      	mov	r0, r5
 8010e74:	f7ef fec8 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			data = array_values;
 8010e78:	e7c4      	b.n	8010e04 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x116>
			length_to_extract = message.payload[start_index];
 8010e7a:	f8dc 3004 	ldr.w	r3, [ip, #4]
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010e7e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
			length_to_extract = message.payload[start_index];
 8010e82:	f813 8004 	ldrb.w	r8, [r3, r4]
			start_index++;
 8010e86:	3401      	adds	r4, #1
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010e88:	f7ef ffb8 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010e8c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
			start_index++;
 8010e90:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8010e92:	4643      	mov	r3, r8
 8010e94:	4628      	mov	r0, r5
 8010e96:	9600      	str	r6, [sp, #0]
 8010e98:	4622      	mov	r2, r4
 8010e9a:	f7ff fe23 	bl	8010ae4 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8010e9e:	4629      	mov	r1, r5
 8010ea0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010ea4:	f7fe fca6 	bl	800f7f4 <_ZNSt6vectorImSaImEEaSEOS1_.isra.0>
 8010ea8:	4628      	mov	r0, r5
 8010eaa:	f7fe fc98 	bl	800f7de <_ZNSt12_Vector_baseImSaImEED1Ev>
 8010eae:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8010eb2:	f7ef fea9 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8010eb6:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 8010eba:	e7a3      	b.n	8010e04 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x116>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	4630      	mov	r0, r6
 8010ec0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8010ec4:	f107 0317 	add.w	r3, r7, #23
 8010ec8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010ecc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010ed0:	f8ad 3000 	strh.w	r3, [sp]
 8010ed4:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010ed8:	f008 f923 	bl	8019122 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 8010edc:	7dfa      	ldrb	r2, [r7, #23]
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8010ede:	4683      	mov	fp, r0
		if (not success) return;
 8010ee0:	2a00      	cmp	r2, #0
 8010ee2:	d0af      	beq.n	8010e44 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x156>
		if (information.length > SERVICES_BUFFER_SIZE) return;
 8010ee4:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 8010ee8:	d8ac      	bhi.n	8010e44 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x156>
		CommunicationLED(leds, information.interface.interface);
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	68f9      	ldr	r1, [r7, #12]
 8010eee:	f8d3 0440 	ldr.w	r0, [r3, #1088]	@ 0x440
 8010ef2:	f7fd fd8c 	bl	800ea0e <_Z16CommunicationLEDP4LEDSh>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8010ef6:	f04f 31ff 	mov.w	r1, #4294967295
 8010efa:	6830      	ldr	r0, [r6, #0]
 8010efc:	f7fb fc4a 	bl	800c794 <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 8010f00:	2218      	movs	r2, #24
		switch (information.register_.type) {
 8010f02:	68bb      	ldr	r3, [r7, #8]
		services[index].configuration.length = information.length;
 8010f04:	fb02 620b 	mla	r2, r2, fp, r6
 8010f08:	f8a2 8010 	strh.w	r8, [r2, #16]
		switch (information.register_.type) {
 8010f0c:	2b08      	cmp	r3, #8
 8010f0e:	d80d      	bhi.n	8010f2c <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x23e>
 8010f10:	e8df f003 	tbb	[pc, r3]
 8010f14:	0c1d0c05 	.word	0x0c1d0c05
 8010f18:	0c0c0c26 	.word	0x0c0c0c26
 8010f1c:	33          	.byte	0x33
 8010f1d:	00          	.byte	0x00
			TranferData<uint8_t>((uint8_t*) data, &buffer_uint8[index][0], information.length);
 8010f1e:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 8010f22:	2200      	movs	r2, #0
 8010f24:	3138      	adds	r1, #56	@ 0x38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010f26:	b290      	uxth	r0, r2
 8010f28:	4580      	cmp	r8, r0
 8010f2a:	d80b      	bhi.n	8010f44 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x256>
		services[index].reception_flag = true;
 8010f2c:	2218      	movs	r2, #24
		osSemaphoreRelease(ServiceSemaphore);
 8010f2e:	6830      	ldr	r0, [r6, #0]
		services[index].reception_flag = true;
 8010f30:	fb02 620b 	mla	r2, r2, fp, r6
 8010f34:	f882 a009 	strb.w	sl, [r2, #9]
		osSemaphoreRelease(ServiceSemaphore);
 8010f38:	f7fb fc60 	bl	800c7fc <osSemaphoreRelease>
		start_index = index + 1;
 8010f3c:	f10b 0101 	add.w	r1, fp, #1
 8010f40:	b2c9      	uxtb	r1, r1
 8010f42:	e77c      	b.n	8010e3e <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x150>
		to[buffer_index] = from[buffer_index];
 8010f44:	f819 0002 	ldrb.w	r0, [r9, r2]
 8010f48:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010f4a:	3201      	adds	r2, #1
 8010f4c:	e7eb      	b.n	8010f26 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x238>
			TranferData<uint32_t>((uint32_t*) data, &buffer_uint32[index][0], information.length);
 8010f4e:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 8010f52:	4642      	mov	r2, r8
 8010f54:	4648      	mov	r0, r9
 8010f56:	f501 710e 	add.w	r1, r1, #568	@ 0x238
 8010f5a:	f7fd ffdf 	bl	800ef1c <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0>
			break;
 8010f5e:	e7e5      	b.n	8010f2c <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x23e>
			TranferData<int8_t>((int8_t*) data, &buffer_int8[index][0], information.length);
 8010f60:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 8010f64:	2200      	movs	r2, #0
 8010f66:	f601 2138 	addw	r1, r1, #2616	@ 0xa38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010f6a:	b290      	uxth	r0, r2
 8010f6c:	4580      	cmp	r8, r0
 8010f6e:	d9dd      	bls.n	8010f2c <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x23e>
		to[buffer_index] = from[buffer_index];
 8010f70:	f919 0002 	ldrsb.w	r0, [r9, r2]
 8010f74:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8010f76:	3201      	adds	r2, #1
 8010f78:	e7f7      	b.n	8010f6a <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x27c>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 8010f7a:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 8010f7e:	4642      	mov	r2, r8
 8010f80:	4648      	mov	r0, r9
 8010f82:	f601 4138 	addw	r1, r1, #3128	@ 0xc38
 8010f86:	f7fd ffbf 	bl	800ef08 <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0>
			break;
 8010f8a:	e7cf      	b.n	8010f2c <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x23e>

08010f8c <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>:
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8010f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010f90:	2400      	movs	r4, #0
 8010f92:	4605      	mov	r5, r0
 8010f94:	460f      	mov	r7, r1
 8010f96:	4690      	mov	r8, r2
 8010f98:	461e      	mov	r6, r3
 8010f9a:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
	for (uint8_t index = 0; index < length; index++) {
 8010f9e:	46a2      	mov	sl, r4
 8010fa0:	6084      	str	r4, [r0, #8]
 8010fa2:	e9c0 4400 	strd	r4, r4, [r0]
 8010fa6:	fa5f f48a 	uxtb.w	r4, sl
 8010faa:	42b4      	cmp	r4, r6
 8010fac:	db03      	blt.n	8010fb6 <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x2a>
}
 8010fae:	4628      	mov	r0, r5
 8010fb0:	b004      	add	sp, #16
 8010fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8010fb6:	4444      	add	r4, r8
 8010fb8:	4639      	mov	r1, r7
 8010fba:	a801      	add	r0, sp, #4
		if (not *success)
 8010fbc:	f10a 0a01 	add.w	sl, sl, #1
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8010fc0:	f7ef ff1c 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010fc4:	464a      	mov	r2, r9
 8010fc6:	b2a1      	uxth	r1, r4
 8010fc8:	a801      	add	r0, sp, #4
 8010fca:	f7fd fff7 	bl	800efbc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8010fce:	f88d 0003 	strb.w	r0, [sp, #3]
      }
 8010fd2:	a801      	add	r0, sp, #4
 8010fd4:	f7ef fe18 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 8010fd8:	f899 3000 	ldrb.w	r3, [r9]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d0e6      	beq.n	8010fae <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x22>
		data.push_back(element);
 8010fe0:	f10d 0103 	add.w	r1, sp, #3
 8010fe4:	4628      	mov	r0, r5
 8010fe6:	f7fe fc87 	bl	800f8f8 <_ZNSt6vectorIhSaIhEE9push_backERKh>
	for (uint8_t index = 0; index < length; index++) {
 8010fea:	e7dc      	b.n	8010fa6 <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x1a>

08010fec <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8010fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ff0:	b085      	sub	sp, #20
 8010ff2:	4607      	mov	r7, r0
 8010ff4:	4688      	mov	r8, r1
 8010ff6:	4691      	mov	r9, r2
 8010ff8:	461c      	mov	r4, r3
 8010ffa:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8010ffe:	2600      	movs	r6, #0
 8011000:	b2f5      	uxtb	r5, r6
	for (uint8_t index = 0; index < length; index++) {
 8011002:	42a5      	cmp	r5, r4
 8011004:	db02      	blt.n	801100c <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x20>
}
 8011006:	b005      	add	sp, #20
 8011008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 801100c:	4641      	mov	r1, r8
 801100e:	a801      	add	r0, sp, #4
 8011010:	f7ef fef4 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011014:	eb05 0109 	add.w	r1, r5, r9
 8011018:	465a      	mov	r2, fp
 801101a:	a801      	add	r0, sp, #4
 801101c:	b289      	uxth	r1, r1
		if (not *success)
 801101e:	3601      	adds	r6, #1
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8011020:	f7fd ffcc 	bl	800efbc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8011024:	4682      	mov	sl, r0
 8011026:	a801      	add	r0, sp, #4
 8011028:	f7ef fdee 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 801102c:	f89b 3000 	ldrb.w	r3, [fp]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d0e8      	beq.n	8011006 <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x1a>
		data[index] = element;
 8011034:	f807 a005 	strb.w	sl, [r7, r5]
	for (uint8_t index = 0; index < length; index++) {
 8011038:	e7e2      	b.n	8011000 <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x14>

0801103a <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 801103a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801103e:	b08f      	sub	sp, #60	@ 0x3c
 8011040:	461c      	mov	r4, r3
 8011042:	4691      	mov	r9, r2
 8011044:	468a      	mov	sl, r1
	T array_values[element.element_register.length];
 8011046:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 801104a:	466a      	mov	r2, sp
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 801104c:	af02      	add	r7, sp, #8
	T array_values[element.element_register.length];
 801104e:	f108 0307 	add.w	r3, r8, #7
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011052:	3104      	adds	r1, #4
 8011054:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 8011058:	f107 060b 	add.w	r6, r7, #11
	T array_values[element.element_register.length];
 801105c:	08db      	lsrs	r3, r3, #3
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 801105e:	6078      	str	r0, [r7, #4]
	T array_values[element.element_register.length];
 8011060:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8011064:	469d      	mov	sp, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011066:	2300      	movs	r3, #0
 8011068:	e9c7 3303 	strd	r3, r3, [r7, #12]
 801106c:	617b      	str	r3, [r7, #20]
 801106e:	f10d 0b08 	add.w	fp, sp, #8
	if (not element.element_register.isArray) {
 8011072:	f899 3003 	ldrb.w	r3, [r9, #3]
 8011076:	bb83      	cbnz	r3, 80110da <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0xa0>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011078:	4628      	mov	r0, r5
		data = &single_value;
 801107a:	f107 0b18 	add.w	fp, r7, #24
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801107e:	f7ef febd 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		length_to_extract = 1;
 8011082:	f04f 0801 	mov.w	r8, #1
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011086:	4632      	mov	r2, r6
 8011088:	4621      	mov	r1, r4
 801108a:	4628      	mov	r0, r5
 801108c:	f7fd ff96 	bl	800efbc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8011090:	7638      	strb	r0, [r7, #24]
      }
 8011092:	4628      	mov	r0, r5
 8011094:	f7ef fdb8 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	subscriber_information.interface.interface = message.interface;
 8011098:	f89a 3000 	ldrb.w	r3, [sl]
	return start_index + sizeof(T) * length_to_extract;
 801109c:	4444      	add	r4, r8
	subscriber_information.length = length_to_extract;
 801109e:	f8a7 802c 	strh.w	r8, [r7, #44]	@ 0x2c
	subscriber_information.interface.interface = message.interface;
 80110a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	return start_index + sizeof(T) * length_to_extract;
 80110a6:	b2a4      	uxth	r4, r4
	subscriber_information.interface.address = message.source_address;
 80110a8:	f89a 3011 	ldrb.w	r3, [sl, #17]
	subscriber_information.register_ = element.element_register;
 80110ac:	e899 0003 	ldmia.w	r9, {r0, r1}
	subscriber_information.interface.address = message.source_address;
 80110b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	subscriber_information.register_ = element.element_register;
 80110b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80110b6:	8539      	strh	r1, [r7, #40]	@ 0x28
	subscribers->Receive<T>(subscriber_information, data);
 80110b8:	f8cd b000 	str.w	fp, [sp]
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80110c2:	68c0      	ldr	r0, [r0, #12]
 80110c4:	f7fe feac 	bl	800fe20 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_>
 80110c8:	f107 000c 	add.w	r0, r7, #12
 80110cc:	f7ef fd9c 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 80110d0:	4620      	mov	r0, r4
 80110d2:	3734      	adds	r7, #52	@ 0x34
 80110d4:	46bd      	mov	sp, r7
 80110d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 80110da:	f1b8 0f00 	cmp.w	r8, #0
 80110de:	d00d      	beq.n	80110fc <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0xc2>
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 80110e0:	4628      	mov	r0, r5
 80110e2:	f7ef fe8b 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80110e6:	4658      	mov	r0, fp
 80110e8:	4643      	mov	r3, r8
 80110ea:	4622      	mov	r2, r4
 80110ec:	4629      	mov	r1, r5
 80110ee:	9600      	str	r6, [sp, #0]
 80110f0:	f7ff ff7c 	bl	8010fec <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 80110f4:	4628      	mov	r0, r5
 80110f6:	f7ef fd87 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = array_values;
 80110fa:	e7cd      	b.n	8011098 <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0x5e>
		length_to_extract = message.payload[start_index];
 80110fc:	f8da 3004 	ldr.w	r3, [sl, #4]
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011100:	f107 0018 	add.w	r0, r7, #24
		length_to_extract = message.payload[start_index];
 8011104:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8011108:	3401      	adds	r4, #1
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801110a:	f7ef fe77 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801110e:	f107 0118 	add.w	r1, r7, #24
		start_index++;
 8011112:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011114:	4643      	mov	r3, r8
 8011116:	4628      	mov	r0, r5
 8011118:	9600      	str	r6, [sp, #0]
 801111a:	4622      	mov	r2, r4
 801111c:	f7ff ff36 	bl	8010f8c <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8011120:	4629      	mov	r1, r5
 8011122:	f107 000c 	add.w	r0, r7, #12
 8011126:	f7fe f86a 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 801112a:	4628      	mov	r0, r5
 801112c:	f7ef fd6c 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011130:	f107 0018 	add.w	r0, r7, #24
 8011134:	f7ef fd68 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8011138:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 801113c:	e7ac      	b.n	8011098 <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0x5e>

0801113e <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 801113e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011142:	468c      	mov	ip, r1
 8011144:	b097      	sub	sp, #92	@ 0x5c
 8011146:	461c      	mov	r4, r3
 8011148:	4682      	mov	sl, r0
 801114a:	af04      	add	r7, sp, #16
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 801114c:	f89c 3000 	ldrb.w	r3, [ip]
 8011150:	f89c b011 	ldrb.w	fp, [ip, #17]
 8011154:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8011158:	60fb      	str	r3, [r7, #12]
	if (element.command) {
 801115a:	79d3      	ldrb	r3, [r2, #7]
	service_information.access = element.access;
 801115c:	7a16      	ldrb	r6, [r2, #8]
	service_information.register_ = element.element_register;
 801115e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011162:	83b9      	strh	r1, [r7, #28]
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8011164:	f10c 0104 	add.w	r1, ip, #4
	service_information.register_ = element.element_register;
 8011168:	61b8      	str	r0, [r7, #24]
	if (element.command) {
 801116a:	b343      	cbz	r3, 80111be <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x80>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 801116c:	4628      	mov	r0, r5
 801116e:	f7ef fe45 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011172:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011176:	4621      	mov	r1, r4
 8011178:	4628      	mov	r0, r5
 801117a:	f7fd ff1f 	bl	800efbc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 801117e:	4680      	mov	r8, r0
      }
 8011180:	4628      	mov	r0, r5
 8011182:	f7ef fd41 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8011186:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801118a:	b18b      	cbz	r3, 80111b0 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 801118c:	2301      	movs	r3, #1
 801118e:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 8011192:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 8011196:	83fb      	strh	r3, [r7, #30]
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	f8da 0008 	ldr.w	r0, [sl, #8]
 801119e:	f887 3020 	strb.w	r3, [r7, #32]
 80111a2:	f107 0318 	add.w	r3, r7, #24
 80111a6:	f8cd 8000 	str.w	r8, [sp]
 80111aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80111ac:	f008 f835 	bl	801921a <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
		return start_index + 1;
 80111b0:	3401      	adds	r4, #1
 80111b2:	b2a4      	uxth	r4, r4
}
 80111b4:	4620      	mov	r0, r4
 80111b6:	374c      	adds	r7, #76	@ 0x4c
 80111b8:	46bd      	mov	sp, r7
 80111ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (element.access == WRITE) {
 80111be:	bb1e      	cbnz	r6, 8011208 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0xca>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 80111c0:	4628      	mov	r0, r5
 80111c2:	f7ef fe1b 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80111c6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80111ca:	4621      	mov	r1, r4
 80111cc:	4628      	mov	r0, r5
 80111ce:	f7fd fef5 	bl	800efbc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 80111d2:	4680      	mov	r8, r0
 80111d4:	4628      	mov	r0, r5
 80111d6:	f7ef fd17 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 80111da:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d0e6      	beq.n	80111b0 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 80111e2:	2301      	movs	r3, #1
 80111e4:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 80111e8:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 80111ec:	83fb      	strh	r3, [r7, #30]
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	f8da 0008 	ldr.w	r0, [sl, #8]
 80111f4:	f887 3020 	strb.w	r3, [r7, #32]
 80111f8:	f107 0318 	add.w	r3, r7, #24
 80111fc:	f8cd 8000 	str.w	r8, [sp]
 8011200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011202:	f007 ffcd 	bl	80191a0 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 8011206:	e7d3      	b.n	80111b0 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x72>
		T array_values[element.element_register.length];
 8011208:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 801120c:	466e      	mov	r6, sp
	}
 801120e:	f8c7 d004 	str.w	sp, [r7, #4]
		T array_values[element.element_register.length];
 8011212:	f108 0007 	add.w	r0, r8, #7
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011216:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011218:	08c0      	lsrs	r0, r0, #3
 801121a:	eba6 00c0 	sub.w	r0, r6, r0, lsl #3
 801121e:	f107 0617 	add.w	r6, r7, #23
 8011222:	4685      	mov	sp, r0
 8011224:	e9c7 3309 	strd	r3, r3, [r7, #36]	@ 0x24
		if (not element.element_register.isArray) {
 8011228:	78d3      	ldrb	r3, [r2, #3]
		T array_values[element.element_register.length];
 801122a:	f10d 0910 	add.w	r9, sp, #16
		if (not element.element_register.isArray) {
 801122e:	bbc3      	cbnz	r3, 80112a2 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x164>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011230:	4628      	mov	r0, r5
			data = &single_value;
 8011232:	f107 0916 	add.w	r9, r7, #22
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011236:	f7ef fde1 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
			length_to_extract = 1;
 801123a:	f04f 0801 	mov.w	r8, #1
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801123e:	4632      	mov	r2, r6
 8011240:	4621      	mov	r1, r4
 8011242:	4628      	mov	r0, r5
 8011244:	f7fd feba 	bl	800efbc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8011248:	75b8      	strb	r0, [r7, #22]
      }
 801124a:	4628      	mov	r0, r5
 801124c:	f7ef fcdc 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8011250:	7dfb      	ldrb	r3, [r7, #23]
 8011252:	b1eb      	cbz	r3, 8011290 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x152>
 8011254:	68fb      	ldr	r3, [r7, #12]
			services->ReceiveRead<T>(service_information, data);
 8011256:	f8da 6008 	ldr.w	r6, [sl, #8]
 801125a:	f04f 0a01 	mov.w	sl, #1
 801125e:	f887 3020 	strb.w	r3, [r7, #32]
 8011262:	f107 0318 	add.w	r3, r7, #24
 8011266:	f8a7 801e 	strh.w	r8, [r7, #30]
 801126a:	f887 b021 	strb.w	fp, [r7, #33]	@ 0x21
 801126e:	f887 a022 	strb.w	sl, [r7, #34]	@ 0x22
	bool success = true;
 8011272:	f887 a030 	strb.w	sl, [r7, #48]	@ 0x30
 8011276:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801127a:	7ebb      	ldrb	r3, [r7, #26]
 801127c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011280:	60bb      	str	r3, [r7, #8]
	uint8_t start_index = 0;
 8011282:	2100      	movs	r1, #0
		CommunicationLED(leds, information.interface.interface);
 8011284:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 8011288:	603b      	str	r3, [r7, #0]
	while (success) {
 801128a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801128e:	bbd3      	cbnz	r3, 8011306 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x1c8>
		return start_index + sizeof(T) * length_to_extract;
 8011290:	4444      	add	r4, r8
 8011292:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011296:	f7ef fcb7 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801129a:	f8d7 d004 	ldr.w	sp, [r7, #4]
 801129e:	b2a4      	uxth	r4, r4
 80112a0:	e788      	b.n	80111b4 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x76>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 80112a2:	f1b8 0f00 	cmp.w	r8, #0
 80112a6:	d00d      	beq.n	80112c4 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x186>
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 80112a8:	4628      	mov	r0, r5
 80112aa:	f7ef fda7 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80112ae:	4648      	mov	r0, r9
 80112b0:	4643      	mov	r3, r8
 80112b2:	4622      	mov	r2, r4
 80112b4:	4629      	mov	r1, r5
 80112b6:	9600      	str	r6, [sp, #0]
 80112b8:	f7ff fe98 	bl	8010fec <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 80112bc:	4628      	mov	r0, r5
 80112be:	f7ef fca3 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			data = array_values;
 80112c2:	e7c5      	b.n	8011250 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x112>
			length_to_extract = message.payload[start_index];
 80112c4:	f8dc 3004 	ldr.w	r3, [ip, #4]
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80112c8:	f107 0030 	add.w	r0, r7, #48	@ 0x30
			length_to_extract = message.payload[start_index];
 80112cc:	f813 8004 	ldrb.w	r8, [r3, r4]
			start_index++;
 80112d0:	3401      	adds	r4, #1
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80112d2:	f7ef fd93 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80112d6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
			start_index++;
 80112da:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80112dc:	4643      	mov	r3, r8
 80112de:	4628      	mov	r0, r5
 80112e0:	9600      	str	r6, [sp, #0]
 80112e2:	4622      	mov	r2, r4
 80112e4:	f7ff fe52 	bl	8010f8c <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 80112e8:	4629      	mov	r1, r5
 80112ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80112ee:	f7fd ff86 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 80112f2:	4628      	mov	r0, r5
 80112f4:	f7ef fc88 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80112f8:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80112fc:	f7ef fc84 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8011300:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 8011304:	e7a4      	b.n	8011250 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x112>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	4630      	mov	r0, r6
 801130a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 801130e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011312:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011316:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801131a:	f8ad 3000 	strh.w	r3, [sp]
 801131e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8011322:	f007 fefe 	bl	8019122 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 8011326:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 801132a:	4683      	mov	fp, r0
		if (not success) return;
 801132c:	2a00      	cmp	r2, #0
 801132e:	d0af      	beq.n	8011290 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x152>
		if (information.length > SERVICES_BUFFER_SIZE) return;
 8011330:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 8011334:	d8ac      	bhi.n	8011290 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x152>
		CommunicationLED(leds, information.interface.interface);
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	68f9      	ldr	r1, [r7, #12]
 801133a:	f8d3 0440 	ldr.w	r0, [r3, #1088]	@ 0x440
 801133e:	f7fd fb66 	bl	800ea0e <_Z16CommunicationLEDP4LEDSh>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8011342:	f04f 31ff 	mov.w	r1, #4294967295
 8011346:	6830      	ldr	r0, [r6, #0]
 8011348:	f7fb fa24 	bl	800c794 <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 801134c:	2218      	movs	r2, #24
		switch (information.register_.type) {
 801134e:	68bb      	ldr	r3, [r7, #8]
		services[index].configuration.length = information.length;
 8011350:	fb02 620b 	mla	r2, r2, fp, r6
 8011354:	f8a2 8010 	strh.w	r8, [r2, #16]
		switch (information.register_.type) {
 8011358:	2b08      	cmp	r3, #8
 801135a:	d80d      	bhi.n	8011378 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x23a>
 801135c:	e8df f003 	tbb	[pc, r3]
 8011360:	0c1d0c05 	.word	0x0c1d0c05
 8011364:	0c0c0c26 	.word	0x0c0c0c26
 8011368:	33          	.byte	0x33
 8011369:	00          	.byte	0x00
			TranferData<uint8_t>((uint8_t*) data, &buffer_uint8[index][0], information.length);
 801136a:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 801136e:	2200      	movs	r2, #0
 8011370:	3138      	adds	r1, #56	@ 0x38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8011372:	b290      	uxth	r0, r2
 8011374:	4580      	cmp	r8, r0
 8011376:	d80b      	bhi.n	8011390 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x252>
		services[index].reception_flag = true;
 8011378:	2218      	movs	r2, #24
		osSemaphoreRelease(ServiceSemaphore);
 801137a:	6830      	ldr	r0, [r6, #0]
		services[index].reception_flag = true;
 801137c:	fb02 620b 	mla	r2, r2, fp, r6
 8011380:	f882 a009 	strb.w	sl, [r2, #9]
		osSemaphoreRelease(ServiceSemaphore);
 8011384:	f7fb fa3a 	bl	800c7fc <osSemaphoreRelease>
		start_index = index + 1;
 8011388:	f10b 0101 	add.w	r1, fp, #1
 801138c:	b2c9      	uxtb	r1, r1
 801138e:	e77c      	b.n	801128a <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x14c>
		to[buffer_index] = from[buffer_index];
 8011390:	f819 0002 	ldrb.w	r0, [r9, r2]
 8011394:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8011396:	3201      	adds	r2, #1
 8011398:	e7eb      	b.n	8011372 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x234>
			TranferData<uint32_t>((uint32_t*) data, &buffer_uint32[index][0], information.length);
 801139a:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 801139e:	4642      	mov	r2, r8
 80113a0:	4648      	mov	r0, r9
 80113a2:	f501 710e 	add.w	r1, r1, #568	@ 0x238
 80113a6:	f7fd fdb9 	bl	800ef1c <_ZN8Services11TranferDataImEEvPT_S2_t.isra.0>
			break;
 80113aa:	e7e5      	b.n	8011378 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x23a>
			TranferData<int8_t>((int8_t*) data, &buffer_int8[index][0], information.length);
 80113ac:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 80113b0:	2200      	movs	r2, #0
 80113b2:	f601 2138 	addw	r1, r1, #2616	@ 0xa38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 80113b6:	b290      	uxth	r0, r2
 80113b8:	4580      	cmp	r8, r0
 80113ba:	d9dd      	bls.n	8011378 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x23a>
		to[buffer_index] = from[buffer_index];
 80113bc:	f919 0002 	ldrsb.w	r0, [r9, r2]
 80113c0:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 80113c2:	3201      	adds	r2, #1
 80113c4:	e7f7      	b.n	80113b6 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x278>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 80113c6:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 80113ca:	4642      	mov	r2, r8
 80113cc:	4648      	mov	r0, r9
 80113ce:	f601 4138 	addw	r1, r1, #3128	@ 0xc38
 80113d2:	f7fd fd99 	bl	800ef08 <_ZN8Services11TranferDataIfEEvPT_S2_t.isra.0>
			break;
 80113d6:	e7cf      	b.n	8011378 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x23a>

080113d8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>:
      vector(initializer_list<value_type> __l,
 80113d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80113da:	ab02      	add	r3, sp, #8
 80113dc:	4604      	mov	r4, r0
 80113de:	460e      	mov	r6, r1
      size() const noexcept { return _M_len; }
 80113e0:	4615      	mov	r5, r2
      end() const noexcept { return begin() + size(); }
 80113e2:	188f      	adds	r7, r1, r2
 80113e4:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
 80113e8:	2300      	movs	r3, #0
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80113ea:	429a      	cmp	r2, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 80113ec:	6083      	str	r3, [r0, #8]
 80113ee:	e9c0 3300 	strd	r3, r3, [r0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80113f2:	da02      	bge.n	80113fa <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0+0x22>
	  __throw_length_error(
 80113f4:	4808      	ldr	r0, [pc, #32]	@ (8011418 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0+0x40>)
 80113f6:	f00a fcc3 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80113fa:	4610      	mov	r0, r2
 80113fc:	f7fd fdeb 	bl	800efd6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011400:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8011402:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
 8011404:	4639      	mov	r1, r7
 8011406:	6020      	str	r0, [r4, #0]
 8011408:	4630      	mov	r0, r6
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801140a:	60a5      	str	r5, [r4, #8]
 801140c:	f7ef fcea 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8011410:	6060      	str	r0, [r4, #4]
      }
 8011412:	b003      	add	sp, #12
 8011414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011416:	bf00      	nop
 8011418:	0801c610 	.word	0x0801c610

0801141c <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPhEEvT_S4_St20forward_iterator_tag.isra.0>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 801141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 801141e:	1a57      	subs	r7, r2, r1
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8011420:	4604      	mov	r4, r0
 8011422:	460d      	mov	r5, r1
 8011424:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8011426:	d502      	bpl.n	801142e <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPhEEvT_S4_St20forward_iterator_tag.isra.0+0x12>
	  __throw_length_error(
 8011428:	4807      	ldr	r0, [pc, #28]	@ (8011448 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPhEEvT_S4_St20forward_iterator_tag.isra.0+0x2c>)
 801142a:	f00a fca9 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801142e:	4638      	mov	r0, r7
 8011430:	f7fd fdd1 	bl	800efd6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011434:	4407      	add	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8011436:	4602      	mov	r2, r0
 8011438:	6020      	str	r0, [r4, #0]
 801143a:	4631      	mov	r1, r6
 801143c:	4628      	mov	r0, r5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801143e:	60a7      	str	r7, [r4, #8]
 8011440:	f7ef fcd0 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8011444:	6060      	str	r0, [r4, #4]
	}
 8011446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011448:	0801c610 	.word	0x0801c610

0801144c <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length < 3) return false;
 801144c:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801144e:	4611      	mov	r1, r2
 8011450:	b530      	push	{r4, r5, lr}
 8011452:	4605      	mov	r5, r0
 8011454:	b08b      	sub	sp, #44	@ 0x2c
 8011456:	f04f 0400 	mov.w	r4, #0
			if (length < 3) return false;
 801145a:	d928      	bls.n	80114ae <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x62>
			msg.interface = input[0];
 801145c:	7812      	ldrb	r2, [r2, #0]
	  _M_range_initialize(__first, __last,
 801145e:	a805      	add	r0, sp, #20
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011460:	9403      	str	r4, [sp, #12]
 8011462:	f88d 2000 	strb.w	r2, [sp]
			msg.target_address = input[1];
 8011466:	784a      	ldrb	r2, [r1, #1]
 8011468:	9407      	str	r4, [sp, #28]
 801146a:	f88d 2010 	strb.w	r2, [sp, #16]
	  _M_range_initialize(__first, __last,
 801146e:	18ca      	adds	r2, r1, r3
 8011470:	3102      	adds	r1, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011472:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8011476:	e9cd 4405 	strd	r4, r4, [sp, #20]
	  _M_range_initialize(__first, __last,
 801147a:	f7ff ffcf 	bl	801141c <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPhEEvT_S4_St20forward_iterator_tag.isra.0>
			msg.payload = std::vector<uint8_t> (&input[2], &input[length]);
 801147e:	a905      	add	r1, sp, #20
 8011480:	a801      	add	r0, sp, #4
 8011482:	f7fd febc 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8011486:	a805      	add	r0, sp, #20
 8011488:	f7ef fbbe 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			return self->Send(msg);
 801148c:	4669      	mov	r1, sp
 801148e:	a805      	add	r0, sp, #20
 8011490:	f7fe fb3f 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 8011494:	a905      	add	r1, sp, #20
 8011496:	4628      	mov	r0, r5
 8011498:	f7fe fc2a 	bl	800fcf0 <_ZN13Communication4SendE13MessageHeader>
 801149c:	1b04      	subs	r4, r0, r4
 801149e:	a806      	add	r0, sp, #24
 80114a0:	bf18      	it	ne
 80114a2:	2401      	movne	r4, #1
 80114a4:	f7ef fbb0 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80114a8:	a801      	add	r0, sp, #4
 80114aa:	f7ef fbad 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		}
 80114ae:	4620      	mov	r0, r4
 80114b0:	b00b      	add	sp, #44	@ 0x2c
 80114b2:	bd30      	pop	{r4, r5, pc}

080114b4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>:
	insert(const_iterator __position, _InputIterator __first,
 80114b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (__first != __last)
 80114b8:	429a      	cmp	r2, r3
      : _M_current(__i) { }
 80114ba:	f8d0 a000 	ldr.w	sl, [r0]
 80114be:	4604      	mov	r4, r0
 80114c0:	460d      	mov	r5, r1
 80114c2:	4617      	mov	r7, r2
 80114c4:	4699      	mov	r9, r3
    { return __lhs.base() - __rhs.base(); }
 80114c6:	eba1 0b0a 	sub.w	fp, r1, sl
 80114ca:	d020      	beq.n	801150e <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x5a>
 80114cc:	eba3 0802 	sub.w	r8, r3, r2
			  - this->_M_impl._M_finish) >= __n)
 80114d0:	e9d0 6201 	ldrd	r6, r2, [r0, #4]
 80114d4:	1b92      	subs	r2, r2, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 80114d6:	4590      	cmp	r8, r2
 80114d8:	d836      	bhi.n	8011548 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x94>
 80114da:	eba6 0a01 	sub.w	sl, r6, r1
		if (__elems_after > __n)
 80114de:	45d0      	cmp	r8, sl
 80114e0:	d21a      	bcs.n	8011518 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x64>
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 80114e2:	eba6 0a08 	sub.w	sl, r6, r8
 80114e6:	4632      	mov	r2, r6
 80114e8:	4631      	mov	r1, r6
 80114ea:	4650      	mov	r0, sl
 80114ec:	f7f0 fcf2 	bl	8001ed4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n;
 80114f0:	6863      	ldr	r3, [r4, #4]
	  if (_Num)
 80114f2:	ebba 0205 	subs.w	r2, sl, r5
 80114f6:	4443      	add	r3, r8
 80114f8:	6063      	str	r3, [r4, #4]
 80114fa:	d003      	beq.n	8011504 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x50>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80114fc:	4629      	mov	r1, r5
 80114fe:	1ab0      	subs	r0, r6, r2
 8011500:	f00a fec0 	bl	801c284 <memmove>
			      _Category>::__copy_m(__first, __last, __result);
 8011504:	462a      	mov	r2, r5
 8011506:	4649      	mov	r1, r9
 8011508:	4638      	mov	r0, r7
 801150a:	f7ef fc6b 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      { return __normal_iterator(_M_current + __n); }
 801150e:	6820      	ldr	r0, [r4, #0]
	}
 8011510:	4458      	add	r0, fp
 8011512:	b003      	add	sp, #12
 8011514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { _M_current += __n; return *this; }
 8011518:	eb07 030a 	add.w	r3, r7, sl
 801151c:	4632      	mov	r2, r6
 801151e:	4649      	mov	r1, r9
		    this->_M_impl._M_finish += __n - __elems_after;
 8011520:	eba8 080a 	sub.w	r8, r8, sl
 8011524:	4618      	mov	r0, r3
 8011526:	9301      	str	r3, [sp, #4]
 8011528:	f7ef fc5c 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 801152c:	6862      	ldr	r2, [r4, #4]
 801152e:	4631      	mov	r1, r6
 8011530:	4628      	mov	r0, r5
 8011532:	4442      	add	r2, r8
 8011534:	6062      	str	r2, [r4, #4]
 8011536:	f7f0 fccd 	bl	8001ed4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __elems_after;
 801153a:	6862      	ldr	r2, [r4, #4]
 801153c:	9b01      	ldr	r3, [sp, #4]
 801153e:	4452      	add	r2, sl
 8011540:	4619      	mov	r1, r3
 8011542:	6062      	str	r2, [r4, #4]
 8011544:	462a      	mov	r2, r5
 8011546:	e7df      	b.n	8011508 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x54>
		  _M_check_len(__n, "vector::_M_range_insert");
 8011548:	4641      	mov	r1, r8
 801154a:	4a13      	ldr	r2, [pc, #76]	@ (8011598 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0xe4>)
 801154c:	f7ef fb7d 	bl	8000c4a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8011550:	9001      	str	r0, [sp, #4]
		pointer __new_start(this->_M_allocate(__len));
 8011552:	f7fd fd40 	bl	800efd6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8011556:	4629      	mov	r1, r5
 8011558:	4602      	mov	r2, r0
 801155a:	4680      	mov	r8, r0
 801155c:	4650      	mov	r0, sl
 801155e:	f7f0 fcb9 	bl	8001ed4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8011562:	4649      	mov	r1, r9
 8011564:	4602      	mov	r2, r0
 8011566:	4638      	mov	r0, r7
 8011568:	f7ef fc3c 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 801156c:	4631      	mov	r1, r6
 801156e:	4602      	mov	r2, r0
 8011570:	4628      	mov	r0, r5
 8011572:	f7f0 fcaf 	bl	8001ed4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8011576:	4605      	mov	r5, r0
	if (__p)
 8011578:	f1ba 0f00 	cmp.w	sl, #0
 801157c:	d005      	beq.n	801158a <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0xd6>
			      this->_M_impl._M_end_of_storage - __old_start);
 801157e:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8011580:	4650      	mov	r0, sl
 8011582:	eba1 010a 	sub.w	r1, r1, sl
 8011586:	f00a fb21 	bl	801bbcc <_ZdlPvj>
		this->_M_impl._M_end_of_storage = __new_start + __len;
 801158a:	9b01      	ldr	r3, [sp, #4]
 801158c:	4443      	add	r3, r8
		this->_M_impl._M_finish = __new_finish;
 801158e:	e9c4 8500 	strd	r8, r5, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8011592:	60a3      	str	r3, [r4, #8]
 8011594:	e7bb      	b.n	801150e <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x5a>
 8011596:	bf00      	nop
 8011598:	0801c641 	.word	0x0801c641

0801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>:
bool Communication::BuildPayload(MessageHeader* message, MessageElement element) {
 801159c:	b5f0      	push	{r4, r5, r6, r7, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 801159e:	2300      	movs	r3, #0
 80115a0:	b085      	sub	sp, #20
 80115a2:	4614      	mov	r4, r2
 80115a4:	4606      	mov	r6, r0
 80115a6:	9303      	str	r3, [sp, #12]
 80115a8:	460d      	mov	r5, r1
 80115aa:	e9cd 3301 	strd	r3, r3, [sp, #4]
	if (element.ack) header|= ACK_MASK;
 80115ae:	7993      	ldrb	r3, [r2, #6]
	if (element.command) header|= COMMAND_MASK;
 80115b0:	79d2      	ldrb	r2, [r2, #7]
	if (element.ack) header|= ACK_MASK;
 80115b2:	01db      	lsls	r3, r3, #7
 80115b4:	b2db      	uxtb	r3, r3
	if (element.command) header|= COMMAND_MASK;
 80115b6:	b10a      	cbz	r2, 80115bc <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x20>
 80115b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
	if (element.access) header|= ACCESS_MASK;
 80115bc:	7a22      	ldrb	r2, [r4, #8]
 80115be:	b10a      	cbz	r2, 80115c4 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x28>
 80115c0:	f043 0320 	orr.w	r3, r3, #32
	coded_element.push_back(header | ((element.element_register.address >> 8) & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)));
 80115c4:	8822      	ldrh	r2, [r4, #0]
      { emplace_back(std::move(__x)); }
 80115c6:	f10d 0103 	add.w	r1, sp, #3
 80115ca:	a801      	add	r0, sp, #4
 80115cc:	f3c2 2204 	ubfx	r2, r2, #8, #5
 80115d0:	4313      	orrs	r3, r2
 80115d2:	f88d 3003 	strb.w	r3, [sp, #3]
 80115d6:	f7fe f95d 	bl	800f894 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	coded_element.push_back(element.element_register.address & 0xFF);
 80115da:	8823      	ldrh	r3, [r4, #0]
 80115dc:	f10d 0103 	add.w	r1, sp, #3
 80115e0:	a801      	add	r0, sp, #4
 80115e2:	f88d 3003 	strb.w	r3, [sp, #3]
 80115e6:	f7fe f955 	bl	800f894 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	if (element.element_register.isArray && element.element_register.length == 0)
 80115ea:	78e3      	ldrb	r3, [r4, #3]
 80115ec:	b15b      	cbz	r3, 8011606 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x6a>
 80115ee:	88a3      	ldrh	r3, [r4, #4]
 80115f0:	b94b      	cbnz	r3, 8011606 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x6a>
 80115f2:	f10d 0103 	add.w	r1, sp, #3
 80115f6:	a801      	add	r0, sp, #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80115f8:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 80115fc:	1a9b      	subs	r3, r3, r2
		coded_element.push_back(element.data.size());
 80115fe:	f88d 3003 	strb.w	r3, [sp, #3]
      { emplace_back(std::move(__x)); }
 8011602:	f7fe f947 	bl	800f894 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	coded_element.insert(coded_element.end(), element.data.begin(), element.data.end()); // Big-Endian representation, MSB first
 8011606:	9902      	ldr	r1, [sp, #8]
 8011608:	a801      	add	r0, sp, #4
 801160a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 801160e:	f7ff ff51 	bl	80114b4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
	uint16_t max_length = GetProtocolPayloadMaxLength(message->interface, &success);
 8011612:	4630      	mov	r0, r6
 8011614:	f10d 0203 	add.w	r2, sp, #3
 8011618:	7829      	ldrb	r1, [r5, #0]
 801161a:	f7fd fdc3 	bl	800f1a4 <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb>
	if (not success) return false;
 801161e:	f89d 6003 	ldrb.w	r6, [sp, #3]
 8011622:	b15e      	cbz	r6, 801163c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xa0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011624:	68a9      	ldr	r1, [r5, #8]
 8011626:	686c      	ldr	r4, [r5, #4]
 8011628:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801162c:	1b0c      	subs	r4, r1, r4
 801162e:	1a9f      	subs	r7, r3, r2
	if (message->payload.size() + coded_element.size() > max_length)
 8011630:	443c      	add	r4, r7
 8011632:	4284      	cmp	r4, r0
 8011634:	d808      	bhi.n	8011648 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xac>
	message->payload.insert(message->payload.end(), coded_element.begin(), coded_element.end());
 8011636:	1d28      	adds	r0, r5, #4
 8011638:	f7ff ff3c 	bl	80114b4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 801163c:	a801      	add	r0, sp, #4
 801163e:	f7ef fae3 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8011642:	4630      	mov	r0, r6
 8011644:	b005      	add	sp, #20
 8011646:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (not success) return false;
 8011648:	2600      	movs	r6, #0
 801164a:	e7f7      	b.n	801163c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xa0>

0801164c <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement>:
bool Communication::FindRegister(MessageHeader message, MessageHeader* response, MessageElement* element) {
 801164c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011650:	461c      	mov	r4, r3
 8011652:	b097      	sub	sp, #92	@ 0x5c
	uint16_t register_id = element->element_register.address;
 8011654:	f8b3 9000 	ldrh.w	r9, [r3]
bool Communication::FindRegister(MessageHeader message, MessageHeader* response, MessageElement* element) {
 8011658:	4605      	mov	r5, r0
	if (not element->ack && element->command) {
 801165a:	799b      	ldrb	r3, [r3, #6]
bool Communication::FindRegister(MessageHeader message, MessageHeader* response, MessageElement* element) {
 801165c:	4617      	mov	r7, r2
 801165e:	f10d 0820 	add.w	r8, sp, #32
	if (not element->ack && element->command) {
 8011662:	2b00      	cmp	r3, #0
 8011664:	d164      	bne.n	8011730 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0xe4>
 8011666:	79e3      	ldrb	r3, [r4, #7]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d07b      	beq.n	8011764 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x118>
		if (registers->IsRegistered(register_id))
 801166c:	4649      	mov	r1, r9
 801166e:	6868      	ldr	r0, [r5, #4]
 8011670:	f006 fee6 	bl	8018440 <_ZN9Registers12IsRegisteredEt>
 8011674:	4606      	mov	r6, r0
 8011676:	b168      	cbz	r0, 8011694 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x48>
			element->element_register = registers->FindRegister(register_id, &success);
 8011678:	4643      	mov	r3, r8
 801167a:	464a      	mov	r2, r9
 801167c:	6869      	ldr	r1, [r5, #4]
 801167e:	a804      	add	r0, sp, #16
 8011680:	f006 fe5c 	bl	801833c <_ZN9Registers12FindRegisterEtPb>
		element->element_register = subscribers->FindRemoteRegister(Register{.address=register_id}, SubscriberInterface{.interface=message.interface, .address=message.source_address}, &success);
 8011684:	9804      	ldr	r0, [sp, #16]
	return success;
 8011686:	f89d 6020 	ldrb.w	r6, [sp, #32]
		element->element_register = subscribers->FindRemoteRegister(Register{.address=register_id}, SubscriberInterface{.interface=message.interface, .address=message.source_address}, &success);
 801168a:	6020      	str	r0, [r4, #0]
 801168c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8011690:	80a3      	strh	r3, [r4, #4]
	return success;
 8011692:	e049      	b.n	8011728 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0xdc>
			response_content.ack = true;
 8011694:	f240 1301 	movw	r3, #257	@ 0x101
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011698:	900f      	str	r0, [sp, #60]	@ 0x3c
			response_content.element_register.address = register_id;
 801169a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
			response_content.ack = true;
 801169e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
			response_content.access = element->access;
 80116a2:	7a23      	ldrb	r3, [r4, #8]
 80116a4:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
			response_content.data = std::vector<uint8_t>{UNKNOWN_REGISTER};
 80116a8:	230f      	movs	r3, #15
 80116aa:	f88d 301c 	strb.w	r3, [sp, #28]
 80116ae:	ab07      	add	r3, sp, #28
 80116b0:	9308      	str	r3, [sp, #32]
 80116b2:	2301      	movs	r3, #1
 80116b4:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 80116b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80116ba:	a810      	add	r0, sp, #64	@ 0x40
 80116bc:	e898 0006 	ldmia.w	r8, {r1, r2}
 80116c0:	f7ff fe8a 	bl	80113d8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 80116c4:	a910      	add	r1, sp, #64	@ 0x40
 80116c6:	a80d      	add	r0, sp, #52	@ 0x34
 80116c8:	f7fd fd99 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 80116cc:	a810      	add	r0, sp, #64	@ 0x40
 80116ce:	f7ef fa9b 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			if (not BuildPayload(response, response_content)) {
 80116d2:	a90a      	add	r1, sp, #40	@ 0x28
 80116d4:	a810      	add	r0, sp, #64	@ 0x40
 80116d6:	f7fe fa09 	bl	800faec <_ZN14MessageElementC1ERKS_>
 80116da:	aa10      	add	r2, sp, #64	@ 0x40
 80116dc:	4639      	mov	r1, r7
 80116de:	4628      	mov	r0, r5
 80116e0:	f7ff ff5c 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80116e4:	4604      	mov	r4, r0
 80116e6:	a813      	add	r0, sp, #76	@ 0x4c
 80116e8:	f7ef fa8e 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80116ec:	b9cc      	cbnz	r4, 8011722 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0xd6>
				Send(*response);
 80116ee:	4639      	mov	r1, r7
 80116f0:	a810      	add	r0, sp, #64	@ 0x40
 80116f2:	f7fe fa0e 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 80116f6:	a910      	add	r1, sp, #64	@ 0x40
 80116f8:	4628      	mov	r0, r5
 80116fa:	f7fe faf9 	bl	800fcf0 <_ZN13Communication4SendE13MessageHeader>
 80116fe:	a811      	add	r0, sp, #68	@ 0x44
 8011700:	f7ef fa82 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
				response->payload.clear();
 8011704:	1d38      	adds	r0, r7, #4
 8011706:	f7fd fd91 	bl	800f22c <_ZNSt6vectorIhSaIhEE5clearEv>
				BuildPayload(response, response_content);
 801170a:	a90a      	add	r1, sp, #40	@ 0x28
 801170c:	a810      	add	r0, sp, #64	@ 0x40
 801170e:	f7fe f9ed 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8011712:	aa10      	add	r2, sp, #64	@ 0x40
 8011714:	4639      	mov	r1, r7
 8011716:	4628      	mov	r0, r5
 8011718:	f7ff ff40 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 801171c:	a813      	add	r0, sp, #76	@ 0x4c
 801171e:	f7ef fa73 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011722:	a80d      	add	r0, sp, #52	@ 0x34
 8011724:	f7ef fa70 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8011728:	4630      	mov	r0, r6
 801172a:	b017      	add	sp, #92	@ 0x5c
 801172c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		element->element_register = services->FindRemoteRegister(Register{.address=register_id}, ServiceInterface{.interface=message.interface, .address=message.source_address}, element->access, &success);
 8011730:	2300      	movs	r3, #0
 8011732:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8011736:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801173a:	780b      	ldrb	r3, [r1, #0]
 801173c:	f88d 3018 	strb.w	r3, [sp, #24]
 8011740:	7c4b      	ldrb	r3, [r1, #17]
 8011742:	f8cd 8008 	str.w	r8, [sp, #8]
 8011746:	f88d 3019 	strb.w	r3, [sp, #25]
 801174a:	7a23      	ldrb	r3, [r4, #8]
 801174c:	9301      	str	r3, [sp, #4]
 801174e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8011752:	f8ad 3000 	strh.w	r3, [sp]
 8011756:	6881      	ldr	r1, [r0, #8]
 8011758:	a804      	add	r0, sp, #16
 801175a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801175e:	f007 fd9e 	bl	801929e <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb>
 8011762:	e78f      	b.n	8011684 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x38>
		element->element_register = subscribers->FindRemoteRegister(Register{.address=register_id}, SubscriberInterface{.interface=message.interface, .address=message.source_address}, &success);
 8011764:	f8cd 3042 	str.w	r3, [sp, #66]	@ 0x42
 8011768:	a804      	add	r0, sp, #16
 801176a:	780b      	ldrb	r3, [r1, #0]
 801176c:	f8ad 9040 	strh.w	r9, [sp, #64]	@ 0x40
 8011770:	f88d 301c 	strb.w	r3, [sp, #28]
 8011774:	7c4b      	ldrb	r3, [r1, #17]
 8011776:	f8cd 8004 	str.w	r8, [sp, #4]
 801177a:	f88d 301d 	strb.w	r3, [sp, #29]
 801177e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8011782:	f8ad 3000 	strh.w	r3, [sp]
 8011786:	68e9      	ldr	r1, [r5, #12]
 8011788:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801178c:	f007 ffe8 	bl	8019760 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb>
 8011790:	e778      	b.n	8011684 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x38>

08011792 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8011792:	b530      	push	{r4, r5, lr}
 8011794:	4604      	mov	r4, r0
 8011796:	b093      	sub	sp, #76	@ 0x4c
			self->SetModuleAddress(*input);
 8011798:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801179a:	4615      	mov	r5, r2
			self->SetModuleAddress(*input);
 801179c:	f7fd fd21 	bl	800f1e2 <_ZN13Communication16SetModuleAddressEh>
			IDFoundLEDS(self->leds);
 80117a0:	6920      	ldr	r0, [r4, #16]
 80117a2:	f7fd f930 	bl	800ea06 <_Z11IDFoundLEDSP4LEDS>
	: _M_start(), _M_finish(), _M_end_of_storage()
 80117a6:	2300      	movs	r3, #0
			message.interface = UART_BACK;
 80117a8:	2203      	movs	r2, #3
      { emplace_back(std::move(__x)); }
 80117aa:	a90c      	add	r1, sp, #48	@ 0x30
	: _M_start(), _M_finish(), _M_end_of_storage()
 80117ac:	9304      	str	r3, [sp, #16]
      { emplace_back(std::move(__x)); }
 80117ae:	a809      	add	r0, sp, #36	@ 0x24
	: _M_start(), _M_finish(), _M_end_of_storage()
 80117b0:	930b      	str	r3, [sp, #44]	@ 0x2c
			element.access = WRITE;
 80117b2:	f88d 3020 	strb.w	r3, [sp, #32]
			message.interface = UART_BACK;
 80117b6:	f88d 2004 	strb.w	r2, [sp, #4]
			element.ack = false;
 80117ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80117be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80117c2:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
			element.data.push_back(*input + 1);
 80117c6:	782b      	ldrb	r3, [r5, #0]
			element.ack = false;
 80117c8:	f8ad 201e 	strh.w	r2, [sp, #30]
			element.data.push_back(*input + 1);
 80117cc:	3301      	adds	r3, #1
 80117ce:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
      { emplace_back(std::move(__x)); }
 80117d2:	f7fe f85f 	bl	800f894 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
			element.element_register = self->registers->FindRegister(REG_COM_ID_PROPAGATION, &success);
 80117d6:	f10d 0303 	add.w	r3, sp, #3
 80117da:	2201      	movs	r2, #1
 80117dc:	6861      	ldr	r1, [r4, #4]
 80117de:	a806      	add	r0, sp, #24
 80117e0:	f006 fdac 	bl	801833c <_ZN9Registers12FindRegisterEtPb>
			self->BuildPayload(&message, element);
 80117e4:	a906      	add	r1, sp, #24
 80117e6:	a80c      	add	r0, sp, #48	@ 0x30
 80117e8:	f7fe f980 	bl	800faec <_ZN14MessageElementC1ERKS_>
 80117ec:	aa0c      	add	r2, sp, #48	@ 0x30
 80117ee:	a901      	add	r1, sp, #4
 80117f0:	4620      	mov	r0, r4
 80117f2:	f7ff fed3 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
      }
 80117f6:	a80f      	add	r0, sp, #60	@ 0x3c
 80117f8:	f7ef fa06 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			self->Send(message);
 80117fc:	a901      	add	r1, sp, #4
 80117fe:	a80c      	add	r0, sp, #48	@ 0x30
 8011800:	f7fe f987 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 8011804:	a90c      	add	r1, sp, #48	@ 0x30
 8011806:	4620      	mov	r0, r4
 8011808:	f7fe fa72 	bl	800fcf0 <_ZN13Communication4SendE13MessageHeader>
 801180c:	a80d      	add	r0, sp, #52	@ 0x34
 801180e:	f7ef f9fb 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011812:	a809      	add	r0, sp, #36	@ 0x24
 8011814:	f7ef f9f8 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011818:	a802      	add	r0, sp, #8
 801181a:	f7ef f9f5 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		}
 801181e:	2001      	movs	r0, #1
 8011820:	b013      	add	sp, #76	@ 0x4c
 8011822:	bd30      	pop	{r4, r5, pc}

08011824 <_ZN9Registers13WriteRegisterIhEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8011824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011828:	b085      	sub	sp, #20
 801182a:	4606      	mov	r6, r0
 801182c:	4688      	mov	r8, r1
 801182e:	461f      	mov	r7, r3
 8011830:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8011834:	f04f 31ff 	mov.w	r1, #4294967295
 8011838:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 801183a:	4615      	mov	r5, r2
 801183c:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801183e:	f7fa ffa9 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011842:	f10d 020f 	add.w	r2, sp, #15
 8011846:	4641      	mov	r1, r8
 8011848:	4630      	mov	r0, r6
 801184a:	f006 fd66 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801184e:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011852:	4604      	mov	r4, r0
	if (!success) {
 8011854:	b933      	cbnz	r3, 8011864 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x40>
		osSemaphoreRelease(RegistersSemaphore);
 8011856:	6830      	ldr	r0, [r6, #0]
 8011858:	f7fa ffd0 	bl	800c7fc <osSemaphoreRelease>
		return false;
 801185c:	2000      	movs	r0, #0
}
 801185e:	b005      	add	sp, #20
 8011860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8011864:	f10d 000f 	add.w	r0, sp, #15
 8011868:	f7fd fbc0 	bl	800efec <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 801186c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d0f0      	beq.n	8011856 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x32>
	if (target_register->register_info.type != registered_type) {
 8011874:	7923      	ldrb	r3, [r4, #4]
 8011876:	4283      	cmp	r3, r0
 8011878:	d1ed      	bne.n	8011856 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 801187a:	3304      	adds	r3, #4
 801187c:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8011880:	2800      	cmp	r0, #0
 8011882:	d0e8      	beq.n	8011856 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x32>
	if (target_register->access.write) {
 8011884:	7a23      	ldrb	r3, [r4, #8]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d0e5      	beq.n	8011856 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x32>
		success = false;
 801188a:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801188c:	8961      	ldrh	r1, [r4, #10]
		success = false;
 801188e:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8011892:	f7fd fce5 	bl	800f260 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8011896:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8011898:	f8d0 9008 	ldr.w	r9, [r0, #8]
 801189c:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80118a0:	b133      	cbz	r3, 80118b0 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x8c>
 80118a2:	68e3      	ldr	r3, [r4, #12]
 80118a4:	b123      	cbz	r3, 80118b0 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x8c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 80118a6:	f04f 31ff 	mov.w	r1, #4294967295
 80118aa:	6818      	ldr	r0, [r3, #0]
 80118ac:	f7fa ff72 	bl	800c794 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 80118b0:	7823      	ldrb	r3, [r4, #0]
 80118b2:	b1c3      	cbz	r3, 80118e6 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xc2>
			success = true;
 80118b4:	2301      	movs	r3, #1
 80118b6:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 80118ba:	7963      	ldrb	r3, [r4, #5]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d042      	beq.n	8011946 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x122>
 80118c0:	88e1      	ldrh	r1, [r4, #6]
 80118c2:	2900      	cmp	r1, #0
 80118c4:	d139      	bne.n	801193a <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x116>
				register_vector->clear();
 80118c6:	4658      	mov	r0, fp
 80118c8:	f7fd fcb0 	bl	800f22c <_ZNSt6vectorIhSaIhEE5clearEv>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80118cc:	e9db 3000 	ldrd	r3, r0, [fp]
 80118d0:	1ac1      	subs	r1, r0, r3
	if (__new_size > size())
 80118d2:	428f      	cmp	r7, r1
 80118d4:	d924      	bls.n	8011920 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xfc>
	  _M_default_append(__new_size - size());
 80118d6:	1a79      	subs	r1, r7, r1
 80118d8:	4658      	mov	r0, fp
 80118da:	f7ef fa4b 	bl	8000d74 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 80118de:	2300      	movs	r3, #0
				for (uint16_t index = 0; index < length; index++) {
 80118e0:	b299      	uxth	r1, r3
 80118e2:	428f      	cmp	r7, r1
 80118e4:	d823      	bhi.n	801192e <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x10a>
		if (target_register->mode.callbacks) {
 80118e6:	7863      	ldrb	r3, [r4, #1]
 80118e8:	b16b      	cbz	r3, 8011906 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xe2>
			if (callbacks.write != NULL) {
 80118ea:	f1b9 0f00 	cmp.w	r9, #0
 80118ee:	d00a      	beq.n	8011906 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xe2>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 80118f0:	7963      	ldrb	r3, [r4, #5]
 80118f2:	b363      	cbz	r3, 801194e <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x12a>
 80118f4:	88e3      	ldrh	r3, [r4, #6]
 80118f6:	b903      	cbnz	r3, 80118fa <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xd6>
					success = callbacks.write(callbacks.context, ID, value, length);
 80118f8:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 80118fa:	462a      	mov	r2, r5
 80118fc:	4641      	mov	r1, r8
 80118fe:	4650      	mov	r0, sl
 8011900:	47c8      	blx	r9
 8011902:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8011906:	9b01      	ldr	r3, [sp, #4]
 8011908:	b123      	cbz	r3, 8011914 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xf0>
 801190a:	68e3      	ldr	r3, [r4, #12]
 801190c:	b113      	cbz	r3, 8011914 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xf0>
			osSemaphoreRelease(*(target_register->register_semaphore));
 801190e:	6818      	ldr	r0, [r3, #0]
 8011910:	f7fa ff74 	bl	800c7fc <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 8011914:	6830      	ldr	r0, [r6, #0]
 8011916:	f7fa ff71 	bl	800c7fc <osSemaphoreRelease>
		return success;
 801191a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 801191e:	e79e      	b.n	801185e <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x3a>
	else if (__new_size < size())
 8011920:	d2dd      	bcs.n	80118de <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xba>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8011922:	443b      	add	r3, r7
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8011924:	4298      	cmp	r0, r3
 8011926:	d0da      	beq.n	80118de <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xba>
	    this->_M_impl._M_finish = __pos;
 8011928:	f8cb 3004 	str.w	r3, [fp, #4]
 801192c:	e7d7      	b.n	80118de <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xba>
					(*register_vector)[index] = value[index];
 801192e:	5ce8      	ldrb	r0, [r5, r3]
 8011930:	f8db 1000 	ldr.w	r1, [fp]
 8011934:	54c8      	strb	r0, [r1, r3]
				for (uint16_t index = 0; index < length; index++) {
 8011936:	3301      	adds	r3, #1
 8011938:	e7d2      	b.n	80118e0 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xbc>
 801193a:	465a      	mov	r2, fp
 801193c:	4429      	add	r1, r5
 801193e:	4628      	mov	r0, r5
 8011940:	f7ef fa50 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8011944:	e7cf      	b.n	80118e6 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xc2>
				*(callbacks.pointer) = *value;
 8011946:	782b      	ldrb	r3, [r5, #0]
 8011948:	f88b 3000 	strb.w	r3, [fp]
 801194c:	e7cb      	b.n	80118e6 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xc2>
					success = callbacks.write(callbacks.context, ID, value, 1);
 801194e:	2301      	movs	r3, #1
 8011950:	e7d3      	b.n	80118fa <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xd6>

08011952 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8011952:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011956:	b091      	sub	sp, #68	@ 0x44
 8011958:	4605      	mov	r5, r0
 801195a:	4691      	mov	r9, r2
 801195c:	4608      	mov	r0, r1
 801195e:	af02      	add	r7, sp, #8
 8011960:	469a      	mov	sl, r3
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8011962:	3104      	adds	r1, #4
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8011964:	f8d7 b060 	ldr.w	fp, [r7, #96]	@ 0x60
 8011968:	f107 060b 	add.w	r6, r7, #11
 801196c:	f8b7 4064 	ldrh.w	r4, [r7, #100]	@ 0x64
	if (not element.element_register.isArray) {
 8011970:	f89b 8003 	ldrb.w	r8, [fp, #3]
 8011974:	f1b8 0f00 	cmp.w	r8, #0
 8011978:	d173      	bne.n	8011a62 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x110>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 801197a:	f107 0020 	add.w	r0, r7, #32
 801197e:	f7ef fa3d 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011982:	4632      	mov	r2, r6
 8011984:	4621      	mov	r1, r4
 8011986:	f107 0020 	add.w	r0, r7, #32
 801198a:	f7fd fb17 	bl	800efbc <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 801198e:	7538      	strb	r0, [r7, #20]
      }
 8011990:	f107 0020 	add.w	r0, r7, #32
 8011994:	f7ef f938 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8011998:	7afb      	ldrb	r3, [r7, #11]
 801199a:	b153      	cbz	r3, 80119b2 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x60>
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 801199c:	2301      	movs	r3, #1
 801199e:	f8bb 1000 	ldrh.w	r1, [fp]
 80119a2:	f107 0214 	add.w	r2, r7, #20
 80119a6:	9300      	str	r3, [sp, #0]
 80119a8:	4643      	mov	r3, r8
 80119aa:	6868      	ldr	r0, [r5, #4]
 80119ac:	f7ff ff3a 	bl	8011824 <_ZN9Registers13WriteRegisterIhEEbtPT_tb>
 80119b0:	72f8      	strb	r0, [r7, #11]
		length_to_extract = 1;
 80119b2:	f04f 0801 	mov.w	r8, #1
	if (success)
 80119b6:	7af9      	ldrb	r1, [r7, #11]
		response_content.data = std::vector<uint8_t>{OK};
 80119b8:	f10a 060c 	add.w	r6, sl, #12
 80119bc:	f107 0314 	add.w	r3, r7, #20
 80119c0:	f107 020c 	add.w	r2, r7, #12
	if (success)
 80119c4:	2900      	cmp	r1, #0
 80119c6:	f000 80cb 	beq.w	8011b60 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x20e>
		response_content.data = std::vector<uint8_t>{OK};
 80119ca:	2100      	movs	r1, #0
 80119cc:	60fb      	str	r3, [r7, #12]
 80119ce:	2301      	movs	r3, #1
 80119d0:	7539      	strb	r1, [r7, #20]
 80119d2:	613b      	str	r3, [r7, #16]
 80119d4:	ca06      	ldmia	r2, {r1, r2}
		response_content.data = std::vector<uint8_t>{ERROR};
 80119d6:	f107 0020 	add.w	r0, r7, #32
 80119da:	f7ff fcfd 	bl	80113d8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 80119de:	f107 0120 	add.w	r1, r7, #32
 80119e2:	4630      	mov	r0, r6
 80119e4:	f7fd fc0b 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 80119e8:	f107 0020 	add.w	r0, r7, #32
 80119ec:	f7ef f90c 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content)) {
 80119f0:	4651      	mov	r1, sl
 80119f2:	f107 0020 	add.w	r0, r7, #32
 80119f6:	f7fe f879 	bl	800faec <_ZN14MessageElementC1ERKS_>
 80119fa:	f107 0220 	add.w	r2, r7, #32
 80119fe:	4649      	mov	r1, r9
 8011a00:	4628      	mov	r0, r5
 8011a02:	f7ff fdcb 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8011a06:	4606      	mov	r6, r0
 8011a08:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8011a0c:	f7ef f8fc 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011a10:	bb06      	cbnz	r6, 8011a54 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x102>
		Send(*response);
 8011a12:	4649      	mov	r1, r9
 8011a14:	f107 0020 	add.w	r0, r7, #32
 8011a18:	f7fe f87b 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 8011a1c:	f107 0120 	add.w	r1, r7, #32
 8011a20:	4628      	mov	r0, r5
 8011a22:	f7fe f965 	bl	800fcf0 <_ZN13Communication4SendE13MessageHeader>
 8011a26:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011a2a:	f7ef f8ed 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8011a2e:	f109 0004 	add.w	r0, r9, #4
 8011a32:	f7fd fbfb 	bl	800f22c <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8011a36:	4651      	mov	r1, sl
 8011a38:	f107 0020 	add.w	r0, r7, #32
 8011a3c:	f7fe f856 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8011a40:	f107 0220 	add.w	r2, r7, #32
 8011a44:	4649      	mov	r1, r9
 8011a46:	4628      	mov	r0, r5
 8011a48:	f7ff fda8 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8011a4c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8011a50:	f7ef f8da 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return start_index + sizeof(T) * length_to_extract;
 8011a54:	eb04 0008 	add.w	r0, r4, r8
}
 8011a58:	373c      	adds	r7, #60	@ 0x3c
 8011a5a:	b280      	uxth	r0, r0
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8011a62:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 8011a66:	f1b8 0f00 	cmp.w	r8, #0
 8011a6a:	d029      	beq.n	8011ac0 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x16e>
		T values[length_to_extract];
 8011a6c:	f108 0307 	add.w	r3, r8, #7
 8011a70:	466a      	mov	r2, sp
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8011a72:	f8c7 d000 	str.w	sp, [r7]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8011a76:	f107 0020 	add.w	r0, r7, #32
		T values[length_to_extract];
 8011a7a:	08db      	lsrs	r3, r3, #3
 8011a7c:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8011a80:	469d      	mov	sp, r3
 8011a82:	ab02      	add	r3, sp, #8
 8011a84:	607b      	str	r3, [r7, #4]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8011a86:	f7ef f9b9 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011a8a:	9600      	str	r6, [sp, #0]
 8011a8c:	4643      	mov	r3, r8
 8011a8e:	4622      	mov	r2, r4
 8011a90:	f107 0120 	add.w	r1, r7, #32
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f7ff faa9 	bl	8010fec <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8011a9a:	f107 0020 	add.w	r0, r7, #32
 8011a9e:	f7ef f8b3 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8011aa2:	7afb      	ldrb	r3, [r7, #11]
 8011aa4:	b14b      	cbz	r3, 8011aba <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x168>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	f8bb 1000 	ldrh.w	r1, [fp]
 8011aac:	9300      	str	r3, [sp, #0]
 8011aae:	2300      	movs	r3, #0
 8011ab0:	687a      	ldr	r2, [r7, #4]
 8011ab2:	6868      	ldr	r0, [r5, #4]
 8011ab4:	f7ff feb6 	bl	8011824 <_ZN9Registers13WriteRegisterIhEEbtPT_tb>
 8011ab8:	72f8      	strb	r0, [r7, #11]
 8011aba:	f8d7 d000 	ldr.w	sp, [r7]
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8011abe:	e77a      	b.n	80119b6 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
		length_to_extract = message.payload[start_index];
 8011ac0:	6843      	ldr	r3, [r0, #4]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011ac2:	f107 0020 	add.w	r0, r7, #32
		length_to_extract = message.payload[start_index];
 8011ac6:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8011aca:	3401      	adds	r4, #1
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011acc:	f7ef f996 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011ad0:	f107 0120 	add.w	r1, r7, #32
		start_index++;
 8011ad4:	b2a4      	uxth	r4, r4
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011ad6:	4643      	mov	r3, r8
 8011ad8:	f107 0014 	add.w	r0, r7, #20
 8011adc:	9600      	str	r6, [sp, #0]
 8011ade:	4622      	mov	r2, r4
 8011ae0:	f7ff fa54 	bl	8010f8c <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8011ae4:	f107 0020 	add.w	r0, r7, #32
 8011ae8:	f7ef f88e 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8011aec:	7afb      	ldrb	r3, [r7, #11]
 8011aee:	b1fb      	cbz	r3, 8011b30 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1de>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 8011af0:	686e      	ldr	r6, [r5, #4]
 8011af2:	f107 0114 	add.w	r1, r7, #20
 8011af6:	f8bb b000 	ldrh.w	fp, [fp]
 8011afa:	f107 0020 	add.w	r0, r7, #32
 8011afe:	f7ef f97d 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8011b02:	f04f 31ff 	mov.w	r1, #4294967295
 8011b06:	6830      	ldr	r0, [r6, #0]
 8011b08:	f7fa fe44 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011b0c:	f107 020c 	add.w	r2, r7, #12
 8011b10:	4659      	mov	r1, fp
 8011b12:	4630      	mov	r0, r6
 8011b14:	f006 fc01 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8011b18:	7b3a      	ldrb	r2, [r7, #12]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011b1a:	4603      	mov	r3, r0
		osSemaphoreRelease(RegistersSemaphore);
 8011b1c:	6830      	ldr	r0, [r6, #0]
	if (!success) {
 8011b1e:	b962      	cbnz	r2, 8011b3a <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e8>
		osSemaphoreRelease(RegistersSemaphore);
 8011b20:	f7fa fe6c 	bl	800c7fc <osSemaphoreRelease>
		return false;
 8011b24:	2000      	movs	r0, #0
 8011b26:	72f8      	strb	r0, [r7, #11]
 8011b28:	f107 0020 	add.w	r0, r7, #32
 8011b2c:	f7ef f86c 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011b30:	f107 0014 	add.w	r0, r7, #20
 8011b34:	f7ef f868 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011b38:	e73d      	b.n	80119b6 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 8011b3a:	795a      	ldrb	r2, [r3, #5]
 8011b3c:	2a00      	cmp	r2, #0
 8011b3e:	d0ef      	beq.n	8011b20 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ce>
 8011b40:	88db      	ldrh	r3, [r3, #6]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d1ec      	bne.n	8011b20 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ce>
	osSemaphoreRelease(RegistersSemaphore);
 8011b46:	f7fa fe59 	bl	800c7fc <osSemaphoreRelease>
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 8011b4a:	2101      	movs	r1, #1
 8011b4c:	4630      	mov	r0, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011b4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011b52:	9100      	str	r1, [sp, #0]
 8011b54:	4659      	mov	r1, fp
 8011b56:	1a9b      	subs	r3, r3, r2
 8011b58:	b29b      	uxth	r3, r3
 8011b5a:	f7ff fe63 	bl	8011824 <_ZN9Registers13WriteRegisterIhEEbtPT_tb>
 8011b5e:	e7e2      	b.n	8011b26 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d4>
		response_content.data = std::vector<uint8_t>{ERROR};
 8011b60:	21ff      	movs	r1, #255	@ 0xff
 8011b62:	617a      	str	r2, [r7, #20]
 8011b64:	2201      	movs	r2, #1
 8011b66:	7339      	strb	r1, [r7, #12]
 8011b68:	61ba      	str	r2, [r7, #24]
 8011b6a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8011b6e:	e732      	b.n	80119d6 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x84>

08011b70 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8011b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b74:	b0b3      	sub	sp, #204	@ 0xcc
 8011b76:	461c      	mov	r4, r3
 8011b78:	460f      	mov	r7, r1
 8011b7a:	4680      	mov	r8, r0
 8011b7c:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011b80:	f04f 0900 	mov.w	r9, #0
 8011b84:	4616      	mov	r6, r2
 8011b86:	ad2c      	add	r5, sp, #176	@ 0xb0
 8011b88:	9304      	str	r3, [sp, #16]
	response_content.ack = true;
 8011b8a:	2301      	movs	r3, #1
 8011b8c:	f8cd 907c 	str.w	r9, [sp, #124]	@ 0x7c
 8011b90:	f8ad 306e 	strh.w	r3, [sp, #110]	@ 0x6e
	response_content.access = element.access;
 8011b94:	7a23      	ldrb	r3, [r4, #8]
	response_content.element_register = element.element_register;
 8011b96:	e894 0003 	ldmia.w	r4, {r0, r1}
	response_content.access = element.access;
 8011b9a:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
	response_content.element_register = element.element_register;
 8011b9e:	901a      	str	r0, [sp, #104]	@ 0x68
 8011ba0:	f8ad 106c 	strh.w	r1, [sp, #108]	@ 0x6c
	CommunicationLED(leds, message.interface);
 8011ba4:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8011ba8:	7839      	ldrb	r1, [r7, #0]
 8011baa:	e9cd 991d 	strd	r9, r9, [sp, #116]	@ 0x74
 8011bae:	f7fc ff2e 	bl	800ea0e <_Z16CommunicationLEDP4LEDSh>
	if (element.access == WRITE) {
 8011bb2:	7a23      	ldrb	r3, [r4, #8]
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8011bb4:	4639      	mov	r1, r7
	if (element.access == WRITE) {
 8011bb6:	bb23      	cbnz	r3, 8011c02 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x92>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8011bb8:	a820      	add	r0, sp, #128	@ 0x80
 8011bba:	f7fd ffaa 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 8011bbe:	a91a      	add	r1, sp, #104	@ 0x68
 8011bc0:	a826      	add	r0, sp, #152	@ 0x98
 8011bc2:	f7fd ff93 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8011bc6:	4621      	mov	r1, r4
 8011bc8:	4628      	mov	r0, r5
 8011bca:	f7fd ff8f 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8011bce:	9b04      	ldr	r3, [sp, #16]
 8011bd0:	4632      	mov	r2, r6
 8011bd2:	a920      	add	r1, sp, #128	@ 0x80
 8011bd4:	4640      	mov	r0, r8
 8011bd6:	e9cd 5300 	strd	r5, r3, [sp]
 8011bda:	ab26      	add	r3, sp, #152	@ 0x98
 8011bdc:	f7ff feb9 	bl	8011952 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t>
 8011be0:	9004      	str	r0, [sp, #16]
      }
 8011be2:	a82f      	add	r0, sp, #188	@ 0xbc
 8011be4:	f7ef f810 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011be8:	a829      	add	r0, sp, #164	@ 0xa4
 8011bea:	f7ef f80d 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011bee:	a821      	add	r0, sp, #132	@ 0x84
 8011bf0:	f7ef f80a 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011bf4:	a81d      	add	r0, sp, #116	@ 0x74
 8011bf6:	f7ef f807 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8011bfa:	9804      	ldr	r0, [sp, #16]
 8011bfc:	b033      	add	sp, #204	@ 0xcc
 8011bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ProcessRead<T>(message, response, response_content, element, start_index);
 8011c02:	a815      	add	r0, sp, #84	@ 0x54
 8011c04:	f7fd ff85 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 8011c08:	a91a      	add	r1, sp, #104	@ 0x68
 8011c0a:	a820      	add	r0, sp, #128	@ 0x80
 8011c0c:	f7fd ff6e 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8011c10:	4621      	mov	r1, r4
 8011c12:	a826      	add	r0, sp, #152	@ 0x98
 8011c14:	f7fd ff6a 	bl	800faec <_ZN14MessageElementC1ERKS_>
uint16_t Communication::ProcessRead(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8011c18:	f8d8 7004 	ldr.w	r7, [r8, #4]
std::vector<uint8_t> Communication::ReadElement(MessageElement* element, bool* success) {
	std::vector<uint8_t> data;

	T register_read;
	uint16_t length;
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 8011c1c:	f8bd a098 	ldrh.w	sl, [sp, #152]	@ 0x98
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8011c20:	f04f 31ff 	mov.w	r1, #4294967295
 8011c24:	6838      	ldr	r0, [r7, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011c26:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 8011c2a:	e9cd 9909 	strd	r9, r9, [sp, #36]	@ 0x24
 8011c2e:	f7fa fdb1 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011c32:	462a      	mov	r2, r5
 8011c34:	4651      	mov	r1, sl
 8011c36:	4638      	mov	r0, r7
 8011c38:	f006 fb6f 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8011c3c:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8011c40:	4604      	mov	r4, r0
	if (!success) {
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d159      	bne.n	8011cfa <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x18a>
		osSemaphoreRelease(RegistersSemaphore);
 8011c46:	6838      	ldr	r0, [r7, #0]
 8011c48:	f7fa fdd8 	bl	800c7fc <osSemaphoreRelease>
		return false;
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	9303      	str	r3, [sp, #12]
	response_content.data = ReadElement<T>(&element, &success);
 8011c50:	a909      	add	r1, sp, #36	@ 0x24
 8011c52:	a823      	add	r0, sp, #140	@ 0x8c
 8011c54:	f7fd fad3 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8011c58:	a809      	add	r0, sp, #36	@ 0x24
 8011c5a:	f7ee ffd5 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not success) {
 8011c5e:	9b03      	ldr	r3, [sp, #12]
 8011c60:	b9a3      	cbnz	r3, 8011c8c <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x11c>
		response_content.data = std::vector<uint8_t>{ERROR};
 8011c62:	22ff      	movs	r2, #255	@ 0xff
		response_content.command = true; // this is an error flag for a read ack
 8011c64:	2301      	movs	r3, #1
		response_content.data = std::vector<uint8_t>{ERROR};
 8011c66:	4628      	mov	r0, r5
 8011c68:	f88d 203c 	strb.w	r2, [sp, #60]	@ 0x3c
 8011c6c:	aa0f      	add	r2, sp, #60	@ 0x3c
		response_content.command = true; // this is an error flag for a read ack
 8011c6e:	f88d 3087 	strb.w	r3, [sp, #135]	@ 0x87
		response_content.data = std::vector<uint8_t>{ERROR};
 8011c72:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8011c76:	461a      	mov	r2, r3
 8011c78:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011c7a:	f7ff fbad 	bl	80113d8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 8011c7e:	a823      	add	r0, sp, #140	@ 0x8c
 8011c80:	4629      	mov	r1, r5
 8011c82:	f7fd fabc 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8011c86:	4628      	mov	r0, r5
 8011c88:	f7ee ffbe 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8011c8c:	a920      	add	r1, sp, #128	@ 0x80
 8011c8e:	4628      	mov	r0, r5
 8011c90:	f7fd ff2c 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8011c94:	462a      	mov	r2, r5
 8011c96:	4631      	mov	r1, r6
 8011c98:	4640      	mov	r0, r8
 8011c9a:	f7ff fc7f 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8011c9e:	2800      	cmp	r0, #0
 8011ca0:	f040 8128 	bne.w	8011ef4 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x384>
 8011ca4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011ca8:	1ae4      	subs	r4, r4, r3
 8011caa:	bf18      	it	ne
 8011cac:	2401      	movne	r4, #1
 8011cae:	a82f      	add	r0, sp, #188	@ 0xbc
 8011cb0:	f7ee ffaa 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011cb4:	b1cc      	cbz	r4, 8011cea <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x17a>
		Send(*response);
 8011cb6:	4631      	mov	r1, r6
 8011cb8:	a82c      	add	r0, sp, #176	@ 0xb0
 8011cba:	f7fd ff2a 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 8011cbe:	a92c      	add	r1, sp, #176	@ 0xb0
 8011cc0:	4640      	mov	r0, r8
 8011cc2:	f7fe f815 	bl	800fcf0 <_ZN13Communication4SendE13MessageHeader>
 8011cc6:	a82d      	add	r0, sp, #180	@ 0xb4
 8011cc8:	f7ee ff9e 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8011ccc:	1d30      	adds	r0, r6, #4
 8011cce:	f7fd faad 	bl	800f22c <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8011cd2:	a920      	add	r1, sp, #128	@ 0x80
 8011cd4:	a82c      	add	r0, sp, #176	@ 0xb0
 8011cd6:	f7fd ff09 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8011cda:	aa2c      	add	r2, sp, #176	@ 0xb0
 8011cdc:	4631      	mov	r1, r6
 8011cde:	4640      	mov	r0, r8
 8011ce0:	f7ff fc5c 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8011ce4:	a82f      	add	r0, sp, #188	@ 0xbc
 8011ce6:	f7ee ff8f 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011cea:	a829      	add	r0, sp, #164	@ 0xa4
 8011cec:	f7ee ff8c 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011cf0:	a823      	add	r0, sp, #140	@ 0x8c
 8011cf2:	f7ee ff89 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011cf6:	a816      	add	r0, sp, #88	@ 0x58
 8011cf8:	e77a      	b.n	8011bf0 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x80>
	uint8_t registered_type = GetTypeID<T>(&success);
 8011cfa:	4628      	mov	r0, r5
 8011cfc:	f7fd f976 	bl	800efec <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8011d00:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8011d04:	9303      	str	r3, [sp, #12]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d09d      	beq.n	8011c46 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0xd6>
	if (target_register->register_info.type != registered_type) {
 8011d0a:	7923      	ldrb	r3, [r4, #4]
 8011d0c:	4298      	cmp	r0, r3
 8011d0e:	d19a      	bne.n	8011c46 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0xd6>
	if (callbacks[target_register->register_info.type] == NULL) {
 8011d10:	3004      	adds	r0, #4
 8011d12:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8011d16:	2800      	cmp	r0, #0
 8011d18:	d095      	beq.n	8011c46 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0xd6>
	if (target_register->access.read) {
 8011d1a:	7a63      	ldrb	r3, [r4, #9]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d031      	beq.n	8011d84 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x214>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8011d20:	8961      	ldrh	r1, [r4, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 8011d22:	f88d 90b0 	strb.w	r9, [sp, #176]	@ 0xb0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8011d26:	f7fd fa9b 	bl	800f260 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
 8011d2a:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 8011d2e:	e9d0 9300 	ldrd	r9, r3, [r0]
 8011d32:	9305      	str	r3, [sp, #20]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8011d34:	68e3      	ldr	r3, [r4, #12]
 8011d36:	b123      	cbz	r3, 8011d42 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x1d2>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8011d38:	f04f 31ff 	mov.w	r1, #4294967295
 8011d3c:	6818      	ldr	r0, [r3, #0]
 8011d3e:	f7fa fd29 	bl	800c794 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 8011d42:	7863      	ldrb	r3, [r4, #1]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d15d      	bne.n	8011e04 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x294>
		if (not success && target_register->mode.pointer) {
 8011d48:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8011d4c:	b9ab      	cbnz	r3, 8011d7a <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x20a>
 8011d4e:	7823      	ldrb	r3, [r4, #0]
 8011d50:	b19b      	cbz	r3, 8011d7a <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x20a>
			success = true;
 8011d52:	2301      	movs	r3, #1
 8011d54:	f88d 30b0 	strb.w	r3, [sp, #176]	@ 0xb0
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8011d58:	7962      	ldrb	r2, [r4, #5]
 8011d5a:	2a00      	cmp	r2, #0
 8011d5c:	f000 8085 	beq.w	8011e6a <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2fa>
 8011d60:	88e1      	ldrh	r1, [r4, #6]
 8011d62:	2900      	cmp	r1, #0
 8011d64:	d179      	bne.n	8011e5a <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2ea>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011d66:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011d6a:	1a9b      	subs	r3, r3, r2
 8011d6c:	aa06      	add	r2, sp, #24
				*length = register_vector->size();
 8011d6e:	b29b      	uxth	r3, r3
 8011d70:	f8ad 301a 	strh.w	r3, [sp, #26]
					for (uint16_t index = 0; index < *length; index++) {
 8011d74:	b288      	uxth	r0, r1
 8011d76:	4283      	cmp	r3, r0
 8011d78:	d868      	bhi.n	8011e4c <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2dc>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8011d7a:	68e3      	ldr	r3, [r4, #12]
 8011d7c:	b113      	cbz	r3, 8011d84 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x214>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8011d7e:	6818      	ldr	r0, [r3, #0]
 8011d80:	f7fa fd3c 	bl	800c7fc <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 8011d84:	6838      	ldr	r0, [r7, #0]
 8011d86:	af0f      	add	r7, sp, #60	@ 0x3c
 8011d88:	f7fa fd38 	bl	800c7fc <osSemaphoreRelease>

	if (not *success)
		return data;

	// Get vector of type T
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8011d8c:	a926      	add	r1, sp, #152	@ 0x98
 8011d8e:	4628      	mov	r0, r5
 8011d90:	f7fd feac 	bl	800faec <_ZN14MessageElementC1ERKS_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011d94:	2300      	movs	r3, #0
	if (not element.element_register.isArray) {
 8011d96:	f89d 20b3 	ldrb.w	r2, [sp, #179]	@ 0xb3
 8011d9a:	930e      	str	r3, [sp, #56]	@ 0x38
 8011d9c:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
 8011da0:	2a00      	cmp	r2, #0
 8011da2:	d169      	bne.n	8011e78 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x308>
		vector = std::vector<T>{*data};
 8011da4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8011da8:	4639      	mov	r1, r7
 8011daa:	a812      	add	r0, sp, #72	@ 0x48
 8011dac:	9707      	str	r7, [sp, #28]
 8011dae:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8011db2:	2301      	movs	r3, #1
 8011db4:	461a      	mov	r2, r3
 8011db6:	9308      	str	r3, [sp, #32]
 8011db8:	f7ff fb0e 	bl	80113d8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
		vector = std::vector<T>(data, data + element.element_register.length);
 8011dbc:	a80c      	add	r0, sp, #48	@ 0x30
 8011dbe:	a912      	add	r1, sp, #72	@ 0x48
 8011dc0:	f7fd fa1d 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8011dc4:	a812      	add	r0, sp, #72	@ 0x48
 8011dc6:	f7ee ff1f 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011dca:	a82f      	add	r0, sp, #188	@ 0xbc
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011dcc:	2400      	movs	r4, #0
      }
 8011dce:	f7ee ff1b 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>

	// transform it in vector of uint8_t
	data = BuildVector<T>(register_read_vector_cast);
 8011dd2:	a90c      	add	r1, sp, #48	@ 0x30
 8011dd4:	a812      	add	r0, sp, #72	@ 0x48
 8011dd6:	f7ef f811 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011dda:	9411      	str	r4, [sp, #68]	@ 0x44
      : _M_current(__i) { }
 8011ddc:	e9dd 9a12 	ldrd	r9, sl, [sp, #72]	@ 0x48
 8011de0:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
    for (T input : inputs) {
 8011de4:	45ca      	cmp	sl, r9
 8011de6:	d16f      	bne.n	8011ec8 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x358>
	data = BuildVector<T>(register_read_vector_cast);
 8011de8:	4639      	mov	r1, r7
 8011dea:	a809      	add	r0, sp, #36	@ 0x24
 8011dec:	f7fd fa07 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8011df0:	4638      	mov	r0, r7
 8011df2:	f7ee ff09 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011df6:	a812      	add	r0, sp, #72	@ 0x48
 8011df8:	f7ee ff06 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011dfc:	a80c      	add	r0, sp, #48	@ 0x30
 8011dfe:	f7ee ff03 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011e02:	e725      	b.n	8011c50 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0xe0>
				*callback_output = output;
 8011e04:	2200      	movs	r2, #0
 8011e06:	ab06      	add	r3, sp, #24
 8011e08:	6013      	str	r3, [r2, #0]
			if (callbacks.read != NULL) {
 8011e0a:	f1bb 0f00 	cmp.w	fp, #0
 8011e0e:	d09b      	beq.n	8011d48 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x1d8>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 8011e10:	f10d 031a 	add.w	r3, sp, #26
 8011e14:	4651      	mov	r1, sl
 8011e16:	9805      	ldr	r0, [sp, #20]
 8011e18:	47d8      	blx	fp
 8011e1a:	f88d 00b0 	strb.w	r0, [sp, #176]	@ 0xb0
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8011e1e:	7963      	ldrb	r3, [r4, #5]
 8011e20:	b143      	cbz	r3, 8011e34 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2c4>
 8011e22:	88e3      	ldrh	r3, [r4, #6]
 8011e24:	b10b      	cbz	r3, 8011e2a <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2ba>
					*length = 1;
 8011e26:	f8ad 301a 	strh.w	r3, [sp, #26]
					for (uint16_t index = 0; index < *length; index++) {
 8011e2a:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8011e2e:	a906      	add	r1, sp, #24
 8011e30:	2300      	movs	r3, #0
 8011e32:	e007      	b.n	8011e44 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2d4>
					*length = 1;
 8011e34:	2301      	movs	r3, #1
 8011e36:	e7f6      	b.n	8011e26 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2b6>
						output[index] = (*callback_output )[index];
 8011e38:	2200      	movs	r2, #0
 8011e3a:	6812      	ldr	r2, [r2, #0]
 8011e3c:	5cd2      	ldrb	r2, [r2, r3]
 8011e3e:	3301      	adds	r3, #1
 8011e40:	f801 2b01 	strb.w	r2, [r1], #1
					for (uint16_t index = 0; index < *length; index++) {
 8011e44:	b29a      	uxth	r2, r3
 8011e46:	4290      	cmp	r0, r2
 8011e48:	d8f6      	bhi.n	8011e38 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x2c8>
 8011e4a:	e77d      	b.n	8011d48 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x1d8>
						output[index] = (*register_vector)[index];
 8011e4c:	f8d9 0000 	ldr.w	r0, [r9]
 8011e50:	5c40      	ldrb	r0, [r0, r1]
 8011e52:	3101      	adds	r1, #1
 8011e54:	f802 0b01 	strb.w	r0, [r2], #1
					for (uint16_t index = 0; index < *length; index++) {
 8011e58:	e78c      	b.n	8011d74 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x204>
				*length = target_register->register_info.length;
 8011e5a:	f8ad 101a 	strh.w	r1, [sp, #26]
			      _Category>::__copy_m(__first, __last, __result);
 8011e5e:	aa06      	add	r2, sp, #24
 8011e60:	4449      	add	r1, r9
 8011e62:	4648      	mov	r0, r9
 8011e64:	f7ee ffbe 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8011e68:	e787      	b.n	8011d7a <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x20a>
				*length = 1;
 8011e6a:	f8ad 301a 	strh.w	r3, [sp, #26]
					*output = *callbacks.pointer;
 8011e6e:	f899 3000 	ldrb.w	r3, [r9]
 8011e72:	f88d 3018 	strb.w	r3, [sp, #24]
 8011e76:	e780      	b.n	8011d7a <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x20a>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8011e78:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	@ 0xb4
 8011e7c:	b14a      	cbz	r2, 8011e92 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x322>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011e7e:	9314      	str	r3, [sp, #80]	@ 0x50
	  _M_range_initialize(__first, __last,
 8011e80:	a812      	add	r0, sp, #72	@ 0x48
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011e82:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
	  _M_range_initialize(__first, __last,
 8011e86:	ab06      	add	r3, sp, #24
 8011e88:	441a      	add	r2, r3
 8011e8a:	4619      	mov	r1, r3
 8011e8c:	f7ff fac6 	bl	801141c <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPhEEvT_S4_St20forward_iterator_tag.isra.0>
 8011e90:	e794      	b.n	8011dbc <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x24c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011e92:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
	  if (__xlen > capacity())
 8011e96:	ebbb 090a 	subs.w	r9, fp, sl
 8011e9a:	d00f      	beq.n	8011ebc <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x34c>
	  pointer __result = this->_M_allocate(__n);
 8011e9c:	4648      	mov	r0, r9
 8011e9e:	f7fd f89a 	bl	800efd6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8011ea2:	4604      	mov	r4, r0
			      _Category>::__copy_m(__first, __last, __result);
 8011ea4:	4602      	mov	r2, r0
 8011ea6:	4659      	mov	r1, fp
 8011ea8:	4650      	mov	r0, sl
 8011eaa:	f7ee ff9b 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 8011eae:	940c      	str	r4, [sp, #48]	@ 0x30
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8011eb0:	444c      	add	r4, r9
 8011eb2:	940e      	str	r4, [sp, #56]	@ 0x38
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8011eb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011eb6:	444b      	add	r3, r9
 8011eb8:	930d      	str	r3, [sp, #52]	@ 0x34
      return *this;
 8011eba:	e786      	b.n	8011dca <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x25a>
 8011ebc:	464a      	mov	r2, r9
 8011ebe:	4659      	mov	r1, fp
 8011ec0:	4650      	mov	r0, sl
 8011ec2:	f7ee ff8f 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8011ec6:	e7f5      	b.n	8011eb4 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x344>
    for (T input : inputs) {
 8011ec8:	f819 3b01 	ldrb.w	r3, [r9], #1
      { emplace_back(std::move(__x)); }
 8011ecc:	f10d 0119 	add.w	r1, sp, #25
 8011ed0:	4628      	mov	r0, r5
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011ed2:	942e      	str	r4, [sp, #184]	@ 0xb8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8011ed4:	f88d 3019 	strb.w	r3, [sp, #25]
 8011ed8:	e9cd 442c 	strd	r4, r4, [sp, #176]	@ 0xb0
      { emplace_back(std::move(__x)); }
 8011edc:	f7fd fcda 	bl	800f894 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
        data.insert(data.end(), single.begin(), single.end());
 8011ee0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8011ee2:	4638      	mov	r0, r7
 8011ee4:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	@ 0xb0
 8011ee8:	f7ff fae4 	bl	80114b4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 8011eec:	4628      	mov	r0, r5
 8011eee:	f7ee fe8b 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8011ef2:	e777      	b.n	8011de4 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x274>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8011ef4:	2400      	movs	r4, #0
 8011ef6:	e6da      	b.n	8011cae <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x13e>

08011ef8 <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8011ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011efa:	461c      	mov	r4, r3
 8011efc:	b08f      	sub	sp, #60	@ 0x3c
	if (not element.ack && element.command) {
 8011efe:	799b      	ldrb	r3, [r3, #6]
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8011f00:	4605      	mov	r5, r0
 8011f02:	4617      	mov	r7, r2
 8011f04:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
	if (not element.ack && element.command) {
 8011f08:	b9cb      	cbnz	r3, 8011f3e <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x46>
 8011f0a:	79e3      	ldrb	r3, [r4, #7]
		return ProcessCommand<T>(message, response, element, start_index);
 8011f0c:	a803      	add	r0, sp, #12
	if (not element.ack && element.command) {
 8011f0e:	b323      	cbz	r3, 8011f5a <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x62>
		return ProcessCommand<T>(message, response, element, start_index);
 8011f10:	f7fd fdff 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 8011f14:	4621      	mov	r1, r4
 8011f16:	a808      	add	r0, sp, #32
 8011f18:	f7fd fde8 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8011f1c:	ab08      	add	r3, sp, #32
 8011f1e:	463a      	mov	r2, r7
 8011f20:	a903      	add	r1, sp, #12
 8011f22:	4628      	mov	r0, r5
 8011f24:	9600      	str	r6, [sp, #0]
 8011f26:	f7ff fe23 	bl	8011b70 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt>
		return ProcessSubscriber<T>(message, element, start_index);
 8011f2a:	4604      	mov	r4, r0
 8011f2c:	a80b      	add	r0, sp, #44	@ 0x2c
 8011f2e:	f7ee fe6b 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011f32:	a804      	add	r0, sp, #16
 8011f34:	f7ee fe68 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8011f38:	4620      	mov	r0, r4
 8011f3a:	b00f      	add	sp, #60	@ 0x3c
 8011f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ProcessService<T>(message, element, start_index);
 8011f3e:	a803      	add	r0, sp, #12
 8011f40:	f7fd fde7 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 8011f44:	4621      	mov	r1, r4
 8011f46:	a808      	add	r0, sp, #32
 8011f48:	f7fd fdd0 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8011f4c:	4633      	mov	r3, r6
 8011f4e:	aa08      	add	r2, sp, #32
 8011f50:	a903      	add	r1, sp, #12
 8011f52:	4628      	mov	r0, r5
 8011f54:	f7ff f8f3 	bl	801113e <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt>
 8011f58:	e7e7      	b.n	8011f2a <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x32>
		return ProcessSubscriber<T>(message, element, start_index);
 8011f5a:	f7fd fdda 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 8011f5e:	4621      	mov	r1, r4
 8011f60:	a808      	add	r0, sp, #32
 8011f62:	f7fd fdc3 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8011f66:	4633      	mov	r3, r6
 8011f68:	aa08      	add	r2, sp, #32
 8011f6a:	a903      	add	r1, sp, #12
 8011f6c:	4628      	mov	r0, r5
 8011f6e:	f7ff f864 	bl	801103a <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt>
 8011f72:	e7da      	b.n	8011f2a <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x32>

08011f74 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8011f74:	b538      	push	{r3, r4, r5, lr}
	  if (__n > 0)
 8011f76:	460c      	mov	r4, r1
 8011f78:	b181      	cbz	r1, 8011f9c <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_+0x28>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8011f7a:	2100      	movs	r1, #0
 8011f7c:	4605      	mov	r5, r0
      if (__n <= 0)
 8011f7e:	3c01      	subs	r4, #1
 8011f80:	f845 1b04 	str.w	r1, [r5], #4
 8011f84:	d008      	beq.n	8011f98 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_+0x24>
      std::__fill_a(__first, __first + __n, __value);
 8011f86:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	*__first = __tmp;
 8011f8a:	1a24      	subs	r4, r4, r0
 8011f8c:	4628      	mov	r0, r5
 8011f8e:	3c04      	subs	r4, #4
 8011f90:	4425      	add	r5, r4
 8011f92:	4622      	mov	r2, r4
 8011f94:	f00a f990 	bl	801c2b8 <memset>
	}
 8011f98:	4628      	mov	r0, r5
 8011f9a:	bd38      	pop	{r3, r4, r5, pc}
 8011f9c:	4605      	mov	r5, r0
	  return __first;
 8011f9e:	e7fb      	b.n	8011f98 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_+0x24>

08011fa0 <_ZNSt6vectorImSaImEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 8011fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fa4:	4604      	mov	r4, r0
      if (__n != 0)
 8011fa6:	460e      	mov	r6, r1
 8011fa8:	b171      	cbz	r1, 8011fc8 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x28>
					 - this->_M_impl._M_finish);
 8011faa:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011fac:	e9d0 8200 	ldrd	r8, r2, [r0]
 8011fb0:	1a9b      	subs	r3, r3, r2
 8011fb2:	eba2 0a08 	sub.w	sl, r2, r8
	  if (__navail >= __n)
 8011fb6:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 8011fba:	ea4f 07aa 	mov.w	r7, sl, asr #2
 8011fbe:	d805      	bhi.n	8011fcc <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x2c>
	__uninit_default_n(__first, __n);
 8011fc0:	4610      	mov	r0, r2
 8011fc2:	f7ff ffd7 	bl	8011f74 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_>
	      this->_M_impl._M_finish =
 8011fc6:	6060      	str	r0, [r4, #4]
    }
 8011fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		_M_check_len(__n, "vector::_M_default_append");
 8011fcc:	4a13      	ldr	r2, [pc, #76]	@ (801201c <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x7c>)
 8011fce:	f7fd fd15 	bl	800f9fc <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>
 8011fd2:	4681      	mov	r9, r0
	      pointer __new_start(this->_M_allocate(__len));
 8011fd4:	f7fc fe60 	bl	800ec98 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8011fd8:	4631      	mov	r1, r6
 8011fda:	4605      	mov	r5, r0
 8011fdc:	4450      	add	r0, sl
 8011fde:	f7ff ffc9 	bl	8011f74 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_>
      if (__count > 0)
 8011fe2:	f1ba 0f00 	cmp.w	sl, #0
 8011fe6:	d00c      	beq.n	8012002 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x62>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8011fe8:	4652      	mov	r2, sl
 8011fea:	4641      	mov	r1, r8
 8011fec:	4628      	mov	r0, r5
 8011fee:	f00a f949 	bl	801c284 <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 8011ff2:	68a1      	ldr	r1, [r4, #8]
 8011ff4:	4640      	mov	r0, r8
 8011ff6:	eba1 0108 	sub.w	r1, r1, r8
 8011ffa:	1089      	asrs	r1, r1, #2
 8011ffc:	f7fc fe2c 	bl	800ec58 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
 8012000:	e002      	b.n	8012008 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x68>
	if (__p)
 8012002:	f1b8 0f00 	cmp.w	r8, #0
 8012006:	d1f4      	bne.n	8011ff2 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x52>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8012008:	4437      	add	r7, r6
	      this->_M_impl._M_start = __new_start;
 801200a:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 801200c:	eb05 0787 	add.w	r7, r5, r7, lsl #2
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8012010:	eb05 0589 	add.w	r5, r5, r9, lsl #2
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8012014:	6067      	str	r7, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8012016:	60a5      	str	r5, [r4, #8]
    }
 8012018:	e7d6      	b.n	8011fc8 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x28>
 801201a:	bf00      	nop
 801201c:	0801c5ac 	.word	0x0801c5ac

08012020 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>:
	  if (_Num)
 8012020:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8012022:	4613      	mov	r3, r2
 8012024:	b510      	push	{r4, lr}
	  const ptrdiff_t _Num = __last - __first;
 8012026:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
 801202a:	d005      	beq.n	8012038 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801202c:	4601      	mov	r1, r0
 801202e:	4622      	mov	r2, r4
 8012030:	4618      	mov	r0, r3
 8012032:	f00a f927 	bl	801c284 <memmove>
 8012036:	4603      	mov	r3, r0
	}
 8012038:	1918      	adds	r0, r3, r4
 801203a:	bd10      	pop	{r4, pc}

0801203c <_ZNSt6vectorImSaImEEC1ERKS1_>:
      vector(const vector& __x)
 801203c:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801203e:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 8012042:	4604      	mov	r4, r0
 8012044:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012046:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012048:	2300      	movs	r3, #0
 801204a:	e9c0 3300 	strd	r3, r3, [r0]
 801204e:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8012050:	10b0      	asrs	r0, r6, #2
 8012052:	f7fc fe21 	bl	800ec98 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012056:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8012058:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801205a:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801205c:	e9c4 0000 	strd	r0, r0, [r4]
			      _Category>::__copy_m(__first, __last, __result);
 8012060:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012064:	f7ff ffdc 	bl	8012020 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 8012068:	6060      	str	r0, [r4, #4]
      }
 801206a:	4620      	mov	r0, r4
 801206c:	bd70      	pop	{r4, r5, r6, pc}

0801206e <_ZN9Registers12ReadRegisterImEEbtPT_Ptb>:
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 801206e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012072:	f2ad 4d14 	subw	sp, sp, #1044	@ 0x414
 8012076:	4689      	mov	r9, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012078:	f04f 31ff 	mov.w	r1, #4294967295
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 801207c:	461f      	mov	r7, r3
 801207e:	9000      	str	r0, [sp, #0]
 8012080:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012082:	6800      	ldr	r0, [r0, #0]
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 8012084:	f89d b438 	ldrb.w	fp, [sp, #1080]	@ 0x438
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012088:	f7fa fb84 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801208c:	f10d 020f 	add.w	r2, sp, #15
 8012090:	4649      	mov	r1, r9
 8012092:	9800      	ldr	r0, [sp, #0]
 8012094:	f006 f941 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8012098:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801209c:	4604      	mov	r4, r0
	if (!success) {
 801209e:	b953      	cbnz	r3, 80120b6 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x48>
		osSemaphoreRelease(RegistersSemaphore);
 80120a0:	9b00      	ldr	r3, [sp, #0]
		return false;
 80120a2:	f04f 0a00 	mov.w	sl, #0
		osSemaphoreRelease(RegistersSemaphore);
 80120a6:	6818      	ldr	r0, [r3, #0]
 80120a8:	f7fa fba8 	bl	800c7fc <osSemaphoreRelease>
}
 80120ac:	4650      	mov	r0, sl
 80120ae:	f20d 4d14 	addw	sp, sp, #1044	@ 0x414
 80120b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 80120b6:	f10d 000f 	add.w	r0, sp, #15
 80120ba:	f7fc fec3 	bl	800ee44 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 80120be:	f89d a00f 	ldrb.w	sl, [sp, #15]
 80120c2:	f1ba 0f00 	cmp.w	sl, #0
 80120c6:	d0eb      	beq.n	80120a0 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x32>
	if (target_register->register_info.type != registered_type) {
 80120c8:	7923      	ldrb	r3, [r4, #4]
 80120ca:	4283      	cmp	r3, r0
 80120cc:	d1e8      	bne.n	80120a0 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 80120ce:	3304      	adds	r3, #4
 80120d0:	9a00      	ldr	r2, [sp, #0]
 80120d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80120d6:	2800      	cmp	r0, #0
 80120d8:	d0e2      	beq.n	80120a0 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x32>
	if (target_register->access.read) {
 80120da:	7a63      	ldrb	r3, [r4, #9]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d04d      	beq.n	801217c <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x10e>
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 80120e0:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80120e2:	8961      	ldrh	r1, [r4, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 80120e4:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80120e8:	f7fd fc52 	bl	800f990 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>
 80120ec:	e9d0 8300 	ldrd	r8, r3, [r0]
 80120f0:	9301      	str	r3, [sp, #4]
 80120f2:	68c3      	ldr	r3, [r0, #12]
 80120f4:	461e      	mov	r6, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80120f6:	f1bb 0f00 	cmp.w	fp, #0
 80120fa:	d006      	beq.n	801210a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x9c>
 80120fc:	68e3      	ldr	r3, [r4, #12]
 80120fe:	b123      	cbz	r3, 801210a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x9c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8012100:	f04f 31ff 	mov.w	r1, #4294967295
 8012104:	6818      	ldr	r0, [r3, #0]
 8012106:	f7fa fb45 	bl	800c794 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 801210a:	7863      	ldrb	r3, [r4, #1]
 801210c:	b1db      	cbz	r3, 8012146 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xd8>
			if (output != NULL) {
 801210e:	2d00      	cmp	r5, #0
 8012110:	d039      	beq.n	8012186 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x118>
				*callback_output = output;
 8012112:	462a      	mov	r2, r5
 8012114:	2300      	movs	r3, #0
 8012116:	601a      	str	r2, [r3, #0]
			if (callbacks.read != NULL) {
 8012118:	b1ae      	cbz	r6, 8012146 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xd8>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 801211a:	463b      	mov	r3, r7
 801211c:	2200      	movs	r2, #0
 801211e:	4649      	mov	r1, r9
 8012120:	9801      	ldr	r0, [sp, #4]
 8012122:	47b0      	blx	r6
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8012124:	7963      	ldrb	r3, [r4, #5]
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 8012126:	f88d 000f 	strb.w	r0, [sp, #15]
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 801212a:	b373      	cbz	r3, 801218a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x11c>
 801212c:	88e3      	ldrh	r3, [r4, #6]
 801212e:	b103      	cbz	r3, 8012132 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xc4>
					*length = 1;
 8012130:	803b      	strh	r3, [r7, #0]
				if (*callback_output != output && output != NULL) {
 8012132:	2300      	movs	r3, #0
 8012134:	6819      	ldr	r1, [r3, #0]
 8012136:	42a9      	cmp	r1, r5
 8012138:	d005      	beq.n	8012146 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xd8>
 801213a:	b125      	cbz	r5, 8012146 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xd8>
						output[index] = (*callback_output )[index];
 801213c:	883a      	ldrh	r2, [r7, #0]
 801213e:	4628      	mov	r0, r5
 8012140:	0092      	lsls	r2, r2, #2
 8012142:	f00a f997 	bl	801c474 <memcpy>
		if (not success && target_register->mode.pointer) {
 8012146:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801214a:	b97b      	cbnz	r3, 801216c <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>
 801214c:	7823      	ldrb	r3, [r4, #0]
 801214e:	b16b      	cbz	r3, 801216c <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>
			success = true;
 8012150:	2301      	movs	r3, #1
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8012152:	7962      	ldrb	r2, [r4, #5]
			success = true;
 8012154:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8012158:	b362      	cbz	r2, 80121b4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x146>
 801215a:	88e1      	ldrh	r1, [r4, #6]
 801215c:	bb01      	cbnz	r1, 80121a0 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x132>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801215e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8012162:	1a9b      	subs	r3, r3, r2
				*length = register_vector->size();
 8012164:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8012168:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 801216a:	b9ad      	cbnz	r5, 8012198 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x12a>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801216c:	f1bb 0f00 	cmp.w	fp, #0
 8012170:	d004      	beq.n	801217c <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x10e>
 8012172:	68e3      	ldr	r3, [r4, #12]
 8012174:	b113      	cbz	r3, 801217c <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x10e>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8012176:	6818      	ldr	r0, [r3, #0]
 8012178:	f7fa fb40 	bl	800c7fc <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 801217c:	9b00      	ldr	r3, [sp, #0]
 801217e:	6818      	ldr	r0, [r3, #0]
 8012180:	f7fa fb3c 	bl	800c7fc <osSemaphoreRelease>
	return true;
 8012184:	e792      	b.n	80120ac <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x3e>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 8012186:	aa04      	add	r2, sp, #16
 8012188:	e7c4      	b.n	8012114 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xa6>
					*length = 1;
 801218a:	2301      	movs	r3, #1
 801218c:	e7d0      	b.n	8012130 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xc2>
						output[index] = (*register_vector)[index];
 801218e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8012192:	f845 0021 	str.w	r0, [r5, r1, lsl #2]
					for (uint16_t index = 0; index < *length; index++) {
 8012196:	3101      	adds	r1, #1
 8012198:	b288      	uxth	r0, r1
 801219a:	4298      	cmp	r0, r3
 801219c:	d3f7      	bcc.n	801218e <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x120>
 801219e:	e7e5      	b.n	801216c <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>
				*length = target_register->register_info.length;
 80121a0:	8039      	strh	r1, [r7, #0]
				if (output != NULL) {
 80121a2:	2d00      	cmp	r5, #0
 80121a4:	d0e2      	beq.n	801216c <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>
 80121a6:	462a      	mov	r2, r5
 80121a8:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 80121ac:	4640      	mov	r0, r8
 80121ae:	f7ff ff37 	bl	8012020 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80121b2:	e7db      	b.n	801216c <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>
				*length = 1;
 80121b4:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 80121b6:	2d00      	cmp	r5, #0
 80121b8:	d0d8      	beq.n	801216c <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>
					*output = *callbacks.pointer;
 80121ba:	f8d8 3000 	ldr.w	r3, [r8]
 80121be:	602b      	str	r3, [r5, #0]
 80121c0:	e7d4      	b.n	801216c <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xfe>

080121c2 <_ZN9Registers13WriteRegisterImEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 80121c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121c6:	b085      	sub	sp, #20
 80121c8:	4606      	mov	r6, r0
 80121ca:	4688      	mov	r8, r1
 80121cc:	461f      	mov	r7, r3
 80121ce:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80121d2:	f04f 31ff 	mov.w	r1, #4294967295
 80121d6:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 80121d8:	4615      	mov	r5, r2
 80121da:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80121dc:	f7fa fada 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80121e0:	f10d 020f 	add.w	r2, sp, #15
 80121e4:	4641      	mov	r1, r8
 80121e6:	4630      	mov	r0, r6
 80121e8:	f006 f897 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80121ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80121f0:	4604      	mov	r4, r0
	if (!success) {
 80121f2:	b933      	cbnz	r3, 8012202 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x40>
		osSemaphoreRelease(RegistersSemaphore);
 80121f4:	6830      	ldr	r0, [r6, #0]
 80121f6:	f7fa fb01 	bl	800c7fc <osSemaphoreRelease>
		return false;
 80121fa:	2000      	movs	r0, #0
}
 80121fc:	b005      	add	sp, #20
 80121fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8012202:	f10d 000f 	add.w	r0, sp, #15
 8012206:	f7fc fe1d 	bl	800ee44 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 801220a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d0f0      	beq.n	80121f4 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x32>
	if (target_register->register_info.type != registered_type) {
 8012212:	7923      	ldrb	r3, [r4, #4]
 8012214:	4283      	cmp	r3, r0
 8012216:	d1ed      	bne.n	80121f4 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 8012218:	3304      	adds	r3, #4
 801221a:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801221e:	2800      	cmp	r0, #0
 8012220:	d0e8      	beq.n	80121f4 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x32>
	if (target_register->access.write) {
 8012222:	7a23      	ldrb	r3, [r4, #8]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d0e5      	beq.n	80121f4 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x32>
		success = false;
 8012228:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801222a:	8961      	ldrh	r1, [r4, #10]
		success = false;
 801222c:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012230:	f7fd fbae 	bl	800f990 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012234:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012236:	f8d0 9008 	ldr.w	r9, [r0, #8]
 801223a:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801223e:	b133      	cbz	r3, 801224e <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x8c>
 8012240:	68e3      	ldr	r3, [r4, #12]
 8012242:	b123      	cbz	r3, 801224e <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x8c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8012244:	f04f 31ff 	mov.w	r1, #4294967295
 8012248:	6818      	ldr	r0, [r3, #0]
 801224a:	f7fa faa3 	bl	800c794 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 801224e:	7823      	ldrb	r3, [r4, #0]
 8012250:	b1e3      	cbz	r3, 801228c <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xca>
			success = true;
 8012252:	2301      	movs	r3, #1
 8012254:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8012258:	7963      	ldrb	r3, [r4, #5]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d04a      	beq.n	80122f4 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x132>
 801225e:	88e1      	ldrh	r1, [r4, #6]
 8012260:	2900      	cmp	r1, #0
 8012262:	d140      	bne.n	80122e6 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x124>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8012264:	e9db 3100 	ldrd	r3, r1, [fp]
 8012268:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 801226a:	bf18      	it	ne
 801226c:	f8cb 3004 	strne.w	r3, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012270:	f8db 0004 	ldr.w	r0, [fp, #4]
 8012274:	1ac1      	subs	r1, r0, r3
 8012276:	1089      	asrs	r1, r1, #2
	if (__new_size > size())
 8012278:	428f      	cmp	r7, r1
 801227a:	d924      	bls.n	80122c6 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x104>
	  _M_default_append(__new_size - size());
 801227c:	1a79      	subs	r1, r7, r1
 801227e:	4658      	mov	r0, fp
 8012280:	f7ff fe8e 	bl	8011fa0 <_ZNSt6vectorImSaImEE17_M_default_appendEj>
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8012284:	2300      	movs	r3, #0
				for (uint16_t index = 0; index < length; index++) {
 8012286:	b299      	uxth	r1, r3
 8012288:	42b9      	cmp	r1, r7
 801228a:	d324      	bcc.n	80122d6 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x114>
		if (target_register->mode.callbacks) {
 801228c:	7863      	ldrb	r3, [r4, #1]
 801228e:	b16b      	cbz	r3, 80122ac <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xea>
			if (callbacks.write != NULL) {
 8012290:	f1b9 0f00 	cmp.w	r9, #0
 8012294:	d00a      	beq.n	80122ac <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xea>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8012296:	7963      	ldrb	r3, [r4, #5]
 8012298:	b383      	cbz	r3, 80122fc <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x13a>
 801229a:	88e3      	ldrh	r3, [r4, #6]
 801229c:	b903      	cbnz	r3, 80122a0 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xde>
					success = callbacks.write(callbacks.context, ID, value, length);
 801229e:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 80122a0:	462a      	mov	r2, r5
 80122a2:	4641      	mov	r1, r8
 80122a4:	4650      	mov	r0, sl
 80122a6:	47c8      	blx	r9
 80122a8:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80122ac:	9b01      	ldr	r3, [sp, #4]
 80122ae:	b123      	cbz	r3, 80122ba <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xf8>
 80122b0:	68e3      	ldr	r3, [r4, #12]
 80122b2:	b113      	cbz	r3, 80122ba <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xf8>
			osSemaphoreRelease(*(target_register->register_semaphore));
 80122b4:	6818      	ldr	r0, [r3, #0]
 80122b6:	f7fa faa1 	bl	800c7fc <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 80122ba:	6830      	ldr	r0, [r6, #0]
 80122bc:	f7fa fa9e 	bl	800c7fc <osSemaphoreRelease>
		return success;
 80122c0:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80122c4:	e79a      	b.n	80121fc <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x3a>
	else if (__new_size < size())
 80122c6:	d2dd      	bcs.n	8012284 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xc2>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 80122c8:	eb03 0387 	add.w	r3, r3, r7, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80122cc:	4298      	cmp	r0, r3
 80122ce:	d0d9      	beq.n	8012284 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xc2>
	    this->_M_impl._M_finish = __pos;
 80122d0:	f8cb 3004 	str.w	r3, [fp, #4]
 80122d4:	e7d6      	b.n	8012284 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xc2>
					(*register_vector)[index] = value[index];
 80122d6:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80122da:	f8db 1000 	ldr.w	r1, [fp]
 80122de:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
				for (uint16_t index = 0; index < length; index++) {
 80122e2:	3301      	adds	r3, #1
 80122e4:	e7cf      	b.n	8012286 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xc4>
			      _Category>::__copy_m(__first, __last, __result);
 80122e6:	465a      	mov	r2, fp
 80122e8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80122ec:	4628      	mov	r0, r5
 80122ee:	f7ff fe97 	bl	8012020 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80122f2:	e7cb      	b.n	801228c <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xca>
				*(callbacks.pointer) = *value;
 80122f4:	682b      	ldr	r3, [r5, #0]
 80122f6:	f8cb 3000 	str.w	r3, [fp]
 80122fa:	e7c7      	b.n	801228c <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xca>
					success = callbacks.write(callbacks.context, ID, value, 1);
 80122fc:	2301      	movs	r3, #1
 80122fe:	e7cf      	b.n	80122a0 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xde>

08012300 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8012300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012304:	b091      	sub	sp, #68	@ 0x44
 8012306:	4605      	mov	r5, r0
 8012308:	4691      	mov	r9, r2
 801230a:	4608      	mov	r0, r1
 801230c:	af02      	add	r7, sp, #8
 801230e:	469a      	mov	sl, r3
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8012310:	3104      	adds	r1, #4
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8012312:	f8d7 b060 	ldr.w	fp, [r7, #96]	@ 0x60
 8012316:	f107 060b 	add.w	r6, r7, #11
 801231a:	f8b7 4064 	ldrh.w	r4, [r7, #100]	@ 0x64
	if (not element.element_register.isArray) {
 801231e:	f89b 8003 	ldrb.w	r8, [fp, #3]
 8012322:	f1b8 0f00 	cmp.w	r8, #0
 8012326:	d173      	bne.n	8012410 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x110>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8012328:	f107 0020 	add.w	r0, r7, #32
 801232c:	f7ee fd66 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012330:	4632      	mov	r2, r6
 8012332:	4621      	mov	r1, r4
 8012334:	f107 0020 	add.w	r0, r7, #32
 8012338:	f7fc fe27 	bl	800ef8a <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>
 801233c:	6178      	str	r0, [r7, #20]
      }
 801233e:	f107 0020 	add.w	r0, r7, #32
 8012342:	f7ee fc61 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8012346:	7afb      	ldrb	r3, [r7, #11]
 8012348:	b153      	cbz	r3, 8012360 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x60>
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 801234a:	2301      	movs	r3, #1
 801234c:	f8bb 1000 	ldrh.w	r1, [fp]
 8012350:	f107 0214 	add.w	r2, r7, #20
 8012354:	9300      	str	r3, [sp, #0]
 8012356:	4643      	mov	r3, r8
 8012358:	6868      	ldr	r0, [r5, #4]
 801235a:	f7ff ff32 	bl	80121c2 <_ZN9Registers13WriteRegisterImEEbtPT_tb>
 801235e:	72f8      	strb	r0, [r7, #11]
		length_to_extract = 1;
 8012360:	f04f 0801 	mov.w	r8, #1
	if (success)
 8012364:	7af9      	ldrb	r1, [r7, #11]
		response_content.data = std::vector<uint8_t>{OK};
 8012366:	f10a 060c 	add.w	r6, sl, #12
 801236a:	f107 0314 	add.w	r3, r7, #20
 801236e:	f107 020c 	add.w	r2, r7, #12
	if (success)
 8012372:	2900      	cmp	r1, #0
 8012374:	f000 80cd 	beq.w	8012512 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x212>
		response_content.data = std::vector<uint8_t>{OK};
 8012378:	2100      	movs	r1, #0
 801237a:	60fb      	str	r3, [r7, #12]
 801237c:	2301      	movs	r3, #1
 801237e:	7539      	strb	r1, [r7, #20]
 8012380:	613b      	str	r3, [r7, #16]
 8012382:	ca06      	ldmia	r2, {r1, r2}
		response_content.data = std::vector<uint8_t>{ERROR};
 8012384:	f107 0020 	add.w	r0, r7, #32
 8012388:	f7ff f826 	bl	80113d8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 801238c:	f107 0120 	add.w	r1, r7, #32
 8012390:	4630      	mov	r0, r6
 8012392:	f7fc ff34 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8012396:	f107 0020 	add.w	r0, r7, #32
 801239a:	f7ee fc35 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content)) {
 801239e:	4651      	mov	r1, sl
 80123a0:	f107 0020 	add.w	r0, r7, #32
 80123a4:	f7fd fba2 	bl	800faec <_ZN14MessageElementC1ERKS_>
 80123a8:	f107 0220 	add.w	r2, r7, #32
 80123ac:	4649      	mov	r1, r9
 80123ae:	4628      	mov	r0, r5
 80123b0:	f7ff f8f4 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80123b4:	4606      	mov	r6, r0
 80123b6:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80123ba:	f7ee fc25 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80123be:	bb06      	cbnz	r6, 8012402 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x102>
		Send(*response);
 80123c0:	4649      	mov	r1, r9
 80123c2:	f107 0020 	add.w	r0, r7, #32
 80123c6:	f7fd fba4 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 80123ca:	f107 0120 	add.w	r1, r7, #32
 80123ce:	4628      	mov	r0, r5
 80123d0:	f7fd fc8e 	bl	800fcf0 <_ZN13Communication4SendE13MessageHeader>
 80123d4:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80123d8:	f7ee fc16 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 80123dc:	f109 0004 	add.w	r0, r9, #4
 80123e0:	f7fc ff24 	bl	800f22c <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 80123e4:	4651      	mov	r1, sl
 80123e6:	f107 0020 	add.w	r0, r7, #32
 80123ea:	f7fd fb7f 	bl	800faec <_ZN14MessageElementC1ERKS_>
 80123ee:	f107 0220 	add.w	r2, r7, #32
 80123f2:	4649      	mov	r1, r9
 80123f4:	4628      	mov	r0, r5
 80123f6:	f7ff f8d1 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80123fa:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80123fe:	f7ee fc03 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return start_index + sizeof(T) * length_to_extract;
 8012402:	eb04 0088 	add.w	r0, r4, r8, lsl #2
}
 8012406:	373c      	adds	r7, #60	@ 0x3c
 8012408:	b280      	uxth	r0, r0
 801240a:	46bd      	mov	sp, r7
 801240c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8012410:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 8012414:	f1b8 0f00 	cmp.w	r8, #0
 8012418:	d02a      	beq.n	8012470 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x170>
		T values[length_to_extract];
 801241a:	ea4f 0388 	mov.w	r3, r8, lsl #2
 801241e:	466a      	mov	r2, sp
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8012420:	f8c7 d000 	str.w	sp, [r7]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8012424:	f107 0020 	add.w	r0, r7, #32
		T values[length_to_extract];
 8012428:	3307      	adds	r3, #7
 801242a:	08db      	lsrs	r3, r3, #3
 801242c:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8012430:	469d      	mov	sp, r3
 8012432:	ab02      	add	r3, sp, #8
 8012434:	607b      	str	r3, [r7, #4]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8012436:	f7ee fce1 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801243a:	9600      	str	r6, [sp, #0]
 801243c:	4643      	mov	r3, r8
 801243e:	4622      	mov	r2, r4
 8012440:	f107 0120 	add.w	r1, r7, #32
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f7fe fba7 	bl	8010b98 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 801244a:	f107 0020 	add.w	r0, r7, #32
 801244e:	f7ee fbdb 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8012452:	7afb      	ldrb	r3, [r7, #11]
 8012454:	b14b      	cbz	r3, 801246a <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x16a>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 8012456:	2301      	movs	r3, #1
 8012458:	f8bb 1000 	ldrh.w	r1, [fp]
 801245c:	9300      	str	r3, [sp, #0]
 801245e:	2300      	movs	r3, #0
 8012460:	687a      	ldr	r2, [r7, #4]
 8012462:	6868      	ldr	r0, [r5, #4]
 8012464:	f7ff fead 	bl	80121c2 <_ZN9Registers13WriteRegisterImEEbtPT_tb>
 8012468:	72f8      	strb	r0, [r7, #11]
 801246a:	f8d7 d000 	ldr.w	sp, [r7]
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 801246e:	e779      	b.n	8012364 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
		length_to_extract = message.payload[start_index];
 8012470:	6843      	ldr	r3, [r0, #4]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012472:	f107 0020 	add.w	r0, r7, #32
		length_to_extract = message.payload[start_index];
 8012476:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 801247a:	3401      	adds	r4, #1
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801247c:	f7ee fcbe 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012480:	f107 0120 	add.w	r1, r7, #32
		start_index++;
 8012484:	b2a4      	uxth	r4, r4
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012486:	4643      	mov	r3, r8
 8012488:	f107 0014 	add.w	r0, r7, #20
 801248c:	9600      	str	r6, [sp, #0]
 801248e:	4622      	mov	r2, r4
 8012490:	f7fe fb28 	bl	8010ae4 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8012494:	f107 0020 	add.w	r0, r7, #32
 8012498:	f7ee fbb6 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 801249c:	7afb      	ldrb	r3, [r7, #11]
 801249e:	b1fb      	cbz	r3, 80124e0 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e0>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 80124a0:	686e      	ldr	r6, [r5, #4]
 80124a2:	f107 0114 	add.w	r1, r7, #20
 80124a6:	f8bb b000 	ldrh.w	fp, [fp]
 80124aa:	f107 0020 	add.w	r0, r7, #32
 80124ae:	f7ff fdc5 	bl	801203c <_ZNSt6vectorImSaImEEC1ERKS1_>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80124b2:	f04f 31ff 	mov.w	r1, #4294967295
 80124b6:	6830      	ldr	r0, [r6, #0]
 80124b8:	f7fa f96c 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80124bc:	f107 020c 	add.w	r2, r7, #12
 80124c0:	4659      	mov	r1, fp
 80124c2:	4630      	mov	r0, r6
 80124c4:	f005 ff29 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80124c8:	7b3a      	ldrb	r2, [r7, #12]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80124ca:	4603      	mov	r3, r0
		osSemaphoreRelease(RegistersSemaphore);
 80124cc:	6830      	ldr	r0, [r6, #0]
	if (!success) {
 80124ce:	b962      	cbnz	r2, 80124ea <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ea>
		osSemaphoreRelease(RegistersSemaphore);
 80124d0:	f7fa f994 	bl	800c7fc <osSemaphoreRelease>
		return false;
 80124d4:	2000      	movs	r0, #0
 80124d6:	72f8      	strb	r0, [r7, #11]
 80124d8:	f107 0020 	add.w	r0, r7, #32
 80124dc:	f7fd f97f 	bl	800f7de <_ZNSt12_Vector_baseImSaImEED1Ev>
 80124e0:	f107 0014 	add.w	r0, r7, #20
 80124e4:	f7fd f97b 	bl	800f7de <_ZNSt12_Vector_baseImSaImEED1Ev>
 80124e8:	e73c      	b.n	8012364 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 80124ea:	795a      	ldrb	r2, [r3, #5]
 80124ec:	2a00      	cmp	r2, #0
 80124ee:	d0ef      	beq.n	80124d0 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d0>
 80124f0:	88db      	ldrh	r3, [r3, #6]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d1ec      	bne.n	80124d0 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d0>
	osSemaphoreRelease(RegistersSemaphore);
 80124f6:	f7fa f981 	bl	800c7fc <osSemaphoreRelease>
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 80124fa:	2101      	movs	r1, #1
 80124fc:	4630      	mov	r0, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80124fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012502:	9100      	str	r1, [sp, #0]
 8012504:	4659      	mov	r1, fp
 8012506:	1a9b      	subs	r3, r3, r2
 8012508:	f3c3 038f 	ubfx	r3, r3, #2, #16
 801250c:	f7ff fe59 	bl	80121c2 <_ZN9Registers13WriteRegisterImEEbtPT_tb>
 8012510:	e7e1      	b.n	80124d6 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d6>
		response_content.data = std::vector<uint8_t>{ERROR};
 8012512:	21ff      	movs	r1, #255	@ 0xff
 8012514:	617a      	str	r2, [r7, #20]
 8012516:	2201      	movs	r2, #1
 8012518:	7339      	strb	r1, [r7, #12]
 801251a:	61ba      	str	r2, [r7, #24]
 801251c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8012520:	e730      	b.n	8012384 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x84>

08012522 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012522:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012526:	468b      	mov	fp, r1
 8012528:	b0b1      	sub	sp, #196	@ 0xc4
 801252a:	4607      	mov	r7, r0
 801252c:	4698      	mov	r8, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 801252e:	2600      	movs	r6, #0
	response_content.ack = true;
 8012530:	f04f 0a01 	mov.w	sl, #1
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012534:	4615      	mov	r5, r2
 8012536:	f8bd 90e8 	ldrh.w	r9, [sp, #232]	@ 0xe8
 801253a:	961d      	str	r6, [sp, #116]	@ 0x74
 801253c:	ac2a      	add	r4, sp, #168	@ 0xa8
	response_content.ack = true;
 801253e:	f8ad a066 	strh.w	sl, [sp, #102]	@ 0x66
	response_content.element_register = element.element_register;
 8012542:	e9d3 0100 	ldrd	r0, r1, [r3]
	response_content.access = element.access;
 8012546:	7a1b      	ldrb	r3, [r3, #8]
	response_content.element_register = element.element_register;
 8012548:	9018      	str	r0, [sp, #96]	@ 0x60
 801254a:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
	CommunicationLED(leds, message.interface);
 801254e:	6938      	ldr	r0, [r7, #16]
 8012550:	f89b 1000 	ldrb.w	r1, [fp]
	response_content.access = element.access;
 8012554:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 8012558:	e9cd 661b 	strd	r6, r6, [sp, #108]	@ 0x6c
	CommunicationLED(leds, message.interface);
 801255c:	f7fc fa57 	bl	800ea0e <_Z16CommunicationLEDP4LEDSh>
	if (element.access == WRITE) {
 8012560:	f898 3008 	ldrb.w	r3, [r8, #8]
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8012564:	4659      	mov	r1, fp
	if (element.access == WRITE) {
 8012566:	bb1b      	cbnz	r3, 80125b0 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x8e>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8012568:	a81e      	add	r0, sp, #120	@ 0x78
 801256a:	f7fd fad2 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 801256e:	a918      	add	r1, sp, #96	@ 0x60
 8012570:	a824      	add	r0, sp, #144	@ 0x90
 8012572:	f7fd fabb 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8012576:	4641      	mov	r1, r8
 8012578:	4620      	mov	r0, r4
 801257a:	f7fd fab7 	bl	800faec <_ZN14MessageElementC1ERKS_>
 801257e:	ab24      	add	r3, sp, #144	@ 0x90
 8012580:	462a      	mov	r2, r5
 8012582:	a91e      	add	r1, sp, #120	@ 0x78
 8012584:	4638      	mov	r0, r7
 8012586:	e9cd 4900 	strd	r4, r9, [sp]
 801258a:	f7ff feb9 	bl	8012300 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t>
 801258e:	4681      	mov	r9, r0
      }
 8012590:	a82d      	add	r0, sp, #180	@ 0xb4
 8012592:	f7ee fb39 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012596:	a827      	add	r0, sp, #156	@ 0x9c
 8012598:	f7ee fb36 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801259c:	a81f      	add	r0, sp, #124	@ 0x7c
 801259e:	f7ee fb33 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80125a2:	a81b      	add	r0, sp, #108	@ 0x6c
 80125a4:	f7ee fb30 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 80125a8:	4648      	mov	r0, r9
 80125aa:	b031      	add	sp, #196	@ 0xc4
 80125ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ProcessRead<T>(message, response, response_content, element, start_index);
 80125b0:	a813      	add	r0, sp, #76	@ 0x4c
 80125b2:	f7fd faae 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 80125b6:	a918      	add	r1, sp, #96	@ 0x60
 80125b8:	a81e      	add	r0, sp, #120	@ 0x78
 80125ba:	f7fd fa97 	bl	800faec <_ZN14MessageElementC1ERKS_>
 80125be:	4641      	mov	r1, r8
 80125c0:	a824      	add	r0, sp, #144	@ 0x90
 80125c2:	f7fd fa93 	bl	800faec <_ZN14MessageElementC1ERKS_>
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 80125c6:	f8cd a000 	str.w	sl, [sp]
 80125ca:	f10d 0316 	add.w	r3, sp, #22
 80125ce:	aa06      	add	r2, sp, #24
 80125d0:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 80125d4:	6878      	ldr	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80125d6:	9609      	str	r6, [sp, #36]	@ 0x24
 80125d8:	e9cd 6607 	strd	r6, r6, [sp, #28]
 80125dc:	f7ff fd47 	bl	801206e <_ZN9Registers12ReadRegisterImEEbtPT_Ptb>
	if (not *success)
 80125e0:	4680      	mov	r8, r0
 80125e2:	2800      	cmp	r0, #0
 80125e4:	d040      	beq.n	8012668 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x146>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 80125e6:	a924      	add	r1, sp, #144	@ 0x90
 80125e8:	4620      	mov	r0, r4
 80125ea:	f7fd fa7f 	bl	800faec <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 80125ee:	f89d 30ab 	ldrb.w	r3, [sp, #171]	@ 0xab
 80125f2:	960c      	str	r6, [sp, #48]	@ 0x30
 80125f4:	e9cd 660a 	strd	r6, r6, [sp, #40]	@ 0x28
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	f040 808b 	bne.w	8012714 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x1f2>
		vector = std::vector<T>{*data};
 80125fe:	9b06      	ldr	r3, [sp, #24]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012600:	4650      	mov	r0, sl
 8012602:	930d      	str	r3, [sp, #52]	@ 0x34
 8012604:	f7fc fb48 	bl	800ec98 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 8012608:	a90e      	add	r1, sp, #56	@ 0x38
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801260a:	1d03      	adds	r3, r0, #4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801260c:	4602      	mov	r2, r0
 801260e:	9010      	str	r0, [sp, #64]	@ 0x40
 8012610:	a80d      	add	r0, sp, #52	@ 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012612:	9312      	str	r3, [sp, #72]	@ 0x48
 8012614:	f7ff fd04 	bl	8012020 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
		vector = std::vector<T>(data, data + element.element_register.length);
 8012618:	a910      	add	r1, sp, #64	@ 0x40
	  this->_M_impl._M_finish =
 801261a:	9011      	str	r0, [sp, #68]	@ 0x44
 801261c:	a80a      	add	r0, sp, #40	@ 0x28
 801261e:	f7fd f8e9 	bl	800f7f4 <_ZNSt6vectorImSaImEEaSEOS1_.isra.0>
      }
 8012622:	a810      	add	r0, sp, #64	@ 0x40
 8012624:	f7fd f8db 	bl	800f7de <_ZNSt12_Vector_baseImSaImEED1Ev>
 8012628:	a82d      	add	r0, sp, #180	@ 0xb4
	: _M_start(), _M_finish(), _M_end_of_storage()
 801262a:	2600      	movs	r6, #0
      }
 801262c:	f7ee faec 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	data = BuildVector<T>(register_read_vector_cast);
 8012630:	a90a      	add	r1, sp, #40	@ 0x28
 8012632:	a810      	add	r0, sp, #64	@ 0x40
 8012634:	f7ff fd02 	bl	801203c <_ZNSt6vectorImSaImEEC1ERKS1_>
      : _M_current(__i) { }
 8012638:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801263a:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
	: _M_start(), _M_finish(), _M_end_of_storage()
 801263e:	960f      	str	r6, [sp, #60]	@ 0x3c
 8012640:	9302      	str	r3, [sp, #8]
 8012642:	e9cd 660d 	strd	r6, r6, [sp, #52]	@ 0x34
    for (T input : inputs) {
 8012646:	9b02      	ldr	r3, [sp, #8]
 8012648:	4553      	cmp	r3, sl
 801264a:	f040 808d 	bne.w	8012768 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x246>
	data = BuildVector<T>(register_read_vector_cast);
 801264e:	a90d      	add	r1, sp, #52	@ 0x34
 8012650:	a807      	add	r0, sp, #28
 8012652:	f7fc fdd4 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8012656:	a80d      	add	r0, sp, #52	@ 0x34
 8012658:	f7ee fad6 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801265c:	a810      	add	r0, sp, #64	@ 0x40
 801265e:	f7fd f8be 	bl	800f7de <_ZNSt12_Vector_baseImSaImEED1Ev>
 8012662:	a80a      	add	r0, sp, #40	@ 0x28
 8012664:	f7fd f8bb 	bl	800f7de <_ZNSt12_Vector_baseImSaImEED1Ev>
	response_content.data = ReadElement<T>(&element, &success);
 8012668:	a821      	add	r0, sp, #132	@ 0x84
 801266a:	a907      	add	r1, sp, #28
 801266c:	f7fc fdc7 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8012670:	a807      	add	r0, sp, #28
 8012672:	f7ee fac9 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not success) {
 8012676:	f1b8 0f00 	cmp.w	r8, #0
 801267a:	d114      	bne.n	80126a6 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x184>
		response_content.data = std::vector<uint8_t>{ERROR};
 801267c:	22ff      	movs	r2, #255	@ 0xff
		response_content.command = true; // this is an error flag for a read ack
 801267e:	2301      	movs	r3, #1
		response_content.data = std::vector<uint8_t>{ERROR};
 8012680:	4620      	mov	r0, r4
 8012682:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 8012686:	aa0d      	add	r2, sp, #52	@ 0x34
		response_content.command = true; // this is an error flag for a read ack
 8012688:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
		response_content.data = std::vector<uint8_t>{ERROR};
 801268c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012690:	461a      	mov	r2, r3
 8012692:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8012694:	f7fe fea0 	bl	80113d8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 8012698:	a821      	add	r0, sp, #132	@ 0x84
 801269a:	4621      	mov	r1, r4
 801269c:	f7fc fdaf 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 80126a0:	4620      	mov	r0, r4
 80126a2:	f7ee fab1 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 80126a6:	a91e      	add	r1, sp, #120	@ 0x78
 80126a8:	4620      	mov	r0, r4
 80126aa:	f7fd fa1f 	bl	800faec <_ZN14MessageElementC1ERKS_>
 80126ae:	4622      	mov	r2, r4
 80126b0:	4629      	mov	r1, r5
 80126b2:	4638      	mov	r0, r7
 80126b4:	f7fe ff72 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80126b8:	2800      	cmp	r0, #0
 80126ba:	f040 8081 	bne.w	80127c0 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x29e>
 80126be:	e9d5 3601 	ldrd	r3, r6, [r5, #4]
 80126c2:	1af6      	subs	r6, r6, r3
 80126c4:	bf18      	it	ne
 80126c6:	2601      	movne	r6, #1
 80126c8:	a82d      	add	r0, sp, #180	@ 0xb4
 80126ca:	f7ee fa9d 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80126ce:	b1ce      	cbz	r6, 8012704 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x1e2>
		Send(*response);
 80126d0:	4629      	mov	r1, r5
 80126d2:	4620      	mov	r0, r4
 80126d4:	f7fd fa1d 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 80126d8:	4621      	mov	r1, r4
 80126da:	4638      	mov	r0, r7
 80126dc:	f7fd fb08 	bl	800fcf0 <_ZN13Communication4SendE13MessageHeader>
 80126e0:	a82b      	add	r0, sp, #172	@ 0xac
 80126e2:	f7ee fa91 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 80126e6:	1d28      	adds	r0, r5, #4
 80126e8:	f7fc fda0 	bl	800f22c <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 80126ec:	a91e      	add	r1, sp, #120	@ 0x78
 80126ee:	4620      	mov	r0, r4
 80126f0:	f7fd f9fc 	bl	800faec <_ZN14MessageElementC1ERKS_>
 80126f4:	4622      	mov	r2, r4
 80126f6:	4629      	mov	r1, r5
 80126f8:	4638      	mov	r0, r7
 80126fa:	f7fe ff4f 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80126fe:	a82d      	add	r0, sp, #180	@ 0xb4
 8012700:	f7ee fa82 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012704:	a827      	add	r0, sp, #156	@ 0x9c
 8012706:	f7ee fa7f 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801270a:	a821      	add	r0, sp, #132	@ 0x84
 801270c:	f7ee fa7c 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012710:	a814      	add	r0, sp, #80	@ 0x50
 8012712:	e744      	b.n	801259e <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x7c>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8012714:	f8bd 00ac 	ldrh.w	r0, [sp, #172]	@ 0xac
 8012718:	b150      	cbz	r0, 8012730 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x20e>
		vector = std::vector<T>(data, data + element.element_register.length);
 801271a:	0086      	lsls	r6, r0, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801271c:	f7fc fabc 	bl	800ec98 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8012720:	4602      	mov	r2, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012722:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012724:	9010      	str	r0, [sp, #64]	@ 0x40
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012726:	9312      	str	r3, [sp, #72]	@ 0x48
 8012728:	ab06      	add	r3, sp, #24
 801272a:	1999      	adds	r1, r3, r6
 801272c:	4618      	mov	r0, r3
 801272e:	e771      	b.n	8012614 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0xf2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012730:	e9dd b106 	ldrd	fp, r1, [sp, #24]
	  if (__xlen > capacity())
 8012734:	ebb1 0a0b 	subs.w	sl, r1, fp
 8012738:	d011      	beq.n	801275e <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x23c>
	  pointer __result = this->_M_allocate(__n);
 801273a:	ea4f 00aa 	mov.w	r0, sl, asr #2
 801273e:	9102      	str	r1, [sp, #8]
 8012740:	f7fc faaa 	bl	800ec98 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8012744:	4606      	mov	r6, r0
 8012746:	4602      	mov	r2, r0
 8012748:	9902      	ldr	r1, [sp, #8]
 801274a:	4658      	mov	r0, fp
 801274c:	f7ff fc68 	bl	8012020 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 8012750:	960a      	str	r6, [sp, #40]	@ 0x28
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8012752:	4456      	add	r6, sl
 8012754:	960c      	str	r6, [sp, #48]	@ 0x30
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8012756:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012758:	4453      	add	r3, sl
 801275a:	930b      	str	r3, [sp, #44]	@ 0x2c
      return *this;
 801275c:	e764      	b.n	8012628 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x106>
 801275e:	4652      	mov	r2, sl
 8012760:	4658      	mov	r0, fp
 8012762:	f7ff fc5d 	bl	8012020 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8012766:	e7f6      	b.n	8012756 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x234>
    for (T input : inputs) {
 8012768:	f85a 2b04 	ldr.w	r2, [sl], #4
    std::memcpy(&reinterpreted_input, &input, sizeof(T)); // this is mandatory to get rid of the memory alignment problem. A simple cast can't work here
 801276c:	f04f 0b18 	mov.w	fp, #24
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012770:	962c      	str	r6, [sp, #176]	@ 0xb0
 8012772:	e9cd 662a 	strd	r6, r6, [sp, #168]	@ 0xa8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8012776:	f1cb 0c20 	rsb	ip, fp, #32
 801277a:	fa22 f10b 	lsr.w	r1, r2, fp
 801277e:	f1ab 0020 	sub.w	r0, fp, #32
	for (uint8_t index = 0; index < type_length; index++) {
 8012782:	f1ab 0b08 	sub.w	fp, fp, #8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8012786:	fa06 fc0c 	lsl.w	ip, r6, ip
 801278a:	9203      	str	r2, [sp, #12]
 801278c:	fa26 f000 	lsr.w	r0, r6, r0
 8012790:	ea41 010c 	orr.w	r1, r1, ip
 8012794:	4301      	orrs	r1, r0
      { emplace_back(std::move(__x)); }
 8012796:	4620      	mov	r0, r4
 8012798:	f88d 1015 	strb.w	r1, [sp, #21]
 801279c:	f10d 0115 	add.w	r1, sp, #21
 80127a0:	f7fd f878 	bl	800f894 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	for (uint8_t index = 0; index < type_length; index++) {
 80127a4:	f11b 0f08 	cmn.w	fp, #8
 80127a8:	9a03      	ldr	r2, [sp, #12]
 80127aa:	d1e4      	bne.n	8012776 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x254>
        data.insert(data.end(), single.begin(), single.end());
 80127ac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80127ae:	a80d      	add	r0, sp, #52	@ 0x34
 80127b0:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 80127b4:	f7fe fe7e 	bl	80114b4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 80127b8:	4620      	mov	r0, r4
 80127ba:	f7ee fa25 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 80127be:	e742      	b.n	8012646 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x124>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 80127c0:	2600      	movs	r6, #0
 80127c2:	e781      	b.n	80126c8 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x1a6>

080127c4 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 80127c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127c6:	461c      	mov	r4, r3
 80127c8:	b08f      	sub	sp, #60	@ 0x3c
	if (not element.ack && element.command) {
 80127ca:	799b      	ldrb	r3, [r3, #6]
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 80127cc:	4605      	mov	r5, r0
 80127ce:	4617      	mov	r7, r2
 80127d0:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
	if (not element.ack && element.command) {
 80127d4:	b9cb      	cbnz	r3, 801280a <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x46>
 80127d6:	79e3      	ldrb	r3, [r4, #7]
		return ProcessCommand<T>(message, response, element, start_index);
 80127d8:	a803      	add	r0, sp, #12
	if (not element.ack && element.command) {
 80127da:	b323      	cbz	r3, 8012826 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x62>
		return ProcessCommand<T>(message, response, element, start_index);
 80127dc:	f7fd f999 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 80127e0:	4621      	mov	r1, r4
 80127e2:	a808      	add	r0, sp, #32
 80127e4:	f7fd f982 	bl	800faec <_ZN14MessageElementC1ERKS_>
 80127e8:	ab08      	add	r3, sp, #32
 80127ea:	463a      	mov	r2, r7
 80127ec:	a903      	add	r1, sp, #12
 80127ee:	4628      	mov	r0, r5
 80127f0:	9600      	str	r6, [sp, #0]
 80127f2:	f7ff fe96 	bl	8012522 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt>
		return ProcessSubscriber<T>(message, element, start_index);
 80127f6:	4604      	mov	r4, r0
 80127f8:	a80b      	add	r0, sp, #44	@ 0x2c
 80127fa:	f7ee fa05 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80127fe:	a804      	add	r0, sp, #16
 8012800:	f7ee fa02 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8012804:	4620      	mov	r0, r4
 8012806:	b00f      	add	sp, #60	@ 0x3c
 8012808:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ProcessService<T>(message, element, start_index);
 801280a:	a803      	add	r0, sp, #12
 801280c:	f7fd f981 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 8012810:	4621      	mov	r1, r4
 8012812:	a808      	add	r0, sp, #32
 8012814:	f7fd f96a 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8012818:	4633      	mov	r3, r6
 801281a:	aa08      	add	r2, sp, #32
 801281c:	a903      	add	r1, sp, #12
 801281e:	4628      	mov	r0, r5
 8012820:	f7fe fa65 	bl	8010cee <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt>
 8012824:	e7e7      	b.n	80127f6 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x32>
		return ProcessSubscriber<T>(message, element, start_index);
 8012826:	f7fd f974 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 801282a:	4621      	mov	r1, r4
 801282c:	a808      	add	r0, sp, #32
 801282e:	f7fd f95d 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8012832:	4633      	mov	r3, r6
 8012834:	aa08      	add	r2, sp, #32
 8012836:	a903      	add	r1, sp, #12
 8012838:	4628      	mov	r0, r5
 801283a:	f7fe f9d4 	bl	8010be6 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt>
 801283e:	e7da      	b.n	80127f6 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x32>

08012840 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8012840:	b510      	push	{r4, lr}
	  if (__n > 0)
 8012842:	460a      	mov	r2, r1
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8012844:	4604      	mov	r4, r0
	  if (__n > 0)
 8012846:	b141      	cbz	r1, 801285a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_+0x1a>
 8012848:	2100      	movs	r1, #0
      if (__n <= 0)
 801284a:	2a01      	cmp	r2, #1
 801284c:	f800 1b01 	strb.w	r1, [r0], #1
 8012850:	d005      	beq.n	801285e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_+0x1e>
      std::__fill_a(__first, __first + __n, __value);
 8012852:	4414      	add	r4, r2
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8012854:	3a01      	subs	r2, #1
 8012856:	f009 fd2f 	bl	801c2b8 <memset>
	}
 801285a:	4620      	mov	r0, r4
 801285c:	bd10      	pop	{r4, pc}
	      ++__first;
 801285e:	4604      	mov	r4, r0
 8012860:	e7fb      	b.n	801285a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_+0x1a>
	...

08012864 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 8012864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012868:	4604      	mov	r4, r0
      if (__n != 0)
 801286a:	460d      	mov	r5, r1
 801286c:	b159      	cbz	r1, 8012886 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x22>
					 - this->_M_impl._M_finish);
 801286e:	6882      	ldr	r2, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012870:	e9d0 7300 	ldrd	r7, r3, [r0]
 8012874:	1ad2      	subs	r2, r2, r3
 8012876:	eba3 0807 	sub.w	r8, r3, r7
	  if (__navail >= __n)
 801287a:	428a      	cmp	r2, r1
 801287c:	d305      	bcc.n	801288a <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x26>
	__uninit_default_n(__first, __n);
 801287e:	4618      	mov	r0, r3
 8012880:	f7ff ffde 	bl	8012840 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_>
	      this->_M_impl._M_finish =
 8012884:	6060      	str	r0, [r4, #4]
    }
 8012886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		_M_check_len(__n, "vector::_M_default_append");
 801288a:	4a11      	ldr	r2, [pc, #68]	@ (80128d0 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x6c>)
 801288c:	f7fd f8d1 	bl	800fa32 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc>
 8012890:	4681      	mov	r9, r0
	      pointer __new_start(this->_M_allocate(__len));
 8012892:	f7fc f9f6 	bl	800ec82 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 8012896:	4629      	mov	r1, r5
 8012898:	4606      	mov	r6, r0
 801289a:	4440      	add	r0, r8
 801289c:	f7ff ffd0 	bl	8012840 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_>
      if (__count > 0)
 80128a0:	f1b8 0f00 	cmp.w	r8, #0
 80128a4:	d00a      	beq.n	80128bc <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x58>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80128a6:	4642      	mov	r2, r8
 80128a8:	4639      	mov	r1, r7
 80128aa:	4630      	mov	r0, r6
 80128ac:	f009 fcea 	bl	801c284 <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 80128b0:	68a1      	ldr	r1, [r4, #8]
 80128b2:	4638      	mov	r0, r7
 80128b4:	1bc9      	subs	r1, r1, r7
 80128b6:	f009 f989 	bl	801bbcc <_ZdlPvj>
      { __a.deallocate(__p, __n); }
 80128ba:	e001      	b.n	80128c0 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x5c>
	if (__p)
 80128bc:	2f00      	cmp	r7, #0
 80128be:	d1f7      	bne.n	80128b0 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x4c>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 80128c0:	4445      	add	r5, r8
	      this->_M_impl._M_start = __new_start;
 80128c2:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 80128c4:	4435      	add	r5, r6
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 80128c6:	444e      	add	r6, r9
	      this->_M_impl._M_finish = __new_start + __size + __n;
 80128c8:	6065      	str	r5, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 80128ca:	60a6      	str	r6, [r4, #8]
    }
 80128cc:	e7db      	b.n	8012886 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x22>
 80128ce:	bf00      	nop
 80128d0:	0801c5ac 	.word	0x0801c5ac

080128d4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80128d4:	b510      	push	{r4, lr}
	  if (_Num)
 80128d6:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80128d8:	4613      	mov	r3, r2
	  if (_Num)
 80128da:	d005      	beq.n	80128e8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80128dc:	4601      	mov	r1, r0
 80128de:	4622      	mov	r2, r4
 80128e0:	4618      	mov	r0, r3
 80128e2:	f009 fccf 	bl	801c284 <memmove>
 80128e6:	4603      	mov	r3, r0
	}
 80128e8:	1918      	adds	r0, r3, r4
 80128ea:	bd10      	pop	{r4, pc}

080128ec <_ZNSt6vectorIaSaIaEEC1ERKS1_>:
      vector(const vector& __x)
 80128ec:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80128ee:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 80128f2:	4604      	mov	r4, r0
 80128f4:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80128f6:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 80128f8:	2300      	movs	r3, #0
 80128fa:	e9c0 3300 	strd	r3, r3, [r0]
 80128fe:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8012900:	4630      	mov	r0, r6
 8012902:	f7fc f9be 	bl	800ec82 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012906:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8012908:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801290a:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801290c:	e9c4 0000 	strd	r0, r0, [r4]
			      _Category>::__copy_m(__first, __last, __result);
 8012910:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012914:	f7ff ffde 	bl	80128d4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 8012918:	6060      	str	r0, [r4, #4]
      }
 801291a:	4620      	mov	r0, r4
 801291c:	bd70      	pop	{r4, r5, r6, pc}

0801291e <_ZN9Registers13WriteRegisterIaEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 801291e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012922:	b085      	sub	sp, #20
 8012924:	4606      	mov	r6, r0
 8012926:	4688      	mov	r8, r1
 8012928:	461f      	mov	r7, r3
 801292a:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801292e:	f04f 31ff 	mov.w	r1, #4294967295
 8012932:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8012934:	4615      	mov	r5, r2
 8012936:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012938:	f7f9 ff2c 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801293c:	f10d 020f 	add.w	r2, sp, #15
 8012940:	4641      	mov	r1, r8
 8012942:	4630      	mov	r0, r6
 8012944:	f005 fce9 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8012948:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801294c:	4604      	mov	r4, r0
	if (!success) {
 801294e:	b933      	cbnz	r3, 801295e <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x40>
		osSemaphoreRelease(RegistersSemaphore);
 8012950:	6830      	ldr	r0, [r6, #0]
 8012952:	f7f9 ff53 	bl	800c7fc <osSemaphoreRelease>
		return false;
 8012956:	2000      	movs	r0, #0
}
 8012958:	b005      	add	sp, #20
 801295a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801295e:	f10d 000f 	add.w	r0, sp, #15
 8012962:	f7fc fa0d 	bl	800ed80 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	if (!success) {
 8012966:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d0f0      	beq.n	8012950 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
	if (target_register->register_info.type != registered_type) {
 801296e:	7923      	ldrb	r3, [r4, #4]
 8012970:	4283      	cmp	r3, r0
 8012972:	d1ed      	bne.n	8012950 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 8012974:	3304      	adds	r3, #4
 8012976:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801297a:	2800      	cmp	r0, #0
 801297c:	d0e8      	beq.n	8012950 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
	if (target_register->access.write) {
 801297e:	7a23      	ldrb	r3, [r4, #8]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d0e5      	beq.n	8012950 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
		success = false;
 8012984:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012986:	8961      	ldrh	r1, [r4, #10]
		success = false;
 8012988:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801298c:	f7fd f812 	bl	800f9b4 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012990:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012992:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8012996:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801299a:	b133      	cbz	r3, 80129aa <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x8c>
 801299c:	68e3      	ldr	r3, [r4, #12]
 801299e:	b123      	cbz	r3, 80129aa <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x8c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 80129a0:	f04f 31ff 	mov.w	r1, #4294967295
 80129a4:	6818      	ldr	r0, [r3, #0]
 80129a6:	f7f9 fef5 	bl	800c794 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 80129aa:	7823      	ldrb	r3, [r4, #0]
 80129ac:	b1db      	cbz	r3, 80129e6 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc8>
			success = true;
 80129ae:	2301      	movs	r3, #1
 80129b0:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 80129b4:	7963      	ldrb	r3, [r4, #5]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d045      	beq.n	8012a46 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x128>
 80129ba:	88e1      	ldrh	r1, [r4, #6]
 80129bc:	2900      	cmp	r1, #0
 80129be:	d13c      	bne.n	8012a3a <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x11c>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80129c0:	e9db 3100 	ldrd	r3, r1, [fp]
 80129c4:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 80129c6:	bf18      	it	ne
 80129c8:	f8cb 3004 	strne.w	r3, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80129cc:	f8db 0004 	ldr.w	r0, [fp, #4]
 80129d0:	1ac1      	subs	r1, r0, r3
	if (__new_size > size())
 80129d2:	428f      	cmp	r7, r1
 80129d4:	d924      	bls.n	8012a20 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x102>
	  _M_default_append(__new_size - size());
 80129d6:	1a79      	subs	r1, r7, r1
 80129d8:	4658      	mov	r0, fp
 80129da:	f7ff ff43 	bl	8012864 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj>
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 80129de:	2300      	movs	r3, #0
				for (uint16_t index = 0; index < length; index++) {
 80129e0:	b299      	uxth	r1, r3
 80129e2:	42b9      	cmp	r1, r7
 80129e4:	d323      	bcc.n	8012a2e <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x110>
		if (target_register->mode.callbacks) {
 80129e6:	7863      	ldrb	r3, [r4, #1]
 80129e8:	b16b      	cbz	r3, 8012a06 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xe8>
			if (callbacks.write != NULL) {
 80129ea:	f1b9 0f00 	cmp.w	r9, #0
 80129ee:	d00a      	beq.n	8012a06 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xe8>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 80129f0:	7963      	ldrb	r3, [r4, #5]
 80129f2:	b36b      	cbz	r3, 8012a50 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x132>
 80129f4:	88e3      	ldrh	r3, [r4, #6]
 80129f6:	b903      	cbnz	r3, 80129fa <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xdc>
					success = callbacks.write(callbacks.context, ID, value, length);
 80129f8:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 80129fa:	462a      	mov	r2, r5
 80129fc:	4641      	mov	r1, r8
 80129fe:	4650      	mov	r0, sl
 8012a00:	47c8      	blx	r9
 8012a02:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012a06:	9b01      	ldr	r3, [sp, #4]
 8012a08:	b123      	cbz	r3, 8012a14 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xf6>
 8012a0a:	68e3      	ldr	r3, [r4, #12]
 8012a0c:	b113      	cbz	r3, 8012a14 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xf6>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8012a0e:	6818      	ldr	r0, [r3, #0]
 8012a10:	f7f9 fef4 	bl	800c7fc <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 8012a14:	6830      	ldr	r0, [r6, #0]
 8012a16:	f7f9 fef1 	bl	800c7fc <osSemaphoreRelease>
		return success;
 8012a1a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8012a1e:	e79b      	b.n	8012958 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x3a>
	else if (__new_size < size())
 8012a20:	d2dd      	bcs.n	80129de <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc0>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8012a22:	443b      	add	r3, r7
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8012a24:	4298      	cmp	r0, r3
 8012a26:	d0da      	beq.n	80129de <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc0>
	    this->_M_impl._M_finish = __pos;
 8012a28:	f8cb 3004 	str.w	r3, [fp, #4]
 8012a2c:	e7d7      	b.n	80129de <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc0>
					(*register_vector)[index] = value[index];
 8012a2e:	56e8      	ldrsb	r0, [r5, r3]
 8012a30:	f8db 1000 	ldr.w	r1, [fp]
 8012a34:	54c8      	strb	r0, [r1, r3]
				for (uint16_t index = 0; index < length; index++) {
 8012a36:	3301      	adds	r3, #1
 8012a38:	e7d2      	b.n	80129e0 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc2>
 8012a3a:	465a      	mov	r2, fp
 8012a3c:	4429      	add	r1, r5
 8012a3e:	4628      	mov	r0, r5
 8012a40:	f7ff ff48 	bl	80128d4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8012a44:	e7cf      	b.n	80129e6 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc8>
				*(callbacks.pointer) = *value;
 8012a46:	f995 3000 	ldrsb.w	r3, [r5]
 8012a4a:	f88b 3000 	strb.w	r3, [fp]
 8012a4e:	e7ca      	b.n	80129e6 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc8>
					success = callbacks.write(callbacks.context, ID, value, 1);
 8012a50:	2301      	movs	r3, #1
 8012a52:	e7d2      	b.n	80129fa <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xdc>

08012a54 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8012a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a58:	b091      	sub	sp, #68	@ 0x44
 8012a5a:	4605      	mov	r5, r0
 8012a5c:	4691      	mov	r9, r2
 8012a5e:	4608      	mov	r0, r1
 8012a60:	af02      	add	r7, sp, #8
 8012a62:	469a      	mov	sl, r3
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8012a64:	3104      	adds	r1, #4
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8012a66:	f8d7 b060 	ldr.w	fp, [r7, #96]	@ 0x60
 8012a6a:	f107 060b 	add.w	r6, r7, #11
 8012a6e:	f8b7 4064 	ldrh.w	r4, [r7, #100]	@ 0x64
	if (not element.element_register.isArray) {
 8012a72:	f89b 8003 	ldrb.w	r8, [fp, #3]
 8012a76:	f1b8 0f00 	cmp.w	r8, #0
 8012a7a:	d173      	bne.n	8012b64 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x110>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8012a7c:	f107 0020 	add.w	r0, r7, #32
 8012a80:	f7ee f9bc 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012a84:	4632      	mov	r2, r6
 8012a86:	4621      	mov	r1, r4
 8012a88:	f107 0020 	add.w	r0, r7, #32
 8012a8c:	f7fc fa70 	bl	800ef70 <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 8012a90:	7538      	strb	r0, [r7, #20]
      }
 8012a92:	f107 0020 	add.w	r0, r7, #32
 8012a96:	f7ee f8b7 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8012a9a:	7afb      	ldrb	r3, [r7, #11]
 8012a9c:	b153      	cbz	r3, 8012ab4 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x60>
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	f8bb 1000 	ldrh.w	r1, [fp]
 8012aa4:	f107 0214 	add.w	r2, r7, #20
 8012aa8:	9300      	str	r3, [sp, #0]
 8012aaa:	4643      	mov	r3, r8
 8012aac:	6868      	ldr	r0, [r5, #4]
 8012aae:	f7ff ff36 	bl	801291e <_ZN9Registers13WriteRegisterIaEEbtPT_tb>
 8012ab2:	72f8      	strb	r0, [r7, #11]
		length_to_extract = 1;
 8012ab4:	f04f 0801 	mov.w	r8, #1
	if (success)
 8012ab8:	7af9      	ldrb	r1, [r7, #11]
		response_content.data = std::vector<uint8_t>{OK};
 8012aba:	f10a 060c 	add.w	r6, sl, #12
 8012abe:	f107 0314 	add.w	r3, r7, #20
 8012ac2:	f107 020c 	add.w	r2, r7, #12
	if (success)
 8012ac6:	2900      	cmp	r1, #0
 8012ac8:	f000 80cb 	beq.w	8012c62 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x20e>
		response_content.data = std::vector<uint8_t>{OK};
 8012acc:	2100      	movs	r1, #0
 8012ace:	60fb      	str	r3, [r7, #12]
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	7539      	strb	r1, [r7, #20]
 8012ad4:	613b      	str	r3, [r7, #16]
 8012ad6:	ca06      	ldmia	r2, {r1, r2}
		response_content.data = std::vector<uint8_t>{ERROR};
 8012ad8:	f107 0020 	add.w	r0, r7, #32
 8012adc:	f7fe fc7c 	bl	80113d8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 8012ae0:	f107 0120 	add.w	r1, r7, #32
 8012ae4:	4630      	mov	r0, r6
 8012ae6:	f7fc fb8a 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8012aea:	f107 0020 	add.w	r0, r7, #32
 8012aee:	f7ee f88b 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content)) {
 8012af2:	4651      	mov	r1, sl
 8012af4:	f107 0020 	add.w	r0, r7, #32
 8012af8:	f7fc fff8 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8012afc:	f107 0220 	add.w	r2, r7, #32
 8012b00:	4649      	mov	r1, r9
 8012b02:	4628      	mov	r0, r5
 8012b04:	f7fe fd4a 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012b08:	4606      	mov	r6, r0
 8012b0a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8012b0e:	f7ee f87b 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012b12:	bb06      	cbnz	r6, 8012b56 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x102>
		Send(*response);
 8012b14:	4649      	mov	r1, r9
 8012b16:	f107 0020 	add.w	r0, r7, #32
 8012b1a:	f7fc fffa 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 8012b1e:	f107 0120 	add.w	r1, r7, #32
 8012b22:	4628      	mov	r0, r5
 8012b24:	f7fd f8e4 	bl	800fcf0 <_ZN13Communication4SendE13MessageHeader>
 8012b28:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8012b2c:	f7ee f86c 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8012b30:	f109 0004 	add.w	r0, r9, #4
 8012b34:	f7fc fb7a 	bl	800f22c <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8012b38:	4651      	mov	r1, sl
 8012b3a:	f107 0020 	add.w	r0, r7, #32
 8012b3e:	f7fc ffd5 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8012b42:	f107 0220 	add.w	r2, r7, #32
 8012b46:	4649      	mov	r1, r9
 8012b48:	4628      	mov	r0, r5
 8012b4a:	f7fe fd27 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012b4e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8012b52:	f7ee f859 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return start_index + sizeof(T) * length_to_extract;
 8012b56:	eb04 0008 	add.w	r0, r4, r8
}
 8012b5a:	373c      	adds	r7, #60	@ 0x3c
 8012b5c:	b280      	uxth	r0, r0
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8012b64:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 8012b68:	f1b8 0f00 	cmp.w	r8, #0
 8012b6c:	d029      	beq.n	8012bc2 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x16e>
		T values[length_to_extract];
 8012b6e:	f108 0307 	add.w	r3, r8, #7
 8012b72:	466a      	mov	r2, sp
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8012b74:	f8c7 d000 	str.w	sp, [r7]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8012b78:	f107 0020 	add.w	r0, r7, #32
		T values[length_to_extract];
 8012b7c:	08db      	lsrs	r3, r3, #3
 8012b7e:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8012b82:	469d      	mov	sp, r3
 8012b84:	ab02      	add	r3, sp, #8
 8012b86:	607b      	str	r3, [r7, #4]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8012b88:	f7ee f938 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012b8c:	9600      	str	r6, [sp, #0]
 8012b8e:	4643      	mov	r3, r8
 8012b90:	4622      	mov	r2, r4
 8012b92:	f107 0120 	add.w	r1, r7, #32
 8012b96:	6878      	ldr	r0, [r7, #4]
 8012b98:	f7fd fdae 	bl	80106f8 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8012b9c:	f107 0020 	add.w	r0, r7, #32
 8012ba0:	f7ee f832 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8012ba4:	7afb      	ldrb	r3, [r7, #11]
 8012ba6:	b14b      	cbz	r3, 8012bbc <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x168>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 8012ba8:	2301      	movs	r3, #1
 8012baa:	f8bb 1000 	ldrh.w	r1, [fp]
 8012bae:	9300      	str	r3, [sp, #0]
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	687a      	ldr	r2, [r7, #4]
 8012bb4:	6868      	ldr	r0, [r5, #4]
 8012bb6:	f7ff feb2 	bl	801291e <_ZN9Registers13WriteRegisterIaEEbtPT_tb>
 8012bba:	72f8      	strb	r0, [r7, #11]
 8012bbc:	f8d7 d000 	ldr.w	sp, [r7]
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8012bc0:	e77a      	b.n	8012ab8 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
		length_to_extract = message.payload[start_index];
 8012bc2:	6843      	ldr	r3, [r0, #4]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012bc4:	f107 0020 	add.w	r0, r7, #32
		length_to_extract = message.payload[start_index];
 8012bc8:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8012bcc:	3401      	adds	r4, #1
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012bce:	f7ee f915 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012bd2:	f107 0120 	add.w	r1, r7, #32
		start_index++;
 8012bd6:	b2a4      	uxth	r4, r4
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012bd8:	4643      	mov	r3, r8
 8012bda:	f107 0014 	add.w	r0, r7, #20
 8012bde:	9600      	str	r6, [sp, #0]
 8012be0:	4622      	mov	r2, r4
 8012be2:	f7fd fd2f 	bl	8010644 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8012be6:	f107 0020 	add.w	r0, r7, #32
 8012bea:	f7ee f80d 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8012bee:	7afb      	ldrb	r3, [r7, #11]
 8012bf0:	b1fb      	cbz	r3, 8012c32 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1de>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 8012bf2:	686e      	ldr	r6, [r5, #4]
 8012bf4:	f107 0114 	add.w	r1, r7, #20
 8012bf8:	f8bb b000 	ldrh.w	fp, [fp]
 8012bfc:	f107 0020 	add.w	r0, r7, #32
 8012c00:	f7ff fe74 	bl	80128ec <_ZNSt6vectorIaSaIaEEC1ERKS1_>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012c04:	f04f 31ff 	mov.w	r1, #4294967295
 8012c08:	6830      	ldr	r0, [r6, #0]
 8012c0a:	f7f9 fdc3 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012c0e:	f107 020c 	add.w	r2, r7, #12
 8012c12:	4659      	mov	r1, fp
 8012c14:	4630      	mov	r0, r6
 8012c16:	f005 fb80 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8012c1a:	7b3a      	ldrb	r2, [r7, #12]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012c1c:	4603      	mov	r3, r0
		osSemaphoreRelease(RegistersSemaphore);
 8012c1e:	6830      	ldr	r0, [r6, #0]
	if (!success) {
 8012c20:	b962      	cbnz	r2, 8012c3c <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e8>
		osSemaphoreRelease(RegistersSemaphore);
 8012c22:	f7f9 fdeb 	bl	800c7fc <osSemaphoreRelease>
		return false;
 8012c26:	2000      	movs	r0, #0
 8012c28:	72f8      	strb	r0, [r7, #11]
 8012c2a:	f107 0020 	add.w	r0, r7, #32
 8012c2e:	f7fc fdf8 	bl	800f822 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8012c32:	f107 0014 	add.w	r0, r7, #20
 8012c36:	f7fc fdf4 	bl	800f822 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8012c3a:	e73d      	b.n	8012ab8 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 8012c3c:	795a      	ldrb	r2, [r3, #5]
 8012c3e:	2a00      	cmp	r2, #0
 8012c40:	d0ef      	beq.n	8012c22 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ce>
 8012c42:	88db      	ldrh	r3, [r3, #6]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d1ec      	bne.n	8012c22 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ce>
	osSemaphoreRelease(RegistersSemaphore);
 8012c48:	f7f9 fdd8 	bl	800c7fc <osSemaphoreRelease>
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 8012c4c:	2101      	movs	r1, #1
 8012c4e:	4630      	mov	r0, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012c50:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012c54:	9100      	str	r1, [sp, #0]
 8012c56:	4659      	mov	r1, fp
 8012c58:	1a9b      	subs	r3, r3, r2
 8012c5a:	b29b      	uxth	r3, r3
 8012c5c:	f7ff fe5f 	bl	801291e <_ZN9Registers13WriteRegisterIaEEbtPT_tb>
 8012c60:	e7e2      	b.n	8012c28 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d4>
		response_content.data = std::vector<uint8_t>{ERROR};
 8012c62:	21ff      	movs	r1, #255	@ 0xff
 8012c64:	617a      	str	r2, [r7, #20]
 8012c66:	2201      	movs	r2, #1
 8012c68:	7339      	strb	r1, [r7, #12]
 8012c6a:	61ba      	str	r2, [r7, #24]
 8012c6c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8012c70:	e732      	b.n	8012ad8 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x84>

08012c72 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012c72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c76:	460f      	mov	r7, r1
 8012c78:	b0b1      	sub	sp, #196	@ 0xc4
 8012c7a:	461c      	mov	r4, r3
 8012c7c:	4680      	mov	r8, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012c7e:	f04f 0900 	mov.w	r9, #0
 8012c82:	f8bd a0e8 	ldrh.w	sl, [sp, #232]	@ 0xe8
 8012c86:	9203      	str	r2, [sp, #12]
 8012c88:	ad2a      	add	r5, sp, #168	@ 0xa8
 8012c8a:	f8cd 9074 	str.w	r9, [sp, #116]	@ 0x74
	response_content.element_register = element.element_register;
 8012c8e:	e9d3 0100 	ldrd	r0, r1, [r3]
	response_content.ack = true;
 8012c92:	2301      	movs	r3, #1
	response_content.element_register = element.element_register;
 8012c94:	9018      	str	r0, [sp, #96]	@ 0x60
	response_content.ack = true;
 8012c96:	f8ad 3066 	strh.w	r3, [sp, #102]	@ 0x66
	response_content.access = element.access;
 8012c9a:	7a23      	ldrb	r3, [r4, #8]
	response_content.element_register = element.element_register;
 8012c9c:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
	CommunicationLED(leds, message.interface);
 8012ca0:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8012ca4:	7839      	ldrb	r1, [r7, #0]
	response_content.access = element.access;
 8012ca6:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 8012caa:	e9cd 991b 	strd	r9, r9, [sp, #108]	@ 0x6c
	CommunicationLED(leds, message.interface);
 8012cae:	f7fb feae 	bl	800ea0e <_Z16CommunicationLEDP4LEDSh>
	if (element.access == WRITE) {
 8012cb2:	7a23      	ldrb	r3, [r4, #8]
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8012cb4:	4639      	mov	r1, r7
	if (element.access == WRITE) {
 8012cb6:	bb1b      	cbnz	r3, 8012d00 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x8e>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8012cb8:	a81e      	add	r0, sp, #120	@ 0x78
 8012cba:	f7fc ff2a 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 8012cbe:	a918      	add	r1, sp, #96	@ 0x60
 8012cc0:	a824      	add	r0, sp, #144	@ 0x90
 8012cc2:	f7fc ff13 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8012cc6:	4621      	mov	r1, r4
 8012cc8:	4628      	mov	r0, r5
 8012cca:	f7fc ff0f 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8012cce:	ab24      	add	r3, sp, #144	@ 0x90
 8012cd0:	9a03      	ldr	r2, [sp, #12]
 8012cd2:	a91e      	add	r1, sp, #120	@ 0x78
 8012cd4:	4640      	mov	r0, r8
 8012cd6:	e9cd 5a00 	strd	r5, sl, [sp]
 8012cda:	f7ff febb 	bl	8012a54 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t>
 8012cde:	4682      	mov	sl, r0
      }
 8012ce0:	a82d      	add	r0, sp, #180	@ 0xb4
 8012ce2:	f7ed ff91 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012ce6:	a827      	add	r0, sp, #156	@ 0x9c
 8012ce8:	f7ed ff8e 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012cec:	a81f      	add	r0, sp, #124	@ 0x7c
 8012cee:	f7ed ff8b 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012cf2:	a81b      	add	r0, sp, #108	@ 0x6c
 8012cf4:	f7ed ff88 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8012cf8:	4650      	mov	r0, sl
 8012cfa:	b031      	add	sp, #196	@ 0xc4
 8012cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ProcessRead<T>(message, response, response_content, element, start_index);
 8012d00:	a813      	add	r0, sp, #76	@ 0x4c
 8012d02:	f7fc ff06 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 8012d06:	a918      	add	r1, sp, #96	@ 0x60
 8012d08:	a81e      	add	r0, sp, #120	@ 0x78
 8012d0a:	f7fc feef 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8012d0e:	4621      	mov	r1, r4
 8012d10:	a824      	add	r0, sp, #144	@ 0x90
 8012d12:	f7fc feeb 	bl	800faec <_ZN14MessageElementC1ERKS_>
uint16_t Communication::ProcessRead(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8012d16:	f8d8 7004 	ldr.w	r7, [r8, #4]
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 8012d1a:	f8bd b090 	ldrh.w	fp, [sp, #144]	@ 0x90
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012d1e:	f04f 31ff 	mov.w	r1, #4294967295
 8012d22:	6838      	ldr	r0, [r7, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012d24:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8012d28:	e9cd 9907 	strd	r9, r9, [sp, #28]
 8012d2c:	f7f9 fd32 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012d30:	462a      	mov	r2, r5
 8012d32:	4659      	mov	r1, fp
 8012d34:	4638      	mov	r0, r7
 8012d36:	f005 faf0 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8012d3a:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012d3e:	4604      	mov	r4, r0
	if (!success) {
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d15b      	bne.n	8012dfc <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x18a>
		osSemaphoreRelease(RegistersSemaphore);
 8012d44:	6838      	ldr	r0, [r7, #0]
 8012d46:	f7f9 fd59 	bl	800c7fc <osSemaphoreRelease>
		return false;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	9304      	str	r3, [sp, #16]
	response_content.data = ReadElement<T>(&element, &success);
 8012d4e:	a907      	add	r1, sp, #28
 8012d50:	a821      	add	r0, sp, #132	@ 0x84
 8012d52:	f7fc fa54 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8012d56:	a807      	add	r0, sp, #28
 8012d58:	f7ed ff56 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not success) {
 8012d5c:	9b04      	ldr	r3, [sp, #16]
 8012d5e:	b9a3      	cbnz	r3, 8012d8a <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x118>
		response_content.data = std::vector<uint8_t>{ERROR};
 8012d60:	22ff      	movs	r2, #255	@ 0xff
		response_content.command = true; // this is an error flag for a read ack
 8012d62:	2301      	movs	r3, #1
		response_content.data = std::vector<uint8_t>{ERROR};
 8012d64:	4628      	mov	r0, r5
 8012d66:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 8012d6a:	aa0d      	add	r2, sp, #52	@ 0x34
		response_content.command = true; // this is an error flag for a read ack
 8012d6c:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
		response_content.data = std::vector<uint8_t>{ERROR};
 8012d70:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012d74:	461a      	mov	r2, r3
 8012d76:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8012d78:	f7fe fb2e 	bl	80113d8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 8012d7c:	a821      	add	r0, sp, #132	@ 0x84
 8012d7e:	4629      	mov	r1, r5
 8012d80:	f7fc fa3d 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8012d84:	4628      	mov	r0, r5
 8012d86:	f7ed ff3f 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8012d8a:	a91e      	add	r1, sp, #120	@ 0x78
 8012d8c:	4628      	mov	r0, r5
 8012d8e:	f7fc fead 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8012d92:	462a      	mov	r2, r5
 8012d94:	9903      	ldr	r1, [sp, #12]
 8012d96:	4640      	mov	r0, r8
 8012d98:	f7fe fc00 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012d9c:	2800      	cmp	r0, #0
 8012d9e:	f040 812e 	bne.w	8012ffe <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x38c>
 8012da2:	9b03      	ldr	r3, [sp, #12]
 8012da4:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8012da8:	1ae4      	subs	r4, r4, r3
 8012daa:	bf18      	it	ne
 8012dac:	2401      	movne	r4, #1
 8012dae:	a82d      	add	r0, sp, #180	@ 0xb4
 8012db0:	f7ed ff2a 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012db4:	b1d4      	cbz	r4, 8012dec <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x17a>
		Send(*response);
 8012db6:	9903      	ldr	r1, [sp, #12]
 8012db8:	a82a      	add	r0, sp, #168	@ 0xa8
 8012dba:	f7fc feaa 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 8012dbe:	a92a      	add	r1, sp, #168	@ 0xa8
 8012dc0:	4640      	mov	r0, r8
 8012dc2:	f7fc ff95 	bl	800fcf0 <_ZN13Communication4SendE13MessageHeader>
 8012dc6:	a82b      	add	r0, sp, #172	@ 0xac
 8012dc8:	f7ed ff1e 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8012dcc:	9b03      	ldr	r3, [sp, #12]
 8012dce:	1d18      	adds	r0, r3, #4
 8012dd0:	f7fc fa2c 	bl	800f22c <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8012dd4:	a91e      	add	r1, sp, #120	@ 0x78
 8012dd6:	a82a      	add	r0, sp, #168	@ 0xa8
 8012dd8:	f7fc fe88 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8012ddc:	aa2a      	add	r2, sp, #168	@ 0xa8
 8012dde:	9903      	ldr	r1, [sp, #12]
 8012de0:	4640      	mov	r0, r8
 8012de2:	f7fe fbdb 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012de6:	a82d      	add	r0, sp, #180	@ 0xb4
 8012de8:	f7ed ff0e 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012dec:	a827      	add	r0, sp, #156	@ 0x9c
 8012dee:	f7ed ff0b 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012df2:	a821      	add	r0, sp, #132	@ 0x84
 8012df4:	f7ed ff08 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012df8:	a814      	add	r0, sp, #80	@ 0x50
 8012dfa:	e778      	b.n	8012cee <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x7c>
	uint8_t registered_type = GetTypeID<T>(&success);
 8012dfc:	4628      	mov	r0, r5
 8012dfe:	f7fb ffbf 	bl	800ed80 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	if (!success) {
 8012e02:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 8012e06:	9304      	str	r3, [sp, #16]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d09b      	beq.n	8012d44 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xd2>
	if (target_register->register_info.type != registered_type) {
 8012e0c:	7923      	ldrb	r3, [r4, #4]
 8012e0e:	4298      	cmp	r0, r3
 8012e10:	d198      	bne.n	8012d44 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xd2>
	if (callbacks[target_register->register_info.type] == NULL) {
 8012e12:	3004      	adds	r0, #4
 8012e14:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8012e18:	2800      	cmp	r0, #0
 8012e1a:	d093      	beq.n	8012d44 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xd2>
	if (target_register->access.read) {
 8012e1c:	7a63      	ldrb	r3, [r4, #9]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d031      	beq.n	8012e86 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x214>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012e22:	8961      	ldrh	r1, [r4, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 8012e24:	f88d 90a8 	strb.w	r9, [sp, #168]	@ 0xa8
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012e28:	f7fc fdc4 	bl	800f9b4 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>
 8012e2c:	e9d0 9300 	ldrd	r9, r3, [r0]
 8012e30:	9305      	str	r3, [sp, #20]
 8012e32:	68c3      	ldr	r3, [r0, #12]
 8012e34:	461e      	mov	r6, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012e36:	68e3      	ldr	r3, [r4, #12]
 8012e38:	b123      	cbz	r3, 8012e44 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x1d2>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8012e3a:	f04f 31ff 	mov.w	r1, #4294967295
 8012e3e:	6818      	ldr	r0, [r3, #0]
 8012e40:	f7f9 fca8 	bl	800c794 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 8012e44:	7863      	ldrb	r3, [r4, #1]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d161      	bne.n	8012f0e <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x29c>
		if (not success && target_register->mode.pointer) {
 8012e4a:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 8012e4e:	b9ab      	cbnz	r3, 8012e7c <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20a>
 8012e50:	7823      	ldrb	r3, [r4, #0]
 8012e52:	b19b      	cbz	r3, 8012e7c <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20a>
			success = true;
 8012e54:	2301      	movs	r3, #1
 8012e56:	f88d 30a8 	strb.w	r3, [sp, #168]	@ 0xa8
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8012e5a:	7962      	ldrb	r2, [r4, #5]
 8012e5c:	2a00      	cmp	r2, #0
 8012e5e:	f000 8088 	beq.w	8012f72 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x300>
 8012e62:	88e1      	ldrh	r1, [r4, #6]
 8012e64:	2900      	cmp	r1, #0
 8012e66:	d17c      	bne.n	8012f62 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2f0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012e68:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012e6c:	1a9b      	subs	r3, r3, r2
 8012e6e:	aa06      	add	r2, sp, #24
				*length = register_vector->size();
 8012e70:	b29b      	uxth	r3, r3
 8012e72:	f8ad 301a 	strh.w	r3, [sp, #26]
					for (uint16_t index = 0; index < *length; index++) {
 8012e76:	b288      	uxth	r0, r1
 8012e78:	4283      	cmp	r3, r0
 8012e7a:	d86b      	bhi.n	8012f54 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2e2>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012e7c:	68e3      	ldr	r3, [r4, #12]
 8012e7e:	b113      	cbz	r3, 8012e86 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x214>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8012e80:	6818      	ldr	r0, [r3, #0]
 8012e82:	f7f9 fcbb 	bl	800c7fc <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 8012e86:	6838      	ldr	r0, [r7, #0]
 8012e88:	f7f9 fcb8 	bl	800c7fc <osSemaphoreRelease>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8012e8c:	a924      	add	r1, sp, #144	@ 0x90
 8012e8e:	4628      	mov	r0, r5
 8012e90:	f7fc fe2c 	bl	800faec <_ZN14MessageElementC1ERKS_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012e94:	2300      	movs	r3, #0
 8012e96:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8012e9a:	930c      	str	r3, [sp, #48]	@ 0x30
	if (not element.element_register.isArray) {
 8012e9c:	f89d 30ab 	ldrb.w	r3, [sp, #171]	@ 0xab
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d16d      	bne.n	8012f80 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x30e>
		vector = std::vector<T>{*data};
 8012ea4:	f89d 3018 	ldrb.w	r3, [sp, #24]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012ea8:	2001      	movs	r0, #1
 8012eaa:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8012eae:	f7fb fee8 	bl	800ec82 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 8012eb2:	f10d 0135 	add.w	r1, sp, #53	@ 0x35
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012eb6:	1c43      	adds	r3, r0, #1
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012eb8:	4602      	mov	r2, r0
 8012eba:	9010      	str	r0, [sp, #64]	@ 0x40
 8012ebc:	a80d      	add	r0, sp, #52	@ 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012ebe:	9312      	str	r3, [sp, #72]	@ 0x48
 8012ec0:	f7ff fd08 	bl	80128d4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
		vector = std::vector<T>(data, data + element.element_register.length);
 8012ec4:	a910      	add	r1, sp, #64	@ 0x40
	  this->_M_impl._M_finish =
 8012ec6:	9011      	str	r0, [sp, #68]	@ 0x44
 8012ec8:	a80a      	add	r0, sp, #40	@ 0x28
 8012eca:	f7fc fcb4 	bl	800f836 <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>
      }
 8012ece:	a810      	add	r0, sp, #64	@ 0x40
 8012ed0:	f7fc fca7 	bl	800f822 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8012ed4:	a82d      	add	r0, sp, #180	@ 0xb4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012ed6:	2400      	movs	r4, #0
      }
 8012ed8:	f7ed fe96 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	data = BuildVector<T>(register_read_vector_cast);
 8012edc:	a90a      	add	r1, sp, #40	@ 0x28
 8012ede:	a810      	add	r0, sp, #64	@ 0x40
 8012ee0:	f7ff fd04 	bl	80128ec <_ZNSt6vectorIaSaIaEEC1ERKS1_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012ee4:	940f      	str	r4, [sp, #60]	@ 0x3c
      : _M_current(__i) { }
 8012ee6:	e9dd 7910 	ldrd	r7, r9, [sp, #64]	@ 0x40
 8012eea:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
    for (T input : inputs) {
 8012eee:	45b9      	cmp	r9, r7
 8012ef0:	d16f      	bne.n	8012fd2 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x360>
	data = BuildVector<T>(register_read_vector_cast);
 8012ef2:	a90d      	add	r1, sp, #52	@ 0x34
 8012ef4:	a807      	add	r0, sp, #28
 8012ef6:	f7fc f982 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8012efa:	a80d      	add	r0, sp, #52	@ 0x34
 8012efc:	f7ed fe84 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012f00:	a810      	add	r0, sp, #64	@ 0x40
 8012f02:	f7fc fc8e 	bl	800f822 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8012f06:	a80a      	add	r0, sp, #40	@ 0x28
 8012f08:	f7fc fc8b 	bl	800f822 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8012f0c:	e71f      	b.n	8012d4e <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xdc>
				*callback_output = output;
 8012f0e:	2200      	movs	r2, #0
 8012f10:	ab06      	add	r3, sp, #24
 8012f12:	6013      	str	r3, [r2, #0]
			if (callbacks.read != NULL) {
 8012f14:	2e00      	cmp	r6, #0
 8012f16:	d098      	beq.n	8012e4a <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x1d8>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 8012f18:	f10d 031a 	add.w	r3, sp, #26
 8012f1c:	4659      	mov	r1, fp
 8012f1e:	9805      	ldr	r0, [sp, #20]
 8012f20:	47b0      	blx	r6
 8012f22:	f88d 00a8 	strb.w	r0, [sp, #168]	@ 0xa8
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8012f26:	7963      	ldrb	r3, [r4, #5]
 8012f28:	b143      	cbz	r3, 8012f3c <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2ca>
 8012f2a:	88e3      	ldrh	r3, [r4, #6]
 8012f2c:	b10b      	cbz	r3, 8012f32 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2c0>
					*length = 1;
 8012f2e:	f8ad 301a 	strh.w	r3, [sp, #26]
					for (uint16_t index = 0; index < *length; index++) {
 8012f32:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8012f36:	a906      	add	r1, sp, #24
 8012f38:	2300      	movs	r3, #0
 8012f3a:	e007      	b.n	8012f4c <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2da>
					*length = 1;
 8012f3c:	2301      	movs	r3, #1
 8012f3e:	e7f6      	b.n	8012f2e <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2bc>
						output[index] = (*callback_output )[index];
 8012f40:	2200      	movs	r2, #0
 8012f42:	6812      	ldr	r2, [r2, #0]
 8012f44:	5cd2      	ldrb	r2, [r2, r3]
 8012f46:	3301      	adds	r3, #1
 8012f48:	f801 2b01 	strb.w	r2, [r1], #1
					for (uint16_t index = 0; index < *length; index++) {
 8012f4c:	b29a      	uxth	r2, r3
 8012f4e:	4290      	cmp	r0, r2
 8012f50:	d8f6      	bhi.n	8012f40 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2ce>
 8012f52:	e77a      	b.n	8012e4a <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x1d8>
						output[index] = (*register_vector)[index];
 8012f54:	f8d9 0000 	ldr.w	r0, [r9]
 8012f58:	5640      	ldrsb	r0, [r0, r1]
 8012f5a:	3101      	adds	r1, #1
 8012f5c:	f802 0b01 	strb.w	r0, [r2], #1
					for (uint16_t index = 0; index < *length; index++) {
 8012f60:	e789      	b.n	8012e76 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x204>
				*length = target_register->register_info.length;
 8012f62:	f8ad 101a 	strh.w	r1, [sp, #26]
 8012f66:	aa06      	add	r2, sp, #24
 8012f68:	4449      	add	r1, r9
 8012f6a:	4648      	mov	r0, r9
 8012f6c:	f7ff fcb2 	bl	80128d4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8012f70:	e784      	b.n	8012e7c <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20a>
				*length = 1;
 8012f72:	f8ad 301a 	strh.w	r3, [sp, #26]
					*output = *callbacks.pointer;
 8012f76:	f999 3000 	ldrsb.w	r3, [r9]
 8012f7a:	f88d 3018 	strb.w	r3, [sp, #24]
 8012f7e:	e77d      	b.n	8012e7c <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20a>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8012f80:	f8bd 40ac 	ldrh.w	r4, [sp, #172]	@ 0xac
 8012f84:	b154      	cbz	r4, 8012f9c <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x32a>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012f86:	4620      	mov	r0, r4
 8012f88:	f7fb fe7b 	bl	800ec82 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012f8c:	1903      	adds	r3, r0, r4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012f8e:	4602      	mov	r2, r0
 8012f90:	9010      	str	r0, [sp, #64]	@ 0x40
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012f92:	9312      	str	r3, [sp, #72]	@ 0x48
			      _Category>::__copy_m(__first, __last, __result);
 8012f94:	ab06      	add	r3, sp, #24
 8012f96:	1919      	adds	r1, r3, r4
 8012f98:	4618      	mov	r0, r3
 8012f9a:	e791      	b.n	8012ec0 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x24e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012f9c:	e9dd 9b06 	ldrd	r9, fp, [sp, #24]
	  if (__xlen > capacity())
 8012fa0:	ebbb 0709 	subs.w	r7, fp, r9
 8012fa4:	d00f      	beq.n	8012fc6 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x354>
	  pointer __result = this->_M_allocate(__n);
 8012fa6:	4638      	mov	r0, r7
 8012fa8:	f7fb fe6b 	bl	800ec82 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 8012fac:	4604      	mov	r4, r0
 8012fae:	4602      	mov	r2, r0
 8012fb0:	4659      	mov	r1, fp
 8012fb2:	4648      	mov	r0, r9
 8012fb4:	f7ff fc8e 	bl	80128d4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 8012fb8:	940a      	str	r4, [sp, #40]	@ 0x28
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8012fba:	443c      	add	r4, r7
 8012fbc:	940c      	str	r4, [sp, #48]	@ 0x30
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8012fbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012fc0:	443b      	add	r3, r7
 8012fc2:	930b      	str	r3, [sp, #44]	@ 0x2c
      return *this;
 8012fc4:	e786      	b.n	8012ed4 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x262>
 8012fc6:	463a      	mov	r2, r7
 8012fc8:	4659      	mov	r1, fp
 8012fca:	4648      	mov	r0, r9
 8012fcc:	f7ff fc82 	bl	80128d4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8012fd0:	e7f5      	b.n	8012fbe <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x34c>
    for (T input : inputs) {
 8012fd2:	f917 3b01 	ldrsb.w	r3, [r7], #1
      { emplace_back(std::move(__x)); }
 8012fd6:	f10d 0119 	add.w	r1, sp, #25
 8012fda:	4628      	mov	r0, r5
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012fdc:	942c      	str	r4, [sp, #176]	@ 0xb0
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8012fde:	f88d 3019 	strb.w	r3, [sp, #25]
 8012fe2:	e9cd 442a 	strd	r4, r4, [sp, #168]	@ 0xa8
      { emplace_back(std::move(__x)); }
 8012fe6:	f7fc fc55 	bl	800f894 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
        data.insert(data.end(), single.begin(), single.end());
 8012fea:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012fec:	a80d      	add	r0, sp, #52	@ 0x34
 8012fee:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8012ff2:	f7fe fa5f 	bl	80114b4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 8012ff6:	4628      	mov	r0, r5
 8012ff8:	f7ed fe06 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8012ffc:	e777      	b.n	8012eee <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x27c>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8012ffe:	2400      	movs	r4, #0
 8013000:	e6d5      	b.n	8012dae <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x13c>

08013002 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8013002:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013004:	461c      	mov	r4, r3
 8013006:	b08f      	sub	sp, #60	@ 0x3c
	if (not element.ack && element.command) {
 8013008:	799b      	ldrb	r3, [r3, #6]
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 801300a:	4605      	mov	r5, r0
 801300c:	4617      	mov	r7, r2
 801300e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
	if (not element.ack && element.command) {
 8013012:	b9cb      	cbnz	r3, 8013048 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x46>
 8013014:	79e3      	ldrb	r3, [r4, #7]
		return ProcessCommand<T>(message, response, element, start_index);
 8013016:	a803      	add	r0, sp, #12
	if (not element.ack && element.command) {
 8013018:	b323      	cbz	r3, 8013064 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x62>
		return ProcessCommand<T>(message, response, element, start_index);
 801301a:	f7fc fd7a 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 801301e:	4621      	mov	r1, r4
 8013020:	a808      	add	r0, sp, #32
 8013022:	f7fc fd63 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8013026:	ab08      	add	r3, sp, #32
 8013028:	463a      	mov	r2, r7
 801302a:	a903      	add	r1, sp, #12
 801302c:	4628      	mov	r0, r5
 801302e:	9600      	str	r6, [sp, #0]
 8013030:	f7ff fe1f 	bl	8012c72 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt>
		return ProcessSubscriber<T>(message, element, start_index);
 8013034:	4604      	mov	r4, r0
 8013036:	a80b      	add	r0, sp, #44	@ 0x2c
 8013038:	f7ed fde6 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801303c:	a804      	add	r0, sp, #16
 801303e:	f7ed fde3 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8013042:	4620      	mov	r0, r4
 8013044:	b00f      	add	sp, #60	@ 0x3c
 8013046:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ProcessService<T>(message, element, start_index);
 8013048:	a803      	add	r0, sp, #12
 801304a:	f7fc fd62 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 801304e:	4621      	mov	r1, r4
 8013050:	a808      	add	r0, sp, #32
 8013052:	f7fc fd4b 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8013056:	4633      	mov	r3, r6
 8013058:	aa08      	add	r2, sp, #32
 801305a:	a903      	add	r1, sp, #12
 801305c:	4628      	mov	r0, r5
 801305e:	f7fd fbf4 	bl	801084a <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt>
 8013062:	e7e7      	b.n	8013034 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x32>
		return ProcessSubscriber<T>(message, element, start_index);
 8013064:	f7fc fd55 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 8013068:	4621      	mov	r1, r4
 801306a:	a808      	add	r0, sp, #32
 801306c:	f7fc fd3e 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8013070:	4633      	mov	r3, r6
 8013072:	aa08      	add	r2, sp, #32
 8013074:	a903      	add	r1, sp, #12
 8013076:	4628      	mov	r0, r5
 8013078:	f7fd fb65 	bl	8010746 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt>
 801307c:	e7da      	b.n	8013034 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x32>

0801307e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_>:
 801307e:	4603      	mov	r3, r0
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8013080:	b510      	push	{r4, lr}
	  if (__n > 0)
 8013082:	b179      	cbz	r1, 80130a4 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_+0x26>
 8013084:	2200      	movs	r2, #0
      if (__n <= 0)
 8013086:	1e4c      	subs	r4, r1, #1
 8013088:	f843 2b04 	str.w	r2, [r3], #4
 801308c:	d00a      	beq.n	80130a4 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_+0x26>
      std::__fill_a(__first, __first + __n, __value);
 801308e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	*__first = __tmp;
 8013092:	2100      	movs	r1, #0
 8013094:	1a24      	subs	r4, r4, r0
 8013096:	4618      	mov	r0, r3
 8013098:	3c04      	subs	r4, #4
 801309a:	4622      	mov	r2, r4
 801309c:	f009 f90c 	bl	801c2b8 <memset>
 80130a0:	4603      	mov	r3, r0
 80130a2:	4423      	add	r3, r4
	}
 80130a4:	4618      	mov	r0, r3
 80130a6:	bd10      	pop	{r4, pc}

080130a8 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 80130a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130ac:	4604      	mov	r4, r0
      if (__n != 0)
 80130ae:	460e      	mov	r6, r1
 80130b0:	b171      	cbz	r1, 80130d0 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x28>
					 - this->_M_impl._M_finish);
 80130b2:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80130b4:	e9d0 8200 	ldrd	r8, r2, [r0]
 80130b8:	1a9b      	subs	r3, r3, r2
 80130ba:	eba2 0a08 	sub.w	sl, r2, r8
	  if (__navail >= __n)
 80130be:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 80130c2:	ea4f 07aa 	mov.w	r7, sl, asr #2
 80130c6:	d805      	bhi.n	80130d4 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x2c>
	__uninit_default_n(__first, __n);
 80130c8:	4610      	mov	r0, r2
 80130ca:	f7ff ffd8 	bl	801307e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_>
	      this->_M_impl._M_finish =
 80130ce:	6060      	str	r0, [r4, #4]
    }
 80130d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		_M_check_len(__n, "vector::_M_default_append");
 80130d4:	4a13      	ldr	r2, [pc, #76]	@ (8013124 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x7c>)
 80130d6:	f7fc fcc5 	bl	800fa64 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 80130da:	4681      	mov	r9, r0
	      pointer __new_start(this->_M_allocate(__len));
 80130dc:	f7fb fdbf 	bl	800ec5e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 80130e0:	4631      	mov	r1, r6
 80130e2:	4605      	mov	r5, r0
 80130e4:	4450      	add	r0, sl
 80130e6:	f7ff ffca 	bl	801307e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_>
      if (__count > 0)
 80130ea:	f1ba 0f00 	cmp.w	sl, #0
 80130ee:	d00c      	beq.n	801310a <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x62>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80130f0:	4652      	mov	r2, sl
 80130f2:	4641      	mov	r1, r8
 80130f4:	4628      	mov	r0, r5
 80130f6:	f009 f8c5 	bl	801c284 <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 80130fa:	68a1      	ldr	r1, [r4, #8]
 80130fc:	4640      	mov	r0, r8
 80130fe:	eba1 0108 	sub.w	r1, r1, r8
 8013102:	1089      	asrs	r1, r1, #2
 8013104:	f7fb fda8 	bl	800ec58 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
 8013108:	e002      	b.n	8013110 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x68>
	if (__p)
 801310a:	f1b8 0f00 	cmp.w	r8, #0
 801310e:	d1f4      	bne.n	80130fa <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x52>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8013110:	4437      	add	r7, r6
	      this->_M_impl._M_start = __new_start;
 8013112:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8013114:	eb05 0787 	add.w	r7, r5, r7, lsl #2
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8013118:	eb05 0589 	add.w	r5, r5, r9, lsl #2
	      this->_M_impl._M_finish = __new_start + __size + __n;
 801311c:	6067      	str	r7, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 801311e:	60a5      	str	r5, [r4, #8]
    }
 8013120:	e7d6      	b.n	80130d0 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x28>
 8013122:	bf00      	nop
 8013124:	0801c5ac 	.word	0x0801c5ac

08013128 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
 8013128:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801312a:	4613      	mov	r3, r2
 801312c:	b510      	push	{r4, lr}
	  const ptrdiff_t _Num = __last - __first;
 801312e:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
 8013132:	d005      	beq.n	8013140 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8013134:	4601      	mov	r1, r0
 8013136:	4622      	mov	r2, r4
 8013138:	4618      	mov	r0, r3
 801313a:	f009 f8a3 	bl	801c284 <memmove>
 801313e:	4603      	mov	r3, r0
	}
 8013140:	1918      	adds	r0, r3, r4
 8013142:	bd10      	pop	{r4, pc}

08013144 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8013144:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013146:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 801314a:	4604      	mov	r4, r0
 801314c:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801314e:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013150:	2300      	movs	r3, #0
 8013152:	e9c0 3300 	strd	r3, r3, [r0]
 8013156:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8013158:	10b0      	asrs	r0, r6, #2
 801315a:	f7fb fd80 	bl	800ec5e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801315e:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8013160:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013162:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8013164:	e9c4 0000 	strd	r0, r0, [r4]
			      _Category>::__copy_m(__first, __last, __result);
 8013168:	e9d5 0100 	ldrd	r0, r1, [r5]
 801316c:	f7ff ffdc 	bl	8013128 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 8013170:	6060      	str	r0, [r4, #4]
      }
 8013172:	4620      	mov	r0, r4
 8013174:	bd70      	pop	{r4, r5, r6, pc}

08013176 <_ZN9Registers13WriteRegisterIfEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8013176:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801317a:	b085      	sub	sp, #20
 801317c:	4606      	mov	r6, r0
 801317e:	4688      	mov	r8, r1
 8013180:	461f      	mov	r7, r3
 8013182:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8013186:	f04f 31ff 	mov.w	r1, #4294967295
 801318a:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 801318c:	4615      	mov	r5, r2
 801318e:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8013190:	f7f9 fb00 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8013194:	f10d 020f 	add.w	r2, sp, #15
 8013198:	4641      	mov	r1, r8
 801319a:	4630      	mov	r0, r6
 801319c:	f005 f8bd 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80131a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80131a4:	4604      	mov	r4, r0
	if (!success) {
 80131a6:	b933      	cbnz	r3, 80131b6 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x40>
		osSemaphoreRelease(RegistersSemaphore);
 80131a8:	6830      	ldr	r0, [r6, #0]
 80131aa:	f7f9 fb27 	bl	800c7fc <osSemaphoreRelease>
		return false;
 80131ae:	2000      	movs	r0, #0
}
 80131b0:	b005      	add	sp, #20
 80131b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 80131b6:	f10d 000f 	add.w	r0, sp, #15
 80131ba:	f7fb fd7f 	bl	800ecbc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 80131be:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d0f0      	beq.n	80131a8 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
	if (target_register->register_info.type != registered_type) {
 80131c6:	7923      	ldrb	r3, [r4, #4]
 80131c8:	4283      	cmp	r3, r0
 80131ca:	d1ed      	bne.n	80131a8 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 80131cc:	3304      	adds	r3, #4
 80131ce:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80131d2:	2800      	cmp	r0, #0
 80131d4:	d0e8      	beq.n	80131a8 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
	if (target_register->access.write) {
 80131d6:	7a23      	ldrb	r3, [r4, #8]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d0e5      	beq.n	80131a8 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
		success = false;
 80131dc:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80131de:	8961      	ldrh	r1, [r4, #10]
		success = false;
 80131e0:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80131e4:	f7fc fbf8 	bl	800f9d8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80131e8:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80131ea:	f8d0 9008 	ldr.w	r9, [r0, #8]
 80131ee:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80131f2:	b133      	cbz	r3, 8013202 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x8c>
 80131f4:	68e3      	ldr	r3, [r4, #12]
 80131f6:	b123      	cbz	r3, 8013202 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x8c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 80131f8:	f04f 31ff 	mov.w	r1, #4294967295
 80131fc:	6818      	ldr	r0, [r3, #0]
 80131fe:	f7f9 fac9 	bl	800c794 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 8013202:	7823      	ldrb	r3, [r4, #0]
 8013204:	b1eb      	cbz	r3, 8013242 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xcc>
			success = true;
 8013206:	2301      	movs	r3, #1
 8013208:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801320c:	7963      	ldrb	r3, [r4, #5]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d04d      	beq.n	80132ae <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x138>
 8013212:	88e1      	ldrh	r1, [r4, #6]
 8013214:	2900      	cmp	r1, #0
 8013216:	d143      	bne.n	80132a0 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x12a>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8013218:	e9db 3100 	ldrd	r3, r1, [fp]
 801321c:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 801321e:	bf18      	it	ne
 8013220:	f8cb 3004 	strne.w	r3, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013224:	f8db 0004 	ldr.w	r0, [fp, #4]
 8013228:	1ac1      	subs	r1, r0, r3
 801322a:	1089      	asrs	r1, r1, #2
	if (__new_size > size())
 801322c:	428f      	cmp	r7, r1
 801322e:	d925      	bls.n	801327c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x106>
	  _M_default_append(__new_size - size());
 8013230:	1a79      	subs	r1, r7, r1
 8013232:	4658      	mov	r0, fp
 8013234:	f7ff ff38 	bl	80130a8 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>
 8013238:	4628      	mov	r0, r5
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 801323a:	2300      	movs	r3, #0
				for (uint16_t index = 0; index < length; index++) {
 801323c:	b299      	uxth	r1, r3
 801323e:	42b9      	cmp	r1, r7
 8013240:	d324      	bcc.n	801328c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x116>
		if (target_register->mode.callbacks) {
 8013242:	7863      	ldrb	r3, [r4, #1]
 8013244:	b16b      	cbz	r3, 8013262 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xec>
			if (callbacks.write != NULL) {
 8013246:	f1b9 0f00 	cmp.w	r9, #0
 801324a:	d00a      	beq.n	8013262 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xec>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801324c:	7963      	ldrb	r3, [r4, #5]
 801324e:	b393      	cbz	r3, 80132b6 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x140>
 8013250:	88e3      	ldrh	r3, [r4, #6]
 8013252:	b903      	cbnz	r3, 8013256 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xe0>
					success = callbacks.write(callbacks.context, ID, value, length);
 8013254:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 8013256:	462a      	mov	r2, r5
 8013258:	4641      	mov	r1, r8
 801325a:	4650      	mov	r0, sl
 801325c:	47c8      	blx	r9
 801325e:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8013262:	9b01      	ldr	r3, [sp, #4]
 8013264:	b123      	cbz	r3, 8013270 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xfa>
 8013266:	68e3      	ldr	r3, [r4, #12]
 8013268:	b113      	cbz	r3, 8013270 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xfa>
			osSemaphoreRelease(*(target_register->register_semaphore));
 801326a:	6818      	ldr	r0, [r3, #0]
 801326c:	f7f9 fac6 	bl	800c7fc <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 8013270:	6830      	ldr	r0, [r6, #0]
 8013272:	f7f9 fac3 	bl	800c7fc <osSemaphoreRelease>
		return success;
 8013276:	f89d 000f 	ldrb.w	r0, [sp, #15]
 801327a:	e799      	b.n	80131b0 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x3a>
	else if (__new_size < size())
 801327c:	d2dc      	bcs.n	8013238 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc2>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 801327e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8013282:	4298      	cmp	r0, r3
 8013284:	d0d8      	beq.n	8013238 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc2>
	    this->_M_impl._M_finish = __pos;
 8013286:	f8cb 3004 	str.w	r3, [fp, #4]
 801328a:	e7d5      	b.n	8013238 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc2>
					(*register_vector)[index] = value[index];
 801328c:	f8db 1000 	ldr.w	r1, [fp]
 8013290:	f850 cb04 	ldr.w	ip, [r0], #4
 8013294:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013298:	3301      	adds	r3, #1
 801329a:	f8c1 c000 	str.w	ip, [r1]
				for (uint16_t index = 0; index < length; index++) {
 801329e:	e7cd      	b.n	801323c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc6>
 80132a0:	465a      	mov	r2, fp
 80132a2:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80132a6:	4628      	mov	r0, r5
 80132a8:	f7ff ff3e 	bl	8013128 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80132ac:	e7c9      	b.n	8013242 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xcc>
				*(callbacks.pointer) = *value;
 80132ae:	682b      	ldr	r3, [r5, #0]
 80132b0:	f8cb 3000 	str.w	r3, [fp]
 80132b4:	e7c5      	b.n	8013242 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xcc>
					success = callbacks.write(callbacks.context, ID, value, 1);
 80132b6:	2301      	movs	r3, #1
 80132b8:	e7cd      	b.n	8013256 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xe0>

080132ba <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 80132ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132be:	b091      	sub	sp, #68	@ 0x44
 80132c0:	4605      	mov	r5, r0
 80132c2:	4691      	mov	r9, r2
 80132c4:	4608      	mov	r0, r1
 80132c6:	af02      	add	r7, sp, #8
 80132c8:	469a      	mov	sl, r3
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 80132ca:	3104      	adds	r1, #4
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 80132cc:	f8d7 b060 	ldr.w	fp, [r7, #96]	@ 0x60
 80132d0:	f107 060b 	add.w	r6, r7, #11
 80132d4:	f8b7 4064 	ldrh.w	r4, [r7, #100]	@ 0x64
	if (not element.element_register.isArray) {
 80132d8:	f89b 8003 	ldrb.w	r8, [fp, #3]
 80132dc:	f1b8 0f00 	cmp.w	r8, #0
 80132e0:	d174      	bne.n	80133cc <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x112>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 80132e2:	f107 0020 	add.w	r0, r7, #32
 80132e6:	f7ed fd89 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80132ea:	4632      	mov	r2, r6
 80132ec:	4621      	mov	r1, r4
 80132ee:	f107 0020 	add.w	r0, r7, #32
 80132f2:	f7fb fe1f 	bl	800ef34 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 80132f6:	f107 0020 	add.w	r0, r7, #32
 80132fa:	ed87 0a05 	vstr	s0, [r7, #20]
 80132fe:	f7ed fc83 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8013302:	7afb      	ldrb	r3, [r7, #11]
 8013304:	b153      	cbz	r3, 801331c <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x62>
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 8013306:	2301      	movs	r3, #1
 8013308:	f8bb 1000 	ldrh.w	r1, [fp]
 801330c:	f107 0214 	add.w	r2, r7, #20
 8013310:	9300      	str	r3, [sp, #0]
 8013312:	4643      	mov	r3, r8
 8013314:	6868      	ldr	r0, [r5, #4]
 8013316:	f7ff ff2e 	bl	8013176 <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 801331a:	72f8      	strb	r0, [r7, #11]
		length_to_extract = 1;
 801331c:	f04f 0801 	mov.w	r8, #1
	if (success)
 8013320:	7af9      	ldrb	r1, [r7, #11]
		response_content.data = std::vector<uint8_t>{OK};
 8013322:	f10a 060c 	add.w	r6, sl, #12
 8013326:	f107 0314 	add.w	r3, r7, #20
 801332a:	f107 020c 	add.w	r2, r7, #12
	if (success)
 801332e:	2900      	cmp	r1, #0
 8013330:	f000 80cd 	beq.w	80134ce <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x214>
		response_content.data = std::vector<uint8_t>{OK};
 8013334:	2100      	movs	r1, #0
 8013336:	60fb      	str	r3, [r7, #12]
 8013338:	2301      	movs	r3, #1
 801333a:	7539      	strb	r1, [r7, #20]
 801333c:	613b      	str	r3, [r7, #16]
 801333e:	ca06      	ldmia	r2, {r1, r2}
		response_content.data = std::vector<uint8_t>{ERROR};
 8013340:	f107 0020 	add.w	r0, r7, #32
 8013344:	f7fe f848 	bl	80113d8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 8013348:	f107 0120 	add.w	r1, r7, #32
 801334c:	4630      	mov	r0, r6
 801334e:	f7fb ff56 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8013352:	f107 0020 	add.w	r0, r7, #32
 8013356:	f7ed fc57 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content)) {
 801335a:	4651      	mov	r1, sl
 801335c:	f107 0020 	add.w	r0, r7, #32
 8013360:	f7fc fbc4 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8013364:	f107 0220 	add.w	r2, r7, #32
 8013368:	4649      	mov	r1, r9
 801336a:	4628      	mov	r0, r5
 801336c:	f7fe f916 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8013370:	4606      	mov	r6, r0
 8013372:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8013376:	f7ed fc47 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801337a:	bb06      	cbnz	r6, 80133be <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x104>
		Send(*response);
 801337c:	4649      	mov	r1, r9
 801337e:	f107 0020 	add.w	r0, r7, #32
 8013382:	f7fc fbc6 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 8013386:	f107 0120 	add.w	r1, r7, #32
 801338a:	4628      	mov	r0, r5
 801338c:	f7fc fcb0 	bl	800fcf0 <_ZN13Communication4SendE13MessageHeader>
 8013390:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8013394:	f7ed fc38 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8013398:	f109 0004 	add.w	r0, r9, #4
 801339c:	f7fb ff46 	bl	800f22c <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 80133a0:	4651      	mov	r1, sl
 80133a2:	f107 0020 	add.w	r0, r7, #32
 80133a6:	f7fc fba1 	bl	800faec <_ZN14MessageElementC1ERKS_>
 80133aa:	f107 0220 	add.w	r2, r7, #32
 80133ae:	4649      	mov	r1, r9
 80133b0:	4628      	mov	r0, r5
 80133b2:	f7fe f8f3 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80133b6:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80133ba:	f7ed fc25 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return start_index + sizeof(T) * length_to_extract;
 80133be:	eb04 0088 	add.w	r0, r4, r8, lsl #2
}
 80133c2:	373c      	adds	r7, #60	@ 0x3c
 80133c4:	b280      	uxth	r0, r0
 80133c6:	46bd      	mov	sp, r7
 80133c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 80133cc:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 80133d0:	f1b8 0f00 	cmp.w	r8, #0
 80133d4:	d02a      	beq.n	801342c <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x172>
		T values[length_to_extract];
 80133d6:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80133da:	466a      	mov	r2, sp
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 80133dc:	f8c7 d000 	str.w	sp, [r7]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 80133e0:	f107 0020 	add.w	r0, r7, #32
		T values[length_to_extract];
 80133e4:	3307      	adds	r3, #7
 80133e6:	08db      	lsrs	r3, r3, #3
 80133e8:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 80133ec:	469d      	mov	sp, r3
 80133ee:	ab02      	add	r3, sp, #8
 80133f0:	607b      	str	r3, [r7, #4]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 80133f2:	f7ed fd03 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80133f6:	9600      	str	r6, [sp, #0]
 80133f8:	4643      	mov	r3, r8
 80133fa:	4622      	mov	r2, r4
 80133fc:	f107 0120 	add.w	r1, r7, #32
 8013400:	6878      	ldr	r0, [r7, #4]
 8013402:	f7fc ff1b 	bl	801023c <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8013406:	f107 0020 	add.w	r0, r7, #32
 801340a:	f7ed fbfd 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 801340e:	7afb      	ldrb	r3, [r7, #11]
 8013410:	b14b      	cbz	r3, 8013426 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x16c>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 8013412:	2301      	movs	r3, #1
 8013414:	f8bb 1000 	ldrh.w	r1, [fp]
 8013418:	9300      	str	r3, [sp, #0]
 801341a:	2300      	movs	r3, #0
 801341c:	687a      	ldr	r2, [r7, #4]
 801341e:	6868      	ldr	r0, [r5, #4]
 8013420:	f7ff fea9 	bl	8013176 <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 8013424:	72f8      	strb	r0, [r7, #11]
 8013426:	f8d7 d000 	ldr.w	sp, [r7]
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 801342a:	e779      	b.n	8013320 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x66>
		length_to_extract = message.payload[start_index];
 801342c:	6843      	ldr	r3, [r0, #4]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801342e:	f107 0020 	add.w	r0, r7, #32
		length_to_extract = message.payload[start_index];
 8013432:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8013436:	3401      	adds	r4, #1
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8013438:	f7ed fce0 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801343c:	f107 0120 	add.w	r1, r7, #32
		start_index++;
 8013440:	b2a4      	uxth	r4, r4
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8013442:	4643      	mov	r3, r8
 8013444:	f107 0014 	add.w	r0, r7, #20
 8013448:	9600      	str	r6, [sp, #0]
 801344a:	4622      	mov	r2, r4
 801344c:	f7fc fe98 	bl	8010180 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8013450:	f107 0020 	add.w	r0, r7, #32
 8013454:	f7ed fbd8 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8013458:	7afb      	ldrb	r3, [r7, #11]
 801345a:	b1fb      	cbz	r3, 801349c <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e2>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 801345c:	686e      	ldr	r6, [r5, #4]
 801345e:	f107 0114 	add.w	r1, r7, #20
 8013462:	f8bb b000 	ldrh.w	fp, [fp]
 8013466:	f107 0020 	add.w	r0, r7, #32
 801346a:	f7ff fe6b 	bl	8013144 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801346e:	f04f 31ff 	mov.w	r1, #4294967295
 8013472:	6830      	ldr	r0, [r6, #0]
 8013474:	f7f9 f98e 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8013478:	f107 020c 	add.w	r2, r7, #12
 801347c:	4659      	mov	r1, fp
 801347e:	4630      	mov	r0, r6
 8013480:	f004 ff4b 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8013484:	7b3a      	ldrb	r2, [r7, #12]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8013486:	4603      	mov	r3, r0
		osSemaphoreRelease(RegistersSemaphore);
 8013488:	6830      	ldr	r0, [r6, #0]
	if (!success) {
 801348a:	b962      	cbnz	r2, 80134a6 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ec>
		osSemaphoreRelease(RegistersSemaphore);
 801348c:	f7f9 f9b6 	bl	800c7fc <osSemaphoreRelease>
		return false;
 8013490:	2000      	movs	r0, #0
 8013492:	72f8      	strb	r0, [r7, #11]
 8013494:	f107 0020 	add.w	r0, r7, #32
 8013498:	f7ee feea 	bl	8002270 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 801349c:	f107 0014 	add.w	r0, r7, #20
 80134a0:	f7ee fee6 	bl	8002270 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80134a4:	e73c      	b.n	8013320 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x66>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 80134a6:	795a      	ldrb	r2, [r3, #5]
 80134a8:	2a00      	cmp	r2, #0
 80134aa:	d0ef      	beq.n	801348c <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d2>
 80134ac:	88db      	ldrh	r3, [r3, #6]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d1ec      	bne.n	801348c <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d2>
	osSemaphoreRelease(RegistersSemaphore);
 80134b2:	f7f9 f9a3 	bl	800c7fc <osSemaphoreRelease>
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 80134b6:	2101      	movs	r1, #1
 80134b8:	4630      	mov	r0, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80134ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80134be:	9100      	str	r1, [sp, #0]
 80134c0:	4659      	mov	r1, fp
 80134c2:	1a9b      	subs	r3, r3, r2
 80134c4:	f3c3 038f 	ubfx	r3, r3, #2, #16
 80134c8:	f7ff fe55 	bl	8013176 <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 80134cc:	e7e1      	b.n	8013492 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d8>
		response_content.data = std::vector<uint8_t>{ERROR};
 80134ce:	21ff      	movs	r1, #255	@ 0xff
 80134d0:	617a      	str	r2, [r7, #20]
 80134d2:	2201      	movs	r2, #1
 80134d4:	7339      	strb	r1, [r7, #12]
 80134d6:	61ba      	str	r2, [r7, #24]
 80134d8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80134dc:	e730      	b.n	8013340 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x86>

080134de <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 80134de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134e2:	468b      	mov	fp, r1
 80134e4:	b0b1      	sub	sp, #196	@ 0xc4
 80134e6:	4607      	mov	r7, r0
 80134e8:	4698      	mov	r8, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 80134ea:	2600      	movs	r6, #0
	response_content.ack = true;
 80134ec:	f04f 0a01 	mov.w	sl, #1
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 80134f0:	4615      	mov	r5, r2
 80134f2:	f8bd 90e8 	ldrh.w	r9, [sp, #232]	@ 0xe8
 80134f6:	961d      	str	r6, [sp, #116]	@ 0x74
 80134f8:	ac2a      	add	r4, sp, #168	@ 0xa8
	response_content.ack = true;
 80134fa:	f8ad a066 	strh.w	sl, [sp, #102]	@ 0x66
	response_content.element_register = element.element_register;
 80134fe:	e9d3 0100 	ldrd	r0, r1, [r3]
	response_content.access = element.access;
 8013502:	7a1b      	ldrb	r3, [r3, #8]
	response_content.element_register = element.element_register;
 8013504:	9018      	str	r0, [sp, #96]	@ 0x60
 8013506:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
	CommunicationLED(leds, message.interface);
 801350a:	6938      	ldr	r0, [r7, #16]
 801350c:	f89b 1000 	ldrb.w	r1, [fp]
	response_content.access = element.access;
 8013510:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 8013514:	e9cd 661b 	strd	r6, r6, [sp, #108]	@ 0x6c
	CommunicationLED(leds, message.interface);
 8013518:	f7fb fa79 	bl	800ea0e <_Z16CommunicationLEDP4LEDSh>
	if (element.access == WRITE) {
 801351c:	f898 3008 	ldrb.w	r3, [r8, #8]
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8013520:	4659      	mov	r1, fp
	if (element.access == WRITE) {
 8013522:	bb1b      	cbnz	r3, 801356c <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x8e>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8013524:	a81e      	add	r0, sp, #120	@ 0x78
 8013526:	f7fc faf4 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 801352a:	a918      	add	r1, sp, #96	@ 0x60
 801352c:	a824      	add	r0, sp, #144	@ 0x90
 801352e:	f7fc fadd 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8013532:	4641      	mov	r1, r8
 8013534:	4620      	mov	r0, r4
 8013536:	f7fc fad9 	bl	800faec <_ZN14MessageElementC1ERKS_>
 801353a:	ab24      	add	r3, sp, #144	@ 0x90
 801353c:	462a      	mov	r2, r5
 801353e:	a91e      	add	r1, sp, #120	@ 0x78
 8013540:	4638      	mov	r0, r7
 8013542:	e9cd 4900 	strd	r4, r9, [sp]
 8013546:	f7ff feb8 	bl	80132ba <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t>
 801354a:	4681      	mov	r9, r0
      }
 801354c:	a82d      	add	r0, sp, #180	@ 0xb4
 801354e:	f7ed fb5b 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013552:	a827      	add	r0, sp, #156	@ 0x9c
 8013554:	f7ed fb58 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013558:	a81f      	add	r0, sp, #124	@ 0x7c
 801355a:	f7ed fb55 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801355e:	a81b      	add	r0, sp, #108	@ 0x6c
 8013560:	f7ed fb52 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8013564:	4648      	mov	r0, r9
 8013566:	b031      	add	sp, #196	@ 0xc4
 8013568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ProcessRead<T>(message, response, response_content, element, start_index);
 801356c:	a813      	add	r0, sp, #76	@ 0x4c
 801356e:	f7fc fad0 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 8013572:	a918      	add	r1, sp, #96	@ 0x60
 8013574:	a81e      	add	r0, sp, #120	@ 0x78
 8013576:	f7fc fab9 	bl	800faec <_ZN14MessageElementC1ERKS_>
 801357a:	4641      	mov	r1, r8
 801357c:	a824      	add	r0, sp, #144	@ 0x90
 801357e:	f7fc fab5 	bl	800faec <_ZN14MessageElementC1ERKS_>
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 8013582:	f8cd a000 	str.w	sl, [sp]
 8013586:	f10d 0316 	add.w	r3, sp, #22
 801358a:	aa06      	add	r2, sp, #24
 801358c:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 8013590:	6878      	ldr	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013592:	9609      	str	r6, [sp, #36]	@ 0x24
 8013594:	e9cd 6607 	strd	r6, r6, [sp, #28]
 8013598:	f7fb faa4 	bl	800eae4 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb>
	if (not *success)
 801359c:	4680      	mov	r8, r0
 801359e:	2800      	cmp	r0, #0
 80135a0:	d040      	beq.n	8013624 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x146>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 80135a2:	a924      	add	r1, sp, #144	@ 0x90
 80135a4:	4620      	mov	r0, r4
 80135a6:	f7fc faa1 	bl	800faec <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 80135aa:	f89d 30ab 	ldrb.w	r3, [sp, #171]	@ 0xab
 80135ae:	960c      	str	r6, [sp, #48]	@ 0x30
 80135b0:	e9cd 660a 	strd	r6, r6, [sp, #40]	@ 0x28
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	f040 808b 	bne.w	80136d0 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x1f2>
		vector = std::vector<T>{*data};
 80135ba:	9b06      	ldr	r3, [sp, #24]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80135bc:	4650      	mov	r0, sl
 80135be:	930d      	str	r3, [sp, #52]	@ 0x34
 80135c0:	f7fb fb4d 	bl	800ec5e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 80135c4:	a90e      	add	r1, sp, #56	@ 0x38
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80135c6:	1d03      	adds	r3, r0, #4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80135c8:	4602      	mov	r2, r0
 80135ca:	9010      	str	r0, [sp, #64]	@ 0x40
 80135cc:	a80d      	add	r0, sp, #52	@ 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80135ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80135d0:	f7ff fdaa 	bl	8013128 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
		vector = std::vector<T>(data, data + element.element_register.length);
 80135d4:	a910      	add	r1, sp, #64	@ 0x40
	  this->_M_impl._M_finish =
 80135d6:	9011      	str	r0, [sp, #68]	@ 0x44
 80135d8:	a80a      	add	r0, sp, #40	@ 0x28
 80135da:	f7fc f943 	bl	800f864 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>
      }
 80135de:	a810      	add	r0, sp, #64	@ 0x40
 80135e0:	f7ee fe46 	bl	8002270 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80135e4:	a82d      	add	r0, sp, #180	@ 0xb4
	: _M_start(), _M_finish(), _M_end_of_storage()
 80135e6:	2600      	movs	r6, #0
      }
 80135e8:	f7ed fb0e 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	data = BuildVector<T>(register_read_vector_cast);
 80135ec:	a90a      	add	r1, sp, #40	@ 0x28
 80135ee:	a810      	add	r0, sp, #64	@ 0x40
 80135f0:	f7ff fda8 	bl	8013144 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
      : _M_current(__i) { }
 80135f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80135f6:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
	: _M_start(), _M_finish(), _M_end_of_storage()
 80135fa:	960f      	str	r6, [sp, #60]	@ 0x3c
 80135fc:	9302      	str	r3, [sp, #8]
 80135fe:	e9cd 660d 	strd	r6, r6, [sp, #52]	@ 0x34
    for (T input : inputs) {
 8013602:	9b02      	ldr	r3, [sp, #8]
 8013604:	4553      	cmp	r3, sl
 8013606:	f040 808d 	bne.w	8013724 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x246>
	data = BuildVector<T>(register_read_vector_cast);
 801360a:	a90d      	add	r1, sp, #52	@ 0x34
 801360c:	a807      	add	r0, sp, #28
 801360e:	f7fb fdf6 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8013612:	a80d      	add	r0, sp, #52	@ 0x34
 8013614:	f7ed faf8 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013618:	a810      	add	r0, sp, #64	@ 0x40
 801361a:	f7ee fe29 	bl	8002270 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 801361e:	a80a      	add	r0, sp, #40	@ 0x28
 8013620:	f7ee fe26 	bl	8002270 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	response_content.data = ReadElement<T>(&element, &success);
 8013624:	a821      	add	r0, sp, #132	@ 0x84
 8013626:	a907      	add	r1, sp, #28
 8013628:	f7fb fde9 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 801362c:	a807      	add	r0, sp, #28
 801362e:	f7ed faeb 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not success) {
 8013632:	f1b8 0f00 	cmp.w	r8, #0
 8013636:	d114      	bne.n	8013662 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x184>
		response_content.data = std::vector<uint8_t>{ERROR};
 8013638:	22ff      	movs	r2, #255	@ 0xff
		response_content.command = true; // this is an error flag for a read ack
 801363a:	2301      	movs	r3, #1
		response_content.data = std::vector<uint8_t>{ERROR};
 801363c:	4620      	mov	r0, r4
 801363e:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 8013642:	aa0d      	add	r2, sp, #52	@ 0x34
		response_content.command = true; // this is an error flag for a read ack
 8013644:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
		response_content.data = std::vector<uint8_t>{ERROR};
 8013648:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801364c:	461a      	mov	r2, r3
 801364e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8013650:	f7fd fec2 	bl	80113d8 <_ZNSt6vectorIhSaIhEEC2ESt16initializer_listIhERKS0_.constprop.0.isra.0>
 8013654:	a821      	add	r0, sp, #132	@ 0x84
 8013656:	4621      	mov	r1, r4
 8013658:	f7fb fdd1 	bl	800f1fe <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 801365c:	4620      	mov	r0, r4
 801365e:	f7ed fad3 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8013662:	a91e      	add	r1, sp, #120	@ 0x78
 8013664:	4620      	mov	r0, r4
 8013666:	f7fc fa41 	bl	800faec <_ZN14MessageElementC1ERKS_>
 801366a:	4622      	mov	r2, r4
 801366c:	4629      	mov	r1, r5
 801366e:	4638      	mov	r0, r7
 8013670:	f7fd ff94 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8013674:	2800      	cmp	r0, #0
 8013676:	f040 8081 	bne.w	801377c <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x29e>
 801367a:	e9d5 3601 	ldrd	r3, r6, [r5, #4]
 801367e:	1af6      	subs	r6, r6, r3
 8013680:	bf18      	it	ne
 8013682:	2601      	movne	r6, #1
 8013684:	a82d      	add	r0, sp, #180	@ 0xb4
 8013686:	f7ed fabf 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801368a:	b1ce      	cbz	r6, 80136c0 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x1e2>
		Send(*response);
 801368c:	4629      	mov	r1, r5
 801368e:	4620      	mov	r0, r4
 8013690:	f7fc fa3f 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 8013694:	4621      	mov	r1, r4
 8013696:	4638      	mov	r0, r7
 8013698:	f7fc fb2a 	bl	800fcf0 <_ZN13Communication4SendE13MessageHeader>
 801369c:	a82b      	add	r0, sp, #172	@ 0xac
 801369e:	f7ed fab3 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 80136a2:	1d28      	adds	r0, r5, #4
 80136a4:	f7fb fdc2 	bl	800f22c <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 80136a8:	a91e      	add	r1, sp, #120	@ 0x78
 80136aa:	4620      	mov	r0, r4
 80136ac:	f7fc fa1e 	bl	800faec <_ZN14MessageElementC1ERKS_>
 80136b0:	4622      	mov	r2, r4
 80136b2:	4629      	mov	r1, r5
 80136b4:	4638      	mov	r0, r7
 80136b6:	f7fd ff71 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80136ba:	a82d      	add	r0, sp, #180	@ 0xb4
 80136bc:	f7ed faa4 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80136c0:	a827      	add	r0, sp, #156	@ 0x9c
 80136c2:	f7ed faa1 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80136c6:	a821      	add	r0, sp, #132	@ 0x84
 80136c8:	f7ed fa9e 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80136cc:	a814      	add	r0, sp, #80	@ 0x50
 80136ce:	e744      	b.n	801355a <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x7c>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 80136d0:	f8bd 00ac 	ldrh.w	r0, [sp, #172]	@ 0xac
 80136d4:	b150      	cbz	r0, 80136ec <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x20e>
		vector = std::vector<T>(data, data + element.element_register.length);
 80136d6:	0086      	lsls	r6, r0, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80136d8:	f7fb fac1 	bl	800ec5e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 80136dc:	4602      	mov	r2, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80136de:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80136e0:	9010      	str	r0, [sp, #64]	@ 0x40
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80136e2:	9312      	str	r3, [sp, #72]	@ 0x48
 80136e4:	ab06      	add	r3, sp, #24
 80136e6:	1999      	adds	r1, r3, r6
 80136e8:	4618      	mov	r0, r3
 80136ea:	e771      	b.n	80135d0 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0xf2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80136ec:	e9dd b106 	ldrd	fp, r1, [sp, #24]
	  if (__xlen > capacity())
 80136f0:	ebb1 0a0b 	subs.w	sl, r1, fp
 80136f4:	d011      	beq.n	801371a <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x23c>
	  pointer __result = this->_M_allocate(__n);
 80136f6:	ea4f 00aa 	mov.w	r0, sl, asr #2
 80136fa:	9102      	str	r1, [sp, #8]
 80136fc:	f7fb faaf 	bl	800ec5e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 8013700:	4606      	mov	r6, r0
 8013702:	4602      	mov	r2, r0
 8013704:	9902      	ldr	r1, [sp, #8]
 8013706:	4658      	mov	r0, fp
 8013708:	f7ff fd0e 	bl	8013128 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 801370c:	960a      	str	r6, [sp, #40]	@ 0x28
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 801370e:	4456      	add	r6, sl
 8013710:	960c      	str	r6, [sp, #48]	@ 0x30
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8013712:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013714:	4453      	add	r3, sl
 8013716:	930b      	str	r3, [sp, #44]	@ 0x2c
      return *this;
 8013718:	e764      	b.n	80135e4 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x106>
 801371a:	4652      	mov	r2, sl
 801371c:	4658      	mov	r0, fp
 801371e:	f7ff fd03 	bl	8013128 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8013722:	e7f6      	b.n	8013712 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x234>
    for (T input : inputs) {
 8013724:	f85a 2b04 	ldr.w	r2, [sl], #4
    std::memcpy(&reinterpreted_input, &input, sizeof(T)); // this is mandatory to get rid of the memory alignment problem. A simple cast can't work here
 8013728:	f04f 0b18 	mov.w	fp, #24
	: _M_start(), _M_finish(), _M_end_of_storage()
 801372c:	962c      	str	r6, [sp, #176]	@ 0xb0
 801372e:	e9cd 662a 	strd	r6, r6, [sp, #168]	@ 0xa8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8013732:	f1cb 0c20 	rsb	ip, fp, #32
 8013736:	fa22 f10b 	lsr.w	r1, r2, fp
 801373a:	f1ab 0020 	sub.w	r0, fp, #32
	for (uint8_t index = 0; index < type_length; index++) {
 801373e:	f1ab 0b08 	sub.w	fp, fp, #8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8013742:	fa06 fc0c 	lsl.w	ip, r6, ip
 8013746:	9203      	str	r2, [sp, #12]
 8013748:	fa26 f000 	lsr.w	r0, r6, r0
 801374c:	ea41 010c 	orr.w	r1, r1, ip
 8013750:	4301      	orrs	r1, r0
      { emplace_back(std::move(__x)); }
 8013752:	4620      	mov	r0, r4
 8013754:	f88d 1015 	strb.w	r1, [sp, #21]
 8013758:	f10d 0115 	add.w	r1, sp, #21
 801375c:	f7fc f89a 	bl	800f894 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	for (uint8_t index = 0; index < type_length; index++) {
 8013760:	f11b 0f08 	cmn.w	fp, #8
 8013764:	9a03      	ldr	r2, [sp, #12]
 8013766:	d1e4      	bne.n	8013732 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x254>
        data.insert(data.end(), single.begin(), single.end());
 8013768:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801376a:	a80d      	add	r0, sp, #52	@ 0x34
 801376c:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8013770:	f7fd fea0 	bl	80114b4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 8013774:	4620      	mov	r0, r4
 8013776:	f7ed fa47 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 801377a:	e742      	b.n	8013602 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x124>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 801377c:	2600      	movs	r6, #0
 801377e:	e781      	b.n	8013684 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x1a6>

08013780 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8013780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013782:	461c      	mov	r4, r3
 8013784:	b08f      	sub	sp, #60	@ 0x3c
	if (not element.ack && element.command) {
 8013786:	799b      	ldrb	r3, [r3, #6]
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8013788:	4605      	mov	r5, r0
 801378a:	4617      	mov	r7, r2
 801378c:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
	if (not element.ack && element.command) {
 8013790:	b9cb      	cbnz	r3, 80137c6 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x46>
 8013792:	79e3      	ldrb	r3, [r4, #7]
		return ProcessCommand<T>(message, response, element, start_index);
 8013794:	a803      	add	r0, sp, #12
	if (not element.ack && element.command) {
 8013796:	b323      	cbz	r3, 80137e2 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x62>
		return ProcessCommand<T>(message, response, element, start_index);
 8013798:	f7fc f9bb 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 801379c:	4621      	mov	r1, r4
 801379e:	a808      	add	r0, sp, #32
 80137a0:	f7fc f9a4 	bl	800faec <_ZN14MessageElementC1ERKS_>
 80137a4:	ab08      	add	r3, sp, #32
 80137a6:	463a      	mov	r2, r7
 80137a8:	a903      	add	r1, sp, #12
 80137aa:	4628      	mov	r0, r5
 80137ac:	9600      	str	r6, [sp, #0]
 80137ae:	f7ff fe96 	bl	80134de <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt>
		return ProcessSubscriber<T>(message, element, start_index);
 80137b2:	4604      	mov	r4, r0
 80137b4:	a80b      	add	r0, sp, #44	@ 0x2c
 80137b6:	f7ed fa27 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80137ba:	a804      	add	r0, sp, #16
 80137bc:	f7ed fa24 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 80137c0:	4620      	mov	r0, r4
 80137c2:	b00f      	add	sp, #60	@ 0x3c
 80137c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ProcessService<T>(message, element, start_index);
 80137c6:	a803      	add	r0, sp, #12
 80137c8:	f7fc f9a3 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 80137cc:	4621      	mov	r1, r4
 80137ce:	a808      	add	r0, sp, #32
 80137d0:	f7fc f98c 	bl	800faec <_ZN14MessageElementC1ERKS_>
 80137d4:	4633      	mov	r3, r6
 80137d6:	aa08      	add	r2, sp, #32
 80137d8:	a903      	add	r1, sp, #12
 80137da:	4628      	mov	r0, r5
 80137dc:	f7fc fde2 	bl	80103a4 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt>
 80137e0:	e7e7      	b.n	80137b2 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x32>
		return ProcessSubscriber<T>(message, element, start_index);
 80137e2:	f7fc f996 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 80137e6:	4621      	mov	r1, r4
 80137e8:	a808      	add	r0, sp, #32
 80137ea:	f7fc f97f 	bl	800faec <_ZN14MessageElementC1ERKS_>
 80137ee:	4633      	mov	r3, r6
 80137f0:	aa08      	add	r2, sp, #32
 80137f2:	a903      	add	r1, sp, #12
 80137f4:	4628      	mov	r0, r5
 80137f6:	f7fc fd50 	bl	801029a <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt>
 80137fa:	e7da      	b.n	80137b2 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x32>

080137fc <_ZN13Communication12ParseMessageE13MessageHeader>:
void Communication::ParseMessage(MessageHeader message) {
 80137fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137fe:	b099      	sub	sp, #100	@ 0x64
	response.interface = message.interface;
 8013800:	780b      	ldrb	r3, [r1, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013802:	2400      	movs	r4, #0
void Communication::ParseMessage(MessageHeader message) {
 8013804:	4606      	mov	r6, r0
	response.interface = message.interface;
 8013806:	f88d 3008 	strb.w	r3, [sp, #8]
void Communication::ParseMessage(MessageHeader message) {
 801380a:	460d      	mov	r5, r1
	response.target_address = message.source_address;
 801380c:	7c4b      	ldrb	r3, [r1, #17]
 801380e:	9411      	str	r4, [sp, #68]	@ 0x44
 8013810:	9405      	str	r4, [sp, #20]
 8013812:	f88d 3018 	strb.w	r3, [sp, #24]
 8013816:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 801381a:	e9cd 4403 	strd	r4, r4, [sp, #12]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801381e:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8013822:	1a9b      	subs	r3, r3, r2
	while (index < message.payload.size()) {
 8013824:	429c      	cmp	r4, r3
 8013826:	d203      	bcs.n	8013830 <_ZN13Communication12ParseMessageE13MessageHeader+0x34>
		if (index + 1 >= (uint16_t) message.payload.size())
 8013828:	1c60      	adds	r0, r4, #1
 801382a:	b29b      	uxth	r3, r3
 801382c:	4298      	cmp	r0, r3
 801382e:	db0c      	blt.n	801384a <_ZN13Communication12ParseMessageE13MessageHeader+0x4e>
	if (response.payload.size() > 0)
 8013830:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8013834:	429a      	cmp	r2, r3
 8013836:	f040 808e 	bne.w	8013956 <_ZN13Communication12ParseMessageE13MessageHeader+0x15a>
      }
 801383a:	a803      	add	r0, sp, #12
 801383c:	f7ed f9e4 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013840:	a80f      	add	r0, sp, #60	@ 0x3c
 8013842:	f7ed f9e1 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8013846:	b019      	add	sp, #100	@ 0x64
 8013848:	bdf0      	pop	{r4, r5, r6, r7, pc}
		element.ack = message.payload[index] & ACK_MASK;
 801384a:	5d13      	ldrb	r3, [r2, r4]
		element.element_register.address = (message.payload[index] & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)) << 8 | message.payload[index + 1];
 801384c:	5c12      	ldrb	r2, [r2, r0]
		bool success = FindRegister(message, &response, &element);
 801384e:	a812      	add	r0, sp, #72	@ 0x48
		element.ack = message.payload[index] & ACK_MASK;
 8013850:	09d9      	lsrs	r1, r3, #7
 8013852:	f88d 1036 	strb.w	r1, [sp, #54]	@ 0x36
		element.command = message.payload[index] & COMMAND_MASK;
 8013856:	f3c3 1180 	ubfx	r1, r3, #6, #1
 801385a:	f88d 1037 	strb.w	r1, [sp, #55]	@ 0x37
		element.access = message.payload[index] & ACCESS_MASK;
 801385e:	f3c3 1140 	ubfx	r1, r3, #5, #1
		element.element_register.address = (message.payload[index] & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)) << 8 | message.payload[index + 1];
 8013862:	021b      	lsls	r3, r3, #8
		element.access = message.payload[index] & ACCESS_MASK;
 8013864:	f88d 1038 	strb.w	r1, [sp, #56]	@ 0x38
		bool success = FindRegister(message, &response, &element);
 8013868:	4629      	mov	r1, r5
		element.element_register.address = (message.payload[index] & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)) << 8 | message.payload[index + 1];
 801386a:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 801386e:	4313      	orrs	r3, r2
 8013870:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
		bool success = FindRegister(message, &response, &element);
 8013874:	f7fc f94d 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 8013878:	ab0c      	add	r3, sp, #48	@ 0x30
 801387a:	aa02      	add	r2, sp, #8
 801387c:	a912      	add	r1, sp, #72	@ 0x48
 801387e:	4630      	mov	r0, r6
 8013880:	f7fd fee4 	bl	801164c <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement>
 8013884:	4607      	mov	r7, r0
 8013886:	a813      	add	r0, sp, #76	@ 0x4c
 8013888:	f7ed f9be 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not success) break;
 801388c:	2f00      	cmp	r7, #0
 801388e:	d0cf      	beq.n	8013830 <_ZN13Communication12ParseMessageE13MessageHeader+0x34>
			index = ProcessElement<uint8_t>(message, &response, element, index + 2);
 8013890:	3402      	adds	r4, #2
		switch (element.element_register.type) {
 8013892:	f89d 3032 	ldrb.w	r3, [sp, #50]	@ 0x32
			index = ProcessElement<uint8_t>(message, &response, element, index + 2);
 8013896:	b2a4      	uxth	r4, r4
		switch (element.element_register.type) {
 8013898:	2b08      	cmp	r3, #8
 801389a:	d8c0      	bhi.n	801381e <_ZN13Communication12ParseMessageE13MessageHeader+0x22>
 801389c:	a201      	add	r2, pc, #4	@ (adr r2, 80138a4 <_ZN13Communication12ParseMessageE13MessageHeader+0xa8>)
 801389e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138a2:	bf00      	nop
 80138a4:	080138c9 	.word	0x080138c9
 80138a8:	0801381f 	.word	0x0801381f
 80138ac:	080138f7 	.word	0x080138f7
 80138b0:	0801381f 	.word	0x0801381f
 80138b4:	08013917 	.word	0x08013917
 80138b8:	0801381f 	.word	0x0801381f
 80138bc:	0801381f 	.word	0x0801381f
 80138c0:	0801381f 	.word	0x0801381f
 80138c4:	08013937 	.word	0x08013937
			index = ProcessElement<uint8_t>(message, &response, element, index + 2);
 80138c8:	4629      	mov	r1, r5
 80138ca:	a807      	add	r0, sp, #28
 80138cc:	f7fc f921 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 80138d0:	a90c      	add	r1, sp, #48	@ 0x30
 80138d2:	a812      	add	r0, sp, #72	@ 0x48
 80138d4:	f7fc f90a 	bl	800faec <_ZN14MessageElementC1ERKS_>
 80138d8:	ab12      	add	r3, sp, #72	@ 0x48
 80138da:	aa02      	add	r2, sp, #8
 80138dc:	a907      	add	r1, sp, #28
 80138de:	4630      	mov	r0, r6
 80138e0:	9400      	str	r4, [sp, #0]
 80138e2:	f7fe fb09 	bl	8011ef8 <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt>
			index = ProcessElement<float>(message, &response, element, index + 2);
 80138e6:	4604      	mov	r4, r0
 80138e8:	a815      	add	r0, sp, #84	@ 0x54
 80138ea:	f7ed f98d 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80138ee:	a808      	add	r0, sp, #32
 80138f0:	f7ed f98a 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			break;
 80138f4:	e793      	b.n	801381e <_ZN13Communication12ParseMessageE13MessageHeader+0x22>
			index = ProcessElement<uint32_t>(message, &response, element, index + 2);
 80138f6:	4629      	mov	r1, r5
 80138f8:	a807      	add	r0, sp, #28
 80138fa:	f7fc f90a 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 80138fe:	a90c      	add	r1, sp, #48	@ 0x30
 8013900:	a812      	add	r0, sp, #72	@ 0x48
 8013902:	f7fc f8f3 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8013906:	ab12      	add	r3, sp, #72	@ 0x48
 8013908:	aa02      	add	r2, sp, #8
 801390a:	a907      	add	r1, sp, #28
 801390c:	4630      	mov	r0, r6
 801390e:	9400      	str	r4, [sp, #0]
 8013910:	f7fe ff58 	bl	80127c4 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt>
 8013914:	e7e7      	b.n	80138e6 <_ZN13Communication12ParseMessageE13MessageHeader+0xea>
			index = ProcessElement<int8_t>(message, &response, element, index + 2);
 8013916:	4629      	mov	r1, r5
 8013918:	a807      	add	r0, sp, #28
 801391a:	f7fc f8fa 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 801391e:	a90c      	add	r1, sp, #48	@ 0x30
 8013920:	a812      	add	r0, sp, #72	@ 0x48
 8013922:	f7fc f8e3 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8013926:	ab12      	add	r3, sp, #72	@ 0x48
 8013928:	aa02      	add	r2, sp, #8
 801392a:	a907      	add	r1, sp, #28
 801392c:	4630      	mov	r0, r6
 801392e:	9400      	str	r4, [sp, #0]
 8013930:	f7ff fb67 	bl	8013002 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt>
 8013934:	e7d7      	b.n	80138e6 <_ZN13Communication12ParseMessageE13MessageHeader+0xea>
			index = ProcessElement<float>(message, &response, element, index + 2);
 8013936:	4629      	mov	r1, r5
 8013938:	a807      	add	r0, sp, #28
 801393a:	f7fc f8ea 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 801393e:	a90c      	add	r1, sp, #48	@ 0x30
 8013940:	a812      	add	r0, sp, #72	@ 0x48
 8013942:	f7fc f8d3 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8013946:	ab12      	add	r3, sp, #72	@ 0x48
 8013948:	aa02      	add	r2, sp, #8
 801394a:	a907      	add	r1, sp, #28
 801394c:	4630      	mov	r0, r6
 801394e:	9400      	str	r4, [sp, #0]
 8013950:	f7ff ff16 	bl	8013780 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt>
 8013954:	e7c7      	b.n	80138e6 <_ZN13Communication12ParseMessageE13MessageHeader+0xea>
		Send(response);
 8013956:	a902      	add	r1, sp, #8
 8013958:	a812      	add	r0, sp, #72	@ 0x48
 801395a:	f7fc f8da 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 801395e:	a912      	add	r1, sp, #72	@ 0x48
 8013960:	4630      	mov	r0, r6
 8013962:	f7fc f9c5 	bl	800fcf0 <_ZN13Communication4SendE13MessageHeader>
 8013966:	a813      	add	r0, sp, #76	@ 0x4c
 8013968:	f7ed f94e 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801396c:	e765      	b.n	801383a <_ZN13Communication12ParseMessageE13MessageHeader+0x3e>
 801396e:	bf00      	nop

08013970 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>:
uint16_t Communication::Process(uint8_t ID, std::vector<uint8_t> data, bool* success) {
 8013970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013974:	461c      	mov	r4, r3
 8013976:	b08e      	sub	sp, #56	@ 0x38
	uint16_t processed_length = 0;
 8013978:	2300      	movs	r3, #0
uint16_t Communication::Process(uint8_t ID, std::vector<uint8_t> data, bool* success) {
 801397a:	4616      	mov	r6, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 801397c:	4622      	mov	r2, r4
uint16_t Communication::Process(uint8_t ID, std::vector<uint8_t> data, bool* success) {
 801397e:	4605      	mov	r5, r0
 8013980:	4688      	mov	r8, r1
	uint16_t processed_length = 0;
 8013982:	f8ad 300e 	strh.w	r3, [sp, #14]
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 8013986:	f7fb fbb1 	bl	800f0ec <_ZN13Communication12FindProtocolEhPb>
 801398a:	4607      	mov	r7, r0
	if (not *success)
 801398c:	7820      	ldrb	r0, [r4, #0]
 801398e:	2800      	cmp	r0, #0
 8013990:	d039      	beq.n	8013a06 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x96>
		MessageHeader message = protocol->DecodeProtocol(ID, data, &processed_length, success);
 8013992:	f10d 0a0e 	add.w	sl, sp, #14
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever); // TODO ADDED
 8013996:	f04f 31ff 	mov.w	r1, #4294967295
 801399a:	6828      	ldr	r0, [r5, #0]
 801399c:	f7f8 fefa 	bl	800c794 <osSemaphoreAcquire>
	while (processed_length < data.size()) {// && processed_length < data.size()) {
 80139a0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80139a4:	e9d6 1300 	ldrd	r1, r3, [r6]
 80139a8:	1a5b      	subs	r3, r3, r1
 80139aa:	429a      	cmp	r2, r3
 80139ac:	d226      	bcs.n	80139fc <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x8c>
		MessageHeader message = protocol->DecodeProtocol(ID, data, &processed_length, success);
 80139ae:	683b      	ldr	r3, [r7, #0]
 80139b0:	4631      	mov	r1, r6
 80139b2:	a809      	add	r0, sp, #36	@ 0x24
 80139b4:	f8d3 9000 	ldr.w	r9, [r3]
 80139b8:	f7ed fa20 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80139bc:	ab09      	add	r3, sp, #36	@ 0x24
 80139be:	4642      	mov	r2, r8
 80139c0:	4639      	mov	r1, r7
 80139c2:	a804      	add	r0, sp, #16
 80139c4:	e9cd a400 	strd	sl, r4, [sp]
 80139c8:	47c8      	blx	r9
      }
 80139ca:	a809      	add	r0, sp, #36	@ 0x24
 80139cc:	f7ed f91c 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success) break;
 80139d0:	7823      	ldrb	r3, [r4, #0]
 80139d2:	b183      	cbz	r3, 80139f6 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x86>
		if (!AcceptMessage(message)) {
 80139d4:	a904      	add	r1, sp, #16
 80139d6:	a809      	add	r0, sp, #36	@ 0x24
 80139d8:	f7fc f89b 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 80139dc:	a909      	add	r1, sp, #36	@ 0x24
 80139de:	4628      	mov	r0, r5
 80139e0:	f7fb fba8 	bl	800f134 <_ZN13Communication13AcceptMessageE13MessageHeader>
 80139e4:	4681      	mov	r9, r0
 80139e6:	a80a      	add	r0, sp, #40	@ 0x28
 80139e8:	f7ed f90e 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80139ec:	f1b9 0f00 	cmp.w	r9, #0
 80139f0:	d10c      	bne.n	8013a0c <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x9c>
			*success = false;
 80139f2:	f884 9000 	strb.w	r9, [r4]
 80139f6:	a805      	add	r0, sp, #20
 80139f8:	f7ed f906 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	osSemaphoreRelease(CommunicationSemaphore);  // TODO ADDED
 80139fc:	6828      	ldr	r0, [r5, #0]
 80139fe:	f7f8 fefd 	bl	800c7fc <osSemaphoreRelease>
	return processed_length;
 8013a02:	f8bd 000e 	ldrh.w	r0, [sp, #14]
}
 8013a06:	b00e      	add	sp, #56	@ 0x38
 8013a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ParseMessage(message);
 8013a0c:	a904      	add	r1, sp, #16
 8013a0e:	a809      	add	r0, sp, #36	@ 0x24
		message.interface = ID;
 8013a10:	f88d 8010 	strb.w	r8, [sp, #16]
		ParseMessage(message);
 8013a14:	f7fc f87d 	bl	800fb12 <_ZN13MessageHeaderC1ERKS_>
 8013a18:	a909      	add	r1, sp, #36	@ 0x24
 8013a1a:	4628      	mov	r0, r5
 8013a1c:	f7ff feee 	bl	80137fc <_ZN13Communication12ParseMessageE13MessageHeader>
 8013a20:	a80a      	add	r0, sp, #40	@ 0x28
 8013a22:	f7ed f8f1 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013a26:	a805      	add	r0, sp, #20
 8013a28:	f7ed f8ee 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013a2c:	e7b8      	b.n	80139a0 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x30>

08013a2e <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013a2e:	2300      	movs	r3, #0
/**
 * @brief Class constructor
 *
 * @param input timer_: the timer pointer used to generate interrupts
 */
HardwareDelay::HardwareDelay(TIM_HandleTypeDef* timer_) {
 8013a30:	b570      	push	{r4, r5, r6, lr}
 8013a32:	4604      	mov	r4, r0
 8013a34:	6183      	str	r3, [r0, #24]
	timer = timer_;
 8013a36:	6041      	str	r1, [r0, #4]
 8013a38:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8013a3c:	2024      	movs	r0, #36	@ 0x24
 8013a3e:	f008 f8ea 	bl	801bc16 <_Znwj>
 8013a42:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 8013a44:	e9d4 6204 	ldrd	r6, r2, [r4, #16]
 8013a48:	1b92      	subs	r2, r2, r6
      if (__count > 0)
 8013a4a:	2a00      	cmp	r2, #0
 8013a4c:	dd08      	ble.n	8013a60 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef+0x32>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013a4e:	4631      	mov	r1, r6
 8013a50:	f008 fc18 	bl	801c284 <memmove>
			- this->_M_impl._M_start);
 8013a54:	69a1      	ldr	r1, [r4, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8013a56:	4630      	mov	r0, r6
 8013a58:	1b89      	subs	r1, r1, r6
 8013a5a:	f008 f8b7 	bl	801bbcc <_ZdlPvj>
      }
 8013a5e:	e001      	b.n	8013a64 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef+0x36>
	if (__p)
 8013a60:	2e00      	cmp	r6, #0
 8013a62:	d1f7      	bne.n	8013a54 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef+0x26>

	pending_delays.reserve(DELAY_NUMBER_OF_CHANNELS);
}
 8013a64:	4620      	mov	r0, r4
	  this->_M_impl._M_finish = __tmp + __old_size;
 8013a66:	e9c4 5504 	strd	r5, r5, [r4, #16]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013a6a:	3524      	adds	r5, #36	@ 0x24
 8013a6c:	61a5      	str	r5, [r4, #24]
 8013a6e:	bd70      	pop	{r4, r5, r6, pc}

08013a70 <_ZN13HardwareDelay13AssignedTimerEP17TIM_HandleTypeDef>:
 * @brief Check that the input timer is registered in the class.
 *
 * @param input timer_: the timer pointer to check
 * @return true if input timer is used by the class
 */
bool HardwareDelay::AssignedTimer(TIM_HandleTypeDef* timer_) {
 8013a70:	b570      	push	{r4, r5, r6, lr}
 8013a72:	4604      	mov	r4, r0
 8013a74:	460e      	mov	r6, r1
	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 8013a76:	6800      	ldr	r0, [r0, #0]
 8013a78:	f04f 31ff 	mov.w	r1, #4294967295
 8013a7c:	f7f8 fe8a 	bl	800c794 <osSemaphoreAcquire>
	bool result = timer == timer_;
 8013a80:	6865      	ldr	r5, [r4, #4]
	osSemaphoreRelease(DelaySemaphore);
 8013a82:	6820      	ldr	r0, [r4, #0]
	bool result = timer == timer_;
 8013a84:	1bab      	subs	r3, r5, r6
 8013a86:	425d      	negs	r5, r3
 8013a88:	415d      	adcs	r5, r3
	osSemaphoreRelease(DelaySemaphore);
 8013a8a:	f7f8 feb7 	bl	800c7fc <osSemaphoreRelease>
	return result;
}
 8013a8e:	4628      	mov	r0, r5
 8013a90:	bd70      	pop	{r4, r5, r6, pc}

08013a92 <_ZN13HardwareDelay10StartDelayEv>:
}

/**
 * @brief Setup and start the timer based on the active delay
 */
void HardwareDelay::StartDelay(void) {
 8013a92:	4603      	mov	r3, r0
	timer->Instance->CNT = 0;
 8013a94:	6840      	ldr	r0, [r0, #4]
 8013a96:	2200      	movs	r2, #0
 8013a98:	6801      	ldr	r1, [r0, #0]
 8013a9a:	624a      	str	r2, [r1, #36]	@ 0x24
	return *(this->_M_impl._M_start + __n);
 8013a9c:	7b1a      	ldrb	r2, [r3, #12]
	timer->Instance->ARR = pending_delays[active_delay].delay;
 8013a9e:	691b      	ldr	r3, [r3, #16]
 8013aa0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013aa4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013aa8:	885b      	ldrh	r3, [r3, #2]
 8013aaa:	62cb      	str	r3, [r1, #44]	@ 0x2c
	timer->Instance->SR = ~TIM_IT_UPDATE;
 8013aac:	f06f 0301 	mvn.w	r3, #1
 8013ab0:	610b      	str	r3, [r1, #16]
	HAL_TIM_Base_Start_IT(timer);
 8013ab2:	f7f6 bc79 	b.w	800a3a8 <HAL_TIM_Base_Start_IT>
	...

08013ab8 <_ZN13HardwareDelay14StartNextDelayEv>:
}

/**
 * @brief Active and start the next delay
 */
void HardwareDelay::StartNextDelay(void) {
 8013ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013aba:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
 8013abe:	4a1a      	ldr	r2, [pc, #104]	@ (8013b28 <_ZN13HardwareDelay14StartNextDelayEv+0x70>)
 8013ac0:	1b59      	subs	r1, r3, r5
	if (pending_delays.size() == 0) return;
 8013ac2:	42ab      	cmp	r3, r5
 8013ac4:	ea4f 01a1 	mov.w	r1, r1, asr #2
 8013ac8:	fb02 f101 	mul.w	r1, r2, r1
 8013acc:	d02b      	beq.n	8013b26 <_ZN13HardwareDelay14StartNextDelayEv+0x6e>

	// Find the smallest delay in memory
	uint8_t min_delay = 0;
	for (uint8_t index = 1; index < pending_delays.size(); index++) {
 8013ace:	2301      	movs	r3, #1
	uint8_t min_delay = 0;
 8013ad0:	2400      	movs	r4, #0
	return *(this->_M_impl._M_start + __n);
 8013ad2:	b222      	sxth	r2, r4
	for (uint8_t index = 1; index < pending_delays.size(); index++) {
 8013ad4:	428b      	cmp	r3, r1
 8013ad6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013ada:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8013ade:	d30a      	bcc.n	8013af6 <_ZN13HardwareDelay14StartNextDelayEv+0x3e>
			min_delay = index;
	}

	// Update other delays based on the active one
	active_delay = min_delay;
	for (uint8_t index = 0; index < pending_delays.size(); index++) {
 8013ae0:	2600      	movs	r6, #0
 8013ae2:	f04f 0c0c 	mov.w	ip, #12
	active_delay = min_delay;
 8013ae6:	7304      	strb	r4, [r0, #12]
	for (uint8_t index = 0; index < pending_delays.size(); index++) {
 8013ae8:	b2f3      	uxtb	r3, r6
 8013aea:	428b      	cmp	r3, r1
 8013aec:	d30f      	bcc.n	8013b0e <_ZN13HardwareDelay14StartNextDelayEv+0x56>
		}
	}

	// Start the delay
	StartDelay();
}
 8013aee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	StartDelay();
 8013af2:	f7ff bfce 	b.w	8013a92 <_ZN13HardwareDelay10StartDelayEv>
 8013af6:	eb03 0643 	add.w	r6, r3, r3, lsl #1
		if (pending_delays[index].delay < pending_delays[min_delay].delay)
 8013afa:	8852      	ldrh	r2, [r2, #2]
 8013afc:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8013b00:	8876      	ldrh	r6, [r6, #2]
			min_delay = index;
 8013b02:	4296      	cmp	r6, r2
 8013b04:	bf38      	it	cc
 8013b06:	461c      	movcc	r4, r3
	for (uint8_t index = 1; index < pending_delays.size(); index++) {
 8013b08:	3301      	adds	r3, #1
 8013b0a:	b2db      	uxtb	r3, r3
 8013b0c:	e7e1      	b.n	8013ad2 <_ZN13HardwareDelay14StartNextDelayEv+0x1a>
		if (index != active_delay) {
 8013b0e:	429c      	cmp	r4, r3
 8013b10:	d007      	beq.n	8013b22 <_ZN13HardwareDelay14StartNextDelayEv+0x6a>
 8013b12:	fb0c 5303 	mla	r3, ip, r3, r5
			pending_delays[index].delay -= pending_delays[active_delay].delay;
 8013b16:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 8013b1a:	885f      	ldrh	r7, [r3, #2]
 8013b1c:	eba7 070e 	sub.w	r7, r7, lr
 8013b20:	805f      	strh	r7, [r3, #2]
	for (uint8_t index = 0; index < pending_delays.size(); index++) {
 8013b22:	3601      	adds	r6, #1
 8013b24:	e7e0      	b.n	8013ae8 <_ZN13HardwareDelay14StartNextDelayEv+0x30>
}
 8013b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b28:	aaaaaaab 	.word	0xaaaaaaab

08013b2c <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 8013b2c:	460b      	mov	r3, r1
      : _M_current(__i) { }
 8013b2e:	6842      	ldr	r2, [r0, #4]
      { return __normal_iterator(_M_current + __n); }
 8013b30:	310c      	adds	r1, #12
      if (__position + 1 != end())
 8013b32:	428a      	cmp	r2, r1
    vector<_Tp, _Alloc>::
 8013b34:	b510      	push	{r4, lr}
 8013b36:	4604      	mov	r4, r0
      if (__position + 1 != end())
 8013b38:	d004      	beq.n	8013b44 <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	1a52      	subs	r2, r2, r1
 8013b3e:	f008 fba1 	bl	801c284 <memmove>
 8013b42:	4603      	mov	r3, r0
      --this->_M_impl._M_finish;
 8013b44:	6862      	ldr	r2, [r4, #4]
    }
 8013b46:	4618      	mov	r0, r3
      --this->_M_impl._M_finish;
 8013b48:	3a0c      	subs	r2, #12
 8013b4a:	6062      	str	r2, [r4, #4]
    }
 8013b4c:	bd10      	pop	{r4, pc}

08013b4e <_ZN13HardwareDelay14TriggeredDelayEv>:

/**
 * @brief ISR called by the timer. Summons the callback then start the next delay
 */
void HardwareDelay::TriggeredDelay(void) {
 8013b4e:	b510      	push	{r4, lr}
 8013b50:	4604      	mov	r4, r0
	HAL_TIM_Base_Stop_IT(timer);
 8013b52:	6840      	ldr	r0, [r0, #4]
 8013b54:	f7f6 fc70 	bl	800a438 <HAL_TIM_Base_Stop_IT>

	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 8013b58:	f04f 31ff 	mov.w	r1, #4294967295
 8013b5c:	6820      	ldr	r0, [r4, #0]
 8013b5e:	f7f8 fe19 	bl	800c794 <osSemaphoreAcquire>
	timer->Instance->SR = ~TIM_IT_UPDATE;
 8013b62:	6863      	ldr	r3, [r4, #4]
 8013b64:	f06f 0201 	mvn.w	r2, #1
 8013b68:	6921      	ldr	r1, [r4, #16]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	611a      	str	r2, [r3, #16]
 8013b6e:	7b23      	ldrb	r3, [r4, #12]
 8013b70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013b74:	0098      	lsls	r0, r3, #2
 8013b76:	eb01 0383 	add.w	r3, r1, r3, lsl #2

	// Summon callback
	if (pending_delays[active_delay].callback != NULL) {
 8013b7a:	689a      	ldr	r2, [r3, #8]
 8013b7c:	b112      	cbz	r2, 8013b84 <_ZN13HardwareDelay14TriggeredDelayEv+0x36>
		pending_delays[active_delay].callback(pending_delays[active_delay].context, pending_delays[active_delay].ID);
 8013b7e:	5c09      	ldrb	r1, [r1, r0]
 8013b80:	6858      	ldr	r0, [r3, #4]
 8013b82:	4790      	blx	r2
 8013b84:	7b21      	ldrb	r1, [r4, #12]
 8013b86:	4620      	mov	r0, r4
 8013b88:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013b8c:	f850 3f10 	ldr.w	r3, [r0, #16]!
      { return _M_erase(begin() + (__position - cbegin())); }
 8013b90:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8013b94:	f7ff ffca 	bl	8013b2c <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>

	// Remove delay
	pending_delays.erase(pending_delays.begin() + active_delay);

	// Stat next delay
	StartNextDelay();
 8013b98:	4620      	mov	r0, r4
 8013b9a:	f7ff ff8d 	bl	8013ab8 <_ZN13HardwareDelay14StartNextDelayEv>
	osSemaphoreRelease(DelaySemaphore);
 8013b9e:	6820      	ldr	r0, [r4, #0]
}
 8013ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(DelaySemaphore);
 8013ba4:	f7f8 be2a 	b.w	800c7fc <osSemaphoreRelease>

08013ba8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013ba8:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8013baa:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013bac:	d006      	beq.n	8013bbc <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8013bae:	da01      	bge.n	8013bb4 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 8013bb0:	f008 f8e0 	bl	801bd74 <_ZSt17__throw_bad_allocv>
      }
 8013bb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8013bb8:	f008 b82d 	b.w	801bc16 <_Znwj>
 8013bbc:	bd08      	pop	{r3, pc}
	...

08013bc0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8013bc0:	4926      	ldr	r1, [pc, #152]	@ (8013c5c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8013bc2:	b510      	push	{r4, lr}
 8013bc4:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8013bc6:	4608      	mov	r0, r1
 8013bc8:	f008 f8bc 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8013bcc:	2800      	cmp	r0, #0
 8013bce:	d133      	bne.n	8013c38 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8013bd0:	4923      	ldr	r1, [pc, #140]	@ (8013c60 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa0>)
 8013bd2:	4822      	ldr	r0, [pc, #136]	@ (8013c5c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8013bd4:	f008 f8b6 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8013bd8:	2800      	cmp	r0, #0
 8013bda:	d12f      	bne.n	8013c3c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8013bdc:	4921      	ldr	r1, [pc, #132]	@ (8013c64 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa4>)
 8013bde:	481f      	ldr	r0, [pc, #124]	@ (8013c5c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8013be0:	f008 f8b0 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8013be4:	bb60      	cbnz	r0, 8013c40 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8013be6:	4920      	ldr	r1, [pc, #128]	@ (8013c68 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa8>)
 8013be8:	481c      	ldr	r0, [pc, #112]	@ (8013c5c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8013bea:	f008 f8ab 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8013bee:	bb48      	cbnz	r0, 8013c44 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8013bf0:	491e      	ldr	r1, [pc, #120]	@ (8013c6c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xac>)
 8013bf2:	481a      	ldr	r0, [pc, #104]	@ (8013c5c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8013bf4:	f008 f8a6 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8013bf8:	bb30      	cbnz	r0, 8013c48 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8013bfa:	491d      	ldr	r1, [pc, #116]	@ (8013c70 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb0>)
 8013bfc:	4817      	ldr	r0, [pc, #92]	@ (8013c5c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8013bfe:	f008 f8a1 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8013c02:	bb18      	cbnz	r0, 8013c4c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8013c04:	491b      	ldr	r1, [pc, #108]	@ (8013c74 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb4>)
 8013c06:	4815      	ldr	r0, [pc, #84]	@ (8013c5c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8013c08:	f008 f89c 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8013c0c:	bb00      	cbnz	r0, 8013c50 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8013c0e:	491a      	ldr	r1, [pc, #104]	@ (8013c78 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb8>)
 8013c10:	4812      	ldr	r0, [pc, #72]	@ (8013c5c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8013c12:	f008 f897 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8013c16:	b9e8      	cbnz	r0, 8013c54 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8013c18:	4918      	ldr	r1, [pc, #96]	@ (8013c7c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xbc>)
 8013c1a:	4810      	ldr	r0, [pc, #64]	@ (8013c5c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8013c1c:	f008 f892 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8013c20:	b9d0      	cbnz	r0, 8013c58 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8013c22:	4917      	ldr	r1, [pc, #92]	@ (8013c80 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xc0>)
 8013c24:	480d      	ldr	r0, [pc, #52]	@ (8013c5c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8013c26:	f008 f88d 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8013c2a:	2800      	cmp	r0, #0
 8013c2c:	bf14      	ite	ne
 8013c2e:	2309      	movne	r3, #9
 8013c30:	2300      	moveq	r3, #0
 8013c32:	7020      	strb	r0, [r4, #0]
}
 8013c34:	4618      	mov	r0, r3
 8013c36:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8013c38:	2300      	movs	r3, #0
 8013c3a:	e7fa      	b.n	8013c32 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8013c3c:	2301      	movs	r3, #1
 8013c3e:	e7f8      	b.n	8013c32 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8013c40:	2302      	movs	r3, #2
 8013c42:	e7f6      	b.n	8013c32 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8013c44:	2303      	movs	r3, #3
 8013c46:	e7f4      	b.n	8013c32 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8013c48:	2304      	movs	r3, #4
 8013c4a:	e7f2      	b.n	8013c32 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8013c4c:	2305      	movs	r3, #5
 8013c4e:	e7f0      	b.n	8013c32 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8013c50:	2306      	movs	r3, #6
 8013c52:	e7ee      	b.n	8013c32 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8013c54:	2307      	movs	r3, #7
 8013c56:	e7ec      	b.n	8013c32 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8013c58:	2308      	movs	r3, #8
 8013c5a:	e7ea      	b.n	8013c32 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
 8013c5c:	0801ca50 	.word	0x0801ca50
 8013c60:	0801ca40 	.word	0x0801ca40
 8013c64:	0801ca30 	.word	0x0801ca30
 8013c68:	0801ca20 	.word	0x0801ca20
 8013c6c:	0801ca58 	.word	0x0801ca58
 8013c70:	0801ca48 	.word	0x0801ca48
 8013c74:	0801ca38 	.word	0x0801ca38
 8013c78:	0801ca28 	.word	0x0801ca28
 8013c7c:	0801ca18 	.word	0x0801ca18
 8013c80:	0801ca10 	.word	0x0801ca10

08013c84 <_ZN4LEDSC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013c84:	2200      	movs	r2, #0
 8013c86:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8013c8a:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8013c8e:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8013c92:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8013c96:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 8013c9a:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
/**
 * @brief Class constructor
 */
LEDS::LEDS()
{
}
 8013c9e:	4770      	bx	lr

08013ca0 <_ZN4LEDS4InitEP9Registers>:
/**
 * @brief Initialize the class with references to other classes. Set default values.
 *
 * @param input registers_: the Registers instance
 */
void LEDS::Init(Registers* registers_) {
 8013ca0:	b510      	push	{r4, lr}
	registers = registers_;
 8013ca2:	6001      	str	r1, [r0, #0]

	LEDsSemaphore = osSemaphoreNew(1,1,NULL);
 8013ca4:	2101      	movs	r1, #1
void LEDS::Init(Registers* registers_) {
 8013ca6:	4604      	mov	r4, r0
	LEDsSemaphore = osSemaphoreNew(1,1,NULL);
 8013ca8:	2200      	movs	r2, #0
 8013caa:	4608      	mov	r0, r1
 8013cac:	f7f8 fd16 	bl	800c6dc <osSemaphoreNew>
 8013cb0:	6060      	str	r0, [r4, #4]
	osSemaphoreRelease(LEDsSemaphore);
}
 8013cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(LEDsSemaphore);
 8013cb6:	f7f8 bda1 	b.w	800c7fc <osSemaphoreRelease>

08013cba <_ZN4LEDS4SpinEv>:
}

/**
 * @brief Function used to process the blinking patterns of SMD LEDs. Called repeatedly in a freeRTOS task
 */
void LEDS::Spin(void) {
 8013cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cbc:	4605      	mov	r5, r0
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013cbe:	f04f 31ff 	mov.w	r1, #4294967295
 8013cc2:	6840      	ldr	r0, [r0, #4]
            }
            HAL_GPIO_WritePin(led.gpio.port, led.gpio.pin, (GPIO_PinState) state);

            led.counter++;
            if (led.counter >= led.T) {
                led.counter = 0;
 8013cc4:	2700      	movs	r7, #0
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013cc6:	f7f8 fd65 	bl	800c794 <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8013cca:	e9d5 4602 	ldrd	r4, r6, [r5, #8]
    for (LED & led : LEDs) {
 8013cce:	42a6      	cmp	r6, r4
 8013cd0:	d107      	bne.n	8013ce2 <_ZN4LEDS4SpinEv+0x28>
                if (not led.repeat)
                    led.blink = false;
            }
        }
    }
    osSemaphoreRelease(LEDsSemaphore);
 8013cd2:	6868      	ldr	r0, [r5, #4]
 8013cd4:	f7f8 fd92 	bl	800c7fc <osSemaphoreRelease>

    osDelay(DEFAULT_LEDS_PERIOD);
 8013cd8:	2064      	movs	r0, #100	@ 0x64
}
 8013cda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    osDelay(DEFAULT_LEDS_PERIOD);
 8013cde:	f7f8 bcef 	b.w	800c6c0 <osDelay>
        if (led.blink) {
 8013ce2:	7b22      	ldrb	r2, [r4, #12]
 8013ce4:	b1a2      	cbz	r2, 8013d10 <_ZN4LEDS4SpinEv+0x56>
 8013ce6:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
            for(uint8_t t : led.timings) {
 8013cea:	4299      	cmp	r1, r3
 8013cec:	d005      	beq.n	8013cfa <_ZN4LEDS4SpinEv+0x40>
 8013cee:	f813 0b01 	ldrb.w	r0, [r3], #1
                if (led.counter < t)
 8013cf2:	f894 c00e 	ldrb.w	ip, [r4, #14]
 8013cf6:	4584      	cmp	ip, r0
 8013cf8:	d20c      	bcs.n	8013d14 <_ZN4LEDS4SpinEv+0x5a>
            HAL_GPIO_WritePin(led.gpio.port, led.gpio.pin, (GPIO_PinState) state);
 8013cfa:	8921      	ldrh	r1, [r4, #8]
 8013cfc:	6860      	ldr	r0, [r4, #4]
 8013cfe:	f7f2 fd79 	bl	80067f4 <HAL_GPIO_WritePin>
            led.counter++;
 8013d02:	7ba3      	ldrb	r3, [r4, #14]
            if (led.counter >= led.T) {
 8013d04:	7f22      	ldrb	r2, [r4, #28]
            led.counter++;
 8013d06:	3301      	adds	r3, #1
 8013d08:	b2db      	uxtb	r3, r3
            if (led.counter >= led.T) {
 8013d0a:	429a      	cmp	r2, r3
            led.counter++;
 8013d0c:	73a3      	strb	r3, [r4, #14]
            if (led.counter >= led.T) {
 8013d0e:	d904      	bls.n	8013d1a <_ZN4LEDS4SpinEv+0x60>
      operator++() _GLIBCXX_NOEXCEPT
 8013d10:	3420      	adds	r4, #32
	return *this;
 8013d12:	e7dc      	b.n	8013cce <_ZN4LEDS4SpinEv+0x14>
                state =  not state;
 8013d14:	f082 0201 	eor.w	r2, r2, #1
 8013d18:	e7e7      	b.n	8013cea <_ZN4LEDS4SpinEv+0x30>
                if (not led.repeat)
 8013d1a:	7b63      	ldrb	r3, [r4, #13]
                led.counter = 0;
 8013d1c:	73a7      	strb	r7, [r4, #14]
                if (not led.repeat)
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d1f6      	bne.n	8013d10 <_ZN4LEDS4SpinEv+0x56>
                    led.blink = false;
 8013d22:	7323      	strb	r3, [r4, #12]
 8013d24:	e7f4      	b.n	8013d10 <_ZN4LEDS4SpinEv+0x56>

08013d26 <_ZN4LEDS6GetLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetLED(uint8_t ID, bool* success) {
 8013d26:	b570      	push	{r4, r5, r6, lr}
 8013d28:	e9d0 3402 	ldrd	r3, r4, [r0, #8]
    uint8_t index = 0;
    for (LED & led : LEDs) {
 8013d2c:	2000      	movs	r0, #0
 8013d2e:	429c      	cmp	r4, r3
 8013d30:	461d      	mov	r5, r3
 8013d32:	d102      	bne.n	8013d3a <_ZN4LEDS6GetLEDEhPb+0x14>
 8013d34:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 8013d36:	4618      	mov	r0, r3
 8013d38:	e006      	b.n	8013d48 <_ZN4LEDS6GetLEDEhPb+0x22>
        if (led.ID == ID) {
 8013d3a:	782d      	ldrb	r5, [r5, #0]
 8013d3c:	1c46      	adds	r6, r0, #1
 8013d3e:	3320      	adds	r3, #32
 8013d40:	428d      	cmp	r5, r1
 8013d42:	d103      	bne.n	8013d4c <_ZN4LEDS6GetLEDEhPb+0x26>
 8013d44:	b2c0      	uxtb	r0, r0
 8013d46:	2301      	movs	r3, #1
            *success = true;
 8013d48:	7013      	strb	r3, [r2, #0]
}
 8013d4a:	bd70      	pop	{r4, r5, r6, pc}
 8013d4c:	4630      	mov	r0, r6
 8013d4e:	e7ee      	b.n	8013d2e <_ZN4LEDS6GetLEDEhPb+0x8>

08013d50 <_ZN4LEDS6SetLEDEh13GPIO_PinState>:
bool LEDS::SetLED(uint8_t ID, GPIO_PinState state) {
 8013d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013d52:	4616      	mov	r6, r2
    uint8_t index = GetLED(ID, &success);
 8013d54:	f10d 0207 	add.w	r2, sp, #7
bool LEDS::SetLED(uint8_t ID, GPIO_PinState state) {
 8013d58:	4604      	mov	r4, r0
    uint8_t index = GetLED(ID, &success);
 8013d5a:	f7ff ffe4 	bl	8013d26 <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8013d5e:	f89d 7007 	ldrb.w	r7, [sp, #7]
    uint8_t index = GetLED(ID, &success);
 8013d62:	4605      	mov	r5, r0
    if (success) {
 8013d64:	b17f      	cbz	r7, 8013d86 <_ZN4LEDS6SetLEDEh13GPIO_PinState+0x36>
    	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013d66:	f04f 31ff 	mov.w	r1, #4294967295
 8013d6a:	6860      	ldr	r0, [r4, #4]
 8013d6c:	f7f8 fd12 	bl	800c794 <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 8013d70:	68a3      	ldr	r3, [r4, #8]
 8013d72:	b22d      	sxth	r5, r5
        LEDs[index].blink = false;
 8013d74:	2200      	movs	r2, #0
 8013d76:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8013d7a:	731a      	strb	r2, [r3, #12]
        HAL_GPIO_WritePin(LEDs[index].gpio.port, LEDs[index].gpio.pin, state);
 8013d7c:	4632      	mov	r2, r6
 8013d7e:	8919      	ldrh	r1, [r3, #8]
 8013d80:	6858      	ldr	r0, [r3, #4]
 8013d82:	f7f2 fd37 	bl	80067f4 <HAL_GPIO_WritePin>
    osSemaphoreRelease(LEDsSemaphore);
 8013d86:	6860      	ldr	r0, [r4, #4]
 8013d88:	f7f8 fd38 	bl	800c7fc <osSemaphoreRelease>
}
 8013d8c:	4638      	mov	r0, r7
 8013d8e:	b003      	add	sp, #12
 8013d90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013d92 <_ZN4LEDS5BlinkEh>:
bool LEDS::Blink(uint8_t ID) {
 8013d92:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d94:	460d      	mov	r5, r1
 8013d96:	4604      	mov	r4, r0
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013d98:	f04f 31ff 	mov.w	r1, #4294967295
 8013d9c:	6840      	ldr	r0, [r0, #4]
 8013d9e:	f7f8 fcf9 	bl	800c794 <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 8013da2:	4629      	mov	r1, r5
 8013da4:	f10d 0207 	add.w	r2, sp, #7
 8013da8:	4620      	mov	r0, r4
 8013daa:	f7ff ffbc 	bl	8013d26 <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8013dae:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8013db2:	b145      	cbz	r5, 8013dc6 <_ZN4LEDS5BlinkEh+0x34>
 8013db4:	68a3      	ldr	r3, [r4, #8]
 8013db6:	b200      	sxth	r0, r0
        LEDs[index].blink = true;
 8013db8:	f240 1201 	movw	r2, #257	@ 0x101
 8013dbc:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 8013dc0:	819a      	strh	r2, [r3, #12]
        LEDs[index].counter = 0;
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	739a      	strb	r2, [r3, #14]
    osSemaphoreRelease(LEDsSemaphore);
 8013dc6:	6860      	ldr	r0, [r4, #4]
 8013dc8:	f7f8 fd18 	bl	800c7fc <osSemaphoreRelease>
}
 8013dcc:	4628      	mov	r0, r5
 8013dce:	b003      	add	sp, #12
 8013dd0:	bd30      	pop	{r4, r5, pc}

08013dd2 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			return self->Blink(*input);
 8013dd2:	7811      	ldrb	r1, [r2, #0]
 8013dd4:	f7ff bfdd 	b.w	8013d92 <_ZN4LEDS5BlinkEh>

08013dd8 <_ZN4LEDS9BlinkOnceEh>:
bool LEDS::BlinkOnce(uint8_t ID) {
 8013dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013dda:	460d      	mov	r5, r1
 8013ddc:	4604      	mov	r4, r0
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013dde:	f04f 31ff 	mov.w	r1, #4294967295
 8013de2:	6840      	ldr	r0, [r0, #4]
 8013de4:	f7f8 fcd6 	bl	800c794 <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 8013de8:	4629      	mov	r1, r5
 8013dea:	f10d 0207 	add.w	r2, sp, #7
 8013dee:	4620      	mov	r0, r4
 8013df0:	f7ff ff99 	bl	8013d26 <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8013df4:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8013df8:	b13d      	cbz	r5, 8013e0a <_ZN4LEDS9BlinkOnceEh+0x32>
 8013dfa:	68a3      	ldr	r3, [r4, #8]
 8013dfc:	b200      	sxth	r0, r0
        LEDs[index].blink = true;
 8013dfe:	2201      	movs	r2, #1
 8013e00:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 8013e04:	819a      	strh	r2, [r3, #12]
        LEDs[index].counter = 0;
 8013e06:	2200      	movs	r2, #0
 8013e08:	739a      	strb	r2, [r3, #14]
    osSemaphoreRelease(LEDsSemaphore);
 8013e0a:	6860      	ldr	r0, [r4, #4]
 8013e0c:	f7f8 fcf6 	bl	800c7fc <osSemaphoreRelease>
}
 8013e10:	4628      	mov	r0, r5
 8013e12:	b003      	add	sp, #12
 8013e14:	bd30      	pop	{r4, r5, pc}

08013e16 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			return self->BlinkOnce(*input);
 8013e16:	7811      	ldrb	r1, [r2, #0]
 8013e18:	f7ff bfde 	b.w	8013dd8 <_ZN4LEDS9BlinkOnceEh>

08013e1c <_ZN4LEDS9GetRGBLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetRGBLED(uint8_t ID, bool* success) {
 8013e1c:	b570      	push	{r4, r5, r6, lr}
 8013e1e:	e9d0 3405 	ldrd	r3, r4, [r0, #20]
    uint8_t index = 0;
    for (RGBLED & led : RGB_LEDs) {
 8013e22:	2000      	movs	r0, #0
 8013e24:	429c      	cmp	r4, r3
 8013e26:	461d      	mov	r5, r3
 8013e28:	d102      	bne.n	8013e30 <_ZN4LEDS9GetRGBLEDEhPb+0x14>
 8013e2a:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	e006      	b.n	8013e3e <_ZN4LEDS9GetRGBLEDEhPb+0x22>
        if (led.ID == ID) {
 8013e30:	782d      	ldrb	r5, [r5, #0]
 8013e32:	1c46      	adds	r6, r0, #1
 8013e34:	3310      	adds	r3, #16
 8013e36:	428d      	cmp	r5, r1
 8013e38:	d103      	bne.n	8013e42 <_ZN4LEDS9GetRGBLEDEhPb+0x26>
 8013e3a:	b2c0      	uxtb	r0, r0
 8013e3c:	2301      	movs	r3, #1
            *success = true;
 8013e3e:	7013      	strb	r3, [r2, #0]
}
 8013e40:	bd70      	pop	{r4, r5, r6, pc}
 8013e42:	4630      	mov	r0, r6
 8013e44:	e7ee      	b.n	8013e24 <_ZN4LEDS9GetRGBLEDEhPb+0x8>

08013e46 <_ZN4LEDS6SetRGBEhhhh>:
bool LEDS::SetRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B) {
 8013e46:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013e4a:	4617      	mov	r7, r2
    uint8_t index = GetRGBLED(ID, &success);
 8013e4c:	f10d 0207 	add.w	r2, sp, #7
bool LEDS::SetRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B) {
 8013e50:	4604      	mov	r4, r0
 8013e52:	461e      	mov	r6, r3
    uint8_t index = GetRGBLED(ID, &success);
 8013e54:	f7ff ffe2 	bl	8013e1c <_ZN4LEDS9GetRGBLEDEhPb>
    if (success) {
 8013e58:	f89d 8007 	ldrb.w	r8, [sp, #7]
    uint8_t index = GetRGBLED(ID, &success);
 8013e5c:	4605      	mov	r5, r0
    if (success) {
 8013e5e:	f1b8 0f00 	cmp.w	r8, #0
 8013e62:	d010      	beq.n	8013e86 <_ZN4LEDS6SetRGBEhhhh+0x40>
    	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013e64:	f04f 31ff 	mov.w	r1, #4294967295
 8013e68:	6860      	ldr	r0, [r4, #4]
 8013e6a:	f7f8 fc93 	bl	800c794 <osSemaphoreAcquire>
 8013e6e:	6961      	ldr	r1, [r4, #20]
 8013e70:	b22d      	sxth	r5, r5
 8013e72:	eb01 1105 	add.w	r1, r1, r5, lsl #4
        RGBLED led = RGB_LEDs[index];
 8013e76:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
        *led.pulse_red = R;
 8013e7a:	6849      	ldr	r1, [r1, #4]
 8013e7c:	600f      	str	r7, [r1, #0]
        *led.pulse_green = G;
 8013e7e:	6016      	str	r6, [r2, #0]
        *led.pulse_blue = B;
 8013e80:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8013e84:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(LEDsSemaphore);
 8013e86:	6860      	ldr	r0, [r4, #4]
 8013e88:	f7f8 fcb8 	bl	800c7fc <osSemaphoreRelease>
}
 8013e8c:	4640      	mov	r0, r8
 8013e8e:	b002      	add	sp, #8
 8013e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013e94 <_ZN4LEDS9GetI2CLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetI2CLED(uint8_t ID, bool* success) {
 8013e94:	b570      	push	{r4, r5, r6, lr}
 8013e96:	e9d0 3408 	ldrd	r3, r4, [r0, #32]
    uint8_t index = 0;
    for (I2CLED & led : I2C_LEDs) {
 8013e9a:	2000      	movs	r0, #0
 8013e9c:	429c      	cmp	r4, r3
 8013e9e:	461d      	mov	r5, r3
 8013ea0:	d102      	bne.n	8013ea8 <_ZN4LEDS9GetI2CLEDEhPb+0x14>
 8013ea2:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	e006      	b.n	8013eb6 <_ZN4LEDS9GetI2CLEDEhPb+0x22>
        if (led.ID == ID) {
 8013ea8:	782d      	ldrb	r5, [r5, #0]
 8013eaa:	1c46      	adds	r6, r0, #1
 8013eac:	3310      	adds	r3, #16
 8013eae:	428d      	cmp	r5, r1
 8013eb0:	d103      	bne.n	8013eba <_ZN4LEDS9GetI2CLEDEhPb+0x26>
 8013eb2:	b2c0      	uxtb	r0, r0
 8013eb4:	2301      	movs	r3, #1
            *success = true;
 8013eb6:	7013      	strb	r3, [r2, #0]
}
 8013eb8:	bd70      	pop	{r4, r5, r6, pc}
 8013eba:	4630      	mov	r0, r6
 8013ebc:	e7ee      	b.n	8013e9c <_ZN4LEDS9GetI2CLEDEhPb+0x8>

08013ebe <_ZN4LEDS12GetI2CRGBLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetI2CRGBLED(uint8_t ID, bool* success) {
 8013ebe:	b570      	push	{r4, r5, r6, lr}
 8013ec0:	e9d0 340b 	ldrd	r3, r4, [r0, #44]	@ 0x2c
    uint8_t index = 0;
    for (I2CRGBLED & led : I2C_RGB_LEDs) {
 8013ec4:	2000      	movs	r0, #0
 8013ec6:	429c      	cmp	r4, r3
 8013ec8:	461d      	mov	r5, r3
 8013eca:	d102      	bne.n	8013ed2 <_ZN4LEDS12GetI2CRGBLEDEhPb+0x14>
 8013ecc:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 8013ece:	4618      	mov	r0, r3
 8013ed0:	e006      	b.n	8013ee0 <_ZN4LEDS12GetI2CRGBLEDEhPb+0x22>
        if (led.ID == ID) {
 8013ed2:	782d      	ldrb	r5, [r5, #0]
 8013ed4:	1c46      	adds	r6, r0, #1
 8013ed6:	3314      	adds	r3, #20
 8013ed8:	428d      	cmp	r5, r1
 8013eda:	d103      	bne.n	8013ee4 <_ZN4LEDS12GetI2CRGBLEDEhPb+0x26>
 8013edc:	b2c0      	uxtb	r0, r0
 8013ede:	2301      	movs	r3, #1
            *success = true;
 8013ee0:	7013      	strb	r3, [r2, #0]
}
 8013ee2:	bd70      	pop	{r4, r5, r6, pc}
 8013ee4:	4630      	mov	r0, r6
 8013ee6:	e7ee      	b.n	8013ec6 <_ZN4LEDS12GetI2CRGBLEDEhPb+0x8>

08013ee8 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm>:
HAL_StatusTypeDef LEDS::ConfigureI2CLED(uint8_t ID, uint16_t memory_address, uint8_t* data, uint16_t size, uint32_t timeout) {
 8013ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013eec:	4604      	mov	r4, r0
 8013eee:	b089      	sub	sp, #36	@ 0x24
 8013ef0:	4688      	mov	r8, r1
 8013ef2:	461f      	mov	r7, r3
 8013ef4:	9205      	str	r2, [sp, #20]
 8013ef6:	f8bd b048 	ldrh.w	fp, [sp, #72]	@ 0x48
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 8013efa:	f7ef fbef 	bl	80036dc <HAL_GetTick>
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013efe:	f04f 31ff 	mov.w	r1, #4294967295
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 8013f02:	4605      	mov	r5, r0
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013f04:	6860      	ldr	r0, [r4, #4]
 8013f06:	f7f8 fc45 	bl	800c794 <osSemaphoreAcquire>
	index = GetI2CRGBLED(ID, &success);
 8013f0a:	f10d 021f 	add.w	r2, sp, #31
 8013f0e:	4641      	mov	r1, r8
 8013f10:	4620      	mov	r0, r4
 8013f12:	f7ff ffd4 	bl	8013ebe <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (success) {
 8013f16:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013f1a:	b323      	cbz	r3, 8013f66 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x7e>
 8013f1c:	b200      	sxth	r0, r0
 8013f1e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8013f20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013f24:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		present = led->present;
 8013f28:	785e      	ldrb	r6, [r3, #1]
	osSemaphoreRelease(LEDsSemaphore);
 8013f2a:	6860      	ldr	r0, [r4, #4]
		interface = led->interface;
 8013f2c:	f8d3 8004 	ldr.w	r8, [r3, #4]
		device_address = led->device_address;
 8013f30:	f8b3 9008 	ldrh.w	r9, [r3, #8]
		memory_address_size = led->memory_address_size;
 8013f34:	f8b3 a00a 	ldrh.w	sl, [r3, #10]
	osSemaphoreRelease(LEDsSemaphore);
 8013f38:	f7f8 fc60 	bl	800c7fc <osSemaphoreRelease>
	if (present) {
 8013f3c:	b18e      	cbz	r6, 8013f62 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x7a>
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 8013f3e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013f40:	441d      	add	r5, r3
			status = HAL_I2C_Mem_Write(interface, device_address, memory_address, memory_address_size, data, size, timeout);
 8013f42:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013f44:	4649      	mov	r1, r9
 8013f46:	9a05      	ldr	r2, [sp, #20]
 8013f48:	4640      	mov	r0, r8
 8013f4a:	9700      	str	r7, [sp, #0]
 8013f4c:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013f50:	4653      	mov	r3, sl
 8013f52:	f7f2 fe37 	bl	8006bc4 <HAL_I2C_Mem_Write>
		} while ((status == HAL_BUSY) && (HAL_GetTick() < end_timestamp)); // try until the bus is free
 8013f56:	2802      	cmp	r0, #2
 8013f58:	d10f      	bne.n	8013f7a <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x92>
 8013f5a:	f7ef fbbf 	bl	80036dc <HAL_GetTick>
 8013f5e:	42a8      	cmp	r0, r5
 8013f60:	d3ef      	bcc.n	8013f42 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x5a>
	HAL_StatusTypeDef status = HAL_BUSY;
 8013f62:	2002      	movs	r0, #2
 8013f64:	e009      	b.n	8013f7a <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x92>
		index = GetI2CLED(ID, &success);
 8013f66:	4620      	mov	r0, r4
 8013f68:	f7ff ff94 	bl	8013e94 <_ZN4LEDS9GetI2CLEDEhPb>
		if (!success) {
 8013f6c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013f70:	b933      	cbnz	r3, 8013f80 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x98>
			osSemaphoreRelease(LEDsSemaphore);
 8013f72:	6860      	ldr	r0, [r4, #4]
 8013f74:	f7f8 fc42 	bl	800c7fc <osSemaphoreRelease>
			return HAL_ERROR;
 8013f78:	2001      	movs	r0, #1
}
 8013f7a:	b009      	add	sp, #36	@ 0x24
 8013f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f80:	b200      	sxth	r0, r0
 8013f82:	6a23      	ldr	r3, [r4, #32]
 8013f84:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8013f88:	e7ce      	b.n	8013f28 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x40>

08013f8a <_ZN4LEDS15ConfigureI2CLEDEhthm>:
HAL_StatusTypeDef LEDS::ConfigureI2CLED(uint8_t ID, uint16_t memory_address, uint8_t data, uint32_t timeout) {
 8013f8a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buffer = data;
 8013f8c:	f88d 300f 	strb.w	r3, [sp, #15]
	return ConfigureI2CLED(ID, memory_address, &buffer, 1, timeout);
 8013f90:	9b06      	ldr	r3, [sp, #24]
 8013f92:	9301      	str	r3, [sp, #4]
 8013f94:	2301      	movs	r3, #1
 8013f96:	9300      	str	r3, [sp, #0]
 8013f98:	f10d 030f 	add.w	r3, sp, #15
 8013f9c:	f7ff ffa4 	bl	8013ee8 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm>
}
 8013fa0:	b005      	add	sp, #20
 8013fa2:	f85d fb04 	ldr.w	pc, [sp], #4

08013fa6 <_ZN4LEDS6SetLEDEhhm>:
HAL_StatusTypeDef LEDS::SetLED(uint8_t ID, uint8_t value, uint32_t timeout) {
 8013fa6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013faa:	4604      	mov	r4, r0
 8013fac:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013fae:	6840      	ldr	r0, [r0, #4]
 8013fb0:	f04f 31ff 	mov.w	r1, #4294967295
HAL_StatusTypeDef LEDS::SetLED(uint8_t ID, uint8_t value, uint32_t timeout) {
 8013fb4:	461f      	mov	r7, r3
 8013fb6:	4616      	mov	r6, r2
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8013fb8:	f7f8 fbec 	bl	800c794 <osSemaphoreAcquire>
	uint8_t index = GetI2CLED(ID, &success);
 8013fbc:	f10d 020f 	add.w	r2, sp, #15
 8013fc0:	4629      	mov	r1, r5
 8013fc2:	4620      	mov	r0, r4
 8013fc4:	f7ff ff66 	bl	8013e94 <_ZN4LEDS9GetI2CLEDEhPb>
	if (!success) {
 8013fc8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8013fcc:	b933      	cbnz	r3, 8013fdc <_ZN4LEDS6SetLEDEhhm+0x36>
		osSemaphoreRelease(LEDsSemaphore);
 8013fce:	6860      	ldr	r0, [r4, #4]
 8013fd0:	f7f8 fc14 	bl	800c7fc <osSemaphoreRelease>
		return HAL_ERROR;
 8013fd4:	2001      	movs	r0, #1
}
 8013fd6:	b004      	add	sp, #16
 8013fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fdc:	6a23      	ldr	r3, [r4, #32]
 8013fde:	b200      	sxth	r0, r0
 8013fe0:	eb03 1800 	add.w	r8, r3, r0, lsl #4
	osSemaphoreRelease(LEDsSemaphore);
 8013fe4:	6860      	ldr	r0, [r4, #4]
 8013fe6:	f7f8 fc09 	bl	800c7fc <osSemaphoreRelease>
	return ConfigureI2CLED(ID, led->light_address, value, timeout);
 8013fea:	4633      	mov	r3, r6
 8013fec:	f8b8 200e 	ldrh.w	r2, [r8, #14]
 8013ff0:	4629      	mov	r1, r5
 8013ff2:	4620      	mov	r0, r4
 8013ff4:	9700      	str	r7, [sp, #0]
 8013ff6:	f7ff ffc8 	bl	8013f8a <_ZN4LEDS15ConfigureI2CLEDEhthm>
 8013ffa:	e7ec      	b.n	8013fd6 <_ZN4LEDS6SetLEDEhhm+0x30>

08013ffc <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8013ffc:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8013ffe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014000:	4604      	mov	r4, r0
 8014002:	4615      	mov	r5, r2
			if (length != 2) return false;
 8014004:	d002      	beq.n	801400c <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x10>
 8014006:	2000      	movs	r0, #0
		}
 8014008:	b003      	add	sp, #12
 801400a:	bd30      	pop	{r4, r5, pc}
			self->GetLED(ID, &success);
 801400c:	f10d 0207 	add.w	r2, sp, #7
 8014010:	7829      	ldrb	r1, [r5, #0]
 8014012:	f7ff fe88 	bl	8013d26 <_ZN4LEDS6GetLEDEhPb>
			if (success) {
 8014016:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801401a:	b14b      	cbz	r3, 8014030 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x34>
				return self->SetLED(input[0], (input[1] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 801401c:	786a      	ldrb	r2, [r5, #1]
 801401e:	4620      	mov	r0, r4
 8014020:	3a00      	subs	r2, #0
 8014022:	bf18      	it	ne
 8014024:	2201      	movne	r2, #1
		}
 8014026:	b003      	add	sp, #12
 8014028:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				return self->SetLED(input[0], (input[1] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 801402c:	f7ff be90 	b.w	8013d50 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
			self->GetI2CLED(ID, &success);
 8014030:	4620      	mov	r0, r4
 8014032:	f7ff ff2f 	bl	8013e94 <_ZN4LEDS9GetI2CLEDEhPb>
			if (success) {
 8014036:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d0e3      	beq.n	8014006 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0xa>
				return self->SetLED(input[0], input[1]) == HAL_OK;
 801403e:	f04f 33ff 	mov.w	r3, #4294967295
 8014042:	786a      	ldrb	r2, [r5, #1]
 8014044:	4620      	mov	r0, r4
 8014046:	f7ff ffae 	bl	8013fa6 <_ZN4LEDS6SetLEDEhhm>
 801404a:	fab0 f080 	clz	r0, r0
 801404e:	0940      	lsrs	r0, r0, #5
 8014050:	e7da      	b.n	8014008 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0xc>

08014052 <_ZN4LEDS13SetBrightnessEhhm>:
HAL_StatusTypeDef LEDS::SetBrightness(uint8_t ID, uint8_t brightness, uint32_t timeout) {
 8014052:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8014056:	4604      	mov	r4, r0
 8014058:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 801405a:	6840      	ldr	r0, [r0, #4]
 801405c:	f04f 31ff 	mov.w	r1, #4294967295
HAL_StatusTypeDef LEDS::SetBrightness(uint8_t ID, uint8_t brightness, uint32_t timeout) {
 8014060:	461f      	mov	r7, r3
 8014062:	4616      	mov	r6, r2
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8014064:	f7f8 fb96 	bl	800c794 <osSemaphoreAcquire>
	uint8_t index = GetI2CRGBLED(ID, &success);
 8014068:	f10d 020f 	add.w	r2, sp, #15
 801406c:	4629      	mov	r1, r5
 801406e:	4620      	mov	r0, r4
 8014070:	f7ff ff25 	bl	8013ebe <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (!success) {
 8014074:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8014078:	b933      	cbnz	r3, 8014088 <_ZN4LEDS13SetBrightnessEhhm+0x36>
		osSemaphoreRelease(LEDsSemaphore);
 801407a:	6860      	ldr	r0, [r4, #4]
 801407c:	f7f8 fbbe 	bl	800c7fc <osSemaphoreRelease>
		return HAL_ERROR;
 8014080:	2001      	movs	r0, #1
}
 8014082:	b004      	add	sp, #16
 8014084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014088:	b200      	sxth	r0, r0
 801408a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801408c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8014090:	eb03 0880 	add.w	r8, r3, r0, lsl #2
	osSemaphoreRelease(LEDsSemaphore);
 8014094:	6860      	ldr	r0, [r4, #4]
 8014096:	f7f8 fbb1 	bl	800c7fc <osSemaphoreRelease>
	return ConfigureI2CLED(ID, led->brightness_address, brightness, timeout);
 801409a:	4633      	mov	r3, r6
 801409c:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 80140a0:	4629      	mov	r1, r5
 80140a2:	4620      	mov	r0, r4
 80140a4:	9700      	str	r7, [sp, #0]
 80140a6:	f7ff ff70 	bl	8013f8a <_ZN4LEDS15ConfigureI2CLEDEhthm>
 80140aa:	e7ea      	b.n	8014082 <_ZN4LEDS13SetBrightnessEhhm+0x30>

080140ac <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80140ac:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80140ae:	4611      	mov	r1, r2
 80140b0:	b508      	push	{r3, lr}
			if (length != 2) return false;
 80140b2:	d109      	bne.n	80140c8 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x1c>
			return self->SetBrightness(input[0], input[1]) == HAL_OK;
 80140b4:	f04f 33ff 	mov.w	r3, #4294967295
 80140b8:	7852      	ldrb	r2, [r2, #1]
 80140ba:	7809      	ldrb	r1, [r1, #0]
 80140bc:	f7ff ffc9 	bl	8014052 <_ZN4LEDS13SetBrightnessEhhm>
 80140c0:	fab0 f080 	clz	r0, r0
 80140c4:	0940      	lsrs	r0, r0, #5
		}
 80140c6:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 80140c8:	2000      	movs	r0, #0
 80140ca:	e7fc      	b.n	80140c6 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x1a>

080140cc <_ZN4LEDS9SetI2CRGBEhhhhm>:
HAL_StatusTypeDef LEDS::SetI2CRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B, uint32_t timeout) {
 80140cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80140d0:	4604      	mov	r4, r0
 80140d2:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80140d4:	6840      	ldr	r0, [r0, #4]
 80140d6:	f04f 31ff 	mov.w	r1, #4294967295
HAL_StatusTypeDef LEDS::SetI2CRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B, uint32_t timeout) {
 80140da:	4699      	mov	r9, r3
 80140dc:	4692      	mov	sl, r2
 80140de:	f89d 8030 	ldrb.w	r8, [sp, #48]	@ 0x30
 80140e2:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80140e4:	f7f8 fb56 	bl	800c794 <osSemaphoreAcquire>
	uint8_t index = GetI2CRGBLED(ID, &success);
 80140e8:	f10d 020f 	add.w	r2, sp, #15
 80140ec:	4629      	mov	r1, r5
 80140ee:	4620      	mov	r0, r4
 80140f0:	f7ff fee5 	bl	8013ebe <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (!success) {
 80140f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80140f8:	b933      	cbnz	r3, 8014108 <_ZN4LEDS9SetI2CRGBEhhhhm+0x3c>
		osSemaphoreRelease(LEDsSemaphore);
 80140fa:	6860      	ldr	r0, [r4, #4]
 80140fc:	f7f8 fb7e 	bl	800c7fc <osSemaphoreRelease>
		return HAL_ERROR;
 8014100:	2001      	movs	r0, #1
}
 8014102:	b004      	add	sp, #16
 8014104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014108:	b200      	sxth	r0, r0
 801410a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801410c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8014110:	eb06 0680 	add.w	r6, r6, r0, lsl #2
	osSemaphoreRelease(LEDsSemaphore);
 8014114:	6860      	ldr	r0, [r4, #4]
 8014116:	f7f8 fb71 	bl	800c7fc <osSemaphoreRelease>
	status = ConfigureI2CLED(ID, led->R_address, R, timeout);
 801411a:	4653      	mov	r3, sl
 801411c:	89f2      	ldrh	r2, [r6, #14]
 801411e:	4629      	mov	r1, r5
 8014120:	4620      	mov	r0, r4
 8014122:	9700      	str	r7, [sp, #0]
 8014124:	f7ff ff31 	bl	8013f8a <_ZN4LEDS15ConfigureI2CLEDEhthm>
	if (status != HAL_OK) return status;
 8014128:	2800      	cmp	r0, #0
 801412a:	d1ea      	bne.n	8014102 <_ZN4LEDS9SetI2CRGBEhhhhm+0x36>
	status = ConfigureI2CLED(ID, led->G_address, G, timeout);
 801412c:	8a32      	ldrh	r2, [r6, #16]
 801412e:	464b      	mov	r3, r9
 8014130:	4629      	mov	r1, r5
 8014132:	4620      	mov	r0, r4
 8014134:	9700      	str	r7, [sp, #0]
 8014136:	f7ff ff28 	bl	8013f8a <_ZN4LEDS15ConfigureI2CLEDEhthm>
	if (status != HAL_OK) return status;
 801413a:	2800      	cmp	r0, #0
 801413c:	d1e1      	bne.n	8014102 <_ZN4LEDS9SetI2CRGBEhhhhm+0x36>
	status = ConfigureI2CLED(ID, led->B_address, B, timeout);
 801413e:	8a72      	ldrh	r2, [r6, #18]
 8014140:	4643      	mov	r3, r8
 8014142:	4629      	mov	r1, r5
 8014144:	4620      	mov	r0, r4
 8014146:	970c      	str	r7, [sp, #48]	@ 0x30
}
 8014148:	b004      	add	sp, #16
 801414a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	status = ConfigureI2CLED(ID, led->B_address, B, timeout);
 801414e:	f7ff bf1c 	b.w	8013f8a <_ZN4LEDS15ConfigureI2CLEDEhthm>

08014152 <_ZN4LEDS8ClearLEDEh>:
bool LEDS::ClearLED(uint8_t ID) {
 8014152:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8014156:	4604      	mov	r4, r0
 8014158:	460d      	mov	r5, r1
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 801415a:	6840      	ldr	r0, [r0, #4]
 801415c:	f04f 31ff 	mov.w	r1, #4294967295
 8014160:	f7f8 fb18 	bl	800c794 <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 8014164:	f10d 020f 	add.w	r2, sp, #15
 8014168:	4629      	mov	r1, r5
 801416a:	4620      	mov	r0, r4
 801416c:	f7ff fddb 	bl	8013d26 <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8014170:	f89d 600f 	ldrb.w	r6, [sp, #15]
 8014174:	b196      	cbz	r6, 801419c <_ZN4LEDS8ClearLEDEh+0x4a>
 8014176:	68a3      	ldr	r3, [r4, #8]
 8014178:	b200      	sxth	r0, r0
        LEDs[index].blink = false;
 801417a:	2200      	movs	r2, #0
 801417c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
        HAL_GPIO_WritePin(LEDs[index].gpio.port, LEDs[index].gpio.pin, GPIO_PIN_RESET);
 8014180:	6858      	ldr	r0, [r3, #4]
 8014182:	8919      	ldrh	r1, [r3, #8]
        LEDs[index].blink = false;
 8014184:	819a      	strh	r2, [r3, #12]
        LEDs[index].counter = 0;
 8014186:	739a      	strb	r2, [r3, #14]
        HAL_GPIO_WritePin(LEDs[index].gpio.port, LEDs[index].gpio.pin, GPIO_PIN_RESET);
 8014188:	f7f2 fb34 	bl	80067f4 <HAL_GPIO_WritePin>
        osSemaphoreRelease(LEDsSemaphore);
 801418c:	6860      	ldr	r0, [r4, #4]
 801418e:	f7f8 fb35 	bl	800c7fc <osSemaphoreRelease>
        return true;
 8014192:	2601      	movs	r6, #1
}
 8014194:	4630      	mov	r0, r6
 8014196:	b004      	add	sp, #16
 8014198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    index = GetRGBLED(ID, &success);
 801419c:	4620      	mov	r0, r4
 801419e:	f7ff fe3d 	bl	8013e1c <_ZN4LEDS9GetRGBLEDEhPb>
	if (success) {
 80141a2:	f89d 800f 	ldrb.w	r8, [sp, #15]
 80141a6:	f1b8 0f00 	cmp.w	r8, #0
 80141aa:	d00a      	beq.n	80141c2 <_ZN4LEDS8ClearLEDEh+0x70>
		osSemaphoreRelease(LEDsSemaphore);
 80141ac:	6860      	ldr	r0, [r4, #4]
 80141ae:	f7f8 fb25 	bl	800c7fc <osSemaphoreRelease>
		SetRGB(ID, 0, 0, 0);
 80141b2:	4633      	mov	r3, r6
 80141b4:	4632      	mov	r2, r6
 80141b6:	4629      	mov	r1, r5
 80141b8:	4620      	mov	r0, r4
 80141ba:	9600      	str	r6, [sp, #0]
 80141bc:	f7ff fe43 	bl	8013e46 <_ZN4LEDS6SetRGBEhhhh>
		return true;
 80141c0:	e7e7      	b.n	8014192 <_ZN4LEDS8ClearLEDEh+0x40>
    index = GetI2CLED(ID, &success);
 80141c2:	4620      	mov	r0, r4
 80141c4:	f7ff fe66 	bl	8013e94 <_ZN4LEDS9GetI2CLEDEhPb>
    if (success) {
 80141c8:	f89d 700f 	ldrb.w	r7, [sp, #15]
 80141cc:	b157      	cbz	r7, 80141e4 <_ZN4LEDS8ClearLEDEh+0x92>
    	osSemaphoreRelease(LEDsSemaphore);
 80141ce:	6860      	ldr	r0, [r4, #4]
 80141d0:	f7f8 fb14 	bl	800c7fc <osSemaphoreRelease>
    	SetLED(ID, 0);
 80141d4:	f04f 33ff 	mov.w	r3, #4294967295
 80141d8:	4642      	mov	r2, r8
 80141da:	4629      	mov	r1, r5
 80141dc:	4620      	mov	r0, r4
 80141de:	f7ff fee2 	bl	8013fa6 <_ZN4LEDS6SetLEDEhhm>
    	return true;
 80141e2:	e7d6      	b.n	8014192 <_ZN4LEDS8ClearLEDEh+0x40>
    index = GetI2CRGBLED(ID, &success);
 80141e4:	4620      	mov	r0, r4
 80141e6:	f7ff fe6a 	bl	8013ebe <_ZN4LEDS12GetI2CRGBLEDEhPb>
    if (success) {
 80141ea:	f89d 600f 	ldrb.w	r6, [sp, #15]
    	osSemaphoreRelease(LEDsSemaphore);
 80141ee:	6860      	ldr	r0, [r4, #4]
    if (success) {
 80141f0:	b166      	cbz	r6, 801420c <_ZN4LEDS8ClearLEDEh+0xba>
    	osSemaphoreRelease(LEDsSemaphore);
 80141f2:	f7f8 fb03 	bl	800c7fc <osSemaphoreRelease>
		SetI2CRGB(ID, 0, 0, 0);
 80141f6:	f04f 33ff 	mov.w	r3, #4294967295
 80141fa:	463a      	mov	r2, r7
 80141fc:	4629      	mov	r1, r5
 80141fe:	4620      	mov	r0, r4
 8014200:	e9cd 7300 	strd	r7, r3, [sp]
 8014204:	463b      	mov	r3, r7
 8014206:	f7ff ff61 	bl	80140cc <_ZN4LEDS9SetI2CRGBEhhhhm>
		return true;
 801420a:	e7c2      	b.n	8014192 <_ZN4LEDS8ClearLEDEh+0x40>
    osSemaphoreRelease(LEDsSemaphore);
 801420c:	f7f8 faf6 	bl	800c7fc <osSemaphoreRelease>
    return false;
 8014210:	e7c0      	b.n	8014194 <_ZN4LEDS8ClearLEDEh+0x42>

08014212 <_ZN4LEDS11ExistingLEDEh>:
bool LEDS::ExistingLED(uint8_t ID) {
 8014212:	b513      	push	{r0, r1, r4, lr}
	GetLED(ID, &success);
 8014214:	f10d 0207 	add.w	r2, sp, #7
bool LEDS::ExistingLED(uint8_t ID) {
 8014218:	4604      	mov	r4, r0
	GetLED(ID, &success);
 801421a:	f7ff fd84 	bl	8013d26 <_ZN4LEDS6GetLEDEhPb>
	if (success) return true;
 801421e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014222:	b113      	cbz	r3, 801422a <_ZN4LEDS11ExistingLEDEh+0x18>
 8014224:	2001      	movs	r0, #1
}
 8014226:	b002      	add	sp, #8
 8014228:	bd10      	pop	{r4, pc}
	GetRGBLED(ID, &success);
 801422a:	4620      	mov	r0, r4
 801422c:	f7ff fdf6 	bl	8013e1c <_ZN4LEDS9GetRGBLEDEhPb>
	if (success) return true;
 8014230:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d1f5      	bne.n	8014224 <_ZN4LEDS11ExistingLEDEh+0x12>
	GetI2CLED(ID, &success);
 8014238:	4620      	mov	r0, r4
 801423a:	f7ff fe2b 	bl	8013e94 <_ZN4LEDS9GetI2CLEDEhPb>
	if (success) return true;
 801423e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d1ee      	bne.n	8014224 <_ZN4LEDS11ExistingLEDEh+0x12>
	GetI2CRGBLED(ID, &success);
 8014246:	4620      	mov	r0, r4
 8014248:	f7ff fe39 	bl	8013ebe <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (success) return true;
 801424c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8014250:	e7e9      	b.n	8014226 <_ZN4LEDS11ExistingLEDEh+0x14>

08014252 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 4) return false;
 8014252:	2b04      	cmp	r3, #4
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8014254:	b530      	push	{r4, r5, lr}
 8014256:	4605      	mov	r5, r0
 8014258:	b085      	sub	sp, #20
 801425a:	4614      	mov	r4, r2
			if (length != 4) return false;
 801425c:	d002      	beq.n	8014264 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x12>
 801425e:	2000      	movs	r0, #0
		}
 8014260:	b005      	add	sp, #20
 8014262:	bd30      	pop	{r4, r5, pc}
			self->GetRGBLED(ID, &success);
 8014264:	f10d 020f 	add.w	r2, sp, #15
 8014268:	7821      	ldrb	r1, [r4, #0]
 801426a:	f7ff fdd7 	bl	8013e1c <_ZN4LEDS9GetRGBLEDEhPb>
			if (success) {
 801426e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8014272:	b13b      	cbz	r3, 8014284 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x32>
				return self->SetRGB(ID, input[1], input[2], input[3]);
 8014274:	78e3      	ldrb	r3, [r4, #3]
 8014276:	4628      	mov	r0, r5
 8014278:	9300      	str	r3, [sp, #0]
 801427a:	78a3      	ldrb	r3, [r4, #2]
 801427c:	7862      	ldrb	r2, [r4, #1]
 801427e:	f7ff fde2 	bl	8013e46 <_ZN4LEDS6SetRGBEhhhh>
 8014282:	e7ed      	b.n	8014260 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xe>
			self->GetI2CRGBLED(ID, &success);
 8014284:	4628      	mov	r0, r5
 8014286:	f7ff fe1a 	bl	8013ebe <_ZN4LEDS12GetI2CRGBLEDEhPb>
			if (success) {
 801428a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d0e5      	beq.n	801425e <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xc>
				return self->SetI2CRGB(ID, input[1], input[2], input[3]) == HAL_OK;
 8014292:	f04f 33ff 	mov.w	r3, #4294967295
 8014296:	4628      	mov	r0, r5
 8014298:	9301      	str	r3, [sp, #4]
 801429a:	78e3      	ldrb	r3, [r4, #3]
 801429c:	9300      	str	r3, [sp, #0]
 801429e:	78a3      	ldrb	r3, [r4, #2]
 80142a0:	7862      	ldrb	r2, [r4, #1]
 80142a2:	f7ff ff13 	bl	80140cc <_ZN4LEDS9SetI2CRGBEhhhhm>
 80142a6:	fab0 f080 	clz	r0, r0
 80142aa:	0940      	lsrs	r0, r0, #5
 80142ac:	e7d8      	b.n	8014260 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xe>

080142ae <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80142ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142b0:	4604      	mov	r4, r0
 80142b2:	460e      	mov	r6, r1
 80142b4:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80142b6:	2700      	movs	r7, #0
      for (; __first != __last; ++__first, (void)++__cur)
 80142b8:	42b4      	cmp	r4, r6
 80142ba:	4628      	mov	r0, r5
 80142bc:	f105 0520 	add.w	r5, r5, #32
 80142c0:	d100      	bne.n	80142c4 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x16>
    }
 80142c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
struct LED {
 80142c4:	4622      	mov	r2, r4
 80142c6:	f812 3b04 	ldrb.w	r3, [r2], #4
 80142ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80142ce:	f805 3c20 	strb.w	r3, [r5, #-32]
 80142d2:	f1a5 031c 	sub.w	r3, r5, #28
 80142d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80142da:	7b23      	ldrb	r3, [r4, #12]
      }
 80142dc:	f104 0010 	add.w	r0, r4, #16
 80142e0:	f805 3c14 	strb.w	r3, [r5, #-20]
 80142e4:	7b63      	ldrb	r3, [r4, #13]
 80142e6:	f805 3c13 	strb.w	r3, [r5, #-19]
 80142ea:	7ba3      	ldrb	r3, [r4, #14]
 80142ec:	f805 3c12 	strb.w	r3, [r5, #-18]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80142f0:	6923      	ldr	r3, [r4, #16]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80142f2:	6127      	str	r7, [r4, #16]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80142f4:	f845 3c10 	str.w	r3, [r5, #-16]
 80142f8:	6963      	ldr	r3, [r4, #20]
 80142fa:	f845 3c0c 	str.w	r3, [r5, #-12]
	  _M_end_of_storage(__x._M_end_of_storage)
 80142fe:	69a3      	ldr	r3, [r4, #24]
 8014300:	f845 3c08 	str.w	r3, [r5, #-8]
 8014304:	7f23      	ldrb	r3, [r4, #28]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8014306:	e9c4 7705 	strd	r7, r7, [r4, #20]
 801430a:	f805 3c04 	strb.w	r3, [r5, #-4]
      for (; __first != __last; ++__first, (void)++__cur)
 801430e:	3420      	adds	r4, #32
      }
 8014310:	f7ec fc7a 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8014314:	e7d0      	b.n	80142b8 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>
	...

08014318 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8014318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801431c:	e9d0 8900 	ldrd	r8, r9, [r0]
 8014320:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8014322:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014326:	eba9 0208 	sub.w	r2, r9, r8
 801432a:	4607      	mov	r7, r0
 801432c:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 801432e:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014332:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 8014336:	d102      	bne.n	801433e <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8014338:	4820      	ldr	r0, [pc, #128]	@ (80143bc <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
 801433a:	f007 fd21 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 801433e:	45c1      	cmp	r9, r8
 8014340:	bf14      	ite	ne
 8014342:	4622      	movne	r2, r4
 8014344:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8014346:	eba1 0508 	sub.w	r5, r1, r8
 801434a:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801434c:	d231      	bcs.n	80143b2 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801434e:	b394      	cbz	r4, 80143b6 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014350:	429c      	cmp	r4, r3
 8014352:	bf28      	it	cs
 8014354:	461c      	movcs	r4, r3
 8014356:	0120      	lsls	r0, r4, #4
 8014358:	f007 fc5d 	bl	801bc16 <_Znwj>
 801435c:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801435e:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8014362:	2d00      	cmp	r5, #0
 8014364:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8014368:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 801436c:	dd04      	ble.n	8014378 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801436e:	462a      	mov	r2, r5
 8014370:	4641      	mov	r1, r8
 8014372:	4630      	mov	r0, r6
 8014374:	f007 ff86 	bl	801c284 <memmove>
      ptrdiff_t __count = __last - __first;
 8014378:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 801437c:	3510      	adds	r5, #16
      if (__count > 0)
 801437e:	f1b9 0f00 	cmp.w	r9, #0
 8014382:	4435      	add	r5, r6
 8014384:	dd04      	ble.n	8014390 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8014386:	464a      	mov	r2, r9
 8014388:	4651      	mov	r1, sl
 801438a:	4628      	mov	r0, r5
 801438c:	f008 f872 	bl	801c474 <memcpy>
      return __result + __count;
 8014390:	444d      	add	r5, r9
	if (__p)
 8014392:	f1b8 0f00 	cmp.w	r8, #0
 8014396:	d005      	beq.n	80143a4 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 8014398:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801439a:	4640      	mov	r0, r8
 801439c:	eba1 0108 	sub.w	r1, r1, r8
 80143a0:	f007 fc14 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 80143a4:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80143a8:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 80143ac:	60be      	str	r6, [r7, #8]
    }
 80143ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80143b2:	461c      	mov	r4, r3
 80143b4:	e7cf      	b.n	8014356 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80143b6:	4626      	mov	r6, r4
 80143b8:	e7d1      	b.n	801435e <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 80143ba:	bf00      	nop
 80143bc:	0801c592 	.word	0x0801c592

080143c0 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_>:
bool LEDS::AddRGBLED(uint8_t ID, uint32_t* pulse_red_, uint32_t* pulse_green_, uint32_t* pulse_blue_) {
 80143c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80143c4:	4604      	mov	r4, r0
 80143c6:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80143c8:	6840      	ldr	r0, [r0, #4]
 80143ca:	f04f 31ff 	mov.w	r1, #4294967295
bool LEDS::AddRGBLED(uint8_t ID, uint32_t* pulse_red_, uint32_t* pulse_green_, uint32_t* pulse_blue_) {
 80143ce:	4617      	mov	r7, r2
 80143d0:	461e      	mov	r6, r3
 80143d2:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80143d6:	f7f8 f9dd 	bl	800c794 <osSemaphoreAcquire>
	if (ExistingLED(ID)) {
 80143da:	4629      	mov	r1, r5
 80143dc:	4620      	mov	r0, r4
 80143de:	f7ff ff18 	bl	8014212 <_ZN4LEDS11ExistingLEDEh>
 80143e2:	b130      	cbz	r0, 80143f2 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_+0x32>
		osSemaphoreRelease(LEDsSemaphore);
 80143e4:	6860      	ldr	r0, [r4, #4]
 80143e6:	f7f8 fa09 	bl	800c7fc <osSemaphoreRelease>
		return false;
 80143ea:	2000      	movs	r0, #0
}
 80143ec:	b004      	add	sp, #16
 80143ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	led.ID = ID;
 80143f2:	f88d 5000 	strb.w	r5, [sp]
	led.pulse_red = pulse_red_;
 80143f6:	466a      	mov	r2, sp
	led.pulse_blue = pulse_blue_;
 80143f8:	f8cd 800c 	str.w	r8, [sp, #12]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80143fc:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
	led.pulse_green = pulse_green_;
 8014400:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8014404:	429d      	cmp	r5, r3
 8014406:	d00e      	beq.n	8014426 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_+0x66>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014408:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801440a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801440e:	3510      	adds	r5, #16
 8014410:	61a5      	str	r5, [r4, #24]
    osSemaphoreRelease(LEDsSemaphore);
 8014412:	6860      	ldr	r0, [r4, #4]
 8014414:	f7f8 f9f2 	bl	800c7fc <osSemaphoreRelease>
    *pulse_red_ = 0;
 8014418:	2300      	movs	r3, #0
    return true;
 801441a:	2001      	movs	r0, #1
    *pulse_red_ = 0;
 801441c:	603b      	str	r3, [r7, #0]
    *pulse_green_ = 0;
 801441e:	6033      	str	r3, [r6, #0]
    *pulse_blue_ = 0;
 8014420:	f8c8 3000 	str.w	r3, [r8]
    return true;
 8014424:	e7e2      	b.n	80143ec <_ZN4LEDS9AddRGBLEDEhPmS0_S0_+0x2c>
	  _M_realloc_insert(end(), __x);
 8014426:	4629      	mov	r1, r5
 8014428:	f104 0014 	add.w	r0, r4, #20
 801442c:	f7ff ff74 	bl	8014318 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8014430:	e7ef      	b.n	8014412 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_+0x52>

08014432 <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8014432:	b570      	push	{r4, r5, r6, lr}
 8014434:	4604      	mov	r4, r0
 8014436:	b086      	sub	sp, #24
 8014438:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801443a:	6800      	ldr	r0, [r0, #0]
 801443c:	f04f 31ff 	mov.w	r1, #4294967295
 8014440:	f7f8 f9a8 	bl	800c794 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8014444:	f10d 0207 	add.w	r2, sp, #7
 8014448:	4631      	mov	r1, r6
 801444a:	4620      	mov	r0, r4
 801444c:	f003 ff65 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8014450:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8014454:	b125      	cbz	r5, 8014460 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8014456:	6820      	ldr	r0, [r4, #0]
 8014458:	f7f8 f9d0 	bl	800c7fc <osSemaphoreRelease>
}
 801445c:	b006      	add	sp, #24
 801445e:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014460:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8014464:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014468:	f7ff fbaa 	bl	8013bc0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 801446c:	2301      	movs	r3, #1
 801446e:	f8ad 600a 	strh.w	r6, [sp, #10]
 8014472:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8014476:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 801447a:	f88d 000c 	strb.w	r0, [sp, #12]
 801447e:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8014482:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8014486:	2b00      	cmp	r3, #0
 8014488:	d0e5      	beq.n	8014456 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
      push_back(const value_type& __x)
 801448a:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801448c:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 8014490:	429d      	cmp	r5, r3
 8014492:	d005      	beq.n	80144a0 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x6e>
 8014494:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8014496:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801449a:	3510      	adds	r5, #16
 801449c:	60a5      	str	r5, [r4, #8]
 801449e:	e7da      	b.n	8014456 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	  _M_realloc_insert(end(), __x);
 80144a0:	4629      	mov	r1, r5
 80144a2:	1d20      	adds	r0, r4, #4
 80144a4:	f7fa ff88 	bl	800f3b8 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 80144a8:	e7d5      	b.n	8014456 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	...

080144ac <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 80144ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144b0:	460c      	mov	r4, r1
 80144b2:	b087      	sub	sp, #28
 80144b4:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80144b6:	f04f 31ff 	mov.w	r1, #4294967295
 80144ba:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 80144bc:	4698      	mov	r8, r3
 80144be:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80144c0:	f7f8 f968 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80144c4:	4621      	mov	r1, r4
 80144c6:	f10d 0207 	add.w	r2, sp, #7
 80144ca:	4630      	mov	r0, r6
 80144cc:	f003 ff25 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80144d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80144d4:	4604      	mov	r4, r0
	if (!success) {
 80144d6:	b92b      	cbnz	r3, 80144e4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 80144d8:	6830      	ldr	r0, [r6, #0]
 80144da:	f7f8 f98f 	bl	800c7fc <osSemaphoreRelease>
}
 80144de:	b007      	add	sp, #28
 80144e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 80144e4:	f10d 0007 	add.w	r0, sp, #7
 80144e8:	f7ff fb6a 	bl	8013bc0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 80144ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d0f1      	beq.n	80144d8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 80144f4:	7923      	ldrb	r3, [r4, #4]
 80144f6:	4298      	cmp	r0, r3
 80144f8:	d1ee      	bne.n	80144d8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 80144fa:	3004      	adds	r0, #4
 80144fc:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8014500:	2f00      	cmp	r7, #0
 8014502:	d0e9      	beq.n	80144d8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8014504:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014506:	e9d7 3500 	ldrd	r3, r5, [r7]
 801450a:	1aea      	subs	r2, r5, r3
 801450c:	1112      	asrs	r2, r2, #4
 801450e:	b9b1      	cbnz	r1, 801453e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 8014510:	7861      	ldrb	r1, [r4, #1]
 8014512:	b9a1      	cbnz	r1, 801453e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 8014514:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014516:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8014518:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 801451a:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801451c:	42a9      	cmp	r1, r5
		callback.write = write;
 801451e:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8014522:	d008      	beq.n	8014536 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
 8014524:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8014526:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801452a:	3510      	adds	r5, #16
 801452c:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 801452e:	2301      	movs	r3, #1
 8014530:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8014532:	7223      	strb	r3, [r4, #8]
 8014534:	e7d0      	b.n	80144d8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 8014536:	4638      	mov	r0, r7
 8014538:	f7fa ffda 	bl	800f4f0 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 801453c:	e7f7      	b.n	801452e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801453e:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 8014540:	4291      	cmp	r1, r2
 8014542:	d302      	bcc.n	801454a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8014544:	4803      	ldr	r0, [pc, #12]	@ (8014554 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 8014546:	f007 fc1e 	bl	801bd86 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 801454a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 801454e:	e9c3 9801 	strd	r9, r8, [r3, #4]
 8014552:	e7ec      	b.n	801452e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 8014554:	0801c5c6 	.word	0x0801c5c6

08014558 <_ZN4LEDS12AddRegistersEv>:
void LEDS::AddRegisters(void) {
 8014558:	b510      	push	{r4, lr}
 801455a:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_LEDS_SET);
 801455c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8014560:	6800      	ldr	r0, [r0, #0]
 8014562:	f7ff ff66 	bl	8014432 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_LEDS_SET, 2);
 8014566:	2202      	movs	r2, #2
 8014568:	f44f 7140 	mov.w	r1, #768	@ 0x300
 801456c:	6820      	ldr	r0, [r4, #0]
 801456e:	f003 ff29 	bl	80183c4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET, (void*) this,
 8014572:	4622      	mov	r2, r4
 8014574:	4b2f      	ldr	r3, [pc, #188]	@ (8014634 <_ZN4LEDS12AddRegistersEv+0xdc>)
 8014576:	f44f 7140 	mov.w	r1, #768	@ 0x300
 801457a:	6820      	ldr	r0, [r4, #0]
 801457c:	f7ff ff96 	bl	80144ac <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_TIMINGS);
 8014580:	6820      	ldr	r0, [r4, #0]
 8014582:	f240 3101 	movw	r1, #769	@ 0x301
 8014586:	f7ff ff54 	bl	8014432 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsVector(REG_LEDS_TIMINGS);
 801458a:	f240 3101 	movw	r1, #769	@ 0x301
 801458e:	6820      	ldr	r0, [r4, #0]
 8014590:	f003 ff34 	bl	80183fc <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_TIMINGS, (void*) this,
 8014594:	4622      	mov	r2, r4
 8014596:	4b28      	ldr	r3, [pc, #160]	@ (8014638 <_ZN4LEDS12AddRegistersEv+0xe0>)
 8014598:	f240 3101 	movw	r1, #769	@ 0x301
 801459c:	6820      	ldr	r0, [r4, #0]
 801459e:	f7ff ff85 	bl	80144ac <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_BLINK);
 80145a2:	6820      	ldr	r0, [r4, #0]
 80145a4:	f240 3102 	movw	r1, #770	@ 0x302
 80145a8:	f7ff ff43 	bl	8014432 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_LEDS_BLINK);
 80145ac:	f240 3102 	movw	r1, #770	@ 0x302
 80145b0:	6820      	ldr	r0, [r4, #0]
 80145b2:	f003 feeb 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_BLINK, (void*) this,
 80145b6:	4622      	mov	r2, r4
 80145b8:	4b20      	ldr	r3, [pc, #128]	@ (801463c <_ZN4LEDS12AddRegistersEv+0xe4>)
 80145ba:	f240 3102 	movw	r1, #770	@ 0x302
 80145be:	6820      	ldr	r0, [r4, #0]
 80145c0:	f7ff ff74 	bl	80144ac <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_BLINK_ONCE);
 80145c4:	6820      	ldr	r0, [r4, #0]
 80145c6:	f240 3103 	movw	r1, #771	@ 0x303
 80145ca:	f7ff ff32 	bl	8014432 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_LEDS_BLINK_ONCE);
 80145ce:	f240 3103 	movw	r1, #771	@ 0x303
 80145d2:	6820      	ldr	r0, [r4, #0]
 80145d4:	f003 feda 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_BLINK_ONCE, (void*) this,
 80145d8:	4b19      	ldr	r3, [pc, #100]	@ (8014640 <_ZN4LEDS12AddRegistersEv+0xe8>)
 80145da:	4622      	mov	r2, r4
 80145dc:	6820      	ldr	r0, [r4, #0]
 80145de:	f240 3103 	movw	r1, #771	@ 0x303
 80145e2:	f7ff ff63 	bl	80144ac <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_SET_RGB);
 80145e6:	6820      	ldr	r0, [r4, #0]
 80145e8:	f44f 7141 	mov.w	r1, #772	@ 0x304
 80145ec:	f7ff ff21 	bl	8014432 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_LEDS_SET_RGB, 4);
 80145f0:	2204      	movs	r2, #4
 80145f2:	f44f 7141 	mov.w	r1, #772	@ 0x304
 80145f6:	6820      	ldr	r0, [r4, #0]
 80145f8:	f003 fee4 	bl	80183c4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET_RGB, (void*) this,
 80145fc:	4b11      	ldr	r3, [pc, #68]	@ (8014644 <_ZN4LEDS12AddRegistersEv+0xec>)
 80145fe:	4622      	mov	r2, r4
 8014600:	6820      	ldr	r0, [r4, #0]
 8014602:	f44f 7141 	mov.w	r1, #772	@ 0x304
 8014606:	f7ff ff51 	bl	80144ac <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_SET_BRIGHNESS);
 801460a:	6820      	ldr	r0, [r4, #0]
 801460c:	f240 3105 	movw	r1, #773	@ 0x305
 8014610:	f7ff ff0f 	bl	8014432 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_LEDS_SET_BRIGHNESS, 2);
 8014614:	2202      	movs	r2, #2
 8014616:	f240 3105 	movw	r1, #773	@ 0x305
 801461a:	6820      	ldr	r0, [r4, #0]
 801461c:	f003 fed2 	bl	80183c4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET_BRIGHNESS, (void*) this,
 8014620:	4622      	mov	r2, r4
 8014622:	6820      	ldr	r0, [r4, #0]
 8014624:	f240 3105 	movw	r1, #773	@ 0x305
 8014628:	4b07      	ldr	r3, [pc, #28]	@ (8014648 <_ZN4LEDS12AddRegistersEv+0xf0>)
}
 801462a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET_BRIGHNESS, (void*) this,
 801462e:	f7ff bf3d 	b.w	80144ac <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 8014632:	bf00      	nop
 8014634:	08013ffd 	.word	0x08013ffd
 8014638:	080148fb 	.word	0x080148fb
 801463c:	08013dd3 	.word	0x08013dd3
 8014640:	08013e17 	.word	0x08013e17
 8014644:	08014253 	.word	0x08014253
 8014648:	080140ad 	.word	0x080140ad

0801464c <_ZN3LEDC1ERKS_>:
 801464c:	460a      	mov	r2, r1
 801464e:	b538      	push	{r3, r4, r5, lr}
 8014650:	460d      	mov	r5, r1
 8014652:	4603      	mov	r3, r0
 8014654:	f812 1b04 	ldrb.w	r1, [r2], #4
 8014658:	4604      	mov	r4, r0
 801465a:	f803 1b04 	strb.w	r1, [r3], #4
 801465e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014662:	89aa      	ldrh	r2, [r5, #12]
 8014664:	e883 0003 	stmia.w	r3, {r0, r1}
 8014668:	7bab      	ldrb	r3, [r5, #14]
 801466a:	f105 0110 	add.w	r1, r5, #16
 801466e:	f104 0010 	add.w	r0, r4, #16
 8014672:	81a2      	strh	r2, [r4, #12]
 8014674:	73a3      	strb	r3, [r4, #14]
 8014676:	f7ec fbc1 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801467a:	7f2b      	ldrb	r3, [r5, #28]
 801467c:	4620      	mov	r0, r4
 801467e:	7723      	strb	r3, [r4, #28]
 8014680:	bd38      	pop	{r3, r4, r5, pc}

08014682 <_ZN4LEDS8TestLEDsEv>:

/**
 * @brief Testing procedure of LEDs. Light them one after the other
 */
void LEDS::TestLEDs(void) {
 8014682:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014686:	4604      	mov	r4, r0
 8014688:	b08b      	sub	sp, #44	@ 0x2c
 801468a:	e9d0 5702 	ldrd	r5, r7, [r0, #8]
#ifdef USE_SMD_LEDs
	for (LED led : LEDs) {
 801468e:	42af      	cmp	r7, r5
 8014690:	d109      	bne.n	80146a6 <_ZN4LEDS8TestLEDsEv+0x24>
		SetLED(led.ID, GPIO_PIN_SET);
		HAL_Delay(100);
		SetLED(led.ID, GPIO_PIN_RESET);
	}
	for (RGBLED led : RGB_LEDs) {
		SetRGB(led.ID, 255, 0, 0);
 8014692:	2700      	movs	r7, #0
 8014694:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 8014698:	e9d4 6805 	ldrd	r6, r8, [r4, #20]
	for (RGBLED led : RGB_LEDs) {
 801469c:	45b0      	cmp	r8, r6
 801469e:	d11a      	bne.n	80146d6 <_ZN4LEDS8TestLEDsEv+0x54>
		SetI2CRGB(led.ID, 0, 0, 255);
		HAL_Delay(100);
		SetI2CRGB(led.ID, 0, 0, 0);
	}
#endif
}
 80146a0:	b00b      	add	sp, #44	@ 0x2c
 80146a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (LED led : LEDs) {
 80146a6:	4629      	mov	r1, r5
 80146a8:	a802      	add	r0, sp, #8
 80146aa:	f7ff ffcf 	bl	801464c <_ZN3LEDC1ERKS_>
		SetLED(led.ID, GPIO_PIN_SET);
 80146ae:	f89d 6008 	ldrb.w	r6, [sp, #8]
 80146b2:	2201      	movs	r2, #1
 80146b4:	4620      	mov	r0, r4
 80146b6:	4631      	mov	r1, r6
 80146b8:	3520      	adds	r5, #32
 80146ba:	f7ff fb49 	bl	8013d50 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
		HAL_Delay(100);
 80146be:	2064      	movs	r0, #100	@ 0x64
 80146c0:	f7ef f812 	bl	80036e8 <HAL_Delay>
		SetLED(led.ID, GPIO_PIN_RESET);
 80146c4:	2200      	movs	r2, #0
 80146c6:	4631      	mov	r1, r6
 80146c8:	4620      	mov	r0, r4
 80146ca:	f7ff fb41 	bl	8013d50 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
      }
 80146ce:	a806      	add	r0, sp, #24
 80146d0:	f7ec fa9a 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 80146d4:	e7db      	b.n	801468e <_ZN4LEDS8TestLEDsEv+0xc>
	for (RGBLED led : RGB_LEDs) {
 80146d6:	f816 5b10 	ldrb.w	r5, [r6], #16
		SetRGB(led.ID, 255, 0, 0);
 80146da:	2300      	movs	r3, #0
 80146dc:	22ff      	movs	r2, #255	@ 0xff
 80146de:	4620      	mov	r0, r4
 80146e0:	4629      	mov	r1, r5
 80146e2:	9700      	str	r7, [sp, #0]
 80146e4:	f7ff fbaf 	bl	8013e46 <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 80146e8:	2064      	movs	r0, #100	@ 0x64
 80146ea:	f7ee fffd 	bl	80036e8 <HAL_Delay>
		SetRGB(led.ID, 0, 255, 0);
 80146ee:	4629      	mov	r1, r5
 80146f0:	23ff      	movs	r3, #255	@ 0xff
 80146f2:	2200      	movs	r2, #0
 80146f4:	4620      	mov	r0, r4
 80146f6:	9700      	str	r7, [sp, #0]
 80146f8:	f7ff fba5 	bl	8013e46 <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 80146fc:	2064      	movs	r0, #100	@ 0x64
 80146fe:	f7ee fff3 	bl	80036e8 <HAL_Delay>
		SetRGB(led.ID, 0, 0, 255);
 8014702:	2300      	movs	r3, #0
 8014704:	4629      	mov	r1, r5
 8014706:	4620      	mov	r0, r4
 8014708:	461a      	mov	r2, r3
 801470a:	f8cd 9000 	str.w	r9, [sp]
 801470e:	f7ff fb9a 	bl	8013e46 <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 8014712:	2064      	movs	r0, #100	@ 0x64
 8014714:	f7ee ffe8 	bl	80036e8 <HAL_Delay>
		SetRGB(led.ID, 0, 0, 0);
 8014718:	2300      	movs	r3, #0
 801471a:	4629      	mov	r1, r5
 801471c:	4620      	mov	r0, r4
 801471e:	461a      	mov	r2, r3
 8014720:	9700      	str	r7, [sp, #0]
 8014722:	f7ff fb90 	bl	8013e46 <_ZN4LEDS6SetRGBEhhhh>
 8014726:	e7b9      	b.n	801469c <_ZN4LEDS8TestLEDsEv+0x1a>

08014728 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8014728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801472c:	e9d0 7900 	ldrd	r7, r9, [r0]
 8014730:	4692      	mov	sl, r2
	if (max_size() - size() < __n)
 8014732:	f06f 437c 	mvn.w	r3, #4227858432	@ 0xfc000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014736:	eba9 0207 	sub.w	r2, r9, r7
 801473a:	4606      	mov	r6, r0
 801473c:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
 801473e:	ebb3 1f62 	cmp.w	r3, r2, asr #5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014742:	ea4f 1462 	mov.w	r4, r2, asr #5
	if (max_size() - size() < __n)
 8014746:	d102      	bne.n	801474e <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8014748:	481a      	ldr	r0, [pc, #104]	@ (80147b4 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>)
 801474a:	f007 fb19 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
 801474e:	45b9      	cmp	r9, r7
 8014750:	bf14      	ite	ne
 8014752:	4622      	movne	r2, r4
 8014754:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8014756:	eba1 0b07 	sub.w	fp, r1, r7
 801475a:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801475c:	d225      	bcs.n	80147aa <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801475e:	b334      	cbz	r4, 80147ae <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014760:	429c      	cmp	r4, r3
 8014762:	bf28      	it	cs
 8014764:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8014766:	0160      	lsls	r0, r4, #5
 8014768:	f007 fa55 	bl	801bc16 <_Znwj>
 801476c:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801476e:	4651      	mov	r1, sl
 8014770:	eb05 000b 	add.w	r0, r5, fp
 8014774:	f7ff ff6a 	bl	801464c <_ZN3LEDC1ERKS_>
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8014778:	4641      	mov	r1, r8
 801477a:	462a      	mov	r2, r5
 801477c:	4638      	mov	r0, r7
 801477e:	f7ff fd96 	bl	80142ae <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 8014782:	4649      	mov	r1, r9
 8014784:	f100 0220 	add.w	r2, r0, #32
 8014788:	4640      	mov	r0, r8
 801478a:	f7ff fd90 	bl	80142ae <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 801478e:	4680      	mov	r8, r0
	if (__p)
 8014790:	b127      	cbz	r7, 801479c <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
		    this->_M_impl._M_end_of_storage - __old_start);
 8014792:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8014794:	4638      	mov	r0, r7
 8014796:	1bc9      	subs	r1, r1, r7
 8014798:	f007 fa18 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801479c:	eb05 1444 	add.w	r4, r5, r4, lsl #5
      this->_M_impl._M_finish = __new_finish;
 80147a0:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80147a4:	60b4      	str	r4, [r6, #8]
    }
 80147a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80147aa:	461c      	mov	r4, r3
 80147ac:	e7db      	b.n	8014766 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80147ae:	4625      	mov	r5, r4
 80147b0:	e7dd      	b.n	801476e <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 80147b2:	bf00      	nop
 80147b4:	0801c592 	.word	0x0801c592

080147b8 <_ZN4LEDS6AddLEDEh4GPIO>:
bool LEDS::AddLED(uint8_t ID, GPIO gpio) {
 80147b8:	b570      	push	{r4, r5, r6, lr}
 80147ba:	b08a      	sub	sp, #40	@ 0x28
 80147bc:	4604      	mov	r4, r0
 80147be:	460e      	mov	r6, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80147c0:	6840      	ldr	r0, [r0, #4]
bool LEDS::AddLED(uint8_t ID, GPIO gpio) {
 80147c2:	466d      	mov	r5, sp
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80147c4:	f04f 31ff 	mov.w	r1, #4294967295
bool LEDS::AddLED(uint8_t ID, GPIO gpio) {
 80147c8:	e885 000c 	stmia.w	r5, {r2, r3}
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80147cc:	f7f7 ffe2 	bl	800c794 <osSemaphoreAcquire>
	if (ExistingLED(ID)) {
 80147d0:	4631      	mov	r1, r6
 80147d2:	4620      	mov	r0, r4
 80147d4:	f7ff fd1d 	bl	8014212 <_ZN4LEDS11ExistingLEDEh>
 80147d8:	4603      	mov	r3, r0
 80147da:	b128      	cbz	r0, 80147e8 <_ZN4LEDS6AddLEDEh4GPIO+0x30>
		osSemaphoreRelease(LEDsSemaphore);
 80147dc:	6860      	ldr	r0, [r4, #4]
 80147de:	f7f8 f80d 	bl	800c7fc <osSemaphoreRelease>
		return false;
 80147e2:	2000      	movs	r0, #0
}
 80147e4:	b00a      	add	sp, #40	@ 0x28
 80147e6:	bd70      	pop	{r4, r5, r6, pc}
    led.gpio = gpio;
 80147e8:	aa03      	add	r2, sp, #12
	: _M_start(), _M_finish(), _M_end_of_storage()
 80147ea:	9008      	str	r0, [sp, #32]
    led.ID = ID;
 80147ec:	f88d 6008 	strb.w	r6, [sp, #8]
 80147f0:	e9cd 0006 	strd	r0, r0, [sp, #24]
    led.gpio = gpio;
 80147f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80147f8:	e882 0003 	stmia.w	r2, {r0, r1}
    led.blink = false;
 80147fc:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014800:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8014804:	4298      	cmp	r0, r3
 8014806:	d013      	beq.n	8014830 <_ZN4LEDS6AddLEDEh4GPIO+0x78>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014808:	a902      	add	r1, sp, #8
 801480a:	f7ff ff1f 	bl	801464c <_ZN3LEDC1ERKS_>
	    ++this->_M_impl._M_finish;
 801480e:	68e3      	ldr	r3, [r4, #12]
 8014810:	3320      	adds	r3, #32
 8014812:	60e3      	str	r3, [r4, #12]
    osSemaphoreRelease(LEDsSemaphore);
 8014814:	6860      	ldr	r0, [r4, #4]
 8014816:	f7f7 fff1 	bl	800c7fc <osSemaphoreRelease>
    HAL_GPIO_WritePin(led.gpio.port, led.gpio.pin, GPIO_PIN_RESET);
 801481a:	2200      	movs	r2, #0
 801481c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8014820:	9803      	ldr	r0, [sp, #12]
 8014822:	f7f1 ffe7 	bl	80067f4 <HAL_GPIO_WritePin>
      }
 8014826:	a806      	add	r0, sp, #24
 8014828:	f7ec f9ee 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
    return true;
 801482c:	2001      	movs	r0, #1
 801482e:	e7d9      	b.n	80147e4 <_ZN4LEDS6AddLEDEh4GPIO+0x2c>
	  _M_realloc_insert(end(), __x);
 8014830:	4601      	mov	r1, r0
 8014832:	aa02      	add	r2, sp, #8
 8014834:	f104 0008 	add.w	r0, r4, #8
 8014838:	f7ff ff76 	bl	8014728 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 801483c:	e7ea      	b.n	8014814 <_ZN4LEDS6AddLEDEh4GPIO+0x5c>

0801483e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>:
bool LEDS::ConfigureTimings(uint8_t ID, std::vector<uint8_t> timings, uint8_t T) {
 801483e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014842:	4605      	mov	r5, r0
 8014844:	b085      	sub	sp, #20
 8014846:	460c      	mov	r4, r1
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8014848:	6840      	ldr	r0, [r0, #4]
 801484a:	f04f 31ff 	mov.w	r1, #4294967295
bool LEDS::ConfigureTimings(uint8_t ID, std::vector<uint8_t> timings, uint8_t T) {
 801484e:	4616      	mov	r6, r2
 8014850:	461f      	mov	r7, r3
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8014852:	f7f7 ff9f 	bl	800c794 <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 8014856:	f10d 020f 	add.w	r2, sp, #15
 801485a:	4621      	mov	r1, r4
 801485c:	4628      	mov	r0, r5
 801485e:	f7ff fa62 	bl	8013d26 <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8014862:	f89d 800f 	ldrb.w	r8, [sp, #15]
 8014866:	f1b8 0f00 	cmp.w	r8, #0
 801486a:	d02b      	beq.n	80148c4 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x86>
	return *(this->_M_impl._M_start + __n);
 801486c:	b200      	sxth	r0, r0
 801486e:	68ac      	ldr	r4, [r5, #8]
 8014870:	eb04 1440 	add.w	r4, r4, r0, lsl #5
 8014874:	ea4f 1940 	mov.w	r9, r0, lsl #5
        LEDs[index].timings = timings;
 8014878:	f104 0310 	add.w	r3, r4, #16
      if (std::__addressof(__x) != this)
 801487c:	429e      	cmp	r6, r3
 801487e:	d01e      	beq.n	80148be <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x80>
			 - this->_M_impl._M_start); }
 8014880:	6922      	ldr	r2, [r4, #16]
 8014882:	69a3      	ldr	r3, [r4, #24]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014884:	e9d6 b100 	ldrd	fp, r1, [r6]
			 - this->_M_impl._M_start); }
 8014888:	1a9b      	subs	r3, r3, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801488a:	eba1 0a0b 	sub.w	sl, r1, fp
	  if (__xlen > capacity())
 801488e:	459a      	cmp	sl, r3
 8014890:	d91f      	bls.n	80148d2 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x94>
	  pointer __result = this->_M_allocate(__n);
 8014892:	4650      	mov	r0, sl
 8014894:	9101      	str	r1, [sp, #4]
 8014896:	f7ff f987 	bl	8013ba8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 801489a:	9901      	ldr	r1, [sp, #4]
 801489c:	4602      	mov	r2, r0
 801489e:	4606      	mov	r6, r0
 80148a0:	4658      	mov	r0, fp
 80148a2:	f7ec fa9f 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80148a6:	6920      	ldr	r0, [r4, #16]
	if (__p)
 80148a8:	b118      	cbz	r0, 80148b2 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x74>
			    - this->_M_impl._M_start);
 80148aa:	69a1      	ldr	r1, [r4, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80148ac:	1a09      	subs	r1, r1, r0
 80148ae:	f007 f98d 	bl	801bbcc <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 80148b2:	6126      	str	r6, [r4, #16]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80148b4:	4456      	add	r6, sl
 80148b6:	61a6      	str	r6, [r4, #24]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 80148b8:	6923      	ldr	r3, [r4, #16]
 80148ba:	4453      	add	r3, sl
 80148bc:	6163      	str	r3, [r4, #20]
        LEDs[index].T = T;
 80148be:	68ab      	ldr	r3, [r5, #8]
 80148c0:	444b      	add	r3, r9
 80148c2:	771f      	strb	r7, [r3, #28]
    osSemaphoreRelease(LEDsSemaphore);
 80148c4:	6868      	ldr	r0, [r5, #4]
 80148c6:	f7f7 ff99 	bl	800c7fc <osSemaphoreRelease>
}
 80148ca:	4640      	mov	r0, r8
 80148cc:	b005      	add	sp, #20
 80148ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80148d2:	6963      	ldr	r3, [r4, #20]
 80148d4:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
 80148d6:	459a      	cmp	sl, r3
 80148d8:	d803      	bhi.n	80148e2 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0xa4>
 80148da:	4658      	mov	r0, fp
 80148dc:	f7ec fa82 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      return std::uninitialized_copy(__first, __last, __result);
 80148e0:	e7ea      	b.n	80148b8 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x7a>
 80148e2:	eb0b 0103 	add.w	r1, fp, r3
 80148e6:	4658      	mov	r0, fp
 80148e8:	f7ec fa7c 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80148ec:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80148f0:	e9d6 3100 	ldrd	r3, r1, [r6]
 80148f4:	1a10      	subs	r0, r2, r0
 80148f6:	4418      	add	r0, r3
 80148f8:	e7f0      	b.n	80148dc <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x9e>

080148fa <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			if (length < 3) return false;
 80148fa:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80148fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014900:	4606      	mov	r6, r0
 8014902:	b086      	sub	sp, #24
 8014904:	4615      	mov	r5, r2
			if (length < 3) return false;
 8014906:	d925      	bls.n	8014954 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x5a>
			std::vector<uint8_t> timings (&input[1], &input[length-1]);
 8014908:	1e9c      	subs	r4, r3, #2
 801490a:	1e5f      	subs	r7, r3, #1
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801490c:	4620      	mov	r0, r4
 801490e:	eb02 0807 	add.w	r8, r2, r7
 8014912:	f7ff f949 	bl	8013ba8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8014916:	4404      	add	r4, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8014918:	4602      	mov	r2, r0
 801491a:	4641      	mov	r1, r8
 801491c:	9000      	str	r0, [sp, #0]
 801491e:	1c68      	adds	r0, r5, #1
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8014920:	9402      	str	r4, [sp, #8]
 8014922:	f7ec fa5f 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
			return self->ConfigureTimings(input[0], timings, input[length-1]);
 8014926:	782c      	ldrb	r4, [r5, #0]
 8014928:	4669      	mov	r1, sp
	  this->_M_impl._M_finish =
 801492a:	9001      	str	r0, [sp, #4]
 801492c:	a803      	add	r0, sp, #12
 801492e:	f7ec fa65 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8014932:	4621      	mov	r1, r4
 8014934:	5deb      	ldrb	r3, [r5, r7]
 8014936:	aa03      	add	r2, sp, #12
 8014938:	4630      	mov	r0, r6
 801493a:	f7ff ff80 	bl	801483e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 801493e:	4604      	mov	r4, r0
      }
 8014940:	a803      	add	r0, sp, #12
 8014942:	f7ec f961 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8014946:	4668      	mov	r0, sp
 8014948:	f7ec f95e 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		}
 801494c:	4620      	mov	r0, r4
 801494e:	b006      	add	sp, #24
 8014950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (length < 3) return false;
 8014954:	2400      	movs	r4, #0
 8014956:	e7f9      	b.n	801494c <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x52>

08014958 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
	registers->SetRegisterAsSingle(REG_GEN_CONFIGURE_MODULES);
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
	registers->AddWriteCallback<uint8_t>(REG_GEN_CONFIGURE_MODULES, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
			MotionGenerator* self = (MotionGenerator*) context;
			self->request_module_configuration = true;
 8014958:	2301      	movs	r3, #1
 801495a:	f880 3064 	strb.w	r3, [r0, #100]	@ 0x64
			return true;
		}
 801495e:	4618      	mov	r0, r3
 8014960:	4770      	bx	lr

08014962 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
	registers->SetRegisterAsSingle(REG_GEN_MODULES_CONTROLLER_STATUS);
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
	registers->AddWriteCallback<uint8_t>(REG_GEN_MODULES_CONTROLLER_STATUS, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
			MotionGenerator* self = (MotionGenerator*) context;
			if (*input > 0) {
 8014962:	7812      	ldrb	r2, [r2, #0]
 8014964:	2301      	movs	r3, #1
 8014966:	b11a      	cbz	r2, 8014970 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xe>
				self->request_module_controller_activation = true;
 8014968:	f880 3065 	strb.w	r3, [r0, #101]	@ 0x65
			} else {
				self->request_module_controller_deactivation = true;
			}
			return true;
		}
 801496c:	2001      	movs	r0, #1
 801496e:	4770      	bx	lr
				self->request_module_controller_deactivation = true;
 8014970:	f880 3066 	strb.w	r3, [r0, #102]	@ 0x66
 8014974:	e7fa      	b.n	801496c <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xa>

08014976 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPPhPtE3_4_FUNES0_tS2_S3_>:

	// Register to access the number of modules
	registers->AddRegister<uint8_t>(REG_GEN_NB_MODULES);
	registers->SetRegisterAsSingle(REG_GEN_NB_MODULES);
	registers->AddReadCallback<uint8_t>(REG_GEN_NB_MODULES, (void*) this,
		[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 8014976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014978:	4604      	mov	r4, r0
 801497a:	4615      	mov	r5, r2
 801497c:	461e      	mov	r6, r3
			MotionGenerator* self = (MotionGenerator*) context;
			osSemaphoreAcquire(self->GeneratorSemaphore, osWaitForever);
			*length = 1;
 801497e:	2701      	movs	r7, #1
			osSemaphoreAcquire(self->GeneratorSemaphore, osWaitForever);
 8014980:	f04f 31ff 	mov.w	r1, #4294967295
 8014984:	6900      	ldr	r0, [r0, #16]
 8014986:	f7f7 ff05 	bl	800c794 <osSemaphoreAcquire>
			*length = 1;
 801498a:	8037      	strh	r7, [r6, #0]
			**output = self->number_of_modules;
 801498c:	682b      	ldr	r3, [r5, #0]
 801498e:	7f22      	ldrb	r2, [r4, #28]
 8014990:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->GeneratorSemaphore);
 8014992:	6920      	ldr	r0, [r4, #16]
 8014994:	f7f7 ff32 	bl	800c7fc <osSemaphoreRelease>
			return true;
		}
 8014998:	4638      	mov	r0, r7
 801499a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801499c <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPPhPtE1_4_FUNES0_tS2_S3_>:
		[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 801499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801499e:	4604      	mov	r4, r0
 80149a0:	4615      	mov	r5, r2
			osSemaphoreAcquire(self->GeneratorSemaphore, osWaitForever);
 80149a2:	f04f 31ff 	mov.w	r1, #4294967295
 80149a6:	6900      	ldr	r0, [r0, #16]
		[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 80149a8:	461e      	mov	r6, r3
			*length = 1;
 80149aa:	2701      	movs	r7, #1
			osSemaphoreAcquire(self->GeneratorSemaphore, osWaitForever);
 80149ac:	f7f7 fef2 	bl	800c794 <osSemaphoreAcquire>
			**output = self->active;
 80149b0:	682b      	ldr	r3, [r5, #0]
 80149b2:	7d22      	ldrb	r2, [r4, #20]
			*length = 1;
 80149b4:	8037      	strh	r7, [r6, #0]
			**output = self->active;
 80149b6:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->GeneratorSemaphore);
 80149b8:	6920      	ldr	r0, [r4, #16]
 80149ba:	f7f7 ff1f 	bl	800c7fc <osSemaphoreRelease>
		}
 80149be:	4638      	mov	r0, r7
 80149c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080149c2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80149c2:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 80149c4:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80149c6:	d006      	beq.n	80149d6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80149c8:	da01      	bge.n	80149ce <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 80149ca:	f007 f9d3 	bl	801bd74 <_ZSt17__throw_bad_allocv>
      }
 80149ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80149d2:	f007 b920 	b.w	801bc16 <_Znwj>
 80149d6:	bd08      	pop	{r3, pc}

080149d8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 80149d8:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80149da:	4926      	ldr	r1, [pc, #152]	@ (8014a74 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 80149dc:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80149de:	4826      	ldr	r0, [pc, #152]	@ (8014a78 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80149e0:	f007 f9b0 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80149e4:	2800      	cmp	r0, #0
 80149e6:	d133      	bne.n	8014a50 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80149e8:	4924      	ldr	r1, [pc, #144]	@ (8014a7c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa4>)
 80149ea:	4823      	ldr	r0, [pc, #140]	@ (8014a78 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80149ec:	f007 f9aa 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80149f0:	2800      	cmp	r0, #0
 80149f2:	d12f      	bne.n	8014a54 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80149f4:	4920      	ldr	r1, [pc, #128]	@ (8014a78 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80149f6:	4608      	mov	r0, r1
 80149f8:	f007 f9a4 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80149fc:	bb60      	cbnz	r0, 8014a58 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80149fe:	4920      	ldr	r1, [pc, #128]	@ (8014a80 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa8>)
 8014a00:	481d      	ldr	r0, [pc, #116]	@ (8014a78 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8014a02:	f007 f99f 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014a06:	bb48      	cbnz	r0, 8014a5c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8014a08:	491e      	ldr	r1, [pc, #120]	@ (8014a84 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xac>)
 8014a0a:	481b      	ldr	r0, [pc, #108]	@ (8014a78 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8014a0c:	f007 f99a 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014a10:	bb30      	cbnz	r0, 8014a60 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8014a12:	491d      	ldr	r1, [pc, #116]	@ (8014a88 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb0>)
 8014a14:	4818      	ldr	r0, [pc, #96]	@ (8014a78 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8014a16:	f007 f995 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014a1a:	bb18      	cbnz	r0, 8014a64 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8014a1c:	491b      	ldr	r1, [pc, #108]	@ (8014a8c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb4>)
 8014a1e:	4816      	ldr	r0, [pc, #88]	@ (8014a78 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8014a20:	f007 f990 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014a24:	bb00      	cbnz	r0, 8014a68 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8014a26:	491a      	ldr	r1, [pc, #104]	@ (8014a90 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb8>)
 8014a28:	4813      	ldr	r0, [pc, #76]	@ (8014a78 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8014a2a:	f007 f98b 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014a2e:	b9e8      	cbnz	r0, 8014a6c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8014a30:	4918      	ldr	r1, [pc, #96]	@ (8014a94 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xbc>)
 8014a32:	4811      	ldr	r0, [pc, #68]	@ (8014a78 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8014a34:	f007 f986 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014a38:	b9d0      	cbnz	r0, 8014a70 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8014a3a:	4917      	ldr	r1, [pc, #92]	@ (8014a98 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xc0>)
 8014a3c:	480e      	ldr	r0, [pc, #56]	@ (8014a78 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8014a3e:	f007 f981 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8014a42:	2800      	cmp	r0, #0
 8014a44:	bf14      	ite	ne
 8014a46:	2309      	movne	r3, #9
 8014a48:	2300      	moveq	r3, #0
 8014a4a:	7020      	strb	r0, [r4, #0]
}
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014a50:	2300      	movs	r3, #0
 8014a52:	e7fa      	b.n	8014a4a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8014a54:	2301      	movs	r3, #1
 8014a56:	e7f8      	b.n	8014a4a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8014a58:	2302      	movs	r3, #2
 8014a5a:	e7f6      	b.n	8014a4a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8014a5c:	2303      	movs	r3, #3
 8014a5e:	e7f4      	b.n	8014a4a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8014a60:	2304      	movs	r3, #4
 8014a62:	e7f2      	b.n	8014a4a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8014a64:	2305      	movs	r3, #5
 8014a66:	e7f0      	b.n	8014a4a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8014a68:	2306      	movs	r3, #6
 8014a6a:	e7ee      	b.n	8014a4a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8014a6c:	2307      	movs	r3, #7
 8014a6e:	e7ec      	b.n	8014a4a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8014a70:	2308      	movs	r3, #8
 8014a72:	e7ea      	b.n	8014a4a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
 8014a74:	0801ca50 	.word	0x0801ca50
 8014a78:	0801ca30 	.word	0x0801ca30
 8014a7c:	0801ca40 	.word	0x0801ca40
 8014a80:	0801ca20 	.word	0x0801ca20
 8014a84:	0801ca58 	.word	0x0801ca58
 8014a88:	0801ca48 	.word	0x0801ca48
 8014a8c:	0801ca38 	.word	0x0801ca38
 8014a90:	0801ca28 	.word	0x0801ca28
 8014a94:	0801ca18 	.word	0x0801ca18
 8014a98:	0801ca10 	.word	0x0801ca10

08014a9c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8014a9c:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014a9e:	4926      	ldr	r1, [pc, #152]	@ (8014b38 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8014aa0:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014aa2:	4826      	ldr	r0, [pc, #152]	@ (8014b3c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8014aa4:	f007 f94e 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014aa8:	2800      	cmp	r0, #0
 8014aaa:	d133      	bne.n	8014b14 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8014aac:	4924      	ldr	r1, [pc, #144]	@ (8014b40 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa4>)
 8014aae:	4823      	ldr	r0, [pc, #140]	@ (8014b3c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8014ab0:	f007 f948 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014ab4:	2800      	cmp	r0, #0
 8014ab6:	d12f      	bne.n	8014b18 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8014ab8:	4922      	ldr	r1, [pc, #136]	@ (8014b44 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa8>)
 8014aba:	4820      	ldr	r0, [pc, #128]	@ (8014b3c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8014abc:	f007 f942 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014ac0:	bb60      	cbnz	r0, 8014b1c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8014ac2:	4921      	ldr	r1, [pc, #132]	@ (8014b48 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xac>)
 8014ac4:	481d      	ldr	r0, [pc, #116]	@ (8014b3c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8014ac6:	f007 f93d 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014aca:	bb48      	cbnz	r0, 8014b20 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8014acc:	491f      	ldr	r1, [pc, #124]	@ (8014b4c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb0>)
 8014ace:	481b      	ldr	r0, [pc, #108]	@ (8014b3c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8014ad0:	f007 f938 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014ad4:	bb30      	cbnz	r0, 8014b24 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8014ad6:	491e      	ldr	r1, [pc, #120]	@ (8014b50 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb4>)
 8014ad8:	4818      	ldr	r0, [pc, #96]	@ (8014b3c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8014ada:	f007 f933 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014ade:	bb18      	cbnz	r0, 8014b28 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8014ae0:	491c      	ldr	r1, [pc, #112]	@ (8014b54 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb8>)
 8014ae2:	4816      	ldr	r0, [pc, #88]	@ (8014b3c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8014ae4:	f007 f92e 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014ae8:	bb00      	cbnz	r0, 8014b2c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8014aea:	491b      	ldr	r1, [pc, #108]	@ (8014b58 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xbc>)
 8014aec:	4813      	ldr	r0, [pc, #76]	@ (8014b3c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8014aee:	f007 f929 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014af2:	b9e8      	cbnz	r0, 8014b30 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8014af4:	4911      	ldr	r1, [pc, #68]	@ (8014b3c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8014af6:	4608      	mov	r0, r1
 8014af8:	f007 f924 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014afc:	b9d0      	cbnz	r0, 8014b34 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8014afe:	4917      	ldr	r1, [pc, #92]	@ (8014b5c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xc0>)
 8014b00:	480e      	ldr	r0, [pc, #56]	@ (8014b3c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 8014b02:	f007 f91f 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8014b06:	2800      	cmp	r0, #0
 8014b08:	bf14      	ite	ne
 8014b0a:	2309      	movne	r3, #9
 8014b0c:	2300      	moveq	r3, #0
 8014b0e:	7020      	strb	r0, [r4, #0]
}
 8014b10:	4618      	mov	r0, r3
 8014b12:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014b14:	2300      	movs	r3, #0
 8014b16:	e7fa      	b.n	8014b0e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8014b18:	2301      	movs	r3, #1
 8014b1a:	e7f8      	b.n	8014b0e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8014b1c:	2302      	movs	r3, #2
 8014b1e:	e7f6      	b.n	8014b0e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8014b20:	2303      	movs	r3, #3
 8014b22:	e7f4      	b.n	8014b0e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8014b24:	2304      	movs	r3, #4
 8014b26:	e7f2      	b.n	8014b0e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8014b28:	2305      	movs	r3, #5
 8014b2a:	e7f0      	b.n	8014b0e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8014b2c:	2306      	movs	r3, #6
 8014b2e:	e7ee      	b.n	8014b0e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8014b30:	2307      	movs	r3, #7
 8014b32:	e7ec      	b.n	8014b0e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8014b34:	2308      	movs	r3, #8
 8014b36:	e7ea      	b.n	8014b0e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
 8014b38:	0801ca50 	.word	0x0801ca50
 8014b3c:	0801ca18 	.word	0x0801ca18
 8014b40:	0801ca40 	.word	0x0801ca40
 8014b44:	0801ca30 	.word	0x0801ca30
 8014b48:	0801ca20 	.word	0x0801ca20
 8014b4c:	0801ca58 	.word	0x0801ca58
 8014b50:	0801ca48 	.word	0x0801ca48
 8014b54:	0801ca38 	.word	0x0801ca38
 8014b58:	0801ca28 	.word	0x0801ca28
 8014b5c:	0801ca10 	.word	0x0801ca10

08014b60 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014b60:	4926      	ldr	r1, [pc, #152]	@ (8014bfc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8014b62:	b510      	push	{r4, lr}
 8014b64:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014b66:	4608      	mov	r0, r1
 8014b68:	f007 f8ec 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014b6c:	2800      	cmp	r0, #0
 8014b6e:	d133      	bne.n	8014bd8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8014b70:	4923      	ldr	r1, [pc, #140]	@ (8014c00 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa0>)
 8014b72:	4822      	ldr	r0, [pc, #136]	@ (8014bfc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8014b74:	f007 f8e6 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014b78:	2800      	cmp	r0, #0
 8014b7a:	d12f      	bne.n	8014bdc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8014b7c:	4921      	ldr	r1, [pc, #132]	@ (8014c04 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa4>)
 8014b7e:	481f      	ldr	r0, [pc, #124]	@ (8014bfc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8014b80:	f007 f8e0 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014b84:	bb60      	cbnz	r0, 8014be0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8014b86:	4920      	ldr	r1, [pc, #128]	@ (8014c08 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa8>)
 8014b88:	481c      	ldr	r0, [pc, #112]	@ (8014bfc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8014b8a:	f007 f8db 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014b8e:	bb48      	cbnz	r0, 8014be4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8014b90:	491e      	ldr	r1, [pc, #120]	@ (8014c0c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xac>)
 8014b92:	481a      	ldr	r0, [pc, #104]	@ (8014bfc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8014b94:	f007 f8d6 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014b98:	bb30      	cbnz	r0, 8014be8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8014b9a:	491d      	ldr	r1, [pc, #116]	@ (8014c10 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb0>)
 8014b9c:	4817      	ldr	r0, [pc, #92]	@ (8014bfc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8014b9e:	f007 f8d1 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014ba2:	bb18      	cbnz	r0, 8014bec <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8014ba4:	491b      	ldr	r1, [pc, #108]	@ (8014c14 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb4>)
 8014ba6:	4815      	ldr	r0, [pc, #84]	@ (8014bfc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8014ba8:	f007 f8cc 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014bac:	bb00      	cbnz	r0, 8014bf0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8014bae:	491a      	ldr	r1, [pc, #104]	@ (8014c18 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb8>)
 8014bb0:	4812      	ldr	r0, [pc, #72]	@ (8014bfc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8014bb2:	f007 f8c7 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014bb6:	b9e8      	cbnz	r0, 8014bf4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8014bb8:	4918      	ldr	r1, [pc, #96]	@ (8014c1c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xbc>)
 8014bba:	4810      	ldr	r0, [pc, #64]	@ (8014bfc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8014bbc:	f007 f8c2 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8014bc0:	b9d0      	cbnz	r0, 8014bf8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8014bc2:	4917      	ldr	r1, [pc, #92]	@ (8014c20 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xc0>)
 8014bc4:	480d      	ldr	r0, [pc, #52]	@ (8014bfc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8014bc6:	f007 f8bd 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8014bca:	2800      	cmp	r0, #0
 8014bcc:	bf14      	ite	ne
 8014bce:	2309      	movne	r3, #9
 8014bd0:	2300      	moveq	r3, #0
 8014bd2:	7020      	strb	r0, [r4, #0]
}
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014bd8:	2300      	movs	r3, #0
 8014bda:	e7fa      	b.n	8014bd2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8014bdc:	2301      	movs	r3, #1
 8014bde:	e7f8      	b.n	8014bd2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8014be0:	2302      	movs	r3, #2
 8014be2:	e7f6      	b.n	8014bd2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8014be4:	2303      	movs	r3, #3
 8014be6:	e7f4      	b.n	8014bd2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8014be8:	2304      	movs	r3, #4
 8014bea:	e7f2      	b.n	8014bd2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8014bec:	2305      	movs	r3, #5
 8014bee:	e7f0      	b.n	8014bd2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8014bf0:	2306      	movs	r3, #6
 8014bf2:	e7ee      	b.n	8014bd2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8014bf4:	2307      	movs	r3, #7
 8014bf6:	e7ec      	b.n	8014bd2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8014bf8:	2308      	movs	r3, #8
 8014bfa:	e7ea      	b.n	8014bd2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
 8014bfc:	0801ca50 	.word	0x0801ca50
 8014c00:	0801ca40 	.word	0x0801ca40
 8014c04:	0801ca30 	.word	0x0801ca30
 8014c08:	0801ca20 	.word	0x0801ca20
 8014c0c:	0801ca58 	.word	0x0801ca58
 8014c10:	0801ca48 	.word	0x0801ca48
 8014c14:	0801ca38 	.word	0x0801ca38
 8014c18:	0801ca28 	.word	0x0801ca28
 8014c1c:	0801ca18 	.word	0x0801ca18
 8014c20:	0801ca10 	.word	0x0801ca10

08014c24 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t>:
	*__first = __tmp;
 8014c24:	e9d0 0209 	ldrd	r0, r2, [r0, #36]	@ 0x24
 8014c28:	2100      	movs	r1, #0
 8014c2a:	1a12      	subs	r2, r2, r0

	// Register to reset all generator offsets to 0
	registers->AddRegister<uint8_t>(REG_GEN_RESET_GENERATOR_OFFSETS);
	registers->SetRegisterAsSingle(REG_GEN_RESET_GENERATOR_OFFSETS);
	registers->AddWriteCallback<uint8_t>(REG_GEN_RESET_GENERATOR_OFFSETS, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8014c2c:	b508      	push	{r3, lr}
 8014c2e:	f007 fb43 	bl	801c2b8 <memset>
			MotionGenerator* self = (MotionGenerator*) context;
			std::fill(self->generator_offsets.begin(), self->generator_offsets.end(), 0);
			return true;
		}
 8014c32:	2001      	movs	r0, #1
 8014c34:	bd08      	pop	{r3, pc}

08014c36 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE8_4_FUNES0_tS1_t>:
 8014c36:	e9d0 020c 	ldrd	r0, r2, [r0, #48]	@ 0x30
 8014c3a:	2100      	movs	r1, #0
 8014c3c:	1a12      	subs	r2, r2, r0

	// Register to reset all position offsets
	registers->AddRegister<uint8_t>(REG_GEN_RESET_POSITION_OFFSETS);
	registers->SetRegisterAsSingle(REG_GEN_RESET_POSITION_OFFSETS);
	registers->AddWriteCallback<uint8_t>(REG_GEN_RESET_POSITION_OFFSETS, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8014c3e:	b508      	push	{r3, lr}
 8014c40:	f007 fb3a 	bl	801c2b8 <memset>
			MotionGenerator* self = (MotionGenerator*) context;
			std::fill(self->position_offsets.begin(), self->position_offsets.end(), 0);
			return true;
		}
 8014c44:	2001      	movs	r0, #1
 8014c46:	bd08      	pop	{r3, pc}

08014c48 <_ZN15MotionGeneratorC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014c48:	2200      	movs	r2, #0
 8014c4a:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8014c4e:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8014c52:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8014c56:	e9c0 2214 	strd	r2, r2, [r0, #80]	@ 0x50
 8014c5a:	6582      	str	r2, [r0, #88]	@ 0x58
}
 8014c5c:	4770      	bx	lr

08014c5e <_ZN15MotionGenerator18SetGeneratorPeriodEm>:
 * @brief Set the generator period
 *
 * @param input period_ms_: generator period in ms
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorPeriod(uint32_t period_ms_) {
 8014c5e:	b538      	push	{r3, r4, r5, lr}
 8014c60:	4604      	mov	r4, r0
 8014c62:	460d      	mov	r5, r1
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014c64:	6900      	ldr	r0, [r0, #16]
 8014c66:	f04f 31ff 	mov.w	r1, #4294967295
 8014c6a:	f7f7 fd93 	bl	800c794 <osSemaphoreAcquire>
	period_ms = period_ms_;
	osSemaphoreRelease(GeneratorSemaphore);
 8014c6e:	6920      	ldr	r0, [r4, #16]
	period_ms = period_ms_;
 8014c70:	61a5      	str	r5, [r4, #24]
	osSemaphoreRelease(GeneratorSemaphore);
 8014c72:	f7f7 fdc3 	bl	800c7fc <osSemaphoreRelease>
	return true;
}
 8014c76:	2001      	movs	r0, #1
 8014c78:	bd38      	pop	{r3, r4, r5, pc}

08014c7a <_ZN15MotionGenerator18SetGeneratorOffsetEhf>:
 *
 * @param input index: module index with 0 = module directly attached to head
 * @param input offset: the generator offset
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorOffset(uint8_t index, float offset) {
 8014c7a:	b538      	push	{r3, r4, r5, lr}
 8014c7c:	4604      	mov	r4, r0
 8014c7e:	460d      	mov	r5, r1
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014c80:	6900      	ldr	r0, [r0, #16]
 8014c82:	f04f 31ff 	mov.w	r1, #4294967295
bool MotionGenerator::SetGeneratorOffset(uint8_t index, float offset) {
 8014c86:	ed2d 8b02 	vpush	{d8}
 8014c8a:	eeb0 8a40 	vmov.f32	s16, s0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014c8e:	f7f7 fd81 	bl	800c794 <osSemaphoreAcquire>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014c92:	e9d4 3209 	ldrd	r3, r2, [r4, #36]	@ 0x24
 8014c96:	1ad2      	subs	r2, r2, r3
	if (index >= generator_offsets.size()) {osSemaphoreRelease(GeneratorSemaphore); return false;}
 8014c98:	ebb5 0fa2 	cmp.w	r5, r2, asr #2
 8014c9c:	d306      	bcc.n	8014cac <_ZN15MotionGenerator18SetGeneratorOffsetEhf+0x32>
 8014c9e:	6920      	ldr	r0, [r4, #16]
 8014ca0:	f7f7 fdac 	bl	800c7fc <osSemaphoreRelease>
 8014ca4:	2000      	movs	r0, #0

	generator_offsets[index] = offset;
	osSemaphoreRelease(GeneratorSemaphore);
	return true;
}
 8014ca6:	ecbd 8b02 	vpop	{d8}
 8014caa:	bd38      	pop	{r3, r4, r5, pc}
	generator_offsets[index] = offset;
 8014cac:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	osSemaphoreRelease(GeneratorSemaphore);
 8014cb0:	6920      	ldr	r0, [r4, #16]
	generator_offsets[index] = offset;
 8014cb2:	ed83 8a00 	vstr	s16, [r3]
	osSemaphoreRelease(GeneratorSemaphore);
 8014cb6:	f7f7 fda1 	bl	800c7fc <osSemaphoreRelease>
	return true;
 8014cba:	2001      	movs	r0, #1
 8014cbc:	e7f3      	b.n	8014ca6 <_ZN15MotionGenerator18SetGeneratorOffsetEhf+0x2c>

08014cbe <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPftE5_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8014cbe:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, float* input, uint16_t length) -> bool {
 8014cc0:	b082      	sub	sp, #8
			if (length != 2) return false;
 8014cc2:	d10c      	bne.n	8014cde <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPftE5_4_FUNES0_tS1_t+0x20>
			return self->SetGeneratorOffset((uint8_t) input[0], input[1]);
 8014cc4:	edd2 7a00 	vldr	s15, [r2]
 8014cc8:	ed92 0a01 	vldr	s0, [r2, #4]
 8014ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014cd0:	edcd 7a01 	vstr	s15, [sp, #4]
 8014cd4:	f89d 1004 	ldrb.w	r1, [sp, #4]
		}
 8014cd8:	b002      	add	sp, #8
			return self->SetGeneratorOffset((uint8_t) input[0], input[1]);
 8014cda:	f7ff bfce 	b.w	8014c7a <_ZN15MotionGenerator18SetGeneratorOffsetEhf>
		}
 8014cde:	2000      	movs	r0, #0
 8014ce0:	b002      	add	sp, #8
 8014ce2:	4770      	bx	lr

08014ce4 <_ZN15MotionGenerator21ResetGeneratorOffsetsEv>:
/**
 * @brief Reset all generator offsets to 0
 *
 * @return whether successful
 */
bool MotionGenerator::ResetGeneratorOffsets(void) {
 8014ce4:	b510      	push	{r4, lr}
 8014ce6:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8014cec:	6900      	ldr	r0, [r0, #16]
 8014cee:	f7f7 fd51 	bl	800c794 <osSemaphoreAcquire>
	for (float &offset : generator_offsets) {
		offset = 0;
 8014cf2:	2100      	movs	r1, #0
 8014cf4:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	@ 0x24
 8014cf8:	1a12      	subs	r2, r2, r0
 8014cfa:	f007 fadd 	bl	801c2b8 <memset>
	}
	osSemaphoreRelease(GeneratorSemaphore);
 8014cfe:	6920      	ldr	r0, [r4, #16]
 8014d00:	f7f7 fd7c 	bl	800c7fc <osSemaphoreRelease>
	return true;
}
 8014d04:	2001      	movs	r0, #1
 8014d06:	bd10      	pop	{r4, pc}

08014d08 <_ZN15MotionGenerator17SetPositionOffsetEhf>:
 *
 * @param input index: module index with 0 = module directly attached to head
 * @param input offset: the position offset
 * @return whether successful
 */
bool MotionGenerator::SetPositionOffset(uint8_t index, float offset) {
 8014d08:	b538      	push	{r3, r4, r5, lr}
 8014d0a:	4604      	mov	r4, r0
 8014d0c:	460d      	mov	r5, r1
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014d0e:	6900      	ldr	r0, [r0, #16]
 8014d10:	f04f 31ff 	mov.w	r1, #4294967295
bool MotionGenerator::SetPositionOffset(uint8_t index, float offset) {
 8014d14:	ed2d 8b02 	vpush	{d8}
 8014d18:	eeb0 8a40 	vmov.f32	s16, s0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014d1c:	f7f7 fd3a 	bl	800c794 <osSemaphoreAcquire>
 8014d20:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	@ 0x30
 8014d24:	1ad2      	subs	r2, r2, r3
	if (index >= position_offsets.size()) {osSemaphoreRelease(GeneratorSemaphore); return false;}
 8014d26:	ebb5 0fa2 	cmp.w	r5, r2, asr #2
 8014d2a:	d306      	bcc.n	8014d3a <_ZN15MotionGenerator17SetPositionOffsetEhf+0x32>
 8014d2c:	6920      	ldr	r0, [r4, #16]
 8014d2e:	f7f7 fd65 	bl	800c7fc <osSemaphoreRelease>
 8014d32:	2000      	movs	r0, #0

	position_offsets[index] = offset;
	osSemaphoreRelease(GeneratorSemaphore);
	return true;
}
 8014d34:	ecbd 8b02 	vpop	{d8}
 8014d38:	bd38      	pop	{r3, r4, r5, pc}
	position_offsets[index] = offset;
 8014d3a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	osSemaphoreRelease(GeneratorSemaphore);
 8014d3e:	6920      	ldr	r0, [r4, #16]
	position_offsets[index] = offset;
 8014d40:	ed83 8a00 	vstr	s16, [r3]
	osSemaphoreRelease(GeneratorSemaphore);
 8014d44:	f7f7 fd5a 	bl	800c7fc <osSemaphoreRelease>
	return true;
 8014d48:	2001      	movs	r0, #1
 8014d4a:	e7f3      	b.n	8014d34 <_ZN15MotionGenerator17SetPositionOffsetEhf+0x2c>

08014d4c <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPftE7_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8014d4c:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, float* input, uint16_t length) -> bool {
 8014d4e:	b082      	sub	sp, #8
			if (length != 2) return false;
 8014d50:	d10c      	bne.n	8014d6c <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPftE7_4_FUNES0_tS1_t+0x20>
			return self->SetPositionOffset((uint8_t) input[0], input[1]);
 8014d52:	edd2 7a00 	vldr	s15, [r2]
 8014d56:	ed92 0a01 	vldr	s0, [r2, #4]
 8014d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014d5e:	edcd 7a01 	vstr	s15, [sp, #4]
 8014d62:	f89d 1004 	ldrb.w	r1, [sp, #4]
		}
 8014d66:	b002      	add	sp, #8
			return self->SetPositionOffset((uint8_t) input[0], input[1]);
 8014d68:	f7ff bfce 	b.w	8014d08 <_ZN15MotionGenerator17SetPositionOffsetEhf>
		}
 8014d6c:	2000      	movs	r0, #0
 8014d6e:	b002      	add	sp, #8
 8014d70:	4770      	bx	lr

08014d72 <_ZN15MotionGenerator15SetModuleLengthEf>:
 * @brief Set the module length
 *
 * @param input length: the module length
 * @return whether successful
 */
bool MotionGenerator::SetModuleLength(float length) {
 8014d72:	b510      	push	{r4, lr}
 8014d74:	ed2d 8b02 	vpush	{d8}
 8014d78:	eeb0 8a40 	vmov.f32	s16, s0
 8014d7c:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014d7e:	f04f 31ff 	mov.w	r1, #4294967295
 8014d82:	6900      	ldr	r0, [r0, #16]
 8014d84:	f7f7 fd06 	bl	800c794 <osSemaphoreAcquire>
	module_length = length;
	osSemaphoreRelease(GeneratorSemaphore);
 8014d88:	6920      	ldr	r0, [r4, #16]
	module_length = length;
 8014d8a:	ed84 8a08 	vstr	s16, [r4, #32]
	osSemaphoreRelease(GeneratorSemaphore);
 8014d8e:	f7f7 fd35 	bl	800c7fc <osSemaphoreRelease>
	return true;
}
 8014d92:	2001      	movs	r0, #1
 8014d94:	ecbd 8b02 	vpop	{d8}
 8014d98:	bd10      	pop	{r4, pc}

08014d9a <_ZN15MotionGenerator21SetGeneratorAmplitudeEf>:
 * @brief Set the generator amplitude
 *
 * @param input amplitude_: waveform amplitude A with Asin(...)
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorAmplitude(float amplitude_) {
 8014d9a:	b510      	push	{r4, lr}
 8014d9c:	ed2d 8b02 	vpush	{d8}
 8014da0:	eeb0 8a40 	vmov.f32	s16, s0
 8014da4:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014da6:	f04f 31ff 	mov.w	r1, #4294967295
 8014daa:	6900      	ldr	r0, [r0, #16]
 8014dac:	f7f7 fcf2 	bl	800c794 <osSemaphoreAcquire>
	amplitude = amplitude_;
	osSemaphoreRelease(GeneratorSemaphore);
 8014db0:	6920      	ldr	r0, [r4, #16]
	amplitude = amplitude_;
 8014db2:	ed84 8a0f 	vstr	s16, [r4, #60]	@ 0x3c
	osSemaphoreRelease(GeneratorSemaphore);
 8014db6:	f7f7 fd21 	bl	800c7fc <osSemaphoreRelease>
	return true;
}
 8014dba:	2001      	movs	r0, #1
 8014dbc:	ecbd 8b02 	vpop	{d8}
 8014dc0:	bd10      	pop	{r4, pc}

08014dc2 <_ZN15MotionGenerator21SetGeneratorFrequencyEf>:
 * @brief Set the generator frequency
 *
 * @param input frequency_: waveform frequency
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorFrequency(float frequency_) {
 8014dc2:	b510      	push	{r4, lr}
 8014dc4:	ed2d 8b02 	vpush	{d8}
 8014dc8:	eeb0 8a40 	vmov.f32	s16, s0
 8014dcc:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014dce:	f04f 31ff 	mov.w	r1, #4294967295
 8014dd2:	6900      	ldr	r0, [r0, #16]
 8014dd4:	f7f7 fcde 	bl	800c794 <osSemaphoreAcquire>
	frequency = frequency_;
	osSemaphoreRelease(GeneratorSemaphore);
 8014dd8:	6920      	ldr	r0, [r4, #16]
	frequency = frequency_;
 8014dda:	ed84 8a10 	vstr	s16, [r4, #64]	@ 0x40
	osSemaphoreRelease(GeneratorSemaphore);
 8014dde:	f7f7 fd0d 	bl	800c7fc <osSemaphoreRelease>
	return true;
}
 8014de2:	2001      	movs	r0, #1
 8014de4:	ecbd 8b02 	vpop	{d8}
 8014de8:	bd10      	pop	{r4, pc}

08014dea <_ZN15MotionGenerator29SetGeneratorWavelengthInverseEf>:
 * @brief Set the generator wavelength inverse
 *
 * @param input wavelength_inverse_: waveform wavelength inverse 1/l with Asin(.. + 2*pi*x/l)
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorWavelengthInverse(float wavelength_inverse_) {
 8014dea:	b510      	push	{r4, lr}
 8014dec:	ed2d 8b02 	vpush	{d8}
 8014df0:	eeb0 8a40 	vmov.f32	s16, s0
 8014df4:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014df6:	f04f 31ff 	mov.w	r1, #4294967295
 8014dfa:	6900      	ldr	r0, [r0, #16]
 8014dfc:	f7f7 fcca 	bl	800c794 <osSemaphoreAcquire>
	wavelength_inverse = wavelength_inverse_;
	osSemaphoreRelease(GeneratorSemaphore);
 8014e00:	6920      	ldr	r0, [r4, #16]
	wavelength_inverse = wavelength_inverse_;
 8014e02:	ed84 8a11 	vstr	s16, [r4, #68]	@ 0x44
	osSemaphoreRelease(GeneratorSemaphore);
 8014e06:	f7f7 fcf9 	bl	800c7fc <osSemaphoreRelease>
	return true;
}
 8014e0a:	2001      	movs	r0, #1
 8014e0c:	ecbd 8b02 	vpop	{d8}
 8014e10:	bd10      	pop	{r4, pc}

08014e12 <_ZN15MotionGenerator17SetGeneratorPhaseEf>:
 * @brief Set the generator phase
 *
 * @param input wavelength_inverse_: waveform phase
 * @return whether successful
 */
bool MotionGenerator::SetGeneratorPhase(float phase_) {
 8014e12:	b510      	push	{r4, lr}
 8014e14:	ed2d 8b02 	vpush	{d8}
 8014e18:	eeb0 8a40 	vmov.f32	s16, s0
 8014e1c:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8014e1e:	f04f 31ff 	mov.w	r1, #4294967295
 8014e22:	6900      	ldr	r0, [r0, #16]
 8014e24:	f7f7 fcb6 	bl	800c794 <osSemaphoreAcquire>
	phase = phase_;
	osSemaphoreRelease(GeneratorSemaphore);
 8014e28:	6920      	ldr	r0, [r4, #16]
	phase = phase_;
 8014e2a:	ed84 8a12 	vstr	s16, [r4, #72]	@ 0x48
	osSemaphoreRelease(GeneratorSemaphore);
 8014e2e:	f7f7 fce5 	bl	800c7fc <osSemaphoreRelease>
	return true;
}
 8014e32:	2001      	movs	r0, #1
 8014e34:	ecbd 8b02 	vpop	{d8}
 8014e38:	bd10      	pop	{r4, pc}

08014e3a <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8014e3a:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014e3c:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 8014e40:	4605      	mov	r5, r0
 8014e42:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014e44:	429c      	cmp	r4, r3
 8014e46:	d005      	beq.n	8014e54 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014e48:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8014e4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8014e4e:	3410      	adds	r4, #16
 8014e50:	606c      	str	r4, [r5, #4]
      }
 8014e52:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 8014e54:	4621      	mov	r1, r4
 8014e56:	f7fa faaf 	bl	800f3b8 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8014e5a:	e7fa      	b.n	8014e52 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_+0x18>

08014e5c <_ZN9Registers11AddRegisterIfEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8014e5c:	b570      	push	{r4, r5, r6, lr}
 8014e5e:	4604      	mov	r4, r0
 8014e60:	b086      	sub	sp, #24
 8014e62:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014e64:	6800      	ldr	r0, [r0, #0]
 8014e66:	f04f 31ff 	mov.w	r1, #4294967295
 8014e6a:	f7f7 fc93 	bl	800c794 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8014e6e:	f10d 0207 	add.w	r2, sp, #7
 8014e72:	4631      	mov	r1, r6
 8014e74:	4620      	mov	r0, r4
 8014e76:	f003 fa50 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8014e7a:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8014e7e:	b125      	cbz	r5, 8014e8a <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8014e80:	6820      	ldr	r0, [r4, #0]
 8014e82:	f7f7 fcbb 	bl	800c7fc <osSemaphoreRelease>
}
 8014e86:	b006      	add	sp, #24
 8014e88:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014e8a:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8014e8e:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014e92:	f7ff fe03 	bl	8014a9c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	configuration_.register_info = register_;
 8014e96:	2301      	movs	r3, #1
 8014e98:	f8ad 600a 	strh.w	r6, [sp, #10]
 8014e9c:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8014ea0:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8014ea4:	f88d 000c 	strb.w	r0, [sp, #12]
 8014ea8:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8014eac:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d0e5      	beq.n	8014e80 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8014eb4:	a902      	add	r1, sp, #8
 8014eb6:	1d20      	adds	r0, r4, #4
 8014eb8:	f7ff ffbf 	bl	8014e3a <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8014ebc:	e7e0      	b.n	8014e80 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>

08014ebe <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8014ebe:	b570      	push	{r4, r5, r6, lr}
 8014ec0:	4604      	mov	r4, r0
 8014ec2:	b086      	sub	sp, #24
 8014ec4:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014ec6:	6800      	ldr	r0, [r0, #0]
 8014ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8014ecc:	f7f7 fc62 	bl	800c794 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8014ed0:	f10d 0207 	add.w	r2, sp, #7
 8014ed4:	4631      	mov	r1, r6
 8014ed6:	4620      	mov	r0, r4
 8014ed8:	f003 fa1f 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8014edc:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8014ee0:	b125      	cbz	r5, 8014eec <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8014ee2:	6820      	ldr	r0, [r4, #0]
 8014ee4:	f7f7 fc8a 	bl	800c7fc <osSemaphoreRelease>
}
 8014ee8:	b006      	add	sp, #24
 8014eea:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014eec:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8014ef0:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014ef4:	f7ff fe34 	bl	8014b60 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 8014ef8:	2301      	movs	r3, #1
 8014efa:	f8ad 600a 	strh.w	r6, [sp, #10]
 8014efe:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8014f02:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8014f06:	f88d 000c 	strb.w	r0, [sp, #12]
 8014f0a:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8014f0e:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d0e5      	beq.n	8014ee2 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8014f16:	a902      	add	r1, sp, #8
 8014f18:	1d20      	adds	r0, r4, #4
 8014f1a:	f7ff ff8e 	bl	8014e3a <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8014f1e:	e7e0      	b.n	8014ee2 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

08014f20 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>:
bool Registers::AddReadCallback(uint16_t ID, void* context, bool (*read)(void*, uint16_t, T**, uint16_t*)) {
 8014f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f22:	460c      	mov	r4, r1
 8014f24:	b087      	sub	sp, #28
 8014f26:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014f28:	f04f 31ff 	mov.w	r1, #4294967295
 8014f2c:	6800      	ldr	r0, [r0, #0]
bool Registers::AddReadCallback(uint16_t ID, void* context, bool (*read)(void*, uint16_t, T**, uint16_t*)) {
 8014f2e:	461e      	mov	r6, r3
 8014f30:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014f32:	f7f7 fc2f 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014f36:	4621      	mov	r1, r4
 8014f38:	f10d 0207 	add.w	r2, sp, #7
 8014f3c:	4628      	mov	r0, r5
 8014f3e:	f003 f9ec 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014f42:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014f46:	4604      	mov	r4, r0
	if (!success) {
 8014f48:	b923      	cbnz	r3, 8014f54 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 8014f4a:	6828      	ldr	r0, [r5, #0]
 8014f4c:	f7f7 fc56 	bl	800c7fc <osSemaphoreRelease>
}
 8014f50:	b007      	add	sp, #28
 8014f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8014f54:	f10d 0007 	add.w	r0, sp, #7
 8014f58:	f7ff fe02 	bl	8014b60 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8014f5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d0f2      	beq.n	8014f4a <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 8014f64:	7923      	ldrb	r3, [r4, #4]
 8014f66:	4298      	cmp	r0, r3
 8014f68:	d1ef      	bne.n	8014f4a <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 8014f6a:	3004      	adds	r0, #4
 8014f6c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8014f70:	2800      	cmp	r0, #0
 8014f72:	d0ea      	beq.n	8014f4a <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8014f74:	7823      	ldrb	r3, [r4, #0]
 8014f76:	b983      	cbnz	r3, 8014f9a <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x7a>
 8014f78:	7863      	ldrb	r3, [r4, #1]
 8014f7a:	b973      	cbnz	r3, 8014f9a <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x7a>
		target_callback_list->push_back(callback);
 8014f7c:	a902      	add	r1, sp, #8
		callback.read = read;
 8014f7e:	9605      	str	r6, [sp, #20]
		callback.write = NULL;
 8014f80:	e9cd 7303 	strd	r7, r3, [sp, #12]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014f84:	e9d0 2300 	ldrd	r2, r3, [r0]
 8014f88:	1a9b      	subs	r3, r3, r2
 8014f8a:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8014f8c:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8014f8e:	f7fa fb03 	bl	800f598 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8014f92:	2301      	movs	r3, #1
 8014f94:	7063      	strb	r3, [r4, #1]
	target_register->access.read = true;
 8014f96:	7263      	strb	r3, [r4, #9]
 8014f98:	e7d7      	b.n	8014f4a <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8014f9a:	8961      	ldrh	r1, [r4, #10]
 8014f9c:	f7fa f960 	bl	800f260 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->context = context;
 8014fa0:	6047      	str	r7, [r0, #4]
		callback->read = read;
 8014fa2:	60c6      	str	r6, [r0, #12]
 8014fa4:	e7f5      	b.n	8014f92 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x72>

08014fa6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8014fa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014fa8:	460c      	mov	r4, r1
 8014faa:	b087      	sub	sp, #28
 8014fac:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014fae:	f04f 31ff 	mov.w	r1, #4294967295
 8014fb2:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8014fb4:	461e      	mov	r6, r3
 8014fb6:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014fb8:	f7f7 fbec 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014fbc:	4621      	mov	r1, r4
 8014fbe:	f10d 0207 	add.w	r2, sp, #7
 8014fc2:	4628      	mov	r0, r5
 8014fc4:	f003 f9a9 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014fc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014fcc:	4604      	mov	r4, r0
	if (!success) {
 8014fce:	b923      	cbnz	r3, 8014fda <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 8014fd0:	6828      	ldr	r0, [r5, #0]
 8014fd2:	f7f7 fc13 	bl	800c7fc <osSemaphoreRelease>
}
 8014fd6:	b007      	add	sp, #28
 8014fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8014fda:	f10d 0007 	add.w	r0, sp, #7
 8014fde:	f7ff fdbf 	bl	8014b60 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8014fe2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d0f2      	beq.n	8014fd0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 8014fea:	7923      	ldrb	r3, [r4, #4]
 8014fec:	4298      	cmp	r0, r3
 8014fee:	d1ef      	bne.n	8014fd0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 8014ff0:	3004      	adds	r0, #4
 8014ff2:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8014ff6:	2800      	cmp	r0, #0
 8014ff8:	d0ea      	beq.n	8014fd0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8014ffa:	7823      	ldrb	r3, [r4, #0]
 8014ffc:	b983      	cbnz	r3, 8015020 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 8014ffe:	7863      	ldrb	r3, [r4, #1]
 8015000:	b973      	cbnz	r3, 8015020 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 8015002:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 8015004:	a902      	add	r1, sp, #8
 8015006:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 801500a:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801500e:	1a9b      	subs	r3, r3, r2
 8015010:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8015012:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8015014:	f7fa fac0 	bl	800f598 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8015018:	2301      	movs	r3, #1
 801501a:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 801501c:	7223      	strb	r3, [r4, #8]
 801501e:	e7d7      	b.n	8014fd0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8015020:	8961      	ldrh	r1, [r4, #10]
 8015022:	f7fa f91d 	bl	800f260 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 8015026:	e9c0 7601 	strd	r7, r6, [r0, #4]
 801502a:	e7f5      	b.n	8015018 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x72>

0801502c <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801502c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015030:	e9d0 8900 	ldrd	r8, r9, [r0]
 8015034:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8015036:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801503a:	eba9 0208 	sub.w	r2, r9, r8
 801503e:	4607      	mov	r7, r0
 8015040:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 8015042:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015046:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 801504a:	d102      	bne.n	8015052 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 801504c:	4820      	ldr	r0, [pc, #128]	@ (80150d0 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 801504e:	f006 fe97 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8015052:	45c1      	cmp	r9, r8
 8015054:	bf14      	ite	ne
 8015056:	4622      	movne	r2, r4
 8015058:	2201      	moveq	r2, #1
 801505a:	eba1 0508 	sub.w	r5, r1, r8
 801505e:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015060:	d231      	bcs.n	80150c6 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015062:	b394      	cbz	r4, 80150ca <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015064:	429c      	cmp	r4, r3
 8015066:	bf28      	it	cs
 8015068:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801506a:	0120      	lsls	r0, r4, #4
 801506c:	f006 fdd3 	bl	801bc16 <_Znwj>
 8015070:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8015072:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8015076:	2d00      	cmp	r5, #0
 8015078:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 801507c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8015080:	dd04      	ble.n	801508c <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015082:	462a      	mov	r2, r5
 8015084:	4641      	mov	r1, r8
 8015086:	4630      	mov	r0, r6
 8015088:	f007 f8fc 	bl	801c284 <memmove>
      ptrdiff_t __count = __last - __first;
 801508c:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8015090:	3510      	adds	r5, #16
      if (__count > 0)
 8015092:	f1b9 0f00 	cmp.w	r9, #0
 8015096:	4435      	add	r5, r6
 8015098:	dd04      	ble.n	80150a4 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801509a:	464a      	mov	r2, r9
 801509c:	4651      	mov	r1, sl
 801509e:	4628      	mov	r0, r5
 80150a0:	f007 f9e8 	bl	801c474 <memcpy>
      return __result + __count;
 80150a4:	444d      	add	r5, r9
	if (__p)
 80150a6:	f1b8 0f00 	cmp.w	r8, #0
 80150aa:	d005      	beq.n	80150b8 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 80150ac:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80150ae:	4640      	mov	r0, r8
 80150b0:	eba1 0108 	sub.w	r1, r1, r8
 80150b4:	f006 fd8a 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 80150b8:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80150bc:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 80150c0:	60be      	str	r6, [r7, #8]
    }
 80150c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80150c6:	461c      	mov	r4, r3
 80150c8:	e7cf      	b.n	801506a <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80150ca:	4626      	mov	r6, r4
 80150cc:	e7d1      	b.n	8015072 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 80150ce:	bf00      	nop
 80150d0:	0801c592 	.word	0x0801c592

080150d4 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80150d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80150d8:	e9d0 8900 	ldrd	r8, r9, [r0]
 80150dc:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 80150de:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80150e2:	eba9 0208 	sub.w	r2, r9, r8
 80150e6:	4607      	mov	r7, r0
 80150e8:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 80150ea:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80150ee:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 80150f2:	d102      	bne.n	80150fa <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80150f4:	4820      	ldr	r0, [pc, #128]	@ (8015178 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 80150f6:	f006 fe43 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
 80150fa:	45c1      	cmp	r9, r8
 80150fc:	bf14      	ite	ne
 80150fe:	4622      	movne	r2, r4
 8015100:	2201      	moveq	r2, #1
 8015102:	eba1 0508 	sub.w	r5, r1, r8
 8015106:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015108:	d231      	bcs.n	801516e <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801510a:	b394      	cbz	r4, 8015172 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801510c:	429c      	cmp	r4, r3
 801510e:	bf28      	it	cs
 8015110:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8015112:	0120      	lsls	r0, r4, #4
 8015114:	f006 fd7f 	bl	801bc16 <_Znwj>
 8015118:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801511a:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 801511e:	2d00      	cmp	r5, #0
 8015120:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8015124:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8015128:	dd04      	ble.n	8015134 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801512a:	462a      	mov	r2, r5
 801512c:	4641      	mov	r1, r8
 801512e:	4630      	mov	r0, r6
 8015130:	f007 f8a8 	bl	801c284 <memmove>
      ptrdiff_t __count = __last - __first;
 8015134:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8015138:	3510      	adds	r5, #16
      if (__count > 0)
 801513a:	f1b9 0f00 	cmp.w	r9, #0
 801513e:	4435      	add	r5, r6
 8015140:	dd04      	ble.n	801514c <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015142:	464a      	mov	r2, r9
 8015144:	4651      	mov	r1, sl
 8015146:	4628      	mov	r0, r5
 8015148:	f007 f994 	bl	801c474 <memcpy>
      return __result + __count;
 801514c:	444d      	add	r5, r9
	if (__p)
 801514e:	f1b8 0f00 	cmp.w	r8, #0
 8015152:	d005      	beq.n	8015160 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 8015154:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8015156:	4640      	mov	r0, r8
 8015158:	eba1 0108 	sub.w	r1, r1, r8
 801515c:	f006 fd36 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8015160:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015164:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8015168:	60be      	str	r6, [r7, #8]
    }
 801516a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801516e:	461c      	mov	r4, r3
 8015170:	e7cf      	b.n	8015112 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015172:	4626      	mov	r6, r4
 8015174:	e7d1      	b.n	801511a <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8015176:	bf00      	nop
 8015178:	0801c592 	.word	0x0801c592

0801517c <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 801517c:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801517e:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 8015182:	4605      	mov	r5, r0
 8015184:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015186:	429c      	cmp	r4, r3
 8015188:	d005      	beq.n	8015196 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801518a:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 801518c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8015190:	3410      	adds	r4, #16
 8015192:	606c      	str	r4, [r5, #4]
      }
 8015194:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 8015196:	4621      	mov	r1, r4
 8015198:	f7ff ff9c 	bl	80150d4 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 801519c:	e7fa      	b.n	8015194 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_+0x18>

0801519e <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801519e:	b570      	push	{r4, r5, r6, lr}
 80151a0:	460c      	mov	r4, r1
 80151a2:	b086      	sub	sp, #24
 80151a4:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80151a6:	f04f 31ff 	mov.w	r1, #4294967295
 80151aa:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 80151ac:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80151ae:	f7f7 faf1 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80151b2:	4621      	mov	r1, r4
 80151b4:	f10d 0207 	add.w	r2, sp, #7
 80151b8:	4628      	mov	r0, r5
 80151ba:	f003 f8ae 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80151be:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80151c2:	4604      	mov	r4, r0
	if (!success) {
 80151c4:	b923      	cbnz	r3, 80151d0 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 80151c6:	6828      	ldr	r0, [r5, #0]
 80151c8:	f7f7 fb18 	bl	800c7fc <osSemaphoreRelease>
}
 80151cc:	b006      	add	sp, #24
 80151ce:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 80151d0:	f10d 0007 	add.w	r0, sp, #7
 80151d4:	f7ff fc62 	bl	8014a9c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 80151d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d0f2      	beq.n	80151c6 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 80151e0:	7923      	ldrb	r3, [r4, #4]
 80151e2:	4298      	cmp	r0, r3
 80151e4:	d1ef      	bne.n	80151c6 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 80151e6:	3004      	adds	r0, #4
 80151e8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80151ec:	2800      	cmp	r0, #0
 80151ee:	d0ea      	beq.n	80151c6 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 80151f0:	7823      	ldrb	r3, [r4, #0]
 80151f2:	b983      	cbnz	r3, 8015216 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x78>
 80151f4:	7863      	ldrb	r3, [r4, #1]
 80151f6:	b973      	cbnz	r3, 8015216 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x78>
		target_callback_list->push_back(callback);
 80151f8:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 80151fa:	9602      	str	r6, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80151fc:	e9d0 2300 	ldrd	r2, r3, [r0]
 8015200:	1a9b      	subs	r3, r3, r2
 8015202:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8015204:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8015206:	f7ff ffb9 	bl	801517c <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 801520a:	2301      	movs	r3, #1
 801520c:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 801520e:	f240 1301 	movw	r3, #257	@ 0x101
 8015212:	8123      	strh	r3, [r4, #8]
 8015214:	e7d7      	b.n	80151c6 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8015216:	8961      	ldrh	r1, [r4, #10]
 8015218:	f7fa fbde 	bl	800f9d8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->pointer = pointer;
 801521c:	6006      	str	r6, [r0, #0]
 801521e:	e7f4      	b.n	801520a <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x6c>

08015220 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8015220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015222:	460c      	mov	r4, r1
 8015224:	b087      	sub	sp, #28
 8015226:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8015228:	f04f 31ff 	mov.w	r1, #4294967295
 801522c:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801522e:	461e      	mov	r6, r3
 8015230:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8015232:	f7f7 faaf 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8015236:	4621      	mov	r1, r4
 8015238:	f10d 0207 	add.w	r2, sp, #7
 801523c:	4628      	mov	r0, r5
 801523e:	f003 f86c 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8015242:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8015246:	4604      	mov	r4, r0
	if (!success) {
 8015248:	b923      	cbnz	r3, 8015254 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 801524a:	6828      	ldr	r0, [r5, #0]
 801524c:	f7f7 fad6 	bl	800c7fc <osSemaphoreRelease>
}
 8015250:	b007      	add	sp, #28
 8015252:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8015254:	f10d 0007 	add.w	r0, sp, #7
 8015258:	f7ff fc20 	bl	8014a9c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 801525c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d0f2      	beq.n	801524a <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 8015264:	7923      	ldrb	r3, [r4, #4]
 8015266:	4298      	cmp	r0, r3
 8015268:	d1ef      	bne.n	801524a <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 801526a:	3004      	adds	r0, #4
 801526c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8015270:	2800      	cmp	r0, #0
 8015272:	d0ea      	beq.n	801524a <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8015274:	7823      	ldrb	r3, [r4, #0]
 8015276:	b983      	cbnz	r3, 801529a <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 8015278:	7863      	ldrb	r3, [r4, #1]
 801527a:	b973      	cbnz	r3, 801529a <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 801527c:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 801527e:	a902      	add	r1, sp, #8
 8015280:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 8015284:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8015288:	1a9b      	subs	r3, r3, r2
 801528a:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801528c:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 801528e:	f7ff ff75 	bl	801517c <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8015292:	2301      	movs	r3, #1
 8015294:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8015296:	7223      	strb	r3, [r4, #8]
 8015298:	e7d7      	b.n	801524a <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801529a:	8961      	ldrh	r1, [r4, #10]
 801529c:	f7fa fb9c 	bl	800f9d8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->write = write;
 80152a0:	e9c0 7601 	strd	r7, r6, [r0, #4]
 80152a4:	e7f5      	b.n	8015292 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x72>
	...

080152a8 <_ZN15MotionGenerator12AddRegistersEv>:
void MotionGenerator::AddRegisters(void) {
 80152a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152ac:	4604      	mov	r4, r0
 80152ae:	b086      	sub	sp, #24
	registers->AddRegister<uint8_t>(REG_GEN_CONFIGURE_MODULES);
 80152b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80152b4:	6800      	ldr	r0, [r0, #0]
	registers->SetRegisterAsSingle(REG_GEN_CONFIGURE_MODULES);
 80152b6:	4625      	mov	r5, r4
	registers->AddRegister<uint8_t>(REG_GEN_CONFIGURE_MODULES);
 80152b8:	f7ff fe01 	bl	8014ebe <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_CONFIGURE_MODULES);
 80152bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
	registers->AddRegisterSemaphore(REG_GEN_SETPOINTS, &GeneratorSemaphore);
 80152c0:	4626      	mov	r6, r4
	registers->SetRegisterAsSingle(REG_GEN_CONFIGURE_MODULES);
 80152c2:	f855 0b10 	ldr.w	r0, [r5], #16
 80152c6:	f003 f861 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
 80152ca:	f240 4102 	movw	r1, #1026	@ 0x402
 80152ce:	462a      	mov	r2, r5
 80152d0:	6820      	ldr	r0, [r4, #0]
 80152d2:	f003 f841 	bl	8018358 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddWriteCallback<uint8_t>(REG_GEN_CONFIGURE_MODULES, (void*) this,
 80152d6:	4bc2      	ldr	r3, [pc, #776]	@ (80155e0 <_ZN15MotionGenerator12AddRegistersEv+0x338>)
 80152d8:	4622      	mov	r2, r4
 80152da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80152de:	6820      	ldr	r0, [r4, #0]
 80152e0:	f7ff fe61 	bl	8014fa6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_GEN_MODULES_CONTROLLER_STATUS);
 80152e4:	f240 4101 	movw	r1, #1025	@ 0x401
 80152e8:	6820      	ldr	r0, [r4, #0]
 80152ea:	f7ff fde8 	bl	8014ebe <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_MODULES_CONTROLLER_STATUS);
 80152ee:	f240 4101 	movw	r1, #1025	@ 0x401
 80152f2:	6820      	ldr	r0, [r4, #0]
 80152f4:	f003 f84a 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
 80152f8:	462a      	mov	r2, r5
 80152fa:	f240 4102 	movw	r1, #1026	@ 0x402
 80152fe:	6820      	ldr	r0, [r4, #0]
 8015300:	f003 f82a 	bl	8018358 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddWriteCallback<uint8_t>(REG_GEN_MODULES_CONTROLLER_STATUS, (void*) this,
 8015304:	4bb7      	ldr	r3, [pc, #732]	@ (80155e4 <_ZN15MotionGenerator12AddRegistersEv+0x33c>)
 8015306:	4622      	mov	r2, r4
 8015308:	f240 4101 	movw	r1, #1025	@ 0x401
 801530c:	6820      	ldr	r0, [r4, #0]
 801530e:	f7ff fe4a 	bl	8014fa6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_GEN_GENERATOR_STATUS);
 8015312:	f240 4102 	movw	r1, #1026	@ 0x402
 8015316:	6820      	ldr	r0, [r4, #0]
 8015318:	f7ff fdd1 	bl	8014ebe <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_GENERATOR_STATUS);
 801531c:	f240 4102 	movw	r1, #1026	@ 0x402
 8015320:	6820      	ldr	r0, [r4, #0]
 8015322:	f003 f833 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
 8015326:	462a      	mov	r2, r5
 8015328:	f240 4102 	movw	r1, #1026	@ 0x402
 801532c:	6820      	ldr	r0, [r4, #0]
 801532e:	f003 f813 	bl	8018358 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddReadCallback<uint8_t>(REG_GEN_GENERATOR_STATUS, (void*) this,
 8015332:	4bad      	ldr	r3, [pc, #692]	@ (80155e8 <_ZN15MotionGenerator12AddRegistersEv+0x340>)
 8015334:	4622      	mov	r2, r4
 8015336:	f240 4102 	movw	r1, #1026	@ 0x402
 801533a:	6820      	ldr	r0, [r4, #0]
 801533c:	f7ff fdf0 	bl	8014f20 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddWriteCallback<uint8_t>(REG_GEN_GENERATOR_STATUS, (void*) this,
 8015340:	4baa      	ldr	r3, [pc, #680]	@ (80155ec <_ZN15MotionGenerator12AddRegistersEv+0x344>)
 8015342:	4622      	mov	r2, r4
 8015344:	f240 4102 	movw	r1, #1026	@ 0x402
 8015348:	6820      	ldr	r0, [r4, #0]
 801534a:	f7ff fe2c 	bl	8014fa6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_GEN_SETPOINTS);
 801534e:	f240 4103 	movw	r1, #1027	@ 0x403
 8015352:	6820      	ldr	r0, [r4, #0]
 8015354:	f7ff fd82 	bl	8014e5c <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsVector(REG_GEN_SETPOINTS);
 8015358:	f240 4103 	movw	r1, #1027	@ 0x403
 801535c:	6820      	ldr	r0, [r4, #0]
 801535e:	f003 f84d 	bl	80183fc <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddRegisterSemaphore(REG_GEN_SETPOINTS, &GeneratorSemaphore);
 8015362:	f856 0b50 	ldr.w	r0, [r6], #80
 8015366:	462a      	mov	r2, r5
 8015368:	f240 4103 	movw	r1, #1027	@ 0x403
 801536c:	f002 fff4 	bl	8018358 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	return AddRegisterPointer(ID, reinterpreted_pointer);
 8015370:	4632      	mov	r2, r6
 8015372:	f240 4103 	movw	r1, #1027	@ 0x403
 8015376:	6820      	ldr	r0, [r4, #0]
 8015378:	f7ff ff11 	bl	801519e <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_GEN_SETPOINTS, READ_PERMISSION);
 801537c:	2202      	movs	r2, #2
 801537e:	f240 4103 	movw	r1, #1027	@ 0x403
 8015382:	6820      	ldr	r0, [r4, #0]
 8015384:	f003 f83d 	bl	8018402 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<uint32_t>(REG_GEN_PERIOD);
 8015388:	6826      	ldr	r6, [r4, #0]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801538a:	f04f 31ff 	mov.w	r1, #4294967295
 801538e:	6830      	ldr	r0, [r6, #0]
 8015390:	f7f7 fa00 	bl	800c794 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8015394:	f10d 0207 	add.w	r2, sp, #7
 8015398:	f240 4104 	movw	r1, #1028	@ 0x404
 801539c:	4630      	mov	r0, r6
 801539e:	f002 ffbc 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 80153a2:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80153a6:	2f00      	cmp	r7, #0
 80153a8:	f000 8100 	beq.w	80155ac <_ZN15MotionGenerator12AddRegistersEv+0x304>
	osSemaphoreRelease(RegistersSemaphore);
 80153ac:	6830      	ldr	r0, [r6, #0]
 80153ae:	f7f7 fa25 	bl	800c7fc <osSemaphoreRelease>
	registers->SetRegisterAsSingle(REG_GEN_PERIOD);
 80153b2:	f240 4104 	movw	r1, #1028	@ 0x404
 80153b6:	6820      	ldr	r0, [r4, #0]
 80153b8:	f002 ffe8 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_PERIOD, &GeneratorSemaphore);
 80153bc:	462a      	mov	r2, r5
 80153be:	f240 4104 	movw	r1, #1028	@ 0x404
 80153c2:	6820      	ldr	r0, [r4, #0]
 80153c4:	f002 ffc8 	bl	8018358 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<uint32_t>(REG_GEN_PERIOD, &period_ms);
 80153c8:	f8d4 8000 	ldr.w	r8, [r4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80153cc:	f04f 31ff 	mov.w	r1, #4294967295
 80153d0:	f8d8 0000 	ldr.w	r0, [r8]
 80153d4:	f7f7 f9de 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80153d8:	f10d 0207 	add.w	r2, sp, #7
 80153dc:	f240 4104 	movw	r1, #1028	@ 0x404
 80153e0:	4640      	mov	r0, r8
 80153e2:	f002 ff9a 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80153e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80153ea:	4606      	mov	r6, r0
	if (!success) {
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	f040 810d 	bne.w	801560c <_ZN15MotionGenerator12AddRegistersEv+0x364>
	osSemaphoreRelease(RegistersSemaphore);
 80153f2:	f8d8 0000 	ldr.w	r0, [r8]
	registers->AddRegisterSemaphore(REG_GEN_MODULE_LENGTH, &GeneratorSemaphore);
 80153f6:	4626      	mov	r6, r4
 80153f8:	f7f7 fa00 	bl	800c7fc <osSemaphoreRelease>
	registers->AddRegister<uint8_t>(REG_GEN_NB_MODULES);
 80153fc:	6820      	ldr	r0, [r4, #0]
 80153fe:	f240 4105 	movw	r1, #1029	@ 0x405
 8015402:	f7ff fd5c 	bl	8014ebe <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_NB_MODULES);
 8015406:	f240 4105 	movw	r1, #1029	@ 0x405
 801540a:	6820      	ldr	r0, [r4, #0]
 801540c:	f002 ffbe 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddReadCallback<uint8_t>(REG_GEN_NB_MODULES, (void*) this,
 8015410:	4622      	mov	r2, r4
 8015412:	6820      	ldr	r0, [r4, #0]
 8015414:	f240 4105 	movw	r1, #1029	@ 0x405
 8015418:	4b75      	ldr	r3, [pc, #468]	@ (80155f0 <_ZN15MotionGenerator12AddRegistersEv+0x348>)
 801541a:	f7ff fd81 	bl	8014f20 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddWriteCallback<uint8_t>(REG_GEN_NB_MODULES, (void*) this,
 801541e:	4b75      	ldr	r3, [pc, #468]	@ (80155f4 <_ZN15MotionGenerator12AddRegistersEv+0x34c>)
 8015420:	4622      	mov	r2, r4
 8015422:	6820      	ldr	r0, [r4, #0]
 8015424:	f240 4105 	movw	r1, #1029	@ 0x405
 8015428:	f7ff fdbd 	bl	8014fa6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_GEN_GENERATOR_OFFSET);
 801542c:	6820      	ldr	r0, [r4, #0]
 801542e:	f240 4106 	movw	r1, #1030	@ 0x406
 8015432:	f7ff fd13 	bl	8014e5c <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsArray(REG_GEN_GENERATOR_OFFSET, 2);
 8015436:	2202      	movs	r2, #2
 8015438:	f240 4106 	movw	r1, #1030	@ 0x406
 801543c:	6820      	ldr	r0, [r4, #0]
 801543e:	f002 ffc1 	bl	80183c4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<float>(REG_GEN_GENERATOR_OFFSET, (void*) this,
 8015442:	4622      	mov	r2, r4
 8015444:	4b6c      	ldr	r3, [pc, #432]	@ (80155f8 <_ZN15MotionGenerator12AddRegistersEv+0x350>)
 8015446:	f240 4106 	movw	r1, #1030	@ 0x406
 801544a:	6820      	ldr	r0, [r4, #0]
 801544c:	f7ff fee8 	bl	8015220 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_GEN_RESET_GENERATOR_OFFSETS);
 8015450:	6820      	ldr	r0, [r4, #0]
 8015452:	f240 4107 	movw	r1, #1031	@ 0x407
 8015456:	f7ff fd32 	bl	8014ebe <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_RESET_GENERATOR_OFFSETS);
 801545a:	f240 4107 	movw	r1, #1031	@ 0x407
 801545e:	6820      	ldr	r0, [r4, #0]
 8015460:	f002 ff94 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_GEN_RESET_GENERATOR_OFFSETS, (void*) this,
 8015464:	4b65      	ldr	r3, [pc, #404]	@ (80155fc <_ZN15MotionGenerator12AddRegistersEv+0x354>)
 8015466:	4622      	mov	r2, r4
 8015468:	6820      	ldr	r0, [r4, #0]
 801546a:	f240 4107 	movw	r1, #1031	@ 0x407
 801546e:	f7ff fd9a 	bl	8014fa6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_GEN_POSITION_OFFSET);
 8015472:	6820      	ldr	r0, [r4, #0]
 8015474:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 8015478:	f7ff fcf0 	bl	8014e5c <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsArray(REG_GEN_POSITION_OFFSET, 2);
 801547c:	2202      	movs	r2, #2
 801547e:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 8015482:	6820      	ldr	r0, [r4, #0]
 8015484:	f002 ff9e 	bl	80183c4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<float>(REG_GEN_POSITION_OFFSET, (void*) this,
 8015488:	4622      	mov	r2, r4
 801548a:	4b5d      	ldr	r3, [pc, #372]	@ (8015600 <_ZN15MotionGenerator12AddRegistersEv+0x358>)
 801548c:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 8015490:	6820      	ldr	r0, [r4, #0]
 8015492:	f7ff fec5 	bl	8015220 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_GEN_RESET_POSITION_OFFSETS);
 8015496:	6820      	ldr	r0, [r4, #0]
 8015498:	f240 4109 	movw	r1, #1033	@ 0x409
 801549c:	f7ff fd0f 	bl	8014ebe <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_RESET_POSITION_OFFSETS);
 80154a0:	f240 4109 	movw	r1, #1033	@ 0x409
 80154a4:	6820      	ldr	r0, [r4, #0]
 80154a6:	f002 ff71 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_GEN_RESET_POSITION_OFFSETS, (void*) this,
 80154aa:	4b56      	ldr	r3, [pc, #344]	@ (8015604 <_ZN15MotionGenerator12AddRegistersEv+0x35c>)
 80154ac:	4622      	mov	r2, r4
 80154ae:	6820      	ldr	r0, [r4, #0]
 80154b0:	f240 4109 	movw	r1, #1033	@ 0x409
 80154b4:	f7ff fd77 	bl	8014fa6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_GEN_MODULE_LENGTH);
 80154b8:	6820      	ldr	r0, [r4, #0]
 80154ba:	f240 410a 	movw	r1, #1034	@ 0x40a
 80154be:	f7ff fccd 	bl	8014e5c <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_MODULE_LENGTH);
 80154c2:	f240 410a 	movw	r1, #1034	@ 0x40a
 80154c6:	6820      	ldr	r0, [r4, #0]
 80154c8:	f002 ff60 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_MODULE_LENGTH, &GeneratorSemaphore);
 80154cc:	f856 0b20 	ldr.w	r0, [r6], #32
 80154d0:	462a      	mov	r2, r5
 80154d2:	f240 410a 	movw	r1, #1034	@ 0x40a
 80154d6:	f002 ff3f 	bl	8018358 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_MODULE_LENGTH, &module_length);
 80154da:	4632      	mov	r2, r6
 80154dc:	6820      	ldr	r0, [r4, #0]
 80154de:	f240 410a 	movw	r1, #1034	@ 0x40a
 80154e2:	f7ff fe5c 	bl	801519e <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegisterSemaphore(REG_GEN_AMPLITUDE, &GeneratorSemaphore);
 80154e6:	4626      	mov	r6, r4
	registers->AddRegister<float>(REG_GEN_AMPLITUDE);
 80154e8:	6820      	ldr	r0, [r4, #0]
 80154ea:	f240 410b 	movw	r1, #1035	@ 0x40b
 80154ee:	f7ff fcb5 	bl	8014e5c <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_AMPLITUDE);
 80154f2:	f240 410b 	movw	r1, #1035	@ 0x40b
 80154f6:	6820      	ldr	r0, [r4, #0]
 80154f8:	f002 ff48 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_AMPLITUDE, &GeneratorSemaphore);
 80154fc:	f856 0b3c 	ldr.w	r0, [r6], #60
 8015500:	462a      	mov	r2, r5
 8015502:	f240 410b 	movw	r1, #1035	@ 0x40b
 8015506:	f002 ff27 	bl	8018358 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_AMPLITUDE, &amplitude);
 801550a:	4632      	mov	r2, r6
 801550c:	6820      	ldr	r0, [r4, #0]
 801550e:	f240 410b 	movw	r1, #1035	@ 0x40b
 8015512:	f7ff fe44 	bl	801519e <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegisterSemaphore(REG_GEN_FREQUENCY, &GeneratorSemaphore);
 8015516:	4626      	mov	r6, r4
	registers->AddRegister<float>(REG_GEN_FREQUENCY);
 8015518:	6820      	ldr	r0, [r4, #0]
 801551a:	f240 410c 	movw	r1, #1036	@ 0x40c
 801551e:	f7ff fc9d 	bl	8014e5c <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_FREQUENCY);
 8015522:	f240 410c 	movw	r1, #1036	@ 0x40c
 8015526:	6820      	ldr	r0, [r4, #0]
 8015528:	f002 ff30 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_FREQUENCY, &GeneratorSemaphore);
 801552c:	f856 0b40 	ldr.w	r0, [r6], #64
 8015530:	462a      	mov	r2, r5
 8015532:	f240 410c 	movw	r1, #1036	@ 0x40c
 8015536:	f002 ff0f 	bl	8018358 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_FREQUENCY, &frequency);
 801553a:	4632      	mov	r2, r6
 801553c:	6820      	ldr	r0, [r4, #0]
 801553e:	f240 410c 	movw	r1, #1036	@ 0x40c
 8015542:	f7ff fe2c 	bl	801519e <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegisterSemaphore(REG_GEN_WAVELENGTH_INVERSE, &GeneratorSemaphore);
 8015546:	4626      	mov	r6, r4
	registers->AddRegister<float>(REG_GEN_WAVELENGTH_INVERSE);
 8015548:	6820      	ldr	r0, [r4, #0]
 801554a:	f240 410d 	movw	r1, #1037	@ 0x40d
 801554e:	f7ff fc85 	bl	8014e5c <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_WAVELENGTH_INVERSE);
 8015552:	f240 410d 	movw	r1, #1037	@ 0x40d
 8015556:	6820      	ldr	r0, [r4, #0]
 8015558:	f002 ff18 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_WAVELENGTH_INVERSE, &GeneratorSemaphore);
 801555c:	f856 0b44 	ldr.w	r0, [r6], #68
 8015560:	462a      	mov	r2, r5
 8015562:	f240 410d 	movw	r1, #1037	@ 0x40d
 8015566:	f002 fef7 	bl	8018358 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_WAVELENGTH_INVERSE, &wavelength_inverse);
 801556a:	4632      	mov	r2, r6
 801556c:	6820      	ldr	r0, [r4, #0]
 801556e:	f240 410d 	movw	r1, #1037	@ 0x40d
 8015572:	f7ff fe14 	bl	801519e <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegister<float>(REG_GEN_PHASE);
 8015576:	6820      	ldr	r0, [r4, #0]
 8015578:	f240 410e 	movw	r1, #1038	@ 0x40e
 801557c:	f7ff fc6e 	bl	8014e5c <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_GEN_PHASE);
 8015580:	f240 410e 	movw	r1, #1038	@ 0x40e
 8015584:	6820      	ldr	r0, [r4, #0]
 8015586:	f002 ff01 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_PHASE, &GeneratorSemaphore);
 801558a:	462a      	mov	r2, r5
 801558c:	4625      	mov	r5, r4
 801558e:	f240 410e 	movw	r1, #1038	@ 0x40e
 8015592:	f855 0b48 	ldr.w	r0, [r5], #72
 8015596:	f002 fedf 	bl	8018358 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_PHASE, &phase);
 801559a:	f240 410e 	movw	r1, #1038	@ 0x40e
 801559e:	462a      	mov	r2, r5
 80155a0:	6820      	ldr	r0, [r4, #0]
}
 80155a2:	b006      	add	sp, #24
 80155a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	registers->AddRegisterPointer<float>(REG_GEN_PHASE, &phase);
 80155a8:	f7ff bdf9 	b.w	801519e <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80155ac:	f10d 0007 	add.w	r0, sp, #7
 80155b0:	f7ff fa12 	bl	80149d8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	configuration_.mode = mode;
 80155b4:	4b14      	ldr	r3, [pc, #80]	@ (8015608 <_ZN15MotionGenerator12AddRegistersEv+0x360>)
	configuration_.register_info = register_;
 80155b6:	f88d 000c 	strb.w	r0, [sp, #12]
	configuration_.mode = mode;
 80155ba:	9302      	str	r3, [sp, #8]
	configuration_.register_info = register_;
 80155bc:	2301      	movs	r3, #1
 80155be:	f88d 700d 	strb.w	r7, [sp, #13]
 80155c2:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 80155c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_semaphore = NULL;
 80155ca:	e9cd 7704 	strd	r7, r7, [sp, #16]
	if (success) {
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	f43f aeec 	beq.w	80153ac <_ZN15MotionGenerator12AddRegistersEv+0x104>
		registers.push_back(configuration_);
 80155d4:	a902      	add	r1, sp, #8
 80155d6:	1d30      	adds	r0, r6, #4
 80155d8:	f7ff fc2f 	bl	8014e3a <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 80155dc:	e6e6      	b.n	80153ac <_ZN15MotionGenerator12AddRegistersEv+0x104>
 80155de:	bf00      	nop
 80155e0:	08014959 	.word	0x08014959
 80155e4:	08014963 	.word	0x08014963
 80155e8:	0801499d 	.word	0x0801499d
 80155ec:	08015859 	.word	0x08015859
 80155f0:	08014977 	.word	0x08014977
 80155f4:	080157a5 	.word	0x080157a5
 80155f8:	08014cbf 	.word	0x08014cbf
 80155fc:	08014c25 	.word	0x08014c25
 8015600:	08014d4d 	.word	0x08014d4d
 8015604:	08014c37 	.word	0x08014c37
 8015608:	04040000 	.word	0x04040000
	uint8_t registered_type = GetTypeID<T>(&success);
 801560c:	f10d 0007 	add.w	r0, sp, #7
 8015610:	f7ff f9e2 	bl	80149d8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 8015614:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015618:	2b00      	cmp	r3, #0
 801561a:	f43f aeea 	beq.w	80153f2 <_ZN15MotionGenerator12AddRegistersEv+0x14a>
	if (target_register->register_info.type != registered_type) {
 801561e:	7933      	ldrb	r3, [r6, #4]
 8015620:	4298      	cmp	r0, r3
 8015622:	f47f aee6 	bne.w	80153f2 <_ZN15MotionGenerator12AddRegistersEv+0x14a>
	if (callbacks[target_register->register_info.type] == NULL) {
 8015626:	3004      	adds	r0, #4
 8015628:	f858 c020 	ldr.w	ip, [r8, r0, lsl #2]
 801562c:	f1bc 0f00 	cmp.w	ip, #0
 8015630:	f43f aedf 	beq.w	80153f2 <_ZN15MotionGenerator12AddRegistersEv+0x14a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8015634:	7831      	ldrb	r1, [r6, #0]
	registers->AddRegisterPointer<uint32_t>(REG_GEN_PERIOD, &period_ms);
 8015636:	f104 0018 	add.w	r0, r4, #24
 801563a:	e9dc 3700 	ldrd	r3, r7, [ip]
 801563e:	1afa      	subs	r2, r7, r3
 8015640:	1112      	asrs	r2, r2, #4
 8015642:	b9c1      	cbnz	r1, 8015676 <_ZN15MotionGenerator12AddRegistersEv+0x3ce>
 8015644:	7871      	ldrb	r1, [r6, #1]
 8015646:	b9b1      	cbnz	r1, 8015676 <_ZN15MotionGenerator12AddRegistersEv+0x3ce>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015648:	f8dc 1008 	ldr.w	r1, [ip, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801564c:	8172      	strh	r2, [r6, #10]
 801564e:	aa02      	add	r2, sp, #8
 8015650:	42b9      	cmp	r1, r7
		callback.pointer = pointer;
 8015652:	9002      	str	r0, [sp, #8]
 8015654:	d00b      	beq.n	801566e <_ZN15MotionGenerator12AddRegistersEv+0x3c6>
 8015656:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8015658:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801565c:	3710      	adds	r7, #16
 801565e:	f8cc 7004 	str.w	r7, [ip, #4]
	target_register->mode.pointer = true;
 8015662:	2301      	movs	r3, #1
 8015664:	7033      	strb	r3, [r6, #0]
	target_register->access.write = true;
 8015666:	f240 1301 	movw	r3, #257	@ 0x101
 801566a:	8133      	strh	r3, [r6, #8]
 801566c:	e6c1      	b.n	80153f2 <_ZN15MotionGenerator12AddRegistersEv+0x14a>
	  _M_realloc_insert(end(), __x);
 801566e:	4660      	mov	r0, ip
 8015670:	f7ff fcdc 	bl	801502c <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8015674:	e7f5      	b.n	8015662 <_ZN15MotionGenerator12AddRegistersEv+0x3ba>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8015676:	8971      	ldrh	r1, [r6, #10]
	if (__n >= this->size())
 8015678:	4291      	cmp	r1, r2
 801567a:	d302      	bcc.n	8015682 <_ZN15MotionGenerator12AddRegistersEv+0x3da>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801567c:	4802      	ldr	r0, [pc, #8]	@ (8015688 <_ZN15MotionGenerator12AddRegistersEv+0x3e0>)
 801567e:	f006 fb82 	bl	801bd86 <_ZSt24__throw_out_of_range_fmtPKcz>
		callback->pointer = pointer;
 8015682:	0109      	lsls	r1, r1, #4
 8015684:	5058      	str	r0, [r3, r1]
 8015686:	e7ec      	b.n	8015662 <_ZN15MotionGenerator12AddRegistersEv+0x3ba>
 8015688:	0801c5c6 	.word	0x0801c5c6

0801568c <_ZNSt6vectorIfSaIfEE6resizeEj>:
      resize(size_type __new_size)
 801568c:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801568e:	e9d0 2500 	ldrd	r2, r5, [r0]
 8015692:	1aac      	subs	r4, r5, r2
 8015694:	10a4      	asrs	r4, r4, #2
	if (__new_size > size())
 8015696:	42a1      	cmp	r1, r4
 8015698:	d903      	bls.n	80156a2 <_ZNSt6vectorIfSaIfEE6resizeEj+0x16>
	  _M_default_append(__new_size - size());
 801569a:	1b09      	subs	r1, r1, r4
 801569c:	f7fd fd04 	bl	80130a8 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>
      }
 80156a0:	bd38      	pop	{r3, r4, r5, pc}
	else if (__new_size < size())
 80156a2:	d2fd      	bcs.n	80156a0 <_ZNSt6vectorIfSaIfEE6resizeEj+0x14>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 80156a4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80156a8:	42aa      	cmp	r2, r5
	    this->_M_impl._M_finish = __pos;
 80156aa:	bf18      	it	ne
 80156ac:	6042      	strne	r2, [r0, #4]
      }
 80156ae:	e7f7      	b.n	80156a0 <_ZNSt6vectorIfSaIfEE6resizeEj+0x14>

080156b0 <_ZN15MotionGenerator18SetNumberOfModulesEh>:
bool MotionGenerator::SetNumberOfModules(uint8_t nb_modules) {
 80156b0:	b570      	push	{r4, r5, r6, lr}
 80156b2:	4604      	mov	r4, r0
 80156b4:	460e      	mov	r6, r1
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 80156b6:	6900      	ldr	r0, [r0, #16]
 80156b8:	f04f 31ff 	mov.w	r1, #4294967295
 80156bc:	f7f7 f86a 	bl	800c794 <osSemaphoreAcquire>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80156c0:	4620      	mov	r0, r4
 80156c2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
	generator_offsets.resize(nb_modules);
 80156c4:	4631      	mov	r1, r6
	number_of_modules = nb_modules;
 80156c6:	7726      	strb	r6, [r4, #28]
 80156c8:	f850 2f24 	ldr.w	r2, [r0, #36]!
 80156cc:	1a9b      	subs	r3, r3, r2
 80156ce:	109d      	asrs	r5, r3, #2
	generator_offsets.resize(nb_modules);
 80156d0:	f7ff ffdc 	bl	801568c <_ZNSt6vectorIfSaIfEE6resizeEj>
      { return __normal_iterator(_M_current + __n); }
 80156d4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80156d6:	b2ed      	uxtb	r5, r5
	*__first = __tmp;
 80156d8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80156da:	2100      	movs	r1, #0
 80156dc:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80156e0:	1a12      	subs	r2, r2, r0
 80156e2:	f006 fde9 	bl	801c2b8 <memset>
 80156e6:	4620      	mov	r0, r4
 80156e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
	position_offsets.resize(nb_modules);
 80156ea:	4631      	mov	r1, r6
 80156ec:	f850 2f30 	ldr.w	r2, [r0, #48]!
 80156f0:	1a9b      	subs	r3, r3, r2
 80156f2:	109d      	asrs	r5, r3, #2
 80156f4:	f7ff ffca 	bl	801568c <_ZNSt6vectorIfSaIfEE6resizeEj>
 80156f8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80156fa:	b2ed      	uxtb	r5, r5
 80156fc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80156fe:	2100      	movs	r1, #0
 8015700:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8015704:	1a12      	subs	r2, r2, r0
 8015706:	f006 fdd7 	bl	801c2b8 <memset>
	osSemaphoreRelease(GeneratorSemaphore);
 801570a:	6920      	ldr	r0, [r4, #16]
 801570c:	f7f7 f876 	bl	800c7fc <osSemaphoreRelease>
}
 8015710:	2001      	movs	r0, #1
 8015712:	bd70      	pop	{r4, r5, r6, pc}

08015714 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS>:
void MotionGenerator::Init(Registers* registers_, Publishers* publishers_, Services* services_, LEDS* leds_) {
 8015714:	b538      	push	{r3, r4, r5, lr}
	publishers = publishers_;
 8015716:	e9c0 1200 	strd	r1, r2, [r0]
	services = services_;
 801571a:	6083      	str	r3, [r0, #8]
	GeneratorSemaphore = osSemaphoreNew(1,1,NULL);
 801571c:	2101      	movs	r1, #1
	leds = leds_;
 801571e:	9b04      	ldr	r3, [sp, #16]
void MotionGenerator::Init(Registers* registers_, Publishers* publishers_, Services* services_, LEDS* leds_) {
 8015720:	4604      	mov	r4, r0
	GeneratorSemaphore = osSemaphoreNew(1,1,NULL);
 8015722:	2200      	movs	r2, #0
	GeneratorInterface = ServiceInterface{.interface=GENERATOR_INTERFACE};
 8015724:	2500      	movs	r5, #0
	leds = leds_;
 8015726:	60c3      	str	r3, [r0, #12]
	GeneratorSemaphore = osSemaphoreNew(1,1,NULL);
 8015728:	4608      	mov	r0, r1
 801572a:	f7f6 ffd7 	bl	800c6dc <osSemaphoreNew>
 801572e:	6120      	str	r0, [r4, #16]
	osSemaphoreRelease(GeneratorSemaphore);
 8015730:	f7f7 f864 	bl	800c7fc <osSemaphoreRelease>
	MoveToRegister = Register{.address=REG_MOTOR_MOVETO, .type=FLOAT_TYPE, .isArray=false, .length=1};
 8015734:	4b18      	ldr	r3, [pc, #96]	@ (8015798 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS+0x84>)
	SetGeneratorPeriod(DEFAULT_GENERATOR_PERIOD);
 8015736:	210a      	movs	r1, #10
	GeneratorInterface = ServiceInterface{.interface=GENERATOR_INTERFACE};
 8015738:	f8a4 5062 	strh.w	r5, [r4, #98]	@ 0x62
	MoveToRegister = Register{.address=REG_MOTOR_MOVETO, .type=FLOAT_TYPE, .isArray=false, .length=1};
 801573c:	6818      	ldr	r0, [r3, #0]
 801573e:	889b      	ldrh	r3, [r3, #4]
 8015740:	65e0      	str	r0, [r4, #92]	@ 0x5c
	SetGeneratorPeriod(DEFAULT_GENERATOR_PERIOD);
 8015742:	4620      	mov	r0, r4
	MoveToRegister = Register{.address=REG_MOTOR_MOVETO, .type=FLOAT_TYPE, .isArray=false, .length=1};
 8015744:	f8a4 3060 	strh.w	r3, [r4, #96]	@ 0x60
	SetGeneratorPeriod(DEFAULT_GENERATOR_PERIOD);
 8015748:	f7ff fa89 	bl	8014c5e <_ZN15MotionGenerator18SetGeneratorPeriodEm>
	SetNumberOfModules(DEFAULT_GENERATOR_NB_NODULES);
 801574c:	4629      	mov	r1, r5
 801574e:	4620      	mov	r0, r4
 8015750:	f7ff ffae 	bl	80156b0 <_ZN15MotionGenerator18SetNumberOfModulesEh>
	ResetGeneratorOffsets();
 8015754:	4620      	mov	r0, r4
 8015756:	f7ff fac5 	bl	8014ce4 <_ZN15MotionGenerator21ResetGeneratorOffsetsEv>
	SetModuleLength(DEFAULT_MODULE_LENGTH);
 801575a:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 801579c <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS+0x88>
 801575e:	4620      	mov	r0, r4
 8015760:	f7ff fb07 	bl	8014d72 <_ZN15MotionGenerator15SetModuleLengthEf>
	SetGeneratorAmplitude(DEFAULT_GENERATOR_AMPLITUDE);
 8015764:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8015768:	4620      	mov	r0, r4
 801576a:	f7ff fb16 	bl	8014d9a <_ZN15MotionGenerator21SetGeneratorAmplitudeEf>
	SetGeneratorFrequency(DEFAULT_GENERATOR_FREQUENCY);
 801576e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015772:	4620      	mov	r0, r4
 8015774:	f7ff fb25 	bl	8014dc2 <_ZN15MotionGenerator21SetGeneratorFrequencyEf>
	SetGeneratorWavelengthInverse(1 / DEFAULT_GENERATOR_WAVELENGTH);
 8015778:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 801577c:	4620      	mov	r0, r4
 801577e:	f7ff fb34 	bl	8014dea <_ZN15MotionGenerator29SetGeneratorWavelengthInverseEf>
	SetGeneratorPhase(DEFAULT_GENERATOR_PHASE);
 8015782:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80157a0 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS+0x8c>
 8015786:	4620      	mov	r0, r4
 8015788:	f7ff fb43 	bl	8014e12 <_ZN15MotionGenerator17SetGeneratorPhaseEf>
	request_module_configuration = false;
 801578c:	f8a4 5064 	strh.w	r5, [r4, #100]	@ 0x64
	request_module_controller_deactivation = false;
 8015790:	f884 5066 	strb.w	r5, [r4, #102]	@ 0x66
}
 8015794:	bd38      	pop	{r3, r4, r5, pc}
 8015796:	bf00      	nop
 8015798:	0801c58c 	.word	0x0801c58c
 801579c:	3dfbe76d 	.word	0x3dfbe76d
 80157a0:	00000000 	.word	0x00000000

080157a4 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			return self->SetNumberOfModules(*input);
 80157a4:	7811      	ldrb	r1, [r2, #0]
 80157a6:	f7ff bf83 	b.w	80156b0 <_ZN15MotionGenerator18SetNumberOfModulesEh>
	...

080157ac <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80157ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80157ae:	1a57      	subs	r7, r2, r1
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80157b0:	4604      	mov	r4, r0
 80157b2:	460d      	mov	r5, r1
 80157b4:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80157b6:	d502      	bpl.n	80157be <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0+0x12>
	  __throw_length_error(
 80157b8:	4807      	ldr	r0, [pc, #28]	@ (80157d8 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0+0x2c>)
 80157ba:	f006 fae1 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80157be:	4638      	mov	r0, r7
 80157c0:	f7ff f8ff 	bl	80149c2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80157c4:	4407      	add	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80157c6:	4602      	mov	r2, r0
 80157c8:	6020      	str	r0, [r4, #0]
			      _Category>::__copy_m(__first, __last, __result);
 80157ca:	4631      	mov	r1, r6
 80157cc:	4628      	mov	r0, r5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80157ce:	60a7      	str	r7, [r4, #8]
 80157d0:	f7eb fb08 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 80157d4:	6060      	str	r0, [r4, #4]
	}
 80157d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157d8:	0801c610 	.word	0x0801c610

080157dc <_ZN15MotionGenerator18SetGeneratorStatusEb>:
bool MotionGenerator::SetGeneratorStatus(bool status) {
 80157dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80157de:	460d      	mov	r5, r1
 80157e0:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 80157e2:	f04f 31ff 	mov.w	r1, #4294967295
 80157e6:	6900      	ldr	r0, [r0, #16]
 80157e8:	f7f6 ffd4 	bl	800c794 <osSemaphoreAcquire>
	if (status) {
 80157ec:	b30d      	cbz	r5, 8015832 <_ZN15MotionGenerator18SetGeneratorStatusEb+0x56>
		leds->ConfigureTimings(LED_ACTIVITY, std::vector<uint8_t>{1}, 10);
 80157ee:	2301      	movs	r3, #1
 80157f0:	68e6      	ldr	r6, [r4, #12]
	_M_range_initialize(__l.begin(), __l.end(),
 80157f2:	f10d 0201 	add.w	r2, sp, #1
 80157f6:	4669      	mov	r1, sp
 80157f8:	f88d 3000 	strb.w	r3, [sp]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80157fc:	2300      	movs	r3, #0
	_M_range_initialize(__l.begin(), __l.end(),
 80157fe:	a801      	add	r0, sp, #4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015800:	9303      	str	r3, [sp, #12]
 8015802:	e9cd 3301 	strd	r3, r3, [sp, #4]
	_M_range_initialize(__l.begin(), __l.end(),
 8015806:	f7ff ffd1 	bl	80157ac <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>
 801580a:	2108      	movs	r1, #8
 801580c:	230a      	movs	r3, #10
 801580e:	aa01      	add	r2, sp, #4
 8015810:	4630      	mov	r0, r6
 8015812:	f7ff f814 	bl	801483e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
      }
 8015816:	a801      	add	r0, sp, #4
 8015818:	f7eb f9f6 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		leds->Blink(LED_ACTIVITY);
 801581c:	2108      	movs	r1, #8
 801581e:	68e0      	ldr	r0, [r4, #12]
 8015820:	f7fe fab7 	bl	8013d92 <_ZN4LEDS5BlinkEh>
	osSemaphoreRelease(GeneratorSemaphore);
 8015824:	6920      	ldr	r0, [r4, #16]
	active = status;
 8015826:	7525      	strb	r5, [r4, #20]
	osSemaphoreRelease(GeneratorSemaphore);
 8015828:	f7f6 ffe8 	bl	800c7fc <osSemaphoreRelease>
}
 801582c:	2001      	movs	r0, #1
 801582e:	b004      	add	sp, #16
 8015830:	bd70      	pop	{r4, r5, r6, pc}
		leds->ClearLED(LED_ACTIVITY);
 8015832:	2108      	movs	r1, #8
 8015834:	68e0      	ldr	r0, [r4, #12]
 8015836:	f7fe fc8c 	bl	8014152 <_ZN4LEDS8ClearLEDEh>
 801583a:	e7f3      	b.n	8015824 <_ZN15MotionGenerator18SetGeneratorStatusEb+0x48>

0801583c <_ZN15MotionGenerator17ActivateGeneratorEv>:
bool MotionGenerator::ActivateGenerator(void) {
 801583c:	b510      	push	{r4, lr}
 801583e:	4604      	mov	r4, r0
	start_time = HAL_GetTick();
 8015840:	f7ed ff4c 	bl	80036dc <HAL_GetTick>
	return SetGeneratorStatus(true);
 8015844:	2101      	movs	r1, #1
	start_time = HAL_GetTick();
 8015846:	64e0      	str	r0, [r4, #76]	@ 0x4c
	return SetGeneratorStatus(true);
 8015848:	4620      	mov	r0, r4
}
 801584a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return SetGeneratorStatus(true);
 801584e:	f7ff bfc5 	b.w	80157dc <_ZN15MotionGenerator18SetGeneratorStatusEb>

08015852 <_ZN15MotionGenerator19DeactivateGeneratorEv>:
	return SetGeneratorStatus(false);
 8015852:	2100      	movs	r1, #0
 8015854:	f7ff bfc2 	b.w	80157dc <_ZN15MotionGenerator18SetGeneratorStatusEb>

08015858 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8015858:	b508      	push	{r3, lr}
			if (*input > 0)
 801585a:	7813      	ldrb	r3, [r2, #0]
 801585c:	b11b      	cbz	r3, 8015866 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t+0xe>
				self->ActivateGenerator();
 801585e:	f7ff ffed 	bl	801583c <_ZN15MotionGenerator17ActivateGeneratorEv>
		}
 8015862:	2001      	movs	r0, #1
 8015864:	bd08      	pop	{r3, pc}
				self->DeactivateGenerator();
 8015866:	f7ff fff4 	bl	8015852 <_ZN15MotionGenerator19DeactivateGeneratorEv>
 801586a:	e7fa      	b.n	8015862 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t+0xa>

0801586c <_ZN21CommunicationProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
 * @param input data: message to decode
 * @param output index: processed length in the data
 * @param output success: true if message decoded
 * @return the decoded and parsed message based on the custom protocol
 */
MessageHeader CommunicationProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> data, uint16_t* index, bool* success) {*success = false; MessageHeader empty_message; return empty_message;}
 801586c:	2200      	movs	r2, #0
 801586e:	9901      	ldr	r1, [sp, #4]
 8015870:	700a      	strb	r2, [r1, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015872:	60c2      	str	r2, [r0, #12]
 8015874:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8015878:	4770      	bx	lr

0801587a <_ZN21CommunicationProtocol17ActivateReceptionEh>:
 * @brief WEAK Activate reception of the associated hardware interface
 *
 * @param input ID: interface ID
 * @return the interface access status
 */
HAL_StatusTypeDef CommunicationProtocol::ActivateReception(uint8_t ID) {return HAL_ERROR;}
 801587a:	2001      	movs	r0, #1
 801587c:	4770      	bx	lr

0801587e <_ZN21CommunicationProtocol4SendE13MessageHeader>:
 * @brief WEAK Send a message over an interface with this protocol
 *
 * @param input ID: message to send
 * @return the interface access status
 */
HAL_StatusTypeDef CommunicationProtocol::Send(MessageHeader message) {return HAL_ERROR;}
 801587e:	2001      	movs	r0, #1
 8015880:	4770      	bx	lr

08015882 <_ZN21CommunicationProtocol5GetIDEPvPb>:
 *
 * @param input pointer: the hardware interface handle pointer
 * @param output success: whether successful
 * @return the interface ID associated to the input handle
 */
uint8_t CommunicationProtocol::GetID(void* pointer, bool* success) {*success = false; return 0;}
 8015882:	2000      	movs	r0, #0
 8015884:	7010      	strb	r0, [r2, #0]
 8015886:	4770      	bx	lr

08015888 <_ZN21CommunicationProtocol14AddInterfaceIDEh>:
void CommunicationProtocol::AddInterfaceID(uint8_t ID_) {
 8015888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801588c:	e9d0 4305 	ldrd	r4, r3, [r0, #20]
 8015890:	4606      	mov	r6, r0
 8015892:	4689      	mov	r9, r1
 8015894:	429c      	cmp	r4, r3
 8015896:	d005      	beq.n	80158a4 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x1c>
 8015898:	7021      	strb	r1, [r4, #0]
	    ++this->_M_impl._M_finish;
 801589a:	6943      	ldr	r3, [r0, #20]
 801589c:	3301      	adds	r3, #1
 801589e:	6143      	str	r3, [r0, #20]
}
 80158a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80158a4:	f8d0 8010 	ldr.w	r8, [r0, #16]
	if (max_size() - size() < __n)
 80158a8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80158ac:	eba4 0408 	sub.w	r4, r4, r8
	if (max_size() - size() < __n)
 80158b0:	429c      	cmp	r4, r3
 80158b2:	d102      	bne.n	80158ba <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x32>
	  __throw_length_error(__N(__s));
 80158b4:	4816      	ldr	r0, [pc, #88]	@ (8015910 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x88>)
 80158b6:	f006 fa63 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
 80158ba:	2c01      	cmp	r4, #1
 80158bc:	4625      	mov	r5, r4
 80158be:	bf38      	it	cc
 80158c0:	2501      	movcc	r5, #1
 80158c2:	1965      	adds	r5, r4, r5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80158c4:	d220      	bcs.n	8015908 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x80>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80158c6:	b30d      	cbz	r5, 801590c <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x84>
 80158c8:	429d      	cmp	r5, r3
 80158ca:	bf28      	it	cs
 80158cc:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80158ce:	4628      	mov	r0, r5
 80158d0:	f006 f9a1 	bl	801bc16 <_Znwj>
 80158d4:	4607      	mov	r7, r0
      if (__count > 0)
 80158d6:	2c00      	cmp	r4, #0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80158d8:	f807 9004 	strb.w	r9, [r7, r4]
 80158dc:	dd04      	ble.n	80158e8 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80158de:	4622      	mov	r2, r4
 80158e0:	4641      	mov	r1, r8
 80158e2:	4638      	mov	r0, r7
 80158e4:	f006 fcce 	bl	801c284 <memmove>
	      ++__new_finish;
 80158e8:	3401      	adds	r4, #1
 80158ea:	443c      	add	r4, r7
	if (__p)
 80158ec:	f1b8 0f00 	cmp.w	r8, #0
 80158f0:	d005      	beq.n	80158fe <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x76>
		    this->_M_impl._M_end_of_storage - __old_start);
 80158f2:	69b1      	ldr	r1, [r6, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80158f4:	4640      	mov	r0, r8
 80158f6:	eba1 0108 	sub.w	r1, r1, r8
 80158fa:	f006 f967 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 80158fe:	e9c6 7404 	strd	r7, r4, [r6, #16]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015902:	442f      	add	r7, r5
 8015904:	61b7      	str	r7, [r6, #24]
 8015906:	e7cb      	b.n	80158a0 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x18>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015908:	461d      	mov	r5, r3
 801590a:	e7e0      	b.n	80158ce <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x46>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801590c:	462f      	mov	r7, r5
 801590e:	e7e2      	b.n	80158d6 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x4e>
 8015910:	0801c592 	.word	0x0801c592

08015914 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>:
uint8_t CommunicationProtocol::GetInterfaceIndex(uint8_t ID_, bool* success) {
 8015914:	b570      	push	{r4, r5, r6, lr}
 8015916:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
	for (uint8_t ID : interfaces_id) {
 801591a:	4620      	mov	r0, r4
 801591c:	42a8      	cmp	r0, r5
 801591e:	d102      	bne.n	8015926 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x12>
 8015920:	2300      	movs	r3, #0
	return 0;
 8015922:	4618      	mov	r0, r3
 8015924:	e007      	b.n	8015936 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x22>
 8015926:	4603      	mov	r3, r0
		if (ID == ID_) {
 8015928:	f813 6b01 	ldrb.w	r6, [r3], #1
 801592c:	428e      	cmp	r6, r1
 801592e:	d104      	bne.n	801593a <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x26>
 8015930:	1b00      	subs	r0, r0, r4
 8015932:	2301      	movs	r3, #1
 8015934:	b2c0      	uxtb	r0, r0
			*success = true;
 8015936:	7013      	strb	r3, [r2, #0]
}
 8015938:	bd70      	pop	{r4, r5, r6, pc}
 801593a:	4618      	mov	r0, r3
 801593c:	e7ee      	b.n	801591c <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x8>

0801593e <_ZN21CommunicationProtocol15InterfaceExistsEh>:
bool CommunicationProtocol::InterfaceExists(uint8_t ID) {
 801593e:	b507      	push	{r0, r1, r2, lr}
	GetInterfaceIndex(ID, &success);
 8015940:	f10d 0207 	add.w	r2, sp, #7
 8015944:	f7ff ffe6 	bl	8015914 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
}
 8015948:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801594c:	b003      	add	sp, #12
 801594e:	f85d fb04 	ldr.w	pc, [sp], #4

08015952 <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>:
 *
 * @param input index: interface index in the vector
 * @param output success: whether successful
 * @return the associated interface ID
 */
uint8_t CommunicationProtocol::GetIDFromIndex(uint8_t index, bool* success) {
 8015952:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015954:	e9d0 4304 	ldrd	r4, r3, [r0, #16]
 8015958:	1b1b      	subs	r3, r3, r4
	if (index < interfaces_id.size()) {
 801595a:	4299      	cmp	r1, r3
		*success = true;
 801595c:	bf35      	itete	cc
 801595e:	2301      	movcc	r3, #1
		return interfaces_id[index];
	} else {
		*success = false;
 8015960:	2000      	movcs	r0, #0
		*success = true;
 8015962:	7013      	strbcc	r3, [r2, #0]
		*success = false;
 8015964:	7010      	strbcs	r0, [r2, #0]
		return interfaces_id[index];
 8015966:	bf38      	it	cc
 8015968:	5c60      	ldrbcc	r0, [r4, r1]
		return 0;
	}
}
 801596a:	bd10      	pop	{r4, pc}

0801596c <_ZN21CommunicationProtocol9GetBufferEhPb>:
 *
 * @param input ID: interface ID
 * @param output success: whether successful
 * @return the associated buffer memory base pointer
 */
std::vector<uint8_t>* CommunicationProtocol::GetBuffer(uint8_t ID, bool* success) {
 801596c:	b538      	push	{r3, r4, r5, lr}
 801596e:	4604      	mov	r4, r0
	uint8_t index = GetInterfaceIndex(ID, success);
 8015970:	f7ff ffd0 	bl	8015914 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 8015974:	4603      	mov	r3, r0
	if (*success)
 8015976:	7810      	ldrb	r0, [r2, #0]
 8015978:	b128      	cbz	r0, 8015986 <_ZN21CommunicationProtocol9GetBufferEhPb+0x1a>
	return *(this->_M_impl._M_start + __n);
 801597a:	b21b      	sxth	r3, r3
 801597c:	6a20      	ldr	r0, [r4, #32]
 801597e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015982:	eb00 0083 	add.w	r0, r0, r3, lsl #2
		return &buffers[index];
	return NULL;
}
 8015986:	bd38      	pop	{r3, r4, r5, pc}

08015988 <_ZN21CommunicationProtocol14GetBufferIndexEhPb>:
 *
 * @param input ID: interface ID
 * @param output success: whether successful
 * @return the associated buffer index pointer
 */
uint16_t* CommunicationProtocol::GetBufferIndex(uint8_t ID, bool* success) {
 8015988:	b538      	push	{r3, r4, r5, lr}
 801598a:	4604      	mov	r4, r0
	uint8_t index = GetInterfaceIndex(ID, success);
 801598c:	f7ff ffc2 	bl	8015914 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 8015990:	4603      	mov	r3, r0
	if (*success)
 8015992:	7810      	ldrb	r0, [r2, #0]
 8015994:	b118      	cbz	r0, 801599e <_ZN21CommunicationProtocol14GetBufferIndexEhPb+0x16>
 8015996:	b21b      	sxth	r3, r3
 8015998:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801599a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
		return &buffers_index[index];
	return NULL;
}
 801599e:	bd38      	pop	{r3, r4, r5, pc}

080159a0 <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>:
 * @brief Set the maximum payload length for the protocol
 *
 * @param input length: the maximum payload length
 */
void CommunicationProtocol::SetProtocolPayloadMaxLength(uint16_t length) {
	max_payload_length = length;
 80159a0:	8381      	strh	r1, [r0, #28]
}
 80159a2:	4770      	bx	lr

080159a4 <_ZN21CommunicationProtocol27GetProtocolPayloadMaxLengthEv>:
 *
 * @return the maximum payload length of the protocol
 */
uint16_t CommunicationProtocol::GetProtocolPayloadMaxLength(void) {
	return max_payload_length;
}
 80159a4:	8b80      	ldrh	r0, [r0, #28]
 80159a6:	4770      	bx	lr

080159a8 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80159a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80159ac:	e9d0 8a00 	ldrd	r8, sl, [r0]
 80159b0:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 80159b2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80159b6:	ebaa 0208 	sub.w	r2, sl, r8
 80159ba:	4607      	mov	r7, r0
 80159bc:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 80159be:	ebb3 0f62 	cmp.w	r3, r2, asr #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80159c2:	ea4f 0462 	mov.w	r4, r2, asr #1
	if (max_size() - size() < __n)
 80159c6:	d102      	bne.n	80159ce <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80159c8:	481e      	ldr	r0, [pc, #120]	@ (8015a44 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x9c>)
 80159ca:	f006 f9d9 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 80159ce:	45c2      	cmp	sl, r8
 80159d0:	bf14      	ite	ne
 80159d2:	4622      	movne	r2, r4
 80159d4:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 80159d6:	eba1 0508 	sub.w	r5, r1, r8
 80159da:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80159dc:	d22e      	bcs.n	8015a3c <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80159de:	b37c      	cbz	r4, 8015a40 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80159e0:	429c      	cmp	r4, r3
 80159e2:	bf28      	it	cs
 80159e4:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80159e6:	0060      	lsls	r0, r4, #1
 80159e8:	f006 f915 	bl	801bc16 <_Znwj>
 80159ec:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80159ee:	f8bb 3000 	ldrh.w	r3, [fp]
      if (__count > 0)
 80159f2:	2d00      	cmp	r5, #0
 80159f4:	5373      	strh	r3, [r6, r5]
 80159f6:	dd04      	ble.n	8015a02 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80159f8:	462a      	mov	r2, r5
 80159fa:	4641      	mov	r1, r8
 80159fc:	4630      	mov	r0, r6
 80159fe:	f006 fc41 	bl	801c284 <memmove>
      ptrdiff_t __count = __last - __first;
 8015a02:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 8015a06:	3502      	adds	r5, #2
      if (__count > 0)
 8015a08:	f1ba 0f00 	cmp.w	sl, #0
 8015a0c:	4435      	add	r5, r6
 8015a0e:	dd04      	ble.n	8015a1a <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015a10:	4652      	mov	r2, sl
 8015a12:	4649      	mov	r1, r9
 8015a14:	4628      	mov	r0, r5
 8015a16:	f006 fd2d 	bl	801c474 <memcpy>
      return __result + __count;
 8015a1a:	4455      	add	r5, sl
	if (__p)
 8015a1c:	f1b8 0f00 	cmp.w	r8, #0
 8015a20:	d005      	beq.n	8015a2e <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 8015a22:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8015a24:	4640      	mov	r0, r8
 8015a26:	eba1 0108 	sub.w	r1, r1, r8
 8015a2a:	f006 f8cf 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8015a2e:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015a32:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 8015a36:	60be      	str	r6, [r7, #8]
    }
 8015a38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015a3c:	461c      	mov	r4, r3
 8015a3e:	e7d2      	b.n	80159e6 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015a40:	4626      	mov	r6, r4
 8015a42:	e7d4      	b.n	80159ee <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x46>
 8015a44:	0801c592 	.word	0x0801c592

08015a48 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8015a48:	b538      	push	{r3, r4, r5, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015a4a:	1e0c      	subs	r4, r1, #0
      _M_create_storage(size_t __n)
 8015a4c:	4605      	mov	r5, r0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015a4e:	d00a      	beq.n	8015a66 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj+0x1e>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8015a50:	da01      	bge.n	8015a56 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj+0xe>
	    std::__throw_bad_alloc();
 8015a52:	f006 f98f 	bl	801bd74 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8015a56:	4620      	mov	r0, r4
 8015a58:	f006 f8dd 	bl	801bc16 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8015a5c:	e9c5 0000 	strd	r0, r0, [r5]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015a60:	4420      	add	r0, r4
 8015a62:	60a8      	str	r0, [r5, #8]
      }
 8015a64:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015a66:	4620      	mov	r0, r4
 8015a68:	e7f8      	b.n	8015a5c <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj+0x14>
	...

08015a6c <_ZNSt6vectorIhSaIhEEC1EjRKS0_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8015a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8015a6e:	1e0d      	subs	r5, r1, #0
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8015a70:	4604      	mov	r4, r0
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8015a72:	da02      	bge.n	8015a7a <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0xe>
	  __throw_length_error(
 8015a74:	480c      	ldr	r0, [pc, #48]	@ (8015aa8 <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x3c>)
 8015a76:	f006 f983 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015a7a:	2700      	movs	r7, #0
 8015a7c:	e9c0 7700 	strd	r7, r7, [r0]
 8015a80:	6087      	str	r7, [r0, #8]
      { _M_create_storage(__n); }
 8015a82:	f7ff ffe1 	bl	8015a48 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8015a86:	6826      	ldr	r6, [r4, #0]
	  if (__n > 0)
 8015a88:	b14d      	cbz	r5, 8015a9e <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x32>
 8015a8a:	4630      	mov	r0, r6
      if (__n <= 0)
 8015a8c:	2d01      	cmp	r5, #1
 8015a8e:	f800 7b01 	strb.w	r7, [r0], #1
 8015a92:	d007      	beq.n	8015aa4 <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x38>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8015a94:	1e6a      	subs	r2, r5, #1
 8015a96:	4639      	mov	r1, r7
      std::__fill_a(__first, __first + __n, __value);
 8015a98:	442e      	add	r6, r5
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8015a9a:	f006 fc0d 	bl	801c2b8 <memset>
      { _M_default_initialize(__n); }
 8015a9e:	4620      	mov	r0, r4
	this->_M_impl._M_finish =
 8015aa0:	6066      	str	r6, [r4, #4]
      { _M_default_initialize(__n); }
 8015aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	      ++__first;
 8015aa4:	4606      	mov	r6, r0
 8015aa6:	e7fa      	b.n	8015a9e <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x32>
 8015aa8:	0801c610 	.word	0x0801c610

08015aac <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8015aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015ab0:	e9d0 7900 	ldrd	r7, r9, [r0]
 8015ab4:	4b35      	ldr	r3, [pc, #212]	@ (8015b8c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe0>)
 8015ab6:	4606      	mov	r6, r0
 8015ab8:	eba9 0507 	sub.w	r5, r9, r7
 8015abc:	4688      	mov	r8, r1
 8015abe:	4614      	mov	r4, r2
 8015ac0:	10ad      	asrs	r5, r5, #2
 8015ac2:	435d      	muls	r5, r3
	if (max_size() - size() < __n)
 8015ac4:	4b32      	ldr	r3, [pc, #200]	@ (8015b90 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe4>)
 8015ac6:	429d      	cmp	r5, r3
 8015ac8:	d102      	bne.n	8015ad0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 8015aca:	4832      	ldr	r0, [pc, #200]	@ (8015b94 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe8>)
 8015acc:	f006 f958 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8015ad0:	45b9      	cmp	r9, r7
 8015ad2:	bf14      	ite	ne
 8015ad4:	462a      	movne	r2, r5
 8015ad6:	2201      	moveq	r2, #1
 8015ad8:	eba1 0b07 	sub.w	fp, r1, r7
 8015adc:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015ade:	d22d      	bcs.n	8015b3c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x90>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015ae0:	b375      	cbz	r5, 8015b40 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x94>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015ae2:	429d      	cmp	r5, r3
 8015ae4:	bf28      	it	cs
 8015ae6:	461d      	movcs	r5, r3
 8015ae8:	200c      	movs	r0, #12
 8015aea:	4368      	muls	r0, r5
 8015aec:	f006 f893 	bl	801bc16 <_Znwj>
 8015af0:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8015af2:	4621      	mov	r1, r4
 8015af4:	eb0a 000b 	add.w	r0, sl, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015af8:	463c      	mov	r4, r7
      _ForwardIterator __cur = __result;
 8015afa:	46d3      	mov	fp, sl
 8015afc:	f7eb f97e 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8015b00:	45a0      	cmp	r8, r4
 8015b02:	f04f 0300 	mov.w	r3, #0
 8015b06:	f10b 0b0c 	add.w	fp, fp, #12
 8015b0a:	d11b      	bne.n	8015b44 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x98>
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8015b0c:	f04f 0800 	mov.w	r8, #0
 8015b10:	454c      	cmp	r4, r9
 8015b12:	465b      	mov	r3, fp
 8015b14:	f10b 0b0c 	add.w	fp, fp, #12
 8015b18:	d125      	bne.n	8015b66 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xba>
	if (__p)
 8015b1a:	b137      	cbz	r7, 8015b2a <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
 8015b1c:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8015b1e:	4638      	mov	r0, r7
 8015b20:	9301      	str	r3, [sp, #4]
 8015b22:	1bc9      	subs	r1, r1, r7
 8015b24:	f006 f852 	bl	801bbcc <_ZdlPvj>
 8015b28:	9b01      	ldr	r3, [sp, #4]
      this->_M_impl._M_finish = __new_finish;
 8015b2a:	e9c6 a300 	strd	sl, r3, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015b2e:	230c      	movs	r3, #12
 8015b30:	fb03 a305 	mla	r3, r3, r5, sl
 8015b34:	60b3      	str	r3, [r6, #8]
    }
 8015b36:	b003      	add	sp, #12
 8015b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b3c:	461d      	mov	r5, r3
 8015b3e:	e7d3      	b.n	8015ae8 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015b40:	46aa      	mov	sl, r5
 8015b42:	e7d6      	b.n	8015af2 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8015b44:	6822      	ldr	r2, [r4, #0]
      }
 8015b46:	4620      	mov	r0, r4
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8015b48:	6023      	str	r3, [r4, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8015b4a:	f84b 2c0c 	str.w	r2, [fp, #-12]
 8015b4e:	6862      	ldr	r2, [r4, #4]
 8015b50:	f84b 2c08 	str.w	r2, [fp, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 8015b54:	68a2      	ldr	r2, [r4, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8015b56:	e9c4 3301 	strd	r3, r3, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8015b5a:	f84b 2c04 	str.w	r2, [fp, #-4]
 8015b5e:	340c      	adds	r4, #12
      }
 8015b60:	f7eb f852 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8015b64:	e7cc      	b.n	8015b00 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x54>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8015b66:	6823      	ldr	r3, [r4, #0]
      }
 8015b68:	4620      	mov	r0, r4
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8015b6a:	f8c4 8000 	str.w	r8, [r4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8015b6e:	f84b 3c0c 	str.w	r3, [fp, #-12]
 8015b72:	6863      	ldr	r3, [r4, #4]
 8015b74:	f84b 3c08 	str.w	r3, [fp, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 8015b78:	68a3      	ldr	r3, [r4, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8015b7a:	e9c4 8801 	strd	r8, r8, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8015b7e:	f84b 3c04 	str.w	r3, [fp, #-4]
 8015b82:	340c      	adds	r4, #12
      }
 8015b84:	f7eb f840 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8015b88:	e7c2      	b.n	8015b10 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x64>
 8015b8a:	bf00      	nop
 8015b8c:	aaaaaaab 	.word	0xaaaaaaab
 8015b90:	0aaaaaaa 	.word	0x0aaaaaaa
 8015b94:	0801c592 	.word	0x0801c592

08015b98 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8015b98:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015b9a:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
      push_back(const value_type& __x)
 8015b9e:	4604      	mov	r4, r0
 8015ba0:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015ba2:	42ab      	cmp	r3, r5
 8015ba4:	d006      	beq.n	8015bb4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	f7eb f928 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
 8015bac:	6863      	ldr	r3, [r4, #4]
 8015bae:	330c      	adds	r3, #12
 8015bb0:	6063      	str	r3, [r4, #4]
      }
 8015bb2:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 8015bb4:	4619      	mov	r1, r3
 8015bb6:	f7ff ff79 	bl	8015aac <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8015bba:	e7fa      	b.n	8015bb2 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_+0x1a>

08015bbc <_ZN21CommunicationProtocol18AddInterfaceBufferEv>:
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015bbc:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	@ 0x30
void CommunicationProtocol::AddInterfaceBuffer() {
 8015bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	buffers_index.push_back(0);
 8015bc2:	2300      	movs	r3, #0
void CommunicationProtocol::AddInterfaceBuffer() {
 8015bc4:	b089      	sub	sp, #36	@ 0x24
 8015bc6:	4291      	cmp	r1, r2
 8015bc8:	4604      	mov	r4, r0
	buffers_index.push_back(0);
 8015bca:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015bce:	d036      	beq.n	8015c3e <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x82>
 8015bd0:	f821 3b02 	strh.w	r3, [r1], #2
	    ++this->_M_impl._M_finish;
 8015bd4:	6301      	str	r1, [r0, #48]	@ 0x30
	std::vector<uint8_t> buffer(BUFFER_SIZE);
 8015bd6:	aa05      	add	r2, sp, #20
 8015bd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015bdc:	a802      	add	r0, sp, #8
 8015bde:	f7ff ff45 	bl	8015a6c <_ZNSt6vectorIhSaIhEEC1EjRKS0_>
	buffers.push_back(buffer);
 8015be2:	f104 0020 	add.w	r0, r4, #32
 8015be6:	a902      	add	r1, sp, #8
 8015be8:	f7ff ffd6 	bl	8015b98 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_>
	std::vector<uint8_t> data_to_send(BUFFER_SIZE);
 8015bec:	aa01      	add	r2, sp, #4
 8015bee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015bf2:	a805      	add	r0, sp, #20
 8015bf4:	f7ff ff3a 	bl	8015a6c <_ZNSt6vectorIhSaIhEEC1EjRKS0_>
	buffers_to_transfer.push_back(data_to_send);
 8015bf8:	1d20      	adds	r0, r4, #4
 8015bfa:	a905      	add	r1, sp, #20
 8015bfc:	f7ff ffcc 	bl	8015b98 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_>
      : _M_current(__i) { }
 8015c00:	68a4      	ldr	r4, [r4, #8]
			 - this->_M_impl._M_start); }
 8015c02:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8015c06:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015c0a:	1a9b      	subs	r3, r3, r2
      if (this->capacity() < __n)
 8015c0c:	2bff      	cmp	r3, #255	@ 0xff
 8015c0e:	d826      	bhi.n	8015c5e <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0xa2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015c10:	f854 6c08 	ldr.w	r6, [r4, #-8]
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8015c14:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8015c18:	1ab6      	subs	r6, r6, r2
 8015c1a:	f005 fffc 	bl	801bc16 <_Znwj>
 8015c1e:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 8015c20:	e954 7203 	ldrd	r7, r2, [r4, #-12]
 8015c24:	1bd2      	subs	r2, r2, r7
      if (__count > 0)
 8015c26:	2a00      	cmp	r2, #0
 8015c28:	dd0e      	ble.n	8015c48 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x8c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015c2a:	4639      	mov	r1, r7
 8015c2c:	f006 fb2a 	bl	801c284 <memmove>
			- this->_M_impl._M_start);
 8015c30:	f854 1c04 	ldr.w	r1, [r4, #-4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8015c34:	4638      	mov	r0, r7
 8015c36:	1bc9      	subs	r1, r1, r7
 8015c38:	f005 ffc8 	bl	801bbcc <_ZdlPvj>
 8015c3c:	e006      	b.n	8015c4c <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x90>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8015c3e:	aa05      	add	r2, sp, #20
 8015c40:	302c      	adds	r0, #44	@ 0x2c
 8015c42:	f7ff feb1 	bl	80159a8 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>
 8015c46:	e7c6      	b.n	8015bd6 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x1a>
	if (__p)
 8015c48:	2f00      	cmp	r7, #0
 8015c4a:	d1f1      	bne.n	8015c30 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x74>
	  this->_M_impl._M_finish = __tmp + __old_size;
 8015c4c:	442e      	add	r6, r5
	  this->_M_impl._M_start = __tmp;
 8015c4e:	f844 5c0c 	str.w	r5, [r4, #-12]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015c52:	f505 7580 	add.w	r5, r5, #256	@ 0x100
	  this->_M_impl._M_finish = __tmp + __old_size;
 8015c56:	f844 6c08 	str.w	r6, [r4, #-8]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015c5a:	f844 5c04 	str.w	r5, [r4, #-4]
      }
 8015c5e:	a805      	add	r0, sp, #20
 8015c60:	f7ea ffd2 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8015c64:	a802      	add	r0, sp, #8
 8015c66:	f7ea ffcf 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8015c6a:	b009      	add	sp, #36	@ 0x24
 8015c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015c6e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015c6e:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8015c70:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015c72:	d006      	beq.n	8015c82 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8015c74:	da01      	bge.n	8015c7a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 8015c76:	f006 f87d 	bl	801bd74 <_ZSt17__throw_bad_allocv>
      }
 8015c7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8015c7e:	f005 bfca 	b.w	801bc16 <_Znwj>
 8015c82:	bd08      	pop	{r3, pc}

08015c84 <_ZN11CANProtocolC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015c84:	2200      	movs	r2, #0
#include <Protocols/Communication/FDCAN/CANProtocol.hpp>

/**
 * @brief Class constructor
 */
CANProtocol::CANProtocol() {
 8015c86:	490b      	ldr	r1, [pc, #44]	@ (8015cb4 <_ZN11CANProtocolC1Ev+0x30>)
 8015c88:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8015c8c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015c90:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015c94:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8015c98:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 8015c9c:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
 8015ca0:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
 8015ca4:	6402      	str	r2, [r0, #64]	@ 0x40
 8015ca6:	6001      	str	r1, [r0, #0]
 8015ca8:	6502      	str	r2, [r0, #80]	@ 0x50
	marker = 0;
 8015caa:	6442      	str	r2, [r0, #68]	@ 0x44
 8015cac:	e9c0 2212 	strd	r2, r2, [r0, #72]	@ 0x48
}
 8015cb0:	4770      	bx	lr
 8015cb2:	bf00      	nop
 8015cb4:	0801c894 	.word	0x0801c894

08015cb8 <_ZN11CANProtocol17GetProtocolLengthEt>:
 *
 * @param input length: the CAN payload length
 * @return the minimum DLC value that fits the given length inside
 */
uint32_t CANProtocol::GetProtocolLength(uint16_t length) {
	if (length <= 0) return FDCAN_DLC_BYTES_0;
 8015cb8:	b301      	cbz	r1, 8015cfc <_ZN11CANProtocol17GetProtocolLengthEt+0x44>
	if (length <= 1) return FDCAN_DLC_BYTES_1;
 8015cba:	2901      	cmp	r1, #1
 8015cbc:	d020      	beq.n	8015d00 <_ZN11CANProtocol17GetProtocolLengthEt+0x48>
	if (length <= 2) return FDCAN_DLC_BYTES_2;
 8015cbe:	2902      	cmp	r1, #2
 8015cc0:	d021      	beq.n	8015d06 <_ZN11CANProtocol17GetProtocolLengthEt+0x4e>
	if (length <= 3) return FDCAN_DLC_BYTES_3;
 8015cc2:	2903      	cmp	r1, #3
 8015cc4:	d022      	beq.n	8015d0c <_ZN11CANProtocol17GetProtocolLengthEt+0x54>
	if (length <= 4) return FDCAN_DLC_BYTES_4;
 8015cc6:	2904      	cmp	r1, #4
 8015cc8:	d023      	beq.n	8015d12 <_ZN11CANProtocol17GetProtocolLengthEt+0x5a>
	if (length <= 5) return FDCAN_DLC_BYTES_5;
 8015cca:	2905      	cmp	r1, #5
 8015ccc:	d024      	beq.n	8015d18 <_ZN11CANProtocol17GetProtocolLengthEt+0x60>
	if (length <= 6) return FDCAN_DLC_BYTES_6;
 8015cce:	2906      	cmp	r1, #6
 8015cd0:	d025      	beq.n	8015d1e <_ZN11CANProtocol17GetProtocolLengthEt+0x66>
	if (length <= 7) return FDCAN_DLC_BYTES_7;
 8015cd2:	2907      	cmp	r1, #7
 8015cd4:	d026      	beq.n	8015d24 <_ZN11CANProtocol17GetProtocolLengthEt+0x6c>
	if (length <= 8) return FDCAN_DLC_BYTES_8;
 8015cd6:	2908      	cmp	r1, #8
 8015cd8:	d027      	beq.n	8015d2a <_ZN11CANProtocol17GetProtocolLengthEt+0x72>
	if (length <= 12) return FDCAN_DLC_BYTES_12;
 8015cda:	290c      	cmp	r1, #12
 8015cdc:	d928      	bls.n	8015d30 <_ZN11CANProtocol17GetProtocolLengthEt+0x78>
	if (length <= 16) return FDCAN_DLC_BYTES_16;
 8015cde:	2910      	cmp	r1, #16
 8015ce0:	d929      	bls.n	8015d36 <_ZN11CANProtocol17GetProtocolLengthEt+0x7e>
	if (length <= 20) return FDCAN_DLC_BYTES_20;
 8015ce2:	2914      	cmp	r1, #20
 8015ce4:	d92a      	bls.n	8015d3c <_ZN11CANProtocol17GetProtocolLengthEt+0x84>
	if (length <= 24) return FDCAN_DLC_BYTES_24;
 8015ce6:	2918      	cmp	r1, #24
 8015ce8:	d92b      	bls.n	8015d42 <_ZN11CANProtocol17GetProtocolLengthEt+0x8a>
	if (length <= 32) return FDCAN_DLC_BYTES_32;
 8015cea:	2920      	cmp	r1, #32
 8015cec:	d92c      	bls.n	8015d48 <_ZN11CANProtocol17GetProtocolLengthEt+0x90>
	if (length <= 48) return FDCAN_DLC_BYTES_48;
	if (length <= 64) return FDCAN_DLC_BYTES_64;
 8015cee:	2931      	cmp	r1, #49	@ 0x31
 8015cf0:	bf34      	ite	cc
 8015cf2:	f44f 2060 	movcc.w	r0, #917504	@ 0xe0000
 8015cf6:	f44f 2070 	movcs.w	r0, #983040	@ 0xf0000
 8015cfa:	4770      	bx	lr
	if (length <= 0) return FDCAN_DLC_BYTES_0;
 8015cfc:	4608      	mov	r0, r1
 8015cfe:	4770      	bx	lr
	if (length <= 1) return FDCAN_DLC_BYTES_1;
 8015d00:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8015d04:	4770      	bx	lr
	if (length <= 2) return FDCAN_DLC_BYTES_2;
 8015d06:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8015d0a:	4770      	bx	lr
	if (length <= 3) return FDCAN_DLC_BYTES_3;
 8015d0c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8015d10:	4770      	bx	lr
	if (length <= 4) return FDCAN_DLC_BYTES_4;
 8015d12:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8015d16:	4770      	bx	lr
	if (length <= 5) return FDCAN_DLC_BYTES_5;
 8015d18:	f44f 20a0 	mov.w	r0, #327680	@ 0x50000
 8015d1c:	4770      	bx	lr
	if (length <= 6) return FDCAN_DLC_BYTES_6;
 8015d1e:	f44f 20c0 	mov.w	r0, #393216	@ 0x60000
 8015d22:	4770      	bx	lr
	if (length <= 7) return FDCAN_DLC_BYTES_7;
 8015d24:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
 8015d28:	4770      	bx	lr
	if (length <= 8) return FDCAN_DLC_BYTES_8;
 8015d2a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8015d2e:	4770      	bx	lr
	if (length <= 12) return FDCAN_DLC_BYTES_12;
 8015d30:	f44f 2010 	mov.w	r0, #589824	@ 0x90000
 8015d34:	4770      	bx	lr
	if (length <= 16) return FDCAN_DLC_BYTES_16;
 8015d36:	f44f 2020 	mov.w	r0, #655360	@ 0xa0000
 8015d3a:	4770      	bx	lr
	if (length <= 20) return FDCAN_DLC_BYTES_20;
 8015d3c:	f44f 2030 	mov.w	r0, #720896	@ 0xb0000
 8015d40:	4770      	bx	lr
	if (length <= 24) return FDCAN_DLC_BYTES_24;
 8015d42:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 8015d46:	4770      	bx	lr
	if (length <= 32) return FDCAN_DLC_BYTES_32;
 8015d48:	f44f 2050 	mov.w	r0, #851968	@ 0xd0000
	return FDCAN_DLC_BYTES_64;
}
 8015d4c:	4770      	bx	lr

08015d4e <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      _GLIBCXX20_CONSTEXPR
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 8015d4e:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8015d50:	680d      	ldr	r5, [r1, #0]
      _M_move_assign(vector&& __x, true_type) noexcept
 8015d52:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8015d54:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8015d56:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8015d5a:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8015d5c:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8015d5e:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8015d60:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8015d62:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8015d64:	688d      	ldr	r5, [r1, #8]
 8015d66:	6085      	str	r5, [r0, #8]
      }
 8015d68:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8015d6a:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8015d6c:	e9c1 3300 	strd	r3, r3, [r1]
 8015d70:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8015d74:	f7ea ff48 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      {
	vector __tmp(get_allocator());
	this->_M_impl._M_swap_data(__x._M_impl);
	__tmp._M_impl._M_swap_data(__x._M_impl);
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }
 8015d78:	b005      	add	sp, #20
 8015d7a:	bd30      	pop	{r4, r5, pc}

08015d7c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>:
H* TemplateCommunicationProtocol<H>::GetInterface(uint8_t ID, bool* success) {
 8015d7c:	b538      	push	{r3, r4, r5, lr}
 8015d7e:	4615      	mov	r5, r2
 8015d80:	4604      	mov	r4, r0
	uint8_t index = GetInterfaceIndex(ID, success);
 8015d82:	f7ff fdc7 	bl	8015914 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 8015d86:	4603      	mov	r3, r0
	if (*success) {
 8015d88:	7828      	ldrb	r0, [r5, #0]
 8015d8a:	b118      	cbz	r0, 8015d94 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb+0x18>
	return *(this->_M_impl._M_start + __n);
 8015d8c:	b21b      	sxth	r3, r3
		return interfaces[index];
 8015d8e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8015d90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
}
 8015d94:	bd38      	pop	{r3, r4, r5, pc}

08015d96 <_ZN11CANProtocol16ConfigureFiltersEh>:
HAL_StatusTypeDef CANProtocol::ConfigureFilters(uint8_t ID) {
 8015d96:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 8015d98:	f10d 020f 	add.w	r2, sp, #15
 8015d9c:	f7ff ffee 	bl	8015d7c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 8015da0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8015da4:	2301      	movs	r3, #1
 8015da6:	b13a      	cbz	r2, 8015db8 <_ZN11CANProtocol16ConfigureFiltersEh+0x22>
	return HAL_FDCAN_ConfigGlobalFilter(handle, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8015da8:	2200      	movs	r2, #0
 8015daa:	9300      	str	r3, [sp, #0]
 8015dac:	4611      	mov	r1, r2
 8015dae:	f7f0 f8cd 	bl	8005f4c <HAL_FDCAN_ConfigGlobalFilter>
}
 8015db2:	b005      	add	sp, #20
 8015db4:	f85d fb04 	ldr.w	pc, [sp], #4
	if (not success) return HAL_ERROR;
 8015db8:	4618      	mov	r0, r3
 8015dba:	e7fa      	b.n	8015db2 <_ZN11CANProtocol16ConfigureFiltersEh+0x1c>

08015dbc <_ZN11CANProtocol17ActivateReceptionEh>:
HAL_StatusTypeDef CANProtocol::ActivateReception(uint8_t ID) {
 8015dbc:	b507      	push	{r0, r1, r2, lr}
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 8015dbe:	f10d 0207 	add.w	r2, sp, #7
 8015dc2:	f7ff ffdb 	bl	8015d7c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 8015dc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015dca:	b133      	cbz	r3, 8015dda <_ZN11CANProtocol17ActivateReceptionEh+0x1e>
	return HAL_FDCAN_ActivateNotification(handle, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8015dcc:	2200      	movs	r2, #0
 8015dce:	2101      	movs	r1, #1
 8015dd0:	f7f0 fa1a 	bl	8006208 <HAL_FDCAN_ActivateNotification>
}
 8015dd4:	b003      	add	sp, #12
 8015dd6:	f85d fb04 	ldr.w	pc, [sp], #4
	if (not success) return HAL_ERROR;
 8015dda:	2001      	movs	r0, #1
 8015ddc:	e7fa      	b.n	8015dd4 <_ZN11CANProtocol17ActivateReceptionEh+0x18>

08015dde <_ZN11CANProtocol5StartEh>:
HAL_StatusTypeDef CANProtocol::Start(uint8_t ID) {
 8015dde:	b507      	push	{r0, r1, r2, lr}
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 8015de0:	f10d 0207 	add.w	r2, sp, #7
 8015de4:	f7ff ffca 	bl	8015d7c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 8015de8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015dec:	b123      	cbz	r3, 8015df8 <_ZN11CANProtocol5StartEh+0x1a>
	return HAL_FDCAN_Start(handle);
 8015dee:	f7f0 f8c8 	bl	8005f82 <HAL_FDCAN_Start>
}
 8015df2:	b003      	add	sp, #12
 8015df4:	f85d fb04 	ldr.w	pc, [sp], #4
	if (not success) return HAL_ERROR;
 8015df8:	2001      	movs	r0, #1
 8015dfa:	e7fa      	b.n	8015df2 <_ZN11CANProtocol5StartEh+0x14>

08015dfc <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8015dfc:	460a      	mov	r2, r1
 8015dfe:	b510      	push	{r4, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015e00:	e9d0 1401 	ldrd	r1, r4, [r0, #4]
 8015e04:	42a1      	cmp	r1, r4
 8015e06:	d004      	beq.n	8015e12 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_+0x16>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8015e08:	6812      	ldr	r2, [r2, #0]
 8015e0a:	f841 2b04 	str.w	r2, [r1], #4
	    ++this->_M_impl._M_finish;
 8015e0e:	6041      	str	r1, [r0, #4]
      }
 8015e10:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 8015e12:	f7ec fa91 	bl	8002338 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8015e16:	e7fb      	b.n	8015e10 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_+0x14>

08015e18 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8015e18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015e1c:	e9d0 9a00 	ldrd	r9, sl, [r0]
 8015e20:	4b2a      	ldr	r3, [pc, #168]	@ (8015ecc <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>)
 8015e22:	4680      	mov	r8, r0
 8015e24:	ebaa 0409 	sub.w	r4, sl, r9
 8015e28:	468b      	mov	fp, r1
 8015e2a:	4615      	mov	r5, r2
 8015e2c:	10a4      	asrs	r4, r4, #2
 8015e2e:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 8015e30:	4b27      	ldr	r3, [pc, #156]	@ (8015ed0 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb8>)
 8015e32:	429c      	cmp	r4, r3
 8015e34:	d102      	bne.n	8015e3c <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 8015e36:	4827      	ldr	r0, [pc, #156]	@ (8015ed4 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
 8015e38:	f005 ffa2 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
 8015e3c:	45ca      	cmp	sl, r9
 8015e3e:	bf14      	ite	ne
 8015e40:	4622      	movne	r2, r4
 8015e42:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8015e44:	eba1 0609 	sub.w	r6, r1, r9
 8015e48:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015e4a:	d23a      	bcs.n	8015ec2 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015e4c:	b3dc      	cbz	r4, 8015ec6 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xae>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015e4e:	429c      	cmp	r4, r3
 8015e50:	bf28      	it	cs
 8015e52:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8015e54:	2024      	movs	r0, #36	@ 0x24
 8015e56:	4360      	muls	r0, r4
 8015e58:	f005 fedd 	bl	801bc16 <_Znwj>
 8015e5c:	4607      	mov	r7, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8015e5e:	eb07 0c06 	add.w	ip, r7, r6
      if (__count > 0)
 8015e62:	2e00      	cmp	r6, #0
 8015e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015e66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015e6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015e70:	682b      	ldr	r3, [r5, #0]
 8015e72:	f8cc 3000 	str.w	r3, [ip]
 8015e76:	dd04      	ble.n	8015e82 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015e78:	4632      	mov	r2, r6
 8015e7a:	4649      	mov	r1, r9
 8015e7c:	4638      	mov	r0, r7
 8015e7e:	f006 fa01 	bl	801c284 <memmove>
      ptrdiff_t __count = __last - __first;
 8015e82:	ebaa 0a0b 	sub.w	sl, sl, fp
	      ++__new_finish;
 8015e86:	3624      	adds	r6, #36	@ 0x24
      if (__count > 0)
 8015e88:	f1ba 0f00 	cmp.w	sl, #0
 8015e8c:	443e      	add	r6, r7
 8015e8e:	dd04      	ble.n	8015e9a <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015e90:	4652      	mov	r2, sl
 8015e92:	4659      	mov	r1, fp
 8015e94:	4630      	mov	r0, r6
 8015e96:	f006 faed 	bl	801c474 <memcpy>
      return __result + __count;
 8015e9a:	4456      	add	r6, sl
	if (__p)
 8015e9c:	f1b9 0f00 	cmp.w	r9, #0
 8015ea0:	d006      	beq.n	8015eb0 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
		    this->_M_impl._M_end_of_storage - __old_start);
 8015ea2:	f8d8 1008 	ldr.w	r1, [r8, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8015ea6:	4648      	mov	r0, r9
 8015ea8:	eba1 0109 	sub.w	r1, r1, r9
 8015eac:	f005 fe8e 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015eb0:	2324      	movs	r3, #36	@ 0x24
      this->_M_impl._M_finish = __new_finish;
 8015eb2:	e9c8 7600 	strd	r7, r6, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015eb6:	fb03 7704 	mla	r7, r3, r4, r7
 8015eba:	f8c8 7008 	str.w	r7, [r8, #8]
    }
 8015ebe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ec2:	461c      	mov	r4, r3
 8015ec4:	e7c6      	b.n	8015e54 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015ec6:	4627      	mov	r7, r4
 8015ec8:	e7c9      	b.n	8015e5e <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8015eca:	bf00      	nop
 8015ecc:	38e38e39 	.word	0x38e38e39
 8015ed0:	038e38e3 	.word	0x038e38e3
 8015ed4:	0801c592 	.word	0x0801c592

08015ed8 <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef>:
void CANProtocol::AddInterface(uint8_t ID, FDCAN_HandleTypeDef* interface) {
 8015ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015eda:	4606      	mov	r6, r0
 8015edc:	b08d      	sub	sp, #52	@ 0x34
 8015ede:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 8015ee0:	f7ff fcd2 	bl	8015888 <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 8015ee4:	4630      	mov	r0, r6
 8015ee6:	f7ff fe69 	bl	8015bbc <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	interfaces.push_back(interface);
 8015eea:	a901      	add	r1, sp, #4
 8015eec:	f106 0038 	add.w	r0, r6, #56	@ 0x38
 8015ef0:	f7ff ff84 	bl	8015dfc <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_>
	FDCANTxHeader.BitRateSwitch = FDCAN_BRS_ON; 				// FDCAN_BRS_ON FDCAN_BRS_OFF
 8015ef4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8015ef8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
	FDCANTxHeader.IdType = FDCAN_STANDARD_ID; 				// FDCAN_STANDARD_ID or FDCAN_CLASSIC_CAN
 8015efc:	2300      	movs	r3, #0
	FDCANTxHeader.BitRateSwitch = FDCAN_BRS_ON; 				// FDCAN_BRS_ON FDCAN_BRS_OFF
 8015efe:	e9cd 1207 	strd	r1, r2, [sp, #28]
	FDCANTxHeader.FDFormat = FDCAN_FD_CAN; 					// FDCAN_FD_CAN or FDCAN_CLASSIC_CAN
 8015f02:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
	FDCANTxHeader.TxFrameType = FDCAN_DATA_FRAME; 			// FDCAN_DATA_FRAME or FDCAN_REMOTE_FRAME
 8015f06:	e9cd 3304 	strd	r3, r3, [sp, #16]
	FDCANTxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS; 	// FDCAN_NO_TX_EVENTS or FDCAN_STORE_TX_EVENTS
 8015f0a:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015f0e:	e9d6 7313 	ldrd	r7, r3, [r6, #76]	@ 0x4c
 8015f12:	429f      	cmp	r7, r3
 8015f14:	d00b      	beq.n	8015f2e <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef+0x56>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8015f16:	ad03      	add	r5, sp, #12
 8015f18:	463c      	mov	r4, r7
	    ++this->_M_impl._M_finish;
 8015f1a:	3724      	adds	r7, #36	@ 0x24
 8015f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015f24:	682b      	ldr	r3, [r5, #0]
 8015f26:	6023      	str	r3, [r4, #0]
 8015f28:	64f7      	str	r7, [r6, #76]	@ 0x4c
}
 8015f2a:	b00d      	add	sp, #52	@ 0x34
 8015f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  _M_realloc_insert(end(), __x);
 8015f2e:	aa03      	add	r2, sp, #12
 8015f30:	4639      	mov	r1, r7
 8015f32:	f106 0048 	add.w	r0, r6, #72	@ 0x48
 8015f36:	f7ff ff6f 	bl	8015e18 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8015f3a:	e7f6      	b.n	8015f2a <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef+0x52>

08015f3c <_ZN11CANProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
 * @param input data: message to decode
 * @param output index: processed length in the data
 * @param output success: true if message decoded
 * @return the decoded and parsed message based on the custom protocol
 */
MessageHeader CANProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> message, uint16_t* index, bool* success) {
 8015f3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8015f40:	461d      	mov	r5, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015f42:	2300      	movs	r3, #0
 8015f44:	4604      	mov	r4, r0
 8015f46:	60c3      	str	r3, [r0, #12]
 8015f48:	e9c0 3301 	strd	r3, r3, [r0, #4]
	return *(this->_M_impl._M_start + __n);
 8015f4c:	682b      	ldr	r3, [r5, #0]
	MessageHeader decoded_message;

	decoded_message.target_address = message[0];
 8015f4e:	781a      	ldrb	r2, [r3, #0]
      { return __normal_iterator(_M_current + __n); }
 8015f50:	1cdf      	adds	r7, r3, #3
 8015f52:	7402      	strb	r2, [r0, #16]
	decoded_message.source_address = message[1];
 8015f54:	785a      	ldrb	r2, [r3, #1]
 8015f56:	7442      	strb	r2, [r0, #17]
 8015f58:	789e      	ldrb	r6, [r3, #2]
 8015f5a:	eb07 0806 	add.w	r8, r7, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8015f5e:	4630      	mov	r0, r6
 8015f60:	f7ff fe85 	bl	8015c6e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015f64:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8015f66:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
 8015f68:	4641      	mov	r1, r8
 8015f6a:	9001      	str	r0, [sp, #4]
 8015f6c:	4638      	mov	r0, r7
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015f6e:	9603      	str	r6, [sp, #12]
 8015f70:	f7ea ff38 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8015f74:	a901      	add	r1, sp, #4
	  this->_M_impl._M_finish =
 8015f76:	9002      	str	r0, [sp, #8]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8015f78:	1d20      	adds	r0, r4, #4
 8015f7a:	f7ff fee8 	bl	8015d4e <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 8015f7e:	a801      	add	r0, sp, #4
 8015f80:	f7ea fe42 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	uint16_t length = message[2];

	// Retrieve payload based on length byte
	decoded_message.payload = std::vector<uint8_t>(message.begin() + 3, message.begin() + 3 + length);

	*success = true;
 8015f84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015f86:	2201      	movs	r2, #1
	*index = message.size();

	return decoded_message;
}
 8015f88:	4620      	mov	r0, r4
	*success = true;
 8015f8a:	701a      	strb	r2, [r3, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015f8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015f90:	1a9b      	subs	r3, r3, r2
	*index = message.size();
 8015f92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015f94:	8013      	strh	r3, [r2, #0]
}
 8015f96:	b004      	add	sp, #16
 8015f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015f9c <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef>:
std::vector<uint8_t> CANProtocol::CodeProtocol(MessageHeader message, FDCAN_TxHeaderTypeDef* TxHeader) {
 8015f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fa0:	4698      	mov	r8, r3
	TxHeader->Identifier = message.target_address;
 8015fa2:	7c13      	ldrb	r3, [r2, #16]
std::vector<uint8_t> CANProtocol::CodeProtocol(MessageHeader message, FDCAN_TxHeaderTypeDef* TxHeader) {
 8015fa4:	4617      	mov	r7, r2
 8015fa6:	4689      	mov	r9, r1
	TxHeader->Identifier = message.target_address;
 8015fa8:	f8c8 3000 	str.w	r3, [r8]
std::vector<uint8_t> CANProtocol::CodeProtocol(MessageHeader message, FDCAN_TxHeaderTypeDef* TxHeader) {
 8015fac:	4604      	mov	r4, r0
	TxHeader->MessageMarker = marker;
 8015fae:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
	if (marker >= 4294967295)
 8015fb0:	1c5a      	adds	r2, r3, #1
 8015fb2:	f04f 0200 	mov.w	r2, #0
	TxHeader->MessageMarker = marker;
 8015fb6:	f8c8 3020 	str.w	r3, [r8, #32]
		marker = 0;
 8015fba:	bf0c      	ite	eq
 8015fbc:	4613      	moveq	r3, r2
		marker++;
 8015fbe:	3301      	addne	r3, #1
 8015fc0:	644b      	str	r3, [r1, #68]	@ 0x44
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8015fc2:	2101      	movs	r1, #1
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015fc4:	6082      	str	r2, [r0, #8]
 8015fc6:	e9c0 2200 	strd	r2, r2, [r0]
 8015fca:	4a41      	ldr	r2, [pc, #260]	@ (80160d0 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x134>)
 8015fcc:	f7ea fe3d 	bl	8000c4a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8015fd0:	4606      	mov	r6, r0
      pointer __new_start(this->_M_allocate(__len));
 8015fd2:	f7ff fe4c 	bl	8015c6e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8015fd6:	7c7b      	ldrb	r3, [r7, #17]
 8015fd8:	4601      	mov	r1, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015fda:	4406      	add	r6, r0
      pointer __new_start(this->_M_allocate(__len));
 8015fdc:	4605      	mov	r5, r0
 8015fde:	f801 3b01 	strb.w	r3, [r1], #1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015fe2:	42b1      	cmp	r1, r6
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015fe4:	60a6      	str	r6, [r4, #8]
      this->_M_impl._M_finish = __new_finish;
 8015fe6:	e9c4 0100 	strd	r0, r1, [r4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015fea:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
 8015fee:	eba3 0302 	sub.w	r3, r3, r2
	coded_message.push_back((uint8_t) message.payload.size());
 8015ff2:	fa5f fa83 	uxtb.w	sl, r3
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015ff6:	d02d      	beq.n	8016054 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0xb8>
	    ++this->_M_impl._M_finish;
 8015ff8:	3502      	adds	r5, #2
 8015ffa:	f880 a001 	strb.w	sl, [r0, #1]
 8015ffe:	6065      	str	r5, [r4, #4]
      : _M_current(__i) { }
 8016000:	e9d7 a301 	ldrd	sl, r3, [r7, #4]
	if (__first != __last)
 8016004:	4553      	cmp	r3, sl
 8016006:	d018      	beq.n	801603a <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x9e>
			  - this->_M_impl._M_finish) >= __n)
 8016008:	68a2      	ldr	r2, [r4, #8]
    { return __lhs.base() - __rhs.base(); }
 801600a:	eba3 050a 	sub.w	r5, r3, sl
      : _M_current(__i) { }
 801600e:	e9d4 7600 	ldrd	r7, r6, [r4]
 8016012:	1b92      	subs	r2, r2, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 8016014:	4295      	cmp	r5, r2
 8016016:	d835      	bhi.n	8016084 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0xe8>
 8016018:	4619      	mov	r1, r3
 801601a:	4632      	mov	r2, r6
 801601c:	4650      	mov	r0, sl
 801601e:	f7ea fee1 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n - __elems_after;
 8016022:	6862      	ldr	r2, [r4, #4]
 8016024:	4631      	mov	r1, r6
 8016026:	4630      	mov	r0, r6
 8016028:	442a      	add	r2, r5
 801602a:	6062      	str	r2, [r4, #4]
 801602c:	f7eb ff52 	bl	8001ed4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8016030:	4632      	mov	r2, r6
 8016032:	4651      	mov	r1, sl
 8016034:	4650      	mov	r0, sl
 8016036:	f7ea fed5 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	TxHeader->DataLength = GetProtocolLength(coded_message.size());
 801603a:	4648      	mov	r0, r9
 801603c:	e9d4 3100 	ldrd	r3, r1, [r4]
 8016040:	1ac9      	subs	r1, r1, r3
 8016042:	b289      	uxth	r1, r1
 8016044:	f7ff fe38 	bl	8015cb8 <_ZN11CANProtocol17GetProtocolLengthEt>
 8016048:	f8c8 000c 	str.w	r0, [r8, #12]
}
 801604c:	4620      	mov	r0, r4
 801604e:	b003      	add	sp, #12
 8016050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8016054:	4a1e      	ldr	r2, [pc, #120]	@ (80160d0 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x134>)
 8016056:	2101      	movs	r1, #1
 8016058:	4620      	mov	r0, r4
 801605a:	f7ea fdf6 	bl	8000c4a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 801605e:	4683      	mov	fp, r0
      pointer __new_start(this->_M_allocate(__len));
 8016060:	f7ff fe05 	bl	8015c6e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016064:	782b      	ldrb	r3, [r5, #0]
		    this->_M_impl._M_end_of_storage - __old_start);
 8016066:	68a1      	ldr	r1, [r4, #8]
      pointer __new_start(this->_M_allocate(__len));
 8016068:	4606      	mov	r6, r0
 801606a:	7003      	strb	r3, [r0, #0]
 801606c:	f880 a001 	strb.w	sl, [r0, #1]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8016070:	1b49      	subs	r1, r1, r5
 8016072:	4628      	mov	r0, r5
 8016074:	f005 fdaa 	bl	801bbcc <_ZdlPvj>
	      ++__new_finish;
 8016078:	1cb3      	adds	r3, r6, #2
      this->_M_impl._M_start = __new_start;
 801607a:	6026      	str	r6, [r4, #0]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801607c:	445e      	add	r6, fp
      this->_M_impl._M_finish = __new_finish;
 801607e:	6063      	str	r3, [r4, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016080:	60a6      	str	r6, [r4, #8]
 8016082:	e7bd      	b.n	8016000 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x64>
		  _M_check_len(__n, "vector::_M_range_insert");
 8016084:	4629      	mov	r1, r5
 8016086:	4a13      	ldr	r2, [pc, #76]	@ (80160d4 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x138>)
 8016088:	4620      	mov	r0, r4
 801608a:	9301      	str	r3, [sp, #4]
 801608c:	f7ea fddd 	bl	8000c4a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8016090:	4683      	mov	fp, r0
		pointer __new_start(this->_M_allocate(__len));
 8016092:	f7ff fdec 	bl	8015c6e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8016096:	4631      	mov	r1, r6
 8016098:	4602      	mov	r2, r0
 801609a:	4605      	mov	r5, r0
 801609c:	4638      	mov	r0, r7
 801609e:	f7eb ff19 	bl	8001ed4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80160a2:	9b01      	ldr	r3, [sp, #4]
 80160a4:	4602      	mov	r2, r0
 80160a6:	4650      	mov	r0, sl
 80160a8:	4619      	mov	r1, r3
 80160aa:	f7ea fe9b 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80160ae:	4631      	mov	r1, r6
 80160b0:	4602      	mov	r2, r0
 80160b2:	4630      	mov	r0, r6
 80160b4:	f7eb ff0e 	bl	8001ed4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80160b8:	4606      	mov	r6, r0
	if (__p)
 80160ba:	b127      	cbz	r7, 80160c6 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x12a>
			      this->_M_impl._M_end_of_storage - __old_start);
 80160bc:	68a1      	ldr	r1, [r4, #8]
 80160be:	4638      	mov	r0, r7
 80160c0:	1bc9      	subs	r1, r1, r7
 80160c2:	f005 fd83 	bl	801bbcc <_ZdlPvj>
		this->_M_impl._M_finish = __new_finish;
 80160c6:	e9c4 5600 	strd	r5, r6, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 80160ca:	445d      	add	r5, fp
 80160cc:	60a5      	str	r5, [r4, #8]
 80160ce:	e7b4      	b.n	801603a <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x9e>
 80160d0:	0801c592 	.word	0x0801c592
 80160d4:	0801c641 	.word	0x0801c641

080160d8 <_ZN11CANProtocol4SendE13MessageHeader>:
HAL_StatusTypeDef CANProtocol::Send(MessageHeader message) {
 80160d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80160dc:	b093      	sub	sp, #76	@ 0x4c
 80160de:	460e      	mov	r6, r1
	FDCAN_HandleTypeDef* interface_ = GetInterface(message.interface, &success);
 80160e0:	7809      	ldrb	r1, [r1, #0]
HAL_StatusTypeDef CANProtocol::Send(MessageHeader message) {
 80160e2:	4680      	mov	r8, r0
	FDCAN_HandleTypeDef* interface_ = GetInterface(message.interface, &success);
 80160e4:	f10d 0203 	add.w	r2, sp, #3
 80160e8:	f7ff fe48 	bl	8015d7c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (!success) return HAL_ERROR;
 80160ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
	FDCAN_HandleTypeDef* interface_ = GetInterface(message.interface, &success);
 80160f0:	4681      	mov	r9, r0
	if (!success) return HAL_ERROR;
 80160f2:	b91b      	cbnz	r3, 80160fc <_ZN11CANProtocol4SendE13MessageHeader+0x24>
 80160f4:	2001      	movs	r0, #1
}
 80160f6:	b013      	add	sp, #76	@ 0x4c
 80160f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (interface_->State != HAL_FDCAN_STATE_BUSY) return HAL_ERROR;
 80160fc:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8016100:	2b02      	cmp	r3, #2
 8016102:	d1f7      	bne.n	80160f4 <_ZN11CANProtocol4SendE13MessageHeader+0x1c>
	uint8_t index = GetInterfaceIndex(message.interface, &success);
 8016104:	f10d 0203 	add.w	r2, sp, #3
 8016108:	7831      	ldrb	r1, [r6, #0]
 801610a:	4640      	mov	r0, r8
	FDCAN_TxHeaderTypeDef TxHeader = FDCANTxHeaders[index];
 801610c:	ad09      	add	r5, sp, #36	@ 0x24
	uint8_t index = GetInterfaceIndex(message.interface, &success);
 801610e:	f7ff fc01 	bl	8015914 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	FDCAN_TxHeaderTypeDef TxHeader = FDCANTxHeaders[index];
 8016112:	f8d8 4048 	ldr.w	r4, [r8, #72]	@ 0x48
	return *(this->_M_impl._M_start + __n);
 8016116:	b207      	sxth	r7, r0
 8016118:	eb07 03c7 	add.w	r3, r7, r7, lsl #3
 801611c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016120:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8016124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016128:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801612a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801612c:	6823      	ldr	r3, [r4, #0]
 801612e:	602b      	str	r3, [r5, #0]
 8016130:	00bd      	lsls	r5, r7, #2
 8016132:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016136:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801613a:	7833      	ldrb	r3, [r6, #0]
 801613c:	f88d 3010 	strb.w	r3, [sp, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016140:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016144:	1ae4      	subs	r4, r4, r3
	this->_M_impl._M_start = this->_M_allocate(__n);
 8016146:	4620      	mov	r0, r4
 8016148:	f7ff fd91 	bl	8015c6e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801614c:	4404      	add	r4, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 801614e:	4602      	mov	r2, r0
 8016150:	9005      	str	r0, [sp, #20]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8016152:	9407      	str	r4, [sp, #28]
 8016154:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
 8016158:	f7ea fe44 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 801615c:	8a33      	ldrh	r3, [r6, #16]
	buffers_to_transfer[index] = CodeProtocol(message, &TxHeader);
 801615e:	aa04      	add	r2, sp, #16
 8016160:	4641      	mov	r1, r8
	this->_M_impl._M_finish =
 8016162:	9006      	str	r0, [sp, #24]
 8016164:	a801      	add	r0, sp, #4
 8016166:	f8ad 3020 	strh.w	r3, [sp, #32]
 801616a:	ab09      	add	r3, sp, #36	@ 0x24
 801616c:	f7ff ff16 	bl	8015f9c <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8016170:	a901      	add	r1, sp, #4
 8016172:	4638      	mov	r0, r7
 8016174:	f7ff fdeb 	bl	8015d4e <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 8016178:	a801      	add	r0, sp, #4
 801617a:	f7ea fd45 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801617e:	a805      	add	r0, sp, #20
 8016180:	f7ea fd42 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *(this->_M_impl._M_start + __n);
 8016184:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016188:	1959      	adds	r1, r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801618a:	595a      	ldr	r2, [r3, r5]
 801618c:	684b      	ldr	r3, [r1, #4]
 801618e:	1a9b      	subs	r3, r3, r2
	if (buffers_to_transfer[index].size() > 64) return HAL_ERROR;
 8016190:	2b40      	cmp	r3, #64	@ 0x40
 8016192:	d8af      	bhi.n	80160f4 <_ZN11CANProtocol4SendE13MessageHeader+0x1c>
	return HAL_FDCAN_AddMessageToTxFifoQ(interface_, &TxHeader, &(buffers_to_transfer[index])[0]);
 8016194:	a909      	add	r1, sp, #36	@ 0x24
 8016196:	4648      	mov	r0, r9
 8016198:	f7ef ff0d 	bl	8005fb6 <HAL_FDCAN_AddMessageToTxFifoQ>
 801619c:	e7ab      	b.n	80160f6 <_ZN11CANProtocol4SendE13MessageHeader+0x1e>

0801619e <_ZN12UARTProtocol17ActivateReceptionEh>:
 * @brief OVERRIDE Activate reception of the associated hardware interface
 *
 * @param input ID: interface ID
 * @return the interface access status
 */
HAL_StatusTypeDef UARTProtocol::ActivateReception(uint8_t ID) {
 801619e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t index = GetInterfaceIndex(ID, success);
 80161a0:	f10d 0207 	add.w	r2, sp, #7
 80161a4:	4604      	mov	r4, r0
 80161a6:	460d      	mov	r5, r1
 80161a8:	f7ff fbb4 	bl	8015914 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	if (*success) {
 80161ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80161b0:	b1d3      	cbz	r3, 80161e8 <_ZN12UARTProtocol17ActivateReceptionEh+0x4a>
	return *(this->_M_impl._M_start + __n);
 80161b2:	b203      	sxth	r3, r0
		return interfaces[index];
 80161b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
	bool success;
	UART_HandleTypeDef* handle = GetInterface(ID, &success);
	if (not success) return HAL_ERROR;
	std::vector<uint8_t>* buffer = GetBuffer(ID, &success);
 80161b6:	4620      	mov	r0, r4
 80161b8:	4629      	mov	r1, r5
 80161ba:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80161be:	f10d 0207 	add.w	r2, sp, #7
 80161c2:	f7ff fbd3 	bl	801596c <_ZN21CommunicationProtocol9GetBufferEhPb>
	if (not success) return HAL_ERROR;
 80161c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	std::vector<uint8_t>* buffer = GetBuffer(ID, &success);
 80161ca:	4604      	mov	r4, r0
	if (not success) return HAL_ERROR;
 80161cc:	b163      	cbz	r3, 80161e8 <_ZN12UARTProtocol17ActivateReceptionEh+0x4a>

	HAL_StatusTypeDef status;
	status = UART_CheckIdleState(handle); // to reset UART RxState
 80161ce:	4630      	mov	r0, r6
 80161d0:	f7f5 fcb1 	bl	800bb36 <UART_CheckIdleState>
	do {
		status = HAL_UARTEx_ReceiveToIdle_DMA(handle, buffer->data(), BUFFER_SIZE);
 80161d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80161d8:	6821      	ldr	r1, [r4, #0]
 80161da:	4630      	mov	r0, r6
 80161dc:	f7f5 fe48 	bl	800be70 <HAL_UARTEx_ReceiveToIdle_DMA>
	} while (status == HAL_BUSY);
 80161e0:	2802      	cmp	r0, #2
 80161e2:	d0f7      	beq.n	80161d4 <_ZN12UARTProtocol17ActivateReceptionEh+0x36>
	return status;
}
 80161e4:	b002      	add	sp, #8
 80161e6:	bd70      	pop	{r4, r5, r6, pc}
	if (not success) return HAL_ERROR;
 80161e8:	2001      	movs	r0, #1
 80161ea:	e7fb      	b.n	80161e4 <_ZN12UARTProtocol17ActivateReceptionEh+0x46>

080161ec <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80161ec:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 80161ee:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80161f0:	d006      	beq.n	8016200 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80161f2:	da01      	bge.n	80161f8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 80161f4:	f005 fdbe 	bl	801bd74 <_ZSt17__throw_bad_allocv>
      }
 80161f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80161fc:	f005 bd0b 	b.w	801bc16 <_Znwj>
 8016200:	bd08      	pop	{r3, pc}

08016202 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb>:
 * @param input pattern: patter to detect
 * @param input start_index: the detection of the pattern starts at this index
 * @param output success: whether successful
 * @return the base index of the first iteration of the detected pattern in message
 */
uint16_t UARTProtocol::DetectPattern(std::vector<uint8_t> message, std::vector<uint8_t> pattern, uint16_t start_index, bool* success) {
 8016202:	b5f0      	push	{r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016204:	e9d1 5000 	ldrd	r5, r0, [r1]
	uint8_t counter = 0;
 8016208:	2100      	movs	r1, #0
 801620a:	1b40      	subs	r0, r0, r5
	for (uint16_t index = start_index; index < message.size(); index++) {
 801620c:	4283      	cmp	r3, r0
 801620e:	d302      	bcc.n	8016216 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x14>
 8016210:	2300      	movs	r3, #0
			*success = true;
			return index - counter + 1;
		}
	}
	*success = false;
	return 0;
 8016212:	4618      	mov	r0, r3
 8016214:	e00e      	b.n	8016234 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x32>
	return *(this->_M_impl._M_start + __n);
 8016216:	6816      	ldr	r6, [r2, #0]
		if (message[index] != pattern[counter]) {
 8016218:	5cef      	ldrb	r7, [r5, r3]
 801621a:	3301      	adds	r3, #1
 801621c:	5c74      	ldrb	r4, [r6, r1]
 801621e:	42a7      	cmp	r7, r4
 8016220:	d10b      	bne.n	801623a <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x38>
		counter++;
 8016222:	3101      	adds	r1, #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016224:	6854      	ldr	r4, [r2, #4]
 8016226:	b2c9      	uxtb	r1, r1
 8016228:	1ba4      	subs	r4, r4, r6
		if (counter >= pattern.size()) {
 801622a:	42a1      	cmp	r1, r4
 801622c:	d306      	bcc.n	801623c <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x3a>
			return index - counter + 1;
 801622e:	1a5b      	subs	r3, r3, r1
 8016230:	b298      	uxth	r0, r3
 8016232:	2301      	movs	r3, #1
			*success = true;
 8016234:	9a05      	ldr	r2, [sp, #20]
 8016236:	7013      	strb	r3, [r2, #0]
}
 8016238:	bdf0      	pop	{r4, r5, r6, r7, pc}
			counter = 0;
 801623a:	2100      	movs	r1, #0
	for (uint16_t index = start_index; index < message.size(); index++) {
 801623c:	b29b      	uxth	r3, r3
 801623e:	e7e5      	b.n	801620c <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0xa>

08016240 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_>:
 * @param input start_index: the detection of the pattern starts at this index
 * @param input message: message used to find the pattern
 * @param input pattern: patter to detect
 * @param output success: true if pattern detected
 */
bool UARTProtocol::PatternPresentAt(uint16_t start_index, std::vector<uint8_t> message, std::vector<uint8_t> pattern) {
 8016240:	b570      	push	{r4, r5, r6, lr}
    uint16_t index = start_index;
    for (uint8_t byte : pattern) {
 8016242:	e9d3 3400 	ldrd	r3, r4, [r3]
 8016246:	1ac9      	subs	r1, r1, r3
 8016248:	18c8      	adds	r0, r1, r3
 801624a:	42a3      	cmp	r3, r4
 801624c:	b280      	uxth	r0, r0
 801624e:	d101      	bne.n	8016254 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x14>
        if (byte != message[index])
            return false;
        index++;
    }
    return true;
 8016250:	2001      	movs	r0, #1
}
 8016252:	bd70      	pop	{r4, r5, r6, pc}
        if (byte != message[index])
 8016254:	6816      	ldr	r6, [r2, #0]
    for (uint8_t byte : pattern) {
 8016256:	f813 5b01 	ldrb.w	r5, [r3], #1
        if (byte != message[index])
 801625a:	5c30      	ldrb	r0, [r6, r0]
 801625c:	42a8      	cmp	r0, r5
 801625e:	d0f3      	beq.n	8016248 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x8>
            return false;
 8016260:	2000      	movs	r0, #0
 8016262:	e7f6      	b.n	8016252 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x12>

08016264 <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE>:
 8016264:	e9d1 3200 	ldrd	r3, r2, [r1]
 *
 * @param input message: vector of bytes to derive the checksum
 * @return the 1-byte checksum
 */
uint8_t UARTProtocol::GetChecksum(std::vector<uint8_t> message) {
	uint8_t checksum = 0;
 8016268:	2000      	movs	r0, #0
	for (uint8_t byte : message)
 801626a:	429a      	cmp	r2, r3
 801626c:	d102      	bne.n	8016274 <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE+0x10>
		checksum += byte;
	checksum = ~checksum + 1;
 801626e:	4240      	negs	r0, r0
	return checksum;
}
 8016270:	b2c0      	uxtb	r0, r0
 8016272:	4770      	bx	lr
		checksum += byte;
 8016274:	f813 1b01 	ldrb.w	r1, [r3], #1
 8016278:	4408      	add	r0, r1
 801627a:	b2c0      	uxtb	r0, r0
	return *this;
 801627c:	e7f5      	b.n	801626a <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE+0x6>

0801627e <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE>:
 801627e:	e9d3 0300 	ldrd	r0, r3, [r3]
 * @param input start_index: index (included) from which the checksum check is started
 * @param input end_index: index (excluded) from which the checksum check is finished
 * @param input message: byte vector message
 * @return true if the checksum is valid
 */
bool UARTProtocol::Checksum(uint16_t start_index, uint16_t end_index, std::vector<uint8_t> message) {
 8016282:	b510      	push	{r4, lr}
 8016284:	1a1b      	subs	r3, r3, r0
	uint8_t sum = 0;
	if (start_index > message.size()) return false;
 8016286:	4299      	cmp	r1, r3
 8016288:	d812      	bhi.n	80162b0 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x32>
	if (end_index > message.size()) return false;
 801628a:	429a      	cmp	r2, r3
 801628c:	d810      	bhi.n	80162b0 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x32>
	if (start_index > end_index) return false;
 801628e:	4291      	cmp	r1, r2
 8016290:	d80e      	bhi.n	80162b0 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x32>
 8016292:	1843      	adds	r3, r0, r1
	uint8_t sum = 0;
 8016294:	2000      	movs	r0, #0
	for (uint16_t index = start_index; index < end_index; index++) {
 8016296:	4291      	cmp	r1, r2
 8016298:	d103      	bne.n	80162a2 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x24>
		sum += message[index];
	}
	return (sum == 0);
 801629a:	fab0 f080 	clz	r0, r0
 801629e:	0940      	lsrs	r0, r0, #5
}
 80162a0:	bd10      	pop	{r4, pc}
		sum += message[index];
 80162a2:	f813 4b01 	ldrb.w	r4, [r3], #1
	for (uint16_t index = start_index; index < end_index; index++) {
 80162a6:	3101      	adds	r1, #1
		sum += message[index];
 80162a8:	4420      	add	r0, r4
	for (uint16_t index = start_index; index < end_index; index++) {
 80162aa:	b289      	uxth	r1, r1
		sum += message[index];
 80162ac:	b2c0      	uxtb	r0, r0
	for (uint16_t index = start_index; index < end_index; index++) {
 80162ae:	e7f2      	b.n	8016296 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x18>
	if (start_index > message.size()) return false;
 80162b0:	2000      	movs	r0, #0
 80162b2:	e7f5      	b.n	80162a0 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x22>

080162b4 <_ZN12UARTProtocol7IsRS485Eh>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80162b4:	e9d0 3217 	ldrd	r3, r2, [r0, #92]	@ 0x5c
 *
 * @param input ID: interface ID
 * @return true if interface is RS485
 */
bool UARTProtocol::IsRS485(uint8_t ID) {
	for (uint8_t &RS485_interface : RS485_interfaces) {
 80162b8:	4293      	cmp	r3, r2
 80162ba:	d101      	bne.n	80162c0 <_ZN12UARTProtocol7IsRS485Eh+0xc>
		if (RS485_interface == ID) return true;
	}
	return false;
 80162bc:	2000      	movs	r0, #0
 80162be:	4770      	bx	lr
		if (RS485_interface == ID) return true;
 80162c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80162c4:	4288      	cmp	r0, r1
 80162c6:	d1f7      	bne.n	80162b8 <_ZN12UARTProtocol7IsRS485Eh+0x4>
 80162c8:	2001      	movs	r0, #1
}
 80162ca:	4770      	bx	lr

080162cc <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80162cc:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 80162ce:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80162d0:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 80162d2:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 80162d4:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 80162d8:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 80162da:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80162dc:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 80162de:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 80162e0:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80162e2:	688d      	ldr	r5, [r1, #8]
 80162e4:	6085      	str	r5, [r0, #8]
      }
 80162e6:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 80162e8:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 80162ea:	e9c1 3300 	strd	r3, r3, [r1]
 80162ee:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 80162f2:	f7ea fc89 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      }
 80162f6:	b005      	add	sp, #20
 80162f8:	bd30      	pop	{r4, r5, pc}

080162fa <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
MessageHeader UARTProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> message, uint16_t* index, bool* success) {
 80162fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162fe:	460c      	mov	r4, r1
 8016300:	469a      	mov	sl, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016302:	2300      	movs	r3, #0
 8016304:	b08d      	sub	sp, #52	@ 0x34
	if (IsRS485(ID)) RS485_offset = 1;
 8016306:	4611      	mov	r1, r2
MessageHeader UARTProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> message, uint16_t* index, bool* success) {
 8016308:	4605      	mov	r5, r0
 801630a:	60c3      	str	r3, [r0, #12]
 801630c:	4616      	mov	r6, r2
 801630e:	e9c0 3301 	strd	r3, r3, [r0, #4]
	if (IsRS485(ID)) RS485_offset = 1;
 8016312:	4620      	mov	r0, r4
 8016314:	f7ff ffce 	bl	80162b4 <_ZN12UARTProtocol7IsRS485Eh>
	uint16_t start_index = DetectPattern(message, protocol_start, *index, success);
 8016318:	4651      	mov	r1, sl
	if (IsRS485(ID)) RS485_offset = 1;
 801631a:	4607      	mov	r7, r0
	uint16_t start_index = DetectPattern(message, protocol_start, *index, success);
 801631c:	a806      	add	r0, sp, #24
 801631e:	f7ea fd6d 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8016322:	f104 0144 	add.w	r1, r4, #68	@ 0x44
 8016326:	a809      	add	r0, sp, #36	@ 0x24
 8016328:	f7ea fd68 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801632c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801632e:	aa09      	add	r2, sp, #36	@ 0x24
 8016330:	a906      	add	r1, sp, #24
 8016332:	9300      	str	r3, [sp, #0]
 8016334:	4620      	mov	r0, r4
 8016336:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016338:	881b      	ldrh	r3, [r3, #0]
 801633a:	f7ff ff62 	bl	8016202 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb>
 801633e:	4680      	mov	r8, r0
      }
 8016340:	a809      	add	r0, sp, #36	@ 0x24
 8016342:	f7ea fc61 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8016346:	a806      	add	r0, sp, #24
 8016348:	f7ea fc5e 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (*success) {
 801634c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801634e:	781b      	ldrb	r3, [r3, #0]
 8016350:	b193      	cbz	r3, 8016378 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x7e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016352:	e9da 3200 	ldrd	r3, r2, [sl]
 8016356:	1ad2      	subs	r2, r2, r3
 8016358:	9203      	str	r2, [sp, #12]
 801635a:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	@ 0x44
 801635e:	1a52      	subs	r2, r2, r1
		if (message.size() <= start_index + protocol_start.size() + 1 + RS485_offset) {*success = false; return decoded_message;} // Error - discard message
 8016360:	9903      	ldr	r1, [sp, #12]
 8016362:	eb02 0b08 	add.w	fp, r2, r8
 8016366:	eb0b 0907 	add.w	r9, fp, r7
 801636a:	f109 0201 	add.w	r2, r9, #1
 801636e:	428a      	cmp	r2, r1
 8016370:	d306      	bcc.n	8016380 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x86>
 8016372:	2300      	movs	r3, #0
 8016374:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8016376:	7013      	strb	r3, [r2, #0]
}
 8016378:	4628      	mov	r0, r5
 801637a:	b00d      	add	sp, #52	@ 0x34
 801637c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (IsRS485(ID))
 8016380:	4631      	mov	r1, r6
 8016382:	4620      	mov	r0, r4
 8016384:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016388:	f7ff ff94 	bl	80162b4 <_ZN12UARTProtocol7IsRS485Eh>
 801638c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016390:	2800      	cmp	r0, #0
 8016392:	d079      	beq.n	8016488 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x18e>
			decoded_message.target_address = message[start_index + protocol_start.size()];
 8016394:	f813 100b 	ldrb.w	r1, [r3, fp]
 8016398:	7429      	strb	r1, [r5, #16]
		decoded_message.source_address = message[start_index + protocol_start.size() + RS485_offset];
 801639a:	f813 1009 	ldrb.w	r1, [r3, r9]
 801639e:	7469      	strb	r1, [r5, #17]
		uint16_t length = message[start_index + protocol_start.size() + 1 + RS485_offset];
 80163a0:	5c9e      	ldrb	r6, [r3, r2]
 80163a2:	e9d4 1214 	ldrd	r1, r2, [r4, #80]	@ 0x50
 80163a6:	1a52      	subs	r2, r2, r1
		if (message.size() <= start_index + protocol_start.size() + length + 2 + RS485_offset + protocol_end.size()) {*success = false; return decoded_message;} // Error - discard message
 80163a8:	9903      	ldr	r1, [sp, #12]
 80163aa:	3202      	adds	r2, #2
 80163ac:	443a      	add	r2, r7
 80163ae:	445a      	add	r2, fp
 80163b0:	4432      	add	r2, r6
 80163b2:	428a      	cmp	r2, r1
 80163b4:	d2dd      	bcs.n	8016372 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x78>
      { return __normal_iterator(_M_current + __n); }
 80163b6:	f109 0902 	add.w	r9, r9, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80163ba:	4630      	mov	r0, r6
 80163bc:	4499      	add	r9, r3
 80163be:	f7ff ff15 	bl	80161ec <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80163c2:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80163c4:	4602      	mov	r2, r0
 80163c6:	eb09 0b06 	add.w	fp, r9, r6
 80163ca:	9009      	str	r0, [sp, #36]	@ 0x24
 80163cc:	4648      	mov	r0, r9
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80163ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80163d0:	4659      	mov	r1, fp
 80163d2:	f7ea fd07 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		decoded_message.payload = std::vector<uint8_t>(message.begin() + start_index + protocol_start.size() + 2 + RS485_offset, message.begin() + start_index + protocol_start.size() + 2 + RS485_offset + length);
 80163d6:	a909      	add	r1, sp, #36	@ 0x24
	  this->_M_impl._M_finish =
 80163d8:	900a      	str	r0, [sp, #40]	@ 0x28
 80163da:	1d28      	adds	r0, r5, #4
 80163dc:	f7ff ff76 	bl	80162cc <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 80163e0:	a809      	add	r0, sp, #36	@ 0x24
 80163e2:	f7ea fc11 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (!Checksum(start_index, start_index + protocol_start.size() + length + 3 + RS485_offset, message)) {*success = false; return decoded_message;} // Checksum Error - discard message
 80163e6:	4651      	mov	r1, sl
 80163e8:	a809      	add	r0, sp, #36	@ 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80163ea:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 80163ee:	eba3 0902 	sub.w	r9, r3, r2
 80163f2:	f7ea fd03 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80163f6:	ab09      	add	r3, sp, #36	@ 0x24
 80163f8:	4641      	mov	r1, r8
 80163fa:	f109 0903 	add.w	r9, r9, #3
 80163fe:	4620      	mov	r0, r4
 8016400:	44c1      	add	r9, r8
 8016402:	44b9      	add	r9, r7
 8016404:	44b1      	add	r9, r6
 8016406:	fa1f f989 	uxth.w	r9, r9
 801640a:	464a      	mov	r2, r9
 801640c:	f7ff ff37 	bl	801627e <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE>
 8016410:	4681      	mov	r9, r0
      }
 8016412:	a809      	add	r0, sp, #36	@ 0x24
 8016414:	f7ea fbf8 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8016418:	f1b9 0f00 	cmp.w	r9, #0
 801641c:	d0a9      	beq.n	8016372 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x78>
		if (!PatternPresentAt(start_index + protocol_start.size() + length + 3 + RS485_offset, message, protocol_end)) {*success = false; return decoded_message;} // Checksum Error - discard message
 801641e:	4651      	mov	r1, sl
 8016420:	a806      	add	r0, sp, #24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016422:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 8016426:	eba3 0902 	sub.w	r9, r3, r2
 801642a:	f7ea fce7 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801642e:	f104 0150 	add.w	r1, r4, #80	@ 0x50
 8016432:	a809      	add	r0, sp, #36	@ 0x24
 8016434:	f109 0903 	add.w	r9, r9, #3
 8016438:	f7ea fce0 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801643c:	ab09      	add	r3, sp, #36	@ 0x24
 801643e:	aa06      	add	r2, sp, #24
 8016440:	44c1      	add	r9, r8
 8016442:	4620      	mov	r0, r4
 8016444:	44b9      	add	r9, r7
 8016446:	44b1      	add	r9, r6
 8016448:	fa1f f989 	uxth.w	r9, r9
 801644c:	4649      	mov	r1, r9
 801644e:	f7ff fef7 	bl	8016240 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_>
 8016452:	4681      	mov	r9, r0
      }
 8016454:	a809      	add	r0, sp, #36	@ 0x24
 8016456:	f7ea fbd7 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801645a:	a806      	add	r0, sp, #24
 801645c:	f7ea fbd4 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8016460:	f1b9 0f00 	cmp.w	r9, #0
 8016464:	d085      	beq.n	8016372 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x78>
		*success = true;
 8016466:	2301      	movs	r3, #1
 8016468:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801646a:	7013      	strb	r3, [r2, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801646c:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 8016470:	1a9b      	subs	r3, r3, r2
 8016472:	e9d4 1214 	ldrd	r1, r2, [r4, #80]	@ 0x50
 8016476:	1a52      	subs	r2, r2, r1
		*index = start_index + protocol_start.size() + length + 3 + RS485_offset + protocol_end.size();
 8016478:	4413      	add	r3, r2
 801647a:	3303      	adds	r3, #3
 801647c:	4498      	add	r8, r3
 801647e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016480:	4447      	add	r7, r8
 8016482:	443e      	add	r6, r7
 8016484:	801e      	strh	r6, [r3, #0]
 8016486:	e777      	b.n	8016378 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x7e>
			decoded_message.target_address = ALL;
 8016488:	21ff      	movs	r1, #255	@ 0xff
 801648a:	e785      	b.n	8016398 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x9e>

0801648c <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 801648c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 801648e:	1a57      	subs	r7, r2, r1
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8016490:	4604      	mov	r4, r0
 8016492:	460d      	mov	r5, r1
 8016494:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8016496:	d502      	bpl.n	801649e <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0+0x12>
	  __throw_length_error(
 8016498:	4807      	ldr	r0, [pc, #28]	@ (80164b8 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0+0x2c>)
 801649a:	f005 fc71 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801649e:	4638      	mov	r0, r7
 80164a0:	f7ff fea4 	bl	80161ec <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80164a4:	4407      	add	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80164a6:	4602      	mov	r2, r0
 80164a8:	6020      	str	r0, [r4, #0]
 80164aa:	4631      	mov	r1, r6
 80164ac:	4628      	mov	r0, r5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80164ae:	60a7      	str	r7, [r4, #8]
 80164b0:	f7ea fc98 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 80164b4:	6060      	str	r0, [r4, #4]
	}
 80164b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164b8:	0801c610 	.word	0x0801c610

080164bc <_ZN12UARTProtocolC1Ev>:
UARTProtocol::UARTProtocol() {
 80164bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80164be:	4b17      	ldr	r3, [pc, #92]	@ (801651c <_ZN12UARTProtocolC1Ev+0x60>)
	: _M_start(), _M_finish(), _M_end_of_storage()
 80164c0:	2500      	movs	r5, #0
	_M_range_initialize(__l.begin(), __l.end(),
 80164c2:	4a17      	ldr	r2, [pc, #92]	@ (8016520 <_ZN12UARTProtocolC1Ev+0x64>)
 80164c4:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 80164c6:	6405      	str	r5, [r0, #64]	@ 0x40
 80164c8:	6003      	str	r3, [r0, #0]
	_M_range_initialize(__l.begin(), __l.end(),
 80164ca:	1e91      	subs	r1, r2, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 80164cc:	64c5      	str	r5, [r0, #76]	@ 0x4c
 80164ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80164d2:	e9c0 5503 	strd	r5, r5, [r0, #12]
 80164d6:	e9c0 5505 	strd	r5, r5, [r0, #20]
 80164da:	e9c0 5508 	strd	r5, r5, [r0, #32]
 80164de:	e9c0 550a 	strd	r5, r5, [r0, #40]	@ 0x28
 80164e2:	e9c0 550c 	strd	r5, r5, [r0, #48]	@ 0x30
 80164e6:	e9c0 550e 	strd	r5, r5, [r0, #56]	@ 0x38
 80164ea:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
	_M_range_initialize(__l.begin(), __l.end(),
 80164ee:	3044      	adds	r0, #68	@ 0x44
 80164f0:	f7ff ffcc 	bl	801648c <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>
 80164f4:	23ff      	movs	r3, #255	@ 0xff
 80164f6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80164fa:	f10d 0205 	add.w	r2, sp, #5
 80164fe:	a901      	add	r1, sp, #4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016500:	65a5      	str	r5, [r4, #88]	@ 0x58
 8016502:	f88d 3004 	strb.w	r3, [sp, #4]
 8016506:	e9c4 5514 	strd	r5, r5, [r4, #80]	@ 0x50
	_M_range_initialize(__l.begin(), __l.end(),
 801650a:	f7ff ffbf 	bl	801648c <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>
}
 801650e:	4620      	mov	r0, r4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016510:	6665      	str	r5, [r4, #100]	@ 0x64
 8016512:	e9c4 5517 	strd	r5, r5, [r4, #92]	@ 0x5c
 8016516:	b003      	add	sp, #12
 8016518:	bd30      	pop	{r4, r5, pc}
 801651a:	bf00      	nop
 801651c:	0801c8d0 	.word	0x0801c8d0
 8016520:	0801c8aa 	.word	0x0801c8aa

08016524 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>:
	if (__first != __last)
 8016524:	429a      	cmp	r2, r3
	insert(const_iterator __position, _InputIterator __first,
 8016526:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801652a:	4604      	mov	r4, r0
 801652c:	460d      	mov	r5, r1
 801652e:	4617      	mov	r7, r2
 8016530:	4699      	mov	r9, r3
 8016532:	d022      	beq.n	801657a <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x56>
    { return __lhs.base() - __rhs.base(); }
 8016534:	eba3 0802 	sub.w	r8, r3, r2
      : _M_current(__i) { }
 8016538:	f8d0 a000 	ldr.w	sl, [r0]
			  - this->_M_impl._M_finish) >= __n)
 801653c:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
 8016540:	1b9b      	subs	r3, r3, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 8016542:	4598      	cmp	r8, r3
 8016544:	d831      	bhi.n	80165aa <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x86>
    { return __lhs.base() - __rhs.base(); }
 8016546:	eba6 0a01 	sub.w	sl, r6, r1
		if (__elems_after > __n)
 801654a:	45d0      	cmp	r8, sl
 801654c:	d217      	bcs.n	801657e <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x5a>
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 801654e:	eba6 0a08 	sub.w	sl, r6, r8
 8016552:	4632      	mov	r2, r6
 8016554:	4631      	mov	r1, r6
 8016556:	4650      	mov	r0, sl
 8016558:	f7eb fcbc 	bl	8001ed4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n;
 801655c:	6863      	ldr	r3, [r4, #4]
	  if (_Num)
 801655e:	ebba 0205 	subs.w	r2, sl, r5
 8016562:	4443      	add	r3, r8
 8016564:	6063      	str	r3, [r4, #4]
 8016566:	d003      	beq.n	8016570 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x4c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8016568:	4629      	mov	r1, r5
 801656a:	1ab0      	subs	r0, r6, r2
 801656c:	f005 fe8a 	bl	801c284 <memmove>
			      _Category>::__copy_m(__first, __last, __result);
 8016570:	462a      	mov	r2, r5
 8016572:	4649      	mov	r1, r9
 8016574:	4638      	mov	r0, r7
 8016576:	f7ea fc35 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	}
 801657a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { _M_current += __n; return *this; }
 801657e:	eb02 0b0a 	add.w	fp, r2, sl
 8016582:	4649      	mov	r1, r9
 8016584:	4632      	mov	r2, r6
		    this->_M_impl._M_finish += __n - __elems_after;
 8016586:	eba8 080a 	sub.w	r8, r8, sl
 801658a:	4658      	mov	r0, fp
 801658c:	f7ea fc2a 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8016590:	6862      	ldr	r2, [r4, #4]
 8016592:	4631      	mov	r1, r6
 8016594:	4628      	mov	r0, r5
 8016596:	4442      	add	r2, r8
 8016598:	6062      	str	r2, [r4, #4]
 801659a:	f7eb fc9b 	bl	8001ed4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __elems_after;
 801659e:	6863      	ldr	r3, [r4, #4]
 80165a0:	462a      	mov	r2, r5
 80165a2:	4659      	mov	r1, fp
 80165a4:	4453      	add	r3, sl
 80165a6:	6063      	str	r3, [r4, #4]
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80165a8:	e7e4      	b.n	8016574 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x50>
		  _M_check_len(__n, "vector::_M_range_insert");
 80165aa:	4641      	mov	r1, r8
 80165ac:	4a12      	ldr	r2, [pc, #72]	@ (80165f8 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0xd4>)
 80165ae:	f7ea fb4c 	bl	8000c4a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80165b2:	4683      	mov	fp, r0
		pointer __new_start(this->_M_allocate(__len));
 80165b4:	f7ff fe1a 	bl	80161ec <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 80165b8:	4629      	mov	r1, r5
 80165ba:	4602      	mov	r2, r0
 80165bc:	4680      	mov	r8, r0
 80165be:	4650      	mov	r0, sl
 80165c0:	f7eb fc88 	bl	8001ed4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80165c4:	4649      	mov	r1, r9
 80165c6:	4602      	mov	r2, r0
 80165c8:	4638      	mov	r0, r7
 80165ca:	f7ea fc0b 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80165ce:	4631      	mov	r1, r6
 80165d0:	4602      	mov	r2, r0
 80165d2:	4628      	mov	r0, r5
 80165d4:	f7eb fc7e 	bl	8001ed4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80165d8:	4605      	mov	r5, r0
	if (__p)
 80165da:	f1ba 0f00 	cmp.w	sl, #0
 80165de:	d005      	beq.n	80165ec <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0xc8>
			      this->_M_impl._M_end_of_storage - __old_start);
 80165e0:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80165e2:	4650      	mov	r0, sl
 80165e4:	eba1 010a 	sub.w	r1, r1, sl
 80165e8:	f005 faf0 	bl	801bbcc <_ZdlPvj>
		this->_M_impl._M_end_of_storage = __new_start + __len;
 80165ec:	eb08 000b 	add.w	r0, r8, fp
		this->_M_impl._M_finish = __new_finish;
 80165f0:	e9c4 8500 	strd	r8, r5, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 80165f4:	60a0      	str	r0, [r4, #8]
	  return begin() + __offset;
 80165f6:	e7c0      	b.n	801657a <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x56>
 80165f8:	0801c641 	.word	0x0801c641

080165fc <_ZN12UARTProtocol12CodeProtocolE13MessageHeader>:
std::vector<uint8_t> UARTProtocol::CodeProtocol(MessageHeader message) {
 80165fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80165fe:	460e      	mov	r6, r1
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016600:	2100      	movs	r1, #0
 8016602:	4615      	mov	r5, r2
 8016604:	4604      	mov	r4, r0
 8016606:	6081      	str	r1, [r0, #8]
 8016608:	e9c0 1100 	strd	r1, r1, [r0]
	coded_message.insert(coded_message.end(), std::begin(protocol_start), std::end(protocol_start));
 801660c:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	@ 0x44
 8016610:	f7ff ff88 	bl	8016524 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
	if (IsRS485(message.interface)) coded_message.push_back(message.target_address);
 8016614:	7829      	ldrb	r1, [r5, #0]
 8016616:	4630      	mov	r0, r6
 8016618:	f7ff fe4c 	bl	80162b4 <_ZN12UARTProtocol7IsRS485Eh>
 801661c:	b120      	cbz	r0, 8016628 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader+0x2c>
 801661e:	f105 0110 	add.w	r1, r5, #16
 8016622:	4620      	mov	r0, r4
 8016624:	f7f9 f968 	bl	800f8f8 <_ZNSt6vectorIhSaIhEE9push_backERKh>
	coded_message.push_back(message.source_address);
 8016628:	f105 0111 	add.w	r1, r5, #17
 801662c:	4620      	mov	r0, r4
 801662e:	f7f9 f963 	bl	800f8f8 <_ZNSt6vectorIhSaIhEE9push_backERKh>
      { emplace_back(std::move(__x)); }
 8016632:	a901      	add	r1, sp, #4
 8016634:	4620      	mov	r0, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016636:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 801663a:	1a9b      	subs	r3, r3, r2
	coded_message.push_back((uint8_t) message.payload.size());
 801663c:	f88d 3004 	strb.w	r3, [sp, #4]
      { emplace_back(std::move(__x)); }
 8016640:	f7f9 f928 	bl	800f894 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	coded_message.insert(coded_message.end(), message.payload.begin(), message.payload.end());
 8016644:	6861      	ldr	r1, [r4, #4]
 8016646:	4620      	mov	r0, r4
 8016648:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 801664c:	f7ff ff6a 	bl	8016524 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
	coded_message.push_back(GetChecksum(coded_message));
 8016650:	4621      	mov	r1, r4
 8016652:	a801      	add	r0, sp, #4
 8016654:	f7ea fbd2 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8016658:	a901      	add	r1, sp, #4
 801665a:	4630      	mov	r0, r6
 801665c:	f7ff fe02 	bl	8016264 <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE>
 8016660:	f10d 0103 	add.w	r1, sp, #3
 8016664:	f88d 0003 	strb.w	r0, [sp, #3]
 8016668:	4620      	mov	r0, r4
 801666a:	f7f9 f913 	bl	800f894 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
      }
 801666e:	a801      	add	r0, sp, #4
 8016670:	f7ea faca 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	coded_message.insert(coded_message.end(), std::begin(protocol_end), std::end(protocol_end));
 8016674:	4620      	mov	r0, r4
 8016676:	6861      	ldr	r1, [r4, #4]
 8016678:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	@ 0x50
 801667c:	f7ff ff52 	bl	8016524 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
}
 8016680:	4620      	mov	r0, r4
 8016682:	b004      	add	sp, #16
 8016684:	bd70      	pop	{r4, r5, r6, pc}

08016686 <_ZN12UARTProtocol4SendE13MessageHeader>:
HAL_StatusTypeDef UARTProtocol::Send(MessageHeader message) {
 8016686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801668a:	b08a      	sub	sp, #40	@ 0x28
 801668c:	460d      	mov	r5, r1
	uint8_t index = GetInterfaceIndex(ID, success);
 801668e:	7809      	ldrb	r1, [r1, #0]
 8016690:	4604      	mov	r4, r0
 8016692:	f10d 0207 	add.w	r2, sp, #7
 8016696:	f7ff f93d 	bl	8015914 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	if (*success) {
 801669a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d042      	beq.n	8016728 <_ZN12UARTProtocol4SendE13MessageHeader+0xa2>
		return interfaces[index];
 80166a2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
	return *(this->_M_impl._M_start + __n);
 80166a4:	b200      	sxth	r0, r0
 80166a6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
	if (interface_->hdmatx->State != HAL_DMA_STATE_READY || interface_->gState != HAL_UART_STATE_READY) return HAL_BUSY;
 80166aa:	6fb3      	ldr	r3, [r6, #120]	@ 0x78
 80166ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80166b0:	2b01      	cmp	r3, #1
 80166b2:	d13b      	bne.n	801672c <_ZN12UARTProtocol4SendE13MessageHeader+0xa6>
 80166b4:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
 80166b8:	2b20      	cmp	r3, #32
 80166ba:	d137      	bne.n	801672c <_ZN12UARTProtocol4SendE13MessageHeader+0xa6>
	uint8_t index = GetInterfaceIndex(message.interface, &success);
 80166bc:	f10d 0207 	add.w	r2, sp, #7
 80166c0:	7829      	ldrb	r1, [r5, #0]
 80166c2:	4620      	mov	r0, r4
 80166c4:	f7ff f926 	bl	8015914 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 80166c8:	4629      	mov	r1, r5
 80166ca:	b200      	sxth	r0, r0
 80166cc:	6867      	ldr	r7, [r4, #4]
 80166ce:	f811 3b04 	ldrb.w	r3, [r1], #4
 80166d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80166d6:	f88d 3014 	strb.w	r3, [sp, #20]
 80166da:	ea4f 0880 	mov.w	r8, r0, lsl #2
 80166de:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 80166e2:	a806      	add	r0, sp, #24
 80166e4:	f7ea fb8a 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80166e8:	8a2b      	ldrh	r3, [r5, #16]
	buffers_to_transfer[index] = CodeProtocol(message); //std::vector<uint8_t>
 80166ea:	aa05      	add	r2, sp, #20
 80166ec:	4621      	mov	r1, r4
 80166ee:	a802      	add	r0, sp, #8
 80166f0:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80166f4:	f7ff ff82 	bl	80165fc <_ZN12UARTProtocol12CodeProtocolE13MessageHeader>
 80166f8:	a902      	add	r1, sp, #8
 80166fa:	4638      	mov	r0, r7
 80166fc:	f7ff fde6 	bl	80162cc <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8016700:	a802      	add	r0, sp, #8
 8016702:	f7ea fa81 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8016706:	a806      	add	r0, sp, #24
 8016708:	f7ea fa7e 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *(this->_M_impl._M_start + __n);
 801670c:	6863      	ldr	r3, [r4, #4]
	return HAL_UART_Transmit_DMA(interface_, &(buffers_to_transfer[index])[0], buffers_to_transfer[index].size());
 801670e:	4630      	mov	r0, r6
 8016710:	eb03 0208 	add.w	r2, r3, r8
 8016714:	f853 1008 	ldr.w	r1, [r3, r8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016718:	6852      	ldr	r2, [r2, #4]
 801671a:	1a52      	subs	r2, r2, r1
 801671c:	b292      	uxth	r2, r2
 801671e:	f7f4 fb49 	bl	800adb4 <HAL_UART_Transmit_DMA>
}
 8016722:	b00a      	add	sp, #40	@ 0x28
 8016724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!success) return HAL_ERROR;
 8016728:	2001      	movs	r0, #1
 801672a:	e7fa      	b.n	8016722 <_ZN12UARTProtocol4SendE13MessageHeader+0x9c>
	if (interface_->hdmatx->State != HAL_DMA_STATE_READY || interface_->gState != HAL_UART_STATE_READY) return HAL_BUSY;
 801672c:	2002      	movs	r0, #2
 801672e:	e7f8      	b.n	8016722 <_ZN12UARTProtocol4SendE13MessageHeader+0x9c>

08016730 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 8016730:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016732:	b170      	cbz	r0, 8016752 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8016734:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8016738:	d306      	bcc.n	8016748 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 801673a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801673e:	d301      	bcc.n	8016744 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 8016740:	f005 fb1b 	bl	801bd7a <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8016744:	f005 fb16 	bl	801bd74 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8016748:	0080      	lsls	r0, r0, #2
      }
 801674a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801674e:	f005 ba62 	b.w	801bc16 <_Znwj>
 8016752:	bd08      	pop	{r3, pc}

08016754 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016754:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8016756:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016758:	d006      	beq.n	8016768 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801675a:	da01      	bge.n	8016760 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 801675c:	f005 fb0a 	bl	801bd74 <_ZSt17__throw_bad_allocv>
      }
 8016760:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8016764:	f005 ba57 	b.w	801bc16 <_Znwj>
 8016768:	bd08      	pop	{r3, pc}

0801676a <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 801676a:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801676c:	b170      	cbz	r0, 801678c <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801676e:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8016772:	d306      	bcc.n	8016782 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8016774:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8016778:	d301      	bcc.n	801677e <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 801677a:	f005 fafe 	bl	801bd7a <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801677e:	f005 faf9 	bl	801bd74 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8016782:	0080      	lsls	r0, r0, #2
      }
 8016784:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016788:	f005 ba45 	b.w	801bc16 <_Znwj>
 801678c:	bd08      	pop	{r3, pc}

0801678e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801678e:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8016790:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016792:	d006      	beq.n	80167a2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8016794:	da01      	bge.n	801679a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 8016796:	f005 faed 	bl	801bd74 <_ZSt17__throw_bad_allocv>
      }
 801679a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801679e:	f005 ba3a 	b.w	801bc16 <_Znwj>
 80167a2:	bd08      	pop	{r3, pc}

080167a4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 80167a4:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80167a6:	4926      	ldr	r1, [pc, #152]	@ (8016840 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 80167a8:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80167aa:	4826      	ldr	r0, [pc, #152]	@ (8016844 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80167ac:	f005 faca 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80167b0:	2800      	cmp	r0, #0
 80167b2:	d133      	bne.n	801681c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80167b4:	4923      	ldr	r1, [pc, #140]	@ (8016844 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80167b6:	4608      	mov	r0, r1
 80167b8:	f005 fac4 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80167bc:	2800      	cmp	r0, #0
 80167be:	d12f      	bne.n	8016820 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80167c0:	4921      	ldr	r1, [pc, #132]	@ (8016848 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa4>)
 80167c2:	4820      	ldr	r0, [pc, #128]	@ (8016844 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80167c4:	f005 fabe 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80167c8:	bb60      	cbnz	r0, 8016824 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80167ca:	4920      	ldr	r1, [pc, #128]	@ (801684c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa8>)
 80167cc:	481d      	ldr	r0, [pc, #116]	@ (8016844 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80167ce:	f005 fab9 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80167d2:	bb48      	cbnz	r0, 8016828 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80167d4:	491e      	ldr	r1, [pc, #120]	@ (8016850 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xac>)
 80167d6:	481b      	ldr	r0, [pc, #108]	@ (8016844 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80167d8:	f005 fab4 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80167dc:	bb30      	cbnz	r0, 801682c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80167de:	491d      	ldr	r1, [pc, #116]	@ (8016854 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xb0>)
 80167e0:	4818      	ldr	r0, [pc, #96]	@ (8016844 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80167e2:	f005 faaf 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80167e6:	bb18      	cbnz	r0, 8016830 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80167e8:	491b      	ldr	r1, [pc, #108]	@ (8016858 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xb4>)
 80167ea:	4816      	ldr	r0, [pc, #88]	@ (8016844 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80167ec:	f005 faaa 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80167f0:	bb00      	cbnz	r0, 8016834 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80167f2:	491a      	ldr	r1, [pc, #104]	@ (801685c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xb8>)
 80167f4:	4813      	ldr	r0, [pc, #76]	@ (8016844 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80167f6:	f005 faa5 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80167fa:	b9e8      	cbnz	r0, 8016838 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80167fc:	4918      	ldr	r1, [pc, #96]	@ (8016860 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xbc>)
 80167fe:	4811      	ldr	r0, [pc, #68]	@ (8016844 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 8016800:	f005 faa0 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8016804:	b9d0      	cbnz	r0, 801683c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8016806:	4917      	ldr	r1, [pc, #92]	@ (8016864 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xc0>)
 8016808:	480e      	ldr	r0, [pc, #56]	@ (8016844 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 801680a:	f005 fa9b 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801680e:	2800      	cmp	r0, #0
 8016810:	bf14      	ite	ne
 8016812:	2309      	movne	r3, #9
 8016814:	2300      	moveq	r3, #0
 8016816:	7020      	strb	r0, [r4, #0]
}
 8016818:	4618      	mov	r0, r3
 801681a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801681c:	2300      	movs	r3, #0
 801681e:	e7fa      	b.n	8016816 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8016820:	2301      	movs	r3, #1
 8016822:	e7f8      	b.n	8016816 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8016824:	2302      	movs	r3, #2
 8016826:	e7f6      	b.n	8016816 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8016828:	2303      	movs	r3, #3
 801682a:	e7f4      	b.n	8016816 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801682c:	2304      	movs	r3, #4
 801682e:	e7f2      	b.n	8016816 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8016830:	2305      	movs	r3, #5
 8016832:	e7f0      	b.n	8016816 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8016834:	2306      	movs	r3, #6
 8016836:	e7ee      	b.n	8016816 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8016838:	2307      	movs	r3, #7
 801683a:	e7ec      	b.n	8016816 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801683c:	2308      	movs	r3, #8
 801683e:	e7ea      	b.n	8016816 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
 8016840:	0801ca50 	.word	0x0801ca50
 8016844:	0801ca40 	.word	0x0801ca40
 8016848:	0801ca30 	.word	0x0801ca30
 801684c:	0801ca20 	.word	0x0801ca20
 8016850:	0801ca58 	.word	0x0801ca58
 8016854:	0801ca48 	.word	0x0801ca48
 8016858:	0801ca38 	.word	0x0801ca38
 801685c:	0801ca28 	.word	0x0801ca28
 8016860:	0801ca18 	.word	0x0801ca18
 8016864:	0801ca10 	.word	0x0801ca10

08016868 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8016868:	4926      	ldr	r1, [pc, #152]	@ (8016904 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 801686a:	b510      	push	{r4, lr}
 801686c:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801686e:	4608      	mov	r0, r1
 8016870:	f005 fa68 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8016874:	2800      	cmp	r0, #0
 8016876:	d133      	bne.n	80168e0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8016878:	4923      	ldr	r1, [pc, #140]	@ (8016908 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa0>)
 801687a:	4822      	ldr	r0, [pc, #136]	@ (8016904 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801687c:	f005 fa62 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8016880:	2800      	cmp	r0, #0
 8016882:	d12f      	bne.n	80168e4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8016884:	4921      	ldr	r1, [pc, #132]	@ (801690c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa4>)
 8016886:	481f      	ldr	r0, [pc, #124]	@ (8016904 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8016888:	f005 fa5c 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801688c:	bb60      	cbnz	r0, 80168e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801688e:	4920      	ldr	r1, [pc, #128]	@ (8016910 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa8>)
 8016890:	481c      	ldr	r0, [pc, #112]	@ (8016904 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8016892:	f005 fa57 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8016896:	bb48      	cbnz	r0, 80168ec <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8016898:	491e      	ldr	r1, [pc, #120]	@ (8016914 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xac>)
 801689a:	481a      	ldr	r0, [pc, #104]	@ (8016904 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801689c:	f005 fa52 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80168a0:	bb30      	cbnz	r0, 80168f0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80168a2:	491d      	ldr	r1, [pc, #116]	@ (8016918 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb0>)
 80168a4:	4817      	ldr	r0, [pc, #92]	@ (8016904 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80168a6:	f005 fa4d 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80168aa:	bb18      	cbnz	r0, 80168f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80168ac:	491b      	ldr	r1, [pc, #108]	@ (801691c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb4>)
 80168ae:	4815      	ldr	r0, [pc, #84]	@ (8016904 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80168b0:	f005 fa48 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80168b4:	bb00      	cbnz	r0, 80168f8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80168b6:	491a      	ldr	r1, [pc, #104]	@ (8016920 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb8>)
 80168b8:	4812      	ldr	r0, [pc, #72]	@ (8016904 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80168ba:	f005 fa43 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80168be:	b9e8      	cbnz	r0, 80168fc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80168c0:	4918      	ldr	r1, [pc, #96]	@ (8016924 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xbc>)
 80168c2:	4810      	ldr	r0, [pc, #64]	@ (8016904 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80168c4:	f005 fa3e 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80168c8:	b9d0      	cbnz	r0, 8016900 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80168ca:	4917      	ldr	r1, [pc, #92]	@ (8016928 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xc0>)
 80168cc:	480d      	ldr	r0, [pc, #52]	@ (8016904 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80168ce:	f005 fa39 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80168d2:	2800      	cmp	r0, #0
 80168d4:	bf14      	ite	ne
 80168d6:	2309      	movne	r3, #9
 80168d8:	2300      	moveq	r3, #0
 80168da:	7020      	strb	r0, [r4, #0]
}
 80168dc:	4618      	mov	r0, r3
 80168de:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80168e0:	2300      	movs	r3, #0
 80168e2:	e7fa      	b.n	80168da <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80168e4:	2301      	movs	r3, #1
 80168e6:	e7f8      	b.n	80168da <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80168e8:	2302      	movs	r3, #2
 80168ea:	e7f6      	b.n	80168da <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80168ec:	2303      	movs	r3, #3
 80168ee:	e7f4      	b.n	80168da <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80168f0:	2304      	movs	r3, #4
 80168f2:	e7f2      	b.n	80168da <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80168f4:	2305      	movs	r3, #5
 80168f6:	e7f0      	b.n	80168da <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80168f8:	2306      	movs	r3, #6
 80168fa:	e7ee      	b.n	80168da <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80168fc:	2307      	movs	r3, #7
 80168fe:	e7ec      	b.n	80168da <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8016900:	2308      	movs	r3, #8
 8016902:	e7ea      	b.n	80168da <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
 8016904:	0801ca50 	.word	0x0801ca50
 8016908:	0801ca40 	.word	0x0801ca40
 801690c:	0801ca30 	.word	0x0801ca30
 8016910:	0801ca20 	.word	0x0801ca20
 8016914:	0801ca58 	.word	0x0801ca58
 8016918:	0801ca48 	.word	0x0801ca48
 801691c:	0801ca38 	.word	0x0801ca38
 8016920:	0801ca28 	.word	0x0801ca28
 8016924:	0801ca18 	.word	0x0801ca18
 8016928:	0801ca10 	.word	0x0801ca10

0801692c <_ZN10Publishers4InitEP9RegistersP13Communication>:
 * @brief Initialize the class with references to other classes. Set default values.
 *
 * @param input registers_: the Registers instance
 * @param input communication_: the Communication instance
 */
void Publishers::Init(Registers* registers_, Communication* communication_) {
 801692c:	b510      	push	{r4, lr}
	registers = registers_;
	communication = communication_;
 801692e:	e9c0 1201 	strd	r1, r2, [r0, #4]

	PublishersSemaphore = osSemaphoreNew(1,1,NULL);
 8016932:	2101      	movs	r1, #1
void Publishers::Init(Registers* registers_, Communication* communication_) {
 8016934:	4604      	mov	r4, r0
	PublishersSemaphore = osSemaphoreNew(1,1,NULL);
 8016936:	2200      	movs	r2, #0
 8016938:	4608      	mov	r0, r1
 801693a:	f7f5 fecf 	bl	800c6dc <osSemaphoreNew>
 801693e:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(PublishersSemaphore);
}
 8016940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(PublishersSemaphore);
 8016944:	f7f5 bf5a 	b.w	800c7fc <osSemaphoreRelease>

08016948 <_ZN10Publishers13FindPublisherEhPb>:
 *
 * @param input ID: the publisher ID
 * @param output success: whether successful
 * @return the publisher pointer
 */
Publisher* Publishers::FindPublisher(uint8_t ID, bool* success) {
 8016948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801694a:	4604      	mov	r4, r0
 801694c:	460f      	mov	r7, r1
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801694e:	6800      	ldr	r0, [r0, #0]
 8016950:	f04f 31ff 	mov.w	r1, #4294967295
Publisher* Publishers::FindPublisher(uint8_t ID, bool* success) {
 8016954:	4616      	mov	r6, r2
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016956:	f7f5 ff1d 	bl	800c794 <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801695a:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
	for (Publisher &publisher : publishers) {
 801695e:	429a      	cmp	r2, r3
 8016960:	461d      	mov	r5, r3
 8016962:	d105      	bne.n	8016970 <_ZN10Publishers13FindPublisherEhPb+0x28>
			osSemaphoreRelease(PublishersSemaphore);
			*success = true;
			return publisher_pointer;
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 8016964:	6820      	ldr	r0, [r4, #0]
 8016966:	f7f5 ff49 	bl	800c7fc <osSemaphoreRelease>
	*success = false;
	return NULL;
 801696a:	2300      	movs	r3, #0
 801696c:	461d      	mov	r5, r3
 801696e:	e008      	b.n	8016982 <_ZN10Publishers13FindPublisherEhPb+0x3a>
		if (publisher.ID == ID) {
 8016970:	462b      	mov	r3, r5
 8016972:	f813 1b20 	ldrb.w	r1, [r3], #32
 8016976:	42b9      	cmp	r1, r7
 8016978:	d1f1      	bne.n	801695e <_ZN10Publishers13FindPublisherEhPb+0x16>
			osSemaphoreRelease(PublishersSemaphore);
 801697a:	6820      	ldr	r0, [r4, #0]
 801697c:	f7f5 ff3e 	bl	800c7fc <osSemaphoreRelease>
 8016980:	2301      	movs	r3, #1
}
 8016982:	4628      	mov	r0, r5
			*success = true;
 8016984:	7033      	strb	r3, [r6, #0]
}
 8016986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016988 <_ZN10Publishers18SetPublisherStatusEhb>:
bool Publishers::SetPublisherStatus(uint8_t ID, bool status) {
 8016988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801698a:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 801698c:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::SetPublisherStatus(uint8_t ID, bool status) {
 8016990:	4604      	mov	r4, r0
	Publisher* publisher = FindPublisher(ID, &success);
 8016992:	f7ff ffd9 	bl	8016948 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 8016996:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 801699a:	4605      	mov	r5, r0
	if (!success) return false;
 801699c:	b157      	cbz	r7, 80169b4 <_ZN10Publishers18SetPublisherStatusEhb+0x2c>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801699e:	f04f 31ff 	mov.w	r1, #4294967295
 80169a2:	6820      	ldr	r0, [r4, #0]
 80169a4:	f7f5 fef6 	bl	800c794 <osSemaphoreAcquire>
	publisher->counter = 0;
 80169a8:	2300      	movs	r3, #0
	osSemaphoreRelease(PublishersSemaphore);
 80169aa:	6820      	ldr	r0, [r4, #0]
	publisher->counter = 0;
 80169ac:	80ab      	strh	r3, [r5, #4]
	publisher->activated = status;
 80169ae:	706e      	strb	r6, [r5, #1]
	osSemaphoreRelease(PublishersSemaphore);
 80169b0:	f7f5 ff24 	bl	800c7fc <osSemaphoreRelease>
}
 80169b4:	4638      	mov	r0, r7
 80169b6:	b003      	add	sp, #12
 80169b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080169ba <_ZN10Publishers17ActivatePublisherEh>:
	return SetPublisherStatus(ID, true);
 80169ba:	2201      	movs	r2, #1
 80169bc:	f7ff bfe4 	b.w	8016988 <_ZN10Publishers18SetPublisherStatusEhb>

080169c0 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80169c0:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80169c2:	4611      	mov	r1, r2
 80169c4:	b508      	push	{r3, lr}
			if (length != 2) return false;
 80169c6:	d108      	bne.n	80169da <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x1a>
			self->SetPublisherStatus(input[0], (bool) input[1]);
 80169c8:	7852      	ldrb	r2, [r2, #1]
 80169ca:	7809      	ldrb	r1, [r1, #0]
 80169cc:	3a00      	subs	r2, #0
 80169ce:	bf18      	it	ne
 80169d0:	2201      	movne	r2, #1
 80169d2:	f7ff ffd9 	bl	8016988 <_ZN10Publishers18SetPublisherStatusEhb>
			return true;
 80169d6:	2001      	movs	r0, #1
		}
 80169d8:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 80169da:	2000      	movs	r0, #0
 80169dc:	e7fc      	b.n	80169d8 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x18>

080169de <_ZN10Publishers21SetPublisherPrescalerEht>:
bool Publishers::SetPublisherPrescaler(uint8_t ID, uint16_t prescaler) {
 80169de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80169e0:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 80169e2:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::SetPublisherPrescaler(uint8_t ID, uint16_t prescaler) {
 80169e6:	4604      	mov	r4, r0
	Publisher* publisher = FindPublisher(ID, &success);
 80169e8:	f7ff ffae 	bl	8016948 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 80169ec:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 80169f0:	4605      	mov	r5, r0
	if (!success) return false;
 80169f2:	b147      	cbz	r7, 8016a06 <_ZN10Publishers21SetPublisherPrescalerEht+0x28>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80169f4:	f04f 31ff 	mov.w	r1, #4294967295
 80169f8:	6820      	ldr	r0, [r4, #0]
 80169fa:	f7f5 fecb 	bl	800c794 <osSemaphoreAcquire>
	osSemaphoreRelease(PublishersSemaphore);
 80169fe:	6820      	ldr	r0, [r4, #0]
	publisher->prescaler = prescaler;
 8016a00:	806e      	strh	r6, [r5, #2]
	osSemaphoreRelease(PublishersSemaphore);
 8016a02:	f7f5 fefb 	bl	800c7fc <osSemaphoreRelease>
}
 8016a06:	4638      	mov	r0, r7
 8016a08:	b003      	add	sp, #12
 8016a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016a0c <_ZZN10Publishers12AddRegistersEvENUlPvtPttE1_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8016a0c:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 8016a0e:	4611      	mov	r1, r2
 8016a10:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8016a12:	d105      	bne.n	8016a20 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE1_4_FUNES0_tS1_t+0x14>
			self->SetPublisherPrescaler((uint8_t) input[0], input[1]);
 8016a14:	8852      	ldrh	r2, [r2, #2]
 8016a16:	7809      	ldrb	r1, [r1, #0]
 8016a18:	f7ff ffe1 	bl	80169de <_ZN10Publishers21SetPublisherPrescalerEht>
 8016a1c:	2001      	movs	r0, #1
		}
 8016a1e:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8016a20:	2000      	movs	r0, #0
 8016a22:	e7fc      	b.n	8016a1e <_ZZN10Publishers12AddRegistersEvENUlPvtPttE1_4_FUNES0_tS1_t+0x12>

08016a24 <_ZN10Publishers10StopTopicsEh>:
bool Publishers::StopTopics(uint8_t ID) {
 8016a24:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Publisher* publisher = FindPublisher(ID, &success);
 8016a26:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::StopTopics(uint8_t ID) {
 8016a2a:	4604      	mov	r4, r0
	Publisher* publisher = FindPublisher(ID, &success);
 8016a2c:	f7ff ff8c 	bl	8016948 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 8016a30:	f89d 6007 	ldrb.w	r6, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 8016a34:	4605      	mov	r5, r0
	if (!success) return false;
 8016a36:	b166      	cbz	r6, 8016a52 <_ZN10Publishers10StopTopicsEh+0x2e>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016a38:	f04f 31ff 	mov.w	r1, #4294967295
 8016a3c:	6820      	ldr	r0, [r4, #0]
 8016a3e:	f7f5 fea9 	bl	800c794 <osSemaphoreAcquire>
		topic.activated = false;
 8016a42:	2100      	movs	r1, #0
 8016a44:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
	for (Topic &topic : publisher->topics) {
 8016a48:	429a      	cmp	r2, r3
 8016a4a:	d105      	bne.n	8016a58 <_ZN10Publishers10StopTopicsEh+0x34>
	osSemaphoreRelease(PublishersSemaphore);
 8016a4c:	6820      	ldr	r0, [r4, #0]
 8016a4e:	f7f5 fed5 	bl	800c7fc <osSemaphoreRelease>
}
 8016a52:	4630      	mov	r0, r6
 8016a54:	b002      	add	sp, #8
 8016a56:	bd70      	pop	{r4, r5, r6, pc}
		topic.activated = false;
 8016a58:	f803 1b04 	strb.w	r1, [r3], #4
	return *this;
 8016a5c:	e7f4      	b.n	8016a48 <_ZN10Publishers10StopTopicsEh+0x24>

08016a5e <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			self->StopTopics(*input);
 8016a5e:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8016a60:	b508      	push	{r3, lr}
			self->StopTopics(*input);
 8016a62:	f7ff ffdf 	bl	8016a24 <_ZN10Publishers10StopTopicsEh>
		}
 8016a66:	2001      	movs	r0, #1
 8016a68:	bd08      	pop	{r3, pc}

08016a6a <_ZN10Publishers23UnlinkFromAllInterfacesEh>:
bool Publishers::UnlinkFromAllInterfaces(uint8_t ID) {
 8016a6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Publisher* publisher = FindPublisher(ID, &success);
 8016a6c:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::UnlinkFromAllInterfaces(uint8_t ID) {
 8016a70:	4605      	mov	r5, r0
	Publisher* publisher = FindPublisher(ID, &success);
 8016a72:	f7ff ff69 	bl	8016948 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 8016a76:	f89d 6007 	ldrb.w	r6, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 8016a7a:	4604      	mov	r4, r0
	if (!success) return false;
 8016a7c:	b166      	cbz	r6, 8016a98 <_ZN10Publishers23UnlinkFromAllInterfacesEh+0x2e>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016a7e:	f04f 31ff 	mov.w	r1, #4294967295
 8016a82:	6828      	ldr	r0, [r5, #0]
 8016a84:	f7f5 fe86 	bl	800c794 <osSemaphoreAcquire>
	osSemaphoreRelease(PublishersSemaphore);
 8016a88:	6828      	ldr	r0, [r5, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8016a8a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8016a8e:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
 8016a90:	bf18      	it	ne
 8016a92:	60e3      	strne	r3, [r4, #12]
 8016a94:	f7f5 feb2 	bl	800c7fc <osSemaphoreRelease>
}
 8016a98:	4630      	mov	r0, r6
 8016a9a:	b002      	add	sp, #8
 8016a9c:	bd70      	pop	{r4, r5, r6, pc}

08016a9e <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE5_4_FUNES0_tS1_t>:
			self->UnlinkFromAllInterfaces(*input);
 8016a9e:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8016aa0:	b508      	push	{r3, lr}
			self->UnlinkFromAllInterfaces(*input);
 8016aa2:	f7ff ffe2 	bl	8016a6a <_ZN10Publishers23UnlinkFromAllInterfacesEh>
		}
 8016aa6:	2001      	movs	r0, #1
 8016aa8:	bd08      	pop	{r3, pc}

08016aaa <_ZN10Publishers9FindTopicEhtPb>:
 * @param input ID: the publisher ID
 * @param input topic_ID: the topic ID / register address to find
 * @param output success: whether successful
 * @return the topic pointer
 */
Topic* Publishers::FindTopic(uint8_t ID, uint16_t topic_ID, bool* success) {
 8016aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016aac:	461c      	mov	r4, r3
 8016aae:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, success);
 8016ab0:	461a      	mov	r2, r3
Topic* Publishers::FindTopic(uint8_t ID, uint16_t topic_ID, bool* success) {
 8016ab2:	4606      	mov	r6, r0
	Publisher* publisher = FindPublisher(ID, success);
 8016ab4:	f7ff ff48 	bl	8016948 <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 8016ab8:	7823      	ldrb	r3, [r4, #0]
	Publisher* publisher = FindPublisher(ID, success);
 8016aba:	4605      	mov	r5, r0
	if (not *success)
 8016abc:	b173      	cbz	r3, 8016adc <_ZN10Publishers9FindTopicEhtPb+0x32>
		return NULL;

	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016abe:	f04f 31ff 	mov.w	r1, #4294967295
 8016ac2:	6830      	ldr	r0, [r6, #0]
 8016ac4:	f7f5 fe66 	bl	800c794 <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8016ac8:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
	for (Topic &topic : publisher->topics) {
 8016acc:	429a      	cmp	r2, r3
 8016ace:	461d      	mov	r5, r3
 8016ad0:	d106      	bne.n	8016ae0 <_ZN10Publishers9FindTopicEhtPb+0x36>
			osSemaphoreRelease(PublishersSemaphore);
			*success = true;
			return topic_pointer;
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 8016ad2:	6830      	ldr	r0, [r6, #0]
 8016ad4:	f7f5 fe92 	bl	800c7fc <osSemaphoreRelease>
	*success = false;
 8016ad8:	2300      	movs	r3, #0
 8016ada:	7023      	strb	r3, [r4, #0]
		return NULL;
 8016adc:	2500      	movs	r5, #0
 8016ade:	e008      	b.n	8016af2 <_ZN10Publishers9FindTopicEhtPb+0x48>
		if (topic.ID == topic_ID) {
 8016ae0:	8869      	ldrh	r1, [r5, #2]
 8016ae2:	1d2b      	adds	r3, r5, #4
 8016ae4:	42b9      	cmp	r1, r7
 8016ae6:	d1f1      	bne.n	8016acc <_ZN10Publishers9FindTopicEhtPb+0x22>
			osSemaphoreRelease(PublishersSemaphore);
 8016ae8:	6830      	ldr	r0, [r6, #0]
 8016aea:	f7f5 fe87 	bl	800c7fc <osSemaphoreRelease>
			*success = true;
 8016aee:	2301      	movs	r3, #1
 8016af0:	7023      	strb	r3, [r4, #0]
	return NULL;
}
 8016af2:	4628      	mov	r0, r5
 8016af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016af6 <_ZN10Publishers14SetTopicStatusEhtb>:
bool Publishers::SetTopicStatus(uint8_t ID, uint16_t topic_ID, bool status) {
 8016af6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016af8:	461e      	mov	r6, r3
	Topic* topic = FindTopic(ID, topic_ID, &success);
 8016afa:	f10d 0307 	add.w	r3, sp, #7
bool Publishers::SetTopicStatus(uint8_t ID, uint16_t topic_ID, bool status) {
 8016afe:	4604      	mov	r4, r0
	Topic* topic = FindTopic(ID, topic_ID, &success);
 8016b00:	f7ff ffd3 	bl	8016aaa <_ZN10Publishers9FindTopicEhtPb>
	if (!success) return false;
 8016b04:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Topic* topic = FindTopic(ID, topic_ID, &success);
 8016b08:	4605      	mov	r5, r0
	if (!success) return false;
 8016b0a:	b147      	cbz	r7, 8016b1e <_ZN10Publishers14SetTopicStatusEhtb+0x28>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8016b10:	6820      	ldr	r0, [r4, #0]
 8016b12:	f7f5 fe3f 	bl	800c794 <osSemaphoreAcquire>
	osSemaphoreRelease(PublishersSemaphore);
 8016b16:	6820      	ldr	r0, [r4, #0]
	topic->activated = status;
 8016b18:	702e      	strb	r6, [r5, #0]
	osSemaphoreRelease(PublishersSemaphore);
 8016b1a:	f7f5 fe6f 	bl	800c7fc <osSemaphoreRelease>
}
 8016b1e:	4638      	mov	r0, r7
 8016b20:	b003      	add	sp, #12
 8016b22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016b24 <_ZN10Publishers13ActivateTopicEht>:
	return SetTopicStatus(ID, topic_ID, true);
 8016b24:	2301      	movs	r3, #1
 8016b26:	f7ff bfe6 	b.w	8016af6 <_ZN10Publishers14SetTopicStatusEhtb>

08016b2a <_ZZN10Publishers12AddRegistersEvENUlPvtPttE0_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 8016b2a:	2b03      	cmp	r3, #3
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 8016b2c:	4611      	mov	r1, r2
 8016b2e:	b508      	push	{r3, lr}
			if (length != 3) return false;
 8016b30:	d109      	bne.n	8016b46 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE0_4_FUNES0_tS1_t+0x1c>
			self->SetTopicStatus((uint8_t) input[0], input[1], (bool) input[2]);
 8016b32:	8893      	ldrh	r3, [r2, #4]
 8016b34:	7809      	ldrb	r1, [r1, #0]
 8016b36:	3b00      	subs	r3, #0
 8016b38:	8852      	ldrh	r2, [r2, #2]
 8016b3a:	bf18      	it	ne
 8016b3c:	2301      	movne	r3, #1
 8016b3e:	f7ff ffda 	bl	8016af6 <_ZN10Publishers14SetTopicStatusEhtb>
			return true;
 8016b42:	2001      	movs	r0, #1
		}
 8016b44:	bd08      	pop	{r3, pc}
			if (length != 3) return false;
 8016b46:	2000      	movs	r0, #0
 8016b48:	e7fc      	b.n	8016b44 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE0_4_FUNES0_tS1_t+0x1a>

08016b4a <_ZN10Publishers20FindPublishInterfaceEhhPb>:
 * @param input ID: the publisher ID
 * @param input interface_ID: the interface ID to find
 * @param output success: whether successful
 * @return the interface information pointer
 */
PublishInterface* Publishers::FindPublishInterface(uint8_t ID, uint8_t interface_ID, bool* success) {
 8016b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b4c:	461c      	mov	r4, r3
 8016b4e:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, success);
 8016b50:	461a      	mov	r2, r3
PublishInterface* Publishers::FindPublishInterface(uint8_t ID, uint8_t interface_ID, bool* success) {
 8016b52:	4605      	mov	r5, r0
	Publisher* publisher = FindPublisher(ID, success);
 8016b54:	f7ff fef8 	bl	8016948 <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 8016b58:	7823      	ldrb	r3, [r4, #0]
	Publisher* publisher = FindPublisher(ID, success);
 8016b5a:	4606      	mov	r6, r0
	if (not *success)
 8016b5c:	b173      	cbz	r3, 8016b7c <_ZN10Publishers20FindPublishInterfaceEhhPb+0x32>
		return NULL;

	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016b5e:	f04f 31ff 	mov.w	r1, #4294967295
 8016b62:	6828      	ldr	r0, [r5, #0]
 8016b64:	f7f5 fe16 	bl	800c794 <osSemaphoreAcquire>
 8016b68:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
	for (PublishInterface &interface : publisher->interfaces) {
 8016b6c:	429a      	cmp	r2, r3
 8016b6e:	461e      	mov	r6, r3
 8016b70:	d106      	bne.n	8016b80 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x36>
			osSemaphoreRelease(PublishersSemaphore);
			*success = true;
			return publish_interface_pointer;
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 8016b72:	6828      	ldr	r0, [r5, #0]
 8016b74:	f7f5 fe42 	bl	800c7fc <osSemaphoreRelease>
	*success = false;
 8016b78:	2300      	movs	r3, #0
 8016b7a:	7023      	strb	r3, [r4, #0]
		return NULL;
 8016b7c:	2600      	movs	r6, #0
 8016b7e:	e009      	b.n	8016b94 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x4a>
		if (interface.interface == interface_ID) {
 8016b80:	4633      	mov	r3, r6
 8016b82:	f813 1b02 	ldrb.w	r1, [r3], #2
 8016b86:	42b9      	cmp	r1, r7
 8016b88:	d1f0      	bne.n	8016b6c <_ZN10Publishers20FindPublishInterfaceEhhPb+0x22>
			osSemaphoreRelease(PublishersSemaphore);
 8016b8a:	6828      	ldr	r0, [r5, #0]
 8016b8c:	f7f5 fe36 	bl	800c7fc <osSemaphoreRelease>
			*success = true;
 8016b90:	2301      	movs	r3, #1
 8016b92:	7023      	strb	r3, [r4, #0]
	return NULL;
}
 8016b94:	4630      	mov	r0, r6
 8016b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016b98 <_ZN10Publishers17SetPublishAddressEhhh>:
bool Publishers::SetPublishAddress(uint8_t ID, uint8_t interface_ID, uint8_t address) {
 8016b98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b9a:	461e      	mov	r6, r3
	PublishInterface* interface = FindPublishInterface(ID, interface_ID, &success);
 8016b9c:	f10d 0307 	add.w	r3, sp, #7
bool Publishers::SetPublishAddress(uint8_t ID, uint8_t interface_ID, uint8_t address) {
 8016ba0:	4604      	mov	r4, r0
	PublishInterface* interface = FindPublishInterface(ID, interface_ID, &success);
 8016ba2:	f7ff ffd2 	bl	8016b4a <_ZN10Publishers20FindPublishInterfaceEhhPb>
	if (success) return false;
 8016ba6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	PublishInterface* interface = FindPublishInterface(ID, interface_ID, &success);
 8016baa:	4605      	mov	r5, r0
	if (success) return false;
 8016bac:	b95b      	cbnz	r3, 8016bc6 <_ZN10Publishers17SetPublishAddressEhhh+0x2e>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016bae:	f04f 31ff 	mov.w	r1, #4294967295
 8016bb2:	6820      	ldr	r0, [r4, #0]
 8016bb4:	f7f5 fdee 	bl	800c794 <osSemaphoreAcquire>
	interface->address = address;
 8016bb8:	706e      	strb	r6, [r5, #1]
	osSemaphoreRelease(PublishersSemaphore);
 8016bba:	6820      	ldr	r0, [r4, #0]
 8016bbc:	f7f5 fe1e 	bl	800c7fc <osSemaphoreRelease>
	return true;
 8016bc0:	2001      	movs	r0, #1
}
 8016bc2:	b002      	add	sp, #8
 8016bc4:	bd70      	pop	{r4, r5, r6, pc}
	if (success) return false;
 8016bc6:	2000      	movs	r0, #0
 8016bc8:	e7fb      	b.n	8016bc2 <_ZN10Publishers17SetPublishAddressEhhh+0x2a>

08016bca <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 8016bca:	2b03      	cmp	r3, #3
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8016bcc:	4611      	mov	r1, r2
 8016bce:	b508      	push	{r3, lr}
			if (length != 3) return false;
 8016bd0:	d106      	bne.n	8016be0 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t+0x16>
			self->SetPublishAddress(input[0], input[1], input[2]);
 8016bd2:	7893      	ldrb	r3, [r2, #2]
 8016bd4:	7809      	ldrb	r1, [r1, #0]
 8016bd6:	7852      	ldrb	r2, [r2, #1]
 8016bd8:	f7ff ffde 	bl	8016b98 <_ZN10Publishers17SetPublishAddressEhhh>
			return true;
 8016bdc:	2001      	movs	r0, #1
		}
 8016bde:	bd08      	pop	{r3, pc}
			if (length != 3) return false;
 8016be0:	2000      	movs	r0, #0
 8016be2:	e7fc      	b.n	8016bde <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t+0x14>

08016be4 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb>:
 * @param input ID: the publisher ID
 * @param input interface_ID: the interface ID to find
 * @param output success: whether successful
 * @return the interface information index
 */
uint8_t Publishers::FindPublishInterfaceIndex(uint8_t ID, uint8_t interface_ID, bool* success) {
 8016be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016be6:	461d      	mov	r5, r3
 8016be8:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, success);
 8016bea:	461a      	mov	r2, r3
uint8_t Publishers::FindPublishInterfaceIndex(uint8_t ID, uint8_t interface_ID, bool* success) {
 8016bec:	4606      	mov	r6, r0
	Publisher* publisher = FindPublisher(ID, success);
 8016bee:	f7ff feab 	bl	8016948 <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 8016bf2:	782b      	ldrb	r3, [r5, #0]
	Publisher* publisher = FindPublisher(ID, success);
 8016bf4:	4604      	mov	r4, r0
	if (not *success)
 8016bf6:	b18b      	cbz	r3, 8016c1c <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x38>
		return 0;

	uint8_t index = 0;
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8016bfc:	6830      	ldr	r0, [r6, #0]
 8016bfe:	f7f5 fdc9 	bl	800c794 <osSemaphoreAcquire>
	for (PublishInterface &interface : publisher->interfaces) {
 8016c02:	2100      	movs	r1, #0
      : _M_current(__i) { }
 8016c04:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
		if (interface.interface == interface_ID) {
 8016c08:	1e9c      	subs	r4, r3, #2
	for (PublishInterface &interface : publisher->interfaces) {
 8016c0a:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8016c0e:	4290      	cmp	r0, r2
 8016c10:	d106      	bne.n	8016c20 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x3c>
			*success = true;
			return index;
		}
		index++;
	}
	osSemaphoreRelease(PublishersSemaphore);
 8016c12:	6830      	ldr	r0, [r6, #0]
 8016c14:	f7f5 fdf2 	bl	800c7fc <osSemaphoreRelease>
	*success = false;
 8016c18:	2300      	movs	r3, #0
 8016c1a:	702b      	strb	r3, [r5, #0]
		return 0;
 8016c1c:	2400      	movs	r4, #0
 8016c1e:	e00a      	b.n	8016c36 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x52>
		if (interface.interface == interface_ID) {
 8016c20:	1c4a      	adds	r2, r1, #1
 8016c22:	f814 c012 	ldrb.w	ip, [r4, r2, lsl #1]
 8016c26:	45bc      	cmp	ip, r7
 8016c28:	d107      	bne.n	8016c3a <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x56>
			osSemaphoreRelease(PublishersSemaphore);
 8016c2a:	6830      	ldr	r0, [r6, #0]
 8016c2c:	b2cc      	uxtb	r4, r1
 8016c2e:	f7f5 fde5 	bl	800c7fc <osSemaphoreRelease>
			*success = true;
 8016c32:	2301      	movs	r3, #1
 8016c34:	702b      	strb	r3, [r5, #0]
	return 0;
}
 8016c36:	4620      	mov	r0, r4
 8016c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c3a:	4611      	mov	r1, r2
 8016c3c:	e7e5      	b.n	8016c0a <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x26>

08016c3e <_ZN10Publishers19UnlinkFromInterfaceEhh>:
bool Publishers::UnlinkFromInterface(uint8_t ID, uint8_t interface_ID) {
 8016c3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016c40:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, &success);
 8016c42:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::UnlinkFromInterface(uint8_t ID, uint8_t interface_ID) {
 8016c46:	4605      	mov	r5, r0
 8016c48:	460e      	mov	r6, r1
	Publisher* publisher = FindPublisher(ID, &success);
 8016c4a:	f7ff fe7d 	bl	8016948 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 8016c4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 8016c52:	4604      	mov	r4, r0
	if (!success) return false;
 8016c54:	b91b      	cbnz	r3, 8016c5e <_ZN10Publishers19UnlinkFromInterfaceEhh+0x20>
 8016c56:	2700      	movs	r7, #0
}
 8016c58:	4638      	mov	r0, r7
 8016c5a:	b003      	add	sp, #12
 8016c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t index = FindPublishInterfaceIndex(ID, interface_ID, &success);
 8016c5e:	463a      	mov	r2, r7
 8016c60:	4631      	mov	r1, r6
 8016c62:	f10d 0307 	add.w	r3, sp, #7
 8016c66:	4628      	mov	r0, r5
 8016c68:	f7ff ffbc 	bl	8016be4 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb>
	if (!success) return false;
 8016c6c:	f89d 7007 	ldrb.w	r7, [sp, #7]
	uint8_t index = FindPublishInterfaceIndex(ID, interface_ID, &success);
 8016c70:	4606      	mov	r6, r0
	if (!success) return false;
 8016c72:	2f00      	cmp	r7, #0
 8016c74:	d0ef      	beq.n	8016c56 <_ZN10Publishers19UnlinkFromInterfaceEhh+0x18>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016c76:	f04f 31ff 	mov.w	r1, #4294967295
 8016c7a:	6828      	ldr	r0, [r5, #0]
 8016c7c:	f7f5 fd8a 	bl	800c794 <osSemaphoreAcquire>
      { return __normal_iterator(_M_current + __n); }
 8016c80:	68a0      	ldr	r0, [r4, #8]
 8016c82:	b236      	sxth	r6, r6
      : _M_current(__i) { }
 8016c84:	68e2      	ldr	r2, [r4, #12]
      { return __normal_iterator(_M_current + __n); }
 8016c86:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8016c8a:	1c81      	adds	r1, r0, #2
      if (__position + 1 != end())
 8016c8c:	4291      	cmp	r1, r2
 8016c8e:	d002      	beq.n	8016c96 <_ZN10Publishers19UnlinkFromInterfaceEhh+0x58>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8016c90:	1a52      	subs	r2, r2, r1
 8016c92:	f005 faf7 	bl	801c284 <memmove>
      --this->_M_impl._M_finish;
 8016c96:	68e3      	ldr	r3, [r4, #12]
	osSemaphoreRelease(PublishersSemaphore);
 8016c98:	6828      	ldr	r0, [r5, #0]
 8016c9a:	3b02      	subs	r3, #2
 8016c9c:	60e3      	str	r3, [r4, #12]
 8016c9e:	f7f5 fdad 	bl	800c7fc <osSemaphoreRelease>
	return true;
 8016ca2:	e7d9      	b.n	8016c58 <_ZN10Publishers19UnlinkFromInterfaceEhh+0x1a>

08016ca4 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8016ca4:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8016ca6:	4611      	mov	r1, r2
 8016ca8:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8016caa:	d105      	bne.n	8016cb8 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x14>
			self->UnlinkFromInterface(input[0], input[1]);
 8016cac:	7852      	ldrb	r2, [r2, #1]
 8016cae:	7809      	ldrb	r1, [r1, #0]
 8016cb0:	f7ff ffc5 	bl	8016c3e <_ZN10Publishers19UnlinkFromInterfaceEhh>
 8016cb4:	2001      	movs	r0, #1
		}
 8016cb6:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8016cb8:	2000      	movs	r0, #0
 8016cba:	e7fc      	b.n	8016cb6 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x12>

08016cbc <_ZNSt12_Vector_baseI16PublishInterfaceSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8016cbc:	b510      	push	{r4, lr}
 8016cbe:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8016cc0:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8016cc2:	b118      	cbz	r0, 8016ccc <_ZNSt12_Vector_baseI16PublishInterfaceSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8016cc4:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8016cc6:	1a09      	subs	r1, r1, r0
 8016cc8:	f004 ff80 	bl	801bbcc <_ZdlPvj>
      }
 8016ccc:	4620      	mov	r0, r4
 8016cce:	bd10      	pop	{r4, pc}

08016cd0 <_ZNSt12_Vector_baseI5TopicSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8016cd0:	b510      	push	{r4, lr}
 8016cd2:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8016cd4:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8016cd6:	b118      	cbz	r0, 8016ce0 <_ZNSt12_Vector_baseI5TopicSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8016cd8:	68a1      	ldr	r1, [r4, #8]
 8016cda:	1a09      	subs	r1, r1, r0
 8016cdc:	f004 ff76 	bl	801bbcc <_ZdlPvj>
      }
 8016ce0:	4620      	mov	r0, r4
 8016ce2:	bd10      	pop	{r4, pc}

08016ce4 <_ZN9PublisherD1Ev>:
struct Publisher {
 8016ce4:	b510      	push	{r4, lr}
 8016ce6:	4604      	mov	r4, r0
      }
 8016ce8:	3014      	adds	r0, #20
 8016cea:	f7ff fff1 	bl	8016cd0 <_ZNSt12_Vector_baseI5TopicSaIS0_EED1Ev>
 8016cee:	f104 0008 	add.w	r0, r4, #8
 8016cf2:	f7ff ffe3 	bl	8016cbc <_ZNSt12_Vector_baseI16PublishInterfaceSaIS0_EED1Ev>
 8016cf6:	4620      	mov	r0, r4
 8016cf8:	bd10      	pop	{r4, pc}

08016cfa <_ZN10PublishersC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016d00:	6142      	str	r2, [r0, #20]
}
 8016d02:	4770      	bx	lr

08016d04 <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8016d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d06:	4604      	mov	r4, r0
 8016d08:	460f      	mov	r7, r1
 8016d0a:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8016d0c:	2600      	movs	r6, #0
      for (; __first != __last; ++__first, (void)++__cur)
 8016d0e:	42bc      	cmp	r4, r7
 8016d10:	4628      	mov	r0, r5
 8016d12:	f105 0520 	add.w	r5, r5, #32
 8016d16:	d100      	bne.n	8016d1a <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x16>
    }
 8016d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d1a:	7823      	ldrb	r3, [r4, #0]

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8016d1c:	4620      	mov	r0, r4
 8016d1e:	f805 3c20 	strb.w	r3, [r5, #-32]
 8016d22:	7863      	ldrb	r3, [r4, #1]
 8016d24:	f805 3c1f 	strb.w	r3, [r5, #-31]
 8016d28:	8863      	ldrh	r3, [r4, #2]
 8016d2a:	f825 3c1e 	strh.w	r3, [r5, #-30]
 8016d2e:	88a3      	ldrh	r3, [r4, #4]
 8016d30:	f825 3c1c 	strh.w	r3, [r5, #-28]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8016d34:	68a3      	ldr	r3, [r4, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8016d36:	60a6      	str	r6, [r4, #8]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8016d38:	f845 3c18 	str.w	r3, [r5, #-24]
 8016d3c:	68e3      	ldr	r3, [r4, #12]
 8016d3e:	f845 3c14 	str.w	r3, [r5, #-20]
	  _M_end_of_storage(__x._M_end_of_storage)
 8016d42:	6923      	ldr	r3, [r4, #16]
 8016d44:	f845 3c10 	str.w	r3, [r5, #-16]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8016d48:	6963      	ldr	r3, [r4, #20]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8016d4a:	6166      	str	r6, [r4, #20]
 8016d4c:	e9c4 6603 	strd	r6, r6, [r4, #12]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8016d50:	f845 3c0c 	str.w	r3, [r5, #-12]
 8016d54:	69a3      	ldr	r3, [r4, #24]
 8016d56:	f845 3c08 	str.w	r3, [r5, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 8016d5a:	69e3      	ldr	r3, [r4, #28]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8016d5c:	e9c4 6606 	strd	r6, r6, [r4, #24]
	  _M_end_of_storage(__x._M_end_of_storage)
 8016d60:	f845 3c04 	str.w	r3, [r5, #-4]
      for (; __first != __last; ++__first, (void)++__cur)
 8016d64:	3420      	adds	r4, #32
 8016d66:	f7ff ffbd 	bl	8016ce4 <_ZN9PublisherD1Ev>
 8016d6a:	e7d0      	b.n	8016d0e <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>

08016d6c <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8016d6c:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8016d6e:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8016d70:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8016d72:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8016d74:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8016d78:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8016d7a:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8016d7c:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8016d7e:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8016d80:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8016d82:	688d      	ldr	r5, [r1, #8]
 8016d84:	6085      	str	r5, [r0, #8]
      }
 8016d86:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8016d88:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8016d8a:	e9c1 3300 	strd	r3, r3, [r1]
 8016d8e:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8016d92:	f7e9 ff39 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      }
 8016d96:	b005      	add	sp, #20
 8016d98:	bd30      	pop	{r4, r5, pc}
	...

08016d9c <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8016d9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016da0:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8016da4:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8016da6:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016daa:	ebaa 0208 	sub.w	r2, sl, r8
 8016dae:	4607      	mov	r7, r0
 8016db0:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 8016db2:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016db6:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 8016dba:	d102      	bne.n	8016dc2 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8016dbc:	481e      	ldr	r0, [pc, #120]	@ (8016e38 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
 8016dbe:	f004 ffdf 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8016dc2:	45c2      	cmp	sl, r8
 8016dc4:	bf14      	ite	ne
 8016dc6:	4622      	movne	r2, r4
 8016dc8:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8016dca:	eba1 0508 	sub.w	r5, r1, r8
 8016dce:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016dd0:	d22e      	bcs.n	8016e30 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016dd2:	b37c      	cbz	r4, 8016e34 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016dd4:	429c      	cmp	r4, r3
 8016dd6:	bf28      	it	cs
 8016dd8:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8016dda:	00a0      	lsls	r0, r4, #2
 8016ddc:	f004 ff1b 	bl	801bc16 <_Znwj>
 8016de0:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016de2:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 8016de6:	2d00      	cmp	r5, #0
 8016de8:	5173      	str	r3, [r6, r5]
 8016dea:	dd04      	ble.n	8016df6 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016dec:	462a      	mov	r2, r5
 8016dee:	4641      	mov	r1, r8
 8016df0:	4630      	mov	r0, r6
 8016df2:	f005 fa47 	bl	801c284 <memmove>
      ptrdiff_t __count = __last - __first;
 8016df6:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 8016dfa:	3504      	adds	r5, #4
      if (__count > 0)
 8016dfc:	f1ba 0f00 	cmp.w	sl, #0
 8016e00:	4435      	add	r5, r6
 8016e02:	dd04      	ble.n	8016e0e <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016e04:	4652      	mov	r2, sl
 8016e06:	4649      	mov	r1, r9
 8016e08:	4628      	mov	r0, r5
 8016e0a:	f005 fb33 	bl	801c474 <memcpy>
      return __result + __count;
 8016e0e:	4455      	add	r5, sl
	if (__p)
 8016e10:	f1b8 0f00 	cmp.w	r8, #0
 8016e14:	d005      	beq.n	8016e22 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 8016e16:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8016e18:	4640      	mov	r0, r8
 8016e1a:	eba1 0108 	sub.w	r1, r1, r8
 8016e1e:	f004 fed5 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8016e22:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016e26:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8016e2a:	60be      	str	r6, [r7, #8]
    }
 8016e2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016e30:	461c      	mov	r4, r3
 8016e32:	e7d2      	b.n	8016dda <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016e34:	4626      	mov	r6, r4
 8016e36:	e7d4      	b.n	8016de2 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8016e38:	0801c592 	.word	0x0801c592

08016e3c <_ZN10Publishers8AddTopicEht>:
bool Publishers::AddTopic(uint8_t ID, uint16_t topic_ID) {
 8016e3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016e40:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 8016e42:	f10d 0203 	add.w	r2, sp, #3
bool Publishers::AddTopic(uint8_t ID, uint16_t topic_ID) {
 8016e46:	4605      	mov	r5, r0
 8016e48:	4688      	mov	r8, r1
	Publisher* publisher = FindPublisher(ID, &success);
 8016e4a:	f7ff fd7d 	bl	8016948 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 8016e4e:	f89d 7003 	ldrb.w	r7, [sp, #3]
	Publisher* publisher = FindPublisher(ID, &success);
 8016e52:	4604      	mov	r4, r0
	if (!success) return false;
 8016e54:	b927      	cbnz	r7, 8016e60 <_ZN10Publishers8AddTopicEht+0x24>
 8016e56:	2700      	movs	r7, #0
}
 8016e58:	4638      	mov	r0, r7
 8016e5a:	b002      	add	sp, #8
 8016e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	FindTopic(ID, topic_ID, &success);
 8016e60:	f10d 0303 	add.w	r3, sp, #3
 8016e64:	4632      	mov	r2, r6
 8016e66:	4641      	mov	r1, r8
 8016e68:	4628      	mov	r0, r5
 8016e6a:	f7ff fe1e 	bl	8016aaa <_ZN10Publishers9FindTopicEhtPb>
	if (success) return false;
 8016e6e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d1ef      	bne.n	8016e56 <_ZN10Publishers8AddTopicEht+0x1a>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016e76:	f04f 31ff 	mov.w	r1, #4294967295
 8016e7a:	6828      	ldr	r0, [r5, #0]
	topic.activated = false;
 8016e7c:	f88d 3004 	strb.w	r3, [sp, #4]
	topic.ID = topic_ID;
 8016e80:	f8ad 6006 	strh.w	r6, [sp, #6]
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016e84:	f7f5 fc86 	bl	800c794 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016e88:	e9d4 1306 	ldrd	r1, r3, [r4, #24]
 8016e8c:	4299      	cmp	r1, r3
 8016e8e:	d007      	beq.n	8016ea0 <_ZN10Publishers8AddTopicEht+0x64>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016e90:	9801      	ldr	r0, [sp, #4]
 8016e92:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
 8016e96:	61a1      	str	r1, [r4, #24]
	osSemaphoreRelease(PublishersSemaphore);
 8016e98:	6828      	ldr	r0, [r5, #0]
 8016e9a:	f7f5 fcaf 	bl	800c7fc <osSemaphoreRelease>
	return true;
 8016e9e:	e7db      	b.n	8016e58 <_ZN10Publishers8AddTopicEht+0x1c>
	  _M_realloc_insert(end(), __x);
 8016ea0:	aa01      	add	r2, sp, #4
 8016ea2:	f104 0014 	add.w	r0, r4, #20
 8016ea6:	f7ff ff79 	bl	8016d9c <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8016eaa:	e7f5      	b.n	8016e98 <_ZN10Publishers8AddTopicEht+0x5c>

08016eac <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8016eac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016eb0:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8016eb4:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8016eb6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016eba:	ebaa 0208 	sub.w	r2, sl, r8
 8016ebe:	4607      	mov	r7, r0
 8016ec0:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 8016ec2:	ebb3 0f62 	cmp.w	r3, r2, asr #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016ec6:	ea4f 0462 	mov.w	r4, r2, asr #1
	if (max_size() - size() < __n)
 8016eca:	d102      	bne.n	8016ed2 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8016ecc:	481e      	ldr	r0, [pc, #120]	@ (8016f48 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
 8016ece:	f004 ff57 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
 8016ed2:	45c2      	cmp	sl, r8
 8016ed4:	bf14      	ite	ne
 8016ed6:	4622      	movne	r2, r4
 8016ed8:	2201      	moveq	r2, #1
 8016eda:	eba1 0508 	sub.w	r5, r1, r8
 8016ede:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016ee0:	d22e      	bcs.n	8016f40 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016ee2:	b37c      	cbz	r4, 8016f44 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016ee4:	429c      	cmp	r4, r3
 8016ee6:	bf28      	it	cs
 8016ee8:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8016eea:	0060      	lsls	r0, r4, #1
 8016eec:	f004 fe93 	bl	801bc16 <_Znwj>
 8016ef0:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016ef2:	f8bb 3000 	ldrh.w	r3, [fp]
      if (__count > 0)
 8016ef6:	2d00      	cmp	r5, #0
 8016ef8:	5373      	strh	r3, [r6, r5]
 8016efa:	dd04      	ble.n	8016f06 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016efc:	462a      	mov	r2, r5
 8016efe:	4641      	mov	r1, r8
 8016f00:	4630      	mov	r0, r6
 8016f02:	f005 f9bf 	bl	801c284 <memmove>
      ptrdiff_t __count = __last - __first;
 8016f06:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 8016f0a:	3502      	adds	r5, #2
      if (__count > 0)
 8016f0c:	f1ba 0f00 	cmp.w	sl, #0
 8016f10:	4435      	add	r5, r6
 8016f12:	dd04      	ble.n	8016f1e <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016f14:	4652      	mov	r2, sl
 8016f16:	4649      	mov	r1, r9
 8016f18:	4628      	mov	r0, r5
 8016f1a:	f005 faab 	bl	801c474 <memcpy>
      return __result + __count;
 8016f1e:	4455      	add	r5, sl
	if (__p)
 8016f20:	f1b8 0f00 	cmp.w	r8, #0
 8016f24:	d005      	beq.n	8016f32 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 8016f26:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8016f28:	4640      	mov	r0, r8
 8016f2a:	eba1 0108 	sub.w	r1, r1, r8
 8016f2e:	f004 fe4d 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8016f32:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016f36:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 8016f3a:	60be      	str	r6, [r7, #8]
    }
 8016f3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016f40:	461c      	mov	r4, r3
 8016f42:	e7d2      	b.n	8016eea <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016f44:	4626      	mov	r6, r4
 8016f46:	e7d4      	b.n	8016ef2 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8016f48:	0801c592 	.word	0x0801c592

08016f4c <_ZN10Publishers15LinkToInterfaceEhh>:
bool Publishers::LinkToInterface(uint8_t ID, uint8_t interface_ID) {
 8016f4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016f50:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 8016f52:	f10d 0203 	add.w	r2, sp, #3
bool Publishers::LinkToInterface(uint8_t ID, uint8_t interface_ID) {
 8016f56:	4605      	mov	r5, r0
 8016f58:	4688      	mov	r8, r1
	Publisher* publisher = FindPublisher(ID, &success);
 8016f5a:	f7ff fcf5 	bl	8016948 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 8016f5e:	f89d 7003 	ldrb.w	r7, [sp, #3]
	Publisher* publisher = FindPublisher(ID, &success);
 8016f62:	4604      	mov	r4, r0
	if (!success) return false;
 8016f64:	b927      	cbnz	r7, 8016f70 <_ZN10Publishers15LinkToInterfaceEhh+0x24>
 8016f66:	2700      	movs	r7, #0
}
 8016f68:	4638      	mov	r0, r7
 8016f6a:	b002      	add	sp, #8
 8016f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	FindPublishInterface(ID, interface_ID, &success);
 8016f70:	f10d 0303 	add.w	r3, sp, #3
 8016f74:	4632      	mov	r2, r6
 8016f76:	4641      	mov	r1, r8
 8016f78:	4628      	mov	r0, r5
 8016f7a:	f7ff fde6 	bl	8016b4a <_ZN10Publishers20FindPublishInterfaceEhhPb>
	if (success) return false;
 8016f7e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d1ef      	bne.n	8016f66 <_ZN10Publishers15LinkToInterfaceEhh+0x1a>
	interface.address = ALL;
 8016f86:	23ff      	movs	r3, #255	@ 0xff
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016f88:	f04f 31ff 	mov.w	r1, #4294967295
 8016f8c:	6828      	ldr	r0, [r5, #0]
	interface.address = ALL;
 8016f8e:	f88d 3005 	strb.w	r3, [sp, #5]
	interface.interface = interface_ID;
 8016f92:	f88d 6004 	strb.w	r6, [sp, #4]
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8016f96:	f7f5 fbfd 	bl	800c794 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016f9a:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 8016f9e:	4299      	cmp	r1, r3
 8016fa0:	d008      	beq.n	8016fb4 <_ZN10Publishers15LinkToInterfaceEhh+0x68>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016fa2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016fa6:	f821 3b02 	strh.w	r3, [r1], #2
	    ++this->_M_impl._M_finish;
 8016faa:	60e1      	str	r1, [r4, #12]
	osSemaphoreRelease(PublishersSemaphore);
 8016fac:	6828      	ldr	r0, [r5, #0]
 8016fae:	f7f5 fc25 	bl	800c7fc <osSemaphoreRelease>
	return true;
 8016fb2:	e7d9      	b.n	8016f68 <_ZN10Publishers15LinkToInterfaceEhh+0x1c>
	  _M_realloc_insert(end(), __x);
 8016fb4:	aa01      	add	r2, sp, #4
 8016fb6:	f104 0008 	add.w	r0, r4, #8
 8016fba:	f7ff ff77 	bl	8016eac <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8016fbe:	e7f5      	b.n	8016fac <_ZN10Publishers15LinkToInterfaceEhh+0x60>

08016fc0 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8016fc0:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8016fc2:	4611      	mov	r1, r2
 8016fc4:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8016fc6:	d105      	bne.n	8016fd4 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x14>
			self->LinkToInterface(input[0], input[1]);
 8016fc8:	7852      	ldrb	r2, [r2, #1]
 8016fca:	7809      	ldrb	r1, [r1, #0]
 8016fcc:	f7ff ffbe 	bl	8016f4c <_ZN10Publishers15LinkToInterfaceEhh>
 8016fd0:	2001      	movs	r0, #1
		}
 8016fd2:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8016fd4:	2000      	movs	r0, #0
 8016fd6:	e7fc      	b.n	8016fd2 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x12>

08016fd8 <_ZNSt6vectorImSaImEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>:
      _M_move_assign(vector&& __x, true_type) noexcept
 8016fd8:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8016fda:	680d      	ldr	r5, [r1, #0]
      _M_move_assign(vector&& __x, true_type) noexcept
 8016fdc:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8016fde:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8016fe0:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8016fe4:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8016fe6:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8016fe8:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8016fea:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8016fec:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8016fee:	688d      	ldr	r5, [r1, #8]
 8016ff0:	6085      	str	r5, [r0, #8]
      }
 8016ff2:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8016ff4:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8016ff6:	e9c1 3300 	strd	r3, r3, [r1]
 8016ffa:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8016ffe:	f7f8 fbee 	bl	800f7de <_ZNSt12_Vector_baseImSaImEED1Ev>
      }
 8017002:	b005      	add	sp, #20
 8017004:	bd30      	pop	{r4, r5, pc}

08017006 <_ZNSt6vectorIaSaIaEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>:
      _M_move_assign(vector&& __x, true_type) noexcept
 8017006:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8017008:	680d      	ldr	r5, [r1, #0]
      _M_move_assign(vector&& __x, true_type) noexcept
 801700a:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 801700c:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 801700e:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8017012:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8017014:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8017016:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8017018:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 801701a:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 801701c:	688d      	ldr	r5, [r1, #8]
 801701e:	6085      	str	r5, [r0, #8]
      }
 8017020:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8017022:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8017024:	e9c1 3300 	strd	r3, r3, [r1]
 8017028:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 801702c:	f7f8 fbf9 	bl	800f822 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
      }
 8017030:	b005      	add	sp, #20
 8017032:	bd30      	pop	{r4, r5, pc}

08017034 <_ZNSt6vectorIfSaIfEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>:
      _M_move_assign(vector&& __x, true_type) noexcept
 8017034:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8017036:	680d      	ldr	r5, [r1, #0]
      _M_move_assign(vector&& __x, true_type) noexcept
 8017038:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 801703a:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 801703c:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8017040:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8017042:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8017044:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8017046:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8017048:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 801704a:	688d      	ldr	r5, [r1, #8]
 801704c:	6085      	str	r5, [r0, #8]
      }
 801704e:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8017050:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8017052:	e9c1 3300 	strd	r3, r3, [r1]
 8017056:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 801705a:	f7eb f909 	bl	8002270 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      }
 801705e:	b005      	add	sp, #20
 8017060:	bd30      	pop	{r4, r5, pc}

08017062 <_ZN9Registers11AddRegisterItEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8017062:	b570      	push	{r4, r5, r6, lr}
 8017064:	4604      	mov	r4, r0
 8017066:	b086      	sub	sp, #24
 8017068:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801706a:	6800      	ldr	r0, [r0, #0]
 801706c:	f04f 31ff 	mov.w	r1, #4294967295
 8017070:	f7f5 fb90 	bl	800c794 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8017074:	f10d 0207 	add.w	r2, sp, #7
 8017078:	4631      	mov	r1, r6
 801707a:	4620      	mov	r0, r4
 801707c:	f001 f94d 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8017080:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8017084:	b125      	cbz	r5, 8017090 <_ZN9Registers11AddRegisterItEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8017086:	6820      	ldr	r0, [r4, #0]
 8017088:	f7f5 fbb8 	bl	800c7fc <osSemaphoreRelease>
}
 801708c:	b006      	add	sp, #24
 801708e:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8017090:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8017094:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8017098:	f7ff fb84 	bl	80167a4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	configuration_.register_info = register_;
 801709c:	2301      	movs	r3, #1
 801709e:	f8ad 600a 	strh.w	r6, [sp, #10]
 80170a2:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 80170a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 80170aa:	f88d 000c 	strb.w	r0, [sp, #12]
 80170ae:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 80170b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d0e5      	beq.n	8017086 <_ZN9Registers11AddRegisterItEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 80170ba:	a902      	add	r1, sp, #8
 80170bc:	1d20      	adds	r0, r4, #4
 80170be:	f7fd febc 	bl	8014e3a <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 80170c2:	e7e0      	b.n	8017086 <_ZN9Registers11AddRegisterItEEbt.isra.0+0x24>

080170c4 <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 80170c4:	b570      	push	{r4, r5, r6, lr}
 80170c6:	4604      	mov	r4, r0
 80170c8:	b086      	sub	sp, #24
 80170ca:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80170cc:	6800      	ldr	r0, [r0, #0]
 80170ce:	f04f 31ff 	mov.w	r1, #4294967295
 80170d2:	f7f5 fb5f 	bl	800c794 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 80170d6:	f10d 0207 	add.w	r2, sp, #7
 80170da:	4631      	mov	r1, r6
 80170dc:	4620      	mov	r0, r4
 80170de:	f001 f91c 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 80170e2:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80170e6:	b125      	cbz	r5, 80170f2 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 80170e8:	6820      	ldr	r0, [r4, #0]
 80170ea:	f7f5 fb87 	bl	800c7fc <osSemaphoreRelease>
}
 80170ee:	b006      	add	sp, #24
 80170f0:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80170f2:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 80170f6:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80170fa:	f7ff fbb5 	bl	8016868 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 80170fe:	2301      	movs	r3, #1
 8017100:	f8ad 600a 	strh.w	r6, [sp, #10]
 8017104:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8017108:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 801710c:	f88d 000c 	strb.w	r0, [sp, #12]
 8017110:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8017114:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8017118:	2b00      	cmp	r3, #0
 801711a:	d0e5      	beq.n	80170e8 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 801711c:	a902      	add	r1, sp, #8
 801711e:	1d20      	adds	r0, r4, #4
 8017120:	f7fd fe8b 	bl	8014e3a <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8017124:	e7e0      	b.n	80170e8 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

08017126 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8017126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801712a:	460d      	mov	r5, r1
 801712c:	b086      	sub	sp, #24
 801712e:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017130:	f04f 31ff 	mov.w	r1, #4294967295
 8017134:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8017136:	461c      	mov	r4, r3
 8017138:	4690      	mov	r8, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801713a:	f7f5 fb2b 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801713e:	4629      	mov	r1, r5
 8017140:	f10d 0207 	add.w	r2, sp, #7
 8017144:	4630      	mov	r0, r6
 8017146:	f001 f8e8 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801714a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801714e:	4605      	mov	r5, r0
	if (!success) {
 8017150:	b92b      	cbnz	r3, 801715e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 8017152:	6830      	ldr	r0, [r6, #0]
 8017154:	f7f5 fb52 	bl	800c7fc <osSemaphoreRelease>
}
 8017158:	b006      	add	sp, #24
 801715a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801715e:	f10d 0007 	add.w	r0, sp, #7
 8017162:	f7ff fb81 	bl	8016868 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8017166:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801716a:	2b00      	cmp	r3, #0
 801716c:	d0f1      	beq.n	8017152 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 801716e:	792b      	ldrb	r3, [r5, #4]
 8017170:	4298      	cmp	r0, r3
 8017172:	d1ee      	bne.n	8017152 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 8017174:	3004      	adds	r0, #4
 8017176:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 801717a:	2f00      	cmp	r7, #0
 801717c:	d0e9      	beq.n	8017152 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801717e:	782b      	ldrb	r3, [r5, #0]
 8017180:	b9db      	cbnz	r3, 80171ba <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x94>
 8017182:	786b      	ldrb	r3, [r5, #1]
 8017184:	b9cb      	cbnz	r3, 80171ba <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x94>
		callback.read = NULL;
 8017186:	9305      	str	r3, [sp, #20]
      size() const _GLIBCXX_NOEXCEPT
 8017188:	aa02      	add	r2, sp, #8
		callback.write = write;
 801718a:	e9cd 8403 	strd	r8, r4, [sp, #12]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801718e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8017192:	1ae3      	subs	r3, r4, r3
 8017194:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8017196:	816b      	strh	r3, [r5, #10]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8017198:	68bb      	ldr	r3, [r7, #8]
 801719a:	429c      	cmp	r4, r3
 801719c:	d008      	beq.n	80171b0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
 801719e:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80171a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 80171a4:	3410      	adds	r4, #16
 80171a6:	607c      	str	r4, [r7, #4]
	target_register->mode.callbacks = true;
 80171a8:	2301      	movs	r3, #1
 80171aa:	706b      	strb	r3, [r5, #1]
	target_register->access.write = true;
 80171ac:	722b      	strb	r3, [r5, #8]
 80171ae:	e7d0      	b.n	8017152 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 80171b0:	4621      	mov	r1, r4
 80171b2:	4638      	mov	r0, r7
 80171b4:	f7f8 f99c 	bl	800f4f0 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 80171b8:	e7f6      	b.n	80171a8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 80171ba:	8969      	ldrh	r1, [r5, #10]
 80171bc:	4638      	mov	r0, r7
 80171be:	f7f8 f84f 	bl	800f260 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 80171c2:	e9c0 8401 	strd	r8, r4, [r0, #4]
 80171c6:	e7ef      	b.n	80171a8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>

080171c8 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80171c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80171cc:	e9d0 8900 	ldrd	r8, r9, [r0]
 80171d0:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 80171d2:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80171d6:	eba9 0208 	sub.w	r2, r9, r8
 80171da:	4607      	mov	r7, r0
 80171dc:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 80171de:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80171e2:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 80171e6:	d102      	bne.n	80171ee <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80171e8:	4820      	ldr	r0, [pc, #128]	@ (801726c <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 80171ea:	f004 fdc9 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
 80171ee:	45c1      	cmp	r9, r8
 80171f0:	bf14      	ite	ne
 80171f2:	4622      	movne	r2, r4
 80171f4:	2201      	moveq	r2, #1
 80171f6:	eba1 0508 	sub.w	r5, r1, r8
 80171fa:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80171fc:	d231      	bcs.n	8017262 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80171fe:	b394      	cbz	r4, 8017266 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017200:	429c      	cmp	r4, r3
 8017202:	bf28      	it	cs
 8017204:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8017206:	0120      	lsls	r0, r4, #4
 8017208:	f004 fd05 	bl	801bc16 <_Znwj>
 801720c:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801720e:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8017212:	2d00      	cmp	r5, #0
 8017214:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8017218:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 801721c:	dd04      	ble.n	8017228 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801721e:	462a      	mov	r2, r5
 8017220:	4641      	mov	r1, r8
 8017222:	4630      	mov	r0, r6
 8017224:	f005 f82e 	bl	801c284 <memmove>
      ptrdiff_t __count = __last - __first;
 8017228:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 801722c:	3510      	adds	r5, #16
      if (__count > 0)
 801722e:	f1b9 0f00 	cmp.w	r9, #0
 8017232:	4435      	add	r5, r6
 8017234:	dd04      	ble.n	8017240 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8017236:	464a      	mov	r2, r9
 8017238:	4651      	mov	r1, sl
 801723a:	4628      	mov	r0, r5
 801723c:	f005 f91a 	bl	801c474 <memcpy>
      return __result + __count;
 8017240:	444d      	add	r5, r9
	if (__p)
 8017242:	f1b8 0f00 	cmp.w	r8, #0
 8017246:	d005      	beq.n	8017254 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 8017248:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801724a:	4640      	mov	r0, r8
 801724c:	eba1 0108 	sub.w	r1, r1, r8
 8017250:	f004 fcbc 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8017254:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8017258:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 801725c:	60be      	str	r6, [r7, #8]
    }
 801725e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017262:	461c      	mov	r4, r3
 8017264:	e7cf      	b.n	8017206 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017266:	4626      	mov	r6, r4
 8017268:	e7d1      	b.n	801720e <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 801726a:	bf00      	nop
 801726c:	0801c592 	.word	0x0801c592

08017270 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8017270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017274:	460c      	mov	r4, r1
 8017276:	b087      	sub	sp, #28
 8017278:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801727a:	f04f 31ff 	mov.w	r1, #4294967295
 801727e:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8017280:	4698      	mov	r8, r3
 8017282:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017284:	f7f5 fa86 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017288:	4621      	mov	r1, r4
 801728a:	f10d 0207 	add.w	r2, sp, #7
 801728e:	4630      	mov	r0, r6
 8017290:	f001 f843 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8017294:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017298:	4604      	mov	r4, r0
	if (!success) {
 801729a:	b92b      	cbnz	r3, 80172a8 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 801729c:	6830      	ldr	r0, [r6, #0]
 801729e:	f7f5 faad 	bl	800c7fc <osSemaphoreRelease>
}
 80172a2:	b007      	add	sp, #28
 80172a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 80172a8:	f10d 0007 	add.w	r0, sp, #7
 80172ac:	f7ff fa7a 	bl	80167a4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	if (!success) {
 80172b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d0f1      	beq.n	801729c <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 80172b8:	7923      	ldrb	r3, [r4, #4]
 80172ba:	4298      	cmp	r0, r3
 80172bc:	d1ee      	bne.n	801729c <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 80172be:	3004      	adds	r0, #4
 80172c0:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 80172c4:	2f00      	cmp	r7, #0
 80172c6:	d0e9      	beq.n	801729c <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 80172c8:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80172ca:	e9d7 3500 	ldrd	r3, r5, [r7]
 80172ce:	1aea      	subs	r2, r5, r3
 80172d0:	1112      	asrs	r2, r2, #4
 80172d2:	b9b1      	cbnz	r1, 8017302 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 80172d4:	7861      	ldrb	r1, [r4, #1]
 80172d6:	b9a1      	cbnz	r1, 8017302 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 80172d8:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80172da:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 80172dc:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 80172de:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80172e0:	42a9      	cmp	r1, r5
		callback.write = write;
 80172e2:	e9cd 9803 	strd	r9, r8, [sp, #12]
 80172e6:	d008      	beq.n	80172fa <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80172e8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80172ea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 80172ee:	3510      	adds	r5, #16
 80172f0:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 80172f2:	2301      	movs	r3, #1
 80172f4:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 80172f6:	7223      	strb	r3, [r4, #8]
 80172f8:	e7d0      	b.n	801729c <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 80172fa:	4638      	mov	r0, r7
 80172fc:	f7ff ff64 	bl	80171c8 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8017300:	e7f7      	b.n	80172f2 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8017302:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 8017304:	4291      	cmp	r1, r2
 8017306:	d302      	bcc.n	801730e <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8017308:	4803      	ldr	r0, [pc, #12]	@ (8017318 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 801730a:	f004 fd3c 	bl	801bd86 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 801730e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8017312:	e9c3 9801 	strd	r9, r8, [r3, #4]
 8017316:	e7ec      	b.n	80172f2 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 8017318:	0801c5c6 	.word	0x0801c5c6

0801731c <_ZN10Publishers12AddRegistersEv>:
void Publishers::AddRegisters(void) {
 801731c:	b510      	push	{r4, lr}
 801731e:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_PUB_SET_STATUS);
 8017320:	2110      	movs	r1, #16
 8017322:	6840      	ldr	r0, [r0, #4]
 8017324:	f7ff fece 	bl	80170c4 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_STATUS, 2);
 8017328:	2202      	movs	r2, #2
 801732a:	2110      	movs	r1, #16
 801732c:	6860      	ldr	r0, [r4, #4]
 801732e:	f001 f849 	bl	80183c4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_SET_STATUS, (void*) this,
 8017332:	4b37      	ldr	r3, [pc, #220]	@ (8017410 <_ZN10Publishers12AddRegistersEv+0xf4>)
 8017334:	4622      	mov	r2, r4
 8017336:	6860      	ldr	r0, [r4, #4]
 8017338:	2110      	movs	r1, #16
 801733a:	f7ff fef4 	bl	8017126 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_PUB_SET_TOPIC_STATUS);
 801733e:	6860      	ldr	r0, [r4, #4]
 8017340:	2111      	movs	r1, #17
 8017342:	f7ff fe8e 	bl	8017062 <_ZN9Registers11AddRegisterItEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_TOPIC_STATUS, 3);
 8017346:	2203      	movs	r2, #3
 8017348:	2111      	movs	r1, #17
 801734a:	6860      	ldr	r0, [r4, #4]
 801734c:	f001 f83a 	bl	80183c4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_PUB_SET_TOPIC_STATUS, (void*) this,
 8017350:	4b30      	ldr	r3, [pc, #192]	@ (8017414 <_ZN10Publishers12AddRegistersEv+0xf8>)
 8017352:	4622      	mov	r2, r4
 8017354:	6860      	ldr	r0, [r4, #4]
 8017356:	2111      	movs	r1, #17
 8017358:	f7ff ff8a 	bl	8017270 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_PUB_SET_PRESCALER);
 801735c:	6860      	ldr	r0, [r4, #4]
 801735e:	2112      	movs	r1, #18
 8017360:	f7ff fe7f 	bl	8017062 <_ZN9Registers11AddRegisterItEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_PRESCALER, 2);
 8017364:	2202      	movs	r2, #2
 8017366:	2112      	movs	r1, #18
 8017368:	6860      	ldr	r0, [r4, #4]
 801736a:	f001 f82b 	bl	80183c4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_PUB_SET_PRESCALER, (void*) this,
 801736e:	4622      	mov	r2, r4
 8017370:	4b29      	ldr	r3, [pc, #164]	@ (8017418 <_ZN10Publishers12AddRegistersEv+0xfc>)
 8017372:	2112      	movs	r1, #18
 8017374:	6860      	ldr	r0, [r4, #4]
 8017376:	f7ff ff7b 	bl	8017270 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_STOP_TOPICS);
 801737a:	6860      	ldr	r0, [r4, #4]
 801737c:	2113      	movs	r1, #19
 801737e:	f7ff fea1 	bl	80170c4 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_PUB_STOP_TOPICS);
 8017382:	2113      	movs	r1, #19
 8017384:	6860      	ldr	r0, [r4, #4]
 8017386:	f001 f801 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_STOP_TOPICS, (void*) this,
 801738a:	4b24      	ldr	r3, [pc, #144]	@ (801741c <_ZN10Publishers12AddRegistersEv+0x100>)
 801738c:	4622      	mov	r2, r4
 801738e:	6860      	ldr	r0, [r4, #4]
 8017390:	2113      	movs	r1, #19
 8017392:	f7ff fec8 	bl	8017126 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_LINK_INTERFACE);
 8017396:	6860      	ldr	r0, [r4, #4]
 8017398:	2114      	movs	r1, #20
 801739a:	f7ff fe93 	bl	80170c4 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_LINK_INTERFACE, 2);
 801739e:	2202      	movs	r2, #2
 80173a0:	2114      	movs	r1, #20
 80173a2:	6860      	ldr	r0, [r4, #4]
 80173a4:	f001 f80e 	bl	80183c4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_LINK_INTERFACE, (void*) this,
 80173a8:	4b1d      	ldr	r3, [pc, #116]	@ (8017420 <_ZN10Publishers12AddRegistersEv+0x104>)
 80173aa:	4622      	mov	r2, r4
 80173ac:	6860      	ldr	r0, [r4, #4]
 80173ae:	2114      	movs	r1, #20
 80173b0:	f7ff feb9 	bl	8017126 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_UNLINK_INTERFACE);
 80173b4:	6860      	ldr	r0, [r4, #4]
 80173b6:	2115      	movs	r1, #21
 80173b8:	f7ff fe84 	bl	80170c4 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_UNLINK_INTERFACE, 2);
 80173bc:	2202      	movs	r2, #2
 80173be:	2115      	movs	r1, #21
 80173c0:	6860      	ldr	r0, [r4, #4]
 80173c2:	f000 ffff 	bl	80183c4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_UNLINK_INTERFACE, (void*) this,
 80173c6:	4622      	mov	r2, r4
 80173c8:	4b16      	ldr	r3, [pc, #88]	@ (8017424 <_ZN10Publishers12AddRegistersEv+0x108>)
 80173ca:	2115      	movs	r1, #21
 80173cc:	6860      	ldr	r0, [r4, #4]
 80173ce:	f7ff feaa 	bl	8017126 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_CLEAR_INTERFACES);
 80173d2:	6860      	ldr	r0, [r4, #4]
 80173d4:	2116      	movs	r1, #22
 80173d6:	f7ff fe75 	bl	80170c4 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_PUB_CLEAR_INTERFACES);
 80173da:	2116      	movs	r1, #22
 80173dc:	6860      	ldr	r0, [r4, #4]
 80173de:	f000 ffd5 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_CLEAR_INTERFACES, (void*) this,
 80173e2:	4b11      	ldr	r3, [pc, #68]	@ (8017428 <_ZN10Publishers12AddRegistersEv+0x10c>)
 80173e4:	4622      	mov	r2, r4
 80173e6:	6860      	ldr	r0, [r4, #4]
 80173e8:	2116      	movs	r1, #22
 80173ea:	f7ff fe9c 	bl	8017126 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_SET_TARGET_ADDRESS);
 80173ee:	6860      	ldr	r0, [r4, #4]
 80173f0:	2117      	movs	r1, #23
 80173f2:	f7ff fe67 	bl	80170c4 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_TARGET_ADDRESS, 3);
 80173f6:	2203      	movs	r2, #3
 80173f8:	2117      	movs	r1, #23
 80173fa:	6860      	ldr	r0, [r4, #4]
 80173fc:	f000 ffe2 	bl	80183c4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_SET_TARGET_ADDRESS, (void*) this,
 8017400:	4622      	mov	r2, r4
 8017402:	6860      	ldr	r0, [r4, #4]
 8017404:	2117      	movs	r1, #23
 8017406:	4b09      	ldr	r3, [pc, #36]	@ (801742c <_ZN10Publishers12AddRegistersEv+0x110>)
}
 8017408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_PUB_SET_TARGET_ADDRESS, (void*) this,
 801740c:	f7ff be8b 	b.w	8017126 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 8017410:	080169c1 	.word	0x080169c1
 8017414:	08016b2b 	.word	0x08016b2b
 8017418:	08016a0d 	.word	0x08016a0d
 801741c:	08016a5f 	.word	0x08016a5f
 8017420:	08016fc1 	.word	0x08016fc1
 8017424:	08016ca5 	.word	0x08016ca5
 8017428:	08016a9f 	.word	0x08016a9f
 801742c:	08016bcb 	.word	0x08016bcb

08017430 <_ZN9PublisherC1ERKS_>:
 8017430:	b570      	push	{r4, r5, r6, lr}
 8017432:	680a      	ldr	r2, [r1, #0]
 8017434:	4604      	mov	r4, r0
 8017436:	888b      	ldrh	r3, [r1, #4]
 8017438:	460d      	mov	r5, r1
 801743a:	6002      	str	r2, [r0, #0]
 801743c:	8083      	strh	r3, [r0, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801743e:	2300      	movs	r3, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017440:	e9d1 2602 	ldrd	r2, r6, [r1, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017444:	e9c0 3302 	strd	r3, r3, [r0, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017448:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 801744a:	6103      	str	r3, [r0, #16]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801744c:	d03c      	beq.n	80174c8 <_ZN9PublisherC1ERKS_+0x98>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801744e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017452:	429e      	cmp	r6, r3
 8017454:	d301      	bcc.n	801745a <_ZN9PublisherC1ERKS_+0x2a>
	      std::__throw_bad_array_new_length();
 8017456:	f004 fc90 	bl	801bd7a <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801745a:	4630      	mov	r0, r6
 801745c:	f004 fbdb 	bl	801bc16 <_Znwj>
 8017460:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017462:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8017464:	e9c4 3302 	strd	r3, r3, [r4, #8]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017468:	6126      	str	r6, [r4, #16]
      : _M_current(__i) { }
 801746a:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
	  if (_Num)
 801746e:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 8017470:	eba2 0601 	sub.w	r6, r2, r1
	  if (_Num)
 8017474:	d004      	beq.n	8017480 <_ZN9PublisherC1ERKS_+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8017476:	4618      	mov	r0, r3
 8017478:	4632      	mov	r2, r6
 801747a:	f004 ff03 	bl	801c284 <memmove>
 801747e:	4603      	mov	r3, r0
	  return __result + _Num;
 8017480:	4433      	add	r3, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017482:	e9d5 2605 	ldrd	r2, r6, [r5, #20]
	this->_M_impl._M_finish =
 8017486:	60e3      	str	r3, [r4, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017488:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801748a:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 801748c:	61e3      	str	r3, [r4, #28]
 801748e:	e9c4 3305 	strd	r3, r3, [r4, #20]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017492:	d01b      	beq.n	80174cc <_ZN9PublisherC1ERKS_+0x9c>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8017494:	4b0e      	ldr	r3, [pc, #56]	@ (80174d0 <_ZN9PublisherC1ERKS_+0xa0>)
 8017496:	429e      	cmp	r6, r3
 8017498:	d8dd      	bhi.n	8017456 <_ZN9PublisherC1ERKS_+0x26>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801749a:	4630      	mov	r0, r6
 801749c:	f004 fbbb 	bl	801bc16 <_Znwj>
 80174a0:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80174a2:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80174a4:	e9c4 3305 	strd	r3, r3, [r4, #20]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80174a8:	61e6      	str	r6, [r4, #28]
 80174aa:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
	  if (_Num)
 80174ae:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 80174b0:	eba2 0501 	sub.w	r5, r2, r1
	  if (_Num)
 80174b4:	d004      	beq.n	80174c0 <_ZN9PublisherC1ERKS_+0x90>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80174b6:	4618      	mov	r0, r3
 80174b8:	462a      	mov	r2, r5
 80174ba:	f004 fee3 	bl	801c284 <memmove>
 80174be:	4603      	mov	r3, r0
	  return __result + _Num;
 80174c0:	442b      	add	r3, r5
 80174c2:	4620      	mov	r0, r4
	this->_M_impl._M_finish =
 80174c4:	61a3      	str	r3, [r4, #24]
 80174c6:	bd70      	pop	{r4, r5, r6, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80174c8:	4633      	mov	r3, r6
 80174ca:	e7ca      	b.n	8017462 <_ZN9PublisherC1ERKS_+0x32>
 80174cc:	4633      	mov	r3, r6
 80174ce:	e7e8      	b.n	80174a2 <_ZN9PublisherC1ERKS_+0x72>
 80174d0:	7ffffffc 	.word	0x7ffffffc

080174d4 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80174d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80174d8:	e9d0 7900 	ldrd	r7, r9, [r0]
 80174dc:	4692      	mov	sl, r2
	if (max_size() - size() < __n)
 80174de:	f06f 437c 	mvn.w	r3, #4227858432	@ 0xfc000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80174e2:	eba9 0207 	sub.w	r2, r9, r7
 80174e6:	4606      	mov	r6, r0
 80174e8:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
 80174ea:	ebb3 1f62 	cmp.w	r3, r2, asr #5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80174ee:	ea4f 1462 	mov.w	r4, r2, asr #5
	if (max_size() - size() < __n)
 80174f2:	d102      	bne.n	80174fa <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80174f4:	481a      	ldr	r0, [pc, #104]	@ (8017560 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>)
 80174f6:	f004 fc43 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 80174fa:	45b9      	cmp	r9, r7
 80174fc:	bf14      	ite	ne
 80174fe:	4622      	movne	r2, r4
 8017500:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8017502:	eba1 0b07 	sub.w	fp, r1, r7
 8017506:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017508:	d225      	bcs.n	8017556 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801750a:	b334      	cbz	r4, 801755a <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801750c:	429c      	cmp	r4, r3
 801750e:	bf28      	it	cs
 8017510:	461c      	movcs	r4, r3
 8017512:	0160      	lsls	r0, r4, #5
 8017514:	f004 fb7f 	bl	801bc16 <_Znwj>
 8017518:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801751a:	4651      	mov	r1, sl
 801751c:	eb05 000b 	add.w	r0, r5, fp
 8017520:	f7ff ff86 	bl	8017430 <_ZN9PublisherC1ERKS_>
      return std::__relocate_a_1(std::__niter_base(__first),
 8017524:	4641      	mov	r1, r8
 8017526:	462a      	mov	r2, r5
 8017528:	4638      	mov	r0, r7
 801752a:	f7ff fbeb 	bl	8016d04 <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 801752e:	4649      	mov	r1, r9
 8017530:	f100 0220 	add.w	r2, r0, #32
 8017534:	4640      	mov	r0, r8
 8017536:	f7ff fbe5 	bl	8016d04 <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 801753a:	4680      	mov	r8, r0
	if (__p)
 801753c:	b127      	cbz	r7, 8017548 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
		    this->_M_impl._M_end_of_storage - __old_start);
 801753e:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8017540:	4638      	mov	r0, r7
 8017542:	1bc9      	subs	r1, r1, r7
 8017544:	f004 fb42 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8017548:	eb05 1444 	add.w	r4, r5, r4, lsl #5
      this->_M_impl._M_finish = __new_finish;
 801754c:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8017550:	60b4      	str	r4, [r6, #8]
    }
 8017552:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017556:	461c      	mov	r4, r3
 8017558:	e7db      	b.n	8017512 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801755a:	4625      	mov	r5, r4
 801755c:	e7dd      	b.n	801751a <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 801755e:	bf00      	nop
 8017560:	0801c592 	.word	0x0801c592

08017564 <_ZN10Publishers12AddPublisherEh>:
bool Publishers::AddPublisher(uint8_t ID) {
 8017564:	b530      	push	{r4, r5, lr}
 8017566:	b08b      	sub	sp, #44	@ 0x2c
 8017568:	4604      	mov	r4, r0
 801756a:	460d      	mov	r5, r1
	FindPublisher(ID, &success);
 801756c:	f10d 0207 	add.w	r2, sp, #7
 8017570:	f7ff f9ea 	bl	8016948 <_ZN10Publishers13FindPublisherEhPb>
	if (success)
 8017574:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017578:	bb6b      	cbnz	r3, 80175d6 <_ZN10Publishers12AddPublisherEh+0x72>
	publisher.prescaler = 1;
 801757a:	2201      	movs	r2, #1
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801757c:	f04f 31ff 	mov.w	r1, #4294967295
 8017580:	6820      	ldr	r0, [r4, #0]
	publisher.activated = false;
 8017582:	f88d 3009 	strb.w	r3, [sp, #9]
	publisher.counter = 0;
 8017586:	f8ad 300c 	strh.w	r3, [sp, #12]
	publisher.ID = ID;
 801758a:	f88d 5008 	strb.w	r5, [sp, #8]
	publisher.prescaler = 1;
 801758e:	f8ad 200a 	strh.w	r2, [sp, #10]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017592:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8017596:	e9cd 3306 	strd	r3, r3, [sp, #24]
 801759a:	e9cd 3308 	strd	r3, r3, [sp, #32]
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801759e:	f7f5 f8f9 	bl	800c794 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80175a2:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
 80175a6:	4298      	cmp	r0, r3
 80175a8:	d00e      	beq.n	80175c8 <_ZN10Publishers12AddPublisherEh+0x64>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80175aa:	a902      	add	r1, sp, #8
 80175ac:	f7ff ff40 	bl	8017430 <_ZN9PublisherC1ERKS_>
	    ++this->_M_impl._M_finish;
 80175b0:	6923      	ldr	r3, [r4, #16]
 80175b2:	3320      	adds	r3, #32
 80175b4:	6123      	str	r3, [r4, #16]
	osSemaphoreRelease(PublishersSemaphore);
 80175b6:	6820      	ldr	r0, [r4, #0]
 80175b8:	f7f5 f920 	bl	800c7fc <osSemaphoreRelease>
}
 80175bc:	a802      	add	r0, sp, #8
 80175be:	f7ff fb91 	bl	8016ce4 <_ZN9PublisherD1Ev>
	return true;
 80175c2:	2001      	movs	r0, #1
}
 80175c4:	b00b      	add	sp, #44	@ 0x2c
 80175c6:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 80175c8:	4601      	mov	r1, r0
 80175ca:	aa02      	add	r2, sp, #8
 80175cc:	f104 000c 	add.w	r0, r4, #12
 80175d0:	f7ff ff80 	bl	80174d4 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 80175d4:	e7ef      	b.n	80175b6 <_ZN10Publishers12AddPublisherEh+0x52>
		return false;
 80175d6:	2000      	movs	r0, #0
 80175d8:	e7f4      	b.n	80175c4 <_ZN10Publishers12AddPublisherEh+0x60>

080175da <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0>:
      if (std::__addressof(__x) != this)
 80175da:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
 80175dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175e0:	4604      	mov	r4, r0
 80175e2:	460d      	mov	r5, r1
      if (std::__addressof(__x) != this)
 80175e4:	d01d      	beq.n	8017622 <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x48>
			 - this->_M_impl._M_start); }
 80175e6:	6802      	ldr	r2, [r0, #0]
 80175e8:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80175ea:	e9d1 7800 	ldrd	r7, r8, [r1]
			 - this->_M_impl._M_start); }
 80175ee:	1a9b      	subs	r3, r3, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80175f0:	eba8 0607 	sub.w	r6, r8, r7
	  if (__xlen > capacity())
 80175f4:	429e      	cmp	r6, r3
 80175f6:	d916      	bls.n	8017626 <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x4c>
	  pointer __result = this->_M_allocate(__n);
 80175f8:	4630      	mov	r0, r6
 80175fa:	f7ff f8c8 	bl	801678e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 80175fe:	4641      	mov	r1, r8
 8017600:	4602      	mov	r2, r0
 8017602:	4605      	mov	r5, r0
 8017604:	4638      	mov	r0, r7
 8017606:	f7e9 fbed 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801760a:	6820      	ldr	r0, [r4, #0]
	if (__p)
 801760c:	b118      	cbz	r0, 8017616 <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x3c>
			    - this->_M_impl._M_start);
 801760e:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8017610:	1a09      	subs	r1, r1, r0
 8017612:	f004 fadb 	bl	801bbcc <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 8017616:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8017618:	4435      	add	r5, r6
 801761a:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 801761c:	6823      	ldr	r3, [r4, #0]
 801761e:	4433      	add	r3, r6
 8017620:	6063      	str	r3, [r4, #4]
    }
 8017622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017626:	6843      	ldr	r3, [r0, #4]
 8017628:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
 801762a:	429e      	cmp	r6, r3
 801762c:	d804      	bhi.n	8017638 <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x5e>
 801762e:	4641      	mov	r1, r8
 8017630:	4638      	mov	r0, r7
 8017632:	f7e9 fbd7 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      return std::uninitialized_copy(__first, __last, __result);
 8017636:	e7f1      	b.n	801761c <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x42>
 8017638:	18f9      	adds	r1, r7, r3
 801763a:	4638      	mov	r0, r7
 801763c:	f7e9 fbd2 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8017640:	e9d4 0200 	ldrd	r0, r2, [r4]
 8017644:	e9d5 3100 	ldrd	r3, r1, [r5]
 8017648:	1a10      	subs	r0, r2, r0
 801764a:	4418      	add	r0, r3
 801764c:	e7f1      	b.n	8017632 <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0+0x58>
	...

08017650 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb>:
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 8017650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017654:	4680      	mov	r8, r0
 8017656:	b0c5      	sub	sp, #276	@ 0x114
 8017658:	468a      	mov	sl, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801765a:	6800      	ldr	r0, [r0, #0]
 801765c:	f04f 31ff 	mov.w	r1, #4294967295
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 8017660:	9300      	str	r3, [sp, #0]
 8017662:	4616      	mov	r6, r2
 8017664:	f89d b138 	ldrb.w	fp, [sp, #312]	@ 0x138
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017668:	f7f5 f894 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801766c:	f10d 020f 	add.w	r2, sp, #15
 8017670:	4651      	mov	r1, sl
 8017672:	4640      	mov	r0, r8
 8017674:	f000 fe51 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8017678:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801767c:	4605      	mov	r5, r0
	if (!success) {
 801767e:	b943      	cbnz	r3, 8017692 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x42>
		return false;
 8017680:	2400      	movs	r4, #0
		osSemaphoreRelease(RegistersSemaphore);
 8017682:	f8d8 0000 	ldr.w	r0, [r8]
 8017686:	f7f5 f8b9 	bl	800c7fc <osSemaphoreRelease>
}
 801768a:	4620      	mov	r0, r4
 801768c:	b045      	add	sp, #276	@ 0x114
 801768e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8017692:	497b      	ldr	r1, [pc, #492]	@ (8017880 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x230>)
 8017694:	487b      	ldr	r0, [pc, #492]	@ (8017884 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x234>)
 8017696:	f004 fb55 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801769a:	4604      	mov	r4, r0
 801769c:	2800      	cmp	r0, #0
 801769e:	d15d      	bne.n	801775c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x10c>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80176a0:	4979      	ldr	r1, [pc, #484]	@ (8017888 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x238>)
 80176a2:	4878      	ldr	r0, [pc, #480]	@ (8017884 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x234>)
 80176a4:	f004 fb4e 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80176a8:	4604      	mov	r4, r0
 80176aa:	2800      	cmp	r0, #0
 80176ac:	d158      	bne.n	8017760 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x110>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80176ae:	4977      	ldr	r1, [pc, #476]	@ (801788c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x23c>)
 80176b0:	4874      	ldr	r0, [pc, #464]	@ (8017884 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x234>)
 80176b2:	f004 fb47 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80176b6:	4604      	mov	r4, r0
 80176b8:	2800      	cmp	r0, #0
 80176ba:	d153      	bne.n	8017764 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x114>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80176bc:	4974      	ldr	r1, [pc, #464]	@ (8017890 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x240>)
 80176be:	4871      	ldr	r0, [pc, #452]	@ (8017884 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x234>)
 80176c0:	f004 fb40 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80176c4:	4604      	mov	r4, r0
 80176c6:	2800      	cmp	r0, #0
 80176c8:	d14e      	bne.n	8017768 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x118>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80176ca:	496e      	ldr	r1, [pc, #440]	@ (8017884 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x234>)
 80176cc:	4608      	mov	r0, r1
 80176ce:	f004 fb39 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80176d2:	4604      	mov	r4, r0
 80176d4:	2800      	cmp	r0, #0
 80176d6:	d149      	bne.n	801776c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x11c>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80176d8:	496e      	ldr	r1, [pc, #440]	@ (8017894 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x244>)
 80176da:	486a      	ldr	r0, [pc, #424]	@ (8017884 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x234>)
 80176dc:	f004 fb32 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80176e0:	4604      	mov	r4, r0
 80176e2:	2800      	cmp	r0, #0
 80176e4:	d144      	bne.n	8017770 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x120>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80176e6:	496c      	ldr	r1, [pc, #432]	@ (8017898 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x248>)
 80176e8:	4866      	ldr	r0, [pc, #408]	@ (8017884 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x234>)
 80176ea:	f004 fb2b 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80176ee:	4604      	mov	r4, r0
 80176f0:	2800      	cmp	r0, #0
 80176f2:	d13f      	bne.n	8017774 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x124>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80176f4:	4969      	ldr	r1, [pc, #420]	@ (801789c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x24c>)
 80176f6:	4863      	ldr	r0, [pc, #396]	@ (8017884 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x234>)
 80176f8:	f004 fb24 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80176fc:	4604      	mov	r4, r0
 80176fe:	2800      	cmp	r0, #0
 8017700:	d13a      	bne.n	8017778 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x128>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8017702:	4967      	ldr	r1, [pc, #412]	@ (80178a0 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x250>)
 8017704:	485f      	ldr	r0, [pc, #380]	@ (8017884 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x234>)
 8017706:	f004 fb1d 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801770a:	4604      	mov	r4, r0
 801770c:	2800      	cmp	r0, #0
 801770e:	d135      	bne.n	801777c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x12c>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8017710:	4964      	ldr	r1, [pc, #400]	@ (80178a4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x254>)
 8017712:	485c      	ldr	r0, [pc, #368]	@ (8017884 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x234>)
 8017714:	f004 fb16 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8017718:	1e04      	subs	r4, r0, #0
 801771a:	bf14      	ite	ne
 801771c:	2309      	movne	r3, #9
 801771e:	2300      	moveq	r3, #0
 8017720:	f88d 400f 	strb.w	r4, [sp, #15]
	if (!success) {
 8017724:	2c00      	cmp	r4, #0
 8017726:	d0ab      	beq.n	8017680 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x30>
	if (target_register->register_info.type != registered_type) {
 8017728:	792a      	ldrb	r2, [r5, #4]
 801772a:	429a      	cmp	r2, r3
 801772c:	d1a8      	bne.n	8017680 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x30>
	if (callbacks[target_register->register_info.type] == NULL) {
 801772e:	3304      	adds	r3, #4
 8017730:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d0a3      	beq.n	8017680 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x30>
	if (target_register->access.read) {
 8017738:	7a6a      	ldrb	r2, [r5, #9]
 801773a:	2a00      	cmp	r2, #0
 801773c:	d06a      	beq.n	8017814 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1c4>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801773e:	8969      	ldrh	r1, [r5, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 8017740:	2200      	movs	r2, #0
 8017742:	e9d3 0300 	ldrd	r0, r3, [r3]
 8017746:	f88d 200f 	strb.w	r2, [sp, #15]
 801774a:	1a1b      	subs	r3, r3, r0
	if (__n >= this->size())
 801774c:	ebb1 1f23 	cmp.w	r1, r3, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017750:	ea4f 1223 	mov.w	r2, r3, asr #4
	if (__n >= this->size())
 8017754:	d314      	bcc.n	8017780 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x130>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8017756:	4854      	ldr	r0, [pc, #336]	@ (80178a8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x258>)
 8017758:	f004 fb15 	bl	801bd86 <_ZSt24__throw_out_of_range_fmtPKcz>
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801775c:	2300      	movs	r3, #0
 801775e:	e7df      	b.n	8017720 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xd0>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8017760:	2301      	movs	r3, #1
 8017762:	e7dd      	b.n	8017720 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xd0>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8017764:	2302      	movs	r3, #2
 8017766:	e7db      	b.n	8017720 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xd0>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8017768:	2303      	movs	r3, #3
 801776a:	e7d9      	b.n	8017720 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xd0>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801776c:	2304      	movs	r3, #4
 801776e:	e7d7      	b.n	8017720 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xd0>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8017770:	2305      	movs	r3, #5
 8017772:	e7d5      	b.n	8017720 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xd0>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8017774:	2306      	movs	r3, #6
 8017776:	e7d3      	b.n	8017720 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xd0>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8017778:	2307      	movs	r3, #7
 801777a:	e7d1      	b.n	8017720 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xd0>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801777c:	2308      	movs	r3, #8
 801777e:	e7cf      	b.n	8017720 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xd0>
	return *(this->_M_impl._M_start + __n);
 8017780:	010b      	lsls	r3, r1, #4
 8017782:	eb00 1101 	add.w	r1, r0, r1, lsl #4
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8017786:	f850 9003 	ldr.w	r9, [r0, r3]
 801778a:	684b      	ldr	r3, [r1, #4]
 801778c:	9301      	str	r3, [sp, #4]
 801778e:	68cb      	ldr	r3, [r1, #12]
 8017790:	461f      	mov	r7, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8017792:	f1bb 0f00 	cmp.w	fp, #0
 8017796:	d006      	beq.n	80177a6 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x156>
 8017798:	68eb      	ldr	r3, [r5, #12]
 801779a:	b123      	cbz	r3, 80177a6 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x156>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 801779c:	f04f 31ff 	mov.w	r1, #4294967295
 80177a0:	6818      	ldr	r0, [r3, #0]
 80177a2:	f7f4 fff7 	bl	800c794 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 80177a6:	786b      	ldrb	r3, [r5, #1]
 80177a8:	b1c3      	cbz	r3, 80177dc <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x18c>
			if (output != NULL) {
 80177aa:	2e00      	cmp	r6, #0
 80177ac:	d037      	beq.n	801781e <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1ce>
				*callback_output = output;
 80177ae:	4632      	mov	r2, r6
 80177b0:	2300      	movs	r3, #0
 80177b2:	601a      	str	r2, [r3, #0]
			if (callbacks.read != NULL) {
 80177b4:	b197      	cbz	r7, 80177dc <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x18c>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 80177b6:	9b00      	ldr	r3, [sp, #0]
 80177b8:	2200      	movs	r2, #0
 80177ba:	4651      	mov	r1, sl
 80177bc:	9801      	ldr	r0, [sp, #4]
 80177be:	47b8      	blx	r7
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 80177c0:	796b      	ldrb	r3, [r5, #5]
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 80177c2:	f88d 000f 	strb.w	r0, [sp, #15]
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 80177c6:	b363      	cbz	r3, 8017822 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1d2>
 80177c8:	88eb      	ldrh	r3, [r5, #6]
 80177ca:	b10b      	cbz	r3, 80177d0 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x180>
					*length = 1;
 80177cc:	9a00      	ldr	r2, [sp, #0]
 80177ce:	8013      	strh	r3, [r2, #0]
				if (*callback_output != output && output != NULL) {
 80177d0:	2300      	movs	r3, #0
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	42b3      	cmp	r3, r6
 80177d6:	d001      	beq.n	80177dc <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x18c>
 80177d8:	2e00      	cmp	r6, #0
 80177da:	d130      	bne.n	801783e <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1ee>
		if (not success && target_register->mode.pointer) {
 80177dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80177e0:	b983      	cbnz	r3, 8017804 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1b4>
 80177e2:	782b      	ldrb	r3, [r5, #0]
 80177e4:	b173      	cbz	r3, 8017804 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1b4>
			success = true;
 80177e6:	2301      	movs	r3, #1
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 80177e8:	796a      	ldrb	r2, [r5, #5]
			success = true;
 80177ea:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 80177ee:	2a00      	cmp	r2, #0
 80177f0:	d03d      	beq.n	801786e <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x21e>
 80177f2:	88e9      	ldrh	r1, [r5, #6]
 80177f4:	2900      	cmp	r1, #0
 80177f6:	d130      	bne.n	801785a <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x20a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80177f8:	e9d9 2300 	ldrd	r2, r3, [r9]
 80177fc:	1a9b      	subs	r3, r3, r2
				*length = register_vector->size();
 80177fe:	9a00      	ldr	r2, [sp, #0]
 8017800:	8013      	strh	r3, [r2, #0]
				if (output != NULL) {
 8017802:	bb26      	cbnz	r6, 801784e <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1fe>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8017804:	f1bb 0f00 	cmp.w	fp, #0
 8017808:	d004      	beq.n	8017814 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1c4>
 801780a:	68eb      	ldr	r3, [r5, #12]
 801780c:	b113      	cbz	r3, 8017814 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1c4>
			osSemaphoreRelease(*(target_register->register_semaphore));
 801780e:	6818      	ldr	r0, [r3, #0]
 8017810:	f7f4 fff4 	bl	800c7fc <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 8017814:	f8d8 0000 	ldr.w	r0, [r8]
 8017818:	f7f4 fff0 	bl	800c7fc <osSemaphoreRelease>
	return true;
 801781c:	e735      	b.n	801768a <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x3a>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 801781e:	aa04      	add	r2, sp, #16
 8017820:	e7c6      	b.n	80177b0 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x160>
					*length = 1;
 8017822:	2301      	movs	r3, #1
 8017824:	e7d2      	b.n	80177cc <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x17c>
						output[index] = (*callback_output )[index];
 8017826:	2300      	movs	r3, #0
 8017828:	b291      	uxth	r1, r2
 801782a:	3201      	adds	r2, #1
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	5c5b      	ldrb	r3, [r3, r1]
 8017830:	5473      	strb	r3, [r6, r1]
					for (uint16_t index = 0; index < *length; index++) {
 8017832:	9b00      	ldr	r3, [sp, #0]
 8017834:	8819      	ldrh	r1, [r3, #0]
 8017836:	b293      	uxth	r3, r2
 8017838:	4299      	cmp	r1, r3
 801783a:	d8f4      	bhi.n	8017826 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1d6>
 801783c:	e7ce      	b.n	80177dc <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x18c>
 801783e:	2200      	movs	r2, #0
 8017840:	e7f7      	b.n	8017832 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1e2>
 8017842:	b28b      	uxth	r3, r1
						output[index] = (*register_vector)[index];
 8017844:	f8d9 2000 	ldr.w	r2, [r9]
 8017848:	3101      	adds	r1, #1
 801784a:	56d2      	ldrsb	r2, [r2, r3]
 801784c:	54f2      	strb	r2, [r6, r3]
					for (uint16_t index = 0; index < *length; index++) {
 801784e:	9b00      	ldr	r3, [sp, #0]
 8017850:	881a      	ldrh	r2, [r3, #0]
 8017852:	b28b      	uxth	r3, r1
 8017854:	429a      	cmp	r2, r3
 8017856:	d8f4      	bhi.n	8017842 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1f2>
 8017858:	e7d4      	b.n	8017804 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1b4>
				*length = target_register->register_info.length;
 801785a:	9b00      	ldr	r3, [sp, #0]
 801785c:	8019      	strh	r1, [r3, #0]
				if (output != NULL) {
 801785e:	2e00      	cmp	r6, #0
 8017860:	d0d0      	beq.n	8017804 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1b4>
 8017862:	4632      	mov	r2, r6
 8017864:	4449      	add	r1, r9
 8017866:	4648      	mov	r0, r9
 8017868:	f7fb f834 	bl	80128d4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801786c:	e7ca      	b.n	8017804 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1b4>
				*length = 1;
 801786e:	9a00      	ldr	r2, [sp, #0]
 8017870:	8013      	strh	r3, [r2, #0]
				if (output != NULL) {
 8017872:	2e00      	cmp	r6, #0
 8017874:	d0c6      	beq.n	8017804 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1b4>
					*output = *callbacks.pointer;
 8017876:	f999 3000 	ldrsb.w	r3, [r9]
 801787a:	7033      	strb	r3, [r6, #0]
 801787c:	e7c2      	b.n	8017804 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1b4>
 801787e:	bf00      	nop
 8017880:	0801ca50 	.word	0x0801ca50
 8017884:	0801ca58 	.word	0x0801ca58
 8017888:	0801ca40 	.word	0x0801ca40
 801788c:	0801ca30 	.word	0x0801ca30
 8017890:	0801ca20 	.word	0x0801ca20
 8017894:	0801ca48 	.word	0x0801ca48
 8017898:	0801ca38 	.word	0x0801ca38
 801789c:	0801ca28 	.word	0x0801ca28
 80178a0:	0801ca18 	.word	0x0801ca18
 80178a4:	0801ca10 	.word	0x0801ca10
 80178a8:	0801c5c6 	.word	0x0801c5c6

080178ac <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>:
	if (__first != __last)
 80178ac:	429a      	cmp	r2, r3
	insert(const_iterator __position, _InputIterator __first,
 80178ae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178b2:	4604      	mov	r4, r0
 80178b4:	460d      	mov	r5, r1
 80178b6:	4617      	mov	r7, r2
 80178b8:	4699      	mov	r9, r3
 80178ba:	d022      	beq.n	8017902 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x56>
 80178bc:	eba3 0802 	sub.w	r8, r3, r2
      : _M_current(__i) { }
 80178c0:	f8d0 a000 	ldr.w	sl, [r0]
			  - this->_M_impl._M_finish) >= __n)
 80178c4:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
 80178c8:	1b9b      	subs	r3, r3, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 80178ca:	4598      	cmp	r8, r3
 80178cc:	d831      	bhi.n	8017932 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x86>
    { return __lhs.base() - __rhs.base(); }
 80178ce:	eba6 0a01 	sub.w	sl, r6, r1
		if (__elems_after > __n)
 80178d2:	45d0      	cmp	r8, sl
 80178d4:	d217      	bcs.n	8017906 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x5a>
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 80178d6:	eba6 0a08 	sub.w	sl, r6, r8
			      _Category>::__copy_m(__first, __last, __result);
 80178da:	4632      	mov	r2, r6
 80178dc:	4631      	mov	r1, r6
 80178de:	4650      	mov	r0, sl
 80178e0:	f7ea faf8 	bl	8001ed4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n;
 80178e4:	6863      	ldr	r3, [r4, #4]
	  if (_Num)
 80178e6:	ebba 0205 	subs.w	r2, sl, r5
 80178ea:	4443      	add	r3, r8
 80178ec:	6063      	str	r3, [r4, #4]
 80178ee:	d003      	beq.n	80178f8 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x4c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80178f0:	4629      	mov	r1, r5
 80178f2:	1ab0      	subs	r0, r6, r2
 80178f4:	f004 fcc6 	bl	801c284 <memmove>
			      _Category>::__copy_m(__first, __last, __result);
 80178f8:	462a      	mov	r2, r5
 80178fa:	4649      	mov	r1, r9
 80178fc:	4638      	mov	r0, r7
 80178fe:	f7e9 fa71 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	}
 8017902:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { _M_current += __n; return *this; }
 8017906:	eb02 0b0a 	add.w	fp, r2, sl
 801790a:	4649      	mov	r1, r9
 801790c:	4632      	mov	r2, r6
		    this->_M_impl._M_finish += __n - __elems_after;
 801790e:	eba8 080a 	sub.w	r8, r8, sl
 8017912:	4658      	mov	r0, fp
 8017914:	f7e9 fa66 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8017918:	6862      	ldr	r2, [r4, #4]
 801791a:	4631      	mov	r1, r6
 801791c:	4628      	mov	r0, r5
 801791e:	4442      	add	r2, r8
 8017920:	6062      	str	r2, [r4, #4]
 8017922:	f7ea fad7 	bl	8001ed4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __elems_after;
 8017926:	6863      	ldr	r3, [r4, #4]
 8017928:	462a      	mov	r2, r5
 801792a:	4659      	mov	r1, fp
 801792c:	4453      	add	r3, sl
 801792e:	6063      	str	r3, [r4, #4]
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8017930:	e7e4      	b.n	80178fc <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x50>
		  _M_check_len(__n, "vector::_M_range_insert");
 8017932:	4641      	mov	r1, r8
 8017934:	4a12      	ldr	r2, [pc, #72]	@ (8017980 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0xd4>)
 8017936:	f7e9 f988 	bl	8000c4a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 801793a:	4683      	mov	fp, r0
		pointer __new_start(this->_M_allocate(__len));
 801793c:	f7fe ff27 	bl	801678e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 8017940:	4629      	mov	r1, r5
 8017942:	4602      	mov	r2, r0
 8017944:	4680      	mov	r8, r0
 8017946:	4650      	mov	r0, sl
 8017948:	f7ea fac4 	bl	8001ed4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 801794c:	4649      	mov	r1, r9
 801794e:	4602      	mov	r2, r0
 8017950:	4638      	mov	r0, r7
 8017952:	f7e9 fa47 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8017956:	4631      	mov	r1, r6
 8017958:	4602      	mov	r2, r0
 801795a:	4628      	mov	r0, r5
 801795c:	f7ea faba 	bl	8001ed4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8017960:	4605      	mov	r5, r0
	if (__p)
 8017962:	f1ba 0f00 	cmp.w	sl, #0
 8017966:	d005      	beq.n	8017974 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0xc8>
			      this->_M_impl._M_end_of_storage - __old_start);
 8017968:	68a1      	ldr	r1, [r4, #8]
 801796a:	4650      	mov	r0, sl
 801796c:	eba1 010a 	sub.w	r1, r1, sl
 8017970:	f004 f92c 	bl	801bbcc <_ZdlPvj>
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8017974:	eb08 000b 	add.w	r0, r8, fp
		this->_M_impl._M_finish = __new_finish;
 8017978:	e9c4 8500 	strd	r8, r5, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 801797c:	60a0      	str	r0, [r4, #8]
	  return begin() + __offset;
 801797e:	e7c0      	b.n	8017902 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x56>
 8017980:	0801c641 	.word	0x0801c641

08017984 <_ZN10Publishers13SpinPublisherEh>:
void Publishers::SpinPublisher(uint8_t ID) {
 8017984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017988:	b0ad      	sub	sp, #180	@ 0xb4
 801798a:	4605      	mov	r5, r0
	Publisher* publisher = FindPublisher(ID, &success);
 801798c:	aa08      	add	r2, sp, #32
 801798e:	f7fe ffdb 	bl	8016948 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return;
 8017992:	f89d 3020 	ldrb.w	r3, [sp, #32]
	Publisher* publisher = FindPublisher(ID, &success);
 8017996:	4607      	mov	r7, r0
	if (!success) return;
 8017998:	b14b      	cbz	r3, 80179ae <_ZN10Publishers13SpinPublisherEh+0x2a>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801799a:	f04f 31ff 	mov.w	r1, #4294967295
 801799e:	6828      	ldr	r0, [r5, #0]
 80179a0:	f7f4 fef8 	bl	800c794 <osSemaphoreAcquire>
	if (not publisher->activated) {
 80179a4:	787b      	ldrb	r3, [r7, #1]
 80179a6:	b92b      	cbnz	r3, 80179b4 <_ZN10Publishers13SpinPublisherEh+0x30>
	osSemaphoreRelease(PublishersSemaphore);
 80179a8:	6828      	ldr	r0, [r5, #0]
 80179aa:	f7f4 ff27 	bl	800c7fc <osSemaphoreRelease>
}
 80179ae:	b02d      	add	sp, #180	@ 0xb4
 80179b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	publisher->counter += 1;
 80179b4:	88bb      	ldrh	r3, [r7, #4]
	if (publisher->counter >= publisher->prescaler) {
 80179b6:	887a      	ldrh	r2, [r7, #2]
	publisher->counter += 1;
 80179b8:	3301      	adds	r3, #1
 80179ba:	b29b      	uxth	r3, r3
	if (publisher->counter >= publisher->prescaler) {
 80179bc:	429a      	cmp	r2, r3
	publisher->counter += 1;
 80179be:	80bb      	strh	r3, [r7, #4]
	if (publisher->counter >= publisher->prescaler) {
 80179c0:	d8f2      	bhi.n	80179a8 <_ZN10Publishers13SpinPublisherEh+0x24>
      : _M_current(__i) { }
 80179c2:	68fb      	ldr	r3, [r7, #12]
		publisher->counter = 0;
 80179c4:	2400      	movs	r4, #0
 80179c6:	9305      	str	r3, [sp, #20]
 80179c8:	68bb      	ldr	r3, [r7, #8]
 80179ca:	80bc      	strh	r4, [r7, #4]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80179cc:	9303      	str	r3, [sp, #12]
		for (PublishInterface interface : publisher->interfaces) {
 80179ce:	9a03      	ldr	r2, [sp, #12]
 80179d0:	9b05      	ldr	r3, [sp, #20]
 80179d2:	4293      	cmp	r3, r2
 80179d4:	d0e8      	beq.n	80179a8 <_ZN10Publishers13SpinPublisherEh+0x24>
 80179d6:	9b03      	ldr	r3, [sp, #12]
 80179d8:	781a      	ldrb	r2, [r3, #0]
 80179da:	785b      	ldrb	r3, [r3, #1]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80179dc:	941e      	str	r4, [sp, #120]	@ 0x78
			message.target_address = interface.address;
 80179de:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
      : _M_current(__i) { }
 80179e2:	69bb      	ldr	r3, [r7, #24]
			message.interface = interface.interface;
 80179e4:	f88d 206c 	strb.w	r2, [sp, #108]	@ 0x6c
 80179e8:	9306      	str	r3, [sp, #24]
 80179ea:	697b      	ldr	r3, [r7, #20]
 80179ec:	e9cd 441c 	strd	r4, r4, [sp, #112]	@ 0x70
 80179f0:	9304      	str	r3, [sp, #16]
			for (Topic topic : publisher->topics) {
 80179f2:	9a04      	ldr	r2, [sp, #16]
 80179f4:	9b06      	ldr	r3, [sp, #24]
 80179f6:	4293      	cmp	r3, r2
 80179f8:	d11d      	bne.n	8017a36 <_ZN10Publishers13SpinPublisherEh+0xb2>
			if (message.payload.size() > 0) {
 80179fa:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80179fe:	429a      	cmp	r2, r3
 8017a00:	d013      	beq.n	8017a2a <_ZN10Publishers13SpinPublisherEh+0xa6>
 8017a02:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 8017a06:	a91c      	add	r1, sp, #112	@ 0x70
				communication->Send(message);
 8017a08:	68ae      	ldr	r6, [r5, #8]
 8017a0a:	a827      	add	r0, sp, #156	@ 0x9c
 8017a0c:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 8017a10:	f7e9 f9f4 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8017a14:	f8bd 307c 	ldrh.w	r3, [sp, #124]	@ 0x7c
 8017a18:	a926      	add	r1, sp, #152	@ 0x98
 8017a1a:	4630      	mov	r0, r6
 8017a1c:	f8ad 30a8 	strh.w	r3, [sp, #168]	@ 0xa8
 8017a20:	f7f8 f966 	bl	800fcf0 <_ZN13Communication4SendE13MessageHeader>
      }
 8017a24:	a827      	add	r0, sp, #156	@ 0x9c
 8017a26:	f7e9 f8ef 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017a2a:	a81c      	add	r0, sp, #112	@ 0x70
 8017a2c:	f7e9 f8ec 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
 8017a30:	9b03      	ldr	r3, [sp, #12]
 8017a32:	3302      	adds	r3, #2
 8017a34:	e7ca      	b.n	80179cc <_ZN10Publishers13SpinPublisherEh+0x48>
				if (topic.activated) {
 8017a36:	9b04      	ldr	r3, [sp, #16]
 8017a38:	781b      	ldrb	r3, [r3, #0]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d06d      	beq.n	8017b1a <_ZN10Publishers13SpinPublisherEh+0x196>
					Register element_register = registers->FindRegister(topic.ID, &success);
 8017a3e:	9a04      	ldr	r2, [sp, #16]
 8017a40:	ab08      	add	r3, sp, #32
 8017a42:	6869      	ldr	r1, [r5, #4]
 8017a44:	a80a      	add	r0, sp, #40	@ 0x28
 8017a46:	8852      	ldrh	r2, [r2, #2]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017a48:	9425      	str	r4, [sp, #148]	@ 0x94
					element.ack = false;
 8017a4a:	f8ad 4086 	strh.w	r4, [sp, #134]	@ 0x86
					element.access = false;
 8017a4e:	f88d 4088 	strb.w	r4, [sp, #136]	@ 0x88
 8017a52:	e9cd 4423 	strd	r4, r4, [sp, #140]	@ 0x8c
					Register element_register = registers->FindRegister(topic.ID, &success);
 8017a56:	f000 fc71 	bl	801833c <_ZN9Registers12FindRegisterEtPb>
					if (not success)
 8017a5a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d058      	beq.n	8017b14 <_ZN10Publishers13SpinPublisherEh+0x190>
					element.element_register = element_register;
 8017a62:	ab0a      	add	r3, sp, #40	@ 0x28
 8017a64:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017a68:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
 8017a6c:	9020      	str	r0, [sp, #128]	@ 0x80
					switch (element.element_register.type) {
 8017a6e:	f3c0 4007 	ubfx	r0, r0, #16, #8
					element.element_register = element_register;
 8017a72:	f8ad 1084 	strh.w	r1, [sp, #132]	@ 0x84
 8017a76:	940e      	str	r4, [sp, #56]	@ 0x38
					switch (element.element_register.type) {
 8017a78:	2808      	cmp	r0, #8
 8017a7a:	f200 834e 	bhi.w	801811a <_ZN10Publishers13SpinPublisherEh+0x796>
 8017a7e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8017a82:	0009      	.short	0x0009
 8017a84:	013c034c 	.word	0x013c034c
 8017a88:	01f1034c 	.word	0x01f1034c
 8017a8c:	034c034c 	.word	0x034c034c
 8017a90:	0297034c 	.word	0x0297034c
						register_read = communication->ReadElement<uint8_t>(&element, &success);
 8017a94:	68ab      	ldr	r3, [r5, #8]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017a96:	f04f 31ff 	mov.w	r1, #4294967295
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 8017a9a:	f8bd b080 	ldrh.w	fp, [sp, #128]	@ 0x80
 8017a9e:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8017aa2:	9411      	str	r4, [sp, #68]	@ 0x44
 8017aa4:	f8d8 0000 	ldr.w	r0, [r8]
 8017aa8:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 8017aac:	f7f4 fe72 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017ab0:	aa26      	add	r2, sp, #152	@ 0x98
 8017ab2:	4659      	mov	r1, fp
 8017ab4:	4640      	mov	r0, r8
 8017ab6:	f000 fc30 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8017aba:	f89d 9098 	ldrb.w	r9, [sp, #152]	@ 0x98
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017abe:	4606      	mov	r6, r0
	if (!success) {
 8017ac0:	f1b9 0f00 	cmp.w	r9, #0
 8017ac4:	d106      	bne.n	8017ad4 <_ZN10Publishers13SpinPublisherEh+0x150>
		osSemaphoreRelease(RegistersSemaphore);
 8017ac6:	f8d8 0000 	ldr.w	r0, [r8]
 8017aca:	f7f4 fe97 	bl	800c7fc <osSemaphoreRelease>
 8017ace:	f88d 9020 	strb.w	r9, [sp, #32]
 8017ad2:	e010      	b.n	8017af6 <_ZN10Publishers13SpinPublisherEh+0x172>
	uint8_t registered_type = GetTypeID<T>(&success);
 8017ad4:	a826      	add	r0, sp, #152	@ 0x98
 8017ad6:	f7fe fec7 	bl	8016868 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8017ada:	f89d 9098 	ldrb.w	r9, [sp, #152]	@ 0x98
 8017ade:	f1b9 0f00 	cmp.w	r9, #0
 8017ae2:	d0f0      	beq.n	8017ac6 <_ZN10Publishers13SpinPublisherEh+0x142>
	if (target_register->register_info.type != registered_type) {
 8017ae4:	7933      	ldrb	r3, [r6, #4]
 8017ae6:	4298      	cmp	r0, r3
 8017ae8:	d01a      	beq.n	8017b20 <_ZN10Publishers13SpinPublisherEh+0x19c>
		osSemaphoreRelease(RegistersSemaphore);
 8017aea:	f8d8 0000 	ldr.w	r0, [r8]
 8017aee:	f7f4 fe85 	bl	800c7fc <osSemaphoreRelease>
 8017af2:	f88d 4020 	strb.w	r4, [sp, #32]
						register_read = communication->ReadElement<float>(&element, &success);
 8017af6:	a90f      	add	r1, sp, #60	@ 0x3c
 8017af8:	a80c      	add	r0, sp, #48	@ 0x30
 8017afa:	f7ff f937 	bl	8016d6c <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8017afe:	a80f      	add	r0, sp, #60	@ 0x3c
 8017b00:	f7e9 f882 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
					if (not success)
 8017b04:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	f040 8309 	bne.w	8018120 <_ZN10Publishers13SpinPublisherEh+0x79c>
 8017b0e:	a80c      	add	r0, sp, #48	@ 0x30
 8017b10:	f7e9 f87a 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017b14:	a823      	add	r0, sp, #140	@ 0x8c
 8017b16:	f7e9 f877 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017b1a:	9b04      	ldr	r3, [sp, #16]
 8017b1c:	3304      	adds	r3, #4
 8017b1e:	e767      	b.n	80179f0 <_ZN10Publishers13SpinPublisherEh+0x6c>
	if (callbacks[target_register->register_info.type] == NULL) {
 8017b20:	3004      	adds	r0, #4
 8017b22:	f858 9020 	ldr.w	r9, [r8, r0, lsl #2]
 8017b26:	f1b9 0f00 	cmp.w	r9, #0
 8017b2a:	d0cc      	beq.n	8017ac6 <_ZN10Publishers13SpinPublisherEh+0x142>
	if (target_register->access.read) {
 8017b2c:	7a73      	ldrb	r3, [r6, #9]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d034      	beq.n	8017b9c <_ZN10Publishers13SpinPublisherEh+0x218>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8017b32:	4648      	mov	r0, r9
 8017b34:	8971      	ldrh	r1, [r6, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 8017b36:	f88d 4098 	strb.w	r4, [sp, #152]	@ 0x98
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8017b3a:	f7f7 fb91 	bl	800f260 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
 8017b3e:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8017b42:	e9d0 9300 	ldrd	r9, r3, [r0]
 8017b46:	9307      	str	r3, [sp, #28]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8017b48:	68f3      	ldr	r3, [r6, #12]
 8017b4a:	b123      	cbz	r3, 8017b56 <_ZN10Publishers13SpinPublisherEh+0x1d2>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8017b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8017b50:	6818      	ldr	r0, [r3, #0]
 8017b52:	f7f4 fe1f 	bl	800c794 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 8017b56:	7873      	ldrb	r3, [r6, #1]
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d167      	bne.n	8017c2c <_ZN10Publishers13SpinPublisherEh+0x2a8>
		if (not success && target_register->mode.pointer) {
 8017b5c:	f89d 3098 	ldrb.w	r3, [sp, #152]	@ 0x98
 8017b60:	b9bb      	cbnz	r3, 8017b92 <_ZN10Publishers13SpinPublisherEh+0x20e>
 8017b62:	7833      	ldrb	r3, [r6, #0]
 8017b64:	b1ab      	cbz	r3, 8017b92 <_ZN10Publishers13SpinPublisherEh+0x20e>
			success = true;
 8017b66:	2301      	movs	r3, #1
 8017b68:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8017b6c:	7972      	ldrb	r2, [r6, #5]
 8017b6e:	2a00      	cmp	r2, #0
 8017b70:	f000 8091 	beq.w	8017c96 <_ZN10Publishers13SpinPublisherEh+0x312>
 8017b74:	88f1      	ldrh	r1, [r6, #6]
 8017b76:	2900      	cmp	r1, #0
 8017b78:	f040 8084 	bne.w	8017c84 <_ZN10Publishers13SpinPublisherEh+0x300>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017b7c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017b80:	1a9b      	subs	r3, r3, r2
 8017b82:	f10d 0221 	add.w	r2, sp, #33	@ 0x21
				*length = register_vector->size();
 8017b86:	b29b      	uxth	r3, r3
 8017b88:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
					for (uint16_t index = 0; index < *length; index++) {
 8017b8c:	b288      	uxth	r0, r1
 8017b8e:	4283      	cmp	r3, r0
 8017b90:	d871      	bhi.n	8017c76 <_ZN10Publishers13SpinPublisherEh+0x2f2>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8017b92:	68f3      	ldr	r3, [r6, #12]
 8017b94:	b113      	cbz	r3, 8017b9c <_ZN10Publishers13SpinPublisherEh+0x218>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8017b96:	6818      	ldr	r0, [r3, #0]
 8017b98:	f7f4 fe30 	bl	800c7fc <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 8017b9c:	f8d8 0000 	ldr.w	r0, [r8]
 8017ba0:	2601      	movs	r6, #1
 8017ba2:	f7f4 fe2b 	bl	800c7fc <osSemaphoreRelease>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8017ba6:	a920      	add	r1, sp, #128	@ 0x80
 8017ba8:	a826      	add	r0, sp, #152	@ 0x98
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 8017baa:	f88d 6020 	strb.w	r6, [sp, #32]
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8017bae:	f7f7 ff9d 	bl	800faec <_ZN14MessageElementC1ERKS_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
 8017bb8:	9314      	str	r3, [sp, #80]	@ 0x50
	if (not element.element_register.isArray) {
 8017bba:	f89d 309b 	ldrb.w	r3, [sp, #155]	@ 0x9b
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d170      	bne.n	8017ca4 <_ZN10Publishers13SpinPublisherEh+0x320>
		vector = std::vector<T>{*data};
 8017bc2:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017bc6:	4630      	mov	r0, r6
 8017bc8:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8017bcc:	f7fe fddf 	bl	801678e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8017bd0:	f10d 0155 	add.w	r1, sp, #85	@ 0x55
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017bd4:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017bd6:	4602      	mov	r2, r0
 8017bd8:	9018      	str	r0, [sp, #96]	@ 0x60
 8017bda:	a815      	add	r0, sp, #84	@ 0x54
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017bdc:	931a      	str	r3, [sp, #104]	@ 0x68
 8017bde:	f7e9 f901 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		vector = std::vector<T>(data, data + element.element_register.length);
 8017be2:	a918      	add	r1, sp, #96	@ 0x60
	  this->_M_impl._M_finish =
 8017be4:	9019      	str	r0, [sp, #100]	@ 0x64
 8017be6:	a812      	add	r0, sp, #72	@ 0x48
 8017be8:	f7ff f8c0 	bl	8016d6c <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8017bec:	a818      	add	r0, sp, #96	@ 0x60
 8017bee:	f7e9 f80b 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017bf2:	a829      	add	r0, sp, #164	@ 0xa4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017bf4:	2600      	movs	r6, #0
      }
 8017bf6:	f7e9 f807 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	data = BuildVector<T>(register_read_vector_cast);
 8017bfa:	a912      	add	r1, sp, #72	@ 0x48
 8017bfc:	a818      	add	r0, sp, #96	@ 0x60
 8017bfe:	f7e9 f8fd 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017c02:	9617      	str	r6, [sp, #92]	@ 0x5c
      : _M_current(__i) { }
 8017c04:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	@ 0x60
 8017c08:	e9cd 6615 	strd	r6, r6, [sp, #84]	@ 0x54
    for (T input : inputs) {
 8017c0c:	45c1      	cmp	r9, r8
 8017c0e:	d15e      	bne.n	8017cce <_ZN10Publishers13SpinPublisherEh+0x34a>
	data = BuildVector<T>(register_read_vector_cast);
 8017c10:	a915      	add	r1, sp, #84	@ 0x54
 8017c12:	a80f      	add	r0, sp, #60	@ 0x3c
 8017c14:	f7ff f8aa 	bl	8016d6c <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8017c18:	a815      	add	r0, sp, #84	@ 0x54
 8017c1a:	f7e8 fff5 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017c1e:	a818      	add	r0, sp, #96	@ 0x60
 8017c20:	f7e8 fff2 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017c24:	a812      	add	r0, sp, #72	@ 0x48
 8017c26:	f7e8 ffef 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017c2a:	e764      	b.n	8017af6 <_ZN10Publishers13SpinPublisherEh+0x172>
				*callback_output = output;
 8017c2c:	2200      	movs	r2, #0
 8017c2e:	f10d 0321 	add.w	r3, sp, #33	@ 0x21
 8017c32:	6013      	str	r3, [r2, #0]
			if (callbacks.read != NULL) {
 8017c34:	f1ba 0f00 	cmp.w	sl, #0
 8017c38:	d090      	beq.n	8017b5c <_ZN10Publishers13SpinPublisherEh+0x1d8>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 8017c3a:	ab09      	add	r3, sp, #36	@ 0x24
 8017c3c:	4659      	mov	r1, fp
 8017c3e:	9807      	ldr	r0, [sp, #28]
 8017c40:	47d0      	blx	sl
 8017c42:	f88d 0098 	strb.w	r0, [sp, #152]	@ 0x98
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8017c46:	7973      	ldrb	r3, [r6, #5]
 8017c48:	b14b      	cbz	r3, 8017c5e <_ZN10Publishers13SpinPublisherEh+0x2da>
 8017c4a:	88f3      	ldrh	r3, [r6, #6]
 8017c4c:	b10b      	cbz	r3, 8017c52 <_ZN10Publishers13SpinPublisherEh+0x2ce>
					*length = 1;
 8017c4e:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
					for (uint16_t index = 0; index < *length; index++) {
 8017c52:	f8bd 0024 	ldrh.w	r0, [sp, #36]	@ 0x24
 8017c56:	f10d 0121 	add.w	r1, sp, #33	@ 0x21
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	e007      	b.n	8017c6e <_ZN10Publishers13SpinPublisherEh+0x2ea>
					*length = 1;
 8017c5e:	2301      	movs	r3, #1
 8017c60:	e7f5      	b.n	8017c4e <_ZN10Publishers13SpinPublisherEh+0x2ca>
						output[index] = (*callback_output )[index];
 8017c62:	2200      	movs	r2, #0
 8017c64:	6812      	ldr	r2, [r2, #0]
 8017c66:	5cd2      	ldrb	r2, [r2, r3]
 8017c68:	3301      	adds	r3, #1
 8017c6a:	f801 2b01 	strb.w	r2, [r1], #1
					for (uint16_t index = 0; index < *length; index++) {
 8017c6e:	b29a      	uxth	r2, r3
 8017c70:	4290      	cmp	r0, r2
 8017c72:	d8f6      	bhi.n	8017c62 <_ZN10Publishers13SpinPublisherEh+0x2de>
 8017c74:	e772      	b.n	8017b5c <_ZN10Publishers13SpinPublisherEh+0x1d8>
						output[index] = (*register_vector)[index];
 8017c76:	f8d9 0000 	ldr.w	r0, [r9]
 8017c7a:	5c40      	ldrb	r0, [r0, r1]
 8017c7c:	3101      	adds	r1, #1
 8017c7e:	f802 0b01 	strb.w	r0, [r2], #1
					for (uint16_t index = 0; index < *length; index++) {
 8017c82:	e783      	b.n	8017b8c <_ZN10Publishers13SpinPublisherEh+0x208>
				*length = target_register->register_info.length;
 8017c84:	f8ad 1024 	strh.w	r1, [sp, #36]	@ 0x24
 8017c88:	f10d 0221 	add.w	r2, sp, #33	@ 0x21
 8017c8c:	4449      	add	r1, r9
 8017c8e:	4648      	mov	r0, r9
 8017c90:	f7e9 f8a8 	bl	8000de4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8017c94:	e77d      	b.n	8017b92 <_ZN10Publishers13SpinPublisherEh+0x20e>
				*length = 1;
 8017c96:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
					*output = *callbacks.pointer;
 8017c9a:	f899 3000 	ldrb.w	r3, [r9]
 8017c9e:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8017ca2:	e776      	b.n	8017b92 <_ZN10Publishers13SpinPublisherEh+0x20e>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8017ca4:	f8bd 609c 	ldrh.w	r6, [sp, #156]	@ 0x9c
 8017ca8:	b15e      	cbz	r6, 8017cc2 <_ZN10Publishers13SpinPublisherEh+0x33e>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017caa:	4630      	mov	r0, r6
 8017cac:	f7fe fd6f 	bl	801678e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017cb0:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017cb2:	4602      	mov	r2, r0
 8017cb4:	9018      	str	r0, [sp, #96]	@ 0x60
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017cb6:	931a      	str	r3, [sp, #104]	@ 0x68
			      _Category>::__copy_m(__first, __last, __result);
 8017cb8:	f10d 0321 	add.w	r3, sp, #33	@ 0x21
 8017cbc:	1999      	adds	r1, r3, r6
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	e78d      	b.n	8017bde <_ZN10Publishers13SpinPublisherEh+0x25a>
		vector = *reinterpret_cast<std::vector<T>*>(data);
 8017cc2:	f10d 0121 	add.w	r1, sp, #33	@ 0x21
 8017cc6:	a812      	add	r0, sp, #72	@ 0x48
 8017cc8:	f7ff fc87 	bl	80175da <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0>
 8017ccc:	e791      	b.n	8017bf2 <_ZN10Publishers13SpinPublisherEh+0x26e>
    for (T input : inputs) {
 8017cce:	f818 3b01 	ldrb.w	r3, [r8], #1
      { emplace_back(std::move(__x)); }
 8017cd2:	f10d 0122 	add.w	r1, sp, #34	@ 0x22
 8017cd6:	a826      	add	r0, sp, #152	@ 0x98
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017cd8:	9628      	str	r6, [sp, #160]	@ 0xa0
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8017cda:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 8017cde:	e9cd 6626 	strd	r6, r6, [sp, #152]	@ 0x98
      { emplace_back(std::move(__x)); }
 8017ce2:	f7f7 fdd7 	bl	800f894 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
        data.insert(data.end(), single.begin(), single.end());
 8017ce6:	a815      	add	r0, sp, #84	@ 0x54
 8017ce8:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8017cea:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	@ 0x98
 8017cee:	f7ff fddd 	bl	80178ac <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
      }
 8017cf2:	a826      	add	r0, sp, #152	@ 0x98
 8017cf4:	f7e8 ff88 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8017cf8:	e788      	b.n	8017c0c <_ZN10Publishers13SpinPublisherEh+0x288>
						register_read = communication->ReadElement<uint32_t>(&element, &success);
 8017cfa:	68ab      	ldr	r3, [r5, #8]
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 8017cfc:	2601      	movs	r6, #1
 8017cfe:	aa09      	add	r2, sp, #36	@ 0x24
 8017d00:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8017d04:	6858      	ldr	r0, [r3, #4]
 8017d06:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 8017d0a:	9600      	str	r6, [sp, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017d0c:	9411      	str	r4, [sp, #68]	@ 0x44
 8017d0e:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 8017d12:	f7fa f9ac 	bl	801206e <_ZN9Registers12ReadRegisterImEEbtPT_Ptb>
 8017d16:	f88d 0020 	strb.w	r0, [sp, #32]
	if (not *success)
 8017d1a:	2800      	cmp	r0, #0
 8017d1c:	f43f aeeb 	beq.w	8017af6 <_ZN10Publishers13SpinPublisherEh+0x172>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8017d20:	a920      	add	r1, sp, #128	@ 0x80
 8017d22:	a826      	add	r0, sp, #152	@ 0x98
 8017d24:	f7f7 fee2 	bl	800faec <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 8017d28:	f89d 309b 	ldrb.w	r3, [sp, #155]	@ 0x9b
 8017d2c:	9414      	str	r4, [sp, #80]	@ 0x50
 8017d2e:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d141      	bne.n	8017dba <_ZN10Publishers13SpinPublisherEh+0x436>
		vector = std::vector<T>{*data};
 8017d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017d38:	4630      	mov	r0, r6
 8017d3a:	9315      	str	r3, [sp, #84]	@ 0x54
 8017d3c:	f7fe fd15 	bl	801676a <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8017d40:	a916      	add	r1, sp, #88	@ 0x58
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017d42:	1d03      	adds	r3, r0, #4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017d44:	4602      	mov	r2, r0
 8017d46:	9018      	str	r0, [sp, #96]	@ 0x60
 8017d48:	a815      	add	r0, sp, #84	@ 0x54
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017d4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8017d4c:	f7fa f968 	bl	8012020 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8017d50:	a918      	add	r1, sp, #96	@ 0x60
	  this->_M_impl._M_finish =
 8017d52:	9019      	str	r0, [sp, #100]	@ 0x64
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8017d54:	a812      	add	r0, sp, #72	@ 0x48
 8017d56:	f7ff f93f 	bl	8016fd8 <_ZNSt6vectorImSaImEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 8017d5a:	a818      	add	r0, sp, #96	@ 0x60
 8017d5c:	f7f7 fd3f 	bl	800f7de <_ZNSt12_Vector_baseImSaImEED1Ev>
 8017d60:	a829      	add	r0, sp, #164	@ 0xa4
 8017d62:	f7e8 ff51 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017d66:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	@ 0x48
 8017d6a:	eba9 0a08 	sub.w	sl, r9, r8
	this->_M_impl._M_start = this->_M_allocate(__n);
 8017d6e:	ea4f 00aa 	mov.w	r0, sl, asr #2
 8017d72:	f7fe fcfa 	bl	801676a <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017d76:	eb00 030a 	add.w	r3, r0, sl
 8017d7a:	4602      	mov	r2, r0
 8017d7c:	4649      	mov	r1, r9
	this->_M_impl._M_start = this->_M_allocate(__n);
 8017d7e:	9018      	str	r0, [sp, #96]	@ 0x60
 8017d80:	4606      	mov	r6, r0
 8017d82:	4640      	mov	r0, r8
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017d84:	931a      	str	r3, [sp, #104]	@ 0x68
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017d86:	f04f 0800 	mov.w	r8, #0
 8017d8a:	f7fa f949 	bl	8012020 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
 8017d8e:	4681      	mov	r9, r0
	this->_M_impl._M_finish =
 8017d90:	9019      	str	r0, [sp, #100]	@ 0x64
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017d92:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
 8017d96:	e9cd 8815 	strd	r8, r8, [sp, #84]	@ 0x54
    for (T input : inputs) {
 8017d9a:	45b1      	cmp	r9, r6
 8017d9c:	d138      	bne.n	8017e10 <_ZN10Publishers13SpinPublisherEh+0x48c>
	data = BuildVector<T>(register_read_vector_cast);
 8017d9e:	a915      	add	r1, sp, #84	@ 0x54
 8017da0:	a80f      	add	r0, sp, #60	@ 0x3c
 8017da2:	f7fe ffe3 	bl	8016d6c <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8017da6:	a815      	add	r0, sp, #84	@ 0x54
 8017da8:	f7e8 ff2e 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017dac:	a818      	add	r0, sp, #96	@ 0x60
 8017dae:	f7f7 fd16 	bl	800f7de <_ZNSt12_Vector_baseImSaImEED1Ev>
 8017db2:	a812      	add	r0, sp, #72	@ 0x48
 8017db4:	f7f7 fd13 	bl	800f7de <_ZNSt12_Vector_baseImSaImEED1Ev>
 8017db8:	e69d      	b.n	8017af6 <_ZN10Publishers13SpinPublisherEh+0x172>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8017dba:	f8bd 009c 	ldrh.w	r0, [sp, #156]	@ 0x9c
 8017dbe:	b150      	cbz	r0, 8017dd6 <_ZN10Publishers13SpinPublisherEh+0x452>
		vector = std::vector<T>(data, data + element.element_register.length);
 8017dc0:	0086      	lsls	r6, r0, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017dc2:	f7fe fcd2 	bl	801676a <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8017dc6:	4602      	mov	r2, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017dc8:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017dca:	9018      	str	r0, [sp, #96]	@ 0x60
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017dcc:	931a      	str	r3, [sp, #104]	@ 0x68
 8017dce:	ab09      	add	r3, sp, #36	@ 0x24
 8017dd0:	1999      	adds	r1, r3, r6
 8017dd2:	4618      	mov	r0, r3
 8017dd4:	e7ba      	b.n	8017d4c <_ZN10Publishers13SpinPublisherEh+0x3c8>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017dd6:	e9dd 8a09 	ldrd	r8, sl, [sp, #36]	@ 0x24
	  if (__xlen > capacity())
 8017dda:	ebba 0608 	subs.w	r6, sl, r8
 8017dde:	d011      	beq.n	8017e04 <_ZN10Publishers13SpinPublisherEh+0x480>
	  pointer __result = this->_M_allocate(__n);
 8017de0:	10b0      	asrs	r0, r6, #2
 8017de2:	f7fe fcc2 	bl	801676a <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8017de6:	4681      	mov	r9, r0
 8017de8:	4602      	mov	r2, r0
 8017dea:	4651      	mov	r1, sl
 8017dec:	4640      	mov	r0, r8
 8017dee:	f7fa f917 	bl	8012020 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8017df2:	eb09 0006 	add.w	r0, r9, r6
	      this->_M_impl._M_start = __tmp;
 8017df6:	f8cd 9048 	str.w	r9, [sp, #72]	@ 0x48
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8017dfa:	9014      	str	r0, [sp, #80]	@ 0x50
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8017dfc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017dfe:	4433      	add	r3, r6
 8017e00:	9313      	str	r3, [sp, #76]	@ 0x4c
      return *this;
 8017e02:	e7ad      	b.n	8017d60 <_ZN10Publishers13SpinPublisherEh+0x3dc>
 8017e04:	4632      	mov	r2, r6
 8017e06:	4651      	mov	r1, sl
 8017e08:	4640      	mov	r0, r8
 8017e0a:	f7fa f909 	bl	8012020 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8017e0e:	e7f5      	b.n	8017dfc <_ZN10Publishers13SpinPublisherEh+0x478>
    for (T input : inputs) {
 8017e10:	f856 bb04 	ldr.w	fp, [r6], #4
    std::memcpy(&reinterpreted_input, &input, sizeof(T)); // this is mandatory to get rid of the memory alignment problem. A simple cast can't work here
 8017e14:	f04f 0a18 	mov.w	sl, #24
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017e18:	f8cd 80a0 	str.w	r8, [sp, #160]	@ 0xa0
 8017e1c:	e9cd 8826 	strd	r8, r8, [sp, #152]	@ 0x98
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8017e20:	f1ca 0120 	rsb	r1, sl, #32
 8017e24:	f1aa 0220 	sub.w	r2, sl, #32
 8017e28:	fa2b f30a 	lsr.w	r3, fp, sl
	for (uint8_t index = 0; index < type_length; index++) {
 8017e2c:	f1aa 0a08 	sub.w	sl, sl, #8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8017e30:	fa08 f101 	lsl.w	r1, r8, r1
 8017e34:	fa28 f202 	lsr.w	r2, r8, r2
      { emplace_back(std::move(__x)); }
 8017e38:	a826      	add	r0, sp, #152	@ 0x98
 8017e3a:	430b      	orrs	r3, r1
 8017e3c:	f10d 0121 	add.w	r1, sp, #33	@ 0x21
 8017e40:	4313      	orrs	r3, r2
 8017e42:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8017e46:	f7f7 fd25 	bl	800f894 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	for (uint8_t index = 0; index < type_length; index++) {
 8017e4a:	f11a 0f08 	cmn.w	sl, #8
 8017e4e:	d1e7      	bne.n	8017e20 <_ZN10Publishers13SpinPublisherEh+0x49c>
        data.insert(data.end(), single.begin(), single.end());
 8017e50:	a815      	add	r0, sp, #84	@ 0x54
 8017e52:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8017e54:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	@ 0x98
 8017e58:	f7ff fd28 	bl	80178ac <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
      }
 8017e5c:	a826      	add	r0, sp, #152	@ 0x98
 8017e5e:	f7e8 fed3 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8017e62:	e79a      	b.n	8017d9a <_ZN10Publishers13SpinPublisherEh+0x416>
						register_read = communication->ReadElement<int8_t>(&element, &success);
 8017e64:	68ab      	ldr	r3, [r5, #8]
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 8017e66:	2601      	movs	r6, #1
 8017e68:	f10d 0221 	add.w	r2, sp, #33	@ 0x21
 8017e6c:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8017e70:	6858      	ldr	r0, [r3, #4]
 8017e72:	ab09      	add	r3, sp, #36	@ 0x24
 8017e74:	9600      	str	r6, [sp, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017e76:	9411      	str	r4, [sp, #68]	@ 0x44
 8017e78:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 8017e7c:	f7ff fbe8 	bl	8017650 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb>
 8017e80:	f88d 0020 	strb.w	r0, [sp, #32]
	if (not *success)
 8017e84:	2800      	cmp	r0, #0
 8017e86:	f43f ae36 	beq.w	8017af6 <_ZN10Publishers13SpinPublisherEh+0x172>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8017e8a:	a920      	add	r1, sp, #128	@ 0x80
 8017e8c:	a826      	add	r0, sp, #152	@ 0x98
 8017e8e:	f7f7 fe2d 	bl	800faec <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 8017e92:	f89d 309b 	ldrb.w	r3, [sp, #155]	@ 0x9b
 8017e96:	9414      	str	r4, [sp, #80]	@ 0x50
 8017e98:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d142      	bne.n	8017f26 <_ZN10Publishers13SpinPublisherEh+0x5a2>
		vector = std::vector<T>{*data};
 8017ea0:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017ea4:	4630      	mov	r0, r6
 8017ea6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8017eaa:	f7fe fc53 	bl	8016754 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 8017eae:	f10d 0155 	add.w	r1, sp, #85	@ 0x55
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017eb2:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017eb4:	4602      	mov	r2, r0
 8017eb6:	9018      	str	r0, [sp, #96]	@ 0x60
 8017eb8:	a815      	add	r0, sp, #84	@ 0x54
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017eba:	931a      	str	r3, [sp, #104]	@ 0x68
 8017ebc:	f7fa fd0a 	bl	80128d4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8017ec0:	a918      	add	r1, sp, #96	@ 0x60
	  this->_M_impl._M_finish =
 8017ec2:	9019      	str	r0, [sp, #100]	@ 0x64
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8017ec4:	a812      	add	r0, sp, #72	@ 0x48
 8017ec6:	f7ff f89e 	bl	8017006 <_ZNSt6vectorIaSaIaEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 8017eca:	a818      	add	r0, sp, #96	@ 0x60
 8017ecc:	f7f7 fca9 	bl	800f822 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8017ed0:	a829      	add	r0, sp, #164	@ 0xa4
 8017ed2:	f7e8 fe99 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017ed6:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	@ 0x48
 8017eda:	eba9 0a08 	sub.w	sl, r9, r8
	this->_M_impl._M_start = this->_M_allocate(__n);
 8017ede:	4650      	mov	r0, sl
 8017ee0:	f7fe fc38 	bl	8016754 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 8017ee4:	4606      	mov	r6, r0
 8017ee6:	9018      	str	r0, [sp, #96]	@ 0x60
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017ee8:	4450      	add	r0, sl
 8017eea:	4649      	mov	r1, r9
 8017eec:	4632      	mov	r2, r6
 8017eee:	901a      	str	r0, [sp, #104]	@ 0x68
 8017ef0:	4640      	mov	r0, r8
 8017ef2:	f7fa fcef 	bl	80128d4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017ef6:	f04f 0800 	mov.w	r8, #0
 8017efa:	4681      	mov	r9, r0
	this->_M_impl._M_finish =
 8017efc:	9019      	str	r0, [sp, #100]	@ 0x64
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017efe:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
 8017f02:	e9cd 8815 	strd	r8, r8, [sp, #84]	@ 0x54
    for (T input : inputs) {
 8017f06:	454e      	cmp	r6, r9
 8017f08:	d13b      	bne.n	8017f82 <_ZN10Publishers13SpinPublisherEh+0x5fe>
	data = BuildVector<T>(register_read_vector_cast);
 8017f0a:	a915      	add	r1, sp, #84	@ 0x54
 8017f0c:	a80f      	add	r0, sp, #60	@ 0x3c
 8017f0e:	f7fe ff2d 	bl	8016d6c <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8017f12:	a815      	add	r0, sp, #84	@ 0x54
 8017f14:	f7e8 fe78 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017f18:	a818      	add	r0, sp, #96	@ 0x60
 8017f1a:	f7f7 fc82 	bl	800f822 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8017f1e:	a812      	add	r0, sp, #72	@ 0x48
 8017f20:	f7f7 fc7f 	bl	800f822 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8017f24:	e5e7      	b.n	8017af6 <_ZN10Publishers13SpinPublisherEh+0x172>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8017f26:	f8bd 609c 	ldrh.w	r6, [sp, #156]	@ 0x9c
 8017f2a:	b15e      	cbz	r6, 8017f44 <_ZN10Publishers13SpinPublisherEh+0x5c0>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017f2c:	4630      	mov	r0, r6
 8017f2e:	f7fe fc11 	bl	8016754 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017f32:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017f34:	4602      	mov	r2, r0
 8017f36:	9018      	str	r0, [sp, #96]	@ 0x60
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017f38:	931a      	str	r3, [sp, #104]	@ 0x68
 8017f3a:	f10d 0321 	add.w	r3, sp, #33	@ 0x21
 8017f3e:	1999      	adds	r1, r3, r6
 8017f40:	4618      	mov	r0, r3
 8017f42:	e7bb      	b.n	8017ebc <_ZN10Publishers13SpinPublisherEh+0x538>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017f44:	f8dd a025 	ldr.w	sl, [sp, #37]	@ 0x25
 8017f48:	f8dd 8021 	ldr.w	r8, [sp, #33]	@ 0x21
	  if (__xlen > capacity())
 8017f4c:	ebba 0608 	subs.w	r6, sl, r8
 8017f50:	d011      	beq.n	8017f76 <_ZN10Publishers13SpinPublisherEh+0x5f2>
	  pointer __result = this->_M_allocate(__n);
 8017f52:	4630      	mov	r0, r6
 8017f54:	f7fe fbfe 	bl	8016754 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 8017f58:	4681      	mov	r9, r0
 8017f5a:	4602      	mov	r2, r0
 8017f5c:	4651      	mov	r1, sl
 8017f5e:	4640      	mov	r0, r8
 8017f60:	f7fa fcb8 	bl	80128d4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8017f64:	eb09 0006 	add.w	r0, r9, r6
	      this->_M_impl._M_start = __tmp;
 8017f68:	f8cd 9048 	str.w	r9, [sp, #72]	@ 0x48
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8017f6c:	9014      	str	r0, [sp, #80]	@ 0x50
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8017f6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017f70:	4433      	add	r3, r6
 8017f72:	9313      	str	r3, [sp, #76]	@ 0x4c
      return *this;
 8017f74:	e7ac      	b.n	8017ed0 <_ZN10Publishers13SpinPublisherEh+0x54c>
 8017f76:	4632      	mov	r2, r6
 8017f78:	4651      	mov	r1, sl
 8017f7a:	4640      	mov	r0, r8
 8017f7c:	f7fa fcaa 	bl	80128d4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8017f80:	e7f5      	b.n	8017f6e <_ZN10Publishers13SpinPublisherEh+0x5ea>
    for (T input : inputs) {
 8017f82:	f916 3b01 	ldrsb.w	r3, [r6], #1
      { emplace_back(std::move(__x)); }
 8017f86:	f10d 0122 	add.w	r1, sp, #34	@ 0x22
 8017f8a:	a826      	add	r0, sp, #152	@ 0x98
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017f8c:	f8cd 80a0 	str.w	r8, [sp, #160]	@ 0xa0
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8017f90:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 8017f94:	e9cd 8826 	strd	r8, r8, [sp, #152]	@ 0x98
      { emplace_back(std::move(__x)); }
 8017f98:	f7f7 fc7c 	bl	800f894 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
        data.insert(data.end(), single.begin(), single.end());
 8017f9c:	a815      	add	r0, sp, #84	@ 0x54
 8017f9e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8017fa0:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	@ 0x98
 8017fa4:	f7ff fc82 	bl	80178ac <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
      }
 8017fa8:	a826      	add	r0, sp, #152	@ 0x98
 8017faa:	f7e8 fe2d 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8017fae:	e7aa      	b.n	8017f06 <_ZN10Publishers13SpinPublisherEh+0x582>
						register_read = communication->ReadElement<float>(&element, &success);
 8017fb0:	68ab      	ldr	r3, [r5, #8]
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 8017fb2:	2601      	movs	r6, #1
 8017fb4:	aa09      	add	r2, sp, #36	@ 0x24
 8017fb6:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8017fba:	6858      	ldr	r0, [r3, #4]
 8017fbc:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 8017fc0:	9600      	str	r6, [sp, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017fc2:	9411      	str	r4, [sp, #68]	@ 0x44
 8017fc4:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 8017fc8:	f7f6 fd8c 	bl	800eae4 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb>
 8017fcc:	f88d 0020 	strb.w	r0, [sp, #32]
	if (not *success)
 8017fd0:	2800      	cmp	r0, #0
 8017fd2:	f43f ad90 	beq.w	8017af6 <_ZN10Publishers13SpinPublisherEh+0x172>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8017fd6:	a920      	add	r1, sp, #128	@ 0x80
 8017fd8:	a826      	add	r0, sp, #152	@ 0x98
 8017fda:	f7f7 fd87 	bl	800faec <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 8017fde:	f89d 309b 	ldrb.w	r3, [sp, #155]	@ 0x9b
 8017fe2:	9414      	str	r4, [sp, #80]	@ 0x50
 8017fe4:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d141      	bne.n	8018070 <_ZN10Publishers13SpinPublisherEh+0x6ec>
		vector = std::vector<T>{*data};
 8017fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017fee:	4630      	mov	r0, r6
 8017ff0:	9315      	str	r3, [sp, #84]	@ 0x54
 8017ff2:	f7fe fb9d 	bl	8016730 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 8017ff6:	a916      	add	r1, sp, #88	@ 0x58
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017ff8:	1d03      	adds	r3, r0, #4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017ffa:	4602      	mov	r2, r0
 8017ffc:	9018      	str	r0, [sp, #96]	@ 0x60
 8017ffe:	a815      	add	r0, sp, #84	@ 0x54
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018000:	931a      	str	r3, [sp, #104]	@ 0x68
 8018002:	f7fb f891 	bl	8013128 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8018006:	a918      	add	r1, sp, #96	@ 0x60
	  this->_M_impl._M_finish =
 8018008:	9019      	str	r0, [sp, #100]	@ 0x64
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 801800a:	a812      	add	r0, sp, #72	@ 0x48
 801800c:	f7ff f812 	bl	8017034 <_ZNSt6vectorIfSaIfEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 8018010:	a818      	add	r0, sp, #96	@ 0x60
 8018012:	f7ea f92d 	bl	8002270 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8018016:	a829      	add	r0, sp, #164	@ 0xa4
 8018018:	f7e8 fdf6 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801801c:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	@ 0x48
 8018020:	eba9 0a08 	sub.w	sl, r9, r8
	this->_M_impl._M_start = this->_M_allocate(__n);
 8018024:	ea4f 00aa 	mov.w	r0, sl, asr #2
 8018028:	f7fe fb82 	bl	8016730 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801802c:	eb00 030a 	add.w	r3, r0, sl
 8018030:	4602      	mov	r2, r0
 8018032:	4649      	mov	r1, r9
	this->_M_impl._M_start = this->_M_allocate(__n);
 8018034:	9018      	str	r0, [sp, #96]	@ 0x60
 8018036:	4606      	mov	r6, r0
 8018038:	4640      	mov	r0, r8
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801803a:	931a      	str	r3, [sp, #104]	@ 0x68
	: _M_start(), _M_finish(), _M_end_of_storage()
 801803c:	f04f 0800 	mov.w	r8, #0
 8018040:	f7fb f872 	bl	8013128 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8018044:	4681      	mov	r9, r0
	this->_M_impl._M_finish =
 8018046:	9019      	str	r0, [sp, #100]	@ 0x64
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018048:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
 801804c:	e9cd 8815 	strd	r8, r8, [sp, #84]	@ 0x54
    for (T input : inputs) {
 8018050:	45b1      	cmp	r9, r6
 8018052:	d138      	bne.n	80180c6 <_ZN10Publishers13SpinPublisherEh+0x742>
	data = BuildVector<T>(register_read_vector_cast);
 8018054:	a915      	add	r1, sp, #84	@ 0x54
 8018056:	a80f      	add	r0, sp, #60	@ 0x3c
 8018058:	f7fe fe88 	bl	8016d6c <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 801805c:	a815      	add	r0, sp, #84	@ 0x54
 801805e:	f7e8 fdd3 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8018062:	a818      	add	r0, sp, #96	@ 0x60
 8018064:	f7ea f904 	bl	8002270 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8018068:	a812      	add	r0, sp, #72	@ 0x48
 801806a:	f7ea f901 	bl	8002270 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 801806e:	e542      	b.n	8017af6 <_ZN10Publishers13SpinPublisherEh+0x172>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8018070:	f8bd 009c 	ldrh.w	r0, [sp, #156]	@ 0x9c
 8018074:	b150      	cbz	r0, 801808c <_ZN10Publishers13SpinPublisherEh+0x708>
		vector = std::vector<T>(data, data + element.element_register.length);
 8018076:	0086      	lsls	r6, r0, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8018078:	f7fe fb5a 	bl	8016730 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 801807c:	4602      	mov	r2, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801807e:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8018080:	9018      	str	r0, [sp, #96]	@ 0x60
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018082:	931a      	str	r3, [sp, #104]	@ 0x68
 8018084:	ab09      	add	r3, sp, #36	@ 0x24
 8018086:	1999      	adds	r1, r3, r6
 8018088:	4618      	mov	r0, r3
 801808a:	e7ba      	b.n	8018002 <_ZN10Publishers13SpinPublisherEh+0x67e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801808c:	e9dd 8a09 	ldrd	r8, sl, [sp, #36]	@ 0x24
	  if (__xlen > capacity())
 8018090:	ebba 0608 	subs.w	r6, sl, r8
 8018094:	d011      	beq.n	80180ba <_ZN10Publishers13SpinPublisherEh+0x736>
	  pointer __result = this->_M_allocate(__n);
 8018096:	10b0      	asrs	r0, r6, #2
 8018098:	f7fe fb4a 	bl	8016730 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 801809c:	4681      	mov	r9, r0
 801809e:	4602      	mov	r2, r0
 80180a0:	4651      	mov	r1, sl
 80180a2:	4640      	mov	r0, r8
 80180a4:	f7fb f840 	bl	8013128 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80180a8:	eb09 0006 	add.w	r0, r9, r6
	      this->_M_impl._M_start = __tmp;
 80180ac:	f8cd 9048 	str.w	r9, [sp, #72]	@ 0x48
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80180b0:	9014      	str	r0, [sp, #80]	@ 0x50
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 80180b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80180b4:	4433      	add	r3, r6
 80180b6:	9313      	str	r3, [sp, #76]	@ 0x4c
      return *this;
 80180b8:	e7ad      	b.n	8018016 <_ZN10Publishers13SpinPublisherEh+0x692>
 80180ba:	4632      	mov	r2, r6
 80180bc:	4651      	mov	r1, sl
 80180be:	4640      	mov	r0, r8
 80180c0:	f7fb f832 	bl	8013128 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80180c4:	e7f5      	b.n	80180b2 <_ZN10Publishers13SpinPublisherEh+0x72e>
    for (T input : inputs) {
 80180c6:	f856 bb04 	ldr.w	fp, [r6], #4
    std::memcpy(&reinterpreted_input, &input, sizeof(T)); // this is mandatory to get rid of the memory alignment problem. A simple cast can't work here
 80180ca:	f04f 0a18 	mov.w	sl, #24
	: _M_start(), _M_finish(), _M_end_of_storage()
 80180ce:	f8cd 80a0 	str.w	r8, [sp, #160]	@ 0xa0
 80180d2:	e9cd 8826 	strd	r8, r8, [sp, #152]	@ 0x98
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 80180d6:	f1ca 0120 	rsb	r1, sl, #32
 80180da:	f1aa 0220 	sub.w	r2, sl, #32
 80180de:	fa2b f30a 	lsr.w	r3, fp, sl
	for (uint8_t index = 0; index < type_length; index++) {
 80180e2:	f1aa 0a08 	sub.w	sl, sl, #8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 80180e6:	fa08 f101 	lsl.w	r1, r8, r1
 80180ea:	fa28 f202 	lsr.w	r2, r8, r2
      { emplace_back(std::move(__x)); }
 80180ee:	a826      	add	r0, sp, #152	@ 0x98
 80180f0:	430b      	orrs	r3, r1
 80180f2:	f10d 0121 	add.w	r1, sp, #33	@ 0x21
 80180f6:	4313      	orrs	r3, r2
 80180f8:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 80180fc:	f7f7 fbca 	bl	800f894 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	for (uint8_t index = 0; index < type_length; index++) {
 8018100:	f11a 0f08 	cmn.w	sl, #8
 8018104:	d1e7      	bne.n	80180d6 <_ZN10Publishers13SpinPublisherEh+0x752>
        data.insert(data.end(), single.begin(), single.end());
 8018106:	a815      	add	r0, sp, #84	@ 0x54
 8018108:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801810a:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	@ 0x98
 801810e:	f7ff fbcd 	bl	80178ac <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
      }
 8018112:	a826      	add	r0, sp, #152	@ 0x98
 8018114:	f7e8 fd78 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8018118:	e79a      	b.n	8018050 <_ZN10Publishers13SpinPublisherEh+0x6cc>
						success = false;
 801811a:	f88d 4020 	strb.w	r4, [sp, #32]
					if (not success)
 801811e:	e4f6      	b.n	8017b0e <_ZN10Publishers13SpinPublisherEh+0x18a>
					element.data = register_read;
 8018120:	a90c      	add	r1, sp, #48	@ 0x30
 8018122:	a823      	add	r0, sp, #140	@ 0x8c
 8018124:	f7ff fa59 	bl	80175da <_ZNSt6vectorIhSaIhEEaSERKS1_.isra.0>
					if (not communication->BuildPayload(&message, element) && message.payload.size() > 0) {
 8018128:	68ae      	ldr	r6, [r5, #8]
 801812a:	a920      	add	r1, sp, #128	@ 0x80
 801812c:	a826      	add	r0, sp, #152	@ 0x98
 801812e:	f7f7 fcdd 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8018132:	aa26      	add	r2, sp, #152	@ 0x98
 8018134:	a91b      	add	r1, sp, #108	@ 0x6c
 8018136:	4630      	mov	r0, r6
 8018138:	f7f9 fa30 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 801813c:	2800      	cmp	r0, #0
 801813e:	d131      	bne.n	80181a4 <_ZN10Publishers13SpinPublisherEh+0x820>
 8018140:	e9dd 361c 	ldrd	r3, r6, [sp, #112]	@ 0x70
 8018144:	1af6      	subs	r6, r6, r3
 8018146:	bf18      	it	ne
 8018148:	2601      	movne	r6, #1
 801814a:	a829      	add	r0, sp, #164	@ 0xa4
 801814c:	f7e8 fd5c 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8018150:	2e00      	cmp	r6, #0
 8018152:	f43f acdc 	beq.w	8017b0e <_ZN10Publishers13SpinPublisherEh+0x18a>
 8018156:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 801815a:	a91c      	add	r1, sp, #112	@ 0x70
						communication->Send(message);
 801815c:	68ae      	ldr	r6, [r5, #8]
 801815e:	a827      	add	r0, sp, #156	@ 0x9c
 8018160:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 8018164:	f7e8 fe4a 	bl	8000dfc <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8018168:	f8bd 307c 	ldrh.w	r3, [sp, #124]	@ 0x7c
 801816c:	a926      	add	r1, sp, #152	@ 0x98
 801816e:	4630      	mov	r0, r6
 8018170:	f8ad 30a8 	strh.w	r3, [sp, #168]	@ 0xa8
 8018174:	f7f7 fdbc 	bl	800fcf0 <_ZN13Communication4SendE13MessageHeader>
 8018178:	a827      	add	r0, sp, #156	@ 0x9c
 801817a:	f7e8 fd45 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
						communication->BuildPayload(&message, element);
 801817e:	68ae      	ldr	r6, [r5, #8]
 8018180:	a920      	add	r1, sp, #128	@ 0x80
 8018182:	a826      	add	r0, sp, #152	@ 0x98
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8018184:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8018188:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
 801818a:	bf18      	it	ne
 801818c:	931d      	strne	r3, [sp, #116]	@ 0x74
 801818e:	f7f7 fcad 	bl	800faec <_ZN14MessageElementC1ERKS_>
 8018192:	aa26      	add	r2, sp, #152	@ 0x98
 8018194:	a91b      	add	r1, sp, #108	@ 0x6c
 8018196:	4630      	mov	r0, r6
 8018198:	f7f9 fa00 	bl	801159c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
      }
 801819c:	a829      	add	r0, sp, #164	@ 0xa4
 801819e:	f7e8 fd33 	bl	8000c08 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80181a2:	e4b4      	b.n	8017b0e <_ZN10Publishers13SpinPublisherEh+0x18a>
					if (not communication->BuildPayload(&message, element) && message.payload.size() > 0) {
 80181a4:	2600      	movs	r6, #0
 80181a6:	e7d0      	b.n	801814a <_ZN10Publishers13SpinPublisherEh+0x7c6>

080181a8 <_ZZN9Registers16AddBaseRegistersEvENUlPvtPPmPtE_4_FUNES0_tS2_S3_>:
void Registers::AddBaseRegisters(void) {
	// Register to get the timestamp in ms
	AddRegister<uint32_t>(REG_TIMEBASE);
	SetRegisterAsSingle(REG_TIMEBASE);
	AddReadCallback<uint32_t>(REG_TIMEBASE, NULL,
		[](void* context, uint16_t register_id, uint32_t** output, uint16_t* length) -> bool {
 80181a8:	b538      	push	{r3, r4, r5, lr}
			*length = 1;
 80181aa:	2401      	movs	r4, #1
			**output = HAL_GetTick();
 80181ac:	6815      	ldr	r5, [r2, #0]
			*length = 1;
 80181ae:	801c      	strh	r4, [r3, #0]
			**output = HAL_GetTick();
 80181b0:	f7eb fa94 	bl	80036dc <HAL_GetTick>
 80181b4:	6028      	str	r0, [r5, #0]
			return true;
		}
 80181b6:	4620      	mov	r0, r4
 80181b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080181bc <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 80181bc:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80181be:	4926      	ldr	r1, [pc, #152]	@ (8018258 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 80181c0:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80181c2:	4826      	ldr	r0, [pc, #152]	@ (801825c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80181c4:	f003 fdbe 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80181c8:	2800      	cmp	r0, #0
 80181ca:	d133      	bne.n	8018234 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80181cc:	4924      	ldr	r1, [pc, #144]	@ (8018260 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa4>)
 80181ce:	4823      	ldr	r0, [pc, #140]	@ (801825c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80181d0:	f003 fdb8 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80181d4:	2800      	cmp	r0, #0
 80181d6:	d12f      	bne.n	8018238 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80181d8:	4920      	ldr	r1, [pc, #128]	@ (801825c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80181da:	4608      	mov	r0, r1
 80181dc:	f003 fdb2 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80181e0:	bb60      	cbnz	r0, 801823c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80181e2:	4920      	ldr	r1, [pc, #128]	@ (8018264 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa8>)
 80181e4:	481d      	ldr	r0, [pc, #116]	@ (801825c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80181e6:	f003 fdad 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80181ea:	bb48      	cbnz	r0, 8018240 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80181ec:	491e      	ldr	r1, [pc, #120]	@ (8018268 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xac>)
 80181ee:	481b      	ldr	r0, [pc, #108]	@ (801825c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80181f0:	f003 fda8 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80181f4:	bb30      	cbnz	r0, 8018244 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80181f6:	491d      	ldr	r1, [pc, #116]	@ (801826c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb0>)
 80181f8:	4818      	ldr	r0, [pc, #96]	@ (801825c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80181fa:	f003 fda3 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80181fe:	bb18      	cbnz	r0, 8018248 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018200:	491b      	ldr	r1, [pc, #108]	@ (8018270 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb4>)
 8018202:	4816      	ldr	r0, [pc, #88]	@ (801825c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018204:	f003 fd9e 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8018208:	bb00      	cbnz	r0, 801824c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 801820a:	491a      	ldr	r1, [pc, #104]	@ (8018274 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb8>)
 801820c:	4813      	ldr	r0, [pc, #76]	@ (801825c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801820e:	f003 fd99 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8018212:	b9e8      	cbnz	r0, 8018250 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018214:	4918      	ldr	r1, [pc, #96]	@ (8018278 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xbc>)
 8018216:	4811      	ldr	r0, [pc, #68]	@ (801825c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018218:	f003 fd94 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801821c:	b9d0      	cbnz	r0, 8018254 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801821e:	4917      	ldr	r1, [pc, #92]	@ (801827c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xc0>)
 8018220:	480e      	ldr	r0, [pc, #56]	@ (801825c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018222:	f003 fd8f 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8018226:	2800      	cmp	r0, #0
 8018228:	bf14      	ite	ne
 801822a:	2309      	movne	r3, #9
 801822c:	2300      	moveq	r3, #0
 801822e:	7020      	strb	r0, [r4, #0]
}
 8018230:	4618      	mov	r0, r3
 8018232:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018234:	2300      	movs	r3, #0
 8018236:	e7fa      	b.n	801822e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018238:	2301      	movs	r3, #1
 801823a:	e7f8      	b.n	801822e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801823c:	2302      	movs	r3, #2
 801823e:	e7f6      	b.n	801822e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018240:	2303      	movs	r3, #3
 8018242:	e7f4      	b.n	801822e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018244:	2304      	movs	r3, #4
 8018246:	e7f2      	b.n	801822e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8018248:	2305      	movs	r3, #5
 801824a:	e7f0      	b.n	801822e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801824c:	2306      	movs	r3, #6
 801824e:	e7ee      	b.n	801822e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8018250:	2307      	movs	r3, #7
 8018252:	e7ec      	b.n	801822e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018254:	2308      	movs	r3, #8
 8018256:	e7ea      	b.n	801822e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
 8018258:	0801ca50 	.word	0x0801ca50
 801825c:	0801ca30 	.word	0x0801ca30
 8018260:	0801ca40 	.word	0x0801ca40
 8018264:	0801ca20 	.word	0x0801ca20
 8018268:	0801ca58 	.word	0x0801ca58
 801826c:	0801ca48 	.word	0x0801ca48
 8018270:	0801ca38 	.word	0x0801ca38
 8018274:	0801ca28 	.word	0x0801ca28
 8018278:	0801ca18 	.word	0x0801ca18
 801827c:	0801ca10 	.word	0x0801ca10

08018280 <_ZN9RegistersC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018280:	2200      	movs	r2, #0
 8018282:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8018286:	60c2      	str	r2, [r0, #12]
 8018288:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
 801828c:	e9c0 2210 	strd	r2, r2, [r0, #64]	@ 0x40
 8018290:	e9c0 2212 	strd	r2, r2, [r0, #72]	@ 0x48
 8018294:	e9c0 2214 	strd	r2, r2, [r0, #80]	@ 0x50
 8018298:	e9c0 2216 	strd	r2, r2, [r0, #88]	@ 0x58
 801829c:	e9c0 2218 	strd	r2, r2, [r0, #96]	@ 0x60
 80182a0:	e9c0 221a 	strd	r2, r2, [r0, #104]	@ 0x68
 80182a4:	e9c0 221c 	strd	r2, r2, [r0, #112]	@ 0x70
 80182a8:	e9c0 221e 	strd	r2, r2, [r0, #120]	@ 0x78
 80182ac:	e9c0 2220 	strd	r2, r2, [r0, #128]	@ 0x80
 80182b0:	e9c0 2222 	strd	r2, r2, [r0, #136]	@ 0x88
 80182b4:	e9c0 2224 	strd	r2, r2, [r0, #144]	@ 0x90
 80182b8:	e9c0 2226 	strd	r2, r2, [r0, #152]	@ 0x98
 80182bc:	e9c0 2228 	strd	r2, r2, [r0, #160]	@ 0xa0
 80182c0:	e9c0 222a 	strd	r2, r2, [r0, #168]	@ 0xa8
Registers::Registers() {
 80182c4:	f100 0238 	add.w	r2, r0, #56	@ 0x38
	callbacks[UINT8_TYPE] = &uint8_t_callbacks;
 80182c8:	6102      	str	r2, [r0, #16]
Registers::Registers() {
 80182ca:	f100 0244 	add.w	r2, r0, #68	@ 0x44
	callbacks[UINT16_TYPE] = &uint16_t_callbacks;
 80182ce:	6142      	str	r2, [r0, #20]
Registers::Registers() {
 80182d0:	f100 0250 	add.w	r2, r0, #80	@ 0x50
	callbacks[UINT32_TYPE] = &uint32_t_callbacks;
 80182d4:	6182      	str	r2, [r0, #24]
Registers::Registers() {
 80182d6:	f100 025c 	add.w	r2, r0, #92	@ 0x5c
	callbacks[UINT64_TYPE] = &uint64_t_callbacks;
 80182da:	61c2      	str	r2, [r0, #28]
Registers::Registers() {
 80182dc:	f100 0268 	add.w	r2, r0, #104	@ 0x68
	callbacks[INT8_TYPE] = &int8_t_callbacks;
 80182e0:	6202      	str	r2, [r0, #32]
Registers::Registers() {
 80182e2:	f100 0274 	add.w	r2, r0, #116	@ 0x74
	callbacks[INT16_TYPE] = &int16_t_callbacks;
 80182e6:	6242      	str	r2, [r0, #36]	@ 0x24
Registers::Registers() {
 80182e8:	f100 0280 	add.w	r2, r0, #128	@ 0x80
	callbacks[INT32_TYPE] = &int32_t_callbacks;
 80182ec:	6282      	str	r2, [r0, #40]	@ 0x28
Registers::Registers() {
 80182ee:	f100 028c 	add.w	r2, r0, #140	@ 0x8c
	callbacks[INT64_TYPE] = &int64_t_callbacks;
 80182f2:	62c2      	str	r2, [r0, #44]	@ 0x2c
Registers::Registers() {
 80182f4:	f100 0298 	add.w	r2, r0, #152	@ 0x98
	callbacks[FLOAT_TYPE] = &float_callbacks;
 80182f8:	6302      	str	r2, [r0, #48]	@ 0x30
Registers::Registers() {
 80182fa:	f100 02a4 	add.w	r2, r0, #164	@ 0xa4
	callbacks[DOUBLE_TYPE] = &double_callbacks;
 80182fe:	6342      	str	r2, [r0, #52]	@ 0x34
}
 8018300:	4770      	bx	lr

08018302 <_ZN9Registers4InitEv>:
	RegistersSemaphore = osSemaphoreNew(1,1,NULL);
 8018302:	2101      	movs	r1, #1
 8018304:	2200      	movs	r2, #0
void Registers::Init(void) {
 8018306:	b510      	push	{r4, lr}
 8018308:	4604      	mov	r4, r0
	RegistersSemaphore = osSemaphoreNew(1,1,NULL);
 801830a:	4608      	mov	r0, r1
 801830c:	f7f4 f9e6 	bl	800c6dc <osSemaphoreNew>
 8018310:	6020      	str	r0, [r4, #0]
}
 8018312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(RegistersSemaphore);
 8018316:	f7f4 ba71 	b.w	800c7fc <osSemaphoreRelease>

0801831a <_ZN9Registers25FindRegisterConfigurationEtPb>:
 *
 * @param input ID: register address
 * @param output success: whether successful
 * @return the pointer to the register configuration
 */
RegisterConfiguration* Registers::FindRegisterConfiguration(uint16_t ID, bool* success) {
 801831a:	b530      	push	{r4, r5, lr}
 801831c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
	for (RegisterConfiguration &register_configuration : registers) {
 8018320:	429c      	cmp	r4, r3
 8018322:	4618      	mov	r0, r3
 8018324:	d103      	bne.n	801832e <_ZN9Registers25FindRegisterConfigurationEtPb+0x14>
 8018326:	2300      	movs	r3, #0
			*success = true;
			return &register_configuration;
		}
	}
	*success = false;
	return NULL;
 8018328:	4618      	mov	r0, r3
			*success = true;
 801832a:	7013      	strb	r3, [r2, #0]
}
 801832c:	bd30      	pop	{r4, r5, pc}
		if (register_configuration.register_info.address == ID) {
 801832e:	8845      	ldrh	r5, [r0, #2]
 8018330:	f100 0310 	add.w	r3, r0, #16
 8018334:	428d      	cmp	r5, r1
 8018336:	d1f3      	bne.n	8018320 <_ZN9Registers25FindRegisterConfigurationEtPb+0x6>
 8018338:	2301      	movs	r3, #1
 801833a:	e7f6      	b.n	801832a <_ZN9Registers25FindRegisterConfigurationEtPb+0x10>

0801833c <_ZN9Registers12FindRegisterEtPb>:
Register Registers::FindRegister(uint16_t ID, bool* success) {
 801833c:	b510      	push	{r4, lr}
 801833e:	4604      	mov	r4, r0
 8018340:	4608      	mov	r0, r1
 8018342:	4611      	mov	r1, r2
	RegisterConfiguration* register_configuration = FindRegisterConfiguration(ID, success);
 8018344:	461a      	mov	r2, r3
 8018346:	f7ff ffe8 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	return register_configuration->register_info;
 801834a:	f8d0 3002 	ldr.w	r3, [r0, #2]
 801834e:	6023      	str	r3, [r4, #0]
 8018350:	88c3      	ldrh	r3, [r0, #6]
}
 8018352:	4620      	mov	r0, r4
	return register_configuration->register_info;
 8018354:	80a3      	strh	r3, [r4, #4]
}
 8018356:	bd10      	pop	{r4, pc}

08018358 <_ZN9Registers20AddRegisterSemaphoreEtPPv>:
 *
 * @param input ID: register address
 * @param input register_semaphore: pointer to the semaphore to link
 * @return whether successful
 */
bool Registers::AddRegisterSemaphore(uint16_t ID, osSemaphoreId_t* register_semaphore) {
 8018358:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801835a:	460e      	mov	r6, r1
 801835c:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801835e:	f04f 31ff 	mov.w	r1, #4294967295
 8018362:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterSemaphore(uint16_t ID, osSemaphoreId_t* register_semaphore) {
 8018364:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018366:	f7f4 fa15 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801836a:	4631      	mov	r1, r6
 801836c:	f10d 0207 	add.w	r2, sp, #7
 8018370:	4620      	mov	r0, r4
 8018372:	f7ff ffd2 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8018376:	f89d 6007 	ldrb.w	r6, [sp, #7]
 801837a:	b92e      	cbnz	r6, 8018388 <_ZN9Registers20AddRegisterSemaphoreEtPPv+0x30>
		osSemaphoreRelease(RegistersSemaphore);
		return false;
	}

	target_register->register_semaphore = register_semaphore;
	osSemaphoreRelease(RegistersSemaphore);
 801837c:	6820      	ldr	r0, [r4, #0]
 801837e:	f7f4 fa3d 	bl	800c7fc <osSemaphoreRelease>
	return true;
}
 8018382:	4630      	mov	r0, r6
 8018384:	b002      	add	sp, #8
 8018386:	bd70      	pop	{r4, r5, r6, pc}
	target_register->register_semaphore = register_semaphore;
 8018388:	60c5      	str	r5, [r0, #12]
 801838a:	e7f7      	b.n	801837c <_ZN9Registers20AddRegisterSemaphoreEtPPv+0x24>

0801838c <_ZN9Registers19SetRegisterAsSingleEt>:
 * @brief Set the register as a single value (not an array nor a vector)
 *
 * @param input ID: register address
 * @return whether successful
 */
bool Registers::SetRegisterAsSingle(uint16_t ID) {
 801838c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801838e:	460d      	mov	r5, r1
 8018390:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018392:	f04f 31ff 	mov.w	r1, #4294967295
 8018396:	6800      	ldr	r0, [r0, #0]
 8018398:	f7f4 f9fc 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801839c:	4629      	mov	r1, r5
 801839e:	f10d 0207 	add.w	r2, sp, #7
 80183a2:	4620      	mov	r0, r4
 80183a4:	f7ff ffb9 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80183a8:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80183ac:	b92d      	cbnz	r5, 80183ba <_ZN9Registers19SetRegisterAsSingleEt+0x2e>
		return false;
	}

	target_register->register_info.isArray = false;
	target_register->register_info.length = 1;
	osSemaphoreRelease(RegistersSemaphore);
 80183ae:	6820      	ldr	r0, [r4, #0]
 80183b0:	f7f4 fa24 	bl	800c7fc <osSemaphoreRelease>
	return true;
}
 80183b4:	4628      	mov	r0, r5
 80183b6:	b003      	add	sp, #12
 80183b8:	bd30      	pop	{r4, r5, pc}
	target_register->register_info.isArray = false;
 80183ba:	2300      	movs	r3, #0
 80183bc:	7143      	strb	r3, [r0, #5]
	target_register->register_info.length = 1;
 80183be:	2301      	movs	r3, #1
 80183c0:	80c3      	strh	r3, [r0, #6]
 80183c2:	e7f4      	b.n	80183ae <_ZN9Registers19SetRegisterAsSingleEt+0x22>

080183c4 <_ZN9Registers18SetRegisterAsArrayEtt>:
 *
 * @param input ID: register address
 * @param input length_: length of the array
 * @return whether successful
 */
bool Registers::SetRegisterAsArray(uint16_t ID, uint16_t length_) {
 80183c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80183c6:	460e      	mov	r6, r1
 80183c8:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80183ca:	f04f 31ff 	mov.w	r1, #4294967295
 80183ce:	6800      	ldr	r0, [r0, #0]
bool Registers::SetRegisterAsArray(uint16_t ID, uint16_t length_) {
 80183d0:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80183d2:	f7f4 f9df 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80183d6:	4631      	mov	r1, r6
 80183d8:	f10d 0207 	add.w	r2, sp, #7
 80183dc:	4620      	mov	r0, r4
 80183de:	f7ff ff9c 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80183e2:	f89d 6007 	ldrb.w	r6, [sp, #7]
 80183e6:	b92e      	cbnz	r6, 80183f4 <_ZN9Registers18SetRegisterAsArrayEtt+0x30>
		return false;
	}

	target_register->register_info.isArray = true;
	target_register->register_info.length = length_;
	osSemaphoreRelease(RegistersSemaphore);
 80183e8:	6820      	ldr	r0, [r4, #0]
 80183ea:	f7f4 fa07 	bl	800c7fc <osSemaphoreRelease>
	return true;
}
 80183ee:	4630      	mov	r0, r6
 80183f0:	b002      	add	sp, #8
 80183f2:	bd70      	pop	{r4, r5, r6, pc}
	target_register->register_info.isArray = true;
 80183f4:	2301      	movs	r3, #1
	target_register->register_info.length = length_;
 80183f6:	80c5      	strh	r5, [r0, #6]
	target_register->register_info.isArray = true;
 80183f8:	7143      	strb	r3, [r0, #5]
	target_register->register_info.length = length_;
 80183fa:	e7f5      	b.n	80183e8 <_ZN9Registers18SetRegisterAsArrayEtt+0x24>

080183fc <_ZN9Registers19SetRegisterAsVectorEt>:
 *
 * @param input ID: register address
 * @return whether successful
 */
bool Registers::SetRegisterAsVector(uint16_t ID) {
	return SetRegisterAsArray(ID, 0);
 80183fc:	2200      	movs	r2, #0
 80183fe:	f7ff bfe1 	b.w	80183c4 <_ZN9Registers18SetRegisterAsArrayEtt>

08018402 <_ZN9Registers22SetRegisterPermissionsEth>:
 *
 * @param input ID: register address
 * @param input permissions_: WRITE_PERMISSION or READ_PERMISSION
 * @return whether successful
 */
bool Registers::SetRegisterPermissions(uint16_t ID, uint8_t permissions_) {
 8018402:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018404:	460e      	mov	r6, r1
 8018406:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018408:	f04f 31ff 	mov.w	r1, #4294967295
 801840c:	6800      	ldr	r0, [r0, #0]
bool Registers::SetRegisterPermissions(uint16_t ID, uint8_t permissions_) {
 801840e:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018410:	f7f4 f9c0 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018414:	4631      	mov	r1, r6
 8018416:	f10d 0207 	add.w	r2, sp, #7
 801841a:	4620      	mov	r0, r4
 801841c:	f7ff ff7d 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8018420:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8018424:	b92e      	cbnz	r6, 8018432 <_ZN9Registers22SetRegisterPermissionsEth+0x30>
		return false;
	}

	target_register->access.write = permissions_ & WRITE_PERMISSION;
	target_register->access.read = permissions_ & READ_PERMISSION;
	osSemaphoreRelease(RegistersSemaphore);
 8018426:	6820      	ldr	r0, [r4, #0]
 8018428:	f7f4 f9e8 	bl	800c7fc <osSemaphoreRelease>
	return true;
}
 801842c:	4630      	mov	r0, r6
 801842e:	b002      	add	sp, #8
 8018430:	bd70      	pop	{r4, r5, r6, pc}
	target_register->access.write = permissions_ & WRITE_PERMISSION;
 8018432:	f005 0301 	and.w	r3, r5, #1
	target_register->access.read = permissions_ & READ_PERMISSION;
 8018436:	f3c5 0540 	ubfx	r5, r5, #1, #1
	target_register->access.write = permissions_ & WRITE_PERMISSION;
 801843a:	7203      	strb	r3, [r0, #8]
	target_register->access.read = permissions_ & READ_PERMISSION;
 801843c:	7245      	strb	r5, [r0, #9]
 801843e:	e7f2      	b.n	8018426 <_ZN9Registers22SetRegisterPermissionsEth+0x24>

08018440 <_ZN9Registers12IsRegisteredEt>:
 * @brief Check the register exists
 *
 * @param input ID: register address to check
 * @return true if the register is found
 */
bool Registers::IsRegistered(uint16_t ID) {
 8018440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018442:	4604      	mov	r4, r0
 8018444:	460d      	mov	r5, r1
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018446:	6800      	ldr	r0, [r0, #0]
 8018448:	f04f 31ff 	mov.w	r1, #4294967295
 801844c:	f7f4 f9a2 	bl	800c794 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8018450:	f10d 0207 	add.w	r2, sp, #7
 8018454:	4629      	mov	r1, r5
 8018456:	4620      	mov	r0, r4
 8018458:	f7ff ff5f 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	osSemaphoreRelease(RegistersSemaphore);
 801845c:	6820      	ldr	r0, [r4, #0]
 801845e:	f7f4 f9cd 	bl	800c7fc <osSemaphoreRelease>
	return success;
}
 8018462:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8018466:	b003      	add	sp, #12
 8018468:	bd30      	pop	{r4, r5, pc}
	...

0801846c <_ZN9Registers16AddBaseRegistersEv>:
void Registers::AddBaseRegisters(void) {
 801846c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801846e:	4604      	mov	r4, r0
 8018470:	b087      	sub	sp, #28
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018472:	f04f 31ff 	mov.w	r1, #4294967295
 8018476:	6800      	ldr	r0, [r0, #0]
 8018478:	f7f4 f98c 	bl	800c794 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801847c:	f10d 0207 	add.w	r2, sp, #7
 8018480:	2100      	movs	r1, #0
 8018482:	4620      	mov	r0, r4
 8018484:	f7ff ff49 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8018488:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801848c:	b1dd      	cbz	r5, 80184c6 <_ZN9Registers16AddBaseRegistersEv+0x5a>
	osSemaphoreRelease(RegistersSemaphore);
 801848e:	6820      	ldr	r0, [r4, #0]
 8018490:	f7f4 f9b4 	bl	800c7fc <osSemaphoreRelease>
	SetRegisterAsSingle(REG_TIMEBASE);
 8018494:	2100      	movs	r1, #0
 8018496:	4620      	mov	r0, r4
 8018498:	f7ff ff78 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801849c:	f04f 31ff 	mov.w	r1, #4294967295
 80184a0:	6820      	ldr	r0, [r4, #0]
 80184a2:	f7f4 f977 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80184a6:	f10d 0207 	add.w	r2, sp, #7
 80184aa:	2100      	movs	r1, #0
 80184ac:	4620      	mov	r0, r4
 80184ae:	f7ff ff34 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80184b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80184b6:	4605      	mov	r5, r0
	if (!success) {
 80184b8:	bb3b      	cbnz	r3, 801850a <_ZN9Registers16AddBaseRegistersEv+0x9e>
	osSemaphoreRelease(RegistersSemaphore);
 80184ba:	6820      	ldr	r0, [r4, #0]
}
 80184bc:	b007      	add	sp, #28
 80184be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80184c2:	f7f4 b99b 	b.w	800c7fc <osSemaphoreRelease>
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80184c6:	f10d 0007 	add.w	r0, sp, #7
 80184ca:	f7ff fe77 	bl	80181bc <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	configuration_.register_info = register_;
 80184ce:	2301      	movs	r3, #1
	configuration_.mode = mode;
 80184d0:	9502      	str	r5, [sp, #8]
	configuration_.register_info = register_;
 80184d2:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 80184d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 80184da:	f88d 000c 	strb.w	r0, [sp, #12]
 80184de:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 80184e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d0d1      	beq.n	801848e <_ZN9Registers16AddBaseRegistersEv+0x22>
      push_back(const value_type& __x)
 80184ea:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80184ec:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 80184f0:	429d      	cmp	r5, r3
 80184f2:	d005      	beq.n	8018500 <_ZN9Registers16AddBaseRegistersEv+0x94>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80184f4:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80184f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 80184fa:	3510      	adds	r5, #16
 80184fc:	60a5      	str	r5, [r4, #8]
 80184fe:	e7c6      	b.n	801848e <_ZN9Registers16AddBaseRegistersEv+0x22>
	  _M_realloc_insert(end(), __x);
 8018500:	4629      	mov	r1, r5
 8018502:	1d20      	adds	r0, r4, #4
 8018504:	f7f6 ff58 	bl	800f3b8 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8018508:	e7c1      	b.n	801848e <_ZN9Registers16AddBaseRegistersEv+0x22>
	uint8_t registered_type = GetTypeID<T>(&success);
 801850a:	f10d 0007 	add.w	r0, sp, #7
 801850e:	f7ff fe55 	bl	80181bc <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 8018512:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018516:	2b00      	cmp	r3, #0
 8018518:	d0cf      	beq.n	80184ba <_ZN9Registers16AddBaseRegistersEv+0x4e>
	if (target_register->register_info.type != registered_type) {
 801851a:	792b      	ldrb	r3, [r5, #4]
 801851c:	4298      	cmp	r0, r3
 801851e:	d1cc      	bne.n	80184ba <_ZN9Registers16AddBaseRegistersEv+0x4e>
	if (callbacks[target_register->register_info.type] == NULL) {
 8018520:	3004      	adds	r0, #4
 8018522:	f854 7020 	ldr.w	r7, [r4, r0, lsl #2]
 8018526:	2f00      	cmp	r7, #0
 8018528:	d0c7      	beq.n	80184ba <_ZN9Registers16AddBaseRegistersEv+0x4e>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801852a:	7829      	ldrb	r1, [r5, #0]
 801852c:	4814      	ldr	r0, [pc, #80]	@ (8018580 <_ZN9Registers16AddBaseRegistersEv+0x114>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801852e:	e9d7 3600 	ldrd	r3, r6, [r7]
 8018532:	1af2      	subs	r2, r6, r3
 8018534:	1112      	asrs	r2, r2, #4
 8018536:	b9b1      	cbnz	r1, 8018566 <_ZN9Registers16AddBaseRegistersEv+0xfa>
 8018538:	7869      	ldrb	r1, [r5, #1]
 801853a:	b9a1      	cbnz	r1, 8018566 <_ZN9Registers16AddBaseRegistersEv+0xfa>
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801853c:	816a      	strh	r2, [r5, #10]
 801853e:	aa02      	add	r2, sp, #8
		callback.read = read;
 8018540:	9005      	str	r0, [sp, #20]
		callback.write = NULL;
 8018542:	e9cd 1103 	strd	r1, r1, [sp, #12]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8018546:	68b9      	ldr	r1, [r7, #8]
 8018548:	42b1      	cmp	r1, r6
 801854a:	d008      	beq.n	801855e <_ZN9Registers16AddBaseRegistersEv+0xf2>
 801854c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801854e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8018552:	3610      	adds	r6, #16
 8018554:	607e      	str	r6, [r7, #4]
	target_register->mode.callbacks = true;
 8018556:	2301      	movs	r3, #1
 8018558:	706b      	strb	r3, [r5, #1]
	target_register->access.read = true;
 801855a:	726b      	strb	r3, [r5, #9]
 801855c:	e7ad      	b.n	80184ba <_ZN9Registers16AddBaseRegistersEv+0x4e>
	  _M_realloc_insert(end(), __x);
 801855e:	4638      	mov	r0, r7
 8018560:	f7fc fd64 	bl	801502c <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8018564:	e7f7      	b.n	8018556 <_ZN9Registers16AddBaseRegistersEv+0xea>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8018566:	8969      	ldrh	r1, [r5, #10]
	if (__n >= this->size())
 8018568:	4291      	cmp	r1, r2
 801856a:	d302      	bcc.n	8018572 <_ZN9Registers16AddBaseRegistersEv+0x106>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801856c:	4805      	ldr	r0, [pc, #20]	@ (8018584 <_ZN9Registers16AddBaseRegistersEv+0x118>)
 801856e:	f003 fc0a 	bl	801bd86 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8018572:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->context = context;
 8018576:	2200      	movs	r2, #0
		callback->read = read;
 8018578:	60d8      	str	r0, [r3, #12]
		callback->context = context;
 801857a:	605a      	str	r2, [r3, #4]
 801857c:	e7eb      	b.n	8018556 <_ZN9Registers16AddBaseRegistersEv+0xea>
 801857e:	bf00      	nop
 8018580:	080181a9 	.word	0x080181a9
 8018584:	0801c5c6 	.word	0x0801c5c6

08018588 <_ZZN7Sensors12AddRegistersEvENUlPvtPPhPtE_4_FUNES0_tS2_S3_>:
void Sensors::AddRegisters(void) {
	// Register to access the general sensor reading status
	registers->AddRegister<uint8_t>(REG_SENSORS_READING_STATUS);
	registers->SetRegisterAsSingle(REG_SENSORS_READING_STATUS);
	registers->AddReadCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
			[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 8018588:	b538      	push	{r3, r4, r5, lr}
 801858a:	4604      	mov	r4, r0
 801858c:	4615      	mov	r5, r2
			Sensors* self = (Sensors*) context;
			osSemaphoreAcquire(self->SensorsSemaphore, osWaitForever);
 801858e:	f04f 31ff 	mov.w	r1, #4294967295
 8018592:	6800      	ldr	r0, [r0, #0]
 8018594:	f7f4 f8fe 	bl	800c794 <osSemaphoreAcquire>
			**output = (uint8_t) self->active;
 8018598:	682b      	ldr	r3, [r5, #0]
 801859a:	7922      	ldrb	r2, [r4, #4]
 801859c:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->SensorsSemaphore);
 801859e:	6820      	ldr	r0, [r4, #0]
 80185a0:	f7f4 f92c 	bl	800c7fc <osSemaphoreRelease>
			return true;
		}
 80185a4:	2001      	movs	r0, #1
 80185a6:	bd38      	pop	{r3, r4, r5, pc}

080185a8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 80185a8:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80185aa:	4926      	ldr	r1, [pc, #152]	@ (8018644 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 80185ac:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80185ae:	4826      	ldr	r0, [pc, #152]	@ (8018648 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80185b0:	f003 fbc8 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80185b4:	2800      	cmp	r0, #0
 80185b6:	d133      	bne.n	8018620 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80185b8:	4924      	ldr	r1, [pc, #144]	@ (801864c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa4>)
 80185ba:	4823      	ldr	r0, [pc, #140]	@ (8018648 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80185bc:	f003 fbc2 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80185c0:	2800      	cmp	r0, #0
 80185c2:	d12f      	bne.n	8018624 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80185c4:	4920      	ldr	r1, [pc, #128]	@ (8018648 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80185c6:	4608      	mov	r0, r1
 80185c8:	f003 fbbc 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80185cc:	bb60      	cbnz	r0, 8018628 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80185ce:	4920      	ldr	r1, [pc, #128]	@ (8018650 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa8>)
 80185d0:	481d      	ldr	r0, [pc, #116]	@ (8018648 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80185d2:	f003 fbb7 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80185d6:	bb48      	cbnz	r0, 801862c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80185d8:	491e      	ldr	r1, [pc, #120]	@ (8018654 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xac>)
 80185da:	481b      	ldr	r0, [pc, #108]	@ (8018648 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80185dc:	f003 fbb2 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80185e0:	bb30      	cbnz	r0, 8018630 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80185e2:	491d      	ldr	r1, [pc, #116]	@ (8018658 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb0>)
 80185e4:	4818      	ldr	r0, [pc, #96]	@ (8018648 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80185e6:	f003 fbad 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80185ea:	bb18      	cbnz	r0, 8018634 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80185ec:	491b      	ldr	r1, [pc, #108]	@ (801865c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb4>)
 80185ee:	4816      	ldr	r0, [pc, #88]	@ (8018648 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80185f0:	f003 fba8 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80185f4:	bb00      	cbnz	r0, 8018638 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80185f6:	491a      	ldr	r1, [pc, #104]	@ (8018660 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb8>)
 80185f8:	4813      	ldr	r0, [pc, #76]	@ (8018648 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 80185fa:	f003 fba3 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80185fe:	b9e8      	cbnz	r0, 801863c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018600:	4918      	ldr	r1, [pc, #96]	@ (8018664 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xbc>)
 8018602:	4811      	ldr	r0, [pc, #68]	@ (8018648 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 8018604:	f003 fb9e 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8018608:	b9d0      	cbnz	r0, 8018640 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801860a:	4917      	ldr	r1, [pc, #92]	@ (8018668 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xc0>)
 801860c:	480e      	ldr	r0, [pc, #56]	@ (8018648 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801860e:	f003 fb99 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8018612:	2800      	cmp	r0, #0
 8018614:	bf14      	ite	ne
 8018616:	2309      	movne	r3, #9
 8018618:	2300      	moveq	r3, #0
 801861a:	7020      	strb	r0, [r4, #0]
}
 801861c:	4618      	mov	r0, r3
 801861e:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018620:	2300      	movs	r3, #0
 8018622:	e7fa      	b.n	801861a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018624:	2301      	movs	r3, #1
 8018626:	e7f8      	b.n	801861a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018628:	2302      	movs	r3, #2
 801862a:	e7f6      	b.n	801861a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801862c:	2303      	movs	r3, #3
 801862e:	e7f4      	b.n	801861a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018630:	2304      	movs	r3, #4
 8018632:	e7f2      	b.n	801861a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 8018634:	2305      	movs	r3, #5
 8018636:	e7f0      	b.n	801861a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018638:	2306      	movs	r3, #6
 801863a:	e7ee      	b.n	801861a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 801863c:	2307      	movs	r3, #7
 801863e:	e7ec      	b.n	801861a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018640:	2308      	movs	r3, #8
 8018642:	e7ea      	b.n	801861a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
 8018644:	0801ca50 	.word	0x0801ca50
 8018648:	0801ca30 	.word	0x0801ca30
 801864c:	0801ca40 	.word	0x0801ca40
 8018650:	0801ca20 	.word	0x0801ca20
 8018654:	0801ca58 	.word	0x0801ca58
 8018658:	0801ca48 	.word	0x0801ca48
 801865c:	0801ca38 	.word	0x0801ca38
 8018660:	0801ca28 	.word	0x0801ca28
 8018664:	0801ca18 	.word	0x0801ca18
 8018668:	0801ca10 	.word	0x0801ca10

0801866c <_ZN9Registers9GetTypeIDItEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 801866c:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801866e:	4926      	ldr	r1, [pc, #152]	@ (8018708 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8018670:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018672:	4826      	ldr	r0, [pc, #152]	@ (801870c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 8018674:	f003 fb66 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8018678:	2800      	cmp	r0, #0
 801867a:	d133      	bne.n	80186e4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801867c:	4923      	ldr	r1, [pc, #140]	@ (801870c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 801867e:	4608      	mov	r0, r1
 8018680:	f003 fb60 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8018684:	2800      	cmp	r0, #0
 8018686:	d12f      	bne.n	80186e8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018688:	4921      	ldr	r1, [pc, #132]	@ (8018710 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa4>)
 801868a:	4820      	ldr	r0, [pc, #128]	@ (801870c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 801868c:	f003 fb5a 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8018690:	bb60      	cbnz	r0, 80186ec <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018692:	4920      	ldr	r1, [pc, #128]	@ (8018714 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa8>)
 8018694:	481d      	ldr	r0, [pc, #116]	@ (801870c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 8018696:	f003 fb55 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801869a:	bb48      	cbnz	r0, 80186f0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801869c:	491e      	ldr	r1, [pc, #120]	@ (8018718 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xac>)
 801869e:	481b      	ldr	r0, [pc, #108]	@ (801870c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80186a0:	f003 fb50 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80186a4:	bb30      	cbnz	r0, 80186f4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80186a6:	491d      	ldr	r1, [pc, #116]	@ (801871c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xb0>)
 80186a8:	4818      	ldr	r0, [pc, #96]	@ (801870c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80186aa:	f003 fb4b 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80186ae:	bb18      	cbnz	r0, 80186f8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80186b0:	491b      	ldr	r1, [pc, #108]	@ (8018720 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xb4>)
 80186b2:	4816      	ldr	r0, [pc, #88]	@ (801870c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80186b4:	f003 fb46 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80186b8:	bb00      	cbnz	r0, 80186fc <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80186ba:	491a      	ldr	r1, [pc, #104]	@ (8018724 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xb8>)
 80186bc:	4813      	ldr	r0, [pc, #76]	@ (801870c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80186be:	f003 fb41 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80186c2:	b9e8      	cbnz	r0, 8018700 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80186c4:	4918      	ldr	r1, [pc, #96]	@ (8018728 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xbc>)
 80186c6:	4811      	ldr	r0, [pc, #68]	@ (801870c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80186c8:	f003 fb3c 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80186cc:	b9d0      	cbnz	r0, 8018704 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80186ce:	4917      	ldr	r1, [pc, #92]	@ (801872c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xc0>)
 80186d0:	480e      	ldr	r0, [pc, #56]	@ (801870c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0xa0>)
 80186d2:	f003 fb37 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80186d6:	2800      	cmp	r0, #0
 80186d8:	bf14      	ite	ne
 80186da:	2309      	movne	r3, #9
 80186dc:	2300      	moveq	r3, #0
 80186de:	7020      	strb	r0, [r4, #0]
}
 80186e0:	4618      	mov	r0, r3
 80186e2:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80186e4:	2300      	movs	r3, #0
 80186e6:	e7fa      	b.n	80186de <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80186e8:	2301      	movs	r3, #1
 80186ea:	e7f8      	b.n	80186de <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80186ec:	2302      	movs	r3, #2
 80186ee:	e7f6      	b.n	80186de <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80186f0:	2303      	movs	r3, #3
 80186f2:	e7f4      	b.n	80186de <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80186f4:	2304      	movs	r3, #4
 80186f6:	e7f2      	b.n	80186de <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80186f8:	2305      	movs	r3, #5
 80186fa:	e7f0      	b.n	80186de <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80186fc:	2306      	movs	r3, #6
 80186fe:	e7ee      	b.n	80186de <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 8018700:	2307      	movs	r3, #7
 8018702:	e7ec      	b.n	80186de <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018704:	2308      	movs	r3, #8
 8018706:	e7ea      	b.n	80186de <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x72>
 8018708:	0801ca50 	.word	0x0801ca50
 801870c:	0801ca40 	.word	0x0801ca40
 8018710:	0801ca30 	.word	0x0801ca30
 8018714:	0801ca20 	.word	0x0801ca20
 8018718:	0801ca58 	.word	0x0801ca58
 801871c:	0801ca48 	.word	0x0801ca48
 8018720:	0801ca38 	.word	0x0801ca38
 8018724:	0801ca28 	.word	0x0801ca28
 8018728:	0801ca18 	.word	0x0801ca18
 801872c:	0801ca10 	.word	0x0801ca10

08018730 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018730:	4926      	ldr	r1, [pc, #152]	@ (80187cc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8018732:	b510      	push	{r4, lr}
 8018734:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018736:	4608      	mov	r0, r1
 8018738:	f003 fb04 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801873c:	2800      	cmp	r0, #0
 801873e:	d133      	bne.n	80187a8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018740:	4923      	ldr	r1, [pc, #140]	@ (80187d0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa0>)
 8018742:	4822      	ldr	r0, [pc, #136]	@ (80187cc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8018744:	f003 fafe 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8018748:	2800      	cmp	r0, #0
 801874a:	d12f      	bne.n	80187ac <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801874c:	4921      	ldr	r1, [pc, #132]	@ (80187d4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa4>)
 801874e:	481f      	ldr	r0, [pc, #124]	@ (80187cc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8018750:	f003 faf8 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8018754:	bb60      	cbnz	r0, 80187b0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018756:	4920      	ldr	r1, [pc, #128]	@ (80187d8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa8>)
 8018758:	481c      	ldr	r0, [pc, #112]	@ (80187cc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801875a:	f003 faf3 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801875e:	bb48      	cbnz	r0, 80187b4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018760:	491e      	ldr	r1, [pc, #120]	@ (80187dc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xac>)
 8018762:	481a      	ldr	r0, [pc, #104]	@ (80187cc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8018764:	f003 faee 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8018768:	bb30      	cbnz	r0, 80187b8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801876a:	491d      	ldr	r1, [pc, #116]	@ (80187e0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb0>)
 801876c:	4817      	ldr	r0, [pc, #92]	@ (80187cc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801876e:	f003 fae9 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8018772:	bb18      	cbnz	r0, 80187bc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018774:	491b      	ldr	r1, [pc, #108]	@ (80187e4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb4>)
 8018776:	4815      	ldr	r0, [pc, #84]	@ (80187cc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8018778:	f003 fae4 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801877c:	bb00      	cbnz	r0, 80187c0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 801877e:	491a      	ldr	r1, [pc, #104]	@ (80187e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb8>)
 8018780:	4812      	ldr	r0, [pc, #72]	@ (80187cc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8018782:	f003 fadf 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8018786:	b9e8      	cbnz	r0, 80187c4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018788:	4918      	ldr	r1, [pc, #96]	@ (80187ec <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xbc>)
 801878a:	4810      	ldr	r0, [pc, #64]	@ (80187cc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801878c:	f003 fada 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8018790:	b9d0      	cbnz	r0, 80187c8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8018792:	4917      	ldr	r1, [pc, #92]	@ (80187f0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xc0>)
 8018794:	480d      	ldr	r0, [pc, #52]	@ (80187cc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8018796:	f003 fad5 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801879a:	2800      	cmp	r0, #0
 801879c:	bf14      	ite	ne
 801879e:	2309      	movne	r3, #9
 80187a0:	2300      	moveq	r3, #0
 80187a2:	7020      	strb	r0, [r4, #0]
}
 80187a4:	4618      	mov	r0, r3
 80187a6:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80187a8:	2300      	movs	r3, #0
 80187aa:	e7fa      	b.n	80187a2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80187ac:	2301      	movs	r3, #1
 80187ae:	e7f8      	b.n	80187a2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80187b0:	2302      	movs	r3, #2
 80187b2:	e7f6      	b.n	80187a2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80187b4:	2303      	movs	r3, #3
 80187b6:	e7f4      	b.n	80187a2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80187b8:	2304      	movs	r3, #4
 80187ba:	e7f2      	b.n	80187a2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80187bc:	2305      	movs	r3, #5
 80187be:	e7f0      	b.n	80187a2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80187c0:	2306      	movs	r3, #6
 80187c2:	e7ee      	b.n	80187a2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80187c4:	2307      	movs	r3, #7
 80187c6:	e7ec      	b.n	80187a2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80187c8:	2308      	movs	r3, #8
 80187ca:	e7ea      	b.n	80187a2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
 80187cc:	0801ca50 	.word	0x0801ca50
 80187d0:	0801ca40 	.word	0x0801ca40
 80187d4:	0801ca30 	.word	0x0801ca30
 80187d8:	0801ca20 	.word	0x0801ca20
 80187dc:	0801ca58 	.word	0x0801ca58
 80187e0:	0801ca48 	.word	0x0801ca48
 80187e4:	0801ca38 	.word	0x0801ca38
 80187e8:	0801ca28 	.word	0x0801ca28
 80187ec:	0801ca18 	.word	0x0801ca18
 80187f0:	0801ca10 	.word	0x0801ca10

080187f4 <_ZN7SensorsC1Ev>:
Sensors::Sensors() {
 80187f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 80187f6:	2300      	movs	r3, #0
 80187f8:	4604      	mov	r4, r0
 80187fa:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 80187fe:	6583      	str	r3, [r0, #88]	@ 0x58
 8018800:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018804:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8018808:	e9c0 3308 	strd	r3, r3, [r0, #32]
 801880c:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8018810:	2050      	movs	r0, #80	@ 0x50
 8018812:	f003 fa00 	bl	801bc16 <_Znwj>
 8018816:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 8018818:	e9d4 6207 	ldrd	r6, r2, [r4, #28]
 801881c:	1b92      	subs	r2, r2, r6
      if (__count > 0)
 801881e:	2a00      	cmp	r2, #0
 8018820:	dd08      	ble.n	8018834 <_ZN7SensorsC1Ev+0x40>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8018822:	4631      	mov	r1, r6
 8018824:	f003 fd2e 	bl	801c284 <memmove>
			- this->_M_impl._M_start);
 8018828:	6a61      	ldr	r1, [r4, #36]	@ 0x24
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801882a:	4630      	mov	r0, r6
 801882c:	1b89      	subs	r1, r1, r6
 801882e:	f003 f9cd 	bl	801bbcc <_ZdlPvj>
      }
 8018832:	e001      	b.n	8018838 <_ZN7SensorsC1Ev+0x44>
	if (__p)
 8018834:	2e00      	cmp	r6, #0
 8018836:	d1f7      	bne.n	8018828 <_ZN7SensorsC1Ev+0x34>
	functions[UINT8_TYPE] = NULL;
 8018838:	2300      	movs	r3, #0
}
 801883a:	4620      	mov	r0, r4
	  this->_M_impl._M_finish = __tmp + __old_size;
 801883c:	e9c4 5507 	strd	r5, r5, [r4, #28]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018840:	3550      	adds	r5, #80	@ 0x50
	functions[UINT16_TYPE] = NULL;
 8018842:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8018846:	6265      	str	r5, [r4, #36]	@ 0x24
	functions[UINT64_TYPE] = NULL;
 8018848:	e9c4 330c 	strd	r3, r3, [r4, #48]	@ 0x30
	functions[INT16_TYPE] = NULL;
 801884c:	e9c4 330e 	strd	r3, r3, [r4, #56]	@ 0x38
	functions[INT64_TYPE] = NULL;
 8018850:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
	functions[FLOAT_TYPE] = &float_sensor_functions;
 8018854:	e9c4 7312 	strd	r7, r3, [r4, #72]	@ 0x48
}
 8018858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801885a <_ZN7Sensors4InitEP9RegistersP10PublishersP13HardwareDelayP4LEDS>:
void Sensors::Init(Registers* registers_, Publishers* publishers_, HardwareDelay* hardware_delay_, LEDS* leds_) {
 801885a:	b510      	push	{r4, lr}
	publishers = publishers_;
 801885c:	e9c0 1217 	strd	r1, r2, [r0, #92]	@ 0x5c
	hardware_delay = hardware_delay_;
 8018860:	6643      	str	r3, [r0, #100]	@ 0x64
	SensorsSemaphore = osSemaphoreNew(1, 1, NULL);
 8018862:	2101      	movs	r1, #1
	leds = leds_;
 8018864:	9b02      	ldr	r3, [sp, #8]
void Sensors::Init(Registers* registers_, Publishers* publishers_, HardwareDelay* hardware_delay_, LEDS* leds_) {
 8018866:	4604      	mov	r4, r0
	SensorsSemaphore = osSemaphoreNew(1, 1, NULL);
 8018868:	2200      	movs	r2, #0
	leds = leds_;
 801886a:	6683      	str	r3, [r0, #104]	@ 0x68
	SensorsSemaphore = osSemaphoreNew(1, 1, NULL);
 801886c:	4608      	mov	r0, r1
 801886e:	f7f3 ff35 	bl	800c6dc <osSemaphoreNew>
 8018872:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(SensorsSemaphore);
 8018874:	f7f3 ffc2 	bl	800c7fc <osSemaphoreRelease>
	active = false;
 8018878:	2300      	movs	r3, #0
 801887a:	7123      	strb	r3, [r4, #4]
	delayed_index = 0;
 801887c:	7363      	strb	r3, [r4, #13]
	period_ms = DEFAULT_SENSORS_PERIOD;
 801887e:	230a      	movs	r3, #10
 8018880:	60a3      	str	r3, [r4, #8]
}
 8018882:	bd10      	pop	{r4, pc}

08018884 <_ZN7Sensors16SetReadingStatusEb>:
 * @brief Set the reading status of the class
 *
 * @param input status: reading status. true = read sensors
 * @return whether successful
 */
bool Sensors::SetReadingStatus(bool status) {
 8018884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018886:	4604      	mov	r4, r0
 8018888:	460d      	mov	r5, r1
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801888a:	6800      	ldr	r0, [r0, #0]
 801888c:	f04f 31ff 	mov.w	r1, #4294967295
 8018890:	f7f3 ff80 	bl	800c794 <osSemaphoreAcquire>
	active = status;
 8018894:	7125      	strb	r5, [r4, #4]

	// Reset all read indexes if reading is stopped to restart a new reading from zero
	if (!status) {
 8018896:	b91d      	cbnz	r5, 80188a0 <_ZN7Sensors16SetReadingStatusEb+0x1c>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8018898:	e9d4 3004 	ldrd	r3, r0, [r4, #16]
		for (I2CInterface &interface : interfaces) {
 801889c:	4298      	cmp	r0, r3
 801889e:	d104      	bne.n	80188aa <_ZN7Sensors16SetReadingStatusEb+0x26>
				}
			}
		}
	}

	osSemaphoreRelease(SensorsSemaphore);
 80188a0:	6820      	ldr	r0, [r4, #0]
 80188a2:	f7f3 ffab 	bl	800c7fc <osSemaphoreRelease>
	return true;
}
 80188a6:	2001      	movs	r0, #1
 80188a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			interface.read_index = 0;
 80188aa:	e9d3 2616 	ldrd	r2, r6, [r3, #88]	@ 0x58
 80188ae:	f883 5055 	strb.w	r5, [r3, #85]	@ 0x55
			for (SensorGroup &sensor_group : interface.sensor_groups) {
 80188b2:	4296      	cmp	r6, r2
 80188b4:	d101      	bne.n	80188ba <_ZN7Sensors16SetReadingStatusEb+0x36>
      operator++() _GLIBCXX_NOEXCEPT
 80188b6:	337c      	adds	r3, #124	@ 0x7c
	return *this;
 80188b8:	e7f0      	b.n	801889c <_ZN7Sensors16SetReadingStatusEb+0x18>
				sensor_group.read_index = 0;
 80188ba:	e9d2 1703 	ldrd	r1, r7, [r2, #12]
 80188be:	7215      	strb	r5, [r2, #8]
				for (Sensor &sensor : sensor_group.sensors) {
 80188c0:	428f      	cmp	r7, r1
 80188c2:	d101      	bne.n	80188c8 <_ZN7Sensors16SetReadingStatusEb+0x44>
      operator++() _GLIBCXX_NOEXCEPT
 80188c4:	3218      	adds	r2, #24
	return *this;
 80188c6:	e7f4      	b.n	80188b2 <_ZN7Sensors16SetReadingStatusEb+0x2e>
					sensor.read_index = 0;
 80188c8:	740d      	strb	r5, [r1, #16]
      operator++() _GLIBCXX_NOEXCEPT
 80188ca:	3128      	adds	r1, #40	@ 0x28
	return *this;
 80188cc:	e7f8      	b.n	80188c0 <_ZN7Sensors16SetReadingStatusEb+0x3c>

080188ce <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			return self->SetReadingStatus((bool) *input);
 80188ce:	7811      	ldrb	r1, [r2, #0]
 80188d0:	3900      	subs	r1, #0
 80188d2:	bf18      	it	ne
 80188d4:	2101      	movne	r1, #1
 80188d6:	f7ff bfd5 	b.w	8018884 <_ZN7Sensors16SetReadingStatusEb>

080188da <_ZN7Sensors25DeactivateAllSensorGroupsEv>:
/**
 * @brief Deactivate all sensor groups on all interfaces
 *
 * @return whether successful
 */
bool Sensors::DeactivateAllSensorGroups(void) {
 80188da:	b538      	push	{r3, r4, r5, lr}
 80188dc:	4604      	mov	r4, r0
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80188de:	f04f 31ff 	mov.w	r1, #4294967295
 80188e2:	6800      	ldr	r0, [r0, #0]
 80188e4:	f7f3 ff56 	bl	800c794 <osSemaphoreAcquire>
	for (I2CInterface &interface : interfaces) {
		for (SensorGroup &sensor_group : interface.sensor_groups) {
			sensor_group.active = false;
 80188e8:	2000      	movs	r0, #0
 80188ea:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
	for (I2CInterface &interface : interfaces) {
 80188ee:	4299      	cmp	r1, r3
 80188f0:	d104      	bne.n	80188fc <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x22>
		}
	}
	osSemaphoreRelease(SensorsSemaphore);
 80188f2:	6820      	ldr	r0, [r4, #0]
 80188f4:	f7f3 ff82 	bl	800c7fc <osSemaphoreRelease>
	return true;
}
 80188f8:	2001      	movs	r0, #1
 80188fa:	bd38      	pop	{r3, r4, r5, pc}
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80188fc:	e9d3 2516 	ldrd	r2, r5, [r3, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 8018900:	4295      	cmp	r5, r2
 8018902:	d101      	bne.n	8018908 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x2e>
      operator++() _GLIBCXX_NOEXCEPT
 8018904:	337c      	adds	r3, #124	@ 0x7c
	return *this;
 8018906:	e7f2      	b.n	80188ee <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x14>
			sensor_group.active = false;
 8018908:	f802 0b18 	strb.w	r0, [r2], #24
 801890c:	e7f8      	b.n	8018900 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x26>

0801890e <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			return self->DeactivateAllSensorGroups();
 801890e:	f7ff bfe4 	b.w	80188da <_ZN7Sensors25DeactivateAllSensorGroupsEv>

08018912 <_ZN7Sensors13DetectSensorsEmm>:
 * @brief Force a detection of I2C sensors to update presence flag. Can be useful if a sensor if plugged after creation
 *
 * @param input trials: number of trials used to detect the sensor
 * @param input timeout: maximum time in ms left to detect a sensor
 */
void Sensors::DetectSensors(uint32_t trials, uint32_t timeout) {
 8018912:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018916:	4605      	mov	r5, r0
 8018918:	9101      	str	r1, [sp, #4]
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801891a:	6800      	ldr	r0, [r0, #0]
 801891c:	f04f 31ff 	mov.w	r1, #4294967295
void Sensors::DetectSensors(uint32_t trials, uint32_t timeout) {
 8018920:	4690      	mov	r8, r2
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8018922:	f7f3 ff37 	bl	800c794 <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8018926:	e9d5 4904 	ldrd	r4, r9, [r5, #16]
	HAL_StatusTypeDef status;
	for (I2CInterface &interface : interfaces) {
 801892a:	45a1      	cmp	r9, r4
 801892c:	d105      	bne.n	801893a <_ZN7Sensors13DetectSensorsEmm+0x28>
					// If not I2C, force presence
					sensor.present = true;
			}
		}
	}
	osSemaphoreRelease(SensorsSemaphore);
 801892e:	6828      	ldr	r0, [r5, #0]
}
 8018930:	b003      	add	sp, #12
 8018932:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	osSemaphoreRelease(SensorsSemaphore);
 8018936:	f7f3 bf61 	b.w	800c7fc <osSemaphoreRelease>
 801893a:	e9d4 6a16 	ldrd	r6, sl, [r4, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 801893e:	45b2      	cmp	sl, r6
 8018940:	d101      	bne.n	8018946 <_ZN7Sensors13DetectSensorsEmm+0x34>
      operator++() _GLIBCXX_NOEXCEPT
 8018942:	347c      	adds	r4, #124	@ 0x7c
	return *this;
 8018944:	e7f1      	b.n	801892a <_ZN7Sensors13DetectSensorsEmm+0x18>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8018946:	e9d6 7b03 	ldrd	r7, fp, [r6, #12]
			for (Sensor &sensor : sensor_group.sensors) {
 801894a:	45bb      	cmp	fp, r7
 801894c:	d101      	bne.n	8018952 <_ZN7Sensors13DetectSensorsEmm+0x40>
      operator++() _GLIBCXX_NOEXCEPT
 801894e:	3618      	adds	r6, #24
	return *this;
 8018950:	e7f5      	b.n	801893e <_ZN7Sensors13DetectSensorsEmm+0x2c>
				if (interface.ID != INTERNAL) {
 8018952:	7823      	ldrb	r3, [r4, #0]
 8018954:	2b0a      	cmp	r3, #10
 8018956:	d00b      	beq.n	8018970 <_ZN7Sensors13DetectSensorsEmm+0x5e>
					status = HAL_I2C_IsDeviceReady(interface.interface, sensor.address, trials, timeout);
 8018958:	4643      	mov	r3, r8
 801895a:	9a01      	ldr	r2, [sp, #4]
 801895c:	88f9      	ldrh	r1, [r7, #6]
 801895e:	68e0      	ldr	r0, [r4, #12]
 8018960:	f7ee fa06 	bl	8006d70 <HAL_I2C_IsDeviceReady>
					sensor.present = (status == HAL_OK);
 8018964:	fab0 f080 	clz	r0, r0
 8018968:	0940      	lsrs	r0, r0, #5
 801896a:	70b8      	strb	r0, [r7, #2]
      operator++() _GLIBCXX_NOEXCEPT
 801896c:	3728      	adds	r7, #40	@ 0x28
	return *this;
 801896e:	e7ec      	b.n	801894a <_ZN7Sensors13DetectSensorsEmm+0x38>
 8018970:	2001      	movs	r0, #1
 8018972:	e7fa      	b.n	801896a <_ZN7Sensors13DetectSensorsEmm+0x58>

08018974 <_ZZN7Sensors12AddRegistersEvENUlPvtPmtE8_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8018974:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint32_t* input, uint16_t length) -> bool {
 8018976:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8018978:	d105      	bne.n	8018986 <_ZZN7Sensors12AddRegistersEvENUlPvtPmtE8_4_FUNES0_tS1_t+0x12>
			self->DetectSensors(input[0], input[1]);
 801897a:	e9d2 1200 	ldrd	r1, r2, [r2]
 801897e:	f7ff ffc8 	bl	8018912 <_ZN7Sensors13DetectSensorsEmm>
 8018982:	2001      	movs	r0, #1
		}
 8018984:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8018986:	2000      	movs	r0, #0
 8018988:	e7fc      	b.n	8018984 <_ZZN7Sensors12AddRegistersEvENUlPvtPmtE8_4_FUNES0_tS1_t+0x10>

0801898a <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>:
 * @param input group_ID: the group ID to find
 * @param output interface_: interface linked to the sensor group
 * @param output success: whether successful
 * @return the sensor group pointer
 */
SensorGroup* Sensors::FindSensorGroupPath(uint8_t group_ID, I2CInterface** interface_, bool* success) {
 801898a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801898c:	e9d0 4604 	ldrd	r4, r6, [r0, #16]
	for (I2CInterface &interface : interfaces) {
 8018990:	42a6      	cmp	r6, r4
 8018992:	d102      	bne.n	801899a <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x10>
 8018994:	2200      	movs	r2, #0
				return sensor_group_pointer;
			}
		}
	}
	*success = false;
	return NULL;
 8018996:	4610      	mov	r0, r2
 8018998:	e00f      	b.n	80189ba <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x30>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801899a:	e9d4 5716 	ldrd	r5, r7, [r4, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 801899e:	42bd      	cmp	r5, r7
 80189a0:	4628      	mov	r0, r5
 80189a2:	d101      	bne.n	80189a8 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x1e>
      operator++() _GLIBCXX_NOEXCEPT
 80189a4:	347c      	adds	r4, #124	@ 0x7c
	return *this;
 80189a6:	e7f3      	b.n	8018990 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x6>
			if (sensor_group.ID == group_ID) {
 80189a8:	f890 c002 	ldrb.w	ip, [r0, #2]
 80189ac:	f100 0518 	add.w	r5, r0, #24
 80189b0:	458c      	cmp	ip, r1
 80189b2:	d1f4      	bne.n	801899e <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x14>
				if (interface_ != NULL) *interface_ = &interface;
 80189b4:	b102      	cbz	r2, 80189b8 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x2e>
 80189b6:	6014      	str	r4, [r2, #0]
SensorGroup* Sensors::FindSensorGroupPath(uint8_t group_ID, I2CInterface** interface_, bool* success) {
 80189b8:	2201      	movs	r2, #1
				*success = true;
 80189ba:	701a      	strb	r2, [r3, #0]
}
 80189bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080189be <_ZN7Sensors15FindSensorGroupEhPb>:
SensorGroup* Sensors::FindSensorGroup(uint8_t group_ID, bool* success) {
 80189be:	4613      	mov	r3, r2
	return FindSensorGroupPath(group_ID, NULL, success);
 80189c0:	2200      	movs	r2, #0
 80189c2:	f7ff bfe2 	b.w	801898a <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>

080189c6 <_ZN7Sensors23SetSensorGroupPrescalerEht>:
bool Sensors::SetSensorGroupPrescaler(uint8_t group_ID, uint16_t prescaler) {
 80189c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80189c8:	4616      	mov	r6, r2
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 80189ca:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::SetSensorGroupPrescaler(uint8_t group_ID, uint16_t prescaler) {
 80189ce:	4604      	mov	r4, r0
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 80189d0:	f7ff fff5 	bl	80189be <_ZN7Sensors15FindSensorGroupEhPb>
	if (!success) return false;
 80189d4:	f89d 7007 	ldrb.w	r7, [sp, #7]
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 80189d8:	4605      	mov	r5, r0
	if (!success) return false;
 80189da:	b147      	cbz	r7, 80189ee <_ZN7Sensors23SetSensorGroupPrescalerEht+0x28>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80189dc:	f04f 31ff 	mov.w	r1, #4294967295
 80189e0:	6820      	ldr	r0, [r4, #0]
 80189e2:	f7f3 fed7 	bl	800c794 <osSemaphoreAcquire>
	osSemaphoreRelease(SensorsSemaphore);
 80189e6:	6820      	ldr	r0, [r4, #0]
	sensor_group->prescaler = prescaler;
 80189e8:	80ae      	strh	r6, [r5, #4]
	osSemaphoreRelease(SensorsSemaphore);
 80189ea:	f7f3 ff07 	bl	800c7fc <osSemaphoreRelease>
}
 80189ee:	4638      	mov	r0, r7
 80189f0:	b003      	add	sp, #12
 80189f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080189f4 <_ZZN7Sensors12AddRegistersEvENUlPvtPttE7_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80189f4:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 80189f6:	4611      	mov	r1, r2
			if (length != 2) return false;
 80189f8:	d103      	bne.n	8018a02 <_ZZN7Sensors12AddRegistersEvENUlPvtPttE7_4_FUNES0_tS1_t+0xe>
			return self->SetSensorGroupPrescaler((uint8_t) input[0], input[1]);
 80189fa:	8852      	ldrh	r2, [r2, #2]
 80189fc:	7809      	ldrb	r1, [r1, #0]
 80189fe:	f7ff bfe2 	b.w	80189c6 <_ZN7Sensors23SetSensorGroupPrescalerEht>
		}
 8018a02:	2000      	movs	r0, #0
 8018a04:	4770      	bx	lr

08018a06 <_ZN7Sensors20SetSensorGroupStatusEhb>:
bool Sensors::SetSensorGroupStatus(uint8_t group_ID, bool status) {
 8018a06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018a08:	4614      	mov	r4, r2
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 8018a0a:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::SetSensorGroupStatus(uint8_t group_ID, bool status) {
 8018a0e:	4606      	mov	r6, r0
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 8018a10:	f7ff ffd5 	bl	80189be <_ZN7Sensors15FindSensorGroupEhPb>
	if (!success) return false;
 8018a14:	f89d 7007 	ldrb.w	r7, [sp, #7]
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 8018a18:	4605      	mov	r5, r0
	if (!success) return false;
 8018a1a:	b14f      	cbz	r7, 8018a30 <_ZN7Sensors20SetSensorGroupStatusEhb+0x2a>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8018a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8018a20:	6830      	ldr	r0, [r6, #0]
 8018a22:	f7f3 feb7 	bl	800c794 <osSemaphoreAcquire>
	sensor_group->active = status;
 8018a26:	702c      	strb	r4, [r5, #0]
	if (!status) {
 8018a28:	b12c      	cbz	r4, 8018a36 <_ZN7Sensors20SetSensorGroupStatusEhb+0x30>
	osSemaphoreRelease(SensorsSemaphore);
 8018a2a:	6830      	ldr	r0, [r6, #0]
 8018a2c:	f7f3 fee6 	bl	800c7fc <osSemaphoreRelease>
}
 8018a30:	4638      	mov	r0, r7
 8018a32:	b003      	add	sp, #12
 8018a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sensor_group->read_index = 0;
 8018a36:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8018a3a:	722c      	strb	r4, [r5, #8]
		for (Sensor &sensor : sensor_group->sensors) {
 8018a3c:	429a      	cmp	r2, r3
 8018a3e:	d0f4      	beq.n	8018a2a <_ZN7Sensors20SetSensorGroupStatusEhb+0x24>
			sensor.read_index = 0;
 8018a40:	741c      	strb	r4, [r3, #16]
      operator++() _GLIBCXX_NOEXCEPT
 8018a42:	3328      	adds	r3, #40	@ 0x28
	return *this;
 8018a44:	e7fa      	b.n	8018a3c <_ZN7Sensors20SetSensorGroupStatusEhb+0x36>

08018a46 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8018a46:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8018a48:	4611      	mov	r1, r2
			if (length != 2) return false;
 8018a4a:	d106      	bne.n	8018a5a <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t+0x14>
			return self->SetSensorGroupStatus(input[0], (bool) input[1]);
 8018a4c:	7852      	ldrb	r2, [r2, #1]
 8018a4e:	7809      	ldrb	r1, [r1, #0]
 8018a50:	3a00      	subs	r2, #0
 8018a52:	bf18      	it	ne
 8018a54:	2201      	movne	r2, #1
 8018a56:	f7ff bfd6 	b.w	8018a06 <_ZN7Sensors20SetSensorGroupStatusEhb>
		}
 8018a5a:	2000      	movs	r0, #0
 8018a5c:	4770      	bx	lr

08018a5e <_ZN7Sensors20DeactivateAllSensorsEh>:
bool Sensors::DeactivateAllSensors(uint8_t group_ID) {
 8018a5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 8018a60:	f10d 0303 	add.w	r3, sp, #3
 8018a64:	aa01      	add	r2, sp, #4
bool Sensors::DeactivateAllSensors(uint8_t group_ID) {
 8018a66:	4604      	mov	r4, r0
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 8018a68:	f7ff ff8f 	bl	801898a <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>
	if (!success) return false;
 8018a6c:	f89d 6003 	ldrb.w	r6, [sp, #3]
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 8018a70:	4605      	mov	r5, r0
	if (!success) return false;
 8018a72:	b166      	cbz	r6, 8018a8e <_ZN7Sensors20DeactivateAllSensorsEh+0x30>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8018a74:	f04f 31ff 	mov.w	r1, #4294967295
 8018a78:	6820      	ldr	r0, [r4, #0]
 8018a7a:	f7f3 fe8b 	bl	800c794 <osSemaphoreAcquire>
		sensor.active = false;
 8018a7e:	2100      	movs	r1, #0
 8018a80:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
	for (Sensor &sensor : sensor_group->sensors) {
 8018a84:	429a      	cmp	r2, r3
 8018a86:	d105      	bne.n	8018a94 <_ZN7Sensors20DeactivateAllSensorsEh+0x36>
	osSemaphoreRelease(SensorsSemaphore);
 8018a88:	6820      	ldr	r0, [r4, #0]
 8018a8a:	f7f3 feb7 	bl	800c7fc <osSemaphoreRelease>
}
 8018a8e:	4630      	mov	r0, r6
 8018a90:	b002      	add	sp, #8
 8018a92:	bd70      	pop	{r4, r5, r6, pc}
		sensor.active = false;
 8018a94:	f803 1b28 	strb.w	r1, [r3], #40
 8018a98:	e7f4      	b.n	8018a84 <_ZN7Sensors20DeactivateAllSensorsEh+0x26>

08018a9a <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			return self->DeactivateAllSensors(*input);
 8018a9a:	7811      	ldrb	r1, [r2, #0]
 8018a9c:	f7ff bfdf 	b.w	8018a5e <_ZN7Sensors20DeactivateAllSensorsEh>

08018aa0 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb>:
 * @param output interface_: interface linked to the sensor
 * @param output sensor_group_: the sensor group linked to the sensor
 * @param output success: whether successful
 * @return the sensor pointer
 */
Sensor* Sensors::FindSensorPath(uint8_t sensor_ID, I2CInterface** interface_, SensorGroup** sensor_group_, bool* success) {
 8018aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018aa4:	e9d0 4704 	ldrd	r4, r7, [r0, #16]
	for (I2CInterface &interface : interfaces) {
 8018aa8:	42a7      	cmp	r7, r4
 8018aaa:	d102      	bne.n	8018ab2 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x12>
 8018aac:	2300      	movs	r3, #0
				}
			}
		}
	}
	*success = false;
	return NULL;
 8018aae:	4618      	mov	r0, r3
 8018ab0:	e017      	b.n	8018ae2 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x42>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8018ab2:	e9d4 5c16 	ldrd	r5, ip, [r4, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 8018ab6:	4565      	cmp	r5, ip
 8018ab8:	d101      	bne.n	8018abe <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x1e>
      operator++() _GLIBCXX_NOEXCEPT
 8018aba:	347c      	adds	r4, #124	@ 0x7c
	return *this;
 8018abc:	e7f4      	b.n	8018aa8 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x8>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8018abe:	e9d5 6e03 	ldrd	r6, lr, [r5, #12]
			for (Sensor &sensor : sensor_group.sensors) {
 8018ac2:	45b6      	cmp	lr, r6
 8018ac4:	4630      	mov	r0, r6
 8018ac6:	d101      	bne.n	8018acc <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x2c>
      operator++() _GLIBCXX_NOEXCEPT
 8018ac8:	3518      	adds	r5, #24
	return *this;
 8018aca:	e7f4      	b.n	8018ab6 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x16>
				if (sensor.ID == sensor_ID) {
 8018acc:	f890 8004 	ldrb.w	r8, [r0, #4]
 8018ad0:	f100 0628 	add.w	r6, r0, #40	@ 0x28
 8018ad4:	4588      	cmp	r8, r1
 8018ad6:	d1f4      	bne.n	8018ac2 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x22>
					if (interface_ != NULL) *interface_ = &interface;
 8018ad8:	b102      	cbz	r2, 8018adc <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x3c>
 8018ada:	6014      	str	r4, [r2, #0]
					if (sensor_group_ != NULL) *sensor_group_ = &sensor_group;
 8018adc:	b103      	cbz	r3, 8018ae0 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x40>
 8018ade:	601d      	str	r5, [r3, #0]
Sensor* Sensors::FindSensorPath(uint8_t sensor_ID, I2CInterface** interface_, SensorGroup** sensor_group_, bool* success) {
 8018ae0:	2301      	movs	r3, #1
					*success = true;
 8018ae2:	9a06      	ldr	r2, [sp, #24]
 8018ae4:	7013      	strb	r3, [r2, #0]
}
 8018ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018aea <_ZN7Sensors10FindSensorEhPb>:
	return FindSensorPath(sensor_ID, NULL, NULL, success);
 8018aea:	2300      	movs	r3, #0
Sensor* Sensors::FindSensor(uint8_t sensor_ID, bool* success) {
 8018aec:	b507      	push	{r0, r1, r2, lr}
	return FindSensorPath(sensor_ID, NULL, NULL, success);
 8018aee:	9200      	str	r2, [sp, #0]
 8018af0:	461a      	mov	r2, r3
 8018af2:	f7ff ffd5 	bl	8018aa0 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb>
}
 8018af6:	b003      	add	sp, #12
 8018af8:	f85d fb04 	ldr.w	pc, [sp], #4

08018afc <_ZN7Sensors15SetSensorStatusEhb>:
bool Sensors::SetSensorStatus(uint8_t sensor_ID, bool status) {
 8018afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018afe:	4616      	mov	r6, r2
	Sensor* sensor = FindSensor(sensor_ID, &success);
 8018b00:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::SetSensorStatus(uint8_t sensor_ID, bool status) {
 8018b04:	4604      	mov	r4, r0
	Sensor* sensor = FindSensor(sensor_ID, &success);
 8018b06:	f7ff fff0 	bl	8018aea <_ZN7Sensors10FindSensorEhPb>
	if (!success) return false;
 8018b0a:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Sensor* sensor = FindSensor(sensor_ID, &success);
 8018b0e:	4605      	mov	r5, r0
	if (!success) return false;
 8018b10:	b147      	cbz	r7, 8018b24 <_ZN7Sensors15SetSensorStatusEhb+0x28>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8018b12:	f04f 31ff 	mov.w	r1, #4294967295
 8018b16:	6820      	ldr	r0, [r4, #0]
 8018b18:	f7f3 fe3c 	bl	800c794 <osSemaphoreAcquire>
	osSemaphoreRelease(SensorsSemaphore);
 8018b1c:	6820      	ldr	r0, [r4, #0]
	sensor->active = status;
 8018b1e:	702e      	strb	r6, [r5, #0]
	osSemaphoreRelease(SensorsSemaphore);
 8018b20:	f7f3 fe6c 	bl	800c7fc <osSemaphoreRelease>
}
 8018b24:	4638      	mov	r0, r7
 8018b26:	b003      	add	sp, #12
 8018b28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018b2a <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8018b2a:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8018b2c:	4611      	mov	r1, r2
			if (length != 2) return false;
 8018b2e:	d106      	bne.n	8018b3e <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x14>
			return self->SetSensorStatus(input[0], (bool) input[1]);
 8018b30:	7852      	ldrb	r2, [r2, #1]
 8018b32:	7809      	ldrb	r1, [r1, #0]
 8018b34:	3a00      	subs	r2, #0
 8018b36:	bf18      	it	ne
 8018b38:	2201      	movne	r2, #1
 8018b3a:	f7ff bfdf 	b.w	8018afc <_ZN7Sensors15SetSensorStatusEhb>
		}
 8018b3e:	2000      	movs	r0, #0
 8018b40:	4770      	bx	lr

08018b42 <_ZN7Sensors23DeactivateAllSensorDataEh>:
bool Sensors::DeactivateAllSensorData(uint8_t sensor_ID) {
 8018b42:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Sensor* sensor = FindSensor(sensor_ID, &success);
 8018b44:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::DeactivateAllSensorData(uint8_t sensor_ID) {
 8018b48:	4604      	mov	r4, r0
	Sensor* sensor = FindSensor(sensor_ID, &success);
 8018b4a:	f7ff ffce 	bl	8018aea <_ZN7Sensors10FindSensorEhPb>
	if (!success) return false;
 8018b4e:	f89d 6007 	ldrb.w	r6, [sp, #7]
	Sensor* sensor = FindSensor(sensor_ID, &success);
 8018b52:	4605      	mov	r5, r0
	if (!success) return false;
 8018b54:	b166      	cbz	r6, 8018b70 <_ZN7Sensors23DeactivateAllSensorDataEh+0x2e>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8018b56:	f04f 31ff 	mov.w	r1, #4294967295
 8018b5a:	6820      	ldr	r0, [r4, #0]
 8018b5c:	f7f3 fe1a 	bl	800c794 <osSemaphoreAcquire>
		data.active = false;
 8018b60:	2100      	movs	r1, #0
 8018b62:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
	for (SensorData &data : sensor->data) {
 8018b66:	429a      	cmp	r2, r3
 8018b68:	d105      	bne.n	8018b76 <_ZN7Sensors23DeactivateAllSensorDataEh+0x34>
	osSemaphoreRelease(SensorsSemaphore);
 8018b6a:	6820      	ldr	r0, [r4, #0]
 8018b6c:	f7f3 fe46 	bl	800c7fc <osSemaphoreRelease>
}
 8018b70:	4630      	mov	r0, r6
 8018b72:	b002      	add	sp, #8
 8018b74:	bd70      	pop	{r4, r5, r6, pc}
		data.active = false;
 8018b76:	f803 1b18 	strb.w	r1, [r3], #24
 8018b7a:	e7f4      	b.n	8018b66 <_ZN7Sensors23DeactivateAllSensorDataEh+0x24>

08018b7c <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t>:
			return self->DeactivateAllSensorData(*input);
 8018b7c:	7811      	ldrb	r1, [r2, #0]
 8018b7e:	f7ff bfe0 	b.w	8018b42 <_ZN7Sensors23DeactivateAllSensorDataEh>

08018b82 <_ZN7Sensors14FindSensorDataEhtPb>:
SensorData* Sensors::FindSensorData(uint8_t sensor_ID, uint16_t sensor_register, bool* success) {
 8018b82:	b538      	push	{r3, r4, r5, lr}
 8018b84:	461c      	mov	r4, r3
 8018b86:	4615      	mov	r5, r2
	Sensor* sensor = FindSensor(sensor_ID, success);
 8018b88:	461a      	mov	r2, r3
 8018b8a:	f7ff ffae 	bl	8018aea <_ZN7Sensors10FindSensorEhPb>
	if (not *success) return NULL;
 8018b8e:	7823      	ldrb	r3, [r4, #0]
 8018b90:	b133      	cbz	r3, 8018ba0 <_ZN7Sensors14FindSensorDataEhtPb+0x1e>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8018b92:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
	for (SensorData &data : sensor->data) {
 8018b96:	429a      	cmp	r2, r3
 8018b98:	4618      	mov	r0, r3
 8018b9a:	d103      	bne.n	8018ba4 <_ZN7Sensors14FindSensorDataEhtPb+0x22>
	*success = false;
 8018b9c:	2300      	movs	r3, #0
 8018b9e:	7023      	strb	r3, [r4, #0]
	if (not *success) return NULL;
 8018ba0:	2000      	movs	r0, #0
 8018ba2:	e003      	b.n	8018bac <_ZN7Sensors14FindSensorDataEhtPb+0x2a>
		if (data.register_address == sensor_register) {
 8018ba4:	8899      	ldrh	r1, [r3, #4]
 8018ba6:	3318      	adds	r3, #24
 8018ba8:	42a9      	cmp	r1, r5
 8018baa:	d1f4      	bne.n	8018b96 <_ZN7Sensors14FindSensorDataEhtPb+0x14>
}
 8018bac:	bd38      	pop	{r3, r4, r5, pc}

08018bae <_ZN7Sensors19SetSensorDataStatusEhtb>:
bool Sensors::SetSensorDataStatus(uint8_t sensor_ID, uint16_t sensor_register, bool status) {
 8018bae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018bb0:	461e      	mov	r6, r3
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 8018bb2:	f10d 0307 	add.w	r3, sp, #7
bool Sensors::SetSensorDataStatus(uint8_t sensor_ID, uint16_t sensor_register, bool status) {
 8018bb6:	4604      	mov	r4, r0
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 8018bb8:	f7ff ffe3 	bl	8018b82 <_ZN7Sensors14FindSensorDataEhtPb>
	if (!success) return false;
 8018bbc:	f89d 7007 	ldrb.w	r7, [sp, #7]
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 8018bc0:	4605      	mov	r5, r0
	if (!success) return false;
 8018bc2:	b147      	cbz	r7, 8018bd6 <_ZN7Sensors19SetSensorDataStatusEhtb+0x28>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8018bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8018bc8:	6820      	ldr	r0, [r4, #0]
 8018bca:	f7f3 fde3 	bl	800c794 <osSemaphoreAcquire>
	osSemaphoreRelease(SensorsSemaphore);
 8018bce:	6820      	ldr	r0, [r4, #0]
	sensor_data->active = status;
 8018bd0:	702e      	strb	r6, [r5, #0]
	osSemaphoreRelease(SensorsSemaphore);
 8018bd2:	f7f3 fe13 	bl	800c7fc <osSemaphoreRelease>
}
 8018bd6:	4638      	mov	r0, r7
 8018bd8:	b003      	add	sp, #12
 8018bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018bdc <_ZZN7Sensors12AddRegistersEvENUlPvtPttE5_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 8018bdc:	2b03      	cmp	r3, #3
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 8018bde:	4611      	mov	r1, r2
			if (length != 3) return false;
 8018be0:	d107      	bne.n	8018bf2 <_ZZN7Sensors12AddRegistersEvENUlPvtPttE5_4_FUNES0_tS1_t+0x16>
			return self->SetSensorDataStatus((uint8_t) input[0], input[1], (bool) input[2]);
 8018be2:	8893      	ldrh	r3, [r2, #4]
 8018be4:	7809      	ldrb	r1, [r1, #0]
 8018be6:	3b00      	subs	r3, #0
 8018be8:	8852      	ldrh	r2, [r2, #2]
 8018bea:	bf18      	it	ne
 8018bec:	2301      	movne	r3, #1
 8018bee:	f7ff bfde 	b.w	8018bae <_ZN7Sensors19SetSensorDataStatusEhtb>
		}
 8018bf2:	2000      	movs	r0, #0
 8018bf4:	4770      	bx	lr

08018bf6 <_ZN9Registers11AddRegisterItEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8018bf6:	b570      	push	{r4, r5, r6, lr}
 8018bf8:	4604      	mov	r4, r0
 8018bfa:	b086      	sub	sp, #24
 8018bfc:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018bfe:	6800      	ldr	r0, [r0, #0]
 8018c00:	f04f 31ff 	mov.w	r1, #4294967295
 8018c04:	f7f3 fdc6 	bl	800c794 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8018c08:	f10d 0207 	add.w	r2, sp, #7
 8018c0c:	4631      	mov	r1, r6
 8018c0e:	4620      	mov	r0, r4
 8018c10:	f7ff fb83 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8018c14:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8018c18:	b125      	cbz	r5, 8018c24 <_ZN9Registers11AddRegisterItEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8018c1a:	6820      	ldr	r0, [r4, #0]
 8018c1c:	f7f3 fdee 	bl	800c7fc <osSemaphoreRelease>
}
 8018c20:	b006      	add	sp, #24
 8018c22:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8018c24:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8018c28:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8018c2c:	f7ff fd1e 	bl	801866c <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	configuration_.register_info = register_;
 8018c30:	2301      	movs	r3, #1
 8018c32:	f8ad 600a 	strh.w	r6, [sp, #10]
 8018c36:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8018c3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8018c3e:	f88d 000c 	strb.w	r0, [sp, #12]
 8018c42:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8018c46:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d0e5      	beq.n	8018c1a <_ZN9Registers11AddRegisterItEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8018c4e:	a902      	add	r1, sp, #8
 8018c50:	1d20      	adds	r0, r4, #4
 8018c52:	f7fc f8f2 	bl	8014e3a <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8018c56:	e7e0      	b.n	8018c1a <_ZN9Registers11AddRegisterItEEbt.isra.0+0x24>

08018c58 <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8018c58:	b570      	push	{r4, r5, r6, lr}
 8018c5a:	4604      	mov	r4, r0
 8018c5c:	b086      	sub	sp, #24
 8018c5e:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018c60:	6800      	ldr	r0, [r0, #0]
 8018c62:	f04f 31ff 	mov.w	r1, #4294967295
 8018c66:	f7f3 fd95 	bl	800c794 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8018c6a:	f10d 0207 	add.w	r2, sp, #7
 8018c6e:	4631      	mov	r1, r6
 8018c70:	4620      	mov	r0, r4
 8018c72:	f7ff fb52 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8018c76:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8018c7a:	b125      	cbz	r5, 8018c86 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8018c7c:	6820      	ldr	r0, [r4, #0]
 8018c7e:	f7f3 fdbd 	bl	800c7fc <osSemaphoreRelease>
}
 8018c82:	b006      	add	sp, #24
 8018c84:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8018c86:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8018c8a:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8018c8e:	f7ff fd4f 	bl	8018730 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 8018c92:	2301      	movs	r3, #1
 8018c94:	f8ad 600a 	strh.w	r6, [sp, #10]
 8018c98:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8018c9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8018ca0:	f88d 000c 	strb.w	r0, [sp, #12]
 8018ca4:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8018ca8:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d0e5      	beq.n	8018c7c <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8018cb0:	a902      	add	r1, sp, #8
 8018cb2:	1d20      	adds	r0, r4, #4
 8018cb4:	f7fc f8c1 	bl	8014e3a <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8018cb8:	e7e0      	b.n	8018c7c <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

08018cba <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8018cba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018cbc:	460c      	mov	r4, r1
 8018cbe:	b087      	sub	sp, #28
 8018cc0:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018cc2:	f04f 31ff 	mov.w	r1, #4294967295
 8018cc6:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8018cc8:	461e      	mov	r6, r3
 8018cca:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018ccc:	f7f3 fd62 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018cd0:	4621      	mov	r1, r4
 8018cd2:	f10d 0207 	add.w	r2, sp, #7
 8018cd6:	4628      	mov	r0, r5
 8018cd8:	f7ff fb1f 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8018cdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018ce0:	4604      	mov	r4, r0
	if (!success) {
 8018ce2:	b923      	cbnz	r3, 8018cee <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 8018ce4:	6828      	ldr	r0, [r5, #0]
 8018ce6:	f7f3 fd89 	bl	800c7fc <osSemaphoreRelease>
}
 8018cea:	b007      	add	sp, #28
 8018cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8018cee:	f10d 0007 	add.w	r0, sp, #7
 8018cf2:	f7ff fd1d 	bl	8018730 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8018cf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d0f2      	beq.n	8018ce4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 8018cfe:	7923      	ldrb	r3, [r4, #4]
 8018d00:	4298      	cmp	r0, r3
 8018d02:	d1ef      	bne.n	8018ce4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 8018d04:	3004      	adds	r0, #4
 8018d06:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8018d0a:	2800      	cmp	r0, #0
 8018d0c:	d0ea      	beq.n	8018ce4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8018d0e:	7823      	ldrb	r3, [r4, #0]
 8018d10:	b983      	cbnz	r3, 8018d34 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 8018d12:	7863      	ldrb	r3, [r4, #1]
 8018d14:	b973      	cbnz	r3, 8018d34 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 8018d16:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 8018d18:	a902      	add	r1, sp, #8
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018d1a:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 8018d1e:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8018d22:	1a9b      	subs	r3, r3, r2
 8018d24:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8018d26:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8018d28:	f7f6 fc36 	bl	800f598 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8018d2c:	2301      	movs	r3, #1
 8018d2e:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8018d30:	7223      	strb	r3, [r4, #8]
 8018d32:	e7d7      	b.n	8018ce4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8018d34:	8961      	ldrh	r1, [r4, #10]
 8018d36:	f7f6 fa93 	bl	800f260 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 8018d3a:	e9c0 7601 	strd	r7, r6, [r0, #4]
 8018d3e:	e7f5      	b.n	8018d2c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x72>

08018d40 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8018d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018d44:	460c      	mov	r4, r1
 8018d46:	b087      	sub	sp, #28
 8018d48:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018d4a:	f04f 31ff 	mov.w	r1, #4294967295
 8018d4e:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8018d50:	4698      	mov	r8, r3
 8018d52:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018d54:	f7f3 fd1e 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018d58:	4621      	mov	r1, r4
 8018d5a:	f10d 0207 	add.w	r2, sp, #7
 8018d5e:	4630      	mov	r0, r6
 8018d60:	f7ff fadb 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8018d64:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018d68:	4604      	mov	r4, r0
	if (!success) {
 8018d6a:	b92b      	cbnz	r3, 8018d78 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 8018d6c:	6830      	ldr	r0, [r6, #0]
 8018d6e:	f7f3 fd45 	bl	800c7fc <osSemaphoreRelease>
}
 8018d72:	b007      	add	sp, #28
 8018d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8018d78:	f10d 0007 	add.w	r0, sp, #7
 8018d7c:	f7ff fc76 	bl	801866c <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	if (!success) {
 8018d80:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	d0f1      	beq.n	8018d6c <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 8018d88:	7923      	ldrb	r3, [r4, #4]
 8018d8a:	4298      	cmp	r0, r3
 8018d8c:	d1ee      	bne.n	8018d6c <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 8018d8e:	3004      	adds	r0, #4
 8018d90:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8018d94:	2f00      	cmp	r7, #0
 8018d96:	d0e9      	beq.n	8018d6c <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8018d98:	7821      	ldrb	r1, [r4, #0]
 8018d9a:	e9d7 3500 	ldrd	r3, r5, [r7]
 8018d9e:	1aea      	subs	r2, r5, r3
 8018da0:	1112      	asrs	r2, r2, #4
 8018da2:	b9b1      	cbnz	r1, 8018dd2 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 8018da4:	7861      	ldrb	r1, [r4, #1]
 8018da6:	b9a1      	cbnz	r1, 8018dd2 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 8018da8:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8018daa:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8018dac:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 8018dae:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8018db0:	42a9      	cmp	r1, r5
		callback.write = write;
 8018db2:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8018db6:	d008      	beq.n	8018dca <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8018db8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8018dba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8018dbe:	3510      	adds	r5, #16
 8018dc0:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 8018dc2:	2301      	movs	r3, #1
 8018dc4:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8018dc6:	7223      	strb	r3, [r4, #8]
 8018dc8:	e7d0      	b.n	8018d6c <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 8018dca:	4638      	mov	r0, r7
 8018dcc:	f7fe f9fc 	bl	80171c8 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8018dd0:	e7f7      	b.n	8018dc2 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8018dd2:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 8018dd4:	4291      	cmp	r1, r2
 8018dd6:	d302      	bcc.n	8018dde <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8018dd8:	4803      	ldr	r0, [pc, #12]	@ (8018de8 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 8018dda:	f002 ffd4 	bl	801bd86 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8018dde:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8018de2:	e9c3 9801 	strd	r9, r8, [r3, #4]
 8018de6:	e7ec      	b.n	8018dc2 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 8018de8:	0801c5c6 	.word	0x0801c5c6

08018dec <_ZN7Sensors12AddRegistersEv>:
void Sensors::AddRegisters(void) {
 8018dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018dee:	4604      	mov	r4, r0
 8018df0:	b087      	sub	sp, #28
	registers->AddRegister<uint8_t>(REG_SENSORS_READING_STATUS);
 8018df2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8018df6:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8018df8:	f7ff ff2e 	bl	8018c58 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SENSORS_READING_STATUS);
 8018dfc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8018e00:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018e02:	f7ff fac3 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddReadCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
 8018e06:	6de6      	ldr	r6, [r4, #92]	@ 0x5c
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018e08:	f04f 31ff 	mov.w	r1, #4294967295
 8018e0c:	6830      	ldr	r0, [r6, #0]
 8018e0e:	f7f3 fcc1 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018e12:	f10d 0207 	add.w	r2, sp, #7
 8018e16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8018e1a:	4630      	mov	r0, r6
 8018e1c:	f7ff fa7d 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8018e20:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018e24:	4605      	mov	r5, r0
	if (!success) {
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	f040 80b6 	bne.w	8018f98 <_ZN7Sensors12AddRegistersEv+0x1ac>
	osSemaphoreRelease(RegistersSemaphore);
 8018e2c:	6830      	ldr	r0, [r6, #0]
 8018e2e:	f7f3 fce5 	bl	800c7fc <osSemaphoreRelease>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
 8018e32:	4b9a      	ldr	r3, [pc, #616]	@ (801909c <_ZN7Sensors12AddRegistersEv+0x2b0>)
 8018e34:	4622      	mov	r2, r4
 8018e36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8018e3a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018e3c:	f7ff ff3d 	bl	8018cba <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_GROUP_STATUS);
 8018e40:	f240 2101 	movw	r1, #513	@ 0x201
 8018e44:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018e46:	f7ff ff07 	bl	8018c58 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SENSORS_GROUP_STATUS, 2);
 8018e4a:	2202      	movs	r2, #2
 8018e4c:	f240 2101 	movw	r1, #513	@ 0x201
 8018e50:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018e52:	f7ff fab7 	bl	80183c4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_GROUP_STATUS, (void*) this,
 8018e56:	4b92      	ldr	r3, [pc, #584]	@ (80190a0 <_ZN7Sensors12AddRegistersEv+0x2b4>)
 8018e58:	4622      	mov	r2, r4
 8018e5a:	f240 2101 	movw	r1, #513	@ 0x201
 8018e5e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018e60:	f7ff ff2b 	bl	8018cba <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_GROUPS);
 8018e64:	f240 2102 	movw	r1, #514	@ 0x202
 8018e68:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018e6a:	f7ff fef5 	bl	8018c58 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_GROUPS);
 8018e6e:	f240 2102 	movw	r1, #514	@ 0x202
 8018e72:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018e74:	f7ff fa8a 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_GROUPS, (void*) this,
 8018e78:	4b8a      	ldr	r3, [pc, #552]	@ (80190a4 <_ZN7Sensors12AddRegistersEv+0x2b8>)
 8018e7a:	4622      	mov	r2, r4
 8018e7c:	f240 2102 	movw	r1, #514	@ 0x202
 8018e80:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018e82:	f7ff ff1a 	bl	8018cba <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_SENSOR_STATUS);
 8018e86:	f240 2103 	movw	r1, #515	@ 0x203
 8018e8a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018e8c:	f7ff fee4 	bl	8018c58 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SENSORS_SENSOR_STATUS, 2);
 8018e90:	2202      	movs	r2, #2
 8018e92:	f240 2103 	movw	r1, #515	@ 0x203
 8018e96:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018e98:	f7ff fa94 	bl	80183c4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_SENSOR_STATUS, (void*) this,
 8018e9c:	4b82      	ldr	r3, [pc, #520]	@ (80190a8 <_ZN7Sensors12AddRegistersEv+0x2bc>)
 8018e9e:	4622      	mov	r2, r4
 8018ea0:	f240 2103 	movw	r1, #515	@ 0x203
 8018ea4:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018ea6:	f7ff ff08 	bl	8018cba <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_SENSORS);
 8018eaa:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8018eae:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018eb0:	f7ff fed2 	bl	8018c58 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_SENSORS);
 8018eb4:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8018eb8:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018eba:	f7ff fa67 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_SENSORS, (void*) this,
 8018ebe:	4b7b      	ldr	r3, [pc, #492]	@ (80190ac <_ZN7Sensors12AddRegistersEv+0x2c0>)
 8018ec0:	4622      	mov	r2, r4
 8018ec2:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8018ec6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018ec8:	f7ff fef7 	bl	8018cba <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_SENSORS_DATA_STATUS);
 8018ecc:	f240 2105 	movw	r1, #517	@ 0x205
 8018ed0:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018ed2:	f7ff fe90 	bl	8018bf6 <_ZN9Registers11AddRegisterItEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SENSORS_DATA_STATUS, 3);
 8018ed6:	2203      	movs	r2, #3
 8018ed8:	f240 2105 	movw	r1, #517	@ 0x205
 8018edc:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018ede:	f7ff fa71 	bl	80183c4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_SENSORS_DATA_STATUS, (void*) this,
 8018ee2:	4b73      	ldr	r3, [pc, #460]	@ (80190b0 <_ZN7Sensors12AddRegistersEv+0x2c4>)
 8018ee4:	4622      	mov	r2, r4
 8018ee6:	f240 2105 	movw	r1, #517	@ 0x205
 8018eea:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018eec:	f7ff ff28 	bl	8018d40 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_ALL_DATA);
 8018ef0:	f240 2106 	movw	r1, #518	@ 0x206
 8018ef4:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018ef6:	f7ff feaf 	bl	8018c58 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_ALL_DATA);
 8018efa:	f240 2106 	movw	r1, #518	@ 0x206
 8018efe:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018f00:	f7ff fa44 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_ALL_DATA, (void*) this,
 8018f04:	4b6b      	ldr	r3, [pc, #428]	@ (80190b4 <_ZN7Sensors12AddRegistersEv+0x2c8>)
 8018f06:	4622      	mov	r2, r4
 8018f08:	f240 2106 	movw	r1, #518	@ 0x206
 8018f0c:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018f0e:	f7ff fed4 	bl	8018cba <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_SENSORS_GROUP_PRESCALER);
 8018f12:	f240 2107 	movw	r1, #519	@ 0x207
 8018f16:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018f18:	f7ff fe6d 	bl	8018bf6 <_ZN9Registers11AddRegisterItEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SENSORS_GROUP_PRESCALER, 2);
 8018f1c:	2202      	movs	r2, #2
 8018f1e:	f240 2107 	movw	r1, #519	@ 0x207
 8018f22:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018f24:	f7ff fa4e 	bl	80183c4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_SENSORS_GROUP_PRESCALER, (void*) this,
 8018f28:	4b63      	ldr	r3, [pc, #396]	@ (80190b8 <_ZN7Sensors12AddRegistersEv+0x2cc>)
 8018f2a:	4622      	mov	r2, r4
 8018f2c:	f240 2107 	movw	r1, #519	@ 0x207
 8018f30:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018f32:	f7ff ff05 	bl	8018d40 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint32_t>(REG_SENSORS_DETECT_SENSORS);
 8018f36:	6de5      	ldr	r5, [r4, #92]	@ 0x5c
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018f38:	f04f 31ff 	mov.w	r1, #4294967295
 8018f3c:	6828      	ldr	r0, [r5, #0]
 8018f3e:	f7f3 fc29 	bl	800c794 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8018f42:	f10d 0207 	add.w	r2, sp, #7
 8018f46:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8018f4a:	4628      	mov	r0, r5
 8018f4c:	f7ff f9e5 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8018f50:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8018f54:	2e00      	cmp	r6, #0
 8018f56:	d04c      	beq.n	8018ff2 <_ZN7Sensors12AddRegistersEv+0x206>
	osSemaphoreRelease(RegistersSemaphore);
 8018f58:	6828      	ldr	r0, [r5, #0]
 8018f5a:	f7f3 fc4f 	bl	800c7fc <osSemaphoreRelease>
	registers->SetRegisterAsArray(REG_SENSORS_DETECT_SENSORS, 2);
 8018f5e:	2202      	movs	r2, #2
 8018f60:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8018f64:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8018f66:	f7ff fa2d 	bl	80183c4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint32_t>(REG_SENSORS_DETECT_SENSORS, (void*) this,
 8018f6a:	6de7      	ldr	r7, [r4, #92]	@ 0x5c
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8018f70:	6838      	ldr	r0, [r7, #0]
 8018f72:	f7f3 fc0f 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018f76:	f10d 0207 	add.w	r2, sp, #7
 8018f7a:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8018f7e:	4638      	mov	r0, r7
 8018f80:	f7ff f9cb 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8018f84:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018f88:	4605      	mov	r5, r0
	if (!success) {
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d14a      	bne.n	8019024 <_ZN7Sensors12AddRegistersEv+0x238>
	osSemaphoreRelease(RegistersSemaphore);
 8018f8e:	6838      	ldr	r0, [r7, #0]
 8018f90:	f7f3 fc34 	bl	800c7fc <osSemaphoreRelease>
}
 8018f94:	b007      	add	sp, #28
 8018f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8018f98:	f10d 0007 	add.w	r0, sp, #7
 8018f9c:	f7ff fbc8 	bl	8018730 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8018fa0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	f43f af41 	beq.w	8018e2c <_ZN7Sensors12AddRegistersEv+0x40>
	if (target_register->register_info.type != registered_type) {
 8018faa:	792b      	ldrb	r3, [r5, #4]
 8018fac:	4298      	cmp	r0, r3
 8018fae:	f47f af3d 	bne.w	8018e2c <_ZN7Sensors12AddRegistersEv+0x40>
	if (callbacks[target_register->register_info.type] == NULL) {
 8018fb2:	3004      	adds	r0, #4
 8018fb4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8018fb8:	2800      	cmp	r0, #0
 8018fba:	f43f af37 	beq.w	8018e2c <_ZN7Sensors12AddRegistersEv+0x40>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8018fbe:	782b      	ldrb	r3, [r5, #0]
 8018fc0:	4f3e      	ldr	r7, [pc, #248]	@ (80190bc <_ZN7Sensors12AddRegistersEv+0x2d0>)
 8018fc2:	b983      	cbnz	r3, 8018fe6 <_ZN7Sensors12AddRegistersEv+0x1fa>
 8018fc4:	786b      	ldrb	r3, [r5, #1]
 8018fc6:	b973      	cbnz	r3, 8018fe6 <_ZN7Sensors12AddRegistersEv+0x1fa>
		target_callback_list->push_back(callback);
 8018fc8:	a902      	add	r1, sp, #8
		callback.read = read;
 8018fca:	9705      	str	r7, [sp, #20]
		callback.write = NULL;
 8018fcc:	e9cd 4303 	strd	r4, r3, [sp, #12]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018fd0:	e9d0 2300 	ldrd	r2, r3, [r0]
 8018fd4:	1a9b      	subs	r3, r3, r2
 8018fd6:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8018fd8:	816b      	strh	r3, [r5, #10]
		target_callback_list->push_back(callback);
 8018fda:	f7f6 fadd 	bl	800f598 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8018fde:	2301      	movs	r3, #1
 8018fe0:	706b      	strb	r3, [r5, #1]
	target_register->access.read = true;
 8018fe2:	726b      	strb	r3, [r5, #9]
 8018fe4:	e722      	b.n	8018e2c <_ZN7Sensors12AddRegistersEv+0x40>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8018fe6:	8969      	ldrh	r1, [r5, #10]
 8018fe8:	f7f6 f93a 	bl	800f260 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->context = context;
 8018fec:	6044      	str	r4, [r0, #4]
		callback->read = read;
 8018fee:	60c7      	str	r7, [r0, #12]
 8018ff0:	e7f5      	b.n	8018fde <_ZN7Sensors12AddRegistersEv+0x1f2>
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8018ff2:	f10d 0007 	add.w	r0, sp, #7
 8018ff6:	f7ff fad7 	bl	80185a8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	configuration_.mode = mode;
 8018ffa:	f04f 7302 	mov.w	r3, #34078720	@ 0x2080000
	configuration_.register_info = register_;
 8018ffe:	f88d 000c 	strb.w	r0, [sp, #12]
	configuration_.mode = mode;
 8019002:	9302      	str	r3, [sp, #8]
	configuration_.register_info = register_;
 8019004:	2301      	movs	r3, #1
 8019006:	f88d 600d 	strb.w	r6, [sp, #13]
 801900a:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801900e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_semaphore = NULL;
 8019012:	e9cd 6604 	strd	r6, r6, [sp, #16]
	if (success) {
 8019016:	2b00      	cmp	r3, #0
 8019018:	d09e      	beq.n	8018f58 <_ZN7Sensors12AddRegistersEv+0x16c>
		registers.push_back(configuration_);
 801901a:	a902      	add	r1, sp, #8
 801901c:	1d28      	adds	r0, r5, #4
 801901e:	f7fb ff0c 	bl	8014e3a <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8019022:	e799      	b.n	8018f58 <_ZN7Sensors12AddRegistersEv+0x16c>
	uint8_t registered_type = GetTypeID<T>(&success);
 8019024:	f10d 0007 	add.w	r0, sp, #7
 8019028:	f7ff fabe 	bl	80185a8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 801902c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019030:	2b00      	cmp	r3, #0
 8019032:	d0ac      	beq.n	8018f8e <_ZN7Sensors12AddRegistersEv+0x1a2>
	if (target_register->register_info.type != registered_type) {
 8019034:	792b      	ldrb	r3, [r5, #4]
 8019036:	4298      	cmp	r0, r3
 8019038:	d1a9      	bne.n	8018f8e <_ZN7Sensors12AddRegistersEv+0x1a2>
	if (callbacks[target_register->register_info.type] == NULL) {
 801903a:	3004      	adds	r0, #4
 801903c:	f857 c020 	ldr.w	ip, [r7, r0, lsl #2]
 8019040:	f1bc 0f00 	cmp.w	ip, #0
 8019044:	d0a3      	beq.n	8018f8e <_ZN7Sensors12AddRegistersEv+0x1a2>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8019046:	7829      	ldrb	r1, [r5, #0]
 8019048:	481d      	ldr	r0, [pc, #116]	@ (80190c0 <_ZN7Sensors12AddRegistersEv+0x2d4>)
 801904a:	e9dc 3600 	ldrd	r3, r6, [ip]
 801904e:	1af2      	subs	r2, r6, r3
 8019050:	1112      	asrs	r2, r2, #4
 8019052:	b9c1      	cbnz	r1, 8019086 <_ZN7Sensors12AddRegistersEv+0x29a>
 8019054:	7869      	ldrb	r1, [r5, #1]
 8019056:	b9b1      	cbnz	r1, 8019086 <_ZN7Sensors12AddRegistersEv+0x29a>
		callback.read = NULL;
 8019058:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801905a:	f8dc 1008 	ldr.w	r1, [ip, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801905e:	816a      	strh	r2, [r5, #10]
      push_back(const value_type& __x)
 8019060:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8019062:	42b1      	cmp	r1, r6
		callback.write = write;
 8019064:	e9cd 4003 	strd	r4, r0, [sp, #12]
 8019068:	d009      	beq.n	801907e <_ZN7Sensors12AddRegistersEv+0x292>
 801906a:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801906c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8019070:	3610      	adds	r6, #16
 8019072:	f8cc 6004 	str.w	r6, [ip, #4]
	target_register->mode.callbacks = true;
 8019076:	2301      	movs	r3, #1
 8019078:	706b      	strb	r3, [r5, #1]
	target_register->access.write = true;
 801907a:	722b      	strb	r3, [r5, #8]
 801907c:	e787      	b.n	8018f8e <_ZN7Sensors12AddRegistersEv+0x1a2>
	  _M_realloc_insert(end(), __x);
 801907e:	4660      	mov	r0, ip
 8019080:	f7fb ffd4 	bl	801502c <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8019084:	e7f7      	b.n	8019076 <_ZN7Sensors12AddRegistersEv+0x28a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8019086:	8969      	ldrh	r1, [r5, #10]
	if (__n >= this->size())
 8019088:	4291      	cmp	r1, r2
 801908a:	d302      	bcc.n	8019092 <_ZN7Sensors12AddRegistersEv+0x2a6>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801908c:	480d      	ldr	r0, [pc, #52]	@ (80190c4 <_ZN7Sensors12AddRegistersEv+0x2d8>)
 801908e:	f002 fe7a 	bl	801bd86 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8019092:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8019096:	e9c3 4001 	strd	r4, r0, [r3, #4]
 801909a:	e7ec      	b.n	8019076 <_ZN7Sensors12AddRegistersEv+0x28a>
 801909c:	080188cf 	.word	0x080188cf
 80190a0:	08018a47 	.word	0x08018a47
 80190a4:	0801890f 	.word	0x0801890f
 80190a8:	08018b2b 	.word	0x08018b2b
 80190ac:	08018a9b 	.word	0x08018a9b
 80190b0:	08018bdd 	.word	0x08018bdd
 80190b4:	08018b7d 	.word	0x08018b7d
 80190b8:	080189f5 	.word	0x080189f5
 80190bc:	08018589 	.word	0x08018589
 80190c0:	08018975 	.word	0x08018975
 80190c4:	0801c5c6 	.word	0x0801c5c6

080190c8 <_ZN8Services4InitEP9RegistersP13CommunicationP4LEDS>:
 *
 * @param input registers_: the Registers instance
 * @param input communication_: the Communication instance
 * @param input leds_: the LEDS instance
 */
void Services::Init(Registers* registers_, Communication* communication_, LEDS* leds_) {
 80190c8:	b510      	push	{r4, lr}
 80190ca:	4604      	mov	r4, r0
	registers = registers_;
 80190cc:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 80190d0:	f8c0 1438 	str.w	r1, [r0, #1080]	@ 0x438
	communication = communication_;
	leds = leds_;

	ServiceSemaphore = osSemaphoreNew(1,1,NULL);
 80190d4:	2101      	movs	r1, #1
	communication = communication_;
 80190d6:	f8c0 243c 	str.w	r2, [r0, #1084]	@ 0x43c
	ServiceSemaphore = osSemaphoreNew(1,1,NULL);
 80190da:	2200      	movs	r2, #0
	leds = leds_;
 80190dc:	f8c0 3440 	str.w	r3, [r0, #1088]	@ 0x440
	ServiceSemaphore = osSemaphoreNew(1,1,NULL);
 80190e0:	4608      	mov	r0, r1
 80190e2:	f7f3 fafb 	bl	800c6dc <osSemaphoreNew>
 80190e6:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(ServiceSemaphore);
}
 80190e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(ServiceSemaphore);
 80190ec:	f7f3 bb86 	b.w	800c7fc <osSemaphoreRelease>

080190f0 <_ZN8Services10ResetQueueEv>:

/**
 * @brief Reset the pending services
 */
void Services::ResetQueue(void) {
 80190f0:	b538      	push	{r3, r4, r5, lr}
	queue_size = 0;
 80190f2:	2500      	movs	r5, #0
void Services::ResetQueue(void) {
 80190f4:	4604      	mov	r4, r0
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 80190f6:	f04f 31ff 	mov.w	r1, #4294967295
	queue_size = 0;
 80190fa:	7105      	strb	r5, [r0, #4]
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 80190fc:	6800      	ldr	r0, [r0, #0]
 80190fe:	f7f3 fb49 	bl	800c794 <osSemaphoreAcquire>
	for (uint8_t index = 0; index < NUMBER_OF_SERVICES; index++) {
		services[index].active = false;
		services[index].reception_flag = false;
		services[index].error = false;
	}
	osSemaphoreRelease(ServiceSemaphore);
 8019102:	6820      	ldr	r0, [r4, #0]
		services[index].active = false;
 8019104:	8125      	strh	r5, [r4, #8]
		services[index].error = false;
 8019106:	7725      	strb	r5, [r4, #28]
		services[index].active = false;
 8019108:	8425      	strh	r5, [r4, #32]
		services[index].error = false;
 801910a:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
}
 801910e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	osSemaphoreRelease(ServiceSemaphore);
 8019112:	f7f3 bb73 	b.w	800c7fc <osSemaphoreRelease>

08019116 <_ZN8ServicesC1Ev>:
Services::Services() {
 8019116:	b510      	push	{r4, lr}
 8019118:	4604      	mov	r4, r0
	ResetQueue();
 801911a:	f7ff ffe9 	bl	80190f0 <_ZN8Services10ResetQueueEv>
}
 801911e:	4620      	mov	r0, r4
 8019120:	bd10      	pop	{r4, pc}

08019122 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>:
 * @param input interface: the interface from which the data comes from, used to find the service
 * @param input access: whether WRITE or READ
 * @param output success: whether successful
 * @return service index
 */
uint8_t Services::FindQueueIndex(uint8_t start_index, Register remote_register, ServiceInterface interface, bool access, bool* success) {
 8019122:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019126:	460c      	mov	r4, r1
 8019128:	a902      	add	r1, sp, #8
 801912a:	4605      	mov	r5, r0
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801912c:	6800      	ldr	r0, [r0, #0]
uint8_t Services::FindQueueIndex(uint8_t start_index, Register remote_register, ServiceInterface interface, bool access, bool* success) {
 801912e:	f89d 8024 	ldrb.w	r8, [sp, #36]	@ 0x24
 8019132:	e901 000c 	stmdb	r1, {r2, r3}
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8019136:	f04f 31ff 	mov.w	r1, #4294967295
 801913a:	f89d 7021 	ldrb.w	r7, [sp, #33]	@ 0x21
 801913e:	f7f3 fb29 	bl	800c794 <osSemaphoreAcquire>
		if (services[index].active) {
			Register registered_register = services[index].configuration.register_;
			ServiceInterface registered_interface =services[index].configuration.interface;

			// Check register address
			if (remote_register.address == registered_register.address) {
 8019142:	f8bd 1000 	ldrh.w	r1, [sp]
 8019146:	eb04 0344 	add.w	r3, r4, r4, lsl #1
				// Check interface
				if (interface.interface == registered_interface.interface) {
 801914a:	f89d 0020 	ldrb.w	r0, [sp, #32]
 801914e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
	for (uint8_t index = start_index; index < NUMBER_OF_SERVICES; index++) {
 8019152:	2c01      	cmp	r4, #1
 8019154:	d905      	bls.n	8019162 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x40>
			}
		}
	}
	osSemaphoreRelease(ServiceSemaphore);
	*success = false;
	return 0;
 8019156:	2400      	movs	r4, #0
	osSemaphoreRelease(ServiceSemaphore);
 8019158:	6828      	ldr	r0, [r5, #0]
 801915a:	f7f3 fb4f 	bl	800c7fc <osSemaphoreRelease>
	return 0;
 801915e:	4626      	mov	r6, r4
 8019160:	e014      	b.n	801918c <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x6a>
		if (services[index].active) {
 8019162:	7a1e      	ldrb	r6, [r3, #8]
 8019164:	b1c6      	cbz	r6, 8019198 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
			if (remote_register.address == registered_register.address) {
 8019166:	895a      	ldrh	r2, [r3, #10]
 8019168:	428a      	cmp	r2, r1
 801916a:	d115      	bne.n	8019198 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
				if (interface.interface == registered_interface.interface) {
 801916c:	7c9a      	ldrb	r2, [r3, #18]
 801916e:	4282      	cmp	r2, r0
 8019170:	d112      	bne.n	8019198 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
			ServiceInterface registered_interface =services[index].configuration.interface;
 8019172:	7cda      	ldrb	r2, [r3, #19]
					if (interface.address == registered_interface.address || registered_interface.address == ALL || interface.address == ALL) {
 8019174:	4297      	cmp	r7, r2
 8019176:	d003      	beq.n	8019180 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x5e>
 8019178:	2aff      	cmp	r2, #255	@ 0xff
 801917a:	d001      	beq.n	8019180 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x5e>
 801917c:	2fff      	cmp	r7, #255	@ 0xff
 801917e:	d10b      	bne.n	8019198 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
						if (access == services[index].configuration.access) { // check access type
 8019180:	7d1a      	ldrb	r2, [r3, #20]
 8019182:	4542      	cmp	r2, r8
 8019184:	d108      	bne.n	8019198 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
							osSemaphoreRelease(ServiceSemaphore);
 8019186:	6828      	ldr	r0, [r5, #0]
 8019188:	f7f3 fb38 	bl	800c7fc <osSemaphoreRelease>
							*success = true;
 801918c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
}
 801918e:	4620      	mov	r0, r4
							*success = true;
 8019190:	701e      	strb	r6, [r3, #0]
}
 8019192:	b002      	add	sp, #8
 8019194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint8_t index = start_index; index < NUMBER_OF_SERVICES; index++) {
 8019198:	3401      	adds	r4, #1
 801919a:	3318      	adds	r3, #24
 801919c:	b2e4      	uxtb	r4, r4
 801919e:	e7d8      	b.n	8019152 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x30>

080191a0 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>:
 * @brief Receive a write service access acknowledgment
 *
 * @param input information: service information associated to the write acknowledgment
 * @param input status: value returned by the remote module
 */
void Services::ReceiveWrite(ServiceConfiguration information, uint8_t status) {
 80191a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80191a4:	b08b      	sub	sp, #44	@ 0x2c
 80191a6:	4605      	mov	r5, r0
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
		if (not success) return;

		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
		buffer_uint8[index][0] = status;
		services[index].reception_flag = true;
 80191a8:	f04f 0918 	mov.w	r9, #24
void Services::ReceiveWrite(ServiceConfiguration information, uint8_t status) {
 80191ac:	ae05      	add	r6, sp, #20
 80191ae:	f89d 7048 	ldrb.w	r7, [sp, #72]	@ 0x48
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 80191b2:	f10d 0827 	add.w	r8, sp, #39	@ 0x27
void Services::ReceiveWrite(ServiceConfiguration information, uint8_t status) {
 80191b6:	e886 000e 	stmia.w	r6, {r1, r2, r3}
	bool success = true;
 80191ba:	2301      	movs	r3, #1
	uint8_t start_index = 0;
 80191bc:	2100      	movs	r1, #0
	bool success = true;
 80191be:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
	while (success) {
 80191c2:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80191c6:	b913      	cbnz	r3, 80191ce <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x2e>
		osSemaphoreRelease(ServiceSemaphore);

		start_index = index + 1;
	}
}
 80191c8:	b00b      	add	sp, #44	@ 0x2c
 80191ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 80191ce:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80191d2:	4628      	mov	r0, r5
 80191d4:	f8cd 8008 	str.w	r8, [sp, #8]
 80191d8:	9301      	str	r3, [sp, #4]
 80191da:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80191de:	f8ad 3000 	strh.w	r3, [sp]
 80191e2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80191e6:	f7ff ff9c 	bl	8019122 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 80191ea:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 80191ee:	4604      	mov	r4, r0
		if (not success) return;
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d0e9      	beq.n	80191c8 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x28>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 80191f4:	f04f 31ff 	mov.w	r1, #4294967295
 80191f8:	6828      	ldr	r0, [r5, #0]
 80191fa:	f7f3 facb 	bl	800c794 <osSemaphoreAcquire>
		services[index].reception_flag = true;
 80191fe:	2201      	movs	r2, #1
		buffer_uint8[index][0] = status;
 8019200:	eb05 2304 	add.w	r3, r5, r4, lsl #8
 8019204:	f883 7038 	strb.w	r7, [r3, #56]	@ 0x38
		services[index].reception_flag = true;
 8019208:	fb09 5304 	mla	r3, r9, r4, r5
		osSemaphoreRelease(ServiceSemaphore);
 801920c:	6828      	ldr	r0, [r5, #0]
		services[index].reception_flag = true;
 801920e:	725a      	strb	r2, [r3, #9]
		osSemaphoreRelease(ServiceSemaphore);
 8019210:	f7f3 faf4 	bl	800c7fc <osSemaphoreRelease>
		start_index = index + 1;
 8019214:	1c61      	adds	r1, r4, #1
 8019216:	b2c9      	uxtb	r1, r1
 8019218:	e7d3      	b.n	80191c2 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x22>

0801921a <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>:
 * @brief Receive an service access error
 *
 * @param input information: service information associated to the acknowledgment
 * @param input error: error flag returned by the remote module
 */
void Services::ReceiveError(ServiceConfiguration information, uint8_t error) {
 801921a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801921e:	b08a      	sub	sp, #40	@ 0x28
 8019220:	4604      	mov	r4, r0
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
		if (not success) return;

		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
		buffer_uint8[index][0] = error;
		services[index].error = true;
 8019222:	2718      	movs	r7, #24
void Services::ReceiveError(ServiceConfiguration information, uint8_t error) {
 8019224:	ae05      	add	r6, sp, #20
 8019226:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 801922a:	f10d 0927 	add.w	r9, sp, #39	@ 0x27
void Services::ReceiveError(ServiceConfiguration information, uint8_t error) {
 801922e:	e886 000e 	stmia.w	r6, {r1, r2, r3}
	bool success = true;
 8019232:	2301      	movs	r3, #1
	uint8_t start_index = 0;
 8019234:	2100      	movs	r1, #0
	bool success = true;
 8019236:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
	while (success) {
 801923a:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801923e:	b913      	cbnz	r3, 8019246 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x2c>
		services[index].reception_flag = true;
		osSemaphoreRelease(ServiceSemaphore);

		start_index = index + 1;
	}
}
 8019240:	b00a      	add	sp, #40	@ 0x28
 8019242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8019246:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801924a:	4620      	mov	r0, r4
 801924c:	f8cd 9008 	str.w	r9, [sp, #8]
 8019250:	9301      	str	r3, [sp, #4]
 8019252:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8019256:	f8ad 3000 	strh.w	r3, [sp]
 801925a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801925e:	f7ff ff60 	bl	8019122 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 8019262:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8019266:	4605      	mov	r5, r0
		if (not success) return;
 8019268:	2b00      	cmp	r3, #0
 801926a:	d0e9      	beq.n	8019240 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x26>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801926c:	f04f 31ff 	mov.w	r1, #4294967295
 8019270:	6820      	ldr	r0, [r4, #0]
 8019272:	f7f3 fa8f 	bl	800c794 <osSemaphoreAcquire>
		services[index].error = true;
 8019276:	f105 0a01 	add.w	sl, r5, #1
		buffer_uint8[index][0] = error;
 801927a:	eb04 2305 	add.w	r3, r4, r5, lsl #8
		services[index].error = true;
 801927e:	2201      	movs	r2, #1
		buffer_uint8[index][0] = error;
 8019280:	f883 8038 	strb.w	r8, [r3, #56]	@ 0x38
		services[index].error = true;
 8019284:	fb05 7307 	mla	r3, r5, r7, r7
		osSemaphoreRelease(ServiceSemaphore);
 8019288:	6820      	ldr	r0, [r4, #0]
		services[index].reception_flag = true;
 801928a:	fb07 4505 	mla	r5, r7, r5, r4
		services[index].error = true;
 801928e:	4423      	add	r3, r4
 8019290:	711a      	strb	r2, [r3, #4]
		services[index].reception_flag = true;
 8019292:	726a      	strb	r2, [r5, #9]
		osSemaphoreRelease(ServiceSemaphore);
 8019294:	f7f3 fab2 	bl	800c7fc <osSemaphoreRelease>
		start_index = index + 1;
 8019298:	fa5f f18a 	uxtb.w	r1, sl
 801929c:	e7cd      	b.n	801923a <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x20>

0801929e <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb>:
 * @param input interface: interface associated to the register to find
 * @param input access: access mode of the register to find
 * @param output success: whether successful
 * @return the Register complete configuration (type, isArray, length)
 */
Register Services::FindRemoteRegister(Register remote_register, ServiceInterface interface, bool access, bool* success) {
 801929e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80192a2:	b087      	sub	sp, #28
 80192a4:	460d      	mov	r5, r1
 80192a6:	4604      	mov	r4, r0
 80192a8:	a904      	add	r1, sp, #16
 80192aa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
	uint8_t index;
	index = FindQueueIndex(0, remote_register, interface, access, success);
 80192ac:	4628      	mov	r0, r5
Register Services::FindRemoteRegister(Register remote_register, ServiceInterface interface, bool access, bool* success) {
 80192ae:	e881 000c 	stmia.w	r1, {r2, r3}
	index = FindQueueIndex(0, remote_register, interface, access, success);
 80192b2:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 80192b6:	9702      	str	r7, [sp, #8]
 80192b8:	9301      	str	r3, [sp, #4]
 80192ba:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80192be:	f8ad 3000 	strh.w	r3, [sp]
 80192c2:	e891 000c 	ldmia.w	r1, {r2, r3}
 80192c6:	2100      	movs	r1, #0
 80192c8:	f7ff ff2b 	bl	8019122 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
	if (*success) {
 80192cc:	783b      	ldrb	r3, [r7, #0]
	index = FindQueueIndex(0, remote_register, interface, access, success);
 80192ce:	4606      	mov	r6, r0
	if (*success) {
 80192d0:	b1f3      	cbz	r3, 8019310 <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb+0x72>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 80192d2:	f04f 31ff 	mov.w	r1, #4294967295
 80192d6:	6828      	ldr	r0, [r5, #0]
 80192d8:	f7f3 fa5c 	bl	800c794 <osSemaphoreAcquire>
		Register found_register = services[index].configuration.register_;
 80192dc:	2318      	movs	r3, #24
 80192de:	210a      	movs	r1, #10
		osSemaphoreRelease(ServiceSemaphore);
 80192e0:	6828      	ldr	r0, [r5, #0]
		Register found_register = services[index].configuration.register_;
 80192e2:	fb03 5206 	mla	r2, r3, r6, r5
 80192e6:	fb13 1306 	smlabb	r3, r3, r6, r1
 80192ea:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 80192ee:	442b      	add	r3, r5
 80192f0:	f892 800c 	ldrb.w	r8, [r2, #12]
 80192f4:	89d6      	ldrh	r6, [r2, #14]
 80192f6:	78df      	ldrb	r7, [r3, #3]
		osSemaphoreRelease(ServiceSemaphore);
 80192f8:	f7f3 fa80 	bl	800c7fc <osSemaphoreRelease>

		return found_register;
 80192fc:	f8a4 9000 	strh.w	r9, [r4]
 8019300:	f884 8002 	strb.w	r8, [r4, #2]
 8019304:	70e7      	strb	r7, [r4, #3]
 8019306:	80a6      	strh	r6, [r4, #4]
	}

	*success = false;
	return Register();
}
 8019308:	4620      	mov	r0, r4
 801930a:	b007      	add	sp, #28
 801930c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return Register();
 8019310:	6023      	str	r3, [r4, #0]
 8019312:	80a3      	strh	r3, [r4, #4]
 8019314:	e7f8      	b.n	8019308 <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb+0x6a>

08019316 <_ZN10Subscriber12ReceiveUINT8E15SubscriberInputPKh>:

#if defined(USE_UINT8_COMMUNICATION) && defined(USE_UINT8_REGISTER)
	/**
	 * @brief WEAK receive a uint8_t published register
	 */
	virtual void ReceiveUINT8(SubscriberInput information, const uint8_t* data) {}
 8019316:	b084      	sub	sp, #16
 8019318:	a804      	add	r0, sp, #16
 801931a:	e900 000e 	stmdb	r0, {r1, r2, r3}
 801931e:	b004      	add	sp, #16
 8019320:	4770      	bx	lr

08019322 <_ZN10Subscriber13ReceiveUINT32E15SubscriberInputPKm>:

#if defined(USE_UINT32_COMMUNICATION) && defined(USE_UINT32_REGISTER)
	/**
	 * @brief WEAK receive a uint32_t published register
	 */
	virtual void ReceiveUINT32(SubscriberInput information, const uint32_t* data) {}
 8019322:	b084      	sub	sp, #16
 8019324:	a804      	add	r0, sp, #16
 8019326:	e900 000e 	stmdb	r0, {r1, r2, r3}
 801932a:	b004      	add	sp, #16
 801932c:	4770      	bx	lr

0801932e <_ZN10Subscriber11ReceiveINT8E15SubscriberInputPKa>:

#if defined(USE_INT8_COMMUNICATION) && defined(USE_INT8_REGISTER)
	/**
	 * @brief WEAK receive a int8_t published register
	 */
	virtual void ReceiveINT8(SubscriberInput information, const int8_t* data) {}
 801932e:	b084      	sub	sp, #16
 8019330:	a804      	add	r0, sp, #16
 8019332:	e900 000e 	stmdb	r0, {r1, r2, r3}
 8019336:	b004      	add	sp, #16
 8019338:	4770      	bx	lr

0801933a <_ZN10Subscriber12ReceiveFLOATE15SubscriberInputPKf>:

#if defined(USE_FLOAT_COMMUNICATION) && defined(USE_FLOAT_REGISTER)
	/**
	 * @brief WEAK receive a float published register
	 */
	virtual void ReceiveFLOAT(SubscriberInput information, const float* data) {}
 801933a:	b084      	sub	sp, #16
 801933c:	a804      	add	r0, sp, #16
 801933e:	e900 000e 	stmdb	r0, {r1, r2, r3}
 8019342:	b004      	add	sp, #16
 8019344:	4770      	bx	lr
	...

08019348 <_ZN10SubscriberC1Ev>:
 *      Author: bignet
 */

#include <Subscribers/Core/Subscriber.hpp>

Subscriber::Subscriber() {
 8019348:	4b01      	ldr	r3, [pc, #4]	@ (8019350 <_ZN10SubscriberC1Ev+0x8>)
 801934a:	6003      	str	r3, [r0, #0]

}
 801934c:	4770      	bx	lr
 801934e:	bf00      	nop
 8019350:	0801c904 	.word	0x0801c904

08019354 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019354:	4926      	ldr	r1, [pc, #152]	@ (80193f0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 8019356:	b510      	push	{r4, lr}
 8019358:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801935a:	4608      	mov	r0, r1
 801935c:	f002 fcf2 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8019360:	2800      	cmp	r0, #0
 8019362:	d133      	bne.n	80193cc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8019364:	4923      	ldr	r1, [pc, #140]	@ (80193f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa0>)
 8019366:	4822      	ldr	r0, [pc, #136]	@ (80193f0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8019368:	f002 fcec 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801936c:	2800      	cmp	r0, #0
 801936e:	d12f      	bne.n	80193d0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8019370:	4921      	ldr	r1, [pc, #132]	@ (80193f8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa4>)
 8019372:	481f      	ldr	r0, [pc, #124]	@ (80193f0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8019374:	f002 fce6 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8019378:	bb60      	cbnz	r0, 80193d4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801937a:	4920      	ldr	r1, [pc, #128]	@ (80193fc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa8>)
 801937c:	481c      	ldr	r0, [pc, #112]	@ (80193f0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801937e:	f002 fce1 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8019382:	bb48      	cbnz	r0, 80193d8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8019384:	491e      	ldr	r1, [pc, #120]	@ (8019400 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xac>)
 8019386:	481a      	ldr	r0, [pc, #104]	@ (80193f0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8019388:	f002 fcdc 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801938c:	bb30      	cbnz	r0, 80193dc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801938e:	491d      	ldr	r1, [pc, #116]	@ (8019404 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb0>)
 8019390:	4817      	ldr	r0, [pc, #92]	@ (80193f0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 8019392:	f002 fcd7 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 8019396:	bb18      	cbnz	r0, 80193e0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8019398:	491b      	ldr	r1, [pc, #108]	@ (8019408 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb4>)
 801939a:	4815      	ldr	r0, [pc, #84]	@ (80193f0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801939c:	f002 fcd2 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80193a0:	bb00      	cbnz	r0, 80193e4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80193a2:	491a      	ldr	r1, [pc, #104]	@ (801940c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb8>)
 80193a4:	4812      	ldr	r0, [pc, #72]	@ (80193f0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80193a6:	f002 fccd 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80193aa:	b9e8      	cbnz	r0, 80193e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80193ac:	4918      	ldr	r1, [pc, #96]	@ (8019410 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xbc>)
 80193ae:	4810      	ldr	r0, [pc, #64]	@ (80193f0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80193b0:	f002 fcc8 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 80193b4:	b9d0      	cbnz	r0, 80193ec <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80193b6:	4917      	ldr	r1, [pc, #92]	@ (8019414 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xc0>)
 80193b8:	480d      	ldr	r0, [pc, #52]	@ (80193f0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 80193ba:	f002 fcc3 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80193be:	2800      	cmp	r0, #0
 80193c0:	bf14      	ite	ne
 80193c2:	2309      	movne	r3, #9
 80193c4:	2300      	moveq	r3, #0
 80193c6:	7020      	strb	r0, [r4, #0]
}
 80193c8:	4618      	mov	r0, r3
 80193ca:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80193cc:	2300      	movs	r3, #0
 80193ce:	e7fa      	b.n	80193c6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80193d0:	2301      	movs	r3, #1
 80193d2:	e7f8      	b.n	80193c6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80193d4:	2302      	movs	r3, #2
 80193d6:	e7f6      	b.n	80193c6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80193d8:	2303      	movs	r3, #3
 80193da:	e7f4      	b.n	80193c6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80193dc:	2304      	movs	r3, #4
 80193de:	e7f2      	b.n	80193c6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 80193e0:	2305      	movs	r3, #5
 80193e2:	e7f0      	b.n	80193c6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80193e4:	2306      	movs	r3, #6
 80193e6:	e7ee      	b.n	80193c6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 80193e8:	2307      	movs	r3, #7
 80193ea:	e7ec      	b.n	80193c6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80193ec:	2308      	movs	r3, #8
 80193ee:	e7ea      	b.n	80193c6 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
 80193f0:	0801ca50 	.word	0x0801ca50
 80193f4:	0801ca40 	.word	0x0801ca40
 80193f8:	0801ca30 	.word	0x0801ca30
 80193fc:	0801ca20 	.word	0x0801ca20
 8019400:	0801ca58 	.word	0x0801ca58
 8019404:	0801ca48 	.word	0x0801ca48
 8019408:	0801ca38 	.word	0x0801ca38
 801940c:	0801ca28 	.word	0x0801ca28
 8019410:	0801ca18 	.word	0x0801ca18
 8019414:	0801ca10 	.word	0x0801ca10

08019418 <_ZN17MasterSubscribersC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8019418:	2200      	movs	r2, #0
 801941a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801941e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019422:	e9c0 2207 	strd	r2, r2, [r0, #28]

/**
 * @brief Class constructor
 */
MasterSubscribers::MasterSubscribers() {
}
 8019426:	4770      	bx	lr

08019428 <_ZN17MasterSubscribers4InitEP9RegistersP4LEDS>:
 * @brief Initialize the class with references to other classes. Set default values.
 *
 * @param input registers_: the Registers instance
 * @param input leds_: the LEDS instance
 */
void MasterSubscribers::Init(Registers* registers_, LEDS* leds_) {
 8019428:	b510      	push	{r4, lr}
	registers = registers_;
	leds = leds_;
 801942a:	e9c0 1200 	strd	r1, r2, [r0]

	SubscribersSemaphore = osSemaphoreNew(1,1,NULL);
 801942e:	2101      	movs	r1, #1
void MasterSubscribers::Init(Registers* registers_, LEDS* leds_) {
 8019430:	4604      	mov	r4, r0
	SubscribersSemaphore = osSemaphoreNew(1,1,NULL);
 8019432:	2200      	movs	r2, #0
 8019434:	4608      	mov	r0, r1
 8019436:	f7f3 f951 	bl	800c6dc <osSemaphoreNew>
 801943a:	60a0      	str	r0, [r4, #8]
	osSemaphoreRelease(SubscribersSemaphore);
}
 801943c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(SubscribersSemaphore);
 8019440:	f7f3 b9dc 	b.w	800c7fc <osSemaphoreRelease>

08019444 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>:
 *
 * @param input ID: subscriber ID
 * @param output success: whether successful
 * @return the subscriber index
 */
uint8_t MasterSubscribers::FindSubscriberIndex(uint8_t ID, bool* success) {
 8019444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019446:	4604      	mov	r4, r0
 8019448:	460d      	mov	r5, r1
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801944a:	6880      	ldr	r0, [r0, #8]
 801944c:	f04f 31ff 	mov.w	r1, #4294967295
uint8_t MasterSubscribers::FindSubscriberIndex(uint8_t ID, bool* success) {
 8019450:	4616      	mov	r6, r2
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8019452:	f7f3 f99f 	bl	800c794 <osSemaphoreAcquire>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019456:	4a10      	ldr	r2, [pc, #64]	@ (8019498 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x54>)
	for (uint8_t index = 0; index < configurations.size(); index++) {
		if (configurations[index].ID == ID) {
 8019458:	2728      	movs	r7, #40	@ 0x28
 801945a:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 801945e:	1a5b      	subs	r3, r3, r1
 8019460:	10db      	asrs	r3, r3, #3
 8019462:	4353      	muls	r3, r2
	for (uint8_t index = 0; index < configurations.size(); index++) {
 8019464:	2200      	movs	r2, #0
 8019466:	b2d0      	uxtb	r0, r2
 8019468:	4298      	cmp	r0, r3
 801946a:	d305      	bcc.n	8019478 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x34>
			osSemaphoreRelease(SubscribersSemaphore);
			*success = true;
			return index;
		}
	}
	osSemaphoreRelease(SubscribersSemaphore);
 801946c:	68a0      	ldr	r0, [r4, #8]
 801946e:	f7f3 f9c5 	bl	800c7fc <osSemaphoreRelease>
	*success = false;
	return 0;
 8019472:	2300      	movs	r3, #0
 8019474:	461d      	mov	r5, r3
 8019476:	e00b      	b.n	8019490 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x4c>
		if (configurations[index].ID == ID) {
 8019478:	fb07 fc00 	mul.w	ip, r7, r0
 801947c:	3201      	adds	r2, #1
 801947e:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8019482:	45ac      	cmp	ip, r5
 8019484:	d1ef      	bne.n	8019466 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x22>
 8019486:	4605      	mov	r5, r0
			osSemaphoreRelease(SubscribersSemaphore);
 8019488:	68a0      	ldr	r0, [r4, #8]
 801948a:	f7f3 f9b7 	bl	800c7fc <osSemaphoreRelease>
			return index;
 801948e:	2301      	movs	r3, #1
}
 8019490:	4628      	mov	r0, r5
			*success = true;
 8019492:	7033      	strb	r3, [r6, #0]
}
 8019494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019496:	bf00      	nop
 8019498:	cccccccd 	.word	0xcccccccd

0801949c <_ZN17MasterSubscribers19SetSubscriberStatusEhb>:
bool MasterSubscribers::SetSubscriberStatus(uint8_t ID, bool status) {
 801949c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801949e:	4616      	mov	r6, r2
	uint8_t index = FindSubscriberIndex(ID, &success);
 80194a0:	f10d 0207 	add.w	r2, sp, #7
bool MasterSubscribers::SetSubscriberStatus(uint8_t ID, bool status) {
 80194a4:	4605      	mov	r5, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 80194a6:	f7ff ffcd 	bl	8019444 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 80194aa:	f89d 7007 	ldrb.w	r7, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 80194ae:	4604      	mov	r4, r0
	if (!success) return false;
 80194b0:	b177      	cbz	r7, 80194d0 <_ZN17MasterSubscribers19SetSubscriberStatusEhb+0x34>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 80194b2:	f04f 31ff 	mov.w	r1, #4294967295
 80194b6:	68a8      	ldr	r0, [r5, #8]
 80194b8:	f7f3 f96c 	bl	800c794 <osSemaphoreAcquire>
	configurations[index].activated = status;
 80194bc:	68e9      	ldr	r1, [r5, #12]
	return *(this->_M_impl._M_start + __n);
 80194be:	b223      	sxth	r3, r4
	osSemaphoreRelease(SubscribersSemaphore);
 80194c0:	68a8      	ldr	r0, [r5, #8]
 80194c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	configurations[index].activated = status;
 80194c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80194ca:	704e      	strb	r6, [r1, #1]
	osSemaphoreRelease(SubscribersSemaphore);
 80194cc:	f7f3 f996 	bl	800c7fc <osSemaphoreRelease>
}
 80194d0:	4638      	mov	r0, r7
 80194d2:	b003      	add	sp, #12
 80194d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080194d6 <_ZN17MasterSubscribers18ActivateSubscriberEh>:
	return SetSubscriberStatus(ID, true);
 80194d6:	2201      	movs	r2, #1
 80194d8:	f7ff bfe0 	b.w	801949c <_ZN17MasterSubscribers19SetSubscriberStatusEhb>

080194dc <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80194dc:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80194de:	4611      	mov	r1, r2
 80194e0:	b508      	push	{r3, lr}
			if (length != 2) return false;
 80194e2:	d108      	bne.n	80194f6 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x1a>
			self->SetSubscriberStatus(input[0], (bool) input[1]);
 80194e4:	7852      	ldrb	r2, [r2, #1]
 80194e6:	7809      	ldrb	r1, [r1, #0]
 80194e8:	3a00      	subs	r2, #0
 80194ea:	bf18      	it	ne
 80194ec:	2201      	movne	r2, #1
 80194ee:	f7ff ffd5 	bl	801949c <_ZN17MasterSubscribers19SetSubscriberStatusEhb>
			return true;
 80194f2:	2001      	movs	r0, #1
		}
 80194f4:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 80194f6:	2000      	movs	r0, #0
 80194f8:	e7fc      	b.n	80194f4 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x18>

080194fa <_ZN17MasterSubscribers15AddressAcceptedEhh>:
bool MasterSubscribers::AddressAccepted(uint8_t ID, uint8_t address) {
 80194fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80194fc:	4616      	mov	r6, r2
	uint8_t index = FindSubscriberIndex(ID, &success);
 80194fe:	f10d 0207 	add.w	r2, sp, #7
bool MasterSubscribers::AddressAccepted(uint8_t ID, uint8_t address) {
 8019502:	4605      	mov	r5, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 8019504:	f7ff ff9e 	bl	8019444 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 8019508:	f89d 7007 	ldrb.w	r7, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 801950c:	4604      	mov	r4, r0
	if (!success) return false;
 801950e:	b1ef      	cbz	r7, 801954c <_ZN17MasterSubscribers15AddressAcceptedEhh+0x52>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8019510:	f04f 31ff 	mov.w	r1, #4294967295
 8019514:	68a8      	ldr	r0, [r5, #8]
 8019516:	f7f3 f93d 	bl	800c794 <osSemaphoreAcquire>
 801951a:	68ea      	ldr	r2, [r5, #12]
 801951c:	b223      	sxth	r3, r4
 801951e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019522:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019526:	e9d3 3207 	ldrd	r3, r2, [r3, #28]
	if (configurations[index].filters.size() == 0) {
 801952a:	429a      	cmp	r2, r3
 801952c:	d109      	bne.n	8019542 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x48>
		osSemaphoreRelease(SubscribersSemaphore);
 801952e:	68a8      	ldr	r0, [r5, #8]
 8019530:	f7f3 f964 	bl	800c7fc <osSemaphoreRelease>
}
 8019534:	4638      	mov	r0, r7
 8019536:	b003      	add	sp, #12
 8019538:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (uint8_t filtered_address : configurations[index].filters) {
 801953a:	f813 1b01 	ldrb.w	r1, [r3], #1
		if (filtered_address == address) {
 801953e:	42b1      	cmp	r1, r6
 8019540:	e7f4      	b.n	801952c <_ZN17MasterSubscribers15AddressAcceptedEhh+0x32>
	for (uint8_t filtered_address : configurations[index].filters) {
 8019542:	4293      	cmp	r3, r2
 8019544:	d1f9      	bne.n	801953a <_ZN17MasterSubscribers15AddressAcceptedEhh+0x40>
	osSemaphoreRelease(SubscribersSemaphore);
 8019546:	68a8      	ldr	r0, [r5, #8]
 8019548:	f7f3 f958 	bl	800c7fc <osSemaphoreRelease>
	if (!success) return false;
 801954c:	2700      	movs	r7, #0
 801954e:	e7f1      	b.n	8019534 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x3a>

08019550 <_ZN17MasterSubscribers12ClearFiltersEh>:
bool MasterSubscribers::ClearFilters(uint8_t ID) {
 8019550:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t index = FindSubscriberIndex(ID, &success);
 8019552:	f10d 0207 	add.w	r2, sp, #7
bool MasterSubscribers::ClearFilters(uint8_t ID) {
 8019556:	4605      	mov	r5, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 8019558:	f7ff ff74 	bl	8019444 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 801955c:	f89d 6007 	ldrb.w	r6, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 8019560:	4604      	mov	r4, r0
	if (!success) return false;
 8019562:	b196      	cbz	r6, 801958a <_ZN17MasterSubscribers12ClearFiltersEh+0x3a>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8019564:	f04f 31ff 	mov.w	r1, #4294967295
 8019568:	68a8      	ldr	r0, [r5, #8]
 801956a:	f7f3 f913 	bl	800c794 <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 801956e:	68ea      	ldr	r2, [r5, #12]
 8019570:	b223      	sxth	r3, r4
	osSemaphoreRelease(SubscribersSemaphore);
 8019572:	68a8      	ldr	r0, [r5, #8]
 8019574:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019578:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801957c:	e9d3 2107 	ldrd	r2, r1, [r3, #28]
 8019580:	428a      	cmp	r2, r1
	    this->_M_impl._M_finish = __pos;
 8019582:	bf18      	it	ne
 8019584:	621a      	strne	r2, [r3, #32]
 8019586:	f7f3 f939 	bl	800c7fc <osSemaphoreRelease>
}
 801958a:	4630      	mov	r0, r6
 801958c:	b002      	add	sp, #8
 801958e:	bd70      	pop	{r4, r5, r6, pc}

08019590 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			self->ClearFilters(*input);
 8019590:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8019592:	b508      	push	{r3, lr}
			self->ClearFilters(*input);
 8019594:	f7ff ffdc 	bl	8019550 <_ZN17MasterSubscribers12ClearFiltersEh>
		}
 8019598:	2001      	movs	r0, #1
 801959a:	bd08      	pop	{r3, pc}

0801959c <_ZN17MasterSubscribers35RemoteRegisterSubscriptionAvailableE8Register19SubscriberInterface>:
 *
 * @param input remote_register: register configuration
 * @param input interface: interface from which the published data comes from
 * @return true if a subscriber can subscribe to the input register configuration and interface
 */
bool MasterSubscribers::RemoteRegisterSubscriptionAvailable(Register remote_register, SubscriberInterface interface) {
 801959c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195a0:	b08d      	sub	sp, #52	@ 0x34
 80195a2:	4604      	mov	r4, r0
 80195a4:	b2dd      	uxtb	r5, r3
 80195a6:	f3c3 2707 	ubfx	r7, r3, #8, #8
 80195aa:	a808      	add	r0, sp, #32
	return *(this->_M_impl._M_start + __n);
 80195ac:	f04f 0906 	mov.w	r9, #6
 80195b0:	e880 0006 	stmia.w	r0, {r1, r2}
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 80195b4:	f04f 31ff 	mov.w	r1, #4294967295
 80195b8:	68a0      	ldr	r0, [r4, #8]
bool MasterSubscribers::RemoteRegisterSubscriptionAvailable(Register remote_register, SubscriberInterface interface) {
 80195ba:	f8ad 301c 	strh.w	r3, [sp, #28]
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 80195be:	f7f3 f8e9 	bl	800c794 <osSemaphoreAcquire>
      : _M_current(__i) { }
 80195c2:	6923      	ldr	r3, [r4, #16]
 80195c4:	68e2      	ldr	r2, [r4, #12]
 80195c6:	9306      	str	r3, [sp, #24]
	for (SubscriberConfiguration &configuration : configurations) {
		for (uint8_t index = 0; index < configuration.remote_registers.size(); index++) {
			Register subscribed_register = configuration.remote_registers[index];
			SubscriberInterface subscribed_interface = configuration.interfaces[index];

			if (remote_register.address == subscribed_register.address) {
 80195c8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80195cc:	9302      	str	r3, [sp, #8]
				if (interface.interface == subscribed_interface.interface || subscribed_interface.interface == ALL_INTERFACES || interface.interface == ALL_INTERFACES) {
					if (interface.address == subscribed_interface.address || subscribed_interface.address == ALL || interface.address == ALL) {
						if (remote_register.type != subscribed_register.type || remote_register.isArray != subscribed_register.isArray || (remote_register.isArray && (remote_register.length != subscribed_register.length))) {
 80195ce:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80195d2:	9303      	str	r3, [sp, #12]
 80195d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80195d8:	9304      	str	r3, [sp, #16]
 80195da:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 80195de:	9305      	str	r3, [sp, #20]
	for (SubscriberConfiguration &configuration : configurations) {
 80195e0:	9b06      	ldr	r3, [sp, #24]
 80195e2:	429a      	cmp	r2, r3
 80195e4:	d044      	beq.n	8019670 <_ZN17MasterSubscribers35RemoteRegisterSubscriptionAvailableE8Register19SubscriberInterface+0xd4>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80195e6:	4b25      	ldr	r3, [pc, #148]	@ (801967c <_ZN17MasterSubscribers35RemoteRegisterSubscriptionAvailableE8Register19SubscriberInterface+0xe0>)
 80195e8:	2000      	movs	r0, #0
 80195ea:	e9d2 6101 	ldrd	r6, r1, [r2, #4]
 80195ee:	1b89      	subs	r1, r1, r6
 80195f0:	1049      	asrs	r1, r1, #1
 80195f2:	fb03 f801 	mul.w	r8, r3, r1
 80195f6:	e036      	b.n	8019666 <_ZN17MasterSubscribers35RemoteRegisterSubscriptionAvailableE8Register19SubscriberInterface+0xca>
	return *(this->_M_impl._M_start + __n);
 80195f8:	fb09 fc01 	mul.w	ip, r9, r1
 80195fc:	eb06 0e0c 	add.w	lr, r6, ip
			if (remote_register.address == subscribed_register.address) {
 8019600:	f836 c00c 	ldrh.w	ip, [r6, ip]
			Register subscribed_register = configuration.remote_registers[index];
 8019604:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8019608:	f8be a004 	ldrh.w	sl, [lr, #4]
 801960c:	9301      	str	r3, [sp, #4]
 801960e:	f8d2 e010 	ldr.w	lr, [r2, #16]
			if (remote_register.address == subscribed_register.address) {
 8019612:	9b02      	ldr	r3, [sp, #8]
 8019614:	eb0e 0b41 	add.w	fp, lr, r1, lsl #1
			SubscriberInterface subscribed_interface = configuration.interfaces[index];
 8019618:	f81e 1011 	ldrb.w	r1, [lr, r1, lsl #1]
			if (remote_register.address == subscribed_register.address) {
 801961c:	459c      	cmp	ip, r3
			SubscriberInterface subscribed_interface = configuration.interfaces[index];
 801961e:	f89b e001 	ldrb.w	lr, [fp, #1]
			if (remote_register.address == subscribed_register.address) {
 8019622:	d11f      	bne.n	8019664 <_ZN17MasterSubscribers35RemoteRegisterSubscriptionAvailableE8Register19SubscriberInterface+0xc8>
				if (interface.interface == subscribed_interface.interface || subscribed_interface.interface == ALL_INTERFACES || interface.interface == ALL_INTERFACES) {
 8019624:	42a9      	cmp	r1, r5
 8019626:	d003      	beq.n	8019630 <_ZN17MasterSubscribers35RemoteRegisterSubscriptionAvailableE8Register19SubscriberInterface+0x94>
 8019628:	2907      	cmp	r1, #7
 801962a:	d001      	beq.n	8019630 <_ZN17MasterSubscribers35RemoteRegisterSubscriptionAvailableE8Register19SubscriberInterface+0x94>
 801962c:	2d07      	cmp	r5, #7
 801962e:	d119      	bne.n	8019664 <_ZN17MasterSubscribers35RemoteRegisterSubscriptionAvailableE8Register19SubscriberInterface+0xc8>
					if (interface.address == subscribed_interface.address || subscribed_interface.address == ALL || interface.address == ALL) {
 8019630:	4577      	cmp	r7, lr
 8019632:	d004      	beq.n	801963e <_ZN17MasterSubscribers35RemoteRegisterSubscriptionAvailableE8Register19SubscriberInterface+0xa2>
 8019634:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8019638:	d001      	beq.n	801963e <_ZN17MasterSubscribers35RemoteRegisterSubscriptionAvailableE8Register19SubscriberInterface+0xa2>
 801963a:	2fff      	cmp	r7, #255	@ 0xff
 801963c:	d112      	bne.n	8019664 <_ZN17MasterSubscribers35RemoteRegisterSubscriptionAvailableE8Register19SubscriberInterface+0xc8>
						if (remote_register.type != subscribed_register.type || remote_register.isArray != subscribed_register.isArray || (remote_register.isArray && (remote_register.length != subscribed_register.length))) {
 801963e:	9b01      	ldr	r3, [sp, #4]
 8019640:	9901      	ldr	r1, [sp, #4]
 8019642:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8019646:	9b03      	ldr	r3, [sp, #12]
 8019648:	4299      	cmp	r1, r3
 801964a:	d104      	bne.n	8019656 <_ZN17MasterSubscribers35RemoteRegisterSubscriptionAvailableE8Register19SubscriberInterface+0xba>
 801964c:	9b04      	ldr	r3, [sp, #16]
 801964e:	b14b      	cbz	r3, 8019664 <_ZN17MasterSubscribers35RemoteRegisterSubscriptionAvailableE8Register19SubscriberInterface+0xc8>
 8019650:	9b05      	ldr	r3, [sp, #20]
 8019652:	4553      	cmp	r3, sl
 8019654:	d006      	beq.n	8019664 <_ZN17MasterSubscribers35RemoteRegisterSubscriptionAvailableE8Register19SubscriberInterface+0xc8>
							osSemaphoreRelease(SubscribersSemaphore);
 8019656:	68a0      	ldr	r0, [r4, #8]
 8019658:	f7f3 f8d0 	bl	800c7fc <osSemaphoreRelease>
							return false;
 801965c:	2000      	movs	r0, #0
			}
		}
	}
	osSemaphoreRelease(SubscribersSemaphore);
	return true;
}
 801965e:	b00d      	add	sp, #52	@ 0x34
 8019660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (uint8_t index = 0; index < configuration.remote_registers.size(); index++) {
 8019664:	3001      	adds	r0, #1
 8019666:	b2c1      	uxtb	r1, r0
 8019668:	4541      	cmp	r1, r8
 801966a:	d3c5      	bcc.n	80195f8 <_ZN17MasterSubscribers35RemoteRegisterSubscriptionAvailableE8Register19SubscriberInterface+0x5c>
      operator++() _GLIBCXX_NOEXCEPT
 801966c:	3228      	adds	r2, #40	@ 0x28
	return *this;
 801966e:	e7b7      	b.n	80195e0 <_ZN17MasterSubscribers35RemoteRegisterSubscriptionAvailableE8Register19SubscriberInterface+0x44>
	osSemaphoreRelease(SubscribersSemaphore);
 8019670:	68a0      	ldr	r0, [r4, #8]
 8019672:	f7f3 f8c3 	bl	800c7fc <osSemaphoreRelease>
	return true;
 8019676:	2001      	movs	r0, #1
 8019678:	e7f1      	b.n	801965e <_ZN17MasterSubscribers35RemoteRegisterSubscriptionAvailableE8Register19SubscriberInterface+0xc2>
 801967a:	bf00      	nop
 801967c:	aaaaaaab 	.word	0xaaaaaaab

08019680 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>:
 * @param input remote_register: register configuration with only address filled
 * @param input interface: interface from which the published data comes from
 * @param output success: whether successful
 * @return the register configuration index from the subscriber
 */
uint8_t MasterSubscribers::FindRemoteRegisterIndex(uint8_t ID, Register remote_register, SubscriberInterface interface, bool* success) {
 8019680:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8019684:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8019686:	ac02      	add	r4, sp, #8
 8019688:	4605      	mov	r5, r0
 801968a:	e904 000c 	stmdb	r4, {r2, r3}
	uint8_t subscriber_index = FindSubscriberIndex(ID, success);
 801968e:	4632      	mov	r2, r6
 8019690:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8019694:	f89d 7029 	ldrb.w	r7, [sp, #41]	@ 0x29
 8019698:	f7ff fed4 	bl	8019444 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (not *success)
 801969c:	7833      	ldrb	r3, [r6, #0]
	uint8_t subscriber_index = FindSubscriberIndex(ID, success);
 801969e:	4604      	mov	r4, r0
	if (not *success)
 80196a0:	b1eb      	cbz	r3, 80196de <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x5e>
		return 0;

	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 80196a2:	f04f 31ff 	mov.w	r1, #4294967295
 80196a6:	68a8      	ldr	r0, [r5, #8]
 80196a8:	f7f3 f874 	bl	800c794 <osSemaphoreAcquire>
 80196ac:	68ea      	ldr	r2, [r5, #12]
 80196ae:	b223      	sxth	r3, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80196b0:	4920      	ldr	r1, [pc, #128]	@ (8019734 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xb4>)
	for (uint8_t index = 0; index < configurations[subscriber_index].remote_registers.size(); index++) {
		Register subscribed_register = configurations[subscriber_index].remote_registers[index];
		SubscriberInterface subscribed_interface = configurations[subscriber_index].interfaces[index];

		if (remote_register.address == subscribed_register.address) {
 80196b2:	f8bd e000 	ldrh.w	lr, [sp]
		Register subscribed_register = configurations[subscriber_index].remote_registers[index];
 80196b6:	f04f 0906 	mov.w	r9, #6
	return *(this->_M_impl._M_start + __n);
 80196ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80196be:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80196c2:	e9d2 4301 	ldrd	r4, r3, [r2, #4]
 80196c6:	1b1b      	subs	r3, r3, r4
 80196c8:	105b      	asrs	r3, r3, #1
 80196ca:	434b      	muls	r3, r1
	for (uint8_t index = 0; index < configurations[subscriber_index].remote_registers.size(); index++) {
 80196cc:	2100      	movs	r1, #0
 80196ce:	b2c8      	uxtb	r0, r1
 80196d0:	4298      	cmp	r0, r3
 80196d2:	d306      	bcc.n	80196e2 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x62>
//					}
				}
			}
		}
	}
	osSemaphoreRelease(SubscribersSemaphore);
 80196d4:	68a8      	ldr	r0, [r5, #8]
 80196d6:	f7f3 f891 	bl	800c7fc <osSemaphoreRelease>
	*success = false;
 80196da:	2300      	movs	r3, #0
 80196dc:	7033      	strb	r3, [r6, #0]
		return 0;
 80196de:	2400      	movs	r4, #0
 80196e0:	e01d      	b.n	801971e <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x9e>
		Register subscribed_register = configurations[subscriber_index].remote_registers[index];
 80196e2:	fb09 fc00 	mul.w	ip, r9, r0
		if (remote_register.address == subscribed_register.address) {
 80196e6:	f834 c00c 	ldrh.w	ip, [r4, ip]
 80196ea:	45f4      	cmp	ip, lr
 80196ec:	d120      	bne.n	8019730 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xb0>
	return *(this->_M_impl._M_start + __n);
 80196ee:	f8d2 c010 	ldr.w	ip, [r2, #16]
 80196f2:	eb0c 0a40 	add.w	sl, ip, r0, lsl #1
		SubscriberInterface subscribed_interface = configurations[subscriber_index].interfaces[index];
 80196f6:	f81c c010 	ldrb.w	ip, [ip, r0, lsl #1]
			if (interface.interface == subscribed_interface.interface || subscribed_interface.interface == ALL_INTERFACES || interface.interface == ALL_INTERFACES) {
 80196fa:	45c4      	cmp	ip, r8
 80196fc:	d005      	beq.n	801970a <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x8a>
 80196fe:	f1bc 0f07 	cmp.w	ip, #7
 8019702:	d002      	beq.n	801970a <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x8a>
 8019704:	f1b8 0f07 	cmp.w	r8, #7
 8019708:	d112      	bne.n	8019730 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xb0>
		SubscriberInterface subscribed_interface = configurations[subscriber_index].interfaces[index];
 801970a:	f89a c001 	ldrb.w	ip, [sl, #1]
				if (interface.address == subscribed_interface.address || subscribed_interface.address == ALL || interface.address == ALL) {
 801970e:	4567      	cmp	r7, ip
 8019710:	d109      	bne.n	8019726 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xa6>
 8019712:	4604      	mov	r4, r0
					osSemaphoreRelease(SubscribersSemaphore);
 8019714:	68a8      	ldr	r0, [r5, #8]
 8019716:	f7f3 f871 	bl	800c7fc <osSemaphoreRelease>
					*success = true;
 801971a:	2301      	movs	r3, #1
 801971c:	7033      	strb	r3, [r6, #0]
	return 0;

}
 801971e:	4620      	mov	r0, r4
 8019720:	b002      	add	sp, #8
 8019722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (interface.address == subscribed_interface.address || subscribed_interface.address == ALL || interface.address == ALL) {
 8019726:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801972a:	d0f2      	beq.n	8019712 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x92>
 801972c:	2fff      	cmp	r7, #255	@ 0xff
 801972e:	d0f0      	beq.n	8019712 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x92>
	for (uint8_t index = 0; index < configurations[subscriber_index].remote_registers.size(); index++) {
 8019730:	3101      	adds	r1, #1
 8019732:	e7cc      	b.n	80196ce <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x4e>
 8019734:	aaaaaaab 	.word	0xaaaaaaab

08019738 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>:
bool MasterSubscribers::SubscribedToRemoteRegister(uint8_t ID, Register remote_register, SubscriberInterface interface) {
 8019738:	b510      	push	{r4, lr}
 801973a:	b086      	sub	sp, #24
 801973c:	ac02      	add	r4, sp, #8
 801973e:	e884 000c 	stmia.w	r4, {r2, r3}
	FindRemoteRegisterIndex(ID, remote_register, interface, &success);
 8019742:	f10d 0317 	add.w	r3, sp, #23
 8019746:	9301      	str	r3, [sp, #4]
 8019748:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801974c:	f8ad 3000 	strh.w	r3, [sp]
 8019750:	e894 000c 	ldmia.w	r4, {r2, r3}
 8019754:	f7ff ff94 	bl	8019680 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>
}
 8019758:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801975c:	b006      	add	sp, #24
 801975e:	bd10      	pop	{r4, pc}

08019760 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb>:
Register MasterSubscribers::FindRemoteRegister(Register remote_register, SubscriberInterface interface, bool* success) {
 8019760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019764:	460d      	mov	r5, r1
 8019766:	af02      	add	r7, sp, #8
 8019768:	4604      	mov	r4, r0
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801976a:	f04f 31ff 	mov.w	r1, #4294967295
 801976e:	68a8      	ldr	r0, [r5, #8]
Register MasterSubscribers::FindRemoteRegister(Register remote_register, SubscriberInterface interface, bool* success) {
 8019770:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
 8019774:	e887 000c 	stmia.w	r7, {r2, r3}
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8019778:	f7f3 f80c 	bl	800c794 <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801977c:	e9d5 6a03 	ldrd	r6, sl, [r5, #12]
	for (SubscriberConfiguration &configuration : configurations) {
 8019780:	4556      	cmp	r6, sl
 8019782:	46b0      	mov	r8, r6
 8019784:	d108      	bne.n	8019798 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x38>
	osSemaphoreRelease(SubscribersSemaphore);
 8019786:	68a8      	ldr	r0, [r5, #8]
 8019788:	f7f3 f838 	bl	800c7fc <osSemaphoreRelease>
	*success = false;
 801978c:	2300      	movs	r3, #0
 801978e:	f889 3000 	strb.w	r3, [r9]
	return Register();
 8019792:	6023      	str	r3, [r4, #0]
 8019794:	80a3      	strh	r3, [r4, #4]
 8019796:	e022      	b.n	80197de <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x7e>
		index = FindRemoteRegisterIndex(configuration.ID, remote_register, interface, success);
 8019798:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801979c:	4628      	mov	r0, r5
 801979e:	f816 1b28 	ldrb.w	r1, [r6], #40
 80197a2:	f8cd 9004 	str.w	r9, [sp, #4]
 80197a6:	f8ad 3000 	strh.w	r3, [sp]
 80197aa:	e897 000c 	ldmia.w	r7, {r2, r3}
 80197ae:	f7ff ff67 	bl	8019680 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>
		if (*success) {
 80197b2:	f899 2000 	ldrb.w	r2, [r9]
 80197b6:	2a00      	cmp	r2, #0
 80197b8:	d0e2      	beq.n	8019780 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x20>
 80197ba:	b203      	sxth	r3, r0
 80197bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
			osSemaphoreRelease(SubscribersSemaphore);
 80197c0:	68a8      	ldr	r0, [r5, #8]
 80197c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80197c6:	eb01 0243 	add.w	r2, r1, r3, lsl #1
			Register found_register = configuration.remote_registers[index];
 80197ca:	f831 8013 	ldrh.w	r8, [r1, r3, lsl #1]
 80197ce:	8896      	ldrh	r6, [r2, #4]
 80197d0:	8857      	ldrh	r7, [r2, #2]
			osSemaphoreRelease(SubscribersSemaphore);
 80197d2:	f7f3 f813 	bl	800c7fc <osSemaphoreRelease>
			return found_register;
 80197d6:	f8a4 8000 	strh.w	r8, [r4]
 80197da:	8067      	strh	r7, [r4, #2]
 80197dc:	80a6      	strh	r6, [r4, #4]
}
 80197de:	4620      	mov	r0, r4
 80197e0:	b004      	add	sp, #16
 80197e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080197e6 <_ZSt14__relocate_a_1IP23SubscriberConfigurationS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80197e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197e8:	4604      	mov	r4, r0
 80197ea:	460f      	mov	r7, r1
 80197ec:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80197ee:	2600      	movs	r6, #0
      for (; __first != __last; ++__first, (void)++__cur)
 80197f0:	42bc      	cmp	r4, r7
 80197f2:	4628      	mov	r0, r5
 80197f4:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 80197f8:	d100      	bne.n	80197fc <_ZSt14__relocate_a_1IP23SubscriberConfigurationS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x16>
    }
 80197fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
struct SubscriberConfiguration {
 80197fc:	7823      	ldrb	r3, [r4, #0]
	{ __p->~_Up(); }
 80197fe:	4620      	mov	r0, r4
 8019800:	f805 3c28 	strb.w	r3, [r5, #-40]
 8019804:	7863      	ldrb	r3, [r4, #1]
 8019806:	f805 3c27 	strb.w	r3, [r5, #-39]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801980a:	6863      	ldr	r3, [r4, #4]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801980c:	6066      	str	r6, [r4, #4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801980e:	f845 3c24 	str.w	r3, [r5, #-36]
 8019812:	68a3      	ldr	r3, [r4, #8]
 8019814:	f845 3c20 	str.w	r3, [r5, #-32]
	  _M_end_of_storage(__x._M_end_of_storage)
 8019818:	68e3      	ldr	r3, [r4, #12]
 801981a:	f845 3c1c 	str.w	r3, [r5, #-28]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801981e:	6923      	ldr	r3, [r4, #16]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8019820:	6126      	str	r6, [r4, #16]
 8019822:	e9c4 6602 	strd	r6, r6, [r4, #8]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8019826:	f845 3c18 	str.w	r3, [r5, #-24]
 801982a:	6963      	ldr	r3, [r4, #20]
 801982c:	f845 3c14 	str.w	r3, [r5, #-20]
	  _M_end_of_storage(__x._M_end_of_storage)
 8019830:	69a3      	ldr	r3, [r4, #24]
 8019832:	f845 3c10 	str.w	r3, [r5, #-16]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8019836:	69e3      	ldr	r3, [r4, #28]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8019838:	61e6      	str	r6, [r4, #28]
 801983a:	e9c4 6605 	strd	r6, r6, [r4, #20]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801983e:	f845 3c0c 	str.w	r3, [r5, #-12]
 8019842:	6a23      	ldr	r3, [r4, #32]
 8019844:	f845 3c08 	str.w	r3, [r5, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 8019848:	6a63      	ldr	r3, [r4, #36]	@ 0x24
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801984a:	e9c4 6608 	strd	r6, r6, [r4, #32]
	  _M_end_of_storage(__x._M_end_of_storage)
 801984e:	f845 3c04 	str.w	r3, [r5, #-4]
      for (; __first != __last; ++__first, (void)++__cur)
 8019852:	3428      	adds	r4, #40	@ 0x28
 8019854:	f7f5 ffb0 	bl	800f7b8 <_ZN23SubscriberConfigurationD1Ev>
 8019858:	e7ca      	b.n	80197f0 <_ZSt14__relocate_a_1IP23SubscriberConfigurationS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>
	...

0801985c <_ZNSt6vectorIP10SubscriberSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801985c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019860:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8019864:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8019866:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801986a:	ebaa 0208 	sub.w	r2, sl, r8
 801986e:	4607      	mov	r7, r0
 8019870:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 8019872:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019876:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 801987a:	d102      	bne.n	8019882 <_ZNSt6vectorIP10SubscriberSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 801987c:	481e      	ldr	r0, [pc, #120]	@ (80198f8 <_ZNSt6vectorIP10SubscriberSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9c>)
 801987e:	f002 fa7f 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8019882:	45c2      	cmp	sl, r8
 8019884:	bf14      	ite	ne
 8019886:	4622      	movne	r2, r4
 8019888:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 801988a:	eba1 0508 	sub.w	r5, r1, r8
 801988e:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8019890:	d22e      	bcs.n	80198f0 <_ZNSt6vectorIP10SubscriberSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8019892:	b37c      	cbz	r4, 80198f4 <_ZNSt6vectorIP10SubscriberSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8019894:	429c      	cmp	r4, r3
 8019896:	bf28      	it	cs
 8019898:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801989a:	00a0      	lsls	r0, r4, #2
 801989c:	f002 f9bb 	bl	801bc16 <_Znwj>
 80198a0:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80198a2:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 80198a6:	2d00      	cmp	r5, #0
 80198a8:	5173      	str	r3, [r6, r5]
 80198aa:	dd04      	ble.n	80198b6 <_ZNSt6vectorIP10SubscriberSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80198ac:	462a      	mov	r2, r5
 80198ae:	4641      	mov	r1, r8
 80198b0:	4630      	mov	r0, r6
 80198b2:	f002 fce7 	bl	801c284 <memmove>
      ptrdiff_t __count = __last - __first;
 80198b6:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 80198ba:	3504      	adds	r5, #4
      if (__count > 0)
 80198bc:	f1ba 0f00 	cmp.w	sl, #0
 80198c0:	4435      	add	r5, r6
 80198c2:	dd04      	ble.n	80198ce <_ZNSt6vectorIP10SubscriberSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80198c4:	4652      	mov	r2, sl
 80198c6:	4649      	mov	r1, r9
 80198c8:	4628      	mov	r0, r5
 80198ca:	f002 fdd3 	bl	801c474 <memcpy>
      return __result + __count;
 80198ce:	4455      	add	r5, sl
	if (__p)
 80198d0:	f1b8 0f00 	cmp.w	r8, #0
 80198d4:	d005      	beq.n	80198e2 <_ZNSt6vectorIP10SubscriberSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 80198d6:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80198d8:	4640      	mov	r0, r8
 80198da:	eba1 0108 	sub.w	r1, r1, r8
 80198de:	f002 f975 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 80198e2:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80198e6:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 80198ea:	60be      	str	r6, [r7, #8]
    }
 80198ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80198f0:	461c      	mov	r4, r3
 80198f2:	e7d2      	b.n	801989a <_ZNSt6vectorIP10SubscriberSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80198f4:	4626      	mov	r6, r4
 80198f6:	e7d4      	b.n	80198a2 <_ZNSt6vectorIP10SubscriberSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 80198f8:	0801c592 	.word	0x0801c592

080198fc <_ZNSt6vectorI8RegisterSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80198fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019900:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8019904:	4b27      	ldr	r3, [pc, #156]	@ (80199a4 <_ZNSt6vectorI8RegisterSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa8>)
 8019906:	4607      	mov	r7, r0
 8019908:	ebaa 0408 	sub.w	r4, sl, r8
 801990c:	4689      	mov	r9, r1
 801990e:	4693      	mov	fp, r2
 8019910:	1064      	asrs	r4, r4, #1
 8019912:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 8019914:	4b24      	ldr	r3, [pc, #144]	@ (80199a8 <_ZNSt6vectorI8RegisterSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xac>)
 8019916:	429c      	cmp	r4, r3
 8019918:	d102      	bne.n	8019920 <_ZNSt6vectorI8RegisterSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 801991a:	4824      	ldr	r0, [pc, #144]	@ (80199ac <_ZNSt6vectorI8RegisterSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb0>)
 801991c:	f002 fa30 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
 8019920:	45c2      	cmp	sl, r8
 8019922:	bf14      	ite	ne
 8019924:	4622      	movne	r2, r4
 8019926:	2201      	moveq	r2, #1
 8019928:	eba1 0508 	sub.w	r5, r1, r8
 801992c:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801992e:	d234      	bcs.n	801999a <_ZNSt6vectorI8RegisterSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8019930:	b3ac      	cbz	r4, 801999e <_ZNSt6vectorI8RegisterSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa2>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8019932:	429c      	cmp	r4, r3
 8019934:	bf28      	it	cs
 8019936:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8019938:	2006      	movs	r0, #6
 801993a:	4360      	muls	r0, r4
 801993c:	f002 f96b 	bl	801bc16 <_Znwj>
 8019940:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8019942:	f8db 2000 	ldr.w	r2, [fp]
 8019946:	1973      	adds	r3, r6, r5
      if (__count > 0)
 8019948:	2d00      	cmp	r5, #0
 801994a:	5172      	str	r2, [r6, r5]
 801994c:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 8019950:	809a      	strh	r2, [r3, #4]
 8019952:	dd04      	ble.n	801995e <_ZNSt6vectorI8RegisterSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x62>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8019954:	462a      	mov	r2, r5
 8019956:	4641      	mov	r1, r8
 8019958:	4630      	mov	r0, r6
 801995a:	f002 fc93 	bl	801c284 <memmove>
      ptrdiff_t __count = __last - __first;
 801995e:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 8019962:	3506      	adds	r5, #6
      if (__count > 0)
 8019964:	f1ba 0f00 	cmp.w	sl, #0
 8019968:	4435      	add	r5, r6
 801996a:	dd04      	ble.n	8019976 <_ZNSt6vectorI8RegisterSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801996c:	4652      	mov	r2, sl
 801996e:	4649      	mov	r1, r9
 8019970:	4628      	mov	r0, r5
 8019972:	f002 fd7f 	bl	801c474 <memcpy>
      return __result + __count;
 8019976:	4455      	add	r5, sl
	if (__p)
 8019978:	f1b8 0f00 	cmp.w	r8, #0
 801997c:	d005      	beq.n	801998a <_ZNSt6vectorI8RegisterSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8e>
		    this->_M_impl._M_end_of_storage - __old_start);
 801997e:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8019980:	4640      	mov	r0, r8
 8019982:	eba1 0108 	sub.w	r1, r1, r8
 8019986:	f002 f921 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801998a:	2306      	movs	r3, #6
      this->_M_impl._M_finish = __new_finish;
 801998c:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8019990:	fb03 6604 	mla	r6, r3, r4, r6
 8019994:	60be      	str	r6, [r7, #8]
    }
 8019996:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801999a:	461c      	mov	r4, r3
 801999c:	e7cc      	b.n	8019938 <_ZNSt6vectorI8RegisterSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801999e:	4626      	mov	r6, r4
 80199a0:	e7cf      	b.n	8019942 <_ZNSt6vectorI8RegisterSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 80199a2:	bf00      	nop
 80199a4:	aaaaaaab 	.word	0xaaaaaaab
 80199a8:	15555555 	.word	0x15555555
 80199ac:	0801c592 	.word	0x0801c592

080199b0 <_ZNSt6vectorI19SubscriberInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80199b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80199b4:	e9d0 8a00 	ldrd	r8, sl, [r0]
 80199b8:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 80199ba:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80199be:	ebaa 0208 	sub.w	r2, sl, r8
 80199c2:	4607      	mov	r7, r0
 80199c4:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 80199c6:	ebb3 0f62 	cmp.w	r3, r2, asr #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80199ca:	ea4f 0462 	mov.w	r4, r2, asr #1
	if (max_size() - size() < __n)
 80199ce:	d102      	bne.n	80199d6 <_ZNSt6vectorI19SubscriberInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80199d0:	481e      	ldr	r0, [pc, #120]	@ (8019a4c <_ZNSt6vectorI19SubscriberInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
 80199d2:	f002 f9d5 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
 80199d6:	45c2      	cmp	sl, r8
 80199d8:	bf14      	ite	ne
 80199da:	4622      	movne	r2, r4
 80199dc:	2201      	moveq	r2, #1
 80199de:	eba1 0508 	sub.w	r5, r1, r8
 80199e2:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80199e4:	d22e      	bcs.n	8019a44 <_ZNSt6vectorI19SubscriberInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80199e6:	b37c      	cbz	r4, 8019a48 <_ZNSt6vectorI19SubscriberInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80199e8:	429c      	cmp	r4, r3
 80199ea:	bf28      	it	cs
 80199ec:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80199ee:	0060      	lsls	r0, r4, #1
 80199f0:	f002 f911 	bl	801bc16 <_Znwj>
 80199f4:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80199f6:	f8bb 3000 	ldrh.w	r3, [fp]
      if (__count > 0)
 80199fa:	2d00      	cmp	r5, #0
 80199fc:	5373      	strh	r3, [r6, r5]
 80199fe:	dd04      	ble.n	8019a0a <_ZNSt6vectorI19SubscriberInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8019a00:	462a      	mov	r2, r5
 8019a02:	4641      	mov	r1, r8
 8019a04:	4630      	mov	r0, r6
 8019a06:	f002 fc3d 	bl	801c284 <memmove>
      ptrdiff_t __count = __last - __first;
 8019a0a:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 8019a0e:	3502      	adds	r5, #2
      if (__count > 0)
 8019a10:	f1ba 0f00 	cmp.w	sl, #0
 8019a14:	4435      	add	r5, r6
 8019a16:	dd04      	ble.n	8019a22 <_ZNSt6vectorI19SubscriberInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8019a18:	4652      	mov	r2, sl
 8019a1a:	4649      	mov	r1, r9
 8019a1c:	4628      	mov	r0, r5
 8019a1e:	f002 fd29 	bl	801c474 <memcpy>
      return __result + __count;
 8019a22:	4455      	add	r5, sl
	if (__p)
 8019a24:	f1b8 0f00 	cmp.w	r8, #0
 8019a28:	d005      	beq.n	8019a36 <_ZNSt6vectorI19SubscriberInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 8019a2a:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8019a2c:	4640      	mov	r0, r8
 8019a2e:	eba1 0108 	sub.w	r1, r1, r8
 8019a32:	f002 f8cb 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8019a36:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8019a3a:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 8019a3e:	60be      	str	r6, [r7, #8]
    }
 8019a40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8019a44:	461c      	mov	r4, r3
 8019a46:	e7d2      	b.n	80199ee <_ZNSt6vectorI19SubscriberInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8019a48:	4626      	mov	r6, r4
 8019a4a:	e7d4      	b.n	80199f6 <_ZNSt6vectorI19SubscriberInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8019a4c:	0801c592 	.word	0x0801c592

08019a50 <_ZN17MasterSubscribers25SubscribeToRemoteRegisterEh8Register19SubscriberInterface>:
bool MasterSubscribers::SubscribeToRemoteRegister(uint8_t ID, Register remote_register, SubscriberInterface interface) {
 8019a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a52:	b087      	sub	sp, #28
 8019a54:	4604      	mov	r4, r0
 8019a56:	460d      	mov	r5, r1
 8019a58:	af02      	add	r7, sp, #8
 8019a5a:	e887 000c 	stmia.w	r7, {r2, r3}
	uint8_t index = FindSubscriberIndex(ID, &success);
 8019a5e:	f10d 0217 	add.w	r2, sp, #23
 8019a62:	f7ff fcef 	bl	8019444 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 8019a66:	f89d 3017 	ldrb.w	r3, [sp, #23]
	uint8_t index = FindSubscriberIndex(ID, &success);
 8019a6a:	4606      	mov	r6, r0
	if (!success) return false;
 8019a6c:	b91b      	cbnz	r3, 8019a76 <_ZN17MasterSubscribers25SubscribeToRemoteRegisterEh8Register19SubscriberInterface+0x26>
 8019a6e:	2500      	movs	r5, #0
}
 8019a70:	4628      	mov	r0, r5
 8019a72:	b007      	add	sp, #28
 8019a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (SubscribedToRemoteRegister(ID, remote_register, interface))
 8019a76:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8019a7a:	4629      	mov	r1, r5
 8019a7c:	4620      	mov	r0, r4
 8019a7e:	f8ad 3000 	strh.w	r3, [sp]
 8019a82:	e897 000c 	ldmia.w	r7, {r2, r3}
 8019a86:	f7ff fe57 	bl	8019738 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 8019a8a:	2800      	cmp	r0, #0
 8019a8c:	d1ef      	bne.n	8019a6e <_ZN17MasterSubscribers25SubscribeToRemoteRegisterEh8Register19SubscriberInterface+0x1e>
	if (!RemoteRegisterSubscriptionAvailable(remote_register, interface)) return false;
 8019a8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019a90:	4620      	mov	r0, r4
 8019a92:	e897 0006 	ldmia.w	r7, {r1, r2}
 8019a96:	f7ff fd81 	bl	801959c <_ZN17MasterSubscribers35RemoteRegisterSubscriptionAvailableE8Register19SubscriberInterface>
 8019a9a:	4605      	mov	r5, r0
 8019a9c:	2800      	cmp	r0, #0
 8019a9e:	d0e6      	beq.n	8019a6e <_ZN17MasterSubscribers25SubscribeToRemoteRegisterEh8Register19SubscriberInterface+0x1e>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8019aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8019aa4:	68a0      	ldr	r0, [r4, #8]
 8019aa6:	f7f2 fe75 	bl	800c794 <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 8019aaa:	68e2      	ldr	r2, [r4, #12]
 8019aac:	b233      	sxth	r3, r6
 8019aae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019ab2:	00de      	lsls	r6, r3, #3
 8019ab4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8019ab8:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8019abc:	4291      	cmp	r1, r2
 8019abe:	d016      	beq.n	8019aee <_ZN17MasterSubscribers25SubscribeToRemoteRegisterEh8Register19SubscriberInterface+0x9e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8019ac0:	9802      	ldr	r0, [sp, #8]
	    ++this->_M_impl._M_finish;
 8019ac2:	3106      	adds	r1, #6
 8019ac4:	88ba      	ldrh	r2, [r7, #4]
 8019ac6:	f841 0c06 	str.w	r0, [r1, #-6]
 8019aca:	f821 2c02 	strh.w	r2, [r1, #-2]
 8019ace:	6099      	str	r1, [r3, #8]
	return *(this->_M_impl._M_start + __n);
 8019ad0:	68e0      	ldr	r0, [r4, #12]
 8019ad2:	4430      	add	r0, r6
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8019ad4:	e9d0 1305 	ldrd	r1, r3, [r0, #20]
 8019ad8:	4299      	cmp	r1, r3
 8019ada:	d00d      	beq.n	8019af8 <_ZN17MasterSubscribers25SubscribeToRemoteRegisterEh8Register19SubscriberInterface+0xa8>
 8019adc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8019ae0:	f821 3b02 	strh.w	r3, [r1], #2
	    ++this->_M_impl._M_finish;
 8019ae4:	6141      	str	r1, [r0, #20]
	osSemaphoreRelease(SubscribersSemaphore);
 8019ae6:	68a0      	ldr	r0, [r4, #8]
 8019ae8:	f7f2 fe88 	bl	800c7fc <osSemaphoreRelease>
	return true;
 8019aec:	e7c0      	b.n	8019a70 <_ZN17MasterSubscribers25SubscribeToRemoteRegisterEh8Register19SubscriberInterface+0x20>
	  _M_realloc_insert(end(), __x);
 8019aee:	463a      	mov	r2, r7
 8019af0:	1d18      	adds	r0, r3, #4
 8019af2:	f7ff ff03 	bl	80198fc <_ZNSt6vectorI8RegisterSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8019af6:	e7eb      	b.n	8019ad0 <_ZN17MasterSubscribers25SubscribeToRemoteRegisterEh8Register19SubscriberInterface+0x80>
 8019af8:	aa0c      	add	r2, sp, #48	@ 0x30
 8019afa:	3010      	adds	r0, #16
 8019afc:	f7ff ff58 	bl	80199b0 <_ZNSt6vectorI19SubscriberInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8019b00:	e7f1      	b.n	8019ae6 <_ZN17MasterSubscribers25SubscribeToRemoteRegisterEh8Register19SubscriberInterface+0x96>

08019b02 <_ZN17MasterSubscribers25SubscribeToRemoteRegisterEht19SubscriberInterface>:
bool MasterSubscribers::SubscribeToRemoteRegister(uint8_t ID, uint16_t register_ID, SubscriberInterface interface) {
 8019b02:	b570      	push	{r4, r5, r6, lr}
 8019b04:	b088      	sub	sp, #32
 8019b06:	4604      	mov	r4, r0
 8019b08:	460d      	mov	r5, r1
	Register internal_register = registers->FindRegister(register_ID, &success);
 8019b0a:	6801      	ldr	r1, [r0, #0]
 8019b0c:	ae06      	add	r6, sp, #24
bool MasterSubscribers::SubscribeToRemoteRegister(uint8_t ID, uint16_t register_ID, SubscriberInterface interface) {
 8019b0e:	f8ad 300c 	strh.w	r3, [sp, #12]
	Register internal_register = registers->FindRegister(register_ID, &success);
 8019b12:	f10d 0317 	add.w	r3, sp, #23
 8019b16:	4630      	mov	r0, r6
 8019b18:	f7fe fc10 	bl	801833c <_ZN9Registers12FindRegisterEtPb>
	if (!success) return false;
 8019b1c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8019b20:	b148      	cbz	r0, 8019b36 <_ZN17MasterSubscribers25SubscribeToRemoteRegisterEht19SubscriberInterface+0x34>
	return SubscribeToRemoteRegister(ID, internal_register, interface);
 8019b22:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8019b26:	4629      	mov	r1, r5
 8019b28:	4620      	mov	r0, r4
 8019b2a:	f8ad 3000 	strh.w	r3, [sp]
 8019b2e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8019b32:	f7ff ff8d 	bl	8019a50 <_ZN17MasterSubscribers25SubscribeToRemoteRegisterEh8Register19SubscriberInterface>
}
 8019b36:	b008      	add	sp, #32
 8019b38:	bd70      	pop	{r4, r5, r6, pc}
	...

08019b3c <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8019b3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019b40:	e9d0 8900 	ldrd	r8, r9, [r0]
	if (max_size() - size() < __n)
 8019b44:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8019b48:	4607      	mov	r7, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019b4a:	eba9 0408 	sub.w	r4, r9, r8
 8019b4e:	468a      	mov	sl, r1
 8019b50:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8019b52:	429c      	cmp	r4, r3
 8019b54:	d102      	bne.n	8019b5c <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x20>
	  __throw_length_error(__N(__s));
 8019b56:	481e      	ldr	r0, [pc, #120]	@ (8019bd0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x94>)
 8019b58:	f002 f912 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
 8019b5c:	2c01      	cmp	r4, #1
 8019b5e:	4622      	mov	r2, r4
 8019b60:	eba1 0508 	sub.w	r5, r1, r8
 8019b64:	bf38      	it	cc
 8019b66:	2201      	movcc	r2, #1
 8019b68:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8019b6a:	d22d      	bcs.n	8019bc8 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x8c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8019b6c:	b374      	cbz	r4, 8019bcc <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x90>
 8019b6e:	429c      	cmp	r4, r3
 8019b70:	bf28      	it	cs
 8019b72:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8019b74:	4620      	mov	r0, r4
 8019b76:	f002 f84e 	bl	801bc16 <_Znwj>
 8019b7a:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8019b7c:	f89b 3000 	ldrb.w	r3, [fp]
      if (__count > 0)
 8019b80:	2d00      	cmp	r5, #0
 8019b82:	5573      	strb	r3, [r6, r5]
 8019b84:	dd04      	ble.n	8019b90 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x54>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8019b86:	462a      	mov	r2, r5
 8019b88:	4641      	mov	r1, r8
 8019b8a:	4630      	mov	r0, r6
 8019b8c:	f002 fb7a 	bl	801c284 <memmove>
      ptrdiff_t __count = __last - __first;
 8019b90:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8019b94:	3501      	adds	r5, #1
      if (__count > 0)
 8019b96:	f1b9 0f00 	cmp.w	r9, #0
 8019b9a:	4435      	add	r5, r6
 8019b9c:	dd04      	ble.n	8019ba8 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x6c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8019b9e:	464a      	mov	r2, r9
 8019ba0:	4651      	mov	r1, sl
 8019ba2:	4628      	mov	r0, r5
 8019ba4:	f002 fc66 	bl	801c474 <memcpy>
      return __result + __count;
 8019ba8:	444d      	add	r5, r9
	if (__p)
 8019baa:	f1b8 0f00 	cmp.w	r8, #0
 8019bae:	d005      	beq.n	8019bbc <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x80>
		    this->_M_impl._M_end_of_storage - __old_start);
 8019bb0:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8019bb2:	4640      	mov	r0, r8
 8019bb4:	eba1 0108 	sub.w	r1, r1, r8
 8019bb8:	f002 f808 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8019bbc:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8019bc0:	4426      	add	r6, r4
 8019bc2:	60be      	str	r6, [r7, #8]
    }
 8019bc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8019bc8:	461c      	mov	r4, r3
 8019bca:	e7d3      	b.n	8019b74 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x38>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8019bcc:	4626      	mov	r6, r4
 8019bce:	e7d5      	b.n	8019b7c <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x40>
 8019bd0:	0801c592 	.word	0x0801c592

08019bd4 <_ZN17MasterSubscribers9AddFilterEhh>:
bool MasterSubscribers::AddFilter(uint8_t ID, uint8_t address) {
 8019bd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019bd6:	f88d 2007 	strb.w	r2, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 8019bda:	f10d 020f 	add.w	r2, sp, #15
bool MasterSubscribers::AddFilter(uint8_t ID, uint8_t address) {
 8019bde:	4604      	mov	r4, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 8019be0:	f7ff fc30 	bl	8019444 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 8019be4:	f89d 500f 	ldrb.w	r5, [sp, #15]
	uint8_t index = FindSubscriberIndex(ID, &success);
 8019be8:	4601      	mov	r1, r0
	if (!success) return false;
 8019bea:	b91d      	cbnz	r5, 8019bf4 <_ZN17MasterSubscribers9AddFilterEhh+0x20>
 8019bec:	2500      	movs	r5, #0
}
 8019bee:	4628      	mov	r0, r5
 8019bf0:	b004      	add	sp, #16
 8019bf2:	bd70      	pop	{r4, r5, r6, pc}
	return *(this->_M_impl._M_start + __n);
 8019bf4:	b203      	sxth	r3, r0
 8019bf6:	68e2      	ldr	r2, [r4, #12]
 8019bf8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019bfc:	00de      	lsls	r6, r3, #3
 8019bfe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (configurations[index].filters.size() > 0 && AddressAccepted(index, address)) // if address already filtered, return
 8019c02:	e9d3 2307 	ldrd	r2, r3, [r3, #28]
 8019c06:	429a      	cmp	r2, r3
 8019c08:	d110      	bne.n	8019c2c <_ZN17MasterSubscribers9AddFilterEhh+0x58>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8019c0a:	f04f 31ff 	mov.w	r1, #4294967295
 8019c0e:	68a0      	ldr	r0, [r4, #8]
 8019c10:	f7f2 fdc0 	bl	800c794 <osSemaphoreAcquire>
 8019c14:	68e0      	ldr	r0, [r4, #12]
 8019c16:	4430      	add	r0, r6
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8019c18:	e9d0 1308 	ldrd	r1, r3, [r0, #32]
 8019c1c:	4299      	cmp	r1, r3
 8019c1e:	d10d      	bne.n	8019c3c <_ZN17MasterSubscribers9AddFilterEhh+0x68>
	  _M_realloc_insert(end(), __x);
 8019c20:	f10d 0207 	add.w	r2, sp, #7
 8019c24:	301c      	adds	r0, #28
 8019c26:	f7ff ff89 	bl	8019b3c <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 8019c2a:	e00d      	b.n	8019c48 <_ZN17MasterSubscribers9AddFilterEhh+0x74>
	if (configurations[index].filters.size() > 0 && AddressAccepted(index, address)) // if address already filtered, return
 8019c2c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8019c30:	4620      	mov	r0, r4
 8019c32:	f7ff fc62 	bl	80194fa <_ZN17MasterSubscribers15AddressAcceptedEhh>
 8019c36:	2800      	cmp	r0, #0
 8019c38:	d0e7      	beq.n	8019c0a <_ZN17MasterSubscribers9AddFilterEhh+0x36>
 8019c3a:	e7d7      	b.n	8019bec <_ZN17MasterSubscribers9AddFilterEhh+0x18>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8019c3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019c40:	700b      	strb	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 8019c42:	6a03      	ldr	r3, [r0, #32]
 8019c44:	3301      	adds	r3, #1
 8019c46:	6203      	str	r3, [r0, #32]
	osSemaphoreRelease(SubscribersSemaphore);
 8019c48:	68a0      	ldr	r0, [r4, #8]
 8019c4a:	f7f2 fdd7 	bl	800c7fc <osSemaphoreRelease>
	return true;
 8019c4e:	e7ce      	b.n	8019bee <_ZN17MasterSubscribers9AddFilterEhh+0x1a>

08019c50 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8019c50:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8019c52:	4611      	mov	r1, r2
 8019c54:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8019c56:	d105      	bne.n	8019c64 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x14>
			self->AddFilter(input[0], input[1]);
 8019c58:	7852      	ldrb	r2, [r2, #1]
 8019c5a:	7809      	ldrb	r1, [r1, #0]
 8019c5c:	f7ff ffba 	bl	8019bd4 <_ZN17MasterSubscribers9AddFilterEhh>
 8019c60:	2001      	movs	r0, #1
		}
 8019c62:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8019c64:	2000      	movs	r0, #0
 8019c66:	e7fc      	b.n	8019c62 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x12>

08019c68 <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8019c68:	b570      	push	{r4, r5, r6, lr}
 8019c6a:	4604      	mov	r4, r0
 8019c6c:	b086      	sub	sp, #24
 8019c6e:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8019c70:	6800      	ldr	r0, [r0, #0]
 8019c72:	f04f 31ff 	mov.w	r1, #4294967295
 8019c76:	f7f2 fd8d 	bl	800c794 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8019c7a:	f10d 0207 	add.w	r2, sp, #7
 8019c7e:	4631      	mov	r1, r6
 8019c80:	4620      	mov	r0, r4
 8019c82:	f7fe fb4a 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8019c86:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8019c8a:	b125      	cbz	r5, 8019c96 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8019c8c:	6820      	ldr	r0, [r4, #0]
 8019c8e:	f7f2 fdb5 	bl	800c7fc <osSemaphoreRelease>
}
 8019c92:	b006      	add	sp, #24
 8019c94:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8019c96:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8019c9a:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8019c9e:	f7ff fb59 	bl	8019354 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 8019ca2:	2301      	movs	r3, #1
 8019ca4:	f8ad 600a 	strh.w	r6, [sp, #10]
 8019ca8:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8019cac:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8019cb0:	f88d 000c 	strb.w	r0, [sp, #12]
 8019cb4:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8019cb8:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d0e5      	beq.n	8019c8c <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
      push_back(const value_type& __x)
 8019cc0:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8019cc2:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 8019cc6:	429d      	cmp	r5, r3
 8019cc8:	d005      	beq.n	8019cd6 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x6e>
 8019cca:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8019ccc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8019cd0:	3510      	adds	r5, #16
 8019cd2:	60a5      	str	r5, [r4, #8]
 8019cd4:	e7da      	b.n	8019c8c <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	  _M_realloc_insert(end(), __x);
 8019cd6:	4629      	mov	r1, r5
 8019cd8:	1d20      	adds	r0, r4, #4
 8019cda:	f7f5 fb6d 	bl	800f3b8 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8019cde:	e7d5      	b.n	8019c8c <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

08019ce0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8019ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019ce4:	460c      	mov	r4, r1
 8019ce6:	b087      	sub	sp, #28
 8019ce8:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8019cea:	f04f 31ff 	mov.w	r1, #4294967295
 8019cee:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8019cf0:	4698      	mov	r8, r3
 8019cf2:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8019cf4:	f7f2 fd4e 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8019cf8:	4621      	mov	r1, r4
 8019cfa:	f10d 0207 	add.w	r2, sp, #7
 8019cfe:	4630      	mov	r0, r6
 8019d00:	f7fe fb0b 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8019d04:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8019d08:	4604      	mov	r4, r0
	if (!success) {
 8019d0a:	b92b      	cbnz	r3, 8019d18 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 8019d0c:	6830      	ldr	r0, [r6, #0]
 8019d0e:	f7f2 fd75 	bl	800c7fc <osSemaphoreRelease>
}
 8019d12:	b007      	add	sp, #28
 8019d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8019d18:	f10d 0007 	add.w	r0, sp, #7
 8019d1c:	f7ff fb1a 	bl	8019354 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8019d20:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d0f1      	beq.n	8019d0c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 8019d28:	7923      	ldrb	r3, [r4, #4]
 8019d2a:	4298      	cmp	r0, r3
 8019d2c:	d1ee      	bne.n	8019d0c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 8019d2e:	3004      	adds	r0, #4
 8019d30:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8019d34:	2f00      	cmp	r7, #0
 8019d36:	d0e9      	beq.n	8019d0c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8019d38:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019d3a:	e9d7 3500 	ldrd	r3, r5, [r7]
 8019d3e:	1aea      	subs	r2, r5, r3
 8019d40:	1112      	asrs	r2, r2, #4
 8019d42:	b9b1      	cbnz	r1, 8019d72 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 8019d44:	7861      	ldrb	r1, [r4, #1]
 8019d46:	b9a1      	cbnz	r1, 8019d72 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 8019d48:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8019d4a:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8019d4c:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 8019d4e:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8019d50:	42a9      	cmp	r1, r5
		callback.write = write;
 8019d52:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8019d56:	d008      	beq.n	8019d6a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
 8019d58:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8019d5a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8019d5e:	3510      	adds	r5, #16
 8019d60:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 8019d62:	2301      	movs	r3, #1
 8019d64:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8019d66:	7223      	strb	r3, [r4, #8]
 8019d68:	e7d0      	b.n	8019d0c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 8019d6a:	4638      	mov	r0, r7
 8019d6c:	f7f5 fbc0 	bl	800f4f0 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8019d70:	e7f7      	b.n	8019d62 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8019d72:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 8019d74:	4291      	cmp	r1, r2
 8019d76:	d302      	bcc.n	8019d7e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8019d78:	4803      	ldr	r0, [pc, #12]	@ (8019d88 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 8019d7a:	f002 f804 	bl	801bd86 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8019d7e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8019d82:	e9c3 9801 	strd	r9, r8, [r3, #4]
 8019d86:	e7ec      	b.n	8019d62 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 8019d88:	0801c5c6 	.word	0x0801c5c6

08019d8c <_ZN17MasterSubscribers12AddRegistersEv>:
void MasterSubscribers::AddRegisters(void) {
 8019d8c:	b510      	push	{r4, lr}
 8019d8e:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_SUB_SET_STATUS);
 8019d90:	2120      	movs	r1, #32
 8019d92:	6800      	ldr	r0, [r0, #0]
 8019d94:	f7ff ff68 	bl	8019c68 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SUB_SET_STATUS, 2);
 8019d98:	2202      	movs	r2, #2
 8019d9a:	2120      	movs	r1, #32
 8019d9c:	6820      	ldr	r0, [r4, #0]
 8019d9e:	f7fe fb11 	bl	80183c4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_SET_STATUS, (void*) this,
 8019da2:	4b12      	ldr	r3, [pc, #72]	@ (8019dec <_ZN17MasterSubscribers12AddRegistersEv+0x60>)
 8019da4:	4622      	mov	r2, r4
 8019da6:	6820      	ldr	r0, [r4, #0]
 8019da8:	2120      	movs	r1, #32
 8019daa:	f7ff ff99 	bl	8019ce0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SUB_ADD_FILTER);
 8019dae:	6820      	ldr	r0, [r4, #0]
 8019db0:	2121      	movs	r1, #33	@ 0x21
 8019db2:	f7ff ff59 	bl	8019c68 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SUB_ADD_FILTER, 2);
 8019db6:	2202      	movs	r2, #2
 8019db8:	2121      	movs	r1, #33	@ 0x21
 8019dba:	6820      	ldr	r0, [r4, #0]
 8019dbc:	f7fe fb02 	bl	80183c4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_ADD_FILTER, (void*) this,
 8019dc0:	4622      	mov	r2, r4
 8019dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8019df0 <_ZN17MasterSubscribers12AddRegistersEv+0x64>)
 8019dc4:	2121      	movs	r1, #33	@ 0x21
 8019dc6:	6820      	ldr	r0, [r4, #0]
 8019dc8:	f7ff ff8a 	bl	8019ce0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SUB_CLEAR_FILTERS);
 8019dcc:	6820      	ldr	r0, [r4, #0]
 8019dce:	2122      	movs	r1, #34	@ 0x22
 8019dd0:	f7ff ff4a 	bl	8019c68 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SUB_CLEAR_FILTERS);
 8019dd4:	2122      	movs	r1, #34	@ 0x22
 8019dd6:	6820      	ldr	r0, [r4, #0]
 8019dd8:	f7fe fad8 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_CLEAR_FILTERS, (void*) this,
 8019ddc:	4622      	mov	r2, r4
 8019dde:	6820      	ldr	r0, [r4, #0]
 8019de0:	2122      	movs	r1, #34	@ 0x22
 8019de2:	4b04      	ldr	r3, [pc, #16]	@ (8019df4 <_ZN17MasterSubscribers12AddRegistersEv+0x68>)
}
 8019de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_SUB_CLEAR_FILTERS, (void*) this,
 8019de8:	f7ff bf7a 	b.w	8019ce0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 8019dec:	080194dd 	.word	0x080194dd
 8019df0:	08019c51 	.word	0x08019c51
 8019df4:	08019591 	.word	0x08019591

08019df8 <_ZNSt6vectorI23SubscriberConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8019df8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019dfc:	e9d0 6800 	ldrd	r6, r8, [r0]
 8019e00:	4b20      	ldr	r3, [pc, #128]	@ (8019e84 <_ZNSt6vectorI23SubscriberConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>)
 8019e02:	4605      	mov	r5, r0
 8019e04:	eba8 0406 	sub.w	r4, r8, r6
 8019e08:	460f      	mov	r7, r1
 8019e0a:	4691      	mov	r9, r2
 8019e0c:	10e4      	asrs	r4, r4, #3
 8019e0e:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 8019e10:	4b1d      	ldr	r3, [pc, #116]	@ (8019e88 <_ZNSt6vectorI23SubscriberConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>)
 8019e12:	429c      	cmp	r4, r3
 8019e14:	d102      	bne.n	8019e1c <_ZNSt6vectorI23SubscriberConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 8019e16:	481d      	ldr	r0, [pc, #116]	@ (8019e8c <_ZNSt6vectorI23SubscriberConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>)
 8019e18:	f001 ffb2 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
 8019e1c:	45b0      	cmp	r8, r6
 8019e1e:	bf14      	ite	ne
 8019e20:	4622      	movne	r2, r4
 8019e22:	2201      	moveq	r2, #1
 8019e24:	eba1 0b06 	sub.w	fp, r1, r6
 8019e28:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8019e2a:	d227      	bcs.n	8019e7c <_ZNSt6vectorI23SubscriberConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x84>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8019e2c:	b344      	cbz	r4, 8019e80 <_ZNSt6vectorI23SubscriberConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x88>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8019e2e:	429c      	cmp	r4, r3
 8019e30:	bf28      	it	cs
 8019e32:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8019e34:	2028      	movs	r0, #40	@ 0x28
 8019e36:	4360      	muls	r0, r4
 8019e38:	f001 feed 	bl	801bc16 <_Znwj>
 8019e3c:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8019e3e:	4649      	mov	r1, r9
 8019e40:	eb0a 000b 	add.w	r0, sl, fp
 8019e44:	f7f5 ff97 	bl	800fd76 <_ZN23SubscriberConfigurationC1ERKS_>
      return std::__relocate_a_1(std::__niter_base(__first),
 8019e48:	4639      	mov	r1, r7
 8019e4a:	4652      	mov	r2, sl
 8019e4c:	4630      	mov	r0, r6
 8019e4e:	f7ff fcca 	bl	80197e6 <_ZSt14__relocate_a_1IP23SubscriberConfigurationS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 8019e52:	4641      	mov	r1, r8
 8019e54:	f100 0228 	add.w	r2, r0, #40	@ 0x28
 8019e58:	4638      	mov	r0, r7
 8019e5a:	f7ff fcc4 	bl	80197e6 <_ZSt14__relocate_a_1IP23SubscriberConfigurationS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 8019e5e:	4607      	mov	r7, r0
	if (__p)
 8019e60:	b126      	cbz	r6, 8019e6c <_ZNSt6vectorI23SubscriberConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
		    this->_M_impl._M_end_of_storage - __old_start);
 8019e62:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8019e64:	4630      	mov	r0, r6
 8019e66:	1b89      	subs	r1, r1, r6
 8019e68:	f001 feb0 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8019e6c:	2328      	movs	r3, #40	@ 0x28
 8019e6e:	fb03 a304 	mla	r3, r3, r4, sl
      this->_M_impl._M_finish = __new_finish;
 8019e72:	e9c5 a700 	strd	sl, r7, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8019e76:	60ab      	str	r3, [r5, #8]
    }
 8019e78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e7c:	461c      	mov	r4, r3
 8019e7e:	e7d9      	b.n	8019e34 <_ZNSt6vectorI23SubscriberConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8019e80:	46a2      	mov	sl, r4
 8019e82:	e7dc      	b.n	8019e3e <_ZNSt6vectorI23SubscriberConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8019e84:	cccccccd 	.word	0xcccccccd
 8019e88:	03333333 	.word	0x03333333
 8019e8c:	0801c592 	.word	0x0801c592

08019e90 <_ZN17MasterSubscribers13AddSubscriberEhP10Subscriber>:
bool MasterSubscribers::AddSubscriber(uint8_t ID, Subscriber* subscriber) {
 8019e90:	b530      	push	{r4, r5, lr}
 8019e92:	b08f      	sub	sp, #60	@ 0x3c
 8019e94:	4604      	mov	r4, r0
 8019e96:	460d      	mov	r5, r1
 8019e98:	9201      	str	r2, [sp, #4]
	FindSubscriberIndex(ID, &success);
 8019e9a:	f10d 020f 	add.w	r2, sp, #15
 8019e9e:	f7ff fad1 	bl	8019444 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (success)
 8019ea2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d139      	bne.n	8019f1e <_ZN17MasterSubscribers13AddSubscriberEhP10Subscriber+0x8e>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8019eaa:	f04f 31ff 	mov.w	r1, #4294967295
 8019eae:	68a0      	ldr	r0, [r4, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8019eb0:	930d      	str	r3, [sp, #52]	@ 0x34
	configuration.activated = false;
 8019eb2:	f88d 3011 	strb.w	r3, [sp, #17]
	configuration.ID = ID;
 8019eb6:	f88d 5010 	strb.w	r5, [sp, #16]
 8019eba:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8019ebe:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8019ec2:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
 8019ec6:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 8019eca:	f7f2 fc63 	bl	800c794 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8019ece:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
 8019ed2:	4298      	cmp	r0, r3
 8019ed4:	d016      	beq.n	8019f04 <_ZN17MasterSubscribers13AddSubscriberEhP10Subscriber+0x74>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8019ed6:	a904      	add	r1, sp, #16
 8019ed8:	f7f5 ff4d 	bl	800fd76 <_ZN23SubscriberConfigurationC1ERKS_>
	    ++this->_M_impl._M_finish;
 8019edc:	6923      	ldr	r3, [r4, #16]
 8019ede:	3328      	adds	r3, #40	@ 0x28
 8019ee0:	6123      	str	r3, [r4, #16]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8019ee2:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 8019ee6:	4299      	cmp	r1, r3
 8019ee8:	d013      	beq.n	8019f12 <_ZN17MasterSubscribers13AddSubscriberEhP10Subscriber+0x82>
 8019eea:	9b01      	ldr	r3, [sp, #4]
 8019eec:	f841 3b04 	str.w	r3, [r1], #4
	    ++this->_M_impl._M_finish;
 8019ef0:	61e1      	str	r1, [r4, #28]
	osSemaphoreRelease(SubscribersSemaphore);
 8019ef2:	68a0      	ldr	r0, [r4, #8]
 8019ef4:	f7f2 fc82 	bl	800c7fc <osSemaphoreRelease>
}
 8019ef8:	a804      	add	r0, sp, #16
 8019efa:	f7f5 fc5d 	bl	800f7b8 <_ZN23SubscriberConfigurationD1Ev>
	return true;
 8019efe:	2001      	movs	r0, #1
}
 8019f00:	b00f      	add	sp, #60	@ 0x3c
 8019f02:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 8019f04:	4601      	mov	r1, r0
 8019f06:	aa04      	add	r2, sp, #16
 8019f08:	f104 000c 	add.w	r0, r4, #12
 8019f0c:	f7ff ff74 	bl	8019df8 <_ZNSt6vectorI23SubscriberConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8019f10:	e7e7      	b.n	8019ee2 <_ZN17MasterSubscribers13AddSubscriberEhP10Subscriber+0x52>
 8019f12:	aa01      	add	r2, sp, #4
 8019f14:	f104 0018 	add.w	r0, r4, #24
 8019f18:	f7ff fca0 	bl	801985c <_ZNSt6vectorIP10SubscriberSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 8019f1c:	e7e9      	b.n	8019ef2 <_ZN17MasterSubscribers13AddSubscriberEhP10Subscriber+0x62>
		return false;
 8019f1e:	2000      	movs	r0, #0
 8019f20:	e7ee      	b.n	8019f00 <_ZN17MasterSubscribers13AddSubscriberEhP10Subscriber+0x70>
 8019f22:	0000      	movs	r0, r0
 8019f24:	0000      	movs	r0, r0
	...

08019f28 <_ZN3CPG4stepEPaf>:
    //initialize the coupling and the phase shift matrices
    update_matrices();
    reset();
}

void CPG::step(int8_t* output, float delta_ms) {
 8019f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float coupling_term;
    //Update CPG oscillators amplitude and phase
    for(uint8_t i=0;i<number_oscillators;i++) {
 8019f2c:	f500 5600 	add.w	r6, r0, #8192	@ 0x2000
void CPG::step(int8_t* output, float delta_ms) {
 8019f30:	4604      	mov	r4, r0
 8019f32:	4605      	mov	r5, r0
 8019f34:	f200 331f 	addw	r3, r0, #799	@ 0x31f
 8019f38:	f500 6b16 	add.w	fp, r0, #2400	@ 0x960
    for(uint8_t i=0;i<number_oscillators;i++) {
 8019f3c:	4607      	mov	r7, r0
 8019f3e:	f04f 0800 	mov.w	r8, #0
void CPG::step(int8_t* output, float delta_ms) {
 8019f42:	ed2d 8b0a 	vpush	{d8-d12}
 8019f46:	b089      	sub	sp, #36	@ 0x24
    for(uint8_t i=0;i<number_oscillators;i++) {
 8019f48:	f896 227d 	ldrb.w	r2, [r6, #637]	@ 0x27d
void CPG::step(int8_t* output, float delta_ms) {
 8019f4c:	eef0 aa40 	vmov.f32	s21, s0
 8019f50:	eeb6 ba00 	vmov.f32	s22, #96	@ 0x3f000000  0.5
 8019f54:	9103      	str	r1, [sp, #12]
            ampl_r=(ampl-ampl*param_direction)/2.0;
        }
        else {
            ampl_r=(ampl+ampl*param_direction)/2.0;
        }
        osc_ddr[i]  = param_a_r * (0.25*param_a_r * (ampl_r - osc_r[i]) - osc_dr[i]);
 8019f56:	eeb5 9b00 	vmov.f64	d9, #80	@ 0x3e800000  0.250
 8019f5a:	eb00 0182 	add.w	r1, r0, r2, lsl #2
        osc_dtheta[i] = (2*M_PI*param_frequency + coupling_term);
 8019f5e:	ed9f 8b94 	vldr	d8, [pc, #592]	@ 801a1b0 <_ZN3CPG4stepEPaf+0x288>
 8019f62:	9101      	str	r1, [sp, #4]
    for(uint8_t i=0;i<number_oscillators;i++) {
 8019f64:	fa5f fa88 	uxtb.w	sl, r8
 8019f68:	4552      	cmp	r2, sl
 8019f6a:	d81d      	bhi.n	8019fa8 <_ZN3CPG4stepEPaf+0x80>
    }
    for(uint8_t i=0;i<number_oscillators;i++) {
        //Euler integration
        osc_theta[i] += osc_dtheta[i]*delta_ms/1000.0;
 8019f6c:	ed9f 5b92 	vldr	d5, [pc, #584]	@ 801a1b8 <_ZN3CPG4stepEPaf+0x290>
    for(uint8_t i=0;i<number_oscillators;i++) {
 8019f70:	9b01      	ldr	r3, [sp, #4]
 8019f72:	42ab      	cmp	r3, r5
 8019f74:	f040 80a4 	bne.w	801a0c0 <_ZN3CPG4stepEPaf+0x198>
        osc_dr[i] +=  osc_ddr[i]*delta_ms/1000.0;
        osc_r[i] +=   osc_dr[i]*delta_ms/1000.0;
    }
    //Compute joint positions by using left and right oscillators (and convert from radian to degree)
    for(uint8_t i=0;i<number_modules;i++) {
        float setpoint = (osc_r[i+number_modules]*(1.0+cos(osc_theta[i+number_modules])) - osc_r[i]*(1.0+cos(osc_theta[i])))*180/M_PI;
 8019f78:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8019f7c:	2700      	movs	r7, #0
    for(uint8_t i=0;i<number_modules;i++) {
 8019f7e:	f504 5900 	add.w	r9, r4, #8192	@ 0x2000
        //set a max angle for each joint
        setpoint = (MAX(setpoint, (-60)));
 8019f82:	eddf ba93 	vldr	s23, [pc, #588]	@ 801a1d0 <_ZN3CPG4stepEPaf+0x2a8>
        output[i] = (int8_t)(MIN(setpoint, (60)));
 8019f86:	ed9f ca93 	vldr	s24, [pc, #588]	@ 801a1d4 <_ZN3CPG4stepEPaf+0x2ac>
        float setpoint = (osc_r[i+number_modules]*(1.0+cos(osc_theta[i+number_modules])) - osc_r[i]*(1.0+cos(osc_theta[i])))*180/M_PI;
 8019f8a:	ed9f 8b8d 	vldr	d8, [pc, #564]	@ 801a1c0 <_ZN3CPG4stepEPaf+0x298>
 8019f8e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 801a1c8 <_ZN3CPG4stepEPaf+0x2a0>
    for(uint8_t i=0;i<number_modules;i++) {
 8019f92:	f899 527c 	ldrb.w	r5, [r9, #636]	@ 0x27c
 8019f96:	b2fe      	uxtb	r6, r7
 8019f98:	42b5      	cmp	r5, r6
 8019f9a:	f200 80c6 	bhi.w	801a12a <_ZN3CPG4stepEPaf+0x202>
    }
}
 8019f9e:	b009      	add	sp, #36	@ 0x24
 8019fa0:	ecbd 8b0a 	vpop	{d8-d12}
 8019fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            coupling_term += param_coupling_strength*osc_w[i][j]*osc_r[j]*sin(osc_theta[j]-osc_theta[i]-osc_phi[i][j]);
 8019fa8:	ed96 ca9d 	vldr	s24, [r6, #628]	@ 0x274
 8019fac:	4658      	mov	r0, fp
 8019fae:	edd7 ca78 	vldr	s25, [r7, #480]	@ 0x1e0
 8019fb2:	46a1      	mov	r9, r4
 8019fb4:	4619      	mov	r1, r3
        coupling_term = 0;
 8019fb6:	ed9f aa88 	vldr	s20, [pc, #544]	@ 801a1d8 <_ZN3CPG4stepEPaf+0x2b0>
 8019fba:	9702      	str	r7, [sp, #8]
            coupling_term += param_coupling_strength*osc_w[i][j]*osc_r[j]*sin(osc_theta[j]-osc_theta[i]-osc_phi[i][j]);
 8019fbc:	ecf9 ba01 	vldmia	r9!, {s23}
 8019fc0:	ecb0 0a01 	vldmia	r0!, {s0}
 8019fc4:	edd9 7a77 	vldr	s15, [r9, #476]	@ 0x1dc
 8019fc8:	9205      	str	r2, [sp, #20]
 8019fca:	ee77 7aec 	vsub.f32	s15, s15, s25
 8019fce:	9004      	str	r0, [sp, #16]
 8019fd0:	e9cd 3106 	strd	r3, r1, [sp, #24]
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8019fd4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019fd8:	f001 ff0e 	bl	801bdf8 <sinf>
 8019fdc:	9907      	ldr	r1, [sp, #28]
 8019fde:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019fe2:	ee07 3a90 	vmov	s15, r3
        for(uint8_t j=0;j<number_oscillators;j++) {
 8019fe6:	9b01      	ldr	r3, [sp, #4]
            coupling_term += param_coupling_strength*osc_w[i][j]*osc_r[j]*sin(osc_theta[j]-osc_theta[i]-osc_phi[i][j]);
 8019fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        for(uint8_t j=0;j<number_oscillators;j++) {
 8019fec:	454b      	cmp	r3, r9
 8019fee:	9b06      	ldr	r3, [sp, #24]
            coupling_term += param_coupling_strength*osc_w[i][j]*osc_r[j]*sin(osc_theta[j]-osc_theta[i]-osc_phi[i][j]);
 8019ff0:	ee67 7a8c 	vmul.f32	s15, s15, s24
        for(uint8_t j=0;j<number_oscillators;j++) {
 8019ff4:	e9dd 0204 	ldrd	r0, r2, [sp, #16]
            coupling_term += param_coupling_strength*osc_w[i][j]*osc_r[j]*sin(osc_theta[j]-osc_theta[i]-osc_phi[i][j]);
 8019ff8:	ee67 7aab 	vmul.f32	s15, s15, s23
 8019ffc:	eea7 aa80 	vfma.f32	s20, s15, s0
        for(uint8_t j=0;j<number_oscillators;j++) {
 801a000:	d1dc      	bne.n	8019fbc <_ZN3CPG4stepEPaf+0x94>
        osc_dtheta[i] = (2*M_PI*param_frequency + coupling_term);
 801a002:	ed96 6a98 	vldr	s12, [r6, #608]	@ 0x260
 801a006:	eeb7 7aca 	vcvt.f64.f32	d7, s20
 801a00a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 801a00e:	eea6 7b08 	vfma.f64	d7, d6, d8
 801a012:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 801a016:	ed87 7aa0 	vstr	s14, [r7, #640]	@ 0x280
        if(number_modules > 1) {
 801a01a:	f896 127c 	ldrb.w	r1, [r6, #636]	@ 0x27c
                ampl = param_amplh + (param_amplc - param_amplh)/(number_modules-1)*(number_modules-i-1);
 801a01e:	ed96 7a9b 	vldr	s14, [r6, #620]	@ 0x26c
        if(number_modules > 1) {
 801a022:	2901      	cmp	r1, #1
 801a024:	d949      	bls.n	801a0ba <_ZN3CPG4stepEPaf+0x192>
                ampl = param_amplh + (param_amplc - param_amplh)/(number_modules-1)*(number_modules-i-1);
 801a026:	1e48      	subs	r0, r1, #1
 801a028:	edd6 6a9a 	vldr	s13, [r6, #616]	@ 0x268
            if(i < number_modules) {
 801a02c:	4551      	cmp	r1, sl
                ampl = param_amplh + (param_amplc - param_amplh)/(number_modules-1)*(number_modules-i-1);
 801a02e:	ee07 0a90 	vmov	s15, r0
 801a032:	ee76 6ac7 	vsub.f32	s13, s13, s14
 801a036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a03a:	ee86 6aa7 	vdiv.f32	s12, s13, s15
            if(i < number_modules) {
 801a03e:	d92e      	bls.n	801a09e <_ZN3CPG4stepEPaf+0x176>
                ampl = param_amplh + (param_amplc - param_amplh)/(number_modules-1)*(number_modules-i-1);
 801a040:	eba1 0108 	sub.w	r1, r1, r8
 801a044:	3901      	subs	r1, #1
 801a046:	ee07 1a90 	vmov	s15, r1
 801a04a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a04e:	eea7 7a86 	vfma.f32	s14, s15, s12
            ampl_r=(ampl-ampl*param_direction)/2.0;
 801a052:	edd6 7a99 	vldr	s15, [r6, #612]	@ 0x264
 801a056:	eea7 7ac7 	vfms.f32	s14, s15, s14
        osc_ddr[i]  = param_a_r * (0.25*param_a_r * (ampl_r - osc_r[i]) - osc_dr[i]);
 801a05a:	ed96 6a9e 	vldr	s12, [r6, #632]	@ 0x278
            ampl_r=(ampl+ampl*param_direction)/2.0;
 801a05e:	ee27 7a0b 	vmul.f32	s14, s14, s22
        osc_ddr[i]  = param_a_r * (0.25*param_a_r * (ampl_r - osc_r[i]) - osc_dr[i]);
 801a062:	9902      	ldr	r1, [sp, #8]
 801a064:	3704      	adds	r7, #4
 801a066:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 801a06a:	ed97 5a27 	vldr	s10, [r7, #156]	@ 0x9c
 801a06e:	edd1 7a00 	vldr	s15, [r1]
 801a072:	f108 0801 	add.w	r8, r8, #1
 801a076:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 801a07a:	3328      	adds	r3, #40	@ 0x28
 801a07c:	ee26 4b09 	vmul.f64	d4, d6, d9
 801a080:	f10b 0ba0 	add.w	fp, fp, #160	@ 0xa0
 801a084:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a088:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801a08c:	ee94 5b07 	vfnms.f64	d5, d4, d7
 801a090:	ee26 6b05 	vmul.f64	d6, d6, d5
 801a094:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 801a098:	ed87 6a4f 	vstr	s12, [r7, #316]	@ 0x13c
    for(uint8_t i=0;i<number_oscillators;i++) {
 801a09c:	e762      	b.n	8019f64 <_ZN3CPG4stepEPaf+0x3c>
                ampl = param_amplh + (param_amplc - param_amplh)/(number_modules-1)*(2*number_modules-i-1);
 801a09e:	ebc8 0141 	rsb	r1, r8, r1, lsl #1
 801a0a2:	3901      	subs	r1, #1
 801a0a4:	ee07 1a90 	vmov	s15, r1
 801a0a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a0ac:	eea7 7a86 	vfma.f32	s14, s15, s12
            ampl_r=(ampl+ampl*param_direction)/2.0;
 801a0b0:	edd6 7a99 	vldr	s15, [r6, #612]	@ 0x264
 801a0b4:	eea7 7a87 	vfma.f32	s14, s15, s14
 801a0b8:	e7cf      	b.n	801a05a <_ZN3CPG4stepEPaf+0x132>
        if(i < number_modules) {
 801a0ba:	4551      	cmp	r1, sl
 801a0bc:	d9f8      	bls.n	801a0b0 <_ZN3CPG4stepEPaf+0x188>
 801a0be:	e7c8      	b.n	801a052 <_ZN3CPG4stepEPaf+0x12a>
        osc_theta[i] += osc_dtheta[i]*delta_ms/1000.0;
 801a0c0:	ed95 6aa0 	vldr	s12, [r5, #640]	@ 0x280
 801a0c4:	ee2a 6a86 	vmul.f32	s12, s21, s12
 801a0c8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 801a0cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801a0d0:	ed95 6a78 	vldr	s12, [r5, #480]	@ 0x1e0
 801a0d4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 801a0d8:	ee37 7b06 	vadd.f64	d7, d7, d6
        osc_dr[i] +=  osc_ddr[i]*delta_ms/1000.0;
 801a0dc:	ed95 6a50 	vldr	s12, [r5, #320]	@ 0x140
 801a0e0:	ee2a 6a86 	vmul.f32	s12, s21, s12
        osc_theta[i] += osc_dtheta[i]*delta_ms/1000.0;
 801a0e4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
        osc_dr[i] +=  osc_ddr[i]*delta_ms/1000.0;
 801a0e8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
        osc_theta[i] += osc_dtheta[i]*delta_ms/1000.0;
 801a0ec:	ed85 7a78 	vstr	s14, [r5, #480]	@ 0x1e0
        osc_dr[i] +=  osc_ddr[i]*delta_ms/1000.0;
 801a0f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801a0f4:	ed95 6a28 	vldr	s12, [r5, #160]	@ 0xa0
 801a0f8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 801a0fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a100:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 801a104:	ed85 7a28 	vstr	s14, [r5, #160]	@ 0xa0
        osc_r[i] +=   osc_dr[i]*delta_ms/1000.0;
 801a108:	ee27 7a2a 	vmul.f32	s14, s14, s21
 801a10c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801a110:	ee87 6b05 	vdiv.f64	d6, d7, d5
 801a114:	ed95 7a00 	vldr	s14, [r5]
 801a118:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801a11c:	ee36 7b07 	vadd.f64	d7, d6, d7
 801a120:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 801a124:	eca5 7a01 	vstmia	r5!, {s14}
    for(uint8_t i=0;i<number_oscillators;i++) {
 801a128:	e722      	b.n	8019f70 <_ZN3CPG4stepEPaf+0x48>
        float setpoint = (osc_r[i+number_modules]*(1.0+cos(osc_theta[i+number_modules])) - osc_r[i]*(1.0+cos(osc_theta[i])))*180/M_PI;
 801a12a:	4435      	add	r5, r6
 801a12c:	eb04 0886 	add.w	r8, r4, r6, lsl #2
 801a130:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  { return __builtin_cosf(__x); }
 801a134:	ed95 0a78 	vldr	s0, [r5, #480]	@ 0x1e0
 801a138:	f001 ff22 	bl	801bf80 <cosf>
 801a13c:	eeb0 ba40 	vmov.f32	s22, s0
 801a140:	ed98 0a78 	vldr	s0, [r8, #480]	@ 0x1e0
 801a144:	f001 ff1c 	bl	801bf80 <cosf>
 801a148:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 801a14c:	ed98 4a00 	vldr	s8, [r8]
 801a150:	eeb7 6acb 	vcvt.f64.f32	d6, s22
 801a154:	ed95 5a00 	vldr	s10, [r5]
 801a158:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
 801a15c:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801a160:	ee36 6b0a 	vadd.f64	d6, d6, d10
 801a164:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 801a168:	ee27 7b44 	vnmul.f64	d7, d7, d4
 801a16c:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a170:	ee27 7b08 	vmul.f64	d7, d7, d8
 801a174:	ee87 6b09 	vdiv.f64	d6, d7, d9
 801a178:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
        setpoint = (MAX(setpoint, (-60)));
 801a17c:	eeb4 6aeb 	vcmpe.f32	s12, s23
 801a180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a184:	dd0e      	ble.n	801a1a4 <_ZN3CPG4stepEPaf+0x27c>
        output[i] = (int8_t)(MIN(setpoint, (60)));
 801a186:	eeb4 6acc 	vcmpe.f32	s12, s24
 801a18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a18e:	d50c      	bpl.n	801a1aa <_ZN3CPG4stepEPaf+0x282>
 801a190:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 801a194:	edcd 7a01 	vstr	s15, [sp, #4]
 801a198:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 801a19c:	9a03      	ldr	r2, [sp, #12]
 801a19e:	3701      	adds	r7, #1
 801a1a0:	5593      	strb	r3, [r2, r6]
    for(uint8_t i=0;i<number_modules;i++) {
 801a1a2:	e6f6      	b.n	8019f92 <_ZN3CPG4stepEPaf+0x6a>
        setpoint = (MAX(setpoint, (-60)));
 801a1a4:	eeb0 6a6b 	vmov.f32	s12, s23
 801a1a8:	e7f2      	b.n	801a190 <_ZN3CPG4stepEPaf+0x268>
        output[i] = (int8_t)(MIN(setpoint, (60)));
 801a1aa:	233c      	movs	r3, #60	@ 0x3c
 801a1ac:	e7f6      	b.n	801a19c <_ZN3CPG4stepEPaf+0x274>
 801a1ae:	bf00      	nop
 801a1b0:	54442d18 	.word	0x54442d18
 801a1b4:	401921fb 	.word	0x401921fb
 801a1b8:	00000000 	.word	0x00000000
 801a1bc:	408f4000 	.word	0x408f4000
 801a1c0:	00000000 	.word	0x00000000
 801a1c4:	40668000 	.word	0x40668000
 801a1c8:	54442d18 	.word	0x54442d18
 801a1cc:	400921fb 	.word	0x400921fb
 801a1d0:	c2700000 	.word	0xc2700000
 801a1d4:	42700000 	.word	0x42700000
 801a1d8:	00000000 	.word	0x00000000

0801a1dc <_ZN3CPG5resetEv>:

void CPG::reset(void) {
    //reset the oscillators states
    for(uint8_t i=0;i<MAX_OSCILLATORS;i++) {
        osc_r[i] = 0;
 801a1dc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801a1e0:	2100      	movs	r1, #0
 801a1e2:	f002 b869 	b.w	801c2b8 <memset>

0801a1e6 <_ZN3CPG13set_frequencyEf>:
    update_matrices();
    reset();
}

void CPG::set_frequency(float frequency) {
    param_frequency = frequency;
 801a1e6:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 801a1ea:	ed80 0a98 	vstr	s0, [r0, #608]	@ 0x260
}
 801a1ee:	4770      	bx	lr

0801a1f0 <_ZN3CPG13set_directionEf>:

void CPG::set_direction(float direction) {
    param_direction = direction;
 801a1f0:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 801a1f4:	ed80 0a99 	vstr	s0, [r0, #612]	@ 0x264
}
 801a1f8:	4770      	bx	lr

0801a1fa <_ZN3CPG9set_amplcEf>:

void CPG::set_amplc(float amplc) {
    param_amplc = amplc;
 801a1fa:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 801a1fe:	ed80 0a9a 	vstr	s0, [r0, #616]	@ 0x268
}
 801a202:	4770      	bx	lr

0801a204 <_ZN3CPG9set_amplhEf>:

void CPG::set_amplh(float amplh) {
    param_amplh = amplh;
 801a204:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 801a208:	ed80 0a9b 	vstr	s0, [r0, #620]	@ 0x26c
}
 801a20c:	4770      	bx	lr

0801a20e <_ZN3CPG21set_coupling_strengthEf>:
    param_nwave = nwave;
    update_matrices();
}

void CPG::set_coupling_strength(float coupling_strength) {
    param_coupling_strength = coupling_strength;
 801a20e:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 801a212:	ed80 0a9d 	vstr	s0, [r0, #628]	@ 0x274
}
 801a216:	4770      	bx	lr

0801a218 <_ZN3CPG7set_a_rEf>:

void CPG::set_a_r(float a_r) {
    param_a_r = a_r;
 801a218:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 801a21c:	ed80 0a9e 	vstr	s0, [r0, #632]	@ 0x278
}
 801a220:	4770      	bx	lr
 801a222:	0000      	movs	r0, r0
 801a224:	0000      	movs	r0, r0
	...

0801a228 <_ZN3CPG15update_matricesEv>:

//function to update the phi matrix called when the value of param_nwave or number_modules changes
void CPG::update_matrices(void) {
    //determines the phase shifts between modules to have the desired phase shift between head and end of tail
    float dphi = (param_nwave*2.0*M_PI)/(number_modules);
 801a228:	f500 5300 	add.w	r3, r0, #8192	@ 0x2000
    //fill the coupling matrix and the phase shift matrix
    for(uint8_t i=0;i<number_oscillators;i++) {
 801a22c:	2200      	movs	r2, #0
    float dphi = (param_nwave*2.0*M_PI)/(number_modules);
 801a22e:	ed93 7a9c 	vldr	s14, [r3, #624]	@ 0x270
 801a232:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801a236:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 801a2e0 <_ZN3CPG15update_matricesEv+0xb8>
 801a23a:	ee37 7b07 	vadd.f64	d7, d7, d7
void CPG::update_matrices(void) {
 801a23e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    float dphi = (param_nwave*2.0*M_PI)/(number_modules);
 801a242:	f893 127c 	ldrb.w	r1, [r3, #636]	@ 0x27c
 801a246:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a24a:	f200 351f 	addw	r5, r0, #799	@ 0x31f
    for(uint8_t i=0;i<number_oscillators;i++) {
 801a24e:	f893 627d 	ldrb.w	r6, [r3, #637]	@ 0x27d
    float dphi = (param_nwave*2.0*M_PI)/(number_modules);
 801a252:	ee06 1a90 	vmov	s13, r1
 801a256:	f500 6016 	add.w	r0, r0, #2400	@ 0x960
 801a25a:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801a25e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 801a262:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 801a2e8 <_ZN3CPG15update_matricesEv+0xc0>
 801a266:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
            else if((j==(number_modules+i))) {
                osc_w[i][j] = 1;
                osc_phi[i][j] = M_PI;
            }
            //if both oscillators are on the same joint
            else if((j==(i-number_modules))) {
 801a26a:	eddf 6a20 	vldr	s13, [pc, #128]	@ 801a2ec <_ZN3CPG15update_matricesEv+0xc4>
                osc_phi[i][j] = -dphi;
 801a26e:	eef1 5a46 	vneg.f32	s11, s12
    for(uint8_t i=0;i<number_oscillators;i++) {
 801a272:	b2d3      	uxtb	r3, r2
 801a274:	429e      	cmp	r6, r3
 801a276:	d801      	bhi.n	801a27c <_ZN3CPG15update_matricesEv+0x54>
                osc_w[i][j] = 0;
                osc_phi[i][j] = 0;
            }
        }
    }
 801a278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a27c:	1c57      	adds	r7, r2, #1
            else if((j==(i-1)) && (j!=number_modules)) {
 801a27e:	f102 38ff 	add.w	r8, r2, #4294967295
            else if((j==(number_modules+i))) {
 801a282:	eb02 0901 	add.w	r9, r2, r1
 801a286:	4684      	mov	ip, r0
 801a288:	46ae      	mov	lr, r5
 801a28a:	2300      	movs	r3, #0
            else if((j==(i-number_modules))) {
 801a28c:	1a52      	subs	r2, r2, r1
            if ((j==(i+1)) && (j!=number_modules)) {
 801a28e:	42bb      	cmp	r3, r7
 801a290:	d106      	bne.n	801a2a0 <_ZN3CPG15update_matricesEv+0x78>
 801a292:	b2dc      	uxtb	r4, r3
 801a294:	42a1      	cmp	r1, r4
 801a296:	d003      	beq.n	801a2a0 <_ZN3CPG15update_matricesEv+0x78>
                osc_phi[i][j] = -dphi;
 801a298:	eef0 7a65 	vmov.f32	s15, s11
 801a29c:	2401      	movs	r4, #1
 801a29e:	e00c      	b.n	801a2ba <_ZN3CPG15update_matricesEv+0x92>
            else if((j==(i-1)) && (j!=number_modules)) {
 801a2a0:	4543      	cmp	r3, r8
 801a2a2:	d102      	bne.n	801a2aa <_ZN3CPG15update_matricesEv+0x82>
 801a2a4:	b2dc      	uxtb	r4, r3
 801a2a6:	42a1      	cmp	r1, r4
 801a2a8:	d113      	bne.n	801a2d2 <_ZN3CPG15update_matricesEv+0xaa>
            else if((j==(number_modules+i))) {
 801a2aa:	454b      	cmp	r3, r9
 801a2ac:	d014      	beq.n	801a2d8 <_ZN3CPG15update_matricesEv+0xb0>
            else if((j==(i-number_modules))) {
 801a2ae:	4293      	cmp	r3, r2
 801a2b0:	bf14      	ite	ne
 801a2b2:	2400      	movne	r4, #0
 801a2b4:	2401      	moveq	r4, #1
 801a2b6:	fe47 7a26 	vseleq.f32	s15, s14, s13
        for(uint8_t j=0;j<number_oscillators;j++) {
 801a2ba:	3301      	adds	r3, #1
                osc_w[i][j] = 1;
 801a2bc:	f80e 4f01 	strb.w	r4, [lr, #1]!
                osc_phi[i][j] = -dphi;
 801a2c0:	ecec 7a01 	vstmia	ip!, {s15}
        for(uint8_t j=0;j<number_oscillators;j++) {
 801a2c4:	b2dc      	uxtb	r4, r3
 801a2c6:	42a6      	cmp	r6, r4
 801a2c8:	d8e1      	bhi.n	801a28e <_ZN3CPG15update_matricesEv+0x66>
    for(uint8_t i=0;i<number_oscillators;i++) {
 801a2ca:	3528      	adds	r5, #40	@ 0x28
 801a2cc:	30a0      	adds	r0, #160	@ 0xa0
        for(uint8_t j=0;j<number_oscillators;j++) {
 801a2ce:	463a      	mov	r2, r7
 801a2d0:	e7cf      	b.n	801a272 <_ZN3CPG15update_matricesEv+0x4a>
 801a2d2:	eef0 7a46 	vmov.f32	s15, s12
 801a2d6:	e7e1      	b.n	801a29c <_ZN3CPG15update_matricesEv+0x74>
 801a2d8:	eef0 7a47 	vmov.f32	s15, s14
 801a2dc:	2401      	movs	r4, #1
 801a2de:	e7ec      	b.n	801a2ba <_ZN3CPG15update_matricesEv+0x92>
 801a2e0:	54442d18 	.word	0x54442d18
 801a2e4:	400921fb 	.word	0x400921fb
 801a2e8:	40490fdb 	.word	0x40490fdb
 801a2ec:	00000000 	.word	0x00000000

0801a2f0 <_ZN3CPG4initEhfffffff>:
    number_modules = nb_modules;
 801a2f0:	f500 5300 	add.w	r3, r0, #8192	@ 0x2000
    float a_r) {
 801a2f4:	b510      	push	{r4, lr}
    number_modules = nb_modules;
 801a2f6:	f883 127c 	strb.w	r1, [r3, #636]	@ 0x27c
    number_oscillators = number_modules*2;
 801a2fa:	0049      	lsls	r1, r1, #1
    float a_r) {
 801a2fc:	4604      	mov	r4, r0
    param_frequency = frequency;
 801a2fe:	ed83 0a98 	vstr	s0, [r3, #608]	@ 0x260
    number_oscillators = number_modules*2;
 801a302:	f883 127d 	strb.w	r1, [r3, #637]	@ 0x27d
    param_direction = direction;
 801a306:	edc3 0a99 	vstr	s1, [r3, #612]	@ 0x264
    param_amplc = amplc;
 801a30a:	ed83 1a9a 	vstr	s2, [r3, #616]	@ 0x268
    param_amplh = amplh;
 801a30e:	edc3 1a9b 	vstr	s3, [r3, #620]	@ 0x26c
    param_nwave = nwave;
 801a312:	ed83 2a9c 	vstr	s4, [r3, #624]	@ 0x270
    param_coupling_strength = coupling_strength;
 801a316:	edc3 2a9d 	vstr	s5, [r3, #628]	@ 0x274
    param_a_r = a_r;
 801a31a:	ed83 3a9e 	vstr	s6, [r3, #632]	@ 0x278
    update_matrices();
 801a31e:	f7ff ff83 	bl	801a228 <_ZN3CPG15update_matricesEv>
    reset();
 801a322:	4620      	mov	r0, r4
}
 801a324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    reset();
 801a328:	f7ff bf58 	b.w	801a1dc <_ZN3CPG5resetEv>

0801a32c <_ZN3CPG9set_nwaveEf>:
    param_nwave = nwave;
 801a32c:	f500 5300 	add.w	r3, r0, #8192	@ 0x2000
 801a330:	ed83 0a9c 	vstr	s0, [r3, #624]	@ 0x270
    update_matrices();
 801a334:	f7ff bf78 	b.w	801a228 <_ZN3CPG15update_matricesEv>

0801a338 <_ZZL8UserTaskPvENUlS_tPPfPtE1_4_FUNES_tS1_S2_>:
		cpg.set_frequency(*input);
		return true;
	});
	registers->AddReadCallback<float>(REG_CPG_FREQUENCY, &reg_cpg_frequency,
		[](void* context, uint16_t regiser_ID, float** output, uint16_t* length) -> bool {
		*output = (float*)(context);
 801a338:	6010      	str	r0, [r2, #0]
		return true;
	});
 801a33a:	2001      	movs	r0, #1
 801a33c:	4770      	bx	lr
	...

0801a340 <_ZZL8UserTaskPvENUlS_tPhtE_4_FUNES_tS0_t>:
		cpg.reset();
 801a340:	4802      	ldr	r0, [pc, #8]	@ (801a34c <_ZZL8UserTaskPvENUlS_tPhtE_4_FUNES_tS0_t+0xc>)
		[](void* context , uint16_t register_ID , uint8_t* input , uint16_t length) -> bool {
 801a342:	b508      	push	{r3, lr}
		cpg.reset();
 801a344:	f7ff ff4a 	bl	801a1dc <_ZN3CPG5resetEv>
	});
 801a348:	2001      	movs	r0, #1
 801a34a:	bd08      	pop	{r3, pc}
 801a34c:	240071dc 	.word	0x240071dc

0801a350 <_ZZL8UserTaskPvENUlS_tPftE0_4_FUNES_tS0_t>:
		*((float*)(context)) = *input;
 801a350:	ed92 0a00 	vldr	s0, [r2]
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 801a354:	b508      	push	{r3, lr}
		*((float*)(context)) = *input;
 801a356:	ed80 0a00 	vstr	s0, [r0]
		cpg.set_frequency(*input);
 801a35a:	4802      	ldr	r0, [pc, #8]	@ (801a364 <_ZZL8UserTaskPvENUlS_tPftE0_4_FUNES_tS0_t+0x14>)
 801a35c:	f7ff ff43 	bl	801a1e6 <_ZN3CPG13set_frequencyEf>
	});
 801a360:	2001      	movs	r0, #1
 801a362:	bd08      	pop	{r3, pc}
 801a364:	240071dc 	.word	0x240071dc

0801a368 <_ZZL8UserTaskPvENUlS_tPftE2_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_DIRECTION);
	//[DEL] registers->AddRegisterPointer<float>(REG_CPG_DIRECTION, &reg_cpg_direction);
	//[DEL] registers->SetRegisterPermissions(REG_CPG_DIRECTION, WRITE_PERMISSION);
	registers->AddWriteCallback<float>(REG_CPG_DIRECTION, &reg_cpg_direction,
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
		*((float*)(context)) = *input;
 801a368:	ed92 0a00 	vldr	s0, [r2]
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 801a36c:	b508      	push	{r3, lr}
		*((float*)(context)) = *input;
 801a36e:	ed80 0a00 	vstr	s0, [r0]
		cpg.set_direction(*input);
 801a372:	4802      	ldr	r0, [pc, #8]	@ (801a37c <_ZZL8UserTaskPvENUlS_tPftE2_4_FUNES_tS0_t+0x14>)
 801a374:	f7ff ff3c 	bl	801a1f0 <_ZN3CPG13set_directionEf>
		return true;
	});
 801a378:	2001      	movs	r0, #1
 801a37a:	bd08      	pop	{r3, pc}
 801a37c:	240071dc 	.word	0x240071dc

0801a380 <_ZZL8UserTaskPvENUlS_tPftE4_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_AMPLC);
	//[DEL] registers->AddRegisterPointer<float>(REG_CPG_AMPLC, &reg_cpg_amplc);
	//[DEL] registers->SetRegisterPermissions(REG_CPG_AMPLC, WRITE_PERMISSION);
	registers->AddWriteCallback<float>(REG_CPG_AMPLC, &reg_cpg_amplc,
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
		*((float*)(context)) = *input;
 801a380:	ed92 0a00 	vldr	s0, [r2]
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 801a384:	b508      	push	{r3, lr}
		*((float*)(context)) = *input;
 801a386:	ed80 0a00 	vstr	s0, [r0]
		cpg.set_amplc(*input);
 801a38a:	4802      	ldr	r0, [pc, #8]	@ (801a394 <_ZZL8UserTaskPvENUlS_tPftE4_4_FUNES_tS0_t+0x14>)
 801a38c:	f7ff ff35 	bl	801a1fa <_ZN3CPG9set_amplcEf>
		return true;
	});
 801a390:	2001      	movs	r0, #1
 801a392:	bd08      	pop	{r3, pc}
 801a394:	240071dc 	.word	0x240071dc

0801a398 <_ZZL8UserTaskPvENUlS_tPftE6_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_AMPLH);
	//[DEL] registers->AddRegisterPointer<float>(REG_CPG_AMPLH, &reg_cpg_amplh);
	//[DEL] registers->SetRegisterPermissions(REG_CPG_AMPLH, WRITE_PERMISSION);
	registers->AddWriteCallback<float>(REG_CPG_AMPLH, &reg_cpg_amplh,
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
		*((float*)(context)) = *input;
 801a398:	ed92 0a00 	vldr	s0, [r2]
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 801a39c:	b508      	push	{r3, lr}
		*((float*)(context)) = *input;
 801a39e:	ed80 0a00 	vstr	s0, [r0]
		cpg.set_amplh(*input);
 801a3a2:	4802      	ldr	r0, [pc, #8]	@ (801a3ac <_ZZL8UserTaskPvENUlS_tPftE6_4_FUNES_tS0_t+0x14>)
 801a3a4:	f7ff ff2e 	bl	801a204 <_ZN3CPG9set_amplhEf>
		return true;
	});
 801a3a8:	2001      	movs	r0, #1
 801a3aa:	bd08      	pop	{r3, pc}
 801a3ac:	240071dc 	.word	0x240071dc

0801a3b0 <_ZZL8UserTaskPvENUlS_tPftE8_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_NWAVE);
	//[DEL] registers->AddRegisterPointer<float>(REG_CPG_NWAVE, &reg_cpg_nwave);
	//[DEL] registers->SetRegisterPermissions(REG_CPG_NWAVE, WRITE_PERMISSION);
	registers->AddWriteCallback<float>(REG_CPG_NWAVE, &reg_cpg_nwave,
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
		*((float*)(context)) = *input;
 801a3b0:	ed92 0a00 	vldr	s0, [r2]
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 801a3b4:	b508      	push	{r3, lr}
		*((float*)(context)) = *input;
 801a3b6:	ed80 0a00 	vstr	s0, [r0]
		cpg.set_nwave(*input);
 801a3ba:	4802      	ldr	r0, [pc, #8]	@ (801a3c4 <_ZZL8UserTaskPvENUlS_tPftE8_4_FUNES_tS0_t+0x14>)
 801a3bc:	f7ff ffb6 	bl	801a32c <_ZN3CPG9set_nwaveEf>
		return true;
	});
 801a3c0:	2001      	movs	r0, #1
 801a3c2:	bd08      	pop	{r3, pc}
 801a3c4:	240071dc 	.word	0x240071dc

0801a3c8 <_ZZL8UserTaskPvENUlS_tPftE10_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_COUPLING_STRENGTH);
	//[DEL] registers->AddRegisterPointer<float>(REG_CPG_COUPLING_STRENGTH, &reg_cpg_coupling_strength);
	//[DEL] registers->SetRegisterPermissions(REG_CPG_COUPLING_STRENGTH, WRITE_PERMISSION);
	registers->AddWriteCallback<float>(REG_CPG_COUPLING_STRENGTH, &reg_cpg_coupling_strength,
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
		*((float*)(context)) = *input;
 801a3c8:	ed92 0a00 	vldr	s0, [r2]
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 801a3cc:	b508      	push	{r3, lr}
		*((float*)(context)) = *input;
 801a3ce:	ed80 0a00 	vstr	s0, [r0]
		cpg.set_coupling_strength(*input);
 801a3d2:	4802      	ldr	r0, [pc, #8]	@ (801a3dc <_ZZL8UserTaskPvENUlS_tPftE10_4_FUNES_tS0_t+0x14>)
 801a3d4:	f7ff ff1b 	bl	801a20e <_ZN3CPG21set_coupling_strengthEf>
		return true;
	});
 801a3d8:	2001      	movs	r0, #1
 801a3da:	bd08      	pop	{r3, pc}
 801a3dc:	240071dc 	.word	0x240071dc

0801a3e0 <_ZZL8UserTaskPvENUlS_tPftE12_4_FUNES_tS0_t>:
	registers->SetRegisterAsSingle(REG_CPG_A_R);
	//[DEL] registers->AddRegisterPointer<float>(REG_CPG_A_R, &reg_cpg_a_r);
	//[DEL] registers->SetRegisterPermissions(REG_CPG_A_R, WRITE_PERMISSION);
	registers->AddWriteCallback<float>(REG_CPG_A_R, &reg_cpg_a_r,
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
		*((float*)(context)) = *input;
 801a3e0:	ed92 0a00 	vldr	s0, [r2]
		[](void* context , uint16_t register_ID , float* input , uint16_t length) -> bool {
 801a3e4:	b508      	push	{r3, lr}
		*((float*)(context)) = *input;
 801a3e6:	ed80 0a00 	vstr	s0, [r0]
		cpg.set_a_r(*input);
 801a3ea:	4802      	ldr	r0, [pc, #8]	@ (801a3f4 <_ZZL8UserTaskPvENUlS_tPftE12_4_FUNES_tS0_t+0x14>)
 801a3ec:	f7ff ff14 	bl	801a218 <_ZN3CPG7set_a_rEf>
		return true;
	});
 801a3f0:	2001      	movs	r0, #1
 801a3f2:	bd08      	pop	{r3, pc}
 801a3f4:	240071dc 	.word	0x240071dc

0801a3f8 <_ZZL8UserTaskPvENUlS_tPPfPtE11_4_FUNES_tS1_S2_>:
		[](void* context, uint16_t regiser_ID, float** output, uint16_t* length) -> bool {
 801a3f8:	6010      	str	r0, [r2, #0]
 801a3fa:	2001      	movs	r0, #1
 801a3fc:	4770      	bx	lr
	...

0801a400 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 801a400:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801a402:	4926      	ldr	r1, [pc, #152]	@ (801a49c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 801a404:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801a406:	4826      	ldr	r0, [pc, #152]	@ (801a4a0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 801a408:	f001 fc9c 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a40c:	2800      	cmp	r0, #0
 801a40e:	d133      	bne.n	801a478 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801a410:	4924      	ldr	r1, [pc, #144]	@ (801a4a4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa4>)
 801a412:	4823      	ldr	r0, [pc, #140]	@ (801a4a0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 801a414:	f001 fc96 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a418:	2800      	cmp	r0, #0
 801a41a:	d12f      	bne.n	801a47c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801a41c:	4922      	ldr	r1, [pc, #136]	@ (801a4a8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa8>)
 801a41e:	4820      	ldr	r0, [pc, #128]	@ (801a4a0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 801a420:	f001 fc90 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a424:	bb60      	cbnz	r0, 801a480 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801a426:	4921      	ldr	r1, [pc, #132]	@ (801a4ac <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xac>)
 801a428:	481d      	ldr	r0, [pc, #116]	@ (801a4a0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 801a42a:	f001 fc8b 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a42e:	bb48      	cbnz	r0, 801a484 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801a430:	491f      	ldr	r1, [pc, #124]	@ (801a4b0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb0>)
 801a432:	481b      	ldr	r0, [pc, #108]	@ (801a4a0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 801a434:	f001 fc86 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a438:	bb30      	cbnz	r0, 801a488 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801a43a:	491e      	ldr	r1, [pc, #120]	@ (801a4b4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb4>)
 801a43c:	4818      	ldr	r0, [pc, #96]	@ (801a4a0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 801a43e:	f001 fc81 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a442:	bb18      	cbnz	r0, 801a48c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801a444:	491c      	ldr	r1, [pc, #112]	@ (801a4b8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xb8>)
 801a446:	4816      	ldr	r0, [pc, #88]	@ (801a4a0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 801a448:	f001 fc7c 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a44c:	bb00      	cbnz	r0, 801a490 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 801a44e:	491b      	ldr	r1, [pc, #108]	@ (801a4bc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xbc>)
 801a450:	4813      	ldr	r0, [pc, #76]	@ (801a4a0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 801a452:	f001 fc77 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a456:	b9e8      	cbnz	r0, 801a494 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801a458:	4911      	ldr	r1, [pc, #68]	@ (801a4a0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 801a45a:	4608      	mov	r0, r1
 801a45c:	f001 fc72 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a460:	b9d0      	cbnz	r0, 801a498 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801a462:	4917      	ldr	r1, [pc, #92]	@ (801a4c0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xc0>)
 801a464:	480e      	ldr	r0, [pc, #56]	@ (801a4a0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0xa0>)
 801a466:	f001 fc6d 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801a46a:	2800      	cmp	r0, #0
 801a46c:	bf14      	ite	ne
 801a46e:	2309      	movne	r3, #9
 801a470:	2300      	moveq	r3, #0
 801a472:	7020      	strb	r0, [r4, #0]
}
 801a474:	4618      	mov	r0, r3
 801a476:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801a478:	2300      	movs	r3, #0
 801a47a:	e7fa      	b.n	801a472 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801a47c:	2301      	movs	r3, #1
 801a47e:	e7f8      	b.n	801a472 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801a480:	2302      	movs	r3, #2
 801a482:	e7f6      	b.n	801a472 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801a484:	2303      	movs	r3, #3
 801a486:	e7f4      	b.n	801a472 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801a488:	2304      	movs	r3, #4
 801a48a:	e7f2      	b.n	801a472 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801a48c:	2305      	movs	r3, #5
 801a48e:	e7f0      	b.n	801a472 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801a490:	2306      	movs	r3, #6
 801a492:	e7ee      	b.n	801a472 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 801a494:	2307      	movs	r3, #7
 801a496:	e7ec      	b.n	801a472 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801a498:	2308      	movs	r3, #8
 801a49a:	e7ea      	b.n	801a472 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x72>
 801a49c:	0801ca50 	.word	0x0801ca50
 801a4a0:	0801ca18 	.word	0x0801ca18
 801a4a4:	0801ca40 	.word	0x0801ca40
 801a4a8:	0801ca30 	.word	0x0801ca30
 801a4ac:	0801ca20 	.word	0x0801ca20
 801a4b0:	0801ca58 	.word	0x0801ca58
 801a4b4:	0801ca48 	.word	0x0801ca48
 801a4b8:	0801ca38 	.word	0x0801ca38
 801a4bc:	0801ca28 	.word	0x0801ca28
 801a4c0:	0801ca10 	.word	0x0801ca10

0801a4c4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801a4c4:	4926      	ldr	r1, [pc, #152]	@ (801a560 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 801a4c6:	b510      	push	{r4, lr}
 801a4c8:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801a4ca:	4608      	mov	r0, r1
 801a4cc:	f001 fc3a 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a4d0:	2800      	cmp	r0, #0
 801a4d2:	d133      	bne.n	801a53c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801a4d4:	4923      	ldr	r1, [pc, #140]	@ (801a564 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa0>)
 801a4d6:	4822      	ldr	r0, [pc, #136]	@ (801a560 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801a4d8:	f001 fc34 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a4dc:	2800      	cmp	r0, #0
 801a4de:	d12f      	bne.n	801a540 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801a4e0:	4921      	ldr	r1, [pc, #132]	@ (801a568 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa4>)
 801a4e2:	481f      	ldr	r0, [pc, #124]	@ (801a560 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801a4e4:	f001 fc2e 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a4e8:	bb60      	cbnz	r0, 801a544 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801a4ea:	4920      	ldr	r1, [pc, #128]	@ (801a56c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xa8>)
 801a4ec:	481c      	ldr	r0, [pc, #112]	@ (801a560 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801a4ee:	f001 fc29 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a4f2:	bb48      	cbnz	r0, 801a548 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801a4f4:	491e      	ldr	r1, [pc, #120]	@ (801a570 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xac>)
 801a4f6:	481a      	ldr	r0, [pc, #104]	@ (801a560 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801a4f8:	f001 fc24 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a4fc:	bb30      	cbnz	r0, 801a54c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801a4fe:	491d      	ldr	r1, [pc, #116]	@ (801a574 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb0>)
 801a500:	4817      	ldr	r0, [pc, #92]	@ (801a560 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801a502:	f001 fc1f 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a506:	bb18      	cbnz	r0, 801a550 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801a508:	491b      	ldr	r1, [pc, #108]	@ (801a578 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb4>)
 801a50a:	4815      	ldr	r0, [pc, #84]	@ (801a560 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801a50c:	f001 fc1a 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a510:	bb00      	cbnz	r0, 801a554 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 801a512:	491a      	ldr	r1, [pc, #104]	@ (801a57c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xb8>)
 801a514:	4812      	ldr	r0, [pc, #72]	@ (801a560 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801a516:	f001 fc15 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a51a:	b9e8      	cbnz	r0, 801a558 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801a51c:	4918      	ldr	r1, [pc, #96]	@ (801a580 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xbc>)
 801a51e:	4810      	ldr	r0, [pc, #64]	@ (801a560 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801a520:	f001 fc10 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a524:	b9d0      	cbnz	r0, 801a55c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801a526:	4917      	ldr	r1, [pc, #92]	@ (801a584 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0xc0>)
 801a528:	480d      	ldr	r0, [pc, #52]	@ (801a560 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x9c>)
 801a52a:	f001 fc0b 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801a52e:	2800      	cmp	r0, #0
 801a530:	bf14      	ite	ne
 801a532:	2309      	movne	r3, #9
 801a534:	2300      	moveq	r3, #0
 801a536:	7020      	strb	r0, [r4, #0]
}
 801a538:	4618      	mov	r0, r3
 801a53a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801a53c:	2300      	movs	r3, #0
 801a53e:	e7fa      	b.n	801a536 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801a540:	2301      	movs	r3, #1
 801a542:	e7f8      	b.n	801a536 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801a544:	2302      	movs	r3, #2
 801a546:	e7f6      	b.n	801a536 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801a548:	2303      	movs	r3, #3
 801a54a:	e7f4      	b.n	801a536 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801a54c:	2304      	movs	r3, #4
 801a54e:	e7f2      	b.n	801a536 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801a550:	2305      	movs	r3, #5
 801a552:	e7f0      	b.n	801a536 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801a554:	2306      	movs	r3, #6
 801a556:	e7ee      	b.n	801a536 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 801a558:	2307      	movs	r3, #7
 801a55a:	e7ec      	b.n	801a536 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801a55c:	2308      	movs	r3, #8
 801a55e:	e7ea      	b.n	801a536 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x72>
 801a560:	0801ca50 	.word	0x0801ca50
 801a564:	0801ca40 	.word	0x0801ca40
 801a568:	0801ca30 	.word	0x0801ca30
 801a56c:	0801ca20 	.word	0x0801ca20
 801a570:	0801ca58 	.word	0x0801ca58
 801a574:	0801ca48 	.word	0x0801ca48
 801a578:	0801ca38 	.word	0x0801ca38
 801a57c:	0801ca28 	.word	0x0801ca28
 801a580:	0801ca18 	.word	0x0801ca18
 801a584:	0801ca10 	.word	0x0801ca10

0801a588 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 801a588:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801a58a:	4926      	ldr	r1, [pc, #152]	@ (801a624 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 801a58c:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801a58e:	4826      	ldr	r0, [pc, #152]	@ (801a628 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 801a590:	f001 fbd8 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a594:	2800      	cmp	r0, #0
 801a596:	d133      	bne.n	801a600 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801a598:	4924      	ldr	r1, [pc, #144]	@ (801a62c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa4>)
 801a59a:	4823      	ldr	r0, [pc, #140]	@ (801a628 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 801a59c:	f001 fbd2 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a5a0:	2800      	cmp	r0, #0
 801a5a2:	d12f      	bne.n	801a604 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801a5a4:	4922      	ldr	r1, [pc, #136]	@ (801a630 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa8>)
 801a5a6:	4820      	ldr	r0, [pc, #128]	@ (801a628 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 801a5a8:	f001 fbcc 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a5ac:	bb60      	cbnz	r0, 801a608 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801a5ae:	4921      	ldr	r1, [pc, #132]	@ (801a634 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xac>)
 801a5b0:	481d      	ldr	r0, [pc, #116]	@ (801a628 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 801a5b2:	f001 fbc7 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a5b6:	bb48      	cbnz	r0, 801a60c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801a5b8:	491b      	ldr	r1, [pc, #108]	@ (801a628 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 801a5ba:	4608      	mov	r0, r1
 801a5bc:	f001 fbc2 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a5c0:	bb30      	cbnz	r0, 801a610 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801a5c2:	491d      	ldr	r1, [pc, #116]	@ (801a638 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xb0>)
 801a5c4:	4818      	ldr	r0, [pc, #96]	@ (801a628 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 801a5c6:	f001 fbbd 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a5ca:	bb18      	cbnz	r0, 801a614 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801a5cc:	491b      	ldr	r1, [pc, #108]	@ (801a63c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xb4>)
 801a5ce:	4816      	ldr	r0, [pc, #88]	@ (801a628 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 801a5d0:	f001 fbb8 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a5d4:	bb00      	cbnz	r0, 801a618 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 801a5d6:	491a      	ldr	r1, [pc, #104]	@ (801a640 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xb8>)
 801a5d8:	4813      	ldr	r0, [pc, #76]	@ (801a628 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 801a5da:	f001 fbb3 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a5de:	b9e8      	cbnz	r0, 801a61c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801a5e0:	4918      	ldr	r1, [pc, #96]	@ (801a644 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xbc>)
 801a5e2:	4811      	ldr	r0, [pc, #68]	@ (801a628 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 801a5e4:	f001 fbae 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a5e8:	b9d0      	cbnz	r0, 801a620 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801a5ea:	4917      	ldr	r1, [pc, #92]	@ (801a648 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xc0>)
 801a5ec:	480e      	ldr	r0, [pc, #56]	@ (801a628 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0xa0>)
 801a5ee:	f001 fba9 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801a5f2:	2800      	cmp	r0, #0
 801a5f4:	bf14      	ite	ne
 801a5f6:	2309      	movne	r3, #9
 801a5f8:	2300      	moveq	r3, #0
 801a5fa:	7020      	strb	r0, [r4, #0]
}
 801a5fc:	4618      	mov	r0, r3
 801a5fe:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801a600:	2300      	movs	r3, #0
 801a602:	e7fa      	b.n	801a5fa <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801a604:	2301      	movs	r3, #1
 801a606:	e7f8      	b.n	801a5fa <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801a608:	2302      	movs	r3, #2
 801a60a:	e7f6      	b.n	801a5fa <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801a60c:	2303      	movs	r3, #3
 801a60e:	e7f4      	b.n	801a5fa <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801a610:	2304      	movs	r3, #4
 801a612:	e7f2      	b.n	801a5fa <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801a614:	2305      	movs	r3, #5
 801a616:	e7f0      	b.n	801a5fa <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801a618:	2306      	movs	r3, #6
 801a61a:	e7ee      	b.n	801a5fa <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 801a61c:	2307      	movs	r3, #7
 801a61e:	e7ec      	b.n	801a5fa <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801a620:	2308      	movs	r3, #8
 801a622:	e7ea      	b.n	801a5fa <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x72>
 801a624:	0801ca50 	.word	0x0801ca50
 801a628:	0801ca58 	.word	0x0801ca58
 801a62c:	0801ca40 	.word	0x0801ca40
 801a630:	0801ca30 	.word	0x0801ca30
 801a634:	0801ca20 	.word	0x0801ca20
 801a638:	0801ca48 	.word	0x0801ca48
 801a63c:	0801ca38 	.word	0x0801ca38
 801a640:	0801ca28 	.word	0x0801ca28
 801a644:	0801ca18 	.word	0x0801ca18
 801a648:	0801ca10 	.word	0x0801ca10

0801a64c <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 801a64c:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801a64e:	4926      	ldr	r1, [pc, #152]	@ (801a6e8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x9c>)
uint8_t Registers::GetTypeID (bool* success) {
 801a650:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801a652:	4826      	ldr	r0, [pc, #152]	@ (801a6ec <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801a654:	f001 fb76 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a658:	2800      	cmp	r0, #0
 801a65a:	d133      	bne.n	801a6c4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801a65c:	4924      	ldr	r1, [pc, #144]	@ (801a6f0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa4>)
 801a65e:	4823      	ldr	r0, [pc, #140]	@ (801a6ec <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801a660:	f001 fb70 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a664:	2800      	cmp	r0, #0
 801a666:	d12f      	bne.n	801a6c8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801a668:	4920      	ldr	r1, [pc, #128]	@ (801a6ec <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801a66a:	4608      	mov	r0, r1
 801a66c:	f001 fb6a 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a670:	bb60      	cbnz	r0, 801a6cc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801a672:	4920      	ldr	r1, [pc, #128]	@ (801a6f4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa8>)
 801a674:	481d      	ldr	r0, [pc, #116]	@ (801a6ec <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801a676:	f001 fb65 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a67a:	bb48      	cbnz	r0, 801a6d0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801a67c:	491e      	ldr	r1, [pc, #120]	@ (801a6f8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xac>)
 801a67e:	481b      	ldr	r0, [pc, #108]	@ (801a6ec <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801a680:	f001 fb60 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a684:	bb30      	cbnz	r0, 801a6d4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801a686:	491d      	ldr	r1, [pc, #116]	@ (801a6fc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb0>)
 801a688:	4818      	ldr	r0, [pc, #96]	@ (801a6ec <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801a68a:	f001 fb5b 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a68e:	bb18      	cbnz	r0, 801a6d8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801a690:	491b      	ldr	r1, [pc, #108]	@ (801a700 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb4>)
 801a692:	4816      	ldr	r0, [pc, #88]	@ (801a6ec <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801a694:	f001 fb56 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a698:	bb00      	cbnz	r0, 801a6dc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 801a69a:	491a      	ldr	r1, [pc, #104]	@ (801a704 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xb8>)
 801a69c:	4813      	ldr	r0, [pc, #76]	@ (801a6ec <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801a69e:	f001 fb51 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a6a2:	b9e8      	cbnz	r0, 801a6e0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801a6a4:	4918      	ldr	r1, [pc, #96]	@ (801a708 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xbc>)
 801a6a6:	4811      	ldr	r0, [pc, #68]	@ (801a6ec <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801a6a8:	f001 fb4c 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801a6ac:	b9d0      	cbnz	r0, 801a6e4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801a6ae:	4917      	ldr	r1, [pc, #92]	@ (801a70c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xc0>)
 801a6b0:	480e      	ldr	r0, [pc, #56]	@ (801a6ec <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0xa0>)
 801a6b2:	f001 fb47 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801a6b6:	2800      	cmp	r0, #0
 801a6b8:	bf14      	ite	ne
 801a6ba:	2309      	movne	r3, #9
 801a6bc:	2300      	moveq	r3, #0
 801a6be:	7020      	strb	r0, [r4, #0]
}
 801a6c0:	4618      	mov	r0, r3
 801a6c2:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801a6c4:	2300      	movs	r3, #0
 801a6c6:	e7fa      	b.n	801a6be <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801a6c8:	2301      	movs	r3, #1
 801a6ca:	e7f8      	b.n	801a6be <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801a6cc:	2302      	movs	r3, #2
 801a6ce:	e7f6      	b.n	801a6be <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801a6d0:	2303      	movs	r3, #3
 801a6d2:	e7f4      	b.n	801a6be <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801a6d4:	2304      	movs	r3, #4
 801a6d6:	e7f2      	b.n	801a6be <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
 801a6d8:	2305      	movs	r3, #5
 801a6da:	e7f0      	b.n	801a6be <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801a6dc:	2306      	movs	r3, #6
 801a6de:	e7ee      	b.n	801a6be <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
 801a6e0:	2307      	movs	r3, #7
 801a6e2:	e7ec      	b.n	801a6be <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801a6e4:	2308      	movs	r3, #8
 801a6e6:	e7ea      	b.n	801a6be <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x72>
 801a6e8:	0801ca50 	.word	0x0801ca50
 801a6ec:	0801ca30 	.word	0x0801ca30
 801a6f0:	0801ca40 	.word	0x0801ca40
 801a6f4:	0801ca20 	.word	0x0801ca20
 801a6f8:	0801ca58 	.word	0x0801ca58
 801a6fc:	0801ca48 	.word	0x0801ca48
 801a700:	0801ca38 	.word	0x0801ca38
 801a704:	0801ca28 	.word	0x0801ca28
 801a708:	0801ca18 	.word	0x0801ca18
 801a70c:	0801ca10 	.word	0x0801ca10

0801a710 <_ZZL8UserTaskPvENUlS_tPPfPtE13_4_FUNES_tS1_S2_>:
	registers->AddReadCallback<float>(REG_CPG_A_R, &reg_cpg_a_r,
		[](void* context, uint16_t regiser_ID, float** output, uint16_t* length) -> bool {
 801a710:	6010      	str	r0, [r2, #0]
 801a712:	2001      	movs	r0, #1
 801a714:	4770      	bx	lr

0801a716 <_ZZL8UserTaskPvENUlS_tPPfPtE3_4_FUNES_tS1_S2_>:
		[](void* context, uint16_t regiser_ID, float** output, uint16_t* length) -> bool {
 801a716:	6010      	str	r0, [r2, #0]
 801a718:	2001      	movs	r0, #1
 801a71a:	4770      	bx	lr

0801a71c <_ZZL8UserTaskPvENUlS_tPPfPtE5_4_FUNES_tS1_S2_>:
		[](void* context, uint16_t regiser_ID, float** output, uint16_t* length) -> bool {
 801a71c:	6010      	str	r0, [r2, #0]
 801a71e:	2001      	movs	r0, #1
 801a720:	4770      	bx	lr

0801a722 <_ZZL8UserTaskPvENUlS_tPPfPtE7_4_FUNES_tS1_S2_>:
		[](void* context, uint16_t regiser_ID, float** output, uint16_t* length) -> bool {
 801a722:	6010      	str	r0, [r2, #0]
 801a724:	2001      	movs	r0, #1
 801a726:	4770      	bx	lr

0801a728 <_ZZL8UserTaskPvENUlS_tPPfPtE9_4_FUNES_tS1_S2_>:
		[](void* context, uint16_t regiser_ID, float** output, uint16_t* length) -> bool {
 801a728:	6010      	str	r0, [r2, #0]
 801a72a:	2001      	movs	r0, #1
 801a72c:	4770      	bx	lr

0801a72e <_ZN4UserC1EP9RegistersP17MasterSubscribersP13CommunicationP8ServicesP10PublishersP13HardwareDelayP7SensorsP4LEDS>:
User::User(	Registers* registers_,
 801a72e:	b510      	push	{r4, lr}
	communication = communication_;
 801a730:	6083      	str	r3, [r0, #8]
	services = services_;
 801a732:	9b02      	ldr	r3, [sp, #8]
 801a734:	60c3      	str	r3, [r0, #12]
	publishers = publishers_;
 801a736:	9b03      	ldr	r3, [sp, #12]
 801a738:	6103      	str	r3, [r0, #16]
	hardware_delay = hardware_delay_;
 801a73a:	9b04      	ldr	r3, [sp, #16]
 801a73c:	6143      	str	r3, [r0, #20]
	sensors = sensors_;
 801a73e:	9b05      	ldr	r3, [sp, #20]
 801a740:	6183      	str	r3, [r0, #24]
	leds = leds_;
 801a742:	9b06      	ldr	r3, [sp, #24]
	subscribers = subscribers_;
 801a744:	e9c0 1200 	strd	r1, r2, [r0]
	leds = leds_;
 801a748:	61c3      	str	r3, [r0, #28]
}
 801a74a:	bd10      	pop	{r4, pc}

0801a74c <_ZN4User4InitEv>:
}
 801a74c:	4770      	bx	lr
	...

0801a750 <_ZN4User12AddOSThreadsEv>:
void User::AddOSThreads(void) {
 801a750:	b530      	push	{r4, r5, lr}
	};
 801a752:	4d19      	ldr	r5, [pc, #100]	@ (801a7b8 <_ZN4User12AddOSThreadsEv+0x68>)
void User::AddOSThreads(void) {
 801a754:	b08b      	sub	sp, #44	@ 0x2c
 801a756:	4604      	mov	r4, r0
	};
 801a758:	682b      	ldr	r3, [r5, #0]
 801a75a:	f3bf 8f5b 	dmb	ish
 801a75e:	07d9      	lsls	r1, r3, #31
 801a760:	d417      	bmi.n	801a792 <_ZN4User12AddOSThreadsEv+0x42>
 801a762:	4628      	mov	r0, r5
 801a764:	f001 fa48 	bl	801bbf8 <__cxa_guard_acquire>
 801a768:	b198      	cbz	r0, 801a792 <_ZN4User12AddOSThreadsEv+0x42>
 801a76a:	6822      	ldr	r2, [r4, #0]
 801a76c:	4628      	mov	r0, r5
 801a76e:	4b13      	ldr	r3, [pc, #76]	@ (801a7bc <_ZN4User12AddOSThreadsEv+0x6c>)
 801a770:	601a      	str	r2, [r3, #0]
 801a772:	6862      	ldr	r2, [r4, #4]
 801a774:	605a      	str	r2, [r3, #4]
 801a776:	68a2      	ldr	r2, [r4, #8]
 801a778:	609a      	str	r2, [r3, #8]
 801a77a:	68e2      	ldr	r2, [r4, #12]
 801a77c:	60da      	str	r2, [r3, #12]
 801a77e:	6922      	ldr	r2, [r4, #16]
 801a780:	611a      	str	r2, [r3, #16]
 801a782:	6962      	ldr	r2, [r4, #20]
 801a784:	615a      	str	r2, [r3, #20]
 801a786:	69a2      	ldr	r2, [r4, #24]
 801a788:	619a      	str	r2, [r3, #24]
 801a78a:	69e2      	ldr	r2, [r4, #28]
 801a78c:	61da      	str	r2, [r3, #28]
 801a78e:	f001 fa3f 	bl	801bc10 <__cxa_guard_release>
	const osThreadAttr_t UserTask_attributes = {
 801a792:	2220      	movs	r2, #32
 801a794:	2100      	movs	r1, #0
 801a796:	a802      	add	r0, sp, #8
 801a798:	f001 fd8e 	bl	801c2b8 <memset>
 801a79c:	4b08      	ldr	r3, [pc, #32]	@ (801a7c0 <_ZN4User12AddOSThreadsEv+0x70>)
 801a79e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
 801a7a2:	4906      	ldr	r1, [pc, #24]	@ (801a7bc <_ZN4User12AddOSThreadsEv+0x6c>)
	const osThreadAttr_t UserTask_attributes = {
 801a7a4:	9301      	str	r3, [sp, #4]
 801a7a6:	2308      	movs	r3, #8
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
 801a7a8:	4806      	ldr	r0, [pc, #24]	@ (801a7c4 <_ZN4User12AddOSThreadsEv+0x74>)
	const osThreadAttr_t UserTask_attributes = {
 801a7aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
 801a7ae:	aa01      	add	r2, sp, #4
 801a7b0:	f7f1 ff28 	bl	800c604 <osThreadNew>
}
 801a7b4:	b00b      	add	sp, #44	@ 0x2c
 801a7b6:	bd30      	pop	{r4, r5, pc}
 801a7b8:	2400945c 	.word	0x2400945c
 801a7bc:	24009460 	.word	0x24009460
 801a7c0:	0801c914 	.word	0x0801c914
 801a7c4:	0801b34d 	.word	0x0801b34d

0801a7c8 <_ZN3CPGC1Ev>:
#include <stdint.h>
//defines the max number of modules
#define MAX_MODULES     20
#define MAX_OSCILLATORS (MAX_MODULES*2)

class CPG {
 801a7c8:	b538      	push	{r3, r4, r5, lr}
 801a7ca:	25a0      	movs	r5, #160	@ 0xa0
 801a7cc:	4604      	mov	r4, r0
 801a7ce:	2100      	movs	r1, #0
 801a7d0:	462a      	mov	r2, r5
 801a7d2:	f001 fd71 	bl	801c2b8 <memset>
 801a7d6:	462a      	mov	r2, r5
 801a7d8:	2100      	movs	r1, #0
 801a7da:	1960      	adds	r0, r4, r5
 801a7dc:	f001 fd6c 	bl	801c2b8 <memset>
 801a7e0:	462a      	mov	r2, r5
 801a7e2:	2100      	movs	r1, #0
 801a7e4:	f504 70a0 	add.w	r0, r4, #320	@ 0x140
 801a7e8:	f001 fd66 	bl	801c2b8 <memset>
 801a7ec:	462a      	mov	r2, r5
 801a7ee:	2100      	movs	r1, #0
 801a7f0:	f504 70f0 	add.w	r0, r4, #480	@ 0x1e0
 801a7f4:	f001 fd60 	bl	801c2b8 <memset>
 801a7f8:	462a      	mov	r2, r5
 801a7fa:	2100      	movs	r1, #0
 801a7fc:	f504 7020 	add.w	r0, r4, #640	@ 0x280
 801a800:	f001 fd5a 	bl	801c2b8 <memset>
 801a804:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 801a808:	2100      	movs	r1, #0
 801a80a:	f504 7048 	add.w	r0, r4, #800	@ 0x320
 801a80e:	f001 fd53 	bl	801c2b8 <memset>
 801a812:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 801a816:	2100      	movs	r1, #0
 801a818:	f504 6016 	add.w	r0, r4, #2400	@ 0x960
 801a81c:	f001 fd4c 	bl	801c2b8 <memset>
 801a820:	4620      	mov	r0, r4
 801a822:	bd38      	pop	{r3, r4, r5, pc}

0801a824 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0>:
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 801a824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a828:	4607      	mov	r7, r0
 801a82a:	f2ad 4d14 	subw	sp, sp, #1044	@ 0x414
 801a82e:	4689      	mov	r9, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801a830:	6800      	ldr	r0, [r0, #0]
 801a832:	f04f 31ff 	mov.w	r1, #4294967295
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 801a836:	461e      	mov	r6, r3
 801a838:	4615      	mov	r5, r2
 801a83a:	f89d a438 	ldrb.w	sl, [sp, #1080]	@ 0x438
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801a83e:	f7f1 ffa9 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801a842:	f10d 020f 	add.w	r2, sp, #15
 801a846:	4649      	mov	r1, r9
 801a848:	4638      	mov	r0, r7
 801a84a:	f7fd fd66 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801a84e:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801a852:	4604      	mov	r4, r0
	if (!success) {
 801a854:	b933      	cbnz	r3, 801a864 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0x40>
		osSemaphoreRelease(RegistersSemaphore);
 801a856:	6838      	ldr	r0, [r7, #0]
 801a858:	f7f1 ffd0 	bl	800c7fc <osSemaphoreRelease>
}
 801a85c:	f20d 4d14 	addw	sp, sp, #1044	@ 0x414
 801a860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801a864:	f10d 000f 	add.w	r0, sp, #15
 801a868:	f7ff fef0 	bl	801a64c <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 801a86c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801a870:	2b00      	cmp	r3, #0
 801a872:	d0f0      	beq.n	801a856 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0x32>
	if (target_register->register_info.type != registered_type) {
 801a874:	7923      	ldrb	r3, [r4, #4]
 801a876:	4298      	cmp	r0, r3
 801a878:	d1ed      	bne.n	801a856 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 801a87a:	3004      	adds	r0, #4
 801a87c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 801a880:	2800      	cmp	r0, #0
 801a882:	d0e8      	beq.n	801a856 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0x32>
	if (target_register->access.read) {
 801a884:	7a63      	ldrb	r3, [r4, #9]
 801a886:	2b00      	cmp	r3, #0
 801a888:	d0e5      	beq.n	801a856 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0x32>
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 801a88a:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801a88c:	8961      	ldrh	r1, [r4, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 801a88e:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801a892:	f7f5 f87d 	bl	800f990 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>
 801a896:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 801a89a:	e9d0 8300 	ldrd	r8, r3, [r0]
 801a89e:	9301      	str	r3, [sp, #4]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801a8a0:	f1ba 0f00 	cmp.w	sl, #0
 801a8a4:	d006      	beq.n	801a8b4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0x90>
 801a8a6:	68e3      	ldr	r3, [r4, #12]
 801a8a8:	b123      	cbz	r3, 801a8b4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0x90>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 801a8aa:	f04f 31ff 	mov.w	r1, #4294967295
 801a8ae:	6818      	ldr	r0, [r3, #0]
 801a8b0:	f7f1 ff70 	bl	800c794 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 801a8b4:	7863      	ldrb	r3, [r4, #1]
 801a8b6:	b1eb      	cbz	r3, 801a8f4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0xd0>
			if (output != NULL) {
 801a8b8:	2d00      	cmp	r5, #0
 801a8ba:	d038      	beq.n	801a92e <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0x10a>
				*callback_output = output;
 801a8bc:	462a      	mov	r2, r5
 801a8be:	2300      	movs	r3, #0
 801a8c0:	601a      	str	r2, [r3, #0]
			if (callbacks.read != NULL) {
 801a8c2:	f1bb 0f00 	cmp.w	fp, #0
 801a8c6:	d015      	beq.n	801a8f4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0xd0>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 801a8c8:	4633      	mov	r3, r6
 801a8ca:	2200      	movs	r2, #0
 801a8cc:	4649      	mov	r1, r9
 801a8ce:	9801      	ldr	r0, [sp, #4]
 801a8d0:	47d8      	blx	fp
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 801a8d2:	7963      	ldrb	r3, [r4, #5]
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 801a8d4:	f88d 000f 	strb.w	r0, [sp, #15]
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 801a8d8:	b35b      	cbz	r3, 801a932 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0x10e>
 801a8da:	88e3      	ldrh	r3, [r4, #6]
 801a8dc:	b103      	cbz	r3, 801a8e0 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0xbc>
					*length = 1;
 801a8de:	8033      	strh	r3, [r6, #0]
				if (*callback_output != output && output != NULL) {
 801a8e0:	2300      	movs	r3, #0
 801a8e2:	6819      	ldr	r1, [r3, #0]
 801a8e4:	428d      	cmp	r5, r1
 801a8e6:	d005      	beq.n	801a8f4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0xd0>
 801a8e8:	b125      	cbz	r5, 801a8f4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0xd0>
						output[index] = (*callback_output )[index];
 801a8ea:	8832      	ldrh	r2, [r6, #0]
 801a8ec:	4628      	mov	r0, r5
 801a8ee:	0092      	lsls	r2, r2, #2
 801a8f0:	f001 fdc0 	bl	801c474 <memcpy>
		if (not success && target_register->mode.pointer) {
 801a8f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801a8f8:	b97b      	cbnz	r3, 801a91a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0xf6>
 801a8fa:	7823      	ldrb	r3, [r4, #0]
 801a8fc:	b16b      	cbz	r3, 801a91a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0xf6>
			success = true;
 801a8fe:	2301      	movs	r3, #1
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801a900:	7962      	ldrb	r2, [r4, #5]
			success = true;
 801a902:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801a906:	b342      	cbz	r2, 801a95a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0x136>
 801a908:	88e2      	ldrh	r2, [r4, #6]
 801a90a:	b9ea      	cbnz	r2, 801a948 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0x124>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a90c:	e9d8 1300 	ldrd	r1, r3, [r8]
 801a910:	1a5b      	subs	r3, r3, r1
				*length = register_vector->size();
 801a912:	f3c3 038f 	ubfx	r3, r3, #2, #16
 801a916:	8033      	strh	r3, [r6, #0]
				if (output != NULL) {
 801a918:	b995      	cbnz	r5, 801a940 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0x11c>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801a91a:	f1ba 0f00 	cmp.w	sl, #0
 801a91e:	d09a      	beq.n	801a856 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0x32>
 801a920:	68e3      	ldr	r3, [r4, #12]
 801a922:	2b00      	cmp	r3, #0
 801a924:	d097      	beq.n	801a856 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0x32>
			osSemaphoreRelease(*(target_register->register_semaphore));
 801a926:	6818      	ldr	r0, [r3, #0]
 801a928:	f7f1 ff68 	bl	800c7fc <osSemaphoreRelease>
 801a92c:	e793      	b.n	801a856 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0x32>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 801a92e:	aa04      	add	r2, sp, #16
 801a930:	e7c5      	b.n	801a8be <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0x9a>
					*length = 1;
 801a932:	2301      	movs	r3, #1
 801a934:	e7d3      	b.n	801a8de <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0xba>
						output[index] = (*register_vector)[index];
 801a936:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801a93a:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
					for (uint16_t index = 0; index < *length; index++) {
 801a93e:	3201      	adds	r2, #1
 801a940:	b290      	uxth	r0, r2
 801a942:	4298      	cmp	r0, r3
 801a944:	d3f7      	bcc.n	801a936 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0x112>
 801a946:	e7e8      	b.n	801a91a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0xf6>
				*length = target_register->register_info.length;
 801a948:	8032      	strh	r2, [r6, #0]
				if (output != NULL) {
 801a94a:	2d00      	cmp	r5, #0
 801a94c:	d0e5      	beq.n	801a91a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0xf6>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801a94e:	0092      	lsls	r2, r2, #2
 801a950:	4641      	mov	r1, r8
 801a952:	4628      	mov	r0, r5
 801a954:	f001 fc96 	bl	801c284 <memmove>
	  return __result + _Num;
 801a958:	e7df      	b.n	801a91a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0xf6>
				*length = 1;
 801a95a:	8033      	strh	r3, [r6, #0]
				if (output != NULL) {
 801a95c:	2d00      	cmp	r5, #0
 801a95e:	d0dc      	beq.n	801a91a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0xf6>
					*output = *callbacks.pointer;
 801a960:	f8d8 3000 	ldr.w	r3, [r8]
 801a964:	602b      	str	r3, [r5, #0]
 801a966:	e7d8      	b.n	801a91a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0+0xf6>

0801a968 <_ZN9Registers11AddRegisterImEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 801a968:	b570      	push	{r4, r5, r6, lr}
 801a96a:	4604      	mov	r4, r0
 801a96c:	b086      	sub	sp, #24
 801a96e:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801a970:	6800      	ldr	r0, [r0, #0]
 801a972:	f04f 31ff 	mov.w	r1, #4294967295
 801a976:	f7f1 ff0d 	bl	800c794 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801a97a:	f10d 0207 	add.w	r2, sp, #7
 801a97e:	4631      	mov	r1, r6
 801a980:	4620      	mov	r0, r4
 801a982:	f7fd fcca 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801a986:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801a98a:	b125      	cbz	r5, 801a996 <_ZN9Registers11AddRegisterImEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 801a98c:	6820      	ldr	r0, [r4, #0]
 801a98e:	f7f1 ff35 	bl	800c7fc <osSemaphoreRelease>
}
 801a992:	b006      	add	sp, #24
 801a994:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801a996:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 801a99a:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801a99e:	f7ff fe55 	bl	801a64c <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	configuration_.register_info = register_;
 801a9a2:	2301      	movs	r3, #1
 801a9a4:	f8ad 600a 	strh.w	r6, [sp, #10]
 801a9a8:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801a9ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 801a9b0:	f88d 000c 	strb.w	r0, [sp, #12]
 801a9b4:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 801a9b8:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	d0e5      	beq.n	801a98c <_ZN9Registers11AddRegisterImEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 801a9c0:	a902      	add	r1, sp, #8
 801a9c2:	1d20      	adds	r0, r4, #4
 801a9c4:	f7fa fa39 	bl	8014e3a <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 801a9c8:	e7e0      	b.n	801a98c <_ZN9Registers11AddRegisterImEEbt.isra.0+0x24>

0801a9ca <_ZN9Registers11AddRegisterIfEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 801a9ca:	b570      	push	{r4, r5, r6, lr}
 801a9cc:	4604      	mov	r4, r0
 801a9ce:	b086      	sub	sp, #24
 801a9d0:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801a9d2:	6800      	ldr	r0, [r0, #0]
 801a9d4:	f04f 31ff 	mov.w	r1, #4294967295
 801a9d8:	f7f1 fedc 	bl	800c794 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801a9dc:	f10d 0207 	add.w	r2, sp, #7
 801a9e0:	4631      	mov	r1, r6
 801a9e2:	4620      	mov	r0, r4
 801a9e4:	f7fd fc99 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801a9e8:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801a9ec:	b125      	cbz	r5, 801a9f8 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 801a9ee:	6820      	ldr	r0, [r4, #0]
 801a9f0:	f7f1 ff04 	bl	800c7fc <osSemaphoreRelease>
}
 801a9f4:	b006      	add	sp, #24
 801a9f6:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801a9f8:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 801a9fc:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801aa00:	f7ff fcfe 	bl	801a400 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	configuration_.register_info = register_;
 801aa04:	2301      	movs	r3, #1
 801aa06:	f8ad 600a 	strh.w	r6, [sp, #10]
 801aa0a:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801aa0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 801aa12:	f88d 000c 	strb.w	r0, [sp, #12]
 801aa16:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 801aa1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d0e5      	beq.n	801a9ee <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 801aa22:	a902      	add	r1, sp, #8
 801aa24:	1d20      	adds	r0, r4, #4
 801aa26:	f7fa fa08 	bl	8014e3a <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 801aa2a:	e7e0      	b.n	801a9ee <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>

0801aa2c <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 801aa2c:	b570      	push	{r4, r5, r6, lr}
 801aa2e:	4604      	mov	r4, r0
 801aa30:	b086      	sub	sp, #24
 801aa32:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801aa34:	6800      	ldr	r0, [r0, #0]
 801aa36:	f04f 31ff 	mov.w	r1, #4294967295
 801aa3a:	f7f1 feab 	bl	800c794 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801aa3e:	f10d 0207 	add.w	r2, sp, #7
 801aa42:	4631      	mov	r1, r6
 801aa44:	4620      	mov	r0, r4
 801aa46:	f7fd fc68 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801aa4a:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801aa4e:	b125      	cbz	r5, 801aa5a <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 801aa50:	6820      	ldr	r0, [r4, #0]
 801aa52:	f7f1 fed3 	bl	800c7fc <osSemaphoreRelease>
}
 801aa56:	b006      	add	sp, #24
 801aa58:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801aa5a:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 801aa5e:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801aa62:	f7ff fd2f 	bl	801a4c4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 801aa66:	2301      	movs	r3, #1
 801aa68:	f8ad 600a 	strh.w	r6, [sp, #10]
 801aa6c:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801aa70:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 801aa74:	f88d 000c 	strb.w	r0, [sp, #12]
 801aa78:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 801aa7c:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d0e5      	beq.n	801aa50 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 801aa84:	a902      	add	r1, sp, #8
 801aa86:	1d20      	adds	r0, r4, #4
 801aa88:	f7fa f9d7 	bl	8014e3a <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 801aa8c:	e7e0      	b.n	801aa50 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

0801aa8e <_ZN9Registers11AddRegisterIaEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 801aa8e:	b570      	push	{r4, r5, r6, lr}
 801aa90:	4604      	mov	r4, r0
 801aa92:	b086      	sub	sp, #24
 801aa94:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801aa96:	6800      	ldr	r0, [r0, #0]
 801aa98:	f04f 31ff 	mov.w	r1, #4294967295
 801aa9c:	f7f1 fe7a 	bl	800c794 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801aaa0:	f10d 0207 	add.w	r2, sp, #7
 801aaa4:	4631      	mov	r1, r6
 801aaa6:	4620      	mov	r0, r4
 801aaa8:	f7fd fc37 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801aaac:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801aab0:	b125      	cbz	r5, 801aabc <_ZN9Registers11AddRegisterIaEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 801aab2:	6820      	ldr	r0, [r4, #0]
 801aab4:	f7f1 fea2 	bl	800c7fc <osSemaphoreRelease>
}
 801aab8:	b006      	add	sp, #24
 801aaba:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801aabc:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 801aac0:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801aac4:	f7ff fd60 	bl	801a588 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	configuration_.register_info = register_;
 801aac8:	2301      	movs	r3, #1
 801aaca:	f8ad 600a 	strh.w	r6, [sp, #10]
 801aace:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801aad2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 801aad6:	f88d 000c 	strb.w	r0, [sp, #12]
 801aada:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 801aade:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	d0e5      	beq.n	801aab2 <_ZN9Registers11AddRegisterIaEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 801aae6:	a902      	add	r1, sp, #8
 801aae8:	1d20      	adds	r0, r4, #4
 801aaea:	f7fa f9a6 	bl	8014e3a <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 801aaee:	e7e0      	b.n	801aab2 <_ZN9Registers11AddRegisterIaEEbt.isra.0+0x24>

0801aaf0 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801aaf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aaf4:	e9d0 8900 	ldrd	r8, r9, [r0]
 801aaf8:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 801aafa:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801aafe:	eba9 0208 	sub.w	r2, r9, r8
 801ab02:	4607      	mov	r7, r0
 801ab04:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 801ab06:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ab0a:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 801ab0e:	d102      	bne.n	801ab16 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 801ab10:	4820      	ldr	r0, [pc, #128]	@ (801ab94 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 801ab12:	f001 f935 	bl	801bd80 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 801ab16:	45c1      	cmp	r9, r8
 801ab18:	bf14      	ite	ne
 801ab1a:	4622      	movne	r2, r4
 801ab1c:	2201      	moveq	r2, #1
 801ab1e:	eba1 0508 	sub.w	r5, r1, r8
 801ab22:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801ab24:	d231      	bcs.n	801ab8a <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801ab26:	b394      	cbz	r4, 801ab8e <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801ab28:	429c      	cmp	r4, r3
 801ab2a:	bf28      	it	cs
 801ab2c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801ab2e:	0120      	lsls	r0, r4, #4
 801ab30:	f001 f871 	bl	801bc16 <_Znwj>
 801ab34:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801ab36:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 801ab3a:	2d00      	cmp	r5, #0
 801ab3c:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 801ab40:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 801ab44:	dd04      	ble.n	801ab50 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801ab46:	462a      	mov	r2, r5
 801ab48:	4641      	mov	r1, r8
 801ab4a:	4630      	mov	r0, r6
 801ab4c:	f001 fb9a 	bl	801c284 <memmove>
      ptrdiff_t __count = __last - __first;
 801ab50:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 801ab54:	3510      	adds	r5, #16
      if (__count > 0)
 801ab56:	f1b9 0f00 	cmp.w	r9, #0
 801ab5a:	4435      	add	r5, r6
 801ab5c:	dd04      	ble.n	801ab68 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801ab5e:	464a      	mov	r2, r9
 801ab60:	4651      	mov	r1, sl
 801ab62:	4628      	mov	r0, r5
 801ab64:	f001 fc86 	bl	801c474 <memcpy>
      return __result + __count;
 801ab68:	444d      	add	r5, r9
	if (__p)
 801ab6a:	f1b8 0f00 	cmp.w	r8, #0
 801ab6e:	d005      	beq.n	801ab7c <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 801ab70:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801ab72:	4640      	mov	r0, r8
 801ab74:	eba1 0108 	sub.w	r1, r1, r8
 801ab78:	f001 f828 	bl	801bbcc <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 801ab7c:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801ab80:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 801ab84:	60be      	str	r6, [r7, #8]
    }
 801ab86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801ab8a:	461c      	mov	r4, r3
 801ab8c:	e7cf      	b.n	801ab2e <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801ab8e:	4626      	mov	r6, r4
 801ab90:	e7d1      	b.n	801ab36 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 801ab92:	bf00      	nop
 801ab94:	0801c592 	.word	0x0801c592

0801ab98 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 801ab98:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801ab9a:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 801ab9e:	4605      	mov	r5, r0
 801aba0:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801aba2:	429c      	cmp	r4, r3
 801aba4:	d005      	beq.n	801abb2 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE9push_backERKS1_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801aba6:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 801aba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801abac:	3410      	adds	r4, #16
 801abae:	606c      	str	r4, [r5, #4]
      }
 801abb0:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 801abb2:	4621      	mov	r1, r4
 801abb4:	f7ff ff9c 	bl	801aaf0 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 801abb8:	e7fa      	b.n	801abb0 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE9push_backERKS1_+0x18>

0801abba <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801abba:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abbc:	460c      	mov	r4, r1
 801abbe:	b087      	sub	sp, #28
 801abc0:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801abc2:	f04f 31ff 	mov.w	r1, #4294967295
 801abc6:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801abc8:	461e      	mov	r6, r3
 801abca:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801abcc:	f7f1 fde2 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801abd0:	4621      	mov	r1, r4
 801abd2:	f10d 0207 	add.w	r2, sp, #7
 801abd6:	4628      	mov	r0, r5
 801abd8:	f7fd fb9f 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801abdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801abe0:	4604      	mov	r4, r0
	if (!success) {
 801abe2:	b923      	cbnz	r3, 801abee <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 801abe4:	6828      	ldr	r0, [r5, #0]
 801abe6:	f7f1 fe09 	bl	800c7fc <osSemaphoreRelease>
}
 801abea:	b007      	add	sp, #28
 801abec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801abee:	f10d 0007 	add.w	r0, sp, #7
 801abf2:	f7ff fc67 	bl	801a4c4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 801abf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	d0f2      	beq.n	801abe4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 801abfe:	7923      	ldrb	r3, [r4, #4]
 801ac00:	4298      	cmp	r0, r3
 801ac02:	d1ef      	bne.n	801abe4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 801ac04:	3004      	adds	r0, #4
 801ac06:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ac0a:	2800      	cmp	r0, #0
 801ac0c:	d0ea      	beq.n	801abe4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801ac0e:	7823      	ldrb	r3, [r4, #0]
 801ac10:	b983      	cbnz	r3, 801ac34 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 801ac12:	7863      	ldrb	r3, [r4, #1]
 801ac14:	b973      	cbnz	r3, 801ac34 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 801ac16:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 801ac18:	a902      	add	r1, sp, #8
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ac1a:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 801ac1e:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801ac22:	1a9b      	subs	r3, r3, r2
 801ac24:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801ac26:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 801ac28:	f7f4 fcb6 	bl	800f598 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 801ac2c:	2301      	movs	r3, #1
 801ac2e:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 801ac30:	7223      	strb	r3, [r4, #8]
 801ac32:	e7d7      	b.n	801abe4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801ac34:	8961      	ldrh	r1, [r4, #10]
 801ac36:	f7f4 fb13 	bl	800f260 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 801ac3a:	e9c0 7601 	strd	r7, r6, [r0, #4]
 801ac3e:	e7f5      	b.n	801ac2c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x72>

0801ac40 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801ac40:	b570      	push	{r4, r5, r6, lr}
 801ac42:	460c      	mov	r4, r1
 801ac44:	b086      	sub	sp, #24
 801ac46:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801ac48:	f04f 31ff 	mov.w	r1, #4294967295
 801ac4c:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801ac4e:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801ac50:	f7f1 fda0 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801ac54:	4621      	mov	r1, r4
 801ac56:	f10d 0207 	add.w	r2, sp, #7
 801ac5a:	4628      	mov	r0, r5
 801ac5c:	f7fd fb5d 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801ac60:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801ac64:	4604      	mov	r4, r0
	if (!success) {
 801ac66:	b923      	cbnz	r3, 801ac72 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 801ac68:	6828      	ldr	r0, [r5, #0]
 801ac6a:	f7f1 fdc7 	bl	800c7fc <osSemaphoreRelease>
}
 801ac6e:	b006      	add	sp, #24
 801ac70:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801ac72:	f10d 0007 	add.w	r0, sp, #7
 801ac76:	f7ff fc25 	bl	801a4c4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 801ac7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	d0f2      	beq.n	801ac68 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 801ac82:	7923      	ldrb	r3, [r4, #4]
 801ac84:	4298      	cmp	r0, r3
 801ac86:	d1ef      	bne.n	801ac68 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 801ac88:	3004      	adds	r0, #4
 801ac8a:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ac8e:	2800      	cmp	r0, #0
 801ac90:	d0ea      	beq.n	801ac68 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801ac92:	7823      	ldrb	r3, [r4, #0]
 801ac94:	b983      	cbnz	r3, 801acb8 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x78>
 801ac96:	7863      	ldrb	r3, [r4, #1]
 801ac98:	b973      	cbnz	r3, 801acb8 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x78>
		target_callback_list->push_back(callback);
 801ac9a:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 801ac9c:	9602      	str	r6, [sp, #8]
 801ac9e:	e9d0 2300 	ldrd	r2, r3, [r0]
 801aca2:	1a9b      	subs	r3, r3, r2
 801aca4:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801aca6:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 801aca8:	f7f4 fc76 	bl	800f598 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 801acac:	2301      	movs	r3, #1
 801acae:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 801acb0:	f240 1301 	movw	r3, #257	@ 0x101
 801acb4:	8123      	strh	r3, [r4, #8]
 801acb6:	e7d7      	b.n	801ac68 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801acb8:	8961      	ldrh	r1, [r4, #10]
 801acba:	f7f4 fad1 	bl	800f260 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->pointer = pointer;
 801acbe:	6006      	str	r6, [r0, #0]
 801acc0:	e7f4      	b.n	801acac <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x6c>

0801acc2 <_ZN9Registers15AddReadCallbackIfEEbtPvPFbS1_tPPT_PtE.isra.0>:
bool Registers::AddReadCallback(uint16_t ID, void* context, bool (*read)(void*, uint16_t, T**, uint16_t*)) {
 801acc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801acc4:	460c      	mov	r4, r1
 801acc6:	b087      	sub	sp, #28
 801acc8:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801acca:	f04f 31ff 	mov.w	r1, #4294967295
 801acce:	6800      	ldr	r0, [r0, #0]
bool Registers::AddReadCallback(uint16_t ID, void* context, bool (*read)(void*, uint16_t, T**, uint16_t*)) {
 801acd0:	461e      	mov	r6, r3
 801acd2:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801acd4:	f7f1 fd5e 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801acd8:	4621      	mov	r1, r4
 801acda:	f10d 0207 	add.w	r2, sp, #7
 801acde:	4628      	mov	r0, r5
 801ace0:	f7fd fb1b 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801ace4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801ace8:	4604      	mov	r4, r0
	if (!success) {
 801acea:	b923      	cbnz	r3, 801acf6 <_ZN9Registers15AddReadCallbackIfEEbtPvPFbS1_tPPT_PtE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 801acec:	6828      	ldr	r0, [r5, #0]
 801acee:	f7f1 fd85 	bl	800c7fc <osSemaphoreRelease>
}
 801acf2:	b007      	add	sp, #28
 801acf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801acf6:	f10d 0007 	add.w	r0, sp, #7
 801acfa:	f7ff fb81 	bl	801a400 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 801acfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d0f2      	beq.n	801acec <_ZN9Registers15AddReadCallbackIfEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 801ad06:	7923      	ldrb	r3, [r4, #4]
 801ad08:	4298      	cmp	r0, r3
 801ad0a:	d1ef      	bne.n	801acec <_ZN9Registers15AddReadCallbackIfEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 801ad0c:	3004      	adds	r0, #4
 801ad0e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ad12:	2800      	cmp	r0, #0
 801ad14:	d0ea      	beq.n	801acec <_ZN9Registers15AddReadCallbackIfEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801ad16:	7823      	ldrb	r3, [r4, #0]
 801ad18:	b983      	cbnz	r3, 801ad3c <_ZN9Registers15AddReadCallbackIfEEbtPvPFbS1_tPPT_PtE.isra.0+0x7a>
 801ad1a:	7863      	ldrb	r3, [r4, #1]
 801ad1c:	b973      	cbnz	r3, 801ad3c <_ZN9Registers15AddReadCallbackIfEEbtPvPFbS1_tPPT_PtE.isra.0+0x7a>
		target_callback_list->push_back(callback);
 801ad1e:	a902      	add	r1, sp, #8
		callback.read = read;
 801ad20:	9605      	str	r6, [sp, #20]
		callback.write = NULL;
 801ad22:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801ad26:	e9d0 2300 	ldrd	r2, r3, [r0]
 801ad2a:	1a9b      	subs	r3, r3, r2
 801ad2c:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801ad2e:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 801ad30:	f7fa fa24 	bl	801517c <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 801ad34:	2301      	movs	r3, #1
 801ad36:	7063      	strb	r3, [r4, #1]
	target_register->access.read = true;
 801ad38:	7263      	strb	r3, [r4, #9]
 801ad3a:	e7d7      	b.n	801acec <_ZN9Registers15AddReadCallbackIfEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801ad3c:	8961      	ldrh	r1, [r4, #10]
 801ad3e:	f7f4 fe4b 	bl	800f9d8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->context = context;
 801ad42:	6047      	str	r7, [r0, #4]
		callback->read = read;
 801ad44:	60c6      	str	r6, [r0, #12]
 801ad46:	e7f5      	b.n	801ad34 <_ZN9Registers15AddReadCallbackIfEEbtPvPFbS1_tPPT_PtE.isra.0+0x72>

0801ad48 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801ad48:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad4a:	460c      	mov	r4, r1
 801ad4c:	b087      	sub	sp, #28
 801ad4e:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801ad50:	f04f 31ff 	mov.w	r1, #4294967295
 801ad54:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801ad56:	461e      	mov	r6, r3
 801ad58:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801ad5a:	f7f1 fd1b 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801ad5e:	4621      	mov	r1, r4
 801ad60:	f10d 0207 	add.w	r2, sp, #7
 801ad64:	4628      	mov	r0, r5
 801ad66:	f7fd fad8 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801ad6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801ad6e:	4604      	mov	r4, r0
	if (!success) {
 801ad70:	b923      	cbnz	r3, 801ad7c <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 801ad72:	6828      	ldr	r0, [r5, #0]
 801ad74:	f7f1 fd42 	bl	800c7fc <osSemaphoreRelease>
}
 801ad78:	b007      	add	sp, #28
 801ad7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801ad7c:	f10d 0007 	add.w	r0, sp, #7
 801ad80:	f7ff fb3e 	bl	801a400 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 801ad84:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d0f2      	beq.n	801ad72 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 801ad8c:	7923      	ldrb	r3, [r4, #4]
 801ad8e:	4298      	cmp	r0, r3
 801ad90:	d1ef      	bne.n	801ad72 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 801ad92:	3004      	adds	r0, #4
 801ad94:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ad98:	2800      	cmp	r0, #0
 801ad9a:	d0ea      	beq.n	801ad72 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801ad9c:	7823      	ldrb	r3, [r4, #0]
 801ad9e:	b983      	cbnz	r3, 801adc2 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 801ada0:	7863      	ldrb	r3, [r4, #1]
 801ada2:	b973      	cbnz	r3, 801adc2 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 801ada4:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 801ada6:	a902      	add	r1, sp, #8
 801ada8:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 801adac:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801adb0:	1a9b      	subs	r3, r3, r2
 801adb2:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801adb4:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 801adb6:	f7fa f9e1 	bl	801517c <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 801adba:	2301      	movs	r3, #1
 801adbc:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 801adbe:	7223      	strb	r3, [r4, #8]
 801adc0:	e7d7      	b.n	801ad72 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801adc2:	8961      	ldrh	r1, [r4, #10]
 801adc4:	f7f4 fe08 	bl	800f9d8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->write = write;
 801adc8:	e9c0 7601 	strd	r7, r6, [r0, #4]
 801adcc:	e7f5      	b.n	801adba <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x72>

0801adce <_ZN9Registers18AddRegisterPointerImEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801adce:	b5f0      	push	{r4, r5, r6, r7, lr}
 801add0:	460d      	mov	r5, r1
 801add2:	b087      	sub	sp, #28
 801add4:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801add6:	f04f 31ff 	mov.w	r1, #4294967295
 801adda:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801addc:	4614      	mov	r4, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801adde:	f7f1 fcd9 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801ade2:	4629      	mov	r1, r5
 801ade4:	f10d 0207 	add.w	r2, sp, #7
 801ade8:	4630      	mov	r0, r6
 801adea:	f7fd fa96 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801adee:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801adf2:	4605      	mov	r5, r0
	if (!success) {
 801adf4:	b923      	cbnz	r3, 801ae00 <_ZN9Registers18AddRegisterPointerImEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 801adf6:	6830      	ldr	r0, [r6, #0]
 801adf8:	f7f1 fd00 	bl	800c7fc <osSemaphoreRelease>
}
 801adfc:	b007      	add	sp, #28
 801adfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801ae00:	f10d 0007 	add.w	r0, sp, #7
 801ae04:	f7ff fc22 	bl	801a64c <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 801ae08:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	d0f2      	beq.n	801adf6 <_ZN9Registers18AddRegisterPointerImEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 801ae10:	792b      	ldrb	r3, [r5, #4]
 801ae12:	4298      	cmp	r0, r3
 801ae14:	d1ef      	bne.n	801adf6 <_ZN9Registers18AddRegisterPointerImEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 801ae16:	3004      	adds	r0, #4
 801ae18:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 801ae1c:	2f00      	cmp	r7, #0
 801ae1e:	d0ea      	beq.n	801adf6 <_ZN9Registers18AddRegisterPointerImEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801ae20:	782b      	ldrb	r3, [r5, #0]
 801ae22:	b9db      	cbnz	r3, 801ae5c <_ZN9Registers18AddRegisterPointerImEEbtPT_.isra.0+0x8e>
 801ae24:	786b      	ldrb	r3, [r5, #1]
 801ae26:	b9cb      	cbnz	r3, 801ae5c <_ZN9Registers18AddRegisterPointerImEEbtPT_.isra.0+0x8e>
		callback.pointer = pointer;
 801ae28:	9402      	str	r4, [sp, #8]
      size() const _GLIBCXX_NOEXCEPT
 801ae2a:	aa02      	add	r2, sp, #8
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ae2c:	e9d7 3400 	ldrd	r3, r4, [r7]
 801ae30:	1ae3      	subs	r3, r4, r3
 801ae32:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801ae34:	816b      	strh	r3, [r5, #10]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801ae36:	68bb      	ldr	r3, [r7, #8]
 801ae38:	429c      	cmp	r4, r3
 801ae3a:	d00a      	beq.n	801ae52 <_ZN9Registers18AddRegisterPointerImEEbtPT_.isra.0+0x84>
 801ae3c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801ae3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801ae42:	3410      	adds	r4, #16
 801ae44:	607c      	str	r4, [r7, #4]
	target_register->mode.pointer = true;
 801ae46:	2301      	movs	r3, #1
 801ae48:	702b      	strb	r3, [r5, #0]
	target_register->access.write = true;
 801ae4a:	f240 1301 	movw	r3, #257	@ 0x101
 801ae4e:	812b      	strh	r3, [r5, #8]
 801ae50:	e7d1      	b.n	801adf6 <_ZN9Registers18AddRegisterPointerImEEbtPT_.isra.0+0x28>
	  _M_realloc_insert(end(), __x);
 801ae52:	4621      	mov	r1, r4
 801ae54:	4638      	mov	r0, r7
 801ae56:	f7fa f8e9 	bl	801502c <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 801ae5a:	e7f4      	b.n	801ae46 <_ZN9Registers18AddRegisterPointerImEEbtPT_.isra.0+0x78>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801ae5c:	8969      	ldrh	r1, [r5, #10]
 801ae5e:	4638      	mov	r0, r7
 801ae60:	f7f4 fd96 	bl	800f990 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>
		callback->pointer = pointer;
 801ae64:	6004      	str	r4, [r0, #0]
 801ae66:	e7ee      	b.n	801ae46 <_ZN9Registers18AddRegisterPointerImEEbtPT_.isra.0+0x78>

0801ae68 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 801ae68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae6c:	b085      	sub	sp, #20
 801ae6e:	4605      	mov	r5, r0
 801ae70:	4688      	mov	r8, r1
 801ae72:	461f      	mov	r7, r3
 801ae74:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801ae78:	f04f 31ff 	mov.w	r1, #4294967295
 801ae7c:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 801ae7e:	4616      	mov	r6, r2
 801ae80:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801ae82:	f7f1 fc87 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801ae86:	f10d 020f 	add.w	r2, sp, #15
 801ae8a:	4641      	mov	r1, r8
 801ae8c:	4628      	mov	r0, r5
 801ae8e:	f7fd fa44 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801ae92:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801ae96:	4604      	mov	r4, r0
	if (!success) {
 801ae98:	b92b      	cbnz	r3, 801aea6 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0x3e>
		osSemaphoreRelease(RegistersSemaphore);
 801ae9a:	6828      	ldr	r0, [r5, #0]
 801ae9c:	f7f1 fcae 	bl	800c7fc <osSemaphoreRelease>
}
 801aea0:	b005      	add	sp, #20
 801aea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801aea6:	f10d 000f 	add.w	r0, sp, #15
 801aeaa:	f7ff fbcf 	bl	801a64c <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 801aeae:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801aeb2:	2b00      	cmp	r3, #0
 801aeb4:	d0f1      	beq.n	801ae9a <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0x32>
	if (target_register->register_info.type != registered_type) {
 801aeb6:	7923      	ldrb	r3, [r4, #4]
 801aeb8:	4298      	cmp	r0, r3
 801aeba:	d1ee      	bne.n	801ae9a <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 801aebc:	3004      	adds	r0, #4
 801aebe:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801aec2:	2800      	cmp	r0, #0
 801aec4:	d0e9      	beq.n	801ae9a <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0x32>
	if (target_register->access.write) {
 801aec6:	7a23      	ldrb	r3, [r4, #8]
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	d0e6      	beq.n	801ae9a <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0x32>
		success = false;
 801aecc:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801aece:	8961      	ldrh	r1, [r4, #10]
		success = false;
 801aed0:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801aed4:	f7f4 fd5c 	bl	800f990 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801aed8:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801aeda:	f8d0 9008 	ldr.w	r9, [r0, #8]
 801aede:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801aee2:	b133      	cbz	r3, 801aef2 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0x8a>
 801aee4:	68e2      	ldr	r2, [r4, #12]
 801aee6:	b122      	cbz	r2, 801aef2 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0x8a>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 801aee8:	f04f 31ff 	mov.w	r1, #4294967295
 801aeec:	6810      	ldr	r0, [r2, #0]
 801aeee:	f7f1 fc51 	bl	800c794 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 801aef2:	7822      	ldrb	r2, [r4, #0]
 801aef4:	b1e2      	cbz	r2, 801af30 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0xc8>
			success = true;
 801aef6:	2201      	movs	r2, #1
 801aef8:	f88d 200f 	strb.w	r2, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801aefc:	7962      	ldrb	r2, [r4, #5]
 801aefe:	2a00      	cmp	r2, #0
 801af00:	d046      	beq.n	801af90 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0x128>
 801af02:	88e2      	ldrh	r2, [r4, #6]
 801af04:	2a00      	cmp	r2, #0
 801af06:	d13d      	bne.n	801af84 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0x11c>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801af08:	e9db 2100 	ldrd	r2, r1, [fp]
 801af0c:	428a      	cmp	r2, r1
	    this->_M_impl._M_finish = __pos;
 801af0e:	bf18      	it	ne
 801af10:	f8cb 2004 	strne.w	r2, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801af14:	f8db 0004 	ldr.w	r0, [fp, #4]
 801af18:	1a81      	subs	r1, r0, r2
 801af1a:	1089      	asrs	r1, r1, #2
	if (__new_size > size())
 801af1c:	428f      	cmp	r7, r1
 801af1e:	d921      	bls.n	801af64 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0xfc>
	  _M_default_append(__new_size - size());
 801af20:	1a79      	subs	r1, r7, r1
 801af22:	4658      	mov	r0, fp
 801af24:	f7f7 f83c 	bl	8011fa0 <_ZNSt6vectorImSaImEE17_M_default_appendEj>
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 801af28:	2200      	movs	r2, #0
				for (uint16_t index = 0; index < length; index++) {
 801af2a:	b291      	uxth	r1, r2
 801af2c:	428f      	cmp	r7, r1
 801af2e:	d821      	bhi.n	801af74 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0x10c>
		if (target_register->mode.callbacks) {
 801af30:	7863      	ldrb	r3, [r4, #1]
 801af32:	b16b      	cbz	r3, 801af50 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0xe8>
			if (callbacks.write != NULL) {
 801af34:	f1b9 0f00 	cmp.w	r9, #0
 801af38:	d00a      	beq.n	801af50 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0xe8>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801af3a:	7963      	ldrb	r3, [r4, #5]
 801af3c:	b363      	cbz	r3, 801af98 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0x130>
 801af3e:	88e3      	ldrh	r3, [r4, #6]
 801af40:	b903      	cbnz	r3, 801af44 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0xdc>
					success = callbacks.write(callbacks.context, ID, value, length);
 801af42:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 801af44:	4632      	mov	r2, r6
 801af46:	4641      	mov	r1, r8
 801af48:	4650      	mov	r0, sl
 801af4a:	47c8      	blx	r9
 801af4c:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801af50:	9b01      	ldr	r3, [sp, #4]
 801af52:	2b00      	cmp	r3, #0
 801af54:	d0a1      	beq.n	801ae9a <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0x32>
 801af56:	68e3      	ldr	r3, [r4, #12]
 801af58:	2b00      	cmp	r3, #0
 801af5a:	d09e      	beq.n	801ae9a <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0x32>
			osSemaphoreRelease(*(target_register->register_semaphore));
 801af5c:	6818      	ldr	r0, [r3, #0]
 801af5e:	f7f1 fc4d 	bl	800c7fc <osSemaphoreRelease>
 801af62:	e79a      	b.n	801ae9a <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0x32>
	else if (__new_size < size())
 801af64:	d2e0      	bcs.n	801af28 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0xc0>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 801af66:	eb02 0287 	add.w	r2, r2, r7, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801af6a:	4290      	cmp	r0, r2
 801af6c:	d0dc      	beq.n	801af28 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0xc0>
	    this->_M_impl._M_finish = __pos;
 801af6e:	f8cb 2004 	str.w	r2, [fp, #4]
 801af72:	e7d9      	b.n	801af28 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0xc0>
					(*register_vector)[index] = value[index];
 801af74:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 801af78:	f8db 1000 	ldr.w	r1, [fp]
 801af7c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
				for (uint16_t index = 0; index < length; index++) {
 801af80:	3201      	adds	r2, #1
 801af82:	e7d2      	b.n	801af2a <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0xc2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801af84:	0092      	lsls	r2, r2, #2
 801af86:	4631      	mov	r1, r6
 801af88:	4658      	mov	r0, fp
 801af8a:	f001 f97b 	bl	801c284 <memmove>
	  return __result + _Num;
 801af8e:	e7cf      	b.n	801af30 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0xc8>
				*(callbacks.pointer) = *value;
 801af90:	6832      	ldr	r2, [r6, #0]
 801af92:	f8cb 2000 	str.w	r2, [fp]
 801af96:	e7cb      	b.n	801af30 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0xc8>
					success = callbacks.write(callbacks.context, ID, value, 1);
 801af98:	2301      	movs	r3, #1
 801af9a:	e7d3      	b.n	801af44 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0+0xdc>

0801af9c <_ZN10SubGeneral12ReceiveUINT8E15SubscriberInputPKh>:
	void ReceiveUINT8(SubscriberInput information, const uint8_t* data) {
 801af9c:	b530      	push	{r4, r5, lr}
 801af9e:	b089      	sub	sp, #36	@ 0x24
 801afa0:	4604      	mov	r4, r0
 801afa2:	a803      	add	r0, sp, #12
 801afa4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		if(information.register_.address == REG_ALERT_WATER) {
 801afa8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801afac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801afb0:	d115      	bne.n	801afde <_ZN10SubGeneral12ReceiveUINT8E15SubscriberInputPKh+0x42>
			if(*data == 1 && already_alert == 0) {
 801afb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801afb4:	781d      	ldrb	r5, [r3, #0]
 801afb6:	2d01      	cmp	r5, #1
 801afb8:	d111      	bne.n	801afde <_ZN10SubGeneral12ReceiveUINT8E15SubscriberInputPKh+0x42>
				leds->SetLED(LED_USER3, GPIO_PIN_SET);
 801afba:	462a      	mov	r2, r5
 801afbc:	210c      	movs	r1, #12
 801afbe:	68a0      	ldr	r0, [r4, #8]
 801afc0:	f7f8 fec6 	bl	8013d50 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
				uint32_t value = (0x65<<24) | (0x43<<16) | (0x21<<8) | (information.interface.address&0xFF);
 801afc4:	f89d 2013 	ldrb.w	r2, [sp, #19]
 801afc8:	4b06      	ldr	r3, [pc, #24]	@ (801afe4 <_ZN10SubGeneral12ReceiveUINT8E15SubscriberInputPKh+0x48>)
				registers->WriteRegister<uint32_t>(REG_ALERT_WATER_RADIO, &value, 1);
 801afca:	f240 7101 	movw	r1, #1793	@ 0x701
 801afce:	9500      	str	r5, [sp, #0]
				uint32_t value = (0x65<<24) | (0x43<<16) | (0x21<<8) | (information.interface.address&0xFF);
 801afd0:	4313      	orrs	r3, r2
				registers->WriteRegister<uint32_t>(REG_ALERT_WATER_RADIO, &value, 1);
 801afd2:	6860      	ldr	r0, [r4, #4]
 801afd4:	aa07      	add	r2, sp, #28
				uint32_t value = (0x65<<24) | (0x43<<16) | (0x21<<8) | (information.interface.address&0xFF);
 801afd6:	9307      	str	r3, [sp, #28]
				registers->WriteRegister<uint32_t>(REG_ALERT_WATER_RADIO, &value, 1);
 801afd8:	462b      	mov	r3, r5
 801afda:	f7ff ff45 	bl	801ae68 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0>
	}
 801afde:	b009      	add	sp, #36	@ 0x24
 801afe0:	bd30      	pop	{r4, r5, pc}
 801afe2:	bf00      	nop
 801afe4:	65432100 	.word	0x65432100

0801afe8 <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 801afe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afec:	b085      	sub	sp, #20
 801afee:	4605      	mov	r5, r0
 801aff0:	4688      	mov	r8, r1
 801aff2:	461f      	mov	r7, r3
 801aff4:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801aff8:	f04f 31ff 	mov.w	r1, #4294967295
 801affc:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 801affe:	4616      	mov	r6, r2
 801b000:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801b002:	f7f1 fbc7 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801b006:	f10d 020f 	add.w	r2, sp, #15
 801b00a:	4641      	mov	r1, r8
 801b00c:	4628      	mov	r0, r5
 801b00e:	f7fd f984 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801b012:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801b016:	4604      	mov	r4, r0
	if (!success) {
 801b018:	b92b      	cbnz	r3, 801b026 <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0x3e>
		osSemaphoreRelease(RegistersSemaphore);
 801b01a:	6828      	ldr	r0, [r5, #0]
 801b01c:	f7f1 fbee 	bl	800c7fc <osSemaphoreRelease>
}
 801b020:	b005      	add	sp, #20
 801b022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801b026:	f10d 000f 	add.w	r0, sp, #15
 801b02a:	f7ff f9e9 	bl	801a400 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 801b02e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801b032:	2b00      	cmp	r3, #0
 801b034:	d0f1      	beq.n	801b01a <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0x32>
	if (target_register->register_info.type != registered_type) {
 801b036:	7923      	ldrb	r3, [r4, #4]
 801b038:	4298      	cmp	r0, r3
 801b03a:	d1ee      	bne.n	801b01a <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 801b03c:	3004      	adds	r0, #4
 801b03e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801b042:	2800      	cmp	r0, #0
 801b044:	d0e9      	beq.n	801b01a <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0x32>
	if (target_register->access.write) {
 801b046:	7a23      	ldrb	r3, [r4, #8]
 801b048:	2b00      	cmp	r3, #0
 801b04a:	d0e6      	beq.n	801b01a <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0x32>
		success = false;
 801b04c:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801b04e:	8961      	ldrh	r1, [r4, #10]
		success = false;
 801b050:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801b054:	f7f4 fcc0 	bl	800f9d8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801b058:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801b05a:	f8d0 9008 	ldr.w	r9, [r0, #8]
 801b05e:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801b062:	b133      	cbz	r3, 801b072 <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0x8a>
 801b064:	68e2      	ldr	r2, [r4, #12]
 801b066:	b122      	cbz	r2, 801b072 <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0x8a>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 801b068:	f04f 31ff 	mov.w	r1, #4294967295
 801b06c:	6810      	ldr	r0, [r2, #0]
 801b06e:	f7f1 fb91 	bl	800c794 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 801b072:	7822      	ldrb	r2, [r4, #0]
 801b074:	b1ea      	cbz	r2, 801b0b2 <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0xca>
			success = true;
 801b076:	2201      	movs	r2, #1
 801b078:	f88d 200f 	strb.w	r2, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801b07c:	7962      	ldrb	r2, [r4, #5]
 801b07e:	2a00      	cmp	r2, #0
 801b080:	d049      	beq.n	801b116 <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0x12e>
 801b082:	88e2      	ldrh	r2, [r4, #6]
 801b084:	2a00      	cmp	r2, #0
 801b086:	d140      	bne.n	801b10a <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0x122>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801b088:	e9db 2100 	ldrd	r2, r1, [fp]
 801b08c:	428a      	cmp	r2, r1
	    this->_M_impl._M_finish = __pos;
 801b08e:	bf18      	it	ne
 801b090:	f8cb 2004 	strne.w	r2, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b094:	f8db 0004 	ldr.w	r0, [fp, #4]
 801b098:	1a81      	subs	r1, r0, r2
 801b09a:	1089      	asrs	r1, r1, #2
	if (__new_size > size())
 801b09c:	428f      	cmp	r7, r1
 801b09e:	d922      	bls.n	801b0e6 <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0xfe>
	  _M_default_append(__new_size - size());
 801b0a0:	1a79      	subs	r1, r7, r1
 801b0a2:	4658      	mov	r0, fp
 801b0a4:	f7f8 f800 	bl	80130a8 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>
 801b0a8:	4630      	mov	r0, r6
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 801b0aa:	2200      	movs	r2, #0
				for (uint16_t index = 0; index < length; index++) {
 801b0ac:	b291      	uxth	r1, r2
 801b0ae:	428f      	cmp	r7, r1
 801b0b0:	d821      	bhi.n	801b0f6 <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0x10e>
		if (target_register->mode.callbacks) {
 801b0b2:	7863      	ldrb	r3, [r4, #1]
 801b0b4:	b16b      	cbz	r3, 801b0d2 <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0xea>
			if (callbacks.write != NULL) {
 801b0b6:	f1b9 0f00 	cmp.w	r9, #0
 801b0ba:	d00a      	beq.n	801b0d2 <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0xea>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801b0bc:	7963      	ldrb	r3, [r4, #5]
 801b0be:	b373      	cbz	r3, 801b11e <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0x136>
 801b0c0:	88e3      	ldrh	r3, [r4, #6]
 801b0c2:	b903      	cbnz	r3, 801b0c6 <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0xde>
					success = callbacks.write(callbacks.context, ID, value, length);
 801b0c4:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 801b0c6:	4632      	mov	r2, r6
 801b0c8:	4641      	mov	r1, r8
 801b0ca:	4650      	mov	r0, sl
 801b0cc:	47c8      	blx	r9
 801b0ce:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801b0d2:	9b01      	ldr	r3, [sp, #4]
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d0a0      	beq.n	801b01a <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0x32>
 801b0d8:	68e3      	ldr	r3, [r4, #12]
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	d09d      	beq.n	801b01a <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0x32>
			osSemaphoreRelease(*(target_register->register_semaphore));
 801b0de:	6818      	ldr	r0, [r3, #0]
 801b0e0:	f7f1 fb8c 	bl	800c7fc <osSemaphoreRelease>
 801b0e4:	e799      	b.n	801b01a <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0x32>
	else if (__new_size < size())
 801b0e6:	d2df      	bcs.n	801b0a8 <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0xc0>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 801b0e8:	eb02 0287 	add.w	r2, r2, r7, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801b0ec:	4290      	cmp	r0, r2
 801b0ee:	d0db      	beq.n	801b0a8 <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0xc0>
	    this->_M_impl._M_finish = __pos;
 801b0f0:	f8cb 2004 	str.w	r2, [fp, #4]
 801b0f4:	e7d8      	b.n	801b0a8 <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0xc0>
					(*register_vector)[index] = value[index];
 801b0f6:	f8db 1000 	ldr.w	r1, [fp]
 801b0fa:	f850 cb04 	ldr.w	ip, [r0], #4
 801b0fe:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801b102:	3201      	adds	r2, #1
 801b104:	f8c1 c000 	str.w	ip, [r1]
				for (uint16_t index = 0; index < length; index++) {
 801b108:	e7d0      	b.n	801b0ac <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0xc4>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801b10a:	0092      	lsls	r2, r2, #2
 801b10c:	4631      	mov	r1, r6
 801b10e:	4658      	mov	r0, fp
 801b110:	f001 f8b8 	bl	801c284 <memmove>
	  return __result + _Num;
 801b114:	e7cd      	b.n	801b0b2 <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0xca>
				*(callbacks.pointer) = *value;
 801b116:	6832      	ldr	r2, [r6, #0]
 801b118:	f8cb 2000 	str.w	r2, [fp]
 801b11c:	e7c9      	b.n	801b0b2 <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0xca>
					success = callbacks.write(callbacks.context, ID, value, 1);
 801b11e:	2301      	movs	r3, #1
 801b120:	e7d1      	b.n	801b0c6 <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0+0xde>

0801b122 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 801b122:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b126:	b085      	sub	sp, #20
 801b128:	4605      	mov	r5, r0
 801b12a:	4688      	mov	r8, r1
 801b12c:	461f      	mov	r7, r3
 801b12e:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801b132:	f04f 31ff 	mov.w	r1, #4294967295
 801b136:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 801b138:	4616      	mov	r6, r2
 801b13a:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801b13c:	f7f1 fb2a 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801b140:	f10d 020f 	add.w	r2, sp, #15
 801b144:	4641      	mov	r1, r8
 801b146:	4628      	mov	r0, r5
 801b148:	f7fd f8e7 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801b14c:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801b150:	4604      	mov	r4, r0
	if (!success) {
 801b152:	b92b      	cbnz	r3, 801b160 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0x3e>
		osSemaphoreRelease(RegistersSemaphore);
 801b154:	6828      	ldr	r0, [r5, #0]
 801b156:	f7f1 fb51 	bl	800c7fc <osSemaphoreRelease>
}
 801b15a:	b005      	add	sp, #20
 801b15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801b160:	f10d 000f 	add.w	r0, sp, #15
 801b164:	f7ff f9ae 	bl	801a4c4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 801b168:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d0f1      	beq.n	801b154 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0x32>
	if (target_register->register_info.type != registered_type) {
 801b170:	7923      	ldrb	r3, [r4, #4]
 801b172:	4298      	cmp	r0, r3
 801b174:	d1ee      	bne.n	801b154 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 801b176:	3004      	adds	r0, #4
 801b178:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801b17c:	2800      	cmp	r0, #0
 801b17e:	d0e9      	beq.n	801b154 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0x32>
	if (target_register->access.write) {
 801b180:	7a23      	ldrb	r3, [r4, #8]
 801b182:	2b00      	cmp	r3, #0
 801b184:	d0e6      	beq.n	801b154 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0x32>
		success = false;
 801b186:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801b188:	8961      	ldrh	r1, [r4, #10]
		success = false;
 801b18a:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801b18e:	f7f4 f867 	bl	800f260 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801b192:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801b194:	f8d0 9008 	ldr.w	r9, [r0, #8]
 801b198:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801b19c:	b133      	cbz	r3, 801b1ac <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0x8a>
 801b19e:	68e2      	ldr	r2, [r4, #12]
 801b1a0:	b122      	cbz	r2, 801b1ac <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0x8a>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 801b1a2:	f04f 31ff 	mov.w	r1, #4294967295
 801b1a6:	6810      	ldr	r0, [r2, #0]
 801b1a8:	f7f1 faf4 	bl	800c794 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 801b1ac:	7822      	ldrb	r2, [r4, #0]
 801b1ae:	b1da      	cbz	r2, 801b1e8 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0xc6>
			success = true;
 801b1b0:	2201      	movs	r2, #1
 801b1b2:	f88d 200f 	strb.w	r2, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801b1b6:	7962      	ldrb	r2, [r4, #5]
 801b1b8:	2a00      	cmp	r2, #0
 801b1ba:	d041      	beq.n	801b240 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0x11e>
 801b1bc:	88e2      	ldrh	r2, [r4, #6]
 801b1be:	2a00      	cmp	r2, #0
 801b1c0:	d139      	bne.n	801b236 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0x114>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801b1c2:	e9db 2100 	ldrd	r2, r1, [fp]
 801b1c6:	428a      	cmp	r2, r1
	    this->_M_impl._M_finish = __pos;
 801b1c8:	bf18      	it	ne
 801b1ca:	f8cb 2004 	strne.w	r2, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b1ce:	f8db 0004 	ldr.w	r0, [fp, #4]
 801b1d2:	1a81      	subs	r1, r0, r2
	if (__new_size > size())
 801b1d4:	428f      	cmp	r7, r1
 801b1d6:	d921      	bls.n	801b21c <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0xfa>
	  _M_default_append(__new_size - size());
 801b1d8:	1a79      	subs	r1, r7, r1
 801b1da:	4658      	mov	r0, fp
 801b1dc:	f7e5 fdca 	bl	8000d74 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 801b1e0:	2200      	movs	r2, #0
				for (uint16_t index = 0; index < length; index++) {
 801b1e2:	b291      	uxth	r1, r2
 801b1e4:	428f      	cmp	r7, r1
 801b1e6:	d820      	bhi.n	801b22a <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0x108>
		if (target_register->mode.callbacks) {
 801b1e8:	7863      	ldrb	r3, [r4, #1]
 801b1ea:	b16b      	cbz	r3, 801b208 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0xe6>
			if (callbacks.write != NULL) {
 801b1ec:	f1b9 0f00 	cmp.w	r9, #0
 801b1f0:	d00a      	beq.n	801b208 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0xe6>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801b1f2:	7963      	ldrb	r3, [r4, #5]
 801b1f4:	b343      	cbz	r3, 801b248 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0x126>
 801b1f6:	88e3      	ldrh	r3, [r4, #6]
 801b1f8:	b903      	cbnz	r3, 801b1fc <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0xda>
					success = callbacks.write(callbacks.context, ID, value, length);
 801b1fa:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 801b1fc:	4632      	mov	r2, r6
 801b1fe:	4641      	mov	r1, r8
 801b200:	4650      	mov	r0, sl
 801b202:	47c8      	blx	r9
 801b204:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801b208:	9b01      	ldr	r3, [sp, #4]
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d0a2      	beq.n	801b154 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0x32>
 801b20e:	68e3      	ldr	r3, [r4, #12]
 801b210:	2b00      	cmp	r3, #0
 801b212:	d09f      	beq.n	801b154 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0x32>
			osSemaphoreRelease(*(target_register->register_semaphore));
 801b214:	6818      	ldr	r0, [r3, #0]
 801b216:	f7f1 faf1 	bl	800c7fc <osSemaphoreRelease>
 801b21a:	e79b      	b.n	801b154 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0x32>
	else if (__new_size < size())
 801b21c:	d2e0      	bcs.n	801b1e0 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0xbe>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 801b21e:	443a      	add	r2, r7
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801b220:	4290      	cmp	r0, r2
 801b222:	d0dd      	beq.n	801b1e0 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0xbe>
	    this->_M_impl._M_finish = __pos;
 801b224:	f8cb 2004 	str.w	r2, [fp, #4]
 801b228:	e7da      	b.n	801b1e0 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0xbe>
					(*register_vector)[index] = value[index];
 801b22a:	5cb0      	ldrb	r0, [r6, r2]
 801b22c:	f8db 1000 	ldr.w	r1, [fp]
 801b230:	5488      	strb	r0, [r1, r2]
				for (uint16_t index = 0; index < length; index++) {
 801b232:	3201      	adds	r2, #1
 801b234:	e7d5      	b.n	801b1e2 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0xc0>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801b236:	4631      	mov	r1, r6
 801b238:	4658      	mov	r0, fp
 801b23a:	f001 f823 	bl	801c284 <memmove>
	  return __result + _Num;
 801b23e:	e7d3      	b.n	801b1e8 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0xc6>
				*(callbacks.pointer) = *value;
 801b240:	7832      	ldrb	r2, [r6, #0]
 801b242:	f88b 2000 	strb.w	r2, [fp]
 801b246:	e7cf      	b.n	801b1e8 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0xc6>
					success = callbacks.write(callbacks.context, ID, value, 1);
 801b248:	2301      	movs	r3, #1
 801b24a:	e7d7      	b.n	801b1fc <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0+0xda>

0801b24c <_ZZL8UserTaskPvENUlS_tPatE15_4_FUNES_tS0_t>:
	registers->AddRegister<int8_t>(REG_REMOTE_DIRECTION);
	registers->SetRegisterAsSingle(REG_REMOTE_DIRECTION);
	//[DEL] registers->AddRegisterPointer<uint8_t>(REG_REMOTE_DIRECTION, &reg_remote_direction);
	registers->SetRegisterPermissions(REG_REMOTE_DIRECTION, WRITE_PERMISSION);
	registers->AddWriteCallback<int8_t>(REG_REMOTE_DIRECTION, argument,
		[](void* context , uint16_t register_ID , int8_t* input , uint16_t length) -> bool {
 801b24c:	4613      	mov	r3, r2
		class_instances* class_instances_pointer = (class_instances*)context;
		Registers* registers = class_instances_pointer->registers;
		static float temp;
		//AmphibotMathieu temp = ((((float)(*input))/255.0)*2.0)-1;	//get back the raw stick value
		temp = ((float)(*input))/100.0;	//get raw stick value
 801b24e:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 801b2b8 <_ZZL8UserTaskPvENUlS_tPatE15_4_FUNES_tS0_t+0x6c>
 801b252:	4a1a      	ldr	r2, [pc, #104]	@ (801b2bc <_ZZL8UserTaskPvENUlS_tPatE15_4_FUNES_tS0_t+0x70>)
		registers->WriteRegister<float>(REG_CPG_DIRECTION, &temp);
 801b254:	f240 5111 	movw	r1, #1297	@ 0x511
		[](void* context , uint16_t register_ID , int8_t* input , uint16_t length) -> bool {
 801b258:	b530      	push	{r4, r5, lr}
		temp = ((float)(*input))/100.0;	//get raw stick value
 801b25a:	f993 3000 	ldrsb.w	r3, [r3]
		[](void* context , uint16_t register_ID , int8_t* input , uint16_t length) -> bool {
 801b25e:	b085      	sub	sp, #20
		Registers* registers = class_instances_pointer->registers;
 801b260:	6805      	ldr	r5, [r0, #0]
		registers->WriteRegister<float>(REG_CPG_DIRECTION, &temp);
 801b262:	2401      	movs	r4, #1
		temp = ((float)(*input))/100.0;	//get raw stick value
 801b264:	ee07 3a90 	vmov	s15, r3
		registers->WriteRegister<float>(REG_CPG_DIRECTION, &temp);
 801b268:	2300      	movs	r3, #0
 801b26a:	4628      	mov	r0, r5
		temp = ((float)(*input))/100.0;	//get raw stick value
 801b26c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b270:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b274:	ed82 7a00 	vstr	s14, [r2]
		registers->WriteRegister<float>(REG_CPG_DIRECTION, &temp);
 801b278:	9400      	str	r4, [sp, #0]
 801b27a:	f7ff feb5 	bl	801afe8 <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0>
		//save the timestamp
		uint32_t timestamp = 0;
 801b27e:	2100      	movs	r1, #0
		uint16_t temp_length;
		registers->ReadRegister<uint32_t>(REG_TIMEBASE, &timestamp, &temp_length);
 801b280:	f10d 030a 	add.w	r3, sp, #10
 801b284:	aa03      	add	r2, sp, #12
 801b286:	4628      	mov	r0, r5
 801b288:	9400      	str	r4, [sp, #0]
		uint32_t timestamp = 0;
 801b28a:	9103      	str	r1, [sp, #12]
		registers->ReadRegister<uint32_t>(REG_TIMEBASE, &timestamp, &temp_length);
 801b28c:	f7ff faca 	bl	801a824 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0>
		registers->WriteRegister<uint32_t>(REG_REMOTE_LAST_RX, &timestamp, temp_length);
 801b290:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b294:	aa03      	add	r2, sp, #12
 801b296:	4628      	mov	r0, r5
 801b298:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 801b29c:	9400      	str	r4, [sp, #0]
 801b29e:	f7ff fde3 	bl	801ae68 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0>
		static uint8_t var = 1;
		registers->WriteRegister<uint8_t>(REG_CPG_ENABLED, &var, 1);	//enable CPG
 801b2a2:	4628      	mov	r0, r5
 801b2a4:	4623      	mov	r3, r4
 801b2a6:	4a06      	ldr	r2, [pc, #24]	@ (801b2c0 <_ZZL8UserTaskPvENUlS_tPatE15_4_FUNES_tS0_t+0x74>)
 801b2a8:	f240 5101 	movw	r1, #1281	@ 0x501
 801b2ac:	9400      	str	r4, [sp, #0]
 801b2ae:	f7ff ff38 	bl	801b122 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0>
		return true;
	});
 801b2b2:	4620      	mov	r0, r4
 801b2b4:	b005      	add	sp, #20
 801b2b6:	bd30      	pop	{r4, r5, pc}
 801b2b8:	42c80000 	.word	0x42c80000
 801b2bc:	240071b8 	.word	0x240071b8
 801b2c0:	24000018 	.word	0x24000018
 801b2c4:	00000000 	.word	0x00000000

0801b2c8 <_ZZL8UserTaskPvENUlS_tPhtE14_4_FUNES_tS0_t>:
		[](void* context , uint16_t register_ID , uint8_t* input , uint16_t length) -> bool {
 801b2c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801b2ca:	4613      	mov	r3, r2
		Registers* registers = class_instances_pointer->registers;
 801b2cc:	6805      	ldr	r5, [r0, #0]
		registers->WriteRegister<float>(REG_CPG_FREQUENCY, &temp);
 801b2ce:	2401      	movs	r4, #1
		temp = *input/45.0;	//get stick values
 801b2d0:	4a1b      	ldr	r2, [pc, #108]	@ (801b340 <_ZZL8UserTaskPvENUlS_tPhtE14_4_FUNES_tS0_t+0x78>)
 801b2d2:	781b      	ldrb	r3, [r3, #0]
		registers->WriteRegister<float>(REG_CPG_FREQUENCY, &temp);
 801b2d4:	4628      	mov	r0, r5
		registers->ReadRegister<uint32_t>(REG_TIMEBASE, &timestamp, &temp_length);
 801b2d6:	4e1b      	ldr	r6, [pc, #108]	@ (801b344 <_ZZL8UserTaskPvENUlS_tPhtE14_4_FUNES_tS0_t+0x7c>)
		registers->WriteRegister<float>(REG_CPG_FREQUENCY, &temp);
 801b2d8:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
		temp = *input/45.0;	//get stick values
 801b2dc:	ee06 3a10 	vmov	s12, r3
		registers->WriteRegister<float>(REG_CPG_FREQUENCY, &temp);
 801b2e0:	2300      	movs	r3, #0
		temp = *input/45.0;	//get stick values
 801b2e2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801b2e6:	ed9f 5b14 	vldr	d5, [pc, #80]	@ 801b338 <_ZZL8UserTaskPvENUlS_tPhtE14_4_FUNES_tS0_t+0x70>
 801b2ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801b2ee:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 801b2f2:	ed82 7a00 	vstr	s14, [r2]
		registers->WriteRegister<float>(REG_CPG_FREQUENCY, &temp);
 801b2f6:	9400      	str	r4, [sp, #0]
 801b2f8:	f7ff fe76 	bl	801afe8 <_ZN9Registers13WriteRegisterIfEEbtPT_tb.isra.0>
		registers->ReadRegister<uint32_t>(REG_TIMEBASE, &timestamp, &temp_length);
 801b2fc:	f10d 030e 	add.w	r3, sp, #14
 801b300:	4632      	mov	r2, r6
 801b302:	4628      	mov	r0, r5
 801b304:	2100      	movs	r1, #0
 801b306:	9400      	str	r4, [sp, #0]
 801b308:	f7ff fa8c 	bl	801a824 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0>
		registers->WriteRegister<uint32_t>(REG_REMOTE_LAST_RX, &timestamp, temp_length);
 801b30c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801b310:	4632      	mov	r2, r6
 801b312:	4628      	mov	r0, r5
 801b314:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 801b318:	9400      	str	r4, [sp, #0]
 801b31a:	f7ff fda5 	bl	801ae68 <_ZN9Registers13WriteRegisterImEEbtPT_tb.isra.0>
		registers->WriteRegister<uint8_t>(REG_CPG_ENABLED, &var, 1);	//enable CPG
 801b31e:	4628      	mov	r0, r5
 801b320:	4623      	mov	r3, r4
 801b322:	4a09      	ldr	r2, [pc, #36]	@ (801b348 <_ZZL8UserTaskPvENUlS_tPhtE14_4_FUNES_tS0_t+0x80>)
 801b324:	f240 5101 	movw	r1, #1281	@ 0x501
 801b328:	9400      	str	r4, [sp, #0]
 801b32a:	f7ff fefa 	bl	801b122 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0>
	});
 801b32e:	4620      	mov	r0, r4
 801b330:	b004      	add	sp, #16
 801b332:	bd70      	pop	{r4, r5, r6, pc}
 801b334:	f3af 8000 	nop.w
 801b338:	00000000 	.word	0x00000000
 801b33c:	40468000 	.word	0x40468000
 801b340:	240071c0 	.word	0x240071c0
 801b344:	240071bc 	.word	0x240071bc
 801b348:	24000019 	.word	0x24000019

0801b34c <_ZL8UserTaskPv>:
static void UserTask(void *argument) {
 801b34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	MasterSubscribers* subscribers = class_instances_pointer->subscribers;
 801b350:	e9d0 4900 	ldrd	r4, r9, [r0]
static void UserTask(void *argument) {
 801b354:	b08d      	sub	sp, #52	@ 0x34
	Publishers* publishers = class_instances_pointer->publishers;
 801b356:	6905      	ldr	r5, [r0, #16]
	LEDS* leds = class_instances_pointer->leds;
 801b358:	f8d0 801c 	ldr.w	r8, [r0, #28]
	registers->AddRegister<int8_t>(REG_CPG_SETPOINTS);
 801b35c:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
static void UserTask(void *argument) {
 801b360:	4606      	mov	r6, r0
	registers->AddRegister<int8_t>(REG_CPG_SETPOINTS);
 801b362:	4620      	mov	r0, r4
 801b364:	f7ff fb93 	bl	801aa8e <_ZN9Registers11AddRegisterIaEEbt.isra.0>
	registers->SetRegisterAsArray(REG_CPG_SETPOINTS, MODULE_NUMBER);
 801b368:	2204      	movs	r2, #4
 801b36a:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 801b36e:	4620      	mov	r0, r4
 801b370:	f7fd f828 	bl	80183c4 <_ZN9Registers18SetRegisterAsArrayEtt>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801b374:	f04f 31ff 	mov.w	r1, #4294967295
 801b378:	6820      	ldr	r0, [r4, #0]
 801b37a:	f7f1 fa0b 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801b37e:	aa07      	add	r2, sp, #28
 801b380:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 801b384:	4620      	mov	r0, r4
 801b386:	f7fc ffc8 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801b38a:	f89d 301c 	ldrb.w	r3, [sp, #28]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801b38e:	4607      	mov	r7, r0
	if (!success) {
 801b390:	2b00      	cmp	r3, #0
 801b392:	f040 82af 	bne.w	801b8f4 <_ZL8UserTaskPv+0x5a8>
	osSemaphoreRelease(RegistersSemaphore);
 801b396:	6820      	ldr	r0, [r4, #0]
 801b398:	f7f1 fa30 	bl	800c7fc <osSemaphoreRelease>
	registers->AddRegister<uint8_t>(REG_CPG_ENABLED);
 801b39c:	f240 5101 	movw	r1, #1281	@ 0x501
 801b3a0:	4620      	mov	r0, r4
 801b3a2:	f7ff fb43 	bl	801aa2c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_ENABLED);
 801b3a6:	f240 5101 	movw	r1, #1281	@ 0x501
 801b3aa:	4620      	mov	r0, r4
 801b3ac:	f7fc ffee 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<uint8_t>(REG_CPG_ENABLED, &reg_cpg_enabled);
 801b3b0:	4ae5      	ldr	r2, [pc, #916]	@ (801b748 <_ZL8UserTaskPv+0x3fc>)
 801b3b2:	f240 5101 	movw	r1, #1281	@ 0x501
 801b3b6:	4620      	mov	r0, r4
 801b3b8:	f7ff fc42 	bl	801ac40 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->AddRegister<uint8_t>(REG_CPG_RESET);
 801b3bc:	f240 5102 	movw	r1, #1282	@ 0x502
 801b3c0:	4620      	mov	r0, r4
 801b3c2:	f7ff fb33 	bl	801aa2c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_RESET);
 801b3c6:	f240 5102 	movw	r1, #1282	@ 0x502
 801b3ca:	4620      	mov	r0, r4
 801b3cc:	f7fc ffde 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->SetRegisterPermissions(REG_CPG_RESET, WRITE_PERMISSION);
 801b3d0:	2201      	movs	r2, #1
 801b3d2:	f240 5102 	movw	r1, #1282	@ 0x502
 801b3d6:	4620      	mov	r0, r4
 801b3d8:	f7fd f813 	bl	8018402 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddWriteCallback<uint8_t>(REG_CPG_RESET, argument,
 801b3dc:	4632      	mov	r2, r6
 801b3de:	4bdb      	ldr	r3, [pc, #876]	@ (801b74c <_ZL8UserTaskPv+0x400>)
 801b3e0:	f240 5102 	movw	r1, #1282	@ 0x502
 801b3e4:	4620      	mov	r0, r4
 801b3e6:	f7ff fbe8 	bl	801abba <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	float reg_cpg_frequency = 0;
 801b3ea:	2300      	movs	r3, #0
	registers->AddRegister<float>(REG_CPG_FREQUENCY);
 801b3ec:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 801b3f0:	4620      	mov	r0, r4
	float reg_cpg_frequency = 0;
 801b3f2:	9305      	str	r3, [sp, #20]
	registers->AddRegister<float>(REG_CPG_FREQUENCY);
 801b3f4:	f7ff fae9 	bl	801a9ca <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_FREQUENCY);
 801b3f8:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 801b3fc:	4620      	mov	r0, r4
 801b3fe:	f7fc ffc5 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<float>(REG_CPG_FREQUENCY, &reg_cpg_frequency,
 801b402:	4bd3      	ldr	r3, [pc, #844]	@ (801b750 <_ZL8UserTaskPv+0x404>)
 801b404:	aa05      	add	r2, sp, #20
 801b406:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 801b40a:	4620      	mov	r0, r4
 801b40c:	f7ff fc9c 	bl	801ad48 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddReadCallback<float>(REG_CPG_FREQUENCY, &reg_cpg_frequency,
 801b410:	4bd0      	ldr	r3, [pc, #832]	@ (801b754 <_ZL8UserTaskPv+0x408>)
 801b412:	aa05      	add	r2, sp, #20
 801b414:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 801b418:	4620      	mov	r0, r4
 801b41a:	f7ff fc52 	bl	801acc2 <_ZN9Registers15AddReadCallbackIfEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddRegister<float>(REG_CPG_DIRECTION);
 801b41e:	f240 5111 	movw	r1, #1297	@ 0x511
 801b422:	4620      	mov	r0, r4
 801b424:	f7ff fad1 	bl	801a9ca <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_DIRECTION);
 801b428:	f240 5111 	movw	r1, #1297	@ 0x511
 801b42c:	4620      	mov	r0, r4
 801b42e:	f7fc ffad 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<float>(REG_CPG_DIRECTION, &reg_cpg_direction,
 801b432:	4bc9      	ldr	r3, [pc, #804]	@ (801b758 <_ZL8UserTaskPv+0x40c>)
 801b434:	4ac9      	ldr	r2, [pc, #804]	@ (801b75c <_ZL8UserTaskPv+0x410>)
 801b436:	f240 5111 	movw	r1, #1297	@ 0x511
 801b43a:	4620      	mov	r0, r4
 801b43c:	f7ff fc84 	bl	801ad48 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddReadCallback<float>(REG_CPG_DIRECTION, &reg_cpg_direction,
 801b440:	4bc7      	ldr	r3, [pc, #796]	@ (801b760 <_ZL8UserTaskPv+0x414>)
 801b442:	4ac6      	ldr	r2, [pc, #792]	@ (801b75c <_ZL8UserTaskPv+0x410>)
 801b444:	f240 5111 	movw	r1, #1297	@ 0x511
 801b448:	4620      	mov	r0, r4
 801b44a:	f7ff fc3a 	bl	801acc2 <_ZN9Registers15AddReadCallbackIfEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddRegister<float>(REG_CPG_AMPLC);
 801b44e:	f240 5112 	movw	r1, #1298	@ 0x512
 801b452:	4620      	mov	r0, r4
 801b454:	f7ff fab9 	bl	801a9ca <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_AMPLC);
 801b458:	f240 5112 	movw	r1, #1298	@ 0x512
 801b45c:	4620      	mov	r0, r4
 801b45e:	f7fc ff95 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<float>(REG_CPG_AMPLC, &reg_cpg_amplc,
 801b462:	4bc0      	ldr	r3, [pc, #768]	@ (801b764 <_ZL8UserTaskPv+0x418>)
 801b464:	4ac0      	ldr	r2, [pc, #768]	@ (801b768 <_ZL8UserTaskPv+0x41c>)
 801b466:	f240 5112 	movw	r1, #1298	@ 0x512
 801b46a:	4620      	mov	r0, r4
 801b46c:	f7ff fc6c 	bl	801ad48 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddReadCallback<float>(REG_CPG_AMPLC, &reg_cpg_amplc,
 801b470:	4bbe      	ldr	r3, [pc, #760]	@ (801b76c <_ZL8UserTaskPv+0x420>)
 801b472:	4abd      	ldr	r2, [pc, #756]	@ (801b768 <_ZL8UserTaskPv+0x41c>)
 801b474:	f240 5112 	movw	r1, #1298	@ 0x512
 801b478:	4620      	mov	r0, r4
 801b47a:	f7ff fc22 	bl	801acc2 <_ZN9Registers15AddReadCallbackIfEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddRegister<float>(REG_CPG_AMPLH);
 801b47e:	f240 5113 	movw	r1, #1299	@ 0x513
 801b482:	4620      	mov	r0, r4
 801b484:	f7ff faa1 	bl	801a9ca <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_AMPLH);
 801b488:	f240 5113 	movw	r1, #1299	@ 0x513
 801b48c:	4620      	mov	r0, r4
 801b48e:	f7fc ff7d 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<float>(REG_CPG_AMPLH, &reg_cpg_amplh,
 801b492:	4bb7      	ldr	r3, [pc, #732]	@ (801b770 <_ZL8UserTaskPv+0x424>)
 801b494:	4ab7      	ldr	r2, [pc, #732]	@ (801b774 <_ZL8UserTaskPv+0x428>)
 801b496:	f240 5113 	movw	r1, #1299	@ 0x513
 801b49a:	4620      	mov	r0, r4
 801b49c:	f7ff fc54 	bl	801ad48 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddReadCallback<float>(REG_CPG_AMPLH, &reg_cpg_amplh,
 801b4a0:	4bb5      	ldr	r3, [pc, #724]	@ (801b778 <_ZL8UserTaskPv+0x42c>)
 801b4a2:	4ab4      	ldr	r2, [pc, #720]	@ (801b774 <_ZL8UserTaskPv+0x428>)
 801b4a4:	f240 5113 	movw	r1, #1299	@ 0x513
 801b4a8:	4620      	mov	r0, r4
 801b4aa:	f7ff fc0a 	bl	801acc2 <_ZN9Registers15AddReadCallbackIfEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddRegister<float>(REG_CPG_NWAVE);
 801b4ae:	f240 5114 	movw	r1, #1300	@ 0x514
 801b4b2:	4620      	mov	r0, r4
 801b4b4:	f7ff fa89 	bl	801a9ca <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_NWAVE);
 801b4b8:	f240 5114 	movw	r1, #1300	@ 0x514
 801b4bc:	4620      	mov	r0, r4
 801b4be:	f7fc ff65 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<float>(REG_CPG_NWAVE, &reg_cpg_nwave,
 801b4c2:	4bae      	ldr	r3, [pc, #696]	@ (801b77c <_ZL8UserTaskPv+0x430>)
 801b4c4:	4aae      	ldr	r2, [pc, #696]	@ (801b780 <_ZL8UserTaskPv+0x434>)
 801b4c6:	f240 5114 	movw	r1, #1300	@ 0x514
 801b4ca:	4620      	mov	r0, r4
 801b4cc:	f7ff fc3c 	bl	801ad48 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddReadCallback<float>(REG_CPG_NWAVE, &reg_cpg_nwave,
 801b4d0:	4bac      	ldr	r3, [pc, #688]	@ (801b784 <_ZL8UserTaskPv+0x438>)
 801b4d2:	4aab      	ldr	r2, [pc, #684]	@ (801b780 <_ZL8UserTaskPv+0x434>)
 801b4d4:	f240 5114 	movw	r1, #1300	@ 0x514
 801b4d8:	4620      	mov	r0, r4
 801b4da:	f7ff fbf2 	bl	801acc2 <_ZN9Registers15AddReadCallbackIfEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddRegister<float>(REG_CPG_COUPLING_STRENGTH);
 801b4de:	f240 5115 	movw	r1, #1301	@ 0x515
 801b4e2:	4620      	mov	r0, r4
 801b4e4:	f7ff fa71 	bl	801a9ca <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_COUPLING_STRENGTH);
 801b4e8:	f240 5115 	movw	r1, #1301	@ 0x515
 801b4ec:	4620      	mov	r0, r4
 801b4ee:	f7fc ff4d 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<float>(REG_CPG_COUPLING_STRENGTH, &reg_cpg_coupling_strength,
 801b4f2:	4ba5      	ldr	r3, [pc, #660]	@ (801b788 <_ZL8UserTaskPv+0x43c>)
 801b4f4:	4aa5      	ldr	r2, [pc, #660]	@ (801b78c <_ZL8UserTaskPv+0x440>)
 801b4f6:	f240 5115 	movw	r1, #1301	@ 0x515
 801b4fa:	4620      	mov	r0, r4
 801b4fc:	f7ff fc24 	bl	801ad48 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddReadCallback<float>(REG_CPG_COUPLING_STRENGTH, &reg_cpg_coupling_strength,
 801b500:	4ba3      	ldr	r3, [pc, #652]	@ (801b790 <_ZL8UserTaskPv+0x444>)
 801b502:	4aa2      	ldr	r2, [pc, #648]	@ (801b78c <_ZL8UserTaskPv+0x440>)
 801b504:	f240 5115 	movw	r1, #1301	@ 0x515
 801b508:	4620      	mov	r0, r4
 801b50a:	f7ff fbda 	bl	801acc2 <_ZN9Registers15AddReadCallbackIfEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddRegister<float>(REG_CPG_A_R);
 801b50e:	f240 5116 	movw	r1, #1302	@ 0x516
 801b512:	4620      	mov	r0, r4
 801b514:	f7ff fa59 	bl	801a9ca <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CPG_A_R);
 801b518:	f240 5116 	movw	r1, #1302	@ 0x516
 801b51c:	4620      	mov	r0, r4
 801b51e:	f7fc ff35 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<float>(REG_CPG_A_R, &reg_cpg_a_r,
 801b522:	4b9c      	ldr	r3, [pc, #624]	@ (801b794 <_ZL8UserTaskPv+0x448>)
 801b524:	4a9c      	ldr	r2, [pc, #624]	@ (801b798 <_ZL8UserTaskPv+0x44c>)
 801b526:	f240 5116 	movw	r1, #1302	@ 0x516
 801b52a:	4620      	mov	r0, r4
 801b52c:	f7ff fc0c 	bl	801ad48 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddReadCallback<float>(REG_CPG_A_R, &reg_cpg_a_r,
 801b530:	4b9a      	ldr	r3, [pc, #616]	@ (801b79c <_ZL8UserTaskPv+0x450>)
 801b532:	4a99      	ldr	r2, [pc, #612]	@ (801b798 <_ZL8UserTaskPv+0x44c>)
 801b534:	f240 5116 	movw	r1, #1302	@ 0x516
 801b538:	4620      	mov	r0, r4
 801b53a:	f7ff fbc2 	bl	801acc2 <_ZN9Registers15AddReadCallbackIfEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddRegister<uint8_t>(REG_REMOTE_MODE);
 801b53e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 801b542:	4620      	mov	r0, r4
 801b544:	f7ff fa72 	bl	801aa2c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_REMOTE_MODE);
 801b548:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 801b54c:	4620      	mov	r0, r4
 801b54e:	f7fc ff1d 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<uint8_t>(REG_REMOTE_MODE, &reg_remote_mode);
 801b552:	4a93      	ldr	r2, [pc, #588]	@ (801b7a0 <_ZL8UserTaskPv+0x454>)
 801b554:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 801b558:	4620      	mov	r0, r4
 801b55a:	f7ff fb71 	bl	801ac40 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->AddRegister<uint8_t>(REG_REMOTE_ELT_NB);
 801b55e:	f240 6101 	movw	r1, #1537	@ 0x601
 801b562:	4620      	mov	r0, r4
 801b564:	f7ff fa62 	bl	801aa2c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_REMOTE_ELT_NB);
 801b568:	f240 6101 	movw	r1, #1537	@ 0x601
 801b56c:	4620      	mov	r0, r4
 801b56e:	f7fc ff0d 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<uint8_t>(REG_REMOTE_ELT_NB, &reg_remote_elt_nb);
 801b572:	4a8c      	ldr	r2, [pc, #560]	@ (801b7a4 <_ZL8UserTaskPv+0x458>)
 801b574:	f240 6101 	movw	r1, #1537	@ 0x601
 801b578:	4620      	mov	r0, r4
 801b57a:	f7ff fb61 	bl	801ac40 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->AddRegister<uint8_t>(REG_REMOTE_SPEED);
 801b57e:	f240 6102 	movw	r1, #1538	@ 0x602
 801b582:	4620      	mov	r0, r4
 801b584:	f7ff fa52 	bl	801aa2c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_REMOTE_SPEED);
 801b588:	f240 6102 	movw	r1, #1538	@ 0x602
 801b58c:	4620      	mov	r0, r4
 801b58e:	f7fc fefd 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->SetRegisterPermissions(REG_REMOTE_SPEED, WRITE_PERMISSION);
 801b592:	2201      	movs	r2, #1
 801b594:	f240 6102 	movw	r1, #1538	@ 0x602
 801b598:	4620      	mov	r0, r4
 801b59a:	f7fc ff32 	bl	8018402 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddWriteCallback<uint8_t>(REG_REMOTE_SPEED, argument,
 801b59e:	4b82      	ldr	r3, [pc, #520]	@ (801b7a8 <_ZL8UserTaskPv+0x45c>)
 801b5a0:	4632      	mov	r2, r6
 801b5a2:	f240 6102 	movw	r1, #1538	@ 0x602
 801b5a6:	4620      	mov	r0, r4
 801b5a8:	f7ff fb07 	bl	801abba <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_REMOTE_FREQUENCY);
 801b5ac:	f240 6103 	movw	r1, #1539	@ 0x603
 801b5b0:	4620      	mov	r0, r4
 801b5b2:	f7ff fa3b 	bl	801aa2c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_REMOTE_FREQUENCY);
 801b5b6:	f240 6103 	movw	r1, #1539	@ 0x603
 801b5ba:	4620      	mov	r0, r4
 801b5bc:	f7fc fee6 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<uint8_t>(REG_REMOTE_FREQUENCY, &reg_remote_frequency);
 801b5c0:	f10d 020e 	add.w	r2, sp, #14
 801b5c4:	f240 6103 	movw	r1, #1539	@ 0x603
 801b5c8:	4620      	mov	r0, r4
 801b5ca:	f7ff fb39 	bl	801ac40 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_REMOTE_FREQUENCY, WRITE_PERMISSION);
 801b5ce:	2201      	movs	r2, #1
 801b5d0:	f240 6103 	movw	r1, #1539	@ 0x603
 801b5d4:	4620      	mov	r0, r4
 801b5d6:	f7fc ff14 	bl	8018402 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<int8_t>(REG_REMOTE_DIRECTION);
 801b5da:	f240 6104 	movw	r1, #1540	@ 0x604
 801b5de:	4620      	mov	r0, r4
 801b5e0:	f7ff fa55 	bl	801aa8e <_ZN9Registers11AddRegisterIaEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_REMOTE_DIRECTION);
 801b5e4:	f240 6104 	movw	r1, #1540	@ 0x604
 801b5e8:	4620      	mov	r0, r4
 801b5ea:	f7fc fecf 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->SetRegisterPermissions(REG_REMOTE_DIRECTION, WRITE_PERMISSION);
 801b5ee:	2201      	movs	r2, #1
 801b5f0:	f240 6104 	movw	r1, #1540	@ 0x604
 801b5f4:	4620      	mov	r0, r4
 801b5f6:	f7fc ff04 	bl	8018402 <_ZN9Registers22SetRegisterPermissionsEth>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801b5fa:	f04f 31ff 	mov.w	r1, #4294967295
 801b5fe:	6820      	ldr	r0, [r4, #0]
 801b600:	f7f1 f8c8 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801b604:	aa07      	add	r2, sp, #28
 801b606:	f240 6104 	movw	r1, #1540	@ 0x604
 801b60a:	4620      	mov	r0, r4
 801b60c:	f7fc fe85 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801b610:	f89d 301c 	ldrb.w	r3, [sp, #28]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801b614:	4607      	mov	r7, r0
	if (!success) {
 801b616:	2b00      	cmp	r3, #0
 801b618:	f040 819a 	bne.w	801b950 <_ZL8UserTaskPv+0x604>
	osSemaphoreRelease(RegistersSemaphore);
 801b61c:	6820      	ldr	r0, [r4, #0]
 801b61e:	f7f1 f8ed 	bl	800c7fc <osSemaphoreRelease>

	//stores the last time (from the timebase register) a direction or speed was received from the remote
	//used to turn the CPG on and off with the remote
	static uint32_t reg_remote_last_rx = 0;
	registers->AddRegister<uint32_t>(REG_REMOTE_LAST_RX);
 801b622:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 801b626:	4620      	mov	r0, r4
	publishers->ActivateTopic(PUB_REMOTE_MODE, REG_TIMEBASE);
	publishers->ActivatePublisher(PUB_REMOTE_MODE);


	// === Subscribers Setup === //
	static SubGeneral sub_general(registers, leds);
 801b628:	4f60      	ldr	r7, [pc, #384]	@ (801b7ac <_ZL8UserTaskPv+0x460>)
	registers->AddRegister<uint32_t>(REG_REMOTE_LAST_RX);
 801b62a:	f7ff f99d 	bl	801a968 <_ZN9Registers11AddRegisterImEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_REMOTE_LAST_RX);
 801b62e:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 801b632:	4620      	mov	r0, r4
 801b634:	f7fc feaa 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<uint32_t>(REG_REMOTE_LAST_RX, &reg_remote_last_rx);
 801b638:	4a5d      	ldr	r2, [pc, #372]	@ (801b7b0 <_ZL8UserTaskPv+0x464>)
 801b63a:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 801b63e:	4620      	mov	r0, r4
 801b640:	f7ff fbc5 	bl	801adce <_ZN9Registers18AddRegisterPointerImEEbtPT_.isra.0>
	registers->AddRegister<uint8_t>(REG_ALERT_WATER);
 801b644:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 801b648:	4620      	mov	r0, r4
 801b64a:	f7ff f9ef 	bl	801aa2c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_ALERT_WATER);
 801b64e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 801b652:	4620      	mov	r0, r4
 801b654:	f7fc fe9a 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<uint8_t>(REG_ALERT_WATER, &reg_alert_water);
 801b658:	4a56      	ldr	r2, [pc, #344]	@ (801b7b4 <_ZL8UserTaskPv+0x468>)
 801b65a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 801b65e:	4620      	mov	r0, r4
 801b660:	f7ff faee 	bl	801ac40 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->AddRegister<uint32_t>(REG_ALERT_WATER_RADIO);
 801b664:	f240 7101 	movw	r1, #1793	@ 0x701
 801b668:	4620      	mov	r0, r4
 801b66a:	f7ff f97d 	bl	801a968 <_ZN9Registers11AddRegisterImEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_ALERT_WATER_RADIO);
 801b66e:	f240 7101 	movw	r1, #1793	@ 0x701
 801b672:	4620      	mov	r0, r4
 801b674:	f7fc fe8a 	bl	801838c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterPointer<uint32_t>(REG_ALERT_WATER_RADIO, &reg_alert_radio);
 801b678:	4a4f      	ldr	r2, [pc, #316]	@ (801b7b8 <_ZL8UserTaskPv+0x46c>)
 801b67a:	f240 7101 	movw	r1, #1793	@ 0x701
 801b67e:	4620      	mov	r0, r4
 801b680:	f7ff fba5 	bl	801adce <_ZN9Registers18AddRegisterPointerImEEbtPT_.isra.0>
	publishers->AddPublisher(PUB_CPG_SETPOINTS);
 801b684:	2100      	movs	r1, #0
 801b686:	4628      	mov	r0, r5
 801b688:	f7fb ff6c 	bl	8017564 <_ZN10Publishers12AddPublisherEh>
	publishers->SetPublisherPrescaler(PUB_CPG_SETPOINTS, 1); //publish at ~100Hz
 801b68c:	2201      	movs	r2, #1
 801b68e:	2100      	movs	r1, #0
 801b690:	4628      	mov	r0, r5
 801b692:	f7fb f9a4 	bl	80169de <_ZN10Publishers21SetPublisherPrescalerEht>
	publishers->LinkToInterface(PUB_CPG_SETPOINTS, CANFD1);
 801b696:	2200      	movs	r2, #0
 801b698:	4628      	mov	r0, r5
 801b69a:	4611      	mov	r1, r2
 801b69c:	f7fb fc56 	bl	8016f4c <_ZN10Publishers15LinkToInterfaceEhh>
	publishers->SetPublishAddress(PUB_CPG_SETPOINTS, CANFD1, ALL);
 801b6a0:	2200      	movs	r2, #0
 801b6a2:	23ff      	movs	r3, #255	@ 0xff
 801b6a4:	4628      	mov	r0, r5
 801b6a6:	4611      	mov	r1, r2
 801b6a8:	f7fb fa76 	bl	8016b98 <_ZN10Publishers17SetPublishAddressEhhh>
	publishers->AddTopic(PUB_CPG_SETPOINTS, REG_CPG_SETPOINTS);
 801b6ac:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 801b6b0:	2100      	movs	r1, #0
 801b6b2:	4628      	mov	r0, r5
 801b6b4:	f7fb fbc2 	bl	8016e3c <_ZN10Publishers8AddTopicEht>
	publishers->ActivateTopic(PUB_CPG_SETPOINTS, REG_CPG_SETPOINTS);
 801b6b8:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 801b6bc:	2100      	movs	r1, #0
 801b6be:	4628      	mov	r0, r5
 801b6c0:	f7fb fa30 	bl	8016b24 <_ZN10Publishers13ActivateTopicEht>
	publishers->AddTopic(PUB_CPG_SETPOINTS, REG_TIMEBASE);
 801b6c4:	2200      	movs	r2, #0
 801b6c6:	4628      	mov	r0, r5
 801b6c8:	4611      	mov	r1, r2
 801b6ca:	f7fb fbb7 	bl	8016e3c <_ZN10Publishers8AddTopicEht>
	publishers->ActivateTopic(PUB_CPG_SETPOINTS, REG_TIMEBASE);
 801b6ce:	2200      	movs	r2, #0
 801b6d0:	4628      	mov	r0, r5
 801b6d2:	4611      	mov	r1, r2
 801b6d4:	f7fb fa26 	bl	8016b24 <_ZN10Publishers13ActivateTopicEht>
	publishers->ActivatePublisher(PUB_CPG_SETPOINTS);
 801b6d8:	2100      	movs	r1, #0
 801b6da:	4628      	mov	r0, r5
 801b6dc:	f7fb f96d 	bl	80169ba <_ZN10Publishers17ActivatePublisherEh>
	publishers->AddPublisher(PUB_REMOTE_MODE);
 801b6e0:	2101      	movs	r1, #1
 801b6e2:	4628      	mov	r0, r5
 801b6e4:	f7fb ff3e 	bl	8017564 <_ZN10Publishers12AddPublisherEh>
	publishers->SetPublisherPrescaler(PUB_REMOTE_MODE, 10); //publish at ~10Hz
 801b6e8:	220a      	movs	r2, #10
 801b6ea:	2101      	movs	r1, #1
 801b6ec:	4628      	mov	r0, r5
 801b6ee:	f7fb f976 	bl	80169de <_ZN10Publishers21SetPublisherPrescalerEht>
	publishers->LinkToInterface(PUB_REMOTE_MODE, CANFD1);
 801b6f2:	2200      	movs	r2, #0
 801b6f4:	2101      	movs	r1, #1
 801b6f6:	4628      	mov	r0, r5
 801b6f8:	f7fb fc28 	bl	8016f4c <_ZN10Publishers15LinkToInterfaceEhh>
	publishers->SetPublishAddress(PUB_REMOTE_MODE, CANFD1, ALL);
 801b6fc:	23ff      	movs	r3, #255	@ 0xff
 801b6fe:	2200      	movs	r2, #0
 801b700:	2101      	movs	r1, #1
 801b702:	4628      	mov	r0, r5
 801b704:	f7fb fa48 	bl	8016b98 <_ZN10Publishers17SetPublishAddressEhhh>
	publishers->AddTopic(PUB_REMOTE_MODE, REG_REMOTE_MODE);
 801b708:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 801b70c:	2101      	movs	r1, #1
 801b70e:	4628      	mov	r0, r5
 801b710:	f7fb fb94 	bl	8016e3c <_ZN10Publishers8AddTopicEht>
	publishers->ActivateTopic(PUB_REMOTE_MODE, REG_REMOTE_MODE);
 801b714:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 801b718:	2101      	movs	r1, #1
 801b71a:	4628      	mov	r0, r5
 801b71c:	f7fb fa02 	bl	8016b24 <_ZN10Publishers13ActivateTopicEht>
	publishers->AddTopic(PUB_REMOTE_MODE, REG_TIMEBASE);
 801b720:	2200      	movs	r2, #0
 801b722:	2101      	movs	r1, #1
 801b724:	4628      	mov	r0, r5
 801b726:	f7fb fb89 	bl	8016e3c <_ZN10Publishers8AddTopicEht>
	publishers->ActivateTopic(PUB_REMOTE_MODE, REG_TIMEBASE);
 801b72a:	2200      	movs	r2, #0
 801b72c:	2101      	movs	r1, #1
 801b72e:	4628      	mov	r0, r5
 801b730:	f7fb f9f8 	bl	8016b24 <_ZN10Publishers13ActivateTopicEht>
	publishers->ActivatePublisher(PUB_REMOTE_MODE);
 801b734:	2101      	movs	r1, #1
 801b736:	4628      	mov	r0, r5
 801b738:	f7fb f93f 	bl	80169ba <_ZN10Publishers17ActivatePublisherEh>
	static SubGeneral sub_general(registers, leds);
 801b73c:	683b      	ldr	r3, [r7, #0]
 801b73e:	f3bf 8f5b 	dmb	ish
 801b742:	07db      	lsls	r3, r3, #31
 801b744:	d44a      	bmi.n	801b7dc <_ZL8UserTaskPv+0x490>
 801b746:	e039      	b.n	801b7bc <_ZL8UserTaskPv+0x470>
 801b748:	240071d4 	.word	0x240071d4
 801b74c:	0801a341 	.word	0x0801a341
 801b750:	0801a351 	.word	0x0801a351
 801b754:	0801a339 	.word	0x0801a339
 801b758:	0801a369 	.word	0x0801a369
 801b75c:	240071d0 	.word	0x240071d0
 801b760:	0801a717 	.word	0x0801a717
 801b764:	0801a381 	.word	0x0801a381
 801b768:	240071cc 	.word	0x240071cc
 801b76c:	0801a71d 	.word	0x0801a71d
 801b770:	0801a399 	.word	0x0801a399
 801b774:	240071c8 	.word	0x240071c8
 801b778:	0801a723 	.word	0x0801a723
 801b77c:	0801a3b1 	.word	0x0801a3b1
 801b780:	24000024 	.word	0x24000024
 801b784:	0801a729 	.word	0x0801a729
 801b788:	0801a3c9 	.word	0x0801a3c9
 801b78c:	24000020 	.word	0x24000020
 801b790:	0801a3f9 	.word	0x0801a3f9
 801b794:	0801a3e1 	.word	0x0801a3e1
 801b798:	2400001c 	.word	0x2400001c
 801b79c:	0801a711 	.word	0x0801a711
 801b7a0:	240071c4 	.word	0x240071c4
 801b7a4:	2400001a 	.word	0x2400001a
 801b7a8:	0801b2c9 	.word	0x0801b2c9
 801b7ac:	240071a0 	.word	0x240071a0
 801b7b0:	240071b4 	.word	0x240071b4
 801b7b4:	240071b0 	.word	0x240071b0
 801b7b8:	24000014 	.word	0x24000014
 801b7bc:	4638      	mov	r0, r7
 801b7be:	f000 fa1b 	bl	801bbf8 <__cxa_guard_acquire>
 801b7c2:	b158      	cbz	r0, 801b7dc <_ZL8UserTaskPv+0x490>
	SubGeneral(Registers* registers_, LEDS* leds_) {
 801b7c4:	4eb7      	ldr	r6, [pc, #732]	@ (801baa4 <_ZL8UserTaskPv+0x758>)
 801b7c6:	4630      	mov	r0, r6
 801b7c8:	f7fd fdbe 	bl	8019348 <_ZN10SubscriberC1Ev>
 801b7cc:	4bb6      	ldr	r3, [pc, #728]	@ (801baa8 <_ZL8UserTaskPv+0x75c>)
	static SubGeneral sub_general(registers, leds);
 801b7ce:	4638      	mov	r0, r7
		leds = leds_;
 801b7d0:	f8c6 8008 	str.w	r8, [r6, #8]
		registers = registers_;
 801b7d4:	e9c6 3400 	strd	r3, r4, [r6]
	static SubGeneral sub_general(registers, leds);
 801b7d8:	f000 fa1a 	bl	801bc10 <__cxa_guard_release>
	subscribers->AddSubscriber(SUB_GENERAL, &sub_general);
 801b7dc:	4ab1      	ldr	r2, [pc, #708]	@ (801baa4 <_ZL8UserTaskPv+0x758>)
 801b7de:	2100      	movs	r1, #0
 801b7e0:	4648      	mov	r0, r9
 801b7e2:	f7fe fb55 	bl	8019e90 <_ZN17MasterSubscribers13AddSubscriberEhP10Subscriber>
	subscribers->SubscribeToRemoteRegister(SUB_GENERAL, REG_ALERT_WATER, SubscriberInterface{.interface=CANFD1 , .address=ALL});
 801b7e6:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 801b7ea:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 801b7ee:	2100      	movs	r1, #0
 801b7f0:	f8ad 3010 	strh.w	r3, [sp, #16]
 801b7f4:	4648      	mov	r0, r9
 801b7f6:	9b04      	ldr	r3, [sp, #16]
 801b7f8:	f7fe f983 	bl	8019b02 <_ZN17MasterSubscribers25SubscribeToRemoteRegisterEht19SubscriberInterface>
	//[DEL] subscribers->SubscribeToRemoteRegister(SUB_ALERT, REG_ALERT_WATER, SubscriberInterface{.interface=CANFD1 , .address=ALL});
	subscribers->ActivateSubscriber(SUB_GENERAL);
 801b7fc:	2100      	movs	r1, #0
 801b7fe:	4648      	mov	r0, r9
 801b800:	f7fd fe69 	bl	80194d6 <_ZN17MasterSubscribers18ActivateSubscriberEh>

	// === CPG Setup === //
	cpg.init(MODULE_NUMBER, reg_cpg_frequency, reg_cpg_direction, reg_cpg_amplc, reg_cpg_amplc, reg_cpg_nwave, reg_cpg_coupling_strength, reg_cpg_a_r);
 801b804:	4ba9      	ldr	r3, [pc, #676]	@ (801baac <_ZL8UserTaskPv+0x760>)
 801b806:	ed9d 0a05 	vldr	s0, [sp, #20]
 801b80a:	2104      	movs	r1, #4
 801b80c:	edd3 1a00 	vldr	s3, [r3]
 801b810:	4ba7      	ldr	r3, [pc, #668]	@ (801bab0 <_ZL8UserTaskPv+0x764>)
 801b812:	eeb0 1a61 	vmov.f32	s2, s3
 801b816:	48a7      	ldr	r0, [pc, #668]	@ (801bab4 <_ZL8UserTaskPv+0x768>)
 801b818:	ed93 3a00 	vldr	s6, [r3]
 801b81c:	4ba6      	ldr	r3, [pc, #664]	@ (801bab8 <_ZL8UserTaskPv+0x76c>)
 801b81e:	edd3 2a00 	vldr	s5, [r3]
 801b822:	4ba6      	ldr	r3, [pc, #664]	@ (801babc <_ZL8UserTaskPv+0x770>)
 801b824:	ed93 2a00 	vldr	s4, [r3]
 801b828:	4ba5      	ldr	r3, [pc, #660]	@ (801bac0 <_ZL8UserTaskPv+0x774>)
 801b82a:	edd3 0a00 	vldr	s1, [r3]
 801b82e:	f7fe fd5f 	bl	801a2f0 <_ZN3CPG4initEhfffffff>
	int8_t setpoints[MODULE_NUMBER];

	for(;;) {
		//robot is started from the remote
		if(reg_remote_mode == 1) {
 801b832:	4ba4      	ldr	r3, [pc, #656]	@ (801bac4 <_ZL8UserTaskPv+0x778>)
			leds->SetLED(LED_USER1, GPIO_PIN_SET);
		}
		else {
			leds->SetLED(LED_USER1, GPIO_PIN_RESET);
 801b834:	210a      	movs	r1, #10
 801b836:	4640      	mov	r0, r8
		if(reg_remote_mode == 1) {
 801b838:	781a      	ldrb	r2, [r3, #0]
 801b83a:	2a01      	cmp	r2, #1
			leds->SetLED(LED_USER1, GPIO_PIN_RESET);
 801b83c:	bf18      	it	ne
 801b83e:	2200      	movne	r2, #0
 801b840:	f7f8 fa86 	bl	8013d50 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
		}

		//compute CPG steps if enabled
		if(reg_cpg_enabled == 1) {
 801b844:	4ba0      	ldr	r3, [pc, #640]	@ (801bac8 <_ZL8UserTaskPv+0x77c>)
 801b846:	781a      	ldrb	r2, [r3, #0]
 801b848:	2a01      	cmp	r2, #1
 801b84a:	f040 8125 	bne.w	801ba98 <_ZL8UserTaskPv+0x74c>
			leds->SetLED(LED_USER2, GPIO_PIN_SET);
 801b84e:	270a      	movs	r7, #10
			//compute 10 steps with 1ms stepsize
			for(uint32_t j=0;j<10;j++) {
				cpg.step(setpoints, 1);
 801b850:	4e98      	ldr	r6, [pc, #608]	@ (801bab4 <_ZL8UserTaskPv+0x768>)
			leds->SetLED(LED_USER2, GPIO_PIN_SET);
 801b852:	210b      	movs	r1, #11
 801b854:	4640      	mov	r0, r8
 801b856:	f7f8 fa7b 	bl	8013d50 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
				cpg.step(setpoints, 1);
 801b85a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801b85e:	a906      	add	r1, sp, #24
 801b860:	4630      	mov	r0, r6
 801b862:	f7fe fb61 	bl	8019f28 <_ZN3CPG4stepEPaf>
			for(uint32_t j=0;j<10;j++) {
 801b866:	3f01      	subs	r7, #1
 801b868:	d1f7      	bne.n	801b85a <_ZL8UserTaskPv+0x50e>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801b86a:	f04f 31ff 	mov.w	r1, #4294967295
 801b86e:	6820      	ldr	r0, [r4, #0]
 801b870:	f7f0 ff90 	bl	800c794 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801b874:	aa08      	add	r2, sp, #32
 801b876:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 801b87a:	4620      	mov	r0, r4
 801b87c:	f7fc fd4d 	bl	801831a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801b880:	f89d 3020 	ldrb.w	r3, [sp, #32]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801b884:	4606      	mov	r6, r0
	if (!success) {
 801b886:	2b00      	cmp	r3, #0
 801b888:	f040 808f 	bne.w	801b9aa <_ZL8UserTaskPv+0x65e>
			}
			registers->WriteRegister<int8_t>(REG_CPG_SETPOINTS, setpoints, MODULE_NUMBER);
			uint32_t remote_last_rx;
			uint32_t time_now;
			uint16_t length;
			registers->ReadRegister(REG_REMOTE_LAST_RX, &remote_last_rx, &length);
 801b88c:	2601      	movs	r6, #1
	osSemaphoreRelease(RegistersSemaphore);
 801b88e:	6820      	ldr	r0, [r4, #0]
 801b890:	f7f0 ffb4 	bl	800c7fc <osSemaphoreRelease>
 801b894:	f10d 0312 	add.w	r3, sp, #18
 801b898:	aa07      	add	r2, sp, #28
 801b89a:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 801b89e:	4620      	mov	r0, r4
 801b8a0:	9600      	str	r6, [sp, #0]
 801b8a2:	f7fe ffbf 	bl	801a824 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0>
			registers->ReadRegister(REG_TIMEBASE, &time_now, &length);
 801b8a6:	f10d 0312 	add.w	r3, sp, #18
 801b8aa:	aa08      	add	r2, sp, #32
 801b8ac:	2100      	movs	r1, #0
 801b8ae:	4620      	mov	r0, r4
 801b8b0:	9600      	str	r6, [sp, #0]
 801b8b2:	f7fe ffb7 	bl	801a824 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb.isra.0>
			if(time_now-remote_last_rx > 1000) {	//200ms timeout
 801b8b6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b8ba:	1a9b      	subs	r3, r3, r2
 801b8bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801b8c0:	d90c      	bls.n	801b8dc <_ZL8UserTaskPv+0x590>
				uint8_t temp = 0;
 801b8c2:	f04f 0300 	mov.w	r3, #0
				registers->WriteRegister<uint8_t>(REG_CPG_ENABLED, &temp, 1);	//disable CPG
 801b8c6:	f10d 020f 	add.w	r2, sp, #15
 801b8ca:	f240 5101 	movw	r1, #1281	@ 0x501
 801b8ce:	4620      	mov	r0, r4
				uint8_t temp = 0;
 801b8d0:	f88d 300f 	strb.w	r3, [sp, #15]
				registers->WriteRegister<uint8_t>(REG_CPG_ENABLED, &temp, 1);	//disable CPG
 801b8d4:	4633      	mov	r3, r6
 801b8d6:	9600      	str	r6, [sp, #0]
 801b8d8:	f7ff fc23 	bl	801b122 <_ZN9Registers13WriteRegisterIhEEbtPT_tb.isra.0>
		else {
			leds->SetLED(LED_USER2, GPIO_PIN_RESET);
		}

		//publish the setpoints and remote mode registers
		publishers->SpinPublisher(PUB_CPG_SETPOINTS);
 801b8dc:	4628      	mov	r0, r5
 801b8de:	2100      	movs	r1, #0
 801b8e0:	f7fc f850 	bl	8017984 <_ZN10Publishers13SpinPublisherEh>
		publishers->SpinPublisher(PUB_REMOTE_MODE);
 801b8e4:	4628      	mov	r0, r5
 801b8e6:	2101      	movs	r1, #1
 801b8e8:	f7fc f84c 	bl	8017984 <_ZN10Publishers13SpinPublisherEh>
		osDelay(10);
 801b8ec:	200a      	movs	r0, #10
 801b8ee:	f7f0 fee7 	bl	800c6c0 <osDelay>
		//leds->SetLED(LED_USER2, GPIO_PIN_SET);
		//osDelay(200);
		//leds->SetLED(LED_USER2, GPIO_PIN_RESET);
		//osDelay(200);
	}
 801b8f2:	e79e      	b.n	801b832 <_ZL8UserTaskPv+0x4e6>
	uint8_t registered_type = GetTypeID<T>(&success);
 801b8f4:	a807      	add	r0, sp, #28
 801b8f6:	f7fe fe47 	bl	801a588 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	if (!success) {
 801b8fa:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	f43f ad49 	beq.w	801b396 <_ZL8UserTaskPv+0x4a>
	if (target_register->register_info.type != registered_type) {
 801b904:	793b      	ldrb	r3, [r7, #4]
 801b906:	4298      	cmp	r0, r3
 801b908:	f47f ad45 	bne.w	801b396 <_ZL8UserTaskPv+0x4a>
	if (callbacks[target_register->register_info.type] == NULL) {
 801b90c:	3004      	adds	r0, #4
 801b90e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801b912:	2800      	cmp	r0, #0
 801b914:	f43f ad3f 	beq.w	801b396 <_ZL8UserTaskPv+0x4a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801b918:	783b      	ldrb	r3, [r7, #0]
 801b91a:	f8df a1b0 	ldr.w	sl, [pc, #432]	@ 801bacc <_ZL8UserTaskPv+0x780>
 801b91e:	b98b      	cbnz	r3, 801b944 <_ZL8UserTaskPv+0x5f8>
 801b920:	787b      	ldrb	r3, [r7, #1]
 801b922:	b97b      	cbnz	r3, 801b944 <_ZL8UserTaskPv+0x5f8>
		callback.pointer = pointer;
 801b924:	f8cd a020 	str.w	sl, [sp, #32]
		target_callback_list->push_back(callback);
 801b928:	a908      	add	r1, sp, #32
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b92a:	e9d0 2300 	ldrd	r2, r3, [r0]
 801b92e:	1a9b      	subs	r3, r3, r2
 801b930:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801b932:	817b      	strh	r3, [r7, #10]
		target_callback_list->push_back(callback);
 801b934:	f7ff f930 	bl	801ab98 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 801b938:	2301      	movs	r3, #1
 801b93a:	703b      	strb	r3, [r7, #0]
	target_register->access.write = true;
 801b93c:	f240 1301 	movw	r3, #257	@ 0x101
 801b940:	813b      	strh	r3, [r7, #8]
 801b942:	e528      	b.n	801b396 <_ZL8UserTaskPv+0x4a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801b944:	8979      	ldrh	r1, [r7, #10]
 801b946:	f7f4 f835 	bl	800f9b4 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>
		callback->pointer = pointer;
 801b94a:	f8c0 a000 	str.w	sl, [r0]
 801b94e:	e7f3      	b.n	801b938 <_ZL8UserTaskPv+0x5ec>
	uint8_t registered_type = GetTypeID<T>(&success);
 801b950:	a807      	add	r0, sp, #28
 801b952:	f7fe fe19 	bl	801a588 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	if (!success) {
 801b956:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	f43f ae5e 	beq.w	801b61c <_ZL8UserTaskPv+0x2d0>
	if (target_register->register_info.type != registered_type) {
 801b960:	793b      	ldrb	r3, [r7, #4]
 801b962:	4298      	cmp	r0, r3
 801b964:	f47f ae5a 	bne.w	801b61c <_ZL8UserTaskPv+0x2d0>
	if (callbacks[target_register->register_info.type] == NULL) {
 801b968:	3004      	adds	r0, #4
 801b96a:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801b96e:	2800      	cmp	r0, #0
 801b970:	f43f ae54 	beq.w	801b61c <_ZL8UserTaskPv+0x2d0>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801b974:	783b      	ldrb	r3, [r7, #0]
 801b976:	f8df a158 	ldr.w	sl, [pc, #344]	@ 801bad0 <_ZL8UserTaskPv+0x784>
 801b97a:	b983      	cbnz	r3, 801b99e <_ZL8UserTaskPv+0x652>
 801b97c:	787b      	ldrb	r3, [r7, #1]
 801b97e:	b973      	cbnz	r3, 801b99e <_ZL8UserTaskPv+0x652>
		callback.read = NULL;
 801b980:	930b      	str	r3, [sp, #44]	@ 0x2c
		target_callback_list->push_back(callback);
 801b982:	a908      	add	r1, sp, #32
 801b984:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 801b988:	e9cd 6a09 	strd	r6, sl, [sp, #36]	@ 0x24
 801b98c:	1a9b      	subs	r3, r3, r2
 801b98e:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801b990:	817b      	strh	r3, [r7, #10]
		target_callback_list->push_back(callback);
 801b992:	f7ff f901 	bl	801ab98 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 801b996:	2301      	movs	r3, #1
 801b998:	707b      	strb	r3, [r7, #1]
	target_register->access.write = true;
 801b99a:	723b      	strb	r3, [r7, #8]
 801b99c:	e63e      	b.n	801b61c <_ZL8UserTaskPv+0x2d0>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801b99e:	8979      	ldrh	r1, [r7, #10]
 801b9a0:	f7f4 f808 	bl	800f9b4 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>
		callback->write = write;
 801b9a4:	e9c0 6a01 	strd	r6, sl, [r0, #4]
 801b9a8:	e7f5      	b.n	801b996 <_ZL8UserTaskPv+0x64a>
	uint8_t registered_type = GetTypeID<T>(&success);
 801b9aa:	a808      	add	r0, sp, #32
 801b9ac:	f7fe fdec 	bl	801a588 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	if (!success) {
 801b9b0:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	f43f af69 	beq.w	801b88c <_ZL8UserTaskPv+0x540>
	if (target_register->register_info.type != registered_type) {
 801b9ba:	7933      	ldrb	r3, [r6, #4]
 801b9bc:	4298      	cmp	r0, r3
 801b9be:	f47f af65 	bne.w	801b88c <_ZL8UserTaskPv+0x540>
	if (callbacks[target_register->register_info.type] == NULL) {
 801b9c2:	3004      	adds	r0, #4
 801b9c4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801b9c8:	2800      	cmp	r0, #0
 801b9ca:	f43f af5f 	beq.w	801b88c <_ZL8UserTaskPv+0x540>
	if (target_register->access.write) {
 801b9ce:	7a33      	ldrb	r3, [r6, #8]
 801b9d0:	2b00      	cmp	r3, #0
 801b9d2:	f43f af5b 	beq.w	801b88c <_ZL8UserTaskPv+0x540>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801b9d6:	8971      	ldrh	r1, [r6, #10]
		success = false;
 801b9d8:	f88d 7020 	strb.w	r7, [sp, #32]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801b9dc:	f7f3 ffea 	bl	800f9b4 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801b9e0:	68f2      	ldr	r2, [r6, #12]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801b9e2:	f8d0 9008 	ldr.w	r9, [r0, #8]
 801b9e6:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801b9ea:	b122      	cbz	r2, 801b9f6 <_ZL8UserTaskPv+0x6aa>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 801b9ec:	f04f 31ff 	mov.w	r1, #4294967295
 801b9f0:	6810      	ldr	r0, [r2, #0]
 801b9f2:	f7f0 fecf 	bl	800c794 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 801b9f6:	7832      	ldrb	r2, [r6, #0]
 801b9f8:	b30a      	cbz	r2, 801ba3e <_ZL8UserTaskPv+0x6f2>
			success = true;
 801b9fa:	2201      	movs	r2, #1
 801b9fc:	f88d 2020 	strb.w	r2, [sp, #32]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801ba00:	7972      	ldrb	r2, [r6, #5]
 801ba02:	2a00      	cmp	r2, #0
 801ba04:	d041      	beq.n	801ba8a <_ZL8UserTaskPv+0x73e>
 801ba06:	88f2      	ldrh	r2, [r6, #6]
 801ba08:	2a00      	cmp	r2, #0
 801ba0a:	d139      	bne.n	801ba80 <_ZL8UserTaskPv+0x734>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801ba0c:	e9db 2100 	ldrd	r2, r1, [fp]
 801ba10:	428a      	cmp	r2, r1
	    this->_M_impl._M_finish = __pos;
 801ba12:	bf18      	it	ne
 801ba14:	f8cb 2004 	strne.w	r2, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ba18:	f8db 0004 	ldr.w	r0, [fp, #4]
 801ba1c:	1a81      	subs	r1, r0, r2
	if (__new_size > size())
 801ba1e:	2903      	cmp	r1, #3
 801ba20:	d826      	bhi.n	801ba70 <_ZL8UserTaskPv+0x724>
	  _M_default_append(__new_size - size());
 801ba22:	f1c1 0104 	rsb	r1, r1, #4
 801ba26:	4658      	mov	r0, fp
 801ba28:	f7f6 ff1c 	bl	8012864 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj>
				for (uint16_t index = 0; index < length; index++) {
 801ba2c:	aa06      	add	r2, sp, #24
					(*register_vector)[index] = value[index];
 801ba2e:	f912 0b01 	ldrsb.w	r0, [r2], #1
 801ba32:	f8db 1000 	ldr.w	r1, [fp]
 801ba36:	55c8      	strb	r0, [r1, r7]
				for (uint16_t index = 0; index < length; index++) {
 801ba38:	3701      	adds	r7, #1
 801ba3a:	2f04      	cmp	r7, #4
 801ba3c:	d1f7      	bne.n	801ba2e <_ZL8UserTaskPv+0x6e2>
		if (target_register->mode.callbacks) {
 801ba3e:	7873      	ldrb	r3, [r6, #1]
 801ba40:	b173      	cbz	r3, 801ba60 <_ZL8UserTaskPv+0x714>
			if (callbacks.write != NULL) {
 801ba42:	f1b9 0f00 	cmp.w	r9, #0
 801ba46:	d00b      	beq.n	801ba60 <_ZL8UserTaskPv+0x714>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801ba48:	7973      	ldrb	r3, [r6, #5]
 801ba4a:	b31b      	cbz	r3, 801ba94 <_ZL8UserTaskPv+0x748>
 801ba4c:	88f3      	ldrh	r3, [r6, #6]
 801ba4e:	b903      	cbnz	r3, 801ba52 <_ZL8UserTaskPv+0x706>
					success = callbacks.write(callbacks.context, ID, value, length);
 801ba50:	2304      	movs	r3, #4
					success = callbacks.write(callbacks.context, ID, value, 1);
 801ba52:	aa06      	add	r2, sp, #24
 801ba54:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 801ba58:	4650      	mov	r0, sl
 801ba5a:	47c8      	blx	r9
 801ba5c:	f88d 0020 	strb.w	r0, [sp, #32]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801ba60:	68f3      	ldr	r3, [r6, #12]
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	f43f af12 	beq.w	801b88c <_ZL8UserTaskPv+0x540>
			osSemaphoreRelease(*(target_register->register_semaphore));
 801ba68:	6818      	ldr	r0, [r3, #0]
 801ba6a:	f7f0 fec7 	bl	800c7fc <osSemaphoreRelease>
 801ba6e:	e70d      	b.n	801b88c <_ZL8UserTaskPv+0x540>
	else if (__new_size < size())
 801ba70:	2904      	cmp	r1, #4
 801ba72:	d0db      	beq.n	801ba2c <_ZL8UserTaskPv+0x6e0>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 801ba74:	3204      	adds	r2, #4
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801ba76:	4290      	cmp	r0, r2
	    this->_M_impl._M_finish = __pos;
 801ba78:	bf18      	it	ne
 801ba7a:	f8cb 2004 	strne.w	r2, [fp, #4]
				for (uint16_t index = 0; index < length; index++) {
 801ba7e:	e7d5      	b.n	801ba2c <_ZL8UserTaskPv+0x6e0>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801ba80:	a906      	add	r1, sp, #24
 801ba82:	4658      	mov	r0, fp
 801ba84:	f000 fbfe 	bl	801c284 <memmove>
	  return __result + _Num;
 801ba88:	e7d9      	b.n	801ba3e <_ZL8UserTaskPv+0x6f2>
				*(callbacks.pointer) = *value;
 801ba8a:	f99d 2018 	ldrsb.w	r2, [sp, #24]
 801ba8e:	f88b 2000 	strb.w	r2, [fp]
 801ba92:	e7d4      	b.n	801ba3e <_ZL8UserTaskPv+0x6f2>
					success = callbacks.write(callbacks.context, ID, value, 1);
 801ba94:	2301      	movs	r3, #1
 801ba96:	e7dc      	b.n	801ba52 <_ZL8UserTaskPv+0x706>
			leds->SetLED(LED_USER2, GPIO_PIN_RESET);
 801ba98:	2200      	movs	r2, #0
 801ba9a:	210b      	movs	r1, #11
 801ba9c:	4640      	mov	r0, r8
 801ba9e:	f7f8 f957 	bl	8013d50 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
 801baa2:	e71b      	b.n	801b8dc <_ZL8UserTaskPv+0x590>
 801baa4:	240071a4 	.word	0x240071a4
 801baa8:	0801c93c 	.word	0x0801c93c
 801baac:	240071cc 	.word	0x240071cc
 801bab0:	2400001c 	.word	0x2400001c
 801bab4:	240071dc 	.word	0x240071dc
 801bab8:	24000020 	.word	0x24000020
 801babc:	24000024 	.word	0x24000024
 801bac0:	240071d0 	.word	0x240071d0
 801bac4:	240071c4 	.word	0x240071c4
 801bac8:	240071d4 	.word	0x240071d4
 801bacc:	240071d5 	.word	0x240071d5
 801bad0:	0801b24d 	.word	0x0801b24d

0801bad4 <_GLOBAL__sub_I__ZN4UserC2EP9RegistersP17MasterSubscribersP13CommunicationP8ServicesP10PublishersP13HardwareDelayP7SensorsP4LEDS>:
}
 801bad4:	b508      	push	{r3, lr}
CPG cpg;
 801bad6:	4802      	ldr	r0, [pc, #8]	@ (801bae0 <_GLOBAL__sub_I__ZN4UserC2EP9RegistersP17MasterSubscribersP13CommunicationP8ServicesP10PublishersP13HardwareDelayP7SensorsP4LEDS+0xc>)
 801bad8:	f7fe fe76 	bl	801a7c8 <_ZN3CPGC1Ev>
}
 801badc:	bd08      	pop	{r3, pc}
 801bade:	bf00      	nop
 801bae0:	240071dc 	.word	0x240071dc

0801bae4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 801bae4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801bae6:	2400      	movs	r4, #0
 801bae8:	2310      	movs	r3, #16
 801baea:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801baee:	6803      	ldr	r3, [r0, #0]
 801baf0:	4615      	mov	r5, r2
 801baf2:	699e      	ldr	r6, [r3, #24]
 801baf4:	6812      	ldr	r2, [r2, #0]
 801baf6:	466b      	mov	r3, sp
 801baf8:	e9cd 4400 	strd	r4, r4, [sp]
 801bafc:	47b0      	blx	r6
 801bafe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801bb02:	f003 0306 	and.w	r3, r3, #6
 801bb06:	2b06      	cmp	r3, #6
 801bb08:	bf03      	ittte	eq
 801bb0a:	9b00      	ldreq	r3, [sp, #0]
 801bb0c:	602b      	streq	r3, [r5, #0]
 801bb0e:	2001      	moveq	r0, #1
 801bb10:	4620      	movne	r0, r4
 801bb12:	b004      	add	sp, #16
 801bb14:	bd70      	pop	{r4, r5, r6, pc}

0801bb16 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 801bb16:	9800      	ldr	r0, [sp, #0]
 801bb18:	4290      	cmp	r0, r2
 801bb1a:	bf0c      	ite	eq
 801bb1c:	2006      	moveq	r0, #6
 801bb1e:	2001      	movne	r0, #1
 801bb20:	4770      	bx	lr
	...

0801bb24 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 801bb24:	b510      	push	{r4, lr}
 801bb26:	4b03      	ldr	r3, [pc, #12]	@ (801bb34 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 801bb28:	6003      	str	r3, [r0, #0]
 801bb2a:	4604      	mov	r4, r0
 801bb2c:	f000 f905 	bl	801bd3a <_ZNSt9type_infoD1Ev>
 801bb30:	4620      	mov	r0, r4
 801bb32:	bd10      	pop	{r4, pc}
 801bb34:	0801c984 	.word	0x0801c984

0801bb38 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 801bb38:	b510      	push	{r4, lr}
 801bb3a:	4604      	mov	r4, r0
 801bb3c:	f7ff fff2 	bl	801bb24 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801bb40:	4620      	mov	r0, r4
 801bb42:	2108      	movs	r1, #8
 801bb44:	f000 f842 	bl	801bbcc <_ZdlPvj>
 801bb48:	4620      	mov	r0, r4
 801bb4a:	bd10      	pop	{r4, pc}

0801bb4c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 801bb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb50:	461f      	mov	r7, r3
 801bb52:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801bb56:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801bb5a:	4598      	cmp	r8, r3
 801bb5c:	4606      	mov	r6, r0
 801bb5e:	4615      	mov	r5, r2
 801bb60:	d107      	bne.n	801bb72 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801bb62:	9907      	ldr	r1, [sp, #28]
 801bb64:	f000 f8ee 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801bb68:	b118      	cbz	r0, 801bb72 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801bb6a:	7165      	strb	r5, [r4, #5]
 801bb6c:	2000      	movs	r0, #0
 801bb6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb72:	4639      	mov	r1, r7
 801bb74:	4630      	mov	r0, r6
 801bb76:	f000 f8e5 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801bb7a:	2800      	cmp	r0, #0
 801bb7c:	d0f6      	beq.n	801bb6c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 801bb7e:	2301      	movs	r3, #1
 801bb80:	f8c4 8000 	str.w	r8, [r4]
 801bb84:	7125      	strb	r5, [r4, #4]
 801bb86:	71a3      	strb	r3, [r4, #6]
 801bb88:	e7f0      	b.n	801bb6c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0801bb8a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 801bb8a:	b538      	push	{r3, r4, r5, lr}
 801bb8c:	4615      	mov	r5, r2
 801bb8e:	461c      	mov	r4, r3
 801bb90:	f000 f8d8 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801bb94:	b120      	cbz	r0, 801bba0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 801bb96:	2308      	movs	r3, #8
 801bb98:	60e3      	str	r3, [r4, #12]
 801bb9a:	2306      	movs	r3, #6
 801bb9c:	6025      	str	r5, [r4, #0]
 801bb9e:	7123      	strb	r3, [r4, #4]
 801bba0:	bd38      	pop	{r3, r4, r5, pc}

0801bba2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 801bba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bba6:	4605      	mov	r5, r0
 801bba8:	460c      	mov	r4, r1
 801bbaa:	4616      	mov	r6, r2
 801bbac:	461f      	mov	r7, r3
 801bbae:	f000 f8c9 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801bbb2:	b948      	cbnz	r0, 801bbc8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801bbb4:	2f03      	cmp	r7, #3
 801bbb6:	d807      	bhi.n	801bbc8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801bbb8:	6823      	ldr	r3, [r4, #0]
 801bbba:	4632      	mov	r2, r6
 801bbbc:	4629      	mov	r1, r5
 801bbbe:	4620      	mov	r0, r4
 801bbc0:	695b      	ldr	r3, [r3, #20]
 801bbc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bbc6:	4718      	bx	r3
 801bbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801bbcc <_ZdlPvj>:
 801bbcc:	f000 b8df 	b.w	801bd8e <_ZdlPv>

0801bbd0 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 801bbd0:	b510      	push	{r4, lr}
 801bbd2:	4b03      	ldr	r3, [pc, #12]	@ (801bbe0 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 801bbd4:	6003      	str	r3, [r0, #0]
 801bbd6:	4604      	mov	r4, r0
 801bbd8:	f000 f8af 	bl	801bd3a <_ZNSt9type_infoD1Ev>
 801bbdc:	4620      	mov	r0, r4
 801bbde:	bd10      	pop	{r4, pc}
 801bbe0:	0801c9f8 	.word	0x0801c9f8

0801bbe4 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 801bbe4:	b510      	push	{r4, lr}
 801bbe6:	4604      	mov	r4, r0
 801bbe8:	f7ff fff2 	bl	801bbd0 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
 801bbec:	4620      	mov	r0, r4
 801bbee:	2108      	movs	r1, #8
 801bbf0:	f7ff ffec 	bl	801bbcc <_ZdlPvj>
 801bbf4:	4620      	mov	r0, r4
 801bbf6:	bd10      	pop	{r4, pc}

0801bbf8 <__cxa_guard_acquire>:
 801bbf8:	6802      	ldr	r2, [r0, #0]
 801bbfa:	07d2      	lsls	r2, r2, #31
 801bbfc:	4603      	mov	r3, r0
 801bbfe:	d405      	bmi.n	801bc0c <__cxa_guard_acquire+0x14>
 801bc00:	7842      	ldrb	r2, [r0, #1]
 801bc02:	b102      	cbz	r2, 801bc06 <__cxa_guard_acquire+0xe>
 801bc04:	deff      	udf	#255	@ 0xff
 801bc06:	2001      	movs	r0, #1
 801bc08:	7058      	strb	r0, [r3, #1]
 801bc0a:	4770      	bx	lr
 801bc0c:	2000      	movs	r0, #0
 801bc0e:	4770      	bx	lr

0801bc10 <__cxa_guard_release>:
 801bc10:	2301      	movs	r3, #1
 801bc12:	6003      	str	r3, [r0, #0]
 801bc14:	4770      	bx	lr

0801bc16 <_Znwj>:
 801bc16:	2801      	cmp	r0, #1
 801bc18:	bf38      	it	cc
 801bc1a:	2001      	movcc	r0, #1
 801bc1c:	b510      	push	{r4, lr}
 801bc1e:	4604      	mov	r4, r0
 801bc20:	4620      	mov	r0, r4
 801bc22:	f000 fa71 	bl	801c108 <malloc>
 801bc26:	b100      	cbz	r0, 801bc2a <_Znwj+0x14>
 801bc28:	bd10      	pop	{r4, pc}
 801bc2a:	f000 f8b3 	bl	801bd94 <_ZSt15get_new_handlerv>
 801bc2e:	b908      	cbnz	r0, 801bc34 <_Znwj+0x1e>
 801bc30:	f000 fa63 	bl	801c0fa <abort>
 801bc34:	4780      	blx	r0
 801bc36:	e7f3      	b.n	801bc20 <_Znwj+0xa>

0801bc38 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 801bc38:	b510      	push	{r4, lr}
 801bc3a:	4b03      	ldr	r3, [pc, #12]	@ (801bc48 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 801bc3c:	6003      	str	r3, [r0, #0]
 801bc3e:	4604      	mov	r4, r0
 801bc40:	f7ff ff70 	bl	801bb24 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801bc44:	4620      	mov	r0, r4
 801bc46:	bd10      	pop	{r4, pc}
 801bc48:	0801ca9c 	.word	0x0801ca9c

0801bc4c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 801bc4c:	b510      	push	{r4, lr}
 801bc4e:	4604      	mov	r4, r0
 801bc50:	f7ff fff2 	bl	801bc38 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 801bc54:	4620      	mov	r0, r4
 801bc56:	210c      	movs	r1, #12
 801bc58:	f7ff ffb8 	bl	801bbcc <_ZdlPvj>
 801bc5c:	4620      	mov	r0, r4
 801bc5e:	bd10      	pop	{r4, pc}

0801bc60 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 801bc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc64:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801bc68:	4590      	cmp	r8, r2
 801bc6a:	4606      	mov	r6, r0
 801bc6c:	460f      	mov	r7, r1
 801bc6e:	4615      	mov	r5, r2
 801bc70:	461c      	mov	r4, r3
 801bc72:	d00b      	beq.n	801bc8c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 801bc74:	68b0      	ldr	r0, [r6, #8]
 801bc76:	6803      	ldr	r3, [r0, #0]
 801bc78:	f8cd 8018 	str.w	r8, [sp, #24]
 801bc7c:	6a1e      	ldr	r6, [r3, #32]
 801bc7e:	462a      	mov	r2, r5
 801bc80:	4623      	mov	r3, r4
 801bc82:	4639      	mov	r1, r7
 801bc84:	46b4      	mov	ip, r6
 801bc86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bc8a:	4760      	bx	ip
 801bc8c:	4619      	mov	r1, r3
 801bc8e:	f000 f859 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801bc92:	2800      	cmp	r0, #0
 801bc94:	d0ee      	beq.n	801bc74 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 801bc96:	2006      	movs	r0, #6
 801bc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801bc9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 801bc9c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bca0:	460d      	mov	r5, r1
 801bca2:	4619      	mov	r1, r3
 801bca4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 801bca8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 801bcac:	4681      	mov	r9, r0
 801bcae:	4617      	mov	r7, r2
 801bcb0:	4698      	mov	r8, r3
 801bcb2:	f000 f847 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801bcb6:	b190      	cbz	r0, 801bcde <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 801bcb8:	2d00      	cmp	r5, #0
 801bcba:	6034      	str	r4, [r6, #0]
 801bcbc:	7137      	strb	r7, [r6, #4]
 801bcbe:	db09      	blt.n	801bcd4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 801bcc0:	442c      	add	r4, r5
 801bcc2:	45a2      	cmp	sl, r4
 801bcc4:	bf14      	ite	ne
 801bcc6:	2401      	movne	r4, #1
 801bcc8:	2406      	moveq	r4, #6
 801bcca:	71b4      	strb	r4, [r6, #6]
 801bccc:	2000      	movs	r0, #0
 801bcce:	b001      	add	sp, #4
 801bcd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcd4:	3502      	adds	r5, #2
 801bcd6:	d1f9      	bne.n	801bccc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801bcd8:	2301      	movs	r3, #1
 801bcda:	71b3      	strb	r3, [r6, #6]
 801bcdc:	e7f6      	b.n	801bccc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801bcde:	4554      	cmp	r4, sl
 801bce0:	d106      	bne.n	801bcf0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801bce2:	4659      	mov	r1, fp
 801bce4:	4648      	mov	r0, r9
 801bce6:	f000 f82d 	bl	801bd44 <_ZNKSt9type_info7__equalERKS_>
 801bcea:	b108      	cbz	r0, 801bcf0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801bcec:	7177      	strb	r7, [r6, #5]
 801bcee:	e7ed      	b.n	801bccc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801bcf0:	f8d9 0008 	ldr.w	r0, [r9, #8]
 801bcf4:	6803      	ldr	r3, [r0, #0]
 801bcf6:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 801bcfa:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 801bcfe:	69dc      	ldr	r4, [r3, #28]
 801bd00:	463a      	mov	r2, r7
 801bd02:	4643      	mov	r3, r8
 801bd04:	4629      	mov	r1, r5
 801bd06:	46a4      	mov	ip, r4
 801bd08:	b001      	add	sp, #4
 801bd0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd0e:	4760      	bx	ip

0801bd10 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 801bd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd14:	4607      	mov	r7, r0
 801bd16:	460c      	mov	r4, r1
 801bd18:	4615      	mov	r5, r2
 801bd1a:	461e      	mov	r6, r3
 801bd1c:	f7ff ff35 	bl	801bb8a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 801bd20:	b948      	cbnz	r0, 801bd36 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 801bd22:	68b8      	ldr	r0, [r7, #8]
 801bd24:	6803      	ldr	r3, [r0, #0]
 801bd26:	699f      	ldr	r7, [r3, #24]
 801bd28:	462a      	mov	r2, r5
 801bd2a:	4633      	mov	r3, r6
 801bd2c:	4621      	mov	r1, r4
 801bd2e:	46bc      	mov	ip, r7
 801bd30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd34:	4760      	bx	ip
 801bd36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801bd3a <_ZNSt9type_infoD1Ev>:
 801bd3a:	4770      	bx	lr

0801bd3c <_ZNKSt9type_info14__is_pointer_pEv>:
 801bd3c:	2000      	movs	r0, #0
 801bd3e:	4770      	bx	lr

0801bd40 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 801bd40:	2000      	movs	r0, #0
 801bd42:	4770      	bx	lr

0801bd44 <_ZNKSt9type_info7__equalERKS_>:
 801bd44:	4281      	cmp	r1, r0
 801bd46:	b508      	push	{r3, lr}
 801bd48:	d00e      	beq.n	801bd68 <_ZNKSt9type_info7__equalERKS_+0x24>
 801bd4a:	6840      	ldr	r0, [r0, #4]
 801bd4c:	7803      	ldrb	r3, [r0, #0]
 801bd4e:	2b2a      	cmp	r3, #42	@ 0x2a
 801bd50:	d00c      	beq.n	801bd6c <_ZNKSt9type_info7__equalERKS_+0x28>
 801bd52:	6849      	ldr	r1, [r1, #4]
 801bd54:	780b      	ldrb	r3, [r1, #0]
 801bd56:	2b2a      	cmp	r3, #42	@ 0x2a
 801bd58:	bf08      	it	eq
 801bd5a:	3101      	addeq	r1, #1
 801bd5c:	f7e4 fac0 	bl	80002e0 <strcmp>
 801bd60:	fab0 f080 	clz	r0, r0
 801bd64:	0940      	lsrs	r0, r0, #5
 801bd66:	bd08      	pop	{r3, pc}
 801bd68:	2001      	movs	r0, #1
 801bd6a:	e7fc      	b.n	801bd66 <_ZNKSt9type_info7__equalERKS_+0x22>
 801bd6c:	2000      	movs	r0, #0
 801bd6e:	e7fa      	b.n	801bd66 <_ZNKSt9type_info7__equalERKS_+0x22>

0801bd70 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 801bd70:	f7ff bfe8 	b.w	801bd44 <_ZNKSt9type_info7__equalERKS_>

0801bd74 <_ZSt17__throw_bad_allocv>:
 801bd74:	b508      	push	{r3, lr}
 801bd76:	f000 f9c0 	bl	801c0fa <abort>

0801bd7a <_ZSt28__throw_bad_array_new_lengthv>:
 801bd7a:	b508      	push	{r3, lr}
 801bd7c:	f000 f9bd 	bl	801c0fa <abort>

0801bd80 <_ZSt20__throw_length_errorPKc>:
 801bd80:	b508      	push	{r3, lr}
 801bd82:	f000 f9ba 	bl	801c0fa <abort>

0801bd86 <_ZSt24__throw_out_of_range_fmtPKcz>:
 801bd86:	b40f      	push	{r0, r1, r2, r3}
 801bd88:	b508      	push	{r3, lr}
 801bd8a:	f000 f9b6 	bl	801c0fa <abort>

0801bd8e <_ZdlPv>:
 801bd8e:	f000 b9c3 	b.w	801c118 <free>
	...

0801bd94 <_ZSt15get_new_handlerv>:
 801bd94:	4b02      	ldr	r3, [pc, #8]	@ (801bda0 <_ZSt15get_new_handlerv+0xc>)
 801bd96:	6818      	ldr	r0, [r3, #0]
 801bd98:	f3bf 8f5b 	dmb	ish
 801bd9c:	4770      	bx	lr
 801bd9e:	bf00      	nop
 801bda0:	24009480 	.word	0x24009480

0801bda4 <sinf_poly>:
 801bda4:	07cb      	lsls	r3, r1, #31
 801bda6:	d412      	bmi.n	801bdce <sinf_poly+0x2a>
 801bda8:	ee21 5b00 	vmul.f64	d5, d1, d0
 801bdac:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801bdb0:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801bdb4:	eea6 7b01 	vfma.f64	d7, d6, d1
 801bdb8:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801bdbc:	ee21 1b05 	vmul.f64	d1, d1, d5
 801bdc0:	eea6 0b05 	vfma.f64	d0, d6, d5
 801bdc4:	eea7 0b01 	vfma.f64	d0, d7, d1
 801bdc8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801bdcc:	4770      	bx	lr
 801bdce:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801bdd2:	ee21 5b01 	vmul.f64	d5, d1, d1
 801bdd6:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801bdda:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801bdde:	eea1 7b06 	vfma.f64	d7, d1, d6
 801bde2:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801bde6:	eea1 0b06 	vfma.f64	d0, d1, d6
 801bdea:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801bdee:	ee21 1b05 	vmul.f64	d1, d1, d5
 801bdf2:	eea5 0b06 	vfma.f64	d0, d5, d6
 801bdf6:	e7e5      	b.n	801bdc4 <sinf_poly+0x20>

0801bdf8 <sinf>:
 801bdf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bdfa:	ee10 4a10 	vmov	r4, s0
 801bdfe:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801be02:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801be06:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801be0a:	eef0 7a40 	vmov.f32	s15, s0
 801be0e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801be12:	d218      	bcs.n	801be46 <sinf+0x4e>
 801be14:	ee26 1b06 	vmul.f64	d1, d6, d6
 801be18:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801be1c:	d20a      	bcs.n	801be34 <sinf+0x3c>
 801be1e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 801be22:	d103      	bne.n	801be2c <sinf+0x34>
 801be24:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801be28:	ed8d 1a01 	vstr	s2, [sp, #4]
 801be2c:	eeb0 0a67 	vmov.f32	s0, s15
 801be30:	b003      	add	sp, #12
 801be32:	bd30      	pop	{r4, r5, pc}
 801be34:	483a      	ldr	r0, [pc, #232]	@ (801bf20 <sinf+0x128>)
 801be36:	eeb0 0b46 	vmov.f64	d0, d6
 801be3a:	2100      	movs	r1, #0
 801be3c:	b003      	add	sp, #12
 801be3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801be42:	f7ff bfaf 	b.w	801bda4 <sinf_poly>
 801be46:	f240 422e 	movw	r2, #1070	@ 0x42e
 801be4a:	4293      	cmp	r3, r2
 801be4c:	d824      	bhi.n	801be98 <sinf+0xa0>
 801be4e:	4b34      	ldr	r3, [pc, #208]	@ (801bf20 <sinf+0x128>)
 801be50:	ed93 7b08 	vldr	d7, [r3, #32]
 801be54:	ee26 7b07 	vmul.f64	d7, d6, d7
 801be58:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801be5c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801be60:	ee17 1a90 	vmov	r1, s15
 801be64:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801be68:	1609      	asrs	r1, r1, #24
 801be6a:	ee07 1a90 	vmov	s15, r1
 801be6e:	f001 0203 	and.w	r2, r1, #3
 801be72:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801be76:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801be7a:	ed92 0b00 	vldr	d0, [r2]
 801be7e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 801be82:	f011 0f02 	tst.w	r1, #2
 801be86:	eea5 6b47 	vfms.f64	d6, d5, d7
 801be8a:	bf08      	it	eq
 801be8c:	4618      	moveq	r0, r3
 801be8e:	ee26 1b06 	vmul.f64	d1, d6, d6
 801be92:	ee20 0b06 	vmul.f64	d0, d0, d6
 801be96:	e7d1      	b.n	801be3c <sinf+0x44>
 801be98:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801be9c:	d237      	bcs.n	801bf0e <sinf+0x116>
 801be9e:	4921      	ldr	r1, [pc, #132]	@ (801bf24 <sinf+0x12c>)
 801bea0:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801bea4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801bea8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801beac:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801beb0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801beb4:	6a10      	ldr	r0, [r2, #32]
 801beb6:	6912      	ldr	r2, [r2, #16]
 801beb8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801bebc:	40ab      	lsls	r3, r5
 801bebe:	fba0 5003 	umull	r5, r0, r0, r3
 801bec2:	4359      	muls	r1, r3
 801bec4:	fbe3 0102 	umlal	r0, r1, r3, r2
 801bec8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801becc:	0f9d      	lsrs	r5, r3, #30
 801bece:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801bed2:	1ac9      	subs	r1, r1, r3
 801bed4:	f7e4 fb9c 	bl	8000610 <__aeabi_l2d>
 801bed8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801bedc:	4b10      	ldr	r3, [pc, #64]	@ (801bf20 <sinf+0x128>)
 801bede:	f004 0203 	and.w	r2, r4, #3
 801bee2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801bee6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 801bf18 <sinf+0x120>
 801beea:	ed92 0b00 	vldr	d0, [r2]
 801beee:	ec41 0b17 	vmov	d7, r0, r1
 801bef2:	f014 0f02 	tst.w	r4, #2
 801bef6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801befa:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801befe:	4629      	mov	r1, r5
 801bf00:	bf08      	it	eq
 801bf02:	4618      	moveq	r0, r3
 801bf04:	ee27 1b07 	vmul.f64	d1, d7, d7
 801bf08:	ee20 0b07 	vmul.f64	d0, d0, d7
 801bf0c:	e796      	b.n	801be3c <sinf+0x44>
 801bf0e:	b003      	add	sp, #12
 801bf10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bf14:	f000 b8e2 	b.w	801c0dc <__math_invalidf>
 801bf18:	54442d18 	.word	0x54442d18
 801bf1c:	3c1921fb 	.word	0x3c1921fb
 801bf20:	0801cb38 	.word	0x0801cb38
 801bf24:	0801cad8 	.word	0x0801cad8

0801bf28 <sinf_poly>:
 801bf28:	07cb      	lsls	r3, r1, #31
 801bf2a:	d412      	bmi.n	801bf52 <sinf_poly+0x2a>
 801bf2c:	ee21 5b00 	vmul.f64	d5, d1, d0
 801bf30:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801bf34:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801bf38:	eea6 7b01 	vfma.f64	d7, d6, d1
 801bf3c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801bf40:	ee21 1b05 	vmul.f64	d1, d1, d5
 801bf44:	eea6 0b05 	vfma.f64	d0, d6, d5
 801bf48:	eea7 0b01 	vfma.f64	d0, d7, d1
 801bf4c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801bf50:	4770      	bx	lr
 801bf52:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801bf56:	ee21 5b01 	vmul.f64	d5, d1, d1
 801bf5a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801bf5e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801bf62:	eea1 7b06 	vfma.f64	d7, d1, d6
 801bf66:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801bf6a:	eea1 0b06 	vfma.f64	d0, d1, d6
 801bf6e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801bf72:	ee21 1b05 	vmul.f64	d1, d1, d5
 801bf76:	eea5 0b06 	vfma.f64	d0, d5, d6
 801bf7a:	e7e5      	b.n	801bf48 <sinf_poly+0x20>
 801bf7c:	0000      	movs	r0, r0
	...

0801bf80 <cosf>:
 801bf80:	b538      	push	{r3, r4, r5, lr}
 801bf82:	ee10 4a10 	vmov	r4, s0
 801bf86:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801bf8a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801bf8e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 801bf92:	d21f      	bcs.n	801bfd4 <cosf+0x54>
 801bf94:	ee27 7b07 	vmul.f64	d7, d7, d7
 801bf98:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801bf9c:	f0c0 8082 	bcc.w	801c0a4 <cosf+0x124>
 801bfa0:	ee27 4b07 	vmul.f64	d4, d7, d7
 801bfa4:	4b44      	ldr	r3, [pc, #272]	@ (801c0b8 <cosf+0x138>)
 801bfa6:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 801bfaa:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 801bfae:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 801bfb2:	eea7 6b05 	vfma.f64	d6, d7, d5
 801bfb6:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 801bfba:	eea7 0b05 	vfma.f64	d0, d7, d5
 801bfbe:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 801bfc2:	ee27 7b04 	vmul.f64	d7, d7, d4
 801bfc6:	eea4 0b05 	vfma.f64	d0, d4, d5
 801bfca:	eea6 0b07 	vfma.f64	d0, d6, d7
 801bfce:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801bfd2:	bd38      	pop	{r3, r4, r5, pc}
 801bfd4:	f240 422e 	movw	r2, #1070	@ 0x42e
 801bfd8:	4293      	cmp	r3, r2
 801bfda:	d829      	bhi.n	801c030 <cosf+0xb0>
 801bfdc:	4b36      	ldr	r3, [pc, #216]	@ (801c0b8 <cosf+0x138>)
 801bfde:	ed93 6b08 	vldr	d6, [r3, #32]
 801bfe2:	ee27 6b06 	vmul.f64	d6, d7, d6
 801bfe6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 801bfea:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801bfee:	ee16 1a90 	vmov	r1, s13
 801bff2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801bff6:	1609      	asrs	r1, r1, #24
 801bff8:	ee06 1a90 	vmov	s13, r1
 801bffc:	f001 0203 	and.w	r2, r1, #3
 801c000:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801c004:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801c008:	ed92 0b00 	vldr	d0, [r2]
 801c00c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 801c010:	f011 0f02 	tst.w	r1, #2
 801c014:	f081 0101 	eor.w	r1, r1, #1
 801c018:	eea5 7b46 	vfms.f64	d7, d5, d6
 801c01c:	bf08      	it	eq
 801c01e:	4618      	moveq	r0, r3
 801c020:	ee27 1b07 	vmul.f64	d1, d7, d7
 801c024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c028:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c02c:	f7ff bf7c 	b.w	801bf28 <sinf_poly>
 801c030:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801c034:	d232      	bcs.n	801c09c <cosf+0x11c>
 801c036:	4921      	ldr	r1, [pc, #132]	@ (801c0bc <cosf+0x13c>)
 801c038:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801c03c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801c040:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801c044:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801c048:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801c04c:	6a10      	ldr	r0, [r2, #32]
 801c04e:	6912      	ldr	r2, [r2, #16]
 801c050:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801c054:	40ab      	lsls	r3, r5
 801c056:	fba0 5003 	umull	r5, r0, r0, r3
 801c05a:	4359      	muls	r1, r3
 801c05c:	fbe3 0102 	umlal	r0, r1, r3, r2
 801c060:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801c064:	0f9d      	lsrs	r5, r3, #30
 801c066:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801c06a:	1ac9      	subs	r1, r1, r3
 801c06c:	f7e4 fad0 	bl	8000610 <__aeabi_l2d>
 801c070:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801c074:	4b10      	ldr	r3, [pc, #64]	@ (801c0b8 <cosf+0x138>)
 801c076:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 801c0b0 <cosf+0x130>
 801c07a:	ec41 0b17 	vmov	d7, r0, r1
 801c07e:	f004 0203 	and.w	r2, r4, #3
 801c082:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801c086:	ed92 0b00 	vldr	d0, [r2]
 801c08a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c08e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801c092:	f014 0f02 	tst.w	r4, #2
 801c096:	f085 0101 	eor.w	r1, r5, #1
 801c09a:	e7bf      	b.n	801c01c <cosf+0x9c>
 801c09c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c0a0:	f000 b81c 	b.w	801c0dc <__math_invalidf>
 801c0a4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801c0a8:	e793      	b.n	801bfd2 <cosf+0x52>
 801c0aa:	bf00      	nop
 801c0ac:	f3af 8000 	nop.w
 801c0b0:	54442d18 	.word	0x54442d18
 801c0b4:	3c1921fb 	.word	0x3c1921fb
 801c0b8:	0801cb38 	.word	0x0801cb38
 801c0bc:	0801cad8 	.word	0x0801cad8

0801c0c0 <with_errnof>:
 801c0c0:	b510      	push	{r4, lr}
 801c0c2:	ed2d 8b02 	vpush	{d8}
 801c0c6:	eeb0 8a40 	vmov.f32	s16, s0
 801c0ca:	4604      	mov	r4, r0
 801c0cc:	f000 f9a6 	bl	801c41c <__errno>
 801c0d0:	eeb0 0a48 	vmov.f32	s0, s16
 801c0d4:	ecbd 8b02 	vpop	{d8}
 801c0d8:	6004      	str	r4, [r0, #0]
 801c0da:	bd10      	pop	{r4, pc}

0801c0dc <__math_invalidf>:
 801c0dc:	eef0 7a40 	vmov.f32	s15, s0
 801c0e0:	ee30 7a40 	vsub.f32	s14, s0, s0
 801c0e4:	eef4 7a67 	vcmp.f32	s15, s15
 801c0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c0ec:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801c0f0:	d602      	bvs.n	801c0f8 <__math_invalidf+0x1c>
 801c0f2:	2021      	movs	r0, #33	@ 0x21
 801c0f4:	f7ff bfe4 	b.w	801c0c0 <with_errnof>
 801c0f8:	4770      	bx	lr

0801c0fa <abort>:
 801c0fa:	b508      	push	{r3, lr}
 801c0fc:	2006      	movs	r0, #6
 801c0fe:	f000 f90b 	bl	801c318 <raise>
 801c102:	2001      	movs	r0, #1
 801c104:	f7e7 f9f6 	bl	80034f4 <_exit>

0801c108 <malloc>:
 801c108:	4b02      	ldr	r3, [pc, #8]	@ (801c114 <malloc+0xc>)
 801c10a:	4601      	mov	r1, r0
 801c10c:	6818      	ldr	r0, [r3, #0]
 801c10e:	f000 b82d 	b.w	801c16c <_malloc_r>
 801c112:	bf00      	nop
 801c114:	24000028 	.word	0x24000028

0801c118 <free>:
 801c118:	4b02      	ldr	r3, [pc, #8]	@ (801c124 <free+0xc>)
 801c11a:	4601      	mov	r1, r0
 801c11c:	6818      	ldr	r0, [r3, #0]
 801c11e:	f000 b9b7 	b.w	801c490 <_free_r>
 801c122:	bf00      	nop
 801c124:	24000028 	.word	0x24000028

0801c128 <sbrk_aligned>:
 801c128:	b570      	push	{r4, r5, r6, lr}
 801c12a:	4e0f      	ldr	r6, [pc, #60]	@ (801c168 <sbrk_aligned+0x40>)
 801c12c:	460c      	mov	r4, r1
 801c12e:	6831      	ldr	r1, [r6, #0]
 801c130:	4605      	mov	r5, r0
 801c132:	b911      	cbnz	r1, 801c13a <sbrk_aligned+0x12>
 801c134:	f000 f962 	bl	801c3fc <_sbrk_r>
 801c138:	6030      	str	r0, [r6, #0]
 801c13a:	4621      	mov	r1, r4
 801c13c:	4628      	mov	r0, r5
 801c13e:	f000 f95d 	bl	801c3fc <_sbrk_r>
 801c142:	1c43      	adds	r3, r0, #1
 801c144:	d103      	bne.n	801c14e <sbrk_aligned+0x26>
 801c146:	f04f 34ff 	mov.w	r4, #4294967295
 801c14a:	4620      	mov	r0, r4
 801c14c:	bd70      	pop	{r4, r5, r6, pc}
 801c14e:	1cc4      	adds	r4, r0, #3
 801c150:	f024 0403 	bic.w	r4, r4, #3
 801c154:	42a0      	cmp	r0, r4
 801c156:	d0f8      	beq.n	801c14a <sbrk_aligned+0x22>
 801c158:	1a21      	subs	r1, r4, r0
 801c15a:	4628      	mov	r0, r5
 801c15c:	f000 f94e 	bl	801c3fc <_sbrk_r>
 801c160:	3001      	adds	r0, #1
 801c162:	d1f2      	bne.n	801c14a <sbrk_aligned+0x22>
 801c164:	e7ef      	b.n	801c146 <sbrk_aligned+0x1e>
 801c166:	bf00      	nop
 801c168:	24009484 	.word	0x24009484

0801c16c <_malloc_r>:
 801c16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c170:	1ccd      	adds	r5, r1, #3
 801c172:	f025 0503 	bic.w	r5, r5, #3
 801c176:	3508      	adds	r5, #8
 801c178:	2d0c      	cmp	r5, #12
 801c17a:	bf38      	it	cc
 801c17c:	250c      	movcc	r5, #12
 801c17e:	2d00      	cmp	r5, #0
 801c180:	4606      	mov	r6, r0
 801c182:	db01      	blt.n	801c188 <_malloc_r+0x1c>
 801c184:	42a9      	cmp	r1, r5
 801c186:	d904      	bls.n	801c192 <_malloc_r+0x26>
 801c188:	230c      	movs	r3, #12
 801c18a:	6033      	str	r3, [r6, #0]
 801c18c:	2000      	movs	r0, #0
 801c18e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c192:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801c268 <_malloc_r+0xfc>
 801c196:	f000 f869 	bl	801c26c <__malloc_lock>
 801c19a:	f8d8 3000 	ldr.w	r3, [r8]
 801c19e:	461c      	mov	r4, r3
 801c1a0:	bb44      	cbnz	r4, 801c1f4 <_malloc_r+0x88>
 801c1a2:	4629      	mov	r1, r5
 801c1a4:	4630      	mov	r0, r6
 801c1a6:	f7ff ffbf 	bl	801c128 <sbrk_aligned>
 801c1aa:	1c43      	adds	r3, r0, #1
 801c1ac:	4604      	mov	r4, r0
 801c1ae:	d158      	bne.n	801c262 <_malloc_r+0xf6>
 801c1b0:	f8d8 4000 	ldr.w	r4, [r8]
 801c1b4:	4627      	mov	r7, r4
 801c1b6:	2f00      	cmp	r7, #0
 801c1b8:	d143      	bne.n	801c242 <_malloc_r+0xd6>
 801c1ba:	2c00      	cmp	r4, #0
 801c1bc:	d04b      	beq.n	801c256 <_malloc_r+0xea>
 801c1be:	6823      	ldr	r3, [r4, #0]
 801c1c0:	4639      	mov	r1, r7
 801c1c2:	4630      	mov	r0, r6
 801c1c4:	eb04 0903 	add.w	r9, r4, r3
 801c1c8:	f000 f918 	bl	801c3fc <_sbrk_r>
 801c1cc:	4581      	cmp	r9, r0
 801c1ce:	d142      	bne.n	801c256 <_malloc_r+0xea>
 801c1d0:	6821      	ldr	r1, [r4, #0]
 801c1d2:	1a6d      	subs	r5, r5, r1
 801c1d4:	4629      	mov	r1, r5
 801c1d6:	4630      	mov	r0, r6
 801c1d8:	f7ff ffa6 	bl	801c128 <sbrk_aligned>
 801c1dc:	3001      	adds	r0, #1
 801c1de:	d03a      	beq.n	801c256 <_malloc_r+0xea>
 801c1e0:	6823      	ldr	r3, [r4, #0]
 801c1e2:	442b      	add	r3, r5
 801c1e4:	6023      	str	r3, [r4, #0]
 801c1e6:	f8d8 3000 	ldr.w	r3, [r8]
 801c1ea:	685a      	ldr	r2, [r3, #4]
 801c1ec:	bb62      	cbnz	r2, 801c248 <_malloc_r+0xdc>
 801c1ee:	f8c8 7000 	str.w	r7, [r8]
 801c1f2:	e00f      	b.n	801c214 <_malloc_r+0xa8>
 801c1f4:	6822      	ldr	r2, [r4, #0]
 801c1f6:	1b52      	subs	r2, r2, r5
 801c1f8:	d420      	bmi.n	801c23c <_malloc_r+0xd0>
 801c1fa:	2a0b      	cmp	r2, #11
 801c1fc:	d917      	bls.n	801c22e <_malloc_r+0xc2>
 801c1fe:	1961      	adds	r1, r4, r5
 801c200:	42a3      	cmp	r3, r4
 801c202:	6025      	str	r5, [r4, #0]
 801c204:	bf18      	it	ne
 801c206:	6059      	strne	r1, [r3, #4]
 801c208:	6863      	ldr	r3, [r4, #4]
 801c20a:	bf08      	it	eq
 801c20c:	f8c8 1000 	streq.w	r1, [r8]
 801c210:	5162      	str	r2, [r4, r5]
 801c212:	604b      	str	r3, [r1, #4]
 801c214:	4630      	mov	r0, r6
 801c216:	f000 f82f 	bl	801c278 <__malloc_unlock>
 801c21a:	f104 000b 	add.w	r0, r4, #11
 801c21e:	1d23      	adds	r3, r4, #4
 801c220:	f020 0007 	bic.w	r0, r0, #7
 801c224:	1ac2      	subs	r2, r0, r3
 801c226:	bf1c      	itt	ne
 801c228:	1a1b      	subne	r3, r3, r0
 801c22a:	50a3      	strne	r3, [r4, r2]
 801c22c:	e7af      	b.n	801c18e <_malloc_r+0x22>
 801c22e:	6862      	ldr	r2, [r4, #4]
 801c230:	42a3      	cmp	r3, r4
 801c232:	bf0c      	ite	eq
 801c234:	f8c8 2000 	streq.w	r2, [r8]
 801c238:	605a      	strne	r2, [r3, #4]
 801c23a:	e7eb      	b.n	801c214 <_malloc_r+0xa8>
 801c23c:	4623      	mov	r3, r4
 801c23e:	6864      	ldr	r4, [r4, #4]
 801c240:	e7ae      	b.n	801c1a0 <_malloc_r+0x34>
 801c242:	463c      	mov	r4, r7
 801c244:	687f      	ldr	r7, [r7, #4]
 801c246:	e7b6      	b.n	801c1b6 <_malloc_r+0x4a>
 801c248:	461a      	mov	r2, r3
 801c24a:	685b      	ldr	r3, [r3, #4]
 801c24c:	42a3      	cmp	r3, r4
 801c24e:	d1fb      	bne.n	801c248 <_malloc_r+0xdc>
 801c250:	2300      	movs	r3, #0
 801c252:	6053      	str	r3, [r2, #4]
 801c254:	e7de      	b.n	801c214 <_malloc_r+0xa8>
 801c256:	230c      	movs	r3, #12
 801c258:	6033      	str	r3, [r6, #0]
 801c25a:	4630      	mov	r0, r6
 801c25c:	f000 f80c 	bl	801c278 <__malloc_unlock>
 801c260:	e794      	b.n	801c18c <_malloc_r+0x20>
 801c262:	6005      	str	r5, [r0, #0]
 801c264:	e7d6      	b.n	801c214 <_malloc_r+0xa8>
 801c266:	bf00      	nop
 801c268:	24009488 	.word	0x24009488

0801c26c <__malloc_lock>:
 801c26c:	4801      	ldr	r0, [pc, #4]	@ (801c274 <__malloc_lock+0x8>)
 801c26e:	f000 b8ff 	b.w	801c470 <__retarget_lock_acquire_recursive>
 801c272:	bf00      	nop
 801c274:	240095c8 	.word	0x240095c8

0801c278 <__malloc_unlock>:
 801c278:	4801      	ldr	r0, [pc, #4]	@ (801c280 <__malloc_unlock+0x8>)
 801c27a:	f000 b8fa 	b.w	801c472 <__retarget_lock_release_recursive>
 801c27e:	bf00      	nop
 801c280:	240095c8 	.word	0x240095c8

0801c284 <memmove>:
 801c284:	4288      	cmp	r0, r1
 801c286:	b510      	push	{r4, lr}
 801c288:	eb01 0402 	add.w	r4, r1, r2
 801c28c:	d902      	bls.n	801c294 <memmove+0x10>
 801c28e:	4284      	cmp	r4, r0
 801c290:	4623      	mov	r3, r4
 801c292:	d807      	bhi.n	801c2a4 <memmove+0x20>
 801c294:	1e43      	subs	r3, r0, #1
 801c296:	42a1      	cmp	r1, r4
 801c298:	d008      	beq.n	801c2ac <memmove+0x28>
 801c29a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c29e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c2a2:	e7f8      	b.n	801c296 <memmove+0x12>
 801c2a4:	4402      	add	r2, r0
 801c2a6:	4601      	mov	r1, r0
 801c2a8:	428a      	cmp	r2, r1
 801c2aa:	d100      	bne.n	801c2ae <memmove+0x2a>
 801c2ac:	bd10      	pop	{r4, pc}
 801c2ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c2b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c2b6:	e7f7      	b.n	801c2a8 <memmove+0x24>

0801c2b8 <memset>:
 801c2b8:	4402      	add	r2, r0
 801c2ba:	4603      	mov	r3, r0
 801c2bc:	4293      	cmp	r3, r2
 801c2be:	d100      	bne.n	801c2c2 <memset+0xa>
 801c2c0:	4770      	bx	lr
 801c2c2:	f803 1b01 	strb.w	r1, [r3], #1
 801c2c6:	e7f9      	b.n	801c2bc <memset+0x4>

0801c2c8 <_raise_r>:
 801c2c8:	291f      	cmp	r1, #31
 801c2ca:	b538      	push	{r3, r4, r5, lr}
 801c2cc:	4605      	mov	r5, r0
 801c2ce:	460c      	mov	r4, r1
 801c2d0:	d904      	bls.n	801c2dc <_raise_r+0x14>
 801c2d2:	2316      	movs	r3, #22
 801c2d4:	6003      	str	r3, [r0, #0]
 801c2d6:	f04f 30ff 	mov.w	r0, #4294967295
 801c2da:	bd38      	pop	{r3, r4, r5, pc}
 801c2dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c2de:	b112      	cbz	r2, 801c2e6 <_raise_r+0x1e>
 801c2e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c2e4:	b94b      	cbnz	r3, 801c2fa <_raise_r+0x32>
 801c2e6:	4628      	mov	r0, r5
 801c2e8:	f000 f886 	bl	801c3f8 <_getpid_r>
 801c2ec:	4622      	mov	r2, r4
 801c2ee:	4601      	mov	r1, r0
 801c2f0:	4628      	mov	r0, r5
 801c2f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c2f6:	f000 b86d 	b.w	801c3d4 <_kill_r>
 801c2fa:	2b01      	cmp	r3, #1
 801c2fc:	d00a      	beq.n	801c314 <_raise_r+0x4c>
 801c2fe:	1c59      	adds	r1, r3, #1
 801c300:	d103      	bne.n	801c30a <_raise_r+0x42>
 801c302:	2316      	movs	r3, #22
 801c304:	6003      	str	r3, [r0, #0]
 801c306:	2001      	movs	r0, #1
 801c308:	e7e7      	b.n	801c2da <_raise_r+0x12>
 801c30a:	2100      	movs	r1, #0
 801c30c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c310:	4620      	mov	r0, r4
 801c312:	4798      	blx	r3
 801c314:	2000      	movs	r0, #0
 801c316:	e7e0      	b.n	801c2da <_raise_r+0x12>

0801c318 <raise>:
 801c318:	4b02      	ldr	r3, [pc, #8]	@ (801c324 <raise+0xc>)
 801c31a:	4601      	mov	r1, r0
 801c31c:	6818      	ldr	r0, [r3, #0]
 801c31e:	f7ff bfd3 	b.w	801c2c8 <_raise_r>
 801c322:	bf00      	nop
 801c324:	24000028 	.word	0x24000028

0801c328 <_reclaim_reent>:
 801c328:	4b29      	ldr	r3, [pc, #164]	@ (801c3d0 <_reclaim_reent+0xa8>)
 801c32a:	681b      	ldr	r3, [r3, #0]
 801c32c:	4283      	cmp	r3, r0
 801c32e:	b570      	push	{r4, r5, r6, lr}
 801c330:	4604      	mov	r4, r0
 801c332:	d04b      	beq.n	801c3cc <_reclaim_reent+0xa4>
 801c334:	69c3      	ldr	r3, [r0, #28]
 801c336:	b1ab      	cbz	r3, 801c364 <_reclaim_reent+0x3c>
 801c338:	68db      	ldr	r3, [r3, #12]
 801c33a:	b16b      	cbz	r3, 801c358 <_reclaim_reent+0x30>
 801c33c:	2500      	movs	r5, #0
 801c33e:	69e3      	ldr	r3, [r4, #28]
 801c340:	68db      	ldr	r3, [r3, #12]
 801c342:	5959      	ldr	r1, [r3, r5]
 801c344:	2900      	cmp	r1, #0
 801c346:	d13b      	bne.n	801c3c0 <_reclaim_reent+0x98>
 801c348:	3504      	adds	r5, #4
 801c34a:	2d80      	cmp	r5, #128	@ 0x80
 801c34c:	d1f7      	bne.n	801c33e <_reclaim_reent+0x16>
 801c34e:	69e3      	ldr	r3, [r4, #28]
 801c350:	4620      	mov	r0, r4
 801c352:	68d9      	ldr	r1, [r3, #12]
 801c354:	f000 f89c 	bl	801c490 <_free_r>
 801c358:	69e3      	ldr	r3, [r4, #28]
 801c35a:	6819      	ldr	r1, [r3, #0]
 801c35c:	b111      	cbz	r1, 801c364 <_reclaim_reent+0x3c>
 801c35e:	4620      	mov	r0, r4
 801c360:	f000 f896 	bl	801c490 <_free_r>
 801c364:	6961      	ldr	r1, [r4, #20]
 801c366:	b111      	cbz	r1, 801c36e <_reclaim_reent+0x46>
 801c368:	4620      	mov	r0, r4
 801c36a:	f000 f891 	bl	801c490 <_free_r>
 801c36e:	69e1      	ldr	r1, [r4, #28]
 801c370:	b111      	cbz	r1, 801c378 <_reclaim_reent+0x50>
 801c372:	4620      	mov	r0, r4
 801c374:	f000 f88c 	bl	801c490 <_free_r>
 801c378:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c37a:	b111      	cbz	r1, 801c382 <_reclaim_reent+0x5a>
 801c37c:	4620      	mov	r0, r4
 801c37e:	f000 f887 	bl	801c490 <_free_r>
 801c382:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c384:	b111      	cbz	r1, 801c38c <_reclaim_reent+0x64>
 801c386:	4620      	mov	r0, r4
 801c388:	f000 f882 	bl	801c490 <_free_r>
 801c38c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801c38e:	b111      	cbz	r1, 801c396 <_reclaim_reent+0x6e>
 801c390:	4620      	mov	r0, r4
 801c392:	f000 f87d 	bl	801c490 <_free_r>
 801c396:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801c398:	b111      	cbz	r1, 801c3a0 <_reclaim_reent+0x78>
 801c39a:	4620      	mov	r0, r4
 801c39c:	f000 f878 	bl	801c490 <_free_r>
 801c3a0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801c3a2:	b111      	cbz	r1, 801c3aa <_reclaim_reent+0x82>
 801c3a4:	4620      	mov	r0, r4
 801c3a6:	f000 f873 	bl	801c490 <_free_r>
 801c3aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801c3ac:	b111      	cbz	r1, 801c3b4 <_reclaim_reent+0x8c>
 801c3ae:	4620      	mov	r0, r4
 801c3b0:	f000 f86e 	bl	801c490 <_free_r>
 801c3b4:	6a23      	ldr	r3, [r4, #32]
 801c3b6:	b14b      	cbz	r3, 801c3cc <_reclaim_reent+0xa4>
 801c3b8:	4620      	mov	r0, r4
 801c3ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c3be:	4718      	bx	r3
 801c3c0:	680e      	ldr	r6, [r1, #0]
 801c3c2:	4620      	mov	r0, r4
 801c3c4:	f000 f864 	bl	801c490 <_free_r>
 801c3c8:	4631      	mov	r1, r6
 801c3ca:	e7bb      	b.n	801c344 <_reclaim_reent+0x1c>
 801c3cc:	bd70      	pop	{r4, r5, r6, pc}
 801c3ce:	bf00      	nop
 801c3d0:	24000028 	.word	0x24000028

0801c3d4 <_kill_r>:
 801c3d4:	b538      	push	{r3, r4, r5, lr}
 801c3d6:	4d07      	ldr	r5, [pc, #28]	@ (801c3f4 <_kill_r+0x20>)
 801c3d8:	2300      	movs	r3, #0
 801c3da:	4604      	mov	r4, r0
 801c3dc:	4608      	mov	r0, r1
 801c3de:	4611      	mov	r1, r2
 801c3e0:	602b      	str	r3, [r5, #0]
 801c3e2:	f7e7 f87f 	bl	80034e4 <_kill>
 801c3e6:	1c43      	adds	r3, r0, #1
 801c3e8:	d102      	bne.n	801c3f0 <_kill_r+0x1c>
 801c3ea:	682b      	ldr	r3, [r5, #0]
 801c3ec:	b103      	cbz	r3, 801c3f0 <_kill_r+0x1c>
 801c3ee:	6023      	str	r3, [r4, #0]
 801c3f0:	bd38      	pop	{r3, r4, r5, pc}
 801c3f2:	bf00      	nop
 801c3f4:	240095c4 	.word	0x240095c4

0801c3f8 <_getpid_r>:
 801c3f8:	f7e7 b872 	b.w	80034e0 <_getpid>

0801c3fc <_sbrk_r>:
 801c3fc:	b538      	push	{r3, r4, r5, lr}
 801c3fe:	4d06      	ldr	r5, [pc, #24]	@ (801c418 <_sbrk_r+0x1c>)
 801c400:	2300      	movs	r3, #0
 801c402:	4604      	mov	r4, r0
 801c404:	4608      	mov	r0, r1
 801c406:	602b      	str	r3, [r5, #0]
 801c408:	f7e7 f87a 	bl	8003500 <_sbrk>
 801c40c:	1c43      	adds	r3, r0, #1
 801c40e:	d102      	bne.n	801c416 <_sbrk_r+0x1a>
 801c410:	682b      	ldr	r3, [r5, #0]
 801c412:	b103      	cbz	r3, 801c416 <_sbrk_r+0x1a>
 801c414:	6023      	str	r3, [r4, #0]
 801c416:	bd38      	pop	{r3, r4, r5, pc}
 801c418:	240095c4 	.word	0x240095c4

0801c41c <__errno>:
 801c41c:	4b01      	ldr	r3, [pc, #4]	@ (801c424 <__errno+0x8>)
 801c41e:	6818      	ldr	r0, [r3, #0]
 801c420:	4770      	bx	lr
 801c422:	bf00      	nop
 801c424:	24000028 	.word	0x24000028

0801c428 <__libc_init_array>:
 801c428:	b570      	push	{r4, r5, r6, lr}
 801c42a:	4d0d      	ldr	r5, [pc, #52]	@ (801c460 <__libc_init_array+0x38>)
 801c42c:	4c0d      	ldr	r4, [pc, #52]	@ (801c464 <__libc_init_array+0x3c>)
 801c42e:	1b64      	subs	r4, r4, r5
 801c430:	10a4      	asrs	r4, r4, #2
 801c432:	2600      	movs	r6, #0
 801c434:	42a6      	cmp	r6, r4
 801c436:	d109      	bne.n	801c44c <__libc_init_array+0x24>
 801c438:	4d0b      	ldr	r5, [pc, #44]	@ (801c468 <__libc_init_array+0x40>)
 801c43a:	4c0c      	ldr	r4, [pc, #48]	@ (801c46c <__libc_init_array+0x44>)
 801c43c:	f000 f872 	bl	801c524 <_init>
 801c440:	1b64      	subs	r4, r4, r5
 801c442:	10a4      	asrs	r4, r4, #2
 801c444:	2600      	movs	r6, #0
 801c446:	42a6      	cmp	r6, r4
 801c448:	d105      	bne.n	801c456 <__libc_init_array+0x2e>
 801c44a:	bd70      	pop	{r4, r5, r6, pc}
 801c44c:	f855 3b04 	ldr.w	r3, [r5], #4
 801c450:	4798      	blx	r3
 801c452:	3601      	adds	r6, #1
 801c454:	e7ee      	b.n	801c434 <__libc_init_array+0xc>
 801c456:	f855 3b04 	ldr.w	r3, [r5], #4
 801c45a:	4798      	blx	r3
 801c45c:	3601      	adds	r6, #1
 801c45e:	e7f2      	b.n	801c446 <__libc_init_array+0x1e>
 801c460:	0801cc20 	.word	0x0801cc20
 801c464:	0801cc20 	.word	0x0801cc20
 801c468:	0801cc20 	.word	0x0801cc20
 801c46c:	0801cc2c 	.word	0x0801cc2c

0801c470 <__retarget_lock_acquire_recursive>:
 801c470:	4770      	bx	lr

0801c472 <__retarget_lock_release_recursive>:
 801c472:	4770      	bx	lr

0801c474 <memcpy>:
 801c474:	440a      	add	r2, r1
 801c476:	4291      	cmp	r1, r2
 801c478:	f100 33ff 	add.w	r3, r0, #4294967295
 801c47c:	d100      	bne.n	801c480 <memcpy+0xc>
 801c47e:	4770      	bx	lr
 801c480:	b510      	push	{r4, lr}
 801c482:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c486:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c48a:	4291      	cmp	r1, r2
 801c48c:	d1f9      	bne.n	801c482 <memcpy+0xe>
 801c48e:	bd10      	pop	{r4, pc}

0801c490 <_free_r>:
 801c490:	b538      	push	{r3, r4, r5, lr}
 801c492:	4605      	mov	r5, r0
 801c494:	2900      	cmp	r1, #0
 801c496:	d041      	beq.n	801c51c <_free_r+0x8c>
 801c498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c49c:	1f0c      	subs	r4, r1, #4
 801c49e:	2b00      	cmp	r3, #0
 801c4a0:	bfb8      	it	lt
 801c4a2:	18e4      	addlt	r4, r4, r3
 801c4a4:	f7ff fee2 	bl	801c26c <__malloc_lock>
 801c4a8:	4a1d      	ldr	r2, [pc, #116]	@ (801c520 <_free_r+0x90>)
 801c4aa:	6813      	ldr	r3, [r2, #0]
 801c4ac:	b933      	cbnz	r3, 801c4bc <_free_r+0x2c>
 801c4ae:	6063      	str	r3, [r4, #4]
 801c4b0:	6014      	str	r4, [r2, #0]
 801c4b2:	4628      	mov	r0, r5
 801c4b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c4b8:	f7ff bede 	b.w	801c278 <__malloc_unlock>
 801c4bc:	42a3      	cmp	r3, r4
 801c4be:	d908      	bls.n	801c4d2 <_free_r+0x42>
 801c4c0:	6820      	ldr	r0, [r4, #0]
 801c4c2:	1821      	adds	r1, r4, r0
 801c4c4:	428b      	cmp	r3, r1
 801c4c6:	bf01      	itttt	eq
 801c4c8:	6819      	ldreq	r1, [r3, #0]
 801c4ca:	685b      	ldreq	r3, [r3, #4]
 801c4cc:	1809      	addeq	r1, r1, r0
 801c4ce:	6021      	streq	r1, [r4, #0]
 801c4d0:	e7ed      	b.n	801c4ae <_free_r+0x1e>
 801c4d2:	461a      	mov	r2, r3
 801c4d4:	685b      	ldr	r3, [r3, #4]
 801c4d6:	b10b      	cbz	r3, 801c4dc <_free_r+0x4c>
 801c4d8:	42a3      	cmp	r3, r4
 801c4da:	d9fa      	bls.n	801c4d2 <_free_r+0x42>
 801c4dc:	6811      	ldr	r1, [r2, #0]
 801c4de:	1850      	adds	r0, r2, r1
 801c4e0:	42a0      	cmp	r0, r4
 801c4e2:	d10b      	bne.n	801c4fc <_free_r+0x6c>
 801c4e4:	6820      	ldr	r0, [r4, #0]
 801c4e6:	4401      	add	r1, r0
 801c4e8:	1850      	adds	r0, r2, r1
 801c4ea:	4283      	cmp	r3, r0
 801c4ec:	6011      	str	r1, [r2, #0]
 801c4ee:	d1e0      	bne.n	801c4b2 <_free_r+0x22>
 801c4f0:	6818      	ldr	r0, [r3, #0]
 801c4f2:	685b      	ldr	r3, [r3, #4]
 801c4f4:	6053      	str	r3, [r2, #4]
 801c4f6:	4408      	add	r0, r1
 801c4f8:	6010      	str	r0, [r2, #0]
 801c4fa:	e7da      	b.n	801c4b2 <_free_r+0x22>
 801c4fc:	d902      	bls.n	801c504 <_free_r+0x74>
 801c4fe:	230c      	movs	r3, #12
 801c500:	602b      	str	r3, [r5, #0]
 801c502:	e7d6      	b.n	801c4b2 <_free_r+0x22>
 801c504:	6820      	ldr	r0, [r4, #0]
 801c506:	1821      	adds	r1, r4, r0
 801c508:	428b      	cmp	r3, r1
 801c50a:	bf04      	itt	eq
 801c50c:	6819      	ldreq	r1, [r3, #0]
 801c50e:	685b      	ldreq	r3, [r3, #4]
 801c510:	6063      	str	r3, [r4, #4]
 801c512:	bf04      	itt	eq
 801c514:	1809      	addeq	r1, r1, r0
 801c516:	6021      	streq	r1, [r4, #0]
 801c518:	6054      	str	r4, [r2, #4]
 801c51a:	e7ca      	b.n	801c4b2 <_free_r+0x22>
 801c51c:	bd38      	pop	{r3, r4, r5, pc}
 801c51e:	bf00      	nop
 801c520:	24009488 	.word	0x24009488

0801c524 <_init>:
 801c524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c526:	bf00      	nop
 801c528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c52a:	bc08      	pop	{r3}
 801c52c:	469e      	mov	lr, r3
 801c52e:	4770      	bx	lr

0801c530 <_fini>:
 801c530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c532:	bf00      	nop
 801c534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c536:	bc08      	pop	{r3}
 801c538:	469e      	mov	lr, r3
 801c53a:	4770      	bx	lr
