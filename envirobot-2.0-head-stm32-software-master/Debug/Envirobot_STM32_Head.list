
Envirobot_STM32_Head.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ba1c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f60  0801bcc0  0801bcc0  0002bcc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801dc20  0801dc20  0002dc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801dc28  0801dc28  0002dc28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0801dc30  0801dc30  0002dc30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0801dc38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006fac  24000078  0801dcb0  00030078  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24007024  0801dcb0  00037024  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00323dd1  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000e82b  00000000  00000000  00353e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0011459d  00000000  00000000  003626a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003b40  00000000  00000000  00476c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00015ee0  00000000  00000000  0047a780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00010fe3  00000000  00000000  00490660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0008fa1e  00000000  00000000  004a1643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0022e341  00000000  00000000  00531061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0075f3a2  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000cff8  00000000  00000000  0075f3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801bca4 	.word	0x0801bca4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0801bca4 	.word	0x0801bca4

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr

08000304 <__aeabi_uldivmod>:
 8000304:	b953      	cbnz	r3, 800031c <__aeabi_uldivmod+0x18>
 8000306:	b94a      	cbnz	r2, 800031c <__aeabi_uldivmod+0x18>
 8000308:	2900      	cmp	r1, #0
 800030a:	bf08      	it	eq
 800030c:	2800      	cmpeq	r0, #0
 800030e:	bf1c      	itt	ne
 8000310:	f04f 31ff 	movne.w	r1, #4294967295
 8000314:	f04f 30ff 	movne.w	r0, #4294967295
 8000318:	f000 b974 	b.w	8000604 <__aeabi_idiv0>
 800031c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000320:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000324:	f000 f806 	bl	8000334 <__udivmoddi4>
 8000328:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000330:	b004      	add	sp, #16
 8000332:	4770      	bx	lr

08000334 <__udivmoddi4>:
 8000334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000338:	9d08      	ldr	r5, [sp, #32]
 800033a:	4604      	mov	r4, r0
 800033c:	468e      	mov	lr, r1
 800033e:	2b00      	cmp	r3, #0
 8000340:	d14d      	bne.n	80003de <__udivmoddi4+0xaa>
 8000342:	428a      	cmp	r2, r1
 8000344:	4694      	mov	ip, r2
 8000346:	d969      	bls.n	800041c <__udivmoddi4+0xe8>
 8000348:	fab2 f282 	clz	r2, r2
 800034c:	b152      	cbz	r2, 8000364 <__udivmoddi4+0x30>
 800034e:	fa01 f302 	lsl.w	r3, r1, r2
 8000352:	f1c2 0120 	rsb	r1, r2, #32
 8000356:	fa20 f101 	lsr.w	r1, r0, r1
 800035a:	fa0c fc02 	lsl.w	ip, ip, r2
 800035e:	ea41 0e03 	orr.w	lr, r1, r3
 8000362:	4094      	lsls	r4, r2
 8000364:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000368:	0c21      	lsrs	r1, r4, #16
 800036a:	fbbe f6f8 	udiv	r6, lr, r8
 800036e:	fa1f f78c 	uxth.w	r7, ip
 8000372:	fb08 e316 	mls	r3, r8, r6, lr
 8000376:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800037a:	fb06 f107 	mul.w	r1, r6, r7
 800037e:	4299      	cmp	r1, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x64>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f106 30ff 	add.w	r0, r6, #4294967295
 800038a:	f080 811f 	bcs.w	80005cc <__udivmoddi4+0x298>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 811c 	bls.w	80005cc <__udivmoddi4+0x298>
 8000394:	3e02      	subs	r6, #2
 8000396:	4463      	add	r3, ip
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b2a4      	uxth	r4, r4
 800039c:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a0:	fb08 3310 	mls	r3, r8, r0, r3
 80003a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003a8:	fb00 f707 	mul.w	r7, r0, r7
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x92>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b8:	f080 810a 	bcs.w	80005d0 <__udivmoddi4+0x29c>
 80003bc:	42a7      	cmp	r7, r4
 80003be:	f240 8107 	bls.w	80005d0 <__udivmoddi4+0x29c>
 80003c2:	4464      	add	r4, ip
 80003c4:	3802      	subs	r0, #2
 80003c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ca:	1be4      	subs	r4, r4, r7
 80003cc:	2600      	movs	r6, #0
 80003ce:	b11d      	cbz	r5, 80003d8 <__udivmoddi4+0xa4>
 80003d0:	40d4      	lsrs	r4, r2
 80003d2:	2300      	movs	r3, #0
 80003d4:	e9c5 4300 	strd	r4, r3, [r5]
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	428b      	cmp	r3, r1
 80003e0:	d909      	bls.n	80003f6 <__udivmoddi4+0xc2>
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	f000 80ef 	beq.w	80005c6 <__udivmoddi4+0x292>
 80003e8:	2600      	movs	r6, #0
 80003ea:	e9c5 0100 	strd	r0, r1, [r5]
 80003ee:	4630      	mov	r0, r6
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	fab3 f683 	clz	r6, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d14a      	bne.n	8000494 <__udivmoddi4+0x160>
 80003fe:	428b      	cmp	r3, r1
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xd4>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 80f9 	bhi.w	80005fa <__udivmoddi4+0x2c6>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb61 0303 	sbc.w	r3, r1, r3
 800040e:	2001      	movs	r0, #1
 8000410:	469e      	mov	lr, r3
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e0      	beq.n	80003d8 <__udivmoddi4+0xa4>
 8000416:	e9c5 4e00 	strd	r4, lr, [r5]
 800041a:	e7dd      	b.n	80003d8 <__udivmoddi4+0xa4>
 800041c:	b902      	cbnz	r2, 8000420 <__udivmoddi4+0xec>
 800041e:	deff      	udf	#255	; 0xff
 8000420:	fab2 f282 	clz	r2, r2
 8000424:	2a00      	cmp	r2, #0
 8000426:	f040 8092 	bne.w	800054e <__udivmoddi4+0x21a>
 800042a:	eba1 010c 	sub.w	r1, r1, ip
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2601      	movs	r6, #1
 8000438:	0c20      	lsrs	r0, r4, #16
 800043a:	fbb1 f3f7 	udiv	r3, r1, r7
 800043e:	fb07 1113 	mls	r1, r7, r3, r1
 8000442:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000446:	fb0e f003 	mul.w	r0, lr, r3
 800044a:	4288      	cmp	r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x12c>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f103 38ff 	add.w	r8, r3, #4294967295
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x12a>
 8000458:	4288      	cmp	r0, r1
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2c0>
 800045e:	4643      	mov	r3, r8
 8000460:	1a09      	subs	r1, r1, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1110 	mls	r1, r7, r0, r1
 800046c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x156>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x154>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2ca>
 8000488:	4608      	mov	r0, r1
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000492:	e79c      	b.n	80003ce <__udivmoddi4+0x9a>
 8000494:	f1c6 0720 	rsb	r7, r6, #32
 8000498:	40b3      	lsls	r3, r6
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa20 f407 	lsr.w	r4, r0, r7
 80004a6:	fa01 f306 	lsl.w	r3, r1, r6
 80004aa:	431c      	orrs	r4, r3
 80004ac:	40f9      	lsrs	r1, r7
 80004ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b2:	fa00 f306 	lsl.w	r3, r0, r6
 80004b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80004ba:	0c20      	lsrs	r0, r4, #16
 80004bc:	fa1f fe8c 	uxth.w	lr, ip
 80004c0:	fb09 1118 	mls	r1, r9, r8, r1
 80004c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c8:	fb08 f00e 	mul.w	r0, r8, lr
 80004cc:	4288      	cmp	r0, r1
 80004ce:	fa02 f206 	lsl.w	r2, r2, r6
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b8>
 80004d4:	eb1c 0101 	adds.w	r1, ip, r1
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2bc>
 80004e0:	4288      	cmp	r0, r1
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2bc>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4461      	add	r1, ip
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004f4:	fb09 1110 	mls	r1, r9, r0, r1
 80004f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000500:	458e      	cmp	lr, r1
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1e2>
 8000504:	eb1c 0101 	adds.w	r1, ip, r1
 8000508:	f100 34ff 	add.w	r4, r0, #4294967295
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2b4>
 800050e:	458e      	cmp	lr, r1
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2b4>
 8000512:	3802      	subs	r0, #2
 8000514:	4461      	add	r1, ip
 8000516:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800051a:	fba0 9402 	umull	r9, r4, r0, r2
 800051e:	eba1 010e 	sub.w	r1, r1, lr
 8000522:	42a1      	cmp	r1, r4
 8000524:	46c8      	mov	r8, r9
 8000526:	46a6      	mov	lr, r4
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x2a4>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x2a0>
 800052c:	b15d      	cbz	r5, 8000546 <__udivmoddi4+0x212>
 800052e:	ebb3 0208 	subs.w	r2, r3, r8
 8000532:	eb61 010e 	sbc.w	r1, r1, lr
 8000536:	fa01 f707 	lsl.w	r7, r1, r7
 800053a:	fa22 f306 	lsr.w	r3, r2, r6
 800053e:	40f1      	lsrs	r1, r6
 8000540:	431f      	orrs	r7, r3
 8000542:	e9c5 7100 	strd	r7, r1, [r5]
 8000546:	2600      	movs	r6, #0
 8000548:	4631      	mov	r1, r6
 800054a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054e:	f1c2 0320 	rsb	r3, r2, #32
 8000552:	40d8      	lsrs	r0, r3
 8000554:	fa0c fc02 	lsl.w	ip, ip, r2
 8000558:	fa21 f303 	lsr.w	r3, r1, r3
 800055c:	4091      	lsls	r1, r2
 800055e:	4301      	orrs	r1, r0
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb3 f0f7 	udiv	r0, r3, r7
 800056c:	fb07 3610 	mls	r6, r7, r0, r3
 8000570:	0c0b      	lsrs	r3, r1, #16
 8000572:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000576:	fb00 f60e 	mul.w	r6, r0, lr
 800057a:	429e      	cmp	r6, r3
 800057c:	fa04 f402 	lsl.w	r4, r4, r2
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x260>
 8000582:	eb1c 0303 	adds.w	r3, ip, r3
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b8>
 800058c:	429e      	cmp	r6, r3
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b8>
 8000590:	3802      	subs	r0, #2
 8000592:	4463      	add	r3, ip
 8000594:	1b9b      	subs	r3, r3, r6
 8000596:	b289      	uxth	r1, r1
 8000598:	fbb3 f6f7 	udiv	r6, r3, r7
 800059c:	fb07 3316 	mls	r3, r7, r6, r3
 80005a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a4:	fb06 f30e 	mul.w	r3, r6, lr
 80005a8:	428b      	cmp	r3, r1
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x28a>
 80005ac:	eb1c 0101 	adds.w	r1, ip, r1
 80005b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2b0>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2b0>
 80005ba:	3e02      	subs	r6, #2
 80005bc:	4461      	add	r1, ip
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0x104>
 80005c6:	462e      	mov	r6, r5
 80005c8:	4628      	mov	r0, r5
 80005ca:	e705      	b.n	80003d8 <__udivmoddi4+0xa4>
 80005cc:	4606      	mov	r6, r0
 80005ce:	e6e3      	b.n	8000398 <__udivmoddi4+0x64>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6f8      	b.n	80003c6 <__udivmoddi4+0x92>
 80005d4:	454b      	cmp	r3, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f8>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005e0:	3801      	subs	r0, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f8>
 80005e4:	4646      	mov	r6, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x28a>
 80005e8:	4620      	mov	r0, r4
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1e2>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x260>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b8>
 80005f4:	3b02      	subs	r3, #2
 80005f6:	4461      	add	r1, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x12c>
 80005fa:	4630      	mov	r0, r6
 80005fc:	e709      	b.n	8000412 <__udivmoddi4+0xde>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x156>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060c:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	2400      	movs	r4, #0
 8000610:	9407      	str	r4, [sp, #28]
 8000612:	9408      	str	r4, [sp, #32]
 8000614:	9409      	str	r4, [sp, #36]	; 0x24
 8000616:	940a      	str	r4, [sp, #40]	; 0x28
 8000618:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800061a:	4b7d      	ldr	r3, [pc, #500]	; (8000810 <_ZL12MX_GPIO_Initv+0x208>)
 800061c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000620:	f042 0210 	orr.w	r2, r2, #16
 8000624:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000628:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800062c:	f002 0210 	and.w	r2, r2, #16
 8000630:	9201      	str	r2, [sp, #4]
 8000632:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000634:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000638:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800063c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000640:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000644:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000648:	9202      	str	r2, [sp, #8]
 800064a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000650:	f042 0201 	orr.w	r2, r2, #1
 8000654:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000658:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800065c:	f002 0201 	and.w	r2, r2, #1
 8000660:	9203      	str	r2, [sp, #12]
 8000662:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000664:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000668:	f042 0204 	orr.w	r2, r2, #4
 800066c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000670:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000674:	f002 0204 	and.w	r2, r2, #4
 8000678:	9204      	str	r2, [sp, #16]
 800067a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000680:	f042 0202 	orr.w	r2, r2, #2
 8000684:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000688:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800068c:	f002 0202 	and.w	r2, r2, #2
 8000690:	9205      	str	r2, [sp, #20]
 8000692:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000694:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000698:	f042 0208 	orr.w	r2, r2, #8
 800069c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a4:	f003 0308 	and.w	r3, r3, #8
 80006a8:	9306      	str	r3, [sp, #24]
 80006aa:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_CM4_Pin|nBT_CM4_Pin|nWL_CM4_Pin, GPIO_PIN_SET);
 80006ac:	4e59      	ldr	r6, [pc, #356]	; (8000814 <_ZL12MX_GPIO_Initv+0x20c>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	2134      	movs	r1, #52	; 0x34
 80006b2:	4630      	mov	r0, r6
 80006b4:	f006 f932 	bl	800691c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STOP_CM4_Pin|LED_STATUS_Pin|LED_ACTIVITY_Pin|LED_FAULT_Pin
 80006b8:	4622      	mov	r2, r4
 80006ba:	f64f 0140 	movw	r1, #63552	; 0xf840
 80006be:	4630      	mov	r0, r6
 80006c0:	f006 f92c 	bl	800691c <HAL_GPIO_WritePin>
                          |LED_USER1_Pin|LED_USER2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRST_IMU_GPIO_Port, nRST_IMU_Pin, GPIO_PIN_SET);
 80006c4:	f8df b158 	ldr.w	fp, [pc, #344]	; 8000820 <_ZL12MX_GPIO_Initv+0x218>
 80006c8:	2201      	movs	r2, #1
 80006ca:	2102      	movs	r1, #2
 80006cc:	4658      	mov	r0, fp
 80006ce:	f006 f925 	bl	800691c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WDISABLE_4G_GPIO_Port, WDISABLE_4G_Pin, GPIO_PIN_SET);
 80006d2:	f8df a150 	ldr.w	sl, [pc, #336]	; 8000824 <_ZL12MX_GPIO_Initv+0x21c>
 80006d6:	2201      	movs	r2, #1
 80006d8:	2120      	movs	r1, #32
 80006da:	4650      	mov	r0, sl
 80006dc:	f006 f91e 	bl	800691c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PERST_4G_GPIO_Port, PERST_4G_Pin, GPIO_PIN_SET);
 80006e0:	4d4d      	ldr	r5, [pc, #308]	; (8000818 <_ZL12MX_GPIO_Initv+0x210>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	2102      	movs	r1, #2
 80006e6:	4628      	mov	r0, r5
 80006e8:	f006 f918 	bl	800691c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_USER3_Pin|LED_UART_CM4_Pin, GPIO_PIN_RESET);
 80006ec:	4622      	mov	r2, r4
 80006ee:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80006f2:	4628      	mov	r0, r5
 80006f4:	f006 f912 	bl	800691c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SW_OUTPUT_Pin|SW_OVERWRITE_Pin|LED_UART_BACK_Pin|LED_FDCAN2_Pin
 80006f8:	4f48      	ldr	r7, [pc, #288]	; (800081c <_ZL12MX_GPIO_Initv+0x214>)
 80006fa:	4622      	mov	r2, r4
 80006fc:	f44f 614f 	mov.w	r1, #3312	; 0xcf0
 8000700:	4638      	mov	r0, r7
 8000702:	f006 f90b 	bl	800691c <HAL_GPIO_WritePin>
                          |LED_FDCAN1_Pin|LED_GNSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_CM4_Pin nBT_CM4_Pin nWL_CM4_Pin */
  GPIO_InitStruct.Pin = EN_CM4_Pin|nBT_CM4_Pin|nWL_CM4_Pin;
 8000706:	2334      	movs	r3, #52	; 0x34
 8000708:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800070a:	f04f 0911 	mov.w	r9, #17
 800070e:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000716:	a907      	add	r1, sp, #28
 8000718:	4630      	mov	r0, r6
 800071a:	f005 ffef 	bl	80066fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG_CM4_Pin */
  GPIO_InitStruct.Pin = PG_CM4_Pin;
 800071e:	2308      	movs	r3, #8
 8000720:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000722:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(PG_CM4_GPIO_Port, &GPIO_InitStruct);
 8000726:	a907      	add	r1, sp, #28
 8000728:	4630      	mov	r0, r6
 800072a:	f005 ffe7 	bl	80066fc <HAL_GPIO_Init>

  /*Configure GPIO pins : STOP_CM4_Pin LED_STATUS_Pin LED_ACTIVITY_Pin LED_FAULT_Pin
                           LED_USER1_Pin LED_USER2_Pin */
  GPIO_InitStruct.Pin = STOP_CM4_Pin|LED_STATUS_Pin|LED_ACTIVITY_Pin|LED_FAULT_Pin
 800072e:	f64f 0340 	movw	r3, #63552	; 0xf840
 8000732:	9307      	str	r3, [sp, #28]
                          |LED_USER1_Pin|LED_USER2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	f04f 0801 	mov.w	r8, #1
 8000738:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000740:	a907      	add	r1, sp, #28
 8000742:	4630      	mov	r0, r6
 8000744:	f005 ffda 	bl	80066fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DRDY_IMU_Pin SD_PRESENCE_Pin */
  GPIO_InitStruct.Pin = DRDY_IMU_Pin|SD_PRESENCE_Pin;
 8000748:	f248 0301 	movw	r3, #32769	; 0x8001
 800074c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	a907      	add	r1, sp, #28
 8000754:	4658      	mov	r0, fp
 8000756:	f005 ffd1 	bl	80066fc <HAL_GPIO_Init>

  /*Configure GPIO pin : nRST_IMU_Pin */
  GPIO_InitStruct.Pin = nRST_IMU_Pin;
 800075a:	2602      	movs	r6, #2
 800075c:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800075e:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(nRST_IMU_GPIO_Port, &GPIO_InitStruct);
 8000766:	a907      	add	r1, sp, #28
 8000768:	4658      	mov	r0, fp
 800076a:	f005 ffc7 	bl	80066fc <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKE_4G_Pin */
  GPIO_InitStruct.Pin = WAKE_4G_Pin;
 800076e:	2310      	movs	r3, #16
 8000770:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000772:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000774:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(WAKE_4G_GPIO_Port, &GPIO_InitStruct);
 8000778:	a907      	add	r1, sp, #28
 800077a:	4650      	mov	r0, sl
 800077c:	f005 ffbe 	bl	80066fc <HAL_GPIO_Init>

  /*Configure GPIO pin : WDISABLE_4G_Pin */
  GPIO_InitStruct.Pin = WDISABLE_4G_Pin;
 8000780:	2320      	movs	r3, #32
 8000782:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000784:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(WDISABLE_4G_GPIO_Port, &GPIO_InitStruct);
 800078c:	a907      	add	r1, sp, #28
 800078e:	4650      	mov	r0, sl
 8000790:	f005 ffb4 	bl	80066fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PERST_4G_Pin */
  GPIO_InitStruct.Pin = PERST_4G_Pin;
 8000794:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000796:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(PERST_4G_GPIO_Port, &GPIO_InitStruct);
 800079e:	a907      	add	r1, sp, #28
 80007a0:	4628      	mov	r0, r5
 80007a2:	f005 ffab 	bl	80066fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DTR_4G_Pin WATER_DETECTION_Pin */
  GPIO_InitStruct.Pin = DTR_4G_Pin|WATER_DETECTION_Pin;
 80007a6:	2324      	movs	r3, #36	; 0x24
 80007a8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007aa:	f44f 1688 	mov.w	r6, #1114112	; 0x110000
 80007ae:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b2:	a907      	add	r1, sp, #28
 80007b4:	4628      	mov	r0, r5
 80007b6:	f005 ffa1 	bl	80066fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_USER3_Pin LED_UART_CM4_Pin */
  GPIO_InitStruct.Pin = LED_USER3_Pin|LED_UART_CM4_Pin;
 80007ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007be:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	a907      	add	r1, sp, #28
 80007ca:	4628      	mov	r0, r5
 80007cc:	f005 ff96 	bl	80066fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_OUTPUT_Pin SW_OVERWRITE_Pin LED_UART_BACK_Pin LED_FDCAN2_Pin
                           LED_FDCAN1_Pin LED_GNSS_Pin */
  GPIO_InitStruct.Pin = SW_OUTPUT_Pin|SW_OVERWRITE_Pin|LED_UART_BACK_Pin|LED_FDCAN2_Pin
 80007d0:	f44f 634f 	mov.w	r3, #3312	; 0xcf0
 80007d4:	9307      	str	r3, [sp, #28]
                          |LED_FDCAN1_Pin|LED_GNSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007de:	a907      	add	r1, sp, #28
 80007e0:	4638      	mov	r0, r7
 80007e2:	f005 ff8b 	bl	80066fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_INPUT_Pin */
  GPIO_InitStruct.Pin = SW_INPUT_Pin;
 80007e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ea:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(SW_INPUT_GPIO_Port, &GPIO_InitStruct);
 80007f0:	a907      	add	r1, sp, #28
 80007f2:	4638      	mov	r0, r7
 80007f4:	f005 ff82 	bl	80066fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RS485_Pin */
  GPIO_InitStruct.Pin = LED_RS485_Pin;
 80007f8:	2308      	movs	r3, #8
 80007fa:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fc:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(LED_RS485_GPIO_Port, &GPIO_InitStruct);
 8000800:	a907      	add	r1, sp, #28
 8000802:	4638      	mov	r0, r7
 8000804:	f005 ff7a 	bl	80066fc <HAL_GPIO_Init>

}
 8000808:	b00d      	add	sp, #52	; 0x34
 800080a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800080e:	bf00      	nop
 8000810:	58024400 	.word	0x58024400
 8000814:	58021000 	.word	0x58021000
 8000818:	58020400 	.word	0x58020400
 800081c:	58020c00 	.word	0x58020c00
 8000820:	58020000 	.word	0x58020000
 8000824:	58020800 	.word	0x58020800

08000828 <_ZL11MX_DMA_Initv>:
{
 8000828:	b500      	push	{lr}
 800082a:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082c:	4b4d      	ldr	r3, [pc, #308]	; (8000964 <_ZL11MX_DMA_Initv+0x13c>)
 800082e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000832:	f042 0201 	orr.w	r2, r2, #1
 8000836:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800083a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800083e:	f002 0201 	and.w	r2, r2, #1
 8000842:	9200      	str	r2, [sp, #0]
 8000844:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000846:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800084a:	f042 0202 	orr.w	r2, r2, #2
 800084e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000852:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	9301      	str	r3, [sp, #4]
 800085c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	200b      	movs	r0, #11
 8000864:	f003 fda2 	bl	80043ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000868:	200b      	movs	r0, #11
 800086a:	f003 fdd5 	bl	8004418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2105      	movs	r1, #5
 8000872:	200c      	movs	r0, #12
 8000874:	f003 fd9a 	bl	80043ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000878:	200c      	movs	r0, #12
 800087a:	f003 fdcd 	bl	8004418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	200d      	movs	r0, #13
 8000884:	f003 fd92 	bl	80043ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000888:	200d      	movs	r0, #13
 800088a:	f003 fdc5 	bl	8004418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	200e      	movs	r0, #14
 8000894:	f003 fd8a 	bl	80043ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000898:	200e      	movs	r0, #14
 800089a:	f003 fdbd 	bl	8004418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	200f      	movs	r0, #15
 80008a4:	f003 fd82 	bl	80043ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80008a8:	200f      	movs	r0, #15
 80008aa:	f003 fdb5 	bl	8004418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	2010      	movs	r0, #16
 80008b4:	f003 fd7a 	bl	80043ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008b8:	2010      	movs	r0, #16
 80008ba:	f003 fdad 	bl	8004418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	2011      	movs	r0, #17
 80008c4:	f003 fd72 	bl	80043ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80008c8:	2011      	movs	r0, #17
 80008ca:	f003 fda5 	bl	8004418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	202f      	movs	r0, #47	; 0x2f
 80008d4:	f003 fd6a 	bl	80043ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80008d8:	202f      	movs	r0, #47	; 0x2f
 80008da:	f003 fd9d 	bl	8004418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2105      	movs	r1, #5
 80008e2:	2038      	movs	r0, #56	; 0x38
 80008e4:	f003 fd62 	bl	80043ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008e8:	2038      	movs	r0, #56	; 0x38
 80008ea:	f003 fd95 	bl	8004418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2105      	movs	r1, #5
 80008f2:	2039      	movs	r0, #57	; 0x39
 80008f4:	f003 fd5a 	bl	80043ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008f8:	2039      	movs	r0, #57	; 0x39
 80008fa:	f003 fd8d 	bl	8004418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2105      	movs	r1, #5
 8000902:	203a      	movs	r0, #58	; 0x3a
 8000904:	f003 fd52 	bl	80043ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000908:	203a      	movs	r0, #58	; 0x3a
 800090a:	f003 fd85 	bl	8004418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2105      	movs	r1, #5
 8000912:	203b      	movs	r0, #59	; 0x3b
 8000914:	f003 fd4a 	bl	80043ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000918:	203b      	movs	r0, #59	; 0x3b
 800091a:	f003 fd7d 	bl	8004418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2105      	movs	r1, #5
 8000922:	203c      	movs	r0, #60	; 0x3c
 8000924:	f003 fd42 	bl	80043ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000928:	203c      	movs	r0, #60	; 0x3c
 800092a:	f003 fd75 	bl	8004418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2105      	movs	r1, #5
 8000932:	2044      	movs	r0, #68	; 0x44
 8000934:	f003 fd3a 	bl	80043ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000938:	2044      	movs	r0, #68	; 0x44
 800093a:	f003 fd6d 	bl	8004418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2105      	movs	r1, #5
 8000942:	2045      	movs	r0, #69	; 0x45
 8000944:	f003 fd32 	bl	80043ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000948:	2045      	movs	r0, #69	; 0x45
 800094a:	f003 fd65 	bl	8004418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2105      	movs	r1, #5
 8000952:	2046      	movs	r0, #70	; 0x46
 8000954:	f003 fd2a 	bl	80043ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000958:	2046      	movs	r0, #70	; 0x46
 800095a:	f003 fd5d 	bl	8004418 <HAL_NVIC_EnableIRQ>
}
 800095e:	b003      	add	sp, #12
 8000960:	f85d fb04 	ldr.w	pc, [sp], #4
 8000964:	58024400 	.word	0x58024400

08000968 <_Z14TrajectoryTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TrajectoryTask */
void TrajectoryTask(void *argument)
{
 8000968:	b508      	push	{r3, lr}
  for(;;)
  {
#ifdef USE_MOTION_GENERATOR
	  motion_generator.Spin();
#else
	  osDelay(1000);
 800096a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096e:	f00b ff39 	bl	800c7e4 <osDelay>
  for(;;)
 8000972:	e7fa      	b.n	800096a <_Z14TrajectoryTaskPv+0x2>

08000974 <_Z11SensorsTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SensorsTask */
void SensorsTask(void *argument)
{
 8000974:	b508      	push	{r3, lr}
  for(;;)
  {
#ifdef USE_SENSORS
	  sensors.Spin();
#else
	  osDelay(1000);
 8000976:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800097a:	f00b ff33 	bl	800c7e4 <osDelay>
  for(;;)
 800097e:	e7fa      	b.n	8000976 <_Z11SensorsTaskPv+0x2>

08000980 <_Z17CommunicationTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CommunicationTask */
void CommunicationTask(void *argument)
{
 8000980:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CommunicationTask */
  /* Infinite loop */
  for(;;)
  {
	  communication.Spin();
 8000982:	4802      	ldr	r0, [pc, #8]	; (800098c <_Z17CommunicationTaskPv+0xc>)
 8000984:	f011 f818 	bl	80119b8 <_ZN13Communication4SpinEv>
  for(;;)
 8000988:	e7fb      	b.n	8000982 <_Z17CommunicationTaskPv+0x2>
 800098a:	bf00      	nop
 800098c:	240000a4 	.word	0x240000a4

08000990 <_Z8LEDsTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LEDsTask */
void LEDsTask(void *argument)
{
 8000990:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LEDsTask */
  /* Infinite loop */
  for(;;)
  {
#ifdef USE_LEDS
	  leds.Spin();
 8000992:	4802      	ldr	r0, [pc, #8]	; (800099c <_Z8LEDsTaskPv+0xc>)
 8000994:	f015 fb94 	bl	80160c0 <_ZN4LEDS4SpinEv>
  for(;;)
 8000998:	e7fb      	b.n	8000992 <_Z8LEDsTaskPv+0x2>
 800099a:	bf00      	nop
 800099c:	24001040 	.word	0x24001040

080009a0 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb>:
	}
	return NULL;
}

template<typename H>
uint8_t TemplateCommunicationProtocol<H>::GetID(void* pointer, bool* success) {
 80009a0:	b510      	push	{r4, lr}
 80009a2:	468e      	mov	lr, r1
	uint8_t index = 0;
	for (H* interface : interfaces) {
 80009a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
 80009a6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	uint8_t index = 0;
 80009a8:	2100      	movs	r1, #0
 80009aa:	e003      	b.n	80009b4 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x14>
		if (interface == pointer)
			return GetIDFromIndex(index, success);
		index += 1;
 80009ac:	3101      	adds	r1, #1
 80009ae:	b2c9      	uxtb	r1, r1

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
      {
	++_M_current;
 80009b0:	f10c 0304 	add.w	r3, ip, #4
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 80009b4:	469c      	mov	ip, r3
	for (H* interface : interfaces) {
 80009b6:	429c      	cmp	r4, r3
 80009b8:	d005      	beq.n	80009c6 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x26>
 80009ba:	681b      	ldr	r3, [r3, #0]
		if (interface == pointer)
 80009bc:	4573      	cmp	r3, lr
 80009be:	d1f5      	bne.n	80009ac <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0xc>
			return GetIDFromIndex(index, success);
 80009c0:	f017 fa58 	bl	8017e74 <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>
 80009c4:	e001      	b.n	80009ca <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x2a>
	}
	*success = false;
 80009c6:	2000      	movs	r0, #0
 80009c8:	7010      	strb	r0, [r2, #0]
	return 0;
}
 80009ca:	bd10      	pop	{r4, pc}

080009cc <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb>:
uint8_t TemplateCommunicationProtocol<H>::GetID(void* pointer, bool* success) {
 80009cc:	b510      	push	{r4, lr}
 80009ce:	468e      	mov	lr, r1
	for (H* interface : interfaces) {
 80009d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
      : _M_current(__i) { }
 80009d2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	uint8_t index = 0;
 80009d4:	2100      	movs	r1, #0
 80009d6:	e003      	b.n	80009e0 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x14>
		index += 1;
 80009d8:	3101      	adds	r1, #1
 80009da:	b2c9      	uxtb	r1, r1
	++_M_current;
 80009dc:	f10c 0304 	add.w	r3, ip, #4
    { return __lhs.base() != __rhs.base(); }
 80009e0:	469c      	mov	ip, r3
	for (H* interface : interfaces) {
 80009e2:	429c      	cmp	r4, r3
 80009e4:	d005      	beq.n	80009f2 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x26>
 80009e6:	681b      	ldr	r3, [r3, #0]
		if (interface == pointer)
 80009e8:	4573      	cmp	r3, lr
 80009ea:	d1f5      	bne.n	80009d8 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0xc>
			return GetIDFromIndex(index, success);
 80009ec:	f017 fa42 	bl	8017e74 <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>
 80009f0:	e001      	b.n	80009f6 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x2a>
	*success = false;
 80009f2:	2000      	movs	r0, #0
 80009f4:	7010      	strb	r0, [r2, #0]
}
 80009f6:	bd10      	pop	{r4, pc}

080009f8 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80009f8:	b530      	push	{r4, r5, lr}
 80009fa:	b083      	sub	sp, #12
 80009fc:	4601      	mov	r1, r0
	uint8_t ID = communication.GetID((void*) huart, &success);
 80009fe:	f10d 0207 	add.w	r2, sp, #7
 8000a02:	480e      	ldr	r0, [pc, #56]	; (8000a3c <HAL_UART_ErrorCallback+0x44>)
 8000a04:	f00e f8b7 	bl	800eb76 <_ZN13Communication5GetIDEPvPb>
	if (!success) {return;}
 8000a08:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000a0c:	b90b      	cbnz	r3, 8000a12 <HAL_UART_ErrorCallback+0x1a>
}
 8000a0e:	b003      	add	sp, #12
 8000a10:	bd30      	pop	{r4, r5, pc}
 8000a12:	4604      	mov	r4, r0
	std::vector<uint8_t>* buffer = communication.GetBuffer(ID, &success);
 8000a14:	4d09      	ldr	r5, [pc, #36]	; (8000a3c <HAL_UART_ErrorCallback+0x44>)
 8000a16:	f10d 0207 	add.w	r2, sp, #7
 8000a1a:	4601      	mov	r1, r0
 8000a1c:	4628      	mov	r0, r5
 8000a1e:	f00e f8c0 	bl	800eba2 <_ZN13Communication9GetBufferEhPb>
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 8000a22:	f10d 0207 	add.w	r2, sp, #7
 8000a26:	4621      	mov	r1, r4
 8000a28:	4628      	mov	r0, r5
 8000a2a:	f00e f8c4 	bl	800ebb6 <_ZN13Communication14GetBufferIndexEhPb>
	*buffer_index = 0; // resets the buffer index to the DMA pointer
 8000a2e:	2300      	movs	r3, #0
 8000a30:	8003      	strh	r3, [r0, #0]
	communication.ActivateReception(ID);
 8000a32:	4621      	mov	r1, r4
 8000a34:	4628      	mov	r0, r5
 8000a36:	f00e f8da 	bl	800ebee <_ZN13Communication17ActivateReceptionEh>
 8000a3a:	e7e8      	b.n	8000a0e <HAL_UART_ErrorCallback+0x16>
 8000a3c:	240000a4 	.word	0x240000a4

08000a40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a40:	b510      	push	{r4, lr}
 8000a42:	4604      	mov	r4, r0
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000a44:	6802      	ldr	r2, [r0, #0]
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d005      	beq.n	8000a58 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
  if (hardware_delay.AssignedTimer(htim)) {
 8000a4c:	4621      	mov	r1, r4
 8000a4e:	4807      	ldr	r0, [pc, #28]	; (8000a6c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a50:	f015 fa11 	bl	8015e76 <_ZN13HardwareDelay13AssignedTimerEP17TIM_HandleTypeDef>
 8000a54:	b918      	cbnz	r0, 8000a5e <HAL_TIM_PeriodElapsedCallback+0x1e>
    hardware_delay.TriggeredDelay();
  }
  /* USER CODE END Callback 1 */
}
 8000a56:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8000a58:	f002 fec2 	bl	80037e0 <HAL_IncTick>
 8000a5c:	e7f6      	b.n	8000a4c <HAL_TIM_PeriodElapsedCallback+0xc>
    hardware_delay.TriggeredDelay();
 8000a5e:	4803      	ldr	r0, [pc, #12]	; (8000a6c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a60:	f015 fae8 	bl	8016034 <_ZN13HardwareDelay14TriggeredDelayEv>
}
 8000a64:	e7f7      	b.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x16>
 8000a66:	bf00      	nop
 8000a68:	40000c00 	.word	0x40000c00
 8000a6c:	240001c8 	.word	0x240001c8

08000a70 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <Error_Handler+0x2>

08000a74 <_ZL12MX_ADC1_Initv>:
{
 8000a74:	b500      	push	{lr}
 8000a76:	b08b      	sub	sp, #44	; 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 8000a78:	2300      	movs	r3, #0
 8000a7a:	9307      	str	r3, [sp, #28]
 8000a7c:	9308      	str	r3, [sp, #32]
 8000a7e:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	9302      	str	r3, [sp, #8]
 8000a86:	9303      	str	r3, [sp, #12]
 8000a88:	9304      	str	r3, [sp, #16]
 8000a8a:	9305      	str	r3, [sp, #20]
 8000a8c:	9306      	str	r3, [sp, #24]
  hadc1.Instance = ADC1;
 8000a8e:	481e      	ldr	r0, [pc, #120]	; (8000b08 <_ZL12MX_ADC1_Initv+0x94>)
 8000a90:	4a1e      	ldr	r2, [pc, #120]	; (8000b0c <_ZL12MX_ADC1_Initv+0x98>)
 8000a92:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000a94:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a98:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a9a:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a9c:	60c3      	str	r3, [r0, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	6102      	str	r2, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aa2:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aa4:	7543      	strb	r3, [r0, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	6182      	str	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aaa:	7703      	strb	r3, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aac:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aae:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ab0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ab2:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ab4:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ab6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aba:	f003 fa2d 	bl	8003f18 <HAL_ADC_Init>
 8000abe:	b9e8      	cbnz	r0, 8000afc <_ZL12MX_ADC1_Initv+0x88>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ac4:	a907      	add	r1, sp, #28
 8000ac6:	4810      	ldr	r0, [pc, #64]	; (8000b08 <_ZL12MX_ADC1_Initv+0x94>)
 8000ac8:	f003 fbac 	bl	8004224 <HAL_ADCEx_MultiModeConfigChannel>
 8000acc:	b9c0      	cbnz	r0, 8000b00 <_ZL12MX_ADC1_Initv+0x8c>
  sConfig.Channel = ADC_CHANNEL_18;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <_ZL12MX_ADC1_Initv+0x9c>)
 8000ad0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad2:	2306      	movs	r3, #6
 8000ad4:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ada:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ade:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	9305      	str	r3, [sp, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ae8:	f88d 3019 	strb.w	r3, [sp, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aec:	4669      	mov	r1, sp
 8000aee:	4806      	ldr	r0, [pc, #24]	; (8000b08 <_ZL12MX_ADC1_Initv+0x94>)
 8000af0:	f002 fea2 	bl	8003838 <HAL_ADC_ConfigChannel>
 8000af4:	b930      	cbnz	r0, 8000b04 <_ZL12MX_ADC1_Initv+0x90>
}
 8000af6:	b00b      	add	sp, #44	; 0x2c
 8000af8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000afc:	f7ff ffb8 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000b00:	f7ff ffb6 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000b04:	f7ff ffb4 	bl	8000a70 <Error_Handler>
 8000b08:	24000100 	.word	0x24000100
 8000b0c:	40022000 	.word	0x40022000
 8000b10:	4b840000 	.word	0x4b840000

08000b14 <_ZL14MX_FDCAN1_Initv>:
{
 8000b14:	b510      	push	{r4, lr}
  hfdcan1.Instance = FDCAN1;
 8000b16:	4817      	ldr	r0, [pc, #92]	; (8000b74 <_ZL14MX_FDCAN1_Initv+0x60>)
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <_ZL14MX_FDCAN1_Initv+0x64>)
 8000b1a:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000b1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b20:	6083      	str	r3, [r0, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b26:	7403      	strb	r3, [r0, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b28:	7443      	strb	r3, [r0, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b2a:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	6142      	str	r2, [r0, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 20;
 8000b30:	2114      	movs	r1, #20
 8000b32:	6181      	str	r1, [r0, #24]
  hfdcan1.Init.NominalTimeSeg1 = 79;
 8000b34:	244f      	movs	r4, #79	; 0x4f
 8000b36:	61c4      	str	r4, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 20;
 8000b38:	6201      	str	r1, [r0, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b3a:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 21;
 8000b40:	2115      	movs	r1, #21
 8000b42:	62c1      	str	r1, [r0, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 8000b44:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000b46:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b48:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000b4a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 10;
 8000b4c:	210a      	movs	r1, #10
 8000b4e:	6401      	str	r1, [r0, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8000b50:	2212      	movs	r2, #18
 8000b52:	6442      	str	r2, [r0, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b54:	6483      	str	r3, [r0, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b56:	2404      	movs	r4, #4
 8000b58:	64c4      	str	r4, [r0, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b5a:	6503      	str	r3, [r0, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b5c:	6544      	str	r4, [r0, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b5e:	6583      	str	r3, [r0, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b60:	65c3      	str	r3, [r0, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 10;
 8000b62:	6601      	str	r1, [r0, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b64:	6643      	str	r3, [r0, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 8000b66:	6682      	str	r2, [r0, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b68:	f005 f938 	bl	8005ddc <HAL_FDCAN_Init>
 8000b6c:	b900      	cbnz	r0, 8000b70 <_ZL14MX_FDCAN1_Initv+0x5c>
}
 8000b6e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000b70:	f7ff ff7e 	bl	8000a70 <Error_Handler>
 8000b74:	24000964 	.word	0x24000964
 8000b78:	4000a000 	.word	0x4000a000

08000b7c <_ZL14MX_FDCAN2_Initv>:
{
 8000b7c:	b510      	push	{r4, lr}
  hfdcan2.Instance = FDCAN2;
 8000b7e:	4818      	ldr	r0, [pc, #96]	; (8000be0 <_ZL14MX_FDCAN2_Initv+0x64>)
 8000b80:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <_ZL14MX_FDCAN2_Initv+0x68>)
 8000b82:	6003      	str	r3, [r0, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000b84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b88:	6083      	str	r3, [r0, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000b8e:	7403      	strb	r3, [r0, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000b90:	7443      	strb	r3, [r0, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000b92:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000b94:	2201      	movs	r2, #1
 8000b96:	6142      	str	r2, [r0, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 20;
 8000b98:	2114      	movs	r1, #20
 8000b9a:	6181      	str	r1, [r0, #24]
  hfdcan2.Init.NominalTimeSeg1 = 79;
 8000b9c:	244f      	movs	r4, #79	; 0x4f
 8000b9e:	61c4      	str	r4, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 20;
 8000ba0:	6201      	str	r1, [r0, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000ba2:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 3;
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 21;
 8000ba8:	2115      	movs	r1, #21
 8000baa:	62c1      	str	r1, [r0, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 3;
 8000bac:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 360;
 8000bae:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000bb2:	6342      	str	r2, [r0, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000bb4:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000bb6:	63c3      	str	r3, [r0, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 10;
 8000bb8:	210a      	movs	r1, #10
 8000bba:	6401      	str	r1, [r0, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8000bbc:	2212      	movs	r2, #18
 8000bbe:	6442      	str	r2, [r0, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000bc0:	6483      	str	r3, [r0, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000bc2:	2404      	movs	r4, #4
 8000bc4:	64c4      	str	r4, [r0, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000bc6:	6503      	str	r3, [r0, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000bc8:	6544      	str	r4, [r0, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000bca:	6583      	str	r3, [r0, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000bcc:	65c3      	str	r3, [r0, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 10;
 8000bce:	6601      	str	r1, [r0, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bd0:	6643      	str	r3, [r0, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 8000bd2:	6682      	str	r2, [r0, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000bd4:	f005 f902 	bl	8005ddc <HAL_FDCAN_Init>
 8000bd8:	b900      	cbnz	r0, 8000bdc <_ZL14MX_FDCAN2_Initv+0x60>
}
 8000bda:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000bdc:	f7ff ff48 	bl	8000a70 <Error_Handler>
 8000be0:	24000a04 	.word	0x24000a04
 8000be4:	4000a400 	.word	0x4000a400

08000be8 <_ZL12MX_I2C1_Initv>:
{
 8000be8:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8000bea:	4813      	ldr	r0, [pc, #76]	; (8000c38 <_ZL12MX_I2C1_Initv+0x50>)
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <_ZL12MX_I2C1_Initv+0x54>)
 8000bee:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000bf0:	f1a3 6378 	sub.w	r3, r3, #260046848	; 0xf800000
 8000bf4:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 8000bf8:	f6a3 634f 	subw	r3, r3, #3663	; 0xe4f
 8000bfc:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c02:	2201      	movs	r2, #1
 8000c04:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c06:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c08:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c0a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c0c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c0e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c10:	f006 f810 	bl	8006c34 <HAL_I2C_Init>
 8000c14:	b950      	cbnz	r0, 8000c2c <_ZL12MX_I2C1_Initv+0x44>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c16:	2100      	movs	r1, #0
 8000c18:	4807      	ldr	r0, [pc, #28]	; (8000c38 <_ZL12MX_I2C1_Initv+0x50>)
 8000c1a:	f006 f9fd 	bl	8007018 <HAL_I2CEx_ConfigAnalogFilter>
 8000c1e:	b938      	cbnz	r0, 8000c30 <_ZL12MX_I2C1_Initv+0x48>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c20:	2100      	movs	r1, #0
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <_ZL12MX_I2C1_Initv+0x50>)
 8000c24:	f006 fa26 	bl	8007074 <HAL_I2CEx_ConfigDigitalFilter>
 8000c28:	b920      	cbnz	r0, 8000c34 <_ZL12MX_I2C1_Initv+0x4c>
}
 8000c2a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000c2c:	f7ff ff20 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000c30:	f7ff ff1e 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000c34:	f7ff ff1c 	bl	8000a70 <Error_Handler>
 8000c38:	24000aa4 	.word	0x24000aa4
 8000c3c:	40005400 	.word	0x40005400

08000c40 <_ZL12MX_I2C4_Initv>:
{
 8000c40:	b508      	push	{r3, lr}
  hi2c4.Instance = I2C4;
 8000c42:	4813      	ldr	r0, [pc, #76]	; (8000c90 <_ZL12MX_I2C4_Initv+0x50>)
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <_ZL12MX_I2C4_Initv+0x54>)
 8000c46:	6003      	str	r3, [r0, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000c48:	f1a3 531e 	sub.w	r3, r3, #662700032	; 0x27800000
 8000c4c:	f5a3 237a 	sub.w	r3, r3, #1024000	; 0xfa000
 8000c50:	f2a3 634f 	subw	r3, r3, #1615	; 0x64f
 8000c54:	6043      	str	r3, [r0, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	6083      	str	r3, [r0, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	60c2      	str	r2, [r0, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c5e:	6103      	str	r3, [r0, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c60:	6143      	str	r3, [r0, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c62:	6183      	str	r3, [r0, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c64:	61c3      	str	r3, [r0, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c66:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000c68:	f005 ffe4 	bl	8006c34 <HAL_I2C_Init>
 8000c6c:	b950      	cbnz	r0, 8000c84 <_ZL12MX_I2C4_Initv+0x44>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4807      	ldr	r0, [pc, #28]	; (8000c90 <_ZL12MX_I2C4_Initv+0x50>)
 8000c72:	f006 f9d1 	bl	8007018 <HAL_I2CEx_ConfigAnalogFilter>
 8000c76:	b938      	cbnz	r0, 8000c88 <_ZL12MX_I2C4_Initv+0x48>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <_ZL12MX_I2C4_Initv+0x50>)
 8000c7c:	f006 f9fa 	bl	8007074 <HAL_I2CEx_ConfigDigitalFilter>
 8000c80:	b920      	cbnz	r0, 8000c8c <_ZL12MX_I2C4_Initv+0x4c>
}
 8000c82:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000c84:	f7ff fef4 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000c88:	f7ff fef2 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000c8c:	f7ff fef0 	bl	8000a70 <Error_Handler>
 8000c90:	24000af0 	.word	0x24000af0
 8000c94:	58001c00 	.word	0x58001c00

08000c98 <_ZL19MX_USART1_UART_Initv>:
{
 8000c98:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000c9a:	4815      	ldr	r0, [pc, #84]	; (8000cf0 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8000c9e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000ca0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000ca4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000caa:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cac:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cae:	220c      	movs	r2, #12
 8000cb0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb6:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cb8:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cba:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cbc:	f00b f807 	bl	800bcce <HAL_UART_Init>
 8000cc0:	b970      	cbnz	r0, 8000ce0 <_ZL19MX_USART1_UART_Initv+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000cc6:	f00b f91b 	bl	800bf00 <HAL_UARTEx_SetTxFifoThreshold>
 8000cca:	b958      	cbnz	r0, 8000ce4 <_ZL19MX_USART1_UART_Initv+0x4c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000cd0:	f00b f93b 	bl	800bf4a <HAL_UARTEx_SetRxFifoThreshold>
 8000cd4:	b940      	cbnz	r0, 8000ce8 <_ZL19MX_USART1_UART_Initv+0x50>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000cd8:	f00b f8f3 	bl	800bec2 <HAL_UARTEx_DisableFifoMode>
 8000cdc:	b930      	cbnz	r0, 8000cec <_ZL19MX_USART1_UART_Initv+0x54>
}
 8000cde:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ce0:	f7ff fec6 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000ce4:	f7ff fec4 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000ce8:	f7ff fec2 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000cec:	f7ff fec0 	bl	8000a70 <Error_Handler>
 8000cf0:	24000c50 	.word	0x24000c50
 8000cf4:	40011000 	.word	0x40011000

08000cf8 <_ZL19MX_USART2_UART_Initv>:
{
 8000cf8:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8000cfa:	4815      	ldr	r0, [pc, #84]	; (8000d50 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <_ZL19MX_USART2_UART_Initv+0x5c>)
 8000cfe:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000d00:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000d04:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	2300      	movs	r3, #0
 8000d08:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d0a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d0c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d0e:	220c      	movs	r2, #12
 8000d10:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d12:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d16:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d18:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d1a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d1c:	f00a ffd7 	bl	800bcce <HAL_UART_Init>
 8000d20:	b970      	cbnz	r0, 8000d40 <_ZL19MX_USART2_UART_Initv+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d22:	2100      	movs	r1, #0
 8000d24:	480a      	ldr	r0, [pc, #40]	; (8000d50 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000d26:	f00b f8eb 	bl	800bf00 <HAL_UARTEx_SetTxFifoThreshold>
 8000d2a:	b958      	cbnz	r0, 8000d44 <_ZL19MX_USART2_UART_Initv+0x4c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4808      	ldr	r0, [pc, #32]	; (8000d50 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000d30:	f00b f90b 	bl	800bf4a <HAL_UARTEx_SetRxFifoThreshold>
 8000d34:	b940      	cbnz	r0, 8000d48 <_ZL19MX_USART2_UART_Initv+0x50>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d36:	4806      	ldr	r0, [pc, #24]	; (8000d50 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000d38:	f00b f8c3 	bl	800bec2 <HAL_UARTEx_DisableFifoMode>
 8000d3c:	b930      	cbnz	r0, 8000d4c <_ZL19MX_USART2_UART_Initv+0x54>
}
 8000d3e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d40:	f7ff fe96 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000d44:	f7ff fe94 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000d48:	f7ff fe92 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000d4c:	f7ff fe90 	bl	8000a70 <Error_Handler>
 8000d50:	24000ce0 	.word	0x24000ce0
 8000d54:	40004400 	.word	0x40004400

08000d58 <_ZL19MX_USART3_UART_Initv>:
{
 8000d58:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 8000d5a:	4816      	ldr	r0, [pc, #88]	; (8000db4 <_ZL19MX_USART3_UART_Initv+0x5c>)
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000d5e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000d60:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000d64:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d66:	2100      	movs	r1, #0
 8000d68:	6081      	str	r1, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d6a:	60c1      	str	r1, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d6c:	6101      	str	r1, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d6e:	230c      	movs	r3, #12
 8000d70:	6143      	str	r3, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	6181      	str	r1, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	61c1      	str	r1, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d76:	6201      	str	r1, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d78:	6241      	str	r1, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d7a:	6281      	str	r1, [r0, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	460a      	mov	r2, r1
 8000d80:	f00b f858 	bl	800be34 <HAL_RS485Ex_Init>
 8000d84:	b970      	cbnz	r0, 8000da4 <_ZL19MX_USART3_UART_Initv+0x4c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d86:	2100      	movs	r1, #0
 8000d88:	480a      	ldr	r0, [pc, #40]	; (8000db4 <_ZL19MX_USART3_UART_Initv+0x5c>)
 8000d8a:	f00b f8b9 	bl	800bf00 <HAL_UARTEx_SetTxFifoThreshold>
 8000d8e:	b958      	cbnz	r0, 8000da8 <_ZL19MX_USART3_UART_Initv+0x50>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d90:	2100      	movs	r1, #0
 8000d92:	4808      	ldr	r0, [pc, #32]	; (8000db4 <_ZL19MX_USART3_UART_Initv+0x5c>)
 8000d94:	f00b f8d9 	bl	800bf4a <HAL_UARTEx_SetRxFifoThreshold>
 8000d98:	b940      	cbnz	r0, 8000dac <_ZL19MX_USART3_UART_Initv+0x54>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d9a:	4806      	ldr	r0, [pc, #24]	; (8000db4 <_ZL19MX_USART3_UART_Initv+0x5c>)
 8000d9c:	f00b f891 	bl	800bec2 <HAL_UARTEx_DisableFifoMode>
 8000da0:	b930      	cbnz	r0, 8000db0 <_ZL19MX_USART3_UART_Initv+0x58>
}
 8000da2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000da4:	f7ff fe64 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000da8:	f7ff fe62 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000dac:	f7ff fe60 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000db0:	f7ff fe5e 	bl	8000a70 <Error_Handler>
 8000db4:	24000d70 	.word	0x24000d70
 8000db8:	40004800 	.word	0x40004800

08000dbc <_ZL19MX_USART6_UART_Initv>:
{
 8000dbc:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 8000dbe:	4815      	ldr	r0, [pc, #84]	; (8000e14 <_ZL19MX_USART6_UART_Initv+0x58>)
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <_ZL19MX_USART6_UART_Initv+0x5c>)
 8000dc2:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 8000dc4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000dc8:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000dce:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000dd0:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd8:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dda:	6203      	str	r3, [r0, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ddc:	6243      	str	r3, [r0, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dde:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000de0:	f00a ff75 	bl	800bcce <HAL_UART_Init>
 8000de4:	b970      	cbnz	r0, 8000e04 <_ZL19MX_USART6_UART_Initv+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000de6:	2100      	movs	r1, #0
 8000de8:	480a      	ldr	r0, [pc, #40]	; (8000e14 <_ZL19MX_USART6_UART_Initv+0x58>)
 8000dea:	f00b f889 	bl	800bf00 <HAL_UARTEx_SetTxFifoThreshold>
 8000dee:	b958      	cbnz	r0, 8000e08 <_ZL19MX_USART6_UART_Initv+0x4c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df0:	2100      	movs	r1, #0
 8000df2:	4808      	ldr	r0, [pc, #32]	; (8000e14 <_ZL19MX_USART6_UART_Initv+0x58>)
 8000df4:	f00b f8a9 	bl	800bf4a <HAL_UARTEx_SetRxFifoThreshold>
 8000df8:	b940      	cbnz	r0, 8000e0c <_ZL19MX_USART6_UART_Initv+0x50>
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000dfa:	4806      	ldr	r0, [pc, #24]	; (8000e14 <_ZL19MX_USART6_UART_Initv+0x58>)
 8000dfc:	f00b f861 	bl	800bec2 <HAL_UARTEx_DisableFifoMode>
 8000e00:	b930      	cbnz	r0, 8000e10 <_ZL19MX_USART6_UART_Initv+0x54>
}
 8000e02:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000e04:	f7ff fe34 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000e08:	f7ff fe32 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000e0c:	f7ff fe30 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000e10:	f7ff fe2e 	bl	8000a70 <Error_Handler>
 8000e14:	24000e90 	.word	0x24000e90
 8000e18:	40011400 	.word	0x40011400

08000e1c <_ZL12MX_TIM4_Initv>:
{
 8000e1c:	b500      	push	{lr}
 8000e1e:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e20:	2300      	movs	r3, #0
 8000e22:	9304      	str	r3, [sp, #16]
 8000e24:	9305      	str	r3, [sp, #20]
 8000e26:	9306      	str	r3, [sp, #24]
 8000e28:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2a:	9301      	str	r3, [sp, #4]
 8000e2c:	9302      	str	r3, [sp, #8]
 8000e2e:	9303      	str	r3, [sp, #12]
  htim4.Instance = TIM4;
 8000e30:	4813      	ldr	r0, [pc, #76]	; (8000e80 <_ZL12MX_TIM4_Initv+0x64>)
 8000e32:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <_ZL12MX_TIM4_Initv+0x68>)
 8000e34:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 60000;
 8000e36:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000e3a:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3c:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 8000e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e42:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e44:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e46:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e48:	f009 fcf6 	bl	800a838 <HAL_TIM_Base_Init>
 8000e4c:	b990      	cbnz	r0, 8000e74 <_ZL12MX_TIM4_Initv+0x58>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e54:	a904      	add	r1, sp, #16
 8000e56:	480a      	ldr	r0, [pc, #40]	; (8000e80 <_ZL12MX_TIM4_Initv+0x64>)
 8000e58:	f009 fe42 	bl	800aae0 <HAL_TIM_ConfigClockSource>
 8000e5c:	b960      	cbnz	r0, 8000e78 <_ZL12MX_TIM4_Initv+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e62:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e64:	a901      	add	r1, sp, #4
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <_ZL12MX_TIM4_Initv+0x64>)
 8000e68:	f009 ff9a 	bl	800ada0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6c:	b930      	cbnz	r0, 8000e7c <_ZL12MX_TIM4_Initv+0x60>
}
 8000e6e:	b009      	add	sp, #36	; 0x24
 8000e70:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e74:	f7ff fdfc 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000e78:	f7ff fdfa 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000e7c:	f7ff fdf8 	bl	8000a70 <Error_Handler>
 8000e80:	24000c04 	.word	0x24000c04
 8000e84:	40000800 	.word	0x40000800

08000e88 <_ZL12MX_ADC3_Initv>:
{
 8000e88:	b500      	push	{lr}
 8000e8a:	b089      	sub	sp, #36	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	9302      	str	r3, [sp, #8]
 8000e92:	9303      	str	r3, [sp, #12]
 8000e94:	9304      	str	r3, [sp, #16]
 8000e96:	9305      	str	r3, [sp, #20]
 8000e98:	9306      	str	r3, [sp, #24]
 8000e9a:	9307      	str	r3, [sp, #28]
  hadc3.Instance = ADC3;
 8000e9c:	481a      	ldr	r0, [pc, #104]	; (8000f08 <_ZL12MX_ADC3_Initv+0x80>)
 8000e9e:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <_ZL12MX_ADC3_Initv+0x84>)
 8000ea0:	6002      	str	r2, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000ea2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ea6:	6042      	str	r2, [r0, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ea8:	2208      	movs	r2, #8
 8000eaa:	6082      	str	r2, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eac:	60c3      	str	r3, [r0, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eae:	2204      	movs	r2, #4
 8000eb0:	6102      	str	r2, [r0, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000eb2:	7503      	strb	r3, [r0, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000eb4:	7543      	strb	r3, [r0, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	6182      	str	r2, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000eba:	7703      	strb	r3, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ebc:	6243      	str	r3, [r0, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ebe:	6283      	str	r3, [r0, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ec0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ec2:	6303      	str	r3, [r0, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ec4:	6343      	str	r3, [r0, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000ec6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000eca:	f003 f825 	bl	8003f18 <HAL_ADC_Init>
 8000ece:	b9b0      	cbnz	r0, 8000efe <_ZL12MX_ADC3_Initv+0x76>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <_ZL12MX_ADC3_Initv+0x88>)
 8000ed2:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed4:	2306      	movs	r3, #6
 8000ed6:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000edc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ee0:	9304      	str	r3, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	9306      	str	r3, [sp, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000eea:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000eee:	a901      	add	r1, sp, #4
 8000ef0:	4805      	ldr	r0, [pc, #20]	; (8000f08 <_ZL12MX_ADC3_Initv+0x80>)
 8000ef2:	f002 fca1 	bl	8003838 <HAL_ADC_ConfigChannel>
 8000ef6:	b920      	cbnz	r0, 8000f02 <_ZL12MX_ADC3_Initv+0x7a>
}
 8000ef8:	b009      	add	sp, #36	; 0x24
 8000efa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000efe:	f7ff fdb7 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000f02:	f7ff fdb5 	bl	8000a70 <Error_Handler>
 8000f06:	bf00      	nop
 8000f08:	24000164 	.word	0x24000164
 8000f0c:	58026000 	.word	0x58026000
 8000f10:	cfb80000 	.word	0xcfb80000

08000f14 <_ZL13MX_UART4_Initv>:
{
 8000f14:	b508      	push	{r3, lr}
  huart4.Instance = UART4;
 8000f16:	4815      	ldr	r0, [pc, #84]	; (8000f6c <_ZL13MX_UART4_Initv+0x58>)
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <_ZL13MX_UART4_Initv+0x5c>)
 8000f1a:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 8000f1c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000f20:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	2300      	movs	r3, #0
 8000f24:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f26:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f28:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2e:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f30:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f32:	6203      	str	r3, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f34:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f36:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f38:	f00a fec9 	bl	800bcce <HAL_UART_Init>
 8000f3c:	b970      	cbnz	r0, 8000f5c <_ZL13MX_UART4_Initv+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	480a      	ldr	r0, [pc, #40]	; (8000f6c <_ZL13MX_UART4_Initv+0x58>)
 8000f42:	f00a ffdd 	bl	800bf00 <HAL_UARTEx_SetTxFifoThreshold>
 8000f46:	b958      	cbnz	r0, 8000f60 <_ZL13MX_UART4_Initv+0x4c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4808      	ldr	r0, [pc, #32]	; (8000f6c <_ZL13MX_UART4_Initv+0x58>)
 8000f4c:	f00a fffd 	bl	800bf4a <HAL_UARTEx_SetRxFifoThreshold>
 8000f50:	b940      	cbnz	r0, 8000f64 <_ZL13MX_UART4_Initv+0x50>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f52:	4806      	ldr	r0, [pc, #24]	; (8000f6c <_ZL13MX_UART4_Initv+0x58>)
 8000f54:	f00a ffb5 	bl	800bec2 <HAL_UARTEx_DisableFifoMode>
 8000f58:	b930      	cbnz	r0, 8000f68 <_ZL13MX_UART4_Initv+0x54>
}
 8000f5a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f5c:	f7ff fd88 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000f60:	f7ff fd86 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000f64:	f7ff fd84 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000f68:	f7ff fd82 	bl	8000a70 <Error_Handler>
 8000f6c:	24000e00 	.word	0x24000e00
 8000f70:	40004c00 	.word	0x40004c00

08000f74 <_ZL13MX_UART8_Initv>:
{
 8000f74:	b508      	push	{r3, lr}
  huart8.Instance = UART8;
 8000f76:	4815      	ldr	r0, [pc, #84]	; (8000fcc <_ZL13MX_UART8_Initv+0x58>)
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <_ZL13MX_UART8_Initv+0x5c>)
 8000f7a:	6003      	str	r3, [r0, #0]
  huart8.Init.BaudRate = 115200;
 8000f7c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000f80:	6043      	str	r3, [r0, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	2300      	movs	r3, #0
 8000f84:	6083      	str	r3, [r0, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000f86:	60c3      	str	r3, [r0, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000f88:	6103      	str	r3, [r0, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	6142      	str	r2, [r0, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8e:	6183      	str	r3, [r0, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f90:	61c3      	str	r3, [r0, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f92:	6203      	str	r3, [r0, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f94:	6243      	str	r3, [r0, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f96:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000f98:	f00a fe99 	bl	800bcce <HAL_UART_Init>
 8000f9c:	b970      	cbnz	r0, 8000fbc <_ZL13MX_UART8_Initv+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	480a      	ldr	r0, [pc, #40]	; (8000fcc <_ZL13MX_UART8_Initv+0x58>)
 8000fa2:	f00a ffad 	bl	800bf00 <HAL_UARTEx_SetTxFifoThreshold>
 8000fa6:	b958      	cbnz	r0, 8000fc0 <_ZL13MX_UART8_Initv+0x4c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4808      	ldr	r0, [pc, #32]	; (8000fcc <_ZL13MX_UART8_Initv+0x58>)
 8000fac:	f00a ffcd 	bl	800bf4a <HAL_UARTEx_SetRxFifoThreshold>
 8000fb0:	b940      	cbnz	r0, 8000fc4 <_ZL13MX_UART8_Initv+0x50>
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000fb2:	4806      	ldr	r0, [pc, #24]	; (8000fcc <_ZL13MX_UART8_Initv+0x58>)
 8000fb4:	f00a ff85 	bl	800bec2 <HAL_UARTEx_DisableFifoMode>
 8000fb8:	b930      	cbnz	r0, 8000fc8 <_ZL13MX_UART8_Initv+0x54>
}
 8000fba:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000fbc:	f7ff fd58 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000fc0:	f7ff fd56 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000fc4:	f7ff fd54 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8000fc8:	f7ff fd52 	bl	8000a70 <Error_Handler>
 8000fcc:	24000fb0 	.word	0x24000fb0
 8000fd0:	40007c00 	.word	0x40007c00

08000fd4 <_ZL13MX_UART7_Initv>:
{
 8000fd4:	b508      	push	{r3, lr}
  huart7.Instance = UART7;
 8000fd6:	4816      	ldr	r0, [pc, #88]	; (8001030 <_ZL13MX_UART7_Initv+0x5c>)
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <_ZL13MX_UART7_Initv+0x60>)
 8000fda:	6003      	str	r3, [r0, #0]
  huart7.Init.BaudRate = 115200;
 8000fdc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000fe0:	6043      	str	r3, [r0, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	6083      	str	r3, [r0, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000fe6:	60c3      	str	r3, [r0, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000fe8:	6103      	str	r3, [r0, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000fea:	220c      	movs	r2, #12
 8000fec:	6142      	str	r2, [r0, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000fee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ff2:	6182      	str	r2, [r0, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff4:	61c3      	str	r3, [r0, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff6:	6203      	str	r3, [r0, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ff8:	6243      	str	r3, [r0, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ffa:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000ffc:	f00a fe67 	bl	800bcce <HAL_UART_Init>
 8001000:	b970      	cbnz	r0, 8001020 <_ZL13MX_UART7_Initv+0x4c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001002:	2100      	movs	r1, #0
 8001004:	480a      	ldr	r0, [pc, #40]	; (8001030 <_ZL13MX_UART7_Initv+0x5c>)
 8001006:	f00a ff7b 	bl	800bf00 <HAL_UARTEx_SetTxFifoThreshold>
 800100a:	b958      	cbnz	r0, 8001024 <_ZL13MX_UART7_Initv+0x50>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100c:	2100      	movs	r1, #0
 800100e:	4808      	ldr	r0, [pc, #32]	; (8001030 <_ZL13MX_UART7_Initv+0x5c>)
 8001010:	f00a ff9b 	bl	800bf4a <HAL_UARTEx_SetRxFifoThreshold>
 8001014:	b940      	cbnz	r0, 8001028 <_ZL13MX_UART7_Initv+0x54>
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001016:	4806      	ldr	r0, [pc, #24]	; (8001030 <_ZL13MX_UART7_Initv+0x5c>)
 8001018:	f00a ff53 	bl	800bec2 <HAL_UARTEx_DisableFifoMode>
 800101c:	b930      	cbnz	r0, 800102c <_ZL13MX_UART7_Initv+0x58>
}
 800101e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001020:	f7ff fd26 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8001024:	f7ff fd24 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8001028:	f7ff fd22 	bl	8000a70 <Error_Handler>
    Error_Handler();
 800102c:	f7ff fd20 	bl	8000a70 <Error_Handler>
 8001030:	24000f20 	.word	0x24000f20
 8001034:	40007800 	.word	0x40007800

08001038 <_ZL17MX_SDMMC1_SD_Initv>:
{
 8001038:	b508      	push	{r3, lr}
  hsd1.Instance = SDMMC1;
 800103a:	4809      	ldr	r0, [pc, #36]	; (8001060 <_ZL17MX_SDMMC1_SD_Initv+0x28>)
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <_ZL17MX_SDMMC1_SD_Initv+0x2c>)
 800103e:	6003      	str	r3, [r0, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001040:	2300      	movs	r3, #0
 8001042:	6043      	str	r3, [r0, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001044:	6083      	str	r3, [r0, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001046:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800104a:	60c2      	str	r2, [r0, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800104c:	6103      	str	r3, [r0, #16]
  hsd1.Init.ClockDiv = 4;
 800104e:	2304      	movs	r3, #4
 8001050:	6143      	str	r3, [r0, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001052:	f008 ff46 	bl	8009ee2 <HAL_SD_Init>
 8001056:	b900      	cbnz	r0, 800105a <_ZL17MX_SDMMC1_SD_Initv+0x22>
}
 8001058:	bd08      	pop	{r3, pc}
    Error_Handler();
 800105a:	f7ff fd09 	bl	8000a70 <Error_Handler>
 800105e:	bf00      	nop
 8001060:	24000b3c 	.word	0x24000b3c
 8001064:	52007000 	.word	0x52007000

08001068 <_ZL12MX_TIM3_Initv>:
{
 8001068:	b500      	push	{lr}
 800106a:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106c:	2300      	movs	r3, #0
 800106e:	930a      	str	r3, [sp, #40]	; 0x28
 8001070:	930b      	str	r3, [sp, #44]	; 0x2c
 8001072:	930c      	str	r3, [sp, #48]	; 0x30
 8001074:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001076:	9307      	str	r3, [sp, #28]
 8001078:	9308      	str	r3, [sp, #32]
 800107a:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	9302      	str	r3, [sp, #8]
 8001082:	9303      	str	r3, [sp, #12]
 8001084:	9304      	str	r3, [sp, #16]
 8001086:	9305      	str	r3, [sp, #20]
 8001088:	9306      	str	r3, [sp, #24]
  htim3.Instance = TIM3;
 800108a:	4827      	ldr	r0, [pc, #156]	; (8001128 <_ZL12MX_TIM3_Initv+0xc0>)
 800108c:	4a27      	ldr	r2, [pc, #156]	; (800112c <_ZL12MX_TIM3_Initv+0xc4>)
 800108e:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 10;
 8001090:	220a      	movs	r2, #10
 8001092:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001094:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 255;
 8001096:	22ff      	movs	r2, #255	; 0xff
 8001098:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109a:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800109e:	f009 fbcb 	bl	800a838 <HAL_TIM_Base_Init>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	d131      	bne.n	800110a <_ZL12MX_TIM3_Initv+0xa2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010aa:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010ac:	a90a      	add	r1, sp, #40	; 0x28
 80010ae:	481e      	ldr	r0, [pc, #120]	; (8001128 <_ZL12MX_TIM3_Initv+0xc0>)
 80010b0:	f009 fd16 	bl	800aae0 <HAL_TIM_ConfigClockSource>
 80010b4:	bb58      	cbnz	r0, 800110e <_ZL12MX_TIM3_Initv+0xa6>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010b6:	481c      	ldr	r0, [pc, #112]	; (8001128 <_ZL12MX_TIM3_Initv+0xc0>)
 80010b8:	f009 fbee 	bl	800a898 <HAL_TIM_PWM_Init>
 80010bc:	bb48      	cbnz	r0, 8001112 <_ZL12MX_TIM3_Initv+0xaa>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010be:	2300      	movs	r3, #0
 80010c0:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010c4:	a907      	add	r1, sp, #28
 80010c6:	4818      	ldr	r0, [pc, #96]	; (8001128 <_ZL12MX_TIM3_Initv+0xc0>)
 80010c8:	f009 fe6a 	bl	800ada0 <HAL_TIMEx_MasterConfigSynchronization>
 80010cc:	bb18      	cbnz	r0, 8001116 <_ZL12MX_TIM3_Initv+0xae>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ce:	2360      	movs	r3, #96	; 0x60
 80010d0:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 80010d2:	2200      	movs	r2, #0
 80010d4:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80010d6:	2302      	movs	r3, #2
 80010d8:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010da:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010dc:	4669      	mov	r1, sp
 80010de:	4812      	ldr	r0, [pc, #72]	; (8001128 <_ZL12MX_TIM3_Initv+0xc0>)
 80010e0:	f009 fc54 	bl	800a98c <HAL_TIM_PWM_ConfigChannel>
 80010e4:	b9c8      	cbnz	r0, 800111a <_ZL12MX_TIM3_Initv+0xb2>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010e6:	2204      	movs	r2, #4
 80010e8:	4669      	mov	r1, sp
 80010ea:	480f      	ldr	r0, [pc, #60]	; (8001128 <_ZL12MX_TIM3_Initv+0xc0>)
 80010ec:	f009 fc4e 	bl	800a98c <HAL_TIM_PWM_ConfigChannel>
 80010f0:	b9a8      	cbnz	r0, 800111e <_ZL12MX_TIM3_Initv+0xb6>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010f2:	2208      	movs	r2, #8
 80010f4:	4669      	mov	r1, sp
 80010f6:	480c      	ldr	r0, [pc, #48]	; (8001128 <_ZL12MX_TIM3_Initv+0xc0>)
 80010f8:	f009 fc48 	bl	800a98c <HAL_TIM_PWM_ConfigChannel>
 80010fc:	b988      	cbnz	r0, 8001122 <_ZL12MX_TIM3_Initv+0xba>
  HAL_TIM_MspPostInit(&htim3);
 80010fe:	480a      	ldr	r0, [pc, #40]	; (8001128 <_ZL12MX_TIM3_Initv+0xc0>)
 8001100:	f001 fd62 	bl	8002bc8 <HAL_TIM_MspPostInit>
}
 8001104:	b00f      	add	sp, #60	; 0x3c
 8001106:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800110a:	f7ff fcb1 	bl	8000a70 <Error_Handler>
    Error_Handler();
 800110e:	f7ff fcaf 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8001112:	f7ff fcad 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8001116:	f7ff fcab 	bl	8000a70 <Error_Handler>
    Error_Handler();
 800111a:	f7ff fca9 	bl	8000a70 <Error_Handler>
    Error_Handler();
 800111e:	f7ff fca7 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8001122:	f7ff fca5 	bl	8000a70 <Error_Handler>
 8001126:	bf00      	nop
 8001128:	24000bb8 	.word	0x24000bb8
 800112c:	40000400 	.word	0x40000400

08001130 <_Z18SystemClock_Configv>:
{
 8001130:	b500      	push	{lr}
 8001132:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001134:	224c      	movs	r2, #76	; 0x4c
 8001136:	2100      	movs	r1, #0
 8001138:	a80b      	add	r0, sp, #44	; 0x2c
 800113a:	f01a fc01 	bl	801b940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113e:	2220      	movs	r2, #32
 8001140:	2100      	movs	r1, #0
 8001142:	a803      	add	r0, sp, #12
 8001144:	f01a fbfc 	bl	801b940 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001148:	2002      	movs	r0, #2
 800114a:	f005 ffbf 	bl	80070cc <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800114e:	2300      	movs	r3, #0
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	4b3d      	ldr	r3, [pc, #244]	; (8001248 <_Z18SystemClock_Configv+0x118>)
 8001154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001156:	f022 0201 	bic.w	r2, r2, #1
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
 800115c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	4b39      	ldr	r3, [pc, #228]	; (800124c <_Z18SystemClock_Configv+0x11c>)
 8001166:	699a      	ldr	r2, [r3, #24]
 8001168:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800116c:	619a      	str	r2, [r3, #24]
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001178:	4b34      	ldr	r3, [pc, #208]	; (800124c <_Z18SystemClock_Configv+0x11c>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001180:	d0fa      	beq.n	8001178 <_Z18SystemClock_Configv+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	4b33      	ldr	r3, [pc, #204]	; (8001250 <_Z18SystemClock_Configv+0x120>)
 8001184:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001188:	f042 0202 	orr.w	r2, r2, #2
 800118c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001190:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800119c:	2300      	movs	r3, #0
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	4b2a      	ldr	r3, [pc, #168]	; (800124c <_Z18SystemClock_Configv+0x11c>)
 80011a2:	699a      	ldr	r2, [r3, #24]
 80011a4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80011a8:	619a      	str	r2, [r3, #24]
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	4b25      	ldr	r3, [pc, #148]	; (8001248 <_Z18SystemClock_Configv+0x118>)
 80011b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011b6:	f042 0201 	orr.w	r2, r2, #1
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	9302      	str	r3, [sp, #8]
 80011c4:	9b02      	ldr	r3, [sp, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <_Z18SystemClock_Configv+0x11c>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80011ce:	d0fa      	beq.n	80011c6 <_Z18SystemClock_Configv+0x96>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80011d0:	4a1f      	ldr	r2, [pc, #124]	; (8001250 <_Z18SystemClock_Configv+0x120>)
 80011d2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80011d4:	f023 0303 	bic.w	r3, r3, #3
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011de:	2301      	movs	r3, #1
 80011e0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e8:	2302      	movs	r3, #2
 80011ea:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ec:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 80011ee:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80011f0:	2250      	movs	r2, #80	; 0x50
 80011f2:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011f4:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 24;
 80011f6:	2318      	movs	r3, #24
 80011f8:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 4;
 80011fa:	2304      	movs	r3, #4
 80011fc:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011fe:	230c      	movs	r3, #12
 8001200:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001202:	2300      	movs	r3, #0
 8001204:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001206:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001208:	a80b      	add	r0, sp, #44	; 0x2c
 800120a:	f005 ff89 	bl	8007120 <HAL_RCC_OscConfig>
 800120e:	b9b0      	cbnz	r0, 800123e <_Z18SystemClock_Configv+0x10e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001210:	233f      	movs	r3, #63	; 0x3f
 8001212:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001214:	2303      	movs	r3, #3
 8001216:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800121c:	2308      	movs	r3, #8
 800121e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001220:	2340      	movs	r3, #64	; 0x40
 8001222:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001224:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800122a:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800122c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800122e:	2104      	movs	r1, #4
 8001230:	a803      	add	r0, sp, #12
 8001232:	f006 fba9 	bl	8007988 <HAL_RCC_ClockConfig>
 8001236:	b920      	cbnz	r0, 8001242 <_Z18SystemClock_Configv+0x112>
}
 8001238:	b01f      	add	sp, #124	; 0x7c
 800123a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800123e:	f7ff fc17 	bl	8000a70 <Error_Handler>
    Error_Handler();
 8001242:	f7ff fc15 	bl	8000a70 <Error_Handler>
 8001246:	bf00      	nop
 8001248:	58000400 	.word	0x58000400
 800124c:	58024800 	.word	0x58024800
 8001250:	58024400 	.word	0x58024400

08001254 <_Z24PeriphCommonClock_Configv>:
{
 8001254:	b500      	push	{lr}
 8001256:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001258:	22bc      	movs	r2, #188	; 0xbc
 800125a:	2100      	movs	r1, #0
 800125c:	a801      	add	r0, sp, #4
 800125e:	f01a fb6f 	bl	801b940 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_FDCAN;
 8001262:	f44f 2308 	mov.w	r3, #557056	; 0x88000
 8001266:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 3;
 8001268:	2203      	movs	r2, #3
 800126a:	9202      	str	r2, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 25;
 800126c:	2319      	movs	r3, #25
 800126e:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001270:	2302      	movs	r3, #2
 8001272:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001274:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001276:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001278:	21c0      	movs	r1, #192	; 0xc0
 800127a:	9107      	str	r1, [sp, #28]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 800127c:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 40;
 800127e:	2128      	movs	r1, #40	; 0x28
 8001280:	910b      	str	r1, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001282:	930c      	str	r3, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001284:	930d      	str	r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 8001286:	920e      	str	r2, [sp, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001288:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800128c:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800128e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001292:	931c      	str	r3, [sp, #112]	; 0x70
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8001294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001298:	9329      	str	r3, [sp, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800129a:	a801      	add	r0, sp, #4
 800129c:	f006 fe3a 	bl	8007f14 <HAL_RCCEx_PeriphCLKConfig>
 80012a0:	b910      	cbnz	r0, 80012a8 <_Z24PeriphCommonClock_Configv+0x54>
}
 80012a2:	b031      	add	sp, #196	; 0xc4
 80012a4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80012a8:	f7ff fbe2 	bl	8000a70 <Error_Handler>

080012ac <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      _Vector_base(const allocator_type& __a, _Vector_base&& __x)
      : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80012ac:	b510      	push	{r4, lr}
 80012ae:	4604      	mov	r4, r0
      {
	_M_deallocate(_M_impl._M_start,
 80012b0:	6800      	ldr	r0, [r0, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80012b2:	68a1      	ldr	r1, [r4, #8]
 80012b4:	1a09      	subs	r1, r1, r0

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 80012b6:	b108      	cbz	r0, 80012bc <_ZNSt12_Vector_baseIhSaIhEED1Ev+0x10>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80012b8:	f019 fe54 	bl	801af64 <_ZdlPvj>
      }
 80012bc:	4620      	mov	r0, r4
 80012be:	bd10      	pop	{r4, pc}

080012c0 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80012c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80012c2:	1a54      	subs	r4, r2, r1
 80012c4:	d40d      	bmi.n	80012e2 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag+0x22>
 80012c6:	4605      	mov	r5, r0
 80012c8:	460e      	mov	r6, r1
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80012ca:	b17c      	cbz	r4, 80012ec <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag+0x2c>
	if (__n > this->_M_max_size())
 80012cc:	2c00      	cmp	r4, #0
 80012ce:	db0b      	blt.n	80012e8 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag+0x28>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80012d0:	4620      	mov	r0, r4
 80012d2:	f019 fe5d 	bl	801af90 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80012d6:	6028      	str	r0, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80012d8:	1907      	adds	r7, r0, r4
 80012da:	60af      	str	r7, [r5, #8]
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 80012dc:	b944      	cbnz	r4, 80012f0 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag+0x30>
	  this->_M_impl._M_finish =
 80012de:	606f      	str	r7, [r5, #4]
	}
 80012e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  __throw_length_error(
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag+0x3c>)
 80012e4:	f019 ff08 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	  std::__throw_bad_alloc();
 80012e8:	f019 ff00 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80012ec:	2000      	movs	r0, #0
 80012ee:	e7f2      	b.n	80012d6 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag+0x16>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80012f0:	4622      	mov	r2, r4
 80012f2:	4631      	mov	r1, r6
 80012f4:	f01a fb0a 	bl	801b90c <memmove>
 80012f8:	e7f1      	b.n	80012de <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag+0x1e>
 80012fa:	bf00      	nop
 80012fc:	0801bdb0 	.word	0x0801bdb0

08001300 <_ZNSt6vectorIhSaIhEE13_M_insert_auxIhEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEOT_>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _Arg>
      void
      vector<_Tp, _Alloc>::
 8001300:	b570      	push	{r4, r5, r6, lr}
 8001302:	460c      	mov	r4, r1
 8001304:	4615      	mov	r5, r2
    vector<_Tp, _Alloc>::
    _M_insert_aux(iterator __position, const _Tp& __x)
#endif
    {
      _GLIBCXX_ASAN_ANNOTATE_GROW(1);
      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001306:	6843      	ldr	r3, [r0, #4]
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001308:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800130c:	701a      	strb	r2, [r3, #0]
			       _GLIBCXX_MOVE(*(this->_M_impl._M_finish - 1)));
      ++this->_M_impl._M_finish;
 800130e:	6846      	ldr	r6, [r0, #4]
 8001310:	1c73      	adds	r3, r6, #1
 8001312:	6043      	str	r3, [r0, #4]
      _GLIBCXX_ASAN_ANNOTATE_GREW(1);
#if __cplusplus < 201103L
      _Tp __x_copy = __x;
#endif
      _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 8001314:	1e73      	subs	r3, r6, #1
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 8001316:	1a5a      	subs	r2, r3, r1
 8001318:	d102      	bne.n	8001320 <_ZNSt6vectorIhSaIhEE13_M_insert_auxIhEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEOT_+0x20>
			      this->_M_impl._M_finish - 2,
			      this->_M_impl._M_finish - 1);
#if __cplusplus < 201103L
      *__position = __x_copy;
#else
      *__position = std::forward<_Arg>(__arg);
 800131a:	782b      	ldrb	r3, [r5, #0]
 800131c:	7023      	strb	r3, [r4, #0]
#endif
    }
 800131e:	bd70      	pop	{r4, r5, r6, pc}
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8001320:	1ab0      	subs	r0, r6, r2
 8001322:	f01a faf3 	bl	801b90c <memmove>
 8001326:	e7f8      	b.n	800131a <_ZNSt6vectorIhSaIhEE13_M_insert_auxIhEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEOT_+0x1a>

08001328 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8001328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800132c:	b083      	sub	sp, #12
 800132e:	4616      	mov	r6, r2
 8001330:	2301      	movs	r3, #1
 8001332:	9300      	str	r3, [sp, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001334:	6843      	ldr	r3, [r0, #4]
 8001336:	6804      	ldr	r4, [r0, #0]
 8001338:	1b1c      	subs	r4, r3, r4
	if (max_size() - size() < __n)
 800133a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800133e:	42a2      	cmp	r2, r4
 8001340:	d039      	beq.n	80013b6 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x8e>
 8001342:	4605      	mov	r5, r0
 8001344:	4688      	mov	r8, r1
	const size_type __len = size() + (std::max)(size(), __n);
 8001346:	9401      	str	r4, [sp, #4]
      if (__a < __b)
 8001348:	2c00      	cmp	r4, #0
 800134a:	d037      	beq.n	80013bc <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x94>
      return __a;
 800134c:	aa01      	add	r2, sp, #4
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	4414      	add	r4, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001352:	682a      	ldr	r2, [r5, #0]
 8001354:	1a9b      	subs	r3, r3, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001356:	429c      	cmp	r4, r3
 8001358:	d332      	bcc.n	80013c0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x98>
 800135a:	2c00      	cmp	r4, #0
 800135c:	db33      	blt.n	80013c6 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x9e>
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 800135e:	f8d5 9000 	ldr.w	r9, [r5]
      pointer __old_finish = this->_M_impl._M_finish;
 8001362:	f8d5 a004 	ldr.w	sl, [r5, #4]
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8001366:	eba8 0b09 	sub.w	fp, r8, r9
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800136a:	b38c      	cbz	r4, 80013d0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0xa8>
	if (__n > this->_M_max_size())
 800136c:	2c00      	cmp	r4, #0
 800136e:	db2d      	blt.n	80013cc <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0xa4>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001370:	4620      	mov	r0, r4
 8001372:	f019 fe0d 	bl	801af90 <_Znwj>
 8001376:	4607      	mov	r7, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001378:	7833      	ldrb	r3, [r6, #0]
 800137a:	f807 300b 	strb.w	r3, [r7, fp]
  template <typename _Tp, typename _Up>
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
 800137e:	eba8 0609 	sub.w	r6, r8, r9
      if (__count > 0)
 8001382:	2e00      	cmp	r6, #0
 8001384:	dc26      	bgt.n	80013d4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0xac>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
      return __result + __count;
 8001386:	443e      	add	r6, r7
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 8001388:	3601      	adds	r6, #1
      ptrdiff_t __count = __last - __first;
 800138a:	ebaa 0a08 	sub.w	sl, sl, r8
      if (__count > 0)
 800138e:	f1ba 0f00 	cmp.w	sl, #0
 8001392:	dc25      	bgt.n	80013e0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0xb8>
      return __result + __count;
 8001394:	4456      	add	r6, sl
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 8001396:	68a9      	ldr	r1, [r5, #8]
 8001398:	eba1 0109 	sub.w	r1, r1, r9
	if (__p)
 800139c:	f1b9 0f00 	cmp.w	r9, #0
 80013a0:	d002      	beq.n	80013a8 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x80>
	::operator delete(__p
 80013a2:	4648      	mov	r0, r9
 80013a4:	f019 fdde 	bl	801af64 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 80013a8:	602f      	str	r7, [r5, #0]
      this->_M_impl._M_finish = __new_finish;
 80013aa:	606e      	str	r6, [r5, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80013ac:	443c      	add	r4, r7
 80013ae:	60ac      	str	r4, [r5, #8]
    }
 80013b0:	b003      	add	sp, #12
 80013b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_length_error(__N(__s));
 80013b6:	480d      	ldr	r0, [pc, #52]	; (80013ec <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0xc4>)
 80013b8:	f019 fe9e 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 80013bc:	466a      	mov	r2, sp
 80013be:	e7c6      	b.n	800134e <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x26>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80013c0:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80013c4:	e7cb      	b.n	800135e <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x36>
 80013c6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80013ca:	e7c8      	b.n	800135e <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x36>
	  std::__throw_bad_alloc();
 80013cc:	f019 fe8e 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80013d0:	2700      	movs	r7, #0
 80013d2:	e7d1      	b.n	8001378 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x50>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80013d4:	4632      	mov	r2, r6
 80013d6:	4649      	mov	r1, r9
 80013d8:	4638      	mov	r0, r7
 80013da:	f01a fa97 	bl	801b90c <memmove>
 80013de:	e7d2      	b.n	8001386 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x5e>
 80013e0:	4652      	mov	r2, sl
 80013e2:	4641      	mov	r1, r8
 80013e4:	4630      	mov	r0, r6
 80013e6:	f01a fa91 	bl	801b90c <memmove>
 80013ea:	e7d3      	b.n	8001394 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x6c>
 80013ec:	0801bde4 	.word	0x0801bde4

080013f0 <_ZNSt6vectorIhSaIhEE6insertEN9__gnu_cxx17__normal_iteratorIPKhS1_EERS4_>:
    vector<_Tp, _Alloc>::
 80013f0:	b530      	push	{r4, r5, lr}
 80013f2:	b083      	sub	sp, #12
 80013f4:	4604      	mov	r4, r0
      : _M_current(__i) { }
 80013f6:	6805      	ldr	r5, [r0, #0]
    { return __lhs.base() - __rhs.base(); }
 80013f8:	1b4d      	subs	r5, r1, r5
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80013fa:	6843      	ldr	r3, [r0, #4]
 80013fc:	6880      	ldr	r0, [r0, #8]
 80013fe:	4283      	cmp	r3, r0
 8001400:	d013      	beq.n	800142a <_ZNSt6vectorIhSaIhEE6insertEN9__gnu_cxx17__normal_iteratorIPKhS1_EERS4_+0x3a>
	if (__position == end())
 8001402:	428b      	cmp	r3, r1
 8001404:	d00b      	beq.n	800141e <_ZNSt6vectorIhSaIhEE6insertEN9__gnu_cxx17__normal_iteratorIPKhS1_EERS4_+0x2e>
	  _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
 8001406:	9400      	str	r4, [sp, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001408:	7813      	ldrb	r3, [r2, #0]
 800140a:	f88d 3004 	strb.w	r3, [sp, #4]
	    _M_insert_aux(__pos, std::move(__x_copy._M_val()));
 800140e:	aa01      	add	r2, sp, #4
 8001410:	4620      	mov	r0, r4
 8001412:	f7ff ff75 	bl	8001300 <_ZNSt6vectorIhSaIhEE13_M_insert_auxIhEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEOT_>
      return iterator(this->_M_impl._M_start + __n);
 8001416:	6820      	ldr	r0, [r4, #0]
    }
 8001418:	4428      	add	r0, r5
 800141a:	b003      	add	sp, #12
 800141c:	bd30      	pop	{r4, r5, pc}
 800141e:	7812      	ldrb	r2, [r2, #0]
 8001420:	701a      	strb	r2, [r3, #0]
	    ++this->_M_impl._M_finish;
 8001422:	6863      	ldr	r3, [r4, #4]
 8001424:	3301      	adds	r3, #1
 8001426:	6063      	str	r3, [r4, #4]
 8001428:	e7f5      	b.n	8001416 <_ZNSt6vectorIhSaIhEE6insertEN9__gnu_cxx17__normal_iteratorIPKhS1_EERS4_+0x26>
	_M_realloc_insert(begin() + (__position - cbegin()), __x);
 800142a:	4620      	mov	r0, r4
 800142c:	f7ff ff7c 	bl	8001328 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 8001430:	e7f1      	b.n	8001416 <_ZNSt6vectorIhSaIhEE6insertEN9__gnu_cxx17__normal_iteratorIPKhS1_EERS4_+0x26>
	...

08001434 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8001434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001438:	b083      	sub	sp, #12
 800143a:	4688      	mov	r8, r1
 800143c:	4616      	mov	r6, r2
 800143e:	2301      	movs	r3, #1
 8001440:	9300      	str	r3, [sp, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001442:	6842      	ldr	r2, [r0, #4]
 8001444:	6803      	ldr	r3, [r0, #0]
 8001446:	1ad3      	subs	r3, r2, r3
	if (max_size() - size() < __n)
 8001448:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
 800144c:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 8001450:	d03d      	beq.n	80014ce <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
 8001452:	4604      	mov	r4, r0
 8001454:	109d      	asrs	r5, r3, #2
	const size_type __len = size() + (std::max)(size(), __n);
 8001456:	9501      	str	r5, [sp, #4]
      if (__a < __b)
 8001458:	2d00      	cmp	r5, #0
 800145a:	d03b      	beq.n	80014d4 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>
      return __a;
 800145c:	ab01      	add	r3, sp, #4
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	441d      	add	r5, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001462:	6823      	ldr	r3, [r4, #0]
 8001464:	1ad2      	subs	r2, r2, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001466:	ebb5 0fa2 	cmp.w	r5, r2, asr #2
 800146a:	d335      	bcc.n	80014d8 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>
 800146c:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 8001470:	d235      	bcs.n	80014de <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xaa>
      pointer __old_start = this->_M_impl._M_start;
 8001472:	f8d4 9000 	ldr.w	r9, [r4]
      pointer __old_finish = this->_M_impl._M_finish;
 8001476:	f8d4 a004 	ldr.w	sl, [r4, #4]
    { return __lhs.base() - __rhs.base(); }
 800147a:	eba8 0b09 	sub.w	fp, r8, r9
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800147e:	b39d      	cbz	r5, 80014e8 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb4>
	if (__n > this->_M_max_size())
 8001480:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 8001484:	d22e      	bcs.n	80014e4 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb0>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001486:	00a8      	lsls	r0, r5, #2
 8001488:	f019 fd82 	bl	801af90 <_Znwj>
 800148c:	4607      	mov	r7, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800148e:	6833      	ldr	r3, [r6, #0]
 8001490:	f847 300b 	str.w	r3, [r7, fp]
      ptrdiff_t __count = __last - __first;
 8001494:	eba8 0609 	sub.w	r6, r8, r9
      if (__count > 0)
 8001498:	2e00      	cmp	r6, #0
 800149a:	dc27      	bgt.n	80014ec <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb8>
      return __result + __count;
 800149c:	443e      	add	r6, r7
	      ++__new_finish;
 800149e:	3604      	adds	r6, #4
      ptrdiff_t __count = __last - __first;
 80014a0:	ebaa 0a08 	sub.w	sl, sl, r8
      if (__count > 0)
 80014a4:	f1ba 0f00 	cmp.w	sl, #0
 80014a8:	dc26      	bgt.n	80014f8 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xc4>
      return __result + __count;
 80014aa:	4456      	add	r6, sl
		    this->_M_impl._M_end_of_storage - __old_start);
 80014ac:	68a1      	ldr	r1, [r4, #8]
 80014ae:	eba1 0109 	sub.w	r1, r1, r9
	if (__p)
 80014b2:	f1b9 0f00 	cmp.w	r9, #0
 80014b6:	d002      	beq.n	80014be <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8a>
	::operator delete(__p
 80014b8:	4648      	mov	r0, r9
 80014ba:	f019 fd53 	bl	801af64 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 80014be:	6027      	str	r7, [r4, #0]
      this->_M_impl._M_finish = __new_finish;
 80014c0:	6066      	str	r6, [r4, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80014c2:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80014c6:	60a5      	str	r5, [r4, #8]
    }
 80014c8:	b003      	add	sp, #12
 80014ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_length_error(__N(__s));
 80014ce:	480d      	ldr	r0, [pc, #52]	; (8001504 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xd0>)
 80014d0:	f019 fe12 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 80014d4:	466b      	mov	r3, sp
 80014d6:	e7c2      	b.n	800145e <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80014d8:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 80014dc:	e7c9      	b.n	8001472 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
 80014de:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 80014e2:	e7c6      	b.n	8001472 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	  std::__throw_bad_alloc();
 80014e4:	f019 fe02 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80014e8:	2700      	movs	r7, #0
 80014ea:	e7d0      	b.n	800148e <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80014ec:	4632      	mov	r2, r6
 80014ee:	4649      	mov	r1, r9
 80014f0:	4638      	mov	r0, r7
 80014f2:	f01a fa0b 	bl	801b90c <memmove>
 80014f6:	e7d1      	b.n	800149c <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x68>
 80014f8:	4652      	mov	r2, sl
 80014fa:	4641      	mov	r1, r8
 80014fc:	4630      	mov	r0, r6
 80014fe:	f01a fa05 	bl	801b90c <memmove>
 8001502:	e7d2      	b.n	80014aa <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x76>
 8001504:	0801bde4 	.word	0x0801bde4

08001508 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>:
void TemplateCommunicationProtocol<H>::AddInterface(uint8_t ID, H* interface) {
 8001508:	b510      	push	{r4, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	4604      	mov	r4, r0
 800150e:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 8001510:	f016 fd12 	bl	8017f38 <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 8001514:	4620      	mov	r0, r4
 8001516:	f016 fe67 	bl	80181e8 <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	interfaces.push_back(interface);
 800151a:	f104 0038 	add.w	r0, r4, #56	; 0x38
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800151e:	6841      	ldr	r1, [r0, #4]
 8001520:	6883      	ldr	r3, [r0, #8]
 8001522:	4299      	cmp	r1, r3
 8001524:	d006      	beq.n	8001534 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_+0x2c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001526:	9b01      	ldr	r3, [sp, #4]
 8001528:	600b      	str	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 800152a:	6843      	ldr	r3, [r0, #4]
 800152c:	3304      	adds	r3, #4
 800152e:	6043      	str	r3, [r0, #4]
}
 8001530:	b002      	add	sp, #8
 8001532:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 8001534:	aa01      	add	r2, sp, #4
 8001536:	f7ff ff7d 	bl	8001434 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 800153a:	e7f9      	b.n	8001530 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_+0x28>

0800153c <main>:
{
 800153c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001540:	b0bb      	sub	sp, #236	; 0xec
  HAL_Init();
 8001542:	f002 f91f 	bl	8003784 <HAL_Init>
  SystemClock_Config();
 8001546:	f7ff fdf3 	bl	8001130 <_Z18SystemClock_Configv>
  PeriphCommonClock_Config();
 800154a:	f7ff fe83 	bl	8001254 <_Z24PeriphCommonClock_Configv>
  MX_GPIO_Init();
 800154e:	f7ff f85b 	bl	8000608 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001552:	f7ff f969 	bl	8000828 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8001556:	f7ff fa8d 	bl	8000a74 <_ZL12MX_ADC1_Initv>
  MX_FDCAN1_Init();
 800155a:	f7ff fadb 	bl	8000b14 <_ZL14MX_FDCAN1_Initv>
  MX_FDCAN2_Init();
 800155e:	f7ff fb0d 	bl	8000b7c <_ZL14MX_FDCAN2_Initv>
  MX_I2C1_Init();
 8001562:	f7ff fb41 	bl	8000be8 <_ZL12MX_I2C1_Initv>
  MX_I2C4_Init();
 8001566:	f7ff fb6b 	bl	8000c40 <_ZL12MX_I2C4_Initv>
  MX_USART1_UART_Init();
 800156a:	f7ff fb95 	bl	8000c98 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 800156e:	f7ff fbc3 	bl	8000cf8 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 8001572:	f7ff fbf1 	bl	8000d58 <_ZL19MX_USART3_UART_Initv>
  MX_USART6_UART_Init();
 8001576:	f7ff fc21 	bl	8000dbc <_ZL19MX_USART6_UART_Initv>
  MX_TIM4_Init();
 800157a:	f7ff fc4f 	bl	8000e1c <_ZL12MX_TIM4_Initv>
  MX_ADC3_Init();
 800157e:	f7ff fc83 	bl	8000e88 <_ZL12MX_ADC3_Initv>
  MX_UART4_Init();
 8001582:	f7ff fcc7 	bl	8000f14 <_ZL13MX_UART4_Initv>
  MX_UART8_Init();
 8001586:	f7ff fcf5 	bl	8000f74 <_ZL13MX_UART8_Initv>
  MX_UART7_Init();
 800158a:	f7ff fd23 	bl	8000fd4 <_ZL13MX_UART7_Initv>
  MX_SDMMC1_SD_Init();
 800158e:	f7ff fd53 	bl	8001038 <_ZL17MX_SDMMC1_SD_Initv>
  MX_TIM3_Init();
 8001592:	f7ff fd69 	bl	8001068 <_ZL12MX_TIM3_Initv>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8001596:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 8001944 <main+0x408>
 800159a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800159e:	2100      	movs	r1, #0
 80015a0:	4658      	mov	r0, fp
 80015a2:	f002 fdeb 	bl	800417c <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80015a6:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8001948 <main+0x40c>
 80015aa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80015ae:	2100      	movs	r1, #0
 80015b0:	4650      	mov	r0, sl
 80015b2:	f002 fde3 	bl	800417c <HAL_ADCEx_Calibration_Start>
  registers.Init();
 80015b6:	4dd7      	ldr	r5, [pc, #860]	; (8001914 <main+0x3d8>)
 80015b8:	4628      	mov	r0, r5
 80015ba:	f018 fb5d 	bl	8019c78 <_ZN9Registers4InitEv>
  leds.Init(&registers);
 80015be:	4cd6      	ldr	r4, [pc, #856]	; (8001918 <main+0x3dc>)
 80015c0:	4629      	mov	r1, r5
 80015c2:	4620      	mov	r0, r4
 80015c4:	f014 fd70 	bl	80160a8 <_ZN4LEDS4InitEP9Registers>
  registers.Init(); 																registers.AddBaseRegisters();
 80015c8:	4628      	mov	r0, r5
 80015ca:	f018 fb55 	bl	8019c78 <_ZN9Registers4InitEv>
 80015ce:	4628      	mov	r0, r5
 80015d0:	f018 fc9c 	bl	8019f0c <_ZN9Registers16AddBaseRegistersEv>
  communication.Init(&registers, &services, &subscribers, &leds);					communication.AddRegisters();
 80015d4:	f8df 9374 	ldr.w	r9, [pc, #884]	; 800194c <main+0x410>
 80015d8:	f8df 8374 	ldr.w	r8, [pc, #884]	; 8001950 <main+0x414>
 80015dc:	4fcf      	ldr	r7, [pc, #828]	; (800191c <main+0x3e0>)
 80015de:	9400      	str	r4, [sp, #0]
 80015e0:	464b      	mov	r3, r9
 80015e2:	4642      	mov	r2, r8
 80015e4:	4629      	mov	r1, r5
 80015e6:	4638      	mov	r0, r7
 80015e8:	f00d fa81 	bl	800eaee <_ZN13Communication4InitEP9RegistersP8ServicesP17MasterSubscribersP4LEDS>
 80015ec:	4638      	mov	r0, r7
 80015ee:	f00d fe8f 	bl	800f310 <_ZN13Communication12AddRegistersEv>
  services.Init(&registers, &communication, &leds);
 80015f2:	4623      	mov	r3, r4
 80015f4:	463a      	mov	r2, r7
 80015f6:	4629      	mov	r1, r5
 80015f8:	4640      	mov	r0, r8
 80015fa:	f019 f8ef 	bl	801a7dc <_ZN8Services4InitEP9RegistersP13CommunicationP4LEDS>
  publishers.Init(&registers, &communication); 										publishers.AddRegisters();
 80015fe:	4ec8      	ldr	r6, [pc, #800]	; (8001920 <main+0x3e4>)
 8001600:	463a      	mov	r2, r7
 8001602:	4629      	mov	r1, r5
 8001604:	4630      	mov	r0, r6
 8001606:	f017 fe26 	bl	8019256 <_ZN10Publishers4InitEP9RegistersP13Communication>
 800160a:	4630      	mov	r0, r6
 800160c:	f018 fa06 	bl	8019a1c <_ZN10Publishers12AddRegistersEv>
  subscribers.Init(&registers, &leds);												subscribers.AddRegisters();
 8001610:	4622      	mov	r2, r4
 8001612:	4629      	mov	r1, r5
 8001614:	4648      	mov	r0, r9
 8001616:	f019 fa28 	bl	801aa6a <_ZN17MasterSubscribers4InitEP9RegistersP4LEDS>
 800161a:	4648      	mov	r0, r9
 800161c:	f019 fbe8 	bl	801adf0 <_ZN17MasterSubscribers12AddRegistersEv>
  sensors.Init(&registers, &publishers, &hardware_delay, &leds, &hadc3, &hadc1);	sensors.AddRegisters();
 8001620:	f8df 9330 	ldr.w	r9, [pc, #816]	; 8001954 <main+0x418>
 8001624:	f8cd b008 	str.w	fp, [sp, #8]
 8001628:	f8cd a004 	str.w	sl, [sp, #4]
 800162c:	9400      	str	r4, [sp, #0]
 800162e:	4bbd      	ldr	r3, [pc, #756]	; (8001924 <main+0x3e8>)
 8001630:	4632      	mov	r2, r6
 8001632:	4629      	mov	r1, r5
 8001634:	4648      	mov	r0, r9
 8001636:	f018 feb1 	bl	801a39c <_ZN7Sensors4InitEP9RegistersP10PublishersP13HardwareDelayP4LEDSP17ADC_HandleTypeDefS9_>
 800163a:	4648      	mov	r0, r9
 800163c:	f018 fff6 	bl	801a62c <_ZN7Sensors12AddRegistersEv>
  leds.Init(&registers);															leds.AddRegisters();
 8001640:	4629      	mov	r1, r5
 8001642:	4620      	mov	r0, r4
 8001644:	f014 fd30 	bl	80160a8 <_ZN4LEDS4InitEP9Registers>
 8001648:	4620      	mov	r0, r4
 800164a:	f015 f92f 	bl	80168ac <_ZN4LEDS12AddRegistersEv>
  motion_generator.Init(&registers, &publishers, &services, &leds);					motion_generator.AddRegisters();
 800164e:	f8df 9308 	ldr.w	r9, [pc, #776]	; 8001958 <main+0x41c>
 8001652:	9400      	str	r4, [sp, #0]
 8001654:	4643      	mov	r3, r8
 8001656:	4632      	mov	r2, r6
 8001658:	4629      	mov	r1, r5
 800165a:	4648      	mov	r0, r9
 800165c:	f015 fe84 	bl	8017368 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS>
 8001660:	4648      	mov	r0, r9
 8001662:	f016 fa6d 	bl	8017b40 <_ZN15MotionGenerator12AddRegistersEv>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); 			// R LED
 8001666:	4db0      	ldr	r5, [pc, #704]	; (8001928 <main+0x3ec>)
 8001668:	2100      	movs	r1, #0
 800166a:	4628      	mov	r0, r5
 800166c:	f009 fae4 	bl	800ac38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); 			// G LED
 8001670:	2104      	movs	r1, #4
 8001672:	4628      	mov	r0, r5
 8001674:	f009 fae0 	bl	800ac38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); 			// B LED
 8001678:	2108      	movs	r1, #8
 800167a:	4628      	mov	r0, r5
 800167c:	f009 fadc 	bl	800ac38 <HAL_TIM_PWM_Start>
  leds.AddLED(LED_UART_RS485, GPIO {LED_RS485_GPIO_Port, LED_RS485_Pin});
 8001680:	4daa      	ldr	r5, [pc, #680]	; (800192c <main+0x3f0>)
 8001682:	ab06      	add	r3, sp, #24
 8001684:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001688:	e883 0003 	stmia.w	r3, {r0, r1}
 800168c:	cb0c      	ldmia	r3, {r2, r3}
 800168e:	2104      	movs	r1, #4
 8001690:	4620      	mov	r0, r4
 8001692:	f015 fb2d 	bl	8016cf0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_UART_BACK, GPIO {LED_UART_BACK_GPIO_Port, LED_UART_BACK_Pin});
 8001696:	ab08      	add	r3, sp, #32
 8001698:	f105 0208 	add.w	r2, r5, #8
 800169c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80016a4:	cb0c      	ldmia	r3, {r2, r3}
 80016a6:	2103      	movs	r1, #3
 80016a8:	4620      	mov	r0, r4
 80016aa:	f015 fb21 	bl	8016cf0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_CANFD2, GPIO {LED_FDCAN2_GPIO_Port, LED_FDCAN2_Pin});
 80016ae:	ab0a      	add	r3, sp, #40	; 0x28
 80016b0:	f105 0210 	add.w	r2, r5, #16
 80016b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80016bc:	cb0c      	ldmia	r3, {r2, r3}
 80016be:	2101      	movs	r1, #1
 80016c0:	4620      	mov	r0, r4
 80016c2:	f015 fb15 	bl	8016cf0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_CANFD1, GPIO {LED_FDCAN1_GPIO_Port, LED_FDCAN1_Pin});
 80016c6:	ab0c      	add	r3, sp, #48	; 0x30
 80016c8:	f105 0218 	add.w	r2, r5, #24
 80016cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80016d4:	cb0c      	ldmia	r3, {r2, r3}
 80016d6:	2100      	movs	r1, #0
 80016d8:	4620      	mov	r0, r4
 80016da:	f015 fb09 	bl	8016cf0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_UART_CM4, GPIO {LED_UART_CM4_GPIO_Port, LED_UART_CM4_Pin});
 80016de:	ab0e      	add	r3, sp, #56	; 0x38
 80016e0:	f105 0220 	add.w	r2, r5, #32
 80016e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80016ec:	cb0c      	ldmia	r3, {r2, r3}
 80016ee:	2102      	movs	r1, #2
 80016f0:	4620      	mov	r0, r4
 80016f2:	f015 fafd 	bl	8016cf0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_STATUS, GPIO {LED_STATUS_GPIO_Port, LED_STATUS_Pin});
 80016f6:	ab10      	add	r3, sp, #64	; 0x40
 80016f8:	f105 0228 	add.w	r2, r5, #40	; 0x28
 80016fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001700:	e883 0003 	stmia.w	r3, {r0, r1}
 8001704:	cb0c      	ldmia	r3, {r2, r3}
 8001706:	2107      	movs	r1, #7
 8001708:	4620      	mov	r0, r4
 800170a:	f015 faf1 	bl	8016cf0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_ACTIVITY, GPIO {LED_ACTIVITY_GPIO_Port, LED_ACTIVITY_Pin});
 800170e:	ab12      	add	r3, sp, #72	; 0x48
 8001710:	f105 0230 	add.w	r2, r5, #48	; 0x30
 8001714:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001718:	e883 0003 	stmia.w	r3, {r0, r1}
 800171c:	cb0c      	ldmia	r3, {r2, r3}
 800171e:	2108      	movs	r1, #8
 8001720:	4620      	mov	r0, r4
 8001722:	f015 fae5 	bl	8016cf0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_FAULT, GPIO {LED_FAULT_GPIO_Port, LED_FAULT_Pin});
 8001726:	ab14      	add	r3, sp, #80	; 0x50
 8001728:	f105 0238 	add.w	r2, r5, #56	; 0x38
 800172c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001730:	e883 0003 	stmia.w	r3, {r0, r1}
 8001734:	cb0c      	ldmia	r3, {r2, r3}
 8001736:	2109      	movs	r1, #9
 8001738:	4620      	mov	r0, r4
 800173a:	f015 fad9 	bl	8016cf0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER1, GPIO {LED_USER1_GPIO_Port, LED_USER1_Pin});
 800173e:	ab16      	add	r3, sp, #88	; 0x58
 8001740:	f105 0240 	add.w	r2, r5, #64	; 0x40
 8001744:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001748:	e883 0003 	stmia.w	r3, {r0, r1}
 800174c:	cb0c      	ldmia	r3, {r2, r3}
 800174e:	210a      	movs	r1, #10
 8001750:	4620      	mov	r0, r4
 8001752:	f015 facd 	bl	8016cf0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER2, GPIO {LED_USER2_GPIO_Port, LED_USER2_Pin});
 8001756:	ab18      	add	r3, sp, #96	; 0x60
 8001758:	f105 0248 	add.w	r2, r5, #72	; 0x48
 800175c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001760:	e883 0003 	stmia.w	r3, {r0, r1}
 8001764:	cb0c      	ldmia	r3, {r2, r3}
 8001766:	210b      	movs	r1, #11
 8001768:	4620      	mov	r0, r4
 800176a:	f015 fac1 	bl	8016cf0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 800176e:	ab1a      	add	r3, sp, #104	; 0x68
 8001770:	3550      	adds	r5, #80	; 0x50
 8001772:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001776:	e883 0003 	stmia.w	r3, {r0, r1}
 800177a:	cb0c      	ldmia	r3, {r2, r3}
 800177c:	210c      	movs	r1, #12
 800177e:	4620      	mov	r0, r4
 8001780:	f015 fab6 	bl	8016cf0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 8001784:	2601      	movs	r6, #1
 8001786:	f88d 6084 	strb.w	r6, [sp, #132]	; 0x84
 800178a:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 800178e:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 8001792:	9620      	str	r6, [sp, #128]	; 0x80
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001794:	f10d 0810 	add.w	r8, sp, #16
 8001798:	ab1f      	add	r3, sp, #124	; 0x7c
 800179a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800179e:	e888 0003 	stmia.w	r8, {r0, r1}
	: _M_start(), _M_finish(), _M_end_of_storage()
 80017a2:	2500      	movs	r5, #0
 80017a4:	951c      	str	r5, [sp, #112]	; 0x70
 80017a6:	951d      	str	r5, [sp, #116]	; 0x74
 80017a8:	951e      	str	r5, [sp, #120]	; 0x78
	_M_range_initialize(__l.begin(), __l.end(),
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	f10d 0285 	add.w	r2, sp, #133	; 0x85
 80017b2:	4661      	mov	r1, ip
 80017b4:	a81c      	add	r0, sp, #112	; 0x70
 80017b6:	f7ff fd83 	bl	80012c0 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag>
 80017ba:	2302      	movs	r3, #2
 80017bc:	aa1c      	add	r2, sp, #112	; 0x70
 80017be:	4629      	mov	r1, r5
 80017c0:	4620      	mov	r0, r4
 80017c2:	f015 fb24 	bl	8016e0e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
      }
 80017c6:	a81c      	add	r0, sp, #112	; 0x70
 80017c8:	f7ff fd70 	bl	80012ac <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_CANFD2, std::vector<uint8_t>{1}, 2);
 80017cc:	f88d 609c 	strb.w	r6, [sp, #156]	; 0x9c
 80017d0:	f10d 0c9c 	add.w	ip, sp, #156	; 0x9c
 80017d4:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
 80017d8:	9626      	str	r6, [sp, #152]	; 0x98
 80017da:	ab25      	add	r3, sp, #148	; 0x94
 80017dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017e0:	e888 0003 	stmia.w	r8, {r0, r1}
	: _M_start(), _M_finish(), _M_end_of_storage()
 80017e4:	9522      	str	r5, [sp, #136]	; 0x88
 80017e6:	9523      	str	r5, [sp, #140]	; 0x8c
 80017e8:	9524      	str	r5, [sp, #144]	; 0x90
	_M_range_initialize(__l.begin(), __l.end(),
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	f10d 029d 	add.w	r2, sp, #157	; 0x9d
 80017f2:	4661      	mov	r1, ip
 80017f4:	a822      	add	r0, sp, #136	; 0x88
 80017f6:	f7ff fd63 	bl	80012c0 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag>
 80017fa:	2302      	movs	r3, #2
 80017fc:	aa22      	add	r2, sp, #136	; 0x88
 80017fe:	4631      	mov	r1, r6
 8001800:	4620      	mov	r0, r4
 8001802:	f015 fb04 	bl	8016e0e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
      }
 8001806:	a822      	add	r0, sp, #136	; 0x88
 8001808:	f7ff fd50 	bl	80012ac <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_CM4, std::vector<uint8_t>{1}, 2);
 800180c:	f88d 60b4 	strb.w	r6, [sp, #180]	; 0xb4
 8001810:	f10d 0cb4 	add.w	ip, sp, #180	; 0xb4
 8001814:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
 8001818:	962c      	str	r6, [sp, #176]	; 0xb0
 800181a:	ab2b      	add	r3, sp, #172	; 0xac
 800181c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001820:	e888 0003 	stmia.w	r8, {r0, r1}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001824:	9528      	str	r5, [sp, #160]	; 0xa0
 8001826:	9529      	str	r5, [sp, #164]	; 0xa4
 8001828:	952a      	str	r5, [sp, #168]	; 0xa8
	_M_range_initialize(__l.begin(), __l.end(),
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	f10d 02b5 	add.w	r2, sp, #181	; 0xb5
 8001832:	4661      	mov	r1, ip
 8001834:	a828      	add	r0, sp, #160	; 0xa0
 8001836:	f7ff fd43 	bl	80012c0 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag>
 800183a:	2302      	movs	r3, #2
 800183c:	aa28      	add	r2, sp, #160	; 0xa0
 800183e:	4619      	mov	r1, r3
 8001840:	4620      	mov	r0, r4
 8001842:	f015 fae4 	bl	8016e0e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
      }
 8001846:	a828      	add	r0, sp, #160	; 0xa0
 8001848:	f7ff fd30 	bl	80012ac <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_BACK, std::vector<uint8_t>{1}, 2);
 800184c:	f88d 60cc 	strb.w	r6, [sp, #204]	; 0xcc
 8001850:	f10d 0ccc 	add.w	ip, sp, #204	; 0xcc
 8001854:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
 8001858:	9632      	str	r6, [sp, #200]	; 0xc8
 800185a:	ab31      	add	r3, sp, #196	; 0xc4
 800185c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001860:	e888 0003 	stmia.w	r8, {r0, r1}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001864:	952e      	str	r5, [sp, #184]	; 0xb8
 8001866:	952f      	str	r5, [sp, #188]	; 0xbc
 8001868:	9530      	str	r5, [sp, #192]	; 0xc0
	_M_range_initialize(__l.begin(), __l.end(),
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	f10d 02cd 	add.w	r2, sp, #205	; 0xcd
 8001872:	4661      	mov	r1, ip
 8001874:	a82e      	add	r0, sp, #184	; 0xb8
 8001876:	f7ff fd23 	bl	80012c0 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag>
 800187a:	2302      	movs	r3, #2
 800187c:	aa2e      	add	r2, sp, #184	; 0xb8
 800187e:	2103      	movs	r1, #3
 8001880:	4620      	mov	r0, r4
 8001882:	f015 fac4 	bl	8016e0e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
      }
 8001886:	a82e      	add	r0, sp, #184	; 0xb8
 8001888:	f7ff fd10 	bl	80012ac <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_RS485, std::vector<uint8_t>{1}, 2);
 800188c:	f88d 60e4 	strb.w	r6, [sp, #228]	; 0xe4
 8001890:	f10d 0ce4 	add.w	ip, sp, #228	; 0xe4
 8001894:	f8cd c0dc 	str.w	ip, [sp, #220]	; 0xdc
 8001898:	9638      	str	r6, [sp, #224]	; 0xe0
 800189a:	ab37      	add	r3, sp, #220	; 0xdc
 800189c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018a0:	e888 0003 	stmia.w	r8, {r0, r1}
	: _M_start(), _M_finish(), _M_end_of_storage()
 80018a4:	9534      	str	r5, [sp, #208]	; 0xd0
 80018a6:	9535      	str	r5, [sp, #212]	; 0xd4
 80018a8:	9536      	str	r5, [sp, #216]	; 0xd8
	_M_range_initialize(__l.begin(), __l.end(),
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	f10d 02e5 	add.w	r2, sp, #229	; 0xe5
 80018b2:	4661      	mov	r1, ip
 80018b4:	a834      	add	r0, sp, #208	; 0xd0
 80018b6:	f7ff fd03 	bl	80012c0 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag>
 80018ba:	2302      	movs	r3, #2
 80018bc:	aa34      	add	r2, sp, #208	; 0xd0
 80018be:	2104      	movs	r1, #4
 80018c0:	4620      	mov	r0, r4
 80018c2:	f015 faa4 	bl	8016e0e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
      }
 80018c6:	a834      	add	r0, sp, #208	; 0xd0
 80018c8:	f7ff fcf0 	bl	80012ac <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.AddRGBLED(LED_RGB, const_cast<uint32_t*>(&(TIM3->CCR1)), const_cast<uint32_t*>(&(TIM3->CCR2)), const_cast<uint32_t*>(&(TIM3->CCR3)));
 80018cc:	4b18      	ldr	r3, [pc, #96]	; (8001930 <main+0x3f4>)
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	3b04      	subs	r3, #4
 80018d2:	4a18      	ldr	r2, [pc, #96]	; (8001934 <main+0x3f8>)
 80018d4:	210d      	movs	r1, #13
 80018d6:	4620      	mov	r0, r4
 80018d8:	f014 ffa6 	bl	8016828 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_>
  leds.TestLEDs();
 80018dc:	4620      	mov	r0, r4
 80018de:	f015 f85d 	bl	801699c <_ZN4LEDS8TestLEDsEv>
  leds.StartupLEDS();
 80018e2:	4620      	mov	r0, r4
 80018e4:	f015 fb34 	bl	8016f50 <_ZN4LEDS11StartupLEDSEv>
  communication.SetModuleAddress(STM32_HEAD);
 80018e8:	4631      	mov	r1, r6
 80018ea:	4638      	mov	r0, r7
 80018ec:	f00d f991 	bl	800ec12 <_ZN13Communication16SetModuleAddressEh>
  protocol_uart.SetProtocolPayloadMaxLength(256);
 80018f0:	4c11      	ldr	r4, [pc, #68]	; (8001938 <main+0x3fc>)
 80018f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f6:	4620      	mov	r0, r4
 80018f8:	f016 fae8 	bl	8017ecc <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>
  protocol_uart.AddInterface(UART_CM4, &huart1);
 80018fc:	4a0f      	ldr	r2, [pc, #60]	; (800193c <main+0x400>)
 80018fe:	2102      	movs	r1, #2
 8001900:	4620      	mov	r0, r4
 8001902:	f7ff fe01 	bl	8001508 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  protocol_uart.AddInterface(UART_BACK, &huart6);
 8001906:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <main+0x404>)
 8001908:	2103      	movs	r1, #3
 800190a:	4620      	mov	r0, r4
 800190c:	f7ff fdfc 	bl	8001508 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
 8001910:	e024      	b.n	800195c <main+0x420>
 8001912:	bf00      	nop
 8001914:	240011b4 	.word	0x240011b4
 8001918:	24001040 	.word	0x24001040
 800191c:	240000a4 	.word	0x240000a4
 8001920:	2400119c 	.word	0x2400119c
 8001924:	240001c8 	.word	0x240001c8
 8001928:	24000bb8 	.word	0x24000bb8
 800192c:	0801bcc0 	.word	0x0801bcc0
 8001930:	4000043c 	.word	0x4000043c
 8001934:	40000434 	.word	0x40000434
 8001938:	24001134 	.word	0x24001134
 800193c:	24000c50 	.word	0x24000c50
 8001940:	24000e90 	.word	0x24000e90
 8001944:	24000100 	.word	0x24000100
 8001948:	24000164 	.word	0x24000164
 800194c:	24002564 	.word	0x24002564
 8001950:	24001320 	.word	0x24001320
 8001954:	24001240 	.word	0x24001240
 8001958:	24001078 	.word	0x24001078
  protocol_uart.AddInterface(UART_RS485, &huart3);
 800195c:	4a42      	ldr	r2, [pc, #264]	; (8001a68 <main+0x52c>)
 800195e:	2104      	movs	r1, #4
 8001960:	4620      	mov	r0, r4
 8001962:	f7ff fdd1 	bl	8001508 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  protocol_uart.SetAsRS485(UART_RS485);
 8001966:	2104      	movs	r1, #4
 8001968:	4620      	mov	r0, r4
 800196a:	f017 f8d2 	bl	8018b12 <_ZN12UARTProtocol10SetAsRS485Eh>
  protocol_uart.AddInterface(UART_PIC, &huart2);
 800196e:	4a3f      	ldr	r2, [pc, #252]	; (8001a6c <main+0x530>)
 8001970:	2105      	movs	r1, #5
 8001972:	4620      	mov	r0, r4
 8001974:	f7ff fdc8 	bl	8001508 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  protocol_uart.AddInterface(UART_EXTENSION, &huart8);
 8001978:	4a3d      	ldr	r2, [pc, #244]	; (8001a70 <main+0x534>)
 800197a:	2106      	movs	r1, #6
 800197c:	4620      	mov	r0, r4
 800197e:	f7ff fdc3 	bl	8001508 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  communication.AddProtocol(&protocol_uart);
 8001982:	4621      	mov	r1, r4
 8001984:	4638      	mov	r0, r7
 8001986:	f00d fa69 	bl	800ee5c <_ZN13Communication11AddProtocolEP21CommunicationProtocol>
  communication.ActivateReception(UART_CM4);
 800198a:	2102      	movs	r1, #2
 800198c:	4638      	mov	r0, r7
 800198e:	f00d f92e 	bl	800ebee <_ZN13Communication17ActivateReceptionEh>
  communication.ActivateReception(UART_BACK);
 8001992:	2103      	movs	r1, #3
 8001994:	4638      	mov	r0, r7
 8001996:	f00d f92a 	bl	800ebee <_ZN13Communication17ActivateReceptionEh>
  communication.ActivateReception(UART_RS485);
 800199a:	2104      	movs	r1, #4
 800199c:	4638      	mov	r0, r7
 800199e:	f00d f926 	bl	800ebee <_ZN13Communication17ActivateReceptionEh>
  communication.ActivateReception(UART_PIC);
 80019a2:	2105      	movs	r1, #5
 80019a4:	4638      	mov	r0, r7
 80019a6:	f00d f922 	bl	800ebee <_ZN13Communication17ActivateReceptionEh>
  communication.ActivateReception(UART_EXTENSION);
 80019aa:	2106      	movs	r1, #6
 80019ac:	4638      	mov	r0, r7
 80019ae:	f00d f91e 	bl	800ebee <_ZN13Communication17ActivateReceptionEh>
  protocol_canfd.SetProtocolPayloadMaxLength(62);
 80019b2:	4c30      	ldr	r4, [pc, #192]	; (8001a74 <main+0x538>)
 80019b4:	213e      	movs	r1, #62	; 0x3e
 80019b6:	4620      	mov	r0, r4
 80019b8:	f016 fa88 	bl	8017ecc <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>
  protocol_canfd.AddInterface(CANFD1, &hfdcan1);
 80019bc:	4a2e      	ldr	r2, [pc, #184]	; (8001a78 <main+0x53c>)
 80019be:	4629      	mov	r1, r5
 80019c0:	4620      	mov	r0, r4
 80019c2:	f016 fdf9 	bl	80185b8 <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef>
  protocol_canfd.ConfigureFilters(CANFD1);
 80019c6:	4629      	mov	r1, r5
 80019c8:	4620      	mov	r0, r4
 80019ca:	f016 fd3c 	bl	8018446 <_ZN11CANProtocol16ConfigureFiltersEh>
  protocol_canfd.ActivateReception(CANFD1);
 80019ce:	4629      	mov	r1, r5
 80019d0:	4620      	mov	r0, r4
 80019d2:	f016 fd4c 	bl	801846e <_ZN11CANProtocol17ActivateReceptionEh>
  protocol_canfd.Start(CANFD1);
 80019d6:	4629      	mov	r1, r5
 80019d8:	4620      	mov	r0, r4
 80019da:	f016 fd5a 	bl	8018492 <_ZN11CANProtocol5StartEh>
  protocol_canfd.AddInterface(CANFD2, &hfdcan2);
 80019de:	4a27      	ldr	r2, [pc, #156]	; (8001a7c <main+0x540>)
 80019e0:	4631      	mov	r1, r6
 80019e2:	4620      	mov	r0, r4
 80019e4:	f016 fde8 	bl	80185b8 <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef>
  protocol_canfd.ConfigureFilters(CANFD2);
 80019e8:	4631      	mov	r1, r6
 80019ea:	4620      	mov	r0, r4
 80019ec:	f016 fd2b 	bl	8018446 <_ZN11CANProtocol16ConfigureFiltersEh>
  protocol_canfd.ActivateReception(CANFD2);
 80019f0:	4631      	mov	r1, r6
 80019f2:	4620      	mov	r0, r4
 80019f4:	f016 fd3b 	bl	801846e <_ZN11CANProtocol17ActivateReceptionEh>
  protocol_canfd.Start(CANFD2);
 80019f8:	4631      	mov	r1, r6
 80019fa:	4620      	mov	r0, r4
 80019fc:	f016 fd49 	bl	8018492 <_ZN11CANProtocol5StartEh>
  communication.AddProtocol(&protocol_canfd);
 8001a00:	4621      	mov	r1, r4
 8001a02:	4638      	mov	r0, r7
 8001a04:	f00d fa2a 	bl	800ee5c <_ZN13Communication11AddProtocolEP21CommunicationProtocol>
  communication.ActivateReception(CANFD1);
 8001a08:	4629      	mov	r1, r5
 8001a0a:	4638      	mov	r0, r7
 8001a0c:	f00d f8ef 	bl	800ebee <_ZN13Communication17ActivateReceptionEh>
  communication.ActivateReception(CANFD2);
 8001a10:	4631      	mov	r1, r6
 8001a12:	4638      	mov	r0, r7
 8001a14:	f00d f8eb 	bl	800ebee <_ZN13Communication17ActivateReceptionEh>
  user.Init();
 8001a18:	4c19      	ldr	r4, [pc, #100]	; (8001a80 <main+0x544>)
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	f019 fa2c 	bl	801ae78 <_ZN4User4InitEv>
  osKernelInitialize();
 8001a20:	f00a fe54 	bl	800c6cc <osKernelInitialize>
  TrajectoryHandle = osThreadNew(TrajectoryTask, NULL, &Trajectory_attributes);
 8001a24:	4a17      	ldr	r2, [pc, #92]	; (8001a84 <main+0x548>)
 8001a26:	4629      	mov	r1, r5
 8001a28:	4817      	ldr	r0, [pc, #92]	; (8001a88 <main+0x54c>)
 8001a2a:	f00a fe7d 	bl	800c728 <osThreadNew>
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <main+0x550>)
 8001a30:	6018      	str	r0, [r3, #0]
  SensorsHandle = osThreadNew(SensorsTask, NULL, &Sensors_attributes);
 8001a32:	4a17      	ldr	r2, [pc, #92]	; (8001a90 <main+0x554>)
 8001a34:	4629      	mov	r1, r5
 8001a36:	4817      	ldr	r0, [pc, #92]	; (8001a94 <main+0x558>)
 8001a38:	f00a fe76 	bl	800c728 <osThreadNew>
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <main+0x55c>)
 8001a3e:	6018      	str	r0, [r3, #0]
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 8001a40:	4a16      	ldr	r2, [pc, #88]	; (8001a9c <main+0x560>)
 8001a42:	4629      	mov	r1, r5
 8001a44:	4816      	ldr	r0, [pc, #88]	; (8001aa0 <main+0x564>)
 8001a46:	f00a fe6f 	bl	800c728 <osThreadNew>
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <main+0x568>)
 8001a4c:	6018      	str	r0, [r3, #0]
  LEDsHandle = osThreadNew(LEDsTask, NULL, &LEDs_attributes);
 8001a4e:	4a16      	ldr	r2, [pc, #88]	; (8001aa8 <main+0x56c>)
 8001a50:	4629      	mov	r1, r5
 8001a52:	4816      	ldr	r0, [pc, #88]	; (8001aac <main+0x570>)
 8001a54:	f00a fe68 	bl	800c728 <osThreadNew>
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <main+0x574>)
 8001a5a:	6018      	str	r0, [r3, #0]
  user.AddOSThreads();
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	f019 fa0c 	bl	801ae7a <_ZN4User12AddOSThreadsEv>
  osKernelStart();
 8001a62:	f00a fe45 	bl	800c6f0 <osKernelStart>
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <main+0x52a>
 8001a68:	24000d70 	.word	0x24000d70
 8001a6c:	24000ce0 	.word	0x24000ce0
 8001a70:	24000fb0 	.word	0x24000fb0
 8001a74:	240010e0 	.word	0x240010e0
 8001a78:	24000964 	.word	0x24000964
 8001a7c:	24000a04 	.word	0x24000a04
 8001a80:	24002588 	.word	0x24002588
 8001a84:	0801bf4c 	.word	0x0801bf4c
 8001a88:	08000969 	.word	0x08000969
 8001a8c:	240000a0 	.word	0x240000a0
 8001a90:	0801bf28 	.word	0x0801bf28
 8001a94:	08000975 	.word	0x08000975
 8001a98:	2400009c 	.word	0x2400009c
 8001a9c:	0801bf70 	.word	0x0801bf70
 8001aa0:	08000981 	.word	0x08000981
 8001aa4:	24000094 	.word	0x24000094
 8001aa8:	0801bf04 	.word	0x0801bf04
 8001aac:	08000991 	.word	0x08000991
 8001ab0:	24000098 	.word	0x24000098

08001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 8001ab4:	4770      	bx	lr

08001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_FDCAN_RxFifo0Callback>:
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8001ab8:	f011 0f01 	tst.w	r1, #1
 8001abc:	d100      	bne.n	8001ac0 <HAL_FDCAN_RxFifo0Callback+0x8>
 8001abe:	4770      	bx	lr
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8001ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac4:	b0a2      	sub	sp, #136	; 0x88
 8001ac6:	4604      	mov	r4, r0
	    HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8001ac8:	ab0f      	add	r3, sp, #60	; 0x3c
 8001aca:	aa05      	add	r2, sp, #20
 8001acc:	2140      	movs	r1, #64	; 0x40
 8001ace:	f004 fb3f 	bl	8006150 <HAL_FDCAN_GetRxMessage>
		ID = communication.GetID((void*) hfdcan, &success);
 8001ad2:	f10d 0206 	add.w	r2, sp, #6
 8001ad6:	4621      	mov	r1, r4
 8001ad8:	4833      	ldr	r0, [pc, #204]	; (8001ba8 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 8001ada:	f00d f84c 	bl	800eb76 <_ZN13Communication5GetIDEPvPb>
 8001ade:	4605      	mov	r5, r0
		if (!success) {communication.ActivateReception(ID); return;}
 8001ae0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d04f      	beq.n	8001b88 <HAL_FDCAN_RxFifo0Callback+0xd0>
	    uint8_t target_address = (uint8_t) RxHeader.Identifier;
 8001ae8:	9b05      	ldr	r3, [sp, #20]
 8001aea:	f88d 3007 	strb.w	r3, [sp, #7]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001aee:	2600      	movs	r6, #0
 8001af0:	9602      	str	r6, [sp, #8]
 8001af2:	9603      	str	r6, [sp, #12]
 8001af4:	9604      	str	r6, [sp, #16]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001af6:	2040      	movs	r0, #64	; 0x40
 8001af8:	f019 fa4a 	bl	801af90 <_Znwj>
 8001afc:	4604      	mov	r4, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8001afe:	9002      	str	r0, [sp, #8]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001b00:	3440      	adds	r4, #64	; 0x40
 8001b02:	9404      	str	r4, [sp, #16]
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001b04:	2240      	movs	r2, #64	; 0x40
 8001b06:	a90f      	add	r1, sp, #60	; 0x3c
 8001b08:	f019 ff00 	bl	801b90c <memmove>
	  this->_M_impl._M_finish =
 8001b0c:	9403      	str	r4, [sp, #12]
		received_data.insert(received_data.begin(), target_address);
 8001b0e:	f10d 0207 	add.w	r2, sp, #7
 8001b12:	9902      	ldr	r1, [sp, #8]
 8001b14:	a802      	add	r0, sp, #8
 8001b16:	f7ff fc6b 	bl	80013f0 <_ZNSt6vectorIhSaIhEE6insertEN9__gnu_cxx17__normal_iteratorIPKhS1_EERS4_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001b1a:	9c03      	ldr	r4, [sp, #12]
 8001b1c:	9b02      	ldr	r3, [sp, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001b1e:	961f      	str	r6, [sp, #124]	; 0x7c
 8001b20:	9620      	str	r6, [sp, #128]	; 0x80
 8001b22:	9621      	str	r6, [sp, #132]	; 0x84
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001b24:	1ae4      	subs	r4, r4, r3
 8001b26:	d036      	beq.n	8001b96 <HAL_FDCAN_RxFifo0Callback+0xde>
	if (__n > this->_M_max_size())
 8001b28:	42b4      	cmp	r4, r6
 8001b2a:	db32      	blt.n	8001b92 <HAL_FDCAN_RxFifo0Callback+0xda>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f019 fa2f 	bl	801af90 <_Znwj>
 8001b32:	4606      	mov	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8001b34:	961f      	str	r6, [sp, #124]	; 0x7c
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8001b36:	9620      	str	r6, [sp, #128]	; 0x80
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001b38:	4434      	add	r4, r6
 8001b3a:	9421      	str	r4, [sp, #132]	; 0x84
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8001b3c:	46b0      	mov	r8, r6
      return std::__niter_wrap(__result,
 8001b3e:	9802      	ldr	r0, [sp, #8]
 8001b40:	f7ff ffb9 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8001b44:	4607      	mov	r7, r0
 8001b46:	9803      	ldr	r0, [sp, #12]
 8001b48:	f7ff ffb5 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8001b4c:	1bc4      	subs	r4, r0, r7
 8001b4e:	d124      	bne.n	8001b9a <HAL_FDCAN_RxFifo0Callback+0xe2>
	  return __result + _Num;
 8001b50:	4444      	add	r4, r8
	this->_M_impl._M_finish =
 8001b52:	9420      	str	r4, [sp, #128]	; 0x80
		communication.Process(ID, received_data, &success);
 8001b54:	f10d 0306 	add.w	r3, sp, #6
 8001b58:	aa1f      	add	r2, sp, #124	; 0x7c
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	4812      	ldr	r0, [pc, #72]	; (8001ba8 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 8001b5e:	f014 f884 	bl	8015c6a <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>
	_M_deallocate(_M_impl._M_start,
 8001b62:	981f      	ldr	r0, [sp, #124]	; 0x7c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001b64:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001b66:	1a09      	subs	r1, r1, r0
	if (__p)
 8001b68:	b108      	cbz	r0, 8001b6e <HAL_FDCAN_RxFifo0Callback+0xb6>
	::operator delete(__p
 8001b6a:	f019 f9fb 	bl	801af64 <_ZdlPvj>
		communication.ActivateReception(ID);
 8001b6e:	4629      	mov	r1, r5
 8001b70:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 8001b72:	f00d f83c 	bl	800ebee <_ZN13Communication17ActivateReceptionEh>
	_M_deallocate(_M_impl._M_start,
 8001b76:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001b78:	9904      	ldr	r1, [sp, #16]
 8001b7a:	1a09      	subs	r1, r1, r0
	if (__p)
 8001b7c:	b108      	cbz	r0, 8001b82 <HAL_FDCAN_RxFifo0Callback+0xca>
 8001b7e:	f019 f9f1 	bl	801af64 <_ZdlPvj>
}
 8001b82:	b022      	add	sp, #136	; 0x88
 8001b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!success) {communication.ActivateReception(ID); return;}
 8001b88:	4601      	mov	r1, r0
 8001b8a:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <HAL_FDCAN_RxFifo0Callback+0xf0>)
 8001b8c:	f00d f82f 	bl	800ebee <_ZN13Communication17ActivateReceptionEh>
 8001b90:	e7f7      	b.n	8001b82 <HAL_FDCAN_RxFifo0Callback+0xca>
	  std::__throw_bad_alloc();
 8001b92:	f019 faab 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001b96:	2600      	movs	r6, #0
 8001b98:	e7cc      	b.n	8001b34 <HAL_FDCAN_RxFifo0Callback+0x7c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001b9a:	4622      	mov	r2, r4
 8001b9c:	4639      	mov	r1, r7
 8001b9e:	4630      	mov	r0, r6
 8001ba0:	f019 feb4 	bl	801b90c <memmove>
 8001ba4:	e7d4      	b.n	8001b50 <HAL_FDCAN_RxFifo0Callback+0x98>
 8001ba6:	bf00      	nop
 8001ba8:	240000a4 	.word	0x240000a4

08001bac <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8001bac:	4770      	bx	lr
	...

08001bb0 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag>:
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	f000 80fa 	beq.w	8001daa <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x1fa>
      vector<_Tp, _Alloc>::
 8001bb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	460d      	mov	r5, r1
 8001bc0:	4616      	mov	r6, r2
 8001bc2:	461f      	mov	r7, r3
    { return __lhs.base() - __rhs.base(); }
 8001bc4:	eba3 0802 	sub.w	r8, r3, r2
	  {
	    const size_type __n = std::distance(__first, __last);
	    if (size_type(this->_M_impl._M_end_of_storage
 8001bc8:	6883      	ldr	r3, [r0, #8]
			  - this->_M_impl._M_finish) >= __n)
 8001bca:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8001bce:	eba3 0309 	sub.w	r3, r3, r9
	    if (size_type(this->_M_impl._M_end_of_storage
 8001bd2:	4543      	cmp	r3, r8
 8001bd4:	d376      	bcc.n	8001cc4 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x114>
 8001bd6:	eba9 0a01 	sub.w	sl, r9, r1
	      {
		const size_type __elems_after = end() - __position;
		pointer __old_finish(this->_M_impl._M_finish);
		if (__elems_after > __n)
 8001bda:	45d0      	cmp	r8, sl
 8001bdc:	d233      	bcs.n	8001c46 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x96>
		  {
		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8001bde:	eba9 0a08 	sub.w	sl, r9, r8
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001be2:	4650      	mov	r0, sl
 8001be4:	f7ff ffe2 	bl	8001bac <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8001be8:	4683      	mov	fp, r0
 8001bea:	4648      	mov	r0, r9
 8001bec:	f7ff ffde 	bl	8001bac <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
	  if (_Num)
 8001bf0:	ebb0 020b 	subs.w	r2, r0, fp
 8001bf4:	d118      	bne.n	8001c28 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x78>
						this->_M_impl._M_finish,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
		    this->_M_impl._M_finish += __n;
 8001bf6:	6863      	ldr	r3, [r4, #4]
 8001bf8:	4443      	add	r3, r8
 8001bfa:	6063      	str	r3, [r4, #4]
	  if (_Num)
 8001bfc:	ebba 0205 	subs.w	r2, sl, r5
 8001c00:	d117      	bne.n	8001c32 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x82>
      return std::__niter_wrap(__result,
 8001c02:	4630      	mov	r0, r6
 8001c04:	f7ff ff56 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8001c08:	4606      	mov	r6, r0
 8001c0a:	4638      	mov	r0, r7
 8001c0c:	f7ff ff52 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8001c10:	4604      	mov	r4, r0
 8001c12:	4628      	mov	r0, r5
 8001c14:	f7ff ff4e 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
	  if (_Num)
 8001c18:	1ba2      	subs	r2, r4, r6
 8001c1a:	d110      	bne.n	8001c3e <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x8e>
    { return __from + (__res - std::__niter_base(__from)); }
 8001c1c:	4628      	mov	r0, r5
 8001c1e:	f7ff ff49 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
		this->_M_impl._M_end_of_storage = __new_start + __len;
	      }
	  }
      }
 8001c22:	b005      	add	sp, #20
 8001c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001c28:	4659      	mov	r1, fp
 8001c2a:	4648      	mov	r0, r9
 8001c2c:	f019 fe6e 	bl	801b90c <memmove>
 8001c30:	e7e1      	b.n	8001bf6 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x46>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8001c32:	4629      	mov	r1, r5
 8001c34:	eba9 0002 	sub.w	r0, r9, r2
 8001c38:	f019 fe68 	bl	801b90c <memmove>
 8001c3c:	e7e1      	b.n	8001c02 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x52>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001c3e:	4631      	mov	r1, r6
 8001c40:	f019 fe64 	bl	801b90c <memmove>
 8001c44:	e7ea      	b.n	8001c1c <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x6c>
      { _M_current += __n; return *this; }
 8001c46:	eb02 0b0a 	add.w	fp, r2, sl
		    std::__uninitialized_copy_a(__mid, __last,
 8001c4a:	6843      	ldr	r3, [r0, #4]
 8001c4c:	9301      	str	r3, [sp, #4]
      return std::__niter_wrap(__result,
 8001c4e:	4658      	mov	r0, fp
 8001c50:	f7ff ff30 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8001c54:	9000      	str	r0, [sp, #0]
 8001c56:	4638      	mov	r0, r7
 8001c58:	f7ff ff2c 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
	  if (_Num)
 8001c5c:	9b00      	ldr	r3, [sp, #0]
 8001c5e:	1ac2      	subs	r2, r0, r3
 8001c60:	d122      	bne.n	8001ca8 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0xf8>
		    this->_M_impl._M_finish += __n - __elems_after;
 8001c62:	eba8 080a 	sub.w	r8, r8, sl
 8001c66:	6863      	ldr	r3, [r4, #4]
 8001c68:	4498      	add	r8, r3
 8001c6a:	f8c4 8004 	str.w	r8, [r4, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001c6e:	4628      	mov	r0, r5
 8001c70:	f7ff ff9c 	bl	8001bac <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8001c74:	4607      	mov	r7, r0
 8001c76:	4648      	mov	r0, r9
 8001c78:	f7ff ff98 	bl	8001bac <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
	  if (_Num)
 8001c7c:	1bc2      	subs	r2, r0, r7
 8001c7e:	d118      	bne.n	8001cb2 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x102>
		    this->_M_impl._M_finish += __elems_after;
 8001c80:	6863      	ldr	r3, [r4, #4]
 8001c82:	4453      	add	r3, sl
 8001c84:	6063      	str	r3, [r4, #4]
      return std::__niter_wrap(__result,
 8001c86:	4630      	mov	r0, r6
 8001c88:	f7ff ff14 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8001c8c:	4606      	mov	r6, r0
 8001c8e:	4658      	mov	r0, fp
 8001c90:	f7ff ff10 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8001c94:	4604      	mov	r4, r0
 8001c96:	4628      	mov	r0, r5
 8001c98:	f7ff ff0c 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
	  if (_Num)
 8001c9c:	1ba2      	subs	r2, r4, r6
 8001c9e:	d10d      	bne.n	8001cbc <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x10c>
    { return __from + (__res - std::__niter_base(__from)); }
 8001ca0:	4628      	mov	r0, r5
 8001ca2:	f7ff ff07 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001ca6:	e7bc      	b.n	8001c22 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x72>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001ca8:	4619      	mov	r1, r3
 8001caa:	9801      	ldr	r0, [sp, #4]
 8001cac:	f019 fe2e 	bl	801b90c <memmove>
 8001cb0:	e7d7      	b.n	8001c62 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0xb2>
 8001cb2:	4639      	mov	r1, r7
 8001cb4:	4640      	mov	r0, r8
 8001cb6:	f019 fe29 	bl	801b90c <memmove>
 8001cba:	e7e1      	b.n	8001c80 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0xd0>
 8001cbc:	4631      	mov	r1, r6
 8001cbe:	f019 fe25 	bl	801b90c <memmove>
 8001cc2:	e7ed      	b.n	8001ca0 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0xf0>
 8001cc4:	f8cd 8008 	str.w	r8, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001cc8:	6842      	ldr	r2, [r0, #4]
 8001cca:	6803      	ldr	r3, [r0, #0]
 8001ccc:	1ad3      	subs	r3, r2, r3
	if (max_size() - size() < __n)
 8001cce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001cd2:	1ac9      	subs	r1, r1, r3
 8001cd4:	4541      	cmp	r1, r8
 8001cd6:	d346      	bcc.n	8001d66 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x1b6>
	const size_type __len = size() + (std::max)(size(), __n);
 8001cd8:	9303      	str	r3, [sp, #12]
      if (__a < __b)
 8001cda:	4543      	cmp	r3, r8
 8001cdc:	d346      	bcc.n	8001d6c <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x1bc>
      return __a;
 8001cde:	a903      	add	r1, sp, #12
 8001ce0:	6809      	ldr	r1, [r1, #0]
 8001ce2:	eb03 0801 	add.w	r8, r3, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001ce6:	6823      	ldr	r3, [r4, #0]
 8001ce8:	1ad2      	subs	r2, r2, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001cea:	4590      	cmp	r8, r2
 8001cec:	d340      	bcc.n	8001d70 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x1c0>
 8001cee:	f1b8 0f00 	cmp.w	r8, #0
 8001cf2:	db40      	blt.n	8001d76 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x1c6>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001cf4:	f1b8 0f00 	cmp.w	r8, #0
 8001cf8:	d042      	beq.n	8001d80 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x1d0>
	if (__n > this->_M_max_size())
 8001cfa:	f1b8 0f00 	cmp.w	r8, #0
 8001cfe:	db3d      	blt.n	8001d7c <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x1cc>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001d00:	4640      	mov	r0, r8
 8001d02:	f019 f945 	bl	801af90 <_Znwj>
 8001d06:	4682      	mov	sl, r0
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001d08:	6820      	ldr	r0, [r4, #0]
 8001d0a:	f7ff ff4f 	bl	8001bac <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8001d0e:	4683      	mov	fp, r0
 8001d10:	4628      	mov	r0, r5
 8001d12:	f7ff ff4b 	bl	8001bac <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
	  if (_Num)
 8001d16:	ebb0 090b 	subs.w	r9, r0, fp
 8001d1a:	d134      	bne.n	8001d86 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x1d6>
	  return __result + _Num;
 8001d1c:	44d1      	add	r9, sl
      return std::__niter_wrap(__result,
 8001d1e:	4630      	mov	r0, r6
 8001d20:	f7ff fec8 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8001d24:	4683      	mov	fp, r0
 8001d26:	4638      	mov	r0, r7
 8001d28:	f7ff fec4 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
	  if (_Num)
 8001d2c:	ebb0 060b 	subs.w	r6, r0, fp
 8001d30:	d12f      	bne.n	8001d92 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x1e2>
	  return __result + _Num;
 8001d32:	444e      	add	r6, r9
		      (__position.base(), this->_M_impl._M_finish,
 8001d34:	f8d4 9004 	ldr.w	r9, [r4, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001d38:	4628      	mov	r0, r5
 8001d3a:	f7ff ff37 	bl	8001bac <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8001d3e:	4607      	mov	r7, r0
 8001d40:	4648      	mov	r0, r9
 8001d42:	f7ff ff33 	bl	8001bac <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
	  if (_Num)
 8001d46:	1bc5      	subs	r5, r0, r7
 8001d48:	d129      	bne.n	8001d9e <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x1ee>
	  return __result + _Num;
 8001d4a:	4435      	add	r5, r6
		std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001d4c:	6820      	ldr	r0, [r4, #0]
			      this->_M_impl._M_end_of_storage
 8001d4e:	68a1      	ldr	r1, [r4, #8]
			      - this->_M_impl._M_start);
 8001d50:	1a09      	subs	r1, r1, r0
	if (__p)
 8001d52:	b108      	cbz	r0, 8001d58 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x1a8>
	::operator delete(__p
 8001d54:	f019 f906 	bl	801af64 <_ZdlPvj>
		this->_M_impl._M_start = __new_start;
 8001d58:	f8c4 a000 	str.w	sl, [r4]
		this->_M_impl._M_finish = __new_finish;
 8001d5c:	6065      	str	r5, [r4, #4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8001d5e:	eb0a 0008 	add.w	r0, sl, r8
 8001d62:	60a0      	str	r0, [r4, #8]
      }
 8001d64:	e75d      	b.n	8001c22 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x72>
	  __throw_length_error(__N(__s));
 8001d66:	4811      	ldr	r0, [pc, #68]	; (8001dac <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x1fc>)
 8001d68:	f019 f9c6 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 8001d6c:	a902      	add	r1, sp, #8
 8001d6e:	e7b7      	b.n	8001ce0 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x130>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001d70:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8001d74:	e7be      	b.n	8001cf4 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x144>
 8001d76:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8001d7a:	e7bb      	b.n	8001cf4 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x144>
	  std::__throw_bad_alloc();
 8001d7c:	f019 f9b6 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001d80:	f04f 0a00 	mov.w	sl, #0
 8001d84:	e7c0      	b.n	8001d08 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x158>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001d86:	464a      	mov	r2, r9
 8001d88:	4659      	mov	r1, fp
 8001d8a:	4650      	mov	r0, sl
 8001d8c:	f019 fdbe 	bl	801b90c <memmove>
 8001d90:	e7c4      	b.n	8001d1c <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x16c>
 8001d92:	4632      	mov	r2, r6
 8001d94:	4659      	mov	r1, fp
 8001d96:	4648      	mov	r0, r9
 8001d98:	f019 fdb8 	bl	801b90c <memmove>
 8001d9c:	e7c9      	b.n	8001d32 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x182>
 8001d9e:	462a      	mov	r2, r5
 8001da0:	4639      	mov	r1, r7
 8001da2:	4630      	mov	r0, r6
 8001da4:	f019 fdb2 	bl	801b90c <memmove>
 8001da8:	e7cf      	b.n	8001d4a <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag+0x19a>
 8001daa:	4770      	bx	lr
 8001dac:	0801be00 	.word	0x0801be00

08001db0 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001db4:	b097      	sub	sp, #92	; 0x5c
 8001db6:	460d      	mov	r5, r1
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001db8:	2300      	movs	r3, #0
 8001dba:	930a      	str	r3, [sp, #40]	; 0x28
 8001dbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8001dbe:	930c      	str	r3, [sp, #48]	; 0x30
	ID = communication.GetID((void*) huart, &success);
 8001dc0:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8001dc4:	4601      	mov	r1, r0
 8001dc6:	48ab      	ldr	r0, [pc, #684]	; (8002074 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001dc8:	f00c fed5 	bl	800eb76 <_ZN13Communication5GetIDEPvPb>
	if (!success) {return;}
 8001dcc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8001dd0:	b943      	cbnz	r3, 8001de4 <HAL_UARTEx_RxEventCallback+0x34>
	_M_deallocate(_M_impl._M_start,
 8001dd2:	980a      	ldr	r0, [sp, #40]	; 0x28
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001dd4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001dd6:	1a09      	subs	r1, r1, r0
	if (__p)
 8001dd8:	b108      	cbz	r0, 8001dde <HAL_UARTEx_RxEventCallback+0x2e>
	::operator delete(__p
 8001dda:	f019 f8c3 	bl	801af64 <_ZdlPvj>
}
 8001dde:	b017      	add	sp, #92	; 0x5c
 8001de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001de4:	4604      	mov	r4, r0
	std::vector<uint8_t>* buffer = communication.GetBuffer(ID, &success);
 8001de6:	4ea3      	ldr	r6, [pc, #652]	; (8002074 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001de8:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8001dec:	4601      	mov	r1, r0
 8001dee:	4630      	mov	r0, r6
 8001df0:	f00c fed7 	bl	800eba2 <_ZN13Communication9GetBufferEhPb>
 8001df4:	4607      	mov	r7, r0
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 8001df6:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8001dfa:	4621      	mov	r1, r4
 8001dfc:	4630      	mov	r0, r6
 8001dfe:	f00c feda 	bl	800ebb6 <_ZN13Communication14GetBufferIndexEhPb>
 8001e02:	4606      	mov	r6, r0
	if (!success) {communication.ActivateReception(ID); return;}
 8001e04:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d057      	beq.n	8001ebc <HAL_UARTEx_RxEventCallback+0x10c>
	if (Size == *buffer_index) {communication.ActivateReception(ID); return;}
 8001e0c:	8803      	ldrh	r3, [r0, #0]
 8001e0e:	42ab      	cmp	r3, r5
 8001e10:	d059      	beq.n	8001ec6 <HAL_UARTEx_RxEventCallback+0x116>
	if (Size > *buffer_index)
 8001e12:	42ab      	cmp	r3, r5
 8001e14:	d269      	bcs.n	8001eea <HAL_UARTEx_RxEventCallback+0x13a>
      : _M_current(__i) { }
 8001e16:	6839      	ldr	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8001e18:	eb01 0803 	add.w	r8, r1, r3
 8001e1c:	eb01 0905 	add.w	r9, r1, r5
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001e20:	2300      	movs	r3, #0
 8001e22:	930d      	str	r3, [sp, #52]	; 0x34
 8001e24:	930e      	str	r3, [sp, #56]	; 0x38
 8001e26:	930f      	str	r3, [sp, #60]	; 0x3c
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001e28:	ebb9 0a08 	subs.w	sl, r9, r8
 8001e2c:	d450      	bmi.n	8001ed0 <HAL_UARTEx_RxEventCallback+0x120>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001e2e:	f1ba 0f00 	cmp.w	sl, #0
 8001e32:	d052      	beq.n	8001eda <HAL_UARTEx_RxEventCallback+0x12a>
	if (__n > this->_M_max_size())
 8001e34:	f1ba 0f00 	cmp.w	sl, #0
 8001e38:	db4d      	blt.n	8001ed6 <HAL_UARTEx_RxEventCallback+0x126>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001e3a:	4650      	mov	r0, sl
 8001e3c:	f019 f8a8 	bl	801af90 <_Znwj>
 8001e40:	4605      	mov	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8001e42:	950d      	str	r5, [sp, #52]	; 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001e44:	eb05 030a 	add.w	r3, r5, sl
 8001e48:	930f      	str	r3, [sp, #60]	; 0x3c
      return std::__niter_wrap(__result,
 8001e4a:	4640      	mov	r0, r8
 8001e4c:	f7ff fe32 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8001e50:	4682      	mov	sl, r0
 8001e52:	4648      	mov	r0, r9
 8001e54:	f7ff fe2e 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
	  if (_Num)
 8001e58:	ebb0 080a 	subs.w	r8, r0, sl
 8001e5c:	d13f      	bne.n	8001ede <HAL_UARTEx_RxEventCallback+0x12e>
	  return __result + _Num;
 8001e5e:	eb05 0c08 	add.w	ip, r5, r8
	  this->_M_impl._M_finish =
 8001e62:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001e66:	2300      	movs	r3, #0
 8001e68:	9303      	str	r3, [sp, #12]
 8001e6a:	9304      	str	r3, [sp, #16]
 8001e6c:	9305      	str	r3, [sp, #20]
 8001e6e:	9306      	str	r3, [sp, #24]
 8001e70:	9307      	str	r3, [sp, #28]
 8001e72:	9308      	str	r3, [sp, #32]
	  _M_start = __x._M_start;
 8001e74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001e76:	9006      	str	r0, [sp, #24]
	  _M_finish = __x._M_finish;
 8001e78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001e7a:	9207      	str	r2, [sp, #28]
	  _M_end_of_storage = __x._M_end_of_storage;
 8001e7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001e7e:	9108      	str	r1, [sp, #32]
	  _M_start = __x._M_start;
 8001e80:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8001e82:	950a      	str	r5, [sp, #40]	; 0x28
	  _M_finish = __x._M_finish;
 8001e84:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
	  _M_end_of_storage = __x._M_end_of_storage;
 8001e88:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8001e8a:	950c      	str	r5, [sp, #48]	; 0x30
	  _M_start = __x._M_start;
 8001e8c:	900d      	str	r0, [sp, #52]	; 0x34
	  _M_finish = __x._M_finish;
 8001e8e:	920e      	str	r2, [sp, #56]	; 0x38
	  _M_end_of_storage = __x._M_end_of_storage;
 8001e90:	910f      	str	r1, [sp, #60]	; 0x3c
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001e92:	9306      	str	r3, [sp, #24]
 8001e94:	9307      	str	r3, [sp, #28]
 8001e96:	9308      	str	r3, [sp, #32]
	  _M_start = __x._M_start;
 8001e98:	9003      	str	r0, [sp, #12]
	  _M_finish = __x._M_finish;
 8001e9a:	9204      	str	r2, [sp, #16]
	  _M_end_of_storage = __x._M_end_of_storage;
 8001e9c:	9105      	str	r1, [sp, #20]
	  _M_start = __x._M_start;
 8001e9e:	930d      	str	r3, [sp, #52]	; 0x34
	  _M_finish = __x._M_finish;
 8001ea0:	930e      	str	r3, [sp, #56]	; 0x38
	  _M_end_of_storage = __x._M_end_of_storage;
 8001ea2:	930f      	str	r3, [sp, #60]	; 0x3c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ea4:	1a09      	subs	r1, r1, r0
	if (__p)
 8001ea6:	b108      	cbz	r0, 8001eac <HAL_UARTEx_RxEventCallback+0xfc>
	::operator delete(__p
 8001ea8:	f019 f85c 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001eac:	980d      	ldr	r0, [sp, #52]	; 0x34
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001eae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001eb0:	1a09      	subs	r1, r1, r0
	if (__p)
 8001eb2:	2800      	cmp	r0, #0
 8001eb4:	d07d      	beq.n	8001fb2 <HAL_UARTEx_RxEventCallback+0x202>
 8001eb6:	f019 f855 	bl	801af64 <_ZdlPvj>
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
 8001eba:	e07a      	b.n	8001fb2 <HAL_UARTEx_RxEventCallback+0x202>
	if (!success) {communication.ActivateReception(ID); return;}
 8001ebc:	4621      	mov	r1, r4
 8001ebe:	486d      	ldr	r0, [pc, #436]	; (8002074 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001ec0:	f00c fe95 	bl	800ebee <_ZN13Communication17ActivateReceptionEh>
 8001ec4:	e785      	b.n	8001dd2 <HAL_UARTEx_RxEventCallback+0x22>
	if (Size == *buffer_index) {communication.ActivateReception(ID); return;}
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	486a      	ldr	r0, [pc, #424]	; (8002074 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001eca:	f00c fe90 	bl	800ebee <_ZN13Communication17ActivateReceptionEh>
 8001ece:	e780      	b.n	8001dd2 <HAL_UARTEx_RxEventCallback+0x22>
	  __throw_length_error(
 8001ed0:	4869      	ldr	r0, [pc, #420]	; (8002078 <HAL_UARTEx_RxEventCallback+0x2c8>)
 8001ed2:	f019 f911 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	  std::__throw_bad_alloc();
 8001ed6:	f019 f909 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001eda:	2500      	movs	r5, #0
 8001edc:	e7b1      	b.n	8001e42 <HAL_UARTEx_RxEventCallback+0x92>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001ede:	4642      	mov	r2, r8
 8001ee0:	4651      	mov	r1, sl
 8001ee2:	4628      	mov	r0, r5
 8001ee4:	f019 fd12 	bl	801b90c <memmove>
 8001ee8:	e7b9      	b.n	8001e5e <HAL_UARTEx_RxEventCallback+0xae>
      : _M_current(__i) { }
 8001eea:	683a      	ldr	r2, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8001eec:	eb02 0a03 	add.w	sl, r2, r3
      : _M_current(__i) { }
 8001ef0:	f8d7 b004 	ldr.w	fp, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	9310      	str	r3, [sp, #64]	; 0x40
 8001ef8:	9311      	str	r3, [sp, #68]	; 0x44
 8001efa:	9312      	str	r3, [sp, #72]	; 0x48
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001efc:	ebbb 090a 	subs.w	r9, fp, sl
 8001f00:	f100 809e 	bmi.w	8002040 <HAL_UARTEx_RxEventCallback+0x290>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001f04:	f1b9 0f00 	cmp.w	r9, #0
 8001f08:	f000 809f 	beq.w	800204a <HAL_UARTEx_RxEventCallback+0x29a>
	if (__n > this->_M_max_size())
 8001f0c:	f1b9 0f00 	cmp.w	r9, #0
 8001f10:	f2c0 8099 	blt.w	8002046 <HAL_UARTEx_RxEventCallback+0x296>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001f14:	4648      	mov	r0, r9
 8001f16:	f019 f83b 	bl	801af90 <_Znwj>
 8001f1a:	4680      	mov	r8, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8001f1c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001f20:	eb08 0309 	add.w	r3, r8, r9
 8001f24:	9312      	str	r3, [sp, #72]	; 0x48
      return std::__niter_wrap(__result,
 8001f26:	4650      	mov	r0, sl
 8001f28:	f7ff fdc4 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8001f2c:	4681      	mov	r9, r0
 8001f2e:	4658      	mov	r0, fp
 8001f30:	f7ff fdc0 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
	  if (_Num)
 8001f34:	ebb0 0a09 	subs.w	sl, r0, r9
 8001f38:	f040 808a 	bne.w	8002050 <HAL_UARTEx_RxEventCallback+0x2a0>
	  return __result + _Num;
 8001f3c:	eb08 0e0a 	add.w	lr, r8, sl
	  this->_M_impl._M_finish =
 8001f40:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001f44:	2300      	movs	r3, #0
 8001f46:	9303      	str	r3, [sp, #12]
 8001f48:	9304      	str	r3, [sp, #16]
 8001f4a:	9305      	str	r3, [sp, #20]
 8001f4c:	9306      	str	r3, [sp, #24]
 8001f4e:	9307      	str	r3, [sp, #28]
 8001f50:	9308      	str	r3, [sp, #32]
	  _M_start = __x._M_start;
 8001f52:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001f54:	9006      	str	r0, [sp, #24]
	  _M_finish = __x._M_finish;
 8001f56:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8001f5a:	f8cd c01c 	str.w	ip, [sp, #28]
	  _M_end_of_storage = __x._M_end_of_storage;
 8001f5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001f60:	9108      	str	r1, [sp, #32]
	  _M_start = __x._M_start;
 8001f62:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001f64:	920a      	str	r2, [sp, #40]	; 0x28
	  _M_finish = __x._M_finish;
 8001f66:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
	  _M_end_of_storage = __x._M_end_of_storage;
 8001f6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001f6c:	920c      	str	r2, [sp, #48]	; 0x30
	  _M_start = __x._M_start;
 8001f6e:	9010      	str	r0, [sp, #64]	; 0x40
	  _M_finish = __x._M_finish;
 8001f70:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
	  _M_end_of_storage = __x._M_end_of_storage;
 8001f74:	9112      	str	r1, [sp, #72]	; 0x48
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001f76:	9306      	str	r3, [sp, #24]
 8001f78:	9307      	str	r3, [sp, #28]
 8001f7a:	9308      	str	r3, [sp, #32]
	  _M_start = __x._M_start;
 8001f7c:	9003      	str	r0, [sp, #12]
	  _M_finish = __x._M_finish;
 8001f7e:	f8cd c010 	str.w	ip, [sp, #16]
	  _M_end_of_storage = __x._M_end_of_storage;
 8001f82:	9105      	str	r1, [sp, #20]
	  _M_start = __x._M_start;
 8001f84:	9310      	str	r3, [sp, #64]	; 0x40
	  _M_finish = __x._M_finish;
 8001f86:	9311      	str	r3, [sp, #68]	; 0x44
	  _M_end_of_storage = __x._M_end_of_storage;
 8001f88:	9312      	str	r3, [sp, #72]	; 0x48
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f8a:	1a09      	subs	r1, r1, r0
	if (__p)
 8001f8c:	b108      	cbz	r0, 8001f92 <HAL_UARTEx_RxEventCallback+0x1e2>
	::operator delete(__p
 8001f8e:	f018 ffe9 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001f92:	9810      	ldr	r0, [sp, #64]	; 0x40
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f94:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001f96:	1a09      	subs	r1, r1, r0
	if (__p)
 8001f98:	b108      	cbz	r0, 8001f9e <HAL_UARTEx_RxEventCallback+0x1ee>
 8001f9a:	f018 ffe3 	bl	801af64 <_ZdlPvj>
 8001f9e:	683a      	ldr	r2, [r7, #0]
	  _M_range_insert(__pos, __first, __last,
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	f88d 3000 	strb.w	r3, [sp]
 8001fa8:	1953      	adds	r3, r2, r5
 8001faa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001fac:	a80a      	add	r0, sp, #40	; 0x28
 8001fae:	f7ff fdff 	bl	8001bb0 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001fb2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	9313      	str	r3, [sp, #76]	; 0x4c
 8001fba:	9314      	str	r3, [sp, #80]	; 0x50
 8001fbc:	9315      	str	r3, [sp, #84]	; 0x54
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001fbe:	1aad      	subs	r5, r5, r2
 8001fc0:	d04e      	beq.n	8002060 <HAL_UARTEx_RxEventCallback+0x2b0>
	if (__n > this->_M_max_size())
 8001fc2:	429d      	cmp	r5, r3
 8001fc4:	db4a      	blt.n	800205c <HAL_UARTEx_RxEventCallback+0x2ac>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001fc6:	4628      	mov	r0, r5
 8001fc8:	f018 ffe2 	bl	801af90 <_Znwj>
 8001fcc:	4680      	mov	r8, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8001fce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8001fd2:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001fd6:	4445      	add	r5, r8
 8001fd8:	9515      	str	r5, [sp, #84]	; 0x54
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8001fda:	46c2      	mov	sl, r8
      return std::__niter_wrap(__result,
 8001fdc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001fde:	f7ff fd6a 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8001fe2:	4681      	mov	r9, r0
 8001fe4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001fe6:	f7ff fd66 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8001fea:	ebb0 0509 	subs.w	r5, r0, r9
 8001fee:	d13a      	bne.n	8002066 <HAL_UARTEx_RxEventCallback+0x2b6>
	  return __result + _Num;
 8001ff0:	4455      	add	r5, sl
	this->_M_impl._M_finish =
 8001ff2:	9514      	str	r5, [sp, #80]	; 0x50
	uint16_t processed_length = communication.Process(ID, received_data, &success);
 8001ff4:	f10d 0327 	add.w	r3, sp, #39	; 0x27
 8001ff8:	aa13      	add	r2, sp, #76	; 0x4c
 8001ffa:	4621      	mov	r1, r4
 8001ffc:	481d      	ldr	r0, [pc, #116]	; (8002074 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001ffe:	f013 fe34 	bl	8015c6a <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>
 8002002:	4605      	mov	r5, r0
	_M_deallocate(_M_impl._M_start,
 8002004:	9813      	ldr	r0, [sp, #76]	; 0x4c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002006:	9915      	ldr	r1, [sp, #84]	; 0x54
 8002008:	1a09      	subs	r1, r1, r0
	if (__p)
 800200a:	b108      	cbz	r0, 8002010 <HAL_UARTEx_RxEventCallback+0x260>
	::operator delete(__p
 800200c:	f018 ffaa 	bl	801af64 <_ZdlPvj>
	*buffer_index += processed_length;
 8002010:	8833      	ldrh	r3, [r6, #0]
 8002012:	442b      	add	r3, r5
 8002014:	b29b      	uxth	r3, r3
 8002016:	8033      	strh	r3, [r6, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6839      	ldr	r1, [r7, #0]
 800201c:	1a52      	subs	r2, r2, r1
	if (*buffer_index >= buffer->size())
 800201e:	4293      	cmp	r3, r2
 8002020:	d301      	bcc.n	8002026 <HAL_UARTEx_RxEventCallback+0x276>
		*buffer_index -= buffer->size();
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	8033      	strh	r3, [r6, #0]
	communication.ActivateReception(ID);
 8002026:	4621      	mov	r1, r4
 8002028:	4812      	ldr	r0, [pc, #72]	; (8002074 <HAL_UARTEx_RxEventCallback+0x2c4>)
 800202a:	f00c fde0 	bl	800ebee <_ZN13Communication17ActivateReceptionEh>
	_M_deallocate(_M_impl._M_start,
 800202e:	980a      	ldr	r0, [sp, #40]	; 0x28
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002030:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002032:	1a09      	subs	r1, r1, r0
	if (__p)
 8002034:	2800      	cmp	r0, #0
 8002036:	f43f aed2 	beq.w	8001dde <HAL_UARTEx_RxEventCallback+0x2e>
 800203a:	f018 ff93 	bl	801af64 <_ZdlPvj>
 800203e:	e6ce      	b.n	8001dde <HAL_UARTEx_RxEventCallback+0x2e>
	  __throw_length_error(
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <HAL_UARTEx_RxEventCallback+0x2c8>)
 8002042:	f019 f859 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	  std::__throw_bad_alloc();
 8002046:	f019 f851 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800204a:	f04f 0800 	mov.w	r8, #0
 800204e:	e765      	b.n	8001f1c <HAL_UARTEx_RxEventCallback+0x16c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002050:	4652      	mov	r2, sl
 8002052:	4649      	mov	r1, r9
 8002054:	4640      	mov	r0, r8
 8002056:	f019 fc59 	bl	801b90c <memmove>
 800205a:	e76f      	b.n	8001f3c <HAL_UARTEx_RxEventCallback+0x18c>
 800205c:	f019 f846 	bl	801b0ec <_ZSt17__throw_bad_allocv>
 8002060:	f04f 0800 	mov.w	r8, #0
 8002064:	e7b3      	b.n	8001fce <HAL_UARTEx_RxEventCallback+0x21e>
 8002066:	462a      	mov	r2, r5
 8002068:	4649      	mov	r1, r9
 800206a:	4640      	mov	r0, r8
 800206c:	f019 fc4e 	bl	801b90c <memmove>
 8002070:	e7be      	b.n	8001ff0 <HAL_UARTEx_RxEventCallback+0x240>
 8002072:	bf00      	nop
 8002074:	240000a4 	.word	0x240000a4
 8002078:	0801bdb0 	.word	0x0801bdb0

0800207c <_ZN4LEDSD1Ev>:
    uint16_t R_address;
    uint16_t G_address;
    uint16_t B_address;
};

class LEDS {
 800207c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800207e:	4605      	mov	r5, r0
	_M_deallocate(_M_impl._M_start,
 8002080:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002082:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8002084:	1a09      	subs	r1, r1, r0
	if (__p)
 8002086:	b108      	cbz	r0, 800208c <_ZN4LEDSD1Ev+0x10>
	::operator delete(__p
 8002088:	f018 ff6c 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800208c:	6a28      	ldr	r0, [r5, #32]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800208e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002090:	1a09      	subs	r1, r1, r0
	if (__p)
 8002092:	b108      	cbz	r0, 8002098 <_ZN4LEDSD1Ev+0x1c>
 8002094:	f018 ff66 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8002098:	6968      	ldr	r0, [r5, #20]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800209a:	69e9      	ldr	r1, [r5, #28]
 800209c:	1a09      	subs	r1, r1, r0
	if (__p)
 800209e:	b108      	cbz	r0, 80020a4 <_ZN4LEDSD1Ev+0x28>
 80020a0:	f018 ff60 	bl	801af64 <_ZdlPvj>
 80020a4:	f105 0708 	add.w	r7, r5, #8
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80020a8:	68ac      	ldr	r4, [r5, #8]
 80020aa:	687e      	ldr	r6, [r7, #4]
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80020ac:	e000      	b.n	80020b0 <_ZN4LEDSD1Ev+0x34>
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
 80020ae:	3420      	adds	r4, #32
 80020b0:	42a6      	cmp	r6, r4
 80020b2:	d007      	beq.n	80020c4 <_ZN4LEDSD1Ev+0x48>
	_M_deallocate(_M_impl._M_start,
 80020b4:	6920      	ldr	r0, [r4, #16]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020b6:	69a1      	ldr	r1, [r4, #24]
 80020b8:	1a09      	subs	r1, r1, r0
	if (__p)
 80020ba:	2800      	cmp	r0, #0
 80020bc:	d0f7      	beq.n	80020ae <_ZN4LEDSD1Ev+0x32>
 80020be:	f018 ff51 	bl	801af64 <_ZdlPvj>
      { __a.deallocate(__p, __n); }
 80020c2:	e7f4      	b.n	80020ae <_ZN4LEDSD1Ev+0x32>
	_M_deallocate(_M_impl._M_start,
 80020c4:	68a8      	ldr	r0, [r5, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	1a09      	subs	r1, r1, r0
	if (__p)
 80020ca:	b108      	cbz	r0, 80020d0 <_ZN4LEDSD1Ev+0x54>
 80020cc:	f018 ff4a 	bl	801af64 <_ZdlPvj>
 80020d0:	4628      	mov	r0, r5
 80020d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080020d4 <_ZN9RegistersD1Ev>:
	void* context;
	bool (*write)(void*, uint16_t, T*, uint16_t);
	bool (*read)(void*, uint16_t, T**, uint16_t*);
};

class Registers {
 80020d4:	b510      	push	{r4, lr}
 80020d6:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 80020d8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020dc:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80020e0:	1a09      	subs	r1, r1, r0
	if (__p)
 80020e2:	b108      	cbz	r0, 80020e8 <_ZN9RegistersD1Ev+0x14>
 80020e4:	f018 ff3e 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80020e8:	6f60      	ldr	r0, [r4, #116]	; 0x74
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020ea:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80020ec:	1a09      	subs	r1, r1, r0
	if (__p)
 80020ee:	b108      	cbz	r0, 80020f4 <_ZN9RegistersD1Ev+0x20>
 80020f0:	f018 ff38 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80020f4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020f6:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80020f8:	1a09      	subs	r1, r1, r0
	if (__p)
 80020fa:	b108      	cbz	r0, 8002100 <_ZN9RegistersD1Ev+0x2c>
 80020fc:	f018 ff32 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8002100:	6de0      	ldr	r0, [r4, #92]	; 0x5c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002102:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002104:	1a09      	subs	r1, r1, r0
	if (__p)
 8002106:	b108      	cbz	r0, 800210c <_ZN9RegistersD1Ev+0x38>
 8002108:	f018 ff2c 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800210c:	6d20      	ldr	r0, [r4, #80]	; 0x50
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800210e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002110:	1a09      	subs	r1, r1, r0
	if (__p)
 8002112:	b108      	cbz	r0, 8002118 <_ZN9RegistersD1Ev+0x44>
 8002114:	f018 ff26 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8002118:	6c60      	ldr	r0, [r4, #68]	; 0x44
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800211a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800211c:	1a09      	subs	r1, r1, r0
	if (__p)
 800211e:	b108      	cbz	r0, 8002124 <_ZN9RegistersD1Ev+0x50>
 8002120:	f018 ff20 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8002124:	6ba0      	ldr	r0, [r4, #56]	; 0x38
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002126:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002128:	1a09      	subs	r1, r1, r0
	if (__p)
 800212a:	b108      	cbz	r0, 8002130 <_ZN9RegistersD1Ev+0x5c>
 800212c:	f018 ff1a 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8002130:	6860      	ldr	r0, [r4, #4]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002132:	68e1      	ldr	r1, [r4, #12]
 8002134:	1a09      	subs	r1, r1, r0
	if (__p)
 8002136:	b108      	cbz	r0, 800213c <_ZN9RegistersD1Ev+0x68>
 8002138:	f018 ff14 	bl	801af64 <_ZdlPvj>
 800213c:	4620      	mov	r0, r4
 800213e:	bd10      	pop	{r4, pc}

08002140 <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002144:	b085      	sub	sp, #20
 8002146:	9001      	str	r0, [sp, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002148:	6802      	ldr	r2, [r0, #0]
 800214a:	9200      	str	r2, [sp, #0]
 800214c:	6843      	ldr	r3, [r0, #4]
 800214e:	9302      	str	r3, [sp, #8]
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002150:	e056      	b.n	8002200 <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev+0xc0>
 8002152:	3420      	adds	r4, #32
 8002154:	42a5      	cmp	r5, r4
 8002156:	d007      	beq.n	8002168 <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev+0x28>
	_M_deallocate(_M_impl._M_start,
 8002158:	6960      	ldr	r0, [r4, #20]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800215a:	69e3      	ldr	r3, [r4, #28]
 800215c:	1a19      	subs	r1, r3, r0
	if (__p)
 800215e:	2800      	cmp	r0, #0
 8002160:	d0f7      	beq.n	8002152 <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev+0x12>
 8002162:	f018 feff 	bl	801af64 <_ZdlPvj>
      { __a.deallocate(__p, __n); }
 8002166:	e7f4      	b.n	8002152 <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev+0x12>
	_M_deallocate(_M_impl._M_start,
 8002168:	6830      	ldr	r0, [r6, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800216a:	68b1      	ldr	r1, [r6, #8]
 800216c:	1a09      	subs	r1, r1, r0
	if (__p)
 800216e:	b108      	cbz	r0, 8002174 <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev+0x34>
 8002170:	f018 fef8 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8002174:	9b00      	ldr	r3, [sp, #0]
 8002176:	6e58      	ldr	r0, [r3, #100]	; 0x64
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800217a:	1a19      	subs	r1, r3, r0
	if (__p)
 800217c:	b108      	cbz	r0, 8002182 <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev+0x42>
 800217e:	f018 fef1 	bl	801af64 <_ZdlPvj>
	bool processing;
	bool* flag;
	SensorData data;
};

struct I2CInterface {
 8002182:	9b00      	ldr	r3, [sp, #0]
 8002184:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8002188:	9203      	str	r2, [sp, #12]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800218a:	f8d3 9058 	ldr.w	r9, [r3, #88]	; 0x58
 800218e:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002192:	e022      	b.n	80021da <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev+0x9a>
 8002194:	3418      	adds	r4, #24
 8002196:	42a7      	cmp	r7, r4
 8002198:	d007      	beq.n	80021aa <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev+0x6a>
	_M_deallocate(_M_impl._M_start,
 800219a:	68e0      	ldr	r0, [r4, #12]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800219c:	6961      	ldr	r1, [r4, #20]
 800219e:	1a09      	subs	r1, r1, r0
	if (__p)
 80021a0:	2800      	cmp	r0, #0
 80021a2:	d0f7      	beq.n	8002194 <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev+0x54>
 80021a4:	f018 fede 	bl	801af64 <_ZdlPvj>
      { __a.deallocate(__p, __n); }
 80021a8:	e7f4      	b.n	8002194 <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev+0x54>
	_M_deallocate(_M_impl._M_start,
 80021aa:	6830      	ldr	r0, [r6, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80021ac:	68b1      	ldr	r1, [r6, #8]
 80021ae:	1a09      	subs	r1, r1, r0
	if (__p)
 80021b0:	b108      	cbz	r0, 80021b6 <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev+0x76>
 80021b2:	f018 fed7 	bl	801af64 <_ZdlPvj>
 80021b6:	3528      	adds	r5, #40	; 0x28
 80021b8:	45a8      	cmp	r8, r5
 80021ba:	d004      	beq.n	80021c6 <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev+0x86>
struct Sensor {
 80021bc:	f105 0614 	add.w	r6, r5, #20
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80021c0:	696c      	ldr	r4, [r5, #20]
 80021c2:	6877      	ldr	r7, [r6, #4]
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80021c4:	e7e7      	b.n	8002196 <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev+0x56>
	_M_deallocate(_M_impl._M_start,
 80021c6:	f8da 0000 	ldr.w	r0, [sl]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80021ca:	f8da 1008 	ldr.w	r1, [sl, #8]
 80021ce:	1a09      	subs	r1, r1, r0
	if (__p)
 80021d0:	b108      	cbz	r0, 80021d6 <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev+0x96>
 80021d2:	f018 fec7 	bl	801af64 <_ZdlPvj>
 80021d6:	f109 0918 	add.w	r9, r9, #24
 80021da:	45cb      	cmp	fp, r9
 80021dc:	d006      	beq.n	80021ec <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev+0xac>
struct SensorGroup { // a group as a unique ID that can't be used on other interfaces
 80021de:	f109 0a0c 	add.w	sl, r9, #12
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80021e2:	f8d9 500c 	ldr.w	r5, [r9, #12]
 80021e6:	f8da 8004 	ldr.w	r8, [sl, #4]
 80021ea:	e7e5      	b.n	80021b8 <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev+0x78>
	_M_deallocate(_M_impl._M_start,
 80021ec:	9b03      	ldr	r3, [sp, #12]
 80021ee:	6818      	ldr	r0, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80021f0:	6899      	ldr	r1, [r3, #8]
 80021f2:	1a09      	subs	r1, r1, r0
	if (__p)
 80021f4:	b108      	cbz	r0, 80021fa <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev+0xba>
 80021f6:	f018 feb5 	bl	801af64 <_ZdlPvj>
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	337c      	adds	r3, #124	; 0x7c
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	9a02      	ldr	r2, [sp, #8]
 8002202:	9b00      	ldr	r3, [sp, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d004      	beq.n	8002212 <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev+0xd2>
struct I2CInterface {
 8002208:	f103 0670 	add.w	r6, r3, #112	; 0x70
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800220c:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 800220e:	6875      	ldr	r5, [r6, #4]
 8002210:	e7a0      	b.n	8002154 <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev+0x14>
	_M_deallocate(_M_impl._M_start,
 8002212:	9b01      	ldr	r3, [sp, #4]
 8002214:	6818      	ldr	r0, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	1a19      	subs	r1, r3, r0
	if (__p)
 800221a:	b108      	cbz	r0, 8002220 <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev+0xe0>
 800221c:	f018 fea2 	bl	801af64 <_ZdlPvj>
      }
 8002220:	9801      	ldr	r0, [sp, #4]
 8002222:	b005      	add	sp, #20
 8002224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002228 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800222c:	b087      	sub	sp, #28
 800222e:	4604      	mov	r4, r0
 8002230:	460d      	mov	r5, r1
 8002232:	2801      	cmp	r0, #1
 8002234:	d007      	beq.n	8002246 <_Z41__static_initialization_and_destruction_0ii+0x1e>
User user(&registers, &subscribers, &communication, &services, &publishers, &hardware_delay, &sensors, &leds);
 8002236:	b91c      	cbnz	r4, 8002240 <_Z41__static_initialization_and_destruction_0ii+0x18>
 8002238:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800223c:	429d      	cmp	r5, r3
 800223e:	d042      	beq.n	80022c6 <_Z41__static_initialization_and_destruction_0ii+0x9e>
}
 8002240:	b007      	add	sp, #28
 8002242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800224a:	4299      	cmp	r1, r3
 800224c:	d1f3      	bne.n	8002236 <_Z41__static_initialization_and_destruction_0ii+0xe>
Registers registers;
 800224e:	4e95      	ldr	r6, [pc, #596]	; (80024a4 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8002250:	4630      	mov	r0, r6
 8002252:	f017 fcd2 	bl	8019bfa <_ZN9RegistersC1Ev>
UARTProtocol protocol_uart;
 8002256:	4894      	ldr	r0, [pc, #592]	; (80024a8 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8002258:	f016 fb5a 	bl	8018910 <_ZN12UARTProtocolC1Ev>
CANProtocol protocol_canfd;
 800225c:	4893      	ldr	r0, [pc, #588]	; (80024ac <_Z41__static_initialization_and_destruction_0ii+0x284>)
 800225e:	f016 f877 	bl	8018350 <_ZN11CANProtocolC1Ev>
MasterSubscribers subscribers;
 8002262:	4893      	ldr	r0, [pc, #588]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8002264:	f018 fbf9 	bl	801aa5a <_ZN17MasterSubscribersC1Ev>
Communication communication;
 8002268:	4892      	ldr	r0, [pc, #584]	; (80024b4 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 800226a:	f00c fc2f 	bl	800eacc <_ZN13CommunicationC1Ev>
Services services;
 800226e:	4f92      	ldr	r7, [pc, #584]	; (80024b8 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8002270:	4638      	mov	r0, r7
 8002272:	f018 fae5 	bl	801a840 <_ZN8ServicesC1Ev>
Publishers publishers;
 8002276:	f8df 8260 	ldr.w	r8, [pc, #608]	; 80024d8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>
 800227a:	4640      	mov	r0, r8
 800227c:	f016 ffc5 	bl	801920a <_ZN10PublishersC1Ev>
HardwareDelay hardware_delay(&htim4);
 8002280:	f8df 9250 	ldr.w	r9, [pc, #592]	; 80024d4 <_Z41__static_initialization_and_destruction_0ii+0x2ac>
 8002284:	498d      	ldr	r1, [pc, #564]	; (80024bc <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8002286:	4648      	mov	r0, r9
 8002288:	f013 fea6 	bl	8015fd8 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef>
Sensors sensors;
 800228c:	f8df a23c 	ldr.w	sl, [pc, #572]	; 80024cc <_Z41__static_initialization_and_destruction_0ii+0x2a4>
 8002290:	4650      	mov	r0, sl
 8002292:	f018 f91d 	bl	801a4d0 <_ZN7SensorsC1Ev>
LEDS leds;
 8002296:	f8df b230 	ldr.w	fp, [pc, #560]	; 80024c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>
 800229a:	4658      	mov	r0, fp
 800229c:	f013 fef6 	bl	801608c <_ZN4LEDSC1Ev>
MotionGenerator motion_generator;
 80022a0:	4887      	ldr	r0, [pc, #540]	; (80024c0 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 80022a2:	f014 fed5 	bl	8017050 <_ZN15MotionGeneratorC1Ev>
User user(&registers, &subscribers, &communication, &services, &publishers, &hardware_delay, &sensors, &leds);
 80022a6:	f8cd b010 	str.w	fp, [sp, #16]
 80022aa:	f8cd a00c 	str.w	sl, [sp, #12]
 80022ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80022b2:	f8cd 8004 	str.w	r8, [sp, #4]
 80022b6:	9700      	str	r7, [sp, #0]
 80022b8:	4b7e      	ldr	r3, [pc, #504]	; (80024b4 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 80022ba:	4a7d      	ldr	r2, [pc, #500]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 80022bc:	4631      	mov	r1, r6
 80022be:	4881      	ldr	r0, [pc, #516]	; (80024c4 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 80022c0:	f018 fdcc 	bl	801ae5c <_ZN4UserC1EP9RegistersP17MasterSubscribersP13CommunicationP8ServicesP10PublishersP13HardwareDelayP7SensorsP4LEDS>
 80022c4:	e7b7      	b.n	8002236 <_Z41__static_initialization_and_destruction_0ii+0xe>
	_M_deallocate(_M_impl._M_start,
 80022c6:	4b7e      	ldr	r3, [pc, #504]	; (80024c0 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 80022c8:	6d18      	ldr	r0, [r3, #80]	; 0x50
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80022ca:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80022cc:	1a09      	subs	r1, r1, r0
	if (__p)
 80022ce:	b108      	cbz	r0, 80022d4 <_Z41__static_initialization_and_destruction_0ii+0xac>
 80022d0:	f018 fe48 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80022d4:	4b7a      	ldr	r3, [pc, #488]	; (80024c0 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 80022d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80022d8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80022da:	1a09      	subs	r1, r1, r0
	if (__p)
 80022dc:	b108      	cbz	r0, 80022e2 <_Z41__static_initialization_and_destruction_0ii+0xba>
 80022de:	f018 fe41 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80022e2:	4b77      	ldr	r3, [pc, #476]	; (80024c0 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 80022e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80022e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022e8:	1a09      	subs	r1, r1, r0
	if (__p)
 80022ea:	b108      	cbz	r0, 80022f0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 80022ec:	f018 fe3a 	bl	801af64 <_ZdlPvj>
LEDS leds;
 80022f0:	4875      	ldr	r0, [pc, #468]	; (80024c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80022f2:	f7ff fec3 	bl	800207c <_ZN4LEDSD1Ev>
	_M_deallocate(_M_impl._M_start,
 80022f6:	4b75      	ldr	r3, [pc, #468]	; (80024cc <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 80022f8:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80022fc:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8002300:	1a09      	subs	r1, r1, r0
	if (__p)
 8002302:	b108      	cbz	r0, 8002308 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 8002304:	f018 fe2e 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8002308:	4b70      	ldr	r3, [pc, #448]	; (80024cc <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800230a:	6f98      	ldr	r0, [r3, #120]	; 0x78
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800230c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8002310:	1a09      	subs	r1, r1, r0
	if (__p)
 8002312:	b108      	cbz	r0, 8002318 <_Z41__static_initialization_and_destruction_0ii+0xf0>
 8002314:	f018 fe26 	bl	801af64 <_ZdlPvj>
	std::vector<SensorGroup> sensor_groups;
	std::vector<Sensor*> pending_sensors;
	std::vector<ReadRequest> pending_requests;
};

class Sensors {
 8002318:	486d      	ldr	r0, [pc, #436]	; (80024d0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800231a:	f7ff ff11 	bl	8002140 <_ZNSt6vectorI12I2CInterfaceSaIS0_EED1Ev>
	_M_deallocate(_M_impl._M_start,
 800231e:	4b6d      	ldr	r3, [pc, #436]	; (80024d4 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8002320:	6918      	ldr	r0, [r3, #16]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002322:	6999      	ldr	r1, [r3, #24]
 8002324:	1a09      	subs	r1, r1, r0
	if (__p)
 8002326:	b108      	cbz	r0, 800232c <_Z41__static_initialization_and_destruction_0ii+0x104>
 8002328:	f018 fe1c 	bl	801af64 <_ZdlPvj>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800232c:	4b6a      	ldr	r3, [pc, #424]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800232e:	68dc      	ldr	r4, [r3, #12]
 8002330:	691d      	ldr	r5, [r3, #16]
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002332:	e000      	b.n	8002336 <_Z41__static_initialization_and_destruction_0ii+0x10e>
	  for (; __first != __last; ++__first)
 8002334:	3420      	adds	r4, #32
 8002336:	42a5      	cmp	r5, r4
 8002338:	d00d      	beq.n	8002356 <_Z41__static_initialization_and_destruction_0ii+0x12e>
	_M_deallocate(_M_impl._M_start,
 800233a:	6960      	ldr	r0, [r4, #20]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800233c:	69e1      	ldr	r1, [r4, #28]
 800233e:	1a09      	subs	r1, r1, r0
	if (__p)
 8002340:	b108      	cbz	r0, 8002346 <_Z41__static_initialization_and_destruction_0ii+0x11e>
 8002342:	f018 fe0f 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8002346:	68a0      	ldr	r0, [r4, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002348:	6921      	ldr	r1, [r4, #16]
 800234a:	1a09      	subs	r1, r1, r0
	if (__p)
 800234c:	2800      	cmp	r0, #0
 800234e:	d0f1      	beq.n	8002334 <_Z41__static_initialization_and_destruction_0ii+0x10c>
 8002350:	f018 fe08 	bl	801af64 <_ZdlPvj>
      { __a.deallocate(__p, __n); }
 8002354:	e7ee      	b.n	8002334 <_Z41__static_initialization_and_destruction_0ii+0x10c>
	_M_deallocate(_M_impl._M_start,
 8002356:	4b60      	ldr	r3, [pc, #384]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8002358:	68d8      	ldr	r0, [r3, #12]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800235a:	6959      	ldr	r1, [r3, #20]
 800235c:	1a09      	subs	r1, r1, r0
	if (__p)
 800235e:	b108      	cbz	r0, 8002364 <_Z41__static_initialization_and_destruction_0ii+0x13c>
 8002360:	f018 fe00 	bl	801af64 <_ZdlPvj>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002364:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8002366:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8002368:	6d5d      	ldr	r5, [r3, #84]	; 0x54
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800236a:	e000      	b.n	800236e <_Z41__static_initialization_and_destruction_0ii+0x146>
 800236c:	3414      	adds	r4, #20
 800236e:	42a5      	cmp	r5, r4
 8002370:	d007      	beq.n	8002382 <_Z41__static_initialization_and_destruction_0ii+0x15a>
	_M_deallocate(_M_impl._M_start,
 8002372:	6860      	ldr	r0, [r4, #4]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002374:	68e1      	ldr	r1, [r4, #12]
 8002376:	1a09      	subs	r1, r1, r0
	if (__p)
 8002378:	2800      	cmp	r0, #0
 800237a:	d0f7      	beq.n	800236c <_Z41__static_initialization_and_destruction_0ii+0x144>
 800237c:	f018 fdf2 	bl	801af64 <_ZdlPvj>
      { __a.deallocate(__p, __n); }
 8002380:	e7f4      	b.n	800236c <_Z41__static_initialization_and_destruction_0ii+0x144>
	_M_deallocate(_M_impl._M_start,
 8002382:	4b4c      	ldr	r3, [pc, #304]	; (80024b4 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8002384:	6d18      	ldr	r0, [r3, #80]	; 0x50
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002386:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002388:	1a09      	subs	r1, r1, r0
	if (__p)
 800238a:	b108      	cbz	r0, 8002390 <_Z41__static_initialization_and_destruction_0ii+0x168>
 800238c:	f018 fdea 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8002390:	4b48      	ldr	r3, [pc, #288]	; (80024b4 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8002392:	6c58      	ldr	r0, [r3, #68]	; 0x44
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002394:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002396:	1a09      	subs	r1, r1, r0
	if (__p)
 8002398:	b108      	cbz	r0, 800239e <_Z41__static_initialization_and_destruction_0ii+0x176>
 800239a:	f018 fde3 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800239e:	4b45      	ldr	r3, [pc, #276]	; (80024b4 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 80023a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80023a2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80023a4:	1a09      	subs	r1, r1, r0
	if (__p)
 80023a6:	b108      	cbz	r0, 80023ac <_Z41__static_initialization_and_destruction_0ii+0x184>
 80023a8:	f018 fddc 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80023ac:	4b41      	ldr	r3, [pc, #260]	; (80024b4 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 80023ae:	6958      	ldr	r0, [r3, #20]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80023b0:	69d9      	ldr	r1, [r3, #28]
 80023b2:	1a09      	subs	r1, r1, r0
	if (__p)
 80023b4:	b108      	cbz	r0, 80023ba <_Z41__static_initialization_and_destruction_0ii+0x192>
 80023b6:	f018 fdd5 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80023ba:	4b3d      	ldr	r3, [pc, #244]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 80023bc:	6998      	ldr	r0, [r3, #24]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80023be:	6a19      	ldr	r1, [r3, #32]
 80023c0:	1a09      	subs	r1, r1, r0
	if (__p)
 80023c2:	b108      	cbz	r0, 80023c8 <_Z41__static_initialization_and_destruction_0ii+0x1a0>
 80023c4:	f018 fdce 	bl	801af64 <_ZdlPvj>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80023c8:	4b39      	ldr	r3, [pc, #228]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 80023ca:	68dc      	ldr	r4, [r3, #12]
 80023cc:	691d      	ldr	r5, [r3, #16]
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80023ce:	e000      	b.n	80023d2 <_Z41__static_initialization_and_destruction_0ii+0x1aa>
 80023d0:	3428      	adds	r4, #40	; 0x28
 80023d2:	42a5      	cmp	r5, r4
 80023d4:	d013      	beq.n	80023fe <_Z41__static_initialization_and_destruction_0ii+0x1d6>
	_M_deallocate(_M_impl._M_start,
 80023d6:	69e0      	ldr	r0, [r4, #28]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80023d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80023da:	1a09      	subs	r1, r1, r0
	if (__p)
 80023dc:	b108      	cbz	r0, 80023e2 <_Z41__static_initialization_and_destruction_0ii+0x1ba>
 80023de:	f018 fdc1 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80023e2:	6920      	ldr	r0, [r4, #16]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80023e4:	69a1      	ldr	r1, [r4, #24]
 80023e6:	1a09      	subs	r1, r1, r0
	if (__p)
 80023e8:	b108      	cbz	r0, 80023ee <_Z41__static_initialization_and_destruction_0ii+0x1c6>
 80023ea:	f018 fdbb 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80023ee:	6860      	ldr	r0, [r4, #4]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80023f0:	68e1      	ldr	r1, [r4, #12]
 80023f2:	1a09      	subs	r1, r1, r0
	if (__p)
 80023f4:	2800      	cmp	r0, #0
 80023f6:	d0eb      	beq.n	80023d0 <_Z41__static_initialization_and_destruction_0ii+0x1a8>
 80023f8:	f018 fdb4 	bl	801af64 <_ZdlPvj>
      { __a.deallocate(__p, __n); }
 80023fc:	e7e8      	b.n	80023d0 <_Z41__static_initialization_and_destruction_0ii+0x1a8>
	_M_deallocate(_M_impl._M_start,
 80023fe:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8002400:	68d8      	ldr	r0, [r3, #12]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002402:	6959      	ldr	r1, [r3, #20]
 8002404:	1a09      	subs	r1, r1, r0
	if (__p)
 8002406:	b108      	cbz	r0, 800240c <_Z41__static_initialization_and_destruction_0ii+0x1e4>
 8002408:	f018 fdac 	bl	801af64 <_ZdlPvj>
#include <stm32h750xx.h>
#include <stm32h7xx_hal.h>

#include <Protocols/Communication/Core/TemplateCommunicationProtocol.hpp>

class CANProtocol : public TemplateCommunicationProtocol<FDCAN_HandleTypeDef> {
 800240c:	4b27      	ldr	r3, [pc, #156]	; (80024ac <_Z41__static_initialization_and_destruction_0ii+0x284>)
 800240e:	4a33      	ldr	r2, [pc, #204]	; (80024dc <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8002410:	601a      	str	r2, [r3, #0]
	_M_deallocate(_M_impl._M_start,
 8002412:	6c98      	ldr	r0, [r3, #72]	; 0x48
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002414:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002416:	1a09      	subs	r1, r1, r0
	if (__p)
 8002418:	b108      	cbz	r0, 800241e <_Z41__static_initialization_and_destruction_0ii+0x1f6>
 800241a:	f018 fda3 	bl	801af64 <_ZdlPvj>
class TemplateCommunicationProtocol : public CommunicationProtocol {
 800241e:	4b23      	ldr	r3, [pc, #140]	; (80024ac <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8002420:	4a2f      	ldr	r2, [pc, #188]	; (80024e0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8002422:	601a      	str	r2, [r3, #0]
	_M_deallocate(_M_impl._M_start,
 8002424:	6b98      	ldr	r0, [r3, #56]	; 0x38
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002426:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002428:	1a09      	subs	r1, r1, r0
	if (__p)
 800242a:	b108      	cbz	r0, 8002430 <_Z41__static_initialization_and_destruction_0ii+0x208>
 800242c:	f018 fd9a 	bl	801af64 <_ZdlPvj>
	std::vector<uint8_t> payload;
	uint8_t target_address;
	uint8_t source_address;
};

class CommunicationProtocol {
 8002430:	4a1e      	ldr	r2, [pc, #120]	; (80024ac <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8002432:	4613      	mov	r3, r2
 8002434:	492b      	ldr	r1, [pc, #172]	; (80024e4 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8002436:	f843 1b2c 	str.w	r1, [r3], #44
	_M_deallocate(_M_impl._M_start,
 800243a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800243c:	6899      	ldr	r1, [r3, #8]
 800243e:	1a09      	subs	r1, r1, r0
	if (__p)
 8002440:	b108      	cbz	r0, 8002446 <_Z41__static_initialization_and_destruction_0ii+0x21e>
 8002442:	f018 fd8f 	bl	801af64 <_ZdlPvj>
 8002446:	4e19      	ldr	r6, [pc, #100]	; (80024ac <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8002448:	f106 0720 	add.w	r7, r6, #32
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800244c:	6a34      	ldr	r4, [r6, #32]
 800244e:	687d      	ldr	r5, [r7, #4]
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002450:	e000      	b.n	8002454 <_Z41__static_initialization_and_destruction_0ii+0x22c>
 8002452:	340c      	adds	r4, #12
 8002454:	42a5      	cmp	r5, r4
 8002456:	d007      	beq.n	8002468 <_Z41__static_initialization_and_destruction_0ii+0x240>
	_M_deallocate(_M_impl._M_start,
 8002458:	6820      	ldr	r0, [r4, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800245a:	68a1      	ldr	r1, [r4, #8]
 800245c:	1a09      	subs	r1, r1, r0
	if (__p)
 800245e:	2800      	cmp	r0, #0
 8002460:	d0f7      	beq.n	8002452 <_Z41__static_initialization_and_destruction_0ii+0x22a>
 8002462:	f018 fd7f 	bl	801af64 <_ZdlPvj>
      { __a.deallocate(__p, __n); }
 8002466:	e7f4      	b.n	8002452 <_Z41__static_initialization_and_destruction_0ii+0x22a>
	_M_deallocate(_M_impl._M_start,
 8002468:	6a30      	ldr	r0, [r6, #32]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	1a09      	subs	r1, r1, r0
	if (__p)
 800246e:	b108      	cbz	r0, 8002474 <_Z41__static_initialization_and_destruction_0ii+0x24c>
 8002470:	f018 fd78 	bl	801af64 <_ZdlPvj>
      }
 8002474:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <_Z41__static_initialization_and_destruction_0ii+0x284>)
	_M_deallocate(_M_impl._M_start,
 8002476:	6918      	ldr	r0, [r3, #16]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002478:	6999      	ldr	r1, [r3, #24]
 800247a:	1a09      	subs	r1, r1, r0
	if (__p)
 800247c:	b108      	cbz	r0, 8002482 <_Z41__static_initialization_and_destruction_0ii+0x25a>
 800247e:	f018 fd71 	bl	801af64 <_ZdlPvj>
 8002482:	4e0a      	ldr	r6, [pc, #40]	; (80024ac <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8002484:	1d37      	adds	r7, r6, #4
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002486:	6874      	ldr	r4, [r6, #4]
 8002488:	687d      	ldr	r5, [r7, #4]
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800248a:	e000      	b.n	800248e <_Z41__static_initialization_and_destruction_0ii+0x266>
 800248c:	340c      	adds	r4, #12
 800248e:	42a5      	cmp	r5, r4
 8002490:	d02a      	beq.n	80024e8 <_Z41__static_initialization_and_destruction_0ii+0x2c0>
	_M_deallocate(_M_impl._M_start,
 8002492:	6820      	ldr	r0, [r4, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002494:	68a1      	ldr	r1, [r4, #8]
 8002496:	1a09      	subs	r1, r1, r0
	if (__p)
 8002498:	2800      	cmp	r0, #0
 800249a:	d0f7      	beq.n	800248c <_Z41__static_initialization_and_destruction_0ii+0x264>
 800249c:	f018 fd62 	bl	801af64 <_ZdlPvj>
      { __a.deallocate(__p, __n); }
 80024a0:	e7f4      	b.n	800248c <_Z41__static_initialization_and_destruction_0ii+0x264>
 80024a2:	bf00      	nop
 80024a4:	240011b4 	.word	0x240011b4
 80024a8:	24001134 	.word	0x24001134
 80024ac:	240010e0 	.word	0x240010e0
 80024b0:	24002564 	.word	0x24002564
 80024b4:	240000a4 	.word	0x240000a4
 80024b8:	24001320 	.word	0x24001320
 80024bc:	24000c04 	.word	0x24000c04
 80024c0:	24001078 	.word	0x24001078
 80024c4:	24002588 	.word	0x24002588
 80024c8:	24001040 	.word	0x24001040
 80024cc:	24001240 	.word	0x24001240
 80024d0:	240012ac 	.word	0x240012ac
 80024d4:	240001c8 	.word	0x240001c8
 80024d8:	2400119c 	.word	0x2400119c
 80024dc:	0801c0d0 	.word	0x0801c0d0
 80024e0:	0801bec4 	.word	0x0801bec4
 80024e4:	0801c09c 	.word	0x0801c09c
	_M_deallocate(_M_impl._M_start,
 80024e8:	6870      	ldr	r0, [r6, #4]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80024ea:	68b9      	ldr	r1, [r7, #8]
 80024ec:	1a09      	subs	r1, r1, r0
	if (__p)
 80024ee:	b108      	cbz	r0, 80024f4 <_Z41__static_initialization_and_destruction_0ii+0x2cc>
 80024f0:	f018 fd38 	bl	801af64 <_ZdlPvj>
#include <Protocols/Communication/Core/TemplateCommunicationProtocol.hpp>
#include <Communication/CommunicationDefinition.h>

//typedef struct MessageHeader MessageHeader;

class UARTProtocol : public TemplateCommunicationProtocol<UART_HandleTypeDef> {
 80024f4:	4b31      	ldr	r3, [pc, #196]	; (80025bc <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80024f6:	4a32      	ldr	r2, [pc, #200]	; (80025c0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80024f8:	601a      	str	r2, [r3, #0]
	_M_deallocate(_M_impl._M_start,
 80024fa:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80024fc:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80024fe:	1a09      	subs	r1, r1, r0
	if (__p)
 8002500:	b108      	cbz	r0, 8002506 <_Z41__static_initialization_and_destruction_0ii+0x2de>
 8002502:	f018 fd2f 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8002506:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8002508:	6d18      	ldr	r0, [r3, #80]	; 0x50
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800250a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800250c:	1a09      	subs	r1, r1, r0
	if (__p)
 800250e:	b108      	cbz	r0, 8002514 <_Z41__static_initialization_and_destruction_0ii+0x2ec>
 8002510:	f018 fd28 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8002514:	4b29      	ldr	r3, [pc, #164]	; (80025bc <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8002516:	6c58      	ldr	r0, [r3, #68]	; 0x44
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002518:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800251a:	1a09      	subs	r1, r1, r0
	if (__p)
 800251c:	b108      	cbz	r0, 8002522 <_Z41__static_initialization_and_destruction_0ii+0x2fa>
 800251e:	f018 fd21 	bl	801af64 <_ZdlPvj>
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8002524:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8002526:	601a      	str	r2, [r3, #0]
	_M_deallocate(_M_impl._M_start,
 8002528:	6b98      	ldr	r0, [r3, #56]	; 0x38
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800252a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800252c:	1a09      	subs	r1, r1, r0
	if (__p)
 800252e:	b108      	cbz	r0, 8002534 <_Z41__static_initialization_and_destruction_0ii+0x30c>
 8002530:	f018 fd18 	bl	801af64 <_ZdlPvj>
 8002534:	4a21      	ldr	r2, [pc, #132]	; (80025bc <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8002536:	4613      	mov	r3, r2
 8002538:	4923      	ldr	r1, [pc, #140]	; (80025c8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800253a:	f843 1b2c 	str.w	r1, [r3], #44
	_M_deallocate(_M_impl._M_start,
 800253e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002540:	6899      	ldr	r1, [r3, #8]
 8002542:	1a09      	subs	r1, r1, r0
	if (__p)
 8002544:	b108      	cbz	r0, 800254a <_Z41__static_initialization_and_destruction_0ii+0x322>
 8002546:	f018 fd0d 	bl	801af64 <_ZdlPvj>
 800254a:	4e1c      	ldr	r6, [pc, #112]	; (80025bc <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800254c:	f106 0720 	add.w	r7, r6, #32
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002550:	6a34      	ldr	r4, [r6, #32]
 8002552:	687d      	ldr	r5, [r7, #4]
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002554:	e000      	b.n	8002558 <_Z41__static_initialization_and_destruction_0ii+0x330>
 8002556:	340c      	adds	r4, #12
 8002558:	42a5      	cmp	r5, r4
 800255a:	d007      	beq.n	800256c <_Z41__static_initialization_and_destruction_0ii+0x344>
	_M_deallocate(_M_impl._M_start,
 800255c:	6820      	ldr	r0, [r4, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800255e:	68a1      	ldr	r1, [r4, #8]
 8002560:	1a09      	subs	r1, r1, r0
	if (__p)
 8002562:	2800      	cmp	r0, #0
 8002564:	d0f7      	beq.n	8002556 <_Z41__static_initialization_and_destruction_0ii+0x32e>
 8002566:	f018 fcfd 	bl	801af64 <_ZdlPvj>
      { __a.deallocate(__p, __n); }
 800256a:	e7f4      	b.n	8002556 <_Z41__static_initialization_and_destruction_0ii+0x32e>
	_M_deallocate(_M_impl._M_start,
 800256c:	6a30      	ldr	r0, [r6, #32]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800256e:	68b9      	ldr	r1, [r7, #8]
 8002570:	1a09      	subs	r1, r1, r0
	if (__p)
 8002572:	b108      	cbz	r0, 8002578 <_Z41__static_initialization_and_destruction_0ii+0x350>
 8002574:	f018 fcf6 	bl	801af64 <_ZdlPvj>
      }
 8002578:	4b10      	ldr	r3, [pc, #64]	; (80025bc <_Z41__static_initialization_and_destruction_0ii+0x394>)
	_M_deallocate(_M_impl._M_start,
 800257a:	6918      	ldr	r0, [r3, #16]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800257c:	6999      	ldr	r1, [r3, #24]
 800257e:	1a09      	subs	r1, r1, r0
	if (__p)
 8002580:	b108      	cbz	r0, 8002586 <_Z41__static_initialization_and_destruction_0ii+0x35e>
 8002582:	f018 fcef 	bl	801af64 <_ZdlPvj>
 8002586:	4e0d      	ldr	r6, [pc, #52]	; (80025bc <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8002588:	1d37      	adds	r7, r6, #4
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800258a:	6874      	ldr	r4, [r6, #4]
 800258c:	687d      	ldr	r5, [r7, #4]
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800258e:	e000      	b.n	8002592 <_Z41__static_initialization_and_destruction_0ii+0x36a>
 8002590:	340c      	adds	r4, #12
 8002592:	42a5      	cmp	r5, r4
 8002594:	d007      	beq.n	80025a6 <_Z41__static_initialization_and_destruction_0ii+0x37e>
	_M_deallocate(_M_impl._M_start,
 8002596:	6820      	ldr	r0, [r4, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002598:	68a1      	ldr	r1, [r4, #8]
 800259a:	1a09      	subs	r1, r1, r0
	if (__p)
 800259c:	2800      	cmp	r0, #0
 800259e:	d0f7      	beq.n	8002590 <_Z41__static_initialization_and_destruction_0ii+0x368>
 80025a0:	f018 fce0 	bl	801af64 <_ZdlPvj>
      { __a.deallocate(__p, __n); }
 80025a4:	e7f4      	b.n	8002590 <_Z41__static_initialization_and_destruction_0ii+0x368>
	_M_deallocate(_M_impl._M_start,
 80025a6:	6870      	ldr	r0, [r6, #4]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80025a8:	68b9      	ldr	r1, [r7, #8]
 80025aa:	1a09      	subs	r1, r1, r0
	if (__p)
 80025ac:	b108      	cbz	r0, 80025b2 <_Z41__static_initialization_and_destruction_0ii+0x38a>
 80025ae:	f018 fcd9 	bl	801af64 <_ZdlPvj>
Registers registers;
 80025b2:	4806      	ldr	r0, [pc, #24]	; (80025cc <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 80025b4:	f7ff fd8e 	bl	80020d4 <_ZN9RegistersD1Ev>
}
 80025b8:	e642      	b.n	8002240 <_Z41__static_initialization_and_destruction_0ii+0x18>
 80025ba:	bf00      	nop
 80025bc:	24001134 	.word	0x24001134
 80025c0:	0801c10c 	.word	0x0801c10c
 80025c4:	0801bea8 	.word	0x0801bea8
 80025c8:	0801c09c 	.word	0x0801c09c
 80025cc:	240011b4 	.word	0x240011b4

080025d0 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80025d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025d4:	b083      	sub	sp, #12
 80025d6:	4688      	mov	r8, r1
 80025d8:	4616      	mov	r6, r2
 80025da:	2301      	movs	r3, #1
 80025dc:	9300      	str	r3, [sp, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80025de:	6842      	ldr	r2, [r0, #4]
 80025e0:	6803      	ldr	r3, [r0, #0]
 80025e2:	1ad3      	subs	r3, r2, r3
	if (max_size() - size() < __n)
 80025e4:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
 80025e8:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 80025ec:	d03d      	beq.n	800266a <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
 80025ee:	4604      	mov	r4, r0
 80025f0:	109d      	asrs	r5, r3, #2
	const size_type __len = size() + (std::max)(size(), __n);
 80025f2:	9501      	str	r5, [sp, #4]
      if (__a < __b)
 80025f4:	2d00      	cmp	r5, #0
 80025f6:	d03b      	beq.n	8002670 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>
      return __a;
 80025f8:	ab01      	add	r3, sp, #4
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	441d      	add	r5, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	1ad2      	subs	r2, r2, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002602:	ebb5 0fa2 	cmp.w	r5, r2, asr #2
 8002606:	d335      	bcc.n	8002674 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>
 8002608:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 800260c:	d235      	bcs.n	800267a <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xaa>
      pointer __old_start = this->_M_impl._M_start;
 800260e:	f8d4 9000 	ldr.w	r9, [r4]
      pointer __old_finish = this->_M_impl._M_finish;
 8002612:	f8d4 a004 	ldr.w	sl, [r4, #4]
    { return __lhs.base() - __rhs.base(); }
 8002616:	eba8 0b09 	sub.w	fp, r8, r9
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800261a:	b39d      	cbz	r5, 8002684 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb4>
	if (__n > this->_M_max_size())
 800261c:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 8002620:	d22e      	bcs.n	8002680 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb0>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002622:	00a8      	lsls	r0, r5, #2
 8002624:	f018 fcb4 	bl	801af90 <_Znwj>
 8002628:	4607      	mov	r7, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800262a:	6833      	ldr	r3, [r6, #0]
 800262c:	f847 300b 	str.w	r3, [r7, fp]
      ptrdiff_t __count = __last - __first;
 8002630:	eba8 0609 	sub.w	r6, r8, r9
      if (__count > 0)
 8002634:	2e00      	cmp	r6, #0
 8002636:	dc27      	bgt.n	8002688 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb8>
      return __result + __count;
 8002638:	443e      	add	r6, r7
	      ++__new_finish;
 800263a:	3604      	adds	r6, #4
      ptrdiff_t __count = __last - __first;
 800263c:	ebaa 0a08 	sub.w	sl, sl, r8
      if (__count > 0)
 8002640:	f1ba 0f00 	cmp.w	sl, #0
 8002644:	dc26      	bgt.n	8002694 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xc4>
      return __result + __count;
 8002646:	4456      	add	r6, sl
		    this->_M_impl._M_end_of_storage - __old_start);
 8002648:	68a1      	ldr	r1, [r4, #8]
 800264a:	eba1 0109 	sub.w	r1, r1, r9
	if (__p)
 800264e:	f1b9 0f00 	cmp.w	r9, #0
 8002652:	d002      	beq.n	800265a <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8a>
	::operator delete(__p
 8002654:	4648      	mov	r0, r9
 8002656:	f018 fc85 	bl	801af64 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 800265a:	6027      	str	r7, [r4, #0]
      this->_M_impl._M_finish = __new_finish;
 800265c:	6066      	str	r6, [r4, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800265e:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8002662:	60a5      	str	r5, [r4, #8]
    }
 8002664:	b003      	add	sp, #12
 8002666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_length_error(__N(__s));
 800266a:	480d      	ldr	r0, [pc, #52]	; (80026a0 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xd0>)
 800266c:	f018 fd44 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 8002670:	466b      	mov	r3, sp
 8002672:	e7c2      	b.n	80025fa <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002674:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 8002678:	e7c9      	b.n	800260e <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
 800267a:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 800267e:	e7c6      	b.n	800260e <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	  std::__throw_bad_alloc();
 8002680:	f018 fd34 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002684:	2700      	movs	r7, #0
 8002686:	e7d0      	b.n	800262a <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002688:	4632      	mov	r2, r6
 800268a:	4649      	mov	r1, r9
 800268c:	4638      	mov	r0, r7
 800268e:	f019 f93d 	bl	801b90c <memmove>
 8002692:	e7d1      	b.n	8002638 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x68>
 8002694:	4652      	mov	r2, sl
 8002696:	4641      	mov	r1, r8
 8002698:	4630      	mov	r0, r6
 800269a:	f019 f937 	bl	801b90c <memmove>
 800269e:	e7d2      	b.n	8002646 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x76>
 80026a0:	0801bde4 	.word	0x0801bde4

080026a4 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_>:
void TemplateCommunicationProtocol<H>::AddInterface(uint8_t ID, H* interface) {
 80026a4:	b510      	push	{r4, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	4604      	mov	r4, r0
 80026aa:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 80026ac:	f015 fc44 	bl	8017f38 <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 80026b0:	4620      	mov	r0, r4
 80026b2:	f015 fd99 	bl	80181e8 <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	interfaces.push_back(interface);
 80026b6:	f104 0038 	add.w	r0, r4, #56	; 0x38
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80026ba:	6841      	ldr	r1, [r0, #4]
 80026bc:	6883      	ldr	r3, [r0, #8]
 80026be:	4299      	cmp	r1, r3
 80026c0:	d006      	beq.n	80026d0 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_+0x2c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80026c2:	9b01      	ldr	r3, [sp, #4]
 80026c4:	600b      	str	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 80026c6:	6843      	ldr	r3, [r0, #4]
 80026c8:	3304      	adds	r3, #4
 80026ca:	6043      	str	r3, [r0, #4]
}
 80026cc:	b002      	add	sp, #8
 80026ce:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 80026d0:	aa01      	add	r2, sp, #4
 80026d2:	f7ff ff7d 	bl	80025d0 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 80026d6:	e7f9      	b.n	80026cc <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_+0x28>

080026d8 <_GLOBAL__sub_I_hadc1>:
 80026d8:	b508      	push	{r3, lr}
 80026da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026de:	2001      	movs	r0, #1
 80026e0:	f7ff fda2 	bl	8002228 <_Z41__static_initialization_and_destruction_0ii>
 80026e4:	bd08      	pop	{r3, pc}

080026e6 <_GLOBAL__sub_D_hadc1>:
 80026e6:	b508      	push	{r3, lr}
 80026e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026ec:	2000      	movs	r0, #0
 80026ee:	f7ff fd9b 	bl	8002228 <_Z41__static_initialization_and_destruction_0ii>
 80026f2:	bd08      	pop	{r3, pc}

080026f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f4:	b500      	push	{lr}
 80026f6:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <HAL_MspInit+0x30>)
 80026fa:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80026fe:	f042 0202 	orr.w	r2, r2, #2
 8002702:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8002706:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	9301      	str	r3, [sp, #4]
 8002710:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002712:	2200      	movs	r2, #0
 8002714:	210f      	movs	r1, #15
 8002716:	f06f 0001 	mvn.w	r0, #1
 800271a:	f001 fe47 	bl	80043ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800271e:	b003      	add	sp, #12
 8002720:	f85d fb04 	ldr.w	pc, [sp], #4
 8002724:	58024400 	.word	0x58024400

08002728 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002728:	b500      	push	{lr}
 800272a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	2300      	movs	r3, #0
 800272e:	9303      	str	r3, [sp, #12]
 8002730:	9304      	str	r3, [sp, #16]
 8002732:	9305      	str	r3, [sp, #20]
 8002734:	9306      	str	r3, [sp, #24]
 8002736:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8002738:	6803      	ldr	r3, [r0, #0]
 800273a:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <HAL_ADC_MspInit+0x84>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d005      	beq.n	800274c <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8002740:	4a1b      	ldr	r2, [pc, #108]	; (80027b0 <HAL_ADC_MspInit+0x88>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d024      	beq.n	8002790 <HAL_ADC_MspInit+0x68>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002746:	b009      	add	sp, #36	; 0x24
 8002748:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC12_CLK_ENABLE();
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_ADC_MspInit+0x8c>)
 800274e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8002752:	f042 0220 	orr.w	r2, r2, #32
 8002756:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800275a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800275e:	f002 0220 	and.w	r2, r2, #32
 8002762:	9200      	str	r2, [sp, #0]
 8002764:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002766:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800277e:	2310      	movs	r3, #16
 8002780:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002782:	2303      	movs	r3, #3
 8002784:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002786:	a903      	add	r1, sp, #12
 8002788:	480b      	ldr	r0, [pc, #44]	; (80027b8 <HAL_ADC_MspInit+0x90>)
 800278a:	f003 ffb7 	bl	80066fc <HAL_GPIO_Init>
 800278e:	e7da      	b.n	8002746 <HAL_ADC_MspInit+0x1e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_ADC_MspInit+0x8c>)
 8002792:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002796:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800279a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800279e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027a6:	9302      	str	r3, [sp, #8]
 80027a8:	9b02      	ldr	r3, [sp, #8]
}
 80027aa:	e7cc      	b.n	8002746 <HAL_ADC_MspInit+0x1e>
 80027ac:	40022000 	.word	0x40022000
 80027b0:	58026000 	.word	0x58026000
 80027b4:	58024400 	.word	0x58024400
 80027b8:	58020000 	.word	0x58020000

080027bc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80027bc:	b500      	push	{lr}
 80027be:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	2300      	movs	r3, #0
 80027c2:	9305      	str	r3, [sp, #20]
 80027c4:	9306      	str	r3, [sp, #24]
 80027c6:	9307      	str	r3, [sp, #28]
 80027c8:	9308      	str	r3, [sp, #32]
 80027ca:	9309      	str	r3, [sp, #36]	; 0x24
  if(hfdcan->Instance==FDCAN1)
 80027cc:	6803      	ldr	r3, [r0, #0]
 80027ce:	4a3b      	ldr	r2, [pc, #236]	; (80028bc <HAL_FDCAN_MspInit+0x100>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d005      	beq.n	80027e0 <HAL_FDCAN_MspInit+0x24>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
  else if(hfdcan->Instance==FDCAN2)
 80027d4:	4a3a      	ldr	r2, [pc, #232]	; (80028c0 <HAL_FDCAN_MspInit+0x104>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d039      	beq.n	800284e <HAL_FDCAN_MspInit+0x92>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80027da:	b00b      	add	sp, #44	; 0x2c
 80027dc:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80027e0:	4a38      	ldr	r2, [pc, #224]	; (80028c4 <HAL_FDCAN_MspInit+0x108>)
 80027e2:	6813      	ldr	r3, [r2, #0]
 80027e4:	3301      	adds	r3, #1
 80027e6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d022      	beq.n	8002832 <HAL_FDCAN_MspInit+0x76>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ec:	4b36      	ldr	r3, [pc, #216]	; (80028c8 <HAL_FDCAN_MspInit+0x10c>)
 80027ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80027fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	9302      	str	r3, [sp, #8]
 8002804:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002806:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800280a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002810:	2303      	movs	r3, #3
 8002812:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002814:	2309      	movs	r3, #9
 8002816:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002818:	a905      	add	r1, sp, #20
 800281a:	482c      	ldr	r0, [pc, #176]	; (80028cc <HAL_FDCAN_MspInit+0x110>)
 800281c:	f003 ff6e 	bl	80066fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8002820:	2200      	movs	r2, #0
 8002822:	2105      	movs	r1, #5
 8002824:	2013      	movs	r0, #19
 8002826:	f001 fdc1 	bl	80043ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800282a:	2013      	movs	r0, #19
 800282c:	f001 fdf4 	bl	8004418 <HAL_NVIC_EnableIRQ>
 8002830:	e7d3      	b.n	80027da <HAL_FDCAN_MspInit+0x1e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002832:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <HAL_FDCAN_MspInit+0x10c>)
 8002834:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8002838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800283c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8002840:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002848:	9301      	str	r3, [sp, #4]
 800284a:	9b01      	ldr	r3, [sp, #4]
 800284c:	e7ce      	b.n	80027ec <HAL_FDCAN_MspInit+0x30>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800284e:	4a1d      	ldr	r2, [pc, #116]	; (80028c4 <HAL_FDCAN_MspInit+0x108>)
 8002850:	6813      	ldr	r3, [r2, #0]
 8002852:	3301      	adds	r3, #1
 8002854:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002856:	2b01      	cmp	r3, #1
 8002858:	d021      	beq.n	800289e <HAL_FDCAN_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800285a:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <HAL_FDCAN_MspInit+0x10c>)
 800285c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002860:	f042 0202 	orr.w	r2, r2, #2
 8002864:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	9304      	str	r3, [sp, #16]
 8002872:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002874:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002878:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	2302      	movs	r3, #2
 800287c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800287e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002880:	2309      	movs	r3, #9
 8002882:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002884:	a905      	add	r1, sp, #20
 8002886:	4812      	ldr	r0, [pc, #72]	; (80028d0 <HAL_FDCAN_MspInit+0x114>)
 8002888:	f003 ff38 	bl	80066fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 5, 0);
 800288c:	2200      	movs	r2, #0
 800288e:	2105      	movs	r1, #5
 8002890:	2014      	movs	r0, #20
 8002892:	f001 fd8b 	bl	80043ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8002896:	2014      	movs	r0, #20
 8002898:	f001 fdbe 	bl	8004418 <HAL_NVIC_EnableIRQ>
}
 800289c:	e79d      	b.n	80027da <HAL_FDCAN_MspInit+0x1e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_FDCAN_MspInit+0x10c>)
 80028a0:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 80028a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 80028ac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80028b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b4:	9303      	str	r3, [sp, #12]
 80028b6:	9b03      	ldr	r3, [sp, #12]
 80028b8:	e7cf      	b.n	800285a <HAL_FDCAN_MspInit+0x9e>
 80028ba:	bf00      	nop
 80028bc:	4000a000 	.word	0x4000a000
 80028c0:	4000a400 	.word	0x4000a400
 80028c4:	240025a8 	.word	0x240025a8
 80028c8:	58024400 	.word	0x58024400
 80028cc:	58020000 	.word	0x58020000
 80028d0:	58020400 	.word	0x58020400

080028d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	b0b8      	sub	sp, #224	; 0xe0
 80028d8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028da:	2100      	movs	r1, #0
 80028dc:	9133      	str	r1, [sp, #204]	; 0xcc
 80028de:	9134      	str	r1, [sp, #208]	; 0xd0
 80028e0:	9135      	str	r1, [sp, #212]	; 0xd4
 80028e2:	9136      	str	r1, [sp, #216]	; 0xd8
 80028e4:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028e6:	22bc      	movs	r2, #188	; 0xbc
 80028e8:	a804      	add	r0, sp, #16
 80028ea:	f019 f829 	bl	801b940 <memset>
  if(hi2c->Instance==I2C1)
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	4a52      	ldr	r2, [pc, #328]	; (8002a3c <HAL_I2C_MspInit+0x168>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d004      	beq.n	8002900 <HAL_I2C_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 80028f6:	4a52      	ldr	r2, [pc, #328]	; (8002a40 <HAL_I2C_MspInit+0x16c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d06c      	beq.n	80029d6 <HAL_I2C_MspInit+0x102>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80028fc:	b038      	add	sp, #224	; 0xe0
 80028fe:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002900:	2308      	movs	r3, #8
 8002902:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002904:	a804      	add	r0, sp, #16
 8002906:	f005 fb05 	bl	8007f14 <HAL_RCCEx_PeriphCLKConfig>
 800290a:	2800      	cmp	r0, #0
 800290c:	d15a      	bne.n	80029c4 <HAL_I2C_MspInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800290e:	4e4d      	ldr	r6, [pc, #308]	; (8002a44 <HAL_I2C_MspInit+0x170>)
 8002910:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800291c:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002928:	23c0      	movs	r3, #192	; 0xc0
 800292a:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800292c:	2312      	movs	r3, #18
 800292e:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2500      	movs	r5, #0
 8002932:	9535      	str	r5, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002934:	9536      	str	r5, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002936:	2304      	movs	r3, #4
 8002938:	9337      	str	r3, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293a:	a933      	add	r1, sp, #204	; 0xcc
 800293c:	4842      	ldr	r0, [pc, #264]	; (8002a48 <HAL_I2C_MspInit+0x174>)
 800293e:	f003 fedd 	bl	80066fc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002942:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
 8002946:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800294a:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
 800294e:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
 8002952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c1_tx.Instance = DMA2_Stream0;
 800295a:	483c      	ldr	r0, [pc, #240]	; (8002a4c <HAL_I2C_MspInit+0x178>)
 800295c:	4b3c      	ldr	r3, [pc, #240]	; (8002a50 <HAL_I2C_MspInit+0x17c>)
 800295e:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002960:	2322      	movs	r3, #34	; 0x22
 8002962:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002964:	2340      	movs	r3, #64	; 0x40
 8002966:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002968:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800296a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800296e:	6103      	str	r3, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002970:	6145      	str	r5, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002972:	6185      	str	r5, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002974:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002976:	6205      	str	r5, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002978:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800297a:	f001 ff6f 	bl	800485c <HAL_DMA_Init>
 800297e:	bb20      	cbnz	r0, 80029ca <HAL_I2C_MspInit+0xf6>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002980:	4b32      	ldr	r3, [pc, #200]	; (8002a4c <HAL_I2C_MspInit+0x178>)
 8002982:	63a3      	str	r3, [r4, #56]	; 0x38
 8002984:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_i2c1_rx.Instance = DMA2_Stream1;
 8002986:	4833      	ldr	r0, [pc, #204]	; (8002a54 <HAL_I2C_MspInit+0x180>)
 8002988:	4b33      	ldr	r3, [pc, #204]	; (8002a58 <HAL_I2C_MspInit+0x184>)
 800298a:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800298c:	2321      	movs	r3, #33	; 0x21
 800298e:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002990:	2300      	movs	r3, #0
 8002992:	6083      	str	r3, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002994:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002996:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800299a:	6102      	str	r2, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800299c:	6143      	str	r3, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800299e:	6183      	str	r3, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80029a0:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029a2:	6203      	str	r3, [r0, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029a4:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80029a6:	f001 ff59 	bl	800485c <HAL_DMA_Init>
 80029aa:	b988      	cbnz	r0, 80029d0 <HAL_I2C_MspInit+0xfc>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80029ac:	4b29      	ldr	r3, [pc, #164]	; (8002a54 <HAL_I2C_MspInit+0x180>)
 80029ae:	63e3      	str	r3, [r4, #60]	; 0x3c
 80029b0:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80029b2:	2200      	movs	r2, #0
 80029b4:	2105      	movs	r1, #5
 80029b6:	201f      	movs	r0, #31
 80029b8:	f001 fcf8 	bl	80043ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80029bc:	201f      	movs	r0, #31
 80029be:	f001 fd2b 	bl	8004418 <HAL_NVIC_EnableIRQ>
 80029c2:	e79b      	b.n	80028fc <HAL_I2C_MspInit+0x28>
      Error_Handler();
 80029c4:	f7fe f854 	bl	8000a70 <Error_Handler>
 80029c8:	e7a1      	b.n	800290e <HAL_I2C_MspInit+0x3a>
      Error_Handler();
 80029ca:	f7fe f851 	bl	8000a70 <Error_Handler>
 80029ce:	e7d7      	b.n	8002980 <HAL_I2C_MspInit+0xac>
      Error_Handler();
 80029d0:	f7fe f84e 	bl	8000a70 <Error_Handler>
 80029d4:	e7ea      	b.n	80029ac <HAL_I2C_MspInit+0xd8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80029d6:	2310      	movs	r3, #16
 80029d8:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029da:	eb0d 0003 	add.w	r0, sp, r3
 80029de:	f005 fa99 	bl	8007f14 <HAL_RCCEx_PeriphCLKConfig>
 80029e2:	bb38      	cbnz	r0, 8002a34 <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e4:	4c17      	ldr	r4, [pc, #92]	; (8002a44 <HAL_I2C_MspInit+0x170>)
 80029e6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80029ea:	f043 0302 	orr.w	r3, r3, #2
 80029ee:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80029f2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	9302      	str	r3, [sp, #8]
 80029fc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a02:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a04:	2312      	movs	r3, #18
 8002a06:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	9336      	str	r3, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8002a0e:	2306      	movs	r3, #6
 8002a10:	9337      	str	r3, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a12:	a933      	add	r1, sp, #204	; 0xcc
 8002a14:	480c      	ldr	r0, [pc, #48]	; (8002a48 <HAL_I2C_MspInit+0x174>)
 8002a16:	f003 fe71 	bl	80066fc <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002a1a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8002a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a22:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8002a26:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8002a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2e:	9303      	str	r3, [sp, #12]
 8002a30:	9b03      	ldr	r3, [sp, #12]
}
 8002a32:	e763      	b.n	80028fc <HAL_I2C_MspInit+0x28>
      Error_Handler();
 8002a34:	f7fe f81c 	bl	8000a70 <Error_Handler>
 8002a38:	e7d4      	b.n	80029e4 <HAL_I2C_MspInit+0x110>
 8002a3a:	bf00      	nop
 8002a3c:	40005400 	.word	0x40005400
 8002a40:	58001c00 	.word	0x58001c00
 8002a44:	58024400 	.word	0x58024400
 8002a48:	58020400 	.word	0x58020400
 8002a4c:	2400025c 	.word	0x2400025c
 8002a50:	40020410 	.word	0x40020410
 8002a54:	240001e4 	.word	0x240001e4
 8002a58:	40020428 	.word	0x40020428

08002a5c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a60:	b0b9      	sub	sp, #228	; 0xe4
 8002a62:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	2100      	movs	r1, #0
 8002a66:	9133      	str	r1, [sp, #204]	; 0xcc
 8002a68:	9134      	str	r1, [sp, #208]	; 0xd0
 8002a6a:	9135      	str	r1, [sp, #212]	; 0xd4
 8002a6c:	9136      	str	r1, [sp, #216]	; 0xd8
 8002a6e:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a70:	22bc      	movs	r2, #188	; 0xbc
 8002a72:	a804      	add	r0, sp, #16
 8002a74:	f018 ff64 	bl	801b940 <memset>
  if(hsd->Instance==SDMMC1)
 8002a78:	6822      	ldr	r2, [r4, #0]
 8002a7a:	4b34      	ldr	r3, [pc, #208]	; (8002b4c <HAL_SD_MspInit+0xf0>)
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d002      	beq.n	8002a86 <HAL_SD_MspInit+0x2a>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002a80:	b039      	add	sp, #228	; 0xe4
 8002a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002a86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a8a:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a8c:	a804      	add	r0, sp, #16
 8002a8e:	f005 fa41 	bl	8007f14 <HAL_RCCEx_PeriphCLKConfig>
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d157      	bne.n	8002b46 <HAL_SD_MspInit+0xea>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002a96:	4b2e      	ldr	r3, [pc, #184]	; (8002b50 <HAL_SD_MspInit+0xf4>)
 8002a98:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002a9c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002aa0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002aa4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002aa8:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8002aac:	9201      	str	r2, [sp, #4]
 8002aae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002ab4:	f042 0204 	orr.w	r2, r2, #4
 8002ab8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002abc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002ac0:	f002 0204 	and.w	r2, r2, #4
 8002ac4:	9202      	str	r2, [sp, #8]
 8002ac6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ac8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002acc:	f042 0208 	orr.w	r2, r2, #8
 8002ad0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	9303      	str	r3, [sp, #12]
 8002ade:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002ae0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002ae4:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2602      	movs	r6, #2
 8002ae8:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aea:	f04f 0801 	mov.w	r8, #1
 8002aee:	f8cd 80d4 	str.w	r8, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af2:	2503      	movs	r5, #3
 8002af4:	9536      	str	r5, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002af6:	240c      	movs	r4, #12
 8002af8:	9437      	str	r4, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002afa:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8002b58 <HAL_SD_MspInit+0xfc>
 8002afe:	a933      	add	r1, sp, #204	; 0xcc
 8002b00:	4648      	mov	r0, r9
 8002b02:	f003 fdfb 	bl	80066fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b0a:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0c:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	2700      	movs	r7, #0
 8002b10:	9735      	str	r7, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b12:	9536      	str	r5, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002b14:	9437      	str	r4, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b16:	a933      	add	r1, sp, #204	; 0xcc
 8002b18:	4648      	mov	r0, r9
 8002b1a:	f003 fdef 	bl	80066fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b1e:	2304      	movs	r3, #4
 8002b20:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b24:	f8cd 80d4 	str.w	r8, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b28:	9536      	str	r5, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002b2a:	9437      	str	r4, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b2c:	a933      	add	r1, sp, #204	; 0xcc
 8002b2e:	4809      	ldr	r0, [pc, #36]	; (8002b54 <HAL_SD_MspInit+0xf8>)
 8002b30:	f003 fde4 	bl	80066fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8002b34:	463a      	mov	r2, r7
 8002b36:	2105      	movs	r1, #5
 8002b38:	2031      	movs	r0, #49	; 0x31
 8002b3a:	f001 fc37 	bl	80043ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002b3e:	2031      	movs	r0, #49	; 0x31
 8002b40:	f001 fc6a 	bl	8004418 <HAL_NVIC_EnableIRQ>
}
 8002b44:	e79c      	b.n	8002a80 <HAL_SD_MspInit+0x24>
      Error_Handler();
 8002b46:	f7fd ff93 	bl	8000a70 <Error_Handler>
 8002b4a:	e7a4      	b.n	8002a96 <HAL_SD_MspInit+0x3a>
 8002b4c:	52007000 	.word	0x52007000
 8002b50:	58024400 	.word	0x58024400
 8002b54:	58020c00 	.word	0x58020c00
 8002b58:	58020800 	.word	0x58020800

08002b5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b5c:	b500      	push	{lr}
 8002b5e:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 8002b60:	6803      	ldr	r3, [r0, #0]
 8002b62:	4a16      	ldr	r2, [pc, #88]	; (8002bbc <HAL_TIM_Base_MspInit+0x60>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d005      	beq.n	8002b74 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8002b68:	4a15      	ldr	r2, [pc, #84]	; (8002bc0 <HAL_TIM_Base_MspInit+0x64>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d010      	beq.n	8002b90 <HAL_TIM_Base_MspInit+0x34>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b6e:	b003      	add	sp, #12
 8002b70:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b74:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <HAL_TIM_Base_MspInit+0x68>)
 8002b76:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002b7a:	f042 0202 	orr.w	r2, r2, #2
 8002b7e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002b82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	9b00      	ldr	r3, [sp, #0]
 8002b8e:	e7ee      	b.n	8002b6e <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <HAL_TIM_Base_MspInit+0x68>)
 8002b92:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002b96:	f042 0204 	orr.w	r2, r2, #4
 8002b9a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002b9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002baa:	2200      	movs	r2, #0
 8002bac:	2105      	movs	r1, #5
 8002bae:	201e      	movs	r0, #30
 8002bb0:	f001 fbfc 	bl	80043ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002bb4:	201e      	movs	r0, #30
 8002bb6:	f001 fc2f 	bl	8004418 <HAL_NVIC_EnableIRQ>
}
 8002bba:	e7d8      	b.n	8002b6e <HAL_TIM_Base_MspInit+0x12>
 8002bbc:	40000400 	.word	0x40000400
 8002bc0:	40000800 	.word	0x40000800
 8002bc4:	58024400 	.word	0x58024400

08002bc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bc8:	b510      	push	{r4, lr}
 8002bca:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bcc:	2300      	movs	r3, #0
 8002bce:	9303      	str	r3, [sp, #12]
 8002bd0:	9304      	str	r3, [sp, #16]
 8002bd2:	9305      	str	r3, [sp, #20]
 8002bd4:	9306      	str	r3, [sp, #24]
 8002bd6:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 8002bd8:	6802      	ldr	r2, [r0, #0]
 8002bda:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <HAL_TIM_MspPostInit+0x78>)
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002be0:	b008      	add	sp, #32
 8002be2:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be4:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <HAL_TIM_MspPostInit+0x7c>)
 8002be6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002bf2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002bf6:	f002 0201 	and.w	r2, r2, #1
 8002bfa:	9201      	str	r2, [sp, #4]
 8002bfc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c02:	f042 0202 	orr.w	r2, r2, #2
 8002c06:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	9302      	str	r3, [sp, #8]
 8002c14:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin;
 8002c16:	23c0      	movs	r3, #192	; 0xc0
 8002c18:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1a:	2402      	movs	r4, #2
 8002c1c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c1e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c20:	a903      	add	r1, sp, #12
 8002c22:	4809      	ldr	r0, [pc, #36]	; (8002c48 <HAL_TIM_MspPostInit+0x80>)
 8002c24:	f003 fd6a 	bl	80066fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_B_Pin;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c32:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c34:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8002c36:	a903      	add	r1, sp, #12
 8002c38:	4804      	ldr	r0, [pc, #16]	; (8002c4c <HAL_TIM_MspPostInit+0x84>)
 8002c3a:	f003 fd5f 	bl	80066fc <HAL_GPIO_Init>
}
 8002c3e:	e7cf      	b.n	8002be0 <HAL_TIM_MspPostInit+0x18>
 8002c40:	40000400 	.word	0x40000400
 8002c44:	58024400 	.word	0x58024400
 8002c48:	58020000 	.word	0x58020000
 8002c4c:	58020400 	.word	0x58020400

08002c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c52:	b0c5      	sub	sp, #276	; 0x114
 8002c54:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c56:	2100      	movs	r1, #0
 8002c58:	913f      	str	r1, [sp, #252]	; 0xfc
 8002c5a:	9140      	str	r1, [sp, #256]	; 0x100
 8002c5c:	9141      	str	r1, [sp, #260]	; 0x104
 8002c5e:	9142      	str	r1, [sp, #264]	; 0x108
 8002c60:	9143      	str	r1, [sp, #268]	; 0x10c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c62:	22bc      	movs	r2, #188	; 0xbc
 8002c64:	a810      	add	r0, sp, #64	; 0x40
 8002c66:	f018 fe6b 	bl	801b940 <memset>
  if(huart->Instance==UART4)
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	4a7b      	ldr	r2, [pc, #492]	; (8002e5c <HAL_UART_MspInit+0x20c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d019      	beq.n	8002ca6 <HAL_UART_MspInit+0x56>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 8002c72:	4a7b      	ldr	r2, [pc, #492]	; (8002e60 <HAL_UART_MspInit+0x210>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	f000 8082 	beq.w	8002d7e <HAL_UART_MspInit+0x12e>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==UART8)
 8002c7a:	4a7a      	ldr	r2, [pc, #488]	; (8002e64 <HAL_UART_MspInit+0x214>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	f000 8111 	beq.w	8002ea4 <HAL_UART_MspInit+0x254>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(huart->Instance==USART1)
 8002c82:	4a79      	ldr	r2, [pc, #484]	; (8002e68 <HAL_UART_MspInit+0x218>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	f000 817a 	beq.w	8002f7e <HAL_UART_MspInit+0x32e>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8002c8a:	4a78      	ldr	r2, [pc, #480]	; (8002e6c <HAL_UART_MspInit+0x21c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	f000 81e4 	beq.w	800305a <HAL_UART_MspInit+0x40a>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8002c92:	4a77      	ldr	r2, [pc, #476]	; (8002e70 <HAL_UART_MspInit+0x220>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	f000 826b 	beq.w	8003170 <HAL_UART_MspInit+0x520>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8002c9a:	4a76      	ldr	r2, [pc, #472]	; (8002e74 <HAL_UART_MspInit+0x224>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	f000 82ec 	beq.w	800327a <HAL_UART_MspInit+0x62a>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002ca2:	b045      	add	sp, #276	; 0x114
 8002ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002caa:	a810      	add	r0, sp, #64	; 0x40
 8002cac:	f005 f932 	bl	8007f14 <HAL_RCCEx_PeriphCLKConfig>
 8002cb0:	2800      	cmp	r0, #0
 8002cb2:	d15b      	bne.n	8002d6c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002cb4:	4b70      	ldr	r3, [pc, #448]	; (8002e78 <HAL_UART_MspInit+0x228>)
 8002cb6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002cba:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002cbe:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002cc2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002cc6:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002cca:	9201      	str	r2, [sp, #4]
 8002ccc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002cd2:	f042 0208 	orr.w	r2, r2, #8
 8002cd6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	9302      	str	r3, [sp, #8]
 8002ce4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = RX4_GNSS_Pin|TX4_GNSS_Pin;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	933f      	str	r3, [sp, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cea:	2302      	movs	r3, #2
 8002cec:	9340      	str	r3, [sp, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2500      	movs	r5, #0
 8002cf0:	9541      	str	r5, [sp, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf2:	9542      	str	r5, [sp, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	9343      	str	r3, [sp, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cf8:	a93f      	add	r1, sp, #252	; 0xfc
 8002cfa:	4860      	ldr	r0, [pc, #384]	; (8002e7c <HAL_UART_MspInit+0x22c>)
 8002cfc:	f003 fcfe 	bl	80066fc <HAL_GPIO_Init>
    hdma_uart4_tx.Instance = DMA2_Stream2;
 8002d00:	485f      	ldr	r0, [pc, #380]	; (8002e80 <HAL_UART_MspInit+0x230>)
 8002d02:	4b60      	ldr	r3, [pc, #384]	; (8002e84 <HAL_UART_MspInit+0x234>)
 8002d04:	6003      	str	r3, [r0, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002d06:	2340      	movs	r3, #64	; 0x40
 8002d08:	6043      	str	r3, [r0, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d0a:	6083      	str	r3, [r0, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d0c:	60c5      	str	r5, [r0, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d12:	6103      	str	r3, [r0, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d14:	6145      	str	r5, [r0, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d16:	6185      	str	r5, [r0, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002d18:	61c5      	str	r5, [r0, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d1a:	6205      	str	r5, [r0, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d1c:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002d1e:	f001 fd9d 	bl	800485c <HAL_DMA_Init>
 8002d22:	bb30      	cbnz	r0, 8002d72 <HAL_UART_MspInit+0x122>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002d24:	4b56      	ldr	r3, [pc, #344]	; (8002e80 <HAL_UART_MspInit+0x230>)
 8002d26:	67a3      	str	r3, [r4, #120]	; 0x78
 8002d28:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_uart4_rx.Instance = DMA2_Stream3;
 8002d2a:	4857      	ldr	r0, [pc, #348]	; (8002e88 <HAL_UART_MspInit+0x238>)
 8002d2c:	4b57      	ldr	r3, [pc, #348]	; (8002e8c <HAL_UART_MspInit+0x23c>)
 8002d2e:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002d30:	233f      	movs	r3, #63	; 0x3f
 8002d32:	6043      	str	r3, [r0, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d34:	2300      	movs	r3, #0
 8002d36:	6083      	str	r3, [r0, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d38:	60c3      	str	r3, [r0, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d3e:	6102      	str	r2, [r0, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d40:	6143      	str	r3, [r0, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d42:	6183      	str	r3, [r0, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002d44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d48:	61c2      	str	r2, [r0, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d4a:	6203      	str	r3, [r0, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d4c:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002d4e:	f001 fd85 	bl	800485c <HAL_DMA_Init>
 8002d52:	b988      	cbnz	r0, 8002d78 <HAL_UART_MspInit+0x128>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002d54:	4b4c      	ldr	r3, [pc, #304]	; (8002e88 <HAL_UART_MspInit+0x238>)
 8002d56:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002d58:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2105      	movs	r1, #5
 8002d5e:	2034      	movs	r0, #52	; 0x34
 8002d60:	f001 fb24 	bl	80043ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002d64:	2034      	movs	r0, #52	; 0x34
 8002d66:	f001 fb57 	bl	8004418 <HAL_NVIC_EnableIRQ>
 8002d6a:	e79a      	b.n	8002ca2 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002d6c:	f7fd fe80 	bl	8000a70 <Error_Handler>
 8002d70:	e7a0      	b.n	8002cb4 <HAL_UART_MspInit+0x64>
      Error_Handler();
 8002d72:	f7fd fe7d 	bl	8000a70 <Error_Handler>
 8002d76:	e7d5      	b.n	8002d24 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002d78:	f7fd fe7a 	bl	8000a70 <Error_Handler>
 8002d7c:	e7ea      	b.n	8002d54 <HAL_UART_MspInit+0x104>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d82:	a810      	add	r0, sp, #64	; 0x40
 8002d84:	f005 f8c6 	bl	8007f14 <HAL_RCCEx_PeriphCLKConfig>
 8002d88:	2800      	cmp	r0, #0
 8002d8a:	d15d      	bne.n	8002e48 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002d8c:	4b3a      	ldr	r3, [pc, #232]	; (8002e78 <HAL_UART_MspInit+0x228>)
 8002d8e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002d92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d96:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002d9a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002d9e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002da2:	9203      	str	r2, [sp, #12]
 8002da4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002da6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002daa:	f042 0210 	orr.w	r2, r2, #16
 8002dae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	9304      	str	r3, [sp, #16]
 8002dbc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = RX7_4G_Pin|TX7_4G_Pin|RTS7_4G_Pin|CTS7_4G_Pin;
 8002dbe:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002dc2:	933f      	str	r3, [sp, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	9340      	str	r3, [sp, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2500      	movs	r5, #0
 8002dca:	9541      	str	r5, [sp, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dcc:	9542      	str	r5, [sp, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002dce:	2307      	movs	r3, #7
 8002dd0:	9343      	str	r3, [sp, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dd2:	a93f      	add	r1, sp, #252	; 0xfc
 8002dd4:	482e      	ldr	r0, [pc, #184]	; (8002e90 <HAL_UART_MspInit+0x240>)
 8002dd6:	f003 fc91 	bl	80066fc <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA2_Stream4;
 8002dda:	482e      	ldr	r0, [pc, #184]	; (8002e94 <HAL_UART_MspInit+0x244>)
 8002ddc:	4b2e      	ldr	r3, [pc, #184]	; (8002e98 <HAL_UART_MspInit+0x248>)
 8002dde:	6003      	str	r3, [r0, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8002de0:	2350      	movs	r3, #80	; 0x50
 8002de2:	6043      	str	r3, [r0, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002de4:	2340      	movs	r3, #64	; 0x40
 8002de6:	6083      	str	r3, [r0, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002de8:	60c5      	str	r5, [r0, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dee:	6103      	str	r3, [r0, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002df0:	6145      	str	r5, [r0, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002df2:	6185      	str	r5, [r0, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8002df4:	61c5      	str	r5, [r0, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002df6:	6205      	str	r5, [r0, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002df8:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8002dfa:	f001 fd2f 	bl	800485c <HAL_DMA_Init>
 8002dfe:	bb30      	cbnz	r0, 8002e4e <HAL_UART_MspInit+0x1fe>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 8002e00:	4b24      	ldr	r3, [pc, #144]	; (8002e94 <HAL_UART_MspInit+0x244>)
 8002e02:	67a3      	str	r3, [r4, #120]	; 0x78
 8002e04:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_uart7_rx.Instance = DMA2_Stream5;
 8002e06:	4825      	ldr	r0, [pc, #148]	; (8002e9c <HAL_UART_MspInit+0x24c>)
 8002e08:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <HAL_UART_MspInit+0x250>)
 8002e0a:	6003      	str	r3, [r0, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8002e0c:	234f      	movs	r3, #79	; 0x4f
 8002e0e:	6043      	str	r3, [r0, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e10:	2300      	movs	r3, #0
 8002e12:	6083      	str	r3, [r0, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e14:	60c3      	str	r3, [r0, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e1a:	6102      	str	r2, [r0, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e1c:	6143      	str	r3, [r0, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e1e:	6183      	str	r3, [r0, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8002e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e24:	61c2      	str	r2, [r0, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e26:	6203      	str	r3, [r0, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e28:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002e2a:	f001 fd17 	bl	800485c <HAL_DMA_Init>
 8002e2e:	b988      	cbnz	r0, 8002e54 <HAL_UART_MspInit+0x204>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8002e30:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <HAL_UART_MspInit+0x24c>)
 8002e32:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002e34:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8002e36:	2200      	movs	r2, #0
 8002e38:	2105      	movs	r1, #5
 8002e3a:	2052      	movs	r0, #82	; 0x52
 8002e3c:	f001 fab6 	bl	80043ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002e40:	2052      	movs	r0, #82	; 0x52
 8002e42:	f001 fae9 	bl	8004418 <HAL_NVIC_EnableIRQ>
 8002e46:	e72c      	b.n	8002ca2 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002e48:	f7fd fe12 	bl	8000a70 <Error_Handler>
 8002e4c:	e79e      	b.n	8002d8c <HAL_UART_MspInit+0x13c>
      Error_Handler();
 8002e4e:	f7fd fe0f 	bl	8000a70 <Error_Handler>
 8002e52:	e7d5      	b.n	8002e00 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 8002e54:	f7fd fe0c 	bl	8000a70 <Error_Handler>
 8002e58:	e7ea      	b.n	8002e30 <HAL_UART_MspInit+0x1e0>
 8002e5a:	bf00      	nop
 8002e5c:	40004c00 	.word	0x40004c00
 8002e60:	40007800 	.word	0x40007800
 8002e64:	40007c00 	.word	0x40007c00
 8002e68:	40011000 	.word	0x40011000
 8002e6c:	40004400 	.word	0x40004400
 8002e70:	40004800 	.word	0x40004800
 8002e74:	40011400 	.word	0x40011400
 8002e78:	58024400 	.word	0x58024400
 8002e7c:	58020c00 	.word	0x58020c00
 8002e80:	2400034c 	.word	0x2400034c
 8002e84:	40020440 	.word	0x40020440
 8002e88:	240002d4 	.word	0x240002d4
 8002e8c:	40020458 	.word	0x40020458
 8002e90:	58021000 	.word	0x58021000
 8002e94:	2400043c 	.word	0x2400043c
 8002e98:	40020470 	.word	0x40020470
 8002e9c:	240003c4 	.word	0x240003c4
 8002ea0:	40020488 	.word	0x40020488
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ea8:	a810      	add	r0, sp, #64	; 0x40
 8002eaa:	f005 f833 	bl	8007f14 <HAL_RCCEx_PeriphCLKConfig>
 8002eae:	2800      	cmp	r0, #0
 8002eb0:	d15c      	bne.n	8002f6c <HAL_UART_MspInit+0x31c>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002eb2:	4ba0      	ldr	r3, [pc, #640]	; (8003134 <HAL_UART_MspInit+0x4e4>)
 8002eb4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002eb8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ebc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002ec0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002ec4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ec8:	9205      	str	r2, [sp, #20]
 8002eca:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ecc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002ed0:	f042 0210 	orr.w	r2, r2, #16
 8002ed4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	9306      	str	r3, [sp, #24]
 8002ee2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RX8_EXT_Pin|TX8_EXT_Pin;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	933f      	str	r3, [sp, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	9340      	str	r3, [sp, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2500      	movs	r5, #0
 8002eee:	9541      	str	r5, [sp, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef0:	9542      	str	r5, [sp, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	9343      	str	r3, [sp, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ef6:	a93f      	add	r1, sp, #252	; 0xfc
 8002ef8:	488f      	ldr	r0, [pc, #572]	; (8003138 <HAL_UART_MspInit+0x4e8>)
 8002efa:	f003 fbff 	bl	80066fc <HAL_GPIO_Init>
    hdma_uart8_tx.Instance = DMA2_Stream6;
 8002efe:	488f      	ldr	r0, [pc, #572]	; (800313c <HAL_UART_MspInit+0x4ec>)
 8002f00:	4b8f      	ldr	r3, [pc, #572]	; (8003140 <HAL_UART_MspInit+0x4f0>)
 8002f02:	6003      	str	r3, [r0, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8002f04:	2352      	movs	r3, #82	; 0x52
 8002f06:	6043      	str	r3, [r0, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f08:	2340      	movs	r3, #64	; 0x40
 8002f0a:	6083      	str	r3, [r0, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f0c:	60c5      	str	r5, [r0, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f12:	6103      	str	r3, [r0, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f14:	6145      	str	r5, [r0, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f16:	6185      	str	r5, [r0, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8002f18:	61c5      	str	r5, [r0, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f1a:	6205      	str	r5, [r0, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f1c:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8002f1e:	f001 fc9d 	bl	800485c <HAL_DMA_Init>
 8002f22:	bb30      	cbnz	r0, 8002f72 <HAL_UART_MspInit+0x322>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8002f24:	4b85      	ldr	r3, [pc, #532]	; (800313c <HAL_UART_MspInit+0x4ec>)
 8002f26:	67a3      	str	r3, [r4, #120]	; 0x78
 8002f28:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_uart8_rx.Instance = DMA2_Stream7;
 8002f2a:	4886      	ldr	r0, [pc, #536]	; (8003144 <HAL_UART_MspInit+0x4f4>)
 8002f2c:	4b86      	ldr	r3, [pc, #536]	; (8003148 <HAL_UART_MspInit+0x4f8>)
 8002f2e:	6003      	str	r3, [r0, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8002f30:	2351      	movs	r3, #81	; 0x51
 8002f32:	6043      	str	r3, [r0, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f34:	2300      	movs	r3, #0
 8002f36:	6083      	str	r3, [r0, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f38:	60c3      	str	r3, [r0, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f3e:	6102      	str	r2, [r0, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f40:	6143      	str	r3, [r0, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f42:	6183      	str	r3, [r0, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8002f44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f48:	61c2      	str	r2, [r0, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f4a:	6203      	str	r3, [r0, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f4c:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8002f4e:	f001 fc85 	bl	800485c <HAL_DMA_Init>
 8002f52:	b988      	cbnz	r0, 8002f78 <HAL_UART_MspInit+0x328>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8002f54:	4b7b      	ldr	r3, [pc, #492]	; (8003144 <HAL_UART_MspInit+0x4f4>)
 8002f56:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002f58:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2105      	movs	r1, #5
 8002f5e:	2053      	movs	r0, #83	; 0x53
 8002f60:	f001 fa24 	bl	80043ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002f64:	2053      	movs	r0, #83	; 0x53
 8002f66:	f001 fa57 	bl	8004418 <HAL_NVIC_EnableIRQ>
 8002f6a:	e69a      	b.n	8002ca2 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8002f6c:	f7fd fd80 	bl	8000a70 <Error_Handler>
 8002f70:	e79f      	b.n	8002eb2 <HAL_UART_MspInit+0x262>
      Error_Handler();
 8002f72:	f7fd fd7d 	bl	8000a70 <Error_Handler>
 8002f76:	e7d5      	b.n	8002f24 <HAL_UART_MspInit+0x2d4>
      Error_Handler();
 8002f78:	f7fd fd7a 	bl	8000a70 <Error_Handler>
 8002f7c:	e7ea      	b.n	8002f54 <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f82:	a810      	add	r0, sp, #64	; 0x40
 8002f84:	f004 ffc6 	bl	8007f14 <HAL_RCCEx_PeriphCLKConfig>
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	d15d      	bne.n	8003048 <HAL_UART_MspInit+0x3f8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f8c:	4b69      	ldr	r3, [pc, #420]	; (8003134 <HAL_UART_MspInit+0x4e4>)
 8002f8e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002f92:	f042 0210 	orr.w	r2, r2, #16
 8002f96:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002f9a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002f9e:	f002 0210 	and.w	r2, r2, #16
 8002fa2:	9207      	str	r2, [sp, #28]
 8002fa4:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	9308      	str	r3, [sp, #32]
 8002fbc:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = TX1_FRONT_Pin|RX1_FRONT_Pin;
 8002fbe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002fc2:	933f      	str	r3, [sp, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	9340      	str	r3, [sp, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2500      	movs	r5, #0
 8002fca:	9541      	str	r5, [sp, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fcc:	9542      	str	r5, [sp, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fce:	2307      	movs	r3, #7
 8002fd0:	9343      	str	r3, [sp, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd2:	a93f      	add	r1, sp, #252	; 0xfc
 8002fd4:	485d      	ldr	r0, [pc, #372]	; (800314c <HAL_UART_MspInit+0x4fc>)
 8002fd6:	f003 fb91 	bl	80066fc <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8002fda:	485d      	ldr	r0, [pc, #372]	; (8003150 <HAL_UART_MspInit+0x500>)
 8002fdc:	4b5d      	ldr	r3, [pc, #372]	; (8003154 <HAL_UART_MspInit+0x504>)
 8002fde:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002fe0:	232a      	movs	r3, #42	; 0x2a
 8002fe2:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fe4:	2340      	movs	r3, #64	; 0x40
 8002fe6:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe8:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fee:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ff0:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ff2:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ff4:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ff6:	6205      	str	r5, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ff8:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002ffa:	f001 fc2f 	bl	800485c <HAL_DMA_Init>
 8002ffe:	bb30      	cbnz	r0, 800304e <HAL_UART_MspInit+0x3fe>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003000:	4b53      	ldr	r3, [pc, #332]	; (8003150 <HAL_UART_MspInit+0x500>)
 8003002:	67a3      	str	r3, [r4, #120]	; 0x78
 8003004:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart1_rx.Instance = DMA1_Stream1;
 8003006:	4854      	ldr	r0, [pc, #336]	; (8003158 <HAL_UART_MspInit+0x508>)
 8003008:	4b54      	ldr	r3, [pc, #336]	; (800315c <HAL_UART_MspInit+0x50c>)
 800300a:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800300c:	2329      	movs	r3, #41	; 0x29
 800300e:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003010:	2300      	movs	r3, #0
 8003012:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003014:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003016:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800301a:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800301c:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800301e:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003020:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003024:	61c2      	str	r2, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003026:	6203      	str	r3, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003028:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800302a:	f001 fc17 	bl	800485c <HAL_DMA_Init>
 800302e:	b988      	cbnz	r0, 8003054 <HAL_UART_MspInit+0x404>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003030:	4b49      	ldr	r3, [pc, #292]	; (8003158 <HAL_UART_MspInit+0x508>)
 8003032:	67e3      	str	r3, [r4, #124]	; 0x7c
 8003034:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2105      	movs	r1, #5
 800303a:	2025      	movs	r0, #37	; 0x25
 800303c:	f001 f9b6 	bl	80043ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003040:	2025      	movs	r0, #37	; 0x25
 8003042:	f001 f9e9 	bl	8004418 <HAL_NVIC_EnableIRQ>
 8003046:	e62c      	b.n	8002ca2 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8003048:	f7fd fd12 	bl	8000a70 <Error_Handler>
 800304c:	e79e      	b.n	8002f8c <HAL_UART_MspInit+0x33c>
      Error_Handler();
 800304e:	f7fd fd0f 	bl	8000a70 <Error_Handler>
 8003052:	e7d5      	b.n	8003000 <HAL_UART_MspInit+0x3b0>
      Error_Handler();
 8003054:	f7fd fd0c 	bl	8000a70 <Error_Handler>
 8003058:	e7ea      	b.n	8003030 <HAL_UART_MspInit+0x3e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800305a:	2302      	movs	r3, #2
 800305c:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800305e:	a810      	add	r0, sp, #64	; 0x40
 8003060:	f004 ff58 	bl	8007f14 <HAL_RCCEx_PeriphCLKConfig>
 8003064:	2800      	cmp	r0, #0
 8003066:	d15c      	bne.n	8003122 <HAL_UART_MspInit+0x4d2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003068:	4b32      	ldr	r3, [pc, #200]	; (8003134 <HAL_UART_MspInit+0x4e4>)
 800306a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800306e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003072:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003076:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800307a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800307e:	9209      	str	r2, [sp, #36]	; 0x24
 8003080:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003082:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800308e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	930a      	str	r3, [sp, #40]	; 0x28
 8003098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = TX2_RADIO_Pin|RX2_RADIO_Pin;
 800309a:	230c      	movs	r3, #12
 800309c:	933f      	str	r3, [sp, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309e:	2302      	movs	r3, #2
 80030a0:	9340      	str	r3, [sp, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2500      	movs	r5, #0
 80030a4:	9541      	str	r5, [sp, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a6:	9542      	str	r5, [sp, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030a8:	2307      	movs	r3, #7
 80030aa:	9343      	str	r3, [sp, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ac:	a93f      	add	r1, sp, #252	; 0xfc
 80030ae:	4827      	ldr	r0, [pc, #156]	; (800314c <HAL_UART_MspInit+0x4fc>)
 80030b0:	f003 fb24 	bl	80066fc <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream2;
 80030b4:	482a      	ldr	r0, [pc, #168]	; (8003160 <HAL_UART_MspInit+0x510>)
 80030b6:	4b2b      	ldr	r3, [pc, #172]	; (8003164 <HAL_UART_MspInit+0x514>)
 80030b8:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80030ba:	232c      	movs	r3, #44	; 0x2c
 80030bc:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030be:	2340      	movs	r3, #64	; 0x40
 80030c0:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030c2:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030c8:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030ca:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030cc:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80030ce:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030d0:	6205      	str	r5, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030d2:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80030d4:	f001 fbc2 	bl	800485c <HAL_DMA_Init>
 80030d8:	bb30      	cbnz	r0, 8003128 <HAL_UART_MspInit+0x4d8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80030da:	4b21      	ldr	r3, [pc, #132]	; (8003160 <HAL_UART_MspInit+0x510>)
 80030dc:	67a3      	str	r3, [r4, #120]	; 0x78
 80030de:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream3;
 80030e0:	4821      	ldr	r0, [pc, #132]	; (8003168 <HAL_UART_MspInit+0x518>)
 80030e2:	4b22      	ldr	r3, [pc, #136]	; (800316c <HAL_UART_MspInit+0x51c>)
 80030e4:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80030e6:	232b      	movs	r3, #43	; 0x2b
 80030e8:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ea:	2300      	movs	r3, #0
 80030ec:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ee:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030f4:	6102      	str	r2, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030f6:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030f8:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80030fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030fe:	61c2      	str	r2, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003100:	6203      	str	r3, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003102:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003104:	f001 fbaa 	bl	800485c <HAL_DMA_Init>
 8003108:	b988      	cbnz	r0, 800312e <HAL_UART_MspInit+0x4de>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800310a:	4b17      	ldr	r3, [pc, #92]	; (8003168 <HAL_UART_MspInit+0x518>)
 800310c:	67e3      	str	r3, [r4, #124]	; 0x7c
 800310e:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003110:	2200      	movs	r2, #0
 8003112:	2105      	movs	r1, #5
 8003114:	2026      	movs	r0, #38	; 0x26
 8003116:	f001 f949 	bl	80043ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800311a:	2026      	movs	r0, #38	; 0x26
 800311c:	f001 f97c 	bl	8004418 <HAL_NVIC_EnableIRQ>
 8003120:	e5bf      	b.n	8002ca2 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8003122:	f7fd fca5 	bl	8000a70 <Error_Handler>
 8003126:	e79f      	b.n	8003068 <HAL_UART_MspInit+0x418>
      Error_Handler();
 8003128:	f7fd fca2 	bl	8000a70 <Error_Handler>
 800312c:	e7d5      	b.n	80030da <HAL_UART_MspInit+0x48a>
      Error_Handler();
 800312e:	f7fd fc9f 	bl	8000a70 <Error_Handler>
 8003132:	e7ea      	b.n	800310a <HAL_UART_MspInit+0x4ba>
 8003134:	58024400 	.word	0x58024400
 8003138:	58021000 	.word	0x58021000
 800313c:	2400052c 	.word	0x2400052c
 8003140:	400204a0 	.word	0x400204a0
 8003144:	240004b4 	.word	0x240004b4
 8003148:	400204b8 	.word	0x400204b8
 800314c:	58020000 	.word	0x58020000
 8003150:	2400061c 	.word	0x2400061c
 8003154:	40020010 	.word	0x40020010
 8003158:	240005a4 	.word	0x240005a4
 800315c:	40020028 	.word	0x40020028
 8003160:	2400070c 	.word	0x2400070c
 8003164:	40020040 	.word	0x40020040
 8003168:	24000694 	.word	0x24000694
 800316c:	40020058 	.word	0x40020058
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003170:	2302      	movs	r3, #2
 8003172:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003174:	a810      	add	r0, sp, #64	; 0x40
 8003176:	f004 fecd 	bl	8007f14 <HAL_RCCEx_PeriphCLKConfig>
 800317a:	2800      	cmp	r0, #0
 800317c:	d174      	bne.n	8003268 <HAL_UART_MspInit+0x618>
    __HAL_RCC_USART3_CLK_ENABLE();
 800317e:	4b75      	ldr	r3, [pc, #468]	; (8003354 <HAL_UART_MspInit+0x704>)
 8003180:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003184:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003188:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800318c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003190:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003194:	920b      	str	r2, [sp, #44]	; 0x2c
 8003196:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003198:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800319c:	f042 0202 	orr.w	r2, r2, #2
 80031a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80031a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80031a8:	f002 0202 	and.w	r2, r2, #2
 80031ac:	920c      	str	r2, [sp, #48]	; 0x30
 80031ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80031b4:	f042 0208 	orr.w	r2, r2, #8
 80031b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80031bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	930d      	str	r3, [sp, #52]	; 0x34
 80031c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = DE3_RS485_Pin;
 80031c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031cc:	933f      	str	r3, [sp, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ce:	2702      	movs	r7, #2
 80031d0:	9740      	str	r7, [sp, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	2500      	movs	r5, #0
 80031d4:	9541      	str	r5, [sp, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d6:	9542      	str	r5, [sp, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031d8:	2607      	movs	r6, #7
 80031da:	9643      	str	r6, [sp, #268]	; 0x10c
    HAL_GPIO_Init(DE3_RS485_GPIO_Port, &GPIO_InitStruct);
 80031dc:	a93f      	add	r1, sp, #252	; 0xfc
 80031de:	485e      	ldr	r0, [pc, #376]	; (8003358 <HAL_UART_MspInit+0x708>)
 80031e0:	f003 fa8c 	bl	80066fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_RS485_Pin|RX3_RS485_Pin;
 80031e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031e8:	933f      	str	r3, [sp, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ea:	9740      	str	r7, [sp, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	9541      	str	r5, [sp, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ee:	9542      	str	r5, [sp, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031f0:	9643      	str	r6, [sp, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031f2:	a93f      	add	r1, sp, #252	; 0xfc
 80031f4:	4859      	ldr	r0, [pc, #356]	; (800335c <HAL_UART_MspInit+0x70c>)
 80031f6:	f003 fa81 	bl	80066fc <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream4;
 80031fa:	4859      	ldr	r0, [pc, #356]	; (8003360 <HAL_UART_MspInit+0x710>)
 80031fc:	4b59      	ldr	r3, [pc, #356]	; (8003364 <HAL_UART_MspInit+0x714>)
 80031fe:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003200:	232e      	movs	r3, #46	; 0x2e
 8003202:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003204:	2340      	movs	r3, #64	; 0x40
 8003206:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003208:	60c5      	str	r5, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800320a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800320e:	6103      	str	r3, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003210:	6145      	str	r5, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003212:	6185      	str	r5, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003214:	61c5      	str	r5, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003216:	6205      	str	r5, [r0, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003218:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800321a:	f001 fb1f 	bl	800485c <HAL_DMA_Init>
 800321e:	bb30      	cbnz	r0, 800326e <HAL_UART_MspInit+0x61e>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003220:	4b4f      	ldr	r3, [pc, #316]	; (8003360 <HAL_UART_MspInit+0x710>)
 8003222:	67a3      	str	r3, [r4, #120]	; 0x78
 8003224:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart3_rx.Instance = DMA1_Stream5;
 8003226:	4850      	ldr	r0, [pc, #320]	; (8003368 <HAL_UART_MspInit+0x718>)
 8003228:	4b50      	ldr	r3, [pc, #320]	; (800336c <HAL_UART_MspInit+0x71c>)
 800322a:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800322c:	232d      	movs	r3, #45	; 0x2d
 800322e:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003230:	2300      	movs	r3, #0
 8003232:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003234:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003236:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800323a:	6102      	str	r2, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800323c:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800323e:	6183      	str	r3, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003240:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003244:	61c2      	str	r2, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003246:	6203      	str	r3, [r0, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003248:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800324a:	f001 fb07 	bl	800485c <HAL_DMA_Init>
 800324e:	b988      	cbnz	r0, 8003274 <HAL_UART_MspInit+0x624>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003250:	4b45      	ldr	r3, [pc, #276]	; (8003368 <HAL_UART_MspInit+0x718>)
 8003252:	67e3      	str	r3, [r4, #124]	; 0x7c
 8003254:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003256:	2200      	movs	r2, #0
 8003258:	2105      	movs	r1, #5
 800325a:	2027      	movs	r0, #39	; 0x27
 800325c:	f001 f8a6 	bl	80043ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003260:	2027      	movs	r0, #39	; 0x27
 8003262:	f001 f8d9 	bl	8004418 <HAL_NVIC_EnableIRQ>
 8003266:	e51c      	b.n	8002ca2 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8003268:	f7fd fc02 	bl	8000a70 <Error_Handler>
 800326c:	e787      	b.n	800317e <HAL_UART_MspInit+0x52e>
      Error_Handler();
 800326e:	f7fd fbff 	bl	8000a70 <Error_Handler>
 8003272:	e7d5      	b.n	8003220 <HAL_UART_MspInit+0x5d0>
      Error_Handler();
 8003274:	f7fd fbfc 	bl	8000a70 <Error_Handler>
 8003278:	e7ea      	b.n	8003250 <HAL_UART_MspInit+0x600>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800327a:	2301      	movs	r3, #1
 800327c:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800327e:	a810      	add	r0, sp, #64	; 0x40
 8003280:	f004 fe48 	bl	8007f14 <HAL_RCCEx_PeriphCLKConfig>
 8003284:	2800      	cmp	r0, #0
 8003286:	d15c      	bne.n	8003342 <HAL_UART_MspInit+0x6f2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003288:	4b32      	ldr	r3, [pc, #200]	; (8003354 <HAL_UART_MspInit+0x704>)
 800328a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800328e:	f042 0220 	orr.w	r2, r2, #32
 8003292:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003296:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800329a:	f002 0220 	and.w	r2, r2, #32
 800329e:	920e      	str	r2, [sp, #56]	; 0x38
 80032a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80032a6:	f042 0204 	orr.w	r2, r2, #4
 80032aa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80032ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80032b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin = TX6_BACK_Pin|RX6_BACK_Pin;
 80032ba:	23c0      	movs	r3, #192	; 0xc0
 80032bc:	933f      	str	r3, [sp, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032be:	2302      	movs	r3, #2
 80032c0:	9340      	str	r3, [sp, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c2:	2500      	movs	r5, #0
 80032c4:	9541      	str	r5, [sp, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c6:	9542      	str	r5, [sp, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80032c8:	2307      	movs	r3, #7
 80032ca:	9343      	str	r3, [sp, #268]	; 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032cc:	a93f      	add	r1, sp, #252	; 0xfc
 80032ce:	4828      	ldr	r0, [pc, #160]	; (8003370 <HAL_UART_MspInit+0x720>)
 80032d0:	f003 fa14 	bl	80066fc <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA1_Stream6;
 80032d4:	4827      	ldr	r0, [pc, #156]	; (8003374 <HAL_UART_MspInit+0x724>)
 80032d6:	4b28      	ldr	r3, [pc, #160]	; (8003378 <HAL_UART_MspInit+0x728>)
 80032d8:	6003      	str	r3, [r0, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 80032da:	2348      	movs	r3, #72	; 0x48
 80032dc:	6043      	str	r3, [r0, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032de:	2340      	movs	r3, #64	; 0x40
 80032e0:	6083      	str	r3, [r0, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032e2:	60c5      	str	r5, [r0, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032e8:	6103      	str	r3, [r0, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032ea:	6145      	str	r5, [r0, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032ec:	6185      	str	r5, [r0, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80032ee:	61c5      	str	r5, [r0, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032f0:	6205      	str	r5, [r0, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032f2:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80032f4:	f001 fab2 	bl	800485c <HAL_DMA_Init>
 80032f8:	bb30      	cbnz	r0, 8003348 <HAL_UART_MspInit+0x6f8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80032fa:	4b1e      	ldr	r3, [pc, #120]	; (8003374 <HAL_UART_MspInit+0x724>)
 80032fc:	67a3      	str	r3, [r4, #120]	; 0x78
 80032fe:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart6_rx.Instance = DMA1_Stream7;
 8003300:	481e      	ldr	r0, [pc, #120]	; (800337c <HAL_UART_MspInit+0x72c>)
 8003302:	4b1f      	ldr	r3, [pc, #124]	; (8003380 <HAL_UART_MspInit+0x730>)
 8003304:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8003306:	2347      	movs	r3, #71	; 0x47
 8003308:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800330a:	2300      	movs	r3, #0
 800330c:	6083      	str	r3, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800330e:	60c3      	str	r3, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003310:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003314:	6102      	str	r2, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003316:	6143      	str	r3, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003318:	6183      	str	r3, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800331a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800331e:	61c2      	str	r2, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003320:	6203      	str	r3, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003322:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003324:	f001 fa9a 	bl	800485c <HAL_DMA_Init>
 8003328:	b988      	cbnz	r0, 800334e <HAL_UART_MspInit+0x6fe>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800332a:	4b14      	ldr	r3, [pc, #80]	; (800337c <HAL_UART_MspInit+0x72c>)
 800332c:	67e3      	str	r3, [r4, #124]	; 0x7c
 800332e:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003330:	2200      	movs	r2, #0
 8003332:	2105      	movs	r1, #5
 8003334:	2047      	movs	r0, #71	; 0x47
 8003336:	f001 f839 	bl	80043ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800333a:	2047      	movs	r0, #71	; 0x47
 800333c:	f001 f86c 	bl	8004418 <HAL_NVIC_EnableIRQ>
}
 8003340:	e4af      	b.n	8002ca2 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8003342:	f7fd fb95 	bl	8000a70 <Error_Handler>
 8003346:	e79f      	b.n	8003288 <HAL_UART_MspInit+0x638>
      Error_Handler();
 8003348:	f7fd fb92 	bl	8000a70 <Error_Handler>
 800334c:	e7d5      	b.n	80032fa <HAL_UART_MspInit+0x6aa>
      Error_Handler();
 800334e:	f7fd fb8f 	bl	8000a70 <Error_Handler>
 8003352:	e7ea      	b.n	800332a <HAL_UART_MspInit+0x6da>
 8003354:	58024400 	.word	0x58024400
 8003358:	58020400 	.word	0x58020400
 800335c:	58020c00 	.word	0x58020c00
 8003360:	240007fc 	.word	0x240007fc
 8003364:	40020070 	.word	0x40020070
 8003368:	24000784 	.word	0x24000784
 800336c:	40020088 	.word	0x40020088
 8003370:	58020800 	.word	0x58020800
 8003374:	240008ec 	.word	0x240008ec
 8003378:	400200a0 	.word	0x400200a0
 800337c:	24000874 	.word	0x24000874
 8003380:	400200b8 	.word	0x400200b8

08003384 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM5 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003384:	280f      	cmp	r0, #15
 8003386:	d901      	bls.n	800338c <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8003388:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim5);
  }

  /* Return function status */
  return HAL_ERROR;
}
 800338a:	4770      	bx	lr
{
 800338c:	b510      	push	{r4, lr}
 800338e:	b08a      	sub	sp, #40	; 0x28
 8003390:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0U);
 8003392:	2200      	movs	r2, #0
 8003394:	4601      	mov	r1, r0
 8003396:	2032      	movs	r0, #50	; 0x32
 8003398:	f001 f808 	bl	80043ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800339c:	2032      	movs	r0, #50	; 0x32
 800339e:	f001 f83b 	bl	8004418 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80033a2:	4b1a      	ldr	r3, [pc, #104]	; (800340c <HAL_InitTick+0x88>)
 80033a4:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM5_CLK_ENABLE();
 80033a6:	4b1a      	ldr	r3, [pc, #104]	; (8003410 <HAL_InitTick+0x8c>)
 80033a8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80033ac:	f042 0208 	orr.w	r2, r2, #8
 80033b0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80033b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80033c0:	a901      	add	r1, sp, #4
 80033c2:	a802      	add	r0, sp, #8
 80033c4:	f004 fc70 	bl	8007ca8 <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80033c8:	9b07      	ldr	r3, [sp, #28]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80033ca:	b9bb      	cbnz	r3, 80033fc <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80033cc:	f004 fc48 	bl	8007c60 <HAL_RCC_GetPCLK1Freq>
 80033d0:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80033d2:	4810      	ldr	r0, [pc, #64]	; (8003414 <HAL_InitTick+0x90>)
 80033d4:	fba0 2303 	umull	r2, r3, r0, r3
 80033d8:	0c9b      	lsrs	r3, r3, #18
 80033da:	3b01      	subs	r3, #1
  htim5.Instance = TIM5;
 80033dc:	480e      	ldr	r0, [pc, #56]	; (8003418 <HAL_InitTick+0x94>)
 80033de:	4a0f      	ldr	r2, [pc, #60]	; (800341c <HAL_InitTick+0x98>)
 80033e0:	6002      	str	r2, [r0, #0]
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80033e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80033e6:	60c2      	str	r2, [r0, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80033e8:	6043      	str	r3, [r0, #4]
  htim5.Init.ClockDivision = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	6103      	str	r3, [r0, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ee:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80033f0:	f007 fa22 	bl	800a838 <HAL_TIM_Base_Init>
 80033f4:	b130      	cbz	r0, 8003404 <HAL_InitTick+0x80>
  return HAL_ERROR;
 80033f6:	2001      	movs	r0, #1
}
 80033f8:	b00a      	add	sp, #40	; 0x28
 80033fa:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80033fc:	f004 fc30 	bl	8007c60 <HAL_RCC_GetPCLK1Freq>
 8003400:	0043      	lsls	r3, r0, #1
 8003402:	e7e6      	b.n	80033d2 <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim5);
 8003404:	4804      	ldr	r0, [pc, #16]	; (8003418 <HAL_InitTick+0x94>)
 8003406:	f007 f861 	bl	800a4cc <HAL_TIM_Base_Start_IT>
 800340a:	e7f5      	b.n	80033f8 <HAL_InitTick+0x74>
 800340c:	2400000c 	.word	0x2400000c
 8003410:	58024400 	.word	0x58024400
 8003414:	431bde83 	.word	0x431bde83
 8003418:	240025ac 	.word	0x240025ac
 800341c:	40000c00 	.word	0x40000c00

08003420 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003420:	e7fe      	b.n	8003420 <NMI_Handler>

08003422 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003422:	e7fe      	b.n	8003422 <HardFault_Handler>

08003424 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003424:	e7fe      	b.n	8003424 <MemManage_Handler>

08003426 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003426:	e7fe      	b.n	8003426 <BusFault_Handler>

08003428 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003428:	e7fe      	b.n	8003428 <UsageFault_Handler>

0800342a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800342a:	4770      	bx	lr

0800342c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800342c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800342e:	4802      	ldr	r0, [pc, #8]	; (8003438 <DMA1_Stream0_IRQHandler+0xc>)
 8003430:	f002 f80a 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003434:	bd08      	pop	{r3, pc}
 8003436:	bf00      	nop
 8003438:	2400061c 	.word	0x2400061c

0800343c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800343c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800343e:	4802      	ldr	r0, [pc, #8]	; (8003448 <DMA1_Stream1_IRQHandler+0xc>)
 8003440:	f002 f802 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003444:	bd08      	pop	{r3, pc}
 8003446:	bf00      	nop
 8003448:	240005a4 	.word	0x240005a4

0800344c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800344c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800344e:	4802      	ldr	r0, [pc, #8]	; (8003458 <DMA1_Stream2_IRQHandler+0xc>)
 8003450:	f001 fffa 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003454:	bd08      	pop	{r3, pc}
 8003456:	bf00      	nop
 8003458:	2400070c 	.word	0x2400070c

0800345c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800345c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800345e:	4802      	ldr	r0, [pc, #8]	; (8003468 <DMA1_Stream3_IRQHandler+0xc>)
 8003460:	f001 fff2 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003464:	bd08      	pop	{r3, pc}
 8003466:	bf00      	nop
 8003468:	24000694 	.word	0x24000694

0800346c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800346c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800346e:	4802      	ldr	r0, [pc, #8]	; (8003478 <DMA1_Stream4_IRQHandler+0xc>)
 8003470:	f001 ffea 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003474:	bd08      	pop	{r3, pc}
 8003476:	bf00      	nop
 8003478:	240007fc 	.word	0x240007fc

0800347c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800347c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800347e:	4802      	ldr	r0, [pc, #8]	; (8003488 <DMA1_Stream5_IRQHandler+0xc>)
 8003480:	f001 ffe2 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003484:	bd08      	pop	{r3, pc}
 8003486:	bf00      	nop
 8003488:	24000784 	.word	0x24000784

0800348c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800348c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800348e:	4802      	ldr	r0, [pc, #8]	; (8003498 <DMA1_Stream6_IRQHandler+0xc>)
 8003490:	f001 ffda 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003494:	bd08      	pop	{r3, pc}
 8003496:	bf00      	nop
 8003498:	240008ec 	.word	0x240008ec

0800349c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800349c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800349e:	4802      	ldr	r0, [pc, #8]	; (80034a8 <FDCAN1_IT0_IRQHandler+0xc>)
 80034a0:	f002 ff9e 	bl	80063e0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80034a4:	bd08      	pop	{r3, pc}
 80034a6:	bf00      	nop
 80034a8:	24000964 	.word	0x24000964

080034ac <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80034ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80034ae:	4802      	ldr	r0, [pc, #8]	; (80034b8 <FDCAN2_IT0_IRQHandler+0xc>)
 80034b0:	f002 ff96 	bl	80063e0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80034b4:	bd08      	pop	{r3, pc}
 80034b6:	bf00      	nop
 80034b8:	24000a04 	.word	0x24000a04

080034bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80034bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80034be:	4802      	ldr	r0, [pc, #8]	; (80034c8 <TIM4_IRQHandler+0xc>)
 80034c0:	f007 f86a 	bl	800a598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80034c4:	bd08      	pop	{r3, pc}
 80034c6:	bf00      	nop
 80034c8:	24000c04 	.word	0x24000c04

080034cc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80034cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80034ce:	4802      	ldr	r0, [pc, #8]	; (80034d8 <I2C1_EV_IRQHandler+0xc>)
 80034d0:	f003 fd9a 	bl	8007008 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80034d4:	bd08      	pop	{r3, pc}
 80034d6:	bf00      	nop
 80034d8:	24000aa4 	.word	0x24000aa4

080034dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80034dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034de:	4802      	ldr	r0, [pc, #8]	; (80034e8 <USART1_IRQHandler+0xc>)
 80034e0:	f007 fdc6 	bl	800b070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80034e4:	bd08      	pop	{r3, pc}
 80034e6:	bf00      	nop
 80034e8:	24000c50 	.word	0x24000c50

080034ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80034ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034ee:	4802      	ldr	r0, [pc, #8]	; (80034f8 <USART2_IRQHandler+0xc>)
 80034f0:	f007 fdbe 	bl	800b070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034f4:	bd08      	pop	{r3, pc}
 80034f6:	bf00      	nop
 80034f8:	24000ce0 	.word	0x24000ce0

080034fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80034fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80034fe:	4802      	ldr	r0, [pc, #8]	; (8003508 <USART3_IRQHandler+0xc>)
 8003500:	f007 fdb6 	bl	800b070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003504:	bd08      	pop	{r3, pc}
 8003506:	bf00      	nop
 8003508:	24000d70 	.word	0x24000d70

0800350c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800350c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800350e:	4802      	ldr	r0, [pc, #8]	; (8003518 <DMA1_Stream7_IRQHandler+0xc>)
 8003510:	f001 ff9a 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003514:	bd08      	pop	{r3, pc}
 8003516:	bf00      	nop
 8003518:	24000874 	.word	0x24000874

0800351c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800351c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800351e:	4802      	ldr	r0, [pc, #8]	; (8003528 <SDMMC1_IRQHandler+0xc>)
 8003520:	f006 fd40 	bl	8009fa4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003524:	bd08      	pop	{r3, pc}
 8003526:	bf00      	nop
 8003528:	24000b3c 	.word	0x24000b3c

0800352c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800352c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800352e:	4802      	ldr	r0, [pc, #8]	; (8003538 <TIM5_IRQHandler+0xc>)
 8003530:	f007 f832 	bl	800a598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003534:	bd08      	pop	{r3, pc}
 8003536:	bf00      	nop
 8003538:	240025ac 	.word	0x240025ac

0800353c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800353c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800353e:	4802      	ldr	r0, [pc, #8]	; (8003548 <UART4_IRQHandler+0xc>)
 8003540:	f007 fd96 	bl	800b070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003544:	bd08      	pop	{r3, pc}
 8003546:	bf00      	nop
 8003548:	24000e00 	.word	0x24000e00

0800354c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800354c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800354e:	4802      	ldr	r0, [pc, #8]	; (8003558 <DMA2_Stream0_IRQHandler+0xc>)
 8003550:	f001 ff7a 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003554:	bd08      	pop	{r3, pc}
 8003556:	bf00      	nop
 8003558:	2400025c 	.word	0x2400025c

0800355c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800355c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800355e:	4802      	ldr	r0, [pc, #8]	; (8003568 <DMA2_Stream1_IRQHandler+0xc>)
 8003560:	f001 ff72 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003564:	bd08      	pop	{r3, pc}
 8003566:	bf00      	nop
 8003568:	240001e4 	.word	0x240001e4

0800356c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800356c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800356e:	4802      	ldr	r0, [pc, #8]	; (8003578 <DMA2_Stream2_IRQHandler+0xc>)
 8003570:	f001 ff6a 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003574:	bd08      	pop	{r3, pc}
 8003576:	bf00      	nop
 8003578:	2400034c 	.word	0x2400034c

0800357c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800357c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800357e:	4802      	ldr	r0, [pc, #8]	; (8003588 <DMA2_Stream3_IRQHandler+0xc>)
 8003580:	f001 ff62 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003584:	bd08      	pop	{r3, pc}
 8003586:	bf00      	nop
 8003588:	240002d4 	.word	0x240002d4

0800358c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800358c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 800358e:	4802      	ldr	r0, [pc, #8]	; (8003598 <DMA2_Stream4_IRQHandler+0xc>)
 8003590:	f001 ff5a 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003594:	bd08      	pop	{r3, pc}
 8003596:	bf00      	nop
 8003598:	2400043c 	.word	0x2400043c

0800359c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800359c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800359e:	4802      	ldr	r0, [pc, #8]	; (80035a8 <DMA2_Stream5_IRQHandler+0xc>)
 80035a0:	f001 ff52 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80035a4:	bd08      	pop	{r3, pc}
 80035a6:	bf00      	nop
 80035a8:	240003c4 	.word	0x240003c4

080035ac <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80035ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 80035ae:	4802      	ldr	r0, [pc, #8]	; (80035b8 <DMA2_Stream6_IRQHandler+0xc>)
 80035b0:	f001 ff4a 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80035b4:	bd08      	pop	{r3, pc}
 80035b6:	bf00      	nop
 80035b8:	2400052c 	.word	0x2400052c

080035bc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80035bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80035be:	4802      	ldr	r0, [pc, #8]	; (80035c8 <DMA2_Stream7_IRQHandler+0xc>)
 80035c0:	f001 ff42 	bl	8005448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80035c4:	bd08      	pop	{r3, pc}
 80035c6:	bf00      	nop
 80035c8:	240004b4 	.word	0x240004b4

080035cc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80035cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80035ce:	4802      	ldr	r0, [pc, #8]	; (80035d8 <USART6_IRQHandler+0xc>)
 80035d0:	f007 fd4e 	bl	800b070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80035d4:	bd08      	pop	{r3, pc}
 80035d6:	bf00      	nop
 80035d8:	24000e90 	.word	0x24000e90

080035dc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80035dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80035de:	4802      	ldr	r0, [pc, #8]	; (80035e8 <UART7_IRQHandler+0xc>)
 80035e0:	f007 fd46 	bl	800b070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80035e4:	bd08      	pop	{r3, pc}
 80035e6:	bf00      	nop
 80035e8:	24000f20 	.word	0x24000f20

080035ec <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80035ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80035ee:	4802      	ldr	r0, [pc, #8]	; (80035f8 <UART8_IRQHandler+0xc>)
 80035f0:	f007 fd3e 	bl	800b070 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80035f4:	bd08      	pop	{r3, pc}
 80035f6:	bf00      	nop
 80035f8:	24000fb0 	.word	0x24000fb0

080035fc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80035fc:	2001      	movs	r0, #1
 80035fe:	4770      	bx	lr

08003600 <_kill>:

int _kill(int pid, int sig)
{
 8003600:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003602:	f018 f939 	bl	801b878 <__errno>
 8003606:	2316      	movs	r3, #22
 8003608:	6003      	str	r3, [r0, #0]
	return -1;
}
 800360a:	f04f 30ff 	mov.w	r0, #4294967295
 800360e:	bd08      	pop	{r3, pc}

08003610 <_exit>:

void _exit (int status)
{
 8003610:	b508      	push	{r3, lr}
	_kill(status, -1);
 8003612:	f04f 31ff 	mov.w	r1, #4294967295
 8003616:	f7ff fff3 	bl	8003600 <_kill>
	while (1) {}		/* Make sure we hang here */
 800361a:	e7fe      	b.n	800361a <_exit+0xa>

0800361c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800361c:	b510      	push	{r4, lr}
 800361e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003620:	4a0c      	ldr	r2, [pc, #48]	; (8003654 <_sbrk+0x38>)
 8003622:	490d      	ldr	r1, [pc, #52]	; (8003658 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003624:	480d      	ldr	r0, [pc, #52]	; (800365c <_sbrk+0x40>)
 8003626:	6800      	ldr	r0, [r0, #0]
 8003628:	b140      	cbz	r0, 800363c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800362a:	480c      	ldr	r0, [pc, #48]	; (800365c <_sbrk+0x40>)
 800362c:	6800      	ldr	r0, [r0, #0]
 800362e:	4403      	add	r3, r0
 8003630:	1a52      	subs	r2, r2, r1
 8003632:	4293      	cmp	r3, r2
 8003634:	d806      	bhi.n	8003644 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003636:	4a09      	ldr	r2, [pc, #36]	; (800365c <_sbrk+0x40>)
 8003638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800363a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800363c:	4807      	ldr	r0, [pc, #28]	; (800365c <_sbrk+0x40>)
 800363e:	4c08      	ldr	r4, [pc, #32]	; (8003660 <_sbrk+0x44>)
 8003640:	6004      	str	r4, [r0, #0]
 8003642:	e7f2      	b.n	800362a <_sbrk+0xe>
    errno = ENOMEM;
 8003644:	f018 f918 	bl	801b878 <__errno>
 8003648:	230c      	movs	r3, #12
 800364a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800364c:	f04f 30ff 	mov.w	r0, #4294967295
 8003650:	e7f3      	b.n	800363a <_sbrk+0x1e>
 8003652:	bf00      	nop
 8003654:	24080000 	.word	0x24080000
 8003658:	00000400 	.word	0x00000400
 800365c:	240025f8 	.word	0x240025f8
 8003660:	24007028 	.word	0x24007028

08003664 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003664:	4a27      	ldr	r2, [pc, #156]	; (8003704 <SystemInit+0xa0>)
 8003666:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800366a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800366e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003672:	4b25      	ldr	r3, [pc, #148]	; (8003708 <SystemInit+0xa4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	2b06      	cmp	r3, #6
 800367c:	d806      	bhi.n	800368c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800367e:	4a22      	ldr	r2, [pc, #136]	; (8003708 <SystemInit+0xa4>)
 8003680:	6813      	ldr	r3, [r2, #0]
 8003682:	f023 030f 	bic.w	r3, r3, #15
 8003686:	f043 0307 	orr.w	r3, r3, #7
 800368a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800368c:	4b1f      	ldr	r3, [pc, #124]	; (800370c <SystemInit+0xa8>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003696:	2200      	movs	r2, #0
 8003698:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800369a:	6819      	ldr	r1, [r3, #0]
 800369c:	4a1c      	ldr	r2, [pc, #112]	; (8003710 <SystemInit+0xac>)
 800369e:	400a      	ands	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80036a2:	4b19      	ldr	r3, [pc, #100]	; (8003708 <SystemInit+0xa4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f013 0f08 	tst.w	r3, #8
 80036aa:	d006      	beq.n	80036ba <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80036ac:	4a16      	ldr	r2, [pc, #88]	; (8003708 <SystemInit+0xa4>)
 80036ae:	6813      	ldr	r3, [r2, #0]
 80036b0:	f023 030f 	bic.w	r3, r3, #15
 80036b4:	f043 0307 	orr.w	r3, r3, #7
 80036b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80036ba:	4b14      	ldr	r3, [pc, #80]	; (800370c <SystemInit+0xa8>)
 80036bc:	2200      	movs	r2, #0
 80036be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80036c0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80036c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80036c4:	4913      	ldr	r1, [pc, #76]	; (8003714 <SystemInit+0xb0>)
 80036c6:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80036c8:	4913      	ldr	r1, [pc, #76]	; (8003718 <SystemInit+0xb4>)
 80036ca:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80036cc:	4913      	ldr	r1, [pc, #76]	; (800371c <SystemInit+0xb8>)
 80036ce:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80036d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80036d2:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80036d4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80036d6:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80036da:	6819      	ldr	r1, [r3, #0]
 80036dc:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80036e0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80036e2:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80036e4:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <SystemInit+0xbc>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4b0e      	ldr	r3, [pc, #56]	; (8003724 <SystemInit+0xc0>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036f0:	d203      	bcs.n	80036fa <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80036f2:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <SystemInit+0xc4>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80036fa:	4b0c      	ldr	r3, [pc, #48]	; (800372c <SystemInit+0xc8>)
 80036fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003700:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003702:	4770      	bx	lr
 8003704:	e000ed00 	.word	0xe000ed00
 8003708:	52002000 	.word	0x52002000
 800370c:	58024400 	.word	0x58024400
 8003710:	eaf6ed7f 	.word	0xeaf6ed7f
 8003714:	02020200 	.word	0x02020200
 8003718:	01ff0000 	.word	0x01ff0000
 800371c:	01010280 	.word	0x01010280
 8003720:	5c001000 	.word	0x5c001000
 8003724:	ffff0000 	.word	0xffff0000
 8003728:	51008000 	.word	0x51008000
 800372c:	52004000 	.word	0x52004000

08003730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003768 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003734:	f7ff ff96 	bl	8003664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003738:	480c      	ldr	r0, [pc, #48]	; (800376c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800373a:	490d      	ldr	r1, [pc, #52]	; (8003770 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800373c:	4a0d      	ldr	r2, [pc, #52]	; (8003774 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800373e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003740:	e002      	b.n	8003748 <LoopCopyDataInit>

08003742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003746:	3304      	adds	r3, #4

08003748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800374a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800374c:	d3f9      	bcc.n	8003742 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800374e:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003750:	4c0a      	ldr	r4, [pc, #40]	; (800377c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003754:	e001      	b.n	800375a <LoopFillZerobss>

08003756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003758:	3204      	adds	r2, #4

0800375a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800375a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800375c:	d3fb      	bcc.n	8003756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800375e:	f018 f891 	bl	801b884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003762:	f7fd feeb 	bl	800153c <main>
  bx  lr
 8003766:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003768:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800376c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003770:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8003774:	0801dc38 	.word	0x0801dc38
  ldr r2, =_sbss
 8003778:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 800377c:	24007024 	.word	0x24007024

08003780 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003780:	e7fe      	b.n	8003780 <ADC3_IRQHandler>
	...

08003784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003784:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003786:	2003      	movs	r0, #3
 8003788:	f000 fdfe 	bl	8004388 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800378c:	f004 f802 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 8003790:	490f      	ldr	r1, [pc, #60]	; (80037d0 <HAL_Init+0x4c>)
 8003792:	698b      	ldr	r3, [r1, #24]
 8003794:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003798:	4a0e      	ldr	r2, [pc, #56]	; (80037d4 <HAL_Init+0x50>)
 800379a:	5cd3      	ldrb	r3, [r2, r3]
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037a2:	698b      	ldr	r3, [r1, #24]
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	5cd3      	ldrb	r3, [r2, r3]
 80037aa:	f003 031f 	and.w	r3, r3, #31
 80037ae:	fa20 f303 	lsr.w	r3, r0, r3
 80037b2:	4a09      	ldr	r2, [pc, #36]	; (80037d8 <HAL_Init+0x54>)
 80037b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037b6:	4b09      	ldr	r3, [pc, #36]	; (80037dc <HAL_Init+0x58>)
 80037b8:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037ba:	2000      	movs	r0, #0
 80037bc:	f7ff fde2 	bl	8003384 <HAL_InitTick>
 80037c0:	b110      	cbz	r0, 80037c8 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 80037c2:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 80037c4:	4620      	mov	r0, r4
 80037c6:	bd10      	pop	{r4, pc}
 80037c8:	4604      	mov	r4, r0
  HAL_MspInit();
 80037ca:	f7fe ff93 	bl	80026f4 <HAL_MspInit>
  return HAL_OK;
 80037ce:	e7f9      	b.n	80037c4 <HAL_Init+0x40>
 80037d0:	58024400 	.word	0x58024400
 80037d4:	0801bf94 	.word	0x0801bf94
 80037d8:	24000004 	.word	0x24000004
 80037dc:	24000000 	.word	0x24000000

080037e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80037e0:	4b03      	ldr	r3, [pc, #12]	; (80037f0 <HAL_IncTick+0x10>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	4a03      	ldr	r2, [pc, #12]	; (80037f4 <HAL_IncTick+0x14>)
 80037e6:	6811      	ldr	r1, [r2, #0]
 80037e8:	440b      	add	r3, r1
 80037ea:	6013      	str	r3, [r2, #0]
}
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	24000008 	.word	0x24000008
 80037f4:	240025fc 	.word	0x240025fc

080037f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80037f8:	4b01      	ldr	r3, [pc, #4]	; (8003800 <HAL_GetTick+0x8>)
 80037fa:	6818      	ldr	r0, [r3, #0]
}
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	240025fc 	.word	0x240025fc

08003804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003804:	b538      	push	{r3, r4, r5, lr}
 8003806:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003808:	f7ff fff6 	bl	80037f8 <HAL_GetTick>
 800380c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800380e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003812:	d002      	beq.n	800381a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <HAL_Delay+0x24>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800381a:	f7ff ffed 	bl	80037f8 <HAL_GetTick>
 800381e:	1b40      	subs	r0, r0, r5
 8003820:	42a0      	cmp	r0, r4
 8003822:	d3fa      	bcc.n	800381a <HAL_Delay+0x16>
  {
  }
}
 8003824:	bd38      	pop	{r3, r4, r5, pc}
 8003826:	bf00      	nop
 8003828:	24000008 	.word	0x24000008

0800382c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800382c:	4b01      	ldr	r3, [pc, #4]	; (8003834 <HAL_GetREVID+0x8>)
 800382e:	6818      	ldr	r0, [r3, #0]
}
 8003830:	0c00      	lsrs	r0, r0, #16
 8003832:	4770      	bx	lr
 8003834:	5c001000 	.word	0x5c001000

08003838 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800383a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800383c:	2200      	movs	r2, #0
 800383e:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003840:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8003844:	2a01      	cmp	r2, #1
 8003846:	f000 8255 	beq.w	8003cf4 <HAL_ADC_ConfigChannel+0x4bc>
 800384a:	4603      	mov	r3, r0
 800384c:	2201      	movs	r2, #1
 800384e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003852:	6800      	ldr	r0, [r0, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003854:	6882      	ldr	r2, [r0, #8]
 8003856:	f012 0f04 	tst.w	r2, #4
 800385a:	d009      	beq.n	8003870 <HAL_ADC_ConfigChannel+0x38>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800385c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800385e:	f042 0220 	orr.w	r2, r2, #32
 8003862:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003864:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800386c:	b003      	add	sp, #12
 800386e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003870:	680a      	ldr	r2, [r1, #0]
 8003872:	f3c2 0413 	ubfx	r4, r2, #0, #20
 8003876:	2c00      	cmp	r4, #0
 8003878:	d14e      	bne.n	8003918 <HAL_ADC_ConfigChannel+0xe0>
 800387a:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800387e:	2401      	movs	r4, #1
 8003880:	4094      	lsls	r4, r2
 8003882:	69c2      	ldr	r2, [r0, #28]
 8003884:	4322      	orrs	r2, r4
 8003886:	61c2      	str	r2, [r0, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003888:	681d      	ldr	r5, [r3, #0]
 800388a:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800388c:	3530      	adds	r5, #48	; 0x30
 800388e:	0a22      	lsrs	r2, r4, #8
 8003890:	0092      	lsls	r2, r2, #2
 8003892:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8003896:	58a8      	ldr	r0, [r5, r2]
 8003898:	f004 0e1f 	and.w	lr, r4, #31
 800389c:	241f      	movs	r4, #31
 800389e:	fa04 f40e 	lsl.w	r4, r4, lr
 80038a2:	ea20 0004 	bic.w	r0, r0, r4
 80038a6:	680c      	ldr	r4, [r1, #0]
 80038a8:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 80038ac:	fa0c fc0e 	lsl.w	ip, ip, lr
 80038b0:	ea40 000c 	orr.w	r0, r0, ip
 80038b4:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038b6:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038b8:	68a2      	ldr	r2, [r4, #8]
 80038ba:	f012 0204 	ands.w	r2, r2, #4
 80038be:	d000      	beq.n	80038c2 <HAL_ADC_ConfigChannel+0x8a>
 80038c0:	2201      	movs	r2, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038c2:	68a0      	ldr	r0, [r4, #8]
 80038c4:	f010 0008 	ands.w	r0, r0, #8
 80038c8:	d000      	beq.n	80038cc <HAL_ADC_ConfigChannel+0x94>
 80038ca:	2001      	movs	r0, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038cc:	4302      	orrs	r2, r0
 80038ce:	d02f      	beq.n	8003930 <HAL_ADC_ConfigChannel+0xf8>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038d0:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038d2:	6882      	ldr	r2, [r0, #8]
 80038d4:	f012 0f01 	tst.w	r2, #1
 80038d8:	f040 8208 	bne.w	8003cec <HAL_ADC_ConfigChannel+0x4b4>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80038dc:	680a      	ldr	r2, [r1, #0]
 80038de:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80038e0:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 80038e4:	f3c2 0613 	ubfx	r6, r2, #0, #20
 80038e8:	ea24 0406 	bic.w	r4, r4, r6
 80038ec:	f005 0c18 	and.w	ip, r5, #24
 80038f0:	4db2      	ldr	r5, [pc, #712]	; (8003bbc <HAL_ADC_ConfigChannel+0x384>)
 80038f2:	fa25 f50c 	lsr.w	r5, r5, ip
 80038f6:	402a      	ands	r2, r5
 80038f8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80038fc:	4322      	orrs	r2, r4
 80038fe:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003902:	68c8      	ldr	r0, [r1, #12]
 8003904:	4aae      	ldr	r2, [pc, #696]	; (8003bc0 <HAL_ADC_ConfigChannel+0x388>)
 8003906:	4290      	cmp	r0, r2
 8003908:	f000 80b0 	beq.w	8003a6c <HAL_ADC_ConfigChannel+0x234>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800390c:	680a      	ldr	r2, [r1, #0]
 800390e:	2a00      	cmp	r2, #0
 8003910:	f2c0 816b 	blt.w	8003bea <HAL_ADC_ConfigChannel+0x3b2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003914:	2000      	movs	r0, #0
 8003916:	e7a6      	b.n	8003866 <HAL_ADC_ConfigChannel+0x2e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800391c:	b132      	cbz	r2, 800392c <HAL_ADC_ConfigChannel+0xf4>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800391e:	fab2 f282 	clz	r2, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003922:	f002 021f 	and.w	r2, r2, #31
 8003926:	2401      	movs	r4, #1
 8003928:	4094      	lsls	r4, r2
 800392a:	e7aa      	b.n	8003882 <HAL_ADC_ConfigChannel+0x4a>
    return 32U;
 800392c:	2220      	movs	r2, #32
 800392e:	e7f8      	b.n	8003922 <HAL_ADC_ConfigChannel+0xea>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003930:	680f      	ldr	r7, [r1, #0]
 8003932:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003934:	3414      	adds	r4, #20
 8003936:	0e78      	lsrs	r0, r7, #25
 8003938:	0080      	lsls	r0, r0, #2
 800393a:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 800393e:	5826      	ldr	r6, [r4, r0]
 8003940:	f3c7 5e04 	ubfx	lr, r7, #20, #5
 8003944:	f04f 0c07 	mov.w	ip, #7
 8003948:	fa0c fc0e 	lsl.w	ip, ip, lr
 800394c:	ea26 0c0c 	bic.w	ip, r6, ip
 8003950:	fa05 f50e 	lsl.w	r5, r5, lr
 8003954:	ea4c 0505 	orr.w	r5, ip, r5
 8003958:	5025      	str	r5, [r4, r0]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800395a:	489a      	ldr	r0, [pc, #616]	; (8003bc4 <HAL_ADC_ConfigChannel+0x38c>)
 800395c:	6800      	ldr	r0, [r0, #0]
 800395e:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8003962:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8003966:	d00b      	beq.n	8003980 <HAL_ADC_ConfigChannel+0x148>
 8003968:	681c      	ldr	r4, [r3, #0]
 800396a:	68e0      	ldr	r0, [r4, #12]
 800396c:	f010 0f10 	tst.w	r0, #16
 8003970:	d139      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x1ae>
 8003972:	6948      	ldr	r0, [r1, #20]
 8003974:	68e4      	ldr	r4, [r4, #12]
 8003976:	f3c4 0482 	ubfx	r4, r4, #2, #3
 800397a:	0064      	lsls	r4, r4, #1
 800397c:	40a0      	lsls	r0, r4
 800397e:	e006      	b.n	800398e <HAL_ADC_ConfigChannel+0x156>
 8003980:	6948      	ldr	r0, [r1, #20]
 8003982:	681c      	ldr	r4, [r3, #0]
 8003984:	68e4      	ldr	r4, [r4, #12]
 8003986:	f3c4 0482 	ubfx	r4, r4, #2, #3
 800398a:	0064      	lsls	r4, r4, #1
 800398c:	40a0      	lsls	r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800398e:	690d      	ldr	r5, [r1, #16]
 8003990:	2d04      	cmp	r5, #4
 8003992:	d036      	beq.n	8003a02 <HAL_ADC_ConfigChannel+0x1ca>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003994:	681f      	ldr	r7, [r3, #0]
 8003996:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003998:	3760      	adds	r7, #96	; 0x60
    MODIFY_REG(*preg,
 800399a:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
 800399e:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 80039a2:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80039a6:	4330      	orrs	r0, r6
 80039a8:	4320      	orrs	r0, r4
 80039aa:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	690e      	ldr	r6, [r1, #16]
 80039b2:	7e4c      	ldrb	r4, [r1, #25]
 80039b4:	2c01      	cmp	r4, #1
 80039b6:	d01e      	beq.n	80039f6 <HAL_ADC_ConfigChannel+0x1be>
 80039b8:	4615      	mov	r5, r2
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039ba:	3060      	adds	r0, #96	; 0x60
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80039bc:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 80039c0:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80039c4:	432c      	orrs	r4, r5
 80039c6:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80039ca:	681d      	ldr	r5, [r3, #0]
 80039cc:	690c      	ldr	r4, [r1, #16]
 80039ce:	7e08      	ldrb	r0, [r1, #24]
 80039d0:	2801      	cmp	r0, #1
 80039d2:	d013      	beq.n	80039fc <HAL_ADC_ConfigChannel+0x1c4>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80039d4:	6928      	ldr	r0, [r5, #16]
 80039d6:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 80039da:	f004 041f 	and.w	r4, r4, #31
 80039de:	40a2      	lsls	r2, r4
 80039e0:	4302      	orrs	r2, r0
 80039e2:	612a      	str	r2, [r5, #16]
}
 80039e4:	e774      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x98>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039e6:	6948      	ldr	r0, [r1, #20]
 80039e8:	68e4      	ldr	r4, [r4, #12]
 80039ea:	08a4      	lsrs	r4, r4, #2
 80039ec:	f004 0404 	and.w	r4, r4, #4
 80039f0:	0064      	lsls	r4, r4, #1
 80039f2:	40a0      	lsls	r0, r4
 80039f4:	e7cb      	b.n	800398e <HAL_ADC_ConfigChannel+0x156>
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80039f6:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80039fa:	e7de      	b.n	80039ba <HAL_ADC_ConfigChannel+0x182>
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80039fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a00:	e7e8      	b.n	80039d4 <HAL_ADC_ConfigChannel+0x19c>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8003a06:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003a0a:	680c      	ldr	r4, [r1, #0]
 8003a0c:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8003a10:	d01d      	beq.n	8003a4e <HAL_ADC_ConfigChannel+0x216>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8003a16:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003a1a:	680c      	ldr	r4, [r1, #0]
 8003a1c:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8003a20:	d01a      	beq.n	8003a58 <HAL_ADC_ConfigChannel+0x220>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8003a26:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003a2a:	680c      	ldr	r4, [r1, #0]
 8003a2c:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8003a30:	d017      	beq.n	8003a62 <HAL_ADC_ConfigChannel+0x22a>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8003a36:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003a3a:	680c      	ldr	r4, [r1, #0]
 8003a3c:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8003a40:	f47f af46 	bne.w	80038d0 <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003a44:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8003a46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a4a:	66c2      	str	r2, [r0, #108]	; 0x6c
 8003a4c:	e740      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003a4e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8003a50:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a54:	6602      	str	r2, [r0, #96]	; 0x60
 8003a56:	e7dc      	b.n	8003a12 <HAL_ADC_ConfigChannel+0x1da>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003a58:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8003a5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a5e:	6642      	str	r2, [r0, #100]	; 0x64
 8003a60:	e7df      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x1ea>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003a62:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8003a64:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a68:	6682      	str	r2, [r0, #104]	; 0x68
 8003a6a:	e7e2      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x1fa>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a6c:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a6e:	680a      	ldr	r2, [r1, #0]
 8003a70:	f3c2 0513 	ubfx	r5, r2, #0, #20
 8003a74:	2d00      	cmp	r5, #0
 8003a76:	d134      	bne.n	8003ae2 <HAL_ADC_ConfigChannel+0x2aa>
 8003a78:	0e90      	lsrs	r0, r2, #26
 8003a7a:	3001      	adds	r0, #1
 8003a7c:	f000 001f 	and.w	r0, r0, #31
 8003a80:	2809      	cmp	r0, #9
 8003a82:	bf8c      	ite	hi
 8003a84:	2000      	movhi	r0, #0
 8003a86:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	d061      	beq.n	8003b50 <HAL_ADC_ConfigChannel+0x318>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a8c:	2d00      	cmp	r5, #0
 8003a8e:	d137      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x2c8>
 8003a90:	0e90      	lsrs	r0, r2, #26
 8003a92:	3001      	adds	r0, #1
 8003a94:	0680      	lsls	r0, r0, #26
 8003a96:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003a9a:	2d00      	cmp	r5, #0
 8003a9c:	d13c      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x2e0>
 8003a9e:	0e96      	lsrs	r6, r2, #26
 8003aa0:	3601      	adds	r6, #1
 8003aa2:	f006 071f 	and.w	r7, r6, #31
 8003aa6:	2601      	movs	r6, #1
 8003aa8:	40be      	lsls	r6, r7
 8003aaa:	4330      	orrs	r0, r6
 8003aac:	2d00      	cmp	r5, #0
 8003aae:	d141      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x2fc>
 8003ab0:	0e92      	lsrs	r2, r2, #26
 8003ab2:	3201      	adds	r2, #1
 8003ab4:	f002 021f 	and.w	r2, r2, #31
 8003ab8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003abc:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003abe:	4302      	orrs	r2, r0
 8003ac0:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003ac2:	3414      	adds	r4, #20
 8003ac4:	0e55      	lsrs	r5, r2, #25
 8003ac6:	00ad      	lsls	r5, r5, #2
 8003ac8:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8003acc:	5966      	ldr	r6, [r4, r5]
 8003ace:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003ad2:	2707      	movs	r7, #7
 8003ad4:	4097      	lsls	r7, r2
 8003ad6:	ea26 0607 	bic.w	r6, r6, r7
 8003ada:	4090      	lsls	r0, r2
 8003adc:	4330      	orrs	r0, r6
 8003ade:	5160      	str	r0, [r4, r5]
}
 8003ae0:	e714      	b.n	800390c <HAL_ADC_ConfigChannel+0xd4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae2:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003ae6:	b148      	cbz	r0, 8003afc <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003ae8:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003aec:	3001      	adds	r0, #1
 8003aee:	f000 001f 	and.w	r0, r0, #31
 8003af2:	2809      	cmp	r0, #9
 8003af4:	bf8c      	ite	hi
 8003af6:	2000      	movhi	r0, #0
 8003af8:	2001      	movls	r0, #1
 8003afa:	e7c5      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x250>
    return 32U;
 8003afc:	2020      	movs	r0, #32
 8003afe:	e7f5      	b.n	8003aec <HAL_ADC_ConfigChannel+0x2b4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003b04:	b130      	cbz	r0, 8003b14 <HAL_ADC_ConfigChannel+0x2dc>
  return __builtin_clz(value);
 8003b06:	fab0 f080 	clz	r0, r0
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	0680      	lsls	r0, r0, #26
 8003b0e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003b12:	e7c2      	b.n	8003a9a <HAL_ADC_ConfigChannel+0x262>
    return 32U;
 8003b14:	2020      	movs	r0, #32
 8003b16:	e7f8      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x2d2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b18:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8003b1c:	b146      	cbz	r6, 8003b30 <HAL_ADC_ConfigChannel+0x2f8>
  return __builtin_clz(value);
 8003b1e:	fab6 f686 	clz	r6, r6
 8003b22:	3601      	adds	r6, #1
 8003b24:	f006 061f 	and.w	r6, r6, #31
 8003b28:	2701      	movs	r7, #1
 8003b2a:	fa07 f606 	lsl.w	r6, r7, r6
 8003b2e:	e7bc      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8003b30:	2620      	movs	r6, #32
 8003b32:	e7f6      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x2ea>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003b38:	b142      	cbz	r2, 8003b4c <HAL_ADC_ConfigChannel+0x314>
  return __builtin_clz(value);
 8003b3a:	fab2 f282 	clz	r2, r2
 8003b3e:	3201      	adds	r2, #1
 8003b40:	f002 021f 	and.w	r2, r2, #31
 8003b44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003b48:	0512      	lsls	r2, r2, #20
 8003b4a:	e7b8      	b.n	8003abe <HAL_ADC_ConfigChannel+0x286>
    return 32U;
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	e7f6      	b.n	8003b3e <HAL_ADC_ConfigChannel+0x306>
 8003b50:	b9cd      	cbnz	r5, 8003b86 <HAL_ADC_ConfigChannel+0x34e>
 8003b52:	0e90      	lsrs	r0, r2, #26
 8003b54:	3001      	adds	r0, #1
 8003b56:	0680      	lsls	r0, r0, #26
 8003b58:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003b5c:	b9fd      	cbnz	r5, 8003b9e <HAL_ADC_ConfigChannel+0x366>
 8003b5e:	0e96      	lsrs	r6, r2, #26
 8003b60:	3601      	adds	r6, #1
 8003b62:	f006 071f 	and.w	r7, r6, #31
 8003b66:	2601      	movs	r6, #1
 8003b68:	40be      	lsls	r6, r7
 8003b6a:	4330      	orrs	r0, r6
 8003b6c:	bb65      	cbnz	r5, 8003bc8 <HAL_ADC_ConfigChannel+0x390>
 8003b6e:	0e92      	lsrs	r2, r2, #26
 8003b70:	3201      	adds	r2, #1
 8003b72:	f002 021f 	and.w	r2, r2, #31
 8003b76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003b7a:	3a1e      	subs	r2, #30
 8003b7c:	0512      	lsls	r2, r2, #20
 8003b7e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b82:	4302      	orrs	r2, r0
 8003b84:	e79c      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x288>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b86:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003b8a:	b130      	cbz	r0, 8003b9a <HAL_ADC_ConfigChannel+0x362>
  return __builtin_clz(value);
 8003b8c:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b90:	3001      	adds	r0, #1
 8003b92:	0680      	lsls	r0, r0, #26
 8003b94:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003b98:	e7e0      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x324>
    return 32U;
 8003b9a:	2020      	movs	r0, #32
 8003b9c:	e7f8      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x358>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8003ba2:	b146      	cbz	r6, 8003bb6 <HAL_ADC_ConfigChannel+0x37e>
  return __builtin_clz(value);
 8003ba4:	fab6 f686 	clz	r6, r6
 8003ba8:	3601      	adds	r6, #1
 8003baa:	f006 061f 	and.w	r6, r6, #31
 8003bae:	2701      	movs	r7, #1
 8003bb0:	fa07 f606 	lsl.w	r6, r7, r6
 8003bb4:	e7d9      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x332>
    return 32U;
 8003bb6:	2620      	movs	r6, #32
 8003bb8:	e7f6      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x370>
 8003bba:	bf00      	nop
 8003bbc:	000fffff 	.word	0x000fffff
 8003bc0:	47ff0000 	.word	0x47ff0000
 8003bc4:	5c001000 	.word	0x5c001000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc8:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003bcc:	b15a      	cbz	r2, 8003be6 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8003bce:	fab2 f282 	clz	r2, r2
 8003bd2:	3201      	adds	r2, #1
 8003bd4:	f002 021f 	and.w	r2, r2, #31
 8003bd8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003bdc:	3a1e      	subs	r2, #30
 8003bde:	0512      	lsls	r2, r2, #20
 8003be0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003be4:	e7cd      	b.n	8003b82 <HAL_ADC_ConfigChannel+0x34a>
    return 32U;
 8003be6:	2220      	movs	r2, #32
 8003be8:	e7f3      	b.n	8003bd2 <HAL_ADC_ConfigChannel+0x39a>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bea:	6819      	ldr	r1, [r3, #0]
 8003bec:	4842      	ldr	r0, [pc, #264]	; (8003cf8 <HAL_ADC_ConfigChannel+0x4c0>)
 8003bee:	4c43      	ldr	r4, [pc, #268]	; (8003cfc <HAL_ADC_ConfigChannel+0x4c4>)
 8003bf0:	42a1      	cmp	r1, r4
 8003bf2:	bf18      	it	ne
 8003bf4:	4281      	cmpne	r1, r0
 8003bf6:	bf0c      	ite	eq
 8003bf8:	2001      	moveq	r0, #1
 8003bfa:	2000      	movne	r0, #0
 8003bfc:	d121      	bne.n	8003c42 <HAL_ADC_ConfigChannel+0x40a>
 8003bfe:	4e40      	ldr	r6, [pc, #256]	; (8003d00 <HAL_ADC_ConfigChannel+0x4c8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c00:	68b5      	ldr	r5, [r6, #8]
 8003c02:	f005 77e0 	and.w	r7, r5, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c06:	b1f0      	cbz	r0, 8003c46 <HAL_ADC_ConfigChannel+0x40e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c08:	483b      	ldr	r0, [pc, #236]	; (8003cf8 <HAL_ADC_ConfigChannel+0x4c0>)
 8003c0a:	6880      	ldr	r0, [r0, #8]
 8003c0c:	f010 0001 	ands.w	r0, r0, #1
 8003c10:	d000      	beq.n	8003c14 <HAL_ADC_ConfigChannel+0x3dc>
 8003c12:	2001      	movs	r0, #1
 8003c14:	4c39      	ldr	r4, [pc, #228]	; (8003cfc <HAL_ADC_ConfigChannel+0x4c4>)
 8003c16:	68a4      	ldr	r4, [r4, #8]
 8003c18:	f014 0401 	ands.w	r4, r4, #1
 8003c1c:	d000      	beq.n	8003c20 <HAL_ADC_ConfigChannel+0x3e8>
 8003c1e:	2401      	movs	r4, #1
 8003c20:	4320      	orrs	r0, r4
 8003c22:	bf0c      	ite	eq
 8003c24:	2001      	moveq	r0, #1
 8003c26:	2000      	movne	r0, #0
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	d059      	beq.n	8003ce0 <HAL_ADC_ConfigChannel+0x4a8>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c2c:	4835      	ldr	r0, [pc, #212]	; (8003d04 <HAL_ADC_ConfigChannel+0x4cc>)
 8003c2e:	4282      	cmp	r2, r0
 8003c30:	d012      	beq.n	8003c58 <HAL_ADC_ConfigChannel+0x420>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c32:	4835      	ldr	r0, [pc, #212]	; (8003d08 <HAL_ADC_ConfigChannel+0x4d0>)
 8003c34:	4282      	cmp	r2, r0
 8003c36:	d031      	beq.n	8003c9c <HAL_ADC_ConfigChannel+0x464>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c38:	4834      	ldr	r0, [pc, #208]	; (8003d0c <HAL_ADC_ConfigChannel+0x4d4>)
 8003c3a:	4282      	cmp	r2, r0
 8003c3c:	d03f      	beq.n	8003cbe <HAL_ADC_ConfigChannel+0x486>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c3e:	2000      	movs	r0, #0
 8003c40:	e611      	b.n	8003866 <HAL_ADC_ConfigChannel+0x2e>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c42:	4e33      	ldr	r6, [pc, #204]	; (8003d10 <HAL_ADC_ConfigChannel+0x4d8>)
 8003c44:	e7dc      	b.n	8003c00 <HAL_ADC_ConfigChannel+0x3c8>
 8003c46:	4833      	ldr	r0, [pc, #204]	; (8003d14 <HAL_ADC_ConfigChannel+0x4dc>)
 8003c48:	6880      	ldr	r0, [r0, #8]
 8003c4a:	f010 0001 	ands.w	r0, r0, #1
 8003c4e:	d000      	beq.n	8003c52 <HAL_ADC_ConfigChannel+0x41a>
 8003c50:	2001      	movs	r0, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c52:	f080 0001 	eor.w	r0, r0, #1
 8003c56:	e7e7      	b.n	8003c28 <HAL_ADC_ConfigChannel+0x3f0>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c58:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8003c5c:	d1e9      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x3fa>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c5e:	4a2d      	ldr	r2, [pc, #180]	; (8003d14 <HAL_ADC_ConfigChannel+0x4dc>)
 8003c60:	4291      	cmp	r1, r2
 8003c62:	d001      	beq.n	8003c68 <HAL_ADC_ConfigChannel+0x430>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c64:	2000      	movs	r0, #0
 8003c66:	e5fe      	b.n	8003866 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003c68:	f447 0200 	orr.w	r2, r7, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c6c:	68b1      	ldr	r1, [r6, #8]
 8003c6e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003c72:	430a      	orrs	r2, r1
 8003c74:	60b2      	str	r2, [r6, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c76:	4a28      	ldr	r2, [pc, #160]	; (8003d18 <HAL_ADC_ConfigChannel+0x4e0>)
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	0992      	lsrs	r2, r2, #6
 8003c7c:	4927      	ldr	r1, [pc, #156]	; (8003d1c <HAL_ADC_ConfigChannel+0x4e4>)
 8003c7e:	fba1 1202 	umull	r1, r2, r1, r2
 8003c82:	0992      	lsrs	r2, r2, #6
 8003c84:	3201      	adds	r2, #1
 8003c86:	0052      	lsls	r2, r2, #1
 8003c88:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8003c8a:	e002      	b.n	8003c92 <HAL_ADC_ConfigChannel+0x45a>
                wait_loop_index--;
 8003c8c:	9a01      	ldr	r2, [sp, #4]
 8003c8e:	3a01      	subs	r2, #1
 8003c90:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8003c92:	9a01      	ldr	r2, [sp, #4]
 8003c94:	2a00      	cmp	r2, #0
 8003c96:	d1f9      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x454>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c98:	2000      	movs	r0, #0
 8003c9a:	e5e4      	b.n	8003866 <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c9c:	f015 7f80 	tst.w	r5, #16777216	; 0x1000000
 8003ca0:	d1ca      	bne.n	8003c38 <HAL_ADC_ConfigChannel+0x400>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ca2:	4a1c      	ldr	r2, [pc, #112]	; (8003d14 <HAL_ADC_ConfigChannel+0x4dc>)
 8003ca4:	4291      	cmp	r1, r2
 8003ca6:	d001      	beq.n	8003cac <HAL_ADC_ConfigChannel+0x474>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ca8:	2000      	movs	r0, #0
 8003caa:	e5dc      	b.n	8003866 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003cac:	f047 7280 	orr.w	r2, r7, #16777216	; 0x1000000
 8003cb0:	68b1      	ldr	r1, [r6, #8]
 8003cb2:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	60b2      	str	r2, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cba:	2000      	movs	r0, #0
}
 8003cbc:	e5d3      	b.n	8003866 <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cbe:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8003cc2:	d115      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x4b8>
            if (ADC_VREFINT_INSTANCE(hadc))
 8003cc4:	4a13      	ldr	r2, [pc, #76]	; (8003d14 <HAL_ADC_ConfigChannel+0x4dc>)
 8003cc6:	4291      	cmp	r1, r2
 8003cc8:	d001      	beq.n	8003cce <HAL_ADC_ConfigChannel+0x496>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cca:	2000      	movs	r0, #0
 8003ccc:	e5cb      	b.n	8003866 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003cce:	f447 0280 	orr.w	r2, r7, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003cd2:	68b1      	ldr	r1, [r6, #8]
 8003cd4:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	60b2      	str	r2, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cdc:	2000      	movs	r0, #0
}
 8003cde:	e5c2      	b.n	8003866 <HAL_ADC_ConfigChannel+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ce0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ce2:	f042 0220 	orr.w	r2, r2, #32
 8003ce6:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8003ce8:	2001      	movs	r0, #1
 8003cea:	e5bc      	b.n	8003866 <HAL_ADC_ConfigChannel+0x2e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cec:	2000      	movs	r0, #0
 8003cee:	e5ba      	b.n	8003866 <HAL_ADC_ConfigChannel+0x2e>
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	e5b8      	b.n	8003866 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8003cf4:	2002      	movs	r0, #2
 8003cf6:	e5b9      	b.n	800386c <HAL_ADC_ConfigChannel+0x34>
 8003cf8:	40022000 	.word	0x40022000
 8003cfc:	40022100 	.word	0x40022100
 8003d00:	40022300 	.word	0x40022300
 8003d04:	cb840000 	.word	0xcb840000
 8003d08:	c7520000 	.word	0xc7520000
 8003d0c:	cfb80000 	.word	0xcfb80000
 8003d10:	58026300 	.word	0x58026300
 8003d14:	58026000 	.word	0x58026000
 8003d18:	24000000 	.word	0x24000000
 8003d1c:	053e2d63 	.word	0x053e2d63

08003d20 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d24:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003d26:	6893      	ldr	r3, [r2, #8]
 8003d28:	f013 0302 	ands.w	r3, r3, #2
 8003d2c:	d000      	beq.n	8003d30 <ADC_Disable+0x10>
 8003d2e:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d30:	6891      	ldr	r1, [r2, #8]
 8003d32:	f011 0f01 	tst.w	r1, #1
 8003d36:	d037      	beq.n	8003da8 <ADC_Disable+0x88>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d137      	bne.n	8003dac <ADC_Disable+0x8c>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d3c:	6893      	ldr	r3, [r2, #8]
 8003d3e:	f003 030d 	and.w	r3, r3, #13
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d009      	beq.n	8003d5a <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d46:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d48:	f043 0310 	orr.w	r3, r3, #16
 8003d4c:	6563      	str	r3, [r4, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	65a3      	str	r3, [r4, #88]	; 0x58

      return HAL_ERROR;
 8003d56:	2001      	movs	r0, #1
 8003d58:	e027      	b.n	8003daa <ADC_Disable+0x8a>
  MODIFY_REG(ADCx->CR,
 8003d5a:	6891      	ldr	r1, [r2, #8]
 8003d5c:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <ADC_Disable+0x90>)
 8003d5e:	400b      	ands	r3, r1
 8003d60:	f043 0302 	orr.w	r3, r3, #2
 8003d64:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	2203      	movs	r2, #3
 8003d6a:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d6c:	f7ff fd44 	bl	80037f8 <HAL_GetTick>
 8003d70:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f013 0f01 	tst.w	r3, #1
 8003d7a:	d013      	beq.n	8003da4 <ADC_Disable+0x84>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d7c:	f7ff fd3c 	bl	80037f8 <HAL_GetTick>
 8003d80:	1b40      	subs	r0, r0, r5
 8003d82:	2802      	cmp	r0, #2
 8003d84:	d9f5      	bls.n	8003d72 <ADC_Disable+0x52>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f013 0f01 	tst.w	r3, #1
 8003d8e:	d0f0      	beq.n	8003d72 <ADC_Disable+0x52>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d92:	f043 0310 	orr.w	r3, r3, #16
 8003d96:	6563      	str	r3, [r4, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	65a3      	str	r3, [r4, #88]	; 0x58

          return HAL_ERROR;
 8003da0:	2001      	movs	r0, #1
 8003da2:	e002      	b.n	8003daa <ADC_Disable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003da4:	2000      	movs	r0, #0
 8003da6:	e000      	b.n	8003daa <ADC_Disable+0x8a>
 8003da8:	2000      	movs	r0, #0
}
 8003daa:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003dac:	2000      	movs	r0, #0
 8003dae:	e7fc      	b.n	8003daa <ADC_Disable+0x8a>
 8003db0:	7fffffc0 	.word	0x7fffffc0

08003db4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003db4:	b538      	push	{r3, r4, r5, lr}
 8003db6:	4604      	mov	r4, r0
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003db8:	6803      	ldr	r3, [r0, #0]
 8003dba:	494f      	ldr	r1, [pc, #316]	; (8003ef8 <ADC_ConfigureBoostMode+0x144>)
 8003dbc:	4a4f      	ldr	r2, [pc, #316]	; (8003efc <ADC_ConfigureBoostMode+0x148>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	bf18      	it	ne
 8003dc2:	428b      	cmpne	r3, r1
 8003dc4:	d123      	bne.n	8003e0e <ADC_ConfigureBoostMode+0x5a>
 8003dc6:	4b4e      	ldr	r3, [pc, #312]	; (8003f00 <ADC_ConfigureBoostMode+0x14c>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8003dce:	bf14      	ite	ne
 8003dd0:	2301      	movne	r3, #1
 8003dd2:	2300      	moveq	r3, #0
 8003dd4:	b34b      	cbz	r3, 8003e2a <ADC_ConfigureBoostMode+0x76>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003dd6:	f003 ff21 	bl	8007c1c <HAL_RCC_GetHCLKFreq>
 8003dda:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8003ddc:	6863      	ldr	r3, [r4, #4]
 8003dde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003de2:	d01c      	beq.n	8003e1e <ADC_ConfigureBoostMode+0x6a>
 8003de4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003de8:	d01d      	beq.n	8003e26 <ADC_ConfigureBoostMode+0x72>
 8003dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dee:	d016      	beq.n	8003e1e <ADC_ConfigureBoostMode+0x6a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003df0:	f7ff fd1c 	bl	800382c <HAL_GetREVID>
 8003df4:	f241 0303 	movw	r3, #4099	; 0x1003
 8003df8:	4298      	cmp	r0, r3
 8003dfa:	d857      	bhi.n	8003eac <ADC_ConfigureBoostMode+0xf8>
  {
    if (freq > 20000000UL)
 8003dfc:	4b41      	ldr	r3, [pc, #260]	; (8003f04 <ADC_ConfigureBoostMode+0x150>)
 8003dfe:	429d      	cmp	r5, r3
 8003e00:	d94e      	bls.n	8003ea0 <ADC_ConfigureBoostMode+0xec>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e02:	6822      	ldr	r2, [r4, #0]
 8003e04:	6893      	ldr	r3, [r2, #8]
 8003e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e0a:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e0c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003e0e:	4b3e      	ldr	r3, [pc, #248]	; (8003f08 <ADC_ConfigureBoostMode+0x154>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8003e16:	bf14      	ite	ne
 8003e18:	2301      	movne	r3, #1
 8003e1a:	2300      	moveq	r3, #0
 8003e1c:	e7da      	b.n	8003dd4 <ADC_ConfigureBoostMode+0x20>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003e1e:	0c1b      	lsrs	r3, r3, #16
 8003e20:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8003e24:	e7e4      	b.n	8003df0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 4UL;
 8003e26:	0885      	lsrs	r5, r0, #2
        break;
 8003e28:	e7e2      	b.n	8003df0 <ADC_ConfigureBoostMode+0x3c>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003e2a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003e2e:	f005 f859 	bl	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e32:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8003e34:	6863      	ldr	r3, [r4, #4]
 8003e36:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003e3a:	d02d      	beq.n	8003e98 <ADC_ConfigureBoostMode+0xe4>
 8003e3c:	d822      	bhi.n	8003e84 <ADC_ConfigureBoostMode+0xd0>
 8003e3e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003e42:	d027      	beq.n	8003e94 <ADC_ConfigureBoostMode+0xe0>
 8003e44:	d904      	bls.n	8003e50 <ADC_ConfigureBoostMode+0x9c>
 8003e46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e4a:	d1d1      	bne.n	8003df0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 8003e4c:	0945      	lsrs	r5, r0, #5
        break;
 8003e4e:	e7cf      	b.n	8003df0 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8003e50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e54:	d00d      	beq.n	8003e72 <ADC_ConfigureBoostMode+0xbe>
 8003e56:	d906      	bls.n	8003e66 <ADC_ConfigureBoostMode+0xb2>
 8003e58:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003e5c:	d009      	beq.n	8003e72 <ADC_ConfigureBoostMode+0xbe>
 8003e5e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003e62:	d006      	beq.n	8003e72 <ADC_ConfigureBoostMode+0xbe>
 8003e64:	e7c4      	b.n	8003df0 <ADC_ConfigureBoostMode+0x3c>
 8003e66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e6a:	d002      	beq.n	8003e72 <ADC_ConfigureBoostMode+0xbe>
 8003e6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e70:	d104      	bne.n	8003e7c <ADC_ConfigureBoostMode+0xc8>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003e72:	0c9b      	lsrs	r3, r3, #18
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8003e7a:	e7b9      	b.n	8003df0 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8003e7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e80:	d0f7      	beq.n	8003e72 <ADC_ConfigureBoostMode+0xbe>
 8003e82:	e7b5      	b.n	8003df0 <ADC_ConfigureBoostMode+0x3c>
 8003e84:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003e88:	d008      	beq.n	8003e9c <ADC_ConfigureBoostMode+0xe8>
 8003e8a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003e8e:	d1af      	bne.n	8003df0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 256UL;
 8003e90:	0a05      	lsrs	r5, r0, #8
        break;
 8003e92:	e7ad      	b.n	8003df0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 8003e94:	0905      	lsrs	r5, r0, #4
        break;
 8003e96:	e7ab      	b.n	8003df0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 8003e98:	0985      	lsrs	r5, r0, #6
        break;
 8003e9a:	e7a9      	b.n	8003df0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 8003e9c:	09c5      	lsrs	r5, r0, #7
        break;
 8003e9e:	e7a7      	b.n	8003df0 <ADC_ConfigureBoostMode+0x3c>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ea0:	6822      	ldr	r2, [r4, #0]
 8003ea2:	6893      	ldr	r3, [r2, #8]
 8003ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ea8:	6093      	str	r3, [r2, #8]
 8003eaa:	e7af      	b.n	8003e0c <ADC_ConfigureBoostMode+0x58>
    if (freq <= 6250000UL)
 8003eac:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <ADC_ConfigureBoostMode+0x158>)
 8003eae:	429d      	cmp	r5, r3
 8003eb0:	d805      	bhi.n	8003ebe <ADC_ConfigureBoostMode+0x10a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003eb2:	6822      	ldr	r2, [r4, #0]
 8003eb4:	6893      	ldr	r3, [r2, #8]
 8003eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eba:	6093      	str	r3, [r2, #8]
 8003ebc:	e7a6      	b.n	8003e0c <ADC_ConfigureBoostMode+0x58>
    else if (freq <= 12500000UL)
 8003ebe:	4b14      	ldr	r3, [pc, #80]	; (8003f10 <ADC_ConfigureBoostMode+0x15c>)
 8003ec0:	429d      	cmp	r5, r3
 8003ec2:	d807      	bhi.n	8003ed4 <ADC_ConfigureBoostMode+0x120>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003ec4:	6822      	ldr	r2, [r4, #0]
 8003ec6:	6893      	ldr	r3, [r2, #8]
 8003ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed0:	6093      	str	r3, [r2, #8]
 8003ed2:	e79b      	b.n	8003e0c <ADC_ConfigureBoostMode+0x58>
    else if (freq <= 25000000UL)
 8003ed4:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <ADC_ConfigureBoostMode+0x160>)
 8003ed6:	429d      	cmp	r5, r3
 8003ed8:	d807      	bhi.n	8003eea <ADC_ConfigureBoostMode+0x136>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003eda:	6822      	ldr	r2, [r4, #0]
 8003edc:	6893      	ldr	r3, [r2, #8]
 8003ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ee6:	6093      	str	r3, [r2, #8]
 8003ee8:	e790      	b.n	8003e0c <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003eea:	6822      	ldr	r2, [r4, #0]
 8003eec:	6893      	ldr	r3, [r2, #8]
 8003eee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003ef2:	6093      	str	r3, [r2, #8]
}
 8003ef4:	e78a      	b.n	8003e0c <ADC_ConfigureBoostMode+0x58>
 8003ef6:	bf00      	nop
 8003ef8:	40022000 	.word	0x40022000
 8003efc:	40022100 	.word	0x40022100
 8003f00:	40022300 	.word	0x40022300
 8003f04:	01312d00 	.word	0x01312d00
 8003f08:	58026300 	.word	0x58026300
 8003f0c:	00bebc21 	.word	0x00bebc21
 8003f10:	017d7841 	.word	0x017d7841
 8003f14:	02faf081 	.word	0x02faf081

08003f18 <HAL_ADC_Init>:
{
 8003f18:	b530      	push	{r4, r5, lr}
 8003f1a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8003f20:	2800      	cmp	r0, #0
 8003f22:	f000 8110 	beq.w	8004146 <HAL_ADC_Init+0x22e>
 8003f26:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f28:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003f2a:	b1eb      	cbz	r3, 8003f68 <HAL_ADC_Init+0x50>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f2c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8003f34:	d003      	beq.n	8003f3e <HAL_ADC_Init+0x26>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f36:	6899      	ldr	r1, [r3, #8]
 8003f38:	4a84      	ldr	r2, [pc, #528]	; (800414c <HAL_ADC_Init+0x234>)
 8003f3a:	400a      	ands	r2, r1
 8003f3c:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f3e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8003f46:	d11c      	bne.n	8003f82 <HAL_ADC_Init+0x6a>
  MODIFY_REG(ADCx->CR,
 8003f48:	6899      	ldr	r1, [r3, #8]
 8003f4a:	4a81      	ldr	r2, [pc, #516]	; (8004150 <HAL_ADC_Init+0x238>)
 8003f4c:	400a      	ands	r2, r1
 8003f4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f52:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f54:	4b7f      	ldr	r3, [pc, #508]	; (8004154 <HAL_ADC_Init+0x23c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	099b      	lsrs	r3, r3, #6
 8003f5a:	4a7f      	ldr	r2, [pc, #508]	; (8004158 <HAL_ADC_Init+0x240>)
 8003f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f60:	099b      	lsrs	r3, r3, #6
 8003f62:	3301      	adds	r3, #1
 8003f64:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003f66:	e009      	b.n	8003f7c <HAL_ADC_Init+0x64>
    HAL_ADC_MspInit(hadc);
 8003f68:	f7fe fbde 	bl	8002728 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8003f70:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8003f74:	e7da      	b.n	8003f2c <HAL_ADC_Init+0x14>
      wait_loop_index--;
 8003f76:	9b01      	ldr	r3, [sp, #4]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003f7c:	9b01      	ldr	r3, [sp, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f9      	bne.n	8003f76 <HAL_ADC_Init+0x5e>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f82:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f84:	6893      	ldr	r3, [r2, #8]
 8003f86:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003f8a:	f040 809c 	bne.w	80040c6 <HAL_ADC_Init+0x1ae>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003f90:	f043 0310 	orr.w	r3, r3, #16
 8003f94:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8003f9e:	2501      	movs	r5, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fa0:	6893      	ldr	r3, [r2, #8]
 8003fa2:	f013 0304 	ands.w	r3, r3, #4
 8003fa6:	d000      	beq.n	8003faa <HAL_ADC_Init+0x92>
 8003fa8:	2301      	movs	r3, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003faa:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003fac:	f011 0f10 	tst.w	r1, #16
 8003fb0:	f040 80c1 	bne.w	8004136 <HAL_ADC_Init+0x21e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f040 80be 	bne.w	8004136 <HAL_ADC_Init+0x21e>
    ADC_STATE_CLR_SET(hadc->State,
 8003fba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003fbc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003fc0:	f043 0302 	orr.w	r3, r3, #2
 8003fc4:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fc6:	6893      	ldr	r3, [r2, #8]
 8003fc8:	f013 0f01 	tst.w	r3, #1
 8003fcc:	d121      	bne.n	8004012 <HAL_ADC_Init+0xfa>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fce:	4963      	ldr	r1, [pc, #396]	; (800415c <HAL_ADC_Init+0x244>)
 8003fd0:	4b63      	ldr	r3, [pc, #396]	; (8004160 <HAL_ADC_Init+0x248>)
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	bf18      	it	ne
 8003fd6:	428a      	cmpne	r2, r1
 8003fd8:	bf0c      	ite	eq
 8003fda:	2201      	moveq	r2, #1
 8003fdc:	2200      	movne	r2, #0
 8003fde:	d174      	bne.n	80040ca <HAL_ADC_Init+0x1b2>
 8003fe0:	688b      	ldr	r3, [r1, #8]
 8003fe2:	f013 0301 	ands.w	r3, r3, #1
 8003fe6:	d000      	beq.n	8003fea <HAL_ADC_Init+0xd2>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	495d      	ldr	r1, [pc, #372]	; (8004160 <HAL_ADC_Init+0x248>)
 8003fec:	6889      	ldr	r1, [r1, #8]
 8003fee:	f011 0101 	ands.w	r1, r1, #1
 8003ff2:	d000      	beq.n	8003ff6 <HAL_ADC_Init+0xde>
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	bf0c      	ite	eq
 8003ffa:	2301      	moveq	r3, #1
 8003ffc:	2300      	movne	r3, #0
 8003ffe:	b143      	cbz	r3, 8004012 <HAL_ADC_Init+0xfa>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004000:	2a00      	cmp	r2, #0
 8004002:	d06b      	beq.n	80040dc <HAL_ADC_Init+0x1c4>
 8004004:	4957      	ldr	r1, [pc, #348]	; (8004164 <HAL_ADC_Init+0x24c>)
 8004006:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004008:	688a      	ldr	r2, [r1, #8]
 800400a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004012:	f7ff fc0b 	bl	800382c <HAL_GetREVID>
 8004016:	f241 0303 	movw	r3, #4099	; 0x1003
 800401a:	4298      	cmp	r0, r3
 800401c:	d902      	bls.n	8004024 <HAL_ADC_Init+0x10c>
 800401e:	68a3      	ldr	r3, [r4, #8]
 8004020:	2b10      	cmp	r3, #16
 8004022:	d05d      	beq.n	80040e0 <HAL_ADC_Init+0x1c8>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004024:	7d62      	ldrb	r2, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8004026:	6b23      	ldr	r3, [r4, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004028:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                  hadc->Init.Resolution                                                 |
 800402c:	68a2      	ldr	r2, [r4, #8]
                  hadc->Init.Overrun                                                    |
 800402e:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004030:	7f22      	ldrb	r2, [r4, #28]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004036:	7f22      	ldrb	r2, [r4, #28]
 8004038:	2a01      	cmp	r2, #1
 800403a:	d05c      	beq.n	80040f6 <HAL_ADC_Init+0x1de>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800403c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800403e:	b122      	cbz	r2, 800404a <HAL_ADC_Init+0x132>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004040:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004044:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004046:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004048:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800404a:	6821      	ldr	r1, [r4, #0]
 800404c:	68c8      	ldr	r0, [r1, #12]
 800404e:	4a46      	ldr	r2, [pc, #280]	; (8004168 <HAL_ADC_Init+0x250>)
 8004050:	4002      	ands	r2, r0
 8004052:	4313      	orrs	r3, r2
 8004054:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004056:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004058:	688b      	ldr	r3, [r1, #8]
 800405a:	f013 0304 	ands.w	r3, r3, #4
 800405e:	d000      	beq.n	8004062 <HAL_ADC_Init+0x14a>
 8004060:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004062:	688a      	ldr	r2, [r1, #8]
 8004064:	f012 0208 	ands.w	r2, r2, #8
 8004068:	d000      	beq.n	800406c <HAL_ADC_Init+0x154>
 800406a:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800406c:	4313      	orrs	r3, r2
 800406e:	d11b      	bne.n	80040a8 <HAL_ADC_Init+0x190>
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004070:	7d22      	ldrb	r2, [r4, #20]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004072:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      tmpCFGR = (
 8004074:	ea43 3282 	orr.w	r2, r3, r2, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004078:	68c8      	ldr	r0, [r1, #12]
 800407a:	4b3c      	ldr	r3, [pc, #240]	; (800416c <HAL_ADC_Init+0x254>)
 800407c:	4003      	ands	r3, r0
 800407e:	4313      	orrs	r3, r2
 8004080:	60cb      	str	r3, [r1, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8004082:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8004086:	2b01      	cmp	r3, #1
 8004088:	d03a      	beq.n	8004100 <HAL_ADC_Init+0x1e8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800408a:	6822      	ldr	r2, [r4, #0]
 800408c:	6913      	ldr	r3, [r2, #16]
 800408e:	f023 0301 	bic.w	r3, r3, #1
 8004092:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004094:	6822      	ldr	r2, [r4, #0]
 8004096:	6913      	ldr	r3, [r2, #16]
 8004098:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800409c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800409e:	430b      	orrs	r3, r1
 80040a0:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 80040a2:	4620      	mov	r0, r4
 80040a4:	f7ff fe86 	bl	8003db4 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040a8:	68e3      	ldr	r3, [r4, #12]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d03a      	beq.n	8004124 <HAL_ADC_Init+0x20c>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040ae:	6822      	ldr	r2, [r4, #0]
 80040b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80040b2:	f023 030f 	bic.w	r3, r3, #15
 80040b6:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80040ba:	f023 0303 	bic.w	r3, r3, #3
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6563      	str	r3, [r4, #84]	; 0x54
 80040c4:	e03c      	b.n	8004140 <HAL_ADC_Init+0x228>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040c6:	2500      	movs	r5, #0
 80040c8:	e76a      	b.n	8003fa0 <HAL_ADC_Init+0x88>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040ca:	4b29      	ldr	r3, [pc, #164]	; (8004170 <HAL_ADC_Init+0x258>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f013 0301 	ands.w	r3, r3, #1
 80040d2:	d000      	beq.n	80040d6 <HAL_ADC_Init+0x1be>
 80040d4:	2301      	movs	r3, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040d6:	f083 0301 	eor.w	r3, r3, #1
 80040da:	e790      	b.n	8003ffe <HAL_ADC_Init+0xe6>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80040dc:	4925      	ldr	r1, [pc, #148]	; (8004174 <HAL_ADC_Init+0x25c>)
 80040de:	e792      	b.n	8004006 <HAL_ADC_Init+0xee>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040e0:	7d61      	ldrb	r1, [r4, #21]
                  hadc->Init.Overrun                                                    |
 80040e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040e4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
                  hadc->Init.Overrun                                                    |
 80040e8:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80040ea:	7f22      	ldrb	r2, [r4, #28]
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80040ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040f0:	f043 030c 	orr.w	r3, r3, #12
 80040f4:	e79f      	b.n	8004036 <HAL_ADC_Init+0x11e>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80040f6:	6a22      	ldr	r2, [r4, #32]
 80040f8:	3a01      	subs	r2, #1
 80040fa:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80040fe:	e79d      	b.n	800403c <HAL_ADC_Init+0x124>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004100:	6820      	ldr	r0, [r4, #0]
 8004102:	6902      	ldr	r2, [r0, #16]
 8004104:	4b1c      	ldr	r3, [pc, #112]	; (8004178 <HAL_ADC_Init+0x260>)
 8004106:	4013      	ands	r3, r2
 8004108:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800410a:	1e51      	subs	r1, r2, #1
 800410c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800410e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004112:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004114:	430a      	orrs	r2, r1
 8004116:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004118:	430a      	orrs	r2, r1
 800411a:	4313      	orrs	r3, r2
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	6103      	str	r3, [r0, #16]
 8004122:	e7b7      	b.n	8004094 <HAL_ADC_Init+0x17c>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004124:	6821      	ldr	r1, [r4, #0]
 8004126:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8004128:	f023 030f 	bic.w	r3, r3, #15
 800412c:	69a2      	ldr	r2, [r4, #24]
 800412e:	3a01      	subs	r2, #1
 8004130:	4313      	orrs	r3, r2
 8004132:	630b      	str	r3, [r1, #48]	; 0x30
 8004134:	e7c0      	b.n	80040b8 <HAL_ADC_Init+0x1a0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004136:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004138:	f043 0310 	orr.w	r3, r3, #16
 800413c:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800413e:	2501      	movs	r5, #1
}
 8004140:	4628      	mov	r0, r5
 8004142:	b003      	add	sp, #12
 8004144:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8004146:	2501      	movs	r5, #1
 8004148:	e7fa      	b.n	8004140 <HAL_ADC_Init+0x228>
 800414a:	bf00      	nop
 800414c:	5fffffc0 	.word	0x5fffffc0
 8004150:	6fffffc0 	.word	0x6fffffc0
 8004154:	24000000 	.word	0x24000000
 8004158:	053e2d63 	.word	0x053e2d63
 800415c:	40022000 	.word	0x40022000
 8004160:	40022100 	.word	0x40022100
 8004164:	40022300 	.word	0x40022300
 8004168:	fff0c003 	.word	0xfff0c003
 800416c:	ffffbffc 	.word	0xffffbffc
 8004170:	58026000 	.word	0x58026000
 8004174:	58026300 	.word	0x58026300
 8004178:	fc00f81e 	.word	0xfc00f81e

0800417c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004180:	2300      	movs	r3, #0
 8004182:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004184:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004188:	2b01      	cmp	r3, #1
 800418a:	d042      	beq.n	8004212 <HAL_ADCEx_Calibration_Start+0x96>
 800418c:	4604      	mov	r4, r0
 800418e:	460d      	mov	r5, r1
 8004190:	4616      	mov	r6, r2
 8004192:	2301      	movs	r3, #1
 8004194:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004198:	f7ff fdc2 	bl	8003d20 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800419c:	2800      	cmp	r0, #0
 800419e:	d12f      	bne.n	8004200 <HAL_ADCEx_Calibration_Start+0x84>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041a0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80041a2:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <HAL_ADCEx_Calibration_Start+0x9c>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	f043 0302 	orr.w	r3, r3, #2
 80041aa:	6563      	str	r3, [r4, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80041ac:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80041ae:	6891      	ldr	r1, [r2, #8]
 80041b0:	4b1a      	ldr	r3, [pc, #104]	; (800421c <HAL_ADCEx_Calibration_Start+0xa0>)
 80041b2:	400b      	ands	r3, r1
 80041b4:	f405 3580 	and.w	r5, r5, #65536	; 0x10000
 80041b8:	f006 4680 	and.w	r6, r6, #1073741824	; 0x40000000
 80041bc:	4335      	orrs	r5, r6
 80041be:	432b      	orrs	r3, r5
 80041c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041c4:	6093      	str	r3, [r2, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80041c6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	db06      	blt.n	80041dc <HAL_ADCEx_Calibration_Start+0x60>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80041d0:	f023 0303 	bic.w	r3, r3, #3
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	6563      	str	r3, [r4, #84]	; 0x54
 80041da:	e015      	b.n	8004208 <HAL_ADCEx_Calibration_Start+0x8c>
      wait_loop_index++;
 80041dc:	9b01      	ldr	r3, [sp, #4]
 80041de:	3301      	adds	r3, #1
 80041e0:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80041e2:	9a01      	ldr	r2, [sp, #4]
 80041e4:	4b0e      	ldr	r3, [pc, #56]	; (8004220 <HAL_ADCEx_Calibration_Start+0xa4>)
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d3ed      	bcc.n	80041c6 <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 80041ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80041ec:	f023 0312 	bic.w	r3, r3, #18
 80041f0:	f043 0310 	orr.w	r3, r3, #16
 80041f4:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80041f6:	2300      	movs	r3, #0
 80041f8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 80041fc:	2001      	movs	r0, #1
 80041fe:	e006      	b.n	800420e <HAL_ADCEx_Calibration_Start+0x92>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004200:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004202:	f043 0310 	orr.w	r3, r3, #16
 8004206:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004208:	2300      	movs	r3, #0
 800420a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800420e:	b002      	add	sp, #8
 8004210:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8004212:	2002      	movs	r0, #2
 8004214:	e7fb      	b.n	800420e <HAL_ADCEx_Calibration_Start+0x92>
 8004216:	bf00      	nop
 8004218:	ffffeefd 	.word	0xffffeefd
 800421c:	3ffeffc0 	.word	0x3ffeffc0
 8004220:	25c3f800 	.word	0x25c3f800

08004224 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004224:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8004228:	2a01      	cmp	r2, #1
 800422a:	f000 80a1 	beq.w	8004370 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
{
 800422e:	b430      	push	{r4, r5}
 8004230:	b09a      	sub	sp, #104	; 0x68
 8004232:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004234:	2201      	movs	r2, #1
 8004236:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800423a:	2200      	movs	r2, #0
 800423c:	9216      	str	r2, [sp, #88]	; 0x58
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800423e:	9217      	str	r2, [sp, #92]	; 0x5c

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004240:	6800      	ldr	r0, [r0, #0]
 8004242:	4a4c      	ldr	r2, [pc, #304]	; (8004374 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004244:	4290      	cmp	r0, r2
 8004246:	d042      	beq.n	80042ce <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8004248:	2200      	movs	r2, #0
 800424a:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 800424c:	9a01      	ldr	r2, [sp, #4]
 800424e:	2a00      	cmp	r2, #0
 8004250:	d041      	beq.n	80042d6 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004252:	6892      	ldr	r2, [r2, #8]
 8004254:	f012 0204 	ands.w	r2, r2, #4
 8004258:	d000      	beq.n	800425c <HAL_ADCEx_MultiModeConfigChannel+0x38>
 800425a:	2201      	movs	r2, #1
 800425c:	6884      	ldr	r4, [r0, #8]
 800425e:	f014 0f04 	tst.w	r4, #4
 8004262:	d176      	bne.n	8004352 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004264:	2a00      	cmp	r2, #0
 8004266:	d174      	bne.n	8004352 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004268:	4c42      	ldr	r4, [pc, #264]	; (8004374 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800426a:	4a43      	ldr	r2, [pc, #268]	; (8004378 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800426c:	4290      	cmp	r0, r2
 800426e:	bf18      	it	ne
 8004270:	42a0      	cmpne	r0, r4
 8004272:	d139      	bne.n	80042e8 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8004274:	f502 7200 	add.w	r2, r2, #512	; 0x200

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004278:	6808      	ldr	r0, [r1, #0]
 800427a:	2800      	cmp	r0, #0
 800427c:	d03f      	beq.n	80042fe <HAL_ADCEx_MultiModeConfigChannel+0xda>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800427e:	6890      	ldr	r0, [r2, #8]
 8004280:	f420 4040 	bic.w	r0, r0, #49152	; 0xc000
 8004284:	684c      	ldr	r4, [r1, #4]
 8004286:	4320      	orrs	r0, r4
 8004288:	6090      	str	r0, [r2, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	4d39      	ldr	r5, [pc, #228]	; (8004374 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800428e:	4c3a      	ldr	r4, [pc, #232]	; (8004378 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004290:	42a0      	cmp	r0, r4
 8004292:	bf18      	it	ne
 8004294:	42a8      	cmpne	r0, r5
 8004296:	d129      	bne.n	80042ec <HAL_ADCEx_MultiModeConfigChannel+0xc8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004298:	68a8      	ldr	r0, [r5, #8]
 800429a:	f010 0001 	ands.w	r0, r0, #1
 800429e:	d000      	beq.n	80042a2 <HAL_ADCEx_MultiModeConfigChannel+0x7e>
 80042a0:	2001      	movs	r0, #1
 80042a2:	4c35      	ldr	r4, [pc, #212]	; (8004378 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80042a4:	68a4      	ldr	r4, [r4, #8]
 80042a6:	f014 0401 	ands.w	r4, r4, #1
 80042aa:	d000      	beq.n	80042ae <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 80042ac:	2401      	movs	r4, #1
 80042ae:	4320      	orrs	r0, r4
 80042b0:	bf0c      	ite	eq
 80042b2:	2001      	moveq	r0, #1
 80042b4:	2000      	movne	r0, #0
 80042b6:	2800      	cmp	r0, #0
 80042b8:	d056      	beq.n	8004368 <HAL_ADCEx_MultiModeConfigChannel+0x144>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80042ba:	6894      	ldr	r4, [r2, #8]
 80042bc:	482f      	ldr	r0, [pc, #188]	; (800437c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80042be:	4020      	ands	r0, r4
 80042c0:	680c      	ldr	r4, [r1, #0]
 80042c2:	6889      	ldr	r1, [r1, #8]
 80042c4:	4321      	orrs	r1, r4
 80042c6:	4308      	orrs	r0, r1
 80042c8:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ca:	2000      	movs	r0, #0
 80042cc:	e046      	b.n	800435c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80042ce:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80042d2:	9201      	str	r2, [sp, #4]
 80042d4:	e7ba      	b.n	800424c <HAL_ADCEx_MultiModeConfigChannel+0x28>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042d8:	f042 0220 	orr.w	r2, r2, #32
 80042dc:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80042e4:	2001      	movs	r0, #1
 80042e6:	e03c      	b.n	8004362 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80042e8:	4a25      	ldr	r2, [pc, #148]	; (8004380 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80042ea:	e7c5      	b.n	8004278 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 80042ec:	4825      	ldr	r0, [pc, #148]	; (8004384 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 80042ee:	6880      	ldr	r0, [r0, #8]
 80042f0:	f010 0001 	ands.w	r0, r0, #1
 80042f4:	d000      	beq.n	80042f8 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 80042f6:	2001      	movs	r0, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042f8:	f080 0001 	eor.w	r0, r0, #1
 80042fc:	e7db      	b.n	80042b6 <HAL_ADCEx_MultiModeConfigChannel+0x92>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80042fe:	6891      	ldr	r1, [r2, #8]
 8004300:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8004304:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004306:	6819      	ldr	r1, [r3, #0]
 8004308:	4c1a      	ldr	r4, [pc, #104]	; (8004374 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800430a:	481b      	ldr	r0, [pc, #108]	; (8004378 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800430c:	4281      	cmp	r1, r0
 800430e:	bf18      	it	ne
 8004310:	42a1      	cmpne	r1, r4
 8004312:	d115      	bne.n	8004340 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8004314:	68a1      	ldr	r1, [r4, #8]
 8004316:	f011 0101 	ands.w	r1, r1, #1
 800431a:	d000      	beq.n	800431e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800431c:	2101      	movs	r1, #1
 800431e:	4816      	ldr	r0, [pc, #88]	; (8004378 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004320:	6880      	ldr	r0, [r0, #8]
 8004322:	f010 0001 	ands.w	r0, r0, #1
 8004326:	d000      	beq.n	800432a <HAL_ADCEx_MultiModeConfigChannel+0x106>
 8004328:	2001      	movs	r0, #1
 800432a:	4301      	orrs	r1, r0
 800432c:	bf0c      	ite	eq
 800432e:	2101      	moveq	r1, #1
 8004330:	2100      	movne	r1, #0
 8004332:	b1d9      	cbz	r1, 800436c <HAL_ADCEx_MultiModeConfigChannel+0x148>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004334:	6890      	ldr	r0, [r2, #8]
 8004336:	4911      	ldr	r1, [pc, #68]	; (800437c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004338:	4001      	ands	r1, r0
 800433a:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800433c:	2000      	movs	r0, #0
 800433e:	e00d      	b.n	800435c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004340:	4910      	ldr	r1, [pc, #64]	; (8004384 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 8004342:	6889      	ldr	r1, [r1, #8]
 8004344:	f011 0101 	ands.w	r1, r1, #1
 8004348:	d000      	beq.n	800434c <HAL_ADCEx_MultiModeConfigChannel+0x128>
 800434a:	2101      	movs	r1, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800434c:	f081 0101 	eor.w	r1, r1, #1
 8004350:	e7ef      	b.n	8004332 <HAL_ADCEx_MultiModeConfigChannel+0x10e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004352:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004354:	f042 0220 	orr.w	r2, r2, #32
 8004358:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800435a:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8004362:	b01a      	add	sp, #104	; 0x68
 8004364:	bc30      	pop	{r4, r5}
 8004366:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004368:	2000      	movs	r0, #0
 800436a:	e7f7      	b.n	800435c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800436c:	2000      	movs	r0, #0
 800436e:	e7f5      	b.n	800435c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  __HAL_LOCK(hadc);
 8004370:	2002      	movs	r0, #2
}
 8004372:	4770      	bx	lr
 8004374:	40022000 	.word	0x40022000
 8004378:	40022100 	.word	0x40022100
 800437c:	fffff0e0 	.word	0xfffff0e0
 8004380:	58026300 	.word	0x58026300
 8004384:	58026000 	.word	0x58026000

08004388 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004388:	4906      	ldr	r1, [pc, #24]	; (80043a4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800438a:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800438c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004390:	041b      	lsls	r3, r3, #16
 8004392:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004394:	0200      	lsls	r0, r0, #8
 8004396:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800439a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800439c:	4a02      	ldr	r2, [pc, #8]	; (80043a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800439e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80043a0:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80043a2:	4770      	bx	lr
 80043a4:	e000ed00 	.word	0xe000ed00
 80043a8:	05fa0000 	.word	0x05fa0000

080043ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043ac:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043ae:	4b17      	ldr	r3, [pc, #92]	; (800440c <HAL_NVIC_SetPriority+0x60>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043b6:	f1c3 0c07 	rsb	ip, r3, #7
 80043ba:	f1bc 0f04 	cmp.w	ip, #4
 80043be:	bf28      	it	cs
 80043c0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043c4:	f103 0e04 	add.w	lr, r3, #4
 80043c8:	f1be 0f06 	cmp.w	lr, #6
 80043cc:	d914      	bls.n	80043f8 <HAL_NVIC_SetPriority+0x4c>
 80043ce:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d0:	f04f 3eff 	mov.w	lr, #4294967295
 80043d4:	fa0e fc0c 	lsl.w	ip, lr, ip
 80043d8:	ea21 010c 	bic.w	r1, r1, ip
 80043dc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043de:	fa0e f303 	lsl.w	r3, lr, r3
 80043e2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043e6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80043e8:	2800      	cmp	r0, #0
 80043ea:	db07      	blt.n	80043fc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ec:	0109      	lsls	r1, r1, #4
 80043ee:	b2c9      	uxtb	r1, r1
 80043f0:	4b07      	ldr	r3, [pc, #28]	; (8004410 <HAL_NVIC_SetPriority+0x64>)
 80043f2:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80043f4:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043f8:	2300      	movs	r3, #0
 80043fa:	e7e9      	b.n	80043d0 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fc:	f000 000f 	and.w	r0, r0, #15
 8004400:	0109      	lsls	r1, r1, #4
 8004402:	b2c9      	uxtb	r1, r1
 8004404:	4b03      	ldr	r3, [pc, #12]	; (8004414 <HAL_NVIC_SetPriority+0x68>)
 8004406:	5419      	strb	r1, [r3, r0]
 8004408:	e7f4      	b.n	80043f4 <HAL_NVIC_SetPriority+0x48>
 800440a:	bf00      	nop
 800440c:	e000ed00 	.word	0xe000ed00
 8004410:	e000e400 	.word	0xe000e400
 8004414:	e000ed14 	.word	0xe000ed14

08004418 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004418:	2800      	cmp	r0, #0
 800441a:	db07      	blt.n	800442c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800441c:	f000 021f 	and.w	r2, r0, #31
 8004420:	0940      	lsrs	r0, r0, #5
 8004422:	2301      	movs	r3, #1
 8004424:	4093      	lsls	r3, r2
 8004426:	4a02      	ldr	r2, [pc, #8]	; (8004430 <HAL_NVIC_EnableIRQ+0x18>)
 8004428:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	e000e100 	.word	0xe000e100

08004434 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004434:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004436:	6d87      	ldr	r7, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004438:	6804      	ldr	r4, [r0, #0]
 800443a:	4e66      	ldr	r6, [pc, #408]	; (80045d4 <DMA_SetConfig+0x1a0>)
 800443c:	4d66      	ldr	r5, [pc, #408]	; (80045d8 <DMA_SetConfig+0x1a4>)
 800443e:	42ac      	cmp	r4, r5
 8004440:	bf18      	it	ne
 8004442:	42b4      	cmpne	r4, r6
 8004444:	d042      	beq.n	80044cc <DMA_SetConfig+0x98>
 8004446:	3518      	adds	r5, #24
 8004448:	42ac      	cmp	r4, r5
 800444a:	d03f      	beq.n	80044cc <DMA_SetConfig+0x98>
 800444c:	3518      	adds	r5, #24
 800444e:	42ac      	cmp	r4, r5
 8004450:	d03c      	beq.n	80044cc <DMA_SetConfig+0x98>
 8004452:	3518      	adds	r5, #24
 8004454:	42ac      	cmp	r4, r5
 8004456:	d039      	beq.n	80044cc <DMA_SetConfig+0x98>
 8004458:	3518      	adds	r5, #24
 800445a:	42ac      	cmp	r4, r5
 800445c:	d036      	beq.n	80044cc <DMA_SetConfig+0x98>
 800445e:	3518      	adds	r5, #24
 8004460:	42ac      	cmp	r4, r5
 8004462:	d033      	beq.n	80044cc <DMA_SetConfig+0x98>
 8004464:	3518      	adds	r5, #24
 8004466:	42ac      	cmp	r4, r5
 8004468:	d030      	beq.n	80044cc <DMA_SetConfig+0x98>
 800446a:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800446e:	42ac      	cmp	r4, r5
 8004470:	d02c      	beq.n	80044cc <DMA_SetConfig+0x98>
 8004472:	3518      	adds	r5, #24
 8004474:	42ac      	cmp	r4, r5
 8004476:	d029      	beq.n	80044cc <DMA_SetConfig+0x98>
 8004478:	3518      	adds	r5, #24
 800447a:	42ac      	cmp	r4, r5
 800447c:	d026      	beq.n	80044cc <DMA_SetConfig+0x98>
 800447e:	3518      	adds	r5, #24
 8004480:	42ac      	cmp	r4, r5
 8004482:	d023      	beq.n	80044cc <DMA_SetConfig+0x98>
 8004484:	3518      	adds	r5, #24
 8004486:	42ac      	cmp	r4, r5
 8004488:	d020      	beq.n	80044cc <DMA_SetConfig+0x98>
 800448a:	3518      	adds	r5, #24
 800448c:	42ac      	cmp	r4, r5
 800448e:	d01d      	beq.n	80044cc <DMA_SetConfig+0x98>
 8004490:	3518      	adds	r5, #24
 8004492:	42ac      	cmp	r4, r5
 8004494:	d01a      	beq.n	80044cc <DMA_SetConfig+0x98>
 8004496:	3518      	adds	r5, #24
 8004498:	42ac      	cmp	r4, r5
 800449a:	d017      	beq.n	80044cc <DMA_SetConfig+0x98>
 800449c:	4d4f      	ldr	r5, [pc, #316]	; (80045dc <DMA_SetConfig+0x1a8>)
 800449e:	42ac      	cmp	r4, r5
 80044a0:	d014      	beq.n	80044cc <DMA_SetConfig+0x98>
 80044a2:	3514      	adds	r5, #20
 80044a4:	42ac      	cmp	r4, r5
 80044a6:	d011      	beq.n	80044cc <DMA_SetConfig+0x98>
 80044a8:	3514      	adds	r5, #20
 80044aa:	42ac      	cmp	r4, r5
 80044ac:	d00e      	beq.n	80044cc <DMA_SetConfig+0x98>
 80044ae:	3514      	adds	r5, #20
 80044b0:	42ac      	cmp	r4, r5
 80044b2:	d00b      	beq.n	80044cc <DMA_SetConfig+0x98>
 80044b4:	3514      	adds	r5, #20
 80044b6:	42ac      	cmp	r4, r5
 80044b8:	d008      	beq.n	80044cc <DMA_SetConfig+0x98>
 80044ba:	3514      	adds	r5, #20
 80044bc:	42ac      	cmp	r4, r5
 80044be:	d005      	beq.n	80044cc <DMA_SetConfig+0x98>
 80044c0:	3514      	adds	r5, #20
 80044c2:	42ac      	cmp	r4, r5
 80044c4:	d002      	beq.n	80044cc <DMA_SetConfig+0x98>
 80044c6:	3514      	adds	r5, #20
 80044c8:	42ac      	cmp	r4, r5
 80044ca:	d107      	bne.n	80044dc <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044cc:	6e44      	ldr	r4, [r0, #100]	; 0x64
 80044ce:	6e85      	ldr	r5, [r0, #104]	; 0x68
 80044d0:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80044d2:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 80044d4:	b114      	cbz	r4, 80044dc <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044d6:	6f04      	ldr	r4, [r0, #112]	; 0x70
 80044d8:	6f45      	ldr	r5, [r0, #116]	; 0x74
 80044da:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044dc:	6804      	ldr	r4, [r0, #0]
 80044de:	4e3d      	ldr	r6, [pc, #244]	; (80045d4 <DMA_SetConfig+0x1a0>)
 80044e0:	4d3d      	ldr	r5, [pc, #244]	; (80045d8 <DMA_SetConfig+0x1a4>)
 80044e2:	42ac      	cmp	r4, r5
 80044e4:	bf18      	it	ne
 80044e6:	42b4      	cmpne	r4, r6
 80044e8:	d052      	beq.n	8004590 <DMA_SetConfig+0x15c>
 80044ea:	3518      	adds	r5, #24
 80044ec:	42ac      	cmp	r4, r5
 80044ee:	d04f      	beq.n	8004590 <DMA_SetConfig+0x15c>
 80044f0:	3518      	adds	r5, #24
 80044f2:	42ac      	cmp	r4, r5
 80044f4:	d04c      	beq.n	8004590 <DMA_SetConfig+0x15c>
 80044f6:	3518      	adds	r5, #24
 80044f8:	42ac      	cmp	r4, r5
 80044fa:	d049      	beq.n	8004590 <DMA_SetConfig+0x15c>
 80044fc:	3518      	adds	r5, #24
 80044fe:	42ac      	cmp	r4, r5
 8004500:	d046      	beq.n	8004590 <DMA_SetConfig+0x15c>
 8004502:	3518      	adds	r5, #24
 8004504:	42ac      	cmp	r4, r5
 8004506:	d043      	beq.n	8004590 <DMA_SetConfig+0x15c>
 8004508:	3518      	adds	r5, #24
 800450a:	42ac      	cmp	r4, r5
 800450c:	d040      	beq.n	8004590 <DMA_SetConfig+0x15c>
 800450e:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8004512:	42ac      	cmp	r4, r5
 8004514:	d03c      	beq.n	8004590 <DMA_SetConfig+0x15c>
 8004516:	3518      	adds	r5, #24
 8004518:	42ac      	cmp	r4, r5
 800451a:	d039      	beq.n	8004590 <DMA_SetConfig+0x15c>
 800451c:	3518      	adds	r5, #24
 800451e:	42ac      	cmp	r4, r5
 8004520:	d036      	beq.n	8004590 <DMA_SetConfig+0x15c>
 8004522:	3518      	adds	r5, #24
 8004524:	42ac      	cmp	r4, r5
 8004526:	d033      	beq.n	8004590 <DMA_SetConfig+0x15c>
 8004528:	3518      	adds	r5, #24
 800452a:	42ac      	cmp	r4, r5
 800452c:	d030      	beq.n	8004590 <DMA_SetConfig+0x15c>
 800452e:	3518      	adds	r5, #24
 8004530:	42ac      	cmp	r4, r5
 8004532:	d02d      	beq.n	8004590 <DMA_SetConfig+0x15c>
 8004534:	3518      	adds	r5, #24
 8004536:	42ac      	cmp	r4, r5
 8004538:	d02a      	beq.n	8004590 <DMA_SetConfig+0x15c>
 800453a:	3518      	adds	r5, #24
 800453c:	42ac      	cmp	r4, r5
 800453e:	d027      	beq.n	8004590 <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004540:	4e26      	ldr	r6, [pc, #152]	; (80045dc <DMA_SetConfig+0x1a8>)
 8004542:	4d27      	ldr	r5, [pc, #156]	; (80045e0 <DMA_SetConfig+0x1ac>)
 8004544:	42ac      	cmp	r4, r5
 8004546:	bf18      	it	ne
 8004548:	42b4      	cmpne	r4, r6
 800454a:	d011      	beq.n	8004570 <DMA_SetConfig+0x13c>
 800454c:	4d25      	ldr	r5, [pc, #148]	; (80045e4 <DMA_SetConfig+0x1b0>)
 800454e:	42ac      	cmp	r4, r5
 8004550:	d00e      	beq.n	8004570 <DMA_SetConfig+0x13c>
 8004552:	3514      	adds	r5, #20
 8004554:	42ac      	cmp	r4, r5
 8004556:	d00b      	beq.n	8004570 <DMA_SetConfig+0x13c>
 8004558:	3514      	adds	r5, #20
 800455a:	42ac      	cmp	r4, r5
 800455c:	d008      	beq.n	8004570 <DMA_SetConfig+0x13c>
 800455e:	3514      	adds	r5, #20
 8004560:	42ac      	cmp	r4, r5
 8004562:	d005      	beq.n	8004570 <DMA_SetConfig+0x13c>
 8004564:	3514      	adds	r5, #20
 8004566:	42ac      	cmp	r4, r5
 8004568:	d002      	beq.n	8004570 <DMA_SetConfig+0x13c>
 800456a:	3514      	adds	r5, #20
 800456c:	42ac      	cmp	r4, r5
 800456e:	d124      	bne.n	80045ba <DMA_SetConfig+0x186>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004570:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8004572:	f004 051f 	and.w	r5, r4, #31
 8004576:	2401      	movs	r4, #1
 8004578:	40ac      	lsls	r4, r5
 800457a:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800457c:	6804      	ldr	r4, [r0, #0]
 800457e:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004580:	6883      	ldr	r3, [r0, #8]
 8004582:	2b40      	cmp	r3, #64	; 0x40
 8004584:	d020      	beq.n	80045c8 <DMA_SetConfig+0x194>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004586:	6803      	ldr	r3, [r0, #0]
 8004588:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800458a:	6803      	ldr	r3, [r0, #0]
 800458c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800458e:	e014      	b.n	80045ba <DMA_SetConfig+0x186>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004590:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8004592:	f004 0c1f 	and.w	ip, r4, #31
 8004596:	243f      	movs	r4, #63	; 0x3f
 8004598:	fa04 f40c 	lsl.w	r4, r4, ip
 800459c:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800459e:	6805      	ldr	r5, [r0, #0]
 80045a0:	682c      	ldr	r4, [r5, #0]
 80045a2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80045a6:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80045a8:	6804      	ldr	r4, [r0, #0]
 80045aa:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045ac:	6883      	ldr	r3, [r0, #8]
 80045ae:	2b40      	cmp	r3, #64	; 0x40
 80045b0:	d005      	beq.n	80045be <DMA_SetConfig+0x18a>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80045b2:	6803      	ldr	r3, [r0, #0]
 80045b4:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80045b6:	6803      	ldr	r3, [r0, #0]
 80045b8:	60da      	str	r2, [r3, #12]
}
 80045ba:	bcf0      	pop	{r4, r5, r6, r7}
 80045bc:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80045be:	6803      	ldr	r3, [r0, #0]
 80045c0:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80045c2:	6803      	ldr	r3, [r0, #0]
 80045c4:	60d9      	str	r1, [r3, #12]
 80045c6:	e7f8      	b.n	80045ba <DMA_SetConfig+0x186>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80045c8:	6803      	ldr	r3, [r0, #0]
 80045ca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80045cc:	6803      	ldr	r3, [r0, #0]
 80045ce:	60d9      	str	r1, [r3, #12]
 80045d0:	e7f3      	b.n	80045ba <DMA_SetConfig+0x186>
 80045d2:	bf00      	nop
 80045d4:	40020010 	.word	0x40020010
 80045d8:	40020028 	.word	0x40020028
 80045dc:	58025408 	.word	0x58025408
 80045e0:	5802541c 	.word	0x5802541c
 80045e4:	58025430 	.word	0x58025430

080045e8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045e8:	6803      	ldr	r3, [r0, #0]
 80045ea:	4927      	ldr	r1, [pc, #156]	; (8004688 <DMA_CalcBaseAndBitshift+0xa0>)
 80045ec:	4a27      	ldr	r2, [pc, #156]	; (800468c <DMA_CalcBaseAndBitshift+0xa4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	bf18      	it	ne
 80045f2:	428b      	cmpne	r3, r1
 80045f4:	d02f      	beq.n	8004656 <DMA_CalcBaseAndBitshift+0x6e>
 80045f6:	3218      	adds	r2, #24
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d02c      	beq.n	8004656 <DMA_CalcBaseAndBitshift+0x6e>
 80045fc:	3218      	adds	r2, #24
 80045fe:	4293      	cmp	r3, r2
 8004600:	d029      	beq.n	8004656 <DMA_CalcBaseAndBitshift+0x6e>
 8004602:	3218      	adds	r2, #24
 8004604:	4293      	cmp	r3, r2
 8004606:	d026      	beq.n	8004656 <DMA_CalcBaseAndBitshift+0x6e>
 8004608:	3218      	adds	r2, #24
 800460a:	4293      	cmp	r3, r2
 800460c:	d023      	beq.n	8004656 <DMA_CalcBaseAndBitshift+0x6e>
 800460e:	3218      	adds	r2, #24
 8004610:	4293      	cmp	r3, r2
 8004612:	d020      	beq.n	8004656 <DMA_CalcBaseAndBitshift+0x6e>
 8004614:	3218      	adds	r2, #24
 8004616:	4293      	cmp	r3, r2
 8004618:	d01d      	beq.n	8004656 <DMA_CalcBaseAndBitshift+0x6e>
 800461a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800461e:	4293      	cmp	r3, r2
 8004620:	d019      	beq.n	8004656 <DMA_CalcBaseAndBitshift+0x6e>
 8004622:	3218      	adds	r2, #24
 8004624:	4293      	cmp	r3, r2
 8004626:	d016      	beq.n	8004656 <DMA_CalcBaseAndBitshift+0x6e>
 8004628:	3218      	adds	r2, #24
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <DMA_CalcBaseAndBitshift+0x6e>
 800462e:	3218      	adds	r2, #24
 8004630:	4293      	cmp	r3, r2
 8004632:	d010      	beq.n	8004656 <DMA_CalcBaseAndBitshift+0x6e>
 8004634:	3218      	adds	r2, #24
 8004636:	4293      	cmp	r3, r2
 8004638:	d00d      	beq.n	8004656 <DMA_CalcBaseAndBitshift+0x6e>
 800463a:	3218      	adds	r2, #24
 800463c:	4293      	cmp	r3, r2
 800463e:	d00a      	beq.n	8004656 <DMA_CalcBaseAndBitshift+0x6e>
 8004640:	3218      	adds	r2, #24
 8004642:	4293      	cmp	r3, r2
 8004644:	d007      	beq.n	8004656 <DMA_CalcBaseAndBitshift+0x6e>
 8004646:	3218      	adds	r2, #24
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800464c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004650:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8004652:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8004654:	4770      	bx	lr
{
 8004656:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004658:	b2d9      	uxtb	r1, r3
 800465a:	3910      	subs	r1, #16
 800465c:	4a0c      	ldr	r2, [pc, #48]	; (8004690 <DMA_CalcBaseAndBitshift+0xa8>)
 800465e:	fba2 4201 	umull	r4, r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004662:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004666:	4c0b      	ldr	r4, [pc, #44]	; (8004694 <DMA_CalcBaseAndBitshift+0xac>)
 8004668:	5ca2      	ldrb	r2, [r4, r2]
 800466a:	65c2      	str	r2, [r0, #92]	; 0x5c
    if (stream_number > 3U)
 800466c:	295f      	cmp	r1, #95	; 0x5f
 800466e:	d907      	bls.n	8004680 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004670:	4a09      	ldr	r2, [pc, #36]	; (8004698 <DMA_CalcBaseAndBitshift+0xb0>)
 8004672:	401a      	ands	r2, r3
 8004674:	3204      	adds	r2, #4
 8004676:	6582      	str	r2, [r0, #88]	; 0x58
}
 8004678:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800467a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800467e:	4770      	bx	lr
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004680:	4a05      	ldr	r2, [pc, #20]	; (8004698 <DMA_CalcBaseAndBitshift+0xb0>)
 8004682:	401a      	ands	r2, r3
 8004684:	6582      	str	r2, [r0, #88]	; 0x58
 8004686:	e7f7      	b.n	8004678 <DMA_CalcBaseAndBitshift+0x90>
 8004688:	40020010 	.word	0x40020010
 800468c:	40020028 	.word	0x40020028
 8004690:	aaaaaaab 	.word	0xaaaaaaab
 8004694:	0801bfa4 	.word	0x0801bfa4
 8004698:	fffffc00 	.word	0xfffffc00

0800469c <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800469c:	6983      	ldr	r3, [r0, #24]
 800469e:	b99b      	cbnz	r3, 80046c8 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 80046a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d00a      	beq.n	80046bc <DMA_CheckFifoParam+0x20>
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d002      	beq.n	80046b0 <DMA_CheckFifoParam+0x14>
 80046aa:	b10b      	cbz	r3, 80046b0 <DMA_CheckFifoParam+0x14>
 80046ac:	2000      	movs	r0, #0
 80046ae:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80046b2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80046b6:	d12a      	bne.n	800470e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80046b8:	2000      	movs	r0, #0
 80046ba:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80046be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046c2:	d026      	beq.n	8004712 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 80046c4:	2000      	movs	r0, #0
 80046c6:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046cc:	d00a      	beq.n	80046e4 <DMA_CheckFifoParam+0x48>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80046ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d926      	bls.n	8004722 <DMA_CheckFifoParam+0x86>
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d126      	bne.n	8004726 <DMA_CheckFifoParam+0x8a>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046d8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80046da:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80046de:	d124      	bne.n	800472a <DMA_CheckFifoParam+0x8e>
  HAL_StatusTypeDef status = HAL_OK;
 80046e0:	2000      	movs	r0, #0
 80046e2:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 80046e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d803      	bhi.n	80046f2 <DMA_CheckFifoParam+0x56>
 80046ea:	e8df f003 	tbb	[pc, r3]
 80046ee:	0414      	.short	0x0414
 80046f0:	0a14      	.short	0x0a14
 80046f2:	2000      	movs	r0, #0
 80046f4:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80046f8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80046fc:	d10d      	bne.n	800471a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80046fe:	2000      	movs	r0, #0
 8004700:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004702:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004704:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004708:	d009      	beq.n	800471e <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800470a:	2000      	movs	r0, #0
 800470c:	4770      	bx	lr
          status = HAL_ERROR;
 800470e:	2001      	movs	r0, #1
 8004710:	4770      	bx	lr
          status = HAL_ERROR;
 8004712:	2001      	movs	r0, #1
 8004714:	4770      	bx	lr
        status = HAL_ERROR;
 8004716:	2001      	movs	r0, #1
 8004718:	4770      	bx	lr
          status = HAL_ERROR;
 800471a:	2001      	movs	r0, #1
 800471c:	4770      	bx	lr
          status = HAL_ERROR;
 800471e:	2001      	movs	r0, #1
 8004720:	4770      	bx	lr
        status = HAL_ERROR;
 8004722:	2001      	movs	r0, #1
 8004724:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8004726:	2000      	movs	r0, #0
 8004728:	4770      	bx	lr
        {
          status = HAL_ERROR;
 800472a:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 800472c:	4770      	bx	lr
	...

08004730 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004730:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004732:	4922      	ldr	r1, [pc, #136]	; (80047bc <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004734:	4a22      	ldr	r2, [pc, #136]	; (80047c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8004736:	4293      	cmp	r3, r2
 8004738:	bf18      	it	ne
 800473a:	428b      	cmpne	r3, r1
 800473c:	d028      	beq.n	8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 800473e:	3214      	adds	r2, #20
 8004740:	4293      	cmp	r3, r2
 8004742:	d025      	beq.n	8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8004744:	3214      	adds	r2, #20
 8004746:	4293      	cmp	r3, r2
 8004748:	d022      	beq.n	8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 800474a:	3214      	adds	r2, #20
 800474c:	4293      	cmp	r3, r2
 800474e:	d01f      	beq.n	8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8004750:	3214      	adds	r2, #20
 8004752:	4293      	cmp	r3, r2
 8004754:	d01c      	beq.n	8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8004756:	3214      	adds	r2, #20
 8004758:	4293      	cmp	r3, r2
 800475a:	d019      	beq.n	8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 800475c:	3214      	adds	r2, #20
 800475e:	4293      	cmp	r3, r2
 8004760:	d016      	beq.n	8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004762:	b2da      	uxtb	r2, r3
 8004764:	3a10      	subs	r2, #16
 8004766:	4917      	ldr	r1, [pc, #92]	; (80047c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 8004768:	fba1 1202 	umull	r1, r2, r1, r2
 800476c:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800476e:	4916      	ldr	r1, [pc, #88]	; (80047c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 8004770:	4419      	add	r1, r3
 8004772:	29a8      	cmp	r1, #168	; 0xa8
 8004774:	d91f      	bls.n	80047b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x86>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004776:	4b15      	ldr	r3, [pc, #84]	; (80047cc <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800477e:	4b14      	ldr	r3, [pc, #80]	; (80047d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8004780:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004782:	f002 021f 	and.w	r2, r2, #31
 8004786:	2301      	movs	r3, #1
 8004788:	fa03 f202 	lsl.w	r2, r3, r2
 800478c:	6682      	str	r2, [r0, #104]	; 0x68
  }
}
 800478e:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004790:	b2db      	uxtb	r3, r3
 8004792:	3b08      	subs	r3, #8
 8004794:	4a0f      	ldr	r2, [pc, #60]	; (80047d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8004796:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800479a:	4a0f      	ldr	r2, [pc, #60]	; (80047d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 800479c:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 80047a0:	0092      	lsls	r2, r2, #2
 80047a2:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80047a4:	4a0d      	ldr	r2, [pc, #52]	; (80047dc <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 80047a6:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80047a8:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80047ac:	2201      	movs	r2, #1
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	6683      	str	r3, [r0, #104]	; 0x68
 80047b4:	4770      	bx	lr
      stream_number += 8U;
 80047b6:	3208      	adds	r2, #8
 80047b8:	e7dd      	b.n	8004776 <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 80047ba:	bf00      	nop
 80047bc:	58025408 	.word	0x58025408
 80047c0:	5802541c 	.word	0x5802541c
 80047c4:	aaaaaaab 	.word	0xaaaaaaab
 80047c8:	bffdfbf0 	.word	0xbffdfbf0
 80047cc:	10008200 	.word	0x10008200
 80047d0:	40020880 	.word	0x40020880
 80047d4:	cccccccd 	.word	0xcccccccd
 80047d8:	16009600 	.word	0x16009600
 80047dc:	58025880 	.word	0x58025880

080047e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047e0:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80047e2:	1e4a      	subs	r2, r1, #1
 80047e4:	2a07      	cmp	r2, #7
 80047e6:	d82c      	bhi.n	8004842 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x62>
{
 80047e8:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047ea:	6803      	ldr	r3, [r0, #0]
 80047ec:	4d15      	ldr	r5, [pc, #84]	; (8004844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 80047ee:	4c16      	ldr	r4, [pc, #88]	; (8004848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 80047f0:	42a3      	cmp	r3, r4
 80047f2:	bf18      	it	ne
 80047f4:	42ab      	cmpne	r3, r5
 80047f6:	d018      	beq.n	800482a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80047f8:	3414      	adds	r4, #20
 80047fa:	42a3      	cmp	r3, r4
 80047fc:	d015      	beq.n	800482a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 80047fe:	3414      	adds	r4, #20
 8004800:	42a3      	cmp	r3, r4
 8004802:	d012      	beq.n	800482a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004804:	3414      	adds	r4, #20
 8004806:	42a3      	cmp	r3, r4
 8004808:	d00f      	beq.n	800482a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 800480a:	3414      	adds	r4, #20
 800480c:	42a3      	cmp	r3, r4
 800480e:	d00c      	beq.n	800482a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004810:	3414      	adds	r4, #20
 8004812:	42a3      	cmp	r3, r4
 8004814:	d009      	beq.n	800482a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004816:	3414      	adds	r4, #20
 8004818:	42a3      	cmp	r3, r4
 800481a:	d006      	beq.n	800482a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 800481e:	440b      	add	r3, r1
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004824:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 8004826:	6703      	str	r3, [r0, #112]	; 0x70
 8004828:	e005      	b.n	8004836 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800482a:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 800482c:	440b      	add	r3, r1
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004832:	4b09      	ldr	r3, [pc, #36]	; (8004858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 8004834:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004836:	2301      	movs	r3, #1
 8004838:	fa03 f202 	lsl.w	r2, r3, r2
 800483c:	6742      	str	r2, [r0, #116]	; 0x74
  }
}
 800483e:	bc30      	pop	{r4, r5}
 8004840:	4770      	bx	lr
 8004842:	4770      	bx	lr
 8004844:	58025408 	.word	0x58025408
 8004848:	5802541c 	.word	0x5802541c
 800484c:	1000823f 	.word	0x1000823f
 8004850:	40020940 	.word	0x40020940
 8004854:	1600963f 	.word	0x1600963f
 8004858:	58025940 	.word	0x58025940

0800485c <HAL_DMA_Init>:
{
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004860:	f7fe ffca 	bl	80037f8 <HAL_GetTick>
  if(hdma == NULL)
 8004864:	2c00      	cmp	r4, #0
 8004866:	f000 81b6 	beq.w	8004bd6 <HAL_DMA_Init+0x37a>
 800486a:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	4953      	ldr	r1, [pc, #332]	; (80049bc <HAL_DMA_Init+0x160>)
 8004870:	4a53      	ldr	r2, [pc, #332]	; (80049c0 <HAL_DMA_Init+0x164>)
 8004872:	4293      	cmp	r3, r2
 8004874:	bf18      	it	ne
 8004876:	428b      	cmpne	r3, r1
 8004878:	bf0c      	ite	eq
 800487a:	2201      	moveq	r2, #1
 800487c:	2200      	movne	r2, #0
 800487e:	d050      	beq.n	8004922 <HAL_DMA_Init+0xc6>
 8004880:	3130      	adds	r1, #48	; 0x30
 8004882:	428b      	cmp	r3, r1
 8004884:	d04d      	beq.n	8004922 <HAL_DMA_Init+0xc6>
 8004886:	3118      	adds	r1, #24
 8004888:	428b      	cmp	r3, r1
 800488a:	d04a      	beq.n	8004922 <HAL_DMA_Init+0xc6>
 800488c:	3118      	adds	r1, #24
 800488e:	428b      	cmp	r3, r1
 8004890:	d047      	beq.n	8004922 <HAL_DMA_Init+0xc6>
 8004892:	3118      	adds	r1, #24
 8004894:	428b      	cmp	r3, r1
 8004896:	d044      	beq.n	8004922 <HAL_DMA_Init+0xc6>
 8004898:	3118      	adds	r1, #24
 800489a:	428b      	cmp	r3, r1
 800489c:	d041      	beq.n	8004922 <HAL_DMA_Init+0xc6>
 800489e:	3118      	adds	r1, #24
 80048a0:	428b      	cmp	r3, r1
 80048a2:	d03e      	beq.n	8004922 <HAL_DMA_Init+0xc6>
 80048a4:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80048a8:	428b      	cmp	r3, r1
 80048aa:	d03a      	beq.n	8004922 <HAL_DMA_Init+0xc6>
 80048ac:	3118      	adds	r1, #24
 80048ae:	428b      	cmp	r3, r1
 80048b0:	d037      	beq.n	8004922 <HAL_DMA_Init+0xc6>
 80048b2:	3118      	adds	r1, #24
 80048b4:	428b      	cmp	r3, r1
 80048b6:	d034      	beq.n	8004922 <HAL_DMA_Init+0xc6>
 80048b8:	3118      	adds	r1, #24
 80048ba:	428b      	cmp	r3, r1
 80048bc:	d031      	beq.n	8004922 <HAL_DMA_Init+0xc6>
 80048be:	3118      	adds	r1, #24
 80048c0:	428b      	cmp	r3, r1
 80048c2:	d02e      	beq.n	8004922 <HAL_DMA_Init+0xc6>
 80048c4:	3118      	adds	r1, #24
 80048c6:	428b      	cmp	r3, r1
 80048c8:	d02b      	beq.n	8004922 <HAL_DMA_Init+0xc6>
 80048ca:	3118      	adds	r1, #24
 80048cc:	428b      	cmp	r3, r1
 80048ce:	d028      	beq.n	8004922 <HAL_DMA_Init+0xc6>
 80048d0:	3118      	adds	r1, #24
 80048d2:	428b      	cmp	r3, r1
 80048d4:	d025      	beq.n	8004922 <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80048d6:	493b      	ldr	r1, [pc, #236]	; (80049c4 <HAL_DMA_Init+0x168>)
 80048d8:	4a3b      	ldr	r2, [pc, #236]	; (80049c8 <HAL_DMA_Init+0x16c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	bf18      	it	ne
 80048de:	428b      	cmpne	r3, r1
 80048e0:	f000 8131 	beq.w	8004b46 <HAL_DMA_Init+0x2ea>
 80048e4:	4a39      	ldr	r2, [pc, #228]	; (80049cc <HAL_DMA_Init+0x170>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	f000 812d 	beq.w	8004b46 <HAL_DMA_Init+0x2ea>
 80048ec:	3214      	adds	r2, #20
 80048ee:	4293      	cmp	r3, r2
 80048f0:	f000 8129 	beq.w	8004b46 <HAL_DMA_Init+0x2ea>
 80048f4:	3214      	adds	r2, #20
 80048f6:	4293      	cmp	r3, r2
 80048f8:	f000 8125 	beq.w	8004b46 <HAL_DMA_Init+0x2ea>
 80048fc:	3214      	adds	r2, #20
 80048fe:	4293      	cmp	r3, r2
 8004900:	f000 8121 	beq.w	8004b46 <HAL_DMA_Init+0x2ea>
 8004904:	3214      	adds	r2, #20
 8004906:	4293      	cmp	r3, r2
 8004908:	f000 811d 	beq.w	8004b46 <HAL_DMA_Init+0x2ea>
 800490c:	3214      	adds	r2, #20
 800490e:	4293      	cmp	r3, r2
 8004910:	f000 8119 	beq.w	8004b46 <HAL_DMA_Init+0x2ea>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004914:	2340      	movs	r3, #64	; 0x40
 8004916:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004918:	2303      	movs	r3, #3
 800491a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 800491e:	2001      	movs	r0, #1
 8004920:	e04a      	b.n	80049b8 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004922:	2102      	movs	r1, #2
 8004924:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8004928:	2100      	movs	r1, #0
 800492a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800492e:	bb7a      	cbnz	r2, 8004990 <HAL_DMA_Init+0x134>
 8004930:	4a27      	ldr	r2, [pc, #156]	; (80049d0 <HAL_DMA_Init+0x174>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d02c      	beq.n	8004990 <HAL_DMA_Init+0x134>
 8004936:	3218      	adds	r2, #24
 8004938:	4293      	cmp	r3, r2
 800493a:	d029      	beq.n	8004990 <HAL_DMA_Init+0x134>
 800493c:	3218      	adds	r2, #24
 800493e:	4293      	cmp	r3, r2
 8004940:	d026      	beq.n	8004990 <HAL_DMA_Init+0x134>
 8004942:	3218      	adds	r2, #24
 8004944:	4293      	cmp	r3, r2
 8004946:	d023      	beq.n	8004990 <HAL_DMA_Init+0x134>
 8004948:	3218      	adds	r2, #24
 800494a:	4293      	cmp	r3, r2
 800494c:	d020      	beq.n	8004990 <HAL_DMA_Init+0x134>
 800494e:	3218      	adds	r2, #24
 8004950:	4293      	cmp	r3, r2
 8004952:	d01d      	beq.n	8004990 <HAL_DMA_Init+0x134>
 8004954:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004958:	4293      	cmp	r3, r2
 800495a:	d019      	beq.n	8004990 <HAL_DMA_Init+0x134>
 800495c:	3218      	adds	r2, #24
 800495e:	4293      	cmp	r3, r2
 8004960:	d016      	beq.n	8004990 <HAL_DMA_Init+0x134>
 8004962:	3218      	adds	r2, #24
 8004964:	4293      	cmp	r3, r2
 8004966:	d013      	beq.n	8004990 <HAL_DMA_Init+0x134>
 8004968:	3218      	adds	r2, #24
 800496a:	4293      	cmp	r3, r2
 800496c:	d010      	beq.n	8004990 <HAL_DMA_Init+0x134>
 800496e:	3218      	adds	r2, #24
 8004970:	4293      	cmp	r3, r2
 8004972:	d00d      	beq.n	8004990 <HAL_DMA_Init+0x134>
 8004974:	3218      	adds	r2, #24
 8004976:	4293      	cmp	r3, r2
 8004978:	d00a      	beq.n	8004990 <HAL_DMA_Init+0x134>
 800497a:	3218      	adds	r2, #24
 800497c:	4293      	cmp	r3, r2
 800497e:	d007      	beq.n	8004990 <HAL_DMA_Init+0x134>
 8004980:	3218      	adds	r2, #24
 8004982:	4293      	cmp	r3, r2
 8004984:	d004      	beq.n	8004990 <HAL_DMA_Init+0x134>
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	f022 0201 	bic.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	e003      	b.n	8004998 <HAL_DMA_Init+0x13c>
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	f022 0201 	bic.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	f012 0f01 	tst.w	r2, #1
 80049a0:	d018      	beq.n	80049d4 <HAL_DMA_Init+0x178>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049a2:	f7fe ff29 	bl	80037f8 <HAL_GetTick>
 80049a6:	1b43      	subs	r3, r0, r5
 80049a8:	2b05      	cmp	r3, #5
 80049aa:	d9f5      	bls.n	8004998 <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049ac:	2320      	movs	r3, #32
 80049ae:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80049b0:	2303      	movs	r3, #3
 80049b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 80049b6:	2001      	movs	r0, #1
}
 80049b8:	bd70      	pop	{r4, r5, r6, pc}
 80049ba:	bf00      	nop
 80049bc:	40020010 	.word	0x40020010
 80049c0:	40020028 	.word	0x40020028
 80049c4:	58025408 	.word	0x58025408
 80049c8:	5802541c 	.word	0x5802541c
 80049cc:	58025430 	.word	0x58025430
 80049d0:	40020040 	.word	0x40020040
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80049d4:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049d6:	4881      	ldr	r0, [pc, #516]	; (8004bdc <HAL_DMA_Init+0x380>)
 80049d8:	4010      	ands	r0, r2
    registerValue |=  hdma->Init.Direction           |
 80049da:	68a1      	ldr	r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049dc:	68e2      	ldr	r2, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 80049de:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049e0:	6921      	ldr	r1, [r4, #16]
 80049e2:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049e4:	6961      	ldr	r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049e6:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049e8:	69a1      	ldr	r1, [r4, #24]
 80049ea:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 80049ec:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ee:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 80049f0:	6a21      	ldr	r1, [r4, #32]
 80049f2:	430a      	orrs	r2, r1
    registerValue |=  hdma->Init.Direction           |
 80049f4:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80049f8:	2904      	cmp	r1, #4
 80049fa:	f000 8099 	beq.w	8004b30 <HAL_DMA_Init+0x2d4>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80049fe:	4978      	ldr	r1, [pc, #480]	; (8004be0 <HAL_DMA_Init+0x384>)
 8004a00:	6808      	ldr	r0, [r1, #0]
 8004a02:	4978      	ldr	r1, [pc, #480]	; (8004be4 <HAL_DMA_Init+0x388>)
 8004a04:	4001      	ands	r1, r0
 8004a06:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004a0a:	d311      	bcc.n	8004a30 <HAL_DMA_Init+0x1d4>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004a0c:	6861      	ldr	r1, [r4, #4]
 8004a0e:	f1a1 0529 	sub.w	r5, r1, #41	; 0x29
 8004a12:	f1a1 003f 	sub.w	r0, r1, #63	; 0x3f
 8004a16:	2803      	cmp	r0, #3
 8004a18:	bf88      	it	hi
 8004a1a:	2d05      	cmphi	r5, #5
 8004a1c:	d906      	bls.n	8004a2c <HAL_DMA_Init+0x1d0>
 8004a1e:	f1a1 0047 	sub.w	r0, r1, #71	; 0x47
 8004a22:	2801      	cmp	r0, #1
 8004a24:	d902      	bls.n	8004a2c <HAL_DMA_Init+0x1d0>
 8004a26:	394f      	subs	r1, #79	; 0x4f
 8004a28:	2903      	cmp	r1, #3
 8004a2a:	d801      	bhi.n	8004a30 <HAL_DMA_Init+0x1d4>
        registerValue |= DMA_SxCR_TRBUFF;
 8004a2c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004a30:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004a32:	6826      	ldr	r6, [r4, #0]
 8004a34:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a36:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 8004a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a3c:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d108      	bne.n	8004a54 <HAL_DMA_Init+0x1f8>
      registerValue |= hdma->Init.FIFOThreshold;
 8004a42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a44:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004a48:	b123      	cbz	r3, 8004a54 <HAL_DMA_Init+0x1f8>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f7ff fe26 	bl	800469c <DMA_CheckFifoParam>
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d172      	bne.n	8004b3a <HAL_DMA_Init+0x2de>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004a54:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a56:	4620      	mov	r0, r4
 8004a58:	f7ff fdc6 	bl	80045e8 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a5c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a5e:	f003 021f 	and.w	r2, r3, #31
 8004a62:	233f      	movs	r3, #63	; 0x3f
 8004a64:	4093      	lsls	r3, r2
 8004a66:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	495f      	ldr	r1, [pc, #380]	; (8004be8 <HAL_DMA_Init+0x38c>)
 8004a6c:	4a5f      	ldr	r2, [pc, #380]	; (8004bec <HAL_DMA_Init+0x390>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	bf18      	it	ne
 8004a72:	428b      	cmpne	r3, r1
 8004a74:	d042      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004a76:	3218      	adds	r2, #24
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d03f      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004a7c:	3218      	adds	r2, #24
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d03c      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004a82:	3218      	adds	r2, #24
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d039      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004a88:	3218      	adds	r2, #24
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d036      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004a8e:	3218      	adds	r2, #24
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d033      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004a94:	3218      	adds	r2, #24
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d030      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004a9a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d02c      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004aa2:	3218      	adds	r2, #24
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d029      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004aa8:	3218      	adds	r2, #24
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d026      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004aae:	3218      	adds	r2, #24
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d023      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004ab4:	3218      	adds	r2, #24
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d020      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004aba:	3218      	adds	r2, #24
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d01d      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004ac0:	3218      	adds	r2, #24
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d01a      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004ac6:	3218      	adds	r2, #24
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d017      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004acc:	4a48      	ldr	r2, [pc, #288]	; (8004bf0 <HAL_DMA_Init+0x394>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d014      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004ad2:	3214      	adds	r2, #20
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d011      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004ad8:	3214      	adds	r2, #20
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00e      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004ade:	3214      	adds	r2, #20
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00b      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004ae4:	3214      	adds	r2, #20
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d008      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004aea:	3214      	adds	r2, #20
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d005      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004af0:	3214      	adds	r2, #20
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d002      	beq.n	8004afc <HAL_DMA_Init+0x2a0>
 8004af6:	3214      	adds	r2, #20
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d113      	bne.n	8004b24 <HAL_DMA_Init+0x2c8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004afc:	4620      	mov	r0, r4
 8004afe:	f7ff fe17 	bl	8004730 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b02:	68a3      	ldr	r3, [r4, #8]
 8004b04:	2b80      	cmp	r3, #128	; 0x80
 8004b06:	d059      	beq.n	8004bbc <HAL_DMA_Init+0x360>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b08:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004b0a:	7922      	ldrb	r2, [r4, #4]
 8004b0c:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b10:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8004b12:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004b14:	6863      	ldr	r3, [r4, #4]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	2b07      	cmp	r3, #7
 8004b1a:	d952      	bls.n	8004bc2 <HAL_DMA_Init+0x366>
      hdma->DMAmuxRequestGen = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004b20:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b22:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b24:	2000      	movs	r0, #0
 8004b26:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8004b2e:	e743      	b.n	80049b8 <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b30:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004b32:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004b34:	4301      	orrs	r1, r0
 8004b36:	430a      	orrs	r2, r1
 8004b38:	e761      	b.n	80049fe <HAL_DMA_Init+0x1a2>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b3a:	2340      	movs	r3, #64	; 0x40
 8004b3c:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8004b3e:	2001      	movs	r0, #1
 8004b40:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 8004b44:	e738      	b.n	80049b8 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b46:	2202      	movs	r2, #2
 8004b48:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004b52:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004b54:	4927      	ldr	r1, [pc, #156]	; (8004bf4 <HAL_DMA_Init+0x398>)
 8004b56:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b58:	68a2      	ldr	r2, [r4, #8]
 8004b5a:	2a40      	cmp	r2, #64	; 0x40
 8004b5c:	d02c      	beq.n	8004bb8 <HAL_DMA_Init+0x35c>
 8004b5e:	2a80      	cmp	r2, #128	; 0x80
 8004b60:	d027      	beq.n	8004bb2 <HAL_DMA_Init+0x356>
 8004b62:	2200      	movs	r2, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b64:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b66:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b6a:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b6c:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b70:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b72:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b76:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b78:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b7c:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b7e:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004b82:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b84:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b88:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004b8a:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004b8c:	6822      	ldr	r2, [r4, #0]
 8004b8e:	4b1a      	ldr	r3, [pc, #104]	; (8004bf8 <HAL_DMA_Init+0x39c>)
 8004b90:	4413      	add	r3, r2
 8004b92:	4a1a      	ldr	r2, [pc, #104]	; (8004bfc <HAL_DMA_Init+0x3a0>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	091b      	lsrs	r3, r3, #4
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	f7ff fd22 	bl	80045e8 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ba4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004ba6:	f002 011f 	and.w	r1, r2, #31
 8004baa:	2201      	movs	r2, #1
 8004bac:	408a      	lsls	r2, r1
 8004bae:	6042      	str	r2, [r0, #4]
 8004bb0:	e75a      	b.n	8004a68 <HAL_DMA_Init+0x20c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004bb6:	e7d5      	b.n	8004b64 <HAL_DMA_Init+0x308>
 8004bb8:	2210      	movs	r2, #16
 8004bba:	e7d3      	b.n	8004b64 <HAL_DMA_Init+0x308>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	6063      	str	r3, [r4, #4]
 8004bc0:	e7a2      	b.n	8004b08 <HAL_DMA_Init+0x2ac>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	f7ff fe0c 	bl	80047e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004bc8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004bd0:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8004bd2:	605a      	str	r2, [r3, #4]
 8004bd4:	e7a6      	b.n	8004b24 <HAL_DMA_Init+0x2c8>
    return HAL_ERROR;
 8004bd6:	2001      	movs	r0, #1
 8004bd8:	e6ee      	b.n	80049b8 <HAL_DMA_Init+0x15c>
 8004bda:	bf00      	nop
 8004bdc:	fe10803f 	.word	0xfe10803f
 8004be0:	5c001000 	.word	0x5c001000
 8004be4:	ffff0000 	.word	0xffff0000
 8004be8:	40020010 	.word	0x40020010
 8004bec:	40020028 	.word	0x40020028
 8004bf0:	58025408 	.word	0x58025408
 8004bf4:	fffe000f 	.word	0xfffe000f
 8004bf8:	a7fdabf8 	.word	0xa7fdabf8
 8004bfc:	cccccccd 	.word	0xcccccccd

08004c00 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8004c00:	2800      	cmp	r0, #0
 8004c02:	f000 813e 	beq.w	8004e82 <HAL_DMA_Start_IT+0x282>
{
 8004c06:	b570      	push	{r4, r5, r6, lr}
 8004c08:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004c0a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004c0e:	2801      	cmp	r0, #1
 8004c10:	f000 8139 	beq.w	8004e86 <HAL_DMA_Start_IT+0x286>
 8004c14:	2001      	movs	r0, #1
 8004c16:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c1a:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8004c1e:	b2c0      	uxtb	r0, r0
 8004c20:	2801      	cmp	r0, #1
 8004c22:	d007      	beq.n	8004c34 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004c24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c28:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
 8004c30:	2001      	movs	r0, #1
}
 8004c32:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c34:	2002      	movs	r0, #2
 8004c36:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8004c3e:	6820      	ldr	r0, [r4, #0]
 8004c40:	4e92      	ldr	r6, [pc, #584]	; (8004e8c <HAL_DMA_Start_IT+0x28c>)
 8004c42:	4d93      	ldr	r5, [pc, #588]	; (8004e90 <HAL_DMA_Start_IT+0x290>)
 8004c44:	42a8      	cmp	r0, r5
 8004c46:	bf18      	it	ne
 8004c48:	42b0      	cmpne	r0, r6
 8004c4a:	d02f      	beq.n	8004cac <HAL_DMA_Start_IT+0xac>
 8004c4c:	3518      	adds	r5, #24
 8004c4e:	42a8      	cmp	r0, r5
 8004c50:	d02c      	beq.n	8004cac <HAL_DMA_Start_IT+0xac>
 8004c52:	3518      	adds	r5, #24
 8004c54:	42a8      	cmp	r0, r5
 8004c56:	d029      	beq.n	8004cac <HAL_DMA_Start_IT+0xac>
 8004c58:	3518      	adds	r5, #24
 8004c5a:	42a8      	cmp	r0, r5
 8004c5c:	d026      	beq.n	8004cac <HAL_DMA_Start_IT+0xac>
 8004c5e:	3518      	adds	r5, #24
 8004c60:	42a8      	cmp	r0, r5
 8004c62:	d023      	beq.n	8004cac <HAL_DMA_Start_IT+0xac>
 8004c64:	3518      	adds	r5, #24
 8004c66:	42a8      	cmp	r0, r5
 8004c68:	d020      	beq.n	8004cac <HAL_DMA_Start_IT+0xac>
 8004c6a:	3518      	adds	r5, #24
 8004c6c:	42a8      	cmp	r0, r5
 8004c6e:	d01d      	beq.n	8004cac <HAL_DMA_Start_IT+0xac>
 8004c70:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8004c74:	42a8      	cmp	r0, r5
 8004c76:	d019      	beq.n	8004cac <HAL_DMA_Start_IT+0xac>
 8004c78:	3518      	adds	r5, #24
 8004c7a:	42a8      	cmp	r0, r5
 8004c7c:	d016      	beq.n	8004cac <HAL_DMA_Start_IT+0xac>
 8004c7e:	3518      	adds	r5, #24
 8004c80:	42a8      	cmp	r0, r5
 8004c82:	d013      	beq.n	8004cac <HAL_DMA_Start_IT+0xac>
 8004c84:	3518      	adds	r5, #24
 8004c86:	42a8      	cmp	r0, r5
 8004c88:	d010      	beq.n	8004cac <HAL_DMA_Start_IT+0xac>
 8004c8a:	3518      	adds	r5, #24
 8004c8c:	42a8      	cmp	r0, r5
 8004c8e:	d00d      	beq.n	8004cac <HAL_DMA_Start_IT+0xac>
 8004c90:	3518      	adds	r5, #24
 8004c92:	42a8      	cmp	r0, r5
 8004c94:	d00a      	beq.n	8004cac <HAL_DMA_Start_IT+0xac>
 8004c96:	3518      	adds	r5, #24
 8004c98:	42a8      	cmp	r0, r5
 8004c9a:	d007      	beq.n	8004cac <HAL_DMA_Start_IT+0xac>
 8004c9c:	3518      	adds	r5, #24
 8004c9e:	42a8      	cmp	r0, r5
 8004ca0:	d004      	beq.n	8004cac <HAL_DMA_Start_IT+0xac>
 8004ca2:	6805      	ldr	r5, [r0, #0]
 8004ca4:	f025 0501 	bic.w	r5, r5, #1
 8004ca8:	6005      	str	r5, [r0, #0]
 8004caa:	e003      	b.n	8004cb4 <HAL_DMA_Start_IT+0xb4>
 8004cac:	6805      	ldr	r5, [r0, #0]
 8004cae:	f025 0501 	bic.w	r5, r5, #1
 8004cb2:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f7ff fbbd 	bl	8004434 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	4973      	ldr	r1, [pc, #460]	; (8004e8c <HAL_DMA_Start_IT+0x28c>)
 8004cbe:	4a74      	ldr	r2, [pc, #464]	; (8004e90 <HAL_DMA_Start_IT+0x290>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	bf18      	it	ne
 8004cc4:	428b      	cmpne	r3, r1
 8004cc6:	d038      	beq.n	8004d3a <HAL_DMA_Start_IT+0x13a>
 8004cc8:	3218      	adds	r2, #24
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d035      	beq.n	8004d3a <HAL_DMA_Start_IT+0x13a>
 8004cce:	3218      	adds	r2, #24
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d032      	beq.n	8004d3a <HAL_DMA_Start_IT+0x13a>
 8004cd4:	3218      	adds	r2, #24
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d02f      	beq.n	8004d3a <HAL_DMA_Start_IT+0x13a>
 8004cda:	3218      	adds	r2, #24
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d02c      	beq.n	8004d3a <HAL_DMA_Start_IT+0x13a>
 8004ce0:	3218      	adds	r2, #24
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d029      	beq.n	8004d3a <HAL_DMA_Start_IT+0x13a>
 8004ce6:	3218      	adds	r2, #24
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d026      	beq.n	8004d3a <HAL_DMA_Start_IT+0x13a>
 8004cec:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d022      	beq.n	8004d3a <HAL_DMA_Start_IT+0x13a>
 8004cf4:	3218      	adds	r2, #24
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d01f      	beq.n	8004d3a <HAL_DMA_Start_IT+0x13a>
 8004cfa:	3218      	adds	r2, #24
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d01c      	beq.n	8004d3a <HAL_DMA_Start_IT+0x13a>
 8004d00:	3218      	adds	r2, #24
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d019      	beq.n	8004d3a <HAL_DMA_Start_IT+0x13a>
 8004d06:	3218      	adds	r2, #24
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d016      	beq.n	8004d3a <HAL_DMA_Start_IT+0x13a>
 8004d0c:	3218      	adds	r2, #24
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d013      	beq.n	8004d3a <HAL_DMA_Start_IT+0x13a>
 8004d12:	3218      	adds	r2, #24
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d010      	beq.n	8004d3a <HAL_DMA_Start_IT+0x13a>
 8004d18:	3218      	adds	r2, #24
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00d      	beq.n	8004d3a <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	f022 020e 	bic.w	r2, r2, #14
 8004d24:	f042 020a 	orr.w	r2, r2, #10
 8004d28:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004d2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d2c:	b193      	cbz	r3, 8004d54 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004d2e:	6822      	ldr	r2, [r4, #0]
 8004d30:	6813      	ldr	r3, [r2, #0]
 8004d32:	f043 0304 	orr.w	r3, r3, #4
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	e00c      	b.n	8004d54 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	f022 021e 	bic.w	r2, r2, #30
 8004d40:	f042 0216 	orr.w	r2, r2, #22
 8004d44:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004d46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d48:	b123      	cbz	r3, 8004d54 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004d4a:	6822      	ldr	r2, [r4, #0]
 8004d4c:	6813      	ldr	r3, [r2, #0]
 8004d4e:	f043 0308 	orr.w	r3, r3, #8
 8004d52:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	494d      	ldr	r1, [pc, #308]	; (8004e8c <HAL_DMA_Start_IT+0x28c>)
 8004d58:	4a4d      	ldr	r2, [pc, #308]	; (8004e90 <HAL_DMA_Start_IT+0x290>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	bf18      	it	ne
 8004d5e:	428b      	cmpne	r3, r1
 8004d60:	d042      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004d62:	3218      	adds	r2, #24
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d03f      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004d68:	3218      	adds	r2, #24
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d03c      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004d6e:	3218      	adds	r2, #24
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d039      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004d74:	3218      	adds	r2, #24
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d036      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004d7a:	3218      	adds	r2, #24
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d033      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004d80:	3218      	adds	r2, #24
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d030      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004d86:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d02c      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004d8e:	3218      	adds	r2, #24
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d029      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004d94:	3218      	adds	r2, #24
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d026      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004d9a:	3218      	adds	r2, #24
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d023      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004da0:	3218      	adds	r2, #24
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d020      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004da6:	3218      	adds	r2, #24
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d01d      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004dac:	3218      	adds	r2, #24
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d01a      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004db2:	3218      	adds	r2, #24
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d017      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004db8:	4a36      	ldr	r2, [pc, #216]	; (8004e94 <HAL_DMA_Start_IT+0x294>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d014      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004dbe:	3214      	adds	r2, #20
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d011      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004dc4:	3214      	adds	r2, #20
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00e      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004dca:	3214      	adds	r2, #20
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d00b      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004dd0:	3214      	adds	r2, #20
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d008      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004dd6:	3214      	adds	r2, #20
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d005      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004ddc:	3214      	adds	r2, #20
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d002      	beq.n	8004de8 <HAL_DMA_Start_IT+0x1e8>
 8004de2:	3214      	adds	r2, #20
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d10e      	bne.n	8004e06 <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004de8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004df0:	d003      	beq.n	8004dfa <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004df8:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8004dfa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004dfc:	b11b      	cbz	r3, 8004e06 <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e04:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	4920      	ldr	r1, [pc, #128]	; (8004e8c <HAL_DMA_Start_IT+0x28c>)
 8004e0a:	4a21      	ldr	r2, [pc, #132]	; (8004e90 <HAL_DMA_Start_IT+0x290>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	bf18      	it	ne
 8004e10:	428b      	cmpne	r3, r1
 8004e12:	d030      	beq.n	8004e76 <HAL_DMA_Start_IT+0x276>
 8004e14:	3218      	adds	r2, #24
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d02d      	beq.n	8004e76 <HAL_DMA_Start_IT+0x276>
 8004e1a:	3218      	adds	r2, #24
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d02a      	beq.n	8004e76 <HAL_DMA_Start_IT+0x276>
 8004e20:	3218      	adds	r2, #24
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d027      	beq.n	8004e76 <HAL_DMA_Start_IT+0x276>
 8004e26:	3218      	adds	r2, #24
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d024      	beq.n	8004e76 <HAL_DMA_Start_IT+0x276>
 8004e2c:	3218      	adds	r2, #24
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d021      	beq.n	8004e76 <HAL_DMA_Start_IT+0x276>
 8004e32:	3218      	adds	r2, #24
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d01e      	beq.n	8004e76 <HAL_DMA_Start_IT+0x276>
 8004e38:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d01a      	beq.n	8004e76 <HAL_DMA_Start_IT+0x276>
 8004e40:	3218      	adds	r2, #24
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d017      	beq.n	8004e76 <HAL_DMA_Start_IT+0x276>
 8004e46:	3218      	adds	r2, #24
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d014      	beq.n	8004e76 <HAL_DMA_Start_IT+0x276>
 8004e4c:	3218      	adds	r2, #24
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d011      	beq.n	8004e76 <HAL_DMA_Start_IT+0x276>
 8004e52:	3218      	adds	r2, #24
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00e      	beq.n	8004e76 <HAL_DMA_Start_IT+0x276>
 8004e58:	3218      	adds	r2, #24
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00b      	beq.n	8004e76 <HAL_DMA_Start_IT+0x276>
 8004e5e:	3218      	adds	r2, #24
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d008      	beq.n	8004e76 <HAL_DMA_Start_IT+0x276>
 8004e64:	3218      	adds	r2, #24
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d005      	beq.n	8004e76 <HAL_DMA_Start_IT+0x276>
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	f042 0201 	orr.w	r2, r2, #1
 8004e70:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e72:	2000      	movs	r0, #0
 8004e74:	e6dd      	b.n	8004c32 <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	f042 0201 	orr.w	r2, r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004e80:	e6d7      	b.n	8004c32 <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 8004e82:	2001      	movs	r0, #1
}
 8004e84:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8004e86:	2002      	movs	r0, #2
 8004e88:	e6d3      	b.n	8004c32 <HAL_DMA_Start_IT+0x32>
 8004e8a:	bf00      	nop
 8004e8c:	40020010 	.word	0x40020010
 8004e90:	40020028 	.word	0x40020028
 8004e94:	58025408 	.word	0x58025408

08004e98 <HAL_DMA_Abort>:
{
 8004e98:	b570      	push	{r4, r5, r6, lr}
 8004e9a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004e9c:	f7fe fcac 	bl	80037f8 <HAL_GetTick>
  if(hdma == NULL)
 8004ea0:	2c00      	cmp	r4, #0
 8004ea2:	f000 8191 	beq.w	80051c8 <HAL_DMA_Abort+0x330>
 8004ea6:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ea8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d006      	beq.n	8004ec0 <HAL_DMA_Abort+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004eb2:	2380      	movs	r3, #128	; 0x80
 8004eb4:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8004ebc:	2001      	movs	r0, #1
}
 8004ebe:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	498c      	ldr	r1, [pc, #560]	; (80050f4 <HAL_DMA_Abort+0x25c>)
 8004ec4:	4a8c      	ldr	r2, [pc, #560]	; (80050f8 <HAL_DMA_Abort+0x260>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	bf18      	it	ne
 8004eca:	428b      	cmpne	r3, r1
 8004ecc:	d030      	beq.n	8004f30 <HAL_DMA_Abort+0x98>
 8004ece:	3218      	adds	r2, #24
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d02d      	beq.n	8004f30 <HAL_DMA_Abort+0x98>
 8004ed4:	3218      	adds	r2, #24
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d02a      	beq.n	8004f30 <HAL_DMA_Abort+0x98>
 8004eda:	3218      	adds	r2, #24
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d027      	beq.n	8004f30 <HAL_DMA_Abort+0x98>
 8004ee0:	3218      	adds	r2, #24
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d024      	beq.n	8004f30 <HAL_DMA_Abort+0x98>
 8004ee6:	3218      	adds	r2, #24
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d021      	beq.n	8004f30 <HAL_DMA_Abort+0x98>
 8004eec:	3218      	adds	r2, #24
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d01e      	beq.n	8004f30 <HAL_DMA_Abort+0x98>
 8004ef2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d01a      	beq.n	8004f30 <HAL_DMA_Abort+0x98>
 8004efa:	3218      	adds	r2, #24
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d017      	beq.n	8004f30 <HAL_DMA_Abort+0x98>
 8004f00:	3218      	adds	r2, #24
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d014      	beq.n	8004f30 <HAL_DMA_Abort+0x98>
 8004f06:	3218      	adds	r2, #24
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d011      	beq.n	8004f30 <HAL_DMA_Abort+0x98>
 8004f0c:	3218      	adds	r2, #24
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00e      	beq.n	8004f30 <HAL_DMA_Abort+0x98>
 8004f12:	3218      	adds	r2, #24
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00b      	beq.n	8004f30 <HAL_DMA_Abort+0x98>
 8004f18:	3218      	adds	r2, #24
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d008      	beq.n	8004f30 <HAL_DMA_Abort+0x98>
 8004f1e:	3218      	adds	r2, #24
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d005      	beq.n	8004f30 <HAL_DMA_Abort+0x98>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	f022 020e 	bic.w	r2, r2, #14
 8004f2a:	601a      	str	r2, [r3, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004f2c:	6826      	ldr	r6, [r4, #0]
 8004f2e:	e009      	b.n	8004f44 <HAL_DMA_Abort+0xac>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	f022 021e 	bic.w	r2, r2, #30
 8004f36:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f38:	6822      	ldr	r2, [r4, #0]
 8004f3a:	6953      	ldr	r3, [r2, #20]
 8004f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f40:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004f42:	6826      	ldr	r6, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	496b      	ldr	r1, [pc, #428]	; (80050f4 <HAL_DMA_Abort+0x25c>)
 8004f48:	4a6b      	ldr	r2, [pc, #428]	; (80050f8 <HAL_DMA_Abort+0x260>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	bf18      	it	ne
 8004f4e:	428b      	cmpne	r3, r1
 8004f50:	d042      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004f52:	3218      	adds	r2, #24
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d03f      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004f58:	3218      	adds	r2, #24
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d03c      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004f5e:	3218      	adds	r2, #24
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d039      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004f64:	3218      	adds	r2, #24
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d036      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004f6a:	3218      	adds	r2, #24
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d033      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004f70:	3218      	adds	r2, #24
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d030      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004f76:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d02c      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004f7e:	3218      	adds	r2, #24
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d029      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004f84:	3218      	adds	r2, #24
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d026      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004f8a:	3218      	adds	r2, #24
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d023      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004f90:	3218      	adds	r2, #24
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d020      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004f96:	3218      	adds	r2, #24
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d01d      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004f9c:	3218      	adds	r2, #24
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d01a      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004fa2:	3218      	adds	r2, #24
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d017      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004fa8:	4a54      	ldr	r2, [pc, #336]	; (80050fc <HAL_DMA_Abort+0x264>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d014      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004fae:	3214      	adds	r2, #20
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d011      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004fb4:	3214      	adds	r2, #20
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00e      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004fba:	3214      	adds	r2, #20
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00b      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004fc0:	3214      	adds	r2, #20
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d008      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004fc6:	3214      	adds	r2, #20
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d005      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004fcc:	3214      	adds	r2, #20
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d002      	beq.n	8004fd8 <HAL_DMA_Abort+0x140>
 8004fd2:	3214      	adds	r2, #20
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d104      	bne.n	8004fe2 <HAL_DMA_Abort+0x14a>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fd8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004fda:	6813      	ldr	r3, [r2, #0]
 8004fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fe0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	4943      	ldr	r1, [pc, #268]	; (80050f4 <HAL_DMA_Abort+0x25c>)
 8004fe6:	4a44      	ldr	r2, [pc, #272]	; (80050f8 <HAL_DMA_Abort+0x260>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	bf18      	it	ne
 8004fec:	428b      	cmpne	r3, r1
 8004fee:	d02f      	beq.n	8005050 <HAL_DMA_Abort+0x1b8>
 8004ff0:	3218      	adds	r2, #24
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d02c      	beq.n	8005050 <HAL_DMA_Abort+0x1b8>
 8004ff6:	3218      	adds	r2, #24
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d029      	beq.n	8005050 <HAL_DMA_Abort+0x1b8>
 8004ffc:	3218      	adds	r2, #24
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d026      	beq.n	8005050 <HAL_DMA_Abort+0x1b8>
 8005002:	3218      	adds	r2, #24
 8005004:	4293      	cmp	r3, r2
 8005006:	d023      	beq.n	8005050 <HAL_DMA_Abort+0x1b8>
 8005008:	3218      	adds	r2, #24
 800500a:	4293      	cmp	r3, r2
 800500c:	d020      	beq.n	8005050 <HAL_DMA_Abort+0x1b8>
 800500e:	3218      	adds	r2, #24
 8005010:	4293      	cmp	r3, r2
 8005012:	d01d      	beq.n	8005050 <HAL_DMA_Abort+0x1b8>
 8005014:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005018:	4293      	cmp	r3, r2
 800501a:	d019      	beq.n	8005050 <HAL_DMA_Abort+0x1b8>
 800501c:	3218      	adds	r2, #24
 800501e:	4293      	cmp	r3, r2
 8005020:	d016      	beq.n	8005050 <HAL_DMA_Abort+0x1b8>
 8005022:	3218      	adds	r2, #24
 8005024:	4293      	cmp	r3, r2
 8005026:	d013      	beq.n	8005050 <HAL_DMA_Abort+0x1b8>
 8005028:	3218      	adds	r2, #24
 800502a:	4293      	cmp	r3, r2
 800502c:	d010      	beq.n	8005050 <HAL_DMA_Abort+0x1b8>
 800502e:	3218      	adds	r2, #24
 8005030:	4293      	cmp	r3, r2
 8005032:	d00d      	beq.n	8005050 <HAL_DMA_Abort+0x1b8>
 8005034:	3218      	adds	r2, #24
 8005036:	4293      	cmp	r3, r2
 8005038:	d00a      	beq.n	8005050 <HAL_DMA_Abort+0x1b8>
 800503a:	3218      	adds	r2, #24
 800503c:	4293      	cmp	r3, r2
 800503e:	d007      	beq.n	8005050 <HAL_DMA_Abort+0x1b8>
 8005040:	3218      	adds	r2, #24
 8005042:	4293      	cmp	r3, r2
 8005044:	d004      	beq.n	8005050 <HAL_DMA_Abort+0x1b8>
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	f022 0201 	bic.w	r2, r2, #1
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	e003      	b.n	8005058 <HAL_DMA_Abort+0x1c0>
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	f022 0201 	bic.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005058:	6833      	ldr	r3, [r6, #0]
 800505a:	f013 0f01 	tst.w	r3, #1
 800505e:	d00e      	beq.n	800507e <HAL_DMA_Abort+0x1e6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005060:	f7fe fbca 	bl	80037f8 <HAL_GetTick>
 8005064:	1b43      	subs	r3, r0, r5
 8005066:	2b05      	cmp	r3, #5
 8005068:	d9f6      	bls.n	8005058 <HAL_DMA_Abort+0x1c0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800506a:	2320      	movs	r3, #32
 800506c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800506e:	2303      	movs	r3, #3
 8005070:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8005074:	2300      	movs	r3, #0
 8005076:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_ERROR;
 800507a:	2001      	movs	r0, #1
 800507c:	e71f      	b.n	8004ebe <HAL_DMA_Abort+0x26>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	491c      	ldr	r1, [pc, #112]	; (80050f4 <HAL_DMA_Abort+0x25c>)
 8005082:	4a1d      	ldr	r2, [pc, #116]	; (80050f8 <HAL_DMA_Abort+0x260>)
 8005084:	4293      	cmp	r3, r2
 8005086:	bf18      	it	ne
 8005088:	428b      	cmpne	r3, r1
 800508a:	d039      	beq.n	8005100 <HAL_DMA_Abort+0x268>
 800508c:	3218      	adds	r2, #24
 800508e:	4293      	cmp	r3, r2
 8005090:	d036      	beq.n	8005100 <HAL_DMA_Abort+0x268>
 8005092:	3218      	adds	r2, #24
 8005094:	4293      	cmp	r3, r2
 8005096:	d033      	beq.n	8005100 <HAL_DMA_Abort+0x268>
 8005098:	3218      	adds	r2, #24
 800509a:	4293      	cmp	r3, r2
 800509c:	d030      	beq.n	8005100 <HAL_DMA_Abort+0x268>
 800509e:	3218      	adds	r2, #24
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d02d      	beq.n	8005100 <HAL_DMA_Abort+0x268>
 80050a4:	3218      	adds	r2, #24
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d02a      	beq.n	8005100 <HAL_DMA_Abort+0x268>
 80050aa:	3218      	adds	r2, #24
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d027      	beq.n	8005100 <HAL_DMA_Abort+0x268>
 80050b0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d023      	beq.n	8005100 <HAL_DMA_Abort+0x268>
 80050b8:	3218      	adds	r2, #24
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d020      	beq.n	8005100 <HAL_DMA_Abort+0x268>
 80050be:	3218      	adds	r2, #24
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d01d      	beq.n	8005100 <HAL_DMA_Abort+0x268>
 80050c4:	3218      	adds	r2, #24
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d01a      	beq.n	8005100 <HAL_DMA_Abort+0x268>
 80050ca:	3218      	adds	r2, #24
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d017      	beq.n	8005100 <HAL_DMA_Abort+0x268>
 80050d0:	3218      	adds	r2, #24
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d014      	beq.n	8005100 <HAL_DMA_Abort+0x268>
 80050d6:	3218      	adds	r2, #24
 80050d8:	4293      	cmp	r3, r2
 80050da:	d011      	beq.n	8005100 <HAL_DMA_Abort+0x268>
 80050dc:	3218      	adds	r2, #24
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00e      	beq.n	8005100 <HAL_DMA_Abort+0x268>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80050e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80050e6:	f003 021f 	and.w	r2, r3, #31
 80050ea:	2301      	movs	r3, #1
 80050ec:	4093      	lsls	r3, r2
 80050ee:	604b      	str	r3, [r1, #4]
 80050f0:	e00d      	b.n	800510e <HAL_DMA_Abort+0x276>
 80050f2:	bf00      	nop
 80050f4:	40020010 	.word	0x40020010
 80050f8:	40020028 	.word	0x40020028
 80050fc:	58025408 	.word	0x58025408
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005100:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005102:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005104:	f003 021f 	and.w	r2, r3, #31
 8005108:	233f      	movs	r3, #63	; 0x3f
 800510a:	4093      	lsls	r3, r2
 800510c:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	492e      	ldr	r1, [pc, #184]	; (80051cc <HAL_DMA_Abort+0x334>)
 8005112:	4a2f      	ldr	r2, [pc, #188]	; (80051d0 <HAL_DMA_Abort+0x338>)
 8005114:	4293      	cmp	r3, r2
 8005116:	bf18      	it	ne
 8005118:	428b      	cmpne	r3, r1
 800511a:	d042      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 800511c:	3218      	adds	r2, #24
 800511e:	4293      	cmp	r3, r2
 8005120:	d03f      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 8005122:	3218      	adds	r2, #24
 8005124:	4293      	cmp	r3, r2
 8005126:	d03c      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 8005128:	3218      	adds	r2, #24
 800512a:	4293      	cmp	r3, r2
 800512c:	d039      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 800512e:	3218      	adds	r2, #24
 8005130:	4293      	cmp	r3, r2
 8005132:	d036      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 8005134:	3218      	adds	r2, #24
 8005136:	4293      	cmp	r3, r2
 8005138:	d033      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 800513a:	3218      	adds	r2, #24
 800513c:	4293      	cmp	r3, r2
 800513e:	d030      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 8005140:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005144:	4293      	cmp	r3, r2
 8005146:	d02c      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 8005148:	3218      	adds	r2, #24
 800514a:	4293      	cmp	r3, r2
 800514c:	d029      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 800514e:	3218      	adds	r2, #24
 8005150:	4293      	cmp	r3, r2
 8005152:	d026      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 8005154:	3218      	adds	r2, #24
 8005156:	4293      	cmp	r3, r2
 8005158:	d023      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 800515a:	3218      	adds	r2, #24
 800515c:	4293      	cmp	r3, r2
 800515e:	d020      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 8005160:	3218      	adds	r2, #24
 8005162:	4293      	cmp	r3, r2
 8005164:	d01d      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 8005166:	3218      	adds	r2, #24
 8005168:	4293      	cmp	r3, r2
 800516a:	d01a      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 800516c:	3218      	adds	r2, #24
 800516e:	4293      	cmp	r3, r2
 8005170:	d017      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 8005172:	4a18      	ldr	r2, [pc, #96]	; (80051d4 <HAL_DMA_Abort+0x33c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d014      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 8005178:	3214      	adds	r2, #20
 800517a:	4293      	cmp	r3, r2
 800517c:	d011      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 800517e:	3214      	adds	r2, #20
 8005180:	4293      	cmp	r3, r2
 8005182:	d00e      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 8005184:	3214      	adds	r2, #20
 8005186:	4293      	cmp	r3, r2
 8005188:	d00b      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 800518a:	3214      	adds	r2, #20
 800518c:	4293      	cmp	r3, r2
 800518e:	d008      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 8005190:	3214      	adds	r2, #20
 8005192:	4293      	cmp	r3, r2
 8005194:	d005      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 8005196:	3214      	adds	r2, #20
 8005198:	4293      	cmp	r3, r2
 800519a:	d002      	beq.n	80051a2 <HAL_DMA_Abort+0x30a>
 800519c:	3214      	adds	r2, #20
 800519e:	4293      	cmp	r3, r2
 80051a0:	d10b      	bne.n	80051ba <HAL_DMA_Abort+0x322>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051a4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80051a6:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80051a8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80051aa:	b133      	cbz	r3, 80051ba <HAL_DMA_Abort+0x322>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051b2:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80051b6:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80051b8:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80051ba:	2301      	movs	r3, #1
 80051bc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80051c0:	2000      	movs	r0, #0
 80051c2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 80051c6:	e67a      	b.n	8004ebe <HAL_DMA_Abort+0x26>
    return HAL_ERROR;
 80051c8:	2001      	movs	r0, #1
 80051ca:	e678      	b.n	8004ebe <HAL_DMA_Abort+0x26>
 80051cc:	40020010 	.word	0x40020010
 80051d0:	40020028 	.word	0x40020028
 80051d4:	58025408 	.word	0x58025408

080051d8 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80051d8:	2800      	cmp	r0, #0
 80051da:	f000 8129 	beq.w	8005430 <HAL_DMA_Abort_IT+0x258>
{
 80051de:	b508      	push	{r3, lr}
 80051e0:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051e2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d003      	beq.n	80051f4 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051ec:	2380      	movs	r3, #128	; 0x80
 80051ee:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80051f0:	2001      	movs	r0, #1
}
 80051f2:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051f4:	6803      	ldr	r3, [r0, #0]
 80051f6:	4890      	ldr	r0, [pc, #576]	; (8005438 <HAL_DMA_Abort_IT+0x260>)
 80051f8:	4990      	ldr	r1, [pc, #576]	; (800543c <HAL_DMA_Abort_IT+0x264>)
 80051fa:	428b      	cmp	r3, r1
 80051fc:	bf18      	it	ne
 80051fe:	4283      	cmpne	r3, r0
 8005200:	bf0c      	ite	eq
 8005202:	2101      	moveq	r1, #1
 8005204:	2100      	movne	r1, #0
 8005206:	d066      	beq.n	80052d6 <HAL_DMA_Abort_IT+0xfe>
 8005208:	3030      	adds	r0, #48	; 0x30
 800520a:	4283      	cmp	r3, r0
 800520c:	d063      	beq.n	80052d6 <HAL_DMA_Abort_IT+0xfe>
 800520e:	3018      	adds	r0, #24
 8005210:	4283      	cmp	r3, r0
 8005212:	d060      	beq.n	80052d6 <HAL_DMA_Abort_IT+0xfe>
 8005214:	3018      	adds	r0, #24
 8005216:	4283      	cmp	r3, r0
 8005218:	d05d      	beq.n	80052d6 <HAL_DMA_Abort_IT+0xfe>
 800521a:	3018      	adds	r0, #24
 800521c:	4283      	cmp	r3, r0
 800521e:	d05a      	beq.n	80052d6 <HAL_DMA_Abort_IT+0xfe>
 8005220:	3018      	adds	r0, #24
 8005222:	4283      	cmp	r3, r0
 8005224:	d057      	beq.n	80052d6 <HAL_DMA_Abort_IT+0xfe>
 8005226:	3018      	adds	r0, #24
 8005228:	4283      	cmp	r3, r0
 800522a:	d054      	beq.n	80052d6 <HAL_DMA_Abort_IT+0xfe>
 800522c:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8005230:	4283      	cmp	r3, r0
 8005232:	d050      	beq.n	80052d6 <HAL_DMA_Abort_IT+0xfe>
 8005234:	3018      	adds	r0, #24
 8005236:	4283      	cmp	r3, r0
 8005238:	d04d      	beq.n	80052d6 <HAL_DMA_Abort_IT+0xfe>
 800523a:	3018      	adds	r0, #24
 800523c:	4283      	cmp	r3, r0
 800523e:	d04a      	beq.n	80052d6 <HAL_DMA_Abort_IT+0xfe>
 8005240:	3018      	adds	r0, #24
 8005242:	4283      	cmp	r3, r0
 8005244:	d047      	beq.n	80052d6 <HAL_DMA_Abort_IT+0xfe>
 8005246:	3018      	adds	r0, #24
 8005248:	4283      	cmp	r3, r0
 800524a:	d044      	beq.n	80052d6 <HAL_DMA_Abort_IT+0xfe>
 800524c:	3018      	adds	r0, #24
 800524e:	4283      	cmp	r3, r0
 8005250:	d041      	beq.n	80052d6 <HAL_DMA_Abort_IT+0xfe>
 8005252:	3018      	adds	r0, #24
 8005254:	4283      	cmp	r3, r0
 8005256:	d03e      	beq.n	80052d6 <HAL_DMA_Abort_IT+0xfe>
 8005258:	3018      	adds	r0, #24
 800525a:	4283      	cmp	r3, r0
 800525c:	d03b      	beq.n	80052d6 <HAL_DMA_Abort_IT+0xfe>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800525e:	6819      	ldr	r1, [r3, #0]
 8005260:	f021 010e 	bic.w	r1, r1, #14
 8005264:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8005266:	6813      	ldr	r3, [r2, #0]
 8005268:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 800526c:	4973      	ldr	r1, [pc, #460]	; (800543c <HAL_DMA_Abort_IT+0x264>)
 800526e:	428b      	cmp	r3, r1
 8005270:	bf18      	it	ne
 8005272:	4283      	cmpne	r3, r0
 8005274:	d06a      	beq.n	800534c <HAL_DMA_Abort_IT+0x174>
 8005276:	4972      	ldr	r1, [pc, #456]	; (8005440 <HAL_DMA_Abort_IT+0x268>)
 8005278:	428b      	cmp	r3, r1
 800527a:	d067      	beq.n	800534c <HAL_DMA_Abort_IT+0x174>
 800527c:	3118      	adds	r1, #24
 800527e:	428b      	cmp	r3, r1
 8005280:	d064      	beq.n	800534c <HAL_DMA_Abort_IT+0x174>
 8005282:	3118      	adds	r1, #24
 8005284:	428b      	cmp	r3, r1
 8005286:	d061      	beq.n	800534c <HAL_DMA_Abort_IT+0x174>
 8005288:	3118      	adds	r1, #24
 800528a:	428b      	cmp	r3, r1
 800528c:	d05e      	beq.n	800534c <HAL_DMA_Abort_IT+0x174>
 800528e:	3118      	adds	r1, #24
 8005290:	428b      	cmp	r3, r1
 8005292:	d05b      	beq.n	800534c <HAL_DMA_Abort_IT+0x174>
 8005294:	3118      	adds	r1, #24
 8005296:	428b      	cmp	r3, r1
 8005298:	d058      	beq.n	800534c <HAL_DMA_Abort_IT+0x174>
 800529a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800529e:	428b      	cmp	r3, r1
 80052a0:	d054      	beq.n	800534c <HAL_DMA_Abort_IT+0x174>
 80052a2:	3118      	adds	r1, #24
 80052a4:	428b      	cmp	r3, r1
 80052a6:	d051      	beq.n	800534c <HAL_DMA_Abort_IT+0x174>
 80052a8:	3118      	adds	r1, #24
 80052aa:	428b      	cmp	r3, r1
 80052ac:	d04e      	beq.n	800534c <HAL_DMA_Abort_IT+0x174>
 80052ae:	3118      	adds	r1, #24
 80052b0:	428b      	cmp	r3, r1
 80052b2:	d04b      	beq.n	800534c <HAL_DMA_Abort_IT+0x174>
 80052b4:	3118      	adds	r1, #24
 80052b6:	428b      	cmp	r3, r1
 80052b8:	d048      	beq.n	800534c <HAL_DMA_Abort_IT+0x174>
 80052ba:	3118      	adds	r1, #24
 80052bc:	428b      	cmp	r3, r1
 80052be:	d045      	beq.n	800534c <HAL_DMA_Abort_IT+0x174>
 80052c0:	3118      	adds	r1, #24
 80052c2:	428b      	cmp	r3, r1
 80052c4:	d042      	beq.n	800534c <HAL_DMA_Abort_IT+0x174>
 80052c6:	3118      	adds	r1, #24
 80052c8:	428b      	cmp	r3, r1
 80052ca:	d03f      	beq.n	800534c <HAL_DMA_Abort_IT+0x174>
 80052cc:	6819      	ldr	r1, [r3, #0]
 80052ce:	f021 0101 	bic.w	r1, r1, #1
 80052d2:	6019      	str	r1, [r3, #0]
 80052d4:	e03e      	b.n	8005354 <HAL_DMA_Abort_IT+0x17c>
      hdma->State = HAL_DMA_STATE_ABORT;
 80052d6:	2004      	movs	r0, #4
 80052d8:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80052dc:	bb81      	cbnz	r1, 8005340 <HAL_DMA_Abort_IT+0x168>
 80052de:	4a58      	ldr	r2, [pc, #352]	; (8005440 <HAL_DMA_Abort_IT+0x268>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d02d      	beq.n	8005340 <HAL_DMA_Abort_IT+0x168>
 80052e4:	3218      	adds	r2, #24
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d02a      	beq.n	8005340 <HAL_DMA_Abort_IT+0x168>
 80052ea:	3218      	adds	r2, #24
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d027      	beq.n	8005340 <HAL_DMA_Abort_IT+0x168>
 80052f0:	3218      	adds	r2, #24
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d024      	beq.n	8005340 <HAL_DMA_Abort_IT+0x168>
 80052f6:	3218      	adds	r2, #24
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d021      	beq.n	8005340 <HAL_DMA_Abort_IT+0x168>
 80052fc:	3218      	adds	r2, #24
 80052fe:	4293      	cmp	r3, r2
 8005300:	d01e      	beq.n	8005340 <HAL_DMA_Abort_IT+0x168>
 8005302:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005306:	4293      	cmp	r3, r2
 8005308:	d01a      	beq.n	8005340 <HAL_DMA_Abort_IT+0x168>
 800530a:	3218      	adds	r2, #24
 800530c:	4293      	cmp	r3, r2
 800530e:	d017      	beq.n	8005340 <HAL_DMA_Abort_IT+0x168>
 8005310:	3218      	adds	r2, #24
 8005312:	4293      	cmp	r3, r2
 8005314:	d014      	beq.n	8005340 <HAL_DMA_Abort_IT+0x168>
 8005316:	3218      	adds	r2, #24
 8005318:	4293      	cmp	r3, r2
 800531a:	d011      	beq.n	8005340 <HAL_DMA_Abort_IT+0x168>
 800531c:	3218      	adds	r2, #24
 800531e:	4293      	cmp	r3, r2
 8005320:	d00e      	beq.n	8005340 <HAL_DMA_Abort_IT+0x168>
 8005322:	3218      	adds	r2, #24
 8005324:	4293      	cmp	r3, r2
 8005326:	d00b      	beq.n	8005340 <HAL_DMA_Abort_IT+0x168>
 8005328:	3218      	adds	r2, #24
 800532a:	4293      	cmp	r3, r2
 800532c:	d008      	beq.n	8005340 <HAL_DMA_Abort_IT+0x168>
 800532e:	3218      	adds	r2, #24
 8005330:	4293      	cmp	r3, r2
 8005332:	d005      	beq.n	8005340 <HAL_DMA_Abort_IT+0x168>
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	f022 0201 	bic.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800533c:	2000      	movs	r0, #0
 800533e:	e758      	b.n	80051f2 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	f022 0201 	bic.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005348:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 800534a:	e752      	b.n	80051f2 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 800534c:	6819      	ldr	r1, [r3, #0]
 800534e:	f021 0101 	bic.w	r1, r1, #1
 8005352:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005354:	6813      	ldr	r3, [r2, #0]
 8005356:	4838      	ldr	r0, [pc, #224]	; (8005438 <HAL_DMA_Abort_IT+0x260>)
 8005358:	4938      	ldr	r1, [pc, #224]	; (800543c <HAL_DMA_Abort_IT+0x264>)
 800535a:	428b      	cmp	r3, r1
 800535c:	bf18      	it	ne
 800535e:	4283      	cmpne	r3, r0
 8005360:	d042      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 8005362:	3118      	adds	r1, #24
 8005364:	428b      	cmp	r3, r1
 8005366:	d03f      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 8005368:	3118      	adds	r1, #24
 800536a:	428b      	cmp	r3, r1
 800536c:	d03c      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 800536e:	3118      	adds	r1, #24
 8005370:	428b      	cmp	r3, r1
 8005372:	d039      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 8005374:	3118      	adds	r1, #24
 8005376:	428b      	cmp	r3, r1
 8005378:	d036      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 800537a:	3118      	adds	r1, #24
 800537c:	428b      	cmp	r3, r1
 800537e:	d033      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 8005380:	3118      	adds	r1, #24
 8005382:	428b      	cmp	r3, r1
 8005384:	d030      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 8005386:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800538a:	428b      	cmp	r3, r1
 800538c:	d02c      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 800538e:	3118      	adds	r1, #24
 8005390:	428b      	cmp	r3, r1
 8005392:	d029      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 8005394:	3118      	adds	r1, #24
 8005396:	428b      	cmp	r3, r1
 8005398:	d026      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 800539a:	3118      	adds	r1, #24
 800539c:	428b      	cmp	r3, r1
 800539e:	d023      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 80053a0:	3118      	adds	r1, #24
 80053a2:	428b      	cmp	r3, r1
 80053a4:	d020      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 80053a6:	3118      	adds	r1, #24
 80053a8:	428b      	cmp	r3, r1
 80053aa:	d01d      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 80053ac:	3118      	adds	r1, #24
 80053ae:	428b      	cmp	r3, r1
 80053b0:	d01a      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 80053b2:	3118      	adds	r1, #24
 80053b4:	428b      	cmp	r3, r1
 80053b6:	d017      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 80053b8:	4922      	ldr	r1, [pc, #136]	; (8005444 <HAL_DMA_Abort_IT+0x26c>)
 80053ba:	428b      	cmp	r3, r1
 80053bc:	d014      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 80053be:	3114      	adds	r1, #20
 80053c0:	428b      	cmp	r3, r1
 80053c2:	d011      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 80053c4:	3114      	adds	r1, #20
 80053c6:	428b      	cmp	r3, r1
 80053c8:	d00e      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 80053ca:	3114      	adds	r1, #20
 80053cc:	428b      	cmp	r3, r1
 80053ce:	d00b      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 80053d0:	3114      	adds	r1, #20
 80053d2:	428b      	cmp	r3, r1
 80053d4:	d008      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 80053d6:	3114      	adds	r1, #20
 80053d8:	428b      	cmp	r3, r1
 80053da:	d005      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 80053dc:	3114      	adds	r1, #20
 80053de:	428b      	cmp	r3, r1
 80053e0:	d002      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x210>
 80053e2:	3114      	adds	r1, #20
 80053e4:	428b      	cmp	r3, r1
 80053e6:	d117      	bne.n	8005418 <HAL_DMA_Abort_IT+0x240>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053e8:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80053ea:	680b      	ldr	r3, [r1, #0]
 80053ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053f0:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053f2:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80053f4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80053f6:	f003 011f 	and.w	r1, r3, #31
 80053fa:	2301      	movs	r3, #1
 80053fc:	408b      	lsls	r3, r1
 80053fe:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005400:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8005402:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8005404:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8005406:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8005408:	b133      	cbz	r3, 8005418 <HAL_DMA_Abort_IT+0x240>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800540a:	6819      	ldr	r1, [r3, #0]
 800540c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005410:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005412:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005414:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8005416:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8005418:	2301      	movs	r3, #1
 800541a:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800541e:	2300      	movs	r3, #0
 8005420:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8005424:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005426:	b12b      	cbz	r3, 8005434 <HAL_DMA_Abort_IT+0x25c>
        hdma->XferAbortCallback(hdma);
 8005428:	4610      	mov	r0, r2
 800542a:	4798      	blx	r3
  return HAL_OK;
 800542c:	2000      	movs	r0, #0
 800542e:	e6e0      	b.n	80051f2 <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 8005430:	2001      	movs	r0, #1
}
 8005432:	4770      	bx	lr
  return HAL_OK;
 8005434:	2000      	movs	r0, #0
 8005436:	e6dc      	b.n	80051f2 <HAL_DMA_Abort_IT+0x1a>
 8005438:	40020010 	.word	0x40020010
 800543c:	40020028 	.word	0x40020028
 8005440:	40020040 	.word	0x40020040
 8005444:	58025408 	.word	0x58025408

08005448 <HAL_DMA_IRQHandler>:
{
 8005448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800544a:	b083      	sub	sp, #12
 800544c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005452:	4b7d      	ldr	r3, [pc, #500]	; (8005648 <HAL_DMA_IRQHandler+0x200>)
 8005454:	681d      	ldr	r5, [r3, #0]
 8005456:	4b7d      	ldr	r3, [pc, #500]	; (800564c <HAL_DMA_IRQHandler+0x204>)
 8005458:	fba3 3505 	umull	r3, r5, r3, r5
 800545c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800545e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 8005460:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8005462:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005466:	6803      	ldr	r3, [r0, #0]
 8005468:	4979      	ldr	r1, [pc, #484]	; (8005650 <HAL_DMA_IRQHandler+0x208>)
 800546a:	487a      	ldr	r0, [pc, #488]	; (8005654 <HAL_DMA_IRQHandler+0x20c>)
 800546c:	4283      	cmp	r3, r0
 800546e:	bf18      	it	ne
 8005470:	428b      	cmpne	r3, r1
 8005472:	bf0c      	ite	eq
 8005474:	2001      	moveq	r0, #1
 8005476:	2000      	movne	r0, #0
 8005478:	d061      	beq.n	800553e <HAL_DMA_IRQHandler+0xf6>
 800547a:	4a77      	ldr	r2, [pc, #476]	; (8005658 <HAL_DMA_IRQHandler+0x210>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d05e      	beq.n	800553e <HAL_DMA_IRQHandler+0xf6>
 8005480:	3218      	adds	r2, #24
 8005482:	4293      	cmp	r3, r2
 8005484:	d05b      	beq.n	800553e <HAL_DMA_IRQHandler+0xf6>
 8005486:	3218      	adds	r2, #24
 8005488:	4293      	cmp	r3, r2
 800548a:	d058      	beq.n	800553e <HAL_DMA_IRQHandler+0xf6>
 800548c:	3218      	adds	r2, #24
 800548e:	4293      	cmp	r3, r2
 8005490:	d055      	beq.n	800553e <HAL_DMA_IRQHandler+0xf6>
 8005492:	3218      	adds	r2, #24
 8005494:	4293      	cmp	r3, r2
 8005496:	d052      	beq.n	800553e <HAL_DMA_IRQHandler+0xf6>
 8005498:	3218      	adds	r2, #24
 800549a:	4293      	cmp	r3, r2
 800549c:	d04f      	beq.n	800553e <HAL_DMA_IRQHandler+0xf6>
 800549e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d04b      	beq.n	800553e <HAL_DMA_IRQHandler+0xf6>
 80054a6:	3218      	adds	r2, #24
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d048      	beq.n	800553e <HAL_DMA_IRQHandler+0xf6>
 80054ac:	3218      	adds	r2, #24
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d045      	beq.n	800553e <HAL_DMA_IRQHandler+0xf6>
 80054b2:	3218      	adds	r2, #24
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d042      	beq.n	800553e <HAL_DMA_IRQHandler+0xf6>
 80054b8:	3218      	adds	r2, #24
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d03f      	beq.n	800553e <HAL_DMA_IRQHandler+0xf6>
 80054be:	3218      	adds	r2, #24
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d03c      	beq.n	800553e <HAL_DMA_IRQHandler+0xf6>
 80054c4:	3218      	adds	r2, #24
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d039      	beq.n	800553e <HAL_DMA_IRQHandler+0xf6>
 80054ca:	3218      	adds	r2, #24
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d036      	beq.n	800553e <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80054d0:	4962      	ldr	r1, [pc, #392]	; (800565c <HAL_DMA_IRQHandler+0x214>)
 80054d2:	4a63      	ldr	r2, [pc, #396]	; (8005660 <HAL_DMA_IRQHandler+0x218>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	bf18      	it	ne
 80054d8:	428b      	cmpne	r3, r1
 80054da:	d012      	beq.n	8005502 <HAL_DMA_IRQHandler+0xba>
 80054dc:	4a61      	ldr	r2, [pc, #388]	; (8005664 <HAL_DMA_IRQHandler+0x21c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00f      	beq.n	8005502 <HAL_DMA_IRQHandler+0xba>
 80054e2:	3214      	adds	r2, #20
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00c      	beq.n	8005502 <HAL_DMA_IRQHandler+0xba>
 80054e8:	3214      	adds	r2, #20
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d009      	beq.n	8005502 <HAL_DMA_IRQHandler+0xba>
 80054ee:	3214      	adds	r2, #20
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d006      	beq.n	8005502 <HAL_DMA_IRQHandler+0xba>
 80054f4:	3214      	adds	r2, #20
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d003      	beq.n	8005502 <HAL_DMA_IRQHandler+0xba>
 80054fa:	3214      	adds	r2, #20
 80054fc:	4293      	cmp	r3, r2
 80054fe:	f040 8261 	bne.w	80059c4 <HAL_DMA_IRQHandler+0x57c>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005502:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005504:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005506:	f001 011f 	and.w	r1, r1, #31
 800550a:	2004      	movs	r0, #4
 800550c:	4088      	lsls	r0, r1
 800550e:	ea10 0f0c 	tst.w	r0, ip
 8005512:	f000 82a7 	beq.w	8005a64 <HAL_DMA_IRQHandler+0x61c>
 8005516:	f012 0f04 	tst.w	r2, #4
 800551a:	f000 82a3 	beq.w	8005a64 <HAL_DMA_IRQHandler+0x61c>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800551e:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005520:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005524:	f000 825a 	beq.w	80059dc <HAL_DMA_IRQHandler+0x594>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005528:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800552c:	f040 8250 	bne.w	80059d0 <HAL_DMA_IRQHandler+0x588>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005530:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 8246 	beq.w	80059c4 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1HalfCpltCallback(hdma);
 8005538:	4620      	mov	r0, r4
 800553a:	4798      	blx	r3
 800553c:	e242      	b.n	80059c4 <HAL_DMA_IRQHandler+0x57c>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800553e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005540:	f002 011f 	and.w	r1, r2, #31
 8005544:	2208      	movs	r2, #8
 8005546:	408a      	lsls	r2, r1
 8005548:	4232      	tst	r2, r6
 800554a:	d041      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800554c:	bb70      	cbnz	r0, 80055ac <HAL_DMA_IRQHandler+0x164>
 800554e:	4a42      	ldr	r2, [pc, #264]	; (8005658 <HAL_DMA_IRQHandler+0x210>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d02b      	beq.n	80055ac <HAL_DMA_IRQHandler+0x164>
 8005554:	3218      	adds	r2, #24
 8005556:	4293      	cmp	r3, r2
 8005558:	d028      	beq.n	80055ac <HAL_DMA_IRQHandler+0x164>
 800555a:	3218      	adds	r2, #24
 800555c:	4293      	cmp	r3, r2
 800555e:	d025      	beq.n	80055ac <HAL_DMA_IRQHandler+0x164>
 8005560:	3218      	adds	r2, #24
 8005562:	4293      	cmp	r3, r2
 8005564:	d022      	beq.n	80055ac <HAL_DMA_IRQHandler+0x164>
 8005566:	3218      	adds	r2, #24
 8005568:	4293      	cmp	r3, r2
 800556a:	d01f      	beq.n	80055ac <HAL_DMA_IRQHandler+0x164>
 800556c:	3218      	adds	r2, #24
 800556e:	4293      	cmp	r3, r2
 8005570:	d01c      	beq.n	80055ac <HAL_DMA_IRQHandler+0x164>
 8005572:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005576:	4293      	cmp	r3, r2
 8005578:	d018      	beq.n	80055ac <HAL_DMA_IRQHandler+0x164>
 800557a:	3218      	adds	r2, #24
 800557c:	4293      	cmp	r3, r2
 800557e:	d015      	beq.n	80055ac <HAL_DMA_IRQHandler+0x164>
 8005580:	3218      	adds	r2, #24
 8005582:	4293      	cmp	r3, r2
 8005584:	d012      	beq.n	80055ac <HAL_DMA_IRQHandler+0x164>
 8005586:	3218      	adds	r2, #24
 8005588:	4293      	cmp	r3, r2
 800558a:	d00f      	beq.n	80055ac <HAL_DMA_IRQHandler+0x164>
 800558c:	3218      	adds	r2, #24
 800558e:	4293      	cmp	r3, r2
 8005590:	d00c      	beq.n	80055ac <HAL_DMA_IRQHandler+0x164>
 8005592:	3218      	adds	r2, #24
 8005594:	4293      	cmp	r3, r2
 8005596:	d009      	beq.n	80055ac <HAL_DMA_IRQHandler+0x164>
 8005598:	3218      	adds	r2, #24
 800559a:	4293      	cmp	r3, r2
 800559c:	d006      	beq.n	80055ac <HAL_DMA_IRQHandler+0x164>
 800559e:	3218      	adds	r2, #24
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d003      	beq.n	80055ac <HAL_DMA_IRQHandler+0x164>
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80055aa:	e002      	b.n	80055b2 <HAL_DMA_IRQHandler+0x16a>
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80055b2:	b16a      	cbz	r2, 80055d0 <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	f022 0204 	bic.w	r2, r2, #4
 80055ba:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80055be:	f003 021f 	and.w	r2, r3, #31
 80055c2:	2308      	movs	r3, #8
 80055c4:	4093      	lsls	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80055ca:	f043 0301 	orr.w	r3, r3, #1
 80055ce:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055d0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80055d2:	f002 021f 	and.w	r2, r2, #31
 80055d6:	fa26 f302 	lsr.w	r3, r6, r2
 80055da:	f013 0f01 	tst.w	r3, #1
 80055de:	d047      	beq.n	8005670 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	481b      	ldr	r0, [pc, #108]	; (8005650 <HAL_DMA_IRQHandler+0x208>)
 80055e4:	491b      	ldr	r1, [pc, #108]	; (8005654 <HAL_DMA_IRQHandler+0x20c>)
 80055e6:	428b      	cmp	r3, r1
 80055e8:	bf18      	it	ne
 80055ea:	4283      	cmpne	r3, r0
 80055ec:	d03c      	beq.n	8005668 <HAL_DMA_IRQHandler+0x220>
 80055ee:	3118      	adds	r1, #24
 80055f0:	428b      	cmp	r3, r1
 80055f2:	d039      	beq.n	8005668 <HAL_DMA_IRQHandler+0x220>
 80055f4:	3118      	adds	r1, #24
 80055f6:	428b      	cmp	r3, r1
 80055f8:	d036      	beq.n	8005668 <HAL_DMA_IRQHandler+0x220>
 80055fa:	3118      	adds	r1, #24
 80055fc:	428b      	cmp	r3, r1
 80055fe:	d033      	beq.n	8005668 <HAL_DMA_IRQHandler+0x220>
 8005600:	3118      	adds	r1, #24
 8005602:	428b      	cmp	r3, r1
 8005604:	d030      	beq.n	8005668 <HAL_DMA_IRQHandler+0x220>
 8005606:	3118      	adds	r1, #24
 8005608:	428b      	cmp	r3, r1
 800560a:	d02d      	beq.n	8005668 <HAL_DMA_IRQHandler+0x220>
 800560c:	3118      	adds	r1, #24
 800560e:	428b      	cmp	r3, r1
 8005610:	d02a      	beq.n	8005668 <HAL_DMA_IRQHandler+0x220>
 8005612:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8005616:	428b      	cmp	r3, r1
 8005618:	d026      	beq.n	8005668 <HAL_DMA_IRQHandler+0x220>
 800561a:	3118      	adds	r1, #24
 800561c:	428b      	cmp	r3, r1
 800561e:	d023      	beq.n	8005668 <HAL_DMA_IRQHandler+0x220>
 8005620:	3118      	adds	r1, #24
 8005622:	428b      	cmp	r3, r1
 8005624:	d020      	beq.n	8005668 <HAL_DMA_IRQHandler+0x220>
 8005626:	3118      	adds	r1, #24
 8005628:	428b      	cmp	r3, r1
 800562a:	d01d      	beq.n	8005668 <HAL_DMA_IRQHandler+0x220>
 800562c:	3118      	adds	r1, #24
 800562e:	428b      	cmp	r3, r1
 8005630:	d01a      	beq.n	8005668 <HAL_DMA_IRQHandler+0x220>
 8005632:	3118      	adds	r1, #24
 8005634:	428b      	cmp	r3, r1
 8005636:	d017      	beq.n	8005668 <HAL_DMA_IRQHandler+0x220>
 8005638:	3118      	adds	r1, #24
 800563a:	428b      	cmp	r3, r1
 800563c:	d014      	beq.n	8005668 <HAL_DMA_IRQHandler+0x220>
 800563e:	3118      	adds	r1, #24
 8005640:	428b      	cmp	r3, r1
 8005642:	d011      	beq.n	8005668 <HAL_DMA_IRQHandler+0x220>
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	e013      	b.n	8005670 <HAL_DMA_IRQHandler+0x228>
 8005648:	24000000 	.word	0x24000000
 800564c:	1b4e81b5 	.word	0x1b4e81b5
 8005650:	40020010 	.word	0x40020010
 8005654:	40020028 	.word	0x40020028
 8005658:	40020040 	.word	0x40020040
 800565c:	58025408 	.word	0x58025408
 8005660:	5802541c 	.word	0x5802541c
 8005664:	58025430 	.word	0x58025430
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800566e:	d13b      	bne.n	80056e8 <HAL_DMA_IRQHandler+0x2a0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005670:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005672:	f003 031f 	and.w	r3, r3, #31
 8005676:	2204      	movs	r2, #4
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	4233      	tst	r3, r6
 800567e:	d040      	beq.n	8005702 <HAL_DMA_IRQHandler+0x2ba>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005680:	6822      	ldr	r2, [r4, #0]
 8005682:	4896      	ldr	r0, [pc, #600]	; (80058dc <HAL_DMA_IRQHandler+0x494>)
 8005684:	4996      	ldr	r1, [pc, #600]	; (80058e0 <HAL_DMA_IRQHandler+0x498>)
 8005686:	428a      	cmp	r2, r1
 8005688:	bf18      	it	ne
 800568a:	4282      	cmpne	r2, r0
 800568c:	d035      	beq.n	80056fa <HAL_DMA_IRQHandler+0x2b2>
 800568e:	3118      	adds	r1, #24
 8005690:	428a      	cmp	r2, r1
 8005692:	d032      	beq.n	80056fa <HAL_DMA_IRQHandler+0x2b2>
 8005694:	3118      	adds	r1, #24
 8005696:	428a      	cmp	r2, r1
 8005698:	d02f      	beq.n	80056fa <HAL_DMA_IRQHandler+0x2b2>
 800569a:	3118      	adds	r1, #24
 800569c:	428a      	cmp	r2, r1
 800569e:	d02c      	beq.n	80056fa <HAL_DMA_IRQHandler+0x2b2>
 80056a0:	3118      	adds	r1, #24
 80056a2:	428a      	cmp	r2, r1
 80056a4:	d029      	beq.n	80056fa <HAL_DMA_IRQHandler+0x2b2>
 80056a6:	3118      	adds	r1, #24
 80056a8:	428a      	cmp	r2, r1
 80056aa:	d026      	beq.n	80056fa <HAL_DMA_IRQHandler+0x2b2>
 80056ac:	3118      	adds	r1, #24
 80056ae:	428a      	cmp	r2, r1
 80056b0:	d023      	beq.n	80056fa <HAL_DMA_IRQHandler+0x2b2>
 80056b2:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80056b6:	428a      	cmp	r2, r1
 80056b8:	d01f      	beq.n	80056fa <HAL_DMA_IRQHandler+0x2b2>
 80056ba:	3118      	adds	r1, #24
 80056bc:	428a      	cmp	r2, r1
 80056be:	d01c      	beq.n	80056fa <HAL_DMA_IRQHandler+0x2b2>
 80056c0:	3118      	adds	r1, #24
 80056c2:	428a      	cmp	r2, r1
 80056c4:	d019      	beq.n	80056fa <HAL_DMA_IRQHandler+0x2b2>
 80056c6:	3118      	adds	r1, #24
 80056c8:	428a      	cmp	r2, r1
 80056ca:	d016      	beq.n	80056fa <HAL_DMA_IRQHandler+0x2b2>
 80056cc:	3118      	adds	r1, #24
 80056ce:	428a      	cmp	r2, r1
 80056d0:	d013      	beq.n	80056fa <HAL_DMA_IRQHandler+0x2b2>
 80056d2:	3118      	adds	r1, #24
 80056d4:	428a      	cmp	r2, r1
 80056d6:	d010      	beq.n	80056fa <HAL_DMA_IRQHandler+0x2b2>
 80056d8:	3118      	adds	r1, #24
 80056da:	428a      	cmp	r2, r1
 80056dc:	d00d      	beq.n	80056fa <HAL_DMA_IRQHandler+0x2b2>
 80056de:	3118      	adds	r1, #24
 80056e0:	428a      	cmp	r2, r1
 80056e2:	d00a      	beq.n	80056fa <HAL_DMA_IRQHandler+0x2b2>
 80056e4:	6813      	ldr	r3, [r2, #0]
 80056e6:	e00c      	b.n	8005702 <HAL_DMA_IRQHandler+0x2ba>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056e8:	2301      	movs	r3, #1
 80056ea:	fa03 f202 	lsl.w	r2, r3, r2
 80056ee:	60ba      	str	r2, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80056f2:	f043 0302 	orr.w	r3, r3, #2
 80056f6:	6563      	str	r3, [r4, #84]	; 0x54
 80056f8:	e7ba      	b.n	8005670 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80056fa:	6812      	ldr	r2, [r2, #0]
 80056fc:	f012 0f02 	tst.w	r2, #2
 8005700:	d13d      	bne.n	800577e <HAL_DMA_IRQHandler+0x336>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005702:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005704:	f003 031f 	and.w	r3, r3, #31
 8005708:	2210      	movs	r2, #16
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	4233      	tst	r3, r6
 8005710:	d05f      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x38a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005712:	6822      	ldr	r2, [r4, #0]
 8005714:	4871      	ldr	r0, [pc, #452]	; (80058dc <HAL_DMA_IRQHandler+0x494>)
 8005716:	4972      	ldr	r1, [pc, #456]	; (80058e0 <HAL_DMA_IRQHandler+0x498>)
 8005718:	428a      	cmp	r2, r1
 800571a:	bf18      	it	ne
 800571c:	4282      	cmpne	r2, r0
 800571e:	d034      	beq.n	800578a <HAL_DMA_IRQHandler+0x342>
 8005720:	3118      	adds	r1, #24
 8005722:	428a      	cmp	r2, r1
 8005724:	d031      	beq.n	800578a <HAL_DMA_IRQHandler+0x342>
 8005726:	3118      	adds	r1, #24
 8005728:	428a      	cmp	r2, r1
 800572a:	d02e      	beq.n	800578a <HAL_DMA_IRQHandler+0x342>
 800572c:	3118      	adds	r1, #24
 800572e:	428a      	cmp	r2, r1
 8005730:	d02b      	beq.n	800578a <HAL_DMA_IRQHandler+0x342>
 8005732:	3118      	adds	r1, #24
 8005734:	428a      	cmp	r2, r1
 8005736:	d028      	beq.n	800578a <HAL_DMA_IRQHandler+0x342>
 8005738:	3118      	adds	r1, #24
 800573a:	428a      	cmp	r2, r1
 800573c:	d025      	beq.n	800578a <HAL_DMA_IRQHandler+0x342>
 800573e:	3118      	adds	r1, #24
 8005740:	428a      	cmp	r2, r1
 8005742:	d022      	beq.n	800578a <HAL_DMA_IRQHandler+0x342>
 8005744:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8005748:	428a      	cmp	r2, r1
 800574a:	d01e      	beq.n	800578a <HAL_DMA_IRQHandler+0x342>
 800574c:	3118      	adds	r1, #24
 800574e:	428a      	cmp	r2, r1
 8005750:	d01b      	beq.n	800578a <HAL_DMA_IRQHandler+0x342>
 8005752:	3118      	adds	r1, #24
 8005754:	428a      	cmp	r2, r1
 8005756:	d018      	beq.n	800578a <HAL_DMA_IRQHandler+0x342>
 8005758:	3118      	adds	r1, #24
 800575a:	428a      	cmp	r2, r1
 800575c:	d015      	beq.n	800578a <HAL_DMA_IRQHandler+0x342>
 800575e:	3118      	adds	r1, #24
 8005760:	428a      	cmp	r2, r1
 8005762:	d012      	beq.n	800578a <HAL_DMA_IRQHandler+0x342>
 8005764:	3118      	adds	r1, #24
 8005766:	428a      	cmp	r2, r1
 8005768:	d00f      	beq.n	800578a <HAL_DMA_IRQHandler+0x342>
 800576a:	3118      	adds	r1, #24
 800576c:	428a      	cmp	r2, r1
 800576e:	d00c      	beq.n	800578a <HAL_DMA_IRQHandler+0x342>
 8005770:	3118      	adds	r1, #24
 8005772:	428a      	cmp	r2, r1
 8005774:	d009      	beq.n	800578a <HAL_DMA_IRQHandler+0x342>
 8005776:	6812      	ldr	r2, [r2, #0]
 8005778:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800577c:	e008      	b.n	8005790 <HAL_DMA_IRQHandler+0x348>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800577e:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005780:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005782:	f043 0304 	orr.w	r3, r3, #4
 8005786:	6563      	str	r3, [r4, #84]	; 0x54
 8005788:	e7bb      	b.n	8005702 <HAL_DMA_IRQHandler+0x2ba>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800578a:	6812      	ldr	r2, [r2, #0]
 800578c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8005790:	b1fa      	cbz	r2, 80057d2 <HAL_DMA_IRQHandler+0x38a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005792:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800579c:	d00d      	beq.n	80057ba <HAL_DMA_IRQHandler+0x372>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80057a4:	d104      	bne.n	80057b0 <HAL_DMA_IRQHandler+0x368>
            if(hdma->XferHalfCpltCallback != NULL)
 80057a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057a8:	b19b      	cbz	r3, 80057d2 <HAL_DMA_IRQHandler+0x38a>
              hdma->XferHalfCpltCallback(hdma);
 80057aa:	4620      	mov	r0, r4
 80057ac:	4798      	blx	r3
 80057ae:	e010      	b.n	80057d2 <HAL_DMA_IRQHandler+0x38a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80057b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80057b2:	b173      	cbz	r3, 80057d2 <HAL_DMA_IRQHandler+0x38a>
              hdma->XferM1HalfCpltCallback(hdma);
 80057b4:	4620      	mov	r0, r4
 80057b6:	4798      	blx	r3
 80057b8:	e00b      	b.n	80057d2 <HAL_DMA_IRQHandler+0x38a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	f412 7f80 	tst.w	r2, #256	; 0x100
 80057c0:	d103      	bne.n	80057ca <HAL_DMA_IRQHandler+0x382>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	f022 0208 	bic.w	r2, r2, #8
 80057c8:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80057ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057cc:	b10b      	cbz	r3, 80057d2 <HAL_DMA_IRQHandler+0x38a>
            hdma->XferHalfCpltCallback(hdma);
 80057ce:	4620      	mov	r0, r4
 80057d0:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057d2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80057d4:	f003 031f 	and.w	r3, r3, #31
 80057d8:	2220      	movs	r2, #32
 80057da:	fa02 f303 	lsl.w	r3, r2, r3
 80057de:	4233      	tst	r3, r6
 80057e0:	f000 8092 	beq.w	8005908 <HAL_DMA_IRQHandler+0x4c0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80057e4:	6822      	ldr	r2, [r4, #0]
 80057e6:	483d      	ldr	r0, [pc, #244]	; (80058dc <HAL_DMA_IRQHandler+0x494>)
 80057e8:	493d      	ldr	r1, [pc, #244]	; (80058e0 <HAL_DMA_IRQHandler+0x498>)
 80057ea:	428a      	cmp	r2, r1
 80057ec:	bf18      	it	ne
 80057ee:	4282      	cmpne	r2, r0
 80057f0:	d02e      	beq.n	8005850 <HAL_DMA_IRQHandler+0x408>
 80057f2:	3118      	adds	r1, #24
 80057f4:	428a      	cmp	r2, r1
 80057f6:	d02b      	beq.n	8005850 <HAL_DMA_IRQHandler+0x408>
 80057f8:	3118      	adds	r1, #24
 80057fa:	428a      	cmp	r2, r1
 80057fc:	d028      	beq.n	8005850 <HAL_DMA_IRQHandler+0x408>
 80057fe:	3118      	adds	r1, #24
 8005800:	428a      	cmp	r2, r1
 8005802:	d025      	beq.n	8005850 <HAL_DMA_IRQHandler+0x408>
 8005804:	3118      	adds	r1, #24
 8005806:	428a      	cmp	r2, r1
 8005808:	d022      	beq.n	8005850 <HAL_DMA_IRQHandler+0x408>
 800580a:	3118      	adds	r1, #24
 800580c:	428a      	cmp	r2, r1
 800580e:	d01f      	beq.n	8005850 <HAL_DMA_IRQHandler+0x408>
 8005810:	3118      	adds	r1, #24
 8005812:	428a      	cmp	r2, r1
 8005814:	d01c      	beq.n	8005850 <HAL_DMA_IRQHandler+0x408>
 8005816:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800581a:	428a      	cmp	r2, r1
 800581c:	d018      	beq.n	8005850 <HAL_DMA_IRQHandler+0x408>
 800581e:	3118      	adds	r1, #24
 8005820:	428a      	cmp	r2, r1
 8005822:	d015      	beq.n	8005850 <HAL_DMA_IRQHandler+0x408>
 8005824:	3118      	adds	r1, #24
 8005826:	428a      	cmp	r2, r1
 8005828:	d012      	beq.n	8005850 <HAL_DMA_IRQHandler+0x408>
 800582a:	3118      	adds	r1, #24
 800582c:	428a      	cmp	r2, r1
 800582e:	d00f      	beq.n	8005850 <HAL_DMA_IRQHandler+0x408>
 8005830:	3118      	adds	r1, #24
 8005832:	428a      	cmp	r2, r1
 8005834:	d00c      	beq.n	8005850 <HAL_DMA_IRQHandler+0x408>
 8005836:	3118      	adds	r1, #24
 8005838:	428a      	cmp	r2, r1
 800583a:	d009      	beq.n	8005850 <HAL_DMA_IRQHandler+0x408>
 800583c:	3118      	adds	r1, #24
 800583e:	428a      	cmp	r2, r1
 8005840:	d006      	beq.n	8005850 <HAL_DMA_IRQHandler+0x408>
 8005842:	3118      	adds	r1, #24
 8005844:	428a      	cmp	r2, r1
 8005846:	d003      	beq.n	8005850 <HAL_DMA_IRQHandler+0x408>
 8005848:	6812      	ldr	r2, [r2, #0]
 800584a:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800584e:	e002      	b.n	8005856 <HAL_DMA_IRQHandler+0x40e>
 8005850:	6812      	ldr	r2, [r2, #0]
 8005852:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8005856:	2a00      	cmp	r2, #0
 8005858:	d056      	beq.n	8005908 <HAL_DMA_IRQHandler+0x4c0>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800585a:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800585c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b04      	cmp	r3, #4
 8005864:	d00e      	beq.n	8005884 <HAL_DMA_IRQHandler+0x43c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800586e:	d039      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x49c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005876:	d12c      	bne.n	80058d2 <HAL_DMA_IRQHandler+0x48a>
            if(hdma->XferM1CpltCallback != NULL)
 8005878:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800587a:	2b00      	cmp	r3, #0
 800587c:	d044      	beq.n	8005908 <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferM1CpltCallback(hdma);
 800587e:	4620      	mov	r0, r4
 8005880:	4798      	blx	r3
 8005882:	e041      	b.n	8005908 <HAL_DMA_IRQHandler+0x4c0>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005884:	6822      	ldr	r2, [r4, #0]
 8005886:	6813      	ldr	r3, [r2, #0]
 8005888:	f023 0316 	bic.w	r3, r3, #22
 800588c:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800588e:	6822      	ldr	r2, [r4, #0]
 8005890:	6953      	ldr	r3, [r2, #20]
 8005892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005896:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005898:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800589a:	b1b3      	cbz	r3, 80058ca <HAL_DMA_IRQHandler+0x482>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800589c:	6822      	ldr	r2, [r4, #0]
 800589e:	6813      	ldr	r3, [r2, #0]
 80058a0:	f023 0308 	bic.w	r3, r3, #8
 80058a4:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80058a8:	f003 021f 	and.w	r2, r3, #31
 80058ac:	233f      	movs	r3, #63	; 0x3f
 80058ae:	4093      	lsls	r3, r2
 80058b0:	60bb      	str	r3, [r7, #8]
          hdma->State = HAL_DMA_STATE_READY;
 80058b2:	2301      	movs	r3, #1
 80058b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80058b8:	2300      	movs	r3, #0
 80058ba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 80058be:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d07f      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferAbortCallback(hdma);
 80058c4:	4620      	mov	r0, r4
 80058c6:	4798      	blx	r3
          return;
 80058c8:	e07c      	b.n	80059c4 <HAL_DMA_IRQHandler+0x57c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e5      	bne.n	800589c <HAL_DMA_IRQHandler+0x454>
 80058d0:	e7e9      	b.n	80058a6 <HAL_DMA_IRQHandler+0x45e>
            if(hdma->XferCpltCallback != NULL)
 80058d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80058d4:	b1c3      	cbz	r3, 8005908 <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferCpltCallback(hdma);
 80058d6:	4620      	mov	r0, r4
 80058d8:	4798      	blx	r3
 80058da:	e015      	b.n	8005908 <HAL_DMA_IRQHandler+0x4c0>
 80058dc:	40020010 	.word	0x40020010
 80058e0:	40020028 	.word	0x40020028
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80058ea:	d109      	bne.n	8005900 <HAL_DMA_IRQHandler+0x4b8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	f022 0210 	bic.w	r2, r2, #16
 80058f2:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80058f4:	2301      	movs	r3, #1
 80058f6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 80058fa:	2300      	movs	r3, #0
 80058fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferCpltCallback != NULL)
 8005900:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005902:	b10b      	cbz	r3, 8005908 <HAL_DMA_IRQHandler+0x4c0>
            hdma->XferCpltCallback(hdma);
 8005904:	4620      	mov	r0, r4
 8005906:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005908:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800590a:	2b00      	cmp	r3, #0
 800590c:	d05a      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x57c>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800590e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005910:	f013 0f01 	tst.w	r3, #1
 8005914:	d052      	beq.n	80059bc <HAL_DMA_IRQHandler+0x574>
        hdma->State = HAL_DMA_STATE_ABORT;
 8005916:	2304      	movs	r3, #4
 8005918:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	4996      	ldr	r1, [pc, #600]	; (8005b78 <HAL_DMA_IRQHandler+0x730>)
 8005920:	4a96      	ldr	r2, [pc, #600]	; (8005b7c <HAL_DMA_IRQHandler+0x734>)
 8005922:	4293      	cmp	r3, r2
 8005924:	bf18      	it	ne
 8005926:	428b      	cmpne	r3, r1
 8005928:	d02f      	beq.n	800598a <HAL_DMA_IRQHandler+0x542>
 800592a:	3218      	adds	r2, #24
 800592c:	4293      	cmp	r3, r2
 800592e:	d02c      	beq.n	800598a <HAL_DMA_IRQHandler+0x542>
 8005930:	3218      	adds	r2, #24
 8005932:	4293      	cmp	r3, r2
 8005934:	d029      	beq.n	800598a <HAL_DMA_IRQHandler+0x542>
 8005936:	3218      	adds	r2, #24
 8005938:	4293      	cmp	r3, r2
 800593a:	d026      	beq.n	800598a <HAL_DMA_IRQHandler+0x542>
 800593c:	3218      	adds	r2, #24
 800593e:	4293      	cmp	r3, r2
 8005940:	d023      	beq.n	800598a <HAL_DMA_IRQHandler+0x542>
 8005942:	3218      	adds	r2, #24
 8005944:	4293      	cmp	r3, r2
 8005946:	d020      	beq.n	800598a <HAL_DMA_IRQHandler+0x542>
 8005948:	3218      	adds	r2, #24
 800594a:	4293      	cmp	r3, r2
 800594c:	d01d      	beq.n	800598a <HAL_DMA_IRQHandler+0x542>
 800594e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005952:	4293      	cmp	r3, r2
 8005954:	d019      	beq.n	800598a <HAL_DMA_IRQHandler+0x542>
 8005956:	3218      	adds	r2, #24
 8005958:	4293      	cmp	r3, r2
 800595a:	d016      	beq.n	800598a <HAL_DMA_IRQHandler+0x542>
 800595c:	3218      	adds	r2, #24
 800595e:	4293      	cmp	r3, r2
 8005960:	d013      	beq.n	800598a <HAL_DMA_IRQHandler+0x542>
 8005962:	3218      	adds	r2, #24
 8005964:	4293      	cmp	r3, r2
 8005966:	d010      	beq.n	800598a <HAL_DMA_IRQHandler+0x542>
 8005968:	3218      	adds	r2, #24
 800596a:	4293      	cmp	r3, r2
 800596c:	d00d      	beq.n	800598a <HAL_DMA_IRQHandler+0x542>
 800596e:	3218      	adds	r2, #24
 8005970:	4293      	cmp	r3, r2
 8005972:	d00a      	beq.n	800598a <HAL_DMA_IRQHandler+0x542>
 8005974:	3218      	adds	r2, #24
 8005976:	4293      	cmp	r3, r2
 8005978:	d007      	beq.n	800598a <HAL_DMA_IRQHandler+0x542>
 800597a:	3218      	adds	r2, #24
 800597c:	4293      	cmp	r3, r2
 800597e:	d004      	beq.n	800598a <HAL_DMA_IRQHandler+0x542>
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	f022 0201 	bic.w	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	e003      	b.n	8005992 <HAL_DMA_IRQHandler+0x54a>
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	f022 0201 	bic.w	r2, r2, #1
 8005990:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8005992:	9b01      	ldr	r3, [sp, #4]
 8005994:	3301      	adds	r3, #1
 8005996:	9301      	str	r3, [sp, #4]
 8005998:	42ab      	cmp	r3, r5
 800599a:	d804      	bhi.n	80059a6 <HAL_DMA_IRQHandler+0x55e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f013 0f01 	tst.w	r3, #1
 80059a4:	d1f5      	bne.n	8005992 <HAL_DMA_IRQHandler+0x54a>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f013 0f01 	tst.w	r3, #1
 80059ae:	d00b      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x580>
          hdma->State = HAL_DMA_STATE_ERROR;
 80059b0:	2303      	movs	r3, #3
 80059b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80059b6:	2300      	movs	r3, #0
 80059b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 80059bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80059be:	b10b      	cbz	r3, 80059c4 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 80059c0:	4620      	mov	r0, r4
 80059c2:	4798      	blx	r3
}
 80059c4:	b003      	add	sp, #12
 80059c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 80059c8:	2301      	movs	r3, #1
 80059ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80059ce:	e7f2      	b.n	80059b6 <HAL_DMA_IRQHandler+0x56e>
          if(hdma->XferHalfCpltCallback != NULL)
 80059d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0f6      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferHalfCpltCallback(hdma);
 80059d6:	4620      	mov	r0, r4
 80059d8:	4798      	blx	r3
 80059da:	e7f3      	b.n	80059c4 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80059dc:	f012 0f20 	tst.w	r2, #32
 80059e0:	d13a      	bne.n	8005a58 <HAL_DMA_IRQHandler+0x610>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	4964      	ldr	r1, [pc, #400]	; (8005b78 <HAL_DMA_IRQHandler+0x730>)
 80059e6:	4a65      	ldr	r2, [pc, #404]	; (8005b7c <HAL_DMA_IRQHandler+0x734>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	bf18      	it	ne
 80059ec:	428b      	cmpne	r3, r1
 80059ee:	d02f      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x608>
 80059f0:	3218      	adds	r2, #24
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d02c      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x608>
 80059f6:	3218      	adds	r2, #24
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d029      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x608>
 80059fc:	3218      	adds	r2, #24
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d026      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x608>
 8005a02:	3218      	adds	r2, #24
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d023      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x608>
 8005a08:	3218      	adds	r2, #24
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d020      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x608>
 8005a0e:	3218      	adds	r2, #24
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d01d      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x608>
 8005a14:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d019      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x608>
 8005a1c:	3218      	adds	r2, #24
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d016      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x608>
 8005a22:	3218      	adds	r2, #24
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d013      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x608>
 8005a28:	3218      	adds	r2, #24
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d010      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x608>
 8005a2e:	3218      	adds	r2, #24
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00d      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x608>
 8005a34:	3218      	adds	r2, #24
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00a      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x608>
 8005a3a:	3218      	adds	r2, #24
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d007      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x608>
 8005a40:	3218      	adds	r2, #24
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d004      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x608>
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	f022 0204 	bic.w	r2, r2, #4
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	e003      	b.n	8005a58 <HAL_DMA_IRQHandler+0x610>
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	f022 0208 	bic.w	r2, r2, #8
 8005a56:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8005a58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0b2      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferHalfCpltCallback(hdma);
 8005a5e:	4620      	mov	r0, r4
 8005a60:	4798      	blx	r3
 8005a62:	e7af      	b.n	80059c4 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005a64:	2002      	movs	r0, #2
 8005a66:	4088      	lsls	r0, r1
 8005a68:	ea10 0f0c 	tst.w	r0, ip
 8005a6c:	d060      	beq.n	8005b30 <HAL_DMA_IRQHandler+0x6e8>
 8005a6e:	f012 0f02 	tst.w	r2, #2
 8005a72:	d05d      	beq.n	8005b30 <HAL_DMA_IRQHandler+0x6e8>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005a74:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a76:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005a7a:	d00e      	beq.n	8005a9a <HAL_DMA_IRQHandler+0x652>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a7c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005a80:	d105      	bne.n	8005a8e <HAL_DMA_IRQHandler+0x646>
          if(hdma->XferM1CpltCallback != NULL)
 8005a82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d09d      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1CpltCallback(hdma);
 8005a88:	4620      	mov	r0, r4
 8005a8a:	4798      	blx	r3
 8005a8c:	e79a      	b.n	80059c4 <HAL_DMA_IRQHandler+0x57c>
          if(hdma->XferCpltCallback != NULL)
 8005a8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d097      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferCpltCallback(hdma);
 8005a94:	4620      	mov	r0, r4
 8005a96:	4798      	blx	r3
 8005a98:	e794      	b.n	80059c4 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005a9a:	f012 0f20 	tst.w	r2, #32
 8005a9e:	d140      	bne.n	8005b22 <HAL_DMA_IRQHandler+0x6da>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	4935      	ldr	r1, [pc, #212]	; (8005b78 <HAL_DMA_IRQHandler+0x730>)
 8005aa4:	4a35      	ldr	r2, [pc, #212]	; (8005b7c <HAL_DMA_IRQHandler+0x734>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	bf18      	it	ne
 8005aaa:	428b      	cmpne	r3, r1
 8005aac:	d02f      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x6c6>
 8005aae:	3218      	adds	r2, #24
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d02c      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x6c6>
 8005ab4:	3218      	adds	r2, #24
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d029      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x6c6>
 8005aba:	3218      	adds	r2, #24
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d026      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x6c6>
 8005ac0:	3218      	adds	r2, #24
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d023      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x6c6>
 8005ac6:	3218      	adds	r2, #24
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d020      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x6c6>
 8005acc:	3218      	adds	r2, #24
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d01d      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x6c6>
 8005ad2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d019      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x6c6>
 8005ada:	3218      	adds	r2, #24
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d016      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x6c6>
 8005ae0:	3218      	adds	r2, #24
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d013      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x6c6>
 8005ae6:	3218      	adds	r2, #24
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d010      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x6c6>
 8005aec:	3218      	adds	r2, #24
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00d      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x6c6>
 8005af2:	3218      	adds	r2, #24
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d00a      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x6c6>
 8005af8:	3218      	adds	r2, #24
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d007      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x6c6>
 8005afe:	3218      	adds	r2, #24
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d004      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x6c6>
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	f022 020a 	bic.w	r2, r2, #10
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	e003      	b.n	8005b16 <HAL_DMA_IRQHandler+0x6ce>
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	f022 0214 	bic.w	r2, r2, #20
 8005b14:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005b16:	2301      	movs	r3, #1
 8005b18:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8005b22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f43f af4d 	beq.w	80059c4 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferCpltCallback(hdma);
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	4798      	blx	r3
 8005b2e:	e749      	b.n	80059c4 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005b30:	2008      	movs	r0, #8
 8005b32:	fa00 f101 	lsl.w	r1, r0, r1
 8005b36:	ea11 0f0c 	tst.w	r1, ip
 8005b3a:	f43f af43 	beq.w	80059c4 <HAL_DMA_IRQHandler+0x57c>
 8005b3e:	f012 0f08 	tst.w	r2, #8
 8005b42:	f43f af3f 	beq.w	80059c4 <HAL_DMA_IRQHandler+0x57c>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	f022 020e 	bic.w	r2, r2, #14
 8005b4c:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005b4e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005b50:	f003 031f 	and.w	r3, r3, #31
 8005b54:	2201      	movs	r2, #1
 8005b56:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5a:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b5c:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_READY;
 8005b5e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8005b62:	2300      	movs	r3, #0
 8005b64:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (hdma->XferErrorCallback != NULL)
 8005b68:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f43f af2a 	beq.w	80059c4 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 8005b70:	4620      	mov	r0, r4
 8005b72:	4798      	blx	r3
  }
 8005b74:	e726      	b.n	80059c4 <HAL_DMA_IRQHandler+0x57c>
 8005b76:	bf00      	nop
 8005b78:	40020010 	.word	0x40020010
 8005b7c:	40020028 	.word	0x40020028

08005b80 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005b80:	b430      	push	{r4, r5}
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005b82:	6b44      	ldr	r4, [r0, #52]	; 0x34

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005b84:	6803      	ldr	r3, [r0, #0]
 8005b86:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005b8a:	4a6f      	ldr	r2, [pc, #444]	; (8005d48 <FDCAN_CalcultateRamBlockAddresses+0x1c8>)
 8005b8c:	4011      	ands	r1, r2
 8005b8e:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
 8005b92:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005b96:	6803      	ldr	r3, [r0, #0]
 8005b98:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005b9c:	f421 017f 	bic.w	r1, r1, #16711680	; 0xff0000
 8005ba0:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8005ba2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005ba6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005baa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005bac:	4423      	add	r3, r4
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005bae:	6804      	ldr	r4, [r0, #0]
 8005bb0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8005bb4:	4011      	ands	r1, r2
 8005bb6:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005bba:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005bbe:	6804      	ldr	r4, [r0, #0]
 8005bc0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8005bc4:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8005bc8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8005bca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005bce:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005bd2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005bd4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005bd8:	6804      	ldr	r4, [r0, #0]
 8005bda:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8005bde:	4011      	ands	r1, r2
 8005be0:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005be4:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005be8:	6804      	ldr	r4, [r0, #0]
 8005bea:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8005bee:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8005bf2:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8005bf4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005bf8:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005bfc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005bfe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005c00:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005c04:	6804      	ldr	r4, [r0, #0]
 8005c06:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8005c0a:	4011      	ands	r1, r2
 8005c0c:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005c10:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005c14:	6804      	ldr	r4, [r0, #0]
 8005c16:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8005c1a:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8005c1e:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8005c20:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005c24:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005c28:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005c2a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8005c2c:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005c30:	6804      	ldr	r4, [r0, #0]
 8005c32:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8005c36:	4011      	ands	r1, r2
 8005c38:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005c3c:	f8c4 10ac 	str.w	r1, [r4, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005c40:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005c42:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8005c44:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005c48:	6804      	ldr	r4, [r0, #0]
 8005c4a:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
 8005c4e:	4011      	ands	r1, r2
 8005c50:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005c54:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005c58:	6804      	ldr	r4, [r0, #0]
 8005c5a:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
 8005c5e:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8005c62:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8005c64:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005c68:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005c6c:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8005c6e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005c72:	6804      	ldr	r4, [r0, #0]
 8005c74:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 8005c78:	400a      	ands	r2, r1
 8005c7a:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 8005c7e:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005c82:	6802      	ldr	r2, [r0, #0]
 8005c84:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005c88:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005c8c:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8005c8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005c92:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005c96:	6802      	ldr	r2, [r0, #0]
 8005c98:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005c9c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8005ca0:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8005ca2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005ca6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005caa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005cac:	4a27      	ldr	r2, [pc, #156]	; (8005d4c <FDCAN_CalcultateRamBlockAddresses+0x1cc>)
 8005cae:	441a      	add	r2, r3
 8005cb0:	0092      	lsls	r2, r2, #2
 8005cb2:	66c2      	str	r2, [r0, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005cb4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005cb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005cba:	6703      	str	r3, [r0, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005cbc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005cbe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005cc2:	6743      	str	r3, [r0, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005cc4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005cc6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005cc8:	fb04 f101 	mul.w	r1, r4, r1
 8005ccc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005cd0:	6783      	str	r3, [r0, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005cd2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005cd4:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8005cd6:	fb04 f101 	mul.w	r1, r4, r1
 8005cda:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005cde:	67c3      	str	r3, [r0, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005ce0:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005ce2:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8005ce4:	fb04 f101 	mul.w	r1, r4, r1
 8005ce8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005cec:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005cf0:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8005cf2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005cf6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005cfa:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8005cfc:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8005cfe:	fb01 fc04 	mul.w	ip, r1, r4
 8005d02:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8005d06:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005d0a:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8005d0c:	fb04 f101 	mul.w	r1, r4, r1
 8005d10:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005d14:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005d18:	490d      	ldr	r1, [pc, #52]	; (8005d50 <FDCAN_CalcultateRamBlockAddresses+0x1d0>)
 8005d1a:	428b      	cmp	r3, r1
 8005d1c:	d90d      	bls.n	8005d3a <FDCAN_CalcultateRamBlockAddresses+0x1ba>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005d1e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8005d22:	f043 0320 	orr.w	r3, r3, #32
 8005d26:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98

    return HAL_ERROR;
 8005d30:	2001      	movs	r0, #1
 8005d32:	e007      	b.n	8005d44 <FDCAN_CalcultateRamBlockAddresses+0x1c4>
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005d34:	2300      	movs	r3, #0
 8005d36:	f842 3b04 	str.w	r3, [r2], #4
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005d3a:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d8f8      	bhi.n	8005d34 <FDCAN_CalcultateRamBlockAddresses+0x1b4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005d42:	2000      	movs	r0, #0
}
 8005d44:	bc30      	pop	{r4, r5}
 8005d46:	4770      	bx	lr
 8005d48:	ffff0003 	.word	0xffff0003
 8005d4c:	10002b00 	.word	0x10002b00
 8005d50:	4000d3fc 	.word	0x4000d3fc

08005d54 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8005d54:	b570      	push	{r4, r5, r6, lr}
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005d56:	684c      	ldr	r4, [r1, #4]
 8005d58:	b9f4      	cbnz	r4, 8005d98 <FDCAN_CopyMessageToRAM+0x44>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005d5a:	690d      	ldr	r5, [r1, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005d5c:	688c      	ldr	r4, [r1, #8]
                   FDCAN_STANDARD_ID |
 8005d5e:	4325      	orrs	r5, r4
                   (pTxHeader->Identifier << 18));
 8005d60:	680c      	ldr	r4, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005d62:	ea45 4584 	orr.w	r5, r5, r4, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005d66:	6a0e      	ldr	r6, [r1, #32]
                 pTxHeader->TxEventFifoControl |
 8005d68:	69cc      	ldr	r4, [r1, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005d6a:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
                 pTxHeader->FDFormat |
 8005d6e:	698e      	ldr	r6, [r1, #24]
                 pTxHeader->TxEventFifoControl |
 8005d70:	4334      	orrs	r4, r6
                 pTxHeader->BitRateSwitch |
 8005d72:	694e      	ldr	r6, [r1, #20]
                 pTxHeader->FDFormat |
 8005d74:	4334      	orrs	r4, r6
                 pTxHeader->DataLength);
 8005d76:	68ce      	ldr	r6, [r1, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005d78:	4334      	orrs	r4, r6

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005d7a:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 8005d7e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8005d80:	fb00 f303 	mul.w	r3, r0, r3
 8005d84:	eb06 0e83 	add.w	lr, r6, r3, lsl #2

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005d88:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
  TxAddress++;
  *TxAddress = TxElementW2;
 8005d8c:	f8ce 4004 	str.w	r4, [lr, #4]
  TxAddress++;
 8005d90:	f10e 0e08 	add.w	lr, lr, #8

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005d94:	2000      	movs	r0, #0
 8005d96:	e019      	b.n	8005dcc <FDCAN_CopyMessageToRAM+0x78>
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005d98:	690c      	ldr	r4, [r1, #16]
                   pTxHeader->TxFrameType |
 8005d9a:	688d      	ldr	r5, [r1, #8]
                   FDCAN_EXTENDED_ID |
 8005d9c:	4325      	orrs	r5, r4
                   pTxHeader->Identifier);
 8005d9e:	680c      	ldr	r4, [r1, #0]
                   pTxHeader->TxFrameType |
 8005da0:	4325      	orrs	r5, r4
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005da2:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
 8005da6:	e7de      	b.n	8005d66 <FDCAN_CopyMessageToRAM+0x12>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005da8:	eb02 0c00 	add.w	ip, r2, r0
 8005dac:	f89c 4003 	ldrb.w	r4, [ip, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005db0:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8005db4:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005db6:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8005dba:	f89c 4001 	ldrb.w	r4, [ip, #1]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005dbe:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                  (uint32_t)pTxData[ByteCounter]);
 8005dc2:	5c14      	ldrb	r4, [r2, r0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8005dc4:	4323      	orrs	r3, r4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005dc6:	f84e 3b04 	str.w	r3, [lr], #4
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005dca:	3004      	adds	r0, #4
 8005dcc:	89cb      	ldrh	r3, [r1, #14]
 8005dce:	4c02      	ldr	r4, [pc, #8]	; (8005dd8 <FDCAN_CopyMessageToRAM+0x84>)
 8005dd0:	5ce3      	ldrb	r3, [r4, r3]
 8005dd2:	4283      	cmp	r3, r0
 8005dd4:	d8e8      	bhi.n	8005da8 <FDCAN_CopyMessageToRAM+0x54>
    TxAddress++;
  }
}
 8005dd6:	bd70      	pop	{r4, r5, r6, pc}
 8005dd8:	0801bfac 	.word	0x0801bfac

08005ddc <HAL_FDCAN_Init>:
{
 8005ddc:	b530      	push	{r4, r5, lr}
 8005dde:	b095      	sub	sp, #84	; 0x54
 8005de0:	4604      	mov	r4, r0
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005de2:	224c      	movs	r2, #76	; 0x4c
 8005de4:	49a0      	ldr	r1, [pc, #640]	; (8006068 <HAL_FDCAN_Init+0x28c>)
 8005de6:	a801      	add	r0, sp, #4
 8005de8:	f015 fd82 	bl	801b8f0 <memcpy>
  if (hfdcan == NULL)
 8005dec:	2c00      	cmp	r4, #0
 8005dee:	f000 8138 	beq.w	8006062 <HAL_FDCAN_Init+0x286>
  if (hfdcan->Instance == FDCAN1)
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	4a9d      	ldr	r2, [pc, #628]	; (800606c <HAL_FDCAN_Init+0x290>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d020      	beq.n	8005e3c <HAL_FDCAN_Init+0x60>
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005dfa:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 8005dfe:	b30b      	cbz	r3, 8005e44 <HAL_FDCAN_Init+0x68>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005e00:	6822      	ldr	r2, [r4, #0]
 8005e02:	6993      	ldr	r3, [r2, #24]
 8005e04:	f023 0310 	bic.w	r3, r3, #16
 8005e08:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 8005e0a:	f7fd fcf5 	bl	80037f8 <HAL_GetTick>
 8005e0e:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	699a      	ldr	r2, [r3, #24]
 8005e14:	f012 0f08 	tst.w	r2, #8
 8005e18:	d01a      	beq.n	8005e50 <HAL_FDCAN_Init+0x74>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005e1a:	f7fd fced 	bl	80037f8 <HAL_GetTick>
 8005e1e:	1b43      	subs	r3, r0, r5
 8005e20:	2b0a      	cmp	r3, #10
 8005e22:	d9f5      	bls.n	8005e10 <HAL_FDCAN_Init+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005e24:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8005e28:	f043 0301 	orr.w	r3, r3, #1
 8005e2c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005e30:	2303      	movs	r3, #3
 8005e32:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
      return HAL_ERROR;
 8005e36:	2001      	movs	r0, #1
}
 8005e38:	b015      	add	sp, #84	; 0x54
 8005e3a:	bd30      	pop	{r4, r5, pc}
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005e3c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005e40:	6063      	str	r3, [r4, #4]
 8005e42:	e7da      	b.n	8005dfa <HAL_FDCAN_Init+0x1e>
    hfdcan->Lock = HAL_UNLOCKED;
 8005e44:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    HAL_FDCAN_MspInit(hfdcan);
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f7fc fcb7 	bl	80027bc <HAL_FDCAN_MspInit>
 8005e4e:	e7d7      	b.n	8005e00 <HAL_FDCAN_Init+0x24>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005e50:	699a      	ldr	r2, [r3, #24]
 8005e52:	f042 0201 	orr.w	r2, r2, #1
 8005e56:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8005e58:	f7fd fcce 	bl	80037f8 <HAL_GetTick>
 8005e5c:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	699a      	ldr	r2, [r3, #24]
 8005e62:	f012 0f01 	tst.w	r2, #1
 8005e66:	d10f      	bne.n	8005e88 <HAL_FDCAN_Init+0xac>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005e68:	f7fd fcc6 	bl	80037f8 <HAL_GetTick>
 8005e6c:	1b40      	subs	r0, r0, r5
 8005e6e:	280a      	cmp	r0, #10
 8005e70:	d9f5      	bls.n	8005e5e <HAL_FDCAN_Init+0x82>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005e72:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8005e76:	f043 0301 	orr.w	r3, r3, #1
 8005e7a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
      return HAL_ERROR;
 8005e84:	2001      	movs	r0, #1
 8005e86:	e7d7      	b.n	8005e38 <HAL_FDCAN_Init+0x5c>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005e88:	699a      	ldr	r2, [r3, #24]
 8005e8a:	f042 0202 	orr.w	r2, r2, #2
 8005e8e:	619a      	str	r2, [r3, #24]
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005e90:	7c23      	ldrb	r3, [r4, #16]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d040      	beq.n	8005f18 <HAL_FDCAN_Init+0x13c>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005e96:	6822      	ldr	r2, [r4, #0]
 8005e98:	6993      	ldr	r3, [r2, #24]
 8005e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e9e:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005ea0:	7c63      	ldrb	r3, [r4, #17]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d03e      	beq.n	8005f24 <HAL_FDCAN_Init+0x148>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005ea6:	6822      	ldr	r2, [r4, #0]
 8005ea8:	6993      	ldr	r3, [r2, #24]
 8005eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eae:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005eb0:	7ca3      	ldrb	r3, [r4, #18]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d03c      	beq.n	8005f30 <HAL_FDCAN_Init+0x154>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005eb6:	6822      	ldr	r2, [r4, #0]
 8005eb8:	6993      	ldr	r3, [r2, #24]
 8005eba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ebe:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005ec0:	6822      	ldr	r2, [r4, #0]
 8005ec2:	6993      	ldr	r3, [r2, #24]
 8005ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ec8:	68a1      	ldr	r1, [r4, #8]
 8005eca:	430b      	orrs	r3, r1
 8005ecc:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005ece:	6822      	ldr	r2, [r4, #0]
 8005ed0:	6993      	ldr	r3, [r2, #24]
 8005ed2:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8005ed6:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005ed8:	6822      	ldr	r2, [r4, #0]
 8005eda:	6913      	ldr	r3, [r2, #16]
 8005edc:	f023 0310 	bic.w	r3, r3, #16
 8005ee0:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005ee2:	68e3      	ldr	r3, [r4, #12]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d029      	beq.n	8005f3c <HAL_FDCAN_Init+0x160>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d02c      	beq.n	8005f46 <HAL_FDCAN_Init+0x16a>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	f000 809b 	beq.w	8006028 <HAL_FDCAN_Init+0x24c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005ef2:	6822      	ldr	r2, [r4, #0]
 8005ef4:	6993      	ldr	r3, [r2, #24]
 8005ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efa:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005efc:	6822      	ldr	r2, [r4, #0]
 8005efe:	6913      	ldr	r3, [r2, #16]
 8005f00:	f043 0310 	orr.w	r3, r3, #16
 8005f04:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005f06:	68e3      	ldr	r3, [r4, #12]
 8005f08:	2b03      	cmp	r3, #3
 8005f0a:	d11c      	bne.n	8005f46 <HAL_FDCAN_Init+0x16a>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005f0c:	6822      	ldr	r2, [r4, #0]
 8005f0e:	6993      	ldr	r3, [r2, #24]
 8005f10:	f043 0320 	orr.w	r3, r3, #32
 8005f14:	6193      	str	r3, [r2, #24]
 8005f16:	e016      	b.n	8005f46 <HAL_FDCAN_Init+0x16a>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005f18:	6822      	ldr	r2, [r4, #0]
 8005f1a:	6993      	ldr	r3, [r2, #24]
 8005f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f20:	6193      	str	r3, [r2, #24]
 8005f22:	e7bd      	b.n	8005ea0 <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005f24:	6822      	ldr	r2, [r4, #0]
 8005f26:	6993      	ldr	r3, [r2, #24]
 8005f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f2c:	6193      	str	r3, [r2, #24]
 8005f2e:	e7bf      	b.n	8005eb0 <HAL_FDCAN_Init+0xd4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	6993      	ldr	r3, [r2, #24]
 8005f34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f38:	6193      	str	r3, [r2, #24]
 8005f3a:	e7c1      	b.n	8005ec0 <HAL_FDCAN_Init+0xe4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005f3c:	6822      	ldr	r2, [r4, #0]
 8005f3e:	6993      	ldr	r3, [r2, #24]
 8005f40:	f043 0304 	orr.w	r3, r3, #4
 8005f44:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005f46:	69a3      	ldr	r3, [r4, #24]
 8005f48:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005f4a:	69e3      	ldr	r3, [r4, #28]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005f50:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005f54:	6a22      	ldr	r2, [r4, #32]
 8005f56:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005f58:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005f5a:	6962      	ldr	r2, [r4, #20]
 8005f5c:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005f5e:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005f60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005f64:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005f66:	68a3      	ldr	r3, [r4, #8]
 8005f68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f6c:	d062      	beq.n	8006034 <HAL_FDCAN_Init+0x258>
  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005f6e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005f70:	b133      	cbz	r3, 8005f80 <HAL_FDCAN_Init+0x1a4>
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005f72:	6822      	ldr	r2, [r4, #0]
 8005f74:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005f78:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005f7a:	430b      	orrs	r3, r1
 8005f7c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005f80:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005f82:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005f84:	42d3      	cmn	r3, r2
 8005f86:	d00d      	beq.n	8005fa4 <HAL_FDCAN_Init+0x1c8>
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005f88:	6821      	ldr	r1, [r4, #0]
 8005f8a:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
 8005f8e:	f023 0307 	bic.w	r3, r3, #7
 8005f92:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8005f94:	a814      	add	r0, sp, #80	; 0x50
 8005f96:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005f9a:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	f8c1 30c8 	str.w	r3, [r1, #200]	; 0xc8
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005fa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fa6:	b16b      	cbz	r3, 8005fc4 <HAL_FDCAN_Init+0x1e8>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005fa8:	6821      	ldr	r1, [r4, #0]
 8005faa:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 8005fae:	f023 0307 	bic.w	r3, r3, #7
 8005fb2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005fb4:	a814      	add	r0, sp, #80	; 0x50
 8005fb6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005fba:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005fc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005fc6:	b173      	cbz	r3, 8005fe6 <HAL_FDCAN_Init+0x20a>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005fc8:	6821      	ldr	r1, [r4, #0]
 8005fca:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 8005fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005fd4:	a814      	add	r0, sp, #80	; 0x50
 8005fd6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005fda:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005fde:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005fe2:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005fe6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005fe8:	b173      	cbz	r3, 8006008 <HAL_FDCAN_Init+0x22c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005fea:	6821      	ldr	r1, [r4, #0]
 8005fec:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 8005ff0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005ff4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005ff6:	a814      	add	r0, sp, #80	; 0x50
 8005ff8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005ffc:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006000:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006004:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
  if (hfdcan->Instance == FDCAN1)
 8006008:	6822      	ldr	r2, [r4, #0]
 800600a:	4b18      	ldr	r3, [pc, #96]	; (800606c <HAL_FDCAN_Init+0x290>)
 800600c:	429a      	cmp	r2, r3
 800600e:	d022      	beq.n	8006056 <HAL_FDCAN_Init+0x27a>
  hfdcan->LatestTxFifoQRequest = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006016:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800601a:	2301      	movs	r3, #1
 800601c:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006020:	4620      	mov	r0, r4
 8006022:	f7ff fdad 	bl	8005b80 <FDCAN_CalcultateRamBlockAddresses>
  return status;
 8006026:	e707      	b.n	8005e38 <HAL_FDCAN_Init+0x5c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006028:	6822      	ldr	r2, [r4, #0]
 800602a:	6993      	ldr	r3, [r2, #24]
 800602c:	f043 0320 	orr.w	r3, r3, #32
 8006030:	6193      	str	r3, [r2, #24]
 8006032:	e788      	b.n	8005f46 <HAL_FDCAN_Init+0x16a>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006034:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006036:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006038:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800603a:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800603c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006040:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006042:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006044:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006048:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800604a:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800604c:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800604e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006052:	60cb      	str	r3, [r1, #12]
 8006054:	e78b      	b.n	8005f6e <HAL_FDCAN_Init+0x192>
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006056:	6862      	ldr	r2, [r4, #4]
 8006058:	6893      	ldr	r3, [r2, #8]
 800605a:	f023 0303 	bic.w	r3, r3, #3
 800605e:	6093      	str	r3, [r2, #8]
 8006060:	e7d6      	b.n	8006010 <HAL_FDCAN_Init+0x234>
    return HAL_ERROR;
 8006062:	2001      	movs	r0, #1
 8006064:	e6e8      	b.n	8005e38 <HAL_FDCAN_Init+0x5c>
 8006066:	bf00      	nop
 8006068:	0801bd18 	.word	0x0801bd18
 800606c:	4000a000 	.word	0x4000a000

08006070 <HAL_FDCAN_ConfigGlobalFilter>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006070:	f890 c098 	ldrb.w	ip, [r0, #152]	; 0x98
 8006074:	fa5f fc8c 	uxtb.w	ip, ip
 8006078:	f1bc 0f01 	cmp.w	ip, #1
 800607c:	d007      	beq.n	800608e <HAL_FDCAN_ConfigGlobalFilter+0x1e>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800607e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8006082:	f043 0304 	orr.w	r3, r3, #4
 8006086:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
 800608a:	2001      	movs	r0, #1
}
 800608c:	4770      	bx	lr
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800608e:	0092      	lsls	r2, r2, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006090:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8006094:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006098:	6803      	ldr	r3, [r0, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800609a:	9900      	ldr	r1, [sp, #0]
 800609c:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800609e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    return HAL_OK;
 80060a2:	2000      	movs	r0, #0
 80060a4:	4770      	bx	lr

080060a6 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80060a6:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d007      	beq.n	80060c0 <HAL_FDCAN_Start+0x1a>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80060b0:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 80060b4:	f043 0304 	orr.w	r3, r3, #4
 80060b8:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
 80060bc:	2001      	movs	r0, #1
}
 80060be:	4770      	bx	lr
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80060c0:	2302      	movs	r3, #2
 80060c2:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80060c6:	6802      	ldr	r2, [r0, #0]
 80060c8:	6993      	ldr	r3, [r2, #24]
 80060ca:	f023 0301 	bic.w	r3, r3, #1
 80060ce:	6193      	str	r3, [r2, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80060d0:	2300      	movs	r3, #0
 80060d2:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_OK;
 80060d6:	4618      	mov	r0, r3
 80060d8:	4770      	bx	lr

080060da <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 80060da:	b538      	push	{r3, r4, r5, lr}
 80060dc:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80060de:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d12b      	bne.n	8006140 <HAL_FDCAN_AddMessageToTxFifoQ+0x66>
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80060e8:	6803      	ldr	r3, [r0, #0]
 80060ea:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80060ee:	f010 5f7c 	tst.w	r0, #1056964608	; 0x3f000000
 80060f2:	d00c      	beq.n	800610e <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80060f4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80060f8:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80060fc:	d00f      	beq.n	800611e <HAL_FDCAN_AddMessageToTxFifoQ+0x44>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80060fe:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8006102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006106:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
      return HAL_ERROR;
 800610a:	2001      	movs	r0, #1
 800610c:	e01f      	b.n	800614e <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800610e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8006112:	f043 0320 	orr.w	r3, r3, #32
 8006116:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
      return HAL_ERROR;
 800611a:	2001      	movs	r0, #1
 800611c:	e017      	b.n	800614e <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800611e:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
 8006122:	f3c5 4504 	ubfx	r5, r5, #16, #5
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006126:	462b      	mov	r3, r5
 8006128:	4620      	mov	r0, r4
 800612a:	f7ff fe13 	bl	8005d54 <FDCAN_CopyMessageToRAM>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800612e:	6822      	ldr	r2, [r4, #0]
 8006130:	2301      	movs	r3, #1
 8006132:	40ab      	lsls	r3, r5
 8006134:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006138:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    return HAL_OK;
 800613c:	2000      	movs	r0, #0
 800613e:	e006      	b.n	800614e <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006140:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8006144:	f043 0308 	orr.w	r3, r3, #8
 8006148:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
 800614c:	2001      	movs	r0, #1
}
 800614e:	bd38      	pop	{r3, r4, r5, pc}

08006150 <HAL_FDCAN_GetRxMessage>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006150:	f890 c098 	ldrb.w	ip, [r0, #152]	; 0x98
 8006154:	fa5f fc8c 	uxtb.w	ip, ip
  if (state == HAL_FDCAN_STATE_BUSY)
 8006158:	f1bc 0f02 	cmp.w	ip, #2
 800615c:	f040 80de 	bne.w	800631c <HAL_FDCAN_GetRxMessage+0x1cc>
{
 8006160:	b570      	push	{r4, r5, r6, lr}
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006162:	2940      	cmp	r1, #64	; 0x40
 8006164:	d00c      	beq.n	8006180 <HAL_FDCAN_GetRxMessage+0x30>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006166:	2941      	cmp	r1, #65	; 0x41
 8006168:	d03b      	beq.n	80061e2 <HAL_FDCAN_GetRxMessage+0x92>
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800616a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800616c:	428c      	cmp	r4, r1
 800616e:	d869      	bhi.n	8006244 <HAL_FDCAN_GetRxMessage+0xf4>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006170:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8006174:	f043 0320 	orr.w	r3, r3, #32
 8006178:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        return HAL_ERROR;
 800617c:	2001      	movs	r0, #1
 800617e:	e0bf      	b.n	8006300 <HAL_FDCAN_GetRxMessage+0x1b0>
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8006180:	6804      	ldr	r4, [r0, #0]
 8006182:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 8006186:	f415 0ffe 	tst.w	r5, #8323072	; 0x7f0000
 800618a:	d00c      	beq.n	80061a6 <HAL_FDCAN_GetRxMessage+0x56>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800618c:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 8006190:	f015 0f7f 	tst.w	r5, #127	; 0x7f
 8006194:	d10f      	bne.n	80061b6 <HAL_FDCAN_GetRxMessage+0x66>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006196:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 800619a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800619e:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        return HAL_ERROR;
 80061a2:	2001      	movs	r0, #1
 80061a4:	e0ac      	b.n	8006300 <HAL_FDCAN_GetRxMessage+0x1b0>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80061a6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 80061aa:	f043 0320 	orr.w	r3, r3, #32
 80061ae:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        return HAL_ERROR;
 80061b2:	2001      	movs	r0, #1
 80061b4:	e0a4      	b.n	8006300 <HAL_FDCAN_GetRxMessage+0x1b0>
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80061b6:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 80061ba:	f3c5 6600 	ubfx	r6, r5, #24, #1
 80061be:	f015 7f80 	tst.w	r5, #16777216	; 0x1000000
 80061c2:	d002      	beq.n	80061ca <HAL_FDCAN_GetRxMessage+0x7a>
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80061c4:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
  uint32_t GetIndex = 0;
 80061c8:	2600      	movs	r6, #0
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80061ca:	f8d4 40a4 	ldr.w	r4, [r4, #164]	; 0xa4
 80061ce:	f3c4 2405 	ubfx	r4, r4, #8, #6
 80061d2:	4426      	add	r6, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80061d4:	6f45      	ldr	r5, [r0, #116]	; 0x74
 80061d6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80061d8:	fb06 f404 	mul.w	r4, r6, r4
 80061dc:	eb05 0c84 	add.w	ip, r5, r4, lsl #2
 80061e0:	e037      	b.n	8006252 <HAL_FDCAN_GetRxMessage+0x102>
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80061e2:	6804      	ldr	r4, [r0, #0]
 80061e4:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 80061e8:	f415 0ffe 	tst.w	r5, #8323072	; 0x7f0000
 80061ec:	d00c      	beq.n	8006208 <HAL_FDCAN_GetRxMessage+0xb8>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80061ee:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 80061f2:	f015 0f7f 	tst.w	r5, #127	; 0x7f
 80061f6:	d10f      	bne.n	8006218 <HAL_FDCAN_GetRxMessage+0xc8>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80061f8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 80061fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006200:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        return HAL_ERROR;
 8006204:	2001      	movs	r0, #1
 8006206:	e07b      	b.n	8006300 <HAL_FDCAN_GetRxMessage+0x1b0>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006208:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 800620c:	f043 0320 	orr.w	r3, r3, #32
 8006210:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        return HAL_ERROR;
 8006214:	2001      	movs	r0, #1
 8006216:	e073      	b.n	8006300 <HAL_FDCAN_GetRxMessage+0x1b0>
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006218:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 800621c:	f3c5 6600 	ubfx	r6, r5, #24, #1
 8006220:	f015 7f80 	tst.w	r5, #16777216	; 0x1000000
 8006224:	d002      	beq.n	800622c <HAL_FDCAN_GetRxMessage+0xdc>
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006226:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
  uint32_t GetIndex = 0;
 800622a:	2600      	movs	r6, #0
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800622c:	f8d4 40b4 	ldr.w	r4, [r4, #180]	; 0xb4
 8006230:	f3c4 2405 	ubfx	r4, r4, #8, #6
 8006234:	4426      	add	r6, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8006236:	6f85      	ldr	r5, [r0, #120]	; 0x78
 8006238:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800623a:	fb06 f404 	mul.w	r4, r6, r4
 800623e:	eb05 0c84 	add.w	ip, r5, r4, lsl #2
 8006242:	e006      	b.n	8006252 <HAL_FDCAN_GetRxMessage+0x102>
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8006244:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
 8006246:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8006248:	fb01 f404 	mul.w	r4, r1, r4
 800624c:	eb05 0c84 	add.w	ip, r5, r4, lsl #2
  uint32_t GetIndex = 0;
 8006250:	2600      	movs	r6, #0
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006252:	f8dc 4000 	ldr.w	r4, [ip]
 8006256:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 800625a:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800625c:	bb74      	cbnz	r4, 80062bc <HAL_FDCAN_GetRxMessage+0x16c>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800625e:	f8dc 4000 	ldr.w	r4, [ip]
 8006262:	f3c4 448a 	ubfx	r4, r4, #18, #11
 8006266:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006268:	f8dc 4000 	ldr.w	r4, [ip]
 800626c:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 8006270:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006272:	f8dc 4000 	ldr.w	r4, [ip]
 8006276:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 800627a:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800627c:	f8bc 4004 	ldrh.w	r4, [ip, #4]
 8006280:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006282:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8006286:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 800628a:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800628c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8006290:	f404 1480 	and.w	r4, r4, #1048576	; 0x100000
 8006294:	6154      	str	r4, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006296:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800629a:	f404 1400 	and.w	r4, r4, #2097152	; 0x200000
 800629e:	6194      	str	r4, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80062a0:	f89c 4007 	ldrb.w	r4, [ip, #7]
 80062a4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80062a8:	6214      	str	r4, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80062aa:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80062ae:	0fe4      	lsrs	r4, r4, #31
 80062b0:	6254      	str	r4, [r2, #36]	; 0x24
    RxAddress++;
 80062b2:	f10c 0e08 	add.w	lr, ip, #8
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80062b6:	f04f 0c00 	mov.w	ip, #0
 80062ba:	e00b      	b.n	80062d4 <HAL_FDCAN_GetRxMessage+0x184>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80062bc:	f8dc 4000 	ldr.w	r4, [ip]
 80062c0:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
 80062c4:	6014      	str	r4, [r2, #0]
 80062c6:	e7cf      	b.n	8006268 <HAL_FDCAN_GetRxMessage+0x118>
      pRxData[ByteCounter] = pData[ByteCounter];
 80062c8:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80062cc:	f803 400c 	strb.w	r4, [r3, ip]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80062d0:	f10c 0c01 	add.w	ip, ip, #1
 80062d4:	89d4      	ldrh	r4, [r2, #14]
 80062d6:	4d15      	ldr	r5, [pc, #84]	; (800632c <HAL_FDCAN_GetRxMessage+0x1dc>)
 80062d8:	5d2c      	ldrb	r4, [r5, r4]
 80062da:	4564      	cmp	r4, ip
 80062dc:	d8f4      	bhi.n	80062c8 <HAL_FDCAN_GetRxMessage+0x178>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80062de:	2940      	cmp	r1, #64	; 0x40
 80062e0:	d00a      	beq.n	80062f8 <HAL_FDCAN_GetRxMessage+0x1a8>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80062e2:	2941      	cmp	r1, #65	; 0x41
 80062e4:	d00d      	beq.n	8006302 <HAL_FDCAN_GetRxMessage+0x1b2>
      if (RxLocation < FDCAN_RX_BUFFER32)
 80062e6:	291f      	cmp	r1, #31
 80062e8:	d80f      	bhi.n	800630a <HAL_FDCAN_GetRxMessage+0x1ba>
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80062ea:	6802      	ldr	r2, [r0, #0]
 80062ec:	2301      	movs	r3, #1
 80062ee:	fa03 f101 	lsl.w	r1, r3, r1
 80062f2:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
 80062f6:	e002      	b.n	80062fe <HAL_FDCAN_GetRxMessage+0x1ae>
      hfdcan->Instance->RXF0A = GetIndex;
 80062f8:	6803      	ldr	r3, [r0, #0]
 80062fa:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
    return HAL_OK;
 80062fe:	2000      	movs	r0, #0
}
 8006300:	bd70      	pop	{r4, r5, r6, pc}
      hfdcan->Instance->RXF1A = GetIndex;
 8006302:	6803      	ldr	r3, [r0, #0]
 8006304:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
 8006308:	e7f9      	b.n	80062fe <HAL_FDCAN_GetRxMessage+0x1ae>
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800630a:	f001 011f 	and.w	r1, r1, #31
 800630e:	6802      	ldr	r2, [r0, #0]
 8006310:	2301      	movs	r3, #1
 8006312:	fa03 f101 	lsl.w	r1, r3, r1
 8006316:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
 800631a:	e7f0      	b.n	80062fe <HAL_FDCAN_GetRxMessage+0x1ae>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800631c:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8006320:	f043 0308 	orr.w	r3, r3, #8
 8006324:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
 8006328:	2001      	movs	r0, #1
}
 800632a:	4770      	bx	lr
 800632c:	0801bfac 	.word	0x0801bfac

08006330 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006330:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006334:	3b01      	subs	r3, #1
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b01      	cmp	r3, #1
 800633a:	d907      	bls.n	800634c <HAL_FDCAN_ActivateNotification+0x1c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800633c:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8006340:	f043 0302 	orr.w	r3, r3, #2
 8006344:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
 8006348:	2001      	movs	r0, #1
}
 800634a:	4770      	bx	lr
{
 800634c:	b410      	push	{r4}
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800634e:	6803      	ldr	r3, [r0, #0]
 8006350:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8006352:	420c      	tst	r4, r1
 8006354:	d124      	bne.n	80063a0 <HAL_FDCAN_ActivateNotification+0x70>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006356:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8006358:	f044 0401 	orr.w	r4, r4, #1
 800635c:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800635e:	f411 7f00 	tst.w	r1, #512	; 0x200
 8006362:	d005      	beq.n	8006370 <HAL_FDCAN_ActivateNotification+0x40>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006364:	6804      	ldr	r4, [r0, #0]
 8006366:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800636a:	4313      	orrs	r3, r2
 800636c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006370:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8006374:	d005      	beq.n	8006382 <HAL_FDCAN_ActivateNotification+0x52>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006376:	6804      	ldr	r4, [r0, #0]
 8006378:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 800637c:	431a      	orrs	r2, r3
 800637e:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006382:	6800      	ldr	r0, [r0, #0]
 8006384:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006386:	4a0c      	ldr	r2, [pc, #48]	; (80063b8 <HAL_FDCAN_ActivateNotification+0x88>)
 8006388:	400a      	ands	r2, r1
 800638a:	4313      	orrs	r3, r2
 800638c:	6543      	str	r3, [r0, #84]	; 0x54
 800638e:	4a0b      	ldr	r2, [pc, #44]	; (80063bc <HAL_FDCAN_ActivateNotification+0x8c>)
 8006390:	6953      	ldr	r3, [r2, #20]
 8006392:	ea43 7191 	orr.w	r1, r3, r1, lsr #30
 8006396:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8006398:	2000      	movs	r0, #0
}
 800639a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800639e:	4770      	bx	lr
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80063a0:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 80063a2:	ea31 0404 	bics.w	r4, r1, r4
 80063a6:	d002      	beq.n	80063ae <HAL_FDCAN_ActivateNotification+0x7e>
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80063a8:	2403      	movs	r4, #3
 80063aa:	65dc      	str	r4, [r3, #92]	; 0x5c
 80063ac:	e7d7      	b.n	800635e <HAL_FDCAN_ActivateNotification+0x2e>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80063ae:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 80063b0:	f044 0402 	orr.w	r4, r4, #2
 80063b4:	65dc      	str	r4, [r3, #92]	; 0x5c
 80063b6:	e7d2      	b.n	800635e <HAL_FDCAN_ActivateNotification+0x2e>
 80063b8:	3fcfffff 	.word	0x3fcfffff
 80063bc:	4000a800 	.word	0x4000a800

080063c0 <HAL_FDCAN_ClockCalibrationCallback>:
}
 80063c0:	4770      	bx	lr

080063c2 <HAL_FDCAN_TxEventFifoCallback>:
}
 80063c2:	4770      	bx	lr

080063c4 <HAL_FDCAN_RxFifo1Callback>:
}
 80063c4:	4770      	bx	lr

080063c6 <HAL_FDCAN_TxFifoEmptyCallback>:
}
 80063c6:	4770      	bx	lr

080063c8 <HAL_FDCAN_TxBufferCompleteCallback>:
}
 80063c8:	4770      	bx	lr

080063ca <HAL_FDCAN_TxBufferAbortCallback>:
}
 80063ca:	4770      	bx	lr

080063cc <HAL_FDCAN_RxBufferNewMessageCallback>:
}
 80063cc:	4770      	bx	lr

080063ce <HAL_FDCAN_TimestampWraparoundCallback>:
}
 80063ce:	4770      	bx	lr

080063d0 <HAL_FDCAN_TimeoutOccurredCallback>:
}
 80063d0:	4770      	bx	lr

080063d2 <HAL_FDCAN_HighPriorityMessageCallback>:
}
 80063d2:	4770      	bx	lr

080063d4 <HAL_FDCAN_ErrorCallback>:
}
 80063d4:	4770      	bx	lr

080063d6 <HAL_FDCAN_ErrorStatusCallback>:
}
 80063d6:	4770      	bx	lr

080063d8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
}
 80063d8:	4770      	bx	lr

080063da <HAL_FDCAN_TT_TimeMarkCallback>:
}
 80063da:	4770      	bx	lr

080063dc <HAL_FDCAN_TT_StopWatchCallback>:
}
 80063dc:	4770      	bx	lr

080063de <HAL_FDCAN_TT_GlobalTimeCallback>:
}
 80063de:	4770      	bx	lr

080063e0 <HAL_FDCAN_IRQHandler>:
{
 80063e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e4:	b083      	sub	sp, #12
 80063e6:	4604      	mov	r4, r0
  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80063e8:	4bb0      	ldr	r3, [pc, #704]	; (80066ac <HAL_FDCAN_IRQHandler+0x2cc>)
 80063ea:	691a      	ldr	r2, [r3, #16]
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	079b      	lsls	r3, r3, #30
 80063f0:	ea03 7382 	and.w	r3, r3, r2, lsl #30
 80063f4:	9301      	str	r3, [sp, #4]
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80063f6:	6803      	ldr	r3, [r0, #0]
 80063f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063fa:	f402 4a70 	and.w	sl, r2, #61440	; 0xf000
  TxEventFifoITs &= hfdcan->Instance->IE;
 80063fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006400:	ea0a 0a02 	and.w	sl, sl, r2
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006404:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006406:	f002 090f 	and.w	r9, r2, #15
  RxFifo0ITs &= hfdcan->Instance->IE;
 800640a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800640c:	ea09 0902 	and.w	r9, r9, r2
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006410:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006412:	f002 08f0 	and.w	r8, r2, #240	; 0xf0
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006416:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006418:	ea08 0802 	and.w	r8, r8, r2
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800641c:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 800641e:	f006 5671 	and.w	r6, r6, #1010827264	; 0x3c400000
  Errors &= hfdcan->Instance->IE;
 8006422:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006424:	4016      	ands	r6, r2
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006426:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 8006428:	f007 7760 	and.w	r7, r7, #58720256	; 0x3800000
  ErrorStatusITs &= hfdcan->Instance->IE;
 800642c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800642e:	4017      	ands	r7, r2
  itsourceIE = hfdcan->Instance->IE;
 8006430:	6d5d      	ldr	r5, [r3, #84]	; 0x54
  itflagIR = hfdcan->Instance->IR;
 8006432:	f8d3 b050 	ldr.w	fp, [r3, #80]	; 0x50
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006436:	f415 7f80 	tst.w	r5, #256	; 0x100
 800643a:	d002      	beq.n	8006442 <HAL_FDCAN_IRQHandler+0x62>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800643c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006440:	d164      	bne.n	800650c <HAL_FDCAN_IRQHandler+0x12c>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006442:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8006446:	d002      	beq.n	800644e <HAL_FDCAN_IRQHandler+0x6e>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8006448:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 800644c:	d167      	bne.n	800651e <HAL_FDCAN_IRQHandler+0x13e>
  if (ClkCalibrationITs != 0U)
 800644e:	9b01      	ldr	r3, [sp, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d174      	bne.n	800653e <HAL_FDCAN_IRQHandler+0x15e>
  if (TxEventFifoITs != 0U)
 8006454:	f1ba 0f00 	cmp.w	sl, #0
 8006458:	d17c      	bne.n	8006554 <HAL_FDCAN_IRQHandler+0x174>
  if (RxFifo0ITs != 0U)
 800645a:	f1b9 0f00 	cmp.w	r9, #0
 800645e:	f040 8085 	bne.w	800656c <HAL_FDCAN_IRQHandler+0x18c>
  if (RxFifo1ITs != 0U)
 8006462:	f1b8 0f00 	cmp.w	r8, #0
 8006466:	f040 808d 	bne.w	8006584 <HAL_FDCAN_IRQHandler+0x1a4>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800646a:	f415 6f00 	tst.w	r5, #2048	; 0x800
 800646e:	d003      	beq.n	8006478 <HAL_FDCAN_IRQHandler+0x98>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006470:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 8006474:	f040 8092 	bne.w	800659c <HAL_FDCAN_IRQHandler+0x1bc>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8006478:	f415 7f00 	tst.w	r5, #512	; 0x200
 800647c:	d003      	beq.n	8006486 <HAL_FDCAN_IRQHandler+0xa6>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800647e:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8006482:	f040 8096 	bne.w	80065b2 <HAL_FDCAN_IRQHandler+0x1d2>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8006486:	f415 2f00 	tst.w	r5, #524288	; 0x80000
 800648a:	d003      	beq.n	8006494 <HAL_FDCAN_IRQHandler+0xb4>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800648c:	f41b 2f00 	tst.w	fp, #524288	; 0x80000
 8006490:	f040 809f 	bne.w	80065d2 <HAL_FDCAN_IRQHandler+0x1f2>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006494:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8006498:	d003      	beq.n	80064a2 <HAL_FDCAN_IRQHandler+0xc2>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800649a:	f41b 3f80 	tst.w	fp, #65536	; 0x10000
 800649e:	f040 80a3 	bne.w	80065e8 <HAL_FDCAN_IRQHandler+0x208>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80064a2:	f415 2f80 	tst.w	r5, #262144	; 0x40000
 80064a6:	d003      	beq.n	80064b0 <HAL_FDCAN_IRQHandler+0xd0>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80064a8:	f41b 2f80 	tst.w	fp, #262144	; 0x40000
 80064ac:	f040 80a7 	bne.w	80065fe <HAL_FDCAN_IRQHandler+0x21e>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80064b0:	f415 3f00 	tst.w	r5, #131072	; 0x20000
 80064b4:	d00f      	beq.n	80064d6 <HAL_FDCAN_IRQHandler+0xf6>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80064b6:	f41b 3f00 	tst.w	fp, #131072	; 0x20000
 80064ba:	d00c      	beq.n	80064d6 <HAL_FDCAN_IRQHandler+0xf6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80064c2:	651a      	str	r2, [r3, #80]	; 0x50
 80064c4:	4b79      	ldr	r3, [pc, #484]	; (80066ac <HAL_FDCAN_IRQHandler+0x2cc>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	611a      	str	r2, [r3, #16]
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80064ca:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80064ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (ErrorStatusITs != 0U)
 80064d6:	2f00      	cmp	r7, #0
 80064d8:	f040 809c 	bne.w	8006614 <HAL_FDCAN_IRQHandler+0x234>
  if (Errors != 0U)
 80064dc:	b14e      	cbz	r6, 80064f2 <HAL_FDCAN_IRQHandler+0x112>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	651e      	str	r6, [r3, #80]	; 0x50
 80064e2:	0fb2      	lsrs	r2, r6, #30
 80064e4:	4b71      	ldr	r3, [pc, #452]	; (80066ac <HAL_FDCAN_IRQHandler+0x2cc>)
 80064e6:	611a      	str	r2, [r3, #16]
    hfdcan->ErrorCode |= Errors;
 80064e8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80064ec:	431e      	orrs	r6, r3
 80064ee:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
  if (hfdcan->Instance == FDCAN1)
 80064f2:	6822      	ldr	r2, [r4, #0]
 80064f4:	4b6e      	ldr	r3, [pc, #440]	; (80066b0 <HAL_FDCAN_IRQHandler+0x2d0>)
 80064f6:	429a      	cmp	r2, r3
 80064f8:	f000 8096 	beq.w	8006628 <HAL_FDCAN_IRQHandler+0x248>
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80064fc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8006500:	2b00      	cmp	r3, #0
 8006502:	f040 80f7 	bne.w	80066f4 <HAL_FDCAN_IRQHandler+0x314>
}
 8006506:	b003      	add	sp, #12
 8006508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800650c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006510:	651a      	str	r2, [r3, #80]	; 0x50
 8006512:	4b66      	ldr	r3, [pc, #408]	; (80066ac <HAL_FDCAN_IRQHandler+0x2cc>)
 8006514:	2200      	movs	r2, #0
 8006516:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006518:	f7ff ff5b 	bl	80063d2 <HAL_FDCAN_HighPriorityMessageCallback>
 800651c:	e791      	b.n	8006442 <HAL_FDCAN_IRQHandler+0x62>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006524:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006528:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800652c:	6518      	str	r0, [r3, #80]	; 0x50
 800652e:	4b5f      	ldr	r3, [pc, #380]	; (80066ac <HAL_FDCAN_IRQHandler+0x2cc>)
 8006530:	2000      	movs	r0, #0
 8006532:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006534:	4011      	ands	r1, r2
 8006536:	4620      	mov	r0, r4
 8006538:	f7ff ff47 	bl	80063ca <HAL_FDCAN_TxBufferAbortCallback>
 800653c:	e787      	b.n	800644e <HAL_FDCAN_IRQHandler+0x6e>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	2200      	movs	r2, #0
 8006542:	651a      	str	r2, [r3, #80]	; 0x50
 8006544:	9901      	ldr	r1, [sp, #4]
 8006546:	0f8a      	lsrs	r2, r1, #30
 8006548:	4b58      	ldr	r3, [pc, #352]	; (80066ac <HAL_FDCAN_IRQHandler+0x2cc>)
 800654a:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800654c:	4620      	mov	r0, r4
 800654e:	f7ff ff37 	bl	80063c0 <HAL_FDCAN_ClockCalibrationCallback>
 8006552:	e77f      	b.n	8006454 <HAL_FDCAN_IRQHandler+0x74>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	f8c3 a050 	str.w	sl, [r3, #80]	; 0x50
 800655a:	ea4f 729a 	mov.w	r2, sl, lsr #30
 800655e:	4b53      	ldr	r3, [pc, #332]	; (80066ac <HAL_FDCAN_IRQHandler+0x2cc>)
 8006560:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006562:	4651      	mov	r1, sl
 8006564:	4620      	mov	r0, r4
 8006566:	f7ff ff2c 	bl	80063c2 <HAL_FDCAN_TxEventFifoCallback>
 800656a:	e776      	b.n	800645a <HAL_FDCAN_IRQHandler+0x7a>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
 8006572:	ea4f 7299 	mov.w	r2, r9, lsr #30
 8006576:	4b4d      	ldr	r3, [pc, #308]	; (80066ac <HAL_FDCAN_IRQHandler+0x2cc>)
 8006578:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800657a:	4649      	mov	r1, r9
 800657c:	4620      	mov	r0, r4
 800657e:	f7fb fa9b 	bl	8001ab8 <HAL_FDCAN_RxFifo0Callback>
 8006582:	e76e      	b.n	8006462 <HAL_FDCAN_IRQHandler+0x82>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 800658a:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800658e:	4b47      	ldr	r3, [pc, #284]	; (80066ac <HAL_FDCAN_IRQHandler+0x2cc>)
 8006590:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006592:	4641      	mov	r1, r8
 8006594:	4620      	mov	r0, r4
 8006596:	f7ff ff15 	bl	80063c4 <HAL_FDCAN_RxFifo1Callback>
 800659a:	e766      	b.n	800646a <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065a2:	651a      	str	r2, [r3, #80]	; 0x50
 80065a4:	4b41      	ldr	r3, [pc, #260]	; (80066ac <HAL_FDCAN_IRQHandler+0x2cc>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80065aa:	4620      	mov	r0, r4
 80065ac:	f7ff ff0b 	bl	80063c6 <HAL_FDCAN_TxFifoEmptyCallback>
 80065b0:	e762      	b.n	8006478 <HAL_FDCAN_IRQHandler+0x98>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80065b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80065bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80065c0:	6518      	str	r0, [r3, #80]	; 0x50
 80065c2:	4b3a      	ldr	r3, [pc, #232]	; (80066ac <HAL_FDCAN_IRQHandler+0x2cc>)
 80065c4:	2000      	movs	r0, #0
 80065c6:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80065c8:	4011      	ands	r1, r2
 80065ca:	4620      	mov	r0, r4
 80065cc:	f7ff fefc 	bl	80063c8 <HAL_FDCAN_TxBufferCompleteCallback>
 80065d0:	e759      	b.n	8006486 <HAL_FDCAN_IRQHandler+0xa6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80065d8:	651a      	str	r2, [r3, #80]	; 0x50
 80065da:	4b34      	ldr	r3, [pc, #208]	; (80066ac <HAL_FDCAN_IRQHandler+0x2cc>)
 80065dc:	2200      	movs	r2, #0
 80065de:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80065e0:	4620      	mov	r0, r4
 80065e2:	f7ff fef3 	bl	80063cc <HAL_FDCAN_RxBufferNewMessageCallback>
 80065e6:	e755      	b.n	8006494 <HAL_FDCAN_IRQHandler+0xb4>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80065ee:	651a      	str	r2, [r3, #80]	; 0x50
 80065f0:	4b2e      	ldr	r3, [pc, #184]	; (80066ac <HAL_FDCAN_IRQHandler+0x2cc>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80065f6:	4620      	mov	r0, r4
 80065f8:	f7ff fee9 	bl	80063ce <HAL_FDCAN_TimestampWraparoundCallback>
 80065fc:	e751      	b.n	80064a2 <HAL_FDCAN_IRQHandler+0xc2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006604:	651a      	str	r2, [r3, #80]	; 0x50
 8006606:	4b29      	ldr	r3, [pc, #164]	; (80066ac <HAL_FDCAN_IRQHandler+0x2cc>)
 8006608:	2200      	movs	r2, #0
 800660a:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800660c:	4620      	mov	r0, r4
 800660e:	f7ff fedf 	bl	80063d0 <HAL_FDCAN_TimeoutOccurredCallback>
 8006612:	e74d      	b.n	80064b0 <HAL_FDCAN_IRQHandler+0xd0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	651f      	str	r7, [r3, #80]	; 0x50
 8006618:	0fba      	lsrs	r2, r7, #30
 800661a:	4b24      	ldr	r3, [pc, #144]	; (80066ac <HAL_FDCAN_IRQHandler+0x2cc>)
 800661c:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800661e:	4639      	mov	r1, r7
 8006620:	4620      	mov	r0, r4
 8006622:	f7ff fed8 	bl	80063d6 <HAL_FDCAN_ErrorStatusCallback>
 8006626:	e759      	b.n	80064dc <HAL_FDCAN_IRQHandler+0xfc>
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8006628:	6863      	ldr	r3, [r4, #4]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	f012 0f03 	tst.w	r2, #3
 8006630:	f43f af64 	beq.w	80064fc <HAL_FDCAN_IRQHandler+0x11c>
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8006634:	6a19      	ldr	r1, [r3, #32]
 8006636:	f001 010f 	and.w	r1, r1, #15
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800663a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800663c:	6a18      	ldr	r0, [r3, #32]
 800663e:	f000 0830 	and.w	r8, r0, #48	; 0x30
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8006642:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006644:	ea08 0800 	and.w	r8, r8, r0
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8006648:	6a1f      	ldr	r7, [r3, #32]
 800664a:	f407 77c0 	and.w	r7, r7, #384	; 0x180
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800664e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006650:	4007      	ands	r7, r0
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8006652:	6a1e      	ldr	r6, [r3, #32]
 8006654:	f406 46fc 	and.w	r6, r6, #32256	; 0x7e00
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8006658:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800665a:	4006      	ands	r6, r0
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800665c:	6a1d      	ldr	r5, [r3, #32]
 800665e:	f405 25f0 	and.w	r5, r5, #491520	; 0x78000
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006662:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006664:	4005      	ands	r5, r0
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8006666:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
      itflagTTIR = hfdcan->ttcan->TTIR;
 800666a:	f8d3 a020 	ldr.w	sl, [r3, #32]
      if (TTSchedSyncITs != 0U)
 800666e:	4011      	ands	r1, r2
 8006670:	d120      	bne.n	80066b4 <HAL_FDCAN_IRQHandler+0x2d4>
      if (TTTimeMarkITs != 0U)
 8006672:	f1b8 0f00 	cmp.w	r8, #0
 8006676:	d122      	bne.n	80066be <HAL_FDCAN_IRQHandler+0x2de>
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8006678:	f019 0f40 	tst.w	r9, #64	; 0x40
 800667c:	d002      	beq.n	8006684 <HAL_FDCAN_IRQHandler+0x2a4>
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800667e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006682:	d124      	bne.n	80066ce <HAL_FDCAN_IRQHandler+0x2ee>
      if (TTGlobTimeITs != 0U)
 8006684:	bb7f      	cbnz	r7, 80066e6 <HAL_FDCAN_IRQHandler+0x306>
      if (TTDistErrors != 0U)
 8006686:	b136      	cbz	r6, 8006696 <HAL_FDCAN_IRQHandler+0x2b6>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006688:	6863      	ldr	r3, [r4, #4]
 800668a:	621e      	str	r6, [r3, #32]
        hfdcan->ErrorCode |= TTDistErrors;
 800668c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8006690:	431e      	orrs	r6, r3
 8006692:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
      if (TTFatalErrors != 0U)
 8006696:	2d00      	cmp	r5, #0
 8006698:	f43f af30 	beq.w	80064fc <HAL_FDCAN_IRQHandler+0x11c>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800669c:	6863      	ldr	r3, [r4, #4]
 800669e:	621d      	str	r5, [r3, #32]
        hfdcan->ErrorCode |= TTFatalErrors;
 80066a0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80066a4:	431d      	orrs	r5, r3
 80066a6:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
 80066aa:	e727      	b.n	80064fc <HAL_FDCAN_IRQHandler+0x11c>
 80066ac:	4000a800 	.word	0x4000a800
 80066b0:	4000a000 	.word	0x4000a000
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80066b4:	6219      	str	r1, [r3, #32]
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80066b6:	4620      	mov	r0, r4
 80066b8:	f7ff fe8e 	bl	80063d8 <HAL_FDCAN_TT_ScheduleSyncCallback>
 80066bc:	e7d9      	b.n	8006672 <HAL_FDCAN_IRQHandler+0x292>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80066be:	6863      	ldr	r3, [r4, #4]
 80066c0:	f8c3 8020 	str.w	r8, [r3, #32]
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80066c4:	4641      	mov	r1, r8
 80066c6:	4620      	mov	r0, r4
 80066c8:	f7ff fe87 	bl	80063da <HAL_FDCAN_TT_TimeMarkCallback>
 80066cc:	e7d4      	b.n	8006678 <HAL_FDCAN_IRQHandler+0x298>
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80066ce:	6863      	ldr	r3, [r4, #4]
 80066d0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80066d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80066d4:	2040      	movs	r0, #64	; 0x40
 80066d6:	6218      	str	r0, [r3, #32]
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80066d8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80066dc:	0c09      	lsrs	r1, r1, #16
 80066de:	4620      	mov	r0, r4
 80066e0:	f7ff fe7c 	bl	80063dc <HAL_FDCAN_TT_StopWatchCallback>
 80066e4:	e7ce      	b.n	8006684 <HAL_FDCAN_IRQHandler+0x2a4>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80066e6:	6863      	ldr	r3, [r4, #4]
 80066e8:	621f      	str	r7, [r3, #32]
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80066ea:	4639      	mov	r1, r7
 80066ec:	4620      	mov	r0, r4
 80066ee:	f7ff fe76 	bl	80063de <HAL_FDCAN_TT_GlobalTimeCallback>
 80066f2:	e7c8      	b.n	8006686 <HAL_FDCAN_IRQHandler+0x2a6>
    HAL_FDCAN_ErrorCallback(hfdcan);
 80066f4:	4620      	mov	r0, r4
 80066f6:	f7ff fe6d 	bl	80063d4 <HAL_FDCAN_ErrorCallback>
}
 80066fa:	e704      	b.n	8006506 <HAL_FDCAN_IRQHandler+0x126>

080066fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066fe:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8006700:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006702:	e06b      	b.n	80067dc <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006704:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006706:	005e      	lsls	r6, r3, #1
 8006708:	2403      	movs	r4, #3
 800670a:	40b4      	lsls	r4, r6
 800670c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006710:	68cc      	ldr	r4, [r1, #12]
 8006712:	40b4      	lsls	r4, r6
 8006714:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8006716:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006718:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800671a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800671e:	684c      	ldr	r4, [r1, #4]
 8006720:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8006724:	409c      	lsls	r4, r3
 8006726:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 800672a:	6044      	str	r4, [r0, #4]
 800672c:	e068      	b.n	8006800 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800672e:	08dd      	lsrs	r5, r3, #3
 8006730:	3508      	adds	r5, #8
 8006732:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006736:	f003 0407 	and.w	r4, r3, #7
 800673a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800673e:	240f      	movs	r4, #15
 8006740:	fa04 f40c 	lsl.w	r4, r4, ip
 8006744:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006748:	690c      	ldr	r4, [r1, #16]
 800674a:	fa04 f40c 	lsl.w	r4, r4, ip
 800674e:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8006752:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8006756:	e06b      	b.n	8006830 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006758:	2409      	movs	r4, #9
 800675a:	e000      	b.n	800675e <HAL_GPIO_Init+0x62>
 800675c:	2400      	movs	r4, #0
 800675e:	fa04 f40e 	lsl.w	r4, r4, lr
 8006762:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006764:	f10c 0c02 	add.w	ip, ip, #2
 8006768:	4d69      	ldr	r5, [pc, #420]	; (8006910 <HAL_GPIO_Init+0x214>)
 800676a:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800676e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8006772:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8006774:	43d4      	mvns	r4, r2
 8006776:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800677a:	684f      	ldr	r7, [r1, #4]
 800677c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8006780:	d001      	beq.n	8006786 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8006782:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8006786:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800678a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800678c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800678e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006792:	684f      	ldr	r7, [r1, #4]
 8006794:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8006798:	d001      	beq.n	800679e <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 800679a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800679e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80067a2:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80067a4:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 80067a8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80067ac:	684f      	ldr	r7, [r1, #4]
 80067ae:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80067b2:	d001      	beq.n	80067b8 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80067b4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80067b8:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80067bc:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80067c0:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 80067c4:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067c6:	684e      	ldr	r6, [r1, #4]
 80067c8:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80067cc:	d001      	beq.n	80067d2 <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 80067ce:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80067d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067d6:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 80067da:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80067dc:	680a      	ldr	r2, [r1, #0]
 80067de:	fa32 f403 	lsrs.w	r4, r2, r3
 80067e2:	f000 8092 	beq.w	800690a <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80067e6:	f04f 0c01 	mov.w	ip, #1
 80067ea:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 80067ee:	ea1c 0202 	ands.w	r2, ip, r2
 80067f2:	d0f2      	beq.n	80067da <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80067f4:	684c      	ldr	r4, [r1, #4]
 80067f6:	f004 0403 	and.w	r4, r4, #3
 80067fa:	3c01      	subs	r4, #1
 80067fc:	2c01      	cmp	r4, #1
 80067fe:	d981      	bls.n	8006704 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006800:	684c      	ldr	r4, [r1, #4]
 8006802:	f004 0403 	and.w	r4, r4, #3
 8006806:	2c03      	cmp	r4, #3
 8006808:	d00c      	beq.n	8006824 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 800680a:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800680c:	005d      	lsls	r5, r3, #1
 800680e:	f04f 0c03 	mov.w	ip, #3
 8006812:	fa0c fc05 	lsl.w	ip, ip, r5
 8006816:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800681a:	688c      	ldr	r4, [r1, #8]
 800681c:	40ac      	lsls	r4, r5
 800681e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 8006822:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006824:	684c      	ldr	r4, [r1, #4]
 8006826:	f004 0403 	and.w	r4, r4, #3
 800682a:	2c02      	cmp	r4, #2
 800682c:	f43f af7f 	beq.w	800672e <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8006830:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006832:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8006836:	f04f 0c03 	mov.w	ip, #3
 800683a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800683e:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006842:	684c      	ldr	r4, [r1, #4]
 8006844:	f004 0403 	and.w	r4, r4, #3
 8006848:	fa04 f40e 	lsl.w	r4, r4, lr
 800684c:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8006850:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006852:	684c      	ldr	r4, [r1, #4]
 8006854:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8006858:	d0bf      	beq.n	80067da <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800685a:	4c2e      	ldr	r4, [pc, #184]	; (8006914 <HAL_GPIO_Init+0x218>)
 800685c:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8006860:	f045 0502 	orr.w	r5, r5, #2
 8006864:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 8006868:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 800686c:	f004 0402 	and.w	r4, r4, #2
 8006870:	9401      	str	r4, [sp, #4]
 8006872:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006874:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8006878:	f10c 0502 	add.w	r5, ip, #2
 800687c:	4c24      	ldr	r4, [pc, #144]	; (8006910 <HAL_GPIO_Init+0x214>)
 800687e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006882:	f003 0403 	and.w	r4, r3, #3
 8006886:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800688a:	240f      	movs	r4, #15
 800688c:	fa04 f40e 	lsl.w	r4, r4, lr
 8006890:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006894:	4c20      	ldr	r4, [pc, #128]	; (8006918 <HAL_GPIO_Init+0x21c>)
 8006896:	42a0      	cmp	r0, r4
 8006898:	f43f af60 	beq.w	800675c <HAL_GPIO_Init+0x60>
 800689c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068a0:	42a0      	cmp	r0, r4
 80068a2:	d022      	beq.n	80068ea <HAL_GPIO_Init+0x1ee>
 80068a4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068a8:	42a0      	cmp	r0, r4
 80068aa:	d020      	beq.n	80068ee <HAL_GPIO_Init+0x1f2>
 80068ac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068b0:	42a0      	cmp	r0, r4
 80068b2:	d01e      	beq.n	80068f2 <HAL_GPIO_Init+0x1f6>
 80068b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068b8:	42a0      	cmp	r0, r4
 80068ba:	d01c      	beq.n	80068f6 <HAL_GPIO_Init+0x1fa>
 80068bc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068c0:	42a0      	cmp	r0, r4
 80068c2:	d01a      	beq.n	80068fa <HAL_GPIO_Init+0x1fe>
 80068c4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068c8:	42a0      	cmp	r0, r4
 80068ca:	d018      	beq.n	80068fe <HAL_GPIO_Init+0x202>
 80068cc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068d0:	42a0      	cmp	r0, r4
 80068d2:	d016      	beq.n	8006902 <HAL_GPIO_Init+0x206>
 80068d4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068d8:	42a0      	cmp	r0, r4
 80068da:	d014      	beq.n	8006906 <HAL_GPIO_Init+0x20a>
 80068dc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068e0:	42a0      	cmp	r0, r4
 80068e2:	f43f af39 	beq.w	8006758 <HAL_GPIO_Init+0x5c>
 80068e6:	240a      	movs	r4, #10
 80068e8:	e739      	b.n	800675e <HAL_GPIO_Init+0x62>
 80068ea:	2401      	movs	r4, #1
 80068ec:	e737      	b.n	800675e <HAL_GPIO_Init+0x62>
 80068ee:	2402      	movs	r4, #2
 80068f0:	e735      	b.n	800675e <HAL_GPIO_Init+0x62>
 80068f2:	2403      	movs	r4, #3
 80068f4:	e733      	b.n	800675e <HAL_GPIO_Init+0x62>
 80068f6:	2404      	movs	r4, #4
 80068f8:	e731      	b.n	800675e <HAL_GPIO_Init+0x62>
 80068fa:	2405      	movs	r4, #5
 80068fc:	e72f      	b.n	800675e <HAL_GPIO_Init+0x62>
 80068fe:	2406      	movs	r4, #6
 8006900:	e72d      	b.n	800675e <HAL_GPIO_Init+0x62>
 8006902:	2407      	movs	r4, #7
 8006904:	e72b      	b.n	800675e <HAL_GPIO_Init+0x62>
 8006906:	2408      	movs	r4, #8
 8006908:	e729      	b.n	800675e <HAL_GPIO_Init+0x62>
  }
}
 800690a:	b003      	add	sp, #12
 800690c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800690e:	bf00      	nop
 8006910:	58000400 	.word	0x58000400
 8006914:	58024400 	.word	0x58024400
 8006918:	58020000 	.word	0x58020000

0800691c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800691c:	b10a      	cbz	r2, 8006922 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800691e:	6181      	str	r1, [r0, #24]
 8006920:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006922:	0409      	lsls	r1, r1, #16
 8006924:	6181      	str	r1, [r0, #24]
  }
}
 8006926:	4770      	bx	lr

08006928 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006928:	6803      	ldr	r3, [r0, #0]
 800692a:	699a      	ldr	r2, [r3, #24]
 800692c:	f012 0f02 	tst.w	r2, #2
 8006930:	d001      	beq.n	8006936 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006932:	2200      	movs	r2, #0
 8006934:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006936:	6803      	ldr	r3, [r0, #0]
 8006938:	699a      	ldr	r2, [r3, #24]
 800693a:	f012 0f01 	tst.w	r2, #1
 800693e:	d103      	bne.n	8006948 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006940:	699a      	ldr	r2, [r3, #24]
 8006942:	f042 0201 	orr.w	r2, r2, #1
 8006946:	619a      	str	r2, [r3, #24]
  }
}
 8006948:	4770      	bx	lr

0800694a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800694a:	b410      	push	{r4}
 800694c:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800694e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006952:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006956:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006958:	4321      	orrs	r1, r4
 800695a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800695e:	6802      	ldr	r2, [r0, #0]
 8006960:	6853      	ldr	r3, [r2, #4]
 8006962:	0d64      	lsrs	r4, r4, #21
 8006964:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8006968:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800696c:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8006970:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8006974:	f044 0403 	orr.w	r4, r4, #3
 8006978:	ea23 0404 	bic.w	r4, r3, r4
 800697c:	4321      	orrs	r1, r4
 800697e:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006984:	4770      	bx	lr

08006986 <I2C_IsErrorOccurred>:
{
 8006986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800698a:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800698c:	6803      	ldr	r3, [r0, #0]
 800698e:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006990:	f017 0710 	ands.w	r7, r7, #16
 8006994:	d04e      	beq.n	8006a34 <I2C_IsErrorOccurred+0xae>
 8006996:	460e      	mov	r6, r1
 8006998:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800699a:	2210      	movs	r2, #16
 800699c:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800699e:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	6998      	ldr	r0, [r3, #24]
 80069a4:	f010 0f20 	tst.w	r0, #32
 80069a8:	d13d      	bne.n	8006a26 <I2C_IsErrorOccurred+0xa0>
 80069aa:	2d00      	cmp	r5, #0
 80069ac:	d13b      	bne.n	8006a26 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 80069ae:	f1b6 3fff 	cmp.w	r6, #4294967295
 80069b2:	d0f5      	beq.n	80069a0 <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069b4:	f7fc ff20 	bl	80037f8 <HAL_GetTick>
 80069b8:	eba0 0008 	sub.w	r0, r0, r8
 80069bc:	42b0      	cmp	r0, r6
 80069be:	d801      	bhi.n	80069c4 <I2C_IsErrorOccurred+0x3e>
 80069c0:	2e00      	cmp	r6, #0
 80069c2:	d1ed      	bne.n	80069a0 <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069c4:	6821      	ldr	r1, [r4, #0]
 80069c6:	684a      	ldr	r2, [r1, #4]
 80069c8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 80069cc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80069d0:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80069d2:	6988      	ldr	r0, [r1, #24]
 80069d4:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80069d8:	d004      	beq.n	80069e4 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 80069da:	3b20      	subs	r3, #32
 80069dc:	bf18      	it	ne
 80069de:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 80069e0:	b902      	cbnz	r2, 80069e4 <I2C_IsErrorOccurred+0x5e>
 80069e2:	b9c3      	cbnz	r3, 8006a16 <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	f013 0f20 	tst.w	r3, #32
 80069ec:	d1d8      	bne.n	80069a0 <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80069ee:	f7fc ff03 	bl	80037f8 <HAL_GetTick>
 80069f2:	eba0 0008 	sub.w	r0, r0, r8
 80069f6:	2819      	cmp	r0, #25
 80069f8:	d9f4      	bls.n	80069e4 <I2C_IsErrorOccurred+0x5e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80069fc:	f043 0320 	orr.w	r3, r3, #32
 8006a00:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006a02:	2320      	movs	r3, #32
 8006a04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 8006a0e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 8006a12:	2501      	movs	r5, #1
 8006a14:	e7e6      	b.n	80069e4 <I2C_IsErrorOccurred+0x5e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a16:	684b      	ldr	r3, [r1, #4]
 8006a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a1c:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8006a1e:	f7fc feeb 	bl	80037f8 <HAL_GetTick>
 8006a22:	4680      	mov	r8, r0
 8006a24:	e7de      	b.n	80069e4 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8006a26:	2d00      	cmp	r5, #0
 8006a28:	d140      	bne.n	8006aac <I2C_IsErrorOccurred+0x126>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8006a2e:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8006a30:	2501      	movs	r5, #1
 8006a32:	e000      	b.n	8006a36 <I2C_IsErrorOccurred+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 8006a34:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 8006a36:	6822      	ldr	r2, [r4, #0]
 8006a38:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a3a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006a3e:	d005      	beq.n	8006a4c <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 8006a40:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a48:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8006a4a:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a4c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006a50:	d006      	beq.n	8006a60 <I2C_IsErrorOccurred+0xda>
    error_code |= HAL_I2C_ERROR_OVR;
 8006a52:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a56:	6822      	ldr	r2, [r4, #0]
 8006a58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a5c:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8006a5e:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006a60:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006a64:	d024      	beq.n	8006ab0 <I2C_IsErrorOccurred+0x12a>
    error_code |= HAL_I2C_ERROR_ARLO;
 8006a66:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a70:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8006a72:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8006a74:	4620      	mov	r0, r4
 8006a76:	f7ff ff57 	bl	8006928 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8006a7a:	6822      	ldr	r2, [r4, #0]
 8006a7c:	6853      	ldr	r3, [r2, #4]
 8006a7e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8006a82:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8006a86:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006a8a:	f023 0301 	bic.w	r3, r3, #1
 8006a8e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8006a90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006a92:	431f      	orrs	r7, r3
 8006a94:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a96:	2320      	movs	r3, #32
 8006a98:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006aa2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 8006aac:	2704      	movs	r7, #4
 8006aae:	e7c2      	b.n	8006a36 <I2C_IsErrorOccurred+0xb0>
  if (status != HAL_OK)
 8006ab0:	2d00      	cmp	r5, #0
 8006ab2:	d0f8      	beq.n	8006aa6 <I2C_IsErrorOccurred+0x120>
 8006ab4:	e7de      	b.n	8006a74 <I2C_IsErrorOccurred+0xee>

08006ab6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8006ab6:	b570      	push	{r4, r5, r6, lr}
 8006ab8:	4604      	mov	r4, r0
 8006aba:	460d      	mov	r5, r1
 8006abc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	f013 0f02 	tst.w	r3, #2
 8006ac6:	d11d      	bne.n	8006b04 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ac8:	4632      	mov	r2, r6
 8006aca:	4629      	mov	r1, r5
 8006acc:	4620      	mov	r0, r4
 8006ace:	f7ff ff5a 	bl	8006986 <I2C_IsErrorOccurred>
 8006ad2:	b9c8      	cbnz	r0, 8006b08 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8006ad4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006ad8:	d0f1      	beq.n	8006abe <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ada:	f7fc fe8d 	bl	80037f8 <HAL_GetTick>
 8006ade:	1b80      	subs	r0, r0, r6
 8006ae0:	42a8      	cmp	r0, r5
 8006ae2:	d801      	bhi.n	8006ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8006ae4:	2d00      	cmp	r5, #0
 8006ae6:	d1ea      	bne.n	8006abe <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ae8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006aea:	f043 0320 	orr.w	r3, r3, #32
 8006aee:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006af0:	2320      	movs	r3, #32
 8006af2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af6:	2300      	movs	r3, #0
 8006af8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8006afc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8006b00:	2001      	movs	r0, #1
 8006b02:	e000      	b.n	8006b06 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8006b04:	2000      	movs	r0, #0
}
 8006b06:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006b08:	2001      	movs	r0, #1
 8006b0a:	e7fc      	b.n	8006b06 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08006b0c <I2C_WaitOnFlagUntilTimeout>:
{
 8006b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b10:	4606      	mov	r6, r0
 8006b12:	4688      	mov	r8, r1
 8006b14:	4617      	mov	r7, r2
 8006b16:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b18:	6834      	ldr	r4, [r6, #0]
 8006b1a:	69a4      	ldr	r4, [r4, #24]
 8006b1c:	ea38 0304 	bics.w	r3, r8, r4
 8006b20:	bf0c      	ite	eq
 8006b22:	f04f 0c01 	moveq.w	ip, #1
 8006b26:	f04f 0c00 	movne.w	ip, #0
 8006b2a:	45bc      	cmp	ip, r7
 8006b2c:	d118      	bne.n	8006b60 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 8006b2e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006b32:	d0f1      	beq.n	8006b18 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b34:	f7fc fe60 	bl	80037f8 <HAL_GetTick>
 8006b38:	9b06      	ldr	r3, [sp, #24]
 8006b3a:	1ac0      	subs	r0, r0, r3
 8006b3c:	42a8      	cmp	r0, r5
 8006b3e:	d801      	bhi.n	8006b44 <I2C_WaitOnFlagUntilTimeout+0x38>
 8006b40:	2d00      	cmp	r5, #0
 8006b42:	d1e9      	bne.n	8006b18 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b44:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8006b46:	f043 0320 	orr.w	r3, r3, #32
 8006b4a:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b4c:	2320      	movs	r3, #32
 8006b4e:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b52:	2300      	movs	r3, #0
 8006b54:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8006b58:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8006b5c:	2001      	movs	r0, #1
 8006b5e:	e000      	b.n	8006b62 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 8006b60:	2000      	movs	r0, #0
}
 8006b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006b68 <I2C_RequestMemoryWrite>:
{
 8006b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b6c:	b082      	sub	sp, #8
 8006b6e:	4604      	mov	r4, r0
 8006b70:	4690      	mov	r8, r2
 8006b72:	461d      	mov	r5, r3
 8006b74:	9e08      	ldr	r6, [sp, #32]
 8006b76:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006b78:	4b19      	ldr	r3, [pc, #100]	; (8006be0 <I2C_RequestMemoryWrite+0x78>)
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b80:	b2ea      	uxtb	r2, r5
 8006b82:	f7ff fee2 	bl	800694a <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b86:	463a      	mov	r2, r7
 8006b88:	4631      	mov	r1, r6
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f7ff ff93 	bl	8006ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b90:	b9f8      	cbnz	r0, 8006bd2 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b92:	2d01      	cmp	r5, #1
 8006b94:	d10e      	bne.n	8006bb4 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	fa5f f288 	uxtb.w	r2, r8
 8006b9c:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006b9e:	9700      	str	r7, [sp, #0]
 8006ba0:	4633      	mov	r3, r6
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	2180      	movs	r1, #128	; 0x80
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f7ff ffb0 	bl	8006b0c <I2C_WaitOnFlagUntilTimeout>
 8006bac:	b9a8      	cbnz	r0, 8006bda <I2C_RequestMemoryWrite+0x72>
}
 8006bae:	b002      	add	sp, #8
 8006bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8006bba:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bbc:	463a      	mov	r2, r7
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f7ff ff78 	bl	8006ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bc6:	b930      	cbnz	r0, 8006bd6 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	fa5f f288 	uxtb.w	r2, r8
 8006bce:	629a      	str	r2, [r3, #40]	; 0x28
 8006bd0:	e7e5      	b.n	8006b9e <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8006bd2:	2001      	movs	r0, #1
 8006bd4:	e7eb      	b.n	8006bae <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8006bd6:	2001      	movs	r0, #1
 8006bd8:	e7e9      	b.n	8006bae <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8006bda:	2001      	movs	r0, #1
 8006bdc:	e7e7      	b.n	8006bae <I2C_RequestMemoryWrite+0x46>
 8006bde:	bf00      	nop
 8006be0:	80002000 	.word	0x80002000

08006be4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006be4:	b570      	push	{r4, r5, r6, lr}
 8006be6:	4605      	mov	r5, r0
 8006be8:	460c      	mov	r4, r1
 8006bea:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bec:	682b      	ldr	r3, [r5, #0]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	f013 0f20 	tst.w	r3, #32
 8006bf4:	d11a      	bne.n	8006c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bf6:	4632      	mov	r2, r6
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	f7ff fec3 	bl	8006986 <I2C_IsErrorOccurred>
 8006c00:	b9b0      	cbnz	r0, 8006c30 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c02:	f7fc fdf9 	bl	80037f8 <HAL_GetTick>
 8006c06:	1b80      	subs	r0, r0, r6
 8006c08:	42a0      	cmp	r0, r4
 8006c0a:	d801      	bhi.n	8006c10 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8006c0c:	2c00      	cmp	r4, #0
 8006c0e:	d1ed      	bne.n	8006bec <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c10:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006c12:	f043 0320 	orr.w	r3, r3, #32
 8006c16:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006c18:	2320      	movs	r3, #32
 8006c1a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006c24:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8006c28:	2001      	movs	r0, #1
}
 8006c2a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	e7fc      	b.n	8006c2a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8006c30:	2001      	movs	r0, #1
 8006c32:	e7fa      	b.n	8006c2a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08006c34 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d057      	beq.n	8006ce8 <HAL_I2C_Init+0xb4>
{
 8006c38:	b510      	push	{r4, lr}
 8006c3a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c3c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d041      	beq.n	8006cc8 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c44:	2324      	movs	r3, #36	; 0x24
 8006c46:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006c4a:	6822      	ldr	r2, [r4, #0]
 8006c4c:	6813      	ldr	r3, [r2, #0]
 8006c4e:	f023 0301 	bic.w	r3, r3, #1
 8006c52:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c54:	6863      	ldr	r3, [r4, #4]
 8006c56:	6822      	ldr	r2, [r4, #0]
 8006c58:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8006c5c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c5e:	6822      	ldr	r2, [r4, #0]
 8006c60:	6893      	ldr	r3, [r2, #8]
 8006c62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c66:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c68:	68e3      	ldr	r3, [r4, #12]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d031      	beq.n	8006cd2 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c6e:	68a3      	ldr	r3, [r4, #8]
 8006c70:	6822      	ldr	r2, [r4, #0]
 8006c72:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8006c76:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006c78:	68e3      	ldr	r3, [r4, #12]
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d02f      	beq.n	8006cde <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006c7e:	6822      	ldr	r2, [r4, #0]
 8006c80:	6851      	ldr	r1, [r2, #4]
 8006c82:	4b1a      	ldr	r3, [pc, #104]	; (8006cec <HAL_I2C_Init+0xb8>)
 8006c84:	430b      	orrs	r3, r1
 8006c86:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c88:	6822      	ldr	r2, [r4, #0]
 8006c8a:	68d3      	ldr	r3, [r2, #12]
 8006c8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c90:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c92:	6923      	ldr	r3, [r4, #16]
 8006c94:	6962      	ldr	r2, [r4, #20]
 8006c96:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006c98:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c9a:	6822      	ldr	r2, [r4, #0]
 8006c9c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006ca0:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006ca2:	69e3      	ldr	r3, [r4, #28]
 8006ca4:	6a21      	ldr	r1, [r4, #32]
 8006ca6:	6822      	ldr	r2, [r4, #0]
 8006ca8:	430b      	orrs	r3, r1
 8006caa:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006cac:	6822      	ldr	r2, [r4, #0]
 8006cae:	6813      	ldr	r3, [r2, #0]
 8006cb0:	f043 0301 	orr.w	r3, r3, #1
 8006cb4:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006cba:	2320      	movs	r3, #32
 8006cbc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cc0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cc2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8006cc6:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006cc8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8006ccc:	f7fb fe02 	bl	80028d4 <HAL_I2C_MspInit>
 8006cd0:	e7b8      	b.n	8006c44 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006cd2:	68a3      	ldr	r3, [r4, #8]
 8006cd4:	6822      	ldr	r2, [r4, #0]
 8006cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cda:	6093      	str	r3, [r2, #8]
 8006cdc:	e7cc      	b.n	8006c78 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ce4:	605a      	str	r2, [r3, #4]
 8006ce6:	e7ca      	b.n	8006c7e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8006ce8:	2001      	movs	r0, #1
}
 8006cea:	4770      	bx	lr
 8006cec:	02008000 	.word	0x02008000

08006cf0 <HAL_I2C_Mem_Write>:
{
 8006cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	460d      	mov	r5, r1
 8006cf8:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8006cfc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cfe:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8006d02:	b2c9      	uxtb	r1, r1
 8006d04:	2920      	cmp	r1, #32
 8006d06:	f040 80bc 	bne.w	8006e82 <HAL_I2C_Mem_Write+0x192>
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	4690      	mov	r8, r2
 8006d0e:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8006d10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d12:	f1ba 0f00 	cmp.w	sl, #0
 8006d16:	bf18      	it	ne
 8006d18:	2b00      	cmpne	r3, #0
 8006d1a:	d016      	beq.n	8006d4a <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8006d1c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	f000 80b2 	beq.w	8006e8a <HAL_I2C_Mem_Write+0x19a>
 8006d26:	f04f 0b01 	mov.w	fp, #1
 8006d2a:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006d2e:	f7fc fd63 	bl	80037f8 <HAL_GetTick>
 8006d32:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d34:	9000      	str	r0, [sp, #0]
 8006d36:	2319      	movs	r3, #25
 8006d38:	465a      	mov	r2, fp
 8006d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f7ff fee4 	bl	8006b0c <I2C_WaitOnFlagUntilTimeout>
 8006d44:	b130      	cbz	r0, 8006d54 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 8006d46:	2001      	movs	r0, #1
 8006d48:	e09c      	b.n	8006e84 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006d4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d4e:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8006d50:	2001      	movs	r0, #1
 8006d52:	e097      	b.n	8006e84 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d54:	2321      	movs	r3, #33	; 0x21
 8006d56:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d5a:	2340      	movs	r3, #64	; 0x40
 8006d5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d60:	2300      	movs	r3, #0
 8006d62:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8006d64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d66:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8006d68:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006d6c:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d6e:	9601      	str	r6, [sp, #4]
 8006d70:	9700      	str	r7, [sp, #0]
 8006d72:	464b      	mov	r3, r9
 8006d74:	4642      	mov	r2, r8
 8006d76:	4629      	mov	r1, r5
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f7ff fef5 	bl	8006b68 <I2C_RequestMemoryWrite>
 8006d7e:	b970      	cbnz	r0, 8006d9e <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	2bff      	cmp	r3, #255	; 0xff
 8006d86:	d90f      	bls.n	8006da8 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d88:	22ff      	movs	r2, #255	; 0xff
 8006d8a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d94:	4629      	mov	r1, r5
 8006d96:	4620      	mov	r0, r4
 8006d98:	f7ff fdd7 	bl	800694a <I2C_TransferConfig>
 8006d9c:	e021      	b.n	8006de2 <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006da4:	4658      	mov	r0, fp
 8006da6:	e06d      	b.n	8006e84 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8006da8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006daa:	b292      	uxth	r2, r2
 8006dac:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006dae:	2300      	movs	r3, #0
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006db6:	b2d2      	uxtb	r2, r2
 8006db8:	4629      	mov	r1, r5
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f7ff fdc5 	bl	800694a <I2C_TransferConfig>
 8006dc0:	e00f      	b.n	8006de2 <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8006dc2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006dc4:	b292      	uxth	r2, r2
 8006dc6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006dc8:	2300      	movs	r3, #0
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dd0:	b2d2      	uxtb	r2, r2
 8006dd2:	4629      	mov	r1, r5
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f7ff fdb8 	bl	800694a <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8006dda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d033      	beq.n	8006e4a <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006de2:	4632      	mov	r2, r6
 8006de4:	4639      	mov	r1, r7
 8006de6:	4620      	mov	r0, r4
 8006de8:	f7ff fe65 	bl	8006ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d14e      	bne.n	8006e8e <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006df0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	7812      	ldrb	r2, [r2, #0]
 8006df6:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8006df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006dfe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006e08:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e10:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006e12:	b292      	uxth	r2, r2
 8006e14:	2a00      	cmp	r2, #0
 8006e16:	d0e0      	beq.n	8006dda <HAL_I2C_Mem_Write+0xea>
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1de      	bne.n	8006dda <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e1c:	9600      	str	r6, [sp, #0]
 8006e1e:	463b      	mov	r3, r7
 8006e20:	2200      	movs	r2, #0
 8006e22:	2180      	movs	r1, #128	; 0x80
 8006e24:	4620      	mov	r0, r4
 8006e26:	f7ff fe71 	bl	8006b0c <I2C_WaitOnFlagUntilTimeout>
 8006e2a:	bb90      	cbnz	r0, 8006e92 <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	2bff      	cmp	r3, #255	; 0xff
 8006e32:	d9c6      	bls.n	8006dc2 <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e34:	22ff      	movs	r2, #255	; 0xff
 8006e36:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e38:	2300      	movs	r3, #0
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e40:	4629      	mov	r1, r5
 8006e42:	4620      	mov	r0, r4
 8006e44:	f7ff fd81 	bl	800694a <I2C_TransferConfig>
 8006e48:	e7c7      	b.n	8006dda <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e4a:	4632      	mov	r2, r6
 8006e4c:	4639      	mov	r1, r7
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f7ff fec8 	bl	8006be4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e54:	b9f8      	cbnz	r0, 8006e96 <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006e5c:	6821      	ldr	r1, [r4, #0]
 8006e5e:	684b      	ldr	r3, [r1, #4]
 8006e60:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8006e64:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8006e68:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006e6c:	f023 0301 	bic.w	r3, r3, #1
 8006e70:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006e72:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e76:	2300      	movs	r3, #0
 8006e78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006e7c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8006e80:	e000      	b.n	8006e84 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 8006e82:	2002      	movs	r0, #2
}
 8006e84:	b003      	add	sp, #12
 8006e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8006e8a:	2002      	movs	r0, #2
 8006e8c:	e7fa      	b.n	8006e84 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8006e8e:	2001      	movs	r0, #1
 8006e90:	e7f8      	b.n	8006e84 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 8006e92:	2001      	movs	r0, #1
 8006e94:	e7f6      	b.n	8006e84 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 8006e96:	2001      	movs	r0, #1
 8006e98:	e7f4      	b.n	8006e84 <HAL_I2C_Mem_Write+0x194>
	...

08006e9c <HAL_I2C_IsDeviceReady>:
{
 8006e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ea0:	b085      	sub	sp, #20
 8006ea2:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ea8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b20      	cmp	r3, #32
 8006eb0:	f040 809c 	bne.w	8006fec <HAL_I2C_IsDeviceReady+0x150>
 8006eb4:	4606      	mov	r6, r0
 8006eb6:	4689      	mov	r9, r1
 8006eb8:	4690      	mov	r8, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006eba:	6803      	ldr	r3, [r0, #0]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006ec2:	f040 8095 	bne.w	8006ff0 <HAL_I2C_IsDeviceReady+0x154>
    __HAL_LOCK(hi2c);
 8006ec6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	f000 8092 	beq.w	8006ff4 <HAL_I2C_IsDeviceReady+0x158>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ed6:	2324      	movs	r3, #36	; 0x24
 8006ed8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006edc:	2300      	movs	r3, #0
 8006ede:	6443      	str	r3, [r0, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006ee0:	68f3      	ldr	r3, [r6, #12]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d010      	beq.n	8006f08 <HAL_I2C_IsDeviceReady+0x6c>
 8006ee6:	f3c9 0309 	ubfx	r3, r9, #0, #10
 8006eea:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006eee:	6832      	ldr	r2, [r6, #0]
 8006ef0:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8006ef2:	f7fc fc81 	bl	80037f8 <HAL_GetTick>
 8006ef6:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ef8:	6832      	ldr	r2, [r6, #0]
 8006efa:	6993      	ldr	r3, [r2, #24]
 8006efc:	f3c3 1340 	ubfx	r3, r3, #5, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006f00:	6994      	ldr	r4, [r2, #24]
 8006f02:	f3c4 1c00 	ubfx	ip, r4, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006f06:	e00b      	b.n	8006f20 <HAL_I2C_IsDeviceReady+0x84>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006f08:	f3c9 0209 	ubfx	r2, r9, #0, #10
 8006f0c:	4b3d      	ldr	r3, [pc, #244]	; (8007004 <HAL_I2C_IsDeviceReady+0x168>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	e7ed      	b.n	8006eee <HAL_I2C_IsDeviceReady+0x52>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f12:	6832      	ldr	r2, [r6, #0]
 8006f14:	6993      	ldr	r3, [r2, #24]
 8006f16:	f3c3 1340 	ubfx	r3, r3, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006f1a:	6994      	ldr	r4, [r2, #24]
 8006f1c:	f3c4 1c00 	ubfx	ip, r4, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006f20:	ea53 030c 	orrs.w	r3, r3, ip
 8006f24:	d117      	bne.n	8006f56 <HAL_I2C_IsDeviceReady+0xba>
        if (Timeout != HAL_MAX_DELAY)
 8006f26:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006f2a:	d0f2      	beq.n	8006f12 <HAL_I2C_IsDeviceReady+0x76>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006f2c:	f7fc fc64 	bl	80037f8 <HAL_GetTick>
 8006f30:	1bc0      	subs	r0, r0, r7
 8006f32:	42a8      	cmp	r0, r5
 8006f34:	d801      	bhi.n	8006f3a <HAL_I2C_IsDeviceReady+0x9e>
 8006f36:	2d00      	cmp	r5, #0
 8006f38:	d1eb      	bne.n	8006f12 <HAL_I2C_IsDeviceReady+0x76>
            hi2c->State = HAL_I2C_STATE_READY;
 8006f3a:	2320      	movs	r3, #32
 8006f3c:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f40:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8006f42:	f043 0320 	orr.w	r3, r3, #32
 8006f46:	6473      	str	r3, [r6, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
            return HAL_ERROR;
 8006f4e:	2001      	movs	r0, #1
}
 8006f50:	b005      	add	sp, #20
 8006f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006f56:	6833      	ldr	r3, [r6, #0]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	f013 0f10 	tst.w	r3, #16
 8006f5e:	d023      	beq.n	8006fa8 <HAL_I2C_IsDeviceReady+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006f60:	9700      	str	r7, [sp, #0]
 8006f62:	462b      	mov	r3, r5
 8006f64:	2200      	movs	r2, #0
 8006f66:	2120      	movs	r1, #32
 8006f68:	4630      	mov	r0, r6
 8006f6a:	f7ff fdcf 	bl	8006b0c <I2C_WaitOnFlagUntilTimeout>
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	d144      	bne.n	8006ffc <HAL_I2C_IsDeviceReady+0x160>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f72:	6833      	ldr	r3, [r6, #0]
 8006f74:	2210      	movs	r2, #16
 8006f76:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f78:	6833      	ldr	r3, [r6, #0]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	61da      	str	r2, [r3, #28]
      if (I2C_Trials == Trials)
 8006f7e:	9b03      	ldr	r3, [sp, #12]
 8006f80:	4543      	cmp	r3, r8
 8006f82:	d022      	beq.n	8006fca <HAL_I2C_IsDeviceReady+0x12e>
      I2C_Trials++;
 8006f84:	9b03      	ldr	r3, [sp, #12]
 8006f86:	3301      	adds	r3, #1
 8006f88:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 8006f8a:	9b03      	ldr	r3, [sp, #12]
 8006f8c:	4543      	cmp	r3, r8
 8006f8e:	d3a7      	bcc.n	8006ee0 <HAL_I2C_IsDeviceReady+0x44>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f90:	2320      	movs	r3, #32
 8006f92:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f96:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8006f98:	f043 0320 	orr.w	r3, r3, #32
 8006f9c:	6473      	str	r3, [r6, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 8006fa4:	2001      	movs	r0, #1
 8006fa6:	e7d3      	b.n	8006f50 <HAL_I2C_IsDeviceReady+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006fa8:	9700      	str	r7, [sp, #0]
 8006faa:	462b      	mov	r3, r5
 8006fac:	2200      	movs	r2, #0
 8006fae:	2120      	movs	r1, #32
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	f7ff fdab 	bl	8006b0c <I2C_WaitOnFlagUntilTimeout>
 8006fb6:	b9f8      	cbnz	r0, 8006ff8 <HAL_I2C_IsDeviceReady+0x15c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fb8:	6832      	ldr	r2, [r6, #0]
 8006fba:	2320      	movs	r3, #32
 8006fbc:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8006fbe:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_OK;
 8006fc8:	e7c2      	b.n	8006f50 <HAL_I2C_IsDeviceReady+0xb4>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006fca:	6832      	ldr	r2, [r6, #0]
 8006fcc:	6853      	ldr	r3, [r2, #4]
 8006fce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fd2:	6053      	str	r3, [r2, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006fd4:	9700      	str	r7, [sp, #0]
 8006fd6:	462b      	mov	r3, r5
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2120      	movs	r1, #32
 8006fdc:	4630      	mov	r0, r6
 8006fde:	f7ff fd95 	bl	8006b0c <I2C_WaitOnFlagUntilTimeout>
 8006fe2:	b968      	cbnz	r0, 8007000 <HAL_I2C_IsDeviceReady+0x164>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fe4:	6833      	ldr	r3, [r6, #0]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	61da      	str	r2, [r3, #28]
 8006fea:	e7cb      	b.n	8006f84 <HAL_I2C_IsDeviceReady+0xe8>
    return HAL_BUSY;
 8006fec:	2002      	movs	r0, #2
 8006fee:	e7af      	b.n	8006f50 <HAL_I2C_IsDeviceReady+0xb4>
      return HAL_BUSY;
 8006ff0:	2002      	movs	r0, #2
 8006ff2:	e7ad      	b.n	8006f50 <HAL_I2C_IsDeviceReady+0xb4>
    __HAL_LOCK(hi2c);
 8006ff4:	2002      	movs	r0, #2
 8006ff6:	e7ab      	b.n	8006f50 <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 8006ff8:	2001      	movs	r0, #1
 8006ffa:	e7a9      	b.n	8006f50 <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 8006ffc:	2001      	movs	r0, #1
 8006ffe:	e7a7      	b.n	8006f50 <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 8007000:	2001      	movs	r0, #1
 8007002:	e7a5      	b.n	8006f50 <HAL_I2C_IsDeviceReady+0xb4>
 8007004:	02002000 	.word	0x02002000

08007008 <HAL_I2C_EV_IRQHandler>:
{
 8007008:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800700a:	6803      	ldr	r3, [r0, #0]
 800700c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800700e:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8007010:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007012:	b103      	cbz	r3, 8007016 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8007014:	4798      	blx	r3
}
 8007016:	bd08      	pop	{r3, pc}

08007018 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007018:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b20      	cmp	r3, #32
 8007020:	d124      	bne.n	800706c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007022:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007026:	2b01      	cmp	r3, #1
 8007028:	d022      	beq.n	8007070 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800702a:	2301      	movs	r3, #1
 800702c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007030:	2324      	movs	r3, #36	; 0x24
 8007032:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007036:	6802      	ldr	r2, [r0, #0]
 8007038:	6813      	ldr	r3, [r2, #0]
 800703a:	f023 0301 	bic.w	r3, r3, #1
 800703e:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007040:	6802      	ldr	r2, [r0, #0]
 8007042:	6813      	ldr	r3, [r2, #0]
 8007044:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007048:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800704a:	6802      	ldr	r2, [r0, #0]
 800704c:	6813      	ldr	r3, [r2, #0]
 800704e:	4319      	orrs	r1, r3
 8007050:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007052:	6802      	ldr	r2, [r0, #0]
 8007054:	6813      	ldr	r3, [r2, #0]
 8007056:	f043 0301 	orr.w	r3, r3, #1
 800705a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800705c:	2320      	movs	r3, #32
 800705e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007062:	2300      	movs	r3, #0
 8007064:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8007068:	4618      	mov	r0, r3
 800706a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800706c:	2002      	movs	r0, #2
 800706e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8007070:	2002      	movs	r0, #2
  }
}
 8007072:	4770      	bx	lr

08007074 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007074:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b20      	cmp	r3, #32
 800707c:	d122      	bne.n	80070c4 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800707e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007082:	2b01      	cmp	r3, #1
 8007084:	d020      	beq.n	80070c8 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8007086:	2301      	movs	r3, #1
 8007088:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800708c:	2324      	movs	r3, #36	; 0x24
 800708e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007092:	6802      	ldr	r2, [r0, #0]
 8007094:	6813      	ldr	r3, [r2, #0]
 8007096:	f023 0301 	bic.w	r3, r3, #1
 800709a:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800709c:	6802      	ldr	r2, [r0, #0]
 800709e:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80070a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80070a4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80070a8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070aa:	6802      	ldr	r2, [r0, #0]
 80070ac:	6813      	ldr	r3, [r2, #0]
 80070ae:	f043 0301 	orr.w	r3, r3, #1
 80070b2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070b4:	2320      	movs	r3, #32
 80070b6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070ba:	2300      	movs	r3, #0
 80070bc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80070c0:	4618      	mov	r0, r3
 80070c2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80070c4:	2002      	movs	r0, #2
 80070c6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80070c8:	2002      	movs	r0, #2
  }
}
 80070ca:	4770      	bx	lr

080070cc <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80070cc:	4b13      	ldr	r3, [pc, #76]	; (800711c <HAL_PWREx_ConfigSupply+0x50>)
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f013 0f04 	tst.w	r3, #4
 80070d4:	d107      	bne.n	80070e6 <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80070d6:	4b11      	ldr	r3, [pc, #68]	; (800711c <HAL_PWREx_ConfigSupply+0x50>)
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f003 0307 	and.w	r3, r3, #7
 80070de:	4283      	cmp	r3, r0
 80070e0:	d01a      	beq.n	8007118 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80070e2:	2001      	movs	r0, #1
 80070e4:	4770      	bx	lr
{
 80070e6:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80070e8:	4a0c      	ldr	r2, [pc, #48]	; (800711c <HAL_PWREx_ConfigSupply+0x50>)
 80070ea:	68d3      	ldr	r3, [r2, #12]
 80070ec:	f023 0307 	bic.w	r3, r3, #7
 80070f0:	4318      	orrs	r0, r3
 80070f2:	60d0      	str	r0, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80070f4:	f7fc fb80 	bl	80037f8 <HAL_GetTick>
 80070f8:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80070fa:	4b08      	ldr	r3, [pc, #32]	; (800711c <HAL_PWREx_ConfigSupply+0x50>)
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007102:	d107      	bne.n	8007114 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007104:	f7fc fb78 	bl	80037f8 <HAL_GetTick>
 8007108:	1b00      	subs	r0, r0, r4
 800710a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800710e:	d9f4      	bls.n	80070fa <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 8007110:	2001      	movs	r0, #1
 8007112:	e000      	b.n	8007116 <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007114:	2000      	movs	r0, #0
}
 8007116:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8007118:	2000      	movs	r0, #0
}
 800711a:	4770      	bx	lr
 800711c:	58024800 	.word	0x58024800

08007120 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007120:	2800      	cmp	r0, #0
 8007122:	f000 8318 	beq.w	8007756 <HAL_RCC_OscConfig+0x636>
{
 8007126:	b538      	push	{r3, r4, r5, lr}
 8007128:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800712a:	6803      	ldr	r3, [r0, #0]
 800712c:	f013 0f01 	tst.w	r3, #1
 8007130:	d025      	beq.n	800717e <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007132:	4a94      	ldr	r2, [pc, #592]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 8007134:	6913      	ldr	r3, [r2, #16]
 8007136:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800713a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800713c:	2b10      	cmp	r3, #16
 800713e:	d015      	beq.n	800716c <HAL_RCC_OscConfig+0x4c>
 8007140:	2b18      	cmp	r3, #24
 8007142:	d00f      	beq.n	8007164 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007144:	6863      	ldr	r3, [r4, #4]
 8007146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800714a:	d03f      	beq.n	80071cc <HAL_RCC_OscConfig+0xac>
 800714c:	2b00      	cmp	r3, #0
 800714e:	d153      	bne.n	80071f8 <HAL_RCC_OscConfig+0xd8>
 8007150:	4b8c      	ldr	r3, [pc, #560]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	e038      	b.n	80071d6 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007164:	f002 0203 	and.w	r2, r2, #3
 8007168:	2a02      	cmp	r2, #2
 800716a:	d1eb      	bne.n	8007144 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800716c:	4b85      	ldr	r3, [pc, #532]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007174:	d003      	beq.n	800717e <HAL_RCC_OscConfig+0x5e>
 8007176:	6863      	ldr	r3, [r4, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 82ee 	beq.w	800775a <HAL_RCC_OscConfig+0x63a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	f013 0f02 	tst.w	r3, #2
 8007184:	f000 80a1 	beq.w	80072ca <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007188:	4a7e      	ldr	r2, [pc, #504]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 800718a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800718c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800718e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8007192:	d05a      	beq.n	800724a <HAL_RCC_OscConfig+0x12a>
 8007194:	2b18      	cmp	r3, #24
 8007196:	d055      	beq.n	8007244 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007198:	68e3      	ldr	r3, [r4, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 80de 	beq.w	800735c <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80071a0:	4978      	ldr	r1, [pc, #480]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 80071a2:	680a      	ldr	r2, [r1, #0]
 80071a4:	f022 0219 	bic.w	r2, r2, #25
 80071a8:	4313      	orrs	r3, r2
 80071aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ac:	f7fc fb24 	bl	80037f8 <HAL_GetTick>
 80071b0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071b2:	4b74      	ldr	r3, [pc, #464]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f013 0f04 	tst.w	r3, #4
 80071ba:	f040 80ad 	bne.w	8007318 <HAL_RCC_OscConfig+0x1f8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071be:	f7fc fb1b 	bl	80037f8 <HAL_GetTick>
 80071c2:	1b40      	subs	r0, r0, r5
 80071c4:	2802      	cmp	r0, #2
 80071c6:	d9f4      	bls.n	80071b2 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 80071c8:	2003      	movs	r0, #3
 80071ca:	e2cd      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071cc:	4a6d      	ldr	r2, [pc, #436]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 80071ce:	6813      	ldr	r3, [r2, #0]
 80071d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071d4:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071d6:	6863      	ldr	r3, [r4, #4]
 80071d8:	b32b      	cbz	r3, 8007226 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 80071da:	f7fc fb0d 	bl	80037f8 <HAL_GetTick>
 80071de:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071e0:	4b68      	ldr	r3, [pc, #416]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80071e8:	d1c9      	bne.n	800717e <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071ea:	f7fc fb05 	bl	80037f8 <HAL_GetTick>
 80071ee:	1b40      	subs	r0, r0, r5
 80071f0:	2864      	cmp	r0, #100	; 0x64
 80071f2:	d9f5      	bls.n	80071e0 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 80071f4:	2003      	movs	r0, #3
 80071f6:	e2b7      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071fc:	d009      	beq.n	8007212 <HAL_RCC_OscConfig+0xf2>
 80071fe:	4b61      	ldr	r3, [pc, #388]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	e7e1      	b.n	80071d6 <HAL_RCC_OscConfig+0xb6>
 8007212:	4b5c      	ldr	r3, [pc, #368]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	e7d7      	b.n	80071d6 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8007226:	f7fc fae7 	bl	80037f8 <HAL_GetTick>
 800722a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800722c:	4b55      	ldr	r3, [pc, #340]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007234:	d0a3      	beq.n	800717e <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007236:	f7fc fadf 	bl	80037f8 <HAL_GetTick>
 800723a:	1b40      	subs	r0, r0, r5
 800723c:	2864      	cmp	r0, #100	; 0x64
 800723e:	d9f5      	bls.n	800722c <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8007240:	2003      	movs	r0, #3
 8007242:	e291      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007244:	f012 0f03 	tst.w	r2, #3
 8007248:	d1a6      	bne.n	8007198 <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800724a:	4b4e      	ldr	r3, [pc, #312]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f013 0f04 	tst.w	r3, #4
 8007252:	d003      	beq.n	800725c <HAL_RCC_OscConfig+0x13c>
 8007254:	68e3      	ldr	r3, [r4, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 8281 	beq.w	800775e <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800725c:	4a49      	ldr	r2, [pc, #292]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 800725e:	6813      	ldr	r3, [r2, #0]
 8007260:	f023 0319 	bic.w	r3, r3, #25
 8007264:	68e1      	ldr	r1, [r4, #12]
 8007266:	430b      	orrs	r3, r1
 8007268:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 800726a:	f7fc fac5 	bl	80037f8 <HAL_GetTick>
 800726e:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007270:	4b44      	ldr	r3, [pc, #272]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f013 0f04 	tst.w	r3, #4
 8007278:	d106      	bne.n	8007288 <HAL_RCC_OscConfig+0x168>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800727a:	f7fc fabd 	bl	80037f8 <HAL_GetTick>
 800727e:	1b40      	subs	r0, r0, r5
 8007280:	2802      	cmp	r0, #2
 8007282:	d9f5      	bls.n	8007270 <HAL_RCC_OscConfig+0x150>
              return HAL_TIMEOUT;
 8007284:	2003      	movs	r0, #3
 8007286:	e26f      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007288:	f7fc fad0 	bl	800382c <HAL_GetREVID>
 800728c:	f241 0303 	movw	r3, #4099	; 0x1003
 8007290:	4298      	cmp	r0, r3
 8007292:	d812      	bhi.n	80072ba <HAL_RCC_OscConfig+0x19a>
 8007294:	6922      	ldr	r2, [r4, #16]
 8007296:	2a40      	cmp	r2, #64	; 0x40
 8007298:	d007      	beq.n	80072aa <HAL_RCC_OscConfig+0x18a>
 800729a:	493a      	ldr	r1, [pc, #232]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 800729c:	684b      	ldr	r3, [r1, #4]
 800729e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80072a2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80072a6:	604b      	str	r3, [r1, #4]
 80072a8:	e00f      	b.n	80072ca <HAL_RCC_OscConfig+0x1aa>
 80072aa:	4a36      	ldr	r2, [pc, #216]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 80072ac:	6853      	ldr	r3, [r2, #4]
 80072ae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80072b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072b6:	6053      	str	r3, [r2, #4]
 80072b8:	e007      	b.n	80072ca <HAL_RCC_OscConfig+0x1aa>
 80072ba:	4a32      	ldr	r2, [pc, #200]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 80072bc:	6853      	ldr	r3, [r2, #4]
 80072be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80072c2:	6921      	ldr	r1, [r4, #16]
 80072c4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80072c8:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	f013 0f10 	tst.w	r3, #16
 80072d0:	f000 8088 	beq.w	80073e4 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072d4:	4a2b      	ldr	r2, [pc, #172]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 80072d6:	6913      	ldr	r3, [r2, #16]
 80072d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80072de:	2b08      	cmp	r3, #8
 80072e0:	d056      	beq.n	8007390 <HAL_RCC_OscConfig+0x270>
 80072e2:	2b18      	cmp	r3, #24
 80072e4:	d050      	beq.n	8007388 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80072e6:	69e3      	ldr	r3, [r4, #28]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 80b8 	beq.w	800745e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80072ee:	4a25      	ldr	r2, [pc, #148]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 80072f0:	6813      	ldr	r3, [r2, #0]
 80072f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f8:	f7fc fa7e 	bl	80037f8 <HAL_GetTick>
 80072fc:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072fe:	4b21      	ldr	r3, [pc, #132]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007306:	f040 8088 	bne.w	800741a <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800730a:	f7fc fa75 	bl	80037f8 <HAL_GetTick>
 800730e:	1b40      	subs	r0, r0, r5
 8007310:	2802      	cmp	r0, #2
 8007312:	d9f4      	bls.n	80072fe <HAL_RCC_OscConfig+0x1de>
          {
            return HAL_TIMEOUT;
 8007314:	2003      	movs	r0, #3
 8007316:	e227      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007318:	f7fc fa88 	bl	800382c <HAL_GetREVID>
 800731c:	f241 0303 	movw	r3, #4099	; 0x1003
 8007320:	4298      	cmp	r0, r3
 8007322:	d812      	bhi.n	800734a <HAL_RCC_OscConfig+0x22a>
 8007324:	6922      	ldr	r2, [r4, #16]
 8007326:	2a40      	cmp	r2, #64	; 0x40
 8007328:	d007      	beq.n	800733a <HAL_RCC_OscConfig+0x21a>
 800732a:	4916      	ldr	r1, [pc, #88]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 800732c:	684b      	ldr	r3, [r1, #4]
 800732e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007332:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007336:	604b      	str	r3, [r1, #4]
 8007338:	e7c7      	b.n	80072ca <HAL_RCC_OscConfig+0x1aa>
 800733a:	4a12      	ldr	r2, [pc, #72]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 800733c:	6853      	ldr	r3, [r2, #4]
 800733e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007346:	6053      	str	r3, [r2, #4]
 8007348:	e7bf      	b.n	80072ca <HAL_RCC_OscConfig+0x1aa>
 800734a:	4a0e      	ldr	r2, [pc, #56]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 800734c:	6853      	ldr	r3, [r2, #4]
 800734e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007352:	6921      	ldr	r1, [r4, #16]
 8007354:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007358:	6053      	str	r3, [r2, #4]
 800735a:	e7b6      	b.n	80072ca <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 800735c:	4a09      	ldr	r2, [pc, #36]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 800735e:	6813      	ldr	r3, [r2, #0]
 8007360:	f023 0301 	bic.w	r3, r3, #1
 8007364:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007366:	f7fc fa47 	bl	80037f8 <HAL_GetTick>
 800736a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800736c:	4b05      	ldr	r3, [pc, #20]	; (8007384 <HAL_RCC_OscConfig+0x264>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f013 0f04 	tst.w	r3, #4
 8007374:	d0a9      	beq.n	80072ca <HAL_RCC_OscConfig+0x1aa>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007376:	f7fc fa3f 	bl	80037f8 <HAL_GetTick>
 800737a:	1b40      	subs	r0, r0, r5
 800737c:	2802      	cmp	r0, #2
 800737e:	d9f5      	bls.n	800736c <HAL_RCC_OscConfig+0x24c>
            return HAL_TIMEOUT;
 8007380:	2003      	movs	r0, #3
 8007382:	e1f1      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
 8007384:	58024400 	.word	0x58024400
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007388:	f002 0203 	and.w	r2, r2, #3
 800738c:	2a01      	cmp	r2, #1
 800738e:	d1aa      	bne.n	80072e6 <HAL_RCC_OscConfig+0x1c6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007390:	4ba1      	ldr	r3, [pc, #644]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007398:	d003      	beq.n	80073a2 <HAL_RCC_OscConfig+0x282>
 800739a:	69e3      	ldr	r3, [r4, #28]
 800739c:	2b80      	cmp	r3, #128	; 0x80
 800739e:	f040 81e0 	bne.w	8007762 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80073a2:	f7fc fa43 	bl	800382c <HAL_GetREVID>
 80073a6:	f241 0303 	movw	r3, #4099	; 0x1003
 80073aa:	4298      	cmp	r0, r3
 80073ac:	d812      	bhi.n	80073d4 <HAL_RCC_OscConfig+0x2b4>
 80073ae:	6a22      	ldr	r2, [r4, #32]
 80073b0:	2a20      	cmp	r2, #32
 80073b2:	d007      	beq.n	80073c4 <HAL_RCC_OscConfig+0x2a4>
 80073b4:	4998      	ldr	r1, [pc, #608]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 80073b6:	684b      	ldr	r3, [r1, #4]
 80073b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80073bc:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80073c0:	604b      	str	r3, [r1, #4]
 80073c2:	e00f      	b.n	80073e4 <HAL_RCC_OscConfig+0x2c4>
 80073c4:	4a94      	ldr	r2, [pc, #592]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 80073c6:	6853      	ldr	r3, [r2, #4]
 80073c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80073cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073d0:	6053      	str	r3, [r2, #4]
 80073d2:	e007      	b.n	80073e4 <HAL_RCC_OscConfig+0x2c4>
 80073d4:	4a90      	ldr	r2, [pc, #576]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 80073d6:	68d3      	ldr	r3, [r2, #12]
 80073d8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80073dc:	6a21      	ldr	r1, [r4, #32]
 80073de:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80073e2:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	f013 0f08 	tst.w	r3, #8
 80073ea:	d060      	beq.n	80074ae <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073ec:	6963      	ldr	r3, [r4, #20]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d049      	beq.n	8007486 <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073f2:	4a89      	ldr	r2, [pc, #548]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 80073f4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80073f6:	f043 0301 	orr.w	r3, r3, #1
 80073fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073fc:	f7fc f9fc 	bl	80037f8 <HAL_GetTick>
 8007400:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007402:	4b85      	ldr	r3, [pc, #532]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 8007404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007406:	f013 0f02 	tst.w	r3, #2
 800740a:	d150      	bne.n	80074ae <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800740c:	f7fc f9f4 	bl	80037f8 <HAL_GetTick>
 8007410:	1b40      	subs	r0, r0, r5
 8007412:	2802      	cmp	r0, #2
 8007414:	d9f5      	bls.n	8007402 <HAL_RCC_OscConfig+0x2e2>
        {
          return HAL_TIMEOUT;
 8007416:	2003      	movs	r0, #3
 8007418:	e1a6      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800741a:	f7fc fa07 	bl	800382c <HAL_GetREVID>
 800741e:	f241 0303 	movw	r3, #4099	; 0x1003
 8007422:	4298      	cmp	r0, r3
 8007424:	d812      	bhi.n	800744c <HAL_RCC_OscConfig+0x32c>
 8007426:	6a22      	ldr	r2, [r4, #32]
 8007428:	2a20      	cmp	r2, #32
 800742a:	d007      	beq.n	800743c <HAL_RCC_OscConfig+0x31c>
 800742c:	497a      	ldr	r1, [pc, #488]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 800742e:	684b      	ldr	r3, [r1, #4]
 8007430:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007434:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8007438:	604b      	str	r3, [r1, #4]
 800743a:	e7d3      	b.n	80073e4 <HAL_RCC_OscConfig+0x2c4>
 800743c:	4a76      	ldr	r2, [pc, #472]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 800743e:	6853      	ldr	r3, [r2, #4]
 8007440:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007444:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007448:	6053      	str	r3, [r2, #4]
 800744a:	e7cb      	b.n	80073e4 <HAL_RCC_OscConfig+0x2c4>
 800744c:	4a72      	ldr	r2, [pc, #456]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 800744e:	68d3      	ldr	r3, [r2, #12]
 8007450:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8007454:	6a21      	ldr	r1, [r4, #32]
 8007456:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800745a:	60d3      	str	r3, [r2, #12]
 800745c:	e7c2      	b.n	80073e4 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 800745e:	4a6e      	ldr	r2, [pc, #440]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 8007460:	6813      	ldr	r3, [r2, #0]
 8007462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007466:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007468:	f7fc f9c6 	bl	80037f8 <HAL_GetTick>
 800746c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800746e:	4b6a      	ldr	r3, [pc, #424]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007476:	d0b5      	beq.n	80073e4 <HAL_RCC_OscConfig+0x2c4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007478:	f7fc f9be 	bl	80037f8 <HAL_GetTick>
 800747c:	1b40      	subs	r0, r0, r5
 800747e:	2802      	cmp	r0, #2
 8007480:	d9f5      	bls.n	800746e <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8007482:	2003      	movs	r0, #3
 8007484:	e170      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007486:	4a64      	ldr	r2, [pc, #400]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 8007488:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800748a:	f023 0301 	bic.w	r3, r3, #1
 800748e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007490:	f7fc f9b2 	bl	80037f8 <HAL_GetTick>
 8007494:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007496:	4b60      	ldr	r3, [pc, #384]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 8007498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800749a:	f013 0f02 	tst.w	r3, #2
 800749e:	d006      	beq.n	80074ae <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074a0:	f7fc f9aa 	bl	80037f8 <HAL_GetTick>
 80074a4:	1b40      	subs	r0, r0, r5
 80074a6:	2802      	cmp	r0, #2
 80074a8:	d9f5      	bls.n	8007496 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80074aa:	2003      	movs	r0, #3
 80074ac:	e15c      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	f013 0f20 	tst.w	r3, #32
 80074b4:	d029      	beq.n	800750a <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80074b6:	69a3      	ldr	r3, [r4, #24]
 80074b8:	b19b      	cbz	r3, 80074e2 <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074ba:	4a57      	ldr	r2, [pc, #348]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 80074bc:	6813      	ldr	r3, [r2, #0]
 80074be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80074c4:	f7fc f998 	bl	80037f8 <HAL_GetTick>
 80074c8:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80074ca:	4b53      	ldr	r3, [pc, #332]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80074d2:	d11a      	bne.n	800750a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80074d4:	f7fc f990 	bl	80037f8 <HAL_GetTick>
 80074d8:	1b40      	subs	r0, r0, r5
 80074da:	2802      	cmp	r0, #2
 80074dc:	d9f5      	bls.n	80074ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80074de:	2003      	movs	r0, #3
 80074e0:	e142      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80074e2:	4a4d      	ldr	r2, [pc, #308]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 80074e4:	6813      	ldr	r3, [r2, #0]
 80074e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80074ec:	f7fc f984 	bl	80037f8 <HAL_GetTick>
 80074f0:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80074f2:	4b49      	ldr	r3, [pc, #292]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80074fa:	d006      	beq.n	800750a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80074fc:	f7fc f97c 	bl	80037f8 <HAL_GetTick>
 8007500:	1b40      	subs	r0, r0, r5
 8007502:	2802      	cmp	r0, #2
 8007504:	d9f5      	bls.n	80074f2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8007506:	2003      	movs	r0, #3
 8007508:	e12e      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	f013 0f04 	tst.w	r3, #4
 8007510:	d121      	bne.n	8007556 <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 8126 	beq.w	8007766 <HAL_RCC_OscConfig+0x646>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800751a:	4a3f      	ldr	r2, [pc, #252]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 800751c:	6912      	ldr	r2, [r2, #16]
 800751e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8007522:	2a18      	cmp	r2, #24
 8007524:	f000 80ee 	beq.w	8007704 <HAL_RCC_OscConfig+0x5e4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007528:	2b02      	cmp	r3, #2
 800752a:	d079      	beq.n	8007620 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800752c:	4a3a      	ldr	r2, [pc, #232]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 800752e:	6813      	ldr	r3, [r2, #0]
 8007530:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007536:	f7fc f95f 	bl	80037f8 <HAL_GetTick>
 800753a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800753c:	4b36      	ldr	r3, [pc, #216]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007544:	f000 80dc 	beq.w	8007700 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007548:	f7fc f956 	bl	80037f8 <HAL_GetTick>
 800754c:	1b00      	subs	r0, r0, r4
 800754e:	2802      	cmp	r0, #2
 8007550:	d9f4      	bls.n	800753c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007552:	2003      	movs	r0, #3
 8007554:	e108      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
    PWR->CR1 |= PWR_CR1_DBP;
 8007556:	4a31      	ldr	r2, [pc, #196]	; (800761c <HAL_RCC_OscConfig+0x4fc>)
 8007558:	6813      	ldr	r3, [r2, #0]
 800755a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800755e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007560:	f7fc f94a 	bl	80037f8 <HAL_GetTick>
 8007564:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007566:	4b2d      	ldr	r3, [pc, #180]	; (800761c <HAL_RCC_OscConfig+0x4fc>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800756e:	d106      	bne.n	800757e <HAL_RCC_OscConfig+0x45e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007570:	f7fc f942 	bl	80037f8 <HAL_GetTick>
 8007574:	1b40      	subs	r0, r0, r5
 8007576:	2864      	cmp	r0, #100	; 0x64
 8007578:	d9f5      	bls.n	8007566 <HAL_RCC_OscConfig+0x446>
        return HAL_TIMEOUT;
 800757a:	2003      	movs	r0, #3
 800757c:	e0f4      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800757e:	68a3      	ldr	r3, [r4, #8]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d00a      	beq.n	800759a <HAL_RCC_OscConfig+0x47a>
 8007584:	bb0b      	cbnz	r3, 80075ca <HAL_RCC_OscConfig+0x4aa>
 8007586:	4b24      	ldr	r3, [pc, #144]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 8007588:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800758a:	f022 0201 	bic.w	r2, r2, #1
 800758e:	671a      	str	r2, [r3, #112]	; 0x70
 8007590:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007592:	f022 0204 	bic.w	r2, r2, #4
 8007596:	671a      	str	r2, [r3, #112]	; 0x70
 8007598:	e004      	b.n	80075a4 <HAL_RCC_OscConfig+0x484>
 800759a:	4a1f      	ldr	r2, [pc, #124]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 800759c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800759e:	f043 0301 	orr.w	r3, r3, #1
 80075a2:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075a4:	68a3      	ldr	r3, [r4, #8]
 80075a6:	b333      	cbz	r3, 80075f6 <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 80075a8:	f7fc f926 	bl	80037f8 <HAL_GetTick>
 80075ac:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075ae:	4b1a      	ldr	r3, [pc, #104]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 80075b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b2:	f013 0f02 	tst.w	r3, #2
 80075b6:	d1ac      	bne.n	8007512 <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075b8:	f7fc f91e 	bl	80037f8 <HAL_GetTick>
 80075bc:	1b40      	subs	r0, r0, r5
 80075be:	f241 3388 	movw	r3, #5000	; 0x1388
 80075c2:	4298      	cmp	r0, r3
 80075c4:	d9f3      	bls.n	80075ae <HAL_RCC_OscConfig+0x48e>
          return HAL_TIMEOUT;
 80075c6:	2003      	movs	r0, #3
 80075c8:	e0ce      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075ca:	2b05      	cmp	r3, #5
 80075cc:	d009      	beq.n	80075e2 <HAL_RCC_OscConfig+0x4c2>
 80075ce:	4b12      	ldr	r3, [pc, #72]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 80075d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075d2:	f022 0201 	bic.w	r2, r2, #1
 80075d6:	671a      	str	r2, [r3, #112]	; 0x70
 80075d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075da:	f022 0204 	bic.w	r2, r2, #4
 80075de:	671a      	str	r2, [r3, #112]	; 0x70
 80075e0:	e7e0      	b.n	80075a4 <HAL_RCC_OscConfig+0x484>
 80075e2:	4b0d      	ldr	r3, [pc, #52]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 80075e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075e6:	f042 0204 	orr.w	r2, r2, #4
 80075ea:	671a      	str	r2, [r3, #112]	; 0x70
 80075ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075ee:	f042 0201 	orr.w	r2, r2, #1
 80075f2:	671a      	str	r2, [r3, #112]	; 0x70
 80075f4:	e7d6      	b.n	80075a4 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 80075f6:	f7fc f8ff 	bl	80037f8 <HAL_GetTick>
 80075fa:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075fc:	4b06      	ldr	r3, [pc, #24]	; (8007618 <HAL_RCC_OscConfig+0x4f8>)
 80075fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007600:	f013 0f02 	tst.w	r3, #2
 8007604:	d085      	beq.n	8007512 <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007606:	f7fc f8f7 	bl	80037f8 <HAL_GetTick>
 800760a:	1b40      	subs	r0, r0, r5
 800760c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007610:	4298      	cmp	r0, r3
 8007612:	d9f3      	bls.n	80075fc <HAL_RCC_OscConfig+0x4dc>
          return HAL_TIMEOUT;
 8007614:	2003      	movs	r0, #3
 8007616:	e0a7      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
 8007618:	58024400 	.word	0x58024400
 800761c:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 8007620:	4a59      	ldr	r2, [pc, #356]	; (8007788 <HAL_RCC_OscConfig+0x668>)
 8007622:	6813      	ldr	r3, [r2, #0]
 8007624:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007628:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800762a:	f7fc f8e5 	bl	80037f8 <HAL_GetTick>
 800762e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007630:	4b55      	ldr	r3, [pc, #340]	; (8007788 <HAL_RCC_OscConfig+0x668>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007638:	d006      	beq.n	8007648 <HAL_RCC_OscConfig+0x528>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800763a:	f7fc f8dd 	bl	80037f8 <HAL_GetTick>
 800763e:	1b40      	subs	r0, r0, r5
 8007640:	2802      	cmp	r0, #2
 8007642:	d9f5      	bls.n	8007630 <HAL_RCC_OscConfig+0x510>
            return HAL_TIMEOUT;
 8007644:	2003      	movs	r0, #3
 8007646:	e08f      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007648:	4b4f      	ldr	r3, [pc, #316]	; (8007788 <HAL_RCC_OscConfig+0x668>)
 800764a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800764c:	4a4f      	ldr	r2, [pc, #316]	; (800778c <HAL_RCC_OscConfig+0x66c>)
 800764e:	400a      	ands	r2, r1
 8007650:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007652:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007654:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8007658:	430a      	orrs	r2, r1
 800765a:	629a      	str	r2, [r3, #40]	; 0x28
 800765c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800765e:	3a01      	subs	r2, #1
 8007660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007666:	3901      	subs	r1, #1
 8007668:	0249      	lsls	r1, r1, #9
 800766a:	b289      	uxth	r1, r1
 800766c:	430a      	orrs	r2, r1
 800766e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007670:	3901      	subs	r1, #1
 8007672:	0409      	lsls	r1, r1, #16
 8007674:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8007678:	430a      	orrs	r2, r1
 800767a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800767c:	3901      	subs	r1, #1
 800767e:	0609      	lsls	r1, r1, #24
 8007680:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8007684:	430a      	orrs	r2, r1
 8007686:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8007688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768a:	f022 0201 	bic.w	r2, r2, #1
 800768e:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007690:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007692:	4a3f      	ldr	r2, [pc, #252]	; (8007790 <HAL_RCC_OscConfig+0x670>)
 8007694:	400a      	ands	r2, r1
 8007696:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007698:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800769c:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800769e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a0:	f022 020c 	bic.w	r2, r2, #12
 80076a4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80076a6:	430a      	orrs	r2, r1
 80076a8:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80076aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ac:	f022 0202 	bic.w	r2, r2, #2
 80076b0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80076b2:	430a      	orrs	r2, r1
 80076b4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80076b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80076bc:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80076c4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80076c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80076cc:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80076ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d0:	f042 0201 	orr.w	r2, r2, #1
 80076d4:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80076dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80076de:	f7fc f88b 	bl	80037f8 <HAL_GetTick>
 80076e2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076e4:	4b28      	ldr	r3, [pc, #160]	; (8007788 <HAL_RCC_OscConfig+0x668>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80076ec:	d106      	bne.n	80076fc <HAL_RCC_OscConfig+0x5dc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076ee:	f7fc f883 	bl	80037f8 <HAL_GetTick>
 80076f2:	1b00      	subs	r0, r0, r4
 80076f4:	2802      	cmp	r0, #2
 80076f6:	d9f5      	bls.n	80076e4 <HAL_RCC_OscConfig+0x5c4>
            return HAL_TIMEOUT;
 80076f8:	2003      	movs	r0, #3
 80076fa:	e035      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80076fc:	2000      	movs	r0, #0
 80076fe:	e033      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
 8007700:	2000      	movs	r0, #0
 8007702:	e031      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007704:	4a20      	ldr	r2, [pc, #128]	; (8007788 <HAL_RCC_OscConfig+0x668>)
 8007706:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007708:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800770a:	2b01      	cmp	r3, #1
 800770c:	d02d      	beq.n	800776a <HAL_RCC_OscConfig+0x64a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800770e:	f001 0303 	and.w	r3, r1, #3
 8007712:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007714:	4293      	cmp	r3, r2
 8007716:	d12a      	bne.n	800776e <HAL_RCC_OscConfig+0x64e>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007718:	f3c1 1105 	ubfx	r1, r1, #4, #6
 800771c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800771e:	4299      	cmp	r1, r3
 8007720:	d127      	bne.n	8007772 <HAL_RCC_OscConfig+0x652>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007722:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8007726:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007728:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800772a:	429a      	cmp	r2, r3
 800772c:	d123      	bne.n	8007776 <HAL_RCC_OscConfig+0x656>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800772e:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8007732:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007734:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007736:	429a      	cmp	r2, r3
 8007738:	d11f      	bne.n	800777a <HAL_RCC_OscConfig+0x65a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800773a:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800773e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007740:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007742:	429a      	cmp	r2, r3
 8007744:	d11b      	bne.n	800777e <HAL_RCC_OscConfig+0x65e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007746:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800774a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800774c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800774e:	4298      	cmp	r0, r3
 8007750:	d117      	bne.n	8007782 <HAL_RCC_OscConfig+0x662>
  return HAL_OK;
 8007752:	2000      	movs	r0, #0
 8007754:	e008      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
    return HAL_ERROR;
 8007756:	2001      	movs	r0, #1
}
 8007758:	4770      	bx	lr
        return HAL_ERROR;
 800775a:	2001      	movs	r0, #1
 800775c:	e004      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 800775e:	2001      	movs	r0, #1
 8007760:	e002      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 8007762:	2001      	movs	r0, #1
 8007764:	e000      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
  return HAL_OK;
 8007766:	2000      	movs	r0, #0
}
 8007768:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800776a:	2001      	movs	r0, #1
 800776c:	e7fc      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
 800776e:	2001      	movs	r0, #1
 8007770:	e7fa      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
 8007772:	2001      	movs	r0, #1
 8007774:	e7f8      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
 8007776:	2001      	movs	r0, #1
 8007778:	e7f6      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
 800777a:	2001      	movs	r0, #1
 800777c:	e7f4      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
 800777e:	2001      	movs	r0, #1
 8007780:	e7f2      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
 8007782:	2001      	movs	r0, #1
 8007784:	e7f0      	b.n	8007768 <HAL_RCC_OscConfig+0x648>
 8007786:	bf00      	nop
 8007788:	58024400 	.word	0x58024400
 800778c:	fffffc0c 	.word	0xfffffc0c
 8007790:	ffff0007 	.word	0xffff0007

08007794 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007794:	4b74      	ldr	r3, [pc, #464]	; (8007968 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800779c:	2b10      	cmp	r3, #16
 800779e:	f000 80de 	beq.w	800795e <HAL_RCC_GetSysClockFreq+0x1ca>
 80077a2:	2b18      	cmp	r3, #24
 80077a4:	d010      	beq.n	80077c8 <HAL_RCC_GetSysClockFreq+0x34>
 80077a6:	b10b      	cbz	r3, 80077ac <HAL_RCC_GetSysClockFreq+0x18>
 80077a8:	4870      	ldr	r0, [pc, #448]	; (800796c <HAL_RCC_GetSysClockFreq+0x1d8>)
 80077aa:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077ac:	4b6e      	ldr	r3, [pc, #440]	; (8007968 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f013 0f20 	tst.w	r3, #32
 80077b4:	f000 80d5 	beq.w	8007962 <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077b8:	4b6b      	ldr	r3, [pc, #428]	; (8007968 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80077ba:	6818      	ldr	r0, [r3, #0]
 80077bc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80077c0:	4b6b      	ldr	r3, [pc, #428]	; (8007970 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80077c2:	fa23 f000 	lsr.w	r0, r3, r0
 80077c6:	4770      	bx	lr
{
 80077c8:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077ca:	4a67      	ldr	r2, [pc, #412]	; (8007968 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80077cc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80077ce:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80077d2:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80077d4:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80077d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80077da:	f003 0c01 	and.w	ip, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80077de:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80077e0:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80077e4:	fb0c f303 	mul.w	r3, ip, r3
 80077e8:	ee07 3a90 	vmov	s15, r3
 80077ec:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 80077f0:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 80077f4:	f000 8093 	beq.w	800791e <HAL_RCC_GetSysClockFreq+0x18a>
    {
      switch (pllsource)
 80077f8:	2901      	cmp	r1, #1
 80077fa:	d065      	beq.n	80078c8 <HAL_RCC_GetSysClockFreq+0x134>
 80077fc:	2902      	cmp	r1, #2
 80077fe:	f000 8091 	beq.w	8007924 <HAL_RCC_GetSysClockFreq+0x190>
 8007802:	b1e1      	cbz	r1, 800783e <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007804:	ee07 0a10 	vmov	s14, r0
 8007808:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800780c:	ed9f 6a59 	vldr	s12, [pc, #356]	; 8007974 <HAL_RCC_GetSysClockFreq+0x1e0>
 8007810:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007814:	4b54      	ldr	r3, [pc, #336]	; (8007968 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800781c:	ee06 3a90 	vmov	s13, r3
 8007820:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007824:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8007978 <HAL_RCC_GetSysClockFreq+0x1e4>
 8007828:	ee67 7a86 	vmul.f32	s15, s15, s12
 800782c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007834:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007838:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800783c:	e060      	b.n	8007900 <HAL_RCC_GetSysClockFreq+0x16c>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800783e:	6813      	ldr	r3, [r2, #0]
 8007840:	f013 0f20 	tst.w	r3, #32
 8007844:	d023      	beq.n	800788e <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007846:	4611      	mov	r1, r2
 8007848:	6812      	ldr	r2, [r2, #0]
 800784a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800784e:	4b48      	ldr	r3, [pc, #288]	; (8007970 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8007850:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007852:	ee07 3a10 	vmov	s14, r3
 8007856:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800785a:	ee07 0a10 	vmov	s14, r0
 800785e:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8007862:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8007866:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8007868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800786c:	ee06 3a90 	vmov	s13, r3
 8007870:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007874:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8007978 <HAL_RCC_GetSysClockFreq+0x1e4>
 8007878:	ee67 7a86 	vmul.f32	s15, s15, s12
 800787c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007880:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007884:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007888:	ee27 7a27 	vmul.f32	s14, s14, s15
 800788c:	e038      	b.n	8007900 <HAL_RCC_GetSysClockFreq+0x16c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800788e:	ee07 0a10 	vmov	s14, r0
 8007892:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007896:	ed9f 6a39 	vldr	s12, [pc, #228]	; 800797c <HAL_RCC_GetSysClockFreq+0x1e8>
 800789a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800789e:	4b32      	ldr	r3, [pc, #200]	; (8007968 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80078a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a6:	ee06 3a90 	vmov	s13, r3
 80078aa:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80078ae:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8007978 <HAL_RCC_GetSysClockFreq+0x1e4>
 80078b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80078b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078c6:	e01b      	b.n	8007900 <HAL_RCC_GetSysClockFreq+0x16c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078c8:	ee07 0a10 	vmov	s14, r0
 80078cc:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80078d0:	ed9f 6a28 	vldr	s12, [pc, #160]	; 8007974 <HAL_RCC_GetSysClockFreq+0x1e0>
 80078d4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80078d8:	4b23      	ldr	r3, [pc, #140]	; (8007968 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80078da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078e0:	ee06 3a90 	vmov	s13, r3
 80078e4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80078e8:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8007978 <HAL_RCC_GetSysClockFreq+0x1e4>
 80078ec:	ee67 7a86 	vmul.f32	s15, s15, s12
 80078f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078fc:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007900:	4b19      	ldr	r3, [pc, #100]	; (8007968 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007904:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007908:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007912:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007916:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800791a:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800791e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007922:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007924:	ee07 0a10 	vmov	s14, r0
 8007928:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800792c:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8007980 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007930:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007934:	4b0c      	ldr	r3, [pc, #48]	; (8007968 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800793c:	ee06 3a90 	vmov	s13, r3
 8007940:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007944:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8007978 <HAL_RCC_GetSysClockFreq+0x1e4>
 8007948:	ee67 7a86 	vmul.f32	s15, s15, s12
 800794c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007950:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007958:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800795c:	e7d0      	b.n	8007900 <HAL_RCC_GetSysClockFreq+0x16c>
    sysclockfreq = HSE_VALUE;
 800795e:	4809      	ldr	r0, [pc, #36]	; (8007984 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007960:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007962:	4803      	ldr	r0, [pc, #12]	; (8007970 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	58024400 	.word	0x58024400
 800796c:	003d0900 	.word	0x003d0900
 8007970:	03d09000 	.word	0x03d09000
 8007974:	4a742400 	.word	0x4a742400
 8007978:	39000000 	.word	0x39000000
 800797c:	4c742400 	.word	0x4c742400
 8007980:	4bb71b00 	.word	0x4bb71b00
 8007984:	016e3600 	.word	0x016e3600

08007988 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8007988:	2800      	cmp	r0, #0
 800798a:	f000 8132 	beq.w	8007bf2 <HAL_RCC_ClockConfig+0x26a>
{
 800798e:	b570      	push	{r4, r5, r6, lr}
 8007990:	460d      	mov	r5, r1
 8007992:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007994:	4b9b      	ldr	r3, [pc, #620]	; (8007c04 <HAL_RCC_ClockConfig+0x27c>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 030f 	and.w	r3, r3, #15
 800799c:	428b      	cmp	r3, r1
 800799e:	d20b      	bcs.n	80079b8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079a0:	4a98      	ldr	r2, [pc, #608]	; (8007c04 <HAL_RCC_ClockConfig+0x27c>)
 80079a2:	6813      	ldr	r3, [r2, #0]
 80079a4:	f023 030f 	bic.w	r3, r3, #15
 80079a8:	430b      	orrs	r3, r1
 80079aa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079ac:	6813      	ldr	r3, [r2, #0]
 80079ae:	f003 030f 	and.w	r3, r3, #15
 80079b2:	428b      	cmp	r3, r1
 80079b4:	f040 811f 	bne.w	8007bf6 <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	f013 0f04 	tst.w	r3, #4
 80079be:	d00c      	beq.n	80079da <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80079c0:	6922      	ldr	r2, [r4, #16]
 80079c2:	4b91      	ldr	r3, [pc, #580]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d905      	bls.n	80079da <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80079ce:	498e      	ldr	r1, [pc, #568]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 80079d0:	698b      	ldr	r3, [r1, #24]
 80079d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d6:	431a      	orrs	r2, r3
 80079d8:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	f013 0f08 	tst.w	r3, #8
 80079e0:	d00c      	beq.n	80079fc <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80079e2:	6962      	ldr	r2, [r4, #20]
 80079e4:	4b88      	ldr	r3, [pc, #544]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d905      	bls.n	80079fc <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80079f0:	4985      	ldr	r1, [pc, #532]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 80079f2:	69cb      	ldr	r3, [r1, #28]
 80079f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f8:	431a      	orrs	r2, r3
 80079fa:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	f013 0f10 	tst.w	r3, #16
 8007a02:	d00c      	beq.n	8007a1e <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007a04:	69a2      	ldr	r2, [r4, #24]
 8007a06:	4b80      	ldr	r3, [pc, #512]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007a08:	69db      	ldr	r3, [r3, #28]
 8007a0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d905      	bls.n	8007a1e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a12:	497d      	ldr	r1, [pc, #500]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007a14:	69cb      	ldr	r3, [r1, #28]
 8007a16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007a1a:	431a      	orrs	r2, r3
 8007a1c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	f013 0f20 	tst.w	r3, #32
 8007a24:	d00c      	beq.n	8007a40 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007a26:	69e2      	ldr	r2, [r4, #28]
 8007a28:	4b77      	ldr	r3, [pc, #476]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007a2a:	6a1b      	ldr	r3, [r3, #32]
 8007a2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d905      	bls.n	8007a40 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007a34:	4974      	ldr	r1, [pc, #464]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007a36:	6a0b      	ldr	r3, [r1, #32]
 8007a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a40:	6823      	ldr	r3, [r4, #0]
 8007a42:	f013 0f02 	tst.w	r3, #2
 8007a46:	d00c      	beq.n	8007a62 <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a48:	68e2      	ldr	r2, [r4, #12]
 8007a4a:	4b6f      	ldr	r3, [pc, #444]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	f003 030f 	and.w	r3, r3, #15
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d905      	bls.n	8007a62 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a56:	496c      	ldr	r1, [pc, #432]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007a58:	698b      	ldr	r3, [r1, #24]
 8007a5a:	f023 030f 	bic.w	r3, r3, #15
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	f013 0f01 	tst.w	r3, #1
 8007a68:	d041      	beq.n	8007aee <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007a6a:	4a67      	ldr	r2, [pc, #412]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007a6c:	6993      	ldr	r3, [r2, #24]
 8007a6e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007a72:	68a1      	ldr	r1, [r4, #8]
 8007a74:	430b      	orrs	r3, r1
 8007a76:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a78:	6863      	ldr	r3, [r4, #4]
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d00a      	beq.n	8007a94 <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a7e:	2b03      	cmp	r3, #3
 8007a80:	d027      	beq.n	8007ad2 <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d02c      	beq.n	8007ae0 <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a86:	4a60      	ldr	r2, [pc, #384]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007a88:	6812      	ldr	r2, [r2, #0]
 8007a8a:	f012 0f04 	tst.w	r2, #4
 8007a8e:	d106      	bne.n	8007a9e <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8007a90:	2001      	movs	r0, #1
 8007a92:	e0ad      	b.n	8007bf0 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a94:	6812      	ldr	r2, [r2, #0]
 8007a96:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8007a9a:	f000 80ae 	beq.w	8007bfa <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007a9e:	495a      	ldr	r1, [pc, #360]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007aa0:	690a      	ldr	r2, [r1, #16]
 8007aa2:	f022 0207 	bic.w	r2, r2, #7
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8007aaa:	f7fb fea5 	bl	80037f8 <HAL_GetTick>
 8007aae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ab0:	4b55      	ldr	r3, [pc, #340]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ab8:	6862      	ldr	r2, [r4, #4]
 8007aba:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8007abe:	d016      	beq.n	8007aee <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ac0:	f7fb fe9a 	bl	80037f8 <HAL_GetTick>
 8007ac4:	1b80      	subs	r0, r0, r6
 8007ac6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007aca:	4298      	cmp	r0, r3
 8007acc:	d9f0      	bls.n	8007ab0 <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 8007ace:	2003      	movs	r0, #3
 8007ad0:	e08e      	b.n	8007bf0 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ad2:	4a4d      	ldr	r2, [pc, #308]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007ad4:	6812      	ldr	r2, [r2, #0]
 8007ad6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8007ada:	d1e0      	bne.n	8007a9e <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8007adc:	2001      	movs	r0, #1
 8007ade:	e087      	b.n	8007bf0 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ae0:	4a49      	ldr	r2, [pc, #292]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007ae2:	6812      	ldr	r2, [r2, #0]
 8007ae4:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007ae8:	d1d9      	bne.n	8007a9e <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8007aea:	2001      	movs	r0, #1
 8007aec:	e080      	b.n	8007bf0 <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	f013 0f02 	tst.w	r3, #2
 8007af4:	d00c      	beq.n	8007b10 <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007af6:	68e2      	ldr	r2, [r4, #12]
 8007af8:	4b43      	ldr	r3, [pc, #268]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	f003 030f 	and.w	r3, r3, #15
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d205      	bcs.n	8007b10 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b04:	4940      	ldr	r1, [pc, #256]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007b06:	698b      	ldr	r3, [r1, #24]
 8007b08:	f023 030f 	bic.w	r3, r3, #15
 8007b0c:	431a      	orrs	r2, r3
 8007b0e:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b10:	4b3c      	ldr	r3, [pc, #240]	; (8007c04 <HAL_RCC_ClockConfig+0x27c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 030f 	and.w	r3, r3, #15
 8007b18:	42ab      	cmp	r3, r5
 8007b1a:	d90a      	bls.n	8007b32 <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b1c:	4a39      	ldr	r2, [pc, #228]	; (8007c04 <HAL_RCC_ClockConfig+0x27c>)
 8007b1e:	6813      	ldr	r3, [r2, #0]
 8007b20:	f023 030f 	bic.w	r3, r3, #15
 8007b24:	432b      	orrs	r3, r5
 8007b26:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b28:	6813      	ldr	r3, [r2, #0]
 8007b2a:	f003 030f 	and.w	r3, r3, #15
 8007b2e:	42ab      	cmp	r3, r5
 8007b30:	d165      	bne.n	8007bfe <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	f013 0f04 	tst.w	r3, #4
 8007b38:	d00c      	beq.n	8007b54 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007b3a:	6922      	ldr	r2, [r4, #16]
 8007b3c:	4b32      	ldr	r3, [pc, #200]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d205      	bcs.n	8007b54 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007b48:	492f      	ldr	r1, [pc, #188]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007b4a:	698b      	ldr	r3, [r1, #24]
 8007b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b50:	431a      	orrs	r2, r3
 8007b52:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	f013 0f08 	tst.w	r3, #8
 8007b5a:	d00c      	beq.n	8007b76 <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007b5c:	6962      	ldr	r2, [r4, #20]
 8007b5e:	4b2a      	ldr	r3, [pc, #168]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d205      	bcs.n	8007b76 <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007b6a:	4927      	ldr	r1, [pc, #156]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007b6c:	69cb      	ldr	r3, [r1, #28]
 8007b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b72:	431a      	orrs	r2, r3
 8007b74:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	f013 0f10 	tst.w	r3, #16
 8007b7c:	d00c      	beq.n	8007b98 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b7e:	69a2      	ldr	r2, [r4, #24]
 8007b80:	4b21      	ldr	r3, [pc, #132]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d205      	bcs.n	8007b98 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b8c:	491e      	ldr	r1, [pc, #120]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007b8e:	69cb      	ldr	r3, [r1, #28]
 8007b90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007b94:	431a      	orrs	r2, r3
 8007b96:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	f013 0f20 	tst.w	r3, #32
 8007b9e:	d00c      	beq.n	8007bba <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007ba0:	69e2      	ldr	r2, [r4, #28]
 8007ba2:	4b19      	ldr	r3, [pc, #100]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d205      	bcs.n	8007bba <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007bae:	4916      	ldr	r1, [pc, #88]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007bb0:	6a0b      	ldr	r3, [r1, #32]
 8007bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007bba:	f7ff fdeb 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 8007bbe:	4912      	ldr	r1, [pc, #72]	; (8007c08 <HAL_RCC_ClockConfig+0x280>)
 8007bc0:	698b      	ldr	r3, [r1, #24]
 8007bc2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007bc6:	4a11      	ldr	r2, [pc, #68]	; (8007c0c <HAL_RCC_ClockConfig+0x284>)
 8007bc8:	5cd3      	ldrb	r3, [r2, r3]
 8007bca:	f003 031f 	and.w	r3, r3, #31
 8007bce:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007bd0:	698b      	ldr	r3, [r1, #24]
 8007bd2:	f003 030f 	and.w	r3, r3, #15
 8007bd6:	5cd3      	ldrb	r3, [r2, r3]
 8007bd8:	f003 031f 	and.w	r3, r3, #31
 8007bdc:	fa20 f303 	lsr.w	r3, r0, r3
 8007be0:	4a0b      	ldr	r2, [pc, #44]	; (8007c10 <HAL_RCC_ClockConfig+0x288>)
 8007be2:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8007be4:	4b0b      	ldr	r3, [pc, #44]	; (8007c14 <HAL_RCC_ClockConfig+0x28c>)
 8007be6:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8007be8:	4b0b      	ldr	r3, [pc, #44]	; (8007c18 <HAL_RCC_ClockConfig+0x290>)
 8007bea:	6818      	ldr	r0, [r3, #0]
 8007bec:	f7fb fbca 	bl	8003384 <HAL_InitTick>
}
 8007bf0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8007bf2:	2001      	movs	r0, #1
}
 8007bf4:	4770      	bx	lr
      return HAL_ERROR;
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	e7fa      	b.n	8007bf0 <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 8007bfa:	2001      	movs	r0, #1
 8007bfc:	e7f8      	b.n	8007bf0 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 8007bfe:	2001      	movs	r0, #1
 8007c00:	e7f6      	b.n	8007bf0 <HAL_RCC_ClockConfig+0x268>
 8007c02:	bf00      	nop
 8007c04:	52002000 	.word	0x52002000
 8007c08:	58024400 	.word	0x58024400
 8007c0c:	0801bf94 	.word	0x0801bf94
 8007c10:	24000004 	.word	0x24000004
 8007c14:	24000000 	.word	0x24000000
 8007c18:	2400000c 	.word	0x2400000c

08007c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c1c:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c1e:	f7ff fdb9 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 8007c22:	4a0b      	ldr	r2, [pc, #44]	; (8007c50 <HAL_RCC_GetHCLKFreq+0x34>)
 8007c24:	6993      	ldr	r3, [r2, #24]
 8007c26:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007c2a:	490a      	ldr	r1, [pc, #40]	; (8007c54 <HAL_RCC_GetHCLKFreq+0x38>)
 8007c2c:	5ccb      	ldrb	r3, [r1, r3]
 8007c2e:	f003 031f 	and.w	r3, r3, #31
 8007c32:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c36:	6992      	ldr	r2, [r2, #24]
 8007c38:	f002 020f 	and.w	r2, r2, #15
 8007c3c:	5c88      	ldrb	r0, [r1, r2]
 8007c3e:	f000 001f 	and.w	r0, r0, #31
 8007c42:	fa23 f000 	lsr.w	r0, r3, r0
 8007c46:	4a04      	ldr	r2, [pc, #16]	; (8007c58 <HAL_RCC_GetHCLKFreq+0x3c>)
 8007c48:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c4a:	4a04      	ldr	r2, [pc, #16]	; (8007c5c <HAL_RCC_GetHCLKFreq+0x40>)
 8007c4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8007c4e:	bd08      	pop	{r3, pc}
 8007c50:	58024400 	.word	0x58024400
 8007c54:	0801bf94 	.word	0x0801bf94
 8007c58:	24000004 	.word	0x24000004
 8007c5c:	24000000 	.word	0x24000000

08007c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c60:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007c62:	f7ff ffdb 	bl	8007c1c <HAL_RCC_GetHCLKFreq>
 8007c66:	4b05      	ldr	r3, [pc, #20]	; (8007c7c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007c6e:	4a04      	ldr	r2, [pc, #16]	; (8007c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c70:	5cd3      	ldrb	r3, [r2, r3]
 8007c72:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007c76:	40d8      	lsrs	r0, r3
 8007c78:	bd08      	pop	{r3, pc}
 8007c7a:	bf00      	nop
 8007c7c:	58024400 	.word	0x58024400
 8007c80:	0801bf94 	.word	0x0801bf94

08007c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c84:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007c86:	f7ff ffc9 	bl	8007c1c <HAL_RCC_GetHCLKFreq>
 8007c8a:	4b05      	ldr	r3, [pc, #20]	; (8007ca0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007c92:	4a04      	ldr	r2, [pc, #16]	; (8007ca4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c94:	5cd3      	ldrb	r3, [r2, r3]
 8007c96:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007c9a:	40d8      	lsrs	r0, r3
 8007c9c:	bd08      	pop	{r3, pc}
 8007c9e:	bf00      	nop
 8007ca0:	58024400 	.word	0x58024400
 8007ca4:	0801bf94 	.word	0x0801bf94

08007ca8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007ca8:	233f      	movs	r3, #63	; 0x3f
 8007caa:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007cac:	4b11      	ldr	r3, [pc, #68]	; (8007cf4 <HAL_RCC_GetClockConfig+0x4c>)
 8007cae:	691a      	ldr	r2, [r3, #16]
 8007cb0:	f002 0207 	and.w	r2, r2, #7
 8007cb4:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007cb6:	699a      	ldr	r2, [r3, #24]
 8007cb8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8007cbc:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007cbe:	699a      	ldr	r2, [r3, #24]
 8007cc0:	f002 020f 	and.w	r2, r2, #15
 8007cc4:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007cc6:	699a      	ldr	r2, [r3, #24]
 8007cc8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007ccc:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007cce:	69da      	ldr	r2, [r3, #28]
 8007cd0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007cd4:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007cd6:	69da      	ldr	r2, [r3, #28]
 8007cd8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007cdc:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ce4:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ce6:	4b04      	ldr	r3, [pc, #16]	; (8007cf8 <HAL_RCC_GetClockConfig+0x50>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 030f 	and.w	r3, r3, #15
 8007cee:	600b      	str	r3, [r1, #0]
}
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	58024400 	.word	0x58024400
 8007cf8:	52002000 	.word	0x52002000

08007cfc <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cfc:	4b40      	ldr	r3, [pc, #256]	; (8007e00 <RCCEx_PLL2_Config+0x104>)
 8007cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d00:	f003 0303 	and.w	r3, r3, #3
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d079      	beq.n	8007dfc <RCCEx_PLL2_Config+0x100>
{
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007d0e:	4a3c      	ldr	r2, [pc, #240]	; (8007e00 <RCCEx_PLL2_Config+0x104>)
 8007d10:	6813      	ldr	r3, [r2, #0]
 8007d12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d18:	f7fb fd6e 	bl	80037f8 <HAL_GetTick>
 8007d1c:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d1e:	4b38      	ldr	r3, [pc, #224]	; (8007e00 <RCCEx_PLL2_Config+0x104>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007d26:	d006      	beq.n	8007d36 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007d28:	f7fb fd66 	bl	80037f8 <HAL_GetTick>
 8007d2c:	1b03      	subs	r3, r0, r4
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d9f5      	bls.n	8007d1e <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8007d32:	2003      	movs	r0, #3

  }


  return status;
}
 8007d34:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007d36:	4b32      	ldr	r3, [pc, #200]	; (8007e00 <RCCEx_PLL2_Config+0x104>)
 8007d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d3a:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8007d3e:	6829      	ldr	r1, [r5, #0]
 8007d40:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8007d44:	629a      	str	r2, [r3, #40]	; 0x28
 8007d46:	686a      	ldr	r2, [r5, #4]
 8007d48:	3a01      	subs	r2, #1
 8007d4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d4e:	68a9      	ldr	r1, [r5, #8]
 8007d50:	3901      	subs	r1, #1
 8007d52:	0249      	lsls	r1, r1, #9
 8007d54:	b289      	uxth	r1, r1
 8007d56:	430a      	orrs	r2, r1
 8007d58:	68e9      	ldr	r1, [r5, #12]
 8007d5a:	3901      	subs	r1, #1
 8007d5c:	0409      	lsls	r1, r1, #16
 8007d5e:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8007d62:	430a      	orrs	r2, r1
 8007d64:	6929      	ldr	r1, [r5, #16]
 8007d66:	3901      	subs	r1, #1
 8007d68:	0609      	lsls	r1, r1, #24
 8007d6a:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d74:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007d78:	6969      	ldr	r1, [r5, #20]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d80:	f022 0220 	bic.w	r2, r2, #32
 8007d84:	69a9      	ldr	r1, [r5, #24]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8c:	f022 0210 	bic.w	r2, r2, #16
 8007d90:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007d92:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007d94:	4a1b      	ldr	r2, [pc, #108]	; (8007e04 <RCCEx_PLL2_Config+0x108>)
 8007d96:	400a      	ands	r2, r1
 8007d98:	69e9      	ldr	r1, [r5, #28]
 8007d9a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8007d9e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da2:	f042 0210 	orr.w	r2, r2, #16
 8007da6:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007da8:	b9c6      	cbnz	r6, 8007ddc <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007daa:	461a      	mov	r2, r3
 8007dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007db2:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8007db4:	4a12      	ldr	r2, [pc, #72]	; (8007e00 <RCCEx_PLL2_Config+0x104>)
 8007db6:	6813      	ldr	r3, [r2, #0]
 8007db8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007dbc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007dbe:	f7fb fd1b 	bl	80037f8 <HAL_GetTick>
 8007dc2:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007dc4:	4b0e      	ldr	r3, [pc, #56]	; (8007e00 <RCCEx_PLL2_Config+0x104>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007dcc:	d114      	bne.n	8007df8 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007dce:	f7fb fd13 	bl	80037f8 <HAL_GetTick>
 8007dd2:	1b00      	subs	r0, r0, r4
 8007dd4:	2802      	cmp	r0, #2
 8007dd6:	d9f5      	bls.n	8007dc4 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8007dd8:	2003      	movs	r0, #3
 8007dda:	e7ab      	b.n	8007d34 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8007ddc:	2e01      	cmp	r6, #1
 8007dde:	d005      	beq.n	8007dec <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007de0:	4a07      	ldr	r2, [pc, #28]	; (8007e00 <RCCEx_PLL2_Config+0x104>)
 8007de2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007de4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007de8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007dea:	e7e3      	b.n	8007db4 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007dec:	4a04      	ldr	r2, [pc, #16]	; (8007e00 <RCCEx_PLL2_Config+0x104>)
 8007dee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007df0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007df4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007df6:	e7dd      	b.n	8007db4 <RCCEx_PLL2_Config+0xb8>
  return status;
 8007df8:	2000      	movs	r0, #0
 8007dfa:	e79b      	b.n	8007d34 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8007dfc:	2001      	movs	r0, #1
}
 8007dfe:	4770      	bx	lr
 8007e00:	58024400 	.word	0x58024400
 8007e04:	ffff0007 	.word	0xffff0007

08007e08 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e08:	4b40      	ldr	r3, [pc, #256]	; (8007f0c <RCCEx_PLL3_Config+0x104>)
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0c:	f003 0303 	and.w	r3, r3, #3
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d079      	beq.n	8007f08 <RCCEx_PLL3_Config+0x100>
{
 8007e14:	b570      	push	{r4, r5, r6, lr}
 8007e16:	4605      	mov	r5, r0
 8007e18:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007e1a:	4a3c      	ldr	r2, [pc, #240]	; (8007f0c <RCCEx_PLL3_Config+0x104>)
 8007e1c:	6813      	ldr	r3, [r2, #0]
 8007e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e24:	f7fb fce8 	bl	80037f8 <HAL_GetTick>
 8007e28:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e2a:	4b38      	ldr	r3, [pc, #224]	; (8007f0c <RCCEx_PLL3_Config+0x104>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8007e32:	d006      	beq.n	8007e42 <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007e34:	f7fb fce0 	bl	80037f8 <HAL_GetTick>
 8007e38:	1b03      	subs	r3, r0, r4
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d9f5      	bls.n	8007e2a <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8007e3e:	2003      	movs	r0, #3

  }


  return status;
}
 8007e40:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007e42:	4b32      	ldr	r3, [pc, #200]	; (8007f0c <RCCEx_PLL3_Config+0x104>)
 8007e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e46:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8007e4a:	6829      	ldr	r1, [r5, #0]
 8007e4c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8007e50:	629a      	str	r2, [r3, #40]	; 0x28
 8007e52:	686a      	ldr	r2, [r5, #4]
 8007e54:	3a01      	subs	r2, #1
 8007e56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e5a:	68a9      	ldr	r1, [r5, #8]
 8007e5c:	3901      	subs	r1, #1
 8007e5e:	0249      	lsls	r1, r1, #9
 8007e60:	b289      	uxth	r1, r1
 8007e62:	430a      	orrs	r2, r1
 8007e64:	68e9      	ldr	r1, [r5, #12]
 8007e66:	3901      	subs	r1, #1
 8007e68:	0409      	lsls	r1, r1, #16
 8007e6a:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	6929      	ldr	r1, [r5, #16]
 8007e72:	3901      	subs	r1, #1
 8007e74:	0609      	lsls	r1, r1, #24
 8007e76:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e80:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007e84:	6969      	ldr	r1, [r5, #20]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007e90:	69a9      	ldr	r1, [r5, #24]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e9c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e9e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007ea0:	4a1b      	ldr	r2, [pc, #108]	; (8007f10 <RCCEx_PLL3_Config+0x108>)
 8007ea2:	400a      	ands	r2, r1
 8007ea4:	69e9      	ldr	r1, [r5, #28]
 8007ea6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8007eaa:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007eb2:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8007eb4:	b9c6      	cbnz	r6, 8007ee8 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ebe:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8007ec0:	4a12      	ldr	r2, [pc, #72]	; (8007f0c <RCCEx_PLL3_Config+0x104>)
 8007ec2:	6813      	ldr	r3, [r2, #0]
 8007ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ec8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007eca:	f7fb fc95 	bl	80037f8 <HAL_GetTick>
 8007ece:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ed0:	4b0e      	ldr	r3, [pc, #56]	; (8007f0c <RCCEx_PLL3_Config+0x104>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8007ed8:	d114      	bne.n	8007f04 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007eda:	f7fb fc8d 	bl	80037f8 <HAL_GetTick>
 8007ede:	1b00      	subs	r0, r0, r4
 8007ee0:	2802      	cmp	r0, #2
 8007ee2:	d9f5      	bls.n	8007ed0 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8007ee4:	2003      	movs	r0, #3
 8007ee6:	e7ab      	b.n	8007e40 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8007ee8:	2e01      	cmp	r6, #1
 8007eea:	d005      	beq.n	8007ef8 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007eec:	4a07      	ldr	r2, [pc, #28]	; (8007f0c <RCCEx_PLL3_Config+0x104>)
 8007eee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007ef0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ef4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ef6:	e7e3      	b.n	8007ec0 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007ef8:	4a04      	ldr	r2, [pc, #16]	; (8007f0c <RCCEx_PLL3_Config+0x104>)
 8007efa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007efc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f00:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f02:	e7dd      	b.n	8007ec0 <RCCEx_PLL3_Config+0xb8>
  return status;
 8007f04:	2000      	movs	r0, #0
 8007f06:	e79b      	b.n	8007e40 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8007f08:	2001      	movs	r0, #1
}
 8007f0a:	4770      	bx	lr
 8007f0c:	58024400 	.word	0x58024400
 8007f10:	ffff0007 	.word	0xffff0007

08007f14 <HAL_RCCEx_PeriphCLKConfig>:
{
 8007f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f16:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f18:	6803      	ldr	r3, [r0, #0]
 8007f1a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007f1e:	d030      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007f20:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8007f22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f26:	d026      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007f28:	d80e      	bhi.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8007f2a:	b1eb      	cbz	r3, 8007f68 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f30:	d107      	bne.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f32:	2102      	movs	r1, #2
 8007f34:	3004      	adds	r0, #4
 8007f36:	f7ff fee1 	bl	8007cfc <RCCEx_PLL2_Config>
 8007f3a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007f3c:	b145      	cbz	r5, 8007f50 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8007f3e:	462e      	mov	r6, r5
 8007f40:	e021      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007f42:	2601      	movs	r6, #1
 8007f44:	4635      	mov	r5, r6
 8007f46:	e01e      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007f48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f4c:	d109      	bne.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007f4e:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007f50:	4a95      	ldr	r2, [pc, #596]	; (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007f52:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007f54:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007f58:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007f5a:	430b      	orrs	r3, r1
 8007f5c:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f5e:	2600      	movs	r6, #0
 8007f60:	e011      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007f62:	2601      	movs	r6, #1
 8007f64:	4635      	mov	r5, r6
 8007f66:	e00e      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f68:	4a8f      	ldr	r2, [pc, #572]	; (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007f6a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f70:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f72:	2500      	movs	r5, #0
 8007f74:	e7ec      	b.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f76:	2102      	movs	r1, #2
 8007f78:	3024      	adds	r0, #36	; 0x24
 8007f7a:	f7ff ff45 	bl	8007e08 <RCCEx_PLL3_Config>
 8007f7e:	4605      	mov	r5, r0
      break;
 8007f80:	e7dc      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f82:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f84:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007f8c:	d014      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007f8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007f90:	2b04      	cmp	r3, #4
 8007f92:	d830      	bhi.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007f94:	e8df f003 	tbb	[pc, r3]
 8007f98:	08282203 	.word	0x08282203
 8007f9c:	08          	.byte	0x08
 8007f9d:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f9e:	4a82      	ldr	r2, [pc, #520]	; (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007fa0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fa6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007fa8:	bb45      	cbnz	r5, 8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007faa:	4a7f      	ldr	r2, [pc, #508]	; (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007fac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007fae:	f023 0307 	bic.w	r3, r3, #7
 8007fb2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007fb4:	430b      	orrs	r3, r1
 8007fb6:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007fbe:	d02f      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai23ClockSelection)
 8007fc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007fc2:	2b80      	cmp	r3, #128	; 0x80
 8007fc4:	d049      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x146>
 8007fc6:	d81e      	bhi.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d040      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8007fcc:	2b40      	cmp	r3, #64	; 0x40
 8007fce:	d117      	bne.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0xec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	1d20      	adds	r0, r4, #4
 8007fd4:	f7ff fe92 	bl	8007cfc <RCCEx_PLL2_Config>
 8007fd8:	4605      	mov	r5, r0
      break;
 8007fda:	e019      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fdc:	2100      	movs	r1, #0
 8007fde:	1d20      	adds	r0, r4, #4
 8007fe0:	f7ff fe8c 	bl	8007cfc <RCCEx_PLL2_Config>
 8007fe4:	4605      	mov	r5, r0
      break;
 8007fe6:	e7df      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007fe8:	2100      	movs	r1, #0
 8007fea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007fee:	f7ff ff0b 	bl	8007e08 <RCCEx_PLL3_Config>
 8007ff2:	4605      	mov	r5, r0
      break;
 8007ff4:	e7d8      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007ff6:	2601      	movs	r6, #1
 8007ff8:	4635      	mov	r5, r6
 8007ffa:	e7dd      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007ffc:	462e      	mov	r6, r5
 8007ffe:	e7db      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai23ClockSelection)
 8008000:	2601      	movs	r6, #1
 8008002:	4635      	mov	r5, r6
 8008004:	e00c      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008006:	2bc0      	cmp	r3, #192	; 0xc0
 8008008:	d002      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800800a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800800e:	d11b      	bne.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 8008010:	bb55      	cbnz	r5, 8008068 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008012:	4a65      	ldr	r2, [pc, #404]	; (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008014:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008016:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800801a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800801c:	430b      	orrs	r3, r1
 800801e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008026:	d045      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008028:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800802c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008030:	d038      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8008032:	d81e      	bhi.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8008034:	b383      	cbz	r3, 8008098 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8008036:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800803a:	d117      	bne.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x158>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800803c:	2100      	movs	r1, #0
 800803e:	1d20      	adds	r0, r4, #4
 8008040:	f7ff fe5c 	bl	8007cfc <RCCEx_PLL2_Config>
 8008044:	4605      	mov	r5, r0
      break;
 8008046:	e01a      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8008048:	2601      	movs	r6, #1
 800804a:	4635      	mov	r5, r6
 800804c:	e7e8      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800804e:	4a56      	ldr	r2, [pc, #344]	; (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008050:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008056:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008058:	e7da      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800805a:	2100      	movs	r1, #0
 800805c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008060:	f7ff fed2 	bl	8007e08 <RCCEx_PLL3_Config>
 8008064:	4605      	mov	r5, r0
      break;
 8008066:	e7d3      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8008068:	462e      	mov	r6, r5
 800806a:	e7d9      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai4AClockSelection)
 800806c:	2601      	movs	r6, #1
 800806e:	4635      	mov	r5, r6
 8008070:	e020      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8008072:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008076:	d002      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8008078:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800807c:	d109      	bne.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    if(ret == HAL_OK)
 800807e:	b9c5      	cbnz	r5, 80080b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008080:	4a49      	ldr	r2, [pc, #292]	; (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008082:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008084:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8008088:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800808c:	430b      	orrs	r3, r1
 800808e:	6593      	str	r3, [r2, #88]	; 0x58
 8008090:	e010      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8008092:	2601      	movs	r6, #1
 8008094:	4635      	mov	r5, r6
 8008096:	e00d      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008098:	4a43      	ldr	r2, [pc, #268]	; (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800809a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800809c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080a0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80080a2:	e7ec      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x16a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80080a4:	2100      	movs	r1, #0
 80080a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80080aa:	f7ff fead 	bl	8007e08 <RCCEx_PLL3_Config>
 80080ae:	4605      	mov	r5, r0
      break;
 80080b0:	e7e5      	b.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80080b2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80080ba:	d023      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->Sai4BClockSelection)
 80080bc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80080c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080c4:	d041      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x236>
 80080c6:	d80d      	bhi.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d038      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80080cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080d0:	d105      	bne.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080d2:	2100      	movs	r1, #0
 80080d4:	1d20      	adds	r0, r4, #4
 80080d6:	f7ff fe11 	bl	8007cfc <RCCEx_PLL2_Config>
 80080da:	4605      	mov	r5, r0
      break;
 80080dc:	e008      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch(PeriphClkInit->Sai4BClockSelection)
 80080de:	2601      	movs	r6, #1
 80080e0:	4635      	mov	r5, r6
 80080e2:	e00f      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80080e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80080e8:	d002      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80080ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080ee:	d123      	bne.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 80080f0:	2d00      	cmp	r5, #0
 80080f2:	d131      	bne.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80080f4:	4a2c      	ldr	r2, [pc, #176]	; (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80080f6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80080f8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80080fc:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8008100:	430b      	orrs	r3, r1
 8008102:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800810a:	d02e      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->QspiClockSelection)
 800810c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800810e:	2b20      	cmp	r3, #32
 8008110:	d03f      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8008112:	d826      	bhi.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8008114:	b133      	cbz	r3, 8008124 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8008116:	2b10      	cmp	r3, #16
 8008118:	d120      	bne.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800811a:	4a23      	ldr	r2, [pc, #140]	; (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800811c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800811e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008122:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8008124:	2d00      	cmp	r5, #0
 8008126:	d13a      	bne.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x28a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008128:	4a1f      	ldr	r2, [pc, #124]	; (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800812a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800812c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008130:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008132:	430b      	orrs	r3, r1
 8008134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008136:	e018      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->Sai4BClockSelection)
 8008138:	2601      	movs	r6, #1
 800813a:	4635      	mov	r5, r6
 800813c:	e7e2      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800813e:	4a1a      	ldr	r2, [pc, #104]	; (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008140:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008146:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008148:	e7d2      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800814a:	2100      	movs	r1, #0
 800814c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008150:	f7ff fe5a 	bl	8007e08 <RCCEx_PLL3_Config>
 8008154:	4605      	mov	r5, r0
      break;
 8008156:	e7cb      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008158:	462e      	mov	r6, r5
 800815a:	e7d3      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->QspiClockSelection)
 800815c:	2601      	movs	r6, #1
 800815e:	4635      	mov	r5, r6
 8008160:	e003      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8008162:	2b30      	cmp	r3, #48	; 0x30
 8008164:	d0de      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8008166:	2601      	movs	r6, #1
 8008168:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8008170:	d02b      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008172:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008178:	d04c      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800817a:	d817      	bhi.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x298>
 800817c:	2b00      	cmp	r3, #0
 800817e:	d043      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8008180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008184:	d10d      	bne.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008186:	2100      	movs	r1, #0
 8008188:	1d20      	adds	r0, r4, #4
 800818a:	f7ff fdb7 	bl	8007cfc <RCCEx_PLL2_Config>
 800818e:	4605      	mov	r5, r0
      break;
 8008190:	e012      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008192:	2102      	movs	r1, #2
 8008194:	1d20      	adds	r0, r4, #4
 8008196:	f7ff fdb1 	bl	8007cfc <RCCEx_PLL2_Config>
 800819a:	4605      	mov	r5, r0
      break;
 800819c:	e7c2      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800819e:	462e      	mov	r6, r5
 80081a0:	e7e3      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->Spi123ClockSelection)
 80081a2:	2601      	movs	r6, #1
 80081a4:	4635      	mov	r5, r6
 80081a6:	e010      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 80081a8:	58024400 	.word	0x58024400
 80081ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081b0:	d002      	beq.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 80081b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081b6:	d124      	bne.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    if(ret == HAL_OK)
 80081b8:	2d00      	cmp	r5, #0
 80081ba:	d132      	bne.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80081bc:	4a75      	ldr	r2, [pc, #468]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80081be:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80081c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80081c6:	430b      	orrs	r3, r1
 80081c8:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80081d0:	d037      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi45ClockSelection)
 80081d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80081d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081d8:	d051      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80081da:	d827      	bhi.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x318>
 80081dc:	b13b      	cbz	r3, 80081ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80081de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081e2:	d120      	bne.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081e4:	2101      	movs	r1, #1
 80081e6:	1d20      	adds	r0, r4, #4
 80081e8:	f7ff fd88 	bl	8007cfc <RCCEx_PLL2_Config>
 80081ec:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80081ee:	2d00      	cmp	r5, #0
 80081f0:	d14c      	bne.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80081f2:	4a68      	ldr	r2, [pc, #416]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80081f4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80081f6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80081fa:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80081fc:	430b      	orrs	r3, r1
 80081fe:	6513      	str	r3, [r2, #80]	; 0x50
 8008200:	e01f      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8008202:	2601      	movs	r6, #1
 8008204:	4635      	mov	r5, r6
 8008206:	e7e0      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008208:	4a62      	ldr	r2, [pc, #392]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800820a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800820c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008210:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8008212:	e7d1      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008214:	2100      	movs	r1, #0
 8008216:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800821a:	f7ff fdf5 	bl	8007e08 <RCCEx_PLL3_Config>
 800821e:	4605      	mov	r5, r0
      break;
 8008220:	e7ca      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8008222:	462e      	mov	r6, r5
 8008224:	e7d1      	b.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8008226:	2601      	movs	r6, #1
 8008228:	4635      	mov	r5, r6
 800822a:	e00a      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800822c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008230:	d0dd      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008232:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008236:	d0da      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008238:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800823c:	d0d7      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800823e:	2601      	movs	r6, #1
 8008240:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008248:	d030      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x398>
    switch(PeriphClkInit->Spi6ClockSelection)
 800824a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800824e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008252:	d044      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8008254:	d81f      	bhi.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008256:	b13b      	cbz	r3, 8008268 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8008258:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800825c:	d118      	bne.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800825e:	2101      	movs	r1, #1
 8008260:	1d20      	adds	r0, r4, #4
 8008262:	f7ff fd4b 	bl	8007cfc <RCCEx_PLL2_Config>
 8008266:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008268:	2d00      	cmp	r5, #0
 800826a:	d13f      	bne.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800826c:	4a49      	ldr	r2, [pc, #292]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800826e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008270:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8008274:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8008278:	430b      	orrs	r3, r1
 800827a:	6593      	str	r3, [r2, #88]	; 0x58
 800827c:	e016      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x398>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800827e:	2101      	movs	r1, #1
 8008280:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008284:	f7ff fdc0 	bl	8007e08 <RCCEx_PLL3_Config>
 8008288:	4605      	mov	r5, r0
      break;
 800828a:	e7b0      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800828c:	462e      	mov	r6, r5
 800828e:	e7d8      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi6ClockSelection)
 8008290:	2601      	movs	r6, #1
 8008292:	4635      	mov	r5, r6
 8008294:	e00a      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x398>
 8008296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800829a:	d0e5      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800829c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082a0:	d0e2      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80082a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80082a6:	d0df      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80082a8:	2601      	movs	r6, #1
 80082aa:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80082b2:	d009      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FdcanClockSelection)
 80082b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80082b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082ba:	d019      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 80082bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082c0:	d024      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80082c2:	b1d3      	cbz	r3, 80082fa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80082c4:	2601      	movs	r6, #1
 80082c6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80082c8:	6823      	ldr	r3, [r4, #0]
 80082ca:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80082ce:	d032      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x422>
    switch(PeriphClkInit->FmcClockSelection)
 80082d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d859      	bhi.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80082d6:	e8df f003 	tbb	[pc, r3]
 80082da:	2126      	.short	0x2126
 80082dc:	2652      	.short	0x2652
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082de:	2101      	movs	r1, #1
 80082e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80082e4:	f7ff fd90 	bl	8007e08 <RCCEx_PLL3_Config>
 80082e8:	4605      	mov	r5, r0
      break;
 80082ea:	e7bd      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80082ec:	462e      	mov	r6, r5
 80082ee:	e7dd      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x398>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082f0:	4a28      	ldr	r2, [pc, #160]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80082f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80082f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80082fa:	b96d      	cbnz	r5, 8008318 <HAL_RCCEx_PeriphCLKConfig+0x404>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80082fc:	4a25      	ldr	r2, [pc, #148]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80082fe:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008300:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008304:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8008306:	430b      	orrs	r3, r1
 8008308:	6513      	str	r3, [r2, #80]	; 0x50
 800830a:	e7dd      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800830c:	2101      	movs	r1, #1
 800830e:	1d20      	adds	r0, r4, #4
 8008310:	f7ff fcf4 	bl	8007cfc <RCCEx_PLL2_Config>
 8008314:	4605      	mov	r5, r0
      break;
 8008316:	e7f0      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008318:	462e      	mov	r6, r5
 800831a:	e7d5      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800831c:	4a1d      	ldr	r2, [pc, #116]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800831e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008324:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8008326:	bb9d      	cbnz	r5, 8008390 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008328:	4a1a      	ldr	r2, [pc, #104]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800832a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800832c:	f023 0303 	bic.w	r3, r3, #3
 8008330:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008332:	430b      	orrs	r3, r1
 8008334:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800833c:	d12c      	bne.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x484>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	f013 0f01 	tst.w	r3, #1
 8008344:	f000 80a3 	beq.w	800848e <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch(PeriphClkInit->Usart16ClockSelection)
 8008348:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800834a:	2b28      	cmp	r3, #40	; 0x28
 800834c:	f200 809d 	bhi.w	800848a <HAL_RCCEx_PeriphCLKConfig+0x576>
 8008350:	e8df f003 	tbb	[pc, r3]
 8008354:	9b9b9b8b 	.word	0x9b9b9b8b
 8008358:	9b9b9b9b 	.word	0x9b9b9b9b
 800835c:	9b9b9b86 	.word	0x9b9b9b86
 8008360:	9b9b9b9b 	.word	0x9b9b9b9b
 8008364:	9b9b9b94 	.word	0x9b9b9b94
 8008368:	9b9b9b9b 	.word	0x9b9b9b9b
 800836c:	9b9b9b8b 	.word	0x9b9b9b8b
 8008370:	9b9b9b9b 	.word	0x9b9b9b9b
 8008374:	9b9b9b8b 	.word	0x9b9b9b8b
 8008378:	9b9b9b9b 	.word	0x9b9b9b9b
 800837c:	8b          	.byte	0x8b
 800837d:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800837e:	2102      	movs	r1, #2
 8008380:	1d20      	adds	r0, r4, #4
 8008382:	f7ff fcbb 	bl	8007cfc <RCCEx_PLL2_Config>
 8008386:	4605      	mov	r5, r0
      break;
 8008388:	e7cd      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x412>
    switch(PeriphClkInit->FmcClockSelection)
 800838a:	2601      	movs	r6, #1
 800838c:	4635      	mov	r5, r6
 800838e:	e7d2      	b.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8008390:	462e      	mov	r6, r5
 8008392:	e7d0      	b.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8008394:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008398:	4a8f      	ldr	r2, [pc, #572]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800839a:	6813      	ldr	r3, [r2, #0]
 800839c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083a0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80083a2:	f7fb fa29 	bl	80037f8 <HAL_GetTick>
 80083a6:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083a8:	4b8b      	ldr	r3, [pc, #556]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f413 7f80 	tst.w	r3, #256	; 0x100
 80083b0:	d105      	bne.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083b2:	f7fb fa21 	bl	80037f8 <HAL_GetTick>
 80083b6:	1bc0      	subs	r0, r0, r7
 80083b8:	2864      	cmp	r0, #100	; 0x64
 80083ba:	d9f5      	bls.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = HAL_TIMEOUT;
 80083bc:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 80083be:	2d00      	cmp	r5, #0
 80083c0:	d14a      	bne.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x544>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80083c2:	4b86      	ldr	r3, [pc, #536]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80083c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c6:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80083ca:	4053      	eors	r3, r2
 80083cc:	f413 7f40 	tst.w	r3, #768	; 0x300
 80083d0:	d00c      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083d2:	4b82      	ldr	r3, [pc, #520]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80083d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80083da:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80083dc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80083e0:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80083e2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80083e4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80083e8:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80083ea:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80083ec:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80083f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083f4:	d015      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      if(ret == HAL_OK)
 80083f6:	bb8d      	cbnz	r5, 800845c <HAL_RCCEx_PeriphCLKConfig+0x548>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083f8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80083fc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008400:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8008404:	d01e      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x530>
 8008406:	4a75      	ldr	r2, [pc, #468]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008408:	6913      	ldr	r3, [r2, #16]
 800840a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800840e:	6113      	str	r3, [r2, #16]
 8008410:	4972      	ldr	r1, [pc, #456]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008412:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8008414:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8008418:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800841c:	4313      	orrs	r3, r2
 800841e:	670b      	str	r3, [r1, #112]	; 0x70
 8008420:	e78d      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x42a>
        tickstart = HAL_GetTick();
 8008422:	f7fb f9e9 	bl	80037f8 <HAL_GetTick>
 8008426:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008428:	4b6c      	ldr	r3, [pc, #432]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800842a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842c:	f013 0f02 	tst.w	r3, #2
 8008430:	d1e1      	bne.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008432:	f7fb f9e1 	bl	80037f8 <HAL_GetTick>
 8008436:	1bc0      	subs	r0, r0, r7
 8008438:	f241 3388 	movw	r3, #5000	; 0x1388
 800843c:	4298      	cmp	r0, r3
 800843e:	d9f3      	bls.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x514>
            ret = HAL_TIMEOUT;
 8008440:	2503      	movs	r5, #3
 8008442:	e7d8      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008444:	4865      	ldr	r0, [pc, #404]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008446:	6902      	ldr	r2, [r0, #16]
 8008448:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800844c:	4964      	ldr	r1, [pc, #400]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800844e:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8008452:	4313      	orrs	r3, r2
 8008454:	6103      	str	r3, [r0, #16]
 8008456:	e7db      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      status = ret;
 8008458:	462e      	mov	r6, r5
 800845a:	e770      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x42a>
        status = ret;
 800845c:	462e      	mov	r6, r5
 800845e:	e76e      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008460:	2101      	movs	r1, #1
 8008462:	1d20      	adds	r0, r4, #4
 8008464:	f7ff fc4a 	bl	8007cfc <RCCEx_PLL2_Config>
 8008468:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800846a:	b9e5      	cbnz	r5, 80084a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800846c:	4a5b      	ldr	r2, [pc, #364]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800846e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008470:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8008474:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8008476:	430b      	orrs	r3, r1
 8008478:	6553      	str	r3, [r2, #84]	; 0x54
 800847a:	e008      	b.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x57a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800847c:	2101      	movs	r1, #1
 800847e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008482:	f7ff fcc1 	bl	8007e08 <RCCEx_PLL3_Config>
 8008486:	4605      	mov	r5, r0
      break;
 8008488:	e7ef      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch(PeriphClkInit->Usart16ClockSelection)
 800848a:	2601      	movs	r6, #1
 800848c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	f013 0f02 	tst.w	r3, #2
 8008494:	d016      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008496:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008498:	2b05      	cmp	r3, #5
 800849a:	d827      	bhi.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 800849c:	e8df f003 	tbb	[pc, r3]
 80084a0:	0a1f050a 	.word	0x0a1f050a
 80084a4:	0a0a      	.short	0x0a0a
 80084a6:	462e      	mov	r6, r5
 80084a8:	e7f1      	b.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x57a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80084aa:	2101      	movs	r1, #1
 80084ac:	1d20      	adds	r0, r4, #4
 80084ae:	f7ff fc25 	bl	8007cfc <RCCEx_PLL2_Config>
 80084b2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80084b4:	b9ed      	cbnz	r5, 80084f2 <HAL_RCCEx_PeriphCLKConfig+0x5de>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80084b6:	4a49      	ldr	r2, [pc, #292]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80084b8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80084ba:	f023 0307 	bic.w	r3, r3, #7
 80084be:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80084c0:	430b      	orrs	r3, r1
 80084c2:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	f013 0f04 	tst.w	r3, #4
 80084ca:	d022      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80084cc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80084d0:	2b05      	cmp	r3, #5
 80084d2:	d843      	bhi.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x648>
 80084d4:	e8df f003 	tbb	[pc, r3]
 80084d8:	143b0f14 	.word	0x143b0f14
 80084dc:	1414      	.short	0x1414
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80084de:	2101      	movs	r1, #1
 80084e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80084e4:	f7ff fc90 	bl	8007e08 <RCCEx_PLL3_Config>
 80084e8:	4605      	mov	r5, r0
      break;
 80084ea:	e7e3      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80084ec:	2601      	movs	r6, #1
 80084ee:	4635      	mov	r5, r6
 80084f0:	e7e8      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 80084f2:	462e      	mov	r6, r5
 80084f4:	e7e6      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80084f6:	2101      	movs	r1, #1
 80084f8:	1d20      	adds	r0, r4, #4
 80084fa:	f7ff fbff 	bl	8007cfc <RCCEx_PLL2_Config>
 80084fe:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008500:	bb7d      	cbnz	r5, 8008562 <HAL_RCCEx_PeriphCLKConfig+0x64e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008502:	4a36      	ldr	r2, [pc, #216]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008504:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008506:	f023 0307 	bic.w	r3, r3, #7
 800850a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800850e:	430b      	orrs	r3, r1
 8008510:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	f013 0f20 	tst.w	r3, #32
 8008518:	d033      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800851a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800851e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008522:	d04c      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8008524:	d822      	bhi.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x658>
 8008526:	b13b      	cbz	r3, 8008538 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8008528:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800852c:	d11b      	bne.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x652>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800852e:	2100      	movs	r1, #0
 8008530:	1d20      	adds	r0, r4, #4
 8008532:	f7ff fbe3 	bl	8007cfc <RCCEx_PLL2_Config>
 8008536:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008538:	2d00      	cmp	r5, #0
 800853a:	d147      	bne.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800853c:	4a27      	ldr	r2, [pc, #156]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800853e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008540:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8008544:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8008548:	430b      	orrs	r3, r1
 800854a:	6553      	str	r3, [r2, #84]	; 0x54
 800854c:	e019      	b.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x66e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800854e:	2101      	movs	r1, #1
 8008550:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008554:	f7ff fc58 	bl	8007e08 <RCCEx_PLL3_Config>
 8008558:	4605      	mov	r5, r0
      break;
 800855a:	e7d1      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800855c:	2601      	movs	r6, #1
 800855e:	4635      	mov	r5, r6
 8008560:	e7d7      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
 8008562:	462e      	mov	r6, r5
 8008564:	e7d5      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008566:	2601      	movs	r6, #1
 8008568:	4635      	mov	r5, r6
 800856a:	e00a      	b.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800856c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008570:	d0e2      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8008572:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008576:	d0df      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8008578:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800857c:	d0dc      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800857e:	2601      	movs	r6, #1
 8008580:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008588:	d037      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800858a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800858e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008592:	d052      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x726>
 8008594:	d826      	bhi.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8008596:	b13b      	cbz	r3, 80085a8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8008598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800859c:	d118      	bne.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800859e:	2100      	movs	r1, #0
 80085a0:	1d20      	adds	r0, r4, #4
 80085a2:	f7ff fbab 	bl	8007cfc <RCCEx_PLL2_Config>
 80085a6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80085a8:	2d00      	cmp	r5, #0
 80085aa:	d14d      	bne.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80085ac:	4a0b      	ldr	r2, [pc, #44]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80085ae:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80085b0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80085b4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80085b8:	430b      	orrs	r3, r1
 80085ba:	6593      	str	r3, [r2, #88]	; 0x58
 80085bc:	e01d      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x6e6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085be:	2102      	movs	r1, #2
 80085c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80085c4:	f7ff fc20 	bl	8007e08 <RCCEx_PLL3_Config>
 80085c8:	4605      	mov	r5, r0
      break;
 80085ca:	e7b5      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x624>
 80085cc:	462e      	mov	r6, r5
 80085ce:	e7d8      	b.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80085d0:	2601      	movs	r6, #1
 80085d2:	4635      	mov	r5, r6
 80085d4:	e011      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x6e6>
 80085d6:	bf00      	nop
 80085d8:	58024800 	.word	0x58024800
 80085dc:	58024400 	.word	0x58024400
 80085e0:	00ffffcf 	.word	0x00ffffcf
 80085e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085e8:	d0de      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 80085ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80085ee:	d0db      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 80085f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085f4:	d0d8      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 80085f6:	2601      	movs	r6, #1
 80085f8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008600:	d032      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x754>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008602:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8008606:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800860a:	f000 809d 	beq.w	8008748 <HAL_RCCEx_PeriphCLKConfig+0x834>
 800860e:	d820      	bhi.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008610:	b13b      	cbz	r3, 8008622 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8008612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008616:	d119      	bne.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x738>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008618:	2100      	movs	r1, #0
 800861a:	1d20      	adds	r0, r4, #4
 800861c:	f7ff fb6e 	bl	8007cfc <RCCEx_PLL2_Config>
 8008620:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008622:	2d00      	cmp	r5, #0
 8008624:	f040 8097 	bne.w	8008756 <HAL_RCCEx_PeriphCLKConfig+0x842>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008628:	4aa5      	ldr	r2, [pc, #660]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800862a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800862c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008630:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8008634:	430b      	orrs	r3, r1
 8008636:	6593      	str	r3, [r2, #88]	; 0x58
 8008638:	e016      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x754>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800863a:	2102      	movs	r1, #2
 800863c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008640:	f7ff fbe2 	bl	8007e08 <RCCEx_PLL3_Config>
 8008644:	4605      	mov	r5, r0
      break;
 8008646:	e7af      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8008648:	462e      	mov	r6, r5
 800864a:	e7d6      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800864c:	2601      	movs	r6, #1
 800864e:	4635      	mov	r5, r6
 8008650:	e00a      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8008652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008656:	d0e4      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8008658:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800865c:	d0e1      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 800865e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008662:	d0de      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8008664:	2601      	movs	r6, #1
 8008666:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	f013 0f08 	tst.w	r3, #8
 800866e:	d00c      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x776>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008670:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8008674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008678:	d06f      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800867a:	4a91      	ldr	r2, [pc, #580]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800867c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800867e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008682:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8008686:	430b      	orrs	r3, r1
 8008688:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	f013 0f10 	tst.w	r3, #16
 8008690:	d00c      	beq.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x798>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008692:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8008696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800869a:	d067      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x858>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800869c:	4a88      	ldr	r2, [pc, #544]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800869e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80086a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086a4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80086a8:	430b      	orrs	r3, r1
 80086aa:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80086b2:	d00b      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    switch(PeriphClkInit->AdcClockSelection)
 80086b4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80086b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086bc:	d06e      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x888>
 80086be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086c2:	d061      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x874>
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d05a      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x86a>
 80086c8:	2601      	movs	r6, #1
 80086ca:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80086cc:	6823      	ldr	r3, [r4, #0]
 80086ce:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80086d2:	d00c      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x7da>
    switch(PeriphClkInit->UsbClockSelection)
 80086d4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80086d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086dc:	d076      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80086de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086e2:	d069      	beq.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80086e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086e8:	d061      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x89a>
 80086ea:	2601      	movs	r6, #1
 80086ec:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80086f4:	d007      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    switch(PeriphClkInit->SdmmcClockSelection)
 80086f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d070      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 80086fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008700:	d07b      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8008702:	2601      	movs	r6, #1
 8008704:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008706:	6823      	ldr	r3, [r4, #0]
 8008708:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800870c:	d17d      	bne.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008714:	f000 8086 	beq.w	8008824 <HAL_RCCEx_PeriphCLKConfig+0x910>
    switch(PeriphClkInit->RngClockSelection)
 8008718:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800871a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800871e:	f000 80c6 	beq.w	80088ae <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8008722:	d97c      	bls.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8008724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008728:	d003      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800872a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800872e:	f040 80bc 	bne.w	80088aa <HAL_RCCEx_PeriphCLKConfig+0x996>
    if(ret == HAL_OK)
 8008732:	2d00      	cmp	r5, #0
 8008734:	f040 80c1 	bne.w	80088ba <HAL_RCCEx_PeriphCLKConfig+0x9a6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008738:	4a61      	ldr	r2, [pc, #388]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800873a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800873c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008740:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8008742:	430b      	orrs	r3, r1
 8008744:	6553      	str	r3, [r2, #84]	; 0x54
 8008746:	e06d      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x910>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008748:	2102      	movs	r1, #2
 800874a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800874e:	f7ff fb5b 	bl	8007e08 <RCCEx_PLL3_Config>
 8008752:	4605      	mov	r5, r0
      break;
 8008754:	e765      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8008756:	462e      	mov	r6, r5
 8008758:	e786      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x754>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800875a:	2102      	movs	r1, #2
 800875c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008760:	f7ff fb52 	bl	8007e08 <RCCEx_PLL3_Config>
 8008764:	2800      	cmp	r0, #0
 8008766:	d088      	beq.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x766>
          status = HAL_ERROR;
 8008768:	2601      	movs	r6, #1
 800876a:	e786      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x766>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800876c:	2102      	movs	r1, #2
 800876e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008772:	f7ff fb49 	bl	8007e08 <RCCEx_PLL3_Config>
 8008776:	2800      	cmp	r0, #0
 8008778:	d090      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x788>
        status = HAL_ERROR;
 800877a:	2601      	movs	r6, #1
 800877c:	e78e      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x788>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800877e:	2100      	movs	r1, #0
 8008780:	1d20      	adds	r0, r4, #4
 8008782:	f7ff fabb 	bl	8007cfc <RCCEx_PLL2_Config>
 8008786:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8008788:	b97d      	cbnz	r5, 80087aa <HAL_RCCEx_PeriphCLKConfig+0x896>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800878a:	4a4d      	ldr	r2, [pc, #308]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800878c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800878e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008792:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8008796:	430b      	orrs	r3, r1
 8008798:	6593      	str	r3, [r2, #88]	; 0x58
 800879a:	e797      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800879c:	2102      	movs	r1, #2
 800879e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80087a2:	f7ff fb31 	bl	8007e08 <RCCEx_PLL3_Config>
 80087a6:	4605      	mov	r5, r0
      break;
 80087a8:	e7ee      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x874>
 80087aa:	462e      	mov	r6, r5
 80087ac:	e78e      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087ae:	4a44      	ldr	r2, [pc, #272]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80087b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80087b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087b6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80087b8:	b97d      	cbnz	r5, 80087da <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087ba:	4a41      	ldr	r2, [pc, #260]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80087bc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80087be:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80087c2:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80087c6:	430b      	orrs	r3, r1
 80087c8:	6553      	str	r3, [r2, #84]	; 0x54
 80087ca:	e790      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x7da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80087cc:	2101      	movs	r1, #1
 80087ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80087d2:	f7ff fb19 	bl	8007e08 <RCCEx_PLL3_Config>
 80087d6:	4605      	mov	r5, r0
      break;
 80087d8:	e7ee      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80087da:	462e      	mov	r6, r5
 80087dc:	e787      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x7da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087de:	4a38      	ldr	r2, [pc, #224]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80087e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80087e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087e6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80087e8:	b96d      	cbnz	r5, 8008806 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80087ea:	4a35      	ldr	r2, [pc, #212]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80087ec:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80087ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087f2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80087f4:	430b      	orrs	r3, r1
 80087f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087f8:	e785      	b.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80087fa:	2102      	movs	r1, #2
 80087fc:	1d20      	adds	r0, r4, #4
 80087fe:	f7ff fa7d 	bl	8007cfc <RCCEx_PLL2_Config>
 8008802:	4605      	mov	r5, r0
      break;
 8008804:	e7f0      	b.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 8008806:	462e      	mov	r6, r5
 8008808:	e77d      	b.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800880a:	2102      	movs	r1, #2
 800880c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008810:	f7ff fafa 	bl	8007e08 <RCCEx_PLL3_Config>
 8008814:	2800      	cmp	r0, #0
 8008816:	f43f af7a 	beq.w	800870e <HAL_RCCEx_PeriphCLKConfig+0x7fa>
      status=HAL_ERROR;
 800881a:	2601      	movs	r6, #1
 800881c:	e777      	b.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    switch(PeriphClkInit->RngClockSelection)
 800881e:	2b00      	cmp	r3, #0
 8008820:	d087      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8008822:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800882a:	d006      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x926>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800882c:	4a24      	ldr	r2, [pc, #144]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800882e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008830:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008834:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8008836:	430b      	orrs	r3, r1
 8008838:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008840:	d007      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x93e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008842:	4a1f      	ldr	r2, [pc, #124]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008844:	6913      	ldr	r3, [r2, #16]
 8008846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800884a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800884e:	430b      	orrs	r3, r1
 8008850:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008852:	6823      	ldr	r3, [r4, #0]
 8008854:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8008858:	d006      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x954>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800885a:	4a19      	ldr	r2, [pc, #100]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800885c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800885e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008862:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8008864:	430b      	orrs	r3, r1
 8008866:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800886e:	d009      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x970>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008870:	4b13      	ldr	r3, [pc, #76]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008872:	691a      	ldr	r2, [r3, #16]
 8008874:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008878:	611a      	str	r2, [r3, #16]
 800887a:	691a      	ldr	r2, [r3, #16]
 800887c:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8008880:	430a      	orrs	r2, r1
 8008882:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	db1c      	blt.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8008890:	d007      	beq.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x98e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008892:	4a0b      	ldr	r2, [pc, #44]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008894:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008896:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800889a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800889e:	430b      	orrs	r3, r1
 80088a0:	6553      	str	r3, [r2, #84]	; 0x54
  if (status == HAL_OK)
 80088a2:	b106      	cbz	r6, 80088a6 <HAL_RCCEx_PeriphCLKConfig+0x992>
  return HAL_ERROR;
 80088a4:	2601      	movs	r6, #1
}
 80088a6:	4630      	mov	r0, r6
 80088a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 80088aa:	2601      	movs	r6, #1
 80088ac:	e7ba      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088ae:	4a04      	ldr	r2, [pc, #16]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80088b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80088b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088b6:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80088b8:	e73b      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80088ba:	462e      	mov	r6, r5
 80088bc:	e7b2      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80088be:	bf00      	nop
 80088c0:	58024400 	.word	0x58024400
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80088c4:	4a03      	ldr	r2, [pc, #12]	; (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80088c6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80088c8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80088cc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80088ce:	430b      	orrs	r3, r1
 80088d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088d2:	e7da      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x976>
 80088d4:	58024400 	.word	0x58024400

080088d8 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80088d8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80088da:	f7ff f99f 	bl	8007c1c <HAL_RCC_GetHCLKFreq>
 80088de:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80088e6:	4a04      	ldr	r2, [pc, #16]	; (80088f8 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80088e8:	5cd3      	ldrb	r3, [r2, r3]
 80088ea:	f003 031f 	and.w	r3, r3, #31
}
 80088ee:	40d8      	lsrs	r0, r3
 80088f0:	bd08      	pop	{r3, pc}
 80088f2:	bf00      	nop
 80088f4:	58024400 	.word	0x58024400
 80088f8:	0801bf94 	.word	0x0801bf94

080088fc <HAL_RCCEx_GetPLL2ClockFreq>:
{
 80088fc:	b510      	push	{r4, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088fe:	4a77      	ldr	r2, [pc, #476]	; (8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8008900:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008902:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8008904:	f3c4 3e05 	ubfx	lr, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008908:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800890a:	f3c3 1c00 	ubfx	ip, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800890e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8008910:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8008914:	fb0c f303 	mul.w	r3, ip, r3
  if (pll2m != 0U)
 8008918:	f414 3f7c 	tst.w	r4, #258048	; 0x3f000
 800891c:	f000 80d8 	beq.w	8008ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
 8008920:	f001 0103 	and.w	r1, r1, #3
 8008924:	ee07 3a90 	vmov	s15, r3
 8008928:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800892c:	2901      	cmp	r1, #1
 800892e:	d065      	beq.n	80089fc <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8008930:	2902      	cmp	r1, #2
 8008932:	f000 80b0 	beq.w	8008a96 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 8008936:	b1e1      	cbz	r1, 8008972 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008938:	ee07 ea10 	vmov	s14, lr
 800893c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008940:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8008ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8008944:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8008948:	4b64      	ldr	r3, [pc, #400]	; (8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 800894a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008950:	ee07 3a10 	vmov	s14, r3
 8008954:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008958:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8008ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800895c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008964:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008968:	ee77 7a87 	vadd.f32	s15, s15, s14
 800896c:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8008970:	e060      	b.n	8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008972:	6813      	ldr	r3, [r2, #0]
 8008974:	f013 0f20 	tst.w	r3, #32
 8008978:	d023      	beq.n	80089c2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800897a:	4611      	mov	r1, r2
 800897c:	6812      	ldr	r2, [r2, #0]
 800897e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008982:	4b59      	ldr	r3, [pc, #356]	; (8008ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>)
 8008984:	40d3      	lsrs	r3, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008986:	ee07 3a10 	vmov	s14, r3
 800898a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800898e:	ee06 ea90 	vmov	s13, lr
 8008992:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8008996:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800899a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800899c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a0:	ee07 3a10 	vmov	s14, r3
 80089a4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80089a8:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8008ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80089ac:	ee67 7a86 	vmul.f32	s15, s15, s12
 80089b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80089bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80089c0:	e038      	b.n	8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80089c2:	ee07 ea10 	vmov	s14, lr
 80089c6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80089ca:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 80089ce:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80089d2:	4b42      	ldr	r3, [pc, #264]	; (8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 80089d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089da:	ee07 3a10 	vmov	s14, r3
 80089de:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80089e2:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8008ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80089e6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80089ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80089f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80089fa:	e01b      	b.n	8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80089fc:	ee07 ea10 	vmov	s14, lr
 8008a00:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008a04:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8008ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8008a08:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8008a0c:	4b33      	ldr	r3, [pc, #204]	; (8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8008a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a14:	ee07 3a10 	vmov	s14, r3
 8008a18:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008a1c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8008ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8008a20:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a30:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008a34:	4a29      	ldr	r2, [pc, #164]	; (8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8008a36:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008a38:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008a3c:	ee07 3a10 	vmov	s14, r3
 8008a40:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008a44:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008a48:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a54:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008a58:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008a5a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008a5e:	ee07 3a10 	vmov	s14, r3
 8008a62:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008a66:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a72:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008a76:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008a78:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008a7c:	ee07 3a90 	vmov	s15, r3
 8008a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a84:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008a88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a8c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008a90:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8008a94:	bd10      	pop	{r4, pc}
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008a96:	ee07 ea10 	vmov	s14, lr
 8008a9a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008a9e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8008af0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 8008aa2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8008aa6:	4b0d      	ldr	r3, [pc, #52]	; (8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x1e0>)
 8008aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aae:	ee07 3a10 	vmov	s14, r3
 8008ab2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008ab6:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8008ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8008aba:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ac2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ac6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008aca:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8008ace:	e7b1      	b.n	8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008ad4:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ad6:	6083      	str	r3, [r0, #8]
}
 8008ad8:	e7dc      	b.n	8008a94 <HAL_RCCEx_GetPLL2ClockFreq+0x198>
 8008ada:	bf00      	nop
 8008adc:	58024400 	.word	0x58024400
 8008ae0:	4a742400 	.word	0x4a742400
 8008ae4:	39000000 	.word	0x39000000
 8008ae8:	03d09000 	.word	0x03d09000
 8008aec:	4c742400 	.word	0x4c742400
 8008af0:	4bb71b00 	.word	0x4bb71b00

08008af4 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8008af4:	b510      	push	{r4, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008af6:	4a77      	ldr	r2, [pc, #476]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8008af8:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008afa:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8008afc:	f3c4 5e05 	ubfx	lr, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008b00:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008b02:	f3c3 2c00 	ubfx	ip, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008b06:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8008b08:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8008b0c:	fb0c f303 	mul.w	r3, ip, r3
  if (pll3m != 0U)
 8008b10:	f014 7f7c 	tst.w	r4, #66060288	; 0x3f00000
 8008b14:	f000 80d8 	beq.w	8008cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
 8008b18:	f001 0103 	and.w	r1, r1, #3
 8008b1c:	ee07 3a90 	vmov	s15, r3
 8008b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8008b24:	2901      	cmp	r1, #1
 8008b26:	d065      	beq.n	8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8008b28:	2902      	cmp	r1, #2
 8008b2a:	f000 80b0 	beq.w	8008c8e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 8008b2e:	b1e1      	cbz	r1, 8008b6a <HAL_RCCEx_GetPLL3ClockFreq+0x76>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b30:	ee07 ea10 	vmov	s14, lr
 8008b34:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008b38:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8008cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8008b3c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8008b40:	4b64      	ldr	r3, [pc, #400]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8008b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b48:	ee07 3a10 	vmov	s14, r3
 8008b4c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008b50:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8008b54:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b64:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8008b68:	e060      	b.n	8008c2c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b6a:	6813      	ldr	r3, [r2, #0]
 8008b6c:	f013 0f20 	tst.w	r3, #32
 8008b70:	d023      	beq.n	8008bba <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b72:	4611      	mov	r1, r2
 8008b74:	6812      	ldr	r2, [r2, #0]
 8008b76:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008b7a:	4b59      	ldr	r3, [pc, #356]	; (8008ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>)
 8008b7c:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b7e:	ee07 3a10 	vmov	s14, r3
 8008b82:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008b86:	ee06 ea90 	vmov	s13, lr
 8008b8a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8008b8e:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8008b92:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b98:	ee07 3a10 	vmov	s14, r3
 8008b9c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008ba0:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8008ba4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008bb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008bb8:	e038      	b.n	8008c2c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008bba:	ee07 ea10 	vmov	s14, lr
 8008bbe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008bc2:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8008ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 8008bc6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8008bca:	4b42      	ldr	r3, [pc, #264]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8008bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bd2:	ee07 3a10 	vmov	s14, r3
 8008bd6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008bda:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8008bde:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008be6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008bee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008bf2:	e01b      	b.n	8008c2c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008bf4:	ee07 ea10 	vmov	s14, lr
 8008bf8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008bfc:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8008cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8008c00:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8008c04:	4b33      	ldr	r3, [pc, #204]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8008c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c0c:	ee07 3a10 	vmov	s14, r3
 8008c10:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008c14:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8008c18:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c28:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008c2c:	4a29      	ldr	r2, [pc, #164]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8008c2e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008c30:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008c34:	ee07 3a10 	vmov	s14, r3
 8008c38:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008c3c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008c40:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c4c:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008c50:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008c52:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008c56:	ee07 3a10 	vmov	s14, r3
 8008c5a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008c5e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c6a:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008c6e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008c70:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008c74:	ee07 3a90 	vmov	s15, r3
 8008c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c7c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008c80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c84:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008c88:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8008c8c:	bd10      	pop	{r4, pc}
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008c8e:	ee07 ea10 	vmov	s14, lr
 8008c92:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008c96:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8008c9a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8008c9e:	4b0d      	ldr	r3, [pc, #52]	; (8008cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e0>)
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca6:	ee07 3a10 	vmov	s14, r3
 8008caa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008cae:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8008cdc <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8008cb2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008cc2:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8008cc6:	e7b1      	b.n	8008c2c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008ccc:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008cce:	6083      	str	r3, [r0, #8]
}
 8008cd0:	e7dc      	b.n	8008c8c <HAL_RCCEx_GetPLL3ClockFreq+0x198>
 8008cd2:	bf00      	nop
 8008cd4:	58024400 	.word	0x58024400
 8008cd8:	4a742400 	.word	0x4a742400
 8008cdc:	39000000 	.word	0x39000000
 8008ce0:	03d09000 	.word	0x03d09000
 8008ce4:	4c742400 	.word	0x4c742400
 8008ce8:	4bb71b00 	.word	0x4bb71b00

08008cec <HAL_RCCEx_GetPLL1ClockFreq>:
{
 8008cec:	b510      	push	{r4, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cee:	4a77      	ldr	r2, [pc, #476]	; (8008ecc <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8008cf0:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008cf2:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8008cf4:	f3c4 1e05 	ubfx	lr, r4, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008cf8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008cfa:	f003 0c01 	and.w	ip, r3, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008cfe:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008d00:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8008d04:	fb0c f303 	mul.w	r3, ip, r3
  if (pll1m != 0U)
 8008d08:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8008d0c:	f000 80d8 	beq.w	8008ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
 8008d10:	f001 0103 	and.w	r1, r1, #3
 8008d14:	ee07 3a90 	vmov	s15, r3
 8008d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8008d1c:	2901      	cmp	r1, #1
 8008d1e:	d065      	beq.n	8008dec <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 8008d20:	2902      	cmp	r1, #2
 8008d22:	f000 80b0 	beq.w	8008e86 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 8008d26:	b1e1      	cbz	r1, 8008d62 <HAL_RCCEx_GetPLL1ClockFreq+0x76>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d28:	ee07 ea10 	vmov	s14, lr
 8008d2c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008d30:	ed9f 6a67 	vldr	s12, [pc, #412]	; 8008ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8008d34:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8008d38:	4b64      	ldr	r3, [pc, #400]	; (8008ecc <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8008d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d40:	ee07 3a10 	vmov	s14, r3
 8008d44:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008d48:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8008ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8008d4c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8008d60:	e060      	b.n	8008e24 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d62:	6813      	ldr	r3, [r2, #0]
 8008d64:	f013 0f20 	tst.w	r3, #32
 8008d68:	d023      	beq.n	8008db2 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	6812      	ldr	r2, [r2, #0]
 8008d6e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008d72:	4b59      	ldr	r3, [pc, #356]	; (8008ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>)
 8008d74:	40d3      	lsrs	r3, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d76:	ee07 3a10 	vmov	s14, r3
 8008d7a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008d7e:	ee06 ea90 	vmov	s13, lr
 8008d82:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8008d86:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8008d8a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d90:	ee07 3a10 	vmov	s14, r3
 8008d94:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008d98:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8008ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8008d9c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008da4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008da8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008dac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008db0:	e038      	b.n	8008e24 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008db2:	ee07 ea10 	vmov	s14, lr
 8008db6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008dba:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8008ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
 8008dbe:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8008dc2:	4b42      	ldr	r3, [pc, #264]	; (8008ecc <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8008dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dca:	ee07 3a10 	vmov	s14, r3
 8008dce:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008dd2:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8008ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8008dd6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008de2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008de6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008dea:	e01b      	b.n	8008e24 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008dec:	ee07 ea10 	vmov	s14, lr
 8008df0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008df4:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8008edc <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
 8008df8:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8008dfc:	4b33      	ldr	r3, [pc, #204]	; (8008ecc <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8008dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e04:	ee07 3a10 	vmov	s14, r3
 8008e08:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008e0c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8008ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8008e10:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e20:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008e24:	4a29      	ldr	r2, [pc, #164]	; (8008ecc <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8008e26:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008e28:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008e2c:	ee07 3a10 	vmov	s14, r3
 8008e30:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008e34:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008e38:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e44:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008e48:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008e4a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008e4e:	ee07 3a10 	vmov	s14, r3
 8008e52:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008e56:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e62:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008e66:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008e68:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008e6c:	ee07 3a90 	vmov	s15, r3
 8008e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e74:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008e78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e7c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008e80:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8008e84:	bd10      	pop	{r4, pc}
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e86:	ee07 ea10 	vmov	s14, lr
 8008e8a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008e8e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8008ee0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 8008e92:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8008e96:	4b0d      	ldr	r3, [pc, #52]	; (8008ecc <HAL_RCCEx_GetPLL1ClockFreq+0x1e0>)
 8008e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e9e:	ee07 3a10 	vmov	s14, r3
 8008ea2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008ea6:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8008ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8008eaa:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008eb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008eb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008eba:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8008ebe:	e7b1      	b.n	8008e24 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008ec4:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008ec6:	6083      	str	r3, [r0, #8]
}
 8008ec8:	e7dc      	b.n	8008e84 <HAL_RCCEx_GetPLL1ClockFreq+0x198>
 8008eca:	bf00      	nop
 8008ecc:	58024400 	.word	0x58024400
 8008ed0:	4c742400 	.word	0x4c742400
 8008ed4:	39000000 	.word	0x39000000
 8008ed8:	03d09000 	.word	0x03d09000
 8008edc:	4a742400 	.word	0x4a742400
 8008ee0:	4bb71b00 	.word	0x4bb71b00

08008ee4 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8008ee4:	b500      	push	{lr}
 8008ee6:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008ee8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8008eec:	d020      	beq.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008eee:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008ef2:	d071      	beq.n	8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008ef4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8008ef8:	f000 80c8 	beq.w	800908c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008efc:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8008f00:	f000 8121 	beq.w	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008f04:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8008f08:	f000 8182 	beq.w	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008f0c:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8008f10:	f000 81db 	beq.w	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008f14:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8008f18:	f000 821f 	beq.w	800935a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008f1c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8008f20:	f000 8239 	beq.w	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008f24:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008f28:	f000 8284 	beq.w	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
      frequency = 0;
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	e2b2      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008f30:	4b95      	ldr	r3, [pc, #596]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f34:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8008f38:	2b04      	cmp	r3, #4
 8008f3a:	f200 82a3 	bhi.w	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008f3e:	e8df f003 	tbb	[pc, r3]
 8008f42:	1005      	.short	0x1005
 8008f44:	031b      	.short	0x031b
 8008f46:	26          	.byte	0x26
 8008f47:	00          	.byte	0x00
 8008f48:	4890      	ldr	r0, [pc, #576]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008f4a:	e2a4      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f4c:	4b8e      	ldr	r3, [pc, #568]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f4e:	6818      	ldr	r0, [r3, #0]
 8008f50:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008f54:	f000 829f 	beq.w	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f58:	a807      	add	r0, sp, #28
 8008f5a:	f7ff fec7 	bl	8008cec <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f5e:	9808      	ldr	r0, [sp, #32]
 8008f60:	e299      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f62:	4b89      	ldr	r3, [pc, #548]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f64:	6818      	ldr	r0, [r3, #0]
 8008f66:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008f6a:	f000 8294 	beq.w	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f6e:	a804      	add	r0, sp, #16
 8008f70:	f7ff fcc4 	bl	80088fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f74:	9804      	ldr	r0, [sp, #16]
 8008f76:	e28e      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f78:	4b83      	ldr	r3, [pc, #524]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f7a:	6818      	ldr	r0, [r3, #0]
 8008f7c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008f80:	f000 8289 	beq.w	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f84:	a801      	add	r0, sp, #4
 8008f86:	f7ff fdb5 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f8a:	9801      	ldr	r0, [sp, #4]
 8008f8c:	e283      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f8e:	4a7e      	ldr	r2, [pc, #504]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f90:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008f92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f96:	6812      	ldr	r2, [r2, #0]
 8008f98:	f012 0f04 	tst.w	r2, #4
 8008f9c:	d007      	beq.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8008f9e:	b933      	cbnz	r3, 8008fae <HAL_RCCEx_GetPeriphCLKFreq+0xca>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008fa0:	4b79      	ldr	r3, [pc, #484]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008fa8:	4879      	ldr	r0, [pc, #484]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8008faa:	40d8      	lsrs	r0, r3
 8008fac:	e273      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fae:	4a76      	ldr	r2, [pc, #472]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008fb0:	6812      	ldr	r2, [r2, #0]
 8008fb2:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008fb6:	d003      	beq.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008fb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fbc:	f000 8264 	beq.w	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fc0:	4a71      	ldr	r2, [pc, #452]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008fc2:	6812      	ldr	r2, [r2, #0]
 8008fc4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8008fc8:	f000 8260 	beq.w	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fd0:	f000 825e 	beq.w	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
            frequency = 0;
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	e25e      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008fd8:	4b6b      	ldr	r3, [pc, #428]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fdc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8008fe0:	2b80      	cmp	r3, #128	; 0x80
 8008fe2:	d033      	beq.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8008fe4:	d915      	bls.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8008fe6:	2bc0      	cmp	r3, #192	; 0xc0
 8008fe8:	f000 8254 	beq.w	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8008fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ff0:	d11f      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ff2:	4a65      	ldr	r2, [pc, #404]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008ff4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008ff6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ffa:	6812      	ldr	r2, [r2, #0]
 8008ffc:	f012 0f04 	tst.w	r2, #4
 8009000:	d02f      	beq.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8009002:	bb73      	cbnz	r3, 8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009004:	4b60      	ldr	r3, [pc, #384]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800900c:	4860      	ldr	r0, [pc, #384]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800900e:	40d8      	lsrs	r0, r3
 8009010:	e241      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8009012:	b183      	cbz	r3, 8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8009014:	2b40      	cmp	r3, #64	; 0x40
 8009016:	d10a      	bne.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009018:	4b5b      	ldr	r3, [pc, #364]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800901a:	6818      	ldr	r0, [r3, #0]
 800901c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009020:	f000 8239 	beq.w	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009024:	a804      	add	r0, sp, #16
 8009026:	f7ff fc69 	bl	80088fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800902a:	9804      	ldr	r0, [sp, #16]
 800902c:	e233      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 800902e:	2000      	movs	r0, #0
 8009030:	e231      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8009032:	2000      	movs	r0, #0
 8009034:	e22f      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009036:	4b54      	ldr	r3, [pc, #336]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009038:	6818      	ldr	r0, [r3, #0]
 800903a:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800903e:	f000 822a 	beq.w	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009042:	a807      	add	r0, sp, #28
 8009044:	f7ff fe52 	bl	8008cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009048:	9808      	ldr	r0, [sp, #32]
 800904a:	e224      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800904c:	4b4e      	ldr	r3, [pc, #312]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800904e:	6818      	ldr	r0, [r3, #0]
 8009050:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009054:	f000 821f 	beq.w	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009058:	a801      	add	r0, sp, #4
 800905a:	f7ff fd4b 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800905e:	9801      	ldr	r0, [sp, #4]
 8009060:	e219      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009062:	4a49      	ldr	r2, [pc, #292]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009064:	6812      	ldr	r2, [r2, #0]
 8009066:	f412 7f80 	tst.w	r2, #256	; 0x100
 800906a:	d003      	beq.n	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800906c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009070:	f000 8214 	beq.w	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009074:	4a44      	ldr	r2, [pc, #272]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009076:	6812      	ldr	r2, [r2, #0]
 8009078:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800907c:	f000 8210 	beq.w	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 8009080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009084:	f000 820e 	beq.w	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
            frequency = 0;
 8009088:	2000      	movs	r0, #0
 800908a:	e204      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800908c:	4b3e      	ldr	r3, [pc, #248]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800908e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009090:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8009094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009098:	d035      	beq.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 800909a:	d916      	bls.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800909c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80090a0:	f000 8202 	beq.w	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80090a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090a8:	d120      	bne.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x208>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80090aa:	4a37      	ldr	r2, [pc, #220]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80090ac:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80090ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090b2:	6812      	ldr	r2, [r2, #0]
 80090b4:	f012 0f04 	tst.w	r2, #4
 80090b8:	d030      	beq.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 80090ba:	bb7b      	cbnz	r3, 800911c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090bc:	4b32      	ldr	r3, [pc, #200]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80090c4:	4832      	ldr	r0, [pc, #200]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 80090c6:	40d8      	lsrs	r0, r3
 80090c8:	e1e5      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 80090ca:	b18b      	cbz	r3, 80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 80090cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090d0:	d10a      	bne.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090d2:	4b2d      	ldr	r3, [pc, #180]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80090d4:	6818      	ldr	r0, [r3, #0]
 80090d6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80090da:	f000 81dc 	beq.w	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090de:	a804      	add	r0, sp, #16
 80090e0:	f7ff fc0c 	bl	80088fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090e4:	9804      	ldr	r0, [sp, #16]
 80090e6:	e1d6      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 80090e8:	2000      	movs	r0, #0
 80090ea:	e1d4      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 80090ec:	2000      	movs	r0, #0
 80090ee:	e1d2      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090f0:	4b25      	ldr	r3, [pc, #148]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80090f2:	6818      	ldr	r0, [r3, #0]
 80090f4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80090f8:	f000 81cd 	beq.w	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090fc:	a807      	add	r0, sp, #28
 80090fe:	f7ff fdf5 	bl	8008cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009102:	9808      	ldr	r0, [sp, #32]
 8009104:	e1c7      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009106:	4b20      	ldr	r3, [pc, #128]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009108:	6818      	ldr	r0, [r3, #0]
 800910a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800910e:	f000 81c2 	beq.w	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009112:	a801      	add	r0, sp, #4
 8009114:	f7ff fcee 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009118:	9801      	ldr	r0, [sp, #4]
 800911a:	e1bc      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800911c:	4a1a      	ldr	r2, [pc, #104]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800911e:	6812      	ldr	r2, [r2, #0]
 8009120:	f412 7f80 	tst.w	r2, #256	; 0x100
 8009124:	d003      	beq.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 8009126:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800912a:	f000 81bf 	beq.w	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800912e:	4a16      	ldr	r2, [pc, #88]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009130:	6812      	ldr	r2, [r2, #0]
 8009132:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8009136:	f000 81bb 	beq.w	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800913a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800913e:	f000 81b9 	beq.w	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
            frequency = 0;
 8009142:	2000      	movs	r0, #0
 8009144:	e1a7      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009146:	4b10      	ldr	r3, [pc, #64]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800914a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 800914e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009152:	d03d      	beq.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8009154:	d91e      	bls.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8009156:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800915a:	f000 81ad 	beq.w	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800915e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009162:	d128      	bne.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009164:	4a08      	ldr	r2, [pc, #32]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009166:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009168:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800916c:	6812      	ldr	r2, [r2, #0]
 800916e:	f012 0f04 	tst.w	r2, #4
 8009172:	d038      	beq.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8009174:	2b00      	cmp	r3, #0
 8009176:	d136      	bne.n	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009178:	4b03      	ldr	r3, [pc, #12]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009180:	4803      	ldr	r0, [pc, #12]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8009182:	40d8      	lsrs	r0, r3
 8009184:	e187      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8009186:	bf00      	nop
 8009188:	58024400 	.word	0x58024400
 800918c:	00bb8000 	.word	0x00bb8000
 8009190:	03d09000 	.word	0x03d09000
      switch (saiclocksource)
 8009194:	b18b      	cbz	r3, 80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8009196:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800919a:	d10a      	bne.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800919c:	4b99      	ldr	r3, [pc, #612]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800919e:	6818      	ldr	r0, [r3, #0]
 80091a0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80091a4:	f000 8177 	beq.w	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091a8:	a804      	add	r0, sp, #16
 80091aa:	f7ff fba7 	bl	80088fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091ae:	9804      	ldr	r0, [sp, #16]
 80091b0:	e171      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 80091b2:	2000      	movs	r0, #0
 80091b4:	e16f      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 80091b6:	2000      	movs	r0, #0
 80091b8:	e16d      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091ba:	4b92      	ldr	r3, [pc, #584]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80091bc:	6818      	ldr	r0, [r3, #0]
 80091be:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80091c2:	f000 8168 	beq.w	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091c6:	a807      	add	r0, sp, #28
 80091c8:	f7ff fd90 	bl	8008cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091cc:	9808      	ldr	r0, [sp, #32]
 80091ce:	e162      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091d0:	4b8c      	ldr	r3, [pc, #560]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80091d2:	6818      	ldr	r0, [r3, #0]
 80091d4:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80091d8:	f000 815d 	beq.w	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091dc:	a801      	add	r0, sp, #4
 80091de:	f7ff fc89 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091e2:	9801      	ldr	r0, [sp, #4]
 80091e4:	e157      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091e6:	4a87      	ldr	r2, [pc, #540]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80091e8:	6812      	ldr	r2, [r2, #0]
 80091ea:	f412 7f80 	tst.w	r2, #256	; 0x100
 80091ee:	d003      	beq.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 80091f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091f4:	f000 8162 	beq.w	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091f8:	4a82      	ldr	r2, [pc, #520]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80091fa:	6812      	ldr	r2, [r2, #0]
 80091fc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8009200:	f000 815e 	beq.w	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8009204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009208:	f000 815c 	beq.w	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
            frequency = 0;
 800920c:	2000      	movs	r0, #0
 800920e:	e142      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009210:	4b7c      	ldr	r3, [pc, #496]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009214:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8009218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800921c:	d035      	beq.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 800921e:	d916      	bls.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8009220:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009224:	f000 8150 	beq.w	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8009228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800922c:	d120      	bne.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800922e:	4a75      	ldr	r2, [pc, #468]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009230:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009232:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009236:	6812      	ldr	r2, [r2, #0]
 8009238:	f012 0f04 	tst.w	r2, #4
 800923c:	d030      	beq.n	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800923e:	bb7b      	cbnz	r3, 80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009240:	4b70      	ldr	r3, [pc, #448]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009248:	486f      	ldr	r0, [pc, #444]	; (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800924a:	40d8      	lsrs	r0, r3
 800924c:	e123      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 800924e:	b18b      	cbz	r3, 8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8009250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009254:	d10a      	bne.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009256:	4b6b      	ldr	r3, [pc, #428]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009258:	6818      	ldr	r0, [r3, #0]
 800925a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800925e:	f000 811a 	beq.w	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009262:	a804      	add	r0, sp, #16
 8009264:	f7ff fb4a 	bl	80088fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009268:	9804      	ldr	r0, [sp, #16]
 800926a:	e114      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 800926c:	2000      	movs	r0, #0
 800926e:	e112      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8009270:	2000      	movs	r0, #0
 8009272:	e110      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009274:	4b63      	ldr	r3, [pc, #396]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009276:	6818      	ldr	r0, [r3, #0]
 8009278:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800927c:	f000 810b 	beq.w	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009280:	a807      	add	r0, sp, #28
 8009282:	f7ff fd33 	bl	8008cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009286:	9808      	ldr	r0, [sp, #32]
 8009288:	e105      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800928a:	4b5e      	ldr	r3, [pc, #376]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800928c:	6818      	ldr	r0, [r3, #0]
 800928e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009292:	f000 8100 	beq.w	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009296:	a801      	add	r0, sp, #4
 8009298:	f7ff fc2c 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800929c:	9801      	ldr	r0, [sp, #4]
 800929e:	e0fa      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092a0:	4a58      	ldr	r2, [pc, #352]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80092a2:	6812      	ldr	r2, [r2, #0]
 80092a4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80092a8:	d003      	beq.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80092aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092ae:	f000 810d 	beq.w	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092b2:	4a54      	ldr	r2, [pc, #336]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80092b4:	6812      	ldr	r2, [r2, #0]
 80092b6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80092ba:	f000 8109 	beq.w	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 80092be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092c2:	f000 8107 	beq.w	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            frequency = 0;
 80092c6:	2000      	movs	r0, #0
 80092c8:	e0e5      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80092ca:	4b4e      	ldr	r3, [pc, #312]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80092cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 80092d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092d6:	d010      	beq.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 80092d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092dc:	d018      	beq.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 80092de:	b10b      	cbz	r3, 80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
 80092e0:	2000      	movs	r0, #0
 80092e2:	e0d8      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092e4:	4b47      	ldr	r3, [pc, #284]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80092e6:	6818      	ldr	r0, [r3, #0]
 80092e8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80092ec:	f000 80d3 	beq.w	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092f0:	a804      	add	r0, sp, #16
 80092f2:	f7ff fb03 	bl	80088fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092f6:	9804      	ldr	r0, [sp, #16]
 80092f8:	e0cd      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092fa:	4b42      	ldr	r3, [pc, #264]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80092fc:	6818      	ldr	r0, [r3, #0]
 80092fe:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009302:	f000 80c8 	beq.w	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009306:	a801      	add	r0, sp, #4
 8009308:	f7ff fbf4 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800930c:	9803      	ldr	r0, [sp, #12]
 800930e:	e0c2      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009310:	4a3c      	ldr	r2, [pc, #240]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009312:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009314:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009318:	6812      	ldr	r2, [r2, #0]
 800931a:	f012 0f04 	tst.w	r2, #4
 800931e:	d007      	beq.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
 8009320:	b933      	cbnz	r3, 8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009322:	4b38      	ldr	r3, [pc, #224]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800932a:	4837      	ldr	r0, [pc, #220]	; (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800932c:	40d8      	lsrs	r0, r3
 800932e:	e0b2      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009330:	4a34      	ldr	r2, [pc, #208]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009332:	6812      	ldr	r2, [r2, #0]
 8009334:	f412 7f80 	tst.w	r2, #256	; 0x100
 8009338:	d003      	beq.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 800933a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800933e:	f000 80cb 	beq.w	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009342:	4a30      	ldr	r2, [pc, #192]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009344:	6812      	ldr	r2, [r2, #0]
 8009346:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800934a:	f000 80c7 	beq.w	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800934e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009352:	f000 80c5 	beq.w	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
            frequency = 0;
 8009356:	2000      	movs	r0, #0
 8009358:	e09d      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800935a:	4b2a      	ldr	r3, [pc, #168]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800935c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 800935e:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8009362:	d002      	beq.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8009364:	b963      	cbnz	r3, 8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
 8009366:	2000      	movs	r0, #0
 8009368:	e095      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800936a:	4b26      	ldr	r3, [pc, #152]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800936c:	6818      	ldr	r0, [r3, #0]
 800936e:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009372:	f000 8090 	beq.w	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009376:	a807      	add	r0, sp, #28
 8009378:	f7ff fcb8 	bl	8008cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800937c:	9808      	ldr	r0, [sp, #32]
 800937e:	e08a      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009380:	4b20      	ldr	r3, [pc, #128]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009382:	6818      	ldr	r0, [r3, #0]
 8009384:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009388:	f000 8085 	beq.w	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800938c:	a804      	add	r0, sp, #16
 800938e:	f7ff fab5 	bl	80088fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009392:	9806      	ldr	r0, [sp, #24]
 8009394:	e07f      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009396:	4b1b      	ldr	r3, [pc, #108]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800939a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 800939e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093a2:	d035      	beq.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 80093a4:	d815      	bhi.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 80093a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093aa:	d021      	beq.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 80093ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093b0:	d109      	bne.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093b2:	4b14      	ldr	r3, [pc, #80]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80093b4:	6818      	ldr	r0, [r3, #0]
 80093b6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80093ba:	d06c      	beq.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093bc:	a801      	add	r0, sp, #4
 80093be:	f7ff fb99 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80093c2:	9802      	ldr	r0, [sp, #8]
 80093c4:	e067      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 80093c6:	b913      	cbnz	r3, 80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80093c8:	f7ff fa86 	bl	80088d8 <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 80093cc:	e063      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 80093ce:	2000      	movs	r0, #0
 80093d0:	e061      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 80093d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093d6:	d026      	beq.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
 80093d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093dc:	d106      	bne.n	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x508>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80093de:	4b09      	ldr	r3, [pc, #36]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80093e0:	6818      	ldr	r0, [r3, #0]
 80093e2:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80093e6:	d056      	beq.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 80093e8:	4808      	ldr	r0, [pc, #32]	; (800940c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80093ea:	e054      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 80093ec:	2000      	movs	r0, #0
 80093ee:	e052      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093f0:	4b04      	ldr	r3, [pc, #16]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80093f2:	6818      	ldr	r0, [r3, #0]
 80093f4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80093f8:	d04d      	beq.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093fa:	a804      	add	r0, sp, #16
 80093fc:	f7ff fa7e 	bl	80088fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009400:	9805      	ldr	r0, [sp, #20]
 8009402:	e048      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8009404:	58024400 	.word	0x58024400
 8009408:	03d09000 	.word	0x03d09000
 800940c:	016e3600 	.word	0x016e3600
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009410:	4b34      	ldr	r3, [pc, #208]	; (80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8009412:	6818      	ldr	r0, [r3, #0]
 8009414:	f010 0004 	ands.w	r0, r0, #4
 8009418:	d03d      	beq.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009420:	4831      	ldr	r0, [pc, #196]	; (80094e8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8009422:	40d8      	lsrs	r0, r3
 8009424:	e037      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009426:	4b2f      	ldr	r3, [pc, #188]	; (80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8009428:	6818      	ldr	r0, [r3, #0]
 800942a:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800942e:	d032      	beq.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = CSI_VALUE;
 8009430:	482e      	ldr	r0, [pc, #184]	; (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8009432:	e030      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009434:	4b2b      	ldr	r3, [pc, #172]	; (80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8009436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009438:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 800943c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009440:	d00c      	beq.n	800945c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8009442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009446:	d013      	beq.n	8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 8009448:	b10b      	cbz	r3, 800944e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800944a:	2000      	movs	r0, #0
  return frequency;
 800944c:	e023      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800944e:	4b25      	ldr	r3, [pc, #148]	; (80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8009450:	6818      	ldr	r0, [r3, #0]
 8009452:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009456:	d01e      	beq.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 8009458:	4825      	ldr	r0, [pc, #148]	; (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800945a:	e01c      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800945c:	4b21      	ldr	r3, [pc, #132]	; (80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800945e:	6818      	ldr	r0, [r3, #0]
 8009460:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8009464:	d017      	beq.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009466:	a807      	add	r0, sp, #28
 8009468:	f7ff fc40 	bl	8008cec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800946c:	9808      	ldr	r0, [sp, #32]
 800946e:	e012      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009470:	4b1c      	ldr	r3, [pc, #112]	; (80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 8009472:	6818      	ldr	r0, [r3, #0]
 8009474:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009478:	d00d      	beq.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800947a:	a804      	add	r0, sp, #16
 800947c:	f7ff fa3e 	bl	80088fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009480:	9805      	ldr	r0, [sp, #20]
 8009482:	e008      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 8009484:	2000      	movs	r0, #0
 8009486:	e006      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 8009488:	4818      	ldr	r0, [pc, #96]	; (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800948a:	e004      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 800948c:	2000      	movs	r0, #0
 800948e:	e002      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 8009490:	4817      	ldr	r0, [pc, #92]	; (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8009492:	e000      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 8009494:	4817      	ldr	r0, [pc, #92]	; (80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
}
 8009496:	b00b      	add	sp, #44	; 0x2c
 8009498:	f85d fb04 	ldr.w	pc, [sp], #4
            frequency = CSI_VALUE;
 800949c:	4813      	ldr	r0, [pc, #76]	; (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800949e:	e7fa      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 80094a0:	2000      	movs	r0, #0
 80094a2:	e7f8      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 80094a4:	4812      	ldr	r0, [pc, #72]	; (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 80094a6:	e7f6      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 80094a8:	4812      	ldr	r0, [pc, #72]	; (80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 80094aa:	e7f4      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 80094ac:	480f      	ldr	r0, [pc, #60]	; (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 80094ae:	e7f2      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 80094b0:	2000      	movs	r0, #0
 80094b2:	e7f0      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 80094b4:	480e      	ldr	r0, [pc, #56]	; (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 80094b6:	e7ee      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 80094b8:	480e      	ldr	r0, [pc, #56]	; (80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 80094ba:	e7ec      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 80094bc:	480b      	ldr	r0, [pc, #44]	; (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 80094be:	e7ea      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 80094c0:	2000      	movs	r0, #0
 80094c2:	e7e8      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 80094c4:	480a      	ldr	r0, [pc, #40]	; (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 80094c6:	e7e6      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 80094c8:	480a      	ldr	r0, [pc, #40]	; (80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 80094ca:	e7e4      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 80094cc:	4807      	ldr	r0, [pc, #28]	; (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 80094ce:	e7e2      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 80094d0:	2000      	movs	r0, #0
 80094d2:	e7e0      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 80094d4:	4806      	ldr	r0, [pc, #24]	; (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 80094d6:	e7de      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 80094d8:	4804      	ldr	r0, [pc, #16]	; (80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 80094da:	e7dc      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 80094dc:	2000      	movs	r0, #0
 80094de:	e7da      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 80094e0:	4803      	ldr	r0, [pc, #12]	; (80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 80094e2:	e7d8      	b.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 80094e4:	58024400 	.word	0x58024400
 80094e8:	03d09000 	.word	0x03d09000
 80094ec:	003d0900 	.word	0x003d0900
 80094f0:	016e3600 	.word	0x016e3600
 80094f4:	00bb8000 	.word	0x00bb8000

080094f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80094f8:	b570      	push	{r4, r5, r6, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80094fe:	2300      	movs	r3, #0
 8009500:	9301      	str	r3, [sp, #4]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009502:	6800      	ldr	r0, [r0, #0]
 8009504:	f002 fde6 	bl	800c0d4 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009508:	4605      	mov	r5, r0
 800950a:	b110      	cbz	r0, 8009512 <SD_PowerON+0x1a>
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
}
 800950c:	4628      	mov	r0, r5
 800950e:	b002      	add	sp, #8
 8009510:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009512:	6820      	ldr	r0, [r4, #0]
 8009514:	f003 f8b6 	bl	800c684 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009518:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800951c:	d007      	beq.n	800952e <SD_PowerON+0x36>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800951e:	2301      	movs	r3, #1
 8009520:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009522:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009524:	2b01      	cmp	r3, #1
 8009526:	d00b      	beq.n	8009540 <SD_PowerON+0x48>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009528:	462e      	mov	r6, r5
 800952a:	4628      	mov	r0, r5
 800952c:	e014      	b.n	8009558 <SD_PowerON+0x60>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800952e:	2300      	movs	r3, #0
 8009530:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009532:	6820      	ldr	r0, [r4, #0]
 8009534:	f002 fdce 	bl	800c0d4 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009538:	2800      	cmp	r0, #0
 800953a:	d0f2      	beq.n	8009522 <SD_PowerON+0x2a>
      return errorstate;
 800953c:	4605      	mov	r5, r0
 800953e:	e7e5      	b.n	800950c <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009540:	2100      	movs	r1, #0
 8009542:	6820      	ldr	r0, [r4, #0]
 8009544:	f002 fee9 	bl	800c31a <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009548:	2800      	cmp	r0, #0
 800954a:	d0ed      	beq.n	8009528 <SD_PowerON+0x30>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800954c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8009550:	e7dc      	b.n	800950c <SD_PowerON+0x14>
    count++;
 8009552:	9b01      	ldr	r3, [sp, #4]
 8009554:	3301      	adds	r3, #1
 8009556:	9301      	str	r3, [sp, #4]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009558:	9a01      	ldr	r2, [sp, #4]
 800955a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800955e:	429a      	cmp	r2, r3
 8009560:	d813      	bhi.n	800958a <SD_PowerON+0x92>
 8009562:	b996      	cbnz	r6, 800958a <SD_PowerON+0x92>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009564:	2100      	movs	r1, #0
 8009566:	6820      	ldr	r0, [r4, #0]
 8009568:	f002 fed7 	bl	800c31a <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800956c:	b9d0      	cbnz	r0, 80095a4 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800956e:	4912      	ldr	r1, [pc, #72]	; (80095b8 <SD_PowerON+0xc0>)
 8009570:	6820      	ldr	r0, [r4, #0]
 8009572:	f002 ffd3 	bl	800c51c <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009576:	4606      	mov	r6, r0
 8009578:	b9b0      	cbnz	r0, 80095a8 <SD_PowerON+0xb0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800957a:	2100      	movs	r1, #0
 800957c:	6820      	ldr	r0, [r4, #0]
 800957e:	f002 fd94 	bl	800c0aa <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009582:	0fc3      	lsrs	r3, r0, #31
 8009584:	d0e5      	beq.n	8009552 <SD_PowerON+0x5a>
 8009586:	461e      	mov	r6, r3
 8009588:	e7e3      	b.n	8009552 <SD_PowerON+0x5a>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800958a:	9a01      	ldr	r2, [sp, #4]
 800958c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009590:	429a      	cmp	r2, r3
 8009592:	d80c      	bhi.n	80095ae <SD_PowerON+0xb6>
  hsd->SdCard.CardType = CARD_SDSC;
 8009594:	2300      	movs	r3, #0
 8009596:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009598:	f010 4380 	ands.w	r3, r0, #1073741824	; 0x40000000
 800959c:	d00a      	beq.n	80095b4 <SD_PowerON+0xbc>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800959e:	2301      	movs	r3, #1
 80095a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80095a2:	e7b3      	b.n	800950c <SD_PowerON+0x14>
      return errorstate;
 80095a4:	4605      	mov	r5, r0
 80095a6:	e7b1      	b.n	800950c <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80095ac:	e7ae      	b.n	800950c <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80095ae:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 80095b2:	e7ab      	b.n	800950c <SD_PowerON+0x14>
  return HAL_SD_ERROR_NONE;
 80095b4:	461d      	mov	r5, r3
 80095b6:	e7a9      	b.n	800950c <SD_PowerON+0x14>
 80095b8:	c1100000 	.word	0xc1100000

080095bc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80095bc:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80095be:	6a44      	ldr	r4, [r0, #36]	; 0x24

  if (hsd->RxXferSize >= 32U)
 80095c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80095c2:	2b1f      	cmp	r3, #31
 80095c4:	d815      	bhi.n	80095f2 <SD_Read_IT+0x36>
    }

    hsd->pRxBuffPtr = tmp;
    hsd->RxXferSize -= 32U;
  }
}
 80095c6:	bd70      	pop	{r4, r5, r6, pc}
      data = SDMMC_ReadFIFO(hsd->Instance);
 80095c8:	6830      	ldr	r0, [r6, #0]
 80095ca:	f002 fd47 	bl	800c05c <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 80095ce:	7020      	strb	r0, [r4, #0]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80095d0:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80095d4:	7063      	strb	r3, [r4, #1]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80095d6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80095da:	70a3      	strb	r3, [r4, #2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80095dc:	0e00      	lsrs	r0, r0, #24
 80095de:	70e0      	strb	r0, [r4, #3]
      tmp++;
 80095e0:	3404      	adds	r4, #4
    for (count = 0U; count < 8U; count++)
 80095e2:	3501      	adds	r5, #1
 80095e4:	2d07      	cmp	r5, #7
 80095e6:	d9ef      	bls.n	80095c8 <SD_Read_IT+0xc>
    hsd->pRxBuffPtr = tmp;
 80095e8:	6274      	str	r4, [r6, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 80095ea:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80095ec:	3b20      	subs	r3, #32
 80095ee:	62b3      	str	r3, [r6, #40]	; 0x28
}
 80095f0:	e7e9      	b.n	80095c6 <SD_Read_IT+0xa>
 80095f2:	4606      	mov	r6, r0
    for (count = 0U; count < 8U; count++)
 80095f4:	2500      	movs	r5, #0
 80095f6:	e7f5      	b.n	80095e4 <SD_Read_IT+0x28>

080095f8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	b082      	sub	sp, #8
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80095fc:	69c4      	ldr	r4, [r0, #28]

  if (hsd->TxXferSize >= 32U)
 80095fe:	6a03      	ldr	r3, [r0, #32]
 8009600:	2b1f      	cmp	r3, #31
 8009602:	d81c      	bhi.n	800963e <SD_Write_IT+0x46>
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize -= 32U;
  }
}
 8009604:	b002      	add	sp, #8
 8009606:	bd70      	pop	{r4, r5, r6, pc}
      data = (uint32_t)(*tmp);
 8009608:	7823      	ldrb	r3, [r4, #0]
 800960a:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800960c:	7862      	ldrb	r2, [r4, #1]
 800960e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009612:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8009614:	78a2      	ldrb	r2, [r4, #2]
 8009616:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800961a:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800961c:	78e2      	ldrb	r2, [r4, #3]
 800961e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009622:	9301      	str	r3, [sp, #4]
      tmp++;
 8009624:	3404      	adds	r4, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009626:	a901      	add	r1, sp, #4
 8009628:	6830      	ldr	r0, [r6, #0]
 800962a:	f002 fd1a 	bl	800c062 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800962e:	3501      	adds	r5, #1
 8009630:	2d07      	cmp	r5, #7
 8009632:	d9e9      	bls.n	8009608 <SD_Write_IT+0x10>
    hsd->pTxBuffPtr = tmp;
 8009634:	61f4      	str	r4, [r6, #28]
    hsd->TxXferSize -= 32U;
 8009636:	6a33      	ldr	r3, [r6, #32]
 8009638:	3b20      	subs	r3, #32
 800963a:	6233      	str	r3, [r6, #32]
}
 800963c:	e7e2      	b.n	8009604 <SD_Write_IT+0xc>
 800963e:	4606      	mov	r6, r0
    for (count = 0U; count < 8U; count++)
 8009640:	2500      	movs	r5, #0
 8009642:	e7f5      	b.n	8009630 <SD_Write_IT+0x38>

08009644 <SD_SendSDStatus>:
{
 8009644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009646:	b087      	sub	sp, #28
 8009648:	4605      	mov	r5, r0
 800964a:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 800964c:	f7fa f8d4 	bl	80037f8 <HAL_GetTick>
 8009650:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009652:	2100      	movs	r1, #0
 8009654:	6828      	ldr	r0, [r5, #0]
 8009656:	f002 fd28 	bl	800c0aa <SDMMC_GetResponse>
 800965a:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800965e:	d164      	bne.n	800972a <SD_SendSDStatus+0xe6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009660:	2140      	movs	r1, #64	; 0x40
 8009662:	6828      	ldr	r0, [r5, #0]
 8009664:	f002 fdfa 	bl	800c25c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009668:	4603      	mov	r3, r0
 800966a:	b110      	cbz	r0, 8009672 <SD_SendSDStatus+0x2e>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800966c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800966e:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
 8009670:	e05d      	b.n	800972e <SD_SendSDStatus+0xea>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009672:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8009674:	0409      	lsls	r1, r1, #16
 8009676:	6828      	ldr	r0, [r5, #0]
 8009678:	f002 fe4f 	bl	800c31a <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800967c:	4603      	mov	r3, r0
 800967e:	b110      	cbz	r0, 8009686 <SD_SendSDStatus+0x42>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009680:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8009682:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
 8009684:	e053      	b.n	800972e <SD_SendSDStatus+0xea>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009686:	f04f 33ff 	mov.w	r3, #4294967295
 800968a:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 800968c:	2340      	movs	r3, #64	; 0x40
 800968e:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009690:	2360      	movs	r3, #96	; 0x60
 8009692:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009694:	2302      	movs	r3, #2
 8009696:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009698:	2300      	movs	r3, #0
 800969a:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800969c:	2301      	movs	r3, #1
 800969e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80096a0:	4669      	mov	r1, sp
 80096a2:	6828      	ldr	r0, [r5, #0]
 80096a4:	f002 fd04 	bl	800c0b0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80096a8:	6828      	ldr	r0, [r5, #0]
 80096aa:	f002 fe9a 	bl	800c3e2 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 80096ae:	4603      	mov	r3, r0
 80096b0:	b180      	cbz	r0, 80096d4 <SD_SendSDStatus+0x90>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80096b2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80096b4:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
 80096b6:	e03a      	b.n	800972e <SD_SendSDStatus+0xea>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80096b8:	6828      	ldr	r0, [r5, #0]
 80096ba:	f002 fccf 	bl	800c05c <SDMMC_ReadFIFO>
 80096be:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 80096c2:	3401      	adds	r4, #1
 80096c4:	2c07      	cmp	r4, #7
 80096c6:	d9f7      	bls.n	80096b8 <SD_SendSDStatus+0x74>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80096c8:	f7fa f896 	bl	80037f8 <HAL_GetTick>
 80096cc:	1bc0      	subs	r0, r0, r7
 80096ce:	f1b0 3fff 	cmp.w	r0, #4294967295
 80096d2:	d02f      	beq.n	8009734 <SD_SendSDStatus+0xf0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80096d8:	f414 7495 	ands.w	r4, r4, #298	; 0x12a
 80096dc:	d104      	bne.n	80096e8 <SD_SendSDStatus+0xa4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80096de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80096e4:	d0f0      	beq.n	80096c8 <SD_SendSDStatus+0x84>
 80096e6:	e7ed      	b.n	80096c4 <SD_SendSDStatus+0x80>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80096e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096ea:	f012 0f08 	tst.w	r2, #8
 80096ee:	d124      	bne.n	800973a <SD_SendSDStatus+0xf6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80096f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096f2:	f012 0f02 	tst.w	r2, #2
 80096f6:	d122      	bne.n	800973e <SD_SendSDStatus+0xfa>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80096f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096fa:	f013 0f20 	tst.w	r3, #32
 80096fe:	d120      	bne.n	8009742 <SD_SendSDStatus+0xfe>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009700:	6828      	ldr	r0, [r5, #0]
 8009702:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009704:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8009708:	d00c      	beq.n	8009724 <SD_SendSDStatus+0xe0>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800970a:	f002 fca7 	bl	800c05c <SDMMC_ReadFIFO>
 800970e:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009712:	f7fa f871 	bl	80037f8 <HAL_GetTick>
 8009716:	1bc0      	subs	r0, r0, r7
 8009718:	f1b0 3fff 	cmp.w	r0, #4294967295
 800971c:	d1f0      	bne.n	8009700 <SD_SendSDStatus+0xbc>
      return HAL_SD_ERROR_TIMEOUT;
 800971e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009722:	e004      	b.n	800972e <SD_SendSDStatus+0xea>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009724:	4a08      	ldr	r2, [pc, #32]	; (8009748 <SD_SendSDStatus+0x104>)
 8009726:	6382      	str	r2, [r0, #56]	; 0x38
  return HAL_SD_ERROR_NONE;
 8009728:	e001      	b.n	800972e <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800972a:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 800972e:	4618      	mov	r0, r3
 8009730:	b007      	add	sp, #28
 8009732:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_SD_ERROR_TIMEOUT;
 8009734:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009738:	e7f9      	b.n	800972e <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800973a:	2308      	movs	r3, #8
 800973c:	e7f7      	b.n	800972e <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800973e:	2302      	movs	r3, #2
 8009740:	e7f5      	b.n	800972e <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_RX_OVERRUN;
 8009742:	2320      	movs	r3, #32
 8009744:	e7f3      	b.n	800972e <SD_SendSDStatus+0xea>
 8009746:	bf00      	nop
 8009748:	18000f3a 	.word	0x18000f3a

0800974c <SD_FindSCR>:
{
 800974c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800974e:	b089      	sub	sp, #36	; 0x24
 8009750:	4604      	mov	r4, r0
 8009752:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8009754:	f7fa f850 	bl	80037f8 <HAL_GetTick>
 8009758:	4605      	mov	r5, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 800975a:	2300      	movs	r3, #0
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009760:	2108      	movs	r1, #8
 8009762:	6820      	ldr	r0, [r4, #0]
 8009764:	f002 fd7a 	bl	800c25c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009768:	4606      	mov	r6, r0
 800976a:	b110      	cbz	r0, 8009772 <SD_FindSCR+0x26>
}
 800976c:	4630      	mov	r0, r6
 800976e:	b009      	add	sp, #36	; 0x24
 8009770:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009772:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009774:	0409      	lsls	r1, r1, #16
 8009776:	6820      	ldr	r0, [r4, #0]
 8009778:	f002 fdcf 	bl	800c31a <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800977c:	4606      	mov	r6, r0
 800977e:	2800      	cmp	r0, #0
 8009780:	d1f4      	bne.n	800976c <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009782:	f04f 33ff 	mov.w	r3, #4294967295
 8009786:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8009788:	2308      	movs	r3, #8
 800978a:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800978c:	2330      	movs	r3, #48	; 0x30
 800978e:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009790:	2302      	movs	r3, #2
 8009792:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009794:	2300      	movs	r3, #0
 8009796:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009798:	2301      	movs	r3, #1
 800979a:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800979c:	a902      	add	r1, sp, #8
 800979e:	6820      	ldr	r0, [r4, #0]
 80097a0:	f002 fc86 	bl	800c0b0 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80097a4:	6820      	ldr	r0, [r4, #0]
 80097a6:	f002 fdea 	bl	800c37e <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80097aa:	4606      	mov	r6, r0
 80097ac:	b130      	cbz	r0, 80097bc <SD_FindSCR+0x70>
 80097ae:	e7dd      	b.n	800976c <SD_FindSCR+0x20>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80097b0:	f7fa f822 	bl	80037f8 <HAL_GetTick>
 80097b4:	1b43      	subs	r3, r0, r5
 80097b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ba:	d046      	beq.n	800984a <SD_FindSCR+0xfe>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80097bc:	6820      	ldr	r0, [r4, #0]
 80097be:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80097c0:	f240 532a 	movw	r3, #1322	; 0x52a
 80097c4:	421a      	tst	r2, r3
 80097c6:	d10e      	bne.n	80097e6 <SD_FindSCR+0x9a>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80097c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80097ca:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80097ce:	d1ef      	bne.n	80097b0 <SD_FindSCR+0x64>
 80097d0:	2e00      	cmp	r6, #0
 80097d2:	d1ed      	bne.n	80097b0 <SD_FindSCR+0x64>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80097d4:	f002 fc42 	bl	800c05c <SDMMC_ReadFIFO>
 80097d8:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80097da:	6820      	ldr	r0, [r4, #0]
 80097dc:	f002 fc3e 	bl	800c05c <SDMMC_ReadFIFO>
 80097e0:	9001      	str	r0, [sp, #4]
      index++;
 80097e2:	3601      	adds	r6, #1
 80097e4:	e7e4      	b.n	80097b0 <SD_FindSCR+0x64>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80097e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80097e8:	f013 0f08 	tst.w	r3, #8
 80097ec:	d124      	bne.n	8009838 <SD_FindSCR+0xec>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80097ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80097f0:	f013 0f02 	tst.w	r3, #2
 80097f4:	d123      	bne.n	800983e <SD_FindSCR+0xf2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80097f6:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80097f8:	f016 0620 	ands.w	r6, r6, #32
 80097fc:	d122      	bne.n	8009844 <SD_FindSCR+0xf8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80097fe:	4b14      	ldr	r3, [pc, #80]	; (8009850 <SD_FindSCR+0x104>)
 8009800:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009802:	9a01      	ldr	r2, [sp, #4]
 8009804:	0213      	lsls	r3, r2, #8
 8009806:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800980a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800980e:	0a11      	lsrs	r1, r2, #8
 8009810:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009814:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009816:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800981a:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800981c:	9a00      	ldr	r2, [sp, #0]
 800981e:	0213      	lsls	r3, r2, #8
 8009820:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009824:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009828:	0a11      	lsrs	r1, r2, #8
 800982a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800982e:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009830:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009834:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8009836:	e799      	b.n	800976c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009838:	2608      	movs	r6, #8
 800983a:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800983c:	e796      	b.n	800976c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800983e:	2602      	movs	r6, #2
 8009840:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009842:	e793      	b.n	800976c <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009844:	2620      	movs	r6, #32
 8009846:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8009848:	e790      	b.n	800976c <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 800984a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800984e:	e78d      	b.n	800976c <SD_FindSCR+0x20>
 8009850:	18000f3a 	.word	0x18000f3a

08009854 <SD_WideBus_Enable>:
{
 8009854:	b510      	push	{r4, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 800985a:	2100      	movs	r1, #0
 800985c:	9100      	str	r1, [sp, #0]
 800985e:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009860:	6800      	ldr	r0, [r0, #0]
 8009862:	f002 fc22 	bl	800c0aa <SDMMC_GetResponse>
 8009866:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800986a:	d113      	bne.n	8009894 <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 800986c:	4669      	mov	r1, sp
 800986e:	4620      	mov	r0, r4
 8009870:	f7ff ff6c 	bl	800974c <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009874:	b980      	cbnz	r0, 8009898 <SD_WideBus_Enable+0x44>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009876:	9b01      	ldr	r3, [sp, #4]
 8009878:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800987c:	d00e      	beq.n	800989c <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800987e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009880:	0409      	lsls	r1, r1, #16
 8009882:	6820      	ldr	r0, [r4, #0]
 8009884:	f002 fd49 	bl	800c31a <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009888:	b930      	cbnz	r0, 8009898 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800988a:	2102      	movs	r1, #2
 800988c:	6820      	ldr	r0, [r4, #0]
 800988e:	f002 fd5d 	bl	800c34c <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009892:	e001      	b.n	8009898 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009894:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8009898:	b002      	add	sp, #8
 800989a:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800989c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80098a0:	e7fa      	b.n	8009898 <SD_WideBus_Enable+0x44>

080098a2 <SD_WideBus_Disable>:
{
 80098a2:	b510      	push	{r4, lr}
 80098a4:	b082      	sub	sp, #8
 80098a6:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 80098a8:	2100      	movs	r1, #0
 80098aa:	9100      	str	r1, [sp, #0]
 80098ac:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80098ae:	6800      	ldr	r0, [r0, #0]
 80098b0:	f002 fbfb 	bl	800c0aa <SDMMC_GetResponse>
 80098b4:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80098b8:	d113      	bne.n	80098e2 <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 80098ba:	4669      	mov	r1, sp
 80098bc:	4620      	mov	r0, r4
 80098be:	f7ff ff45 	bl	800974c <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80098c2:	b980      	cbnz	r0, 80098e6 <SD_WideBus_Disable+0x44>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80098c4:	9b01      	ldr	r3, [sp, #4]
 80098c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80098ca:	d00e      	beq.n	80098ea <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80098cc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80098ce:	0409      	lsls	r1, r1, #16
 80098d0:	6820      	ldr	r0, [r4, #0]
 80098d2:	f002 fd22 	bl	800c31a <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80098d6:	b930      	cbnz	r0, 80098e6 <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80098d8:	2100      	movs	r1, #0
 80098da:	6820      	ldr	r0, [r4, #0]
 80098dc:	f002 fd36 	bl	800c34c <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 80098e0:	e001      	b.n	80098e6 <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80098e2:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 80098e6:	b002      	add	sp, #8
 80098e8:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80098ea:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80098ee:	e7fa      	b.n	80098e6 <SD_WideBus_Disable+0x44>

080098f0 <SD_SendStatus>:
{
 80098f0:	b570      	push	{r4, r5, r6, lr}
  if (pCardStatus == NULL)
 80098f2:	b181      	cbz	r1, 8009916 <SD_SendStatus+0x26>
 80098f4:	4604      	mov	r4, r0
 80098f6:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80098f8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80098fa:	0409      	lsls	r1, r1, #16
 80098fc:	6800      	ldr	r0, [r0, #0]
 80098fe:	f002 fd57 	bl	800c3b0 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009902:	4605      	mov	r5, r0
 8009904:	b108      	cbz	r0, 800990a <SD_SendStatus+0x1a>
}
 8009906:	4628      	mov	r0, r5
 8009908:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800990a:	2100      	movs	r1, #0
 800990c:	6820      	ldr	r0, [r4, #0]
 800990e:	f002 fbcc 	bl	800c0aa <SDMMC_GetResponse>
 8009912:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8009914:	e7f7      	b.n	8009906 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8009916:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 800991a:	e7f4      	b.n	8009906 <SD_SendStatus+0x16>

0800991c <HAL_SD_TxCpltCallback>:
}
 800991c:	4770      	bx	lr

0800991e <HAL_SD_RxCpltCallback>:
}
 800991e:	4770      	bx	lr

08009920 <HAL_SD_ErrorCallback>:
}
 8009920:	4770      	bx	lr
	...

08009924 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009924:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8009926:	0f9b      	lsrs	r3, r3, #30
 8009928:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800992a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800992c:	f3c3 6383 	ubfx	r3, r3, #26, #4
 8009930:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009932:	f890 305f 	ldrb.w	r3, [r0, #95]	; 0x5f
 8009936:	f003 0303 	and.w	r3, r3, #3
 800993a:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800993c:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
 8009940:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009942:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8009946:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009948:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800994c:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800994e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8009950:	0d1b      	lsrs	r3, r3, #20
 8009952:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009954:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8009958:	f003 030f 	and.w	r3, r3, #15
 800995c:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800995e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8009960:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8009964:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009966:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8009968:	f3c3 3380 	ubfx	r3, r3, #14, #1
 800996c:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800996e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8009970:	f3c3 3340 	ubfx	r3, r3, #13, #1
 8009974:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009976:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8009978:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800997c:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800997e:	2300      	movs	r3, #0
 8009980:	734b      	strb	r3, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 8009982:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009984:	2b00      	cmp	r3, #0
 8009986:	f040 8086 	bne.w	8009a96 <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800998a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800998c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009990:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 8009994:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8009996:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800999a:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800999c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800999e:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 80099a2:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80099a4:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 80099a8:	f003 0307 	and.w	r3, r3, #7
 80099ac:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80099ae:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80099b0:	f3c3 5342 	ubfx	r3, r3, #21, #3
 80099b4:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80099b6:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80099b8:	f3c3 4382 	ubfx	r3, r3, #18, #3
 80099bc:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80099be:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80099c0:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 80099c4:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80099c6:	690b      	ldr	r3, [r1, #16]
 80099c8:	3301      	adds	r3, #1
 80099ca:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80099cc:	7e0a      	ldrb	r2, [r1, #24]
 80099ce:	f002 0207 	and.w	r2, r2, #7
 80099d2:	3202      	adds	r2, #2
 80099d4:	4093      	lsls	r3, r2
 80099d6:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80099d8:	7a0a      	ldrb	r2, [r1, #8]
 80099da:	f002 0c0f 	and.w	ip, r2, #15
 80099de:	2201      	movs	r2, #1
 80099e0:	fa02 f20c 	lsl.w	r2, r2, ip
 80099e4:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80099e6:	0a52      	lsrs	r2, r2, #9
 80099e8:	fb02 f303 	mul.w	r3, r2, r3
 80099ec:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80099ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099f2:	6543      	str	r3, [r0, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80099f4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80099f6:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80099fa:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80099fc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80099fe:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8009a02:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009a04:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8009a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a0a:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009a0c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009a0e:	0fdb      	lsrs	r3, r3, #31
 8009a10:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009a12:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009a14:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8009a18:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009a1a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009a1c:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8009a20:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009a22:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009a24:	f3c3 5383 	ubfx	r3, r3, #22, #4
 8009a28:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009a2a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009a2c:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8009a30:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 8009a34:	2300      	movs	r3, #0
 8009a36:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009a3a:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8009a3e:	f002 0201 	and.w	r2, r2, #1
 8009a42:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009a46:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8009a48:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8009a4c:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009a50:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8009a52:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8009a56:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009a5a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8009a5c:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8009a60:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009a64:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8009a66:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8009a6a:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009a6e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8009a70:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8009a74:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009a78:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8009a7a:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8009a7e:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009a82:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8009a84:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8009a88:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 8009a92:	4618      	mov	r0, r3
}
 8009a94:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d111      	bne.n	8009abe <HAL_SD_GetCardCSD+0x19a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009a9a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8009a9c:	041b      	lsls	r3, r3, #16
 8009a9e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8009aa2:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009aaa:	690b      	ldr	r3, [r1, #16]
 8009aac:	3301      	adds	r3, #1
 8009aae:	029b      	lsls	r3, r3, #10
 8009ab0:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009ab2:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8009ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ab8:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009aba:	6543      	str	r3, [r0, #84]	; 0x54
 8009abc:	e79a      	b.n	80099f4 <HAL_SD_GetCardCSD+0xd0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009abe:	6803      	ldr	r3, [r0, #0]
 8009ac0:	4a05      	ldr	r2, [pc, #20]	; (8009ad8 <HAL_SD_GetCardCSD+0x1b4>)
 8009ac2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ac4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aca:	6343      	str	r3, [r0, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009acc:	2301      	movs	r3, #1
 8009ace:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    return HAL_ERROR;
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	1fe00fff 	.word	0x1fe00fff

08009adc <SD_InitCard>:
{
 8009adc:	b530      	push	{r4, r5, lr}
 8009ade:	b08d      	sub	sp, #52	; 0x34
 8009ae0:	4604      	mov	r4, r0
  uint16_t sd_rca = 0U;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tickstart = HAL_GetTick();
 8009ae8:	f7f9 fe86 	bl	80037f8 <HAL_GetTick>
 8009aec:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009aee:	6820      	ldr	r0, [r4, #0]
 8009af0:	f002 fac2 	bl	800c078 <SDMMC_GetPowerState>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d067      	beq.n	8009bc8 <SD_InitCard+0xec>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009af8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009afa:	2b03      	cmp	r3, #3
 8009afc:	d117      	bne.n	8009b2e <SD_InitCard+0x52>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009afe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009b00:	2b03      	cmp	r3, #3
 8009b02:	d02f      	beq.n	8009b64 <SD_InitCard+0x88>
    while (sd_rca == 0U)
 8009b04:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009b08:	bb63      	cbnz	r3, 8009b64 <SD_InitCard+0x88>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009b0a:	f10d 0102 	add.w	r1, sp, #2
 8009b0e:	6820      	ldr	r0, [r4, #0]
 8009b10:	f002 fd6c 	bl	800c5ec <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 8009b14:	4603      	mov	r3, r0
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d158      	bne.n	8009bcc <SD_InitCard+0xf0>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009b1a:	f7f9 fe6d 	bl	80037f8 <HAL_GetTick>
 8009b1e:	1b43      	subs	r3, r0, r5
 8009b20:	f241 3287 	movw	r2, #4999	; 0x1387
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d9ed      	bls.n	8009b04 <SD_InitCard+0x28>
        return HAL_SD_ERROR_TIMEOUT;
 8009b28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b2c:	e04e      	b.n	8009bcc <SD_InitCard+0xf0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009b2e:	6820      	ldr	r0, [r4, #0]
 8009b30:	f002 fca0 	bl	800c474 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b34:	4603      	mov	r3, r0
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d148      	bne.n	8009bcc <SD_InitCard+0xf0>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	6820      	ldr	r0, [r4, #0]
 8009b3e:	f002 fab4 	bl	800c0aa <SDMMC_GetResponse>
 8009b42:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b44:	2104      	movs	r1, #4
 8009b46:	6820      	ldr	r0, [r4, #0]
 8009b48:	f002 faaf 	bl	800c0aa <SDMMC_GetResponse>
 8009b4c:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b4e:	2108      	movs	r1, #8
 8009b50:	6820      	ldr	r0, [r4, #0]
 8009b52:	f002 faaa 	bl	800c0aa <SDMMC_GetResponse>
 8009b56:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b58:	210c      	movs	r1, #12
 8009b5a:	6820      	ldr	r0, [r4, #0]
 8009b5c:	f002 faa5 	bl	800c0aa <SDMMC_GetResponse>
 8009b60:	67a0      	str	r0, [r4, #120]	; 0x78
 8009b62:	e7cc      	b.n	8009afe <SD_InitCard+0x22>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009b64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009b66:	2b03      	cmp	r3, #3
 8009b68:	d01c      	beq.n	8009ba4 <SD_InitCard+0xc8>
    hsd->SdCard.RelCardAdd = sd_rca;
 8009b6a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8009b6e:	6461      	str	r1, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b70:	0409      	lsls	r1, r1, #16
 8009b72:	6820      	ldr	r0, [r4, #0]
 8009b74:	f002 fc94 	bl	800c4a0 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b78:	4603      	mov	r3, r0
 8009b7a:	bb38      	cbnz	r0, 8009bcc <SD_InitCard+0xf0>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	6820      	ldr	r0, [r4, #0]
 8009b80:	f002 fa93 	bl	800c0aa <SDMMC_GetResponse>
 8009b84:	65e0      	str	r0, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b86:	2104      	movs	r1, #4
 8009b88:	6820      	ldr	r0, [r4, #0]
 8009b8a:	f002 fa8e 	bl	800c0aa <SDMMC_GetResponse>
 8009b8e:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b90:	2108      	movs	r1, #8
 8009b92:	6820      	ldr	r0, [r4, #0]
 8009b94:	f002 fa89 	bl	800c0aa <SDMMC_GetResponse>
 8009b98:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b9a:	210c      	movs	r1, #12
 8009b9c:	6820      	ldr	r0, [r4, #0]
 8009b9e:	f002 fa84 	bl	800c0aa <SDMMC_GetResponse>
 8009ba2:	66a0      	str	r0, [r4, #104]	; 0x68
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009ba4:	2104      	movs	r1, #4
 8009ba6:	6820      	ldr	r0, [r4, #0]
 8009ba8:	f002 fa7f 	bl	800c0aa <SDMMC_GetResponse>
 8009bac:	0d00      	lsrs	r0, r0, #20
 8009bae:	6420      	str	r0, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009bb0:	a901      	add	r1, sp, #4
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f7ff feb6 	bl	8009924 <HAL_SD_GetCardCSD>
 8009bb8:	b958      	cbnz	r0, 8009bd2 <SD_InitCard+0xf6>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009bba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009bbc:	0409      	lsls	r1, r1, #16
 8009bbe:	6820      	ldr	r0, [r4, #0]
 8009bc0:	f002 fb92 	bl	800c2e8 <SDMMC_CmdSelDesel>
 8009bc4:	4603      	mov	r3, r0
  if (errorstate != HAL_SD_ERROR_NONE)
 8009bc6:	e001      	b.n	8009bcc <SD_InitCard+0xf0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009bc8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	b00d      	add	sp, #52	; 0x34
 8009bd0:	bd30      	pop	{r4, r5, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009bd6:	e7f9      	b.n	8009bcc <SD_InitCard+0xf0>

08009bd8 <HAL_SD_InitCard>:
{
 8009bd8:	b570      	push	{r4, r5, r6, lr}
 8009bda:	b088      	sub	sp, #32
 8009bdc:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009bde:	2300      	movs	r3, #0
 8009be0:	9303      	str	r3, [sp, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009be2:	9304      	str	r3, [sp, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009be4:	9305      	str	r3, [sp, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009be6:	9306      	str	r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009be8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009bec:	f7ff f97a 	bl	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 8009bf0:	b938      	cbnz	r0, 8009c02 <HAL_SD_InitCard+0x2a>
    hsd->State = HAL_SD_STATE_READY;
 8009bf2:	2001      	movs	r0, #1
 8009bf4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009bf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009bfc:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009bfe:	b008      	add	sp, #32
 8009c00:	bd70      	pop	{r4, r5, r6, pc}
 8009c02:	4606      	mov	r6, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009c04:	0a05      	lsrs	r5, r0, #8
 8009c06:	4b22      	ldr	r3, [pc, #136]	; (8009c90 <HAL_SD_InitCard+0xb8>)
 8009c08:	fba3 3505 	umull	r3, r5, r3, r5
 8009c0c:	092d      	lsrs	r5, r5, #4
 8009c0e:	9507      	str	r5, [sp, #28]
  (void)SDMMC_Init(hsd->Instance, Init);
 8009c10:	ab08      	add	r3, sp, #32
 8009c12:	e913 0003 	ldmdb	r3, {r0, r1}
 8009c16:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009c1a:	ab03      	add	r3, sp, #12
 8009c1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c1e:	6820      	ldr	r0, [r4, #0]
 8009c20:	f002 fa04 	bl	800c02c <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009c24:	6820      	ldr	r0, [r4, #0]
 8009c26:	f002 fa21 	bl	800c06c <SDMMC_PowerState_ON>
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009c2a:	006d      	lsls	r5, r5, #1
 8009c2c:	fbb6 f5f5 	udiv	r5, r6, r5
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009c30:	4e18      	ldr	r6, [pc, #96]	; (8009c94 <HAL_SD_InitCard+0xbc>)
 8009c32:	fbb6 f5f5 	udiv	r5, r6, r5
 8009c36:	1c68      	adds	r0, r5, #1
 8009c38:	f7f9 fde4 	bl	8003804 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f7ff fc5b 	bl	80094f8 <SD_PowerON>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c42:	4602      	mov	r2, r0
 8009c44:	b130      	cbz	r0, 8009c54 <HAL_SD_InitCard+0x7c>
    hsd->State = HAL_SD_STATE_READY;
 8009c46:	2001      	movs	r0, #1
 8009c48:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009c4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	6363      	str	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009c52:	e7d4      	b.n	8009bfe <HAL_SD_InitCard+0x26>
  errorstate = SD_InitCard(hsd);
 8009c54:	4620      	mov	r0, r4
 8009c56:	f7ff ff41 	bl	8009adc <SD_InitCard>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	b130      	cbz	r0, 8009c6c <HAL_SD_InitCard+0x94>
    hsd->State = HAL_SD_STATE_READY;
 8009c5e:	2001      	movs	r0, #1
 8009c60:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009c64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c66:	4313      	orrs	r3, r2
 8009c68:	6363      	str	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009c6a:	e7c8      	b.n	8009bfe <HAL_SD_InitCard+0x26>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009c6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009c70:	6820      	ldr	r0, [r4, #0]
 8009c72:	f002 faf3 	bl	800c25c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c76:	b908      	cbnz	r0, 8009c7c <HAL_SD_InitCard+0xa4>
  return HAL_OK;
 8009c78:	2000      	movs	r0, #0
 8009c7a:	e7c0      	b.n	8009bfe <HAL_SD_InitCard+0x26>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c7c:	6823      	ldr	r3, [r4, #0]
 8009c7e:	4906      	ldr	r1, [pc, #24]	; (8009c98 <HAL_SD_InitCard+0xc0>)
 8009c80:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009c82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c84:	4303      	orrs	r3, r0
 8009c86:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009c88:	2001      	movs	r0, #1
 8009c8a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    return HAL_ERROR;
 8009c8e:	e7b6      	b.n	8009bfe <HAL_SD_InitCard+0x26>
 8009c90:	014f8b59 	.word	0x014f8b59
 8009c94:	00012110 	.word	0x00012110
 8009c98:	1fe00fff 	.word	0x1fe00fff

08009c9c <HAL_SD_GetCardStatus>:
{
 8009c9c:	b530      	push	{r4, r5, lr}
 8009c9e:	b091      	sub	sp, #68	; 0x44
  if (hsd->State == HAL_SD_STATE_BUSY)
 8009ca0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b03      	cmp	r3, #3
 8009ca8:	d059      	beq.n	8009d5e <HAL_SD_GetCardStatus+0xc2>
 8009caa:	4604      	mov	r4, r0
 8009cac:	460d      	mov	r5, r1
  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009cae:	4669      	mov	r1, sp
 8009cb0:	f7ff fcc8 	bl	8009644 <SD_SendSDStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cb4:	b1b8      	cbz	r0, 8009ce6 <HAL_SD_GetCardStatus+0x4a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009cb6:	6823      	ldr	r3, [r4, #0]
 8009cb8:	492b      	ldr	r1, [pc, #172]	; (8009d68 <HAL_SD_GetCardStatus+0xcc>)
 8009cba:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009cbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cbe:	4303      	orrs	r3, r0
 8009cc0:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009cc2:	2501      	movs	r5, #1
 8009cc4:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009cc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009ccc:	6820      	ldr	r0, [r4, #0]
 8009cce:	f002 fac5 	bl	800c25c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d044      	beq.n	8009d60 <HAL_SD_GetCardStatus+0xc4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009cd6:	6822      	ldr	r2, [r4, #0]
 8009cd8:	4923      	ldr	r1, [pc, #140]	; (8009d68 <HAL_SD_GetCardStatus+0xcc>)
 8009cda:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009cdc:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009cde:	2501      	movs	r5, #1
 8009ce0:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    status = HAL_ERROR;
 8009ce4:	e03c      	b.n	8009d60 <HAL_SD_GetCardStatus+0xc4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009ce6:	9a00      	ldr	r2, [sp, #0]
 8009ce8:	f3c2 1381 	ubfx	r3, r2, #6, #2
 8009cec:	702b      	strb	r3, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009cee:	f3c2 1340 	ubfx	r3, r2, #5, #1
 8009cf2:	706b      	strb	r3, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009cf4:	0a13      	lsrs	r3, r2, #8
 8009cf6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009cfa:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	806b      	strh	r3, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009d02:	9a01      	ldr	r2, [sp, #4]
 8009d04:	0213      	lsls	r3, r2, #8
 8009d06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d0a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009d0e:	0a11      	lsrs	r1, r2, #8
 8009d10:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009d14:	430b      	orrs	r3, r1
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009d16:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009d1a:	606b      	str	r3, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009d1c:	9b02      	ldr	r3, [sp, #8]
 8009d1e:	b2da      	uxtb	r2, r3
 8009d20:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009d22:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009d26:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009d28:	f3c3 5203 	ubfx	r2, r3, #20, #4
 8009d2c:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009d2e:	0c1b      	lsrs	r3, r3, #16
 8009d30:	9a03      	ldr	r2, [sp, #12]
 8009d32:	b2d1      	uxtb	r1, r2
 8009d34:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009d38:	430b      	orrs	r3, r1
 8009d3a:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009d3c:	f3c2 2385 	ubfx	r3, r2, #10, #6
 8009d40:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009d42:	f3c2 2301 	ubfx	r3, r2, #8, #2
 8009d46:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009d48:	f3c2 1303 	ubfx	r3, r2, #4, #4
 8009d4c:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009d4e:	f002 020f 	and.w	r2, r2, #15
 8009d52:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009d54:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8009d58:	74ab      	strb	r3, [r5, #18]
  HAL_StatusTypeDef status = HAL_OK;
 8009d5a:	2500      	movs	r5, #0
 8009d5c:	e7b4      	b.n	8009cc8 <HAL_SD_GetCardStatus+0x2c>
    return HAL_ERROR;
 8009d5e:	2501      	movs	r5, #1
}
 8009d60:	4628      	mov	r0, r5
 8009d62:	b011      	add	sp, #68	; 0x44
 8009d64:	bd30      	pop	{r4, r5, pc}
 8009d66:	bf00      	nop
 8009d68:	1fe00fff 	.word	0x1fe00fff

08009d6c <HAL_SD_ConfigWideBusOperation>:
{
 8009d6c:	b530      	push	{r4, r5, lr}
 8009d6e:	b089      	sub	sp, #36	; 0x24
 8009d70:	4604      	mov	r4, r0
 8009d72:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8009d74:	2303      	movs	r3, #3
 8009d76:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009d7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009d7c:	2b03      	cmp	r3, #3
 8009d7e:	d01c      	beq.n	8009dba <HAL_SD_ConfigWideBusOperation+0x4e>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009d80:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009d84:	d008      	beq.n	8009d98 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8009d86:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8009d8a:	d00a      	beq.n	8009da2 <HAL_SD_ConfigWideBusOperation+0x36>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009d8c:	b179      	cbz	r1, 8009dae <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009d8e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009d90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009d94:	6343      	str	r3, [r0, #52]	; 0x34
 8009d96:	e014      	b.n	8009dc2 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d98:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d9e:	6343      	str	r3, [r0, #52]	; 0x34
 8009da0:	e00f      	b.n	8009dc2 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8009da2:	f7ff fd57 	bl	8009854 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8009da6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009da8:	4303      	orrs	r3, r0
 8009daa:	6363      	str	r3, [r4, #52]	; 0x34
 8009dac:	e009      	b.n	8009dc2 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8009dae:	f7ff fd78 	bl	80098a2 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8009db2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009db4:	4303      	orrs	r3, r0
 8009db6:	6363      	str	r3, [r4, #52]	; 0x34
 8009db8:	e003      	b.n	8009dc2 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009dba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dc0:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009dc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dc4:	b1b3      	cbz	r3, 8009df4 <HAL_SD_ConfigWideBusOperation+0x88>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009dc6:	6823      	ldr	r3, [r4, #0]
 8009dc8:	4a39      	ldr	r2, [pc, #228]	; (8009eb0 <HAL_SD_ConfigWideBusOperation+0x144>)
 8009dca:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009dcc:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009dce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009dd2:	6820      	ldr	r0, [r4, #0]
 8009dd4:	f002 fa42 	bl	800c25c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009dd8:	b130      	cbz	r0, 8009de8 <HAL_SD_ConfigWideBusOperation+0x7c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	4934      	ldr	r1, [pc, #208]	; (8009eb0 <HAL_SD_ConfigWideBusOperation+0x144>)
 8009dde:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009de0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009de2:	4303      	orrs	r3, r0
 8009de4:	6363      	str	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
 8009de6:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8009de8:	2301      	movs	r3, #1
 8009dea:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8009dee:	4628      	mov	r0, r5
 8009df0:	b009      	add	sp, #36	; 0x24
 8009df2:	bd30      	pop	{r4, r5, pc}
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009df4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009df8:	f7ff f874 	bl	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d050      	beq.n	8009ea4 <HAL_SD_ConfigWideBusOperation+0x138>
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009e02:	6863      	ldr	r3, [r4, #4]
 8009e04:	9303      	str	r3, [sp, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009e06:	68a3      	ldr	r3, [r4, #8]
 8009e08:	9304      	str	r3, [sp, #16]
      Init.BusWide             = WideMode;
 8009e0a:	9505      	str	r5, [sp, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009e0c:	6923      	ldr	r3, [r4, #16]
 8009e0e:	9306      	str	r3, [sp, #24]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009e10:	6961      	ldr	r1, [r4, #20]
 8009e12:	4b28      	ldr	r3, [pc, #160]	; (8009eb4 <HAL_SD_ConfigWideBusOperation+0x148>)
 8009e14:	fba3 0302 	umull	r0, r3, r3, r2
 8009e18:	0e18      	lsrs	r0, r3, #24
 8009e1a:	ebb1 6f13 	cmp.w	r1, r3, lsr #24
 8009e1e:	d30c      	bcc.n	8009e3a <HAL_SD_ConfigWideBusOperation+0xce>
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009e20:	9107      	str	r1, [sp, #28]
      (void)SDMMC_Init(hsd->Instance, Init);
 8009e22:	ab08      	add	r3, sp, #32
 8009e24:	e913 0003 	ldmdb	r3, {r0, r1}
 8009e28:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009e2c:	ab03      	add	r3, sp, #12
 8009e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e30:	6820      	ldr	r0, [r4, #0]
 8009e32:	f002 f8fb 	bl	800c02c <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8009e36:	2500      	movs	r5, #0
 8009e38:	e7c9      	b.n	8009dce <HAL_SD_ConfigWideBusOperation+0x62>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009e3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e40:	d008      	beq.n	8009e54 <HAL_SD_ConfigWideBusOperation+0xe8>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e46:	d007      	beq.n	8009e58 <HAL_SD_ConfigWideBusOperation+0xec>
        if (hsd->Init.ClockDiv == 0U)
 8009e48:	bb11      	cbnz	r1, 8009e90 <HAL_SD_ConfigWideBusOperation+0x124>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009e4a:	4b1b      	ldr	r3, [pc, #108]	; (8009eb8 <HAL_SD_ConfigWideBusOperation+0x14c>)
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d91d      	bls.n	8009e8c <HAL_SD_ConfigWideBusOperation+0x120>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009e50:	9007      	str	r0, [sp, #28]
 8009e52:	e7e6      	b.n	8009e22 <HAL_SD_ConfigWideBusOperation+0xb6>
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009e54:	9107      	str	r1, [sp, #28]
 8009e56:	e7e4      	b.n	8009e22 <HAL_SD_ConfigWideBusOperation+0xb6>
        if (hsd->Init.ClockDiv == 0U)
 8009e58:	b951      	cbnz	r1, 8009e70 <HAL_SD_ConfigWideBusOperation+0x104>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009e5a:	4b18      	ldr	r3, [pc, #96]	; (8009ebc <HAL_SD_ConfigWideBusOperation+0x150>)
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d905      	bls.n	8009e6c <HAL_SD_ConfigWideBusOperation+0x100>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009e60:	4b14      	ldr	r3, [pc, #80]	; (8009eb4 <HAL_SD_ConfigWideBusOperation+0x148>)
 8009e62:	fba3 2302 	umull	r2, r3, r3, r2
 8009e66:	0e5b      	lsrs	r3, r3, #25
 8009e68:	9307      	str	r3, [sp, #28]
 8009e6a:	e7da      	b.n	8009e22 <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009e6c:	9107      	str	r1, [sp, #28]
 8009e6e:	e7d8      	b.n	8009e22 <HAL_SD_ConfigWideBusOperation+0xb6>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009e70:	004b      	lsls	r3, r1, #1
 8009e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e76:	4811      	ldr	r0, [pc, #68]	; (8009ebc <HAL_SD_ConfigWideBusOperation+0x150>)
 8009e78:	4283      	cmp	r3, r0
 8009e7a:	d905      	bls.n	8009e88 <HAL_SD_ConfigWideBusOperation+0x11c>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009e7c:	4b0d      	ldr	r3, [pc, #52]	; (8009eb4 <HAL_SD_ConfigWideBusOperation+0x148>)
 8009e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8009e82:	0e5b      	lsrs	r3, r3, #25
 8009e84:	9307      	str	r3, [sp, #28]
 8009e86:	e7cc      	b.n	8009e22 <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009e88:	9107      	str	r1, [sp, #28]
 8009e8a:	e7ca      	b.n	8009e22 <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009e8c:	9107      	str	r1, [sp, #28]
 8009e8e:	e7c8      	b.n	8009e22 <HAL_SD_ConfigWideBusOperation+0xb6>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009e90:	004b      	lsls	r3, r1, #1
 8009e92:	fbb2 f2f3 	udiv	r2, r2, r3
 8009e96:	4b08      	ldr	r3, [pc, #32]	; (8009eb8 <HAL_SD_ConfigWideBusOperation+0x14c>)
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d901      	bls.n	8009ea0 <HAL_SD_ConfigWideBusOperation+0x134>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009e9c:	9007      	str	r0, [sp, #28]
 8009e9e:	e7c0      	b.n	8009e22 <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009ea0:	9107      	str	r1, [sp, #28]
 8009ea2:	e7be      	b.n	8009e22 <HAL_SD_ConfigWideBusOperation+0xb6>
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009ea4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ea6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009eaa:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 8009eac:	2501      	movs	r5, #1
 8009eae:	e78e      	b.n	8009dce <HAL_SD_ConfigWideBusOperation+0x62>
 8009eb0:	1fe00fff 	.word	0x1fe00fff
 8009eb4:	55e63b89 	.word	0x55e63b89
 8009eb8:	017d7840 	.word	0x017d7840
 8009ebc:	02faf080 	.word	0x02faf080

08009ec0 <HAL_SD_GetCardState>:
{
 8009ec0:	b510      	push	{r4, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 8009eca:	a901      	add	r1, sp, #4
 8009ecc:	f7ff fd10 	bl	80098f0 <SD_SendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ed0:	b110      	cbz	r0, 8009ed8 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 8009ed2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ed4:	4303      	orrs	r3, r0
 8009ed6:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009ed8:	9801      	ldr	r0, [sp, #4]
 8009eda:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8009ede:	b002      	add	sp, #8
 8009ee0:	bd10      	pop	{r4, pc}

08009ee2 <HAL_SD_Init>:
{
 8009ee2:	b570      	push	{r4, r5, r6, lr}
 8009ee4:	b086      	sub	sp, #24
  if (hsd == NULL)
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d054      	beq.n	8009f94 <HAL_SD_Init+0xb2>
 8009eea:	4604      	mov	r4, r0
  if (hsd->State == HAL_SD_STATE_RESET)
 8009eec:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8009ef0:	b153      	cbz	r3, 8009f08 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009ef2:	2304      	movs	r3, #4
 8009ef4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f7ff fe6d 	bl	8009bd8 <HAL_SD_InitCard>
 8009efe:	b138      	cbz	r0, 8009f10 <HAL_SD_Init+0x2e>
    return HAL_ERROR;
 8009f00:	2501      	movs	r5, #1
}
 8009f02:	4628      	mov	r0, r5
 8009f04:	b006      	add	sp, #24
 8009f06:	bd70      	pop	{r4, r5, r6, pc}
    hsd->Lock = HAL_UNLOCKED;
 8009f08:	7603      	strb	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8009f0a:	f7f8 fda7 	bl	8002a5c <HAL_SD_MspInit>
 8009f0e:	e7f0      	b.n	8009ef2 <HAL_SD_Init+0x10>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009f10:	a901      	add	r1, sp, #4
 8009f12:	4620      	mov	r0, r4
 8009f14:	f7ff fec2 	bl	8009c9c <HAL_SD_GetCardStatus>
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	d13d      	bne.n	8009f98 <HAL_SD_Init+0xb6>
  speedgrade = CardStatus.UhsSpeedGrade;
 8009f1c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009f20:	b2da      	uxtb	r2, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009f22:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8009f26:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009f28:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009f2a:	2901      	cmp	r1, #1
 8009f2c:	d00b      	beq.n	8009f46 <HAL_SD_Init+0x64>
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009f2e:	2901      	cmp	r1, #1
 8009f30:	d00f      	beq.n	8009f52 <HAL_SD_Init+0x70>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009f32:	2300      	movs	r3, #0
 8009f34:	65a3      	str	r3, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009f36:	68e1      	ldr	r1, [r4, #12]
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f7ff ff17 	bl	8009d6c <HAL_SD_ConfigWideBusOperation>
 8009f3e:	4605      	mov	r5, r0
 8009f40:	b158      	cbz	r0, 8009f5a <HAL_SD_Init+0x78>
    return HAL_ERROR;
 8009f42:	2501      	movs	r5, #1
 8009f44:	e7dd      	b.n	8009f02 <HAL_SD_Init+0x20>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009f46:	4313      	orrs	r3, r2
 8009f48:	d0f1      	beq.n	8009f2e <HAL_SD_Init+0x4c>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f4e:	65a3      	str	r3, [r4, #88]	; 0x58
 8009f50:	e7f1      	b.n	8009f36 <HAL_SD_Init+0x54>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f56:	65a3      	str	r3, [r4, #88]	; 0x58
 8009f58:	e7ed      	b.n	8009f36 <HAL_SD_Init+0x54>
  tickstart = HAL_GetTick();
 8009f5a:	f7f9 fc4d 	bl	80037f8 <HAL_GetTick>
 8009f5e:	4606      	mov	r6, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009f60:	4620      	mov	r0, r4
 8009f62:	f7ff ffad 	bl	8009ec0 <HAL_SD_GetCardState>
 8009f66:	2804      	cmp	r0, #4
 8009f68:	d00d      	beq.n	8009f86 <HAL_SD_Init+0xa4>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009f6a:	f7f9 fc45 	bl	80037f8 <HAL_GetTick>
 8009f6e:	1b80      	subs	r0, r0, r6
 8009f70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009f74:	d1f4      	bne.n	8009f60 <HAL_SD_Init+0x7e>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009f76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f7a:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 8009f82:	2503      	movs	r5, #3
 8009f84:	e7bd      	b.n	8009f02 <HAL_SD_Init+0x20>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f86:	2300      	movs	r3, #0
 8009f88:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009f8a:	62e3      	str	r3, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 8009f92:	e7b6      	b.n	8009f02 <HAL_SD_Init+0x20>
    return HAL_ERROR;
 8009f94:	2501      	movs	r5, #1
 8009f96:	e7b4      	b.n	8009f02 <HAL_SD_Init+0x20>
    return HAL_ERROR;
 8009f98:	2501      	movs	r5, #1
 8009f9a:	e7b2      	b.n	8009f02 <HAL_SD_Init+0x20>

08009f9c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009f9c:	4770      	bx	lr

08009f9e <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009f9e:	4770      	bx	lr

08009fa0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009fa0:	4770      	bx	lr

08009fa2 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009fa2:	4770      	bx	lr

08009fa4 <HAL_SD_IRQHandler>:
{
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 8009fa8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009faa:	6803      	ldr	r3, [r0, #0]
 8009fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fae:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8009fb2:	d002      	beq.n	8009fba <HAL_SD_IRQHandler+0x16>
 8009fb4:	f015 0f08 	tst.w	r5, #8
 8009fb8:	d12a      	bne.n	800a010 <HAL_SD_IRQHandler+0x6c>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fbc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8009fc0:	d067      	beq.n	800a092 <HAL_SD_IRQHandler+0xee>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009fc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fc6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009fc8:	6822      	ldr	r2, [r4, #0]
 8009fca:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8009fcc:	4b7e      	ldr	r3, [pc, #504]	; (800a1c8 <HAL_SD_IRQHandler+0x224>)
 8009fce:	400b      	ands	r3, r1
 8009fd0:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009fd2:	6822      	ldr	r2, [r4, #0]
 8009fd4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8009fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fda:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009fdc:	6822      	ldr	r2, [r4, #0]
 8009fde:	68d3      	ldr	r3, [r2, #12]
 8009fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fe4:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 8009fe6:	f015 0f08 	tst.w	r5, #8
 8009fea:	d025      	beq.n	800a038 <HAL_SD_IRQHandler+0x94>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009fec:	f015 0f22 	tst.w	r5, #34	; 0x22
 8009ff0:	d111      	bne.n	800a016 <HAL_SD_IRQHandler+0x72>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009ff2:	6823      	ldr	r3, [r4, #0]
 8009ff4:	4a75      	ldr	r2, [pc, #468]	; (800a1cc <HAL_SD_IRQHandler+0x228>)
 8009ff6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009ffe:	2300      	movs	r3, #0
 800a000:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a002:	f015 0f03 	tst.w	r5, #3
 800a006:	d013      	beq.n	800a030 <HAL_SD_IRQHandler+0x8c>
        HAL_SD_RxCpltCallback(hsd);
 800a008:	4620      	mov	r0, r4
 800a00a:	f7ff fc88 	bl	800991e <HAL_SD_RxCpltCallback>
 800a00e:	e001      	b.n	800a014 <HAL_SD_IRQHandler+0x70>
    SD_Read_IT(hsd);
 800a010:	f7ff fad4 	bl	80095bc <SD_Read_IT>
}
 800a014:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a016:	6820      	ldr	r0, [r4, #0]
 800a018:	f002 f93a 	bl	800c290 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800a01c:	4603      	mov	r3, r0
 800a01e:	2800      	cmp	r0, #0
 800a020:	d0e7      	beq.n	8009ff2 <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 800a022:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a024:	4313      	orrs	r3, r2
 800a026:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a028:	4620      	mov	r0, r4
 800a02a:	f7ff fc79 	bl	8009920 <HAL_SD_ErrorCallback>
 800a02e:	e7e0      	b.n	8009ff2 <HAL_SD_IRQHandler+0x4e>
        HAL_SD_TxCpltCallback(hsd);
 800a030:	4620      	mov	r0, r4
 800a032:	f7ff fc73 	bl	800991c <HAL_SD_TxCpltCallback>
 800a036:	e7ed      	b.n	800a014 <HAL_SD_IRQHandler+0x70>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a038:	f015 0f80 	tst.w	r5, #128	; 0x80
 800a03c:	d0ea      	beq.n	800a014 <HAL_SD_IRQHandler+0x70>
      hsd->Instance->DLEN = 0;
 800a03e:	6822      	ldr	r2, [r4, #0]
 800a040:	2300      	movs	r3, #0
 800a042:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a044:	6822      	ldr	r2, [r4, #0]
 800a046:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a048:	6822      	ldr	r2, [r4, #0]
 800a04a:	6513      	str	r3, [r2, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a04c:	f015 0f22 	tst.w	r5, #34	; 0x22
 800a050:	d10e      	bne.n	800a070 <HAL_SD_IRQHandler+0xcc>
      hsd->State = HAL_SD_STATE_READY;
 800a052:	2301      	movs	r3, #1
 800a054:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a058:	2300      	movs	r3, #0
 800a05a:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a05c:	f015 0f30 	tst.w	r5, #48	; 0x30
 800a060:	d113      	bne.n	800a08a <HAL_SD_IRQHandler+0xe6>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a062:	f015 0f03 	tst.w	r5, #3
 800a066:	d0d5      	beq.n	800a014 <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 800a068:	4620      	mov	r0, r4
 800a06a:	f7ff fc58 	bl	800991e <HAL_SD_RxCpltCallback>
 800a06e:	e7d1      	b.n	800a014 <HAL_SD_IRQHandler+0x70>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a070:	6820      	ldr	r0, [r4, #0]
 800a072:	f002 f90d 	bl	800c290 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800a076:	4603      	mov	r3, r0
 800a078:	2800      	cmp	r0, #0
 800a07a:	d0ea      	beq.n	800a052 <HAL_SD_IRQHandler+0xae>
          hsd->ErrorCode |= errorstate;
 800a07c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a07e:	4313      	orrs	r3, r2
 800a080:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a082:	4620      	mov	r0, r4
 800a084:	f7ff fc4c 	bl	8009920 <HAL_SD_ErrorCallback>
 800a088:	e7e3      	b.n	800a052 <HAL_SD_IRQHandler+0xae>
        HAL_SD_TxCpltCallback(hsd);
 800a08a:	4620      	mov	r0, r4
 800a08c:	f7ff fc46 	bl	800991c <HAL_SD_TxCpltCallback>
 800a090:	e7e7      	b.n	800a062 <HAL_SD_IRQHandler+0xbe>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a094:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800a098:	d002      	beq.n	800a0a0 <HAL_SD_IRQHandler+0xfc>
 800a09a:	f015 0f08 	tst.w	r5, #8
 800a09e:	d162      	bne.n	800a166 <HAL_SD_IRQHandler+0x1c2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a0a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0a2:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 800a0a6:	d06b      	beq.n	800a180 <HAL_SD_IRQHandler+0x1dc>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a0a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0aa:	f012 0f02 	tst.w	r2, #2
 800a0ae:	d003      	beq.n	800a0b8 <HAL_SD_IRQHandler+0x114>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a0b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a0b2:	f042 0202 	orr.w	r2, r2, #2
 800a0b6:	6362      	str	r2, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a0b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0ba:	f012 0f08 	tst.w	r2, #8
 800a0be:	d003      	beq.n	800a0c8 <HAL_SD_IRQHandler+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a0c0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a0c2:	f042 0208 	orr.w	r2, r2, #8
 800a0c6:	6362      	str	r2, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a0c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0ca:	f012 0f20 	tst.w	r2, #32
 800a0ce:	d003      	beq.n	800a0d8 <HAL_SD_IRQHandler+0x134>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a0d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a0d2:	f042 0220 	orr.w	r2, r2, #32
 800a0d6:	6362      	str	r2, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a0d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0da:	f012 0f10 	tst.w	r2, #16
 800a0de:	d003      	beq.n	800a0e8 <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a0e0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a0e2:	f042 0210 	orr.w	r2, r2, #16
 800a0e6:	6362      	str	r2, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a0e8:	4a38      	ldr	r2, [pc, #224]	; (800a1cc <HAL_SD_IRQHandler+0x228>)
 800a0ea:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a0ec:	6822      	ldr	r2, [r4, #0]
 800a0ee:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a0f0:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800a0f4:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a0f6:	6822      	ldr	r2, [r4, #0]
 800a0f8:	68d3      	ldr	r3, [r2, #12]
 800a0fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0fe:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a100:	6822      	ldr	r2, [r4, #0]
 800a102:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a104:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a108:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a10a:	6822      	ldr	r2, [r4, #0]
 800a10c:	68d3      	ldr	r3, [r2, #12]
 800a10e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a112:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a114:	6820      	ldr	r0, [r4, #0]
 800a116:	f002 f8bb 	bl	800c290 <SDMMC_CmdStopTransfer>
 800a11a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a11c:	4303      	orrs	r3, r0
 800a11e:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a120:	6822      	ldr	r2, [r4, #0]
 800a122:	68d3      	ldr	r3, [r2, #12]
 800a124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a128:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a130:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a132:	f015 0f08 	tst.w	r5, #8
 800a136:	d11a      	bne.n	800a16e <HAL_SD_IRQHandler+0x1ca>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a138:	f015 0f80 	tst.w	r5, #128	; 0x80
 800a13c:	f43f af6a 	beq.w	800a014 <HAL_SD_IRQHandler+0x70>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a140:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a142:	2b00      	cmp	r3, #0
 800a144:	f43f af66 	beq.w	800a014 <HAL_SD_IRQHandler+0x70>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a148:	6822      	ldr	r2, [r4, #0]
 800a14a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a14c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a150:	63d3      	str	r3, [r2, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	2200      	movs	r2, #0
 800a156:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a158:	2301      	movs	r3, #1
 800a15a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a15e:	4620      	mov	r0, r4
 800a160:	f7ff fbde 	bl	8009920 <HAL_SD_ErrorCallback>
 800a164:	e756      	b.n	800a014 <HAL_SD_IRQHandler+0x70>
    SD_Write_IT(hsd);
 800a166:	4620      	mov	r0, r4
 800a168:	f7ff fa46 	bl	80095f8 <SD_Write_IT>
 800a16c:	e752      	b.n	800a014 <HAL_SD_IRQHandler+0x70>
      hsd->State = HAL_SD_STATE_READY;
 800a16e:	2301      	movs	r3, #1
 800a170:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a174:	2300      	movs	r3, #0
 800a176:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a178:	4620      	mov	r0, r4
 800a17a:	f7ff fbd1 	bl	8009920 <HAL_SD_ErrorCallback>
 800a17e:	e749      	b.n	800a014 <HAL_SD_IRQHandler+0x70>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a182:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800a186:	f43f af45 	beq.w	800a014 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a18a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a18e:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a190:	6823      	ldr	r3, [r4, #0]
 800a192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a194:	f013 0f04 	tst.w	r3, #4
 800a198:	d10a      	bne.n	800a1b0 <HAL_SD_IRQHandler+0x20c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a19a:	f015 0f20 	tst.w	r5, #32
 800a19e:	d003      	beq.n	800a1a8 <HAL_SD_IRQHandler+0x204>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f7ff fefe 	bl	8009fa2 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800a1a6:	e735      	b.n	800a014 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	f7ff fef8 	bl	8009f9e <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800a1ae:	e731      	b.n	800a014 <HAL_SD_IRQHandler+0x70>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a1b0:	f015 0f20 	tst.w	r5, #32
 800a1b4:	d003      	beq.n	800a1be <HAL_SD_IRQHandler+0x21a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f7ff fef2 	bl	8009fa0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800a1bc:	e72a      	b.n	800a014 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f7ff feec 	bl	8009f9c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a1c4:	e726      	b.n	800a014 <HAL_SD_IRQHandler+0x70>
 800a1c6:	bf00      	nop
 800a1c8:	ffff3ec5 	.word	0xffff3ec5
 800a1cc:	18000f3a 	.word	0x18000f3a

0800a1d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1d0:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1d2:	6a03      	ldr	r3, [r0, #32]
 800a1d4:	f023 0301 	bic.w	r3, r3, #1
 800a1d8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1da:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1dc:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1de:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a1e0:	4a1f      	ldr	r2, [pc, #124]	; (800a260 <TIM_OC1_SetConfig+0x90>)
 800a1e2:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1e4:	680d      	ldr	r5, [r1, #0]
 800a1e6:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a1e8:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a1ec:	688c      	ldr	r4, [r1, #8]
 800a1ee:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a1f0:	4a1c      	ldr	r2, [pc, #112]	; (800a264 <TIM_OC1_SetConfig+0x94>)
 800a1f2:	4c1d      	ldr	r4, [pc, #116]	; (800a268 <TIM_OC1_SetConfig+0x98>)
 800a1f4:	42a0      	cmp	r0, r4
 800a1f6:	bf18      	it	ne
 800a1f8:	4290      	cmpne	r0, r2
 800a1fa:	bf0c      	ite	eq
 800a1fc:	2201      	moveq	r2, #1
 800a1fe:	2200      	movne	r2, #0
 800a200:	d00c      	beq.n	800a21c <TIM_OC1_SetConfig+0x4c>
 800a202:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
 800a206:	42a0      	cmp	r0, r4
 800a208:	bf14      	ite	ne
 800a20a:	2400      	movne	r4, #0
 800a20c:	2401      	moveq	r4, #1
 800a20e:	4f17      	ldr	r7, [pc, #92]	; (800a26c <TIM_OC1_SetConfig+0x9c>)
 800a210:	42b8      	cmp	r0, r7
 800a212:	d003      	beq.n	800a21c <TIM_OC1_SetConfig+0x4c>
 800a214:	b914      	cbnz	r4, 800a21c <TIM_OC1_SetConfig+0x4c>
 800a216:	4c16      	ldr	r4, [pc, #88]	; (800a270 <TIM_OC1_SetConfig+0xa0>)
 800a218:	42a0      	cmp	r0, r4
 800a21a:	d105      	bne.n	800a228 <TIM_OC1_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a21c:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a220:	68cc      	ldr	r4, [r1, #12]
 800a222:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a224:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a228:	b95a      	cbnz	r2, 800a242 <TIM_OC1_SetConfig+0x72>
 800a22a:	4a12      	ldr	r2, [pc, #72]	; (800a274 <TIM_OC1_SetConfig+0xa4>)
 800a22c:	4290      	cmp	r0, r2
 800a22e:	bf14      	ite	ne
 800a230:	2200      	movne	r2, #0
 800a232:	2201      	moveq	r2, #1
 800a234:	4c0d      	ldr	r4, [pc, #52]	; (800a26c <TIM_OC1_SetConfig+0x9c>)
 800a236:	42a0      	cmp	r0, r4
 800a238:	d003      	beq.n	800a242 <TIM_OC1_SetConfig+0x72>
 800a23a:	b912      	cbnz	r2, 800a242 <TIM_OC1_SetConfig+0x72>
 800a23c:	4a0c      	ldr	r2, [pc, #48]	; (800a270 <TIM_OC1_SetConfig+0xa0>)
 800a23e:	4290      	cmp	r0, r2
 800a240:	d107      	bne.n	800a252 <TIM_OC1_SetConfig+0x82>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a242:	f426 7c40 	bic.w	ip, r6, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a246:	694a      	ldr	r2, [r1, #20]
 800a248:	ea42 0c0c 	orr.w	ip, r2, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a24c:	698e      	ldr	r6, [r1, #24]
 800a24e:	ea46 060c 	orr.w	r6, r6, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a252:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a254:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a256:	684a      	ldr	r2, [r1, #4]
 800a258:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a25a:	6203      	str	r3, [r0, #32]
}
 800a25c:	bcf0      	pop	{r4, r5, r6, r7}
 800a25e:	4770      	bx	lr
 800a260:	fffeff8c 	.word	0xfffeff8c
 800a264:	40010000 	.word	0x40010000
 800a268:	40010400 	.word	0x40010400
 800a26c:	40014000 	.word	0x40014000
 800a270:	40014800 	.word	0x40014800
 800a274:	40014400 	.word	0x40014400

0800a278 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a278:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a27a:	6a03      	ldr	r3, [r0, #32]
 800a27c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a280:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a282:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a284:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a286:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a288:	4a1a      	ldr	r2, [pc, #104]	; (800a2f4 <TIM_OC3_SetConfig+0x7c>)
 800a28a:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a28c:	680e      	ldr	r6, [r1, #0]
 800a28e:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a294:	688a      	ldr	r2, [r1, #8]
 800a296:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a29a:	4a17      	ldr	r2, [pc, #92]	; (800a2f8 <TIM_OC3_SetConfig+0x80>)
 800a29c:	4c17      	ldr	r4, [pc, #92]	; (800a2fc <TIM_OC3_SetConfig+0x84>)
 800a29e:	42a0      	cmp	r0, r4
 800a2a0:	bf18      	it	ne
 800a2a2:	4290      	cmpne	r0, r2
 800a2a4:	bf0c      	ite	eq
 800a2a6:	2201      	moveq	r2, #1
 800a2a8:	2200      	movne	r2, #0
 800a2aa:	d106      	bne.n	800a2ba <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a2ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a2b0:	68cc      	ldr	r4, [r1, #12]
 800a2b2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ba:	b95a      	cbnz	r2, 800a2d4 <TIM_OC3_SetConfig+0x5c>
 800a2bc:	4a10      	ldr	r2, [pc, #64]	; (800a300 <TIM_OC3_SetConfig+0x88>)
 800a2be:	4290      	cmp	r0, r2
 800a2c0:	bf14      	ite	ne
 800a2c2:	2200      	movne	r2, #0
 800a2c4:	2201      	moveq	r2, #1
 800a2c6:	4c0f      	ldr	r4, [pc, #60]	; (800a304 <TIM_OC3_SetConfig+0x8c>)
 800a2c8:	42a0      	cmp	r0, r4
 800a2ca:	d003      	beq.n	800a2d4 <TIM_OC3_SetConfig+0x5c>
 800a2cc:	b912      	cbnz	r2, 800a2d4 <TIM_OC3_SetConfig+0x5c>
 800a2ce:	4a0e      	ldr	r2, [pc, #56]	; (800a308 <TIM_OC3_SetConfig+0x90>)
 800a2d0:	4290      	cmp	r0, r2
 800a2d2:	d107      	bne.n	800a2e4 <TIM_OC3_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2d4:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2d8:	694a      	ldr	r2, [r1, #20]
 800a2da:	ea4c 1c02 	orr.w	ip, ip, r2, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a2de:	698d      	ldr	r5, [r1, #24]
 800a2e0:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2e4:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2e6:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a2e8:	684a      	ldr	r2, [r1, #4]
 800a2ea:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2ec:	6203      	str	r3, [r0, #32]
}
 800a2ee:	bc70      	pop	{r4, r5, r6}
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	fffeff8c 	.word	0xfffeff8c
 800a2f8:	40010000 	.word	0x40010000
 800a2fc:	40010400 	.word	0x40010400
 800a300:	40014400 	.word	0x40014400
 800a304:	40014000 	.word	0x40014000
 800a308:	40014800 	.word	0x40014800

0800a30c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a30c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a30e:	6a03      	ldr	r3, [r0, #32]
 800a310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a314:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a316:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a318:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a31a:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a31c:	4a14      	ldr	r2, [pc, #80]	; (800a370 <TIM_OC4_SetConfig+0x64>)
 800a31e:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a320:	680d      	ldr	r5, [r1, #0]
 800a322:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a32a:	688d      	ldr	r5, [r1, #8]
 800a32c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a330:	4e10      	ldr	r6, [pc, #64]	; (800a374 <TIM_OC4_SetConfig+0x68>)
 800a332:	4d11      	ldr	r5, [pc, #68]	; (800a378 <TIM_OC4_SetConfig+0x6c>)
 800a334:	42a8      	cmp	r0, r5
 800a336:	bf18      	it	ne
 800a338:	42b0      	cmpne	r0, r6
 800a33a:	d00d      	beq.n	800a358 <TIM_OC4_SetConfig+0x4c>
 800a33c:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 800a340:	42a8      	cmp	r0, r5
 800a342:	bf14      	ite	ne
 800a344:	2500      	movne	r5, #0
 800a346:	2501      	moveq	r5, #1
 800a348:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 800a34c:	42b0      	cmp	r0, r6
 800a34e:	d003      	beq.n	800a358 <TIM_OC4_SetConfig+0x4c>
 800a350:	b915      	cbnz	r5, 800a358 <TIM_OC4_SetConfig+0x4c>
 800a352:	4d0a      	ldr	r5, [pc, #40]	; (800a37c <TIM_OC4_SetConfig+0x70>)
 800a354:	42a8      	cmp	r0, r5
 800a356:	d104      	bne.n	800a362 <TIM_OC4_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a358:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a35c:	694d      	ldr	r5, [r1, #20]
 800a35e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a362:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a364:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a366:	684a      	ldr	r2, [r1, #4]
 800a368:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a36a:	6203      	str	r3, [r0, #32]
}
 800a36c:	bc70      	pop	{r4, r5, r6}
 800a36e:	4770      	bx	lr
 800a370:	feff8cff 	.word	0xfeff8cff
 800a374:	40010000 	.word	0x40010000
 800a378:	40010400 	.word	0x40010400
 800a37c:	40014800 	.word	0x40014800

0800a380 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a380:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a382:	6a03      	ldr	r3, [r0, #32]
 800a384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a388:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a38a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a38c:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a38e:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a390:	4c14      	ldr	r4, [pc, #80]	; (800a3e4 <TIM_OC5_SetConfig+0x64>)
 800a392:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a394:	680d      	ldr	r5, [r1, #0]
 800a396:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a398:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a39c:	688d      	ldr	r5, [r1, #8]
 800a39e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3a2:	4e11      	ldr	r6, [pc, #68]	; (800a3e8 <TIM_OC5_SetConfig+0x68>)
 800a3a4:	4d11      	ldr	r5, [pc, #68]	; (800a3ec <TIM_OC5_SetConfig+0x6c>)
 800a3a6:	42a8      	cmp	r0, r5
 800a3a8:	bf18      	it	ne
 800a3aa:	42b0      	cmpne	r0, r6
 800a3ac:	d00d      	beq.n	800a3ca <TIM_OC5_SetConfig+0x4a>
 800a3ae:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 800a3b2:	42a8      	cmp	r0, r5
 800a3b4:	bf14      	ite	ne
 800a3b6:	2500      	movne	r5, #0
 800a3b8:	2501      	moveq	r5, #1
 800a3ba:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 800a3be:	42b0      	cmp	r0, r6
 800a3c0:	d003      	beq.n	800a3ca <TIM_OC5_SetConfig+0x4a>
 800a3c2:	b915      	cbnz	r5, 800a3ca <TIM_OC5_SetConfig+0x4a>
 800a3c4:	4d0a      	ldr	r5, [pc, #40]	; (800a3f0 <TIM_OC5_SetConfig+0x70>)
 800a3c6:	42a8      	cmp	r0, r5
 800a3c8:	d104      	bne.n	800a3d4 <TIM_OC5_SetConfig+0x54>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a3ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a3ce:	694d      	ldr	r5, [r1, #20]
 800a3d0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3d4:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a3d6:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a3d8:	684a      	ldr	r2, [r1, #4]
 800a3da:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3dc:	6203      	str	r3, [r0, #32]
}
 800a3de:	bc70      	pop	{r4, r5, r6}
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	fffeff8f 	.word	0xfffeff8f
 800a3e8:	40010000 	.word	0x40010000
 800a3ec:	40010400 	.word	0x40010400
 800a3f0:	40014800 	.word	0x40014800

0800a3f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a3f4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a3f6:	6a03      	ldr	r3, [r0, #32]
 800a3f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a3fc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3fe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a400:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a402:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a404:	4a14      	ldr	r2, [pc, #80]	; (800a458 <TIM_OC6_SetConfig+0x64>)
 800a406:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a408:	680d      	ldr	r5, [r1, #0]
 800a40a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a40e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a412:	688d      	ldr	r5, [r1, #8]
 800a414:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a418:	4e10      	ldr	r6, [pc, #64]	; (800a45c <TIM_OC6_SetConfig+0x68>)
 800a41a:	4d11      	ldr	r5, [pc, #68]	; (800a460 <TIM_OC6_SetConfig+0x6c>)
 800a41c:	42a8      	cmp	r0, r5
 800a41e:	bf18      	it	ne
 800a420:	42b0      	cmpne	r0, r6
 800a422:	d00d      	beq.n	800a440 <TIM_OC6_SetConfig+0x4c>
 800a424:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 800a428:	42a8      	cmp	r0, r5
 800a42a:	bf14      	ite	ne
 800a42c:	2500      	movne	r5, #0
 800a42e:	2501      	moveq	r5, #1
 800a430:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 800a434:	42b0      	cmp	r0, r6
 800a436:	d003      	beq.n	800a440 <TIM_OC6_SetConfig+0x4c>
 800a438:	b915      	cbnz	r5, 800a440 <TIM_OC6_SetConfig+0x4c>
 800a43a:	4d0a      	ldr	r5, [pc, #40]	; (800a464 <TIM_OC6_SetConfig+0x70>)
 800a43c:	42a8      	cmp	r0, r5
 800a43e:	d104      	bne.n	800a44a <TIM_OC6_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a440:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a444:	694d      	ldr	r5, [r1, #20]
 800a446:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a44a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a44c:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a44e:	684a      	ldr	r2, [r1, #4]
 800a450:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a452:	6203      	str	r3, [r0, #32]
}
 800a454:	bc70      	pop	{r4, r5, r6}
 800a456:	4770      	bx	lr
 800a458:	feff8fff 	.word	0xfeff8fff
 800a45c:	40010000 	.word	0x40010000
 800a460:	40010400 	.word	0x40010400
 800a464:	40014800 	.word	0x40014800

0800a468 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a468:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a46a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a46c:	6a04      	ldr	r4, [r0, #32]
 800a46e:	f024 0401 	bic.w	r4, r4, #1
 800a472:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a474:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a476:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a47a:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a47e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800a482:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a484:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800a486:	6203      	str	r3, [r0, #32]
}
 800a488:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a48e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a490:	6a04      	ldr	r4, [r0, #32]
 800a492:	f024 0410 	bic.w	r4, r4, #16
 800a496:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a498:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800a49a:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a49c:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a4a0:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800a4a8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4ac:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800a4ae:	6203      	str	r3, [r0, #32]
}
 800a4b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4b4:	4770      	bx	lr
	...

0800a4b8 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4b8:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4ba:	4b03      	ldr	r3, [pc, #12]	; (800a4c8 <TIM_ITRx_SetConfig+0x10>)
 800a4bc:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4be:	430b      	orrs	r3, r1
 800a4c0:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4c4:	6083      	str	r3, [r0, #8]
}
 800a4c6:	4770      	bx	lr
 800a4c8:	ffcfff8f 	.word	0xffcfff8f

0800a4cc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800a4cc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d13a      	bne.n	800a54c <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 800a4d6:	2302      	movs	r3, #2
 800a4d8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a4dc:	6802      	ldr	r2, [r0, #0]
 800a4de:	68d3      	ldr	r3, [r2, #12]
 800a4e0:	f043 0301 	orr.w	r3, r3, #1
 800a4e4:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4e6:	6803      	ldr	r3, [r0, #0]
 800a4e8:	4a1a      	ldr	r2, [pc, #104]	; (800a554 <HAL_TIM_Base_Start_IT+0x88>)
 800a4ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4ee:	bf18      	it	ne
 800a4f0:	4293      	cmpne	r3, r2
 800a4f2:	d01d      	beq.n	800a530 <HAL_TIM_Base_Start_IT+0x64>
 800a4f4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d019      	beq.n	800a530 <HAL_TIM_Base_Start_IT+0x64>
 800a4fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a500:	4293      	cmp	r3, r2
 800a502:	d015      	beq.n	800a530 <HAL_TIM_Base_Start_IT+0x64>
 800a504:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a508:	4293      	cmp	r3, r2
 800a50a:	d011      	beq.n	800a530 <HAL_TIM_Base_Start_IT+0x64>
 800a50c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a510:	4293      	cmp	r3, r2
 800a512:	d00d      	beq.n	800a530 <HAL_TIM_Base_Start_IT+0x64>
 800a514:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800a518:	4293      	cmp	r3, r2
 800a51a:	d009      	beq.n	800a530 <HAL_TIM_Base_Start_IT+0x64>
 800a51c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800a520:	4293      	cmp	r3, r2
 800a522:	d005      	beq.n	800a530 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	f042 0201 	orr.w	r2, r2, #1
 800a52a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a52c:	2000      	movs	r0, #0
 800a52e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a530:	6899      	ldr	r1, [r3, #8]
 800a532:	4a09      	ldr	r2, [pc, #36]	; (800a558 <HAL_TIM_Base_Start_IT+0x8c>)
 800a534:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a536:	2a06      	cmp	r2, #6
 800a538:	bf18      	it	ne
 800a53a:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800a53e:	d007      	beq.n	800a550 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	f042 0201 	orr.w	r2, r2, #1
 800a546:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a548:	2000      	movs	r0, #0
 800a54a:	4770      	bx	lr
    return HAL_ERROR;
 800a54c:	2001      	movs	r0, #1
 800a54e:	4770      	bx	lr
  return HAL_OK;
 800a550:	2000      	movs	r0, #0
}
 800a552:	4770      	bx	lr
 800a554:	40010000 	.word	0x40010000
 800a558:	00010007 	.word	0x00010007

0800a55c <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a55c:	6802      	ldr	r2, [r0, #0]
 800a55e:	68d3      	ldr	r3, [r2, #12]
 800a560:	f023 0301 	bic.w	r3, r3, #1
 800a564:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800a566:	6803      	ldr	r3, [r0, #0]
 800a568:	6a19      	ldr	r1, [r3, #32]
 800a56a:	f241 1211 	movw	r2, #4369	; 0x1111
 800a56e:	4211      	tst	r1, r2
 800a570:	d108      	bne.n	800a584 <HAL_TIM_Base_Stop_IT+0x28>
 800a572:	6a19      	ldr	r1, [r3, #32]
 800a574:	f240 4244 	movw	r2, #1092	; 0x444
 800a578:	4211      	tst	r1, r2
 800a57a:	d103      	bne.n	800a584 <HAL_TIM_Base_Stop_IT+0x28>
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	f022 0201 	bic.w	r2, r2, #1
 800a582:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800a584:	2301      	movs	r3, #1
 800a586:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800a58a:	2000      	movs	r0, #0
 800a58c:	4770      	bx	lr

0800a58e <HAL_TIM_PWM_MspInit>:
}
 800a58e:	4770      	bx	lr

0800a590 <HAL_TIM_OC_DelayElapsedCallback>:
}
 800a590:	4770      	bx	lr

0800a592 <HAL_TIM_IC_CaptureCallback>:
}
 800a592:	4770      	bx	lr

0800a594 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800a594:	4770      	bx	lr

0800a596 <HAL_TIM_TriggerCallback>:
}
 800a596:	4770      	bx	lr

0800a598 <HAL_TIM_IRQHandler>:
{
 800a598:	b510      	push	{r4, lr}
 800a59a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a59c:	6803      	ldr	r3, [r0, #0]
 800a59e:	691a      	ldr	r2, [r3, #16]
 800a5a0:	f012 0f02 	tst.w	r2, #2
 800a5a4:	d011      	beq.n	800a5ca <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a5a6:	68da      	ldr	r2, [r3, #12]
 800a5a8:	f012 0f02 	tst.w	r2, #2
 800a5ac:	d00d      	beq.n	800a5ca <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a5ae:	f06f 0202 	mvn.w	r2, #2
 800a5b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a5b8:	6803      	ldr	r3, [r0, #0]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	f013 0f03 	tst.w	r3, #3
 800a5c0:	d079      	beq.n	800a6b6 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800a5c2:	f7ff ffe6 	bl	800a592 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	691a      	ldr	r2, [r3, #16]
 800a5ce:	f012 0f04 	tst.w	r2, #4
 800a5d2:	d012      	beq.n	800a5fa <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a5d4:	68da      	ldr	r2, [r3, #12]
 800a5d6:	f012 0f04 	tst.w	r2, #4
 800a5da:	d00e      	beq.n	800a5fa <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a5dc:	f06f 0204 	mvn.w	r2, #4
 800a5e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a5e2:	2302      	movs	r3, #2
 800a5e4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	699b      	ldr	r3, [r3, #24]
 800a5ea:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a5ee:	d068      	beq.n	800a6c2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	f7ff ffce 	bl	800a592 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a5fa:	6823      	ldr	r3, [r4, #0]
 800a5fc:	691a      	ldr	r2, [r3, #16]
 800a5fe:	f012 0f08 	tst.w	r2, #8
 800a602:	d012      	beq.n	800a62a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a604:	68da      	ldr	r2, [r3, #12]
 800a606:	f012 0f08 	tst.w	r2, #8
 800a60a:	d00e      	beq.n	800a62a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a60c:	f06f 0208 	mvn.w	r2, #8
 800a610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a612:	2304      	movs	r3, #4
 800a614:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a616:	6823      	ldr	r3, [r4, #0]
 800a618:	69db      	ldr	r3, [r3, #28]
 800a61a:	f013 0f03 	tst.w	r3, #3
 800a61e:	d057      	beq.n	800a6d0 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800a620:	4620      	mov	r0, r4
 800a622:	f7ff ffb6 	bl	800a592 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a626:	2300      	movs	r3, #0
 800a628:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	691a      	ldr	r2, [r3, #16]
 800a62e:	f012 0f10 	tst.w	r2, #16
 800a632:	d012      	beq.n	800a65a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a634:	68da      	ldr	r2, [r3, #12]
 800a636:	f012 0f10 	tst.w	r2, #16
 800a63a:	d00e      	beq.n	800a65a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a63c:	f06f 0210 	mvn.w	r2, #16
 800a640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a642:	2308      	movs	r3, #8
 800a644:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a646:	6823      	ldr	r3, [r4, #0]
 800a648:	69db      	ldr	r3, [r3, #28]
 800a64a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a64e:	d046      	beq.n	800a6de <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800a650:	4620      	mov	r0, r4
 800a652:	f7ff ff9e 	bl	800a592 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a656:	2300      	movs	r3, #0
 800a658:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a65a:	6823      	ldr	r3, [r4, #0]
 800a65c:	691a      	ldr	r2, [r3, #16]
 800a65e:	f012 0f01 	tst.w	r2, #1
 800a662:	d003      	beq.n	800a66c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a664:	68da      	ldr	r2, [r3, #12]
 800a666:	f012 0f01 	tst.w	r2, #1
 800a66a:	d13f      	bne.n	800a6ec <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a66c:	6823      	ldr	r3, [r4, #0]
 800a66e:	691a      	ldr	r2, [r3, #16]
 800a670:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a674:	d003      	beq.n	800a67e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a676:	68da      	ldr	r2, [r3, #12]
 800a678:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a67c:	d13d      	bne.n	800a6fa <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	691a      	ldr	r2, [r3, #16]
 800a682:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a686:	d003      	beq.n	800a690 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a688:	68da      	ldr	r2, [r3, #12]
 800a68a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a68e:	d13b      	bne.n	800a708 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a690:	6823      	ldr	r3, [r4, #0]
 800a692:	691a      	ldr	r2, [r3, #16]
 800a694:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a698:	d003      	beq.n	800a6a2 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a69a:	68da      	ldr	r2, [r3, #12]
 800a69c:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a6a0:	d139      	bne.n	800a716 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	691a      	ldr	r2, [r3, #16]
 800a6a6:	f012 0f20 	tst.w	r2, #32
 800a6aa:	d003      	beq.n	800a6b4 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a6ac:	68da      	ldr	r2, [r3, #12]
 800a6ae:	f012 0f20 	tst.w	r2, #32
 800a6b2:	d137      	bne.n	800a724 <HAL_TIM_IRQHandler+0x18c>
}
 800a6b4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6b6:	f7ff ff6b 	bl	800a590 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	f7ff ff6a 	bl	800a594 <HAL_TIM_PWM_PulseFinishedCallback>
 800a6c0:	e781      	b.n	800a5c6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	f7ff ff64 	bl	800a590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	f7ff ff63 	bl	800a594 <HAL_TIM_PWM_PulseFinishedCallback>
 800a6ce:	e792      	b.n	800a5f6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f7ff ff5d 	bl	800a590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	f7ff ff5c 	bl	800a594 <HAL_TIM_PWM_PulseFinishedCallback>
 800a6dc:	e7a3      	b.n	800a626 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f7ff ff56 	bl	800a590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f7ff ff55 	bl	800a594 <HAL_TIM_PWM_PulseFinishedCallback>
 800a6ea:	e7b4      	b.n	800a656 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a6ec:	f06f 0201 	mvn.w	r2, #1
 800a6f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f7f6 f9a4 	bl	8000a40 <HAL_TIM_PeriodElapsedCallback>
 800a6f8:	e7b8      	b.n	800a66c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a6fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a6fe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a700:	4620      	mov	r0, r4
 800a702:	f000 fb9e 	bl	800ae42 <HAL_TIMEx_BreakCallback>
 800a706:	e7ba      	b.n	800a67e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a708:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a70c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a70e:	4620      	mov	r0, r4
 800a710:	f000 fb98 	bl	800ae44 <HAL_TIMEx_Break2Callback>
 800a714:	e7bc      	b.n	800a690 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a716:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a71a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a71c:	4620      	mov	r0, r4
 800a71e:	f7ff ff3a 	bl	800a596 <HAL_TIM_TriggerCallback>
 800a722:	e7be      	b.n	800a6a2 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a724:	f06f 0220 	mvn.w	r2, #32
 800a728:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800a72a:	4620      	mov	r0, r4
 800a72c:	f000 fb88 	bl	800ae40 <HAL_TIMEx_CommutCallback>
}
 800a730:	e7c0      	b.n	800a6b4 <HAL_TIM_IRQHandler+0x11c>
	...

0800a734 <TIM_Base_SetConfig>:
{
 800a734:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 800a736:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a738:	4a39      	ldr	r2, [pc, #228]	; (800a820 <TIM_Base_SetConfig+0xec>)
 800a73a:	4290      	cmp	r0, r2
 800a73c:	bf14      	ite	ne
 800a73e:	f04f 0e00 	movne.w	lr, #0
 800a742:	f04f 0e01 	moveq.w	lr, #1
 800a746:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a74a:	bf14      	ite	ne
 800a74c:	4672      	movne	r2, lr
 800a74e:	f04e 0201 	orreq.w	r2, lr, #1
 800a752:	b9aa      	cbnz	r2, 800a780 <TIM_Base_SetConfig+0x4c>
 800a754:	4c33      	ldr	r4, [pc, #204]	; (800a824 <TIM_Base_SetConfig+0xf0>)
 800a756:	42a0      	cmp	r0, r4
 800a758:	bf14      	ite	ne
 800a75a:	2400      	movne	r4, #0
 800a75c:	2401      	moveq	r4, #1
 800a75e:	4d32      	ldr	r5, [pc, #200]	; (800a828 <TIM_Base_SetConfig+0xf4>)
 800a760:	42a8      	cmp	r0, r5
 800a762:	d00d      	beq.n	800a780 <TIM_Base_SetConfig+0x4c>
 800a764:	b964      	cbnz	r4, 800a780 <TIM_Base_SetConfig+0x4c>
 800a766:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800a76a:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 800a76e:	42a0      	cmp	r0, r4
 800a770:	bf14      	ite	ne
 800a772:	2400      	movne	r4, #0
 800a774:	2401      	moveq	r4, #1
 800a776:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800a77a:	42a8      	cmp	r0, r5
 800a77c:	d000      	beq.n	800a780 <TIM_Base_SetConfig+0x4c>
 800a77e:	b11c      	cbz	r4, 800a788 <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a784:	684c      	ldr	r4, [r1, #4]
 800a786:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a788:	bb12      	cbnz	r2, 800a7d0 <TIM_Base_SetConfig+0x9c>
 800a78a:	4a26      	ldr	r2, [pc, #152]	; (800a824 <TIM_Base_SetConfig+0xf0>)
 800a78c:	4290      	cmp	r0, r2
 800a78e:	bf14      	ite	ne
 800a790:	2200      	movne	r2, #0
 800a792:	2201      	moveq	r2, #1
 800a794:	4c24      	ldr	r4, [pc, #144]	; (800a828 <TIM_Base_SetConfig+0xf4>)
 800a796:	42a0      	cmp	r0, r4
 800a798:	d01a      	beq.n	800a7d0 <TIM_Base_SetConfig+0x9c>
 800a79a:	b9ca      	cbnz	r2, 800a7d0 <TIM_Base_SetConfig+0x9c>
 800a79c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a7a0:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800a7a4:	4290      	cmp	r0, r2
 800a7a6:	bf14      	ite	ne
 800a7a8:	2200      	movne	r2, #0
 800a7aa:	2201      	moveq	r2, #1
 800a7ac:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800a7b0:	42a0      	cmp	r0, r4
 800a7b2:	d00d      	beq.n	800a7d0 <TIM_Base_SetConfig+0x9c>
 800a7b4:	b962      	cbnz	r2, 800a7d0 <TIM_Base_SetConfig+0x9c>
 800a7b6:	4a1d      	ldr	r2, [pc, #116]	; (800a82c <TIM_Base_SetConfig+0xf8>)
 800a7b8:	4290      	cmp	r0, r2
 800a7ba:	bf14      	ite	ne
 800a7bc:	2200      	movne	r2, #0
 800a7be:	2201      	moveq	r2, #1
 800a7c0:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 800a7c4:	42a0      	cmp	r0, r4
 800a7c6:	d003      	beq.n	800a7d0 <TIM_Base_SetConfig+0x9c>
 800a7c8:	b912      	cbnz	r2, 800a7d0 <TIM_Base_SetConfig+0x9c>
 800a7ca:	4a19      	ldr	r2, [pc, #100]	; (800a830 <TIM_Base_SetConfig+0xfc>)
 800a7cc:	4290      	cmp	r0, r2
 800a7ce:	d104      	bne.n	800a7da <TIM_Base_SetConfig+0xa6>
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7d0:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7d4:	68cb      	ldr	r3, [r1, #12]
 800a7d6:	ea43 030c 	orr.w	r3, r3, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7de:	694a      	ldr	r2, [r1, #20]
 800a7e0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800a7e2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7e4:	688a      	ldr	r2, [r1, #8]
 800a7e6:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a7e8:	680a      	ldr	r2, [r1, #0]
 800a7ea:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7ec:	4a11      	ldr	r2, [pc, #68]	; (800a834 <TIM_Base_SetConfig+0x100>)
 800a7ee:	4290      	cmp	r0, r2
 800a7f0:	bf14      	ite	ne
 800a7f2:	4673      	movne	r3, lr
 800a7f4:	f04e 0301 	orreq.w	r3, lr, #1
 800a7f8:	b963      	cbnz	r3, 800a814 <TIM_Base_SetConfig+0xe0>
 800a7fa:	4b0c      	ldr	r3, [pc, #48]	; (800a82c <TIM_Base_SetConfig+0xf8>)
 800a7fc:	4298      	cmp	r0, r3
 800a7fe:	bf14      	ite	ne
 800a800:	2300      	movne	r3, #0
 800a802:	2301      	moveq	r3, #1
 800a804:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800a808:	4290      	cmp	r0, r2
 800a80a:	d003      	beq.n	800a814 <TIM_Base_SetConfig+0xe0>
 800a80c:	b913      	cbnz	r3, 800a814 <TIM_Base_SetConfig+0xe0>
 800a80e:	4b08      	ldr	r3, [pc, #32]	; (800a830 <TIM_Base_SetConfig+0xfc>)
 800a810:	4298      	cmp	r0, r3
 800a812:	d101      	bne.n	800a818 <TIM_Base_SetConfig+0xe4>
    TIMx->RCR = Structure->RepetitionCounter;
 800a814:	690b      	ldr	r3, [r1, #16]
 800a816:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800a818:	2301      	movs	r3, #1
 800a81a:	6143      	str	r3, [r0, #20]
}
 800a81c:	bd30      	pop	{r4, r5, pc}
 800a81e:	bf00      	nop
 800a820:	40010000 	.word	0x40010000
 800a824:	40000800 	.word	0x40000800
 800a828:	40000400 	.word	0x40000400
 800a82c:	40014400 	.word	0x40014400
 800a830:	40014800 	.word	0x40014800
 800a834:	40010400 	.word	0x40010400

0800a838 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800a838:	b360      	cbz	r0, 800a894 <HAL_TIM_Base_Init+0x5c>
{
 800a83a:	b510      	push	{r4, lr}
 800a83c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800a83e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a842:	b313      	cbz	r3, 800a88a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800a844:	2302      	movs	r3, #2
 800a846:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a84a:	4621      	mov	r1, r4
 800a84c:	f851 0b04 	ldr.w	r0, [r1], #4
 800a850:	f7ff ff70 	bl	800a734 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a854:	2301      	movs	r3, #1
 800a856:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a85a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800a85e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800a862:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a866:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800a86a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a86e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a872:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a876:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a87a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800a87e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a882:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800a886:	2000      	movs	r0, #0
}
 800a888:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800a88a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800a88e:	f7f8 f965 	bl	8002b5c <HAL_TIM_Base_MspInit>
 800a892:	e7d7      	b.n	800a844 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800a894:	2001      	movs	r0, #1
}
 800a896:	4770      	bx	lr

0800a898 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800a898:	b360      	cbz	r0, 800a8f4 <HAL_TIM_PWM_Init+0x5c>
{
 800a89a:	b510      	push	{r4, lr}
 800a89c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800a89e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a8a2:	b313      	cbz	r3, 800a8ea <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8aa:	4621      	mov	r1, r4
 800a8ac:	f851 0b04 	ldr.w	r0, [r1], #4
 800a8b0:	f7ff ff40 	bl	800a734 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800a8be:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800a8c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a8c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800a8ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8d2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a8d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8da:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800a8de:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a8e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800a8e6:	2000      	movs	r0, #0
}
 800a8e8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800a8ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800a8ee:	f7ff fe4e 	bl	800a58e <HAL_TIM_PWM_MspInit>
 800a8f2:	e7d7      	b.n	800a8a4 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800a8f4:	2001      	movs	r0, #1
}
 800a8f6:	4770      	bx	lr

0800a8f8 <TIM_OC2_SetConfig>:
{
 800a8f8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8fa:	6a03      	ldr	r3, [r0, #32]
 800a8fc:	f023 0310 	bic.w	r3, r3, #16
 800a900:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800a902:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800a904:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800a906:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a908:	4a1a      	ldr	r2, [pc, #104]	; (800a974 <TIM_OC2_SetConfig+0x7c>)
 800a90a:	4022      	ands	r2, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a90c:	680e      	ldr	r6, [r1, #0]
 800a90e:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800a912:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a916:	688a      	ldr	r2, [r1, #8]
 800a918:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a91c:	4a16      	ldr	r2, [pc, #88]	; (800a978 <TIM_OC2_SetConfig+0x80>)
 800a91e:	4c17      	ldr	r4, [pc, #92]	; (800a97c <TIM_OC2_SetConfig+0x84>)
 800a920:	42a0      	cmp	r0, r4
 800a922:	bf18      	it	ne
 800a924:	4290      	cmpne	r0, r2
 800a926:	bf0c      	ite	eq
 800a928:	2201      	moveq	r2, #1
 800a92a:	2200      	movne	r2, #0
 800a92c:	d106      	bne.n	800a93c <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 800a92e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a932:	68cc      	ldr	r4, [r1, #12]
 800a934:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800a938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a93c:	b95a      	cbnz	r2, 800a956 <TIM_OC2_SetConfig+0x5e>
 800a93e:	4a10      	ldr	r2, [pc, #64]	; (800a980 <TIM_OC2_SetConfig+0x88>)
 800a940:	4290      	cmp	r0, r2
 800a942:	bf14      	ite	ne
 800a944:	2200      	movne	r2, #0
 800a946:	2201      	moveq	r2, #1
 800a948:	4c0e      	ldr	r4, [pc, #56]	; (800a984 <TIM_OC2_SetConfig+0x8c>)
 800a94a:	42a0      	cmp	r0, r4
 800a94c:	d003      	beq.n	800a956 <TIM_OC2_SetConfig+0x5e>
 800a94e:	b912      	cbnz	r2, 800a956 <TIM_OC2_SetConfig+0x5e>
 800a950:	4a0d      	ldr	r2, [pc, #52]	; (800a988 <TIM_OC2_SetConfig+0x90>)
 800a952:	4290      	cmp	r0, r2
 800a954:	d107      	bne.n	800a966 <TIM_OC2_SetConfig+0x6e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a956:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a95a:	694a      	ldr	r2, [r1, #20]
 800a95c:	ea4c 0c82 	orr.w	ip, ip, r2, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a960:	698d      	ldr	r5, [r1, #24]
 800a962:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800a966:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800a968:	6186      	str	r6, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800a96a:	684a      	ldr	r2, [r1, #4]
 800a96c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800a96e:	6203      	str	r3, [r0, #32]
}
 800a970:	bc70      	pop	{r4, r5, r6}
 800a972:	4770      	bx	lr
 800a974:	feff8cff 	.word	0xfeff8cff
 800a978:	40010000 	.word	0x40010000
 800a97c:	40010400 	.word	0x40010400
 800a980:	40014400 	.word	0x40014400
 800a984:	40014000 	.word	0x40014000
 800a988:	40014800 	.word	0x40014800

0800a98c <HAL_TIM_PWM_ConfigChannel>:
{
 800a98c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800a98e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a992:	2b01      	cmp	r3, #1
 800a994:	f000 8095 	beq.w	800aac2 <HAL_TIM_PWM_ConfigChannel+0x136>
 800a998:	4604      	mov	r4, r0
 800a99a:	460d      	mov	r5, r1
 800a99c:	2301      	movs	r3, #1
 800a99e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800a9a2:	2a14      	cmp	r2, #20
 800a9a4:	f200 8088 	bhi.w	800aab8 <HAL_TIM_PWM_ConfigChannel+0x12c>
 800a9a8:	e8df f002 	tbb	[pc, r2]
 800a9ac:	8686860b 	.word	0x8686860b
 800a9b0:	8686861f 	.word	0x8686861f
 800a9b4:	86868634 	.word	0x86868634
 800a9b8:	86868648 	.word	0x86868648
 800a9bc:	8686865d 	.word	0x8686865d
 800a9c0:	71          	.byte	0x71
 800a9c1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a9c2:	6800      	ldr	r0, [r0, #0]
 800a9c4:	f7ff fc04 	bl	800a1d0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a9c8:	6822      	ldr	r2, [r4, #0]
 800a9ca:	6993      	ldr	r3, [r2, #24]
 800a9cc:	f043 0308 	orr.w	r3, r3, #8
 800a9d0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a9d2:	6822      	ldr	r2, [r4, #0]
 800a9d4:	6993      	ldr	r3, [r2, #24]
 800a9d6:	f023 0304 	bic.w	r3, r3, #4
 800a9da:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a9dc:	6822      	ldr	r2, [r4, #0]
 800a9de:	6993      	ldr	r3, [r2, #24]
 800a9e0:	6929      	ldr	r1, [r5, #16]
 800a9e2:	430b      	orrs	r3, r1
 800a9e4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800a9e6:	2000      	movs	r0, #0
      break;
 800a9e8:	e067      	b.n	800aaba <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a9ea:	6800      	ldr	r0, [r0, #0]
 800a9ec:	f7ff ff84 	bl	800a8f8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a9f0:	6822      	ldr	r2, [r4, #0]
 800a9f2:	6993      	ldr	r3, [r2, #24]
 800a9f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a9f8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a9fa:	6822      	ldr	r2, [r4, #0]
 800a9fc:	6993      	ldr	r3, [r2, #24]
 800a9fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa02:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa04:	6822      	ldr	r2, [r4, #0]
 800aa06:	6993      	ldr	r3, [r2, #24]
 800aa08:	6929      	ldr	r1, [r5, #16]
 800aa0a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800aa0e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800aa10:	2000      	movs	r0, #0
      break;
 800aa12:	e052      	b.n	800aaba <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa14:	6800      	ldr	r0, [r0, #0]
 800aa16:	f7ff fc2f 	bl	800a278 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa1a:	6822      	ldr	r2, [r4, #0]
 800aa1c:	69d3      	ldr	r3, [r2, #28]
 800aa1e:	f043 0308 	orr.w	r3, r3, #8
 800aa22:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aa24:	6822      	ldr	r2, [r4, #0]
 800aa26:	69d3      	ldr	r3, [r2, #28]
 800aa28:	f023 0304 	bic.w	r3, r3, #4
 800aa2c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aa2e:	6822      	ldr	r2, [r4, #0]
 800aa30:	69d3      	ldr	r3, [r2, #28]
 800aa32:	6929      	ldr	r1, [r5, #16]
 800aa34:	430b      	orrs	r3, r1
 800aa36:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800aa38:	2000      	movs	r0, #0
      break;
 800aa3a:	e03e      	b.n	800aaba <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa3c:	6800      	ldr	r0, [r0, #0]
 800aa3e:	f7ff fc65 	bl	800a30c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aa42:	6822      	ldr	r2, [r4, #0]
 800aa44:	69d3      	ldr	r3, [r2, #28]
 800aa46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aa4a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aa4c:	6822      	ldr	r2, [r4, #0]
 800aa4e:	69d3      	ldr	r3, [r2, #28]
 800aa50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa54:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aa56:	6822      	ldr	r2, [r4, #0]
 800aa58:	69d3      	ldr	r3, [r2, #28]
 800aa5a:	6929      	ldr	r1, [r5, #16]
 800aa5c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800aa60:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800aa62:	2000      	movs	r0, #0
      break;
 800aa64:	e029      	b.n	800aaba <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aa66:	6800      	ldr	r0, [r0, #0]
 800aa68:	f7ff fc8a 	bl	800a380 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aa6c:	6822      	ldr	r2, [r4, #0]
 800aa6e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800aa70:	f043 0308 	orr.w	r3, r3, #8
 800aa74:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aa76:	6822      	ldr	r2, [r4, #0]
 800aa78:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800aa7a:	f023 0304 	bic.w	r3, r3, #4
 800aa7e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aa80:	6822      	ldr	r2, [r4, #0]
 800aa82:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800aa84:	6929      	ldr	r1, [r5, #16]
 800aa86:	430b      	orrs	r3, r1
 800aa88:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800aa8a:	2000      	movs	r0, #0
      break;
 800aa8c:	e015      	b.n	800aaba <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aa8e:	6800      	ldr	r0, [r0, #0]
 800aa90:	f7ff fcb0 	bl	800a3f4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aa94:	6822      	ldr	r2, [r4, #0]
 800aa96:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800aa98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aa9c:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aa9e:	6822      	ldr	r2, [r4, #0]
 800aaa0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800aaa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aaa6:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aaa8:	6822      	ldr	r2, [r4, #0]
 800aaaa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800aaac:	6929      	ldr	r1, [r5, #16]
 800aaae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800aab2:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800aab4:	2000      	movs	r0, #0
      break;
 800aab6:	e000      	b.n	800aaba <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 800aab8:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800aaba:	2300      	movs	r3, #0
 800aabc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800aac0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800aac2:	2002      	movs	r0, #2
 800aac4:	e7fc      	b.n	800aac0 <HAL_TIM_PWM_ConfigChannel+0x134>

0800aac6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aac6:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aac8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aaca:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aace:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800aad2:	430a      	orrs	r2, r1
 800aad4:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aad8:	6082      	str	r2, [r0, #8]
}
 800aada:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800aae0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	f000 808f 	beq.w	800ac08 <HAL_TIM_ConfigClockSource+0x128>
{
 800aaea:	b510      	push	{r4, lr}
 800aaec:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800aaee:	2301      	movs	r3, #1
 800aaf0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800aaf4:	2302      	movs	r3, #2
 800aaf6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800aafa:	6802      	ldr	r2, [r0, #0]
 800aafc:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aafe:	4b43      	ldr	r3, [pc, #268]	; (800ac0c <HAL_TIM_ConfigClockSource+0x12c>)
 800ab00:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800ab02:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800ab04:	680b      	ldr	r3, [r1, #0]
 800ab06:	2b70      	cmp	r3, #112	; 0x70
 800ab08:	d055      	beq.n	800abb6 <HAL_TIM_ConfigClockSource+0xd6>
 800ab0a:	d831      	bhi.n	800ab70 <HAL_TIM_ConfigClockSource+0x90>
 800ab0c:	2b50      	cmp	r3, #80	; 0x50
 800ab0e:	d06c      	beq.n	800abea <HAL_TIM_ConfigClockSource+0x10a>
 800ab10:	d90c      	bls.n	800ab2c <HAL_TIM_ConfigClockSource+0x4c>
 800ab12:	2b60      	cmp	r3, #96	; 0x60
 800ab14:	d12a      	bne.n	800ab6c <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab16:	68ca      	ldr	r2, [r1, #12]
 800ab18:	6849      	ldr	r1, [r1, #4]
 800ab1a:	6820      	ldr	r0, [r4, #0]
 800ab1c:	f7ff fcb7 	bl	800a48e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab20:	2160      	movs	r1, #96	; 0x60
 800ab22:	6820      	ldr	r0, [r4, #0]
 800ab24:	f7ff fcc8 	bl	800a4b8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800ab28:	2000      	movs	r0, #0
      break;
 800ab2a:	e035      	b.n	800ab98 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800ab2c:	2b40      	cmp	r3, #64	; 0x40
 800ab2e:	d10a      	bne.n	800ab46 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab30:	68ca      	ldr	r2, [r1, #12]
 800ab32:	6849      	ldr	r1, [r1, #4]
 800ab34:	6820      	ldr	r0, [r4, #0]
 800ab36:	f7ff fc97 	bl	800a468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab3a:	2140      	movs	r1, #64	; 0x40
 800ab3c:	6820      	ldr	r0, [r4, #0]
 800ab3e:	f7ff fcbb 	bl	800a4b8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800ab42:	2000      	movs	r0, #0
      break;
 800ab44:	e028      	b.n	800ab98 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800ab46:	d85b      	bhi.n	800ac00 <HAL_TIM_ConfigClockSource+0x120>
 800ab48:	2b20      	cmp	r3, #32
 800ab4a:	d007      	beq.n	800ab5c <HAL_TIM_ConfigClockSource+0x7c>
 800ab4c:	d903      	bls.n	800ab56 <HAL_TIM_ConfigClockSource+0x76>
 800ab4e:	2b30      	cmp	r3, #48	; 0x30
 800ab50:	d004      	beq.n	800ab5c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800ab52:	2001      	movs	r0, #1
 800ab54:	e020      	b.n	800ab98 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800ab56:	b10b      	cbz	r3, 800ab5c <HAL_TIM_ConfigClockSource+0x7c>
 800ab58:	2b10      	cmp	r3, #16
 800ab5a:	d105      	bne.n	800ab68 <HAL_TIM_ConfigClockSource+0x88>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	6820      	ldr	r0, [r4, #0]
 800ab60:	f7ff fcaa 	bl	800a4b8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800ab64:	2000      	movs	r0, #0
      break;
 800ab66:	e017      	b.n	800ab98 <HAL_TIM_ConfigClockSource+0xb8>
      status = HAL_ERROR;
 800ab68:	2001      	movs	r0, #1
 800ab6a:	e015      	b.n	800ab98 <HAL_TIM_ConfigClockSource+0xb8>
 800ab6c:	2001      	movs	r0, #1
 800ab6e:	e013      	b.n	800ab98 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800ab70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab74:	d02c      	beq.n	800abd0 <HAL_TIM_ConfigClockSource+0xf0>
 800ab76:	d90b      	bls.n	800ab90 <HAL_TIM_ConfigClockSource+0xb0>
 800ab78:	4a25      	ldr	r2, [pc, #148]	; (800ac10 <HAL_TIM_ConfigClockSource+0x130>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d0ee      	beq.n	800ab5c <HAL_TIM_ConfigClockSource+0x7c>
 800ab7e:	d912      	bls.n	800aba6 <HAL_TIM_ConfigClockSource+0xc6>
 800ab80:	4a24      	ldr	r2, [pc, #144]	; (800ac14 <HAL_TIM_ConfigClockSource+0x134>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d0ea      	beq.n	800ab5c <HAL_TIM_ConfigClockSource+0x7c>
 800ab86:	3210      	adds	r2, #16
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d0e7      	beq.n	800ab5c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800ab8c:	2001      	movs	r0, #1
 800ab8e:	e003      	b.n	800ab98 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800ab90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab94:	d136      	bne.n	800ac04 <HAL_TIM_ConfigClockSource+0x124>
 800ab96:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ab9e:	2300      	movs	r3, #0
 800aba0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800aba4:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800aba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abaa:	d0d7      	beq.n	800ab5c <HAL_TIM_ConfigClockSource+0x7c>
 800abac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800abb0:	d0d4      	beq.n	800ab5c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800abb2:	2001      	movs	r0, #1
 800abb4:	e7f0      	b.n	800ab98 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_ETR_SetConfig(htim->Instance,
 800abb6:	68cb      	ldr	r3, [r1, #12]
 800abb8:	684a      	ldr	r2, [r1, #4]
 800abba:	6889      	ldr	r1, [r1, #8]
 800abbc:	6820      	ldr	r0, [r4, #0]
 800abbe:	f7ff ff82 	bl	800aac6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800abc2:	6822      	ldr	r2, [r4, #0]
 800abc4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800abc6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800abca:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800abcc:	2000      	movs	r0, #0
      break;
 800abce:	e7e3      	b.n	800ab98 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_ETR_SetConfig(htim->Instance,
 800abd0:	68cb      	ldr	r3, [r1, #12]
 800abd2:	684a      	ldr	r2, [r1, #4]
 800abd4:	6889      	ldr	r1, [r1, #8]
 800abd6:	6820      	ldr	r0, [r4, #0]
 800abd8:	f7ff ff75 	bl	800aac6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800abdc:	6822      	ldr	r2, [r4, #0]
 800abde:	6893      	ldr	r3, [r2, #8]
 800abe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800abe4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800abe6:	2000      	movs	r0, #0
      break;
 800abe8:	e7d6      	b.n	800ab98 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abea:	68ca      	ldr	r2, [r1, #12]
 800abec:	6849      	ldr	r1, [r1, #4]
 800abee:	6820      	ldr	r0, [r4, #0]
 800abf0:	f7ff fc3a 	bl	800a468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abf4:	2150      	movs	r1, #80	; 0x50
 800abf6:	6820      	ldr	r0, [r4, #0]
 800abf8:	f7ff fc5e 	bl	800a4b8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800abfc:	2000      	movs	r0, #0
      break;
 800abfe:	e7cb      	b.n	800ab98 <HAL_TIM_ConfigClockSource+0xb8>
      status = HAL_ERROR;
 800ac00:	2001      	movs	r0, #1
 800ac02:	e7c9      	b.n	800ab98 <HAL_TIM_ConfigClockSource+0xb8>
 800ac04:	2001      	movs	r0, #1
 800ac06:	e7c7      	b.n	800ab98 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 800ac08:	2002      	movs	r0, #2
}
 800ac0a:	4770      	bx	lr
 800ac0c:	ffce0088 	.word	0xffce0088
 800ac10:	00100020 	.word	0x00100020
 800ac14:	00100030 	.word	0x00100030

0800ac18 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ac18:	f001 011f 	and.w	r1, r1, #31
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ac22:	6a03      	ldr	r3, [r0, #32]
 800ac24:	ea23 030c 	bic.w	r3, r3, ip
 800ac28:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ac2a:	6a03      	ldr	r3, [r0, #32]
 800ac2c:	fa02 f101 	lsl.w	r1, r2, r1
 800ac30:	430b      	orrs	r3, r1
 800ac32:	6203      	str	r3, [r0, #32]
}
 800ac34:	4770      	bx	lr
	...

0800ac38 <HAL_TIM_PWM_Start>:
{
 800ac38:	b510      	push	{r4, lr}
 800ac3a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ac3c:	4608      	mov	r0, r1
 800ac3e:	2900      	cmp	r1, #0
 800ac40:	d14e      	bne.n	800ace0 <HAL_TIM_PWM_Start+0xa8>
 800ac42:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	bf18      	it	ne
 800ac4c:	2301      	movne	r3, #1
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f040 809b 	bne.w	800ad8a <HAL_TIM_PWM_Start+0x152>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d16e      	bne.n	800ad36 <HAL_TIM_PWM_Start+0xfe>
 800ac58:	2302      	movs	r3, #2
 800ac5a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac5e:	2201      	movs	r2, #1
 800ac60:	4601      	mov	r1, r0
 800ac62:	6820      	ldr	r0, [r4, #0]
 800ac64:	f7ff ffd8 	bl	800ac18 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac68:	6823      	ldr	r3, [r4, #0]
 800ac6a:	494a      	ldr	r1, [pc, #296]	; (800ad94 <HAL_TIM_PWM_Start+0x15c>)
 800ac6c:	4a4a      	ldr	r2, [pc, #296]	; (800ad98 <HAL_TIM_PWM_Start+0x160>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	bf18      	it	ne
 800ac72:	428b      	cmpne	r3, r1
 800ac74:	d00b      	beq.n	800ac8e <HAL_TIM_PWM_Start+0x56>
 800ac76:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d007      	beq.n	800ac8e <HAL_TIM_PWM_Start+0x56>
 800ac7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d003      	beq.n	800ac8e <HAL_TIM_PWM_Start+0x56>
 800ac86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d103      	bne.n	800ac96 <HAL_TIM_PWM_Start+0x5e>
    __HAL_TIM_MOE_ENABLE(htim);
 800ac8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac94:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	4a3e      	ldr	r2, [pc, #248]	; (800ad94 <HAL_TIM_PWM_Start+0x15c>)
 800ac9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac9e:	bf18      	it	ne
 800aca0:	4293      	cmpne	r3, r2
 800aca2:	d064      	beq.n	800ad6e <HAL_TIM_PWM_Start+0x136>
 800aca4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d060      	beq.n	800ad6e <HAL_TIM_PWM_Start+0x136>
 800acac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d05c      	beq.n	800ad6e <HAL_TIM_PWM_Start+0x136>
 800acb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800acb8:	4293      	cmp	r3, r2
 800acba:	d058      	beq.n	800ad6e <HAL_TIM_PWM_Start+0x136>
 800acbc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d054      	beq.n	800ad6e <HAL_TIM_PWM_Start+0x136>
 800acc4:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800acc8:	4293      	cmp	r3, r2
 800acca:	d050      	beq.n	800ad6e <HAL_TIM_PWM_Start+0x136>
 800accc:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d04c      	beq.n	800ad6e <HAL_TIM_PWM_Start+0x136>
    __HAL_TIM_ENABLE(htim);
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	f042 0201 	orr.w	r2, r2, #1
 800acda:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800acdc:	2000      	movs	r0, #0
 800acde:	e055      	b.n	800ad8c <HAL_TIM_PWM_Start+0x154>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ace0:	2904      	cmp	r1, #4
 800ace2:	d00c      	beq.n	800acfe <HAL_TIM_PWM_Start+0xc6>
 800ace4:	2908      	cmp	r1, #8
 800ace6:	d011      	beq.n	800ad0c <HAL_TIM_PWM_Start+0xd4>
 800ace8:	290c      	cmp	r1, #12
 800acea:	d016      	beq.n	800ad1a <HAL_TIM_PWM_Start+0xe2>
 800acec:	2910      	cmp	r1, #16
 800acee:	d01b      	beq.n	800ad28 <HAL_TIM_PWM_Start+0xf0>
 800acf0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	3b01      	subs	r3, #1
 800acf8:	bf18      	it	ne
 800acfa:	2301      	movne	r3, #1
 800acfc:	e7a7      	b.n	800ac4e <HAL_TIM_PWM_Start+0x16>
 800acfe:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	3b01      	subs	r3, #1
 800ad06:	bf18      	it	ne
 800ad08:	2301      	movne	r3, #1
 800ad0a:	e7a0      	b.n	800ac4e <HAL_TIM_PWM_Start+0x16>
 800ad0c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	3b01      	subs	r3, #1
 800ad14:	bf18      	it	ne
 800ad16:	2301      	movne	r3, #1
 800ad18:	e799      	b.n	800ac4e <HAL_TIM_PWM_Start+0x16>
 800ad1a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	3b01      	subs	r3, #1
 800ad22:	bf18      	it	ne
 800ad24:	2301      	movne	r3, #1
 800ad26:	e792      	b.n	800ac4e <HAL_TIM_PWM_Start+0x16>
 800ad28:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	bf18      	it	ne
 800ad32:	2301      	movne	r3, #1
 800ad34:	e78b      	b.n	800ac4e <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad36:	2804      	cmp	r0, #4
 800ad38:	d009      	beq.n	800ad4e <HAL_TIM_PWM_Start+0x116>
 800ad3a:	2808      	cmp	r0, #8
 800ad3c:	d00b      	beq.n	800ad56 <HAL_TIM_PWM_Start+0x11e>
 800ad3e:	280c      	cmp	r0, #12
 800ad40:	d00d      	beq.n	800ad5e <HAL_TIM_PWM_Start+0x126>
 800ad42:	2810      	cmp	r0, #16
 800ad44:	d00f      	beq.n	800ad66 <HAL_TIM_PWM_Start+0x12e>
 800ad46:	2302      	movs	r3, #2
 800ad48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad4c:	e787      	b.n	800ac5e <HAL_TIM_PWM_Start+0x26>
 800ad4e:	2302      	movs	r3, #2
 800ad50:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800ad54:	e783      	b.n	800ac5e <HAL_TIM_PWM_Start+0x26>
 800ad56:	2302      	movs	r3, #2
 800ad58:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800ad5c:	e77f      	b.n	800ac5e <HAL_TIM_PWM_Start+0x26>
 800ad5e:	2302      	movs	r3, #2
 800ad60:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800ad64:	e77b      	b.n	800ac5e <HAL_TIM_PWM_Start+0x26>
 800ad66:	2302      	movs	r3, #2
 800ad68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad6c:	e777      	b.n	800ac5e <HAL_TIM_PWM_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad6e:	6899      	ldr	r1, [r3, #8]
 800ad70:	4a0a      	ldr	r2, [pc, #40]	; (800ad9c <HAL_TIM_PWM_Start+0x164>)
 800ad72:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad74:	2a06      	cmp	r2, #6
 800ad76:	bf18      	it	ne
 800ad78:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800ad7c:	d007      	beq.n	800ad8e <HAL_TIM_PWM_Start+0x156>
      __HAL_TIM_ENABLE(htim);
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	f042 0201 	orr.w	r2, r2, #1
 800ad84:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800ad86:	2000      	movs	r0, #0
 800ad88:	e000      	b.n	800ad8c <HAL_TIM_PWM_Start+0x154>
    return HAL_ERROR;
 800ad8a:	2001      	movs	r0, #1
}
 800ad8c:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800ad8e:	2000      	movs	r0, #0
 800ad90:	e7fc      	b.n	800ad8c <HAL_TIM_PWM_Start+0x154>
 800ad92:	bf00      	nop
 800ad94:	40010000 	.word	0x40010000
 800ad98:	40010400 	.word	0x40010400
 800ad9c:	00010007 	.word	0x00010007

0800ada0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ada0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d045      	beq.n	800ae34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
{
 800ada8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 800adaa:	2301      	movs	r3, #1
 800adac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adb0:	2302      	movs	r3, #2
 800adb2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800adb6:	6803      	ldr	r3, [r0, #0]
 800adb8:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800adba:	689c      	ldr	r4, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800adbc:	4e1e      	ldr	r6, [pc, #120]	; (800ae38 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800adbe:	4d1f      	ldr	r5, [pc, #124]	; (800ae3c <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 800adc0:	42ab      	cmp	r3, r5
 800adc2:	bf18      	it	ne
 800adc4:	42b3      	cmpne	r3, r6
 800adc6:	d103      	bne.n	800add0 <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800adc8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800adcc:	684d      	ldr	r5, [r1, #4]
 800adce:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800add0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800add4:	680d      	ldr	r5, [r1, #0]
 800add6:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800add8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adda:	6803      	ldr	r3, [r0, #0]
 800addc:	4a16      	ldr	r2, [pc, #88]	; (800ae38 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800adde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ade2:	bf18      	it	ne
 800ade4:	4293      	cmpne	r3, r2
 800ade6:	d017      	beq.n	800ae18 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800ade8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800adec:	4293      	cmp	r3, r2
 800adee:	d013      	beq.n	800ae18 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800adf0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d00f      	beq.n	800ae18 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800adf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d00b      	beq.n	800ae18 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800ae00:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d007      	beq.n	800ae18 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800ae08:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d003      	beq.n	800ae18 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800ae10:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d104      	bne.n	800ae22 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae18:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae1c:	688a      	ldr	r2, [r1, #8]
 800ae1e:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae20:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae22:	2301      	movs	r3, #1
 800ae24:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae28:	2300      	movs	r3, #0
 800ae2a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800ae2e:	4618      	mov	r0, r3
}
 800ae30:	bc70      	pop	{r4, r5, r6}
 800ae32:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ae34:	2002      	movs	r0, #2
}
 800ae36:	4770      	bx	lr
 800ae38:	40010000 	.word	0x40010000
 800ae3c:	40010400 	.word	0x40010400

0800ae40 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae40:	4770      	bx	lr

0800ae42 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae42:	4770      	bx	lr

0800ae44 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ae44:	4770      	bx	lr

0800ae46 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ae46:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae48:	e852 3f00 	ldrex	r3, [r2]
 800ae4c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae50:	e842 3100 	strex	r1, r3, [r2]
 800ae54:	2900      	cmp	r1, #0
 800ae56:	d1f6      	bne.n	800ae46 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ae58:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5a:	f102 0308 	add.w	r3, r2, #8
 800ae5e:	e853 3f00 	ldrex	r3, [r3]
 800ae62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae66:	3208      	adds	r2, #8
 800ae68:	e842 3100 	strex	r1, r3, [r2]
 800ae6c:	2900      	cmp	r1, #0
 800ae6e:	d1f3      	bne.n	800ae58 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae70:	2320      	movs	r3, #32
 800ae72:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 800ae76:	4770      	bx	lr

0800ae78 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae78:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7a:	e852 3f00 	ldrex	r3, [r2]
 800ae7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae82:	e842 3100 	strex	r1, r3, [r2]
 800ae86:	2900      	cmp	r1, #0
 800ae88:	d1f6      	bne.n	800ae78 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae8a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae8c:	f102 0308 	add.w	r3, r2, #8
 800ae90:	e853 1f00 	ldrex	r1, [r3]
 800ae94:	4b0d      	ldr	r3, [pc, #52]	; (800aecc <UART_EndRxTransfer+0x54>)
 800ae96:	400b      	ands	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae98:	3208      	adds	r2, #8
 800ae9a:	e842 3100 	strex	r1, r3, [r2]
 800ae9e:	2900      	cmp	r1, #0
 800aea0:	d1f3      	bne.n	800ae8a <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aea2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d006      	beq.n	800aeb6 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aea8:	2320      	movs	r3, #32
 800aeaa:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aeb2:	6703      	str	r3, [r0, #112]	; 0x70
}
 800aeb4:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeb6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb8:	e852 3f00 	ldrex	r3, [r2]
 800aebc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec0:	e842 3100 	strex	r1, r3, [r2]
 800aec4:	2900      	cmp	r1, #0
 800aec6:	d1f6      	bne.n	800aeb6 <UART_EndRxTransfer+0x3e>
 800aec8:	e7ee      	b.n	800aea8 <UART_EndRxTransfer+0x30>
 800aeca:	bf00      	nop
 800aecc:	effffffe 	.word	0xeffffffe

0800aed0 <HAL_UART_Transmit_DMA>:
{
 800aed0:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800aed2:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800aed6:	2a20      	cmp	r2, #32
 800aed8:	d14a      	bne.n	800af70 <HAL_UART_Transmit_DMA+0xa0>
{
 800aeda:	b510      	push	{r4, lr}
 800aedc:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800aede:	2b00      	cmp	r3, #0
 800aee0:	bf18      	it	ne
 800aee2:	2900      	cmpne	r1, #0
 800aee4:	d046      	beq.n	800af74 <HAL_UART_Transmit_DMA+0xa4>
    __HAL_LOCK(huart);
 800aee6:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800aeea:	2a01      	cmp	r2, #1
 800aeec:	d044      	beq.n	800af78 <HAL_UART_Transmit_DMA+0xa8>
 800aeee:	2201      	movs	r2, #1
 800aef0:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 800aef4:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 800aef6:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 800aefa:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aefe:	2200      	movs	r2, #0
 800af00:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af04:	2221      	movs	r2, #33	; 0x21
 800af06:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 800af0a:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800af0c:	b1e2      	cbz	r2, 800af48 <HAL_UART_Transmit_DMA+0x78>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800af0e:	491b      	ldr	r1, [pc, #108]	; (800af7c <HAL_UART_Transmit_DMA+0xac>)
 800af10:	63d1      	str	r1, [r2, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800af12:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800af14:	491a      	ldr	r1, [pc, #104]	; (800af80 <HAL_UART_Transmit_DMA+0xb0>)
 800af16:	6411      	str	r1, [r2, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800af18:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800af1a:	491a      	ldr	r1, [pc, #104]	; (800af84 <HAL_UART_Transmit_DMA+0xb4>)
 800af1c:	64d1      	str	r1, [r2, #76]	; 0x4c
      huart->hdmatx->XferAbortCallback = NULL;
 800af1e:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800af20:	2100      	movs	r1, #0
 800af22:	6511      	str	r1, [r2, #80]	; 0x50
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800af24:	6802      	ldr	r2, [r0, #0]
 800af26:	3228      	adds	r2, #40	; 0x28
 800af28:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800af2a:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800af2c:	f7f9 fe68 	bl	8004c00 <HAL_DMA_Start_IT>
 800af30:	b150      	cbz	r0, 800af48 <HAL_UART_Transmit_DMA+0x78>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800af32:	2310      	movs	r3, #16
 800af34:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 800af38:	2300      	movs	r3, #0
 800af3a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 800af3e:	2320      	movs	r3, #32
 800af40:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 800af44:	2001      	movs	r0, #1
 800af46:	e012      	b.n	800af6e <HAL_UART_Transmit_DMA+0x9e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800af48:	6823      	ldr	r3, [r4, #0]
 800af4a:	2240      	movs	r2, #64	; 0x40
 800af4c:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800af4e:	2300      	movs	r3, #0
 800af50:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af54:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af56:	f102 0308 	add.w	r3, r2, #8
 800af5a:	e853 3f00 	ldrex	r3, [r3]
 800af5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af62:	3208      	adds	r2, #8
 800af64:	e842 3100 	strex	r1, r3, [r2]
 800af68:	2900      	cmp	r1, #0
 800af6a:	d1f3      	bne.n	800af54 <HAL_UART_Transmit_DMA+0x84>
    return HAL_OK;
 800af6c:	2000      	movs	r0, #0
}
 800af6e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800af70:	2002      	movs	r0, #2
}
 800af72:	4770      	bx	lr
      return HAL_ERROR;
 800af74:	2001      	movs	r0, #1
 800af76:	e7fa      	b.n	800af6e <HAL_UART_Transmit_DMA+0x9e>
    __HAL_LOCK(huart);
 800af78:	2002      	movs	r0, #2
 800af7a:	e7f8      	b.n	800af6e <HAL_UART_Transmit_DMA+0x9e>
 800af7c:	0800af8b 	.word	0x0800af8b
 800af80:	0800aff7 	.word	0x0800aff7
 800af84:	0800b005 	.word	0x0800b005

0800af88 <HAL_UART_TxCpltCallback>:
}
 800af88:	4770      	bx	lr

0800af8a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af8a:	b508      	push	{r3, lr}
 800af8c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af8e:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800af90:	69db      	ldr	r3, [r3, #28]
 800af92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af96:	d018      	beq.n	800afca <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 800af98:	2300      	movs	r3, #0
 800af9a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af9e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa0:	f102 0308 	add.w	r3, r2, #8
 800afa4:	e853 3f00 	ldrex	r3, [r3]
 800afa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afac:	3208      	adds	r2, #8
 800afae:	e842 3100 	strex	r1, r3, [r2]
 800afb2:	2900      	cmp	r1, #0
 800afb4:	d1f3      	bne.n	800af9e <UART_DMATransmitCplt+0x14>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afb6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb8:	e852 3f00 	ldrex	r3, [r2]
 800afbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc0:	e842 3100 	strex	r1, r3, [r2]
 800afc4:	2900      	cmp	r1, #0
 800afc6:	d1f6      	bne.n	800afb6 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800afc8:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800afca:	f7ff ffdd 	bl	800af88 <HAL_UART_TxCpltCallback>
}
 800afce:	e7fb      	b.n	800afc8 <UART_DMATransmitCplt+0x3e>

0800afd0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800afd0:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afd2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd4:	e852 3f00 	ldrex	r3, [r2]
 800afd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afdc:	e842 3100 	strex	r1, r3, [r2]
 800afe0:	2900      	cmp	r1, #0
 800afe2:	d1f6      	bne.n	800afd2 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afe4:	2320      	movs	r3, #32
 800afe6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800afea:	2300      	movs	r3, #0
 800afec:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800afee:	f7ff ffcb 	bl	800af88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aff2:	bd08      	pop	{r3, pc}

0800aff4 <HAL_UART_TxHalfCpltCallback>:
}
 800aff4:	4770      	bx	lr

0800aff6 <UART_DMATxHalfCplt>:
{
 800aff6:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800aff8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800affa:	f7ff fffb 	bl	800aff4 <HAL_UART_TxHalfCpltCallback>
}
 800affe:	bd08      	pop	{r3, pc}

0800b000 <HAL_UART_RxCpltCallback>:
}
 800b000:	4770      	bx	lr

0800b002 <HAL_UART_RxHalfCpltCallback>:
}
 800b002:	4770      	bx	lr

0800b004 <UART_DMAError>:
{
 800b004:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b006:	6b84      	ldr	r4, [r0, #56]	; 0x38
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b008:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b00c:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b010:	6823      	ldr	r3, [r4, #0]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b018:	d001      	beq.n	800b01e <UART_DMAError+0x1a>
 800b01a:	2a21      	cmp	r2, #33	; 0x21
 800b01c:	d010      	beq.n	800b040 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b01e:	6823      	ldr	r3, [r4, #0]
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b026:	d001      	beq.n	800b02c <UART_DMAError+0x28>
 800b028:	2d22      	cmp	r5, #34	; 0x22
 800b02a:	d010      	beq.n	800b04e <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b02c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b030:	f043 0310 	orr.w	r3, r3, #16
 800b034:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 800b038:	4620      	mov	r0, r4
 800b03a:	f7f5 fcdd 	bl	80009f8 <HAL_UART_ErrorCallback>
}
 800b03e:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800b040:	2300      	movs	r3, #0
 800b042:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b046:	4620      	mov	r0, r4
 800b048:	f7ff fefd 	bl	800ae46 <UART_EndTxTransfer>
 800b04c:	e7e7      	b.n	800b01e <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 800b04e:	2300      	movs	r3, #0
 800b050:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b054:	4620      	mov	r0, r4
 800b056:	f7ff ff0f 	bl	800ae78 <UART_EndRxTransfer>
 800b05a:	e7e7      	b.n	800b02c <UART_DMAError+0x28>

0800b05c <UART_DMAAbortOnError>:
{
 800b05c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b05e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800b060:	2300      	movs	r3, #0
 800b062:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b066:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 800b06a:	f7f5 fcc5 	bl	80009f8 <HAL_UART_ErrorCallback>
}
 800b06e:	bd08      	pop	{r3, pc}

0800b070 <HAL_UART_IRQHandler>:
{
 800b070:	b570      	push	{r4, r5, r6, lr}
 800b072:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b074:	6801      	ldr	r1, [r0, #0]
 800b076:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b078:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b07a:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b07c:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 800b080:	401a      	ands	r2, r3
 800b082:	d108      	bne.n	800b096 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b084:	f013 0f20 	tst.w	r3, #32
 800b088:	d005      	beq.n	800b096 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b08a:	f010 0f20 	tst.w	r0, #32
 800b08e:	d134      	bne.n	800b0fa <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b090:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 800b094:	d131      	bne.n	800b0fa <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 800b096:	b12a      	cbz	r2, 800b0a4 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b098:	4a89      	ldr	r2, [pc, #548]	; (800b2c0 <HAL_UART_IRQHandler+0x250>)
 800b09a:	402a      	ands	r2, r5
 800b09c:	d133      	bne.n	800b106 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b09e:	4e89      	ldr	r6, [pc, #548]	; (800b2c4 <HAL_UART_IRQHandler+0x254>)
 800b0a0:	4230      	tst	r0, r6
 800b0a2:	d130      	bne.n	800b106 <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0a4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800b0a6:	2a01      	cmp	r2, #1
 800b0a8:	f000 80c3 	beq.w	800b232 <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b0ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800b0b0:	d003      	beq.n	800b0ba <HAL_UART_IRQHandler+0x4a>
 800b0b2:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800b0b6:	f040 8192 	bne.w	800b3de <HAL_UART_IRQHandler+0x36e>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b0ba:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b0be:	d007      	beq.n	800b0d0 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b0c0:	f010 0f80 	tst.w	r0, #128	; 0x80
 800b0c4:	f040 8192 	bne.w	800b3ec <HAL_UART_IRQHandler+0x37c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b0c8:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 800b0cc:	f040 818e 	bne.w	800b3ec <HAL_UART_IRQHandler+0x37c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b0d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b0d4:	d003      	beq.n	800b0de <HAL_UART_IRQHandler+0x6e>
 800b0d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0da:	f040 818e 	bne.w	800b3fa <HAL_UART_IRQHandler+0x38a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b0de:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800b0e2:	d003      	beq.n	800b0ec <HAL_UART_IRQHandler+0x7c>
 800b0e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0e8:	f040 818b 	bne.w	800b402 <HAL_UART_IRQHandler+0x392>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b0ec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800b0f0:	d002      	beq.n	800b0f8 <HAL_UART_IRQHandler+0x88>
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	f2c0 8189 	blt.w	800b40a <HAL_UART_IRQHandler+0x39a>
}
 800b0f8:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 800b0fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d0fb      	beq.n	800b0f8 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 800b100:	4620      	mov	r0, r4
 800b102:	4798      	blx	r3
      return;
 800b104:	e7f8      	b.n	800b0f8 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b106:	f013 0f01 	tst.w	r3, #1
 800b10a:	d009      	beq.n	800b120 <HAL_UART_IRQHandler+0xb0>
 800b10c:	f410 7f80 	tst.w	r0, #256	; 0x100
 800b110:	d006      	beq.n	800b120 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b112:	2601      	movs	r6, #1
 800b114:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b116:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800b11a:	4331      	orrs	r1, r6
 800b11c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b120:	f013 0f02 	tst.w	r3, #2
 800b124:	d00b      	beq.n	800b13e <HAL_UART_IRQHandler+0xce>
 800b126:	f015 0f01 	tst.w	r5, #1
 800b12a:	d008      	beq.n	800b13e <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b12c:	6821      	ldr	r1, [r4, #0]
 800b12e:	2602      	movs	r6, #2
 800b130:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b132:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800b136:	f041 0104 	orr.w	r1, r1, #4
 800b13a:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b13e:	f013 0f04 	tst.w	r3, #4
 800b142:	d00b      	beq.n	800b15c <HAL_UART_IRQHandler+0xec>
 800b144:	f015 0f01 	tst.w	r5, #1
 800b148:	d008      	beq.n	800b15c <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b14a:	6821      	ldr	r1, [r4, #0]
 800b14c:	2604      	movs	r6, #4
 800b14e:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b150:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800b154:	f041 0102 	orr.w	r1, r1, #2
 800b158:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b15c:	f013 0f08 	tst.w	r3, #8
 800b160:	d00b      	beq.n	800b17a <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b162:	f010 0f20 	tst.w	r0, #32
 800b166:	d100      	bne.n	800b16a <HAL_UART_IRQHandler+0xfa>
 800b168:	b13a      	cbz	r2, 800b17a <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b16a:	6822      	ldr	r2, [r4, #0]
 800b16c:	2108      	movs	r1, #8
 800b16e:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b170:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800b174:	430a      	orrs	r2, r1
 800b176:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b17a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800b17e:	d00c      	beq.n	800b19a <HAL_UART_IRQHandler+0x12a>
 800b180:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800b184:	d009      	beq.n	800b19a <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b186:	6822      	ldr	r2, [r4, #0]
 800b188:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b18c:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b18e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800b192:	f042 0220 	orr.w	r2, r2, #32
 800b196:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b19a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800b19e:	2a00      	cmp	r2, #0
 800b1a0:	d0aa      	beq.n	800b0f8 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b1a2:	f013 0f20 	tst.w	r3, #32
 800b1a6:	d009      	beq.n	800b1bc <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b1a8:	f010 0f20 	tst.w	r0, #32
 800b1ac:	d102      	bne.n	800b1b4 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b1ae:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 800b1b2:	d003      	beq.n	800b1bc <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 800b1b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b1b6:	b10b      	cbz	r3, 800b1bc <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800b1bc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b1c0:	6823      	ldr	r3, [r4, #0]
 800b1c2:	689b      	ldr	r3, [r3, #8]
 800b1c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b1c8:	d102      	bne.n	800b1d0 <HAL_UART_IRQHandler+0x160>
 800b1ca:	f012 0f28 	tst.w	r2, #40	; 0x28
 800b1ce:	d029      	beq.n	800b224 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	f7ff fe51 	bl	800ae78 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1d6:	6823      	ldr	r3, [r4, #0]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b1de:	d01d      	beq.n	800b21c <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1e0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e2:	f102 0308 	add.w	r3, r2, #8
 800b1e6:	e853 3f00 	ldrex	r3, [r3]
 800b1ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ee:	3208      	adds	r2, #8
 800b1f0:	e842 3100 	strex	r1, r3, [r2]
 800b1f4:	2900      	cmp	r1, #0
 800b1f6:	d1f3      	bne.n	800b1e0 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 800b1f8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b1fa:	b15b      	cbz	r3, 800b214 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b1fc:	4a32      	ldr	r2, [pc, #200]	; (800b2c8 <HAL_UART_IRQHandler+0x258>)
 800b1fe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b200:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800b202:	f7f9 ffe9 	bl	80051d8 <HAL_DMA_Abort_IT>
 800b206:	2800      	cmp	r0, #0
 800b208:	f43f af76 	beq.w	800b0f8 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b20c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800b20e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b210:	4798      	blx	r3
 800b212:	e771      	b.n	800b0f8 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 800b214:	4620      	mov	r0, r4
 800b216:	f7f5 fbef 	bl	80009f8 <HAL_UART_ErrorCallback>
 800b21a:	e76d      	b.n	800b0f8 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 800b21c:	4620      	mov	r0, r4
 800b21e:	f7f5 fbeb 	bl	80009f8 <HAL_UART_ErrorCallback>
 800b222:	e769      	b.n	800b0f8 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 800b224:	4620      	mov	r0, r4
 800b226:	f7f5 fbe7 	bl	80009f8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b22a:	2300      	movs	r3, #0
 800b22c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 800b230:	e762      	b.n	800b0f8 <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b232:	f013 0f10 	tst.w	r3, #16
 800b236:	f43f af39 	beq.w	800b0ac <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b23a:	f010 0f10 	tst.w	r0, #16
 800b23e:	f43f af35 	beq.w	800b0ac <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b242:	2310      	movs	r3, #16
 800b244:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b246:	6823      	ldr	r3, [r4, #0]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b24e:	f000 808e 	beq.w	800b36e <HAL_UART_IRQHandler+0x2fe>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b252:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800b254:	6813      	ldr	r3, [r2, #0]
 800b256:	481d      	ldr	r0, [pc, #116]	; (800b2cc <HAL_UART_IRQHandler+0x25c>)
 800b258:	491d      	ldr	r1, [pc, #116]	; (800b2d0 <HAL_UART_IRQHandler+0x260>)
 800b25a:	428b      	cmp	r3, r1
 800b25c:	bf18      	it	ne
 800b25e:	4283      	cmpne	r3, r0
 800b260:	d038      	beq.n	800b2d4 <HAL_UART_IRQHandler+0x264>
 800b262:	3118      	adds	r1, #24
 800b264:	428b      	cmp	r3, r1
 800b266:	d035      	beq.n	800b2d4 <HAL_UART_IRQHandler+0x264>
 800b268:	3118      	adds	r1, #24
 800b26a:	428b      	cmp	r3, r1
 800b26c:	d032      	beq.n	800b2d4 <HAL_UART_IRQHandler+0x264>
 800b26e:	3118      	adds	r1, #24
 800b270:	428b      	cmp	r3, r1
 800b272:	d02f      	beq.n	800b2d4 <HAL_UART_IRQHandler+0x264>
 800b274:	3118      	adds	r1, #24
 800b276:	428b      	cmp	r3, r1
 800b278:	d02c      	beq.n	800b2d4 <HAL_UART_IRQHandler+0x264>
 800b27a:	3118      	adds	r1, #24
 800b27c:	428b      	cmp	r3, r1
 800b27e:	d029      	beq.n	800b2d4 <HAL_UART_IRQHandler+0x264>
 800b280:	3118      	adds	r1, #24
 800b282:	428b      	cmp	r3, r1
 800b284:	d026      	beq.n	800b2d4 <HAL_UART_IRQHandler+0x264>
 800b286:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800b28a:	428b      	cmp	r3, r1
 800b28c:	d022      	beq.n	800b2d4 <HAL_UART_IRQHandler+0x264>
 800b28e:	3118      	adds	r1, #24
 800b290:	428b      	cmp	r3, r1
 800b292:	d01f      	beq.n	800b2d4 <HAL_UART_IRQHandler+0x264>
 800b294:	3118      	adds	r1, #24
 800b296:	428b      	cmp	r3, r1
 800b298:	d01c      	beq.n	800b2d4 <HAL_UART_IRQHandler+0x264>
 800b29a:	3118      	adds	r1, #24
 800b29c:	428b      	cmp	r3, r1
 800b29e:	d019      	beq.n	800b2d4 <HAL_UART_IRQHandler+0x264>
 800b2a0:	3118      	adds	r1, #24
 800b2a2:	428b      	cmp	r3, r1
 800b2a4:	d016      	beq.n	800b2d4 <HAL_UART_IRQHandler+0x264>
 800b2a6:	3118      	adds	r1, #24
 800b2a8:	428b      	cmp	r3, r1
 800b2aa:	d013      	beq.n	800b2d4 <HAL_UART_IRQHandler+0x264>
 800b2ac:	3118      	adds	r1, #24
 800b2ae:	428b      	cmp	r3, r1
 800b2b0:	d010      	beq.n	800b2d4 <HAL_UART_IRQHandler+0x264>
 800b2b2:	3118      	adds	r1, #24
 800b2b4:	428b      	cmp	r3, r1
 800b2b6:	d00d      	beq.n	800b2d4 <HAL_UART_IRQHandler+0x264>
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	e00c      	b.n	800b2d8 <HAL_UART_IRQHandler+0x268>
 800b2be:	bf00      	nop
 800b2c0:	10000001 	.word	0x10000001
 800b2c4:	04000120 	.word	0x04000120
 800b2c8:	0800b05d 	.word	0x0800b05d
 800b2cc:	40020010 	.word	0x40020010
 800b2d0:	40020028 	.word	0x40020028
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	f43f af0d 	beq.w	800b0f8 <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b2de:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800b2e2:	4299      	cmp	r1, r3
 800b2e4:	f67f af08 	bls.w	800b0f8 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 800b2e8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b2ec:	69d3      	ldr	r3, [r2, #28]
 800b2ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2f2:	d031      	beq.n	800b358 <HAL_UART_IRQHandler+0x2e8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2f4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f6:	e852 3f00 	ldrex	r3, [r2]
 800b2fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fe:	e842 3100 	strex	r1, r3, [r2]
 800b302:	2900      	cmp	r1, #0
 800b304:	d1f6      	bne.n	800b2f4 <HAL_UART_IRQHandler+0x284>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b306:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b308:	f102 0308 	add.w	r3, r2, #8
 800b30c:	e853 3f00 	ldrex	r3, [r3]
 800b310:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b314:	3208      	adds	r2, #8
 800b316:	e842 3100 	strex	r1, r3, [r2]
 800b31a:	2900      	cmp	r1, #0
 800b31c:	d1f3      	bne.n	800b306 <HAL_UART_IRQHandler+0x296>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b31e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b320:	f102 0308 	add.w	r3, r2, #8
 800b324:	e853 3f00 	ldrex	r3, [r3]
 800b328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b32c:	3208      	adds	r2, #8
 800b32e:	e842 3100 	strex	r1, r3, [r2]
 800b332:	2900      	cmp	r1, #0
 800b334:	d1f3      	bne.n	800b31e <HAL_UART_IRQHandler+0x2ae>
          huart->RxState = HAL_UART_STATE_READY;
 800b336:	2320      	movs	r3, #32
 800b338:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b33c:	2300      	movs	r3, #0
 800b33e:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b340:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b342:	e852 3f00 	ldrex	r3, [r2]
 800b346:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b34a:	e842 3100 	strex	r1, r3, [r2]
 800b34e:	2900      	cmp	r1, #0
 800b350:	d1f6      	bne.n	800b340 <HAL_UART_IRQHandler+0x2d0>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b352:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800b354:	f7f9 fda0 	bl	8004e98 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b358:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800b35c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800b360:	b29b      	uxth	r3, r3
 800b362:	1ac9      	subs	r1, r1, r3
 800b364:	b289      	uxth	r1, r1
 800b366:	4620      	mov	r0, r4
 800b368:	f7f6 fd22 	bl	8001db0 <HAL_UARTEx_RxEventCallback>
      return;
 800b36c:	e6c4      	b.n	800b0f8 <HAL_UART_IRQHandler+0x88>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b36e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800b372:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800b376:	b29b      	uxth	r3, r3
 800b378:	1ac9      	subs	r1, r1, r3
 800b37a:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800b37c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800b380:	b29b      	uxth	r3, r3
 800b382:	2b00      	cmp	r3, #0
 800b384:	f43f aeb8 	beq.w	800b0f8 <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 800b388:	2900      	cmp	r1, #0
 800b38a:	f43f aeb5 	beq.w	800b0f8 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b38e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b390:	e852 3f00 	ldrex	r3, [r2]
 800b394:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b398:	e842 3000 	strex	r0, r3, [r2]
 800b39c:	2800      	cmp	r0, #0
 800b39e:	d1f6      	bne.n	800b38e <HAL_UART_IRQHandler+0x31e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3a0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a2:	f102 0308 	add.w	r3, r2, #8
 800b3a6:	e853 0f00 	ldrex	r0, [r3]
 800b3aa:	4b1a      	ldr	r3, [pc, #104]	; (800b414 <HAL_UART_IRQHandler+0x3a4>)
 800b3ac:	4003      	ands	r3, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ae:	3208      	adds	r2, #8
 800b3b0:	e842 3000 	strex	r0, r3, [r2]
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	d1f3      	bne.n	800b3a0 <HAL_UART_IRQHandler+0x330>
        huart->RxState = HAL_UART_STATE_READY;
 800b3b8:	2320      	movs	r3, #32
 800b3ba:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800b3c2:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3c4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c6:	e852 3f00 	ldrex	r3, [r2]
 800b3ca:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ce:	e842 3000 	strex	r0, r3, [r2]
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	d1f6      	bne.n	800b3c4 <HAL_UART_IRQHandler+0x354>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f7f6 fcea 	bl	8001db0 <HAL_UARTEx_RxEventCallback>
      return;
 800b3dc:	e68c      	b.n	800b0f8 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b3de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b3e2:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	f000 fd69 	bl	800bebc <HAL_UARTEx_WakeupCallback>
    return;
 800b3ea:	e685      	b.n	800b0f8 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 800b3ec:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f43f ae82 	beq.w	800b0f8 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	4798      	blx	r3
    return;
 800b3f8:	e67e      	b.n	800b0f8 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f7ff fde8 	bl	800afd0 <UART_EndTransmit_IT>
    return;
 800b400:	e67a      	b.n	800b0f8 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b402:	4620      	mov	r0, r4
 800b404:	f000 fd5c 	bl	800bec0 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800b408:	e676      	b.n	800b0f8 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b40a:	4620      	mov	r0, r4
 800b40c:	f000 fd57 	bl	800bebe <HAL_UARTEx_RxFifoFullCallback>
    return;
 800b410:	e672      	b.n	800b0f8 <HAL_UART_IRQHandler+0x88>
 800b412:	bf00      	nop
 800b414:	effffffe 	.word	0xeffffffe

0800b418 <UART_DMARxHalfCplt>:
{
 800b418:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b41a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b41c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d002      	beq.n	800b428 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800b422:	f7ff fdee 	bl	800b002 <HAL_UART_RxHalfCpltCallback>
}
 800b426:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b428:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800b42c:	0849      	lsrs	r1, r1, #1
 800b42e:	f7f6 fcbf 	bl	8001db0 <HAL_UARTEx_RxEventCallback>
 800b432:	e7f8      	b.n	800b426 <UART_DMARxHalfCplt+0xe>

0800b434 <UART_DMAReceiveCplt>:
{
 800b434:	b508      	push	{r3, lr}
 800b436:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b438:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b43a:	69db      	ldr	r3, [r3, #28]
 800b43c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b440:	d029      	beq.n	800b496 <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 800b442:	2300      	movs	r3, #0
 800b444:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b448:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b44a:	e852 3f00 	ldrex	r3, [r2]
 800b44e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b452:	e842 3100 	strex	r1, r3, [r2]
 800b456:	2900      	cmp	r1, #0
 800b458:	d1f6      	bne.n	800b448 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b45a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45c:	f102 0308 	add.w	r3, r2, #8
 800b460:	e853 3f00 	ldrex	r3, [r3]
 800b464:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b468:	3208      	adds	r2, #8
 800b46a:	e842 3100 	strex	r1, r3, [r2]
 800b46e:	2900      	cmp	r1, #0
 800b470:	d1f3      	bne.n	800b45a <UART_DMAReceiveCplt+0x26>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b472:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b474:	f102 0308 	add.w	r3, r2, #8
 800b478:	e853 3f00 	ldrex	r3, [r3]
 800b47c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b480:	3208      	adds	r2, #8
 800b482:	e842 3100 	strex	r1, r3, [r2]
 800b486:	2900      	cmp	r1, #0
 800b488:	d1f3      	bne.n	800b472 <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 800b48a:	2320      	movs	r3, #32
 800b48c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b490:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800b492:	2b01      	cmp	r3, #1
 800b494:	d005      	beq.n	800b4a2 <UART_DMAReceiveCplt+0x6e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b496:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d00c      	beq.n	800b4b6 <UART_DMAReceiveCplt+0x82>
    HAL_UART_RxCpltCallback(huart);
 800b49c:	f7ff fdb0 	bl	800b000 <HAL_UART_RxCpltCallback>
}
 800b4a0:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4a2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a4:	e852 3f00 	ldrex	r3, [r2]
 800b4a8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ac:	e842 3100 	strex	r1, r3, [r2]
 800b4b0:	2900      	cmp	r1, #0
 800b4b2:	d1f6      	bne.n	800b4a2 <UART_DMAReceiveCplt+0x6e>
 800b4b4:	e7ef      	b.n	800b496 <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4b6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800b4ba:	f7f6 fc79 	bl	8001db0 <HAL_UARTEx_RxEventCallback>
 800b4be:	e7ef      	b.n	800b4a0 <UART_DMAReceiveCplt+0x6c>

0800b4c0 <UART_SetConfig>:
{
 800b4c0:	b570      	push	{r4, r5, r6, lr}
 800b4c2:	b086      	sub	sp, #24
 800b4c4:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800b4c6:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b4c8:	6883      	ldr	r3, [r0, #8]
 800b4ca:	6902      	ldr	r2, [r0, #16]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	6942      	ldr	r2, [r0, #20]
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	69c2      	ldr	r2, [r0, #28]
 800b4d4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b4d6:	6808      	ldr	r0, [r1, #0]
 800b4d8:	4a88      	ldr	r2, [pc, #544]	; (800b6fc <UART_SetConfig+0x23c>)
 800b4da:	4002      	ands	r2, r0
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4e0:	6822      	ldr	r2, [r4, #0]
 800b4e2:	6853      	ldr	r3, [r2, #4]
 800b4e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b4e8:	68e1      	ldr	r1, [r4, #12]
 800b4ea:	430b      	orrs	r3, r1
 800b4ec:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b4ee:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b4f0:	6822      	ldr	r2, [r4, #0]
 800b4f2:	4b83      	ldr	r3, [pc, #524]	; (800b700 <UART_SetConfig+0x240>)
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d001      	beq.n	800b4fc <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 800b4f8:	6a23      	ldr	r3, [r4, #32]
 800b4fa:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b4fc:	6890      	ldr	r0, [r2, #8]
 800b4fe:	4b81      	ldr	r3, [pc, #516]	; (800b704 <UART_SetConfig+0x244>)
 800b500:	4003      	ands	r3, r0
 800b502:	430b      	orrs	r3, r1
 800b504:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b506:	6822      	ldr	r2, [r4, #0]
 800b508:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b50a:	f023 030f 	bic.w	r3, r3, #15
 800b50e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b510:	430b      	orrs	r3, r1
 800b512:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b514:	6822      	ldr	r2, [r4, #0]
 800b516:	4b7c      	ldr	r3, [pc, #496]	; (800b708 <UART_SetConfig+0x248>)
 800b518:	429a      	cmp	r2, r3
 800b51a:	d021      	beq.n	800b560 <UART_SetConfig+0xa0>
 800b51c:	4b7b      	ldr	r3, [pc, #492]	; (800b70c <UART_SetConfig+0x24c>)
 800b51e:	429a      	cmp	r2, r3
 800b520:	f000 808c 	beq.w	800b63c <UART_SetConfig+0x17c>
 800b524:	4b7a      	ldr	r3, [pc, #488]	; (800b710 <UART_SetConfig+0x250>)
 800b526:	429a      	cmp	r2, r3
 800b528:	f000 80a2 	beq.w	800b670 <UART_SetConfig+0x1b0>
 800b52c:	4b79      	ldr	r3, [pc, #484]	; (800b714 <UART_SetConfig+0x254>)
 800b52e:	429a      	cmp	r2, r3
 800b530:	f000 80b5 	beq.w	800b69e <UART_SetConfig+0x1de>
 800b534:	4b78      	ldr	r3, [pc, #480]	; (800b718 <UART_SetConfig+0x258>)
 800b536:	429a      	cmp	r2, r3
 800b538:	f000 80c8 	beq.w	800b6cc <UART_SetConfig+0x20c>
 800b53c:	4b77      	ldr	r3, [pc, #476]	; (800b71c <UART_SetConfig+0x25c>)
 800b53e:	429a      	cmp	r2, r3
 800b540:	f000 80f4 	beq.w	800b72c <UART_SetConfig+0x26c>
 800b544:	4b76      	ldr	r3, [pc, #472]	; (800b720 <UART_SetConfig+0x260>)
 800b546:	429a      	cmp	r2, r3
 800b548:	f000 8119 	beq.w	800b77e <UART_SetConfig+0x2be>
 800b54c:	4b75      	ldr	r3, [pc, #468]	; (800b724 <UART_SetConfig+0x264>)
 800b54e:	429a      	cmp	r2, r3
 800b550:	f000 812c 	beq.w	800b7ac <UART_SetConfig+0x2ec>
 800b554:	4b6a      	ldr	r3, [pc, #424]	; (800b700 <UART_SetConfig+0x240>)
 800b556:	429a      	cmp	r2, r3
 800b558:	f000 813f 	beq.w	800b7da <UART_SetConfig+0x31a>
 800b55c:	2380      	movs	r3, #128	; 0x80
 800b55e:	e033      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b560:	4b71      	ldr	r3, [pc, #452]	; (800b728 <UART_SetConfig+0x268>)
 800b562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b564:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b568:	2b28      	cmp	r3, #40	; 0x28
 800b56a:	d865      	bhi.n	800b638 <UART_SetConfig+0x178>
 800b56c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b570:	00640029 	.word	0x00640029
 800b574:	00640064 	.word	0x00640064
 800b578:	00640064 	.word	0x00640064
 800b57c:	00640064 	.word	0x00640064
 800b580:	0064014d 	.word	0x0064014d
 800b584:	00640064 	.word	0x00640064
 800b588:	00640064 	.word	0x00640064
 800b58c:	00640064 	.word	0x00640064
 800b590:	0064002b 	.word	0x0064002b
 800b594:	00640064 	.word	0x00640064
 800b598:	00640064 	.word	0x00640064
 800b59c:	00640064 	.word	0x00640064
 800b5a0:	0064005e 	.word	0x0064005e
 800b5a4:	00640064 	.word	0x00640064
 800b5a8:	00640064 	.word	0x00640064
 800b5ac:	00640064 	.word	0x00640064
 800b5b0:	00640060 	.word	0x00640060
 800b5b4:	00640064 	.word	0x00640064
 800b5b8:	00640064 	.word	0x00640064
 800b5bc:	00640064 	.word	0x00640064
 800b5c0:	0062      	.short	0x0062
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e000      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b5c6:	2308      	movs	r3, #8
  if (UART_INSTANCE_LOWPOWER(huart))
 800b5c8:	494d      	ldr	r1, [pc, #308]	; (800b700 <UART_SetConfig+0x240>)
 800b5ca:	428a      	cmp	r2, r1
 800b5cc:	f000 812f 	beq.w	800b82e <UART_SetConfig+0x36e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5d0:	69e0      	ldr	r0, [r4, #28]
 800b5d2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800b5d6:	f000 81af 	beq.w	800b938 <UART_SetConfig+0x478>
    switch (clocksource)
 800b5da:	2b20      	cmp	r3, #32
 800b5dc:	f200 8207 	bhi.w	800b9ee <UART_SetConfig+0x52e>
 800b5e0:	2b20      	cmp	r3, #32
 800b5e2:	f200 8251 	bhi.w	800ba88 <UART_SetConfig+0x5c8>
 800b5e6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b5ea:	021e      	.short	0x021e
 800b5ec:	024f0224 	.word	0x024f0224
 800b5f0:	0227024f 	.word	0x0227024f
 800b5f4:	024f024f 	.word	0x024f024f
 800b5f8:	022c024f 	.word	0x022c024f
 800b5fc:	024f024f 	.word	0x024f024f
 800b600:	024f024f 	.word	0x024f024f
 800b604:	024f024f 	.word	0x024f024f
 800b608:	0231024f 	.word	0x0231024f
 800b60c:	024f024f 	.word	0x024f024f
 800b610:	024f024f 	.word	0x024f024f
 800b614:	024f024f 	.word	0x024f024f
 800b618:	024f024f 	.word	0x024f024f
 800b61c:	024f024f 	.word	0x024f024f
 800b620:	024f024f 	.word	0x024f024f
 800b624:	024f024f 	.word	0x024f024f
 800b628:	023d024f 	.word	0x023d024f
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b62c:	2310      	movs	r3, #16
 800b62e:	e7cb      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b630:	2320      	movs	r3, #32
 800b632:	e7c9      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b634:	2340      	movs	r3, #64	; 0x40
 800b636:	e7c7      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b638:	2380      	movs	r3, #128	; 0x80
 800b63a:	e7c5      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b63c:	4b3a      	ldr	r3, [pc, #232]	; (800b728 <UART_SetConfig+0x268>)
 800b63e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b640:	f003 0307 	and.w	r3, r3, #7
 800b644:	2b05      	cmp	r3, #5
 800b646:	d811      	bhi.n	800b66c <UART_SetConfig+0x1ac>
 800b648:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b64c:	00e10006 	.word	0x00e10006
 800b650:	000a0008 	.word	0x000a0008
 800b654:	000e000c 	.word	0x000e000c
 800b658:	2300      	movs	r3, #0
 800b65a:	e7b5      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b65c:	2308      	movs	r3, #8
 800b65e:	e7b3      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b660:	2310      	movs	r3, #16
 800b662:	e7b1      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b664:	2320      	movs	r3, #32
 800b666:	e7af      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b668:	2340      	movs	r3, #64	; 0x40
 800b66a:	e7ad      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b66c:	2380      	movs	r3, #128	; 0x80
 800b66e:	e7ab      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b670:	4b2d      	ldr	r3, [pc, #180]	; (800b728 <UART_SetConfig+0x268>)
 800b672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b674:	f003 0307 	and.w	r3, r3, #7
 800b678:	2b05      	cmp	r3, #5
 800b67a:	d80e      	bhi.n	800b69a <UART_SetConfig+0x1da>
 800b67c:	e8df f003 	tbb	[pc, r3]
 800b680:	0705c903 	.word	0x0705c903
 800b684:	0b09      	.short	0x0b09
 800b686:	2300      	movs	r3, #0
 800b688:	e79e      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b68a:	2308      	movs	r3, #8
 800b68c:	e79c      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b68e:	2310      	movs	r3, #16
 800b690:	e79a      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b692:	2320      	movs	r3, #32
 800b694:	e798      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b696:	2340      	movs	r3, #64	; 0x40
 800b698:	e796      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b69a:	2380      	movs	r3, #128	; 0x80
 800b69c:	e794      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b69e:	4b22      	ldr	r3, [pc, #136]	; (800b728 <UART_SetConfig+0x268>)
 800b6a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6a2:	f003 0307 	and.w	r3, r3, #7
 800b6a6:	2b05      	cmp	r3, #5
 800b6a8:	d80e      	bhi.n	800b6c8 <UART_SetConfig+0x208>
 800b6aa:	e8df f003 	tbb	[pc, r3]
 800b6ae:	b403      	.short	0xb403
 800b6b0:	0b090705 	.word	0x0b090705
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	e787      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b6b8:	2308      	movs	r3, #8
 800b6ba:	e785      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b6bc:	2310      	movs	r3, #16
 800b6be:	e783      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b6c0:	2320      	movs	r3, #32
 800b6c2:	e781      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b6c4:	2340      	movs	r3, #64	; 0x40
 800b6c6:	e77f      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b6c8:	2380      	movs	r3, #128	; 0x80
 800b6ca:	e77d      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b6cc:	4b16      	ldr	r3, [pc, #88]	; (800b728 <UART_SetConfig+0x268>)
 800b6ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6d0:	f003 0307 	and.w	r3, r3, #7
 800b6d4:	2b05      	cmp	r3, #5
 800b6d6:	d80e      	bhi.n	800b6f6 <UART_SetConfig+0x236>
 800b6d8:	e8df f003 	tbb	[pc, r3]
 800b6dc:	07059f03 	.word	0x07059f03
 800b6e0:	0b09      	.short	0x0b09
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	e770      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b6e6:	2308      	movs	r3, #8
 800b6e8:	e76e      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b6ea:	2310      	movs	r3, #16
 800b6ec:	e76c      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b6ee:	2320      	movs	r3, #32
 800b6f0:	e76a      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b6f2:	2340      	movs	r3, #64	; 0x40
 800b6f4:	e768      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b6f6:	2380      	movs	r3, #128	; 0x80
 800b6f8:	e766      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b6fa:	bf00      	nop
 800b6fc:	cfff69f3 	.word	0xcfff69f3
 800b700:	58000c00 	.word	0x58000c00
 800b704:	11fff4ff 	.word	0x11fff4ff
 800b708:	40011000 	.word	0x40011000
 800b70c:	40004400 	.word	0x40004400
 800b710:	40004800 	.word	0x40004800
 800b714:	40004c00 	.word	0x40004c00
 800b718:	40005000 	.word	0x40005000
 800b71c:	40011400 	.word	0x40011400
 800b720:	40007800 	.word	0x40007800
 800b724:	40007c00 	.word	0x40007c00
 800b728:	58024400 	.word	0x58024400
 800b72c:	4b7d      	ldr	r3, [pc, #500]	; (800b924 <UART_SetConfig+0x464>)
 800b72e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b730:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b734:	2b28      	cmp	r3, #40	; 0x28
 800b736:	d820      	bhi.n	800b77a <UART_SetConfig+0x2ba>
 800b738:	e8df f003 	tbb	[pc, r3]
 800b73c:	1f1f1f15 	.word	0x1f1f1f15
 800b740:	1f1f1f1f 	.word	0x1f1f1f1f
 800b744:	1f1f1f71 	.word	0x1f1f1f71
 800b748:	1f1f1f1f 	.word	0x1f1f1f1f
 800b74c:	1f1f1f17 	.word	0x1f1f1f17
 800b750:	1f1f1f1f 	.word	0x1f1f1f1f
 800b754:	1f1f1f19 	.word	0x1f1f1f19
 800b758:	1f1f1f1f 	.word	0x1f1f1f1f
 800b75c:	1f1f1f1b 	.word	0x1f1f1f1b
 800b760:	1f1f1f1f 	.word	0x1f1f1f1f
 800b764:	1d          	.byte	0x1d
 800b765:	00          	.byte	0x00
 800b766:	2301      	movs	r3, #1
 800b768:	e72e      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b76a:	2308      	movs	r3, #8
 800b76c:	e72c      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b76e:	2310      	movs	r3, #16
 800b770:	e72a      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b772:	2320      	movs	r3, #32
 800b774:	e728      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b776:	2340      	movs	r3, #64	; 0x40
 800b778:	e726      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b77a:	2380      	movs	r3, #128	; 0x80
 800b77c:	e724      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b77e:	4b69      	ldr	r3, [pc, #420]	; (800b924 <UART_SetConfig+0x464>)
 800b780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b782:	f003 0307 	and.w	r3, r3, #7
 800b786:	2b05      	cmp	r3, #5
 800b788:	d80e      	bhi.n	800b7a8 <UART_SetConfig+0x2e8>
 800b78a:	e8df f003 	tbb	[pc, r3]
 800b78e:	4a03      	.short	0x4a03
 800b790:	0b090705 	.word	0x0b090705
 800b794:	2300      	movs	r3, #0
 800b796:	e717      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b798:	2308      	movs	r3, #8
 800b79a:	e715      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b79c:	2310      	movs	r3, #16
 800b79e:	e713      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b7a0:	2320      	movs	r3, #32
 800b7a2:	e711      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b7a4:	2340      	movs	r3, #64	; 0x40
 800b7a6:	e70f      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b7a8:	2380      	movs	r3, #128	; 0x80
 800b7aa:	e70d      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b7ac:	4b5d      	ldr	r3, [pc, #372]	; (800b924 <UART_SetConfig+0x464>)
 800b7ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7b0:	f003 0307 	and.w	r3, r3, #7
 800b7b4:	2b05      	cmp	r3, #5
 800b7b6:	d80e      	bhi.n	800b7d6 <UART_SetConfig+0x316>
 800b7b8:	e8df f003 	tbb	[pc, r3]
 800b7bc:	07053503 	.word	0x07053503
 800b7c0:	0b09      	.short	0x0b09
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	e700      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b7c6:	2308      	movs	r3, #8
 800b7c8:	e6fe      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b7ca:	2310      	movs	r3, #16
 800b7cc:	e6fc      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b7ce:	2320      	movs	r3, #32
 800b7d0:	e6fa      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b7d2:	2340      	movs	r3, #64	; 0x40
 800b7d4:	e6f8      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b7d6:	2380      	movs	r3, #128	; 0x80
 800b7d8:	e6f6      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b7da:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800b7de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7e0:	f003 0307 	and.w	r3, r3, #7
 800b7e4:	2b05      	cmp	r3, #5
 800b7e6:	d80e      	bhi.n	800b806 <UART_SetConfig+0x346>
 800b7e8:	e8df f003 	tbb	[pc, r3]
 800b7ec:	07051f03 	.word	0x07051f03
 800b7f0:	0b09      	.short	0x0b09
 800b7f2:	2302      	movs	r3, #2
 800b7f4:	e6e8      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b7f6:	2308      	movs	r3, #8
 800b7f8:	e6e6      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b7fa:	2310      	movs	r3, #16
 800b7fc:	e6e4      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b7fe:	2320      	movs	r3, #32
 800b800:	e6e2      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b802:	2340      	movs	r3, #64	; 0x40
 800b804:	e6e0      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b806:	2380      	movs	r3, #128	; 0x80
 800b808:	e6de      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b80a:	2304      	movs	r3, #4
 800b80c:	e6dc      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b80e:	2304      	movs	r3, #4
 800b810:	e6da      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b812:	2304      	movs	r3, #4
 800b814:	e6d8      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b816:	2304      	movs	r3, #4
 800b818:	e6d6      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b81a:	2304      	movs	r3, #4
 800b81c:	e6d4      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b81e:	2304      	movs	r3, #4
 800b820:	e6d2      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b822:	2304      	movs	r3, #4
 800b824:	e6d0      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b826:	2304      	movs	r3, #4
 800b828:	e6ce      	b.n	800b5c8 <UART_SetConfig+0x108>
 800b82a:	2304      	movs	r3, #4
 800b82c:	e6cc      	b.n	800b5c8 <UART_SetConfig+0x108>
    switch (clocksource)
 800b82e:	2b20      	cmp	r3, #32
 800b830:	d827      	bhi.n	800b882 <UART_SetConfig+0x3c2>
 800b832:	2b02      	cmp	r3, #2
 800b834:	f0c0 811a 	bcc.w	800ba6c <UART_SetConfig+0x5ac>
 800b838:	3b02      	subs	r3, #2
 800b83a:	2b1e      	cmp	r3, #30
 800b83c:	f200 8118 	bhi.w	800ba70 <UART_SetConfig+0x5b0>
 800b840:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b844:	01160050 	.word	0x01160050
 800b848:	01160056 	.word	0x01160056
 800b84c:	01160116 	.word	0x01160116
 800b850:	0116005b 	.word	0x0116005b
 800b854:	01160116 	.word	0x01160116
 800b858:	01160116 	.word	0x01160116
 800b85c:	01160116 	.word	0x01160116
 800b860:	01160060 	.word	0x01160060
 800b864:	01160116 	.word	0x01160116
 800b868:	01160116 	.word	0x01160116
 800b86c:	01160116 	.word	0x01160116
 800b870:	01160116 	.word	0x01160116
 800b874:	01160116 	.word	0x01160116
 800b878:	01160116 	.word	0x01160116
 800b87c:	01160116 	.word	0x01160116
 800b880:	006c      	.short	0x006c
 800b882:	2b40      	cmp	r3, #64	; 0x40
 800b884:	d12c      	bne.n	800b8e0 <UART_SetConfig+0x420>
        pclk = (uint32_t) LSE_VALUE;
 800b886:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b88a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b88c:	4b26      	ldr	r3, [pc, #152]	; (800b928 <UART_SetConfig+0x468>)
 800b88e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800b892:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b896:	6865      	ldr	r5, [r4, #4]
 800b898:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800b89c:	4299      	cmp	r1, r3
 800b89e:	f200 80e9 	bhi.w	800ba74 <UART_SetConfig+0x5b4>
 800b8a2:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800b8a6:	f200 80e7 	bhi.w	800ba78 <UART_SetConfig+0x5b8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8aa:	2600      	movs	r6, #0
 800b8ac:	4633      	mov	r3, r6
 800b8ae:	4631      	mov	r1, r6
 800b8b0:	f7f4 fd28 	bl	8000304 <__aeabi_uldivmod>
 800b8b4:	0209      	lsls	r1, r1, #8
 800b8b6:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800b8ba:	0200      	lsls	r0, r0, #8
 800b8bc:	086b      	lsrs	r3, r5, #1
 800b8be:	18c0      	adds	r0, r0, r3
 800b8c0:	462a      	mov	r2, r5
 800b8c2:	4633      	mov	r3, r6
 800b8c4:	f141 0100 	adc.w	r1, r1, #0
 800b8c8:	f7f4 fd1c 	bl	8000304 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b8cc:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800b8d0:	4b16      	ldr	r3, [pc, #88]	; (800b92c <UART_SetConfig+0x46c>)
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	f200 80d2 	bhi.w	800ba7c <UART_SetConfig+0x5bc>
          huart->Instance->BRR = usartdiv;
 800b8d8:	6823      	ldr	r3, [r4, #0]
 800b8da:	60d8      	str	r0, [r3, #12]
 800b8dc:	4630      	mov	r0, r6
 800b8de:	e0d4      	b.n	800ba8a <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b8e0:	2001      	movs	r0, #1
 800b8e2:	e0d2      	b.n	800ba8a <UART_SetConfig+0x5ca>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b8e4:	f7fc fff8 	bl	80088d8 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	d1ce      	bne.n	800b88a <UART_SetConfig+0x3ca>
 800b8ec:	2000      	movs	r0, #0
 800b8ee:	e0cc      	b.n	800ba8a <UART_SetConfig+0x5ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8f0:	a803      	add	r0, sp, #12
 800b8f2:	f7fd f803 	bl	80088fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b8f6:	9804      	ldr	r0, [sp, #16]
        break;
 800b8f8:	e7f6      	b.n	800b8e8 <UART_SetConfig+0x428>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8fa:	4668      	mov	r0, sp
 800b8fc:	f7fd f8fa 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b900:	9801      	ldr	r0, [sp, #4]
        break;
 800b902:	e7f1      	b.n	800b8e8 <UART_SetConfig+0x428>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b904:	4b07      	ldr	r3, [pc, #28]	; (800b924 <UART_SetConfig+0x464>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f013 0f20 	tst.w	r3, #32
 800b90c:	d008      	beq.n	800b920 <UART_SetConfig+0x460>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b90e:	4b05      	ldr	r3, [pc, #20]	; (800b924 <UART_SetConfig+0x464>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b916:	4806      	ldr	r0, [pc, #24]	; (800b930 <UART_SetConfig+0x470>)
 800b918:	40d8      	lsrs	r0, r3
 800b91a:	e7e5      	b.n	800b8e8 <UART_SetConfig+0x428>
    switch (clocksource)
 800b91c:	4805      	ldr	r0, [pc, #20]	; (800b934 <UART_SetConfig+0x474>)
 800b91e:	e7b4      	b.n	800b88a <UART_SetConfig+0x3ca>
          pclk = (uint32_t) HSI_VALUE;
 800b920:	4803      	ldr	r0, [pc, #12]	; (800b930 <UART_SetConfig+0x470>)
 800b922:	e7b2      	b.n	800b88a <UART_SetConfig+0x3ca>
 800b924:	58024400 	.word	0x58024400
 800b928:	0801bfbc 	.word	0x0801bfbc
 800b92c:	000ffcff 	.word	0x000ffcff
 800b930:	03d09000 	.word	0x03d09000
 800b934:	003d0900 	.word	0x003d0900
    switch (clocksource)
 800b938:	2b20      	cmp	r3, #32
 800b93a:	d815      	bhi.n	800b968 <UART_SetConfig+0x4a8>
 800b93c:	2b20      	cmp	r3, #32
 800b93e:	f200 809f 	bhi.w	800ba80 <UART_SetConfig+0x5c0>
 800b942:	e8df f003 	tbb	[pc, r3]
 800b946:	3731      	.short	0x3731
 800b948:	9d3a9d9d 	.word	0x9d3a9d9d
 800b94c:	9d3f9d9d 	.word	0x9d3f9d9d
 800b950:	9d9d9d9d 	.word	0x9d9d9d9d
 800b954:	9d449d9d 	.word	0x9d449d9d
 800b958:	9d9d9d9d 	.word	0x9d9d9d9d
 800b95c:	9d9d9d9d 	.word	0x9d9d9d9d
 800b960:	9d9d9d9d 	.word	0x9d9d9d9d
 800b964:	9d9d      	.short	0x9d9d
 800b966:	50          	.byte	0x50
 800b967:	00          	.byte	0x00
 800b968:	2b40      	cmp	r3, #64	; 0x40
 800b96a:	d11b      	bne.n	800b9a4 <UART_SetConfig+0x4e4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b96c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b96e:	4b4d      	ldr	r3, [pc, #308]	; (800baa4 <UART_SetConfig+0x5e4>)
 800b970:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b974:	fbb0 f0f3 	udiv	r0, r0, r3
 800b978:	6862      	ldr	r2, [r4, #4]
 800b97a:	0853      	lsrs	r3, r2, #1
 800b97c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800b980:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b984:	f1a0 0210 	sub.w	r2, r0, #16
 800b988:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d879      	bhi.n	800ba84 <UART_SetConfig+0x5c4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b990:	b283      	uxth	r3, r0
 800b992:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b996:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800b99a:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 800b99c:	6823      	ldr	r3, [r4, #0]
 800b99e:	60d8      	str	r0, [r3, #12]
 800b9a0:	2000      	movs	r0, #0
 800b9a2:	e072      	b.n	800ba8a <UART_SetConfig+0x5ca>
    switch (clocksource)
 800b9a4:	2001      	movs	r0, #1
 800b9a6:	e070      	b.n	800ba8a <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9a8:	f7fc f95a 	bl	8007c60 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	d1dd      	bne.n	800b96c <UART_SetConfig+0x4ac>
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	e06a      	b.n	800ba8a <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9b4:	f7fc f966 	bl	8007c84 <HAL_RCC_GetPCLK2Freq>
        break;
 800b9b8:	e7f8      	b.n	800b9ac <UART_SetConfig+0x4ec>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9ba:	a803      	add	r0, sp, #12
 800b9bc:	f7fc ff9e 	bl	80088fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b9c0:	9804      	ldr	r0, [sp, #16]
        break;
 800b9c2:	e7f3      	b.n	800b9ac <UART_SetConfig+0x4ec>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9c4:	4668      	mov	r0, sp
 800b9c6:	f7fd f895 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b9ca:	9801      	ldr	r0, [sp, #4]
        break;
 800b9cc:	e7ee      	b.n	800b9ac <UART_SetConfig+0x4ec>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9ce:	4b36      	ldr	r3, [pc, #216]	; (800baa8 <UART_SetConfig+0x5e8>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f013 0f20 	tst.w	r3, #32
 800b9d6:	d008      	beq.n	800b9ea <UART_SetConfig+0x52a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b9d8:	4b33      	ldr	r3, [pc, #204]	; (800baa8 <UART_SetConfig+0x5e8>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b9e0:	4832      	ldr	r0, [pc, #200]	; (800baac <UART_SetConfig+0x5ec>)
 800b9e2:	40d8      	lsrs	r0, r3
 800b9e4:	e7e2      	b.n	800b9ac <UART_SetConfig+0x4ec>
    switch (clocksource)
 800b9e6:	4832      	ldr	r0, [pc, #200]	; (800bab0 <UART_SetConfig+0x5f0>)
 800b9e8:	e7c0      	b.n	800b96c <UART_SetConfig+0x4ac>
          pclk = (uint32_t) HSI_VALUE;
 800b9ea:	4830      	ldr	r0, [pc, #192]	; (800baac <UART_SetConfig+0x5ec>)
 800b9ec:	e7be      	b.n	800b96c <UART_SetConfig+0x4ac>
    switch (clocksource)
 800b9ee:	2b40      	cmp	r3, #64	; 0x40
 800b9f0:	d117      	bne.n	800ba22 <UART_SetConfig+0x562>
        pclk = (uint32_t) LSE_VALUE;
 800b9f2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b9f8:	4b2a      	ldr	r3, [pc, #168]	; (800baa4 <UART_SetConfig+0x5e4>)
 800b9fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b9fe:	fbb0 f0f3 	udiv	r0, r0, r3
 800ba02:	6863      	ldr	r3, [r4, #4]
 800ba04:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800ba08:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba0c:	f1a0 0210 	sub.w	r2, r0, #16
 800ba10:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d842      	bhi.n	800ba9e <UART_SetConfig+0x5de>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba18:	6823      	ldr	r3, [r4, #0]
 800ba1a:	b280      	uxth	r0, r0
 800ba1c:	60d8      	str	r0, [r3, #12]
 800ba1e:	2000      	movs	r0, #0
 800ba20:	e033      	b.n	800ba8a <UART_SetConfig+0x5ca>
    switch (clocksource)
 800ba22:	2001      	movs	r0, #1
 800ba24:	e031      	b.n	800ba8a <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba26:	f7fc f91b 	bl	8007c60 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	d1e3      	bne.n	800b9f6 <UART_SetConfig+0x536>
 800ba2e:	2000      	movs	r0, #0
 800ba30:	e02b      	b.n	800ba8a <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba32:	f7fc f927 	bl	8007c84 <HAL_RCC_GetPCLK2Freq>
        break;
 800ba36:	e7f8      	b.n	800ba2a <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba38:	a803      	add	r0, sp, #12
 800ba3a:	f7fc ff5f 	bl	80088fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba3e:	9804      	ldr	r0, [sp, #16]
        break;
 800ba40:	e7f3      	b.n	800ba2a <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba42:	4668      	mov	r0, sp
 800ba44:	f7fd f856 	bl	8008af4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba48:	9801      	ldr	r0, [sp, #4]
        break;
 800ba4a:	e7ee      	b.n	800ba2a <UART_SetConfig+0x56a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba4c:	4b16      	ldr	r3, [pc, #88]	; (800baa8 <UART_SetConfig+0x5e8>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f013 0f20 	tst.w	r3, #32
 800ba54:	d008      	beq.n	800ba68 <UART_SetConfig+0x5a8>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba56:	4b14      	ldr	r3, [pc, #80]	; (800baa8 <UART_SetConfig+0x5e8>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ba5e:	4813      	ldr	r0, [pc, #76]	; (800baac <UART_SetConfig+0x5ec>)
 800ba60:	40d8      	lsrs	r0, r3
 800ba62:	e7e2      	b.n	800ba2a <UART_SetConfig+0x56a>
    switch (clocksource)
 800ba64:	4812      	ldr	r0, [pc, #72]	; (800bab0 <UART_SetConfig+0x5f0>)
 800ba66:	e7c6      	b.n	800b9f6 <UART_SetConfig+0x536>
          pclk = (uint32_t) HSI_VALUE;
 800ba68:	4810      	ldr	r0, [pc, #64]	; (800baac <UART_SetConfig+0x5ec>)
 800ba6a:	e7c4      	b.n	800b9f6 <UART_SetConfig+0x536>
    switch (clocksource)
 800ba6c:	2001      	movs	r0, #1
 800ba6e:	e00c      	b.n	800ba8a <UART_SetConfig+0x5ca>
 800ba70:	2001      	movs	r0, #1
 800ba72:	e00a      	b.n	800ba8a <UART_SetConfig+0x5ca>
        ret = HAL_ERROR;
 800ba74:	2001      	movs	r0, #1
 800ba76:	e008      	b.n	800ba8a <UART_SetConfig+0x5ca>
 800ba78:	2001      	movs	r0, #1
 800ba7a:	e006      	b.n	800ba8a <UART_SetConfig+0x5ca>
          ret = HAL_ERROR;
 800ba7c:	2001      	movs	r0, #1
 800ba7e:	e004      	b.n	800ba8a <UART_SetConfig+0x5ca>
    switch (clocksource)
 800ba80:	2001      	movs	r0, #1
 800ba82:	e002      	b.n	800ba8a <UART_SetConfig+0x5ca>
        ret = HAL_ERROR;
 800ba84:	2001      	movs	r0, #1
 800ba86:	e000      	b.n	800ba8a <UART_SetConfig+0x5ca>
    switch (clocksource)
 800ba88:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ba90:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800ba94:	2300      	movs	r3, #0
 800ba96:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800ba98:	6763      	str	r3, [r4, #116]	; 0x74
}
 800ba9a:	b006      	add	sp, #24
 800ba9c:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 800ba9e:	2001      	movs	r0, #1
 800baa0:	e7f3      	b.n	800ba8a <UART_SetConfig+0x5ca>
 800baa2:	bf00      	nop
 800baa4:	0801bfbc 	.word	0x0801bfbc
 800baa8:	58024400 	.word	0x58024400
 800baac:	03d09000 	.word	0x03d09000
 800bab0:	003d0900 	.word	0x003d0900

0800bab4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bab4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bab6:	f013 0f01 	tst.w	r3, #1
 800baba:	d006      	beq.n	800baca <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800babc:	6802      	ldr	r2, [r0, #0]
 800babe:	6853      	ldr	r3, [r2, #4]
 800bac0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bac4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800bac6:	430b      	orrs	r3, r1
 800bac8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800baca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bacc:	f013 0f02 	tst.w	r3, #2
 800bad0:	d006      	beq.n	800bae0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bad2:	6802      	ldr	r2, [r0, #0]
 800bad4:	6853      	ldr	r3, [r2, #4]
 800bad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bada:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800badc:	430b      	orrs	r3, r1
 800bade:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bae0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bae2:	f013 0f04 	tst.w	r3, #4
 800bae6:	d006      	beq.n	800baf6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bae8:	6802      	ldr	r2, [r0, #0]
 800baea:	6853      	ldr	r3, [r2, #4]
 800baec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800baf0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800baf2:	430b      	orrs	r3, r1
 800baf4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800baf6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800baf8:	f013 0f08 	tst.w	r3, #8
 800bafc:	d006      	beq.n	800bb0c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bafe:	6802      	ldr	r2, [r0, #0]
 800bb00:	6853      	ldr	r3, [r2, #4]
 800bb02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb06:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800bb08:	430b      	orrs	r3, r1
 800bb0a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bb0e:	f013 0f10 	tst.w	r3, #16
 800bb12:	d006      	beq.n	800bb22 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb14:	6802      	ldr	r2, [r0, #0]
 800bb16:	6893      	ldr	r3, [r2, #8]
 800bb18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb1c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800bb1e:	430b      	orrs	r3, r1
 800bb20:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb22:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bb24:	f013 0f20 	tst.w	r3, #32
 800bb28:	d006      	beq.n	800bb38 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb2a:	6802      	ldr	r2, [r0, #0]
 800bb2c:	6893      	ldr	r3, [r2, #8]
 800bb2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb32:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800bb34:	430b      	orrs	r3, r1
 800bb36:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bb3a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bb3e:	d00a      	beq.n	800bb56 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb40:	6802      	ldr	r2, [r0, #0]
 800bb42:	6853      	ldr	r3, [r2, #4]
 800bb44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bb48:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800bb4a:	430b      	orrs	r3, r1
 800bb4c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb4e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800bb50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb54:	d00b      	beq.n	800bb6e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb56:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bb58:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bb5c:	d006      	beq.n	800bb6c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb5e:	6802      	ldr	r2, [r0, #0]
 800bb60:	6853      	ldr	r3, [r2, #4]
 800bb62:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800bb66:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800bb68:	430b      	orrs	r3, r1
 800bb6a:	6053      	str	r3, [r2, #4]
}
 800bb6c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb6e:	6802      	ldr	r2, [r0, #0]
 800bb70:	6853      	ldr	r3, [r2, #4]
 800bb72:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800bb76:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800bb78:	430b      	orrs	r3, r1
 800bb7a:	6053      	str	r3, [r2, #4]
 800bb7c:	e7eb      	b.n	800bb56 <UART_AdvFeatureConfig+0xa2>

0800bb7e <UART_WaitOnFlagUntilTimeout>:
{
 800bb7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb82:	4605      	mov	r5, r0
 800bb84:	460f      	mov	r7, r1
 800bb86:	4616      	mov	r6, r2
 800bb88:	4699      	mov	r9, r3
 800bb8a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb8e:	682c      	ldr	r4, [r5, #0]
 800bb90:	69e4      	ldr	r4, [r4, #28]
 800bb92:	ea37 0304 	bics.w	r3, r7, r4
 800bb96:	bf0c      	ite	eq
 800bb98:	f04f 0c01 	moveq.w	ip, #1
 800bb9c:	f04f 0c00 	movne.w	ip, #0
 800bba0:	45b4      	cmp	ip, r6
 800bba2:	d157      	bne.n	800bc54 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 800bba4:	f1b8 3fff 	cmp.w	r8, #4294967295
 800bba8:	d0f1      	beq.n	800bb8e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbaa:	f7f7 fe25 	bl	80037f8 <HAL_GetTick>
 800bbae:	eba0 0009 	sub.w	r0, r0, r9
 800bbb2:	4540      	cmp	r0, r8
 800bbb4:	d82f      	bhi.n	800bc16 <UART_WaitOnFlagUntilTimeout+0x98>
 800bbb6:	f1b8 0f00 	cmp.w	r8, #0
 800bbba:	d02c      	beq.n	800bc16 <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bbbc:	682b      	ldr	r3, [r5, #0]
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	f012 0f04 	tst.w	r2, #4
 800bbc4:	d0e3      	beq.n	800bb8e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bbc6:	69da      	ldr	r2, [r3, #28]
 800bbc8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800bbcc:	d0df      	beq.n	800bb8e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bbce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bbd2:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bbd4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd6:	e852 3f00 	ldrex	r3, [r2]
 800bbda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbde:	e842 3100 	strex	r1, r3, [r2]
 800bbe2:	2900      	cmp	r1, #0
 800bbe4:	d1f6      	bne.n	800bbd4 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbe6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe8:	f102 0308 	add.w	r3, r2, #8
 800bbec:	e853 3f00 	ldrex	r3, [r3]
 800bbf0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf4:	3208      	adds	r2, #8
 800bbf6:	e842 3100 	strex	r1, r3, [r2]
 800bbfa:	2900      	cmp	r1, #0
 800bbfc:	d1f3      	bne.n	800bbe6 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 800bbfe:	2320      	movs	r3, #32
 800bc00:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bc04:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc08:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 800bc12:	2003      	movs	r0, #3
 800bc14:	e01f      	b.n	800bc56 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bc16:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc18:	e852 3f00 	ldrex	r3, [r2]
 800bc1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc20:	e842 3100 	strex	r1, r3, [r2]
 800bc24:	2900      	cmp	r1, #0
 800bc26:	d1f6      	bne.n	800bc16 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc28:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2a:	f102 0308 	add.w	r3, r2, #8
 800bc2e:	e853 3f00 	ldrex	r3, [r3]
 800bc32:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc36:	3208      	adds	r2, #8
 800bc38:	e842 3100 	strex	r1, r3, [r2]
 800bc3c:	2900      	cmp	r1, #0
 800bc3e:	d1f3      	bne.n	800bc28 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 800bc40:	2320      	movs	r3, #32
 800bc42:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bc46:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 800bc50:	2003      	movs	r0, #3
 800bc52:	e000      	b.n	800bc56 <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 800bc54:	2000      	movs	r0, #0
}
 800bc56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800bc5a <UART_CheckIdleState>:
{
 800bc5a:	b530      	push	{r4, r5, lr}
 800bc5c:	b083      	sub	sp, #12
 800bc5e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc60:	2300      	movs	r3, #0
 800bc62:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800bc66:	f7f7 fdc7 	bl	80037f8 <HAL_GetTick>
 800bc6a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bc6c:	6822      	ldr	r2, [r4, #0]
 800bc6e:	6812      	ldr	r2, [r2, #0]
 800bc70:	f012 0f08 	tst.w	r2, #8
 800bc74:	d10f      	bne.n	800bc96 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bc76:	6823      	ldr	r3, [r4, #0]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f013 0f04 	tst.w	r3, #4
 800bc7e:	d118      	bne.n	800bcb2 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800bc80:	2320      	movs	r3, #32
 800bc82:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bc86:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800bc8e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800bc92:	b003      	add	sp, #12
 800bc94:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bca4:	4620      	mov	r0, r4
 800bca6:	f7ff ff6a 	bl	800bb7e <UART_WaitOnFlagUntilTimeout>
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	d0e3      	beq.n	800bc76 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800bcae:	2003      	movs	r0, #3
 800bcb0:	e7ef      	b.n	800bc92 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bcb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bcb6:	9300      	str	r3, [sp, #0]
 800bcb8:	462b      	mov	r3, r5
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f7ff ff5c 	bl	800bb7e <UART_WaitOnFlagUntilTimeout>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d0da      	beq.n	800bc80 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800bcca:	2003      	movs	r0, #3
 800bccc:	e7e1      	b.n	800bc92 <UART_CheckIdleState+0x38>

0800bcce <HAL_UART_Init>:
  if (huart == NULL)
 800bcce:	b378      	cbz	r0, 800bd30 <HAL_UART_Init+0x62>
{
 800bcd0:	b510      	push	{r4, lr}
 800bcd2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800bcd4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800bcd8:	b30b      	cbz	r3, 800bd1e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800bcda:	2324      	movs	r3, #36	; 0x24
 800bcdc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800bce0:	6822      	ldr	r2, [r4, #0]
 800bce2:	6813      	ldr	r3, [r2, #0]
 800bce4:	f023 0301 	bic.w	r3, r3, #1
 800bce8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bcea:	4620      	mov	r0, r4
 800bcec:	f7ff fbe8 	bl	800b4c0 <UART_SetConfig>
 800bcf0:	2801      	cmp	r0, #1
 800bcf2:	d013      	beq.n	800bd1c <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bcf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bcf6:	b9bb      	cbnz	r3, 800bd28 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bcf8:	6822      	ldr	r2, [r4, #0]
 800bcfa:	6853      	ldr	r3, [r2, #4]
 800bcfc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800bd00:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd02:	6822      	ldr	r2, [r4, #0]
 800bd04:	6893      	ldr	r3, [r2, #8]
 800bd06:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800bd0a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800bd0c:	6822      	ldr	r2, [r4, #0]
 800bd0e:	6813      	ldr	r3, [r2, #0]
 800bd10:	f043 0301 	orr.w	r3, r3, #1
 800bd14:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800bd16:	4620      	mov	r0, r4
 800bd18:	f7ff ff9f 	bl	800bc5a <UART_CheckIdleState>
}
 800bd1c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800bd1e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800bd22:	f7f6 ff95 	bl	8002c50 <HAL_UART_MspInit>
 800bd26:	e7d8      	b.n	800bcda <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800bd28:	4620      	mov	r0, r4
 800bd2a:	f7ff fec3 	bl	800bab4 <UART_AdvFeatureConfig>
 800bd2e:	e7e3      	b.n	800bcf8 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800bd30:	2001      	movs	r0, #1
}
 800bd32:	4770      	bx	lr

0800bd34 <UART_Start_Receive_DMA>:
{
 800bd34:	b510      	push	{r4, lr}
 800bd36:	4604      	mov	r4, r0
 800bd38:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 800bd3a:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 800bd3c:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd40:	2200      	movs	r2, #0
 800bd42:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd46:	2222      	movs	r2, #34	; 0x22
 800bd48:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 800bd4c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800bd4e:	b18a      	cbz	r2, 800bd74 <UART_Start_Receive_DMA+0x40>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bd50:	4922      	ldr	r1, [pc, #136]	; (800bddc <UART_Start_Receive_DMA+0xa8>)
 800bd52:	63d1      	str	r1, [r2, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bd54:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800bd56:	4922      	ldr	r1, [pc, #136]	; (800bde0 <UART_Start_Receive_DMA+0xac>)
 800bd58:	6411      	str	r1, [r2, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bd5a:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800bd5c:	4921      	ldr	r1, [pc, #132]	; (800bde4 <UART_Start_Receive_DMA+0xb0>)
 800bd5e:	64d1      	str	r1, [r2, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 800bd60:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800bd62:	2100      	movs	r1, #0
 800bd64:	6511      	str	r1, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bd66:	6801      	ldr	r1, [r0, #0]
 800bd68:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800bd6a:	3124      	adds	r1, #36	; 0x24
 800bd6c:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800bd6e:	f7f8 ff47 	bl	8004c00 <HAL_DMA_Start_IT>
 800bd72:	bb38      	cbnz	r0, 800bdc4 <UART_Start_Receive_DMA+0x90>
  __HAL_UNLOCK(huart);
 800bd74:	2300      	movs	r3, #0
 800bd76:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bd7a:	6923      	ldr	r3, [r4, #16]
 800bd7c:	b143      	cbz	r3, 800bd90 <UART_Start_Receive_DMA+0x5c>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd7e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd80:	e852 3f00 	ldrex	r3, [r2]
 800bd84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd88:	e842 3100 	strex	r1, r3, [r2]
 800bd8c:	2900      	cmp	r1, #0
 800bd8e:	d1f6      	bne.n	800bd7e <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd90:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd92:	f102 0308 	add.w	r3, r2, #8
 800bd96:	e853 3f00 	ldrex	r3, [r3]
 800bd9a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd9e:	3208      	adds	r2, #8
 800bda0:	e842 3100 	strex	r1, r3, [r2]
 800bda4:	2900      	cmp	r1, #0
 800bda6:	d1f3      	bne.n	800bd90 <UART_Start_Receive_DMA+0x5c>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bda8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdaa:	f102 0308 	add.w	r3, r2, #8
 800bdae:	e853 3f00 	ldrex	r3, [r3]
 800bdb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb6:	3208      	adds	r2, #8
 800bdb8:	e842 3100 	strex	r1, r3, [r2]
 800bdbc:	2900      	cmp	r1, #0
 800bdbe:	d1f3      	bne.n	800bda8 <UART_Start_Receive_DMA+0x74>
  return HAL_OK;
 800bdc0:	2000      	movs	r0, #0
}
 800bdc2:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bdc4:	2310      	movs	r3, #16
 800bdc6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      __HAL_UNLOCK(huart);
 800bdca:	2300      	movs	r3, #0
 800bdcc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 800bdd0:	2320      	movs	r3, #32
 800bdd2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 800bdd6:	2001      	movs	r0, #1
 800bdd8:	e7f3      	b.n	800bdc2 <UART_Start_Receive_DMA+0x8e>
 800bdda:	bf00      	nop
 800bddc:	0800b435 	.word	0x0800b435
 800bde0:	0800b419 	.word	0x0800b419
 800bde4:	0800b005 	.word	0x0800b005

0800bde8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bde8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800bdea:	b92b      	cbnz	r3, 800bdf8 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800bdec:	2301      	movs	r3, #1
 800bdee:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bdf2:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800bdf6:	4770      	bx	lr
{
 800bdf8:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bdfa:	6803      	ldr	r3, [r0, #0]
 800bdfc:	689a      	ldr	r2, [r3, #8]
 800bdfe:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be02:	6899      	ldr	r1, [r3, #8]
 800be04:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be06:	4d09      	ldr	r5, [pc, #36]	; (800be2c <UARTEx_SetNbDataToProcess+0x44>)
 800be08:	5c6b      	ldrb	r3, [r5, r1]
 800be0a:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 800be0c:	4c08      	ldr	r4, [pc, #32]	; (800be30 <UARTEx_SetNbDataToProcess+0x48>)
 800be0e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be10:	fb93 f3f1 	sdiv	r3, r3, r1
 800be14:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be18:	5cab      	ldrb	r3, [r5, r2]
 800be1a:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800be1c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800be22:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800be26:	bc30      	pop	{r4, r5}
 800be28:	4770      	bx	lr
 800be2a:	bf00      	nop
 800be2c:	0801bfdc 	.word	0x0801bfdc
 800be30:	0801bfd4 	.word	0x0801bfd4

0800be34 <HAL_RS485Ex_Init>:
  if (huart == NULL)
 800be34:	2800      	cmp	r0, #0
 800be36:	d03c      	beq.n	800beb2 <HAL_RS485Ex_Init+0x7e>
{
 800be38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be3a:	460f      	mov	r7, r1
 800be3c:	4616      	mov	r6, r2
 800be3e:	461d      	mov	r5, r3
 800be40:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800be42:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800be46:	b35b      	cbz	r3, 800bea0 <HAL_RS485Ex_Init+0x6c>
  huart->gState = HAL_UART_STATE_BUSY;
 800be48:	2324      	movs	r3, #36	; 0x24
 800be4a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800be4e:	6822      	ldr	r2, [r4, #0]
 800be50:	6813      	ldr	r3, [r2, #0]
 800be52:	f023 0301 	bic.w	r3, r3, #1
 800be56:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be58:	4620      	mov	r0, r4
 800be5a:	f7ff fb31 	bl	800b4c0 <UART_SetConfig>
 800be5e:	2801      	cmp	r0, #1
 800be60:	d01d      	beq.n	800be9e <HAL_RS485Ex_Init+0x6a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800be64:	bb0b      	cbnz	r3, 800beaa <HAL_RS485Ex_Init+0x76>
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800be66:	6822      	ldr	r2, [r4, #0]
 800be68:	6893      	ldr	r3, [r2, #8]
 800be6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be6e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800be70:	6822      	ldr	r2, [r4, #0]
 800be72:	6893      	ldr	r3, [r2, #8]
 800be74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800be78:	433b      	orrs	r3, r7
 800be7a:	6093      	str	r3, [r2, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800be7c:	042d      	lsls	r5, r5, #16
 800be7e:	ea45 5546 	orr.w	r5, r5, r6, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800be82:	6822      	ldr	r2, [r4, #0]
 800be84:	6811      	ldr	r1, [r2, #0]
 800be86:	4b0c      	ldr	r3, [pc, #48]	; (800beb8 <HAL_RS485Ex_Init+0x84>)
 800be88:	400b      	ands	r3, r1
 800be8a:	431d      	orrs	r5, r3
 800be8c:	6015      	str	r5, [r2, #0]
  __HAL_UART_ENABLE(huart);
 800be8e:	6822      	ldr	r2, [r4, #0]
 800be90:	6813      	ldr	r3, [r2, #0]
 800be92:	f043 0301 	orr.w	r3, r3, #1
 800be96:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800be98:	4620      	mov	r0, r4
 800be9a:	f7ff fede 	bl	800bc5a <UART_CheckIdleState>
}
 800be9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 800bea0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800bea4:	f7f6 fed4 	bl	8002c50 <HAL_UART_MspInit>
 800bea8:	e7ce      	b.n	800be48 <HAL_RS485Ex_Init+0x14>
    UART_AdvFeatureConfig(huart);
 800beaa:	4620      	mov	r0, r4
 800beac:	f7ff fe02 	bl	800bab4 <UART_AdvFeatureConfig>
 800beb0:	e7d9      	b.n	800be66 <HAL_RS485Ex_Init+0x32>
    return HAL_ERROR;
 800beb2:	2001      	movs	r0, #1
}
 800beb4:	4770      	bx	lr
 800beb6:	bf00      	nop
 800beb8:	fc00ffff 	.word	0xfc00ffff

0800bebc <HAL_UARTEx_WakeupCallback>:
}
 800bebc:	4770      	bx	lr

0800bebe <HAL_UARTEx_RxFifoFullCallback>:
}
 800bebe:	4770      	bx	lr

0800bec0 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800bec0:	4770      	bx	lr

0800bec2 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800bec2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d018      	beq.n	800befc <HAL_UARTEx_DisableFifoMode+0x3a>
 800beca:	2301      	movs	r3, #1
 800becc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800bed0:	2324      	movs	r3, #36	; 0x24
 800bed2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bed6:	6803      	ldr	r3, [r0, #0]
 800bed8:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800beda:	6819      	ldr	r1, [r3, #0]
 800bedc:	f021 0101 	bic.w	r1, r1, #1
 800bee0:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bee2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bee6:	2300      	movs	r3, #0
 800bee8:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800beea:	6801      	ldr	r1, [r0, #0]
 800beec:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800beee:	2220      	movs	r2, #32
 800bef0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800bef4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800bef8:	4618      	mov	r0, r3
 800befa:	4770      	bx	lr
  __HAL_LOCK(huart);
 800befc:	2002      	movs	r0, #2
}
 800befe:	4770      	bx	lr

0800bf00 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800bf00:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800bf02:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d01d      	beq.n	800bf46 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800bf0a:	4604      	mov	r4, r0
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800bf12:	2324      	movs	r3, #36	; 0x24
 800bf14:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf18:	6803      	ldr	r3, [r0, #0]
 800bf1a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	f022 0201 	bic.w	r2, r2, #1
 800bf22:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bf24:	6802      	ldr	r2, [r0, #0]
 800bf26:	6893      	ldr	r3, [r2, #8]
 800bf28:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800bf2c:	4319      	orrs	r1, r3
 800bf2e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800bf30:	f7ff ff5a 	bl	800bde8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf34:	6823      	ldr	r3, [r4, #0]
 800bf36:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800bf38:	2320      	movs	r3, #32
 800bf3a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800bf3e:	2000      	movs	r0, #0
 800bf40:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800bf44:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800bf46:	2002      	movs	r0, #2
 800bf48:	e7fc      	b.n	800bf44 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800bf4a <HAL_UARTEx_SetRxFifoThreshold>:
{
 800bf4a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800bf4c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d01d      	beq.n	800bf90 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800bf54:	4604      	mov	r4, r0
 800bf56:	2301      	movs	r3, #1
 800bf58:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800bf5c:	2324      	movs	r3, #36	; 0x24
 800bf5e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf62:	6803      	ldr	r3, [r0, #0]
 800bf64:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	f022 0201 	bic.w	r2, r2, #1
 800bf6c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bf6e:	6802      	ldr	r2, [r0, #0]
 800bf70:	6893      	ldr	r3, [r2, #8]
 800bf72:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800bf76:	4319      	orrs	r1, r3
 800bf78:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800bf7a:	f7ff ff35 	bl	800bde8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf7e:	6823      	ldr	r3, [r4, #0]
 800bf80:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800bf82:	2320      	movs	r3, #32
 800bf84:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800bf88:	2000      	movs	r0, #0
 800bf8a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800bf8e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800bf90:	2002      	movs	r0, #2
 800bf92:	e7fc      	b.n	800bf8e <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800bf94 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800bf94:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800bf98:	2b20      	cmp	r3, #32
 800bf9a:	d122      	bne.n	800bfe2 <HAL_UARTEx_ReceiveToIdle_DMA+0x4e>
{
 800bf9c:	b510      	push	{r4, lr}
 800bf9e:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800bfa0:	2a00      	cmp	r2, #0
 800bfa2:	bf18      	it	ne
 800bfa4:	2900      	cmpne	r1, #0
 800bfa6:	d01e      	beq.n	800bfe6 <HAL_UARTEx_ReceiveToIdle_DMA+0x52>
    __HAL_LOCK(huart);
 800bfa8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d01c      	beq.n	800bfea <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bfb6:	66c3      	str	r3, [r0, #108]	; 0x6c
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800bfb8:	f7ff febc 	bl	800bd34 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800bfbc:	b9a0      	cbnz	r0, 800bfe8 <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfbe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d001      	beq.n	800bfc8 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
        status = HAL_ERROR;
 800bfc4:	2001      	movs	r0, #1
    return status;
 800bfc6:	e00f      	b.n	800bfe8 <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bfc8:	6823      	ldr	r3, [r4, #0]
 800bfca:	2210      	movs	r2, #16
 800bfcc:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd0:	e852 3f00 	ldrex	r3, [r2]
 800bfd4:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd8:	e842 3100 	strex	r1, r3, [r2]
 800bfdc:	2900      	cmp	r1, #0
 800bfde:	d1f6      	bne.n	800bfce <HAL_UARTEx_ReceiveToIdle_DMA+0x3a>
 800bfe0:	e002      	b.n	800bfe8 <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
    return HAL_BUSY;
 800bfe2:	2002      	movs	r0, #2
}
 800bfe4:	4770      	bx	lr
      return HAL_ERROR;
 800bfe6:	2001      	movs	r0, #1
}
 800bfe8:	bd10      	pop	{r4, pc}
    __HAL_LOCK(huart);
 800bfea:	2002      	movs	r0, #2
 800bfec:	e7fc      	b.n	800bfe8 <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
	...

0800bff0 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bff0:	4b0b      	ldr	r3, [pc, #44]	; (800c020 <SDMMC_GetCmdError+0x30>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4a0b      	ldr	r2, [pc, #44]	; (800c024 <SDMMC_GetCmdError+0x34>)
 800bff6:	fba2 2303 	umull	r2, r3, r2, r3
 800bffa:	0a5b      	lsrs	r3, r3, #9
 800bffc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c000:	fb02 f303 	mul.w	r3, r2, r3

  do
  {
    if (count-- == 0U)
 800c004:	461a      	mov	r2, r3
 800c006:	3b01      	subs	r3, #1
 800c008:	b13a      	cbz	r2, 800c01a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c00a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800c00c:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c010:	d0f8      	beq.n	800c004 <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c012:	4b05      	ldr	r3, [pc, #20]	; (800c028 <SDMMC_GetCmdError+0x38>)
 800c014:	6383      	str	r3, [r0, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c016:	2000      	movs	r0, #0
 800c018:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800c01a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c01e:	4770      	bx	lr
 800c020:	24000000 	.word	0x24000000
 800c024:	10624dd3 	.word	0x10624dd3
 800c028:	002000c5 	.word	0x002000c5

0800c02c <SDMMC_Init>:
{
 800c02c:	b084      	sub	sp, #16
 800c02e:	f10d 0c04 	add.w	ip, sp, #4
 800c032:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800c036:	460b      	mov	r3, r1
 800c038:	4313      	orrs	r3, r2
             Init.BusWide             | \
 800c03a:	9a03      	ldr	r2, [sp, #12]
             Init.ClockPowerSave      | \
 800c03c:	4313      	orrs	r3, r2
             Init.HardwareFlowControl | \
 800c03e:	9a04      	ldr	r2, [sp, #16]
             Init.BusWide             | \
 800c040:	4313      	orrs	r3, r2
             Init.ClockDiv
 800c042:	9a05      	ldr	r2, [sp, #20]
             Init.HardwareFlowControl | \
 800c044:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c046:	6841      	ldr	r1, [r0, #4]
 800c048:	4a03      	ldr	r2, [pc, #12]	; (800c058 <SDMMC_Init+0x2c>)
 800c04a:	400a      	ands	r2, r1
 800c04c:	4313      	orrs	r3, r2
 800c04e:	6043      	str	r3, [r0, #4]
}
 800c050:	2000      	movs	r0, #0
 800c052:	b004      	add	sp, #16
 800c054:	4770      	bx	lr
 800c056:	bf00      	nop
 800c058:	ffc02c00 	.word	0xffc02c00

0800c05c <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800c05c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800c060:	4770      	bx	lr

0800c062 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800c062:	680b      	ldr	r3, [r1, #0]
 800c064:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800c068:	2000      	movs	r0, #0
 800c06a:	4770      	bx	lr

0800c06c <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c06c:	6803      	ldr	r3, [r0, #0]
 800c06e:	f043 0303 	orr.w	r3, r3, #3
 800c072:	6003      	str	r3, [r0, #0]
}
 800c074:	2000      	movs	r0, #0
 800c076:	4770      	bx	lr

0800c078 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c078:	6800      	ldr	r0, [r0, #0]
}
 800c07a:	f000 0003 	and.w	r0, r0, #3
 800c07e:	4770      	bx	lr

0800c080 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 800c080:	680b      	ldr	r3, [r1, #0]
 800c082:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c084:	684b      	ldr	r3, [r1, #4]
                       Command->Response         | \
 800c086:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c088:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt | \
 800c08a:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         | \
 800c08c:	4313      	orrs	r3, r2
                       Command->CPSM);
 800c08e:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt | \
 800c090:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c092:	68c1      	ldr	r1, [r0, #12]
 800c094:	4a02      	ldr	r2, [pc, #8]	; (800c0a0 <SDMMC_SendCommand+0x20>)
 800c096:	400a      	ands	r2, r1
 800c098:	4313      	orrs	r3, r2
 800c09a:	60c3      	str	r3, [r0, #12]
}
 800c09c:	2000      	movs	r0, #0
 800c09e:	4770      	bx	lr
 800c0a0:	fffee0c0 	.word	0xfffee0c0

0800c0a4 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 800c0a4:	6900      	ldr	r0, [r0, #16]
}
 800c0a6:	b2c0      	uxtb	r0, r0
 800c0a8:	4770      	bx	lr

0800c0aa <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c0aa:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800c0ac:	5840      	ldr	r0, [r0, r1]
}
 800c0ae:	4770      	bx	lr

0800c0b0 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c0b0:	680b      	ldr	r3, [r1, #0]
 800c0b2:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800c0b4:	684b      	ldr	r3, [r1, #4]
 800c0b6:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c0b8:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   | \
 800c0ba:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c0bc:	4313      	orrs	r3, r2
                       Data->TransferMode  | \
 800c0be:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   | \
 800c0c0:	4313      	orrs	r3, r2
                       Data->DPSM);
 800c0c2:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  | \
 800c0c4:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c0c6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800c0c8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800c0d0:	2000      	movs	r0, #0
 800c0d2:	4770      	bx	lr

0800c0d4 <SDMMC_CmdGoIdleState>:
{
 800c0d4:	b510      	push	{r4, lr}
 800c0d6:	b086      	sub	sp, #24
 800c0d8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c0de:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c0e0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0e2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0e8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0ea:	a901      	add	r1, sp, #4
 800c0ec:	f7ff ffc8 	bl	800c080 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	f7ff ff7d 	bl	800bff0 <SDMMC_GetCmdError>
}
 800c0f6:	b006      	add	sp, #24
 800c0f8:	bd10      	pop	{r4, pc}
	...

0800c0fc <SDMMC_GetCmdResp1>:
{
 800c0fc:	b570      	push	{r4, r5, r6, lr}
 800c0fe:	4605      	mov	r5, r0
 800c100:	460e      	mov	r6, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c102:	4b51      	ldr	r3, [pc, #324]	; (800c248 <SDMMC_GetCmdResp1+0x14c>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4951      	ldr	r1, [pc, #324]	; (800c24c <SDMMC_GetCmdResp1+0x150>)
 800c108:	fba1 1303 	umull	r1, r3, r1, r3
 800c10c:	0a5b      	lsrs	r3, r3, #9
 800c10e:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 800c112:	4613      	mov	r3, r2
 800c114:	3a01      	subs	r2, #1
 800c116:	2b00      	cmp	r3, #0
 800c118:	d05e      	beq.n	800c1d8 <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDMMCx->STA;
 800c11a:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c11c:	4b4c      	ldr	r3, [pc, #304]	; (800c250 <SDMMC_GetCmdResp1+0x154>)
 800c11e:	4023      	ands	r3, r4
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c120:	2b00      	cmp	r3, #0
 800c122:	d0f6      	beq.n	800c112 <SDMMC_GetCmdResp1+0x16>
 800c124:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 800c128:	d1f3      	bne.n	800c112 <SDMMC_GetCmdResp1+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c12a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c12c:	f013 0f04 	tst.w	r3, #4
 800c130:	d106      	bne.n	800c140 <SDMMC_GetCmdResp1+0x44>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c132:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c134:	f013 0f01 	tst.w	r3, #1
 800c138:	d005      	beq.n	800c146 <SDMMC_GetCmdResp1+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c13a:	2001      	movs	r0, #1
 800c13c:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c13e:	e04d      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c140:	2004      	movs	r0, #4
 800c142:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c144:	e04a      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c146:	4b43      	ldr	r3, [pc, #268]	; (800c254 <SDMMC_GetCmdResp1+0x158>)
 800c148:	63ab      	str	r3, [r5, #56]	; 0x38
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c14a:	4628      	mov	r0, r5
 800c14c:	f7ff ffaa 	bl	800c0a4 <SDMMC_GetCommandResponse>
 800c150:	42b0      	cmp	r0, r6
 800c152:	d001      	beq.n	800c158 <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c154:	2001      	movs	r0, #1
 800c156:	e041      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c158:	2100      	movs	r1, #0
 800c15a:	4628      	mov	r0, r5
 800c15c:	f7ff ffa5 	bl	800c0aa <SDMMC_GetResponse>
 800c160:	4603      	mov	r3, r0
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c162:	483d      	ldr	r0, [pc, #244]	; (800c258 <SDMMC_GetCmdResp1+0x15c>)
 800c164:	4018      	ands	r0, r3
 800c166:	b3c8      	cbz	r0, 800c1dc <SDMMC_GetCmdResp1+0xe0>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c168:	2b00      	cmp	r3, #0
 800c16a:	db38      	blt.n	800c1de <SDMMC_GetCmdResp1+0xe2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c16c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c170:	d138      	bne.n	800c1e4 <SDMMC_GetCmdResp1+0xe8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c172:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800c176:	d137      	bne.n	800c1e8 <SDMMC_GetCmdResp1+0xec>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c178:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800c17c:	d136      	bne.n	800c1ec <SDMMC_GetCmdResp1+0xf0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c17e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800c182:	d136      	bne.n	800c1f2 <SDMMC_GetCmdResp1+0xf6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c184:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800c188:	d136      	bne.n	800c1f8 <SDMMC_GetCmdResp1+0xfc>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c18a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800c18e:	d136      	bne.n	800c1fe <SDMMC_GetCmdResp1+0x102>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c190:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800c194:	d136      	bne.n	800c204 <SDMMC_GetCmdResp1+0x108>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c196:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800c19a:	d136      	bne.n	800c20a <SDMMC_GetCmdResp1+0x10e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c19c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800c1a0:	d136      	bne.n	800c210 <SDMMC_GetCmdResp1+0x114>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c1a2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c1a6:	d136      	bne.n	800c216 <SDMMC_GetCmdResp1+0x11a>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c1a8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800c1ac:	d136      	bne.n	800c21c <SDMMC_GetCmdResp1+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c1ae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800c1b2:	d136      	bne.n	800c222 <SDMMC_GetCmdResp1+0x126>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c1b4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800c1b8:	d136      	bne.n	800c228 <SDMMC_GetCmdResp1+0x12c>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c1ba:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800c1be:	d136      	bne.n	800c22e <SDMMC_GetCmdResp1+0x132>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c1c0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800c1c4:	d136      	bne.n	800c234 <SDMMC_GetCmdResp1+0x138>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c1c6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800c1ca:	d136      	bne.n	800c23a <SDMMC_GetCmdResp1+0x13e>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c1cc:	f013 0f08 	tst.w	r3, #8
 800c1d0:	d036      	beq.n	800c240 <SDMMC_GetCmdResp1+0x144>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c1d2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800c1d6:	e001      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
 800c1d8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c1dc:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c1de:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c1e2:	e7fb      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c1e4:	2040      	movs	r0, #64	; 0x40
 800c1e6:	e7f9      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c1e8:	2080      	movs	r0, #128	; 0x80
 800c1ea:	e7f7      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c1ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c1f0:	e7f4      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c1f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c1f6:	e7f1      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c1f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c1fc:	e7ee      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c1fe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c202:	e7eb      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c204:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c208:	e7e8      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c20a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c20e:	e7e5      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c210:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c214:	e7e2      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
 800c216:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c21a:	e7df      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c21c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c220:	e7dc      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c222:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c226:	e7d9      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c228:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c22c:	e7d6      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c22e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c232:	e7d3      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c234:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c238:	e7d0      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
 800c23a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800c23e:	e7cd      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c240:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c244:	e7ca      	b.n	800c1dc <SDMMC_GetCmdResp1+0xe0>
 800c246:	bf00      	nop
 800c248:	24000000 	.word	0x24000000
 800c24c:	10624dd3 	.word	0x10624dd3
 800c250:	00200045 	.word	0x00200045
 800c254:	002000c5 	.word	0x002000c5
 800c258:	fdffe008 	.word	0xfdffe008

0800c25c <SDMMC_CmdBlockLength>:
{
 800c25c:	b530      	push	{r4, r5, lr}
 800c25e:	b087      	sub	sp, #28
 800c260:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c262:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c264:	2510      	movs	r5, #16
 800c266:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c268:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c26c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c26e:	2300      	movs	r3, #0
 800c270:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c276:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c278:	a901      	add	r1, sp, #4
 800c27a:	f7ff ff01 	bl	800c080 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c27e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c282:	4629      	mov	r1, r5
 800c284:	4620      	mov	r0, r4
 800c286:	f7ff ff39 	bl	800c0fc <SDMMC_GetCmdResp1>
}
 800c28a:	b007      	add	sp, #28
 800c28c:	bd30      	pop	{r4, r5, pc}
	...

0800c290 <SDMMC_CmdStopTransfer>:
{
 800c290:	b530      	push	{r4, r5, lr}
 800c292:	b087      	sub	sp, #28
 800c294:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800c296:	2300      	movs	r3, #0
 800c298:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c29a:	250c      	movs	r5, #12
 800c29c:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c29e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c2a2:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2a4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2aa:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c2ac:	68c3      	ldr	r3, [r0, #12]
 800c2ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2b2:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c2b4:	68c3      	ldr	r3, [r0, #12]
 800c2b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2ba:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2bc:	a901      	add	r1, sp, #4
 800c2be:	f7ff fedf 	bl	800c080 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c2c2:	4a08      	ldr	r2, [pc, #32]	; (800c2e4 <SDMMC_CmdStopTransfer+0x54>)
 800c2c4:	4629      	mov	r1, r5
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	f7ff ff18 	bl	800c0fc <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c2cc:	68e3      	ldr	r3, [r4, #12]
 800c2ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2d2:	60e3      	str	r3, [r4, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c2d4:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800c2d8:	d001      	beq.n	800c2de <SDMMC_CmdStopTransfer+0x4e>
}
 800c2da:	b007      	add	sp, #28
 800c2dc:	bd30      	pop	{r4, r5, pc}
    errorstate = SDMMC_ERROR_NONE;
 800c2de:	2000      	movs	r0, #0
  return errorstate;
 800c2e0:	e7fb      	b.n	800c2da <SDMMC_CmdStopTransfer+0x4a>
 800c2e2:	bf00      	nop
 800c2e4:	05f5e100 	.word	0x05f5e100

0800c2e8 <SDMMC_CmdSelDesel>:
{
 800c2e8:	b530      	push	{r4, r5, lr}
 800c2ea:	b087      	sub	sp, #28
 800c2ec:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c2ee:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c2f0:	2507      	movs	r5, #7
 800c2f2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c2f8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c302:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c304:	a901      	add	r1, sp, #4
 800c306:	f7ff febb 	bl	800c080 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c30a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c30e:	4629      	mov	r1, r5
 800c310:	4620      	mov	r0, r4
 800c312:	f7ff fef3 	bl	800c0fc <SDMMC_GetCmdResp1>
}
 800c316:	b007      	add	sp, #28
 800c318:	bd30      	pop	{r4, r5, pc}

0800c31a <SDMMC_CmdAppCommand>:
{
 800c31a:	b530      	push	{r4, r5, lr}
 800c31c:	b087      	sub	sp, #28
 800c31e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c320:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c322:	2537      	movs	r5, #55	; 0x37
 800c324:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c32a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c32c:	2300      	movs	r3, #0
 800c32e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c334:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c336:	a901      	add	r1, sp, #4
 800c338:	f7ff fea2 	bl	800c080 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c33c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c340:	4629      	mov	r1, r5
 800c342:	4620      	mov	r0, r4
 800c344:	f7ff feda 	bl	800c0fc <SDMMC_GetCmdResp1>
}
 800c348:	b007      	add	sp, #28
 800c34a:	bd30      	pop	{r4, r5, pc}

0800c34c <SDMMC_CmdBusWidth>:
{
 800c34c:	b530      	push	{r4, r5, lr}
 800c34e:	b087      	sub	sp, #28
 800c350:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c352:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c354:	2506      	movs	r5, #6
 800c356:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c358:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c35c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c35e:	2300      	movs	r3, #0
 800c360:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c366:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c368:	a901      	add	r1, sp, #4
 800c36a:	f7ff fe89 	bl	800c080 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c36e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c372:	4629      	mov	r1, r5
 800c374:	4620      	mov	r0, r4
 800c376:	f7ff fec1 	bl	800c0fc <SDMMC_GetCmdResp1>
}
 800c37a:	b007      	add	sp, #28
 800c37c:	bd30      	pop	{r4, r5, pc}

0800c37e <SDMMC_CmdSendSCR>:
{
 800c37e:	b530      	push	{r4, r5, lr}
 800c380:	b087      	sub	sp, #28
 800c382:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800c384:	2300      	movs	r3, #0
 800c386:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c388:	2533      	movs	r5, #51	; 0x33
 800c38a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c38c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c390:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c392:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c398:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c39a:	a901      	add	r1, sp, #4
 800c39c:	f7ff fe70 	bl	800c080 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c3a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3a4:	4629      	mov	r1, r5
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	f7ff fea8 	bl	800c0fc <SDMMC_GetCmdResp1>
}
 800c3ac:	b007      	add	sp, #28
 800c3ae:	bd30      	pop	{r4, r5, pc}

0800c3b0 <SDMMC_CmdSendStatus>:
{
 800c3b0:	b530      	push	{r4, r5, lr}
 800c3b2:	b087      	sub	sp, #28
 800c3b4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800c3b6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c3b8:	250d      	movs	r5, #13
 800c3ba:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3c0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3ca:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3cc:	a901      	add	r1, sp, #4
 800c3ce:	f7ff fe57 	bl	800c080 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c3d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3d6:	4629      	mov	r1, r5
 800c3d8:	4620      	mov	r0, r4
 800c3da:	f7ff fe8f 	bl	800c0fc <SDMMC_GetCmdResp1>
}
 800c3de:	b007      	add	sp, #28
 800c3e0:	bd30      	pop	{r4, r5, pc}

0800c3e2 <SDMMC_CmdStatusRegister>:
{
 800c3e2:	b530      	push	{r4, r5, lr}
 800c3e4:	b087      	sub	sp, #28
 800c3e6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c3ec:	250d      	movs	r5, #13
 800c3ee:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c3f4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3f6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3fc:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3fe:	a901      	add	r1, sp, #4
 800c400:	f7ff fe3e 	bl	800c080 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c404:	f241 3288 	movw	r2, #5000	; 0x1388
 800c408:	4629      	mov	r1, r5
 800c40a:	4620      	mov	r0, r4
 800c40c:	f7ff fe76 	bl	800c0fc <SDMMC_GetCmdResp1>
}
 800c410:	b007      	add	sp, #28
 800c412:	bd30      	pop	{r4, r5, pc}

0800c414 <SDMMC_GetCmdResp2>:
{
 800c414:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c416:	4b14      	ldr	r3, [pc, #80]	; (800c468 <SDMMC_GetCmdResp2+0x54>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a14      	ldr	r2, [pc, #80]	; (800c46c <SDMMC_GetCmdResp2+0x58>)
 800c41c:	fba2 2303 	umull	r2, r3, r2, r3
 800c420:	0a5b      	lsrs	r3, r3, #9
 800c422:	f241 3288 	movw	r2, #5000	; 0x1388
 800c426:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800c42a:	461a      	mov	r2, r3
 800c42c:	3b01      	subs	r3, #1
 800c42e:	b1ba      	cbz	r2, 800c460 <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDMMCx->STA;
 800c430:	6b4a      	ldr	r2, [r1, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c432:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c436:	d0f8      	beq.n	800c42a <SDMMC_GetCmdResp2+0x16>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c438:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800c43c:	d1f5      	bne.n	800c42a <SDMMC_GetCmdResp2+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c43e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c440:	f013 0f04 	tst.w	r3, #4
 800c444:	d106      	bne.n	800c454 <SDMMC_GetCmdResp2+0x40>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c446:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800c448:	f010 0001 	ands.w	r0, r0, #1
 800c44c:	d105      	bne.n	800c45a <SDMMC_GetCmdResp2+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c44e:	4b08      	ldr	r3, [pc, #32]	; (800c470 <SDMMC_GetCmdResp2+0x5c>)
 800c450:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800c452:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c454:	2004      	movs	r0, #4
 800c456:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c458:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c45a:	2001      	movs	r0, #1
 800c45c:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c45e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800c460:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop
 800c468:	24000000 	.word	0x24000000
 800c46c:	10624dd3 	.word	0x10624dd3
 800c470:	002000c5 	.word	0x002000c5

0800c474 <SDMMC_CmdSendCID>:
{
 800c474:	b510      	push	{r4, lr}
 800c476:	b086      	sub	sp, #24
 800c478:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800c47a:	2300      	movs	r3, #0
 800c47c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c47e:	2202      	movs	r2, #2
 800c480:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c482:	f44f 7240 	mov.w	r2, #768	; 0x300
 800c486:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c488:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c48a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c48e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c490:	a901      	add	r1, sp, #4
 800c492:	f7ff fdf5 	bl	800c080 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c496:	4620      	mov	r0, r4
 800c498:	f7ff ffbc 	bl	800c414 <SDMMC_GetCmdResp2>
}
 800c49c:	b006      	add	sp, #24
 800c49e:	bd10      	pop	{r4, pc}

0800c4a0 <SDMMC_CmdSendCSD>:
{
 800c4a0:	b510      	push	{r4, lr}
 800c4a2:	b086      	sub	sp, #24
 800c4a4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800c4a6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c4a8:	2309      	movs	r3, #9
 800c4aa:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c4ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c4b0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c4ba:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4bc:	a901      	add	r1, sp, #4
 800c4be:	f7ff fddf 	bl	800c080 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f7ff ffa6 	bl	800c414 <SDMMC_GetCmdResp2>
}
 800c4c8:	b006      	add	sp, #24
 800c4ca:	bd10      	pop	{r4, pc}

0800c4cc <SDMMC_GetCmdResp3>:
{
 800c4cc:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c4ce:	4b10      	ldr	r3, [pc, #64]	; (800c510 <SDMMC_GetCmdResp3+0x44>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a10      	ldr	r2, [pc, #64]	; (800c514 <SDMMC_GetCmdResp3+0x48>)
 800c4d4:	fba2 2303 	umull	r2, r3, r2, r3
 800c4d8:	0a5b      	lsrs	r3, r3, #9
 800c4da:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4de:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	b182      	cbz	r2, 800c50a <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDMMCx->STA;
 800c4e8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c4ea:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c4ee:	d0f8      	beq.n	800c4e2 <SDMMC_GetCmdResp3+0x16>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4f0:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800c4f4:	d1f5      	bne.n	800c4e2 <SDMMC_GetCmdResp3+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c4f6:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800c4f8:	f010 0004 	ands.w	r0, r0, #4
 800c4fc:	d102      	bne.n	800c504 <SDMMC_GetCmdResp3+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c4fe:	4b06      	ldr	r3, [pc, #24]	; (800c518 <SDMMC_GetCmdResp3+0x4c>)
 800c500:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800c502:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c504:	2004      	movs	r0, #4
 800c506:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c508:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800c50a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c50e:	4770      	bx	lr
 800c510:	24000000 	.word	0x24000000
 800c514:	10624dd3 	.word	0x10624dd3
 800c518:	002000c5 	.word	0x002000c5

0800c51c <SDMMC_CmdAppOperCommand>:
{
 800c51c:	b510      	push	{r4, lr}
 800c51e:	b086      	sub	sp, #24
 800c520:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800c522:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c524:	2329      	movs	r3, #41	; 0x29
 800c526:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c52c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c52e:	2300      	movs	r3, #0
 800c530:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c536:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c538:	a901      	add	r1, sp, #4
 800c53a:	f7ff fda1 	bl	800c080 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c53e:	4620      	mov	r0, r4
 800c540:	f7ff ffc4 	bl	800c4cc <SDMMC_GetCmdResp3>
}
 800c544:	b006      	add	sp, #24
 800c546:	bd10      	pop	{r4, pc}

0800c548 <SDMMC_GetCmdResp6>:
{
 800c548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54a:	4605      	mov	r5, r0
 800c54c:	460e      	mov	r6, r1
 800c54e:	4617      	mov	r7, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c550:	4b23      	ldr	r3, [pc, #140]	; (800c5e0 <SDMMC_GetCmdResp6+0x98>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4a23      	ldr	r2, [pc, #140]	; (800c5e4 <SDMMC_GetCmdResp6+0x9c>)
 800c556:	fba2 2303 	umull	r2, r3, r2, r3
 800c55a:	0a5b      	lsrs	r3, r3, #9
 800c55c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c560:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800c564:	461a      	mov	r2, r3
 800c566:	3b01      	subs	r3, #1
 800c568:	b38a      	cbz	r2, 800c5ce <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDMMCx->STA;
 800c56a:	6b6c      	ldr	r4, [r5, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c56c:	f014 0f45 	tst.w	r4, #69	; 0x45
 800c570:	d0f8      	beq.n	800c564 <SDMMC_GetCmdResp6+0x1c>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c572:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 800c576:	d1f5      	bne.n	800c564 <SDMMC_GetCmdResp6+0x1c>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c578:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c57a:	f013 0f04 	tst.w	r3, #4
 800c57e:	d106      	bne.n	800c58e <SDMMC_GetCmdResp6+0x46>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c580:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c582:	f013 0f01 	tst.w	r3, #1
 800c586:	d005      	beq.n	800c594 <SDMMC_GetCmdResp6+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c588:	2001      	movs	r0, #1
 800c58a:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c58c:	e021      	b.n	800c5d2 <SDMMC_GetCmdResp6+0x8a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c58e:	2004      	movs	r0, #4
 800c590:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c592:	e01e      	b.n	800c5d2 <SDMMC_GetCmdResp6+0x8a>
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c594:	4628      	mov	r0, r5
 800c596:	f7ff fd85 	bl	800c0a4 <SDMMC_GetCommandResponse>
 800c59a:	42b0      	cmp	r0, r6
 800c59c:	d001      	beq.n	800c5a2 <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c59e:	2001      	movs	r0, #1
 800c5a0:	e017      	b.n	800c5d2 <SDMMC_GetCmdResp6+0x8a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5a2:	4b11      	ldr	r3, [pc, #68]	; (800c5e8 <SDMMC_GetCmdResp6+0xa0>)
 800c5a4:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	f7ff fd7e 	bl	800c0aa <SDMMC_GetResponse>
 800c5ae:	4603      	mov	r3, r0
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c5b0:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
 800c5b4:	d008      	beq.n	800c5c8 <SDMMC_GetCmdResp6+0x80>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c5b6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800c5ba:	d10b      	bne.n	800c5d4 <SDMMC_GetCmdResp6+0x8c>
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c5bc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800c5c0:	d00b      	beq.n	800c5da <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c5c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c5c6:	e004      	b.n	800c5d2 <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c5c8:	0c1b      	lsrs	r3, r3, #16
 800c5ca:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 800c5cc:	e001      	b.n	800c5d2 <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 800c5ce:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c5d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c5d8:	e7fb      	b.n	800c5d2 <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c5da:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c5de:	e7f8      	b.n	800c5d2 <SDMMC_GetCmdResp6+0x8a>
 800c5e0:	24000000 	.word	0x24000000
 800c5e4:	10624dd3 	.word	0x10624dd3
 800c5e8:	002000c5 	.word	0x002000c5

0800c5ec <SDMMC_CmdSetRelAdd>:
{
 800c5ec:	b570      	push	{r4, r5, r6, lr}
 800c5ee:	b086      	sub	sp, #24
 800c5f0:	4604      	mov	r4, r0
 800c5f2:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c5f8:	2603      	movs	r6, #3
 800c5fa:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c600:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c602:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c608:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c60a:	a901      	add	r1, sp, #4
 800c60c:	f7ff fd38 	bl	800c080 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c610:	462a      	mov	r2, r5
 800c612:	4631      	mov	r1, r6
 800c614:	4620      	mov	r0, r4
 800c616:	f7ff ff97 	bl	800c548 <SDMMC_GetCmdResp6>
}
 800c61a:	b006      	add	sp, #24
 800c61c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c620 <SDMMC_GetCmdResp7>:
{
 800c620:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c622:	4b16      	ldr	r3, [pc, #88]	; (800c67c <SDMMC_GetCmdResp7+0x5c>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a16      	ldr	r2, [pc, #88]	; (800c680 <SDMMC_GetCmdResp7+0x60>)
 800c628:	fba2 2303 	umull	r2, r3, r2, r3
 800c62c:	0a5b      	lsrs	r3, r3, #9
 800c62e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c632:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800c636:	461a      	mov	r2, r3
 800c638:	3b01      	subs	r3, #1
 800c63a:	b1e2      	cbz	r2, 800c676 <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDMMCx->STA;
 800c63c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c63e:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c642:	d0f8      	beq.n	800c636 <SDMMC_GetCmdResp7+0x16>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c644:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800c648:	d1f5      	bne.n	800c636 <SDMMC_GetCmdResp7+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c64a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c64c:	f013 0f04 	tst.w	r3, #4
 800c650:	d10b      	bne.n	800c66a <SDMMC_GetCmdResp7+0x4a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c652:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c654:	f013 0301 	ands.w	r3, r3, #1
 800c658:	d10a      	bne.n	800c670 <SDMMC_GetCmdResp7+0x50>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c65a:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800c65c:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800c660:	d00b      	beq.n	800c67a <SDMMC_GetCmdResp7+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c662:	2240      	movs	r2, #64	; 0x40
 800c664:	638a      	str	r2, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800c666:	4618      	mov	r0, r3
 800c668:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c66a:	2004      	movs	r0, #4
 800c66c:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c66e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c670:	2001      	movs	r0, #1
 800c672:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c674:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800c676:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c67a:	4770      	bx	lr
 800c67c:	24000000 	.word	0x24000000
 800c680:	10624dd3 	.word	0x10624dd3

0800c684 <SDMMC_CmdOperCond>:
{
 800c684:	b510      	push	{r4, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c68a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c68e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c690:	2308      	movs	r3, #8
 800c692:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c694:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c698:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c69a:	2300      	movs	r3, #0
 800c69c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c69e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6a2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6a4:	a901      	add	r1, sp, #4
 800c6a6:	f7ff fceb 	bl	800c080 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	f7ff ffb8 	bl	800c620 <SDMMC_GetCmdResp7>
}
 800c6b0:	b006      	add	sp, #24
 800c6b2:	bd10      	pop	{r4, pc}

0800c6b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c6b4:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800c6b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c6ba:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c6bc:	f001 fbf8 	bl	800deb0 <xTaskGetSchedulerState>
 800c6c0:	2801      	cmp	r0, #1
 800c6c2:	d100      	bne.n	800c6c6 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800c6c4:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 800c6c6:	f001 fffd 	bl	800e6c4 <xPortSysTickHandler>
}
 800c6ca:	e7fb      	b.n	800c6c4 <SysTick_Handler+0x10>

0800c6cc <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6cc:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800c6d0:	b92b      	cbnz	r3, 800c6de <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800c6d2:	4b06      	ldr	r3, [pc, #24]	; (800c6ec <osKernelInitialize+0x20>)
 800c6d4:	6818      	ldr	r0, [r3, #0]
 800c6d6:	b928      	cbnz	r0, 800c6e4 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c6d8:	2201      	movs	r2, #1
 800c6da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c6dc:	4770      	bx	lr
    stat = osErrorISR;
 800c6de:	f06f 0005 	mvn.w	r0, #5
 800c6e2:	4770      	bx	lr
    } else {
      stat = osError;
 800c6e4:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800c6e8:	4770      	bx	lr
 800c6ea:	bf00      	nop
 800c6ec:	240028bc 	.word	0x240028bc

0800c6f0 <osKernelStart>:
 800c6f0:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800c6f4:	b973      	cbnz	r3, 800c714 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800c6f6:	4b0a      	ldr	r3, [pc, #40]	; (800c720 <osKernelStart+0x30>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d10d      	bne.n	800c71a <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800c6fe:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c700:	2400      	movs	r4, #0
 800c702:	4b08      	ldr	r3, [pc, #32]	; (800c724 <osKernelStart+0x34>)
 800c704:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c706:	4b06      	ldr	r3, [pc, #24]	; (800c720 <osKernelStart+0x30>)
 800c708:	2202      	movs	r2, #2
 800c70a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c70c:	f001 f920 	bl	800d950 <vTaskStartScheduler>
      stat = osOK;
 800c710:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800c712:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800c714:	f06f 0005 	mvn.w	r0, #5
 800c718:	4770      	bx	lr
      stat = osError;
 800c71a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c71e:	4770      	bx	lr
 800c720:	240028bc 	.word	0x240028bc
 800c724:	e000ed00 	.word	0xe000ed00

0800c728 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c72a:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c72c:	2400      	movs	r4, #0
 800c72e:	9405      	str	r4, [sp, #20]
 800c730:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800c734:	bb74      	cbnz	r4, 800c794 <osThreadNew+0x6c>
 800c736:	b368      	cbz	r0, 800c794 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800c738:	b322      	cbz	r2, 800c784 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 800c73a:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800c73c:	6993      	ldr	r3, [r2, #24]
 800c73e:	b903      	cbnz	r3, 800c742 <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 800c740:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c742:	1e5c      	subs	r4, r3, #1
 800c744:	2c37      	cmp	r4, #55	; 0x37
 800c746:	d849      	bhi.n	800c7dc <osThreadNew+0xb4>
 800c748:	6854      	ldr	r4, [r2, #4]
 800c74a:	f014 0f01 	tst.w	r4, #1
 800c74e:	d147      	bne.n	800c7e0 <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800c750:	6956      	ldr	r6, [r2, #20]
 800c752:	b16e      	cbz	r6, 800c770 <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c754:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c758:	6894      	ldr	r4, [r2, #8]
 800c75a:	b12c      	cbz	r4, 800c768 <osThreadNew+0x40>
 800c75c:	68d7      	ldr	r7, [r2, #12]
 800c75e:	2fbb      	cmp	r7, #187	; 0xbb
 800c760:	d902      	bls.n	800c768 <osThreadNew+0x40>
 800c762:	6917      	ldr	r7, [r2, #16]
 800c764:	b107      	cbz	r7, 800c768 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c766:	b9c6      	cbnz	r6, 800c79a <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c768:	b12c      	cbz	r4, 800c776 <osThreadNew+0x4e>
    mem  = -1;
 800c76a:	f04f 34ff 	mov.w	r4, #4294967295
 800c76e:	e00e      	b.n	800c78e <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 800c770:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800c774:	e7f0      	b.n	800c758 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c776:	68d4      	ldr	r4, [r2, #12]
 800c778:	b98c      	cbnz	r4, 800c79e <osThreadNew+0x76>
 800c77a:	6914      	ldr	r4, [r2, #16]
 800c77c:	b194      	cbz	r4, 800c7a4 <osThreadNew+0x7c>
    mem  = -1;
 800c77e:	f04f 34ff 	mov.w	r4, #4294967295
 800c782:	e004      	b.n	800c78e <osThreadNew+0x66>
    name = NULL;
 800c784:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800c786:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800c788:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800c78a:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 800c78e:	2c01      	cmp	r4, #1
 800c790:	d00a      	beq.n	800c7a8 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800c792:	b1ac      	cbz	r4, 800c7c0 <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c794:	9805      	ldr	r0, [sp, #20]
}
 800c796:	b007      	add	sp, #28
 800c798:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800c79a:	2401      	movs	r4, #1
 800c79c:	e7f7      	b.n	800c78e <osThreadNew+0x66>
    mem  = -1;
 800c79e:	f04f 34ff 	mov.w	r4, #4294967295
 800c7a2:	e7f4      	b.n	800c78e <osThreadNew+0x66>
          mem = 0;
 800c7a4:	2400      	movs	r4, #0
 800c7a6:	e7f2      	b.n	800c78e <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c7a8:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c7aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c7ac:	9202      	str	r2, [sp, #8]
 800c7ae:	9401      	str	r4, [sp, #4]
 800c7b0:	9300      	str	r3, [sp, #0]
 800c7b2:	460b      	mov	r3, r1
 800c7b4:	4662      	mov	r2, ip
 800c7b6:	4629      	mov	r1, r5
 800c7b8:	f001 f85a 	bl	800d870 <xTaskCreateStatic>
 800c7bc:	9005      	str	r0, [sp, #20]
 800c7be:	e7e9      	b.n	800c794 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c7c0:	aa05      	add	r2, sp, #20
 800c7c2:	9201      	str	r2, [sp, #4]
 800c7c4:	9300      	str	r3, [sp, #0]
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	fa1f f28c 	uxth.w	r2, ip
 800c7cc:	4629      	mov	r1, r5
 800c7ce:	f001 f88a 	bl	800d8e6 <xTaskCreate>
 800c7d2:	2801      	cmp	r0, #1
 800c7d4:	d0de      	beq.n	800c794 <osThreadNew+0x6c>
            hTask = NULL;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	9305      	str	r3, [sp, #20]
 800c7da:	e7db      	b.n	800c794 <osThreadNew+0x6c>
        return (NULL);
 800c7dc:	2000      	movs	r0, #0
 800c7de:	e7da      	b.n	800c796 <osThreadNew+0x6e>
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	e7d8      	b.n	800c796 <osThreadNew+0x6e>

0800c7e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c7e4:	b508      	push	{r3, lr}
 800c7e6:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800c7ea:	b933      	cbnz	r3, 800c7fa <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800c7ec:	b908      	cbnz	r0, 800c7f2 <osDelay+0xe>
    stat = osOK;
 800c7ee:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800c7f0:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800c7f2:	f001 fa19 	bl	800dc28 <vTaskDelay>
    stat = osOK;
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	e7fa      	b.n	800c7f0 <osDelay+0xc>
    stat = osErrorISR;
 800c7fa:	f06f 0005 	mvn.w	r0, #5
 800c7fe:	e7f7      	b.n	800c7f0 <osDelay+0xc>

0800c800 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c800:	b570      	push	{r4, r5, r6, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d14d      	bne.n	800c8a8 <osSemaphoreNew+0xa8>
 800c80c:	460e      	mov	r6, r1
 800c80e:	4614      	mov	r4, r2
 800c810:	4288      	cmp	r0, r1
 800c812:	bf34      	ite	cc
 800c814:	2300      	movcc	r3, #0
 800c816:	2301      	movcs	r3, #1
 800c818:	2800      	cmp	r0, #0
 800c81a:	d049      	beq.n	800c8b0 <osSemaphoreNew+0xb0>
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d047      	beq.n	800c8b0 <osSemaphoreNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 800c820:	b14a      	cbz	r2, 800c836 <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c822:	6895      	ldr	r5, [r2, #8]
 800c824:	b115      	cbz	r5, 800c82c <osSemaphoreNew+0x2c>
 800c826:	68d3      	ldr	r3, [r2, #12]
 800c828:	2b4f      	cmp	r3, #79	; 0x4f
 800c82a:	d814      	bhi.n	800c856 <osSemaphoreNew+0x56>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c82c:	2d00      	cmp	r5, #0
 800c82e:	d141      	bne.n	800c8b4 <osSemaphoreNew+0xb4>
 800c830:	68e3      	ldr	r3, [r4, #12]
 800c832:	b10b      	cbz	r3, 800c838 <osSemaphoreNew+0x38>
 800c834:	e039      	b.n	800c8aa <osSemaphoreNew+0xaa>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800c836:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800c838:	2801      	cmp	r0, #1
 800c83a:	d00e      	beq.n	800c85a <osSemaphoreNew+0x5a>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 800c83c:	bb73      	cbnz	r3, 800c89c <osSemaphoreNew+0x9c>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c83e:	4631      	mov	r1, r6
 800c840:	f000 fa90 	bl	800cd64 <xQueueCreateCountingSemaphore>
 800c844:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c846:	b385      	cbz	r5, 800c8aa <osSemaphoreNew+0xaa>
        if (attr != NULL) {
 800c848:	b104      	cbz	r4, 800c84c <osSemaphoreNew+0x4c>
          name = attr->name;
 800c84a:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c84c:	4621      	mov	r1, r4
 800c84e:	4628      	mov	r0, r5
 800c850:	f000 fe00 	bl	800d454 <vQueueAddToRegistry>
 800c854:	e029      	b.n	800c8aa <osSemaphoreNew+0xaa>
        mem = 1;
 800c856:	2301      	movs	r3, #1
 800c858:	e7ee      	b.n	800c838 <osSemaphoreNew+0x38>
        if (mem == 1) {
 800c85a:	b9b3      	cbnz	r3, 800c88a <osSemaphoreNew+0x8a>
            hSemaphore = xSemaphoreCreateBinary();
 800c85c:	2203      	movs	r2, #3
 800c85e:	2100      	movs	r1, #0
 800c860:	2001      	movs	r0, #1
 800c862:	f000 fa38 	bl	800ccd6 <xQueueGenericCreate>
 800c866:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c868:	2d00      	cmp	r5, #0
 800c86a:	bf18      	it	ne
 800c86c:	2e00      	cmpne	r6, #0
 800c86e:	d0ea      	beq.n	800c846 <osSemaphoreNew+0x46>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c870:	2300      	movs	r3, #0
 800c872:	461a      	mov	r2, r3
 800c874:	4619      	mov	r1, r3
 800c876:	4628      	mov	r0, r5
 800c878:	f000 fa92 	bl	800cda0 <xQueueGenericSend>
 800c87c:	2801      	cmp	r0, #1
 800c87e:	d0e2      	beq.n	800c846 <osSemaphoreNew+0x46>
            vSemaphoreDelete (hSemaphore);
 800c880:	4628      	mov	r0, r5
 800c882:	f000 fe11 	bl	800d4a8 <vQueueDelete>
            hSemaphore = NULL;
 800c886:	2500      	movs	r5, #0
 800c888:	e00f      	b.n	800c8aa <osSemaphoreNew+0xaa>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c88a:	68a3      	ldr	r3, [r4, #8]
 800c88c:	2203      	movs	r2, #3
 800c88e:	9200      	str	r2, [sp, #0]
 800c890:	2200      	movs	r2, #0
 800c892:	4611      	mov	r1, r2
 800c894:	f000 f9cc 	bl	800cc30 <xQueueGenericCreateStatic>
 800c898:	4605      	mov	r5, r0
 800c89a:	e7e5      	b.n	800c868 <osSemaphoreNew+0x68>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c89c:	68a2      	ldr	r2, [r4, #8]
 800c89e:	4631      	mov	r1, r6
 800c8a0:	f000 fa3d 	bl	800cd1e <xQueueCreateCountingSemaphoreStatic>
 800c8a4:	4605      	mov	r5, r0
 800c8a6:	e7ce      	b.n	800c846 <osSemaphoreNew+0x46>
  hSemaphore = NULL;
 800c8a8:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	b002      	add	sp, #8
 800c8ae:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 800c8b0:	2500      	movs	r5, #0
 800c8b2:	e7fa      	b.n	800c8aa <osSemaphoreNew+0xaa>
 800c8b4:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 800c8b6:	e7f8      	b.n	800c8aa <osSemaphoreNew+0xaa>

0800c8b8 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800c8b8:	b320      	cbz	r0, 800c904 <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c8ba:	b510      	push	{r4, lr}
 800c8bc:	b082      	sub	sp, #8
 800c8be:	460c      	mov	r4, r1
 800c8c0:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800c8c4:	b1b3      	cbz	r3, 800c8f4 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800c8c6:	bb01      	cbnz	r1, 800c90a <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c8cc:	aa01      	add	r2, sp, #4
 800c8ce:	f000 fd6d 	bl	800d3ac <xQueueReceiveFromISR>
 800c8d2:	2801      	cmp	r0, #1
 800c8d4:	d11c      	bne.n	800c910 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800c8d6:	9801      	ldr	r0, [sp, #4]
 800c8d8:	b150      	cbz	r0, 800c8f0 <osSemaphoreAcquire+0x38>
 800c8da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8e2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c8e6:	f3bf 8f4f 	dsb	sy
 800c8ea:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800c8ee:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800c8f0:	b002      	add	sp, #8
 800c8f2:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c8f4:	f000 fc87 	bl	800d206 <xQueueSemaphoreTake>
 800c8f8:	2801      	cmp	r0, #1
 800c8fa:	d00c      	beq.n	800c916 <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 800c8fc:	b16c      	cbz	r4, 800c91a <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 800c8fe:	f06f 0001 	mvn.w	r0, #1
 800c902:	e7f5      	b.n	800c8f0 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 800c904:	f06f 0003 	mvn.w	r0, #3
}
 800c908:	4770      	bx	lr
      stat = osErrorParameter;
 800c90a:	f06f 0003 	mvn.w	r0, #3
 800c90e:	e7ef      	b.n	800c8f0 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800c910:	f06f 0002 	mvn.w	r0, #2
 800c914:	e7ec      	b.n	800c8f0 <osSemaphoreAcquire+0x38>
  stat = osOK;
 800c916:	2000      	movs	r0, #0
 800c918:	e7ea      	b.n	800c8f0 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800c91a:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800c91e:	e7e7      	b.n	800c8f0 <osSemaphoreAcquire+0x38>

0800c920 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800c920:	b320      	cbz	r0, 800c96c <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c922:	b500      	push	{lr}
 800c924:	b083      	sub	sp, #12
 800c926:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800c92a:	b1a3      	cbz	r3, 800c956 <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 800c92c:	2300      	movs	r3, #0
 800c92e:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c930:	a901      	add	r1, sp, #4
 800c932:	f000 fb60 	bl	800cff6 <xQueueGiveFromISR>
 800c936:	2801      	cmp	r0, #1
 800c938:	d11b      	bne.n	800c972 <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800c93a:	9801      	ldr	r0, [sp, #4]
 800c93c:	b198      	cbz	r0, 800c966 <osSemaphoreRelease+0x46>
 800c93e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c946:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c94a:	f3bf 8f4f 	dsb	sy
 800c94e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800c952:	2000      	movs	r0, #0
 800c954:	e007      	b.n	800c966 <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c956:	2300      	movs	r3, #0
 800c958:	461a      	mov	r2, r3
 800c95a:	4619      	mov	r1, r3
 800c95c:	f000 fa20 	bl	800cda0 <xQueueGenericSend>
 800c960:	2801      	cmp	r0, #1
 800c962:	d109      	bne.n	800c978 <osSemaphoreRelease+0x58>
  stat = osOK;
 800c964:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800c966:	b003      	add	sp, #12
 800c968:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 800c96c:	f06f 0003 	mvn.w	r0, #3
}
 800c970:	4770      	bx	lr
      stat = osErrorResource;
 800c972:	f06f 0002 	mvn.w	r0, #2
 800c976:	e7f6      	b.n	800c966 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800c978:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800c97c:	e7f3      	b.n	800c966 <osSemaphoreRelease+0x46>
	...

0800c980 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c980:	4b03      	ldr	r3, [pc, #12]	; (800c990 <vApplicationGetIdleTaskMemory+0x10>)
 800c982:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c984:	4b03      	ldr	r3, [pc, #12]	; (800c994 <vApplicationGetIdleTaskMemory+0x14>)
 800c986:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c988:	2380      	movs	r3, #128	; 0x80
 800c98a:	6013      	str	r3, [r2, #0]
}
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	24002800 	.word	0x24002800
 800c994:	24002600 	.word	0x24002600

0800c998 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c998:	4b03      	ldr	r3, [pc, #12]	; (800c9a8 <vApplicationGetTimerTaskMemory+0x10>)
 800c99a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c99c:	4b03      	ldr	r3, [pc, #12]	; (800c9ac <vApplicationGetTimerTaskMemory+0x14>)
 800c99e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c9a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9a4:	6013      	str	r3, [r2, #0]
}
 800c9a6:	4770      	bx	lr
 800c9a8:	24002cc0 	.word	0x24002cc0
 800c9ac:	240028c0 	.word	0x240028c0

0800c9b0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9b0:	f100 0308 	add.w	r3, r0, #8
 800c9b4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c9b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ba:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9bc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9be:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c9c4:	4770      	bx	lr

0800c9c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c9ca:	4770      	bx	lr

0800c9cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800c9cc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c9ce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c9d0:	689a      	ldr	r2, [r3, #8]
 800c9d2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c9d4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c9d6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c9d8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800c9da:	6803      	ldr	r3, [r0, #0]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	6003      	str	r3, [r0, #0]
}
 800c9e0:	4770      	bx	lr

0800c9e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c9e2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c9e4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c9e6:	f1b5 3fff 	cmp.w	r5, #4294967295
 800c9ea:	d011      	beq.n	800ca10 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c9ec:	f100 0308 	add.w	r3, r0, #8
 800c9f0:	461c      	mov	r4, r3
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	681a      	ldr	r2, [r3, #0]
 800c9f6:	42aa      	cmp	r2, r5
 800c9f8:	d9fa      	bls.n	800c9f0 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c9fa:	6863      	ldr	r3, [r4, #4]
 800c9fc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c9fe:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ca00:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800ca02:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ca04:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ca06:	6803      	ldr	r3, [r0, #0]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	6003      	str	r3, [r0, #0]
}
 800ca0c:	bc30      	pop	{r4, r5}
 800ca0e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800ca10:	6904      	ldr	r4, [r0, #16]
 800ca12:	e7f2      	b.n	800c9fa <vListInsert+0x18>

0800ca14 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ca14:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ca16:	6841      	ldr	r1, [r0, #4]
 800ca18:	6882      	ldr	r2, [r0, #8]
 800ca1a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ca1c:	6841      	ldr	r1, [r0, #4]
 800ca1e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ca20:	685a      	ldr	r2, [r3, #4]
 800ca22:	4282      	cmp	r2, r0
 800ca24:	d006      	beq.n	800ca34 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ca26:	2200      	movs	r2, #0
 800ca28:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	3a01      	subs	r2, #1
 800ca2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ca30:	6818      	ldr	r0, [r3, #0]
}
 800ca32:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ca34:	6882      	ldr	r2, [r0, #8]
 800ca36:	605a      	str	r2, [r3, #4]
 800ca38:	e7f5      	b.n	800ca26 <uxListRemove+0x12>

0800ca3a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ca3a:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ca3c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800ca3e:	b118      	cbz	r0, 800ca48 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ca40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca42:	6818      	ldr	r0, [r3, #0]
 800ca44:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800ca48:	4770      	bx	lr

0800ca4a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ca4a:	b510      	push	{r4, lr}
 800ca4c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca4e:	f001 fdc9 	bl	800e5e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ca54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d004      	beq.n	800ca64 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800ca5a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800ca5c:	f001 fde4 	bl	800e628 <vPortExitCritical>

	return xReturn;
}
 800ca60:	4620      	mov	r0, r4
 800ca62:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800ca64:	2401      	movs	r4, #1
 800ca66:	e7f9      	b.n	800ca5c <prvIsQueueFull+0x12>

0800ca68 <prvIsQueueEmpty>:
{
 800ca68:	b510      	push	{r4, lr}
 800ca6a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800ca6c:	f001 fdba 	bl	800e5e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ca70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ca72:	b923      	cbnz	r3, 800ca7e <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800ca74:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800ca76:	f001 fdd7 	bl	800e628 <vPortExitCritical>
}
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800ca7e:	2400      	movs	r4, #0
 800ca80:	e7f9      	b.n	800ca76 <prvIsQueueEmpty+0xe>

0800ca82 <prvCopyDataToQueue>:
{
 800ca82:	b570      	push	{r4, r5, r6, lr}
 800ca84:	4604      	mov	r4, r0
 800ca86:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca88:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ca8a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ca8c:	b95a      	cbnz	r2, 800caa6 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca8e:	6803      	ldr	r3, [r0, #0]
 800ca90:	b11b      	cbz	r3, 800ca9a <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800ca92:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca94:	3601      	adds	r6, #1
 800ca96:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800ca98:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ca9a:	6880      	ldr	r0, [r0, #8]
 800ca9c:	f001 fa64 	bl	800df68 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800caa0:	2300      	movs	r3, #0
 800caa2:	60a3      	str	r3, [r4, #8]
 800caa4:	e7f6      	b.n	800ca94 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800caa6:	b96d      	cbnz	r5, 800cac4 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800caa8:	6840      	ldr	r0, [r0, #4]
 800caaa:	f00e ff21 	bl	801b8f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800caae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800cab0:	6863      	ldr	r3, [r4, #4]
 800cab2:	4413      	add	r3, r2
 800cab4:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cab6:	68a2      	ldr	r2, [r4, #8]
 800cab8:	4293      	cmp	r3, r2
 800caba:	d319      	bcc.n	800caf0 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cabc:	6823      	ldr	r3, [r4, #0]
 800cabe:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800cac0:	4628      	mov	r0, r5
 800cac2:	e7e7      	b.n	800ca94 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cac4:	68c0      	ldr	r0, [r0, #12]
 800cac6:	f00e ff13 	bl	801b8f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800caca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800cacc:	4251      	negs	r1, r2
 800cace:	68e3      	ldr	r3, [r4, #12]
 800cad0:	1a9b      	subs	r3, r3, r2
 800cad2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cad4:	6822      	ldr	r2, [r4, #0]
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d202      	bcs.n	800cae0 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cada:	68a3      	ldr	r3, [r4, #8]
 800cadc:	440b      	add	r3, r1
 800cade:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800cae0:	2d02      	cmp	r5, #2
 800cae2:	d001      	beq.n	800cae8 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800cae4:	2000      	movs	r0, #0
 800cae6:	e7d5      	b.n	800ca94 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cae8:	b126      	cbz	r6, 800caf4 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800caea:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800caec:	2000      	movs	r0, #0
 800caee:	e7d1      	b.n	800ca94 <prvCopyDataToQueue+0x12>
 800caf0:	4628      	mov	r0, r5
 800caf2:	e7cf      	b.n	800ca94 <prvCopyDataToQueue+0x12>
 800caf4:	2000      	movs	r0, #0
 800caf6:	e7cd      	b.n	800ca94 <prvCopyDataToQueue+0x12>

0800caf8 <prvCopyDataFromQueue>:
{
 800caf8:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cafa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800cafc:	b16a      	cbz	r2, 800cb1a <prvCopyDataFromQueue+0x22>
{
 800cafe:	b510      	push	{r4, lr}
 800cb00:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb02:	68d9      	ldr	r1, [r3, #12]
 800cb04:	4411      	add	r1, r2
 800cb06:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cb08:	689c      	ldr	r4, [r3, #8]
 800cb0a:	42a1      	cmp	r1, r4
 800cb0c:	d301      	bcc.n	800cb12 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cb0e:	6819      	ldr	r1, [r3, #0]
 800cb10:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb12:	68d9      	ldr	r1, [r3, #12]
 800cb14:	f00e feec 	bl	801b8f0 <memcpy>
}
 800cb18:	bd10      	pop	{r4, pc}
 800cb1a:	4770      	bx	lr

0800cb1c <prvUnlockQueue>:
{
 800cb1c:	b538      	push	{r3, r4, r5, lr}
 800cb1e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800cb20:	f001 fd60 	bl	800e5e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800cb24:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800cb28:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb2a:	e001      	b.n	800cb30 <prvUnlockQueue+0x14>
			--cTxLock;
 800cb2c:	3c01      	subs	r4, #1
 800cb2e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb30:	2c00      	cmp	r4, #0
 800cb32:	dd0a      	ble.n	800cb4a <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb34:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cb36:	b143      	cbz	r3, 800cb4a <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb38:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800cb3c:	f001 f91e 	bl	800dd7c <xTaskRemoveFromEventList>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	d0f3      	beq.n	800cb2c <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800cb44:	f001 f9ae 	bl	800dea4 <vTaskMissedYield>
 800cb48:	e7f0      	b.n	800cb2c <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800cb4a:	23ff      	movs	r3, #255	; 0xff
 800cb4c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800cb50:	f001 fd6a 	bl	800e628 <vPortExitCritical>
	taskENTER_CRITICAL();
 800cb54:	f001 fd46 	bl	800e5e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800cb58:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800cb5c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb5e:	e001      	b.n	800cb64 <prvUnlockQueue+0x48>
				--cRxLock;
 800cb60:	3c01      	subs	r4, #1
 800cb62:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb64:	2c00      	cmp	r4, #0
 800cb66:	dd0a      	ble.n	800cb7e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb68:	692b      	ldr	r3, [r5, #16]
 800cb6a:	b143      	cbz	r3, 800cb7e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb6c:	f105 0010 	add.w	r0, r5, #16
 800cb70:	f001 f904 	bl	800dd7c <xTaskRemoveFromEventList>
 800cb74:	2800      	cmp	r0, #0
 800cb76:	d0f3      	beq.n	800cb60 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800cb78:	f001 f994 	bl	800dea4 <vTaskMissedYield>
 800cb7c:	e7f0      	b.n	800cb60 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800cb7e:	23ff      	movs	r3, #255	; 0xff
 800cb80:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800cb84:	f001 fd50 	bl	800e628 <vPortExitCritical>
}
 800cb88:	bd38      	pop	{r3, r4, r5, pc}

0800cb8a <xQueueGenericReset>:
{
 800cb8a:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800cb8c:	b1e0      	cbz	r0, 800cbc8 <xQueueGenericReset+0x3e>
 800cb8e:	460d      	mov	r5, r1
 800cb90:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800cb92:	f001 fd27 	bl	800e5e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb96:	6823      	ldr	r3, [r4, #0]
 800cb98:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800cb9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cb9c:	fb01 3002 	mla	r0, r1, r2, r3
 800cba0:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cba2:	2000      	movs	r0, #0
 800cba4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cba6:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cba8:	3a01      	subs	r2, #1
 800cbaa:	fb02 3301 	mla	r3, r2, r1, r3
 800cbae:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cbb0:	23ff      	movs	r3, #255	; 0xff
 800cbb2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cbb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800cbba:	b9fd      	cbnz	r5, 800cbfc <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbbc:	6923      	ldr	r3, [r4, #16]
 800cbbe:	b963      	cbnz	r3, 800cbda <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800cbc0:	f001 fd32 	bl	800e628 <vPortExitCritical>
}
 800cbc4:	2001      	movs	r0, #1
 800cbc6:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbcc:	f383 8811 	msr	BASEPRI, r3
 800cbd0:	f3bf 8f6f 	isb	sy
 800cbd4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800cbd8:	e7fe      	b.n	800cbd8 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbda:	f104 0010 	add.w	r0, r4, #16
 800cbde:	f001 f8cd 	bl	800dd7c <xTaskRemoveFromEventList>
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d0ec      	beq.n	800cbc0 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800cbe6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800cbea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbee:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800cbf2:	f3bf 8f4f 	dsb	sy
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	e7e1      	b.n	800cbc0 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cbfc:	f104 0010 	add.w	r0, r4, #16
 800cc00:	f7ff fed6 	bl	800c9b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cc04:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cc08:	f7ff fed2 	bl	800c9b0 <vListInitialise>
 800cc0c:	e7d8      	b.n	800cbc0 <xQueueGenericReset+0x36>

0800cc0e <prvInitialiseNewQueue>:
{
 800cc0e:	b538      	push	{r3, r4, r5, lr}
 800cc10:	461d      	mov	r5, r3
 800cc12:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800cc14:	460b      	mov	r3, r1
 800cc16:	b949      	cbnz	r1, 800cc2c <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cc18:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800cc1a:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cc1c:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cc1e:	2101      	movs	r1, #1
 800cc20:	4620      	mov	r0, r4
 800cc22:	f7ff ffb2 	bl	800cb8a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800cc26:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 800cc2a:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cc2c:	6022      	str	r2, [r4, #0]
 800cc2e:	e7f4      	b.n	800cc1a <prvInitialiseNewQueue+0xc>

0800cc30 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc30:	b940      	cbnz	r0, 800cc44 <xQueueGenericCreateStatic+0x14>
 800cc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc36:	f383 8811 	msr	BASEPRI, r3
 800cc3a:	f3bf 8f6f 	isb	sy
 800cc3e:	f3bf 8f4f 	dsb	sy
 800cc42:	e7fe      	b.n	800cc42 <xQueueGenericCreateStatic+0x12>
	{
 800cc44:	b510      	push	{r4, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 800cc4a:	b183      	cbz	r3, 800cc6e <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cc4c:	1e0b      	subs	r3, r1, #0
 800cc4e:	bf18      	it	ne
 800cc50:	2301      	movne	r3, #1
 800cc52:	2a00      	cmp	r2, #0
 800cc54:	bf08      	it	eq
 800cc56:	f043 0301 	orreq.w	r3, r3, #1
 800cc5a:	b98b      	cbnz	r3, 800cc80 <xQueueGenericCreateStatic+0x50>
 800cc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc60:	f383 8811 	msr	BASEPRI, r3
 800cc64:	f3bf 8f6f 	isb	sy
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	e7fe      	b.n	800cc6c <xQueueGenericCreateStatic+0x3c>
 800cc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc72:	f383 8811 	msr	BASEPRI, r3
 800cc76:	f3bf 8f6f 	isb	sy
 800cc7a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800cc7e:	e7fe      	b.n	800cc7e <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cc80:	fab1 f381 	clz	r3, r1
 800cc84:	095b      	lsrs	r3, r3, #5
 800cc86:	2a00      	cmp	r2, #0
 800cc88:	bf18      	it	ne
 800cc8a:	f043 0301 	orrne.w	r3, r3, #1
 800cc8e:	b943      	cbnz	r3, 800cca2 <xQueueGenericCreateStatic+0x72>
 800cc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc94:	f383 8811 	msr	BASEPRI, r3
 800cc98:	f3bf 8f6f 	isb	sy
 800cc9c:	f3bf 8f4f 	dsb	sy
 800cca0:	e7fe      	b.n	800cca0 <xQueueGenericCreateStatic+0x70>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cca2:	2350      	movs	r3, #80	; 0x50
 800cca4:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cca6:	9b03      	ldr	r3, [sp, #12]
 800cca8:	2b50      	cmp	r3, #80	; 0x50
 800ccaa:	d008      	beq.n	800ccbe <xQueueGenericCreateStatic+0x8e>
 800ccac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb0:	f383 8811 	msr	BASEPRI, r3
 800ccb4:	f3bf 8f6f 	isb	sy
 800ccb8:	f3bf 8f4f 	dsb	sy
 800ccbc:	e7fe      	b.n	800ccbc <xQueueGenericCreateStatic+0x8c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ccbe:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ccc6:	9400      	str	r4, [sp, #0]
 800ccc8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800cccc:	f7ff ff9f 	bl	800cc0e <prvInitialiseNewQueue>
	}
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	b004      	add	sp, #16
 800ccd4:	bd10      	pop	{r4, pc}

0800ccd6 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ccd6:	b940      	cbnz	r0, 800ccea <xQueueGenericCreate+0x14>
 800ccd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccdc:	f383 8811 	msr	BASEPRI, r3
 800cce0:	f3bf 8f6f 	isb	sy
 800cce4:	f3bf 8f4f 	dsb	sy
 800cce8:	e7fe      	b.n	800cce8 <xQueueGenericCreate+0x12>
	{
 800ccea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccec:	b083      	sub	sp, #12
 800ccee:	460d      	mov	r5, r1
 800ccf0:	4614      	mov	r4, r2
 800ccf2:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccf4:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ccf8:	3050      	adds	r0, #80	; 0x50
 800ccfa:	f001 fe2b 	bl	800e954 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800ccfe:	4607      	mov	r7, r0
 800cd00:	b150      	cbz	r0, 800cd18 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cd02:	2300      	movs	r3, #0
 800cd04:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd08:	9000      	str	r0, [sp, #0]
 800cd0a:	4623      	mov	r3, r4
 800cd0c:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800cd10:	4629      	mov	r1, r5
 800cd12:	4630      	mov	r0, r6
 800cd14:	f7ff ff7b 	bl	800cc0e <prvInitialiseNewQueue>
	}
 800cd18:	4638      	mov	r0, r7
 800cd1a:	b003      	add	sp, #12
 800cd1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd1e <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 800cd1e:	b940      	cbnz	r0, 800cd32 <xQueueCreateCountingSemaphoreStatic+0x14>
 800cd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd24:	f383 8811 	msr	BASEPRI, r3
 800cd28:	f3bf 8f6f 	isb	sy
 800cd2c:	f3bf 8f4f 	dsb	sy
 800cd30:	e7fe      	b.n	800cd30 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 800cd32:	b510      	push	{r4, lr}
 800cd34:	b082      	sub	sp, #8
 800cd36:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800cd38:	4288      	cmp	r0, r1
 800cd3a:	d208      	bcs.n	800cd4e <xQueueCreateCountingSemaphoreStatic+0x30>
 800cd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd40:	f383 8811 	msr	BASEPRI, r3
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	e7fe      	b.n	800cd4c <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cd4e:	2302      	movs	r3, #2
 800cd50:	9300      	str	r3, [sp, #0]
 800cd52:	4613      	mov	r3, r2
 800cd54:	2200      	movs	r2, #0
 800cd56:	4611      	mov	r1, r2
 800cd58:	f7ff ff6a 	bl	800cc30 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800cd5c:	b100      	cbz	r0, 800cd60 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cd5e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800cd60:	b002      	add	sp, #8
 800cd62:	bd10      	pop	{r4, pc}

0800cd64 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800cd64:	b940      	cbnz	r0, 800cd78 <xQueueCreateCountingSemaphore+0x14>
 800cd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6a:	f383 8811 	msr	BASEPRI, r3
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	f3bf 8f4f 	dsb	sy
 800cd76:	e7fe      	b.n	800cd76 <xQueueCreateCountingSemaphore+0x12>
	{
 800cd78:	b510      	push	{r4, lr}
 800cd7a:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800cd7c:	4288      	cmp	r0, r1
 800cd7e:	d208      	bcs.n	800cd92 <xQueueCreateCountingSemaphore+0x2e>
 800cd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	e7fe      	b.n	800cd90 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cd92:	2202      	movs	r2, #2
 800cd94:	2100      	movs	r1, #0
 800cd96:	f7ff ff9e 	bl	800ccd6 <xQueueGenericCreate>
		if( xHandle != NULL )
 800cd9a:	b100      	cbz	r0, 800cd9e <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cd9c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800cd9e:	bd10      	pop	{r4, pc}

0800cda0 <xQueueGenericSend>:
{
 800cda0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cda2:	b085      	sub	sp, #20
 800cda4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800cda6:	b188      	cbz	r0, 800cdcc <xQueueGenericSend+0x2c>
 800cda8:	460f      	mov	r7, r1
 800cdaa:	461d      	mov	r5, r3
 800cdac:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cdae:	b1b1      	cbz	r1, 800cdde <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cdb0:	2d02      	cmp	r5, #2
 800cdb2:	d120      	bne.n	800cdf6 <xQueueGenericSend+0x56>
 800cdb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d01d      	beq.n	800cdf6 <xQueueGenericSend+0x56>
 800cdba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdbe:	f383 8811 	msr	BASEPRI, r3
 800cdc2:	f3bf 8f6f 	isb	sy
 800cdc6:	f3bf 8f4f 	dsb	sy
 800cdca:	e7fe      	b.n	800cdca <xQueueGenericSend+0x2a>
 800cdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd0:	f383 8811 	msr	BASEPRI, r3
 800cdd4:	f3bf 8f6f 	isb	sy
 800cdd8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800cddc:	e7fe      	b.n	800cddc <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cdde:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d0e5      	beq.n	800cdb0 <xQueueGenericSend+0x10>
 800cde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde8:	f383 8811 	msr	BASEPRI, r3
 800cdec:	f3bf 8f6f 	isb	sy
 800cdf0:	f3bf 8f4f 	dsb	sy
 800cdf4:	e7fe      	b.n	800cdf4 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cdf6:	f001 f85b 	bl	800deb0 <xTaskGetSchedulerState>
 800cdfa:	4606      	mov	r6, r0
 800cdfc:	b958      	cbnz	r0, 800ce16 <xQueueGenericSend+0x76>
 800cdfe:	9b01      	ldr	r3, [sp, #4]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d048      	beq.n	800ce96 <xQueueGenericSend+0xf6>
 800ce04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce08:	f383 8811 	msr	BASEPRI, r3
 800ce0c:	f3bf 8f6f 	isb	sy
 800ce10:	f3bf 8f4f 	dsb	sy
 800ce14:	e7fe      	b.n	800ce14 <xQueueGenericSend+0x74>
 800ce16:	2600      	movs	r6, #0
 800ce18:	e03d      	b.n	800ce96 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce1a:	462a      	mov	r2, r5
 800ce1c:	4639      	mov	r1, r7
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f7ff fe2f 	bl	800ca82 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce26:	b97b      	cbnz	r3, 800ce48 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800ce28:	b148      	cbz	r0, 800ce3e <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800ce2a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ce2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce32:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ce36:	f3bf 8f4f 	dsb	sy
 800ce3a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800ce3e:	f001 fbf3 	bl	800e628 <vPortExitCritical>
				return pdPASS;
 800ce42:	2001      	movs	r0, #1
}
 800ce44:	b005      	add	sp, #20
 800ce46:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce48:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ce4c:	f000 ff96 	bl	800dd7c <xTaskRemoveFromEventList>
 800ce50:	2800      	cmp	r0, #0
 800ce52:	d0f4      	beq.n	800ce3e <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800ce54:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ce58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce5c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ce60:	f3bf 8f4f 	dsb	sy
 800ce64:	f3bf 8f6f 	isb	sy
 800ce68:	e7e9      	b.n	800ce3e <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800ce6a:	f001 fbdd 	bl	800e628 <vPortExitCritical>
					return errQUEUE_FULL;
 800ce6e:	2000      	movs	r0, #0
 800ce70:	e7e8      	b.n	800ce44 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce72:	a802      	add	r0, sp, #8
 800ce74:	f000 ffc8 	bl	800de08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce78:	2601      	movs	r6, #1
 800ce7a:	e019      	b.n	800ceb0 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ce82:	e021      	b.n	800cec8 <xQueueGenericSend+0x128>
 800ce84:	2300      	movs	r3, #0
 800ce86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce8a:	e023      	b.n	800ced4 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	f7ff fe45 	bl	800cb1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce92:	f000 fe4d 	bl	800db30 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800ce96:	f001 fba5 	bl	800e5e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ce9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d3bb      	bcc.n	800ce1a <xQueueGenericSend+0x7a>
 800cea2:	2d02      	cmp	r5, #2
 800cea4:	d0b9      	beq.n	800ce1a <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800cea6:	9b01      	ldr	r3, [sp, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d0de      	beq.n	800ce6a <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800ceac:	2e00      	cmp	r6, #0
 800ceae:	d0e0      	beq.n	800ce72 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 800ceb0:	f001 fbba 	bl	800e628 <vPortExitCritical>
		vTaskSuspendAll();
 800ceb4:	f000 fda2 	bl	800d9fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ceb8:	f001 fb94 	bl	800e5e4 <vPortEnterCritical>
 800cebc:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800cec0:	b252      	sxtb	r2, r2
 800cec2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cec6:	d0d9      	beq.n	800ce7c <xQueueGenericSend+0xdc>
 800cec8:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800cecc:	b252      	sxtb	r2, r2
 800cece:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ced2:	d0d7      	beq.n	800ce84 <xQueueGenericSend+0xe4>
 800ced4:	f001 fba8 	bl	800e628 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ced8:	a901      	add	r1, sp, #4
 800ceda:	a802      	add	r0, sp, #8
 800cedc:	f000 ffa0 	bl	800de20 <xTaskCheckForTimeOut>
 800cee0:	b9d8      	cbnz	r0, 800cf1a <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cee2:	4620      	mov	r0, r4
 800cee4:	f7ff fdb1 	bl	800ca4a <prvIsQueueFull>
 800cee8:	2800      	cmp	r0, #0
 800ceea:	d0cf      	beq.n	800ce8c <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ceec:	9901      	ldr	r1, [sp, #4]
 800ceee:	f104 0010 	add.w	r0, r4, #16
 800cef2:	f000 ff0f 	bl	800dd14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cef6:	4620      	mov	r0, r4
 800cef8:	f7ff fe10 	bl	800cb1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cefc:	f000 fe18 	bl	800db30 <xTaskResumeAll>
 800cf00:	2800      	cmp	r0, #0
 800cf02:	d1c8      	bne.n	800ce96 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800cf04:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800cf08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf0c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800cf10:	f3bf 8f4f 	dsb	sy
 800cf14:	f3bf 8f6f 	isb	sy
 800cf18:	e7bd      	b.n	800ce96 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800cf1a:	4620      	mov	r0, r4
 800cf1c:	f7ff fdfe 	bl	800cb1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf20:	f000 fe06 	bl	800db30 <xTaskResumeAll>
			return errQUEUE_FULL;
 800cf24:	2000      	movs	r0, #0
 800cf26:	e78d      	b.n	800ce44 <xQueueGenericSend+0xa4>

0800cf28 <xQueueGenericSendFromISR>:
{
 800cf28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800cf2c:	b190      	cbz	r0, 800cf54 <xQueueGenericSendFromISR+0x2c>
 800cf2e:	460f      	mov	r7, r1
 800cf30:	4616      	mov	r6, r2
 800cf32:	461c      	mov	r4, r3
 800cf34:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf36:	b1b1      	cbz	r1, 800cf66 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf38:	2c02      	cmp	r4, #2
 800cf3a:	d120      	bne.n	800cf7e <xQueueGenericSendFromISR+0x56>
 800cf3c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	d01d      	beq.n	800cf7e <xQueueGenericSendFromISR+0x56>
 800cf42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf46:	f383 8811 	msr	BASEPRI, r3
 800cf4a:	f3bf 8f6f 	isb	sy
 800cf4e:	f3bf 8f4f 	dsb	sy
 800cf52:	e7fe      	b.n	800cf52 <xQueueGenericSendFromISR+0x2a>
 800cf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf58:	f383 8811 	msr	BASEPRI, r3
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800cf64:	e7fe      	b.n	800cf64 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf66:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d0e5      	beq.n	800cf38 <xQueueGenericSendFromISR+0x10>
 800cf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf70:	f383 8811 	msr	BASEPRI, r3
 800cf74:	f3bf 8f6f 	isb	sy
 800cf78:	f3bf 8f4f 	dsb	sy
 800cf7c:	e7fe      	b.n	800cf7c <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf7e:	f001 fc57 	bl	800e830 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cf82:	f3ef 8911 	mrs	r9, BASEPRI
 800cf86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8a:	f383 8811 	msr	BASEPRI, r3
 800cf8e:	f3bf 8f6f 	isb	sy
 800cf92:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf96:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800cf98:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d306      	bcc.n	800cfac <xQueueGenericSendFromISR+0x84>
 800cf9e:	2c02      	cmp	r4, #2
 800cfa0:	d004      	beq.n	800cfac <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800cfa2:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cfa4:	f389 8811 	msr	BASEPRI, r9
}
 800cfa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800cfac:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 800cfb0:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cfb4:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cfb6:	4622      	mov	r2, r4
 800cfb8:	4639      	mov	r1, r7
 800cfba:	4628      	mov	r0, r5
 800cfbc:	f7ff fd61 	bl	800ca82 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800cfc0:	f1b8 3fff 	cmp.w	r8, #4294967295
 800cfc4:	d006      	beq.n	800cfd4 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cfc6:	f108 0301 	add.w	r3, r8, #1
 800cfca:	b25b      	sxtb	r3, r3
 800cfcc:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800cfd0:	2001      	movs	r0, #1
 800cfd2:	e7e7      	b.n	800cfa4 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfd4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cfd6:	b90b      	cbnz	r3, 800cfdc <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800cfd8:	2001      	movs	r0, #1
 800cfda:	e7e3      	b.n	800cfa4 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfdc:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800cfe0:	f000 fecc 	bl	800dd7c <xTaskRemoveFromEventList>
 800cfe4:	b118      	cbz	r0, 800cfee <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800cfe6:	b126      	cbz	r6, 800cff2 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cfe8:	2001      	movs	r0, #1
 800cfea:	6030      	str	r0, [r6, #0]
 800cfec:	e7da      	b.n	800cfa4 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800cfee:	2001      	movs	r0, #1
 800cff0:	e7d8      	b.n	800cfa4 <xQueueGenericSendFromISR+0x7c>
 800cff2:	2001      	movs	r0, #1
 800cff4:	e7d6      	b.n	800cfa4 <xQueueGenericSendFromISR+0x7c>

0800cff6 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800cff6:	b168      	cbz	r0, 800d014 <xQueueGiveFromISR+0x1e>
{
 800cff8:	b570      	push	{r4, r5, r6, lr}
 800cffa:	460c      	mov	r4, r1
 800cffc:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800cffe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d000:	b18b      	cbz	r3, 800d026 <xQueueGiveFromISR+0x30>
	__asm volatile
 800d002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d006:	f383 8811 	msr	BASEPRI, r3
 800d00a:	f3bf 8f6f 	isb	sy
 800d00e:	f3bf 8f4f 	dsb	sy
 800d012:	e7fe      	b.n	800d012 <xQueueGiveFromISR+0x1c>
 800d014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d018:	f383 8811 	msr	BASEPRI, r3
 800d01c:	f3bf 8f6f 	isb	sy
 800d020:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800d024:	e7fe      	b.n	800d024 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d026:	6803      	ldr	r3, [r0, #0]
 800d028:	b1eb      	cbz	r3, 800d066 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d02a:	f001 fc01 	bl	800e830 <vPortValidateInterruptPriority>
	__asm volatile
 800d02e:	f3ef 8611 	mrs	r6, BASEPRI
 800d032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d036:	f383 8811 	msr	BASEPRI, r3
 800d03a:	f3bf 8f6f 	isb	sy
 800d03e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d042:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d044:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800d046:	4293      	cmp	r3, r2
 800d048:	d926      	bls.n	800d098 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800d04a:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800d04e:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d050:	3201      	adds	r2, #1
 800d052:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800d054:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d058:	d011      	beq.n	800d07e <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d05a:	3301      	adds	r3, #1
 800d05c:	b25b      	sxtb	r3, r3
 800d05e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800d062:	2001      	movs	r0, #1
 800d064:	e019      	b.n	800d09a <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d066:	6883      	ldr	r3, [r0, #8]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d0de      	beq.n	800d02a <xQueueGiveFromISR+0x34>
	__asm volatile
 800d06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d070:	f383 8811 	msr	BASEPRI, r3
 800d074:	f3bf 8f6f 	isb	sy
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	e7fe      	b.n	800d07c <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d07e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d080:	b90b      	cbnz	r3, 800d086 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800d082:	2001      	movs	r0, #1
 800d084:	e009      	b.n	800d09a <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d086:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800d08a:	f000 fe77 	bl	800dd7c <xTaskRemoveFromEventList>
 800d08e:	b138      	cbz	r0, 800d0a0 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800d090:	b144      	cbz	r4, 800d0a4 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d092:	2001      	movs	r0, #1
 800d094:	6020      	str	r0, [r4, #0]
 800d096:	e000      	b.n	800d09a <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800d098:	2000      	movs	r0, #0
	__asm volatile
 800d09a:	f386 8811 	msr	BASEPRI, r6
}
 800d09e:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800d0a0:	2001      	movs	r0, #1
 800d0a2:	e7fa      	b.n	800d09a <xQueueGiveFromISR+0xa4>
 800d0a4:	2001      	movs	r0, #1
 800d0a6:	e7f8      	b.n	800d09a <xQueueGiveFromISR+0xa4>

0800d0a8 <xQueueReceive>:
{
 800d0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0aa:	b085      	sub	sp, #20
 800d0ac:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d0ae:	b190      	cbz	r0, 800d0d6 <xQueueReceive+0x2e>
 800d0b0:	460f      	mov	r7, r1
 800d0b2:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0b4:	b1c1      	cbz	r1, 800d0e8 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0b6:	f000 fefb 	bl	800deb0 <xTaskGetSchedulerState>
 800d0ba:	4606      	mov	r6, r0
 800d0bc:	bb00      	cbnz	r0, 800d100 <xQueueReceive+0x58>
 800d0be:	9b01      	ldr	r3, [sp, #4]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d05e      	beq.n	800d182 <xQueueReceive+0xda>
	__asm volatile
 800d0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c8:	f383 8811 	msr	BASEPRI, r3
 800d0cc:	f3bf 8f6f 	isb	sy
 800d0d0:	f3bf 8f4f 	dsb	sy
 800d0d4:	e7fe      	b.n	800d0d4 <xQueueReceive+0x2c>
 800d0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0da:	f383 8811 	msr	BASEPRI, r3
 800d0de:	f3bf 8f6f 	isb	sy
 800d0e2:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800d0e6:	e7fe      	b.n	800d0e6 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d0e3      	beq.n	800d0b6 <xQueueReceive+0xe>
 800d0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f2:	f383 8811 	msr	BASEPRI, r3
 800d0f6:	f3bf 8f6f 	isb	sy
 800d0fa:	f3bf 8f4f 	dsb	sy
 800d0fe:	e7fe      	b.n	800d0fe <xQueueReceive+0x56>
 800d100:	2600      	movs	r6, #0
 800d102:	e03e      	b.n	800d182 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d104:	4639      	mov	r1, r7
 800d106:	4620      	mov	r0, r4
 800d108:	f7ff fcf6 	bl	800caf8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d10c:	3d01      	subs	r5, #1
 800d10e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d110:	6923      	ldr	r3, [r4, #16]
 800d112:	b923      	cbnz	r3, 800d11e <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 800d114:	f001 fa88 	bl	800e628 <vPortExitCritical>
				return pdPASS;
 800d118:	2001      	movs	r0, #1
}
 800d11a:	b005      	add	sp, #20
 800d11c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d11e:	f104 0010 	add.w	r0, r4, #16
 800d122:	f000 fe2b 	bl	800dd7c <xTaskRemoveFromEventList>
 800d126:	2800      	cmp	r0, #0
 800d128:	d0f4      	beq.n	800d114 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800d12a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d12e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d132:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d136:	f3bf 8f4f 	dsb	sy
 800d13a:	f3bf 8f6f 	isb	sy
 800d13e:	e7e9      	b.n	800d114 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800d140:	f001 fa72 	bl	800e628 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d144:	2000      	movs	r0, #0
 800d146:	e7e8      	b.n	800d11a <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d148:	a802      	add	r0, sp, #8
 800d14a:	f000 fe5d 	bl	800de08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d14e:	2601      	movs	r6, #1
 800d150:	e021      	b.n	800d196 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800d152:	2300      	movs	r3, #0
 800d154:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800d158:	e029      	b.n	800d1ae <xQueueReceive+0x106>
 800d15a:	2300      	movs	r3, #0
 800d15c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d160:	e02b      	b.n	800d1ba <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800d162:	4620      	mov	r0, r4
 800d164:	f7ff fcda 	bl	800cb1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d168:	f000 fce2 	bl	800db30 <xTaskResumeAll>
 800d16c:	e009      	b.n	800d182 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800d16e:	4620      	mov	r0, r4
 800d170:	f7ff fcd4 	bl	800cb1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d174:	f000 fcdc 	bl	800db30 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d178:	4620      	mov	r0, r4
 800d17a:	f7ff fc75 	bl	800ca68 <prvIsQueueEmpty>
 800d17e:	2800      	cmp	r0, #0
 800d180:	d13f      	bne.n	800d202 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800d182:	f001 fa2f 	bl	800e5e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d186:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d188:	2d00      	cmp	r5, #0
 800d18a:	d1bb      	bne.n	800d104 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d18c:	9b01      	ldr	r3, [sp, #4]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d0d6      	beq.n	800d140 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800d192:	2e00      	cmp	r6, #0
 800d194:	d0d8      	beq.n	800d148 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800d196:	f001 fa47 	bl	800e628 <vPortExitCritical>
		vTaskSuspendAll();
 800d19a:	f000 fc2f 	bl	800d9fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d19e:	f001 fa21 	bl	800e5e4 <vPortEnterCritical>
 800d1a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d1a6:	b25b      	sxtb	r3, r3
 800d1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ac:	d0d1      	beq.n	800d152 <xQueueReceive+0xaa>
 800d1ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d1b2:	b25b      	sxtb	r3, r3
 800d1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1b8:	d0cf      	beq.n	800d15a <xQueueReceive+0xb2>
 800d1ba:	f001 fa35 	bl	800e628 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1be:	a901      	add	r1, sp, #4
 800d1c0:	a802      	add	r0, sp, #8
 800d1c2:	f000 fe2d 	bl	800de20 <xTaskCheckForTimeOut>
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	d1d1      	bne.n	800d16e <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	f7ff fc4c 	bl	800ca68 <prvIsQueueEmpty>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	d0c6      	beq.n	800d162 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1d4:	9901      	ldr	r1, [sp, #4]
 800d1d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d1da:	f000 fd9b 	bl	800dd14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1de:	4620      	mov	r0, r4
 800d1e0:	f7ff fc9c 	bl	800cb1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1e4:	f000 fca4 	bl	800db30 <xTaskResumeAll>
 800d1e8:	2800      	cmp	r0, #0
 800d1ea:	d1ca      	bne.n	800d182 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800d1ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d1f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d1f8:	f3bf 8f4f 	dsb	sy
 800d1fc:	f3bf 8f6f 	isb	sy
 800d200:	e7bf      	b.n	800d182 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800d202:	2000      	movs	r0, #0
 800d204:	e789      	b.n	800d11a <xQueueReceive+0x72>

0800d206 <xQueueSemaphoreTake>:
{
 800d206:	b570      	push	{r4, r5, r6, lr}
 800d208:	b084      	sub	sp, #16
 800d20a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d20c:	b158      	cbz	r0, 800d226 <xQueueSemaphoreTake+0x20>
 800d20e:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800d210:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d212:	b18b      	cbz	r3, 800d238 <xQueueSemaphoreTake+0x32>
 800d214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d218:	f383 8811 	msr	BASEPRI, r3
 800d21c:	f3bf 8f6f 	isb	sy
 800d220:	f3bf 8f4f 	dsb	sy
 800d224:	e7fe      	b.n	800d224 <xQueueSemaphoreTake+0x1e>
 800d226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22a:	f383 8811 	msr	BASEPRI, r3
 800d22e:	f3bf 8f6f 	isb	sy
 800d232:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800d236:	e7fe      	b.n	800d236 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d238:	f000 fe3a 	bl	800deb0 <xTaskGetSchedulerState>
 800d23c:	4605      	mov	r5, r0
 800d23e:	b950      	cbnz	r0, 800d256 <xQueueSemaphoreTake+0x50>
 800d240:	9b01      	ldr	r3, [sp, #4]
 800d242:	b15b      	cbz	r3, 800d25c <xQueueSemaphoreTake+0x56>
 800d244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d248:	f383 8811 	msr	BASEPRI, r3
 800d24c:	f3bf 8f6f 	isb	sy
 800d250:	f3bf 8f4f 	dsb	sy
 800d254:	e7fe      	b.n	800d254 <xQueueSemaphoreTake+0x4e>
 800d256:	2600      	movs	r6, #0
 800d258:	4635      	mov	r5, r6
 800d25a:	e055      	b.n	800d308 <xQueueSemaphoreTake+0x102>
 800d25c:	4606      	mov	r6, r0
 800d25e:	e053      	b.n	800d308 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d260:	3b01      	subs	r3, #1
 800d262:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d264:	6823      	ldr	r3, [r4, #0]
 800d266:	b13b      	cbz	r3, 800d278 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d268:	6923      	ldr	r3, [r4, #16]
 800d26a:	b94b      	cbnz	r3, 800d280 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800d26c:	f001 f9dc 	bl	800e628 <vPortExitCritical>
				return pdPASS;
 800d270:	2601      	movs	r6, #1
}
 800d272:	4630      	mov	r0, r6
 800d274:	b004      	add	sp, #16
 800d276:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d278:	f000 ff0e 	bl	800e098 <pvTaskIncrementMutexHeldCount>
 800d27c:	60a0      	str	r0, [r4, #8]
 800d27e:	e7f3      	b.n	800d268 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d280:	f104 0010 	add.w	r0, r4, #16
 800d284:	f000 fd7a 	bl	800dd7c <xTaskRemoveFromEventList>
 800d288:	2800      	cmp	r0, #0
 800d28a:	d0ef      	beq.n	800d26c <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800d28c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d294:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d298:	f3bf 8f4f 	dsb	sy
 800d29c:	f3bf 8f6f 	isb	sy
 800d2a0:	e7e4      	b.n	800d26c <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d2a2:	b146      	cbz	r6, 800d2b6 <xQueueSemaphoreTake+0xb0>
 800d2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a8:	f383 8811 	msr	BASEPRI, r3
 800d2ac:	f3bf 8f6f 	isb	sy
 800d2b0:	f3bf 8f4f 	dsb	sy
 800d2b4:	e7fe      	b.n	800d2b4 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 800d2b6:	f001 f9b7 	bl	800e628 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d2ba:	e7da      	b.n	800d272 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d2bc:	a802      	add	r0, sp, #8
 800d2be:	f000 fda3 	bl	800de08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d2c2:	2501      	movs	r5, #1
 800d2c4:	e02a      	b.n	800d31c <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800d2cc:	e032      	b.n	800d334 <xQueueSemaphoreTake+0x12e>
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2d4:	e034      	b.n	800d340 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800d2d6:	f001 f985 	bl	800e5e4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d2da:	68a0      	ldr	r0, [r4, #8]
 800d2dc:	f000 fdf8 	bl	800ded0 <xTaskPriorityInherit>
 800d2e0:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800d2e2:	f001 f9a1 	bl	800e628 <vPortExitCritical>
 800d2e6:	e03b      	b.n	800d360 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	f7ff fc17 	bl	800cb1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2ee:	f000 fc1f 	bl	800db30 <xTaskResumeAll>
 800d2f2:	e009      	b.n	800d308 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	f7ff fc11 	bl	800cb1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2fa:	f000 fc19 	bl	800db30 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2fe:	4620      	mov	r0, r4
 800d300:	f7ff fbb2 	bl	800ca68 <prvIsQueueEmpty>
 800d304:	2800      	cmp	r0, #0
 800d306:	d142      	bne.n	800d38e <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 800d308:	f001 f96c 	bl	800e5e4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d30c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d1a6      	bne.n	800d260 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d312:	9b01      	ldr	r3, [sp, #4]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d0c4      	beq.n	800d2a2 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 800d318:	2d00      	cmp	r5, #0
 800d31a:	d0cf      	beq.n	800d2bc <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 800d31c:	f001 f984 	bl	800e628 <vPortExitCritical>
		vTaskSuspendAll();
 800d320:	f000 fb6c 	bl	800d9fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d324:	f001 f95e 	bl	800e5e4 <vPortEnterCritical>
 800d328:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d32c:	b25b      	sxtb	r3, r3
 800d32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d332:	d0c8      	beq.n	800d2c6 <xQueueSemaphoreTake+0xc0>
 800d334:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d338:	b25b      	sxtb	r3, r3
 800d33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d33e:	d0c6      	beq.n	800d2ce <xQueueSemaphoreTake+0xc8>
 800d340:	f001 f972 	bl	800e628 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d344:	a901      	add	r1, sp, #4
 800d346:	a802      	add	r0, sp, #8
 800d348:	f000 fd6a 	bl	800de20 <xTaskCheckForTimeOut>
 800d34c:	2800      	cmp	r0, #0
 800d34e:	d1d1      	bne.n	800d2f4 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d350:	4620      	mov	r0, r4
 800d352:	f7ff fb89 	bl	800ca68 <prvIsQueueEmpty>
 800d356:	2800      	cmp	r0, #0
 800d358:	d0c6      	beq.n	800d2e8 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d35a:	6823      	ldr	r3, [r4, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d0ba      	beq.n	800d2d6 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d360:	9901      	ldr	r1, [sp, #4]
 800d362:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d366:	f000 fcd5 	bl	800dd14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d36a:	4620      	mov	r0, r4
 800d36c:	f7ff fbd6 	bl	800cb1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d370:	f000 fbde 	bl	800db30 <xTaskResumeAll>
 800d374:	2800      	cmp	r0, #0
 800d376:	d1c7      	bne.n	800d308 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 800d378:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d37c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d380:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d384:	f3bf 8f4f 	dsb	sy
 800d388:	f3bf 8f6f 	isb	sy
 800d38c:	e7bc      	b.n	800d308 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 800d38e:	b90e      	cbnz	r6, 800d394 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 800d390:	2600      	movs	r6, #0
 800d392:	e76e      	b.n	800d272 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800d394:	f001 f926 	bl	800e5e4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d398:	4620      	mov	r0, r4
 800d39a:	f7ff fb4e 	bl	800ca3a <prvGetDisinheritPriorityAfterTimeout>
 800d39e:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d3a0:	68a0      	ldr	r0, [r4, #8]
 800d3a2:	f000 fe29 	bl	800dff8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800d3a6:	f001 f93f 	bl	800e628 <vPortExitCritical>
 800d3aa:	e7f1      	b.n	800d390 <xQueueSemaphoreTake+0x18a>

0800d3ac <xQueueReceiveFromISR>:
{
 800d3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800d3b0:	b1b0      	cbz	r0, 800d3e0 <xQueueReceiveFromISR+0x34>
 800d3b2:	460d      	mov	r5, r1
 800d3b4:	4616      	mov	r6, r2
 800d3b6:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3b8:	b1d9      	cbz	r1, 800d3f2 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3ba:	f001 fa39 	bl	800e830 <vPortValidateInterruptPriority>
	__asm volatile
 800d3be:	f3ef 8811 	mrs	r8, BASEPRI
 800d3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c6:	f383 8811 	msr	BASEPRI, r3
 800d3ca:	f3bf 8f6f 	isb	sy
 800d3ce:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3d2:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d3d4:	b9cf      	cbnz	r7, 800d40a <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800d3d6:	2000      	movs	r0, #0
	__asm volatile
 800d3d8:	f388 8811 	msr	BASEPRI, r8
}
 800d3dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800d3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e4:	f383 8811 	msr	BASEPRI, r3
 800d3e8:	f3bf 8f6f 	isb	sy
 800d3ec:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800d3f0:	e7fe      	b.n	800d3f0 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3f2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d0e0      	beq.n	800d3ba <xQueueReceiveFromISR+0xe>
 800d3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fc:	f383 8811 	msr	BASEPRI, r3
 800d400:	f3bf 8f6f 	isb	sy
 800d404:	f3bf 8f4f 	dsb	sy
 800d408:	e7fe      	b.n	800d408 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800d40a:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 800d40e:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d412:	4629      	mov	r1, r5
 800d414:	4620      	mov	r0, r4
 800d416:	f7ff fb6f 	bl	800caf8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d41a:	3f01      	subs	r7, #1
 800d41c:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800d41e:	f1b9 3fff 	cmp.w	r9, #4294967295
 800d422:	d006      	beq.n	800d432 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d424:	f109 0301 	add.w	r3, r9, #1
 800d428:	b25b      	sxtb	r3, r3
 800d42a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800d42e:	2001      	movs	r0, #1
 800d430:	e7d2      	b.n	800d3d8 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d432:	6923      	ldr	r3, [r4, #16]
 800d434:	b90b      	cbnz	r3, 800d43a <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800d436:	2001      	movs	r0, #1
 800d438:	e7ce      	b.n	800d3d8 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d43a:	f104 0010 	add.w	r0, r4, #16
 800d43e:	f000 fc9d 	bl	800dd7c <xTaskRemoveFromEventList>
 800d442:	b118      	cbz	r0, 800d44c <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 800d444:	b126      	cbz	r6, 800d450 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d446:	2001      	movs	r0, #1
 800d448:	6030      	str	r0, [r6, #0]
 800d44a:	e7c5      	b.n	800d3d8 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800d44c:	2001      	movs	r0, #1
 800d44e:	e7c3      	b.n	800d3d8 <xQueueReceiveFromISR+0x2c>
 800d450:	2001      	movs	r0, #1
 800d452:	e7c1      	b.n	800d3d8 <xQueueReceiveFromISR+0x2c>

0800d454 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d454:	2300      	movs	r3, #0
 800d456:	2b07      	cmp	r3, #7
 800d458:	d80c      	bhi.n	800d474 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d45a:	4a07      	ldr	r2, [pc, #28]	; (800d478 <vQueueAddToRegistry+0x24>)
 800d45c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d460:	b10a      	cbz	r2, 800d466 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d462:	3301      	adds	r3, #1
 800d464:	e7f7      	b.n	800d456 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d466:	4a04      	ldr	r2, [pc, #16]	; (800d478 <vQueueAddToRegistry+0x24>)
 800d468:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d46c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d470:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d472:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d474:	4770      	bx	lr
 800d476:	bf00      	nop
 800d478:	24002d7c 	.word	0x24002d7c

0800d47c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d47c:	2300      	movs	r3, #0
 800d47e:	2b07      	cmp	r3, #7
 800d480:	d80f      	bhi.n	800d4a2 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d482:	4a08      	ldr	r2, [pc, #32]	; (800d4a4 <vQueueUnregisterQueue+0x28>)
 800d484:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d488:	6852      	ldr	r2, [r2, #4]
 800d48a:	4282      	cmp	r2, r0
 800d48c:	d001      	beq.n	800d492 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d48e:	3301      	adds	r3, #1
 800d490:	e7f5      	b.n	800d47e <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d492:	4a04      	ldr	r2, [pc, #16]	; (800d4a4 <vQueueUnregisterQueue+0x28>)
 800d494:	2100      	movs	r1, #0
 800d496:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d49a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d49e:	6059      	str	r1, [r3, #4]
				break;
 800d4a0:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d4a2:	4770      	bx	lr
 800d4a4:	24002d7c 	.word	0x24002d7c

0800d4a8 <vQueueDelete>:
	configASSERT( pxQueue );
 800d4a8:	b138      	cbz	r0, 800d4ba <vQueueDelete+0x12>
{
 800d4aa:	b510      	push	{r4, lr}
 800d4ac:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800d4ae:	f7ff ffe5 	bl	800d47c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d4b2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d4b6:	b14b      	cbz	r3, 800d4cc <vQueueDelete+0x24>
}
 800d4b8:	bd10      	pop	{r4, pc}
 800d4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4be:	f383 8811 	msr	BASEPRI, r3
 800d4c2:	f3bf 8f6f 	isb	sy
 800d4c6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800d4ca:	e7fe      	b.n	800d4ca <vQueueDelete+0x22>
			vPortFree( pxQueue );
 800d4cc:	4620      	mov	r0, r4
 800d4ce:	f001 fabf 	bl	800ea50 <vPortFree>
}
 800d4d2:	e7f1      	b.n	800d4b8 <vQueueDelete+0x10>

0800d4d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d4d4:	b570      	push	{r4, r5, r6, lr}
 800d4d6:	4604      	mov	r4, r0
 800d4d8:	460d      	mov	r5, r1
 800d4da:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d4dc:	f001 f882 	bl	800e5e4 <vPortEnterCritical>
 800d4e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d4e4:	b25b      	sxtb	r3, r3
 800d4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ea:	d00d      	beq.n	800d508 <vQueueWaitForMessageRestricted+0x34>
 800d4ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d4f0:	b25b      	sxtb	r3, r3
 800d4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f6:	d00b      	beq.n	800d510 <vQueueWaitForMessageRestricted+0x3c>
 800d4f8:	f001 f896 	bl	800e628 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d4fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d4fe:	b15b      	cbz	r3, 800d518 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d500:	4620      	mov	r0, r4
 800d502:	f7ff fb0b 	bl	800cb1c <prvUnlockQueue>
	}
 800d506:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800d508:	2300      	movs	r3, #0
 800d50a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800d50e:	e7ed      	b.n	800d4ec <vQueueWaitForMessageRestricted+0x18>
 800d510:	2300      	movs	r3, #0
 800d512:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d516:	e7ef      	b.n	800d4f8 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d518:	4632      	mov	r2, r6
 800d51a:	4629      	mov	r1, r5
 800d51c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d520:	f000 fc10 	bl	800dd44 <vTaskPlaceOnEventListRestricted>
 800d524:	e7ec      	b.n	800d500 <vQueueWaitForMessageRestricted+0x2c>
	...

0800d528 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d528:	4b08      	ldr	r3, [pc, #32]	; (800d54c <prvResetNextTaskUnblockTime+0x24>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	b923      	cbnz	r3, 800d53a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d530:	4b07      	ldr	r3, [pc, #28]	; (800d550 <prvResetNextTaskUnblockTime+0x28>)
 800d532:	f04f 32ff 	mov.w	r2, #4294967295
 800d536:	601a      	str	r2, [r3, #0]
 800d538:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d53a:	4b04      	ldr	r3, [pc, #16]	; (800d54c <prvResetNextTaskUnblockTime+0x24>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d542:	685a      	ldr	r2, [r3, #4]
 800d544:	4b02      	ldr	r3, [pc, #8]	; (800d550 <prvResetNextTaskUnblockTime+0x28>)
 800d546:	601a      	str	r2, [r3, #0]
	}
}
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop
 800d54c:	24002dc0 	.word	0x24002dc0
 800d550:	24003268 	.word	0x24003268

0800d554 <prvInitialiseNewTask>:
{
 800d554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d558:	4680      	mov	r8, r0
 800d55a:	460d      	mov	r5, r1
 800d55c:	4617      	mov	r7, r2
 800d55e:	4699      	mov	r9, r3
 800d560:	9e08      	ldr	r6, [sp, #32]
 800d562:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d566:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d568:	0092      	lsls	r2, r2, #2
 800d56a:	21a5      	movs	r1, #165	; 0xa5
 800d56c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d56e:	f00e f9e7 	bl	801b940 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d572:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d574:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800d578:	443a      	add	r2, r7
 800d57a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d57e:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800d582:	2d00      	cmp	r5, #0
 800d584:	d043      	beq.n	800d60e <prvInitialiseNewTask+0xba>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d586:	f04f 0c00 	mov.w	ip, #0
 800d58a:	f1bc 0f0f 	cmp.w	ip, #15
 800d58e:	d80b      	bhi.n	800d5a8 <prvInitialiseNewTask+0x54>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d590:	f815 200c 	ldrb.w	r2, [r5, ip]
 800d594:	eb04 030c 	add.w	r3, r4, ip
 800d598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800d59c:	f815 300c 	ldrb.w	r3, [r5, ip]
 800d5a0:	b113      	cbz	r3, 800d5a8 <prvInitialiseNewTask+0x54>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d5a2:	f10c 0c01 	add.w	ip, ip, #1
 800d5a6:	e7f0      	b.n	800d58a <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d5ae:	2e37      	cmp	r6, #55	; 0x37
 800d5b0:	d900      	bls.n	800d5b4 <prvInitialiseNewTask+0x60>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d5b2:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800d5b4:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800d5b6:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d5b8:	2500      	movs	r5, #0
 800d5ba:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d5bc:	1d20      	adds	r0, r4, #4
 800d5be:	f7ff fa02 	bl	800c9c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d5c2:	f104 0018 	add.w	r0, r4, #24
 800d5c6:	f7ff f9fe 	bl	800c9c6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d5ca:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5cc:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 800d5d0:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d5d2:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800d5d4:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d5d8:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d5dc:	2260      	movs	r2, #96	; 0x60
 800d5de:	4629      	mov	r1, r5
 800d5e0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800d5e4:	f00e f9ac 	bl	801b940 <memset>
 800d5e8:	4b0b      	ldr	r3, [pc, #44]	; (800d618 <prvInitialiseNewTask+0xc4>)
 800d5ea:	65a3      	str	r3, [r4, #88]	; 0x58
 800d5ec:	4b0b      	ldr	r3, [pc, #44]	; (800d61c <prvInitialiseNewTask+0xc8>)
 800d5ee:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d5f0:	4b0b      	ldr	r3, [pc, #44]	; (800d620 <prvInitialiseNewTask+0xcc>)
 800d5f2:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d5f4:	464a      	mov	r2, r9
 800d5f6:	4641      	mov	r1, r8
 800d5f8:	4638      	mov	r0, r7
 800d5fa:	f000 ffc9 	bl	800e590 <pxPortInitialiseStack>
 800d5fe:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800d600:	f1ba 0f00 	cmp.w	sl, #0
 800d604:	d001      	beq.n	800d60a <prvInitialiseNewTask+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d606:	f8ca 4000 	str.w	r4, [sl]
}
 800d60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d60e:	2300      	movs	r3, #0
 800d610:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800d614:	e7cb      	b.n	800d5ae <prvInitialiseNewTask+0x5a>
 800d616:	bf00      	nop
 800d618:	0801dbe0 	.word	0x0801dbe0
 800d61c:	0801dc00 	.word	0x0801dc00
 800d620:	0801dbc0 	.word	0x0801dbc0

0800d624 <prvInitialiseTaskLists>:
{
 800d624:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d626:	2400      	movs	r4, #0
 800d628:	e007      	b.n	800d63a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d62a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800d62e:	0093      	lsls	r3, r2, #2
 800d630:	480e      	ldr	r0, [pc, #56]	; (800d66c <prvInitialiseTaskLists+0x48>)
 800d632:	4418      	add	r0, r3
 800d634:	f7ff f9bc 	bl	800c9b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d638:	3401      	adds	r4, #1
 800d63a:	2c37      	cmp	r4, #55	; 0x37
 800d63c:	d9f5      	bls.n	800d62a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800d63e:	4d0c      	ldr	r5, [pc, #48]	; (800d670 <prvInitialiseTaskLists+0x4c>)
 800d640:	4628      	mov	r0, r5
 800d642:	f7ff f9b5 	bl	800c9b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d646:	4c0b      	ldr	r4, [pc, #44]	; (800d674 <prvInitialiseTaskLists+0x50>)
 800d648:	4620      	mov	r0, r4
 800d64a:	f7ff f9b1 	bl	800c9b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d64e:	480a      	ldr	r0, [pc, #40]	; (800d678 <prvInitialiseTaskLists+0x54>)
 800d650:	f7ff f9ae 	bl	800c9b0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800d654:	4809      	ldr	r0, [pc, #36]	; (800d67c <prvInitialiseTaskLists+0x58>)
 800d656:	f7ff f9ab 	bl	800c9b0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800d65a:	4809      	ldr	r0, [pc, #36]	; (800d680 <prvInitialiseTaskLists+0x5c>)
 800d65c:	f7ff f9a8 	bl	800c9b0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800d660:	4b08      	ldr	r3, [pc, #32]	; (800d684 <prvInitialiseTaskLists+0x60>)
 800d662:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d664:	4b08      	ldr	r3, [pc, #32]	; (800d688 <prvInitialiseTaskLists+0x64>)
 800d666:	601c      	str	r4, [r3, #0]
}
 800d668:	bd38      	pop	{r3, r4, r5, pc}
 800d66a:	bf00      	nop
 800d66c:	24002dc8 	.word	0x24002dc8
 800d670:	2400323c 	.word	0x2400323c
 800d674:	24003250 	.word	0x24003250
 800d678:	24003274 	.word	0x24003274
 800d67c:	240032a0 	.word	0x240032a0
 800d680:	2400328c 	.word	0x2400328c
 800d684:	24002dc0 	.word	0x24002dc0
 800d688:	24002dc4 	.word	0x24002dc4

0800d68c <prvAddNewTaskToReadyList>:
{
 800d68c:	b510      	push	{r4, lr}
 800d68e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d690:	f000 ffa8 	bl	800e5e4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800d694:	4a22      	ldr	r2, [pc, #136]	; (800d720 <prvAddNewTaskToReadyList+0x94>)
 800d696:	6813      	ldr	r3, [r2, #0]
 800d698:	3301      	adds	r3, #1
 800d69a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d69c:	4b21      	ldr	r3, [pc, #132]	; (800d724 <prvAddNewTaskToReadyList+0x98>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	b15b      	cbz	r3, 800d6ba <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800d6a2:	4b21      	ldr	r3, [pc, #132]	; (800d728 <prvAddNewTaskToReadyList+0x9c>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	b96b      	cbnz	r3, 800d6c4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d6a8:	4b1e      	ldr	r3, [pc, #120]	; (800d724 <prvAddNewTaskToReadyList+0x98>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d807      	bhi.n	800d6c4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800d6b4:	4b1b      	ldr	r3, [pc, #108]	; (800d724 <prvAddNewTaskToReadyList+0x98>)
 800d6b6:	601c      	str	r4, [r3, #0]
 800d6b8:	e004      	b.n	800d6c4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800d6ba:	4b1a      	ldr	r3, [pc, #104]	; (800d724 <prvAddNewTaskToReadyList+0x98>)
 800d6bc:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d6be:	6813      	ldr	r3, [r2, #0]
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d029      	beq.n	800d718 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800d6c4:	4a19      	ldr	r2, [pc, #100]	; (800d72c <prvAddNewTaskToReadyList+0xa0>)
 800d6c6:	6813      	ldr	r3, [r2, #0]
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d6cc:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800d6ce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d6d0:	4b17      	ldr	r3, [pc, #92]	; (800d730 <prvAddNewTaskToReadyList+0xa4>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4298      	cmp	r0, r3
 800d6d6:	d901      	bls.n	800d6dc <prvAddNewTaskToReadyList+0x50>
 800d6d8:	4b15      	ldr	r3, [pc, #84]	; (800d730 <prvAddNewTaskToReadyList+0xa4>)
 800d6da:	6018      	str	r0, [r3, #0]
 800d6dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d6e0:	1d21      	adds	r1, r4, #4
 800d6e2:	4b14      	ldr	r3, [pc, #80]	; (800d734 <prvAddNewTaskToReadyList+0xa8>)
 800d6e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d6e8:	f7ff f970 	bl	800c9cc <vListInsertEnd>
	taskEXIT_CRITICAL();
 800d6ec:	f000 ff9c 	bl	800e628 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800d6f0:	4b0d      	ldr	r3, [pc, #52]	; (800d728 <prvAddNewTaskToReadyList+0x9c>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	b17b      	cbz	r3, 800d716 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d6f6:	4b0b      	ldr	r3, [pc, #44]	; (800d724 <prvAddNewTaskToReadyList+0x98>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d209      	bcs.n	800d716 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800d702:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d70a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d70e:	f3bf 8f4f 	dsb	sy
 800d712:	f3bf 8f6f 	isb	sy
}
 800d716:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800d718:	f7ff ff84 	bl	800d624 <prvInitialiseTaskLists>
 800d71c:	e7d2      	b.n	800d6c4 <prvAddNewTaskToReadyList+0x38>
 800d71e:	bf00      	nop
 800d720:	24003228 	.word	0x24003228
 800d724:	24002dbc 	.word	0x24002dbc
 800d728:	24003288 	.word	0x24003288
 800d72c:	24003234 	.word	0x24003234
 800d730:	24003238 	.word	0x24003238
 800d734:	24002dc8 	.word	0x24002dc8

0800d738 <prvDeleteTCB>:
	{
 800d738:	b510      	push	{r4, lr}
 800d73a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d73c:	3054      	adds	r0, #84	; 0x54
 800d73e:	f00e f9f5 	bl	801bb2c <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d742:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800d746:	b163      	cbz	r3, 800d762 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d011      	beq.n	800d770 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d74c:	2b02      	cmp	r3, #2
 800d74e:	d00e      	beq.n	800d76e <prvDeleteTCB+0x36>
 800d750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d754:	f383 8811 	msr	BASEPRI, r3
 800d758:	f3bf 8f6f 	isb	sy
 800d75c:	f3bf 8f4f 	dsb	sy
 800d760:	e7fe      	b.n	800d760 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800d762:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d764:	f001 f974 	bl	800ea50 <vPortFree>
				vPortFree( pxTCB );
 800d768:	4620      	mov	r0, r4
 800d76a:	f001 f971 	bl	800ea50 <vPortFree>
	}
 800d76e:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800d770:	4620      	mov	r0, r4
 800d772:	f001 f96d 	bl	800ea50 <vPortFree>
 800d776:	e7fa      	b.n	800d76e <prvDeleteTCB+0x36>

0800d778 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d778:	4b0f      	ldr	r3, [pc, #60]	; (800d7b8 <prvCheckTasksWaitingTermination+0x40>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	b1d3      	cbz	r3, 800d7b4 <prvCheckTasksWaitingTermination+0x3c>
{
 800d77e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800d780:	f000 ff30 	bl	800e5e4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d784:	4b0d      	ldr	r3, [pc, #52]	; (800d7bc <prvCheckTasksWaitingTermination+0x44>)
 800d786:	68db      	ldr	r3, [r3, #12]
 800d788:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d78a:	1d20      	adds	r0, r4, #4
 800d78c:	f7ff f942 	bl	800ca14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d790:	4a0b      	ldr	r2, [pc, #44]	; (800d7c0 <prvCheckTasksWaitingTermination+0x48>)
 800d792:	6813      	ldr	r3, [r2, #0]
 800d794:	3b01      	subs	r3, #1
 800d796:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d798:	4a07      	ldr	r2, [pc, #28]	; (800d7b8 <prvCheckTasksWaitingTermination+0x40>)
 800d79a:	6813      	ldr	r3, [r2, #0]
 800d79c:	3b01      	subs	r3, #1
 800d79e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800d7a0:	f000 ff42 	bl	800e628 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	f7ff ffc7 	bl	800d738 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d7aa:	4b03      	ldr	r3, [pc, #12]	; (800d7b8 <prvCheckTasksWaitingTermination+0x40>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1e6      	bne.n	800d780 <prvCheckTasksWaitingTermination+0x8>
}
 800d7b2:	bd10      	pop	{r4, pc}
 800d7b4:	4770      	bx	lr
 800d7b6:	bf00      	nop
 800d7b8:	2400322c 	.word	0x2400322c
 800d7bc:	240032a0 	.word	0x240032a0
 800d7c0:	24003228 	.word	0x24003228

0800d7c4 <prvIdleTask>:
{
 800d7c4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800d7c6:	f7ff ffd7 	bl	800d778 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d7ca:	4b07      	ldr	r3, [pc, #28]	; (800d7e8 <prvIdleTask+0x24>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d9f9      	bls.n	800d7c6 <prvIdleTask+0x2>
				taskYIELD();
 800d7d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d7d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7da:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d7de:	f3bf 8f4f 	dsb	sy
 800d7e2:	f3bf 8f6f 	isb	sy
 800d7e6:	e7ee      	b.n	800d7c6 <prvIdleTask+0x2>
 800d7e8:	24002dc8 	.word	0x24002dc8

0800d7ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d7ec:	b570      	push	{r4, r5, r6, lr}
 800d7ee:	4604      	mov	r4, r0
 800d7f0:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d7f2:	4b19      	ldr	r3, [pc, #100]	; (800d858 <prvAddCurrentTaskToDelayedList+0x6c>)
 800d7f4:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7f6:	4b19      	ldr	r3, [pc, #100]	; (800d85c <prvAddCurrentTaskToDelayedList+0x70>)
 800d7f8:	6818      	ldr	r0, [r3, #0]
 800d7fa:	3004      	adds	r0, #4
 800d7fc:	f7ff f90a 	bl	800ca14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d800:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d804:	bf14      	ite	ne
 800d806:	2300      	movne	r3, #0
 800d808:	2301      	moveq	r3, #1
 800d80a:	2d00      	cmp	r5, #0
 800d80c:	bf08      	it	eq
 800d80e:	2300      	moveq	r3, #0
 800d810:	b96b      	cbnz	r3, 800d82e <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d812:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d814:	4b11      	ldr	r3, [pc, #68]	; (800d85c <prvAddCurrentTaskToDelayedList+0x70>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800d81a:	42a6      	cmp	r6, r4
 800d81c:	d90e      	bls.n	800d83c <prvAddCurrentTaskToDelayedList+0x50>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d81e:	4b10      	ldr	r3, [pc, #64]	; (800d860 <prvAddCurrentTaskToDelayedList+0x74>)
 800d820:	6818      	ldr	r0, [r3, #0]
 800d822:	4b0e      	ldr	r3, [pc, #56]	; (800d85c <prvAddCurrentTaskToDelayedList+0x70>)
 800d824:	6819      	ldr	r1, [r3, #0]
 800d826:	3104      	adds	r1, #4
 800d828:	f7ff f8db 	bl	800c9e2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d82c:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d82e:	4b0b      	ldr	r3, [pc, #44]	; (800d85c <prvAddCurrentTaskToDelayedList+0x70>)
 800d830:	6819      	ldr	r1, [r3, #0]
 800d832:	3104      	adds	r1, #4
 800d834:	480b      	ldr	r0, [pc, #44]	; (800d864 <prvAddCurrentTaskToDelayedList+0x78>)
 800d836:	f7ff f8c9 	bl	800c9cc <vListInsertEnd>
 800d83a:	e7f7      	b.n	800d82c <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d83c:	4b0a      	ldr	r3, [pc, #40]	; (800d868 <prvAddCurrentTaskToDelayedList+0x7c>)
 800d83e:	6818      	ldr	r0, [r3, #0]
 800d840:	4b06      	ldr	r3, [pc, #24]	; (800d85c <prvAddCurrentTaskToDelayedList+0x70>)
 800d842:	6819      	ldr	r1, [r3, #0]
 800d844:	3104      	adds	r1, #4
 800d846:	f7ff f8cc 	bl	800c9e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d84a:	4b08      	ldr	r3, [pc, #32]	; (800d86c <prvAddCurrentTaskToDelayedList+0x80>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	42a3      	cmp	r3, r4
 800d850:	d9ec      	bls.n	800d82c <prvAddCurrentTaskToDelayedList+0x40>
					xNextTaskUnblockTime = xTimeToWake;
 800d852:	4b06      	ldr	r3, [pc, #24]	; (800d86c <prvAddCurrentTaskToDelayedList+0x80>)
 800d854:	601c      	str	r4, [r3, #0]
}
 800d856:	e7e9      	b.n	800d82c <prvAddCurrentTaskToDelayedList+0x40>
 800d858:	240032b4 	.word	0x240032b4
 800d85c:	24002dbc 	.word	0x24002dbc
 800d860:	24002dc4 	.word	0x24002dc4
 800d864:	2400328c 	.word	0x2400328c
 800d868:	24002dc0 	.word	0x24002dc0
 800d86c:	24003268 	.word	0x24003268

0800d870 <xTaskCreateStatic>:
	{
 800d870:	b530      	push	{r4, r5, lr}
 800d872:	b087      	sub	sp, #28
 800d874:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800d876:	b17c      	cbz	r4, 800d898 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d878:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d87a:	b1b5      	cbz	r5, 800d8aa <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800d87c:	25bc      	movs	r5, #188	; 0xbc
 800d87e:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d880:	9d04      	ldr	r5, [sp, #16]
 800d882:	2dbc      	cmp	r5, #188	; 0xbc
 800d884:	d01a      	beq.n	800d8bc <xTaskCreateStatic+0x4c>
 800d886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d88a:	f383 8811 	msr	BASEPRI, r3
 800d88e:	f3bf 8f6f 	isb	sy
 800d892:	f3bf 8f4f 	dsb	sy
 800d896:	e7fe      	b.n	800d896 <xTaskCreateStatic+0x26>
 800d898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d89c:	f383 8811 	msr	BASEPRI, r3
 800d8a0:	f3bf 8f6f 	isb	sy
 800d8a4:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800d8a8:	e7fe      	b.n	800d8a8 <xTaskCreateStatic+0x38>
 800d8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ae:	f383 8811 	msr	BASEPRI, r3
 800d8b2:	f3bf 8f6f 	isb	sy
 800d8b6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800d8ba:	e7fe      	b.n	800d8ba <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d8bc:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d8be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d8c0:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d8c2:	2402      	movs	r4, #2
 800d8c4:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d8c8:	2400      	movs	r4, #0
 800d8ca:	9403      	str	r4, [sp, #12]
 800d8cc:	9502      	str	r5, [sp, #8]
 800d8ce:	ac05      	add	r4, sp, #20
 800d8d0:	9401      	str	r4, [sp, #4]
 800d8d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d8d4:	9400      	str	r4, [sp, #0]
 800d8d6:	f7ff fe3d 	bl	800d554 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d8da:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d8dc:	f7ff fed6 	bl	800d68c <prvAddNewTaskToReadyList>
	}
 800d8e0:	9805      	ldr	r0, [sp, #20]
 800d8e2:	b007      	add	sp, #28
 800d8e4:	bd30      	pop	{r4, r5, pc}

0800d8e6 <xTaskCreate>:
	{
 800d8e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8ea:	b085      	sub	sp, #20
 800d8ec:	4607      	mov	r7, r0
 800d8ee:	4688      	mov	r8, r1
 800d8f0:	4614      	mov	r4, r2
 800d8f2:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d8f4:	0090      	lsls	r0, r2, #2
 800d8f6:	f001 f82d 	bl	800e954 <pvPortMalloc>
			if( pxStack != NULL )
 800d8fa:	b300      	cbz	r0, 800d93e <xTaskCreate+0x58>
 800d8fc:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d8fe:	20bc      	movs	r0, #188	; 0xbc
 800d900:	f001 f828 	bl	800e954 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800d904:	4605      	mov	r5, r0
 800d906:	b1b0      	cbz	r0, 800d936 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800d908:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800d90c:	b1e5      	cbz	r5, 800d948 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d90e:	2300      	movs	r3, #0
 800d910:	f885 30b9 	strb.w	r3, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d914:	9303      	str	r3, [sp, #12]
 800d916:	9502      	str	r5, [sp, #8]
 800d918:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d91a:	9301      	str	r3, [sp, #4]
 800d91c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d91e:	9300      	str	r3, [sp, #0]
 800d920:	4633      	mov	r3, r6
 800d922:	4622      	mov	r2, r4
 800d924:	4641      	mov	r1, r8
 800d926:	4638      	mov	r0, r7
 800d928:	f7ff fe14 	bl	800d554 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d92c:	4628      	mov	r0, r5
 800d92e:	f7ff fead 	bl	800d68c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d932:	2001      	movs	r0, #1
 800d934:	e005      	b.n	800d942 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 800d936:	4648      	mov	r0, r9
 800d938:	f001 f88a 	bl	800ea50 <vPortFree>
 800d93c:	e7e6      	b.n	800d90c <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d93e:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800d942:	b005      	add	sp, #20
 800d944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d948:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800d94c:	e7f9      	b.n	800d942 <xTaskCreate+0x5c>
	...

0800d950 <vTaskStartScheduler>:
{
 800d950:	b510      	push	{r4, lr}
 800d952:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d954:	2400      	movs	r4, #0
 800d956:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d958:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d95a:	aa07      	add	r2, sp, #28
 800d95c:	a906      	add	r1, sp, #24
 800d95e:	a805      	add	r0, sp, #20
 800d960:	f7ff f80e 	bl	800c980 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d964:	9b05      	ldr	r3, [sp, #20]
 800d966:	9302      	str	r3, [sp, #8]
 800d968:	9b06      	ldr	r3, [sp, #24]
 800d96a:	9301      	str	r3, [sp, #4]
 800d96c:	9400      	str	r4, [sp, #0]
 800d96e:	4623      	mov	r3, r4
 800d970:	9a07      	ldr	r2, [sp, #28]
 800d972:	491a      	ldr	r1, [pc, #104]	; (800d9dc <vTaskStartScheduler+0x8c>)
 800d974:	481a      	ldr	r0, [pc, #104]	; (800d9e0 <vTaskStartScheduler+0x90>)
 800d976:	f7ff ff7b 	bl	800d870 <xTaskCreateStatic>
 800d97a:	4b1a      	ldr	r3, [pc, #104]	; (800d9e4 <vTaskStartScheduler+0x94>)
 800d97c:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800d97e:	b140      	cbz	r0, 800d992 <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 800d980:	f000 fc08 	bl	800e194 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800d984:	2801      	cmp	r0, #1
 800d986:	d006      	beq.n	800d996 <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d988:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d98c:	d01d      	beq.n	800d9ca <vTaskStartScheduler+0x7a>
}
 800d98e:	b008      	add	sp, #32
 800d990:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800d992:	2000      	movs	r0, #0
 800d994:	e7f6      	b.n	800d984 <vTaskStartScheduler+0x34>
 800d996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d99a:	f383 8811 	msr	BASEPRI, r3
 800d99e:	f3bf 8f6f 	isb	sy
 800d9a2:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d9a6:	4b10      	ldr	r3, [pc, #64]	; (800d9e8 <vTaskStartScheduler+0x98>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	3354      	adds	r3, #84	; 0x54
 800d9ac:	4a0f      	ldr	r2, [pc, #60]	; (800d9ec <vTaskStartScheduler+0x9c>)
 800d9ae:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800d9b0:	4b0f      	ldr	r3, [pc, #60]	; (800d9f0 <vTaskStartScheduler+0xa0>)
 800d9b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d9b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d9b8:	4b0e      	ldr	r3, [pc, #56]	; (800d9f4 <vTaskStartScheduler+0xa4>)
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d9be:	4b0e      	ldr	r3, [pc, #56]	; (800d9f8 <vTaskStartScheduler+0xa8>)
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800d9c4:	f000 fea8 	bl	800e718 <xPortStartScheduler>
 800d9c8:	e7e1      	b.n	800d98e <vTaskStartScheduler+0x3e>
 800d9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ce:	f383 8811 	msr	BASEPRI, r3
 800d9d2:	f3bf 8f6f 	isb	sy
 800d9d6:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d9da:	e7fe      	b.n	800d9da <vTaskStartScheduler+0x8a>
 800d9dc:	0801bfe4 	.word	0x0801bfe4
 800d9e0:	0800d7c5 	.word	0x0800d7c5
 800d9e4:	24003264 	.word	0x24003264
 800d9e8:	24002dbc 	.word	0x24002dbc
 800d9ec:	24000014 	.word	0x24000014
 800d9f0:	24003268 	.word	0x24003268
 800d9f4:	24003288 	.word	0x24003288
 800d9f8:	240032b4 	.word	0x240032b4

0800d9fc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d9fc:	4a02      	ldr	r2, [pc, #8]	; (800da08 <vTaskSuspendAll+0xc>)
 800d9fe:	6813      	ldr	r3, [r2, #0]
 800da00:	3301      	adds	r3, #1
 800da02:	6013      	str	r3, [r2, #0]
}
 800da04:	4770      	bx	lr
 800da06:	bf00      	nop
 800da08:	24003230 	.word	0x24003230

0800da0c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800da0c:	4b01      	ldr	r3, [pc, #4]	; (800da14 <xTaskGetTickCount+0x8>)
 800da0e:	6818      	ldr	r0, [r3, #0]
}
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	240032b4 	.word	0x240032b4

0800da18 <xTaskIncrementTick>:
{
 800da18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da1a:	4b3a      	ldr	r3, [pc, #232]	; (800db04 <xTaskIncrementTick+0xec>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d169      	bne.n	800daf6 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800da22:	4b39      	ldr	r3, [pc, #228]	; (800db08 <xTaskIncrementTick+0xf0>)
 800da24:	681d      	ldr	r5, [r3, #0]
 800da26:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800da28:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800da2a:	b9c5      	cbnz	r5, 800da5e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800da2c:	4b37      	ldr	r3, [pc, #220]	; (800db0c <xTaskIncrementTick+0xf4>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	b143      	cbz	r3, 800da46 <xTaskIncrementTick+0x2e>
 800da34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da38:	f383 8811 	msr	BASEPRI, r3
 800da3c:	f3bf 8f6f 	isb	sy
 800da40:	f3bf 8f4f 	dsb	sy
 800da44:	e7fe      	b.n	800da44 <xTaskIncrementTick+0x2c>
 800da46:	4a31      	ldr	r2, [pc, #196]	; (800db0c <xTaskIncrementTick+0xf4>)
 800da48:	6811      	ldr	r1, [r2, #0]
 800da4a:	4b31      	ldr	r3, [pc, #196]	; (800db10 <xTaskIncrementTick+0xf8>)
 800da4c:	6818      	ldr	r0, [r3, #0]
 800da4e:	6010      	str	r0, [r2, #0]
 800da50:	6019      	str	r1, [r3, #0]
 800da52:	4a30      	ldr	r2, [pc, #192]	; (800db14 <xTaskIncrementTick+0xfc>)
 800da54:	6813      	ldr	r3, [r2, #0]
 800da56:	3301      	adds	r3, #1
 800da58:	6013      	str	r3, [r2, #0]
 800da5a:	f7ff fd65 	bl	800d528 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800da5e:	4b2e      	ldr	r3, [pc, #184]	; (800db18 <xTaskIncrementTick+0x100>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	42ab      	cmp	r3, r5
 800da64:	d93d      	bls.n	800dae2 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800da66:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800da68:	4b2c      	ldr	r3, [pc, #176]	; (800db1c <xTaskIncrementTick+0x104>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800da72:	009a      	lsls	r2, r3, #2
 800da74:	4b2a      	ldr	r3, [pc, #168]	; (800db20 <xTaskIncrementTick+0x108>)
 800da76:	589b      	ldr	r3, [r3, r2]
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d900      	bls.n	800da7e <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800da7c:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800da7e:	4b29      	ldr	r3, [pc, #164]	; (800db24 <xTaskIncrementTick+0x10c>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d03c      	beq.n	800db00 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800da86:	2701      	movs	r7, #1
	return xSwitchRequired;
 800da88:	e03a      	b.n	800db00 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800da8a:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da8c:	4b1f      	ldr	r3, [pc, #124]	; (800db0c <xTaskIncrementTick+0xf4>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	b343      	cbz	r3, 800dae6 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da94:	4b1d      	ldr	r3, [pc, #116]	; (800db0c <xTaskIncrementTick+0xf4>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	68db      	ldr	r3, [r3, #12]
 800da9a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800da9c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800da9e:	429d      	cmp	r5, r3
 800daa0:	d326      	bcc.n	800daf0 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800daa2:	1d26      	adds	r6, r4, #4
 800daa4:	4630      	mov	r0, r6
 800daa6:	f7fe ffb5 	bl	800ca14 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800daaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800daac:	b11b      	cbz	r3, 800dab6 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800daae:	f104 0018 	add.w	r0, r4, #24
 800dab2:	f7fe ffaf 	bl	800ca14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dab6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dab8:	4a1b      	ldr	r2, [pc, #108]	; (800db28 <xTaskIncrementTick+0x110>)
 800daba:	6812      	ldr	r2, [r2, #0]
 800dabc:	4293      	cmp	r3, r2
 800dabe:	d901      	bls.n	800dac4 <xTaskIncrementTick+0xac>
 800dac0:	4a19      	ldr	r2, [pc, #100]	; (800db28 <xTaskIncrementTick+0x110>)
 800dac2:	6013      	str	r3, [r2, #0]
 800dac4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800dac8:	009a      	lsls	r2, r3, #2
 800daca:	4631      	mov	r1, r6
 800dacc:	4814      	ldr	r0, [pc, #80]	; (800db20 <xTaskIncrementTick+0x108>)
 800dace:	4410      	add	r0, r2
 800dad0:	f7fe ff7c 	bl	800c9cc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dad4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800dad6:	4b11      	ldr	r3, [pc, #68]	; (800db1c <xTaskIncrementTick+0x104>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dadc:	429a      	cmp	r2, r3
 800dade:	d2d4      	bcs.n	800da8a <xTaskIncrementTick+0x72>
 800dae0:	e7d4      	b.n	800da8c <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800dae2:	2700      	movs	r7, #0
 800dae4:	e7d2      	b.n	800da8c <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dae6:	4b0c      	ldr	r3, [pc, #48]	; (800db18 <xTaskIncrementTick+0x100>)
 800dae8:	f04f 32ff 	mov.w	r2, #4294967295
 800daec:	601a      	str	r2, [r3, #0]
					break;
 800daee:	e7bb      	b.n	800da68 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800daf0:	4a09      	ldr	r2, [pc, #36]	; (800db18 <xTaskIncrementTick+0x100>)
 800daf2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800daf4:	e7b8      	b.n	800da68 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800daf6:	4a0d      	ldr	r2, [pc, #52]	; (800db2c <xTaskIncrementTick+0x114>)
 800daf8:	6813      	ldr	r3, [r2, #0]
 800dafa:	3301      	adds	r3, #1
 800dafc:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800dafe:	2700      	movs	r7, #0
}
 800db00:	4638      	mov	r0, r7
 800db02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db04:	24003230 	.word	0x24003230
 800db08:	240032b4 	.word	0x240032b4
 800db0c:	24002dc0 	.word	0x24002dc0
 800db10:	24002dc4 	.word	0x24002dc4
 800db14:	2400326c 	.word	0x2400326c
 800db18:	24003268 	.word	0x24003268
 800db1c:	24002dbc 	.word	0x24002dbc
 800db20:	24002dc8 	.word	0x24002dc8
 800db24:	240032b8 	.word	0x240032b8
 800db28:	24003238 	.word	0x24003238
 800db2c:	24003270 	.word	0x24003270

0800db30 <xTaskResumeAll>:
{
 800db30:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800db32:	4b35      	ldr	r3, [pc, #212]	; (800dc08 <xTaskResumeAll+0xd8>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	b943      	cbnz	r3, 800db4a <xTaskResumeAll+0x1a>
 800db38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3c:	f383 8811 	msr	BASEPRI, r3
 800db40:	f3bf 8f6f 	isb	sy
 800db44:	f3bf 8f4f 	dsb	sy
 800db48:	e7fe      	b.n	800db48 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800db4a:	f000 fd4b 	bl	800e5e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800db4e:	4b2e      	ldr	r3, [pc, #184]	; (800dc08 <xTaskResumeAll+0xd8>)
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	3a01      	subs	r2, #1
 800db54:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d14f      	bne.n	800dbfc <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800db5c:	4b2b      	ldr	r3, [pc, #172]	; (800dc0c <xTaskResumeAll+0xdc>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	b90b      	cbnz	r3, 800db66 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800db62:	2400      	movs	r4, #0
 800db64:	e04b      	b.n	800dbfe <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800db66:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db68:	4b29      	ldr	r3, [pc, #164]	; (800dc10 <xTaskResumeAll+0xe0>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	b31b      	cbz	r3, 800dbb6 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db6e:	4b28      	ldr	r3, [pc, #160]	; (800dc10 <xTaskResumeAll+0xe0>)
 800db70:	68db      	ldr	r3, [r3, #12]
 800db72:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db74:	f104 0018 	add.w	r0, r4, #24
 800db78:	f7fe ff4c 	bl	800ca14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db7c:	1d25      	adds	r5, r4, #4
 800db7e:	4628      	mov	r0, r5
 800db80:	f7fe ff48 	bl	800ca14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800db84:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800db86:	4b23      	ldr	r3, [pc, #140]	; (800dc14 <xTaskResumeAll+0xe4>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4298      	cmp	r0, r3
 800db8c:	d901      	bls.n	800db92 <xTaskResumeAll+0x62>
 800db8e:	4b21      	ldr	r3, [pc, #132]	; (800dc14 <xTaskResumeAll+0xe4>)
 800db90:	6018      	str	r0, [r3, #0]
 800db92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800db96:	4629      	mov	r1, r5
 800db98:	4b1f      	ldr	r3, [pc, #124]	; (800dc18 <xTaskResumeAll+0xe8>)
 800db9a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800db9e:	f7fe ff15 	bl	800c9cc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dba2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800dba4:	4b1d      	ldr	r3, [pc, #116]	; (800dc1c <xTaskResumeAll+0xec>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d3dc      	bcc.n	800db68 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800dbae:	4b1c      	ldr	r3, [pc, #112]	; (800dc20 <xTaskResumeAll+0xf0>)
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	601a      	str	r2, [r3, #0]
 800dbb4:	e7d8      	b.n	800db68 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800dbb6:	b10c      	cbz	r4, 800dbbc <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800dbb8:	f7ff fcb6 	bl	800d528 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dbbc:	4b19      	ldr	r3, [pc, #100]	; (800dc24 <xTaskResumeAll+0xf4>)
 800dbbe:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800dbc0:	b984      	cbnz	r4, 800dbe4 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800dbc2:	4b17      	ldr	r3, [pc, #92]	; (800dc20 <xTaskResumeAll+0xf0>)
 800dbc4:	681c      	ldr	r4, [r3, #0]
 800dbc6:	b1d4      	cbz	r4, 800dbfe <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800dbc8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800dbcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbd0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800dbd4:	f3bf 8f4f 	dsb	sy
 800dbd8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800dbdc:	2401      	movs	r4, #1
 800dbde:	e00e      	b.n	800dbfe <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dbe0:	3c01      	subs	r4, #1
 800dbe2:	d007      	beq.n	800dbf4 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800dbe4:	f7ff ff18 	bl	800da18 <xTaskIncrementTick>
 800dbe8:	2800      	cmp	r0, #0
 800dbea:	d0f9      	beq.n	800dbe0 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800dbec:	4b0c      	ldr	r3, [pc, #48]	; (800dc20 <xTaskResumeAll+0xf0>)
 800dbee:	2201      	movs	r2, #1
 800dbf0:	601a      	str	r2, [r3, #0]
 800dbf2:	e7f5      	b.n	800dbe0 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800dbf4:	4b0b      	ldr	r3, [pc, #44]	; (800dc24 <xTaskResumeAll+0xf4>)
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	601a      	str	r2, [r3, #0]
 800dbfa:	e7e2      	b.n	800dbc2 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800dbfc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800dbfe:	f000 fd13 	bl	800e628 <vPortExitCritical>
}
 800dc02:	4620      	mov	r0, r4
 800dc04:	bd38      	pop	{r3, r4, r5, pc}
 800dc06:	bf00      	nop
 800dc08:	24003230 	.word	0x24003230
 800dc0c:	24003228 	.word	0x24003228
 800dc10:	24003274 	.word	0x24003274
 800dc14:	24003238 	.word	0x24003238
 800dc18:	24002dc8 	.word	0x24002dc8
 800dc1c:	24002dbc 	.word	0x24002dbc
 800dc20:	240032b8 	.word	0x240032b8
 800dc24:	24003270 	.word	0x24003270

0800dc28 <vTaskDelay>:
	{
 800dc28:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dc2a:	b1a8      	cbz	r0, 800dc58 <vTaskDelay+0x30>
 800dc2c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800dc2e:	4b10      	ldr	r3, [pc, #64]	; (800dc70 <vTaskDelay+0x48>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	b143      	cbz	r3, 800dc46 <vTaskDelay+0x1e>
 800dc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc38:	f383 8811 	msr	BASEPRI, r3
 800dc3c:	f3bf 8f6f 	isb	sy
 800dc40:	f3bf 8f4f 	dsb	sy
 800dc44:	e7fe      	b.n	800dc44 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800dc46:	f7ff fed9 	bl	800d9fc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	f7ff fdcd 	bl	800d7ec <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800dc52:	f7ff ff6d 	bl	800db30 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800dc56:	b948      	cbnz	r0, 800dc6c <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800dc58:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800dc5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc60:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800dc64:	f3bf 8f4f 	dsb	sy
 800dc68:	f3bf 8f6f 	isb	sy
	}
 800dc6c:	bd10      	pop	{r4, pc}
 800dc6e:	bf00      	nop
 800dc70:	24003230 	.word	0x24003230

0800dc74 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dc74:	4b21      	ldr	r3, [pc, #132]	; (800dcfc <vTaskSwitchContext+0x88>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	b11b      	cbz	r3, 800dc82 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800dc7a:	4b21      	ldr	r3, [pc, #132]	; (800dd00 <vTaskSwitchContext+0x8c>)
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	601a      	str	r2, [r3, #0]
 800dc80:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800dc82:	4b1f      	ldr	r3, [pc, #124]	; (800dd00 <vTaskSwitchContext+0x8c>)
 800dc84:	2200      	movs	r2, #0
 800dc86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc88:	4b1e      	ldr	r3, [pc, #120]	; (800dd04 <vTaskSwitchContext+0x90>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800dc90:	008a      	lsls	r2, r1, #2
 800dc92:	491d      	ldr	r1, [pc, #116]	; (800dd08 <vTaskSwitchContext+0x94>)
 800dc94:	588a      	ldr	r2, [r1, r2]
 800dc96:	b95a      	cbnz	r2, 800dcb0 <vTaskSwitchContext+0x3c>
 800dc98:	b10b      	cbz	r3, 800dc9e <vTaskSwitchContext+0x2a>
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	e7f6      	b.n	800dc8c <vTaskSwitchContext+0x18>
 800dc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca2:	f383 8811 	msr	BASEPRI, r3
 800dca6:	f3bf 8f6f 	isb	sy
 800dcaa:	f3bf 8f4f 	dsb	sy
 800dcae:	e7fe      	b.n	800dcae <vTaskSwitchContext+0x3a>
 800dcb0:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800dcb4:	0082      	lsls	r2, r0, #2
 800dcb6:	440a      	add	r2, r1
 800dcb8:	6850      	ldr	r0, [r2, #4]
 800dcba:	6840      	ldr	r0, [r0, #4]
 800dcbc:	6050      	str	r0, [r2, #4]
 800dcbe:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800dcc2:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800dcc6:	3208      	adds	r2, #8
 800dcc8:	4411      	add	r1, r2
 800dcca:	4288      	cmp	r0, r1
 800dccc:	d00f      	beq.n	800dcee <vTaskSwitchContext+0x7a>
 800dcce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800dcd2:	0091      	lsls	r1, r2, #2
 800dcd4:	4a0c      	ldr	r2, [pc, #48]	; (800dd08 <vTaskSwitchContext+0x94>)
 800dcd6:	440a      	add	r2, r1
 800dcd8:	6852      	ldr	r2, [r2, #4]
 800dcda:	68d1      	ldr	r1, [r2, #12]
 800dcdc:	4a0b      	ldr	r2, [pc, #44]	; (800dd0c <vTaskSwitchContext+0x98>)
 800dcde:	6011      	str	r1, [r2, #0]
 800dce0:	4908      	ldr	r1, [pc, #32]	; (800dd04 <vTaskSwitchContext+0x90>)
 800dce2:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dce4:	6813      	ldr	r3, [r2, #0]
 800dce6:	3354      	adds	r3, #84	; 0x54
 800dce8:	4a09      	ldr	r2, [pc, #36]	; (800dd10 <vTaskSwitchContext+0x9c>)
 800dcea:	6013      	str	r3, [r2, #0]
}
 800dcec:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcee:	6840      	ldr	r0, [r0, #4]
 800dcf0:	4662      	mov	r2, ip
 800dcf2:	0091      	lsls	r1, r2, #2
 800dcf4:	4a04      	ldr	r2, [pc, #16]	; (800dd08 <vTaskSwitchContext+0x94>)
 800dcf6:	440a      	add	r2, r1
 800dcf8:	6050      	str	r0, [r2, #4]
 800dcfa:	e7e8      	b.n	800dcce <vTaskSwitchContext+0x5a>
 800dcfc:	24003230 	.word	0x24003230
 800dd00:	240032b8 	.word	0x240032b8
 800dd04:	24003238 	.word	0x24003238
 800dd08:	24002dc8 	.word	0x24002dc8
 800dd0c:	24002dbc 	.word	0x24002dbc
 800dd10:	24000014 	.word	0x24000014

0800dd14 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800dd14:	b158      	cbz	r0, 800dd2e <vTaskPlaceOnEventList+0x1a>
{
 800dd16:	b510      	push	{r4, lr}
 800dd18:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dd1a:	4a09      	ldr	r2, [pc, #36]	; (800dd40 <vTaskPlaceOnEventList+0x2c>)
 800dd1c:	6811      	ldr	r1, [r2, #0]
 800dd1e:	3118      	adds	r1, #24
 800dd20:	f7fe fe5f 	bl	800c9e2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dd24:	2101      	movs	r1, #1
 800dd26:	4620      	mov	r0, r4
 800dd28:	f7ff fd60 	bl	800d7ec <prvAddCurrentTaskToDelayedList>
}
 800dd2c:	bd10      	pop	{r4, pc}
 800dd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd32:	f383 8811 	msr	BASEPRI, r3
 800dd36:	f3bf 8f6f 	isb	sy
 800dd3a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800dd3e:	e7fe      	b.n	800dd3e <vTaskPlaceOnEventList+0x2a>
 800dd40:	24002dbc 	.word	0x24002dbc

0800dd44 <vTaskPlaceOnEventListRestricted>:
	{
 800dd44:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800dd46:	b170      	cbz	r0, 800dd66 <vTaskPlaceOnEventListRestricted+0x22>
 800dd48:	460d      	mov	r5, r1
 800dd4a:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dd4c:	4a0a      	ldr	r2, [pc, #40]	; (800dd78 <vTaskPlaceOnEventListRestricted+0x34>)
 800dd4e:	6811      	ldr	r1, [r2, #0]
 800dd50:	3118      	adds	r1, #24
 800dd52:	f7fe fe3b 	bl	800c9cc <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800dd56:	b10c      	cbz	r4, 800dd5c <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800dd58:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dd5c:	4621      	mov	r1, r4
 800dd5e:	4628      	mov	r0, r5
 800dd60:	f7ff fd44 	bl	800d7ec <prvAddCurrentTaskToDelayedList>
	}
 800dd64:	bd38      	pop	{r3, r4, r5, pc}
 800dd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd6a:	f383 8811 	msr	BASEPRI, r3
 800dd6e:	f3bf 8f6f 	isb	sy
 800dd72:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800dd76:	e7fe      	b.n	800dd76 <vTaskPlaceOnEventListRestricted+0x32>
 800dd78:	24002dbc 	.word	0x24002dbc

0800dd7c <xTaskRemoveFromEventList>:
{
 800dd7c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd7e:	68c3      	ldr	r3, [r0, #12]
 800dd80:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800dd82:	b324      	cbz	r4, 800ddce <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dd84:	f104 0518 	add.w	r5, r4, #24
 800dd88:	4628      	mov	r0, r5
 800dd8a:	f7fe fe43 	bl	800ca14 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd8e:	4b18      	ldr	r3, [pc, #96]	; (800ddf0 <xTaskRemoveFromEventList+0x74>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	bb2b      	cbnz	r3, 800dde0 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dd94:	1d25      	adds	r5, r4, #4
 800dd96:	4628      	mov	r0, r5
 800dd98:	f7fe fe3c 	bl	800ca14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dd9c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800dd9e:	4b15      	ldr	r3, [pc, #84]	; (800ddf4 <xTaskRemoveFromEventList+0x78>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4298      	cmp	r0, r3
 800dda4:	d901      	bls.n	800ddaa <xTaskRemoveFromEventList+0x2e>
 800dda6:	4b13      	ldr	r3, [pc, #76]	; (800ddf4 <xTaskRemoveFromEventList+0x78>)
 800dda8:	6018      	str	r0, [r3, #0]
 800ddaa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ddae:	4629      	mov	r1, r5
 800ddb0:	4b11      	ldr	r3, [pc, #68]	; (800ddf8 <xTaskRemoveFromEventList+0x7c>)
 800ddb2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ddb6:	f7fe fe09 	bl	800c9cc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ddba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ddbc:	4b0f      	ldr	r3, [pc, #60]	; (800ddfc <xTaskRemoveFromEventList+0x80>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d911      	bls.n	800ddea <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800ddc6:	2001      	movs	r0, #1
 800ddc8:	4b0d      	ldr	r3, [pc, #52]	; (800de00 <xTaskRemoveFromEventList+0x84>)
 800ddca:	6018      	str	r0, [r3, #0]
}
 800ddcc:	bd38      	pop	{r3, r4, r5, pc}
 800ddce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd2:	f383 8811 	msr	BASEPRI, r3
 800ddd6:	f3bf 8f6f 	isb	sy
 800ddda:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800ddde:	e7fe      	b.n	800ddde <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dde0:	4629      	mov	r1, r5
 800dde2:	4808      	ldr	r0, [pc, #32]	; (800de04 <xTaskRemoveFromEventList+0x88>)
 800dde4:	f7fe fdf2 	bl	800c9cc <vListInsertEnd>
 800dde8:	e7e7      	b.n	800ddba <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800ddea:	2000      	movs	r0, #0
	return xReturn;
 800ddec:	e7ee      	b.n	800ddcc <xTaskRemoveFromEventList+0x50>
 800ddee:	bf00      	nop
 800ddf0:	24003230 	.word	0x24003230
 800ddf4:	24003238 	.word	0x24003238
 800ddf8:	24002dc8 	.word	0x24002dc8
 800ddfc:	24002dbc 	.word	0x24002dbc
 800de00:	240032b8 	.word	0x240032b8
 800de04:	24003274 	.word	0x24003274

0800de08 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800de08:	4b03      	ldr	r3, [pc, #12]	; (800de18 <vTaskInternalSetTimeOutState+0x10>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800de0e:	4b03      	ldr	r3, [pc, #12]	; (800de1c <vTaskInternalSetTimeOutState+0x14>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	6043      	str	r3, [r0, #4]
}
 800de14:	4770      	bx	lr
 800de16:	bf00      	nop
 800de18:	2400326c 	.word	0x2400326c
 800de1c:	240032b4 	.word	0x240032b4

0800de20 <xTaskCheckForTimeOut>:
{
 800de20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800de22:	b1c8      	cbz	r0, 800de58 <xTaskCheckForTimeOut+0x38>
 800de24:	460c      	mov	r4, r1
 800de26:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800de28:	b1f9      	cbz	r1, 800de6a <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800de2a:	f000 fbdb 	bl	800e5e4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800de2e:	4b1b      	ldr	r3, [pc, #108]	; (800de9c <xTaskCheckForTimeOut+0x7c>)
 800de30:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800de32:	686b      	ldr	r3, [r5, #4]
 800de34:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800de36:	6822      	ldr	r2, [r4, #0]
 800de38:	f1b2 3fff 	cmp.w	r2, #4294967295
 800de3c:	d026      	beq.n	800de8c <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800de3e:	4e18      	ldr	r6, [pc, #96]	; (800dea0 <xTaskCheckForTimeOut+0x80>)
 800de40:	6836      	ldr	r6, [r6, #0]
 800de42:	682f      	ldr	r7, [r5, #0]
 800de44:	42b7      	cmp	r7, r6
 800de46:	d001      	beq.n	800de4c <xTaskCheckForTimeOut+0x2c>
 800de48:	428b      	cmp	r3, r1
 800de4a:	d924      	bls.n	800de96 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800de4c:	4282      	cmp	r2, r0
 800de4e:	d815      	bhi.n	800de7c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800de50:	2300      	movs	r3, #0
 800de52:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800de54:	2401      	movs	r4, #1
 800de56:	e01a      	b.n	800de8e <xTaskCheckForTimeOut+0x6e>
 800de58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de5c:	f383 8811 	msr	BASEPRI, r3
 800de60:	f3bf 8f6f 	isb	sy
 800de64:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800de68:	e7fe      	b.n	800de68 <xTaskCheckForTimeOut+0x48>
 800de6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6e:	f383 8811 	msr	BASEPRI, r3
 800de72:	f3bf 8f6f 	isb	sy
 800de76:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800de7a:	e7fe      	b.n	800de7a <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800de7c:	1a5b      	subs	r3, r3, r1
 800de7e:	4413      	add	r3, r2
 800de80:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800de82:	4628      	mov	r0, r5
 800de84:	f7ff ffc0 	bl	800de08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800de88:	2400      	movs	r4, #0
 800de8a:	e000      	b.n	800de8e <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800de8c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800de8e:	f000 fbcb 	bl	800e628 <vPortExitCritical>
}
 800de92:	4620      	mov	r0, r4
 800de94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800de96:	2401      	movs	r4, #1
 800de98:	e7f9      	b.n	800de8e <xTaskCheckForTimeOut+0x6e>
 800de9a:	bf00      	nop
 800de9c:	240032b4 	.word	0x240032b4
 800dea0:	2400326c 	.word	0x2400326c

0800dea4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800dea4:	4b01      	ldr	r3, [pc, #4]	; (800deac <vTaskMissedYield+0x8>)
 800dea6:	2201      	movs	r2, #1
 800dea8:	601a      	str	r2, [r3, #0]
}
 800deaa:	4770      	bx	lr
 800deac:	240032b8 	.word	0x240032b8

0800deb0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800deb0:	4b05      	ldr	r3, [pc, #20]	; (800dec8 <xTaskGetSchedulerState+0x18>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	b133      	cbz	r3, 800dec4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800deb6:	4b05      	ldr	r3, [pc, #20]	; (800decc <xTaskGetSchedulerState+0x1c>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	b10b      	cbz	r3, 800dec0 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800debc:	2000      	movs	r0, #0
	}
 800debe:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800dec0:	2002      	movs	r0, #2
 800dec2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dec4:	2001      	movs	r0, #1
 800dec6:	4770      	bx	lr
 800dec8:	24003288 	.word	0x24003288
 800decc:	24003230 	.word	0x24003230

0800ded0 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800ded0:	2800      	cmp	r0, #0
 800ded2:	d03e      	beq.n	800df52 <xTaskPriorityInherit+0x82>
	{
 800ded4:	b538      	push	{r3, r4, r5, lr}
 800ded6:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ded8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800deda:	4a20      	ldr	r2, [pc, #128]	; (800df5c <xTaskPriorityInherit+0x8c>)
 800dedc:	6812      	ldr	r2, [r2, #0]
 800dede:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d22e      	bcs.n	800df42 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dee4:	6982      	ldr	r2, [r0, #24]
 800dee6:	2a00      	cmp	r2, #0
 800dee8:	db05      	blt.n	800def6 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800deea:	4a1c      	ldr	r2, [pc, #112]	; (800df5c <xTaskPriorityInherit+0x8c>)
 800deec:	6812      	ldr	r2, [r2, #0]
 800deee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800def0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800def4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800def6:	6961      	ldr	r1, [r4, #20]
 800def8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800defc:	4a18      	ldr	r2, [pc, #96]	; (800df60 <xTaskPriorityInherit+0x90>)
 800defe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df02:	4299      	cmp	r1, r3
 800df04:	d005      	beq.n	800df12 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800df06:	4b15      	ldr	r3, [pc, #84]	; (800df5c <xTaskPriorityInherit+0x8c>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df0c:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800df0e:	2001      	movs	r0, #1
	}
 800df10:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df12:	1d25      	adds	r5, r4, #4
 800df14:	4628      	mov	r0, r5
 800df16:	f7fe fd7d 	bl	800ca14 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800df1a:	4b10      	ldr	r3, [pc, #64]	; (800df5c <xTaskPriorityInherit+0x8c>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800df20:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800df22:	4b10      	ldr	r3, [pc, #64]	; (800df64 <xTaskPriorityInherit+0x94>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	4298      	cmp	r0, r3
 800df28:	d901      	bls.n	800df2e <xTaskPriorityInherit+0x5e>
 800df2a:	4b0e      	ldr	r3, [pc, #56]	; (800df64 <xTaskPriorityInherit+0x94>)
 800df2c:	6018      	str	r0, [r3, #0]
 800df2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800df32:	4629      	mov	r1, r5
 800df34:	4b0a      	ldr	r3, [pc, #40]	; (800df60 <xTaskPriorityInherit+0x90>)
 800df36:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800df3a:	f7fe fd47 	bl	800c9cc <vListInsertEnd>
				xReturn = pdTRUE;
 800df3e:	2001      	movs	r0, #1
 800df40:	e7e6      	b.n	800df10 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800df42:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800df44:	4b05      	ldr	r3, [pc, #20]	; (800df5c <xTaskPriorityInherit+0x8c>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d303      	bcc.n	800df56 <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 800df4e:	2000      	movs	r0, #0
 800df50:	e7de      	b.n	800df10 <xTaskPriorityInherit+0x40>
 800df52:	2000      	movs	r0, #0
	}
 800df54:	4770      	bx	lr
					xReturn = pdTRUE;
 800df56:	2001      	movs	r0, #1
		return xReturn;
 800df58:	e7da      	b.n	800df10 <xTaskPriorityInherit+0x40>
 800df5a:	bf00      	nop
 800df5c:	24002dbc 	.word	0x24002dbc
 800df60:	24002dc8 	.word	0x24002dc8
 800df64:	24003238 	.word	0x24003238

0800df68 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800df68:	2800      	cmp	r0, #0
 800df6a:	d03b      	beq.n	800dfe4 <xTaskPriorityDisinherit+0x7c>
	{
 800df6c:	b538      	push	{r3, r4, r5, lr}
 800df6e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800df70:	4b1e      	ldr	r3, [pc, #120]	; (800dfec <xTaskPriorityDisinherit+0x84>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4283      	cmp	r3, r0
 800df76:	d008      	beq.n	800df8a <xTaskPriorityDisinherit+0x22>
 800df78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df7c:	f383 8811 	msr	BASEPRI, r3
 800df80:	f3bf 8f6f 	isb	sy
 800df84:	f3bf 8f4f 	dsb	sy
 800df88:	e7fe      	b.n	800df88 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800df8a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800df8c:	b943      	cbnz	r3, 800dfa0 <xTaskPriorityDisinherit+0x38>
 800df8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df92:	f383 8811 	msr	BASEPRI, r3
 800df96:	f3bf 8f6f 	isb	sy
 800df9a:	f3bf 8f4f 	dsb	sy
 800df9e:	e7fe      	b.n	800df9e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800dfa0:	3b01      	subs	r3, #1
 800dfa2:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dfa4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800dfa6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800dfa8:	4291      	cmp	r1, r2
 800dfaa:	d01d      	beq.n	800dfe8 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dfac:	b10b      	cbz	r3, 800dfb2 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800dfae:	2000      	movs	r0, #0
	}
 800dfb0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfb2:	1d05      	adds	r5, r0, #4
 800dfb4:	4628      	mov	r0, r5
 800dfb6:	f7fe fd2d 	bl	800ca14 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dfba:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800dfbc:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfbe:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800dfc2:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800dfc4:	4b0a      	ldr	r3, [pc, #40]	; (800dff0 <xTaskPriorityDisinherit+0x88>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4298      	cmp	r0, r3
 800dfca:	d901      	bls.n	800dfd0 <xTaskPriorityDisinherit+0x68>
 800dfcc:	4b08      	ldr	r3, [pc, #32]	; (800dff0 <xTaskPriorityDisinherit+0x88>)
 800dfce:	6018      	str	r0, [r3, #0]
 800dfd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dfd4:	4629      	mov	r1, r5
 800dfd6:	4b07      	ldr	r3, [pc, #28]	; (800dff4 <xTaskPriorityDisinherit+0x8c>)
 800dfd8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dfdc:	f7fe fcf6 	bl	800c9cc <vListInsertEnd>
					xReturn = pdTRUE;
 800dfe0:	2001      	movs	r0, #1
 800dfe2:	e7e5      	b.n	800dfb0 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800dfe4:	2000      	movs	r0, #0
	}
 800dfe6:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800dfe8:	2000      	movs	r0, #0
 800dfea:	e7e1      	b.n	800dfb0 <xTaskPriorityDisinherit+0x48>
 800dfec:	24002dbc 	.word	0x24002dbc
 800dff0:	24003238 	.word	0x24003238
 800dff4:	24002dc8 	.word	0x24002dc8

0800dff8 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800dff8:	2800      	cmp	r0, #0
 800dffa:	d046      	beq.n	800e08a <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800dffc:	b538      	push	{r3, r4, r5, lr}
 800dffe:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800e000:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e002:	b943      	cbnz	r3, 800e016 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800e004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e008:	f383 8811 	msr	BASEPRI, r3
 800e00c:	f3bf 8f6f 	isb	sy
 800e010:	f3bf 8f4f 	dsb	sy
 800e014:	e7fe      	b.n	800e014 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e016:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800e018:	428a      	cmp	r2, r1
 800e01a:	d200      	bcs.n	800e01e <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e01c:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e01e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e020:	4291      	cmp	r1, r2
 800e022:	d001      	beq.n	800e028 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e024:	2b01      	cmp	r3, #1
 800e026:	d000      	beq.n	800e02a <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800e028:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800e02a:	4b18      	ldr	r3, [pc, #96]	; (800e08c <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	42a3      	cmp	r3, r4
 800e030:	d022      	beq.n	800e078 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800e032:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e034:	69a3      	ldr	r3, [r4, #24]
 800e036:	2b00      	cmp	r3, #0
 800e038:	db02      	blt.n	800e040 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e03a:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800e03e:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e040:	6962      	ldr	r2, [r4, #20]
 800e042:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800e046:	4b12      	ldr	r3, [pc, #72]	; (800e090 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800e048:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e04c:	428a      	cmp	r2, r1
 800e04e:	d1eb      	bne.n	800e028 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e050:	1d25      	adds	r5, r4, #4
 800e052:	4628      	mov	r0, r5
 800e054:	f7fe fcde 	bl	800ca14 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e058:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e05a:	4b0e      	ldr	r3, [pc, #56]	; (800e094 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	4298      	cmp	r0, r3
 800e060:	d901      	bls.n	800e066 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800e062:	4b0c      	ldr	r3, [pc, #48]	; (800e094 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800e064:	6018      	str	r0, [r3, #0]
 800e066:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e06a:	4629      	mov	r1, r5
 800e06c:	4b08      	ldr	r3, [pc, #32]	; (800e090 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800e06e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e072:	f7fe fcab 	bl	800c9cc <vListInsertEnd>
	}
 800e076:	e7d7      	b.n	800e028 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800e078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e07c:	f383 8811 	msr	BASEPRI, r3
 800e080:	f3bf 8f6f 	isb	sy
 800e084:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800e088:	e7fe      	b.n	800e088 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800e08a:	4770      	bx	lr
 800e08c:	24002dbc 	.word	0x24002dbc
 800e090:	24002dc8 	.word	0x24002dc8
 800e094:	24003238 	.word	0x24003238

0800e098 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800e098:	4b05      	ldr	r3, [pc, #20]	; (800e0b0 <pvTaskIncrementMutexHeldCount+0x18>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	b123      	cbz	r3, 800e0a8 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800e09e:	4b04      	ldr	r3, [pc, #16]	; (800e0b0 <pvTaskIncrementMutexHeldCount+0x18>)
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 800e0a8:	4b01      	ldr	r3, [pc, #4]	; (800e0b0 <pvTaskIncrementMutexHeldCount+0x18>)
 800e0aa:	6818      	ldr	r0, [r3, #0]
	}
 800e0ac:	4770      	bx	lr
 800e0ae:	bf00      	nop
 800e0b0:	24002dbc 	.word	0x24002dbc

0800e0b4 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e0b4:	4b06      	ldr	r3, [pc, #24]	; (800e0d0 <prvGetNextExpireTime+0x1c>)
 800e0b6:	681a      	ldr	r2, [r3, #0]
 800e0b8:	6813      	ldr	r3, [r2, #0]
 800e0ba:	b92b      	cbnz	r3, 800e0c8 <prvGetNextExpireTime+0x14>
 800e0bc:	2301      	movs	r3, #1
 800e0be:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e0c0:	b923      	cbnz	r3, 800e0cc <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e0c2:	68d3      	ldr	r3, [r2, #12]
 800e0c4:	6818      	ldr	r0, [r3, #0]
 800e0c6:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	e7f8      	b.n	800e0be <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e0cc:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800e0ce:	4770      	bx	lr
 800e0d0:	240032bc 	.word	0x240032bc

0800e0d4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e0d4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e0d6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e0d8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e0da:	4291      	cmp	r1, r2
 800e0dc:	d80c      	bhi.n	800e0f8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0de:	1ad2      	subs	r2, r2, r3
 800e0e0:	6983      	ldr	r3, [r0, #24]
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d301      	bcc.n	800e0ea <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e0e6:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800e0e8:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e0ea:	1d01      	adds	r1, r0, #4
 800e0ec:	4b0b      	ldr	r3, [pc, #44]	; (800e11c <prvInsertTimerInActiveList+0x48>)
 800e0ee:	6818      	ldr	r0, [r3, #0]
 800e0f0:	f7fe fc77 	bl	800c9e2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e0f4:	2000      	movs	r0, #0
 800e0f6:	e7f7      	b.n	800e0e8 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	bf2c      	ite	cs
 800e0fc:	2200      	movcs	r2, #0
 800e0fe:	2201      	movcc	r2, #1
 800e100:	4299      	cmp	r1, r3
 800e102:	bf38      	it	cc
 800e104:	2200      	movcc	r2, #0
 800e106:	b10a      	cbz	r2, 800e10c <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 800e108:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800e10a:	e7ed      	b.n	800e0e8 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e10c:	1d01      	adds	r1, r0, #4
 800e10e:	4b04      	ldr	r3, [pc, #16]	; (800e120 <prvInsertTimerInActiveList+0x4c>)
 800e110:	6818      	ldr	r0, [r3, #0]
 800e112:	f7fe fc66 	bl	800c9e2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e116:	2000      	movs	r0, #0
 800e118:	e7e6      	b.n	800e0e8 <prvInsertTimerInActiveList+0x14>
 800e11a:	bf00      	nop
 800e11c:	240032c0 	.word	0x240032c0
 800e120:	240032bc 	.word	0x240032bc

0800e124 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e124:	b530      	push	{r4, r5, lr}
 800e126:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e128:	f000 fa5c 	bl	800e5e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e12c:	4b11      	ldr	r3, [pc, #68]	; (800e174 <prvCheckForValidListAndQueue+0x50>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	b11b      	cbz	r3, 800e13a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e132:	f000 fa79 	bl	800e628 <vPortExitCritical>
}
 800e136:	b003      	add	sp, #12
 800e138:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800e13a:	4d0f      	ldr	r5, [pc, #60]	; (800e178 <prvCheckForValidListAndQueue+0x54>)
 800e13c:	4628      	mov	r0, r5
 800e13e:	f7fe fc37 	bl	800c9b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e142:	4c0e      	ldr	r4, [pc, #56]	; (800e17c <prvCheckForValidListAndQueue+0x58>)
 800e144:	4620      	mov	r0, r4
 800e146:	f7fe fc33 	bl	800c9b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e14a:	4b0d      	ldr	r3, [pc, #52]	; (800e180 <prvCheckForValidListAndQueue+0x5c>)
 800e14c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e14e:	4b0d      	ldr	r3, [pc, #52]	; (800e184 <prvCheckForValidListAndQueue+0x60>)
 800e150:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e152:	2300      	movs	r3, #0
 800e154:	9300      	str	r3, [sp, #0]
 800e156:	4b0c      	ldr	r3, [pc, #48]	; (800e188 <prvCheckForValidListAndQueue+0x64>)
 800e158:	4a0c      	ldr	r2, [pc, #48]	; (800e18c <prvCheckForValidListAndQueue+0x68>)
 800e15a:	2110      	movs	r1, #16
 800e15c:	200a      	movs	r0, #10
 800e15e:	f7fe fd67 	bl	800cc30 <xQueueGenericCreateStatic>
 800e162:	4b04      	ldr	r3, [pc, #16]	; (800e174 <prvCheckForValidListAndQueue+0x50>)
 800e164:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800e166:	2800      	cmp	r0, #0
 800e168:	d0e3      	beq.n	800e132 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e16a:	4909      	ldr	r1, [pc, #36]	; (800e190 <prvCheckForValidListAndQueue+0x6c>)
 800e16c:	f7ff f972 	bl	800d454 <vQueueAddToRegistry>
 800e170:	e7df      	b.n	800e132 <prvCheckForValidListAndQueue+0xe>
 800e172:	bf00      	nop
 800e174:	240033e0 	.word	0x240033e0
 800e178:	24003364 	.word	0x24003364
 800e17c:	24003378 	.word	0x24003378
 800e180:	240032bc 	.word	0x240032bc
 800e184:	240032c0 	.word	0x240032c0
 800e188:	24003390 	.word	0x24003390
 800e18c:	240032c4 	.word	0x240032c4
 800e190:	0801bfec 	.word	0x0801bfec

0800e194 <xTimerCreateTimerTask>:
{
 800e194:	b510      	push	{r4, lr}
 800e196:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800e198:	f7ff ffc4 	bl	800e124 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800e19c:	4b12      	ldr	r3, [pc, #72]	; (800e1e8 <xTimerCreateTimerTask+0x54>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	b1cb      	cbz	r3, 800e1d6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e1a2:	2400      	movs	r4, #0
 800e1a4:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e1a6:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e1a8:	aa07      	add	r2, sp, #28
 800e1aa:	a906      	add	r1, sp, #24
 800e1ac:	a805      	add	r0, sp, #20
 800e1ae:	f7fe fbf3 	bl	800c998 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e1b2:	9b05      	ldr	r3, [sp, #20]
 800e1b4:	9302      	str	r3, [sp, #8]
 800e1b6:	9b06      	ldr	r3, [sp, #24]
 800e1b8:	9301      	str	r3, [sp, #4]
 800e1ba:	2302      	movs	r3, #2
 800e1bc:	9300      	str	r3, [sp, #0]
 800e1be:	4623      	mov	r3, r4
 800e1c0:	9a07      	ldr	r2, [sp, #28]
 800e1c2:	490a      	ldr	r1, [pc, #40]	; (800e1ec <xTimerCreateTimerTask+0x58>)
 800e1c4:	480a      	ldr	r0, [pc, #40]	; (800e1f0 <xTimerCreateTimerTask+0x5c>)
 800e1c6:	f7ff fb53 	bl	800d870 <xTaskCreateStatic>
 800e1ca:	4b0a      	ldr	r3, [pc, #40]	; (800e1f4 <xTimerCreateTimerTask+0x60>)
 800e1cc:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800e1ce:	b110      	cbz	r0, 800e1d6 <xTimerCreateTimerTask+0x42>
}
 800e1d0:	2001      	movs	r0, #1
 800e1d2:	b008      	add	sp, #32
 800e1d4:	bd10      	pop	{r4, pc}
 800e1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1da:	f383 8811 	msr	BASEPRI, r3
 800e1de:	f3bf 8f6f 	isb	sy
 800e1e2:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800e1e6:	e7fe      	b.n	800e1e6 <xTimerCreateTimerTask+0x52>
 800e1e8:	240033e0 	.word	0x240033e0
 800e1ec:	0801bff4 	.word	0x0801bff4
 800e1f0:	0800e4fd 	.word	0x0800e4fd
 800e1f4:	240033e4 	.word	0x240033e4

0800e1f8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800e1f8:	b1b8      	cbz	r0, 800e22a <xTimerGenericCommand+0x32>
 800e1fa:	469c      	mov	ip, r3
 800e1fc:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800e1fe:	4818      	ldr	r0, [pc, #96]	; (800e260 <xTimerGenericCommand+0x68>)
 800e200:	6800      	ldr	r0, [r0, #0]
 800e202:	b358      	cbz	r0, 800e25c <xTimerGenericCommand+0x64>
{
 800e204:	b500      	push	{lr}
 800e206:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800e208:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e20a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e20c:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e20e:	2905      	cmp	r1, #5
 800e210:	dc1c      	bgt.n	800e24c <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e212:	f7ff fe4d 	bl	800deb0 <xTaskGetSchedulerState>
 800e216:	2802      	cmp	r0, #2
 800e218:	d010      	beq.n	800e23c <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e21a:	2300      	movs	r3, #0
 800e21c:	461a      	mov	r2, r3
 800e21e:	4669      	mov	r1, sp
 800e220:	480f      	ldr	r0, [pc, #60]	; (800e260 <xTimerGenericCommand+0x68>)
 800e222:	6800      	ldr	r0, [r0, #0]
 800e224:	f7fe fdbc 	bl	800cda0 <xQueueGenericSend>
 800e228:	e015      	b.n	800e256 <xTimerGenericCommand+0x5e>
 800e22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e22e:	f383 8811 	msr	BASEPRI, r3
 800e232:	f3bf 8f6f 	isb	sy
 800e236:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800e23a:	e7fe      	b.n	800e23a <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e23c:	2300      	movs	r3, #0
 800e23e:	9a06      	ldr	r2, [sp, #24]
 800e240:	4669      	mov	r1, sp
 800e242:	4807      	ldr	r0, [pc, #28]	; (800e260 <xTimerGenericCommand+0x68>)
 800e244:	6800      	ldr	r0, [r0, #0]
 800e246:	f7fe fdab 	bl	800cda0 <xQueueGenericSend>
 800e24a:	e004      	b.n	800e256 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e24c:	2300      	movs	r3, #0
 800e24e:	4662      	mov	r2, ip
 800e250:	4669      	mov	r1, sp
 800e252:	f7fe fe69 	bl	800cf28 <xQueueGenericSendFromISR>
}
 800e256:	b005      	add	sp, #20
 800e258:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800e25c:	2000      	movs	r0, #0
}
 800e25e:	4770      	bx	lr
 800e260:	240033e0 	.word	0x240033e0

0800e264 <prvSwitchTimerLists>:
{
 800e264:	b570      	push	{r4, r5, r6, lr}
 800e266:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e268:	4b1b      	ldr	r3, [pc, #108]	; (800e2d8 <prvSwitchTimerLists+0x74>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	b362      	cbz	r2, 800e2ca <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e270:	68db      	ldr	r3, [r3, #12]
 800e272:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e274:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e276:	1d25      	adds	r5, r4, #4
 800e278:	4628      	mov	r0, r5
 800e27a:	f7fe fbcb 	bl	800ca14 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e27e:	6a23      	ldr	r3, [r4, #32]
 800e280:	4620      	mov	r0, r4
 800e282:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e284:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e288:	f013 0f04 	tst.w	r3, #4
 800e28c:	d0ec      	beq.n	800e268 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e28e:	69a3      	ldr	r3, [r4, #24]
 800e290:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800e292:	429e      	cmp	r6, r3
 800e294:	d207      	bcs.n	800e2a6 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e296:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e298:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e29a:	4629      	mov	r1, r5
 800e29c:	4b0e      	ldr	r3, [pc, #56]	; (800e2d8 <prvSwitchTimerLists+0x74>)
 800e29e:	6818      	ldr	r0, [r3, #0]
 800e2a0:	f7fe fb9f 	bl	800c9e2 <vListInsert>
 800e2a4:	e7e0      	b.n	800e268 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e2a6:	2100      	movs	r1, #0
 800e2a8:	9100      	str	r1, [sp, #0]
 800e2aa:	460b      	mov	r3, r1
 800e2ac:	4632      	mov	r2, r6
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	f7ff ffa2 	bl	800e1f8 <xTimerGenericCommand>
				configASSERT( xResult );
 800e2b4:	2800      	cmp	r0, #0
 800e2b6:	d1d7      	bne.n	800e268 <prvSwitchTimerLists+0x4>
 800e2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2bc:	f383 8811 	msr	BASEPRI, r3
 800e2c0:	f3bf 8f6f 	isb	sy
 800e2c4:	f3bf 8f4f 	dsb	sy
 800e2c8:	e7fe      	b.n	800e2c8 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800e2ca:	4a04      	ldr	r2, [pc, #16]	; (800e2dc <prvSwitchTimerLists+0x78>)
 800e2cc:	6810      	ldr	r0, [r2, #0]
 800e2ce:	4902      	ldr	r1, [pc, #8]	; (800e2d8 <prvSwitchTimerLists+0x74>)
 800e2d0:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800e2d2:	6013      	str	r3, [r2, #0]
}
 800e2d4:	b002      	add	sp, #8
 800e2d6:	bd70      	pop	{r4, r5, r6, pc}
 800e2d8:	240032bc 	.word	0x240032bc
 800e2dc:	240032c0 	.word	0x240032c0

0800e2e0 <prvSampleTimeNow>:
{
 800e2e0:	b538      	push	{r3, r4, r5, lr}
 800e2e2:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800e2e4:	f7ff fb92 	bl	800da0c <xTaskGetTickCount>
 800e2e8:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800e2ea:	4b07      	ldr	r3, [pc, #28]	; (800e308 <prvSampleTimeNow+0x28>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	4283      	cmp	r3, r0
 800e2f0:	d805      	bhi.n	800e2fe <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800e2f6:	4b04      	ldr	r3, [pc, #16]	; (800e308 <prvSampleTimeNow+0x28>)
 800e2f8:	601c      	str	r4, [r3, #0]
}
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800e2fe:	f7ff ffb1 	bl	800e264 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e302:	2301      	movs	r3, #1
 800e304:	602b      	str	r3, [r5, #0]
 800e306:	e7f6      	b.n	800e2f6 <prvSampleTimeNow+0x16>
 800e308:	2400338c 	.word	0x2400338c

0800e30c <prvProcessExpiredTimer>:
{
 800e30c:	b570      	push	{r4, r5, r6, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	4606      	mov	r6, r0
 800e312:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e314:	4917      	ldr	r1, [pc, #92]	; (800e374 <prvProcessExpiredTimer+0x68>)
 800e316:	6809      	ldr	r1, [r1, #0]
 800e318:	68c9      	ldr	r1, [r1, #12]
 800e31a:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e31c:	1d20      	adds	r0, r4, #4
 800e31e:	f7fe fb79 	bl	800ca14 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e322:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 800e326:	f01c 0f04 	tst.w	ip, #4
 800e32a:	d108      	bne.n	800e33e <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e32c:	f02c 0c01 	bic.w	ip, ip, #1
 800e330:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e334:	6a23      	ldr	r3, [r4, #32]
 800e336:	4620      	mov	r0, r4
 800e338:	4798      	blx	r3
}
 800e33a:	b002      	add	sp, #8
 800e33c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e33e:	69a1      	ldr	r1, [r4, #24]
 800e340:	4633      	mov	r3, r6
 800e342:	462a      	mov	r2, r5
 800e344:	4431      	add	r1, r6
 800e346:	4620      	mov	r0, r4
 800e348:	f7ff fec4 	bl	800e0d4 <prvInsertTimerInActiveList>
 800e34c:	2800      	cmp	r0, #0
 800e34e:	d0f1      	beq.n	800e334 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e350:	2100      	movs	r1, #0
 800e352:	9100      	str	r1, [sp, #0]
 800e354:	460b      	mov	r3, r1
 800e356:	4632      	mov	r2, r6
 800e358:	4620      	mov	r0, r4
 800e35a:	f7ff ff4d 	bl	800e1f8 <xTimerGenericCommand>
			configASSERT( xResult );
 800e35e:	2800      	cmp	r0, #0
 800e360:	d1e8      	bne.n	800e334 <prvProcessExpiredTimer+0x28>
 800e362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e366:	f383 8811 	msr	BASEPRI, r3
 800e36a:	f3bf 8f6f 	isb	sy
 800e36e:	f3bf 8f4f 	dsb	sy
 800e372:	e7fe      	b.n	800e372 <prvProcessExpiredTimer+0x66>
 800e374:	240032bc 	.word	0x240032bc

0800e378 <prvProcessTimerOrBlockTask>:
{
 800e378:	b570      	push	{r4, r5, r6, lr}
 800e37a:	b082      	sub	sp, #8
 800e37c:	4606      	mov	r6, r0
 800e37e:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800e380:	f7ff fb3c 	bl	800d9fc <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e384:	a801      	add	r0, sp, #4
 800e386:	f7ff ffab 	bl	800e2e0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800e38a:	9b01      	ldr	r3, [sp, #4]
 800e38c:	bb3b      	cbnz	r3, 800e3de <prvProcessTimerOrBlockTask+0x66>
 800e38e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e390:	42b0      	cmp	r0, r6
 800e392:	bf28      	it	cs
 800e394:	2c00      	cmpcs	r4, #0
 800e396:	d019      	beq.n	800e3cc <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 800e398:	b124      	cbz	r4, 800e3a4 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e39a:	4a13      	ldr	r2, [pc, #76]	; (800e3e8 <prvProcessTimerOrBlockTask+0x70>)
 800e39c:	6812      	ldr	r2, [r2, #0]
 800e39e:	6812      	ldr	r2, [r2, #0]
 800e3a0:	b9da      	cbnz	r2, 800e3da <prvProcessTimerOrBlockTask+0x62>
 800e3a2:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e3a4:	4622      	mov	r2, r4
 800e3a6:	1b71      	subs	r1, r6, r5
 800e3a8:	4b10      	ldr	r3, [pc, #64]	; (800e3ec <prvProcessTimerOrBlockTask+0x74>)
 800e3aa:	6818      	ldr	r0, [r3, #0]
 800e3ac:	f7ff f892 	bl	800d4d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e3b0:	f7ff fbbe 	bl	800db30 <xTaskResumeAll>
 800e3b4:	b9a8      	cbnz	r0, 800e3e2 <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 800e3b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e3ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e3c2:	f3bf 8f4f 	dsb	sy
 800e3c6:	f3bf 8f6f 	isb	sy
 800e3ca:	e00a      	b.n	800e3e2 <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 800e3cc:	f7ff fbb0 	bl	800db30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e3d0:	4629      	mov	r1, r5
 800e3d2:	4630      	mov	r0, r6
 800e3d4:	f7ff ff9a 	bl	800e30c <prvProcessExpiredTimer>
 800e3d8:	e003      	b.n	800e3e2 <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e3da:	461c      	mov	r4, r3
 800e3dc:	e7e2      	b.n	800e3a4 <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 800e3de:	f7ff fba7 	bl	800db30 <xTaskResumeAll>
}
 800e3e2:	b002      	add	sp, #8
 800e3e4:	bd70      	pop	{r4, r5, r6, pc}
 800e3e6:	bf00      	nop
 800e3e8:	240032c0 	.word	0x240032c0
 800e3ec:	240033e0 	.word	0x240033e0

0800e3f0 <prvProcessReceivedCommands>:
{
 800e3f0:	b510      	push	{r4, lr}
 800e3f2:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e3f4:	e002      	b.n	800e3fc <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e3f6:	9b04      	ldr	r3, [sp, #16]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	da0f      	bge.n	800e41c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	a904      	add	r1, sp, #16
 800e400:	4b3d      	ldr	r3, [pc, #244]	; (800e4f8 <prvProcessReceivedCommands+0x108>)
 800e402:	6818      	ldr	r0, [r3, #0]
 800e404:	f7fe fe50 	bl	800d0a8 <xQueueReceive>
 800e408:	2800      	cmp	r0, #0
 800e40a:	d073      	beq.n	800e4f4 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e40c:	9b04      	ldr	r3, [sp, #16]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	daf1      	bge.n	800e3f6 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e412:	9907      	ldr	r1, [sp, #28]
 800e414:	9806      	ldr	r0, [sp, #24]
 800e416:	9b05      	ldr	r3, [sp, #20]
 800e418:	4798      	blx	r3
 800e41a:	e7ec      	b.n	800e3f6 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e41c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e41e:	6963      	ldr	r3, [r4, #20]
 800e420:	b113      	cbz	r3, 800e428 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e422:	1d20      	adds	r0, r4, #4
 800e424:	f7fe faf6 	bl	800ca14 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e428:	a803      	add	r0, sp, #12
 800e42a:	f7ff ff59 	bl	800e2e0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800e42e:	9b04      	ldr	r3, [sp, #16]
 800e430:	2b09      	cmp	r3, #9
 800e432:	d8e3      	bhi.n	800e3fc <prvProcessReceivedCommands+0xc>
 800e434:	e8df f003 	tbb	[pc, r3]
 800e438:	30050505 	.word	0x30050505
 800e43c:	05055037 	.word	0x05055037
 800e440:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e442:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e446:	f043 0301 	orr.w	r3, r3, #1
 800e44a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e44e:	9b05      	ldr	r3, [sp, #20]
 800e450:	69a1      	ldr	r1, [r4, #24]
 800e452:	4602      	mov	r2, r0
 800e454:	4419      	add	r1, r3
 800e456:	4620      	mov	r0, r4
 800e458:	f7ff fe3c 	bl	800e0d4 <prvInsertTimerInActiveList>
 800e45c:	2800      	cmp	r0, #0
 800e45e:	d0cd      	beq.n	800e3fc <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e460:	6a23      	ldr	r3, [r4, #32]
 800e462:	4620      	mov	r0, r4
 800e464:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e466:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e46a:	f013 0f04 	tst.w	r3, #4
 800e46e:	d0c5      	beq.n	800e3fc <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e470:	69a2      	ldr	r2, [r4, #24]
 800e472:	2100      	movs	r1, #0
 800e474:	9100      	str	r1, [sp, #0]
 800e476:	460b      	mov	r3, r1
 800e478:	9805      	ldr	r0, [sp, #20]
 800e47a:	4402      	add	r2, r0
 800e47c:	4620      	mov	r0, r4
 800e47e:	f7ff febb 	bl	800e1f8 <xTimerGenericCommand>
							configASSERT( xResult );
 800e482:	2800      	cmp	r0, #0
 800e484:	d1ba      	bne.n	800e3fc <prvProcessReceivedCommands+0xc>
 800e486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e48a:	f383 8811 	msr	BASEPRI, r3
 800e48e:	f3bf 8f6f 	isb	sy
 800e492:	f3bf 8f4f 	dsb	sy
 800e496:	e7fe      	b.n	800e496 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e498:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e49c:	f023 0301 	bic.w	r3, r3, #1
 800e4a0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 800e4a4:	e7aa      	b.n	800e3fc <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e4a6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e4aa:	f043 0301 	orr.w	r3, r3, #1
 800e4ae:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e4b2:	9905      	ldr	r1, [sp, #20]
 800e4b4:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e4b6:	b131      	cbz	r1, 800e4c6 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	4401      	add	r1, r0
 800e4be:	4620      	mov	r0, r4
 800e4c0:	f7ff fe08 	bl	800e0d4 <prvInsertTimerInActiveList>
					break;
 800e4c4:	e79a      	b.n	800e3fc <prvProcessReceivedCommands+0xc>
 800e4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ca:	f383 8811 	msr	BASEPRI, r3
 800e4ce:	f3bf 8f6f 	isb	sy
 800e4d2:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e4d6:	e7fe      	b.n	800e4d6 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e4d8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e4dc:	f013 0f02 	tst.w	r3, #2
 800e4e0:	d004      	beq.n	800e4ec <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e4e2:	f023 0301 	bic.w	r3, r3, #1
 800e4e6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800e4ea:	e787      	b.n	800e3fc <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	f000 faaf 	bl	800ea50 <vPortFree>
 800e4f2:	e783      	b.n	800e3fc <prvProcessReceivedCommands+0xc>
}
 800e4f4:	b008      	add	sp, #32
 800e4f6:	bd10      	pop	{r4, pc}
 800e4f8:	240033e0 	.word	0x240033e0

0800e4fc <prvTimerTask>:
{
 800e4fc:	b500      	push	{lr}
 800e4fe:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e500:	a801      	add	r0, sp, #4
 800e502:	f7ff fdd7 	bl	800e0b4 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e506:	9901      	ldr	r1, [sp, #4]
 800e508:	f7ff ff36 	bl	800e378 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800e50c:	f7ff ff70 	bl	800e3f0 <prvProcessReceivedCommands>
	for( ;; )
 800e510:	e7f6      	b.n	800e500 <prvTimerTask+0x4>
	...

0800e514 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e514:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800e516:	2300      	movs	r3, #0
 800e518:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e51a:	4b0d      	ldr	r3, [pc, #52]	; (800e550 <prvTaskExitError+0x3c>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e522:	d008      	beq.n	800e536 <prvTaskExitError+0x22>
 800e524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e528:	f383 8811 	msr	BASEPRI, r3
 800e52c:	f3bf 8f6f 	isb	sy
 800e530:	f3bf 8f4f 	dsb	sy
 800e534:	e7fe      	b.n	800e534 <prvTaskExitError+0x20>
 800e536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53a:	f383 8811 	msr	BASEPRI, r3
 800e53e:	f3bf 8f6f 	isb	sy
 800e542:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e546:	9b01      	ldr	r3, [sp, #4]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d0fc      	beq.n	800e546 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e54c:	b002      	add	sp, #8
 800e54e:	4770      	bx	lr
 800e550:	24000010 	.word	0x24000010

0800e554 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e554:	4808      	ldr	r0, [pc, #32]	; (800e578 <prvPortStartFirstTask+0x24>)
 800e556:	6800      	ldr	r0, [r0, #0]
 800e558:	6800      	ldr	r0, [r0, #0]
 800e55a:	f380 8808 	msr	MSP, r0
 800e55e:	f04f 0000 	mov.w	r0, #0
 800e562:	f380 8814 	msr	CONTROL, r0
 800e566:	b662      	cpsie	i
 800e568:	b661      	cpsie	f
 800e56a:	f3bf 8f4f 	dsb	sy
 800e56e:	f3bf 8f6f 	isb	sy
 800e572:	df00      	svc	0
 800e574:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e576:	0000      	.short	0x0000
 800e578:	e000ed08 	.word	0xe000ed08

0800e57c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e57c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e58c <vPortEnableVFP+0x10>
 800e580:	6801      	ldr	r1, [r0, #0]
 800e582:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e586:	6001      	str	r1, [r0, #0]
 800e588:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e58a:	0000      	.short	0x0000
 800e58c:	e000ed88 	.word	0xe000ed88

0800e590 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e594:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e598:	f021 0101 	bic.w	r1, r1, #1
 800e59c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e5a0:	4b05      	ldr	r3, [pc, #20]	; (800e5b8 <pxPortInitialiseStack+0x28>)
 800e5a2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e5a6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e5aa:	f06f 0302 	mvn.w	r3, #2
 800e5ae:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800e5b2:	3844      	subs	r0, #68	; 0x44
 800e5b4:	4770      	bx	lr
 800e5b6:	bf00      	nop
 800e5b8:	0800e515 	.word	0x0800e515
 800e5bc:	00000000 	.word	0x00000000

0800e5c0 <SVC_Handler>:
	__asm volatile (
 800e5c0:	4b07      	ldr	r3, [pc, #28]	; (800e5e0 <pxCurrentTCBConst2>)
 800e5c2:	6819      	ldr	r1, [r3, #0]
 800e5c4:	6808      	ldr	r0, [r1, #0]
 800e5c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ca:	f380 8809 	msr	PSP, r0
 800e5ce:	f3bf 8f6f 	isb	sy
 800e5d2:	f04f 0000 	mov.w	r0, #0
 800e5d6:	f380 8811 	msr	BASEPRI, r0
 800e5da:	4770      	bx	lr
 800e5dc:	f3af 8000 	nop.w

0800e5e0 <pxCurrentTCBConst2>:
 800e5e0:	24002dbc 	.word	0x24002dbc

0800e5e4 <vPortEnterCritical>:
 800e5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e8:	f383 8811 	msr	BASEPRI, r3
 800e5ec:	f3bf 8f6f 	isb	sy
 800e5f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800e5f4:	4a0b      	ldr	r2, [pc, #44]	; (800e624 <vPortEnterCritical+0x40>)
 800e5f6:	6813      	ldr	r3, [r2, #0]
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800e5fc:	2b01      	cmp	r3, #1
 800e5fe:	d000      	beq.n	800e602 <vPortEnterCritical+0x1e>
}
 800e600:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e602:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e606:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800e60a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e60e:	d0f7      	beq.n	800e600 <vPortEnterCritical+0x1c>
 800e610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e614:	f383 8811 	msr	BASEPRI, r3
 800e618:	f3bf 8f6f 	isb	sy
 800e61c:	f3bf 8f4f 	dsb	sy
 800e620:	e7fe      	b.n	800e620 <vPortEnterCritical+0x3c>
 800e622:	bf00      	nop
 800e624:	24000010 	.word	0x24000010

0800e628 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800e628:	4b09      	ldr	r3, [pc, #36]	; (800e650 <vPortExitCritical+0x28>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	b943      	cbnz	r3, 800e640 <vPortExitCritical+0x18>
 800e62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e632:	f383 8811 	msr	BASEPRI, r3
 800e636:	f3bf 8f6f 	isb	sy
 800e63a:	f3bf 8f4f 	dsb	sy
 800e63e:	e7fe      	b.n	800e63e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800e640:	3b01      	subs	r3, #1
 800e642:	4a03      	ldr	r2, [pc, #12]	; (800e650 <vPortExitCritical+0x28>)
 800e644:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e646:	b90b      	cbnz	r3, 800e64c <vPortExitCritical+0x24>
	__asm volatile
 800e648:	f383 8811 	msr	BASEPRI, r3
}
 800e64c:	4770      	bx	lr
 800e64e:	bf00      	nop
 800e650:	24000010 	.word	0x24000010
	...

0800e660 <PendSV_Handler>:
	__asm volatile
 800e660:	f3ef 8009 	mrs	r0, PSP
 800e664:	f3bf 8f6f 	isb	sy
 800e668:	4b15      	ldr	r3, [pc, #84]	; (800e6c0 <pxCurrentTCBConst>)
 800e66a:	681a      	ldr	r2, [r3, #0]
 800e66c:	f01e 0f10 	tst.w	lr, #16
 800e670:	bf08      	it	eq
 800e672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e67a:	6010      	str	r0, [r2, #0]
 800e67c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e680:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e684:	f380 8811 	msr	BASEPRI, r0
 800e688:	f3bf 8f4f 	dsb	sy
 800e68c:	f3bf 8f6f 	isb	sy
 800e690:	f7ff faf0 	bl	800dc74 <vTaskSwitchContext>
 800e694:	f04f 0000 	mov.w	r0, #0
 800e698:	f380 8811 	msr	BASEPRI, r0
 800e69c:	bc09      	pop	{r0, r3}
 800e69e:	6819      	ldr	r1, [r3, #0]
 800e6a0:	6808      	ldr	r0, [r1, #0]
 800e6a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a6:	f01e 0f10 	tst.w	lr, #16
 800e6aa:	bf08      	it	eq
 800e6ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e6b0:	f380 8809 	msr	PSP, r0
 800e6b4:	f3bf 8f6f 	isb	sy
 800e6b8:	4770      	bx	lr
 800e6ba:	bf00      	nop
 800e6bc:	f3af 8000 	nop.w

0800e6c0 <pxCurrentTCBConst>:
 800e6c0:	24002dbc 	.word	0x24002dbc

0800e6c4 <xPortSysTickHandler>:
{
 800e6c4:	b508      	push	{r3, lr}
	__asm volatile
 800e6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ca:	f383 8811 	msr	BASEPRI, r3
 800e6ce:	f3bf 8f6f 	isb	sy
 800e6d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800e6d6:	f7ff f99f 	bl	800da18 <xTaskIncrementTick>
 800e6da:	b128      	cbz	r0, 800e6e8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e6dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e6e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	f383 8811 	msr	BASEPRI, r3
}
 800e6ee:	bd08      	pop	{r3, pc}

0800e6f0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e6f0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e6f8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e6fa:	4b05      	ldr	r3, [pc, #20]	; (800e710 <vPortSetupTimerInterrupt+0x20>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	4905      	ldr	r1, [pc, #20]	; (800e714 <vPortSetupTimerInterrupt+0x24>)
 800e700:	fba1 1303 	umull	r1, r3, r1, r3
 800e704:	099b      	lsrs	r3, r3, #6
 800e706:	3b01      	subs	r3, #1
 800e708:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e70a:	2307      	movs	r3, #7
 800e70c:	6113      	str	r3, [r2, #16]
}
 800e70e:	4770      	bx	lr
 800e710:	24000000 	.word	0x24000000
 800e714:	10624dd3 	.word	0x10624dd3

0800e718 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e718:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e71c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800e720:	4b3d      	ldr	r3, [pc, #244]	; (800e818 <xPortStartScheduler+0x100>)
 800e722:	429a      	cmp	r2, r3
 800e724:	d01c      	beq.n	800e760 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e726:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e72a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800e72e:	4b3b      	ldr	r3, [pc, #236]	; (800e81c <xPortStartScheduler+0x104>)
 800e730:	429a      	cmp	r2, r3
 800e732:	d01e      	beq.n	800e772 <xPortStartScheduler+0x5a>
{
 800e734:	b530      	push	{r4, r5, lr}
 800e736:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e738:	4b39      	ldr	r3, [pc, #228]	; (800e820 <xPortStartScheduler+0x108>)
 800e73a:	781a      	ldrb	r2, [r3, #0]
 800e73c:	b2d2      	uxtb	r2, r2
 800e73e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e740:	22ff      	movs	r2, #255	; 0xff
 800e742:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	b2db      	uxtb	r3, r3
 800e748:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e74c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e750:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e754:	4a33      	ldr	r2, [pc, #204]	; (800e824 <xPortStartScheduler+0x10c>)
 800e756:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e758:	4b33      	ldr	r3, [pc, #204]	; (800e828 <xPortStartScheduler+0x110>)
 800e75a:	2207      	movs	r2, #7
 800e75c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e75e:	e01b      	b.n	800e798 <xPortStartScheduler+0x80>
	__asm volatile
 800e760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e764:	f383 8811 	msr	BASEPRI, r3
 800e768:	f3bf 8f6f 	isb	sy
 800e76c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e770:	e7fe      	b.n	800e770 <xPortStartScheduler+0x58>
 800e772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e776:	f383 8811 	msr	BASEPRI, r3
 800e77a:	f3bf 8f6f 	isb	sy
 800e77e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e782:	e7fe      	b.n	800e782 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800e784:	4a28      	ldr	r2, [pc, #160]	; (800e828 <xPortStartScheduler+0x110>)
 800e786:	6813      	ldr	r3, [r2, #0]
 800e788:	3b01      	subs	r3, #1
 800e78a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e78c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e790:	005b      	lsls	r3, r3, #1
 800e792:	b2db      	uxtb	r3, r3
 800e794:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e798:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e79c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e7a0:	d1f0      	bne.n	800e784 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e7a2:	4b21      	ldr	r3, [pc, #132]	; (800e828 <xPortStartScheduler+0x110>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	2b03      	cmp	r3, #3
 800e7a8:	d008      	beq.n	800e7bc <xPortStartScheduler+0xa4>
 800e7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ae:	f383 8811 	msr	BASEPRI, r3
 800e7b2:	f3bf 8f6f 	isb	sy
 800e7b6:	f3bf 8f4f 	dsb	sy
 800e7ba:	e7fe      	b.n	800e7ba <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e7bc:	021b      	lsls	r3, r3, #8
 800e7be:	4a1a      	ldr	r2, [pc, #104]	; (800e828 <xPortStartScheduler+0x110>)
 800e7c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e7c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e7c6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e7c8:	9b01      	ldr	r3, [sp, #4]
 800e7ca:	b2db      	uxtb	r3, r3
 800e7cc:	4a14      	ldr	r2, [pc, #80]	; (800e820 <xPortStartScheduler+0x108>)
 800e7ce:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e7d0:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 800e7d4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800e7d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e7dc:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e7e0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800e7e4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e7e8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800e7ec:	f7ff ff80 	bl	800e6f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800e7f0:	2500      	movs	r5, #0
 800e7f2:	4b0e      	ldr	r3, [pc, #56]	; (800e82c <xPortStartScheduler+0x114>)
 800e7f4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800e7f6:	f7ff fec1 	bl	800e57c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e7fa:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800e7fe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e802:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800e806:	f7ff fea5 	bl	800e554 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800e80a:	f7ff fa33 	bl	800dc74 <vTaskSwitchContext>
	prvTaskExitError();
 800e80e:	f7ff fe81 	bl	800e514 <prvTaskExitError>
}
 800e812:	4628      	mov	r0, r5
 800e814:	b003      	add	sp, #12
 800e816:	bd30      	pop	{r4, r5, pc}
 800e818:	410fc271 	.word	0x410fc271
 800e81c:	410fc270 	.word	0x410fc270
 800e820:	e000e400 	.word	0xe000e400
 800e824:	240033e8 	.word	0x240033e8
 800e828:	240033ec 	.word	0x240033ec
 800e82c:	24000010 	.word	0x24000010

0800e830 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e830:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e834:	2b0f      	cmp	r3, #15
 800e836:	d90f      	bls.n	800e858 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e838:	4a11      	ldr	r2, [pc, #68]	; (800e880 <vPortValidateInterruptPriority+0x50>)
 800e83a:	5c9b      	ldrb	r3, [r3, r2]
 800e83c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e83e:	4a11      	ldr	r2, [pc, #68]	; (800e884 <vPortValidateInterruptPriority+0x54>)
 800e840:	7812      	ldrb	r2, [r2, #0]
 800e842:	429a      	cmp	r2, r3
 800e844:	d908      	bls.n	800e858 <vPortValidateInterruptPriority+0x28>
 800e846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e84a:	f383 8811 	msr	BASEPRI, r3
 800e84e:	f3bf 8f6f 	isb	sy
 800e852:	f3bf 8f4f 	dsb	sy
 800e856:	e7fe      	b.n	800e856 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e858:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e85c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800e860:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e864:	4a08      	ldr	r2, [pc, #32]	; (800e888 <vPortValidateInterruptPriority+0x58>)
 800e866:	6812      	ldr	r2, [r2, #0]
 800e868:	4293      	cmp	r3, r2
 800e86a:	d908      	bls.n	800e87e <vPortValidateInterruptPriority+0x4e>
 800e86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e870:	f383 8811 	msr	BASEPRI, r3
 800e874:	f3bf 8f6f 	isb	sy
 800e878:	f3bf 8f4f 	dsb	sy
 800e87c:	e7fe      	b.n	800e87c <vPortValidateInterruptPriority+0x4c>
	}
 800e87e:	4770      	bx	lr
 800e880:	e000e3f0 	.word	0xe000e3f0
 800e884:	240033e8 	.word	0x240033e8
 800e888:	240033ec 	.word	0x240033ec

0800e88c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e88c:	4a12      	ldr	r2, [pc, #72]	; (800e8d8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e88e:	f012 0f07 	tst.w	r2, #7
 800e892:	d01e      	beq.n	800e8d2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e894:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e896:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e89a:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 800e89e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e8a0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e8a2:	480e      	ldr	r0, [pc, #56]	; (800e8dc <prvHeapInit+0x50>)
 800e8a4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e8a6:	2100      	movs	r1, #0
 800e8a8:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e8aa:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800e8ac:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e8ae:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800e8b2:	480b      	ldr	r0, [pc, #44]	; (800e8e0 <prvHeapInit+0x54>)
 800e8b4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800e8b6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e8b8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e8ba:	1a99      	subs	r1, r3, r2
 800e8bc:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e8be:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e8c0:	4b08      	ldr	r3, [pc, #32]	; (800e8e4 <prvHeapInit+0x58>)
 800e8c2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e8c4:	4b08      	ldr	r3, [pc, #32]	; (800e8e8 <prvHeapInit+0x5c>)
 800e8c6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e8c8:	4b08      	ldr	r3, [pc, #32]	; (800e8ec <prvHeapInit+0x60>)
 800e8ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e8ce:	601a      	str	r2, [r3, #0]
}
 800e8d0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e8d2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e8d6:	e7e4      	b.n	800e8a2 <prvHeapInit+0x16>
 800e8d8:	240033f4 	.word	0x240033f4
 800e8dc:	24007008 	.word	0x24007008
 800e8e0:	240033f0 	.word	0x240033f0
 800e8e4:	24006ffc 	.word	0x24006ffc
 800e8e8:	24006ff8 	.word	0x24006ff8
 800e8ec:	24006ff4 	.word	0x24006ff4

0800e8f0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e8f0:	4b16      	ldr	r3, [pc, #88]	; (800e94c <prvInsertBlockIntoFreeList+0x5c>)
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	4283      	cmp	r3, r0
 800e8f8:	d3fb      	bcc.n	800e8f2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e8fa:	6851      	ldr	r1, [r2, #4]
 800e8fc:	eb02 0c01 	add.w	ip, r2, r1
 800e900:	4584      	cmp	ip, r0
 800e902:	d009      	beq.n	800e918 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e904:	6841      	ldr	r1, [r0, #4]
 800e906:	eb00 0c01 	add.w	ip, r0, r1
 800e90a:	4563      	cmp	r3, ip
 800e90c:	d009      	beq.n	800e922 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e90e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e910:	4290      	cmp	r0, r2
 800e912:	d019      	beq.n	800e948 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e914:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800e916:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e918:	6840      	ldr	r0, [r0, #4]
 800e91a:	4401      	add	r1, r0
 800e91c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800e91e:	4610      	mov	r0, r2
 800e920:	e7f0      	b.n	800e904 <prvInsertBlockIntoFreeList+0x14>
{
 800e922:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e924:	4c0a      	ldr	r4, [pc, #40]	; (800e950 <prvInsertBlockIntoFreeList+0x60>)
 800e926:	6824      	ldr	r4, [r4, #0]
 800e928:	42a3      	cmp	r3, r4
 800e92a:	d00b      	beq.n	800e944 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	4419      	add	r1, r3
 800e930:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e932:	6813      	ldr	r3, [r2, #0]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800e938:	4290      	cmp	r0, r2
 800e93a:	d000      	beq.n	800e93e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e93c:	6010      	str	r0, [r2, #0]
	}
}
 800e93e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e942:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e944:	6004      	str	r4, [r0, #0]
 800e946:	e7f7      	b.n	800e938 <prvInsertBlockIntoFreeList+0x48>
 800e948:	4770      	bx	lr
 800e94a:	bf00      	nop
 800e94c:	24007008 	.word	0x24007008
 800e950:	240033f0 	.word	0x240033f0

0800e954 <pvPortMalloc>:
{
 800e954:	b570      	push	{r4, r5, r6, lr}
 800e956:	4605      	mov	r5, r0
	vTaskSuspendAll();
 800e958:	f7ff f850 	bl	800d9fc <vTaskSuspendAll>
		if( pxEnd == NULL )
 800e95c:	4b36      	ldr	r3, [pc, #216]	; (800ea38 <pvPortMalloc+0xe4>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	b1a3      	cbz	r3, 800e98c <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e962:	4b36      	ldr	r3, [pc, #216]	; (800ea3c <pvPortMalloc+0xe8>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	421d      	tst	r5, r3
 800e968:	d14e      	bne.n	800ea08 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800e96a:	b135      	cbz	r5, 800e97a <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800e96c:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e96e:	f015 0f07 	tst.w	r5, #7
 800e972:	d002      	beq.n	800e97a <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e974:	f025 0507 	bic.w	r5, r5, #7
 800e978:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e97a:	2d00      	cmp	r5, #0
 800e97c:	d046      	beq.n	800ea0c <pvPortMalloc+0xb8>
 800e97e:	4b30      	ldr	r3, [pc, #192]	; (800ea40 <pvPortMalloc+0xec>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	42ab      	cmp	r3, r5
 800e984:	d351      	bcc.n	800ea2a <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 800e986:	4a2f      	ldr	r2, [pc, #188]	; (800ea44 <pvPortMalloc+0xf0>)
 800e988:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e98a:	e004      	b.n	800e996 <pvPortMalloc+0x42>
			prvHeapInit();
 800e98c:	f7ff ff7e 	bl	800e88c <prvHeapInit>
 800e990:	e7e7      	b.n	800e962 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800e992:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800e994:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e996:	6863      	ldr	r3, [r4, #4]
 800e998:	42ab      	cmp	r3, r5
 800e99a:	d202      	bcs.n	800e9a2 <pvPortMalloc+0x4e>
 800e99c:	6823      	ldr	r3, [r4, #0]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d1f7      	bne.n	800e992 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800e9a2:	4b25      	ldr	r3, [pc, #148]	; (800ea38 <pvPortMalloc+0xe4>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	42a3      	cmp	r3, r4
 800e9a8:	d041      	beq.n	800ea2e <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e9aa:	6816      	ldr	r6, [r2, #0]
 800e9ac:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e9ae:	6823      	ldr	r3, [r4, #0]
 800e9b0:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e9b2:	6863      	ldr	r3, [r4, #4]
 800e9b4:	1b5b      	subs	r3, r3, r5
 800e9b6:	2b10      	cmp	r3, #16
 800e9b8:	d910      	bls.n	800e9dc <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e9ba:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9bc:	f010 0f07 	tst.w	r0, #7
 800e9c0:	d008      	beq.n	800e9d4 <pvPortMalloc+0x80>
 800e9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c6:	f383 8811 	msr	BASEPRI, r3
 800e9ca:	f3bf 8f6f 	isb	sy
 800e9ce:	f3bf 8f4f 	dsb	sy
 800e9d2:	e7fe      	b.n	800e9d2 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e9d4:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e9d6:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e9d8:	f7ff ff8a 	bl	800e8f0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e9dc:	6862      	ldr	r2, [r4, #4]
 800e9de:	4918      	ldr	r1, [pc, #96]	; (800ea40 <pvPortMalloc+0xec>)
 800e9e0:	680b      	ldr	r3, [r1, #0]
 800e9e2:	1a9b      	subs	r3, r3, r2
 800e9e4:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e9e6:	4918      	ldr	r1, [pc, #96]	; (800ea48 <pvPortMalloc+0xf4>)
 800e9e8:	6809      	ldr	r1, [r1, #0]
 800e9ea:	428b      	cmp	r3, r1
 800e9ec:	d201      	bcs.n	800e9f2 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e9ee:	4916      	ldr	r1, [pc, #88]	; (800ea48 <pvPortMalloc+0xf4>)
 800e9f0:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e9f2:	4b12      	ldr	r3, [pc, #72]	; (800ea3c <pvPortMalloc+0xe8>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	4313      	orrs	r3, r2
 800e9f8:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800e9fe:	4a13      	ldr	r2, [pc, #76]	; (800ea4c <pvPortMalloc+0xf8>)
 800ea00:	6813      	ldr	r3, [r2, #0]
 800ea02:	3301      	adds	r3, #1
 800ea04:	6013      	str	r3, [r2, #0]
 800ea06:	e002      	b.n	800ea0e <pvPortMalloc+0xba>
void *pvReturn = NULL;
 800ea08:	2600      	movs	r6, #0
 800ea0a:	e000      	b.n	800ea0e <pvPortMalloc+0xba>
 800ea0c:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800ea0e:	f7ff f88f 	bl	800db30 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea12:	f016 0f07 	tst.w	r6, #7
 800ea16:	d00c      	beq.n	800ea32 <pvPortMalloc+0xde>
 800ea18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea1c:	f383 8811 	msr	BASEPRI, r3
 800ea20:	f3bf 8f6f 	isb	sy
 800ea24:	f3bf 8f4f 	dsb	sy
 800ea28:	e7fe      	b.n	800ea28 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 800ea2a:	2600      	movs	r6, #0
 800ea2c:	e7ef      	b.n	800ea0e <pvPortMalloc+0xba>
 800ea2e:	2600      	movs	r6, #0
 800ea30:	e7ed      	b.n	800ea0e <pvPortMalloc+0xba>
}
 800ea32:	4630      	mov	r0, r6
 800ea34:	bd70      	pop	{r4, r5, r6, pc}
 800ea36:	bf00      	nop
 800ea38:	240033f0 	.word	0x240033f0
 800ea3c:	24006ff4 	.word	0x24006ff4
 800ea40:	24006ff8 	.word	0x24006ff8
 800ea44:	24007008 	.word	0x24007008
 800ea48:	24006ffc 	.word	0x24006ffc
 800ea4c:	24007000 	.word	0x24007000

0800ea50 <vPortFree>:
	if( pv != NULL )
 800ea50:	2800      	cmp	r0, #0
 800ea52:	d034      	beq.n	800eabe <vPortFree+0x6e>
{
 800ea54:	b538      	push	{r3, r4, r5, lr}
 800ea56:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800ea58:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ea5c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ea60:	4a17      	ldr	r2, [pc, #92]	; (800eac0 <vPortFree+0x70>)
 800ea62:	6812      	ldr	r2, [r2, #0]
 800ea64:	4213      	tst	r3, r2
 800ea66:	d108      	bne.n	800ea7a <vPortFree+0x2a>
 800ea68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea6c:	f383 8811 	msr	BASEPRI, r3
 800ea70:	f3bf 8f6f 	isb	sy
 800ea74:	f3bf 8f4f 	dsb	sy
 800ea78:	e7fe      	b.n	800ea78 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ea7a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800ea7e:	b141      	cbz	r1, 800ea92 <vPortFree+0x42>
 800ea80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea84:	f383 8811 	msr	BASEPRI, r3
 800ea88:	f3bf 8f6f 	isb	sy
 800ea8c:	f3bf 8f4f 	dsb	sy
 800ea90:	e7fe      	b.n	800ea90 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea92:	ea23 0302 	bic.w	r3, r3, r2
 800ea96:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800ea9a:	f7fe ffaf 	bl	800d9fc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ea9e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800eaa2:	4a08      	ldr	r2, [pc, #32]	; (800eac4 <vPortFree+0x74>)
 800eaa4:	6813      	ldr	r3, [r2, #0]
 800eaa6:	440b      	add	r3, r1
 800eaa8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eaaa:	4628      	mov	r0, r5
 800eaac:	f7ff ff20 	bl	800e8f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eab0:	4a05      	ldr	r2, [pc, #20]	; (800eac8 <vPortFree+0x78>)
 800eab2:	6813      	ldr	r3, [r2, #0]
 800eab4:	3301      	adds	r3, #1
 800eab6:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800eab8:	f7ff f83a 	bl	800db30 <xTaskResumeAll>
}
 800eabc:	bd38      	pop	{r3, r4, r5, pc}
 800eabe:	4770      	bx	lr
 800eac0:	24006ff4 	.word	0x24006ff4
 800eac4:	24006ff8 	.word	0x24006ff8
 800eac8:	24007004 	.word	0x24007004

0800eacc <_ZN13CommunicationC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 800eacc:	2200      	movs	r2, #0
 800eace:	6142      	str	r2, [r0, #20]
 800ead0:	6182      	str	r2, [r0, #24]
 800ead2:	61c2      	str	r2, [r0, #28]
 800ead4:	6382      	str	r2, [r0, #56]	; 0x38
 800ead6:	63c2      	str	r2, [r0, #60]	; 0x3c
 800ead8:	6402      	str	r2, [r0, #64]	; 0x40
 800eada:	6442      	str	r2, [r0, #68]	; 0x44
 800eadc:	6482      	str	r2, [r0, #72]	; 0x48
 800eade:	64c2      	str	r2, [r0, #76]	; 0x4c
 800eae0:	6502      	str	r2, [r0, #80]	; 0x50
 800eae2:	6542      	str	r2, [r0, #84]	; 0x54
 800eae4:	6582      	str	r2, [r0, #88]	; 0x58

#include <Communication/Communication.hpp>
#include <Services/Services.hpp>

Communication::Communication() {
	address = UNKNOWN;
 800eae6:	22fd      	movs	r2, #253	; 0xfd
 800eae8:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 800eaec:	4770      	bx	lr

0800eaee <_ZN13Communication4InitEP9RegistersP8ServicesP17MasterSubscribersP4LEDS>:

void Communication::Init(Registers* registers_, Services* services_, MasterSubscribers* subscribers_, LEDS* leds_) {
 800eaee:	b510      	push	{r4, lr}
 800eaf0:	4604      	mov	r4, r0
	registers = registers_;
 800eaf2:	6241      	str	r1, [r0, #36]	; 0x24
	services = services_;
 800eaf4:	6282      	str	r2, [r0, #40]	; 0x28
	subscribers = subscribers_;
 800eaf6:	62c3      	str	r3, [r0, #44]	; 0x2c
	leds = leds_;
 800eaf8:	9b02      	ldr	r3, [sp, #8]
 800eafa:	6303      	str	r3, [r0, #48]	; 0x30

	CommunicationSemaphore = osSemaphoreNew(1,1,NULL);
 800eafc:	2200      	movs	r2, #0
 800eafe:	2101      	movs	r1, #1
 800eb00:	4608      	mov	r0, r1
 800eb02:	f7fd fe7d 	bl	800c800 <osSemaphoreNew>
 800eb06:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(CommunicationSemaphore);
 800eb08:	f7fd ff0a 	bl	800c920 <osSemaphoreRelease>
}
 800eb0c:	bd10      	pop	{r4, pc}

0800eb0e <_ZN13Communication12FindProtocolEhPb>:
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
	protocols.push_back(protocol);
	osSemaphoreRelease(CommunicationSemaphore);
}

CommunicationProtocol* Communication::FindProtocol(uint8_t ID, bool* success) {
 800eb0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb10:	460d      	mov	r5, r1
 800eb12:	4617      	mov	r7, r2
	for (CommunicationProtocol* &protocol : protocols) {
 800eb14:	6c43      	ldr	r3, [r0, #68]	; 0x44
      : _M_current(__i) { }
 800eb16:	6c86      	ldr	r6, [r0, #72]	; 0x48
 800eb18:	e000      	b.n	800eb1c <_ZN13Communication12FindProtocolEhPb+0xe>
	++_M_current;
 800eb1a:	1d23      	adds	r3, r4, #4
    { return __lhs.base() != __rhs.base(); }
 800eb1c:	461c      	mov	r4, r3
 800eb1e:	429e      	cmp	r6, r3
 800eb20:	d009      	beq.n	800eb36 <_ZN13Communication12FindProtocolEhPb+0x28>
		if (protocol->InterfaceExists(ID)) {
 800eb22:	4629      	mov	r1, r5
 800eb24:	6818      	ldr	r0, [r3, #0]
 800eb26:	f009 f99a 	bl	8017e5e <_ZN21CommunicationProtocol15InterfaceExistsEh>
 800eb2a:	2800      	cmp	r0, #0
 800eb2c:	d0f5      	beq.n	800eb1a <_ZN13Communication12FindProtocolEhPb+0xc>
			CommunicationProtocol* protocol_pointer = protocol;
 800eb2e:	6820      	ldr	r0, [r4, #0]
			*success = true;
 800eb30:	2301      	movs	r3, #1
 800eb32:	703b      	strb	r3, [r7, #0]
			return protocol_pointer;
 800eb34:	e001      	b.n	800eb3a <_ZN13Communication12FindProtocolEhPb+0x2c>
		}
	}
	*success = false;
 800eb36:	2000      	movs	r0, #0
 800eb38:	7038      	strb	r0, [r7, #0]
	return NULL;
}
 800eb3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eb3c <_ZN13Communication16InGroupAddressesEh>:
bool Communication::AcceptMessage(MessageHeader message) {
	return (message.target_address == ALL || message.target_address == address || InGroupAddresses(message.target_address));
}

bool Communication::InGroupAddresses(uint8_t address) {
	for (uint8_t group_address : group_addresses) {
 800eb3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
      : _M_current(__i) { }
 800eb3e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800eb40:	e000      	b.n	800eb44 <_ZN13Communication16InGroupAddressesEh+0x8>
	++_M_current;
 800eb42:	1c53      	adds	r3, r2, #1
    { return __lhs.base() != __rhs.base(); }
 800eb44:	461a      	mov	r2, r3
 800eb46:	4298      	cmp	r0, r3
 800eb48:	d004      	beq.n	800eb54 <_ZN13Communication16InGroupAddressesEh+0x18>
 800eb4a:	781b      	ldrb	r3, [r3, #0]
		if (group_address == address) return true;
 800eb4c:	428b      	cmp	r3, r1
 800eb4e:	d1f8      	bne.n	800eb42 <_ZN13Communication16InGroupAddressesEh+0x6>
 800eb50:	2001      	movs	r0, #1
 800eb52:	4770      	bx	lr
	}
	return false;
 800eb54:	2000      	movs	r0, #0
}
 800eb56:	4770      	bx	lr

0800eb58 <_ZN13Communication13AcceptMessageE13MessageHeader>:
	return (message.target_address == ALL || message.target_address == address || InGroupAddresses(message.target_address));
 800eb58:	7c09      	ldrb	r1, [r1, #16]
 800eb5a:	29ff      	cmp	r1, #255	; 0xff
 800eb5c:	d009      	beq.n	800eb72 <_ZN13Communication13AcceptMessageE13MessageHeader+0x1a>
bool Communication::AcceptMessage(MessageHeader message) {
 800eb5e:	b508      	push	{r3, lr}
	return (message.target_address == ALL || message.target_address == address || InGroupAddresses(message.target_address));
 800eb60:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800eb64:	4299      	cmp	r1, r3
 800eb66:	d101      	bne.n	800eb6c <_ZN13Communication13AcceptMessageE13MessageHeader+0x14>
 800eb68:	2001      	movs	r0, #1
}
 800eb6a:	bd08      	pop	{r3, pc}
	return (message.target_address == ALL || message.target_address == address || InGroupAddresses(message.target_address));
 800eb6c:	f7ff ffe6 	bl	800eb3c <_ZN13Communication16InGroupAddressesEh>
 800eb70:	e7fb      	b.n	800eb6a <_ZN13Communication13AcceptMessageE13MessageHeader+0x12>
 800eb72:	2001      	movs	r0, #1
}
 800eb74:	4770      	bx	lr

0800eb76 <_ZN13Communication5GetIDEPvPb>:

uint8_t Communication::GetID(void* handle, bool* success) {
 800eb76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb78:	460e      	mov	r6, r1
 800eb7a:	4614      	mov	r4, r2
	uint8_t ID;
	for (CommunicationProtocol* protocol : protocols) {
 800eb7c:	6c43      	ldr	r3, [r0, #68]	; 0x44
      : _M_current(__i) { }
 800eb7e:	6c87      	ldr	r7, [r0, #72]	; 0x48
 800eb80:	e000      	b.n	800eb84 <_ZN13Communication5GetIDEPvPb+0xe>
	++_M_current;
 800eb82:	1d2b      	adds	r3, r5, #4
    { return __lhs.base() != __rhs.base(); }
 800eb84:	461d      	mov	r5, r3
 800eb86:	429f      	cmp	r7, r3
 800eb88:	d009      	beq.n	800eb9e <_ZN13Communication5GetIDEPvPb+0x28>
 800eb8a:	6818      	ldr	r0, [r3, #0]
		ID = protocol->GetID(handle, success);
 800eb8c:	6803      	ldr	r3, [r0, #0]
 800eb8e:	68db      	ldr	r3, [r3, #12]
 800eb90:	4622      	mov	r2, r4
 800eb92:	4631      	mov	r1, r6
 800eb94:	4798      	blx	r3
		if (*success)
 800eb96:	7823      	ldrb	r3, [r4, #0]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d0f2      	beq.n	800eb82 <_ZN13Communication5GetIDEPvPb+0xc>
 800eb9c:	e000      	b.n	800eba0 <_ZN13Communication5GetIDEPvPb+0x2a>
			return ID;
	}
	return 0;
 800eb9e:	2000      	movs	r0, #0
}
 800eba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eba2 <_ZN13Communication9GetBufferEhPb>:

std::vector<uint8_t>* Communication::GetBuffer(uint8_t ID, bool* success) {
 800eba2:	b538      	push	{r3, r4, r5, lr}
 800eba4:	460c      	mov	r4, r1
 800eba6:	4615      	mov	r5, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 800eba8:	f7ff ffb1 	bl	800eb0e <_ZN13Communication12FindProtocolEhPb>
	if (*success) {
		std::vector<uint8_t>* buffer = protocol->GetBuffer(ID, success);
 800ebac:	462a      	mov	r2, r5
 800ebae:	4621      	mov	r1, r4
 800ebb0:	f009 f970 	bl	8017e94 <_ZN21CommunicationProtocol9GetBufferEhPb>
		if (*success)
			return buffer;
	}
}
 800ebb4:	bd38      	pop	{r3, r4, r5, pc}

0800ebb6 <_ZN13Communication14GetBufferIndexEhPb>:

uint16_t* Communication::GetBufferIndex(uint8_t ID, bool* success) {
 800ebb6:	b538      	push	{r3, r4, r5, lr}
 800ebb8:	460d      	mov	r5, r1
 800ebba:	4614      	mov	r4, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 800ebbc:	f7ff ffa7 	bl	800eb0e <_ZN13Communication12FindProtocolEhPb>
	if (*success) {
 800ebc0:	7823      	ldrb	r3, [r4, #0]
 800ebc2:	b13b      	cbz	r3, 800ebd4 <_ZN13Communication14GetBufferIndexEhPb+0x1e>
		uint16_t* buffer_index = protocol->GetBufferIndex(ID, success);
 800ebc4:	4622      	mov	r2, r4
 800ebc6:	4629      	mov	r1, r5
 800ebc8:	f009 f973 	bl	8017eb2 <_ZN21CommunicationProtocol14GetBufferIndexEhPb>
		if (*success)
 800ebcc:	7823      	ldrb	r3, [r4, #0]
 800ebce:	b913      	cbnz	r3, 800ebd6 <_ZN13Communication14GetBufferIndexEhPb+0x20>
			return buffer_index;
	}
	return NULL;
 800ebd0:	2000      	movs	r0, #0
 800ebd2:	e000      	b.n	800ebd6 <_ZN13Communication14GetBufferIndexEhPb+0x20>
 800ebd4:	2000      	movs	r0, #0
}
 800ebd6:	bd38      	pop	{r3, r4, r5, pc}

0800ebd8 <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb>:

uint16_t Communication::GetProtocolPayloadMaxLength(uint8_t ID, bool* success) {
 800ebd8:	b510      	push	{r4, lr}
 800ebda:	4614      	mov	r4, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 800ebdc:	f7ff ff97 	bl	800eb0e <_ZN13Communication12FindProtocolEhPb>
	if (not *success)
 800ebe0:	7823      	ldrb	r3, [r4, #0]
 800ebe2:	b90b      	cbnz	r3, 800ebe8 <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb+0x10>
		return 0;
 800ebe4:	2000      	movs	r0, #0

	return protocol->GetProtocolPayloadMaxLength();
}
 800ebe6:	bd10      	pop	{r4, pc}
	return protocol->GetProtocolPayloadMaxLength();
 800ebe8:	f009 f972 	bl	8017ed0 <_ZN21CommunicationProtocol27GetProtocolPayloadMaxLengthEv>
 800ebec:	e7fb      	b.n	800ebe6 <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb+0xe>

0800ebee <_ZN13Communication17ActivateReceptionEh>:

HAL_StatusTypeDef Communication::ActivateReception(uint8_t ID) {
 800ebee:	b510      	push	{r4, lr}
 800ebf0:	b082      	sub	sp, #8
 800ebf2:	460c      	mov	r4, r1
	bool success;
	CommunicationProtocol* protocol = FindProtocol(ID, &success);
 800ebf4:	f10d 0207 	add.w	r2, sp, #7
 800ebf8:	f7ff ff89 	bl	800eb0e <_ZN13Communication12FindProtocolEhPb>
	if (not success) return HAL_ERROR;
 800ebfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ec00:	b12b      	cbz	r3, 800ec0e <_ZN13Communication17ActivateReceptionEh+0x20>
	return protocol->ActivateReception(ID);
 800ec02:	6803      	ldr	r3, [r0, #0]
 800ec04:	685b      	ldr	r3, [r3, #4]
 800ec06:	4621      	mov	r1, r4
 800ec08:	4798      	blx	r3
}
 800ec0a:	b002      	add	sp, #8
 800ec0c:	bd10      	pop	{r4, pc}
	if (not success) return HAL_ERROR;
 800ec0e:	2001      	movs	r0, #1
 800ec10:	e7fb      	b.n	800ec0a <_ZN13Communication17ActivateReceptionEh+0x1c>

0800ec12 <_ZN13Communication16SetModuleAddressEh>:
	subscribers->Receive<T>(subscriber_information, data);

	return start_index + sizeof(T) * length_to_extract;
}

bool Communication::SetModuleAddress(uint8_t address_) {
 800ec12:	b538      	push	{r3, r4, r5, lr}
 800ec14:	4604      	mov	r4, r0
 800ec16:	460d      	mov	r5, r1
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800ec18:	f04f 31ff 	mov.w	r1, #4294967295
 800ec1c:	6800      	ldr	r0, [r0, #0]
 800ec1e:	f7fd fe4b 	bl	800c8b8 <osSemaphoreAcquire>
	address = address_;
 800ec22:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
	osSemaphoreRelease(CommunicationSemaphore);
 800ec26:	6820      	ldr	r0, [r4, #0]
 800ec28:	f7fd fe7a 	bl	800c920 <osSemaphoreRelease>
	return true;
}
 800ec2c:	2001      	movs	r0, #1
 800ec2e:	bd38      	pop	{r3, r4, r5, pc}

0800ec30 <_ZN13Communication17ClearGroupAddressEv>:
	}
	osSemaphoreRelease(CommunicationSemaphore);
	return false;
}

bool Communication::ClearGroupAddress(void) {
 800ec30:	b510      	push	{r4, lr}
 800ec32:	4604      	mov	r4, r0
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800ec34:	f04f 31ff 	mov.w	r1, #4294967295
 800ec38:	6800      	ldr	r0, [r0, #0]
 800ec3a:	f7fd fe3d 	bl	800c8b8 <osSemaphoreAcquire>
      { _M_erase_at_end(this->_M_impl._M_start); }
 800ec3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800ec40:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ec42:	4293      	cmp	r3, r2
 800ec44:	d000      	beq.n	800ec48 <_ZN13Communication17ClearGroupAddressEv+0x18>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
 800ec46:	63e3      	str	r3, [r4, #60]	; 0x3c
	group_addresses.clear();
	osSemaphoreRelease(CommunicationSemaphore);
 800ec48:	6820      	ldr	r0, [r4, #0]
 800ec4a:	f7fd fe69 	bl	800c920 <osSemaphoreRelease>
	return true;
}
 800ec4e:	2001      	movs	r0, #1
 800ec50:	bd10      	pop	{r4, pc}

0800ec52 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 800ec52:	b508      	push	{r3, lr}
			return self->ClearGroupAddress();
 800ec54:	f7ff ffec 	bl	800ec30 <_ZN13Communication17ClearGroupAddressEv>
		}
 800ec58:	bd08      	pop	{r3, pc}
	...

0800ec5c <_ZN9Registers9GetTypeIDIhEEhPb>:
	osSemaphoreRelease(RegistersSemaphore);
	return success;
}

template <typename T>
uint8_t Registers::GetTypeID (bool* success) {
 800ec5c:	b510      	push	{r4, lr}
 800ec5e:	460c      	mov	r4, r1
	uint8_t type = 0;

	if (false) {}
#ifdef USE_UINT8_REGISTER
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800ec60:	481a      	ldr	r0, [pc, #104]	; (800eccc <_ZN9Registers9GetTypeIDIhEEhPb+0x70>)
 800ec62:	4601      	mov	r1, r0
 800ec64:	f00c fa2a 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800ec68:	b118      	cbz	r0, 800ec72 <_ZN9Registers9GetTypeIDIhEEhPb+0x16>
 800ec6a:	2000      	movs	r0, #0
#ifdef USE_DOUBLE_REGISTER
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
#endif
	else {*success = false; return 0;}

	*success = true;
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	7023      	strb	r3, [r4, #0]
	return type;
}
 800ec70:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800ec72:	4917      	ldr	r1, [pc, #92]	; (800ecd0 <_ZN9Registers9GetTypeIDIhEEhPb+0x74>)
 800ec74:	4815      	ldr	r0, [pc, #84]	; (800eccc <_ZN9Registers9GetTypeIDIhEEhPb+0x70>)
 800ec76:	f00c fa21 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800ec7a:	b108      	cbz	r0, 800ec80 <_ZN9Registers9GetTypeIDIhEEhPb+0x24>
 800ec7c:	2001      	movs	r0, #1
 800ec7e:	e7f5      	b.n	800ec6c <_ZN9Registers9GetTypeIDIhEEhPb+0x10>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800ec80:	4914      	ldr	r1, [pc, #80]	; (800ecd4 <_ZN9Registers9GetTypeIDIhEEhPb+0x78>)
 800ec82:	4812      	ldr	r0, [pc, #72]	; (800eccc <_ZN9Registers9GetTypeIDIhEEhPb+0x70>)
 800ec84:	f00c fa1a 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800ec88:	b108      	cbz	r0, 800ec8e <_ZN9Registers9GetTypeIDIhEEhPb+0x32>
 800ec8a:	2002      	movs	r0, #2
 800ec8c:	e7ee      	b.n	800ec6c <_ZN9Registers9GetTypeIDIhEEhPb+0x10>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800ec8e:	4912      	ldr	r1, [pc, #72]	; (800ecd8 <_ZN9Registers9GetTypeIDIhEEhPb+0x7c>)
 800ec90:	480e      	ldr	r0, [pc, #56]	; (800eccc <_ZN9Registers9GetTypeIDIhEEhPb+0x70>)
 800ec92:	f00c fa13 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800ec96:	b108      	cbz	r0, 800ec9c <_ZN9Registers9GetTypeIDIhEEhPb+0x40>
 800ec98:	2003      	movs	r0, #3
 800ec9a:	e7e7      	b.n	800ec6c <_ZN9Registers9GetTypeIDIhEEhPb+0x10>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800ec9c:	490f      	ldr	r1, [pc, #60]	; (800ecdc <_ZN9Registers9GetTypeIDIhEEhPb+0x80>)
 800ec9e:	480b      	ldr	r0, [pc, #44]	; (800eccc <_ZN9Registers9GetTypeIDIhEEhPb+0x70>)
 800eca0:	f00c fa0c 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800eca4:	b108      	cbz	r0, 800ecaa <_ZN9Registers9GetTypeIDIhEEhPb+0x4e>
 800eca6:	2006      	movs	r0, #6
 800eca8:	e7e0      	b.n	800ec6c <_ZN9Registers9GetTypeIDIhEEhPb+0x10>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800ecaa:	490d      	ldr	r1, [pc, #52]	; (800ece0 <_ZN9Registers9GetTypeIDIhEEhPb+0x84>)
 800ecac:	4807      	ldr	r0, [pc, #28]	; (800eccc <_ZN9Registers9GetTypeIDIhEEhPb+0x70>)
 800ecae:	f00c fa05 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800ecb2:	b108      	cbz	r0, 800ecb8 <_ZN9Registers9GetTypeIDIhEEhPb+0x5c>
 800ecb4:	2008      	movs	r0, #8
 800ecb6:	e7d9      	b.n	800ec6c <_ZN9Registers9GetTypeIDIhEEhPb+0x10>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800ecb8:	490a      	ldr	r1, [pc, #40]	; (800ece4 <_ZN9Registers9GetTypeIDIhEEhPb+0x88>)
 800ecba:	4804      	ldr	r0, [pc, #16]	; (800eccc <_ZN9Registers9GetTypeIDIhEEhPb+0x70>)
 800ecbc:	f00c f9fe 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800ecc0:	b108      	cbz	r0, 800ecc6 <_ZN9Registers9GetTypeIDIhEEhPb+0x6a>
 800ecc2:	2009      	movs	r0, #9
 800ecc4:	e7d2      	b.n	800ec6c <_ZN9Registers9GetTypeIDIhEEhPb+0x10>
	else {*success = false; return 0;}
 800ecc6:	7020      	strb	r0, [r4, #0]
 800ecc8:	e7d2      	b.n	800ec70 <_ZN9Registers9GetTypeIDIhEEhPb+0x14>
 800ecca:	bf00      	nop
 800eccc:	0801c1bc 	.word	0x0801c1bc
 800ecd0:	0801c1b4 	.word	0x0801c1b4
 800ecd4:	0801c1a4 	.word	0x0801c1a4
 800ecd8:	0801c19c 	.word	0x0801c19c
 800ecdc:	0801c1ac 	.word	0x0801c1ac
 800ece0:	0801c194 	.word	0x0801c194
 800ece4:	0801c18c 	.word	0x0801c18c

0800ece8 <_ZN13Communication15AddGroupAddressEh>:
bool Communication::AddGroupAddress(uint8_t address) {
 800ece8:	b530      	push	{r4, r5, lr}
 800ecea:	b083      	sub	sp, #12
 800ecec:	4605      	mov	r5, r0
 800ecee:	f88d 1007 	strb.w	r1, [sp, #7]
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800ecf2:	4604      	mov	r4, r0
 800ecf4:	f04f 31ff 	mov.w	r1, #4294967295
 800ecf8:	f854 0b38 	ldr.w	r0, [r4], #56
 800ecfc:	f7fd fddc 	bl	800c8b8 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800ed00:	6861      	ldr	r1, [r4, #4]
 800ed02:	68a3      	ldr	r3, [r4, #8]
 800ed04:	4299      	cmp	r1, r3
 800ed06:	d00b      	beq.n	800ed20 <_ZN13Communication15AddGroupAddressEh+0x38>
 800ed08:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ed0c:	700b      	strb	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 800ed0e:	6863      	ldr	r3, [r4, #4]
 800ed10:	3301      	adds	r3, #1
 800ed12:	6063      	str	r3, [r4, #4]
	osSemaphoreRelease(CommunicationSemaphore);
 800ed14:	6828      	ldr	r0, [r5, #0]
 800ed16:	f7fd fe03 	bl	800c920 <osSemaphoreRelease>
}
 800ed1a:	2001      	movs	r0, #1
 800ed1c:	b003      	add	sp, #12
 800ed1e:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 800ed20:	f10d 0207 	add.w	r2, sp, #7
 800ed24:	4620      	mov	r0, r4
 800ed26:	f7f2 faff 	bl	8001328 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 800ed2a:	e7f3      	b.n	800ed14 <_ZN13Communication15AddGroupAddressEh+0x2c>

0800ed2c <_ZZN13Communication12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 800ed2c:	b508      	push	{r3, lr}
			return self->AddGroupAddress(*input);
 800ed2e:	7811      	ldrb	r1, [r2, #0]
 800ed30:	f7ff ffda 	bl	800ece8 <_ZN13Communication15AddGroupAddressEh>
		}
 800ed34:	bd08      	pop	{r3, pc}

0800ed36 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 800ed36:	b570      	push	{r4, r5, r6, lr}
 800ed38:	b086      	sub	sp, #24
 800ed3a:	4602      	mov	r2, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	9303      	str	r3, [sp, #12]
 800ed40:	9304      	str	r3, [sp, #16]
 800ed42:	9305      	str	r3, [sp, #20]
 800ed44:	9300      	str	r3, [sp, #0]
 800ed46:	9301      	str	r3, [sp, #4]
 800ed48:	9302      	str	r3, [sp, #8]
	  _M_start = __x._M_start;
 800ed4a:	6800      	ldr	r0, [r0, #0]
 800ed4c:	9000      	str	r0, [sp, #0]
	  _M_finish = __x._M_finish;
 800ed4e:	6855      	ldr	r5, [r2, #4]
 800ed50:	9501      	str	r5, [sp, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800ed52:	6894      	ldr	r4, [r2, #8]
 800ed54:	9402      	str	r4, [sp, #8]
	  _M_start = __x._M_start;
 800ed56:	680e      	ldr	r6, [r1, #0]
 800ed58:	6016      	str	r6, [r2, #0]
	  _M_finish = __x._M_finish;
 800ed5a:	684e      	ldr	r6, [r1, #4]
 800ed5c:	6056      	str	r6, [r2, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800ed5e:	688e      	ldr	r6, [r1, #8]
 800ed60:	6096      	str	r6, [r2, #8]
	  _M_start = __x._M_start;
 800ed62:	6008      	str	r0, [r1, #0]
	  _M_finish = __x._M_finish;
 800ed64:	604d      	str	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800ed66:	608c      	str	r4, [r1, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800ed68:	9300      	str	r3, [sp, #0]
 800ed6a:	9301      	str	r3, [sp, #4]
 800ed6c:	9302      	str	r3, [sp, #8]
	  _M_start = __x._M_start;
 800ed6e:	9003      	str	r0, [sp, #12]
	  _M_finish = __x._M_finish;
 800ed70:	9504      	str	r5, [sp, #16]
	  _M_end_of_storage = __x._M_end_of_storage;
 800ed72:	9405      	str	r4, [sp, #20]
	  _M_start = __x._M_start;
 800ed74:	600b      	str	r3, [r1, #0]
	  _M_finish = __x._M_finish;
 800ed76:	604b      	str	r3, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800ed78:	608b      	str	r3, [r1, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800ed7a:	1a21      	subs	r1, r4, r0
	if (__p)
 800ed7c:	b108      	cbz	r0, 800ed82 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE+0x4c>
	::operator delete(__p
 800ed7e:	f00c f8f1 	bl	801af64 <_ZdlPvj>
      {
	vector __tmp(get_allocator());
	this->_M_impl._M_swap_data(__x._M_impl);
	__tmp._M_impl._M_swap_data(__x._M_impl);
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }
 800ed82:	b006      	add	sp, #24
 800ed84:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ed88 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800ed88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed8c:	b083      	sub	sp, #12
 800ed8e:	4688      	mov	r8, r1
 800ed90:	4616      	mov	r6, r2
 800ed92:	2301      	movs	r3, #1
 800ed94:	9300      	str	r3, [sp, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ed96:	6842      	ldr	r2, [r0, #4]
 800ed98:	6803      	ldr	r3, [r0, #0]
 800ed9a:	1ad3      	subs	r3, r2, r3
	if (max_size() - size() < __n)
 800ed9c:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
 800eda0:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 800eda4:	d03d      	beq.n	800ee22 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
 800eda6:	4604      	mov	r4, r0
 800eda8:	109d      	asrs	r5, r3, #2
	const size_type __len = size() + (std::max)(size(), __n);
 800edaa:	9501      	str	r5, [sp, #4]
      if (__a < __b)
 800edac:	2d00      	cmp	r5, #0
 800edae:	d03b      	beq.n	800ee28 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>
      return __a;
 800edb0:	ab01      	add	r3, sp, #4
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	441d      	add	r5, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800edb6:	6823      	ldr	r3, [r4, #0]
 800edb8:	1ad2      	subs	r2, r2, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800edba:	ebb5 0fa2 	cmp.w	r5, r2, asr #2
 800edbe:	d335      	bcc.n	800ee2c <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>
 800edc0:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 800edc4:	d235      	bcs.n	800ee32 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xaa>
      pointer __old_start = this->_M_impl._M_start;
 800edc6:	f8d4 9000 	ldr.w	r9, [r4]
      pointer __old_finish = this->_M_impl._M_finish;
 800edca:	f8d4 a004 	ldr.w	sl, [r4, #4]
    { return __lhs.base() - __rhs.base(); }
 800edce:	eba8 0b09 	sub.w	fp, r8, r9
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800edd2:	b39d      	cbz	r5, 800ee3c <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb4>
	if (__n > this->_M_max_size())
 800edd4:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 800edd8:	d22e      	bcs.n	800ee38 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb0>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800edda:	00a8      	lsls	r0, r5, #2
 800eddc:	f00c f8d8 	bl	801af90 <_Znwj>
 800ede0:	4607      	mov	r7, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ede2:	6833      	ldr	r3, [r6, #0]
 800ede4:	f847 300b 	str.w	r3, [r7, fp]
      ptrdiff_t __count = __last - __first;
 800ede8:	eba8 0609 	sub.w	r6, r8, r9
      if (__count > 0)
 800edec:	2e00      	cmp	r6, #0
 800edee:	dc27      	bgt.n	800ee40 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb8>
      return __result + __count;
 800edf0:	443e      	add	r6, r7
	      ++__new_finish;
 800edf2:	3604      	adds	r6, #4
      ptrdiff_t __count = __last - __first;
 800edf4:	ebaa 0a08 	sub.w	sl, sl, r8
      if (__count > 0)
 800edf8:	f1ba 0f00 	cmp.w	sl, #0
 800edfc:	dc26      	bgt.n	800ee4c <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xc4>
      return __result + __count;
 800edfe:	4456      	add	r6, sl
		    this->_M_impl._M_end_of_storage - __old_start);
 800ee00:	68a1      	ldr	r1, [r4, #8]
 800ee02:	eba1 0109 	sub.w	r1, r1, r9
	if (__p)
 800ee06:	f1b9 0f00 	cmp.w	r9, #0
 800ee0a:	d002      	beq.n	800ee12 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8a>
	::operator delete(__p
 800ee0c:	4648      	mov	r0, r9
 800ee0e:	f00c f8a9 	bl	801af64 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 800ee12:	6027      	str	r7, [r4, #0]
      this->_M_impl._M_finish = __new_finish;
 800ee14:	6066      	str	r6, [r4, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800ee16:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ee1a:	60a5      	str	r5, [r4, #8]
    }
 800ee1c:	b003      	add	sp, #12
 800ee1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_length_error(__N(__s));
 800ee22:	480d      	ldr	r0, [pc, #52]	; (800ee58 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xd0>)
 800ee24:	f00c f968 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 800ee28:	466b      	mov	r3, sp
 800ee2a:	e7c2      	b.n	800edb2 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ee2c:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 800ee30:	e7c9      	b.n	800edc6 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
 800ee32:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 800ee36:	e7c6      	b.n	800edc6 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	  std::__throw_bad_alloc();
 800ee38:	f00c f958 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ee3c:	2700      	movs	r7, #0
 800ee3e:	e7d0      	b.n	800ede2 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800ee40:	4632      	mov	r2, r6
 800ee42:	4649      	mov	r1, r9
 800ee44:	4638      	mov	r0, r7
 800ee46:	f00c fd61 	bl	801b90c <memmove>
 800ee4a:	e7d1      	b.n	800edf0 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x68>
 800ee4c:	4652      	mov	r2, sl
 800ee4e:	4641      	mov	r1, r8
 800ee50:	4630      	mov	r0, r6
 800ee52:	f00c fd5b 	bl	801b90c <memmove>
 800ee56:	e7d2      	b.n	800edfe <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x76>
 800ee58:	0801bde4 	.word	0x0801bde4

0800ee5c <_ZN13Communication11AddProtocolEP21CommunicationProtocol>:
void Communication::AddProtocol(CommunicationProtocol* protocol) {
 800ee5c:	b530      	push	{r4, r5, lr}
 800ee5e:	b083      	sub	sp, #12
 800ee60:	4605      	mov	r5, r0
 800ee62:	9101      	str	r1, [sp, #4]
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 800ee64:	4604      	mov	r4, r0
 800ee66:	f04f 31ff 	mov.w	r1, #4294967295
 800ee6a:	f854 0b44 	ldr.w	r0, [r4], #68
 800ee6e:	f7fd fd23 	bl	800c8b8 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800ee72:	6861      	ldr	r1, [r4, #4]
 800ee74:	68a3      	ldr	r3, [r4, #8]
 800ee76:	4299      	cmp	r1, r3
 800ee78:	d009      	beq.n	800ee8e <_ZN13Communication11AddProtocolEP21CommunicationProtocol+0x32>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ee7a:	9b01      	ldr	r3, [sp, #4]
 800ee7c:	600b      	str	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 800ee7e:	6863      	ldr	r3, [r4, #4]
 800ee80:	3304      	adds	r3, #4
 800ee82:	6063      	str	r3, [r4, #4]
	osSemaphoreRelease(CommunicationSemaphore);
 800ee84:	6828      	ldr	r0, [r5, #0]
 800ee86:	f7fd fd4b 	bl	800c920 <osSemaphoreRelease>
}
 800ee8a:	b003      	add	sp, #12
 800ee8c:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 800ee8e:	aa01      	add	r2, sp, #4
 800ee90:	4620      	mov	r0, r4
 800ee92:	f7ff ff79 	bl	800ed88 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 800ee96:	e7f5      	b.n	800ee84 <_ZN13Communication11AddProtocolEP21CommunicationProtocol+0x28>

0800ee98 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800ee98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee9c:	b083      	sub	sp, #12
 800ee9e:	4606      	mov	r6, r0
 800eea0:	4693      	mov	fp, r2
 800eea2:	2301      	movs	r3, #1
 800eea4:	9300      	str	r3, [sp, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800eea6:	6843      	ldr	r3, [r0, #4]
 800eea8:	6802      	ldr	r2, [r0, #0]
 800eeaa:	1a9a      	subs	r2, r3, r2
	if (max_size() - size() < __n)
 800eeac:	f06f 4078 	mvn.w	r0, #4160749568	; 0xf8000000
 800eeb0:	ebb0 1f22 	cmp.w	r0, r2, asr #4
 800eeb4:	d024      	beq.n	800ef00 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x68>
 800eeb6:	1117      	asrs	r7, r2, #4
	const size_type __len = size() + (std::max)(size(), __n);
 800eeb8:	9701      	str	r7, [sp, #4]
      if (__a < __b)
 800eeba:	b327      	cbz	r7, 800ef06 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6e>
      return __a;
 800eebc:	aa01      	add	r2, sp, #4
 800eebe:	6812      	ldr	r2, [r2, #0]
 800eec0:	4417      	add	r7, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800eec2:	6832      	ldr	r2, [r6, #0]
 800eec4:	1a9b      	subs	r3, r3, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800eec6:	ebb7 1f23 	cmp.w	r7, r3, asr #4
 800eeca:	d31e      	bcc.n	800ef0a <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
 800eecc:	f1b7 6f00 	cmp.w	r7, #134217728	; 0x8000000
 800eed0:	d21e      	bcs.n	800ef10 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
      pointer __old_start = this->_M_impl._M_start;
 800eed2:	f8d6 a000 	ldr.w	sl, [r6]
      pointer __old_finish = this->_M_impl._M_finish;
 800eed6:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800eeda:	460d      	mov	r5, r1
 800eedc:	eba1 040a 	sub.w	r4, r1, sl
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800eee0:	b1df      	cbz	r7, 800ef1a <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	if (__n > this->_M_max_size())
 800eee2:	f1b7 6f00 	cmp.w	r7, #134217728	; 0x8000000
 800eee6:	d216      	bcs.n	800ef16 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800eee8:	0138      	lsls	r0, r7, #4
 800eeea:	f00c f851 	bl	801af90 <_Znwj>
 800eeee:	4681      	mov	r9, r0
	  _Alloc_traits::construct(this->_M_impl,
 800eef0:	444c      	add	r4, r9
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800eef2:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800eef6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	_ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
 800eefa:	464c      	mov	r4, r9
 800eefc:	46d4      	mov	ip, sl
 800eefe:	e016      	b.n	800ef2e <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
	  __throw_length_error(__N(__s));
 800ef00:	481a      	ldr	r0, [pc, #104]	; (800ef6c <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>)
 800ef02:	f00c f8f9 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 800ef06:	466a      	mov	r2, sp
 800ef08:	e7d9      	b.n	800eebe <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ef0a:	f06f 4778 	mvn.w	r7, #4160749568	; 0xf8000000
 800ef0e:	e7e0      	b.n	800eed2 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3a>
 800ef10:	f06f 4778 	mvn.w	r7, #4160749568	; 0xf8000000
 800ef14:	e7dd      	b.n	800eed2 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3a>
	  std::__throw_bad_alloc();
 800ef16:	f00c f8e9 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ef1a:	f04f 0900 	mov.w	r9, #0
 800ef1e:	e7e7      	b.n	800eef0 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x58>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ef20:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800ef24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      for (; __first != __last; ++__first, (void)++__cur)
 800ef28:	f10c 0c10 	add.w	ip, ip, #16
 800ef2c:	3410      	adds	r4, #16
 800ef2e:	4565      	cmp	r5, ip
 800ef30:	d1f6      	bne.n	800ef20 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x88>
	      ++__new_finish;
 800ef32:	3410      	adds	r4, #16
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800ef34:	e005      	b.n	800ef42 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
 800ef36:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ef3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      for (; __first != __last; ++__first, (void)++__cur)
 800ef3e:	3510      	adds	r5, #16
 800ef40:	3410      	adds	r4, #16
 800ef42:	45a8      	cmp	r8, r5
 800ef44:	d1f7      	bne.n	800ef36 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
		    this->_M_impl._M_end_of_storage - __old_start);
 800ef46:	68b1      	ldr	r1, [r6, #8]
 800ef48:	eba1 010a 	sub.w	r1, r1, sl
	if (__p)
 800ef4c:	f1ba 0f00 	cmp.w	sl, #0
 800ef50:	d002      	beq.n	800ef58 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc0>
	::operator delete(__p
 800ef52:	4650      	mov	r0, sl
 800ef54:	f00c f806 	bl	801af64 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 800ef58:	f8c6 9000 	str.w	r9, [r6]
      this->_M_impl._M_finish = __new_finish;
 800ef5c:	6074      	str	r4, [r6, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800ef5e:	eb09 1707 	add.w	r7, r9, r7, lsl #4
 800ef62:	60b7      	str	r7, [r6, #8]
    }
 800ef64:	b003      	add	sp, #12
 800ef66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef6a:	bf00      	nop
 800ef6c:	0801bde4 	.word	0x0801bde4

0800ef70 <_ZN9Registers11AddRegisterIhEEbt>:
bool Registers::AddRegister(uint16_t ID) {
 800ef70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef72:	b08b      	sub	sp, #44	; 0x2c
 800ef74:	4604      	mov	r4, r0
 800ef76:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800ef78:	f04f 31ff 	mov.w	r1, #4294967295
 800ef7c:	6800      	ldr	r0, [r0, #0]
 800ef7e:	f7fd fc9b 	bl	800c8b8 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 800ef82:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 800ef86:	4631      	mov	r1, r6
 800ef88:	4620      	mov	r0, r4
 800ef8a:	f00a fe80 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 800ef8e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d13a      	bne.n	800f00c <_ZN9Registers11AddRegisterIhEEbt+0x9c>
struct Permissions {
 800ef96:	2701      	movs	r7, #1
 800ef98:	f88d 701c 	strb.w	r7, [sp, #28]
 800ef9c:	f88d 701d 	strb.w	r7, [sp, #29]
	Permissions permissions_;
 800efa0:	4b26      	ldr	r3, [pc, #152]	; (800f03c <_ZN9Registers11AddRegisterIhEEbt+0xcc>)
 800efa2:	881b      	ldrh	r3, [r3, #0]
 800efa4:	f8ad 3008 	strh.w	r3, [sp, #8]
	mode.pointer = false;
 800efa8:	2500      	movs	r5, #0
 800efaa:	f88d 5004 	strb.w	r5, [sp, #4]
	mode.callbacks = false;
 800efae:	f88d 5005 	strb.w	r5, [sp, #5]
	configuration_.mode = mode;
 800efb2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800efb6:	f8ad 3014 	strh.w	r3, [sp, #20]
	register_.address = ID;
 800efba:	f8ad 600c 	strh.w	r6, [sp, #12]
	register_.type = GetTypeID<T>(&success); // check the type is supported
 800efbe:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 800efc2:	4620      	mov	r0, r4
 800efc4:	f7ff fe4a 	bl	800ec5c <_ZN9Registers9GetTypeIDIhEEhPb>
 800efc8:	f88d 000e 	strb.w	r0, [sp, #14]
	register_.isArray = false;
 800efcc:	f88d 500f 	strb.w	r5, [sp, #15]
	register_.length = 1;
 800efd0:	f8ad 7010 	strh.w	r7, [sp, #16]
	configuration_.register_info = register_;
 800efd4:	9803      	ldr	r0, [sp, #12]
 800efd6:	f8cd 0016 	str.w	r0, [sp, #22]
 800efda:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800efde:	f8ad 301a 	strh.w	r3, [sp, #26]
	permissions_.write = false;
 800efe2:	f88d 5008 	strb.w	r5, [sp, #8]
	permissions_.read = false;
 800efe6:	f88d 5009 	strb.w	r5, [sp, #9]
	configuration_.access = permissions_;
 800efea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800efee:	f8ad 301c 	strh.w	r3, [sp, #28]
	configuration_.callbacks_ID = 0;
 800eff2:	f8ad 501e 	strh.w	r5, [sp, #30]
	configuration_.register_semaphore = NULL;
 800eff6:	9508      	str	r5, [sp, #32]
	if (success) {
 800eff8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800effc:	b95b      	cbnz	r3, 800f016 <_ZN9Registers11AddRegisterIhEEbt+0xa6>
	osSemaphoreRelease(RegistersSemaphore);
 800effe:	6820      	ldr	r0, [r4, #0]
 800f000:	f7fd fc8e 	bl	800c920 <osSemaphoreRelease>
	return success;
 800f004:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
}
 800f008:	b00b      	add	sp, #44	; 0x2c
 800f00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(RegistersSemaphore);
 800f00c:	6820      	ldr	r0, [r4, #0]
 800f00e:	f7fd fc87 	bl	800c920 <osSemaphoreRelease>
		return false; // register already exists, return error
 800f012:	2000      	movs	r0, #0
 800f014:	e7f8      	b.n	800f008 <_ZN9Registers11AddRegisterIhEEbt+0x98>
		registers.push_back(configuration_);
 800f016:	1d26      	adds	r6, r4, #4
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f018:	6875      	ldr	r5, [r6, #4]
 800f01a:	68b3      	ldr	r3, [r6, #8]
 800f01c:	429d      	cmp	r5, r3
 800f01e:	d007      	beq.n	800f030 <_ZN9Registers11AddRegisterIhEEbt+0xc0>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f020:	ab05      	add	r3, sp, #20
 800f022:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f024:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 800f028:	6873      	ldr	r3, [r6, #4]
 800f02a:	3310      	adds	r3, #16
 800f02c:	6073      	str	r3, [r6, #4]
 800f02e:	e7e6      	b.n	800effe <_ZN9Registers11AddRegisterIhEEbt+0x8e>
	  _M_realloc_insert(end(), __x);
 800f030:	aa05      	add	r2, sp, #20
 800f032:	4629      	mov	r1, r5
 800f034:	4630      	mov	r0, r6
 800f036:	f7ff ff2f 	bl	800ee98 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 800f03a:	e7e0      	b.n	800effe <_ZN9Registers11AddRegisterIhEEbt+0x8e>
 800f03c:	0801bd64 	.word	0x0801bd64

0800f040 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800f040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f044:	b083      	sub	sp, #12
 800f046:	4688      	mov	r8, r1
 800f048:	4616      	mov	r6, r2
 800f04a:	2301      	movs	r3, #1
 800f04c:	9300      	str	r3, [sp, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f04e:	6842      	ldr	r2, [r0, #4]
 800f050:	6803      	ldr	r3, [r0, #0]
 800f052:	1ad3      	subs	r3, r2, r3
	if (max_size() - size() < __n)
 800f054:	f06f 4178 	mvn.w	r1, #4160749568	; 0xf8000000
 800f058:	ebb1 1f23 	cmp.w	r1, r3, asr #4
 800f05c:	d040      	beq.n	800f0e0 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>
 800f05e:	4604      	mov	r4, r0
 800f060:	111d      	asrs	r5, r3, #4
	const size_type __len = size() + (std::max)(size(), __n);
 800f062:	9501      	str	r5, [sp, #4]
      if (__a < __b)
 800f064:	2d00      	cmp	r5, #0
 800f066:	d03e      	beq.n	800f0e6 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa6>
      return __a;
 800f068:	ab01      	add	r3, sp, #4
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	441d      	add	r5, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f06e:	6823      	ldr	r3, [r4, #0]
 800f070:	1ad2      	subs	r2, r2, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f072:	ebb5 1f22 	cmp.w	r5, r2, asr #4
 800f076:	d338      	bcc.n	800f0ea <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xaa>
 800f078:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 800f07c:	d238      	bcs.n	800f0f0 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb0>
      pointer __old_start = this->_M_impl._M_start;
 800f07e:	f8d4 9000 	ldr.w	r9, [r4]
      pointer __old_finish = this->_M_impl._M_finish;
 800f082:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800f086:	eba8 0b09 	sub.w	fp, r8, r9
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f08a:	b3b5      	cbz	r5, 800f0fa <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xba>
	if (__n > this->_M_max_size())
 800f08c:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 800f090:	d231      	bcs.n	800f0f6 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb6>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f092:	0128      	lsls	r0, r5, #4
 800f094:	f00b ff7c 	bl	801af90 <_Znwj>
 800f098:	4607      	mov	r7, r0
	  _Alloc_traits::construct(this->_M_impl,
 800f09a:	eb07 0c0b 	add.w	ip, r7, fp
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f09e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800f0a2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      ptrdiff_t __count = __last - __first;
 800f0a6:	eba8 0609 	sub.w	r6, r8, r9
      if (__count > 0)
 800f0aa:	2e00      	cmp	r6, #0
 800f0ac:	dc27      	bgt.n	800f0fe <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xbe>
      return __result + __count;
 800f0ae:	443e      	add	r6, r7
	      ++__new_finish;
 800f0b0:	3610      	adds	r6, #16
      ptrdiff_t __count = __last - __first;
 800f0b2:	ebaa 0a08 	sub.w	sl, sl, r8
      if (__count > 0)
 800f0b6:	f1ba 0f00 	cmp.w	sl, #0
 800f0ba:	dc26      	bgt.n	800f10a <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xca>
      return __result + __count;
 800f0bc:	4456      	add	r6, sl
		    this->_M_impl._M_end_of_storage - __old_start);
 800f0be:	68a1      	ldr	r1, [r4, #8]
 800f0c0:	eba1 0109 	sub.w	r1, r1, r9
	if (__p)
 800f0c4:	f1b9 0f00 	cmp.w	r9, #0
 800f0c8:	d002      	beq.n	800f0d0 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x90>
	::operator delete(__p
 800f0ca:	4648      	mov	r0, r9
 800f0cc:	f00b ff4a 	bl	801af64 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 800f0d0:	6027      	str	r7, [r4, #0]
      this->_M_impl._M_finish = __new_finish;
 800f0d2:	6066      	str	r6, [r4, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f0d4:	eb07 1505 	add.w	r5, r7, r5, lsl #4
 800f0d8:	60a5      	str	r5, [r4, #8]
    }
 800f0da:	b003      	add	sp, #12
 800f0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_length_error(__N(__s));
 800f0e0:	480d      	ldr	r0, [pc, #52]	; (800f118 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xd8>)
 800f0e2:	f00c f809 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 800f0e6:	466b      	mov	r3, sp
 800f0e8:	e7bf      	b.n	800f06a <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f0ea:	f06f 4578 	mvn.w	r5, #4160749568	; 0xf8000000
 800f0ee:	e7c6      	b.n	800f07e <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
 800f0f0:	f06f 4578 	mvn.w	r5, #4160749568	; 0xf8000000
 800f0f4:	e7c3      	b.n	800f07e <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	  std::__throw_bad_alloc();
 800f0f6:	f00b fff9 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f0fa:	2700      	movs	r7, #0
 800f0fc:	e7cd      	b.n	800f09a <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800f0fe:	4632      	mov	r2, r6
 800f100:	4649      	mov	r1, r9
 800f102:	4638      	mov	r0, r7
 800f104:	f00c fc02 	bl	801b90c <memmove>
 800f108:	e7d1      	b.n	800f0ae <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x6e>
 800f10a:	4652      	mov	r2, sl
 800f10c:	4641      	mov	r1, r8
 800f10e:	4630      	mov	r0, r6
 800f110:	f00c fbfc 	bl	801b90c <memmove>
 800f114:	e7d2      	b.n	800f0bc <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x7c>
 800f116:	bf00      	nop
 800f118:	0801bde4 	.word	0x0801bde4

0800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>:
	T* reinterpreted_pointer = reinterpret_cast<T*>(pointer);
	return AddRegisterPointer(ID, reinterpreted_pointer);
}

template <typename T>
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 800f11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f120:	b086      	sub	sp, #24
 800f122:	4604      	mov	r4, r0
 800f124:	460d      	mov	r5, r1
 800f126:	4690      	mov	r8, r2
 800f128:	461f      	mov	r7, r3
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f12a:	f04f 31ff 	mov.w	r1, #4294967295
 800f12e:	6800      	ldr	r0, [r0, #0]
 800f130:	f7fd fbc2 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f134:	f10d 0217 	add.w	r2, sp, #23
 800f138:	4629      	mov	r1, r5
 800f13a:	4620      	mov	r0, r4
 800f13c:	f00a fda7 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800f140:	f89d 6017 	ldrb.w	r6, [sp, #23]
 800f144:	b36e      	cbz	r6, 800f1a2 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE+0x86>
 800f146:	4605      	mov	r5, r0
		osSemaphoreRelease(RegistersSemaphore);
		return false;
	}

	// Check template type same as register type
	uint8_t registered_type = GetTypeID<T>(&success);
 800f148:	f10d 0117 	add.w	r1, sp, #23
 800f14c:	4620      	mov	r0, r4
 800f14e:	f7ff fd85 	bl	800ec5c <_ZN9Registers9GetTypeIDIhEEhPb>
	if (!success) {
 800f152:	f89d 6017 	ldrb.w	r6, [sp, #23]
 800f156:	b35e      	cbz	r6, 800f1b0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE+0x94>
		osSemaphoreRelease(RegistersSemaphore);
		return false;
	}

	if (target_register->register_info.type != registered_type) {
 800f158:	792b      	ldrb	r3, [r5, #4]
 800f15a:	4283      	cmp	r3, r0
 800f15c:	d12c      	bne.n	800f1b8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE+0x9c>
		osSemaphoreRelease(RegistersSemaphore);
		return false;
	}

	if (callbacks[target_register->register_info.type] == NULL) {// check supported type
 800f15e:	3304      	adds	r3, #4
 800f160:	f854 c023 	ldr.w	ip, [r4, r3, lsl #2]
 800f164:	f1bc 0f00 	cmp.w	ip, #0
 800f168:	d02b      	beq.n	800f1c2 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE+0xa6>
	}

	std::vector<RegisterCallbacks<T>>* target_callback_list;
	target_callback_list = reinterpret_cast <std::vector<RegisterCallbacks<T>>*> (callbacks[target_register->register_info.type]);

	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 800f16a:	782b      	ldrb	r3, [r5, #0]
 800f16c:	b90b      	cbnz	r3, 800f172 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE+0x56>
 800f16e:	786b      	ldrb	r3, [r5, #1]
 800f170:	b363      	cbz	r3, 800f1cc <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE+0xb0>
		callback.write = write;
		callback.read = NULL;
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
		target_callback_list->push_back(callback);
	} else {
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 800f172:	8968      	ldrh	r0, [r5, #10]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f174:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800f178:	f8dc 2000 	ldr.w	r2, [ip]
 800f17c:	1a9b      	subs	r3, r3, r2
 800f17e:	111a      	asrs	r2, r3, #4
	if (__n >= this->size())
 800f180:	ebb0 1f23 	cmp.w	r0, r3, asr #4
 800f184:	d243      	bcs.n	800f20e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE+0xf2>
	return *(this->_M_impl._M_start + __n);
 800f186:	f8dc 1000 	ldr.w	r1, [ip]
 800f18a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
		callback->context = context;
 800f18e:	f8c1 8004 	str.w	r8, [r1, #4]
		callback->write = write;
 800f192:	608f      	str	r7, [r1, #8]
	}

	target_register->mode.callbacks = true; // = (uint8_t) CALLBACK_MODE;
 800f194:	2301      	movs	r3, #1
 800f196:	706b      	strb	r3, [r5, #1]
	target_register->access.write = true;
 800f198:	722b      	strb	r3, [r5, #8]

	osSemaphoreRelease(RegistersSemaphore);
 800f19a:	6820      	ldr	r0, [r4, #0]
 800f19c:	f7fd fbc0 	bl	800c920 <osSemaphoreRelease>
	return true;
 800f1a0:	e002      	b.n	800f1a8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE+0x8c>
		osSemaphoreRelease(RegistersSemaphore);
 800f1a2:	6820      	ldr	r0, [r4, #0]
 800f1a4:	f7fd fbbc 	bl	800c920 <osSemaphoreRelease>
}
 800f1a8:	4630      	mov	r0, r6
 800f1aa:	b006      	add	sp, #24
 800f1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		osSemaphoreRelease(RegistersSemaphore);
 800f1b0:	6820      	ldr	r0, [r4, #0]
 800f1b2:	f7fd fbb5 	bl	800c920 <osSemaphoreRelease>
		return false;
 800f1b6:	e7f7      	b.n	800f1a8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE+0x8c>
		osSemaphoreRelease(RegistersSemaphore);
 800f1b8:	6820      	ldr	r0, [r4, #0]
 800f1ba:	f7fd fbb1 	bl	800c920 <osSemaphoreRelease>
		return false;
 800f1be:	2600      	movs	r6, #0
 800f1c0:	e7f2      	b.n	800f1a8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE+0x8c>
		osSemaphoreRelease(RegistersSemaphore);
 800f1c2:	6820      	ldr	r0, [r4, #0]
 800f1c4:	f7fd fbac 	bl	800c920 <osSemaphoreRelease>
		return false;
 800f1c8:	2600      	movs	r6, #0
 800f1ca:	e7ed      	b.n	800f1a8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE+0x8c>
		callback.context = context;
 800f1cc:	f8cd 8008 	str.w	r8, [sp, #8]
		callback.write = write;
 800f1d0:	9703      	str	r7, [sp, #12]
		callback.read = NULL;
 800f1d2:	9304      	str	r3, [sp, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f1d4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800f1d8:	f8dc 2000 	ldr.w	r2, [ip]
 800f1dc:	1a9b      	subs	r3, r3, r2
 800f1de:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 800f1e0:	816b      	strh	r3, [r5, #10]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f1e2:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800f1e6:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800f1ea:	429f      	cmp	r7, r3
 800f1ec:	d009      	beq.n	800f202 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE+0xe6>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f1ee:	ab01      	add	r3, sp, #4
 800f1f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f1f2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 800f1f6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800f1fa:	3310      	adds	r3, #16
 800f1fc:	f8cc 3004 	str.w	r3, [ip, #4]
 800f200:	e7c8      	b.n	800f194 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE+0x78>
	  _M_realloc_insert(end(), __x);
 800f202:	aa01      	add	r2, sp, #4
 800f204:	4639      	mov	r1, r7
 800f206:	4660      	mov	r0, ip
 800f208:	f7ff ff1a 	bl	800f040 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
		target_callback_list->push_back(callback);
 800f20c:	e7c2      	b.n	800f194 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE+0x78>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800f20e:	4601      	mov	r1, r0
 800f210:	4801      	ldr	r0, [pc, #4]	; (800f218 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE+0xfc>)
 800f212:	f00b ff74 	bl	801b0fe <_ZSt24__throw_out_of_range_fmtPKcz>
 800f216:	bf00      	nop
 800f218:	0801bffc 	.word	0x0801bffc

0800f21c <_ZN9Registers18AddRegisterPointerIhEEbtPT_>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 800f21c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f21e:	b087      	sub	sp, #28
 800f220:	4604      	mov	r4, r0
 800f222:	460d      	mov	r5, r1
 800f224:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f226:	f04f 31ff 	mov.w	r1, #4294967295
 800f22a:	6800      	ldr	r0, [r0, #0]
 800f22c:	f7fd fb44 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f230:	f10d 0217 	add.w	r2, sp, #23
 800f234:	4629      	mov	r1, r5
 800f236:	4620      	mov	r0, r4
 800f238:	f00a fd29 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800f23c:	f89d 6017 	ldrb.w	r6, [sp, #23]
 800f240:	b35e      	cbz	r6, 800f29a <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0x7e>
 800f242:	4605      	mov	r5, r0
	uint8_t registered_type = GetTypeID<T>(&success);
 800f244:	f10d 0117 	add.w	r1, sp, #23
 800f248:	4620      	mov	r0, r4
 800f24a:	f7ff fd07 	bl	800ec5c <_ZN9Registers9GetTypeIDIhEEhPb>
	if (!success) {
 800f24e:	f89d 6017 	ldrb.w	r6, [sp, #23]
 800f252:	b346      	cbz	r6, 800f2a6 <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0x8a>
	if (target_register->register_info.type != registered_type) {
 800f254:	792b      	ldrb	r3, [r5, #4]
 800f256:	4283      	cmp	r3, r0
 800f258:	d129      	bne.n	800f2ae <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0x92>
	if (callbacks[target_register->register_info.type] == NULL) { // check supported type
 800f25a:	3304      	adds	r3, #4
 800f25c:	f854 c023 	ldr.w	ip, [r4, r3, lsl #2]
 800f260:	f1bc 0f00 	cmp.w	ip, #0
 800f264:	d028      	beq.n	800f2b8 <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0x9c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 800f266:	782b      	ldrb	r3, [r5, #0]
 800f268:	b90b      	cbnz	r3, 800f26e <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0x52>
 800f26a:	786b      	ldrb	r3, [r5, #1]
 800f26c:	b34b      	cbz	r3, 800f2c2 <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0xa6>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 800f26e:	8969      	ldrh	r1, [r5, #10]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f270:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800f274:	f8dc 2000 	ldr.w	r2, [ip]
 800f278:	1a9b      	subs	r3, r3, r2
 800f27a:	111a      	asrs	r2, r3, #4
	if (__n >= this->size())
 800f27c:	ebb1 1f23 	cmp.w	r1, r3, asr #4
 800f280:	d23d      	bcs.n	800f2fe <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0xe2>
	return *(this->_M_impl._M_start + __n);
 800f282:	f8dc 3000 	ldr.w	r3, [ip]
 800f286:	0109      	lsls	r1, r1, #4
		callback->pointer = pointer;
 800f288:	505f      	str	r7, [r3, r1]
	target_register->mode.pointer = true;
 800f28a:	2301      	movs	r3, #1
 800f28c:	702b      	strb	r3, [r5, #0]
	target_register->access.write = true;
 800f28e:	722b      	strb	r3, [r5, #8]
	target_register->access.read = true;
 800f290:	726b      	strb	r3, [r5, #9]
	osSemaphoreRelease(RegistersSemaphore);
 800f292:	6820      	ldr	r0, [r4, #0]
 800f294:	f7fd fb44 	bl	800c920 <osSemaphoreRelease>
	return true;
 800f298:	e002      	b.n	800f2a0 <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0x84>
		osSemaphoreRelease(RegistersSemaphore);
 800f29a:	6820      	ldr	r0, [r4, #0]
 800f29c:	f7fd fb40 	bl	800c920 <osSemaphoreRelease>
}
 800f2a0:	4630      	mov	r0, r6
 800f2a2:	b007      	add	sp, #28
 800f2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(RegistersSemaphore);
 800f2a6:	6820      	ldr	r0, [r4, #0]
 800f2a8:	f7fd fb3a 	bl	800c920 <osSemaphoreRelease>
		return false;
 800f2ac:	e7f8      	b.n	800f2a0 <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0x84>
		osSemaphoreRelease(RegistersSemaphore);
 800f2ae:	6820      	ldr	r0, [r4, #0]
 800f2b0:	f7fd fb36 	bl	800c920 <osSemaphoreRelease>
		return false;
 800f2b4:	2600      	movs	r6, #0
 800f2b6:	e7f3      	b.n	800f2a0 <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0x84>
		osSemaphoreRelease(RegistersSemaphore);
 800f2b8:	6820      	ldr	r0, [r4, #0]
 800f2ba:	f7fd fb31 	bl	800c920 <osSemaphoreRelease>
		return false;
 800f2be:	2600      	movs	r6, #0
 800f2c0:	e7ee      	b.n	800f2a0 <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0x84>
		callback.pointer = pointer;
 800f2c2:	9701      	str	r7, [sp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f2c4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800f2c8:	f8dc 2000 	ldr.w	r2, [ip]
 800f2cc:	1a9b      	subs	r3, r3, r2
 800f2ce:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 800f2d0:	816b      	strh	r3, [r5, #10]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f2d2:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800f2d6:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800f2da:	429f      	cmp	r7, r3
 800f2dc:	d009      	beq.n	800f2f2 <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0xd6>
 800f2de:	ab01      	add	r3, sp, #4
 800f2e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f2e2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 800f2e6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800f2ea:	3310      	adds	r3, #16
 800f2ec:	f8cc 3004 	str.w	r3, [ip, #4]
 800f2f0:	e7cb      	b.n	800f28a <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0x6e>
	  _M_realloc_insert(end(), __x);
 800f2f2:	aa01      	add	r2, sp, #4
 800f2f4:	4639      	mov	r1, r7
 800f2f6:	4660      	mov	r0, ip
 800f2f8:	f7ff fea2 	bl	800f040 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
		target_callback_list->push_back(callback);
 800f2fc:	e7c5      	b.n	800f28a <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0x6e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800f2fe:	4801      	ldr	r0, [pc, #4]	; (800f304 <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0xe8>)
 800f300:	f00b fefd 	bl	801b0fe <_ZSt24__throw_out_of_range_fmtPKcz>
 800f304:	0801bffc 	.word	0x0801bffc

0800f308 <_ZN9Registers24AddVectorRegisterPointerIhEEbtPSt6vectorIT_SaIS2_EE>:
bool Registers::AddVectorRegisterPointer(uint16_t ID, std::vector<T>* pointer) {
 800f308:	b508      	push	{r3, lr}
	return AddRegisterPointer(ID, reinterpreted_pointer);
 800f30a:	f7ff ff87 	bl	800f21c <_ZN9Registers18AddRegisterPointerIhEEbtPT_>
}
 800f30e:	bd08      	pop	{r3, pc}

0800f310 <_ZN13Communication12AddRegistersEv>:
void Communication::AddRegisters(void) {
 800f310:	b510      	push	{r4, lr}
 800f312:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_COM_ID_PROPAGATION);
 800f314:	2101      	movs	r1, #1
 800f316:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800f318:	f7ff fe2a 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_COM_ID_PROPAGATION);
 800f31c:	2101      	movs	r1, #1
 800f31e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f320:	f00a fcf5 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_ID_PROPAGATION, (void*) this,
 800f324:	4b32      	ldr	r3, [pc, #200]	; (800f3f0 <_ZN13Communication12AddRegistersEv+0xe0>)
 800f326:	4622      	mov	r2, r4
 800f328:	2101      	movs	r1, #1
 800f32a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f32c:	f7ff fef6 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_COM_ADDRESS);
 800f330:	2102      	movs	r1, #2
 800f332:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f334:	f7ff fe1c 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_COM_ADDRESS);
 800f338:	2102      	movs	r1, #2
 800f33a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f33c:	f00a fce7 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_COM_ADDRESS, &CommunicationSemaphore);
 800f340:	4622      	mov	r2, r4
 800f342:	2102      	movs	r1, #2
 800f344:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f346:	f00a fcc4 	bl	8019cd2 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer(REG_COM_ADDRESS, &address);
 800f34a:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800f34e:	2102      	movs	r1, #2
 800f350:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f352:	f7ff ff63 	bl	800f21c <_ZN9Registers18AddRegisterPointerIhEEbtPT_>
	registers->AddRegister<uint8_t>(REG_COM_ADD_GROUP_ADDRESS);
 800f356:	2103      	movs	r1, #3
 800f358:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f35a:	f7ff fe09 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_COM_ADD_GROUP_ADDRESS);
 800f35e:	2103      	movs	r1, #3
 800f360:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f362:	f00a fcd4 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_ADD_GROUP_ADDRESS, (void*) this,
 800f366:	4b23      	ldr	r3, [pc, #140]	; (800f3f4 <_ZN13Communication12AddRegistersEv+0xe4>)
 800f368:	4622      	mov	r2, r4
 800f36a:	2103      	movs	r1, #3
 800f36c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f36e:	f7ff fed5 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_COM_REMOVE_GROUP_ADDRESS);
 800f372:	2104      	movs	r1, #4
 800f374:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f376:	f7ff fdfb 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_COM_REMOVE_GROUP_ADDRESS);
 800f37a:	2104      	movs	r1, #4
 800f37c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f37e:	f00a fcc6 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_REMOVE_GROUP_ADDRESS, (void*) this,
 800f382:	4b1d      	ldr	r3, [pc, #116]	; (800f3f8 <_ZN13Communication12AddRegistersEv+0xe8>)
 800f384:	4622      	mov	r2, r4
 800f386:	2104      	movs	r1, #4
 800f388:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f38a:	f7ff fec7 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_COM_CLEAR_GROUP_ADDRESS);
 800f38e:	2105      	movs	r1, #5
 800f390:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f392:	f7ff fded 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_COM_CLEAR_GROUP_ADDRESS);
 800f396:	2105      	movs	r1, #5
 800f398:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f39a:	f00a fcb8 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_CLEAR_GROUP_ADDRESS, (void*) this,
 800f39e:	4b17      	ldr	r3, [pc, #92]	; (800f3fc <_ZN13Communication12AddRegistersEv+0xec>)
 800f3a0:	4622      	mov	r2, r4
 800f3a2:	2105      	movs	r1, #5
 800f3a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f3a6:	f7ff feb9 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_COM_GET_GROUP_ADDRESS);
 800f3aa:	2106      	movs	r1, #6
 800f3ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f3ae:	f7ff fddf 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsVector(REG_COM_GET_GROUP_ADDRESS);
 800f3b2:	2106      	movs	r1, #6
 800f3b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f3b6:	f00a fcea 	bl	8019d8e <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddVectorRegisterPointer<uint8_t>(REG_COM_GET_GROUP_ADDRESS, &group_addresses);
 800f3ba:	f104 0238 	add.w	r2, r4, #56	; 0x38
 800f3be:	2106      	movs	r1, #6
 800f3c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f3c2:	f7ff ffa1 	bl	800f308 <_ZN9Registers24AddVectorRegisterPointerIhEEbtPSt6vectorIT_SaIS2_EE>
	registers->SetRegisterPermissions(REG_COM_GET_GROUP_ADDRESS, READ_PERMISSION);
 800f3c6:	2202      	movs	r2, #2
 800f3c8:	2106      	movs	r1, #6
 800f3ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f3cc:	f00a fce4 	bl	8019d98 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<uint8_t>(REG_COM_FORWARD_MESSAGE);
 800f3d0:	2107      	movs	r1, #7
 800f3d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f3d4:	f7ff fdcc 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsVector(REG_COM_FORWARD_MESSAGE);
 800f3d8:	2107      	movs	r1, #7
 800f3da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f3dc:	f00a fcd7 	bl	8019d8e <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_FORWARD_MESSAGE, (void*) this,
 800f3e0:	4b07      	ldr	r3, [pc, #28]	; (800f400 <_ZN13Communication12AddRegistersEv+0xf0>)
 800f3e2:	4622      	mov	r2, r4
 800f3e4:	2107      	movs	r1, #7
 800f3e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f3e8:	f7ff fe98 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
}
 800f3ec:	bd10      	pop	{r4, pc}
 800f3ee:	bf00      	nop
 800f3f0:	08012359 	.word	0x08012359
 800f3f4:	0800ed2d 	.word	0x0800ed2d
 800f3f8:	08010249 	.word	0x08010249
 800f3fc:	0800ec53 	.word	0x0800ec53
 800f400:	08011ef1 	.word	0x08011ef1

0800f404 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800f404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f408:	b083      	sub	sp, #12
 800f40a:	4616      	mov	r6, r2
 800f40c:	2301      	movs	r3, #1
 800f40e:	9300      	str	r3, [sp, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f410:	6843      	ldr	r3, [r0, #4]
 800f412:	6804      	ldr	r4, [r0, #0]
 800f414:	1b1c      	subs	r4, r3, r4
	if (max_size() - size() < __n)
 800f416:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800f41a:	42a2      	cmp	r2, r4
 800f41c:	d039      	beq.n	800f492 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x8e>
 800f41e:	4605      	mov	r5, r0
 800f420:	4688      	mov	r8, r1
	const size_type __len = size() + (std::max)(size(), __n);
 800f422:	9401      	str	r4, [sp, #4]
      if (__a < __b)
 800f424:	2c00      	cmp	r4, #0
 800f426:	d037      	beq.n	800f498 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x94>
      return __a;
 800f428:	aa01      	add	r2, sp, #4
 800f42a:	6812      	ldr	r2, [r2, #0]
 800f42c:	4414      	add	r4, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f42e:	682a      	ldr	r2, [r5, #0]
 800f430:	1a9b      	subs	r3, r3, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f432:	429c      	cmp	r4, r3
 800f434:	d332      	bcc.n	800f49c <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x98>
 800f436:	2c00      	cmp	r4, #0
 800f438:	db33      	blt.n	800f4a2 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x9e>
      pointer __old_start = this->_M_impl._M_start;
 800f43a:	f8d5 9000 	ldr.w	r9, [r5]
      pointer __old_finish = this->_M_impl._M_finish;
 800f43e:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800f442:	eba8 0b09 	sub.w	fp, r8, r9
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f446:	b38c      	cbz	r4, 800f4ac <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0xa8>
	if (__n > this->_M_max_size())
 800f448:	2c00      	cmp	r4, #0
 800f44a:	db2d      	blt.n	800f4a8 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0xa4>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f44c:	4620      	mov	r0, r4
 800f44e:	f00b fd9f 	bl	801af90 <_Znwj>
 800f452:	4607      	mov	r7, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f454:	7833      	ldrb	r3, [r6, #0]
 800f456:	f807 300b 	strb.w	r3, [r7, fp]
      ptrdiff_t __count = __last - __first;
 800f45a:	eba8 0609 	sub.w	r6, r8, r9
      if (__count > 0)
 800f45e:	2e00      	cmp	r6, #0
 800f460:	dc26      	bgt.n	800f4b0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0xac>
      return __result + __count;
 800f462:	443e      	add	r6, r7
	      ++__new_finish;
 800f464:	3601      	adds	r6, #1
      ptrdiff_t __count = __last - __first;
 800f466:	ebaa 0a08 	sub.w	sl, sl, r8
      if (__count > 0)
 800f46a:	f1ba 0f00 	cmp.w	sl, #0
 800f46e:	dc25      	bgt.n	800f4bc <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0xb8>
      return __result + __count;
 800f470:	4456      	add	r6, sl
		    this->_M_impl._M_end_of_storage - __old_start);
 800f472:	68a9      	ldr	r1, [r5, #8]
 800f474:	eba1 0109 	sub.w	r1, r1, r9
	if (__p)
 800f478:	f1b9 0f00 	cmp.w	r9, #0
 800f47c:	d002      	beq.n	800f484 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x80>
	::operator delete(__p
 800f47e:	4648      	mov	r0, r9
 800f480:	f00b fd70 	bl	801af64 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 800f484:	602f      	str	r7, [r5, #0]
      this->_M_impl._M_finish = __new_finish;
 800f486:	606e      	str	r6, [r5, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800f488:	443c      	add	r4, r7
 800f48a:	60ac      	str	r4, [r5, #8]
    }
 800f48c:	b003      	add	sp, #12
 800f48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_length_error(__N(__s));
 800f492:	480d      	ldr	r0, [pc, #52]	; (800f4c8 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0xc4>)
 800f494:	f00b fe30 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 800f498:	466a      	mov	r2, sp
 800f49a:	e7c6      	b.n	800f42a <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x26>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f49c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800f4a0:	e7cb      	b.n	800f43a <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x36>
 800f4a2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800f4a6:	e7c8      	b.n	800f43a <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x36>
	  std::__throw_bad_alloc();
 800f4a8:	f00b fe20 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f4ac:	2700      	movs	r7, #0
 800f4ae:	e7d1      	b.n	800f454 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x50>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800f4b0:	4632      	mov	r2, r6
 800f4b2:	4649      	mov	r1, r9
 800f4b4:	4638      	mov	r0, r7
 800f4b6:	f00c fa29 	bl	801b90c <memmove>
 800f4ba:	e7d2      	b.n	800f462 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x5e>
 800f4bc:	4652      	mov	r2, sl
 800f4be:	4641      	mov	r1, r8
 800f4c0:	4630      	mov	r0, r6
 800f4c2:	f00c fa23 	bl	801b90c <memmove>
 800f4c6:	e7d3      	b.n	800f470 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x6c>
 800f4c8:	0801bde4 	.word	0x0801bde4

0800f4cc <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800f4cc:	b508      	push	{r3, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f4ce:	6843      	ldr	r3, [r0, #4]
 800f4d0:	6882      	ldr	r2, [r0, #8]
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d005      	beq.n	800f4e2 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x16>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800f4d6:	780a      	ldrb	r2, [r1, #0]
 800f4d8:	701a      	strb	r2, [r3, #0]
	    ++this->_M_impl._M_finish;
 800f4da:	6843      	ldr	r3, [r0, #4]
 800f4dc:	3301      	adds	r3, #1
 800f4de:	6043      	str	r3, [r0, #4]
      }
 800f4e0:	bd08      	pop	{r3, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800f4e2:	460a      	mov	r2, r1
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	f7ff ff8d 	bl	800f404 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
      }
 800f4ea:	e7f9      	b.n	800f4e0 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x14>

0800f4ec <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb>:
	std::vector<CommunicationProtocol*> protocols;
	std::vector<MessageHeader> pending_messages;
};

template<typename T>
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 800f4ec:	b530      	push	{r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f4ee:	6848      	ldr	r0, [r1, #4]
 800f4f0:	680c      	ldr	r4, [r1, #0]
 800f4f2:	1b01      	subs	r1, r0, r4
	uint64_t data = 0;
	uint8_t type_length = sizeof(T);

	if (payload.size() < start_index + type_length) {
 800f4f4:	1c50      	adds	r0, r2, #1
 800f4f6:	4288      	cmp	r0, r1
 800f4f8:	d810      	bhi.n	800f51c <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb+0x30>
	uint64_t data = 0;
 800f4fa:	2000      	movs	r0, #0
		*success = false;
		return 0;
	}

	for (uint8_t index = 0; index < type_length; index++) {
 800f4fc:	4601      	mov	r1, r0
 800f4fe:	b981      	cbnz	r1, 800f522 <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb+0x36>
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3)); // previously (8 * (type_length - 1 - index)));
 800f500:	1855      	adds	r5, r2, r1
 800f502:	f1c1 0c00 	rsb	ip, r1, #0
 800f506:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 800f50a:	f814 c005 	ldrb.w	ip, [r4, r5]
 800f50e:	fa0c fc0e 	lsl.w	ip, ip, lr
 800f512:	ea4c 0000 	orr.w	r0, ip, r0
	for (uint8_t index = 0; index < type_length; index++) {
 800f516:	3101      	adds	r1, #1
 800f518:	b2c9      	uxtb	r1, r1
 800f51a:	e7f0      	b.n	800f4fe <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb+0x12>
		*success = false;
 800f51c:	2000      	movs	r0, #0
 800f51e:	7018      	strb	r0, [r3, #0]
		return 0;
 800f520:	e002      	b.n	800f528 <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb+0x3c>
	}

    T* reinterpreted_data = reinterpret_cast<T*>(&data);

    *success = true;
 800f522:	2201      	movs	r2, #1
 800f524:	701a      	strb	r2, [r3, #0]
	return *reinterpreted_data;
 800f526:	b2c0      	uxtb	r0, r0
}
 800f528:	bd30      	pop	{r4, r5, pc}

0800f52a <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb>:
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 800f52a:	b530      	push	{r4, r5, lr}
 800f52c:	6848      	ldr	r0, [r1, #4]
 800f52e:	680d      	ldr	r5, [r1, #0]
 800f530:	1b41      	subs	r1, r0, r5
	if (payload.size() < start_index + type_length) {
 800f532:	1d10      	adds	r0, r2, #4
 800f534:	4288      	cmp	r0, r1
 800f536:	d802      	bhi.n	800f53e <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb+0x14>
	uint64_t data = 0;
 800f538:	2000      	movs	r0, #0
	for (uint8_t index = 0; index < type_length; index++) {
 800f53a:	4601      	mov	r1, r0
 800f53c:	e00f      	b.n	800f55e <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb+0x34>
		*success = false;
 800f53e:	2000      	movs	r0, #0
 800f540:	7018      	strb	r0, [r3, #0]
		return 0;
 800f542:	e010      	b.n	800f566 <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb+0x3c>
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3)); // previously (8 * (type_length - 1 - index)));
 800f544:	1854      	adds	r4, r2, r1
 800f546:	f1c1 0c03 	rsb	ip, r1, #3
 800f54a:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
 800f54e:	f815 c004 	ldrb.w	ip, [r5, r4]
 800f552:	fa0c fc0e 	lsl.w	ip, ip, lr
 800f556:	ea4c 0000 	orr.w	r0, ip, r0
	for (uint8_t index = 0; index < type_length; index++) {
 800f55a:	3101      	adds	r1, #1
 800f55c:	b2c9      	uxtb	r1, r1
 800f55e:	2903      	cmp	r1, #3
 800f560:	d9f0      	bls.n	800f544 <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb+0x1a>
    *success = true;
 800f562:	2201      	movs	r2, #1
 800f564:	701a      	strb	r2, [r3, #0]
}
 800f566:	bd30      	pop	{r4, r5, pc}

0800f568 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb>:
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 800f568:	b530      	push	{r4, r5, lr}
 800f56a:	6848      	ldr	r0, [r1, #4]
 800f56c:	680d      	ldr	r5, [r1, #0]
 800f56e:	1b41      	subs	r1, r0, r5
	if (payload.size() < start_index + type_length) {
 800f570:	1d10      	adds	r0, r2, #4
 800f572:	4288      	cmp	r0, r1
 800f574:	d803      	bhi.n	800f57e <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb+0x16>
	uint64_t data = 0;
 800f576:	f04f 0e00 	mov.w	lr, #0
	for (uint8_t index = 0; index < type_length; index++) {
 800f57a:	4671      	mov	r1, lr
 800f57c:	e010      	b.n	800f5a0 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb+0x38>
		*success = false;
 800f57e:	2200      	movs	r2, #0
 800f580:	701a      	strb	r2, [r3, #0]
		return 0;
 800f582:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800f5b0 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb+0x48>
 800f586:	e011      	b.n	800f5ac <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb+0x44>
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3)); // previously (8 * (type_length - 1 - index)));
 800f588:	1854      	adds	r4, r2, r1
 800f58a:	f1c1 0003 	rsb	r0, r1, #3
 800f58e:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 800f592:	5d28      	ldrb	r0, [r5, r4]
 800f594:	fa00 f00c 	lsl.w	r0, r0, ip
 800f598:	ea40 0e0e 	orr.w	lr, r0, lr
	for (uint8_t index = 0; index < type_length; index++) {
 800f59c:	3101      	adds	r1, #1
 800f59e:	b2c9      	uxtb	r1, r1
 800f5a0:	2903      	cmp	r1, #3
 800f5a2:	d9f1      	bls.n	800f588 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb+0x20>
    *success = true;
 800f5a4:	2201      	movs	r2, #1
 800f5a6:	701a      	strb	r2, [r3, #0]
	return *reinterpreted_data;
 800f5a8:	ee00 ea10 	vmov	s0, lr
}
 800f5ac:	bd30      	pop	{r4, r5, pc}
 800f5ae:	bf00      	nop
 800f5b0:	00000000 	.word	0x00000000

0800f5b4 <_ZN8Services11TranferDataIhEEvPT_S2_t>:
	}
}

template<typename T>
void Services::TranferData(T* from, T* to, uint16_t length) {
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800f5b4:	2000      	movs	r0, #0
 800f5b6:	e005      	b.n	800f5c4 <_ZN8Services11TranferDataIhEEvPT_S2_t+0x10>
		to[buffer_index] = from[buffer_index];
 800f5b8:	f811 c000 	ldrb.w	ip, [r1, r0]
 800f5bc:	f802 c000 	strb.w	ip, [r2, r0]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800f5c0:	3001      	adds	r0, #1
 800f5c2:	b280      	uxth	r0, r0
 800f5c4:	4298      	cmp	r0, r3
 800f5c6:	d3f7      	bcc.n	800f5b8 <_ZN8Services11TranferDataIhEEvPT_S2_t+0x4>
	}
}
 800f5c8:	4770      	bx	lr

0800f5ca <_ZN8Services11TranferDataImEEvPT_S2_t>:
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800f5ca:	2000      	movs	r0, #0
 800f5cc:	4298      	cmp	r0, r3
 800f5ce:	d20b      	bcs.n	800f5e8 <_ZN8Services11TranferDataImEEvPT_S2_t+0x1e>
void Services::TranferData(T* from, T* to, uint16_t length) {
 800f5d0:	b410      	push	{r4}
		to[buffer_index] = from[buffer_index];
 800f5d2:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800f5d6:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800f5da:	3001      	adds	r0, #1
 800f5dc:	b280      	uxth	r0, r0
 800f5de:	4298      	cmp	r0, r3
 800f5e0:	d3f7      	bcc.n	800f5d2 <_ZN8Services11TranferDataImEEvPT_S2_t+0x8>
}
 800f5e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5e6:	4770      	bx	lr
 800f5e8:	4770      	bx	lr

0800f5ea <_ZN8Services11TranferDataIfEEvPT_S2_t>:
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800f5ea:	2000      	movs	r0, #0
 800f5ec:	4298      	cmp	r0, r3
 800f5ee:	d20e      	bcs.n	800f60e <_ZN8Services11TranferDataIfEEvPT_S2_t+0x24>
void Services::TranferData(T* from, T* to, uint16_t length) {
 800f5f0:	b500      	push	{lr}
		to[buffer_index] = from[buffer_index];
 800f5f2:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 800f5f6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800f5fa:	f8de e000 	ldr.w	lr, [lr]
 800f5fe:	f8cc e000 	str.w	lr, [ip]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 800f602:	3001      	adds	r0, #1
 800f604:	b280      	uxth	r0, r0
 800f606:	4298      	cmp	r0, r3
 800f608:	d3f3      	bcc.n	800f5f2 <_ZN8Services11TranferDataIfEEvPT_S2_t+0x8>
}
 800f60a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f60e:	4770      	bx	lr

0800f610 <_ZN8Services11ReceiveReadIhEEv20ServiceConfigurationPT_>:
void Services::ReceiveRead(ServiceConfiguration information, T* data) {//Register remote_register, uint16_t length, uint8_t interface, uint8_t address, T* data) {
 800f610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f612:	b08b      	sub	sp, #44	; 0x2c
 800f614:	4605      	mov	r5, r0
 800f616:	a805      	add	r0, sp, #20
 800f618:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800f61c:	9e10      	ldr	r6, [sp, #64]	; 0x40
	bool success = true;
 800f61e:	2301      	movs	r3, #1
 800f620:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	uint8_t start_index = 0;
 800f624:	2100      	movs	r1, #0
 800f626:	e013      	b.n	800f650 <_ZN8Services11ReceiveReadIhEEv20ServiceConfigurationPT_+0x40>
			TranferData<uint32_t>((uint32_t*) data, &buffer_uint32[index][0], information.length);
 800f628:	02a2      	lsls	r2, r4, #10
 800f62a:	f502 720e 	add.w	r2, r2, #568	; 0x238
 800f62e:	463b      	mov	r3, r7
 800f630:	442a      	add	r2, r5
 800f632:	4631      	mov	r1, r6
 800f634:	4628      	mov	r0, r5
 800f636:	f7ff ffc8 	bl	800f5ca <_ZN8Services11TranferDataImEEvPT_S2_t>
		services[index].reception_flag = true;
 800f63a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f63e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800f642:	2201      	movs	r2, #1
 800f644:	725a      	strb	r2, [r3, #9]
		osSemaphoreRelease(ServiceSemaphore);
 800f646:	6828      	ldr	r0, [r5, #0]
 800f648:	f7fd f96a 	bl	800c920 <osSemaphoreRelease>
		start_index = index + 1;
 800f64c:	1c61      	adds	r1, r4, #1
 800f64e:	b2c9      	uxtb	r1, r1
	while (success) {
 800f650:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800f654:	2b00      	cmp	r3, #0
 800f656:	d044      	beq.n	800f6e2 <_ZN8Services11ReceiveReadIhEEv20ServiceConfigurationPT_+0xd2>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);//uint8_t index = FindQueueIndex(remote_register, ServiceInterface{.interface=interface, .address=address}, READ, &success);
 800f658:	f10d 0327 	add.w	r3, sp, #39	; 0x27
 800f65c:	9302      	str	r3, [sp, #8]
 800f65e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f662:	9301      	str	r3, [sp, #4]
 800f664:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800f668:	f8ad 3000 	strh.w	r3, [sp]
 800f66c:	ab05      	add	r3, sp, #20
 800f66e:	cb0c      	ldmia	r3, {r2, r3}
 800f670:	4628      	mov	r0, r5
 800f672:	f00b f8eb 	bl	801a84c <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
 800f676:	4604      	mov	r4, r0
		if (not success) return;
 800f678:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800f67c:	b38b      	cbz	r3, 800f6e2 <_ZN8Services11ReceiveReadIhEEv20ServiceConfigurationPT_+0xd2>
		if (information.length > ACTION_BUFFER_SIZE) return;
 800f67e:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 800f682:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800f686:	d82c      	bhi.n	800f6e2 <_ZN8Services11ReceiveReadIhEEv20ServiceConfigurationPT_+0xd2>
		leds->CommunicationLED(information.interface.interface);
 800f688:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
 800f68c:	f89d 101c 	ldrb.w	r1, [sp, #28]
 800f690:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 800f694:	f007 f851 	bl	801673a <_ZN4LEDS16CommunicationLEDEh>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 800f698:	f04f 31ff 	mov.w	r1, #4294967295
 800f69c:	6828      	ldr	r0, [r5, #0]
 800f69e:	f7fd f90b 	bl	800c8b8 <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 800f6a2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f6a6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800f6aa:	821f      	strh	r7, [r3, #16]
		switch (information.register_.type) {
 800f6ac:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f6b0:	2b02      	cmp	r3, #2
 800f6b2:	d0b9      	beq.n	800f628 <_ZN8Services11ReceiveReadIhEEv20ServiceConfigurationPT_+0x18>
 800f6b4:	2b08      	cmp	r3, #8
 800f6b6:	d00a      	beq.n	800f6ce <_ZN8Services11ReceiveReadIhEEv20ServiceConfigurationPT_+0xbe>
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d1be      	bne.n	800f63a <_ZN8Services11ReceiveReadIhEEv20ServiceConfigurationPT_+0x2a>
			TranferData<uint8_t>((uint8_t*) data, &buffer_uint8[index][0], information.length);
 800f6bc:	0222      	lsls	r2, r4, #8
 800f6be:	3238      	adds	r2, #56	; 0x38
 800f6c0:	463b      	mov	r3, r7
 800f6c2:	442a      	add	r2, r5
 800f6c4:	4631      	mov	r1, r6
 800f6c6:	4628      	mov	r0, r5
 800f6c8:	f7ff ff74 	bl	800f5b4 <_ZN8Services11TranferDataIhEEvPT_S2_t>
			break;
 800f6cc:	e7b5      	b.n	800f63a <_ZN8Services11ReceiveReadIhEEv20ServiceConfigurationPT_+0x2a>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 800f6ce:	02a2      	lsls	r2, r4, #10
 800f6d0:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 800f6d4:	463b      	mov	r3, r7
 800f6d6:	442a      	add	r2, r5
 800f6d8:	4631      	mov	r1, r6
 800f6da:	4628      	mov	r0, r5
 800f6dc:	f7ff ff85 	bl	800f5ea <_ZN8Services11TranferDataIfEEvPT_S2_t>
			break;
 800f6e0:	e7ab      	b.n	800f63a <_ZN8Services11ReceiveReadIhEEv20ServiceConfigurationPT_+0x2a>
}
 800f6e2:	b00b      	add	sp, #44	; 0x2c
 800f6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f6e6 <_ZN8Services11ReceiveReadImEEv20ServiceConfigurationPT_>:
void Services::ReceiveRead(ServiceConfiguration information, T* data) {//Register remote_register, uint16_t length, uint8_t interface, uint8_t address, T* data) {
 800f6e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6e8:	b08b      	sub	sp, #44	; 0x2c
 800f6ea:	4605      	mov	r5, r0
 800f6ec:	a805      	add	r0, sp, #20
 800f6ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800f6f2:	9e10      	ldr	r6, [sp, #64]	; 0x40
	bool success = true;
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	uint8_t start_index = 0;
 800f6fa:	2100      	movs	r1, #0
 800f6fc:	e013      	b.n	800f726 <_ZN8Services11ReceiveReadImEEv20ServiceConfigurationPT_+0x40>
			TranferData<uint32_t>((uint32_t*) data, &buffer_uint32[index][0], information.length);
 800f6fe:	02a2      	lsls	r2, r4, #10
 800f700:	f502 720e 	add.w	r2, r2, #568	; 0x238
 800f704:	463b      	mov	r3, r7
 800f706:	442a      	add	r2, r5
 800f708:	4631      	mov	r1, r6
 800f70a:	4628      	mov	r0, r5
 800f70c:	f7ff ff5d 	bl	800f5ca <_ZN8Services11TranferDataImEEvPT_S2_t>
		services[index].reception_flag = true;
 800f710:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f714:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800f718:	2201      	movs	r2, #1
 800f71a:	725a      	strb	r2, [r3, #9]
		osSemaphoreRelease(ServiceSemaphore);
 800f71c:	6828      	ldr	r0, [r5, #0]
 800f71e:	f7fd f8ff 	bl	800c920 <osSemaphoreRelease>
		start_index = index + 1;
 800f722:	1c61      	adds	r1, r4, #1
 800f724:	b2c9      	uxtb	r1, r1
	while (success) {
 800f726:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d044      	beq.n	800f7b8 <_ZN8Services11ReceiveReadImEEv20ServiceConfigurationPT_+0xd2>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);//uint8_t index = FindQueueIndex(remote_register, ServiceInterface{.interface=interface, .address=address}, READ, &success);
 800f72e:	f10d 0327 	add.w	r3, sp, #39	; 0x27
 800f732:	9302      	str	r3, [sp, #8]
 800f734:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f738:	9301      	str	r3, [sp, #4]
 800f73a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800f73e:	f8ad 3000 	strh.w	r3, [sp]
 800f742:	ab05      	add	r3, sp, #20
 800f744:	cb0c      	ldmia	r3, {r2, r3}
 800f746:	4628      	mov	r0, r5
 800f748:	f00b f880 	bl	801a84c <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
 800f74c:	4604      	mov	r4, r0
		if (not success) return;
 800f74e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800f752:	b38b      	cbz	r3, 800f7b8 <_ZN8Services11ReceiveReadImEEv20ServiceConfigurationPT_+0xd2>
		if (information.length > ACTION_BUFFER_SIZE) return;
 800f754:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 800f758:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800f75c:	d82c      	bhi.n	800f7b8 <_ZN8Services11ReceiveReadImEEv20ServiceConfigurationPT_+0xd2>
		leds->CommunicationLED(information.interface.interface);
 800f75e:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
 800f762:	f89d 101c 	ldrb.w	r1, [sp, #28]
 800f766:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 800f76a:	f006 ffe6 	bl	801673a <_ZN4LEDS16CommunicationLEDEh>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 800f76e:	f04f 31ff 	mov.w	r1, #4294967295
 800f772:	6828      	ldr	r0, [r5, #0]
 800f774:	f7fd f8a0 	bl	800c8b8 <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 800f778:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f77c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800f780:	821f      	strh	r7, [r3, #16]
		switch (information.register_.type) {
 800f782:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f786:	2b02      	cmp	r3, #2
 800f788:	d0b9      	beq.n	800f6fe <_ZN8Services11ReceiveReadImEEv20ServiceConfigurationPT_+0x18>
 800f78a:	2b08      	cmp	r3, #8
 800f78c:	d00a      	beq.n	800f7a4 <_ZN8Services11ReceiveReadImEEv20ServiceConfigurationPT_+0xbe>
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d1be      	bne.n	800f710 <_ZN8Services11ReceiveReadImEEv20ServiceConfigurationPT_+0x2a>
			TranferData<uint8_t>((uint8_t*) data, &buffer_uint8[index][0], information.length);
 800f792:	0222      	lsls	r2, r4, #8
 800f794:	3238      	adds	r2, #56	; 0x38
 800f796:	463b      	mov	r3, r7
 800f798:	442a      	add	r2, r5
 800f79a:	4631      	mov	r1, r6
 800f79c:	4628      	mov	r0, r5
 800f79e:	f7ff ff09 	bl	800f5b4 <_ZN8Services11TranferDataIhEEvPT_S2_t>
			break;
 800f7a2:	e7b5      	b.n	800f710 <_ZN8Services11ReceiveReadImEEv20ServiceConfigurationPT_+0x2a>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 800f7a4:	02a2      	lsls	r2, r4, #10
 800f7a6:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 800f7aa:	463b      	mov	r3, r7
 800f7ac:	442a      	add	r2, r5
 800f7ae:	4631      	mov	r1, r6
 800f7b0:	4628      	mov	r0, r5
 800f7b2:	f7ff ff1a 	bl	800f5ea <_ZN8Services11TranferDataIfEEvPT_S2_t>
			break;
 800f7b6:	e7ab      	b.n	800f710 <_ZN8Services11ReceiveReadImEEv20ServiceConfigurationPT_+0x2a>
}
 800f7b8:	b00b      	add	sp, #44	; 0x2c
 800f7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f7bc <_ZN8Services11ReceiveReadIfEEv20ServiceConfigurationPT_>:
void Services::ReceiveRead(ServiceConfiguration information, T* data) {//Register remote_register, uint16_t length, uint8_t interface, uint8_t address, T* data) {
 800f7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7be:	b08b      	sub	sp, #44	; 0x2c
 800f7c0:	4605      	mov	r5, r0
 800f7c2:	a805      	add	r0, sp, #20
 800f7c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800f7c8:	9e10      	ldr	r6, [sp, #64]	; 0x40
	bool success = true;
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	uint8_t start_index = 0;
 800f7d0:	2100      	movs	r1, #0
 800f7d2:	e013      	b.n	800f7fc <_ZN8Services11ReceiveReadIfEEv20ServiceConfigurationPT_+0x40>
			TranferData<uint32_t>((uint32_t*) data, &buffer_uint32[index][0], information.length);
 800f7d4:	02a2      	lsls	r2, r4, #10
 800f7d6:	f502 720e 	add.w	r2, r2, #568	; 0x238
 800f7da:	463b      	mov	r3, r7
 800f7dc:	442a      	add	r2, r5
 800f7de:	4631      	mov	r1, r6
 800f7e0:	4628      	mov	r0, r5
 800f7e2:	f7ff fef2 	bl	800f5ca <_ZN8Services11TranferDataImEEvPT_S2_t>
		services[index].reception_flag = true;
 800f7e6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f7ea:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800f7ee:	2201      	movs	r2, #1
 800f7f0:	725a      	strb	r2, [r3, #9]
		osSemaphoreRelease(ServiceSemaphore);
 800f7f2:	6828      	ldr	r0, [r5, #0]
 800f7f4:	f7fd f894 	bl	800c920 <osSemaphoreRelease>
		start_index = index + 1;
 800f7f8:	1c61      	adds	r1, r4, #1
 800f7fa:	b2c9      	uxtb	r1, r1
	while (success) {
 800f7fc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800f800:	2b00      	cmp	r3, #0
 800f802:	d044      	beq.n	800f88e <_ZN8Services11ReceiveReadIfEEv20ServiceConfigurationPT_+0xd2>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);//uint8_t index = FindQueueIndex(remote_register, ServiceInterface{.interface=interface, .address=address}, READ, &success);
 800f804:	f10d 0327 	add.w	r3, sp, #39	; 0x27
 800f808:	9302      	str	r3, [sp, #8]
 800f80a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f80e:	9301      	str	r3, [sp, #4]
 800f810:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800f814:	f8ad 3000 	strh.w	r3, [sp]
 800f818:	ab05      	add	r3, sp, #20
 800f81a:	cb0c      	ldmia	r3, {r2, r3}
 800f81c:	4628      	mov	r0, r5
 800f81e:	f00b f815 	bl	801a84c <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
 800f822:	4604      	mov	r4, r0
		if (not success) return;
 800f824:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800f828:	b38b      	cbz	r3, 800f88e <_ZN8Services11ReceiveReadIfEEv20ServiceConfigurationPT_+0xd2>
		if (information.length > ACTION_BUFFER_SIZE) return;
 800f82a:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 800f82e:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800f832:	d82c      	bhi.n	800f88e <_ZN8Services11ReceiveReadIfEEv20ServiceConfigurationPT_+0xd2>
		leds->CommunicationLED(information.interface.interface);
 800f834:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
 800f838:	f89d 101c 	ldrb.w	r1, [sp, #28]
 800f83c:	f8d3 0240 	ldr.w	r0, [r3, #576]	; 0x240
 800f840:	f006 ff7b 	bl	801673a <_ZN4LEDS16CommunicationLEDEh>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 800f844:	f04f 31ff 	mov.w	r1, #4294967295
 800f848:	6828      	ldr	r0, [r5, #0]
 800f84a:	f7fd f835 	bl	800c8b8 <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 800f84e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f852:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800f856:	821f      	strh	r7, [r3, #16]
		switch (information.register_.type) {
 800f858:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f85c:	2b02      	cmp	r3, #2
 800f85e:	d0b9      	beq.n	800f7d4 <_ZN8Services11ReceiveReadIfEEv20ServiceConfigurationPT_+0x18>
 800f860:	2b08      	cmp	r3, #8
 800f862:	d00a      	beq.n	800f87a <_ZN8Services11ReceiveReadIfEEv20ServiceConfigurationPT_+0xbe>
 800f864:	2b00      	cmp	r3, #0
 800f866:	d1be      	bne.n	800f7e6 <_ZN8Services11ReceiveReadIfEEv20ServiceConfigurationPT_+0x2a>
			TranferData<uint8_t>((uint8_t*) data, &buffer_uint8[index][0], information.length);
 800f868:	0222      	lsls	r2, r4, #8
 800f86a:	3238      	adds	r2, #56	; 0x38
 800f86c:	463b      	mov	r3, r7
 800f86e:	442a      	add	r2, r5
 800f870:	4631      	mov	r1, r6
 800f872:	4628      	mov	r0, r5
 800f874:	f7ff fe9e 	bl	800f5b4 <_ZN8Services11TranferDataIhEEvPT_S2_t>
			break;
 800f878:	e7b5      	b.n	800f7e6 <_ZN8Services11ReceiveReadIfEEv20ServiceConfigurationPT_+0x2a>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 800f87a:	02a2      	lsls	r2, r4, #10
 800f87c:	f602 2238 	addw	r2, r2, #2616	; 0xa38
 800f880:	463b      	mov	r3, r7
 800f882:	442a      	add	r2, r5
 800f884:	4631      	mov	r1, r6
 800f886:	4628      	mov	r0, r5
 800f888:	f7ff feaf 	bl	800f5ea <_ZN8Services11TranferDataIfEEvPT_S2_t>
			break;
 800f88c:	e7ab      	b.n	800f7e6 <_ZN8Services11ReceiveReadIfEEv20ServiceConfigurationPT_+0x2a>
}
 800f88e:	b00b      	add	sp, #44	; 0x2c
 800f890:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f892 <_ZSt12__niter_baseIP13MessageHeaderSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    { return __it.base(); }
 800f892:	4770      	bx	lr

0800f894 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 800f894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f898:	b086      	sub	sp, #24
 800f89a:	4680      	mov	r8, r0
 800f89c:	468a      	mov	sl, r1
      { return __normal_iterator(_M_current + __n); }
 800f89e:	f101 0014 	add.w	r0, r1, #20
      : _M_current(__i) { }
 800f8a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
      if (__position + 1 != end())
 800f8a6:	4285      	cmp	r5, r0
 800f8a8:	d051      	beq.n	800f94e <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0xba>
      return std::__niter_wrap(__result,
 800f8aa:	f7ff fff2 	bl	800f892 <_ZSt12__niter_baseIP13MessageHeaderSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800f8ae:	4604      	mov	r4, r0
 800f8b0:	4628      	mov	r0, r5
 800f8b2:	f7ff ffee 	bl	800f892 <_ZSt12__niter_baseIP13MessageHeaderSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800f8b6:	4606      	mov	r6, r0
 800f8b8:	4650      	mov	r0, sl
 800f8ba:	f7ff ffea 	bl	800f892 <_ZSt12__niter_baseIP13MessageHeaderSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800f8be:	4605      	mov	r5, r0
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800f8c0:	1b36      	subs	r6, r6, r4
 800f8c2:	10b6      	asrs	r6, r6, #2
 800f8c4:	4b2b      	ldr	r3, [pc, #172]	; (800f974 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0xe0>)
 800f8c6:	fb03 f606 	mul.w	r6, r3, r6
 800f8ca:	e006      	b.n	800f8da <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x46>
struct MessageHeader {
 800f8cc:	7c23      	ldrb	r3, [r4, #16]
 800f8ce:	742b      	strb	r3, [r5, #16]
 800f8d0:	7c63      	ldrb	r3, [r4, #17]
 800f8d2:	746b      	strb	r3, [r5, #17]
	      ++__first;
 800f8d4:	3414      	adds	r4, #20
	      ++__result;
 800f8d6:	3514      	adds	r5, #20
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800f8d8:	3e01      	subs	r6, #1
 800f8da:	2e00      	cmp	r6, #0
 800f8dc:	dd34      	ble.n	800f948 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0xb4>
 800f8de:	4622      	mov	r2, r4
 800f8e0:	f812 3b04 	ldrb.w	r3, [r2], #4
 800f8e4:	46ac      	mov	ip, r5
 800f8e6:	f80c 3b04 	strb.w	r3, [ip], #4
	: _M_start(), _M_finish(), _M_end_of_storage()
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	9300      	str	r3, [sp, #0]
 800f8ee:	9301      	str	r3, [sp, #4]
 800f8f0:	9302      	str	r3, [sp, #8]
 800f8f2:	9303      	str	r3, [sp, #12]
 800f8f4:	9304      	str	r3, [sp, #16]
 800f8f6:	9305      	str	r3, [sp, #20]
	  _M_start = __x._M_start;
 800f8f8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800f8fc:	f8cd 900c 	str.w	r9, [sp, #12]
	  _M_finish = __x._M_finish;
 800f900:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f904:	9104      	str	r1, [sp, #16]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f906:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800f90a:	9005      	str	r0, [sp, #20]
	  _M_start = __x._M_start;
 800f90c:	6867      	ldr	r7, [r4, #4]
 800f90e:	606f      	str	r7, [r5, #4]
	  _M_finish = __x._M_finish;
 800f910:	6857      	ldr	r7, [r2, #4]
 800f912:	f8cc 7004 	str.w	r7, [ip, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f916:	6897      	ldr	r7, [r2, #8]
 800f918:	f8cc 7008 	str.w	r7, [ip, #8]
	  _M_start = __x._M_start;
 800f91c:	f8c4 9004 	str.w	r9, [r4, #4]
	  _M_finish = __x._M_finish;
 800f920:	6051      	str	r1, [r2, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f922:	6090      	str	r0, [r2, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800f924:	9303      	str	r3, [sp, #12]
 800f926:	9304      	str	r3, [sp, #16]
 800f928:	9305      	str	r3, [sp, #20]
	  _M_start = __x._M_start;
 800f92a:	6860      	ldr	r0, [r4, #4]
 800f92c:	9000      	str	r0, [sp, #0]
	  _M_finish = __x._M_finish;
 800f92e:	6851      	ldr	r1, [r2, #4]
 800f930:	9101      	str	r1, [sp, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f932:	6891      	ldr	r1, [r2, #8]
 800f934:	9102      	str	r1, [sp, #8]
	  _M_start = __x._M_start;
 800f936:	6063      	str	r3, [r4, #4]
	  _M_finish = __x._M_finish;
 800f938:	6053      	str	r3, [r2, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800f93a:	6093      	str	r3, [r2, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800f93c:	1a09      	subs	r1, r1, r0
	if (__p)
 800f93e:	2800      	cmp	r0, #0
 800f940:	d0c4      	beq.n	800f8cc <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x38>
	::operator delete(__p
 800f942:	f00b fb0f 	bl	801af64 <_ZdlPvj>
 800f946:	e7c1      	b.n	800f8cc <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x38>
    { return __from + (__res - std::__niter_base(__from)); }
 800f948:	4650      	mov	r0, sl
 800f94a:	f7ff ffa2 	bl	800f892 <_ZSt12__niter_baseIP13MessageHeaderSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
      --this->_M_impl._M_finish;
 800f94e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f952:	f1a3 0214 	sub.w	r2, r3, #20
 800f956:	f8c8 2004 	str.w	r2, [r8, #4]
	_M_deallocate(_M_impl._M_start,
 800f95a:	f853 0c10 	ldr.w	r0, [r3, #-16]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800f95e:	f853 1c08 	ldr.w	r1, [r3, #-8]
 800f962:	1a09      	subs	r1, r1, r0
	if (__p)
 800f964:	b108      	cbz	r0, 800f96a <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0xd6>
 800f966:	f00b fafd 	bl	801af64 <_ZdlPvj>
    }
 800f96a:	4650      	mov	r0, sl
 800f96c:	b006      	add	sp, #24
 800f96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f972:	bf00      	nop
 800f974:	cccccccd 	.word	0xcccccccd

0800f978 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb>:

	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
}

template <typename T>
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800f978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f97c:	b0c7      	sub	sp, #284	; 0x11c
 800f97e:	4604      	mov	r4, r0
 800f980:	460f      	mov	r7, r1
 800f982:	4690      	mov	r8, r2
 800f984:	4699      	mov	r9, r3
 800f986:	f89d a140 	ldrb.w	sl, [sp, #320]	; 0x140
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f98a:	f04f 31ff 	mov.w	r1, #4294967295
 800f98e:	6800      	ldr	r0, [r0, #0]
 800f990:	f7fc ff92 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f994:	f20d 1217 	addw	r2, sp, #279	; 0x117
 800f998:	4639      	mov	r1, r7
 800f99a:	4620      	mov	r0, r4
 800f99c:	f00a f977 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800f9a0:	f89d 5117 	ldrb.w	r5, [sp, #279]	; 0x117
 800f9a4:	b1c5      	cbz	r5, 800f9d8 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x60>
 800f9a6:	4606      	mov	r6, r0
		osSemaphoreRelease(RegistersSemaphore);
		return false;
	}

	// Check template type same as register type
	uint8_t registered_type = GetTypeID<T>(&success);
 800f9a8:	f20d 1117 	addw	r1, sp, #279	; 0x117
 800f9ac:	4620      	mov	r0, r4
 800f9ae:	f7ff f955 	bl	800ec5c <_ZN9Registers9GetTypeIDIhEEhPb>
	if (!success) {
 800f9b2:	f89d 5117 	ldrb.w	r5, [sp, #279]	; 0x117
 800f9b6:	b1b5      	cbz	r5, 800f9e6 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x6e>
		osSemaphoreRelease(RegistersSemaphore);
		return false;
	}

	if (target_register->register_info.type != registered_type) {
 800f9b8:	7933      	ldrb	r3, [r6, #4]
 800f9ba:	4283      	cmp	r3, r0
 800f9bc:	d117      	bne.n	800f9ee <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x76>
		osSemaphoreRelease(RegistersSemaphore);
		return false;
	}

	if (callbacks[target_register->register_info.type] == NULL) { // check supported type
 800f9be:	3304      	adds	r3, #4
 800f9c0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800f9c4:	b1c3      	cbz	r3, 800f9f8 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x80>
		osSemaphoreRelease(RegistersSemaphore);
		return false;
	}

	if (target_register->access.read) {
 800f9c6:	f896 b009 	ldrb.w	fp, [r6, #9]
 800f9ca:	f1bb 0f00 	cmp.w	fp, #0
 800f9ce:	d118      	bne.n	800fa02 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x8a>
		}

		osSemaphoreRelease(RegistersSemaphore);
		return true;
	}
	osSemaphoreRelease(RegistersSemaphore);
 800f9d0:	6820      	ldr	r0, [r4, #0]
 800f9d2:	f7fc ffa5 	bl	800c920 <osSemaphoreRelease>
	return true;
 800f9d6:	e002      	b.n	800f9de <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x66>
		osSemaphoreRelease(RegistersSemaphore);
 800f9d8:	6820      	ldr	r0, [r4, #0]
 800f9da:	f7fc ffa1 	bl	800c920 <osSemaphoreRelease>
}
 800f9de:	4628      	mov	r0, r5
 800f9e0:	b047      	add	sp, #284	; 0x11c
 800f9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		osSemaphoreRelease(RegistersSemaphore);
 800f9e6:	6820      	ldr	r0, [r4, #0]
 800f9e8:	f7fc ff9a 	bl	800c920 <osSemaphoreRelease>
		return false;
 800f9ec:	e7f7      	b.n	800f9de <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x66>
		osSemaphoreRelease(RegistersSemaphore);
 800f9ee:	6820      	ldr	r0, [r4, #0]
 800f9f0:	f7fc ff96 	bl	800c920 <osSemaphoreRelease>
		return false;
 800f9f4:	2500      	movs	r5, #0
 800f9f6:	e7f2      	b.n	800f9de <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x66>
		osSemaphoreRelease(RegistersSemaphore);
 800f9f8:	6820      	ldr	r0, [r4, #0]
 800f9fa:	f7fc ff91 	bl	800c920 <osSemaphoreRelease>
		return false;
 800f9fe:	2500      	movs	r5, #0
 800fa00:	e7ed      	b.n	800f9de <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x66>
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 800fa02:	2200      	movs	r2, #0
 800fa04:	f88d 2117 	strb.w	r2, [sp, #279]	; 0x117
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800fa08:	8975      	ldrh	r5, [r6, #10]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fa0a:	6858      	ldr	r0, [r3, #4]
 800fa0c:	681a      	ldr	r2, [r3, #0]
 800fa0e:	1a80      	subs	r0, r0, r2
 800fa10:	1102      	asrs	r2, r0, #4
	if (__n >= this->size())
 800fa12:	ebb5 1f20 	cmp.w	r5, r0, asr #4
 800fa16:	d229      	bcs.n	800fa6c <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0xf4>
	return *(this->_M_impl._M_start + __n);
 800fa18:	6819      	ldr	r1, [r3, #0]
 800fa1a:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800fa1e:	ad01      	add	r5, sp, #4
 800fa20:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800fa22:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800fa26:	f1ba 0f00 	cmp.w	sl, #0
 800fa2a:	d006      	beq.n	800fa3a <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0xc2>
 800fa2c:	68f3      	ldr	r3, [r6, #12]
 800fa2e:	b123      	cbz	r3, 800fa3a <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0xc2>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 800fa30:	f04f 31ff 	mov.w	r1, #4294967295
 800fa34:	6818      	ldr	r0, [r3, #0]
 800fa36:	f7fc ff3f 	bl	800c8b8 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 800fa3a:	7873      	ldrb	r3, [r6, #1]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d035      	beq.n	800faac <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x134>
			if (output != NULL) {
 800fa40:	f1b8 0f00 	cmp.w	r8, #0
 800fa44:	d016      	beq.n	800fa74 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0xfc>
				*callback_output = output;
 800fa46:	2200      	movs	r2, #0
 800fa48:	f8c2 8000 	str.w	r8, [r2]
			if (callbacks.read != NULL) {
 800fa4c:	9d04      	ldr	r5, [sp, #16]
 800fa4e:	b36d      	cbz	r5, 800faac <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x134>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800fa50:	464b      	mov	r3, r9
 800fa52:	2200      	movs	r2, #0
 800fa54:	4639      	mov	r1, r7
 800fa56:	9802      	ldr	r0, [sp, #8]
 800fa58:	47a8      	blx	r5
 800fa5a:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800fa5e:	7973      	ldrb	r3, [r6, #5]
 800fa60:	b163      	cbz	r3, 800fa7c <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x104>
 800fa62:	88f2      	ldrh	r2, [r6, #6]
 800fa64:	b152      	cbz	r2, 800fa7c <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x104>
					*length = target_register->register_info.length;
 800fa66:	f8a9 2000 	strh.w	r2, [r9]
 800fa6a:	e00b      	b.n	800fa84 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x10c>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800fa6c:	4629      	mov	r1, r5
 800fa6e:	4833      	ldr	r0, [pc, #204]	; (800fb3c <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x1c4>)
 800fa70:	f00b fb45 	bl	801b0fe <_ZSt24__throw_out_of_range_fmtPKcz>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 800fa74:	2200      	movs	r2, #0
 800fa76:	ab05      	add	r3, sp, #20
 800fa78:	6013      	str	r3, [r2, #0]
 800fa7a:	e7e7      	b.n	800fa4c <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0xd4>
				} else if (!target_register->register_info.isArray) {
 800fa7c:	b913      	cbnz	r3, 800fa84 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x10c>
					*length = 1;
 800fa7e:	2301      	movs	r3, #1
 800fa80:	f8a9 3000 	strh.w	r3, [r9]
				if (*callback_output != output && output != NULL) {
 800fa84:	2200      	movs	r2, #0
 800fa86:	6813      	ldr	r3, [r2, #0]
 800fa88:	4543      	cmp	r3, r8
 800fa8a:	d00f      	beq.n	800faac <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x134>
 800fa8c:	f1b8 0f00 	cmp.w	r8, #0
 800fa90:	d00c      	beq.n	800faac <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x134>
					for (uint16_t index = 0; index < *length; index++) {
 800fa92:	4613      	mov	r3, r2
 800fa94:	f8b9 2000 	ldrh.w	r2, [r9]
 800fa98:	429a      	cmp	r2, r3
 800fa9a:	d907      	bls.n	800faac <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x134>
						output[index] = (*callback_output )[index];
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	6812      	ldr	r2, [r2, #0]
 800faa0:	5cd2      	ldrb	r2, [r2, r3]
 800faa2:	f808 2003 	strb.w	r2, [r8, r3]
					for (uint16_t index = 0; index < *length; index++) {
 800faa6:	3301      	adds	r3, #1
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	e7f3      	b.n	800fa94 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x11c>
		if (not success && target_register->mode.pointer) {
 800faac:	f89d 3117 	ldrb.w	r3, [sp, #279]	; 0x117
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d136      	bne.n	800fb22 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x1aa>
 800fab4:	7833      	ldrb	r3, [r6, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d033      	beq.n	800fb22 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x1aa>
			success = true;
 800faba:	2301      	movs	r3, #1
 800fabc:	f88d 3117 	strb.w	r3, [sp, #279]	; 0x117
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800fac0:	7972      	ldrb	r2, [r6, #5]
 800fac2:	b1aa      	cbz	r2, 800faf0 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x178>
 800fac4:	88f3      	ldrh	r3, [r6, #6]
 800fac6:	b99b      	cbnz	r3, 800faf0 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x178>
				std::vector<T>* register_vector = reinterpret_cast<std::vector<T>*>(callbacks.pointer);
 800fac8:	9901      	ldr	r1, [sp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800faca:	684a      	ldr	r2, [r1, #4]
 800facc:	6808      	ldr	r0, [r1, #0]
 800face:	1a12      	subs	r2, r2, r0
				*length = register_vector->size();
 800fad0:	f8a9 2000 	strh.w	r2, [r9]
				if (output != NULL) {
 800fad4:	f1b8 0f00 	cmp.w	r8, #0
 800fad8:	d023      	beq.n	800fb22 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x1aa>
					for (uint16_t index = 0; index < *length; index++) {
 800fada:	f8b9 2000 	ldrh.w	r2, [r9]
 800fade:	429a      	cmp	r2, r3
 800fae0:	d91f      	bls.n	800fb22 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x1aa>
	return *(this->_M_impl._M_start + __n);
 800fae2:	680a      	ldr	r2, [r1, #0]
						output[index] = (*register_vector)[index];
 800fae4:	5cd2      	ldrb	r2, [r2, r3]
 800fae6:	f808 2003 	strb.w	r2, [r8, r3]
					for (uint16_t index = 0; index < *length; index++) {
 800faea:	3301      	adds	r3, #1
 800faec:	b29b      	uxth	r3, r3
 800faee:	e7f4      	b.n	800fada <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x162>
			} else if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800faf0:	b16a      	cbz	r2, 800fb0e <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x196>
 800faf2:	88f3      	ldrh	r3, [r6, #6]
 800faf4:	b15b      	cbz	r3, 800fb0e <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x196>
				*length = target_register->register_info.length;
 800faf6:	f8a9 3000 	strh.w	r3, [r9]
				if (output != NULL) {
 800fafa:	f1b8 0f00 	cmp.w	r8, #0
 800fafe:	d010      	beq.n	800fb22 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x1aa>
					std::copy(&callbacks.pointer[0], &callbacks.pointer[target_register->register_info.length], output);
 800fb00:	9901      	ldr	r1, [sp, #4]
	  const ptrdiff_t _Num = __last - __first;
 800fb02:	88f2      	ldrh	r2, [r6, #6]
	  if (_Num)
 800fb04:	b16a      	cbz	r2, 800fb22 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x1aa>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800fb06:	4640      	mov	r0, r8
 800fb08:	f00b ff00 	bl	801b90c <memmove>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800fb0c:	e009      	b.n	800fb22 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x1aa>
				*length = 1;
 800fb0e:	2301      	movs	r3, #1
 800fb10:	f8a9 3000 	strh.w	r3, [r9]
				if (output != NULL) {
 800fb14:	f1b8 0f00 	cmp.w	r8, #0
 800fb18:	d003      	beq.n	800fb22 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x1aa>
					*output = *callbacks.pointer;
 800fb1a:	9b01      	ldr	r3, [sp, #4]
 800fb1c:	781b      	ldrb	r3, [r3, #0]
 800fb1e:	f888 3000 	strb.w	r3, [r8]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800fb22:	f1ba 0f00 	cmp.w	sl, #0
 800fb26:	d004      	beq.n	800fb32 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x1ba>
 800fb28:	68f3      	ldr	r3, [r6, #12]
 800fb2a:	b113      	cbz	r3, 800fb32 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x1ba>
			osSemaphoreRelease(*(target_register->register_semaphore));
 800fb2c:	6818      	ldr	r0, [r3, #0]
 800fb2e:	f7fc fef7 	bl	800c920 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 800fb32:	6820      	ldr	r0, [r4, #0]
 800fb34:	f7fc fef4 	bl	800c920 <osSemaphoreRelease>
		return true;
 800fb38:	465d      	mov	r5, fp
 800fb3a:	e750      	b.n	800f9de <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb+0x66>
 800fb3c:	0801bffc 	.word	0x0801bffc

0800fb40 <_ZN9Registers9GetTypeIDImEEhPb>:
uint8_t Registers::GetTypeID (bool* success) {
 800fb40:	b510      	push	{r4, lr}
 800fb42:	460c      	mov	r4, r1
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800fb44:	491a      	ldr	r1, [pc, #104]	; (800fbb0 <_ZN9Registers9GetTypeIDImEEhPb+0x70>)
 800fb46:	481b      	ldr	r0, [pc, #108]	; (800fbb4 <_ZN9Registers9GetTypeIDImEEhPb+0x74>)
 800fb48:	f00b fab8 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800fb4c:	b118      	cbz	r0, 800fb56 <_ZN9Registers9GetTypeIDImEEhPb+0x16>
 800fb4e:	2000      	movs	r0, #0
	*success = true;
 800fb50:	2301      	movs	r3, #1
 800fb52:	7023      	strb	r3, [r4, #0]
}
 800fb54:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800fb56:	4918      	ldr	r1, [pc, #96]	; (800fbb8 <_ZN9Registers9GetTypeIDImEEhPb+0x78>)
 800fb58:	4816      	ldr	r0, [pc, #88]	; (800fbb4 <_ZN9Registers9GetTypeIDImEEhPb+0x74>)
 800fb5a:	f00b faaf 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800fb5e:	b108      	cbz	r0, 800fb64 <_ZN9Registers9GetTypeIDImEEhPb+0x24>
 800fb60:	2001      	movs	r0, #1
 800fb62:	e7f5      	b.n	800fb50 <_ZN9Registers9GetTypeIDImEEhPb+0x10>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800fb64:	4813      	ldr	r0, [pc, #76]	; (800fbb4 <_ZN9Registers9GetTypeIDImEEhPb+0x74>)
 800fb66:	4601      	mov	r1, r0
 800fb68:	f00b faa8 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800fb6c:	b108      	cbz	r0, 800fb72 <_ZN9Registers9GetTypeIDImEEhPb+0x32>
 800fb6e:	2002      	movs	r0, #2
 800fb70:	e7ee      	b.n	800fb50 <_ZN9Registers9GetTypeIDImEEhPb+0x10>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800fb72:	4912      	ldr	r1, [pc, #72]	; (800fbbc <_ZN9Registers9GetTypeIDImEEhPb+0x7c>)
 800fb74:	480f      	ldr	r0, [pc, #60]	; (800fbb4 <_ZN9Registers9GetTypeIDImEEhPb+0x74>)
 800fb76:	f00b faa1 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800fb7a:	b108      	cbz	r0, 800fb80 <_ZN9Registers9GetTypeIDImEEhPb+0x40>
 800fb7c:	2003      	movs	r0, #3
 800fb7e:	e7e7      	b.n	800fb50 <_ZN9Registers9GetTypeIDImEEhPb+0x10>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800fb80:	490f      	ldr	r1, [pc, #60]	; (800fbc0 <_ZN9Registers9GetTypeIDImEEhPb+0x80>)
 800fb82:	480c      	ldr	r0, [pc, #48]	; (800fbb4 <_ZN9Registers9GetTypeIDImEEhPb+0x74>)
 800fb84:	f00b fa9a 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800fb88:	b108      	cbz	r0, 800fb8e <_ZN9Registers9GetTypeIDImEEhPb+0x4e>
 800fb8a:	2006      	movs	r0, #6
 800fb8c:	e7e0      	b.n	800fb50 <_ZN9Registers9GetTypeIDImEEhPb+0x10>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800fb8e:	490d      	ldr	r1, [pc, #52]	; (800fbc4 <_ZN9Registers9GetTypeIDImEEhPb+0x84>)
 800fb90:	4808      	ldr	r0, [pc, #32]	; (800fbb4 <_ZN9Registers9GetTypeIDImEEhPb+0x74>)
 800fb92:	f00b fa93 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800fb96:	b108      	cbz	r0, 800fb9c <_ZN9Registers9GetTypeIDImEEhPb+0x5c>
 800fb98:	2008      	movs	r0, #8
 800fb9a:	e7d9      	b.n	800fb50 <_ZN9Registers9GetTypeIDImEEhPb+0x10>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800fb9c:	490a      	ldr	r1, [pc, #40]	; (800fbc8 <_ZN9Registers9GetTypeIDImEEhPb+0x88>)
 800fb9e:	4805      	ldr	r0, [pc, #20]	; (800fbb4 <_ZN9Registers9GetTypeIDImEEhPb+0x74>)
 800fba0:	f00b fa8c 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800fba4:	b108      	cbz	r0, 800fbaa <_ZN9Registers9GetTypeIDImEEhPb+0x6a>
 800fba6:	2009      	movs	r0, #9
 800fba8:	e7d2      	b.n	800fb50 <_ZN9Registers9GetTypeIDImEEhPb+0x10>
	else {*success = false; return 0;}
 800fbaa:	7020      	strb	r0, [r4, #0]
 800fbac:	e7d2      	b.n	800fb54 <_ZN9Registers9GetTypeIDImEEhPb+0x14>
 800fbae:	bf00      	nop
 800fbb0:	0801c1bc 	.word	0x0801c1bc
 800fbb4:	0801c1a4 	.word	0x0801c1a4
 800fbb8:	0801c1b4 	.word	0x0801c1b4
 800fbbc:	0801c19c 	.word	0x0801c19c
 800fbc0:	0801c1ac 	.word	0x0801c1ac
 800fbc4:	0801c194 	.word	0x0801c194
 800fbc8:	0801c18c 	.word	0x0801c18c

0800fbcc <_ZN9Registers12ReadRegisterImEEbtPT_Ptb>:
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800fbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbd0:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 800fbd4:	4604      	mov	r4, r0
 800fbd6:	460f      	mov	r7, r1
 800fbd8:	4690      	mov	r8, r2
 800fbda:	4699      	mov	r9, r3
 800fbdc:	f89d a440 	ldrb.w	sl, [sp, #1088]	; 0x440
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800fbe0:	f04f 31ff 	mov.w	r1, #4294967295
 800fbe4:	6800      	ldr	r0, [r0, #0]
 800fbe6:	f7fc fe67 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800fbea:	f20d 4217 	addw	r2, sp, #1047	; 0x417
 800fbee:	4639      	mov	r1, r7
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	f00a f84c 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800fbf6:	f89d 5417 	ldrb.w	r5, [sp, #1047]	; 0x417
 800fbfa:	b1c5      	cbz	r5, 800fc2e <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x62>
 800fbfc:	4606      	mov	r6, r0
	uint8_t registered_type = GetTypeID<T>(&success);
 800fbfe:	f20d 4117 	addw	r1, sp, #1047	; 0x417
 800fc02:	4620      	mov	r0, r4
 800fc04:	f7ff ff9c 	bl	800fb40 <_ZN9Registers9GetTypeIDImEEhPb>
	if (!success) {
 800fc08:	f89d 5417 	ldrb.w	r5, [sp, #1047]	; 0x417
 800fc0c:	b1bd      	cbz	r5, 800fc3e <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x72>
	if (target_register->register_info.type != registered_type) {
 800fc0e:	7933      	ldrb	r3, [r6, #4]
 800fc10:	4283      	cmp	r3, r0
 800fc12:	d118      	bne.n	800fc46 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x7a>
	if (callbacks[target_register->register_info.type] == NULL) { // check supported type
 800fc14:	3304      	adds	r3, #4
 800fc16:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800fc1a:	b1cb      	cbz	r3, 800fc50 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x84>
	if (target_register->access.read) {
 800fc1c:	f896 b009 	ldrb.w	fp, [r6, #9]
 800fc20:	f1bb 0f00 	cmp.w	fp, #0
 800fc24:	d119      	bne.n	800fc5a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x8e>
	osSemaphoreRelease(RegistersSemaphore);
 800fc26:	6820      	ldr	r0, [r4, #0]
 800fc28:	f7fc fe7a 	bl	800c920 <osSemaphoreRelease>
	return true;
 800fc2c:	e002      	b.n	800fc34 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x68>
		osSemaphoreRelease(RegistersSemaphore);
 800fc2e:	6820      	ldr	r0, [r4, #0]
 800fc30:	f7fc fe76 	bl	800c920 <osSemaphoreRelease>
}
 800fc34:	4628      	mov	r0, r5
 800fc36:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 800fc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		osSemaphoreRelease(RegistersSemaphore);
 800fc3e:	6820      	ldr	r0, [r4, #0]
 800fc40:	f7fc fe6e 	bl	800c920 <osSemaphoreRelease>
		return false;
 800fc44:	e7f6      	b.n	800fc34 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x68>
		osSemaphoreRelease(RegistersSemaphore);
 800fc46:	6820      	ldr	r0, [r4, #0]
 800fc48:	f7fc fe6a 	bl	800c920 <osSemaphoreRelease>
		return false;
 800fc4c:	2500      	movs	r5, #0
 800fc4e:	e7f1      	b.n	800fc34 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x68>
		osSemaphoreRelease(RegistersSemaphore);
 800fc50:	6820      	ldr	r0, [r4, #0]
 800fc52:	f7fc fe65 	bl	800c920 <osSemaphoreRelease>
		return false;
 800fc56:	2500      	movs	r5, #0
 800fc58:	e7ec      	b.n	800fc34 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x68>
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	f88d 2417 	strb.w	r2, [sp, #1047]	; 0x417
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800fc60:	8975      	ldrh	r5, [r6, #10]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fc62:	6858      	ldr	r0, [r3, #4]
 800fc64:	681a      	ldr	r2, [r3, #0]
 800fc66:	1a80      	subs	r0, r0, r2
 800fc68:	1102      	asrs	r2, r0, #4
	if (__n >= this->size())
 800fc6a:	ebb5 1f20 	cmp.w	r5, r0, asr #4
 800fc6e:	d229      	bcs.n	800fcc4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xf8>
	return *(this->_M_impl._M_start + __n);
 800fc70:	6819      	ldr	r1, [r3, #0]
 800fc72:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800fc76:	ad01      	add	r5, sp, #4
 800fc78:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800fc7a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800fc7e:	f1ba 0f00 	cmp.w	sl, #0
 800fc82:	d006      	beq.n	800fc92 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xc6>
 800fc84:	68f3      	ldr	r3, [r6, #12]
 800fc86:	b123      	cbz	r3, 800fc92 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xc6>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 800fc88:	f04f 31ff 	mov.w	r1, #4294967295
 800fc8c:	6818      	ldr	r0, [r3, #0]
 800fc8e:	f7fc fe13 	bl	800c8b8 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 800fc92:	7873      	ldrb	r3, [r6, #1]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d036      	beq.n	800fd06 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x13a>
			if (output != NULL) {
 800fc98:	f1b8 0f00 	cmp.w	r8, #0
 800fc9c:	d016      	beq.n	800fccc <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x100>
				*callback_output = output;
 800fc9e:	2200      	movs	r2, #0
 800fca0:	f8c2 8000 	str.w	r8, [r2]
			if (callbacks.read != NULL) {
 800fca4:	9d04      	ldr	r5, [sp, #16]
 800fca6:	b375      	cbz	r5, 800fd06 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x13a>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800fca8:	464b      	mov	r3, r9
 800fcaa:	2200      	movs	r2, #0
 800fcac:	4639      	mov	r1, r7
 800fcae:	9802      	ldr	r0, [sp, #8]
 800fcb0:	47a8      	blx	r5
 800fcb2:	f88d 0417 	strb.w	r0, [sp, #1047]	; 0x417
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800fcb6:	7973      	ldrb	r3, [r6, #5]
 800fcb8:	b163      	cbz	r3, 800fcd4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x108>
 800fcba:	88f2      	ldrh	r2, [r6, #6]
 800fcbc:	b152      	cbz	r2, 800fcd4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x108>
					*length = target_register->register_info.length;
 800fcbe:	f8a9 2000 	strh.w	r2, [r9]
 800fcc2:	e00b      	b.n	800fcdc <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x110>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800fcc4:	4629      	mov	r1, r5
 800fcc6:	4837      	ldr	r0, [pc, #220]	; (800fda4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x1d8>)
 800fcc8:	f00b fa19 	bl	801b0fe <_ZSt24__throw_out_of_range_fmtPKcz>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 800fccc:	2200      	movs	r2, #0
 800fcce:	ab05      	add	r3, sp, #20
 800fcd0:	6013      	str	r3, [r2, #0]
 800fcd2:	e7e7      	b.n	800fca4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xd8>
				} else if (!target_register->register_info.isArray) {
 800fcd4:	b913      	cbnz	r3, 800fcdc <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x110>
					*length = 1;
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	f8a9 3000 	strh.w	r3, [r9]
				if (*callback_output != output && output != NULL) {
 800fcdc:	2200      	movs	r2, #0
 800fcde:	6813      	ldr	r3, [r2, #0]
 800fce0:	4543      	cmp	r3, r8
 800fce2:	d010      	beq.n	800fd06 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x13a>
 800fce4:	f1b8 0f00 	cmp.w	r8, #0
 800fce8:	d00d      	beq.n	800fd06 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x13a>
					for (uint16_t index = 0; index < *length; index++) {
 800fcea:	4613      	mov	r3, r2
 800fcec:	f8b9 2000 	ldrh.w	r2, [r9]
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	d908      	bls.n	800fd06 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x13a>
						output[index] = (*callback_output )[index];
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	6812      	ldr	r2, [r2, #0]
 800fcf8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fcfc:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
					for (uint16_t index = 0; index < *length; index++) {
 800fd00:	3301      	adds	r3, #1
 800fd02:	b29b      	uxth	r3, r3
 800fd04:	e7f2      	b.n	800fcec <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x120>
		if (not success && target_register->mode.pointer) {
 800fd06:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d13c      	bne.n	800fd88 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x1bc>
 800fd0e:	7833      	ldrb	r3, [r6, #0]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d039      	beq.n	800fd88 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x1bc>
			success = true;
 800fd14:	2301      	movs	r3, #1
 800fd16:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800fd1a:	7972      	ldrb	r2, [r6, #5]
 800fd1c:	b1ba      	cbz	r2, 800fd4e <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x182>
 800fd1e:	88f3      	ldrh	r3, [r6, #6]
 800fd20:	b9ab      	cbnz	r3, 800fd4e <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x182>
				std::vector<T>* register_vector = reinterpret_cast<std::vector<T>*>(callbacks.pointer);
 800fd22:	9901      	ldr	r1, [sp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fd24:	684a      	ldr	r2, [r1, #4]
 800fd26:	6808      	ldr	r0, [r1, #0]
 800fd28:	1a12      	subs	r2, r2, r0
 800fd2a:	1092      	asrs	r2, r2, #2
				*length = register_vector->size();
 800fd2c:	f8a9 2000 	strh.w	r2, [r9]
				if (output != NULL) {
 800fd30:	f1b8 0f00 	cmp.w	r8, #0
 800fd34:	d028      	beq.n	800fd88 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x1bc>
					for (uint16_t index = 0; index < *length; index++) {
 800fd36:	f8b9 2000 	ldrh.w	r2, [r9]
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d924      	bls.n	800fd88 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x1bc>
	return *(this->_M_impl._M_start + __n);
 800fd3e:	680a      	ldr	r2, [r1, #0]
						output[index] = (*register_vector)[index];
 800fd40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fd44:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
					for (uint16_t index = 0; index < *length; index++) {
 800fd48:	3301      	adds	r3, #1
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	e7f3      	b.n	800fd36 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x16a>
			} else if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800fd4e:	b18a      	cbz	r2, 800fd74 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x1a8>
 800fd50:	88f3      	ldrh	r3, [r6, #6]
 800fd52:	b17b      	cbz	r3, 800fd74 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x1a8>
				*length = target_register->register_info.length;
 800fd54:	f8a9 3000 	strh.w	r3, [r9]
				if (output != NULL) {
 800fd58:	f1b8 0f00 	cmp.w	r8, #0
 800fd5c:	d014      	beq.n	800fd88 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x1bc>
					std::copy(&callbacks.pointer[0], &callbacks.pointer[target_register->register_info.length], output);
 800fd5e:	9901      	ldr	r1, [sp, #4]
 800fd60:	88f3      	ldrh	r3, [r6, #6]
 800fd62:	eb01 0083 	add.w	r0, r1, r3, lsl #2
	  const ptrdiff_t _Num = __last - __first;
 800fd66:	009a      	lsls	r2, r3, #2
	  if (_Num)
 800fd68:	4281      	cmp	r1, r0
 800fd6a:	d00d      	beq.n	800fd88 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x1bc>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800fd6c:	4640      	mov	r0, r8
 800fd6e:	f00b fdcd 	bl	801b90c <memmove>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800fd72:	e009      	b.n	800fd88 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x1bc>
				*length = 1;
 800fd74:	2301      	movs	r3, #1
 800fd76:	f8a9 3000 	strh.w	r3, [r9]
				if (output != NULL) {
 800fd7a:	f1b8 0f00 	cmp.w	r8, #0
 800fd7e:	d003      	beq.n	800fd88 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x1bc>
					*output = *callbacks.pointer;
 800fd80:	9b01      	ldr	r3, [sp, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	f8c8 3000 	str.w	r3, [r8]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800fd88:	f1ba 0f00 	cmp.w	sl, #0
 800fd8c:	d004      	beq.n	800fd98 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x1cc>
 800fd8e:	68f3      	ldr	r3, [r6, #12]
 800fd90:	b113      	cbz	r3, 800fd98 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x1cc>
			osSemaphoreRelease(*(target_register->register_semaphore));
 800fd92:	6818      	ldr	r0, [r3, #0]
 800fd94:	f7fc fdc4 	bl	800c920 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 800fd98:	6820      	ldr	r0, [r4, #0]
 800fd9a:	f7fc fdc1 	bl	800c920 <osSemaphoreRelease>
		return true;
 800fd9e:	465d      	mov	r5, fp
 800fda0:	e748      	b.n	800fc34 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x68>
 800fda2:	bf00      	nop
 800fda4:	0801bffc 	.word	0x0801bffc

0800fda8 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800fda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdac:	b083      	sub	sp, #12
 800fdae:	4688      	mov	r8, r1
 800fdb0:	4616      	mov	r6, r2
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	9300      	str	r3, [sp, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fdb6:	6842      	ldr	r2, [r0, #4]
 800fdb8:	6803      	ldr	r3, [r0, #0]
 800fdba:	1ad3      	subs	r3, r2, r3
	if (max_size() - size() < __n)
 800fdbc:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
 800fdc0:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 800fdc4:	d03d      	beq.n	800fe42 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x9a>
 800fdc6:	4604      	mov	r4, r0
 800fdc8:	109d      	asrs	r5, r3, #2
	const size_type __len = size() + (std::max)(size(), __n);
 800fdca:	9501      	str	r5, [sp, #4]
      if (__a < __b)
 800fdcc:	2d00      	cmp	r5, #0
 800fdce:	d03b      	beq.n	800fe48 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xa0>
      return __a;
 800fdd0:	ab01      	add	r3, sp, #4
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	441d      	add	r5, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fdd6:	6823      	ldr	r3, [r4, #0]
 800fdd8:	1ad2      	subs	r2, r2, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800fdda:	ebb5 0fa2 	cmp.w	r5, r2, asr #2
 800fdde:	d335      	bcc.n	800fe4c <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xa4>
 800fde0:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 800fde4:	d235      	bcs.n	800fe52 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xaa>
      pointer __old_start = this->_M_impl._M_start;
 800fde6:	f8d4 9000 	ldr.w	r9, [r4]
      pointer __old_finish = this->_M_impl._M_finish;
 800fdea:	f8d4 a004 	ldr.w	sl, [r4, #4]
    { return __lhs.base() - __rhs.base(); }
 800fdee:	eba8 0b09 	sub.w	fp, r8, r9
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fdf2:	b39d      	cbz	r5, 800fe5c <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xb4>
	if (__n > this->_M_max_size())
 800fdf4:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 800fdf8:	d22e      	bcs.n	800fe58 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xb0>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800fdfa:	00a8      	lsls	r0, r5, #2
 800fdfc:	f00b f8c8 	bl	801af90 <_Znwj>
 800fe00:	4607      	mov	r7, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800fe02:	6833      	ldr	r3, [r6, #0]
 800fe04:	f847 300b 	str.w	r3, [r7, fp]
      ptrdiff_t __count = __last - __first;
 800fe08:	eba8 0609 	sub.w	r6, r8, r9
      if (__count > 0)
 800fe0c:	2e00      	cmp	r6, #0
 800fe0e:	dc27      	bgt.n	800fe60 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xb8>
      return __result + __count;
 800fe10:	443e      	add	r6, r7
	      ++__new_finish;
 800fe12:	3604      	adds	r6, #4
      ptrdiff_t __count = __last - __first;
 800fe14:	ebaa 0a08 	sub.w	sl, sl, r8
      if (__count > 0)
 800fe18:	f1ba 0f00 	cmp.w	sl, #0
 800fe1c:	dc26      	bgt.n	800fe6c <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xc4>
      return __result + __count;
 800fe1e:	4456      	add	r6, sl
		    this->_M_impl._M_end_of_storage - __old_start);
 800fe20:	68a1      	ldr	r1, [r4, #8]
 800fe22:	eba1 0109 	sub.w	r1, r1, r9
	if (__p)
 800fe26:	f1b9 0f00 	cmp.w	r9, #0
 800fe2a:	d002      	beq.n	800fe32 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x8a>
	::operator delete(__p
 800fe2c:	4648      	mov	r0, r9
 800fe2e:	f00b f899 	bl	801af64 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 800fe32:	6027      	str	r7, [r4, #0]
      this->_M_impl._M_finish = __new_finish;
 800fe34:	6066      	str	r6, [r4, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800fe36:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fe3a:	60a5      	str	r5, [r4, #8]
    }
 800fe3c:	b003      	add	sp, #12
 800fe3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_length_error(__N(__s));
 800fe42:	480d      	ldr	r0, [pc, #52]	; (800fe78 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xd0>)
 800fe44:	f00b f958 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 800fe48:	466b      	mov	r3, sp
 800fe4a:	e7c2      	b.n	800fdd2 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x2a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800fe4c:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 800fe50:	e7c9      	b.n	800fde6 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x3e>
 800fe52:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 800fe56:	e7c6      	b.n	800fde6 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x3e>
	  std::__throw_bad_alloc();
 800fe58:	f00b f948 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fe5c:	2700      	movs	r7, #0
 800fe5e:	e7d0      	b.n	800fe02 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x5a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800fe60:	4632      	mov	r2, r6
 800fe62:	4649      	mov	r1, r9
 800fe64:	4638      	mov	r0, r7
 800fe66:	f00b fd51 	bl	801b90c <memmove>
 800fe6a:	e7d1      	b.n	800fe10 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x68>
 800fe6c:	4652      	mov	r2, sl
 800fe6e:	4641      	mov	r1, r8
 800fe70:	4630      	mov	r0, r6
 800fe72:	f00b fd4b 	bl	801b90c <memmove>
 800fe76:	e7d2      	b.n	800fe1e <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x76>
 800fe78:	0801bde4 	.word	0x0801bde4

0800fe7c <_ZN9Registers9GetTypeIDIfEEhPb>:
uint8_t Registers::GetTypeID (bool* success) {
 800fe7c:	b510      	push	{r4, lr}
 800fe7e:	460c      	mov	r4, r1
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800fe80:	491a      	ldr	r1, [pc, #104]	; (800feec <_ZN9Registers9GetTypeIDIfEEhPb+0x70>)
 800fe82:	481b      	ldr	r0, [pc, #108]	; (800fef0 <_ZN9Registers9GetTypeIDIfEEhPb+0x74>)
 800fe84:	f00b f91a 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800fe88:	b118      	cbz	r0, 800fe92 <_ZN9Registers9GetTypeIDIfEEhPb+0x16>
 800fe8a:	2000      	movs	r0, #0
	*success = true;
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	7023      	strb	r3, [r4, #0]
}
 800fe90:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800fe92:	4918      	ldr	r1, [pc, #96]	; (800fef4 <_ZN9Registers9GetTypeIDIfEEhPb+0x78>)
 800fe94:	4816      	ldr	r0, [pc, #88]	; (800fef0 <_ZN9Registers9GetTypeIDIfEEhPb+0x74>)
 800fe96:	f00b f911 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800fe9a:	b108      	cbz	r0, 800fea0 <_ZN9Registers9GetTypeIDIfEEhPb+0x24>
 800fe9c:	2001      	movs	r0, #1
 800fe9e:	e7f5      	b.n	800fe8c <_ZN9Registers9GetTypeIDIfEEhPb+0x10>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800fea0:	4915      	ldr	r1, [pc, #84]	; (800fef8 <_ZN9Registers9GetTypeIDIfEEhPb+0x7c>)
 800fea2:	4813      	ldr	r0, [pc, #76]	; (800fef0 <_ZN9Registers9GetTypeIDIfEEhPb+0x74>)
 800fea4:	f00b f90a 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800fea8:	b108      	cbz	r0, 800feae <_ZN9Registers9GetTypeIDIfEEhPb+0x32>
 800feaa:	2002      	movs	r0, #2
 800feac:	e7ee      	b.n	800fe8c <_ZN9Registers9GetTypeIDIfEEhPb+0x10>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800feae:	4913      	ldr	r1, [pc, #76]	; (800fefc <_ZN9Registers9GetTypeIDIfEEhPb+0x80>)
 800feb0:	480f      	ldr	r0, [pc, #60]	; (800fef0 <_ZN9Registers9GetTypeIDIfEEhPb+0x74>)
 800feb2:	f00b f903 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800feb6:	b108      	cbz	r0, 800febc <_ZN9Registers9GetTypeIDIfEEhPb+0x40>
 800feb8:	2003      	movs	r0, #3
 800feba:	e7e7      	b.n	800fe8c <_ZN9Registers9GetTypeIDIfEEhPb+0x10>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800febc:	4910      	ldr	r1, [pc, #64]	; (800ff00 <_ZN9Registers9GetTypeIDIfEEhPb+0x84>)
 800febe:	480c      	ldr	r0, [pc, #48]	; (800fef0 <_ZN9Registers9GetTypeIDIfEEhPb+0x74>)
 800fec0:	f00b f8fc 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800fec4:	b108      	cbz	r0, 800feca <_ZN9Registers9GetTypeIDIfEEhPb+0x4e>
 800fec6:	2006      	movs	r0, #6
 800fec8:	e7e0      	b.n	800fe8c <_ZN9Registers9GetTypeIDIfEEhPb+0x10>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800feca:	4809      	ldr	r0, [pc, #36]	; (800fef0 <_ZN9Registers9GetTypeIDIfEEhPb+0x74>)
 800fecc:	4601      	mov	r1, r0
 800fece:	f00b f8f5 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800fed2:	b108      	cbz	r0, 800fed8 <_ZN9Registers9GetTypeIDIfEEhPb+0x5c>
 800fed4:	2008      	movs	r0, #8
 800fed6:	e7d9      	b.n	800fe8c <_ZN9Registers9GetTypeIDIfEEhPb+0x10>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800fed8:	490a      	ldr	r1, [pc, #40]	; (800ff04 <_ZN9Registers9GetTypeIDIfEEhPb+0x88>)
 800feda:	4805      	ldr	r0, [pc, #20]	; (800fef0 <_ZN9Registers9GetTypeIDIfEEhPb+0x74>)
 800fedc:	f00b f8ee 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 800fee0:	b108      	cbz	r0, 800fee6 <_ZN9Registers9GetTypeIDIfEEhPb+0x6a>
 800fee2:	2009      	movs	r0, #9
 800fee4:	e7d2      	b.n	800fe8c <_ZN9Registers9GetTypeIDIfEEhPb+0x10>
	else {*success = false; return 0;}
 800fee6:	7020      	strb	r0, [r4, #0]
 800fee8:	e7d2      	b.n	800fe90 <_ZN9Registers9GetTypeIDIfEEhPb+0x14>
 800feea:	bf00      	nop
 800feec:	0801c1bc 	.word	0x0801c1bc
 800fef0:	0801c194 	.word	0x0801c194
 800fef4:	0801c1b4 	.word	0x0801c1b4
 800fef8:	0801c1a4 	.word	0x0801c1a4
 800fefc:	0801c19c 	.word	0x0801c19c
 800ff00:	0801c1ac 	.word	0x0801c1ac
 800ff04:	0801c18c 	.word	0x0801c18c

0800ff08 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb>:
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800ff08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff0c:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 800ff10:	4604      	mov	r4, r0
 800ff12:	460f      	mov	r7, r1
 800ff14:	4690      	mov	r8, r2
 800ff16:	4699      	mov	r9, r3
 800ff18:	f89d a440 	ldrb.w	sl, [sp, #1088]	; 0x440
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800ff1c:	f04f 31ff 	mov.w	r1, #4294967295
 800ff20:	6800      	ldr	r0, [r0, #0]
 800ff22:	f7fc fcc9 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800ff26:	f20d 4217 	addw	r2, sp, #1047	; 0x417
 800ff2a:	4639      	mov	r1, r7
 800ff2c:	4620      	mov	r0, r4
 800ff2e:	f009 feae 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800ff32:	f89d 5417 	ldrb.w	r5, [sp, #1047]	; 0x417
 800ff36:	b1c5      	cbz	r5, 800ff6a <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x62>
 800ff38:	4606      	mov	r6, r0
	uint8_t registered_type = GetTypeID<T>(&success);
 800ff3a:	f20d 4117 	addw	r1, sp, #1047	; 0x417
 800ff3e:	4620      	mov	r0, r4
 800ff40:	f7ff ff9c 	bl	800fe7c <_ZN9Registers9GetTypeIDIfEEhPb>
	if (!success) {
 800ff44:	f89d 5417 	ldrb.w	r5, [sp, #1047]	; 0x417
 800ff48:	b1bd      	cbz	r5, 800ff7a <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x72>
	if (target_register->register_info.type != registered_type) {
 800ff4a:	7933      	ldrb	r3, [r6, #4]
 800ff4c:	4283      	cmp	r3, r0
 800ff4e:	d118      	bne.n	800ff82 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x7a>
	if (callbacks[target_register->register_info.type] == NULL) { // check supported type
 800ff50:	3304      	adds	r3, #4
 800ff52:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ff56:	b1cb      	cbz	r3, 800ff8c <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x84>
	if (target_register->access.read) {
 800ff58:	f896 b009 	ldrb.w	fp, [r6, #9]
 800ff5c:	f1bb 0f00 	cmp.w	fp, #0
 800ff60:	d119      	bne.n	800ff96 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x8e>
	osSemaphoreRelease(RegistersSemaphore);
 800ff62:	6820      	ldr	r0, [r4, #0]
 800ff64:	f7fc fcdc 	bl	800c920 <osSemaphoreRelease>
	return true;
 800ff68:	e002      	b.n	800ff70 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x68>
		osSemaphoreRelease(RegistersSemaphore);
 800ff6a:	6820      	ldr	r0, [r4, #0]
 800ff6c:	f7fc fcd8 	bl	800c920 <osSemaphoreRelease>
}
 800ff70:	4628      	mov	r0, r5
 800ff72:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
 800ff76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		osSemaphoreRelease(RegistersSemaphore);
 800ff7a:	6820      	ldr	r0, [r4, #0]
 800ff7c:	f7fc fcd0 	bl	800c920 <osSemaphoreRelease>
		return false;
 800ff80:	e7f6      	b.n	800ff70 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x68>
		osSemaphoreRelease(RegistersSemaphore);
 800ff82:	6820      	ldr	r0, [r4, #0]
 800ff84:	f7fc fccc 	bl	800c920 <osSemaphoreRelease>
		return false;
 800ff88:	2500      	movs	r5, #0
 800ff8a:	e7f1      	b.n	800ff70 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x68>
		osSemaphoreRelease(RegistersSemaphore);
 800ff8c:	6820      	ldr	r0, [r4, #0]
 800ff8e:	f7fc fcc7 	bl	800c920 <osSemaphoreRelease>
		return false;
 800ff92:	2500      	movs	r5, #0
 800ff94:	e7ec      	b.n	800ff70 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x68>
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 800ff96:	2200      	movs	r2, #0
 800ff98:	f88d 2417 	strb.w	r2, [sp, #1047]	; 0x417
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800ff9c:	8975      	ldrh	r5, [r6, #10]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ff9e:	6858      	ldr	r0, [r3, #4]
 800ffa0:	681a      	ldr	r2, [r3, #0]
 800ffa2:	1a80      	subs	r0, r0, r2
 800ffa4:	1102      	asrs	r2, r0, #4
	if (__n >= this->size())
 800ffa6:	ebb5 1f20 	cmp.w	r5, r0, asr #4
 800ffaa:	d229      	bcs.n	8010000 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xf8>
	return *(this->_M_impl._M_start + __n);
 800ffac:	6819      	ldr	r1, [r3, #0]
 800ffae:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800ffb2:	ad01      	add	r5, sp, #4
 800ffb4:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800ffb6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800ffba:	f1ba 0f00 	cmp.w	sl, #0
 800ffbe:	d006      	beq.n	800ffce <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xc6>
 800ffc0:	68f3      	ldr	r3, [r6, #12]
 800ffc2:	b123      	cbz	r3, 800ffce <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xc6>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 800ffc4:	f04f 31ff 	mov.w	r1, #4294967295
 800ffc8:	6818      	ldr	r0, [r3, #0]
 800ffca:	f7fc fc75 	bl	800c8b8 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 800ffce:	7873      	ldrb	r3, [r6, #1]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d038      	beq.n	8010046 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x13e>
			if (output != NULL) {
 800ffd4:	f1b8 0f00 	cmp.w	r8, #0
 800ffd8:	d016      	beq.n	8010008 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x100>
				*callback_output = output;
 800ffda:	2200      	movs	r2, #0
 800ffdc:	f8c2 8000 	str.w	r8, [r2]
			if (callbacks.read != NULL) {
 800ffe0:	9d04      	ldr	r5, [sp, #16]
 800ffe2:	b385      	cbz	r5, 8010046 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x13e>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800ffe4:	464b      	mov	r3, r9
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	4639      	mov	r1, r7
 800ffea:	9802      	ldr	r0, [sp, #8]
 800ffec:	47a8      	blx	r5
 800ffee:	f88d 0417 	strb.w	r0, [sp, #1047]	; 0x417
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800fff2:	7973      	ldrb	r3, [r6, #5]
 800fff4:	b163      	cbz	r3, 8010010 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x108>
 800fff6:	88f2      	ldrh	r2, [r6, #6]
 800fff8:	b152      	cbz	r2, 8010010 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x108>
					*length = target_register->register_info.length;
 800fffa:	f8a9 2000 	strh.w	r2, [r9]
 800fffe:	e00b      	b.n	8010018 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x110>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8010000:	4629      	mov	r1, r5
 8010002:	4839      	ldr	r0, [pc, #228]	; (80100e8 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x1e0>)
 8010004:	f00b f87b 	bl	801b0fe <_ZSt24__throw_out_of_range_fmtPKcz>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 8010008:	2200      	movs	r2, #0
 801000a:	ab05      	add	r3, sp, #20
 801000c:	6013      	str	r3, [r2, #0]
 801000e:	e7e7      	b.n	800ffe0 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xd8>
				} else if (!target_register->register_info.isArray) {
 8010010:	b913      	cbnz	r3, 8010018 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x110>
					*length = 1;
 8010012:	2301      	movs	r3, #1
 8010014:	f8a9 3000 	strh.w	r3, [r9]
				if (*callback_output != output && output != NULL) {
 8010018:	2200      	movs	r2, #0
 801001a:	6813      	ldr	r3, [r2, #0]
 801001c:	4543      	cmp	r3, r8
 801001e:	d012      	beq.n	8010046 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x13e>
 8010020:	f1b8 0f00 	cmp.w	r8, #0
 8010024:	d00f      	beq.n	8010046 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x13e>
					for (uint16_t index = 0; index < *length; index++) {
 8010026:	4613      	mov	r3, r2
 8010028:	f8b9 2000 	ldrh.w	r2, [r9]
 801002c:	429a      	cmp	r2, r3
 801002e:	d90a      	bls.n	8010046 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x13e>
						output[index] = (*callback_output )[index];
 8010030:	eb08 0183 	add.w	r1, r8, r3, lsl #2
 8010034:	2200      	movs	r2, #0
 8010036:	6812      	ldr	r2, [r2, #0]
 8010038:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801003c:	6812      	ldr	r2, [r2, #0]
 801003e:	600a      	str	r2, [r1, #0]
					for (uint16_t index = 0; index < *length; index++) {
 8010040:	3301      	adds	r3, #1
 8010042:	b29b      	uxth	r3, r3
 8010044:	e7f0      	b.n	8010028 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x120>
		if (not success && target_register->mode.pointer) {
 8010046:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
 801004a:	2b00      	cmp	r3, #0
 801004c:	d13e      	bne.n	80100cc <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x1c4>
 801004e:	7833      	ldrb	r3, [r6, #0]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d03b      	beq.n	80100cc <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x1c4>
			success = true;
 8010054:	2301      	movs	r3, #1
 8010056:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801005a:	7972      	ldrb	r2, [r6, #5]
 801005c:	b1ca      	cbz	r2, 8010092 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x18a>
 801005e:	88f3      	ldrh	r3, [r6, #6]
 8010060:	b9bb      	cbnz	r3, 8010092 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x18a>
				std::vector<T>* register_vector = reinterpret_cast<std::vector<T>*>(callbacks.pointer);
 8010062:	9801      	ldr	r0, [sp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010064:	6842      	ldr	r2, [r0, #4]
 8010066:	6801      	ldr	r1, [r0, #0]
 8010068:	1a52      	subs	r2, r2, r1
 801006a:	1092      	asrs	r2, r2, #2
				*length = register_vector->size();
 801006c:	f8a9 2000 	strh.w	r2, [r9]
				if (output != NULL) {
 8010070:	f1b8 0f00 	cmp.w	r8, #0
 8010074:	d02a      	beq.n	80100cc <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x1c4>
					for (uint16_t index = 0; index < *length; index++) {
 8010076:	f8b9 2000 	ldrh.w	r2, [r9]
 801007a:	429a      	cmp	r2, r3
 801007c:	d926      	bls.n	80100cc <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x1c4>
	return *(this->_M_impl._M_start + __n);
 801007e:	6802      	ldr	r2, [r0, #0]
 8010080:	eb02 0283 	add.w	r2, r2, r3, lsl #2
						output[index] = (*register_vector)[index];
 8010084:	eb08 0183 	add.w	r1, r8, r3, lsl #2
 8010088:	6812      	ldr	r2, [r2, #0]
 801008a:	600a      	str	r2, [r1, #0]
					for (uint16_t index = 0; index < *length; index++) {
 801008c:	3301      	adds	r3, #1
 801008e:	b29b      	uxth	r3, r3
 8010090:	e7f1      	b.n	8010076 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x16e>
			} else if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8010092:	b18a      	cbz	r2, 80100b8 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x1b0>
 8010094:	88f3      	ldrh	r3, [r6, #6]
 8010096:	b17b      	cbz	r3, 80100b8 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x1b0>
				*length = target_register->register_info.length;
 8010098:	f8a9 3000 	strh.w	r3, [r9]
				if (output != NULL) {
 801009c:	f1b8 0f00 	cmp.w	r8, #0
 80100a0:	d014      	beq.n	80100cc <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x1c4>
					std::copy(&callbacks.pointer[0], &callbacks.pointer[target_register->register_info.length], output);
 80100a2:	9901      	ldr	r1, [sp, #4]
 80100a4:	88f3      	ldrh	r3, [r6, #6]
 80100a6:	eb01 0083 	add.w	r0, r1, r3, lsl #2
	  const ptrdiff_t _Num = __last - __first;
 80100aa:	009a      	lsls	r2, r3, #2
	  if (_Num)
 80100ac:	4281      	cmp	r1, r0
 80100ae:	d00d      	beq.n	80100cc <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x1c4>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80100b0:	4640      	mov	r0, r8
 80100b2:	f00b fc2b 	bl	801b90c <memmove>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80100b6:	e009      	b.n	80100cc <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x1c4>
				*length = 1;
 80100b8:	2301      	movs	r3, #1
 80100ba:	f8a9 3000 	strh.w	r3, [r9]
				if (output != NULL) {
 80100be:	f1b8 0f00 	cmp.w	r8, #0
 80100c2:	d003      	beq.n	80100cc <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x1c4>
					*output = *callbacks.pointer;
 80100c4:	9b01      	ldr	r3, [sp, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	f8c8 3000 	str.w	r3, [r8]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80100cc:	f1ba 0f00 	cmp.w	sl, #0
 80100d0:	d004      	beq.n	80100dc <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x1d4>
 80100d2:	68f3      	ldr	r3, [r6, #12]
 80100d4:	b113      	cbz	r3, 80100dc <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x1d4>
			osSemaphoreRelease(*(target_register->register_semaphore));
 80100d6:	6818      	ldr	r0, [r3, #0]
 80100d8:	f7fc fc22 	bl	800c920 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 80100dc:	6820      	ldr	r0, [r4, #0]
 80100de:	f7fc fc1f 	bl	800c920 <osSemaphoreRelease>
		return true;
 80100e2:	465d      	mov	r5, fp
 80100e4:	e744      	b.n	800ff70 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x68>
 80100e6:	bf00      	nop
 80100e8:	0801bffc 	.word	0x0801bffc

080100ec <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80100ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f0:	b083      	sub	sp, #12
 80100f2:	4688      	mov	r8, r1
 80100f4:	4616      	mov	r6, r2
 80100f6:	2301      	movs	r3, #1
 80100f8:	9300      	str	r3, [sp, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80100fa:	6842      	ldr	r2, [r0, #4]
 80100fc:	6803      	ldr	r3, [r0, #0]
 80100fe:	1ad3      	subs	r3, r2, r3
	if (max_size() - size() < __n)
 8010100:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
 8010104:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 8010108:	d03e      	beq.n	8010188 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x9c>
 801010a:	4604      	mov	r4, r0
 801010c:	109d      	asrs	r5, r3, #2
	const size_type __len = size() + (std::max)(size(), __n);
 801010e:	9501      	str	r5, [sp, #4]
      if (__a < __b)
 8010110:	2d00      	cmp	r5, #0
 8010112:	d03c      	beq.n	801018e <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xa2>
      return __a;
 8010114:	ab01      	add	r3, sp, #4
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	441d      	add	r5, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801011a:	6823      	ldr	r3, [r4, #0]
 801011c:	1ad2      	subs	r2, r2, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801011e:	ebb5 0fa2 	cmp.w	r5, r2, asr #2
 8010122:	d336      	bcc.n	8010192 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xa6>
 8010124:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 8010128:	d236      	bcs.n	8010198 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xac>
      pointer __old_start = this->_M_impl._M_start;
 801012a:	f8d4 9000 	ldr.w	r9, [r4]
      pointer __old_finish = this->_M_impl._M_finish;
 801012e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8010132:	eba8 0b09 	sub.w	fp, r8, r9
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010136:	b3a5      	cbz	r5, 80101a2 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xb6>
	if (__n > this->_M_max_size())
 8010138:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 801013c:	d22f      	bcs.n	801019e <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xb2>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801013e:	00a8      	lsls	r0, r5, #2
 8010140:	f00a ff26 	bl	801af90 <_Znwj>
 8010144:	4607      	mov	r7, r0
	  _Alloc_traits::construct(this->_M_impl,
 8010146:	44bb      	add	fp, r7
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010148:	6833      	ldr	r3, [r6, #0]
 801014a:	f8cb 3000 	str.w	r3, [fp]
      ptrdiff_t __count = __last - __first;
 801014e:	eba8 0609 	sub.w	r6, r8, r9
      if (__count > 0)
 8010152:	2e00      	cmp	r6, #0
 8010154:	dc27      	bgt.n	80101a6 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xba>
      return __result + __count;
 8010156:	443e      	add	r6, r7
	      ++__new_finish;
 8010158:	3604      	adds	r6, #4
      ptrdiff_t __count = __last - __first;
 801015a:	ebaa 0a08 	sub.w	sl, sl, r8
      if (__count > 0)
 801015e:	f1ba 0f00 	cmp.w	sl, #0
 8010162:	dc26      	bgt.n	80101b2 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xc6>
      return __result + __count;
 8010164:	4456      	add	r6, sl
		    this->_M_impl._M_end_of_storage - __old_start);
 8010166:	68a1      	ldr	r1, [r4, #8]
 8010168:	eba1 0109 	sub.w	r1, r1, r9
	if (__p)
 801016c:	f1b9 0f00 	cmp.w	r9, #0
 8010170:	d002      	beq.n	8010178 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x8c>
	::operator delete(__p
 8010172:	4648      	mov	r0, r9
 8010174:	f00a fef6 	bl	801af64 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 8010178:	6027      	str	r7, [r4, #0]
      this->_M_impl._M_finish = __new_finish;
 801017a:	6066      	str	r6, [r4, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801017c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010180:	60a5      	str	r5, [r4, #8]
    }
 8010182:	b003      	add	sp, #12
 8010184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_length_error(__N(__s));
 8010188:	480d      	ldr	r0, [pc, #52]	; (80101c0 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xd4>)
 801018a:	f00a ffb5 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 801018e:	466b      	mov	r3, sp
 8010190:	e7c1      	b.n	8010116 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x2a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010192:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 8010196:	e7c8      	b.n	801012a <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x3e>
 8010198:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 801019c:	e7c5      	b.n	801012a <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x3e>
	  std::__throw_bad_alloc();
 801019e:	f00a ffa5 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80101a2:	2700      	movs	r7, #0
 80101a4:	e7cf      	b.n	8010146 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x5a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80101a6:	4632      	mov	r2, r6
 80101a8:	4649      	mov	r1, r9
 80101aa:	4638      	mov	r0, r7
 80101ac:	f00b fbae 	bl	801b90c <memmove>
 80101b0:	e7d1      	b.n	8010156 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x6a>
 80101b2:	4652      	mov	r2, sl
 80101b4:	4641      	mov	r1, r8
 80101b6:	4630      	mov	r0, r6
 80101b8:	f00b fba8 	bl	801b90c <memmove>
 80101bc:	e7d2      	b.n	8010164 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x78>
 80101be:	bf00      	nop
 80101c0:	0801bde4 	.word	0x0801bde4

080101c4 <_ZNSt6vectorIhSaIhEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPhS1_EE>:
    vector<_Tp, _Alloc>::
 80101c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101c6:	4605      	mov	r5, r0
 80101c8:	460c      	mov	r4, r1
      { return __normal_iterator(_M_current + __n); }
 80101ca:	1c48      	adds	r0, r1, #1
      : _M_current(__i) { }
 80101cc:	686e      	ldr	r6, [r5, #4]
      if (__position + 1 != end())
 80101ce:	4286      	cmp	r6, r0
 80101d0:	d00e      	beq.n	80101f0 <_ZNSt6vectorIhSaIhEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPhS1_EE+0x2c>
      return std::__niter_wrap(__result,
 80101d2:	f7f1 fc6f 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80101d6:	4607      	mov	r7, r0
 80101d8:	4630      	mov	r0, r6
 80101da:	f7f1 fc6b 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80101de:	4606      	mov	r6, r0
 80101e0:	4620      	mov	r0, r4
 80101e2:	f7f1 fc67 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
	  if (_Num)
 80101e6:	1bf2      	subs	r2, r6, r7
 80101e8:	d107      	bne.n	80101fa <_ZNSt6vectorIhSaIhEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPhS1_EE+0x36>
    { return __from + (__res - std::__niter_base(__from)); }
 80101ea:	4620      	mov	r0, r4
 80101ec:	f7f1 fc62 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
      --this->_M_impl._M_finish;
 80101f0:	686b      	ldr	r3, [r5, #4]
 80101f2:	3b01      	subs	r3, #1
 80101f4:	606b      	str	r3, [r5, #4]
    }
 80101f6:	4620      	mov	r0, r4
 80101f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80101fa:	4639      	mov	r1, r7
 80101fc:	f00b fb86 	bl	801b90c <memmove>
 8010200:	e7f3      	b.n	80101ea <_ZNSt6vectorIhSaIhEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPhS1_EE+0x26>

08010202 <_ZN13Communication18RemoveGroupAddressEh>:
bool Communication::RemoveGroupAddress(uint8_t address_) {
 8010202:	b538      	push	{r3, r4, r5, lr}
 8010204:	4605      	mov	r5, r0
 8010206:	460c      	mov	r4, r1
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 8010208:	f04f 31ff 	mov.w	r1, #4294967295
 801020c:	6800      	ldr	r0, [r0, #0]
 801020e:	f7fc fb53 	bl	800c8b8 <osSemaphoreAcquire>
 8010212:	6ba8      	ldr	r0, [r5, #56]	; 0x38
	for (uint8_t address : group_addresses) {
 8010214:	4603      	mov	r3, r0
 8010216:	6be9      	ldr	r1, [r5, #60]	; 0x3c
	uint8_t index = 0;
 8010218:	2200      	movs	r2, #0
 801021a:	e003      	b.n	8010224 <_ZN13Communication18RemoveGroupAddressEh+0x22>
		index++;
 801021c:	3201      	adds	r2, #1
 801021e:	b2d2      	uxtb	r2, r2
	++_M_current;
 8010220:	f10c 0301 	add.w	r3, ip, #1
    { return __lhs.base() != __rhs.base(); }
 8010224:	469c      	mov	ip, r3
	for (uint8_t address : group_addresses) {
 8010226:	4299      	cmp	r1, r3
 8010228:	d009      	beq.n	801023e <_ZN13Communication18RemoveGroupAddressEh+0x3c>
 801022a:	781b      	ldrb	r3, [r3, #0]
		if (address == address_) {
 801022c:	42a3      	cmp	r3, r4
 801022e:	d1f5      	bne.n	801021c <_ZN13Communication18RemoveGroupAddressEh+0x1a>
      { return _M_erase(begin() + (__position - cbegin())); }
 8010230:	1881      	adds	r1, r0, r2
 8010232:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8010236:	f7ff ffc5 	bl	80101c4 <_ZNSt6vectorIhSaIhEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPhS1_EE>
			return true;
 801023a:	2001      	movs	r0, #1
 801023c:	e003      	b.n	8010246 <_ZN13Communication18RemoveGroupAddressEh+0x44>
	osSemaphoreRelease(CommunicationSemaphore);
 801023e:	6828      	ldr	r0, [r5, #0]
 8010240:	f7fc fb6e 	bl	800c920 <osSemaphoreRelease>
	return false;
 8010244:	2000      	movs	r0, #0
}
 8010246:	bd38      	pop	{r3, r4, r5, pc}

08010248 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8010248:	b508      	push	{r3, lr}
			return self->RemoveGroupAddress(*input);
 801024a:	7811      	ldrb	r1, [r2, #0]
 801024c:	f7ff ffd9 	bl	8010202 <_ZN13Communication18RemoveGroupAddressEh>
		}
 8010250:	bd08      	pop	{r3, pc}
	...

08010254 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>:
      if (__n != 0)
 8010254:	2900      	cmp	r1, #0
 8010256:	d065      	beq.n	8010324 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xd0>
    vector<_Tp, _Alloc>::
 8010258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801025c:	b082      	sub	sp, #8
 801025e:	4604      	mov	r4, r0
 8010260:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010262:	6840      	ldr	r0, [r0, #4]
 8010264:	6823      	ldr	r3, [r4, #0]
 8010266:	eba0 0803 	sub.w	r8, r0, r3
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 801026a:	68a3      	ldr	r3, [r4, #8]
					 - this->_M_impl._M_finish);
 801026c:	1a1b      	subs	r3, r3, r0
	  if (__navail >= __n)
 801026e:	428b      	cmp	r3, r1
 8010270:	d30d      	bcc.n	801028e <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x3a>
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
 8010272:	b919      	cbnz	r1, 801027c <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x28>
	      this->_M_impl._M_finish =
 8010274:	6060      	str	r0, [r4, #4]
    }
 8010276:	b002      	add	sp, #8
 8010278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
 801027c:	1846      	adds	r6, r0, r1
      if (const size_t __len = __last - __first)
 801027e:	460a      	mov	r2, r1
 8010280:	b909      	cbnz	r1, 8010286 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x32>
      return __first + __n;
 8010282:	4630      	mov	r0, r6
    }
 8010284:	e7f6      	b.n	8010274 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x20>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8010286:	2100      	movs	r1, #0
 8010288:	f00b fb5a 	bl	801b940 <memset>
 801028c:	e7f9      	b.n	8010282 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x2e>
 801028e:	9100      	str	r1, [sp, #0]
 8010290:	6863      	ldr	r3, [r4, #4]
 8010292:	6826      	ldr	r6, [r4, #0]
 8010294:	1b9e      	subs	r6, r3, r6
	if (max_size() - size() < __n)
 8010296:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801029a:	1b92      	subs	r2, r2, r6
 801029c:	428a      	cmp	r2, r1
 801029e:	d327      	bcc.n	80102f0 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x9c>
	const size_type __len = size() + (std::max)(size(), __n);
 80102a0:	9601      	str	r6, [sp, #4]
      if (__a < __b)
 80102a2:	428e      	cmp	r6, r1
 80102a4:	d327      	bcc.n	80102f6 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xa2>
      return __a;
 80102a6:	aa01      	add	r2, sp, #4
 80102a8:	6812      	ldr	r2, [r2, #0]
 80102aa:	4416      	add	r6, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80102ac:	6822      	ldr	r2, [r4, #0]
 80102ae:	1a9b      	subs	r3, r3, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80102b0:	429e      	cmp	r6, r3
 80102b2:	d322      	bcc.n	80102fa <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xa6>
 80102b4:	2e00      	cmp	r6, #0
 80102b6:	db23      	blt.n	8010300 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xac>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80102b8:	b33e      	cbz	r6, 801030a <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xb6>
	if (__n > this->_M_max_size())
 80102ba:	2e00      	cmp	r6, #0
 80102bc:	db23      	blt.n	8010306 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xb2>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80102be:	4630      	mov	r0, r6
 80102c0:	f00a fe66 	bl	801af90 <_Znwj>
 80102c4:	4607      	mov	r7, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 80102c6:	eb07 0008 	add.w	r0, r7, r8
      if (__n <= 0)
 80102ca:	bb05      	cbnz	r5, 801030e <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xba>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 80102cc:	6821      	ldr	r1, [r4, #0]
 80102ce:	6862      	ldr	r2, [r4, #4]
      ptrdiff_t __count = __last - __first;
 80102d0:	1a52      	subs	r2, r2, r1
      if (__count > 0)
 80102d2:	2a00      	cmp	r2, #0
 80102d4:	dc22      	bgt.n	801031c <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xc8>
	      _M_deallocate(this->_M_impl._M_start,
 80102d6:	6820      	ldr	r0, [r4, #0]
			    this->_M_impl._M_end_of_storage
 80102d8:	68a1      	ldr	r1, [r4, #8]
			    - this->_M_impl._M_start);
 80102da:	1a09      	subs	r1, r1, r0
	if (__p)
 80102dc:	b108      	cbz	r0, 80102e2 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x8e>
	::operator delete(__p
 80102de:	f00a fe41 	bl	801af64 <_ZdlPvj>
	      this->_M_impl._M_start = __new_start;
 80102e2:	6027      	str	r7, [r4, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 80102e4:	4445      	add	r5, r8
 80102e6:	443d      	add	r5, r7
 80102e8:	6065      	str	r5, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 80102ea:	443e      	add	r6, r7
 80102ec:	60a6      	str	r6, [r4, #8]
    }
 80102ee:	e7c2      	b.n	8010276 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x22>
	  __throw_length_error(__N(__s));
 80102f0:	480d      	ldr	r0, [pc, #52]	; (8010328 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xd4>)
 80102f2:	f00a ff01 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 80102f6:	466a      	mov	r2, sp
 80102f8:	e7d6      	b.n	80102a8 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x54>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80102fa:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 80102fe:	e7db      	b.n	80102b8 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x64>
 8010300:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 8010304:	e7d8      	b.n	80102b8 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x64>
	  std::__throw_bad_alloc();
 8010306:	f00a fef1 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801030a:	2700      	movs	r7, #0
 801030c:	e7db      	b.n	80102c6 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x72>
      if (const size_t __len = __last - __first)
 801030e:	462a      	mov	r2, r5
 8010310:	2d00      	cmp	r5, #0
 8010312:	d0db      	beq.n	80102cc <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x78>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8010314:	2100      	movs	r1, #0
 8010316:	f00b fb13 	bl	801b940 <memset>
    }
 801031a:	e7d7      	b.n	80102cc <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801031c:	4638      	mov	r0, r7
 801031e:	f00b faf5 	bl	801b90c <memmove>
 8010322:	e7d8      	b.n	80102d6 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x82>
 8010324:	4770      	bx	lr
 8010326:	bf00      	nop
 8010328:	0801c048 	.word	0x0801c048

0801032c <_ZN9Registers13WriteRegisterIhEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 801032c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010330:	b087      	sub	sp, #28
 8010332:	4604      	mov	r4, r0
 8010334:	460f      	mov	r7, r1
 8010336:	4690      	mov	r8, r2
 8010338:	4699      	mov	r9, r3
 801033a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801033e:	f04f 31ff 	mov.w	r1, #4294967295
 8010342:	6800      	ldr	r0, [r0, #0]
 8010344:	f7fc fab8 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8010348:	f10d 0217 	add.w	r2, sp, #23
 801034c:	4639      	mov	r1, r7
 801034e:	4620      	mov	r0, r4
 8010350:	f009 fc9d 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8010354:	f89d 5017 	ldrb.w	r5, [sp, #23]
 8010358:	b1ad      	cbz	r5, 8010386 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x5a>
 801035a:	4606      	mov	r6, r0
	uint8_t registered_type = GetTypeID<T>(&success);
 801035c:	f10d 0117 	add.w	r1, sp, #23
 8010360:	4620      	mov	r0, r4
 8010362:	f7fe fc7b 	bl	800ec5c <_ZN9Registers9GetTypeIDIhEEhPb>
	if (!success) {
 8010366:	f89d 5017 	ldrb.w	r5, [sp, #23]
 801036a:	b19d      	cbz	r5, 8010394 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x68>
	if (target_register->register_info.type != registered_type) {
 801036c:	7933      	ldrb	r3, [r6, #4]
 801036e:	4283      	cmp	r3, r0
 8010370:	d114      	bne.n	801039c <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x70>
	if (callbacks[target_register->register_info.type] == NULL) {// check supported type
 8010372:	3304      	adds	r3, #4
 8010374:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8010378:	b1ab      	cbz	r3, 80103a6 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x7a>
	if (target_register->access.write) {
 801037a:	7a35      	ldrb	r5, [r6, #8]
 801037c:	b9c5      	cbnz	r5, 80103b0 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x84>
	osSemaphoreRelease(RegistersSemaphore);
 801037e:	6820      	ldr	r0, [r4, #0]
 8010380:	f7fc face 	bl	800c920 <osSemaphoreRelease>
	return false;
 8010384:	e002      	b.n	801038c <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x60>
		osSemaphoreRelease(RegistersSemaphore);
 8010386:	6820      	ldr	r0, [r4, #0]
 8010388:	f7fc faca 	bl	800c920 <osSemaphoreRelease>
}
 801038c:	4628      	mov	r0, r5
 801038e:	b007      	add	sp, #28
 8010390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		osSemaphoreRelease(RegistersSemaphore);
 8010394:	6820      	ldr	r0, [r4, #0]
 8010396:	f7fc fac3 	bl	800c920 <osSemaphoreRelease>
		return false;
 801039a:	e7f7      	b.n	801038c <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x60>
		osSemaphoreRelease(RegistersSemaphore);
 801039c:	6820      	ldr	r0, [r4, #0]
 801039e:	f7fc fabf 	bl	800c920 <osSemaphoreRelease>
		return false;
 80103a2:	2500      	movs	r5, #0
 80103a4:	e7f2      	b.n	801038c <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x60>
		osSemaphoreRelease(RegistersSemaphore);
 80103a6:	6820      	ldr	r0, [r4, #0]
 80103a8:	f7fc faba 	bl	800c920 <osSemaphoreRelease>
		return false;
 80103ac:	2500      	movs	r5, #0
 80103ae:	e7ed      	b.n	801038c <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x60>
		success = false;
 80103b0:	2200      	movs	r2, #0
 80103b2:	f88d 2017 	strb.w	r2, [sp, #23]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80103b6:	8975      	ldrh	r5, [r6, #10]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80103b8:	6858      	ldr	r0, [r3, #4]
 80103ba:	681a      	ldr	r2, [r3, #0]
 80103bc:	1a80      	subs	r0, r0, r2
 80103be:	1102      	asrs	r2, r0, #4
	if (__n >= this->size())
 80103c0:	ebb5 1f20 	cmp.w	r5, r0, asr #4
 80103c4:	d232      	bcs.n	801042c <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x100>
	return *(this->_M_impl._M_start + __n);
 80103c6:	6819      	ldr	r1, [r3, #0]
 80103c8:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80103cc:	ad01      	add	r5, sp, #4
 80103ce:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 80103d0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80103d4:	f1ba 0f00 	cmp.w	sl, #0
 80103d8:	d006      	beq.n	80103e8 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xbc>
 80103da:	68f3      	ldr	r3, [r6, #12]
 80103dc:	b123      	cbz	r3, 80103e8 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xbc>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 80103de:	f04f 31ff 	mov.w	r1, #4294967295
 80103e2:	6818      	ldr	r0, [r3, #0]
 80103e4:	f7fc fa68 	bl	800c8b8 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 80103e8:	7833      	ldrb	r3, [r6, #0]
 80103ea:	b3cb      	cbz	r3, 8010460 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x134>
			success = true;
 80103ec:	2301      	movs	r3, #1
 80103ee:	f88d 3017 	strb.w	r3, [sp, #23]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 80103f2:	7973      	ldrb	r3, [r6, #5]
 80103f4:	b36b      	cbz	r3, 8010452 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x126>
 80103f6:	88f5      	ldrh	r5, [r6, #6]
 80103f8:	bb5d      	cbnz	r5, 8010452 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x126>
				std::vector<T>* register_vector = reinterpret_cast<std::vector<T>*>(callbacks.pointer);
 80103fa:	f8dd b004 	ldr.w	fp, [sp, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80103fe:	f8db 3000 	ldr.w	r3, [fp]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8010402:	f8db 2004 	ldr.w	r2, [fp, #4]
 8010406:	4293      	cmp	r3, r2
 8010408:	d001      	beq.n	801040e <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0xe2>
	    this->_M_impl._M_finish = __pos;
 801040a:	f8cb 3004 	str.w	r3, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801040e:	f8db 2004 	ldr.w	r2, [fp, #4]
 8010412:	f8db 3000 	ldr.w	r3, [fp]
 8010416:	1ad1      	subs	r1, r2, r3
	if (__new_size > size())
 8010418:	4589      	cmp	r9, r1
 801041a:	d80b      	bhi.n	8010434 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x108>
	else if (__new_size < size())
 801041c:	4589      	cmp	r9, r1
 801041e:	d20e      	bcs.n	801043e <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x112>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8010420:	444b      	add	r3, r9
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8010422:	429a      	cmp	r2, r3
 8010424:	d00b      	beq.n	801043e <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x112>
	    this->_M_impl._M_finish = __pos;
 8010426:	f8cb 3004 	str.w	r3, [fp, #4]
      }
 801042a:	e008      	b.n	801043e <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x112>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801042c:	4629      	mov	r1, r5
 801042e:	4828      	ldr	r0, [pc, #160]	; (80104d0 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x1a4>)
 8010430:	f00a fe65 	bl	801b0fe <_ZSt24__throw_out_of_range_fmtPKcz>
	  _M_default_append(__new_size - size());
 8010434:	eba9 0101 	sub.w	r1, r9, r1
 8010438:	4658      	mov	r0, fp
 801043a:	f7ff ff0b 	bl	8010254 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>
				for (uint16_t index = 0; index < length; index++) {
 801043e:	454d      	cmp	r5, r9
 8010440:	d20e      	bcs.n	8010460 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x134>
	return *(this->_M_impl._M_start + __n);
 8010442:	f8db 3000 	ldr.w	r3, [fp]
					(*register_vector)[index] = value[index];
 8010446:	f818 2005 	ldrb.w	r2, [r8, r5]
 801044a:	555a      	strb	r2, [r3, r5]
				for (uint16_t index = 0; index < length; index++) {
 801044c:	3501      	adds	r5, #1
 801044e:	b2ad      	uxth	r5, r5
 8010450:	e7f5      	b.n	801043e <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x112>
			} else if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8010452:	b10b      	cbz	r3, 8010458 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x12c>
 8010454:	88f3      	ldrh	r3, [r6, #6]
 8010456:	b99b      	cbnz	r3, 8010480 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x154>
				*(callbacks.pointer) = *value;
 8010458:	f898 2000 	ldrb.w	r2, [r8]
 801045c:	9b01      	ldr	r3, [sp, #4]
 801045e:	701a      	strb	r2, [r3, #0]
		if (target_register->mode.callbacks) {
 8010460:	7873      	ldrb	r3, [r6, #1]
 8010462:	b333      	cbz	r3, 80104b2 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x186>
			if (callbacks.write != NULL) {
 8010464:	9d03      	ldr	r5, [sp, #12]
 8010466:	b325      	cbz	r5, 80104b2 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x186>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8010468:	7973      	ldrb	r3, [r6, #5]
 801046a:	b18b      	cbz	r3, 8010490 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x164>
 801046c:	88f2      	ldrh	r2, [r6, #6]
 801046e:	b97a      	cbnz	r2, 8010490 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x164>
					success = callbacks.write(callbacks.context, ID, value, length);
 8010470:	464b      	mov	r3, r9
 8010472:	4642      	mov	r2, r8
 8010474:	4639      	mov	r1, r7
 8010476:	9802      	ldr	r0, [sp, #8]
 8010478:	47a8      	blx	r5
 801047a:	f88d 0017 	strb.w	r0, [sp, #23]
 801047e:	e018      	b.n	80104b2 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x186>
				std::copy(&value[0], &value[target_register->register_info.length], callbacks.pointer);
 8010480:	9801      	ldr	r0, [sp, #4]
	  if (_Num)
 8010482:	461a      	mov	r2, r3
 8010484:	2b00      	cmp	r3, #0
 8010486:	d0eb      	beq.n	8010460 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x134>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8010488:	4641      	mov	r1, r8
 801048a:	f00b fa3f 	bl	801b90c <memmove>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801048e:	e7e7      	b.n	8010460 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x134>
				} else if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8010490:	b143      	cbz	r3, 80104a4 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x178>
 8010492:	88f3      	ldrh	r3, [r6, #6]
 8010494:	b133      	cbz	r3, 80104a4 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x178>
					success = callbacks.write(callbacks.context, ID, value, target_register->register_info.length);
 8010496:	4642      	mov	r2, r8
 8010498:	4639      	mov	r1, r7
 801049a:	9802      	ldr	r0, [sp, #8]
 801049c:	47a8      	blx	r5
 801049e:	f88d 0017 	strb.w	r0, [sp, #23]
 80104a2:	e006      	b.n	80104b2 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x186>
					success = callbacks.write(callbacks.context, ID, value, 1);
 80104a4:	2301      	movs	r3, #1
 80104a6:	4642      	mov	r2, r8
 80104a8:	4639      	mov	r1, r7
 80104aa:	9802      	ldr	r0, [sp, #8]
 80104ac:	47a8      	blx	r5
 80104ae:	f88d 0017 	strb.w	r0, [sp, #23]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80104b2:	f1ba 0f00 	cmp.w	sl, #0
 80104b6:	d004      	beq.n	80104c2 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x196>
 80104b8:	68f3      	ldr	r3, [r6, #12]
 80104ba:	b113      	cbz	r3, 80104c2 <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x196>
			osSemaphoreRelease(*(target_register->register_semaphore));
 80104bc:	6818      	ldr	r0, [r3, #0]
 80104be:	f7fc fa2f 	bl	800c920 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 80104c2:	6820      	ldr	r0, [r4, #0]
 80104c4:	f7fc fa2c 	bl	800c920 <osSemaphoreRelease>
		return success;
 80104c8:	f89d 5017 	ldrb.w	r5, [sp, #23]
 80104cc:	e75e      	b.n	801038c <_ZN9Registers13WriteRegisterIhEEbtPT_tb+0x60>
 80104ce:	bf00      	nop
 80104d0:	0801bffc 	.word	0x0801bffc

080104d4 <_ZN9Registers19WriteVectorRegisterIhEEbtSt6vectorIT_SaIS2_EEb>:
bool Registers::WriteVectorRegister(uint16_t ID, std::vector<T> value, bool use_semaphore) {
 80104d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104d8:	b084      	sub	sp, #16
 80104da:	4604      	mov	r4, r0
 80104dc:	460e      	mov	r6, r1
 80104de:	4690      	mov	r8, r2
 80104e0:	461f      	mov	r7, r3
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80104e2:	f04f 31ff 	mov.w	r1, #4294967295
 80104e6:	6800      	ldr	r0, [r0, #0]
 80104e8:	f7fc f9e6 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80104ec:	f10d 020f 	add.w	r2, sp, #15
 80104f0:	4631      	mov	r1, r6
 80104f2:	4620      	mov	r0, r4
 80104f4:	f009 fbcb 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80104f8:	f89d 500f 	ldrb.w	r5, [sp, #15]
 80104fc:	b15d      	cbz	r5, 8010516 <_ZN9Registers19WriteVectorRegisterIhEEbtSt6vectorIT_SaIS2_EEb+0x42>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 80104fe:	7943      	ldrb	r3, [r0, #5]
 8010500:	b10b      	cbz	r3, 8010506 <_ZN9Registers19WriteVectorRegisterIhEEbtSt6vectorIT_SaIS2_EEb+0x32>
 8010502:	88c3      	ldrh	r3, [r0, #6]
 8010504:	b15b      	cbz	r3, 801051e <_ZN9Registers19WriteVectorRegisterIhEEbtSt6vectorIT_SaIS2_EEb+0x4a>
		osSemaphoreRelease(RegistersSemaphore);
 8010506:	6820      	ldr	r0, [r4, #0]
 8010508:	f7fc fa0a 	bl	800c920 <osSemaphoreRelease>
		return false; // check the register is a vector
 801050c:	2500      	movs	r5, #0
}
 801050e:	4628      	mov	r0, r5
 8010510:	b004      	add	sp, #16
 8010512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		osSemaphoreRelease(RegistersSemaphore);
 8010516:	6820      	ldr	r0, [r4, #0]
 8010518:	f7fc fa02 	bl	800c920 <osSemaphoreRelease>
		return false;
 801051c:	e7f7      	b.n	801050e <_ZN9Registers19WriteVectorRegisterIhEEbtSt6vectorIT_SaIS2_EEb+0x3a>
	osSemaphoreRelease(RegistersSemaphore);
 801051e:	6820      	ldr	r0, [r4, #0]
 8010520:	f7fc f9fe 	bl	800c920 <osSemaphoreRelease>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8010524:	f8d8 2000 	ldr.w	r2, [r8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010528:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801052c:	1a9b      	subs	r3, r3, r2
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 801052e:	9700      	str	r7, [sp, #0]
 8010530:	b29b      	uxth	r3, r3
 8010532:	4631      	mov	r1, r6
 8010534:	4620      	mov	r0, r4
 8010536:	f7ff fef9 	bl	801032c <_ZN9Registers13WriteRegisterIhEEbtPT_tb>
 801053a:	4605      	mov	r5, r0
 801053c:	e7e7      	b.n	801050e <_ZN9Registers19WriteVectorRegisterIhEEbtSt6vectorIT_SaIS2_EEb+0x3a>

0801053e <_ZN13Communication11BuildSingleIhEESt6vectorIhSaIhEET_>:
		vector = *reinterpret_cast<std::vector<T>*>(data); // TODO exit with float, to check
	return vector;
}

template<typename T>
std::vector<uint8_t> Communication::BuildSingle(T input) {
 801053e:	b570      	push	{r4, r5, r6, lr}
 8010540:	b084      	sub	sp, #16
 8010542:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010544:	2400      	movs	r4, #0
 8010546:	6004      	str	r4, [r0, #0]
 8010548:	6044      	str	r4, [r0, #4]
 801054a:	6084      	str	r4, [r0, #8]
	std::vector<uint8_t> data;
	uint8_t type_length = sizeof(T);
    uint64_t reinterpreted_input = 0;
 801054c:	2000      	movs	r0, #0
 801054e:	2100      	movs	r1, #0
 8010550:	e9cd 0100 	strd	r0, r1, [sp]
    std::memcpy(&reinterpreted_input, &input, sizeof(T)); // this is mandatory to get rid of the memory alignment problem. A simple cast can't work here
 8010554:	f88d 2000 	strb.w	r2, [sp]

	for (uint8_t index = 0; index < type_length; index++) {
 8010558:	b9c4      	cbnz	r4, 801058c <_ZN13Communication11BuildSingleIhEESt6vectorIhSaIhEET_+0x4e>
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 801055a:	4263      	negs	r3, r4
 801055c:	00da      	lsls	r2, r3, #3
 801055e:	9e01      	ldr	r6, [sp, #4]
 8010560:	f1c2 0020 	rsb	r0, r2, #32
 8010564:	f1a2 0120 	sub.w	r1, r2, #32
 8010568:	9b00      	ldr	r3, [sp, #0]
 801056a:	40d3      	lsrs	r3, r2
 801056c:	fa06 f000 	lsl.w	r0, r6, r0
 8010570:	4303      	orrs	r3, r0
 8010572:	fa26 f101 	lsr.w	r1, r6, r1
 8010576:	430b      	orrs	r3, r1
 8010578:	f88d 300f 	strb.w	r3, [sp, #15]
      { emplace_back(std::move(__x)); }
 801057c:	f10d 010f 	add.w	r1, sp, #15
 8010580:	4628      	mov	r0, r5
 8010582:	f7fe ffa3 	bl	800f4cc <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	for (uint8_t index = 0; index < type_length; index++) {
 8010586:	3401      	adds	r4, #1
 8010588:	b2e4      	uxtb	r4, r4
 801058a:	e7e5      	b.n	8010558 <_ZN13Communication11BuildSingleIhEESt6vectorIhSaIhEET_+0x1a>
	}

	return data;
}
 801058c:	4628      	mov	r0, r5
 801058e:	b004      	add	sp, #16
 8010590:	bd70      	pop	{r4, r5, r6, pc}
	...

08010594 <_ZNSt6vectorImSaImEE17_M_default_appendEj>:
      if (__n != 0)
 8010594:	2900      	cmp	r1, #0
 8010596:	d071      	beq.n	801067c <_ZNSt6vectorImSaImEE17_M_default_appendEj+0xe8>
    vector<_Tp, _Alloc>::
 8010598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801059c:	b083      	sub	sp, #12
 801059e:	4605      	mov	r5, r0
 80105a0:	460e      	mov	r6, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80105a2:	6843      	ldr	r3, [r0, #4]
 80105a4:	6804      	ldr	r4, [r0, #0]
 80105a6:	1b1c      	subs	r4, r3, r4
 80105a8:	10a7      	asrs	r7, r4, #2
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 80105aa:	6882      	ldr	r2, [r0, #8]
					 - this->_M_impl._M_finish);
 80105ac:	1ad2      	subs	r2, r2, r3
	  if (__navail >= __n)
 80105ae:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 80105b2:	d80b      	bhi.n	80105cc <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x38>
      std::__fill_a(__first, __first + __n, __value);
 80105b4:	eb03 0681 	add.w	r6, r3, r1, lsl #2
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 80105b8:	e002      	b.n	80105c0 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x2c>
	*__first = __tmp;
 80105ba:	2200      	movs	r2, #0
 80105bc:	f843 2b04 	str.w	r2, [r3], #4
      for (; __first != __last; ++__first)
 80105c0:	429e      	cmp	r6, r3
 80105c2:	d1fa      	bne.n	80105ba <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x26>
	      this->_M_impl._M_finish =
 80105c4:	606e      	str	r6, [r5, #4]
    }
 80105c6:	b003      	add	sp, #12
 80105c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105cc:	9100      	str	r1, [sp, #0]
 80105ce:	6843      	ldr	r3, [r0, #4]
 80105d0:	6802      	ldr	r2, [r0, #0]
 80105d2:	1a9a      	subs	r2, r3, r2
 80105d4:	1091      	asrs	r1, r2, #2
	if (max_size() - size() < __n)
 80105d6:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 80105da:	eba0 02a2 	sub.w	r2, r0, r2, asr #2
 80105de:	42b2      	cmp	r2, r6
 80105e0:	d31e      	bcc.n	8010620 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x8c>
	const size_type __len = size() + (std::max)(size(), __n);
 80105e2:	9101      	str	r1, [sp, #4]
      if (__a < __b)
 80105e4:	42b1      	cmp	r1, r6
 80105e6:	d31e      	bcc.n	8010626 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x92>
      return __a;
 80105e8:	aa01      	add	r2, sp, #4
 80105ea:	6812      	ldr	r2, [r2, #0]
 80105ec:	eb01 0802 	add.w	r8, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80105f0:	682a      	ldr	r2, [r5, #0]
 80105f2:	1a9b      	subs	r3, r3, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80105f4:	ebb8 0fa3 	cmp.w	r8, r3, asr #2
 80105f8:	d317      	bcc.n	801062a <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x96>
 80105fa:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
 80105fe:	d217      	bcs.n	8010630 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x9c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010600:	f1b8 0f00 	cmp.w	r8, #0
 8010604:	d019      	beq.n	801063a <_ZNSt6vectorImSaImEE17_M_default_appendEj+0xa6>
	if (__n > this->_M_max_size())
 8010606:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
 801060a:	d214      	bcs.n	8010636 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0xa2>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801060c:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8010610:	f00a fcbe 	bl	801af90 <_Znwj>
 8010614:	4681      	mov	r9, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 8010616:	eb09 0304 	add.w	r3, r9, r4
      std::__fill_a(__first, __first + __n, __value);
 801061a:	eb03 0186 	add.w	r1, r3, r6, lsl #2
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 801061e:	e012      	b.n	8010646 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0xb2>
	  __throw_length_error(__N(__s));
 8010620:	4817      	ldr	r0, [pc, #92]	; (8010680 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0xec>)
 8010622:	f00a fd69 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 8010626:	466a      	mov	r2, sp
 8010628:	e7df      	b.n	80105ea <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x56>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801062a:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 801062e:	e7e7      	b.n	8010600 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x6c>
 8010630:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 8010634:	e7e4      	b.n	8010600 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x6c>
	  std::__throw_bad_alloc();
 8010636:	f00a fd59 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801063a:	f04f 0900 	mov.w	r9, #0
 801063e:	e7ea      	b.n	8010616 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x82>
	*__first = __tmp;
 8010640:	2200      	movs	r2, #0
 8010642:	f843 2b04 	str.w	r2, [r3], #4
      for (; __first != __last; ++__first)
 8010646:	4299      	cmp	r1, r3
 8010648:	d1fa      	bne.n	8010640 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0xac>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 801064a:	6829      	ldr	r1, [r5, #0]
 801064c:	686a      	ldr	r2, [r5, #4]
      ptrdiff_t __count = __last - __first;
 801064e:	1a52      	subs	r2, r2, r1
      if (__count > 0)
 8010650:	2a00      	cmp	r2, #0
 8010652:	dc0f      	bgt.n	8010674 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0xe0>
	      _M_deallocate(this->_M_impl._M_start,
 8010654:	6828      	ldr	r0, [r5, #0]
			    this->_M_impl._M_end_of_storage
 8010656:	68a9      	ldr	r1, [r5, #8]
			    - this->_M_impl._M_start);
 8010658:	1a09      	subs	r1, r1, r0
	if (__p)
 801065a:	b108      	cbz	r0, 8010660 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0xcc>
	::operator delete(__p
 801065c:	f00a fc82 	bl	801af64 <_ZdlPvj>
	      this->_M_impl._M_start = __new_start;
 8010660:	f8c5 9000 	str.w	r9, [r5]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8010664:	19b9      	adds	r1, r7, r6
 8010666:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801066a:	6069      	str	r1, [r5, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 801066c:	eb09 0088 	add.w	r0, r9, r8, lsl #2
 8010670:	60a8      	str	r0, [r5, #8]
    }
 8010672:	e7a8      	b.n	80105c6 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x32>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010674:	4648      	mov	r0, r9
 8010676:	f00b f949 	bl	801b90c <memmove>
 801067a:	e7eb      	b.n	8010654 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0xc0>
 801067c:	4770      	bx	lr
 801067e:	bf00      	nop
 8010680:	0801c048 	.word	0x0801c048

08010684 <_ZN9Registers13WriteRegisterImEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8010684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010688:	b087      	sub	sp, #28
 801068a:	4604      	mov	r4, r0
 801068c:	460f      	mov	r7, r1
 801068e:	4690      	mov	r8, r2
 8010690:	4699      	mov	r9, r3
 8010692:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8010696:	f04f 31ff 	mov.w	r1, #4294967295
 801069a:	6800      	ldr	r0, [r0, #0]
 801069c:	f7fc f90c 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80106a0:	f10d 0217 	add.w	r2, sp, #23
 80106a4:	4639      	mov	r1, r7
 80106a6:	4620      	mov	r0, r4
 80106a8:	f009 faf1 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80106ac:	f89d 5017 	ldrb.w	r5, [sp, #23]
 80106b0:	b1ad      	cbz	r5, 80106de <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x5a>
 80106b2:	4606      	mov	r6, r0
	uint8_t registered_type = GetTypeID<T>(&success);
 80106b4:	f10d 0117 	add.w	r1, sp, #23
 80106b8:	4620      	mov	r0, r4
 80106ba:	f7ff fa41 	bl	800fb40 <_ZN9Registers9GetTypeIDImEEhPb>
	if (!success) {
 80106be:	f89d 5017 	ldrb.w	r5, [sp, #23]
 80106c2:	b19d      	cbz	r5, 80106ec <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x68>
	if (target_register->register_info.type != registered_type) {
 80106c4:	7933      	ldrb	r3, [r6, #4]
 80106c6:	4283      	cmp	r3, r0
 80106c8:	d114      	bne.n	80106f4 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x70>
	if (callbacks[target_register->register_info.type] == NULL) {// check supported type
 80106ca:	3304      	adds	r3, #4
 80106cc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80106d0:	b1ab      	cbz	r3, 80106fe <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x7a>
	if (target_register->access.write) {
 80106d2:	7a35      	ldrb	r5, [r6, #8]
 80106d4:	b9c5      	cbnz	r5, 8010708 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x84>
	osSemaphoreRelease(RegistersSemaphore);
 80106d6:	6820      	ldr	r0, [r4, #0]
 80106d8:	f7fc f922 	bl	800c920 <osSemaphoreRelease>
	return false;
 80106dc:	e002      	b.n	80106e4 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x60>
		osSemaphoreRelease(RegistersSemaphore);
 80106de:	6820      	ldr	r0, [r4, #0]
 80106e0:	f7fc f91e 	bl	800c920 <osSemaphoreRelease>
}
 80106e4:	4628      	mov	r0, r5
 80106e6:	b007      	add	sp, #28
 80106e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		osSemaphoreRelease(RegistersSemaphore);
 80106ec:	6820      	ldr	r0, [r4, #0]
 80106ee:	f7fc f917 	bl	800c920 <osSemaphoreRelease>
		return false;
 80106f2:	e7f7      	b.n	80106e4 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x60>
		osSemaphoreRelease(RegistersSemaphore);
 80106f4:	6820      	ldr	r0, [r4, #0]
 80106f6:	f7fc f913 	bl	800c920 <osSemaphoreRelease>
		return false;
 80106fa:	2500      	movs	r5, #0
 80106fc:	e7f2      	b.n	80106e4 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x60>
		osSemaphoreRelease(RegistersSemaphore);
 80106fe:	6820      	ldr	r0, [r4, #0]
 8010700:	f7fc f90e 	bl	800c920 <osSemaphoreRelease>
		return false;
 8010704:	2500      	movs	r5, #0
 8010706:	e7ed      	b.n	80106e4 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x60>
		success = false;
 8010708:	2200      	movs	r2, #0
 801070a:	f88d 2017 	strb.w	r2, [sp, #23]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801070e:	8975      	ldrh	r5, [r6, #10]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010710:	6858      	ldr	r0, [r3, #4]
 8010712:	681a      	ldr	r2, [r3, #0]
 8010714:	1a80      	subs	r0, r0, r2
 8010716:	1102      	asrs	r2, r0, #4
	if (__n >= this->size())
 8010718:	ebb5 1f20 	cmp.w	r5, r0, asr #4
 801071c:	d236      	bcs.n	801078c <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x108>
	return *(this->_M_impl._M_start + __n);
 801071e:	6819      	ldr	r1, [r3, #0]
 8010720:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8010724:	ad01      	add	r5, sp, #4
 8010726:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8010728:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801072c:	f1ba 0f00 	cmp.w	sl, #0
 8010730:	d006      	beq.n	8010740 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xbc>
 8010732:	68f3      	ldr	r3, [r6, #12]
 8010734:	b123      	cbz	r3, 8010740 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xbc>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8010736:	f04f 31ff 	mov.w	r1, #4294967295
 801073a:	6818      	ldr	r0, [r3, #0]
 801073c:	f7fc f8bc 	bl	800c8b8 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 8010740:	7833      	ldrb	r3, [r6, #0]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d03d      	beq.n	80107c2 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x13e>
			success = true;
 8010746:	2301      	movs	r3, #1
 8010748:	f88d 3017 	strb.w	r3, [sp, #23]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801074c:	7973      	ldrb	r3, [r6, #5]
 801074e:	b38b      	cbz	r3, 80107b4 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x130>
 8010750:	88f5      	ldrh	r5, [r6, #6]
 8010752:	bb7d      	cbnz	r5, 80107b4 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x130>
				std::vector<T>* register_vector = reinterpret_cast<std::vector<T>*>(callbacks.pointer);
 8010754:	f8dd b004 	ldr.w	fp, [sp, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8010758:	f8db 3000 	ldr.w	r3, [fp]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801075c:	f8db 2004 	ldr.w	r2, [fp, #4]
 8010760:	4293      	cmp	r3, r2
 8010762:	d001      	beq.n	8010768 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xe4>
	    this->_M_impl._M_finish = __pos;
 8010764:	f8cb 3004 	str.w	r3, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010768:	f8db 0004 	ldr.w	r0, [fp, #4]
 801076c:	f8db 3000 	ldr.w	r3, [fp]
 8010770:	1ac2      	subs	r2, r0, r3
 8010772:	1091      	asrs	r1, r2, #2
	if (__new_size > size())
 8010774:	ebb9 0fa2 	cmp.w	r9, r2, asr #2
 8010778:	d80c      	bhi.n	8010794 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x110>
	else if (__new_size < size())
 801077a:	4589      	cmp	r9, r1
 801077c:	d20f      	bcs.n	801079e <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x11a>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 801077e:	eb03 0389 	add.w	r3, r3, r9, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8010782:	4298      	cmp	r0, r3
 8010784:	d00b      	beq.n	801079e <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x11a>
	    this->_M_impl._M_finish = __pos;
 8010786:	f8cb 3004 	str.w	r3, [fp, #4]
      }
 801078a:	e008      	b.n	801079e <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x11a>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801078c:	4629      	mov	r1, r5
 801078e:	4829      	ldr	r0, [pc, #164]	; (8010834 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x1b0>)
 8010790:	f00a fcb5 	bl	801b0fe <_ZSt24__throw_out_of_range_fmtPKcz>
	  _M_default_append(__new_size - size());
 8010794:	eba9 0101 	sub.w	r1, r9, r1
 8010798:	4658      	mov	r0, fp
 801079a:	f7ff fefb 	bl	8010594 <_ZNSt6vectorImSaImEE17_M_default_appendEj>
				for (uint16_t index = 0; index < length; index++) {
 801079e:	454d      	cmp	r5, r9
 80107a0:	d20f      	bcs.n	80107c2 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x13e>
	return *(this->_M_impl._M_start + __n);
 80107a2:	f8db 3000 	ldr.w	r3, [fp]
					(*register_vector)[index] = value[index];
 80107a6:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 80107aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
				for (uint16_t index = 0; index < length; index++) {
 80107ae:	3501      	adds	r5, #1
 80107b0:	b2ad      	uxth	r5, r5
 80107b2:	e7f4      	b.n	801079e <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x11a>
			} else if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 80107b4:	b10b      	cbz	r3, 80107ba <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x136>
 80107b6:	88f2      	ldrh	r2, [r6, #6]
 80107b8:	b99a      	cbnz	r2, 80107e2 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x15e>
				*(callbacks.pointer) = *value;
 80107ba:	f8d8 2000 	ldr.w	r2, [r8]
 80107be:	9b01      	ldr	r3, [sp, #4]
 80107c0:	601a      	str	r2, [r3, #0]
		if (target_register->mode.callbacks) {
 80107c2:	7873      	ldrb	r3, [r6, #1]
 80107c4:	b343      	cbz	r3, 8010818 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x194>
			if (callbacks.write != NULL) {
 80107c6:	9d03      	ldr	r5, [sp, #12]
 80107c8:	b335      	cbz	r5, 8010818 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x194>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 80107ca:	7973      	ldrb	r3, [r6, #5]
 80107cc:	b19b      	cbz	r3, 80107f6 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x172>
 80107ce:	88f2      	ldrh	r2, [r6, #6]
 80107d0:	b98a      	cbnz	r2, 80107f6 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x172>
					success = callbacks.write(callbacks.context, ID, value, length);
 80107d2:	464b      	mov	r3, r9
 80107d4:	4642      	mov	r2, r8
 80107d6:	4639      	mov	r1, r7
 80107d8:	9802      	ldr	r0, [sp, #8]
 80107da:	47a8      	blx	r5
 80107dc:	f88d 0017 	strb.w	r0, [sp, #23]
 80107e0:	e01a      	b.n	8010818 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x194>
				std::copy(&value[0], &value[target_register->register_info.length], callbacks.pointer);
 80107e2:	eb08 0182 	add.w	r1, r8, r2, lsl #2
 80107e6:	9801      	ldr	r0, [sp, #4]
	  const ptrdiff_t _Num = __last - __first;
 80107e8:	0092      	lsls	r2, r2, #2
	  if (_Num)
 80107ea:	4541      	cmp	r1, r8
 80107ec:	d0e9      	beq.n	80107c2 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x13e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80107ee:	4641      	mov	r1, r8
 80107f0:	f00b f88c 	bl	801b90c <memmove>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80107f4:	e7e5      	b.n	80107c2 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x13e>
				} else if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 80107f6:	b143      	cbz	r3, 801080a <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x186>
 80107f8:	88f3      	ldrh	r3, [r6, #6]
 80107fa:	b133      	cbz	r3, 801080a <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x186>
					success = callbacks.write(callbacks.context, ID, value, target_register->register_info.length);
 80107fc:	4642      	mov	r2, r8
 80107fe:	4639      	mov	r1, r7
 8010800:	9802      	ldr	r0, [sp, #8]
 8010802:	47a8      	blx	r5
 8010804:	f88d 0017 	strb.w	r0, [sp, #23]
 8010808:	e006      	b.n	8010818 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x194>
					success = callbacks.write(callbacks.context, ID, value, 1);
 801080a:	2301      	movs	r3, #1
 801080c:	4642      	mov	r2, r8
 801080e:	4639      	mov	r1, r7
 8010810:	9802      	ldr	r0, [sp, #8]
 8010812:	47a8      	blx	r5
 8010814:	f88d 0017 	strb.w	r0, [sp, #23]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8010818:	f1ba 0f00 	cmp.w	sl, #0
 801081c:	d004      	beq.n	8010828 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x1a4>
 801081e:	68f3      	ldr	r3, [r6, #12]
 8010820:	b113      	cbz	r3, 8010828 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x1a4>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8010822:	6818      	ldr	r0, [r3, #0]
 8010824:	f7fc f87c 	bl	800c920 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 8010828:	6820      	ldr	r0, [r4, #0]
 801082a:	f7fc f879 	bl	800c920 <osSemaphoreRelease>
		return success;
 801082e:	f89d 5017 	ldrb.w	r5, [sp, #23]
 8010832:	e757      	b.n	80106e4 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x60>
 8010834:	0801bffc 	.word	0x0801bffc

08010838 <_ZN9Registers19WriteVectorRegisterImEEbtSt6vectorIT_SaIS2_EEb>:
bool Registers::WriteVectorRegister(uint16_t ID, std::vector<T> value, bool use_semaphore) {
 8010838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801083c:	b084      	sub	sp, #16
 801083e:	4604      	mov	r4, r0
 8010840:	460e      	mov	r6, r1
 8010842:	4690      	mov	r8, r2
 8010844:	461f      	mov	r7, r3
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8010846:	f04f 31ff 	mov.w	r1, #4294967295
 801084a:	6800      	ldr	r0, [r0, #0]
 801084c:	f7fc f834 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8010850:	f10d 020f 	add.w	r2, sp, #15
 8010854:	4631      	mov	r1, r6
 8010856:	4620      	mov	r0, r4
 8010858:	f009 fa19 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801085c:	f89d 500f 	ldrb.w	r5, [sp, #15]
 8010860:	b15d      	cbz	r5, 801087a <_ZN9Registers19WriteVectorRegisterImEEbtSt6vectorIT_SaIS2_EEb+0x42>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 8010862:	7943      	ldrb	r3, [r0, #5]
 8010864:	b10b      	cbz	r3, 801086a <_ZN9Registers19WriteVectorRegisterImEEbtSt6vectorIT_SaIS2_EEb+0x32>
 8010866:	88c3      	ldrh	r3, [r0, #6]
 8010868:	b15b      	cbz	r3, 8010882 <_ZN9Registers19WriteVectorRegisterImEEbtSt6vectorIT_SaIS2_EEb+0x4a>
		osSemaphoreRelease(RegistersSemaphore);
 801086a:	6820      	ldr	r0, [r4, #0]
 801086c:	f7fc f858 	bl	800c920 <osSemaphoreRelease>
		return false; // check the register is a vector
 8010870:	2500      	movs	r5, #0
}
 8010872:	4628      	mov	r0, r5
 8010874:	b004      	add	sp, #16
 8010876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		osSemaphoreRelease(RegistersSemaphore);
 801087a:	6820      	ldr	r0, [r4, #0]
 801087c:	f7fc f850 	bl	800c920 <osSemaphoreRelease>
		return false;
 8010880:	e7f7      	b.n	8010872 <_ZN9Registers19WriteVectorRegisterImEEbtSt6vectorIT_SaIS2_EEb+0x3a>
	osSemaphoreRelease(RegistersSemaphore);
 8010882:	6820      	ldr	r0, [r4, #0]
 8010884:	f7fc f84c 	bl	800c920 <osSemaphoreRelease>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8010888:	f8d8 2000 	ldr.w	r2, [r8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801088c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010890:	1a9b      	subs	r3, r3, r2
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 8010892:	9700      	str	r7, [sp, #0]
 8010894:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8010898:	4631      	mov	r1, r6
 801089a:	4620      	mov	r0, r4
 801089c:	f7ff fef2 	bl	8010684 <_ZN9Registers13WriteRegisterImEEbtPT_tb>
 80108a0:	4605      	mov	r5, r0
 80108a2:	e7e6      	b.n	8010872 <_ZN9Registers19WriteVectorRegisterImEEbtSt6vectorIT_SaIS2_EEb+0x3a>

080108a4 <_ZN13Communication11BuildSingleImEESt6vectorIhSaIhEET_>:
std::vector<uint8_t> Communication::BuildSingle(T input) {
 80108a4:	b530      	push	{r4, r5, lr}
 80108a6:	b085      	sub	sp, #20
 80108a8:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 80108aa:	2400      	movs	r4, #0
 80108ac:	6004      	str	r4, [r0, #0]
 80108ae:	6044      	str	r4, [r0, #4]
 80108b0:	6084      	str	r4, [r0, #8]
    uint64_t reinterpreted_input = 0;
 80108b2:	2000      	movs	r0, #0
 80108b4:	2100      	movs	r1, #0
 80108b6:	e9cd 0100 	strd	r0, r1, [sp]
    std::memcpy(&reinterpreted_input, &input, sizeof(T)); // this is mandatory to get rid of the memory alignment problem. A simple cast can't work here
 80108ba:	9200      	str	r2, [sp, #0]
 80108bc:	e019      	b.n	80108f2 <_ZN13Communication11BuildSingleImEESt6vectorIhSaIhEET_+0x4e>
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 80108be:	f1c4 0303 	rsb	r3, r4, #3
 80108c2:	00da      	lsls	r2, r3, #3
 80108c4:	9801      	ldr	r0, [sp, #4]
 80108c6:	f1c2 0c20 	rsb	ip, r2, #32
 80108ca:	f1a2 0120 	sub.w	r1, r2, #32
 80108ce:	9b00      	ldr	r3, [sp, #0]
 80108d0:	40d3      	lsrs	r3, r2
 80108d2:	fa00 fc0c 	lsl.w	ip, r0, ip
 80108d6:	ea43 030c 	orr.w	r3, r3, ip
 80108da:	fa20 f101 	lsr.w	r1, r0, r1
 80108de:	430b      	orrs	r3, r1
 80108e0:	f88d 300f 	strb.w	r3, [sp, #15]
      { emplace_back(std::move(__x)); }
 80108e4:	f10d 010f 	add.w	r1, sp, #15
 80108e8:	4628      	mov	r0, r5
 80108ea:	f7fe fdef 	bl	800f4cc <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	for (uint8_t index = 0; index < type_length; index++) {
 80108ee:	3401      	adds	r4, #1
 80108f0:	b2e4      	uxtb	r4, r4
 80108f2:	2c03      	cmp	r4, #3
 80108f4:	d9e3      	bls.n	80108be <_ZN13Communication11BuildSingleImEESt6vectorIhSaIhEET_+0x1a>
}
 80108f6:	4628      	mov	r0, r5
 80108f8:	b005      	add	sp, #20
 80108fa:	bd30      	pop	{r4, r5, pc}

080108fc <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>:
      if (__n != 0)
 80108fc:	2900      	cmp	r1, #0
 80108fe:	d071      	beq.n	80109e4 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0xe8>
    vector<_Tp, _Alloc>::
 8010900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010904:	b083      	sub	sp, #12
 8010906:	4605      	mov	r5, r0
 8010908:	460e      	mov	r6, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801090a:	6843      	ldr	r3, [r0, #4]
 801090c:	6804      	ldr	r4, [r0, #0]
 801090e:	1b1c      	subs	r4, r3, r4
 8010910:	10a7      	asrs	r7, r4, #2
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 8010912:	6882      	ldr	r2, [r0, #8]
					 - this->_M_impl._M_finish);
 8010914:	1ad2      	subs	r2, r2, r3
	  if (__navail >= __n)
 8010916:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 801091a:	d80b      	bhi.n	8010934 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x38>
      std::__fill_a(__first, __first + __n, __value);
 801091c:	eb03 0681 	add.w	r6, r3, r1, lsl #2
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8010920:	e002      	b.n	8010928 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x2c>
	*__first = __tmp;
 8010922:	2200      	movs	r2, #0
 8010924:	f843 2b04 	str.w	r2, [r3], #4
      for (; __first != __last; ++__first)
 8010928:	429e      	cmp	r6, r3
 801092a:	d1fa      	bne.n	8010922 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x26>
	      this->_M_impl._M_finish =
 801092c:	606e      	str	r6, [r5, #4]
    }
 801092e:	b003      	add	sp, #12
 8010930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010934:	9100      	str	r1, [sp, #0]
 8010936:	6843      	ldr	r3, [r0, #4]
 8010938:	6802      	ldr	r2, [r0, #0]
 801093a:	1a9a      	subs	r2, r3, r2
 801093c:	1091      	asrs	r1, r2, #2
	if (max_size() - size() < __n)
 801093e:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 8010942:	eba0 02a2 	sub.w	r2, r0, r2, asr #2
 8010946:	42b2      	cmp	r2, r6
 8010948:	d31e      	bcc.n	8010988 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x8c>
	const size_type __len = size() + (std::max)(size(), __n);
 801094a:	9101      	str	r1, [sp, #4]
      if (__a < __b)
 801094c:	42b1      	cmp	r1, r6
 801094e:	d31e      	bcc.n	801098e <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x92>
      return __a;
 8010950:	aa01      	add	r2, sp, #4
 8010952:	6812      	ldr	r2, [r2, #0]
 8010954:	eb01 0802 	add.w	r8, r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010958:	682a      	ldr	r2, [r5, #0]
 801095a:	1a9b      	subs	r3, r3, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801095c:	ebb8 0fa3 	cmp.w	r8, r3, asr #2
 8010960:	d317      	bcc.n	8010992 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x96>
 8010962:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
 8010966:	d217      	bcs.n	8010998 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x9c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010968:	f1b8 0f00 	cmp.w	r8, #0
 801096c:	d019      	beq.n	80109a2 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0xa6>
	if (__n > this->_M_max_size())
 801096e:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
 8010972:	d214      	bcs.n	801099e <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0xa2>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8010974:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8010978:	f00a fb0a 	bl	801af90 <_Znwj>
 801097c:	4681      	mov	r9, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 801097e:	eb09 0304 	add.w	r3, r9, r4
      std::__fill_a(__first, __first + __n, __value);
 8010982:	eb03 0186 	add.w	r1, r3, r6, lsl #2
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8010986:	e012      	b.n	80109ae <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0xb2>
	  __throw_length_error(__N(__s));
 8010988:	4817      	ldr	r0, [pc, #92]	; (80109e8 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0xec>)
 801098a:	f00a fbb5 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 801098e:	466a      	mov	r2, sp
 8010990:	e7df      	b.n	8010952 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x56>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010992:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 8010996:	e7e7      	b.n	8010968 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x6c>
 8010998:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 801099c:	e7e4      	b.n	8010968 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x6c>
	  std::__throw_bad_alloc();
 801099e:	f00a fba5 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80109a2:	f04f 0900 	mov.w	r9, #0
 80109a6:	e7ea      	b.n	801097e <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x82>
	*__first = __tmp;
 80109a8:	2200      	movs	r2, #0
 80109aa:	f843 2b04 	str.w	r2, [r3], #4
      for (; __first != __last; ++__first)
 80109ae:	4299      	cmp	r1, r3
 80109b0:	d1fa      	bne.n	80109a8 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0xac>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 80109b2:	6829      	ldr	r1, [r5, #0]
 80109b4:	686a      	ldr	r2, [r5, #4]
      ptrdiff_t __count = __last - __first;
 80109b6:	1a52      	subs	r2, r2, r1
      if (__count > 0)
 80109b8:	2a00      	cmp	r2, #0
 80109ba:	dc0f      	bgt.n	80109dc <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0xe0>
	      _M_deallocate(this->_M_impl._M_start,
 80109bc:	6828      	ldr	r0, [r5, #0]
			    this->_M_impl._M_end_of_storage
 80109be:	68a9      	ldr	r1, [r5, #8]
			    - this->_M_impl._M_start);
 80109c0:	1a09      	subs	r1, r1, r0
	if (__p)
 80109c2:	b108      	cbz	r0, 80109c8 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0xcc>
	::operator delete(__p
 80109c4:	f00a face 	bl	801af64 <_ZdlPvj>
	      this->_M_impl._M_start = __new_start;
 80109c8:	f8c5 9000 	str.w	r9, [r5]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 80109cc:	19b9      	adds	r1, r7, r6
 80109ce:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80109d2:	6069      	str	r1, [r5, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 80109d4:	eb09 0088 	add.w	r0, r9, r8, lsl #2
 80109d8:	60a8      	str	r0, [r5, #8]
    }
 80109da:	e7a8      	b.n	801092e <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x32>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80109dc:	4648      	mov	r0, r9
 80109de:	f00a ff95 	bl	801b90c <memmove>
 80109e2:	e7eb      	b.n	80109bc <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0xc0>
 80109e4:	4770      	bx	lr
 80109e6:	bf00      	nop
 80109e8:	0801c048 	.word	0x0801c048

080109ec <_ZN9Registers13WriteRegisterIfEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 80109ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109f0:	b087      	sub	sp, #28
 80109f2:	4604      	mov	r4, r0
 80109f4:	460f      	mov	r7, r1
 80109f6:	4690      	mov	r8, r2
 80109f8:	4699      	mov	r9, r3
 80109fa:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80109fe:	f04f 31ff 	mov.w	r1, #4294967295
 8010a02:	6800      	ldr	r0, [r0, #0]
 8010a04:	f7fb ff58 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8010a08:	f10d 0217 	add.w	r2, sp, #23
 8010a0c:	4639      	mov	r1, r7
 8010a0e:	4620      	mov	r0, r4
 8010a10:	f009 f93d 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8010a14:	f89d 5017 	ldrb.w	r5, [sp, #23]
 8010a18:	b1ad      	cbz	r5, 8010a46 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x5a>
 8010a1a:	4606      	mov	r6, r0
	uint8_t registered_type = GetTypeID<T>(&success);
 8010a1c:	f10d 0117 	add.w	r1, sp, #23
 8010a20:	4620      	mov	r0, r4
 8010a22:	f7ff fa2b 	bl	800fe7c <_ZN9Registers9GetTypeIDIfEEhPb>
	if (!success) {
 8010a26:	f89d 5017 	ldrb.w	r5, [sp, #23]
 8010a2a:	b19d      	cbz	r5, 8010a54 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x68>
	if (target_register->register_info.type != registered_type) {
 8010a2c:	7933      	ldrb	r3, [r6, #4]
 8010a2e:	4283      	cmp	r3, r0
 8010a30:	d114      	bne.n	8010a5c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x70>
	if (callbacks[target_register->register_info.type] == NULL) {// check supported type
 8010a32:	3304      	adds	r3, #4
 8010a34:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8010a38:	b1ab      	cbz	r3, 8010a66 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x7a>
	if (target_register->access.write) {
 8010a3a:	7a35      	ldrb	r5, [r6, #8]
 8010a3c:	b9c5      	cbnz	r5, 8010a70 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x84>
	osSemaphoreRelease(RegistersSemaphore);
 8010a3e:	6820      	ldr	r0, [r4, #0]
 8010a40:	f7fb ff6e 	bl	800c920 <osSemaphoreRelease>
	return false;
 8010a44:	e002      	b.n	8010a4c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x60>
		osSemaphoreRelease(RegistersSemaphore);
 8010a46:	6820      	ldr	r0, [r4, #0]
 8010a48:	f7fb ff6a 	bl	800c920 <osSemaphoreRelease>
}
 8010a4c:	4628      	mov	r0, r5
 8010a4e:	b007      	add	sp, #28
 8010a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		osSemaphoreRelease(RegistersSemaphore);
 8010a54:	6820      	ldr	r0, [r4, #0]
 8010a56:	f7fb ff63 	bl	800c920 <osSemaphoreRelease>
		return false;
 8010a5a:	e7f7      	b.n	8010a4c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x60>
		osSemaphoreRelease(RegistersSemaphore);
 8010a5c:	6820      	ldr	r0, [r4, #0]
 8010a5e:	f7fb ff5f 	bl	800c920 <osSemaphoreRelease>
		return false;
 8010a62:	2500      	movs	r5, #0
 8010a64:	e7f2      	b.n	8010a4c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x60>
		osSemaphoreRelease(RegistersSemaphore);
 8010a66:	6820      	ldr	r0, [r4, #0]
 8010a68:	f7fb ff5a 	bl	800c920 <osSemaphoreRelease>
		return false;
 8010a6c:	2500      	movs	r5, #0
 8010a6e:	e7ed      	b.n	8010a4c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x60>
		success = false;
 8010a70:	2200      	movs	r2, #0
 8010a72:	f88d 2017 	strb.w	r2, [sp, #23]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8010a76:	8975      	ldrh	r5, [r6, #10]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010a78:	6858      	ldr	r0, [r3, #4]
 8010a7a:	681a      	ldr	r2, [r3, #0]
 8010a7c:	1a80      	subs	r0, r0, r2
 8010a7e:	1102      	asrs	r2, r0, #4
	if (__n >= this->size())
 8010a80:	ebb5 1f20 	cmp.w	r5, r0, asr #4
 8010a84:	d236      	bcs.n	8010af4 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x108>
	return *(this->_M_impl._M_start + __n);
 8010a86:	6819      	ldr	r1, [r3, #0]
 8010a88:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8010a8c:	ad01      	add	r5, sp, #4
 8010a8e:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8010a90:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8010a94:	f1ba 0f00 	cmp.w	sl, #0
 8010a98:	d006      	beq.n	8010aa8 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xbc>
 8010a9a:	68f3      	ldr	r3, [r6, #12]
 8010a9c:	b123      	cbz	r3, 8010aa8 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xbc>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8010a9e:	f04f 31ff 	mov.w	r1, #4294967295
 8010aa2:	6818      	ldr	r0, [r3, #0]
 8010aa4:	f7fb ff08 	bl	800c8b8 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 8010aa8:	7833      	ldrb	r3, [r6, #0]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d03f      	beq.n	8010b2e <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x142>
			success = true;
 8010aae:	2301      	movs	r3, #1
 8010ab0:	f88d 3017 	strb.w	r3, [sp, #23]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8010ab4:	7973      	ldrb	r3, [r6, #5]
 8010ab6:	b39b      	cbz	r3, 8010b20 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x134>
 8010ab8:	88f5      	ldrh	r5, [r6, #6]
 8010aba:	bb8d      	cbnz	r5, 8010b20 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x134>
				std::vector<T>* register_vector = reinterpret_cast<std::vector<T>*>(callbacks.pointer);
 8010abc:	f8dd b004 	ldr.w	fp, [sp, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8010ac0:	f8db 3000 	ldr.w	r3, [fp]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8010ac4:	f8db 2004 	ldr.w	r2, [fp, #4]
 8010ac8:	4293      	cmp	r3, r2
 8010aca:	d001      	beq.n	8010ad0 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xe4>
	    this->_M_impl._M_finish = __pos;
 8010acc:	f8cb 3004 	str.w	r3, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010ad0:	f8db 0004 	ldr.w	r0, [fp, #4]
 8010ad4:	f8db 3000 	ldr.w	r3, [fp]
 8010ad8:	1ac2      	subs	r2, r0, r3
 8010ada:	1091      	asrs	r1, r2, #2
	if (__new_size > size())
 8010adc:	ebb9 0fa2 	cmp.w	r9, r2, asr #2
 8010ae0:	d80c      	bhi.n	8010afc <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x110>
	else if (__new_size < size())
 8010ae2:	4589      	cmp	r9, r1
 8010ae4:	d20f      	bcs.n	8010b06 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x11a>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8010ae6:	eb03 0389 	add.w	r3, r3, r9, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8010aea:	4298      	cmp	r0, r3
 8010aec:	d00b      	beq.n	8010b06 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x11a>
	    this->_M_impl._M_finish = __pos;
 8010aee:	f8cb 3004 	str.w	r3, [fp, #4]
      }
 8010af2:	e008      	b.n	8010b06 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x11a>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8010af4:	4629      	mov	r1, r5
 8010af6:	482a      	ldr	r0, [pc, #168]	; (8010ba0 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x1b4>)
 8010af8:	f00a fb01 	bl	801b0fe <_ZSt24__throw_out_of_range_fmtPKcz>
	  _M_default_append(__new_size - size());
 8010afc:	eba9 0101 	sub.w	r1, r9, r1
 8010b00:	4658      	mov	r0, fp
 8010b02:	f7ff fefb 	bl	80108fc <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>
				for (uint16_t index = 0; index < length; index++) {
 8010b06:	454d      	cmp	r5, r9
 8010b08:	d211      	bcs.n	8010b2e <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x142>
	return *(this->_M_impl._M_start + __n);
 8010b0a:	f8db 3000 	ldr.w	r3, [fp]
 8010b0e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
					(*register_vector)[index] = value[index];
 8010b12:	eb08 0285 	add.w	r2, r8, r5, lsl #2
 8010b16:	6812      	ldr	r2, [r2, #0]
 8010b18:	601a      	str	r2, [r3, #0]
				for (uint16_t index = 0; index < length; index++) {
 8010b1a:	3501      	adds	r5, #1
 8010b1c:	b2ad      	uxth	r5, r5
 8010b1e:	e7f2      	b.n	8010b06 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x11a>
			} else if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8010b20:	b10b      	cbz	r3, 8010b26 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x13a>
 8010b22:	88f2      	ldrh	r2, [r6, #6]
 8010b24:	b99a      	cbnz	r2, 8010b4e <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x162>
				*(callbacks.pointer) = *value;
 8010b26:	f8d8 2000 	ldr.w	r2, [r8]
 8010b2a:	9b01      	ldr	r3, [sp, #4]
 8010b2c:	601a      	str	r2, [r3, #0]
		if (target_register->mode.callbacks) {
 8010b2e:	7873      	ldrb	r3, [r6, #1]
 8010b30:	b343      	cbz	r3, 8010b84 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x198>
			if (callbacks.write != NULL) {
 8010b32:	9d03      	ldr	r5, [sp, #12]
 8010b34:	b335      	cbz	r5, 8010b84 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x198>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8010b36:	7973      	ldrb	r3, [r6, #5]
 8010b38:	b19b      	cbz	r3, 8010b62 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x176>
 8010b3a:	88f2      	ldrh	r2, [r6, #6]
 8010b3c:	b98a      	cbnz	r2, 8010b62 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x176>
					success = callbacks.write(callbacks.context, ID, value, length);
 8010b3e:	464b      	mov	r3, r9
 8010b40:	4642      	mov	r2, r8
 8010b42:	4639      	mov	r1, r7
 8010b44:	9802      	ldr	r0, [sp, #8]
 8010b46:	47a8      	blx	r5
 8010b48:	f88d 0017 	strb.w	r0, [sp, #23]
 8010b4c:	e01a      	b.n	8010b84 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x198>
				std::copy(&value[0], &value[target_register->register_info.length], callbacks.pointer);
 8010b4e:	eb08 0182 	add.w	r1, r8, r2, lsl #2
 8010b52:	9801      	ldr	r0, [sp, #4]
	  const ptrdiff_t _Num = __last - __first;
 8010b54:	0092      	lsls	r2, r2, #2
	  if (_Num)
 8010b56:	4541      	cmp	r1, r8
 8010b58:	d0e9      	beq.n	8010b2e <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x142>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8010b5a:	4641      	mov	r1, r8
 8010b5c:	f00a fed6 	bl	801b90c <memmove>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8010b60:	e7e5      	b.n	8010b2e <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x142>
				} else if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8010b62:	b143      	cbz	r3, 8010b76 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x18a>
 8010b64:	88f3      	ldrh	r3, [r6, #6]
 8010b66:	b133      	cbz	r3, 8010b76 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x18a>
					success = callbacks.write(callbacks.context, ID, value, target_register->register_info.length);
 8010b68:	4642      	mov	r2, r8
 8010b6a:	4639      	mov	r1, r7
 8010b6c:	9802      	ldr	r0, [sp, #8]
 8010b6e:	47a8      	blx	r5
 8010b70:	f88d 0017 	strb.w	r0, [sp, #23]
 8010b74:	e006      	b.n	8010b84 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x198>
					success = callbacks.write(callbacks.context, ID, value, 1);
 8010b76:	2301      	movs	r3, #1
 8010b78:	4642      	mov	r2, r8
 8010b7a:	4639      	mov	r1, r7
 8010b7c:	9802      	ldr	r0, [sp, #8]
 8010b7e:	47a8      	blx	r5
 8010b80:	f88d 0017 	strb.w	r0, [sp, #23]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8010b84:	f1ba 0f00 	cmp.w	sl, #0
 8010b88:	d004      	beq.n	8010b94 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x1a8>
 8010b8a:	68f3      	ldr	r3, [r6, #12]
 8010b8c:	b113      	cbz	r3, 8010b94 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x1a8>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8010b8e:	6818      	ldr	r0, [r3, #0]
 8010b90:	f7fb fec6 	bl	800c920 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 8010b94:	6820      	ldr	r0, [r4, #0]
 8010b96:	f7fb fec3 	bl	800c920 <osSemaphoreRelease>
		return success;
 8010b9a:	f89d 5017 	ldrb.w	r5, [sp, #23]
 8010b9e:	e755      	b.n	8010a4c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x60>
 8010ba0:	0801bffc 	.word	0x0801bffc

08010ba4 <_ZN9Registers19WriteVectorRegisterIfEEbtSt6vectorIT_SaIS2_EEb>:
bool Registers::WriteVectorRegister(uint16_t ID, std::vector<T> value, bool use_semaphore) {
 8010ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ba8:	b084      	sub	sp, #16
 8010baa:	4604      	mov	r4, r0
 8010bac:	460e      	mov	r6, r1
 8010bae:	4690      	mov	r8, r2
 8010bb0:	461f      	mov	r7, r3
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8010bb2:	f04f 31ff 	mov.w	r1, #4294967295
 8010bb6:	6800      	ldr	r0, [r0, #0]
 8010bb8:	f7fb fe7e 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8010bbc:	f10d 020f 	add.w	r2, sp, #15
 8010bc0:	4631      	mov	r1, r6
 8010bc2:	4620      	mov	r0, r4
 8010bc4:	f009 f863 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8010bc8:	f89d 500f 	ldrb.w	r5, [sp, #15]
 8010bcc:	b15d      	cbz	r5, 8010be6 <_ZN9Registers19WriteVectorRegisterIfEEbtSt6vectorIT_SaIS2_EEb+0x42>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 8010bce:	7943      	ldrb	r3, [r0, #5]
 8010bd0:	b10b      	cbz	r3, 8010bd6 <_ZN9Registers19WriteVectorRegisterIfEEbtSt6vectorIT_SaIS2_EEb+0x32>
 8010bd2:	88c3      	ldrh	r3, [r0, #6]
 8010bd4:	b15b      	cbz	r3, 8010bee <_ZN9Registers19WriteVectorRegisterIfEEbtSt6vectorIT_SaIS2_EEb+0x4a>
		osSemaphoreRelease(RegistersSemaphore);
 8010bd6:	6820      	ldr	r0, [r4, #0]
 8010bd8:	f7fb fea2 	bl	800c920 <osSemaphoreRelease>
		return false; // check the register is a vector
 8010bdc:	2500      	movs	r5, #0
}
 8010bde:	4628      	mov	r0, r5
 8010be0:	b004      	add	sp, #16
 8010be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		osSemaphoreRelease(RegistersSemaphore);
 8010be6:	6820      	ldr	r0, [r4, #0]
 8010be8:	f7fb fe9a 	bl	800c920 <osSemaphoreRelease>
		return false;
 8010bec:	e7f7      	b.n	8010bde <_ZN9Registers19WriteVectorRegisterIfEEbtSt6vectorIT_SaIS2_EEb+0x3a>
	osSemaphoreRelease(RegistersSemaphore);
 8010bee:	6820      	ldr	r0, [r4, #0]
 8010bf0:	f7fb fe96 	bl	800c920 <osSemaphoreRelease>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8010bf4:	f8d8 2000 	ldr.w	r2, [r8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010bf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010bfc:	1a9b      	subs	r3, r3, r2
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 8010bfe:	9700      	str	r7, [sp, #0]
 8010c00:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8010c04:	4631      	mov	r1, r6
 8010c06:	4620      	mov	r0, r4
 8010c08:	f7ff fef0 	bl	80109ec <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 8010c0c:	4605      	mov	r5, r0
 8010c0e:	e7e6      	b.n	8010bde <_ZN9Registers19WriteVectorRegisterIfEEbtSt6vectorIT_SaIS2_EEb+0x3a>

08010c10 <_ZN13Communication11BuildSingleIfEESt6vectorIhSaIhEET_>:
std::vector<uint8_t> Communication::BuildSingle(T input) {
 8010c10:	b530      	push	{r4, r5, lr}
 8010c12:	b087      	sub	sp, #28
 8010c14:	4605      	mov	r5, r0
 8010c16:	ed8d 0a01 	vstr	s0, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010c1a:	2400      	movs	r4, #0
 8010c1c:	6004      	str	r4, [r0, #0]
 8010c1e:	6044      	str	r4, [r0, #4]
 8010c20:	6084      	str	r4, [r0, #8]
    uint64_t reinterpreted_input = 0;
 8010c22:	2200      	movs	r2, #0
 8010c24:	2300      	movs	r3, #0
 8010c26:	e9cd 2302 	strd	r2, r3, [sp, #8]
    std::memcpy(&reinterpreted_input, &input, sizeof(T)); // this is mandatory to get rid of the memory alignment problem. A simple cast can't work here
 8010c2a:	9b01      	ldr	r3, [sp, #4]
 8010c2c:	9302      	str	r3, [sp, #8]
 8010c2e:	e019      	b.n	8010c64 <_ZN13Communication11BuildSingleIfEESt6vectorIhSaIhEET_+0x54>
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8010c30:	f1c4 0303 	rsb	r3, r4, #3
 8010c34:	00da      	lsls	r2, r3, #3
 8010c36:	9803      	ldr	r0, [sp, #12]
 8010c38:	f1c2 0c20 	rsb	ip, r2, #32
 8010c3c:	f1a2 0120 	sub.w	r1, r2, #32
 8010c40:	9b02      	ldr	r3, [sp, #8]
 8010c42:	40d3      	lsrs	r3, r2
 8010c44:	fa00 fc0c 	lsl.w	ip, r0, ip
 8010c48:	ea43 030c 	orr.w	r3, r3, ip
 8010c4c:	fa20 f101 	lsr.w	r1, r0, r1
 8010c50:	430b      	orrs	r3, r1
 8010c52:	f88d 3017 	strb.w	r3, [sp, #23]
      { emplace_back(std::move(__x)); }
 8010c56:	f10d 0117 	add.w	r1, sp, #23
 8010c5a:	4628      	mov	r0, r5
 8010c5c:	f7fe fc36 	bl	800f4cc <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	for (uint8_t index = 0; index < type_length; index++) {
 8010c60:	3401      	adds	r4, #1
 8010c62:	b2e4      	uxtb	r4, r4
 8010c64:	2c03      	cmp	r4, #3
 8010c66:	d9e3      	bls.n	8010c30 <_ZN13Communication11BuildSingleIfEESt6vectorIhSaIhEET_+0x20>
}
 8010c68:	4628      	mov	r0, r5
 8010c6a:	b007      	add	sp, #28
 8010c6c:	bd30      	pop	{r4, r5, pc}

08010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>:
      vector(const vector& __x)
 8010c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c72:	4604      	mov	r4, r0
 8010c74:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010c76:	6848      	ldr	r0, [r1, #4]
 8010c78:	680e      	ldr	r6, [r1, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	6023      	str	r3, [r4, #0]
 8010c7e:	6063      	str	r3, [r4, #4]
 8010c80:	60a3      	str	r3, [r4, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010c82:	1b86      	subs	r6, r0, r6
 8010c84:	d01b      	beq.n	8010cbe <_ZNSt6vectorIhSaIhEEC1ERKS1_+0x50>
	if (__n > this->_M_max_size())
 8010c86:	429e      	cmp	r6, r3
 8010c88:	db17      	blt.n	8010cba <_ZNSt6vectorIhSaIhEEC1ERKS1_+0x4c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8010c8a:	4630      	mov	r0, r6
 8010c8c:	f00a f980 	bl	801af90 <_Znwj>
	this->_M_impl._M_start = this->_M_allocate(__n);
 8010c90:	6020      	str	r0, [r4, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8010c92:	6060      	str	r0, [r4, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8010c94:	4430      	add	r0, r6
 8010c96:	60a0      	str	r0, [r4, #8]
      : _M_current(__i) { }
 8010c98:	f8d5 8004 	ldr.w	r8, [r5, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8010c9c:	6827      	ldr	r7, [r4, #0]
      return std::__niter_wrap(__result,
 8010c9e:	6828      	ldr	r0, [r5, #0]
 8010ca0:	f7f0 ff09 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8010ca4:	4606      	mov	r6, r0
 8010ca6:	4640      	mov	r0, r8
 8010ca8:	f7f0 ff05 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8010cac:	1b85      	subs	r5, r0, r6
 8010cae:	d108      	bne.n	8010cc2 <_ZNSt6vectorIhSaIhEEC1ERKS1_+0x54>
	  return __result + _Num;
 8010cb0:	443d      	add	r5, r7
	this->_M_impl._M_finish =
 8010cb2:	6065      	str	r5, [r4, #4]
      }
 8010cb4:	4620      	mov	r0, r4
 8010cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  std::__throw_bad_alloc();
 8010cba:	f00a fa17 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010cbe:	2000      	movs	r0, #0
 8010cc0:	e7e6      	b.n	8010c90 <_ZNSt6vectorIhSaIhEEC1ERKS1_+0x22>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8010cc2:	462a      	mov	r2, r5
 8010cc4:	4631      	mov	r1, r6
 8010cc6:	4638      	mov	r0, r7
 8010cc8:	f00a fe20 	bl	801b90c <memmove>
 8010ccc:	e7f0      	b.n	8010cb0 <_ZNSt6vectorIhSaIhEEC1ERKS1_+0x42>

08010cce <_ZNSt6vectorIhSaIhEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 8010cce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cd2:	4604      	mov	r4, r0
      if (&__x != this)
 8010cd4:	4281      	cmp	r1, r0
 8010cd6:	d023      	beq.n	8010d20 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x52>
 8010cd8:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010cda:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8010cde:	f8d1 8000 	ldr.w	r8, [r1]
 8010ce2:	eba9 0608 	sub.w	r6, r9, r8
      { return size_type(this->_M_impl._M_end_of_storage
 8010ce6:	6883      	ldr	r3, [r0, #8]
			 - this->_M_impl._M_start); }
 8010ce8:	6807      	ldr	r7, [r0, #0]
 8010cea:	1bdb      	subs	r3, r3, r7
	  if (__xlen > capacity())
 8010cec:	42b3      	cmp	r3, r6
 8010cee:	d31a      	bcc.n	8010d26 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x58>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010cf0:	6842      	ldr	r2, [r0, #4]
 8010cf2:	1bd2      	subs	r2, r2, r7
	  else if (size() >= __xlen)
 8010cf4:	4296      	cmp	r6, r2
 8010cf6:	d83d      	bhi.n	8010d74 <_ZNSt6vectorIhSaIhEEaSERKS1_+0xa6>
      return std::__niter_wrap(__result,
 8010cf8:	4640      	mov	r0, r8
 8010cfa:	f7f0 fedc 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8010cfe:	4680      	mov	r8, r0
 8010d00:	4648      	mov	r0, r9
 8010d02:	f7f0 fed8 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8010d06:	4605      	mov	r5, r0
 8010d08:	4638      	mov	r0, r7
 8010d0a:	f7f0 fed3 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
	  if (_Num)
 8010d0e:	ebb5 0208 	subs.w	r2, r5, r8
 8010d12:	d12b      	bne.n	8010d6c <_ZNSt6vectorIhSaIhEEaSERKS1_+0x9e>
    { return __from + (__res - std::__niter_base(__from)); }
 8010d14:	4638      	mov	r0, r7
 8010d16:	f7f0 fecd 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8010d1a:	6823      	ldr	r3, [r4, #0]
 8010d1c:	4433      	add	r3, r6
 8010d1e:	6063      	str	r3, [r4, #4]
    }
 8010d20:	4620      	mov	r0, r4
 8010d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010d26:	b1d6      	cbz	r6, 8010d5e <_ZNSt6vectorIhSaIhEEaSERKS1_+0x90>
	if (__n > this->_M_max_size())
 8010d28:	2e00      	cmp	r6, #0
 8010d2a:	db16      	blt.n	8010d5a <_ZNSt6vectorIhSaIhEEaSERKS1_+0x8c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8010d2c:	4630      	mov	r0, r6
 8010d2e:	f00a f92f 	bl	801af90 <_Znwj>
 8010d32:	4605      	mov	r5, r0
      return std::__niter_wrap(__result,
 8010d34:	4640      	mov	r0, r8
 8010d36:	f7f0 febe 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8010d3a:	4607      	mov	r7, r0
 8010d3c:	4648      	mov	r0, r9
 8010d3e:	f7f0 feba 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8010d42:	1bc2      	subs	r2, r0, r7
 8010d44:	d10d      	bne.n	8010d62 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x94>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8010d46:	6820      	ldr	r0, [r4, #0]
			    this->_M_impl._M_end_of_storage
 8010d48:	68a1      	ldr	r1, [r4, #8]
			    - this->_M_impl._M_start);
 8010d4a:	1a09      	subs	r1, r1, r0
	if (__p)
 8010d4c:	b108      	cbz	r0, 8010d52 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x84>
	::operator delete(__p
 8010d4e:	f00a f909 	bl	801af64 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 8010d52:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8010d54:	4435      	add	r5, r6
 8010d56:	60a5      	str	r5, [r4, #8]
 8010d58:	e7df      	b.n	8010d1a <_ZNSt6vectorIhSaIhEEaSERKS1_+0x4c>
	  std::__throw_bad_alloc();
 8010d5a:	f00a f9c7 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010d5e:	2500      	movs	r5, #0
 8010d60:	e7e8      	b.n	8010d34 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x66>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8010d62:	4639      	mov	r1, r7
 8010d64:	4628      	mov	r0, r5
 8010d66:	f00a fdd1 	bl	801b90c <memmove>
 8010d6a:	e7ec      	b.n	8010d46 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x78>
 8010d6c:	4641      	mov	r1, r8
 8010d6e:	f00a fdcd 	bl	801b90c <memmove>
 8010d72:	e7cf      	b.n	8010d14 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x46>
	  if (_Num)
 8010d74:	b952      	cbnz	r2, 8010d8c <_ZNSt6vectorIhSaIhEEaSERKS1_+0xbe>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8010d76:	6829      	ldr	r1, [r5, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010d78:	6860      	ldr	r0, [r4, #4]
 8010d7a:	6823      	ldr	r3, [r4, #0]
 8010d7c:	1ac3      	subs	r3, r0, r3
 8010d7e:	4419      	add	r1, r3
					  __x._M_impl._M_finish,
 8010d80:	686a      	ldr	r2, [r5, #4]
 8010d82:	1a52      	subs	r2, r2, r1
 8010d84:	d0c9      	beq.n	8010d1a <_ZNSt6vectorIhSaIhEEaSERKS1_+0x4c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8010d86:	f00a fdc1 	bl	801b90c <memmove>
    { return std::uninitialized_copy(__first, __last, __result); }
 8010d8a:	e7c6      	b.n	8010d1a <_ZNSt6vectorIhSaIhEEaSERKS1_+0x4c>
 8010d8c:	4641      	mov	r1, r8
 8010d8e:	4638      	mov	r0, r7
 8010d90:	f00a fdbc 	bl	801b90c <memmove>
 8010d94:	e7ef      	b.n	8010d76 <_ZNSt6vectorIhSaIhEEaSERKS1_+0xa8>

08010d96 <_ZN13Communication12BuildTVectorIhEESt6vectorIT_SaIS2_EE14MessageElementPS2_>:
std::vector<T> Communication::BuildTVector(MessageElement element, T* data) {
 8010d96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d98:	b091      	sub	sp, #68	; 0x44
 8010d9a:	4604      	mov	r4, r0
 8010d9c:	461e      	mov	r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010d9e:	2000      	movs	r0, #0
 8010da0:	6020      	str	r0, [r4, #0]
 8010da2:	6060      	str	r0, [r4, #4]
 8010da4:	60a0      	str	r0, [r4, #8]
	if (not element.element_register.isArray) {// single case
 8010da6:	78d0      	ldrb	r0, [r2, #3]
 8010da8:	b148      	cbz	r0, 8010dbe <_ZN13Communication12BuildTVectorIhEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x28>
	} else if (element.element_register.isArray && element.element_register.length > 0) // array case
 8010daa:	8895      	ldrh	r5, [r2, #4]
 8010dac:	2d00      	cmp	r5, #0
 8010dae:	d148      	bne.n	8010e42 <_ZN13Communication12BuildTVectorIhEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0xac>
	else if (element.element_register.isArray && element.element_register.length == 0) // vector case
 8010db0:	8893      	ldrh	r3, [r2, #4]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	f000 8085 	beq.w	8010ec2 <_ZN13Communication12BuildTVectorIhEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x12c>
}
 8010db8:	4620      	mov	r0, r4
 8010dba:	b011      	add	sp, #68	; 0x44
 8010dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		vector = std::vector<T>{*data}; // what-if array / vector / ... transform in uint8_t whatever it is
 8010dbe:	781b      	ldrb	r3, [r3, #0]
 8010dc0:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8010dc4:	ab0c      	add	r3, sp, #48	; 0x30
 8010dc6:	930a      	str	r3, [sp, #40]	; 0x28
 8010dc8:	2301      	movs	r3, #1
 8010dca:	930b      	str	r3, [sp, #44]	; 0x2c
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8010dcc:	aa04      	add	r2, sp, #16
 8010dce:	a90a      	add	r1, sp, #40	; 0x28
 8010dd0:	c903      	ldmia	r1, {r0, r1}
 8010dd2:	e882 0003 	stmia.w	r2, {r0, r1}
 8010dd6:	2500      	movs	r5, #0
 8010dd8:	9507      	str	r5, [sp, #28]
 8010dda:	9508      	str	r5, [sp, #32]
 8010ddc:	9509      	str	r5, [sp, #36]	; 0x24
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8010dde:	4618      	mov	r0, r3
 8010de0:	f00a f8d6 	bl	801af90 <_Znwj>
 8010de4:	4603      	mov	r3, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8010de6:	9007      	str	r0, [sp, #28]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8010de8:	1c42      	adds	r2, r0, #1
 8010dea:	9209      	str	r2, [sp, #36]	; 0x24
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8010dec:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8010df0:	7001      	strb	r1, [r0, #0]
	  this->_M_impl._M_finish =
 8010df2:	9208      	str	r2, [sp, #32]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010df4:	9501      	str	r5, [sp, #4]
 8010df6:	9502      	str	r5, [sp, #8]
 8010df8:	9503      	str	r5, [sp, #12]
 8010dfa:	9504      	str	r5, [sp, #16]
 8010dfc:	9505      	str	r5, [sp, #20]
 8010dfe:	9506      	str	r5, [sp, #24]
	  _M_start = __x._M_start;
 8010e00:	6820      	ldr	r0, [r4, #0]
 8010e02:	9004      	str	r0, [sp, #16]
	  _M_finish = __x._M_finish;
 8010e04:	6866      	ldr	r6, [r4, #4]
 8010e06:	9605      	str	r6, [sp, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
 8010e08:	68a1      	ldr	r1, [r4, #8]
 8010e0a:	9106      	str	r1, [sp, #24]
	  _M_start = __x._M_start;
 8010e0c:	6023      	str	r3, [r4, #0]
	  _M_finish = __x._M_finish;
 8010e0e:	6062      	str	r2, [r4, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8010e10:	60a2      	str	r2, [r4, #8]
	  _M_start = __x._M_start;
 8010e12:	9007      	str	r0, [sp, #28]
	  _M_finish = __x._M_finish;
 8010e14:	9608      	str	r6, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
 8010e16:	9109      	str	r1, [sp, #36]	; 0x24
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010e18:	9504      	str	r5, [sp, #16]
 8010e1a:	9505      	str	r5, [sp, #20]
 8010e1c:	9506      	str	r5, [sp, #24]
	  _M_start = __x._M_start;
 8010e1e:	9001      	str	r0, [sp, #4]
	  _M_finish = __x._M_finish;
 8010e20:	9602      	str	r6, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 8010e22:	9103      	str	r1, [sp, #12]
	  _M_start = __x._M_start;
 8010e24:	9507      	str	r5, [sp, #28]
	  _M_finish = __x._M_finish;
 8010e26:	9508      	str	r5, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
 8010e28:	9509      	str	r5, [sp, #36]	; 0x24
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8010e2a:	1a09      	subs	r1, r1, r0
	if (__p)
 8010e2c:	b108      	cbz	r0, 8010e32 <_ZN13Communication12BuildTVectorIhEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x9c>
	::operator delete(__p
 8010e2e:	f00a f899 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8010e32:	9807      	ldr	r0, [sp, #28]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8010e34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010e36:	1a09      	subs	r1, r1, r0
	if (__p)
 8010e38:	2800      	cmp	r0, #0
 8010e3a:	d0bd      	beq.n	8010db8 <_ZN13Communication12BuildTVectorIhEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x22>
 8010e3c:	f00a f892 	bl	801af64 <_ZdlPvj>
 8010e40:	e7ba      	b.n	8010db8 <_ZN13Communication12BuildTVectorIhEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x22>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010e42:	2300      	movs	r3, #0
 8010e44:	930d      	str	r3, [sp, #52]	; 0x34
 8010e46:	930e      	str	r3, [sp, #56]	; 0x38
 8010e48:	930f      	str	r3, [sp, #60]	; 0x3c
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010e4a:	2d00      	cmp	r5, #0
 8010e4c:	d032      	beq.n	8010eb4 <_ZN13Communication12BuildTVectorIhEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x11e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8010e4e:	4628      	mov	r0, r5
 8010e50:	f00a f89e 	bl	801af90 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8010e54:	900d      	str	r0, [sp, #52]	; 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8010e56:	1947      	adds	r7, r0, r5
 8010e58:	970f      	str	r7, [sp, #60]	; 0x3c
	  if (_Num)
 8010e5a:	2d00      	cmp	r5, #0
 8010e5c:	d12c      	bne.n	8010eb8 <_ZN13Communication12BuildTVectorIhEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x122>
	  this->_M_impl._M_finish =
 8010e5e:	970e      	str	r7, [sp, #56]	; 0x38
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010e60:	2300      	movs	r3, #0
 8010e62:	9301      	str	r3, [sp, #4]
 8010e64:	9302      	str	r3, [sp, #8]
 8010e66:	9303      	str	r3, [sp, #12]
 8010e68:	9304      	str	r3, [sp, #16]
 8010e6a:	9305      	str	r3, [sp, #20]
 8010e6c:	9306      	str	r3, [sp, #24]
	  _M_start = __x._M_start;
 8010e6e:	6820      	ldr	r0, [r4, #0]
 8010e70:	9004      	str	r0, [sp, #16]
	  _M_finish = __x._M_finish;
 8010e72:	6862      	ldr	r2, [r4, #4]
 8010e74:	9205      	str	r2, [sp, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
 8010e76:	68a1      	ldr	r1, [r4, #8]
 8010e78:	9106      	str	r1, [sp, #24]
	  _M_start = __x._M_start;
 8010e7a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010e7c:	6025      	str	r5, [r4, #0]
	  _M_finish = __x._M_finish;
 8010e7e:	6067      	str	r7, [r4, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8010e80:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010e82:	60a5      	str	r5, [r4, #8]
	  _M_start = __x._M_start;
 8010e84:	900d      	str	r0, [sp, #52]	; 0x34
	  _M_finish = __x._M_finish;
 8010e86:	920e      	str	r2, [sp, #56]	; 0x38
	  _M_end_of_storage = __x._M_end_of_storage;
 8010e88:	910f      	str	r1, [sp, #60]	; 0x3c
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010e8a:	9304      	str	r3, [sp, #16]
 8010e8c:	9305      	str	r3, [sp, #20]
 8010e8e:	9306      	str	r3, [sp, #24]
	  _M_start = __x._M_start;
 8010e90:	9001      	str	r0, [sp, #4]
	  _M_finish = __x._M_finish;
 8010e92:	9202      	str	r2, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 8010e94:	9103      	str	r1, [sp, #12]
	  _M_start = __x._M_start;
 8010e96:	930d      	str	r3, [sp, #52]	; 0x34
	  _M_finish = __x._M_finish;
 8010e98:	930e      	str	r3, [sp, #56]	; 0x38
	  _M_end_of_storage = __x._M_end_of_storage;
 8010e9a:	930f      	str	r3, [sp, #60]	; 0x3c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8010e9c:	1a09      	subs	r1, r1, r0
	if (__p)
 8010e9e:	b108      	cbz	r0, 8010ea4 <_ZN13Communication12BuildTVectorIhEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x10e>
	::operator delete(__p
 8010ea0:	f00a f860 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8010ea4:	980d      	ldr	r0, [sp, #52]	; 0x34
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8010ea6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010ea8:	1a09      	subs	r1, r1, r0
	if (__p)
 8010eaa:	2800      	cmp	r0, #0
 8010eac:	d084      	beq.n	8010db8 <_ZN13Communication12BuildTVectorIhEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x22>
 8010eae:	f00a f859 	bl	801af64 <_ZdlPvj>
		vector = std::vector<T>(data, data + element.element_register.length); //  * sizeof(T)
 8010eb2:	e781      	b.n	8010db8 <_ZN13Communication12BuildTVectorIhEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x22>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010eb4:	2000      	movs	r0, #0
 8010eb6:	e7cd      	b.n	8010e54 <_ZN13Communication12BuildTVectorIhEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0xbe>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8010eb8:	462a      	mov	r2, r5
 8010eba:	4631      	mov	r1, r6
 8010ebc:	f00a fd26 	bl	801b90c <memmove>
 8010ec0:	e7cd      	b.n	8010e5e <_ZN13Communication12BuildTVectorIhEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0xc8>
		vector = *reinterpret_cast<std::vector<T>*>(data); // TODO exit with float, to check
 8010ec2:	4631      	mov	r1, r6
 8010ec4:	4620      	mov	r0, r4
 8010ec6:	f7ff ff02 	bl	8010cce <_ZNSt6vectorIhSaIhEEaSERKS1_>
	return vector;
 8010eca:	e775      	b.n	8010db8 <_ZN13Communication12BuildTVectorIhEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x22>

08010ecc <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8010ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ed0:	b089      	sub	sp, #36	; 0x24
 8010ed2:	9001      	str	r0, [sp, #4]
 8010ed4:	9103      	str	r1, [sp, #12]
 8010ed6:	4690      	mov	r8, r2
 8010ed8:	9302      	str	r3, [sp, #8]
 8010eda:	f8bd b048 	ldrh.w	fp, [sp, #72]	; 0x48
 8010ede:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
	for (uint8_t index = 0; index < length; index++) {
 8010ee2:	2400      	movs	r4, #0
 8010ee4:	e011      	b.n	8010f0a <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb+0x3e>
	  std::__throw_bad_alloc();
 8010ee6:	f00a f901 	bl	801b0ec <_ZSt17__throw_bad_allocv>
 8010eea:	2500      	movs	r5, #0
 8010eec:	e01f      	b.n	8010f2e <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb+0x62>
 8010eee:	4632      	mov	r2, r6
 8010ef0:	4639      	mov	r1, r7
 8010ef2:	4628      	mov	r0, r5
 8010ef4:	f00a fd0a 	bl	801b90c <memmove>
 8010ef8:	e02a      	b.n	8010f50 <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb+0x84>
		if (not *success)
 8010efa:	f89a 3000 	ldrb.w	r3, [sl]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d039      	beq.n	8010f76 <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb+0xaa>
		data[index] = element;
 8010f02:	9b03      	ldr	r3, [sp, #12]
 8010f04:	551d      	strb	r5, [r3, r4]
	for (uint8_t index = 0; index < length; index++) {
 8010f06:	3401      	adds	r4, #1
 8010f08:	b2e4      	uxtb	r4, r4
 8010f0a:	455c      	cmp	r4, fp
 8010f0c:	da33      	bge.n	8010f76 <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb+0xaa>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010f0e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8010f12:	f8d8 2000 	ldr.w	r2, [r8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010f16:	2300      	movs	r3, #0
 8010f18:	9305      	str	r3, [sp, #20]
 8010f1a:	9306      	str	r3, [sp, #24]
 8010f1c:	9307      	str	r3, [sp, #28]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010f1e:	1ab6      	subs	r6, r6, r2
 8010f20:	d0e3      	beq.n	8010eea <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb+0x1e>
	if (__n > this->_M_max_size())
 8010f22:	429e      	cmp	r6, r3
 8010f24:	dbdf      	blt.n	8010ee6 <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb+0x1a>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8010f26:	4630      	mov	r0, r6
 8010f28:	f00a f832 	bl	801af90 <_Znwj>
 8010f2c:	4605      	mov	r5, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8010f2e:	9505      	str	r5, [sp, #20]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8010f30:	9506      	str	r5, [sp, #24]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8010f32:	442e      	add	r6, r5
 8010f34:	9607      	str	r6, [sp, #28]
 8010f36:	f8d8 6004 	ldr.w	r6, [r8, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8010f3a:	46a9      	mov	r9, r5
      return std::__niter_wrap(__result,
 8010f3c:	f8d8 0000 	ldr.w	r0, [r8]
 8010f40:	f7f0 fdb9 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8010f44:	4607      	mov	r7, r0
 8010f46:	4630      	mov	r0, r6
 8010f48:	f7f0 fdb5 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8010f4c:	1bc6      	subs	r6, r0, r7
 8010f4e:	d1ce      	bne.n	8010eee <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb+0x22>
	  return __result + _Num;
 8010f50:	444e      	add	r6, r9
	this->_M_impl._M_finish =
 8010f52:	9606      	str	r6, [sp, #24]
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8010f54:	9b02      	ldr	r3, [sp, #8]
 8010f56:	18e2      	adds	r2, r4, r3
 8010f58:	4653      	mov	r3, sl
 8010f5a:	b292      	uxth	r2, r2
 8010f5c:	a905      	add	r1, sp, #20
 8010f5e:	9801      	ldr	r0, [sp, #4]
 8010f60:	f7fe fac4 	bl	800f4ec <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb>
 8010f64:	4605      	mov	r5, r0
	_M_deallocate(_M_impl._M_start,
 8010f66:	9805      	ldr	r0, [sp, #20]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8010f68:	9907      	ldr	r1, [sp, #28]
 8010f6a:	1a09      	subs	r1, r1, r0
	if (__p)
 8010f6c:	2800      	cmp	r0, #0
 8010f6e:	d0c4      	beq.n	8010efa <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb+0x2e>
	::operator delete(__p
 8010f70:	f009 fff8 	bl	801af64 <_ZdlPvj>
 8010f74:	e7c1      	b.n	8010efa <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb+0x2e>
}
 8010f76:	b009      	add	sp, #36	; 0x24
 8010f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010f7c <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8010f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f80:	b089      	sub	sp, #36	; 0x24
 8010f82:	9001      	str	r0, [sp, #4]
 8010f84:	9103      	str	r1, [sp, #12]
 8010f86:	4690      	mov	r8, r2
 8010f88:	9302      	str	r3, [sp, #8]
 8010f8a:	f8bd b048 	ldrh.w	fp, [sp, #72]	; 0x48
 8010f8e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
	for (uint8_t index = 0; index < length; index++) {
 8010f92:	2400      	movs	r4, #0
 8010f94:	e012      	b.n	8010fbc <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb+0x40>
	  std::__throw_bad_alloc();
 8010f96:	f00a f8a9 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010f9a:	2500      	movs	r5, #0
 8010f9c:	e020      	b.n	8010fe0 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb+0x64>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8010f9e:	4632      	mov	r2, r6
 8010fa0:	4639      	mov	r1, r7
 8010fa2:	4628      	mov	r0, r5
 8010fa4:	f00a fcb2 	bl	801b90c <memmove>
 8010fa8:	e02b      	b.n	8011002 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb+0x86>
		if (not *success)
 8010faa:	f89a 3000 	ldrb.w	r3, [sl]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d03b      	beq.n	801102a <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb+0xae>
		data[index] = element;
 8010fb2:	9b03      	ldr	r3, [sp, #12]
 8010fb4:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
	for (uint8_t index = 0; index < length; index++) {
 8010fb8:	3401      	adds	r4, #1
 8010fba:	b2e4      	uxtb	r4, r4
 8010fbc:	455c      	cmp	r4, fp
 8010fbe:	da34      	bge.n	801102a <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb+0xae>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010fc0:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8010fc4:	f8d8 2000 	ldr.w	r2, [r8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010fc8:	2300      	movs	r3, #0
 8010fca:	9305      	str	r3, [sp, #20]
 8010fcc:	9306      	str	r3, [sp, #24]
 8010fce:	9307      	str	r3, [sp, #28]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010fd0:	1ab6      	subs	r6, r6, r2
 8010fd2:	d0e2      	beq.n	8010f9a <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb+0x1e>
	if (__n > this->_M_max_size())
 8010fd4:	429e      	cmp	r6, r3
 8010fd6:	dbde      	blt.n	8010f96 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb+0x1a>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8010fd8:	4630      	mov	r0, r6
 8010fda:	f009 ffd9 	bl	801af90 <_Znwj>
 8010fde:	4605      	mov	r5, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8010fe0:	9505      	str	r5, [sp, #20]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8010fe2:	9506      	str	r5, [sp, #24]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8010fe4:	442e      	add	r6, r5
 8010fe6:	9607      	str	r6, [sp, #28]
 8010fe8:	f8d8 6004 	ldr.w	r6, [r8, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8010fec:	46a9      	mov	r9, r5
      return std::__niter_wrap(__result,
 8010fee:	f8d8 0000 	ldr.w	r0, [r8]
 8010ff2:	f7f0 fd60 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8010ff6:	4607      	mov	r7, r0
 8010ff8:	4630      	mov	r0, r6
 8010ffa:	f7f0 fd5c 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8010ffe:	1bc6      	subs	r6, r0, r7
 8011000:	d1cd      	bne.n	8010f9e <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb+0x22>
	  return __result + _Num;
 8011002:	444e      	add	r6, r9
	this->_M_impl._M_finish =
 8011004:	9606      	str	r6, [sp, #24]
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8011006:	9b02      	ldr	r3, [sp, #8]
 8011008:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 801100c:	4653      	mov	r3, sl
 801100e:	b292      	uxth	r2, r2
 8011010:	a905      	add	r1, sp, #20
 8011012:	9801      	ldr	r0, [sp, #4]
 8011014:	f7fe fa89 	bl	800f52a <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb>
 8011018:	4605      	mov	r5, r0
	_M_deallocate(_M_impl._M_start,
 801101a:	9805      	ldr	r0, [sp, #20]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801101c:	9907      	ldr	r1, [sp, #28]
 801101e:	1a09      	subs	r1, r1, r0
	if (__p)
 8011020:	2800      	cmp	r0, #0
 8011022:	d0c2      	beq.n	8010faa <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb+0x2e>
	::operator delete(__p
 8011024:	f009 ff9e 	bl	801af64 <_ZdlPvj>
 8011028:	e7bf      	b.n	8010faa <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb+0x2e>
}
 801102a:	b009      	add	sp, #36	; 0x24
 801102c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011030 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8011030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011034:	b089      	sub	sp, #36	; 0x24
 8011036:	9001      	str	r0, [sp, #4]
 8011038:	9103      	str	r1, [sp, #12]
 801103a:	4690      	mov	r8, r2
 801103c:	9302      	str	r3, [sp, #8]
 801103e:	f8bd b048 	ldrh.w	fp, [sp, #72]	; 0x48
 8011042:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
	for (uint8_t index = 0; index < length; index++) {
 8011046:	2400      	movs	r4, #0
 8011048:	e013      	b.n	8011072 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb+0x42>
	  std::__throw_bad_alloc();
 801104a:	f00a f84f 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801104e:	2500      	movs	r5, #0
 8011050:	e021      	b.n	8011096 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb+0x66>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8011052:	4632      	mov	r2, r6
 8011054:	4639      	mov	r1, r7
 8011056:	4628      	mov	r0, r5
 8011058:	f00a fc58 	bl	801b90c <memmove>
 801105c:	e02c      	b.n	80110b8 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb+0x88>
		if (not *success)
 801105e:	f89a 3000 	ldrb.w	r3, [sl]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d03d      	beq.n	80110e2 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb+0xb2>
		data[index] = element;
 8011066:	9b03      	ldr	r3, [sp, #12]
 8011068:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801106c:	601d      	str	r5, [r3, #0]
	for (uint8_t index = 0; index < length; index++) {
 801106e:	3401      	adds	r4, #1
 8011070:	b2e4      	uxtb	r4, r4
 8011072:	455c      	cmp	r4, fp
 8011074:	da35      	bge.n	80110e2 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb+0xb2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011076:	f8d8 6004 	ldr.w	r6, [r8, #4]
 801107a:	f8d8 2000 	ldr.w	r2, [r8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801107e:	2300      	movs	r3, #0
 8011080:	9305      	str	r3, [sp, #20]
 8011082:	9306      	str	r3, [sp, #24]
 8011084:	9307      	str	r3, [sp, #28]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011086:	1ab6      	subs	r6, r6, r2
 8011088:	d0e1      	beq.n	801104e <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb+0x1e>
	if (__n > this->_M_max_size())
 801108a:	429e      	cmp	r6, r3
 801108c:	dbdd      	blt.n	801104a <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb+0x1a>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801108e:	4630      	mov	r0, r6
 8011090:	f009 ff7e 	bl	801af90 <_Znwj>
 8011094:	4605      	mov	r5, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8011096:	9505      	str	r5, [sp, #20]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8011098:	9506      	str	r5, [sp, #24]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801109a:	442e      	add	r6, r5
 801109c:	9607      	str	r6, [sp, #28]
 801109e:	f8d8 6004 	ldr.w	r6, [r8, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80110a2:	46a9      	mov	r9, r5
      return std::__niter_wrap(__result,
 80110a4:	f8d8 0000 	ldr.w	r0, [r8]
 80110a8:	f7f0 fd05 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80110ac:	4607      	mov	r7, r0
 80110ae:	4630      	mov	r0, r6
 80110b0:	f7f0 fd01 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 80110b4:	1bc6      	subs	r6, r0, r7
 80110b6:	d1cc      	bne.n	8011052 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb+0x22>
	  return __result + _Num;
 80110b8:	444e      	add	r6, r9
	this->_M_impl._M_finish =
 80110ba:	9606      	str	r6, [sp, #24]
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 80110bc:	9b02      	ldr	r3, [sp, #8]
 80110be:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 80110c2:	4653      	mov	r3, sl
 80110c4:	b292      	uxth	r2, r2
 80110c6:	a905      	add	r1, sp, #20
 80110c8:	9801      	ldr	r0, [sp, #4]
 80110ca:	f7fe fa4d 	bl	800f568 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb>
 80110ce:	ee10 5a10 	vmov	r5, s0
	_M_deallocate(_M_impl._M_start,
 80110d2:	9805      	ldr	r0, [sp, #20]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80110d4:	9907      	ldr	r1, [sp, #28]
 80110d6:	1a09      	subs	r1, r1, r0
	if (__p)
 80110d8:	2800      	cmp	r0, #0
 80110da:	d0c0      	beq.n	801105e <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb+0x2e>
	::operator delete(__p
 80110dc:	f009 ff42 	bl	801af64 <_ZdlPvj>
 80110e0:	e7bd      	b.n	801105e <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb+0x2e>
}
 80110e2:	b009      	add	sp, #36	; 0x24
 80110e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080110e8 <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb>:
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 80110e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ec:	b089      	sub	sp, #36	; 0x24
 80110ee:	4680      	mov	r8, r0
 80110f0:	9102      	str	r1, [sp, #8]
 80110f2:	4691      	mov	r9, r2
 80110f4:	9303      	str	r3, [sp, #12]
 80110f6:	f8bd b048 	ldrh.w	fp, [sp, #72]	; 0x48
 80110fa:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
	: _M_start(), _M_finish(), _M_end_of_storage()
 80110fe:	2500      	movs	r5, #0
 8011100:	6005      	str	r5, [r0, #0]
 8011102:	6045      	str	r5, [r0, #4]
 8011104:	6085      	str	r5, [r0, #8]
 8011106:	e01d      	b.n	8011144 <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x5c>
	  std::__throw_bad_alloc();
 8011108:	f009 fff0 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801110c:	2400      	movs	r4, #0
 801110e:	e02b      	b.n	8011168 <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x80>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8011110:	4632      	mov	r2, r6
 8011112:	4639      	mov	r1, r7
 8011114:	4620      	mov	r0, r4
 8011116:	f00a fbf9 	bl	801b90c <memmove>
 801111a:	e036      	b.n	801118a <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0xa2>
		if (not *success)
 801111c:	f89a 3000 	ldrb.w	r3, [sl]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d04d      	beq.n	80111c0 <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0xd8>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8011124:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011128:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801112c:	4299      	cmp	r1, r3
 801112e:	d041      	beq.n	80111b4 <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0xcc>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011130:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8011134:	700b      	strb	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 8011136:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801113a:	3301      	adds	r3, #1
 801113c:	f8c8 3004 	str.w	r3, [r8, #4]
	for (uint8_t index = 0; index < length; index++) {
 8011140:	3501      	adds	r5, #1
 8011142:	b2ed      	uxtb	r5, r5
 8011144:	455d      	cmp	r5, fp
 8011146:	da3b      	bge.n	80111c0 <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0xd8>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011148:	f8d9 6004 	ldr.w	r6, [r9, #4]
 801114c:	f8d9 2000 	ldr.w	r2, [r9]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011150:	2300      	movs	r3, #0
 8011152:	9305      	str	r3, [sp, #20]
 8011154:	9306      	str	r3, [sp, #24]
 8011156:	9307      	str	r3, [sp, #28]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011158:	1ab6      	subs	r6, r6, r2
 801115a:	d0d7      	beq.n	801110c <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x24>
	if (__n > this->_M_max_size())
 801115c:	429e      	cmp	r6, r3
 801115e:	dbd3      	blt.n	8011108 <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x20>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011160:	4630      	mov	r0, r6
 8011162:	f009 ff15 	bl	801af90 <_Znwj>
 8011166:	4604      	mov	r4, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8011168:	9405      	str	r4, [sp, #20]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801116a:	9406      	str	r4, [sp, #24]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801116c:	4426      	add	r6, r4
 801116e:	9607      	str	r6, [sp, #28]
 8011170:	f8d9 6004 	ldr.w	r6, [r9, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8011174:	9401      	str	r4, [sp, #4]
      return std::__niter_wrap(__result,
 8011176:	f8d9 0000 	ldr.w	r0, [r9]
 801117a:	f7f0 fc9c 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 801117e:	4607      	mov	r7, r0
 8011180:	4630      	mov	r0, r6
 8011182:	f7f0 fc98 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8011186:	1bc6      	subs	r6, r0, r7
 8011188:	d1c2      	bne.n	8011110 <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x28>
	  return __result + _Num;
 801118a:	9b01      	ldr	r3, [sp, #4]
 801118c:	4433      	add	r3, r6
	this->_M_impl._M_finish =
 801118e:	9306      	str	r3, [sp, #24]
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8011190:	9b03      	ldr	r3, [sp, #12]
 8011192:	18ea      	adds	r2, r5, r3
 8011194:	4653      	mov	r3, sl
 8011196:	b292      	uxth	r2, r2
 8011198:	a905      	add	r1, sp, #20
 801119a:	9802      	ldr	r0, [sp, #8]
 801119c:	f7fe f9a6 	bl	800f4ec <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb>
 80111a0:	f88d 0013 	strb.w	r0, [sp, #19]
	_M_deallocate(_M_impl._M_start,
 80111a4:	9805      	ldr	r0, [sp, #20]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80111a6:	9907      	ldr	r1, [sp, #28]
 80111a8:	1a09      	subs	r1, r1, r0
	if (__p)
 80111aa:	2800      	cmp	r0, #0
 80111ac:	d0b6      	beq.n	801111c <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x34>
	::operator delete(__p
 80111ae:	f009 fed9 	bl	801af64 <_ZdlPvj>
 80111b2:	e7b3      	b.n	801111c <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x34>
	  _M_realloc_insert(end(), __x);
 80111b4:	f10d 0213 	add.w	r2, sp, #19
 80111b8:	4640      	mov	r0, r8
 80111ba:	f7f0 f8b5 	bl	8001328 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 80111be:	e7bf      	b.n	8011140 <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x58>
}
 80111c0:	4640      	mov	r0, r8
 80111c2:	b009      	add	sp, #36	; 0x24
 80111c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080111c8 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 80111c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111cc:	b09c      	sub	sp, #112	; 0x70
 80111ce:	af02      	add	r7, sp, #8
 80111d0:	4606      	mov	r6, r0
 80111d2:	468c      	mov	ip, r1
 80111d4:	461d      	mov	r5, r3
	service_information.register_ = element.element_register;
 80111d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80111da:	6178      	str	r0, [r7, #20]
 80111dc:	8339      	strh	r1, [r7, #24]
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 80111de:	f89c 1000 	ldrb.w	r1, [ip]
 80111e2:	f89c 3011 	ldrb.w	r3, [ip, #17]
 80111e6:	7739      	strb	r1, [r7, #28]
 80111e8:	777b      	strb	r3, [r7, #29]
	service_information.access = element.access;
 80111ea:	7a13      	ldrb	r3, [r2, #8]
 80111ec:	77bb      	strb	r3, [r7, #30]
	service_information.length = 1;
 80111ee:	2101      	movs	r1, #1
 80111f0:	8379      	strh	r1, [r7, #26]
	if (element.command) {
 80111f2:	79d1      	ldrb	r1, [r2, #7]
 80111f4:	2900      	cmp	r1, #0
 80111f6:	d145      	bne.n	8011284 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0xbc>
	if (element.access == WRITE) {
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d065      	beq.n	80112c8 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x100>
		return start_index + sizeof(T) * length_to_extract;
 80111fc:	46e8      	mov	r8, sp
		T array_values[element.element_register.length];
 80111fe:	8893      	ldrh	r3, [r2, #4]
 8011200:	3307      	adds	r3, #7
 8011202:	08db      	lsrs	r3, r3, #3
 8011204:	eba8 03c3 	sub.w	r3, r8, r3, lsl #3
 8011208:	469d      	mov	sp, r3
 801120a:	f10d 0908 	add.w	r9, sp, #8
 801120e:	46ca      	mov	sl, r9
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011210:	2300      	movs	r3, #0
 8011212:	607b      	str	r3, [r7, #4]
 8011214:	60bb      	str	r3, [r7, #8]
 8011216:	60fb      	str	r3, [r7, #12]
		if (not element.element_register.isArray) {
 8011218:	78d3      	ldrb	r3, [r2, #3]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d076      	beq.n	801130c <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x144>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 801121e:	8894      	ldrh	r4, [r2, #4]
 8011220:	2c00      	cmp	r4, #0
 8011222:	f040 809b 	bne.w	801135c <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x194>
		} else if (element.element_register.isArray && element.element_register.length == 0) {
 8011226:	8893      	ldrh	r3, [r2, #4]
 8011228:	2b00      	cmp	r3, #0
 801122a:	f040 8086 	bne.w	801133a <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x172>
	return *(this->_M_impl._M_start + __n);
 801122e:	4661      	mov	r1, ip
 8011230:	f851 3f04 	ldr.w	r3, [r1, #4]!
			length_to_extract = message.payload[start_index];
 8011234:	5d5c      	ldrb	r4, [r3, r5]
			start_index++;
 8011236:	1c6b      	adds	r3, r5, #1
 8011238:	b29d      	uxth	r5, r3
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801123a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 801123e:	f7ff fd16 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011242:	1cfb      	adds	r3, r7, #3
 8011244:	9301      	str	r3, [sp, #4]
 8011246:	9400      	str	r4, [sp, #0]
 8011248:	462b      	mov	r3, r5
 801124a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801124e:	4631      	mov	r1, r6
 8011250:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8011254:	f7ff ff48 	bl	80110e8 <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8011258:	f04f 0200 	mov.w	r2, #0
 801125c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8011260:	1d38      	adds	r0, r7, #4
 8011262:	f7fd fd68 	bl	800ed36 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	_M_deallocate(_M_impl._M_start,
 8011266:	6d38      	ldr	r0, [r7, #80]	; 0x50
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011268:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801126a:	1a09      	subs	r1, r1, r0
	if (__p)
 801126c:	b108      	cbz	r0, 8011272 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0xaa>
 801126e:	f009 fe79 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8011272:	6df8      	ldr	r0, [r7, #92]	; 0x5c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011274:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011276:	1a09      	subs	r1, r1, r0
	if (__p)
 8011278:	b108      	cbz	r0, 801127e <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0xb6>
 801127a:	f009 fe73 	bl	801af64 <_ZdlPvj>
      { return _M_data_ptr(this->_M_impl._M_start); }
 801127e:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8011282:	e05a      	b.n	801133a <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x172>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8011284:	f10c 0104 	add.w	r1, ip, #4
 8011288:	f107 0020 	add.w	r0, r7, #32
 801128c:	f7ff fcef 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011290:	f107 0313 	add.w	r3, r7, #19
 8011294:	462a      	mov	r2, r5
 8011296:	f107 0120 	add.w	r1, r7, #32
 801129a:	4630      	mov	r0, r6
 801129c:	f7fe f926 	bl	800f4ec <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb>
 80112a0:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 80112a2:	6a38      	ldr	r0, [r7, #32]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80112a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80112a6:	1a09      	subs	r1, r1, r0
	if (__p)
 80112a8:	b108      	cbz	r0, 80112ae <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0xe6>
 80112aa:	f009 fe5b 	bl	801af64 <_ZdlPvj>
		if (success)
 80112ae:	7cfb      	ldrb	r3, [r7, #19]
 80112b0:	b913      	cbnz	r3, 80112b8 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0xf0>
		return start_index + 1;
 80112b2:	1c6b      	adds	r3, r5, #1
 80112b4:	b29c      	uxth	r4, r3
 80112b6:	e04c      	b.n	8011352 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x18a>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 80112b8:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80112ba:	9400      	str	r4, [sp, #0]
 80112bc:	f107 0314 	add.w	r3, r7, #20
 80112c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80112c2:	f009 fb53 	bl	801a96c <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
 80112c6:	e7f4      	b.n	80112b2 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0xea>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 80112c8:	f10c 0104 	add.w	r1, ip, #4
 80112cc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80112d0:	f7ff fccd 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80112d4:	f107 0313 	add.w	r3, r7, #19
 80112d8:	462a      	mov	r2, r5
 80112da:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80112de:	4630      	mov	r0, r6
 80112e0:	f7fe f904 	bl	800f4ec <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb>
 80112e4:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 80112e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80112e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80112ea:	1a09      	subs	r1, r1, r0
	if (__p)
 80112ec:	b108      	cbz	r0, 80112f2 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x12a>
 80112ee:	f009 fe39 	bl	801af64 <_ZdlPvj>
		if (success)
 80112f2:	7cfb      	ldrb	r3, [r7, #19]
 80112f4:	b913      	cbnz	r3, 80112fc <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x134>
		return start_index + 1;
 80112f6:	1c6b      	adds	r3, r5, #1
 80112f8:	b29c      	uxth	r4, r3
 80112fa:	e02a      	b.n	8011352 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x18a>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 80112fc:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80112fe:	9400      	str	r4, [sp, #0]
 8011300:	f107 0314 	add.w	r3, r7, #20
 8011304:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011306:	f009 faf7 	bl	801a8f8 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 801130a:	e7f4      	b.n	80112f6 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x12e>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801130c:	f10c 0104 	add.w	r1, ip, #4
 8011310:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8011314:	f7ff fcab 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011318:	1cfb      	adds	r3, r7, #3
 801131a:	462a      	mov	r2, r5
 801131c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8011320:	4630      	mov	r0, r6
 8011322:	f7fe f8e3 	bl	800f4ec <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb>
 8011326:	70b8      	strb	r0, [r7, #2]
	_M_deallocate(_M_impl._M_start,
 8011328:	6bb8      	ldr	r0, [r7, #56]	; 0x38
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801132a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801132c:	1a09      	subs	r1, r1, r0
	if (__p)
 801132e:	b108      	cbz	r0, 8011334 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x16c>
 8011330:	f009 fe18 	bl	801af64 <_ZdlPvj>
			data = &single_value;
 8011334:	f107 0a02 	add.w	sl, r7, #2
			length_to_extract = 1;
 8011338:	2401      	movs	r4, #1
		service_information.length = length_to_extract;
 801133a:	837c      	strh	r4, [r7, #26]
		if (success)
 801133c:	78fb      	ldrb	r3, [r7, #3]
 801133e:	bb2b      	cbnz	r3, 801138c <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x1c4>
		return start_index + sizeof(T) * length_to_extract;
 8011340:	442c      	add	r4, r5
 8011342:	b2a4      	uxth	r4, r4
	_M_deallocate(_M_impl._M_start,
 8011344:	6878      	ldr	r0, [r7, #4]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011346:	68f9      	ldr	r1, [r7, #12]
 8011348:	1a09      	subs	r1, r1, r0
	if (__p)
 801134a:	b108      	cbz	r0, 8011350 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x188>
 801134c:	f009 fe0a 	bl	801af64 <_ZdlPvj>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8011350:	46c5      	mov	sp, r8
}
 8011352:	4620      	mov	r0, r4
 8011354:	3768      	adds	r7, #104	; 0x68
 8011356:	46bd      	mov	sp, r7
 8011358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 801135c:	f10c 0104 	add.w	r1, ip, #4
 8011360:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8011364:	f7ff fc83 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011368:	1cfb      	adds	r3, r7, #3
 801136a:	9301      	str	r3, [sp, #4]
 801136c:	9400      	str	r4, [sp, #0]
 801136e:	462b      	mov	r3, r5
 8011370:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8011374:	4649      	mov	r1, r9
 8011376:	4630      	mov	r0, r6
 8011378:	f7ff fda8 	bl	8010ecc <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb>
	_M_deallocate(_M_impl._M_start,
 801137c:	6c78      	ldr	r0, [r7, #68]	; 0x44
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801137e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011380:	1a09      	subs	r1, r1, r0
	if (__p)
 8011382:	2800      	cmp	r0, #0
 8011384:	d0d9      	beq.n	801133a <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x172>
	::operator delete(__p
 8011386:	f009 fded 	bl	801af64 <_ZdlPvj>
			data = array_values;
 801138a:	e7d6      	b.n	801133a <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x172>
			services->ReceiveRead<T>(service_information, data);
 801138c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 801138e:	f8cd a000 	str.w	sl, [sp]
 8011392:	f107 0314 	add.w	r3, r7, #20
 8011396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011398:	f7fe f93a 	bl	800f610 <_ZN8Services11ReceiveReadIhEEv20ServiceConfigurationPT_>
 801139c:	e7d0      	b.n	8011340 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt+0x178>

0801139e <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb>:
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 801139e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113a2:	b089      	sub	sp, #36	; 0x24
 80113a4:	4680      	mov	r8, r0
 80113a6:	9102      	str	r1, [sp, #8]
 80113a8:	4691      	mov	r9, r2
 80113aa:	9303      	str	r3, [sp, #12]
 80113ac:	f8bd b048 	ldrh.w	fp, [sp, #72]	; 0x48
 80113b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
	: _M_start(), _M_finish(), _M_end_of_storage()
 80113b4:	2500      	movs	r5, #0
 80113b6:	6005      	str	r5, [r0, #0]
 80113b8:	6045      	str	r5, [r0, #4]
 80113ba:	6085      	str	r5, [r0, #8]
 80113bc:	e01c      	b.n	80113f8 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x5a>
	  std::__throw_bad_alloc();
 80113be:	f009 fe95 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80113c2:	2400      	movs	r4, #0
 80113c4:	e02a      	b.n	801141c <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x7e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80113c6:	4632      	mov	r2, r6
 80113c8:	4639      	mov	r1, r7
 80113ca:	4620      	mov	r0, r4
 80113cc:	f00a fa9e 	bl	801b90c <memmove>
 80113d0:	e035      	b.n	801143e <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0xa0>
		if (not *success)
 80113d2:	f89a 3000 	ldrb.w	r3, [sl]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d04c      	beq.n	8011474 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0xd6>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80113da:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80113de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80113e2:	4299      	cmp	r1, r3
 80113e4:	d041      	beq.n	801146a <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0xcc>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80113e6:	9b04      	ldr	r3, [sp, #16]
 80113e8:	600b      	str	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 80113ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80113ee:	3304      	adds	r3, #4
 80113f0:	f8c8 3004 	str.w	r3, [r8, #4]
	for (uint8_t index = 0; index < length; index++) {
 80113f4:	3501      	adds	r5, #1
 80113f6:	b2ed      	uxtb	r5, r5
 80113f8:	455d      	cmp	r5, fp
 80113fa:	da3b      	bge.n	8011474 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0xd6>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80113fc:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8011400:	f8d9 2000 	ldr.w	r2, [r9]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011404:	2300      	movs	r3, #0
 8011406:	9305      	str	r3, [sp, #20]
 8011408:	9306      	str	r3, [sp, #24]
 801140a:	9307      	str	r3, [sp, #28]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801140c:	1ab6      	subs	r6, r6, r2
 801140e:	d0d8      	beq.n	80113c2 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x24>
	if (__n > this->_M_max_size())
 8011410:	429e      	cmp	r6, r3
 8011412:	dbd4      	blt.n	80113be <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x20>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011414:	4630      	mov	r0, r6
 8011416:	f009 fdbb 	bl	801af90 <_Znwj>
 801141a:	4604      	mov	r4, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 801141c:	9405      	str	r4, [sp, #20]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801141e:	9406      	str	r4, [sp, #24]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011420:	4426      	add	r6, r4
 8011422:	9607      	str	r6, [sp, #28]
 8011424:	f8d9 6004 	ldr.w	r6, [r9, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8011428:	9401      	str	r4, [sp, #4]
      return std::__niter_wrap(__result,
 801142a:	f8d9 0000 	ldr.w	r0, [r9]
 801142e:	f7f0 fb42 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8011432:	4607      	mov	r7, r0
 8011434:	4630      	mov	r0, r6
 8011436:	f7f0 fb3e 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 801143a:	1bc6      	subs	r6, r0, r7
 801143c:	d1c3      	bne.n	80113c6 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x28>
	  return __result + _Num;
 801143e:	9b01      	ldr	r3, [sp, #4]
 8011440:	4433      	add	r3, r6
	this->_M_impl._M_finish =
 8011442:	9306      	str	r3, [sp, #24]
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8011444:	9b03      	ldr	r3, [sp, #12]
 8011446:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 801144a:	4653      	mov	r3, sl
 801144c:	b292      	uxth	r2, r2
 801144e:	a905      	add	r1, sp, #20
 8011450:	9802      	ldr	r0, [sp, #8]
 8011452:	f7fe f889 	bl	800f568 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb>
 8011456:	ed8d 0a04 	vstr	s0, [sp, #16]
	_M_deallocate(_M_impl._M_start,
 801145a:	9805      	ldr	r0, [sp, #20]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801145c:	9907      	ldr	r1, [sp, #28]
 801145e:	1a09      	subs	r1, r1, r0
	if (__p)
 8011460:	2800      	cmp	r0, #0
 8011462:	d0b6      	beq.n	80113d2 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x34>
	::operator delete(__p
 8011464:	f009 fd7e 	bl	801af64 <_ZdlPvj>
 8011468:	e7b3      	b.n	80113d2 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x34>
	  _M_realloc_insert(end(), __x);
 801146a:	aa04      	add	r2, sp, #16
 801146c:	4640      	mov	r0, r8
 801146e:	f7fe fe3d 	bl	80100ec <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
 8011472:	e7bf      	b.n	80113f4 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x56>
}
 8011474:	4640      	mov	r0, r8
 8011476:	b009      	add	sp, #36	; 0x24
 8011478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801147c <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 801147c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011480:	b0a3      	sub	sp, #140	; 0x8c
 8011482:	af02      	add	r7, sp, #8
 8011484:	4680      	mov	r8, r0
 8011486:	468c      	mov	ip, r1
 8011488:	461c      	mov	r4, r3
	service_information.register_ = element.element_register;
 801148a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801148e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011490:	8639      	strh	r1, [r7, #48]	; 0x30
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 8011492:	f89c 1000 	ldrb.w	r1, [ip]
 8011496:	f89c 3011 	ldrb.w	r3, [ip, #17]
 801149a:	f887 1034 	strb.w	r1, [r7, #52]	; 0x34
 801149e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	service_information.access = element.access;
 80114a2:	7a13      	ldrb	r3, [r2, #8]
 80114a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	service_information.length = 1;
 80114a8:	2101      	movs	r1, #1
 80114aa:	8679      	strh	r1, [r7, #50]	; 0x32
	if (element.command) {
 80114ac:	79d1      	ldrb	r1, [r2, #7]
 80114ae:	2900      	cmp	r1, #0
 80114b0:	d167      	bne.n	8011582 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x106>
	if (element.access == WRITE) {
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	f000 8089 	beq.w	80115ca <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x14e>
		return start_index + sizeof(T) * length_to_extract;
 80114b8:	466e      	mov	r6, sp
		T array_values[element.element_register.length];
 80114ba:	8893      	ldrh	r3, [r2, #4]
 80114bc:	009b      	lsls	r3, r3, #2
 80114be:	3307      	adds	r3, #7
 80114c0:	08db      	lsrs	r3, r3, #3
 80114c2:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
 80114c6:	469d      	mov	sp, r3
 80114c8:	f10d 0908 	add.w	r9, sp, #8
	: _M_start(), _M_finish(), _M_end_of_storage()
 80114cc:	2300      	movs	r3, #0
 80114ce:	607b      	str	r3, [r7, #4]
 80114d0:	60bb      	str	r3, [r7, #8]
 80114d2:	60fb      	str	r3, [r7, #12]
		if (not element.element_register.isArray) {
 80114d4:	78d3      	ldrb	r3, [r2, #3]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	f000 809b 	beq.w	8011612 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x196>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 80114dc:	8895      	ldrh	r5, [r2, #4]
 80114de:	2d00      	cmp	r5, #0
 80114e0:	f040 80c2 	bne.w	8011668 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x1ec>
		} else if (element.element_register.isArray && element.element_register.length == 0) {
 80114e4:	8893      	ldrh	r3, [r2, #4]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	f040 80ab 	bne.w	8011642 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x1c6>
	return *(this->_M_impl._M_start + __n);
 80114ec:	4661      	mov	r1, ip
 80114ee:	f851 3f04 	ldr.w	r3, [r1, #4]!
			length_to_extract = message.payload[start_index];
 80114f2:	5d1d      	ldrb	r5, [r3, r4]
			start_index++;
 80114f4:	3401      	adds	r4, #1
 80114f6:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80114f8:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80114fc:	f7ff fbb7 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011500:	1cfb      	adds	r3, r7, #3
 8011502:	9301      	str	r3, [sp, #4]
 8011504:	9500      	str	r5, [sp, #0]
 8011506:	4623      	mov	r3, r4
 8011508:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801150c:	4641      	mov	r1, r8
 801150e:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8011512:	f7ff ff44 	bl	801139e <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011516:	2300      	movs	r3, #0
 8011518:	613b      	str	r3, [r7, #16]
 801151a:	617b      	str	r3, [r7, #20]
 801151c:	61bb      	str	r3, [r7, #24]
 801151e:	61fb      	str	r3, [r7, #28]
 8011520:	623b      	str	r3, [r7, #32]
 8011522:	627b      	str	r3, [r7, #36]	; 0x24
	  _M_start = __x._M_start;
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	61f8      	str	r0, [r7, #28]
	  _M_finish = __x._M_finish;
 8011528:	f8d7 c008 	ldr.w	ip, [r7, #8]
 801152c:	f8c7 c020 	str.w	ip, [r7, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
 8011530:	68f9      	ldr	r1, [r7, #12]
 8011532:	6279      	str	r1, [r7, #36]	; 0x24
	  _M_start = __x._M_start;
 8011534:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011536:	607a      	str	r2, [r7, #4]
	  _M_finish = __x._M_finish;
 8011538:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801153a:	60ba      	str	r2, [r7, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 801153c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801153e:	60fa      	str	r2, [r7, #12]
	  _M_start = __x._M_start;
 8011540:	66b8      	str	r0, [r7, #104]	; 0x68
	  _M_finish = __x._M_finish;
 8011542:	f8c7 c06c 	str.w	ip, [r7, #108]	; 0x6c
	  _M_end_of_storage = __x._M_end_of_storage;
 8011546:	6739      	str	r1, [r7, #112]	; 0x70
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011548:	61fb      	str	r3, [r7, #28]
 801154a:	623b      	str	r3, [r7, #32]
 801154c:	627b      	str	r3, [r7, #36]	; 0x24
	  _M_start = __x._M_start;
 801154e:	6138      	str	r0, [r7, #16]
	  _M_finish = __x._M_finish;
 8011550:	f8c7 c014 	str.w	ip, [r7, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
 8011554:	61b9      	str	r1, [r7, #24]
	  _M_start = __x._M_start;
 8011556:	66bb      	str	r3, [r7, #104]	; 0x68
	  _M_finish = __x._M_finish;
 8011558:	66fb      	str	r3, [r7, #108]	; 0x6c
	  _M_end_of_storage = __x._M_end_of_storage;
 801155a:	673b      	str	r3, [r7, #112]	; 0x70
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801155c:	1a09      	subs	r1, r1, r0
	if (__p)
 801155e:	b108      	cbz	r0, 8011564 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0xe8>
 8011560:	f009 fd00 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8011564:	6eb8      	ldr	r0, [r7, #104]	; 0x68
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011566:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011568:	1a09      	subs	r1, r1, r0
	if (__p)
 801156a:	b108      	cbz	r0, 8011570 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0xf4>
 801156c:	f009 fcfa 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8011570:	6f78      	ldr	r0, [r7, #116]	; 0x74
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011572:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011574:	1a09      	subs	r1, r1, r0
	if (__p)
 8011576:	b108      	cbz	r0, 801157c <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x100>
 8011578:	f009 fcf4 	bl	801af64 <_ZdlPvj>
      { return _M_data_ptr(this->_M_impl._M_start); }
 801157c:	f8d7 9004 	ldr.w	r9, [r7, #4]
 8011580:	e05f      	b.n	8011642 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x1c6>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8011582:	f10c 0104 	add.w	r1, ip, #4
 8011586:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801158a:	f7ff fb70 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801158e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8011592:	4622      	mov	r2, r4
 8011594:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8011598:	4640      	mov	r0, r8
 801159a:	f7fd ffa7 	bl	800f4ec <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb>
 801159e:	4605      	mov	r5, r0
	_M_deallocate(_M_impl._M_start,
 80115a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80115a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80115a4:	1a09      	subs	r1, r1, r0
	if (__p)
 80115a6:	b108      	cbz	r0, 80115ac <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x130>
 80115a8:	f009 fcdc 	bl	801af64 <_ZdlPvj>
		if (success)
 80115ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80115b0:	b913      	cbnz	r3, 80115b8 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x13c>
		return start_index + 1;
 80115b2:	3401      	adds	r4, #1
 80115b4:	b2a4      	uxth	r4, r4
 80115b6:	e052      	b.n	801165e <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x1e2>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 80115b8:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 80115bc:	9500      	str	r5, [sp, #0]
 80115be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80115c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80115c4:	f009 f9d2 	bl	801a96c <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
 80115c8:	e7f3      	b.n	80115b2 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x136>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 80115ca:	f10c 0104 	add.w	r1, ip, #4
 80115ce:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80115d2:	f7ff fb4c 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80115d6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80115da:	4622      	mov	r2, r4
 80115dc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80115e0:	4640      	mov	r0, r8
 80115e2:	f7fd ff83 	bl	800f4ec <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb>
 80115e6:	4605      	mov	r5, r0
	_M_deallocate(_M_impl._M_start,
 80115e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80115ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80115ec:	1a09      	subs	r1, r1, r0
	if (__p)
 80115ee:	b108      	cbz	r0, 80115f4 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x178>
 80115f0:	f009 fcb8 	bl	801af64 <_ZdlPvj>
		if (success)
 80115f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80115f8:	b913      	cbnz	r3, 8011600 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x184>
		return start_index + 1;
 80115fa:	3401      	adds	r4, #1
 80115fc:	b2a4      	uxth	r4, r4
 80115fe:	e02e      	b.n	801165e <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x1e2>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 8011600:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 8011604:	9500      	str	r5, [sp, #0]
 8011606:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801160a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801160c:	f009 f974 	bl	801a8f8 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 8011610:	e7f3      	b.n	80115fa <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x17e>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011612:	f10c 0104 	add.w	r1, ip, #4
 8011616:	f107 0050 	add.w	r0, r7, #80	; 0x50
 801161a:	f7ff fb28 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801161e:	1cfb      	adds	r3, r7, #3
 8011620:	4622      	mov	r2, r4
 8011622:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8011626:	4640      	mov	r0, r8
 8011628:	f7fd ff9e 	bl	800f568 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb>
 801162c:	ed87 0a07 	vstr	s0, [r7, #28]
	_M_deallocate(_M_impl._M_start,
 8011630:	6d38      	ldr	r0, [r7, #80]	; 0x50
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011632:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011634:	1a09      	subs	r1, r1, r0
	if (__p)
 8011636:	b108      	cbz	r0, 801163c <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x1c0>
 8011638:	f009 fc94 	bl	801af64 <_ZdlPvj>
			data = &single_value;
 801163c:	f107 091c 	add.w	r9, r7, #28
			length_to_extract = 1;
 8011640:	2501      	movs	r5, #1
		service_information.length = length_to_extract;
 8011642:	867d      	strh	r5, [r7, #50]	; 0x32
		if (success)
 8011644:	78fb      	ldrb	r3, [r7, #3]
 8011646:	bb3b      	cbnz	r3, 8011698 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x21c>
		return start_index + sizeof(T) * length_to_extract;
 8011648:	00ad      	lsls	r5, r5, #2
 801164a:	b2ad      	uxth	r5, r5
 801164c:	442c      	add	r4, r5
 801164e:	b2a4      	uxth	r4, r4
	_M_deallocate(_M_impl._M_start,
 8011650:	6878      	ldr	r0, [r7, #4]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011652:	68f9      	ldr	r1, [r7, #12]
 8011654:	1a09      	subs	r1, r1, r0
	if (__p)
 8011656:	b108      	cbz	r0, 801165c <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x1e0>
 8011658:	f009 fc84 	bl	801af64 <_ZdlPvj>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801165c:	46b5      	mov	sp, r6
}
 801165e:	4620      	mov	r0, r4
 8011660:	3784      	adds	r7, #132	; 0x84
 8011662:	46bd      	mov	sp, r7
 8011664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8011668:	f10c 0104 	add.w	r1, ip, #4
 801166c:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8011670:	f7ff fafd 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011674:	1cfb      	adds	r3, r7, #3
 8011676:	9301      	str	r3, [sp, #4]
 8011678:	9500      	str	r5, [sp, #0]
 801167a:	4623      	mov	r3, r4
 801167c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8011680:	4649      	mov	r1, r9
 8011682:	4640      	mov	r0, r8
 8011684:	f7ff fcd4 	bl	8011030 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb>
	_M_deallocate(_M_impl._M_start,
 8011688:	6df8      	ldr	r0, [r7, #92]	; 0x5c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801168a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801168c:	1a09      	subs	r1, r1, r0
	if (__p)
 801168e:	2800      	cmp	r0, #0
 8011690:	d0d7      	beq.n	8011642 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x1c6>
	::operator delete(__p
 8011692:	f009 fc67 	bl	801af64 <_ZdlPvj>
			data = array_values;
 8011696:	e7d4      	b.n	8011642 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x1c6>
			services->ReceiveRead<T>(service_information, data);
 8011698:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 801169c:	f8cd 9000 	str.w	r9, [sp]
 80116a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80116a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80116a6:	f7fe f889 	bl	800f7bc <_ZN8Services11ReceiveReadIfEEv20ServiceConfigurationPT_>
 80116aa:	e7cd      	b.n	8011648 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x1cc>

080116ac <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb>:
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 80116ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116b0:	b089      	sub	sp, #36	; 0x24
 80116b2:	4680      	mov	r8, r0
 80116b4:	9102      	str	r1, [sp, #8]
 80116b6:	4691      	mov	r9, r2
 80116b8:	9303      	str	r3, [sp, #12]
 80116ba:	f8bd b048 	ldrh.w	fp, [sp, #72]	; 0x48
 80116be:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
	: _M_start(), _M_finish(), _M_end_of_storage()
 80116c2:	2500      	movs	r5, #0
 80116c4:	6005      	str	r5, [r0, #0]
 80116c6:	6045      	str	r5, [r0, #4]
 80116c8:	6085      	str	r5, [r0, #8]
 80116ca:	e01c      	b.n	8011706 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x5a>
	  std::__throw_bad_alloc();
 80116cc:	f009 fd0e 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80116d0:	2400      	movs	r4, #0
 80116d2:	e02a      	b.n	801172a <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x7e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80116d4:	4632      	mov	r2, r6
 80116d6:	4639      	mov	r1, r7
 80116d8:	4620      	mov	r0, r4
 80116da:	f00a f917 	bl	801b90c <memmove>
 80116de:	e035      	b.n	801174c <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0xa0>
		if (not *success)
 80116e0:	f89a 3000 	ldrb.w	r3, [sl]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d04b      	beq.n	8011780 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0xd4>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80116e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80116ec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80116f0:	4299      	cmp	r1, r3
 80116f2:	d040      	beq.n	8011776 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0xca>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80116f4:	9b04      	ldr	r3, [sp, #16]
 80116f6:	600b      	str	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 80116f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80116fc:	3304      	adds	r3, #4
 80116fe:	f8c8 3004 	str.w	r3, [r8, #4]
	for (uint8_t index = 0; index < length; index++) {
 8011702:	3501      	adds	r5, #1
 8011704:	b2ed      	uxtb	r5, r5
 8011706:	455d      	cmp	r5, fp
 8011708:	da3a      	bge.n	8011780 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0xd4>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801170a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 801170e:	f8d9 2000 	ldr.w	r2, [r9]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011712:	2300      	movs	r3, #0
 8011714:	9305      	str	r3, [sp, #20]
 8011716:	9306      	str	r3, [sp, #24]
 8011718:	9307      	str	r3, [sp, #28]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801171a:	1ab6      	subs	r6, r6, r2
 801171c:	d0d8      	beq.n	80116d0 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x24>
	if (__n > this->_M_max_size())
 801171e:	429e      	cmp	r6, r3
 8011720:	dbd4      	blt.n	80116cc <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x20>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011722:	4630      	mov	r0, r6
 8011724:	f009 fc34 	bl	801af90 <_Znwj>
 8011728:	4604      	mov	r4, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 801172a:	9405      	str	r4, [sp, #20]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801172c:	9406      	str	r4, [sp, #24]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801172e:	4426      	add	r6, r4
 8011730:	9607      	str	r6, [sp, #28]
 8011732:	f8d9 6004 	ldr.w	r6, [r9, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8011736:	9401      	str	r4, [sp, #4]
      return std::__niter_wrap(__result,
 8011738:	f8d9 0000 	ldr.w	r0, [r9]
 801173c:	f7f0 f9bb 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8011740:	4607      	mov	r7, r0
 8011742:	4630      	mov	r0, r6
 8011744:	f7f0 f9b7 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8011748:	1bc6      	subs	r6, r0, r7
 801174a:	d1c3      	bne.n	80116d4 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x28>
	  return __result + _Num;
 801174c:	9b01      	ldr	r3, [sp, #4]
 801174e:	4433      	add	r3, r6
	this->_M_impl._M_finish =
 8011750:	9306      	str	r3, [sp, #24]
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8011752:	9b03      	ldr	r3, [sp, #12]
 8011754:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 8011758:	4653      	mov	r3, sl
 801175a:	b292      	uxth	r2, r2
 801175c:	a905      	add	r1, sp, #20
 801175e:	9802      	ldr	r0, [sp, #8]
 8011760:	f7fd fee3 	bl	800f52a <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb>
 8011764:	9004      	str	r0, [sp, #16]
	_M_deallocate(_M_impl._M_start,
 8011766:	9805      	ldr	r0, [sp, #20]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011768:	9907      	ldr	r1, [sp, #28]
 801176a:	1a09      	subs	r1, r1, r0
	if (__p)
 801176c:	2800      	cmp	r0, #0
 801176e:	d0b7      	beq.n	80116e0 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x34>
	::operator delete(__p
 8011770:	f009 fbf8 	bl	801af64 <_ZdlPvj>
 8011774:	e7b4      	b.n	80116e0 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x34>
	  _M_realloc_insert(end(), __x);
 8011776:	aa04      	add	r2, sp, #16
 8011778:	4640      	mov	r0, r8
 801177a:	f7fe fb15 	bl	800fda8 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>
 801177e:	e7c0      	b.n	8011702 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb+0x56>
}
 8011780:	4640      	mov	r0, r8
 8011782:	b009      	add	sp, #36	; 0x24
 8011784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011788 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 8011788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801178c:	b0a3      	sub	sp, #140	; 0x8c
 801178e:	af02      	add	r7, sp, #8
 8011790:	4680      	mov	r8, r0
 8011792:	468c      	mov	ip, r1
 8011794:	461c      	mov	r4, r3
	service_information.register_ = element.element_register;
 8011796:	e892 0003 	ldmia.w	r2, {r0, r1}
 801179a:	62f8      	str	r0, [r7, #44]	; 0x2c
 801179c:	8639      	strh	r1, [r7, #48]	; 0x30
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 801179e:	f89c 1000 	ldrb.w	r1, [ip]
 80117a2:	f89c 3011 	ldrb.w	r3, [ip, #17]
 80117a6:	f887 1034 	strb.w	r1, [r7, #52]	; 0x34
 80117aa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	service_information.access = element.access;
 80117ae:	7a13      	ldrb	r3, [r2, #8]
 80117b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	service_information.length = 1;
 80117b4:	2101      	movs	r1, #1
 80117b6:	8679      	strh	r1, [r7, #50]	; 0x32
	if (element.command) {
 80117b8:	79d1      	ldrb	r1, [r2, #7]
 80117ba:	2900      	cmp	r1, #0
 80117bc:	d167      	bne.n	801188e <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x106>
	if (element.access == WRITE) {
 80117be:	2b00      	cmp	r3, #0
 80117c0:	f000 8089 	beq.w	80118d6 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x14e>
		return start_index + sizeof(T) * length_to_extract;
 80117c4:	466e      	mov	r6, sp
		T array_values[element.element_register.length];
 80117c6:	8893      	ldrh	r3, [r2, #4]
 80117c8:	009b      	lsls	r3, r3, #2
 80117ca:	3307      	adds	r3, #7
 80117cc:	08db      	lsrs	r3, r3, #3
 80117ce:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
 80117d2:	469d      	mov	sp, r3
 80117d4:	f10d 0908 	add.w	r9, sp, #8
	: _M_start(), _M_finish(), _M_end_of_storage()
 80117d8:	2300      	movs	r3, #0
 80117da:	607b      	str	r3, [r7, #4]
 80117dc:	60bb      	str	r3, [r7, #8]
 80117de:	60fb      	str	r3, [r7, #12]
		if (not element.element_register.isArray) {
 80117e0:	78d3      	ldrb	r3, [r2, #3]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	f000 809b 	beq.w	801191e <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x196>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 80117e8:	8895      	ldrh	r5, [r2, #4]
 80117ea:	2d00      	cmp	r5, #0
 80117ec:	f040 80c1 	bne.w	8011972 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x1ea>
		} else if (element.element_register.isArray && element.element_register.length == 0) {
 80117f0:	8893      	ldrh	r3, [r2, #4]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	f040 80aa 	bne.w	801194c <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x1c4>
	return *(this->_M_impl._M_start + __n);
 80117f8:	4661      	mov	r1, ip
 80117fa:	f851 3f04 	ldr.w	r3, [r1, #4]!
			length_to_extract = message.payload[start_index];
 80117fe:	5d1d      	ldrb	r5, [r3, r4]
			start_index++;
 8011800:	3401      	adds	r4, #1
 8011802:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011804:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8011808:	f7ff fa31 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801180c:	1cfb      	adds	r3, r7, #3
 801180e:	9301      	str	r3, [sp, #4]
 8011810:	9500      	str	r5, [sp, #0]
 8011812:	4623      	mov	r3, r4
 8011814:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8011818:	4641      	mov	r1, r8
 801181a:	f107 0068 	add.w	r0, r7, #104	; 0x68
 801181e:	f7ff ff45 	bl	80116ac <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011822:	2300      	movs	r3, #0
 8011824:	613b      	str	r3, [r7, #16]
 8011826:	617b      	str	r3, [r7, #20]
 8011828:	61bb      	str	r3, [r7, #24]
 801182a:	61fb      	str	r3, [r7, #28]
 801182c:	623b      	str	r3, [r7, #32]
 801182e:	627b      	str	r3, [r7, #36]	; 0x24
	  _M_start = __x._M_start;
 8011830:	6878      	ldr	r0, [r7, #4]
 8011832:	61f8      	str	r0, [r7, #28]
	  _M_finish = __x._M_finish;
 8011834:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8011838:	f8c7 c020 	str.w	ip, [r7, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
 801183c:	68f9      	ldr	r1, [r7, #12]
 801183e:	6279      	str	r1, [r7, #36]	; 0x24
	  _M_start = __x._M_start;
 8011840:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011842:	607a      	str	r2, [r7, #4]
	  _M_finish = __x._M_finish;
 8011844:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011846:	60ba      	str	r2, [r7, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 8011848:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801184a:	60fa      	str	r2, [r7, #12]
	  _M_start = __x._M_start;
 801184c:	66b8      	str	r0, [r7, #104]	; 0x68
	  _M_finish = __x._M_finish;
 801184e:	f8c7 c06c 	str.w	ip, [r7, #108]	; 0x6c
	  _M_end_of_storage = __x._M_end_of_storage;
 8011852:	6739      	str	r1, [r7, #112]	; 0x70
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011854:	61fb      	str	r3, [r7, #28]
 8011856:	623b      	str	r3, [r7, #32]
 8011858:	627b      	str	r3, [r7, #36]	; 0x24
	  _M_start = __x._M_start;
 801185a:	6138      	str	r0, [r7, #16]
	  _M_finish = __x._M_finish;
 801185c:	f8c7 c014 	str.w	ip, [r7, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
 8011860:	61b9      	str	r1, [r7, #24]
	  _M_start = __x._M_start;
 8011862:	66bb      	str	r3, [r7, #104]	; 0x68
	  _M_finish = __x._M_finish;
 8011864:	66fb      	str	r3, [r7, #108]	; 0x6c
	  _M_end_of_storage = __x._M_end_of_storage;
 8011866:	673b      	str	r3, [r7, #112]	; 0x70
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011868:	1a09      	subs	r1, r1, r0
	if (__p)
 801186a:	b108      	cbz	r0, 8011870 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0xe8>
 801186c:	f009 fb7a 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8011870:	6eb8      	ldr	r0, [r7, #104]	; 0x68
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011872:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011874:	1a09      	subs	r1, r1, r0
	if (__p)
 8011876:	b108      	cbz	r0, 801187c <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0xf4>
 8011878:	f009 fb74 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 801187c:	6f78      	ldr	r0, [r7, #116]	; 0x74
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801187e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011880:	1a09      	subs	r1, r1, r0
	if (__p)
 8011882:	b108      	cbz	r0, 8011888 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x100>
 8011884:	f009 fb6e 	bl	801af64 <_ZdlPvj>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8011888:	f8d7 9004 	ldr.w	r9, [r7, #4]
 801188c:	e05e      	b.n	801194c <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x1c4>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 801188e:	f10c 0104 	add.w	r1, ip, #4
 8011892:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8011896:	f7ff f9ea 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801189a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801189e:	4622      	mov	r2, r4
 80118a0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80118a4:	4640      	mov	r0, r8
 80118a6:	f7fd fe21 	bl	800f4ec <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb>
 80118aa:	4605      	mov	r5, r0
	_M_deallocate(_M_impl._M_start,
 80118ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80118ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80118b0:	1a09      	subs	r1, r1, r0
	if (__p)
 80118b2:	b108      	cbz	r0, 80118b8 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x130>
 80118b4:	f009 fb56 	bl	801af64 <_ZdlPvj>
		if (success)
 80118b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80118bc:	b913      	cbnz	r3, 80118c4 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x13c>
		return start_index + 1;
 80118be:	3401      	adds	r4, #1
 80118c0:	b2a4      	uxth	r4, r4
 80118c2:	e051      	b.n	8011968 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x1e0>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 80118c4:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 80118c8:	9500      	str	r5, [sp, #0]
 80118ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80118ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80118d0:	f009 f84c 	bl	801a96c <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
 80118d4:	e7f3      	b.n	80118be <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x136>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 80118d6:	f10c 0104 	add.w	r1, ip, #4
 80118da:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80118de:	f7ff f9c6 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80118e2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80118e6:	4622      	mov	r2, r4
 80118e8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80118ec:	4640      	mov	r0, r8
 80118ee:	f7fd fdfd 	bl	800f4ec <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb>
 80118f2:	4605      	mov	r5, r0
	_M_deallocate(_M_impl._M_start,
 80118f4:	6c78      	ldr	r0, [r7, #68]	; 0x44
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80118f6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80118f8:	1a09      	subs	r1, r1, r0
	if (__p)
 80118fa:	b108      	cbz	r0, 8011900 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x178>
 80118fc:	f009 fb32 	bl	801af64 <_ZdlPvj>
		if (success)
 8011900:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011904:	b913      	cbnz	r3, 801190c <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x184>
		return start_index + 1;
 8011906:	3401      	adds	r4, #1
 8011908:	b2a4      	uxth	r4, r4
 801190a:	e02d      	b.n	8011968 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x1e0>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 801190c:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 8011910:	9500      	str	r5, [sp, #0]
 8011912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011916:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011918:	f008 ffee 	bl	801a8f8 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 801191c:	e7f3      	b.n	8011906 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x17e>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801191e:	f10c 0104 	add.w	r1, ip, #4
 8011922:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8011926:	f7ff f9a2 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801192a:	1cfb      	adds	r3, r7, #3
 801192c:	4622      	mov	r2, r4
 801192e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8011932:	4640      	mov	r0, r8
 8011934:	f7fd fdf9 	bl	800f52a <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb>
 8011938:	61f8      	str	r0, [r7, #28]
	_M_deallocate(_M_impl._M_start,
 801193a:	6d38      	ldr	r0, [r7, #80]	; 0x50
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801193c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801193e:	1a09      	subs	r1, r1, r0
	if (__p)
 8011940:	b108      	cbz	r0, 8011946 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x1be>
 8011942:	f009 fb0f 	bl	801af64 <_ZdlPvj>
			data = &single_value;
 8011946:	f107 091c 	add.w	r9, r7, #28
			length_to_extract = 1;
 801194a:	2501      	movs	r5, #1
		service_information.length = length_to_extract;
 801194c:	867d      	strh	r5, [r7, #50]	; 0x32
		if (success)
 801194e:	78fb      	ldrb	r3, [r7, #3]
 8011950:	bb3b      	cbnz	r3, 80119a2 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x21a>
		return start_index + sizeof(T) * length_to_extract;
 8011952:	00ad      	lsls	r5, r5, #2
 8011954:	b2ad      	uxth	r5, r5
 8011956:	442c      	add	r4, r5
 8011958:	b2a4      	uxth	r4, r4
	_M_deallocate(_M_impl._M_start,
 801195a:	6878      	ldr	r0, [r7, #4]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801195c:	68f9      	ldr	r1, [r7, #12]
 801195e:	1a09      	subs	r1, r1, r0
	if (__p)
 8011960:	b108      	cbz	r0, 8011966 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x1de>
 8011962:	f009 faff 	bl	801af64 <_ZdlPvj>
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8011966:	46b5      	mov	sp, r6
}
 8011968:	4620      	mov	r0, r4
 801196a:	3784      	adds	r7, #132	; 0x84
 801196c:	46bd      	mov	sp, r7
 801196e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8011972:	f10c 0104 	add.w	r1, ip, #4
 8011976:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 801197a:	f7ff f978 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801197e:	1cfb      	adds	r3, r7, #3
 8011980:	9301      	str	r3, [sp, #4]
 8011982:	9500      	str	r5, [sp, #0]
 8011984:	4623      	mov	r3, r4
 8011986:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801198a:	4649      	mov	r1, r9
 801198c:	4640      	mov	r0, r8
 801198e:	f7ff faf5 	bl	8010f7c <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb>
	_M_deallocate(_M_impl._M_start,
 8011992:	6df8      	ldr	r0, [r7, #92]	; 0x5c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011994:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011996:	1a09      	subs	r1, r1, r0
	if (__p)
 8011998:	2800      	cmp	r0, #0
 801199a:	d0d7      	beq.n	801194c <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x1c4>
	::operator delete(__p
 801199c:	f009 fae2 	bl	801af64 <_ZdlPvj>
			data = array_values;
 80119a0:	e7d4      	b.n	801194c <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x1c4>
			services->ReceiveRead<T>(service_information, data);
 80119a2:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 80119a6:	f8cd 9000 	str.w	r9, [sp]
 80119aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80119ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80119b0:	f7fd fe99 	bl	800f6e6 <_ZN8Services11ReceiveReadImEEv20ServiceConfigurationPT_>
 80119b4:	e7cd      	b.n	8011952 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x1ca>
	...

080119b8 <_ZN13Communication4SpinEv>:
void Communication::Spin(void) {
 80119b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119bc:	b08f      	sub	sp, #60	; 0x3c
 80119be:	4606      	mov	r6, r0
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 80119c0:	f04f 31ff 	mov.w	r1, #4294967295
 80119c4:	6800      	ldr	r0, [r0, #0]
 80119c6:	f7fa ff77 	bl	800c8b8 <osSemaphoreAcquire>
	uint8_t index = 0;
 80119ca:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80119cc:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80119ce:	6d32      	ldr	r2, [r6, #80]	; 0x50
 80119d0:	1a9b      	subs	r3, r3, r2
 80119d2:	109b      	asrs	r3, r3, #2
 80119d4:	495f      	ldr	r1, [pc, #380]	; (8011b54 <_ZN13Communication4SpinEv+0x19c>)
 80119d6:	fb01 f303 	mul.w	r3, r1, r3
	while (index < pending_messages.size()) {
 80119da:	429d      	cmp	r5, r3
 80119dc:	f080 80b1 	bcs.w	8011b42 <_ZN13Communication4SpinEv+0x18a>
	return *(this->_M_impl._M_start + __n);
 80119e0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80119e4:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 80119e8:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80119ec:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80119f0:	f88d 300c 	strb.w	r3, [sp, #12]
 80119f4:	f107 0804 	add.w	r8, r7, #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80119f8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80119fc:	687a      	ldr	r2, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80119fe:	2300      	movs	r3, #0
 8011a00:	9304      	str	r3, [sp, #16]
 8011a02:	9305      	str	r3, [sp, #20]
 8011a04:	9306      	str	r3, [sp, #24]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011a06:	1aa4      	subs	r4, r4, r2
 8011a08:	d07a      	beq.n	8011b00 <_ZN13Communication4SpinEv+0x148>
	if (__n > this->_M_max_size())
 8011a0a:	429c      	cmp	r4, r3
 8011a0c:	db76      	blt.n	8011afc <_ZN13Communication4SpinEv+0x144>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011a0e:	4620      	mov	r0, r4
 8011a10:	f009 fabe 	bl	801af90 <_Znwj>
 8011a14:	4681      	mov	r9, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8011a16:	f8cd 9010 	str.w	r9, [sp, #16]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8011a1a:	f8cd 9014 	str.w	r9, [sp, #20]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011a1e:	444c      	add	r4, r9
 8011a20:	9406      	str	r4, [sp, #24]
 8011a22:	f8d8 a004 	ldr.w	sl, [r8, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8011a26:	46c8      	mov	r8, r9
      return std::__niter_wrap(__result,
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f7f0 f844 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8011a2e:	4604      	mov	r4, r0
 8011a30:	4650      	mov	r0, sl
 8011a32:	f7f0 f840 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8011a36:	ebb0 0a04 	subs.w	sl, r0, r4
 8011a3a:	d164      	bne.n	8011b06 <_ZN13Communication4SpinEv+0x14e>
	  return __result + _Num;
 8011a3c:	eb08 000a 	add.w	r0, r8, sl
	this->_M_impl._M_finish =
 8011a40:	9005      	str	r0, [sp, #20]
 8011a42:	7c3b      	ldrb	r3, [r7, #16]
 8011a44:	f88d 301c 	strb.w	r3, [sp, #28]
 8011a48:	7c7b      	ldrb	r3, [r7, #17]
 8011a4a:	f88d 301d 	strb.w	r3, [sp, #29]
		CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 8011a4e:	f10d 0223 	add.w	r2, sp, #35	; 0x23
 8011a52:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8011a56:	4630      	mov	r0, r6
 8011a58:	f7fd f859 	bl	800eb0e <_ZN13Communication12FindProtocolEhPb>
 8011a5c:	4681      	mov	r9, r0
		if (!success)
 8011a5e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d055      	beq.n	8011b12 <_ZN13Communication4SpinEv+0x15a>
		message.source_address = address; // set the source address as the module address
 8011a66:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8011a6a:	f88d 301d 	strb.w	r3, [sp, #29]
		HAL_StatusTypeDef status = protocol->Send(message);
 8011a6e:	f8d9 3000 	ldr.w	r3, [r9]
 8011a72:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8011a76:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011a7a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011a7e:	9f05      	ldr	r7, [sp, #20]
 8011a80:	9a04      	ldr	r2, [sp, #16]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011a82:	2300      	movs	r3, #0
 8011a84:	930a      	str	r3, [sp, #40]	; 0x28
 8011a86:	930b      	str	r3, [sp, #44]	; 0x2c
 8011a88:	930c      	str	r3, [sp, #48]	; 0x30
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011a8a:	1abf      	subs	r7, r7, r2
 8011a8c:	d04a      	beq.n	8011b24 <_ZN13Communication4SpinEv+0x16c>
	if (__n > this->_M_max_size())
 8011a8e:	429f      	cmp	r7, r3
 8011a90:	db46      	blt.n	8011b20 <_ZN13Communication4SpinEv+0x168>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011a92:	4638      	mov	r0, r7
 8011a94:	f009 fa7c 	bl	801af90 <_Znwj>
 8011a98:	4604      	mov	r4, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8011a9a:	940a      	str	r4, [sp, #40]	; 0x28
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8011a9c:	940b      	str	r4, [sp, #44]	; 0x2c
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011a9e:	4427      	add	r7, r4
 8011aa0:	970c      	str	r7, [sp, #48]	; 0x30
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8011aa2:	9401      	str	r4, [sp, #4]
      return std::__niter_wrap(__result,
 8011aa4:	9804      	ldr	r0, [sp, #16]
 8011aa6:	f7f0 f806 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8011aaa:	4680      	mov	r8, r0
 8011aac:	9805      	ldr	r0, [sp, #20]
 8011aae:	f7f0 f802 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8011ab2:	ebb0 0708 	subs.w	r7, r0, r8
 8011ab6:	d137      	bne.n	8011b28 <_ZN13Communication4SpinEv+0x170>
	  return __result + _Num;
 8011ab8:	9b01      	ldr	r3, [sp, #4]
 8011aba:	443b      	add	r3, r7
	this->_M_impl._M_finish =
 8011abc:	930b      	str	r3, [sp, #44]	; 0x2c
 8011abe:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8011ac2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8011ac6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8011aca:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8011ace:	a909      	add	r1, sp, #36	; 0x24
 8011ad0:	4648      	mov	r0, r9
 8011ad2:	47d0      	blx	sl
 8011ad4:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8011ad6:	980a      	ldr	r0, [sp, #40]	; 0x28
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011ad8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011ada:	1a09      	subs	r1, r1, r0
	if (__p)
 8011adc:	b108      	cbz	r0, 8011ae2 <_ZN13Communication4SpinEv+0x12a>
	::operator delete(__p
 8011ade:	f009 fa41 	bl	801af64 <_ZdlPvj>
		if (status == HAL_OK || status == HAL_ERROR)
 8011ae2:	2c01      	cmp	r4, #1
 8011ae4:	d926      	bls.n	8011b34 <_ZN13Communication4SpinEv+0x17c>
			index++;
 8011ae6:	3501      	adds	r5, #1
 8011ae8:	b2ed      	uxtb	r5, r5
	_M_deallocate(_M_impl._M_start,
 8011aea:	9804      	ldr	r0, [sp, #16]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011aec:	9906      	ldr	r1, [sp, #24]
 8011aee:	1a09      	subs	r1, r1, r0
	if (__p)
 8011af0:	2800      	cmp	r0, #0
 8011af2:	f43f af6b 	beq.w	80119cc <_ZN13Communication4SpinEv+0x14>
 8011af6:	f009 fa35 	bl	801af64 <_ZdlPvj>
	while (index < pending_messages.size()) {
 8011afa:	e767      	b.n	80119cc <_ZN13Communication4SpinEv+0x14>
	  std::__throw_bad_alloc();
 8011afc:	f009 faf6 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011b00:	f04f 0900 	mov.w	r9, #0
 8011b04:	e787      	b.n	8011a16 <_ZN13Communication4SpinEv+0x5e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8011b06:	4652      	mov	r2, sl
 8011b08:	4621      	mov	r1, r4
 8011b0a:	4648      	mov	r0, r9
 8011b0c:	f009 fefe 	bl	801b90c <memmove>
 8011b10:	e794      	b.n	8011a3c <_ZN13Communication4SpinEv+0x84>
 8011b12:	6d31      	ldr	r1, [r6, #80]	; 0x50
      { return _M_erase(begin() + (__position - cbegin())); }
 8011b14:	4459      	add	r1, fp
 8011b16:	f106 0050 	add.w	r0, r6, #80	; 0x50
 8011b1a:	f7fd febb 	bl	800f894 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
 8011b1e:	e7a2      	b.n	8011a66 <_ZN13Communication4SpinEv+0xae>
 8011b20:	f009 fae4 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011b24:	2400      	movs	r4, #0
 8011b26:	e7b8      	b.n	8011a9a <_ZN13Communication4SpinEv+0xe2>
 8011b28:	463a      	mov	r2, r7
 8011b2a:	4641      	mov	r1, r8
 8011b2c:	4620      	mov	r0, r4
 8011b2e:	f009 feed 	bl	801b90c <memmove>
 8011b32:	e7c1      	b.n	8011ab8 <_ZN13Communication4SpinEv+0x100>
 8011b34:	6d31      	ldr	r1, [r6, #80]	; 0x50
      { return _M_erase(begin() + (__position - cbegin())); }
 8011b36:	4459      	add	r1, fp
 8011b38:	f106 0050 	add.w	r0, r6, #80	; 0x50
 8011b3c:	f7fd feaa 	bl	800f894 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
 8011b40:	e7d3      	b.n	8011aea <_ZN13Communication4SpinEv+0x132>
	osSemaphoreRelease(CommunicationSemaphore);
 8011b42:	6830      	ldr	r0, [r6, #0]
 8011b44:	f7fa feec 	bl	800c920 <osSemaphoreRelease>
	osDelay(DEFAULT_COMMUNICATION_PERIOD);
 8011b48:	2064      	movs	r0, #100	; 0x64
 8011b4a:	f7fa fe4b 	bl	800c7e4 <osDelay>
}
 8011b4e:	b00f      	add	sp, #60	; 0x3c
 8011b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b54:	cccccccd 	.word	0xcccccccd

08011b58 <_ZN14MessageElementC1ERKS_>:
struct MessageElement {
 8011b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b5c:	4604      	mov	r4, r0
 8011b5e:	460d      	mov	r5, r1
 8011b60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b64:	6020      	str	r0, [r4, #0]
 8011b66:	80a1      	strh	r1, [r4, #4]
 8011b68:	79ab      	ldrb	r3, [r5, #6]
 8011b6a:	71a3      	strb	r3, [r4, #6]
 8011b6c:	79eb      	ldrb	r3, [r5, #7]
 8011b6e:	71e3      	strb	r3, [r4, #7]
 8011b70:	7a2b      	ldrb	r3, [r5, #8]
 8011b72:	7223      	strb	r3, [r4, #8]
 8011b74:	f104 070c 	add.w	r7, r4, #12
 8011b78:	f105 080c 	add.w	r8, r5, #12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011b7c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011b80:	68ee      	ldr	r6, [r5, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011b82:	2300      	movs	r3, #0
 8011b84:	60e3      	str	r3, [r4, #12]
 8011b86:	607b      	str	r3, [r7, #4]
 8011b88:	60bb      	str	r3, [r7, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011b8a:	1b86      	subs	r6, r0, r6
 8011b8c:	d01c      	beq.n	8011bc8 <_ZN14MessageElementC1ERKS_+0x70>
	if (__n > this->_M_max_size())
 8011b8e:	429e      	cmp	r6, r3
 8011b90:	db18      	blt.n	8011bc4 <_ZN14MessageElementC1ERKS_+0x6c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011b92:	4630      	mov	r0, r6
 8011b94:	f009 f9fc 	bl	801af90 <_Znwj>
	this->_M_impl._M_start = this->_M_allocate(__n);
 8011b98:	60e0      	str	r0, [r4, #12]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8011b9a:	6078      	str	r0, [r7, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011b9c:	4430      	add	r0, r6
 8011b9e:	60b8      	str	r0, [r7, #8]
 8011ba0:	f8d8 9004 	ldr.w	r9, [r8, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8011ba4:	f8d4 800c 	ldr.w	r8, [r4, #12]
      return std::__niter_wrap(__result,
 8011ba8:	68e8      	ldr	r0, [r5, #12]
 8011baa:	f7ef ff84 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8011bae:	4606      	mov	r6, r0
 8011bb0:	4648      	mov	r0, r9
 8011bb2:	f7ef ff80 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8011bb6:	1b85      	subs	r5, r0, r6
 8011bb8:	d108      	bne.n	8011bcc <_ZN14MessageElementC1ERKS_+0x74>
	  return __result + _Num;
 8011bba:	4445      	add	r5, r8
	this->_M_impl._M_finish =
 8011bbc:	607d      	str	r5, [r7, #4]
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	  std::__throw_bad_alloc();
 8011bc4:	f009 fa92 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011bc8:	2000      	movs	r0, #0
 8011bca:	e7e5      	b.n	8011b98 <_ZN14MessageElementC1ERKS_+0x40>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8011bcc:	462a      	mov	r2, r5
 8011bce:	4631      	mov	r1, r6
 8011bd0:	4640      	mov	r0, r8
 8011bd2:	f009 fe9b 	bl	801b90c <memmove>
 8011bd6:	e7f0      	b.n	8011bba <_ZN14MessageElementC1ERKS_+0x62>

08011bd8 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bdc:	b087      	sub	sp, #28
 8011bde:	9200      	str	r2, [sp, #0]
 8011be0:	2301      	movs	r3, #1
 8011be2:	9304      	str	r3, [sp, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011be4:	6843      	ldr	r3, [r0, #4]
 8011be6:	6805      	ldr	r5, [r0, #0]
 8011be8:	1b5d      	subs	r5, r3, r5
 8011bea:	10ad      	asrs	r5, r5, #2
 8011bec:	4a76      	ldr	r2, [pc, #472]	; (8011dc8 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1f0>)
 8011bee:	fb02 f505 	mul.w	r5, r2, r5
	if (max_size() - size() < __n)
 8011bf2:	4a76      	ldr	r2, [pc, #472]	; (8011dcc <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1f4>)
 8011bf4:	1b52      	subs	r2, r2, r5
 8011bf6:	2a00      	cmp	r2, #0
 8011bf8:	d066      	beq.n	8011cc8 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf0>
 8011bfa:	4606      	mov	r6, r0
	const size_type __len = size() + (std::max)(size(), __n);
 8011bfc:	9505      	str	r5, [sp, #20]
      if (__a < __b)
 8011bfe:	2d00      	cmp	r5, #0
 8011c00:	d065      	beq.n	8011cce <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf6>
      return __a;
 8011c02:	aa05      	add	r2, sp, #20
 8011c04:	6812      	ldr	r2, [r2, #0]
 8011c06:	4415      	add	r5, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011c08:	6832      	ldr	r2, [r6, #0]
 8011c0a:	1a9b      	subs	r3, r3, r2
 8011c0c:	109b      	asrs	r3, r3, #2
 8011c0e:	4a6e      	ldr	r2, [pc, #440]	; (8011dc8 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1f0>)
 8011c10:	fb02 f303 	mul.w	r3, r2, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011c14:	429d      	cmp	r5, r3
 8011c16:	d35c      	bcc.n	8011cd2 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfa>
 8011c18:	4b6c      	ldr	r3, [pc, #432]	; (8011dcc <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1f4>)
 8011c1a:	429d      	cmp	r5, r3
 8011c1c:	d85b      	bhi.n	8011cd6 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfe>
      pointer __old_start = this->_M_impl._M_start;
 8011c1e:	6833      	ldr	r3, [r6, #0]
 8011c20:	9302      	str	r3, [sp, #8]
      pointer __old_finish = this->_M_impl._M_finish;
 8011c22:	6877      	ldr	r7, [r6, #4]
    { return __lhs.base() - __rhs.base(); }
 8011c24:	460c      	mov	r4, r1
 8011c26:	eba1 0903 	sub.w	r9, r1, r3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011c2a:	2d00      	cmp	r5, #0
 8011c2c:	d057      	beq.n	8011cde <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x106>
	if (__n > this->_M_max_size())
 8011c2e:	4b67      	ldr	r3, [pc, #412]	; (8011dcc <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1f4>)
 8011c30:	429d      	cmp	r5, r3
 8011c32:	d852      	bhi.n	8011cda <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x102>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011c34:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8011c38:	0080      	lsls	r0, r0, #2
 8011c3a:	f009 f9a9 	bl	801af90 <_Znwj>
 8011c3e:	9001      	str	r0, [sp, #4]
	  _Alloc_traits::construct(this->_M_impl,
 8011c40:	9a01      	ldr	r2, [sp, #4]
 8011c42:	eb02 0809 	add.w	r8, r2, r9
 8011c46:	9800      	ldr	r0, [sp, #0]
 8011c48:	4683      	mov	fp, r0
 8011c4a:	f81b 3b04 	ldrb.w	r3, [fp], #4
 8011c4e:	f802 3009 	strb.w	r3, [r2, r9]
 8011c52:	f108 0a04 	add.w	sl, r8, #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011c56:	f8db 1004 	ldr.w	r1, [fp, #4]
 8011c5a:	6842      	ldr	r2, [r0, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	f8c8 3004 	str.w	r3, [r8, #4]
 8011c62:	f8ca 3004 	str.w	r3, [sl, #4]
 8011c66:	f8ca 3008 	str.w	r3, [sl, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011c6a:	ebb1 0902 	subs.w	r9, r1, r2
 8011c6e:	d03b      	beq.n	8011ce8 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x110>
	if (__n > this->_M_max_size())
 8011c70:	4599      	cmp	r9, r3
 8011c72:	db37      	blt.n	8011ce4 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x10c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011c74:	4648      	mov	r0, r9
 8011c76:	f009 f98b 	bl	801af90 <_Znwj>
	this->_M_impl._M_start = this->_M_allocate(__n);
 8011c7a:	f8c8 0004 	str.w	r0, [r8, #4]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8011c7e:	f8ca 0004 	str.w	r0, [sl, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011c82:	4448      	add	r0, r9
 8011c84:	f8ca 0008 	str.w	r0, [sl, #8]
      : _M_current(__i) { }
 8011c88:	f8db 9004 	ldr.w	r9, [fp, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8011c8c:	f8d8 b004 	ldr.w	fp, [r8, #4]
      return std::__niter_wrap(__result,
 8011c90:	9b00      	ldr	r3, [sp, #0]
 8011c92:	6858      	ldr	r0, [r3, #4]
 8011c94:	f7ef ff0f 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8011c98:	9003      	str	r0, [sp, #12]
 8011c9a:	4648      	mov	r0, r9
 8011c9c:	f7ef ff0b 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8011ca0:	9b03      	ldr	r3, [sp, #12]
 8011ca2:	ebb0 0903 	subs.w	r9, r0, r3
 8011ca6:	d121      	bne.n	8011cec <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x114>
	  return __result + _Num;
 8011ca8:	eb0b 0009 	add.w	r0, fp, r9
	this->_M_impl._M_finish =
 8011cac:	f8ca 0004 	str.w	r0, [sl, #4]
 8011cb0:	9a00      	ldr	r2, [sp, #0]
 8011cb2:	7c13      	ldrb	r3, [r2, #16]
 8011cb4:	f888 3010 	strb.w	r3, [r8, #16]
 8011cb8:	7c53      	ldrb	r3, [r2, #17]
 8011cba:	f888 3011 	strb.w	r3, [r8, #17]
      _ForwardIterator __cur = __result;
 8011cbe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011cc2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8011cc6:	e01b      	b.n	8011d00 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x128>
	  __throw_length_error(__N(__s));
 8011cc8:	4841      	ldr	r0, [pc, #260]	; (8011dd0 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1f8>)
 8011cca:	f009 fa15 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 8011cce:	aa04      	add	r2, sp, #16
 8011cd0:	e798      	b.n	8011c04 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x2c>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011cd2:	4d3e      	ldr	r5, [pc, #248]	; (8011dcc <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1f4>)
 8011cd4:	e7a3      	b.n	8011c1e <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8011cd6:	4d3d      	ldr	r5, [pc, #244]	; (8011dcc <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1f4>)
 8011cd8:	e7a1      	b.n	8011c1e <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
	  std::__throw_bad_alloc();
 8011cda:	f009 fa07 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011cde:	2300      	movs	r3, #0
 8011ce0:	9301      	str	r3, [sp, #4]
 8011ce2:	e7ad      	b.n	8011c40 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x68>
 8011ce4:	f009 fa02 	bl	801b0ec <_ZSt17__throw_bad_allocv>
 8011ce8:	2000      	movs	r0, #0
 8011cea:	e7c6      	b.n	8011c7a <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8011cec:	464a      	mov	r2, r9
 8011cee:	4619      	mov	r1, r3
 8011cf0:	4658      	mov	r0, fp
 8011cf2:	f009 fe0b 	bl	801b90c <memmove>
 8011cf6:	e7d7      	b.n	8011ca8 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd0>
      for (; __first != __last; ++__first, (void)++__cur)
 8011cf8:	f109 0914 	add.w	r9, r9, #20
 8011cfc:	f108 0814 	add.w	r8, r8, #20
 8011d00:	454c      	cmp	r4, r9
 8011d02:	d028      	beq.n	8011d56 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x17e>
 8011d04:	f899 3000 	ldrb.w	r3, [r9]
 8011d08:	f888 3000 	strb.w	r3, [r8]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8011d0c:	f8d9 3004 	ldr.w	r3, [r9, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8011d10:	f8c8 3004 	str.w	r3, [r8, #4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8011d14:	f8d9 3008 	ldr.w	r3, [r9, #8]
	  _M_end_of_storage(__x._M_end_of_storage)
 8011d18:	f8c8 3008 	str.w	r3, [r8, #8]
 8011d1c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8011d20:	f8c8 300c 	str.w	r3, [r8, #12]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8011d24:	2300      	movs	r3, #0
 8011d26:	f8c9 300c 	str.w	r3, [r9, #12]
 8011d2a:	f8c9 3008 	str.w	r3, [r9, #8]
 8011d2e:	f8c9 3004 	str.w	r3, [r9, #4]
 8011d32:	f899 3010 	ldrb.w	r3, [r9, #16]
 8011d36:	f888 3010 	strb.w	r3, [r8, #16]
 8011d3a:	f899 3011 	ldrb.w	r3, [r9, #17]
 8011d3e:	f888 3011 	strb.w	r3, [r8, #17]
	_M_deallocate(_M_impl._M_start,
 8011d42:	f8d9 0004 	ldr.w	r0, [r9, #4]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011d46:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8011d4a:	1a09      	subs	r1, r1, r0
	if (__p)
 8011d4c:	2800      	cmp	r0, #0
 8011d4e:	d0d3      	beq.n	8011cf8 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x120>
	::operator delete(__p
 8011d50:	f009 f908 	bl	801af64 <_ZdlPvj>
 8011d54:	e7d0      	b.n	8011cf8 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x120>
	      ++__new_finish;
 8011d56:	f108 0814 	add.w	r8, r8, #20
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8011d5a:	e002      	b.n	8011d62 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x18a>
      for (; __first != __last; ++__first, (void)++__cur)
 8011d5c:	3414      	adds	r4, #20
 8011d5e:	f108 0814 	add.w	r8, r8, #20
 8011d62:	42a7      	cmp	r7, r4
 8011d64:	d01d      	beq.n	8011da2 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1ca>
 8011d66:	7823      	ldrb	r3, [r4, #0]
 8011d68:	f888 3000 	strb.w	r3, [r8]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8011d6c:	6863      	ldr	r3, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8011d6e:	f8c8 3004 	str.w	r3, [r8, #4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8011d72:	68a3      	ldr	r3, [r4, #8]
	  _M_end_of_storage(__x._M_end_of_storage)
 8011d74:	f8c8 3008 	str.w	r3, [r8, #8]
 8011d78:	68e3      	ldr	r3, [r4, #12]
 8011d7a:	f8c8 300c 	str.w	r3, [r8, #12]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8011d7e:	2300      	movs	r3, #0
 8011d80:	60e3      	str	r3, [r4, #12]
 8011d82:	60a3      	str	r3, [r4, #8]
 8011d84:	6063      	str	r3, [r4, #4]
 8011d86:	7c23      	ldrb	r3, [r4, #16]
 8011d88:	f888 3010 	strb.w	r3, [r8, #16]
 8011d8c:	7c63      	ldrb	r3, [r4, #17]
 8011d8e:	f888 3011 	strb.w	r3, [r8, #17]
	_M_deallocate(_M_impl._M_start,
 8011d92:	6860      	ldr	r0, [r4, #4]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011d94:	68e1      	ldr	r1, [r4, #12]
 8011d96:	1a09      	subs	r1, r1, r0
	if (__p)
 8011d98:	2800      	cmp	r0, #0
 8011d9a:	d0df      	beq.n	8011d5c <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x184>
 8011d9c:	f009 f8e2 	bl	801af64 <_ZdlPvj>
 8011da0:	e7dc      	b.n	8011d5c <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x184>
		    this->_M_impl._M_end_of_storage - __old_start);
 8011da2:	68b1      	ldr	r1, [r6, #8]
 8011da4:	9b02      	ldr	r3, [sp, #8]
 8011da6:	1ac9      	subs	r1, r1, r3
 8011da8:	b113      	cbz	r3, 8011db0 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1d8>
 8011daa:	4618      	mov	r0, r3
 8011dac:	f009 f8da 	bl	801af64 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 8011db0:	9b01      	ldr	r3, [sp, #4]
 8011db2:	6033      	str	r3, [r6, #0]
      this->_M_impl._M_finish = __new_finish;
 8011db4:	f8c6 8004 	str.w	r8, [r6, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011db8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8011dbc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8011dc0:	60b5      	str	r5, [r6, #8]
    }
 8011dc2:	b007      	add	sp, #28
 8011dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dc8:	cccccccd 	.word	0xcccccccd
 8011dcc:	06666666 	.word	0x06666666
 8011dd0:	0801bde4 	.word	0x0801bde4

08011dd4 <_ZN13Communication4SendE13MessageHeader>:
HAL_StatusTypeDef Communication::Send(MessageHeader message) {
 8011dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dd8:	b087      	sub	sp, #28
 8011dda:	4605      	mov	r5, r0
 8011ddc:	460c      	mov	r4, r1
	CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 8011dde:	f10d 0203 	add.w	r2, sp, #3
 8011de2:	7809      	ldrb	r1, [r1, #0]
 8011de4:	f7fc fe93 	bl	800eb0e <_ZN13Communication12FindProtocolEhPb>
	if (!success) return HAL_ERROR;
 8011de8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011dec:	b923      	cbnz	r3, 8011df8 <_ZN13Communication4SendE13MessageHeader+0x24>
 8011dee:	2601      	movs	r6, #1
}
 8011df0:	4630      	mov	r0, r6
 8011df2:	b007      	add	sp, #28
 8011df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011df8:	4607      	mov	r7, r0
	message.source_address = address; // set the source address as the module address
 8011dfa:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8011dfe:	7463      	strb	r3, [r4, #17]
	leds->CommunicationLED(message.interface);
 8011e00:	7821      	ldrb	r1, [r4, #0]
 8011e02:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8011e04:	f004 fc99 	bl	801673a <_ZN4LEDS16CommunicationLEDEh>
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 8011e08:	f04f 31ff 	mov.w	r1, #4294967295
 8011e0c:	6828      	ldr	r0, [r5, #0]
 8011e0e:	f7fa fd53 	bl	800c8b8 <osSemaphoreAcquire>
	HAL_StatusTypeDef status = protocol->Send(message);
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8011e18:	46a0      	mov	r8, r4
 8011e1a:	f818 3b04 	ldrb.w	r3, [r8], #4
 8011e1e:	f88d 3004 	strb.w	r3, [sp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011e22:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8011e26:	6862      	ldr	r2, [r4, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011e28:	2300      	movs	r3, #0
 8011e2a:	9302      	str	r3, [sp, #8]
 8011e2c:	9303      	str	r3, [sp, #12]
 8011e2e:	9304      	str	r3, [sp, #16]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011e30:	1ab6      	subs	r6, r6, r2
 8011e32:	d035      	beq.n	8011ea0 <_ZN13Communication4SendE13MessageHeader+0xcc>
	if (__n > this->_M_max_size())
 8011e34:	429e      	cmp	r6, r3
 8011e36:	db31      	blt.n	8011e9c <_ZN13Communication4SendE13MessageHeader+0xc8>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011e38:	4630      	mov	r0, r6
 8011e3a:	f009 f8a9 	bl	801af90 <_Znwj>
 8011e3e:	4682      	mov	sl, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8011e40:	f8cd a008 	str.w	sl, [sp, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8011e44:	f8cd a00c 	str.w	sl, [sp, #12]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011e48:	4456      	add	r6, sl
 8011e4a:	9604      	str	r6, [sp, #16]
 8011e4c:	f8d8 b004 	ldr.w	fp, [r8, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8011e50:	46d0      	mov	r8, sl
      return std::__niter_wrap(__result,
 8011e52:	6860      	ldr	r0, [r4, #4]
 8011e54:	f7ef fe2f 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8011e58:	4606      	mov	r6, r0
 8011e5a:	4658      	mov	r0, fp
 8011e5c:	f7ef fe2b 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8011e60:	ebb0 0b06 	subs.w	fp, r0, r6
 8011e64:	d11f      	bne.n	8011ea6 <_ZN13Communication4SendE13MessageHeader+0xd2>
	  return __result + _Num;
 8011e66:	eb08 000b 	add.w	r0, r8, fp
	this->_M_impl._M_finish =
 8011e6a:	9003      	str	r0, [sp, #12]
 8011e6c:	7c23      	ldrb	r3, [r4, #16]
 8011e6e:	f88d 3014 	strb.w	r3, [sp, #20]
 8011e72:	7c63      	ldrb	r3, [r4, #17]
 8011e74:	f88d 3015 	strb.w	r3, [sp, #21]
 8011e78:	a901      	add	r1, sp, #4
 8011e7a:	4638      	mov	r0, r7
 8011e7c:	47c8      	blx	r9
 8011e7e:	4606      	mov	r6, r0
	_M_deallocate(_M_impl._M_start,
 8011e80:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011e82:	9904      	ldr	r1, [sp, #16]
 8011e84:	1a09      	subs	r1, r1, r0
	if (__p)
 8011e86:	b108      	cbz	r0, 8011e8c <_ZN13Communication4SendE13MessageHeader+0xb8>
	::operator delete(__p
 8011e88:	f009 f86c 	bl	801af64 <_ZdlPvj>
	if (status == HAL_BUSY || status == HAL_TIMEOUT) {
 8011e8c:	1eb3      	subs	r3, r6, #2
 8011e8e:	b2db      	uxtb	r3, r3
 8011e90:	2b01      	cmp	r3, #1
 8011e92:	d90e      	bls.n	8011eb2 <_ZN13Communication4SendE13MessageHeader+0xde>
	osSemaphoreRelease(CommunicationSemaphore);
 8011e94:	6828      	ldr	r0, [r5, #0]
 8011e96:	f7fa fd43 	bl	800c920 <osSemaphoreRelease>
	return status;
 8011e9a:	e7a9      	b.n	8011df0 <_ZN13Communication4SendE13MessageHeader+0x1c>
	  std::__throw_bad_alloc();
 8011e9c:	f009 f926 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011ea0:	f04f 0a00 	mov.w	sl, #0
 8011ea4:	e7cc      	b.n	8011e40 <_ZN13Communication4SendE13MessageHeader+0x6c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8011ea6:	465a      	mov	r2, fp
 8011ea8:	4631      	mov	r1, r6
 8011eaa:	4650      	mov	r0, sl
 8011eac:	f009 fd2e 	bl	801b90c <memmove>
 8011eb0:	e7d9      	b.n	8011e66 <_ZN13Communication4SendE13MessageHeader+0x92>
		pending_messages.push_back(message);
 8011eb2:	f105 0750 	add.w	r7, r5, #80	; 0x50
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8011eb6:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8011eba:	68bb      	ldr	r3, [r7, #8]
 8011ebc:	4598      	cmp	r8, r3
 8011ebe:	d011      	beq.n	8011ee4 <_ZN13Communication4SendE13MessageHeader+0x110>
 8011ec0:	4621      	mov	r1, r4
 8011ec2:	f811 3b04 	ldrb.w	r3, [r1], #4
 8011ec6:	4640      	mov	r0, r8
 8011ec8:	f800 3b04 	strb.w	r3, [r0], #4
 8011ecc:	f7fe fecf 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011ed0:	7c23      	ldrb	r3, [r4, #16]
 8011ed2:	f888 3010 	strb.w	r3, [r8, #16]
 8011ed6:	7c63      	ldrb	r3, [r4, #17]
 8011ed8:	f888 3011 	strb.w	r3, [r8, #17]
	    ++this->_M_impl._M_finish;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	3314      	adds	r3, #20
 8011ee0:	607b      	str	r3, [r7, #4]
 8011ee2:	e7d7      	b.n	8011e94 <_ZN13Communication4SendE13MessageHeader+0xc0>
	  _M_realloc_insert(end(), __x);
 8011ee4:	4622      	mov	r2, r4
 8011ee6:	4641      	mov	r1, r8
 8011ee8:	4638      	mov	r0, r7
 8011eea:	f7ff fe75 	bl	8011bd8 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8011eee:	e7d1      	b.n	8011e94 <_ZN13Communication4SendE13MessageHeader+0xc0>

08011ef0 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8011ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ef4:	b094      	sub	sp, #80	; 0x50
			if (length < 3) return false;
 8011ef6:	2b02      	cmp	r3, #2
 8011ef8:	d804      	bhi.n	8011f04 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x14>
 8011efa:	2400      	movs	r4, #0
		}
 8011efc:	4620      	mov	r0, r4
 8011efe:	b014      	add	sp, #80	; 0x50
 8011f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f04:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011f06:	2100      	movs	r1, #0
 8011f08:	9108      	str	r1, [sp, #32]
 8011f0a:	9109      	str	r1, [sp, #36]	; 0x24
 8011f0c:	910a      	str	r1, [sp, #40]	; 0x28
			msg.interface = input[0];
 8011f0e:	7810      	ldrb	r0, [r2, #0]
 8011f10:	f88d 001c 	strb.w	r0, [sp, #28]
			msg.target_address = input[1];
 8011f14:	7850      	ldrb	r0, [r2, #1]
 8011f16:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
			msg.payload = std::vector<uint8_t> (&input[2], &input[length]);
 8011f1a:	1c96      	adds	r6, r2, #2
 8011f1c:	441a      	add	r2, r3
 8011f1e:	9111      	str	r1, [sp, #68]	; 0x44
 8011f20:	9112      	str	r1, [sp, #72]	; 0x48
 8011f22:	9113      	str	r1, [sp, #76]	; 0x4c
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8011f24:	1b94      	subs	r4, r2, r6
 8011f26:	d474      	bmi.n	8012012 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x122>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011f28:	2c00      	cmp	r4, #0
 8011f2a:	d077      	beq.n	801201c <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x12c>
	if (__n > this->_M_max_size())
 8011f2c:	2c00      	cmp	r4, #0
 8011f2e:	db73      	blt.n	8012018 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x128>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011f30:	4620      	mov	r0, r4
 8011f32:	f009 f82d 	bl	801af90 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8011f36:	9011      	str	r0, [sp, #68]	; 0x44
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011f38:	1907      	adds	r7, r0, r4
 8011f3a:	9713      	str	r7, [sp, #76]	; 0x4c
	  if (_Num)
 8011f3c:	2c00      	cmp	r4, #0
 8011f3e:	d16f      	bne.n	8012020 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x130>
	  this->_M_impl._M_finish =
 8011f40:	9712      	str	r7, [sp, #72]	; 0x48
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011f42:	2300      	movs	r3, #0
 8011f44:	9301      	str	r3, [sp, #4]
 8011f46:	9302      	str	r3, [sp, #8]
 8011f48:	9303      	str	r3, [sp, #12]
 8011f4a:	9304      	str	r3, [sp, #16]
 8011f4c:	9305      	str	r3, [sp, #20]
 8011f4e:	9306      	str	r3, [sp, #24]
	  _M_start = __x._M_start;
 8011f50:	9808      	ldr	r0, [sp, #32]
 8011f52:	9004      	str	r0, [sp, #16]
	  _M_finish = __x._M_finish;
 8011f54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f56:	9205      	str	r2, [sp, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
 8011f58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011f5a:	9106      	str	r1, [sp, #24]
	  _M_start = __x._M_start;
 8011f5c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8011f5e:	9408      	str	r4, [sp, #32]
	  _M_finish = __x._M_finish;
 8011f60:	9709      	str	r7, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
 8011f62:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8011f64:	940a      	str	r4, [sp, #40]	; 0x28
	  _M_start = __x._M_start;
 8011f66:	9011      	str	r0, [sp, #68]	; 0x44
	  _M_finish = __x._M_finish;
 8011f68:	9212      	str	r2, [sp, #72]	; 0x48
	  _M_end_of_storage = __x._M_end_of_storage;
 8011f6a:	9113      	str	r1, [sp, #76]	; 0x4c
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011f6c:	9304      	str	r3, [sp, #16]
 8011f6e:	9305      	str	r3, [sp, #20]
 8011f70:	9306      	str	r3, [sp, #24]
	  _M_start = __x._M_start;
 8011f72:	9001      	str	r0, [sp, #4]
	  _M_finish = __x._M_finish;
 8011f74:	9202      	str	r2, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 8011f76:	9103      	str	r1, [sp, #12]
	  _M_start = __x._M_start;
 8011f78:	9311      	str	r3, [sp, #68]	; 0x44
	  _M_finish = __x._M_finish;
 8011f7a:	9312      	str	r3, [sp, #72]	; 0x48
	  _M_end_of_storage = __x._M_end_of_storage;
 8011f7c:	9313      	str	r3, [sp, #76]	; 0x4c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011f7e:	1a09      	subs	r1, r1, r0
	if (__p)
 8011f80:	b108      	cbz	r0, 8011f86 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x96>
	::operator delete(__p
 8011f82:	f008 ffef 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8011f86:	9811      	ldr	r0, [sp, #68]	; 0x44
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011f88:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011f8a:	1a09      	subs	r1, r1, r0
	if (__p)
 8011f8c:	b108      	cbz	r0, 8011f92 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xa2>
 8011f8e:	f008 ffe9 	bl	801af64 <_ZdlPvj>
 8011f92:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8011f96:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011f9a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8011f9c:	9a08      	ldr	r2, [sp, #32]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	930d      	str	r3, [sp, #52]	; 0x34
 8011fa2:	930e      	str	r3, [sp, #56]	; 0x38
 8011fa4:	930f      	str	r3, [sp, #60]	; 0x3c
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011fa6:	1aa4      	subs	r4, r4, r2
 8011fa8:	d041      	beq.n	801202e <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x13e>
	if (__n > this->_M_max_size())
 8011faa:	429c      	cmp	r4, r3
 8011fac:	db3d      	blt.n	801202a <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x13a>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011fae:	4620      	mov	r0, r4
 8011fb0:	f008 ffee 	bl	801af90 <_Znwj>
 8011fb4:	4606      	mov	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8011fb6:	960d      	str	r6, [sp, #52]	; 0x34
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8011fb8:	960e      	str	r6, [sp, #56]	; 0x38
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011fba:	4434      	add	r4, r6
 8011fbc:	940f      	str	r4, [sp, #60]	; 0x3c
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8011fbe:	46b0      	mov	r8, r6
      return std::__niter_wrap(__result,
 8011fc0:	9808      	ldr	r0, [sp, #32]
 8011fc2:	f7ef fd78 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8011fc6:	4607      	mov	r7, r0
 8011fc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011fca:	f7ef fd74 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8011fce:	1bc4      	subs	r4, r0, r7
 8011fd0:	d12f      	bne.n	8012032 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x142>
	  return __result + _Num;
 8011fd2:	4444      	add	r4, r8
	this->_M_impl._M_finish =
 8011fd4:	940e      	str	r4, [sp, #56]	; 0x38
 8011fd6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8011fda:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8011fde:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8011fe2:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
			return self->Send(msg);
 8011fe6:	a90c      	add	r1, sp, #48	; 0x30
 8011fe8:	4628      	mov	r0, r5
 8011fea:	f7ff fef3 	bl	8011dd4 <_ZN13Communication4SendE13MessageHeader>
 8011fee:	1e04      	subs	r4, r0, #0
 8011ff0:	bf18      	it	ne
 8011ff2:	2401      	movne	r4, #1
	_M_deallocate(_M_impl._M_start,
 8011ff4:	980d      	ldr	r0, [sp, #52]	; 0x34
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8011ff6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011ff8:	1a09      	subs	r1, r1, r0
	if (__p)
 8011ffa:	b108      	cbz	r0, 8012000 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x110>
	::operator delete(__p
 8011ffc:	f008 ffb2 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8012000:	9808      	ldr	r0, [sp, #32]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012002:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012004:	1a09      	subs	r1, r1, r0
	if (__p)
 8012006:	2800      	cmp	r0, #0
 8012008:	f43f af78 	beq.w	8011efc <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xc>
 801200c:	f008 ffaa 	bl	801af64 <_ZdlPvj>
 8012010:	e774      	b.n	8011efc <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xc>
	  __throw_length_error(
 8012012:	480b      	ldr	r0, [pc, #44]	; (8012040 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x150>)
 8012014:	f009 f870 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	  std::__throw_bad_alloc();
 8012018:	f009 f868 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801201c:	2000      	movs	r0, #0
 801201e:	e78a      	b.n	8011f36 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x46>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8012020:	4622      	mov	r2, r4
 8012022:	4631      	mov	r1, r6
 8012024:	f009 fc72 	bl	801b90c <memmove>
 8012028:	e78a      	b.n	8011f40 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x50>
 801202a:	f009 f85f 	bl	801b0ec <_ZSt17__throw_bad_allocv>
 801202e:	2600      	movs	r6, #0
 8012030:	e7c1      	b.n	8011fb6 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xc6>
 8012032:	4622      	mov	r2, r4
 8012034:	4639      	mov	r1, r7
 8012036:	4630      	mov	r0, r6
 8012038:	f009 fc68 	bl	801b90c <memmove>
 801203c:	e7c9      	b.n	8011fd2 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xe2>
 801203e:	bf00      	nop
 8012040:	0801bdb0 	.word	0x0801bdb0

08012044 <_ZN13Communication11BuildVectorIhEESt6vectorIhSaIhEES1_IT_SaIS4_EE>:

template<typename T>
std::vector<uint8_t> Communication::BuildVector(std::vector<T> inputs) {
 8012044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012046:	b087      	sub	sp, #28
 8012048:	4604      	mov	r4, r0
 801204a:	460e      	mov	r6, r1
	: _M_start(), _M_finish(), _M_end_of_storage()
 801204c:	2300      	movs	r3, #0
 801204e:	6003      	str	r3, [r0, #0]
 8012050:	6043      	str	r3, [r0, #4]
 8012052:	6083      	str	r3, [r0, #8]
    std::vector<uint8_t> data;

    for (T input : inputs) {
 8012054:	6813      	ldr	r3, [r2, #0]
 8012056:	6857      	ldr	r7, [r2, #4]
 8012058:	e000      	b.n	801205c <_ZN13Communication11BuildVectorIhEESt6vectorIhSaIhEES1_IT_SaIS4_EE+0x18>
	++_M_current;
 801205a:	1c6b      	adds	r3, r5, #1
    { return __lhs.base() != __rhs.base(); }
 801205c:	461d      	mov	r5, r3
 801205e:	429f      	cmp	r7, r3
 8012060:	d016      	beq.n	8012090 <_ZN13Communication11BuildVectorIhEESt6vectorIhSaIhEES1_IT_SaIS4_EE+0x4c>
        std::vector<uint8_t> single = BuildSingle<T>(input);
 8012062:	781a      	ldrb	r2, [r3, #0]
 8012064:	4631      	mov	r1, r6
 8012066:	a803      	add	r0, sp, #12
 8012068:	f7fe fa69 	bl	801053e <_ZN13Communication11BuildSingleIhEESt6vectorIhSaIhEET_>
	  _M_range_insert(__pos, __first, __last,
 801206c:	f04f 0300 	mov.w	r3, #0
 8012070:	f88d 3000 	strb.w	r3, [sp]
 8012074:	9b04      	ldr	r3, [sp, #16]
 8012076:	9a03      	ldr	r2, [sp, #12]
 8012078:	6861      	ldr	r1, [r4, #4]
 801207a:	4620      	mov	r0, r4
 801207c:	f7ef fd98 	bl	8001bb0 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag>
	_M_deallocate(_M_impl._M_start,
 8012080:	9803      	ldr	r0, [sp, #12]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012082:	9905      	ldr	r1, [sp, #20]
 8012084:	1a09      	subs	r1, r1, r0
	if (__p)
 8012086:	2800      	cmp	r0, #0
 8012088:	d0e7      	beq.n	801205a <_ZN13Communication11BuildVectorIhEESt6vectorIhSaIhEES1_IT_SaIS4_EE+0x16>
	::operator delete(__p
 801208a:	f008 ff6b 	bl	801af64 <_ZdlPvj>
 801208e:	e7e4      	b.n	801205a <_ZN13Communication11BuildVectorIhEESt6vectorIhSaIhEES1_IT_SaIS4_EE+0x16>
        data.insert(data.end(), single.begin(), single.end());
    }

    return data;
}
 8012090:	4620      	mov	r0, r4
 8012092:	b007      	add	sp, #28
 8012094:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012096 <_ZN13Communication11ReadElementIhEESt6vectorIhSaIhEEP14MessageElementPb>:

template<typename T>
std::vector<uint8_t> Communication::ReadElement(MessageElement* element, bool* success) {
 8012096:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801209a:	b098      	sub	sp, #96	; 0x60
 801209c:	4604      	mov	r4, r0
 801209e:	460e      	mov	r6, r1
 80120a0:	4615      	mov	r5, r2
 80120a2:	461f      	mov	r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 80120a4:	2300      	movs	r3, #0
 80120a6:	6003      	str	r3, [r0, #0]
 80120a8:	6043      	str	r3, [r0, #4]
 80120aa:	6083      	str	r3, [r0, #8]
	std::vector<uint8_t> data;

	T register_read;
	uint16_t length;
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 80120ac:	2301      	movs	r3, #1
 80120ae:	9300      	str	r3, [sp, #0]
 80120b0:	ab0b      	add	r3, sp, #44	; 0x2c
 80120b2:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
 80120b6:	8829      	ldrh	r1, [r5, #0]
 80120b8:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80120ba:	f7fd fc5d 	bl	800f978 <_ZN9Registers12ReadRegisterIhEEbtPT_Ptb>
 80120be:	7038      	strb	r0, [r7, #0]

	if (not *success)
 80120c0:	b918      	cbnz	r0, 80120ca <_ZN13Communication11ReadElementIhEESt6vectorIhSaIhEEP14MessageElementPb+0x34>

	// transform it in vector of uint8_t
	data = BuildVector<T>(register_read_vector_cast);

	return data;
}
 80120c2:	4620      	mov	r0, r4
 80120c4:	b018      	add	sp, #96	; 0x60
 80120c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
struct MessageElement {
 80120ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80120ce:	900c      	str	r0, [sp, #48]	; 0x30
 80120d0:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
 80120d4:	79ab      	ldrb	r3, [r5, #6]
 80120d6:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
 80120da:	79eb      	ldrb	r3, [r5, #7]
 80120dc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 80120e0:	7a2b      	ldrb	r3, [r5, #8]
 80120e2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 80120e6:	f105 090c 	add.w	r9, r5, #12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80120ea:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80120ee:	68ea      	ldr	r2, [r5, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80120f0:	2300      	movs	r3, #0
 80120f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80120f4:	9310      	str	r3, [sp, #64]	; 0x40
 80120f6:	9311      	str	r3, [sp, #68]	; 0x44
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80120f8:	1abf      	subs	r7, r7, r2
 80120fa:	d069      	beq.n	80121d0 <_ZN13Communication11ReadElementIhEESt6vectorIhSaIhEEP14MessageElementPb+0x13a>
	if (__n > this->_M_max_size())
 80120fc:	429f      	cmp	r7, r3
 80120fe:	db65      	blt.n	80121cc <_ZN13Communication11ReadElementIhEESt6vectorIhSaIhEEP14MessageElementPb+0x136>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012100:	4638      	mov	r0, r7
 8012102:	f008 ff45 	bl	801af90 <_Znwj>
 8012106:	4680      	mov	r8, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8012108:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801210c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012110:	4447      	add	r7, r8
 8012112:	9711      	str	r7, [sp, #68]	; 0x44
      : _M_current(__i) { }
 8012114:	f8d9 a004 	ldr.w	sl, [r9, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8012118:	46c1      	mov	r9, r8
      return std::__niter_wrap(__result,
 801211a:	68e8      	ldr	r0, [r5, #12]
 801211c:	f7ef fccb 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8012120:	4607      	mov	r7, r0
 8012122:	4650      	mov	r0, sl
 8012124:	f7ef fcc7 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8012128:	1bc5      	subs	r5, r0, r7
 801212a:	d154      	bne.n	80121d6 <_ZN13Communication11ReadElementIhEESt6vectorIhSaIhEEP14MessageElementPb+0x140>
	  return __result + _Num;
 801212c:	444d      	add	r5, r9
	this->_M_impl._M_finish =
 801212e:	9510      	str	r5, [sp, #64]	; 0x40
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8012130:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8012134:	aa0c      	add	r2, sp, #48	; 0x30
 8012136:	4631      	mov	r1, r6
 8012138:	a808      	add	r0, sp, #32
 801213a:	f7fe fe2c 	bl	8010d96 <_ZN13Communication12BuildTVectorIhEESt6vectorIT_SaIS2_EE14MessageElementPS2_>
	_M_deallocate(_M_impl._M_start,
 801213e:	980f      	ldr	r0, [sp, #60]	; 0x3c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012140:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012142:	1a09      	subs	r1, r1, r0
	if (__p)
 8012144:	b108      	cbz	r0, 801214a <_ZN13Communication11ReadElementIhEESt6vectorIhSaIhEEP14MessageElementPb+0xb4>
	::operator delete(__p
 8012146:	f008 ff0d 	bl	801af64 <_ZdlPvj>
	data = BuildVector<T>(register_read_vector_cast);
 801214a:	a908      	add	r1, sp, #32
 801214c:	a815      	add	r0, sp, #84	; 0x54
 801214e:	f7fe fd8e 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012152:	aa15      	add	r2, sp, #84	; 0x54
 8012154:	4631      	mov	r1, r6
 8012156:	a812      	add	r0, sp, #72	; 0x48
 8012158:	f7ff ff74 	bl	8012044 <_ZN13Communication11BuildVectorIhEESt6vectorIhSaIhEES1_IT_SaIS4_EE>
	: _M_start(), _M_finish(), _M_end_of_storage()
 801215c:	2300      	movs	r3, #0
 801215e:	9302      	str	r3, [sp, #8]
 8012160:	9303      	str	r3, [sp, #12]
 8012162:	9304      	str	r3, [sp, #16]
 8012164:	9305      	str	r3, [sp, #20]
 8012166:	9306      	str	r3, [sp, #24]
 8012168:	9307      	str	r3, [sp, #28]
	  _M_start = __x._M_start;
 801216a:	6820      	ldr	r0, [r4, #0]
 801216c:	9005      	str	r0, [sp, #20]
	  _M_finish = __x._M_finish;
 801216e:	6862      	ldr	r2, [r4, #4]
 8012170:	9206      	str	r2, [sp, #24]
	  _M_end_of_storage = __x._M_end_of_storage;
 8012172:	68a1      	ldr	r1, [r4, #8]
 8012174:	9107      	str	r1, [sp, #28]
	  _M_start = __x._M_start;
 8012176:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8012178:	6025      	str	r5, [r4, #0]
	  _M_finish = __x._M_finish;
 801217a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801217c:	6065      	str	r5, [r4, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 801217e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012180:	60a5      	str	r5, [r4, #8]
	  _M_start = __x._M_start;
 8012182:	9012      	str	r0, [sp, #72]	; 0x48
	  _M_finish = __x._M_finish;
 8012184:	9213      	str	r2, [sp, #76]	; 0x4c
	  _M_end_of_storage = __x._M_end_of_storage;
 8012186:	9114      	str	r1, [sp, #80]	; 0x50
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012188:	9305      	str	r3, [sp, #20]
 801218a:	9306      	str	r3, [sp, #24]
 801218c:	9307      	str	r3, [sp, #28]
	  _M_start = __x._M_start;
 801218e:	9002      	str	r0, [sp, #8]
	  _M_finish = __x._M_finish;
 8012190:	9203      	str	r2, [sp, #12]
	  _M_end_of_storage = __x._M_end_of_storage;
 8012192:	9104      	str	r1, [sp, #16]
	  _M_start = __x._M_start;
 8012194:	9312      	str	r3, [sp, #72]	; 0x48
	  _M_finish = __x._M_finish;
 8012196:	9313      	str	r3, [sp, #76]	; 0x4c
	  _M_end_of_storage = __x._M_end_of_storage;
 8012198:	9314      	str	r3, [sp, #80]	; 0x50
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801219a:	1a09      	subs	r1, r1, r0
	if (__p)
 801219c:	b108      	cbz	r0, 80121a2 <_ZN13Communication11ReadElementIhEESt6vectorIhSaIhEEP14MessageElementPb+0x10c>
 801219e:	f008 fee1 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80121a2:	9812      	ldr	r0, [sp, #72]	; 0x48
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80121a4:	9914      	ldr	r1, [sp, #80]	; 0x50
 80121a6:	1a09      	subs	r1, r1, r0
	if (__p)
 80121a8:	b108      	cbz	r0, 80121ae <_ZN13Communication11ReadElementIhEESt6vectorIhSaIhEEP14MessageElementPb+0x118>
 80121aa:	f008 fedb 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80121ae:	9815      	ldr	r0, [sp, #84]	; 0x54
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80121b0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80121b2:	1a09      	subs	r1, r1, r0
	if (__p)
 80121b4:	b108      	cbz	r0, 80121ba <_ZN13Communication11ReadElementIhEESt6vectorIhSaIhEEP14MessageElementPb+0x124>
 80121b6:	f008 fed5 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80121ba:	9808      	ldr	r0, [sp, #32]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80121bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80121be:	1a09      	subs	r1, r1, r0
	if (__p)
 80121c0:	2800      	cmp	r0, #0
 80121c2:	f43f af7e 	beq.w	80120c2 <_ZN13Communication11ReadElementIhEESt6vectorIhSaIhEEP14MessageElementPb+0x2c>
 80121c6:	f008 fecd 	bl	801af64 <_ZdlPvj>
      }
 80121ca:	e77a      	b.n	80120c2 <_ZN13Communication11ReadElementIhEESt6vectorIhSaIhEEP14MessageElementPb+0x2c>
	  std::__throw_bad_alloc();
 80121cc:	f008 ff8e 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80121d0:	f04f 0800 	mov.w	r8, #0
 80121d4:	e798      	b.n	8012108 <_ZN13Communication11ReadElementIhEESt6vectorIhSaIhEEP14MessageElementPb+0x72>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80121d6:	462a      	mov	r2, r5
 80121d8:	4639      	mov	r1, r7
 80121da:	4640      	mov	r0, r8
 80121dc:	f009 fb96 	bl	801b90c <memmove>
 80121e0:	e7a4      	b.n	801212c <_ZN13Communication11ReadElementIhEESt6vectorIhSaIhEEP14MessageElementPb+0x96>

080121e2 <_ZN13Communication11BuildVectorImEESt6vectorIhSaIhEES1_IT_SaIS4_EE>:
std::vector<uint8_t> Communication::BuildVector(std::vector<T> inputs) {
 80121e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121e4:	b087      	sub	sp, #28
 80121e6:	4604      	mov	r4, r0
 80121e8:	460e      	mov	r6, r1
	: _M_start(), _M_finish(), _M_end_of_storage()
 80121ea:	2300      	movs	r3, #0
 80121ec:	6003      	str	r3, [r0, #0]
 80121ee:	6043      	str	r3, [r0, #4]
 80121f0:	6083      	str	r3, [r0, #8]
    for (T input : inputs) {
 80121f2:	6813      	ldr	r3, [r2, #0]
 80121f4:	6857      	ldr	r7, [r2, #4]
 80121f6:	e000      	b.n	80121fa <_ZN13Communication11BuildVectorImEESt6vectorIhSaIhEES1_IT_SaIS4_EE+0x18>
	++_M_current;
 80121f8:	1d2b      	adds	r3, r5, #4
    { return __lhs.base() != __rhs.base(); }
 80121fa:	461d      	mov	r5, r3
 80121fc:	429f      	cmp	r7, r3
 80121fe:	d016      	beq.n	801222e <_ZN13Communication11BuildVectorImEESt6vectorIhSaIhEES1_IT_SaIS4_EE+0x4c>
        std::vector<uint8_t> single = BuildSingle<T>(input);
 8012200:	681a      	ldr	r2, [r3, #0]
 8012202:	4631      	mov	r1, r6
 8012204:	a803      	add	r0, sp, #12
 8012206:	f7fe fb4d 	bl	80108a4 <_ZN13Communication11BuildSingleImEESt6vectorIhSaIhEET_>
	  _M_range_insert(__pos, __first, __last,
 801220a:	f04f 0300 	mov.w	r3, #0
 801220e:	f88d 3000 	strb.w	r3, [sp]
 8012212:	9b04      	ldr	r3, [sp, #16]
 8012214:	9a03      	ldr	r2, [sp, #12]
 8012216:	6861      	ldr	r1, [r4, #4]
 8012218:	4620      	mov	r0, r4
 801221a:	f7ef fcc9 	bl	8001bb0 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag>
	_M_deallocate(_M_impl._M_start,
 801221e:	9803      	ldr	r0, [sp, #12]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012220:	9905      	ldr	r1, [sp, #20]
 8012222:	1a09      	subs	r1, r1, r0
	if (__p)
 8012224:	2800      	cmp	r0, #0
 8012226:	d0e7      	beq.n	80121f8 <_ZN13Communication11BuildVectorImEESt6vectorIhSaIhEES1_IT_SaIS4_EE+0x16>
	::operator delete(__p
 8012228:	f008 fe9c 	bl	801af64 <_ZdlPvj>
 801222c:	e7e4      	b.n	80121f8 <_ZN13Communication11BuildVectorImEESt6vectorIhSaIhEES1_IT_SaIS4_EE+0x16>
}
 801222e:	4620      	mov	r0, r4
 8012230:	b007      	add	sp, #28
 8012232:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012234 <_ZN13Communication11BuildVectorIfEESt6vectorIhSaIhEES1_IT_SaIS4_EE>:
std::vector<uint8_t> Communication::BuildVector(std::vector<T> inputs) {
 8012234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012236:	b087      	sub	sp, #28
 8012238:	4604      	mov	r4, r0
 801223a:	460e      	mov	r6, r1
	: _M_start(), _M_finish(), _M_end_of_storage()
 801223c:	2300      	movs	r3, #0
 801223e:	6003      	str	r3, [r0, #0]
 8012240:	6043      	str	r3, [r0, #4]
 8012242:	6083      	str	r3, [r0, #8]
    for (T input : inputs) {
 8012244:	6813      	ldr	r3, [r2, #0]
      : _M_current(__i) { }
 8012246:	6857      	ldr	r7, [r2, #4]
 8012248:	e000      	b.n	801224c <_ZN13Communication11BuildVectorIfEESt6vectorIhSaIhEES1_IT_SaIS4_EE+0x18>
	++_M_current;
 801224a:	1d2b      	adds	r3, r5, #4
    { return __lhs.base() != __rhs.base(); }
 801224c:	461d      	mov	r5, r3
 801224e:	429f      	cmp	r7, r3
 8012250:	d017      	beq.n	8012282 <_ZN13Communication11BuildVectorIfEESt6vectorIhSaIhEES1_IT_SaIS4_EE+0x4e>
        std::vector<uint8_t> single = BuildSingle<T>(input);
 8012252:	ed93 0a00 	vldr	s0, [r3]
 8012256:	4631      	mov	r1, r6
 8012258:	a803      	add	r0, sp, #12
 801225a:	f7fe fcd9 	bl	8010c10 <_ZN13Communication11BuildSingleIfEESt6vectorIhSaIhEET_>
	  _M_range_insert(__pos, __first, __last,
 801225e:	f04f 0300 	mov.w	r3, #0
 8012262:	f88d 3000 	strb.w	r3, [sp]
 8012266:	9b04      	ldr	r3, [sp, #16]
 8012268:	9a03      	ldr	r2, [sp, #12]
 801226a:	6861      	ldr	r1, [r4, #4]
 801226c:	4620      	mov	r0, r4
 801226e:	f7ef fc9f 	bl	8001bb0 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag>
	_M_deallocate(_M_impl._M_start,
 8012272:	9803      	ldr	r0, [sp, #12]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012274:	9905      	ldr	r1, [sp, #20]
 8012276:	1a09      	subs	r1, r1, r0
	if (__p)
 8012278:	2800      	cmp	r0, #0
 801227a:	d0e6      	beq.n	801224a <_ZN13Communication11BuildVectorIfEESt6vectorIhSaIhEES1_IT_SaIS4_EE+0x16>
 801227c:	f008 fe72 	bl	801af64 <_ZdlPvj>
 8012280:	e7e3      	b.n	801224a <_ZN13Communication11BuildVectorIfEESt6vectorIhSaIhEES1_IT_SaIS4_EE+0x16>
}
 8012282:	4620      	mov	r0, r4
 8012284:	b007      	add	sp, #28
 8012286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012288 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>:
bool Communication::BuildPayload(MessageHeader* message, MessageElement element) {
 8012288:	b570      	push	{r4, r5, r6, lr}
 801228a:	b088      	sub	sp, #32
 801228c:	4606      	mov	r6, r0
 801228e:	460d      	mov	r5, r1
 8012290:	4614      	mov	r4, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012292:	2300      	movs	r3, #0
 8012294:	9304      	str	r3, [sp, #16]
 8012296:	9305      	str	r3, [sp, #20]
 8012298:	9306      	str	r3, [sp, #24]
	if (element.ack) header|= ACK_MASK;
 801229a:	7993      	ldrb	r3, [r2, #6]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d146      	bne.n	801232e <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xa6>
	uint8_t header = 0;
 80122a0:	2200      	movs	r2, #0
	if (element.command) header|= COMMAND_MASK;
 80122a2:	79e3      	ldrb	r3, [r4, #7]
 80122a4:	b10b      	cbz	r3, 80122aa <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x22>
 80122a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	if (element.access) header|= ACCESS_MASK;
 80122aa:	7a23      	ldrb	r3, [r4, #8]
 80122ac:	b10b      	cbz	r3, 80122b2 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x2a>
 80122ae:	f042 0220 	orr.w	r2, r2, #32
	coded_element.push_back(header | ((element.element_register.address >> 8) & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)));
 80122b2:	8823      	ldrh	r3, [r4, #0]
 80122b4:	f3c3 2304 	ubfx	r3, r3, #8, #5
 80122b8:	4313      	orrs	r3, r2
 80122ba:	f88d 301d 	strb.w	r3, [sp, #29]
      { emplace_back(std::move(__x)); }
 80122be:	f10d 011d 	add.w	r1, sp, #29
 80122c2:	a804      	add	r0, sp, #16
 80122c4:	f7fd f902 	bl	800f4cc <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	coded_element.push_back(element.element_register.address & 0xFF);
 80122c8:	8823      	ldrh	r3, [r4, #0]
 80122ca:	f88d 301e 	strb.w	r3, [sp, #30]
 80122ce:	f10d 011e 	add.w	r1, sp, #30
 80122d2:	a804      	add	r0, sp, #16
 80122d4:	f7fd f8fa 	bl	800f4cc <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	if (element.element_register.isArray && element.element_register.length == 0) // push vector size
 80122d8:	78e3      	ldrb	r3, [r4, #3]
 80122da:	b10b      	cbz	r3, 80122e0 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x58>
 80122dc:	88a3      	ldrh	r3, [r4, #4]
 80122de:	b343      	cbz	r3, 8012332 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xaa>
	  _M_range_insert(__pos, __first, __last,
 80122e0:	f04f 0300 	mov.w	r3, #0
 80122e4:	f88d 3000 	strb.w	r3, [sp]
 80122e8:	6923      	ldr	r3, [r4, #16]
 80122ea:	68e2      	ldr	r2, [r4, #12]
 80122ec:	9905      	ldr	r1, [sp, #20]
 80122ee:	a804      	add	r0, sp, #16
 80122f0:	f7ef fc5e 	bl	8001bb0 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag>
	uint16_t max_length = GetProtocolPayloadMaxLength(message->interface, &success);
 80122f4:	f10d 020f 	add.w	r2, sp, #15
 80122f8:	7829      	ldrb	r1, [r5, #0]
 80122fa:	4630      	mov	r0, r6
 80122fc:	f7fc fc6c 	bl	800ebd8 <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb>
	if (not success) return false;
 8012300:	f89d 400f 	ldrb.w	r4, [sp, #15]
 8012304:	b154      	cbz	r4, 801231c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x94>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012306:	68a9      	ldr	r1, [r5, #8]
 8012308:	686e      	ldr	r6, [r5, #4]
 801230a:	eba1 0c06 	sub.w	ip, r1, r6
 801230e:	9b05      	ldr	r3, [sp, #20]
 8012310:	9a04      	ldr	r2, [sp, #16]
 8012312:	1a9e      	subs	r6, r3, r2
	if (message->payload.size() + coded_element.size() > max_length)//message->max_payload_length)
 8012314:	4466      	add	r6, ip
 8012316:	4286      	cmp	r6, r0
 8012318:	d916      	bls.n	8012348 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xc0>
		return false;
 801231a:	2400      	movs	r4, #0
	_M_deallocate(_M_impl._M_start,
 801231c:	9804      	ldr	r0, [sp, #16]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801231e:	9906      	ldr	r1, [sp, #24]
 8012320:	1a09      	subs	r1, r1, r0
	if (__p)
 8012322:	b108      	cbz	r0, 8012328 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xa0>
 8012324:	f008 fe1e 	bl	801af64 <_ZdlPvj>
}
 8012328:	4620      	mov	r0, r4
 801232a:	b008      	add	sp, #32
 801232c:	bd70      	pop	{r4, r5, r6, pc}
	if (element.ack) header|= ACK_MASK;
 801232e:	2280      	movs	r2, #128	; 0x80
 8012330:	e7b7      	b.n	80122a2 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x1a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012332:	6923      	ldr	r3, [r4, #16]
 8012334:	68e2      	ldr	r2, [r4, #12]
 8012336:	1a9b      	subs	r3, r3, r2
		coded_element.push_back(element.data.size());
 8012338:	f88d 301f 	strb.w	r3, [sp, #31]
      { emplace_back(std::move(__x)); }
 801233c:	f10d 011f 	add.w	r1, sp, #31
 8012340:	a804      	add	r0, sp, #16
 8012342:	f7fd f8c3 	bl	800f4cc <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
 8012346:	e7cb      	b.n	80122e0 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x58>
	  _M_range_insert(__pos, __first, __last,
 8012348:	f04f 0000 	mov.w	r0, #0
 801234c:	f88d 0000 	strb.w	r0, [sp]
 8012350:	1d28      	adds	r0, r5, #4
 8012352:	f7ef fc2d 	bl	8001bb0 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag>
	return true;
 8012356:	e7e1      	b.n	801231c <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x94>

08012358 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8012358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801235c:	b09a      	sub	sp, #104	; 0x68
 801235e:	4605      	mov	r5, r0
 8012360:	4614      	mov	r4, r2
			self->leds->IDFoundLEDS();
 8012362:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8012364:	f004 f9e3 	bl	801672e <_ZN4LEDS11IDFoundLEDSEv>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012368:	2100      	movs	r1, #0
 801236a:	9105      	str	r1, [sp, #20]
 801236c:	9106      	str	r1, [sp, #24]
 801236e:	9107      	str	r1, [sp, #28]
			message.interface = UART_BACK;
 8012370:	2303      	movs	r3, #3
 8012372:	f88d 3010 	strb.w	r3, [sp, #16]
 8012376:	910c      	str	r1, [sp, #48]	; 0x30
 8012378:	910d      	str	r1, [sp, #52]	; 0x34
 801237a:	910e      	str	r1, [sp, #56]	; 0x38
			element.ack = false;
 801237c:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
			element.access = WRITE;
 8012380:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
			element.command = true;
 8012384:	2301      	movs	r3, #1
 8012386:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	  _M_realloc_insert(end(), __x);
 801238a:	4622      	mov	r2, r4
 801238c:	a80c      	add	r0, sp, #48	; 0x30
 801238e:	f7ee ffcb 	bl	8001328 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
			element.element_register = self->registers->FindRegister(REG_COM_ID_PROPAGATION, &success);
 8012392:	f10d 030f 	add.w	r3, sp, #15
 8012396:	2201      	movs	r2, #1
 8012398:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801239a:	4668      	mov	r0, sp
 801239c:	f007 fc8b 	bl	8019cb6 <_ZN9Registers12FindRegisterEtPb>
 80123a0:	ab09      	add	r3, sp, #36	; 0x24
 80123a2:	9800      	ldr	r0, [sp, #0]
 80123a4:	9009      	str	r0, [sp, #36]	; 0x24
 80123a6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80123aa:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
struct MessageElement {
 80123ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80123b2:	9014      	str	r0, [sp, #80]	; 0x50
 80123b4:	f8ad 1054 	strh.w	r1, [sp, #84]	; 0x54
 80123b8:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 80123bc:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
 80123c0:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80123c4:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
 80123c8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80123cc:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80123d0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80123d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	: _M_start(), _M_finish(), _M_end_of_storage()
 80123d4:	2300      	movs	r3, #0
 80123d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80123d8:	9318      	str	r3, [sp, #96]	; 0x60
 80123da:	9319      	str	r3, [sp, #100]	; 0x64
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80123dc:	1aa4      	subs	r4, r4, r2
 80123de:	d066      	beq.n	80124ae <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x156>
	if (__n > this->_M_max_size())
 80123e0:	429c      	cmp	r4, r3
 80123e2:	db62      	blt.n	80124aa <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x152>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80123e4:	4620      	mov	r0, r4
 80123e6:	f008 fdd3 	bl	801af90 <_Znwj>
 80123ea:	4606      	mov	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 80123ec:	9617      	str	r6, [sp, #92]	; 0x5c
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80123ee:	9618      	str	r6, [sp, #96]	; 0x60
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80123f0:	4434      	add	r4, r6
 80123f2:	9419      	str	r4, [sp, #100]	; 0x64
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80123f4:	46b0      	mov	r8, r6
      return std::__niter_wrap(__result,
 80123f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80123f8:	f7ef fb5d 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80123fc:	4607      	mov	r7, r0
 80123fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8012400:	f7ef fb59 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8012404:	1bc4      	subs	r4, r0, r7
 8012406:	d154      	bne.n	80124b2 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x15a>
	  return __result + _Num;
 8012408:	4444      	add	r4, r8
	this->_M_impl._M_finish =
 801240a:	9418      	str	r4, [sp, #96]	; 0x60
			self->BuildPayload(&message, element);
 801240c:	aa14      	add	r2, sp, #80	; 0x50
 801240e:	a904      	add	r1, sp, #16
 8012410:	4628      	mov	r0, r5
 8012412:	f7ff ff39 	bl	8012288 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
	_M_deallocate(_M_impl._M_start,
 8012416:	9817      	ldr	r0, [sp, #92]	; 0x5c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012418:	9919      	ldr	r1, [sp, #100]	; 0x64
 801241a:	1a09      	subs	r1, r1, r0
	if (__p)
 801241c:	b108      	cbz	r0, 8012422 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0xca>
	::operator delete(__p
 801241e:	f008 fda1 	bl	801af64 <_ZdlPvj>
 8012422:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8012426:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801242a:	9c06      	ldr	r4, [sp, #24]
 801242c:	9a05      	ldr	r2, [sp, #20]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801242e:	2300      	movs	r3, #0
 8012430:	9310      	str	r3, [sp, #64]	; 0x40
 8012432:	9311      	str	r3, [sp, #68]	; 0x44
 8012434:	9312      	str	r3, [sp, #72]	; 0x48
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012436:	1aa4      	subs	r4, r4, r2
 8012438:	d043      	beq.n	80124c2 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x16a>
	if (__n > this->_M_max_size())
 801243a:	429c      	cmp	r4, r3
 801243c:	db3f      	blt.n	80124be <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x166>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801243e:	4620      	mov	r0, r4
 8012440:	f008 fda6 	bl	801af90 <_Znwj>
 8012444:	4606      	mov	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8012446:	9610      	str	r6, [sp, #64]	; 0x40
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8012448:	9611      	str	r6, [sp, #68]	; 0x44
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801244a:	4434      	add	r4, r6
 801244c:	9412      	str	r4, [sp, #72]	; 0x48
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 801244e:	46b0      	mov	r8, r6
      return std::__niter_wrap(__result,
 8012450:	9805      	ldr	r0, [sp, #20]
 8012452:	f7ef fb30 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8012456:	4607      	mov	r7, r0
 8012458:	9806      	ldr	r0, [sp, #24]
 801245a:	f7ef fb2c 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 801245e:	1bc4      	subs	r4, r0, r7
 8012460:	d131      	bne.n	80124c6 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x16e>
	  return __result + _Num;
 8012462:	4444      	add	r4, r8
	this->_M_impl._M_finish =
 8012464:	9411      	str	r4, [sp, #68]	; 0x44
 8012466:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801246a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 801246e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8012472:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
			self->Send(message);
 8012476:	a90f      	add	r1, sp, #60	; 0x3c
 8012478:	4628      	mov	r0, r5
 801247a:	f7ff fcab 	bl	8011dd4 <_ZN13Communication4SendE13MessageHeader>
	_M_deallocate(_M_impl._M_start,
 801247e:	9810      	ldr	r0, [sp, #64]	; 0x40
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012480:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012482:	1a09      	subs	r1, r1, r0
	if (__p)
 8012484:	b108      	cbz	r0, 801248a <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x132>
	::operator delete(__p
 8012486:	f008 fd6d 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 801248a:	980c      	ldr	r0, [sp, #48]	; 0x30
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801248c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801248e:	1a09      	subs	r1, r1, r0
	if (__p)
 8012490:	b108      	cbz	r0, 8012496 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x13e>
 8012492:	f008 fd67 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8012496:	9805      	ldr	r0, [sp, #20]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012498:	9907      	ldr	r1, [sp, #28]
 801249a:	1a09      	subs	r1, r1, r0
	if (__p)
 801249c:	b108      	cbz	r0, 80124a2 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x14a>
 801249e:	f008 fd61 	bl	801af64 <_ZdlPvj>
		}
 80124a2:	2001      	movs	r0, #1
 80124a4:	b01a      	add	sp, #104	; 0x68
 80124a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  std::__throw_bad_alloc();
 80124aa:	f008 fe1f 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80124ae:	2600      	movs	r6, #0
 80124b0:	e79c      	b.n	80123ec <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x94>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80124b2:	4622      	mov	r2, r4
 80124b4:	4639      	mov	r1, r7
 80124b6:	4630      	mov	r0, r6
 80124b8:	f009 fa28 	bl	801b90c <memmove>
 80124bc:	e7a4      	b.n	8012408 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0xb0>
 80124be:	f008 fe15 	bl	801b0ec <_ZSt17__throw_bad_allocv>
 80124c2:	2600      	movs	r6, #0
 80124c4:	e7bf      	b.n	8012446 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0xee>
 80124c6:	4622      	mov	r2, r4
 80124c8:	4639      	mov	r1, r7
 80124ca:	4630      	mov	r0, r6
 80124cc:	f009 fa1e 	bl	801b90c <memmove>
 80124d0:	e7c7      	b.n	8012462 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x10a>

080124d2 <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessRead(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 80124d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124d6:	b0a2      	sub	sp, #136	; 0x88
 80124d8:	4680      	mov	r8, r0
 80124da:	4616      	mov	r6, r2
 80124dc:	461c      	mov	r4, r3
	response_content.data = ReadElement<T>(&element, &success);
 80124de:	f103 050c 	add.w	r5, r3, #12
 80124e2:	f10d 031f 	add.w	r3, sp, #31
 80124e6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80124e8:	4601      	mov	r1, r0
 80124ea:	a808      	add	r0, sp, #32
 80124ec:	f7ff fdd3 	bl	8012096 <_ZN13Communication11ReadElementIhEESt6vectorIhSaIhEEP14MessageElementPb>
	: _M_start(), _M_finish(), _M_end_of_storage()
 80124f0:	2300      	movs	r3, #0
 80124f2:	9301      	str	r3, [sp, #4]
 80124f4:	9302      	str	r3, [sp, #8]
 80124f6:	9303      	str	r3, [sp, #12]
 80124f8:	9304      	str	r3, [sp, #16]
 80124fa:	9305      	str	r3, [sp, #20]
 80124fc:	9306      	str	r3, [sp, #24]
	  _M_start = __x._M_start;
 80124fe:	68e0      	ldr	r0, [r4, #12]
 8012500:	9004      	str	r0, [sp, #16]
	  _M_finish = __x._M_finish;
 8012502:	686f      	ldr	r7, [r5, #4]
 8012504:	9705      	str	r7, [sp, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
 8012506:	68a9      	ldr	r1, [r5, #8]
 8012508:	9106      	str	r1, [sp, #24]
	  _M_start = __x._M_start;
 801250a:	9a08      	ldr	r2, [sp, #32]
 801250c:	60e2      	str	r2, [r4, #12]
	  _M_finish = __x._M_finish;
 801250e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012510:	606a      	str	r2, [r5, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8012512:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012514:	60aa      	str	r2, [r5, #8]
	  _M_start = __x._M_start;
 8012516:	9008      	str	r0, [sp, #32]
	  _M_finish = __x._M_finish;
 8012518:	9709      	str	r7, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
 801251a:	910a      	str	r1, [sp, #40]	; 0x28
	: _M_start(), _M_finish(), _M_end_of_storage()
 801251c:	9304      	str	r3, [sp, #16]
 801251e:	9305      	str	r3, [sp, #20]
 8012520:	9306      	str	r3, [sp, #24]
	  _M_start = __x._M_start;
 8012522:	9001      	str	r0, [sp, #4]
	  _M_finish = __x._M_finish;
 8012524:	9702      	str	r7, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 8012526:	9103      	str	r1, [sp, #12]
	  _M_start = __x._M_start;
 8012528:	9308      	str	r3, [sp, #32]
	  _M_finish = __x._M_finish;
 801252a:	9309      	str	r3, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
 801252c:	930a      	str	r3, [sp, #40]	; 0x28
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801252e:	1a09      	subs	r1, r1, r0
	if (__p)
 8012530:	b108      	cbz	r0, 8012536 <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
	::operator delete(__p
 8012532:	f008 fd17 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8012536:	9808      	ldr	r0, [sp, #32]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012538:	990a      	ldr	r1, [sp, #40]	; 0x28
 801253a:	1a09      	subs	r1, r1, r0
	if (__p)
 801253c:	b108      	cbz	r0, 8012542 <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x70>
 801253e:	f008 fd11 	bl	801af64 <_ZdlPvj>
	if (not success) {
 8012542:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d03f      	beq.n	80125ca <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t+0xf8>
 801254a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801254e:	9011      	str	r0, [sp, #68]	; 0x44
 8012550:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 8012554:	79a3      	ldrb	r3, [r4, #6]
 8012556:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
 801255a:	79e3      	ldrb	r3, [r4, #7]
 801255c:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 8012560:	7a23      	ldrb	r3, [r4, #8]
 8012562:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8012566:	f104 090c 	add.w	r9, r4, #12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801256a:	f8d9 5004 	ldr.w	r5, [r9, #4]
 801256e:	68e2      	ldr	r2, [r4, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012570:	2300      	movs	r3, #0
 8012572:	9314      	str	r3, [sp, #80]	; 0x50
 8012574:	9315      	str	r3, [sp, #84]	; 0x54
 8012576:	9316      	str	r3, [sp, #88]	; 0x58
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012578:	1aad      	subs	r5, r5, r2
 801257a:	d070      	beq.n	801265e <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x18c>
	if (__n > this->_M_max_size())
 801257c:	429d      	cmp	r5, r3
 801257e:	db6c      	blt.n	801265a <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x188>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012580:	4628      	mov	r0, r5
 8012582:	f008 fd05 	bl	801af90 <_Znwj>
 8012586:	4607      	mov	r7, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8012588:	9714      	str	r7, [sp, #80]	; 0x50
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801258a:	9715      	str	r7, [sp, #84]	; 0x54
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801258c:	443d      	add	r5, r7
 801258e:	9516      	str	r5, [sp, #88]	; 0x58
      : _M_current(__i) { }
 8012590:	f8d9 5004 	ldr.w	r5, [r9, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8012594:	46ba      	mov	sl, r7
      return std::__niter_wrap(__result,
 8012596:	68e0      	ldr	r0, [r4, #12]
 8012598:	f7ef fa8d 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 801259c:	4681      	mov	r9, r0
 801259e:	4628      	mov	r0, r5
 80125a0:	f7ef fa89 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 80125a4:	ebb0 0509 	subs.w	r5, r0, r9
 80125a8:	d15b      	bne.n	8012662 <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x190>
	  return __result + _Num;
 80125aa:	4455      	add	r5, sl
	this->_M_impl._M_finish =
 80125ac:	9515      	str	r5, [sp, #84]	; 0x54
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 80125ae:	aa11      	add	r2, sp, #68	; 0x44
 80125b0:	4631      	mov	r1, r6
 80125b2:	4640      	mov	r0, r8
 80125b4:	f7ff fe68 	bl	8012288 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80125b8:	4605      	mov	r5, r0
 80125ba:	2800      	cmp	r0, #0
 80125bc:	d157      	bne.n	801266e <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x19c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80125be:	68b2      	ldr	r2, [r6, #8]
 80125c0:	6873      	ldr	r3, [r6, #4]
 80125c2:	429a      	cmp	r2, r3
 80125c4:	d054      	beq.n	8012670 <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x19e>
 80125c6:	2501      	movs	r5, #1
 80125c8:	e052      	b.n	8012670 <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x19e>
		response_content.command = true; // this is an error flag for a read ack
 80125ca:	2301      	movs	r3, #1
 80125cc:	71e3      	strb	r3, [r4, #7]
		response_content.data = std::vector<uint8_t>{ERROR};
 80125ce:	22ff      	movs	r2, #255	; 0xff
 80125d0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 80125d4:	aa10      	add	r2, sp, #64	; 0x40
 80125d6:	920e      	str	r2, [sp, #56]	; 0x38
 80125d8:	930f      	str	r3, [sp, #60]	; 0x3c
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80125da:	aa04      	add	r2, sp, #16
 80125dc:	a90e      	add	r1, sp, #56	; 0x38
 80125de:	c903      	ldmia	r1, {r0, r1}
 80125e0:	e882 0003 	stmia.w	r2, {r0, r1}
	: _M_start(), _M_finish(), _M_end_of_storage()
 80125e4:	2700      	movs	r7, #0
 80125e6:	970b      	str	r7, [sp, #44]	; 0x2c
 80125e8:	970c      	str	r7, [sp, #48]	; 0x30
 80125ea:	970d      	str	r7, [sp, #52]	; 0x34
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80125ec:	4618      	mov	r0, r3
 80125ee:	f008 fccf 	bl	801af90 <_Znwj>
 80125f2:	4603      	mov	r3, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80125f4:	900b      	str	r0, [sp, #44]	; 0x2c
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80125f6:	1c42      	adds	r2, r0, #1
 80125f8:	920d      	str	r2, [sp, #52]	; 0x34
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80125fa:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80125fe:	7001      	strb	r1, [r0, #0]
	  this->_M_impl._M_finish =
 8012600:	920c      	str	r2, [sp, #48]	; 0x30
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012602:	9701      	str	r7, [sp, #4]
 8012604:	9702      	str	r7, [sp, #8]
 8012606:	9703      	str	r7, [sp, #12]
 8012608:	9704      	str	r7, [sp, #16]
 801260a:	9705      	str	r7, [sp, #20]
 801260c:	9706      	str	r7, [sp, #24]
	  _M_start = __x._M_start;
 801260e:	68e0      	ldr	r0, [r4, #12]
 8012610:	9004      	str	r0, [sp, #16]
	  _M_finish = __x._M_finish;
 8012612:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8012616:	f8cd c014 	str.w	ip, [sp, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
 801261a:	68a9      	ldr	r1, [r5, #8]
 801261c:	9106      	str	r1, [sp, #24]
	  _M_start = __x._M_start;
 801261e:	60e3      	str	r3, [r4, #12]
	  _M_finish = __x._M_finish;
 8012620:	606a      	str	r2, [r5, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8012622:	60aa      	str	r2, [r5, #8]
	  _M_start = __x._M_start;
 8012624:	900b      	str	r0, [sp, #44]	; 0x2c
	  _M_finish = __x._M_finish;
 8012626:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
	  _M_end_of_storage = __x._M_end_of_storage;
 801262a:	910d      	str	r1, [sp, #52]	; 0x34
	: _M_start(), _M_finish(), _M_end_of_storage()
 801262c:	9704      	str	r7, [sp, #16]
 801262e:	9705      	str	r7, [sp, #20]
 8012630:	9706      	str	r7, [sp, #24]
	  _M_start = __x._M_start;
 8012632:	9001      	str	r0, [sp, #4]
	  _M_finish = __x._M_finish;
 8012634:	f8cd c008 	str.w	ip, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 8012638:	9103      	str	r1, [sp, #12]
	  _M_start = __x._M_start;
 801263a:	970b      	str	r7, [sp, #44]	; 0x2c
	  _M_finish = __x._M_finish;
 801263c:	970c      	str	r7, [sp, #48]	; 0x30
	  _M_end_of_storage = __x._M_end_of_storage;
 801263e:	970d      	str	r7, [sp, #52]	; 0x34
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012640:	1a09      	subs	r1, r1, r0
	if (__p)
 8012642:	b108      	cbz	r0, 8012648 <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x176>
	::operator delete(__p
 8012644:	f008 fc8e 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8012648:	980b      	ldr	r0, [sp, #44]	; 0x2c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801264a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801264c:	1a09      	subs	r1, r1, r0
	if (__p)
 801264e:	2800      	cmp	r0, #0
 8012650:	f43f af7b 	beq.w	801254a <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x78>
 8012654:	f008 fc86 	bl	801af64 <_ZdlPvj>
 8012658:	e777      	b.n	801254a <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x78>
	  std::__throw_bad_alloc();
 801265a:	f008 fd47 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801265e:	2700      	movs	r7, #0
 8012660:	e792      	b.n	8012588 <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t+0xb6>
 8012662:	462a      	mov	r2, r5
 8012664:	4649      	mov	r1, r9
 8012666:	4638      	mov	r0, r7
 8012668:	f009 f950 	bl	801b90c <memmove>
 801266c:	e79d      	b.n	80125aa <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t+0xd8>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 801266e:	2500      	movs	r5, #0
	_M_deallocate(_M_impl._M_start,
 8012670:	9814      	ldr	r0, [sp, #80]	; 0x50
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012672:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012674:	1a09      	subs	r1, r1, r0
	if (__p)
 8012676:	b108      	cbz	r0, 801267c <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1aa>
	::operator delete(__p
 8012678:	f008 fc74 	bl	801af64 <_ZdlPvj>
 801267c:	b925      	cbnz	r5, 8012688 <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1b6>
}
 801267e:	f8bd 00ac 	ldrh.w	r0, [sp, #172]	; 0xac
 8012682:	b022      	add	sp, #136	; 0x88
 8012684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012688:	4631      	mov	r1, r6
 801268a:	f811 3b04 	ldrb.w	r3, [r1], #4
 801268e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8012692:	a818      	add	r0, sp, #96	; 0x60
 8012694:	f7fe faeb 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012698:	7c33      	ldrb	r3, [r6, #16]
 801269a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801269e:	7c73      	ldrb	r3, [r6, #17]
 80126a0:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
		Send(*response);
 80126a4:	a917      	add	r1, sp, #92	; 0x5c
 80126a6:	4640      	mov	r0, r8
 80126a8:	f7ff fb94 	bl	8011dd4 <_ZN13Communication4SendE13MessageHeader>
	_M_deallocate(_M_impl._M_start,
 80126ac:	9818      	ldr	r0, [sp, #96]	; 0x60
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80126ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 80126b0:	1a09      	subs	r1, r1, r0
	if (__p)
 80126b2:	b108      	cbz	r0, 80126b8 <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e6>
 80126b4:	f008 fc56 	bl	801af64 <_ZdlPvj>
      { _M_erase_at_end(this->_M_impl._M_start); }
 80126b8:	6873      	ldr	r3, [r6, #4]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80126ba:	68b2      	ldr	r2, [r6, #8]
 80126bc:	4293      	cmp	r3, r2
 80126be:	d000      	beq.n	80126c2 <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1f0>
	    this->_M_impl._M_finish = __pos;
 80126c0:	60b3      	str	r3, [r6, #8]
 80126c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80126c6:	901c      	str	r0, [sp, #112]	; 0x70
 80126c8:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
 80126cc:	79a3      	ldrb	r3, [r4, #6]
 80126ce:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
 80126d2:	79e3      	ldrb	r3, [r4, #7]
 80126d4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 80126d8:	7a23      	ldrb	r3, [r4, #8]
 80126da:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 80126de:	f104 010c 	add.w	r1, r4, #12
 80126e2:	a81f      	add	r0, sp, #124	; 0x7c
 80126e4:	f7fe fac3 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		BuildPayload(response, response_content);
 80126e8:	aa1c      	add	r2, sp, #112	; 0x70
 80126ea:	4631      	mov	r1, r6
 80126ec:	4640      	mov	r0, r8
 80126ee:	f7ff fdcb 	bl	8012288 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
	_M_deallocate(_M_impl._M_start,
 80126f2:	981f      	ldr	r0, [sp, #124]	; 0x7c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80126f4:	9921      	ldr	r1, [sp, #132]	; 0x84
 80126f6:	1a09      	subs	r1, r1, r0
	if (__p)
 80126f8:	2800      	cmp	r0, #0
 80126fa:	d0c0      	beq.n	801267e <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ac>
 80126fc:	f008 fc32 	bl	801af64 <_ZdlPvj>
 8012700:	e7bd      	b.n	801267e <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ac>

08012702 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement>:
bool Communication::FindRegister(MessageHeader message, MessageHeader* response, MessageElement* element) {
 8012702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012706:	b0ac      	sub	sp, #176	; 0xb0
 8012708:	4607      	mov	r7, r0
 801270a:	461c      	mov	r4, r3
	uint16_t register_id = element->element_register.address;
 801270c:	f8b3 8000 	ldrh.w	r8, [r3]
	if (not element->ack && element->command) { // Command access
 8012710:	799d      	ldrb	r5, [r3, #6]
 8012712:	b915      	cbnz	r5, 801271a <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x18>
 8012714:	4616      	mov	r6, r2
 8012716:	79db      	ldrb	r3, [r3, #7]
 8012718:	bb2b      	cbnz	r3, 8012766 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x64>
	} else if (element->ack) { // Action feedback
 801271a:	2d00      	cmp	r5, #0
 801271c:	f040 80af 	bne.w	801287e <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x17c>
	} else if (not element->ack && not element->command) { // Data from a publisher, send to Subscribers
 8012720:	79e3      	ldrb	r3, [r4, #7]
 8012722:	2b00      	cmp	r3, #0
 8012724:	f040 80cd 	bne.w	80128c2 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x1c0>
		element->element_register = subscribers->FindRemoteRegister(Register{.address=register_id}, SubscriberInterface{.interface=message.interface, .address=message.source_address}, &success);
 8012728:	ab29      	add	r3, sp, #164	; 0xa4
 801272a:	2200      	movs	r2, #0
 801272c:	9229      	str	r2, [sp, #164]	; 0xa4
 801272e:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
 8012732:	f8ad 80a4 	strh.w	r8, [sp, #164]	; 0xa4
 8012736:	780a      	ldrb	r2, [r1, #0]
 8012738:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
 801273c:	7c4a      	ldrb	r2, [r1, #17]
 801273e:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 8012742:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
 8012746:	9201      	str	r2, [sp, #4]
 8012748:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
 801274c:	f8ad 2000 	strh.w	r2, [sp]
 8012750:	cb0c      	ldmia	r3, {r2, r3}
 8012752:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012754:	a804      	add	r0, sp, #16
 8012756:	f008 fabf 	bl	801acd8 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb>
 801275a:	9804      	ldr	r0, [sp, #16]
 801275c:	6020      	str	r0, [r4, #0]
 801275e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8012762:	80a3      	strh	r3, [r4, #4]
 8012764:	e0ab      	b.n	80128be <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x1bc>
		if (registers->IsRegistered(register_id))
 8012766:	4641      	mov	r1, r8
 8012768:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801276a:	f007 fb38 	bl	8019dde <_ZN9Registers12IsRegisteredEt>
 801276e:	4605      	mov	r5, r0
 8012770:	b160      	cbz	r0, 801278c <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x8a>
			element->element_register = registers->FindRegister(register_id, &success);
 8012772:	f10d 033b 	add.w	r3, sp, #59	; 0x3b
 8012776:	4642      	mov	r2, r8
 8012778:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801277a:	a804      	add	r0, sp, #16
 801277c:	f007 fa9b 	bl	8019cb6 <_ZN9Registers12FindRegisterEtPb>
 8012780:	9804      	ldr	r0, [sp, #16]
 8012782:	6020      	str	r0, [r4, #0]
 8012784:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8012788:	80a3      	strh	r3, [r4, #4]
		}
 801278a:	e098      	b.n	80128be <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x1bc>
	: _M_start(), _M_finish(), _M_end_of_storage()
 801278c:	2300      	movs	r3, #0
 801278e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012790:	930c      	str	r3, [sp, #48]	; 0x30
 8012792:	930d      	str	r3, [sp, #52]	; 0x34
			response_content.element_register.address = register_id;
 8012794:	f8ad 8020 	strh.w	r8, [sp, #32]
			response_content.ack = true;
 8012798:	2201      	movs	r2, #1
 801279a:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
			response_content.command = true;
 801279e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
			response_content.access = element->access;
 80127a2:	7a21      	ldrb	r1, [r4, #8]
 80127a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
			response_content.data = std::vector<uint8_t>{UNKNOWN_REGISTER};
 80127a8:	210f      	movs	r1, #15
 80127aa:	f88d 1050 	strb.w	r1, [sp, #80]	; 0x50
 80127ae:	a914      	add	r1, sp, #80	; 0x50
 80127b0:	9112      	str	r1, [sp, #72]	; 0x48
 80127b2:	9213      	str	r2, [sp, #76]	; 0x4c
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80127b4:	ac06      	add	r4, sp, #24
 80127b6:	a912      	add	r1, sp, #72	; 0x48
 80127b8:	c903      	ldmia	r1, {r0, r1}
 80127ba:	e884 0003 	stmia.w	r4, {r0, r1}
 80127be:	930f      	str	r3, [sp, #60]	; 0x3c
 80127c0:	9310      	str	r3, [sp, #64]	; 0x40
 80127c2:	9311      	str	r3, [sp, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80127c4:	4610      	mov	r0, r2
 80127c6:	f008 fbe3 	bl	801af90 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80127ca:	900f      	str	r0, [sp, #60]	; 0x3c
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80127cc:	1c43      	adds	r3, r0, #1
 80127ce:	9311      	str	r3, [sp, #68]	; 0x44
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80127d0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80127d4:	7002      	strb	r2, [r0, #0]
	  this->_M_impl._M_finish =
 80127d6:	9310      	str	r3, [sp, #64]	; 0x40
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 80127d8:	f04f 0200 	mov.w	r2, #0
 80127dc:	a90f      	add	r1, sp, #60	; 0x3c
 80127de:	a80b      	add	r0, sp, #44	; 0x2c
 80127e0:	f7fc faa9 	bl	800ed36 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	_M_deallocate(_M_impl._M_start,
 80127e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80127e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80127e8:	1a09      	subs	r1, r1, r0
	if (__p)
 80127ea:	b108      	cbz	r0, 80127f0 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0xee>
	::operator delete(__p
 80127ec:	f008 fbba 	bl	801af64 <_ZdlPvj>
			if (not BuildPayload(response, response_content)) { // if no space available, send the data and then rebuild a new response
 80127f0:	a908      	add	r1, sp, #32
 80127f2:	a815      	add	r0, sp, #84	; 0x54
 80127f4:	f7ff f9b0 	bl	8011b58 <_ZN14MessageElementC1ERKS_>
 80127f8:	aa15      	add	r2, sp, #84	; 0x54
 80127fa:	4631      	mov	r1, r6
 80127fc:	4638      	mov	r0, r7
 80127fe:	f7ff fd43 	bl	8012288 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012802:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8012804:	9818      	ldr	r0, [sp, #96]	; 0x60
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012806:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012808:	1a09      	subs	r1, r1, r0
	if (__p)
 801280a:	b108      	cbz	r0, 8012810 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x10e>
 801280c:	f008 fbaa 	bl	801af64 <_ZdlPvj>
 8012810:	b13c      	cbz	r4, 8012822 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x120>
	_M_deallocate(_M_impl._M_start,
 8012812:	980b      	ldr	r0, [sp, #44]	; 0x2c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012814:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012816:	1a09      	subs	r1, r1, r0
	if (__p)
 8012818:	2800      	cmp	r0, #0
 801281a:	d052      	beq.n	80128c2 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x1c0>
 801281c:	f008 fba2 	bl	801af64 <_ZdlPvj>
 8012820:	e04f      	b.n	80128c2 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x1c0>
 8012822:	4631      	mov	r1, r6
 8012824:	f811 3b04 	ldrb.w	r3, [r1], #4
 8012828:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801282c:	a81c      	add	r0, sp, #112	; 0x70
 801282e:	f7fe fa1e 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012832:	7c33      	ldrb	r3, [r6, #16]
 8012834:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8012838:	7c73      	ldrb	r3, [r6, #17]
 801283a:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
				Send(*response);
 801283e:	a91b      	add	r1, sp, #108	; 0x6c
 8012840:	4638      	mov	r0, r7
 8012842:	f7ff fac7 	bl	8011dd4 <_ZN13Communication4SendE13MessageHeader>
	_M_deallocate(_M_impl._M_start,
 8012846:	981c      	ldr	r0, [sp, #112]	; 0x70
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012848:	991e      	ldr	r1, [sp, #120]	; 0x78
 801284a:	1a09      	subs	r1, r1, r0
	if (__p)
 801284c:	b108      	cbz	r0, 8012852 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x150>
 801284e:	f008 fb89 	bl	801af64 <_ZdlPvj>
      { _M_erase_at_end(this->_M_impl._M_start); }
 8012852:	6873      	ldr	r3, [r6, #4]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8012854:	68b2      	ldr	r2, [r6, #8]
 8012856:	4293      	cmp	r3, r2
 8012858:	d000      	beq.n	801285c <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x15a>
	    this->_M_impl._M_finish = __pos;
 801285a:	60b3      	str	r3, [r6, #8]
				BuildPayload(response, response_content);
 801285c:	a908      	add	r1, sp, #32
 801285e:	a820      	add	r0, sp, #128	; 0x80
 8012860:	f7ff f97a 	bl	8011b58 <_ZN14MessageElementC1ERKS_>
 8012864:	aa20      	add	r2, sp, #128	; 0x80
 8012866:	4631      	mov	r1, r6
 8012868:	4638      	mov	r0, r7
 801286a:	f7ff fd0d 	bl	8012288 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
	_M_deallocate(_M_impl._M_start,
 801286e:	9823      	ldr	r0, [sp, #140]	; 0x8c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012870:	9925      	ldr	r1, [sp, #148]	; 0x94
 8012872:	1a09      	subs	r1, r1, r0
	if (__p)
 8012874:	2800      	cmp	r0, #0
 8012876:	d0cc      	beq.n	8012812 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x110>
 8012878:	f008 fb74 	bl	801af64 <_ZdlPvj>
 801287c:	e7c9      	b.n	8012812 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x110>
		element->element_register = services->FindRemoteRegister(Register{.address=register_id}, ServiceInterface{.interface=message.interface, .address=message.source_address}, element->access, &success);
 801287e:	ab26      	add	r3, sp, #152	; 0x98
 8012880:	2200      	movs	r2, #0
 8012882:	9226      	str	r2, [sp, #152]	; 0x98
 8012884:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
 8012888:	f8ad 8098 	strh.w	r8, [sp, #152]	; 0x98
 801288c:	780a      	ldrb	r2, [r1, #0]
 801288e:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
 8012892:	7c4a      	ldrb	r2, [r1, #17]
 8012894:	f88d 20a1 	strb.w	r2, [sp, #161]	; 0xa1
 8012898:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
 801289c:	9202      	str	r2, [sp, #8]
 801289e:	7a22      	ldrb	r2, [r4, #8]
 80128a0:	9201      	str	r2, [sp, #4]
 80128a2:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
 80128a6:	f8ad 2000 	strh.w	r2, [sp]
 80128aa:	cb0c      	ldmia	r3, {r2, r3}
 80128ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80128ae:	a804      	add	r0, sp, #16
 80128b0:	f008 f89b 	bl	801a9ea <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb>
 80128b4:	9804      	ldr	r0, [sp, #16]
 80128b6:	6020      	str	r0, [r4, #0]
 80128b8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80128bc:	80a3      	strh	r3, [r4, #4]
	return success;
 80128be:	f89d 503b 	ldrb.w	r5, [sp, #59]	; 0x3b
}
 80128c2:	4628      	mov	r0, r5
 80128c4:	b02c      	add	sp, #176	; 0xb0
 80128c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080128ca <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 80128ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128ce:	b0b5      	sub	sp, #212	; 0xd4
 80128d0:	af02      	add	r7, sp, #8
 80128d2:	4605      	mov	r5, r0
 80128d4:	4691      	mov	r9, r2
 80128d6:	461c      	mov	r4, r3
 80128d8:	f8d7 60f0 	ldr.w	r6, [r7, #240]	; 0xf0
 80128dc:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80128e0:	607b      	str	r3, [r7, #4]
	if (not element.element_register.isArray) {
 80128e2:	78f3      	ldrb	r3, [r6, #3]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d033      	beq.n	8012950 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x86>
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 80128e8:	f8b6 a004 	ldrh.w	sl, [r6, #4]
 80128ec:	f1ba 0f00 	cmp.w	sl, #0
 80128f0:	f040 8114 	bne.w	8012b1c <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x252>
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 80128f4:	88b3      	ldrh	r3, [r6, #4]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d148      	bne.n	801298c <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0xc2>
	return *(this->_M_impl._M_start + __n);
 80128fa:	f851 3f04 	ldr.w	r3, [r1, #4]!
		length_to_extract = message.payload[start_index];
 80128fe:	687a      	ldr	r2, [r7, #4]
 8012900:	f813 a002 	ldrb.w	sl, [r3, r2]
		start_index++;
 8012904:	1c50      	adds	r0, r2, #1
 8012906:	b283      	uxth	r3, r0
 8012908:	607b      	str	r3, [r7, #4]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801290a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 801290e:	f7fe f9ae 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012912:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012916:	9301      	str	r3, [sp, #4]
 8012918:	f8cd a000 	str.w	sl, [sp]
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8012922:	4629      	mov	r1, r5
 8012924:	f107 0014 	add.w	r0, r7, #20
 8012928:	f7fe fbde 	bl	80110e8 <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb>
	_M_deallocate(_M_impl._M_start,
 801292c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801292e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012930:	1a09      	subs	r1, r1, r0
	if (__p)
 8012932:	b108      	cbz	r0, 8012938 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x6e>
 8012934:	f008 fb16 	bl	801af64 <_ZdlPvj>
		if (success)
 8012938:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801293c:	2b00      	cmp	r3, #0
 801293e:	f040 811d 	bne.w	8012b7c <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x2b2>
	_M_deallocate(_M_impl._M_start,
 8012942:	6978      	ldr	r0, [r7, #20]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012944:	69f9      	ldr	r1, [r7, #28]
 8012946:	1a09      	subs	r1, r1, r0
	if (__p)
 8012948:	b300      	cbz	r0, 801298c <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0xc2>
 801294a:	f008 fb0b 	bl	801af64 <_ZdlPvj>
 801294e:	e01d      	b.n	801298c <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0xc2>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8012950:	3104      	adds	r1, #4
 8012952:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012956:	f7fe f98a 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801295a:	f107 0323 	add.w	r3, r7, #35	; 0x23
 801295e:	687a      	ldr	r2, [r7, #4]
 8012960:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012964:	4628      	mov	r0, r5
 8012966:	f7fc fdc1 	bl	800f4ec <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb>
 801296a:	7538      	strb	r0, [r7, #20]
	_M_deallocate(_M_impl._M_start,
 801296c:	6a78      	ldr	r0, [r7, #36]	; 0x24
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801296e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012970:	1a09      	subs	r1, r1, r0
	if (__p)
 8012972:	b108      	cbz	r0, 8012978 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0xae>
 8012974:	f008 faf6 	bl	801af64 <_ZdlPvj>
		val = (uint8_t) value;
 8012978:	7d3b      	ldrb	r3, [r7, #20]
 801297a:	f885 3020 	strb.w	r3, [r5, #32]
		if (success)
 801297e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012982:	2b00      	cmp	r3, #0
 8012984:	f040 80be 	bne.w	8012b04 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x23a>
		length_to_extract = 1;
 8012988:	f04f 0a01 	mov.w	sl, #1
	succ = success;
 801298c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012990:	712b      	strb	r3, [r5, #4]
 8012992:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012996:	60a8      	str	r0, [r5, #8]
 8012998:	81a9      	strh	r1, [r5, #12]
 801299a:	79b2      	ldrb	r2, [r6, #6]
 801299c:	73aa      	strb	r2, [r5, #14]
 801299e:	79f2      	ldrb	r2, [r6, #7]
 80129a0:	73ea      	strb	r2, [r5, #15]
 80129a2:	7a32      	ldrb	r2, [r6, #8]
 80129a4:	742a      	strb	r2, [r5, #16]
 80129a6:	f106 010c 	add.w	r1, r6, #12
 80129aa:	f105 0014 	add.w	r0, r5, #20
 80129ae:	f7fe f98e 	bl	8010cce <_ZNSt6vectorIhSaIhEEaSERKS1_>
	if (success)
 80129b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	f000 80fc 	beq.w	8012bb4 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x2ea>
		response_content.data = std::vector<uint8_t>{OK};
 80129bc:	f104 080c 	add.w	r8, r4, #12
 80129c0:	2600      	movs	r6, #0
 80129c2:	f887 6068 	strb.w	r6, [r7, #104]	; 0x68
 80129c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80129ca:	663b      	str	r3, [r7, #96]	; 0x60
 80129cc:	2301      	movs	r3, #1
 80129ce:	667b      	str	r3, [r7, #100]	; 0x64
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80129d0:	f107 0214 	add.w	r2, r7, #20
 80129d4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80129d8:	c903      	ldmia	r1, {r0, r1}
 80129da:	e882 0003 	stmia.w	r2, {r0, r1}
	: _M_start(), _M_finish(), _M_end_of_storage()
 80129de:	657e      	str	r6, [r7, #84]	; 0x54
 80129e0:	65be      	str	r6, [r7, #88]	; 0x58
 80129e2:	65fe      	str	r6, [r7, #92]	; 0x5c
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80129e4:	4618      	mov	r0, r3
 80129e6:	f008 fad3 	bl	801af90 <_Znwj>
 80129ea:	4684      	mov	ip, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80129ec:	6578      	str	r0, [r7, #84]	; 0x54
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80129ee:	f100 0e01 	add.w	lr, r0, #1
 80129f2:	f8c7 e05c 	str.w	lr, [r7, #92]	; 0x5c
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80129f6:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80129fa:	7003      	strb	r3, [r0, #0]
	  this->_M_impl._M_finish =
 80129fc:	f8c7 e058 	str.w	lr, [r7, #88]	; 0x58
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012a00:	60be      	str	r6, [r7, #8]
 8012a02:	60fe      	str	r6, [r7, #12]
 8012a04:	613e      	str	r6, [r7, #16]
 8012a06:	617e      	str	r6, [r7, #20]
 8012a08:	61be      	str	r6, [r7, #24]
 8012a0a:	61fe      	str	r6, [r7, #28]
	  _M_start = __x._M_start;
 8012a0c:	68e0      	ldr	r0, [r4, #12]
 8012a0e:	6178      	str	r0, [r7, #20]
	  _M_finish = __x._M_finish;
 8012a10:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8012a14:	61ba      	str	r2, [r7, #24]
	  _M_end_of_storage = __x._M_end_of_storage;
 8012a16:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012a1a:	61f9      	str	r1, [r7, #28]
	  _M_start = __x._M_start;
 8012a1c:	f8c4 c00c 	str.w	ip, [r4, #12]
	  _M_finish = __x._M_finish;
 8012a20:	f8c8 e004 	str.w	lr, [r8, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8012a24:	f8c8 e008 	str.w	lr, [r8, #8]
	  _M_start = __x._M_start;
 8012a28:	6578      	str	r0, [r7, #84]	; 0x54
	  _M_finish = __x._M_finish;
 8012a2a:	65ba      	str	r2, [r7, #88]	; 0x58
	  _M_end_of_storage = __x._M_end_of_storage;
 8012a2c:	65f9      	str	r1, [r7, #92]	; 0x5c
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012a2e:	617e      	str	r6, [r7, #20]
 8012a30:	61be      	str	r6, [r7, #24]
 8012a32:	61fe      	str	r6, [r7, #28]
	  _M_start = __x._M_start;
 8012a34:	60b8      	str	r0, [r7, #8]
	  _M_finish = __x._M_finish;
 8012a36:	60fa      	str	r2, [r7, #12]
	  _M_end_of_storage = __x._M_end_of_storage;
 8012a38:	6139      	str	r1, [r7, #16]
	  _M_start = __x._M_start;
 8012a3a:	657e      	str	r6, [r7, #84]	; 0x54
	  _M_finish = __x._M_finish;
 8012a3c:	65be      	str	r6, [r7, #88]	; 0x58
	  _M_end_of_storage = __x._M_end_of_storage;
 8012a3e:	65fe      	str	r6, [r7, #92]	; 0x5c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012a40:	1a09      	subs	r1, r1, r0
	if (__p)
 8012a42:	b108      	cbz	r0, 8012a48 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x17e>
	::operator delete(__p
 8012a44:	f008 fa8e 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8012a48:	6d78      	ldr	r0, [r7, #84]	; 0x54
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012a4a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8012a4c:	1a09      	subs	r1, r1, r0
	if (__p)
 8012a4e:	b108      	cbz	r0, 8012a54 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x18a>
 8012a50:	f008 fa88 	bl	801af64 <_ZdlPvj>
 8012a54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012a58:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8012a5c:	f8a7 1088 	strh.w	r1, [r7, #136]	; 0x88
 8012a60:	79a3      	ldrb	r3, [r4, #6]
 8012a62:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
 8012a66:	79e3      	ldrb	r3, [r4, #7]
 8012a68:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8012a6c:	7a23      	ldrb	r3, [r4, #8]
 8012a6e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8012a72:	f104 0b0c 	add.w	fp, r4, #12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012a76:	f8db 6004 	ldr.w	r6, [fp, #4]
 8012a7a:	68e2      	ldr	r2, [r4, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012a82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012a86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012a8a:	1ab6      	subs	r6, r6, r2
 8012a8c:	f000 80e4 	beq.w	8012c58 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x38e>
	if (__n > this->_M_max_size())
 8012a90:	429e      	cmp	r6, r3
 8012a92:	f2c0 80df 	blt.w	8012c54 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x38a>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012a96:	4630      	mov	r0, r6
 8012a98:	f008 fa7a 	bl	801af90 <_Znwj>
 8012a9c:	4680      	mov	r8, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8012a9e:	f8c7 8090 	str.w	r8, [r7, #144]	; 0x90
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8012aa2:	f8c7 8094 	str.w	r8, [r7, #148]	; 0x94
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012aa6:	4446      	add	r6, r8
 8012aa8:	f8c7 6098 	str.w	r6, [r7, #152]	; 0x98
 8012aac:	f8db 6004 	ldr.w	r6, [fp, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8012ab0:	f8c7 8000 	str.w	r8, [r7]
      return std::__niter_wrap(__result,
 8012ab4:	68e0      	ldr	r0, [r4, #12]
 8012ab6:	f7ee fffe 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8012aba:	4683      	mov	fp, r0
 8012abc:	4630      	mov	r0, r6
 8012abe:	f7ee fffa 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8012ac2:	ebb0 060b 	subs.w	r6, r0, fp
 8012ac6:	f040 80ca 	bne.w	8012c5e <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x394>
	  return __result + _Num;
 8012aca:	683b      	ldr	r3, [r7, #0]
 8012acc:	4433      	add	r3, r6
	this->_M_impl._M_finish =
 8012ace:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (not BuildPayload(response, response_content)) { // if no space available, send the data and then rebuild a new response
 8012ad2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8012ad6:	4649      	mov	r1, r9
 8012ad8:	4628      	mov	r0, r5
 8012ada:	f7ff fbd5 	bl	8012288 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012ade:	4606      	mov	r6, r0
	_M_deallocate(_M_impl._M_start,
 8012ae0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012ae4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012ae8:	1a09      	subs	r1, r1, r0
	if (__p)
 8012aea:	b108      	cbz	r0, 8012af0 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x226>
	::operator delete(__p
 8012aec:	f008 fa3a 	bl	801af64 <_ZdlPvj>
 8012af0:	2e00      	cmp	r6, #0
 8012af2:	f000 80ba 	beq.w	8012c6a <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x3a0>
	return start_index + sizeof(T) * length_to_extract;
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	4450      	add	r0, sl
}
 8012afa:	b280      	uxth	r0, r0
 8012afc:	37cc      	adds	r7, #204	; 0xcc
 8012afe:	46bd      	mov	sp, r7
 8012b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 8012b04:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8012b06:	8831      	ldrh	r1, [r6, #0]
 8012b08:	2301      	movs	r3, #1
 8012b0a:	9300      	str	r3, [sp, #0]
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	f107 0214 	add.w	r2, r7, #20
 8012b12:	f7fd fc0b 	bl	801032c <_ZN9Registers13WriteRegisterIhEEbtPT_tb>
 8012b16:	f887 0023 	strb.w	r0, [r7, #35]	; 0x23
 8012b1a:	e735      	b.n	8012988 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0xbe>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 8012b1c:	46eb      	mov	fp, sp
		T values[length_to_extract];
 8012b1e:	f10a 0307 	add.w	r3, sl, #7
 8012b22:	08db      	lsrs	r3, r3, #3
 8012b24:	ebab 03c3 	sub.w	r3, fp, r3, lsl #3
 8012b28:	469d      	mov	sp, r3
 8012b2a:	f10d 0808 	add.w	r8, sp, #8
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8012b2e:	3104      	adds	r1, #4
 8012b30:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8012b34:	f7fe f89b 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012b38:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8012b3c:	9301      	str	r3, [sp, #4]
 8012b3e:	f8cd a000 	str.w	sl, [sp]
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012b48:	4641      	mov	r1, r8
 8012b4a:	4628      	mov	r0, r5
 8012b4c:	f7fe f9be 	bl	8010ecc <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb>
	_M_deallocate(_M_impl._M_start,
 8012b50:	6b38      	ldr	r0, [r7, #48]	; 0x30
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012b52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012b54:	1a09      	subs	r1, r1, r0
	if (__p)
 8012b56:	b108      	cbz	r0, 8012b5c <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x292>
 8012b58:	f008 fa04 	bl	801af64 <_ZdlPvj>
		if (success)
 8012b5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012b60:	b90b      	cbnz	r3, 8012b66 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x29c>
 8012b62:	46dd      	mov	sp, fp
			success = registers->WriteRegister<T>(element.element_register.address, values);
 8012b64:	e712      	b.n	801298c <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0xc2>
 8012b66:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8012b68:	8831      	ldrh	r1, [r6, #0]
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	9300      	str	r3, [sp, #0]
 8012b6e:	2300      	movs	r3, #0
 8012b70:	4642      	mov	r2, r8
 8012b72:	f7fd fbdb 	bl	801032c <_ZN9Registers13WriteRegisterIhEEbtPT_tb>
 8012b76:	f887 0023 	strb.w	r0, [r7, #35]	; 0x23
 8012b7a:	e7f2      	b.n	8012b62 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x298>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 8012b7c:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
 8012b80:	f8b6 8000 	ldrh.w	r8, [r6]
 8012b84:	f107 0114 	add.w	r1, r7, #20
 8012b88:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8012b8c:	f7fe f86f 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012b90:	2301      	movs	r3, #1
 8012b92:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012b96:	4641      	mov	r1, r8
 8012b98:	4658      	mov	r0, fp
 8012b9a:	f7fd fc9b 	bl	80104d4 <_ZN9Registers19WriteVectorRegisterIhEEbtSt6vectorIT_SaIS2_EEb>
 8012b9e:	f887 0023 	strb.w	r0, [r7, #35]	; 0x23
	_M_deallocate(_M_impl._M_start,
 8012ba2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012ba4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012ba6:	1a09      	subs	r1, r1, r0
	if (__p)
 8012ba8:	2800      	cmp	r0, #0
 8012baa:	f43f aeca 	beq.w	8012942 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x78>
 8012bae:	f008 f9d9 	bl	801af64 <_ZdlPvj>
 8012bb2:	e6c6      	b.n	8012942 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x78>
		response_content.data = std::vector<uint8_t>{ERROR};
 8012bb4:	f104 080c 	add.w	r8, r4, #12
 8012bb8:	23ff      	movs	r3, #255	; 0xff
 8012bba:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
 8012bbe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012bc2:	67bb      	str	r3, [r7, #120]	; 0x78
 8012bc4:	2301      	movs	r3, #1
 8012bc6:	67fb      	str	r3, [r7, #124]	; 0x7c
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012bc8:	f107 0214 	add.w	r2, r7, #20
 8012bcc:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8012bd0:	c903      	ldmia	r1, {r0, r1}
 8012bd2:	e882 0003 	stmia.w	r2, {r0, r1}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012bd6:	2600      	movs	r6, #0
 8012bd8:	66fe      	str	r6, [r7, #108]	; 0x6c
 8012bda:	673e      	str	r6, [r7, #112]	; 0x70
 8012bdc:	677e      	str	r6, [r7, #116]	; 0x74
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012bde:	4618      	mov	r0, r3
 8012be0:	f008 f9d6 	bl	801af90 <_Znwj>
 8012be4:	4684      	mov	ip, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012be6:	66f8      	str	r0, [r7, #108]	; 0x6c
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012be8:	f100 0e01 	add.w	lr, r0, #1
 8012bec:	f8c7 e074 	str.w	lr, [r7, #116]	; 0x74
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8012bf0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8012bf4:	7003      	strb	r3, [r0, #0]
	  this->_M_impl._M_finish =
 8012bf6:	f8c7 e070 	str.w	lr, [r7, #112]	; 0x70
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012bfa:	60be      	str	r6, [r7, #8]
 8012bfc:	60fe      	str	r6, [r7, #12]
 8012bfe:	613e      	str	r6, [r7, #16]
 8012c00:	617e      	str	r6, [r7, #20]
 8012c02:	61be      	str	r6, [r7, #24]
 8012c04:	61fe      	str	r6, [r7, #28]
	  _M_start = __x._M_start;
 8012c06:	68e0      	ldr	r0, [r4, #12]
 8012c08:	6178      	str	r0, [r7, #20]
	  _M_finish = __x._M_finish;
 8012c0a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8012c0e:	61ba      	str	r2, [r7, #24]
	  _M_end_of_storage = __x._M_end_of_storage;
 8012c10:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012c14:	61f9      	str	r1, [r7, #28]
	  _M_start = __x._M_start;
 8012c16:	f8c4 c00c 	str.w	ip, [r4, #12]
	  _M_finish = __x._M_finish;
 8012c1a:	f8c8 e004 	str.w	lr, [r8, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8012c1e:	f8c8 e008 	str.w	lr, [r8, #8]
	  _M_start = __x._M_start;
 8012c22:	66f8      	str	r0, [r7, #108]	; 0x6c
	  _M_finish = __x._M_finish;
 8012c24:	673a      	str	r2, [r7, #112]	; 0x70
	  _M_end_of_storage = __x._M_end_of_storage;
 8012c26:	6779      	str	r1, [r7, #116]	; 0x74
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012c28:	617e      	str	r6, [r7, #20]
 8012c2a:	61be      	str	r6, [r7, #24]
 8012c2c:	61fe      	str	r6, [r7, #28]
	  _M_start = __x._M_start;
 8012c2e:	60b8      	str	r0, [r7, #8]
	  _M_finish = __x._M_finish;
 8012c30:	60fa      	str	r2, [r7, #12]
	  _M_end_of_storage = __x._M_end_of_storage;
 8012c32:	6139      	str	r1, [r7, #16]
	  _M_start = __x._M_start;
 8012c34:	66fe      	str	r6, [r7, #108]	; 0x6c
	  _M_finish = __x._M_finish;
 8012c36:	673e      	str	r6, [r7, #112]	; 0x70
	  _M_end_of_storage = __x._M_end_of_storage;
 8012c38:	677e      	str	r6, [r7, #116]	; 0x74
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012c3a:	1a09      	subs	r1, r1, r0
	if (__p)
 8012c3c:	b108      	cbz	r0, 8012c42 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x378>
	::operator delete(__p
 8012c3e:	f008 f991 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8012c42:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012c44:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8012c46:	1a09      	subs	r1, r1, r0
	if (__p)
 8012c48:	2800      	cmp	r0, #0
 8012c4a:	f43f af03 	beq.w	8012a54 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x18a>
 8012c4e:	f008 f989 	bl	801af64 <_ZdlPvj>
 8012c52:	e6ff      	b.n	8012a54 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x18a>
	  std::__throw_bad_alloc();
 8012c54:	f008 fa4a 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012c58:	f04f 0800 	mov.w	r8, #0
 8012c5c:	e71f      	b.n	8012a9e <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d4>
 8012c5e:	4632      	mov	r2, r6
 8012c60:	4659      	mov	r1, fp
 8012c62:	4640      	mov	r0, r8
 8012c64:	f008 fe52 	bl	801b90c <memmove>
 8012c68:	e72f      	b.n	8012aca <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x200>
 8012c6a:	4649      	mov	r1, r9
 8012c6c:	f811 3b04 	ldrb.w	r3, [r1], #4
 8012c70:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
 8012c74:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8012c78:	f7fd fff9 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012c7c:	f899 3010 	ldrb.w	r3, [r9, #16]
 8012c80:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8012c84:	f899 3011 	ldrb.w	r3, [r9, #17]
 8012c88:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
		Send(*response);
 8012c8c:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8012c90:	4628      	mov	r0, r5
 8012c92:	f7ff f89f 	bl	8011dd4 <_ZN13Communication4SendE13MessageHeader>
	_M_deallocate(_M_impl._M_start,
 8012c96:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012c9a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8012c9e:	1a09      	subs	r1, r1, r0
	if (__p)
 8012ca0:	b108      	cbz	r0, 8012ca6 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x3dc>
	::operator delete(__p
 8012ca2:	f008 f95f 	bl	801af64 <_ZdlPvj>
      { _M_erase_at_end(this->_M_impl._M_start); }
 8012ca6:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8012caa:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8012cae:	4293      	cmp	r3, r2
 8012cb0:	d001      	beq.n	8012cb6 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x3ec>
	    this->_M_impl._M_finish = __pos;
 8012cb2:	f8c9 3008 	str.w	r3, [r9, #8]
 8012cb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012cba:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8012cbe:	f8a7 10b4 	strh.w	r1, [r7, #180]	; 0xb4
 8012cc2:	79a3      	ldrb	r3, [r4, #6]
 8012cc4:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 8012cc8:	79e3      	ldrb	r3, [r4, #7]
 8012cca:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8012cce:	7a23      	ldrb	r3, [r4, #8]
 8012cd0:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
 8012cd4:	f104 010c 	add.w	r1, r4, #12
 8012cd8:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8012cdc:	f7fd ffc7 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		BuildPayload(response, response_content);
 8012ce0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8012ce4:	4649      	mov	r1, r9
 8012ce6:	4628      	mov	r0, r5
 8012ce8:	f7ff face 	bl	8012288 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
	_M_deallocate(_M_impl._M_start,
 8012cec:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012cf0:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8012cf4:	1a09      	subs	r1, r1, r0
	if (__p)
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	f43f aefd 	beq.w	8012af6 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x22c>
 8012cfc:	f008 f932 	bl	801af64 <_ZdlPvj>
 8012d00:	e6f9      	b.n	8012af6 <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t+0x22c>

08012d02 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012d02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d06:	b0ad      	sub	sp, #180	; 0xb4
 8012d08:	4606      	mov	r6, r0
 8012d0a:	460d      	mov	r5, r1
 8012d0c:	4617      	mov	r7, r2
 8012d0e:	461c      	mov	r4, r3
 8012d10:	f8bd b0d8 	ldrh.w	fp, [sp, #216]	; 0xd8
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012d14:	2300      	movs	r3, #0
 8012d16:	9307      	str	r3, [sp, #28]
 8012d18:	9308      	str	r3, [sp, #32]
 8012d1a:	9309      	str	r3, [sp, #36]	; 0x24
	response_content.element_register = element.element_register;
 8012d1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012d20:	9004      	str	r0, [sp, #16]
 8012d22:	f8ad 1014 	strh.w	r1, [sp, #20]
	response_content.ack = true;
 8012d26:	2201      	movs	r2, #1
 8012d28:	f88d 2016 	strb.w	r2, [sp, #22]
	response_content.command = false;
 8012d2c:	f88d 3017 	strb.w	r3, [sp, #23]
	response_content.access = element.access;
 8012d30:	7a23      	ldrb	r3, [r4, #8]
 8012d32:	f88d 3018 	strb.w	r3, [sp, #24]
	leds->CommunicationLED(message.interface);
 8012d36:	7829      	ldrb	r1, [r5, #0]
 8012d38:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8012d3a:	f003 fcfe 	bl	801673a <_ZN4LEDS16CommunicationLEDEh>
	if (element.access == WRITE) {
 8012d3e:	7a23      	ldrb	r3, [r4, #8]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d15d      	bne.n	8012e00 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0xfe>
 8012d44:	4629      	mov	r1, r5
 8012d46:	f811 3b04 	ldrb.w	r3, [r1], #4
 8012d4a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8012d4e:	a80b      	add	r0, sp, #44	; 0x2c
 8012d50:	f7fd ff8d 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012d54:	7c2b      	ldrb	r3, [r5, #16]
 8012d56:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 8012d5a:	7c6b      	ldrb	r3, [r5, #17]
 8012d5c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 8012d60:	ab04      	add	r3, sp, #16
 8012d62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012d66:	900f      	str	r0, [sp, #60]	; 0x3c
 8012d68:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8012d6c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8012d70:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 8012d74:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8012d78:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
 8012d7c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8012d80:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 8012d84:	a907      	add	r1, sp, #28
 8012d86:	a812      	add	r0, sp, #72	; 0x48
 8012d88:	f7fd ff71 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012d8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012d90:	9015      	str	r0, [sp, #84]	; 0x54
 8012d92:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
 8012d96:	79a3      	ldrb	r3, [r4, #6]
 8012d98:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
 8012d9c:	79e3      	ldrb	r3, [r4, #7]
 8012d9e:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8012da2:	7a23      	ldrb	r3, [r4, #8]
 8012da4:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8012da8:	f104 010c 	add.w	r1, r4, #12
 8012dac:	a818      	add	r0, sp, #96	; 0x60
 8012dae:	f7fd ff5e 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8012db2:	f8cd b004 	str.w	fp, [sp, #4]
 8012db6:	ab15      	add	r3, sp, #84	; 0x54
 8012db8:	9300      	str	r3, [sp, #0]
 8012dba:	ab0f      	add	r3, sp, #60	; 0x3c
 8012dbc:	463a      	mov	r2, r7
 8012dbe:	a90a      	add	r1, sp, #40	; 0x28
 8012dc0:	4630      	mov	r0, r6
 8012dc2:	f7ff fd82 	bl	80128ca <_ZN13Communication12ProcessWriteIhEEt13MessageHeaderPS1_14MessageElementS3_t>
 8012dc6:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8012dc8:	9818      	ldr	r0, [sp, #96]	; 0x60
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012dca:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012dcc:	1a09      	subs	r1, r1, r0
	if (__p)
 8012dce:	b108      	cbz	r0, 8012dd4 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0xd2>
 8012dd0:	f008 f8c8 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8012dd4:	9812      	ldr	r0, [sp, #72]	; 0x48
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012dd6:	9914      	ldr	r1, [sp, #80]	; 0x50
 8012dd8:	1a09      	subs	r1, r1, r0
	if (__p)
 8012dda:	b108      	cbz	r0, 8012de0 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0xde>
 8012ddc:	f008 f8c2 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8012de0:	980b      	ldr	r0, [sp, #44]	; 0x2c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012de2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012de4:	1a09      	subs	r1, r1, r0
	if (__p)
 8012de6:	b108      	cbz	r0, 8012dec <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0xea>
 8012de8:	f008 f8bc 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8012dec:	9807      	ldr	r0, [sp, #28]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012dee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012df0:	1a09      	subs	r1, r1, r0
	if (__p)
 8012df2:	b108      	cbz	r0, 8012df8 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0xf6>
 8012df4:	f008 f8b6 	bl	801af64 <_ZdlPvj>
}
 8012df8:	4620      	mov	r0, r4
 8012dfa:	b02d      	add	sp, #180	; 0xb4
 8012dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e00:	46aa      	mov	sl, r5
 8012e02:	f81a 3b04 	ldrb.w	r3, [sl], #4
 8012e06:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012e0a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8012e0e:	686a      	ldr	r2, [r5, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012e10:	2300      	movs	r3, #0
 8012e12:	931c      	str	r3, [sp, #112]	; 0x70
 8012e14:	931d      	str	r3, [sp, #116]	; 0x74
 8012e16:	931e      	str	r3, [sp, #120]	; 0x78
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012e18:	ebb1 0902 	subs.w	r9, r1, r2
 8012e1c:	f000 808e 	beq.w	8012f3c <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x23a>
	if (__n > this->_M_max_size())
 8012e20:	4599      	cmp	r9, r3
 8012e22:	f2c0 8089 	blt.w	8012f38 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x236>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012e26:	4648      	mov	r0, r9
 8012e28:	f008 f8b2 	bl	801af90 <_Znwj>
 8012e2c:	4680      	mov	r8, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8012e2e:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8012e32:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012e36:	eb08 0309 	add.w	r3, r8, r9
 8012e3a:	931e      	str	r3, [sp, #120]	; 0x78
 8012e3c:	f8da 9004 	ldr.w	r9, [sl, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8012e40:	f8cd 800c 	str.w	r8, [sp, #12]
      return std::__niter_wrap(__result,
 8012e44:	6868      	ldr	r0, [r5, #4]
 8012e46:	f7ee fe36 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8012e4a:	4682      	mov	sl, r0
 8012e4c:	4648      	mov	r0, r9
 8012e4e:	f7ee fe32 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8012e52:	ebb0 090a 	subs.w	r9, r0, sl
 8012e56:	d174      	bne.n	8012f42 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x240>
	  return __result + _Num;
 8012e58:	9803      	ldr	r0, [sp, #12]
 8012e5a:	4448      	add	r0, r9
	this->_M_impl._M_finish =
 8012e5c:	901d      	str	r0, [sp, #116]	; 0x74
 8012e5e:	7c2b      	ldrb	r3, [r5, #16]
 8012e60:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8012e64:	7c6b      	ldrb	r3, [r5, #17]
 8012e66:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8012e6a:	ab04      	add	r3, sp, #16
 8012e6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012e70:	9020      	str	r0, [sp, #128]	; 0x80
 8012e72:	f8ad 1084 	strh.w	r1, [sp, #132]	; 0x84
 8012e76:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8012e7a:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
 8012e7e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8012e82:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 8012e86:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8012e8a:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012e8e:	9d08      	ldr	r5, [sp, #32]
 8012e90:	9a07      	ldr	r2, [sp, #28]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012e92:	2300      	movs	r3, #0
 8012e94:	9323      	str	r3, [sp, #140]	; 0x8c
 8012e96:	9324      	str	r3, [sp, #144]	; 0x90
 8012e98:	9325      	str	r3, [sp, #148]	; 0x94
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012e9a:	1aad      	subs	r5, r5, r2
 8012e9c:	d059      	beq.n	8012f52 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x250>
	if (__n > this->_M_max_size())
 8012e9e:	429d      	cmp	r5, r3
 8012ea0:	db55      	blt.n	8012f4e <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x24c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012ea2:	4628      	mov	r0, r5
 8012ea4:	f008 f874 	bl	801af90 <_Znwj>
 8012ea8:	4680      	mov	r8, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8012eaa:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8012eae:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012eb2:	4445      	add	r5, r8
 8012eb4:	9525      	str	r5, [sp, #148]	; 0x94
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8012eb6:	46c1      	mov	r9, r8
      return std::__niter_wrap(__result,
 8012eb8:	9807      	ldr	r0, [sp, #28]
 8012eba:	f7ee fdfc 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8012ebe:	4605      	mov	r5, r0
 8012ec0:	9808      	ldr	r0, [sp, #32]
 8012ec2:	f7ee fdf8 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8012ec6:	ebb0 0a05 	subs.w	sl, r0, r5
 8012eca:	d145      	bne.n	8012f58 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x256>
	  return __result + _Num;
 8012ecc:	eb09 000a 	add.w	r0, r9, sl
	this->_M_impl._M_finish =
 8012ed0:	9024      	str	r0, [sp, #144]	; 0x90
 8012ed2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012ed6:	9026      	str	r0, [sp, #152]	; 0x98
 8012ed8:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
 8012edc:	79a3      	ldrb	r3, [r4, #6]
 8012ede:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
 8012ee2:	79e3      	ldrb	r3, [r4, #7]
 8012ee4:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 8012ee8:	7a23      	ldrb	r3, [r4, #8]
 8012eea:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
 8012eee:	f104 010c 	add.w	r1, r4, #12
 8012ef2:	a829      	add	r0, sp, #164	; 0xa4
 8012ef4:	f7fd febb 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		return ProcessRead<T>(message, response, response_content, element, start_index);
 8012ef8:	f8cd b004 	str.w	fp, [sp, #4]
 8012efc:	ab26      	add	r3, sp, #152	; 0x98
 8012efe:	9300      	str	r3, [sp, #0]
 8012f00:	ab20      	add	r3, sp, #128	; 0x80
 8012f02:	463a      	mov	r2, r7
 8012f04:	a91b      	add	r1, sp, #108	; 0x6c
 8012f06:	4630      	mov	r0, r6
 8012f08:	f7ff fae3 	bl	80124d2 <_ZN13Communication11ProcessReadIhEEt13MessageHeaderPS1_14MessageElementS3_t>
 8012f0c:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8012f0e:	9829      	ldr	r0, [sp, #164]	; 0xa4
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012f10:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012f12:	1a09      	subs	r1, r1, r0
	if (__p)
 8012f14:	b108      	cbz	r0, 8012f1a <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x218>
	::operator delete(__p
 8012f16:	f008 f825 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8012f1a:	9823      	ldr	r0, [sp, #140]	; 0x8c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012f1c:	9925      	ldr	r1, [sp, #148]	; 0x94
 8012f1e:	1a09      	subs	r1, r1, r0
	if (__p)
 8012f20:	b108      	cbz	r0, 8012f26 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x224>
 8012f22:	f008 f81f 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8012f26:	981c      	ldr	r0, [sp, #112]	; 0x70
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012f28:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012f2a:	1a09      	subs	r1, r1, r0
	if (__p)
 8012f2c:	2800      	cmp	r0, #0
 8012f2e:	f43f af5d 	beq.w	8012dec <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0xea>
 8012f32:	f008 f817 	bl	801af64 <_ZdlPvj>
 8012f36:	e759      	b.n	8012dec <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0xea>
	  std::__throw_bad_alloc();
 8012f38:	f008 f8d8 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012f3c:	f04f 0800 	mov.w	r8, #0
 8012f40:	e775      	b.n	8012e2e <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x12c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8012f42:	464a      	mov	r2, r9
 8012f44:	4651      	mov	r1, sl
 8012f46:	4640      	mov	r0, r8
 8012f48:	f008 fce0 	bl	801b90c <memmove>
 8012f4c:	e784      	b.n	8012e58 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x156>
 8012f4e:	f008 f8cd 	bl	801b0ec <_ZSt17__throw_bad_allocv>
 8012f52:	f04f 0800 	mov.w	r8, #0
 8012f56:	e7a8      	b.n	8012eaa <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x1a8>
 8012f58:	4652      	mov	r2, sl
 8012f5a:	4629      	mov	r1, r5
 8012f5c:	4640      	mov	r0, r8
 8012f5e:	f008 fcd5 	bl	801b90c <memmove>
 8012f62:	e7b3      	b.n	8012ecc <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt+0x1ca>

08012f64 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    { return __it.base(); }
 8012f64:	4770      	bx	lr

08012f66 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8012f66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f6a:	b0b9      	sub	sp, #228	; 0xe4
 8012f6c:	af02      	add	r7, sp, #8
 8012f6e:	4605      	mov	r5, r0
 8012f70:	4692      	mov	sl, r2
 8012f72:	461c      	mov	r4, r3
 8012f74:	f8d7 6100 	ldr.w	r6, [r7, #256]	; 0x100
 8012f78:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8012f7c:	617b      	str	r3, [r7, #20]
	if (not element.element_register.isArray) {
 8012f7e:	78f3      	ldrb	r3, [r6, #3]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d033      	beq.n	8012fec <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x86>
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8012f84:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 8012f88:	f1b8 0f00 	cmp.w	r8, #0
 8012f8c:	f040 8119 	bne.w	80131c2 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x25c>
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8012f90:	88b3      	ldrh	r3, [r6, #4]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d148      	bne.n	8013028 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0xc2>
	return *(this->_M_impl._M_start + __n);
 8012f96:	f851 3f04 	ldr.w	r3, [r1, #4]!
		length_to_extract = message.payload[start_index];
 8012f9a:	697a      	ldr	r2, [r7, #20]
 8012f9c:	f813 8002 	ldrb.w	r8, [r3, r2]
		start_index++;
 8012fa0:	1c50      	adds	r0, r2, #1
 8012fa2:	b283      	uxth	r3, r0
 8012fa4:	617b      	str	r3, [r7, #20]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012fa6:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8012faa:	f7fd fe60 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012fae:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8012fb2:	9301      	str	r3, [sp, #4]
 8012fb4:	f8cd 8000 	str.w	r8, [sp]
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012fbe:	4629      	mov	r1, r5
 8012fc0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012fc4:	f7fe fb72 	bl	80116ac <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb>
	_M_deallocate(_M_impl._M_start,
 8012fc8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012fca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012fcc:	1a09      	subs	r1, r1, r0
	if (__p)
 8012fce:	b108      	cbz	r0, 8012fd4 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x6e>
	::operator delete(__p
 8012fd0:	f007 ffc8 	bl	801af64 <_ZdlPvj>
		if (success)
 8012fd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	f040 8123 	bne.w	8013224 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x2be>
	_M_deallocate(_M_impl._M_start,
 8012fde:	6a78      	ldr	r0, [r7, #36]	; 0x24
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012fe0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012fe2:	1a09      	subs	r1, r1, r0
	if (__p)
 8012fe4:	b300      	cbz	r0, 8013028 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0xc2>
 8012fe6:	f007 ffbd 	bl	801af64 <_ZdlPvj>
 8012fea:	e01d      	b.n	8013028 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0xc2>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8012fec:	3104      	adds	r1, #4
 8012fee:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8012ff2:	f7fd fe3c 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012ff6:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8012ffa:	697a      	ldr	r2, [r7, #20]
 8012ffc:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8013000:	4628      	mov	r0, r5
 8013002:	f7fc fa92 	bl	800f52a <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb>
 8013006:	6278      	str	r0, [r7, #36]	; 0x24
	_M_deallocate(_M_impl._M_start,
 8013008:	6b78      	ldr	r0, [r7, #52]	; 0x34
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801300a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801300c:	1a09      	subs	r1, r1, r0
	if (__p)
 801300e:	b108      	cbz	r0, 8013014 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0xae>
 8013010:	f007 ffa8 	bl	801af64 <_ZdlPvj>
		val = (uint8_t) value;
 8013014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013016:	f885 3020 	strb.w	r3, [r5, #32]
		if (success)
 801301a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801301e:	2b00      	cmp	r3, #0
 8013020:	f040 80c3 	bne.w	80131aa <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x244>
		length_to_extract = 1;
 8013024:	f04f 0801 	mov.w	r8, #1
	succ = success;
 8013028:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801302c:	712b      	strb	r3, [r5, #4]
 801302e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013032:	60a8      	str	r0, [r5, #8]
 8013034:	81a9      	strh	r1, [r5, #12]
 8013036:	79b2      	ldrb	r2, [r6, #6]
 8013038:	73aa      	strb	r2, [r5, #14]
 801303a:	79f2      	ldrb	r2, [r6, #7]
 801303c:	73ea      	strb	r2, [r5, #15]
 801303e:	7a32      	ldrb	r2, [r6, #8]
 8013040:	742a      	strb	r2, [r5, #16]
 8013042:	f106 010c 	add.w	r1, r6, #12
 8013046:	f105 0014 	add.w	r0, r5, #20
 801304a:	f7fd fe40 	bl	8010cce <_ZNSt6vectorIhSaIhEEaSERKS1_>
	if (success)
 801304e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013052:	2b00      	cmp	r3, #0
 8013054:	f000 8132 	beq.w	80132bc <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x356>
		response_content.data = std::vector<uint8_t>{OK};
 8013058:	f104 090c 	add.w	r9, r4, #12
 801305c:	2600      	movs	r6, #0
 801305e:	f887 6078 	strb.w	r6, [r7, #120]	; 0x78
 8013062:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013066:	673b      	str	r3, [r7, #112]	; 0x70
 8013068:	2301      	movs	r3, #1
 801306a:	677b      	str	r3, [r7, #116]	; 0x74
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801306c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013070:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8013074:	c903      	ldmia	r1, {r0, r1}
 8013076:	e882 0003 	stmia.w	r2, {r0, r1}
	: _M_start(), _M_finish(), _M_end_of_storage()
 801307a:	667e      	str	r6, [r7, #100]	; 0x64
 801307c:	66be      	str	r6, [r7, #104]	; 0x68
 801307e:	66fe      	str	r6, [r7, #108]	; 0x6c
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013080:	4618      	mov	r0, r3
 8013082:	f007 ff85 	bl	801af90 <_Znwj>
 8013086:	4602      	mov	r2, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8013088:	6678      	str	r0, [r7, #100]	; 0x64
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801308a:	f100 0c01 	add.w	ip, r0, #1
 801308e:	f8c7 c06c 	str.w	ip, [r7, #108]	; 0x6c
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8013092:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8013096:	7003      	strb	r3, [r0, #0]
	  this->_M_impl._M_finish =
 8013098:	f8c7 c068 	str.w	ip, [r7, #104]	; 0x68
	: _M_start(), _M_finish(), _M_end_of_storage()
 801309c:	61be      	str	r6, [r7, #24]
 801309e:	61fe      	str	r6, [r7, #28]
 80130a0:	623e      	str	r6, [r7, #32]
 80130a2:	627e      	str	r6, [r7, #36]	; 0x24
 80130a4:	62be      	str	r6, [r7, #40]	; 0x28
 80130a6:	62fe      	str	r6, [r7, #44]	; 0x2c
	  _M_start = __x._M_start;
 80130a8:	68e0      	ldr	r0, [r4, #12]
 80130aa:	6278      	str	r0, [r7, #36]	; 0x24
	  _M_finish = __x._M_finish;
 80130ac:	f8d9 e004 	ldr.w	lr, [r9, #4]
 80130b0:	f8c7 e028 	str.w	lr, [r7, #40]	; 0x28
	  _M_end_of_storage = __x._M_end_of_storage;
 80130b4:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80130b8:	62f9      	str	r1, [r7, #44]	; 0x2c
	  _M_start = __x._M_start;
 80130ba:	60e2      	str	r2, [r4, #12]
	  _M_finish = __x._M_finish;
 80130bc:	f8c9 c004 	str.w	ip, [r9, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80130c0:	f8c9 c008 	str.w	ip, [r9, #8]
	  _M_start = __x._M_start;
 80130c4:	6678      	str	r0, [r7, #100]	; 0x64
	  _M_finish = __x._M_finish;
 80130c6:	f8c7 e068 	str.w	lr, [r7, #104]	; 0x68
	  _M_end_of_storage = __x._M_end_of_storage;
 80130ca:	66f9      	str	r1, [r7, #108]	; 0x6c
	: _M_start(), _M_finish(), _M_end_of_storage()
 80130cc:	627e      	str	r6, [r7, #36]	; 0x24
 80130ce:	62be      	str	r6, [r7, #40]	; 0x28
 80130d0:	62fe      	str	r6, [r7, #44]	; 0x2c
	  _M_start = __x._M_start;
 80130d2:	61b8      	str	r0, [r7, #24]
	  _M_finish = __x._M_finish;
 80130d4:	f8c7 e01c 	str.w	lr, [r7, #28]
	  _M_end_of_storage = __x._M_end_of_storage;
 80130d8:	6239      	str	r1, [r7, #32]
	  _M_start = __x._M_start;
 80130da:	667e      	str	r6, [r7, #100]	; 0x64
	  _M_finish = __x._M_finish;
 80130dc:	66be      	str	r6, [r7, #104]	; 0x68
	  _M_end_of_storage = __x._M_end_of_storage;
 80130de:	66fe      	str	r6, [r7, #108]	; 0x6c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80130e0:	1a09      	subs	r1, r1, r0
	if (__p)
 80130e2:	b108      	cbz	r0, 80130e8 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x182>
	::operator delete(__p
 80130e4:	f007 ff3e 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80130e8:	6e78      	ldr	r0, [r7, #100]	; 0x64
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80130ea:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80130ec:	1a09      	subs	r1, r1, r0
	if (__p)
 80130ee:	b108      	cbz	r0, 80130f4 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x18e>
 80130f0:	f007 ff38 	bl	801af64 <_ZdlPvj>
 80130f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80130f8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80130fc:	f8a7 1098 	strh.w	r1, [r7, #152]	; 0x98
 8013100:	79a3      	ldrb	r3, [r4, #6]
 8013102:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8013106:	79e3      	ldrb	r3, [r4, #7]
 8013108:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 801310c:	7a23      	ldrb	r3, [r4, #8]
 801310e:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
 8013112:	f104 0b0c 	add.w	fp, r4, #12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013116:	f8db 6004 	ldr.w	r6, [fp, #4]
 801311a:	68e2      	ldr	r2, [r4, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801311c:	2300      	movs	r3, #0
 801311e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8013122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8013126:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801312a:	1ab6      	subs	r6, r6, r2
 801312c:	f000 8122 	beq.w	8013374 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x40e>
	if (__n > this->_M_max_size())
 8013130:	429e      	cmp	r6, r3
 8013132:	f2c0 811d 	blt.w	8013370 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x40a>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013136:	4630      	mov	r0, r6
 8013138:	f007 ff2a 	bl	801af90 <_Znwj>
 801313c:	4681      	mov	r9, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 801313e:	f8c7 90a0 	str.w	r9, [r7, #160]	; 0xa0
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8013142:	f8c7 90a4 	str.w	r9, [r7, #164]	; 0xa4
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013146:	444e      	add	r6, r9
 8013148:	f8c7 60a8 	str.w	r6, [r7, #168]	; 0xa8
      : _M_current(__i) { }
 801314c:	f8db 6004 	ldr.w	r6, [fp, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8013150:	f8c7 9010 	str.w	r9, [r7, #16]
      return std::__niter_wrap(__result,
 8013154:	68e0      	ldr	r0, [r4, #12]
 8013156:	f7ee fcae 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 801315a:	4683      	mov	fp, r0
 801315c:	4630      	mov	r0, r6
 801315e:	f7ee fcaa 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8013162:	ebb0 060b 	subs.w	r6, r0, fp
 8013166:	f040 8108 	bne.w	801337a <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x414>
	  return __result + _Num;
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	4433      	add	r3, r6
	this->_M_impl._M_finish =
 801316e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (not BuildPayload(response, response_content)) { // if no space available, send the data and then rebuild a new response
 8013172:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8013176:	4651      	mov	r1, sl
 8013178:	4628      	mov	r0, r5
 801317a:	f7ff f885 	bl	8012288 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 801317e:	4606      	mov	r6, r0
	_M_deallocate(_M_impl._M_start,
 8013180:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013184:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8013188:	1a09      	subs	r1, r1, r0
	if (__p)
 801318a:	b108      	cbz	r0, 8013190 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x22a>
	::operator delete(__p
 801318c:	f007 feea 	bl	801af64 <_ZdlPvj>
 8013190:	2e00      	cmp	r6, #0
 8013192:	f000 80f8 	beq.w	8013386 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x420>
	return start_index + sizeof(T) * length_to_extract;
 8013196:	ea4f 0088 	mov.w	r0, r8, lsl #2
 801319a:	b280      	uxth	r0, r0
 801319c:	697b      	ldr	r3, [r7, #20]
 801319e:	4403      	add	r3, r0
}
 80131a0:	b298      	uxth	r0, r3
 80131a2:	37dc      	adds	r7, #220	; 0xdc
 80131a4:	46bd      	mov	sp, r7
 80131a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 80131aa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80131ac:	8831      	ldrh	r1, [r6, #0]
 80131ae:	2301      	movs	r3, #1
 80131b0:	9300      	str	r3, [sp, #0]
 80131b2:	2300      	movs	r3, #0
 80131b4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80131b8:	f7fd fa64 	bl	8010684 <_ZN9Registers13WriteRegisterImEEbtPT_tb>
 80131bc:	f887 0033 	strb.w	r0, [r7, #51]	; 0x33
 80131c0:	e730      	b.n	8013024 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0xbe>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 80131c2:	46eb      	mov	fp, sp
		T values[length_to_extract];
 80131c4:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80131c8:	3307      	adds	r3, #7
 80131ca:	08db      	lsrs	r3, r3, #3
 80131cc:	ebab 03c3 	sub.w	r3, fp, r3, lsl #3
 80131d0:	469d      	mov	sp, r3
 80131d2:	f10d 0908 	add.w	r9, sp, #8
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 80131d6:	3104      	adds	r1, #4
 80131d8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80131dc:	f7fd fd47 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80131e0:	f107 0333 	add.w	r3, r7, #51	; 0x33
 80131e4:	9301      	str	r3, [sp, #4]
 80131e6:	f8cd 8000 	str.w	r8, [sp]
 80131ea:	697b      	ldr	r3, [r7, #20]
 80131ec:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80131f0:	4649      	mov	r1, r9
 80131f2:	4628      	mov	r0, r5
 80131f4:	f7fd fec2 	bl	8010f7c <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb>
	_M_deallocate(_M_impl._M_start,
 80131f8:	6c38      	ldr	r0, [r7, #64]	; 0x40
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80131fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80131fc:	1a09      	subs	r1, r1, r0
	if (__p)
 80131fe:	b108      	cbz	r0, 8013204 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x29e>
 8013200:	f007 feb0 	bl	801af64 <_ZdlPvj>
		if (success)
 8013204:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013208:	b90b      	cbnz	r3, 801320e <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x2a8>
 801320a:	46dd      	mov	sp, fp
			success = registers->WriteRegister<T>(element.element_register.address, values);
 801320c:	e70c      	b.n	8013028 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0xc2>
 801320e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8013210:	8831      	ldrh	r1, [r6, #0]
 8013212:	2301      	movs	r3, #1
 8013214:	9300      	str	r3, [sp, #0]
 8013216:	2300      	movs	r3, #0
 8013218:	464a      	mov	r2, r9
 801321a:	f7fd fa33 	bl	8010684 <_ZN9Registers13WriteRegisterImEEbtPT_tb>
 801321e:	f887 0033 	strb.w	r0, [r7, #51]	; 0x33
 8013222:	e7f2      	b.n	801320a <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x2a4>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 8013224:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013226:	613b      	str	r3, [r7, #16]
 8013228:	8833      	ldrh	r3, [r6, #0]
 801322a:	60fb      	str	r3, [r7, #12]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801322e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013230:	eba3 0902 	sub.w	r9, r3, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013234:	2300      	movs	r3, #0
 8013236:	65bb      	str	r3, [r7, #88]	; 0x58
 8013238:	65fb      	str	r3, [r7, #92]	; 0x5c
 801323a:	663b      	str	r3, [r7, #96]	; 0x60
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801323c:	ea5f 09a9 	movs.w	r9, r9, asr #2
 8013240:	d039      	beq.n	80132b6 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x350>
	if (__n > this->_M_max_size())
 8013242:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
 8013246:	d234      	bcs.n	80132b2 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x34c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013248:	ea4f 0089 	mov.w	r0, r9, lsl #2
 801324c:	f007 fea0 	bl	801af90 <_Znwj>
 8013250:	4683      	mov	fp, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8013252:	f8c7 b058 	str.w	fp, [r7, #88]	; 0x58
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8013256:	f8c7 b05c 	str.w	fp, [r7, #92]	; 0x5c
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801325a:	eb0b 0389 	add.w	r3, fp, r9, lsl #2
 801325e:	663b      	str	r3, [r7, #96]	; 0x60
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8013260:	f8c7 b008 	str.w	fp, [r7, #8]
      return std::__niter_wrap(__result,
 8013264:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013266:	f7ff fe7d 	bl	8012f64 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 801326a:	4681      	mov	r9, r0
 801326c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801326e:	f7ff fe79 	bl	8012f64 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  const ptrdiff_t _Num = __last - __first;
 8013272:	eba0 0309 	sub.w	r3, r0, r9
 8013276:	607b      	str	r3, [r7, #4]
	  if (_Num)
 8013278:	4581      	cmp	r9, r0
 801327a:	d004      	beq.n	8013286 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x320>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801327c:	461a      	mov	r2, r3
 801327e:	4649      	mov	r1, r9
 8013280:	4658      	mov	r0, fp
 8013282:	f008 fb43 	bl	801b90c <memmove>
	  return __result + _Num;
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	687a      	ldr	r2, [r7, #4]
 801328a:	4413      	add	r3, r2
	this->_M_impl._M_finish =
 801328c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801328e:	2301      	movs	r3, #1
 8013290:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013294:	68f9      	ldr	r1, [r7, #12]
 8013296:	6938      	ldr	r0, [r7, #16]
 8013298:	f7fd face 	bl	8010838 <_ZN9Registers19WriteVectorRegisterImEEbtSt6vectorIT_SaIS2_EEb>
 801329c:	f887 0033 	strb.w	r0, [r7, #51]	; 0x33
	_M_deallocate(_M_impl._M_start,
 80132a0:	6db8      	ldr	r0, [r7, #88]	; 0x58
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80132a2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80132a4:	1a09      	subs	r1, r1, r0
	if (__p)
 80132a6:	2800      	cmp	r0, #0
 80132a8:	f43f ae99 	beq.w	8012fde <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x78>
	::operator delete(__p
 80132ac:	f007 fe5a 	bl	801af64 <_ZdlPvj>
 80132b0:	e695      	b.n	8012fde <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x78>
	  std::__throw_bad_alloc();
 80132b2:	f007 ff1b 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80132b6:	f04f 0b00 	mov.w	fp, #0
 80132ba:	e7ca      	b.n	8013252 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x2ec>
		response_content.data = std::vector<uint8_t>{ERROR};
 80132bc:	f104 090c 	add.w	r9, r4, #12
 80132c0:	23ff      	movs	r3, #255	; 0xff
 80132c2:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 80132c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80132ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80132ce:	2301      	movs	r3, #1
 80132d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80132d4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80132d8:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80132dc:	c903      	ldmia	r1, {r0, r1}
 80132de:	e882 0003 	stmia.w	r2, {r0, r1}
	: _M_start(), _M_finish(), _M_end_of_storage()
 80132e2:	2600      	movs	r6, #0
 80132e4:	67fe      	str	r6, [r7, #124]	; 0x7c
 80132e6:	f8c7 6080 	str.w	r6, [r7, #128]	; 0x80
 80132ea:	f8c7 6084 	str.w	r6, [r7, #132]	; 0x84
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80132ee:	4618      	mov	r0, r3
 80132f0:	f007 fe4e 	bl	801af90 <_Znwj>
 80132f4:	4602      	mov	r2, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80132f6:	67f8      	str	r0, [r7, #124]	; 0x7c
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80132f8:	f100 0c01 	add.w	ip, r0, #1
 80132fc:	f8c7 c084 	str.w	ip, [r7, #132]	; 0x84
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8013300:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8013304:	7003      	strb	r3, [r0, #0]
	  this->_M_impl._M_finish =
 8013306:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
	: _M_start(), _M_finish(), _M_end_of_storage()
 801330a:	61be      	str	r6, [r7, #24]
 801330c:	61fe      	str	r6, [r7, #28]
 801330e:	623e      	str	r6, [r7, #32]
 8013310:	627e      	str	r6, [r7, #36]	; 0x24
 8013312:	62be      	str	r6, [r7, #40]	; 0x28
 8013314:	62fe      	str	r6, [r7, #44]	; 0x2c
	  _M_start = __x._M_start;
 8013316:	68e0      	ldr	r0, [r4, #12]
 8013318:	6278      	str	r0, [r7, #36]	; 0x24
	  _M_finish = __x._M_finish;
 801331a:	f8d9 e004 	ldr.w	lr, [r9, #4]
 801331e:	f8c7 e028 	str.w	lr, [r7, #40]	; 0x28
	  _M_end_of_storage = __x._M_end_of_storage;
 8013322:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8013326:	62f9      	str	r1, [r7, #44]	; 0x2c
	  _M_start = __x._M_start;
 8013328:	60e2      	str	r2, [r4, #12]
	  _M_finish = __x._M_finish;
 801332a:	f8c9 c004 	str.w	ip, [r9, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 801332e:	f8c9 c008 	str.w	ip, [r9, #8]
	  _M_start = __x._M_start;
 8013332:	67f8      	str	r0, [r7, #124]	; 0x7c
	  _M_finish = __x._M_finish;
 8013334:	f8c7 e080 	str.w	lr, [r7, #128]	; 0x80
	  _M_end_of_storage = __x._M_end_of_storage;
 8013338:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
	: _M_start(), _M_finish(), _M_end_of_storage()
 801333c:	627e      	str	r6, [r7, #36]	; 0x24
 801333e:	62be      	str	r6, [r7, #40]	; 0x28
 8013340:	62fe      	str	r6, [r7, #44]	; 0x2c
	  _M_start = __x._M_start;
 8013342:	61b8      	str	r0, [r7, #24]
	  _M_finish = __x._M_finish;
 8013344:	f8c7 e01c 	str.w	lr, [r7, #28]
	  _M_end_of_storage = __x._M_end_of_storage;
 8013348:	6239      	str	r1, [r7, #32]
	  _M_start = __x._M_start;
 801334a:	67fe      	str	r6, [r7, #124]	; 0x7c
	  _M_finish = __x._M_finish;
 801334c:	f8c7 6080 	str.w	r6, [r7, #128]	; 0x80
	  _M_end_of_storage = __x._M_end_of_storage;
 8013350:	f8c7 6084 	str.w	r6, [r7, #132]	; 0x84
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013354:	1a09      	subs	r1, r1, r0
	if (__p)
 8013356:	b108      	cbz	r0, 801335c <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x3f6>
	::operator delete(__p
 8013358:	f007 fe04 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 801335c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801335e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8013362:	1a09      	subs	r1, r1, r0
	if (__p)
 8013364:	2800      	cmp	r0, #0
 8013366:	f43f aec5 	beq.w	80130f4 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x18e>
 801336a:	f007 fdfb 	bl	801af64 <_ZdlPvj>
 801336e:	e6c1      	b.n	80130f4 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x18e>
	  std::__throw_bad_alloc();
 8013370:	f007 febc 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013374:	f04f 0900 	mov.w	r9, #0
 8013378:	e6e1      	b.n	801313e <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d8>
 801337a:	4632      	mov	r2, r6
 801337c:	4659      	mov	r1, fp
 801337e:	4648      	mov	r0, r9
 8013380:	f008 fac4 	bl	801b90c <memmove>
 8013384:	e6f1      	b.n	801316a <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x204>
 8013386:	4651      	mov	r1, sl
 8013388:	f811 3b04 	ldrb.w	r3, [r1], #4
 801338c:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8013390:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8013394:	f7fd fc6b 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8013398:	f89a 3010 	ldrb.w	r3, [sl, #16]
 801339c:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
 80133a0:	f89a 3011 	ldrb.w	r3, [sl, #17]
 80133a4:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
		Send(*response);
 80133a8:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80133ac:	4628      	mov	r0, r5
 80133ae:	f7fe fd11 	bl	8011dd4 <_ZN13Communication4SendE13MessageHeader>
	_M_deallocate(_M_impl._M_start,
 80133b2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80133b6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80133ba:	1a09      	subs	r1, r1, r0
	if (__p)
 80133bc:	b108      	cbz	r0, 80133c2 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x45c>
	::operator delete(__p
 80133be:	f007 fdd1 	bl	801af64 <_ZdlPvj>
      { _M_erase_at_end(this->_M_impl._M_start); }
 80133c2:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80133c6:	f8da 2008 	ldr.w	r2, [sl, #8]
 80133ca:	4293      	cmp	r3, r2
 80133cc:	d001      	beq.n	80133d2 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x46c>
	    this->_M_impl._M_finish = __pos;
 80133ce:	f8ca 3008 	str.w	r3, [sl, #8]
 80133d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80133d6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 80133da:	f8a7 10c4 	strh.w	r1, [r7, #196]	; 0xc4
 80133de:	79a3      	ldrb	r3, [r4, #6]
 80133e0:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
 80133e4:	79e3      	ldrb	r3, [r4, #7]
 80133e6:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 80133ea:	7a23      	ldrb	r3, [r4, #8]
 80133ec:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
 80133f0:	f104 010c 	add.w	r1, r4, #12
 80133f4:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 80133f8:	f7fd fc39 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		BuildPayload(response, response_content);
 80133fc:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8013400:	4651      	mov	r1, sl
 8013402:	4628      	mov	r0, r5
 8013404:	f7fe ff40 	bl	8012288 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
	_M_deallocate(_M_impl._M_start,
 8013408:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801340c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8013410:	1a09      	subs	r1, r1, r0
	if (__p)
 8013412:	2800      	cmp	r0, #0
 8013414:	f43f aebf 	beq.w	8013196 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x230>
 8013418:	f007 fda4 	bl	801af64 <_ZdlPvj>
 801341c:	e6bb      	b.n	8013196 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x230>

0801341e <_ZSt12__niter_baseIPmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    { return __it.base(); }
 801341e:	4770      	bx	lr

08013420 <_ZNSt6vectorImSaImEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 8013420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013424:	4604      	mov	r4, r0
      if (&__x != this)
 8013426:	4281      	cmp	r1, r0
 8013428:	d028      	beq.n	801347c <_ZNSt6vectorImSaImEEaSERKS1_+0x5c>
 801342a:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801342c:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8013430:	f8d1 8000 	ldr.w	r8, [r1]
 8013434:	eba9 0608 	sub.w	r6, r9, r8
 8013438:	10b0      	asrs	r0, r6, #2
      { return size_type(this->_M_impl._M_end_of_storage
 801343a:	68a3      	ldr	r3, [r4, #8]
			 - this->_M_impl._M_start); }
 801343c:	6827      	ldr	r7, [r4, #0]
 801343e:	1bdb      	subs	r3, r3, r7
	  if (__xlen > capacity())
 8013440:	42b3      	cmp	r3, r6
 8013442:	d31e      	bcc.n	8013482 <_ZNSt6vectorImSaImEEaSERKS1_+0x62>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013444:	6862      	ldr	r2, [r4, #4]
 8013446:	1bd2      	subs	r2, r2, r7
	  else if (size() >= __xlen)
 8013448:	42b2      	cmp	r2, r6
 801344a:	d33e      	bcc.n	80134ca <_ZNSt6vectorImSaImEEaSERKS1_+0xaa>
      return std::__niter_wrap(__result,
 801344c:	4640      	mov	r0, r8
 801344e:	f7ff fd89 	bl	8012f64 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8013452:	4605      	mov	r5, r0
 8013454:	4648      	mov	r0, r9
 8013456:	f7ff fd85 	bl	8012f64 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 801345a:	4680      	mov	r8, r0
 801345c:	4638      	mov	r0, r7
 801345e:	f7ff ffde 	bl	801341e <_ZSt12__niter_baseIPmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
	  const ptrdiff_t _Num = __last - __first;
 8013462:	eba8 0205 	sub.w	r2, r8, r5
	  if (_Num)
 8013466:	4545      	cmp	r5, r8
 8013468:	d002      	beq.n	8013470 <_ZNSt6vectorImSaImEEaSERKS1_+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801346a:	4629      	mov	r1, r5
 801346c:	f008 fa4e 	bl	801b90c <memmove>
    { return __from + (__res - std::__niter_base(__from)); }
 8013470:	4638      	mov	r0, r7
 8013472:	f7ff ffd4 	bl	801341e <_ZSt12__niter_baseIPmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8013476:	6823      	ldr	r3, [r4, #0]
 8013478:	4433      	add	r3, r6
 801347a:	6063      	str	r3, [r4, #4]
    }
 801347c:	4620      	mov	r0, r4
 801347e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013482:	b300      	cbz	r0, 80134c6 <_ZNSt6vectorImSaImEEaSERKS1_+0xa6>
	if (__n > this->_M_max_size())
 8013484:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8013488:	d21b      	bcs.n	80134c2 <_ZNSt6vectorImSaImEEaSERKS1_+0xa2>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801348a:	0080      	lsls	r0, r0, #2
 801348c:	f007 fd80 	bl	801af90 <_Znwj>
 8013490:	4605      	mov	r5, r0
      return std::__niter_wrap(__result,
 8013492:	4640      	mov	r0, r8
 8013494:	f7ff fd66 	bl	8012f64 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8013498:	4607      	mov	r7, r0
 801349a:	4648      	mov	r0, r9
 801349c:	f7ff fd62 	bl	8012f64 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  const ptrdiff_t _Num = __last - __first;
 80134a0:	1bc2      	subs	r2, r0, r7
	  if (_Num)
 80134a2:	4287      	cmp	r7, r0
 80134a4:	d003      	beq.n	80134ae <_ZNSt6vectorImSaImEEaSERKS1_+0x8e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80134a6:	4639      	mov	r1, r7
 80134a8:	4628      	mov	r0, r5
 80134aa:	f008 fa2f 	bl	801b90c <memmove>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80134ae:	6820      	ldr	r0, [r4, #0]
			    this->_M_impl._M_end_of_storage
 80134b0:	68a1      	ldr	r1, [r4, #8]
			    - this->_M_impl._M_start);
 80134b2:	1a09      	subs	r1, r1, r0
	if (__p)
 80134b4:	b108      	cbz	r0, 80134ba <_ZNSt6vectorImSaImEEaSERKS1_+0x9a>
	::operator delete(__p
 80134b6:	f007 fd55 	bl	801af64 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 80134ba:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80134bc:	4435      	add	r5, r6
 80134be:	60a5      	str	r5, [r4, #8]
 80134c0:	e7d9      	b.n	8013476 <_ZNSt6vectorImSaImEEaSERKS1_+0x56>
	  std::__throw_bad_alloc();
 80134c2:	f007 fe13 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80134c6:	2500      	movs	r5, #0
 80134c8:	e7e3      	b.n	8013492 <_ZNSt6vectorImSaImEEaSERKS1_+0x72>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 80134ca:	eb08 0302 	add.w	r3, r8, r2
	  if (_Num)
 80134ce:	4543      	cmp	r3, r8
 80134d0:	d003      	beq.n	80134da <_ZNSt6vectorImSaImEEaSERKS1_+0xba>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80134d2:	4641      	mov	r1, r8
 80134d4:	4638      	mov	r0, r7
 80134d6:	f008 fa19 	bl	801b90c <memmove>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80134da:	6829      	ldr	r1, [r5, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80134dc:	6860      	ldr	r0, [r4, #4]
 80134de:	6823      	ldr	r3, [r4, #0]
 80134e0:	1ac3      	subs	r3, r0, r3
 80134e2:	4419      	add	r1, r3
					  __x._M_impl._M_finish,
 80134e4:	686b      	ldr	r3, [r5, #4]
	  const ptrdiff_t _Num = __last - __first;
 80134e6:	1a5a      	subs	r2, r3, r1
	  if (_Num)
 80134e8:	4299      	cmp	r1, r3
 80134ea:	d0c4      	beq.n	8013476 <_ZNSt6vectorImSaImEEaSERKS1_+0x56>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80134ec:	f008 fa0e 	bl	801b90c <memmove>
    { return std::uninitialized_copy(__first, __last, __result); }
 80134f0:	e7c1      	b.n	8013476 <_ZNSt6vectorImSaImEEaSERKS1_+0x56>
	...

080134f4 <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_>:
std::vector<T> Communication::BuildTVector(MessageElement element, T* data) {
 80134f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134f8:	b090      	sub	sp, #64	; 0x40
 80134fa:	4604      	mov	r4, r0
 80134fc:	461d      	mov	r5, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 80134fe:	2300      	movs	r3, #0
 8013500:	6003      	str	r3, [r0, #0]
 8013502:	6043      	str	r3, [r0, #4]
 8013504:	6083      	str	r3, [r0, #8]
	if (not element.element_register.isArray) {// single case
 8013506:	78d3      	ldrb	r3, [r2, #3]
 8013508:	b153      	cbz	r3, 8013520 <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x2c>
	} else if (element.element_register.isArray && element.element_register.length > 0) // array case
 801350a:	8890      	ldrh	r0, [r2, #4]
 801350c:	2800      	cmp	r0, #0
 801350e:	d164      	bne.n	80135da <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0xe6>
	else if (element.element_register.isArray && element.element_register.length == 0) // vector case
 8013510:	8893      	ldrh	r3, [r2, #4]
 8013512:	2b00      	cmp	r3, #0
 8013514:	f000 80a4 	beq.w	8013660 <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x16c>
}
 8013518:	4620      	mov	r0, r4
 801351a:	b010      	add	sp, #64	; 0x40
 801351c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		vector = std::vector<T>{*data}; // what-if array / vector / ... transform in uint8_t whatever it is
 8013520:	682b      	ldr	r3, [r5, #0]
 8013522:	930c      	str	r3, [sp, #48]	; 0x30
 8013524:	ab0c      	add	r3, sp, #48	; 0x30
 8013526:	930a      	str	r3, [sp, #40]	; 0x28
 8013528:	2301      	movs	r3, #1
 801352a:	930b      	str	r3, [sp, #44]	; 0x2c
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801352c:	ab04      	add	r3, sp, #16
 801352e:	aa0a      	add	r2, sp, #40	; 0x28
 8013530:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013534:	e883 0003 	stmia.w	r3, {r0, r1}
 8013538:	2300      	movs	r3, #0
 801353a:	9307      	str	r3, [sp, #28]
 801353c:	9308      	str	r3, [sp, #32]
 801353e:	9309      	str	r3, [sp, #36]	; 0x24
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8013540:	4606      	mov	r6, r0

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8013542:	eb00 0881 	add.w	r8, r0, r1, lsl #2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8013546:	008f      	lsls	r7, r1, #2
 8013548:	f341 001d 	sbfx	r0, r1, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 801354c:	4a47      	ldr	r2, [pc, #284]	; (801366c <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x178>)
 801354e:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
 8013552:	d33b      	bcc.n	80135cc <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0xd8>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013554:	2800      	cmp	r0, #0
 8013556:	d03e      	beq.n	80135d6 <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0xe2>
	if (__n > this->_M_max_size())
 8013558:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 801355c:	d239      	bcs.n	80135d2 <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0xde>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801355e:	0080      	lsls	r0, r0, #2
 8013560:	f007 fd16 	bl	801af90 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8013564:	9007      	str	r0, [sp, #28]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013566:	19c5      	adds	r5, r0, r7
 8013568:	9509      	str	r5, [sp, #36]	; 0x24
	  if (_Num)
 801356a:	4546      	cmp	r6, r8
 801356c:	d003      	beq.n	8013576 <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x82>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801356e:	463a      	mov	r2, r7
 8013570:	4631      	mov	r1, r6
 8013572:	f008 f9cb 	bl	801b90c <memmove>
	  this->_M_impl._M_finish =
 8013576:	9508      	str	r5, [sp, #32]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013578:	2300      	movs	r3, #0
 801357a:	9301      	str	r3, [sp, #4]
 801357c:	9302      	str	r3, [sp, #8]
 801357e:	9303      	str	r3, [sp, #12]
 8013580:	9304      	str	r3, [sp, #16]
 8013582:	9305      	str	r3, [sp, #20]
 8013584:	9306      	str	r3, [sp, #24]
	  _M_start = __x._M_start;
 8013586:	6820      	ldr	r0, [r4, #0]
 8013588:	9004      	str	r0, [sp, #16]
	  _M_finish = __x._M_finish;
 801358a:	6862      	ldr	r2, [r4, #4]
 801358c:	9205      	str	r2, [sp, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
 801358e:	68a1      	ldr	r1, [r4, #8]
 8013590:	9106      	str	r1, [sp, #24]
	  _M_start = __x._M_start;
 8013592:	9e07      	ldr	r6, [sp, #28]
 8013594:	6026      	str	r6, [r4, #0]
	  _M_finish = __x._M_finish;
 8013596:	6065      	str	r5, [r4, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8013598:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801359a:	60a5      	str	r5, [r4, #8]
	  _M_start = __x._M_start;
 801359c:	9007      	str	r0, [sp, #28]
	  _M_finish = __x._M_finish;
 801359e:	9208      	str	r2, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
 80135a0:	9109      	str	r1, [sp, #36]	; 0x24
	: _M_start(), _M_finish(), _M_end_of_storage()
 80135a2:	9304      	str	r3, [sp, #16]
 80135a4:	9305      	str	r3, [sp, #20]
 80135a6:	9306      	str	r3, [sp, #24]
	  _M_start = __x._M_start;
 80135a8:	9001      	str	r0, [sp, #4]
	  _M_finish = __x._M_finish;
 80135aa:	9202      	str	r2, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 80135ac:	9103      	str	r1, [sp, #12]
	  _M_start = __x._M_start;
 80135ae:	9307      	str	r3, [sp, #28]
	  _M_finish = __x._M_finish;
 80135b0:	9308      	str	r3, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
 80135b2:	9309      	str	r3, [sp, #36]	; 0x24
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80135b4:	1a09      	subs	r1, r1, r0
	if (__p)
 80135b6:	b108      	cbz	r0, 80135bc <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0xc8>
	::operator delete(__p
 80135b8:	f007 fcd4 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80135bc:	9807      	ldr	r0, [sp, #28]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80135be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80135c0:	1a09      	subs	r1, r1, r0
	if (__p)
 80135c2:	2800      	cmp	r0, #0
 80135c4:	d0a8      	beq.n	8013518 <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x24>
 80135c6:	f007 fccd 	bl	801af64 <_ZdlPvj>
 80135ca:	e7a5      	b.n	8013518 <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x24>
	  __throw_length_error(
 80135cc:	4828      	ldr	r0, [pc, #160]	; (8013670 <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x17c>)
 80135ce:	f007 fd93 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	  std::__throw_bad_alloc();
 80135d2:	f007 fd8b 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80135d6:	2000      	movs	r0, #0
 80135d8:	e7c4      	b.n	8013564 <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x70>
		vector = std::vector<T>(data, data + element.element_register.length); //  * sizeof(T)
 80135da:	eb05 0880 	add.w	r8, r5, r0, lsl #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 80135de:	2300      	movs	r3, #0
 80135e0:	930d      	str	r3, [sp, #52]	; 0x34
 80135e2:	930e      	str	r3, [sp, #56]	; 0x38
 80135e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80135e6:	0087      	lsls	r7, r0, #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80135e8:	2800      	cmp	r0, #0
 80135ea:	d037      	beq.n	801365c <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x168>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80135ec:	4638      	mov	r0, r7
 80135ee:	f007 fccf 	bl	801af90 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80135f2:	900d      	str	r0, [sp, #52]	; 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80135f4:	19c6      	adds	r6, r0, r7
 80135f6:	960f      	str	r6, [sp, #60]	; 0x3c
	  if (_Num)
 80135f8:	45a8      	cmp	r8, r5
 80135fa:	d003      	beq.n	8013604 <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x110>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80135fc:	463a      	mov	r2, r7
 80135fe:	4629      	mov	r1, r5
 8013600:	f008 f984 	bl	801b90c <memmove>
	  this->_M_impl._M_finish =
 8013604:	960e      	str	r6, [sp, #56]	; 0x38
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013606:	2300      	movs	r3, #0
 8013608:	9301      	str	r3, [sp, #4]
 801360a:	9302      	str	r3, [sp, #8]
 801360c:	9303      	str	r3, [sp, #12]
 801360e:	9304      	str	r3, [sp, #16]
 8013610:	9305      	str	r3, [sp, #20]
 8013612:	9306      	str	r3, [sp, #24]
	  _M_start = __x._M_start;
 8013614:	6820      	ldr	r0, [r4, #0]
 8013616:	9004      	str	r0, [sp, #16]
	  _M_finish = __x._M_finish;
 8013618:	6862      	ldr	r2, [r4, #4]
 801361a:	9205      	str	r2, [sp, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
 801361c:	68a1      	ldr	r1, [r4, #8]
 801361e:	9106      	str	r1, [sp, #24]
	  _M_start = __x._M_start;
 8013620:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8013622:	6025      	str	r5, [r4, #0]
	  _M_finish = __x._M_finish;
 8013624:	6066      	str	r6, [r4, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8013626:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013628:	60a5      	str	r5, [r4, #8]
	  _M_start = __x._M_start;
 801362a:	900d      	str	r0, [sp, #52]	; 0x34
	  _M_finish = __x._M_finish;
 801362c:	920e      	str	r2, [sp, #56]	; 0x38
	  _M_end_of_storage = __x._M_end_of_storage;
 801362e:	910f      	str	r1, [sp, #60]	; 0x3c
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013630:	9304      	str	r3, [sp, #16]
 8013632:	9305      	str	r3, [sp, #20]
 8013634:	9306      	str	r3, [sp, #24]
	  _M_start = __x._M_start;
 8013636:	9001      	str	r0, [sp, #4]
	  _M_finish = __x._M_finish;
 8013638:	9202      	str	r2, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 801363a:	9103      	str	r1, [sp, #12]
	  _M_start = __x._M_start;
 801363c:	930d      	str	r3, [sp, #52]	; 0x34
	  _M_finish = __x._M_finish;
 801363e:	930e      	str	r3, [sp, #56]	; 0x38
	  _M_end_of_storage = __x._M_end_of_storage;
 8013640:	930f      	str	r3, [sp, #60]	; 0x3c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013642:	1a09      	subs	r1, r1, r0
	if (__p)
 8013644:	b108      	cbz	r0, 801364a <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x156>
	::operator delete(__p
 8013646:	f007 fc8d 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 801364a:	980d      	ldr	r0, [sp, #52]	; 0x34
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801364c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801364e:	1a09      	subs	r1, r1, r0
	if (__p)
 8013650:	2800      	cmp	r0, #0
 8013652:	f43f af61 	beq.w	8013518 <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x24>
 8013656:	f007 fc85 	bl	801af64 <_ZdlPvj>
 801365a:	e75d      	b.n	8013518 <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x24>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801365c:	2000      	movs	r0, #0
 801365e:	e7c8      	b.n	80135f2 <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0xfe>
		vector = *reinterpret_cast<std::vector<T>*>(data); // TODO exit with float, to check
 8013660:	4629      	mov	r1, r5
 8013662:	4620      	mov	r0, r4
 8013664:	f7ff fedc 	bl	8013420 <_ZNSt6vectorImSaImEEaSERKS1_>
	return vector;
 8013668:	e756      	b.n	8013518 <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x24>
 801366a:	bf00      	nop
 801366c:	7ffffffc 	.word	0x7ffffffc
 8013670:	0801bdb0 	.word	0x0801bdb0

08013674 <_ZN13Communication11ReadElementImEESt6vectorIhSaIhEEP14MessageElementPb>:
std::vector<uint8_t> Communication::ReadElement(MessageElement* element, bool* success) {
 8013674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013678:	b09b      	sub	sp, #108	; 0x6c
 801367a:	4604      	mov	r4, r0
 801367c:	460e      	mov	r6, r1
 801367e:	4615      	mov	r5, r2
 8013680:	461f      	mov	r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013682:	2300      	movs	r3, #0
 8013684:	6003      	str	r3, [r0, #0]
 8013686:	6043      	str	r3, [r0, #4]
 8013688:	6083      	str	r3, [r0, #8]
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 801368a:	2301      	movs	r3, #1
 801368c:	9300      	str	r3, [sp, #0]
 801368e:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8013692:	aa0d      	add	r2, sp, #52	; 0x34
 8013694:	8829      	ldrh	r1, [r5, #0]
 8013696:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8013698:	f7fc fa98 	bl	800fbcc <_ZN9Registers12ReadRegisterImEEbtPT_Ptb>
 801369c:	7038      	strb	r0, [r7, #0]
	if (not *success)
 801369e:	b918      	cbnz	r0, 80136a8 <_ZN13Communication11ReadElementImEESt6vectorIhSaIhEEP14MessageElementPb+0x34>
}
 80136a0:	4620      	mov	r0, r4
 80136a2:	b01b      	add	sp, #108	; 0x6c
 80136a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
struct MessageElement {
 80136a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80136ac:	900e      	str	r0, [sp, #56]	; 0x38
 80136ae:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
 80136b2:	79ab      	ldrb	r3, [r5, #6]
 80136b4:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
 80136b8:	79eb      	ldrb	r3, [r5, #7]
 80136ba:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80136be:	7a2b      	ldrb	r3, [r5, #8]
 80136c0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80136c4:	f105 010c 	add.w	r1, r5, #12
 80136c8:	a811      	add	r0, sp, #68	; 0x44
 80136ca:	f7fd fad0 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 80136ce:	ab0d      	add	r3, sp, #52	; 0x34
 80136d0:	aa0e      	add	r2, sp, #56	; 0x38
 80136d2:	4631      	mov	r1, r6
 80136d4:	a809      	add	r0, sp, #36	; 0x24
 80136d6:	f7ff ff0d 	bl	80134f4 <_ZN13Communication12BuildTVectorImEESt6vectorIT_SaIS2_EE14MessageElementPS2_>
	_M_deallocate(_M_impl._M_start,
 80136da:	9811      	ldr	r0, [sp, #68]	; 0x44
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80136dc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80136de:	1a09      	subs	r1, r1, r0
	if (__p)
 80136e0:	b108      	cbz	r0, 80136e6 <_ZN13Communication11ReadElementImEESt6vectorIhSaIhEEP14MessageElementPb+0x72>
 80136e2:	f007 fc3f 	bl	801af64 <_ZdlPvj>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80136e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80136e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136ea:	1aed      	subs	r5, r5, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 80136ec:	2300      	movs	r3, #0
 80136ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80136f0:	9318      	str	r3, [sp, #96]	; 0x60
 80136f2:	9319      	str	r3, [sp, #100]	; 0x64
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80136f4:	10ad      	asrs	r5, r5, #2
 80136f6:	d05e      	beq.n	80137b6 <_ZN13Communication11ReadElementImEESt6vectorIhSaIhEEP14MessageElementPb+0x142>
	if (__n > this->_M_max_size())
 80136f8:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 80136fc:	d259      	bcs.n	80137b2 <_ZN13Communication11ReadElementImEESt6vectorIhSaIhEEP14MessageElementPb+0x13e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80136fe:	00a8      	lsls	r0, r5, #2
 8013700:	f007 fc46 	bl	801af90 <_Znwj>
 8013704:	4607      	mov	r7, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8013706:	9717      	str	r7, [sp, #92]	; 0x5c
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8013708:	9718      	str	r7, [sp, #96]	; 0x60
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801370a:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801370e:	9519      	str	r5, [sp, #100]	; 0x64
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8013710:	46b8      	mov	r8, r7
      return std::__niter_wrap(__result,
 8013712:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013714:	f7ff fc26 	bl	8012f64 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8013718:	4605      	mov	r5, r0
 801371a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801371c:	f7ff fc22 	bl	8012f64 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  const ptrdiff_t _Num = __last - __first;
 8013720:	eba0 0905 	sub.w	r9, r0, r5
	  if (_Num)
 8013724:	4285      	cmp	r5, r0
 8013726:	d004      	beq.n	8013732 <_ZN13Communication11ReadElementImEESt6vectorIhSaIhEEP14MessageElementPb+0xbe>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8013728:	464a      	mov	r2, r9
 801372a:	4629      	mov	r1, r5
 801372c:	4638      	mov	r0, r7
 801372e:	f008 f8ed 	bl	801b90c <memmove>
	  return __result + _Num;
 8013732:	eb08 0209 	add.w	r2, r8, r9
	this->_M_impl._M_finish =
 8013736:	9218      	str	r2, [sp, #96]	; 0x60
	data = BuildVector<T>(register_read_vector_cast);
 8013738:	aa17      	add	r2, sp, #92	; 0x5c
 801373a:	4631      	mov	r1, r6
 801373c:	a814      	add	r0, sp, #80	; 0x50
 801373e:	f7fe fd50 	bl	80121e2 <_ZN13Communication11BuildVectorImEESt6vectorIhSaIhEES1_IT_SaIS4_EE>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013742:	2300      	movs	r3, #0
 8013744:	9303      	str	r3, [sp, #12]
 8013746:	9304      	str	r3, [sp, #16]
 8013748:	9305      	str	r3, [sp, #20]
 801374a:	9306      	str	r3, [sp, #24]
 801374c:	9307      	str	r3, [sp, #28]
 801374e:	9308      	str	r3, [sp, #32]
	  _M_start = __x._M_start;
 8013750:	6820      	ldr	r0, [r4, #0]
 8013752:	9006      	str	r0, [sp, #24]
	  _M_finish = __x._M_finish;
 8013754:	6862      	ldr	r2, [r4, #4]
 8013756:	9207      	str	r2, [sp, #28]
	  _M_end_of_storage = __x._M_end_of_storage;
 8013758:	68a1      	ldr	r1, [r4, #8]
 801375a:	9108      	str	r1, [sp, #32]
	  _M_start = __x._M_start;
 801375c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801375e:	6025      	str	r5, [r4, #0]
	  _M_finish = __x._M_finish;
 8013760:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013762:	6065      	str	r5, [r4, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8013764:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8013766:	60a5      	str	r5, [r4, #8]
	  _M_start = __x._M_start;
 8013768:	9014      	str	r0, [sp, #80]	; 0x50
	  _M_finish = __x._M_finish;
 801376a:	9215      	str	r2, [sp, #84]	; 0x54
	  _M_end_of_storage = __x._M_end_of_storage;
 801376c:	9116      	str	r1, [sp, #88]	; 0x58
	: _M_start(), _M_finish(), _M_end_of_storage()
 801376e:	9306      	str	r3, [sp, #24]
 8013770:	9307      	str	r3, [sp, #28]
 8013772:	9308      	str	r3, [sp, #32]
	  _M_start = __x._M_start;
 8013774:	9003      	str	r0, [sp, #12]
	  _M_finish = __x._M_finish;
 8013776:	9204      	str	r2, [sp, #16]
	  _M_end_of_storage = __x._M_end_of_storage;
 8013778:	9105      	str	r1, [sp, #20]
	  _M_start = __x._M_start;
 801377a:	9314      	str	r3, [sp, #80]	; 0x50
	  _M_finish = __x._M_finish;
 801377c:	9315      	str	r3, [sp, #84]	; 0x54
	  _M_end_of_storage = __x._M_end_of_storage;
 801377e:	9316      	str	r3, [sp, #88]	; 0x58
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013780:	1a09      	subs	r1, r1, r0
	if (__p)
 8013782:	b108      	cbz	r0, 8013788 <_ZN13Communication11ReadElementImEESt6vectorIhSaIhEEP14MessageElementPb+0x114>
	::operator delete(__p
 8013784:	f007 fbee 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8013788:	9814      	ldr	r0, [sp, #80]	; 0x50
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801378a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801378c:	1a09      	subs	r1, r1, r0
	if (__p)
 801378e:	b108      	cbz	r0, 8013794 <_ZN13Communication11ReadElementImEESt6vectorIhSaIhEEP14MessageElementPb+0x120>
 8013790:	f007 fbe8 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8013794:	9817      	ldr	r0, [sp, #92]	; 0x5c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013796:	9919      	ldr	r1, [sp, #100]	; 0x64
 8013798:	1a09      	subs	r1, r1, r0
	if (__p)
 801379a:	b108      	cbz	r0, 80137a0 <_ZN13Communication11ReadElementImEESt6vectorIhSaIhEEP14MessageElementPb+0x12c>
 801379c:	f007 fbe2 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80137a0:	9809      	ldr	r0, [sp, #36]	; 0x24
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80137a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80137a4:	1a09      	subs	r1, r1, r0
	if (__p)
 80137a6:	2800      	cmp	r0, #0
 80137a8:	f43f af7a 	beq.w	80136a0 <_ZN13Communication11ReadElementImEESt6vectorIhSaIhEEP14MessageElementPb+0x2c>
 80137ac:	f007 fbda 	bl	801af64 <_ZdlPvj>
      }
 80137b0:	e776      	b.n	80136a0 <_ZN13Communication11ReadElementImEESt6vectorIhSaIhEEP14MessageElementPb+0x2c>
	  std::__throw_bad_alloc();
 80137b2:	f007 fc9b 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80137b6:	2700      	movs	r7, #0
 80137b8:	e7a5      	b.n	8013706 <_ZN13Communication11ReadElementImEESt6vectorIhSaIhEEP14MessageElementPb+0x92>

080137ba <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessRead(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 80137ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137be:	b0a2      	sub	sp, #136	; 0x88
 80137c0:	4680      	mov	r8, r0
 80137c2:	4616      	mov	r6, r2
 80137c4:	461c      	mov	r4, r3
	response_content.data = ReadElement<T>(&element, &success);
 80137c6:	f103 050c 	add.w	r5, r3, #12
 80137ca:	f10d 031f 	add.w	r3, sp, #31
 80137ce:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80137d0:	4601      	mov	r1, r0
 80137d2:	a808      	add	r0, sp, #32
 80137d4:	f7ff ff4e 	bl	8013674 <_ZN13Communication11ReadElementImEESt6vectorIhSaIhEEP14MessageElementPb>
	: _M_start(), _M_finish(), _M_end_of_storage()
 80137d8:	2300      	movs	r3, #0
 80137da:	9301      	str	r3, [sp, #4]
 80137dc:	9302      	str	r3, [sp, #8]
 80137de:	9303      	str	r3, [sp, #12]
 80137e0:	9304      	str	r3, [sp, #16]
 80137e2:	9305      	str	r3, [sp, #20]
 80137e4:	9306      	str	r3, [sp, #24]
	  _M_start = __x._M_start;
 80137e6:	68e0      	ldr	r0, [r4, #12]
 80137e8:	9004      	str	r0, [sp, #16]
	  _M_finish = __x._M_finish;
 80137ea:	686f      	ldr	r7, [r5, #4]
 80137ec:	9705      	str	r7, [sp, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
 80137ee:	68a9      	ldr	r1, [r5, #8]
 80137f0:	9106      	str	r1, [sp, #24]
	  _M_start = __x._M_start;
 80137f2:	9a08      	ldr	r2, [sp, #32]
 80137f4:	60e2      	str	r2, [r4, #12]
	  _M_finish = __x._M_finish;
 80137f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80137f8:	606a      	str	r2, [r5, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80137fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80137fc:	60aa      	str	r2, [r5, #8]
	  _M_start = __x._M_start;
 80137fe:	9008      	str	r0, [sp, #32]
	  _M_finish = __x._M_finish;
 8013800:	9709      	str	r7, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
 8013802:	910a      	str	r1, [sp, #40]	; 0x28
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013804:	9304      	str	r3, [sp, #16]
 8013806:	9305      	str	r3, [sp, #20]
 8013808:	9306      	str	r3, [sp, #24]
	  _M_start = __x._M_start;
 801380a:	9001      	str	r0, [sp, #4]
	  _M_finish = __x._M_finish;
 801380c:	9702      	str	r7, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 801380e:	9103      	str	r1, [sp, #12]
	  _M_start = __x._M_start;
 8013810:	9308      	str	r3, [sp, #32]
	  _M_finish = __x._M_finish;
 8013812:	9309      	str	r3, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
 8013814:	930a      	str	r3, [sp, #40]	; 0x28
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013816:	1a09      	subs	r1, r1, r0
	if (__p)
 8013818:	b108      	cbz	r0, 801381e <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
	::operator delete(__p
 801381a:	f007 fba3 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 801381e:	9808      	ldr	r0, [sp, #32]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013820:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013822:	1a09      	subs	r1, r1, r0
	if (__p)
 8013824:	b108      	cbz	r0, 801382a <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t+0x70>
 8013826:	f007 fb9d 	bl	801af64 <_ZdlPvj>
	if (not success) {
 801382a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d03f      	beq.n	80138b2 <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t+0xf8>
struct MessageElement {
 8013832:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013836:	9011      	str	r0, [sp, #68]	; 0x44
 8013838:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 801383c:	79a3      	ldrb	r3, [r4, #6]
 801383e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
 8013842:	79e3      	ldrb	r3, [r4, #7]
 8013844:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 8013848:	7a23      	ldrb	r3, [r4, #8]
 801384a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 801384e:	f104 090c 	add.w	r9, r4, #12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013852:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8013856:	68e2      	ldr	r2, [r4, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013858:	2300      	movs	r3, #0
 801385a:	9314      	str	r3, [sp, #80]	; 0x50
 801385c:	9315      	str	r3, [sp, #84]	; 0x54
 801385e:	9316      	str	r3, [sp, #88]	; 0x58
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013860:	1aad      	subs	r5, r5, r2
 8013862:	d070      	beq.n	8013946 <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t+0x18c>
	if (__n > this->_M_max_size())
 8013864:	429d      	cmp	r5, r3
 8013866:	db6c      	blt.n	8013942 <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t+0x188>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013868:	4628      	mov	r0, r5
 801386a:	f007 fb91 	bl	801af90 <_Znwj>
 801386e:	4607      	mov	r7, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8013870:	9714      	str	r7, [sp, #80]	; 0x50
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8013872:	9715      	str	r7, [sp, #84]	; 0x54
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013874:	443d      	add	r5, r7
 8013876:	9516      	str	r5, [sp, #88]	; 0x58
      : _M_current(__i) { }
 8013878:	f8d9 5004 	ldr.w	r5, [r9, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 801387c:	46ba      	mov	sl, r7
      return std::__niter_wrap(__result,
 801387e:	68e0      	ldr	r0, [r4, #12]
 8013880:	f7ee f919 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8013884:	4681      	mov	r9, r0
 8013886:	4628      	mov	r0, r5
 8013888:	f7ee f915 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 801388c:	ebb0 0509 	subs.w	r5, r0, r9
 8013890:	d15b      	bne.n	801394a <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t+0x190>
	  return __result + _Num;
 8013892:	4455      	add	r5, sl
	this->_M_impl._M_finish =
 8013894:	9515      	str	r5, [sp, #84]	; 0x54
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8013896:	aa11      	add	r2, sp, #68	; 0x44
 8013898:	4631      	mov	r1, r6
 801389a:	4640      	mov	r0, r8
 801389c:	f7fe fcf4 	bl	8012288 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80138a0:	4605      	mov	r5, r0
 80138a2:	2800      	cmp	r0, #0
 80138a4:	d157      	bne.n	8013956 <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t+0x19c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80138a6:	68b2      	ldr	r2, [r6, #8]
 80138a8:	6873      	ldr	r3, [r6, #4]
 80138aa:	429a      	cmp	r2, r3
 80138ac:	d054      	beq.n	8013958 <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t+0x19e>
 80138ae:	2501      	movs	r5, #1
 80138b0:	e052      	b.n	8013958 <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t+0x19e>
		response_content.command = true; // this is an error flag for a read ack
 80138b2:	2301      	movs	r3, #1
 80138b4:	71e3      	strb	r3, [r4, #7]
		response_content.data = std::vector<uint8_t>{ERROR};
 80138b6:	22ff      	movs	r2, #255	; 0xff
 80138b8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 80138bc:	aa10      	add	r2, sp, #64	; 0x40
 80138be:	920e      	str	r2, [sp, #56]	; 0x38
 80138c0:	930f      	str	r3, [sp, #60]	; 0x3c
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80138c2:	aa04      	add	r2, sp, #16
 80138c4:	a90e      	add	r1, sp, #56	; 0x38
 80138c6:	c903      	ldmia	r1, {r0, r1}
 80138c8:	e882 0003 	stmia.w	r2, {r0, r1}
	: _M_start(), _M_finish(), _M_end_of_storage()
 80138cc:	2700      	movs	r7, #0
 80138ce:	970b      	str	r7, [sp, #44]	; 0x2c
 80138d0:	970c      	str	r7, [sp, #48]	; 0x30
 80138d2:	970d      	str	r7, [sp, #52]	; 0x34
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80138d4:	4618      	mov	r0, r3
 80138d6:	f007 fb5b 	bl	801af90 <_Znwj>
 80138da:	4603      	mov	r3, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80138dc:	900b      	str	r0, [sp, #44]	; 0x2c
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80138de:	1c42      	adds	r2, r0, #1
 80138e0:	920d      	str	r2, [sp, #52]	; 0x34
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80138e2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80138e6:	7001      	strb	r1, [r0, #0]
	  this->_M_impl._M_finish =
 80138e8:	920c      	str	r2, [sp, #48]	; 0x30
	: _M_start(), _M_finish(), _M_end_of_storage()
 80138ea:	9701      	str	r7, [sp, #4]
 80138ec:	9702      	str	r7, [sp, #8]
 80138ee:	9703      	str	r7, [sp, #12]
 80138f0:	9704      	str	r7, [sp, #16]
 80138f2:	9705      	str	r7, [sp, #20]
 80138f4:	9706      	str	r7, [sp, #24]
	  _M_start = __x._M_start;
 80138f6:	68e0      	ldr	r0, [r4, #12]
 80138f8:	9004      	str	r0, [sp, #16]
	  _M_finish = __x._M_finish;
 80138fa:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80138fe:	f8cd c014 	str.w	ip, [sp, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
 8013902:	68a9      	ldr	r1, [r5, #8]
 8013904:	9106      	str	r1, [sp, #24]
	  _M_start = __x._M_start;
 8013906:	60e3      	str	r3, [r4, #12]
	  _M_finish = __x._M_finish;
 8013908:	606a      	str	r2, [r5, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 801390a:	60aa      	str	r2, [r5, #8]
	  _M_start = __x._M_start;
 801390c:	900b      	str	r0, [sp, #44]	; 0x2c
	  _M_finish = __x._M_finish;
 801390e:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
	  _M_end_of_storage = __x._M_end_of_storage;
 8013912:	910d      	str	r1, [sp, #52]	; 0x34
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013914:	9704      	str	r7, [sp, #16]
 8013916:	9705      	str	r7, [sp, #20]
 8013918:	9706      	str	r7, [sp, #24]
	  _M_start = __x._M_start;
 801391a:	9001      	str	r0, [sp, #4]
	  _M_finish = __x._M_finish;
 801391c:	f8cd c008 	str.w	ip, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 8013920:	9103      	str	r1, [sp, #12]
	  _M_start = __x._M_start;
 8013922:	970b      	str	r7, [sp, #44]	; 0x2c
	  _M_finish = __x._M_finish;
 8013924:	970c      	str	r7, [sp, #48]	; 0x30
	  _M_end_of_storage = __x._M_end_of_storage;
 8013926:	970d      	str	r7, [sp, #52]	; 0x34
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013928:	1a09      	subs	r1, r1, r0
	if (__p)
 801392a:	b108      	cbz	r0, 8013930 <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t+0x176>
	::operator delete(__p
 801392c:	f007 fb1a 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8013930:	980b      	ldr	r0, [sp, #44]	; 0x2c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013932:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013934:	1a09      	subs	r1, r1, r0
	if (__p)
 8013936:	2800      	cmp	r0, #0
 8013938:	f43f af7b 	beq.w	8013832 <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t+0x78>
 801393c:	f007 fb12 	bl	801af64 <_ZdlPvj>
 8013940:	e777      	b.n	8013832 <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t+0x78>
	  std::__throw_bad_alloc();
 8013942:	f007 fbd3 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013946:	2700      	movs	r7, #0
 8013948:	e792      	b.n	8013870 <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t+0xb6>
 801394a:	462a      	mov	r2, r5
 801394c:	4649      	mov	r1, r9
 801394e:	4638      	mov	r0, r7
 8013950:	f007 ffdc 	bl	801b90c <memmove>
 8013954:	e79d      	b.n	8013892 <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t+0xd8>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8013956:	2500      	movs	r5, #0
	_M_deallocate(_M_impl._M_start,
 8013958:	9814      	ldr	r0, [sp, #80]	; 0x50
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801395a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801395c:	1a09      	subs	r1, r1, r0
	if (__p)
 801395e:	b108      	cbz	r0, 8013964 <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1aa>
	::operator delete(__p
 8013960:	f007 fb00 	bl	801af64 <_ZdlPvj>
 8013964:	b925      	cbnz	r5, 8013970 <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1b6>
}
 8013966:	f8bd 00ac 	ldrh.w	r0, [sp, #172]	; 0xac
 801396a:	b022      	add	sp, #136	; 0x88
 801396c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013970:	4631      	mov	r1, r6
 8013972:	f811 3b04 	ldrb.w	r3, [r1], #4
 8013976:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 801397a:	a818      	add	r0, sp, #96	; 0x60
 801397c:	f7fd f977 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8013980:	7c33      	ldrb	r3, [r6, #16]
 8013982:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8013986:	7c73      	ldrb	r3, [r6, #17]
 8013988:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
		Send(*response);
 801398c:	a917      	add	r1, sp, #92	; 0x5c
 801398e:	4640      	mov	r0, r8
 8013990:	f7fe fa20 	bl	8011dd4 <_ZN13Communication4SendE13MessageHeader>
	_M_deallocate(_M_impl._M_start,
 8013994:	9818      	ldr	r0, [sp, #96]	; 0x60
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013996:	991a      	ldr	r1, [sp, #104]	; 0x68
 8013998:	1a09      	subs	r1, r1, r0
	if (__p)
 801399a:	b108      	cbz	r0, 80139a0 <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e6>
 801399c:	f007 fae2 	bl	801af64 <_ZdlPvj>
      { _M_erase_at_end(this->_M_impl._M_start); }
 80139a0:	6873      	ldr	r3, [r6, #4]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80139a2:	68b2      	ldr	r2, [r6, #8]
 80139a4:	4293      	cmp	r3, r2
 80139a6:	d000      	beq.n	80139aa <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1f0>
	    this->_M_impl._M_finish = __pos;
 80139a8:	60b3      	str	r3, [r6, #8]
 80139aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80139ae:	901c      	str	r0, [sp, #112]	; 0x70
 80139b0:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
 80139b4:	79a3      	ldrb	r3, [r4, #6]
 80139b6:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
 80139ba:	79e3      	ldrb	r3, [r4, #7]
 80139bc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 80139c0:	7a23      	ldrb	r3, [r4, #8]
 80139c2:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 80139c6:	f104 010c 	add.w	r1, r4, #12
 80139ca:	a81f      	add	r0, sp, #124	; 0x7c
 80139cc:	f7fd f94f 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		BuildPayload(response, response_content);
 80139d0:	aa1c      	add	r2, sp, #112	; 0x70
 80139d2:	4631      	mov	r1, r6
 80139d4:	4640      	mov	r0, r8
 80139d6:	f7fe fc57 	bl	8012288 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
	_M_deallocate(_M_impl._M_start,
 80139da:	981f      	ldr	r0, [sp, #124]	; 0x7c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80139dc:	9921      	ldr	r1, [sp, #132]	; 0x84
 80139de:	1a09      	subs	r1, r1, r0
	if (__p)
 80139e0:	2800      	cmp	r0, #0
 80139e2:	d0c0      	beq.n	8013966 <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ac>
 80139e4:	f007 fabe 	bl	801af64 <_ZdlPvj>
 80139e8:	e7bd      	b.n	8013966 <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ac>

080139ea <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 80139ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139ee:	b0ad      	sub	sp, #180	; 0xb4
 80139f0:	4606      	mov	r6, r0
 80139f2:	460d      	mov	r5, r1
 80139f4:	4617      	mov	r7, r2
 80139f6:	461c      	mov	r4, r3
 80139f8:	f8bd b0d8 	ldrh.w	fp, [sp, #216]	; 0xd8
	: _M_start(), _M_finish(), _M_end_of_storage()
 80139fc:	2300      	movs	r3, #0
 80139fe:	9307      	str	r3, [sp, #28]
 8013a00:	9308      	str	r3, [sp, #32]
 8013a02:	9309      	str	r3, [sp, #36]	; 0x24
	response_content.element_register = element.element_register;
 8013a04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013a08:	9004      	str	r0, [sp, #16]
 8013a0a:	f8ad 1014 	strh.w	r1, [sp, #20]
	response_content.ack = true;
 8013a0e:	2201      	movs	r2, #1
 8013a10:	f88d 2016 	strb.w	r2, [sp, #22]
	response_content.command = false;
 8013a14:	f88d 3017 	strb.w	r3, [sp, #23]
	response_content.access = element.access;
 8013a18:	7a23      	ldrb	r3, [r4, #8]
 8013a1a:	f88d 3018 	strb.w	r3, [sp, #24]
	leds->CommunicationLED(message.interface);
 8013a1e:	7829      	ldrb	r1, [r5, #0]
 8013a20:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8013a22:	f002 fe8a 	bl	801673a <_ZN4LEDS16CommunicationLEDEh>
	if (element.access == WRITE) {
 8013a26:	7a23      	ldrb	r3, [r4, #8]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	f040 808e 	bne.w	8013b4a <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x160>
 8013a2e:	46aa      	mov	sl, r5
 8013a30:	f81a 3b04 	ldrb.w	r3, [sl], #4
 8013a34:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013a38:	f8da 1004 	ldr.w	r1, [sl, #4]
 8013a3c:	686a      	ldr	r2, [r5, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013a3e:	2300      	movs	r3, #0
 8013a40:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a42:	930c      	str	r3, [sp, #48]	; 0x30
 8013a44:	930d      	str	r3, [sp, #52]	; 0x34
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013a46:	ebb1 0902 	subs.w	r9, r1, r2
 8013a4a:	d075      	beq.n	8013b38 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x14e>
	if (__n > this->_M_max_size())
 8013a4c:	4599      	cmp	r9, r3
 8013a4e:	db71      	blt.n	8013b34 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x14a>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013a50:	4648      	mov	r0, r9
 8013a52:	f007 fa9d 	bl	801af90 <_Znwj>
 8013a56:	4680      	mov	r8, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8013a58:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8013a5c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013a60:	eb08 0309 	add.w	r3, r8, r9
 8013a64:	930d      	str	r3, [sp, #52]	; 0x34
 8013a66:	f8da 9004 	ldr.w	r9, [sl, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8013a6a:	f8cd 800c 	str.w	r8, [sp, #12]
      return std::__niter_wrap(__result,
 8013a6e:	6868      	ldr	r0, [r5, #4]
 8013a70:	f7ee f821 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8013a74:	4682      	mov	sl, r0
 8013a76:	4648      	mov	r0, r9
 8013a78:	f7ee f81d 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8013a7c:	ebb0 090a 	subs.w	r9, r0, sl
 8013a80:	d15d      	bne.n	8013b3e <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x154>
	  return __result + _Num;
 8013a82:	9803      	ldr	r0, [sp, #12]
 8013a84:	4448      	add	r0, r9
	this->_M_impl._M_finish =
 8013a86:	900c      	str	r0, [sp, #48]	; 0x30
 8013a88:	7c2b      	ldrb	r3, [r5, #16]
 8013a8a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 8013a8e:	7c6b      	ldrb	r3, [r5, #17]
 8013a90:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 8013a94:	ab04      	add	r3, sp, #16
 8013a96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013a9a:	900f      	str	r0, [sp, #60]	; 0x3c
 8013a9c:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8013aa0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8013aa4:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 8013aa8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8013aac:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
 8013ab0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8013ab4:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 8013ab8:	a907      	add	r1, sp, #28
 8013aba:	a812      	add	r0, sp, #72	; 0x48
 8013abc:	f7fd f8d7 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8013ac0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013ac4:	9015      	str	r0, [sp, #84]	; 0x54
 8013ac6:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
 8013aca:	79a3      	ldrb	r3, [r4, #6]
 8013acc:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
 8013ad0:	79e3      	ldrb	r3, [r4, #7]
 8013ad2:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8013ad6:	7a23      	ldrb	r3, [r4, #8]
 8013ad8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8013adc:	f104 010c 	add.w	r1, r4, #12
 8013ae0:	a818      	add	r0, sp, #96	; 0x60
 8013ae2:	f7fd f8c4 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8013ae6:	f8cd b004 	str.w	fp, [sp, #4]
 8013aea:	ab15      	add	r3, sp, #84	; 0x54
 8013aec:	9300      	str	r3, [sp, #0]
 8013aee:	ab0f      	add	r3, sp, #60	; 0x3c
 8013af0:	463a      	mov	r2, r7
 8013af2:	a90a      	add	r1, sp, #40	; 0x28
 8013af4:	4630      	mov	r0, r6
 8013af6:	f7ff fa36 	bl	8012f66 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t>
 8013afa:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8013afc:	9818      	ldr	r0, [sp, #96]	; 0x60
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013afe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8013b00:	1a09      	subs	r1, r1, r0
	if (__p)
 8013b02:	b108      	cbz	r0, 8013b08 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x11e>
	::operator delete(__p
 8013b04:	f007 fa2e 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8013b08:	9812      	ldr	r0, [sp, #72]	; 0x48
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013b0a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8013b0c:	1a09      	subs	r1, r1, r0
	if (__p)
 8013b0e:	b108      	cbz	r0, 8013b14 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x12a>
 8013b10:	f007 fa28 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8013b14:	980b      	ldr	r0, [sp, #44]	; 0x2c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013b16:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013b18:	1a09      	subs	r1, r1, r0
	if (__p)
 8013b1a:	b108      	cbz	r0, 8013b20 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x136>
 8013b1c:	f007 fa22 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8013b20:	9807      	ldr	r0, [sp, #28]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013b22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013b24:	1a09      	subs	r1, r1, r0
	if (__p)
 8013b26:	b108      	cbz	r0, 8013b2c <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x142>
 8013b28:	f007 fa1c 	bl	801af64 <_ZdlPvj>
}
 8013b2c:	4620      	mov	r0, r4
 8013b2e:	b02d      	add	sp, #180	; 0xb4
 8013b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  std::__throw_bad_alloc();
 8013b34:	f007 fada 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013b38:	f04f 0800 	mov.w	r8, #0
 8013b3c:	e78c      	b.n	8013a58 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x6e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8013b3e:	464a      	mov	r2, r9
 8013b40:	4651      	mov	r1, sl
 8013b42:	4640      	mov	r0, r8
 8013b44:	f007 fee2 	bl	801b90c <memmove>
 8013b48:	e79b      	b.n	8013a82 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x98>
 8013b4a:	4629      	mov	r1, r5
 8013b4c:	f811 3b04 	ldrb.w	r3, [r1], #4
 8013b50:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8013b54:	a81c      	add	r0, sp, #112	; 0x70
 8013b56:	f7fd f88a 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8013b5a:	7c2b      	ldrb	r3, [r5, #16]
 8013b5c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8013b60:	7c6b      	ldrb	r3, [r5, #17]
 8013b62:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8013b66:	ab04      	add	r3, sp, #16
 8013b68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013b6c:	9020      	str	r0, [sp, #128]	; 0x80
 8013b6e:	f8ad 1084 	strh.w	r1, [sp, #132]	; 0x84
 8013b72:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8013b76:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
 8013b7a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8013b7e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 8013b82:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8013b86:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013b8a:	9d08      	ldr	r5, [sp, #32]
 8013b8c:	9a07      	ldr	r2, [sp, #28]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013b8e:	2300      	movs	r3, #0
 8013b90:	9323      	str	r3, [sp, #140]	; 0x8c
 8013b92:	9324      	str	r3, [sp, #144]	; 0x90
 8013b94:	9325      	str	r3, [sp, #148]	; 0x94
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013b96:	1aad      	subs	r5, r5, r2
 8013b98:	d04e      	beq.n	8013c38 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x24e>
	if (__n > this->_M_max_size())
 8013b9a:	429d      	cmp	r5, r3
 8013b9c:	db4a      	blt.n	8013c34 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x24a>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013b9e:	4628      	mov	r0, r5
 8013ba0:	f007 f9f6 	bl	801af90 <_Znwj>
 8013ba4:	4680      	mov	r8, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8013ba6:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8013baa:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013bae:	4445      	add	r5, r8
 8013bb0:	9525      	str	r5, [sp, #148]	; 0x94
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8013bb2:	46c1      	mov	r9, r8
      return std::__niter_wrap(__result,
 8013bb4:	9807      	ldr	r0, [sp, #28]
 8013bb6:	f7ed ff7e 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8013bba:	4605      	mov	r5, r0
 8013bbc:	9808      	ldr	r0, [sp, #32]
 8013bbe:	f7ed ff7a 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8013bc2:	ebb0 0a05 	subs.w	sl, r0, r5
 8013bc6:	d13a      	bne.n	8013c3e <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x254>
	  return __result + _Num;
 8013bc8:	eb09 000a 	add.w	r0, r9, sl
	this->_M_impl._M_finish =
 8013bcc:	9024      	str	r0, [sp, #144]	; 0x90
 8013bce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013bd2:	9026      	str	r0, [sp, #152]	; 0x98
 8013bd4:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
 8013bd8:	79a3      	ldrb	r3, [r4, #6]
 8013bda:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
 8013bde:	79e3      	ldrb	r3, [r4, #7]
 8013be0:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 8013be4:	7a23      	ldrb	r3, [r4, #8]
 8013be6:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
 8013bea:	f104 010c 	add.w	r1, r4, #12
 8013bee:	a829      	add	r0, sp, #164	; 0xa4
 8013bf0:	f7fd f83d 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		return ProcessRead<T>(message, response, response_content, element, start_index);
 8013bf4:	f8cd b004 	str.w	fp, [sp, #4]
 8013bf8:	ab26      	add	r3, sp, #152	; 0x98
 8013bfa:	9300      	str	r3, [sp, #0]
 8013bfc:	ab20      	add	r3, sp, #128	; 0x80
 8013bfe:	463a      	mov	r2, r7
 8013c00:	a91b      	add	r1, sp, #108	; 0x6c
 8013c02:	4630      	mov	r0, r6
 8013c04:	f7ff fdd9 	bl	80137ba <_ZN13Communication11ProcessReadImEEt13MessageHeaderPS1_14MessageElementS3_t>
 8013c08:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8013c0a:	9829      	ldr	r0, [sp, #164]	; 0xa4
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013c0c:	992b      	ldr	r1, [sp, #172]	; 0xac
 8013c0e:	1a09      	subs	r1, r1, r0
	if (__p)
 8013c10:	b108      	cbz	r0, 8013c16 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x22c>
	::operator delete(__p
 8013c12:	f007 f9a7 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8013c16:	9823      	ldr	r0, [sp, #140]	; 0x8c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013c18:	9925      	ldr	r1, [sp, #148]	; 0x94
 8013c1a:	1a09      	subs	r1, r1, r0
	if (__p)
 8013c1c:	b108      	cbz	r0, 8013c22 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x238>
 8013c1e:	f007 f9a1 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8013c22:	981c      	ldr	r0, [sp, #112]	; 0x70
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013c24:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013c26:	1a09      	subs	r1, r1, r0
	if (__p)
 8013c28:	2800      	cmp	r0, #0
 8013c2a:	f43f af79 	beq.w	8013b20 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x136>
 8013c2e:	f007 f999 	bl	801af64 <_ZdlPvj>
 8013c32:	e775      	b.n	8013b20 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x136>
	  std::__throw_bad_alloc();
 8013c34:	f007 fa5a 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013c38:	f04f 0800 	mov.w	r8, #0
 8013c3c:	e7b3      	b.n	8013ba6 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x1bc>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8013c3e:	4652      	mov	r2, sl
 8013c40:	4629      	mov	r1, r5
 8013c42:	4640      	mov	r0, r8
 8013c44:	f007 fe62 	bl	801b90c <memmove>
 8013c48:	e7be      	b.n	8013bc8 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x1de>

08013c4a <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    { return __it.base(); }
 8013c4a:	4770      	bx	lr

08013c4c <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8013c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c50:	b0b9      	sub	sp, #228	; 0xe4
 8013c52:	af02      	add	r7, sp, #8
 8013c54:	4605      	mov	r5, r0
 8013c56:	4692      	mov	sl, r2
 8013c58:	461c      	mov	r4, r3
 8013c5a:	f8d7 6100 	ldr.w	r6, [r7, #256]	; 0x100
 8013c5e:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8013c62:	617b      	str	r3, [r7, #20]
	if (not element.element_register.isArray) {
 8013c64:	78f3      	ldrb	r3, [r6, #3]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d033      	beq.n	8013cd2 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x86>
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8013c6a:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 8013c6e:	f1b8 0f00 	cmp.w	r8, #0
 8013c72:	f040 811f 	bne.w	8013eb4 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x268>
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8013c76:	88b3      	ldrh	r3, [r6, #4]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d14e      	bne.n	8013d1a <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0xce>
	return *(this->_M_impl._M_start + __n);
 8013c7c:	f851 3f04 	ldr.w	r3, [r1, #4]!
		length_to_extract = message.payload[start_index];
 8013c80:	697a      	ldr	r2, [r7, #20]
 8013c82:	f813 8002 	ldrb.w	r8, [r3, r2]
		start_index++;
 8013c86:	1c50      	adds	r0, r2, #1
 8013c88:	b283      	uxth	r3, r0
 8013c8a:	617b      	str	r3, [r7, #20]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8013c8c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8013c90:	f7fc ffed 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8013c94:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8013c98:	9301      	str	r3, [sp, #4]
 8013c9a:	f8cd 8000 	str.w	r8, [sp]
 8013c9e:	697b      	ldr	r3, [r7, #20]
 8013ca0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8013ca4:	4629      	mov	r1, r5
 8013ca6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013caa:	f7fd fb78 	bl	801139e <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb>
	_M_deallocate(_M_impl._M_start,
 8013cae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013cb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013cb2:	1a09      	subs	r1, r1, r0
	if (__p)
 8013cb4:	b108      	cbz	r0, 8013cba <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x6e>
	::operator delete(__p
 8013cb6:	f007 f955 	bl	801af64 <_ZdlPvj>
		if (success)
 8013cba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	f040 8129 	bne.w	8013f16 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x2ca>
	_M_deallocate(_M_impl._M_start,
 8013cc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013cc8:	1a09      	subs	r1, r1, r0
	if (__p)
 8013cca:	b330      	cbz	r0, 8013d1a <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0xce>
 8013ccc:	f007 f94a 	bl	801af64 <_ZdlPvj>
 8013cd0:	e023      	b.n	8013d1a <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0xce>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8013cd2:	3104      	adds	r1, #4
 8013cd4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8013cd8:	f7fc ffc9 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8013cdc:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8013ce0:	697a      	ldr	r2, [r7, #20]
 8013ce2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8013ce6:	4628      	mov	r0, r5
 8013ce8:	f7fb fc3e 	bl	800f568 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb>
 8013cec:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	_M_deallocate(_M_impl._M_start,
 8013cf0:	6b78      	ldr	r0, [r7, #52]	; 0x34
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013cf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013cf4:	1a09      	subs	r1, r1, r0
	if (__p)
 8013cf6:	b108      	cbz	r0, 8013cfc <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0xb0>
 8013cf8:	f007 f934 	bl	801af64 <_ZdlPvj>
		val = (uint8_t) value;
 8013cfc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013d00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013d04:	ee17 3a90 	vmov	r3, s15
 8013d08:	f885 3020 	strb.w	r3, [r5, #32]
		if (success)
 8013d0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	f040 80c3 	bne.w	8013e9c <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x250>
		length_to_extract = 1;
 8013d16:	f04f 0801 	mov.w	r8, #1
	succ = success;
 8013d1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013d1e:	712b      	strb	r3, [r5, #4]
 8013d20:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013d24:	60a8      	str	r0, [r5, #8]
 8013d26:	81a9      	strh	r1, [r5, #12]
 8013d28:	79b2      	ldrb	r2, [r6, #6]
 8013d2a:	73aa      	strb	r2, [r5, #14]
 8013d2c:	79f2      	ldrb	r2, [r6, #7]
 8013d2e:	73ea      	strb	r2, [r5, #15]
 8013d30:	7a32      	ldrb	r2, [r6, #8]
 8013d32:	742a      	strb	r2, [r5, #16]
 8013d34:	f106 010c 	add.w	r1, r6, #12
 8013d38:	f105 0014 	add.w	r0, r5, #20
 8013d3c:	f7fc ffc7 	bl	8010cce <_ZNSt6vectorIhSaIhEEaSERKS1_>
	if (success)
 8013d40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	f000 8132 	beq.w	8013fae <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x362>
		response_content.data = std::vector<uint8_t>{OK};
 8013d4a:	f104 090c 	add.w	r9, r4, #12
 8013d4e:	2600      	movs	r6, #0
 8013d50:	f887 6078 	strb.w	r6, [r7, #120]	; 0x78
 8013d54:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013d58:	673b      	str	r3, [r7, #112]	; 0x70
 8013d5a:	2301      	movs	r3, #1
 8013d5c:	677b      	str	r3, [r7, #116]	; 0x74
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8013d5e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013d62:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8013d66:	c903      	ldmia	r1, {r0, r1}
 8013d68:	e882 0003 	stmia.w	r2, {r0, r1}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013d6c:	667e      	str	r6, [r7, #100]	; 0x64
 8013d6e:	66be      	str	r6, [r7, #104]	; 0x68
 8013d70:	66fe      	str	r6, [r7, #108]	; 0x6c
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013d72:	4618      	mov	r0, r3
 8013d74:	f007 f90c 	bl	801af90 <_Znwj>
 8013d78:	4602      	mov	r2, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8013d7a:	6678      	str	r0, [r7, #100]	; 0x64
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013d7c:	f100 0c01 	add.w	ip, r0, #1
 8013d80:	f8c7 c06c 	str.w	ip, [r7, #108]	; 0x6c
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8013d84:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8013d88:	7003      	strb	r3, [r0, #0]
	  this->_M_impl._M_finish =
 8013d8a:	f8c7 c068 	str.w	ip, [r7, #104]	; 0x68
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013d8e:	61be      	str	r6, [r7, #24]
 8013d90:	61fe      	str	r6, [r7, #28]
 8013d92:	623e      	str	r6, [r7, #32]
 8013d94:	627e      	str	r6, [r7, #36]	; 0x24
 8013d96:	62be      	str	r6, [r7, #40]	; 0x28
 8013d98:	62fe      	str	r6, [r7, #44]	; 0x2c
	  _M_start = __x._M_start;
 8013d9a:	68e0      	ldr	r0, [r4, #12]
 8013d9c:	6278      	str	r0, [r7, #36]	; 0x24
	  _M_finish = __x._M_finish;
 8013d9e:	f8d9 e004 	ldr.w	lr, [r9, #4]
 8013da2:	f8c7 e028 	str.w	lr, [r7, #40]	; 0x28
	  _M_end_of_storage = __x._M_end_of_storage;
 8013da6:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8013daa:	62f9      	str	r1, [r7, #44]	; 0x2c
	  _M_start = __x._M_start;
 8013dac:	60e2      	str	r2, [r4, #12]
	  _M_finish = __x._M_finish;
 8013dae:	f8c9 c004 	str.w	ip, [r9, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8013db2:	f8c9 c008 	str.w	ip, [r9, #8]
	  _M_start = __x._M_start;
 8013db6:	6678      	str	r0, [r7, #100]	; 0x64
	  _M_finish = __x._M_finish;
 8013db8:	f8c7 e068 	str.w	lr, [r7, #104]	; 0x68
	  _M_end_of_storage = __x._M_end_of_storage;
 8013dbc:	66f9      	str	r1, [r7, #108]	; 0x6c
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013dbe:	627e      	str	r6, [r7, #36]	; 0x24
 8013dc0:	62be      	str	r6, [r7, #40]	; 0x28
 8013dc2:	62fe      	str	r6, [r7, #44]	; 0x2c
	  _M_start = __x._M_start;
 8013dc4:	61b8      	str	r0, [r7, #24]
	  _M_finish = __x._M_finish;
 8013dc6:	f8c7 e01c 	str.w	lr, [r7, #28]
	  _M_end_of_storage = __x._M_end_of_storage;
 8013dca:	6239      	str	r1, [r7, #32]
	  _M_start = __x._M_start;
 8013dcc:	667e      	str	r6, [r7, #100]	; 0x64
	  _M_finish = __x._M_finish;
 8013dce:	66be      	str	r6, [r7, #104]	; 0x68
	  _M_end_of_storage = __x._M_end_of_storage;
 8013dd0:	66fe      	str	r6, [r7, #108]	; 0x6c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013dd2:	1a09      	subs	r1, r1, r0
	if (__p)
 8013dd4:	b108      	cbz	r0, 8013dda <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x18e>
	::operator delete(__p
 8013dd6:	f007 f8c5 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8013dda:	6e78      	ldr	r0, [r7, #100]	; 0x64
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013ddc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8013dde:	1a09      	subs	r1, r1, r0
	if (__p)
 8013de0:	b108      	cbz	r0, 8013de6 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x19a>
 8013de2:	f007 f8bf 	bl	801af64 <_ZdlPvj>
 8013de6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013dea:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8013dee:	f8a7 1098 	strh.w	r1, [r7, #152]	; 0x98
 8013df2:	79a3      	ldrb	r3, [r4, #6]
 8013df4:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8013df8:	79e3      	ldrb	r3, [r4, #7]
 8013dfa:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8013dfe:	7a23      	ldrb	r3, [r4, #8]
 8013e00:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
 8013e04:	f104 0b0c 	add.w	fp, r4, #12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013e08:	f8db 6004 	ldr.w	r6, [fp, #4]
 8013e0c:	68e2      	ldr	r2, [r4, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013e0e:	2300      	movs	r3, #0
 8013e10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8013e14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8013e18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013e1c:	1ab6      	subs	r6, r6, r2
 8013e1e:	f000 8122 	beq.w	8014066 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x41a>
	if (__n > this->_M_max_size())
 8013e22:	429e      	cmp	r6, r3
 8013e24:	f2c0 811d 	blt.w	8014062 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x416>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013e28:	4630      	mov	r0, r6
 8013e2a:	f007 f8b1 	bl	801af90 <_Znwj>
 8013e2e:	4681      	mov	r9, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8013e30:	f8c7 90a0 	str.w	r9, [r7, #160]	; 0xa0
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8013e34:	f8c7 90a4 	str.w	r9, [r7, #164]	; 0xa4
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013e38:	444e      	add	r6, r9
 8013e3a:	f8c7 60a8 	str.w	r6, [r7, #168]	; 0xa8
      : _M_current(__i) { }
 8013e3e:	f8db 6004 	ldr.w	r6, [fp, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8013e42:	f8c7 9010 	str.w	r9, [r7, #16]
      return std::__niter_wrap(__result,
 8013e46:	68e0      	ldr	r0, [r4, #12]
 8013e48:	f7ed fe35 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8013e4c:	4683      	mov	fp, r0
 8013e4e:	4630      	mov	r0, r6
 8013e50:	f7ed fe31 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8013e54:	ebb0 060b 	subs.w	r6, r0, fp
 8013e58:	f040 8108 	bne.w	801406c <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x420>
	  return __result + _Num;
 8013e5c:	693b      	ldr	r3, [r7, #16]
 8013e5e:	4433      	add	r3, r6
	this->_M_impl._M_finish =
 8013e60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (not BuildPayload(response, response_content)) { // if no space available, send the data and then rebuild a new response
 8013e64:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8013e68:	4651      	mov	r1, sl
 8013e6a:	4628      	mov	r0, r5
 8013e6c:	f7fe fa0c 	bl	8012288 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8013e70:	4606      	mov	r6, r0
	_M_deallocate(_M_impl._M_start,
 8013e72:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013e76:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8013e7a:	1a09      	subs	r1, r1, r0
	if (__p)
 8013e7c:	b108      	cbz	r0, 8013e82 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x236>
	::operator delete(__p
 8013e7e:	f007 f871 	bl	801af64 <_ZdlPvj>
 8013e82:	2e00      	cmp	r6, #0
 8013e84:	f000 80f8 	beq.w	8014078 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x42c>
	return start_index + sizeof(T) * length_to_extract;
 8013e88:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8013e8c:	b280      	uxth	r0, r0
 8013e8e:	697b      	ldr	r3, [r7, #20]
 8013e90:	4403      	add	r3, r0
}
 8013e92:	b298      	uxth	r0, r3
 8013e94:	37dc      	adds	r7, #220	; 0xdc
 8013e96:	46bd      	mov	sp, r7
 8013e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 8013e9c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8013e9e:	8831      	ldrh	r1, [r6, #0]
 8013ea0:	2301      	movs	r3, #1
 8013ea2:	9300      	str	r3, [sp, #0]
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013eaa:	f7fc fd9f 	bl	80109ec <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 8013eae:	f887 0033 	strb.w	r0, [r7, #51]	; 0x33
 8013eb2:	e730      	b.n	8013d16 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0xca>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 8013eb4:	46eb      	mov	fp, sp
		T values[length_to_extract];
 8013eb6:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8013eba:	3307      	adds	r3, #7
 8013ebc:	08db      	lsrs	r3, r3, #3
 8013ebe:	ebab 03c3 	sub.w	r3, fp, r3, lsl #3
 8013ec2:	469d      	mov	sp, r3
 8013ec4:	f10d 0908 	add.w	r9, sp, #8
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8013ec8:	3104      	adds	r1, #4
 8013eca:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8013ece:	f7fc fece 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8013ed2:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8013ed6:	9301      	str	r3, [sp, #4]
 8013ed8:	f8cd 8000 	str.w	r8, [sp]
 8013edc:	697b      	ldr	r3, [r7, #20]
 8013ede:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013ee2:	4649      	mov	r1, r9
 8013ee4:	4628      	mov	r0, r5
 8013ee6:	f7fd f8a3 	bl	8011030 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb>
	_M_deallocate(_M_impl._M_start,
 8013eea:	6c38      	ldr	r0, [r7, #64]	; 0x40
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013eec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8013eee:	1a09      	subs	r1, r1, r0
	if (__p)
 8013ef0:	b108      	cbz	r0, 8013ef6 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x2aa>
 8013ef2:	f007 f837 	bl	801af64 <_ZdlPvj>
		if (success)
 8013ef6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013efa:	b90b      	cbnz	r3, 8013f00 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x2b4>
 8013efc:	46dd      	mov	sp, fp
			success = registers->WriteRegister<T>(element.element_register.address, values);
 8013efe:	e70c      	b.n	8013d1a <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0xce>
 8013f00:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8013f02:	8831      	ldrh	r1, [r6, #0]
 8013f04:	2301      	movs	r3, #1
 8013f06:	9300      	str	r3, [sp, #0]
 8013f08:	2300      	movs	r3, #0
 8013f0a:	464a      	mov	r2, r9
 8013f0c:	f7fc fd6e 	bl	80109ec <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 8013f10:	f887 0033 	strb.w	r0, [r7, #51]	; 0x33
 8013f14:	e7f2      	b.n	8013efc <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x2b0>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 8013f16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013f18:	613b      	str	r3, [r7, #16]
 8013f1a:	8833      	ldrh	r3, [r6, #0]
 8013f1c:	60fb      	str	r3, [r7, #12]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f22:	eba3 0902 	sub.w	r9, r3, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013f26:	2300      	movs	r3, #0
 8013f28:	65bb      	str	r3, [r7, #88]	; 0x58
 8013f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013f2c:	663b      	str	r3, [r7, #96]	; 0x60
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013f2e:	ea5f 09a9 	movs.w	r9, r9, asr #2
 8013f32:	d039      	beq.n	8013fa8 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x35c>
	if (__n > this->_M_max_size())
 8013f34:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
 8013f38:	d234      	bcs.n	8013fa4 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x358>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013f3a:	ea4f 0089 	mov.w	r0, r9, lsl #2
 8013f3e:	f007 f827 	bl	801af90 <_Znwj>
 8013f42:	4683      	mov	fp, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8013f44:	f8c7 b058 	str.w	fp, [r7, #88]	; 0x58
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8013f48:	f8c7 b05c 	str.w	fp, [r7, #92]	; 0x5c
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013f4c:	eb0b 0389 	add.w	r3, fp, r9, lsl #2
 8013f50:	663b      	str	r3, [r7, #96]	; 0x60
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8013f52:	f8c7 b008 	str.w	fp, [r7, #8]
      return std::__niter_wrap(__result,
 8013f56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013f58:	f7ff fe77 	bl	8013c4a <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8013f5c:	4681      	mov	r9, r0
 8013f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f60:	f7ff fe73 	bl	8013c4a <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  const ptrdiff_t _Num = __last - __first;
 8013f64:	eba0 0309 	sub.w	r3, r0, r9
 8013f68:	607b      	str	r3, [r7, #4]
	  if (_Num)
 8013f6a:	4581      	cmp	r9, r0
 8013f6c:	d004      	beq.n	8013f78 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x32c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8013f6e:	461a      	mov	r2, r3
 8013f70:	4649      	mov	r1, r9
 8013f72:	4658      	mov	r0, fp
 8013f74:	f007 fcca 	bl	801b90c <memmove>
	  return __result + _Num;
 8013f78:	68bb      	ldr	r3, [r7, #8]
 8013f7a:	687a      	ldr	r2, [r7, #4]
 8013f7c:	4413      	add	r3, r2
	this->_M_impl._M_finish =
 8013f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013f80:	2301      	movs	r3, #1
 8013f82:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013f86:	68f9      	ldr	r1, [r7, #12]
 8013f88:	6938      	ldr	r0, [r7, #16]
 8013f8a:	f7fc fe0b 	bl	8010ba4 <_ZN9Registers19WriteVectorRegisterIfEEbtSt6vectorIT_SaIS2_EEb>
 8013f8e:	f887 0033 	strb.w	r0, [r7, #51]	; 0x33
	_M_deallocate(_M_impl._M_start,
 8013f92:	6db8      	ldr	r0, [r7, #88]	; 0x58
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8013f94:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013f96:	1a09      	subs	r1, r1, r0
	if (__p)
 8013f98:	2800      	cmp	r0, #0
 8013f9a:	f43f ae93 	beq.w	8013cc4 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x78>
	::operator delete(__p
 8013f9e:	f006 ffe1 	bl	801af64 <_ZdlPvj>
 8013fa2:	e68f      	b.n	8013cc4 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x78>
	  std::__throw_bad_alloc();
 8013fa4:	f007 f8a2 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013fa8:	f04f 0b00 	mov.w	fp, #0
 8013fac:	e7ca      	b.n	8013f44 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x2f8>
		response_content.data = std::vector<uint8_t>{ERROR};
 8013fae:	f104 090c 	add.w	r9, r4, #12
 8013fb2:	23ff      	movs	r3, #255	; 0xff
 8013fb4:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8013fb8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013fbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8013fc6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013fca:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8013fce:	c903      	ldmia	r1, {r0, r1}
 8013fd0:	e882 0003 	stmia.w	r2, {r0, r1}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013fd4:	2600      	movs	r6, #0
 8013fd6:	67fe      	str	r6, [r7, #124]	; 0x7c
 8013fd8:	f8c7 6080 	str.w	r6, [r7, #128]	; 0x80
 8013fdc:	f8c7 6084 	str.w	r6, [r7, #132]	; 0x84
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f006 ffd5 	bl	801af90 <_Znwj>
 8013fe6:	4602      	mov	r2, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8013fe8:	67f8      	str	r0, [r7, #124]	; 0x7c
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013fea:	f100 0c01 	add.w	ip, r0, #1
 8013fee:	f8c7 c084 	str.w	ip, [r7, #132]	; 0x84
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8013ff2:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8013ff6:	7003      	strb	r3, [r0, #0]
	  this->_M_impl._M_finish =
 8013ff8:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013ffc:	61be      	str	r6, [r7, #24]
 8013ffe:	61fe      	str	r6, [r7, #28]
 8014000:	623e      	str	r6, [r7, #32]
 8014002:	627e      	str	r6, [r7, #36]	; 0x24
 8014004:	62be      	str	r6, [r7, #40]	; 0x28
 8014006:	62fe      	str	r6, [r7, #44]	; 0x2c
	  _M_start = __x._M_start;
 8014008:	68e0      	ldr	r0, [r4, #12]
 801400a:	6278      	str	r0, [r7, #36]	; 0x24
	  _M_finish = __x._M_finish;
 801400c:	f8d9 e004 	ldr.w	lr, [r9, #4]
 8014010:	f8c7 e028 	str.w	lr, [r7, #40]	; 0x28
	  _M_end_of_storage = __x._M_end_of_storage;
 8014014:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8014018:	62f9      	str	r1, [r7, #44]	; 0x2c
	  _M_start = __x._M_start;
 801401a:	60e2      	str	r2, [r4, #12]
	  _M_finish = __x._M_finish;
 801401c:	f8c9 c004 	str.w	ip, [r9, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8014020:	f8c9 c008 	str.w	ip, [r9, #8]
	  _M_start = __x._M_start;
 8014024:	67f8      	str	r0, [r7, #124]	; 0x7c
	  _M_finish = __x._M_finish;
 8014026:	f8c7 e080 	str.w	lr, [r7, #128]	; 0x80
	  _M_end_of_storage = __x._M_end_of_storage;
 801402a:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
	: _M_start(), _M_finish(), _M_end_of_storage()
 801402e:	627e      	str	r6, [r7, #36]	; 0x24
 8014030:	62be      	str	r6, [r7, #40]	; 0x28
 8014032:	62fe      	str	r6, [r7, #44]	; 0x2c
	  _M_start = __x._M_start;
 8014034:	61b8      	str	r0, [r7, #24]
	  _M_finish = __x._M_finish;
 8014036:	f8c7 e01c 	str.w	lr, [r7, #28]
	  _M_end_of_storage = __x._M_end_of_storage;
 801403a:	6239      	str	r1, [r7, #32]
	  _M_start = __x._M_start;
 801403c:	67fe      	str	r6, [r7, #124]	; 0x7c
	  _M_finish = __x._M_finish;
 801403e:	f8c7 6080 	str.w	r6, [r7, #128]	; 0x80
	  _M_end_of_storage = __x._M_end_of_storage;
 8014042:	f8c7 6084 	str.w	r6, [r7, #132]	; 0x84
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014046:	1a09      	subs	r1, r1, r0
	if (__p)
 8014048:	b108      	cbz	r0, 801404e <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x402>
	::operator delete(__p
 801404a:	f006 ff8b 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 801404e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014050:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8014054:	1a09      	subs	r1, r1, r0
	if (__p)
 8014056:	2800      	cmp	r0, #0
 8014058:	f43f aec5 	beq.w	8013de6 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x19a>
 801405c:	f006 ff82 	bl	801af64 <_ZdlPvj>
 8014060:	e6c1      	b.n	8013de6 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x19a>
	  std::__throw_bad_alloc();
 8014062:	f007 f843 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014066:	f04f 0900 	mov.w	r9, #0
 801406a:	e6e1      	b.n	8013e30 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e4>
 801406c:	4632      	mov	r2, r6
 801406e:	4659      	mov	r1, fp
 8014070:	4648      	mov	r0, r9
 8014072:	f007 fc4b 	bl	801b90c <memmove>
 8014076:	e6f1      	b.n	8013e5c <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x210>
 8014078:	4651      	mov	r1, sl
 801407a:	f811 3b04 	ldrb.w	r3, [r1], #4
 801407e:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8014082:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8014086:	f7fc fdf2 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801408a:	f89a 3010 	ldrb.w	r3, [sl, #16]
 801408e:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
 8014092:	f89a 3011 	ldrb.w	r3, [sl, #17]
 8014096:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
		Send(*response);
 801409a:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 801409e:	4628      	mov	r0, r5
 80140a0:	f7fd fe98 	bl	8011dd4 <_ZN13Communication4SendE13MessageHeader>
	_M_deallocate(_M_impl._M_start,
 80140a4:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80140a8:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80140ac:	1a09      	subs	r1, r1, r0
	if (__p)
 80140ae:	b108      	cbz	r0, 80140b4 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x468>
	::operator delete(__p
 80140b0:	f006 ff58 	bl	801af64 <_ZdlPvj>
      { _M_erase_at_end(this->_M_impl._M_start); }
 80140b4:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80140b8:	f8da 2008 	ldr.w	r2, [sl, #8]
 80140bc:	4293      	cmp	r3, r2
 80140be:	d001      	beq.n	80140c4 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x478>
	    this->_M_impl._M_finish = __pos;
 80140c0:	f8ca 3008 	str.w	r3, [sl, #8]
 80140c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80140c8:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 80140cc:	f8a7 10c4 	strh.w	r1, [r7, #196]	; 0xc4
 80140d0:	79a3      	ldrb	r3, [r4, #6]
 80140d2:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
 80140d6:	79e3      	ldrb	r3, [r4, #7]
 80140d8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 80140dc:	7a23      	ldrb	r3, [r4, #8]
 80140de:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
 80140e2:	f104 010c 	add.w	r1, r4, #12
 80140e6:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 80140ea:	f7fc fdc0 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		BuildPayload(response, response_content);
 80140ee:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80140f2:	4651      	mov	r1, sl
 80140f4:	4628      	mov	r0, r5
 80140f6:	f7fe f8c7 	bl	8012288 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
	_M_deallocate(_M_impl._M_start,
 80140fa:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80140fe:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8014102:	1a09      	subs	r1, r1, r0
	if (__p)
 8014104:	2800      	cmp	r0, #0
 8014106:	f43f aebf 	beq.w	8013e88 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x23c>
 801410a:	f006 ff2b 	bl	801af64 <_ZdlPvj>
 801410e:	e6bb      	b.n	8013e88 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x23c>

08014110 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    { return __it.base(); }
 8014110:	4770      	bx	lr

08014112 <_ZNSt6vectorIfSaIfEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 8014112:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014116:	4604      	mov	r4, r0
      if (&__x != this)
 8014118:	4281      	cmp	r1, r0
 801411a:	d028      	beq.n	801416e <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5c>
 801411c:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801411e:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8014122:	f8d1 8000 	ldr.w	r8, [r1]
 8014126:	eba9 0608 	sub.w	r6, r9, r8
 801412a:	10b0      	asrs	r0, r6, #2
      { return size_type(this->_M_impl._M_end_of_storage
 801412c:	68a3      	ldr	r3, [r4, #8]
			 - this->_M_impl._M_start); }
 801412e:	6827      	ldr	r7, [r4, #0]
 8014130:	1bdb      	subs	r3, r3, r7
	  if (__xlen > capacity())
 8014132:	42b3      	cmp	r3, r6
 8014134:	d31e      	bcc.n	8014174 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x62>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014136:	6862      	ldr	r2, [r4, #4]
 8014138:	1bd2      	subs	r2, r2, r7
	  else if (size() >= __xlen)
 801413a:	42b2      	cmp	r2, r6
 801413c:	d33e      	bcc.n	80141bc <_ZNSt6vectorIfSaIfEEaSERKS1_+0xaa>
      return std::__niter_wrap(__result,
 801413e:	4640      	mov	r0, r8
 8014140:	f7ff fd83 	bl	8013c4a <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8014144:	4605      	mov	r5, r0
 8014146:	4648      	mov	r0, r9
 8014148:	f7ff fd7f 	bl	8013c4a <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 801414c:	4680      	mov	r8, r0
 801414e:	4638      	mov	r0, r7
 8014150:	f7ff ffde 	bl	8014110 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
	  const ptrdiff_t _Num = __last - __first;
 8014154:	eba8 0205 	sub.w	r2, r8, r5
	  if (_Num)
 8014158:	4545      	cmp	r5, r8
 801415a:	d002      	beq.n	8014162 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801415c:	4629      	mov	r1, r5
 801415e:	f007 fbd5 	bl	801b90c <memmove>
    { return __from + (__res - std::__niter_base(__from)); }
 8014162:	4638      	mov	r0, r7
 8014164:	f7ff ffd4 	bl	8014110 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8014168:	6823      	ldr	r3, [r4, #0]
 801416a:	4433      	add	r3, r6
 801416c:	6063      	str	r3, [r4, #4]
    }
 801416e:	4620      	mov	r0, r4
 8014170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014174:	b300      	cbz	r0, 80141b8 <_ZNSt6vectorIfSaIfEEaSERKS1_+0xa6>
	if (__n > this->_M_max_size())
 8014176:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 801417a:	d21b      	bcs.n	80141b4 <_ZNSt6vectorIfSaIfEEaSERKS1_+0xa2>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801417c:	0080      	lsls	r0, r0, #2
 801417e:	f006 ff07 	bl	801af90 <_Znwj>
 8014182:	4605      	mov	r5, r0
      return std::__niter_wrap(__result,
 8014184:	4640      	mov	r0, r8
 8014186:	f7ff fd60 	bl	8013c4a <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 801418a:	4607      	mov	r7, r0
 801418c:	4648      	mov	r0, r9
 801418e:	f7ff fd5c 	bl	8013c4a <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  const ptrdiff_t _Num = __last - __first;
 8014192:	1bc2      	subs	r2, r0, r7
	  if (_Num)
 8014194:	4287      	cmp	r7, r0
 8014196:	d003      	beq.n	80141a0 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x8e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8014198:	4639      	mov	r1, r7
 801419a:	4628      	mov	r0, r5
 801419c:	f007 fbb6 	bl	801b90c <memmove>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80141a0:	6820      	ldr	r0, [r4, #0]
			    this->_M_impl._M_end_of_storage
 80141a2:	68a1      	ldr	r1, [r4, #8]
			    - this->_M_impl._M_start);
 80141a4:	1a09      	subs	r1, r1, r0
	if (__p)
 80141a6:	b108      	cbz	r0, 80141ac <_ZNSt6vectorIfSaIfEEaSERKS1_+0x9a>
	::operator delete(__p
 80141a8:	f006 fedc 	bl	801af64 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 80141ac:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80141ae:	4435      	add	r5, r6
 80141b0:	60a5      	str	r5, [r4, #8]
 80141b2:	e7d9      	b.n	8014168 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x56>
	  std::__throw_bad_alloc();
 80141b4:	f006 ff9a 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80141b8:	2500      	movs	r5, #0
 80141ba:	e7e3      	b.n	8014184 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x72>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 80141bc:	eb08 0302 	add.w	r3, r8, r2
	  if (_Num)
 80141c0:	4543      	cmp	r3, r8
 80141c2:	d003      	beq.n	80141cc <_ZNSt6vectorIfSaIfEEaSERKS1_+0xba>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80141c4:	4641      	mov	r1, r8
 80141c6:	4638      	mov	r0, r7
 80141c8:	f007 fba0 	bl	801b90c <memmove>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80141cc:	6829      	ldr	r1, [r5, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80141ce:	6860      	ldr	r0, [r4, #4]
 80141d0:	6823      	ldr	r3, [r4, #0]
 80141d2:	1ac3      	subs	r3, r0, r3
 80141d4:	4419      	add	r1, r3
					  __x._M_impl._M_finish,
 80141d6:	686b      	ldr	r3, [r5, #4]
	  const ptrdiff_t _Num = __last - __first;
 80141d8:	1a5a      	subs	r2, r3, r1
	  if (_Num)
 80141da:	4299      	cmp	r1, r3
 80141dc:	d0c4      	beq.n	8014168 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x56>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80141de:	f007 fb95 	bl	801b90c <memmove>
 80141e2:	e7c1      	b.n	8014168 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x56>

080141e4 <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_>:
std::vector<T> Communication::BuildTVector(MessageElement element, T* data) {
 80141e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141e8:	b090      	sub	sp, #64	; 0x40
 80141ea:	4604      	mov	r4, r0
 80141ec:	461d      	mov	r5, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 80141ee:	2300      	movs	r3, #0
 80141f0:	6003      	str	r3, [r0, #0]
 80141f2:	6043      	str	r3, [r0, #4]
 80141f4:	6083      	str	r3, [r0, #8]
	if (not element.element_register.isArray) {// single case
 80141f6:	78d3      	ldrb	r3, [r2, #3]
 80141f8:	b153      	cbz	r3, 8014210 <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x2c>
	} else if (element.element_register.isArray && element.element_register.length > 0) // array case
 80141fa:	8890      	ldrh	r0, [r2, #4]
 80141fc:	2800      	cmp	r0, #0
 80141fe:	d164      	bne.n	80142ca <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0xe6>
	else if (element.element_register.isArray && element.element_register.length == 0) // vector case
 8014200:	8893      	ldrh	r3, [r2, #4]
 8014202:	2b00      	cmp	r3, #0
 8014204:	f000 80a4 	beq.w	8014350 <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x16c>
}
 8014208:	4620      	mov	r0, r4
 801420a:	b010      	add	sp, #64	; 0x40
 801420c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		vector = std::vector<T>{*data}; // what-if array / vector / ... transform in uint8_t whatever it is
 8014210:	682b      	ldr	r3, [r5, #0]
 8014212:	930c      	str	r3, [sp, #48]	; 0x30
 8014214:	ab0c      	add	r3, sp, #48	; 0x30
 8014216:	930a      	str	r3, [sp, #40]	; 0x28
 8014218:	2301      	movs	r3, #1
 801421a:	930b      	str	r3, [sp, #44]	; 0x2c
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801421c:	ab04      	add	r3, sp, #16
 801421e:	aa0a      	add	r2, sp, #40	; 0x28
 8014220:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014224:	e883 0003 	stmia.w	r3, {r0, r1}
 8014228:	2300      	movs	r3, #0
 801422a:	9307      	str	r3, [sp, #28]
 801422c:	9308      	str	r3, [sp, #32]
 801422e:	9309      	str	r3, [sp, #36]	; 0x24
      begin() const noexcept { return _M_array; }
 8014230:	4606      	mov	r6, r0
      end() const noexcept { return begin() + size(); }
 8014232:	eb00 0881 	add.w	r8, r0, r1, lsl #2
 8014236:	008f      	lsls	r7, r1, #2
 8014238:	f341 001d 	sbfx	r0, r1, #0, #30
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 801423c:	4a47      	ldr	r2, [pc, #284]	; (801435c <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x178>)
 801423e:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
 8014242:	d33b      	bcc.n	80142bc <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0xd8>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014244:	2800      	cmp	r0, #0
 8014246:	d03e      	beq.n	80142c6 <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0xe2>
	if (__n > this->_M_max_size())
 8014248:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 801424c:	d239      	bcs.n	80142c2 <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0xde>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801424e:	0080      	lsls	r0, r0, #2
 8014250:	f006 fe9e 	bl	801af90 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8014254:	9007      	str	r0, [sp, #28]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8014256:	19c5      	adds	r5, r0, r7
 8014258:	9509      	str	r5, [sp, #36]	; 0x24
	  if (_Num)
 801425a:	4546      	cmp	r6, r8
 801425c:	d003      	beq.n	8014266 <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x82>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801425e:	463a      	mov	r2, r7
 8014260:	4631      	mov	r1, r6
 8014262:	f007 fb53 	bl	801b90c <memmove>
	  this->_M_impl._M_finish =
 8014266:	9508      	str	r5, [sp, #32]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014268:	2300      	movs	r3, #0
 801426a:	9301      	str	r3, [sp, #4]
 801426c:	9302      	str	r3, [sp, #8]
 801426e:	9303      	str	r3, [sp, #12]
 8014270:	9304      	str	r3, [sp, #16]
 8014272:	9305      	str	r3, [sp, #20]
 8014274:	9306      	str	r3, [sp, #24]
	  _M_start = __x._M_start;
 8014276:	6820      	ldr	r0, [r4, #0]
 8014278:	9004      	str	r0, [sp, #16]
	  _M_finish = __x._M_finish;
 801427a:	6862      	ldr	r2, [r4, #4]
 801427c:	9205      	str	r2, [sp, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
 801427e:	68a1      	ldr	r1, [r4, #8]
 8014280:	9106      	str	r1, [sp, #24]
	  _M_start = __x._M_start;
 8014282:	9e07      	ldr	r6, [sp, #28]
 8014284:	6026      	str	r6, [r4, #0]
	  _M_finish = __x._M_finish;
 8014286:	6065      	str	r5, [r4, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8014288:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801428a:	60a5      	str	r5, [r4, #8]
	  _M_start = __x._M_start;
 801428c:	9007      	str	r0, [sp, #28]
	  _M_finish = __x._M_finish;
 801428e:	9208      	str	r2, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
 8014290:	9109      	str	r1, [sp, #36]	; 0x24
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014292:	9304      	str	r3, [sp, #16]
 8014294:	9305      	str	r3, [sp, #20]
 8014296:	9306      	str	r3, [sp, #24]
	  _M_start = __x._M_start;
 8014298:	9001      	str	r0, [sp, #4]
	  _M_finish = __x._M_finish;
 801429a:	9202      	str	r2, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 801429c:	9103      	str	r1, [sp, #12]
	  _M_start = __x._M_start;
 801429e:	9307      	str	r3, [sp, #28]
	  _M_finish = __x._M_finish;
 80142a0:	9308      	str	r3, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
 80142a2:	9309      	str	r3, [sp, #36]	; 0x24
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80142a4:	1a09      	subs	r1, r1, r0
	if (__p)
 80142a6:	b108      	cbz	r0, 80142ac <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0xc8>
	::operator delete(__p
 80142a8:	f006 fe5c 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80142ac:	9807      	ldr	r0, [sp, #28]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80142ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80142b0:	1a09      	subs	r1, r1, r0
	if (__p)
 80142b2:	2800      	cmp	r0, #0
 80142b4:	d0a8      	beq.n	8014208 <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x24>
 80142b6:	f006 fe55 	bl	801af64 <_ZdlPvj>
 80142ba:	e7a5      	b.n	8014208 <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x24>
	  __throw_length_error(
 80142bc:	4828      	ldr	r0, [pc, #160]	; (8014360 <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x17c>)
 80142be:	f006 ff1b 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	  std::__throw_bad_alloc();
 80142c2:	f006 ff13 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80142c6:	2000      	movs	r0, #0
 80142c8:	e7c4      	b.n	8014254 <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x70>
		vector = std::vector<T>(data, data + element.element_register.length); //  * sizeof(T)
 80142ca:	eb05 0880 	add.w	r8, r5, r0, lsl #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 80142ce:	2300      	movs	r3, #0
 80142d0:	930d      	str	r3, [sp, #52]	; 0x34
 80142d2:	930e      	str	r3, [sp, #56]	; 0x38
 80142d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80142d6:	0087      	lsls	r7, r0, #2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80142d8:	2800      	cmp	r0, #0
 80142da:	d037      	beq.n	801434c <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x168>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80142dc:	4638      	mov	r0, r7
 80142de:	f006 fe57 	bl	801af90 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80142e2:	900d      	str	r0, [sp, #52]	; 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80142e4:	19c6      	adds	r6, r0, r7
 80142e6:	960f      	str	r6, [sp, #60]	; 0x3c
	  if (_Num)
 80142e8:	45a8      	cmp	r8, r5
 80142ea:	d003      	beq.n	80142f4 <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x110>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80142ec:	463a      	mov	r2, r7
 80142ee:	4629      	mov	r1, r5
 80142f0:	f007 fb0c 	bl	801b90c <memmove>
	  this->_M_impl._M_finish =
 80142f4:	960e      	str	r6, [sp, #56]	; 0x38
	: _M_start(), _M_finish(), _M_end_of_storage()
 80142f6:	2300      	movs	r3, #0
 80142f8:	9301      	str	r3, [sp, #4]
 80142fa:	9302      	str	r3, [sp, #8]
 80142fc:	9303      	str	r3, [sp, #12]
 80142fe:	9304      	str	r3, [sp, #16]
 8014300:	9305      	str	r3, [sp, #20]
 8014302:	9306      	str	r3, [sp, #24]
	  _M_start = __x._M_start;
 8014304:	6820      	ldr	r0, [r4, #0]
 8014306:	9004      	str	r0, [sp, #16]
	  _M_finish = __x._M_finish;
 8014308:	6862      	ldr	r2, [r4, #4]
 801430a:	9205      	str	r2, [sp, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
 801430c:	68a1      	ldr	r1, [r4, #8]
 801430e:	9106      	str	r1, [sp, #24]
	  _M_start = __x._M_start;
 8014310:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8014312:	6025      	str	r5, [r4, #0]
	  _M_finish = __x._M_finish;
 8014314:	6066      	str	r6, [r4, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8014316:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014318:	60a5      	str	r5, [r4, #8]
	  _M_start = __x._M_start;
 801431a:	900d      	str	r0, [sp, #52]	; 0x34
	  _M_finish = __x._M_finish;
 801431c:	920e      	str	r2, [sp, #56]	; 0x38
	  _M_end_of_storage = __x._M_end_of_storage;
 801431e:	910f      	str	r1, [sp, #60]	; 0x3c
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014320:	9304      	str	r3, [sp, #16]
 8014322:	9305      	str	r3, [sp, #20]
 8014324:	9306      	str	r3, [sp, #24]
	  _M_start = __x._M_start;
 8014326:	9001      	str	r0, [sp, #4]
	  _M_finish = __x._M_finish;
 8014328:	9202      	str	r2, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 801432a:	9103      	str	r1, [sp, #12]
	  _M_start = __x._M_start;
 801432c:	930d      	str	r3, [sp, #52]	; 0x34
	  _M_finish = __x._M_finish;
 801432e:	930e      	str	r3, [sp, #56]	; 0x38
	  _M_end_of_storage = __x._M_end_of_storage;
 8014330:	930f      	str	r3, [sp, #60]	; 0x3c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014332:	1a09      	subs	r1, r1, r0
	if (__p)
 8014334:	b108      	cbz	r0, 801433a <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x156>
	::operator delete(__p
 8014336:	f006 fe15 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 801433a:	980d      	ldr	r0, [sp, #52]	; 0x34
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801433c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801433e:	1a09      	subs	r1, r1, r0
	if (__p)
 8014340:	2800      	cmp	r0, #0
 8014342:	f43f af61 	beq.w	8014208 <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x24>
 8014346:	f006 fe0d 	bl	801af64 <_ZdlPvj>
 801434a:	e75d      	b.n	8014208 <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x24>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801434c:	2000      	movs	r0, #0
 801434e:	e7c8      	b.n	80142e2 <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0xfe>
		vector = *reinterpret_cast<std::vector<T>*>(data); // TODO exit with float, to check
 8014350:	4629      	mov	r1, r5
 8014352:	4620      	mov	r0, r4
 8014354:	f7ff fedd 	bl	8014112 <_ZNSt6vectorIfSaIfEEaSERKS1_>
	return vector;
 8014358:	e756      	b.n	8014208 <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_+0x24>
 801435a:	bf00      	nop
 801435c:	7ffffffc 	.word	0x7ffffffc
 8014360:	0801bdb0 	.word	0x0801bdb0

08014364 <_ZN13Communication11ReadElementIfEESt6vectorIhSaIhEEP14MessageElementPb>:
std::vector<uint8_t> Communication::ReadElement(MessageElement* element, bool* success) {
 8014364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014368:	b09b      	sub	sp, #108	; 0x6c
 801436a:	4604      	mov	r4, r0
 801436c:	460e      	mov	r6, r1
 801436e:	4615      	mov	r5, r2
 8014370:	461f      	mov	r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014372:	2300      	movs	r3, #0
 8014374:	6003      	str	r3, [r0, #0]
 8014376:	6043      	str	r3, [r0, #4]
 8014378:	6083      	str	r3, [r0, #8]
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 801437a:	2301      	movs	r3, #1
 801437c:	9300      	str	r3, [sp, #0]
 801437e:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8014382:	aa0d      	add	r2, sp, #52	; 0x34
 8014384:	8829      	ldrh	r1, [r5, #0]
 8014386:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8014388:	f7fb fdbe 	bl	800ff08 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb>
 801438c:	7038      	strb	r0, [r7, #0]
	if (not *success)
 801438e:	b918      	cbnz	r0, 8014398 <_ZN13Communication11ReadElementIfEESt6vectorIhSaIhEEP14MessageElementPb+0x34>
}
 8014390:	4620      	mov	r0, r4
 8014392:	b01b      	add	sp, #108	; 0x6c
 8014394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
struct MessageElement {
 8014398:	e895 0003 	ldmia.w	r5, {r0, r1}
 801439c:	900e      	str	r0, [sp, #56]	; 0x38
 801439e:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
 80143a2:	79ab      	ldrb	r3, [r5, #6]
 80143a4:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
 80143a8:	79eb      	ldrb	r3, [r5, #7]
 80143aa:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80143ae:	7a2b      	ldrb	r3, [r5, #8]
 80143b0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80143b4:	f105 010c 	add.w	r1, r5, #12
 80143b8:	a811      	add	r0, sp, #68	; 0x44
 80143ba:	f7fc fc58 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 80143be:	ab0d      	add	r3, sp, #52	; 0x34
 80143c0:	aa0e      	add	r2, sp, #56	; 0x38
 80143c2:	4631      	mov	r1, r6
 80143c4:	a809      	add	r0, sp, #36	; 0x24
 80143c6:	f7ff ff0d 	bl	80141e4 <_ZN13Communication12BuildTVectorIfEESt6vectorIT_SaIS2_EE14MessageElementPS2_>
	_M_deallocate(_M_impl._M_start,
 80143ca:	9811      	ldr	r0, [sp, #68]	; 0x44
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80143cc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80143ce:	1a09      	subs	r1, r1, r0
	if (__p)
 80143d0:	b108      	cbz	r0, 80143d6 <_ZN13Communication11ReadElementIfEESt6vectorIhSaIhEEP14MessageElementPb+0x72>
 80143d2:	f006 fdc7 	bl	801af64 <_ZdlPvj>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80143d6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80143d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143da:	1aed      	subs	r5, r5, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 80143dc:	2300      	movs	r3, #0
 80143de:	9317      	str	r3, [sp, #92]	; 0x5c
 80143e0:	9318      	str	r3, [sp, #96]	; 0x60
 80143e2:	9319      	str	r3, [sp, #100]	; 0x64
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80143e4:	10ad      	asrs	r5, r5, #2
 80143e6:	d05e      	beq.n	80144a6 <_ZN13Communication11ReadElementIfEESt6vectorIhSaIhEEP14MessageElementPb+0x142>
	if (__n > this->_M_max_size())
 80143e8:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 80143ec:	d259      	bcs.n	80144a2 <_ZN13Communication11ReadElementIfEESt6vectorIhSaIhEEP14MessageElementPb+0x13e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80143ee:	00a8      	lsls	r0, r5, #2
 80143f0:	f006 fdce 	bl	801af90 <_Znwj>
 80143f4:	4607      	mov	r7, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 80143f6:	9717      	str	r7, [sp, #92]	; 0x5c
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80143f8:	9718      	str	r7, [sp, #96]	; 0x60
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80143fa:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80143fe:	9519      	str	r5, [sp, #100]	; 0x64
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8014400:	46b8      	mov	r8, r7
      return std::__niter_wrap(__result,
 8014402:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014404:	f7ff fc21 	bl	8013c4a <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8014408:	4605      	mov	r5, r0
 801440a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801440c:	f7ff fc1d 	bl	8013c4a <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  const ptrdiff_t _Num = __last - __first;
 8014410:	eba0 0905 	sub.w	r9, r0, r5
	  if (_Num)
 8014414:	4285      	cmp	r5, r0
 8014416:	d004      	beq.n	8014422 <_ZN13Communication11ReadElementIfEESt6vectorIhSaIhEEP14MessageElementPb+0xbe>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8014418:	464a      	mov	r2, r9
 801441a:	4629      	mov	r1, r5
 801441c:	4638      	mov	r0, r7
 801441e:	f007 fa75 	bl	801b90c <memmove>
	  return __result + _Num;
 8014422:	eb08 0209 	add.w	r2, r8, r9
	this->_M_impl._M_finish =
 8014426:	9218      	str	r2, [sp, #96]	; 0x60
	data = BuildVector<T>(register_read_vector_cast);
 8014428:	aa17      	add	r2, sp, #92	; 0x5c
 801442a:	4631      	mov	r1, r6
 801442c:	a814      	add	r0, sp, #80	; 0x50
 801442e:	f7fd ff01 	bl	8012234 <_ZN13Communication11BuildVectorIfEESt6vectorIhSaIhEES1_IT_SaIS4_EE>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014432:	2300      	movs	r3, #0
 8014434:	9303      	str	r3, [sp, #12]
 8014436:	9304      	str	r3, [sp, #16]
 8014438:	9305      	str	r3, [sp, #20]
 801443a:	9306      	str	r3, [sp, #24]
 801443c:	9307      	str	r3, [sp, #28]
 801443e:	9308      	str	r3, [sp, #32]
	  _M_start = __x._M_start;
 8014440:	6820      	ldr	r0, [r4, #0]
 8014442:	9006      	str	r0, [sp, #24]
	  _M_finish = __x._M_finish;
 8014444:	6862      	ldr	r2, [r4, #4]
 8014446:	9207      	str	r2, [sp, #28]
	  _M_end_of_storage = __x._M_end_of_storage;
 8014448:	68a1      	ldr	r1, [r4, #8]
 801444a:	9108      	str	r1, [sp, #32]
	  _M_start = __x._M_start;
 801444c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801444e:	6025      	str	r5, [r4, #0]
	  _M_finish = __x._M_finish;
 8014450:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014452:	6065      	str	r5, [r4, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8014454:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8014456:	60a5      	str	r5, [r4, #8]
	  _M_start = __x._M_start;
 8014458:	9014      	str	r0, [sp, #80]	; 0x50
	  _M_finish = __x._M_finish;
 801445a:	9215      	str	r2, [sp, #84]	; 0x54
	  _M_end_of_storage = __x._M_end_of_storage;
 801445c:	9116      	str	r1, [sp, #88]	; 0x58
	: _M_start(), _M_finish(), _M_end_of_storage()
 801445e:	9306      	str	r3, [sp, #24]
 8014460:	9307      	str	r3, [sp, #28]
 8014462:	9308      	str	r3, [sp, #32]
	  _M_start = __x._M_start;
 8014464:	9003      	str	r0, [sp, #12]
	  _M_finish = __x._M_finish;
 8014466:	9204      	str	r2, [sp, #16]
	  _M_end_of_storage = __x._M_end_of_storage;
 8014468:	9105      	str	r1, [sp, #20]
	  _M_start = __x._M_start;
 801446a:	9314      	str	r3, [sp, #80]	; 0x50
	  _M_finish = __x._M_finish;
 801446c:	9315      	str	r3, [sp, #84]	; 0x54
	  _M_end_of_storage = __x._M_end_of_storage;
 801446e:	9316      	str	r3, [sp, #88]	; 0x58
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014470:	1a09      	subs	r1, r1, r0
	if (__p)
 8014472:	b108      	cbz	r0, 8014478 <_ZN13Communication11ReadElementIfEESt6vectorIhSaIhEEP14MessageElementPb+0x114>
	::operator delete(__p
 8014474:	f006 fd76 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8014478:	9814      	ldr	r0, [sp, #80]	; 0x50
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801447a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801447c:	1a09      	subs	r1, r1, r0
	if (__p)
 801447e:	b108      	cbz	r0, 8014484 <_ZN13Communication11ReadElementIfEESt6vectorIhSaIhEEP14MessageElementPb+0x120>
 8014480:	f006 fd70 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8014484:	9817      	ldr	r0, [sp, #92]	; 0x5c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014486:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014488:	1a09      	subs	r1, r1, r0
	if (__p)
 801448a:	b108      	cbz	r0, 8014490 <_ZN13Communication11ReadElementIfEESt6vectorIhSaIhEEP14MessageElementPb+0x12c>
 801448c:	f006 fd6a 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8014490:	9809      	ldr	r0, [sp, #36]	; 0x24
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014492:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014494:	1a09      	subs	r1, r1, r0
	if (__p)
 8014496:	2800      	cmp	r0, #0
 8014498:	f43f af7a 	beq.w	8014390 <_ZN13Communication11ReadElementIfEESt6vectorIhSaIhEEP14MessageElementPb+0x2c>
 801449c:	f006 fd62 	bl	801af64 <_ZdlPvj>
      }
 80144a0:	e776      	b.n	8014390 <_ZN13Communication11ReadElementIfEESt6vectorIhSaIhEEP14MessageElementPb+0x2c>
	  std::__throw_bad_alloc();
 80144a2:	f006 fe23 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80144a6:	2700      	movs	r7, #0
 80144a8:	e7a5      	b.n	80143f6 <_ZN13Communication11ReadElementIfEESt6vectorIhSaIhEEP14MessageElementPb+0x92>

080144aa <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessRead(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 80144aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144ae:	b0a2      	sub	sp, #136	; 0x88
 80144b0:	4680      	mov	r8, r0
 80144b2:	4616      	mov	r6, r2
 80144b4:	461c      	mov	r4, r3
	response_content.data = ReadElement<T>(&element, &success);
 80144b6:	f103 050c 	add.w	r5, r3, #12
 80144ba:	f10d 031f 	add.w	r3, sp, #31
 80144be:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80144c0:	4601      	mov	r1, r0
 80144c2:	a808      	add	r0, sp, #32
 80144c4:	f7ff ff4e 	bl	8014364 <_ZN13Communication11ReadElementIfEESt6vectorIhSaIhEEP14MessageElementPb>
	: _M_start(), _M_finish(), _M_end_of_storage()
 80144c8:	2300      	movs	r3, #0
 80144ca:	9301      	str	r3, [sp, #4]
 80144cc:	9302      	str	r3, [sp, #8]
 80144ce:	9303      	str	r3, [sp, #12]
 80144d0:	9304      	str	r3, [sp, #16]
 80144d2:	9305      	str	r3, [sp, #20]
 80144d4:	9306      	str	r3, [sp, #24]
	  _M_start = __x._M_start;
 80144d6:	68e0      	ldr	r0, [r4, #12]
 80144d8:	9004      	str	r0, [sp, #16]
	  _M_finish = __x._M_finish;
 80144da:	686f      	ldr	r7, [r5, #4]
 80144dc:	9705      	str	r7, [sp, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
 80144de:	68a9      	ldr	r1, [r5, #8]
 80144e0:	9106      	str	r1, [sp, #24]
	  _M_start = __x._M_start;
 80144e2:	9a08      	ldr	r2, [sp, #32]
 80144e4:	60e2      	str	r2, [r4, #12]
	  _M_finish = __x._M_finish;
 80144e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80144e8:	606a      	str	r2, [r5, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80144ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144ec:	60aa      	str	r2, [r5, #8]
	  _M_start = __x._M_start;
 80144ee:	9008      	str	r0, [sp, #32]
	  _M_finish = __x._M_finish;
 80144f0:	9709      	str	r7, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
 80144f2:	910a      	str	r1, [sp, #40]	; 0x28
	: _M_start(), _M_finish(), _M_end_of_storage()
 80144f4:	9304      	str	r3, [sp, #16]
 80144f6:	9305      	str	r3, [sp, #20]
 80144f8:	9306      	str	r3, [sp, #24]
	  _M_start = __x._M_start;
 80144fa:	9001      	str	r0, [sp, #4]
	  _M_finish = __x._M_finish;
 80144fc:	9702      	str	r7, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 80144fe:	9103      	str	r1, [sp, #12]
	  _M_start = __x._M_start;
 8014500:	9308      	str	r3, [sp, #32]
	  _M_finish = __x._M_finish;
 8014502:	9309      	str	r3, [sp, #36]	; 0x24
	  _M_end_of_storage = __x._M_end_of_storage;
 8014504:	930a      	str	r3, [sp, #40]	; 0x28
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014506:	1a09      	subs	r1, r1, r0
	if (__p)
 8014508:	b108      	cbz	r0, 801450e <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
	::operator delete(__p
 801450a:	f006 fd2b 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 801450e:	9808      	ldr	r0, [sp, #32]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014510:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014512:	1a09      	subs	r1, r1, r0
	if (__p)
 8014514:	b108      	cbz	r0, 801451a <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x70>
 8014516:	f006 fd25 	bl	801af64 <_ZdlPvj>
	if (not success) {
 801451a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d03f      	beq.n	80145a2 <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t+0xf8>
struct MessageElement {
 8014522:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014526:	9011      	str	r0, [sp, #68]	; 0x44
 8014528:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 801452c:	79a3      	ldrb	r3, [r4, #6]
 801452e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
 8014532:	79e3      	ldrb	r3, [r4, #7]
 8014534:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 8014538:	7a23      	ldrb	r3, [r4, #8]
 801453a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 801453e:	f104 090c 	add.w	r9, r4, #12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014542:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8014546:	68e2      	ldr	r2, [r4, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014548:	2300      	movs	r3, #0
 801454a:	9314      	str	r3, [sp, #80]	; 0x50
 801454c:	9315      	str	r3, [sp, #84]	; 0x54
 801454e:	9316      	str	r3, [sp, #88]	; 0x58
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014550:	1aad      	subs	r5, r5, r2
 8014552:	d070      	beq.n	8014636 <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x18c>
	if (__n > this->_M_max_size())
 8014554:	429d      	cmp	r5, r3
 8014556:	db6c      	blt.n	8014632 <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x188>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8014558:	4628      	mov	r0, r5
 801455a:	f006 fd19 	bl	801af90 <_Znwj>
 801455e:	4607      	mov	r7, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8014560:	9714      	str	r7, [sp, #80]	; 0x50
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8014562:	9715      	str	r7, [sp, #84]	; 0x54
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8014564:	443d      	add	r5, r7
 8014566:	9516      	str	r5, [sp, #88]	; 0x58
      : _M_current(__i) { }
 8014568:	f8d9 5004 	ldr.w	r5, [r9, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 801456c:	46ba      	mov	sl, r7
      return std::__niter_wrap(__result,
 801456e:	68e0      	ldr	r0, [r4, #12]
 8014570:	f7ed faa1 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8014574:	4681      	mov	r9, r0
 8014576:	4628      	mov	r0, r5
 8014578:	f7ed fa9d 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 801457c:	ebb0 0509 	subs.w	r5, r0, r9
 8014580:	d15b      	bne.n	801463a <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x190>
	  return __result + _Num;
 8014582:	4455      	add	r5, sl
	this->_M_impl._M_finish =
 8014584:	9515      	str	r5, [sp, #84]	; 0x54
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8014586:	aa11      	add	r2, sp, #68	; 0x44
 8014588:	4631      	mov	r1, r6
 801458a:	4640      	mov	r0, r8
 801458c:	f7fd fe7c 	bl	8012288 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8014590:	4605      	mov	r5, r0
 8014592:	2800      	cmp	r0, #0
 8014594:	d157      	bne.n	8014646 <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x19c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014596:	68b2      	ldr	r2, [r6, #8]
 8014598:	6873      	ldr	r3, [r6, #4]
 801459a:	429a      	cmp	r2, r3
 801459c:	d054      	beq.n	8014648 <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x19e>
 801459e:	2501      	movs	r5, #1
 80145a0:	e052      	b.n	8014648 <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x19e>
		response_content.command = true; // this is an error flag for a read ack
 80145a2:	2301      	movs	r3, #1
 80145a4:	71e3      	strb	r3, [r4, #7]
		response_content.data = std::vector<uint8_t>{ERROR};
 80145a6:	22ff      	movs	r2, #255	; 0xff
 80145a8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 80145ac:	aa10      	add	r2, sp, #64	; 0x40
 80145ae:	920e      	str	r2, [sp, #56]	; 0x38
 80145b0:	930f      	str	r3, [sp, #60]	; 0x3c
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80145b2:	aa04      	add	r2, sp, #16
 80145b4:	a90e      	add	r1, sp, #56	; 0x38
 80145b6:	c903      	ldmia	r1, {r0, r1}
 80145b8:	e882 0003 	stmia.w	r2, {r0, r1}
	: _M_start(), _M_finish(), _M_end_of_storage()
 80145bc:	2700      	movs	r7, #0
 80145be:	970b      	str	r7, [sp, #44]	; 0x2c
 80145c0:	970c      	str	r7, [sp, #48]	; 0x30
 80145c2:	970d      	str	r7, [sp, #52]	; 0x34
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80145c4:	4618      	mov	r0, r3
 80145c6:	f006 fce3 	bl	801af90 <_Znwj>
 80145ca:	4603      	mov	r3, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80145cc:	900b      	str	r0, [sp, #44]	; 0x2c
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80145ce:	1c42      	adds	r2, r0, #1
 80145d0:	920d      	str	r2, [sp, #52]	; 0x34
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80145d2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80145d6:	7001      	strb	r1, [r0, #0]
	  this->_M_impl._M_finish =
 80145d8:	920c      	str	r2, [sp, #48]	; 0x30
	: _M_start(), _M_finish(), _M_end_of_storage()
 80145da:	9701      	str	r7, [sp, #4]
 80145dc:	9702      	str	r7, [sp, #8]
 80145de:	9703      	str	r7, [sp, #12]
 80145e0:	9704      	str	r7, [sp, #16]
 80145e2:	9705      	str	r7, [sp, #20]
 80145e4:	9706      	str	r7, [sp, #24]
	  _M_start = __x._M_start;
 80145e6:	68e0      	ldr	r0, [r4, #12]
 80145e8:	9004      	str	r0, [sp, #16]
	  _M_finish = __x._M_finish;
 80145ea:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80145ee:	f8cd c014 	str.w	ip, [sp, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
 80145f2:	68a9      	ldr	r1, [r5, #8]
 80145f4:	9106      	str	r1, [sp, #24]
	  _M_start = __x._M_start;
 80145f6:	60e3      	str	r3, [r4, #12]
	  _M_finish = __x._M_finish;
 80145f8:	606a      	str	r2, [r5, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80145fa:	60aa      	str	r2, [r5, #8]
	  _M_start = __x._M_start;
 80145fc:	900b      	str	r0, [sp, #44]	; 0x2c
	  _M_finish = __x._M_finish;
 80145fe:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
	  _M_end_of_storage = __x._M_end_of_storage;
 8014602:	910d      	str	r1, [sp, #52]	; 0x34
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014604:	9704      	str	r7, [sp, #16]
 8014606:	9705      	str	r7, [sp, #20]
 8014608:	9706      	str	r7, [sp, #24]
	  _M_start = __x._M_start;
 801460a:	9001      	str	r0, [sp, #4]
	  _M_finish = __x._M_finish;
 801460c:	f8cd c008 	str.w	ip, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 8014610:	9103      	str	r1, [sp, #12]
	  _M_start = __x._M_start;
 8014612:	970b      	str	r7, [sp, #44]	; 0x2c
	  _M_finish = __x._M_finish;
 8014614:	970c      	str	r7, [sp, #48]	; 0x30
	  _M_end_of_storage = __x._M_end_of_storage;
 8014616:	970d      	str	r7, [sp, #52]	; 0x34
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014618:	1a09      	subs	r1, r1, r0
	if (__p)
 801461a:	b108      	cbz	r0, 8014620 <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x176>
	::operator delete(__p
 801461c:	f006 fca2 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8014620:	980b      	ldr	r0, [sp, #44]	; 0x2c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014622:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014624:	1a09      	subs	r1, r1, r0
	if (__p)
 8014626:	2800      	cmp	r0, #0
 8014628:	f43f af7b 	beq.w	8014522 <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x78>
 801462c:	f006 fc9a 	bl	801af64 <_ZdlPvj>
 8014630:	e777      	b.n	8014522 <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x78>
	  std::__throw_bad_alloc();
 8014632:	f006 fd5b 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014636:	2700      	movs	r7, #0
 8014638:	e792      	b.n	8014560 <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t+0xb6>
 801463a:	462a      	mov	r2, r5
 801463c:	4649      	mov	r1, r9
 801463e:	4638      	mov	r0, r7
 8014640:	f007 f964 	bl	801b90c <memmove>
 8014644:	e79d      	b.n	8014582 <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t+0xd8>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8014646:	2500      	movs	r5, #0
	_M_deallocate(_M_impl._M_start,
 8014648:	9814      	ldr	r0, [sp, #80]	; 0x50
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801464a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801464c:	1a09      	subs	r1, r1, r0
	if (__p)
 801464e:	b108      	cbz	r0, 8014654 <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1aa>
	::operator delete(__p
 8014650:	f006 fc88 	bl	801af64 <_ZdlPvj>
 8014654:	b925      	cbnz	r5, 8014660 <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1b6>
}
 8014656:	f8bd 00ac 	ldrh.w	r0, [sp, #172]	; 0xac
 801465a:	b022      	add	sp, #136	; 0x88
 801465c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014660:	4631      	mov	r1, r6
 8014662:	f811 3b04 	ldrb.w	r3, [r1], #4
 8014666:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 801466a:	a818      	add	r0, sp, #96	; 0x60
 801466c:	f7fc faff 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8014670:	7c33      	ldrb	r3, [r6, #16]
 8014672:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8014676:	7c73      	ldrb	r3, [r6, #17]
 8014678:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
		Send(*response);
 801467c:	a917      	add	r1, sp, #92	; 0x5c
 801467e:	4640      	mov	r0, r8
 8014680:	f7fd fba8 	bl	8011dd4 <_ZN13Communication4SendE13MessageHeader>
	_M_deallocate(_M_impl._M_start,
 8014684:	9818      	ldr	r0, [sp, #96]	; 0x60
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014686:	991a      	ldr	r1, [sp, #104]	; 0x68
 8014688:	1a09      	subs	r1, r1, r0
	if (__p)
 801468a:	b108      	cbz	r0, 8014690 <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e6>
 801468c:	f006 fc6a 	bl	801af64 <_ZdlPvj>
      { _M_erase_at_end(this->_M_impl._M_start); }
 8014690:	6873      	ldr	r3, [r6, #4]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8014692:	68b2      	ldr	r2, [r6, #8]
 8014694:	4293      	cmp	r3, r2
 8014696:	d000      	beq.n	801469a <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1f0>
	    this->_M_impl._M_finish = __pos;
 8014698:	60b3      	str	r3, [r6, #8]
 801469a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801469e:	901c      	str	r0, [sp, #112]	; 0x70
 80146a0:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
 80146a4:	79a3      	ldrb	r3, [r4, #6]
 80146a6:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
 80146aa:	79e3      	ldrb	r3, [r4, #7]
 80146ac:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 80146b0:	7a23      	ldrb	r3, [r4, #8]
 80146b2:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 80146b6:	f104 010c 	add.w	r1, r4, #12
 80146ba:	a81f      	add	r0, sp, #124	; 0x7c
 80146bc:	f7fc fad7 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		BuildPayload(response, response_content);
 80146c0:	aa1c      	add	r2, sp, #112	; 0x70
 80146c2:	4631      	mov	r1, r6
 80146c4:	4640      	mov	r0, r8
 80146c6:	f7fd fddf 	bl	8012288 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
	_M_deallocate(_M_impl._M_start,
 80146ca:	981f      	ldr	r0, [sp, #124]	; 0x7c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80146cc:	9921      	ldr	r1, [sp, #132]	; 0x84
 80146ce:	1a09      	subs	r1, r1, r0
	if (__p)
 80146d0:	2800      	cmp	r0, #0
 80146d2:	d0c0      	beq.n	8014656 <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ac>
 80146d4:	f006 fc46 	bl	801af64 <_ZdlPvj>
 80146d8:	e7bd      	b.n	8014656 <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ac>

080146da <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 80146da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146de:	b0ad      	sub	sp, #180	; 0xb4
 80146e0:	4606      	mov	r6, r0
 80146e2:	460d      	mov	r5, r1
 80146e4:	4617      	mov	r7, r2
 80146e6:	461c      	mov	r4, r3
 80146e8:	f8bd b0d8 	ldrh.w	fp, [sp, #216]	; 0xd8
	: _M_start(), _M_finish(), _M_end_of_storage()
 80146ec:	2300      	movs	r3, #0
 80146ee:	9307      	str	r3, [sp, #28]
 80146f0:	9308      	str	r3, [sp, #32]
 80146f2:	9309      	str	r3, [sp, #36]	; 0x24
	response_content.element_register = element.element_register;
 80146f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80146f8:	9004      	str	r0, [sp, #16]
 80146fa:	f8ad 1014 	strh.w	r1, [sp, #20]
	response_content.ack = true;
 80146fe:	2201      	movs	r2, #1
 8014700:	f88d 2016 	strb.w	r2, [sp, #22]
	response_content.command = false;
 8014704:	f88d 3017 	strb.w	r3, [sp, #23]
	response_content.access = element.access;
 8014708:	7a23      	ldrb	r3, [r4, #8]
 801470a:	f88d 3018 	strb.w	r3, [sp, #24]
	leds->CommunicationLED(message.interface);
 801470e:	7829      	ldrb	r1, [r5, #0]
 8014710:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8014712:	f002 f812 	bl	801673a <_ZN4LEDS16CommunicationLEDEh>
	if (element.access == WRITE) {
 8014716:	7a23      	ldrb	r3, [r4, #8]
 8014718:	2b00      	cmp	r3, #0
 801471a:	f040 8087 	bne.w	801482c <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x152>
 801471e:	4629      	mov	r1, r5
 8014720:	f811 3b04 	ldrb.w	r3, [r1], #4
 8014724:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8014728:	a80b      	add	r0, sp, #44	; 0x2c
 801472a:	f7fc faa0 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801472e:	7c2b      	ldrb	r3, [r5, #16]
 8014730:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 8014734:	7c6b      	ldrb	r3, [r5, #17]
 8014736:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 801473a:	ab04      	add	r3, sp, #16
 801473c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014740:	900f      	str	r0, [sp, #60]	; 0x3c
 8014742:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8014746:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801474a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 801474e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8014752:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
 8014756:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801475a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801475e:	9d08      	ldr	r5, [sp, #32]
 8014760:	9a07      	ldr	r2, [sp, #28]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014762:	2300      	movs	r3, #0
 8014764:	9312      	str	r3, [sp, #72]	; 0x48
 8014766:	9313      	str	r3, [sp, #76]	; 0x4c
 8014768:	9314      	str	r3, [sp, #80]	; 0x50
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801476a:	1aad      	subs	r5, r5, r2
 801476c:	d055      	beq.n	801481a <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x140>
	if (__n > this->_M_max_size())
 801476e:	429d      	cmp	r5, r3
 8014770:	db51      	blt.n	8014816 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x13c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8014772:	4628      	mov	r0, r5
 8014774:	f006 fc0c 	bl	801af90 <_Znwj>
 8014778:	4680      	mov	r8, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 801477a:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801477e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8014782:	4445      	add	r5, r8
 8014784:	9514      	str	r5, [sp, #80]	; 0x50
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8014786:	46c1      	mov	r9, r8
      return std::__niter_wrap(__result,
 8014788:	9807      	ldr	r0, [sp, #28]
 801478a:	f7ed f994 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 801478e:	4605      	mov	r5, r0
 8014790:	9808      	ldr	r0, [sp, #32]
 8014792:	f7ed f990 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8014796:	ebb0 0a05 	subs.w	sl, r0, r5
 801479a:	d141      	bne.n	8014820 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x146>
	  return __result + _Num;
 801479c:	eb09 000a 	add.w	r0, r9, sl
	this->_M_impl._M_finish =
 80147a0:	9013      	str	r0, [sp, #76]	; 0x4c
 80147a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80147a6:	9015      	str	r0, [sp, #84]	; 0x54
 80147a8:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
 80147ac:	79a3      	ldrb	r3, [r4, #6]
 80147ae:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
 80147b2:	79e3      	ldrb	r3, [r4, #7]
 80147b4:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80147b8:	7a23      	ldrb	r3, [r4, #8]
 80147ba:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 80147be:	f104 010c 	add.w	r1, r4, #12
 80147c2:	a818      	add	r0, sp, #96	; 0x60
 80147c4:	f7fc fa53 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 80147c8:	f8cd b004 	str.w	fp, [sp, #4]
 80147cc:	ab15      	add	r3, sp, #84	; 0x54
 80147ce:	9300      	str	r3, [sp, #0]
 80147d0:	ab0f      	add	r3, sp, #60	; 0x3c
 80147d2:	463a      	mov	r2, r7
 80147d4:	a90a      	add	r1, sp, #40	; 0x28
 80147d6:	4630      	mov	r0, r6
 80147d8:	f7ff fa38 	bl	8013c4c <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t>
 80147dc:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 80147de:	9818      	ldr	r0, [sp, #96]	; 0x60
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80147e0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80147e2:	1a09      	subs	r1, r1, r0
	if (__p)
 80147e4:	b108      	cbz	r0, 80147ea <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x110>
	::operator delete(__p
 80147e6:	f006 fbbd 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80147ea:	9812      	ldr	r0, [sp, #72]	; 0x48
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80147ec:	9914      	ldr	r1, [sp, #80]	; 0x50
 80147ee:	1a09      	subs	r1, r1, r0
	if (__p)
 80147f0:	b108      	cbz	r0, 80147f6 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x11c>
 80147f2:	f006 fbb7 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80147f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80147f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80147fa:	1a09      	subs	r1, r1, r0
	if (__p)
 80147fc:	b108      	cbz	r0, 8014802 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x128>
 80147fe:	f006 fbb1 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8014802:	9807      	ldr	r0, [sp, #28]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014804:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014806:	1a09      	subs	r1, r1, r0
	if (__p)
 8014808:	b108      	cbz	r0, 801480e <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x134>
 801480a:	f006 fbab 	bl	801af64 <_ZdlPvj>
}
 801480e:	4620      	mov	r0, r4
 8014810:	b02d      	add	sp, #180	; 0xb4
 8014812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  std::__throw_bad_alloc();
 8014816:	f006 fc69 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801481a:	f04f 0800 	mov.w	r8, #0
 801481e:	e7ac      	b.n	801477a <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0xa0>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8014820:	4652      	mov	r2, sl
 8014822:	4629      	mov	r1, r5
 8014824:	4640      	mov	r0, r8
 8014826:	f007 f871 	bl	801b90c <memmove>
 801482a:	e7b7      	b.n	801479c <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0xc2>
 801482c:	46aa      	mov	sl, r5
 801482e:	f81a 3b04 	ldrb.w	r3, [sl], #4
 8014832:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014836:	f8da 1004 	ldr.w	r1, [sl, #4]
 801483a:	686a      	ldr	r2, [r5, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801483c:	2300      	movs	r3, #0
 801483e:	931c      	str	r3, [sp, #112]	; 0x70
 8014840:	931d      	str	r3, [sp, #116]	; 0x74
 8014842:	931e      	str	r3, [sp, #120]	; 0x78
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014844:	ebb1 0902 	subs.w	r9, r1, r2
 8014848:	d06e      	beq.n	8014928 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x24e>
	if (__n > this->_M_max_size())
 801484a:	4599      	cmp	r9, r3
 801484c:	db6a      	blt.n	8014924 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x24a>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801484e:	4648      	mov	r0, r9
 8014850:	f006 fb9e 	bl	801af90 <_Znwj>
 8014854:	4680      	mov	r8, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8014856:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801485a:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801485e:	eb08 0309 	add.w	r3, r8, r9
 8014862:	931e      	str	r3, [sp, #120]	; 0x78
 8014864:	f8da 9004 	ldr.w	r9, [sl, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8014868:	f8cd 800c 	str.w	r8, [sp, #12]
      return std::__niter_wrap(__result,
 801486c:	6868      	ldr	r0, [r5, #4]
 801486e:	f7ed f922 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8014872:	4682      	mov	sl, r0
 8014874:	4648      	mov	r0, r9
 8014876:	f7ed f91e 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 801487a:	ebb0 090a 	subs.w	r9, r0, sl
 801487e:	d156      	bne.n	801492e <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x254>
	  return __result + _Num;
 8014880:	9803      	ldr	r0, [sp, #12]
 8014882:	4448      	add	r0, r9
	this->_M_impl._M_finish =
 8014884:	901d      	str	r0, [sp, #116]	; 0x74
 8014886:	7c2b      	ldrb	r3, [r5, #16]
 8014888:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801488c:	7c6b      	ldrb	r3, [r5, #17]
 801488e:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8014892:	ab04      	add	r3, sp, #16
 8014894:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014898:	9020      	str	r0, [sp, #128]	; 0x80
 801489a:	f8ad 1084 	strh.w	r1, [sp, #132]	; 0x84
 801489e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80148a2:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
 80148a6:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80148aa:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 80148ae:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80148b2:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80148b6:	a907      	add	r1, sp, #28
 80148b8:	a823      	add	r0, sp, #140	; 0x8c
 80148ba:	f7fc f9d8 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80148be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80148c2:	9026      	str	r0, [sp, #152]	; 0x98
 80148c4:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
 80148c8:	79a3      	ldrb	r3, [r4, #6]
 80148ca:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
 80148ce:	79e3      	ldrb	r3, [r4, #7]
 80148d0:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 80148d4:	7a23      	ldrb	r3, [r4, #8]
 80148d6:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
 80148da:	f104 010c 	add.w	r1, r4, #12
 80148de:	a829      	add	r0, sp, #164	; 0xa4
 80148e0:	f7fc f9c5 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		return ProcessRead<T>(message, response, response_content, element, start_index);
 80148e4:	f8cd b004 	str.w	fp, [sp, #4]
 80148e8:	ab26      	add	r3, sp, #152	; 0x98
 80148ea:	9300      	str	r3, [sp, #0]
 80148ec:	ab20      	add	r3, sp, #128	; 0x80
 80148ee:	463a      	mov	r2, r7
 80148f0:	a91b      	add	r1, sp, #108	; 0x6c
 80148f2:	4630      	mov	r0, r6
 80148f4:	f7ff fdd9 	bl	80144aa <_ZN13Communication11ProcessReadIfEEt13MessageHeaderPS1_14MessageElementS3_t>
 80148f8:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 80148fa:	9829      	ldr	r0, [sp, #164]	; 0xa4
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80148fc:	992b      	ldr	r1, [sp, #172]	; 0xac
 80148fe:	1a09      	subs	r1, r1, r0
	if (__p)
 8014900:	b108      	cbz	r0, 8014906 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x22c>
	::operator delete(__p
 8014902:	f006 fb2f 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8014906:	9823      	ldr	r0, [sp, #140]	; 0x8c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014908:	9925      	ldr	r1, [sp, #148]	; 0x94
 801490a:	1a09      	subs	r1, r1, r0
	if (__p)
 801490c:	b108      	cbz	r0, 8014912 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x238>
 801490e:	f006 fb29 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8014912:	981c      	ldr	r0, [sp, #112]	; 0x70
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014914:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014916:	1a09      	subs	r1, r1, r0
	if (__p)
 8014918:	2800      	cmp	r0, #0
 801491a:	f43f af72 	beq.w	8014802 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x128>
 801491e:	f006 fb21 	bl	801af64 <_ZdlPvj>
 8014922:	e76e      	b.n	8014802 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x128>
	  std::__throw_bad_alloc();
 8014924:	f006 fbe2 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014928:	f04f 0800 	mov.w	r8, #0
 801492c:	e793      	b.n	8014856 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x17c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801492e:	464a      	mov	r2, r9
 8014930:	4651      	mov	r1, sl
 8014932:	4640      	mov	r0, r8
 8014934:	f006 ffea 	bl	801b90c <memmove>
 8014938:	e7a2      	b.n	8014880 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x1a6>

0801493a <_ZSt12__niter_baseIPK8RegisterSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    { return __it.base(); }
 801493a:	4770      	bx	lr

0801493c <_ZSt12__niter_baseIPK19SubscriberInterfaceSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
 801493c:	4770      	bx	lr
	...

08014940 <_ZN23SubscriberConfigurationC1ERKS_>:
#include "Configuration/RegistersConfiguration.h"
#include "Configuration/CommunicationConfiguration.h"

#include "Configuration/RegisterMaps/RegisterMapSubscribers.h"

struct SubscriberConfiguration {
 8014940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014944:	4604      	mov	r4, r0
 8014946:	460d      	mov	r5, r1
 8014948:	780b      	ldrb	r3, [r1, #0]
 801494a:	7003      	strb	r3, [r0, #0]
 801494c:	784b      	ldrb	r3, [r1, #1]
 801494e:	7043      	strb	r3, [r0, #1]
 8014950:	1d07      	adds	r7, r0, #4
 8014952:	f101 0804 	add.w	r8, r1, #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014956:	f8d8 6004 	ldr.w	r6, [r8, #4]
 801495a:	684b      	ldr	r3, [r1, #4]
 801495c:	1af6      	subs	r6, r6, r3
 801495e:	1076      	asrs	r6, r6, #1
 8014960:	4b4c      	ldr	r3, [pc, #304]	; (8014a94 <_ZN23SubscriberConfigurationC1ERKS_+0x154>)
 8014962:	fb03 f606 	mul.w	r6, r3, r6
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014966:	2300      	movs	r3, #0
 8014968:	6043      	str	r3, [r0, #4]
 801496a:	607b      	str	r3, [r7, #4]
 801496c:	60bb      	str	r3, [r7, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801496e:	2e00      	cmp	r6, #0
 8014970:	d07f      	beq.n	8014a72 <_ZN23SubscriberConfigurationC1ERKS_+0x132>
	if (__n > this->_M_max_size())
 8014972:	4b49      	ldr	r3, [pc, #292]	; (8014a98 <_ZN23SubscriberConfigurationC1ERKS_+0x158>)
 8014974:	429e      	cmp	r6, r3
 8014976:	d87a      	bhi.n	8014a6e <_ZN23SubscriberConfigurationC1ERKS_+0x12e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8014978:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 801497c:	0040      	lsls	r0, r0, #1
 801497e:	f006 fb07 	bl	801af90 <_Znwj>
	this->_M_impl._M_start = this->_M_allocate(__n);
 8014982:	6060      	str	r0, [r4, #4]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8014984:	6078      	str	r0, [r7, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8014986:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801498a:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801498e:	60be      	str	r6, [r7, #8]
      : _M_current(__i) { }
 8014990:	f8d8 9004 	ldr.w	r9, [r8, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8014994:	f8d4 8004 	ldr.w	r8, [r4, #4]
      return std::__niter_wrap(__result,
 8014998:	6868      	ldr	r0, [r5, #4]
 801499a:	f7ff ffce 	bl	801493a <_ZSt12__niter_baseIPK8RegisterSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 801499e:	4606      	mov	r6, r0
 80149a0:	4648      	mov	r0, r9
 80149a2:	f7ff ffca 	bl	801493a <_ZSt12__niter_baseIPK8RegisterSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
	  const ptrdiff_t _Num = __last - __first;
 80149a6:	eba0 0906 	sub.w	r9, r0, r6
	  if (_Num)
 80149aa:	4286      	cmp	r6, r0
 80149ac:	d004      	beq.n	80149b8 <_ZN23SubscriberConfigurationC1ERKS_+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80149ae:	464a      	mov	r2, r9
 80149b0:	4631      	mov	r1, r6
 80149b2:	4640      	mov	r0, r8
 80149b4:	f006 ffaa 	bl	801b90c <memmove>
	  return __result + _Num;
 80149b8:	eb08 0209 	add.w	r2, r8, r9
	this->_M_impl._M_finish =
 80149bc:	607a      	str	r2, [r7, #4]
 80149be:	f104 0710 	add.w	r7, r4, #16
 80149c2:	f105 0810 	add.w	r8, r5, #16
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80149c6:	f8d8 6004 	ldr.w	r6, [r8, #4]
 80149ca:	692b      	ldr	r3, [r5, #16]
 80149cc:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 80149ce:	2300      	movs	r3, #0
 80149d0:	6123      	str	r3, [r4, #16]
 80149d2:	607b      	str	r3, [r7, #4]
 80149d4:	60bb      	str	r3, [r7, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80149d6:	1076      	asrs	r6, r6, #1
 80149d8:	d04f      	beq.n	8014a7a <_ZN23SubscriberConfigurationC1ERKS_+0x13a>
	if (__n > this->_M_max_size())
 80149da:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80149de:	d24a      	bcs.n	8014a76 <_ZN23SubscriberConfigurationC1ERKS_+0x136>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80149e0:	0070      	lsls	r0, r6, #1
 80149e2:	f006 fad5 	bl	801af90 <_Znwj>
	this->_M_impl._M_start = this->_M_allocate(__n);
 80149e6:	6120      	str	r0, [r4, #16]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80149e8:	6078      	str	r0, [r7, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80149ea:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80149ee:	60b8      	str	r0, [r7, #8]
 80149f0:	f8d8 9004 	ldr.w	r9, [r8, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80149f4:	f8d4 8010 	ldr.w	r8, [r4, #16]
      return std::__niter_wrap(__result,
 80149f8:	6928      	ldr	r0, [r5, #16]
 80149fa:	f7ff ff9f 	bl	801493c <_ZSt12__niter_baseIPK19SubscriberInterfaceSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 80149fe:	4606      	mov	r6, r0
 8014a00:	4648      	mov	r0, r9
 8014a02:	f7ff ff9b 	bl	801493c <_ZSt12__niter_baseIPK19SubscriberInterfaceSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
	  const ptrdiff_t _Num = __last - __first;
 8014a06:	eba0 0906 	sub.w	r9, r0, r6
	  if (_Num)
 8014a0a:	4286      	cmp	r6, r0
 8014a0c:	d004      	beq.n	8014a18 <_ZN23SubscriberConfigurationC1ERKS_+0xd8>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8014a0e:	464a      	mov	r2, r9
 8014a10:	4631      	mov	r1, r6
 8014a12:	4640      	mov	r0, r8
 8014a14:	f006 ff7a 	bl	801b90c <memmove>
	  return __result + _Num;
 8014a18:	eb08 0209 	add.w	r2, r8, r9
	this->_M_impl._M_finish =
 8014a1c:	607a      	str	r2, [r7, #4]
 8014a1e:	f104 071c 	add.w	r7, r4, #28
 8014a22:	f105 081c 	add.w	r8, r5, #28
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014a26:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014a2a:	69ee      	ldr	r6, [r5, #28]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	61e3      	str	r3, [r4, #28]
 8014a30:	607b      	str	r3, [r7, #4]
 8014a32:	60bb      	str	r3, [r7, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014a34:	1b86      	subs	r6, r0, r6
 8014a36:	d024      	beq.n	8014a82 <_ZN23SubscriberConfigurationC1ERKS_+0x142>
	if (__n > this->_M_max_size())
 8014a38:	429e      	cmp	r6, r3
 8014a3a:	db20      	blt.n	8014a7e <_ZN23SubscriberConfigurationC1ERKS_+0x13e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8014a3c:	4630      	mov	r0, r6
 8014a3e:	f006 faa7 	bl	801af90 <_Znwj>
	this->_M_impl._M_start = this->_M_allocate(__n);
 8014a42:	61e0      	str	r0, [r4, #28]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8014a44:	6078      	str	r0, [r7, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8014a46:	4430      	add	r0, r6
 8014a48:	60b8      	str	r0, [r7, #8]
 8014a4a:	f8d8 9004 	ldr.w	r9, [r8, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8014a4e:	f8d4 801c 	ldr.w	r8, [r4, #28]
      return std::__niter_wrap(__result,
 8014a52:	69e8      	ldr	r0, [r5, #28]
 8014a54:	f7ed f82f 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8014a58:	4606      	mov	r6, r0
 8014a5a:	4648      	mov	r0, r9
 8014a5c:	f7ed f82b 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8014a60:	1b85      	subs	r5, r0, r6
 8014a62:	d110      	bne.n	8014a86 <_ZN23SubscriberConfigurationC1ERKS_+0x146>
	  return __result + _Num;
 8014a64:	4445      	add	r5, r8
	this->_M_impl._M_finish =
 8014a66:	607d      	str	r5, [r7, #4]
 8014a68:	4620      	mov	r0, r4
 8014a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	  std::__throw_bad_alloc();
 8014a6e:	f006 fb3d 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014a72:	2000      	movs	r0, #0
 8014a74:	e785      	b.n	8014982 <_ZN23SubscriberConfigurationC1ERKS_+0x42>
 8014a76:	f006 fb39 	bl	801b0ec <_ZSt17__throw_bad_allocv>
 8014a7a:	2000      	movs	r0, #0
 8014a7c:	e7b3      	b.n	80149e6 <_ZN23SubscriberConfigurationC1ERKS_+0xa6>
 8014a7e:	f006 fb35 	bl	801b0ec <_ZSt17__throw_bad_allocv>
 8014a82:	2000      	movs	r0, #0
 8014a84:	e7dd      	b.n	8014a42 <_ZN23SubscriberConfigurationC1ERKS_+0x102>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8014a86:	462a      	mov	r2, r5
 8014a88:	4631      	mov	r1, r6
 8014a8a:	4640      	mov	r0, r8
 8014a8c:	f006 ff3e 	bl	801b90c <memmove>
 8014a90:	e7e8      	b.n	8014a64 <_ZN23SubscriberConfigurationC1ERKS_+0x124>
 8014a92:	bf00      	nop
 8014a94:	aaaaaaab 	.word	0xaaaaaaab
 8014a98:	15555555 	.word	0x15555555

08014a9c <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_>:
	std::vector<SubscriberConfiguration> configurations;
	std::vector<Subscriber*> subscribers;
};

template<typename T>
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 8014a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014aa0:	b090      	sub	sp, #64	; 0x40
 8014aa2:	4607      	mov	r7, r0
 8014aa4:	a803      	add	r0, sp, #12
 8014aa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t index = 0;
	for (SubscriberConfiguration configuration : configurations) {
 8014aaa:	68f9      	ldr	r1, [r7, #12]
 8014aac:	693e      	ldr	r6, [r7, #16]
	uint8_t index = 0;
 8014aae:	2400      	movs	r4, #0
 8014ab0:	e048      	b.n	8014b44 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0xa8>
		if (configuration.activated) {
			if (/*SubscribedToRegister(configuration.ID, information.register_.address) || */SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 8014ab2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014ab6:	f8ad 3000 	strh.w	r3, [sp]
 8014aba:	ab03      	add	r3, sp, #12
 8014abc:	cb0c      	ldmia	r3, {r2, r3}
 8014abe:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8014ac2:	4638      	mov	r0, r7
 8014ac4:	f006 f8f2 	bl	801acac <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 8014ac8:	2800      	cmp	r0, #0
 8014aca:	d045      	beq.n	8014b58 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0xbc>
				if (AddressAccepted(configuration.ID, information.interface.address)) { // filter stage
 8014acc:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8014ad0:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8014ad4:	4638      	mov	r0, r7
 8014ad6:	f006 f82e 	bl	801ab36 <_ZN17MasterSubscribers15AddressAcceptedEhh>
 8014ada:	2800      	cmp	r0, #0
 8014adc:	d03c      	beq.n	8014b58 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0xbc>
#ifdef USE_COM_LED_SUBSCRIBER_INPUT
					leds->CommunicationLED(information.interface.interface);
 8014ade:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8014ae2:	6878      	ldr	r0, [r7, #4]
 8014ae4:	f001 fe29 	bl	801673a <_ZN4LEDS16CommunicationLEDEh>
#endif

					switch (information.register_.type) {
 8014ae8:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8014aec:	2b02      	cmp	r3, #2
 8014aee:	d00f      	beq.n	8014b10 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x74>
 8014af0:	2b08      	cmp	r3, #8
 8014af2:	d019      	beq.n	8014b28 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x8c>
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d12f      	bne.n	8014b58 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0xbc>
	return *(this->_M_impl._M_start + __n);
 8014af8:	69bb      	ldr	r3, [r7, #24]
#if defined(USE_UINT8_COMMUNICATION) && defined(USE_UINT8_REGISTER)
					case UINT8_TYPE:
						subscribers[index]->ReceiveUINT8(information, (uint8_t*) data);
 8014afa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014afe:	6803      	ldr	r3, [r0, #0]
 8014b00:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014b02:	9200      	str	r2, [sp, #0]
 8014b04:	f8d3 8000 	ldr.w	r8, [r3]
 8014b08:	ab03      	add	r3, sp, #12
 8014b0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014b0c:	47c0      	blx	r8
						break;
 8014b0e:	e023      	b.n	8014b58 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0xbc>
 8014b10:	69bb      	ldr	r3, [r7, #24]
						subscribers[index]->ReceiveUINT16(information, (uint16_t*) data);
						break;
#endif
#if defined(USE_UINT32_COMMUNICATION) && defined(USE_UINT32_REGISTER)
					case UINT32_TYPE:
						subscribers[index]->ReceiveUINT32(information, (uint32_t*) data);
 8014b12:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014b16:	6803      	ldr	r3, [r0, #0]
 8014b18:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014b1a:	9200      	str	r2, [sp, #0]
 8014b1c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8014b20:	ab03      	add	r3, sp, #12
 8014b22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014b24:	47c0      	blx	r8
						break;
 8014b26:	e017      	b.n	8014b58 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0xbc>
 8014b28:	69bb      	ldr	r3, [r7, #24]
						subscribers[index]->ReceiveINT64(information, (int64_t*) data);
						break;
#endif
#if defined(USE_FLOAT_COMMUNICATION) && defined(USE_FLOAT_REGISTER)
					case FLOAT_TYPE:
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 8014b2a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014b2e:	6803      	ldr	r3, [r0, #0]
 8014b30:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014b32:	9200      	str	r2, [sp, #0]
 8014b34:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8014b38:	ab03      	add	r3, sp, #12
 8014b3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014b3c:	47c0      	blx	r8
						break;
 8014b3e:	e00b      	b.n	8014b58 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0xbc>
	++_M_current;
 8014b40:	f105 0128 	add.w	r1, r5, #40	; 0x28
    { return __lhs.base() != __rhs.base(); }
 8014b44:	460d      	mov	r5, r1
	for (SubscriberConfiguration configuration : configurations) {
 8014b46:	428e      	cmp	r6, r1
 8014b48:	d01c      	beq.n	8014b84 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0xe8>
 8014b4a:	a806      	add	r0, sp, #24
 8014b4c:	f7ff fef8 	bl	8014940 <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 8014b50:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d1ac      	bne.n	8014ab2 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0x16>
						break;
					}
				}
			}
		}
		index++;
 8014b58:	3401      	adds	r4, #1
 8014b5a:	b2e4      	uxtb	r4, r4
	_M_deallocate(_M_impl._M_start,
 8014b5c:	980d      	ldr	r0, [sp, #52]	; 0x34
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014b5e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014b60:	1a09      	subs	r1, r1, r0
	if (__p)
 8014b62:	b108      	cbz	r0, 8014b68 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0xcc>
	::operator delete(__p
 8014b64:	f006 f9fe 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8014b68:	980a      	ldr	r0, [sp, #40]	; 0x28
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014b6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014b6c:	1a09      	subs	r1, r1, r0
	if (__p)
 8014b6e:	b108      	cbz	r0, 8014b74 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0xd8>
 8014b70:	f006 f9f8 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8014b74:	9807      	ldr	r0, [sp, #28]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014b76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014b78:	1a09      	subs	r1, r1, r0
	if (__p)
 8014b7a:	2800      	cmp	r0, #0
 8014b7c:	d0e0      	beq.n	8014b40 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0xa4>
 8014b7e:	f006 f9f1 	bl	801af64 <_ZdlPvj>
 8014b82:	e7dd      	b.n	8014b40 <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_+0xa4>
	}
}
 8014b84:	b010      	add	sp, #64	; 0x40
 8014b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014b8a <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8014b8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b8e:	b09d      	sub	sp, #116	; 0x74
 8014b90:	af02      	add	r7, sp, #8
 8014b92:	4681      	mov	r9, r0
 8014b94:	460e      	mov	r6, r1
 8014b96:	4615      	mov	r5, r2
 8014b98:	4698      	mov	r8, r3
	T array_values[element.element_register.length];
 8014b9a:	f8b2 c004 	ldrh.w	ip, [r2, #4]
 8014b9e:	f10c 0c07 	add.w	ip, ip, #7
 8014ba2:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8014ba6:	466b      	mov	r3, sp
 8014ba8:	eba3 03cc 	sub.w	r3, r3, ip, lsl #3
 8014bac:	469d      	mov	sp, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014bae:	2300      	movs	r3, #0
 8014bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8014bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014bb4:	633b      	str	r3, [r7, #48]	; 0x30
	if (not element.element_register.isArray) {
 8014bb6:	78d3      	ldrb	r3, [r2, #3]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d057      	beq.n	8014c6c <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0xe2>
 8014bbc:	f10d 0b08 	add.w	fp, sp, #8
 8014bc0:	46da      	mov	sl, fp
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8014bc2:	8894      	ldrh	r4, [r2, #4]
 8014bc4:	2c00      	cmp	r4, #0
 8014bc6:	f040 808a 	bne.w	8014cde <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0x154>
	} else if (element.element_register.isArray && element.element_register.length == 0) { //TODO length never == 0
 8014bca:	8893      	ldrh	r3, [r2, #4]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d165      	bne.n	8014c9c <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0x112>
	return *(this->_M_impl._M_start + __n);
 8014bd0:	f851 3f04 	ldr.w	r3, [r1, #4]!
		length_to_extract = message.payload[start_index];
 8014bd4:	f813 4008 	ldrb.w	r4, [r3, r8]
		start_index++;
 8014bd8:	f108 0801 	add.w	r8, r8, #1
 8014bdc:	fa1f f888 	uxth.w	r8, r8
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8014be0:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8014be4:	f7fc f843 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8014be8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8014bec:	9301      	str	r3, [sp, #4]
 8014bee:	9400      	str	r4, [sp, #0]
 8014bf0:	4643      	mov	r3, r8
 8014bf2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8014bf6:	4649      	mov	r1, r9
 8014bf8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8014bfc:	f7fc fa74 	bl	80110e8 <_ZN13Communication13ExtractVectorIhEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014c00:	2300      	movs	r3, #0
 8014c02:	607b      	str	r3, [r7, #4]
 8014c04:	60bb      	str	r3, [r7, #8]
 8014c06:	60fb      	str	r3, [r7, #12]
 8014c08:	613b      	str	r3, [r7, #16]
 8014c0a:	617b      	str	r3, [r7, #20]
 8014c0c:	61bb      	str	r3, [r7, #24]
	  _M_start = __x._M_start;
 8014c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c10:	6138      	str	r0, [r7, #16]
	  _M_finish = __x._M_finish;
 8014c12:	f8d7 c02c 	ldr.w	ip, [r7, #44]	; 0x2c
 8014c16:	f8c7 c014 	str.w	ip, [r7, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
 8014c1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014c1c:	61b9      	str	r1, [r7, #24]
	  _M_start = __x._M_start;
 8014c1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014c20:	62ba      	str	r2, [r7, #40]	; 0x28
	  _M_finish = __x._M_finish;
 8014c22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014c24:	62fa      	str	r2, [r7, #44]	; 0x2c
	  _M_end_of_storage = __x._M_end_of_storage;
 8014c26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014c28:	633a      	str	r2, [r7, #48]	; 0x30
	  _M_start = __x._M_start;
 8014c2a:	6538      	str	r0, [r7, #80]	; 0x50
	  _M_finish = __x._M_finish;
 8014c2c:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
	  _M_end_of_storage = __x._M_end_of_storage;
 8014c30:	65b9      	str	r1, [r7, #88]	; 0x58
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014c32:	613b      	str	r3, [r7, #16]
 8014c34:	617b      	str	r3, [r7, #20]
 8014c36:	61bb      	str	r3, [r7, #24]
	  _M_start = __x._M_start;
 8014c38:	6078      	str	r0, [r7, #4]
	  _M_finish = __x._M_finish;
 8014c3a:	f8c7 c008 	str.w	ip, [r7, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 8014c3e:	60f9      	str	r1, [r7, #12]
	  _M_start = __x._M_start;
 8014c40:	653b      	str	r3, [r7, #80]	; 0x50
	  _M_finish = __x._M_finish;
 8014c42:	657b      	str	r3, [r7, #84]	; 0x54
	  _M_end_of_storage = __x._M_end_of_storage;
 8014c44:	65bb      	str	r3, [r7, #88]	; 0x58
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014c46:	1a09      	subs	r1, r1, r0
	if (__p)
 8014c48:	b108      	cbz	r0, 8014c4e <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0xc4>
 8014c4a:	f006 f98b 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8014c4e:	6d38      	ldr	r0, [r7, #80]	; 0x50
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014c50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014c52:	1a09      	subs	r1, r1, r0
	if (__p)
 8014c54:	b108      	cbz	r0, 8014c5a <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0xd0>
 8014c56:	f006 f985 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8014c5a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014c5c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014c5e:	1a09      	subs	r1, r1, r0
	if (__p)
 8014c60:	b108      	cbz	r0, 8014c66 <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0xdc>
 8014c62:	f006 f97f 	bl	801af64 <_ZdlPvj>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8014c66:	f8d7 a028 	ldr.w	sl, [r7, #40]	; 0x28
 8014c6a:	e017      	b.n	8014c9c <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0x112>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8014c6c:	3104      	adds	r1, #4
 8014c6e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8014c72:	f7fb fffc 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8014c76:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8014c7a:	4642      	mov	r2, r8
 8014c7c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8014c80:	4648      	mov	r0, r9
 8014c82:	f7fa fc33 	bl	800f4ec <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb>
 8014c86:	f887 0037 	strb.w	r0, [r7, #55]	; 0x37
	_M_deallocate(_M_impl._M_start,
 8014c8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014c8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014c8e:	1a09      	subs	r1, r1, r0
	if (__p)
 8014c90:	b108      	cbz	r0, 8014c96 <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0x10c>
 8014c92:	f006 f967 	bl	801af64 <_ZdlPvj>
		data = &single_value;
 8014c96:	f107 0a37 	add.w	sl, r7, #55	; 0x37
		length_to_extract = 1;
 8014c9a:	2401      	movs	r4, #1
	subscriber_information.interface.interface = message.interface;
 8014c9c:	7833      	ldrb	r3, [r6, #0]
 8014c9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	subscriber_information.interface.address = message.source_address;
 8014ca2:	7c73      	ldrb	r3, [r6, #17]
 8014ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	subscriber_information.register_ = element.element_register;
 8014ca8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014cac:	61f8      	str	r0, [r7, #28]
 8014cae:	8439      	strh	r1, [r7, #32]
	subscriber_information.length = length_to_extract;
 8014cb0:	84bc      	strh	r4, [r7, #36]	; 0x24
	subscribers->Receive<T>(subscriber_information, data);
 8014cb2:	f8cd a000 	str.w	sl, [sp]
 8014cb6:	f107 031c 	add.w	r3, r7, #28
 8014cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014cbc:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8014cc0:	f7ff feec 	bl	8014a9c <_ZN17MasterSubscribers7ReceiveIhEEv15SubscriberInputPT_>
	return start_index + sizeof(T) * length_to_extract;
 8014cc4:	4444      	add	r4, r8
 8014cc6:	b2a4      	uxth	r4, r4
	_M_deallocate(_M_impl._M_start,
 8014cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014cca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014ccc:	1a09      	subs	r1, r1, r0
	if (__p)
 8014cce:	b108      	cbz	r0, 8014cd4 <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0x14a>
 8014cd0:	f006 f948 	bl	801af64 <_ZdlPvj>
}
 8014cd4:	4620      	mov	r0, r4
 8014cd6:	376c      	adds	r7, #108	; 0x6c
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8014cde:	3104      	adds	r1, #4
 8014ce0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8014ce4:	f7fb ffc3 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8014ce8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8014cec:	9301      	str	r3, [sp, #4]
 8014cee:	9400      	str	r4, [sp, #0]
 8014cf0:	4643      	mov	r3, r8
 8014cf2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8014cf6:	4659      	mov	r1, fp
 8014cf8:	4648      	mov	r0, r9
 8014cfa:	f7fc f8e7 	bl	8010ecc <_ZN13Communication12ExtractArrayIhEEvPT_St6vectorIhSaIhEEttPb>
	_M_deallocate(_M_impl._M_start,
 8014cfe:	6c78      	ldr	r0, [r7, #68]	; 0x44
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014d00:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014d02:	1a09      	subs	r1, r1, r0
	if (__p)
 8014d04:	2800      	cmp	r0, #0
 8014d06:	d0c9      	beq.n	8014c9c <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0x112>
 8014d08:	f006 f92c 	bl	801af64 <_ZdlPvj>
		data = array_values;
 8014d0c:	e7c6      	b.n	8014c9c <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt+0x112>

08014d0e <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8014d0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d12:	b0a5      	sub	sp, #148	; 0x94
 8014d14:	4606      	mov	r6, r0
 8014d16:	460d      	mov	r5, r1
 8014d18:	461c      	mov	r4, r3
 8014d1a:	f8bd 80b8 	ldrh.w	r8, [sp, #184]	; 0xb8
	if (not element.ack && element.command) {
 8014d1e:	799b      	ldrb	r3, [r3, #6]
 8014d20:	b91b      	cbnz	r3, 8014d2a <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x1c>
 8014d22:	4617      	mov	r7, r2
 8014d24:	79e2      	ldrb	r2, [r4, #7]
 8014d26:	2a00      	cmp	r2, #0
 8014d28:	d15b      	bne.n	8014de2 <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0xd4>
	} else if (element.ack) {
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	f000 809b 	beq.w	8014e66 <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x158>
 8014d30:	46a9      	mov	r9, r5
 8014d32:	f819 3b04 	ldrb.w	r3, [r9], #4
 8014d36:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014d3a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8014d3e:	686a      	ldr	r2, [r5, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014d40:	2300      	movs	r3, #0
 8014d42:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d44:	9310      	str	r3, [sp, #64]	; 0x40
 8014d46:	9311      	str	r3, [sp, #68]	; 0x44
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014d48:	1abf      	subs	r7, r7, r2
 8014d4a:	f000 8083 	beq.w	8014e54 <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x146>
	if (__n > this->_M_max_size())
 8014d4e:	429f      	cmp	r7, r3
 8014d50:	db7e      	blt.n	8014e50 <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x142>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8014d52:	4638      	mov	r0, r7
 8014d54:	f006 f91c 	bl	801af90 <_Znwj>
 8014d58:	4682      	mov	sl, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8014d5a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8014d5e:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8014d62:	4457      	add	r7, sl
 8014d64:	9711      	str	r7, [sp, #68]	; 0x44
      : _M_current(__i) { }
 8014d66:	f8d9 b004 	ldr.w	fp, [r9, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8014d6a:	46d1      	mov	r9, sl
      return std::__niter_wrap(__result,
 8014d6c:	6868      	ldr	r0, [r5, #4]
 8014d6e:	f7ec fea2 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8014d72:	4607      	mov	r7, r0
 8014d74:	4658      	mov	r0, fp
 8014d76:	f7ec fe9e 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8014d7a:	ebb0 0b07 	subs.w	fp, r0, r7
 8014d7e:	d16c      	bne.n	8014e5a <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x14c>
	  return __result + _Num;
 8014d80:	eb09 000b 	add.w	r0, r9, fp
	this->_M_impl._M_finish =
 8014d84:	9010      	str	r0, [sp, #64]	; 0x40
 8014d86:	7c2b      	ldrb	r3, [r5, #16]
 8014d88:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8014d8c:	7c6b      	ldrb	r3, [r5, #17]
 8014d8e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 8014d92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014d96:	9013      	str	r0, [sp, #76]	; 0x4c
 8014d98:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
 8014d9c:	79a3      	ldrb	r3, [r4, #6]
 8014d9e:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
 8014da2:	79e3      	ldrb	r3, [r4, #7]
 8014da4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014da8:	7a23      	ldrb	r3, [r4, #8]
 8014daa:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8014dae:	f104 010c 	add.w	r1, r4, #12
 8014db2:	a816      	add	r0, sp, #88	; 0x58
 8014db4:	f7fb ff5b 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		return ProcessService<T>(message, element, start_index);
 8014db8:	4643      	mov	r3, r8
 8014dba:	aa13      	add	r2, sp, #76	; 0x4c
 8014dbc:	a90e      	add	r1, sp, #56	; 0x38
 8014dbe:	4630      	mov	r0, r6
 8014dc0:	f7fc fa02 	bl	80111c8 <_ZN13Communication14ProcessServiceIhEEt13MessageHeader14MessageElementt>
 8014dc4:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8014dc6:	9816      	ldr	r0, [sp, #88]	; 0x58
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014dc8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014dca:	1a09      	subs	r1, r1, r0
	if (__p)
 8014dcc:	b108      	cbz	r0, 8014dd2 <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0xc4>
	::operator delete(__p
 8014dce:	f006 f8c9 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8014dd2:	980f      	ldr	r0, [sp, #60]	; 0x3c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014dd4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014dd6:	1a09      	subs	r1, r1, r0
	if (__p)
 8014dd8:	2800      	cmp	r0, #0
 8014dda:	d078      	beq.n	8014ece <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x1c0>
 8014ddc:	f006 f8c2 	bl	801af64 <_ZdlPvj>
 8014de0:	e075      	b.n	8014ece <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x1c0>
 8014de2:	f811 3b04 	ldrb.w	r3, [r1], #4
 8014de6:	f88d 300c 	strb.w	r3, [sp, #12]
 8014dea:	a804      	add	r0, sp, #16
 8014dec:	f7fb ff3f 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8014df0:	7c2b      	ldrb	r3, [r5, #16]
 8014df2:	f88d 301c 	strb.w	r3, [sp, #28]
 8014df6:	7c6b      	ldrb	r3, [r5, #17]
 8014df8:	f88d 301d 	strb.w	r3, [sp, #29]
 8014dfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014e00:	9008      	str	r0, [sp, #32]
 8014e02:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8014e06:	79a3      	ldrb	r3, [r4, #6]
 8014e08:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 8014e0c:	79e3      	ldrb	r3, [r4, #7]
 8014e0e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8014e12:	7a23      	ldrb	r3, [r4, #8]
 8014e14:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8014e18:	f104 010c 	add.w	r1, r4, #12
 8014e1c:	a80b      	add	r0, sp, #44	; 0x2c
 8014e1e:	f7fb ff26 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		return ProcessCommand<T>(message, response, element, start_index);
 8014e22:	f8cd 8000 	str.w	r8, [sp]
 8014e26:	ab08      	add	r3, sp, #32
 8014e28:	463a      	mov	r2, r7
 8014e2a:	a903      	add	r1, sp, #12
 8014e2c:	4630      	mov	r0, r6
 8014e2e:	f7fd ff68 	bl	8012d02 <_ZN13Communication14ProcessCommandIhEEt13MessageHeaderPS1_14MessageElementt>
 8014e32:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8014e34:	980b      	ldr	r0, [sp, #44]	; 0x2c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014e36:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014e38:	1a09      	subs	r1, r1, r0
	if (__p)
 8014e3a:	b108      	cbz	r0, 8014e40 <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x132>
 8014e3c:	f006 f892 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8014e40:	9804      	ldr	r0, [sp, #16]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014e42:	9906      	ldr	r1, [sp, #24]
 8014e44:	1a09      	subs	r1, r1, r0
	if (__p)
 8014e46:	2800      	cmp	r0, #0
 8014e48:	d041      	beq.n	8014ece <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x1c0>
 8014e4a:	f006 f88b 	bl	801af64 <_ZdlPvj>
 8014e4e:	e03e      	b.n	8014ece <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x1c0>
	  std::__throw_bad_alloc();
 8014e50:	f006 f94c 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014e54:	f04f 0a00 	mov.w	sl, #0
 8014e58:	e77f      	b.n	8014d5a <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x4c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8014e5a:	465a      	mov	r2, fp
 8014e5c:	4639      	mov	r1, r7
 8014e5e:	4650      	mov	r0, sl
 8014e60:	f006 fd54 	bl	801b90c <memmove>
 8014e64:	e78c      	b.n	8014d80 <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x72>
 8014e66:	4629      	mov	r1, r5
 8014e68:	f811 3b04 	ldrb.w	r3, [r1], #4
 8014e6c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8014e70:	a81a      	add	r0, sp, #104	; 0x68
 8014e72:	f7fb fefc 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8014e76:	7c2b      	ldrb	r3, [r5, #16]
 8014e78:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
 8014e7c:	7c6b      	ldrb	r3, [r5, #17]
 8014e7e:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
 8014e82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014e86:	901e      	str	r0, [sp, #120]	; 0x78
 8014e88:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
 8014e8c:	79a3      	ldrb	r3, [r4, #6]
 8014e8e:	f88d 307e 	strb.w	r3, [sp, #126]	; 0x7e
 8014e92:	79e3      	ldrb	r3, [r4, #7]
 8014e94:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8014e98:	7a23      	ldrb	r3, [r4, #8]
 8014e9a:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8014e9e:	f104 010c 	add.w	r1, r4, #12
 8014ea2:	a821      	add	r0, sp, #132	; 0x84
 8014ea4:	f7fb fee3 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		return ProcessSubscriber<T>(message, element, start_index);
 8014ea8:	4643      	mov	r3, r8
 8014eaa:	aa1e      	add	r2, sp, #120	; 0x78
 8014eac:	a919      	add	r1, sp, #100	; 0x64
 8014eae:	4630      	mov	r0, r6
 8014eb0:	f7ff fe6b 	bl	8014b8a <_ZN13Communication17ProcessSubscriberIhEEt13MessageHeader14MessageElementt>
 8014eb4:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8014eb6:	9821      	ldr	r0, [sp, #132]	; 0x84
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014eb8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8014eba:	1a09      	subs	r1, r1, r0
	if (__p)
 8014ebc:	b108      	cbz	r0, 8014ec2 <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x1b4>
	::operator delete(__p
 8014ebe:	f006 f851 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8014ec2:	981a      	ldr	r0, [sp, #104]	; 0x68
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014ec4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014ec6:	1a09      	subs	r1, r1, r0
	if (__p)
 8014ec8:	b108      	cbz	r0, 8014ece <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt+0x1c0>
 8014eca:	f006 f84b 	bl	801af64 <_ZdlPvj>
}
 8014ece:	4620      	mov	r0, r4
 8014ed0:	b025      	add	sp, #148	; 0x94
 8014ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014ed6 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_>:
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 8014ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014eda:	b090      	sub	sp, #64	; 0x40
 8014edc:	4607      	mov	r7, r0
 8014ede:	a803      	add	r0, sp, #12
 8014ee0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	for (SubscriberConfiguration configuration : configurations) {
 8014ee4:	68f9      	ldr	r1, [r7, #12]
 8014ee6:	693e      	ldr	r6, [r7, #16]
	uint8_t index = 0;
 8014ee8:	2400      	movs	r4, #0
 8014eea:	e048      	b.n	8014f7e <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0xa8>
			if (/*SubscribedToRegister(configuration.ID, information.register_.address) || */SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 8014eec:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014ef0:	f8ad 3000 	strh.w	r3, [sp]
 8014ef4:	ab03      	add	r3, sp, #12
 8014ef6:	cb0c      	ldmia	r3, {r2, r3}
 8014ef8:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8014efc:	4638      	mov	r0, r7
 8014efe:	f005 fed5 	bl	801acac <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 8014f02:	2800      	cmp	r0, #0
 8014f04:	d045      	beq.n	8014f92 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0xbc>
				if (AddressAccepted(configuration.ID, information.interface.address)) { // filter stage
 8014f06:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8014f0a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8014f0e:	4638      	mov	r0, r7
 8014f10:	f005 fe11 	bl	801ab36 <_ZN17MasterSubscribers15AddressAcceptedEhh>
 8014f14:	2800      	cmp	r0, #0
 8014f16:	d03c      	beq.n	8014f92 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0xbc>
					leds->CommunicationLED(information.interface.interface);
 8014f18:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8014f1c:	6878      	ldr	r0, [r7, #4]
 8014f1e:	f001 fc0c 	bl	801673a <_ZN4LEDS16CommunicationLEDEh>
					switch (information.register_.type) {
 8014f22:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8014f26:	2b02      	cmp	r3, #2
 8014f28:	d00f      	beq.n	8014f4a <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x74>
 8014f2a:	2b08      	cmp	r3, #8
 8014f2c:	d019      	beq.n	8014f62 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x8c>
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d12f      	bne.n	8014f92 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0xbc>
	return *(this->_M_impl._M_start + __n);
 8014f32:	69bb      	ldr	r3, [r7, #24]
						subscribers[index]->ReceiveUINT8(information, (uint8_t*) data);
 8014f34:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014f38:	6803      	ldr	r3, [r0, #0]
 8014f3a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014f3c:	9200      	str	r2, [sp, #0]
 8014f3e:	f8d3 8000 	ldr.w	r8, [r3]
 8014f42:	ab03      	add	r3, sp, #12
 8014f44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014f46:	47c0      	blx	r8
						break;
 8014f48:	e023      	b.n	8014f92 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0xbc>
 8014f4a:	69bb      	ldr	r3, [r7, #24]
						subscribers[index]->ReceiveUINT32(information, (uint32_t*) data);
 8014f4c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014f50:	6803      	ldr	r3, [r0, #0]
 8014f52:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014f54:	9200      	str	r2, [sp, #0]
 8014f56:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8014f5a:	ab03      	add	r3, sp, #12
 8014f5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014f5e:	47c0      	blx	r8
						break;
 8014f60:	e017      	b.n	8014f92 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0xbc>
 8014f62:	69bb      	ldr	r3, [r7, #24]
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 8014f64:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014f68:	6803      	ldr	r3, [r0, #0]
 8014f6a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014f6c:	9200      	str	r2, [sp, #0]
 8014f6e:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8014f72:	ab03      	add	r3, sp, #12
 8014f74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014f76:	47c0      	blx	r8
						break;
 8014f78:	e00b      	b.n	8014f92 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0xbc>
	++_M_current;
 8014f7a:	f105 0128 	add.w	r1, r5, #40	; 0x28
    { return __lhs.base() != __rhs.base(); }
 8014f7e:	460d      	mov	r5, r1
	for (SubscriberConfiguration configuration : configurations) {
 8014f80:	428e      	cmp	r6, r1
 8014f82:	d01c      	beq.n	8014fbe <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0xe8>
 8014f84:	a806      	add	r0, sp, #24
 8014f86:	f7ff fcdb 	bl	8014940 <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 8014f8a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d1ac      	bne.n	8014eec <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x16>
		index++;
 8014f92:	3401      	adds	r4, #1
 8014f94:	b2e4      	uxtb	r4, r4
	_M_deallocate(_M_impl._M_start,
 8014f96:	980d      	ldr	r0, [sp, #52]	; 0x34
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014f98:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014f9a:	1a09      	subs	r1, r1, r0
	if (__p)
 8014f9c:	b108      	cbz	r0, 8014fa2 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0xcc>
 8014f9e:	f005 ffe1 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8014fa2:	980a      	ldr	r0, [sp, #40]	; 0x28
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014fa4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014fa6:	1a09      	subs	r1, r1, r0
	if (__p)
 8014fa8:	b108      	cbz	r0, 8014fae <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0xd8>
 8014faa:	f005 ffdb 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8014fae:	9807      	ldr	r0, [sp, #28]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8014fb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014fb2:	1a09      	subs	r1, r1, r0
	if (__p)
 8014fb4:	2800      	cmp	r0, #0
 8014fb6:	d0e0      	beq.n	8014f7a <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0xa4>
 8014fb8:	f005 ffd4 	bl	801af64 <_ZdlPvj>
 8014fbc:	e7dd      	b.n	8014f7a <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0xa4>
}
 8014fbe:	b010      	add	sp, #64	; 0x40
 8014fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014fc4 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8014fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fc8:	b09c      	sub	sp, #112	; 0x70
 8014fca:	af02      	add	r7, sp, #8
 8014fcc:	4681      	mov	r9, r0
 8014fce:	4688      	mov	r8, r1
 8014fd0:	4616      	mov	r6, r2
 8014fd2:	461c      	mov	r4, r3
	T array_values[element.element_register.length];
 8014fd4:	8893      	ldrh	r3, [r2, #4]
 8014fd6:	009b      	lsls	r3, r3, #2
 8014fd8:	3307      	adds	r3, #7
 8014fda:	08db      	lsrs	r3, r3, #3
 8014fdc:	466a      	mov	r2, sp
 8014fde:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8014fe2:	469d      	mov	sp, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8014fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014fea:	633b      	str	r3, [r7, #48]	; 0x30
	if (not element.element_register.isArray) {
 8014fec:	78f3      	ldrb	r3, [r6, #3]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d053      	beq.n	801509a <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0xd6>
 8014ff2:	f10d 0a08 	add.w	sl, sp, #8
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8014ff6:	88b5      	ldrh	r5, [r6, #4]
 8014ff8:	2d00      	cmp	r5, #0
 8014ffa:	f040 808a 	bne.w	8015112 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0x14e>
	} else if (element.element_register.isArray && element.element_register.length == 0) { //TODO length never == 0
 8014ffe:	88b3      	ldrh	r3, [r6, #4]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d161      	bne.n	80150c8 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0x104>
	return *(this->_M_impl._M_start + __n);
 8015004:	f851 3f04 	ldr.w	r3, [r1, #4]!
		length_to_extract = message.payload[start_index];
 8015008:	5d1d      	ldrb	r5, [r3, r4]
		start_index++;
 801500a:	3401      	adds	r4, #1
 801500c:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801500e:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8015012:	f7fb fe2c 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8015016:	f107 0327 	add.w	r3, r7, #39	; 0x27
 801501a:	9301      	str	r3, [sp, #4]
 801501c:	9500      	str	r5, [sp, #0]
 801501e:	4623      	mov	r3, r4
 8015020:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8015024:	4649      	mov	r1, r9
 8015026:	f107 0050 	add.w	r0, r7, #80	; 0x50
 801502a:	f7fc fb3f 	bl	80116ac <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb>
	: _M_start(), _M_finish(), _M_end_of_storage()
 801502e:	2300      	movs	r3, #0
 8015030:	607b      	str	r3, [r7, #4]
 8015032:	60bb      	str	r3, [r7, #8]
 8015034:	60fb      	str	r3, [r7, #12]
 8015036:	613b      	str	r3, [r7, #16]
 8015038:	617b      	str	r3, [r7, #20]
 801503a:	61bb      	str	r3, [r7, #24]
	  _M_start = __x._M_start;
 801503c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801503e:	6138      	str	r0, [r7, #16]
	  _M_finish = __x._M_finish;
 8015040:	f8d7 c02c 	ldr.w	ip, [r7, #44]	; 0x2c
 8015044:	f8c7 c014 	str.w	ip, [r7, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
 8015048:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801504a:	61b9      	str	r1, [r7, #24]
	  _M_start = __x._M_start;
 801504c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801504e:	62ba      	str	r2, [r7, #40]	; 0x28
	  _M_finish = __x._M_finish;
 8015050:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015052:	62fa      	str	r2, [r7, #44]	; 0x2c
	  _M_end_of_storage = __x._M_end_of_storage;
 8015054:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015056:	633a      	str	r2, [r7, #48]	; 0x30
	  _M_start = __x._M_start;
 8015058:	6538      	str	r0, [r7, #80]	; 0x50
	  _M_finish = __x._M_finish;
 801505a:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
	  _M_end_of_storage = __x._M_end_of_storage;
 801505e:	65b9      	str	r1, [r7, #88]	; 0x58
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015060:	613b      	str	r3, [r7, #16]
 8015062:	617b      	str	r3, [r7, #20]
 8015064:	61bb      	str	r3, [r7, #24]
	  _M_start = __x._M_start;
 8015066:	6078      	str	r0, [r7, #4]
	  _M_finish = __x._M_finish;
 8015068:	f8c7 c008 	str.w	ip, [r7, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 801506c:	60f9      	str	r1, [r7, #12]
	  _M_start = __x._M_start;
 801506e:	653b      	str	r3, [r7, #80]	; 0x50
	  _M_finish = __x._M_finish;
 8015070:	657b      	str	r3, [r7, #84]	; 0x54
	  _M_end_of_storage = __x._M_end_of_storage;
 8015072:	65bb      	str	r3, [r7, #88]	; 0x58
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015074:	1a09      	subs	r1, r1, r0
	if (__p)
 8015076:	b108      	cbz	r0, 801507c <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0xb8>
 8015078:	f005 ff74 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 801507c:	6d38      	ldr	r0, [r7, #80]	; 0x50
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801507e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015080:	1a09      	subs	r1, r1, r0
	if (__p)
 8015082:	b108      	cbz	r0, 8015088 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0xc4>
 8015084:	f005 ff6e 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8015088:	6df8      	ldr	r0, [r7, #92]	; 0x5c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801508a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801508c:	1a09      	subs	r1, r1, r0
	if (__p)
 801508e:	b108      	cbz	r0, 8015094 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0xd0>
 8015090:	f005 ff68 	bl	801af64 <_ZdlPvj>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8015094:	f8d7 a028 	ldr.w	sl, [r7, #40]	; 0x28
 8015098:	e016      	b.n	80150c8 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0x104>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801509a:	3104      	adds	r1, #4
 801509c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80150a0:	f7fb fde5 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80150a4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80150a8:	4622      	mov	r2, r4
 80150aa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80150ae:	4648      	mov	r0, r9
 80150b0:	f7fa fa3b 	bl	800f52a <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb>
 80150b4:	6378      	str	r0, [r7, #52]	; 0x34
	_M_deallocate(_M_impl._M_start,
 80150b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80150b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80150ba:	1a09      	subs	r1, r1, r0
	if (__p)
 80150bc:	b108      	cbz	r0, 80150c2 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0xfe>
 80150be:	f005 ff51 	bl	801af64 <_ZdlPvj>
		data = &single_value;
 80150c2:	f107 0a34 	add.w	sl, r7, #52	; 0x34
		length_to_extract = 1;
 80150c6:	2501      	movs	r5, #1
	subscriber_information.interface.interface = message.interface;
 80150c8:	f898 3000 	ldrb.w	r3, [r8]
 80150cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	subscriber_information.interface.address = message.source_address;
 80150d0:	f898 3011 	ldrb.w	r3, [r8, #17]
 80150d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	subscriber_information.register_ = element.element_register;
 80150d8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80150dc:	61f8      	str	r0, [r7, #28]
 80150de:	8439      	strh	r1, [r7, #32]
	subscriber_information.length = length_to_extract;
 80150e0:	84bd      	strh	r5, [r7, #36]	; 0x24
	subscribers->Receive<T>(subscriber_information, data);
 80150e2:	f8cd a000 	str.w	sl, [sp]
 80150e6:	f107 031c 	add.w	r3, r7, #28
 80150ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80150ec:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 80150f0:	f7ff fef1 	bl	8014ed6 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_>
	return start_index + sizeof(T) * length_to_extract;
 80150f4:	00ad      	lsls	r5, r5, #2
 80150f6:	b2ad      	uxth	r5, r5
 80150f8:	4425      	add	r5, r4
 80150fa:	b2ad      	uxth	r5, r5
	_M_deallocate(_M_impl._M_start,
 80150fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80150fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015100:	1a09      	subs	r1, r1, r0
	if (__p)
 8015102:	b108      	cbz	r0, 8015108 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0x144>
 8015104:	f005 ff2e 	bl	801af64 <_ZdlPvj>
}
 8015108:	4628      	mov	r0, r5
 801510a:	3768      	adds	r7, #104	; 0x68
 801510c:	46bd      	mov	sp, r7
 801510e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8015112:	3104      	adds	r1, #4
 8015114:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8015118:	f7fb fda9 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801511c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8015120:	9301      	str	r3, [sp, #4]
 8015122:	9500      	str	r5, [sp, #0]
 8015124:	4623      	mov	r3, r4
 8015126:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801512a:	4651      	mov	r1, sl
 801512c:	4648      	mov	r0, r9
 801512e:	f7fb ff25 	bl	8010f7c <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb>
	_M_deallocate(_M_impl._M_start,
 8015132:	6c78      	ldr	r0, [r7, #68]	; 0x44
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015134:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8015136:	1a09      	subs	r1, r1, r0
	if (__p)
 8015138:	2800      	cmp	r0, #0
 801513a:	d0c5      	beq.n	80150c8 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0x104>
 801513c:	f005 ff12 	bl	801af64 <_ZdlPvj>
		data = array_values;
 8015140:	e7c2      	b.n	80150c8 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0x104>

08015142 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8015142:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015146:	b0a4      	sub	sp, #144	; 0x90
 8015148:	4606      	mov	r6, r0
 801514a:	460d      	mov	r5, r1
 801514c:	461c      	mov	r4, r3
 801514e:	f8bd 70b0 	ldrh.w	r7, [sp, #176]	; 0xb0
	if (not element.ack && element.command) {
 8015152:	799b      	ldrb	r3, [r3, #6]
 8015154:	b91b      	cbnz	r3, 801515e <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x1c>
 8015156:	4690      	mov	r8, r2
 8015158:	79e2      	ldrb	r2, [r4, #7]
 801515a:	2a00      	cmp	r2, #0
 801515c:	d15a      	bne.n	8015214 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0xd2>
	} else if (element.ack) {
 801515e:	2b00      	cmp	r3, #0
 8015160:	f000 8099 	beq.w	8015296 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x154>
 8015164:	4629      	mov	r1, r5
 8015166:	f811 3b04 	ldrb.w	r3, [r1], #4
 801516a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 801516e:	a80f      	add	r0, sp, #60	; 0x3c
 8015170:	f7fb fd7d 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8015174:	7c2b      	ldrb	r3, [r5, #16]
 8015176:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 801517a:	7c6b      	ldrb	r3, [r5, #17]
 801517c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 8015180:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015184:	9013      	str	r0, [sp, #76]	; 0x4c
 8015186:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
 801518a:	79a3      	ldrb	r3, [r4, #6]
 801518c:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
 8015190:	79e3      	ldrb	r3, [r4, #7]
 8015192:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015196:	7a23      	ldrb	r3, [r4, #8]
 8015198:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 801519c:	f104 090c 	add.w	r9, r4, #12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80151a0:	f8d9 5004 	ldr.w	r5, [r9, #4]
 80151a4:	68e2      	ldr	r2, [r4, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80151a6:	2300      	movs	r3, #0
 80151a8:	9316      	str	r3, [sp, #88]	; 0x58
 80151aa:	9317      	str	r3, [sp, #92]	; 0x5c
 80151ac:	9318      	str	r3, [sp, #96]	; 0x60
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80151ae:	1aad      	subs	r5, r5, r2
 80151b0:	d068      	beq.n	8015284 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x142>
	if (__n > this->_M_max_size())
 80151b2:	429d      	cmp	r5, r3
 80151b4:	db64      	blt.n	8015280 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x13e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80151b6:	4628      	mov	r0, r5
 80151b8:	f005 feea 	bl	801af90 <_Znwj>
 80151bc:	4680      	mov	r8, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 80151be:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80151c2:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80151c6:	4445      	add	r5, r8
 80151c8:	9518      	str	r5, [sp, #96]	; 0x60
      : _M_current(__i) { }
 80151ca:	f8d9 a004 	ldr.w	sl, [r9, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80151ce:	46c1      	mov	r9, r8
      return std::__niter_wrap(__result,
 80151d0:	68e0      	ldr	r0, [r4, #12]
 80151d2:	f7ec fc70 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80151d6:	4605      	mov	r5, r0
 80151d8:	4650      	mov	r0, sl
 80151da:	f7ec fc6c 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 80151de:	1b44      	subs	r4, r0, r5
 80151e0:	d153      	bne.n	801528a <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x148>
	  return __result + _Num;
 80151e2:	444c      	add	r4, r9
	this->_M_impl._M_finish =
 80151e4:	9417      	str	r4, [sp, #92]	; 0x5c
		return ProcessService<T>(message, element, start_index);
 80151e6:	463b      	mov	r3, r7
 80151e8:	aa13      	add	r2, sp, #76	; 0x4c
 80151ea:	a90e      	add	r1, sp, #56	; 0x38
 80151ec:	4630      	mov	r0, r6
 80151ee:	f7fc facb 	bl	8011788 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt>
 80151f2:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 80151f4:	9816      	ldr	r0, [sp, #88]	; 0x58
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80151f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80151f8:	1a09      	subs	r1, r1, r0
	if (__p)
 80151fa:	b108      	cbz	r0, 8015200 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0xbe>
	::operator delete(__p
 80151fc:	f005 feb2 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8015200:	980f      	ldr	r0, [sp, #60]	; 0x3c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015202:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015204:	1a09      	subs	r1, r1, r0
	if (__p)
 8015206:	b108      	cbz	r0, 801520c <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0xca>
 8015208:	f005 feac 	bl	801af64 <_ZdlPvj>
}
 801520c:	4620      	mov	r0, r4
 801520e:	b024      	add	sp, #144	; 0x90
 8015210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015214:	f811 3b04 	ldrb.w	r3, [r1], #4
 8015218:	f88d 300c 	strb.w	r3, [sp, #12]
 801521c:	a804      	add	r0, sp, #16
 801521e:	f7fb fd26 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8015222:	7c2b      	ldrb	r3, [r5, #16]
 8015224:	f88d 301c 	strb.w	r3, [sp, #28]
 8015228:	7c6b      	ldrb	r3, [r5, #17]
 801522a:	f88d 301d 	strb.w	r3, [sp, #29]
 801522e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015232:	9008      	str	r0, [sp, #32]
 8015234:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8015238:	79a3      	ldrb	r3, [r4, #6]
 801523a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 801523e:	79e3      	ldrb	r3, [r4, #7]
 8015240:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8015244:	7a23      	ldrb	r3, [r4, #8]
 8015246:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801524a:	f104 010c 	add.w	r1, r4, #12
 801524e:	a80b      	add	r0, sp, #44	; 0x2c
 8015250:	f7fb fd0d 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		return ProcessCommand<T>(message, response, element, start_index);
 8015254:	9700      	str	r7, [sp, #0]
 8015256:	ab08      	add	r3, sp, #32
 8015258:	4642      	mov	r2, r8
 801525a:	a903      	add	r1, sp, #12
 801525c:	4630      	mov	r0, r6
 801525e:	f7fe fbc4 	bl	80139ea <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt>
 8015262:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8015264:	980b      	ldr	r0, [sp, #44]	; 0x2c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015266:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015268:	1a09      	subs	r1, r1, r0
	if (__p)
 801526a:	b108      	cbz	r0, 8015270 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x12e>
 801526c:	f005 fe7a 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8015270:	9804      	ldr	r0, [sp, #16]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015272:	9906      	ldr	r1, [sp, #24]
 8015274:	1a09      	subs	r1, r1, r0
	if (__p)
 8015276:	2800      	cmp	r0, #0
 8015278:	d0c8      	beq.n	801520c <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0xca>
 801527a:	f005 fe73 	bl	801af64 <_ZdlPvj>
 801527e:	e7c5      	b.n	801520c <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0xca>
	  std::__throw_bad_alloc();
 8015280:	f005 ff34 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015284:	f04f 0800 	mov.w	r8, #0
 8015288:	e799      	b.n	80151be <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x7c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801528a:	4622      	mov	r2, r4
 801528c:	4629      	mov	r1, r5
 801528e:	4640      	mov	r0, r8
 8015290:	f006 fb3c 	bl	801b90c <memmove>
 8015294:	e7a5      	b.n	80151e2 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0xa0>
 8015296:	4629      	mov	r1, r5
 8015298:	f811 3b04 	ldrb.w	r3, [r1], #4
 801529c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 80152a0:	a81a      	add	r0, sp, #104	; 0x68
 80152a2:	f7fb fce4 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80152a6:	7c2b      	ldrb	r3, [r5, #16]
 80152a8:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
 80152ac:	7c6b      	ldrb	r3, [r5, #17]
 80152ae:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
 80152b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80152b6:	901e      	str	r0, [sp, #120]	; 0x78
 80152b8:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
 80152bc:	79a3      	ldrb	r3, [r4, #6]
 80152be:	f88d 307e 	strb.w	r3, [sp, #126]	; 0x7e
 80152c2:	79e3      	ldrb	r3, [r4, #7]
 80152c4:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80152c8:	7a23      	ldrb	r3, [r4, #8]
 80152ca:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 80152ce:	f104 090c 	add.w	r9, r4, #12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80152d2:	f8d9 5004 	ldr.w	r5, [r9, #4]
 80152d6:	68e2      	ldr	r2, [r4, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80152d8:	2300      	movs	r3, #0
 80152da:	9321      	str	r3, [sp, #132]	; 0x84
 80152dc:	9322      	str	r3, [sp, #136]	; 0x88
 80152de:	9323      	str	r3, [sp, #140]	; 0x8c
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80152e0:	1aad      	subs	r5, r5, r2
 80152e2:	d031      	beq.n	8015348 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x206>
	if (__n > this->_M_max_size())
 80152e4:	429d      	cmp	r5, r3
 80152e6:	db2d      	blt.n	8015344 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x202>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80152e8:	4628      	mov	r0, r5
 80152ea:	f005 fe51 	bl	801af90 <_Znwj>
 80152ee:	4680      	mov	r8, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 80152f0:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80152f4:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80152f8:	4445      	add	r5, r8
 80152fa:	9523      	str	r5, [sp, #140]	; 0x8c
 80152fc:	f8d9 a004 	ldr.w	sl, [r9, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8015300:	46c1      	mov	r9, r8
      return std::__niter_wrap(__result,
 8015302:	68e0      	ldr	r0, [r4, #12]
 8015304:	f7ec fbd7 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8015308:	4605      	mov	r5, r0
 801530a:	4650      	mov	r0, sl
 801530c:	f7ec fbd3 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8015310:	1b44      	subs	r4, r0, r5
 8015312:	d11c      	bne.n	801534e <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x20c>
	  return __result + _Num;
 8015314:	444c      	add	r4, r9
	this->_M_impl._M_finish =
 8015316:	9422      	str	r4, [sp, #136]	; 0x88
		return ProcessSubscriber<T>(message, element, start_index);
 8015318:	463b      	mov	r3, r7
 801531a:	aa1e      	add	r2, sp, #120	; 0x78
 801531c:	a919      	add	r1, sp, #100	; 0x64
 801531e:	4630      	mov	r0, r6
 8015320:	f7ff fe50 	bl	8014fc4 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt>
 8015324:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8015326:	9821      	ldr	r0, [sp, #132]	; 0x84
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015328:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801532a:	1a09      	subs	r1, r1, r0
	if (__p)
 801532c:	b108      	cbz	r0, 8015332 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x1f0>
	::operator delete(__p
 801532e:	f005 fe19 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8015332:	981a      	ldr	r0, [sp, #104]	; 0x68
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015334:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015336:	1a09      	subs	r1, r1, r0
	if (__p)
 8015338:	2800      	cmp	r0, #0
 801533a:	f43f af67 	beq.w	801520c <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0xca>
 801533e:	f005 fe11 	bl	801af64 <_ZdlPvj>
 8015342:	e763      	b.n	801520c <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0xca>
	  std::__throw_bad_alloc();
 8015344:	f005 fed2 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015348:	f04f 0800 	mov.w	r8, #0
 801534c:	e7d0      	b.n	80152f0 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x1ae>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801534e:	4622      	mov	r2, r4
 8015350:	4629      	mov	r1, r5
 8015352:	4640      	mov	r0, r8
 8015354:	f006 fada 	bl	801b90c <memmove>
 8015358:	e7dc      	b.n	8015314 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x1d2>

0801535a <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_>:
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 801535a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801535e:	b090      	sub	sp, #64	; 0x40
 8015360:	4607      	mov	r7, r0
 8015362:	a803      	add	r0, sp, #12
 8015364:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	for (SubscriberConfiguration configuration : configurations) {
 8015368:	68f9      	ldr	r1, [r7, #12]
 801536a:	693e      	ldr	r6, [r7, #16]
	uint8_t index = 0;
 801536c:	2400      	movs	r4, #0
 801536e:	e048      	b.n	8015402 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0xa8>
			if (/*SubscribedToRegister(configuration.ID, information.register_.address) || */SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 8015370:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015374:	f8ad 3000 	strh.w	r3, [sp]
 8015378:	ab03      	add	r3, sp, #12
 801537a:	cb0c      	ldmia	r3, {r2, r3}
 801537c:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8015380:	4638      	mov	r0, r7
 8015382:	f005 fc93 	bl	801acac <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 8015386:	2800      	cmp	r0, #0
 8015388:	d045      	beq.n	8015416 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0xbc>
				if (AddressAccepted(configuration.ID, information.interface.address)) { // filter stage
 801538a:	f89d 2013 	ldrb.w	r2, [sp, #19]
 801538e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8015392:	4638      	mov	r0, r7
 8015394:	f005 fbcf 	bl	801ab36 <_ZN17MasterSubscribers15AddressAcceptedEhh>
 8015398:	2800      	cmp	r0, #0
 801539a:	d03c      	beq.n	8015416 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0xbc>
					leds->CommunicationLED(information.interface.interface);
 801539c:	f89d 1012 	ldrb.w	r1, [sp, #18]
 80153a0:	6878      	ldr	r0, [r7, #4]
 80153a2:	f001 f9ca 	bl	801673a <_ZN4LEDS16CommunicationLEDEh>
					switch (information.register_.type) {
 80153a6:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80153aa:	2b02      	cmp	r3, #2
 80153ac:	d00f      	beq.n	80153ce <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x74>
 80153ae:	2b08      	cmp	r3, #8
 80153b0:	d019      	beq.n	80153e6 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x8c>
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d12f      	bne.n	8015416 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0xbc>
	return *(this->_M_impl._M_start + __n);
 80153b6:	69bb      	ldr	r3, [r7, #24]
						subscribers[index]->ReceiveUINT8(information, (uint8_t*) data);
 80153b8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80153bc:	6803      	ldr	r3, [r0, #0]
 80153be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80153c0:	9200      	str	r2, [sp, #0]
 80153c2:	f8d3 8000 	ldr.w	r8, [r3]
 80153c6:	ab03      	add	r3, sp, #12
 80153c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80153ca:	47c0      	blx	r8
						break;
 80153cc:	e023      	b.n	8015416 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0xbc>
 80153ce:	69bb      	ldr	r3, [r7, #24]
						subscribers[index]->ReceiveUINT32(information, (uint32_t*) data);
 80153d0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80153d4:	6803      	ldr	r3, [r0, #0]
 80153d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80153d8:	9200      	str	r2, [sp, #0]
 80153da:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80153de:	ab03      	add	r3, sp, #12
 80153e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80153e2:	47c0      	blx	r8
						break;
 80153e4:	e017      	b.n	8015416 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0xbc>
 80153e6:	69bb      	ldr	r3, [r7, #24]
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 80153e8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80153ec:	6803      	ldr	r3, [r0, #0]
 80153ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80153f0:	9200      	str	r2, [sp, #0]
 80153f2:	f8d3 8008 	ldr.w	r8, [r3, #8]
 80153f6:	ab03      	add	r3, sp, #12
 80153f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80153fa:	47c0      	blx	r8
						break;
 80153fc:	e00b      	b.n	8015416 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0xbc>
	++_M_current;
 80153fe:	f105 0128 	add.w	r1, r5, #40	; 0x28
    { return __lhs.base() != __rhs.base(); }
 8015402:	460d      	mov	r5, r1
	for (SubscriberConfiguration configuration : configurations) {
 8015404:	428e      	cmp	r6, r1
 8015406:	d01c      	beq.n	8015442 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0xe8>
 8015408:	a806      	add	r0, sp, #24
 801540a:	f7ff fa99 	bl	8014940 <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 801540e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d1ac      	bne.n	8015370 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x16>
		index++;
 8015416:	3401      	adds	r4, #1
 8015418:	b2e4      	uxtb	r4, r4
	_M_deallocate(_M_impl._M_start,
 801541a:	980d      	ldr	r0, [sp, #52]	; 0x34
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801541c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801541e:	1a09      	subs	r1, r1, r0
	if (__p)
 8015420:	b108      	cbz	r0, 8015426 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0xcc>
	::operator delete(__p
 8015422:	f005 fd9f 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8015426:	980a      	ldr	r0, [sp, #40]	; 0x28
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015428:	990c      	ldr	r1, [sp, #48]	; 0x30
 801542a:	1a09      	subs	r1, r1, r0
	if (__p)
 801542c:	b108      	cbz	r0, 8015432 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0xd8>
 801542e:	f005 fd99 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8015432:	9807      	ldr	r0, [sp, #28]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015434:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015436:	1a09      	subs	r1, r1, r0
	if (__p)
 8015438:	2800      	cmp	r0, #0
 801543a:	d0e0      	beq.n	80153fe <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0xa4>
 801543c:	f005 fd92 	bl	801af64 <_ZdlPvj>
 8015440:	e7dd      	b.n	80153fe <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0xa4>
}
 8015442:	b010      	add	sp, #64	; 0x40
 8015444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015448 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8015448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801544c:	b09c      	sub	sp, #112	; 0x70
 801544e:	af02      	add	r7, sp, #8
 8015450:	4681      	mov	r9, r0
 8015452:	4688      	mov	r8, r1
 8015454:	4616      	mov	r6, r2
 8015456:	461c      	mov	r4, r3
	T array_values[element.element_register.length];
 8015458:	8893      	ldrh	r3, [r2, #4]
 801545a:	009b      	lsls	r3, r3, #2
 801545c:	3307      	adds	r3, #7
 801545e:	08db      	lsrs	r3, r3, #3
 8015460:	466a      	mov	r2, sp
 8015462:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8015466:	469d      	mov	sp, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015468:	2300      	movs	r3, #0
 801546a:	62bb      	str	r3, [r7, #40]	; 0x28
 801546c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801546e:	633b      	str	r3, [r7, #48]	; 0x30
	if (not element.element_register.isArray) {
 8015470:	78f3      	ldrb	r3, [r6, #3]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d053      	beq.n	801551e <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0xd6>
 8015476:	f10d 0a08 	add.w	sl, sp, #8
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 801547a:	88b5      	ldrh	r5, [r6, #4]
 801547c:	2d00      	cmp	r5, #0
 801547e:	f040 808b 	bne.w	8015598 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x150>
	} else if (element.element_register.isArray && element.element_register.length == 0) { //TODO length never == 0
 8015482:	88b3      	ldrh	r3, [r6, #4]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d162      	bne.n	801554e <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x106>
	return *(this->_M_impl._M_start + __n);
 8015488:	f851 3f04 	ldr.w	r3, [r1, #4]!
		length_to_extract = message.payload[start_index];
 801548c:	5d1d      	ldrb	r5, [r3, r4]
		start_index++;
 801548e:	3401      	adds	r4, #1
 8015490:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8015492:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8015496:	f7fb fbea 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801549a:	f107 0327 	add.w	r3, r7, #39	; 0x27
 801549e:	9301      	str	r3, [sp, #4]
 80154a0:	9500      	str	r5, [sp, #0]
 80154a2:	4623      	mov	r3, r4
 80154a4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80154a8:	4649      	mov	r1, r9
 80154aa:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80154ae:	f7fb ff76 	bl	801139e <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb>
	: _M_start(), _M_finish(), _M_end_of_storage()
 80154b2:	2300      	movs	r3, #0
 80154b4:	607b      	str	r3, [r7, #4]
 80154b6:	60bb      	str	r3, [r7, #8]
 80154b8:	60fb      	str	r3, [r7, #12]
 80154ba:	613b      	str	r3, [r7, #16]
 80154bc:	617b      	str	r3, [r7, #20]
 80154be:	61bb      	str	r3, [r7, #24]
	  _M_start = __x._M_start;
 80154c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80154c2:	6138      	str	r0, [r7, #16]
	  _M_finish = __x._M_finish;
 80154c4:	f8d7 c02c 	ldr.w	ip, [r7, #44]	; 0x2c
 80154c8:	f8c7 c014 	str.w	ip, [r7, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
 80154cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80154ce:	61b9      	str	r1, [r7, #24]
	  _M_start = __x._M_start;
 80154d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80154d2:	62ba      	str	r2, [r7, #40]	; 0x28
	  _M_finish = __x._M_finish;
 80154d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80154d6:	62fa      	str	r2, [r7, #44]	; 0x2c
	  _M_end_of_storage = __x._M_end_of_storage;
 80154d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80154da:	633a      	str	r2, [r7, #48]	; 0x30
	  _M_start = __x._M_start;
 80154dc:	6538      	str	r0, [r7, #80]	; 0x50
	  _M_finish = __x._M_finish;
 80154de:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
	  _M_end_of_storage = __x._M_end_of_storage;
 80154e2:	65b9      	str	r1, [r7, #88]	; 0x58
	: _M_start(), _M_finish(), _M_end_of_storage()
 80154e4:	613b      	str	r3, [r7, #16]
 80154e6:	617b      	str	r3, [r7, #20]
 80154e8:	61bb      	str	r3, [r7, #24]
	  _M_start = __x._M_start;
 80154ea:	6078      	str	r0, [r7, #4]
	  _M_finish = __x._M_finish;
 80154ec:	f8c7 c008 	str.w	ip, [r7, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 80154f0:	60f9      	str	r1, [r7, #12]
	  _M_start = __x._M_start;
 80154f2:	653b      	str	r3, [r7, #80]	; 0x50
	  _M_finish = __x._M_finish;
 80154f4:	657b      	str	r3, [r7, #84]	; 0x54
	  _M_end_of_storage = __x._M_end_of_storage;
 80154f6:	65bb      	str	r3, [r7, #88]	; 0x58
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80154f8:	1a09      	subs	r1, r1, r0
	if (__p)
 80154fa:	b108      	cbz	r0, 8015500 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0xb8>
 80154fc:	f005 fd32 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8015500:	6d38      	ldr	r0, [r7, #80]	; 0x50
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015502:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015504:	1a09      	subs	r1, r1, r0
	if (__p)
 8015506:	b108      	cbz	r0, 801550c <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0xc4>
 8015508:	f005 fd2c 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 801550c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801550e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015510:	1a09      	subs	r1, r1, r0
	if (__p)
 8015512:	b108      	cbz	r0, 8015518 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0xd0>
 8015514:	f005 fd26 	bl	801af64 <_ZdlPvj>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8015518:	f8d7 a028 	ldr.w	sl, [r7, #40]	; 0x28
 801551c:	e017      	b.n	801554e <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x106>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801551e:	3104      	adds	r1, #4
 8015520:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8015524:	f7fb fba3 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8015528:	f107 0327 	add.w	r3, r7, #39	; 0x27
 801552c:	4622      	mov	r2, r4
 801552e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8015532:	4648      	mov	r0, r9
 8015534:	f7fa f818 	bl	800f568 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb>
 8015538:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	_M_deallocate(_M_impl._M_start,
 801553c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801553e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015540:	1a09      	subs	r1, r1, r0
	if (__p)
 8015542:	b108      	cbz	r0, 8015548 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x100>
 8015544:	f005 fd0e 	bl	801af64 <_ZdlPvj>
		data = &single_value;
 8015548:	f107 0a34 	add.w	sl, r7, #52	; 0x34
		length_to_extract = 1;
 801554c:	2501      	movs	r5, #1
	subscriber_information.interface.interface = message.interface;
 801554e:	f898 3000 	ldrb.w	r3, [r8]
 8015552:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	subscriber_information.interface.address = message.source_address;
 8015556:	f898 3011 	ldrb.w	r3, [r8, #17]
 801555a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	subscriber_information.register_ = element.element_register;
 801555e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015562:	61f8      	str	r0, [r7, #28]
 8015564:	8439      	strh	r1, [r7, #32]
	subscriber_information.length = length_to_extract;
 8015566:	84bd      	strh	r5, [r7, #36]	; 0x24
	subscribers->Receive<T>(subscriber_information, data);
 8015568:	f8cd a000 	str.w	sl, [sp]
 801556c:	f107 031c 	add.w	r3, r7, #28
 8015570:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015572:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8015576:	f7ff fef0 	bl	801535a <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_>
	return start_index + sizeof(T) * length_to_extract;
 801557a:	00ad      	lsls	r5, r5, #2
 801557c:	b2ad      	uxth	r5, r5
 801557e:	4425      	add	r5, r4
 8015580:	b2ad      	uxth	r5, r5
	_M_deallocate(_M_impl._M_start,
 8015582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015584:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015586:	1a09      	subs	r1, r1, r0
	if (__p)
 8015588:	b108      	cbz	r0, 801558e <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x146>
 801558a:	f005 fceb 	bl	801af64 <_ZdlPvj>
}
 801558e:	4628      	mov	r0, r5
 8015590:	3768      	adds	r7, #104	; 0x68
 8015592:	46bd      	mov	sp, r7
 8015594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8015598:	3104      	adds	r1, #4
 801559a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 801559e:	f7fb fb66 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80155a2:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80155a6:	9301      	str	r3, [sp, #4]
 80155a8:	9500      	str	r5, [sp, #0]
 80155aa:	4623      	mov	r3, r4
 80155ac:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80155b0:	4651      	mov	r1, sl
 80155b2:	4648      	mov	r0, r9
 80155b4:	f7fb fd3c 	bl	8011030 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb>
	_M_deallocate(_M_impl._M_start,
 80155b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80155ba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80155bc:	1a09      	subs	r1, r1, r0
	if (__p)
 80155be:	2800      	cmp	r0, #0
 80155c0:	d0c5      	beq.n	801554e <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x106>
 80155c2:	f005 fccf 	bl	801af64 <_ZdlPvj>
		data = array_values;
 80155c6:	e7c2      	b.n	801554e <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x106>

080155c8 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 80155c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155cc:	b0a5      	sub	sp, #148	; 0x94
 80155ce:	4606      	mov	r6, r0
 80155d0:	460d      	mov	r5, r1
 80155d2:	461c      	mov	r4, r3
 80155d4:	f8bd 80b8 	ldrh.w	r8, [sp, #184]	; 0xb8
	if (not element.ack && element.command) {
 80155d8:	799b      	ldrb	r3, [r3, #6]
 80155da:	b91b      	cbnz	r3, 80155e4 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x1c>
 80155dc:	4617      	mov	r7, r2
 80155de:	79e2      	ldrb	r2, [r4, #7]
 80155e0:	2a00      	cmp	r2, #0
 80155e2:	d15b      	bne.n	801569c <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0xd4>
	} else if (element.ack) {
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	f000 809b 	beq.w	8015720 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x158>
 80155ea:	46a9      	mov	r9, r5
 80155ec:	f819 3b04 	ldrb.w	r3, [r9], #4
 80155f0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80155f4:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80155f8:	686a      	ldr	r2, [r5, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80155fa:	2300      	movs	r3, #0
 80155fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80155fe:	9310      	str	r3, [sp, #64]	; 0x40
 8015600:	9311      	str	r3, [sp, #68]	; 0x44
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015602:	1abf      	subs	r7, r7, r2
 8015604:	f000 8083 	beq.w	801570e <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x146>
	if (__n > this->_M_max_size())
 8015608:	429f      	cmp	r7, r3
 801560a:	db7e      	blt.n	801570a <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x142>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801560c:	4638      	mov	r0, r7
 801560e:	f005 fcbf 	bl	801af90 <_Znwj>
 8015612:	4682      	mov	sl, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8015614:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8015618:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801561c:	4457      	add	r7, sl
 801561e:	9711      	str	r7, [sp, #68]	; 0x44
      : _M_current(__i) { }
 8015620:	f8d9 b004 	ldr.w	fp, [r9, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8015624:	46d1      	mov	r9, sl
      return std::__niter_wrap(__result,
 8015626:	6868      	ldr	r0, [r5, #4]
 8015628:	f7ec fa45 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 801562c:	4607      	mov	r7, r0
 801562e:	4658      	mov	r0, fp
 8015630:	f7ec fa41 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8015634:	ebb0 0b07 	subs.w	fp, r0, r7
 8015638:	d16c      	bne.n	8015714 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x14c>
	  return __result + _Num;
 801563a:	eb09 000b 	add.w	r0, r9, fp
	this->_M_impl._M_finish =
 801563e:	9010      	str	r0, [sp, #64]	; 0x40
 8015640:	7c2b      	ldrb	r3, [r5, #16]
 8015642:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8015646:	7c6b      	ldrb	r3, [r5, #17]
 8015648:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 801564c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015650:	9013      	str	r0, [sp, #76]	; 0x4c
 8015652:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
 8015656:	79a3      	ldrb	r3, [r4, #6]
 8015658:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
 801565c:	79e3      	ldrb	r3, [r4, #7]
 801565e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015662:	7a23      	ldrb	r3, [r4, #8]
 8015664:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8015668:	f104 010c 	add.w	r1, r4, #12
 801566c:	a816      	add	r0, sp, #88	; 0x58
 801566e:	f7fb fafe 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		return ProcessService<T>(message, element, start_index);
 8015672:	4643      	mov	r3, r8
 8015674:	aa13      	add	r2, sp, #76	; 0x4c
 8015676:	a90e      	add	r1, sp, #56	; 0x38
 8015678:	4630      	mov	r0, r6
 801567a:	f7fb feff 	bl	801147c <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt>
 801567e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8015680:	9816      	ldr	r0, [sp, #88]	; 0x58
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015682:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015684:	1a09      	subs	r1, r1, r0
	if (__p)
 8015686:	b108      	cbz	r0, 801568c <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0xc4>
	::operator delete(__p
 8015688:	f005 fc6c 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 801568c:	980f      	ldr	r0, [sp, #60]	; 0x3c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801568e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015690:	1a09      	subs	r1, r1, r0
	if (__p)
 8015692:	2800      	cmp	r0, #0
 8015694:	d078      	beq.n	8015788 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x1c0>
 8015696:	f005 fc65 	bl	801af64 <_ZdlPvj>
 801569a:	e075      	b.n	8015788 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x1c0>
 801569c:	f811 3b04 	ldrb.w	r3, [r1], #4
 80156a0:	f88d 300c 	strb.w	r3, [sp, #12]
 80156a4:	a804      	add	r0, sp, #16
 80156a6:	f7fb fae2 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80156aa:	7c2b      	ldrb	r3, [r5, #16]
 80156ac:	f88d 301c 	strb.w	r3, [sp, #28]
 80156b0:	7c6b      	ldrb	r3, [r5, #17]
 80156b2:	f88d 301d 	strb.w	r3, [sp, #29]
 80156b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80156ba:	9008      	str	r0, [sp, #32]
 80156bc:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80156c0:	79a3      	ldrb	r3, [r4, #6]
 80156c2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 80156c6:	79e3      	ldrb	r3, [r4, #7]
 80156c8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 80156cc:	7a23      	ldrb	r3, [r4, #8]
 80156ce:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80156d2:	f104 010c 	add.w	r1, r4, #12
 80156d6:	a80b      	add	r0, sp, #44	; 0x2c
 80156d8:	f7fb fac9 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		return ProcessCommand<T>(message, response, element, start_index);
 80156dc:	f8cd 8000 	str.w	r8, [sp]
 80156e0:	ab08      	add	r3, sp, #32
 80156e2:	463a      	mov	r2, r7
 80156e4:	a903      	add	r1, sp, #12
 80156e6:	4630      	mov	r0, r6
 80156e8:	f7fe fff7 	bl	80146da <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt>
 80156ec:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 80156ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80156f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80156f2:	1a09      	subs	r1, r1, r0
	if (__p)
 80156f4:	b108      	cbz	r0, 80156fa <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x132>
 80156f6:	f005 fc35 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80156fa:	9804      	ldr	r0, [sp, #16]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80156fc:	9906      	ldr	r1, [sp, #24]
 80156fe:	1a09      	subs	r1, r1, r0
	if (__p)
 8015700:	2800      	cmp	r0, #0
 8015702:	d041      	beq.n	8015788 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x1c0>
 8015704:	f005 fc2e 	bl	801af64 <_ZdlPvj>
 8015708:	e03e      	b.n	8015788 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x1c0>
	  std::__throw_bad_alloc();
 801570a:	f005 fcef 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801570e:	f04f 0a00 	mov.w	sl, #0
 8015712:	e77f      	b.n	8015614 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x4c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8015714:	465a      	mov	r2, fp
 8015716:	4639      	mov	r1, r7
 8015718:	4650      	mov	r0, sl
 801571a:	f006 f8f7 	bl	801b90c <memmove>
 801571e:	e78c      	b.n	801563a <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x72>
 8015720:	4629      	mov	r1, r5
 8015722:	f811 3b04 	ldrb.w	r3, [r1], #4
 8015726:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 801572a:	a81a      	add	r0, sp, #104	; 0x68
 801572c:	f7fb fa9f 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8015730:	7c2b      	ldrb	r3, [r5, #16]
 8015732:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
 8015736:	7c6b      	ldrb	r3, [r5, #17]
 8015738:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
 801573c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015740:	901e      	str	r0, [sp, #120]	; 0x78
 8015742:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
 8015746:	79a3      	ldrb	r3, [r4, #6]
 8015748:	f88d 307e 	strb.w	r3, [sp, #126]	; 0x7e
 801574c:	79e3      	ldrb	r3, [r4, #7]
 801574e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8015752:	7a23      	ldrb	r3, [r4, #8]
 8015754:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8015758:	f104 010c 	add.w	r1, r4, #12
 801575c:	a821      	add	r0, sp, #132	; 0x84
 801575e:	f7fb fa86 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		return ProcessSubscriber<T>(message, element, start_index);
 8015762:	4643      	mov	r3, r8
 8015764:	aa1e      	add	r2, sp, #120	; 0x78
 8015766:	a919      	add	r1, sp, #100	; 0x64
 8015768:	4630      	mov	r0, r6
 801576a:	f7ff fe6d 	bl	8015448 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt>
 801576e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8015770:	9821      	ldr	r0, [sp, #132]	; 0x84
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015772:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8015774:	1a09      	subs	r1, r1, r0
	if (__p)
 8015776:	b108      	cbz	r0, 801577c <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x1b4>
	::operator delete(__p
 8015778:	f005 fbf4 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 801577c:	981a      	ldr	r0, [sp, #104]	; 0x68
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801577e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015780:	1a09      	subs	r1, r1, r0
	if (__p)
 8015782:	b108      	cbz	r0, 8015788 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x1c0>
 8015784:	f005 fbee 	bl	801af64 <_ZdlPvj>
}
 8015788:	4620      	mov	r0, r4
 801578a:	b025      	add	sp, #148	; 0x94
 801578c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015790 <_ZN13Communication12ParseMessageE13MessageHeader>:
void Communication::ParseMessage(MessageHeader message) {
 8015790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015794:	b0b9      	sub	sp, #228	; 0xe4
 8015796:	4607      	mov	r7, r0
 8015798:	460c      	mov	r4, r1
	: _M_start(), _M_finish(), _M_end_of_storage()
 801579a:	2500      	movs	r5, #0
 801579c:	950a      	str	r5, [sp, #40]	; 0x28
 801579e:	950b      	str	r5, [sp, #44]	; 0x2c
 80157a0:	950c      	str	r5, [sp, #48]	; 0x30
 80157a2:	9503      	str	r5, [sp, #12]
 80157a4:	9504      	str	r5, [sp, #16]
 80157a6:	9505      	str	r5, [sp, #20]
	response.interface = message.interface;
 80157a8:	780b      	ldrb	r3, [r1, #0]
 80157aa:	f88d 3008 	strb.w	r3, [sp, #8]
	response.target_address = message.source_address;
 80157ae:	7c4b      	ldrb	r3, [r1, #17]
 80157b0:	f88d 3018 	strb.w	r3, [sp, #24]
	uint16_t index = 0;
 80157b4:	e086      	b.n	80158c4 <_ZN13Communication12ParseMessageE13MessageHeader+0x134>
	  std::__throw_bad_alloc();
 80157b6:	f005 fc99 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80157ba:	f04f 0800 	mov.w	r8, #0
 80157be:	e0b9      	b.n	8015934 <_ZN13Communication12ParseMessageE13MessageHeader+0x1a4>
 80157c0:	465a      	mov	r2, fp
 80157c2:	4631      	mov	r1, r6
 80157c4:	4640      	mov	r0, r8
 80157c6:	f006 f8a1 	bl	801b90c <memmove>
 80157ca:	e0c7      	b.n	801595c <_ZN13Communication12ParseMessageE13MessageHeader+0x1cc>
 80157cc:	7823      	ldrb	r3, [r4, #0]
 80157ce:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80157d2:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80157d6:	6862      	ldr	r2, [r4, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80157d8:	2300      	movs	r3, #0
 80157da:	9313      	str	r3, [sp, #76]	; 0x4c
 80157dc:	9314      	str	r3, [sp, #80]	; 0x50
 80157de:	9315      	str	r3, [sp, #84]	; 0x54
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80157e0:	1ab6      	subs	r6, r6, r2
 80157e2:	f000 80e3 	beq.w	80159ac <_ZN13Communication12ParseMessageE13MessageHeader+0x21c>
	if (__n > this->_M_max_size())
 80157e6:	429e      	cmp	r6, r3
 80157e8:	f2c0 80de 	blt.w	80159a8 <_ZN13Communication12ParseMessageE13MessageHeader+0x218>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80157ec:	4630      	mov	r0, r6
 80157ee:	f005 fbcf 	bl	801af90 <_Znwj>
 80157f2:	4680      	mov	r8, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 80157f4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80157f8:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80157fc:	4446      	add	r6, r8
 80157fe:	9615      	str	r6, [sp, #84]	; 0x54
 8015800:	f8d9 6004 	ldr.w	r6, [r9, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8015804:	46c2      	mov	sl, r8
      return std::__niter_wrap(__result,
 8015806:	6860      	ldr	r0, [r4, #4]
 8015808:	f7ec f955 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 801580c:	4681      	mov	r9, r0
 801580e:	4630      	mov	r0, r6
 8015810:	f7ec f951 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8015814:	ebb0 0609 	subs.w	r6, r0, r9
 8015818:	f040 80cb 	bne.w	80159b2 <_ZN13Communication12ParseMessageE13MessageHeader+0x222>
	  return __result + _Num;
 801581c:	4456      	add	r6, sl
	this->_M_impl._M_finish =
 801581e:	9614      	str	r6, [sp, #80]	; 0x50
 8015820:	7c23      	ldrb	r3, [r4, #16]
 8015822:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8015826:	7c63      	ldrb	r3, [r4, #17]
 8015828:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
 801582c:	ab07      	add	r3, sp, #28
 801582e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015832:	9017      	str	r0, [sp, #92]	; 0x5c
 8015834:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
 8015838:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 801583c:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
 8015840:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015844:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
 8015848:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801584c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015850:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8015852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015854:	2300      	movs	r3, #0
 8015856:	931a      	str	r3, [sp, #104]	; 0x68
 8015858:	931b      	str	r3, [sp, #108]	; 0x6c
 801585a:	931c      	str	r3, [sp, #112]	; 0x70
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801585c:	1ab6      	subs	r6, r6, r2
 801585e:	f000 80b0 	beq.w	80159c2 <_ZN13Communication12ParseMessageE13MessageHeader+0x232>
	if (__n > this->_M_max_size())
 8015862:	429e      	cmp	r6, r3
 8015864:	f2c0 80ab 	blt.w	80159be <_ZN13Communication12ParseMessageE13MessageHeader+0x22e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015868:	4630      	mov	r0, r6
 801586a:	f005 fb91 	bl	801af90 <_Znwj>
 801586e:	4680      	mov	r8, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8015870:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8015874:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015878:	4446      	add	r6, r8
 801587a:	961c      	str	r6, [sp, #112]	; 0x70
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 801587c:	46c2      	mov	sl, r8
      return std::__niter_wrap(__result,
 801587e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015880:	f7ec f919 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8015884:	4681      	mov	r9, r0
 8015886:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015888:	f7ec f915 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 801588c:	ebb0 0609 	subs.w	r6, r0, r9
 8015890:	f040 809a 	bne.w	80159c8 <_ZN13Communication12ParseMessageE13MessageHeader+0x238>
	  return __result + _Num;
 8015894:	4456      	add	r6, sl
	this->_M_impl._M_finish =
 8015896:	961b      	str	r6, [sp, #108]	; 0x6c
			index = ProcessElement<uint8_t>(message, &response, element, index + 2);
 8015898:	3502      	adds	r5, #2
 801589a:	b2ad      	uxth	r5, r5
 801589c:	9500      	str	r5, [sp, #0]
 801589e:	ab17      	add	r3, sp, #92	; 0x5c
 80158a0:	aa02      	add	r2, sp, #8
 80158a2:	a912      	add	r1, sp, #72	; 0x48
 80158a4:	4638      	mov	r0, r7
 80158a6:	f7ff fa32 	bl	8014d0e <_ZN13Communication14ProcessElementIhEEt13MessageHeaderPS1_14MessageElementt>
 80158aa:	4605      	mov	r5, r0
	_M_deallocate(_M_impl._M_start,
 80158ac:	981a      	ldr	r0, [sp, #104]	; 0x68
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80158ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80158b0:	1a09      	subs	r1, r1, r0
	if (__p)
 80158b2:	b108      	cbz	r0, 80158b8 <_ZN13Communication12ParseMessageE13MessageHeader+0x128>
	::operator delete(__p
 80158b4:	f005 fb56 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80158b8:	9813      	ldr	r0, [sp, #76]	; 0x4c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80158ba:	9915      	ldr	r1, [sp, #84]	; 0x54
 80158bc:	1a09      	subs	r1, r1, r0
	if (__p)
 80158be:	b108      	cbz	r0, 80158c4 <_ZN13Communication12ParseMessageE13MessageHeader+0x134>
 80158c0:	f005 fb50 	bl	801af64 <_ZdlPvj>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80158c4:	68a3      	ldr	r3, [r4, #8]
 80158c6:	6861      	ldr	r1, [r4, #4]
 80158c8:	1a5b      	subs	r3, r3, r1
	while (index < message.payload.size()) {
 80158ca:	429d      	cmp	r5, r3
 80158cc:	f080 81a0 	bcs.w	8015c10 <_ZN13Communication12ParseMessageE13MessageHeader+0x480>
		if (index + 1 >= (uint16_t) message.payload.size())
 80158d0:	1c68      	adds	r0, r5, #1
 80158d2:	b29b      	uxth	r3, r3
 80158d4:	4298      	cmp	r0, r3
 80158d6:	f280 819b 	bge.w	8015c10 <_ZN13Communication12ParseMessageE13MessageHeader+0x480>
		element.ack = message.payload[index] & ACK_MASK;
 80158da:	5d4b      	ldrb	r3, [r1, r5]
 80158dc:	09db      	lsrs	r3, r3, #7
 80158de:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
	return *(this->_M_impl._M_start + __n);
 80158e2:	6861      	ldr	r1, [r4, #4]
		element.command = message.payload[index] & COMMAND_MASK;
 80158e4:	5d4b      	ldrb	r3, [r1, r5]
 80158e6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80158ea:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		element.access = message.payload[index] & ACCESS_MASK;
 80158ee:	5d4b      	ldrb	r3, [r1, r5]
 80158f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80158f4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		element.element_register.address = (message.payload[index] & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)) << 8 | message.payload[index + 1];
 80158f8:	5d4b      	ldrb	r3, [r1, r5]
 80158fa:	021b      	lsls	r3, r3, #8
 80158fc:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8015900:	5c0a      	ldrb	r2, [r1, r0]
 8015902:	4313      	orrs	r3, r2
 8015904:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015908:	46a1      	mov	r9, r4
 801590a:	f819 3b04 	ldrb.w	r3, [r9], #4
 801590e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015912:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8015916:	6862      	ldr	r2, [r4, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015918:	2300      	movs	r3, #0
 801591a:	930e      	str	r3, [sp, #56]	; 0x38
 801591c:	930f      	str	r3, [sp, #60]	; 0x3c
 801591e:	9310      	str	r3, [sp, #64]	; 0x40
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015920:	1ab6      	subs	r6, r6, r2
 8015922:	f43f af4a 	beq.w	80157ba <_ZN13Communication12ParseMessageE13MessageHeader+0x2a>
	if (__n > this->_M_max_size())
 8015926:	429e      	cmp	r6, r3
 8015928:	f6ff af45 	blt.w	80157b6 <_ZN13Communication12ParseMessageE13MessageHeader+0x26>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801592c:	4630      	mov	r0, r6
 801592e:	f005 fb2f 	bl	801af90 <_Znwj>
 8015932:	4680      	mov	r8, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8015934:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8015938:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801593c:	4446      	add	r6, r8
 801593e:	9610      	str	r6, [sp, #64]	; 0x40
 8015940:	f8d9 b004 	ldr.w	fp, [r9, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8015944:	46c2      	mov	sl, r8
      return std::__niter_wrap(__result,
 8015946:	6860      	ldr	r0, [r4, #4]
 8015948:	f7ec f8b5 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 801594c:	4606      	mov	r6, r0
 801594e:	4658      	mov	r0, fp
 8015950:	f7ec f8b1 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8015954:	ebb0 0b06 	subs.w	fp, r0, r6
 8015958:	f47f af32 	bne.w	80157c0 <_ZN13Communication12ParseMessageE13MessageHeader+0x30>
	  return __result + _Num;
 801595c:	eb0a 000b 	add.w	r0, sl, fp
	this->_M_impl._M_finish =
 8015960:	900f      	str	r0, [sp, #60]	; 0x3c
 8015962:	7c23      	ldrb	r3, [r4, #16]
 8015964:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 8015968:	7c63      	ldrb	r3, [r4, #17]
 801596a:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
		bool success = FindRegister(message, &response, &element);
 801596e:	ab07      	add	r3, sp, #28
 8015970:	aa02      	add	r2, sp, #8
 8015972:	a90d      	add	r1, sp, #52	; 0x34
 8015974:	4638      	mov	r0, r7
 8015976:	f7fc fec4 	bl	8012702 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement>
 801597a:	4606      	mov	r6, r0
	_M_deallocate(_M_impl._M_start,
 801597c:	980e      	ldr	r0, [sp, #56]	; 0x38
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801597e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015980:	1a09      	subs	r1, r1, r0
	if (__p)
 8015982:	b108      	cbz	r0, 8015988 <_ZN13Communication12ParseMessageE13MessageHeader+0x1f8>
	::operator delete(__p
 8015984:	f005 faee 	bl	801af64 <_ZdlPvj>
		if (not success) break;
 8015988:	2e00      	cmp	r6, #0
 801598a:	f000 8141 	beq.w	8015c10 <_ZN13Communication12ParseMessageE13MessageHeader+0x480>
		switch (element.element_register.type) {
 801598e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015992:	2b02      	cmp	r3, #2
 8015994:	d01e      	beq.n	80159d4 <_ZN13Communication12ParseMessageE13MessageHeader+0x244>
 8015996:	2b08      	cmp	r3, #8
 8015998:	f000 80ab 	beq.w	8015af2 <_ZN13Communication12ParseMessageE13MessageHeader+0x362>
 801599c:	2b00      	cmp	r3, #0
 801599e:	f43f af15 	beq.w	80157cc <_ZN13Communication12ParseMessageE13MessageHeader+0x3c>
			index += 2;
 80159a2:	3502      	adds	r5, #2
 80159a4:	b2ad      	uxth	r5, r5
			break;
 80159a6:	e78d      	b.n	80158c4 <_ZN13Communication12ParseMessageE13MessageHeader+0x134>
	  std::__throw_bad_alloc();
 80159a8:	f005 fba0 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80159ac:	f04f 0800 	mov.w	r8, #0
 80159b0:	e720      	b.n	80157f4 <_ZN13Communication12ParseMessageE13MessageHeader+0x64>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80159b2:	4632      	mov	r2, r6
 80159b4:	4649      	mov	r1, r9
 80159b6:	4640      	mov	r0, r8
 80159b8:	f005 ffa8 	bl	801b90c <memmove>
 80159bc:	e72e      	b.n	801581c <_ZN13Communication12ParseMessageE13MessageHeader+0x8c>
 80159be:	f005 fb95 	bl	801b0ec <_ZSt17__throw_bad_allocv>
 80159c2:	f04f 0800 	mov.w	r8, #0
 80159c6:	e753      	b.n	8015870 <_ZN13Communication12ParseMessageE13MessageHeader+0xe0>
 80159c8:	4632      	mov	r2, r6
 80159ca:	4649      	mov	r1, r9
 80159cc:	4640      	mov	r0, r8
 80159ce:	f005 ff9d 	bl	801b90c <memmove>
 80159d2:	e75f      	b.n	8015894 <_ZN13Communication12ParseMessageE13MessageHeader+0x104>
 80159d4:	7823      	ldrb	r3, [r4, #0]
 80159d6:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80159da:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80159de:	6862      	ldr	r2, [r4, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80159e0:	2300      	movs	r3, #0
 80159e2:	931e      	str	r3, [sp, #120]	; 0x78
 80159e4:	931f      	str	r3, [sp, #124]	; 0x7c
 80159e6:	9320      	str	r3, [sp, #128]	; 0x80
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80159e8:	1ab6      	subs	r6, r6, r2
 80159ea:	d06e      	beq.n	8015aca <_ZN13Communication12ParseMessageE13MessageHeader+0x33a>
	if (__n > this->_M_max_size())
 80159ec:	429e      	cmp	r6, r3
 80159ee:	db6a      	blt.n	8015ac6 <_ZN13Communication12ParseMessageE13MessageHeader+0x336>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80159f0:	4630      	mov	r0, r6
 80159f2:	f005 facd 	bl	801af90 <_Znwj>
 80159f6:	4680      	mov	r8, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 80159f8:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80159fc:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015a00:	4446      	add	r6, r8
 8015a02:	9620      	str	r6, [sp, #128]	; 0x80
 8015a04:	f8d9 6004 	ldr.w	r6, [r9, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8015a08:	46c2      	mov	sl, r8
      return std::__niter_wrap(__result,
 8015a0a:	6860      	ldr	r0, [r4, #4]
 8015a0c:	f7ec f853 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8015a10:	4681      	mov	r9, r0
 8015a12:	4630      	mov	r0, r6
 8015a14:	f7ec f84f 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8015a18:	ebb0 0609 	subs.w	r6, r0, r9
 8015a1c:	d158      	bne.n	8015ad0 <_ZN13Communication12ParseMessageE13MessageHeader+0x340>
	  return __result + _Num;
 8015a1e:	4456      	add	r6, sl
	this->_M_impl._M_finish =
 8015a20:	961f      	str	r6, [sp, #124]	; 0x7c
 8015a22:	7c23      	ldrb	r3, [r4, #16]
 8015a24:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8015a28:	7c63      	ldrb	r3, [r4, #17]
 8015a2a:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8015a2e:	ab07      	add	r3, sp, #28
 8015a30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015a34:	9022      	str	r0, [sp, #136]	; 0x88
 8015a36:	f8ad 108c 	strh.w	r1, [sp, #140]	; 0x8c
 8015a3a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8015a3e:	f88d 308e 	strb.w	r3, [sp, #142]	; 0x8e
 8015a42:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015a46:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8015a4a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8015a4e:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015a52:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8015a54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015a56:	2300      	movs	r3, #0
 8015a58:	9325      	str	r3, [sp, #148]	; 0x94
 8015a5a:	9326      	str	r3, [sp, #152]	; 0x98
 8015a5c:	9327      	str	r3, [sp, #156]	; 0x9c
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015a5e:	1ab6      	subs	r6, r6, r2
 8015a60:	d03e      	beq.n	8015ae0 <_ZN13Communication12ParseMessageE13MessageHeader+0x350>
	if (__n > this->_M_max_size())
 8015a62:	429e      	cmp	r6, r3
 8015a64:	db3a      	blt.n	8015adc <_ZN13Communication12ParseMessageE13MessageHeader+0x34c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015a66:	4630      	mov	r0, r6
 8015a68:	f005 fa92 	bl	801af90 <_Znwj>
 8015a6c:	4680      	mov	r8, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8015a6e:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8015a72:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015a76:	4446      	add	r6, r8
 8015a78:	9627      	str	r6, [sp, #156]	; 0x9c
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8015a7a:	46c2      	mov	sl, r8
      return std::__niter_wrap(__result,
 8015a7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a7e:	f7ec f81a 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8015a82:	4681      	mov	r9, r0
 8015a84:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015a86:	f7ec f816 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8015a8a:	ebb0 0609 	subs.w	r6, r0, r9
 8015a8e:	d12a      	bne.n	8015ae6 <_ZN13Communication12ParseMessageE13MessageHeader+0x356>
	  return __result + _Num;
 8015a90:	4456      	add	r6, sl
	this->_M_impl._M_finish =
 8015a92:	9626      	str	r6, [sp, #152]	; 0x98
			index = ProcessElement<uint32_t>(message, &response, element, index + 2);
 8015a94:	3502      	adds	r5, #2
 8015a96:	b2ad      	uxth	r5, r5
 8015a98:	9500      	str	r5, [sp, #0]
 8015a9a:	ab22      	add	r3, sp, #136	; 0x88
 8015a9c:	aa02      	add	r2, sp, #8
 8015a9e:	a91d      	add	r1, sp, #116	; 0x74
 8015aa0:	4638      	mov	r0, r7
 8015aa2:	f7ff fb4e 	bl	8015142 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt>
 8015aa6:	4605      	mov	r5, r0
	_M_deallocate(_M_impl._M_start,
 8015aa8:	9825      	ldr	r0, [sp, #148]	; 0x94
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015aaa:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8015aac:	1a09      	subs	r1, r1, r0
	if (__p)
 8015aae:	b108      	cbz	r0, 8015ab4 <_ZN13Communication12ParseMessageE13MessageHeader+0x324>
	::operator delete(__p
 8015ab0:	f005 fa58 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8015ab4:	981e      	ldr	r0, [sp, #120]	; 0x78
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015ab6:	9920      	ldr	r1, [sp, #128]	; 0x80
 8015ab8:	1a09      	subs	r1, r1, r0
	if (__p)
 8015aba:	2800      	cmp	r0, #0
 8015abc:	f43f af02 	beq.w	80158c4 <_ZN13Communication12ParseMessageE13MessageHeader+0x134>
 8015ac0:	f005 fa50 	bl	801af64 <_ZdlPvj>
			break;
 8015ac4:	e6fe      	b.n	80158c4 <_ZN13Communication12ParseMessageE13MessageHeader+0x134>
	  std::__throw_bad_alloc();
 8015ac6:	f005 fb11 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015aca:	f04f 0800 	mov.w	r8, #0
 8015ace:	e793      	b.n	80159f8 <_ZN13Communication12ParseMessageE13MessageHeader+0x268>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8015ad0:	4632      	mov	r2, r6
 8015ad2:	4649      	mov	r1, r9
 8015ad4:	4640      	mov	r0, r8
 8015ad6:	f005 ff19 	bl	801b90c <memmove>
 8015ada:	e7a0      	b.n	8015a1e <_ZN13Communication12ParseMessageE13MessageHeader+0x28e>
 8015adc:	f005 fb06 	bl	801b0ec <_ZSt17__throw_bad_allocv>
 8015ae0:	f04f 0800 	mov.w	r8, #0
 8015ae4:	e7c3      	b.n	8015a6e <_ZN13Communication12ParseMessageE13MessageHeader+0x2de>
 8015ae6:	4632      	mov	r2, r6
 8015ae8:	4649      	mov	r1, r9
 8015aea:	4640      	mov	r0, r8
 8015aec:	f005 ff0e 	bl	801b90c <memmove>
 8015af0:	e7ce      	b.n	8015a90 <_ZN13Communication12ParseMessageE13MessageHeader+0x300>
 8015af2:	7823      	ldrb	r3, [r4, #0]
 8015af4:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015af8:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8015afc:	6862      	ldr	r2, [r4, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015afe:	2300      	movs	r3, #0
 8015b00:	9329      	str	r3, [sp, #164]	; 0xa4
 8015b02:	932a      	str	r3, [sp, #168]	; 0xa8
 8015b04:	932b      	str	r3, [sp, #172]	; 0xac
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015b06:	1ab6      	subs	r6, r6, r2
 8015b08:	d06e      	beq.n	8015be8 <_ZN13Communication12ParseMessageE13MessageHeader+0x458>
	if (__n > this->_M_max_size())
 8015b0a:	429e      	cmp	r6, r3
 8015b0c:	db6a      	blt.n	8015be4 <_ZN13Communication12ParseMessageE13MessageHeader+0x454>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015b0e:	4630      	mov	r0, r6
 8015b10:	f005 fa3e 	bl	801af90 <_Znwj>
 8015b14:	4680      	mov	r8, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8015b16:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8015b1a:	f8cd 80a8 	str.w	r8, [sp, #168]	; 0xa8
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015b1e:	4446      	add	r6, r8
 8015b20:	962b      	str	r6, [sp, #172]	; 0xac
 8015b22:	f8d9 6004 	ldr.w	r6, [r9, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8015b26:	46c2      	mov	sl, r8
      return std::__niter_wrap(__result,
 8015b28:	6860      	ldr	r0, [r4, #4]
 8015b2a:	f7eb ffc4 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8015b2e:	4681      	mov	r9, r0
 8015b30:	4630      	mov	r0, r6
 8015b32:	f7eb ffc0 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8015b36:	ebb0 0609 	subs.w	r6, r0, r9
 8015b3a:	d158      	bne.n	8015bee <_ZN13Communication12ParseMessageE13MessageHeader+0x45e>
	  return __result + _Num;
 8015b3c:	4456      	add	r6, sl
	this->_M_impl._M_finish =
 8015b3e:	962a      	str	r6, [sp, #168]	; 0xa8
 8015b40:	7c23      	ldrb	r3, [r4, #16]
 8015b42:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 8015b46:	7c63      	ldrb	r3, [r4, #17]
 8015b48:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8015b4c:	ab07      	add	r3, sp, #28
 8015b4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015b52:	902d      	str	r0, [sp, #180]	; 0xb4
 8015b54:	f8ad 10b8 	strh.w	r1, [sp, #184]	; 0xb8
 8015b58:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8015b5c:	f88d 30ba 	strb.w	r3, [sp, #186]	; 0xba
 8015b60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015b64:	f88d 30bb 	strb.w	r3, [sp, #187]	; 0xbb
 8015b68:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8015b6c:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015b70:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8015b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015b74:	2300      	movs	r3, #0
 8015b76:	9330      	str	r3, [sp, #192]	; 0xc0
 8015b78:	9331      	str	r3, [sp, #196]	; 0xc4
 8015b7a:	9332      	str	r3, [sp, #200]	; 0xc8
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015b7c:	1ab6      	subs	r6, r6, r2
 8015b7e:	d03e      	beq.n	8015bfe <_ZN13Communication12ParseMessageE13MessageHeader+0x46e>
	if (__n > this->_M_max_size())
 8015b80:	429e      	cmp	r6, r3
 8015b82:	db3a      	blt.n	8015bfa <_ZN13Communication12ParseMessageE13MessageHeader+0x46a>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015b84:	4630      	mov	r0, r6
 8015b86:	f005 fa03 	bl	801af90 <_Znwj>
 8015b8a:	4680      	mov	r8, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8015b8c:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8015b90:	f8cd 80c4 	str.w	r8, [sp, #196]	; 0xc4
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015b94:	4446      	add	r6, r8
 8015b96:	9632      	str	r6, [sp, #200]	; 0xc8
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8015b98:	46c2      	mov	sl, r8
      return std::__niter_wrap(__result,
 8015b9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015b9c:	f7eb ff8b 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8015ba0:	4681      	mov	r9, r0
 8015ba2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015ba4:	f7eb ff87 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8015ba8:	ebb0 0609 	subs.w	r6, r0, r9
 8015bac:	d12a      	bne.n	8015c04 <_ZN13Communication12ParseMessageE13MessageHeader+0x474>
	  return __result + _Num;
 8015bae:	4456      	add	r6, sl
	this->_M_impl._M_finish =
 8015bb0:	9631      	str	r6, [sp, #196]	; 0xc4
			index = ProcessElement<float>(message, &response, element, index + 2);
 8015bb2:	3502      	adds	r5, #2
 8015bb4:	b2ad      	uxth	r5, r5
 8015bb6:	9500      	str	r5, [sp, #0]
 8015bb8:	ab2d      	add	r3, sp, #180	; 0xb4
 8015bba:	aa02      	add	r2, sp, #8
 8015bbc:	a928      	add	r1, sp, #160	; 0xa0
 8015bbe:	4638      	mov	r0, r7
 8015bc0:	f7ff fd02 	bl	80155c8 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt>
 8015bc4:	4605      	mov	r5, r0
	_M_deallocate(_M_impl._M_start,
 8015bc6:	9830      	ldr	r0, [sp, #192]	; 0xc0
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015bc8:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8015bca:	1a09      	subs	r1, r1, r0
	if (__p)
 8015bcc:	b108      	cbz	r0, 8015bd2 <_ZN13Communication12ParseMessageE13MessageHeader+0x442>
	::operator delete(__p
 8015bce:	f005 f9c9 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8015bd2:	9829      	ldr	r0, [sp, #164]	; 0xa4
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015bd4:	992b      	ldr	r1, [sp, #172]	; 0xac
 8015bd6:	1a09      	subs	r1, r1, r0
	if (__p)
 8015bd8:	2800      	cmp	r0, #0
 8015bda:	f43f ae73 	beq.w	80158c4 <_ZN13Communication12ParseMessageE13MessageHeader+0x134>
 8015bde:	f005 f9c1 	bl	801af64 <_ZdlPvj>
			break;
 8015be2:	e66f      	b.n	80158c4 <_ZN13Communication12ParseMessageE13MessageHeader+0x134>
	  std::__throw_bad_alloc();
 8015be4:	f005 fa82 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015be8:	f04f 0800 	mov.w	r8, #0
 8015bec:	e793      	b.n	8015b16 <_ZN13Communication12ParseMessageE13MessageHeader+0x386>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8015bee:	4632      	mov	r2, r6
 8015bf0:	4649      	mov	r1, r9
 8015bf2:	4640      	mov	r0, r8
 8015bf4:	f005 fe8a 	bl	801b90c <memmove>
 8015bf8:	e7a0      	b.n	8015b3c <_ZN13Communication12ParseMessageE13MessageHeader+0x3ac>
 8015bfa:	f005 fa77 	bl	801b0ec <_ZSt17__throw_bad_allocv>
 8015bfe:	f04f 0800 	mov.w	r8, #0
 8015c02:	e7c3      	b.n	8015b8c <_ZN13Communication12ParseMessageE13MessageHeader+0x3fc>
 8015c04:	4632      	mov	r2, r6
 8015c06:	4649      	mov	r1, r9
 8015c08:	4640      	mov	r0, r8
 8015c0a:	f005 fe7f 	bl	801b90c <memmove>
 8015c0e:	e7ce      	b.n	8015bae <_ZN13Communication12ParseMessageE13MessageHeader+0x41e>
	if (response.payload.size() > 0)
 8015c10:	9a04      	ldr	r2, [sp, #16]
 8015c12:	9b03      	ldr	r3, [sp, #12]
 8015c14:	429a      	cmp	r2, r3
 8015c16:	d019      	beq.n	8015c4c <_ZN13Communication12ParseMessageE13MessageHeader+0x4bc>
 8015c18:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8015c1c:	f88d 30cc 	strb.w	r3, [sp, #204]	; 0xcc
 8015c20:	a903      	add	r1, sp, #12
 8015c22:	a834      	add	r0, sp, #208	; 0xd0
 8015c24:	f7fb f823 	bl	8010c6e <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8015c28:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8015c2c:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
 8015c30:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8015c34:	f88d 30dd 	strb.w	r3, [sp, #221]	; 0xdd
		Send(response);
 8015c38:	a933      	add	r1, sp, #204	; 0xcc
 8015c3a:	4638      	mov	r0, r7
 8015c3c:	f7fc f8ca 	bl	8011dd4 <_ZN13Communication4SendE13MessageHeader>
	_M_deallocate(_M_impl._M_start,
 8015c40:	9834      	ldr	r0, [sp, #208]	; 0xd0
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015c42:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8015c44:	1a09      	subs	r1, r1, r0
	if (__p)
 8015c46:	b108      	cbz	r0, 8015c4c <_ZN13Communication12ParseMessageE13MessageHeader+0x4bc>
	::operator delete(__p
 8015c48:	f005 f98c 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8015c4c:	9803      	ldr	r0, [sp, #12]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015c4e:	9905      	ldr	r1, [sp, #20]
 8015c50:	1a09      	subs	r1, r1, r0
	if (__p)
 8015c52:	b108      	cbz	r0, 8015c58 <_ZN13Communication12ParseMessageE13MessageHeader+0x4c8>
 8015c54:	f005 f986 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8015c58:	980a      	ldr	r0, [sp, #40]	; 0x28
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015c5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015c5c:	1a09      	subs	r1, r1, r0
	if (__p)
 8015c5e:	b108      	cbz	r0, 8015c64 <_ZN13Communication12ParseMessageE13MessageHeader+0x4d4>
 8015c60:	f005 f980 	bl	801af64 <_ZdlPvj>
}
 8015c64:	b039      	add	sp, #228	; 0xe4
 8015c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015c6a <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>:
uint16_t Communication::Process(uint8_t ID, std::vector<uint8_t> data, bool* success) {
 8015c6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c6e:	b099      	sub	sp, #100	; 0x64
 8015c70:	4681      	mov	r9, r0
 8015c72:	460f      	mov	r7, r1
 8015c74:	4614      	mov	r4, r2
 8015c76:	4698      	mov	r8, r3
	uint16_t processed_length = 0;
 8015c78:	2300      	movs	r3, #0
 8015c7a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 8015c7e:	4642      	mov	r2, r8
 8015c80:	f7f8 ff45 	bl	800eb0e <_ZN13Communication12FindProtocolEhPb>
	if (not *success)
 8015c84:	f898 3000 	ldrb.w	r3, [r8]
 8015c88:	b91b      	cbnz	r3, 8015c92 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x28>
		return 0;
 8015c8a:	2000      	movs	r0, #0
}
 8015c8c:	b019      	add	sp, #100	; 0x64
 8015c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c92:	4682      	mov	sl, r0
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever); // TODO ADDED
 8015c94:	f04f 31ff 	mov.w	r1, #4294967295
 8015c98:	f8d9 0000 	ldr.w	r0, [r9]
 8015c9c:	f7f6 fe0c 	bl	800c8b8 <osSemaphoreAcquire>
 8015ca0:	e035      	b.n	8015d0e <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0xa4>
	  std::__throw_bad_alloc();
 8015ca2:	f005 fa23 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015ca6:	2500      	movs	r5, #0
 8015ca8:	e049      	b.n	8015d3e <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0xd4>
 8015caa:	4632      	mov	r2, r6
 8015cac:	4619      	mov	r1, r3
 8015cae:	4628      	mov	r0, r5
 8015cb0:	f005 fe2c 	bl	801b90c <memmove>
 8015cb4:	e053      	b.n	8015d5e <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0xf4>
 8015cb6:	f005 fa19 	bl	801b0ec <_ZSt17__throw_bad_allocv>
 8015cba:	2500      	movs	r5, #0
 8015cbc:	e078      	b.n	8015db0 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x146>
 8015cbe:	4632      	mov	r2, r6
 8015cc0:	4659      	mov	r1, fp
 8015cc2:	4628      	mov	r0, r5
 8015cc4:	f005 fe22 	bl	801b90c <memmove>
 8015cc8:	e082      	b.n	8015dd0 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x166>
			*success = false;
 8015cca:	2300      	movs	r3, #0
 8015ccc:	f888 3000 	strb.w	r3, [r8]
	_M_deallocate(_M_impl._M_start,
 8015cd0:	9806      	ldr	r0, [sp, #24]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015cd2:	9908      	ldr	r1, [sp, #32]
 8015cd4:	1a09      	subs	r1, r1, r0
	if (__p)
 8015cd6:	b108      	cbz	r0, 8015cdc <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x72>
	::operator delete(__p
 8015cd8:	f005 f944 	bl	801af64 <_ZdlPvj>
	osSemaphoreRelease(CommunicationSemaphore);  // TODO ADDED
 8015cdc:	f8d9 0000 	ldr.w	r0, [r9]
 8015ce0:	f7f6 fe1e 	bl	800c920 <osSemaphoreRelease>
	return processed_length;
 8015ce4:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
 8015ce8:	e7d0      	b.n	8015c8c <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x22>
	  std::__throw_bad_alloc();
 8015cea:	f005 f9ff 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015cee:	2500      	movs	r5, #0
 8015cf0:	e09b      	b.n	8015e2a <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x1c0>
 8015cf2:	4632      	mov	r2, r6
 8015cf4:	4659      	mov	r1, fp
 8015cf6:	4628      	mov	r0, r5
 8015cf8:	f005 fe08 	bl	801b90c <memmove>
 8015cfc:	e0a5      	b.n	8015e4a <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x1e0>
	::operator delete(__p
 8015cfe:	f005 f931 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8015d02:	9806      	ldr	r0, [sp, #24]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015d04:	9908      	ldr	r1, [sp, #32]
 8015d06:	1a09      	subs	r1, r1, r0
	if (__p)
 8015d08:	b108      	cbz	r0, 8015d0e <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0xa4>
 8015d0a:	f005 f92b 	bl	801af64 <_ZdlPvj>
	while (processed_length < data.size()) {// && processed_length < data.size()) {
 8015d0e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015d12:	6863      	ldr	r3, [r4, #4]
 8015d14:	6821      	ldr	r1, [r4, #0]
 8015d16:	1a5b      	subs	r3, r3, r1
 8015d18:	429a      	cmp	r2, r3
 8015d1a:	d2df      	bcs.n	8015cdc <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x72>
		MessageHeader message = protocol->DecodeProtocol(ID, data, &processed_length, success);
 8015d1c:	f8da 3000 	ldr.w	r3, [sl]
 8015d20:	f8d3 b000 	ldr.w	fp, [r3]
 8015d24:	6866      	ldr	r6, [r4, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015d26:	2300      	movs	r3, #0
 8015d28:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d2a:	930c      	str	r3, [sp, #48]	; 0x30
 8015d2c:	930d      	str	r3, [sp, #52]	; 0x34
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015d2e:	1a76      	subs	r6, r6, r1
 8015d30:	d0b9      	beq.n	8015ca6 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x3c>
	if (__n > this->_M_max_size())
 8015d32:	429e      	cmp	r6, r3
 8015d34:	dbb5      	blt.n	8015ca2 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x38>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015d36:	4630      	mov	r0, r6
 8015d38:	f005 f92a 	bl	801af90 <_Znwj>
 8015d3c:	4605      	mov	r5, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8015d3e:	950b      	str	r5, [sp, #44]	; 0x2c
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8015d40:	950c      	str	r5, [sp, #48]	; 0x30
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015d42:	442e      	add	r6, r5
 8015d44:	960d      	str	r6, [sp, #52]	; 0x34
 8015d46:	6866      	ldr	r6, [r4, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8015d48:	9503      	str	r5, [sp, #12]
      return std::__niter_wrap(__result,
 8015d4a:	6820      	ldr	r0, [r4, #0]
 8015d4c:	f7eb feb3 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8015d50:	9002      	str	r0, [sp, #8]
 8015d52:	4630      	mov	r0, r6
 8015d54:	f7eb feaf 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8015d58:	9b02      	ldr	r3, [sp, #8]
 8015d5a:	1ac6      	subs	r6, r0, r3
 8015d5c:	d1a5      	bne.n	8015caa <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x40>
	  return __result + _Num;
 8015d5e:	9b03      	ldr	r3, [sp, #12]
 8015d60:	4433      	add	r3, r6
	this->_M_impl._M_finish =
 8015d62:	930c      	str	r3, [sp, #48]	; 0x30
 8015d64:	f8cd 8004 	str.w	r8, [sp, #4]
 8015d68:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8015d6c:	9300      	str	r3, [sp, #0]
 8015d6e:	ab0b      	add	r3, sp, #44	; 0x2c
 8015d70:	463a      	mov	r2, r7
 8015d72:	4651      	mov	r1, sl
 8015d74:	a805      	add	r0, sp, #20
 8015d76:	47d8      	blx	fp
	_M_deallocate(_M_impl._M_start,
 8015d78:	980b      	ldr	r0, [sp, #44]	; 0x2c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015d7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015d7c:	1a09      	subs	r1, r1, r0
	if (__p)
 8015d7e:	b108      	cbz	r0, 8015d84 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x11a>
	::operator delete(__p
 8015d80:	f005 f8f0 	bl	801af64 <_ZdlPvj>
		if (not *success) break;
 8015d84:	f898 3000 	ldrb.w	r3, [r8]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d0a1      	beq.n	8015cd0 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x66>
 8015d8c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8015d90:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015d94:	9e07      	ldr	r6, [sp, #28]
 8015d96:	9a06      	ldr	r2, [sp, #24]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015d98:	2300      	movs	r3, #0
 8015d9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d9c:	9310      	str	r3, [sp, #64]	; 0x40
 8015d9e:	9311      	str	r3, [sp, #68]	; 0x44
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015da0:	1ab6      	subs	r6, r6, r2
 8015da2:	d08a      	beq.n	8015cba <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x50>
	if (__n > this->_M_max_size())
 8015da4:	429e      	cmp	r6, r3
 8015da6:	db86      	blt.n	8015cb6 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x4c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015da8:	4630      	mov	r0, r6
 8015daa:	f005 f8f1 	bl	801af90 <_Znwj>
 8015dae:	4605      	mov	r5, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8015db0:	950f      	str	r5, [sp, #60]	; 0x3c
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8015db2:	9510      	str	r5, [sp, #64]	; 0x40
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015db4:	442e      	add	r6, r5
 8015db6:	9611      	str	r6, [sp, #68]	; 0x44
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8015db8:	9502      	str	r5, [sp, #8]
      return std::__niter_wrap(__result,
 8015dba:	9806      	ldr	r0, [sp, #24]
 8015dbc:	f7eb fe7b 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8015dc0:	4683      	mov	fp, r0
 8015dc2:	9807      	ldr	r0, [sp, #28]
 8015dc4:	f7eb fe77 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8015dc8:	ebb0 060b 	subs.w	r6, r0, fp
 8015dcc:	f47f af77 	bne.w	8015cbe <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x54>
	  return __result + _Num;
 8015dd0:	9b02      	ldr	r3, [sp, #8]
 8015dd2:	4433      	add	r3, r6
	this->_M_impl._M_finish =
 8015dd4:	9310      	str	r3, [sp, #64]	; 0x40
 8015dd6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8015dda:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8015dde:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8015de2:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		if (!AcceptMessage(message)) {
 8015de6:	a90e      	add	r1, sp, #56	; 0x38
 8015de8:	4648      	mov	r0, r9
 8015dea:	f7f8 feb5 	bl	800eb58 <_ZN13Communication13AcceptMessageE13MessageHeader>
 8015dee:	4605      	mov	r5, r0
	_M_deallocate(_M_impl._M_start,
 8015df0:	980f      	ldr	r0, [sp, #60]	; 0x3c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015df2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015df4:	1a09      	subs	r1, r1, r0
	if (__p)
 8015df6:	b108      	cbz	r0, 8015dfc <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x192>
	::operator delete(__p
 8015df8:	f005 f8b4 	bl	801af64 <_ZdlPvj>
 8015dfc:	2d00      	cmp	r5, #0
 8015dfe:	f43f af64 	beq.w	8015cca <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x60>
		message.interface = ID;
 8015e02:	f88d 7014 	strb.w	r7, [sp, #20]
 8015e06:	f88d 704c 	strb.w	r7, [sp, #76]	; 0x4c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015e0a:	9e07      	ldr	r6, [sp, #28]
 8015e0c:	9a06      	ldr	r2, [sp, #24]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015e0e:	2300      	movs	r3, #0
 8015e10:	9314      	str	r3, [sp, #80]	; 0x50
 8015e12:	9315      	str	r3, [sp, #84]	; 0x54
 8015e14:	9316      	str	r3, [sp, #88]	; 0x58
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015e16:	1ab6      	subs	r6, r6, r2
 8015e18:	f43f af69 	beq.w	8015cee <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x84>
	if (__n > this->_M_max_size())
 8015e1c:	429e      	cmp	r6, r3
 8015e1e:	f6ff af64 	blt.w	8015cea <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x80>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015e22:	4630      	mov	r0, r6
 8015e24:	f005 f8b4 	bl	801af90 <_Znwj>
 8015e28:	4605      	mov	r5, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8015e2a:	9514      	str	r5, [sp, #80]	; 0x50
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8015e2c:	9515      	str	r5, [sp, #84]	; 0x54
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015e2e:	442e      	add	r6, r5
 8015e30:	9616      	str	r6, [sp, #88]	; 0x58
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8015e32:	9502      	str	r5, [sp, #8]
      return std::__niter_wrap(__result,
 8015e34:	9806      	ldr	r0, [sp, #24]
 8015e36:	f7eb fe3e 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8015e3a:	4683      	mov	fp, r0
 8015e3c:	9807      	ldr	r0, [sp, #28]
 8015e3e:	f7eb fe3a 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8015e42:	ebb0 060b 	subs.w	r6, r0, fp
 8015e46:	f47f af54 	bne.w	8015cf2 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x88>
	  return __result + _Num;
 8015e4a:	9b02      	ldr	r3, [sp, #8]
 8015e4c:	4433      	add	r3, r6
	this->_M_impl._M_finish =
 8015e4e:	9315      	str	r3, [sp, #84]	; 0x54
 8015e50:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8015e54:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8015e58:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8015e5c:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
		ParseMessage(message);
 8015e60:	a913      	add	r1, sp, #76	; 0x4c
 8015e62:	4648      	mov	r0, r9
 8015e64:	f7ff fc94 	bl	8015790 <_ZN13Communication12ParseMessageE13MessageHeader>
	_M_deallocate(_M_impl._M_start,
 8015e68:	9814      	ldr	r0, [sp, #80]	; 0x50
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8015e6a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015e6c:	1a09      	subs	r1, r1, r0
	if (__p)
 8015e6e:	2800      	cmp	r0, #0
 8015e70:	f47f af45 	bne.w	8015cfe <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x94>
 8015e74:	e745      	b.n	8015d02 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x98>

08015e76 <_ZN13HardwareDelay13AssignedTimerEP17TIM_HandleTypeDef>:
void HardwareDelay::Init(void) {
	DelaySemaphore = osSemaphoreNew(1, 1, NULL);
	osSemaphoreRelease(DelaySemaphore);
}

bool HardwareDelay::AssignedTimer(TIM_HandleTypeDef* timer_) {
 8015e76:	b570      	push	{r4, r5, r6, lr}
 8015e78:	4604      	mov	r4, r0
 8015e7a:	460e      	mov	r6, r1
	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 8015e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8015e80:	6800      	ldr	r0, [r0, #0]
 8015e82:	f7f6 fd19 	bl	800c8b8 <osSemaphoreAcquire>
	bool result = timer == timer_;
 8015e86:	6865      	ldr	r5, [r4, #4]
 8015e88:	42b5      	cmp	r5, r6
 8015e8a:	bf14      	ite	ne
 8015e8c:	2500      	movne	r5, #0
 8015e8e:	2501      	moveq	r5, #1
	osSemaphoreRelease(DelaySemaphore);
 8015e90:	6820      	ldr	r0, [r4, #0]
 8015e92:	f7f6 fd45 	bl	800c920 <osSemaphoreRelease>
	return result;
}
 8015e96:	4628      	mov	r0, r5
 8015e98:	bd70      	pop	{r4, r5, r6, pc}

08015e9a <_ZN13HardwareDelay10StartDelayEv>:
	FindDelayIndex(ID, &success);
	osSemaphoreRelease(DelaySemaphore);
	return success;
}

void HardwareDelay::StartDelay() {
 8015e9a:	b508      	push	{r3, lr}
	timer->Instance->CNT = 0;
 8015e9c:	6843      	ldr	r3, [r0, #4]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	625a      	str	r2, [r3, #36]	; 0x24
	timer->Instance->ARR = pending_delays[active_delay].delay;
 8015ea4:	7b03      	ldrb	r3, [r0, #12]
	return *(this->_M_impl._M_start + __n);
 8015ea6:	6902      	ldr	r2, [r0, #16]
 8015ea8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015eac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015eb0:	6842      	ldr	r2, [r0, #4]
 8015eb2:	6812      	ldr	r2, [r2, #0]
 8015eb4:	885b      	ldrh	r3, [r3, #2]
 8015eb6:	62d3      	str	r3, [r2, #44]	; 0x2c
	timer->Instance->SR = ~TIM_IT_UPDATE;
 8015eb8:	6843      	ldr	r3, [r0, #4]
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	f06f 0201 	mvn.w	r2, #1
 8015ec0:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(timer);
 8015ec2:	6840      	ldr	r0, [r0, #4]
 8015ec4:	f7f4 fb02 	bl	800a4cc <HAL_TIM_Base_Start_IT>
}
 8015ec8:	bd08      	pop	{r3, pc}
	...

08015ecc <_ZN13HardwareDelay14StartNextDelayEv>:

void HardwareDelay::StartNextDelay(void) {
 8015ecc:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015ece:	6943      	ldr	r3, [r0, #20]
 8015ed0:	6904      	ldr	r4, [r0, #16]
 8015ed2:	eba3 0e04 	sub.w	lr, r3, r4
 8015ed6:	ea4f 0eae 	mov.w	lr, lr, asr #2
 8015eda:	4a1e      	ldr	r2, [pc, #120]	; (8015f54 <_ZN13HardwareDelay14StartNextDelayEv+0x88>)
 8015edc:	fb02 fe0e 	mul.w	lr, r2, lr
	if (pending_delays.size() == 0) return;
 8015ee0:	429c      	cmp	r4, r3
 8015ee2:	d035      	beq.n	8015f50 <_ZN13HardwareDelay14StartNextDelayEv+0x84>

	// Find the smallest delay in memory
	uint8_t min_delay = 0;
	for (uint8_t index = 1; index < pending_delays.size(); index++) {
 8015ee4:	2301      	movs	r3, #1
	uint8_t min_delay = 0;
 8015ee6:	2100      	movs	r1, #0
 8015ee8:	e001      	b.n	8015eee <_ZN13HardwareDelay14StartNextDelayEv+0x22>
	for (uint8_t index = 1; index < pending_delays.size(); index++) {
 8015eea:	3301      	adds	r3, #1
 8015eec:	b2db      	uxtb	r3, r3
 8015eee:	4573      	cmp	r3, lr
 8015ef0:	d20e      	bcs.n	8015f10 <_ZN13HardwareDelay14StartNextDelayEv+0x44>
	return *(this->_M_impl._M_start + __n);
 8015ef2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8015ef6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		if (pending_delays[index].delay < pending_delays[min_delay].delay)
 8015efa:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8015efe:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8015f02:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015f06:	8852      	ldrh	r2, [r2, #2]
 8015f08:	4594      	cmp	ip, r2
 8015f0a:	d2ee      	bcs.n	8015eea <_ZN13HardwareDelay14StartNextDelayEv+0x1e>
			min_delay = index;
 8015f0c:	4619      	mov	r1, r3
 8015f0e:	e7ec      	b.n	8015eea <_ZN13HardwareDelay14StartNextDelayEv+0x1e>
	}

	// Update other delays based on the active one
	active_delay = min_delay;
 8015f10:	7301      	strb	r1, [r0, #12]
	for (uint8_t index = 0; index < pending_delays.size(); index++) {
 8015f12:	2200      	movs	r2, #0
 8015f14:	e00d      	b.n	8015f32 <_ZN13HardwareDelay14StartNextDelayEv+0x66>
 8015f16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015f1a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
		if (index != active_delay) {
			pending_delays[index].delay -= pending_delays[active_delay].delay;
 8015f1e:	885c      	ldrh	r4, [r3, #2]
 8015f20:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 8015f24:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8015f28:	884b      	ldrh	r3, [r1, #2]
 8015f2a:	1b1b      	subs	r3, r3, r4
 8015f2c:	804b      	strh	r3, [r1, #2]
	for (uint8_t index = 0; index < pending_delays.size(); index++) {
 8015f2e:	3201      	adds	r2, #1
 8015f30:	b2d2      	uxtb	r2, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015f32:	6943      	ldr	r3, [r0, #20]
 8015f34:	6901      	ldr	r1, [r0, #16]
 8015f36:	1a5b      	subs	r3, r3, r1
 8015f38:	109b      	asrs	r3, r3, #2
 8015f3a:	4c06      	ldr	r4, [pc, #24]	; (8015f54 <_ZN13HardwareDelay14StartNextDelayEv+0x88>)
 8015f3c:	fb04 f303 	mul.w	r3, r4, r3
 8015f40:	429a      	cmp	r2, r3
 8015f42:	d203      	bcs.n	8015f4c <_ZN13HardwareDelay14StartNextDelayEv+0x80>
		if (index != active_delay) {
 8015f44:	7b03      	ldrb	r3, [r0, #12]
 8015f46:	4293      	cmp	r3, r2
 8015f48:	d1e5      	bne.n	8015f16 <_ZN13HardwareDelay14StartNextDelayEv+0x4a>
 8015f4a:	e7f0      	b.n	8015f2e <_ZN13HardwareDelay14StartNextDelayEv+0x62>
		}
	}

	StartDelay();
 8015f4c:	f7ff ffa5 	bl	8015e9a <_ZN13HardwareDelay10StartDelayEv>
}
 8015f50:	bd10      	pop	{r4, pc}
 8015f52:	bf00      	nop
 8015f54:	aaaaaaab 	.word	0xaaaaaaab

08015f58 <_ZNSt6vectorI5DelaySaIS0_EE7reserveEj>:
    vector<_Tp, _Alloc>::
 8015f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__n > this->max_size())
 8015f5a:	4b1c      	ldr	r3, [pc, #112]	; (8015fcc <_ZNSt6vectorI5DelaySaIS0_EE7reserveEj+0x74>)
 8015f5c:	4299      	cmp	r1, r3
 8015f5e:	d82a      	bhi.n	8015fb6 <_ZNSt6vectorI5DelaySaIS0_EE7reserveEj+0x5e>
 8015f60:	4604      	mov	r4, r0
 8015f62:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_end_of_storage
 8015f64:	6883      	ldr	r3, [r0, #8]
			 - this->_M_impl._M_start); }
 8015f66:	6802      	ldr	r2, [r0, #0]
 8015f68:	1a9b      	subs	r3, r3, r2
 8015f6a:	109b      	asrs	r3, r3, #2
 8015f6c:	4918      	ldr	r1, [pc, #96]	; (8015fd0 <_ZNSt6vectorI5DelaySaIS0_EE7reserveEj+0x78>)
 8015f6e:	fb01 f303 	mul.w	r3, r1, r3
      if (this->capacity() < __n)
 8015f72:	429d      	cmp	r5, r3
 8015f74:	d91e      	bls.n	8015fb4 <_ZNSt6vectorI5DelaySaIS0_EE7reserveEj+0x5c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015f76:	6847      	ldr	r7, [r0, #4]
 8015f78:	1abf      	subs	r7, r7, r2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015f7a:	b30d      	cbz	r5, 8015fc0 <_ZNSt6vectorI5DelaySaIS0_EE7reserveEj+0x68>
	if (__n > this->_M_max_size())
 8015f7c:	4b13      	ldr	r3, [pc, #76]	; (8015fcc <_ZNSt6vectorI5DelaySaIS0_EE7reserveEj+0x74>)
 8015f7e:	429d      	cmp	r5, r3
 8015f80:	d81c      	bhi.n	8015fbc <_ZNSt6vectorI5DelaySaIS0_EE7reserveEj+0x64>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015f82:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8015f86:	0080      	lsls	r0, r0, #2
 8015f88:	f005 f802 	bl	801af90 <_Znwj>
 8015f8c:	4606      	mov	r6, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8015f8e:	6821      	ldr	r1, [r4, #0]
 8015f90:	6862      	ldr	r2, [r4, #4]
      ptrdiff_t __count = __last - __first;
 8015f92:	1a52      	subs	r2, r2, r1
      if (__count > 0)
 8015f94:	2a00      	cmp	r2, #0
 8015f96:	dc15      	bgt.n	8015fc4 <_ZNSt6vectorI5DelaySaIS0_EE7reserveEj+0x6c>
	  _M_deallocate(this->_M_impl._M_start,
 8015f98:	6820      	ldr	r0, [r4, #0]
			this->_M_impl._M_end_of_storage
 8015f9a:	68a1      	ldr	r1, [r4, #8]
			- this->_M_impl._M_start);
 8015f9c:	1a09      	subs	r1, r1, r0
	if (__p)
 8015f9e:	b108      	cbz	r0, 8015fa4 <_ZNSt6vectorI5DelaySaIS0_EE7reserveEj+0x4c>
	::operator delete(__p
 8015fa0:	f004 ffe0 	bl	801af64 <_ZdlPvj>
	  this->_M_impl._M_start = __tmp;
 8015fa4:	6026      	str	r6, [r4, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 8015fa6:	4437      	add	r7, r6
 8015fa8:	6067      	str	r7, [r4, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015faa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015fae:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8015fb2:	60a5      	str	r5, [r4, #8]
    }
 8015fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__throw_length_error(__N("vector::reserve"));
 8015fb6:	4807      	ldr	r0, [pc, #28]	; (8015fd4 <_ZNSt6vectorI5DelaySaIS0_EE7reserveEj+0x7c>)
 8015fb8:	f005 f89e 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	  std::__throw_bad_alloc();
 8015fbc:	f005 f896 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015fc0:	2600      	movs	r6, #0
 8015fc2:	e7e4      	b.n	8015f8e <_ZNSt6vectorI5DelaySaIS0_EE7reserveEj+0x36>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015fc4:	4630      	mov	r0, r6
 8015fc6:	f005 fca1 	bl	801b90c <memmove>
 8015fca:	e7e5      	b.n	8015f98 <_ZNSt6vectorI5DelaySaIS0_EE7reserveEj+0x40>
 8015fcc:	0aaaaaaa 	.word	0x0aaaaaaa
 8015fd0:	aaaaaaab 	.word	0xaaaaaaab
 8015fd4:	0801c064 	.word	0x0801c064

08015fd8 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef>:
HardwareDelay::HardwareDelay(TIM_HandleTypeDef* timer_) {
 8015fd8:	b510      	push	{r4, lr}
 8015fda:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015fdc:	2300      	movs	r3, #0
 8015fde:	6103      	str	r3, [r0, #16]
 8015fe0:	6143      	str	r3, [r0, #20]
 8015fe2:	6183      	str	r3, [r0, #24]
	timer = timer_;
 8015fe4:	6041      	str	r1, [r0, #4]
	pending_delays.reserve(DELAY_NUMBER_OF_CHANNELS);
 8015fe6:	2103      	movs	r1, #3
 8015fe8:	3010      	adds	r0, #16
 8015fea:	f7ff ffb5 	bl	8015f58 <_ZNSt6vectorI5DelaySaIS0_EE7reserveEj>
}
 8015fee:	4620      	mov	r0, r4
 8015ff0:	bd10      	pop	{r4, pc}

08015ff2 <_ZSt12__niter_baseIP5DelaySt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    { return __it.base(); }
 8015ff2:	4770      	bx	lr

08015ff4 <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 8015ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ff6:	4605      	mov	r5, r0
 8015ff8:	460c      	mov	r4, r1
      { return __normal_iterator(_M_current + __n); }
 8015ffa:	f101 000c 	add.w	r0, r1, #12
      : _M_current(__i) { }
 8015ffe:	686f      	ldr	r7, [r5, #4]
      if (__position + 1 != end())
 8016000:	4287      	cmp	r7, r0
 8016002:	d012      	beq.n	801602a <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x36>
      return std::__niter_wrap(__result,
 8016004:	f7ff fff5 	bl	8015ff2 <_ZSt12__niter_baseIP5DelaySt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8016008:	4606      	mov	r6, r0
 801600a:	4638      	mov	r0, r7
 801600c:	f7ff fff1 	bl	8015ff2 <_ZSt12__niter_baseIP5DelaySt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8016010:	4607      	mov	r7, r0
 8016012:	4620      	mov	r0, r4
 8016014:	f7ff ffed 	bl	8015ff2 <_ZSt12__niter_baseIP5DelaySt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  const ptrdiff_t _Num = __last - __first;
 8016018:	1bba      	subs	r2, r7, r6
	  if (_Num)
 801601a:	42be      	cmp	r6, r7
 801601c:	d002      	beq.n	8016024 <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x30>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801601e:	4631      	mov	r1, r6
 8016020:	f005 fc74 	bl	801b90c <memmove>
    { return __from + (__res - std::__niter_base(__from)); }
 8016024:	4620      	mov	r0, r4
 8016026:	f7ff ffe4 	bl	8015ff2 <_ZSt12__niter_baseIP5DelaySt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
      --this->_M_impl._M_finish;
 801602a:	686b      	ldr	r3, [r5, #4]
 801602c:	3b0c      	subs	r3, #12
 801602e:	606b      	str	r3, [r5, #4]
    }
 8016030:	4620      	mov	r0, r4
 8016032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016034 <_ZN13HardwareDelay14TriggeredDelayEv>:

void HardwareDelay::TriggeredDelay(void) {
 8016034:	b510      	push	{r4, lr}
 8016036:	4604      	mov	r4, r0
	HAL_TIM_Base_Stop_IT(timer);
 8016038:	6840      	ldr	r0, [r0, #4]
 801603a:	f7f4 fa8f 	bl	800a55c <HAL_TIM_Base_Stop_IT>

	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 801603e:	f04f 31ff 	mov.w	r1, #4294967295
 8016042:	6820      	ldr	r0, [r4, #0]
 8016044:	f7f6 fc38 	bl	800c8b8 <osSemaphoreAcquire>
	timer->Instance->SR = ~TIM_IT_UPDATE;
 8016048:	6863      	ldr	r3, [r4, #4]
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	f06f 0201 	mvn.w	r2, #1
 8016050:	611a      	str	r2, [r3, #16]

	if (pending_delays[active_delay].callback != NULL) {
 8016052:	7b23      	ldrb	r3, [r4, #12]
	return *(this->_M_impl._M_start + __n);
 8016054:	6921      	ldr	r1, [r4, #16]
 8016056:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801605a:	0098      	lsls	r0, r3, #2
 801605c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016060:	689a      	ldr	r2, [r3, #8]
 8016062:	b112      	cbz	r2, 801606a <_ZN13HardwareDelay14TriggeredDelayEv+0x36>
		pending_delays[active_delay].callback(pending_delays[active_delay].context, pending_delays[active_delay].ID);
 8016064:	5c09      	ldrb	r1, [r1, r0]
 8016066:	6858      	ldr	r0, [r3, #4]
 8016068:	4790      	blx	r2
 801606a:	6921      	ldr	r1, [r4, #16]
	}

	pending_delays.erase(pending_delays.begin() + active_delay);
 801606c:	7b23      	ldrb	r3, [r4, #12]
      { return __normal_iterator(_M_current + __n); }
 801606e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      { return _M_erase(begin() + (__position - cbegin())); }
 8016072:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8016076:	f104 0010 	add.w	r0, r4, #16
 801607a:	f7ff ffbb 	bl	8015ff4 <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>

	StartNextDelay();
 801607e:	4620      	mov	r0, r4
 8016080:	f7ff ff24 	bl	8015ecc <_ZN13HardwareDelay14StartNextDelayEv>
	osSemaphoreRelease(DelaySemaphore);
 8016084:	6820      	ldr	r0, [r4, #0]
 8016086:	f7f6 fc4b 	bl	800c920 <osSemaphoreRelease>
}
 801608a:	bd10      	pop	{r4, pc}

0801608c <_ZN4LEDSC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 801608c:	2200      	movs	r2, #0
 801608e:	6082      	str	r2, [r0, #8]
 8016090:	60c2      	str	r2, [r0, #12]
 8016092:	6102      	str	r2, [r0, #16]
 8016094:	6142      	str	r2, [r0, #20]
 8016096:	6182      	str	r2, [r0, #24]
 8016098:	61c2      	str	r2, [r0, #28]
 801609a:	6202      	str	r2, [r0, #32]
 801609c:	6242      	str	r2, [r0, #36]	; 0x24
 801609e:	6282      	str	r2, [r0, #40]	; 0x28
 80160a0:	62c2      	str	r2, [r0, #44]	; 0x2c
 80160a2:	6302      	str	r2, [r0, #48]	; 0x30
 80160a4:	6342      	str	r2, [r0, #52]	; 0x34

#include <LEDs/LEDS.hpp>

LEDS::LEDS()
{
}
 80160a6:	4770      	bx	lr

080160a8 <_ZN4LEDS4InitEP9Registers>:

void LEDS::Init(Registers* registers_) {
 80160a8:	b510      	push	{r4, lr}
 80160aa:	4604      	mov	r4, r0
	registers = registers_;
 80160ac:	6001      	str	r1, [r0, #0]

	LEDsSemaphore = osSemaphoreNew(1,1,NULL);
 80160ae:	2200      	movs	r2, #0
 80160b0:	2101      	movs	r1, #1
 80160b2:	4608      	mov	r0, r1
 80160b4:	f7f6 fba4 	bl	800c800 <osSemaphoreNew>
 80160b8:	6060      	str	r0, [r4, #4]
	osSemaphoreRelease(LEDsSemaphore);
 80160ba:	f7f6 fc31 	bl	800c920 <osSemaphoreRelease>
}
 80160be:	bd10      	pop	{r4, pc}

080160c0 <_ZN4LEDS4SpinEv>:
		}
	);

}

void LEDS::Spin(void) { // called every 100ms
 80160c0:	b570      	push	{r4, r5, r6, lr}
 80160c2:	4606      	mov	r6, r0
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80160c4:	f04f 31ff 	mov.w	r1, #4294967295
 80160c8:	6840      	ldr	r0, [r0, #4]
 80160ca:	f7f6 fbf5 	bl	800c8b8 <osSemaphoreAcquire>
    for (LED & led : LEDs) {
 80160ce:	68b3      	ldr	r3, [r6, #8]
      : _M_current(__i) { }
 80160d0:	68f5      	ldr	r5, [r6, #12]
 80160d2:	e011      	b.n	80160f8 <_ZN4LEDS4SpinEv+0x38>
            for(uint8_t t : led.timings) {
                if (led.counter < t)
                    break;
                state =  not state;
            }
            HAL_GPIO_WritePin(led.gpio.port, led.gpio.pin, (GPIO_PinState) state);
 80160d4:	8921      	ldrh	r1, [r4, #8]
 80160d6:	6860      	ldr	r0, [r4, #4]
 80160d8:	f7f0 fc20 	bl	800691c <HAL_GPIO_WritePin>

            led.counter++;
 80160dc:	7ba3      	ldrb	r3, [r4, #14]
 80160de:	3301      	adds	r3, #1
 80160e0:	b2db      	uxtb	r3, r3
 80160e2:	73a3      	strb	r3, [r4, #14]
            if (led.counter >= led.T) {
 80160e4:	7f22      	ldrb	r2, [r4, #28]
 80160e6:	4293      	cmp	r3, r2
 80160e8:	d304      	bcc.n	80160f4 <_ZN4LEDS4SpinEv+0x34>
                led.counter = 0;
 80160ea:	2300      	movs	r3, #0
 80160ec:	73a3      	strb	r3, [r4, #14]
                if (not led.repeat)
 80160ee:	7b63      	ldrb	r3, [r4, #13]
 80160f0:	b903      	cbnz	r3, 80160f4 <_ZN4LEDS4SpinEv+0x34>
                    led.blink = false;
 80160f2:	7323      	strb	r3, [r4, #12]
	++_M_current;
 80160f4:	f104 0320 	add.w	r3, r4, #32
    { return __lhs.base() != __rhs.base(); }
 80160f8:	461c      	mov	r4, r3
    for (LED & led : LEDs) {
 80160fa:	42ab      	cmp	r3, r5
 80160fc:	d010      	beq.n	8016120 <_ZN4LEDS4SpinEv+0x60>
        if (led.blink) {
 80160fe:	7b1a      	ldrb	r2, [r3, #12]
 8016100:	2a00      	cmp	r2, #0
 8016102:	d0f7      	beq.n	80160f4 <_ZN4LEDS4SpinEv+0x34>
            for(uint8_t t : led.timings) {
 8016104:	691b      	ldr	r3, [r3, #16]
      : _M_current(__i) { }
 8016106:	6960      	ldr	r0, [r4, #20]
    { return __lhs.base() != __rhs.base(); }
 8016108:	4619      	mov	r1, r3
 801610a:	4298      	cmp	r0, r3
 801610c:	d0e2      	beq.n	80160d4 <_ZN4LEDS4SpinEv+0x14>
 801610e:	781b      	ldrb	r3, [r3, #0]
                if (led.counter < t)
 8016110:	f894 c00e 	ldrb.w	ip, [r4, #14]
 8016114:	459c      	cmp	ip, r3
 8016116:	d3dd      	bcc.n	80160d4 <_ZN4LEDS4SpinEv+0x14>
                state =  not state;
 8016118:	f082 0201 	eor.w	r2, r2, #1
	++_M_current;
 801611c:	1c4b      	adds	r3, r1, #1
	return *this;
 801611e:	e7f3      	b.n	8016108 <_ZN4LEDS4SpinEv+0x48>
            }
        }
    }
    osSemaphoreRelease(LEDsSemaphore);
 8016120:	6870      	ldr	r0, [r6, #4]
 8016122:	f7f6 fbfd 	bl	800c920 <osSemaphoreRelease>

    osDelay(DEFAULT_LEDS_PERIOD);
 8016126:	2064      	movs	r0, #100	; 0x64
 8016128:	f7f6 fb5c 	bl	800c7e4 <osDelay>
}
 801612c:	bd70      	pop	{r4, r5, r6, pc}

0801612e <_ZN4LEDS6GetLEDEhPb>:
	if (success) return true;

	return false;
}

uint8_t LEDS::GetLED(uint8_t ID, bool* success) {
 801612e:	b410      	push	{r4}
    uint8_t index = 0;
    for (LED & led : LEDs) {
 8016130:	6883      	ldr	r3, [r0, #8]
      : _M_current(__i) { }
 8016132:	68c4      	ldr	r4, [r0, #12]
    uint8_t index = 0;
 8016134:	2000      	movs	r0, #0
 8016136:	e003      	b.n	8016140 <_ZN4LEDS6GetLEDEhPb+0x12>
        if (led.ID == ID) {
            *success = true;
            return index;
        }
        index++;
 8016138:	3001      	adds	r0, #1
 801613a:	b2c0      	uxtb	r0, r0
	++_M_current;
 801613c:	f10c 0320 	add.w	r3, ip, #32
    { return __lhs.base() != __rhs.base(); }
 8016140:	469c      	mov	ip, r3
    for (LED & led : LEDs) {
 8016142:	429c      	cmp	r4, r3
 8016144:	d005      	beq.n	8016152 <_ZN4LEDS6GetLEDEhPb+0x24>
        if (led.ID == ID) {
 8016146:	781b      	ldrb	r3, [r3, #0]
 8016148:	428b      	cmp	r3, r1
 801614a:	d1f5      	bne.n	8016138 <_ZN4LEDS6GetLEDEhPb+0xa>
            *success = true;
 801614c:	2301      	movs	r3, #1
 801614e:	7013      	strb	r3, [r2, #0]
            return index;
 8016150:	e001      	b.n	8016156 <_ZN4LEDS6GetLEDEhPb+0x28>
    }
    *success = false;
 8016152:	2000      	movs	r0, #0
 8016154:	7010      	strb	r0, [r2, #0]
    return 0;
}
 8016156:	f85d 4b04 	ldr.w	r4, [sp], #4
 801615a:	4770      	bx	lr

0801615c <_ZN4LEDS6SetLEDEh13GPIO_PinState>:
bool LEDS::SetLED(uint8_t ID, GPIO_PinState state) {
 801615c:	b570      	push	{r4, r5, r6, lr}
 801615e:	b082      	sub	sp, #8
 8016160:	4604      	mov	r4, r0
 8016162:	4616      	mov	r6, r2
    uint8_t index = GetLED(ID, &success);
 8016164:	f10d 0207 	add.w	r2, sp, #7
 8016168:	f7ff ffe1 	bl	801612e <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 801616c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016170:	b933      	cbnz	r3, 8016180 <_ZN4LEDS6SetLEDEh13GPIO_PinState+0x24>
    osSemaphoreRelease(LEDsSemaphore);
 8016172:	6860      	ldr	r0, [r4, #4]
 8016174:	f7f6 fbd4 	bl	800c920 <osSemaphoreRelease>
}
 8016178:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801617c:	b002      	add	sp, #8
 801617e:	bd70      	pop	{r4, r5, r6, pc}
 8016180:	4605      	mov	r5, r0
    	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8016182:	f04f 31ff 	mov.w	r1, #4294967295
 8016186:	6860      	ldr	r0, [r4, #4]
 8016188:	f7f6 fb96 	bl	800c8b8 <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 801618c:	68a3      	ldr	r3, [r4, #8]
 801618e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
        LEDs[index].blink = false;
 8016192:	2200      	movs	r2, #0
 8016194:	731a      	strb	r2, [r3, #12]
 8016196:	68a0      	ldr	r0, [r4, #8]
 8016198:	eb00 1045 	add.w	r0, r0, r5, lsl #5
        HAL_GPIO_WritePin(LEDs[index].gpio.port, LEDs[index].gpio.pin, state);
 801619c:	4632      	mov	r2, r6
 801619e:	8901      	ldrh	r1, [r0, #8]
 80161a0:	6840      	ldr	r0, [r0, #4]
 80161a2:	f7f0 fbbb 	bl	800691c <HAL_GPIO_WritePin>
 80161a6:	e7e4      	b.n	8016172 <_ZN4LEDS6SetLEDEh13GPIO_PinState+0x16>

080161a8 <_ZN4LEDS5BlinkEh>:
bool LEDS::Blink(uint8_t ID) {
 80161a8:	b530      	push	{r4, r5, lr}
 80161aa:	b083      	sub	sp, #12
 80161ac:	4604      	mov	r4, r0
 80161ae:	460d      	mov	r5, r1
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80161b0:	f04f 31ff 	mov.w	r1, #4294967295
 80161b4:	6840      	ldr	r0, [r0, #4]
 80161b6:	f7f6 fb7f 	bl	800c8b8 <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 80161ba:	f10d 0207 	add.w	r2, sp, #7
 80161be:	4629      	mov	r1, r5
 80161c0:	4620      	mov	r0, r4
 80161c2:	f7ff ffb4 	bl	801612e <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 80161c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80161ca:	b16b      	cbz	r3, 80161e8 <_ZN4LEDS5BlinkEh+0x40>
 80161cc:	68a3      	ldr	r3, [r4, #8]
 80161ce:	eb03 1340 	add.w	r3, r3, r0, lsl #5
        LEDs[index].blink = true;
 80161d2:	2201      	movs	r2, #1
 80161d4:	731a      	strb	r2, [r3, #12]
 80161d6:	68a3      	ldr	r3, [r4, #8]
 80161d8:	eb03 1340 	add.w	r3, r3, r0, lsl #5
        LEDs[index].repeat = true;
 80161dc:	735a      	strb	r2, [r3, #13]
 80161de:	68a3      	ldr	r3, [r4, #8]
 80161e0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
        LEDs[index].counter = 0;
 80161e4:	2300      	movs	r3, #0
 80161e6:	7383      	strb	r3, [r0, #14]
    osSemaphoreRelease(LEDsSemaphore);
 80161e8:	6860      	ldr	r0, [r4, #4]
 80161ea:	f7f6 fb99 	bl	800c920 <osSemaphoreRelease>
}
 80161ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80161f2:	b003      	add	sp, #12
 80161f4:	bd30      	pop	{r4, r5, pc}

080161f6 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80161f6:	b508      	push	{r3, lr}
			return self->Blink(*input);
 80161f8:	7811      	ldrb	r1, [r2, #0]
 80161fa:	f7ff ffd5 	bl	80161a8 <_ZN4LEDS5BlinkEh>
		}
 80161fe:	bd08      	pop	{r3, pc}

08016200 <_ZN4LEDS9BlinkOnceEh>:
bool LEDS::BlinkOnce(uint8_t ID) {
 8016200:	b530      	push	{r4, r5, lr}
 8016202:	b083      	sub	sp, #12
 8016204:	4604      	mov	r4, r0
 8016206:	460d      	mov	r5, r1
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8016208:	f04f 31ff 	mov.w	r1, #4294967295
 801620c:	6840      	ldr	r0, [r0, #4]
 801620e:	f7f6 fb53 	bl	800c8b8 <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 8016212:	f10d 0207 	add.w	r2, sp, #7
 8016216:	4629      	mov	r1, r5
 8016218:	4620      	mov	r0, r4
 801621a:	f7ff ff88 	bl	801612e <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 801621e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016222:	b16b      	cbz	r3, 8016240 <_ZN4LEDS9BlinkOnceEh+0x40>
 8016224:	68a3      	ldr	r3, [r4, #8]
 8016226:	eb03 1340 	add.w	r3, r3, r0, lsl #5
        LEDs[index].blink = true;
 801622a:	2201      	movs	r2, #1
 801622c:	731a      	strb	r2, [r3, #12]
 801622e:	68a3      	ldr	r3, [r4, #8]
 8016230:	eb03 1340 	add.w	r3, r3, r0, lsl #5
        LEDs[index].repeat = false;
 8016234:	2200      	movs	r2, #0
 8016236:	735a      	strb	r2, [r3, #13]
 8016238:	68a3      	ldr	r3, [r4, #8]
 801623a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
        LEDs[index].counter = 0;
 801623e:	7382      	strb	r2, [r0, #14]
    osSemaphoreRelease(LEDsSemaphore);
 8016240:	6860      	ldr	r0, [r4, #4]
 8016242:	f7f6 fb6d 	bl	800c920 <osSemaphoreRelease>
}
 8016246:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801624a:	b003      	add	sp, #12
 801624c:	bd30      	pop	{r4, r5, pc}

0801624e <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801624e:	b508      	push	{r3, lr}
			return self->BlinkOnce(*input);
 8016250:	7811      	ldrb	r1, [r2, #0]
 8016252:	f7ff ffd5 	bl	8016200 <_ZN4LEDS9BlinkOnceEh>
		}
 8016256:	bd08      	pop	{r3, pc}

08016258 <_ZN4LEDS9GetRGBLEDEhPb>:

uint8_t LEDS::GetRGBLED(uint8_t ID, bool* success) {
 8016258:	b410      	push	{r4}
    uint8_t index = 0;
    for (RGBLED & led : RGB_LEDs) {
 801625a:	6943      	ldr	r3, [r0, #20]
      : _M_current(__i) { }
 801625c:	6984      	ldr	r4, [r0, #24]
    uint8_t index = 0;
 801625e:	2000      	movs	r0, #0
 8016260:	e003      	b.n	801626a <_ZN4LEDS9GetRGBLEDEhPb+0x12>
        if (led.ID == ID) {
            *success = true;
            return index;
        }
        index++;
 8016262:	3001      	adds	r0, #1
 8016264:	b2c0      	uxtb	r0, r0
	++_M_current;
 8016266:	f10c 0310 	add.w	r3, ip, #16
    { return __lhs.base() != __rhs.base(); }
 801626a:	469c      	mov	ip, r3
    for (RGBLED & led : RGB_LEDs) {
 801626c:	429c      	cmp	r4, r3
 801626e:	d005      	beq.n	801627c <_ZN4LEDS9GetRGBLEDEhPb+0x24>
        if (led.ID == ID) {
 8016270:	781b      	ldrb	r3, [r3, #0]
 8016272:	428b      	cmp	r3, r1
 8016274:	d1f5      	bne.n	8016262 <_ZN4LEDS9GetRGBLEDEhPb+0xa>
            *success = true;
 8016276:	2301      	movs	r3, #1
 8016278:	7013      	strb	r3, [r2, #0]
            return index;
 801627a:	e001      	b.n	8016280 <_ZN4LEDS9GetRGBLEDEhPb+0x28>
    }
    *success = false;
 801627c:	2000      	movs	r0, #0
 801627e:	7010      	strb	r0, [r2, #0]
    return 0;
}
 8016280:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016284:	4770      	bx	lr

08016286 <_ZN4LEDS6SetRGBEhhhh>:
bool LEDS::SetRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B) {
 8016286:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016288:	b087      	sub	sp, #28
 801628a:	4604      	mov	r4, r0
 801628c:	4616      	mov	r6, r2
 801628e:	461f      	mov	r7, r3
    uint8_t index = GetRGBLED(ID, &success);
 8016290:	f10d 0217 	add.w	r2, sp, #23
 8016294:	f7ff ffe0 	bl	8016258 <_ZN4LEDS9GetRGBLEDEhPb>
    if (success) {
 8016298:	f89d 1017 	ldrb.w	r1, [sp, #23]
 801629c:	b931      	cbnz	r1, 80162ac <_ZN4LEDS6SetRGBEhhhh+0x26>
    osSemaphoreRelease(LEDsSemaphore);
 801629e:	6860      	ldr	r0, [r4, #4]
 80162a0:	f7f6 fb3e 	bl	800c920 <osSemaphoreRelease>
}
 80162a4:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80162a8:	b007      	add	sp, #28
 80162aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162ac:	4605      	mov	r5, r0
    	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80162ae:	f04f 31ff 	mov.w	r1, #4294967295
 80162b2:	6860      	ldr	r0, [r4, #4]
 80162b4:	f7f6 fb00 	bl	800c8b8 <osSemaphoreAcquire>
 80162b8:	6960      	ldr	r0, [r4, #20]
 80162ba:	eb00 1005 	add.w	r0, r0, r5, lsl #4
        RGBLED led = RGB_LEDs[index];
 80162be:	ad01      	add	r5, sp, #4
 80162c0:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80162c2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        *led.pulse_red = R;
 80162c6:	600e      	str	r6, [r1, #0]
        *led.pulse_green = G;
 80162c8:	6017      	str	r7, [r2, #0]
        *led.pulse_blue = B;
 80162ca:	9b04      	ldr	r3, [sp, #16]
 80162cc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80162d0:	601a      	str	r2, [r3, #0]
 80162d2:	e7e4      	b.n	801629e <_ZN4LEDS6SetRGBEhhhh+0x18>

080162d4 <_ZN4LEDS9GetI2CLEDEhPb>:

uint8_t LEDS::GetI2CLED(uint8_t ID, bool* success) {
 80162d4:	b410      	push	{r4}
    uint8_t index = 0;
    for (I2CLED & led : I2C_LEDs) {
 80162d6:	6a03      	ldr	r3, [r0, #32]
      : _M_current(__i) { }
 80162d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
    uint8_t index = 0;
 80162da:	2000      	movs	r0, #0
 80162dc:	e003      	b.n	80162e6 <_ZN4LEDS9GetI2CLEDEhPb+0x12>
        if (led.ID == ID) {
            *success = true;
            return index;
        }
        index++;
 80162de:	3001      	adds	r0, #1
 80162e0:	b2c0      	uxtb	r0, r0
	++_M_current;
 80162e2:	f10c 0310 	add.w	r3, ip, #16
    { return __lhs.base() != __rhs.base(); }
 80162e6:	469c      	mov	ip, r3
    for (I2CLED & led : I2C_LEDs) {
 80162e8:	429c      	cmp	r4, r3
 80162ea:	d005      	beq.n	80162f8 <_ZN4LEDS9GetI2CLEDEhPb+0x24>
        if (led.ID == ID) {
 80162ec:	781b      	ldrb	r3, [r3, #0]
 80162ee:	428b      	cmp	r3, r1
 80162f0:	d1f5      	bne.n	80162de <_ZN4LEDS9GetI2CLEDEhPb+0xa>
            *success = true;
 80162f2:	2301      	movs	r3, #1
 80162f4:	7013      	strb	r3, [r2, #0]
            return index;
 80162f6:	e001      	b.n	80162fc <_ZN4LEDS9GetI2CLEDEhPb+0x28>
    }
    *success = false;
 80162f8:	2000      	movs	r0, #0
 80162fa:	7010      	strb	r0, [r2, #0]
    return 0;
}
 80162fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016300:	4770      	bx	lr

08016302 <_ZN4LEDS12GetI2CRGBLEDEhPb>:

uint8_t LEDS::GetI2CRGBLED(uint8_t ID, bool* success) {
 8016302:	b410      	push	{r4}
    uint8_t index = 0;
    for (I2CRGBLED & led : I2C_RGB_LEDs) {
 8016304:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      : _M_current(__i) { }
 8016306:	6b04      	ldr	r4, [r0, #48]	; 0x30
    uint8_t index = 0;
 8016308:	2000      	movs	r0, #0
 801630a:	e003      	b.n	8016314 <_ZN4LEDS12GetI2CRGBLEDEhPb+0x12>
        if (led.ID == ID) {
            *success = true;
            return index;
        }
        index++;
 801630c:	3001      	adds	r0, #1
 801630e:	b2c0      	uxtb	r0, r0
	++_M_current;
 8016310:	f10c 0314 	add.w	r3, ip, #20
    { return __lhs.base() != __rhs.base(); }
 8016314:	469c      	mov	ip, r3
    for (I2CRGBLED & led : I2C_RGB_LEDs) {
 8016316:	429c      	cmp	r4, r3
 8016318:	d005      	beq.n	8016326 <_ZN4LEDS12GetI2CRGBLEDEhPb+0x24>
        if (led.ID == ID) {
 801631a:	781b      	ldrb	r3, [r3, #0]
 801631c:	428b      	cmp	r3, r1
 801631e:	d1f5      	bne.n	801630c <_ZN4LEDS12GetI2CRGBLEDEhPb+0xa>
            *success = true;
 8016320:	2301      	movs	r3, #1
 8016322:	7013      	strb	r3, [r2, #0]
            return index;
 8016324:	e001      	b.n	801632a <_ZN4LEDS12GetI2CRGBLEDEhPb+0x28>
    }
    *success = false;
 8016326:	2000      	movs	r0, #0
 8016328:	7010      	strb	r0, [r2, #0]
    return 0;
}
 801632a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801632e:	4770      	bx	lr

08016330 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm>:
HAL_StatusTypeDef LEDS::ConfigureI2CLED(uint8_t ID, uint16_t memory_address, uint8_t* data, uint16_t size, uint32_t timeout) {
 8016330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016334:	b089      	sub	sp, #36	; 0x24
 8016336:	4604      	mov	r4, r0
 8016338:	4689      	mov	r9, r1
 801633a:	9204      	str	r2, [sp, #16]
 801633c:	461d      	mov	r5, r3
 801633e:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8016342:	9f13      	ldr	r7, [sp, #76]	; 0x4c
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 8016344:	f7ed fa58 	bl	80037f8 <HAL_GetTick>
 8016348:	19c6      	adds	r6, r0, r7
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 801634a:	f04f 31ff 	mov.w	r1, #4294967295
 801634e:	6860      	ldr	r0, [r4, #4]
 8016350:	f7f6 fab2 	bl	800c8b8 <osSemaphoreAcquire>
	index = GetI2CRGBLED(ID, &success);
 8016354:	f10d 021f 	add.w	r2, sp, #31
 8016358:	4649      	mov	r1, r9
 801635a:	4620      	mov	r0, r4
 801635c:	f7ff ffd1 	bl	8016302 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (success) {
 8016360:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8016364:	b31b      	cbz	r3, 80163ae <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x7e>
 8016366:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016368:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801636c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		present = led->present;
 8016370:	7843      	ldrb	r3, [r0, #1]
 8016372:	9305      	str	r3, [sp, #20]
		interface = led->interface;
 8016374:	f8d0 9004 	ldr.w	r9, [r0, #4]
		device_address = led->device_address;
 8016378:	f8b0 a008 	ldrh.w	sl, [r0, #8]
		memory_address_size = led->memory_address_size;
 801637c:	f8b0 b00a 	ldrh.w	fp, [r0, #10]
	osSemaphoreRelease(LEDsSemaphore);
 8016380:	6860      	ldr	r0, [r4, #4]
 8016382:	f7f6 facd 	bl	800c920 <osSemaphoreRelease>
	if (present) {
 8016386:	9b05      	ldr	r3, [sp, #20]
 8016388:	b35b      	cbz	r3, 80163e2 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0xb2>
			status = HAL_I2C_Mem_Write(interface, device_address, memory_address, memory_address_size, data, size, timeout);
 801638a:	9702      	str	r7, [sp, #8]
 801638c:	f8cd 8004 	str.w	r8, [sp, #4]
 8016390:	9500      	str	r5, [sp, #0]
 8016392:	465b      	mov	r3, fp
 8016394:	9a04      	ldr	r2, [sp, #16]
 8016396:	4651      	mov	r1, sl
 8016398:	4648      	mov	r0, r9
 801639a:	f7f0 fca9 	bl	8006cf0 <HAL_I2C_Mem_Write>
 801639e:	4604      	mov	r4, r0
		} while ((status == HAL_BUSY) && (HAL_GetTick() < end_timestamp)); // try until the bus is free
 80163a0:	2802      	cmp	r0, #2
 80163a2:	d11f      	bne.n	80163e4 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0xb4>
 80163a4:	f7ed fa28 	bl	80037f8 <HAL_GetTick>
 80163a8:	42b0      	cmp	r0, r6
 80163aa:	d3ee      	bcc.n	801638a <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x5a>
 80163ac:	e01a      	b.n	80163e4 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0xb4>
		index = GetI2CLED(ID, &success);
 80163ae:	f10d 021f 	add.w	r2, sp, #31
 80163b2:	4649      	mov	r1, r9
 80163b4:	4620      	mov	r0, r4
 80163b6:	f7ff ff8d 	bl	80162d4 <_ZN4LEDS9GetI2CLEDEhPb>
		if (!success) {
 80163ba:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80163be:	b15b      	cbz	r3, 80163d8 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0xa8>
 80163c0:	6a23      	ldr	r3, [r4, #32]
 80163c2:	eb03 1300 	add.w	r3, r3, r0, lsl #4
		present = led->present;
 80163c6:	785a      	ldrb	r2, [r3, #1]
 80163c8:	9205      	str	r2, [sp, #20]
		interface = led->interface;
 80163ca:	f8d3 9004 	ldr.w	r9, [r3, #4]
		device_address = led->device_address;
 80163ce:	f8b3 a008 	ldrh.w	sl, [r3, #8]
		memory_address_size = led->memory_address_size;
 80163d2:	f8b3 b00a 	ldrh.w	fp, [r3, #10]
 80163d6:	e7d3      	b.n	8016380 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x50>
			osSemaphoreRelease(LEDsSemaphore);
 80163d8:	6860      	ldr	r0, [r4, #4]
 80163da:	f7f6 faa1 	bl	800c920 <osSemaphoreRelease>
			return HAL_ERROR;
 80163de:	2401      	movs	r4, #1
 80163e0:	e000      	b.n	80163e4 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0xb4>
	HAL_StatusTypeDef status = HAL_BUSY;
 80163e2:	2402      	movs	r4, #2
}
 80163e4:	4620      	mov	r0, r4
 80163e6:	b009      	add	sp, #36	; 0x24
 80163e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080163ec <_ZN4LEDS15ConfigureI2CLEDEhthm>:
HAL_StatusTypeDef LEDS::ConfigureI2CLED(uint8_t ID, uint16_t memory_address, uint8_t data, uint32_t timeout) {
 80163ec:	b500      	push	{lr}
 80163ee:	b085      	sub	sp, #20
	uint8_t buffer = data;
 80163f0:	f88d 300f 	strb.w	r3, [sp, #15]
	return ConfigureI2CLED(ID, memory_address, &buffer, 1, timeout);
 80163f4:	9b06      	ldr	r3, [sp, #24]
 80163f6:	9301      	str	r3, [sp, #4]
 80163f8:	2301      	movs	r3, #1
 80163fa:	9300      	str	r3, [sp, #0]
 80163fc:	f10d 030f 	add.w	r3, sp, #15
 8016400:	f7ff ff96 	bl	8016330 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm>
}
 8016404:	b005      	add	sp, #20
 8016406:	f85d fb04 	ldr.w	pc, [sp], #4

0801640a <_ZN4LEDS6SetLEDEhhm>:
HAL_StatusTypeDef LEDS::SetLED(uint8_t ID, uint8_t value, uint32_t timeout) {
 801640a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801640e:	b084      	sub	sp, #16
 8016410:	4604      	mov	r4, r0
 8016412:	460d      	mov	r5, r1
 8016414:	4616      	mov	r6, r2
 8016416:	461f      	mov	r7, r3
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8016418:	f04f 31ff 	mov.w	r1, #4294967295
 801641c:	6840      	ldr	r0, [r0, #4]
 801641e:	f7f6 fa4b 	bl	800c8b8 <osSemaphoreAcquire>
	uint8_t index = GetI2CLED(ID, &success);
 8016422:	f10d 020f 	add.w	r2, sp, #15
 8016426:	4629      	mov	r1, r5
 8016428:	4620      	mov	r0, r4
 801642a:	f7ff ff53 	bl	80162d4 <_ZN4LEDS9GetI2CLEDEhPb>
	if (!success) {
 801642e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8016432:	b183      	cbz	r3, 8016456 <_ZN4LEDS6SetLEDEhhm+0x4c>
 8016434:	6a23      	ldr	r3, [r4, #32]
 8016436:	eb03 1800 	add.w	r8, r3, r0, lsl #4
	osSemaphoreRelease(LEDsSemaphore);
 801643a:	6860      	ldr	r0, [r4, #4]
 801643c:	f7f6 fa70 	bl	800c920 <osSemaphoreRelease>
	return ConfigureI2CLED(ID, led->light_address, value, timeout);
 8016440:	f8b8 200e 	ldrh.w	r2, [r8, #14]
 8016444:	9700      	str	r7, [sp, #0]
 8016446:	4633      	mov	r3, r6
 8016448:	4629      	mov	r1, r5
 801644a:	4620      	mov	r0, r4
 801644c:	f7ff ffce 	bl	80163ec <_ZN4LEDS15ConfigureI2CLEDEhthm>
}
 8016450:	b004      	add	sp, #16
 8016452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		osSemaphoreRelease(LEDsSemaphore);
 8016456:	6860      	ldr	r0, [r4, #4]
 8016458:	f7f6 fa62 	bl	800c920 <osSemaphoreRelease>
		return HAL_ERROR;
 801645c:	2001      	movs	r0, #1
 801645e:	e7f7      	b.n	8016450 <_ZN4LEDS6SetLEDEhhm+0x46>

08016460 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8016460:	2b02      	cmp	r3, #2
 8016462:	d001      	beq.n	8016468 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x8>
 8016464:	2000      	movs	r0, #0
		}
 8016466:	4770      	bx	lr
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8016468:	b570      	push	{r4, r5, r6, lr}
 801646a:	b082      	sub	sp, #8
 801646c:	4605      	mov	r5, r0
 801646e:	4614      	mov	r4, r2
			uint8_t ID = input[0];
 8016470:	7816      	ldrb	r6, [r2, #0]
			self->GetLED(ID, &success);
 8016472:	f10d 0207 	add.w	r2, sp, #7
 8016476:	4631      	mov	r1, r6
 8016478:	f7ff fe59 	bl	801612e <_ZN4LEDS6GetLEDEhPb>
			if (success) {
 801647c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016480:	b14b      	cbz	r3, 8016496 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x36>
				return self->SetLED(input[0], (input[1] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8016482:	7862      	ldrb	r2, [r4, #1]
 8016484:	3a00      	subs	r2, #0
 8016486:	bf18      	it	ne
 8016488:	2201      	movne	r2, #1
 801648a:	7821      	ldrb	r1, [r4, #0]
 801648c:	4628      	mov	r0, r5
 801648e:	f7ff fe65 	bl	801615c <_ZN4LEDS6SetLEDEh13GPIO_PinState>
		}
 8016492:	b002      	add	sp, #8
 8016494:	bd70      	pop	{r4, r5, r6, pc}
			self->GetI2CLED(ID, &success);
 8016496:	f10d 0207 	add.w	r2, sp, #7
 801649a:	4631      	mov	r1, r6
 801649c:	4628      	mov	r0, r5
 801649e:	f7ff ff19 	bl	80162d4 <_ZN4LEDS9GetI2CLEDEhPb>
			if (success) {
 80164a2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80164a6:	2800      	cmp	r0, #0
 80164a8:	d0f3      	beq.n	8016492 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x32>
				return self->SetLED(input[0], input[1]) == HAL_OK;
 80164aa:	f04f 33ff 	mov.w	r3, #4294967295
 80164ae:	7862      	ldrb	r2, [r4, #1]
 80164b0:	7821      	ldrb	r1, [r4, #0]
 80164b2:	4628      	mov	r0, r5
 80164b4:	f7ff ffa9 	bl	801640a <_ZN4LEDS6SetLEDEhhm>
 80164b8:	fab0 f080 	clz	r0, r0
 80164bc:	0940      	lsrs	r0, r0, #5
 80164be:	e7e8      	b.n	8016492 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x32>

080164c0 <_ZN4LEDS13SetBrightnessEhhm>:
HAL_StatusTypeDef LEDS::SetBrightness(uint8_t ID, uint8_t brightness, uint32_t timeout) {
 80164c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164c4:	b084      	sub	sp, #16
 80164c6:	4604      	mov	r4, r0
 80164c8:	460d      	mov	r5, r1
 80164ca:	4616      	mov	r6, r2
 80164cc:	461f      	mov	r7, r3
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80164ce:	f04f 31ff 	mov.w	r1, #4294967295
 80164d2:	6840      	ldr	r0, [r0, #4]
 80164d4:	f7f6 f9f0 	bl	800c8b8 <osSemaphoreAcquire>
	uint8_t index = GetI2CRGBLED(ID, &success);
 80164d8:	f10d 020f 	add.w	r2, sp, #15
 80164dc:	4629      	mov	r1, r5
 80164de:	4620      	mov	r0, r4
 80164e0:	f7ff ff0f 	bl	8016302 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (!success) {
 80164e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80164e8:	b193      	cbz	r3, 8016510 <_ZN4LEDS13SetBrightnessEhhm+0x50>
 80164ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80164ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80164f0:	eb03 0880 	add.w	r8, r3, r0, lsl #2
	osSemaphoreRelease(LEDsSemaphore);
 80164f4:	6860      	ldr	r0, [r4, #4]
 80164f6:	f7f6 fa13 	bl	800c920 <osSemaphoreRelease>
	return ConfigureI2CLED(ID, led->brightness_address, brightness, timeout);
 80164fa:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 80164fe:	9700      	str	r7, [sp, #0]
 8016500:	4633      	mov	r3, r6
 8016502:	4629      	mov	r1, r5
 8016504:	4620      	mov	r0, r4
 8016506:	f7ff ff71 	bl	80163ec <_ZN4LEDS15ConfigureI2CLEDEhthm>
}
 801650a:	b004      	add	sp, #16
 801650c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		osSemaphoreRelease(LEDsSemaphore);
 8016510:	6860      	ldr	r0, [r4, #4]
 8016512:	f7f6 fa05 	bl	800c920 <osSemaphoreRelease>
		return HAL_ERROR;
 8016516:	2001      	movs	r0, #1
 8016518:	e7f7      	b.n	801650a <_ZN4LEDS13SetBrightnessEhhm+0x4a>

0801651a <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801651a:	2b02      	cmp	r3, #2
 801651c:	d001      	beq.n	8016522 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x8>
 801651e:	2000      	movs	r0, #0
		}
 8016520:	4770      	bx	lr
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8016522:	b508      	push	{r3, lr}
 8016524:	4611      	mov	r1, r2
			return self->SetBrightness(input[0], input[1]) == HAL_OK;
 8016526:	f04f 33ff 	mov.w	r3, #4294967295
 801652a:	7852      	ldrb	r2, [r2, #1]
 801652c:	7809      	ldrb	r1, [r1, #0]
 801652e:	f7ff ffc7 	bl	80164c0 <_ZN4LEDS13SetBrightnessEhhm>
 8016532:	fab0 f080 	clz	r0, r0
 8016536:	0940      	lsrs	r0, r0, #5
		}
 8016538:	bd08      	pop	{r3, pc}

0801653a <_ZN4LEDS9SetI2CRGBEhhhhm>:
HAL_StatusTypeDef LEDS::SetI2CRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B, uint32_t timeout) {
 801653a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801653e:	b085      	sub	sp, #20
 8016540:	4604      	mov	r4, r0
 8016542:	460e      	mov	r6, r1
 8016544:	4617      	mov	r7, r2
 8016546:	4698      	mov	r8, r3
 8016548:	9d0d      	ldr	r5, [sp, #52]	; 0x34
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 801654a:	f04f 31ff 	mov.w	r1, #4294967295
 801654e:	6840      	ldr	r0, [r0, #4]
 8016550:	f7f6 f9b2 	bl	800c8b8 <osSemaphoreAcquire>
	uint8_t index = GetI2CRGBLED(ID, &success);
 8016554:	f10d 020f 	add.w	r2, sp, #15
 8016558:	4631      	mov	r1, r6
 801655a:	4620      	mov	r0, r4
 801655c:	f7ff fed1 	bl	8016302 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (!success) {
 8016560:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8016564:	b31b      	cbz	r3, 80165ae <_ZN4LEDS9SetI2CRGBEhhhhm+0x74>
 8016566:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016568:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801656c:	eb03 0980 	add.w	r9, r3, r0, lsl #2
	osSemaphoreRelease(LEDsSemaphore);
 8016570:	6860      	ldr	r0, [r4, #4]
 8016572:	f7f6 f9d5 	bl	800c920 <osSemaphoreRelease>
	status = ConfigureI2CLED(ID, led->R_address, R, timeout);
 8016576:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 801657a:	9500      	str	r5, [sp, #0]
 801657c:	463b      	mov	r3, r7
 801657e:	4631      	mov	r1, r6
 8016580:	4620      	mov	r0, r4
 8016582:	f7ff ff33 	bl	80163ec <_ZN4LEDS15ConfigureI2CLEDEhthm>
	if (status != HAL_OK) return status;
 8016586:	b9b0      	cbnz	r0, 80165b6 <_ZN4LEDS9SetI2CRGBEhhhhm+0x7c>
	status = ConfigureI2CLED(ID, led->G_address, G, timeout);
 8016588:	f8b9 2010 	ldrh.w	r2, [r9, #16]
 801658c:	9500      	str	r5, [sp, #0]
 801658e:	4643      	mov	r3, r8
 8016590:	4631      	mov	r1, r6
 8016592:	4620      	mov	r0, r4
 8016594:	f7ff ff2a 	bl	80163ec <_ZN4LEDS15ConfigureI2CLEDEhthm>
	if (status != HAL_OK) return status;
 8016598:	b968      	cbnz	r0, 80165b6 <_ZN4LEDS9SetI2CRGBEhhhhm+0x7c>
	status = ConfigureI2CLED(ID, led->B_address, B, timeout);
 801659a:	f8b9 2012 	ldrh.w	r2, [r9, #18]
 801659e:	9500      	str	r5, [sp, #0]
 80165a0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80165a4:	4631      	mov	r1, r6
 80165a6:	4620      	mov	r0, r4
 80165a8:	f7ff ff20 	bl	80163ec <_ZN4LEDS15ConfigureI2CLEDEhthm>
	if (status != HAL_OK) return status;
 80165ac:	e003      	b.n	80165b6 <_ZN4LEDS9SetI2CRGBEhhhhm+0x7c>
		osSemaphoreRelease(LEDsSemaphore);
 80165ae:	6860      	ldr	r0, [r4, #4]
 80165b0:	f7f6 f9b6 	bl	800c920 <osSemaphoreRelease>
		return HAL_ERROR;
 80165b4:	2001      	movs	r0, #1
}
 80165b6:	b005      	add	sp, #20
 80165b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080165bc <_ZN4LEDS8ClearLEDEh>:
bool LEDS::ClearLED(uint8_t ID) {
 80165bc:	b570      	push	{r4, r5, r6, lr}
 80165be:	b084      	sub	sp, #16
 80165c0:	4604      	mov	r4, r0
 80165c2:	460d      	mov	r5, r1
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80165c4:	f04f 31ff 	mov.w	r1, #4294967295
 80165c8:	6840      	ldr	r0, [r0, #4]
 80165ca:	f7f6 f975 	bl	800c8b8 <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 80165ce:	f10d 020f 	add.w	r2, sp, #15
 80165d2:	4629      	mov	r1, r5
 80165d4:	4620      	mov	r0, r4
 80165d6:	f7ff fdaa 	bl	801612e <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 80165da:	f89d 600f 	ldrb.w	r6, [sp, #15]
 80165de:	b9ae      	cbnz	r6, 801660c <_ZN4LEDS8ClearLEDEh+0x50>
    index = GetI2CLED(ID, &success);
 80165e0:	f10d 020f 	add.w	r2, sp, #15
 80165e4:	4629      	mov	r1, r5
 80165e6:	4620      	mov	r0, r4
 80165e8:	f7ff fe74 	bl	80162d4 <_ZN4LEDS9GetI2CLEDEhPb>
    if (success) {
 80165ec:	f89d 600f 	ldrb.w	r6, [sp, #15]
 80165f0:	bb36      	cbnz	r6, 8016640 <_ZN4LEDS8ClearLEDEh+0x84>
    index = GetI2CRGBLED(ID, &success);
 80165f2:	f10d 020f 	add.w	r2, sp, #15
 80165f6:	4629      	mov	r1, r5
 80165f8:	4620      	mov	r0, r4
 80165fa:	f7ff fe82 	bl	8016302 <_ZN4LEDS12GetI2CRGBLEDEhPb>
    if (success) {
 80165fe:	f89d 600f 	ldrb.w	r6, [sp, #15]
 8016602:	bb46      	cbnz	r6, 8016656 <_ZN4LEDS8ClearLEDEh+0x9a>
    osSemaphoreRelease(LEDsSemaphore);
 8016604:	6860      	ldr	r0, [r4, #4]
 8016606:	f7f6 f98b 	bl	800c920 <osSemaphoreRelease>
    return false;
 801660a:	e016      	b.n	801663a <_ZN4LEDS8ClearLEDEh+0x7e>
 801660c:	68a3      	ldr	r3, [r4, #8]
 801660e:	eb03 1340 	add.w	r3, r3, r0, lsl #5
        LEDs[index].blink = false;
 8016612:	2200      	movs	r2, #0
 8016614:	731a      	strb	r2, [r3, #12]
 8016616:	68a3      	ldr	r3, [r4, #8]
 8016618:	eb03 1340 	add.w	r3, r3, r0, lsl #5
        LEDs[index].repeat = false;
 801661c:	735a      	strb	r2, [r3, #13]
 801661e:	68a3      	ldr	r3, [r4, #8]
 8016620:	eb03 1340 	add.w	r3, r3, r0, lsl #5
        LEDs[index].counter = 0;
 8016624:	739a      	strb	r2, [r3, #14]
 8016626:	68a3      	ldr	r3, [r4, #8]
 8016628:	eb03 1040 	add.w	r0, r3, r0, lsl #5
        HAL_GPIO_WritePin(LEDs[index].gpio.port, LEDs[index].gpio.pin, GPIO_PIN_RESET);
 801662c:	8901      	ldrh	r1, [r0, #8]
 801662e:	6840      	ldr	r0, [r0, #4]
 8016630:	f7f0 f974 	bl	800691c <HAL_GPIO_WritePin>
        osSemaphoreRelease(LEDsSemaphore);
 8016634:	6860      	ldr	r0, [r4, #4]
 8016636:	f7f6 f973 	bl	800c920 <osSemaphoreRelease>
}
 801663a:	4630      	mov	r0, r6
 801663c:	b004      	add	sp, #16
 801663e:	bd70      	pop	{r4, r5, r6, pc}
    	osSemaphoreRelease(LEDsSemaphore);
 8016640:	6860      	ldr	r0, [r4, #4]
 8016642:	f7f6 f96d 	bl	800c920 <osSemaphoreRelease>
    	SetLED(ID, 0);
 8016646:	f04f 33ff 	mov.w	r3, #4294967295
 801664a:	2200      	movs	r2, #0
 801664c:	4629      	mov	r1, r5
 801664e:	4620      	mov	r0, r4
 8016650:	f7ff fedb 	bl	801640a <_ZN4LEDS6SetLEDEhhm>
    	return true;
 8016654:	e7f1      	b.n	801663a <_ZN4LEDS8ClearLEDEh+0x7e>
    	osSemaphoreRelease(LEDsSemaphore);
 8016656:	6860      	ldr	r0, [r4, #4]
 8016658:	f7f6 f962 	bl	800c920 <osSemaphoreRelease>
		SetI2CRGB(ID, 0, 0, 0);
 801665c:	f04f 33ff 	mov.w	r3, #4294967295
 8016660:	9301      	str	r3, [sp, #4]
 8016662:	2200      	movs	r2, #0
 8016664:	9200      	str	r2, [sp, #0]
 8016666:	4613      	mov	r3, r2
 8016668:	4629      	mov	r1, r5
 801666a:	4620      	mov	r0, r4
 801666c:	f7ff ff65 	bl	801653a <_ZN4LEDS9SetI2CRGBEhhhhm>
		return true;
 8016670:	e7e3      	b.n	801663a <_ZN4LEDS8ClearLEDEh+0x7e>

08016672 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 4) return false;
 8016672:	2b04      	cmp	r3, #4
 8016674:	d001      	beq.n	801667a <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x8>
 8016676:	2000      	movs	r0, #0
		}
 8016678:	4770      	bx	lr
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801667a:	b570      	push	{r4, r5, r6, lr}
 801667c:	b084      	sub	sp, #16
 801667e:	4605      	mov	r5, r0
 8016680:	4614      	mov	r4, r2
			uint8_t ID = input[0];
 8016682:	7816      	ldrb	r6, [r2, #0]
			self->GetRGBLED(ID, &success);
 8016684:	f10d 020f 	add.w	r2, sp, #15
 8016688:	4631      	mov	r1, r6
 801668a:	f7ff fde5 	bl	8016258 <_ZN4LEDS9GetRGBLEDEhPb>
			if (success) {
 801668e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8016692:	b14b      	cbz	r3, 80166a8 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x36>
				return self->SetRGB(ID, input[1], input[2], input[3]);
 8016694:	78e3      	ldrb	r3, [r4, #3]
 8016696:	9300      	str	r3, [sp, #0]
 8016698:	78a3      	ldrb	r3, [r4, #2]
 801669a:	7862      	ldrb	r2, [r4, #1]
 801669c:	4631      	mov	r1, r6
 801669e:	4628      	mov	r0, r5
 80166a0:	f7ff fdf1 	bl	8016286 <_ZN4LEDS6SetRGBEhhhh>
		}
 80166a4:	b004      	add	sp, #16
 80166a6:	bd70      	pop	{r4, r5, r6, pc}
			self->GetI2CRGBLED(ID, &success);
 80166a8:	f10d 020f 	add.w	r2, sp, #15
 80166ac:	4631      	mov	r1, r6
 80166ae:	4628      	mov	r0, r5
 80166b0:	f7ff fe27 	bl	8016302 <_ZN4LEDS12GetI2CRGBLEDEhPb>
			if (success) {
 80166b4:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80166b8:	2800      	cmp	r0, #0
 80166ba:	d0f3      	beq.n	80166a4 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x32>
				return self->SetI2CRGB(ID, input[1], input[2], input[3]) == HAL_OK;
 80166bc:	f04f 33ff 	mov.w	r3, #4294967295
 80166c0:	9301      	str	r3, [sp, #4]
 80166c2:	78e3      	ldrb	r3, [r4, #3]
 80166c4:	9300      	str	r3, [sp, #0]
 80166c6:	78a3      	ldrb	r3, [r4, #2]
 80166c8:	7862      	ldrb	r2, [r4, #1]
 80166ca:	4631      	mov	r1, r6
 80166cc:	4628      	mov	r0, r5
 80166ce:	f7ff ff34 	bl	801653a <_ZN4LEDS9SetI2CRGBEhhhhm>
 80166d2:	fab0 f080 	clz	r0, r0
 80166d6:	0940      	lsrs	r0, r0, #5
 80166d8:	e7e4      	b.n	80166a4 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x32>

080166da <_ZN4LEDS11ExistingLEDEh>:
bool LEDS::ExistingLED(uint8_t ID) {
 80166da:	b530      	push	{r4, r5, lr}
 80166dc:	b083      	sub	sp, #12
 80166de:	4604      	mov	r4, r0
 80166e0:	460d      	mov	r5, r1
	GetLED(ID, &success);
 80166e2:	f10d 0207 	add.w	r2, sp, #7
 80166e6:	f7ff fd22 	bl	801612e <_ZN4LEDS6GetLEDEhPb>
	if (success) return true;
 80166ea:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80166ee:	b108      	cbz	r0, 80166f4 <_ZN4LEDS11ExistingLEDEh+0x1a>
}
 80166f0:	b003      	add	sp, #12
 80166f2:	bd30      	pop	{r4, r5, pc}
	GetRGBLED(ID, &success);
 80166f4:	f10d 0207 	add.w	r2, sp, #7
 80166f8:	4629      	mov	r1, r5
 80166fa:	4620      	mov	r0, r4
 80166fc:	f7ff fdac 	bl	8016258 <_ZN4LEDS9GetRGBLEDEhPb>
	if (success) return true;
 8016700:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8016704:	2800      	cmp	r0, #0
 8016706:	d1f3      	bne.n	80166f0 <_ZN4LEDS11ExistingLEDEh+0x16>
	GetI2CLED(ID, &success);
 8016708:	f10d 0207 	add.w	r2, sp, #7
 801670c:	4629      	mov	r1, r5
 801670e:	4620      	mov	r0, r4
 8016710:	f7ff fde0 	bl	80162d4 <_ZN4LEDS9GetI2CLEDEhPb>
	if (success) return true;
 8016714:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8016718:	2800      	cmp	r0, #0
 801671a:	d1e9      	bne.n	80166f0 <_ZN4LEDS11ExistingLEDEh+0x16>
	GetI2CRGBLED(ID, &success);
 801671c:	f10d 0207 	add.w	r2, sp, #7
 8016720:	4629      	mov	r1, r5
 8016722:	4620      	mov	r0, r4
 8016724:	f7ff fded 	bl	8016302 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (success) return true;
 8016728:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801672c:	e7e0      	b.n	80166f0 <_ZN4LEDS11ExistingLEDEh+0x16>

0801672e <_ZN4LEDS11IDFoundLEDSEv>:

	SetRGB(LED_RGB, 0, 0, 0);
#endif
}

void LEDS::IDFoundLEDS(void) {
 801672e:	b508      	push	{r3, lr}
#ifdef USE_SMD_LEDs
	SetLED(LED_STATUS, GPIO_PIN_SET);
 8016730:	2201      	movs	r2, #1
 8016732:	2107      	movs	r1, #7
 8016734:	f7ff fd12 	bl	801615c <_ZN4LEDS6SetLEDEh13GPIO_PinState>
#endif
#ifdef USE_I2C_LEDs
	SetI2CRGB(LED_RGB_TOP, 0, 255, 0); // green when ID found
#endif
}
 8016738:	bd08      	pop	{r3, pc}

0801673a <_ZN4LEDS16CommunicationLEDEh>:
#ifdef USE_SMD_LEDs
	SetLED(LED_FAULT, GPIO_PIN_SET);
#endif
}

void LEDS::CommunicationLED(uint8_t interface_ID) {
 801673a:	b508      	push	{r3, lr}
#ifdef USE_SMD_LEDs
	if (interface_ID == UART_PIC || interface_ID == UART_EXTENSION) return; // no LED for these interfaces
 801673c:	1f4b      	subs	r3, r1, #5
 801673e:	b2db      	uxtb	r3, r3
 8016740:	2b01      	cmp	r3, #1
 8016742:	d901      	bls.n	8016748 <_ZN4LEDS16CommunicationLEDEh+0xe>

	BlinkOnce(interface_ID);
 8016744:	f7ff fd5c 	bl	8016200 <_ZN4LEDS9BlinkOnceEh>
#endif
}
 8016748:	bd08      	pop	{r3, pc}
	...

0801674c <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801674c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016750:	b083      	sub	sp, #12
 8016752:	4688      	mov	r8, r1
 8016754:	4616      	mov	r6, r2
 8016756:	2301      	movs	r3, #1
 8016758:	9300      	str	r3, [sp, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801675a:	6842      	ldr	r2, [r0, #4]
 801675c:	6803      	ldr	r3, [r0, #0]
 801675e:	1ad3      	subs	r3, r2, r3
	if (max_size() - size() < __n)
 8016760:	f06f 4178 	mvn.w	r1, #4160749568	; 0xf8000000
 8016764:	ebb1 1f23 	cmp.w	r1, r3, asr #4
 8016768:	d040      	beq.n	80167ec <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>
 801676a:	4604      	mov	r4, r0
 801676c:	111d      	asrs	r5, r3, #4
	const size_type __len = size() + (std::max)(size(), __n);
 801676e:	9501      	str	r5, [sp, #4]
      if (__a < __b)
 8016770:	2d00      	cmp	r5, #0
 8016772:	d03e      	beq.n	80167f2 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa6>
      return __a;
 8016774:	ab01      	add	r3, sp, #4
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	441d      	add	r5, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801677a:	6823      	ldr	r3, [r4, #0]
 801677c:	1ad2      	subs	r2, r2, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801677e:	ebb5 1f22 	cmp.w	r5, r2, asr #4
 8016782:	d338      	bcc.n	80167f6 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
 8016784:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 8016788:	d238      	bcs.n	80167fc <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb0>
      pointer __old_start = this->_M_impl._M_start;
 801678a:	f8d4 9000 	ldr.w	r9, [r4]
      pointer __old_finish = this->_M_impl._M_finish;
 801678e:	f8d4 a004 	ldr.w	sl, [r4, #4]
    { return __lhs.base() - __rhs.base(); }
 8016792:	eba8 0b09 	sub.w	fp, r8, r9
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016796:	b3b5      	cbz	r5, 8016806 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xba>
	if (__n > this->_M_max_size())
 8016798:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 801679c:	d231      	bcs.n	8016802 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb6>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801679e:	0128      	lsls	r0, r5, #4
 80167a0:	f004 fbf6 	bl	801af90 <_Znwj>
 80167a4:	4607      	mov	r7, r0
	  _Alloc_traits::construct(this->_M_impl,
 80167a6:	eb07 0c0b 	add.w	ip, r7, fp
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80167aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80167ae:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      ptrdiff_t __count = __last - __first;
 80167b2:	eba8 0609 	sub.w	r6, r8, r9
      if (__count > 0)
 80167b6:	2e00      	cmp	r6, #0
 80167b8:	dc27      	bgt.n	801680a <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbe>
      return __result + __count;
 80167ba:	443e      	add	r6, r7
	      ++__new_finish;
 80167bc:	3610      	adds	r6, #16
      ptrdiff_t __count = __last - __first;
 80167be:	ebaa 0a08 	sub.w	sl, sl, r8
      if (__count > 0)
 80167c2:	f1ba 0f00 	cmp.w	sl, #0
 80167c6:	dc26      	bgt.n	8016816 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xca>
      return __result + __count;
 80167c8:	4456      	add	r6, sl
		    this->_M_impl._M_end_of_storage - __old_start);
 80167ca:	68a1      	ldr	r1, [r4, #8]
 80167cc:	eba1 0109 	sub.w	r1, r1, r9
	if (__p)
 80167d0:	f1b9 0f00 	cmp.w	r9, #0
 80167d4:	d002      	beq.n	80167dc <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
	::operator delete(__p
 80167d6:	4648      	mov	r0, r9
 80167d8:	f004 fbc4 	bl	801af64 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 80167dc:	6027      	str	r7, [r4, #0]
      this->_M_impl._M_finish = __new_finish;
 80167de:	6066      	str	r6, [r4, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80167e0:	eb07 1505 	add.w	r5, r7, r5, lsl #4
 80167e4:	60a5      	str	r5, [r4, #8]
    }
 80167e6:	b003      	add	sp, #12
 80167e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_length_error(__N(__s));
 80167ec:	480d      	ldr	r0, [pc, #52]	; (8016824 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd8>)
 80167ee:	f004 fc83 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 80167f2:	466b      	mov	r3, sp
 80167f4:	e7bf      	b.n	8016776 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x2a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80167f6:	f06f 4578 	mvn.w	r5, #4160749568	; 0xf8000000
 80167fa:	e7c6      	b.n	801678a <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
 80167fc:	f06f 4578 	mvn.w	r5, #4160749568	; 0xf8000000
 8016800:	e7c3      	b.n	801678a <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	  std::__throw_bad_alloc();
 8016802:	f004 fc73 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016806:	2700      	movs	r7, #0
 8016808:	e7cd      	b.n	80167a6 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801680a:	4632      	mov	r2, r6
 801680c:	4649      	mov	r1, r9
 801680e:	4638      	mov	r0, r7
 8016810:	f005 f87c 	bl	801b90c <memmove>
 8016814:	e7d1      	b.n	80167ba <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6e>
 8016816:	4652      	mov	r2, sl
 8016818:	4641      	mov	r1, r8
 801681a:	4630      	mov	r0, r6
 801681c:	f005 f876 	bl	801b90c <memmove>
 8016820:	e7d2      	b.n	80167c8 <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7c>
 8016822:	bf00      	nop
 8016824:	0801bde4 	.word	0x0801bde4

08016828 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_>:
bool LEDS::AddRGBLED(uint8_t ID, uint32_t* pulse_red_, uint32_t* pulse_green_, uint32_t* pulse_blue_) {
 8016828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801682c:	b084      	sub	sp, #16
 801682e:	4604      	mov	r4, r0
 8016830:	460d      	mov	r5, r1
 8016832:	4690      	mov	r8, r2
 8016834:	461e      	mov	r6, r3
 8016836:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8016838:	f04f 31ff 	mov.w	r1, #4294967295
 801683c:	6840      	ldr	r0, [r0, #4]
 801683e:	f7f6 f83b 	bl	800c8b8 <osSemaphoreAcquire>
	if (ExistingLED(ID)) {
 8016842:	4629      	mov	r1, r5
 8016844:	4620      	mov	r0, r4
 8016846:	f7ff ff48 	bl	80166da <_ZN4LEDS11ExistingLEDEh>
 801684a:	bb18      	cbnz	r0, 8016894 <_ZN4LEDS9AddRGBLEDEhPmS0_S0_+0x6c>
	led.ID = ID;
 801684c:	f88d 5000 	strb.w	r5, [sp]
	led.pulse_red = pulse_red_;
 8016850:	f8cd 8004 	str.w	r8, [sp, #4]
	led.pulse_green = pulse_green_;
 8016854:	9602      	str	r6, [sp, #8]
	led.pulse_blue = pulse_blue_;
 8016856:	9703      	str	r7, [sp, #12]
    RGB_LEDs.push_back(led);
 8016858:	f104 0c14 	add.w	ip, r4, #20
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801685c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8016860:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8016864:	429d      	cmp	r5, r3
 8016866:	d01a      	beq.n	801689e <_ZN4LEDS9AddRGBLEDEhPmS0_S0_+0x76>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016868:	ab04      	add	r3, sp, #16
 801686a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801686e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8016872:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8016876:	3310      	adds	r3, #16
 8016878:	f8cc 3004 	str.w	r3, [ip, #4]
    osSemaphoreRelease(LEDsSemaphore);
 801687c:	6860      	ldr	r0, [r4, #4]
 801687e:	f7f6 f84f 	bl	800c920 <osSemaphoreRelease>
    *pulse_red_ = 0;
 8016882:	2300      	movs	r3, #0
 8016884:	f8c8 3000 	str.w	r3, [r8]
    *pulse_green_ = 0;
 8016888:	6033      	str	r3, [r6, #0]
    *pulse_blue_ = 0;
 801688a:	603b      	str	r3, [r7, #0]
    return true;
 801688c:	2001      	movs	r0, #1
}
 801688e:	b004      	add	sp, #16
 8016890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		osSemaphoreRelease(LEDsSemaphore);
 8016894:	6860      	ldr	r0, [r4, #4]
 8016896:	f7f6 f843 	bl	800c920 <osSemaphoreRelease>
		return false;
 801689a:	2000      	movs	r0, #0
 801689c:	e7f7      	b.n	801688e <_ZN4LEDS9AddRGBLEDEhPmS0_S0_+0x66>
	  _M_realloc_insert(end(), __x);
 801689e:	466a      	mov	r2, sp
 80168a0:	4629      	mov	r1, r5
 80168a2:	4660      	mov	r0, ip
 80168a4:	f7ff ff52 	bl	801674c <_ZNSt6vectorI6RGBLEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 80168a8:	e7e8      	b.n	801687c <_ZN4LEDS9AddRGBLEDEhPmS0_S0_+0x54>
	...

080168ac <_ZN4LEDS12AddRegistersEv>:
void LEDS::AddRegisters(void) {
 80168ac:	b510      	push	{r4, lr}
 80168ae:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_LEDS_SET);
 80168b0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80168b4:	6800      	ldr	r0, [r0, #0]
 80168b6:	f7f8 fb5b 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsArray(REG_LEDS_SET, 2);
 80168ba:	2202      	movs	r2, #2
 80168bc:	f44f 7140 	mov.w	r1, #768	; 0x300
 80168c0:	6820      	ldr	r0, [r4, #0]
 80168c2:	f003 fa44 	bl	8019d4e <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET, (void*) this,
 80168c6:	4b2f      	ldr	r3, [pc, #188]	; (8016984 <_ZN4LEDS12AddRegistersEv+0xd8>)
 80168c8:	4622      	mov	r2, r4
 80168ca:	f44f 7140 	mov.w	r1, #768	; 0x300
 80168ce:	6820      	ldr	r0, [r4, #0]
 80168d0:	f7f8 fc24 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_LEDS_TIMINGS);
 80168d4:	f240 3101 	movw	r1, #769	; 0x301
 80168d8:	6820      	ldr	r0, [r4, #0]
 80168da:	f7f8 fb49 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsVector(REG_LEDS_TIMINGS);
 80168de:	f240 3101 	movw	r1, #769	; 0x301
 80168e2:	6820      	ldr	r0, [r4, #0]
 80168e4:	f003 fa53 	bl	8019d8e <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_TIMINGS, (void*) this,
 80168e8:	4b27      	ldr	r3, [pc, #156]	; (8016988 <_ZN4LEDS12AddRegistersEv+0xdc>)
 80168ea:	4622      	mov	r2, r4
 80168ec:	f240 3101 	movw	r1, #769	; 0x301
 80168f0:	6820      	ldr	r0, [r4, #0]
 80168f2:	f7f8 fc13 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_LEDS_BLINK);
 80168f6:	f240 3102 	movw	r1, #770	; 0x302
 80168fa:	6820      	ldr	r0, [r4, #0]
 80168fc:	f7f8 fb38 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_LEDS_BLINK);
 8016900:	f240 3102 	movw	r1, #770	; 0x302
 8016904:	6820      	ldr	r0, [r4, #0]
 8016906:	f003 fa02 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_BLINK, (void*) this,
 801690a:	4b20      	ldr	r3, [pc, #128]	; (801698c <_ZN4LEDS12AddRegistersEv+0xe0>)
 801690c:	4622      	mov	r2, r4
 801690e:	f240 3102 	movw	r1, #770	; 0x302
 8016912:	6820      	ldr	r0, [r4, #0]
 8016914:	f7f8 fc02 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_LEDS_BLINK_ONCE);
 8016918:	f240 3103 	movw	r1, #771	; 0x303
 801691c:	6820      	ldr	r0, [r4, #0]
 801691e:	f7f8 fb27 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_LEDS_BLINK_ONCE);
 8016922:	f240 3103 	movw	r1, #771	; 0x303
 8016926:	6820      	ldr	r0, [r4, #0]
 8016928:	f003 f9f1 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_BLINK_ONCE, (void*) this,
 801692c:	4b18      	ldr	r3, [pc, #96]	; (8016990 <_ZN4LEDS12AddRegistersEv+0xe4>)
 801692e:	4622      	mov	r2, r4
 8016930:	f240 3103 	movw	r1, #771	; 0x303
 8016934:	6820      	ldr	r0, [r4, #0]
 8016936:	f7f8 fbf1 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_LEDS_SET_RGB);
 801693a:	f44f 7141 	mov.w	r1, #772	; 0x304
 801693e:	6820      	ldr	r0, [r4, #0]
 8016940:	f7f8 fb16 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsArray(REG_LEDS_SET_RGB, 4);
 8016944:	2204      	movs	r2, #4
 8016946:	f44f 7141 	mov.w	r1, #772	; 0x304
 801694a:	6820      	ldr	r0, [r4, #0]
 801694c:	f003 f9ff 	bl	8019d4e <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET_RGB, (void*) this,
 8016950:	4b10      	ldr	r3, [pc, #64]	; (8016994 <_ZN4LEDS12AddRegistersEv+0xe8>)
 8016952:	4622      	mov	r2, r4
 8016954:	f44f 7141 	mov.w	r1, #772	; 0x304
 8016958:	6820      	ldr	r0, [r4, #0]
 801695a:	f7f8 fbdf 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_LEDS_SET_BRIGHNESS);
 801695e:	f240 3105 	movw	r1, #773	; 0x305
 8016962:	6820      	ldr	r0, [r4, #0]
 8016964:	f7f8 fb04 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsArray(REG_LEDS_SET_BRIGHNESS, 2);
 8016968:	2202      	movs	r2, #2
 801696a:	f240 3105 	movw	r1, #773	; 0x305
 801696e:	6820      	ldr	r0, [r4, #0]
 8016970:	f003 f9ed 	bl	8019d4e <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET_BRIGHNESS, (void*) this,
 8016974:	4b08      	ldr	r3, [pc, #32]	; (8016998 <_ZN4LEDS12AddRegistersEv+0xec>)
 8016976:	4622      	mov	r2, r4
 8016978:	f240 3105 	movw	r1, #773	; 0x305
 801697c:	6820      	ldr	r0, [r4, #0]
 801697e:	f7f8 fbcd 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
}
 8016982:	bd10      	pop	{r4, pc}
 8016984:	08016461 	.word	0x08016461
 8016988:	08016e5d 	.word	0x08016e5d
 801698c:	080161f7 	.word	0x080161f7
 8016990:	0801624f 	.word	0x0801624f
 8016994:	08016673 	.word	0x08016673
 8016998:	0801651b 	.word	0x0801651b

0801699c <_ZN4LEDS8TestLEDsEv>:
void LEDS::TestLEDs(void) {
 801699c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169a0:	b08a      	sub	sp, #40	; 0x28
 80169a2:	4605      	mov	r5, r0
	for (LED led : LEDs) {
 80169a4:	6883      	ldr	r3, [r0, #8]
      : _M_current(__i) { }
 80169a6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80169aa:	e00c      	b.n	80169c6 <_ZN4LEDS8TestLEDsEv+0x2a>
	  std::__throw_bad_alloc();
 80169ac:	f004 fb9e 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80169b0:	f04f 0900 	mov.w	r9, #0
 80169b4:	e02d      	b.n	8016a12 <_ZN4LEDS8TestLEDsEv+0x76>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80169b6:	4622      	mov	r2, r4
 80169b8:	4631      	mov	r1, r6
 80169ba:	4648      	mov	r0, r9
 80169bc:	f004 ffa6 	bl	801b90c <memmove>
 80169c0:	e038      	b.n	8016a34 <_ZN4LEDS8TestLEDsEv+0x98>
	++_M_current;
 80169c2:	f107 0320 	add.w	r3, r7, #32
    { return __lhs.base() != __rhs.base(); }
 80169c6:	461f      	mov	r7, r3
 80169c8:	4598      	cmp	r8, r3
 80169ca:	d04f      	beq.n	8016a6c <_ZN4LEDS8TestLEDsEv+0xd0>
struct LED {
 80169cc:	461a      	mov	r2, r3
 80169ce:	f812 1b04 	ldrb.w	r1, [r2], #4
 80169d2:	f88d 1008 	strb.w	r1, [sp, #8]
 80169d6:	ac03      	add	r4, sp, #12
 80169d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80169dc:	e884 0003 	stmia.w	r4, {r0, r1}
 80169e0:	7b1a      	ldrb	r2, [r3, #12]
 80169e2:	f88d 2014 	strb.w	r2, [sp, #20]
 80169e6:	7b5a      	ldrb	r2, [r3, #13]
 80169e8:	f88d 2015 	strb.w	r2, [sp, #21]
 80169ec:	7b9a      	ldrb	r2, [r3, #14]
 80169ee:	f88d 2016 	strb.w	r2, [sp, #22]
 80169f2:	f103 0610 	add.w	r6, r3, #16
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80169f6:	6874      	ldr	r4, [r6, #4]
 80169f8:	691a      	ldr	r2, [r3, #16]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80169fa:	2300      	movs	r3, #0
 80169fc:	9306      	str	r3, [sp, #24]
 80169fe:	9307      	str	r3, [sp, #28]
 8016a00:	9308      	str	r3, [sp, #32]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016a02:	1aa4      	subs	r4, r4, r2
 8016a04:	d0d4      	beq.n	80169b0 <_ZN4LEDS8TestLEDsEv+0x14>
	if (__n > this->_M_max_size())
 8016a06:	429c      	cmp	r4, r3
 8016a08:	dbd0      	blt.n	80169ac <_ZN4LEDS8TestLEDsEv+0x10>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8016a0a:	4620      	mov	r0, r4
 8016a0c:	f004 fac0 	bl	801af90 <_Znwj>
 8016a10:	4681      	mov	r9, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8016a12:	f8cd 9018 	str.w	r9, [sp, #24]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8016a16:	f8cd 901c 	str.w	r9, [sp, #28]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8016a1a:	444c      	add	r4, r9
 8016a1c:	9408      	str	r4, [sp, #32]
      : _M_current(__i) { }
 8016a1e:	6874      	ldr	r4, [r6, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8016a20:	46ca      	mov	sl, r9
      return std::__niter_wrap(__result,
 8016a22:	6830      	ldr	r0, [r6, #0]
 8016a24:	f7eb f847 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8016a28:	4606      	mov	r6, r0
 8016a2a:	4620      	mov	r0, r4
 8016a2c:	f7eb f843 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8016a30:	1b84      	subs	r4, r0, r6
 8016a32:	d1c0      	bne.n	80169b6 <_ZN4LEDS8TestLEDsEv+0x1a>
	  return __result + _Num;
 8016a34:	4454      	add	r4, sl
	this->_M_impl._M_finish =
 8016a36:	9407      	str	r4, [sp, #28]
 8016a38:	7f3b      	ldrb	r3, [r7, #28]
 8016a3a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		SetLED(led.ID, GPIO_PIN_SET);
 8016a3e:	2201      	movs	r2, #1
 8016a40:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8016a44:	4628      	mov	r0, r5
 8016a46:	f7ff fb89 	bl	801615c <_ZN4LEDS6SetLEDEh13GPIO_PinState>
		HAL_Delay(100);
 8016a4a:	2064      	movs	r0, #100	; 0x64
 8016a4c:	f7ec feda 	bl	8003804 <HAL_Delay>
		SetLED(led.ID, GPIO_PIN_RESET);
 8016a50:	2200      	movs	r2, #0
 8016a52:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8016a56:	4628      	mov	r0, r5
 8016a58:	f7ff fb80 	bl	801615c <_ZN4LEDS6SetLEDEh13GPIO_PinState>
	_M_deallocate(_M_impl._M_start,
 8016a5c:	9806      	ldr	r0, [sp, #24]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8016a5e:	9908      	ldr	r1, [sp, #32]
 8016a60:	1a09      	subs	r1, r1, r0
	if (__p)
 8016a62:	2800      	cmp	r0, #0
 8016a64:	d0ad      	beq.n	80169c2 <_ZN4LEDS8TestLEDsEv+0x26>
	::operator delete(__p
 8016a66:	f004 fa7d 	bl	801af64 <_ZdlPvj>
 8016a6a:	e7aa      	b.n	80169c2 <_ZN4LEDS8TestLEDsEv+0x26>
	for (RGBLED led : RGB_LEDs) {
 8016a6c:	696f      	ldr	r7, [r5, #20]
 8016a6e:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8016a72:	e02e      	b.n	8016ad2 <_ZN4LEDS8TestLEDsEv+0x136>
 8016a74:	ac02      	add	r4, sp, #8
 8016a76:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8016a7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		SetRGB(led.ID, 255, 0, 0);
 8016a7e:	f89d 6008 	ldrb.w	r6, [sp, #8]
 8016a82:	2400      	movs	r4, #0
 8016a84:	9400      	str	r4, [sp, #0]
 8016a86:	4623      	mov	r3, r4
 8016a88:	22ff      	movs	r2, #255	; 0xff
 8016a8a:	4631      	mov	r1, r6
 8016a8c:	4628      	mov	r0, r5
 8016a8e:	f7ff fbfa 	bl	8016286 <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 8016a92:	2064      	movs	r0, #100	; 0x64
 8016a94:	f7ec feb6 	bl	8003804 <HAL_Delay>
		SetRGB(led.ID, 0, 255, 0);
 8016a98:	9400      	str	r4, [sp, #0]
 8016a9a:	23ff      	movs	r3, #255	; 0xff
 8016a9c:	4622      	mov	r2, r4
 8016a9e:	4631      	mov	r1, r6
 8016aa0:	4628      	mov	r0, r5
 8016aa2:	f7ff fbf0 	bl	8016286 <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 8016aa6:	2064      	movs	r0, #100	; 0x64
 8016aa8:	f7ec feac 	bl	8003804 <HAL_Delay>
		SetRGB(led.ID, 0, 0, 255);
 8016aac:	23ff      	movs	r3, #255	; 0xff
 8016aae:	9300      	str	r3, [sp, #0]
 8016ab0:	4623      	mov	r3, r4
 8016ab2:	4622      	mov	r2, r4
 8016ab4:	4631      	mov	r1, r6
 8016ab6:	4628      	mov	r0, r5
 8016ab8:	f7ff fbe5 	bl	8016286 <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 8016abc:	2064      	movs	r0, #100	; 0x64
 8016abe:	f7ec fea1 	bl	8003804 <HAL_Delay>
		SetRGB(led.ID, 0, 0, 0);
 8016ac2:	9400      	str	r4, [sp, #0]
 8016ac4:	4623      	mov	r3, r4
 8016ac6:	4622      	mov	r2, r4
 8016ac8:	4631      	mov	r1, r6
 8016aca:	4628      	mov	r0, r5
 8016acc:	f7ff fbdb 	bl	8016286 <_ZN4LEDS6SetRGBEhhhh>
	++_M_current;
 8016ad0:	3710      	adds	r7, #16
	for (RGBLED led : RGB_LEDs) {
 8016ad2:	45b8      	cmp	r8, r7
 8016ad4:	d1ce      	bne.n	8016a74 <_ZN4LEDS8TestLEDsEv+0xd8>
}
 8016ad6:	b00a      	add	sp, #40	; 0x28
 8016ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016adc <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8016adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ae0:	b087      	sub	sp, #28
 8016ae2:	4605      	mov	r5, r0
 8016ae4:	4616      	mov	r6, r2
 8016ae6:	2301      	movs	r3, #1
 8016ae8:	9304      	str	r3, [sp, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016aea:	6843      	ldr	r3, [r0, #4]
 8016aec:	6802      	ldr	r2, [r0, #0]
 8016aee:	1a9a      	subs	r2, r3, r2
	if (max_size() - size() < __n)
 8016af0:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 8016af4:	ebb0 1f62 	cmp.w	r0, r2, asr #5
 8016af8:	d06e      	beq.n	8016bd8 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>
 8016afa:	1157      	asrs	r7, r2, #5
	const size_type __len = size() + (std::max)(size(), __n);
 8016afc:	9705      	str	r7, [sp, #20]
      if (__a < __b)
 8016afe:	2f00      	cmp	r7, #0
 8016b00:	d06d      	beq.n	8016bde <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x102>
      return __a;
 8016b02:	aa05      	add	r2, sp, #20
 8016b04:	6812      	ldr	r2, [r2, #0]
 8016b06:	4417      	add	r7, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016b08:	682a      	ldr	r2, [r5, #0]
 8016b0a:	1a9b      	subs	r3, r3, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016b0c:	ebb7 1f63 	cmp.w	r7, r3, asr #5
 8016b10:	d367      	bcc.n	8016be2 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x106>
 8016b12:	f1b7 6f80 	cmp.w	r7, #67108864	; 0x4000000
 8016b16:	d267      	bcs.n	8016be8 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x10c>
      pointer __old_start = this->_M_impl._M_start;
 8016b18:	682b      	ldr	r3, [r5, #0]
 8016b1a:	9301      	str	r3, [sp, #4]
      pointer __old_finish = this->_M_impl._M_finish;
 8016b1c:	f8d5 8004 	ldr.w	r8, [r5, #4]
    { return __lhs.base() - __rhs.base(); }
 8016b20:	460c      	mov	r4, r1
 8016b22:	eba1 0a03 	sub.w	sl, r1, r3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016b26:	2f00      	cmp	r7, #0
 8016b28:	d063      	beq.n	8016bf2 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x116>
	if (__n > this->_M_max_size())
 8016b2a:	f1b7 6f80 	cmp.w	r7, #67108864	; 0x4000000
 8016b2e:	d25e      	bcs.n	8016bee <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x112>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8016b30:	0178      	lsls	r0, r7, #5
 8016b32:	f004 fa2d 	bl	801af90 <_Znwj>
 8016b36:	9000      	str	r0, [sp, #0]
	  _Alloc_traits::construct(this->_M_impl,
 8016b38:	9900      	ldr	r1, [sp, #0]
 8016b3a:	eb01 090a 	add.w	r9, r1, sl
 8016b3e:	4633      	mov	r3, r6
 8016b40:	f813 2b04 	ldrb.w	r2, [r3], #4
 8016b44:	f801 200a 	strb.w	r2, [r1, sl]
 8016b48:	f109 0204 	add.w	r2, r9, #4
 8016b4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016b50:	e882 0003 	stmia.w	r2, {r0, r1}
 8016b54:	7b33      	ldrb	r3, [r6, #12]
 8016b56:	f889 300c 	strb.w	r3, [r9, #12]
 8016b5a:	7b73      	ldrb	r3, [r6, #13]
 8016b5c:	f889 300d 	strb.w	r3, [r9, #13]
 8016b60:	7bb3      	ldrb	r3, [r6, #14]
 8016b62:	f889 300e 	strb.w	r3, [r9, #14]
 8016b66:	f109 0b10 	add.w	fp, r9, #16
 8016b6a:	f106 0310 	add.w	r3, r6, #16
 8016b6e:	9302      	str	r3, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016b70:	6971      	ldr	r1, [r6, #20]
 8016b72:	6932      	ldr	r2, [r6, #16]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016b74:	2300      	movs	r3, #0
 8016b76:	f8c9 3010 	str.w	r3, [r9, #16]
 8016b7a:	f8cb 3004 	str.w	r3, [fp, #4]
 8016b7e:	f8cb 3008 	str.w	r3, [fp, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016b82:	ebb1 0a02 	subs.w	sl, r1, r2
 8016b86:	d039      	beq.n	8016bfc <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x120>
	if (__n > this->_M_max_size())
 8016b88:	459a      	cmp	sl, r3
 8016b8a:	db35      	blt.n	8016bf8 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8016b8c:	4650      	mov	r0, sl
 8016b8e:	f004 f9ff 	bl	801af90 <_Znwj>
	this->_M_impl._M_start = this->_M_allocate(__n);
 8016b92:	f8c9 0010 	str.w	r0, [r9, #16]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8016b96:	f8cb 0004 	str.w	r0, [fp, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8016b9a:	4450      	add	r0, sl
 8016b9c:	f8cb 0008 	str.w	r0, [fp, #8]
      : _M_current(__i) { }
 8016ba0:	9b02      	ldr	r3, [sp, #8]
 8016ba2:	f8d3 a004 	ldr.w	sl, [r3, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8016ba6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016baa:	9302      	str	r3, [sp, #8]
      return std::__niter_wrap(__result,
 8016bac:	6930      	ldr	r0, [r6, #16]
 8016bae:	f7ea ff82 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8016bb2:	9003      	str	r0, [sp, #12]
 8016bb4:	4650      	mov	r0, sl
 8016bb6:	f7ea ff7e 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8016bba:	9b03      	ldr	r3, [sp, #12]
 8016bbc:	ebb0 0a03 	subs.w	sl, r0, r3
 8016bc0:	d11e      	bne.n	8016c00 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x124>
	  return __result + _Num;
 8016bc2:	9802      	ldr	r0, [sp, #8]
 8016bc4:	4450      	add	r0, sl
	this->_M_impl._M_finish =
 8016bc6:	f8cb 0004 	str.w	r0, [fp, #4]
 8016bca:	7f33      	ldrb	r3, [r6, #28]
 8016bcc:	f889 301c 	strb.w	r3, [r9, #28]
      _ForwardIterator __cur = __result;
 8016bd0:	9e00      	ldr	r6, [sp, #0]
 8016bd2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8016bd6:	e01c      	b.n	8016c12 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x136>
	  __throw_length_error(__N(__s));
 8016bd8:	4844      	ldr	r0, [pc, #272]	; (8016cec <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x210>)
 8016bda:	f004 fa8d 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 8016bde:	aa04      	add	r2, sp, #16
 8016be0:	e790      	b.n	8016b04 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x28>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016be2:	f06f 477c 	mvn.w	r7, #4227858432	; 0xfc000000
 8016be6:	e797      	b.n	8016b18 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
 8016be8:	f06f 477c 	mvn.w	r7, #4227858432	; 0xfc000000
 8016bec:	e794      	b.n	8016b18 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	  std::__throw_bad_alloc();
 8016bee:	f004 fa7d 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	9300      	str	r3, [sp, #0]
 8016bf6:	e79f      	b.n	8016b38 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5c>
 8016bf8:	f004 fa78 	bl	801b0ec <_ZSt17__throw_bad_allocv>
 8016bfc:	2000      	movs	r0, #0
 8016bfe:	e7c8      	b.n	8016b92 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb6>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8016c00:	4652      	mov	r2, sl
 8016c02:	4619      	mov	r1, r3
 8016c04:	9802      	ldr	r0, [sp, #8]
 8016c06:	f004 fe81 	bl	801b90c <memmove>
 8016c0a:	e7da      	b.n	8016bc2 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe6>
      for (; __first != __last; ++__first, (void)++__cur)
 8016c0c:	f109 0920 	add.w	r9, r9, #32
 8016c10:	3620      	adds	r6, #32
 8016c12:	454c      	cmp	r4, r9
 8016c14:	d02f      	beq.n	8016c76 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x19a>
 8016c16:	464a      	mov	r2, r9
 8016c18:	f812 1b04 	ldrb.w	r1, [r2], #4
 8016c1c:	4633      	mov	r3, r6
 8016c1e:	f803 1b04 	strb.w	r1, [r3], #4
 8016c22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016c26:	e883 0003 	stmia.w	r3, {r0, r1}
 8016c2a:	f899 300c 	ldrb.w	r3, [r9, #12]
 8016c2e:	7333      	strb	r3, [r6, #12]
 8016c30:	f899 300d 	ldrb.w	r3, [r9, #13]
 8016c34:	7373      	strb	r3, [r6, #13]
 8016c36:	f899 300e 	ldrb.w	r3, [r9, #14]
 8016c3a:	73b3      	strb	r3, [r6, #14]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8016c3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
	  _M_end_of_storage(__x._M_end_of_storage)
 8016c40:	6133      	str	r3, [r6, #16]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8016c42:	f8d9 3014 	ldr.w	r3, [r9, #20]
	  _M_end_of_storage(__x._M_end_of_storage)
 8016c46:	6173      	str	r3, [r6, #20]
 8016c48:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8016c4c:	61b3      	str	r3, [r6, #24]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8016c4e:	2300      	movs	r3, #0
 8016c50:	f8c9 3018 	str.w	r3, [r9, #24]
 8016c54:	f8c9 3014 	str.w	r3, [r9, #20]
 8016c58:	f8c9 3010 	str.w	r3, [r9, #16]
 8016c5c:	f899 301c 	ldrb.w	r3, [r9, #28]
 8016c60:	7733      	strb	r3, [r6, #28]
	_M_deallocate(_M_impl._M_start,
 8016c62:	f8d9 0010 	ldr.w	r0, [r9, #16]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8016c66:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8016c6a:	1a09      	subs	r1, r1, r0
	if (__p)
 8016c6c:	2800      	cmp	r0, #0
 8016c6e:	d0cd      	beq.n	8016c0c <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x130>
	::operator delete(__p
 8016c70:	f004 f978 	bl	801af64 <_ZdlPvj>
 8016c74:	e7ca      	b.n	8016c0c <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x130>
	      ++__new_finish;
 8016c76:	3620      	adds	r6, #32
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8016c78:	e001      	b.n	8016c7e <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1a2>
      for (; __first != __last; ++__first, (void)++__cur)
 8016c7a:	3420      	adds	r4, #32
 8016c7c:	3620      	adds	r6, #32
 8016c7e:	45a0      	cmp	r8, r4
 8016c80:	d023      	beq.n	8016cca <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1ee>
 8016c82:	4622      	mov	r2, r4
 8016c84:	f812 1b04 	ldrb.w	r1, [r2], #4
 8016c88:	4633      	mov	r3, r6
 8016c8a:	f803 1b04 	strb.w	r1, [r3], #4
 8016c8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016c92:	e883 0003 	stmia.w	r3, {r0, r1}
 8016c96:	7b23      	ldrb	r3, [r4, #12]
 8016c98:	7333      	strb	r3, [r6, #12]
 8016c9a:	7b63      	ldrb	r3, [r4, #13]
 8016c9c:	7373      	strb	r3, [r6, #13]
 8016c9e:	7ba3      	ldrb	r3, [r4, #14]
 8016ca0:	73b3      	strb	r3, [r6, #14]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8016ca2:	6923      	ldr	r3, [r4, #16]
	  _M_end_of_storage(__x._M_end_of_storage)
 8016ca4:	6133      	str	r3, [r6, #16]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8016ca6:	6963      	ldr	r3, [r4, #20]
	  _M_end_of_storage(__x._M_end_of_storage)
 8016ca8:	6173      	str	r3, [r6, #20]
 8016caa:	69a3      	ldr	r3, [r4, #24]
 8016cac:	61b3      	str	r3, [r6, #24]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8016cae:	2300      	movs	r3, #0
 8016cb0:	61a3      	str	r3, [r4, #24]
 8016cb2:	6163      	str	r3, [r4, #20]
 8016cb4:	6123      	str	r3, [r4, #16]
 8016cb6:	7f23      	ldrb	r3, [r4, #28]
 8016cb8:	7733      	strb	r3, [r6, #28]
	_M_deallocate(_M_impl._M_start,
 8016cba:	6920      	ldr	r0, [r4, #16]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8016cbc:	69a1      	ldr	r1, [r4, #24]
 8016cbe:	1a09      	subs	r1, r1, r0
	if (__p)
 8016cc0:	2800      	cmp	r0, #0
 8016cc2:	d0da      	beq.n	8016c7a <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x19e>
 8016cc4:	f004 f94e 	bl	801af64 <_ZdlPvj>
 8016cc8:	e7d7      	b.n	8016c7a <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x19e>
		    this->_M_impl._M_end_of_storage - __old_start);
 8016cca:	68a9      	ldr	r1, [r5, #8]
 8016ccc:	9b01      	ldr	r3, [sp, #4]
 8016cce:	1ac9      	subs	r1, r1, r3
 8016cd0:	b113      	cbz	r3, 8016cd8 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1fc>
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	f004 f946 	bl	801af64 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 8016cd8:	9b00      	ldr	r3, [sp, #0]
 8016cda:	602b      	str	r3, [r5, #0]
      this->_M_impl._M_finish = __new_finish;
 8016cdc:	606e      	str	r6, [r5, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016cde:	eb03 1747 	add.w	r7, r3, r7, lsl #5
 8016ce2:	60af      	str	r7, [r5, #8]
    }
 8016ce4:	b007      	add	sp, #28
 8016ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cea:	bf00      	nop
 8016cec:	0801bde4 	.word	0x0801bde4

08016cf0 <_ZN4LEDS6AddLEDEh4GPIO>:
bool LEDS::AddLED(uint8_t ID, GPIO gpio) { // called every 100ms
 8016cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016cf4:	b08a      	sub	sp, #40	; 0x28
 8016cf6:	4604      	mov	r4, r0
 8016cf8:	460d      	mov	r5, r1
 8016cfa:	4669      	mov	r1, sp
 8016cfc:	e881 000c 	stmia.w	r1, {r2, r3}
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8016d00:	f04f 31ff 	mov.w	r1, #4294967295
 8016d04:	6840      	ldr	r0, [r0, #4]
 8016d06:	f7f5 fdd7 	bl	800c8b8 <osSemaphoreAcquire>
	if (ExistingLED(ID)) {
 8016d0a:	4629      	mov	r1, r5
 8016d0c:	4620      	mov	r0, r4
 8016d0e:	f7ff fce4 	bl	80166da <_ZN4LEDS11ExistingLEDEh>
 8016d12:	2800      	cmp	r0, #0
 8016d14:	d166      	bne.n	8016de4 <_ZN4LEDS6AddLEDEh4GPIO+0xf4>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016d16:	2300      	movs	r3, #0
 8016d18:	9306      	str	r3, [sp, #24]
 8016d1a:	9307      	str	r3, [sp, #28]
 8016d1c:	9308      	str	r3, [sp, #32]
    led.ID = ID;
 8016d1e:	f88d 5008 	strb.w	r5, [sp, #8]
    led.gpio = gpio;
 8016d22:	aa03      	add	r2, sp, #12
 8016d24:	4669      	mov	r1, sp
 8016d26:	c903      	ldmia	r1, {r0, r1}
 8016d28:	e882 0003 	stmia.w	r2, {r0, r1}
    led.blink = false;
 8016d2c:	f88d 3014 	strb.w	r3, [sp, #20]
    led.repeat = false;
 8016d30:	f88d 3015 	strb.w	r3, [sp, #21]
    LEDs.push_back(led);
 8016d34:	f104 0608 	add.w	r6, r4, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016d38:	6875      	ldr	r5, [r6, #4]
 8016d3a:	68b3      	ldr	r3, [r6, #8]
 8016d3c:	429d      	cmp	r5, r3
 8016d3e:	d060      	beq.n	8016e02 <_ZN4LEDS6AddLEDEh4GPIO+0x112>
 8016d40:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8016d44:	462b      	mov	r3, r5
 8016d46:	f803 2b04 	strb.w	r2, [r3], #4
 8016d4a:	aa03      	add	r2, sp, #12
 8016d4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016d50:	e883 0003 	stmia.w	r3, {r0, r1}
 8016d54:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016d58:	732b      	strb	r3, [r5, #12]
 8016d5a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8016d5e:	736b      	strb	r3, [r5, #13]
 8016d60:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8016d64:	73ab      	strb	r3, [r5, #14]
 8016d66:	f105 0810 	add.w	r8, r5, #16
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016d6a:	9807      	ldr	r0, [sp, #28]
 8016d6c:	9f06      	ldr	r7, [sp, #24]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016d6e:	2300      	movs	r3, #0
 8016d70:	612b      	str	r3, [r5, #16]
 8016d72:	f8c8 3004 	str.w	r3, [r8, #4]
 8016d76:	f8c8 3008 	str.w	r3, [r8, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016d7a:	1bc7      	subs	r7, r0, r7
 8016d7c:	d039      	beq.n	8016df2 <_ZN4LEDS6AddLEDEh4GPIO+0x102>
	if (__n > this->_M_max_size())
 8016d7e:	429f      	cmp	r7, r3
 8016d80:	db35      	blt.n	8016dee <_ZN4LEDS6AddLEDEh4GPIO+0xfe>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8016d82:	4638      	mov	r0, r7
 8016d84:	f004 f904 	bl	801af90 <_Znwj>
	this->_M_impl._M_start = this->_M_allocate(__n);
 8016d88:	6128      	str	r0, [r5, #16]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8016d8a:	f8c8 0004 	str.w	r0, [r8, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8016d8e:	4438      	add	r0, r7
 8016d90:	f8c8 0008 	str.w	r0, [r8, #8]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8016d94:	f8d5 a010 	ldr.w	sl, [r5, #16]
      return std::__niter_wrap(__result,
 8016d98:	9806      	ldr	r0, [sp, #24]
 8016d9a:	f7ea fe8c 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8016d9e:	4681      	mov	r9, r0
 8016da0:	9807      	ldr	r0, [sp, #28]
 8016da2:	f7ea fe88 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8016da6:	ebb0 0709 	subs.w	r7, r0, r9
 8016daa:	d124      	bne.n	8016df6 <_ZN4LEDS6AddLEDEh4GPIO+0x106>
	  return __result + _Num;
 8016dac:	4457      	add	r7, sl
	this->_M_impl._M_finish =
 8016dae:	f8c8 7004 	str.w	r7, [r8, #4]
 8016db2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8016db6:	772b      	strb	r3, [r5, #28]
	    ++this->_M_impl._M_finish;
 8016db8:	6873      	ldr	r3, [r6, #4]
 8016dba:	3320      	adds	r3, #32
 8016dbc:	6073      	str	r3, [r6, #4]
    osSemaphoreRelease(LEDsSemaphore);
 8016dbe:	6860      	ldr	r0, [r4, #4]
 8016dc0:	f7f5 fdae 	bl	800c920 <osSemaphoreRelease>
    HAL_GPIO_WritePin(led.gpio.port, led.gpio.pin, GPIO_PIN_RESET);
 8016dc4:	2200      	movs	r2, #0
 8016dc6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8016dca:	9803      	ldr	r0, [sp, #12]
 8016dcc:	f7ef fda6 	bl	800691c <HAL_GPIO_WritePin>
	_M_deallocate(_M_impl._M_start,
 8016dd0:	9806      	ldr	r0, [sp, #24]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8016dd2:	9908      	ldr	r1, [sp, #32]
 8016dd4:	1a09      	subs	r1, r1, r0
	if (__p)
 8016dd6:	b108      	cbz	r0, 8016ddc <_ZN4LEDS6AddLEDEh4GPIO+0xec>
	::operator delete(__p
 8016dd8:	f004 f8c4 	bl	801af64 <_ZdlPvj>
    return true;
 8016ddc:	2001      	movs	r0, #1
}
 8016dde:	b00a      	add	sp, #40	; 0x28
 8016de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		osSemaphoreRelease(LEDsSemaphore);
 8016de4:	6860      	ldr	r0, [r4, #4]
 8016de6:	f7f5 fd9b 	bl	800c920 <osSemaphoreRelease>
		return false;
 8016dea:	2000      	movs	r0, #0
 8016dec:	e7f7      	b.n	8016dde <_ZN4LEDS6AddLEDEh4GPIO+0xee>
	  std::__throw_bad_alloc();
 8016dee:	f004 f97d 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016df2:	2000      	movs	r0, #0
 8016df4:	e7c8      	b.n	8016d88 <_ZN4LEDS6AddLEDEh4GPIO+0x98>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8016df6:	463a      	mov	r2, r7
 8016df8:	4649      	mov	r1, r9
 8016dfa:	4650      	mov	r0, sl
 8016dfc:	f004 fd86 	bl	801b90c <memmove>
 8016e00:	e7d4      	b.n	8016dac <_ZN4LEDS6AddLEDEh4GPIO+0xbc>
	  _M_realloc_insert(end(), __x);
 8016e02:	aa02      	add	r2, sp, #8
 8016e04:	4629      	mov	r1, r5
 8016e06:	4630      	mov	r0, r6
 8016e08:	f7ff fe68 	bl	8016adc <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8016e0c:	e7d7      	b.n	8016dbe <_ZN4LEDS6AddLEDEh4GPIO+0xce>

08016e0e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>:
bool LEDS::ConfigureTimings(uint8_t ID, std::vector<uint8_t> timings, uint8_t T) {
 8016e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e10:	b083      	sub	sp, #12
 8016e12:	4604      	mov	r4, r0
 8016e14:	460d      	mov	r5, r1
 8016e16:	4617      	mov	r7, r2
 8016e18:	461e      	mov	r6, r3
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8016e1a:	f04f 31ff 	mov.w	r1, #4294967295
 8016e1e:	6840      	ldr	r0, [r0, #4]
 8016e20:	f7f5 fd4a 	bl	800c8b8 <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 8016e24:	f10d 0207 	add.w	r2, sp, #7
 8016e28:	4629      	mov	r1, r5
 8016e2a:	4620      	mov	r0, r4
 8016e2c:	f7ff f97f 	bl	801612e <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8016e30:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8016e34:	b935      	cbnz	r5, 8016e44 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x36>
    osSemaphoreRelease(LEDsSemaphore);
 8016e36:	6860      	ldr	r0, [r4, #4]
 8016e38:	f7f5 fd72 	bl	800c920 <osSemaphoreRelease>
}
 8016e3c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8016e40:	b003      	add	sp, #12
 8016e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return *(this->_M_impl._M_start + __n);
 8016e44:	68a3      	ldr	r3, [r4, #8]
 8016e46:	0145      	lsls	r5, r0, #5
 8016e48:	eb03 1040 	add.w	r0, r3, r0, lsl #5
        LEDs[index].timings = timings;
 8016e4c:	4639      	mov	r1, r7
 8016e4e:	3010      	adds	r0, #16
 8016e50:	f7f9 ff3d 	bl	8010cce <_ZNSt6vectorIhSaIhEEaSERKS1_>
 8016e54:	68a3      	ldr	r3, [r4, #8]
 8016e56:	442b      	add	r3, r5
        LEDs[index].T = T;
 8016e58:	771e      	strb	r6, [r3, #28]
 8016e5a:	e7ec      	b.n	8016e36 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x28>

08016e5c <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8016e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e60:	b087      	sub	sp, #28
			if (length < 3) return false;
 8016e62:	2b02      	cmp	r3, #2
 8016e64:	d804      	bhi.n	8016e70 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x14>
 8016e66:	2400      	movs	r4, #0
		}
 8016e68:	4620      	mov	r0, r4
 8016e6a:	b007      	add	sp, #28
 8016e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e70:	4607      	mov	r7, r0
 8016e72:	4616      	mov	r6, r2
			std::vector<uint8_t> timings (&input[1], &input[length-1]);
 8016e74:	f102 0901 	add.w	r9, r2, #1
 8016e78:	1e5d      	subs	r5, r3, #1
 8016e7a:	eb02 0805 	add.w	r8, r2, r5
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016e7e:	2300      	movs	r3, #0
 8016e80:	9300      	str	r3, [sp, #0]
 8016e82:	9301      	str	r3, [sp, #4]
 8016e84:	9302      	str	r3, [sp, #8]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8016e86:	ebb8 0809 	subs.w	r8, r8, r9
 8016e8a:	d448      	bmi.n	8016f1e <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xc2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016e8c:	f1b8 0f00 	cmp.w	r8, #0
 8016e90:	d04a      	beq.n	8016f28 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xcc>
	if (__n > this->_M_max_size())
 8016e92:	f1b8 0f00 	cmp.w	r8, #0
 8016e96:	db45      	blt.n	8016f24 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xc8>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8016e98:	4640      	mov	r0, r8
 8016e9a:	f004 f879 	bl	801af90 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8016e9e:	9000      	str	r0, [sp, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8016ea0:	eb00 0408 	add.w	r4, r0, r8
 8016ea4:	9402      	str	r4, [sp, #8]
	  if (_Num)
 8016ea6:	f1b8 0f00 	cmp.w	r8, #0
 8016eaa:	d13f      	bne.n	8016f2c <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xd0>
	  this->_M_impl._M_finish =
 8016eac:	9401      	str	r4, [sp, #4]
			return self->ConfigureTimings(input[0], timings, input[length-1]);
 8016eae:	f896 9000 	ldrb.w	r9, [r6]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016eb2:	9a00      	ldr	r2, [sp, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	9303      	str	r3, [sp, #12]
 8016eb8:	9304      	str	r3, [sp, #16]
 8016eba:	9305      	str	r3, [sp, #20]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016ebc:	1aa4      	subs	r4, r4, r2
 8016ebe:	d03c      	beq.n	8016f3a <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xde>
	if (__n > this->_M_max_size())
 8016ec0:	429c      	cmp	r4, r3
 8016ec2:	db38      	blt.n	8016f36 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xda>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8016ec4:	4620      	mov	r0, r4
 8016ec6:	f004 f863 	bl	801af90 <_Znwj>
 8016eca:	4680      	mov	r8, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8016ecc:	f8cd 800c 	str.w	r8, [sp, #12]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8016ed0:	f8cd 8010 	str.w	r8, [sp, #16]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8016ed4:	4444      	add	r4, r8
 8016ed6:	9405      	str	r4, [sp, #20]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8016ed8:	46c2      	mov	sl, r8
      return std::__niter_wrap(__result,
 8016eda:	9800      	ldr	r0, [sp, #0]
 8016edc:	f7ea fdeb 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8016ee0:	4604      	mov	r4, r0
 8016ee2:	9801      	ldr	r0, [sp, #4]
 8016ee4:	f7ea fde7 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8016ee8:	ebb0 0b04 	subs.w	fp, r0, r4
 8016eec:	d128      	bne.n	8016f40 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xe4>
	  return __result + _Num;
 8016eee:	eb0a 000b 	add.w	r0, sl, fp
	this->_M_impl._M_finish =
 8016ef2:	9004      	str	r0, [sp, #16]
 8016ef4:	5d73      	ldrb	r3, [r6, r5]
 8016ef6:	aa03      	add	r2, sp, #12
 8016ef8:	4649      	mov	r1, r9
 8016efa:	4638      	mov	r0, r7
 8016efc:	f7ff ff87 	bl	8016e0e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 8016f00:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8016f02:	9803      	ldr	r0, [sp, #12]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8016f04:	9905      	ldr	r1, [sp, #20]
 8016f06:	1a09      	subs	r1, r1, r0
	if (__p)
 8016f08:	b108      	cbz	r0, 8016f0e <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xb2>
	::operator delete(__p
 8016f0a:	f004 f82b 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8016f0e:	9800      	ldr	r0, [sp, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8016f10:	9902      	ldr	r1, [sp, #8]
 8016f12:	1a09      	subs	r1, r1, r0
	if (__p)
 8016f14:	2800      	cmp	r0, #0
 8016f16:	d0a7      	beq.n	8016e68 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xc>
 8016f18:	f004 f824 	bl	801af64 <_ZdlPvj>
      }
 8016f1c:	e7a4      	b.n	8016e68 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xc>
	  __throw_length_error(
 8016f1e:	480b      	ldr	r0, [pc, #44]	; (8016f4c <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xf0>)
 8016f20:	f004 f8ea 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	  std::__throw_bad_alloc();
 8016f24:	f004 f8e2 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016f28:	2000      	movs	r0, #0
 8016f2a:	e7b8      	b.n	8016e9e <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x42>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8016f2c:	4642      	mov	r2, r8
 8016f2e:	4649      	mov	r1, r9
 8016f30:	f004 fcec 	bl	801b90c <memmove>
 8016f34:	e7ba      	b.n	8016eac <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x50>
 8016f36:	f004 f8d9 	bl	801b0ec <_ZSt17__throw_bad_allocv>
 8016f3a:	f04f 0800 	mov.w	r8, #0
 8016f3e:	e7c5      	b.n	8016ecc <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x70>
 8016f40:	465a      	mov	r2, fp
 8016f42:	4621      	mov	r1, r4
 8016f44:	4640      	mov	r0, r8
 8016f46:	f004 fce1 	bl	801b90c <memmove>
 8016f4a:	e7d0      	b.n	8016eee <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x92>
 8016f4c:	0801bdb0 	.word	0x0801bdb0

08016f50 <_ZN4LEDS11StartupLEDSEv>:
void LEDS::StartupLEDS(void) {
 8016f50:	b510      	push	{r4, lr}
 8016f52:	b08a      	sub	sp, #40	; 0x28
 8016f54:	4604      	mov	r4, r0
	ConfigureTimings(LED_STATUS, std::vector<uint8_t>{5}, 10);
 8016f56:	2305      	movs	r3, #5
 8016f58:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016f5c:	ab09      	add	r3, sp, #36	; 0x24
 8016f5e:	9307      	str	r3, [sp, #28]
 8016f60:	2201      	movs	r2, #1
 8016f62:	9208      	str	r2, [sp, #32]
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8016f64:	ab02      	add	r3, sp, #8
 8016f66:	a907      	add	r1, sp, #28
 8016f68:	c903      	ldmia	r1, {r0, r1}
 8016f6a:	e883 0003 	stmia.w	r3, {r0, r1}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016f6e:	2300      	movs	r3, #0
 8016f70:	9304      	str	r3, [sp, #16]
 8016f72:	9305      	str	r3, [sp, #20]
 8016f74:	9306      	str	r3, [sp, #24]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8016f76:	4610      	mov	r0, r2
 8016f78:	f004 f80a 	bl	801af90 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8016f7c:	9004      	str	r0, [sp, #16]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8016f7e:	1c43      	adds	r3, r0, #1
 8016f80:	9306      	str	r3, [sp, #24]
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8016f82:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8016f86:	7002      	strb	r2, [r0, #0]
	  this->_M_impl._M_finish =
 8016f88:	9305      	str	r3, [sp, #20]
 8016f8a:	230a      	movs	r3, #10
 8016f8c:	aa04      	add	r2, sp, #16
 8016f8e:	2107      	movs	r1, #7
 8016f90:	4620      	mov	r0, r4
 8016f92:	f7ff ff3c 	bl	8016e0e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
	_M_deallocate(_M_impl._M_start,
 8016f96:	9804      	ldr	r0, [sp, #16]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8016f98:	9906      	ldr	r1, [sp, #24]
 8016f9a:	1a09      	subs	r1, r1, r0
	if (__p)
 8016f9c:	b108      	cbz	r0, 8016fa2 <_ZN4LEDS11StartupLEDSEv+0x52>
	::operator delete(__p
 8016f9e:	f003 ffe1 	bl	801af64 <_ZdlPvj>
	Blink(LED_STATUS); // blink until ID allocated
 8016fa2:	2107      	movs	r1, #7
 8016fa4:	4620      	mov	r0, r4
 8016fa6:	f7ff f8ff 	bl	80161a8 <_ZN4LEDS5BlinkEh>
	SetRGB(LED_RGB, 0, 0, 0);
 8016faa:	2200      	movs	r2, #0
 8016fac:	9200      	str	r2, [sp, #0]
 8016fae:	4613      	mov	r3, r2
 8016fb0:	210d      	movs	r1, #13
 8016fb2:	4620      	mov	r0, r4
 8016fb4:	f7ff f967 	bl	8016286 <_ZN4LEDS6SetRGBEhhhh>
}
 8016fb8:	b00a      	add	sp, #40	; 0x28
 8016fba:	bd10      	pop	{r4, pc}

08016fbc <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
	registers->SetRegisterAsSingle(REG_GEN_CONFIGURE_MODULES);
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
	registers->AddWriteCallback<uint8_t>(REG_GEN_CONFIGURE_MODULES, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
			MotionGenerator* self = (MotionGenerator*) context;
			self->request_module_configuration = true;
 8016fbc:	2301      	movs	r3, #1
 8016fbe:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
			return true;
		}
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	4770      	bx	lr

08016fc6 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
	registers->SetRegisterAsSingle(REG_GEN_MODULES_CONTROLLER_STATUS);
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
	registers->AddWriteCallback<uint8_t>(REG_GEN_MODULES_CONTROLLER_STATUS, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
			MotionGenerator* self = (MotionGenerator*) context;
			if (*input > 0) {
 8016fc6:	7813      	ldrb	r3, [r2, #0]
 8016fc8:	b123      	cbz	r3, 8016fd4 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xe>
				self->request_module_controller_activation = true;
 8016fca:	2301      	movs	r3, #1
 8016fcc:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
			} else {
				self->request_module_controller_deactivation = true;
			}
			return true;
		}
 8016fd0:	2001      	movs	r0, #1
 8016fd2:	4770      	bx	lr
				self->request_module_controller_deactivation = true;
 8016fd4:	2301      	movs	r3, #1
 8016fd6:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
 8016fda:	e7f9      	b.n	8016fd0 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0xa>

08016fdc <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPPhPtE1_4_FUNES0_tS2_S3_>:

	registers->AddRegister<uint8_t>(REG_GEN_GENERATOR_STATUS);
	registers->SetRegisterAsSingle(REG_GEN_GENERATOR_STATUS);
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
	registers->AddReadCallback<uint8_t>(REG_GEN_GENERATOR_STATUS, (void*) this,
		[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 8016fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fde:	4604      	mov	r4, r0
 8016fe0:	4615      	mov	r5, r2
 8016fe2:	461e      	mov	r6, r3
			MotionGenerator* self = (MotionGenerator*) context;
			osSemaphoreAcquire(self->GeneratorSemaphore, osWaitForever);
 8016fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8016fe8:	6900      	ldr	r0, [r0, #16]
 8016fea:	f7f5 fc65 	bl	800c8b8 <osSemaphoreAcquire>
			*length = 1;
 8016fee:	2701      	movs	r7, #1
 8016ff0:	8037      	strh	r7, [r6, #0]
			**output = self->active;
 8016ff2:	682b      	ldr	r3, [r5, #0]
 8016ff4:	7d22      	ldrb	r2, [r4, #20]
 8016ff6:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->GeneratorSemaphore);
 8016ff8:	6920      	ldr	r0, [r4, #16]
 8016ffa:	f7f5 fc91 	bl	800c920 <osSemaphoreRelease>
			return true;
		}
 8016ffe:	4638      	mov	r0, r7
 8017000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017002 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPPhPtE3_4_FUNES0_tS2_S3_>:
	registers->AddRegisterPointer<uint32_t>(REG_GEN_PERIOD, &period_ms);

	registers->AddRegister<uint8_t>(REG_GEN_NB_MODULES);
	registers->SetRegisterAsSingle(REG_GEN_NB_MODULES);
	registers->AddReadCallback<uint8_t>(REG_GEN_NB_MODULES, (void*) this,
		[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 8017002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017004:	4604      	mov	r4, r0
 8017006:	4615      	mov	r5, r2
 8017008:	461e      	mov	r6, r3
			MotionGenerator* self = (MotionGenerator*) context;
			osSemaphoreAcquire(self->GeneratorSemaphore, osWaitForever);
 801700a:	f04f 31ff 	mov.w	r1, #4294967295
 801700e:	6900      	ldr	r0, [r0, #16]
 8017010:	f7f5 fc52 	bl	800c8b8 <osSemaphoreAcquire>
			*length = 1;
 8017014:	2701      	movs	r7, #1
 8017016:	8037      	strh	r7, [r6, #0]
			**output = self->number_of_modules;
 8017018:	682b      	ldr	r3, [r5, #0]
 801701a:	7f22      	ldrb	r2, [r4, #28]
 801701c:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->GeneratorSemaphore);
 801701e:	6920      	ldr	r0, [r4, #16]
 8017020:	f7f5 fc7e 	bl	800c920 <osSemaphoreRelease>
			return true;
		}
 8017024:	4638      	mov	r0, r7
 8017026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017028 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE8_4_FUNES0_tS1_t>:
 8017028:	6b41      	ldr	r1, [r0, #52]	; 0x34
    { std::__fill_a1(__first.base(), __last.base(), __value); }
 801702a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 801702c:	e002      	b.n	8017034 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE8_4_FUNES0_tS1_t+0xc>
	*__first = __tmp;
 801702e:	2200      	movs	r2, #0
 8017030:	f843 2b04 	str.w	r2, [r3], #4
      for (; __first != __last; ++__first)
 8017034:	4299      	cmp	r1, r3
 8017036:	d1fa      	bne.n	801702e <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE8_4_FUNES0_tS1_t+0x6>
	registers->AddWriteCallback<uint8_t>(REG_GEN_POSITION_OFFSET, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
			MotionGenerator* self = (MotionGenerator*) context;
			std::fill(self->position_offsets.begin(), self->position_offsets.end(), 0);
			return true;
		}
 8017038:	2001      	movs	r0, #1
 801703a:	4770      	bx	lr

0801703c <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t>:
 801703c:	6a81      	ldr	r1, [r0, #40]	; 0x28
    { std::__fill_a1(__first.base(), __last.base(), __value); }
 801703e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8017040:	e002      	b.n	8017048 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t+0xc>
	*__first = __tmp;
 8017042:	2200      	movs	r2, #0
 8017044:	f843 2b04 	str.w	r2, [r3], #4
      for (; __first != __last; ++__first)
 8017048:	4299      	cmp	r1, r3
 801704a:	d1fa      	bne.n	8017042 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t+0x6>
		}
 801704c:	2001      	movs	r0, #1
 801704e:	4770      	bx	lr

08017050 <_ZN15MotionGeneratorC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017050:	2200      	movs	r2, #0
 8017052:	6242      	str	r2, [r0, #36]	; 0x24
 8017054:	6282      	str	r2, [r0, #40]	; 0x28
 8017056:	62c2      	str	r2, [r0, #44]	; 0x2c
 8017058:	6302      	str	r2, [r0, #48]	; 0x30
 801705a:	6342      	str	r2, [r0, #52]	; 0x34
 801705c:	6382      	str	r2, [r0, #56]	; 0x38
 801705e:	6502      	str	r2, [r0, #80]	; 0x50
 8017060:	6542      	str	r2, [r0, #84]	; 0x54
 8017062:	6582      	str	r2, [r0, #88]	; 0x58
}
 8017064:	4770      	bx	lr

08017066 <_ZN15MotionGenerator18SetGeneratorStatusEb>:
	publishers->SpinPublisher(PUBLISHER_MOTION_GENERATOR);

	osDelay(period_ms);
}

bool MotionGenerator::SetGeneratorStatus(bool status) {
 8017066:	b570      	push	{r4, r5, r6, lr}
 8017068:	b088      	sub	sp, #32
 801706a:	4604      	mov	r4, r0
 801706c:	460d      	mov	r5, r1
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 801706e:	f04f 31ff 	mov.w	r1, #4294967295
 8017072:	6900      	ldr	r0, [r0, #16]
 8017074:	f7f5 fc20 	bl	800c8b8 <osSemaphoreAcquire>
#if defined(USE_LEDS) && defined(USE_SMD_LEDs)
	if (status) {
 8017078:	b355      	cbz	r5, 80170d0 <_ZN15MotionGenerator18SetGeneratorStatusEb+0x6a>
		leds->ConfigureTimings(LED_ACTIVITY, std::vector<uint8_t>{1}, 10);
 801707a:	68e6      	ldr	r6, [r4, #12]
 801707c:	2301      	movs	r3, #1
 801707e:	f88d 301c 	strb.w	r3, [sp, #28]
 8017082:	aa07      	add	r2, sp, #28
 8017084:	9205      	str	r2, [sp, #20]
 8017086:	9306      	str	r3, [sp, #24]
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8017088:	466a      	mov	r2, sp
 801708a:	a905      	add	r1, sp, #20
 801708c:	c903      	ldmia	r1, {r0, r1}
 801708e:	e882 0003 	stmia.w	r2, {r0, r1}
 8017092:	2200      	movs	r2, #0
 8017094:	9202      	str	r2, [sp, #8]
 8017096:	9203      	str	r2, [sp, #12]
 8017098:	9204      	str	r2, [sp, #16]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801709a:	4618      	mov	r0, r3
 801709c:	f003 ff78 	bl	801af90 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80170a0:	9002      	str	r0, [sp, #8]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80170a2:	1c43      	adds	r3, r0, #1
 80170a4:	9304      	str	r3, [sp, #16]
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80170a6:	f89d 201c 	ldrb.w	r2, [sp, #28]
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80170aa:	7002      	strb	r2, [r0, #0]
	  this->_M_impl._M_finish =
 80170ac:	9303      	str	r3, [sp, #12]
 80170ae:	230a      	movs	r3, #10
 80170b0:	aa02      	add	r2, sp, #8
 80170b2:	2108      	movs	r1, #8
 80170b4:	4630      	mov	r0, r6
 80170b6:	f7ff feaa 	bl	8016e0e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
	_M_deallocate(_M_impl._M_start,
 80170ba:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80170bc:	9904      	ldr	r1, [sp, #16]
 80170be:	1a09      	subs	r1, r1, r0
	if (__p)
 80170c0:	b108      	cbz	r0, 80170c6 <_ZN15MotionGenerator18SetGeneratorStatusEb+0x60>
	::operator delete(__p
 80170c2:	f003 ff4f 	bl	801af64 <_ZdlPvj>
		leds->Blink(LED_ACTIVITY);
 80170c6:	2108      	movs	r1, #8
 80170c8:	68e0      	ldr	r0, [r4, #12]
 80170ca:	f7ff f86d 	bl	80161a8 <_ZN4LEDS5BlinkEh>
 80170ce:	e003      	b.n	80170d8 <_ZN15MotionGenerator18SetGeneratorStatusEb+0x72>
	} else {
		leds->ClearLED(LED_ACTIVITY);
 80170d0:	2108      	movs	r1, #8
 80170d2:	68e0      	ldr	r0, [r4, #12]
 80170d4:	f7ff fa72 	bl	80165bc <_ZN4LEDS8ClearLEDEh>
	}
#endif

	active = status;
 80170d8:	7525      	strb	r5, [r4, #20]
	osSemaphoreRelease(GeneratorSemaphore);
 80170da:	6920      	ldr	r0, [r4, #16]
 80170dc:	f7f5 fc20 	bl	800c920 <osSemaphoreRelease>
	return true;
}
 80170e0:	2001      	movs	r0, #1
 80170e2:	b008      	add	sp, #32
 80170e4:	bd70      	pop	{r4, r5, r6, pc}

080170e6 <_ZN15MotionGenerator17ActivateGeneratorEv>:

bool MotionGenerator::ActivateGenerator(void) {
 80170e6:	b510      	push	{r4, lr}
 80170e8:	4604      	mov	r4, r0
	start_time = HAL_GetTick();
 80170ea:	f7ec fb85 	bl	80037f8 <HAL_GetTick>
 80170ee:	64e0      	str	r0, [r4, #76]	; 0x4c
	return SetGeneratorStatus(true);
 80170f0:	2101      	movs	r1, #1
 80170f2:	4620      	mov	r0, r4
 80170f4:	f7ff ffb7 	bl	8017066 <_ZN15MotionGenerator18SetGeneratorStatusEb>
}
 80170f8:	bd10      	pop	{r4, pc}

080170fa <_ZN15MotionGenerator19DeactivateGeneratorEv>:

bool MotionGenerator::DeactivateGenerator(void) {
 80170fa:	b508      	push	{r3, lr}
	return SetGeneratorStatus(false);
 80170fc:	2100      	movs	r1, #0
 80170fe:	f7ff ffb2 	bl	8017066 <_ZN15MotionGenerator18SetGeneratorStatusEb>
}
 8017102:	bd08      	pop	{r3, pc}

08017104 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8017104:	b508      	push	{r3, lr}
			if (*input > 0)
 8017106:	7813      	ldrb	r3, [r2, #0]
 8017108:	b11b      	cbz	r3, 8017112 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t+0xe>
				self->ActivateGenerator();
 801710a:	f7ff ffec 	bl	80170e6 <_ZN15MotionGenerator17ActivateGeneratorEv>
		}
 801710e:	2001      	movs	r0, #1
 8017110:	bd08      	pop	{r3, pc}
				self->DeactivateGenerator();
 8017112:	f7ff fff2 	bl	80170fa <_ZN15MotionGenerator19DeactivateGeneratorEv>
 8017116:	e7fa      	b.n	801710e <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t+0xa>

08017118 <_ZN15MotionGenerator18SetGeneratorPeriodEm>:

bool MotionGenerator::SetGeneratorPeriod(uint32_t period_ms_) {
 8017118:	b538      	push	{r3, r4, r5, lr}
 801711a:	4604      	mov	r4, r0
 801711c:	460d      	mov	r5, r1
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 801711e:	f04f 31ff 	mov.w	r1, #4294967295
 8017122:	6900      	ldr	r0, [r0, #16]
 8017124:	f7f5 fbc8 	bl	800c8b8 <osSemaphoreAcquire>
	period_ms = period_ms_;
 8017128:	61a5      	str	r5, [r4, #24]
	osSemaphoreRelease(GeneratorSemaphore);
 801712a:	6920      	ldr	r0, [r4, #16]
 801712c:	f7f5 fbf8 	bl	800c920 <osSemaphoreRelease>
	return true;
}
 8017130:	2001      	movs	r0, #1
 8017132:	bd38      	pop	{r3, r4, r5, pc}

08017134 <_ZN15MotionGenerator18SetGeneratorOffsetEhf>:

	osSemaphoreRelease(GeneratorSemaphore);
	return true;
}

bool MotionGenerator::SetGeneratorOffset(uint8_t index, float offset) {
 8017134:	b570      	push	{r4, r5, r6, lr}
 8017136:	4604      	mov	r4, r0
 8017138:	460d      	mov	r5, r1
 801713a:	ee10 6a10 	vmov	r6, s0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 801713e:	f04f 31ff 	mov.w	r1, #4294967295
 8017142:	6900      	ldr	r0, [r0, #16]
 8017144:	f7f5 fbb8 	bl	800c8b8 <osSemaphoreAcquire>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017148:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801714a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801714c:	1a5b      	subs	r3, r3, r1
	if (index >= generator_offsets.size()) {osSemaphoreRelease(GeneratorSemaphore); return false;}
 801714e:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
 8017152:	d207      	bcs.n	8017164 <_ZN15MotionGenerator18SetGeneratorOffsetEhf+0x30>
	return *(this->_M_impl._M_start + __n);
 8017154:	eb01 0185 	add.w	r1, r1, r5, lsl #2

	generator_offsets[index] = offset;
 8017158:	600e      	str	r6, [r1, #0]
	osSemaphoreRelease(GeneratorSemaphore);
 801715a:	6920      	ldr	r0, [r4, #16]
 801715c:	f7f5 fbe0 	bl	800c920 <osSemaphoreRelease>
	return true;
 8017160:	2001      	movs	r0, #1
}
 8017162:	bd70      	pop	{r4, r5, r6, pc}
	if (index >= generator_offsets.size()) {osSemaphoreRelease(GeneratorSemaphore); return false;}
 8017164:	6920      	ldr	r0, [r4, #16]
 8017166:	f7f5 fbdb 	bl	800c920 <osSemaphoreRelease>
 801716a:	2000      	movs	r0, #0
 801716c:	e7f9      	b.n	8017162 <_ZN15MotionGenerator18SetGeneratorOffsetEhf+0x2e>

0801716e <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPftE5_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801716e:	2b02      	cmp	r3, #2
 8017170:	d001      	beq.n	8017176 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPftE5_4_FUNES0_tS1_t+0x8>
 8017172:	2000      	movs	r0, #0
		}
 8017174:	4770      	bx	lr
		[](void* context, uint16_t register_id, float* input, uint16_t length) -> bool {
 8017176:	b500      	push	{lr}
 8017178:	b083      	sub	sp, #12
			return self->SetGeneratorOffset((uint8_t) input[0], input[1]);
 801717a:	edd2 7a00 	vldr	s15, [r2]
 801717e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017182:	edcd 7a01 	vstr	s15, [sp, #4]
 8017186:	ed92 0a01 	vldr	s0, [r2, #4]
 801718a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801718e:	f7ff ffd1 	bl	8017134 <_ZN15MotionGenerator18SetGeneratorOffsetEhf>
		}
 8017192:	b003      	add	sp, #12
 8017194:	f85d fb04 	ldr.w	pc, [sp], #4

08017198 <_ZN15MotionGenerator21ResetGeneratorOffsetsEv>:

bool MotionGenerator::ResetGeneratorOffsets(void) {
 8017198:	b510      	push	{r4, lr}
 801719a:	4604      	mov	r4, r0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 801719c:	f04f 31ff 	mov.w	r1, #4294967295
 80171a0:	6900      	ldr	r0, [r0, #16]
 80171a2:	f7f5 fb89 	bl	800c8b8 <osSemaphoreAcquire>
	for (float &offset : generator_offsets) {
 80171a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80171a8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80171aa:	e002      	b.n	80171b2 <_ZN15MotionGenerator21ResetGeneratorOffsetsEv+0x1a>
		offset = 0;
 80171ac:	2200      	movs	r2, #0
 80171ae:	f843 2b04 	str.w	r2, [r3], #4
	for (float &offset : generator_offsets) {
 80171b2:	4299      	cmp	r1, r3
 80171b4:	d1fa      	bne.n	80171ac <_ZN15MotionGenerator21ResetGeneratorOffsetsEv+0x14>
	}
	osSemaphoreRelease(GeneratorSemaphore);
 80171b6:	6920      	ldr	r0, [r4, #16]
 80171b8:	f7f5 fbb2 	bl	800c920 <osSemaphoreRelease>
	return true;
}
 80171bc:	2001      	movs	r0, #1
 80171be:	bd10      	pop	{r4, pc}

080171c0 <_ZN15MotionGenerator17SetPositionOffsetEhf>:

bool MotionGenerator::SetPositionOffset(uint8_t index, float offset) {
 80171c0:	b570      	push	{r4, r5, r6, lr}
 80171c2:	4604      	mov	r4, r0
 80171c4:	460d      	mov	r5, r1
 80171c6:	ee10 6a10 	vmov	r6, s0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 80171ca:	f04f 31ff 	mov.w	r1, #4294967295
 80171ce:	6900      	ldr	r0, [r0, #16]
 80171d0:	f7f5 fb72 	bl	800c8b8 <osSemaphoreAcquire>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80171d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80171d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80171d8:	1a5b      	subs	r3, r3, r1
	if (index >= position_offsets.size()) {osSemaphoreRelease(GeneratorSemaphore); return false;}
 80171da:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
 80171de:	d207      	bcs.n	80171f0 <_ZN15MotionGenerator17SetPositionOffsetEhf+0x30>
	return *(this->_M_impl._M_start + __n);
 80171e0:	eb01 0185 	add.w	r1, r1, r5, lsl #2

	position_offsets[index] = offset;
 80171e4:	600e      	str	r6, [r1, #0]
	osSemaphoreRelease(GeneratorSemaphore);
 80171e6:	6920      	ldr	r0, [r4, #16]
 80171e8:	f7f5 fb9a 	bl	800c920 <osSemaphoreRelease>
	return true;
 80171ec:	2001      	movs	r0, #1
}
 80171ee:	bd70      	pop	{r4, r5, r6, pc}
	if (index >= position_offsets.size()) {osSemaphoreRelease(GeneratorSemaphore); return false;}
 80171f0:	6920      	ldr	r0, [r4, #16]
 80171f2:	f7f5 fb95 	bl	800c920 <osSemaphoreRelease>
 80171f6:	2000      	movs	r0, #0
 80171f8:	e7f9      	b.n	80171ee <_ZN15MotionGenerator17SetPositionOffsetEhf+0x2e>

080171fa <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPftE7_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80171fa:	2b02      	cmp	r3, #2
 80171fc:	d001      	beq.n	8017202 <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPftE7_4_FUNES0_tS1_t+0x8>
 80171fe:	2000      	movs	r0, #0
		}
 8017200:	4770      	bx	lr
		[](void* context, uint16_t register_id, float* input, uint16_t length) -> bool {
 8017202:	b500      	push	{lr}
 8017204:	b083      	sub	sp, #12
			return self->SetPositionOffset((uint8_t) input[0], input[1]);
 8017206:	edd2 7a00 	vldr	s15, [r2]
 801720a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801720e:	edcd 7a01 	vstr	s15, [sp, #4]
 8017212:	ed92 0a01 	vldr	s0, [r2, #4]
 8017216:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801721a:	f7ff ffd1 	bl	80171c0 <_ZN15MotionGenerator17SetPositionOffsetEhf>
		}
 801721e:	b003      	add	sp, #12
 8017220:	f85d fb04 	ldr.w	pc, [sp], #4

08017224 <_ZN15MotionGenerator15SetModuleLengthEf>:

bool MotionGenerator::SetModuleLength(float length) {
 8017224:	b538      	push	{r3, r4, r5, lr}
 8017226:	4604      	mov	r4, r0
 8017228:	ee10 5a10 	vmov	r5, s0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 801722c:	f04f 31ff 	mov.w	r1, #4294967295
 8017230:	6900      	ldr	r0, [r0, #16]
 8017232:	f7f5 fb41 	bl	800c8b8 <osSemaphoreAcquire>
	module_length = length;
 8017236:	6225      	str	r5, [r4, #32]
	osSemaphoreRelease(GeneratorSemaphore);
 8017238:	6920      	ldr	r0, [r4, #16]
 801723a:	f7f5 fb71 	bl	800c920 <osSemaphoreRelease>
	return true;
}
 801723e:	2001      	movs	r0, #1
 8017240:	bd38      	pop	{r3, r4, r5, pc}

08017242 <_ZN15MotionGenerator21SetGeneratorAmplitudeEf>:

bool MotionGenerator::SetGeneratorAmplitude(float amplitude_) {
 8017242:	b538      	push	{r3, r4, r5, lr}
 8017244:	4604      	mov	r4, r0
 8017246:	ee10 5a10 	vmov	r5, s0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 801724a:	f04f 31ff 	mov.w	r1, #4294967295
 801724e:	6900      	ldr	r0, [r0, #16]
 8017250:	f7f5 fb32 	bl	800c8b8 <osSemaphoreAcquire>
	amplitude = amplitude_;
 8017254:	63e5      	str	r5, [r4, #60]	; 0x3c
	osSemaphoreRelease(GeneratorSemaphore);
 8017256:	6920      	ldr	r0, [r4, #16]
 8017258:	f7f5 fb62 	bl	800c920 <osSemaphoreRelease>
	return true;
}
 801725c:	2001      	movs	r0, #1
 801725e:	bd38      	pop	{r3, r4, r5, pc}

08017260 <_ZN15MotionGenerator21SetGeneratorFrequencyEf>:

bool MotionGenerator::SetGeneratorFrequency(float frequency_) {
 8017260:	b538      	push	{r3, r4, r5, lr}
 8017262:	4604      	mov	r4, r0
 8017264:	ee10 5a10 	vmov	r5, s0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8017268:	f04f 31ff 	mov.w	r1, #4294967295
 801726c:	6900      	ldr	r0, [r0, #16]
 801726e:	f7f5 fb23 	bl	800c8b8 <osSemaphoreAcquire>
	frequency = frequency_;
 8017272:	6425      	str	r5, [r4, #64]	; 0x40
	osSemaphoreRelease(GeneratorSemaphore);
 8017274:	6920      	ldr	r0, [r4, #16]
 8017276:	f7f5 fb53 	bl	800c920 <osSemaphoreRelease>
	return true;
}
 801727a:	2001      	movs	r0, #1
 801727c:	bd38      	pop	{r3, r4, r5, pc}

0801727e <_ZN15MotionGenerator29SetGeneratorWavelengthInverseEf>:

bool MotionGenerator::SetGeneratorWavelengthInverse(float wavelength_inverse_) {
 801727e:	b538      	push	{r3, r4, r5, lr}
 8017280:	4604      	mov	r4, r0
 8017282:	ee10 5a10 	vmov	r5, s0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 8017286:	f04f 31ff 	mov.w	r1, #4294967295
 801728a:	6900      	ldr	r0, [r0, #16]
 801728c:	f7f5 fb14 	bl	800c8b8 <osSemaphoreAcquire>
	wavelength_inverse = wavelength_inverse_;
 8017290:	6465      	str	r5, [r4, #68]	; 0x44
	osSemaphoreRelease(GeneratorSemaphore);
 8017292:	6920      	ldr	r0, [r4, #16]
 8017294:	f7f5 fb44 	bl	800c920 <osSemaphoreRelease>
	return true;
}
 8017298:	2001      	movs	r0, #1
 801729a:	bd38      	pop	{r3, r4, r5, pc}

0801729c <_ZN15MotionGenerator17SetGeneratorPhaseEf>:

bool MotionGenerator::SetGeneratorPhase(float phase_) {
 801729c:	b538      	push	{r3, r4, r5, lr}
 801729e:	4604      	mov	r4, r0
 80172a0:	ee10 5a10 	vmov	r5, s0
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 80172a4:	f04f 31ff 	mov.w	r1, #4294967295
 80172a8:	6900      	ldr	r0, [r0, #16]
 80172aa:	f7f5 fb05 	bl	800c8b8 <osSemaphoreAcquire>
	phase = phase_;
 80172ae:	64a5      	str	r5, [r4, #72]	; 0x48
	osSemaphoreRelease(GeneratorSemaphore);
 80172b0:	6920      	ldr	r0, [r4, #16]
 80172b2:	f7f5 fb35 	bl	800c920 <osSemaphoreRelease>
	return true;
}
 80172b6:	2001      	movs	r0, #1
 80172b8:	bd38      	pop	{r3, r4, r5, pc}

080172ba <_ZN15MotionGenerator18SetNumberOfModulesEh>:
bool MotionGenerator::SetNumberOfModules(uint8_t nb_modules) {
 80172ba:	b570      	push	{r4, r5, r6, lr}
 80172bc:	4604      	mov	r4, r0
 80172be:	460d      	mov	r5, r1
	osSemaphoreAcquire(GeneratorSemaphore, osWaitForever);
 80172c0:	f04f 31ff 	mov.w	r1, #4294967295
 80172c4:	6900      	ldr	r0, [r0, #16]
 80172c6:	f7f5 faf7 	bl	800c8b8 <osSemaphoreAcquire>
	number_of_modules = nb_modules;
 80172ca:	7725      	strb	r5, [r4, #28]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80172cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80172ce:	4620      	mov	r0, r4
 80172d0:	f850 3f24 	ldr.w	r3, [r0, #36]!
 80172d4:	1af6      	subs	r6, r6, r3
 80172d6:	10b6      	asrs	r6, r6, #2
 80172d8:	6841      	ldr	r1, [r0, #4]
 80172da:	1aca      	subs	r2, r1, r3
 80172dc:	ea4f 0ca2 	mov.w	ip, r2, asr #2
	if (__new_size > size())
 80172e0:	ebb5 0fa2 	cmp.w	r5, r2, asr #2
 80172e4:	d807      	bhi.n	80172f6 <_ZN15MotionGenerator18SetNumberOfModulesEh+0x3c>
	else if (__new_size < size())
 80172e6:	4565      	cmp	r5, ip
 80172e8:	d209      	bcs.n	80172fe <_ZN15MotionGenerator18SetNumberOfModulesEh+0x44>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 80172ea:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80172ee:	4299      	cmp	r1, r3
 80172f0:	d005      	beq.n	80172fe <_ZN15MotionGenerator18SetNumberOfModulesEh+0x44>
	    this->_M_impl._M_finish = __pos;
 80172f2:	6043      	str	r3, [r0, #4]
 80172f4:	e003      	b.n	80172fe <_ZN15MotionGenerator18SetNumberOfModulesEh+0x44>
	  _M_default_append(__new_size - size());
 80172f6:	eba5 010c 	sub.w	r1, r5, ip
 80172fa:	f7f9 faff 	bl	80108fc <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>
 80172fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
      { return __normal_iterator(_M_current + __n); }
 8017300:	b2f6      	uxtb	r6, r6
      : _M_current(__i) { }
 8017302:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    { std::__fill_a1(__first.base(), __last.base(), __value); }
 8017304:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8017308:	e002      	b.n	8017310 <_ZN15MotionGenerator18SetNumberOfModulesEh+0x56>
	*__first = __tmp;
 801730a:	2200      	movs	r2, #0
 801730c:	f843 2b04 	str.w	r2, [r3], #4
      for (; __first != __last; ++__first)
 8017310:	4298      	cmp	r0, r3
 8017312:	d1fa      	bne.n	801730a <_ZN15MotionGenerator18SetNumberOfModulesEh+0x50>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017314:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8017316:	4620      	mov	r0, r4
 8017318:	f850 3f30 	ldr.w	r3, [r0, #48]!
 801731c:	1af6      	subs	r6, r6, r3
 801731e:	10b6      	asrs	r6, r6, #2
 8017320:	6841      	ldr	r1, [r0, #4]
 8017322:	1aca      	subs	r2, r1, r3
 8017324:	ea4f 0ca2 	mov.w	ip, r2, asr #2
	if (__new_size > size())
 8017328:	ebb5 0fa2 	cmp.w	r5, r2, asr #2
 801732c:	d807      	bhi.n	801733e <_ZN15MotionGenerator18SetNumberOfModulesEh+0x84>
	else if (__new_size < size())
 801732e:	4565      	cmp	r5, ip
 8017330:	d209      	bcs.n	8017346 <_ZN15MotionGenerator18SetNumberOfModulesEh+0x8c>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8017332:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8017336:	4299      	cmp	r1, r3
 8017338:	d005      	beq.n	8017346 <_ZN15MotionGenerator18SetNumberOfModulesEh+0x8c>
	    this->_M_impl._M_finish = __pos;
 801733a:	6043      	str	r3, [r0, #4]
 801733c:	e003      	b.n	8017346 <_ZN15MotionGenerator18SetNumberOfModulesEh+0x8c>
	  _M_default_append(__new_size - size());
 801733e:	eba5 010c 	sub.w	r1, r5, ip
 8017342:	f7f9 fadb 	bl	80108fc <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>
 8017346:	6b23      	ldr	r3, [r4, #48]	; 0x30
      { return __normal_iterator(_M_current + __n); }
 8017348:	b2f6      	uxtb	r6, r6
      : _M_current(__i) { }
 801734a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    { std::__fill_a1(__first.base(), __last.base(), __value); }
 801734c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8017350:	e002      	b.n	8017358 <_ZN15MotionGenerator18SetNumberOfModulesEh+0x9e>
	*__first = __tmp;
 8017352:	2200      	movs	r2, #0
 8017354:	f843 2b04 	str.w	r2, [r3], #4
      for (; __first != __last; ++__first)
 8017358:	4299      	cmp	r1, r3
 801735a:	d1fa      	bne.n	8017352 <_ZN15MotionGenerator18SetNumberOfModulesEh+0x98>
	osSemaphoreRelease(GeneratorSemaphore);
 801735c:	6920      	ldr	r0, [r4, #16]
 801735e:	f7f5 fadf 	bl	800c920 <osSemaphoreRelease>
}
 8017362:	2001      	movs	r0, #1
 8017364:	bd70      	pop	{r4, r5, r6, pc}
	...

08017368 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS>:
void MotionGenerator::Init(Registers* registers_, Publishers* publishers_, Services* services_, LEDS* leds_) {
 8017368:	b538      	push	{r3, r4, r5, lr}
 801736a:	4604      	mov	r4, r0
	registers = registers_;
 801736c:	6001      	str	r1, [r0, #0]
	publishers = publishers_;
 801736e:	6042      	str	r2, [r0, #4]
	services = services_;
 8017370:	6083      	str	r3, [r0, #8]
	leds = leds_;
 8017372:	9b04      	ldr	r3, [sp, #16]
 8017374:	60c3      	str	r3, [r0, #12]
	GeneratorSemaphore = osSemaphoreNew(1,1,NULL);
 8017376:	2200      	movs	r2, #0
 8017378:	2101      	movs	r1, #1
 801737a:	4608      	mov	r0, r1
 801737c:	f7f5 fa40 	bl	800c800 <osSemaphoreNew>
 8017380:	6120      	str	r0, [r4, #16]
	osSemaphoreRelease(GeneratorSemaphore);
 8017382:	f7f5 facd 	bl	800c920 <osSemaphoreRelease>
	MoveToRegister = Register{.address=REG_MOTOR_MOVETO, .type=FLOAT_TYPE, .isArray=false, .length=1};
 8017386:	4b1a      	ldr	r3, [pc, #104]	; (80173f0 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS+0x88>)
 8017388:	e893 0003 	ldmia.w	r3, {r0, r1}
 801738c:	65e0      	str	r0, [r4, #92]	; 0x5c
 801738e:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
	GeneratorInterface = ServiceInterface{.interface=GENERATOR_INTERFACE};
 8017392:	2500      	movs	r5, #0
 8017394:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	SetGeneratorPeriod(DEFAULT_GENERATOR_PERIOD);
 8017398:	210a      	movs	r1, #10
 801739a:	4620      	mov	r0, r4
 801739c:	f7ff febc 	bl	8017118 <_ZN15MotionGenerator18SetGeneratorPeriodEm>
	SetNumberOfModules(DEFAULT_GENERATOR_NB_NODULES);
 80173a0:	4629      	mov	r1, r5
 80173a2:	4620      	mov	r0, r4
 80173a4:	f7ff ff89 	bl	80172ba <_ZN15MotionGenerator18SetNumberOfModulesEh>
	ResetGeneratorOffsets();
 80173a8:	4620      	mov	r0, r4
 80173aa:	f7ff fef5 	bl	8017198 <_ZN15MotionGenerator21ResetGeneratorOffsetsEv>
	SetModuleLength(DEFAULT_MODULE_LENGTH);
 80173ae:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80173f4 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS+0x8c>
 80173b2:	4620      	mov	r0, r4
 80173b4:	f7ff ff36 	bl	8017224 <_ZN15MotionGenerator15SetModuleLengthEf>
	SetGeneratorAmplitude(DEFAULT_GENERATOR_AMPLITUDE);
 80173b8:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80173bc:	4620      	mov	r0, r4
 80173be:	f7ff ff40 	bl	8017242 <_ZN15MotionGenerator21SetGeneratorAmplitudeEf>
	SetGeneratorFrequency(DEFAULT_GENERATOR_FREQUENCY);
 80173c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80173c6:	4620      	mov	r0, r4
 80173c8:	f7ff ff4a 	bl	8017260 <_ZN15MotionGenerator21SetGeneratorFrequencyEf>
	SetGeneratorWavelengthInverse(1 / DEFAULT_GENERATOR_WAVELENGTH);
 80173cc:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80173d0:	4620      	mov	r0, r4
 80173d2:	f7ff ff54 	bl	801727e <_ZN15MotionGenerator29SetGeneratorWavelengthInverseEf>
	SetGeneratorPhase(DEFAULT_GENERATOR_PHASE);
 80173d6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80173f8 <_ZN15MotionGenerator4InitEP9RegistersP10PublishersP8ServicesP4LEDS+0x90>
 80173da:	4620      	mov	r0, r4
 80173dc:	f7ff ff5e 	bl	801729c <_ZN15MotionGenerator17SetGeneratorPhaseEf>
	request_module_configuration = false;
 80173e0:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
	request_module_controller_activation = false;
 80173e4:	f884 5065 	strb.w	r5, [r4, #101]	; 0x65
	request_module_controller_deactivation = false;
 80173e8:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
}
 80173ec:	bd38      	pop	{r3, r4, r5, pc}
 80173ee:	bf00      	nop
 80173f0:	0801bd68 	.word	0x0801bd68
 80173f4:	3dfbe76d 	.word	0x3dfbe76d
 80173f8:	00000000 	.word	0x00000000

080173fc <_ZZN15MotionGenerator12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80173fc:	b508      	push	{r3, lr}
			return self->SetNumberOfModules(*input);
 80173fe:	7811      	ldrb	r1, [r2, #0]
 8017400:	f7ff ff5b 	bl	80172ba <_ZN15MotionGenerator18SetNumberOfModulesEh>
		}
 8017404:	bd08      	pop	{r3, pc}
	...

08017408 <_ZN9Registers11AddRegisterIfEEbt>:
bool Registers::AddRegister(uint16_t ID) {
 8017408:	b5f0      	push	{r4, r5, r6, r7, lr}
 801740a:	b08b      	sub	sp, #44	; 0x2c
 801740c:	4604      	mov	r4, r0
 801740e:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017410:	f04f 31ff 	mov.w	r1, #4294967295
 8017414:	6800      	ldr	r0, [r0, #0]
 8017416:	f7f5 fa4f 	bl	800c8b8 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801741a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 801741e:	4631      	mov	r1, r6
 8017420:	4620      	mov	r0, r4
 8017422:	f002 fc34 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8017426:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 801742a:	2b00      	cmp	r3, #0
 801742c:	d13a      	bne.n	80174a4 <_ZN9Registers11AddRegisterIfEEbt+0x9c>
struct Permissions {
 801742e:	2701      	movs	r7, #1
 8017430:	f88d 701c 	strb.w	r7, [sp, #28]
 8017434:	f88d 701d 	strb.w	r7, [sp, #29]
	Permissions permissions_;
 8017438:	4b26      	ldr	r3, [pc, #152]	; (80174d4 <_ZN9Registers11AddRegisterIfEEbt+0xcc>)
 801743a:	891b      	ldrh	r3, [r3, #8]
 801743c:	f8ad 3008 	strh.w	r3, [sp, #8]
	mode.pointer = false;
 8017440:	2500      	movs	r5, #0
 8017442:	f88d 5004 	strb.w	r5, [sp, #4]
	mode.callbacks = false;
 8017446:	f88d 5005 	strb.w	r5, [sp, #5]
	configuration_.mode = mode;
 801744a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801744e:	f8ad 3014 	strh.w	r3, [sp, #20]
	register_.address = ID;
 8017452:	f8ad 600c 	strh.w	r6, [sp, #12]
	register_.type = GetTypeID<T>(&success); // check the type is supported
 8017456:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 801745a:	4620      	mov	r0, r4
 801745c:	f7f8 fd0e 	bl	800fe7c <_ZN9Registers9GetTypeIDIfEEhPb>
 8017460:	f88d 000e 	strb.w	r0, [sp, #14]
	register_.isArray = false;
 8017464:	f88d 500f 	strb.w	r5, [sp, #15]
	register_.length = 1;
 8017468:	f8ad 7010 	strh.w	r7, [sp, #16]
	configuration_.register_info = register_;
 801746c:	9803      	ldr	r0, [sp, #12]
 801746e:	f8cd 0016 	str.w	r0, [sp, #22]
 8017472:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017476:	f8ad 301a 	strh.w	r3, [sp, #26]
	permissions_.write = false;
 801747a:	f88d 5008 	strb.w	r5, [sp, #8]
	permissions_.read = false;
 801747e:	f88d 5009 	strb.w	r5, [sp, #9]
	configuration_.access = permissions_;
 8017482:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017486:	f8ad 301c 	strh.w	r3, [sp, #28]
	configuration_.callbacks_ID = 0;
 801748a:	f8ad 501e 	strh.w	r5, [sp, #30]
	configuration_.register_semaphore = NULL;
 801748e:	9508      	str	r5, [sp, #32]
	if (success) {
 8017490:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8017494:	b95b      	cbnz	r3, 80174ae <_ZN9Registers11AddRegisterIfEEbt+0xa6>
	osSemaphoreRelease(RegistersSemaphore);
 8017496:	6820      	ldr	r0, [r4, #0]
 8017498:	f7f5 fa42 	bl	800c920 <osSemaphoreRelease>
	return success;
 801749c:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
}
 80174a0:	b00b      	add	sp, #44	; 0x2c
 80174a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(RegistersSemaphore);
 80174a4:	6820      	ldr	r0, [r4, #0]
 80174a6:	f7f5 fa3b 	bl	800c920 <osSemaphoreRelease>
		return false; // register already exists, return error
 80174aa:	2000      	movs	r0, #0
 80174ac:	e7f8      	b.n	80174a0 <_ZN9Registers11AddRegisterIfEEbt+0x98>
		registers.push_back(configuration_);
 80174ae:	1d26      	adds	r6, r4, #4
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80174b0:	6875      	ldr	r5, [r6, #4]
 80174b2:	68b3      	ldr	r3, [r6, #8]
 80174b4:	429d      	cmp	r5, r3
 80174b6:	d007      	beq.n	80174c8 <_ZN9Registers11AddRegisterIfEEbt+0xc0>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80174b8:	ab05      	add	r3, sp, #20
 80174ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80174bc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 80174c0:	6873      	ldr	r3, [r6, #4]
 80174c2:	3310      	adds	r3, #16
 80174c4:	6073      	str	r3, [r6, #4]
 80174c6:	e7e6      	b.n	8017496 <_ZN9Registers11AddRegisterIfEEbt+0x8e>
	  _M_realloc_insert(end(), __x);
 80174c8:	aa05      	add	r2, sp, #20
 80174ca:	4629      	mov	r1, r5
 80174cc:	4630      	mov	r0, r6
 80174ce:	f7f7 fce3 	bl	800ee98 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 80174d2:	e7e0      	b.n	8017496 <_ZN9Registers11AddRegisterIfEEbt+0x8e>
 80174d4:	0801bd68 	.word	0x0801bd68

080174d8 <_ZN9Registers11AddRegisterImEEbt>:
bool Registers::AddRegister(uint16_t ID) {
 80174d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174da:	b08b      	sub	sp, #44	; 0x2c
 80174dc:	4604      	mov	r4, r0
 80174de:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80174e0:	f04f 31ff 	mov.w	r1, #4294967295
 80174e4:	6800      	ldr	r0, [r0, #0]
 80174e6:	f7f5 f9e7 	bl	800c8b8 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 80174ea:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 80174ee:	4631      	mov	r1, r6
 80174f0:	4620      	mov	r0, r4
 80174f2:	f002 fbcc 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 80174f6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d13a      	bne.n	8017574 <_ZN9Registers11AddRegisterImEEbt+0x9c>
struct Permissions {
 80174fe:	2701      	movs	r7, #1
 8017500:	f88d 701c 	strb.w	r7, [sp, #28]
 8017504:	f88d 701d 	strb.w	r7, [sp, #29]
	Permissions permissions_;
 8017508:	4b26      	ldr	r3, [pc, #152]	; (80175a4 <_ZN9Registers11AddRegisterImEEbt+0xcc>)
 801750a:	891b      	ldrh	r3, [r3, #8]
 801750c:	f8ad 3008 	strh.w	r3, [sp, #8]
	mode.pointer = false;
 8017510:	2500      	movs	r5, #0
 8017512:	f88d 5004 	strb.w	r5, [sp, #4]
	mode.callbacks = false;
 8017516:	f88d 5005 	strb.w	r5, [sp, #5]
	configuration_.mode = mode;
 801751a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801751e:	f8ad 3014 	strh.w	r3, [sp, #20]
	register_.address = ID;
 8017522:	f8ad 600c 	strh.w	r6, [sp, #12]
	register_.type = GetTypeID<T>(&success); // check the type is supported
 8017526:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 801752a:	4620      	mov	r0, r4
 801752c:	f7f8 fb08 	bl	800fb40 <_ZN9Registers9GetTypeIDImEEhPb>
 8017530:	f88d 000e 	strb.w	r0, [sp, #14]
	register_.isArray = false;
 8017534:	f88d 500f 	strb.w	r5, [sp, #15]
	register_.length = 1;
 8017538:	f8ad 7010 	strh.w	r7, [sp, #16]
	configuration_.register_info = register_;
 801753c:	9803      	ldr	r0, [sp, #12]
 801753e:	f8cd 0016 	str.w	r0, [sp, #22]
 8017542:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017546:	f8ad 301a 	strh.w	r3, [sp, #26]
	permissions_.write = false;
 801754a:	f88d 5008 	strb.w	r5, [sp, #8]
	permissions_.read = false;
 801754e:	f88d 5009 	strb.w	r5, [sp, #9]
	configuration_.access = permissions_;
 8017552:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017556:	f8ad 301c 	strh.w	r3, [sp, #28]
	configuration_.callbacks_ID = 0;
 801755a:	f8ad 501e 	strh.w	r5, [sp, #30]
	configuration_.register_semaphore = NULL;
 801755e:	9508      	str	r5, [sp, #32]
	if (success) {
 8017560:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8017564:	b95b      	cbnz	r3, 801757e <_ZN9Registers11AddRegisterImEEbt+0xa6>
	osSemaphoreRelease(RegistersSemaphore);
 8017566:	6820      	ldr	r0, [r4, #0]
 8017568:	f7f5 f9da 	bl	800c920 <osSemaphoreRelease>
	return success;
 801756c:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
}
 8017570:	b00b      	add	sp, #44	; 0x2c
 8017572:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(RegistersSemaphore);
 8017574:	6820      	ldr	r0, [r4, #0]
 8017576:	f7f5 f9d3 	bl	800c920 <osSemaphoreRelease>
		return false; // register already exists, return error
 801757a:	2000      	movs	r0, #0
 801757c:	e7f8      	b.n	8017570 <_ZN9Registers11AddRegisterImEEbt+0x98>
		registers.push_back(configuration_);
 801757e:	1d26      	adds	r6, r4, #4
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8017580:	6875      	ldr	r5, [r6, #4]
 8017582:	68b3      	ldr	r3, [r6, #8]
 8017584:	429d      	cmp	r5, r3
 8017586:	d007      	beq.n	8017598 <_ZN9Registers11AddRegisterImEEbt+0xc0>
 8017588:	ab05      	add	r3, sp, #20
 801758a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801758c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8017590:	6873      	ldr	r3, [r6, #4]
 8017592:	3310      	adds	r3, #16
 8017594:	6073      	str	r3, [r6, #4]
 8017596:	e7e6      	b.n	8017566 <_ZN9Registers11AddRegisterImEEbt+0x8e>
	  _M_realloc_insert(end(), __x);
 8017598:	aa05      	add	r2, sp, #20
 801759a:	4629      	mov	r1, r5
 801759c:	4630      	mov	r0, r6
 801759e:	f7f7 fc7b 	bl	800ee98 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 80175a2:	e7e0      	b.n	8017566 <_ZN9Registers11AddRegisterImEEbt+0x8e>
 80175a4:	0801bd68 	.word	0x0801bd68

080175a8 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE>:
bool Registers::AddReadCallback(uint16_t ID, void* context, bool (*read)(void*, uint16_t, T**, uint16_t*)) {
 80175a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175ac:	b086      	sub	sp, #24
 80175ae:	4604      	mov	r4, r0
 80175b0:	460d      	mov	r5, r1
 80175b2:	4690      	mov	r8, r2
 80175b4:	461f      	mov	r7, r3
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80175b6:	f04f 31ff 	mov.w	r1, #4294967295
 80175ba:	6800      	ldr	r0, [r0, #0]
 80175bc:	f7f5 f97c 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80175c0:	f10d 0217 	add.w	r2, sp, #23
 80175c4:	4629      	mov	r1, r5
 80175c6:	4620      	mov	r0, r4
 80175c8:	f002 fb61 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80175cc:	f89d 6017 	ldrb.w	r6, [sp, #23]
 80175d0:	b36e      	cbz	r6, 801762e <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE+0x86>
 80175d2:	4605      	mov	r5, r0
	uint8_t registered_type = GetTypeID<T>(&success);
 80175d4:	f10d 0117 	add.w	r1, sp, #23
 80175d8:	4620      	mov	r0, r4
 80175da:	f7f7 fb3f 	bl	800ec5c <_ZN9Registers9GetTypeIDIhEEhPb>
	if (!success) {
 80175de:	f89d 6017 	ldrb.w	r6, [sp, #23]
 80175e2:	b35e      	cbz	r6, 801763c <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE+0x94>
	if (target_register->register_info.type != registered_type) {
 80175e4:	792b      	ldrb	r3, [r5, #4]
 80175e6:	4283      	cmp	r3, r0
 80175e8:	d12c      	bne.n	8017644 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE+0x9c>
	if (callbacks[target_register->register_info.type] == NULL) {// check supported type
 80175ea:	3304      	adds	r3, #4
 80175ec:	f854 c023 	ldr.w	ip, [r4, r3, lsl #2]
 80175f0:	f1bc 0f00 	cmp.w	ip, #0
 80175f4:	d02b      	beq.n	801764e <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE+0xa6>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 80175f6:	782b      	ldrb	r3, [r5, #0]
 80175f8:	b90b      	cbnz	r3, 80175fe <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE+0x56>
 80175fa:	786b      	ldrb	r3, [r5, #1]
 80175fc:	b363      	cbz	r3, 8017658 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE+0xb0>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 80175fe:	8968      	ldrh	r0, [r5, #10]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017600:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8017604:	f8dc 2000 	ldr.w	r2, [ip]
 8017608:	1a9b      	subs	r3, r3, r2
 801760a:	111a      	asrs	r2, r3, #4
	if (__n >= this->size())
 801760c:	ebb0 1f23 	cmp.w	r0, r3, asr #4
 8017610:	d243      	bcs.n	801769a <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE+0xf2>
	return *(this->_M_impl._M_start + __n);
 8017612:	f8dc 1000 	ldr.w	r1, [ip]
 8017616:	eb01 1100 	add.w	r1, r1, r0, lsl #4
		callback->context = context;
 801761a:	f8c1 8004 	str.w	r8, [r1, #4]
		callback->read = read;
 801761e:	60cf      	str	r7, [r1, #12]
	target_register->mode.callbacks = true; // = (uint8_t) CALLBACK_MODE;
 8017620:	2301      	movs	r3, #1
 8017622:	706b      	strb	r3, [r5, #1]
	target_register->access.read = true;
 8017624:	726b      	strb	r3, [r5, #9]
	osSemaphoreRelease(RegistersSemaphore);
 8017626:	6820      	ldr	r0, [r4, #0]
 8017628:	f7f5 f97a 	bl	800c920 <osSemaphoreRelease>
	return true;
 801762c:	e002      	b.n	8017634 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE+0x8c>
		osSemaphoreRelease(RegistersSemaphore);
 801762e:	6820      	ldr	r0, [r4, #0]
 8017630:	f7f5 f976 	bl	800c920 <osSemaphoreRelease>
}
 8017634:	4630      	mov	r0, r6
 8017636:	b006      	add	sp, #24
 8017638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		osSemaphoreRelease(RegistersSemaphore);
 801763c:	6820      	ldr	r0, [r4, #0]
 801763e:	f7f5 f96f 	bl	800c920 <osSemaphoreRelease>
		return false;
 8017642:	e7f7      	b.n	8017634 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE+0x8c>
		osSemaphoreRelease(RegistersSemaphore);
 8017644:	6820      	ldr	r0, [r4, #0]
 8017646:	f7f5 f96b 	bl	800c920 <osSemaphoreRelease>
		return false;
 801764a:	2600      	movs	r6, #0
 801764c:	e7f2      	b.n	8017634 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE+0x8c>
		osSemaphoreRelease(RegistersSemaphore);
 801764e:	6820      	ldr	r0, [r4, #0]
 8017650:	f7f5 f966 	bl	800c920 <osSemaphoreRelease>
		return false;
 8017654:	2600      	movs	r6, #0
 8017656:	e7ed      	b.n	8017634 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE+0x8c>
		callback.context = context;
 8017658:	f8cd 8008 	str.w	r8, [sp, #8]
		callback.write = NULL;
 801765c:	9303      	str	r3, [sp, #12]
		callback.read = read;
 801765e:	9704      	str	r7, [sp, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017660:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8017664:	f8dc 2000 	ldr.w	r2, [ip]
 8017668:	1a9b      	subs	r3, r3, r2
 801766a:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801766c:	816b      	strh	r3, [r5, #10]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801766e:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8017672:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8017676:	429f      	cmp	r7, r3
 8017678:	d009      	beq.n	801768e <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE+0xe6>
 801767a:	ab01      	add	r3, sp, #4
 801767c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801767e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8017682:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8017686:	3310      	adds	r3, #16
 8017688:	f8cc 3004 	str.w	r3, [ip, #4]
 801768c:	e7c8      	b.n	8017620 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE+0x78>
	  _M_realloc_insert(end(), __x);
 801768e:	aa01      	add	r2, sp, #4
 8017690:	4639      	mov	r1, r7
 8017692:	4660      	mov	r0, ip
 8017694:	f7f7 fcd4 	bl	800f040 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
		target_callback_list->push_back(callback);
 8017698:	e7c2      	b.n	8017620 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE+0x78>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801769a:	4601      	mov	r1, r0
 801769c:	4801      	ldr	r0, [pc, #4]	; (80176a4 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE+0xfc>)
 801769e:	f003 fd2e 	bl	801b0fe <_ZSt24__throw_out_of_range_fmtPKcz>
 80176a2:	bf00      	nop
 80176a4:	0801bffc 	.word	0x0801bffc

080176a8 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80176a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176ac:	b083      	sub	sp, #12
 80176ae:	4688      	mov	r8, r1
 80176b0:	4616      	mov	r6, r2
 80176b2:	2301      	movs	r3, #1
 80176b4:	9300      	str	r3, [sp, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80176b6:	6842      	ldr	r2, [r0, #4]
 80176b8:	6803      	ldr	r3, [r0, #0]
 80176ba:	1ad3      	subs	r3, r2, r3
	if (max_size() - size() < __n)
 80176bc:	f06f 4178 	mvn.w	r1, #4160749568	; 0xf8000000
 80176c0:	ebb1 1f23 	cmp.w	r1, r3, asr #4
 80176c4:	d040      	beq.n	8017748 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>
 80176c6:	4604      	mov	r4, r0
 80176c8:	111d      	asrs	r5, r3, #4
	const size_type __len = size() + (std::max)(size(), __n);
 80176ca:	9501      	str	r5, [sp, #4]
      if (__a < __b)
 80176cc:	2d00      	cmp	r5, #0
 80176ce:	d03e      	beq.n	801774e <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa6>
      return __a;
 80176d0:	ab01      	add	r3, sp, #4
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	441d      	add	r5, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80176d6:	6823      	ldr	r3, [r4, #0]
 80176d8:	1ad2      	subs	r2, r2, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80176da:	ebb5 1f22 	cmp.w	r5, r2, asr #4
 80176de:	d338      	bcc.n	8017752 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xaa>
 80176e0:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 80176e4:	d238      	bcs.n	8017758 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb0>
      pointer __old_start = this->_M_impl._M_start;
 80176e6:	f8d4 9000 	ldr.w	r9, [r4]
      pointer __old_finish = this->_M_impl._M_finish;
 80176ea:	f8d4 a004 	ldr.w	sl, [r4, #4]
    { return __lhs.base() - __rhs.base(); }
 80176ee:	eba8 0b09 	sub.w	fp, r8, r9
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80176f2:	b3b5      	cbz	r5, 8017762 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xba>
	if (__n > this->_M_max_size())
 80176f4:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 80176f8:	d231      	bcs.n	801775e <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb6>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80176fa:	0128      	lsls	r0, r5, #4
 80176fc:	f003 fc48 	bl	801af90 <_Znwj>
 8017700:	4607      	mov	r7, r0
	  _Alloc_traits::construct(this->_M_impl,
 8017702:	eb07 0c0b 	add.w	ip, r7, fp
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017706:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801770a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      ptrdiff_t __count = __last - __first;
 801770e:	eba8 0609 	sub.w	r6, r8, r9
      if (__count > 0)
 8017712:	2e00      	cmp	r6, #0
 8017714:	dc27      	bgt.n	8017766 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xbe>
      return __result + __count;
 8017716:	443e      	add	r6, r7
	      ++__new_finish;
 8017718:	3610      	adds	r6, #16
      ptrdiff_t __count = __last - __first;
 801771a:	ebaa 0a08 	sub.w	sl, sl, r8
      if (__count > 0)
 801771e:	f1ba 0f00 	cmp.w	sl, #0
 8017722:	dc26      	bgt.n	8017772 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xca>
      return __result + __count;
 8017724:	4456      	add	r6, sl
		    this->_M_impl._M_end_of_storage - __old_start);
 8017726:	68a1      	ldr	r1, [r4, #8]
 8017728:	eba1 0109 	sub.w	r1, r1, r9
	if (__p)
 801772c:	f1b9 0f00 	cmp.w	r9, #0
 8017730:	d002      	beq.n	8017738 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x90>
	::operator delete(__p
 8017732:	4648      	mov	r0, r9
 8017734:	f003 fc16 	bl	801af64 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 8017738:	6027      	str	r7, [r4, #0]
      this->_M_impl._M_finish = __new_finish;
 801773a:	6066      	str	r6, [r4, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801773c:	eb07 1505 	add.w	r5, r7, r5, lsl #4
 8017740:	60a5      	str	r5, [r4, #8]
    }
 8017742:	b003      	add	sp, #12
 8017744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_length_error(__N(__s));
 8017748:	480d      	ldr	r0, [pc, #52]	; (8017780 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xd8>)
 801774a:	f003 fcd5 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 801774e:	466b      	mov	r3, sp
 8017750:	e7bf      	b.n	80176d2 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017752:	f06f 4578 	mvn.w	r5, #4160749568	; 0xf8000000
 8017756:	e7c6      	b.n	80176e6 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
 8017758:	f06f 4578 	mvn.w	r5, #4160749568	; 0xf8000000
 801775c:	e7c3      	b.n	80176e6 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	  std::__throw_bad_alloc();
 801775e:	f003 fcc5 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017762:	2700      	movs	r7, #0
 8017764:	e7cd      	b.n	8017702 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8017766:	4632      	mov	r2, r6
 8017768:	4649      	mov	r1, r9
 801776a:	4638      	mov	r0, r7
 801776c:	f004 f8ce 	bl	801b90c <memmove>
 8017770:	e7d1      	b.n	8017716 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x6e>
 8017772:	4652      	mov	r2, sl
 8017774:	4641      	mov	r1, r8
 8017776:	4630      	mov	r0, r6
 8017778:	f004 f8c8 	bl	801b90c <memmove>
 801777c:	e7d2      	b.n	8017724 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x7c>
 801777e:	bf00      	nop
 8017780:	0801bde4 	.word	0x0801bde4

08017784 <_ZN9Registers18AddRegisterPointerImEEbtPT_>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 8017784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017786:	b087      	sub	sp, #28
 8017788:	4604      	mov	r4, r0
 801778a:	460d      	mov	r5, r1
 801778c:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801778e:	f04f 31ff 	mov.w	r1, #4294967295
 8017792:	6800      	ldr	r0, [r0, #0]
 8017794:	f7f5 f890 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017798:	f10d 0217 	add.w	r2, sp, #23
 801779c:	4629      	mov	r1, r5
 801779e:	4620      	mov	r0, r4
 80177a0:	f002 fa75 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80177a4:	f89d 6017 	ldrb.w	r6, [sp, #23]
 80177a8:	b35e      	cbz	r6, 8017802 <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x7e>
 80177aa:	4605      	mov	r5, r0
	uint8_t registered_type = GetTypeID<T>(&success);
 80177ac:	f10d 0117 	add.w	r1, sp, #23
 80177b0:	4620      	mov	r0, r4
 80177b2:	f7f8 f9c5 	bl	800fb40 <_ZN9Registers9GetTypeIDImEEhPb>
	if (!success) {
 80177b6:	f89d 6017 	ldrb.w	r6, [sp, #23]
 80177ba:	b346      	cbz	r6, 801780e <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x8a>
	if (target_register->register_info.type != registered_type) {
 80177bc:	792b      	ldrb	r3, [r5, #4]
 80177be:	4283      	cmp	r3, r0
 80177c0:	d129      	bne.n	8017816 <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x92>
	if (callbacks[target_register->register_info.type] == NULL) { // check supported type
 80177c2:	3304      	adds	r3, #4
 80177c4:	f854 c023 	ldr.w	ip, [r4, r3, lsl #2]
 80177c8:	f1bc 0f00 	cmp.w	ip, #0
 80177cc:	d028      	beq.n	8017820 <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x9c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 80177ce:	782b      	ldrb	r3, [r5, #0]
 80177d0:	b90b      	cbnz	r3, 80177d6 <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x52>
 80177d2:	786b      	ldrb	r3, [r5, #1]
 80177d4:	b34b      	cbz	r3, 801782a <_ZN9Registers18AddRegisterPointerImEEbtPT_+0xa6>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 80177d6:	8969      	ldrh	r1, [r5, #10]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80177d8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80177dc:	f8dc 2000 	ldr.w	r2, [ip]
 80177e0:	1a9b      	subs	r3, r3, r2
 80177e2:	111a      	asrs	r2, r3, #4
	if (__n >= this->size())
 80177e4:	ebb1 1f23 	cmp.w	r1, r3, asr #4
 80177e8:	d23d      	bcs.n	8017866 <_ZN9Registers18AddRegisterPointerImEEbtPT_+0xe2>
	return *(this->_M_impl._M_start + __n);
 80177ea:	f8dc 3000 	ldr.w	r3, [ip]
 80177ee:	0109      	lsls	r1, r1, #4
		callback->pointer = pointer;
 80177f0:	505f      	str	r7, [r3, r1]
	target_register->mode.pointer = true;
 80177f2:	2301      	movs	r3, #1
 80177f4:	702b      	strb	r3, [r5, #0]
	target_register->access.write = true;
 80177f6:	722b      	strb	r3, [r5, #8]
	target_register->access.read = true;
 80177f8:	726b      	strb	r3, [r5, #9]
	osSemaphoreRelease(RegistersSemaphore);
 80177fa:	6820      	ldr	r0, [r4, #0]
 80177fc:	f7f5 f890 	bl	800c920 <osSemaphoreRelease>
	return true;
 8017800:	e002      	b.n	8017808 <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x84>
		osSemaphoreRelease(RegistersSemaphore);
 8017802:	6820      	ldr	r0, [r4, #0]
 8017804:	f7f5 f88c 	bl	800c920 <osSemaphoreRelease>
}
 8017808:	4630      	mov	r0, r6
 801780a:	b007      	add	sp, #28
 801780c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(RegistersSemaphore);
 801780e:	6820      	ldr	r0, [r4, #0]
 8017810:	f7f5 f886 	bl	800c920 <osSemaphoreRelease>
		return false;
 8017814:	e7f8      	b.n	8017808 <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x84>
		osSemaphoreRelease(RegistersSemaphore);
 8017816:	6820      	ldr	r0, [r4, #0]
 8017818:	f7f5 f882 	bl	800c920 <osSemaphoreRelease>
		return false;
 801781c:	2600      	movs	r6, #0
 801781e:	e7f3      	b.n	8017808 <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x84>
		osSemaphoreRelease(RegistersSemaphore);
 8017820:	6820      	ldr	r0, [r4, #0]
 8017822:	f7f5 f87d 	bl	800c920 <osSemaphoreRelease>
		return false;
 8017826:	2600      	movs	r6, #0
 8017828:	e7ee      	b.n	8017808 <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x84>
		callback.pointer = pointer;
 801782a:	9701      	str	r7, [sp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801782c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8017830:	f8dc 2000 	ldr.w	r2, [ip]
 8017834:	1a9b      	subs	r3, r3, r2
 8017836:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8017838:	816b      	strh	r3, [r5, #10]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801783a:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801783e:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8017842:	429f      	cmp	r7, r3
 8017844:	d009      	beq.n	801785a <_ZN9Registers18AddRegisterPointerImEEbtPT_+0xd6>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017846:	ab01      	add	r3, sp, #4
 8017848:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801784a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801784e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8017852:	3310      	adds	r3, #16
 8017854:	f8cc 3004 	str.w	r3, [ip, #4]
 8017858:	e7cb      	b.n	80177f2 <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x6e>
	  _M_realloc_insert(end(), __x);
 801785a:	aa01      	add	r2, sp, #4
 801785c:	4639      	mov	r1, r7
 801785e:	4660      	mov	r0, ip
 8017860:	f7ff ff22 	bl	80176a8 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
		target_callback_list->push_back(callback);
 8017864:	e7c5      	b.n	80177f2 <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x6e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8017866:	4801      	ldr	r0, [pc, #4]	; (801786c <_ZN9Registers18AddRegisterPointerImEEbtPT_+0xe8>)
 8017868:	f003 fc49 	bl	801b0fe <_ZSt24__throw_out_of_range_fmtPKcz>
 801786c:	0801bffc 	.word	0x0801bffc

08017870 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8017870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017874:	b083      	sub	sp, #12
 8017876:	4688      	mov	r8, r1
 8017878:	4616      	mov	r6, r2
 801787a:	2301      	movs	r3, #1
 801787c:	9300      	str	r3, [sp, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801787e:	6842      	ldr	r2, [r0, #4]
 8017880:	6803      	ldr	r3, [r0, #0]
 8017882:	1ad3      	subs	r3, r2, r3
	if (max_size() - size() < __n)
 8017884:	f06f 4178 	mvn.w	r1, #4160749568	; 0xf8000000
 8017888:	ebb1 1f23 	cmp.w	r1, r3, asr #4
 801788c:	d040      	beq.n	8017910 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>
 801788e:	4604      	mov	r4, r0
 8017890:	111d      	asrs	r5, r3, #4
	const size_type __len = size() + (std::max)(size(), __n);
 8017892:	9501      	str	r5, [sp, #4]
      if (__a < __b)
 8017894:	2d00      	cmp	r5, #0
 8017896:	d03e      	beq.n	8017916 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa6>
      return __a;
 8017898:	ab01      	add	r3, sp, #4
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	441d      	add	r5, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801789e:	6823      	ldr	r3, [r4, #0]
 80178a0:	1ad2      	subs	r2, r2, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80178a2:	ebb5 1f22 	cmp.w	r5, r2, asr #4
 80178a6:	d338      	bcc.n	801791a <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xaa>
 80178a8:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 80178ac:	d238      	bcs.n	8017920 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb0>
      pointer __old_start = this->_M_impl._M_start;
 80178ae:	f8d4 9000 	ldr.w	r9, [r4]
      pointer __old_finish = this->_M_impl._M_finish;
 80178b2:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80178b6:	eba8 0b09 	sub.w	fp, r8, r9
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80178ba:	b3b5      	cbz	r5, 801792a <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xba>
	if (__n > this->_M_max_size())
 80178bc:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 80178c0:	d231      	bcs.n	8017926 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb6>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80178c2:	0128      	lsls	r0, r5, #4
 80178c4:	f003 fb64 	bl	801af90 <_Znwj>
 80178c8:	4607      	mov	r7, r0
	  _Alloc_traits::construct(this->_M_impl,
 80178ca:	eb07 0c0b 	add.w	ip, r7, fp
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80178ce:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80178d2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      ptrdiff_t __count = __last - __first;
 80178d6:	eba8 0609 	sub.w	r6, r8, r9
      if (__count > 0)
 80178da:	2e00      	cmp	r6, #0
 80178dc:	dc27      	bgt.n	801792e <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xbe>
      return __result + __count;
 80178de:	443e      	add	r6, r7
	      ++__new_finish;
 80178e0:	3610      	adds	r6, #16
      ptrdiff_t __count = __last - __first;
 80178e2:	ebaa 0a08 	sub.w	sl, sl, r8
      if (__count > 0)
 80178e6:	f1ba 0f00 	cmp.w	sl, #0
 80178ea:	dc26      	bgt.n	801793a <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xca>
      return __result + __count;
 80178ec:	4456      	add	r6, sl
		    this->_M_impl._M_end_of_storage - __old_start);
 80178ee:	68a1      	ldr	r1, [r4, #8]
 80178f0:	eba1 0109 	sub.w	r1, r1, r9
	if (__p)
 80178f4:	f1b9 0f00 	cmp.w	r9, #0
 80178f8:	d002      	beq.n	8017900 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x90>
	::operator delete(__p
 80178fa:	4648      	mov	r0, r9
 80178fc:	f003 fb32 	bl	801af64 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 8017900:	6027      	str	r7, [r4, #0]
      this->_M_impl._M_finish = __new_finish;
 8017902:	6066      	str	r6, [r4, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8017904:	eb07 1505 	add.w	r5, r7, r5, lsl #4
 8017908:	60a5      	str	r5, [r4, #8]
    }
 801790a:	b003      	add	sp, #12
 801790c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_length_error(__N(__s));
 8017910:	480d      	ldr	r0, [pc, #52]	; (8017948 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xd8>)
 8017912:	f003 fbf1 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 8017916:	466b      	mov	r3, sp
 8017918:	e7bf      	b.n	801789a <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801791a:	f06f 4578 	mvn.w	r5, #4160749568	; 0xf8000000
 801791e:	e7c6      	b.n	80178ae <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
 8017920:	f06f 4578 	mvn.w	r5, #4160749568	; 0xf8000000
 8017924:	e7c3      	b.n	80178ae <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	  std::__throw_bad_alloc();
 8017926:	f003 fbe1 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801792a:	2700      	movs	r7, #0
 801792c:	e7cd      	b.n	80178ca <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801792e:	4632      	mov	r2, r6
 8017930:	4649      	mov	r1, r9
 8017932:	4638      	mov	r0, r7
 8017934:	f003 ffea 	bl	801b90c <memmove>
 8017938:	e7d1      	b.n	80178de <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x6e>
 801793a:	4652      	mov	r2, sl
 801793c:	4641      	mov	r1, r8
 801793e:	4630      	mov	r0, r6
 8017940:	f003 ffe4 	bl	801b90c <memmove>
 8017944:	e7d2      	b.n	80178ec <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x7c>
 8017946:	bf00      	nop
 8017948:	0801bde4 	.word	0x0801bde4

0801794c <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801794c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017950:	b086      	sub	sp, #24
 8017952:	4604      	mov	r4, r0
 8017954:	460d      	mov	r5, r1
 8017956:	4690      	mov	r8, r2
 8017958:	461f      	mov	r7, r3
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801795a:	f04f 31ff 	mov.w	r1, #4294967295
 801795e:	6800      	ldr	r0, [r0, #0]
 8017960:	f7f4 ffaa 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017964:	f10d 0217 	add.w	r2, sp, #23
 8017968:	4629      	mov	r1, r5
 801796a:	4620      	mov	r0, r4
 801796c:	f002 f98f 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8017970:	f89d 6017 	ldrb.w	r6, [sp, #23]
 8017974:	b36e      	cbz	r6, 80179d2 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE+0x86>
 8017976:	4605      	mov	r5, r0
	uint8_t registered_type = GetTypeID<T>(&success);
 8017978:	f10d 0117 	add.w	r1, sp, #23
 801797c:	4620      	mov	r0, r4
 801797e:	f7f8 fa7d 	bl	800fe7c <_ZN9Registers9GetTypeIDIfEEhPb>
	if (!success) {
 8017982:	f89d 6017 	ldrb.w	r6, [sp, #23]
 8017986:	b35e      	cbz	r6, 80179e0 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE+0x94>
	if (target_register->register_info.type != registered_type) {
 8017988:	792b      	ldrb	r3, [r5, #4]
 801798a:	4283      	cmp	r3, r0
 801798c:	d12c      	bne.n	80179e8 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE+0x9c>
	if (callbacks[target_register->register_info.type] == NULL) {// check supported type
 801798e:	3304      	adds	r3, #4
 8017990:	f854 c023 	ldr.w	ip, [r4, r3, lsl #2]
 8017994:	f1bc 0f00 	cmp.w	ip, #0
 8017998:	d02b      	beq.n	80179f2 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE+0xa6>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801799a:	782b      	ldrb	r3, [r5, #0]
 801799c:	b90b      	cbnz	r3, 80179a2 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE+0x56>
 801799e:	786b      	ldrb	r3, [r5, #1]
 80179a0:	b363      	cbz	r3, 80179fc <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE+0xb0>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 80179a2:	8968      	ldrh	r0, [r5, #10]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80179a4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80179a8:	f8dc 2000 	ldr.w	r2, [ip]
 80179ac:	1a9b      	subs	r3, r3, r2
 80179ae:	111a      	asrs	r2, r3, #4
	if (__n >= this->size())
 80179b0:	ebb0 1f23 	cmp.w	r0, r3, asr #4
 80179b4:	d243      	bcs.n	8017a3e <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE+0xf2>
	return *(this->_M_impl._M_start + __n);
 80179b6:	f8dc 1000 	ldr.w	r1, [ip]
 80179ba:	eb01 1100 	add.w	r1, r1, r0, lsl #4
		callback->context = context;
 80179be:	f8c1 8004 	str.w	r8, [r1, #4]
		callback->write = write;
 80179c2:	608f      	str	r7, [r1, #8]
	target_register->mode.callbacks = true; // = (uint8_t) CALLBACK_MODE;
 80179c4:	2301      	movs	r3, #1
 80179c6:	706b      	strb	r3, [r5, #1]
	target_register->access.write = true;
 80179c8:	722b      	strb	r3, [r5, #8]
	osSemaphoreRelease(RegistersSemaphore);
 80179ca:	6820      	ldr	r0, [r4, #0]
 80179cc:	f7f4 ffa8 	bl	800c920 <osSemaphoreRelease>
	return true;
 80179d0:	e002      	b.n	80179d8 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE+0x8c>
		osSemaphoreRelease(RegistersSemaphore);
 80179d2:	6820      	ldr	r0, [r4, #0]
 80179d4:	f7f4 ffa4 	bl	800c920 <osSemaphoreRelease>
}
 80179d8:	4630      	mov	r0, r6
 80179da:	b006      	add	sp, #24
 80179dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		osSemaphoreRelease(RegistersSemaphore);
 80179e0:	6820      	ldr	r0, [r4, #0]
 80179e2:	f7f4 ff9d 	bl	800c920 <osSemaphoreRelease>
		return false;
 80179e6:	e7f7      	b.n	80179d8 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE+0x8c>
		osSemaphoreRelease(RegistersSemaphore);
 80179e8:	6820      	ldr	r0, [r4, #0]
 80179ea:	f7f4 ff99 	bl	800c920 <osSemaphoreRelease>
		return false;
 80179ee:	2600      	movs	r6, #0
 80179f0:	e7f2      	b.n	80179d8 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE+0x8c>
		osSemaphoreRelease(RegistersSemaphore);
 80179f2:	6820      	ldr	r0, [r4, #0]
 80179f4:	f7f4 ff94 	bl	800c920 <osSemaphoreRelease>
		return false;
 80179f8:	2600      	movs	r6, #0
 80179fa:	e7ed      	b.n	80179d8 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE+0x8c>
		callback.context = context;
 80179fc:	f8cd 8008 	str.w	r8, [sp, #8]
		callback.write = write;
 8017a00:	9703      	str	r7, [sp, #12]
		callback.read = NULL;
 8017a02:	9304      	str	r3, [sp, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017a04:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8017a08:	f8dc 2000 	ldr.w	r2, [ip]
 8017a0c:	1a9b      	subs	r3, r3, r2
 8017a0e:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8017a10:	816b      	strh	r3, [r5, #10]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8017a12:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8017a16:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8017a1a:	429f      	cmp	r7, r3
 8017a1c:	d009      	beq.n	8017a32 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE+0xe6>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017a1e:	ab01      	add	r3, sp, #4
 8017a20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017a22:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8017a26:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8017a2a:	3310      	adds	r3, #16
 8017a2c:	f8cc 3004 	str.w	r3, [ip, #4]
 8017a30:	e7c8      	b.n	80179c4 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE+0x78>
	  _M_realloc_insert(end(), __x);
 8017a32:	aa01      	add	r2, sp, #4
 8017a34:	4639      	mov	r1, r7
 8017a36:	4660      	mov	r0, ip
 8017a38:	f7ff ff1a 	bl	8017870 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
		target_callback_list->push_back(callback);
 8017a3c:	e7c2      	b.n	80179c4 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE+0x78>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8017a3e:	4601      	mov	r1, r0
 8017a40:	4801      	ldr	r0, [pc, #4]	; (8017a48 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE+0xfc>)
 8017a42:	f003 fb5c 	bl	801b0fe <_ZSt24__throw_out_of_range_fmtPKcz>
 8017a46:	bf00      	nop
 8017a48:	0801bffc 	.word	0x0801bffc

08017a4c <_ZN9Registers18AddRegisterPointerIfEEbtPT_>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 8017a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a4e:	b087      	sub	sp, #28
 8017a50:	4604      	mov	r4, r0
 8017a52:	460d      	mov	r5, r1
 8017a54:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017a56:	f04f 31ff 	mov.w	r1, #4294967295
 8017a5a:	6800      	ldr	r0, [r0, #0]
 8017a5c:	f7f4 ff2c 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017a60:	f10d 0217 	add.w	r2, sp, #23
 8017a64:	4629      	mov	r1, r5
 8017a66:	4620      	mov	r0, r4
 8017a68:	f002 f911 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8017a6c:	f89d 6017 	ldrb.w	r6, [sp, #23]
 8017a70:	b35e      	cbz	r6, 8017aca <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x7e>
 8017a72:	4605      	mov	r5, r0
	uint8_t registered_type = GetTypeID<T>(&success);
 8017a74:	f10d 0117 	add.w	r1, sp, #23
 8017a78:	4620      	mov	r0, r4
 8017a7a:	f7f8 f9ff 	bl	800fe7c <_ZN9Registers9GetTypeIDIfEEhPb>
	if (!success) {
 8017a7e:	f89d 6017 	ldrb.w	r6, [sp, #23]
 8017a82:	b346      	cbz	r6, 8017ad6 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x8a>
	if (target_register->register_info.type != registered_type) {
 8017a84:	792b      	ldrb	r3, [r5, #4]
 8017a86:	4283      	cmp	r3, r0
 8017a88:	d129      	bne.n	8017ade <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x92>
	if (callbacks[target_register->register_info.type] == NULL) { // check supported type
 8017a8a:	3304      	adds	r3, #4
 8017a8c:	f854 c023 	ldr.w	ip, [r4, r3, lsl #2]
 8017a90:	f1bc 0f00 	cmp.w	ip, #0
 8017a94:	d028      	beq.n	8017ae8 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x9c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8017a96:	782b      	ldrb	r3, [r5, #0]
 8017a98:	b90b      	cbnz	r3, 8017a9e <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x52>
 8017a9a:	786b      	ldrb	r3, [r5, #1]
 8017a9c:	b34b      	cbz	r3, 8017af2 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0xa6>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8017a9e:	8969      	ldrh	r1, [r5, #10]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017aa0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8017aa4:	f8dc 2000 	ldr.w	r2, [ip]
 8017aa8:	1a9b      	subs	r3, r3, r2
 8017aaa:	111a      	asrs	r2, r3, #4
	if (__n >= this->size())
 8017aac:	ebb1 1f23 	cmp.w	r1, r3, asr #4
 8017ab0:	d23d      	bcs.n	8017b2e <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0xe2>
	return *(this->_M_impl._M_start + __n);
 8017ab2:	f8dc 3000 	ldr.w	r3, [ip]
 8017ab6:	0109      	lsls	r1, r1, #4
		callback->pointer = pointer;
 8017ab8:	505f      	str	r7, [r3, r1]
	target_register->mode.pointer = true;
 8017aba:	2301      	movs	r3, #1
 8017abc:	702b      	strb	r3, [r5, #0]
	target_register->access.write = true;
 8017abe:	722b      	strb	r3, [r5, #8]
	target_register->access.read = true;
 8017ac0:	726b      	strb	r3, [r5, #9]
	osSemaphoreRelease(RegistersSemaphore);
 8017ac2:	6820      	ldr	r0, [r4, #0]
 8017ac4:	f7f4 ff2c 	bl	800c920 <osSemaphoreRelease>
	return true;
 8017ac8:	e002      	b.n	8017ad0 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x84>
		osSemaphoreRelease(RegistersSemaphore);
 8017aca:	6820      	ldr	r0, [r4, #0]
 8017acc:	f7f4 ff28 	bl	800c920 <osSemaphoreRelease>
}
 8017ad0:	4630      	mov	r0, r6
 8017ad2:	b007      	add	sp, #28
 8017ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(RegistersSemaphore);
 8017ad6:	6820      	ldr	r0, [r4, #0]
 8017ad8:	f7f4 ff22 	bl	800c920 <osSemaphoreRelease>
		return false;
 8017adc:	e7f8      	b.n	8017ad0 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x84>
		osSemaphoreRelease(RegistersSemaphore);
 8017ade:	6820      	ldr	r0, [r4, #0]
 8017ae0:	f7f4 ff1e 	bl	800c920 <osSemaphoreRelease>
		return false;
 8017ae4:	2600      	movs	r6, #0
 8017ae6:	e7f3      	b.n	8017ad0 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x84>
		osSemaphoreRelease(RegistersSemaphore);
 8017ae8:	6820      	ldr	r0, [r4, #0]
 8017aea:	f7f4 ff19 	bl	800c920 <osSemaphoreRelease>
		return false;
 8017aee:	2600      	movs	r6, #0
 8017af0:	e7ee      	b.n	8017ad0 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x84>
		callback.pointer = pointer;
 8017af2:	9701      	str	r7, [sp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017af4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8017af8:	f8dc 2000 	ldr.w	r2, [ip]
 8017afc:	1a9b      	subs	r3, r3, r2
 8017afe:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8017b00:	816b      	strh	r3, [r5, #10]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8017b02:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8017b06:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8017b0a:	429f      	cmp	r7, r3
 8017b0c:	d009      	beq.n	8017b22 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0xd6>
 8017b0e:	ab01      	add	r3, sp, #4
 8017b10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017b12:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8017b16:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8017b1a:	3310      	adds	r3, #16
 8017b1c:	f8cc 3004 	str.w	r3, [ip, #4]
 8017b20:	e7cb      	b.n	8017aba <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x6e>
	  _M_realloc_insert(end(), __x);
 8017b22:	aa01      	add	r2, sp, #4
 8017b24:	4639      	mov	r1, r7
 8017b26:	4660      	mov	r0, ip
 8017b28:	f7ff fea2 	bl	8017870 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
		target_callback_list->push_back(callback);
 8017b2c:	e7c5      	b.n	8017aba <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x6e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8017b2e:	4801      	ldr	r0, [pc, #4]	; (8017b34 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0xe8>)
 8017b30:	f003 fae5 	bl	801b0fe <_ZSt24__throw_out_of_range_fmtPKcz>
 8017b34:	0801bffc 	.word	0x0801bffc

08017b38 <_ZN9Registers24AddVectorRegisterPointerIfEEbtPSt6vectorIT_SaIS2_EE>:
bool Registers::AddVectorRegisterPointer(uint16_t ID, std::vector<T>* pointer) {
 8017b38:	b508      	push	{r3, lr}
	return AddRegisterPointer(ID, reinterpreted_pointer);
 8017b3a:	f7ff ff87 	bl	8017a4c <_ZN9Registers18AddRegisterPointerIfEEbtPT_>
}
 8017b3e:	bd08      	pop	{r3, pc}

08017b40 <_ZN15MotionGenerator12AddRegistersEv>:
void MotionGenerator::AddRegisters(void) {
 8017b40:	b538      	push	{r3, r4, r5, lr}
 8017b42:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_GEN_CONFIGURE_MODULES);
 8017b44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017b48:	6800      	ldr	r0, [r0, #0]
 8017b4a:	f7f7 fa11 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_GEN_CONFIGURE_MODULES);
 8017b4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017b52:	6820      	ldr	r0, [r4, #0]
 8017b54:	f002 f8db 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
 8017b58:	4625      	mov	r5, r4
 8017b5a:	f855 0b10 	ldr.w	r0, [r5], #16
 8017b5e:	462a      	mov	r2, r5
 8017b60:	f240 4102 	movw	r1, #1026	; 0x402
 8017b64:	f002 f8b5 	bl	8019cd2 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddWriteCallback<uint8_t>(REG_GEN_CONFIGURE_MODULES, (void*) this,
 8017b68:	4ba0      	ldr	r3, [pc, #640]	; (8017dec <_ZN15MotionGenerator12AddRegistersEv+0x2ac>)
 8017b6a:	4622      	mov	r2, r4
 8017b6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017b70:	6820      	ldr	r0, [r4, #0]
 8017b72:	f7f7 fad3 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_GEN_MODULES_CONTROLLER_STATUS);
 8017b76:	f240 4101 	movw	r1, #1025	; 0x401
 8017b7a:	6820      	ldr	r0, [r4, #0]
 8017b7c:	f7f7 f9f8 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_GEN_MODULES_CONTROLLER_STATUS);
 8017b80:	f240 4101 	movw	r1, #1025	; 0x401
 8017b84:	6820      	ldr	r0, [r4, #0]
 8017b86:	f002 f8c2 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
 8017b8a:	462a      	mov	r2, r5
 8017b8c:	f240 4102 	movw	r1, #1026	; 0x402
 8017b90:	6820      	ldr	r0, [r4, #0]
 8017b92:	f002 f89e 	bl	8019cd2 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddWriteCallback<uint8_t>(REG_GEN_MODULES_CONTROLLER_STATUS, (void*) this,
 8017b96:	4b96      	ldr	r3, [pc, #600]	; (8017df0 <_ZN15MotionGenerator12AddRegistersEv+0x2b0>)
 8017b98:	4622      	mov	r2, r4
 8017b9a:	f240 4101 	movw	r1, #1025	; 0x401
 8017b9e:	6820      	ldr	r0, [r4, #0]
 8017ba0:	f7f7 fabc 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_GEN_GENERATOR_STATUS);
 8017ba4:	f240 4102 	movw	r1, #1026	; 0x402
 8017ba8:	6820      	ldr	r0, [r4, #0]
 8017baa:	f7f7 f9e1 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_GEN_GENERATOR_STATUS);
 8017bae:	f240 4102 	movw	r1, #1026	; 0x402
 8017bb2:	6820      	ldr	r0, [r4, #0]
 8017bb4:	f002 f8ab 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_GENERATOR_STATUS, &GeneratorSemaphore);
 8017bb8:	462a      	mov	r2, r5
 8017bba:	f240 4102 	movw	r1, #1026	; 0x402
 8017bbe:	6820      	ldr	r0, [r4, #0]
 8017bc0:	f002 f887 	bl	8019cd2 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddReadCallback<uint8_t>(REG_GEN_GENERATOR_STATUS, (void*) this,
 8017bc4:	4b8b      	ldr	r3, [pc, #556]	; (8017df4 <_ZN15MotionGenerator12AddRegistersEv+0x2b4>)
 8017bc6:	4622      	mov	r2, r4
 8017bc8:	f240 4102 	movw	r1, #1026	; 0x402
 8017bcc:	6820      	ldr	r0, [r4, #0]
 8017bce:	f7ff fceb 	bl	80175a8 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE>
	registers->AddWriteCallback<uint8_t>(REG_GEN_GENERATOR_STATUS, (void*) this,
 8017bd2:	4b89      	ldr	r3, [pc, #548]	; (8017df8 <_ZN15MotionGenerator12AddRegistersEv+0x2b8>)
 8017bd4:	4622      	mov	r2, r4
 8017bd6:	f240 4102 	movw	r1, #1026	; 0x402
 8017bda:	6820      	ldr	r0, [r4, #0]
 8017bdc:	f7f7 fa9e 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<float>(REG_GEN_SETPOINTS);
 8017be0:	f240 4103 	movw	r1, #1027	; 0x403
 8017be4:	6820      	ldr	r0, [r4, #0]
 8017be6:	f7ff fc0f 	bl	8017408 <_ZN9Registers11AddRegisterIfEEbt>
	registers->SetRegisterAsVector(REG_GEN_SETPOINTS);
 8017bea:	f240 4103 	movw	r1, #1027	; 0x403
 8017bee:	6820      	ldr	r0, [r4, #0]
 8017bf0:	f002 f8cd 	bl	8019d8e <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddRegisterSemaphore(REG_GEN_SETPOINTS, &GeneratorSemaphore);
 8017bf4:	462a      	mov	r2, r5
 8017bf6:	f240 4103 	movw	r1, #1027	; 0x403
 8017bfa:	6820      	ldr	r0, [r4, #0]
 8017bfc:	f002 f869 	bl	8019cd2 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddVectorRegisterPointer<float>(REG_GEN_SETPOINTS, &setpoints);
 8017c00:	4622      	mov	r2, r4
 8017c02:	f852 0b50 	ldr.w	r0, [r2], #80
 8017c06:	f240 4103 	movw	r1, #1027	; 0x403
 8017c0a:	f7ff ff95 	bl	8017b38 <_ZN9Registers24AddVectorRegisterPointerIfEEbtPSt6vectorIT_SaIS2_EE>
	registers->SetRegisterPermissions(REG_GEN_SETPOINTS, READ_PERMISSION);
 8017c0e:	2202      	movs	r2, #2
 8017c10:	f240 4103 	movw	r1, #1027	; 0x403
 8017c14:	6820      	ldr	r0, [r4, #0]
 8017c16:	f002 f8bf 	bl	8019d98 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<uint32_t>(REG_GEN_PERIOD);
 8017c1a:	f240 4104 	movw	r1, #1028	; 0x404
 8017c1e:	6820      	ldr	r0, [r4, #0]
 8017c20:	f7ff fc5a 	bl	80174d8 <_ZN9Registers11AddRegisterImEEbt>
	registers->SetRegisterAsSingle(REG_GEN_PERIOD);
 8017c24:	f240 4104 	movw	r1, #1028	; 0x404
 8017c28:	6820      	ldr	r0, [r4, #0]
 8017c2a:	f002 f870 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_PERIOD, &GeneratorSemaphore);
 8017c2e:	462a      	mov	r2, r5
 8017c30:	f240 4104 	movw	r1, #1028	; 0x404
 8017c34:	6820      	ldr	r0, [r4, #0]
 8017c36:	f002 f84c 	bl	8019cd2 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<uint32_t>(REG_GEN_PERIOD, &period_ms);
 8017c3a:	4622      	mov	r2, r4
 8017c3c:	f852 0b18 	ldr.w	r0, [r2], #24
 8017c40:	f240 4104 	movw	r1, #1028	; 0x404
 8017c44:	f7ff fd9e 	bl	8017784 <_ZN9Registers18AddRegisterPointerImEEbtPT_>
	registers->AddRegister<uint8_t>(REG_GEN_NB_MODULES);
 8017c48:	f240 4105 	movw	r1, #1029	; 0x405
 8017c4c:	6820      	ldr	r0, [r4, #0]
 8017c4e:	f7f7 f98f 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_GEN_NB_MODULES);
 8017c52:	f240 4105 	movw	r1, #1029	; 0x405
 8017c56:	6820      	ldr	r0, [r4, #0]
 8017c58:	f002 f859 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddReadCallback<uint8_t>(REG_GEN_NB_MODULES, (void*) this,
 8017c5c:	4b67      	ldr	r3, [pc, #412]	; (8017dfc <_ZN15MotionGenerator12AddRegistersEv+0x2bc>)
 8017c5e:	4622      	mov	r2, r4
 8017c60:	f240 4105 	movw	r1, #1029	; 0x405
 8017c64:	6820      	ldr	r0, [r4, #0]
 8017c66:	f7ff fc9f 	bl	80175a8 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE>
	registers->AddWriteCallback<uint8_t>(REG_GEN_NB_MODULES, (void*) this,
 8017c6a:	4b65      	ldr	r3, [pc, #404]	; (8017e00 <_ZN15MotionGenerator12AddRegistersEv+0x2c0>)
 8017c6c:	4622      	mov	r2, r4
 8017c6e:	f240 4105 	movw	r1, #1029	; 0x405
 8017c72:	6820      	ldr	r0, [r4, #0]
 8017c74:	f7f7 fa52 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<float>(REG_GEN_GENERATOR_OFFSET);
 8017c78:	f240 4106 	movw	r1, #1030	; 0x406
 8017c7c:	6820      	ldr	r0, [r4, #0]
 8017c7e:	f7ff fbc3 	bl	8017408 <_ZN9Registers11AddRegisterIfEEbt>
	registers->SetRegisterAsArray(REG_GEN_GENERATOR_OFFSET, 2);
 8017c82:	2202      	movs	r2, #2
 8017c84:	f240 4106 	movw	r1, #1030	; 0x406
 8017c88:	6820      	ldr	r0, [r4, #0]
 8017c8a:	f002 f860 	bl	8019d4e <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<float>(REG_GEN_GENERATOR_OFFSET, (void*) this,
 8017c8e:	4b5d      	ldr	r3, [pc, #372]	; (8017e04 <_ZN15MotionGenerator12AddRegistersEv+0x2c4>)
 8017c90:	4622      	mov	r2, r4
 8017c92:	f240 4106 	movw	r1, #1030	; 0x406
 8017c96:	6820      	ldr	r0, [r4, #0]
 8017c98:	f7ff fe58 	bl	801794c <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_GEN_RESET_GENERATOR_OFFSETS);
 8017c9c:	f240 4107 	movw	r1, #1031	; 0x407
 8017ca0:	6820      	ldr	r0, [r4, #0]
 8017ca2:	f7f7 f965 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_GEN_RESET_GENERATOR_OFFSETS);
 8017ca6:	f240 4107 	movw	r1, #1031	; 0x407
 8017caa:	6820      	ldr	r0, [r4, #0]
 8017cac:	f002 f82f 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_GEN_RESET_GENERATOR_OFFSETS, (void*) this,
 8017cb0:	4b55      	ldr	r3, [pc, #340]	; (8017e08 <_ZN15MotionGenerator12AddRegistersEv+0x2c8>)
 8017cb2:	4622      	mov	r2, r4
 8017cb4:	f240 4107 	movw	r1, #1031	; 0x407
 8017cb8:	6820      	ldr	r0, [r4, #0]
 8017cba:	f7f7 fa2f 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<float>(REG_GEN_POSITION_OFFSET);
 8017cbe:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8017cc2:	6820      	ldr	r0, [r4, #0]
 8017cc4:	f7ff fba0 	bl	8017408 <_ZN9Registers11AddRegisterIfEEbt>
	registers->SetRegisterAsArray(REG_GEN_POSITION_OFFSET, 2);
 8017cc8:	2202      	movs	r2, #2
 8017cca:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8017cce:	6820      	ldr	r0, [r4, #0]
 8017cd0:	f002 f83d 	bl	8019d4e <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<float>(REG_GEN_POSITION_OFFSET, (void*) this,
 8017cd4:	4b4d      	ldr	r3, [pc, #308]	; (8017e0c <_ZN15MotionGenerator12AddRegistersEv+0x2cc>)
 8017cd6:	4622      	mov	r2, r4
 8017cd8:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8017cdc:	6820      	ldr	r0, [r4, #0]
 8017cde:	f7ff fe35 	bl	801794c <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_GEN_POSITION_OFFSET);
 8017ce2:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8017ce6:	6820      	ldr	r0, [r4, #0]
 8017ce8:	f7f7 f942 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_GEN_POSITION_OFFSET);
 8017cec:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8017cf0:	6820      	ldr	r0, [r4, #0]
 8017cf2:	f002 f80c 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_GEN_POSITION_OFFSET, (void*) this,
 8017cf6:	4b46      	ldr	r3, [pc, #280]	; (8017e10 <_ZN15MotionGenerator12AddRegistersEv+0x2d0>)
 8017cf8:	4622      	mov	r2, r4
 8017cfa:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8017cfe:	6820      	ldr	r0, [r4, #0]
 8017d00:	f7f7 fa0c 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<float>(REG_GEN_MODULE_LENGTH);
 8017d04:	f240 410a 	movw	r1, #1034	; 0x40a
 8017d08:	6820      	ldr	r0, [r4, #0]
 8017d0a:	f7ff fb7d 	bl	8017408 <_ZN9Registers11AddRegisterIfEEbt>
	registers->SetRegisterAsSingle(REG_GEN_MODULE_LENGTH);
 8017d0e:	f240 410a 	movw	r1, #1034	; 0x40a
 8017d12:	6820      	ldr	r0, [r4, #0]
 8017d14:	f001 fffb 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_MODULE_LENGTH, &GeneratorSemaphore);
 8017d18:	462a      	mov	r2, r5
 8017d1a:	f240 410a 	movw	r1, #1034	; 0x40a
 8017d1e:	6820      	ldr	r0, [r4, #0]
 8017d20:	f001 ffd7 	bl	8019cd2 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_MODULE_LENGTH, &module_length);
 8017d24:	4622      	mov	r2, r4
 8017d26:	f852 0b20 	ldr.w	r0, [r2], #32
 8017d2a:	f240 410a 	movw	r1, #1034	; 0x40a
 8017d2e:	f7ff fe8d 	bl	8017a4c <_ZN9Registers18AddRegisterPointerIfEEbtPT_>
	registers->AddRegister<float>(REG_GEN_AMPLITUDE);
 8017d32:	f240 410b 	movw	r1, #1035	; 0x40b
 8017d36:	6820      	ldr	r0, [r4, #0]
 8017d38:	f7ff fb66 	bl	8017408 <_ZN9Registers11AddRegisterIfEEbt>
	registers->SetRegisterAsSingle(REG_GEN_AMPLITUDE);
 8017d3c:	f240 410b 	movw	r1, #1035	; 0x40b
 8017d40:	6820      	ldr	r0, [r4, #0]
 8017d42:	f001 ffe4 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_AMPLITUDE, &GeneratorSemaphore);
 8017d46:	462a      	mov	r2, r5
 8017d48:	f240 410b 	movw	r1, #1035	; 0x40b
 8017d4c:	6820      	ldr	r0, [r4, #0]
 8017d4e:	f001 ffc0 	bl	8019cd2 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_AMPLITUDE, &amplitude);
 8017d52:	4622      	mov	r2, r4
 8017d54:	f852 0b3c 	ldr.w	r0, [r2], #60
 8017d58:	f240 410b 	movw	r1, #1035	; 0x40b
 8017d5c:	f7ff fe76 	bl	8017a4c <_ZN9Registers18AddRegisterPointerIfEEbtPT_>
	registers->AddRegister<float>(REG_GEN_FREQUENCY);
 8017d60:	f240 410c 	movw	r1, #1036	; 0x40c
 8017d64:	6820      	ldr	r0, [r4, #0]
 8017d66:	f7ff fb4f 	bl	8017408 <_ZN9Registers11AddRegisterIfEEbt>
	registers->SetRegisterAsSingle(REG_GEN_FREQUENCY);
 8017d6a:	f240 410c 	movw	r1, #1036	; 0x40c
 8017d6e:	6820      	ldr	r0, [r4, #0]
 8017d70:	f001 ffcd 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_FREQUENCY, &GeneratorSemaphore);
 8017d74:	462a      	mov	r2, r5
 8017d76:	f240 410c 	movw	r1, #1036	; 0x40c
 8017d7a:	6820      	ldr	r0, [r4, #0]
 8017d7c:	f001 ffa9 	bl	8019cd2 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_FREQUENCY, &frequency);
 8017d80:	4622      	mov	r2, r4
 8017d82:	f852 0b40 	ldr.w	r0, [r2], #64
 8017d86:	f240 410c 	movw	r1, #1036	; 0x40c
 8017d8a:	f7ff fe5f 	bl	8017a4c <_ZN9Registers18AddRegisterPointerIfEEbtPT_>
	registers->AddRegister<float>(REG_GEN_WAVELENGTH_INVERSE);
 8017d8e:	f240 410d 	movw	r1, #1037	; 0x40d
 8017d92:	6820      	ldr	r0, [r4, #0]
 8017d94:	f7ff fb38 	bl	8017408 <_ZN9Registers11AddRegisterIfEEbt>
	registers->SetRegisterAsSingle(REG_GEN_WAVELENGTH_INVERSE);
 8017d98:	f240 410d 	movw	r1, #1037	; 0x40d
 8017d9c:	6820      	ldr	r0, [r4, #0]
 8017d9e:	f001 ffb6 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_WAVELENGTH_INVERSE, &GeneratorSemaphore);
 8017da2:	462a      	mov	r2, r5
 8017da4:	f240 410d 	movw	r1, #1037	; 0x40d
 8017da8:	6820      	ldr	r0, [r4, #0]
 8017daa:	f001 ff92 	bl	8019cd2 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_WAVELENGTH_INVERSE, &wavelength_inverse);
 8017dae:	4622      	mov	r2, r4
 8017db0:	f852 0b44 	ldr.w	r0, [r2], #68
 8017db4:	f240 410d 	movw	r1, #1037	; 0x40d
 8017db8:	f7ff fe48 	bl	8017a4c <_ZN9Registers18AddRegisterPointerIfEEbtPT_>
	registers->AddRegister<float>(REG_GEN_PHASE);
 8017dbc:	f240 410e 	movw	r1, #1038	; 0x40e
 8017dc0:	6820      	ldr	r0, [r4, #0]
 8017dc2:	f7ff fb21 	bl	8017408 <_ZN9Registers11AddRegisterIfEEbt>
	registers->SetRegisterAsSingle(REG_GEN_PHASE);
 8017dc6:	f240 410e 	movw	r1, #1038	; 0x40e
 8017dca:	6820      	ldr	r0, [r4, #0]
 8017dcc:	f001 ff9f 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_GEN_PHASE, &GeneratorSemaphore);
 8017dd0:	462a      	mov	r2, r5
 8017dd2:	f240 410e 	movw	r1, #1038	; 0x40e
 8017dd6:	6820      	ldr	r0, [r4, #0]
 8017dd8:	f001 ff7b 	bl	8019cd2 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_GEN_PHASE, &phase);
 8017ddc:	4622      	mov	r2, r4
 8017dde:	f852 0b48 	ldr.w	r0, [r2], #72
 8017de2:	f240 410e 	movw	r1, #1038	; 0x40e
 8017de6:	f7ff fe31 	bl	8017a4c <_ZN9Registers18AddRegisterPointerIfEEbtPT_>
}
 8017dea:	bd38      	pop	{r3, r4, r5, pc}
 8017dec:	08016fbd 	.word	0x08016fbd
 8017df0:	08016fc7 	.word	0x08016fc7
 8017df4:	08016fdd 	.word	0x08016fdd
 8017df8:	08017105 	.word	0x08017105
 8017dfc:	08017003 	.word	0x08017003
 8017e00:	080173fd 	.word	0x080173fd
 8017e04:	0801716f 	.word	0x0801716f
 8017e08:	0801703d 	.word	0x0801703d
 8017e0c:	080171fb 	.word	0x080171fb
 8017e10:	08017029 	.word	0x08017029

08017e14 <_ZN21CommunicationProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
	}
	*success = false;
	return 0;
}

MessageHeader CommunicationProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> data, uint16_t* index, bool* success) {*success = false; MessageHeader empty_message; return empty_message;}
 8017e14:	2200      	movs	r2, #0
 8017e16:	9901      	ldr	r1, [sp, #4]
 8017e18:	700a      	strb	r2, [r1, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017e1a:	6042      	str	r2, [r0, #4]
 8017e1c:	6082      	str	r2, [r0, #8]
 8017e1e:	60c2      	str	r2, [r0, #12]
 8017e20:	4770      	bx	lr

08017e22 <_ZN21CommunicationProtocol17ActivateReceptionEh>:
HAL_StatusTypeDef CommunicationProtocol::ActivateReception(uint8_t ID) {return HAL_ERROR;}
 8017e22:	2001      	movs	r0, #1
 8017e24:	4770      	bx	lr

08017e26 <_ZN21CommunicationProtocol4SendE13MessageHeader>:
HAL_StatusTypeDef CommunicationProtocol::Send(MessageHeader message) {return HAL_ERROR;}
 8017e26:	2001      	movs	r0, #1
 8017e28:	4770      	bx	lr

08017e2a <_ZN21CommunicationProtocol5GetIDEPvPb>:
uint8_t CommunicationProtocol::GetID(void* pointer, bool* success) {*success = false; return 0;}
 8017e2a:	2000      	movs	r0, #0
 8017e2c:	7010      	strb	r0, [r2, #0]
 8017e2e:	4770      	bx	lr

08017e30 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>:
uint8_t CommunicationProtocol::GetInterfaceIndex(uint8_t ID_, bool* success) {
 8017e30:	b410      	push	{r4}
	for (uint8_t ID : interfaces_id) {
 8017e32:	6903      	ldr	r3, [r0, #16]
      : _M_current(__i) { }
 8017e34:	6944      	ldr	r4, [r0, #20]
	uint8_t counter = 0;
 8017e36:	2000      	movs	r0, #0
 8017e38:	e003      	b.n	8017e42 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x12>
		counter++;
 8017e3a:	3001      	adds	r0, #1
 8017e3c:	b2c0      	uxtb	r0, r0
	++_M_current;
 8017e3e:	f10c 0301 	add.w	r3, ip, #1
    { return __lhs.base() != __rhs.base(); }
 8017e42:	469c      	mov	ip, r3
	for (uint8_t ID : interfaces_id) {
 8017e44:	429c      	cmp	r4, r3
 8017e46:	d005      	beq.n	8017e54 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x24>
 8017e48:	781b      	ldrb	r3, [r3, #0]
		if (ID == ID_) {
 8017e4a:	428b      	cmp	r3, r1
 8017e4c:	d1f5      	bne.n	8017e3a <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0xa>
			*success = true;
 8017e4e:	2301      	movs	r3, #1
 8017e50:	7013      	strb	r3, [r2, #0]
			return counter;
 8017e52:	e001      	b.n	8017e58 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x28>
	*success = false;
 8017e54:	2000      	movs	r0, #0
 8017e56:	7010      	strb	r0, [r2, #0]
}
 8017e58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e5c:	4770      	bx	lr

08017e5e <_ZN21CommunicationProtocol15InterfaceExistsEh>:
bool CommunicationProtocol::InterfaceExists(uint8_t ID) {
 8017e5e:	b500      	push	{lr}
 8017e60:	b083      	sub	sp, #12
	GetInterfaceIndex(ID, &success);
 8017e62:	f10d 0207 	add.w	r2, sp, #7
 8017e66:	f7ff ffe3 	bl	8017e30 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
}
 8017e6a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8017e6e:	b003      	add	sp, #12
 8017e70:	f85d fb04 	ldr.w	pc, [sp], #4

08017e74 <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>:

uint8_t CommunicationProtocol::GetIDFromIndex(uint8_t index, bool* success) {
 8017e74:	b410      	push	{r4}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017e76:	6943      	ldr	r3, [r0, #20]
 8017e78:	6904      	ldr	r4, [r0, #16]
 8017e7a:	1b1b      	subs	r3, r3, r4
	if (index < interfaces_id.size()) {
 8017e7c:	4299      	cmp	r1, r3
 8017e7e:	d206      	bcs.n	8017e8e <_ZN21CommunicationProtocol14GetIDFromIndexEhPb+0x1a>
		*success = true;
 8017e80:	2301      	movs	r3, #1
 8017e82:	7013      	strb	r3, [r2, #0]
	return *(this->_M_impl._M_start + __n);
 8017e84:	6903      	ldr	r3, [r0, #16]
		return interfaces_id[index];
 8017e86:	5c58      	ldrb	r0, [r3, r1]
	} else {
		*success = false;
		return 0;
	}
}
 8017e88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e8c:	4770      	bx	lr
		*success = false;
 8017e8e:	2000      	movs	r0, #0
 8017e90:	7010      	strb	r0, [r2, #0]
		return 0;
 8017e92:	e7f9      	b.n	8017e88 <_ZN21CommunicationProtocol14GetIDFromIndexEhPb+0x14>

08017e94 <_ZN21CommunicationProtocol9GetBufferEhPb>:

std::vector<uint8_t>* CommunicationProtocol::GetBuffer(uint8_t ID, bool* success) {
 8017e94:	b538      	push	{r3, r4, r5, lr}
 8017e96:	4605      	mov	r5, r0
 8017e98:	4614      	mov	r4, r2
	uint8_t index = GetInterfaceIndex(ID, success);
 8017e9a:	f7ff ffc9 	bl	8017e30 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	if (*success)
 8017e9e:	7823      	ldrb	r3, [r4, #0]
 8017ea0:	b12b      	cbz	r3, 8017eae <_ZN21CommunicationProtocol9GetBufferEhPb+0x1a>
 8017ea2:	6a2b      	ldr	r3, [r5, #32]
 8017ea4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017ea8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		return &buffers[index];
	return NULL;
}
 8017eac:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
 8017eae:	2000      	movs	r0, #0
 8017eb0:	e7fc      	b.n	8017eac <_ZN21CommunicationProtocol9GetBufferEhPb+0x18>

08017eb2 <_ZN21CommunicationProtocol14GetBufferIndexEhPb>:

uint16_t* CommunicationProtocol::GetBufferIndex(uint8_t ID, bool* success) {
 8017eb2:	b538      	push	{r3, r4, r5, lr}
 8017eb4:	4605      	mov	r5, r0
 8017eb6:	4614      	mov	r4, r2
	uint8_t index = GetInterfaceIndex(ID, success);
 8017eb8:	f7ff ffba 	bl	8017e30 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	if (*success)
 8017ebc:	7823      	ldrb	r3, [r4, #0]
 8017ebe:	b11b      	cbz	r3, 8017ec8 <_ZN21CommunicationProtocol14GetBufferIndexEhPb+0x16>
 8017ec0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8017ec2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
		return &buffers_index[index];
	return NULL;
}
 8017ec6:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
 8017ec8:	2000      	movs	r0, #0
 8017eca:	e7fc      	b.n	8017ec6 <_ZN21CommunicationProtocol14GetBufferIndexEhPb+0x14>

08017ecc <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>:

void CommunicationProtocol::SetProtocolPayloadMaxLength(uint16_t length) {
	max_payload_length = length;
 8017ecc:	8381      	strh	r1, [r0, #28]
}
 8017ece:	4770      	bx	lr

08017ed0 <_ZN21CommunicationProtocol27GetProtocolPayloadMaxLengthEv>:

uint16_t CommunicationProtocol::GetProtocolPayloadMaxLength(void) {
	return max_payload_length;
}
 8017ed0:	8b80      	ldrh	r0, [r0, #28]
 8017ed2:	4770      	bx	lr

08017ed4 <_ZNSt6vectorIhSaIhEE7reserveEj>:
    vector<_Tp, _Alloc>::
 8017ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__n > this->max_size())
 8017ed6:	1e0d      	subs	r5, r1, #0
 8017ed8:	db06      	blt.n	8017ee8 <_ZNSt6vectorIhSaIhEE7reserveEj+0x14>
 8017eda:	4604      	mov	r4, r0
      { return size_type(this->_M_impl._M_end_of_storage
 8017edc:	6883      	ldr	r3, [r0, #8]
			 - this->_M_impl._M_start); }
 8017ede:	6802      	ldr	r2, [r0, #0]
 8017ee0:	1a9b      	subs	r3, r3, r2
      if (this->capacity() < __n)
 8017ee2:	42ab      	cmp	r3, r5
 8017ee4:	d303      	bcc.n	8017eee <_ZNSt6vectorIhSaIhEE7reserveEj+0x1a>
    }
 8017ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__throw_length_error(__N("vector::reserve"));
 8017ee8:	4812      	ldr	r0, [pc, #72]	; (8017f34 <_ZNSt6vectorIhSaIhEE7reserveEj+0x60>)
 8017eea:	f003 f905 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017eee:	6847      	ldr	r7, [r0, #4]
 8017ef0:	1abf      	subs	r7, r7, r2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017ef2:	b1c5      	cbz	r5, 8017f26 <_ZNSt6vectorIhSaIhEE7reserveEj+0x52>
	if (__n > this->_M_max_size())
 8017ef4:	2d00      	cmp	r5, #0
 8017ef6:	db14      	blt.n	8017f22 <_ZNSt6vectorIhSaIhEE7reserveEj+0x4e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8017ef8:	4628      	mov	r0, r5
 8017efa:	f003 f849 	bl	801af90 <_Znwj>
 8017efe:	4606      	mov	r6, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8017f00:	6821      	ldr	r1, [r4, #0]
 8017f02:	6862      	ldr	r2, [r4, #4]
      ptrdiff_t __count = __last - __first;
 8017f04:	1a52      	subs	r2, r2, r1
      if (__count > 0)
 8017f06:	2a00      	cmp	r2, #0
 8017f08:	dc0f      	bgt.n	8017f2a <_ZNSt6vectorIhSaIhEE7reserveEj+0x56>
	  _M_deallocate(this->_M_impl._M_start,
 8017f0a:	6820      	ldr	r0, [r4, #0]
			this->_M_impl._M_end_of_storage
 8017f0c:	68a1      	ldr	r1, [r4, #8]
			- this->_M_impl._M_start);
 8017f0e:	1a09      	subs	r1, r1, r0
	if (__p)
 8017f10:	b108      	cbz	r0, 8017f16 <_ZNSt6vectorIhSaIhEE7reserveEj+0x42>
	::operator delete(__p
 8017f12:	f003 f827 	bl	801af64 <_ZdlPvj>
	  this->_M_impl._M_start = __tmp;
 8017f16:	6026      	str	r6, [r4, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 8017f18:	4437      	add	r7, r6
 8017f1a:	6067      	str	r7, [r4, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017f1c:	4435      	add	r5, r6
 8017f1e:	60a5      	str	r5, [r4, #8]
    }
 8017f20:	e7e1      	b.n	8017ee6 <_ZNSt6vectorIhSaIhEE7reserveEj+0x12>
	  std::__throw_bad_alloc();
 8017f22:	f003 f8e3 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017f26:	2600      	movs	r6, #0
 8017f28:	e7ea      	b.n	8017f00 <_ZNSt6vectorIhSaIhEE7reserveEj+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8017f2a:	4630      	mov	r0, r6
 8017f2c:	f003 fcee 	bl	801b90c <memmove>
 8017f30:	e7eb      	b.n	8017f0a <_ZNSt6vectorIhSaIhEE7reserveEj+0x36>
 8017f32:	bf00      	nop
 8017f34:	0801c064 	.word	0x0801c064

08017f38 <_ZN21CommunicationProtocol14AddInterfaceIDEh>:
void CommunicationProtocol::AddInterfaceID(uint8_t ID_) {
 8017f38:	b500      	push	{lr}
 8017f3a:	b083      	sub	sp, #12
 8017f3c:	f88d 1007 	strb.w	r1, [sp, #7]
	interfaces_id.push_back(ID_);
 8017f40:	3010      	adds	r0, #16
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8017f42:	6841      	ldr	r1, [r0, #4]
 8017f44:	6883      	ldr	r3, [r0, #8]
 8017f46:	4299      	cmp	r1, r3
 8017f48:	d008      	beq.n	8017f5c <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x24>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017f4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017f4e:	700b      	strb	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 8017f50:	6843      	ldr	r3, [r0, #4]
 8017f52:	3301      	adds	r3, #1
 8017f54:	6043      	str	r3, [r0, #4]
}
 8017f56:	b003      	add	sp, #12
 8017f58:	f85d fb04 	ldr.w	pc, [sp], #4
	  _M_realloc_insert(end(), __x);
 8017f5c:	f10d 0207 	add.w	r2, sp, #7
 8017f60:	f7e9 f9e2 	bl	8001328 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 8017f64:	e7f7      	b.n	8017f56 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x1e>
	...

08017f68 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8017f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f6c:	b083      	sub	sp, #12
 8017f6e:	4688      	mov	r8, r1
 8017f70:	4616      	mov	r6, r2
 8017f72:	2301      	movs	r3, #1
 8017f74:	9300      	str	r3, [sp, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017f76:	6842      	ldr	r2, [r0, #4]
 8017f78:	6803      	ldr	r3, [r0, #0]
 8017f7a:	1ad3      	subs	r3, r2, r3
	if (max_size() - size() < __n)
 8017f7c:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8017f80:	ebb1 0f63 	cmp.w	r1, r3, asr #1
 8017f84:	d03d      	beq.n	8018002 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x9a>
 8017f86:	4604      	mov	r4, r0
 8017f88:	105d      	asrs	r5, r3, #1
	const size_type __len = size() + (std::max)(size(), __n);
 8017f8a:	9501      	str	r5, [sp, #4]
      if (__a < __b)
 8017f8c:	2d00      	cmp	r5, #0
 8017f8e:	d03b      	beq.n	8018008 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0xa0>
      return __a;
 8017f90:	ab01      	add	r3, sp, #4
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	441d      	add	r5, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017f96:	6823      	ldr	r3, [r4, #0]
 8017f98:	1ad2      	subs	r2, r2, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017f9a:	ebb5 0f62 	cmp.w	r5, r2, asr #1
 8017f9e:	d335      	bcc.n	801800c <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0xa4>
 8017fa0:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8017fa4:	d235      	bcs.n	8018012 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0xaa>
      pointer __old_start = this->_M_impl._M_start;
 8017fa6:	f8d4 9000 	ldr.w	r9, [r4]
      pointer __old_finish = this->_M_impl._M_finish;
 8017faa:	f8d4 a004 	ldr.w	sl, [r4, #4]
    { return __lhs.base() - __rhs.base(); }
 8017fae:	eba8 0b09 	sub.w	fp, r8, r9
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017fb2:	b39d      	cbz	r5, 801801c <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0xb4>
	if (__n > this->_M_max_size())
 8017fb4:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8017fb8:	d22e      	bcs.n	8018018 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0xb0>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8017fba:	0068      	lsls	r0, r5, #1
 8017fbc:	f002 ffe8 	bl	801af90 <_Znwj>
 8017fc0:	4607      	mov	r7, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017fc2:	8833      	ldrh	r3, [r6, #0]
 8017fc4:	f827 300b 	strh.w	r3, [r7, fp]
      ptrdiff_t __count = __last - __first;
 8017fc8:	eba8 0609 	sub.w	r6, r8, r9
      if (__count > 0)
 8017fcc:	2e00      	cmp	r6, #0
 8017fce:	dc27      	bgt.n	8018020 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0xb8>
      return __result + __count;
 8017fd0:	443e      	add	r6, r7
	      ++__new_finish;
 8017fd2:	3602      	adds	r6, #2
      ptrdiff_t __count = __last - __first;
 8017fd4:	ebaa 0a08 	sub.w	sl, sl, r8
      if (__count > 0)
 8017fd8:	f1ba 0f00 	cmp.w	sl, #0
 8017fdc:	dc26      	bgt.n	801802c <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0xc4>
      return __result + __count;
 8017fde:	4456      	add	r6, sl
		    this->_M_impl._M_end_of_storage - __old_start);
 8017fe0:	68a1      	ldr	r1, [r4, #8]
 8017fe2:	eba1 0109 	sub.w	r1, r1, r9
	if (__p)
 8017fe6:	f1b9 0f00 	cmp.w	r9, #0
 8017fea:	d002      	beq.n	8017ff2 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x8a>
	::operator delete(__p
 8017fec:	4648      	mov	r0, r9
 8017fee:	f002 ffb9 	bl	801af64 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 8017ff2:	6027      	str	r7, [r4, #0]
      this->_M_impl._M_finish = __new_finish;
 8017ff4:	6066      	str	r6, [r4, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8017ff6:	eb07 0545 	add.w	r5, r7, r5, lsl #1
 8017ffa:	60a5      	str	r5, [r4, #8]
    }
 8017ffc:	b003      	add	sp, #12
 8017ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_length_error(__N(__s));
 8018002:	480d      	ldr	r0, [pc, #52]	; (8018038 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0xd0>)
 8018004:	f003 f878 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 8018008:	466b      	mov	r3, sp
 801800a:	e7c2      	b.n	8017f92 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x2a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801800c:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 8018010:	e7c9      	b.n	8017fa6 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x3e>
 8018012:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 8018016:	e7c6      	b.n	8017fa6 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x3e>
	  std::__throw_bad_alloc();
 8018018:	f003 f868 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801801c:	2700      	movs	r7, #0
 801801e:	e7d0      	b.n	8017fc2 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x5a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8018020:	4632      	mov	r2, r6
 8018022:	4649      	mov	r1, r9
 8018024:	4638      	mov	r0, r7
 8018026:	f003 fc71 	bl	801b90c <memmove>
 801802a:	e7d1      	b.n	8017fd0 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x68>
 801802c:	4652      	mov	r2, sl
 801802e:	4641      	mov	r1, r8
 8018030:	4630      	mov	r0, r6
 8018032:	f003 fc6b 	bl	801b90c <memmove>
 8018036:	e7d2      	b.n	8017fde <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x76>
 8018038:	0801bde4 	.word	0x0801bde4

0801803c <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 801803c:	b508      	push	{r3, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801803e:	6843      	ldr	r3, [r0, #4]
 8018040:	6882      	ldr	r2, [r0, #8]
 8018042:	4293      	cmp	r3, r2
 8018044:	d005      	beq.n	8018052 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x16>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8018046:	880a      	ldrh	r2, [r1, #0]
 8018048:	801a      	strh	r2, [r3, #0]
	    ++this->_M_impl._M_finish;
 801804a:	6843      	ldr	r3, [r0, #4]
 801804c:	3302      	adds	r3, #2
 801804e:	6043      	str	r3, [r0, #4]
      }
 8018050:	bd08      	pop	{r3, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8018052:	460a      	mov	r2, r1
 8018054:	4619      	mov	r1, r3
 8018056:	f7ff ff87 	bl	8017f68 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>
      }
 801805a:	e7f9      	b.n	8018050 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x14>

0801805c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801805c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018060:	b087      	sub	sp, #28
 8018062:	4692      	mov	sl, r2
 8018064:	2301      	movs	r3, #1
 8018066:	9304      	str	r3, [sp, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018068:	6843      	ldr	r3, [r0, #4]
 801806a:	6805      	ldr	r5, [r0, #0]
 801806c:	1b5d      	subs	r5, r3, r5
 801806e:	10ad      	asrs	r5, r5, #2
 8018070:	4a5a      	ldr	r2, [pc, #360]	; (80181dc <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x180>)
 8018072:	fb02 f505 	mul.w	r5, r2, r5
	if (max_size() - size() < __n)
 8018076:	4a5a      	ldr	r2, [pc, #360]	; (80181e0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x184>)
 8018078:	1b52      	subs	r2, r2, r5
 801807a:	2a00      	cmp	r2, #0
 801807c:	d05a      	beq.n	8018134 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xd8>
 801807e:	4606      	mov	r6, r0
	const size_type __len = size() + (std::max)(size(), __n);
 8018080:	9505      	str	r5, [sp, #20]
      if (__a < __b)
 8018082:	2d00      	cmp	r5, #0
 8018084:	d059      	beq.n	801813a <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xde>
      return __a;
 8018086:	aa05      	add	r2, sp, #20
 8018088:	6812      	ldr	r2, [r2, #0]
 801808a:	4415      	add	r5, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801808c:	6832      	ldr	r2, [r6, #0]
 801808e:	1a9b      	subs	r3, r3, r2
 8018090:	109b      	asrs	r3, r3, #2
 8018092:	4a52      	ldr	r2, [pc, #328]	; (80181dc <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x180>)
 8018094:	fb02 f303 	mul.w	r3, r2, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8018098:	429d      	cmp	r5, r3
 801809a:	d350      	bcc.n	801813e <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe2>
 801809c:	4b50      	ldr	r3, [pc, #320]	; (80181e0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x184>)
 801809e:	429d      	cmp	r5, r3
 80180a0:	d84f      	bhi.n	8018142 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe6>
      pointer __old_start = this->_M_impl._M_start;
 80180a2:	f8d6 b000 	ldr.w	fp, [r6]
      pointer __old_finish = this->_M_impl._M_finish;
 80180a6:	6877      	ldr	r7, [r6, #4]
 80180a8:	460c      	mov	r4, r1
 80180aa:	eba1 030b 	sub.w	r3, r1, fp
 80180ae:	4699      	mov	r9, r3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80180b0:	2d00      	cmp	r5, #0
 80180b2:	d04a      	beq.n	801814a <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xee>
	if (__n > this->_M_max_size())
 80180b4:	4b4a      	ldr	r3, [pc, #296]	; (80181e0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x184>)
 80180b6:	429d      	cmp	r5, r3
 80180b8:	d845      	bhi.n	8018146 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xea>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80180ba:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80180be:	0080      	lsls	r0, r0, #2
 80180c0:	f002 ff66 	bl	801af90 <_Znwj>
 80180c4:	4680      	mov	r8, r0
	  _Alloc_traits::construct(this->_M_impl,
 80180c6:	4648      	mov	r0, r9
 80180c8:	44c1      	add	r9, r8
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80180ca:	f8da 1004 	ldr.w	r1, [sl, #4]
 80180ce:	f8da 2000 	ldr.w	r2, [sl]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80180d2:	2300      	movs	r3, #0
 80180d4:	f848 3000 	str.w	r3, [r8, r0]
 80180d8:	f8c9 3004 	str.w	r3, [r9, #4]
 80180dc:	f8c9 3008 	str.w	r3, [r9, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80180e0:	1a8b      	subs	r3, r1, r2
 80180e2:	9301      	str	r3, [sp, #4]
 80180e4:	d036      	beq.n	8018154 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf8>
	if (__n > this->_M_max_size())
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	db32      	blt.n	8018150 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80180ea:	9801      	ldr	r0, [sp, #4]
 80180ec:	f002 ff50 	bl	801af90 <_Znwj>
	this->_M_impl._M_start = this->_M_allocate(__n);
 80180f0:	f8c9 0000 	str.w	r0, [r9]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80180f4:	f8c9 0004 	str.w	r0, [r9, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80180f8:	9b01      	ldr	r3, [sp, #4]
 80180fa:	4418      	add	r0, r3
 80180fc:	f8c9 0008 	str.w	r0, [r9, #8]
      : _M_current(__i) { }
 8018100:	f8da 3004 	ldr.w	r3, [sl, #4]
 8018104:	9302      	str	r3, [sp, #8]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8018106:	f8d9 2000 	ldr.w	r2, [r9]
 801810a:	9201      	str	r2, [sp, #4]
      return std::__niter_wrap(__result,
 801810c:	f8da 0000 	ldr.w	r0, [sl]
 8018110:	f7e9 fcd1 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8018114:	4682      	mov	sl, r0
 8018116:	9003      	str	r0, [sp, #12]
 8018118:	9802      	ldr	r0, [sp, #8]
 801811a:	f7e9 fccc 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 801811e:	4653      	mov	r3, sl
 8018120:	ebb0 0a0a 	subs.w	sl, r0, sl
 8018124:	d118      	bne.n	8018158 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xfc>
	  return __result + _Num;
 8018126:	9801      	ldr	r0, [sp, #4]
 8018128:	4450      	add	r0, sl
	this->_M_impl._M_finish =
 801812a:	f8c9 0004 	str.w	r0, [r9, #4]
      _ForwardIterator __cur = __result;
 801812e:	46c1      	mov	r9, r8
 8018130:	465b      	mov	r3, fp
 8018132:	e027      	b.n	8018184 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x128>
	  __throw_length_error(__N(__s));
 8018134:	482b      	ldr	r0, [pc, #172]	; (80181e4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x188>)
 8018136:	f002 ffdf 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 801813a:	aa04      	add	r2, sp, #16
 801813c:	e7a4      	b.n	8018088 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2c>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801813e:	4d28      	ldr	r5, [pc, #160]	; (80181e0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x184>)
 8018140:	e7af      	b.n	80180a2 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8018142:	4d27      	ldr	r5, [pc, #156]	; (80181e0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x184>)
 8018144:	e7ad      	b.n	80180a2 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
	  std::__throw_bad_alloc();
 8018146:	f002 ffd1 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801814a:	f04f 0800 	mov.w	r8, #0
 801814e:	e7ba      	b.n	80180c6 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x6a>
 8018150:	f002 ffcc 	bl	801b0ec <_ZSt17__throw_bad_allocv>
 8018154:	2000      	movs	r0, #0
 8018156:	e7cb      	b.n	80180f0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x94>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8018158:	4652      	mov	r2, sl
 801815a:	4619      	mov	r1, r3
 801815c:	9801      	ldr	r0, [sp, #4]
 801815e:	f003 fbd5 	bl	801b90c <memmove>
 8018162:	e7e0      	b.n	8018126 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xca>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8018164:	681a      	ldr	r2, [r3, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
 8018166:	f8c9 2000 	str.w	r2, [r9]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801816a:	685a      	ldr	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 801816c:	f8c9 2004 	str.w	r2, [r9, #4]
 8018170:	689a      	ldr	r2, [r3, #8]
 8018172:	f8c9 2008 	str.w	r2, [r9, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8018176:	2200      	movs	r2, #0
 8018178:	609a      	str	r2, [r3, #8]
 801817a:	605a      	str	r2, [r3, #4]
 801817c:	f843 2b0c 	str.w	r2, [r3], #12
      for (; __first != __last; ++__first, (void)++__cur)
 8018180:	f109 090c 	add.w	r9, r9, #12
 8018184:	429c      	cmp	r4, r3
 8018186:	d1ed      	bne.n	8018164 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x108>
	      ++__new_finish;
 8018188:	f109 090c 	add.w	r9, r9, #12
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 801818c:	e00f      	b.n	80181ae <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x152>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801818e:	6823      	ldr	r3, [r4, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
 8018190:	f8c9 3000 	str.w	r3, [r9]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8018194:	6863      	ldr	r3, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8018196:	f8c9 3004 	str.w	r3, [r9, #4]
 801819a:	68a3      	ldr	r3, [r4, #8]
 801819c:	f8c9 3008 	str.w	r3, [r9, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80181a0:	2300      	movs	r3, #0
 80181a2:	60a3      	str	r3, [r4, #8]
 80181a4:	6063      	str	r3, [r4, #4]
 80181a6:	f844 3b0c 	str.w	r3, [r4], #12
      for (; __first != __last; ++__first, (void)++__cur)
 80181aa:	f109 090c 	add.w	r9, r9, #12
 80181ae:	42a7      	cmp	r7, r4
 80181b0:	d1ed      	bne.n	801818e <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x132>
		    this->_M_impl._M_end_of_storage - __old_start);
 80181b2:	68b1      	ldr	r1, [r6, #8]
 80181b4:	eba1 010b 	sub.w	r1, r1, fp
	if (__p)
 80181b8:	f1bb 0f00 	cmp.w	fp, #0
 80181bc:	d002      	beq.n	80181c4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x168>
	::operator delete(__p
 80181be:	4658      	mov	r0, fp
 80181c0:	f002 fed0 	bl	801af64 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 80181c4:	f8c6 8000 	str.w	r8, [r6]
      this->_M_impl._M_finish = __new_finish;
 80181c8:	f8c6 9004 	str.w	r9, [r6, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80181cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80181d0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80181d4:	60b5      	str	r5, [r6, #8]
    }
 80181d6:	b007      	add	sp, #28
 80181d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181dc:	aaaaaaab 	.word	0xaaaaaaab
 80181e0:	0aaaaaaa 	.word	0x0aaaaaaa
 80181e4:	0801bde4 	.word	0x0801bde4

080181e8 <_ZN21CommunicationProtocol18AddInterfaceBufferEv>:
void CommunicationProtocol::AddInterfaceBuffer() {
 80181e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80181ec:	b089      	sub	sp, #36	; 0x24
 80181ee:	4604      	mov	r4, r0
	buffers_index.push_back(0);
 80181f0:	2600      	movs	r6, #0
 80181f2:	f8ad 601e 	strh.w	r6, [sp, #30]
      { emplace_back(std::move(__x)); }
 80181f6:	f10d 011e 	add.w	r1, sp, #30
 80181fa:	302c      	adds	r0, #44	; 0x2c
 80181fc:	f7ff ff1e 	bl	801803c <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018200:	9604      	str	r6, [sp, #16]
 8018202:	9605      	str	r6, [sp, #20]
 8018204:	9606      	str	r6, [sp, #24]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018206:	f44f 7080 	mov.w	r0, #256	; 0x100
 801820a:	f002 fec1 	bl	801af90 <_Znwj>
	this->_M_impl._M_start = this->_M_allocate(__n);
 801820e:	9004      	str	r0, [sp, #16]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8018210:	9005      	str	r0, [sp, #20]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018212:	f500 7580 	add.w	r5, r0, #256	; 0x100
 8018216:	9506      	str	r5, [sp, #24]
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8018218:	f44f 7280 	mov.w	r2, #256	; 0x100
 801821c:	4631      	mov	r1, r6
 801821e:	f003 fb8f 	bl	801b940 <memset>
	this->_M_impl._M_finish =
 8018222:	9505      	str	r5, [sp, #20]
	buffers.push_back(buffer);
 8018224:	f104 0620 	add.w	r6, r4, #32
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8018228:	6875      	ldr	r5, [r6, #4]
 801822a:	68b3      	ldr	r3, [r6, #8]
 801822c:	429d      	cmp	r5, r3
 801822e:	d079      	beq.n	8018324 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x13c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018230:	9805      	ldr	r0, [sp, #20]
 8018232:	9f04      	ldr	r7, [sp, #16]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018234:	2300      	movs	r3, #0
 8018236:	602b      	str	r3, [r5, #0]
 8018238:	606b      	str	r3, [r5, #4]
 801823a:	60ab      	str	r3, [r5, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801823c:	1bc7      	subs	r7, r0, r7
 801823e:	d069      	beq.n	8018314 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x12c>
	if (__n > this->_M_max_size())
 8018240:	429f      	cmp	r7, r3
 8018242:	db65      	blt.n	8018310 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x128>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018244:	4638      	mov	r0, r7
 8018246:	f002 fea3 	bl	801af90 <_Znwj>
	this->_M_impl._M_start = this->_M_allocate(__n);
 801824a:	6028      	str	r0, [r5, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801824c:	6068      	str	r0, [r5, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801824e:	4438      	add	r0, r7
 8018250:	60a8      	str	r0, [r5, #8]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8018252:	f8d5 9000 	ldr.w	r9, [r5]
      return std::__niter_wrap(__result,
 8018256:	9804      	ldr	r0, [sp, #16]
 8018258:	f7e9 fc2d 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 801825c:	4680      	mov	r8, r0
 801825e:	9805      	ldr	r0, [sp, #20]
 8018260:	f7e9 fc29 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8018264:	ebb0 0708 	subs.w	r7, r0, r8
 8018268:	d156      	bne.n	8018318 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x130>
	  return __result + _Num;
 801826a:	444f      	add	r7, r9
	this->_M_impl._M_finish =
 801826c:	606f      	str	r7, [r5, #4]
	    ++this->_M_impl._M_finish;
 801826e:	6873      	ldr	r3, [r6, #4]
 8018270:	330c      	adds	r3, #12
 8018272:	6073      	str	r3, [r6, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018274:	2600      	movs	r6, #0
 8018276:	9601      	str	r6, [sp, #4]
 8018278:	9602      	str	r6, [sp, #8]
 801827a:	9603      	str	r6, [sp, #12]
 801827c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018280:	f002 fe86 	bl	801af90 <_Znwj>
	this->_M_impl._M_start = this->_M_allocate(__n);
 8018284:	9001      	str	r0, [sp, #4]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8018286:	9002      	str	r0, [sp, #8]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018288:	f500 7580 	add.w	r5, r0, #256	; 0x100
 801828c:	9503      	str	r5, [sp, #12]
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 801828e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018292:	4631      	mov	r1, r6
 8018294:	f003 fb54 	bl	801b940 <memset>
	this->_M_impl._M_finish =
 8018298:	9502      	str	r5, [sp, #8]
	buffers_to_transfer.push_back(data_to_send);
 801829a:	3404      	adds	r4, #4
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801829c:	6865      	ldr	r5, [r4, #4]
 801829e:	68a3      	ldr	r3, [r4, #8]
 80182a0:	429d      	cmp	r5, r3
 80182a2:	d04f      	beq.n	8018344 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x15c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80182a4:	9802      	ldr	r0, [sp, #8]
 80182a6:	9e01      	ldr	r6, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80182a8:	2300      	movs	r3, #0
 80182aa:	602b      	str	r3, [r5, #0]
 80182ac:	606b      	str	r3, [r5, #4]
 80182ae:	60ab      	str	r3, [r5, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80182b0:	1b86      	subs	r6, r0, r6
 80182b2:	d03f      	beq.n	8018334 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x14c>
	if (__n > this->_M_max_size())
 80182b4:	429e      	cmp	r6, r3
 80182b6:	db3b      	blt.n	8018330 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x148>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80182b8:	4630      	mov	r0, r6
 80182ba:	f002 fe69 	bl	801af90 <_Znwj>
	this->_M_impl._M_start = this->_M_allocate(__n);
 80182be:	6028      	str	r0, [r5, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80182c0:	6068      	str	r0, [r5, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80182c2:	4430      	add	r0, r6
 80182c4:	60a8      	str	r0, [r5, #8]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80182c6:	f8d5 8000 	ldr.w	r8, [r5]
      return std::__niter_wrap(__result,
 80182ca:	9801      	ldr	r0, [sp, #4]
 80182cc:	f7e9 fbf3 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80182d0:	4607      	mov	r7, r0
 80182d2:	9802      	ldr	r0, [sp, #8]
 80182d4:	f7e9 fbef 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 80182d8:	1bc6      	subs	r6, r0, r7
 80182da:	d12d      	bne.n	8018338 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x150>
	  return __result + _Num;
 80182dc:	4446      	add	r6, r8
	this->_M_impl._M_finish =
 80182de:	606e      	str	r6, [r5, #4]
	    ++this->_M_impl._M_finish;
 80182e0:	6863      	ldr	r3, [r4, #4]
 80182e2:	330c      	adds	r3, #12
 80182e4:	6063      	str	r3, [r4, #4]
 80182e6:	6860      	ldr	r0, [r4, #4]
	buffers_to_transfer.back().reserve(BUFFER_SIZE);
 80182e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80182ec:	380c      	subs	r0, #12
 80182ee:	f7ff fdf1 	bl	8017ed4 <_ZNSt6vectorIhSaIhEE7reserveEj>
	_M_deallocate(_M_impl._M_start,
 80182f2:	9801      	ldr	r0, [sp, #4]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80182f4:	9903      	ldr	r1, [sp, #12]
 80182f6:	1a09      	subs	r1, r1, r0
	if (__p)
 80182f8:	b108      	cbz	r0, 80182fe <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x116>
	::operator delete(__p
 80182fa:	f002 fe33 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80182fe:	9804      	ldr	r0, [sp, #16]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8018300:	9906      	ldr	r1, [sp, #24]
 8018302:	1a09      	subs	r1, r1, r0
	if (__p)
 8018304:	b108      	cbz	r0, 801830a <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x122>
 8018306:	f002 fe2d 	bl	801af64 <_ZdlPvj>
}
 801830a:	b009      	add	sp, #36	; 0x24
 801830c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	  std::__throw_bad_alloc();
 8018310:	f002 feec 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018314:	2000      	movs	r0, #0
 8018316:	e798      	b.n	801824a <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x62>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8018318:	463a      	mov	r2, r7
 801831a:	4641      	mov	r1, r8
 801831c:	4648      	mov	r0, r9
 801831e:	f003 faf5 	bl	801b90c <memmove>
 8018322:	e7a2      	b.n	801826a <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x82>
	  _M_realloc_insert(end(), __x);
 8018324:	aa04      	add	r2, sp, #16
 8018326:	4629      	mov	r1, r5
 8018328:	4630      	mov	r0, r6
 801832a:	f7ff fe97 	bl	801805c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 801832e:	e7a1      	b.n	8018274 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x8c>
 8018330:	f002 fedc 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018334:	2000      	movs	r0, #0
 8018336:	e7c2      	b.n	80182be <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0xd6>
 8018338:	4632      	mov	r2, r6
 801833a:	4639      	mov	r1, r7
 801833c:	4640      	mov	r0, r8
 801833e:	f003 fae5 	bl	801b90c <memmove>
 8018342:	e7cb      	b.n	80182dc <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0xf4>
	  _M_realloc_insert(end(), __x);
 8018344:	aa01      	add	r2, sp, #4
 8018346:	4629      	mov	r1, r5
 8018348:	4620      	mov	r0, r4
 801834a:	f7ff fe87 	bl	801805c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 801834e:	e7ca      	b.n	80182e6 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0xfe>

08018350 <_ZN11CANProtocolC1Ev>:
class CommunicationProtocol {
 8018350:	4a0d      	ldr	r2, [pc, #52]	; (8018388 <_ZN11CANProtocolC1Ev+0x38>)
 8018352:	6002      	str	r2, [r0, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018354:	2200      	movs	r2, #0
 8018356:	6042      	str	r2, [r0, #4]
 8018358:	6082      	str	r2, [r0, #8]
 801835a:	60c2      	str	r2, [r0, #12]
 801835c:	6102      	str	r2, [r0, #16]
 801835e:	6142      	str	r2, [r0, #20]
 8018360:	6182      	str	r2, [r0, #24]
 8018362:	6202      	str	r2, [r0, #32]
 8018364:	6242      	str	r2, [r0, #36]	; 0x24
 8018366:	6282      	str	r2, [r0, #40]	; 0x28
 8018368:	62c2      	str	r2, [r0, #44]	; 0x2c
 801836a:	6302      	str	r2, [r0, #48]	; 0x30
 801836c:	6342      	str	r2, [r0, #52]	; 0x34
class TemplateCommunicationProtocol : public CommunicationProtocol {
 801836e:	4907      	ldr	r1, [pc, #28]	; (801838c <_ZN11CANProtocolC1Ev+0x3c>)
 8018370:	6001      	str	r1, [r0, #0]
 8018372:	6382      	str	r2, [r0, #56]	; 0x38
 8018374:	63c2      	str	r2, [r0, #60]	; 0x3c
 8018376:	6402      	str	r2, [r0, #64]	; 0x40
 *      Author: bignet
 */

#include <Protocols/Communication/FDCAN/CANProtocol.hpp>

CANProtocol::CANProtocol() {
 8018378:	4905      	ldr	r1, [pc, #20]	; (8018390 <_ZN11CANProtocolC1Ev+0x40>)
 801837a:	6001      	str	r1, [r0, #0]
 801837c:	6482      	str	r2, [r0, #72]	; 0x48
 801837e:	64c2      	str	r2, [r0, #76]	; 0x4c
 8018380:	6502      	str	r2, [r0, #80]	; 0x50
	marker = 0;
 8018382:	6442      	str	r2, [r0, #68]	; 0x44
}
 8018384:	4770      	bx	lr
 8018386:	bf00      	nop
 8018388:	0801c09c 	.word	0x0801c09c
 801838c:	0801bec4 	.word	0x0801bec4
 8018390:	0801c0d0 	.word	0x0801c0d0

08018394 <_ZN11CANProtocol17GetProtocolLengthEt>:

	return coded_message;
}

uint32_t CANProtocol::GetProtocolLength(uint16_t length) {
	if (length <= 0) return FDCAN_DLC_BYTES_0;
 8018394:	b309      	cbz	r1, 80183da <_ZN11CANProtocol17GetProtocolLengthEt+0x46>
	if (length <= 1) return FDCAN_DLC_BYTES_1;
 8018396:	2901      	cmp	r1, #1
 8018398:	d921      	bls.n	80183de <_ZN11CANProtocol17GetProtocolLengthEt+0x4a>
	if (length <= 2) return FDCAN_DLC_BYTES_2;
 801839a:	2902      	cmp	r1, #2
 801839c:	d922      	bls.n	80183e4 <_ZN11CANProtocol17GetProtocolLengthEt+0x50>
	if (length <= 3) return FDCAN_DLC_BYTES_3;
 801839e:	2903      	cmp	r1, #3
 80183a0:	d923      	bls.n	80183ea <_ZN11CANProtocol17GetProtocolLengthEt+0x56>
	if (length <= 4) return FDCAN_DLC_BYTES_4;
 80183a2:	2904      	cmp	r1, #4
 80183a4:	d924      	bls.n	80183f0 <_ZN11CANProtocol17GetProtocolLengthEt+0x5c>
	if (length <= 5) return FDCAN_DLC_BYTES_5;
 80183a6:	2905      	cmp	r1, #5
 80183a8:	d925      	bls.n	80183f6 <_ZN11CANProtocol17GetProtocolLengthEt+0x62>
	if (length <= 6) return FDCAN_DLC_BYTES_6;
 80183aa:	2906      	cmp	r1, #6
 80183ac:	d926      	bls.n	80183fc <_ZN11CANProtocol17GetProtocolLengthEt+0x68>
	if (length <= 7) return FDCAN_DLC_BYTES_7;
 80183ae:	2907      	cmp	r1, #7
 80183b0:	d927      	bls.n	8018402 <_ZN11CANProtocol17GetProtocolLengthEt+0x6e>
	if (length <= 8) return FDCAN_DLC_BYTES_8;
 80183b2:	2908      	cmp	r1, #8
 80183b4:	d928      	bls.n	8018408 <_ZN11CANProtocol17GetProtocolLengthEt+0x74>
	if (length <= 12) return FDCAN_DLC_BYTES_12;
 80183b6:	290c      	cmp	r1, #12
 80183b8:	d929      	bls.n	801840e <_ZN11CANProtocol17GetProtocolLengthEt+0x7a>
	if (length <= 16) return FDCAN_DLC_BYTES_16;
 80183ba:	2910      	cmp	r1, #16
 80183bc:	d92a      	bls.n	8018414 <_ZN11CANProtocol17GetProtocolLengthEt+0x80>
	if (length <= 20) return FDCAN_DLC_BYTES_20;
 80183be:	2914      	cmp	r1, #20
 80183c0:	d92b      	bls.n	801841a <_ZN11CANProtocol17GetProtocolLengthEt+0x86>
	if (length <= 24) return FDCAN_DLC_BYTES_24;
 80183c2:	2918      	cmp	r1, #24
 80183c4:	d92c      	bls.n	8018420 <_ZN11CANProtocol17GetProtocolLengthEt+0x8c>
	if (length <= 32) return FDCAN_DLC_BYTES_32;
 80183c6:	2920      	cmp	r1, #32
 80183c8:	d92d      	bls.n	8018426 <_ZN11CANProtocol17GetProtocolLengthEt+0x92>
	if (length <= 48) return FDCAN_DLC_BYTES_48;
 80183ca:	2930      	cmp	r1, #48	; 0x30
 80183cc:	d902      	bls.n	80183d4 <_ZN11CANProtocol17GetProtocolLengthEt+0x40>
	if (length <= 64) return FDCAN_DLC_BYTES_64;
	return FDCAN_DLC_BYTES_64;
 80183ce:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
}
 80183d2:	4770      	bx	lr
	if (length <= 48) return FDCAN_DLC_BYTES_48;
 80183d4:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 80183d8:	4770      	bx	lr
	if (length <= 0) return FDCAN_DLC_BYTES_0;
 80183da:	2000      	movs	r0, #0
 80183dc:	4770      	bx	lr
	if (length <= 1) return FDCAN_DLC_BYTES_1;
 80183de:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80183e2:	4770      	bx	lr
	if (length <= 2) return FDCAN_DLC_BYTES_2;
 80183e4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80183e8:	4770      	bx	lr
	if (length <= 3) return FDCAN_DLC_BYTES_3;
 80183ea:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80183ee:	4770      	bx	lr
	if (length <= 4) return FDCAN_DLC_BYTES_4;
 80183f0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80183f4:	4770      	bx	lr
	if (length <= 5) return FDCAN_DLC_BYTES_5;
 80183f6:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
 80183fa:	4770      	bx	lr
	if (length <= 6) return FDCAN_DLC_BYTES_6;
 80183fc:	f44f 20c0 	mov.w	r0, #393216	; 0x60000
 8018400:	4770      	bx	lr
	if (length <= 7) return FDCAN_DLC_BYTES_7;
 8018402:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
 8018406:	4770      	bx	lr
	if (length <= 8) return FDCAN_DLC_BYTES_8;
 8018408:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 801840c:	4770      	bx	lr
	if (length <= 12) return FDCAN_DLC_BYTES_12;
 801840e:	f44f 2010 	mov.w	r0, #589824	; 0x90000
 8018412:	4770      	bx	lr
	if (length <= 16) return FDCAN_DLC_BYTES_16;
 8018414:	f44f 2020 	mov.w	r0, #655360	; 0xa0000
 8018418:	4770      	bx	lr
	if (length <= 20) return FDCAN_DLC_BYTES_20;
 801841a:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 801841e:	4770      	bx	lr
	if (length <= 24) return FDCAN_DLC_BYTES_24;
 8018420:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8018424:	4770      	bx	lr
	if (length <= 32) return FDCAN_DLC_BYTES_32;
 8018426:	f44f 2050 	mov.w	r0, #851968	; 0xd0000
 801842a:	4770      	bx	lr

0801842c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>:
H* TemplateCommunicationProtocol<H>::GetInterface(uint8_t ID, bool* success) {
 801842c:	b538      	push	{r3, r4, r5, lr}
 801842e:	4605      	mov	r5, r0
 8018430:	4614      	mov	r4, r2
	uint8_t index = GetInterfaceIndex(ID, success);
 8018432:	f7ff fcfd 	bl	8017e30 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	if (*success) {
 8018436:	7823      	ldrb	r3, [r4, #0]
 8018438:	b11b      	cbz	r3, 8018442 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb+0x16>
	return *(this->_M_impl._M_start + __n);
 801843a:	6bab      	ldr	r3, [r5, #56]	; 0x38
		return interfaces[index];
 801843c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8018440:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
 8018442:	2000      	movs	r0, #0
 8018444:	e7fc      	b.n	8018440 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb+0x14>

08018446 <_ZN11CANProtocol16ConfigureFiltersEh>:
HAL_StatusTypeDef CANProtocol::ConfigureFilters(uint8_t ID) {
 8018446:	b500      	push	{lr}
 8018448:	b085      	sub	sp, #20
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 801844a:	f10d 020f 	add.w	r2, sp, #15
 801844e:	f7ff ffed 	bl	801842c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 8018452:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018456:	b91b      	cbnz	r3, 8018460 <_ZN11CANProtocol16ConfigureFiltersEh+0x1a>
 8018458:	2001      	movs	r0, #1
}
 801845a:	b005      	add	sp, #20
 801845c:	f85d fb04 	ldr.w	pc, [sp], #4
	return HAL_FDCAN_ConfigGlobalFilter(handle, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8018460:	2301      	movs	r3, #1
 8018462:	9300      	str	r3, [sp, #0]
 8018464:	2200      	movs	r2, #0
 8018466:	4611      	mov	r1, r2
 8018468:	f7ed fe02 	bl	8006070 <HAL_FDCAN_ConfigGlobalFilter>
 801846c:	e7f5      	b.n	801845a <_ZN11CANProtocol16ConfigureFiltersEh+0x14>

0801846e <_ZN11CANProtocol17ActivateReceptionEh>:
HAL_StatusTypeDef CANProtocol::ActivateReception(uint8_t ID) {
 801846e:	b500      	push	{lr}
 8018470:	b083      	sub	sp, #12
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 8018472:	f10d 0207 	add.w	r2, sp, #7
 8018476:	f7ff ffd9 	bl	801842c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 801847a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801847e:	b91b      	cbnz	r3, 8018488 <_ZN11CANProtocol17ActivateReceptionEh+0x1a>
 8018480:	2001      	movs	r0, #1
}
 8018482:	b003      	add	sp, #12
 8018484:	f85d fb04 	ldr.w	pc, [sp], #4
	return HAL_FDCAN_ActivateNotification(handle, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8018488:	2200      	movs	r2, #0
 801848a:	2101      	movs	r1, #1
 801848c:	f7ed ff50 	bl	8006330 <HAL_FDCAN_ActivateNotification>
 8018490:	e7f7      	b.n	8018482 <_ZN11CANProtocol17ActivateReceptionEh+0x14>

08018492 <_ZN11CANProtocol5StartEh>:
HAL_StatusTypeDef CANProtocol::Start(uint8_t ID) {
 8018492:	b500      	push	{lr}
 8018494:	b083      	sub	sp, #12
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 8018496:	f10d 0207 	add.w	r2, sp, #7
 801849a:	f7ff ffc7 	bl	801842c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 801849e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80184a2:	b91b      	cbnz	r3, 80184ac <_ZN11CANProtocol5StartEh+0x1a>
 80184a4:	2001      	movs	r0, #1
}
 80184a6:	b003      	add	sp, #12
 80184a8:	f85d fb04 	ldr.w	pc, [sp], #4
	return HAL_FDCAN_Start(handle);
 80184ac:	f7ed fdfb 	bl	80060a6 <HAL_FDCAN_Start>
 80184b0:	e7f9      	b.n	80184a6 <_ZN11CANProtocol5StartEh+0x14>
	...

080184b4 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80184b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184b8:	b083      	sub	sp, #12
 80184ba:	4615      	mov	r5, r2
 80184bc:	2301      	movs	r3, #1
 80184be:	9300      	str	r3, [sp, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80184c0:	6843      	ldr	r3, [r0, #4]
 80184c2:	6804      	ldr	r4, [r0, #0]
 80184c4:	1b1c      	subs	r4, r3, r4
 80184c6:	10a4      	asrs	r4, r4, #2
 80184c8:	4a38      	ldr	r2, [pc, #224]	; (80185ac <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf8>)
 80184ca:	fb02 f404 	mul.w	r4, r2, r4
	if (max_size() - size() < __n)
 80184ce:	4a38      	ldr	r2, [pc, #224]	; (80185b0 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>)
 80184d0:	1b12      	subs	r2, r2, r4
 80184d2:	2a00      	cmp	r2, #0
 80184d4:	d051      	beq.n	801857a <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc6>
 80184d6:	4606      	mov	r6, r0
 80184d8:	4688      	mov	r8, r1
	const size_type __len = size() + (std::max)(size(), __n);
 80184da:	9401      	str	r4, [sp, #4]
      if (__a < __b)
 80184dc:	2c00      	cmp	r4, #0
 80184de:	d04f      	beq.n	8018580 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
      return __a;
 80184e0:	aa01      	add	r2, sp, #4
 80184e2:	6812      	ldr	r2, [r2, #0]
 80184e4:	4414      	add	r4, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80184e6:	6832      	ldr	r2, [r6, #0]
 80184e8:	1a9b      	subs	r3, r3, r2
 80184ea:	109b      	asrs	r3, r3, #2
 80184ec:	4a2f      	ldr	r2, [pc, #188]	; (80185ac <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf8>)
 80184ee:	fb02 f303 	mul.w	r3, r2, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80184f2:	429c      	cmp	r4, r3
 80184f4:	d346      	bcc.n	8018584 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd0>
 80184f6:	4b2e      	ldr	r3, [pc, #184]	; (80185b0 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>)
 80184f8:	429c      	cmp	r4, r3
 80184fa:	d845      	bhi.n	8018588 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>
      pointer __old_start = this->_M_impl._M_start;
 80184fc:	f8d6 9000 	ldr.w	r9, [r6]
      pointer __old_finish = this->_M_impl._M_finish;
 8018500:	f8d6 a004 	ldr.w	sl, [r6, #4]
    { return __lhs.base() - __rhs.base(); }
 8018504:	eba8 0b09 	sub.w	fp, r8, r9
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018508:	2c00      	cmp	r4, #0
 801850a:	d041      	beq.n	8018590 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xdc>
	if (__n > this->_M_max_size())
 801850c:	4b28      	ldr	r3, [pc, #160]	; (80185b0 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>)
 801850e:	429c      	cmp	r4, r3
 8018510:	d83c      	bhi.n	801858c <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd8>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018512:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8018516:	0080      	lsls	r0, r0, #2
 8018518:	f002 fd3a 	bl	801af90 <_Znwj>
 801851c:	4607      	mov	r7, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801851e:	eb07 0e0b 	add.w	lr, r7, fp
 8018522:	46ac      	mov	ip, r5
 8018524:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018528:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801852c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018530:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018534:	f8dc 3000 	ldr.w	r3, [ip]
 8018538:	f8ce 3000 	str.w	r3, [lr]
      ptrdiff_t __count = __last - __first;
 801853c:	eba8 0509 	sub.w	r5, r8, r9
      if (__count > 0)
 8018540:	2d00      	cmp	r5, #0
 8018542:	dc27      	bgt.n	8018594 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe0>
      return __result + __count;
 8018544:	443d      	add	r5, r7
	      ++__new_finish;
 8018546:	3524      	adds	r5, #36	; 0x24
      ptrdiff_t __count = __last - __first;
 8018548:	ebaa 0a08 	sub.w	sl, sl, r8
      if (__count > 0)
 801854c:	f1ba 0f00 	cmp.w	sl, #0
 8018550:	dc26      	bgt.n	80185a0 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xec>
      return __result + __count;
 8018552:	4455      	add	r5, sl
		    this->_M_impl._M_end_of_storage - __old_start);
 8018554:	68b1      	ldr	r1, [r6, #8]
 8018556:	eba1 0109 	sub.w	r1, r1, r9
	if (__p)
 801855a:	f1b9 0f00 	cmp.w	r9, #0
 801855e:	d002      	beq.n	8018566 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb2>
	::operator delete(__p
 8018560:	4648      	mov	r0, r9
 8018562:	f002 fcff 	bl	801af64 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 8018566:	6037      	str	r7, [r6, #0]
      this->_M_impl._M_finish = __new_finish;
 8018568:	6075      	str	r5, [r6, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801856a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 801856e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8018572:	60b4      	str	r4, [r6, #8]
    }
 8018574:	b003      	add	sp, #12
 8018576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_length_error(__N(__s));
 801857a:	480e      	ldr	r0, [pc, #56]	; (80185b4 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x100>)
 801857c:	f002 fdbc 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 8018580:	466a      	mov	r2, sp
 8018582:	e7ae      	b.n	80184e2 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x2e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8018584:	4c0a      	ldr	r4, [pc, #40]	; (80185b0 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>)
 8018586:	e7b9      	b.n	80184fc <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x48>
 8018588:	4c09      	ldr	r4, [pc, #36]	; (80185b0 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>)
 801858a:	e7b7      	b.n	80184fc <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x48>
	  std::__throw_bad_alloc();
 801858c:	f002 fdae 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018590:	2700      	movs	r7, #0
 8018592:	e7c4      	b.n	801851e <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8018594:	462a      	mov	r2, r5
 8018596:	4649      	mov	r1, r9
 8018598:	4638      	mov	r0, r7
 801859a:	f003 f9b7 	bl	801b90c <memmove>
 801859e:	e7d1      	b.n	8018544 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
 80185a0:	4652      	mov	r2, sl
 80185a2:	4641      	mov	r1, r8
 80185a4:	4628      	mov	r0, r5
 80185a6:	f003 f9b1 	bl	801b90c <memmove>
 80185aa:	e7d2      	b.n	8018552 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
 80185ac:	38e38e39 	.word	0x38e38e39
 80185b0:	038e38e3 	.word	0x038e38e3
 80185b4:	0801bde4 	.word	0x0801bde4

080185b8 <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef>:
void CANProtocol::AddInterface(uint8_t ID, FDCAN_HandleTypeDef* interface) {
 80185b8:	b510      	push	{r4, lr}
 80185ba:	b08c      	sub	sp, #48	; 0x30
 80185bc:	4604      	mov	r4, r0
 80185be:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 80185c0:	f7ff fcba 	bl	8017f38 <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 80185c4:	4620      	mov	r0, r4
 80185c6:	f7ff fe0f 	bl	80181e8 <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	interfaces.push_back(interface);
 80185ca:	f104 0038 	add.w	r0, r4, #56	; 0x38
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80185ce:	6841      	ldr	r1, [r0, #4]
 80185d0:	6883      	ldr	r3, [r0, #8]
 80185d2:	4299      	cmp	r1, r3
 80185d4:	d02a      	beq.n	801862c <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef+0x74>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80185d6:	9b01      	ldr	r3, [sp, #4]
 80185d8:	600b      	str	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 80185da:	6843      	ldr	r3, [r0, #4]
 80185dc:	3304      	adds	r3, #4
 80185de:	6043      	str	r3, [r0, #4]
	FDCANTxHeader.IdType = FDCAN_STANDARD_ID; 				// FDCAN_STANDARD_ID or FDCAN_CLASSIC_CAN
 80185e0:	2300      	movs	r3, #0
 80185e2:	9304      	str	r3, [sp, #16]
	FDCANTxHeader.TxFrameType = FDCAN_DATA_FRAME; 			// FDCAN_DATA_FRAME or FDCAN_REMOTE_FRAME
 80185e4:	9305      	str	r3, [sp, #20]
	FDCANTxHeader.ErrorStateIndicator = FDCAN_ESI_PASSIVE; 	// FDCAN_ESI_PASSIVE or FDCAN_ESI_ACTIVE
 80185e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80185ea:	9207      	str	r2, [sp, #28]
	FDCANTxHeader.BitRateSwitch = FDCAN_BRS_ON; 				// FDCAN_BRS_ON FDCAN_BRS_OFF
 80185ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80185f0:	9208      	str	r2, [sp, #32]
	FDCANTxHeader.FDFormat = FDCAN_FD_CAN; 					// FDCAN_FD_CAN or FDCAN_CLASSIC_CAN
 80185f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80185f6:	9209      	str	r2, [sp, #36]	; 0x24
	FDCANTxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS; 	// FDCAN_NO_TX_EVENTS or FDCAN_STORE_TX_EVENTS
 80185f8:	930a      	str	r3, [sp, #40]	; 0x28
	FDCANTxHeaders.push_back(FDCANTxHeader);
 80185fa:	3448      	adds	r4, #72	; 0x48
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80185fc:	6861      	ldr	r1, [r4, #4]
 80185fe:	68a3      	ldr	r3, [r4, #8]
 8018600:	4299      	cmp	r1, r3
 8018602:	d017      	beq.n	8018634 <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef+0x7c>
 8018604:	468c      	mov	ip, r1
 8018606:	f10d 0e0c 	add.w	lr, sp, #12
 801860a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801860e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018612:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018616:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801861a:	f8de 3000 	ldr.w	r3, [lr]
 801861e:	f8cc 3000 	str.w	r3, [ip]
	    ++this->_M_impl._M_finish;
 8018622:	6863      	ldr	r3, [r4, #4]
 8018624:	3324      	adds	r3, #36	; 0x24
 8018626:	6063      	str	r3, [r4, #4]
}
 8018628:	b00c      	add	sp, #48	; 0x30
 801862a:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 801862c:	aa01      	add	r2, sp, #4
 801862e:	f7e9 ffcf 	bl	80025d0 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 8018632:	e7d5      	b.n	80185e0 <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef+0x28>
 8018634:	aa03      	add	r2, sp, #12
 8018636:	4620      	mov	r0, r4
 8018638:	f7ff ff3c 	bl	80184b4 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 801863c:	e7f4      	b.n	8018628 <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef+0x70>

0801863e <_ZN11CANProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
MessageHeader CANProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> message, uint16_t* index, bool* success) {
 801863e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018642:	b08a      	sub	sp, #40	; 0x28
 8018644:	4604      	mov	r4, r0
 8018646:	461f      	mov	r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018648:	2300      	movs	r3, #0
 801864a:	6043      	str	r3, [r0, #4]
 801864c:	6083      	str	r3, [r0, #8]
 801864e:	60c3      	str	r3, [r0, #12]
	return *(this->_M_impl._M_start + __n);
 8018650:	683a      	ldr	r2, [r7, #0]
	MessageHeader decoded_message;

	decoded_message.target_address = message[0];
 8018652:	7812      	ldrb	r2, [r2, #0]
 8018654:	7402      	strb	r2, [r0, #16]
 8018656:	683a      	ldr	r2, [r7, #0]
	decoded_message.source_address = message[1];
 8018658:	7852      	ldrb	r2, [r2, #1]
 801865a:	7442      	strb	r2, [r0, #17]
 801865c:	683a      	ldr	r2, [r7, #0]
	uint16_t length = message[2];
 801865e:	7896      	ldrb	r6, [r2, #2]

	// Retrieve payload based on length byte
	decoded_message.payload = std::vector<uint8_t>(message.begin() + 3, message.begin() + 3 + length);
 8018660:	f100 0904 	add.w	r9, r0, #4
      { return __normal_iterator(_M_current + __n); }
 8018664:	f102 0803 	add.w	r8, r2, #3
 8018668:	eb08 0a06 	add.w	sl, r8, r6
	: _M_start(), _M_finish(), _M_end_of_storage()
 801866c:	9307      	str	r3, [sp, #28]
 801866e:	9308      	str	r3, [sp, #32]
 8018670:	9309      	str	r3, [sp, #36]	; 0x24
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018672:	2e00      	cmp	r6, #0
 8018674:	d04a      	beq.n	801870c <_ZN11CANProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0xce>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018676:	4630      	mov	r0, r6
 8018678:	f002 fc8a 	bl	801af90 <_Znwj>
 801867c:	4605      	mov	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801867e:	9507      	str	r5, [sp, #28]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018680:	442e      	add	r6, r5
 8018682:	9609      	str	r6, [sp, #36]	; 0x24
      return std::__niter_wrap(__result,
 8018684:	4640      	mov	r0, r8
 8018686:	f7e9 fa15 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 801868a:	4680      	mov	r8, r0
 801868c:	4650      	mov	r0, sl
 801868e:	f7e9 fa11 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
	  if (_Num)
 8018692:	ebb0 0608 	subs.w	r6, r0, r8
 8018696:	d13b      	bne.n	8018710 <_ZN11CANProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0xd2>
	  return __result + _Num;
 8018698:	4435      	add	r5, r6
	  this->_M_impl._M_finish =
 801869a:	9508      	str	r5, [sp, #32]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801869c:	2200      	movs	r2, #0
 801869e:	9201      	str	r2, [sp, #4]
 80186a0:	9202      	str	r2, [sp, #8]
 80186a2:	9203      	str	r2, [sp, #12]
 80186a4:	9204      	str	r2, [sp, #16]
 80186a6:	9205      	str	r2, [sp, #20]
 80186a8:	9206      	str	r2, [sp, #24]
	  _M_start = __x._M_start;
 80186aa:	6860      	ldr	r0, [r4, #4]
 80186ac:	9004      	str	r0, [sp, #16]
	  _M_finish = __x._M_finish;
 80186ae:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80186b2:	9605      	str	r6, [sp, #20]
	  _M_end_of_storage = __x._M_end_of_storage;
 80186b4:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80186b8:	9106      	str	r1, [sp, #24]
	  _M_start = __x._M_start;
 80186ba:	9b07      	ldr	r3, [sp, #28]
 80186bc:	6063      	str	r3, [r4, #4]
	  _M_finish = __x._M_finish;
 80186be:	f8c9 5004 	str.w	r5, [r9, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80186c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186c4:	f8c9 3008 	str.w	r3, [r9, #8]
	  _M_start = __x._M_start;
 80186c8:	9007      	str	r0, [sp, #28]
	  _M_finish = __x._M_finish;
 80186ca:	9608      	str	r6, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
 80186cc:	9109      	str	r1, [sp, #36]	; 0x24
	: _M_start(), _M_finish(), _M_end_of_storage()
 80186ce:	9204      	str	r2, [sp, #16]
 80186d0:	9205      	str	r2, [sp, #20]
 80186d2:	9206      	str	r2, [sp, #24]
	  _M_start = __x._M_start;
 80186d4:	9001      	str	r0, [sp, #4]
	  _M_finish = __x._M_finish;
 80186d6:	9602      	str	r6, [sp, #8]
	  _M_end_of_storage = __x._M_end_of_storage;
 80186d8:	9103      	str	r1, [sp, #12]
	  _M_start = __x._M_start;
 80186da:	9207      	str	r2, [sp, #28]
	  _M_finish = __x._M_finish;
 80186dc:	9208      	str	r2, [sp, #32]
	  _M_end_of_storage = __x._M_end_of_storage;
 80186de:	9209      	str	r2, [sp, #36]	; 0x24
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80186e0:	1a09      	subs	r1, r1, r0
	if (__p)
 80186e2:	b108      	cbz	r0, 80186e8 <_ZN11CANProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0xaa>
	::operator delete(__p
 80186e4:	f002 fc3e 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80186e8:	9807      	ldr	r0, [sp, #28]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80186ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80186ec:	1a09      	subs	r1, r1, r0
	if (__p)
 80186ee:	b108      	cbz	r0, 80186f4 <_ZN11CANProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0xb6>
 80186f0:	f002 fc38 	bl	801af64 <_ZdlPvj>

	*success = true;
 80186f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80186f6:	2201      	movs	r2, #1
 80186f8:	701a      	strb	r2, [r3, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	683a      	ldr	r2, [r7, #0]
 80186fe:	1a9b      	subs	r3, r3, r2
	*index = message.size();
 8018700:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018702:	8013      	strh	r3, [r2, #0]

	return decoded_message;
}
 8018704:	4620      	mov	r0, r4
 8018706:	b00a      	add	sp, #40	; 0x28
 8018708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801870c:	2500      	movs	r5, #0
 801870e:	e7b6      	b.n	801867e <_ZN11CANProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x40>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8018710:	4632      	mov	r2, r6
 8018712:	4641      	mov	r1, r8
 8018714:	4628      	mov	r0, r5
 8018716:	f003 f8f9 	bl	801b90c <memmove>
 801871a:	e7bd      	b.n	8018698 <_ZN11CANProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x5a>

0801871c <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef>:
std::vector<uint8_t> CANProtocol::CodeProtocol(MessageHeader message, FDCAN_TxHeaderTypeDef* TxHeader) {
 801871c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801871e:	b085      	sub	sp, #20
 8018720:	4604      	mov	r4, r0
 8018722:	460f      	mov	r7, r1
 8018724:	4615      	mov	r5, r2
 8018726:	461e      	mov	r6, r3
	TxHeader->Identifier = message.target_address;
 8018728:	7c13      	ldrb	r3, [r2, #16]
 801872a:	6033      	str	r3, [r6, #0]
	TxHeader->MessageMarker = marker;
 801872c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 801872e:	6233      	str	r3, [r6, #32]
	if (marker >= 4294967295)
 8018730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018734:	d029      	beq.n	801878a <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x6e>
		marker++;
 8018736:	3301      	adds	r3, #1
 8018738:	644b      	str	r3, [r1, #68]	; 0x44
	: _M_start(), _M_finish(), _M_end_of_storage()
 801873a:	2100      	movs	r1, #0
 801873c:	6021      	str	r1, [r4, #0]
 801873e:	6061      	str	r1, [r4, #4]
 8018740:	60a1      	str	r1, [r4, #8]
	  _M_realloc_insert(end(), __x);
 8018742:	f105 0211 	add.w	r2, r5, #17
 8018746:	4620      	mov	r0, r4
 8018748:	f7e8 fdee 	bl	8001328 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801874c:	68ab      	ldr	r3, [r5, #8]
 801874e:	686a      	ldr	r2, [r5, #4]
 8018750:	1a9b      	subs	r3, r3, r2
	coded_message.push_back((uint8_t) message.payload.size());
 8018752:	f88d 300f 	strb.w	r3, [sp, #15]
      { emplace_back(std::move(__x)); }
 8018756:	f10d 010f 	add.w	r1, sp, #15
 801875a:	4620      	mov	r0, r4
 801875c:	f7f6 feb6 	bl	800f4cc <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	  _M_range_insert(__pos, __first, __last,
 8018760:	f04f 0300 	mov.w	r3, #0
 8018764:	f88d 3000 	strb.w	r3, [sp]
 8018768:	68ab      	ldr	r3, [r5, #8]
 801876a:	686a      	ldr	r2, [r5, #4]
 801876c:	6861      	ldr	r1, [r4, #4]
 801876e:	4620      	mov	r0, r4
 8018770:	f7e9 fa1e 	bl	8001bb0 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018774:	6861      	ldr	r1, [r4, #4]
 8018776:	6823      	ldr	r3, [r4, #0]
 8018778:	1ac9      	subs	r1, r1, r3
	TxHeader->DataLength = GetProtocolLength(coded_message.size());
 801877a:	b289      	uxth	r1, r1
 801877c:	4638      	mov	r0, r7
 801877e:	f7ff fe09 	bl	8018394 <_ZN11CANProtocol17GetProtocolLengthEt>
 8018782:	60f0      	str	r0, [r6, #12]
}
 8018784:	4620      	mov	r0, r4
 8018786:	b005      	add	sp, #20
 8018788:	bdf0      	pop	{r4, r5, r6, r7, pc}
		marker = 0;
 801878a:	2300      	movs	r3, #0
 801878c:	644b      	str	r3, [r1, #68]	; 0x44
 801878e:	e7d4      	b.n	801873a <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x1e>

08018790 <_ZN11CANProtocol4SendE13MessageHeader>:
HAL_StatusTypeDef CANProtocol::Send(MessageHeader message) {
 8018790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018794:	b09b      	sub	sp, #108	; 0x6c
 8018796:	4605      	mov	r5, r0
 8018798:	460c      	mov	r4, r1
	FDCAN_HandleTypeDef* interface_ = GetInterface(message.interface, &success);
 801879a:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 801879e:	7809      	ldrb	r1, [r1, #0]
 80187a0:	f7ff fe44 	bl	801842c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (!success) return HAL_ERROR;
 80187a4:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	f000 80af 	beq.w	801890c <_ZN11CANProtocol4SendE13MessageHeader+0x17c>
 80187ae:	4606      	mov	r6, r0
	if (interface_->State != HAL_FDCAN_STATE_BUSY) return HAL_ERROR;
 80187b0:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 80187b4:	b2db      	uxtb	r3, r3
 80187b6:	2b02      	cmp	r3, #2
 80187b8:	d003      	beq.n	80187c2 <_ZN11CANProtocol4SendE13MessageHeader+0x32>
 80187ba:	2001      	movs	r0, #1
}
 80187bc:	b01b      	add	sp, #108	; 0x6c
 80187be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t index = GetInterfaceIndex(message.interface, &success);
 80187c2:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 80187c6:	7821      	ldrb	r1, [r4, #0]
 80187c8:	4628      	mov	r0, r5
 80187ca:	f7ff fb31 	bl	8017e30 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 80187ce:	4607      	mov	r7, r0
	return *(this->_M_impl._M_start + __n);
 80187d0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80187d2:	eb00 0cc0 	add.w	ip, r0, r0, lsl #3
	FDCAN_TxHeaderTypeDef TxHeader = FDCANTxHeaders[index];
 80187d6:	f10d 0e20 	add.w	lr, sp, #32
 80187da:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80187de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80187e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80187e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80187ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80187ee:	f8dc 3000 	ldr.w	r3, [ip]
 80187f2:	f8ce 3000 	str.w	r3, [lr]
 80187f6:	f8d5 b004 	ldr.w	fp, [r5, #4]
 80187fa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80187fe:	ea4f 0987 	mov.w	r9, r7, lsl #2
 8018802:	eb0b 0787 	add.w	r7, fp, r7, lsl #2
struct MessageHeader {
 8018806:	46a2      	mov	sl, r4
 8018808:	f81a 3b04 	ldrb.w	r3, [sl], #4
 801880c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018810:	f8da 1004 	ldr.w	r1, [sl, #4]
 8018814:	6862      	ldr	r2, [r4, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018816:	2300      	movs	r3, #0
 8018818:	9316      	str	r3, [sp, #88]	; 0x58
 801881a:	9317      	str	r3, [sp, #92]	; 0x5c
 801881c:	9318      	str	r3, [sp, #96]	; 0x60
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801881e:	ebb1 0802 	subs.w	r8, r1, r2
 8018822:	d065      	beq.n	80188f0 <_ZN11CANProtocol4SendE13MessageHeader+0x160>
	if (__n > this->_M_max_size())
 8018824:	4598      	cmp	r8, r3
 8018826:	db61      	blt.n	80188ec <_ZN11CANProtocol4SendE13MessageHeader+0x15c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018828:	4640      	mov	r0, r8
 801882a:	f002 fbb1 	bl	801af90 <_Znwj>
 801882e:	9000      	str	r0, [sp, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8018830:	9a00      	ldr	r2, [sp, #0]
 8018832:	9216      	str	r2, [sp, #88]	; 0x58
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8018834:	9217      	str	r2, [sp, #92]	; 0x5c
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018836:	eb02 0308 	add.w	r3, r2, r8
 801883a:	9318      	str	r3, [sp, #96]	; 0x60
      : _M_current(__i) { }
 801883c:	f8da a004 	ldr.w	sl, [sl, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8018840:	9201      	str	r2, [sp, #4]
      return std::__niter_wrap(__result,
 8018842:	6860      	ldr	r0, [r4, #4]
 8018844:	f7e9 f937 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8018848:	4680      	mov	r8, r0
 801884a:	4650      	mov	r0, sl
 801884c:	f7e9 f933 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8018850:	ebb0 0a08 	subs.w	sl, r0, r8
 8018854:	d14f      	bne.n	80188f6 <_ZN11CANProtocol4SendE13MessageHeader+0x166>
	  return __result + _Num;
 8018856:	9801      	ldr	r0, [sp, #4]
 8018858:	4450      	add	r0, sl
	this->_M_impl._M_finish =
 801885a:	9017      	str	r0, [sp, #92]	; 0x5c
 801885c:	7c23      	ldrb	r3, [r4, #16]
 801885e:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8018862:	7c63      	ldrb	r3, [r4, #17]
 8018864:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
	buffers_to_transfer[index] = CodeProtocol(message, &TxHeader);
 8018868:	ab08      	add	r3, sp, #32
 801886a:	aa15      	add	r2, sp, #84	; 0x54
 801886c:	4629      	mov	r1, r5
 801886e:	a812      	add	r0, sp, #72	; 0x48
 8018870:	f7ff ff54 	bl	801871c <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018874:	2300      	movs	r3, #0
 8018876:	9302      	str	r3, [sp, #8]
 8018878:	9303      	str	r3, [sp, #12]
 801887a:	9304      	str	r3, [sp, #16]
 801887c:	9305      	str	r3, [sp, #20]
 801887e:	9306      	str	r3, [sp, #24]
 8018880:	9307      	str	r3, [sp, #28]
	  _M_start = __x._M_start;
 8018882:	f85b 0009 	ldr.w	r0, [fp, r9]
 8018886:	9005      	str	r0, [sp, #20]
	  _M_finish = __x._M_finish;
 8018888:	687c      	ldr	r4, [r7, #4]
 801888a:	9406      	str	r4, [sp, #24]
	  _M_end_of_storage = __x._M_end_of_storage;
 801888c:	68b9      	ldr	r1, [r7, #8]
 801888e:	9107      	str	r1, [sp, #28]
	  _M_start = __x._M_start;
 8018890:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018892:	f84b 2009 	str.w	r2, [fp, r9]
	  _M_finish = __x._M_finish;
 8018896:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018898:	607a      	str	r2, [r7, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 801889a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801889c:	60ba      	str	r2, [r7, #8]
	  _M_start = __x._M_start;
 801889e:	9012      	str	r0, [sp, #72]	; 0x48
	  _M_finish = __x._M_finish;
 80188a0:	9413      	str	r4, [sp, #76]	; 0x4c
	  _M_end_of_storage = __x._M_end_of_storage;
 80188a2:	9114      	str	r1, [sp, #80]	; 0x50
	: _M_start(), _M_finish(), _M_end_of_storage()
 80188a4:	9305      	str	r3, [sp, #20]
 80188a6:	9306      	str	r3, [sp, #24]
 80188a8:	9307      	str	r3, [sp, #28]
	  _M_start = __x._M_start;
 80188aa:	9002      	str	r0, [sp, #8]
	  _M_finish = __x._M_finish;
 80188ac:	9403      	str	r4, [sp, #12]
	  _M_end_of_storage = __x._M_end_of_storage;
 80188ae:	9104      	str	r1, [sp, #16]
	  _M_start = __x._M_start;
 80188b0:	9312      	str	r3, [sp, #72]	; 0x48
	  _M_finish = __x._M_finish;
 80188b2:	9313      	str	r3, [sp, #76]	; 0x4c
	  _M_end_of_storage = __x._M_end_of_storage;
 80188b4:	9314      	str	r3, [sp, #80]	; 0x50
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80188b6:	1a09      	subs	r1, r1, r0
	if (__p)
 80188b8:	b108      	cbz	r0, 80188be <_ZN11CANProtocol4SendE13MessageHeader+0x12e>
	::operator delete(__p
 80188ba:	f002 fb53 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80188be:	9812      	ldr	r0, [sp, #72]	; 0x48
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80188c0:	9914      	ldr	r1, [sp, #80]	; 0x50
 80188c2:	1a09      	subs	r1, r1, r0
	if (__p)
 80188c4:	b108      	cbz	r0, 80188ca <_ZN11CANProtocol4SendE13MessageHeader+0x13a>
 80188c6:	f002 fb4d 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80188ca:	9816      	ldr	r0, [sp, #88]	; 0x58
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80188cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80188ce:	1a09      	subs	r1, r1, r0
	if (__p)
 80188d0:	b108      	cbz	r0, 80188d6 <_ZN11CANProtocol4SendE13MessageHeader+0x146>
 80188d2:	f002 fb47 	bl	801af64 <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80188d6:	686a      	ldr	r2, [r5, #4]
 80188d8:	eb02 0309 	add.w	r3, r2, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80188dc:	685b      	ldr	r3, [r3, #4]
 80188de:	f852 2009 	ldr.w	r2, [r2, r9]
 80188e2:	1a9b      	subs	r3, r3, r2
	if (buffers_to_transfer[index].size() > 64) return HAL_ERROR;
 80188e4:	2b40      	cmp	r3, #64	; 0x40
 80188e6:	d90c      	bls.n	8018902 <_ZN11CANProtocol4SendE13MessageHeader+0x172>
 80188e8:	2001      	movs	r0, #1
 80188ea:	e767      	b.n	80187bc <_ZN11CANProtocol4SendE13MessageHeader+0x2c>
	  std::__throw_bad_alloc();
 80188ec:	f002 fbfe 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80188f0:	2300      	movs	r3, #0
 80188f2:	9300      	str	r3, [sp, #0]
 80188f4:	e79c      	b.n	8018830 <_ZN11CANProtocol4SendE13MessageHeader+0xa0>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80188f6:	4652      	mov	r2, sl
 80188f8:	4641      	mov	r1, r8
 80188fa:	9800      	ldr	r0, [sp, #0]
 80188fc:	f003 f806 	bl	801b90c <memmove>
 8018900:	e7a9      	b.n	8018856 <_ZN11CANProtocol4SendE13MessageHeader+0xc6>
	return HAL_FDCAN_AddMessageToTxFifoQ(interface_, &TxHeader, &(buffers_to_transfer[index])[0]);
 8018902:	a908      	add	r1, sp, #32
 8018904:	4630      	mov	r0, r6
 8018906:	f7ed fbe8 	bl	80060da <HAL_FDCAN_AddMessageToTxFifoQ>
 801890a:	e757      	b.n	80187bc <_ZN11CANProtocol4SendE13MessageHeader+0x2c>
	if (!success) return HAL_ERROR;
 801890c:	2001      	movs	r0, #1
 801890e:	e755      	b.n	80187bc <_ZN11CANProtocol4SendE13MessageHeader+0x2c>

08018910 <_ZN12UARTProtocolC1Ev>:
 *      Author: bignet
 */

#include <Protocols/Communication/UART/UARTProtocol.hpp>

UARTProtocol::UARTProtocol() {
 8018910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018912:	b089      	sub	sp, #36	; 0x24
 8018914:	4604      	mov	r4, r0
class CommunicationProtocol {
 8018916:	4b27      	ldr	r3, [pc, #156]	; (80189b4 <_ZN12UARTProtocolC1Ev+0xa4>)
 8018918:	6003      	str	r3, [r0, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801891a:	2500      	movs	r5, #0
 801891c:	6045      	str	r5, [r0, #4]
 801891e:	6085      	str	r5, [r0, #8]
 8018920:	60c5      	str	r5, [r0, #12]
 8018922:	6105      	str	r5, [r0, #16]
 8018924:	6145      	str	r5, [r0, #20]
 8018926:	6185      	str	r5, [r0, #24]
 8018928:	6205      	str	r5, [r0, #32]
 801892a:	6245      	str	r5, [r0, #36]	; 0x24
 801892c:	6285      	str	r5, [r0, #40]	; 0x28
 801892e:	62c5      	str	r5, [r0, #44]	; 0x2c
 8018930:	6305      	str	r5, [r0, #48]	; 0x30
 8018932:	6345      	str	r5, [r0, #52]	; 0x34
class TemplateCommunicationProtocol : public CommunicationProtocol {
 8018934:	4b20      	ldr	r3, [pc, #128]	; (80189b8 <_ZN12UARTProtocolC1Ev+0xa8>)
 8018936:	6003      	str	r3, [r0, #0]
 8018938:	6385      	str	r5, [r0, #56]	; 0x38
 801893a:	63c5      	str	r5, [r0, #60]	; 0x3c
 801893c:	6405      	str	r5, [r0, #64]	; 0x40
 801893e:	4607      	mov	r7, r0
 8018940:	4b1e      	ldr	r3, [pc, #120]	; (80189bc <_ZN12UARTProtocolC1Ev+0xac>)
 8018942:	f847 3b44 	str.w	r3, [r7], #68
 8018946:	4b1e      	ldr	r3, [pc, #120]	; (80189c0 <_ZN12UARTProtocolC1Ev+0xb0>)
 8018948:	9303      	str	r3, [sp, #12]
 801894a:	2302      	movs	r3, #2
 801894c:	9304      	str	r3, [sp, #16]
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801894e:	ae01      	add	r6, sp, #4
 8018950:	aa03      	add	r2, sp, #12
 8018952:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018956:	e886 0003 	stmia.w	r6, {r0, r1}
 801895a:	6465      	str	r5, [r4, #68]	; 0x44
 801895c:	64a5      	str	r5, [r4, #72]	; 0x48
 801895e:	64e5      	str	r5, [r4, #76]	; 0x4c
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018960:	4618      	mov	r0, r3
 8018962:	f002 fb15 	bl	801af90 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8018966:	6460      	str	r0, [r4, #68]	; 0x44
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018968:	1c83      	adds	r3, r0, #2
 801896a:	60bb      	str	r3, [r7, #8]
 801896c:	f643 42c3 	movw	r2, #15555	; 0x3cc3
 8018970:	8002      	strh	r2, [r0, #0]
	  this->_M_impl._M_finish =
 8018972:	607b      	str	r3, [r7, #4]
 8018974:	23ff      	movs	r3, #255	; 0xff
 8018976:	f88d 301c 	strb.w	r3, [sp, #28]
 801897a:	ab07      	add	r3, sp, #28
 801897c:	9305      	str	r3, [sp, #20]
 801897e:	2301      	movs	r3, #1
 8018980:	9306      	str	r3, [sp, #24]
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8018982:	aa05      	add	r2, sp, #20
 8018984:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018988:	e886 0003 	stmia.w	r6, {r0, r1}
	: _M_start(), _M_finish(), _M_end_of_storage()
 801898c:	6525      	str	r5, [r4, #80]	; 0x50
 801898e:	6565      	str	r5, [r4, #84]	; 0x54
 8018990:	65a5      	str	r5, [r4, #88]	; 0x58
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018992:	4618      	mov	r0, r3
 8018994:	f002 fafc 	bl	801af90 <_Znwj>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8018998:	6520      	str	r0, [r4, #80]	; 0x50
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801899a:	1c43      	adds	r3, r0, #1
 801899c:	65a3      	str	r3, [r4, #88]	; 0x58
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801899e:	f89d 201c 	ldrb.w	r2, [sp, #28]
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80189a2:	7002      	strb	r2, [r0, #0]
	  this->_M_impl._M_finish =
 80189a4:	6563      	str	r3, [r4, #84]	; 0x54
	: _M_start(), _M_finish(), _M_end_of_storage()
 80189a6:	65e5      	str	r5, [r4, #92]	; 0x5c
 80189a8:	6625      	str	r5, [r4, #96]	; 0x60
 80189aa:	6665      	str	r5, [r4, #100]	; 0x64
	// TODO Auto-generated constructor stub
//	message.reserve(64);
}
 80189ac:	4620      	mov	r0, r4
 80189ae:	b009      	add	sp, #36	; 0x24
 80189b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189b2:	bf00      	nop
 80189b4:	0801c09c 	.word	0x0801c09c
 80189b8:	0801bea8 	.word	0x0801bea8
 80189bc:	0801c10c 	.word	0x0801c10c
 80189c0:	0801c0e4 	.word	0x0801c0e4

080189c4 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb>:
		*index = start_index + protocol_start.size() + length + 3 + RS485_offset + protocol_end.size();
	}
	return decoded_message;
}

uint16_t UARTProtocol::DetectPattern(std::vector<uint8_t> message, std::vector<uint8_t> pattern, uint16_t start_index, bool* success) {
 80189c4:	b570      	push	{r4, r5, r6, lr}
      { return _M_data_ptr(this->_M_impl._M_start); }
 80189c6:	680d      	ldr	r5, [r1, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80189c8:	684c      	ldr	r4, [r1, #4]
 80189ca:	1b64      	subs	r4, r4, r5
	uint8_t counter = 0;
 80189cc:	2000      	movs	r0, #0
 80189ce:	e002      	b.n	80189d6 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x12>
	uint8_t* data = message.data();
	uint8_t size = message.size();
	for (uint16_t index = start_index; index < message.size(); index++) {
		if (message[index] != pattern[counter]) {
			counter = 0;
 80189d0:	2000      	movs	r0, #0
	for (uint16_t index = start_index; index < message.size(); index++) {
 80189d2:	3301      	adds	r3, #1
 80189d4:	b29b      	uxth	r3, r3
 80189d6:	42a3      	cmp	r3, r4
 80189d8:	d214      	bcs.n	8018a04 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x40>
		if (message[index] != pattern[counter]) {
 80189da:	f815 e003 	ldrb.w	lr, [r5, r3]
	return *(this->_M_impl._M_start + __n);
 80189de:	6811      	ldr	r1, [r2, #0]
 80189e0:	f811 c000 	ldrb.w	ip, [r1, r0]
 80189e4:	45e6      	cmp	lr, ip
 80189e6:	d1f3      	bne.n	80189d0 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0xc>
			continue;
		}
		counter++;
 80189e8:	3001      	adds	r0, #1
 80189ea:	b2c0      	uxtb	r0, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80189ec:	6856      	ldr	r6, [r2, #4]
 80189ee:	1a71      	subs	r1, r6, r1
		if (counter >= pattern.size()) {
 80189f0:	4288      	cmp	r0, r1
 80189f2:	d3ee      	bcc.n	80189d2 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0xe>
			*success = true;
 80189f4:	2201      	movs	r2, #1
 80189f6:	9904      	ldr	r1, [sp, #16]
 80189f8:	700a      	strb	r2, [r1, #0]
			return index - counter + 1;
 80189fa:	1a18      	subs	r0, r3, r0
 80189fc:	b280      	uxth	r0, r0
 80189fe:	4410      	add	r0, r2
 8018a00:	b280      	uxth	r0, r0
 8018a02:	e002      	b.n	8018a0a <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x46>
		}
	}
	*success = false;
 8018a04:	2000      	movs	r0, #0
 8018a06:	9b04      	ldr	r3, [sp, #16]
 8018a08:	7018      	strb	r0, [r3, #0]
	return 0;
}
 8018a0a:	bd70      	pop	{r4, r5, r6, pc}

08018a0c <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_>:

bool UARTProtocol::PatternPresentAt(uint16_t start_index, std::vector<uint8_t> message, std::vector<uint8_t> pattern) {
 8018a0c:	b430      	push	{r4, r5}
    uint16_t index = start_index;
    for (uint8_t byte : pattern) {
 8018a0e:	6818      	ldr	r0, [r3, #0]
 8018a10:	685c      	ldr	r4, [r3, #4]
 8018a12:	e002      	b.n	8018a1a <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0xe>
        if (byte != message[index])
            return false;
        index++;
 8018a14:	3101      	adds	r1, #1
 8018a16:	b289      	uxth	r1, r1
	++_M_current;
 8018a18:	1c58      	adds	r0, r3, #1
    { return __lhs.base() != __rhs.base(); }
 8018a1a:	4603      	mov	r3, r0
    for (uint8_t byte : pattern) {
 8018a1c:	42a0      	cmp	r0, r4
 8018a1e:	d007      	beq.n	8018a30 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x24>
 8018a20:	7800      	ldrb	r0, [r0, #0]
        if (byte != message[index])
 8018a22:	6815      	ldr	r5, [r2, #0]
 8018a24:	f815 c001 	ldrb.w	ip, [r5, r1]
 8018a28:	4584      	cmp	ip, r0
 8018a2a:	d0f3      	beq.n	8018a14 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x8>
            return false;
 8018a2c:	2000      	movs	r0, #0
 8018a2e:	e000      	b.n	8018a32 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x26>
    }
    return true;
 8018a30:	2001      	movs	r0, #1
}
 8018a32:	bc30      	pop	{r4, r5}
 8018a34:	4770      	bx	lr

08018a36 <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE>:

uint8_t UARTProtocol::GetChecksum(std::vector<uint8_t> message) {
	uint8_t checksum = 0;
	for (uint8_t byte : message)
 8018a36:	680b      	ldr	r3, [r1, #0]
      : _M_current(__i) { }
 8018a38:	6849      	ldr	r1, [r1, #4]
	uint8_t checksum = 0;
 8018a3a:	2000      	movs	r0, #0
 8018a3c:	e003      	b.n	8018a46 <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE+0x10>
	for (uint8_t byte : message)
 8018a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
		checksum += byte;
 8018a42:	4410      	add	r0, r2
 8018a44:	b2c0      	uxtb	r0, r0
	for (uint8_t byte : message)
 8018a46:	4299      	cmp	r1, r3
 8018a48:	d1f9      	bne.n	8018a3e <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE+0x8>
	checksum = ~checksum + 1;
 8018a4a:	4240      	negs	r0, r0
	return checksum;
}
 8018a4c:	b2c0      	uxtb	r0, r0
 8018a4e:	4770      	bx	lr

08018a50 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE>:

bool UARTProtocol::Checksum(uint16_t start_index, uint16_t end_index, std::vector<uint8_t> message) {
 8018a50:	b410      	push	{r4}
 8018a52:	6858      	ldr	r0, [r3, #4]
 8018a54:	681c      	ldr	r4, [r3, #0]
 8018a56:	1b03      	subs	r3, r0, r4
	uint8_t sum = 0;
	if (start_index > message.size()) return false;
 8018a58:	4299      	cmp	r1, r3
 8018a5a:	d810      	bhi.n	8018a7e <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x2e>
	if (end_index > message.size()) return false;
 8018a5c:	429a      	cmp	r2, r3
 8018a5e:	d812      	bhi.n	8018a86 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x36>
	if (start_index > end_index) return false;
 8018a60:	4291      	cmp	r1, r2
 8018a62:	d812      	bhi.n	8018a8a <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x3a>
	uint8_t sum = 0;
 8018a64:	2000      	movs	r0, #0
	for (uint16_t index = start_index; index < end_index; index++) {
 8018a66:	4291      	cmp	r1, r2
 8018a68:	d205      	bcs.n	8018a76 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x26>
		sum += message[index];
 8018a6a:	5c63      	ldrb	r3, [r4, r1]
 8018a6c:	4418      	add	r0, r3
 8018a6e:	b2c0      	uxtb	r0, r0
	for (uint16_t index = start_index; index < end_index; index++) {
 8018a70:	3101      	adds	r1, #1
 8018a72:	b289      	uxth	r1, r1
 8018a74:	e7f7      	b.n	8018a66 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x16>
	}
	return (sum == 0);
 8018a76:	fab0 f080 	clz	r0, r0
 8018a7a:	0940      	lsrs	r0, r0, #5
 8018a7c:	e000      	b.n	8018a80 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x30>
	if (start_index > message.size()) return false;
 8018a7e:	2000      	movs	r0, #0
}
 8018a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a84:	4770      	bx	lr
	if (end_index > message.size()) return false;
 8018a86:	2000      	movs	r0, #0
 8018a88:	e7fa      	b.n	8018a80 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x30>
	if (start_index > end_index) return false;
 8018a8a:	2000      	movs	r0, #0
 8018a8c:	e7f8      	b.n	8018a80 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x30>

08018a8e <_ZN12UARTProtocol7IsRS485Eh>:
	RS485_interfaces.push_back(ID);
	return true;
}

bool UARTProtocol::IsRS485(uint8_t ID) {
	for (uint8_t &RS485_interface : RS485_interfaces) {
 8018a8e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8018a90:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8018a92:	e000      	b.n	8018a96 <_ZN12UARTProtocol7IsRS485Eh+0x8>
	++_M_current;
 8018a94:	1c53      	adds	r3, r2, #1
    { return __lhs.base() != __rhs.base(); }
 8018a96:	461a      	mov	r2, r3
 8018a98:	4298      	cmp	r0, r3
 8018a9a:	d004      	beq.n	8018aa6 <_ZN12UARTProtocol7IsRS485Eh+0x18>
		if (RS485_interface == ID) return true;
 8018a9c:	781b      	ldrb	r3, [r3, #0]
 8018a9e:	428b      	cmp	r3, r1
 8018aa0:	d1f8      	bne.n	8018a94 <_ZN12UARTProtocol7IsRS485Eh+0x6>
 8018aa2:	2001      	movs	r0, #1
 8018aa4:	4770      	bx	lr
	}
	return false;
 8018aa6:	2000      	movs	r0, #0
}
 8018aa8:	4770      	bx	lr

08018aaa <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12GetInterfaceEhPb>:
H* TemplateCommunicationProtocol<H>::GetInterface(uint8_t ID, bool* success) {
 8018aaa:	b538      	push	{r3, r4, r5, lr}
 8018aac:	4605      	mov	r5, r0
 8018aae:	4614      	mov	r4, r2
	uint8_t index = GetInterfaceIndex(ID, success);
 8018ab0:	f7ff f9be 	bl	8017e30 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	if (*success) {
 8018ab4:	7823      	ldrb	r3, [r4, #0]
 8018ab6:	b11b      	cbz	r3, 8018ac0 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12GetInterfaceEhPb+0x16>
	return *(this->_M_impl._M_start + __n);
 8018ab8:	6bab      	ldr	r3, [r5, #56]	; 0x38
		return interfaces[index];
 8018aba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8018abe:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
 8018ac0:	2000      	movs	r0, #0
 8018ac2:	e7fc      	b.n	8018abe <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12GetInterfaceEhPb+0x14>

08018ac4 <_ZN12UARTProtocol17ActivateReceptionEh>:
HAL_StatusTypeDef UARTProtocol::ActivateReception(uint8_t ID) {
 8018ac4:	b570      	push	{r4, r5, r6, lr}
 8018ac6:	b082      	sub	sp, #8
 8018ac8:	4605      	mov	r5, r0
 8018aca:	460e      	mov	r6, r1
	UART_HandleTypeDef* handle = GetInterface(ID, &success);
 8018acc:	f10d 0207 	add.w	r2, sp, #7
 8018ad0:	f7ff ffeb 	bl	8018aaa <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 8018ad4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018ad8:	b913      	cbnz	r3, 8018ae0 <_ZN12UARTProtocol17ActivateReceptionEh+0x1c>
 8018ada:	2001      	movs	r0, #1
}
 8018adc:	b002      	add	sp, #8
 8018ade:	bd70      	pop	{r4, r5, r6, pc}
 8018ae0:	4604      	mov	r4, r0
	std::vector<uint8_t>* buffer = GetBuffer(ID, &success);
 8018ae2:	f10d 0207 	add.w	r2, sp, #7
 8018ae6:	4631      	mov	r1, r6
 8018ae8:	4628      	mov	r0, r5
 8018aea:	f7ff f9d3 	bl	8017e94 <_ZN21CommunicationProtocol9GetBufferEhPb>
 8018aee:	4605      	mov	r5, r0
	if (not success) return HAL_ERROR;
 8018af0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018af4:	b90b      	cbnz	r3, 8018afa <_ZN12UARTProtocol17ActivateReceptionEh+0x36>
 8018af6:	2001      	movs	r0, #1
 8018af8:	e7f0      	b.n	8018adc <_ZN12UARTProtocol17ActivateReceptionEh+0x18>
	status = UART_CheckIdleState(handle); // to reset UART RxState
 8018afa:	4620      	mov	r0, r4
 8018afc:	f7f3 f8ad 	bl	800bc5a <UART_CheckIdleState>
		status = HAL_UARTEx_ReceiveToIdle_DMA(handle, buffer->data(), BUFFER_SIZE);
 8018b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018b04:	6829      	ldr	r1, [r5, #0]
 8018b06:	4620      	mov	r0, r4
 8018b08:	f7f3 fa44 	bl	800bf94 <HAL_UARTEx_ReceiveToIdle_DMA>
	} while (status == HAL_BUSY);
 8018b0c:	2802      	cmp	r0, #2
 8018b0e:	d0f7      	beq.n	8018b00 <_ZN12UARTProtocol17ActivateReceptionEh+0x3c>
 8018b10:	e7e4      	b.n	8018adc <_ZN12UARTProtocol17ActivateReceptionEh+0x18>

08018b12 <_ZN12UARTProtocol10SetAsRS485Eh>:
bool UARTProtocol::SetAsRS485(uint8_t ID) {
 8018b12:	b510      	push	{r4, lr}
 8018b14:	b082      	sub	sp, #8
 8018b16:	4604      	mov	r4, r0
 8018b18:	f88d 1007 	strb.w	r1, [sp, #7]
	if (IsRS485(ID)) return false;
 8018b1c:	b2c9      	uxtb	r1, r1
 8018b1e:	f7ff ffb6 	bl	8018a8e <_ZN12UARTProtocol7IsRS485Eh>
 8018b22:	b110      	cbz	r0, 8018b2a <_ZN12UARTProtocol10SetAsRS485Eh+0x18>
 8018b24:	2000      	movs	r0, #0
}
 8018b26:	b002      	add	sp, #8
 8018b28:	bd10      	pop	{r4, pc}
	RS485_interfaces.push_back(ID);
 8018b2a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8018b2e:	6841      	ldr	r1, [r0, #4]
 8018b30:	6883      	ldr	r3, [r0, #8]
 8018b32:	4299      	cmp	r1, r3
 8018b34:	d007      	beq.n	8018b46 <_ZN12UARTProtocol10SetAsRS485Eh+0x34>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8018b36:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018b3a:	700b      	strb	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 8018b3c:	6843      	ldr	r3, [r0, #4]
 8018b3e:	3301      	adds	r3, #1
 8018b40:	6043      	str	r3, [r0, #4]
	return true;
 8018b42:	2001      	movs	r0, #1
      }
 8018b44:	e7ef      	b.n	8018b26 <_ZN12UARTProtocol10SetAsRS485Eh+0x14>
	  _M_realloc_insert(end(), __x);
 8018b46:	f10d 0207 	add.w	r2, sp, #7
 8018b4a:	f7e8 fbed 	bl	8001328 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 8018b4e:	e7f8      	b.n	8018b42 <_ZN12UARTProtocol10SetAsRS485Eh+0x30>

08018b50 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
MessageHeader UARTProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> message, uint16_t* index, bool* success) {
 8018b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b54:	b09f      	sub	sp, #124	; 0x7c
 8018b56:	4606      	mov	r6, r0
 8018b58:	460c      	mov	r4, r1
 8018b5a:	4692      	mov	sl, r2
 8018b5c:	461d      	mov	r5, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018b5e:	2300      	movs	r3, #0
 8018b60:	6043      	str	r3, [r0, #4]
 8018b62:	6083      	str	r3, [r0, #8]
 8018b64:	60c3      	str	r3, [r0, #12]
	if (IsRS485(ID)) RS485_offset = 1;
 8018b66:	4611      	mov	r1, r2
 8018b68:	4620      	mov	r0, r4
 8018b6a:	f7ff ff90 	bl	8018a8e <_ZN12UARTProtocol7IsRS485Eh>
 8018b6e:	2800      	cmp	r0, #0
 8018b70:	d17b      	bne.n	8018c6a <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x11a>
	uint16_t RS485_offset = 0;
 8018b72:	2300      	movs	r3, #0
 8018b74:	9303      	str	r3, [sp, #12]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018b76:	6869      	ldr	r1, [r5, #4]
 8018b78:	682a      	ldr	r2, [r5, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018b7a:	2300      	movs	r3, #0
 8018b7c:	930c      	str	r3, [sp, #48]	; 0x30
 8018b7e:	930d      	str	r3, [sp, #52]	; 0x34
 8018b80:	930e      	str	r3, [sp, #56]	; 0x38
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018b82:	ebb1 0802 	subs.w	r8, r1, r2
 8018b86:	d075      	beq.n	8018c74 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x124>
	if (__n > this->_M_max_size())
 8018b88:	4598      	cmp	r8, r3
 8018b8a:	db71      	blt.n	8018c70 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x120>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018b8c:	4640      	mov	r0, r8
 8018b8e:	f002 f9ff 	bl	801af90 <_Znwj>
 8018b92:	4607      	mov	r7, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8018b94:	970c      	str	r7, [sp, #48]	; 0x30
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8018b96:	970d      	str	r7, [sp, #52]	; 0x34
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018b98:	eb07 0308 	add.w	r3, r7, r8
 8018b9c:	930e      	str	r3, [sp, #56]	; 0x38
      : _M_current(__i) { }
 8018b9e:	f8d5 8004 	ldr.w	r8, [r5, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8018ba2:	46bb      	mov	fp, r7
      return std::__niter_wrap(__result,
 8018ba4:	6828      	ldr	r0, [r5, #0]
 8018ba6:	f7e8 ff86 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8018baa:	4681      	mov	r9, r0
 8018bac:	4640      	mov	r0, r8
 8018bae:	f7e8 ff82 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8018bb2:	ebb0 0809 	subs.w	r8, r0, r9
 8018bb6:	d15f      	bne.n	8018c78 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x128>
	  return __result + _Num;
 8018bb8:	eb0b 0008 	add.w	r0, fp, r8
	this->_M_impl._M_finish =
 8018bbc:	900d      	str	r0, [sp, #52]	; 0x34
	uint16_t start_index = DetectPattern(message, protocol_start, *index, success);
 8018bbe:	f104 0944 	add.w	r9, r4, #68	; 0x44
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018bc2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018bc6:	6c62      	ldr	r2, [r4, #68]	; 0x44
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018bc8:	2300      	movs	r3, #0
 8018bca:	930f      	str	r3, [sp, #60]	; 0x3c
 8018bcc:	9310      	str	r3, [sp, #64]	; 0x40
 8018bce:	9311      	str	r3, [sp, #68]	; 0x44
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018bd0:	ebb1 0802 	subs.w	r8, r1, r2
 8018bd4:	d058      	beq.n	8018c88 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x138>
	if (__n > this->_M_max_size())
 8018bd6:	4598      	cmp	r8, r3
 8018bd8:	db54      	blt.n	8018c84 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x134>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018bda:	4640      	mov	r0, r8
 8018bdc:	f002 f9d8 	bl	801af90 <_Znwj>
 8018be0:	4607      	mov	r7, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8018be2:	970f      	str	r7, [sp, #60]	; 0x3c
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8018be4:	9710      	str	r7, [sp, #64]	; 0x40
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018be6:	eb07 0308 	add.w	r3, r7, r8
 8018bea:	9311      	str	r3, [sp, #68]	; 0x44
 8018bec:	f8d9 8004 	ldr.w	r8, [r9, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8018bf0:	46bb      	mov	fp, r7
      return std::__niter_wrap(__result,
 8018bf2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8018bf4:	f7e8 ff5f 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8018bf8:	4681      	mov	r9, r0
 8018bfa:	4640      	mov	r0, r8
 8018bfc:	f7e8 ff5b 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8018c00:	ebb0 0809 	subs.w	r8, r0, r9
 8018c04:	d142      	bne.n	8018c8c <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x13c>
	  return __result + _Num;
 8018c06:	eb0b 0008 	add.w	r0, fp, r8
	this->_M_impl._M_finish =
 8018c0a:	9010      	str	r0, [sp, #64]	; 0x40
 8018c0c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018c0e:	9300      	str	r3, [sp, #0]
 8018c10:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018c12:	881b      	ldrh	r3, [r3, #0]
 8018c14:	aa0f      	add	r2, sp, #60	; 0x3c
 8018c16:	a90c      	add	r1, sp, #48	; 0x30
 8018c18:	4620      	mov	r0, r4
 8018c1a:	f7ff fed3 	bl	80189c4 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb>
 8018c1e:	4683      	mov	fp, r0
	_M_deallocate(_M_impl._M_start,
 8018c20:	980f      	ldr	r0, [sp, #60]	; 0x3c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8018c22:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018c24:	1a09      	subs	r1, r1, r0
	if (__p)
 8018c26:	b108      	cbz	r0, 8018c2c <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0xdc>
	::operator delete(__p
 8018c28:	f002 f99c 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8018c2c:	980c      	ldr	r0, [sp, #48]	; 0x30
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8018c2e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018c30:	1a09      	subs	r1, r1, r0
	if (__p)
 8018c32:	b108      	cbz	r0, 8018c38 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0xe8>
 8018c34:	f002 f996 	bl	801af64 <_ZdlPvj>
	if (*success) {
 8018c38:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018c3a:	781b      	ldrb	r3, [r3, #0]
 8018c3c:	b18b      	cbz	r3, 8018c62 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x112>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018c3e:	686b      	ldr	r3, [r5, #4]
 8018c40:	f8d5 8000 	ldr.w	r8, [r5]
 8018c44:	eba3 0308 	sub.w	r3, r3, r8
 8018c48:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8018c4a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8018c4c:	1abf      	subs	r7, r7, r2
		if (message.size() <= start_index + protocol_start.size() + 1 + RS485_offset) {*success = false; return decoded_message;} // Error - discard message
 8018c4e:	445f      	add	r7, fp
 8018c50:	9a03      	ldr	r2, [sp, #12]
 8018c52:	4691      	mov	r9, r2
 8018c54:	18ba      	adds	r2, r7, r2
 8018c56:	3201      	adds	r2, #1
 8018c58:	429a      	cmp	r2, r3
 8018c5a:	d31d      	bcc.n	8018c98 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x148>
 8018c5c:	2300      	movs	r3, #0
 8018c5e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018c60:	7013      	strb	r3, [r2, #0]
}
 8018c62:	4630      	mov	r0, r6
 8018c64:	b01f      	add	sp, #124	; 0x7c
 8018c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (IsRS485(ID)) RS485_offset = 1;
 8018c6a:	2301      	movs	r3, #1
 8018c6c:	9303      	str	r3, [sp, #12]
 8018c6e:	e782      	b.n	8018b76 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x26>
	  std::__throw_bad_alloc();
 8018c70:	f002 fa3c 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018c74:	2700      	movs	r7, #0
 8018c76:	e78d      	b.n	8018b94 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8018c78:	4642      	mov	r2, r8
 8018c7a:	4649      	mov	r1, r9
 8018c7c:	4638      	mov	r0, r7
 8018c7e:	f002 fe45 	bl	801b90c <memmove>
 8018c82:	e799      	b.n	8018bb8 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x68>
 8018c84:	f002 fa32 	bl	801b0ec <_ZSt17__throw_bad_allocv>
 8018c88:	2700      	movs	r7, #0
 8018c8a:	e7aa      	b.n	8018be2 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x92>
 8018c8c:	4642      	mov	r2, r8
 8018c8e:	4649      	mov	r1, r9
 8018c90:	4638      	mov	r0, r7
 8018c92:	f002 fe3b 	bl	801b90c <memmove>
 8018c96:	e7b6      	b.n	8018c06 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0xb6>
		if (IsRS485(ID))
 8018c98:	4651      	mov	r1, sl
 8018c9a:	4620      	mov	r0, r4
 8018c9c:	f7ff fef7 	bl	8018a8e <_ZN12UARTProtocol7IsRS485Eh>
 8018ca0:	b340      	cbz	r0, 8018cf4 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x1a4>
			decoded_message.target_address = message[start_index + protocol_start.size()];
 8018ca2:	f818 3007 	ldrb.w	r3, [r8, r7]
 8018ca6:	7433      	strb	r3, [r6, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018ca8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8018caa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8018cac:	1a9b      	subs	r3, r3, r2
		decoded_message.source_address = message[start_index + protocol_start.size() + RS485_offset];
 8018cae:	445b      	add	r3, fp
 8018cb0:	444b      	add	r3, r9
	return *(this->_M_impl._M_start + __n);
 8018cb2:	682a      	ldr	r2, [r5, #0]
 8018cb4:	5cd3      	ldrb	r3, [r2, r3]
 8018cb6:	7473      	strb	r3, [r6, #17]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018cb8:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8018cba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018cbc:	1aff      	subs	r7, r7, r3
		uint16_t length = message[start_index + protocol_start.size() + 1 + RS485_offset];
 8018cbe:	eb0b 0307 	add.w	r3, fp, r7
 8018cc2:	eb09 0103 	add.w	r1, r9, r3
 8018cc6:	3101      	adds	r1, #1
	return *(this->_M_impl._M_start + __n);
 8018cc8:	682a      	ldr	r2, [r5, #0]
 8018cca:	f812 8001 	ldrb.w	r8, [r2, r1]
 8018cce:	fa1f f188 	uxth.w	r1, r8
 8018cd2:	9104      	str	r1, [sp, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018cd4:	6869      	ldr	r1, [r5, #4]
 8018cd6:	eba1 0c02 	sub.w	ip, r1, r2
		if (message.size() <= start_index + protocol_start.size() + length + 2 + RS485_offset + protocol_end.size()) {*success = false; return decoded_message;} // Error - discard message
 8018cda:	4443      	add	r3, r8
 8018cdc:	444b      	add	r3, r9
 8018cde:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8018ce0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8018ce2:	1a09      	subs	r1, r1, r0
 8018ce4:	440b      	add	r3, r1
 8018ce6:	3302      	adds	r3, #2
 8018ce8:	4563      	cmp	r3, ip
 8018cea:	d306      	bcc.n	8018cfa <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x1aa>
 8018cec:	2300      	movs	r3, #0
 8018cee:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018cf0:	7013      	strb	r3, [r2, #0]
 8018cf2:	e7b6      	b.n	8018c62 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x112>
			decoded_message.target_address = ALL;
 8018cf4:	23ff      	movs	r3, #255	; 0xff
 8018cf6:	7433      	strb	r3, [r6, #16]
 8018cf8:	e7d6      	b.n	8018ca8 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x158>
		decoded_message.payload = std::vector<uint8_t>(message.begin() + start_index + protocol_start.size() + 2 + RS485_offset, message.begin() + start_index + protocol_start.size() + 2 + RS485_offset + length);
 8018cfa:	f106 0a04 	add.w	sl, r6, #4
      { return __normal_iterator(_M_current + __n); }
 8018cfe:	445a      	add	r2, fp
 8018d00:	4417      	add	r7, r2
 8018d02:	3702      	adds	r7, #2
 8018d04:	44b9      	add	r9, r7
 8018d06:	eb09 0308 	add.w	r3, r9, r8
 8018d0a:	9305      	str	r3, [sp, #20]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018d0c:	2300      	movs	r3, #0
 8018d0e:	9312      	str	r3, [sp, #72]	; 0x48
 8018d10:	9313      	str	r3, [sp, #76]	; 0x4c
 8018d12:	9314      	str	r3, [sp, #80]	; 0x50
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018d14:	f1b8 0f00 	cmp.w	r8, #0
 8018d18:	f000 8089 	beq.w	8018e2e <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x2de>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018d1c:	4640      	mov	r0, r8
 8018d1e:	f002 f937 	bl	801af90 <_Znwj>
 8018d22:	4607      	mov	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8018d24:	9712      	str	r7, [sp, #72]	; 0x48
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018d26:	eb07 0308 	add.w	r3, r7, r8
 8018d2a:	9314      	str	r3, [sp, #80]	; 0x50
      return std::__niter_wrap(__result,
 8018d2c:	4648      	mov	r0, r9
 8018d2e:	f7e8 fec1 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8018d32:	4681      	mov	r9, r0
 8018d34:	9805      	ldr	r0, [sp, #20]
 8018d36:	f7e8 febd 	bl	8001ab4 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
	  if (_Num)
 8018d3a:	ebb0 0809 	subs.w	r8, r0, r9
 8018d3e:	d178      	bne.n	8018e32 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x2e2>
	  return __result + _Num;
 8018d40:	eb07 0c08 	add.w	ip, r7, r8
	  this->_M_impl._M_finish =
 8018d44:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018d48:	2300      	movs	r3, #0
 8018d4a:	9306      	str	r3, [sp, #24]
 8018d4c:	9307      	str	r3, [sp, #28]
 8018d4e:	9308      	str	r3, [sp, #32]
 8018d50:	9309      	str	r3, [sp, #36]	; 0x24
 8018d52:	930a      	str	r3, [sp, #40]	; 0x28
 8018d54:	930b      	str	r3, [sp, #44]	; 0x2c
	  _M_start = __x._M_start;
 8018d56:	6870      	ldr	r0, [r6, #4]
 8018d58:	9009      	str	r0, [sp, #36]	; 0x24
	  _M_finish = __x._M_finish;
 8018d5a:	f8da 7004 	ldr.w	r7, [sl, #4]
 8018d5e:	970a      	str	r7, [sp, #40]	; 0x28
	  _M_end_of_storage = __x._M_end_of_storage;
 8018d60:	f8da 1008 	ldr.w	r1, [sl, #8]
 8018d64:	910b      	str	r1, [sp, #44]	; 0x2c
	  _M_start = __x._M_start;
 8018d66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018d68:	6072      	str	r2, [r6, #4]
	  _M_finish = __x._M_finish;
 8018d6a:	f8ca c004 	str.w	ip, [sl, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8018d6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018d70:	f8ca 2008 	str.w	r2, [sl, #8]
	  _M_start = __x._M_start;
 8018d74:	9012      	str	r0, [sp, #72]	; 0x48
	  _M_finish = __x._M_finish;
 8018d76:	9713      	str	r7, [sp, #76]	; 0x4c
	  _M_end_of_storage = __x._M_end_of_storage;
 8018d78:	9114      	str	r1, [sp, #80]	; 0x50
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8018d7c:	930a      	str	r3, [sp, #40]	; 0x28
 8018d7e:	930b      	str	r3, [sp, #44]	; 0x2c
	  _M_start = __x._M_start;
 8018d80:	9006      	str	r0, [sp, #24]
	  _M_finish = __x._M_finish;
 8018d82:	9707      	str	r7, [sp, #28]
	  _M_end_of_storage = __x._M_end_of_storage;
 8018d84:	9108      	str	r1, [sp, #32]
	  _M_start = __x._M_start;
 8018d86:	9312      	str	r3, [sp, #72]	; 0x48
	  _M_finish = __x._M_finish;
 8018d88:	9313      	str	r3, [sp, #76]	; 0x4c
	  _M_end_of_storage = __x._M_end_of_storage;
 8018d8a:	9314      	str	r3, [sp, #80]	; 0x50
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8018d8c:	1a09      	subs	r1, r1, r0
	if (__p)
 8018d8e:	b108      	cbz	r0, 8018d94 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x244>
	::operator delete(__p
 8018d90:	f002 f8e8 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8018d94:	9812      	ldr	r0, [sp, #72]	; 0x48
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8018d96:	9914      	ldr	r1, [sp, #80]	; 0x50
 8018d98:	1a09      	subs	r1, r1, r0
	if (__p)
 8018d9a:	b108      	cbz	r0, 8018da0 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x250>
 8018d9c:	f002 f8e2 	bl	801af64 <_ZdlPvj>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018da0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8018da2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8018da4:	eba3 0a02 	sub.w	sl, r3, r2
		if (!Checksum(start_index, start_index + protocol_start.size() + length + 3 + RS485_offset, message)) {*success = false; return decoded_message;} // Checksum Error - discard message
 8018da8:	44da      	add	sl, fp
 8018daa:	9b04      	ldr	r3, [sp, #16]
 8018dac:	fa13 fa8a 	uxtah	sl, r3, sl
 8018db0:	9b03      	ldr	r3, [sp, #12]
 8018db2:	fa13 fa8a 	uxtah	sl, r3, sl
 8018db6:	fa1f fa8a 	uxth.w	sl, sl
 8018dba:	f10a 0a03 	add.w	sl, sl, #3
 8018dbe:	fa1f fa8a 	uxth.w	sl, sl
 8018dc2:	6869      	ldr	r1, [r5, #4]
 8018dc4:	682a      	ldr	r2, [r5, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018dc6:	2300      	movs	r3, #0
 8018dc8:	9315      	str	r3, [sp, #84]	; 0x54
 8018dca:	9316      	str	r3, [sp, #88]	; 0x58
 8018dcc:	9317      	str	r3, [sp, #92]	; 0x5c
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018dce:	ebb1 0802 	subs.w	r8, r1, r2
 8018dd2:	d036      	beq.n	8018e42 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x2f2>
	if (__n > this->_M_max_size())
 8018dd4:	4598      	cmp	r8, r3
 8018dd6:	db32      	blt.n	8018e3e <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x2ee>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018dd8:	4640      	mov	r0, r8
 8018dda:	f002 f8d9 	bl	801af90 <_Znwj>
 8018dde:	4607      	mov	r7, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8018de0:	9715      	str	r7, [sp, #84]	; 0x54
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8018de2:	9716      	str	r7, [sp, #88]	; 0x58
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018de4:	eb07 0308 	add.w	r3, r7, r8
 8018de8:	9317      	str	r3, [sp, #92]	; 0x5c
      : _M_current(__i) { }
 8018dea:	f8d5 8004 	ldr.w	r8, [r5, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8018dee:	9705      	str	r7, [sp, #20]
      return std::__niter_wrap(__result,
 8018df0:	6828      	ldr	r0, [r5, #0]
 8018df2:	f7e8 fe60 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8018df6:	4681      	mov	r9, r0
 8018df8:	4640      	mov	r0, r8
 8018dfa:	f7e8 fe5c 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8018dfe:	ebb0 0809 	subs.w	r8, r0, r9
 8018e02:	d120      	bne.n	8018e46 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x2f6>
	  return __result + _Num;
 8018e04:	9805      	ldr	r0, [sp, #20]
 8018e06:	4440      	add	r0, r8
	this->_M_impl._M_finish =
 8018e08:	9016      	str	r0, [sp, #88]	; 0x58
 8018e0a:	ab15      	add	r3, sp, #84	; 0x54
 8018e0c:	4652      	mov	r2, sl
 8018e0e:	4659      	mov	r1, fp
 8018e10:	4620      	mov	r0, r4
 8018e12:	f7ff fe1d 	bl	8018a50 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE>
 8018e16:	4607      	mov	r7, r0
	_M_deallocate(_M_impl._M_start,
 8018e18:	9815      	ldr	r0, [sp, #84]	; 0x54
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8018e1a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8018e1c:	1a09      	subs	r1, r1, r0
	if (__p)
 8018e1e:	b108      	cbz	r0, 8018e24 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x2d4>
	::operator delete(__p
 8018e20:	f002 f8a0 	bl	801af64 <_ZdlPvj>
 8018e24:	b9af      	cbnz	r7, 8018e52 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x302>
 8018e26:	2300      	movs	r3, #0
 8018e28:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018e2a:	7013      	strb	r3, [r2, #0]
 8018e2c:	e719      	b.n	8018c62 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x112>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018e2e:	2700      	movs	r7, #0
 8018e30:	e778      	b.n	8018d24 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x1d4>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8018e32:	4642      	mov	r2, r8
 8018e34:	4649      	mov	r1, r9
 8018e36:	4638      	mov	r0, r7
 8018e38:	f002 fd68 	bl	801b90c <memmove>
 8018e3c:	e780      	b.n	8018d40 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x1f0>
	  std::__throw_bad_alloc();
 8018e3e:	f002 f955 	bl	801b0ec <_ZSt17__throw_bad_allocv>
 8018e42:	2700      	movs	r7, #0
 8018e44:	e7cc      	b.n	8018de0 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x290>
 8018e46:	4642      	mov	r2, r8
 8018e48:	4649      	mov	r1, r9
 8018e4a:	4638      	mov	r0, r7
 8018e4c:	f002 fd5e 	bl	801b90c <memmove>
 8018e50:	e7d8      	b.n	8018e04 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x2b4>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018e52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8018e54:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8018e56:	eba3 0902 	sub.w	r9, r3, r2
		if (!PatternPresentAt(start_index + protocol_start.size() + length + 3 + RS485_offset, message, protocol_end)) {*success = false; return decoded_message;} // Checksum Error - discard message
 8018e5a:	44d9      	add	r9, fp
 8018e5c:	9b04      	ldr	r3, [sp, #16]
 8018e5e:	fa13 f989 	uxtah	r9, r3, r9
 8018e62:	9b03      	ldr	r3, [sp, #12]
 8018e64:	fa13 f989 	uxtah	r9, r3, r9
 8018e68:	fa1f f989 	uxth.w	r9, r9
 8018e6c:	f109 0903 	add.w	r9, r9, #3
 8018e70:	fa1f f989 	uxth.w	r9, r9
 8018e74:	686f      	ldr	r7, [r5, #4]
 8018e76:	682a      	ldr	r2, [r5, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018e78:	2300      	movs	r3, #0
 8018e7a:	9318      	str	r3, [sp, #96]	; 0x60
 8018e7c:	9319      	str	r3, [sp, #100]	; 0x64
 8018e7e:	931a      	str	r3, [sp, #104]	; 0x68
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018e80:	1abf      	subs	r7, r7, r2
 8018e82:	d056      	beq.n	8018f32 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x3e2>
	if (__n > this->_M_max_size())
 8018e84:	429f      	cmp	r7, r3
 8018e86:	db52      	blt.n	8018f2e <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x3de>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018e88:	4638      	mov	r0, r7
 8018e8a:	f002 f881 	bl	801af90 <_Znwj>
 8018e8e:	4680      	mov	r8, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8018e90:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8018e94:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018e98:	4447      	add	r7, r8
 8018e9a:	971a      	str	r7, [sp, #104]	; 0x68
 8018e9c:	686f      	ldr	r7, [r5, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8018e9e:	46c2      	mov	sl, r8
      return std::__niter_wrap(__result,
 8018ea0:	6828      	ldr	r0, [r5, #0]
 8018ea2:	f7e8 fe08 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8018ea6:	4605      	mov	r5, r0
 8018ea8:	4638      	mov	r0, r7
 8018eaa:	f7e8 fe04 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8018eae:	1b47      	subs	r7, r0, r5
 8018eb0:	d142      	bne.n	8018f38 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x3e8>
	  return __result + _Num;
 8018eb2:	4457      	add	r7, sl
	this->_M_impl._M_finish =
 8018eb4:	9719      	str	r7, [sp, #100]	; 0x64
 8018eb6:	f104 0850 	add.w	r8, r4, #80	; 0x50
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018eba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018ebe:	6d22      	ldr	r2, [r4, #80]	; 0x50
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018ec0:	2300      	movs	r3, #0
 8018ec2:	931b      	str	r3, [sp, #108]	; 0x6c
 8018ec4:	931c      	str	r3, [sp, #112]	; 0x70
 8018ec6:	931d      	str	r3, [sp, #116]	; 0x74
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018ec8:	1aad      	subs	r5, r5, r2
 8018eca:	d03d      	beq.n	8018f48 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x3f8>
	if (__n > this->_M_max_size())
 8018ecc:	429d      	cmp	r5, r3
 8018ece:	db39      	blt.n	8018f44 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x3f4>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018ed0:	4628      	mov	r0, r5
 8018ed2:	f002 f85d 	bl	801af90 <_Znwj>
 8018ed6:	4607      	mov	r7, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8018ed8:	971b      	str	r7, [sp, #108]	; 0x6c
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8018eda:	971c      	str	r7, [sp, #112]	; 0x70
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018edc:	443d      	add	r5, r7
 8018ede:	951d      	str	r5, [sp, #116]	; 0x74
 8018ee0:	f8d8 5004 	ldr.w	r5, [r8, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8018ee4:	46ba      	mov	sl, r7
      return std::__niter_wrap(__result,
 8018ee6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8018ee8:	f7e8 fde5 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8018eec:	4680      	mov	r8, r0
 8018eee:	4628      	mov	r0, r5
 8018ef0:	f7e8 fde1 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8018ef4:	ebb0 0508 	subs.w	r5, r0, r8
 8018ef8:	d128      	bne.n	8018f4c <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x3fc>
	  return __result + _Num;
 8018efa:	4455      	add	r5, sl
	this->_M_impl._M_finish =
 8018efc:	951c      	str	r5, [sp, #112]	; 0x70
 8018efe:	ab1b      	add	r3, sp, #108	; 0x6c
 8018f00:	aa18      	add	r2, sp, #96	; 0x60
 8018f02:	4649      	mov	r1, r9
 8018f04:	4620      	mov	r0, r4
 8018f06:	f7ff fd81 	bl	8018a0c <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_>
 8018f0a:	4605      	mov	r5, r0
	_M_deallocate(_M_impl._M_start,
 8018f0c:	981b      	ldr	r0, [sp, #108]	; 0x6c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8018f0e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8018f10:	1a09      	subs	r1, r1, r0
	if (__p)
 8018f12:	b108      	cbz	r0, 8018f18 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x3c8>
	::operator delete(__p
 8018f14:	f002 f826 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8018f18:	9818      	ldr	r0, [sp, #96]	; 0x60
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8018f1a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8018f1c:	1a09      	subs	r1, r1, r0
	if (__p)
 8018f1e:	b108      	cbz	r0, 8018f24 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x3d4>
 8018f20:	f002 f820 	bl	801af64 <_ZdlPvj>
 8018f24:	b9c5      	cbnz	r5, 8018f58 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x408>
 8018f26:	2300      	movs	r3, #0
 8018f28:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018f2a:	7013      	strb	r3, [r2, #0]
 8018f2c:	e699      	b.n	8018c62 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x112>
	  std::__throw_bad_alloc();
 8018f2e:	f002 f8dd 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018f32:	f04f 0800 	mov.w	r8, #0
 8018f36:	e7ab      	b.n	8018e90 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x340>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8018f38:	463a      	mov	r2, r7
 8018f3a:	4629      	mov	r1, r5
 8018f3c:	4640      	mov	r0, r8
 8018f3e:	f002 fce5 	bl	801b90c <memmove>
 8018f42:	e7b6      	b.n	8018eb2 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x362>
 8018f44:	f002 f8d2 	bl	801b0ec <_ZSt17__throw_bad_allocv>
 8018f48:	2700      	movs	r7, #0
 8018f4a:	e7c5      	b.n	8018ed8 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x388>
 8018f4c:	462a      	mov	r2, r5
 8018f4e:	4641      	mov	r1, r8
 8018f50:	4638      	mov	r0, r7
 8018f52:	f002 fcdb 	bl	801b90c <memmove>
 8018f56:	e7d0      	b.n	8018efa <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x3aa>
		*success = true;
 8018f58:	2301      	movs	r3, #1
 8018f5a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018f5c:	7013      	strb	r3, [r2, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018f5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8018f60:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8018f62:	1a9b      	subs	r3, r3, r2
		*index = start_index + protocol_start.size() + length + 3 + RS485_offset + protocol_end.size();
 8018f64:	445b      	add	r3, fp
 8018f66:	9a04      	ldr	r2, [sp, #16]
 8018f68:	fa12 f383 	uxtah	r3, r2, r3
 8018f6c:	9a03      	ldr	r2, [sp, #12]
 8018f6e:	fa12 f383 	uxtah	r3, r2, r3
 8018f72:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8018f74:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8018f76:	1a52      	subs	r2, r2, r1
 8018f78:	fa12 f383 	uxtah	r3, r2, r3
 8018f7c:	3303      	adds	r3, #3
 8018f7e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8018f80:	8013      	strh	r3, [r2, #0]
 8018f82:	e66e      	b.n	8018c62 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x112>

08018f84 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader>:
std::vector<uint8_t> UARTProtocol::CodeProtocol(MessageHeader message) { // TODO put in a MessageHeader
 8018f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018f88:	b087      	sub	sp, #28
 8018f8a:	4604      	mov	r4, r0
 8018f8c:	460e      	mov	r6, r1
 8018f8e:	4615      	mov	r5, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018f90:	2100      	movs	r1, #0
 8018f92:	6001      	str	r1, [r0, #0]
 8018f94:	6041      	str	r1, [r0, #4]
 8018f96:	6081      	str	r1, [r0, #8]
	  _M_range_insert(__pos, __first, __last,
 8018f98:	f04f 0300 	mov.w	r3, #0
 8018f9c:	f88d 3000 	strb.w	r3, [sp]
 8018fa0:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8018fa2:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8018fa4:	f7e8 fe04 	bl	8001bb0 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag>
	if (IsRS485(message.interface)) coded_message.push_back(message.target_address);
 8018fa8:	7829      	ldrb	r1, [r5, #0]
 8018faa:	4630      	mov	r0, r6
 8018fac:	f7ff fd6f 	bl	8018a8e <_ZN12UARTProtocol7IsRS485Eh>
 8018fb0:	2800      	cmp	r0, #0
 8018fb2:	d15d      	bne.n	8019070 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader+0xec>
	coded_message.push_back(message.source_address);
 8018fb4:	f105 0211 	add.w	r2, r5, #17
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8018fb8:	6861      	ldr	r1, [r4, #4]
 8018fba:	68a3      	ldr	r3, [r4, #8]
 8018fbc:	4299      	cmp	r1, r3
 8018fbe:	d067      	beq.n	8019090 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader+0x10c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8018fc0:	7c6b      	ldrb	r3, [r5, #17]
 8018fc2:	700b      	strb	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 8018fc4:	6863      	ldr	r3, [r4, #4]
 8018fc6:	3301      	adds	r3, #1
 8018fc8:	6063      	str	r3, [r4, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018fca:	68ab      	ldr	r3, [r5, #8]
 8018fcc:	686a      	ldr	r2, [r5, #4]
 8018fce:	1a9b      	subs	r3, r3, r2
	coded_message.push_back((uint8_t) message.payload.size());
 8018fd0:	f88d 300a 	strb.w	r3, [sp, #10]
      { emplace_back(std::move(__x)); }
 8018fd4:	f10d 010a 	add.w	r1, sp, #10
 8018fd8:	4620      	mov	r0, r4
 8018fda:	f7f6 fa77 	bl	800f4cc <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	  _M_range_insert(__pos, __first, __last,
 8018fde:	f04f 0300 	mov.w	r3, #0
 8018fe2:	f88d 3000 	strb.w	r3, [sp]
 8018fe6:	68ab      	ldr	r3, [r5, #8]
 8018fe8:	686a      	ldr	r2, [r5, #4]
 8018fea:	6861      	ldr	r1, [r4, #4]
 8018fec:	4620      	mov	r0, r4
 8018fee:	f7e8 fddf 	bl	8001bb0 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018ff2:	6865      	ldr	r5, [r4, #4]
 8018ff4:	6822      	ldr	r2, [r4, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	9303      	str	r3, [sp, #12]
 8018ffa:	9304      	str	r3, [sp, #16]
 8018ffc:	9305      	str	r3, [sp, #20]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018ffe:	1aad      	subs	r5, r5, r2
 8019000:	d04c      	beq.n	801909c <_ZN12UARTProtocol12CodeProtocolE13MessageHeader+0x118>
	if (__n > this->_M_max_size())
 8019002:	429d      	cmp	r5, r3
 8019004:	db48      	blt.n	8019098 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader+0x114>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8019006:	4628      	mov	r0, r5
 8019008:	f001 ffc2 	bl	801af90 <_Znwj>
 801900c:	4607      	mov	r7, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 801900e:	9703      	str	r7, [sp, #12]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8019010:	9704      	str	r7, [sp, #16]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8019012:	443d      	add	r5, r7
 8019014:	9505      	str	r5, [sp, #20]
 8019016:	6865      	ldr	r5, [r4, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8019018:	46b9      	mov	r9, r7
      return std::__niter_wrap(__result,
 801901a:	6820      	ldr	r0, [r4, #0]
 801901c:	f7e8 fd4b 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8019020:	4680      	mov	r8, r0
 8019022:	4628      	mov	r0, r5
 8019024:	f7e8 fd47 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 8019028:	ebb0 0508 	subs.w	r5, r0, r8
 801902c:	d138      	bne.n	80190a0 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader+0x11c>
	  return __result + _Num;
 801902e:	444d      	add	r5, r9
	this->_M_impl._M_finish =
 8019030:	9504      	str	r5, [sp, #16]
	coded_message.push_back(GetChecksum(coded_message));
 8019032:	a903      	add	r1, sp, #12
 8019034:	4630      	mov	r0, r6
 8019036:	f7ff fcfe 	bl	8018a36 <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE>
 801903a:	f88d 000b 	strb.w	r0, [sp, #11]
      { emplace_back(std::move(__x)); }
 801903e:	f10d 010b 	add.w	r1, sp, #11
 8019042:	4620      	mov	r0, r4
 8019044:	f7f6 fa42 	bl	800f4cc <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	_M_deallocate(_M_impl._M_start,
 8019048:	9803      	ldr	r0, [sp, #12]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801904a:	9905      	ldr	r1, [sp, #20]
 801904c:	1a09      	subs	r1, r1, r0
	if (__p)
 801904e:	b108      	cbz	r0, 8019054 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader+0xd0>
	::operator delete(__p
 8019050:	f001 ff88 	bl	801af64 <_ZdlPvj>
	  _M_range_insert(__pos, __first, __last,
 8019054:	f04f 0300 	mov.w	r3, #0
 8019058:	f88d 3000 	strb.w	r3, [sp]
 801905c:	6d73      	ldr	r3, [r6, #84]	; 0x54
 801905e:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8019060:	6861      	ldr	r1, [r4, #4]
 8019062:	4620      	mov	r0, r4
 8019064:	f7e8 fda4 	bl	8001bb0 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag>
}
 8019068:	4620      	mov	r0, r4
 801906a:	b007      	add	sp, #28
 801906c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (IsRS485(message.interface)) coded_message.push_back(message.target_address);
 8019070:	f105 0210 	add.w	r2, r5, #16
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8019074:	6861      	ldr	r1, [r4, #4]
 8019076:	68a3      	ldr	r3, [r4, #8]
 8019078:	4299      	cmp	r1, r3
 801907a:	d005      	beq.n	8019088 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader+0x104>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801907c:	7c2b      	ldrb	r3, [r5, #16]
 801907e:	700b      	strb	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 8019080:	6863      	ldr	r3, [r4, #4]
 8019082:	3301      	adds	r3, #1
 8019084:	6063      	str	r3, [r4, #4]
 8019086:	e795      	b.n	8018fb4 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader+0x30>
	  _M_realloc_insert(end(), __x);
 8019088:	4620      	mov	r0, r4
 801908a:	f7e8 f94d 	bl	8001328 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
      }
 801908e:	e791      	b.n	8018fb4 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader+0x30>
	  _M_realloc_insert(end(), __x);
 8019090:	4620      	mov	r0, r4
 8019092:	f7e8 f949 	bl	8001328 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 8019096:	e798      	b.n	8018fca <_ZN12UARTProtocol12CodeProtocolE13MessageHeader+0x46>
	  std::__throw_bad_alloc();
 8019098:	f002 f828 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801909c:	2700      	movs	r7, #0
 801909e:	e7b6      	b.n	801900e <_ZN12UARTProtocol12CodeProtocolE13MessageHeader+0x8a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80190a0:	462a      	mov	r2, r5
 80190a2:	4641      	mov	r1, r8
 80190a4:	4638      	mov	r0, r7
 80190a6:	f002 fc31 	bl	801b90c <memmove>
 80190aa:	e7c0      	b.n	801902e <_ZN12UARTProtocol12CodeProtocolE13MessageHeader+0xaa>

080190ac <_ZN12UARTProtocol4SendE13MessageHeader>:
HAL_StatusTypeDef UARTProtocol::Send(MessageHeader message) {
 80190ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190b0:	b093      	sub	sp, #76	; 0x4c
 80190b2:	4606      	mov	r6, r0
 80190b4:	460c      	mov	r4, r1
	UART_HandleTypeDef* interface_ = GetInterface(message.interface, &success);
 80190b6:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 80190ba:	7809      	ldrb	r1, [r1, #0]
 80190bc:	f7ff fcf5 	bl	8018aaa <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12GetInterfaceEhPb>
	if (!success) return HAL_ERROR;
 80190c0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	f000 809a 	beq.w	80191fe <_ZN12UARTProtocol4SendE13MessageHeader+0x152>
 80190ca:	4605      	mov	r5, r0
	if (interface_->hdmatx->State != HAL_DMA_STATE_READY || interface_->gState != HAL_UART_STATE_READY) return HAL_BUSY;
 80190cc:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80190ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80190d2:	b2db      	uxtb	r3, r3
 80190d4:	2b01      	cmp	r3, #1
 80190d6:	f040 8096 	bne.w	8019206 <_ZN12UARTProtocol4SendE13MessageHeader+0x15a>
 80190da:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80190de:	2b20      	cmp	r3, #32
 80190e0:	d001      	beq.n	80190e6 <_ZN12UARTProtocol4SendE13MessageHeader+0x3a>
 80190e2:	2002      	movs	r0, #2
 80190e4:	e08c      	b.n	8019200 <_ZN12UARTProtocol4SendE13MessageHeader+0x154>
	uint8_t index = GetInterfaceIndex(message.interface, &success);
 80190e6:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 80190ea:	7821      	ldrb	r1, [r4, #0]
 80190ec:	4630      	mov	r0, r6
 80190ee:	f7fe fe9f 	bl	8017e30 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	return *(this->_M_impl._M_start + __n);
 80190f2:	f8d6 b004 	ldr.w	fp, [r6, #4]
 80190f6:	eb00 0740 	add.w	r7, r0, r0, lsl #1
 80190fa:	ea4f 0987 	mov.w	r9, r7, lsl #2
 80190fe:	eb0b 0787 	add.w	r7, fp, r7, lsl #2
struct MessageHeader {
 8019102:	46a2      	mov	sl, r4
 8019104:	f81a 3b04 	ldrb.w	r3, [sl], #4
 8019108:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801910c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8019110:	6862      	ldr	r2, [r4, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8019112:	2300      	movs	r3, #0
 8019114:	930e      	str	r3, [sp, #56]	; 0x38
 8019116:	930f      	str	r3, [sp, #60]	; 0x3c
 8019118:	9310      	str	r3, [sp, #64]	; 0x40
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801911a:	ebb1 0802 	subs.w	r8, r1, r2
 801911e:	d065      	beq.n	80191ec <_ZN12UARTProtocol4SendE13MessageHeader+0x140>
	if (__n > this->_M_max_size())
 8019120:	4598      	cmp	r8, r3
 8019122:	db61      	blt.n	80191e8 <_ZN12UARTProtocol4SendE13MessageHeader+0x13c>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8019124:	4640      	mov	r0, r8
 8019126:	f001 ff33 	bl	801af90 <_Znwj>
 801912a:	9000      	str	r0, [sp, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 801912c:	9a00      	ldr	r2, [sp, #0]
 801912e:	920e      	str	r2, [sp, #56]	; 0x38
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8019130:	920f      	str	r2, [sp, #60]	; 0x3c
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8019132:	eb02 0308 	add.w	r3, r2, r8
 8019136:	9310      	str	r3, [sp, #64]	; 0x40
 8019138:	f8da a004 	ldr.w	sl, [sl, #4]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 801913c:	9201      	str	r2, [sp, #4]
      return std::__niter_wrap(__result,
 801913e:	6860      	ldr	r0, [r4, #4]
 8019140:	f7e8 fcb9 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8019144:	4680      	mov	r8, r0
 8019146:	4650      	mov	r0, sl
 8019148:	f7e8 fcb5 	bl	8001ab6 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  if (_Num)
 801914c:	ebb0 0a08 	subs.w	sl, r0, r8
 8019150:	d14f      	bne.n	80191f2 <_ZN12UARTProtocol4SendE13MessageHeader+0x146>
	  return __result + _Num;
 8019152:	9801      	ldr	r0, [sp, #4]
 8019154:	4450      	add	r0, sl
	this->_M_impl._M_finish =
 8019156:	900f      	str	r0, [sp, #60]	; 0x3c
 8019158:	7c23      	ldrb	r3, [r4, #16]
 801915a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 801915e:	7c63      	ldrb	r3, [r4, #17]
 8019160:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
	buffers_to_transfer[index] = CodeProtocol(message); //std::vector<uint8_t>
 8019164:	aa0d      	add	r2, sp, #52	; 0x34
 8019166:	4631      	mov	r1, r6
 8019168:	a80a      	add	r0, sp, #40	; 0x28
 801916a:	f7ff ff0b 	bl	8018f84 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader>
	: _M_start(), _M_finish(), _M_end_of_storage()
 801916e:	2300      	movs	r3, #0
 8019170:	9303      	str	r3, [sp, #12]
 8019172:	9304      	str	r3, [sp, #16]
 8019174:	9305      	str	r3, [sp, #20]
 8019176:	9306      	str	r3, [sp, #24]
 8019178:	9307      	str	r3, [sp, #28]
 801917a:	9308      	str	r3, [sp, #32]
	  _M_start = __x._M_start;
 801917c:	f85b 0009 	ldr.w	r0, [fp, r9]
 8019180:	9006      	str	r0, [sp, #24]
	  _M_finish = __x._M_finish;
 8019182:	687c      	ldr	r4, [r7, #4]
 8019184:	9407      	str	r4, [sp, #28]
	  _M_end_of_storage = __x._M_end_of_storage;
 8019186:	68b9      	ldr	r1, [r7, #8]
 8019188:	9108      	str	r1, [sp, #32]
	  _M_start = __x._M_start;
 801918a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801918c:	f84b 2009 	str.w	r2, [fp, r9]
	  _M_finish = __x._M_finish;
 8019190:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019192:	607a      	str	r2, [r7, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8019194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019196:	60ba      	str	r2, [r7, #8]
	  _M_start = __x._M_start;
 8019198:	900a      	str	r0, [sp, #40]	; 0x28
	  _M_finish = __x._M_finish;
 801919a:	940b      	str	r4, [sp, #44]	; 0x2c
	  _M_end_of_storage = __x._M_end_of_storage;
 801919c:	910c      	str	r1, [sp, #48]	; 0x30
	: _M_start(), _M_finish(), _M_end_of_storage()
 801919e:	9306      	str	r3, [sp, #24]
 80191a0:	9307      	str	r3, [sp, #28]
 80191a2:	9308      	str	r3, [sp, #32]
	  _M_start = __x._M_start;
 80191a4:	9003      	str	r0, [sp, #12]
	  _M_finish = __x._M_finish;
 80191a6:	9404      	str	r4, [sp, #16]
	  _M_end_of_storage = __x._M_end_of_storage;
 80191a8:	9105      	str	r1, [sp, #20]
	  _M_start = __x._M_start;
 80191aa:	930a      	str	r3, [sp, #40]	; 0x28
	  _M_finish = __x._M_finish;
 80191ac:	930b      	str	r3, [sp, #44]	; 0x2c
	  _M_end_of_storage = __x._M_end_of_storage;
 80191ae:	930c      	str	r3, [sp, #48]	; 0x30
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80191b0:	1a09      	subs	r1, r1, r0
	if (__p)
 80191b2:	b108      	cbz	r0, 80191b8 <_ZN12UARTProtocol4SendE13MessageHeader+0x10c>
	::operator delete(__p
 80191b4:	f001 fed6 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80191b8:	980a      	ldr	r0, [sp, #40]	; 0x28
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80191ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80191bc:	1a09      	subs	r1, r1, r0
	if (__p)
 80191be:	b108      	cbz	r0, 80191c4 <_ZN12UARTProtocol4SendE13MessageHeader+0x118>
 80191c0:	f001 fed0 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80191c4:	980e      	ldr	r0, [sp, #56]	; 0x38
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80191c6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80191c8:	1a09      	subs	r1, r1, r0
	if (__p)
 80191ca:	b108      	cbz	r0, 80191d0 <_ZN12UARTProtocol4SendE13MessageHeader+0x124>
 80191cc:	f001 feca 	bl	801af64 <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80191d0:	6873      	ldr	r3, [r6, #4]
 80191d2:	eb03 0209 	add.w	r2, r3, r9
 80191d6:	f853 1009 	ldr.w	r1, [r3, r9]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80191da:	6852      	ldr	r2, [r2, #4]
 80191dc:	1a52      	subs	r2, r2, r1
	return HAL_UART_Transmit_DMA(interface_, &(buffers_to_transfer[index])[0], buffers_to_transfer[index].size());
 80191de:	b292      	uxth	r2, r2
 80191e0:	4628      	mov	r0, r5
 80191e2:	f7f1 fe75 	bl	800aed0 <HAL_UART_Transmit_DMA>
 80191e6:	e00b      	b.n	8019200 <_ZN12UARTProtocol4SendE13MessageHeader+0x154>
	  std::__throw_bad_alloc();
 80191e8:	f001 ff80 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80191ec:	2300      	movs	r3, #0
 80191ee:	9300      	str	r3, [sp, #0]
 80191f0:	e79c      	b.n	801912c <_ZN12UARTProtocol4SendE13MessageHeader+0x80>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80191f2:	4652      	mov	r2, sl
 80191f4:	4641      	mov	r1, r8
 80191f6:	9800      	ldr	r0, [sp, #0]
 80191f8:	f002 fb88 	bl	801b90c <memmove>
 80191fc:	e7a9      	b.n	8019152 <_ZN12UARTProtocol4SendE13MessageHeader+0xa6>
	if (!success) return HAL_ERROR;
 80191fe:	2001      	movs	r0, #1
}
 8019200:	b013      	add	sp, #76	; 0x4c
 8019202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (interface_->hdmatx->State != HAL_DMA_STATE_READY || interface_->gState != HAL_UART_STATE_READY) return HAL_BUSY;
 8019206:	2002      	movs	r0, #2
 8019208:	e7fa      	b.n	8019200 <_ZN12UARTProtocol4SendE13MessageHeader+0x154>

0801920a <_ZN10PublishersC1Ev>:
 *      Author: bignet
 */

#include <Publishers/Publishers.hpp>

Publishers::Publishers() {
 801920a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801920e:	4605      	mov	r5, r0
 8019210:	f100 080c 	add.w	r8, r0, #12
	: _M_start(), _M_finish(), _M_end_of_storage()
 8019214:	2300      	movs	r3, #0
 8019216:	60c3      	str	r3, [r0, #12]
 8019218:	6103      	str	r3, [r0, #16]
 801921a:	6143      	str	r3, [r0, #20]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801921c:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8019220:	42b3      	cmp	r3, r6
 8019222:	d015      	beq.n	8019250 <_ZN10PublishersC1Ev+0x46>
 8019224:	461f      	mov	r7, r3
 8019226:	461c      	mov	r4, r3
 8019228:	e000      	b.n	801922c <_ZN10PublishersC1Ev+0x22>
 801922a:	3420      	adds	r4, #32
 801922c:	42a6      	cmp	r6, r4
 801922e:	d00d      	beq.n	801924c <_ZN10PublishersC1Ev+0x42>
	_M_deallocate(_M_impl._M_start,
 8019230:	6960      	ldr	r0, [r4, #20]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8019232:	69e1      	ldr	r1, [r4, #28]
 8019234:	1a09      	subs	r1, r1, r0
	if (__p)
 8019236:	b108      	cbz	r0, 801923c <_ZN10PublishersC1Ev+0x32>
	::operator delete(__p
 8019238:	f001 fe94 	bl	801af64 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 801923c:	68a0      	ldr	r0, [r4, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801923e:	6921      	ldr	r1, [r4, #16]
 8019240:	1a09      	subs	r1, r1, r0
	if (__p)
 8019242:	2800      	cmp	r0, #0
 8019244:	d0f1      	beq.n	801922a <_ZN10PublishersC1Ev+0x20>
 8019246:	f001 fe8d 	bl	801af64 <_ZdlPvj>
 801924a:	e7ee      	b.n	801922a <_ZN10PublishersC1Ev+0x20>
	    this->_M_impl._M_finish = __pos;
 801924c:	f8c8 7004 	str.w	r7, [r8, #4]
	publishers.clear();
}
 8019250:	4628      	mov	r0, r5
 8019252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019256 <_ZN10Publishers4InitEP9RegistersP13Communication>:

void Publishers::Init(Registers* registers_, Communication* communication_) {
 8019256:	b510      	push	{r4, lr}
 8019258:	4604      	mov	r4, r0
	registers = registers_;
 801925a:	6041      	str	r1, [r0, #4]
	communication = communication_;
 801925c:	6082      	str	r2, [r0, #8]

	PublishersSemaphore = osSemaphoreNew(1,1,NULL);
 801925e:	2200      	movs	r2, #0
 8019260:	2101      	movs	r1, #1
 8019262:	4608      	mov	r0, r1
 8019264:	f7f3 facc 	bl	800c800 <osSemaphoreNew>
 8019268:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(PublishersSemaphore);
 801926a:	f7f3 fb59 	bl	800c920 <osSemaphoreRelease>
}
 801926e:	bd10      	pop	{r4, pc}

08019270 <_ZN10Publishers13FindPublisherEhPb>:
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
}

Publisher* Publishers::FindPublisher(uint8_t ID, bool* success) {
 8019270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019272:	4606      	mov	r6, r0
 8019274:	460d      	mov	r5, r1
 8019276:	4617      	mov	r7, r2
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8019278:	f04f 31ff 	mov.w	r1, #4294967295
 801927c:	6800      	ldr	r0, [r0, #0]
 801927e:	f7f3 fb1b 	bl	800c8b8 <osSemaphoreAcquire>
	for (Publisher &publisher : publishers) {
 8019282:	68f3      	ldr	r3, [r6, #12]
 8019284:	6931      	ldr	r1, [r6, #16]
 8019286:	e001      	b.n	801928c <_ZN10Publishers13FindPublisherEhPb+0x1c>
	++_M_current;
 8019288:	f104 0320 	add.w	r3, r4, #32
    { return __lhs.base() != __rhs.base(); }
 801928c:	461c      	mov	r4, r3
 801928e:	4299      	cmp	r1, r3
 8019290:	d008      	beq.n	80192a4 <_ZN10Publishers13FindPublisherEhPb+0x34>
		if (publisher.ID == ID) {
 8019292:	781b      	ldrb	r3, [r3, #0]
 8019294:	42ab      	cmp	r3, r5
 8019296:	d1f7      	bne.n	8019288 <_ZN10Publishers13FindPublisherEhPb+0x18>
			Publisher* publisher_pointer = &publisher;
			osSemaphoreRelease(PublishersSemaphore);
 8019298:	6830      	ldr	r0, [r6, #0]
 801929a:	f7f3 fb41 	bl	800c920 <osSemaphoreRelease>
			*success = true;
 801929e:	2301      	movs	r3, #1
 80192a0:	703b      	strb	r3, [r7, #0]
			return publisher_pointer;
 80192a2:	e004      	b.n	80192ae <_ZN10Publishers13FindPublisherEhPb+0x3e>
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 80192a4:	6830      	ldr	r0, [r6, #0]
 80192a6:	f7f3 fb3b 	bl	800c920 <osSemaphoreRelease>
	*success = false;
 80192aa:	2400      	movs	r4, #0
 80192ac:	703c      	strb	r4, [r7, #0]
	return NULL;
}
 80192ae:	4620      	mov	r0, r4
 80192b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080192b2 <_ZN10Publishers18SetPublisherStatusEhb>:
bool Publishers::SetPublisherStatus(uint8_t ID, bool status) {
 80192b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80192b4:	b083      	sub	sp, #12
 80192b6:	4604      	mov	r4, r0
 80192b8:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 80192ba:	f10d 0207 	add.w	r2, sp, #7
 80192be:	f7ff ffd7 	bl	8019270 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 80192c2:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80192c6:	b917      	cbnz	r7, 80192ce <_ZN10Publishers18SetPublisherStatusEhb+0x1c>
}
 80192c8:	4638      	mov	r0, r7
 80192ca:	b003      	add	sp, #12
 80192cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192ce:	4605      	mov	r5, r0
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80192d0:	f04f 31ff 	mov.w	r1, #4294967295
 80192d4:	6820      	ldr	r0, [r4, #0]
 80192d6:	f7f3 faef 	bl	800c8b8 <osSemaphoreAcquire>
	publisher->counter = 0;
 80192da:	2300      	movs	r3, #0
 80192dc:	80ab      	strh	r3, [r5, #4]
	publisher->activated = status;
 80192de:	706e      	strb	r6, [r5, #1]
	osSemaphoreRelease(PublishersSemaphore);
 80192e0:	6820      	ldr	r0, [r4, #0]
 80192e2:	f7f3 fb1d 	bl	800c920 <osSemaphoreRelease>
	return true;
 80192e6:	e7ef      	b.n	80192c8 <_ZN10Publishers18SetPublisherStatusEhb+0x16>

080192e8 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80192e8:	2b02      	cmp	r3, #2
 80192ea:	d001      	beq.n	80192f0 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x8>
 80192ec:	2000      	movs	r0, #0
		}
 80192ee:	4770      	bx	lr
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80192f0:	b508      	push	{r3, lr}
 80192f2:	4611      	mov	r1, r2
			self->SetPublisherStatus(input[0], (bool) input[1]);
 80192f4:	7852      	ldrb	r2, [r2, #1]
 80192f6:	3a00      	subs	r2, #0
 80192f8:	bf18      	it	ne
 80192fa:	2201      	movne	r2, #1
 80192fc:	7809      	ldrb	r1, [r1, #0]
 80192fe:	f7ff ffd8 	bl	80192b2 <_ZN10Publishers18SetPublisherStatusEhb>
			return true;
 8019302:	2001      	movs	r0, #1
		}
 8019304:	bd08      	pop	{r3, pc}

08019306 <_ZN10Publishers21SetPublisherPrescalerEht>:
bool Publishers::SetPublisherPrescaler(uint8_t ID, uint16_t prescaler) {
 8019306:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019308:	b083      	sub	sp, #12
 801930a:	4604      	mov	r4, r0
 801930c:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 801930e:	f10d 0207 	add.w	r2, sp, #7
 8019312:	f7ff ffad 	bl	8019270 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 8019316:	f89d 7007 	ldrb.w	r7, [sp, #7]
 801931a:	b917      	cbnz	r7, 8019322 <_ZN10Publishers21SetPublisherPrescalerEht+0x1c>
}
 801931c:	4638      	mov	r0, r7
 801931e:	b003      	add	sp, #12
 8019320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019322:	4605      	mov	r5, r0
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8019324:	f04f 31ff 	mov.w	r1, #4294967295
 8019328:	6820      	ldr	r0, [r4, #0]
 801932a:	f7f3 fac5 	bl	800c8b8 <osSemaphoreAcquire>
	publisher->prescaler = prescaler;
 801932e:	806e      	strh	r6, [r5, #2]
	osSemaphoreRelease(PublishersSemaphore);
 8019330:	6820      	ldr	r0, [r4, #0]
 8019332:	f7f3 faf5 	bl	800c920 <osSemaphoreRelease>
	return true;
 8019336:	e7f1      	b.n	801931c <_ZN10Publishers21SetPublisherPrescalerEht+0x16>

08019338 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE1_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8019338:	2b02      	cmp	r3, #2
 801933a:	d001      	beq.n	8019340 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE1_4_FUNES0_tS1_t+0x8>
 801933c:	2000      	movs	r0, #0
		}
 801933e:	4770      	bx	lr
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 8019340:	b508      	push	{r3, lr}
 8019342:	4611      	mov	r1, r2
			self->SetPublisherPrescaler((uint8_t) input[0], input[1]);
 8019344:	8852      	ldrh	r2, [r2, #2]
 8019346:	7809      	ldrb	r1, [r1, #0]
 8019348:	f7ff ffdd 	bl	8019306 <_ZN10Publishers21SetPublisherPrescalerEht>
			return true;
 801934c:	2001      	movs	r0, #1
		}
 801934e:	bd08      	pop	{r3, pc}

08019350 <_ZN10Publishers10StopTopicsEh>:
bool Publishers::StopTopics(uint8_t ID) {
 8019350:	b570      	push	{r4, r5, r6, lr}
 8019352:	b082      	sub	sp, #8
 8019354:	4604      	mov	r4, r0
	Publisher* publisher = FindPublisher(ID, &success);
 8019356:	f10d 0207 	add.w	r2, sp, #7
 801935a:	f7ff ff89 	bl	8019270 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 801935e:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8019362:	b916      	cbnz	r6, 801936a <_ZN10Publishers10StopTopicsEh+0x1a>
}
 8019364:	4630      	mov	r0, r6
 8019366:	b002      	add	sp, #8
 8019368:	bd70      	pop	{r4, r5, r6, pc}
 801936a:	4605      	mov	r5, r0
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801936c:	f04f 31ff 	mov.w	r1, #4294967295
 8019370:	6820      	ldr	r0, [r4, #0]
 8019372:	f7f3 faa1 	bl	800c8b8 <osSemaphoreAcquire>
	for (Topic &topic : publisher->topics) {
 8019376:	696b      	ldr	r3, [r5, #20]
      : _M_current(__i) { }
 8019378:	69a9      	ldr	r1, [r5, #24]
 801937a:	e002      	b.n	8019382 <_ZN10Publishers10StopTopicsEh+0x32>
		topic.activated = false;
 801937c:	2200      	movs	r2, #0
 801937e:	f803 2b04 	strb.w	r2, [r3], #4
	for (Topic &topic : publisher->topics) {
 8019382:	4299      	cmp	r1, r3
 8019384:	d1fa      	bne.n	801937c <_ZN10Publishers10StopTopicsEh+0x2c>
	osSemaphoreRelease(PublishersSemaphore);
 8019386:	6820      	ldr	r0, [r4, #0]
 8019388:	f7f3 faca 	bl	800c920 <osSemaphoreRelease>
	return true;
 801938c:	e7ea      	b.n	8019364 <_ZN10Publishers10StopTopicsEh+0x14>

0801938e <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801938e:	b508      	push	{r3, lr}
			self->StopTopics(*input);
 8019390:	7811      	ldrb	r1, [r2, #0]
 8019392:	f7ff ffdd 	bl	8019350 <_ZN10Publishers10StopTopicsEh>
		}
 8019396:	2001      	movs	r0, #1
 8019398:	bd08      	pop	{r3, pc}

0801939a <_ZN10Publishers23UnlinkFromAllInterfacesEh>:
bool Publishers::UnlinkFromAllInterfaces(uint8_t ID) {
 801939a:	b570      	push	{r4, r5, r6, lr}
 801939c:	b082      	sub	sp, #8
 801939e:	4605      	mov	r5, r0
	Publisher* publisher = FindPublisher(ID, &success);
 80193a0:	f10d 0207 	add.w	r2, sp, #7
 80193a4:	f7ff ff64 	bl	8019270 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 80193a8:	f89d 6007 	ldrb.w	r6, [sp, #7]
 80193ac:	b916      	cbnz	r6, 80193b4 <_ZN10Publishers23UnlinkFromAllInterfacesEh+0x1a>
}
 80193ae:	4630      	mov	r0, r6
 80193b0:	b002      	add	sp, #8
 80193b2:	bd70      	pop	{r4, r5, r6, pc}
 80193b4:	4604      	mov	r4, r0
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80193b6:	f04f 31ff 	mov.w	r1, #4294967295
 80193ba:	6828      	ldr	r0, [r5, #0]
 80193bc:	f7f3 fa7c 	bl	800c8b8 <osSemaphoreAcquire>
      { _M_erase_at_end(this->_M_impl._M_start); }
 80193c0:	68a3      	ldr	r3, [r4, #8]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80193c2:	68e2      	ldr	r2, [r4, #12]
 80193c4:	4293      	cmp	r3, r2
 80193c6:	d000      	beq.n	80193ca <_ZN10Publishers23UnlinkFromAllInterfacesEh+0x30>
	    this->_M_impl._M_finish = __pos;
 80193c8:	60e3      	str	r3, [r4, #12]
	osSemaphoreRelease(PublishersSemaphore);
 80193ca:	6828      	ldr	r0, [r5, #0]
 80193cc:	f7f3 faa8 	bl	800c920 <osSemaphoreRelease>
	return true;
 80193d0:	e7ed      	b.n	80193ae <_ZN10Publishers23UnlinkFromAllInterfacesEh+0x14>

080193d2 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE5_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80193d2:	b508      	push	{r3, lr}
			self->UnlinkFromAllInterfaces(*input);
 80193d4:	7811      	ldrb	r1, [r2, #0]
 80193d6:	f7ff ffe0 	bl	801939a <_ZN10Publishers23UnlinkFromAllInterfacesEh>
		}
 80193da:	2001      	movs	r0, #1
 80193dc:	bd08      	pop	{r3, pc}

080193de <_ZN10Publishers9FindTopicEhtPb>:
	osSemaphoreRelease(PublishersSemaphore);
	*success = false;
	return 0;
}

Topic* Publishers::FindTopic(uint8_t ID, uint16_t topic_ID, bool* success) {
 80193de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193e0:	4607      	mov	r7, r0
 80193e2:	4615      	mov	r5, r2
 80193e4:	461e      	mov	r6, r3
	Publisher* publisher = FindPublisher(ID, success);
 80193e6:	461a      	mov	r2, r3
 80193e8:	f7ff ff42 	bl	8019270 <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 80193ec:	7833      	ldrb	r3, [r6, #0]
 80193ee:	b1e3      	cbz	r3, 801942a <_ZN10Publishers9FindTopicEhtPb+0x4c>
 80193f0:	4604      	mov	r4, r0
		return NULL;

	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80193f2:	f04f 31ff 	mov.w	r1, #4294967295
 80193f6:	6838      	ldr	r0, [r7, #0]
 80193f8:	f7f3 fa5e 	bl	800c8b8 <osSemaphoreAcquire>
	for (Topic &topic : publisher->topics) {
 80193fc:	6961      	ldr	r1, [r4, #20]
 80193fe:	69a2      	ldr	r2, [r4, #24]
    { return __lhs.base() != __rhs.base(); }
 8019400:	460c      	mov	r4, r1
 8019402:	428a      	cmp	r2, r1
 8019404:	d00a      	beq.n	801941c <_ZN10Publishers9FindTopicEhtPb+0x3e>
		if (topic.ID == topic_ID) {
 8019406:	8849      	ldrh	r1, [r1, #2]
 8019408:	42a9      	cmp	r1, r5
 801940a:	d001      	beq.n	8019410 <_ZN10Publishers9FindTopicEhtPb+0x32>
	++_M_current;
 801940c:	1d21      	adds	r1, r4, #4
	return *this;
 801940e:	e7f7      	b.n	8019400 <_ZN10Publishers9FindTopicEhtPb+0x22>
			Topic* topic_pointer = &topic;
			osSemaphoreRelease(PublishersSemaphore);
 8019410:	6838      	ldr	r0, [r7, #0]
 8019412:	f7f3 fa85 	bl	800c920 <osSemaphoreRelease>
			*success = true;
 8019416:	2301      	movs	r3, #1
 8019418:	7033      	strb	r3, [r6, #0]
			return topic_pointer;
 801941a:	e004      	b.n	8019426 <_ZN10Publishers9FindTopicEhtPb+0x48>
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 801941c:	6838      	ldr	r0, [r7, #0]
 801941e:	f7f3 fa7f 	bl	800c920 <osSemaphoreRelease>
	*success = false;
 8019422:	2400      	movs	r4, #0
 8019424:	7034      	strb	r4, [r6, #0]
	return NULL;
}
 8019426:	4620      	mov	r0, r4
 8019428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
 801942a:	2400      	movs	r4, #0
 801942c:	e7fb      	b.n	8019426 <_ZN10Publishers9FindTopicEhtPb+0x48>

0801942e <_ZN10Publishers14SetTopicStatusEhtb>:
bool Publishers::SetTopicStatus(uint8_t ID, uint16_t topic_ID, bool status) {
 801942e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019430:	b083      	sub	sp, #12
 8019432:	4604      	mov	r4, r0
 8019434:	461e      	mov	r6, r3
	Topic* topic = FindTopic(ID, topic_ID, &success);
 8019436:	f10d 0307 	add.w	r3, sp, #7
 801943a:	f7ff ffd0 	bl	80193de <_ZN10Publishers9FindTopicEhtPb>
	if (!success) return false;
 801943e:	f89d 7007 	ldrb.w	r7, [sp, #7]
 8019442:	b917      	cbnz	r7, 801944a <_ZN10Publishers14SetTopicStatusEhtb+0x1c>
}
 8019444:	4638      	mov	r0, r7
 8019446:	b003      	add	sp, #12
 8019448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801944a:	4605      	mov	r5, r0
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801944c:	f04f 31ff 	mov.w	r1, #4294967295
 8019450:	6820      	ldr	r0, [r4, #0]
 8019452:	f7f3 fa31 	bl	800c8b8 <osSemaphoreAcquire>
	topic->activated = status;
 8019456:	702e      	strb	r6, [r5, #0]
	osSemaphoreRelease(PublishersSemaphore);
 8019458:	6820      	ldr	r0, [r4, #0]
 801945a:	f7f3 fa61 	bl	800c920 <osSemaphoreRelease>
	return true;
 801945e:	e7f1      	b.n	8019444 <_ZN10Publishers14SetTopicStatusEhtb+0x16>

08019460 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE0_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 8019460:	2b03      	cmp	r3, #3
 8019462:	d001      	beq.n	8019468 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE0_4_FUNES0_tS1_t+0x8>
 8019464:	2000      	movs	r0, #0
		}
 8019466:	4770      	bx	lr
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 8019468:	b508      	push	{r3, lr}
 801946a:	4611      	mov	r1, r2
			self->SetTopicStatus((uint8_t) input[0], input[1], (bool) input[2]);
 801946c:	8893      	ldrh	r3, [r2, #4]
 801946e:	3b00      	subs	r3, #0
 8019470:	bf18      	it	ne
 8019472:	2301      	movne	r3, #1
 8019474:	8852      	ldrh	r2, [r2, #2]
 8019476:	7809      	ldrb	r1, [r1, #0]
 8019478:	f7ff ffd9 	bl	801942e <_ZN10Publishers14SetTopicStatusEhtb>
			return true;
 801947c:	2001      	movs	r0, #1
		}
 801947e:	bd08      	pop	{r3, pc}

08019480 <_ZN10Publishers20FindPublishInterfaceEhhPb>:
	osSemaphoreRelease(PublishersSemaphore);
	*success = false;
	return 0;
}

PublishInterface* Publishers::FindPublishInterface(uint8_t ID, uint8_t interface_ID, bool* success) {
 8019480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019482:	4607      	mov	r7, r0
 8019484:	4615      	mov	r5, r2
 8019486:	461e      	mov	r6, r3
	Publisher* publisher = FindPublisher(ID, success);
 8019488:	461a      	mov	r2, r3
 801948a:	f7ff fef1 	bl	8019270 <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 801948e:	7833      	ldrb	r3, [r6, #0]
 8019490:	b1e3      	cbz	r3, 80194cc <_ZN10Publishers20FindPublishInterfaceEhhPb+0x4c>
 8019492:	4604      	mov	r4, r0
		return NULL;

	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8019494:	f04f 31ff 	mov.w	r1, #4294967295
 8019498:	6838      	ldr	r0, [r7, #0]
 801949a:	f7f3 fa0d 	bl	800c8b8 <osSemaphoreAcquire>
	for (PublishInterface &interface : publisher->interfaces) {
 801949e:	68a1      	ldr	r1, [r4, #8]
      : _M_current(__i) { }
 80194a0:	68e2      	ldr	r2, [r4, #12]
    { return __lhs.base() != __rhs.base(); }
 80194a2:	460c      	mov	r4, r1
 80194a4:	428a      	cmp	r2, r1
 80194a6:	d00a      	beq.n	80194be <_ZN10Publishers20FindPublishInterfaceEhhPb+0x3e>
		if (interface.interface == interface_ID) {
 80194a8:	7809      	ldrb	r1, [r1, #0]
 80194aa:	42a9      	cmp	r1, r5
 80194ac:	d001      	beq.n	80194b2 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x32>
	++_M_current;
 80194ae:	1ca1      	adds	r1, r4, #2
	return *this;
 80194b0:	e7f7      	b.n	80194a2 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x22>
			PublishInterface* publish_interface_pointer = &interface;
			osSemaphoreRelease(PublishersSemaphore);
 80194b2:	6838      	ldr	r0, [r7, #0]
 80194b4:	f7f3 fa34 	bl	800c920 <osSemaphoreRelease>
			*success = true;
 80194b8:	2301      	movs	r3, #1
 80194ba:	7033      	strb	r3, [r6, #0]
			return publish_interface_pointer;
 80194bc:	e004      	b.n	80194c8 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x48>
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 80194be:	6838      	ldr	r0, [r7, #0]
 80194c0:	f7f3 fa2e 	bl	800c920 <osSemaphoreRelease>
	*success = false;
 80194c4:	2400      	movs	r4, #0
 80194c6:	7034      	strb	r4, [r6, #0]
	return NULL;
}
 80194c8:	4620      	mov	r0, r4
 80194ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
 80194cc:	2400      	movs	r4, #0
 80194ce:	e7fb      	b.n	80194c8 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x48>

080194d0 <_ZN10Publishers17SetPublishAddressEhhh>:
bool Publishers::SetPublishAddress(uint8_t ID, uint8_t interface_ID, uint8_t address) {
 80194d0:	b570      	push	{r4, r5, r6, lr}
 80194d2:	b082      	sub	sp, #8
 80194d4:	4604      	mov	r4, r0
 80194d6:	461e      	mov	r6, r3
	PublishInterface* interface = FindPublishInterface(ID, interface_ID, &success);
 80194d8:	f10d 0307 	add.w	r3, sp, #7
 80194dc:	f7ff ffd0 	bl	8019480 <_ZN10Publishers20FindPublishInterfaceEhhPb>
	if (success) return false;
 80194e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80194e4:	b113      	cbz	r3, 80194ec <_ZN10Publishers17SetPublishAddressEhhh+0x1c>
 80194e6:	2000      	movs	r0, #0
}
 80194e8:	b002      	add	sp, #8
 80194ea:	bd70      	pop	{r4, r5, r6, pc}
 80194ec:	4605      	mov	r5, r0
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80194ee:	f04f 31ff 	mov.w	r1, #4294967295
 80194f2:	6820      	ldr	r0, [r4, #0]
 80194f4:	f7f3 f9e0 	bl	800c8b8 <osSemaphoreAcquire>
	interface->address = address;
 80194f8:	706e      	strb	r6, [r5, #1]
	osSemaphoreRelease(PublishersSemaphore);
 80194fa:	6820      	ldr	r0, [r4, #0]
 80194fc:	f7f3 fa10 	bl	800c920 <osSemaphoreRelease>
	return true;
 8019500:	2001      	movs	r0, #1
 8019502:	e7f1      	b.n	80194e8 <_ZN10Publishers17SetPublishAddressEhhh+0x18>

08019504 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 8019504:	2b03      	cmp	r3, #3
 8019506:	d001      	beq.n	801950c <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t+0x8>
 8019508:	2000      	movs	r0, #0
		}
 801950a:	4770      	bx	lr
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801950c:	b508      	push	{r3, lr}
 801950e:	4611      	mov	r1, r2
			self->SetPublishAddress(input[0], input[1], input[2]);
 8019510:	7893      	ldrb	r3, [r2, #2]
 8019512:	7852      	ldrb	r2, [r2, #1]
 8019514:	7809      	ldrb	r1, [r1, #0]
 8019516:	f7ff ffdb 	bl	80194d0 <_ZN10Publishers17SetPublishAddressEhhh>
			return true;
 801951a:	2001      	movs	r0, #1
		}
 801951c:	bd08      	pop	{r3, pc}

0801951e <_ZN10Publishers25FindPublishInterfaceIndexEhhPb>:

uint8_t Publishers::FindPublishInterfaceIndex(uint8_t ID, uint8_t interface_ID, bool* success) {
 801951e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019520:	4607      	mov	r7, r0
 8019522:	4615      	mov	r5, r2
 8019524:	461e      	mov	r6, r3
	Publisher* publisher = FindPublisher(ID, success);
 8019526:	461a      	mov	r2, r3
 8019528:	f7ff fea2 	bl	8019270 <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 801952c:	7833      	ldrb	r3, [r6, #0]
 801952e:	b913      	cbnz	r3, 8019536 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x18>
		return 0;
 8019530:	2400      	movs	r4, #0
		index++;
	}
	osSemaphoreRelease(PublishersSemaphore);
	*success = false;
	return 0;
}
 8019532:	4620      	mov	r0, r4
 8019534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019536:	4604      	mov	r4, r0
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8019538:	f04f 31ff 	mov.w	r1, #4294967295
 801953c:	6838      	ldr	r0, [r7, #0]
 801953e:	f7f3 f9bb 	bl	800c8b8 <osSemaphoreAcquire>
	for (PublishInterface &interface : publisher->interfaces) {
 8019542:	68a1      	ldr	r1, [r4, #8]
      : _M_current(__i) { }
 8019544:	68e3      	ldr	r3, [r4, #12]
	uint8_t index = 0;
 8019546:	2400      	movs	r4, #0
    { return __lhs.base() != __rhs.base(); }
 8019548:	468c      	mov	ip, r1
	for (PublishInterface &interface : publisher->interfaces) {
 801954a:	428b      	cmp	r3, r1
 801954c:	d00d      	beq.n	801956a <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x4c>
		if (interface.interface == interface_ID) {
 801954e:	7809      	ldrb	r1, [r1, #0]
 8019550:	42a9      	cmp	r1, r5
 8019552:	d004      	beq.n	801955e <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x40>
		index++;
 8019554:	3401      	adds	r4, #1
 8019556:	b2e4      	uxtb	r4, r4
	++_M_current;
 8019558:	f10c 0102 	add.w	r1, ip, #2
	return *this;
 801955c:	e7f4      	b.n	8019548 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x2a>
			osSemaphoreRelease(PublishersSemaphore);
 801955e:	6838      	ldr	r0, [r7, #0]
 8019560:	f7f3 f9de 	bl	800c920 <osSemaphoreRelease>
			*success = true;
 8019564:	2301      	movs	r3, #1
 8019566:	7033      	strb	r3, [r6, #0]
			return index;
 8019568:	e7e3      	b.n	8019532 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x14>
	osSemaphoreRelease(PublishersSemaphore);
 801956a:	6838      	ldr	r0, [r7, #0]
 801956c:	f7f3 f9d8 	bl	800c920 <osSemaphoreRelease>
	*success = false;
 8019570:	2400      	movs	r4, #0
 8019572:	7034      	strb	r4, [r6, #0]
	return 0;
 8019574:	e7dd      	b.n	8019532 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x14>
	...

08019578 <_ZN9Registers9GetTypeIDItEEhPb>:
uint8_t Registers::GetTypeID (bool* success) {
 8019578:	b510      	push	{r4, lr}
 801957a:	460c      	mov	r4, r1
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801957c:	491a      	ldr	r1, [pc, #104]	; (80195e8 <_ZN9Registers9GetTypeIDItEEhPb+0x70>)
 801957e:	481b      	ldr	r0, [pc, #108]	; (80195ec <_ZN9Registers9GetTypeIDItEEhPb+0x74>)
 8019580:	f001 fd9c 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 8019584:	b118      	cbz	r0, 801958e <_ZN9Registers9GetTypeIDItEEhPb+0x16>
 8019586:	2000      	movs	r0, #0
	*success = true;
 8019588:	2301      	movs	r3, #1
 801958a:	7023      	strb	r3, [r4, #0]
}
 801958c:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801958e:	4817      	ldr	r0, [pc, #92]	; (80195ec <_ZN9Registers9GetTypeIDItEEhPb+0x74>)
 8019590:	4601      	mov	r1, r0
 8019592:	f001 fd93 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 8019596:	b108      	cbz	r0, 801959c <_ZN9Registers9GetTypeIDItEEhPb+0x24>
 8019598:	2001      	movs	r0, #1
 801959a:	e7f5      	b.n	8019588 <_ZN9Registers9GetTypeIDItEEhPb+0x10>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801959c:	4914      	ldr	r1, [pc, #80]	; (80195f0 <_ZN9Registers9GetTypeIDItEEhPb+0x78>)
 801959e:	4813      	ldr	r0, [pc, #76]	; (80195ec <_ZN9Registers9GetTypeIDItEEhPb+0x74>)
 80195a0:	f001 fd8c 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 80195a4:	b108      	cbz	r0, 80195aa <_ZN9Registers9GetTypeIDItEEhPb+0x32>
 80195a6:	2002      	movs	r0, #2
 80195a8:	e7ee      	b.n	8019588 <_ZN9Registers9GetTypeIDItEEhPb+0x10>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80195aa:	4912      	ldr	r1, [pc, #72]	; (80195f4 <_ZN9Registers9GetTypeIDItEEhPb+0x7c>)
 80195ac:	480f      	ldr	r0, [pc, #60]	; (80195ec <_ZN9Registers9GetTypeIDItEEhPb+0x74>)
 80195ae:	f001 fd85 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 80195b2:	b108      	cbz	r0, 80195b8 <_ZN9Registers9GetTypeIDItEEhPb+0x40>
 80195b4:	2003      	movs	r0, #3
 80195b6:	e7e7      	b.n	8019588 <_ZN9Registers9GetTypeIDItEEhPb+0x10>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80195b8:	490f      	ldr	r1, [pc, #60]	; (80195f8 <_ZN9Registers9GetTypeIDItEEhPb+0x80>)
 80195ba:	480c      	ldr	r0, [pc, #48]	; (80195ec <_ZN9Registers9GetTypeIDItEEhPb+0x74>)
 80195bc:	f001 fd7e 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 80195c0:	b108      	cbz	r0, 80195c6 <_ZN9Registers9GetTypeIDItEEhPb+0x4e>
 80195c2:	2006      	movs	r0, #6
 80195c4:	e7e0      	b.n	8019588 <_ZN9Registers9GetTypeIDItEEhPb+0x10>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80195c6:	490d      	ldr	r1, [pc, #52]	; (80195fc <_ZN9Registers9GetTypeIDItEEhPb+0x84>)
 80195c8:	4808      	ldr	r0, [pc, #32]	; (80195ec <_ZN9Registers9GetTypeIDItEEhPb+0x74>)
 80195ca:	f001 fd77 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 80195ce:	b108      	cbz	r0, 80195d4 <_ZN9Registers9GetTypeIDItEEhPb+0x5c>
 80195d0:	2008      	movs	r0, #8
 80195d2:	e7d9      	b.n	8019588 <_ZN9Registers9GetTypeIDItEEhPb+0x10>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80195d4:	490a      	ldr	r1, [pc, #40]	; (8019600 <_ZN9Registers9GetTypeIDItEEhPb+0x88>)
 80195d6:	4805      	ldr	r0, [pc, #20]	; (80195ec <_ZN9Registers9GetTypeIDItEEhPb+0x74>)
 80195d8:	f001 fd70 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 80195dc:	b108      	cbz	r0, 80195e2 <_ZN9Registers9GetTypeIDItEEhPb+0x6a>
 80195de:	2009      	movs	r0, #9
 80195e0:	e7d2      	b.n	8019588 <_ZN9Registers9GetTypeIDItEEhPb+0x10>
	else {*success = false; return 0;}
 80195e2:	7020      	strb	r0, [r4, #0]
 80195e4:	e7d2      	b.n	801958c <_ZN9Registers9GetTypeIDItEEhPb+0x14>
 80195e6:	bf00      	nop
 80195e8:	0801c1bc 	.word	0x0801c1bc
 80195ec:	0801c1b4 	.word	0x0801c1b4
 80195f0:	0801c1a4 	.word	0x0801c1a4
 80195f4:	0801c19c 	.word	0x0801c19c
 80195f8:	0801c1ac 	.word	0x0801c1ac
 80195fc:	0801c194 	.word	0x0801c194
 8019600:	0801c18c 	.word	0x0801c18c

08019604 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8019604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019608:	b083      	sub	sp, #12
 801960a:	4688      	mov	r8, r1
 801960c:	4616      	mov	r6, r2
 801960e:	2301      	movs	r3, #1
 8019610:	9300      	str	r3, [sp, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019612:	6842      	ldr	r2, [r0, #4]
 8019614:	6803      	ldr	r3, [r0, #0]
 8019616:	1ad3      	subs	r3, r2, r3
	if (max_size() - size() < __n)
 8019618:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 801961c:	ebb1 0f63 	cmp.w	r1, r3, asr #1
 8019620:	d03d      	beq.n	801969e <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
 8019622:	4604      	mov	r4, r0
 8019624:	105d      	asrs	r5, r3, #1
	const size_type __len = size() + (std::max)(size(), __n);
 8019626:	9501      	str	r5, [sp, #4]
      if (__a < __b)
 8019628:	2d00      	cmp	r5, #0
 801962a:	d03b      	beq.n	80196a4 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>
      return __a;
 801962c:	ab01      	add	r3, sp, #4
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	441d      	add	r5, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019632:	6823      	ldr	r3, [r4, #0]
 8019634:	1ad2      	subs	r2, r2, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8019636:	ebb5 0f62 	cmp.w	r5, r2, asr #1
 801963a:	d335      	bcc.n	80196a8 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>
 801963c:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8019640:	d235      	bcs.n	80196ae <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
      pointer __old_start = this->_M_impl._M_start;
 8019642:	f8d4 9000 	ldr.w	r9, [r4]
      pointer __old_finish = this->_M_impl._M_finish;
 8019646:	f8d4 a004 	ldr.w	sl, [r4, #4]
    { return __lhs.base() - __rhs.base(); }
 801964a:	eba8 0b09 	sub.w	fp, r8, r9
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801964e:	b39d      	cbz	r5, 80196b8 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>
	if (__n > this->_M_max_size())
 8019650:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8019654:	d22e      	bcs.n	80196b4 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb0>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8019656:	0068      	lsls	r0, r5, #1
 8019658:	f001 fc9a 	bl	801af90 <_Znwj>
 801965c:	4607      	mov	r7, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801965e:	8833      	ldrh	r3, [r6, #0]
 8019660:	f827 300b 	strh.w	r3, [r7, fp]
      ptrdiff_t __count = __last - __first;
 8019664:	eba8 0609 	sub.w	r6, r8, r9
      if (__count > 0)
 8019668:	2e00      	cmp	r6, #0
 801966a:	dc27      	bgt.n	80196bc <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb8>
      return __result + __count;
 801966c:	443e      	add	r6, r7
	      ++__new_finish;
 801966e:	3602      	adds	r6, #2
      ptrdiff_t __count = __last - __first;
 8019670:	ebaa 0a08 	sub.w	sl, sl, r8
      if (__count > 0)
 8019674:	f1ba 0f00 	cmp.w	sl, #0
 8019678:	dc26      	bgt.n	80196c8 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc4>
      return __result + __count;
 801967a:	4456      	add	r6, sl
		    this->_M_impl._M_end_of_storage - __old_start);
 801967c:	68a1      	ldr	r1, [r4, #8]
 801967e:	eba1 0109 	sub.w	r1, r1, r9
	if (__p)
 8019682:	f1b9 0f00 	cmp.w	r9, #0
 8019686:	d002      	beq.n	801968e <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8a>
	::operator delete(__p
 8019688:	4648      	mov	r0, r9
 801968a:	f001 fc6b 	bl	801af64 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 801968e:	6027      	str	r7, [r4, #0]
      this->_M_impl._M_finish = __new_finish;
 8019690:	6066      	str	r6, [r4, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8019692:	eb07 0545 	add.w	r5, r7, r5, lsl #1
 8019696:	60a5      	str	r5, [r4, #8]
    }
 8019698:	b003      	add	sp, #12
 801969a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_length_error(__N(__s));
 801969e:	480d      	ldr	r0, [pc, #52]	; (80196d4 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd0>)
 80196a0:	f001 fd2a 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 80196a4:	466b      	mov	r3, sp
 80196a6:	e7c2      	b.n	801962e <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x2a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80196a8:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 80196ac:	e7c9      	b.n	8019642 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
 80196ae:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 80196b2:	e7c6      	b.n	8019642 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	  std::__throw_bad_alloc();
 80196b4:	f001 fd1a 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80196b8:	2700      	movs	r7, #0
 80196ba:	e7d0      	b.n	801965e <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80196bc:	4632      	mov	r2, r6
 80196be:	4649      	mov	r1, r9
 80196c0:	4638      	mov	r0, r7
 80196c2:	f002 f923 	bl	801b90c <memmove>
 80196c6:	e7d1      	b.n	801966c <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x68>
 80196c8:	4652      	mov	r2, sl
 80196ca:	4641      	mov	r1, r8
 80196cc:	4630      	mov	r0, r6
 80196ce:	f002 f91d 	bl	801b90c <memmove>
 80196d2:	e7d2      	b.n	801967a <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x76>
 80196d4:	0801bde4 	.word	0x0801bde4

080196d8 <_ZN10Publishers15LinkToInterfaceEhh>:
bool Publishers::LinkToInterface(uint8_t ID, uint8_t interface_ID) {
 80196d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196dc:	b082      	sub	sp, #8
 80196de:	4605      	mov	r5, r0
 80196e0:	460f      	mov	r7, r1
 80196e2:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 80196e4:	f10d 0207 	add.w	r2, sp, #7
 80196e8:	f7ff fdc2 	bl	8019270 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 80196ec:	f89d 8007 	ldrb.w	r8, [sp, #7]
 80196f0:	f1b8 0f00 	cmp.w	r8, #0
 80196f4:	d103      	bne.n	80196fe <_ZN10Publishers15LinkToInterfaceEhh+0x26>
}
 80196f6:	4640      	mov	r0, r8
 80196f8:	b002      	add	sp, #8
 80196fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196fe:	4604      	mov	r4, r0
	FindPublishInterface(ID, interface_ID, &success);
 8019700:	f10d 0307 	add.w	r3, sp, #7
 8019704:	4632      	mov	r2, r6
 8019706:	4639      	mov	r1, r7
 8019708:	4628      	mov	r0, r5
 801970a:	f7ff feb9 	bl	8019480 <_ZN10Publishers20FindPublishInterfaceEhhPb>
	if (success) return false;
 801970e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019712:	b113      	cbz	r3, 801971a <_ZN10Publishers15LinkToInterfaceEhh+0x42>
 8019714:	f04f 0800 	mov.w	r8, #0
 8019718:	e7ed      	b.n	80196f6 <_ZN10Publishers15LinkToInterfaceEhh+0x1e>
	interface.interface = interface_ID;
 801971a:	f88d 6004 	strb.w	r6, [sp, #4]
	interface.address = ALL;
 801971e:	23ff      	movs	r3, #255	; 0xff
 8019720:	f88d 3005 	strb.w	r3, [sp, #5]
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8019724:	f04f 31ff 	mov.w	r1, #4294967295
 8019728:	6828      	ldr	r0, [r5, #0]
 801972a:	f7f3 f8c5 	bl	800c8b8 <osSemaphoreAcquire>
	publisher->interfaces.push_back(interface);
 801972e:	f104 0008 	add.w	r0, r4, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8019732:	6841      	ldr	r1, [r0, #4]
 8019734:	6883      	ldr	r3, [r0, #8]
 8019736:	4299      	cmp	r1, r3
 8019738:	d009      	beq.n	801974e <_ZN10Publishers15LinkToInterfaceEhh+0x76>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801973a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801973e:	800b      	strh	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 8019740:	6843      	ldr	r3, [r0, #4]
 8019742:	3302      	adds	r3, #2
 8019744:	6043      	str	r3, [r0, #4]
	osSemaphoreRelease(PublishersSemaphore);
 8019746:	6828      	ldr	r0, [r5, #0]
 8019748:	f7f3 f8ea 	bl	800c920 <osSemaphoreRelease>
	return true;
 801974c:	e7d3      	b.n	80196f6 <_ZN10Publishers15LinkToInterfaceEhh+0x1e>
	  _M_realloc_insert(end(), __x);
 801974e:	aa01      	add	r2, sp, #4
 8019750:	f7ff ff58 	bl	8019604 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8019754:	e7f7      	b.n	8019746 <_ZN10Publishers15LinkToInterfaceEhh+0x6e>

08019756 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8019756:	2b02      	cmp	r3, #2
 8019758:	d001      	beq.n	801975e <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x8>
 801975a:	2000      	movs	r0, #0
		}
 801975c:	4770      	bx	lr
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801975e:	b508      	push	{r3, lr}
 8019760:	4611      	mov	r1, r2
			self->LinkToInterface(input[0], input[1]);
 8019762:	7852      	ldrb	r2, [r2, #1]
 8019764:	7809      	ldrb	r1, [r1, #0]
 8019766:	f7ff ffb7 	bl	80196d8 <_ZN10Publishers15LinkToInterfaceEhh>
			return true;
 801976a:	2001      	movs	r0, #1
		}
 801976c:	bd08      	pop	{r3, pc}
	...

08019770 <_ZN9Registers11AddRegisterItEEbt>:
bool Registers::AddRegister(uint16_t ID) {
 8019770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019772:	b08b      	sub	sp, #44	; 0x2c
 8019774:	4604      	mov	r4, r0
 8019776:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8019778:	f04f 31ff 	mov.w	r1, #4294967295
 801977c:	6800      	ldr	r0, [r0, #0]
 801977e:	f7f3 f89b 	bl	800c8b8 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8019782:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8019786:	4631      	mov	r1, r6
 8019788:	4620      	mov	r0, r4
 801978a:	f000 fa80 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801978e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8019792:	2b00      	cmp	r3, #0
 8019794:	d13a      	bne.n	801980c <_ZN9Registers11AddRegisterItEEbt+0x9c>
struct Permissions {
 8019796:	2701      	movs	r7, #1
 8019798:	f88d 701c 	strb.w	r7, [sp, #28]
 801979c:	f88d 701d 	strb.w	r7, [sp, #29]
	Permissions permissions_;
 80197a0:	4b26      	ldr	r3, [pc, #152]	; (801983c <_ZN9Registers11AddRegisterItEEbt+0xcc>)
 80197a2:	881b      	ldrh	r3, [r3, #0]
 80197a4:	f8ad 3008 	strh.w	r3, [sp, #8]
	mode.pointer = false;
 80197a8:	2500      	movs	r5, #0
 80197aa:	f88d 5004 	strb.w	r5, [sp, #4]
	mode.callbacks = false;
 80197ae:	f88d 5005 	strb.w	r5, [sp, #5]
	configuration_.mode = mode;
 80197b2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80197b6:	f8ad 3014 	strh.w	r3, [sp, #20]
	register_.address = ID;
 80197ba:	f8ad 600c 	strh.w	r6, [sp, #12]
	register_.type = GetTypeID<T>(&success); // check the type is supported
 80197be:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 80197c2:	4620      	mov	r0, r4
 80197c4:	f7ff fed8 	bl	8019578 <_ZN9Registers9GetTypeIDItEEhPb>
 80197c8:	f88d 000e 	strb.w	r0, [sp, #14]
	register_.isArray = false;
 80197cc:	f88d 500f 	strb.w	r5, [sp, #15]
	register_.length = 1;
 80197d0:	f8ad 7010 	strh.w	r7, [sp, #16]
	configuration_.register_info = register_;
 80197d4:	9803      	ldr	r0, [sp, #12]
 80197d6:	f8cd 0016 	str.w	r0, [sp, #22]
 80197da:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80197de:	f8ad 301a 	strh.w	r3, [sp, #26]
	permissions_.write = false;
 80197e2:	f88d 5008 	strb.w	r5, [sp, #8]
	permissions_.read = false;
 80197e6:	f88d 5009 	strb.w	r5, [sp, #9]
	configuration_.access = permissions_;
 80197ea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80197ee:	f8ad 301c 	strh.w	r3, [sp, #28]
	configuration_.callbacks_ID = 0;
 80197f2:	f8ad 501e 	strh.w	r5, [sp, #30]
	configuration_.register_semaphore = NULL;
 80197f6:	9508      	str	r5, [sp, #32]
	if (success) {
 80197f8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80197fc:	b95b      	cbnz	r3, 8019816 <_ZN9Registers11AddRegisterItEEbt+0xa6>
	osSemaphoreRelease(RegistersSemaphore);
 80197fe:	6820      	ldr	r0, [r4, #0]
 8019800:	f7f3 f88e 	bl	800c920 <osSemaphoreRelease>
	return success;
 8019804:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
}
 8019808:	b00b      	add	sp, #44	; 0x2c
 801980a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(RegistersSemaphore);
 801980c:	6820      	ldr	r0, [r4, #0]
 801980e:	f7f3 f887 	bl	800c920 <osSemaphoreRelease>
		return false; // register already exists, return error
 8019812:	2000      	movs	r0, #0
 8019814:	e7f8      	b.n	8019808 <_ZN9Registers11AddRegisterItEEbt+0x98>
		registers.push_back(configuration_);
 8019816:	1d26      	adds	r6, r4, #4
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8019818:	6875      	ldr	r5, [r6, #4]
 801981a:	68b3      	ldr	r3, [r6, #8]
 801981c:	429d      	cmp	r5, r3
 801981e:	d007      	beq.n	8019830 <_ZN9Registers11AddRegisterItEEbt+0xc0>
 8019820:	ab05      	add	r3, sp, #20
 8019822:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019824:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8019828:	6873      	ldr	r3, [r6, #4]
 801982a:	3310      	adds	r3, #16
 801982c:	6073      	str	r3, [r6, #4]
 801982e:	e7e6      	b.n	80197fe <_ZN9Registers11AddRegisterItEEbt+0x8e>
	  _M_realloc_insert(end(), __x);
 8019830:	aa05      	add	r2, sp, #20
 8019832:	4629      	mov	r1, r5
 8019834:	4630      	mov	r0, r6
 8019836:	f7f5 fb2f 	bl	800ee98 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 801983a:	e7e0      	b.n	80197fe <_ZN9Registers11AddRegisterItEEbt+0x8e>
 801983c:	0801bdac 	.word	0x0801bdac

08019840 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8019840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019844:	b083      	sub	sp, #12
 8019846:	4688      	mov	r8, r1
 8019848:	4616      	mov	r6, r2
 801984a:	2301      	movs	r3, #1
 801984c:	9300      	str	r3, [sp, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801984e:	6842      	ldr	r2, [r0, #4]
 8019850:	6803      	ldr	r3, [r0, #0]
 8019852:	1ad3      	subs	r3, r2, r3
	if (max_size() - size() < __n)
 8019854:	f06f 4178 	mvn.w	r1, #4160749568	; 0xf8000000
 8019858:	ebb1 1f23 	cmp.w	r1, r3, asr #4
 801985c:	d040      	beq.n	80198e0 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>
 801985e:	4604      	mov	r4, r0
 8019860:	111d      	asrs	r5, r3, #4
	const size_type __len = size() + (std::max)(size(), __n);
 8019862:	9501      	str	r5, [sp, #4]
      if (__a < __b)
 8019864:	2d00      	cmp	r5, #0
 8019866:	d03e      	beq.n	80198e6 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa6>
      return __a;
 8019868:	ab01      	add	r3, sp, #4
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	441d      	add	r5, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801986e:	6823      	ldr	r3, [r4, #0]
 8019870:	1ad2      	subs	r2, r2, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8019872:	ebb5 1f22 	cmp.w	r5, r2, asr #4
 8019876:	d338      	bcc.n	80198ea <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xaa>
 8019878:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 801987c:	d238      	bcs.n	80198f0 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb0>
      pointer __old_start = this->_M_impl._M_start;
 801987e:	f8d4 9000 	ldr.w	r9, [r4]
      pointer __old_finish = this->_M_impl._M_finish;
 8019882:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8019886:	eba8 0b09 	sub.w	fp, r8, r9
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801988a:	b3b5      	cbz	r5, 80198fa <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xba>
	if (__n > this->_M_max_size())
 801988c:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 8019890:	d231      	bcs.n	80198f6 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb6>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8019892:	0128      	lsls	r0, r5, #4
 8019894:	f001 fb7c 	bl	801af90 <_Znwj>
 8019898:	4607      	mov	r7, r0
	  _Alloc_traits::construct(this->_M_impl,
 801989a:	eb07 0c0b 	add.w	ip, r7, fp
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801989e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80198a2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      ptrdiff_t __count = __last - __first;
 80198a6:	eba8 0609 	sub.w	r6, r8, r9
      if (__count > 0)
 80198aa:	2e00      	cmp	r6, #0
 80198ac:	dc27      	bgt.n	80198fe <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xbe>
      return __result + __count;
 80198ae:	443e      	add	r6, r7
	      ++__new_finish;
 80198b0:	3610      	adds	r6, #16
      ptrdiff_t __count = __last - __first;
 80198b2:	ebaa 0a08 	sub.w	sl, sl, r8
      if (__count > 0)
 80198b6:	f1ba 0f00 	cmp.w	sl, #0
 80198ba:	dc26      	bgt.n	801990a <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xca>
      return __result + __count;
 80198bc:	4456      	add	r6, sl
		    this->_M_impl._M_end_of_storage - __old_start);
 80198be:	68a1      	ldr	r1, [r4, #8]
 80198c0:	eba1 0109 	sub.w	r1, r1, r9
	if (__p)
 80198c4:	f1b9 0f00 	cmp.w	r9, #0
 80198c8:	d002      	beq.n	80198d0 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x90>
	::operator delete(__p
 80198ca:	4648      	mov	r0, r9
 80198cc:	f001 fb4a 	bl	801af64 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 80198d0:	6027      	str	r7, [r4, #0]
      this->_M_impl._M_finish = __new_finish;
 80198d2:	6066      	str	r6, [r4, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80198d4:	eb07 1505 	add.w	r5, r7, r5, lsl #4
 80198d8:	60a5      	str	r5, [r4, #8]
    }
 80198da:	b003      	add	sp, #12
 80198dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_length_error(__N(__s));
 80198e0:	480d      	ldr	r0, [pc, #52]	; (8019918 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xd8>)
 80198e2:	f001 fc09 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	return __b;
 80198e6:	466b      	mov	r3, sp
 80198e8:	e7bf      	b.n	801986a <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80198ea:	f06f 4578 	mvn.w	r5, #4160749568	; 0xf8000000
 80198ee:	e7c6      	b.n	801987e <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
 80198f0:	f06f 4578 	mvn.w	r5, #4160749568	; 0xf8000000
 80198f4:	e7c3      	b.n	801987e <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	  std::__throw_bad_alloc();
 80198f6:	f001 fbf9 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80198fa:	2700      	movs	r7, #0
 80198fc:	e7cd      	b.n	801989a <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80198fe:	4632      	mov	r2, r6
 8019900:	4649      	mov	r1, r9
 8019902:	4638      	mov	r0, r7
 8019904:	f002 f802 	bl	801b90c <memmove>
 8019908:	e7d1      	b.n	80198ae <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x6e>
 801990a:	4652      	mov	r2, sl
 801990c:	4641      	mov	r1, r8
 801990e:	4630      	mov	r0, r6
 8019910:	f001 fffc 	bl	801b90c <memmove>
 8019914:	e7d2      	b.n	80198bc <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x7c>
 8019916:	bf00      	nop
 8019918:	0801bde4 	.word	0x0801bde4

0801991c <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801991c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019920:	b086      	sub	sp, #24
 8019922:	4604      	mov	r4, r0
 8019924:	460d      	mov	r5, r1
 8019926:	4690      	mov	r8, r2
 8019928:	461f      	mov	r7, r3
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801992a:	f04f 31ff 	mov.w	r1, #4294967295
 801992e:	6800      	ldr	r0, [r0, #0]
 8019930:	f7f2 ffc2 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8019934:	f10d 0217 	add.w	r2, sp, #23
 8019938:	4629      	mov	r1, r5
 801993a:	4620      	mov	r0, r4
 801993c:	f000 f9a7 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8019940:	f89d 6017 	ldrb.w	r6, [sp, #23]
 8019944:	b36e      	cbz	r6, 80199a2 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE+0x86>
 8019946:	4605      	mov	r5, r0
	uint8_t registered_type = GetTypeID<T>(&success);
 8019948:	f10d 0117 	add.w	r1, sp, #23
 801994c:	4620      	mov	r0, r4
 801994e:	f7ff fe13 	bl	8019578 <_ZN9Registers9GetTypeIDItEEhPb>
	if (!success) {
 8019952:	f89d 6017 	ldrb.w	r6, [sp, #23]
 8019956:	b35e      	cbz	r6, 80199b0 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE+0x94>
	if (target_register->register_info.type != registered_type) {
 8019958:	792b      	ldrb	r3, [r5, #4]
 801995a:	4283      	cmp	r3, r0
 801995c:	d12c      	bne.n	80199b8 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE+0x9c>
	if (callbacks[target_register->register_info.type] == NULL) {// check supported type
 801995e:	3304      	adds	r3, #4
 8019960:	f854 c023 	ldr.w	ip, [r4, r3, lsl #2]
 8019964:	f1bc 0f00 	cmp.w	ip, #0
 8019968:	d02b      	beq.n	80199c2 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE+0xa6>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801996a:	782b      	ldrb	r3, [r5, #0]
 801996c:	b90b      	cbnz	r3, 8019972 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE+0x56>
 801996e:	786b      	ldrb	r3, [r5, #1]
 8019970:	b363      	cbz	r3, 80199cc <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE+0xb0>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8019972:	8968      	ldrh	r0, [r5, #10]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019974:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8019978:	f8dc 2000 	ldr.w	r2, [ip]
 801997c:	1a9b      	subs	r3, r3, r2
 801997e:	111a      	asrs	r2, r3, #4
	if (__n >= this->size())
 8019980:	ebb0 1f23 	cmp.w	r0, r3, asr #4
 8019984:	d243      	bcs.n	8019a0e <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE+0xf2>
	return *(this->_M_impl._M_start + __n);
 8019986:	f8dc 1000 	ldr.w	r1, [ip]
 801998a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
		callback->context = context;
 801998e:	f8c1 8004 	str.w	r8, [r1, #4]
		callback->write = write;
 8019992:	608f      	str	r7, [r1, #8]
	target_register->mode.callbacks = true; // = (uint8_t) CALLBACK_MODE;
 8019994:	2301      	movs	r3, #1
 8019996:	706b      	strb	r3, [r5, #1]
	target_register->access.write = true;
 8019998:	722b      	strb	r3, [r5, #8]
	osSemaphoreRelease(RegistersSemaphore);
 801999a:	6820      	ldr	r0, [r4, #0]
 801999c:	f7f2 ffc0 	bl	800c920 <osSemaphoreRelease>
	return true;
 80199a0:	e002      	b.n	80199a8 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE+0x8c>
		osSemaphoreRelease(RegistersSemaphore);
 80199a2:	6820      	ldr	r0, [r4, #0]
 80199a4:	f7f2 ffbc 	bl	800c920 <osSemaphoreRelease>
}
 80199a8:	4630      	mov	r0, r6
 80199aa:	b006      	add	sp, #24
 80199ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		osSemaphoreRelease(RegistersSemaphore);
 80199b0:	6820      	ldr	r0, [r4, #0]
 80199b2:	f7f2 ffb5 	bl	800c920 <osSemaphoreRelease>
		return false;
 80199b6:	e7f7      	b.n	80199a8 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE+0x8c>
		osSemaphoreRelease(RegistersSemaphore);
 80199b8:	6820      	ldr	r0, [r4, #0]
 80199ba:	f7f2 ffb1 	bl	800c920 <osSemaphoreRelease>
		return false;
 80199be:	2600      	movs	r6, #0
 80199c0:	e7f2      	b.n	80199a8 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE+0x8c>
		osSemaphoreRelease(RegistersSemaphore);
 80199c2:	6820      	ldr	r0, [r4, #0]
 80199c4:	f7f2 ffac 	bl	800c920 <osSemaphoreRelease>
		return false;
 80199c8:	2600      	movs	r6, #0
 80199ca:	e7ed      	b.n	80199a8 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE+0x8c>
		callback.context = context;
 80199cc:	f8cd 8008 	str.w	r8, [sp, #8]
		callback.write = write;
 80199d0:	9703      	str	r7, [sp, #12]
		callback.read = NULL;
 80199d2:	9304      	str	r3, [sp, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80199d4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80199d8:	f8dc 2000 	ldr.w	r2, [ip]
 80199dc:	1a9b      	subs	r3, r3, r2
 80199de:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 80199e0:	816b      	strh	r3, [r5, #10]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80199e2:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80199e6:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80199ea:	429f      	cmp	r7, r3
 80199ec:	d009      	beq.n	8019a02 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE+0xe6>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80199ee:	ab01      	add	r3, sp, #4
 80199f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80199f2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 80199f6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80199fa:	3310      	adds	r3, #16
 80199fc:	f8cc 3004 	str.w	r3, [ip, #4]
 8019a00:	e7c8      	b.n	8019994 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE+0x78>
	  _M_realloc_insert(end(), __x);
 8019a02:	aa01      	add	r2, sp, #4
 8019a04:	4639      	mov	r1, r7
 8019a06:	4660      	mov	r0, ip
 8019a08:	f7ff ff1a 	bl	8019840 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
		target_callback_list->push_back(callback);
 8019a0c:	e7c2      	b.n	8019994 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE+0x78>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8019a0e:	4601      	mov	r1, r0
 8019a10:	4801      	ldr	r0, [pc, #4]	; (8019a18 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE+0xfc>)
 8019a12:	f001 fb74 	bl	801b0fe <_ZSt24__throw_out_of_range_fmtPKcz>
 8019a16:	bf00      	nop
 8019a18:	0801bffc 	.word	0x0801bffc

08019a1c <_ZN10Publishers12AddRegistersEv>:
void Publishers::AddRegisters(void) {
 8019a1c:	b510      	push	{r4, lr}
 8019a1e:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_PUB_SET_STATUS);
 8019a20:	2110      	movs	r1, #16
 8019a22:	6840      	ldr	r0, [r0, #4]
 8019a24:	f7f5 faa4 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsArray(REG_PUB_SET_STATUS, 2);
 8019a28:	2202      	movs	r2, #2
 8019a2a:	2110      	movs	r1, #16
 8019a2c:	6860      	ldr	r0, [r4, #4]
 8019a2e:	f000 f98e 	bl	8019d4e <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_SET_STATUS, (void*) this,
 8019a32:	4b37      	ldr	r3, [pc, #220]	; (8019b10 <_ZN10Publishers12AddRegistersEv+0xf4>)
 8019a34:	4622      	mov	r2, r4
 8019a36:	2110      	movs	r1, #16
 8019a38:	6860      	ldr	r0, [r4, #4]
 8019a3a:	f7f5 fb6f 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint16_t>(REG_PUB_SET_TOPIC_STATUS);
 8019a3e:	2111      	movs	r1, #17
 8019a40:	6860      	ldr	r0, [r4, #4]
 8019a42:	f7ff fe95 	bl	8019770 <_ZN9Registers11AddRegisterItEEbt>
	registers->SetRegisterAsArray(REG_PUB_SET_TOPIC_STATUS, 3);
 8019a46:	2203      	movs	r2, #3
 8019a48:	2111      	movs	r1, #17
 8019a4a:	6860      	ldr	r0, [r4, #4]
 8019a4c:	f000 f97f 	bl	8019d4e <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_PUB_SET_TOPIC_STATUS, (void*) this,
 8019a50:	4b30      	ldr	r3, [pc, #192]	; (8019b14 <_ZN10Publishers12AddRegistersEv+0xf8>)
 8019a52:	4622      	mov	r2, r4
 8019a54:	2111      	movs	r1, #17
 8019a56:	6860      	ldr	r0, [r4, #4]
 8019a58:	f7ff ff60 	bl	801991c <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint16_t>(REG_PUB_SET_PRESCALER);
 8019a5c:	2112      	movs	r1, #18
 8019a5e:	6860      	ldr	r0, [r4, #4]
 8019a60:	f7ff fe86 	bl	8019770 <_ZN9Registers11AddRegisterItEEbt>
	registers->SetRegisterAsArray(REG_PUB_SET_PRESCALER, 2);
 8019a64:	2202      	movs	r2, #2
 8019a66:	2112      	movs	r1, #18
 8019a68:	6860      	ldr	r0, [r4, #4]
 8019a6a:	f000 f970 	bl	8019d4e <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_PUB_SET_PRESCALER, (void*) this,
 8019a6e:	4b2a      	ldr	r3, [pc, #168]	; (8019b18 <_ZN10Publishers12AddRegistersEv+0xfc>)
 8019a70:	4622      	mov	r2, r4
 8019a72:	2112      	movs	r1, #18
 8019a74:	6860      	ldr	r0, [r4, #4]
 8019a76:	f7ff ff51 	bl	801991c <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_PUB_STOP_TOPICS);
 8019a7a:	2113      	movs	r1, #19
 8019a7c:	6860      	ldr	r0, [r4, #4]
 8019a7e:	f7f5 fa77 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_PUB_STOP_TOPICS);
 8019a82:	2113      	movs	r1, #19
 8019a84:	6860      	ldr	r0, [r4, #4]
 8019a86:	f000 f942 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_STOP_TOPICS, (void*) this,
 8019a8a:	4b24      	ldr	r3, [pc, #144]	; (8019b1c <_ZN10Publishers12AddRegistersEv+0x100>)
 8019a8c:	4622      	mov	r2, r4
 8019a8e:	2113      	movs	r1, #19
 8019a90:	6860      	ldr	r0, [r4, #4]
 8019a92:	f7f5 fb43 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_PUB_LINK_INTERFACE);
 8019a96:	2114      	movs	r1, #20
 8019a98:	6860      	ldr	r0, [r4, #4]
 8019a9a:	f7f5 fa69 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsArray(REG_PUB_LINK_INTERFACE, 2);
 8019a9e:	2202      	movs	r2, #2
 8019aa0:	2114      	movs	r1, #20
 8019aa2:	6860      	ldr	r0, [r4, #4]
 8019aa4:	f000 f953 	bl	8019d4e <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_LINK_INTERFACE, (void*) this,
 8019aa8:	4b1d      	ldr	r3, [pc, #116]	; (8019b20 <_ZN10Publishers12AddRegistersEv+0x104>)
 8019aaa:	4622      	mov	r2, r4
 8019aac:	2114      	movs	r1, #20
 8019aae:	6860      	ldr	r0, [r4, #4]
 8019ab0:	f7f5 fb34 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_PUB_UNLINK_INTERFACE);
 8019ab4:	2115      	movs	r1, #21
 8019ab6:	6860      	ldr	r0, [r4, #4]
 8019ab8:	f7f5 fa5a 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsArray(REG_PUB_UNLINK_INTERFACE, 2);
 8019abc:	2202      	movs	r2, #2
 8019abe:	2115      	movs	r1, #21
 8019ac0:	6860      	ldr	r0, [r4, #4]
 8019ac2:	f000 f944 	bl	8019d4e <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_UNLINK_INTERFACE, (void*) this,
 8019ac6:	4b17      	ldr	r3, [pc, #92]	; (8019b24 <_ZN10Publishers12AddRegistersEv+0x108>)
 8019ac8:	4622      	mov	r2, r4
 8019aca:	2115      	movs	r1, #21
 8019acc:	6860      	ldr	r0, [r4, #4]
 8019ace:	f7f5 fb25 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_PUB_CLEAR_INTERFACES);
 8019ad2:	2116      	movs	r1, #22
 8019ad4:	6860      	ldr	r0, [r4, #4]
 8019ad6:	f7f5 fa4b 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_PUB_CLEAR_INTERFACES);
 8019ada:	2116      	movs	r1, #22
 8019adc:	6860      	ldr	r0, [r4, #4]
 8019ade:	f000 f916 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_CLEAR_INTERFACES, (void*) this,
 8019ae2:	4b11      	ldr	r3, [pc, #68]	; (8019b28 <_ZN10Publishers12AddRegistersEv+0x10c>)
 8019ae4:	4622      	mov	r2, r4
 8019ae6:	2116      	movs	r1, #22
 8019ae8:	6860      	ldr	r0, [r4, #4]
 8019aea:	f7f5 fb17 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_PUB_SET_TARGET_ADDRESS);
 8019aee:	2117      	movs	r1, #23
 8019af0:	6860      	ldr	r0, [r4, #4]
 8019af2:	f7f5 fa3d 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsArray(REG_PUB_SET_TARGET_ADDRESS, 3);
 8019af6:	2203      	movs	r2, #3
 8019af8:	2117      	movs	r1, #23
 8019afa:	6860      	ldr	r0, [r4, #4]
 8019afc:	f000 f927 	bl	8019d4e <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_SET_TARGET_ADDRESS, (void*) this,
 8019b00:	4b0a      	ldr	r3, [pc, #40]	; (8019b2c <_ZN10Publishers12AddRegistersEv+0x110>)
 8019b02:	4622      	mov	r2, r4
 8019b04:	2117      	movs	r1, #23
 8019b06:	6860      	ldr	r0, [r4, #4]
 8019b08:	f7f5 fb08 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
}
 8019b0c:	bd10      	pop	{r4, pc}
 8019b0e:	bf00      	nop
 8019b10:	080192e9 	.word	0x080192e9
 8019b14:	08019461 	.word	0x08019461
 8019b18:	08019339 	.word	0x08019339
 8019b1c:	0801938f 	.word	0x0801938f
 8019b20:	08019757 	.word	0x08019757
 8019b24:	08019bd1 	.word	0x08019bd1
 8019b28:	080193d3 	.word	0x080193d3
 8019b2c:	08019505 	.word	0x08019505

08019b30 <_ZSt12__niter_baseIP16PublishInterfaceSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    { return __it.base(); }
 8019b30:	4770      	bx	lr

08019b32 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 8019b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b34:	4605      	mov	r5, r0
 8019b36:	460c      	mov	r4, r1
      { return __normal_iterator(_M_current + __n); }
 8019b38:	1c88      	adds	r0, r1, #2
      : _M_current(__i) { }
 8019b3a:	686f      	ldr	r7, [r5, #4]
      if (__position + 1 != end())
 8019b3c:	4287      	cmp	r7, r0
 8019b3e:	d012      	beq.n	8019b66 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x34>
      return std::__niter_wrap(__result,
 8019b40:	f7ff fff6 	bl	8019b30 <_ZSt12__niter_baseIP16PublishInterfaceSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8019b44:	4606      	mov	r6, r0
 8019b46:	4638      	mov	r0, r7
 8019b48:	f7ff fff2 	bl	8019b30 <_ZSt12__niter_baseIP16PublishInterfaceSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8019b4c:	4607      	mov	r7, r0
 8019b4e:	4620      	mov	r0, r4
 8019b50:	f7ff ffee 	bl	8019b30 <_ZSt12__niter_baseIP16PublishInterfaceSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
	  const ptrdiff_t _Num = __last - __first;
 8019b54:	1bba      	subs	r2, r7, r6
	  if (_Num)
 8019b56:	42be      	cmp	r6, r7
 8019b58:	d002      	beq.n	8019b60 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x2e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8019b5a:	4631      	mov	r1, r6
 8019b5c:	f001 fed6 	bl	801b90c <memmove>
    { return __from + (__res - std::__niter_base(__from)); }
 8019b60:	4620      	mov	r0, r4
 8019b62:	f7ff ffe5 	bl	8019b30 <_ZSt12__niter_baseIP16PublishInterfaceSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
      --this->_M_impl._M_finish;
 8019b66:	686b      	ldr	r3, [r5, #4]
 8019b68:	3b02      	subs	r3, #2
 8019b6a:	606b      	str	r3, [r5, #4]
    }
 8019b6c:	4620      	mov	r0, r4
 8019b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019b70 <_ZN10Publishers19UnlinkFromInterfaceEhh>:
bool Publishers::UnlinkFromInterface(uint8_t ID, uint8_t interface_ID) {
 8019b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b74:	b082      	sub	sp, #8
 8019b76:	4680      	mov	r8, r0
 8019b78:	460d      	mov	r5, r1
 8019b7a:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 8019b7c:	f10d 0207 	add.w	r2, sp, #7
 8019b80:	f7ff fb76 	bl	8019270 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 8019b84:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8019b88:	b91c      	cbnz	r4, 8019b92 <_ZN10Publishers19UnlinkFromInterfaceEhh+0x22>
}
 8019b8a:	4620      	mov	r0, r4
 8019b8c:	b002      	add	sp, #8
 8019b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b92:	4607      	mov	r7, r0
	uint8_t index = FindPublishInterfaceIndex(ID, interface_ID, &success);
 8019b94:	f10d 0307 	add.w	r3, sp, #7
 8019b98:	4632      	mov	r2, r6
 8019b9a:	4629      	mov	r1, r5
 8019b9c:	4640      	mov	r0, r8
 8019b9e:	f7ff fcbe 	bl	801951e <_ZN10Publishers25FindPublishInterfaceIndexEhhPb>
 8019ba2:	4605      	mov	r5, r0
	if (!success) return false;
 8019ba4:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8019ba8:	2c00      	cmp	r4, #0
 8019baa:	d0ee      	beq.n	8019b8a <_ZN10Publishers19UnlinkFromInterfaceEhh+0x1a>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8019bac:	f04f 31ff 	mov.w	r1, #4294967295
 8019bb0:	f8d8 0000 	ldr.w	r0, [r8]
 8019bb4:	f7f2 fe80 	bl	800c8b8 <osSemaphoreAcquire>
 8019bb8:	68b9      	ldr	r1, [r7, #8]
      { return _M_erase(begin() + (__position - cbegin())); }
 8019bba:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 8019bbe:	f107 0008 	add.w	r0, r7, #8
 8019bc2:	f7ff ffb6 	bl	8019b32 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
	osSemaphoreRelease(PublishersSemaphore);
 8019bc6:	f8d8 0000 	ldr.w	r0, [r8]
 8019bca:	f7f2 fea9 	bl	800c920 <osSemaphoreRelease>
	return true;
 8019bce:	e7dc      	b.n	8019b8a <_ZN10Publishers19UnlinkFromInterfaceEhh+0x1a>

08019bd0 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8019bd0:	2b02      	cmp	r3, #2
 8019bd2:	d001      	beq.n	8019bd8 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x8>
 8019bd4:	2000      	movs	r0, #0
		}
 8019bd6:	4770      	bx	lr
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8019bd8:	b508      	push	{r3, lr}
 8019bda:	4611      	mov	r1, r2
			self->UnlinkFromInterface(input[0], input[1]);
 8019bdc:	7852      	ldrb	r2, [r2, #1]
 8019bde:	7809      	ldrb	r1, [r1, #0]
 8019be0:	f7ff ffc6 	bl	8019b70 <_ZN10Publishers19UnlinkFromInterfaceEhh>
			return true;
 8019be4:	2001      	movs	r0, #1
		}
 8019be6:	bd08      	pop	{r3, pc}

08019be8 <_ZZN9Registers16AddBaseRegistersEvENUlPvtPPmPtE_4_FUNES0_tS2_S3_>:

void Registers::AddBaseRegisters(void) {
	AddRegister<uint32_t>(REG_TIMEBASE);
	SetRegisterAsSingle(REG_TIMEBASE);
	AddReadCallback<uint32_t>(REG_TIMEBASE, NULL,
		[](void* context, uint16_t register_id, uint32_t** output, uint16_t* length) -> bool {
 8019be8:	b538      	push	{r3, r4, r5, lr}
			*length = 1;
 8019bea:	2401      	movs	r4, #1
 8019bec:	801c      	strh	r4, [r3, #0]
			**output = HAL_GetTick();
 8019bee:	6815      	ldr	r5, [r2, #0]
 8019bf0:	f7e9 fe02 	bl	80037f8 <HAL_GetTick>
 8019bf4:	6028      	str	r0, [r5, #0]
			return true;
		}
 8019bf6:	4620      	mov	r0, r4
 8019bf8:	bd38      	pop	{r3, r4, r5, pc}

08019bfa <_ZN9RegistersC1Ev>:
Registers::Registers() {
 8019bfa:	b5f0      	push	{r4, r5, r6, r7, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8019bfc:	2200      	movs	r2, #0
 8019bfe:	6042      	str	r2, [r0, #4]
 8019c00:	6082      	str	r2, [r0, #8]
 8019c02:	60c2      	str	r2, [r0, #12]
 8019c04:	f100 0e38 	add.w	lr, r0, #56	; 0x38
 8019c08:	6382      	str	r2, [r0, #56]	; 0x38
 8019c0a:	63c2      	str	r2, [r0, #60]	; 0x3c
 8019c0c:	6402      	str	r2, [r0, #64]	; 0x40
 8019c0e:	f100 0c44 	add.w	ip, r0, #68	; 0x44
 8019c12:	6442      	str	r2, [r0, #68]	; 0x44
 8019c14:	6482      	str	r2, [r0, #72]	; 0x48
 8019c16:	64c2      	str	r2, [r0, #76]	; 0x4c
 8019c18:	f100 0750 	add.w	r7, r0, #80	; 0x50
 8019c1c:	6502      	str	r2, [r0, #80]	; 0x50
 8019c1e:	6542      	str	r2, [r0, #84]	; 0x54
 8019c20:	6582      	str	r2, [r0, #88]	; 0x58
 8019c22:	f100 065c 	add.w	r6, r0, #92	; 0x5c
 8019c26:	65c2      	str	r2, [r0, #92]	; 0x5c
 8019c28:	6602      	str	r2, [r0, #96]	; 0x60
 8019c2a:	6642      	str	r2, [r0, #100]	; 0x64
 8019c2c:	f100 0568 	add.w	r5, r0, #104	; 0x68
 8019c30:	6682      	str	r2, [r0, #104]	; 0x68
 8019c32:	66c2      	str	r2, [r0, #108]	; 0x6c
 8019c34:	6702      	str	r2, [r0, #112]	; 0x70
 8019c36:	f100 0474 	add.w	r4, r0, #116	; 0x74
 8019c3a:	6742      	str	r2, [r0, #116]	; 0x74
 8019c3c:	6782      	str	r2, [r0, #120]	; 0x78
 8019c3e:	67c2      	str	r2, [r0, #124]	; 0x7c
 8019c40:	f100 0180 	add.w	r1, r0, #128	; 0x80
 8019c44:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8019c48:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 8019c4c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
	callbacks[UINT8_TYPE] = NULL;
 8019c50:	6102      	str	r2, [r0, #16]
	callbacks[UINT16_TYPE] = NULL;
 8019c52:	6142      	str	r2, [r0, #20]
	callbacks[UINT32_TYPE] = NULL;
 8019c54:	6182      	str	r2, [r0, #24]
	callbacks[UINT64_TYPE] = NULL;
 8019c56:	61c2      	str	r2, [r0, #28]
	callbacks[INT8_TYPE] = NULL;
 8019c58:	6202      	str	r2, [r0, #32]
	callbacks[INT16_TYPE] = NULL;
 8019c5a:	6242      	str	r2, [r0, #36]	; 0x24
	callbacks[INT32_TYPE] = NULL;
 8019c5c:	6282      	str	r2, [r0, #40]	; 0x28
	callbacks[INT64_TYPE] = NULL;
 8019c5e:	62c2      	str	r2, [r0, #44]	; 0x2c
	callbacks[FLOAT_TYPE] = NULL;
 8019c60:	6302      	str	r2, [r0, #48]	; 0x30
	callbacks[DOUBLE_TYPE] = NULL;
 8019c62:	6342      	str	r2, [r0, #52]	; 0x34
	callbacks[UINT8_TYPE] = &uint8_t_callbacks;
 8019c64:	f8c0 e010 	str.w	lr, [r0, #16]
	callbacks[UINT16_TYPE] = &uint16_t_callbacks;
 8019c68:	f8c0 c014 	str.w	ip, [r0, #20]
	callbacks[UINT32_TYPE] = &uint32_t_callbacks;
 8019c6c:	6187      	str	r7, [r0, #24]
	callbacks[UINT64_TYPE] = &uint64_t_callbacks;
 8019c6e:	61c6      	str	r6, [r0, #28]
	callbacks[INT32_TYPE] = &int32_t_callbacks;
 8019c70:	6285      	str	r5, [r0, #40]	; 0x28
	callbacks[FLOAT_TYPE] = &float_callbacks;
 8019c72:	6304      	str	r4, [r0, #48]	; 0x30
	callbacks[DOUBLE_TYPE] = &double_callbacks;
 8019c74:	6341      	str	r1, [r0, #52]	; 0x34
}
 8019c76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019c78 <_ZN9Registers4InitEv>:
void Registers::Init(void) {
 8019c78:	b510      	push	{r4, lr}
 8019c7a:	4604      	mov	r4, r0
	RegistersSemaphore = osSemaphoreNew(1,1,NULL);
 8019c7c:	2200      	movs	r2, #0
 8019c7e:	2101      	movs	r1, #1
 8019c80:	4608      	mov	r0, r1
 8019c82:	f7f2 fdbd 	bl	800c800 <osSemaphoreNew>
 8019c86:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(RegistersSemaphore);
 8019c88:	f7f2 fe4a 	bl	800c920 <osSemaphoreRelease>
}
 8019c8c:	bd10      	pop	{r4, pc}

08019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>:
Register Registers::FindRegister(uint16_t ID, bool* success) {
	RegisterConfiguration* register_configuration = FindRegisterConfiguration(ID, success);
	return register_configuration->register_info;
}

RegisterConfiguration* Registers::FindRegisterConfiguration(uint16_t ID, bool* success) {
 8019c8e:	b410      	push	{r4}
	for (RegisterConfiguration &register_configuration : registers) {
 8019c90:	6843      	ldr	r3, [r0, #4]
 8019c92:	6884      	ldr	r4, [r0, #8]
 8019c94:	e001      	b.n	8019c9a <_ZN9Registers25FindRegisterConfigurationEtPb+0xc>
	++_M_current;
 8019c96:	f100 0310 	add.w	r3, r0, #16
    { return __lhs.base() != __rhs.base(); }
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	429c      	cmp	r4, r3
 8019c9e:	d005      	beq.n	8019cac <_ZN9Registers25FindRegisterConfigurationEtPb+0x1e>
		if (register_configuration.register_info.address == ID) {
 8019ca0:	885b      	ldrh	r3, [r3, #2]
 8019ca2:	428b      	cmp	r3, r1
 8019ca4:	d1f7      	bne.n	8019c96 <_ZN9Registers25FindRegisterConfigurationEtPb+0x8>
			*success = true;
 8019ca6:	2301      	movs	r3, #1
 8019ca8:	7013      	strb	r3, [r2, #0]
			return &register_configuration;
 8019caa:	e001      	b.n	8019cb0 <_ZN9Registers25FindRegisterConfigurationEtPb+0x22>
		}
	}
	*success = false;
 8019cac:	2000      	movs	r0, #0
 8019cae:	7010      	strb	r0, [r2, #0]
	return NULL;
	//TODO return nothing case to handle, return a boolean
}
 8019cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019cb4:	4770      	bx	lr

08019cb6 <_ZN9Registers12FindRegisterEtPb>:
Register Registers::FindRegister(uint16_t ID, bool* success) {
 8019cb6:	b510      	push	{r4, lr}
 8019cb8:	4604      	mov	r4, r0
 8019cba:	4608      	mov	r0, r1
 8019cbc:	4611      	mov	r1, r2
	RegisterConfiguration* register_configuration = FindRegisterConfiguration(ID, success);
 8019cbe:	461a      	mov	r2, r3
 8019cc0:	f7ff ffe5 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	return register_configuration->register_info;
 8019cc4:	f8d0 3002 	ldr.w	r3, [r0, #2]
 8019cc8:	6023      	str	r3, [r4, #0]
 8019cca:	88c3      	ldrh	r3, [r0, #6]
 8019ccc:	80a3      	strh	r3, [r4, #4]
}
 8019cce:	4620      	mov	r0, r4
 8019cd0:	bd10      	pop	{r4, pc}

08019cd2 <_ZN9Registers20AddRegisterSemaphoreEtPPv>:

bool Registers::AddRegisterSemaphore(uint16_t ID, osSemaphoreId_t* register_semaphore) {
 8019cd2:	b570      	push	{r4, r5, r6, lr}
 8019cd4:	b082      	sub	sp, #8
 8019cd6:	4604      	mov	r4, r0
 8019cd8:	460d      	mov	r5, r1
 8019cda:	4616      	mov	r6, r2
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8019cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8019ce0:	6800      	ldr	r0, [r0, #0]
 8019ce2:	f7f2 fde9 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8019ce6:	f10d 0207 	add.w	r2, sp, #7
 8019cea:	4629      	mov	r1, r5
 8019cec:	4620      	mov	r0, r4
 8019cee:	f7ff ffce 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8019cf2:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8019cf6:	b135      	cbz	r5, 8019d06 <_ZN9Registers20AddRegisterSemaphoreEtPPv+0x34>
		osSemaphoreRelease(RegistersSemaphore);
		return false;
	}

	target_register->register_semaphore = register_semaphore;
 8019cf8:	60c6      	str	r6, [r0, #12]
	osSemaphoreRelease(RegistersSemaphore);
 8019cfa:	6820      	ldr	r0, [r4, #0]
 8019cfc:	f7f2 fe10 	bl	800c920 <osSemaphoreRelease>
	return true;
}
 8019d00:	4628      	mov	r0, r5
 8019d02:	b002      	add	sp, #8
 8019d04:	bd70      	pop	{r4, r5, r6, pc}
		osSemaphoreRelease(RegistersSemaphore);
 8019d06:	6820      	ldr	r0, [r4, #0]
 8019d08:	f7f2 fe0a 	bl	800c920 <osSemaphoreRelease>
		return false;
 8019d0c:	e7f8      	b.n	8019d00 <_ZN9Registers20AddRegisterSemaphoreEtPPv+0x2e>

08019d0e <_ZN9Registers19SetRegisterAsSingleEt>:
	target_register->access = base_register->access;
	osSemaphoreRelease(RegistersSemaphore);
	return true;
}

bool Registers::SetRegisterAsSingle(uint16_t ID) {
 8019d0e:	b530      	push	{r4, r5, lr}
 8019d10:	b083      	sub	sp, #12
 8019d12:	4604      	mov	r4, r0
 8019d14:	460d      	mov	r5, r1
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8019d16:	f04f 31ff 	mov.w	r1, #4294967295
 8019d1a:	6800      	ldr	r0, [r0, #0]
 8019d1c:	f7f2 fdcc 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8019d20:	f10d 0207 	add.w	r2, sp, #7
 8019d24:	4629      	mov	r1, r5
 8019d26:	4620      	mov	r0, r4
 8019d28:	f7ff ffb1 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8019d2c:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8019d30:	b14d      	cbz	r5, 8019d46 <_ZN9Registers19SetRegisterAsSingleEt+0x38>
		osSemaphoreRelease(RegistersSemaphore);
		return false;
	}

	target_register->register_info.isArray = false;
 8019d32:	2300      	movs	r3, #0
 8019d34:	7143      	strb	r3, [r0, #5]
	target_register->register_info.length = 1;
 8019d36:	2301      	movs	r3, #1
 8019d38:	80c3      	strh	r3, [r0, #6]
	osSemaphoreRelease(RegistersSemaphore);
 8019d3a:	6820      	ldr	r0, [r4, #0]
 8019d3c:	f7f2 fdf0 	bl	800c920 <osSemaphoreRelease>
	return true;
}
 8019d40:	4628      	mov	r0, r5
 8019d42:	b003      	add	sp, #12
 8019d44:	bd30      	pop	{r4, r5, pc}
		osSemaphoreRelease(RegistersSemaphore);
 8019d46:	6820      	ldr	r0, [r4, #0]
 8019d48:	f7f2 fdea 	bl	800c920 <osSemaphoreRelease>
		return false;
 8019d4c:	e7f8      	b.n	8019d40 <_ZN9Registers19SetRegisterAsSingleEt+0x32>

08019d4e <_ZN9Registers18SetRegisterAsArrayEtt>:

bool Registers::SetRegisterAsArray(uint16_t ID, uint16_t length_) {
 8019d4e:	b570      	push	{r4, r5, r6, lr}
 8019d50:	b082      	sub	sp, #8
 8019d52:	4604      	mov	r4, r0
 8019d54:	460d      	mov	r5, r1
 8019d56:	4616      	mov	r6, r2
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8019d58:	f04f 31ff 	mov.w	r1, #4294967295
 8019d5c:	6800      	ldr	r0, [r0, #0]
 8019d5e:	f7f2 fdab 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8019d62:	f10d 0207 	add.w	r2, sp, #7
 8019d66:	4629      	mov	r1, r5
 8019d68:	4620      	mov	r0, r4
 8019d6a:	f7ff ff90 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8019d6e:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8019d72:	b145      	cbz	r5, 8019d86 <_ZN9Registers18SetRegisterAsArrayEtt+0x38>
		osSemaphoreRelease(RegistersSemaphore);
		return false;
	}

	target_register->register_info.isArray = true;
 8019d74:	2301      	movs	r3, #1
 8019d76:	7143      	strb	r3, [r0, #5]
	target_register->register_info.length = length_;
 8019d78:	80c6      	strh	r6, [r0, #6]
	osSemaphoreRelease(RegistersSemaphore);
 8019d7a:	6820      	ldr	r0, [r4, #0]
 8019d7c:	f7f2 fdd0 	bl	800c920 <osSemaphoreRelease>
	return true;
}
 8019d80:	4628      	mov	r0, r5
 8019d82:	b002      	add	sp, #8
 8019d84:	bd70      	pop	{r4, r5, r6, pc}
		osSemaphoreRelease(RegistersSemaphore);
 8019d86:	6820      	ldr	r0, [r4, #0]
 8019d88:	f7f2 fdca 	bl	800c920 <osSemaphoreRelease>
		return false;
 8019d8c:	e7f8      	b.n	8019d80 <_ZN9Registers18SetRegisterAsArrayEtt+0x32>

08019d8e <_ZN9Registers19SetRegisterAsVectorEt>:

bool Registers::SetRegisterAsVector(uint16_t ID) {
 8019d8e:	b508      	push	{r3, lr}
	return SetRegisterAsArray(ID, 0);
 8019d90:	2200      	movs	r2, #0
 8019d92:	f7ff ffdc 	bl	8019d4e <_ZN9Registers18SetRegisterAsArrayEtt>
}
 8019d96:	bd08      	pop	{r3, pc}

08019d98 <_ZN9Registers22SetRegisterPermissionsEth>:

bool Registers::SetRegisterPermissions(uint16_t ID, uint8_t permissions_) {
 8019d98:	b570      	push	{r4, r5, r6, lr}
 8019d9a:	b082      	sub	sp, #8
 8019d9c:	4604      	mov	r4, r0
 8019d9e:	460e      	mov	r6, r1
 8019da0:	4615      	mov	r5, r2
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8019da2:	f04f 31ff 	mov.w	r1, #4294967295
 8019da6:	6800      	ldr	r0, [r0, #0]
 8019da8:	f7f2 fd86 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8019dac:	f10d 0207 	add.w	r2, sp, #7
 8019db0:	4631      	mov	r1, r6
 8019db2:	4620      	mov	r0, r4
 8019db4:	f7ff ff6b 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8019db8:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8019dbc:	b15e      	cbz	r6, 8019dd6 <_ZN9Registers22SetRegisterPermissionsEth+0x3e>
		osSemaphoreRelease(RegistersSemaphore);
		return false;
	}

	target_register->access.write = permissions_ & WRITE_PERMISSION;
 8019dbe:	f005 0301 	and.w	r3, r5, #1
 8019dc2:	7203      	strb	r3, [r0, #8]
	target_register->access.read = permissions_ & READ_PERMISSION;
 8019dc4:	f3c5 0540 	ubfx	r5, r5, #1, #1
 8019dc8:	7245      	strb	r5, [r0, #9]
	osSemaphoreRelease(RegistersSemaphore);
 8019dca:	6820      	ldr	r0, [r4, #0]
 8019dcc:	f7f2 fda8 	bl	800c920 <osSemaphoreRelease>
	return true;
}
 8019dd0:	4630      	mov	r0, r6
 8019dd2:	b002      	add	sp, #8
 8019dd4:	bd70      	pop	{r4, r5, r6, pc}
		osSemaphoreRelease(RegistersSemaphore);
 8019dd6:	6820      	ldr	r0, [r4, #0]
 8019dd8:	f7f2 fda2 	bl	800c920 <osSemaphoreRelease>
		return false;
 8019ddc:	e7f8      	b.n	8019dd0 <_ZN9Registers22SetRegisterPermissionsEth+0x38>

08019dde <_ZN9Registers12IsRegisteredEt>:

bool Registers::IsRegistered(uint16_t ID) {
 8019dde:	b530      	push	{r4, r5, lr}
 8019de0:	b083      	sub	sp, #12
 8019de2:	4604      	mov	r4, r0
 8019de4:	460d      	mov	r5, r1
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8019de6:	f04f 31ff 	mov.w	r1, #4294967295
 8019dea:	6800      	ldr	r0, [r0, #0]
 8019dec:	f7f2 fd64 	bl	800c8b8 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8019df0:	f10d 0207 	add.w	r2, sp, #7
 8019df4:	4629      	mov	r1, r5
 8019df6:	4620      	mov	r0, r4
 8019df8:	f7ff ff49 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	osSemaphoreRelease(RegistersSemaphore);
 8019dfc:	6820      	ldr	r0, [r4, #0]
 8019dfe:	f7f2 fd8f 	bl	800c920 <osSemaphoreRelease>
	return success;
}
 8019e02:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8019e06:	b003      	add	sp, #12
 8019e08:	bd30      	pop	{r4, r5, pc}
	...

08019e0c <_ZN9Registers15AddReadCallbackImEEbtPvPFbS1_tPPT_PtE>:
bool Registers::AddReadCallback(uint16_t ID, void* context, bool (*read)(void*, uint16_t, T**, uint16_t*)) {
 8019e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e10:	b086      	sub	sp, #24
 8019e12:	4604      	mov	r4, r0
 8019e14:	460d      	mov	r5, r1
 8019e16:	4690      	mov	r8, r2
 8019e18:	461f      	mov	r7, r3
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8019e1a:	f04f 31ff 	mov.w	r1, #4294967295
 8019e1e:	6800      	ldr	r0, [r0, #0]
 8019e20:	f7f2 fd4a 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8019e24:	f10d 0217 	add.w	r2, sp, #23
 8019e28:	4629      	mov	r1, r5
 8019e2a:	4620      	mov	r0, r4
 8019e2c:	f7ff ff2f 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8019e30:	f89d 6017 	ldrb.w	r6, [sp, #23]
 8019e34:	b36e      	cbz	r6, 8019e92 <_ZN9Registers15AddReadCallbackImEEbtPvPFbS1_tPPT_PtE+0x86>
 8019e36:	4605      	mov	r5, r0
	uint8_t registered_type = GetTypeID<T>(&success);
 8019e38:	f10d 0117 	add.w	r1, sp, #23
 8019e3c:	4620      	mov	r0, r4
 8019e3e:	f7f5 fe7f 	bl	800fb40 <_ZN9Registers9GetTypeIDImEEhPb>
	if (!success) {
 8019e42:	f89d 6017 	ldrb.w	r6, [sp, #23]
 8019e46:	b35e      	cbz	r6, 8019ea0 <_ZN9Registers15AddReadCallbackImEEbtPvPFbS1_tPPT_PtE+0x94>
	if (target_register->register_info.type != registered_type) {
 8019e48:	792b      	ldrb	r3, [r5, #4]
 8019e4a:	4283      	cmp	r3, r0
 8019e4c:	d12c      	bne.n	8019ea8 <_ZN9Registers15AddReadCallbackImEEbtPvPFbS1_tPPT_PtE+0x9c>
	if (callbacks[target_register->register_info.type] == NULL) {// check supported type
 8019e4e:	3304      	adds	r3, #4
 8019e50:	f854 c023 	ldr.w	ip, [r4, r3, lsl #2]
 8019e54:	f1bc 0f00 	cmp.w	ip, #0
 8019e58:	d02b      	beq.n	8019eb2 <_ZN9Registers15AddReadCallbackImEEbtPvPFbS1_tPPT_PtE+0xa6>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8019e5a:	782b      	ldrb	r3, [r5, #0]
 8019e5c:	b90b      	cbnz	r3, 8019e62 <_ZN9Registers15AddReadCallbackImEEbtPvPFbS1_tPPT_PtE+0x56>
 8019e5e:	786b      	ldrb	r3, [r5, #1]
 8019e60:	b363      	cbz	r3, 8019ebc <_ZN9Registers15AddReadCallbackImEEbtPvPFbS1_tPPT_PtE+0xb0>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8019e62:	8968      	ldrh	r0, [r5, #10]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019e64:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8019e68:	f8dc 2000 	ldr.w	r2, [ip]
 8019e6c:	1a9b      	subs	r3, r3, r2
 8019e6e:	111a      	asrs	r2, r3, #4
	if (__n >= this->size())
 8019e70:	ebb0 1f23 	cmp.w	r0, r3, asr #4
 8019e74:	d243      	bcs.n	8019efe <_ZN9Registers15AddReadCallbackImEEbtPvPFbS1_tPPT_PtE+0xf2>
	return *(this->_M_impl._M_start + __n);
 8019e76:	f8dc 1000 	ldr.w	r1, [ip]
 8019e7a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
		callback->context = context;
 8019e7e:	f8c1 8004 	str.w	r8, [r1, #4]
		callback->read = read;
 8019e82:	60cf      	str	r7, [r1, #12]
	target_register->mode.callbacks = true; // = (uint8_t) CALLBACK_MODE;
 8019e84:	2301      	movs	r3, #1
 8019e86:	706b      	strb	r3, [r5, #1]
	target_register->access.read = true;
 8019e88:	726b      	strb	r3, [r5, #9]
	osSemaphoreRelease(RegistersSemaphore);
 8019e8a:	6820      	ldr	r0, [r4, #0]
 8019e8c:	f7f2 fd48 	bl	800c920 <osSemaphoreRelease>
	return true;
 8019e90:	e002      	b.n	8019e98 <_ZN9Registers15AddReadCallbackImEEbtPvPFbS1_tPPT_PtE+0x8c>
		osSemaphoreRelease(RegistersSemaphore);
 8019e92:	6820      	ldr	r0, [r4, #0]
 8019e94:	f7f2 fd44 	bl	800c920 <osSemaphoreRelease>
}
 8019e98:	4630      	mov	r0, r6
 8019e9a:	b006      	add	sp, #24
 8019e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		osSemaphoreRelease(RegistersSemaphore);
 8019ea0:	6820      	ldr	r0, [r4, #0]
 8019ea2:	f7f2 fd3d 	bl	800c920 <osSemaphoreRelease>
		return false;
 8019ea6:	e7f7      	b.n	8019e98 <_ZN9Registers15AddReadCallbackImEEbtPvPFbS1_tPPT_PtE+0x8c>
		osSemaphoreRelease(RegistersSemaphore);
 8019ea8:	6820      	ldr	r0, [r4, #0]
 8019eaa:	f7f2 fd39 	bl	800c920 <osSemaphoreRelease>
		return false;
 8019eae:	2600      	movs	r6, #0
 8019eb0:	e7f2      	b.n	8019e98 <_ZN9Registers15AddReadCallbackImEEbtPvPFbS1_tPPT_PtE+0x8c>
		osSemaphoreRelease(RegistersSemaphore);
 8019eb2:	6820      	ldr	r0, [r4, #0]
 8019eb4:	f7f2 fd34 	bl	800c920 <osSemaphoreRelease>
		return false;
 8019eb8:	2600      	movs	r6, #0
 8019eba:	e7ed      	b.n	8019e98 <_ZN9Registers15AddReadCallbackImEEbtPvPFbS1_tPPT_PtE+0x8c>
		callback.context = context;
 8019ebc:	f8cd 8008 	str.w	r8, [sp, #8]
		callback.write = NULL;
 8019ec0:	9303      	str	r3, [sp, #12]
		callback.read = read;
 8019ec2:	9704      	str	r7, [sp, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019ec4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8019ec8:	f8dc 2000 	ldr.w	r2, [ip]
 8019ecc:	1a9b      	subs	r3, r3, r2
 8019ece:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8019ed0:	816b      	strh	r3, [r5, #10]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8019ed2:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8019ed6:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8019eda:	429f      	cmp	r7, r3
 8019edc:	d009      	beq.n	8019ef2 <_ZN9Registers15AddReadCallbackImEEbtPvPFbS1_tPPT_PtE+0xe6>
 8019ede:	ab01      	add	r3, sp, #4
 8019ee0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019ee2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8019ee6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8019eea:	3310      	adds	r3, #16
 8019eec:	f8cc 3004 	str.w	r3, [ip, #4]
 8019ef0:	e7c8      	b.n	8019e84 <_ZN9Registers15AddReadCallbackImEEbtPvPFbS1_tPPT_PtE+0x78>
	  _M_realloc_insert(end(), __x);
 8019ef2:	aa01      	add	r2, sp, #4
 8019ef4:	4639      	mov	r1, r7
 8019ef6:	4660      	mov	r0, ip
 8019ef8:	f7fd fbd6 	bl	80176a8 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
		target_callback_list->push_back(callback);
 8019efc:	e7c2      	b.n	8019e84 <_ZN9Registers15AddReadCallbackImEEbtPvPFbS1_tPPT_PtE+0x78>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8019efe:	4601      	mov	r1, r0
 8019f00:	4801      	ldr	r0, [pc, #4]	; (8019f08 <_ZN9Registers15AddReadCallbackImEEbtPvPFbS1_tPPT_PtE+0xfc>)
 8019f02:	f001 f8fc 	bl	801b0fe <_ZSt24__throw_out_of_range_fmtPKcz>
 8019f06:	bf00      	nop
 8019f08:	0801bffc 	.word	0x0801bffc

08019f0c <_ZN9Registers16AddBaseRegistersEv>:
void Registers::AddBaseRegisters(void) {
 8019f0c:	b510      	push	{r4, lr}
 8019f0e:	4604      	mov	r4, r0
	AddRegister<uint32_t>(REG_TIMEBASE);
 8019f10:	2100      	movs	r1, #0
 8019f12:	f7fd fae1 	bl	80174d8 <_ZN9Registers11AddRegisterImEEbt>
	SetRegisterAsSingle(REG_TIMEBASE);
 8019f16:	2100      	movs	r1, #0
 8019f18:	4620      	mov	r0, r4
 8019f1a:	f7ff fef8 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	AddReadCallback<uint32_t>(REG_TIMEBASE, NULL,
 8019f1e:	4b03      	ldr	r3, [pc, #12]	; (8019f2c <_ZN9Registers16AddBaseRegistersEv+0x20>)
 8019f20:	2200      	movs	r2, #0
 8019f22:	4611      	mov	r1, r2
 8019f24:	4620      	mov	r0, r4
 8019f26:	f7ff ff71 	bl	8019e0c <_ZN9Registers15AddReadCallbackImEEbtPvPFbS1_tPPT_PtE>
}
 8019f2a:	bd10      	pop	{r4, pc}
 8019f2c:	08019be9 	.word	0x08019be9

08019f30 <_ZZN7Sensors12AddRegistersEvENUlPvtPPhPtE_4_FUNES0_tS2_S3_>:

void Sensors::AddRegisters(void) {
	registers->AddRegister<uint8_t>(REG_SENSORS_READING_STATUS);
	registers->SetRegisterAsSingle(REG_SENSORS_READING_STATUS);
	registers->AddReadCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
			[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 8019f30:	b538      	push	{r3, r4, r5, lr}
 8019f32:	4604      	mov	r4, r0
 8019f34:	4615      	mov	r5, r2
			Sensors* self = (Sensors*) context;
			osSemaphoreAcquire(self->SensorsSemaphore, osWaitForever);
 8019f36:	f04f 31ff 	mov.w	r1, #4294967295
 8019f3a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8019f3c:	f7f2 fcbc 	bl	800c8b8 <osSemaphoreAcquire>
			**output = (uint8_t) self->active;
 8019f40:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
 8019f44:	682b      	ldr	r3, [r5, #0]
 8019f46:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->SensorsSemaphore);
 8019f48:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8019f4a:	f7f2 fce9 	bl	800c920 <osSemaphoreRelease>
			return true;
		}
 8019f4e:	2001      	movs	r0, #1
 8019f50:	bd38      	pop	{r3, r4, r5, pc}

08019f52 <_ZN7Sensors16SetReadingStatusEb>:
	interface->timeout = timeout;
	osSemaphoreRelease(SensorsSemaphore);
	return true;
}

bool Sensors::SetReadingStatus(bool status) {
 8019f52:	b538      	push	{r3, r4, r5, lr}
 8019f54:	4604      	mov	r4, r0
 8019f56:	460d      	mov	r5, r1
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8019f58:	f04f 31ff 	mov.w	r1, #4294967295
 8019f5c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8019f5e:	f7f2 fcab 	bl	800c8b8 <osSemaphoreAcquire>
	active = status;
 8019f62:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60

	// if stop the reading, reset all read indexes
	if (!status) {
 8019f66:	b9e5      	cbnz	r5, 8019fa2 <_ZN7Sensors16SetReadingStatusEb+0x50>
		for (I2CInterface &interface : interfaces) {
 8019f68:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
      : _M_current(__i) { }
 8019f6a:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8019f6c:	e010      	b.n	8019f90 <_ZN7Sensors16SetReadingStatusEb+0x3e>
			interface.read_index = 0;
			for (SensorGroup &sensor_group : interface.sensor_groups) {
				sensor_group.read_index = 0;
				for (Sensor &sensor : sensor_group.sensors) {
					sensor.read_index = 0;
 8019f6e:	2200      	movs	r2, #0
 8019f70:	741a      	strb	r2, [r3, #16]
	++_M_current;
 8019f72:	3328      	adds	r3, #40	; 0x28
				for (Sensor &sensor : sensor_group.sensors) {
 8019f74:	4299      	cmp	r1, r3
 8019f76:	d1fa      	bne.n	8019f6e <_ZN7Sensors16SetReadingStatusEb+0x1c>
 8019f78:	f10c 0218 	add.w	r2, ip, #24
    { return __lhs.base() != __rhs.base(); }
 8019f7c:	4694      	mov	ip, r2
			for (SensorGroup &sensor_group : interface.sensor_groups) {
 8019f7e:	4290      	cmp	r0, r2
 8019f80:	d004      	beq.n	8019f8c <_ZN7Sensors16SetReadingStatusEb+0x3a>
				sensor_group.read_index = 0;
 8019f82:	2300      	movs	r3, #0
 8019f84:	7213      	strb	r3, [r2, #8]
				for (Sensor &sensor : sensor_group.sensors) {
 8019f86:	68d3      	ldr	r3, [r2, #12]
      : _M_current(__i) { }
 8019f88:	6911      	ldr	r1, [r2, #16]
 8019f8a:	e7f3      	b.n	8019f74 <_ZN7Sensors16SetReadingStatusEb+0x22>
	++_M_current;
 8019f8c:	f10e 037c 	add.w	r3, lr, #124	; 0x7c
    { return __lhs.base() != __rhs.base(); }
 8019f90:	469e      	mov	lr, r3
		for (I2CInterface &interface : interfaces) {
 8019f92:	42ab      	cmp	r3, r5
 8019f94:	d005      	beq.n	8019fa2 <_ZN7Sensors16SetReadingStatusEb+0x50>
			interface.read_index = 0;
 8019f96:	2200      	movs	r2, #0
 8019f98:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			for (SensorGroup &sensor_group : interface.sensor_groups) {
 8019f9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
      : _M_current(__i) { }
 8019f9e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8019fa0:	e7ec      	b.n	8019f7c <_ZN7Sensors16SetReadingStatusEb+0x2a>
				}
			}
		}
	}

	osSemaphoreRelease(SensorsSemaphore);
 8019fa2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8019fa4:	f7f2 fcbc 	bl	800c920 <osSemaphoreRelease>
	return true;
}
 8019fa8:	2001      	movs	r0, #1
 8019faa:	bd38      	pop	{r3, r4, r5, pc}

08019fac <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8019fac:	b508      	push	{r3, lr}
			self->SetReadingStatus((bool) *input);
 8019fae:	7811      	ldrb	r1, [r2, #0]
 8019fb0:	3900      	subs	r1, #0
 8019fb2:	bf18      	it	ne
 8019fb4:	2101      	movne	r1, #1
 8019fb6:	f7ff ffcc 	bl	8019f52 <_ZN7Sensors16SetReadingStatusEb>
		}
 8019fba:	2001      	movs	r0, #1
 8019fbc:	bd08      	pop	{r3, pc}

08019fbe <_ZN7Sensors25DeactivateAllSensorGroupsEv>:

bool Sensors::DeactivateSensorGroup(uint8_t group_ID) {
	return SetSensorGroupStatus(group_ID, false);
}

bool Sensors::DeactivateAllSensorGroups(void) {
 8019fbe:	b510      	push	{r4, lr}
 8019fc0:	4604      	mov	r4, r0
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8019fc2:	f04f 31ff 	mov.w	r1, #4294967295
 8019fc6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8019fc8:	f7f2 fc76 	bl	800c8b8 <osSemaphoreAcquire>
	for (I2CInterface &interface : interfaces) {
 8019fcc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8019fce:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8019fd0:	e006      	b.n	8019fe0 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x22>
		for (SensorGroup &sensor_group : interface.sensor_groups) {
			sensor_group.active = false;
 8019fd2:	2200      	movs	r2, #0
 8019fd4:	705a      	strb	r2, [r3, #1]
	++_M_current;
 8019fd6:	3318      	adds	r3, #24
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 8019fd8:	4299      	cmp	r1, r3
 8019fda:	d1fa      	bne.n	8019fd2 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x14>
 8019fdc:	f10c 027c 	add.w	r2, ip, #124	; 0x7c
    { return __lhs.base() != __rhs.base(); }
 8019fe0:	4694      	mov	ip, r2
	for (I2CInterface &interface : interfaces) {
 8019fe2:	4282      	cmp	r2, r0
 8019fe4:	d002      	beq.n	8019fec <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x2e>
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 8019fe6:	6d93      	ldr	r3, [r2, #88]	; 0x58
      : _M_current(__i) { }
 8019fe8:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8019fea:	e7f5      	b.n	8019fd8 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x1a>
		}
	}
	osSemaphoreRelease(SensorsSemaphore);
 8019fec:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8019fee:	f7f2 fc97 	bl	800c920 <osSemaphoreRelease>
	return true;
}
 8019ff2:	2001      	movs	r0, #1
 8019ff4:	bd10      	pop	{r4, pc}

08019ff6 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8019ff6:	b508      	push	{r3, lr}
			return self->DeactivateAllSensorGroups();
 8019ff8:	f7ff ffe1 	bl	8019fbe <_ZN7Sensors25DeactivateAllSensorGroupsEv>
		}
 8019ffc:	bd08      	pop	{r3, pc}

08019ffe <_ZN7Sensors13DetectSensorsEmm>:
	sensor_data->sequence.push_back(I2C_access);
	osSemaphoreRelease(SensorsSemaphore);
	return true;
}

void Sensors::DetectSensors(uint32_t trials, uint32_t timeout) {
 8019ffe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a002:	b083      	sub	sp, #12
 801a004:	4604      	mov	r4, r0
 801a006:	9001      	str	r0, [sp, #4]
 801a008:	4688      	mov	r8, r1
 801a00a:	4617      	mov	r7, r2
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a00c:	f04f 31ff 	mov.w	r1, #4294967295
 801a010:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801a012:	f7f2 fc51 	bl	800c8b8 <osSemaphoreAcquire>
	HAL_StatusTypeDef status;
	for (I2CInterface &interface : interfaces) {
 801a016:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a018:	f8d4 b070 	ldr.w	fp, [r4, #112]	; 0x70
 801a01c:	e01e      	b.n	801a05c <_ZN7Sensors13DetectSensorsEmm+0x5e>
		for (SensorGroup &sensor_group : interface.sensor_groups) {
			for (Sensor &sensor : sensor_group.sensors) {
				if (interface.ID != INTERNAL) {
					status = HAL_I2C_IsDeviceReady(interface.interface, sensor.address, trials, timeout);
 801a01e:	463b      	mov	r3, r7
 801a020:	4642      	mov	r2, r8
 801a022:	88e1      	ldrh	r1, [r4, #6]
 801a024:	68e8      	ldr	r0, [r5, #12]
 801a026:	f7ec ff39 	bl	8006e9c <HAL_I2C_IsDeviceReady>
					sensor.present = (status == HAL_OK);
 801a02a:	fab0 f080 	clz	r0, r0
 801a02e:	0940      	lsrs	r0, r0, #5
 801a030:	70a0      	strb	r0, [r4, #2]
	++_M_current;
 801a032:	f104 0328 	add.w	r3, r4, #40	; 0x28
    { return __lhs.base() != __rhs.base(); }
 801a036:	461c      	mov	r4, r3
			for (Sensor &sensor : sensor_group.sensors) {
 801a038:	429e      	cmp	r6, r3
 801a03a:	d005      	beq.n	801a048 <_ZN7Sensors13DetectSensorsEmm+0x4a>
				if (interface.ID != INTERNAL) {
 801a03c:	782b      	ldrb	r3, [r5, #0]
 801a03e:	2b0a      	cmp	r3, #10
 801a040:	d1ed      	bne.n	801a01e <_ZN7Sensors13DetectSensorsEmm+0x20>
				} else
					sensor.present = true;
 801a042:	2301      	movs	r3, #1
 801a044:	70a3      	strb	r3, [r4, #2]
 801a046:	e7f4      	b.n	801a032 <_ZN7Sensors13DetectSensorsEmm+0x34>
	++_M_current;
 801a048:	f109 0218 	add.w	r2, r9, #24
    { return __lhs.base() != __rhs.base(); }
 801a04c:	4691      	mov	r9, r2
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 801a04e:	4592      	cmp	sl, r2
 801a050:	d002      	beq.n	801a058 <_ZN7Sensors13DetectSensorsEmm+0x5a>
			for (Sensor &sensor : sensor_group.sensors) {
 801a052:	68d3      	ldr	r3, [r2, #12]
      : _M_current(__i) { }
 801a054:	6916      	ldr	r6, [r2, #16]
 801a056:	e7ee      	b.n	801a036 <_ZN7Sensors13DetectSensorsEmm+0x38>
	++_M_current;
 801a058:	f105 037c 	add.w	r3, r5, #124	; 0x7c
    { return __lhs.base() != __rhs.base(); }
 801a05c:	461d      	mov	r5, r3
	for (I2CInterface &interface : interfaces) {
 801a05e:	455b      	cmp	r3, fp
 801a060:	d003      	beq.n	801a06a <_ZN7Sensors13DetectSensorsEmm+0x6c>
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 801a062:	6d9a      	ldr	r2, [r3, #88]	; 0x58
      : _M_current(__i) { }
 801a064:	f8d3 a05c 	ldr.w	sl, [r3, #92]	; 0x5c
 801a068:	e7f0      	b.n	801a04c <_ZN7Sensors13DetectSensorsEmm+0x4e>
			}
		}
	}
	osSemaphoreRelease(SensorsSemaphore);
 801a06a:	9b01      	ldr	r3, [sp, #4]
 801a06c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 801a06e:	f7f2 fc57 	bl	800c920 <osSemaphoreRelease>
}
 801a072:	b003      	add	sp, #12
 801a074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a078 <_ZZN7Sensors12AddRegistersEvENUlPvtPmtE8_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801a078:	2b02      	cmp	r3, #2
 801a07a:	d001      	beq.n	801a080 <_ZZN7Sensors12AddRegistersEvENUlPvtPmtE8_4_FUNES0_tS1_t+0x8>
 801a07c:	2000      	movs	r0, #0
		}
 801a07e:	4770      	bx	lr
		[](void* context, uint16_t register_id, uint32_t* input, uint16_t length) -> bool {
 801a080:	b508      	push	{r3, lr}
 801a082:	4611      	mov	r1, r2
			self->DetectSensors(input[0], input[1]);
 801a084:	6852      	ldr	r2, [r2, #4]
 801a086:	6809      	ldr	r1, [r1, #0]
 801a088:	f7ff ffb9 	bl	8019ffe <_ZN7Sensors13DetectSensorsEmm>
			return true;
 801a08c:	2001      	movs	r0, #1
		}
 801a08e:	bd08      	pop	{r3, pc}

0801a090 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>:
	}
	*success = false;
	return NULL;
}

SensorGroup* Sensors::FindSensorGroupPath(uint8_t group_ID, I2CInterface** interface_, bool* success) {
 801a090:	b4f0      	push	{r4, r5, r6, r7}
	for (I2CInterface &interface : interfaces) {
 801a092:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 801a094:	6f07      	ldr	r7, [r0, #112]	; 0x70
    { return __lhs.base() != __rhs.base(); }
 801a096:	462e      	mov	r6, r5
 801a098:	42bd      	cmp	r5, r7
 801a09a:	d013      	beq.n	801a0c4 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x34>
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 801a09c:	6dac      	ldr	r4, [r5, #88]	; 0x58
      : _M_current(__i) { }
 801a09e:	6ded      	ldr	r5, [r5, #92]	; 0x5c
 801a0a0:	e001      	b.n	801a0a6 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x16>
	++_M_current;
 801a0a2:	f100 0418 	add.w	r4, r0, #24
    { return __lhs.base() != __rhs.base(); }
 801a0a6:	4620      	mov	r0, r4
 801a0a8:	42a5      	cmp	r5, r4
 801a0aa:	d008      	beq.n	801a0be <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x2e>
			if (sensor_group.ID == group_ID) {
 801a0ac:	78a4      	ldrb	r4, [r4, #2]
 801a0ae:	428c      	cmp	r4, r1
 801a0b0:	d1f7      	bne.n	801a0a2 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x12>
				SensorGroup* sensor_group_pointer = &sensor_group;
				if (interface_ != NULL) *interface_ = &interface;
 801a0b2:	b102      	cbz	r2, 801a0b6 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x26>
 801a0b4:	6016      	str	r6, [r2, #0]
				*success = true;
 801a0b6:	2201      	movs	r2, #1
 801a0b8:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	*success = false;
	return NULL;
}
 801a0ba:	bcf0      	pop	{r4, r5, r6, r7}
 801a0bc:	4770      	bx	lr
	++_M_current;
 801a0be:	f106 057c 	add.w	r5, r6, #124	; 0x7c
	return *this;
 801a0c2:	e7e8      	b.n	801a096 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x6>
	*success = false;
 801a0c4:	2000      	movs	r0, #0
 801a0c6:	7018      	strb	r0, [r3, #0]
	return NULL;
 801a0c8:	e7f7      	b.n	801a0ba <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x2a>

0801a0ca <_ZN7Sensors15FindSensorGroupEhPb>:
SensorGroup* Sensors::FindSensorGroup(uint8_t group_ID, bool* success) {
 801a0ca:	b508      	push	{r3, lr}
 801a0cc:	4613      	mov	r3, r2
	return FindSensorGroupPath(group_ID, NULL, success);
 801a0ce:	2200      	movs	r2, #0
 801a0d0:	f7ff ffde 	bl	801a090 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>
}
 801a0d4:	bd08      	pop	{r3, pc}

0801a0d6 <_ZN7Sensors23SetSensorGroupPrescalerEht>:
bool Sensors::SetSensorGroupPrescaler(uint8_t group_ID, uint16_t prescaler) {
 801a0d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0d8:	b083      	sub	sp, #12
 801a0da:	4604      	mov	r4, r0
 801a0dc:	4616      	mov	r6, r2
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 801a0de:	f10d 0207 	add.w	r2, sp, #7
 801a0e2:	f7ff fff2 	bl	801a0ca <_ZN7Sensors15FindSensorGroupEhPb>
	if (!success) return false;
 801a0e6:	f89d 7007 	ldrb.w	r7, [sp, #7]
 801a0ea:	b917      	cbnz	r7, 801a0f2 <_ZN7Sensors23SetSensorGroupPrescalerEht+0x1c>
}
 801a0ec:	4638      	mov	r0, r7
 801a0ee:	b003      	add	sp, #12
 801a0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0f2:	4605      	mov	r5, r0
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a0f4:	f04f 31ff 	mov.w	r1, #4294967295
 801a0f8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 801a0fa:	f7f2 fbdd 	bl	800c8b8 <osSemaphoreAcquire>
	sensor_group->prescaler = prescaler;
 801a0fe:	80ae      	strh	r6, [r5, #4]
	osSemaphoreRelease(SensorsSemaphore);
 801a100:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 801a102:	f7f2 fc0d 	bl	800c920 <osSemaphoreRelease>
	return true;
 801a106:	e7f1      	b.n	801a0ec <_ZN7Sensors23SetSensorGroupPrescalerEht+0x16>

0801a108 <_ZZN7Sensors12AddRegistersEvENUlPvtPttE7_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801a108:	2b02      	cmp	r3, #2
 801a10a:	d001      	beq.n	801a110 <_ZZN7Sensors12AddRegistersEvENUlPvtPttE7_4_FUNES0_tS1_t+0x8>
 801a10c:	2000      	movs	r0, #0
		}
 801a10e:	4770      	bx	lr
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 801a110:	b508      	push	{r3, lr}
 801a112:	4611      	mov	r1, r2
			self->SetSensorGroupPrescaler((uint8_t) input[0], input[1]);
 801a114:	8852      	ldrh	r2, [r2, #2]
 801a116:	7809      	ldrb	r1, [r1, #0]
 801a118:	f7ff ffdd 	bl	801a0d6 <_ZN7Sensors23SetSensorGroupPrescalerEht>
			return true;
 801a11c:	2001      	movs	r0, #1
		}
 801a11e:	bd08      	pop	{r3, pc}

0801a120 <_ZN7Sensors20SetSensorGroupStatusEhb>:
bool Sensors::SetSensorGroupStatus(uint8_t group_ID, bool status) {
 801a120:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a122:	b083      	sub	sp, #12
 801a124:	4605      	mov	r5, r0
 801a126:	4616      	mov	r6, r2
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 801a128:	f10d 0207 	add.w	r2, sp, #7
 801a12c:	f7ff ffcd 	bl	801a0ca <_ZN7Sensors15FindSensorGroupEhPb>
	if (!success) return false;
 801a130:	f89d 7007 	ldrb.w	r7, [sp, #7]
 801a134:	b917      	cbnz	r7, 801a13c <_ZN7Sensors20SetSensorGroupStatusEhb+0x1c>
}
 801a136:	4638      	mov	r0, r7
 801a138:	b003      	add	sp, #12
 801a13a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a13c:	4604      	mov	r4, r0
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a13e:	f04f 31ff 	mov.w	r1, #4294967295
 801a142:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 801a144:	f7f2 fbb8 	bl	800c8b8 <osSemaphoreAcquire>
	sensor_group->active = status;
 801a148:	7066      	strb	r6, [r4, #1]
	if (!status) { // reset the read indexes if deactivate the group
 801a14a:	b94e      	cbnz	r6, 801a160 <_ZN7Sensors20SetSensorGroupStatusEhb+0x40>
		sensor_group->read_index = 0;
 801a14c:	2300      	movs	r3, #0
 801a14e:	7223      	strb	r3, [r4, #8]
		for (Sensor &sensor : sensor_group->sensors) {
 801a150:	68e3      	ldr	r3, [r4, #12]
      : _M_current(__i) { }
 801a152:	6921      	ldr	r1, [r4, #16]
 801a154:	e002      	b.n	801a15c <_ZN7Sensors20SetSensorGroupStatusEhb+0x3c>
			sensor.read_index = 0;
 801a156:	2200      	movs	r2, #0
 801a158:	741a      	strb	r2, [r3, #16]
	++_M_current;
 801a15a:	3328      	adds	r3, #40	; 0x28
		for (Sensor &sensor : sensor_group->sensors) {
 801a15c:	4299      	cmp	r1, r3
 801a15e:	d1fa      	bne.n	801a156 <_ZN7Sensors20SetSensorGroupStatusEhb+0x36>
	osSemaphoreRelease(SensorsSemaphore);
 801a160:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 801a162:	f7f2 fbdd 	bl	800c920 <osSemaphoreRelease>
	return true;
 801a166:	e7e6      	b.n	801a136 <_ZN7Sensors20SetSensorGroupStatusEhb+0x16>

0801a168 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801a168:	2b02      	cmp	r3, #2
 801a16a:	d001      	beq.n	801a170 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t+0x8>
 801a16c:	2000      	movs	r0, #0
		}
 801a16e:	4770      	bx	lr
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801a170:	b508      	push	{r3, lr}
 801a172:	4611      	mov	r1, r2
			self->SetSensorGroupStatus(input[0], (bool) input[1]);
 801a174:	7852      	ldrb	r2, [r2, #1]
 801a176:	3a00      	subs	r2, #0
 801a178:	bf18      	it	ne
 801a17a:	2201      	movne	r2, #1
 801a17c:	7809      	ldrb	r1, [r1, #0]
 801a17e:	f7ff ffcf 	bl	801a120 <_ZN7Sensors20SetSensorGroupStatusEhb>
			return true;
 801a182:	2001      	movs	r0, #1
		}
 801a184:	bd08      	pop	{r3, pc}

0801a186 <_ZN7Sensors20DeactivateAllSensorsEh>:
bool Sensors::DeactivateAllSensors(uint8_t group_ID) {
 801a186:	b570      	push	{r4, r5, r6, lr}
 801a188:	b082      	sub	sp, #8
 801a18a:	4604      	mov	r4, r0
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 801a18c:	f10d 0307 	add.w	r3, sp, #7
 801a190:	466a      	mov	r2, sp
 801a192:	f7ff ff7d 	bl	801a090 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>
	if (!success) return false;
 801a196:	f89d 6007 	ldrb.w	r6, [sp, #7]
 801a19a:	b916      	cbnz	r6, 801a1a2 <_ZN7Sensors20DeactivateAllSensorsEh+0x1c>
}
 801a19c:	4630      	mov	r0, r6
 801a19e:	b002      	add	sp, #8
 801a1a0:	bd70      	pop	{r4, r5, r6, pc}
 801a1a2:	4605      	mov	r5, r0
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a1a4:	f04f 31ff 	mov.w	r1, #4294967295
 801a1a8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 801a1aa:	f7f2 fb85 	bl	800c8b8 <osSemaphoreAcquire>
	for (Sensor &sensor : sensor_group->sensors) {
 801a1ae:	68eb      	ldr	r3, [r5, #12]
      : _M_current(__i) { }
 801a1b0:	6929      	ldr	r1, [r5, #16]
 801a1b2:	e002      	b.n	801a1ba <_ZN7Sensors20DeactivateAllSensorsEh+0x34>
		sensor.active = false;
 801a1b4:	2200      	movs	r2, #0
 801a1b6:	705a      	strb	r2, [r3, #1]
	++_M_current;
 801a1b8:	3328      	adds	r3, #40	; 0x28
	for (Sensor &sensor : sensor_group->sensors) {
 801a1ba:	4299      	cmp	r1, r3
 801a1bc:	d1fa      	bne.n	801a1b4 <_ZN7Sensors20DeactivateAllSensorsEh+0x2e>
	osSemaphoreRelease(SensorsSemaphore);
 801a1be:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 801a1c0:	f7f2 fbae 	bl	800c920 <osSemaphoreRelease>
	return true;
 801a1c4:	e7ea      	b.n	801a19c <_ZN7Sensors20DeactivateAllSensorsEh+0x16>

0801a1c6 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801a1c6:	b508      	push	{r3, lr}
			return self->DeactivateAllSensors(*input);
 801a1c8:	7811      	ldrb	r1, [r2, #0]
 801a1ca:	f7ff ffdc 	bl	801a186 <_ZN7Sensors20DeactivateAllSensorsEh>
		}
 801a1ce:	bd08      	pop	{r3, pc}

0801a1d0 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb>:

Sensor* Sensors::FindSensorPath(uint8_t sensor_ID, I2CInterface** interface_, SensorGroup** sensor_group_, bool* success) {
 801a1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (I2CInterface &interface : interfaces) {
 801a1d2:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
      : _M_current(__i) { }
 801a1d4:	f8d0 c070 	ldr.w	ip, [r0, #112]	; 0x70
    { return __lhs.base() != __rhs.base(); }
 801a1d8:	46a6      	mov	lr, r4
 801a1da:	4564      	cmp	r4, ip
 801a1dc:	d01e      	beq.n	801a21c <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x4c>
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 801a1de:	6da0      	ldr	r0, [r4, #88]	; 0x58
      : _M_current(__i) { }
 801a1e0:	6de7      	ldr	r7, [r4, #92]	; 0x5c
    { return __lhs.base() != __rhs.base(); }
 801a1e2:	4606      	mov	r6, r0
 801a1e4:	4287      	cmp	r7, r0
 801a1e6:	d016      	beq.n	801a216 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x46>
			for (Sensor &sensor : sensor_group.sensors) {
 801a1e8:	68c4      	ldr	r4, [r0, #12]
      : _M_current(__i) { }
 801a1ea:	6905      	ldr	r5, [r0, #16]
    { return __lhs.base() != __rhs.base(); }
 801a1ec:	4620      	mov	r0, r4
 801a1ee:	42a5      	cmp	r5, r4
 801a1f0:	d00e      	beq.n	801a210 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x40>
				if (sensor.ID == sensor_ID) {
 801a1f2:	7924      	ldrb	r4, [r4, #4]
 801a1f4:	428c      	cmp	r4, r1
 801a1f6:	d002      	beq.n	801a1fe <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x2e>
	++_M_current;
 801a1f8:	f100 0428 	add.w	r4, r0, #40	; 0x28
	return *this;
 801a1fc:	e7f6      	b.n	801a1ec <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x1c>
					Sensor* sensor_pointer = &sensor;
					if (interface_ != NULL) *interface_ = &interface;
 801a1fe:	b10a      	cbz	r2, 801a204 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x34>
 801a200:	f8c2 e000 	str.w	lr, [r2]
					if (sensor_group_ != NULL) *sensor_group_ = &sensor_group;
 801a204:	b103      	cbz	r3, 801a208 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x38>
 801a206:	601e      	str	r6, [r3, #0]
					*success = true;
 801a208:	2301      	movs	r3, #1
 801a20a:	9a05      	ldr	r2, [sp, #20]
 801a20c:	7013      	strb	r3, [r2, #0]
			}
		}
	}
	*success = false;
	return NULL;
}
 801a20e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	++_M_current;
 801a210:	f106 0018 	add.w	r0, r6, #24
	return *this;
 801a214:	e7e5      	b.n	801a1e2 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x12>
	++_M_current;
 801a216:	f10e 047c 	add.w	r4, lr, #124	; 0x7c
	return *this;
 801a21a:	e7dd      	b.n	801a1d8 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x8>
	*success = false;
 801a21c:	2000      	movs	r0, #0
 801a21e:	9b05      	ldr	r3, [sp, #20]
 801a220:	7018      	strb	r0, [r3, #0]
	return NULL;
 801a222:	e7f4      	b.n	801a20e <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x3e>

0801a224 <_ZN7Sensors10FindSensorEhPb>:
Sensor* Sensors::FindSensor(uint8_t sensor_ID, bool* success) {
 801a224:	b500      	push	{lr}
 801a226:	b083      	sub	sp, #12
	return FindSensorPath(sensor_ID, NULL, NULL, success);
 801a228:	9200      	str	r2, [sp, #0]
 801a22a:	2300      	movs	r3, #0
 801a22c:	461a      	mov	r2, r3
 801a22e:	f7ff ffcf 	bl	801a1d0 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb>
}
 801a232:	b003      	add	sp, #12
 801a234:	f85d fb04 	ldr.w	pc, [sp], #4

0801a238 <_ZN7Sensors15SetSensorStatusEhb>:
bool Sensors::SetSensorStatus(uint8_t sensor_ID, bool status) {
 801a238:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a23a:	b083      	sub	sp, #12
 801a23c:	4604      	mov	r4, r0
 801a23e:	4616      	mov	r6, r2
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801a240:	f10d 0207 	add.w	r2, sp, #7
 801a244:	f7ff ffee 	bl	801a224 <_ZN7Sensors10FindSensorEhPb>
	if (!success) return false;
 801a248:	f89d 7007 	ldrb.w	r7, [sp, #7]
 801a24c:	b917      	cbnz	r7, 801a254 <_ZN7Sensors15SetSensorStatusEhb+0x1c>
}
 801a24e:	4638      	mov	r0, r7
 801a250:	b003      	add	sp, #12
 801a252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a254:	4605      	mov	r5, r0
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a256:	f04f 31ff 	mov.w	r1, #4294967295
 801a25a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 801a25c:	f7f2 fb2c 	bl	800c8b8 <osSemaphoreAcquire>
	sensor->active = status;
 801a260:	706e      	strb	r6, [r5, #1]
	osSemaphoreRelease(SensorsSemaphore);
 801a262:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 801a264:	f7f2 fb5c 	bl	800c920 <osSemaphoreRelease>
	return true;
 801a268:	e7f1      	b.n	801a24e <_ZN7Sensors15SetSensorStatusEhb+0x16>

0801a26a <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801a26a:	2b02      	cmp	r3, #2
 801a26c:	d001      	beq.n	801a272 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x8>
 801a26e:	2000      	movs	r0, #0
		}
 801a270:	4770      	bx	lr
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801a272:	b508      	push	{r3, lr}
 801a274:	4611      	mov	r1, r2
			self->SetSensorStatus(input[0], (bool) input[1]);
 801a276:	7852      	ldrb	r2, [r2, #1]
 801a278:	3a00      	subs	r2, #0
 801a27a:	bf18      	it	ne
 801a27c:	2201      	movne	r2, #1
 801a27e:	7809      	ldrb	r1, [r1, #0]
 801a280:	f7ff ffda 	bl	801a238 <_ZN7Sensors15SetSensorStatusEhb>
			return true;
 801a284:	2001      	movs	r0, #1
		}
 801a286:	bd08      	pop	{r3, pc}

0801a288 <_ZN7Sensors23DeactivateAllSensorDataEh>:
bool Sensors::DeactivateAllSensorData(uint8_t sensor_ID) {
 801a288:	b570      	push	{r4, r5, r6, lr}
 801a28a:	b082      	sub	sp, #8
 801a28c:	4604      	mov	r4, r0
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801a28e:	f10d 0207 	add.w	r2, sp, #7
 801a292:	f7ff ffc7 	bl	801a224 <_ZN7Sensors10FindSensorEhPb>
	if (!success) return false;
 801a296:	f89d 6007 	ldrb.w	r6, [sp, #7]
 801a29a:	b916      	cbnz	r6, 801a2a2 <_ZN7Sensors23DeactivateAllSensorDataEh+0x1a>
}
 801a29c:	4630      	mov	r0, r6
 801a29e:	b002      	add	sp, #8
 801a2a0:	bd70      	pop	{r4, r5, r6, pc}
 801a2a2:	4605      	mov	r5, r0
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a2a4:	f04f 31ff 	mov.w	r1, #4294967295
 801a2a8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 801a2aa:	f7f2 fb05 	bl	800c8b8 <osSemaphoreAcquire>
	for (SensorData &data : sensor->data) {
 801a2ae:	696b      	ldr	r3, [r5, #20]
      : _M_current(__i) { }
 801a2b0:	69a9      	ldr	r1, [r5, #24]
 801a2b2:	e002      	b.n	801a2ba <_ZN7Sensors23DeactivateAllSensorDataEh+0x32>
		data.active = false;
 801a2b4:	2200      	movs	r2, #0
 801a2b6:	f803 2b18 	strb.w	r2, [r3], #24
	for (SensorData &data : sensor->data) {
 801a2ba:	4299      	cmp	r1, r3
 801a2bc:	d1fa      	bne.n	801a2b4 <_ZN7Sensors23DeactivateAllSensorDataEh+0x2c>
	osSemaphoreRelease(SensorsSemaphore);
 801a2be:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 801a2c0:	f7f2 fb2e 	bl	800c920 <osSemaphoreRelease>
	return true;
 801a2c4:	e7ea      	b.n	801a29c <_ZN7Sensors23DeactivateAllSensorDataEh+0x14>

0801a2c6 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801a2c6:	b508      	push	{r3, lr}
			return self->DeactivateAllSensorData(*input);
 801a2c8:	7811      	ldrb	r1, [r2, #0]
 801a2ca:	f7ff ffdd 	bl	801a288 <_ZN7Sensors23DeactivateAllSensorDataEh>
		}
 801a2ce:	bd08      	pop	{r3, pc}

0801a2d0 <_ZN7Sensors14FindSensorDataEhtPb>:
SensorData* Sensors::FindSensorData(uint8_t sensor_ID, uint16_t sensor_register, bool* success) {
 801a2d0:	b538      	push	{r3, r4, r5, lr}
 801a2d2:	4614      	mov	r4, r2
 801a2d4:	461d      	mov	r5, r3
	Sensor* sensor = FindSensor(sensor_ID, success);
 801a2d6:	461a      	mov	r2, r3
 801a2d8:	f7ff ffa4 	bl	801a224 <_ZN7Sensors10FindSensorEhPb>
	if (not *success) return NULL;
 801a2dc:	782b      	ldrb	r3, [r5, #0]
 801a2de:	b183      	cbz	r3, 801a302 <_ZN7Sensors14FindSensorDataEhtPb+0x32>
	for (SensorData &data : sensor->data) {
 801a2e0:	6941      	ldr	r1, [r0, #20]
 801a2e2:	6982      	ldr	r2, [r0, #24]
    { return __lhs.base() != __rhs.base(); }
 801a2e4:	4608      	mov	r0, r1
 801a2e6:	428a      	cmp	r2, r1
 801a2e8:	d008      	beq.n	801a2fc <_ZN7Sensors14FindSensorDataEhtPb+0x2c>
		if (data.register_address == sensor_register) {
 801a2ea:	8889      	ldrh	r1, [r1, #4]
 801a2ec:	42a1      	cmp	r1, r4
 801a2ee:	d002      	beq.n	801a2f6 <_ZN7Sensors14FindSensorDataEhtPb+0x26>
	++_M_current;
 801a2f0:	f100 0118 	add.w	r1, r0, #24
	return *this;
 801a2f4:	e7f6      	b.n	801a2e4 <_ZN7Sensors14FindSensorDataEhtPb+0x14>
			*success = true;
 801a2f6:	2301      	movs	r3, #1
 801a2f8:	702b      	strb	r3, [r5, #0]
			return data_pointer;
 801a2fa:	e001      	b.n	801a300 <_ZN7Sensors14FindSensorDataEhtPb+0x30>
	*success = false;
 801a2fc:	2000      	movs	r0, #0
 801a2fe:	7028      	strb	r0, [r5, #0]
}
 801a300:	bd38      	pop	{r3, r4, r5, pc}
	if (not *success) return NULL;
 801a302:	2000      	movs	r0, #0
 801a304:	e7fc      	b.n	801a300 <_ZN7Sensors14FindSensorDataEhtPb+0x30>

0801a306 <_ZN7Sensors19SetSensorDataStatusEhtb>:
bool Sensors::SetSensorDataStatus(uint8_t sensor_ID, uint16_t sensor_register, bool status) {
 801a306:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a308:	b083      	sub	sp, #12
 801a30a:	4604      	mov	r4, r0
 801a30c:	461e      	mov	r6, r3
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 801a30e:	f10d 0307 	add.w	r3, sp, #7
 801a312:	f7ff ffdd 	bl	801a2d0 <_ZN7Sensors14FindSensorDataEhtPb>
	if (!success) return false;
 801a316:	f89d 7007 	ldrb.w	r7, [sp, #7]
 801a31a:	b917      	cbnz	r7, 801a322 <_ZN7Sensors19SetSensorDataStatusEhtb+0x1c>
}
 801a31c:	4638      	mov	r0, r7
 801a31e:	b003      	add	sp, #12
 801a320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a322:	4605      	mov	r5, r0
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a324:	f04f 31ff 	mov.w	r1, #4294967295
 801a328:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 801a32a:	f7f2 fac5 	bl	800c8b8 <osSemaphoreAcquire>
	sensor_data->active = status;
 801a32e:	702e      	strb	r6, [r5, #0]
	osSemaphoreRelease(SensorsSemaphore);
 801a330:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 801a332:	f7f2 faf5 	bl	800c920 <osSemaphoreRelease>
	return true;
 801a336:	e7f1      	b.n	801a31c <_ZN7Sensors19SetSensorDataStatusEhtb+0x16>

0801a338 <_ZZN7Sensors12AddRegistersEvENUlPvtPttE5_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 801a338:	2b03      	cmp	r3, #3
 801a33a:	d001      	beq.n	801a340 <_ZZN7Sensors12AddRegistersEvENUlPvtPttE5_4_FUNES0_tS1_t+0x8>
 801a33c:	2000      	movs	r0, #0
		}
 801a33e:	4770      	bx	lr
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 801a340:	b508      	push	{r3, lr}
 801a342:	4611      	mov	r1, r2
			self->SetSensorDataStatus((uint8_t) input[0], input[1], (bool) input[2]);
 801a344:	8893      	ldrh	r3, [r2, #4]
 801a346:	3b00      	subs	r3, #0
 801a348:	bf18      	it	ne
 801a34a:	2301      	movne	r3, #1
 801a34c:	8852      	ldrh	r2, [r2, #2]
 801a34e:	7809      	ldrb	r1, [r1, #0]
 801a350:	f7ff ffd9 	bl	801a306 <_ZN7Sensors19SetSensorDataStatusEhtb>
			return true;
 801a354:	2001      	movs	r0, #1
		}
 801a356:	bd08      	pop	{r3, pc}

0801a358 <_ZN7Sensors16GetADCResolutionEP17ADC_HandleTypeDef>:
	HAL_ADC_Stop(ADC5V);
	return voltage;
}

uint8_t Sensors::GetADCResolution(ADC_HandleTypeDef* ADC) {
	uint32_t resolution_configuration = ADC->Instance->CFGR & ADC_CFGR_RES_Msk;
 801a358:	680b      	ldr	r3, [r1, #0]
 801a35a:	68db      	ldr	r3, [r3, #12]
 801a35c:	f003 031c 	and.w	r3, r3, #28
	if (resolution_configuration == LL_ADC_RESOLUTION_8B) 		return 8;
 801a360:	2b10      	cmp	r3, #16
 801a362:	d00c      	beq.n	801a37e <_ZN7Sensors16GetADCResolutionEP17ADC_HandleTypeDef+0x26>
	if (resolution_configuration == LL_ADC_RESOLUTION_10B) 		return 10;
 801a364:	2b0c      	cmp	r3, #12
 801a366:	d00c      	beq.n	801a382 <_ZN7Sensors16GetADCResolutionEP17ADC_HandleTypeDef+0x2a>
	if (resolution_configuration == LL_ADC_RESOLUTION_12B) 		return 12;
 801a368:	2b08      	cmp	r3, #8
 801a36a:	d00c      	beq.n	801a386 <_ZN7Sensors16GetADCResolutionEP17ADC_HandleTypeDef+0x2e>
	if (resolution_configuration == LL_ADC_RESOLUTION_12B_OPT) 	return 12;
 801a36c:	2b18      	cmp	r3, #24
 801a36e:	d00c      	beq.n	801a38a <_ZN7Sensors16GetADCResolutionEP17ADC_HandleTypeDef+0x32>
	if (resolution_configuration == LL_ADC_RESOLUTION_14B) 		return 14;
 801a370:	2b04      	cmp	r3, #4
 801a372:	d00c      	beq.n	801a38e <_ZN7Sensors16GetADCResolutionEP17ADC_HandleTypeDef+0x36>
	if (resolution_configuration == LL_ADC_RESOLUTION_14B_OPT) 	return 14;
 801a374:	2b14      	cmp	r3, #20
 801a376:	d00c      	beq.n	801a392 <_ZN7Sensors16GetADCResolutionEP17ADC_HandleTypeDef+0x3a>
	if (resolution_configuration == LL_ADC_RESOLUTION_16B) 		return 16;
 801a378:	b16b      	cbz	r3, 801a396 <_ZN7Sensors16GetADCResolutionEP17ADC_HandleTypeDef+0x3e>
	return 0;
 801a37a:	2000      	movs	r0, #0
 801a37c:	4770      	bx	lr
	if (resolution_configuration == LL_ADC_RESOLUTION_8B) 		return 8;
 801a37e:	2008      	movs	r0, #8
 801a380:	4770      	bx	lr
	if (resolution_configuration == LL_ADC_RESOLUTION_10B) 		return 10;
 801a382:	200a      	movs	r0, #10
 801a384:	4770      	bx	lr
	if (resolution_configuration == LL_ADC_RESOLUTION_12B) 		return 12;
 801a386:	200c      	movs	r0, #12
 801a388:	4770      	bx	lr
	if (resolution_configuration == LL_ADC_RESOLUTION_12B_OPT) 	return 12;
 801a38a:	200c      	movs	r0, #12
 801a38c:	4770      	bx	lr
	if (resolution_configuration == LL_ADC_RESOLUTION_14B) 		return 14;
 801a38e:	200e      	movs	r0, #14
 801a390:	4770      	bx	lr
	if (resolution_configuration == LL_ADC_RESOLUTION_14B_OPT) 	return 14;
 801a392:	200e      	movs	r0, #14
 801a394:	4770      	bx	lr
	if (resolution_configuration == LL_ADC_RESOLUTION_16B) 		return 16;
 801a396:	2010      	movs	r0, #16
}
 801a398:	4770      	bx	lr
	...

0801a39c <_ZN7Sensors4InitEP9RegistersP10PublishersP13HardwareDelayP4LEDSP17ADC_HandleTypeDefS9_>:
void Sensors::Init(Registers* registers_, Publishers* publishers_, HardwareDelay* hardware_delay_, LEDS* leds_, ADC_HandleTypeDef* ADC3_3V_, ADC_HandleTypeDef* ADC5V_) {
 801a39c:	b510      	push	{r4, lr}
 801a39e:	4604      	mov	r4, r0
	registers = registers_;
 801a3a0:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
	publishers = publishers_;
 801a3a4:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
	hardware_delay = hardware_delay_;
 801a3a8:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	leds = leds_;
 801a3ac:	9b02      	ldr	r3, [sp, #8]
 801a3ae:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
	ADC3_3V = ADC3_3V_;
 801a3b2:	9b03      	ldr	r3, [sp, #12]
 801a3b4:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
	ADC5V = ADC5V_;
 801a3b8:	9b04      	ldr	r3, [sp, #16]
 801a3ba:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
	SensorsSemaphore = osSemaphoreNew(1, 1, NULL);
 801a3be:	2200      	movs	r2, #0
 801a3c0:	2101      	movs	r1, #1
 801a3c2:	4608      	mov	r0, r1
 801a3c4:	f7f2 fa1c 	bl	800c800 <osSemaphoreNew>
 801a3c8:	65e0      	str	r0, [r4, #92]	; 0x5c
	osSemaphoreRelease(SensorsSemaphore);
 801a3ca:	f7f2 faa9 	bl	800c920 <osSemaphoreRelease>
	active = false;
 801a3ce:	2300      	movs	r3, #0
 801a3d0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	delay_flag = false;
 801a3d4:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	delayed_index = 0;
 801a3d8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	period_ms = DEFAULT_SENSORS_PERIOD;
 801a3dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a3e0:	6663      	str	r3, [r4, #100]	; 0x64
	voltage_low_threshold = 7.0f;
 801a3e2:	4b1d      	ldr	r3, [pc, #116]	; (801a458 <_ZN7Sensors4InitEP9RegistersP10PublishersP13HardwareDelayP4LEDSP17ADC_HandleTypeDefS9_+0xbc>)
 801a3e4:	62a3      	str	r3, [r4, #40]	; 0x28
	Vref_int = (float) VREFINT_CAL_VREF / 1000.0f;
 801a3e6:	4b1d      	ldr	r3, [pc, #116]	; (801a45c <_ZN7Sensors4InitEP9RegistersP10PublishersP13HardwareDelayP4LEDSP17ADC_HandleTypeDefS9_+0xc0>)
 801a3e8:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	voltage3_3V_resolution = GetADCResolution(ADC3_3V);
 801a3ec:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 801a3f0:	4620      	mov	r0, r4
 801a3f2:	f7ff ffb1 	bl	801a358 <_ZN7Sensors16GetADCResolutionEP17ADC_HandleTypeDef>
 801a3f6:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
	voltage5V_resolution = GetADCResolution(ADC5V);
 801a3fa:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
 801a3fe:	4620      	mov	r0, r4
 801a400:	f7ff ffaa 	bl	801a358 <_ZN7Sensors16GetADCResolutionEP17ADC_HandleTypeDef>
 801a404:	f884 00d5 	strb.w	r0, [r4, #213]	; 0xd5
	voltage3_3V_conversion_ratio = Vref_int * (*VREFINT_CAL >> (16 - voltage3_3V_resolution));
 801a408:	ed94 7a34 	vldr	s14, [r4, #208]	; 0xd0
 801a40c:	4b14      	ldr	r3, [pc, #80]	; (801a460 <_ZN7Sensors4InitEP9RegistersP10PublishersP13HardwareDelayP4LEDSP17ADC_HandleTypeDefS9_+0xc4>)
 801a40e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a412:	f894 20d4 	ldrb.w	r2, [r4, #212]	; 0xd4
 801a416:	f1c2 0210 	rsb	r2, r2, #16
 801a41a:	4113      	asrs	r3, r2
 801a41c:	ee07 3a90 	vmov	s15, r3
 801a420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a424:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a428:	edc4 7a36 	vstr	s15, [r4, #216]	; 0xd8
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 801a42c:	ee07 0a90 	vmov	s15, r0
 801a430:	eeb8 1b67 	vcvt.f64.u32	d1, s15
 801a434:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 801a438:	f000 ff52 	bl	801b2e0 <pow>
	voltage5V_conversion_ratio = DIVISION_STAGE_5V / (pow(2, voltage5V_resolution) - 1);
 801a43c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801a440:	ee30 0b47 	vsub.f64	d0, d0, d7
 801a444:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 801a448:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801a44c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 801a450:	ed84 7a37 	vstr	s14, [r4, #220]	; 0xdc
}
 801a454:	bd10      	pop	{r4, pc}
 801a456:	bf00      	nop
 801a458:	40e00000 	.word	0x40e00000
 801a45c:	40533333 	.word	0x40533333
 801a460:	1ff1e800 	.word	0x1ff1e800

0801a464 <_ZNSt6vectorIfSaIfEE7reserveEj>:
    vector<_Tp, _Alloc>::
 801a464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__n > this->max_size())
 801a466:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 801a46a:	d223      	bcs.n	801a4b4 <_ZNSt6vectorIfSaIfEE7reserveEj+0x50>
 801a46c:	4604      	mov	r4, r0
 801a46e:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_end_of_storage
 801a470:	6883      	ldr	r3, [r0, #8]
			 - this->_M_impl._M_start); }
 801a472:	6802      	ldr	r2, [r0, #0]
 801a474:	1a9b      	subs	r3, r3, r2
      if (this->capacity() < __n)
 801a476:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 801a47a:	d91a      	bls.n	801a4b2 <_ZNSt6vectorIfSaIfEE7reserveEj+0x4e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a47c:	6847      	ldr	r7, [r0, #4]
 801a47e:	1abf      	subs	r7, r7, r2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801a480:	b1e9      	cbz	r1, 801a4be <_ZNSt6vectorIfSaIfEE7reserveEj+0x5a>
	if (__n > this->_M_max_size())
 801a482:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 801a486:	d218      	bcs.n	801a4ba <_ZNSt6vectorIfSaIfEE7reserveEj+0x56>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801a488:	0088      	lsls	r0, r1, #2
 801a48a:	f000 fd81 	bl	801af90 <_Znwj>
 801a48e:	4606      	mov	r6, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 801a490:	6821      	ldr	r1, [r4, #0]
 801a492:	6862      	ldr	r2, [r4, #4]
      ptrdiff_t __count = __last - __first;
 801a494:	1a52      	subs	r2, r2, r1
      if (__count > 0)
 801a496:	2a00      	cmp	r2, #0
 801a498:	dc13      	bgt.n	801a4c2 <_ZNSt6vectorIfSaIfEE7reserveEj+0x5e>
	  _M_deallocate(this->_M_impl._M_start,
 801a49a:	6820      	ldr	r0, [r4, #0]
			this->_M_impl._M_end_of_storage
 801a49c:	68a1      	ldr	r1, [r4, #8]
			- this->_M_impl._M_start);
 801a49e:	1a09      	subs	r1, r1, r0
	if (__p)
 801a4a0:	b108      	cbz	r0, 801a4a6 <_ZNSt6vectorIfSaIfEE7reserveEj+0x42>
	::operator delete(__p
 801a4a2:	f000 fd5f 	bl	801af64 <_ZdlPvj>
	  this->_M_impl._M_start = __tmp;
 801a4a6:	6026      	str	r6, [r4, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 801a4a8:	4437      	add	r7, r6
 801a4aa:	6067      	str	r7, [r4, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801a4ac:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 801a4b0:	60a5      	str	r5, [r4, #8]
    }
 801a4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__throw_length_error(__N("vector::reserve"));
 801a4b4:	4805      	ldr	r0, [pc, #20]	; (801a4cc <_ZNSt6vectorIfSaIfEE7reserveEj+0x68>)
 801a4b6:	f000 fe1f 	bl	801b0f8 <_ZSt20__throw_length_errorPKc>
	  std::__throw_bad_alloc();
 801a4ba:	f000 fe17 	bl	801b0ec <_ZSt17__throw_bad_allocv>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801a4be:	2600      	movs	r6, #0
 801a4c0:	e7e6      	b.n	801a490 <_ZNSt6vectorIfSaIfEE7reserveEj+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801a4c2:	4630      	mov	r0, r6
 801a4c4:	f001 fa22 	bl	801b90c <memmove>
 801a4c8:	e7e7      	b.n	801a49a <_ZNSt6vectorIfSaIfEE7reserveEj+0x36>
 801a4ca:	bf00      	nop
 801a4cc:	0801c064 	.word	0x0801c064

0801a4d0 <_ZN7SensorsC1Ev>:
Sensors::Sensors() {
 801a4d0:	b570      	push	{r4, r5, r6, lr}
 801a4d2:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 801a4d4:	2500      	movs	r5, #0
 801a4d6:	66c5      	str	r5, [r0, #108]	; 0x6c
 801a4d8:	6705      	str	r5, [r0, #112]	; 0x70
 801a4da:	6745      	str	r5, [r0, #116]	; 0x74
 801a4dc:	6785      	str	r5, [r0, #120]	; 0x78
 801a4de:	67c5      	str	r5, [r0, #124]	; 0x7c
 801a4e0:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
 801a4e4:	f100 06ac 	add.w	r6, r0, #172	; 0xac
 801a4e8:	f8c0 50ac 	str.w	r5, [r0, #172]	; 0xac
 801a4ec:	f8c0 50b0 	str.w	r5, [r0, #176]	; 0xb0
 801a4f0:	f8c0 50b4 	str.w	r5, [r0, #180]	; 0xb4
	sensor_data_float.reserve(SENSOR_MAX_REGISTER_NB_PER_TYPE);
 801a4f4:	2114      	movs	r1, #20
 801a4f6:	3078      	adds	r0, #120	; 0x78
 801a4f8:	f7ff ffb4 	bl	801a464 <_ZNSt6vectorIfSaIfEE7reserveEj>
	functions[UINT8_TYPE] = NULL;
 801a4fc:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
	functions[UINT16_TYPE] = NULL;
 801a500:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
	functions[UINT32_TYPE] = NULL;
 801a504:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
	functions[UINT64_TYPE] = NULL;
 801a508:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
	functions[INT8_TYPE] = NULL;
 801a50c:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	functions[INT16_TYPE] = NULL;
 801a510:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	functions[INT32_TYPE] = NULL;
 801a514:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
	functions[INT64_TYPE] = NULL;
 801a518:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	functions[FLOAT_TYPE] = NULL;
 801a51c:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	functions[DOUBLE_TYPE] = NULL;
 801a520:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
	functions[FLOAT_TYPE] = &float_sensor_functions;
 801a524:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
}
 801a528:	4620      	mov	r0, r4
 801a52a:	bd70      	pop	{r4, r5, r6, pc}

0801a52c <_ZN9Registers16AddWriteCallbackImEEbtPvPFbS1_tPT_tE>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801a52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a530:	b086      	sub	sp, #24
 801a532:	4604      	mov	r4, r0
 801a534:	460d      	mov	r5, r1
 801a536:	4690      	mov	r8, r2
 801a538:	461f      	mov	r7, r3
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801a53a:	f04f 31ff 	mov.w	r1, #4294967295
 801a53e:	6800      	ldr	r0, [r0, #0]
 801a540:	f7f2 f9ba 	bl	800c8b8 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801a544:	f10d 0217 	add.w	r2, sp, #23
 801a548:	4629      	mov	r1, r5
 801a54a:	4620      	mov	r0, r4
 801a54c:	f7ff fb9f 	bl	8019c8e <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801a550:	f89d 6017 	ldrb.w	r6, [sp, #23]
 801a554:	b36e      	cbz	r6, 801a5b2 <_ZN9Registers16AddWriteCallbackImEEbtPvPFbS1_tPT_tE+0x86>
 801a556:	4605      	mov	r5, r0
	uint8_t registered_type = GetTypeID<T>(&success);
 801a558:	f10d 0117 	add.w	r1, sp, #23
 801a55c:	4620      	mov	r0, r4
 801a55e:	f7f5 faef 	bl	800fb40 <_ZN9Registers9GetTypeIDImEEhPb>
	if (!success) {
 801a562:	f89d 6017 	ldrb.w	r6, [sp, #23]
 801a566:	b35e      	cbz	r6, 801a5c0 <_ZN9Registers16AddWriteCallbackImEEbtPvPFbS1_tPT_tE+0x94>
	if (target_register->register_info.type != registered_type) {
 801a568:	792b      	ldrb	r3, [r5, #4]
 801a56a:	4283      	cmp	r3, r0
 801a56c:	d12c      	bne.n	801a5c8 <_ZN9Registers16AddWriteCallbackImEEbtPvPFbS1_tPT_tE+0x9c>
	if (callbacks[target_register->register_info.type] == NULL) {// check supported type
 801a56e:	3304      	adds	r3, #4
 801a570:	f854 c023 	ldr.w	ip, [r4, r3, lsl #2]
 801a574:	f1bc 0f00 	cmp.w	ip, #0
 801a578:	d02b      	beq.n	801a5d2 <_ZN9Registers16AddWriteCallbackImEEbtPvPFbS1_tPT_tE+0xa6>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801a57a:	782b      	ldrb	r3, [r5, #0]
 801a57c:	b90b      	cbnz	r3, 801a582 <_ZN9Registers16AddWriteCallbackImEEbtPvPFbS1_tPT_tE+0x56>
 801a57e:	786b      	ldrb	r3, [r5, #1]
 801a580:	b363      	cbz	r3, 801a5dc <_ZN9Registers16AddWriteCallbackImEEbtPvPFbS1_tPT_tE+0xb0>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801a582:	8968      	ldrh	r0, [r5, #10]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a584:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801a588:	f8dc 2000 	ldr.w	r2, [ip]
 801a58c:	1a9b      	subs	r3, r3, r2
 801a58e:	111a      	asrs	r2, r3, #4
	if (__n >= this->size())
 801a590:	ebb0 1f23 	cmp.w	r0, r3, asr #4
 801a594:	d243      	bcs.n	801a61e <_ZN9Registers16AddWriteCallbackImEEbtPvPFbS1_tPT_tE+0xf2>
	return *(this->_M_impl._M_start + __n);
 801a596:	f8dc 1000 	ldr.w	r1, [ip]
 801a59a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
		callback->context = context;
 801a59e:	f8c1 8004 	str.w	r8, [r1, #4]
		callback->write = write;
 801a5a2:	608f      	str	r7, [r1, #8]
	target_register->mode.callbacks = true; // = (uint8_t) CALLBACK_MODE;
 801a5a4:	2301      	movs	r3, #1
 801a5a6:	706b      	strb	r3, [r5, #1]
	target_register->access.write = true;
 801a5a8:	722b      	strb	r3, [r5, #8]
	osSemaphoreRelease(RegistersSemaphore);
 801a5aa:	6820      	ldr	r0, [r4, #0]
 801a5ac:	f7f2 f9b8 	bl	800c920 <osSemaphoreRelease>
	return true;
 801a5b0:	e002      	b.n	801a5b8 <_ZN9Registers16AddWriteCallbackImEEbtPvPFbS1_tPT_tE+0x8c>
		osSemaphoreRelease(RegistersSemaphore);
 801a5b2:	6820      	ldr	r0, [r4, #0]
 801a5b4:	f7f2 f9b4 	bl	800c920 <osSemaphoreRelease>
}
 801a5b8:	4630      	mov	r0, r6
 801a5ba:	b006      	add	sp, #24
 801a5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		osSemaphoreRelease(RegistersSemaphore);
 801a5c0:	6820      	ldr	r0, [r4, #0]
 801a5c2:	f7f2 f9ad 	bl	800c920 <osSemaphoreRelease>
		return false;
 801a5c6:	e7f7      	b.n	801a5b8 <_ZN9Registers16AddWriteCallbackImEEbtPvPFbS1_tPT_tE+0x8c>
		osSemaphoreRelease(RegistersSemaphore);
 801a5c8:	6820      	ldr	r0, [r4, #0]
 801a5ca:	f7f2 f9a9 	bl	800c920 <osSemaphoreRelease>
		return false;
 801a5ce:	2600      	movs	r6, #0
 801a5d0:	e7f2      	b.n	801a5b8 <_ZN9Registers16AddWriteCallbackImEEbtPvPFbS1_tPT_tE+0x8c>
		osSemaphoreRelease(RegistersSemaphore);
 801a5d2:	6820      	ldr	r0, [r4, #0]
 801a5d4:	f7f2 f9a4 	bl	800c920 <osSemaphoreRelease>
		return false;
 801a5d8:	2600      	movs	r6, #0
 801a5da:	e7ed      	b.n	801a5b8 <_ZN9Registers16AddWriteCallbackImEEbtPvPFbS1_tPT_tE+0x8c>
		callback.context = context;
 801a5dc:	f8cd 8008 	str.w	r8, [sp, #8]
		callback.write = write;
 801a5e0:	9703      	str	r7, [sp, #12]
		callback.read = NULL;
 801a5e2:	9304      	str	r3, [sp, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a5e4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801a5e8:	f8dc 2000 	ldr.w	r2, [ip]
 801a5ec:	1a9b      	subs	r3, r3, r2
 801a5ee:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801a5f0:	816b      	strh	r3, [r5, #10]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801a5f2:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801a5f6:	f8dc 3008 	ldr.w	r3, [ip, #8]
 801a5fa:	429f      	cmp	r7, r3
 801a5fc:	d009      	beq.n	801a612 <_ZN9Registers16AddWriteCallbackImEEbtPvPFbS1_tPT_tE+0xe6>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801a5fe:	ab01      	add	r3, sp, #4
 801a600:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a602:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801a606:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801a60a:	3310      	adds	r3, #16
 801a60c:	f8cc 3004 	str.w	r3, [ip, #4]
 801a610:	e7c8      	b.n	801a5a4 <_ZN9Registers16AddWriteCallbackImEEbtPvPFbS1_tPT_tE+0x78>
	  _M_realloc_insert(end(), __x);
 801a612:	aa01      	add	r2, sp, #4
 801a614:	4639      	mov	r1, r7
 801a616:	4660      	mov	r0, ip
 801a618:	f7fd f846 	bl	80176a8 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
		target_callback_list->push_back(callback);
 801a61c:	e7c2      	b.n	801a5a4 <_ZN9Registers16AddWriteCallbackImEEbtPvPFbS1_tPT_tE+0x78>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801a61e:	4601      	mov	r1, r0
 801a620:	4801      	ldr	r0, [pc, #4]	; (801a628 <_ZN9Registers16AddWriteCallbackImEEbtPvPFbS1_tPT_tE+0xfc>)
 801a622:	f000 fd6c 	bl	801b0fe <_ZSt24__throw_out_of_range_fmtPKcz>
 801a626:	bf00      	nop
 801a628:	0801bffc 	.word	0x0801bffc

0801a62c <_ZN7Sensors12AddRegistersEv>:
void Sensors::AddRegisters(void) {
 801a62c:	b510      	push	{r4, lr}
 801a62e:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_SENSORS_READING_STATUS);
 801a630:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a634:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 801a638:	f7f4 fc9a 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_SENSORS_READING_STATUS);
 801a63c:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a640:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a644:	f7ff fb63 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddReadCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
 801a648:	4b5a      	ldr	r3, [pc, #360]	; (801a7b4 <_ZN7Sensors12AddRegistersEv+0x188>)
 801a64a:	4622      	mov	r2, r4
 801a64c:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a650:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a654:	f7fc ffa8 	bl	80175a8 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
 801a658:	4b57      	ldr	r3, [pc, #348]	; (801a7b8 <_ZN7Sensors12AddRegistersEv+0x18c>)
 801a65a:	4622      	mov	r2, r4
 801a65c:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a660:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a664:	f7f4 fd5a 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_SENSORS_GROUP_STATUS);
 801a668:	f240 2101 	movw	r1, #513	; 0x201
 801a66c:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a670:	f7f4 fc7e 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsArray(REG_SENSORS_GROUP_STATUS, 2);
 801a674:	2202      	movs	r2, #2
 801a676:	f240 2101 	movw	r1, #513	; 0x201
 801a67a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a67e:	f7ff fb66 	bl	8019d4e <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_GROUP_STATUS, (void*) this,
 801a682:	4b4e      	ldr	r3, [pc, #312]	; (801a7bc <_ZN7Sensors12AddRegistersEv+0x190>)
 801a684:	4622      	mov	r2, r4
 801a686:	f240 2101 	movw	r1, #513	; 0x201
 801a68a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a68e:	f7f4 fd45 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_GROUPS);
 801a692:	f240 2102 	movw	r1, #514	; 0x202
 801a696:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a69a:	f7f4 fc69 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_GROUPS);
 801a69e:	f240 2102 	movw	r1, #514	; 0x202
 801a6a2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a6a6:	f7ff fb32 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_GROUPS, (void*) this,
 801a6aa:	4b45      	ldr	r3, [pc, #276]	; (801a7c0 <_ZN7Sensors12AddRegistersEv+0x194>)
 801a6ac:	4622      	mov	r2, r4
 801a6ae:	f240 2102 	movw	r1, #514	; 0x202
 801a6b2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a6b6:	f7f4 fd31 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_SENSORS_SENSOR_STATUS);
 801a6ba:	f240 2103 	movw	r1, #515	; 0x203
 801a6be:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a6c2:	f7f4 fc55 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsArray(REG_SENSORS_SENSOR_STATUS, 2);
 801a6c6:	2202      	movs	r2, #2
 801a6c8:	f240 2103 	movw	r1, #515	; 0x203
 801a6cc:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a6d0:	f7ff fb3d 	bl	8019d4e <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_SENSOR_STATUS, (void*) this,
 801a6d4:	4b3b      	ldr	r3, [pc, #236]	; (801a7c4 <_ZN7Sensors12AddRegistersEv+0x198>)
 801a6d6:	4622      	mov	r2, r4
 801a6d8:	f240 2103 	movw	r1, #515	; 0x203
 801a6dc:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a6e0:	f7f4 fd1c 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_SENSORS);
 801a6e4:	f44f 7101 	mov.w	r1, #516	; 0x204
 801a6e8:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a6ec:	f7f4 fc40 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_SENSORS);
 801a6f0:	f44f 7101 	mov.w	r1, #516	; 0x204
 801a6f4:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a6f8:	f7ff fb09 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_SENSORS, (void*) this,
 801a6fc:	4b32      	ldr	r3, [pc, #200]	; (801a7c8 <_ZN7Sensors12AddRegistersEv+0x19c>)
 801a6fe:	4622      	mov	r2, r4
 801a700:	f44f 7101 	mov.w	r1, #516	; 0x204
 801a704:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a708:	f7f4 fd08 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint16_t>(REG_SENSORS_DATA_STATUS);
 801a70c:	f240 2105 	movw	r1, #517	; 0x205
 801a710:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a714:	f7ff f82c 	bl	8019770 <_ZN9Registers11AddRegisterItEEbt>
	registers->SetRegisterAsArray(REG_SENSORS_DATA_STATUS, 3);
 801a718:	2203      	movs	r2, #3
 801a71a:	f240 2105 	movw	r1, #517	; 0x205
 801a71e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a722:	f7ff fb14 	bl	8019d4e <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_SENSORS_DATA_STATUS, (void*) this,
 801a726:	4b29      	ldr	r3, [pc, #164]	; (801a7cc <_ZN7Sensors12AddRegistersEv+0x1a0>)
 801a728:	4622      	mov	r2, r4
 801a72a:	f240 2105 	movw	r1, #517	; 0x205
 801a72e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a732:	f7ff f8f3 	bl	801991c <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_ALL_DATA);
 801a736:	f240 2106 	movw	r1, #518	; 0x206
 801a73a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a73e:	f7f4 fc17 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_ALL_DATA);
 801a742:	f240 2106 	movw	r1, #518	; 0x206
 801a746:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a74a:	f7ff fae0 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_ALL_DATA, (void*) this,
 801a74e:	4b20      	ldr	r3, [pc, #128]	; (801a7d0 <_ZN7Sensors12AddRegistersEv+0x1a4>)
 801a750:	4622      	mov	r2, r4
 801a752:	f240 2106 	movw	r1, #518	; 0x206
 801a756:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a75a:	f7f4 fcdf 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint16_t>(REG_SENSORS_GROUP_PRESCALER);
 801a75e:	f240 2107 	movw	r1, #519	; 0x207
 801a762:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a766:	f7ff f803 	bl	8019770 <_ZN9Registers11AddRegisterItEEbt>
	registers->SetRegisterAsArray(REG_SENSORS_GROUP_PRESCALER, 2);
 801a76a:	2202      	movs	r2, #2
 801a76c:	f240 2107 	movw	r1, #519	; 0x207
 801a770:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a774:	f7ff faeb 	bl	8019d4e <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_SENSORS_GROUP_PRESCALER, (void*) this,
 801a778:	4b16      	ldr	r3, [pc, #88]	; (801a7d4 <_ZN7Sensors12AddRegistersEv+0x1a8>)
 801a77a:	4622      	mov	r2, r4
 801a77c:	f240 2107 	movw	r1, #519	; 0x207
 801a780:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a784:	f7ff f8ca 	bl	801991c <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint32_t>(REG_SENSORS_DETECT_SENSORS);
 801a788:	f44f 7102 	mov.w	r1, #520	; 0x208
 801a78c:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a790:	f7fc fea2 	bl	80174d8 <_ZN9Registers11AddRegisterImEEbt>
	registers->SetRegisterAsArray(REG_SENSORS_DETECT_SENSORS, 2);
 801a794:	2202      	movs	r2, #2
 801a796:	f44f 7102 	mov.w	r1, #520	; 0x208
 801a79a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a79e:	f7ff fad6 	bl	8019d4e <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint32_t>(REG_SENSORS_DETECT_SENSORS, (void*) this,
 801a7a2:	4b0d      	ldr	r3, [pc, #52]	; (801a7d8 <_ZN7Sensors12AddRegistersEv+0x1ac>)
 801a7a4:	4622      	mov	r2, r4
 801a7a6:	f44f 7102 	mov.w	r1, #520	; 0x208
 801a7aa:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801a7ae:	f7ff febd 	bl	801a52c <_ZN9Registers16AddWriteCallbackImEEbtPvPFbS1_tPT_tE>
}
 801a7b2:	bd10      	pop	{r4, pc}
 801a7b4:	08019f31 	.word	0x08019f31
 801a7b8:	08019fad 	.word	0x08019fad
 801a7bc:	0801a169 	.word	0x0801a169
 801a7c0:	08019ff7 	.word	0x08019ff7
 801a7c4:	0801a26b 	.word	0x0801a26b
 801a7c8:	0801a1c7 	.word	0x0801a1c7
 801a7cc:	0801a339 	.word	0x0801a339
 801a7d0:	0801a2c7 	.word	0x0801a2c7
 801a7d4:	0801a109 	.word	0x0801a109
 801a7d8:	0801a079 	.word	0x0801a079

0801a7dc <_ZN8Services4InitEP9RegistersP13CommunicationP4LEDS>:

Services::Services() {
	ResetQueue();
}

void Services::Init(Registers* registers_, Communication* communication_, LEDS* leds_) {
 801a7dc:	b510      	push	{r4, lr}
 801a7de:	4604      	mov	r4, r0
	registers = registers_;
 801a7e0:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 801a7e4:	f8c0 1238 	str.w	r1, [r0, #568]	; 0x238
	communication = communication_;
 801a7e8:	f8c0 223c 	str.w	r2, [r0, #572]	; 0x23c
	leds = leds_;
 801a7ec:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240

	ServiceSemaphore = osSemaphoreNew(1,1,NULL);
 801a7f0:	2200      	movs	r2, #0
 801a7f2:	2101      	movs	r1, #1
 801a7f4:	4608      	mov	r0, r1
 801a7f6:	f7f2 f803 	bl	800c800 <osSemaphoreNew>
 801a7fa:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(ServiceSemaphore);
 801a7fc:	f7f2 f890 	bl	800c920 <osSemaphoreRelease>
}
 801a800:	bd10      	pop	{r4, pc}

0801a802 <_ZN8Services10ResetQueueEv>:

void Services::ResetQueue(void) {
 801a802:	b538      	push	{r3, r4, r5, lr}
 801a804:	4605      	mov	r5, r0
	queue_size = 0;
 801a806:	2400      	movs	r4, #0
 801a808:	7104      	strb	r4, [r0, #4]
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801a80a:	f04f 31ff 	mov.w	r1, #4294967295
 801a80e:	6800      	ldr	r0, [r0, #0]
 801a810:	f7f2 f852 	bl	800c8b8 <osSemaphoreAcquire>
	for (uint8_t index = 0; index < NUMBER_OF_SERVICES; index++) {
 801a814:	4623      	mov	r3, r4
 801a816:	e00d      	b.n	801a834 <_ZN8Services10ResetQueueEv+0x32>
		services[index].active = false;
 801a818:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801a81c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801a820:	2100      	movs	r1, #0
 801a822:	7211      	strb	r1, [r2, #8]
		services[index].reception_flag = false;
 801a824:	7251      	strb	r1, [r2, #9]
		services[index].error = false;
 801a826:	3301      	adds	r3, #1
 801a828:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801a82c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801a830:	7111      	strb	r1, [r2, #4]
	for (uint8_t index = 0; index < NUMBER_OF_SERVICES; index++) {
 801a832:	b2db      	uxtb	r3, r3
 801a834:	2b01      	cmp	r3, #1
 801a836:	d9ef      	bls.n	801a818 <_ZN8Services10ResetQueueEv+0x16>
	}
	osSemaphoreRelease(ServiceSemaphore);
 801a838:	6828      	ldr	r0, [r5, #0]
 801a83a:	f7f2 f871 	bl	800c920 <osSemaphoreRelease>
}
 801a83e:	bd38      	pop	{r3, r4, r5, pc}

0801a840 <_ZN8ServicesC1Ev>:
Services::Services() {
 801a840:	b510      	push	{r4, lr}
 801a842:	4604      	mov	r4, r0
	ResetQueue();
 801a844:	f7ff ffdd 	bl	801a802 <_ZN8Services10ResetQueueEv>
}
 801a848:	4620      	mov	r0, r4
 801a84a:	bd10      	pop	{r4, pc}

0801a84c <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>:

uint8_t Services::FindQueueIndex(uint8_t start_index, Register remote_register, ServiceInterface interface, bool access, bool* success) {
 801a84c:	b570      	push	{r4, r5, r6, lr}
 801a84e:	b086      	sub	sp, #24
 801a850:	4605      	mov	r5, r0
 801a852:	460c      	mov	r4, r1
 801a854:	4669      	mov	r1, sp
 801a856:	e881 000c 	stmia.w	r1, {r2, r3}
 801a85a:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801a85e:	f04f 31ff 	mov.w	r1, #4294967295
 801a862:	6800      	ldr	r0, [r0, #0]
 801a864:	f7f2 f828 	bl	800c8b8 <osSemaphoreAcquire>
	for (uint8_t index = start_index; index < NUMBER_OF_SERVICES; index++) {
 801a868:	e008      	b.n	801a87c <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x30>
			ServiceInterface registered_interface =services[index].configuration.interface;

			if (remote_register.address == registered_register.address) { // check register address
				if (interface.interface == registered_interface.interface) { // check interface
					if (interface.address == registered_interface.address || registered_interface.address == ALL || interface.address == ALL) {  // check module address
						if (access == services[index].configuration.access) { // check access type
 801a86a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a86e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801a872:	7d13      	ldrb	r3, [r2, #20]
 801a874:	42b3      	cmp	r3, r6
 801a876:	d02f      	beq.n	801a8d8 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x8c>
	for (uint8_t index = start_index; index < NUMBER_OF_SERVICES; index++) {
 801a878:	3401      	adds	r4, #1
 801a87a:	b2e4      	uxtb	r4, r4
 801a87c:	2c01      	cmp	r4, #1
 801a87e:	d833      	bhi.n	801a8e8 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x9c>
		if (services[index].active) {
 801a880:	4622      	mov	r2, r4
 801a882:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801a886:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 801a88a:	7a1b      	ldrb	r3, [r3, #8]
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	d0f3      	beq.n	801a878 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x2c>
			Register registered_register = services[index].configuration.register_;
 801a890:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801a894:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 801a898:	f8d3 000a 	ldr.w	r0, [r3, #10]
 801a89c:	9004      	str	r0, [sp, #16]
 801a89e:	89d9      	ldrh	r1, [r3, #14]
 801a8a0:	f8ad 1014 	strh.w	r1, [sp, #20]
			ServiceInterface registered_interface =services[index].configuration.interface;
 801a8a4:	8a5b      	ldrh	r3, [r3, #18]
 801a8a6:	f8ad 300c 	strh.w	r3, [sp, #12]
			if (remote_register.address == registered_register.address) { // check register address
 801a8aa:	f8bd 1000 	ldrh.w	r1, [sp]
 801a8ae:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a8b2:	4299      	cmp	r1, r3
 801a8b4:	d1e0      	bne.n	801a878 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x2c>
				if (interface.interface == registered_interface.interface) { // check interface
 801a8b6:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 801a8ba:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801a8be:	4299      	cmp	r1, r3
 801a8c0:	d1da      	bne.n	801a878 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x2c>
					if (interface.address == registered_interface.address || registered_interface.address == ALL || interface.address == ALL) {  // check module address
 801a8c2:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
 801a8c6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801a8ca:	4299      	cmp	r1, r3
 801a8cc:	d0cd      	beq.n	801a86a <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x1e>
 801a8ce:	2bff      	cmp	r3, #255	; 0xff
 801a8d0:	d0cb      	beq.n	801a86a <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x1e>
 801a8d2:	29ff      	cmp	r1, #255	; 0xff
 801a8d4:	d1d0      	bne.n	801a878 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x2c>
 801a8d6:	e7c8      	b.n	801a86a <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x1e>
							osSemaphoreRelease(ServiceSemaphore);
 801a8d8:	6828      	ldr	r0, [r5, #0]
 801a8da:	f7f2 f821 	bl	800c920 <osSemaphoreRelease>
							*success = true;
 801a8de:	2301      	movs	r3, #1
 801a8e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a8e2:	7013      	strb	r3, [r2, #0]
							return index;
 801a8e4:	4620      	mov	r0, r4
 801a8e6:	e005      	b.n	801a8f4 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0xa8>
					}
				}
			}
		}
	}
	osSemaphoreRelease(ServiceSemaphore);
 801a8e8:	6828      	ldr	r0, [r5, #0]
 801a8ea:	f7f2 f819 	bl	800c920 <osSemaphoreRelease>
	*success = false;
 801a8ee:	2000      	movs	r0, #0
 801a8f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a8f2:	7018      	strb	r0, [r3, #0]
	return 0;
}
 801a8f4:	b006      	add	sp, #24
 801a8f6:	bd70      	pop	{r4, r5, r6, pc}

0801a8f8 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>:
	services[index].reception_flag = false;
	osSemaphoreRelease(ServiceSemaphore);
	return true;
}

void Services::ReceiveWrite(ServiceConfiguration information, uint8_t status) {//Register remote_register, uint8_t interface, uint8_t address, uint8_t status) {
 801a8f8:	b570      	push	{r4, r5, r6, lr}
 801a8fa:	b08a      	sub	sp, #40	; 0x28
 801a8fc:	4605      	mov	r5, r0
 801a8fe:	a805      	add	r0, sp, #20
 801a900:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801a904:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
	bool success = true;
 801a908:	2301      	movs	r3, #1
 801a90a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	uint8_t start_index = 0;
 801a90e:	2100      	movs	r1, #0
 801a910:	e013      	b.n	801a93a <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x42>
	while (success) {
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);//uint8_t index = FindQueueIndex(remote_register, ServiceInterface{.interface=interface, .address=address}, access, &success);
		if (not success) return;

		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801a912:	f04f 31ff 	mov.w	r1, #4294967295
 801a916:	6828      	ldr	r0, [r5, #0]
 801a918:	f7f1 ffce 	bl	800c8b8 <osSemaphoreAcquire>
		buffer_uint8[index][0] = status;
 801a91c:	eb05 2304 	add.w	r3, r5, r4, lsl #8
 801a920:	f883 6038 	strb.w	r6, [r3, #56]	; 0x38
		services[index].reception_flag = true;
 801a924:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801a928:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 801a92c:	2201      	movs	r2, #1
 801a92e:	725a      	strb	r2, [r3, #9]
		osSemaphoreRelease(ServiceSemaphore);
 801a930:	6828      	ldr	r0, [r5, #0]
 801a932:	f7f1 fff5 	bl	800c920 <osSemaphoreRelease>

		start_index = index + 1;
 801a936:	1c61      	adds	r1, r4, #1
 801a938:	b2c9      	uxtb	r1, r1
	while (success) {
 801a93a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 801a93e:	b19b      	cbz	r3, 801a968 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x70>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);//uint8_t index = FindQueueIndex(remote_register, ServiceInterface{.interface=interface, .address=address}, access, &success);
 801a940:	f10d 0327 	add.w	r3, sp, #39	; 0x27
 801a944:	9302      	str	r3, [sp, #8]
 801a946:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801a94a:	9301      	str	r3, [sp, #4]
 801a94c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801a950:	f8ad 3000 	strh.w	r3, [sp]
 801a954:	ab05      	add	r3, sp, #20
 801a956:	cb0c      	ldmia	r3, {r2, r3}
 801a958:	4628      	mov	r0, r5
 801a95a:	f7ff ff77 	bl	801a84c <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
 801a95e:	4604      	mov	r4, r0
		if (not success) return;
 801a960:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 801a964:	2b00      	cmp	r3, #0
 801a966:	d1d4      	bne.n	801a912 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x1a>
	}
}
 801a968:	b00a      	add	sp, #40	; 0x28
 801a96a:	bd70      	pop	{r4, r5, r6, pc}

0801a96c <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>:

void Services::ReceiveError(ServiceConfiguration information, uint8_t error) {//Register remote_register, uint8_t interface, uint8_t address, bool access, uint8_t error) {
 801a96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a96e:	b08b      	sub	sp, #44	; 0x2c
 801a970:	4605      	mov	r5, r0
 801a972:	a805      	add	r0, sp, #20
 801a974:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801a978:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
	bool success = true;
 801a97c:	2301      	movs	r3, #1
 801a97e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	uint8_t start_index = 0;
 801a982:	2100      	movs	r1, #0
 801a984:	e018      	b.n	801a9b8 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x4c>
	while (success) {
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);//uint8_t index = FindQueueIndex(remote_register, ServiceInterface{.interface=interface, .address=address}, access, &success);
		if (not success) return;

		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801a986:	f04f 31ff 	mov.w	r1, #4294967295
 801a98a:	6828      	ldr	r0, [r5, #0]
 801a98c:	f7f1 ff94 	bl	800c8b8 <osSemaphoreAcquire>
		buffer_uint8[index][0] = error;
 801a990:	eb05 2304 	add.w	r3, r5, r4, lsl #8
 801a994:	f883 7038 	strb.w	r7, [r3, #56]	; 0x38
		services[index].error = true;
 801a998:	1c66      	adds	r6, r4, #1
 801a99a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 801a99e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 801a9a2:	2201      	movs	r2, #1
 801a9a4:	711a      	strb	r2, [r3, #4]
		services[index].reception_flag = true;
 801a9a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a9aa:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 801a9ae:	7262      	strb	r2, [r4, #9]
		osSemaphoreRelease(ServiceSemaphore);
 801a9b0:	6828      	ldr	r0, [r5, #0]
 801a9b2:	f7f1 ffb5 	bl	800c920 <osSemaphoreRelease>

		start_index = index + 1;
 801a9b6:	b2f1      	uxtb	r1, r6
	while (success) {
 801a9b8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 801a9bc:	b19b      	cbz	r3, 801a9e6 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x7a>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);//uint8_t index = FindQueueIndex(remote_register, ServiceInterface{.interface=interface, .address=address}, access, &success);
 801a9be:	f10d 0327 	add.w	r3, sp, #39	; 0x27
 801a9c2:	9302      	str	r3, [sp, #8]
 801a9c4:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801a9c8:	9301      	str	r3, [sp, #4]
 801a9ca:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801a9ce:	f8ad 3000 	strh.w	r3, [sp]
 801a9d2:	ab05      	add	r3, sp, #20
 801a9d4:	cb0c      	ldmia	r3, {r2, r3}
 801a9d6:	4628      	mov	r0, r5
 801a9d8:	f7ff ff38 	bl	801a84c <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
 801a9dc:	4604      	mov	r4, r0
		if (not success) return;
 801a9de:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d1cf      	bne.n	801a986 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x1a>
	}
}
 801a9e6:	b00b      	add	sp, #44	; 0x2c
 801a9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a9ea <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb>:

Register Services::FindRemoteRegister(Register remote_register, ServiceInterface interface, bool access, bool* success) {
 801a9ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a9ec:	b089      	sub	sp, #36	; 0x24
 801a9ee:	4604      	mov	r4, r0
 801a9f0:	460e      	mov	r6, r1
 801a9f2:	ad04      	add	r5, sp, #16
 801a9f4:	e885 000c 	stmia.w	r5, {r2, r3}
 801a9f8:	9f10      	ldr	r7, [sp, #64]	; 0x40
	uint8_t index;
	index = FindQueueIndex(0, remote_register, interface, access, success);
 801a9fa:	9702      	str	r7, [sp, #8]
 801a9fc:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 801aa00:	9301      	str	r3, [sp, #4]
 801aa02:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801aa06:	f8ad 3000 	strh.w	r3, [sp]
 801aa0a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801aa0e:	2100      	movs	r1, #0
 801aa10:	4630      	mov	r0, r6
 801aa12:	f7ff ff1b 	bl	801a84c <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
	if (*success) {
 801aa16:	783b      	ldrb	r3, [r7, #0]
 801aa18:	b933      	cbnz	r3, 801aa28 <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb+0x3e>
		osSemaphoreRelease(ServiceSemaphore);

		return found_register;
	}

	*success = false;
 801aa1a:	2300      	movs	r3, #0
 801aa1c:	703b      	strb	r3, [r7, #0]
	return Register();
 801aa1e:	6023      	str	r3, [r4, #0]
 801aa20:	80a3      	strh	r3, [r4, #4]
}
 801aa22:	4620      	mov	r0, r4
 801aa24:	b009      	add	sp, #36	; 0x24
 801aa26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa28:	4605      	mov	r5, r0
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801aa2a:	f04f 31ff 	mov.w	r1, #4294967295
 801aa2e:	6830      	ldr	r0, [r6, #0]
 801aa30:	f7f1 ff42 	bl	800c8b8 <osSemaphoreAcquire>
		Register found_register = services[index].configuration.register_;
 801aa34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801aa38:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801aa3c:	f8d5 000a 	ldr.w	r0, [r5, #10]
 801aa40:	9006      	str	r0, [sp, #24]
 801aa42:	89eb      	ldrh	r3, [r5, #14]
 801aa44:	f8ad 301c 	strh.w	r3, [sp, #28]
		osSemaphoreRelease(ServiceSemaphore);
 801aa48:	6830      	ldr	r0, [r6, #0]
 801aa4a:	f7f1 ff69 	bl	800c920 <osSemaphoreRelease>
		return found_register;
 801aa4e:	9806      	ldr	r0, [sp, #24]
 801aa50:	6020      	str	r0, [r4, #0]
 801aa52:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801aa56:	80a3      	strh	r3, [r4, #4]
 801aa58:	e7e3      	b.n	801aa22 <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb+0x38>

0801aa5a <_ZN17MasterSubscribersC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 801aa5a:	2200      	movs	r2, #0
 801aa5c:	60c2      	str	r2, [r0, #12]
 801aa5e:	6102      	str	r2, [r0, #16]
 801aa60:	6142      	str	r2, [r0, #20]
 801aa62:	6182      	str	r2, [r0, #24]
 801aa64:	61c2      	str	r2, [r0, #28]
 801aa66:	6202      	str	r2, [r0, #32]
 */

#include <Subscribers/MasterSubscribers.hpp>

MasterSubscribers::MasterSubscribers() {
}
 801aa68:	4770      	bx	lr

0801aa6a <_ZN17MasterSubscribers4InitEP9RegistersP4LEDS>:

void MasterSubscribers::Init(Registers* registers_, LEDS* leds_) {
 801aa6a:	b510      	push	{r4, lr}
 801aa6c:	4604      	mov	r4, r0
	registers = registers_;
 801aa6e:	6001      	str	r1, [r0, #0]
	leds = leds_;
 801aa70:	6042      	str	r2, [r0, #4]

	SubscribersSemaphore = osSemaphoreNew(1,1,NULL);
 801aa72:	2200      	movs	r2, #0
 801aa74:	2101      	movs	r1, #1
 801aa76:	4608      	mov	r0, r1
 801aa78:	f7f1 fec2 	bl	800c800 <osSemaphoreNew>
 801aa7c:	60a0      	str	r0, [r4, #8]
	osSemaphoreRelease(SubscribersSemaphore);
 801aa7e:	f7f1 ff4f 	bl	800c920 <osSemaphoreRelease>
}
 801aa82:	bd10      	pop	{r4, pc}

0801aa84 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>:
	}
	osSemaphoreRelease(SubscribersSemaphore);
	return false;
}

uint8_t MasterSubscribers::FindSubscriberIndex(uint8_t ID, bool* success) {
 801aa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa86:	4605      	mov	r5, r0
 801aa88:	460e      	mov	r6, r1
 801aa8a:	4617      	mov	r7, r2
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801aa8c:	f04f 31ff 	mov.w	r1, #4294967295
 801aa90:	6880      	ldr	r0, [r0, #8]
 801aa92:	f7f1 ff11 	bl	800c8b8 <osSemaphoreAcquire>
	for (uint8_t index = 0; index < configurations.size(); index++) {
 801aa96:	2400      	movs	r4, #0
 801aa98:	e001      	b.n	801aa9e <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x1a>
 801aa9a:	3401      	adds	r4, #1
 801aa9c:	b2e4      	uxtb	r4, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801aa9e:	692b      	ldr	r3, [r5, #16]
 801aaa0:	68ea      	ldr	r2, [r5, #12]
 801aaa2:	1a9b      	subs	r3, r3, r2
 801aaa4:	10db      	asrs	r3, r3, #3
 801aaa6:	490c      	ldr	r1, [pc, #48]	; (801aad8 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x54>)
 801aaa8:	fb01 f303 	mul.w	r3, r1, r3
 801aaac:	429c      	cmp	r4, r3
 801aaae:	d20b      	bcs.n	801aac8 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x44>
	return *(this->_M_impl._M_start + __n);
 801aab0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
		if (configurations[index].ID == ID) {
 801aab4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 801aab8:	42b3      	cmp	r3, r6
 801aaba:	d1ee      	bne.n	801aa9a <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x16>
			osSemaphoreRelease(SubscribersSemaphore);
 801aabc:	68a8      	ldr	r0, [r5, #8]
 801aabe:	f7f1 ff2f 	bl	800c920 <osSemaphoreRelease>
			*success = true;
 801aac2:	2301      	movs	r3, #1
 801aac4:	703b      	strb	r3, [r7, #0]
			return index;
 801aac6:	e004      	b.n	801aad2 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x4e>
		}
	}
	osSemaphoreRelease(SubscribersSemaphore);
 801aac8:	68a8      	ldr	r0, [r5, #8]
 801aaca:	f7f1 ff29 	bl	800c920 <osSemaphoreRelease>
	*success = false;
 801aace:	2400      	movs	r4, #0
 801aad0:	703c      	strb	r4, [r7, #0]
	return 0;
}
 801aad2:	4620      	mov	r0, r4
 801aad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aad6:	bf00      	nop
 801aad8:	cccccccd 	.word	0xcccccccd

0801aadc <_ZN17MasterSubscribers19SetSubscriberStatusEhb>:
bool MasterSubscribers::SetSubscriberStatus(uint8_t ID, bool status) {
 801aadc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aade:	b083      	sub	sp, #12
 801aae0:	4605      	mov	r5, r0
 801aae2:	4616      	mov	r6, r2
	uint8_t index = FindSubscriberIndex(ID, &success);
 801aae4:	f10d 0207 	add.w	r2, sp, #7
 801aae8:	f7ff ffcc 	bl	801aa84 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 801aaec:	f89d 7007 	ldrb.w	r7, [sp, #7]
 801aaf0:	b917      	cbnz	r7, 801aaf8 <_ZN17MasterSubscribers19SetSubscriberStatusEhb+0x1c>
}
 801aaf2:	4638      	mov	r0, r7
 801aaf4:	b003      	add	sp, #12
 801aaf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aaf8:	4604      	mov	r4, r0
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801aafa:	f04f 31ff 	mov.w	r1, #4294967295
 801aafe:	68a8      	ldr	r0, [r5, #8]
 801ab00:	f7f1 feda 	bl	800c8b8 <osSemaphoreAcquire>
 801ab04:	68e8      	ldr	r0, [r5, #12]
 801ab06:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801ab0a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	configurations[index].activated = status;
 801ab0e:	7066      	strb	r6, [r4, #1]
	osSemaphoreRelease(SubscribersSemaphore);
 801ab10:	68a8      	ldr	r0, [r5, #8]
 801ab12:	f7f1 ff05 	bl	800c920 <osSemaphoreRelease>
	return true;
 801ab16:	e7ec      	b.n	801aaf2 <_ZN17MasterSubscribers19SetSubscriberStatusEhb+0x16>

0801ab18 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801ab18:	2b02      	cmp	r3, #2
 801ab1a:	d001      	beq.n	801ab20 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x8>
 801ab1c:	2000      	movs	r0, #0
		}
 801ab1e:	4770      	bx	lr
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801ab20:	b508      	push	{r3, lr}
 801ab22:	4611      	mov	r1, r2
			self->SetSubscriberStatus(input[0], (bool) input[1]);
 801ab24:	7852      	ldrb	r2, [r2, #1]
 801ab26:	3a00      	subs	r2, #0
 801ab28:	bf18      	it	ne
 801ab2a:	2201      	movne	r2, #1
 801ab2c:	7809      	ldrb	r1, [r1, #0]
 801ab2e:	f7ff ffd5 	bl	801aadc <_ZN17MasterSubscribers19SetSubscriberStatusEhb>
			return true;
 801ab32:	2001      	movs	r0, #1
		}
 801ab34:	bd08      	pop	{r3, pc}

0801ab36 <_ZN17MasterSubscribers15AddressAcceptedEhh>:
bool MasterSubscribers::AddressAccepted(uint8_t ID, uint8_t address) {
 801ab36:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab38:	b083      	sub	sp, #12
 801ab3a:	4605      	mov	r5, r0
 801ab3c:	4614      	mov	r4, r2
	uint8_t index = FindSubscriberIndex(ID, &success);
 801ab3e:	f10d 0207 	add.w	r2, sp, #7
 801ab42:	f7ff ff9f 	bl	801aa84 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 801ab46:	f89d 6007 	ldrb.w	r6, [sp, #7]
 801ab4a:	b916      	cbnz	r6, 801ab52 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x1c>
}
 801ab4c:	4630      	mov	r0, r6
 801ab4e:	b003      	add	sp, #12
 801ab50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab52:	4607      	mov	r7, r0
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801ab54:	f04f 31ff 	mov.w	r1, #4294967295
 801ab58:	68a8      	ldr	r0, [r5, #8]
 801ab5a:	f7f1 fead 	bl	800c8b8 <osSemaphoreAcquire>
 801ab5e:	68eb      	ldr	r3, [r5, #12]
 801ab60:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 801ab64:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ab68:	6a02      	ldr	r2, [r0, #32]
 801ab6a:	69c3      	ldr	r3, [r0, #28]
	if (configurations[index].filters.size() == 0) { // if no filter setup, accept the input data
 801ab6c:	4293      	cmp	r3, r2
 801ab6e:	d007      	beq.n	801ab80 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x4a>
    { return __lhs.base() != __rhs.base(); }
 801ab70:	4619      	mov	r1, r3
	for (uint8_t filtered_address : configurations[index].filters) {
 801ab72:	429a      	cmp	r2, r3
 801ab74:	d00c      	beq.n	801ab90 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x5a>
 801ab76:	781b      	ldrb	r3, [r3, #0]
		if (filtered_address == address) {
 801ab78:	42a3      	cmp	r3, r4
 801ab7a:	d005      	beq.n	801ab88 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x52>
	++_M_current;
 801ab7c:	1c4b      	adds	r3, r1, #1
	return *this;
 801ab7e:	e7f7      	b.n	801ab70 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x3a>
		osSemaphoreRelease(SubscribersSemaphore);
 801ab80:	68a8      	ldr	r0, [r5, #8]
 801ab82:	f7f1 fecd 	bl	800c920 <osSemaphoreRelease>
		return true;
 801ab86:	e7e1      	b.n	801ab4c <_ZN17MasterSubscribers15AddressAcceptedEhh+0x16>
			osSemaphoreRelease(SubscribersSemaphore);
 801ab88:	68a8      	ldr	r0, [r5, #8]
 801ab8a:	f7f1 fec9 	bl	800c920 <osSemaphoreRelease>
			return true;
 801ab8e:	e7dd      	b.n	801ab4c <_ZN17MasterSubscribers15AddressAcceptedEhh+0x16>
	osSemaphoreRelease(SubscribersSemaphore);
 801ab90:	68a8      	ldr	r0, [r5, #8]
 801ab92:	f7f1 fec5 	bl	800c920 <osSemaphoreRelease>
	return false;
 801ab96:	2600      	movs	r6, #0
 801ab98:	e7d8      	b.n	801ab4c <_ZN17MasterSubscribers15AddressAcceptedEhh+0x16>

0801ab9a <_ZN17MasterSubscribers12ClearFiltersEh>:
bool MasterSubscribers::ClearFilters(uint8_t ID) {
 801ab9a:	b570      	push	{r4, r5, r6, lr}
 801ab9c:	b082      	sub	sp, #8
 801ab9e:	4605      	mov	r5, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 801aba0:	f10d 0207 	add.w	r2, sp, #7
 801aba4:	f7ff ff6e 	bl	801aa84 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 801aba8:	f89d 6007 	ldrb.w	r6, [sp, #7]
 801abac:	b916      	cbnz	r6, 801abb4 <_ZN17MasterSubscribers12ClearFiltersEh+0x1a>
}
 801abae:	4630      	mov	r0, r6
 801abb0:	b002      	add	sp, #8
 801abb2:	bd70      	pop	{r4, r5, r6, pc}
 801abb4:	4604      	mov	r4, r0
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801abb6:	f04f 31ff 	mov.w	r1, #4294967295
 801abba:	68a8      	ldr	r0, [r5, #8]
 801abbc:	f7f1 fe7c 	bl	800c8b8 <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 801abc0:	68e8      	ldr	r0, [r5, #12]
 801abc2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801abc6:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
      { _M_erase_at_end(this->_M_impl._M_start); }
 801abca:	69e3      	ldr	r3, [r4, #28]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801abcc:	6a22      	ldr	r2, [r4, #32]
 801abce:	4293      	cmp	r3, r2
 801abd0:	d000      	beq.n	801abd4 <_ZN17MasterSubscribers12ClearFiltersEh+0x3a>
	    this->_M_impl._M_finish = __pos;
 801abd2:	6223      	str	r3, [r4, #32]
	osSemaphoreRelease(SubscribersSemaphore);
 801abd4:	68a8      	ldr	r0, [r5, #8]
 801abd6:	f7f1 fea3 	bl	800c920 <osSemaphoreRelease>
	return true;
 801abda:	e7e8      	b.n	801abae <_ZN17MasterSubscribers12ClearFiltersEh+0x14>

0801abdc <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801abdc:	b508      	push	{r3, lr}
			self->ClearFilters(*input);
 801abde:	7811      	ldrb	r1, [r2, #0]
 801abe0:	f7ff ffdb 	bl	801ab9a <_ZN17MasterSubscribers12ClearFiltersEh>
		}
 801abe4:	2001      	movs	r0, #1
 801abe6:	bd08      	pop	{r3, pc}

0801abe8 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>:
//	*success = false;
//	return Register();
}

// returns the index of the register ID for the given subscriber if available
uint8_t MasterSubscribers::FindRemoteRegisterIndex(uint8_t ID, Register remote_register, SubscriberInterface interface, bool* success) {//uint8_t register_ID, bool* success) {
 801abe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abea:	b087      	sub	sp, #28
 801abec:	4606      	mov	r6, r0
 801abee:	466c      	mov	r4, sp
 801abf0:	e884 000c 	stmia.w	r4, {r2, r3}
 801abf4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	uint8_t subscriber_index = FindSubscriberIndex(ID, success);
 801abf6:	463a      	mov	r2, r7
 801abf8:	f7ff ff44 	bl	801aa84 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (not *success)
 801abfc:	783b      	ldrb	r3, [r7, #0]
 801abfe:	b91b      	cbnz	r3, 801ac08 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x20>
		return 0;
 801ac00:	2400      	movs	r4, #0
//		}
//		remote_register_index++;
//	}
//	*success = false;
//	return 0;
}
 801ac02:	4620      	mov	r0, r4
 801ac04:	b007      	add	sp, #28
 801ac06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac08:	4605      	mov	r5, r0
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801ac0a:	f04f 31ff 	mov.w	r1, #4294967295
 801ac0e:	68b0      	ldr	r0, [r6, #8]
 801ac10:	f7f1 fe52 	bl	800c8b8 <osSemaphoreAcquire>
	for (uint8_t index = 0; index < configurations[subscriber_index].remote_registers.size(); index++) {
 801ac14:	2400      	movs	r4, #0
 801ac16:	e00b      	b.n	801ac30 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x48>
				if (interface.address == subscribed_interface.address || subscribed_interface.address == ALL || interface.address == ALL) {
 801ac18:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 801ac1c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801ac20:	429a      	cmp	r2, r3
 801ac22:	d034      	beq.n	801ac8e <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xa6>
 801ac24:	2bff      	cmp	r3, #255	; 0xff
 801ac26:	d032      	beq.n	801ac8e <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xa6>
 801ac28:	2aff      	cmp	r2, #255	; 0xff
 801ac2a:	d030      	beq.n	801ac8e <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xa6>
	for (uint8_t index = 0; index < configurations[subscriber_index].remote_registers.size(); index++) {
 801ac2c:	3401      	adds	r4, #1
 801ac2e:	b2e4      	uxtb	r4, r4
	return *(this->_M_impl._M_start + __n);
 801ac30:	68f2      	ldr	r2, [r6, #12]
 801ac32:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 801ac36:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ac3a:	6893      	ldr	r3, [r2, #8]
 801ac3c:	6851      	ldr	r1, [r2, #4]
 801ac3e:	1a5b      	subs	r3, r3, r1
 801ac40:	105b      	asrs	r3, r3, #1
 801ac42:	4819      	ldr	r0, [pc, #100]	; (801aca8 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xc0>)
 801ac44:	fb00 f303 	mul.w	r3, r0, r3
 801ac48:	429c      	cmp	r4, r3
 801ac4a:	d226      	bcs.n	801ac9a <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xb2>
	return *(this->_M_impl._M_start + __n);
 801ac4c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801ac50:	eb01 0c43 	add.w	ip, r1, r3, lsl #1
		Register subscribed_register = configurations[subscriber_index].remote_registers[index];
 801ac54:	f851 0013 	ldr.w	r0, [r1, r3, lsl #1]
 801ac58:	9004      	str	r0, [sp, #16]
 801ac5a:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 801ac5e:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ac62:	6913      	ldr	r3, [r2, #16]
		SubscriberInterface subscribed_interface = configurations[subscriber_index].interfaces[index];
 801ac64:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801ac68:	f8ad 300c 	strh.w	r3, [sp, #12]
		if (remote_register.address == subscribed_register.address) {
 801ac6c:	f8bd 2000 	ldrh.w	r2, [sp]
 801ac70:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801ac74:	429a      	cmp	r2, r3
 801ac76:	d1d9      	bne.n	801ac2c <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x44>
			if (interface.interface == subscribed_interface.interface || subscribed_interface.interface == ALL_INTERFACES || interface.interface == ALL_INTERFACES) {
 801ac78:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801ac7c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801ac80:	429a      	cmp	r2, r3
 801ac82:	d0c9      	beq.n	801ac18 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x30>
 801ac84:	2b07      	cmp	r3, #7
 801ac86:	d0c7      	beq.n	801ac18 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x30>
 801ac88:	2a07      	cmp	r2, #7
 801ac8a:	d1cf      	bne.n	801ac2c <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x44>
 801ac8c:	e7c4      	b.n	801ac18 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x30>
					osSemaphoreRelease(SubscribersSemaphore);
 801ac8e:	68b0      	ldr	r0, [r6, #8]
 801ac90:	f7f1 fe46 	bl	800c920 <osSemaphoreRelease>
					*success = true;
 801ac94:	2301      	movs	r3, #1
 801ac96:	703b      	strb	r3, [r7, #0]
					return index;
 801ac98:	e7b3      	b.n	801ac02 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x1a>
	osSemaphoreRelease(SubscribersSemaphore);
 801ac9a:	68b0      	ldr	r0, [r6, #8]
 801ac9c:	f7f1 fe40 	bl	800c920 <osSemaphoreRelease>
	*success = false;
 801aca0:	2400      	movs	r4, #0
 801aca2:	703c      	strb	r4, [r7, #0]
	return 0;
 801aca4:	e7ad      	b.n	801ac02 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x1a>
 801aca6:	bf00      	nop
 801aca8:	aaaaaaab 	.word	0xaaaaaaab

0801acac <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>:
bool MasterSubscribers::SubscribedToRemoteRegister(uint8_t ID, Register remote_register, SubscriberInterface interface) {
 801acac:	b500      	push	{lr}
 801acae:	b087      	sub	sp, #28
 801acb0:	f10d 0c08 	add.w	ip, sp, #8
 801acb4:	e88c 000c 	stmia.w	ip, {r2, r3}
	FindRemoteRegisterIndex(ID, remote_register, interface, &success);
 801acb8:	f10d 0317 	add.w	r3, sp, #23
 801acbc:	9301      	str	r3, [sp, #4]
 801acbe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801acc2:	f8ad 3000 	strh.w	r3, [sp]
 801acc6:	e89c 000c 	ldmia.w	ip, {r2, r3}
 801acca:	f7ff ff8d 	bl	801abe8 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>
}
 801acce:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801acd2:	b007      	add	sp, #28
 801acd4:	f85d fb04 	ldr.w	pc, [sp], #4

0801acd8 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb>:
Register MasterSubscribers::FindRemoteRegister(Register remote_register, SubscriberInterface interface, bool* success) {//uint8_t register_ID, bool* success) {
 801acd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acdc:	b086      	sub	sp, #24
 801acde:	4607      	mov	r7, r0
 801ace0:	460e      	mov	r6, r1
 801ace2:	a902      	add	r1, sp, #8
 801ace4:	e881 000c 	stmia.w	r1, {r2, r3}
 801ace8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801acea:	f04f 31ff 	mov.w	r1, #4294967295
 801acee:	68b0      	ldr	r0, [r6, #8]
 801acf0:	f7f1 fde2 	bl	800c8b8 <osSemaphoreAcquire>
	for (SubscriberConfiguration &configuration : configurations) {
 801acf4:	68f3      	ldr	r3, [r6, #12]
      : _M_current(__i) { }
 801acf6:	f8d6 8010 	ldr.w	r8, [r6, #16]
 801acfa:	e001      	b.n	801ad00 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x28>
	++_M_current;
 801acfc:	f105 0328 	add.w	r3, r5, #40	; 0x28
    { return __lhs.base() != __rhs.base(); }
 801ad00:	461d      	mov	r5, r3
 801ad02:	4543      	cmp	r3, r8
 801ad04:	d021      	beq.n	801ad4a <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x72>
		index = FindRemoteRegisterIndex(configuration.ID, remote_register, interface, success);
 801ad06:	7819      	ldrb	r1, [r3, #0]
 801ad08:	9401      	str	r4, [sp, #4]
 801ad0a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801ad0e:	f8ad 3000 	strh.w	r3, [sp]
 801ad12:	ab02      	add	r3, sp, #8
 801ad14:	cb0c      	ldmia	r3, {r2, r3}
 801ad16:	4630      	mov	r0, r6
 801ad18:	f7ff ff66 	bl	801abe8 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>
		if (*success) {
 801ad1c:	7823      	ldrb	r3, [r4, #0]
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d0ec      	beq.n	801acfc <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x24>
 801ad22:	686a      	ldr	r2, [r5, #4]
 801ad24:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801ad28:	eb02 0143 	add.w	r1, r2, r3, lsl #1
			Register found_register = configuration.remote_registers[index];
 801ad2c:	f852 0013 	ldr.w	r0, [r2, r3, lsl #1]
 801ad30:	9004      	str	r0, [sp, #16]
 801ad32:	888b      	ldrh	r3, [r1, #4]
 801ad34:	f8ad 3014 	strh.w	r3, [sp, #20]
			osSemaphoreRelease(SubscribersSemaphore);
 801ad38:	68b0      	ldr	r0, [r6, #8]
 801ad3a:	f7f1 fdf1 	bl	800c920 <osSemaphoreRelease>
			return found_register;
 801ad3e:	9804      	ldr	r0, [sp, #16]
 801ad40:	6038      	str	r0, [r7, #0]
 801ad42:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801ad46:	80bb      	strh	r3, [r7, #4]
 801ad48:	e006      	b.n	801ad58 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x80>
	osSemaphoreRelease(SubscribersSemaphore);
 801ad4a:	68b0      	ldr	r0, [r6, #8]
 801ad4c:	f7f1 fde8 	bl	800c920 <osSemaphoreRelease>
	*success = false;
 801ad50:	2300      	movs	r3, #0
 801ad52:	7023      	strb	r3, [r4, #0]
	return Register();
 801ad54:	603b      	str	r3, [r7, #0]
 801ad56:	80bb      	strh	r3, [r7, #4]
}
 801ad58:	4638      	mov	r0, r7
 801ad5a:	b006      	add	sp, #24
 801ad5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ad60 <_ZN17MasterSubscribers9AddFilterEhh>:
bool MasterSubscribers::AddFilter(uint8_t ID, uint8_t address) {
 801ad60:	b570      	push	{r4, r5, r6, lr}
 801ad62:	b084      	sub	sp, #16
 801ad64:	4604      	mov	r4, r0
 801ad66:	f88d 2007 	strb.w	r2, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 801ad6a:	f10d 020f 	add.w	r2, sp, #15
 801ad6e:	f7ff fe89 	bl	801aa84 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 801ad72:	f89d 500f 	ldrb.w	r5, [sp, #15]
 801ad76:	b32d      	cbz	r5, 801adc4 <_ZN17MasterSubscribers9AddFilterEhh+0x64>
 801ad78:	68e3      	ldr	r3, [r4, #12]
 801ad7a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801ad7e:	00d6      	lsls	r6, r2, #3
 801ad80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ad84:	6a1a      	ldr	r2, [r3, #32]
 801ad86:	69db      	ldr	r3, [r3, #28]
	if (configurations[index].filters.size() > 0 && AddressAccepted(index, address)) // if address already filtered, return
 801ad88:	4293      	cmp	r3, r2
 801ad8a:	d006      	beq.n	801ad9a <_ZN17MasterSubscribers9AddFilterEhh+0x3a>
 801ad8c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801ad90:	4601      	mov	r1, r0
 801ad92:	4620      	mov	r0, r4
 801ad94:	f7ff fecf 	bl	801ab36 <_ZN17MasterSubscribers15AddressAcceptedEhh>
 801ad98:	b9e0      	cbnz	r0, 801add4 <_ZN17MasterSubscribers9AddFilterEhh+0x74>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801ad9a:	f04f 31ff 	mov.w	r1, #4294967295
 801ad9e:	68a0      	ldr	r0, [r4, #8]
 801ada0:	f7f1 fd8a 	bl	800c8b8 <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 801ada4:	68e0      	ldr	r0, [r4, #12]
 801ada6:	4430      	add	r0, r6
	configurations[index].filters.push_back(address);
 801ada8:	301c      	adds	r0, #28
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801adaa:	6841      	ldr	r1, [r0, #4]
 801adac:	6883      	ldr	r3, [r0, #8]
 801adae:	4299      	cmp	r1, r3
 801adb0:	d00b      	beq.n	801adca <_ZN17MasterSubscribers9AddFilterEhh+0x6a>
 801adb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801adb6:	700b      	strb	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 801adb8:	6843      	ldr	r3, [r0, #4]
 801adba:	3301      	adds	r3, #1
 801adbc:	6043      	str	r3, [r0, #4]
	osSemaphoreRelease(SubscribersSemaphore);
 801adbe:	68a0      	ldr	r0, [r4, #8]
 801adc0:	f7f1 fdae 	bl	800c920 <osSemaphoreRelease>
}
 801adc4:	4628      	mov	r0, r5
 801adc6:	b004      	add	sp, #16
 801adc8:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
 801adca:	f10d 0207 	add.w	r2, sp, #7
 801adce:	f7e6 faab 	bl	8001328 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 801add2:	e7f4      	b.n	801adbe <_ZN17MasterSubscribers9AddFilterEhh+0x5e>
		return false;
 801add4:	2500      	movs	r5, #0
 801add6:	e7f5      	b.n	801adc4 <_ZN17MasterSubscribers9AddFilterEhh+0x64>

0801add8 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801add8:	2b02      	cmp	r3, #2
 801adda:	d001      	beq.n	801ade0 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x8>
 801addc:	2000      	movs	r0, #0
		}
 801adde:	4770      	bx	lr
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801ade0:	b508      	push	{r3, lr}
 801ade2:	4611      	mov	r1, r2
			self->AddFilter(input[0], input[1]);
 801ade4:	7852      	ldrb	r2, [r2, #1]
 801ade6:	7809      	ldrb	r1, [r1, #0]
 801ade8:	f7ff ffba 	bl	801ad60 <_ZN17MasterSubscribers9AddFilterEhh>
			return true;
 801adec:	2001      	movs	r0, #1
		}
 801adee:	bd08      	pop	{r3, pc}

0801adf0 <_ZN17MasterSubscribers12AddRegistersEv>:
void MasterSubscribers::AddRegisters(void) {
 801adf0:	b510      	push	{r4, lr}
 801adf2:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_SUB_SET_STATUS);
 801adf4:	2120      	movs	r1, #32
 801adf6:	6800      	ldr	r0, [r0, #0]
 801adf8:	f7f4 f8ba 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsArray(REG_SUB_SET_STATUS, 2);
 801adfc:	2202      	movs	r2, #2
 801adfe:	2120      	movs	r1, #32
 801ae00:	6820      	ldr	r0, [r4, #0]
 801ae02:	f7fe ffa4 	bl	8019d4e <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_SET_STATUS, (void*) this,
 801ae06:	4b12      	ldr	r3, [pc, #72]	; (801ae50 <_ZN17MasterSubscribers12AddRegistersEv+0x60>)
 801ae08:	4622      	mov	r2, r4
 801ae0a:	2120      	movs	r1, #32
 801ae0c:	6820      	ldr	r0, [r4, #0]
 801ae0e:	f7f4 f985 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_SUB_ADD_FILTER);
 801ae12:	2121      	movs	r1, #33	; 0x21
 801ae14:	6820      	ldr	r0, [r4, #0]
 801ae16:	f7f4 f8ab 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsArray(REG_SUB_ADD_FILTER, 2);
 801ae1a:	2202      	movs	r2, #2
 801ae1c:	2121      	movs	r1, #33	; 0x21
 801ae1e:	6820      	ldr	r0, [r4, #0]
 801ae20:	f7fe ff95 	bl	8019d4e <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_ADD_FILTER, (void*) this,
 801ae24:	4b0b      	ldr	r3, [pc, #44]	; (801ae54 <_ZN17MasterSubscribers12AddRegistersEv+0x64>)
 801ae26:	4622      	mov	r2, r4
 801ae28:	2121      	movs	r1, #33	; 0x21
 801ae2a:	6820      	ldr	r0, [r4, #0]
 801ae2c:	f7f4 f976 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
	registers->AddRegister<uint8_t>(REG_SUB_CLEAR_FILTERS);
 801ae30:	2122      	movs	r1, #34	; 0x22
 801ae32:	6820      	ldr	r0, [r4, #0]
 801ae34:	f7f4 f89c 	bl	800ef70 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_SUB_CLEAR_FILTERS);
 801ae38:	2122      	movs	r1, #34	; 0x22
 801ae3a:	6820      	ldr	r0, [r4, #0]
 801ae3c:	f7fe ff67 	bl	8019d0e <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_CLEAR_FILTERS, (void*) this,
 801ae40:	4b05      	ldr	r3, [pc, #20]	; (801ae58 <_ZN17MasterSubscribers12AddRegistersEv+0x68>)
 801ae42:	4622      	mov	r2, r4
 801ae44:	2122      	movs	r1, #34	; 0x22
 801ae46:	6820      	ldr	r0, [r4, #0]
 801ae48:	f7f4 f968 	bl	800f11c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE>
}
 801ae4c:	bd10      	pop	{r4, pc}
 801ae4e:	bf00      	nop
 801ae50:	0801ab19 	.word	0x0801ab19
 801ae54:	0801add9 	.word	0x0801add9
 801ae58:	0801abdd 	.word	0x0801abdd

0801ae5c <_ZN4UserC1EP9RegistersP17MasterSubscribersP13CommunicationP8ServicesP10PublishersP13HardwareDelayP7SensorsP4LEDS>:
			Services* services_,
			Publishers* publishers_,
			HardwareDelay* hardware_delay_,
			Sensors* sensors_,
			LEDS* leds_) {
	registers = registers_;
 801ae5c:	6001      	str	r1, [r0, #0]
	subscribers = subscribers_;
 801ae5e:	6042      	str	r2, [r0, #4]
	communication = communication_;
 801ae60:	6083      	str	r3, [r0, #8]
	services = services_;
 801ae62:	9b00      	ldr	r3, [sp, #0]
 801ae64:	60c3      	str	r3, [r0, #12]
	publishers = publishers_;
 801ae66:	9b01      	ldr	r3, [sp, #4]
 801ae68:	6103      	str	r3, [r0, #16]
	hardware_delay = hardware_delay_;
 801ae6a:	9b02      	ldr	r3, [sp, #8]
 801ae6c:	6143      	str	r3, [r0, #20]
	sensors = sensors_;
 801ae6e:	9b03      	ldr	r3, [sp, #12]
 801ae70:	6183      	str	r3, [r0, #24]
	leds = leds_;
 801ae72:	9b04      	ldr	r3, [sp, #16]
 801ae74:	61c3      	str	r3, [r0, #28]
}
 801ae76:	4770      	bx	lr

0801ae78 <_ZN4User4InitEv>:

void User::Init(void) {
	// Insert USER Code Here
	// Called just before kernel init
}
 801ae78:	4770      	bx	lr

0801ae7a <_ZN4User12AddOSThreadsEv>:

void User::AddOSThreads(void) {
	// osThreadNew User freeRTOS threads
	// Called just before kernel start
}
 801ae7a:	4770      	bx	lr

0801ae7c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 801ae7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801ae7e:	2400      	movs	r4, #0
 801ae80:	2310      	movs	r3, #16
 801ae82:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801ae86:	6803      	ldr	r3, [r0, #0]
 801ae88:	4615      	mov	r5, r2
 801ae8a:	699e      	ldr	r6, [r3, #24]
 801ae8c:	6812      	ldr	r2, [r2, #0]
 801ae8e:	466b      	mov	r3, sp
 801ae90:	e9cd 4400 	strd	r4, r4, [sp]
 801ae94:	47b0      	blx	r6
 801ae96:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801ae9a:	f003 0306 	and.w	r3, r3, #6
 801ae9e:	2b06      	cmp	r3, #6
 801aea0:	bf03      	ittte	eq
 801aea2:	9b00      	ldreq	r3, [sp, #0]
 801aea4:	602b      	streq	r3, [r5, #0]
 801aea6:	2001      	moveq	r0, #1
 801aea8:	4620      	movne	r0, r4
 801aeaa:	b004      	add	sp, #16
 801aeac:	bd70      	pop	{r4, r5, r6, pc}

0801aeae <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 801aeae:	9800      	ldr	r0, [sp, #0]
 801aeb0:	4290      	cmp	r0, r2
 801aeb2:	bf14      	ite	ne
 801aeb4:	2001      	movne	r0, #1
 801aeb6:	2006      	moveq	r0, #6
 801aeb8:	4770      	bx	lr
	...

0801aebc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 801aebc:	b510      	push	{r4, lr}
 801aebe:	4b03      	ldr	r3, [pc, #12]	; (801aecc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 801aec0:	6003      	str	r3, [r0, #0]
 801aec2:	4604      	mov	r4, r0
 801aec4:	f000 f8f5 	bl	801b0b2 <_ZNSt9type_infoD1Ev>
 801aec8:	4620      	mov	r0, r4
 801aeca:	bd10      	pop	{r4, pc}
 801aecc:	0801c158 	.word	0x0801c158

0801aed0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 801aed0:	b510      	push	{r4, lr}
 801aed2:	4604      	mov	r4, r0
 801aed4:	f7ff fff2 	bl	801aebc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801aed8:	4620      	mov	r0, r4
 801aeda:	2108      	movs	r1, #8
 801aedc:	f000 f842 	bl	801af64 <_ZdlPvj>
 801aee0:	4620      	mov	r0, r4
 801aee2:	bd10      	pop	{r4, pc}

0801aee4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 801aee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aee8:	461f      	mov	r7, r3
 801aeea:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801aeee:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801aef2:	4598      	cmp	r8, r3
 801aef4:	4606      	mov	r6, r0
 801aef6:	4615      	mov	r5, r2
 801aef8:	d107      	bne.n	801af0a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801aefa:	9907      	ldr	r1, [sp, #28]
 801aefc:	f000 f8de 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 801af00:	b118      	cbz	r0, 801af0a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801af02:	7165      	strb	r5, [r4, #5]
 801af04:	2000      	movs	r0, #0
 801af06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af0a:	4639      	mov	r1, r7
 801af0c:	4630      	mov	r0, r6
 801af0e:	f000 f8d5 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 801af12:	2800      	cmp	r0, #0
 801af14:	d0f6      	beq.n	801af04 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 801af16:	2301      	movs	r3, #1
 801af18:	f8c4 8000 	str.w	r8, [r4]
 801af1c:	7125      	strb	r5, [r4, #4]
 801af1e:	71a3      	strb	r3, [r4, #6]
 801af20:	e7f0      	b.n	801af04 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0801af22 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 801af22:	b538      	push	{r3, r4, r5, lr}
 801af24:	4615      	mov	r5, r2
 801af26:	461c      	mov	r4, r3
 801af28:	f000 f8c8 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 801af2c:	b120      	cbz	r0, 801af38 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 801af2e:	2308      	movs	r3, #8
 801af30:	60e3      	str	r3, [r4, #12]
 801af32:	2306      	movs	r3, #6
 801af34:	6025      	str	r5, [r4, #0]
 801af36:	7123      	strb	r3, [r4, #4]
 801af38:	bd38      	pop	{r3, r4, r5, pc}

0801af3a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 801af3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801af3c:	4605      	mov	r5, r0
 801af3e:	460c      	mov	r4, r1
 801af40:	9201      	str	r2, [sp, #4]
 801af42:	461e      	mov	r6, r3
 801af44:	f000 f8ba 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 801af48:	b950      	cbnz	r0, 801af60 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801af4a:	2e03      	cmp	r6, #3
 801af4c:	d808      	bhi.n	801af60 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801af4e:	6823      	ldr	r3, [r4, #0]
 801af50:	9a01      	ldr	r2, [sp, #4]
 801af52:	695b      	ldr	r3, [r3, #20]
 801af54:	4629      	mov	r1, r5
 801af56:	4620      	mov	r0, r4
 801af58:	b002      	add	sp, #8
 801af5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801af5e:	4718      	bx	r3
 801af60:	b002      	add	sp, #8
 801af62:	bd70      	pop	{r4, r5, r6, pc}

0801af64 <_ZdlPvj>:
 801af64:	f000 b97b 	b.w	801b25e <_ZdlPv>

0801af68 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 801af68:	b510      	push	{r4, lr}
 801af6a:	4b03      	ldr	r3, [pc, #12]	; (801af78 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 801af6c:	6003      	str	r3, [r0, #0]
 801af6e:	4604      	mov	r4, r0
 801af70:	f000 f89f 	bl	801b0b2 <_ZNSt9type_infoD1Ev>
 801af74:	4620      	mov	r0, r4
 801af76:	bd10      	pop	{r4, pc}
 801af78:	0801c200 	.word	0x0801c200

0801af7c <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 801af7c:	b510      	push	{r4, lr}
 801af7e:	4604      	mov	r4, r0
 801af80:	f7ff fff2 	bl	801af68 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
 801af84:	4620      	mov	r0, r4
 801af86:	2108      	movs	r1, #8
 801af88:	f7ff ffec 	bl	801af64 <_ZdlPvj>
 801af8c:	4620      	mov	r0, r4
 801af8e:	bd10      	pop	{r4, pc}

0801af90 <_Znwj>:
 801af90:	2801      	cmp	r0, #1
 801af92:	bf38      	it	cc
 801af94:	2001      	movcc	r0, #1
 801af96:	b510      	push	{r4, lr}
 801af98:	4604      	mov	r4, r0
 801af9a:	4620      	mov	r0, r4
 801af9c:	f000 fc98 	bl	801b8d0 <malloc>
 801afa0:	b930      	cbnz	r0, 801afb0 <_Znwj+0x20>
 801afa2:	f000 f95f 	bl	801b264 <_ZSt15get_new_handlerv>
 801afa6:	b908      	cbnz	r0, 801afac <_Znwj+0x1c>
 801afa8:	f000 fc5e 	bl	801b868 <abort>
 801afac:	4780      	blx	r0
 801afae:	e7f4      	b.n	801af9a <_Znwj+0xa>
 801afb0:	bd10      	pop	{r4, pc}
	...

0801afb4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 801afb4:	b510      	push	{r4, lr}
 801afb6:	4b03      	ldr	r3, [pc, #12]	; (801afc4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 801afb8:	6003      	str	r3, [r0, #0]
 801afba:	4604      	mov	r4, r0
 801afbc:	f7ff ff7e 	bl	801aebc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801afc0:	4620      	mov	r0, r4
 801afc2:	bd10      	pop	{r4, pc}
 801afc4:	0801c254 	.word	0x0801c254

0801afc8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 801afc8:	b510      	push	{r4, lr}
 801afca:	4604      	mov	r4, r0
 801afcc:	f7ff fff2 	bl	801afb4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 801afd0:	4620      	mov	r0, r4
 801afd2:	210c      	movs	r1, #12
 801afd4:	f7ff ffc6 	bl	801af64 <_ZdlPvj>
 801afd8:	4620      	mov	r0, r4
 801afda:	bd10      	pop	{r4, pc}

0801afdc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 801afdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801afde:	9f08      	ldr	r7, [sp, #32]
 801afe0:	4297      	cmp	r7, r2
 801afe2:	4605      	mov	r5, r0
 801afe4:	460e      	mov	r6, r1
 801afe6:	4614      	mov	r4, r2
 801afe8:	d00a      	beq.n	801b000 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 801afea:	68a8      	ldr	r0, [r5, #8]
 801afec:	6802      	ldr	r2, [r0, #0]
 801afee:	9708      	str	r7, [sp, #32]
 801aff0:	6a15      	ldr	r5, [r2, #32]
 801aff2:	4631      	mov	r1, r6
 801aff4:	4622      	mov	r2, r4
 801aff6:	46ac      	mov	ip, r5
 801aff8:	b003      	add	sp, #12
 801affa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801affe:	4760      	bx	ip
 801b000:	4619      	mov	r1, r3
 801b002:	9301      	str	r3, [sp, #4]
 801b004:	f000 f85a 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 801b008:	9b01      	ldr	r3, [sp, #4]
 801b00a:	2800      	cmp	r0, #0
 801b00c:	d0ed      	beq.n	801afea <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 801b00e:	2006      	movs	r0, #6
 801b010:	b003      	add	sp, #12
 801b012:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b014 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 801b014:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b018:	460d      	mov	r5, r1
 801b01a:	4619      	mov	r1, r3
 801b01c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 801b020:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 801b024:	4681      	mov	r9, r0
 801b026:	4617      	mov	r7, r2
 801b028:	4698      	mov	r8, r3
 801b02a:	f000 f847 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 801b02e:	b190      	cbz	r0, 801b056 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 801b030:	2d00      	cmp	r5, #0
 801b032:	6034      	str	r4, [r6, #0]
 801b034:	7137      	strb	r7, [r6, #4]
 801b036:	db09      	blt.n	801b04c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 801b038:	1961      	adds	r1, r4, r5
 801b03a:	458a      	cmp	sl, r1
 801b03c:	bf0c      	ite	eq
 801b03e:	2106      	moveq	r1, #6
 801b040:	2101      	movne	r1, #1
 801b042:	71b1      	strb	r1, [r6, #6]
 801b044:	2000      	movs	r0, #0
 801b046:	b001      	add	sp, #4
 801b048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b04c:	3502      	adds	r5, #2
 801b04e:	d1f9      	bne.n	801b044 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801b050:	2301      	movs	r3, #1
 801b052:	71b3      	strb	r3, [r6, #6]
 801b054:	e7f6      	b.n	801b044 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801b056:	4554      	cmp	r4, sl
 801b058:	d106      	bne.n	801b068 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801b05a:	4659      	mov	r1, fp
 801b05c:	4648      	mov	r0, r9
 801b05e:	f000 f82d 	bl	801b0bc <_ZNKSt9type_infoeqERKS_>
 801b062:	b108      	cbz	r0, 801b068 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801b064:	7177      	strb	r7, [r6, #5]
 801b066:	e7ed      	b.n	801b044 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801b068:	f8d9 0008 	ldr.w	r0, [r9, #8]
 801b06c:	6803      	ldr	r3, [r0, #0]
 801b06e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 801b072:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 801b076:	69dc      	ldr	r4, [r3, #28]
 801b078:	463a      	mov	r2, r7
 801b07a:	4643      	mov	r3, r8
 801b07c:	4629      	mov	r1, r5
 801b07e:	46a4      	mov	ip, r4
 801b080:	b001      	add	sp, #4
 801b082:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b086:	4760      	bx	ip

0801b088 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 801b088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b08c:	4607      	mov	r7, r0
 801b08e:	460c      	mov	r4, r1
 801b090:	4615      	mov	r5, r2
 801b092:	461e      	mov	r6, r3
 801b094:	f7ff ff45 	bl	801af22 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 801b098:	b948      	cbnz	r0, 801b0ae <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 801b09a:	68b8      	ldr	r0, [r7, #8]
 801b09c:	6803      	ldr	r3, [r0, #0]
 801b09e:	699f      	ldr	r7, [r3, #24]
 801b0a0:	462a      	mov	r2, r5
 801b0a2:	4633      	mov	r3, r6
 801b0a4:	4621      	mov	r1, r4
 801b0a6:	46bc      	mov	ip, r7
 801b0a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b0ac:	4760      	bx	ip
 801b0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b0b2 <_ZNSt9type_infoD1Ev>:
 801b0b2:	4770      	bx	lr

0801b0b4 <_ZNKSt9type_info14__is_pointer_pEv>:
 801b0b4:	2000      	movs	r0, #0
 801b0b6:	4770      	bx	lr

0801b0b8 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 801b0b8:	2000      	movs	r0, #0
 801b0ba:	4770      	bx	lr

0801b0bc <_ZNKSt9type_infoeqERKS_>:
 801b0bc:	4281      	cmp	r1, r0
 801b0be:	b508      	push	{r3, lr}
 801b0c0:	d00e      	beq.n	801b0e0 <_ZNKSt9type_infoeqERKS_+0x24>
 801b0c2:	6840      	ldr	r0, [r0, #4]
 801b0c4:	7803      	ldrb	r3, [r0, #0]
 801b0c6:	2b2a      	cmp	r3, #42	; 0x2a
 801b0c8:	d00c      	beq.n	801b0e4 <_ZNKSt9type_infoeqERKS_+0x28>
 801b0ca:	6849      	ldr	r1, [r1, #4]
 801b0cc:	780b      	ldrb	r3, [r1, #0]
 801b0ce:	2b2a      	cmp	r3, #42	; 0x2a
 801b0d0:	bf08      	it	eq
 801b0d2:	3101      	addeq	r1, #1
 801b0d4:	f7e5 f904 	bl	80002e0 <strcmp>
 801b0d8:	fab0 f080 	clz	r0, r0
 801b0dc:	0940      	lsrs	r0, r0, #5
 801b0de:	bd08      	pop	{r3, pc}
 801b0e0:	2001      	movs	r0, #1
 801b0e2:	e7fc      	b.n	801b0de <_ZNKSt9type_infoeqERKS_+0x22>
 801b0e4:	2000      	movs	r0, #0
 801b0e6:	e7fa      	b.n	801b0de <_ZNKSt9type_infoeqERKS_+0x22>

0801b0e8 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 801b0e8:	f7ff bfe8 	b.w	801b0bc <_ZNKSt9type_infoeqERKS_>

0801b0ec <_ZSt17__throw_bad_allocv>:
 801b0ec:	b508      	push	{r3, lr}
 801b0ee:	f000 fbbb 	bl	801b868 <abort>

0801b0f2 <_ZSt19__throw_logic_errorPKc>:
 801b0f2:	b508      	push	{r3, lr}
 801b0f4:	f000 fbb8 	bl	801b868 <abort>

0801b0f8 <_ZSt20__throw_length_errorPKc>:
 801b0f8:	b508      	push	{r3, lr}
 801b0fa:	f000 fbb5 	bl	801b868 <abort>

0801b0fe <_ZSt24__throw_out_of_range_fmtPKcz>:
 801b0fe:	b40f      	push	{r0, r1, r2, r3}
 801b100:	b580      	push	{r7, lr}
 801b102:	b084      	sub	sp, #16
 801b104:	af00      	add	r7, sp, #0
 801b106:	f107 0418 	add.w	r4, r7, #24
 801b10a:	f854 2b04 	ldr.w	r2, [r4], #4
 801b10e:	607a      	str	r2, [r7, #4]
 801b110:	4610      	mov	r0, r2
 801b112:	f7e5 f8ef 	bl	80002f4 <strlen>
 801b116:	f200 2307 	addw	r3, r0, #519	; 0x207
 801b11a:	f023 0307 	bic.w	r3, r3, #7
 801b11e:	ebad 0d03 	sub.w	sp, sp, r3
 801b122:	f500 7100 	add.w	r1, r0, #512	; 0x200
 801b126:	687a      	ldr	r2, [r7, #4]
 801b128:	60fc      	str	r4, [r7, #12]
 801b12a:	4623      	mov	r3, r4
 801b12c:	4668      	mov	r0, sp
 801b12e:	f000 f855 	bl	801b1dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 801b132:	f000 fb99 	bl	801b868 <abort>
	...

0801b138 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 801b138:	b580      	push	{r7, lr}
 801b13a:	b09c      	sub	sp, #112	; 0x70
 801b13c:	4606      	mov	r6, r0
 801b13e:	af00      	add	r7, sp, #0
 801b140:	460c      	mov	r4, r1
 801b142:	1ba4      	subs	r4, r4, r6
 801b144:	490e      	ldr	r1, [pc, #56]	; (801b180 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 801b146:	2269      	movs	r2, #105	; 0x69
 801b148:	1d38      	adds	r0, r7, #4
 801b14a:	f000 fbd1 	bl	801b8f0 <memcpy>
 801b14e:	f104 0370 	add.w	r3, r4, #112	; 0x70
 801b152:	f023 0307 	bic.w	r3, r3, #7
 801b156:	ebad 0d03 	sub.w	sp, sp, r3
 801b15a:	466d      	mov	r5, sp
 801b15c:	2268      	movs	r2, #104	; 0x68
 801b15e:	1d39      	adds	r1, r7, #4
 801b160:	4628      	mov	r0, r5
 801b162:	f000 fbc5 	bl	801b8f0 <memcpy>
 801b166:	4622      	mov	r2, r4
 801b168:	4631      	mov	r1, r6
 801b16a:	f105 0068 	add.w	r0, r5, #104	; 0x68
 801b16e:	442c      	add	r4, r5
 801b170:	f000 fbbe 	bl	801b8f0 <memcpy>
 801b174:	2300      	movs	r3, #0
 801b176:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 801b17a:	4628      	mov	r0, r5
 801b17c:	f7ff ffb9 	bl	801b0f2 <_ZSt19__throw_logic_errorPKc>
 801b180:	0801c28d 	.word	0x0801c28d

0801b184 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 801b184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b188:	af00      	add	r7, sp, #0
 801b18a:	b084      	sub	sp, #16
 801b18c:	466d      	mov	r5, sp
 801b18e:	f105 040c 	add.w	r4, r5, #12
 801b192:	f8df 8044 	ldr.w	r8, [pc, #68]	; 801b1d8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 801b196:	4623      	mov	r3, r4
 801b198:	f04f 0c0a 	mov.w	ip, #10
 801b19c:	fbb2 f6fc 	udiv	r6, r2, ip
 801b1a0:	fb0c 2e16 	mls	lr, ip, r6, r2
 801b1a4:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801b1a8:	f803 ed01 	strb.w	lr, [r3, #-1]!
 801b1ac:	4696      	mov	lr, r2
 801b1ae:	f1be 0f09 	cmp.w	lr, #9
 801b1b2:	4632      	mov	r2, r6
 801b1b4:	d8f2      	bhi.n	801b19c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 801b1b6:	1ae4      	subs	r4, r4, r3
 801b1b8:	428c      	cmp	r4, r1
 801b1ba:	d809      	bhi.n	801b1d0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 801b1bc:	f1c4 030c 	rsb	r3, r4, #12
 801b1c0:	4622      	mov	r2, r4
 801b1c2:	18e9      	adds	r1, r5, r3
 801b1c4:	f000 fb94 	bl	801b8f0 <memcpy>
 801b1c8:	4620      	mov	r0, r4
 801b1ca:	46bd      	mov	sp, r7
 801b1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1d0:	f04f 34ff 	mov.w	r4, #4294967295
 801b1d4:	e7f8      	b.n	801b1c8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 801b1d6:	bf00      	nop
 801b1d8:	0801c2f6 	.word	0x0801c2f6

0801b1dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 801b1dc:	3901      	subs	r1, #1
 801b1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1e2:	4607      	mov	r7, r0
 801b1e4:	4615      	mov	r5, r2
 801b1e6:	eb00 0801 	add.w	r8, r0, r1
 801b1ea:	4604      	mov	r4, r0
 801b1ec:	782a      	ldrb	r2, [r5, #0]
 801b1ee:	b392      	cbz	r2, 801b256 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 801b1f0:	4544      	cmp	r4, r8
 801b1f2:	d22a      	bcs.n	801b24a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 801b1f4:	2a25      	cmp	r2, #37	; 0x25
 801b1f6:	d107      	bne.n	801b208 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 801b1f8:	786a      	ldrb	r2, [r5, #1]
 801b1fa:	2a73      	cmp	r2, #115	; 0x73
 801b1fc:	d009      	beq.n	801b212 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 801b1fe:	2a7a      	cmp	r2, #122	; 0x7a
 801b200:	d012      	beq.n	801b228 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 801b202:	2a25      	cmp	r2, #37	; 0x25
 801b204:	d100      	bne.n	801b208 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 801b206:	3501      	adds	r5, #1
 801b208:	f815 2b01 	ldrb.w	r2, [r5], #1
 801b20c:	f804 2b01 	strb.w	r2, [r4], #1
 801b210:	e7ec      	b.n	801b1ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 801b212:	f853 2b04 	ldr.w	r2, [r3], #4
 801b216:	3a01      	subs	r2, #1
 801b218:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 801b21c:	b1c9      	cbz	r1, 801b252 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 801b21e:	4544      	cmp	r4, r8
 801b220:	d013      	beq.n	801b24a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 801b222:	f804 1b01 	strb.w	r1, [r4], #1
 801b226:	e7f7      	b.n	801b218 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 801b228:	78aa      	ldrb	r2, [r5, #2]
 801b22a:	2a75      	cmp	r2, #117	; 0x75
 801b22c:	d1ec      	bne.n	801b208 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 801b22e:	461e      	mov	r6, r3
 801b230:	eba8 0104 	sub.w	r1, r8, r4
 801b234:	f856 2b04 	ldr.w	r2, [r6], #4
 801b238:	4620      	mov	r0, r4
 801b23a:	f7ff ffa3 	bl	801b184 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 801b23e:	2800      	cmp	r0, #0
 801b240:	dd03      	ble.n	801b24a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 801b242:	4404      	add	r4, r0
 801b244:	3503      	adds	r5, #3
 801b246:	4633      	mov	r3, r6
 801b248:	e7d0      	b.n	801b1ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 801b24a:	4621      	mov	r1, r4
 801b24c:	4638      	mov	r0, r7
 801b24e:	f7ff ff73 	bl	801b138 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 801b252:	3502      	adds	r5, #2
 801b254:	e7ca      	b.n	801b1ec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 801b256:	7022      	strb	r2, [r4, #0]
 801b258:	1be0      	subs	r0, r4, r7
 801b25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b25e <_ZdlPv>:
 801b25e:	f000 bb3f 	b.w	801b8e0 <free>
	...

0801b264 <_ZSt15get_new_handlerv>:
 801b264:	4b02      	ldr	r3, [pc, #8]	; (801b270 <_ZSt15get_new_handlerv+0xc>)
 801b266:	6818      	ldr	r0, [r3, #0]
 801b268:	f3bf 8f5b 	dmb	ish
 801b26c:	4770      	bx	lr
 801b26e:	bf00      	nop
 801b270:	24007010 	.word	0x24007010

0801b274 <checkint>:
 801b274:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b278:	f240 33fe 	movw	r3, #1022	; 0x3fe
 801b27c:	429a      	cmp	r2, r3
 801b27e:	b570      	push	{r4, r5, r6, lr}
 801b280:	dd2a      	ble.n	801b2d8 <checkint+0x64>
 801b282:	f240 4333 	movw	r3, #1075	; 0x433
 801b286:	429a      	cmp	r2, r3
 801b288:	dc24      	bgt.n	801b2d4 <checkint+0x60>
 801b28a:	1a9b      	subs	r3, r3, r2
 801b28c:	f1a3 0620 	sub.w	r6, r3, #32
 801b290:	f04f 32ff 	mov.w	r2, #4294967295
 801b294:	fa02 f403 	lsl.w	r4, r2, r3
 801b298:	fa02 f606 	lsl.w	r6, r2, r6
 801b29c:	f1c3 0520 	rsb	r5, r3, #32
 801b2a0:	fa22 f505 	lsr.w	r5, r2, r5
 801b2a4:	4334      	orrs	r4, r6
 801b2a6:	432c      	orrs	r4, r5
 801b2a8:	409a      	lsls	r2, r3
 801b2aa:	ea20 0202 	bic.w	r2, r0, r2
 801b2ae:	ea21 0404 	bic.w	r4, r1, r4
 801b2b2:	4322      	orrs	r2, r4
 801b2b4:	f1a3 0420 	sub.w	r4, r3, #32
 801b2b8:	f1c3 0220 	rsb	r2, r3, #32
 801b2bc:	d10c      	bne.n	801b2d8 <checkint+0x64>
 801b2be:	40d8      	lsrs	r0, r3
 801b2c0:	fa01 f302 	lsl.w	r3, r1, r2
 801b2c4:	4318      	orrs	r0, r3
 801b2c6:	40e1      	lsrs	r1, r4
 801b2c8:	4308      	orrs	r0, r1
 801b2ca:	f000 0001 	and.w	r0, r0, #1
 801b2ce:	f1d0 0002 	rsbs	r0, r0, #2
 801b2d2:	bd70      	pop	{r4, r5, r6, pc}
 801b2d4:	2002      	movs	r0, #2
 801b2d6:	e7fc      	b.n	801b2d2 <checkint+0x5e>
 801b2d8:	2000      	movs	r0, #0
 801b2da:	e7fa      	b.n	801b2d2 <checkint+0x5e>
 801b2dc:	0000      	movs	r0, r0
	...

0801b2e0 <pow>:
 801b2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b2e4:	ee10 4a90 	vmov	r4, s1
 801b2e8:	ed2d 8b0a 	vpush	{d8-d12}
 801b2ec:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 801b2f0:	ee11 7a90 	vmov	r7, s3
 801b2f4:	f10a 32ff 	add.w	r2, sl, #4294967295
 801b2f8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 801b2fc:	429a      	cmp	r2, r3
 801b2fe:	ee10 6a10 	vmov	r6, s0
 801b302:	ee11 0a10 	vmov	r0, s2
 801b306:	b086      	sub	sp, #24
 801b308:	46d4      	mov	ip, sl
 801b30a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 801b30e:	d806      	bhi.n	801b31e <pow+0x3e>
 801b310:	f3c5 030a 	ubfx	r3, r5, #0, #11
 801b314:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 801b318:	2b7f      	cmp	r3, #127	; 0x7f
 801b31a:	f240 8156 	bls.w	801b5ca <pow+0x2ea>
 801b31e:	1802      	adds	r2, r0, r0
 801b320:	eb47 0107 	adc.w	r1, r7, r7
 801b324:	f06f 0e01 	mvn.w	lr, #1
 801b328:	f112 39ff 	adds.w	r9, r2, #4294967295
 801b32c:	f141 38ff 	adc.w	r8, r1, #4294967295
 801b330:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 801b334:	45ce      	cmp	lr, r9
 801b336:	eb73 0808 	sbcs.w	r8, r3, r8
 801b33a:	d23f      	bcs.n	801b3bc <pow+0xdc>
 801b33c:	ea52 0301 	orrs.w	r3, r2, r1
 801b340:	f04f 0300 	mov.w	r3, #0
 801b344:	d10c      	bne.n	801b360 <pow+0x80>
 801b346:	19b6      	adds	r6, r6, r6
 801b348:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801b34c:	4164      	adcs	r4, r4
 801b34e:	42b3      	cmp	r3, r6
 801b350:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b354:	41a3      	sbcs	r3, r4
 801b356:	f0c0 808c 	bcc.w	801b472 <pow+0x192>
 801b35a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801b35e:	e028      	b.n	801b3b2 <pow+0xd2>
 801b360:	4da3      	ldr	r5, [pc, #652]	; (801b5f0 <pow+0x310>)
 801b362:	42ac      	cmp	r4, r5
 801b364:	bf08      	it	eq
 801b366:	429e      	cmpeq	r6, r3
 801b368:	d107      	bne.n	801b37a <pow+0x9a>
 801b36a:	1800      	adds	r0, r0, r0
 801b36c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 801b370:	417f      	adcs	r7, r7
 801b372:	4283      	cmp	r3, r0
 801b374:	4b9f      	ldr	r3, [pc, #636]	; (801b5f4 <pow+0x314>)
 801b376:	41bb      	sbcs	r3, r7
 801b378:	e7ed      	b.n	801b356 <pow+0x76>
 801b37a:	19b6      	adds	r6, r6, r6
 801b37c:	489e      	ldr	r0, [pc, #632]	; (801b5f8 <pow+0x318>)
 801b37e:	4164      	adcs	r4, r4
 801b380:	42b3      	cmp	r3, r6
 801b382:	eb70 0504 	sbcs.w	r5, r0, r4
 801b386:	d374      	bcc.n	801b472 <pow+0x192>
 801b388:	4281      	cmp	r1, r0
 801b38a:	bf08      	it	eq
 801b38c:	429a      	cmpeq	r2, r3
 801b38e:	d170      	bne.n	801b472 <pow+0x192>
 801b390:	4a9a      	ldr	r2, [pc, #616]	; (801b5fc <pow+0x31c>)
 801b392:	4294      	cmp	r4, r2
 801b394:	bf08      	it	eq
 801b396:	429e      	cmpeq	r6, r3
 801b398:	d0df      	beq.n	801b35a <pow+0x7a>
 801b39a:	4294      	cmp	r4, r2
 801b39c:	ea6f 0707 	mvn.w	r7, r7
 801b3a0:	bf34      	ite	cc
 801b3a2:	2400      	movcc	r4, #0
 801b3a4:	2401      	movcs	r4, #1
 801b3a6:	0fff      	lsrs	r7, r7, #31
 801b3a8:	42bc      	cmp	r4, r7
 801b3aa:	f040 81d9 	bne.w	801b760 <pow+0x480>
 801b3ae:	ee21 0b01 	vmul.f64	d0, d1, d1
 801b3b2:	b006      	add	sp, #24
 801b3b4:	ecbd 8b0a 	vpop	{d8-d12}
 801b3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b3bc:	eb16 0806 	adds.w	r8, r6, r6
 801b3c0:	eb44 0904 	adc.w	r9, r4, r4
 801b3c4:	f118 31ff 	adds.w	r1, r8, #4294967295
 801b3c8:	f169 0200 	sbc.w	r2, r9, #0
 801b3cc:	458e      	cmp	lr, r1
 801b3ce:	4193      	sbcs	r3, r2
 801b3d0:	d223      	bcs.n	801b41a <pow+0x13a>
 801b3d2:	ee20 0b00 	vmul.f64	d0, d0, d0
 801b3d6:	2c00      	cmp	r4, #0
 801b3d8:	da12      	bge.n	801b400 <pow+0x120>
 801b3da:	4639      	mov	r1, r7
 801b3dc:	f7ff ff4a 	bl	801b274 <checkint>
 801b3e0:	2801      	cmp	r0, #1
 801b3e2:	d10d      	bne.n	801b400 <pow+0x120>
 801b3e4:	eeb1 0b40 	vneg.f64	d0, d0
 801b3e8:	ea58 0309 	orrs.w	r3, r8, r9
 801b3ec:	d10a      	bne.n	801b404 <pow+0x124>
 801b3ee:	2f00      	cmp	r7, #0
 801b3f0:	dadf      	bge.n	801b3b2 <pow+0xd2>
 801b3f2:	b006      	add	sp, #24
 801b3f4:	ecbd 8b0a 	vpop	{d8-d12}
 801b3f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b3fc:	f000 b9f0 	b.w	801b7e0 <__math_divzero>
 801b400:	2000      	movs	r0, #0
 801b402:	e7f1      	b.n	801b3e8 <pow+0x108>
 801b404:	2f00      	cmp	r7, #0
 801b406:	dad4      	bge.n	801b3b2 <pow+0xd2>
 801b408:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801b40c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801b410:	ed8d 7b00 	vstr	d7, [sp]
 801b414:	ed9d 0b00 	vldr	d0, [sp]
 801b418:	e7cb      	b.n	801b3b2 <pow+0xd2>
 801b41a:	2c00      	cmp	r4, #0
 801b41c:	da2c      	bge.n	801b478 <pow+0x198>
 801b41e:	4639      	mov	r1, r7
 801b420:	f7ff ff28 	bl	801b274 <checkint>
 801b424:	b930      	cbnz	r0, 801b434 <pow+0x154>
 801b426:	b006      	add	sp, #24
 801b428:	ecbd 8b0a 	vpop	{d8-d12}
 801b42c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b430:	f000 b9ee 	b.w	801b810 <__math_invalid>
 801b434:	2801      	cmp	r0, #1
 801b436:	bf14      	ite	ne
 801b438:	2000      	movne	r0, #0
 801b43a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 801b43e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801b442:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 801b446:	f3c5 020a 	ubfx	r2, r5, #0, #11
 801b44a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 801b44e:	2b7f      	cmp	r3, #127	; 0x7f
 801b450:	d92d      	bls.n	801b4ae <pow+0x1ce>
 801b452:	4b67      	ldr	r3, [pc, #412]	; (801b5f0 <pow+0x310>)
 801b454:	2000      	movs	r0, #0
 801b456:	429c      	cmp	r4, r3
 801b458:	bf08      	it	eq
 801b45a:	4286      	cmpeq	r6, r0
 801b45c:	f43f af7d 	beq.w	801b35a <pow+0x7a>
 801b460:	f240 31bd 	movw	r1, #957	; 0x3bd
 801b464:	428a      	cmp	r2, r1
 801b466:	d80c      	bhi.n	801b482 <pow+0x1a2>
 801b468:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801b46c:	42b0      	cmp	r0, r6
 801b46e:	41a3      	sbcs	r3, r4
 801b470:	d204      	bcs.n	801b47c <pow+0x19c>
 801b472:	ee31 0b00 	vadd.f64	d0, d1, d0
 801b476:	e79c      	b.n	801b3b2 <pow+0xd2>
 801b478:	2000      	movs	r0, #0
 801b47a:	e7e4      	b.n	801b446 <pow+0x166>
 801b47c:	ee30 0b41 	vsub.f64	d0, d0, d1
 801b480:	e797      	b.n	801b3b2 <pow+0xd2>
 801b482:	2e01      	cmp	r6, #1
 801b484:	eb74 0303 	sbcs.w	r3, r4, r3
 801b488:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801b48c:	bf34      	ite	cc
 801b48e:	2301      	movcc	r3, #1
 801b490:	2300      	movcs	r3, #0
 801b492:	4295      	cmp	r5, r2
 801b494:	bf8c      	ite	hi
 801b496:	2500      	movhi	r5, #0
 801b498:	2501      	movls	r5, #1
 801b49a:	42ab      	cmp	r3, r5
 801b49c:	f000 809d 	beq.w	801b5da <pow+0x2fa>
 801b4a0:	b006      	add	sp, #24
 801b4a2:	ecbd 8b0a 	vpop	{d8-d12}
 801b4a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b4aa:	f000 b991 	b.w	801b7d0 <__math_oflow>
 801b4ae:	f1bc 0f00 	cmp.w	ip, #0
 801b4b2:	d10b      	bne.n	801b4cc <pow+0x1ec>
 801b4b4:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 801b5e8 <pow+0x308>
 801b4b8:	ee20 7b07 	vmul.f64	d7, d0, d7
 801b4bc:	ec53 2b17 	vmov	r2, r3, d7
 801b4c0:	ee17 6a10 	vmov	r6, s14
 801b4c4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801b4c8:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 801b4cc:	4b4c      	ldr	r3, [pc, #304]	; (801b600 <pow+0x320>)
 801b4ce:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801b4d2:	4423      	add	r3, r4
 801b4d4:	f3c3 3246 	ubfx	r2, r3, #13, #7
 801b4d8:	1519      	asrs	r1, r3, #20
 801b4da:	0d1b      	lsrs	r3, r3, #20
 801b4dc:	051b      	lsls	r3, r3, #20
 801b4de:	eba4 0903 	sub.w	r9, r4, r3
 801b4e2:	4b48      	ldr	r3, [pc, #288]	; (801b604 <pow+0x324>)
 801b4e4:	ee04 1a10 	vmov	s8, r1
 801b4e8:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 801b4ec:	f1b6 0800 	subs.w	r8, r6, #0
 801b4f0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 801b4f4:	ec49 8b15 	vmov	d5, r8, r9
 801b4f8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 801b4fc:	eea5 6b07 	vfma.f64	d6, d5, d7
 801b500:	ed93 7b00 	vldr	d7, [r3]
 801b504:	ed93 5b02 	vldr	d5, [r3, #8]
 801b508:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 801b50c:	eea4 2b07 	vfma.f64	d2, d4, d7
 801b510:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 801b514:	ee36 ab02 	vadd.f64	d10, d6, d2
 801b518:	ee32 2b4a 	vsub.f64	d2, d2, d10
 801b51c:	eea4 7b05 	vfma.f64	d7, d4, d5
 801b520:	ed93 5b04 	vldr	d5, [r3, #16]
 801b524:	ee32 2b06 	vadd.f64	d2, d2, d6
 801b528:	ee37 7b02 	vadd.f64	d7, d7, d2
 801b52c:	ee26 5b05 	vmul.f64	d5, d6, d5
 801b530:	ed93 4b08 	vldr	d4, [r3, #32]
 801b534:	ee26 0b05 	vmul.f64	d0, d6, d5
 801b538:	eeb0 9b40 	vmov.f64	d9, d0
 801b53c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 801b540:	ed93 5b06 	vldr	d5, [r3, #24]
 801b544:	ee3a 8b00 	vadd.f64	d8, d10, d0
 801b548:	ee26 bb00 	vmul.f64	d11, d6, d0
 801b54c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 801b550:	eea6 5b04 	vfma.f64	d5, d6, d4
 801b554:	ee3a ab48 	vsub.f64	d10, d10, d8
 801b558:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 801b55c:	ee37 9b09 	vadd.f64	d9, d7, d9
 801b560:	ee3a ab00 	vadd.f64	d10, d10, d0
 801b564:	eea6 4b03 	vfma.f64	d4, d6, d3
 801b568:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801b56c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 801b570:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 801b574:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801b578:	eea0 4b03 	vfma.f64	d4, d0, d3
 801b57c:	eea0 5b04 	vfma.f64	d5, d0, d4
 801b580:	eeab ab05 	vfma.f64	d10, d11, d5
 801b584:	ee38 6b0a 	vadd.f64	d6, d8, d10
 801b588:	ee21 7b06 	vmul.f64	d7, d1, d6
 801b58c:	ee17 3a90 	vmov	r3, s15
 801b590:	eeb0 5b47 	vmov.f64	d5, d7
 801b594:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801b598:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 801b59c:	18b2      	adds	r2, r6, r2
 801b59e:	2a3e      	cmp	r2, #62	; 0x3e
 801b5a0:	ee91 5b06 	vfnms.f64	d5, d1, d6
 801b5a4:	ee38 8b46 	vsub.f64	d8, d8, d6
 801b5a8:	ee38 ab0a 	vadd.f64	d10, d8, d10
 801b5ac:	eea1 5b0a 	vfma.f64	d5, d1, d10
 801b5b0:	d92b      	bls.n	801b60a <pow+0x32a>
 801b5b2:	2a00      	cmp	r2, #0
 801b5b4:	da0b      	bge.n	801b5ce <pow+0x2ee>
 801b5b6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801b5ba:	ee37 0b00 	vadd.f64	d0, d7, d0
 801b5be:	2800      	cmp	r0, #0
 801b5c0:	f43f aef7 	beq.w	801b3b2 <pow+0xd2>
 801b5c4:	eeb1 0b40 	vneg.f64	d0, d0
 801b5c8:	e6f3      	b.n	801b3b2 <pow+0xd2>
 801b5ca:	2000      	movs	r0, #0
 801b5cc:	e77e      	b.n	801b4cc <pow+0x1ec>
 801b5ce:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 801b5d2:	d919      	bls.n	801b608 <pow+0x328>
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	f6bf af63 	bge.w	801b4a0 <pow+0x1c0>
 801b5da:	b006      	add	sp, #24
 801b5dc:	ecbd 8b0a 	vpop	{d8-d12}
 801b5e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b5e4:	f000 b8ec 	b.w	801b7c0 <__math_uflow>
 801b5e8:	00000000 	.word	0x00000000
 801b5ec:	43300000 	.word	0x43300000
 801b5f0:	3ff00000 	.word	0x3ff00000
 801b5f4:	fff00000 	.word	0xfff00000
 801b5f8:	ffe00000 	.word	0xffe00000
 801b5fc:	7fe00000 	.word	0x7fe00000
 801b600:	c0196aab 	.word	0xc0196aab
 801b604:	0801c308 	.word	0x0801c308
 801b608:	2600      	movs	r6, #0
 801b60a:	495d      	ldr	r1, [pc, #372]	; (801b780 <pow+0x4a0>)
 801b60c:	ed91 4b02 	vldr	d4, [r1, #8]
 801b610:	ed91 3b00 	vldr	d3, [r1]
 801b614:	eeb0 6b44 	vmov.f64	d6, d4
 801b618:	eea7 6b03 	vfma.f64	d6, d7, d3
 801b61c:	ee16 5a10 	vmov	r5, s12
 801b620:	ee36 6b44 	vsub.f64	d6, d6, d4
 801b624:	ed91 4b04 	vldr	d4, [r1, #16]
 801b628:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801b62c:	eea6 7b04 	vfma.f64	d7, d6, d4
 801b630:	eeb0 0b47 	vmov.f64	d0, d7
 801b634:	ed91 7b06 	vldr	d7, [r1, #24]
 801b638:	18dc      	adds	r4, r3, r3
 801b63a:	f104 030f 	add.w	r3, r4, #15
 801b63e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801b642:	eea6 0b07 	vfma.f64	d0, d6, d7
 801b646:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801b64a:	ee35 0b00 	vadd.f64	d0, d5, d0
 801b64e:	ee20 6b00 	vmul.f64	d6, d0, d0
 801b652:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 801b656:	ed91 5b08 	vldr	d5, [r1, #32]
 801b65a:	ee30 7b07 	vadd.f64	d7, d0, d7
 801b65e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801b662:	eea0 5b04 	vfma.f64	d5, d0, d4
 801b666:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801b66a:	eea6 7b05 	vfma.f64	d7, d6, d5
 801b66e:	ee26 6b06 	vmul.f64	d6, d6, d6
 801b672:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801b676:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801b67a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801b67e:	eea0 5b04 	vfma.f64	d5, d0, d4
 801b682:	1940      	adds	r0, r0, r5
 801b684:	2700      	movs	r7, #0
 801b686:	eb17 020c 	adds.w	r2, r7, ip
 801b68a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801b68e:	eea6 7b05 	vfma.f64	d7, d6, d5
 801b692:	2e00      	cmp	r6, #0
 801b694:	d15f      	bne.n	801b756 <pow+0x476>
 801b696:	42bd      	cmp	r5, r7
 801b698:	db13      	blt.n	801b6c2 <pow+0x3e2>
 801b69a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801b69e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801b6a2:	4610      	mov	r0, r2
 801b6a4:	ec41 0b10 	vmov	d0, r0, r1
 801b6a8:	eea7 0b00 	vfma.f64	d0, d7, d0
 801b6ac:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801b768 <pow+0x488>
 801b6b0:	ee20 0b07 	vmul.f64	d0, d0, d7
 801b6b4:	b006      	add	sp, #24
 801b6b6:	ecbd 8b0a 	vpop	{d8-d12}
 801b6ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b6be:	f000 b8bf 	b.w	801b840 <__math_check_oflow>
 801b6c2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801b6c6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801b6ca:	4610      	mov	r0, r2
 801b6cc:	ec41 0b15 	vmov	d5, r0, r1
 801b6d0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801b6d4:	ee27 6b05 	vmul.f64	d6, d7, d5
 801b6d8:	ee35 7b06 	vadd.f64	d7, d5, d6
 801b6dc:	eeb0 3bc7 	vabs.f64	d3, d7
 801b6e0:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801b6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6e8:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801b770 <pow+0x490>
 801b6ec:	d52a      	bpl.n	801b744 <pow+0x464>
 801b6ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801b6f2:	ee35 5b47 	vsub.f64	d5, d5, d7
 801b6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6fa:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 801b6fe:	ee35 6b06 	vadd.f64	d6, d5, d6
 801b702:	bf48      	it	mi
 801b704:	eeb0 4b43 	vmovmi.f64	d4, d3
 801b708:	ee37 3b04 	vadd.f64	d3, d7, d4
 801b70c:	ee34 5b43 	vsub.f64	d5, d4, d3
 801b710:	ee35 7b07 	vadd.f64	d7, d5, d7
 801b714:	ee37 7b06 	vadd.f64	d7, d7, d6
 801b718:	ee37 7b03 	vadd.f64	d7, d7, d3
 801b71c:	ee37 7b44 	vsub.f64	d7, d7, d4
 801b720:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b728:	d104      	bne.n	801b734 <pow+0x454>
 801b72a:	4632      	mov	r2, r6
 801b72c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801b730:	ec43 2b17 	vmov	d7, r2, r3
 801b734:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b738:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b73c:	ee26 6b00 	vmul.f64	d6, d6, d0
 801b740:	ed8d 6b04 	vstr	d6, [sp, #16]
 801b744:	ee27 0b00 	vmul.f64	d0, d7, d0
 801b748:	b006      	add	sp, #24
 801b74a:	ecbd 8b0a 	vpop	{d8-d12}
 801b74e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b752:	f000 b86c 	b.w	801b82e <__math_check_uflow>
 801b756:	ec43 2b10 	vmov	d0, r2, r3
 801b75a:	eea7 0b00 	vfma.f64	d0, d7, d0
 801b75e:	e628      	b.n	801b3b2 <pow+0xd2>
 801b760:	ed9f 0b05 	vldr	d0, [pc, #20]	; 801b778 <pow+0x498>
 801b764:	e625      	b.n	801b3b2 <pow+0xd2>
 801b766:	bf00      	nop
 801b768:	00000000 	.word	0x00000000
 801b76c:	7f000000 	.word	0x7f000000
 801b770:	00000000 	.word	0x00000000
 801b774:	00100000 	.word	0x00100000
	...
 801b780:	0801d350 	.word	0x0801d350

0801b784 <with_errno>:
 801b784:	b513      	push	{r0, r1, r4, lr}
 801b786:	4604      	mov	r4, r0
 801b788:	ed8d 0b00 	vstr	d0, [sp]
 801b78c:	f000 f874 	bl	801b878 <__errno>
 801b790:	ed9d 0b00 	vldr	d0, [sp]
 801b794:	6004      	str	r4, [r0, #0]
 801b796:	b002      	add	sp, #8
 801b798:	bd10      	pop	{r4, pc}

0801b79a <xflow>:
 801b79a:	b082      	sub	sp, #8
 801b79c:	b158      	cbz	r0, 801b7b6 <xflow+0x1c>
 801b79e:	eeb1 7b40 	vneg.f64	d7, d0
 801b7a2:	ed8d 7b00 	vstr	d7, [sp]
 801b7a6:	ed9d 7b00 	vldr	d7, [sp]
 801b7aa:	2022      	movs	r0, #34	; 0x22
 801b7ac:	ee20 0b07 	vmul.f64	d0, d0, d7
 801b7b0:	b002      	add	sp, #8
 801b7b2:	f7ff bfe7 	b.w	801b784 <with_errno>
 801b7b6:	eeb0 7b40 	vmov.f64	d7, d0
 801b7ba:	e7f2      	b.n	801b7a2 <xflow+0x8>
 801b7bc:	0000      	movs	r0, r0
	...

0801b7c0 <__math_uflow>:
 801b7c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b7c8 <__math_uflow+0x8>
 801b7c4:	f7ff bfe9 	b.w	801b79a <xflow>
 801b7c8:	00000000 	.word	0x00000000
 801b7cc:	10000000 	.word	0x10000000

0801b7d0 <__math_oflow>:
 801b7d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b7d8 <__math_oflow+0x8>
 801b7d4:	f7ff bfe1 	b.w	801b79a <xflow>
 801b7d8:	00000000 	.word	0x00000000
 801b7dc:	70000000 	.word	0x70000000

0801b7e0 <__math_divzero>:
 801b7e0:	b082      	sub	sp, #8
 801b7e2:	2800      	cmp	r0, #0
 801b7e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801b7e8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801b7ec:	fe06 7b07 	vseleq.f64	d7, d6, d7
 801b7f0:	ed8d 7b00 	vstr	d7, [sp]
 801b7f4:	ed9d 0b00 	vldr	d0, [sp]
 801b7f8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 801b808 <__math_divzero+0x28>
 801b7fc:	2022      	movs	r0, #34	; 0x22
 801b7fe:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801b802:	b002      	add	sp, #8
 801b804:	f7ff bfbe 	b.w	801b784 <with_errno>
	...

0801b810 <__math_invalid>:
 801b810:	eeb0 7b40 	vmov.f64	d7, d0
 801b814:	eeb4 7b47 	vcmp.f64	d7, d7
 801b818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b81c:	ee30 6b40 	vsub.f64	d6, d0, d0
 801b820:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801b824:	d602      	bvs.n	801b82c <__math_invalid+0x1c>
 801b826:	2021      	movs	r0, #33	; 0x21
 801b828:	f7ff bfac 	b.w	801b784 <with_errno>
 801b82c:	4770      	bx	lr

0801b82e <__math_check_uflow>:
 801b82e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801b832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b836:	d102      	bne.n	801b83e <__math_check_uflow+0x10>
 801b838:	2022      	movs	r0, #34	; 0x22
 801b83a:	f7ff bfa3 	b.w	801b784 <with_errno>
 801b83e:	4770      	bx	lr

0801b840 <__math_check_oflow>:
 801b840:	ed9f 6b07 	vldr	d6, [pc, #28]	; 801b860 <__math_check_oflow+0x20>
 801b844:	eeb0 7bc0 	vabs.f64	d7, d0
 801b848:	eeb4 7b46 	vcmp.f64	d7, d6
 801b84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b850:	dd02      	ble.n	801b858 <__math_check_oflow+0x18>
 801b852:	2022      	movs	r0, #34	; 0x22
 801b854:	f7ff bf96 	b.w	801b784 <with_errno>
 801b858:	4770      	bx	lr
 801b85a:	bf00      	nop
 801b85c:	f3af 8000 	nop.w
 801b860:	ffffffff 	.word	0xffffffff
 801b864:	7fefffff 	.word	0x7fefffff

0801b868 <abort>:
 801b868:	b508      	push	{r3, lr}
 801b86a:	2006      	movs	r0, #6
 801b86c:	f000 f9f2 	bl	801bc54 <raise>
 801b870:	2001      	movs	r0, #1
 801b872:	f7e7 fecd 	bl	8003610 <_exit>
	...

0801b878 <__errno>:
 801b878:	4b01      	ldr	r3, [pc, #4]	; (801b880 <__errno+0x8>)
 801b87a:	6818      	ldr	r0, [r3, #0]
 801b87c:	4770      	bx	lr
 801b87e:	bf00      	nop
 801b880:	24000014 	.word	0x24000014

0801b884 <__libc_init_array>:
 801b884:	b570      	push	{r4, r5, r6, lr}
 801b886:	4d0d      	ldr	r5, [pc, #52]	; (801b8bc <__libc_init_array+0x38>)
 801b888:	4c0d      	ldr	r4, [pc, #52]	; (801b8c0 <__libc_init_array+0x3c>)
 801b88a:	1b64      	subs	r4, r4, r5
 801b88c:	10a4      	asrs	r4, r4, #2
 801b88e:	2600      	movs	r6, #0
 801b890:	42a6      	cmp	r6, r4
 801b892:	d109      	bne.n	801b8a8 <__libc_init_array+0x24>
 801b894:	4d0b      	ldr	r5, [pc, #44]	; (801b8c4 <__libc_init_array+0x40>)
 801b896:	4c0c      	ldr	r4, [pc, #48]	; (801b8c8 <__libc_init_array+0x44>)
 801b898:	f000 fa04 	bl	801bca4 <_init>
 801b89c:	1b64      	subs	r4, r4, r5
 801b89e:	10a4      	asrs	r4, r4, #2
 801b8a0:	2600      	movs	r6, #0
 801b8a2:	42a6      	cmp	r6, r4
 801b8a4:	d105      	bne.n	801b8b2 <__libc_init_array+0x2e>
 801b8a6:	bd70      	pop	{r4, r5, r6, pc}
 801b8a8:	f855 3b04 	ldr.w	r3, [r5], #4
 801b8ac:	4798      	blx	r3
 801b8ae:	3601      	adds	r6, #1
 801b8b0:	e7ee      	b.n	801b890 <__libc_init_array+0xc>
 801b8b2:	f855 3b04 	ldr.w	r3, [r5], #4
 801b8b6:	4798      	blx	r3
 801b8b8:	3601      	adds	r6, #1
 801b8ba:	e7f2      	b.n	801b8a2 <__libc_init_array+0x1e>
 801b8bc:	0801dc28 	.word	0x0801dc28
 801b8c0:	0801dc28 	.word	0x0801dc28
 801b8c4:	0801dc28 	.word	0x0801dc28
 801b8c8:	0801dc30 	.word	0x0801dc30

0801b8cc <__retarget_lock_acquire_recursive>:
 801b8cc:	4770      	bx	lr

0801b8ce <__retarget_lock_release_recursive>:
 801b8ce:	4770      	bx	lr

0801b8d0 <malloc>:
 801b8d0:	4b02      	ldr	r3, [pc, #8]	; (801b8dc <malloc+0xc>)
 801b8d2:	4601      	mov	r1, r0
 801b8d4:	6818      	ldr	r0, [r3, #0]
 801b8d6:	f000 b8a7 	b.w	801ba28 <_malloc_r>
 801b8da:	bf00      	nop
 801b8dc:	24000014 	.word	0x24000014

0801b8e0 <free>:
 801b8e0:	4b02      	ldr	r3, [pc, #8]	; (801b8ec <free+0xc>)
 801b8e2:	4601      	mov	r1, r0
 801b8e4:	6818      	ldr	r0, [r3, #0]
 801b8e6:	f000 b833 	b.w	801b950 <_free_r>
 801b8ea:	bf00      	nop
 801b8ec:	24000014 	.word	0x24000014

0801b8f0 <memcpy>:
 801b8f0:	440a      	add	r2, r1
 801b8f2:	4291      	cmp	r1, r2
 801b8f4:	f100 33ff 	add.w	r3, r0, #4294967295
 801b8f8:	d100      	bne.n	801b8fc <memcpy+0xc>
 801b8fa:	4770      	bx	lr
 801b8fc:	b510      	push	{r4, lr}
 801b8fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b902:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b906:	4291      	cmp	r1, r2
 801b908:	d1f9      	bne.n	801b8fe <memcpy+0xe>
 801b90a:	bd10      	pop	{r4, pc}

0801b90c <memmove>:
 801b90c:	4288      	cmp	r0, r1
 801b90e:	b510      	push	{r4, lr}
 801b910:	eb01 0402 	add.w	r4, r1, r2
 801b914:	d902      	bls.n	801b91c <memmove+0x10>
 801b916:	4284      	cmp	r4, r0
 801b918:	4623      	mov	r3, r4
 801b91a:	d807      	bhi.n	801b92c <memmove+0x20>
 801b91c:	1e43      	subs	r3, r0, #1
 801b91e:	42a1      	cmp	r1, r4
 801b920:	d008      	beq.n	801b934 <memmove+0x28>
 801b922:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b926:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b92a:	e7f8      	b.n	801b91e <memmove+0x12>
 801b92c:	4402      	add	r2, r0
 801b92e:	4601      	mov	r1, r0
 801b930:	428a      	cmp	r2, r1
 801b932:	d100      	bne.n	801b936 <memmove+0x2a>
 801b934:	bd10      	pop	{r4, pc}
 801b936:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b93a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b93e:	e7f7      	b.n	801b930 <memmove+0x24>

0801b940 <memset>:
 801b940:	4402      	add	r2, r0
 801b942:	4603      	mov	r3, r0
 801b944:	4293      	cmp	r3, r2
 801b946:	d100      	bne.n	801b94a <memset+0xa>
 801b948:	4770      	bx	lr
 801b94a:	f803 1b01 	strb.w	r1, [r3], #1
 801b94e:	e7f9      	b.n	801b944 <memset+0x4>

0801b950 <_free_r>:
 801b950:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b952:	2900      	cmp	r1, #0
 801b954:	d044      	beq.n	801b9e0 <_free_r+0x90>
 801b956:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b95a:	9001      	str	r0, [sp, #4]
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	f1a1 0404 	sub.w	r4, r1, #4
 801b962:	bfb8      	it	lt
 801b964:	18e4      	addlt	r4, r4, r3
 801b966:	f000 f991 	bl	801bc8c <__malloc_lock>
 801b96a:	4a1e      	ldr	r2, [pc, #120]	; (801b9e4 <_free_r+0x94>)
 801b96c:	9801      	ldr	r0, [sp, #4]
 801b96e:	6813      	ldr	r3, [r2, #0]
 801b970:	b933      	cbnz	r3, 801b980 <_free_r+0x30>
 801b972:	6063      	str	r3, [r4, #4]
 801b974:	6014      	str	r4, [r2, #0]
 801b976:	b003      	add	sp, #12
 801b978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b97c:	f000 b98c 	b.w	801bc98 <__malloc_unlock>
 801b980:	42a3      	cmp	r3, r4
 801b982:	d908      	bls.n	801b996 <_free_r+0x46>
 801b984:	6825      	ldr	r5, [r4, #0]
 801b986:	1961      	adds	r1, r4, r5
 801b988:	428b      	cmp	r3, r1
 801b98a:	bf01      	itttt	eq
 801b98c:	6819      	ldreq	r1, [r3, #0]
 801b98e:	685b      	ldreq	r3, [r3, #4]
 801b990:	1949      	addeq	r1, r1, r5
 801b992:	6021      	streq	r1, [r4, #0]
 801b994:	e7ed      	b.n	801b972 <_free_r+0x22>
 801b996:	461a      	mov	r2, r3
 801b998:	685b      	ldr	r3, [r3, #4]
 801b99a:	b10b      	cbz	r3, 801b9a0 <_free_r+0x50>
 801b99c:	42a3      	cmp	r3, r4
 801b99e:	d9fa      	bls.n	801b996 <_free_r+0x46>
 801b9a0:	6811      	ldr	r1, [r2, #0]
 801b9a2:	1855      	adds	r5, r2, r1
 801b9a4:	42a5      	cmp	r5, r4
 801b9a6:	d10b      	bne.n	801b9c0 <_free_r+0x70>
 801b9a8:	6824      	ldr	r4, [r4, #0]
 801b9aa:	4421      	add	r1, r4
 801b9ac:	1854      	adds	r4, r2, r1
 801b9ae:	42a3      	cmp	r3, r4
 801b9b0:	6011      	str	r1, [r2, #0]
 801b9b2:	d1e0      	bne.n	801b976 <_free_r+0x26>
 801b9b4:	681c      	ldr	r4, [r3, #0]
 801b9b6:	685b      	ldr	r3, [r3, #4]
 801b9b8:	6053      	str	r3, [r2, #4]
 801b9ba:	4421      	add	r1, r4
 801b9bc:	6011      	str	r1, [r2, #0]
 801b9be:	e7da      	b.n	801b976 <_free_r+0x26>
 801b9c0:	d902      	bls.n	801b9c8 <_free_r+0x78>
 801b9c2:	230c      	movs	r3, #12
 801b9c4:	6003      	str	r3, [r0, #0]
 801b9c6:	e7d6      	b.n	801b976 <_free_r+0x26>
 801b9c8:	6825      	ldr	r5, [r4, #0]
 801b9ca:	1961      	adds	r1, r4, r5
 801b9cc:	428b      	cmp	r3, r1
 801b9ce:	bf04      	itt	eq
 801b9d0:	6819      	ldreq	r1, [r3, #0]
 801b9d2:	685b      	ldreq	r3, [r3, #4]
 801b9d4:	6063      	str	r3, [r4, #4]
 801b9d6:	bf04      	itt	eq
 801b9d8:	1949      	addeq	r1, r1, r5
 801b9da:	6021      	streq	r1, [r4, #0]
 801b9dc:	6054      	str	r4, [r2, #4]
 801b9de:	e7ca      	b.n	801b976 <_free_r+0x26>
 801b9e0:	b003      	add	sp, #12
 801b9e2:	bd30      	pop	{r4, r5, pc}
 801b9e4:	24007018 	.word	0x24007018

0801b9e8 <sbrk_aligned>:
 801b9e8:	b570      	push	{r4, r5, r6, lr}
 801b9ea:	4e0e      	ldr	r6, [pc, #56]	; (801ba24 <sbrk_aligned+0x3c>)
 801b9ec:	460c      	mov	r4, r1
 801b9ee:	6831      	ldr	r1, [r6, #0]
 801b9f0:	4605      	mov	r5, r0
 801b9f2:	b911      	cbnz	r1, 801b9fa <sbrk_aligned+0x12>
 801b9f4:	f000 f8f6 	bl	801bbe4 <_sbrk_r>
 801b9f8:	6030      	str	r0, [r6, #0]
 801b9fa:	4621      	mov	r1, r4
 801b9fc:	4628      	mov	r0, r5
 801b9fe:	f000 f8f1 	bl	801bbe4 <_sbrk_r>
 801ba02:	1c43      	adds	r3, r0, #1
 801ba04:	d00a      	beq.n	801ba1c <sbrk_aligned+0x34>
 801ba06:	1cc4      	adds	r4, r0, #3
 801ba08:	f024 0403 	bic.w	r4, r4, #3
 801ba0c:	42a0      	cmp	r0, r4
 801ba0e:	d007      	beq.n	801ba20 <sbrk_aligned+0x38>
 801ba10:	1a21      	subs	r1, r4, r0
 801ba12:	4628      	mov	r0, r5
 801ba14:	f000 f8e6 	bl	801bbe4 <_sbrk_r>
 801ba18:	3001      	adds	r0, #1
 801ba1a:	d101      	bne.n	801ba20 <sbrk_aligned+0x38>
 801ba1c:	f04f 34ff 	mov.w	r4, #4294967295
 801ba20:	4620      	mov	r0, r4
 801ba22:	bd70      	pop	{r4, r5, r6, pc}
 801ba24:	2400701c 	.word	0x2400701c

0801ba28 <_malloc_r>:
 801ba28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba2c:	1ccd      	adds	r5, r1, #3
 801ba2e:	f025 0503 	bic.w	r5, r5, #3
 801ba32:	3508      	adds	r5, #8
 801ba34:	2d0c      	cmp	r5, #12
 801ba36:	bf38      	it	cc
 801ba38:	250c      	movcc	r5, #12
 801ba3a:	2d00      	cmp	r5, #0
 801ba3c:	4607      	mov	r7, r0
 801ba3e:	db01      	blt.n	801ba44 <_malloc_r+0x1c>
 801ba40:	42a9      	cmp	r1, r5
 801ba42:	d905      	bls.n	801ba50 <_malloc_r+0x28>
 801ba44:	230c      	movs	r3, #12
 801ba46:	603b      	str	r3, [r7, #0]
 801ba48:	2600      	movs	r6, #0
 801ba4a:	4630      	mov	r0, r6
 801ba4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba50:	4e2e      	ldr	r6, [pc, #184]	; (801bb0c <_malloc_r+0xe4>)
 801ba52:	f000 f91b 	bl	801bc8c <__malloc_lock>
 801ba56:	6833      	ldr	r3, [r6, #0]
 801ba58:	461c      	mov	r4, r3
 801ba5a:	bb34      	cbnz	r4, 801baaa <_malloc_r+0x82>
 801ba5c:	4629      	mov	r1, r5
 801ba5e:	4638      	mov	r0, r7
 801ba60:	f7ff ffc2 	bl	801b9e8 <sbrk_aligned>
 801ba64:	1c43      	adds	r3, r0, #1
 801ba66:	4604      	mov	r4, r0
 801ba68:	d14d      	bne.n	801bb06 <_malloc_r+0xde>
 801ba6a:	6834      	ldr	r4, [r6, #0]
 801ba6c:	4626      	mov	r6, r4
 801ba6e:	2e00      	cmp	r6, #0
 801ba70:	d140      	bne.n	801baf4 <_malloc_r+0xcc>
 801ba72:	6823      	ldr	r3, [r4, #0]
 801ba74:	4631      	mov	r1, r6
 801ba76:	4638      	mov	r0, r7
 801ba78:	eb04 0803 	add.w	r8, r4, r3
 801ba7c:	f000 f8b2 	bl	801bbe4 <_sbrk_r>
 801ba80:	4580      	cmp	r8, r0
 801ba82:	d13a      	bne.n	801bafa <_malloc_r+0xd2>
 801ba84:	6821      	ldr	r1, [r4, #0]
 801ba86:	3503      	adds	r5, #3
 801ba88:	1a6d      	subs	r5, r5, r1
 801ba8a:	f025 0503 	bic.w	r5, r5, #3
 801ba8e:	3508      	adds	r5, #8
 801ba90:	2d0c      	cmp	r5, #12
 801ba92:	bf38      	it	cc
 801ba94:	250c      	movcc	r5, #12
 801ba96:	4629      	mov	r1, r5
 801ba98:	4638      	mov	r0, r7
 801ba9a:	f7ff ffa5 	bl	801b9e8 <sbrk_aligned>
 801ba9e:	3001      	adds	r0, #1
 801baa0:	d02b      	beq.n	801bafa <_malloc_r+0xd2>
 801baa2:	6823      	ldr	r3, [r4, #0]
 801baa4:	442b      	add	r3, r5
 801baa6:	6023      	str	r3, [r4, #0]
 801baa8:	e00e      	b.n	801bac8 <_malloc_r+0xa0>
 801baaa:	6822      	ldr	r2, [r4, #0]
 801baac:	1b52      	subs	r2, r2, r5
 801baae:	d41e      	bmi.n	801baee <_malloc_r+0xc6>
 801bab0:	2a0b      	cmp	r2, #11
 801bab2:	d916      	bls.n	801bae2 <_malloc_r+0xba>
 801bab4:	1961      	adds	r1, r4, r5
 801bab6:	42a3      	cmp	r3, r4
 801bab8:	6025      	str	r5, [r4, #0]
 801baba:	bf18      	it	ne
 801babc:	6059      	strne	r1, [r3, #4]
 801babe:	6863      	ldr	r3, [r4, #4]
 801bac0:	bf08      	it	eq
 801bac2:	6031      	streq	r1, [r6, #0]
 801bac4:	5162      	str	r2, [r4, r5]
 801bac6:	604b      	str	r3, [r1, #4]
 801bac8:	4638      	mov	r0, r7
 801baca:	f104 060b 	add.w	r6, r4, #11
 801bace:	f000 f8e3 	bl	801bc98 <__malloc_unlock>
 801bad2:	f026 0607 	bic.w	r6, r6, #7
 801bad6:	1d23      	adds	r3, r4, #4
 801bad8:	1af2      	subs	r2, r6, r3
 801bada:	d0b6      	beq.n	801ba4a <_malloc_r+0x22>
 801badc:	1b9b      	subs	r3, r3, r6
 801bade:	50a3      	str	r3, [r4, r2]
 801bae0:	e7b3      	b.n	801ba4a <_malloc_r+0x22>
 801bae2:	6862      	ldr	r2, [r4, #4]
 801bae4:	42a3      	cmp	r3, r4
 801bae6:	bf0c      	ite	eq
 801bae8:	6032      	streq	r2, [r6, #0]
 801baea:	605a      	strne	r2, [r3, #4]
 801baec:	e7ec      	b.n	801bac8 <_malloc_r+0xa0>
 801baee:	4623      	mov	r3, r4
 801baf0:	6864      	ldr	r4, [r4, #4]
 801baf2:	e7b2      	b.n	801ba5a <_malloc_r+0x32>
 801baf4:	4634      	mov	r4, r6
 801baf6:	6876      	ldr	r6, [r6, #4]
 801baf8:	e7b9      	b.n	801ba6e <_malloc_r+0x46>
 801bafa:	230c      	movs	r3, #12
 801bafc:	603b      	str	r3, [r7, #0]
 801bafe:	4638      	mov	r0, r7
 801bb00:	f000 f8ca 	bl	801bc98 <__malloc_unlock>
 801bb04:	e7a1      	b.n	801ba4a <_malloc_r+0x22>
 801bb06:	6025      	str	r5, [r4, #0]
 801bb08:	e7de      	b.n	801bac8 <_malloc_r+0xa0>
 801bb0a:	bf00      	nop
 801bb0c:	24007018 	.word	0x24007018

0801bb10 <cleanup_glue>:
 801bb10:	b538      	push	{r3, r4, r5, lr}
 801bb12:	460c      	mov	r4, r1
 801bb14:	6809      	ldr	r1, [r1, #0]
 801bb16:	4605      	mov	r5, r0
 801bb18:	b109      	cbz	r1, 801bb1e <cleanup_glue+0xe>
 801bb1a:	f7ff fff9 	bl	801bb10 <cleanup_glue>
 801bb1e:	4621      	mov	r1, r4
 801bb20:	4628      	mov	r0, r5
 801bb22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bb26:	f7ff bf13 	b.w	801b950 <_free_r>
	...

0801bb2c <_reclaim_reent>:
 801bb2c:	4b2c      	ldr	r3, [pc, #176]	; (801bbe0 <_reclaim_reent+0xb4>)
 801bb2e:	681b      	ldr	r3, [r3, #0]
 801bb30:	4283      	cmp	r3, r0
 801bb32:	b570      	push	{r4, r5, r6, lr}
 801bb34:	4604      	mov	r4, r0
 801bb36:	d051      	beq.n	801bbdc <_reclaim_reent+0xb0>
 801bb38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801bb3a:	b143      	cbz	r3, 801bb4e <_reclaim_reent+0x22>
 801bb3c:	68db      	ldr	r3, [r3, #12]
 801bb3e:	2b00      	cmp	r3, #0
 801bb40:	d14a      	bne.n	801bbd8 <_reclaim_reent+0xac>
 801bb42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bb44:	6819      	ldr	r1, [r3, #0]
 801bb46:	b111      	cbz	r1, 801bb4e <_reclaim_reent+0x22>
 801bb48:	4620      	mov	r0, r4
 801bb4a:	f7ff ff01 	bl	801b950 <_free_r>
 801bb4e:	6961      	ldr	r1, [r4, #20]
 801bb50:	b111      	cbz	r1, 801bb58 <_reclaim_reent+0x2c>
 801bb52:	4620      	mov	r0, r4
 801bb54:	f7ff fefc 	bl	801b950 <_free_r>
 801bb58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801bb5a:	b111      	cbz	r1, 801bb62 <_reclaim_reent+0x36>
 801bb5c:	4620      	mov	r0, r4
 801bb5e:	f7ff fef7 	bl	801b950 <_free_r>
 801bb62:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801bb64:	b111      	cbz	r1, 801bb6c <_reclaim_reent+0x40>
 801bb66:	4620      	mov	r0, r4
 801bb68:	f7ff fef2 	bl	801b950 <_free_r>
 801bb6c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801bb6e:	b111      	cbz	r1, 801bb76 <_reclaim_reent+0x4a>
 801bb70:	4620      	mov	r0, r4
 801bb72:	f7ff feed 	bl	801b950 <_free_r>
 801bb76:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801bb78:	b111      	cbz	r1, 801bb80 <_reclaim_reent+0x54>
 801bb7a:	4620      	mov	r0, r4
 801bb7c:	f7ff fee8 	bl	801b950 <_free_r>
 801bb80:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801bb82:	b111      	cbz	r1, 801bb8a <_reclaim_reent+0x5e>
 801bb84:	4620      	mov	r0, r4
 801bb86:	f7ff fee3 	bl	801b950 <_free_r>
 801bb8a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801bb8c:	b111      	cbz	r1, 801bb94 <_reclaim_reent+0x68>
 801bb8e:	4620      	mov	r0, r4
 801bb90:	f7ff fede 	bl	801b950 <_free_r>
 801bb94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bb96:	b111      	cbz	r1, 801bb9e <_reclaim_reent+0x72>
 801bb98:	4620      	mov	r0, r4
 801bb9a:	f7ff fed9 	bl	801b950 <_free_r>
 801bb9e:	69a3      	ldr	r3, [r4, #24]
 801bba0:	b1e3      	cbz	r3, 801bbdc <_reclaim_reent+0xb0>
 801bba2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801bba4:	4620      	mov	r0, r4
 801bba6:	4798      	blx	r3
 801bba8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801bbaa:	b1b9      	cbz	r1, 801bbdc <_reclaim_reent+0xb0>
 801bbac:	4620      	mov	r0, r4
 801bbae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bbb2:	f7ff bfad 	b.w	801bb10 <cleanup_glue>
 801bbb6:	5949      	ldr	r1, [r1, r5]
 801bbb8:	b941      	cbnz	r1, 801bbcc <_reclaim_reent+0xa0>
 801bbba:	3504      	adds	r5, #4
 801bbbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bbbe:	2d80      	cmp	r5, #128	; 0x80
 801bbc0:	68d9      	ldr	r1, [r3, #12]
 801bbc2:	d1f8      	bne.n	801bbb6 <_reclaim_reent+0x8a>
 801bbc4:	4620      	mov	r0, r4
 801bbc6:	f7ff fec3 	bl	801b950 <_free_r>
 801bbca:	e7ba      	b.n	801bb42 <_reclaim_reent+0x16>
 801bbcc:	680e      	ldr	r6, [r1, #0]
 801bbce:	4620      	mov	r0, r4
 801bbd0:	f7ff febe 	bl	801b950 <_free_r>
 801bbd4:	4631      	mov	r1, r6
 801bbd6:	e7ef      	b.n	801bbb8 <_reclaim_reent+0x8c>
 801bbd8:	2500      	movs	r5, #0
 801bbda:	e7ef      	b.n	801bbbc <_reclaim_reent+0x90>
 801bbdc:	bd70      	pop	{r4, r5, r6, pc}
 801bbde:	bf00      	nop
 801bbe0:	24000014 	.word	0x24000014

0801bbe4 <_sbrk_r>:
 801bbe4:	b538      	push	{r3, r4, r5, lr}
 801bbe6:	4d06      	ldr	r5, [pc, #24]	; (801bc00 <_sbrk_r+0x1c>)
 801bbe8:	2300      	movs	r3, #0
 801bbea:	4604      	mov	r4, r0
 801bbec:	4608      	mov	r0, r1
 801bbee:	602b      	str	r3, [r5, #0]
 801bbf0:	f7e7 fd14 	bl	800361c <_sbrk>
 801bbf4:	1c43      	adds	r3, r0, #1
 801bbf6:	d102      	bne.n	801bbfe <_sbrk_r+0x1a>
 801bbf8:	682b      	ldr	r3, [r5, #0]
 801bbfa:	b103      	cbz	r3, 801bbfe <_sbrk_r+0x1a>
 801bbfc:	6023      	str	r3, [r4, #0]
 801bbfe:	bd38      	pop	{r3, r4, r5, pc}
 801bc00:	24007020 	.word	0x24007020

0801bc04 <_raise_r>:
 801bc04:	291f      	cmp	r1, #31
 801bc06:	b538      	push	{r3, r4, r5, lr}
 801bc08:	4604      	mov	r4, r0
 801bc0a:	460d      	mov	r5, r1
 801bc0c:	d904      	bls.n	801bc18 <_raise_r+0x14>
 801bc0e:	2316      	movs	r3, #22
 801bc10:	6003      	str	r3, [r0, #0]
 801bc12:	f04f 30ff 	mov.w	r0, #4294967295
 801bc16:	bd38      	pop	{r3, r4, r5, pc}
 801bc18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801bc1a:	b112      	cbz	r2, 801bc22 <_raise_r+0x1e>
 801bc1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bc20:	b94b      	cbnz	r3, 801bc36 <_raise_r+0x32>
 801bc22:	4620      	mov	r0, r4
 801bc24:	f000 f830 	bl	801bc88 <_getpid_r>
 801bc28:	462a      	mov	r2, r5
 801bc2a:	4601      	mov	r1, r0
 801bc2c:	4620      	mov	r0, r4
 801bc2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bc32:	f000 b817 	b.w	801bc64 <_kill_r>
 801bc36:	2b01      	cmp	r3, #1
 801bc38:	d00a      	beq.n	801bc50 <_raise_r+0x4c>
 801bc3a:	1c59      	adds	r1, r3, #1
 801bc3c:	d103      	bne.n	801bc46 <_raise_r+0x42>
 801bc3e:	2316      	movs	r3, #22
 801bc40:	6003      	str	r3, [r0, #0]
 801bc42:	2001      	movs	r0, #1
 801bc44:	e7e7      	b.n	801bc16 <_raise_r+0x12>
 801bc46:	2400      	movs	r4, #0
 801bc48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bc4c:	4628      	mov	r0, r5
 801bc4e:	4798      	blx	r3
 801bc50:	2000      	movs	r0, #0
 801bc52:	e7e0      	b.n	801bc16 <_raise_r+0x12>

0801bc54 <raise>:
 801bc54:	4b02      	ldr	r3, [pc, #8]	; (801bc60 <raise+0xc>)
 801bc56:	4601      	mov	r1, r0
 801bc58:	6818      	ldr	r0, [r3, #0]
 801bc5a:	f7ff bfd3 	b.w	801bc04 <_raise_r>
 801bc5e:	bf00      	nop
 801bc60:	24000014 	.word	0x24000014

0801bc64 <_kill_r>:
 801bc64:	b538      	push	{r3, r4, r5, lr}
 801bc66:	4d07      	ldr	r5, [pc, #28]	; (801bc84 <_kill_r+0x20>)
 801bc68:	2300      	movs	r3, #0
 801bc6a:	4604      	mov	r4, r0
 801bc6c:	4608      	mov	r0, r1
 801bc6e:	4611      	mov	r1, r2
 801bc70:	602b      	str	r3, [r5, #0]
 801bc72:	f7e7 fcc5 	bl	8003600 <_kill>
 801bc76:	1c43      	adds	r3, r0, #1
 801bc78:	d102      	bne.n	801bc80 <_kill_r+0x1c>
 801bc7a:	682b      	ldr	r3, [r5, #0]
 801bc7c:	b103      	cbz	r3, 801bc80 <_kill_r+0x1c>
 801bc7e:	6023      	str	r3, [r4, #0]
 801bc80:	bd38      	pop	{r3, r4, r5, pc}
 801bc82:	bf00      	nop
 801bc84:	24007020 	.word	0x24007020

0801bc88 <_getpid_r>:
 801bc88:	f7e7 bcb8 	b.w	80035fc <_getpid>

0801bc8c <__malloc_lock>:
 801bc8c:	4801      	ldr	r0, [pc, #4]	; (801bc94 <__malloc_lock+0x8>)
 801bc8e:	f7ff be1d 	b.w	801b8cc <__retarget_lock_acquire_recursive>
 801bc92:	bf00      	nop
 801bc94:	24007014 	.word	0x24007014

0801bc98 <__malloc_unlock>:
 801bc98:	4801      	ldr	r0, [pc, #4]	; (801bca0 <__malloc_unlock+0x8>)
 801bc9a:	f7ff be18 	b.w	801b8ce <__retarget_lock_release_recursive>
 801bc9e:	bf00      	nop
 801bca0:	24007014 	.word	0x24007014

0801bca4 <_init>:
 801bca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bca6:	bf00      	nop
 801bca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bcaa:	bc08      	pop	{r3}
 801bcac:	469e      	mov	lr, r3
 801bcae:	4770      	bx	lr

0801bcb0 <_fini>:
 801bcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcb2:	bf00      	nop
 801bcb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bcb6:	bc08      	pop	{r3}
 801bcb8:	469e      	mov	lr, r3
 801bcba:	4770      	bx	lr
