
Envirobot_STM32_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ef1c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000700  0801f1c0  0801f1c0  000201c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f8c0  0801f8c0  000208c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801f8c8  0801f8c8  000208c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0801f8d0  0801f8d0  000208d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  0801f8d8  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000074e4  24000068  0801f93c  00021068  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400754c  0801f93c  0002154c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00021064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0037013b  00000000  00000000  00021092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00010efe  00000000  00000000  003911cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00069b42  00000000  00000000  003a20cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003d88  00000000  00000000  0040bc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000ba0d  00000000  00000000  0040f998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00012318  00000000  00000000  0041b3a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00081120  00000000  00000000  0042d6bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00244e90  00000000  00000000  004ae7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  006f366d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000d33c  00000000  00000000  006f36b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000007f  00000000  00000000  007009ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000068 	.word	0x24000068
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801f1a4 	.word	0x0801f1a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400006c 	.word	0x2400006c
 80002dc:	0801f1a4 	.word	0x0801f1a4

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <__aeabi_frsub>:
 80002f4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002f8:	e002      	b.n	8000300 <__addsf3>
 80002fa:	bf00      	nop

080002fc <__aeabi_fsub>:
 80002fc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000300 <__addsf3>:
 8000300:	0042      	lsls	r2, r0, #1
 8000302:	bf1f      	itttt	ne
 8000304:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000308:	ea92 0f03 	teqne	r2, r3
 800030c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000310:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000314:	d06a      	beq.n	80003ec <__addsf3+0xec>
 8000316:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800031a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800031e:	bfc1      	itttt	gt
 8000320:	18d2      	addgt	r2, r2, r3
 8000322:	4041      	eorgt	r1, r0
 8000324:	4048      	eorgt	r0, r1
 8000326:	4041      	eorgt	r1, r0
 8000328:	bfb8      	it	lt
 800032a:	425b      	neglt	r3, r3
 800032c:	2b19      	cmp	r3, #25
 800032e:	bf88      	it	hi
 8000330:	4770      	bxhi	lr
 8000332:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000336:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800033a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800033e:	bf18      	it	ne
 8000340:	4240      	negne	r0, r0
 8000342:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000346:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800034a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800034e:	bf18      	it	ne
 8000350:	4249      	negne	r1, r1
 8000352:	ea92 0f03 	teq	r2, r3
 8000356:	d03f      	beq.n	80003d8 <__addsf3+0xd8>
 8000358:	f1a2 0201 	sub.w	r2, r2, #1
 800035c:	fa41 fc03 	asr.w	ip, r1, r3
 8000360:	eb10 000c 	adds.w	r0, r0, ip
 8000364:	f1c3 0320 	rsb	r3, r3, #32
 8000368:	fa01 f103 	lsl.w	r1, r1, r3
 800036c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000370:	d502      	bpl.n	8000378 <__addsf3+0x78>
 8000372:	4249      	negs	r1, r1
 8000374:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000378:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800037c:	d313      	bcc.n	80003a6 <__addsf3+0xa6>
 800037e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000382:	d306      	bcc.n	8000392 <__addsf3+0x92>
 8000384:	0840      	lsrs	r0, r0, #1
 8000386:	ea4f 0131 	mov.w	r1, r1, rrx
 800038a:	f102 0201 	add.w	r2, r2, #1
 800038e:	2afe      	cmp	r2, #254	@ 0xfe
 8000390:	d251      	bcs.n	8000436 <__addsf3+0x136>
 8000392:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000396:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800039a:	bf08      	it	eq
 800039c:	f020 0001 	biceq.w	r0, r0, #1
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	4770      	bx	lr
 80003a6:	0049      	lsls	r1, r1, #1
 80003a8:	eb40 0000 	adc.w	r0, r0, r0
 80003ac:	3a01      	subs	r2, #1
 80003ae:	bf28      	it	cs
 80003b0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80003b4:	d2ed      	bcs.n	8000392 <__addsf3+0x92>
 80003b6:	fab0 fc80 	clz	ip, r0
 80003ba:	f1ac 0c08 	sub.w	ip, ip, #8
 80003be:	ebb2 020c 	subs.w	r2, r2, ip
 80003c2:	fa00 f00c 	lsl.w	r0, r0, ip
 80003c6:	bfaa      	itet	ge
 80003c8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003cc:	4252      	neglt	r2, r2
 80003ce:	4318      	orrge	r0, r3
 80003d0:	bfbc      	itt	lt
 80003d2:	40d0      	lsrlt	r0, r2
 80003d4:	4318      	orrlt	r0, r3
 80003d6:	4770      	bx	lr
 80003d8:	f092 0f00 	teq	r2, #0
 80003dc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003e0:	bf06      	itte	eq
 80003e2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003e6:	3201      	addeq	r2, #1
 80003e8:	3b01      	subne	r3, #1
 80003ea:	e7b5      	b.n	8000358 <__addsf3+0x58>
 80003ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003f4:	bf18      	it	ne
 80003f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003fa:	d021      	beq.n	8000440 <__addsf3+0x140>
 80003fc:	ea92 0f03 	teq	r2, r3
 8000400:	d004      	beq.n	800040c <__addsf3+0x10c>
 8000402:	f092 0f00 	teq	r2, #0
 8000406:	bf08      	it	eq
 8000408:	4608      	moveq	r0, r1
 800040a:	4770      	bx	lr
 800040c:	ea90 0f01 	teq	r0, r1
 8000410:	bf1c      	itt	ne
 8000412:	2000      	movne	r0, #0
 8000414:	4770      	bxne	lr
 8000416:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800041a:	d104      	bne.n	8000426 <__addsf3+0x126>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	bf28      	it	cs
 8000420:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000424:	4770      	bx	lr
 8000426:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800042a:	bf3c      	itt	cc
 800042c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000430:	4770      	bxcc	lr
 8000432:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000436:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800043a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800043e:	4770      	bx	lr
 8000440:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000444:	bf16      	itet	ne
 8000446:	4608      	movne	r0, r1
 8000448:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800044c:	4601      	movne	r1, r0
 800044e:	0242      	lsls	r2, r0, #9
 8000450:	bf06      	itte	eq
 8000452:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000456:	ea90 0f01 	teqeq	r0, r1
 800045a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800045e:	4770      	bx	lr

08000460 <__aeabi_ui2f>:
 8000460:	f04f 0300 	mov.w	r3, #0
 8000464:	e004      	b.n	8000470 <__aeabi_i2f+0x8>
 8000466:	bf00      	nop

08000468 <__aeabi_i2f>:
 8000468:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800046c:	bf48      	it	mi
 800046e:	4240      	negmi	r0, r0
 8000470:	ea5f 0c00 	movs.w	ip, r0
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800047c:	4601      	mov	r1, r0
 800047e:	f04f 0000 	mov.w	r0, #0
 8000482:	e01c      	b.n	80004be <__aeabi_l2f+0x2a>

08000484 <__aeabi_ul2f>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	f04f 0300 	mov.w	r3, #0
 8000490:	e00a      	b.n	80004a8 <__aeabi_l2f+0x14>
 8000492:	bf00      	nop

08000494 <__aeabi_l2f>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80004a0:	d502      	bpl.n	80004a8 <__aeabi_l2f+0x14>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	ea5f 0c01 	movs.w	ip, r1
 80004ac:	bf02      	ittt	eq
 80004ae:	4684      	moveq	ip, r0
 80004b0:	4601      	moveq	r1, r0
 80004b2:	2000      	moveq	r0, #0
 80004b4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80004b8:	bf08      	it	eq
 80004ba:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80004be:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80004c2:	fabc f28c 	clz	r2, ip
 80004c6:	3a08      	subs	r2, #8
 80004c8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004cc:	db10      	blt.n	80004f0 <__aeabi_l2f+0x5c>
 80004ce:	fa01 fc02 	lsl.w	ip, r1, r2
 80004d2:	4463      	add	r3, ip
 80004d4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004d8:	f1c2 0220 	rsb	r2, r2, #32
 80004dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	eb43 0002 	adc.w	r0, r3, r2
 80004e8:	bf08      	it	eq
 80004ea:	f020 0001 	biceq.w	r0, r0, #1
 80004ee:	4770      	bx	lr
 80004f0:	f102 0220 	add.w	r2, r2, #32
 80004f4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004f8:	f1c2 0220 	rsb	r2, r2, #32
 80004fc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000500:	fa21 f202 	lsr.w	r2, r1, r2
 8000504:	eb43 0002 	adc.w	r0, r3, r2
 8000508:	bf08      	it	eq
 800050a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800050e:	4770      	bx	lr

08000510 <__aeabi_uldivmod>:
 8000510:	b953      	cbnz	r3, 8000528 <__aeabi_uldivmod+0x18>
 8000512:	b94a      	cbnz	r2, 8000528 <__aeabi_uldivmod+0x18>
 8000514:	2900      	cmp	r1, #0
 8000516:	bf08      	it	eq
 8000518:	2800      	cmpeq	r0, #0
 800051a:	bf1c      	itt	ne
 800051c:	f04f 31ff 	movne.w	r1, #4294967295
 8000520:	f04f 30ff 	movne.w	r0, #4294967295
 8000524:	f000 b96a 	b.w	80007fc <__aeabi_idiv0>
 8000528:	f1ad 0c08 	sub.w	ip, sp, #8
 800052c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000530:	f000 f806 	bl	8000540 <__udivmoddi4>
 8000534:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800053c:	b004      	add	sp, #16
 800053e:	4770      	bx	lr

08000540 <__udivmoddi4>:
 8000540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000544:	9d08      	ldr	r5, [sp, #32]
 8000546:	460c      	mov	r4, r1
 8000548:	2b00      	cmp	r3, #0
 800054a:	d14e      	bne.n	80005ea <__udivmoddi4+0xaa>
 800054c:	4694      	mov	ip, r2
 800054e:	458c      	cmp	ip, r1
 8000550:	4686      	mov	lr, r0
 8000552:	fab2 f282 	clz	r2, r2
 8000556:	d962      	bls.n	800061e <__udivmoddi4+0xde>
 8000558:	b14a      	cbz	r2, 800056e <__udivmoddi4+0x2e>
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	4091      	lsls	r1, r2
 8000560:	fa20 f303 	lsr.w	r3, r0, r3
 8000564:	fa0c fc02 	lsl.w	ip, ip, r2
 8000568:	4319      	orrs	r1, r3
 800056a:	fa00 fe02 	lsl.w	lr, r0, r2
 800056e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000572:	fa1f f68c 	uxth.w	r6, ip
 8000576:	fbb1 f4f7 	udiv	r4, r1, r7
 800057a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057e:	fb07 1114 	mls	r1, r7, r4, r1
 8000582:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000586:	fb04 f106 	mul.w	r1, r4, r6
 800058a:	4299      	cmp	r1, r3
 800058c:	d90a      	bls.n	80005a4 <__udivmoddi4+0x64>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f104 30ff 	add.w	r0, r4, #4294967295
 8000596:	f080 8112 	bcs.w	80007be <__udivmoddi4+0x27e>
 800059a:	4299      	cmp	r1, r3
 800059c:	f240 810f 	bls.w	80007be <__udivmoddi4+0x27e>
 80005a0:	3c02      	subs	r4, #2
 80005a2:	4463      	add	r3, ip
 80005a4:	1a59      	subs	r1, r3, r1
 80005a6:	fa1f f38e 	uxth.w	r3, lr
 80005aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80005ae:	fb07 1110 	mls	r1, r7, r0, r1
 80005b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b6:	fb00 f606 	mul.w	r6, r0, r6
 80005ba:	429e      	cmp	r6, r3
 80005bc:	d90a      	bls.n	80005d4 <__udivmoddi4+0x94>
 80005be:	eb1c 0303 	adds.w	r3, ip, r3
 80005c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80005c6:	f080 80fc 	bcs.w	80007c2 <__udivmoddi4+0x282>
 80005ca:	429e      	cmp	r6, r3
 80005cc:	f240 80f9 	bls.w	80007c2 <__udivmoddi4+0x282>
 80005d0:	4463      	add	r3, ip
 80005d2:	3802      	subs	r0, #2
 80005d4:	1b9b      	subs	r3, r3, r6
 80005d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80005da:	2100      	movs	r1, #0
 80005dc:	b11d      	cbz	r5, 80005e6 <__udivmoddi4+0xa6>
 80005de:	40d3      	lsrs	r3, r2
 80005e0:	2200      	movs	r2, #0
 80005e2:	e9c5 3200 	strd	r3, r2, [r5]
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	428b      	cmp	r3, r1
 80005ec:	d905      	bls.n	80005fa <__udivmoddi4+0xba>
 80005ee:	b10d      	cbz	r5, 80005f4 <__udivmoddi4+0xb4>
 80005f0:	e9c5 0100 	strd	r0, r1, [r5]
 80005f4:	2100      	movs	r1, #0
 80005f6:	4608      	mov	r0, r1
 80005f8:	e7f5      	b.n	80005e6 <__udivmoddi4+0xa6>
 80005fa:	fab3 f183 	clz	r1, r3
 80005fe:	2900      	cmp	r1, #0
 8000600:	d146      	bne.n	8000690 <__udivmoddi4+0x150>
 8000602:	42a3      	cmp	r3, r4
 8000604:	d302      	bcc.n	800060c <__udivmoddi4+0xcc>
 8000606:	4290      	cmp	r0, r2
 8000608:	f0c0 80f0 	bcc.w	80007ec <__udivmoddi4+0x2ac>
 800060c:	1a86      	subs	r6, r0, r2
 800060e:	eb64 0303 	sbc.w	r3, r4, r3
 8000612:	2001      	movs	r0, #1
 8000614:	2d00      	cmp	r5, #0
 8000616:	d0e6      	beq.n	80005e6 <__udivmoddi4+0xa6>
 8000618:	e9c5 6300 	strd	r6, r3, [r5]
 800061c:	e7e3      	b.n	80005e6 <__udivmoddi4+0xa6>
 800061e:	2a00      	cmp	r2, #0
 8000620:	f040 8090 	bne.w	8000744 <__udivmoddi4+0x204>
 8000624:	eba1 040c 	sub.w	r4, r1, ip
 8000628:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800062c:	fa1f f78c 	uxth.w	r7, ip
 8000630:	2101      	movs	r1, #1
 8000632:	fbb4 f6f8 	udiv	r6, r4, r8
 8000636:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800063a:	fb08 4416 	mls	r4, r8, r6, r4
 800063e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000642:	fb07 f006 	mul.w	r0, r7, r6
 8000646:	4298      	cmp	r0, r3
 8000648:	d908      	bls.n	800065c <__udivmoddi4+0x11c>
 800064a:	eb1c 0303 	adds.w	r3, ip, r3
 800064e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000652:	d202      	bcs.n	800065a <__udivmoddi4+0x11a>
 8000654:	4298      	cmp	r0, r3
 8000656:	f200 80cd 	bhi.w	80007f4 <__udivmoddi4+0x2b4>
 800065a:	4626      	mov	r6, r4
 800065c:	1a1c      	subs	r4, r3, r0
 800065e:	fa1f f38e 	uxth.w	r3, lr
 8000662:	fbb4 f0f8 	udiv	r0, r4, r8
 8000666:	fb08 4410 	mls	r4, r8, r0, r4
 800066a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800066e:	fb00 f707 	mul.w	r7, r0, r7
 8000672:	429f      	cmp	r7, r3
 8000674:	d908      	bls.n	8000688 <__udivmoddi4+0x148>
 8000676:	eb1c 0303 	adds.w	r3, ip, r3
 800067a:	f100 34ff 	add.w	r4, r0, #4294967295
 800067e:	d202      	bcs.n	8000686 <__udivmoddi4+0x146>
 8000680:	429f      	cmp	r7, r3
 8000682:	f200 80b0 	bhi.w	80007e6 <__udivmoddi4+0x2a6>
 8000686:	4620      	mov	r0, r4
 8000688:	1bdb      	subs	r3, r3, r7
 800068a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800068e:	e7a5      	b.n	80005dc <__udivmoddi4+0x9c>
 8000690:	f1c1 0620 	rsb	r6, r1, #32
 8000694:	408b      	lsls	r3, r1
 8000696:	fa22 f706 	lsr.w	r7, r2, r6
 800069a:	431f      	orrs	r7, r3
 800069c:	fa20 fc06 	lsr.w	ip, r0, r6
 80006a0:	fa04 f301 	lsl.w	r3, r4, r1
 80006a4:	ea43 030c 	orr.w	r3, r3, ip
 80006a8:	40f4      	lsrs	r4, r6
 80006aa:	fa00 f801 	lsl.w	r8, r0, r1
 80006ae:	0c38      	lsrs	r0, r7, #16
 80006b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80006b4:	fbb4 fef0 	udiv	lr, r4, r0
 80006b8:	fa1f fc87 	uxth.w	ip, r7
 80006bc:	fb00 441e 	mls	r4, r0, lr, r4
 80006c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80006c4:	fb0e f90c 	mul.w	r9, lr, ip
 80006c8:	45a1      	cmp	r9, r4
 80006ca:	fa02 f201 	lsl.w	r2, r2, r1
 80006ce:	d90a      	bls.n	80006e6 <__udivmoddi4+0x1a6>
 80006d0:	193c      	adds	r4, r7, r4
 80006d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80006d6:	f080 8084 	bcs.w	80007e2 <__udivmoddi4+0x2a2>
 80006da:	45a1      	cmp	r9, r4
 80006dc:	f240 8081 	bls.w	80007e2 <__udivmoddi4+0x2a2>
 80006e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80006e4:	443c      	add	r4, r7
 80006e6:	eba4 0409 	sub.w	r4, r4, r9
 80006ea:	fa1f f983 	uxth.w	r9, r3
 80006ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80006f2:	fb00 4413 	mls	r4, r0, r3, r4
 80006f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80006fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80006fe:	45a4      	cmp	ip, r4
 8000700:	d907      	bls.n	8000712 <__udivmoddi4+0x1d2>
 8000702:	193c      	adds	r4, r7, r4
 8000704:	f103 30ff 	add.w	r0, r3, #4294967295
 8000708:	d267      	bcs.n	80007da <__udivmoddi4+0x29a>
 800070a:	45a4      	cmp	ip, r4
 800070c:	d965      	bls.n	80007da <__udivmoddi4+0x29a>
 800070e:	3b02      	subs	r3, #2
 8000710:	443c      	add	r4, r7
 8000712:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000716:	fba0 9302 	umull	r9, r3, r0, r2
 800071a:	eba4 040c 	sub.w	r4, r4, ip
 800071e:	429c      	cmp	r4, r3
 8000720:	46ce      	mov	lr, r9
 8000722:	469c      	mov	ip, r3
 8000724:	d351      	bcc.n	80007ca <__udivmoddi4+0x28a>
 8000726:	d04e      	beq.n	80007c6 <__udivmoddi4+0x286>
 8000728:	b155      	cbz	r5, 8000740 <__udivmoddi4+0x200>
 800072a:	ebb8 030e 	subs.w	r3, r8, lr
 800072e:	eb64 040c 	sbc.w	r4, r4, ip
 8000732:	fa04 f606 	lsl.w	r6, r4, r6
 8000736:	40cb      	lsrs	r3, r1
 8000738:	431e      	orrs	r6, r3
 800073a:	40cc      	lsrs	r4, r1
 800073c:	e9c5 6400 	strd	r6, r4, [r5]
 8000740:	2100      	movs	r1, #0
 8000742:	e750      	b.n	80005e6 <__udivmoddi4+0xa6>
 8000744:	f1c2 0320 	rsb	r3, r2, #32
 8000748:	fa20 f103 	lsr.w	r1, r0, r3
 800074c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000750:	fa24 f303 	lsr.w	r3, r4, r3
 8000754:	4094      	lsls	r4, r2
 8000756:	430c      	orrs	r4, r1
 8000758:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800075c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000760:	fa1f f78c 	uxth.w	r7, ip
 8000764:	fbb3 f0f8 	udiv	r0, r3, r8
 8000768:	fb08 3110 	mls	r1, r8, r0, r3
 800076c:	0c23      	lsrs	r3, r4, #16
 800076e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000772:	fb00 f107 	mul.w	r1, r0, r7
 8000776:	4299      	cmp	r1, r3
 8000778:	d908      	bls.n	800078c <__udivmoddi4+0x24c>
 800077a:	eb1c 0303 	adds.w	r3, ip, r3
 800077e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000782:	d22c      	bcs.n	80007de <__udivmoddi4+0x29e>
 8000784:	4299      	cmp	r1, r3
 8000786:	d92a      	bls.n	80007de <__udivmoddi4+0x29e>
 8000788:	3802      	subs	r0, #2
 800078a:	4463      	add	r3, ip
 800078c:	1a5b      	subs	r3, r3, r1
 800078e:	b2a4      	uxth	r4, r4
 8000790:	fbb3 f1f8 	udiv	r1, r3, r8
 8000794:	fb08 3311 	mls	r3, r8, r1, r3
 8000798:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800079c:	fb01 f307 	mul.w	r3, r1, r7
 80007a0:	42a3      	cmp	r3, r4
 80007a2:	d908      	bls.n	80007b6 <__udivmoddi4+0x276>
 80007a4:	eb1c 0404 	adds.w	r4, ip, r4
 80007a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80007ac:	d213      	bcs.n	80007d6 <__udivmoddi4+0x296>
 80007ae:	42a3      	cmp	r3, r4
 80007b0:	d911      	bls.n	80007d6 <__udivmoddi4+0x296>
 80007b2:	3902      	subs	r1, #2
 80007b4:	4464      	add	r4, ip
 80007b6:	1ae4      	subs	r4, r4, r3
 80007b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80007bc:	e739      	b.n	8000632 <__udivmoddi4+0xf2>
 80007be:	4604      	mov	r4, r0
 80007c0:	e6f0      	b.n	80005a4 <__udivmoddi4+0x64>
 80007c2:	4608      	mov	r0, r1
 80007c4:	e706      	b.n	80005d4 <__udivmoddi4+0x94>
 80007c6:	45c8      	cmp	r8, r9
 80007c8:	d2ae      	bcs.n	8000728 <__udivmoddi4+0x1e8>
 80007ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80007ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80007d2:	3801      	subs	r0, #1
 80007d4:	e7a8      	b.n	8000728 <__udivmoddi4+0x1e8>
 80007d6:	4631      	mov	r1, r6
 80007d8:	e7ed      	b.n	80007b6 <__udivmoddi4+0x276>
 80007da:	4603      	mov	r3, r0
 80007dc:	e799      	b.n	8000712 <__udivmoddi4+0x1d2>
 80007de:	4630      	mov	r0, r6
 80007e0:	e7d4      	b.n	800078c <__udivmoddi4+0x24c>
 80007e2:	46d6      	mov	lr, sl
 80007e4:	e77f      	b.n	80006e6 <__udivmoddi4+0x1a6>
 80007e6:	4463      	add	r3, ip
 80007e8:	3802      	subs	r0, #2
 80007ea:	e74d      	b.n	8000688 <__udivmoddi4+0x148>
 80007ec:	4606      	mov	r6, r0
 80007ee:	4623      	mov	r3, r4
 80007f0:	4608      	mov	r0, r1
 80007f2:	e70f      	b.n	8000614 <__udivmoddi4+0xd4>
 80007f4:	3e02      	subs	r6, #2
 80007f6:	4463      	add	r3, ip
 80007f8:	e730      	b.n	800065c <__udivmoddi4+0x11c>
 80007fa:	bf00      	nop

080007fc <__aeabi_idiv0>:
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop

08000800 <_Z11ControlTaskPv>:
  {
#ifdef USE_SERVOMOTORS
	  servomotors.Control();
#endif
#ifdef USE_MOTOR_CONTROL
	  controller.Control();
 8000800:	4c02      	ldr	r4, [pc, #8]	@ (800080c <_Z11ControlTaskPv+0xc>)
{
 8000802:	b508      	push	{r3, lr}
	  controller.Control();
 8000804:	4620      	mov	r0, r4
 8000806:	f014 fa77 	bl	8014cf8 <_ZN10Controller7ControlEv>
  for(;;)
 800080a:	e7fb      	b.n	8000804 <_Z11ControlTaskPv+0x4>
 800080c:	24000140 	.word	0x24000140

08000810 <_Z11SensorsTaskPv>:
  /* USER CODE BEGIN SensorsTask */
  /* Infinite loop */
  for(;;)
  {
#ifdef USE_SENSORS
	  sensors.Spin();
 8000810:	4c02      	ldr	r4, [pc, #8]	@ (800081c <_Z11SensorsTaskPv+0xc>)
{
 8000812:	b508      	push	{r3, lr}
	  sensors.Spin();
 8000814:	4620      	mov	r0, r4
 8000816:	f01b f8aa 	bl	801b96e <_ZN7Sensors4SpinEv>
  for(;;)
 800081a:	e7fb      	b.n	8000814 <_Z11SensorsTaskPv+0x4>
 800081c:	240003b8 	.word	0x240003b8

08000820 <_Z17CommunicationTaskPv>:
{
  /* USER CODE BEGIN CommunicationTask */
  /* Infinite loop */
  for(;;)
  {
	  communication.Spin();
 8000820:	4c02      	ldr	r4, [pc, #8]	@ (800082c <_Z17CommunicationTaskPv+0xc>)
{
 8000822:	b508      	push	{r3, lr}
	  communication.Spin();
 8000824:	4620      	mov	r0, r4
 8000826:	f010 fcb9 	bl	801119c <_ZN13Communication4SpinEv>
  for(;;)
 800082a:	e7fb      	b.n	8000824 <_Z17CommunicationTaskPv+0x4>
 800082c:	240018fc 	.word	0x240018fc

08000830 <_Z8LEDsTaskPv>:
  /* USER CODE BEGIN LEDsTask */
  /* Infinite loop */
  for(;;)
  {
#ifdef USE_LEDS
	  leds.Spin();
 8000830:	4c02      	ldr	r4, [pc, #8]	@ (800083c <_Z8LEDsTaskPv+0xc>)
{
 8000832:	b508      	push	{r3, lr}
	  leds.Spin();
 8000834:	4620      	mov	r0, r4
 8000836:	f015 fe46 	bl	80164c6 <_ZN4LEDS4SpinEv>
  for(;;)
 800083a:	e7fb      	b.n	8000834 <_Z8LEDsTaskPv+0x4>
 800083c:	24000380 	.word	0x24000380

08000840 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb>:
 * @param input pointer: the hardware interface handle pointer
 * @param output success: whether successful
 * @return the interface ID associated to the input handle
 */
template<typename H>
uint8_t TemplateCommunicationProtocol<H>::GetID(void* pointer, bool* success) {
 8000840:	b4f0      	push	{r4, r5, r6, r7}
 8000842:	e9d0 350e 	ldrd	r3, r5, [r0, #56]	@ 0x38
	uint8_t index = 0;
	for (H* interface : interfaces) {
 8000846:	2400      	movs	r4, #0
 8000848:	429d      	cmp	r5, r3
 800084a:	461e      	mov	r6, r3
 800084c:	d103      	bne.n	8000856 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x16>
		if (interface == pointer)
			return GetIDFromIndex(index, success);
		index += 1;
	}
	*success = false;
 800084e:	2000      	movs	r0, #0
	return 0;
}
 8000850:	bcf0      	pop	{r4, r5, r6, r7}
	*success = false;
 8000852:	7010      	strb	r0, [r2, #0]
}
 8000854:	4770      	bx	lr
		if (interface == pointer)
 8000856:	6836      	ldr	r6, [r6, #0]
 8000858:	3304      	adds	r3, #4
 800085a:	1c67      	adds	r7, r4, #1
 800085c:	428e      	cmp	r6, r1
 800085e:	d103      	bne.n	8000868 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x28>
			return GetIDFromIndex(index, success);
 8000860:	b2e1      	uxtb	r1, r4
}
 8000862:	bcf0      	pop	{r4, r5, r6, r7}
			return GetIDFromIndex(index, success);
 8000864:	f016 bc87 	b.w	8017176 <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>
 8000868:	463c      	mov	r4, r7
 800086a:	e7ed      	b.n	8000848 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x8>

0800086c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb>:
uint8_t TemplateCommunicationProtocol<H>::GetID(void* pointer, bool* success) {
 800086c:	b4f0      	push	{r4, r5, r6, r7}
 800086e:	e9d0 350e 	ldrd	r3, r5, [r0, #56]	@ 0x38
	for (H* interface : interfaces) {
 8000872:	2400      	movs	r4, #0
 8000874:	429d      	cmp	r5, r3
 8000876:	461e      	mov	r6, r3
 8000878:	d103      	bne.n	8000882 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x16>
	*success = false;
 800087a:	2000      	movs	r0, #0
}
 800087c:	bcf0      	pop	{r4, r5, r6, r7}
	*success = false;
 800087e:	7010      	strb	r0, [r2, #0]
}
 8000880:	4770      	bx	lr
		if (interface == pointer)
 8000882:	6836      	ldr	r6, [r6, #0]
 8000884:	3304      	adds	r3, #4
 8000886:	1c67      	adds	r7, r4, #1
 8000888:	428e      	cmp	r6, r1
 800088a:	d103      	bne.n	8000894 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x28>
			return GetIDFromIndex(index, success);
 800088c:	b2e1      	uxtb	r1, r4
}
 800088e:	bcf0      	pop	{r4, r5, r6, r7}
			return GetIDFromIndex(index, success);
 8000890:	f016 bc71 	b.w	8017176 <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>
 8000894:	463c      	mov	r4, r7
 8000896:	e7ed      	b.n	8000874 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x8>

08000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>:
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000898:	0089      	lsls	r1, r1, #2
 800089a:	f01d bb91 	b.w	801dfc0 <_ZdlPvj>

0800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>:
 800089e:	0109      	lsls	r1, r1, #4
 80008a0:	f01d bb8e 	b.w	801dfc0 <_ZdlPvj>

080008a4 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
      _GLIBCXX20_CONSTEXPR
      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80008a4:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 80008a6:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80008a8:	d006      	beq.n	80008b8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80008aa:	da01      	bge.n	80008b0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 80008ac:	f01d fc5c 	bl	801e168 <_ZSt17__throw_bad_allocv>
      }
 80008b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80008b4:	f01d bba9 	b.w	801e00a <_Znwj>
 80008b8:	bd08      	pop	{r3, pc}
	...

080008bc <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80008bc:	b513      	push	{r0, r1, r4, lr}
 80008be:	4601      	mov	r1, r0
	uint8_t ID = communication.GetID((void*) huart, &success);
 80008c0:	f10d 0207 	add.w	r2, sp, #7
 80008c4:	480a      	ldr	r0, [pc, #40]	@ (80008f0 <HAL_UART_ErrorCallback+0x34>)
 80008c6:	f00f fff1 	bl	80108ac <_ZN13Communication5GetIDEPvPb>
	if (!success) {return;}
 80008ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t ID = communication.GetID((void*) huart, &success);
 80008ce:	4604      	mov	r4, r0
	if (!success) {return;}
 80008d0:	b15b      	cbz	r3, 80008ea <HAL_UART_ErrorCallback+0x2e>
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 80008d2:	4601      	mov	r1, r0
 80008d4:	f10d 0207 	add.w	r2, sp, #7
 80008d8:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <HAL_UART_ErrorCallback+0x34>)
 80008da:	f010 f806 	bl	80108ea <_ZN13Communication14GetBufferIndexEhPb>
	*buffer_index = 0; // resets the buffer index to the DMA pointer
 80008de:	2300      	movs	r3, #0
	communication.ActivateReception(ID);
 80008e0:	4621      	mov	r1, r4
	*buffer_index = 0; // resets the buffer index to the DMA pointer
 80008e2:	8003      	strh	r3, [r0, #0]
	communication.ActivateReception(ID);
 80008e4:	4802      	ldr	r0, [pc, #8]	@ (80008f0 <HAL_UART_ErrorCallback+0x34>)
 80008e6:	f010 f81b 	bl	8010920 <_ZN13Communication17ActivateReceptionEh>
}
 80008ea:	b002      	add	sp, #8
 80008ec:	bd10      	pop	{r4, pc}
 80008ee:	bf00      	nop
 80008f0:	240018fc 	.word	0x240018fc

080008f4 <HAL_FDCAN_ErrorCallback>:
void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan) {
 80008f4:	b507      	push	{r0, r1, r2, lr}
 80008f6:	4601      	mov	r1, r0
	uint8_t ID = communication.GetID((void*) hfdcan, &success);
 80008f8:	f10d 0207 	add.w	r2, sp, #7
 80008fc:	4806      	ldr	r0, [pc, #24]	@ (8000918 <HAL_FDCAN_ErrorCallback+0x24>)
 80008fe:	f00f ffd5 	bl	80108ac <_ZN13Communication5GetIDEPvPb>
	if (!success) {return;}
 8000902:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t ID = communication.GetID((void*) hfdcan, &success);
 8000906:	4601      	mov	r1, r0
	if (!success) {return;}
 8000908:	b113      	cbz	r3, 8000910 <HAL_FDCAN_ErrorCallback+0x1c>
	communication.ActivateReception(ID);
 800090a:	4803      	ldr	r0, [pc, #12]	@ (8000918 <HAL_FDCAN_ErrorCallback+0x24>)
 800090c:	f010 f808 	bl	8010920 <_ZN13Communication17ActivateReceptionEh>
}
 8000910:	b003      	add	sp, #12
 8000912:	f85d fb04 	ldr.w	pc, [sp], #4
 8000916:	bf00      	nop
 8000918:	240018fc 	.word	0x240018fc

0800091c <HAL_I2C_MasterTxCpltCallback>:
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800091c:	4601      	mov	r1, r0
	sensors.ReceiveSensorData(hi2c);
 800091e:	4801      	ldr	r0, [pc, #4]	@ (8000924 <HAL_I2C_MasterTxCpltCallback+0x8>)
 8000920:	f01b b808 	b.w	801b934 <_ZN7Sensors17ReceiveSensorDataEP19__I2C_HandleTypeDef>
 8000924:	240003b8 	.word	0x240003b8

08000928 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000928:	f7ff bff8 	b.w	800091c <HAL_I2C_MasterTxCpltCallback>

0800092c <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800092c:	f7ff bff6 	b.w	800091c <HAL_I2C_MasterTxCpltCallback>

08000930 <HAL_GPIO_EXTI_Callback>:
    if(GPIO_Pin == WATER_DETECTION_Pin) // Trigger fault LED and set RGB led to blue when water detected
 8000930:	2808      	cmp	r0, #8
 8000932:	d102      	bne.n	800093a <HAL_GPIO_EXTI_Callback+0xa>
    	WaterDetectedLEDS(&leds);
 8000934:	4801      	ldr	r0, [pc, #4]	@ (800093c <HAL_GPIO_EXTI_Callback+0xc>)
 8000936:	f00e bba9 	b.w	800f08c <_Z17WaterDetectedLEDSP4LEDS>
}
 800093a:	4770      	bx	lr
 800093c:	24000380 	.word	0x24000380

08000940 <_Z18SystemClock_Configv>:
{
 8000940:	b530      	push	{r4, r5, lr}
 8000942:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000944:	224c      	movs	r2, #76	@ 0x4c
 8000946:	2100      	movs	r1, #0
 8000948:	a80b      	add	r0, sp, #44	@ 0x2c
 800094a:	f01e faf5 	bl	801ef38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094e:	2220      	movs	r2, #32
 8000950:	2100      	movs	r1, #0
 8000952:	a803      	add	r0, sp, #12
 8000954:	f01e faf0 	bl	801ef38 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000958:	2002      	movs	r0, #2
 800095a:	f007 ff55 	bl	8008808 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800095e:	2300      	movs	r3, #0
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	4b39      	ldr	r3, [pc, #228]	@ (8000a48 <_Z18SystemClock_Configv+0x108>)
 8000964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000966:	f022 0201 	bic.w	r2, r2, #1
 800096a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800096c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	4b35      	ldr	r3, [pc, #212]	@ (8000a4c <_Z18SystemClock_Configv+0x10c>)
 8000976:	699a      	ldr	r2, [r3, #24]
 8000978:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800097c:	619a      	str	r2, [r3, #24]
 800097e:	699a      	ldr	r2, [r3, #24]
 8000980:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000984:	9200      	str	r2, [sp, #0]
 8000986:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000988:	699a      	ldr	r2, [r3, #24]
 800098a:	0495      	lsls	r5, r2, #18
 800098c:	d5fc      	bpl.n	8000988 <_Z18SystemClock_Configv+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4a30      	ldr	r2, [pc, #192]	@ (8000a50 <_Z18SystemClock_Configv+0x110>)
 8000990:	f8d2 10f4 	ldr.w	r1, [r2, #244]	@ 0xf4
 8000994:	f041 0102 	orr.w	r1, r1, #2
 8000998:	f8c2 10f4 	str.w	r1, [r2, #244]	@ 0xf4
 800099c:	f8d2 10f4 	ldr.w	r1, [r2, #244]	@ 0xf4
 80009a0:	f001 0102 	and.w	r1, r1, #2
 80009a4:	9101      	str	r1, [sp, #4]
 80009a6:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009a8:	2100      	movs	r1, #0
 80009aa:	9102      	str	r1, [sp, #8]
 80009ac:	6999      	ldr	r1, [r3, #24]
 80009ae:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80009b2:	6199      	str	r1, [r3, #24]
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009ba:	9302      	str	r3, [sp, #8]
 80009bc:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <_Z18SystemClock_Configv+0x108>)
 80009be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80009c0:	f041 0101 	orr.w	r1, r1, #1
 80009c4:	62d9      	str	r1, [r3, #44]	@ 0x2c
 80009c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c8:	4920      	ldr	r1, [pc, #128]	@ (8000a4c <_Z18SystemClock_Configv+0x10c>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	9302      	str	r3, [sp, #8]
 80009d0:	9b02      	ldr	r3, [sp, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009d2:	698b      	ldr	r3, [r1, #24]
 80009d4:	049c      	lsls	r4, r3, #18
 80009d6:	d5fc      	bpl.n	80009d2 <_Z18SystemClock_Configv+0x92>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80009d8:	6a93      	ldr	r3, [r2, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009da:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009dc:	200c      	movs	r0, #12
  RCC_OscInitStruct.PLL.PLLR = 4;
 80009de:	2508      	movs	r5, #8
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80009e0:	f023 0303 	bic.w	r3, r3, #3
  RCC_OscInitStruct.PLL.PLLR = 4;
 80009e4:	2404      	movs	r4, #4
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80009e6:	f043 0302 	orr.w	r3, r3, #2
 80009ea:	6293      	str	r3, [r2, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLN = 80;
 80009f0:	2250      	movs	r2, #80	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009f2:	e9cd 130b 	strd	r1, r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f6:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f8:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = 2;
 80009fc:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009fe:	e9cd 2317 	strd	r2, r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e9cd 031b 	strd	r0, r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a0a:	931d      	str	r3, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000a0c:	e9cd 5419 	strd	r5, r4, [sp, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a10:	f007 ff24 	bl	800885c <HAL_RCC_OscConfig>
 8000a14:	b108      	cbz	r0, 8000a1a <_Z18SystemClock_Configv+0xda>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a16:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <_Z18SystemClock_Configv+0xd8>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1a:	223f      	movs	r2, #63	@ 0x3f
 8000a1c:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a1e:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a20:	e9cd 2303 	strd	r2, r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a24:	2340      	movs	r3, #64	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a2a:	e9cd 0505 	strd	r0, r5, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a2e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a30:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a34:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a38:	f008 fb44 	bl	80090c4 <HAL_RCC_ClockConfig>
 8000a3c:	b108      	cbz	r0, 8000a42 <_Z18SystemClock_Configv+0x102>
 8000a3e:	b672      	cpsid	i
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <_Z18SystemClock_Configv+0x100>
}
 8000a42:	b01f      	add	sp, #124	@ 0x7c
 8000a44:	bd30      	pop	{r4, r5, pc}
 8000a46:	bf00      	nop
 8000a48:	58000400 	.word	0x58000400
 8000a4c:	58024800 	.word	0x58024800
 8000a50:	58024400 	.word	0x58024400

08000a54 <_Z24PeriphCommonClock_Configv>:
{
 8000a54:	b500      	push	{lr}
 8000a56:	b0b1      	sub	sp, #196	@ 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a58:	22a0      	movs	r2, #160	@ 0xa0
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	a808      	add	r0, sp, #32
 8000a5e:	f01e fa6b 	bl	801ef38 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 3;
 8000a62:	f44f 2308 	mov.w	r3, #557056	@ 0x88000
 8000a66:	2203      	movs	r2, #3
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a68:	2119      	movs	r1, #25
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a6a:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLL2.PLL2M = 3;
 8000a6c:	e9cd 3201 	strd	r3, r2, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	e9cd 1303 	strd	r1, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a76:	21c0      	movs	r1, #192	@ 0xc0
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000a78:	930a      	str	r3, [sp, #40]	@ 0x28
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a7a:	9107      	str	r1, [sp, #28]
  PeriphClkInitStruct.PLL3.PLL3N = 40;
 8000a7c:	2128      	movs	r1, #40	@ 0x28
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a7e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000a82:	e9cd 130b 	strd	r1, r3, [sp, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000a86:	e9cd 320d 	strd	r3, r2, [sp, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000a8a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a8e:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000a90:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a94:	931c      	str	r3, [sp, #112]	@ 0x70
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000a96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a9a:	9329      	str	r3, [sp, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a9c:	f008 fdd8 	bl	8009650 <HAL_RCCEx_PeriphCLKConfig>
 8000aa0:	b108      	cbz	r0, 8000aa6 <_Z24PeriphCommonClock_Configv+0x52>
 8000aa2:	b672      	cpsid	i
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <_Z24PeriphCommonClock_Configv+0x50>
}
 8000aa6:	b031      	add	sp, #196	@ 0xc4
 8000aa8:	f85d fb04 	ldr.w	pc, [sp], #4

08000aac <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM5) {
 8000aac:	6802      	ldr	r2, [r0, #0]
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ab0:	429a      	cmp	r2, r3
{
 8000ab2:	b510      	push	{r4, lr}
 8000ab4:	4604      	mov	r4, r0
  if (htim->Instance == TIM5) {
 8000ab6:	d101      	bne.n	8000abc <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8000ab8:	f002 fd1a 	bl	80034f0 <HAL_IncTick>
  if (hardware_delay.AssignedTimer(htim)) {
 8000abc:	4621      	mov	r1, r4
 8000abe:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ac0:	f015 fa8f 	bl	8015fe2 <_ZN13HardwareDelay13AssignedTimerEP17TIM_HandleTypeDef>
 8000ac4:	b120      	cbz	r0, 8000ad0 <HAL_TIM_PeriodElapsedCallback+0x24>
    hardware_delay.TriggeredDelay();
 8000ac6:	4804      	ldr	r0, [pc, #16]	@ (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
}
 8000ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hardware_delay.TriggeredDelay();
 8000acc:	f015 bc5a 	b.w	8016384 <_ZN13HardwareDelay14TriggeredDelayEv>
}
 8000ad0:	bd10      	pop	{r4, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40000c00 	.word	0x40000c00
 8000ad8:	24000484 	.word	0x24000484

08000adc <Error_Handler>:
 8000adc:	b672      	cpsid	i
  while (1)
 8000ade:	e7fe      	b.n	8000ade <Error_Handler+0x2>

08000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000ae0:	b510      	push	{r4, lr}
 8000ae2:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8000ae4:	6800      	ldr	r0, [r0, #0]
      _GLIBCXX20_CONSTEXPR
      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 8000ae6:	b118      	cbz	r0, 8000af0 <_ZNSt12_Vector_baseIhSaIhEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000ae8:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000aea:	1a09      	subs	r1, r1, r0
 8000aec:	f01d fa68 	bl	801dfc0 <_ZdlPvj>
      }
 8000af0:	4620      	mov	r0, r4
 8000af2:	bd10      	pop	{r4, pc}

08000af4 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      _GLIBCXX20_CONSTEXPR
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8000af4:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8000af6:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8000af8:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8000afa:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8000afc:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8000b00:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8000b02:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8000b04:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8000b06:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8000b08:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8000b0a:	688d      	ldr	r5, [r1, #8]
 8000b0c:	6085      	str	r5, [r0, #8]
      }
 8000b0e:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8000b10:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8000b12:	e9c1 3300 	strd	r3, r3, [r1]
 8000b16:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8000b1a:	f7ff ffe1 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	constexpr bool __move_storage =
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
	return *this;
      }
 8000b1e:	b005      	add	sp, #20
 8000b20:	bd30      	pop	{r4, r5, pc}

08000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8000b22:	b510      	push	{r4, lr}
 8000b24:	4604      	mov	r4, r0
 8000b26:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000b28:	e9d4 2300 	ldrd	r2, r3, [r4]
      {
	if (max_size() - size() < __n)
 8000b2c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000b30:	1a9b      	subs	r3, r3, r2
	if (max_size() - size() < __n)
 8000b32:	1ae2      	subs	r2, r4, r3
 8000b34:	428a      	cmp	r2, r1
 8000b36:	d201      	bcs.n	8000b3c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x1a>
	  __throw_length_error(__N(__s));
 8000b38:	f01d fb1c 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 8000b3c:	4299      	cmp	r1, r3
 8000b3e:	bf38      	it	cc
 8000b40:	4619      	movcc	r1, r3
 8000b42:	185b      	adds	r3, r3, r1
 8000b44:	d204      	bcs.n	8000b50 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x2e>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	bf28      	it	cs
 8000b4a:	4623      	movcs	r3, r4
 8000b4c:	4618      	mov	r0, r3

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }
 8000b4e:	bd10      	pop	{r4, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000b50:	4620      	mov	r0, r4
 8000b52:	e7fc      	b.n	8000b4e <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x2c>

08000b54 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8000b54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000b58:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8000b5c:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8000b5e:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000b62:	ebaa 0208 	sub.w	r2, sl, r8
 8000b66:	4607      	mov	r7, r0
 8000b68:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 8000b6a:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000b6e:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 8000b72:	d102      	bne.n	8000b7a <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8000b74:	481f      	ldr	r0, [pc, #124]	@ (8000bf4 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>)
 8000b76:	f01d fafd 	bl	801e174 <_ZSt20__throw_length_errorPKc>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000b7a:	45c2      	cmp	sl, r8
 8000b7c:	bf14      	ite	ne
 8000b7e:	4622      	movne	r2, r4
 8000b80:	2201      	moveq	r2, #1
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8000b82:	eba1 0508 	sub.w	r5, r1, r8
 8000b86:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000b88:	d22f      	bcs.n	8000bea <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000b8a:	b384      	cbz	r4, 8000bee <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000b8c:	429c      	cmp	r4, r3
 8000b8e:	bf28      	it	cs
 8000b90:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8000b92:	00a0      	lsls	r0, r4, #2
 8000b94:	f01d fa39 	bl	801e00a <_Znwj>
 8000b98:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000b9a:	f8db 3000 	ldr.w	r3, [fp]
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result,
		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	5173      	str	r3, [r6, r5]
 8000ba2:	dd04      	ble.n	8000bae <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000ba4:	462a      	mov	r2, r5
 8000ba6:	4641      	mov	r1, r8
 8000ba8:	4630      	mov	r0, r6
 8000baa:	f01e f9ab 	bl	801ef04 <memmove>
      ptrdiff_t __count = __last - __first;
 8000bae:	ebaa 0a09 	sub.w	sl, sl, r9
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 8000bb2:	3504      	adds	r5, #4
      if (__count > 0)
 8000bb4:	f1ba 0f00 	cmp.w	sl, #0
 8000bb8:	4435      	add	r5, r6
 8000bba:	dd04      	ble.n	8000bc6 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000bbc:	4652      	mov	r2, sl
 8000bbe:	4649      	mov	r1, r9
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	f01e fa97 	bl	801f0f4 <memcpy>
	}
      return __result + __count;
 8000bc6:	4455      	add	r5, sl
	if (__p)
 8000bc8:	f1b8 0f00 	cmp.w	r8, #0
 8000bcc:	d006      	beq.n	8000bdc <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x88>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 8000bce:	68b9      	ldr	r1, [r7, #8]
 8000bd0:	4640      	mov	r0, r8
 8000bd2:	eba1 0108 	sub.w	r1, r1, r8
 8000bd6:	1089      	asrs	r1, r1, #2
 8000bd8:	f7ff fe5e 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
 8000bdc:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000be0:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8000be4:	60be      	str	r6, [r7, #8]
    }
 8000be6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000bea:	461c      	mov	r4, r3
 8000bec:	e7d1      	b.n	8000b92 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000bee:	4626      	mov	r6, r4
 8000bf0:	e7d3      	b.n	8000b9a <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8000bf2:	bf00      	nop
 8000bf4:	0801f20c 	.word	0x0801f20c

08000bf8 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>:
void TemplateCommunicationProtocol<H>::AddInterface(uint8_t ID, H* interface) {
 8000bf8:	b513      	push	{r0, r1, r4, lr}
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 8000bfe:	f016 fa55 	bl	80170ac <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 8000c02:	4620      	mov	r0, r4
 8000c04:	f016 fbec 	bl	80173e0 <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000c08:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	@ 0x3c
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	d005      	beq.n	8000c1c <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_+0x24>
 8000c10:	9b01      	ldr	r3, [sp, #4]
 8000c12:	f841 3b04 	str.w	r3, [r1], #4
	    ++this->_M_impl._M_finish;
 8000c16:	63e1      	str	r1, [r4, #60]	@ 0x3c
}
 8000c18:	b002      	add	sp, #8
 8000c1a:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 8000c1c:	aa01      	add	r2, sp, #4
 8000c1e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8000c22:	f7ff ff97 	bl	8000b54 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 8000c26:	e7f7      	b.n	8000c18 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_+0x20>

08000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
	_GLIBCXX20_CONSTEXPR
	static _Tp*
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8000c28:	b510      	push	{r4, lr}
					       is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::value, "type must be assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 8000c2a:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8000c2c:	4613      	mov	r3, r2
	  if (_Num)
 8000c2e:	d005      	beq.n	8000c3c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8000c30:	4601      	mov	r1, r0
 8000c32:	4622      	mov	r2, r4
 8000c34:	4618      	mov	r0, r3
 8000c36:	f01e f965 	bl	801ef04 <memmove>
 8000c3a:	4603      	mov	r3, r0
	  return __result + _Num;
	}
 8000c3c:	1918      	adds	r0, r3, r4
 8000c3e:	bd10      	pop	{r4, pc}

08000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>:
      vector(const vector& __x)
 8000c40:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000c42:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 8000c46:	4604      	mov	r4, r0
 8000c48:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000c4a:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8000c52:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8000c54:	4630      	mov	r0, r6
 8000c56:	f7ff fe25 	bl	80008a4 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000c5a:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8000c5c:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000c5e:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8000c60:	e9c4 0000 	strd	r0, r0, [r4]
      if (std::is_constant_evaluated())
	return std::__copy_move<_IsMove, false, _Category>::
	  __copy_m(__first, __last, __result);
#endif
      return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
			      _Category>::__copy_m(__first, __last, __result);
 8000c64:	e9d5 0100 	ldrd	r0, r1, [r5]
 8000c68:	f7ff ffde 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 8000c6c:	6060      	str	r0, [r4, #4]
      }
 8000c6e:	4620      	mov	r0, r4
 8000c70:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c74 <HAL_FDCAN_RxFifo0Callback>:
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000c74:	07cb      	lsls	r3, r1, #31
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000c76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	b0a3      	sub	sp, #140	@ 0x8c
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000c7e:	d512      	bpl.n	8000ca6 <HAL_FDCAN_RxFifo0Callback+0x32>
	    HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8000c80:	ab12      	add	r3, sp, #72	@ 0x48
 8000c82:	aa08      	add	r2, sp, #32
 8000c84:	2140      	movs	r1, #64	@ 0x40
 8000c86:	f005 fb1d 	bl	80062c4 <HAL_FDCAN_GetRxMessage>
		ID = communication.GetID((void*) hfdcan, &success);
 8000c8a:	f10d 0207 	add.w	r2, sp, #7
 8000c8e:	4621      	mov	r1, r4
 8000c90:	482c      	ldr	r0, [pc, #176]	@ (8000d44 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000c92:	f00f fe0b 	bl	80108ac <_ZN13Communication5GetIDEPvPb>
		if (!success) {communication.ActivateReception(ID); return;}
 8000c96:	f89d 3007 	ldrb.w	r3, [sp, #7]
		ID = communication.GetID((void*) hfdcan, &success);
 8000c9a:	4606      	mov	r6, r0
		if (!success) {communication.ActivateReception(ID); return;}
 8000c9c:	b933      	cbnz	r3, 8000cac <HAL_FDCAN_RxFifo0Callback+0x38>
 8000c9e:	4601      	mov	r1, r0
 8000ca0:	4828      	ldr	r0, [pc, #160]	@ (8000d44 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000ca2:	f00f fe3d 	bl	8010920 <_ZN13Communication17ActivateReceptionEh>
}
 8000ca6:	b023      	add	sp, #140	@ 0x8c
 8000ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000cac:	2040      	movs	r0, #64	@ 0x40
	    uint8_t target_address = (uint8_t) RxHeader.Identifier;
 8000cae:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8000cb2:	f7ff fdf7 	bl	80008a4 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8000cb6:	ab12      	add	r3, sp, #72	@ 0x48
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000cb8:	f100 0740 	add.w	r7, r0, #64	@ 0x40
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000cbc:	4605      	mov	r5, r0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f10d 0c88 	add.w	ip, sp, #136	@ 0x88
 8000cc4:	9002      	str	r0, [sp, #8]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000cc6:	9704      	str	r7, [sp, #16]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	3408      	adds	r4, #8
 8000ccc:	ca03      	ldmia	r2!, {r0, r1}
 8000cce:	4562      	cmp	r2, ip
 8000cd0:	f844 0c08 	str.w	r0, [r4, #-8]
 8000cd4:	f844 1c04 	str.w	r1, [r4, #-4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	d1f5      	bne.n	8000cc8 <HAL_FDCAN_RxFifo0Callback+0x54>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8000cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8000d48 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8000cde:	2101      	movs	r1, #1
 8000ce0:	a802      	add	r0, sp, #8
	  this->_M_impl._M_finish =
 8000ce2:	9703      	str	r7, [sp, #12]
 8000ce4:	f7ff ff1d 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8000ce8:	4681      	mov	r9, r0
      pointer __new_start(this->_M_allocate(__len));
 8000cea:	f7ff fddb 	bl	80008a4 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000cee:	462a      	mov	r2, r5
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	f803 8b01 	strb.w	r8, [r3], #1
 8000cf8:	f852 1b04 	ldr.w	r1, [r2], #4
 8000cfc:	42ba      	cmp	r2, r7
 8000cfe:	f843 1b04 	str.w	r1, [r3], #4
 8000d02:	d1f9      	bne.n	8000cf8 <HAL_FDCAN_RxFifo0Callback+0x84>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000d04:	4628      	mov	r0, r5
 8000d06:	2140      	movs	r1, #64	@ 0x40
 8000d08:	f01d f95a 	bl	801dfc0 <_ZdlPvj>
      return __result + __count;
 8000d0c:	f104 0341 	add.w	r3, r4, #65	@ 0x41
      this->_M_impl._M_start = __new_start;
 8000d10:	9402      	str	r4, [sp, #8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000d12:	444c      	add	r4, r9
		communication.Process(ID, received_data, &success);
 8000d14:	a902      	add	r1, sp, #8
 8000d16:	a805      	add	r0, sp, #20
      this->_M_impl._M_finish = __new_finish;
 8000d18:	9303      	str	r3, [sp, #12]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000d1a:	9404      	str	r4, [sp, #16]
 8000d1c:	f7ff ff90 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8000d20:	f10d 0307 	add.w	r3, sp, #7
 8000d24:	aa05      	add	r2, sp, #20
 8000d26:	4631      	mov	r1, r6
 8000d28:	4806      	ldr	r0, [pc, #24]	@ (8000d44 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000d2a:	f013 fa15 	bl	8014158 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>
      }
 8000d2e:	a805      	add	r0, sp, #20
 8000d30:	f7ff fed6 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		communication.ActivateReception(ID);
 8000d34:	4631      	mov	r1, r6
 8000d36:	4803      	ldr	r0, [pc, #12]	@ (8000d44 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000d38:	f00f fdf2 	bl	8010920 <_ZN13Communication17ActivateReceptionEh>
 8000d3c:	a802      	add	r0, sp, #8
 8000d3e:	f7ff fecf 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8000d42:	e7b0      	b.n	8000ca6 <HAL_FDCAN_RxFifo0Callback+0x32>
 8000d44:	240018fc 	.word	0x240018fc
 8000d48:	0801f20c 	.word	0x0801f20c

08000d4c <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_>:
	vector(_InputIterator __first, _InputIterator __last,
 8000d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000d4e:	2300      	movs	r3, #0

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000d50:	1a57      	subs	r7, r2, r1
	vector(_InputIterator __first, _InputIterator __last,
 8000d52:	4604      	mov	r4, r0
 8000d54:	460d      	mov	r5, r1
 8000d56:	4616      	mov	r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000d58:	6083      	str	r3, [r0, #8]
 8000d5a:	e9c0 3300 	strd	r3, r3, [r0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000d5e:	d502      	bpl.n	8000d66 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_+0x1a>
	  __throw_length_error(
 8000d60:	4808      	ldr	r0, [pc, #32]	@ (8000d84 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_+0x38>)
 8000d62:	f01d fa07 	bl	801e174 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000d66:	4638      	mov	r0, r7
 8000d68:	f7ff fd9c 	bl	80008a4 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000d6c:	4407      	add	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000d6e:	4602      	mov	r2, r0
 8000d70:	6020      	str	r0, [r4, #0]
			      _Category>::__copy_m(__first, __last, __result);
 8000d72:	4631      	mov	r1, r6
 8000d74:	4628      	mov	r0, r5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000d76:	60a7      	str	r7, [r4, #8]
 8000d78:	f7ff ff56 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8000d7c:	6060      	str	r0, [r4, #4]
	}
 8000d7e:	4620      	mov	r0, r4
 8000d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d82:	bf00      	nop
 8000d84:	0801f226 	.word	0x0801f226

08000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>:
      vector(initializer_list<value_type> __l,
 8000d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d8a:	ab02      	add	r3, sp, #8
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	460e      	mov	r6, r1
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }

      // Number of elements.
      constexpr size_type
      size() const noexcept { return _M_len; }
 8000d90:	4615      	mov	r5, r2
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8000d92:	188f      	adds	r7, r1, r2
 8000d94:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000d98:	2300      	movs	r3, #0
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000d9a:	429a      	cmp	r2, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000d9c:	6083      	str	r3, [r0, #8]
 8000d9e:	e9c0 3300 	strd	r3, r3, [r0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000da2:	da02      	bge.n	8000daa <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_+0x22>
	  __throw_length_error(
 8000da4:	4808      	ldr	r0, [pc, #32]	@ (8000dc8 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_+0x40>)
 8000da6:	f01d f9e5 	bl	801e174 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000daa:	4610      	mov	r0, r2
 8000dac:	f7ff fd7a 	bl	80008a4 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000db0:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000db2:	4602      	mov	r2, r0
 8000db4:	6020      	str	r0, [r4, #0]
 8000db6:	4639      	mov	r1, r7
 8000db8:	4630      	mov	r0, r6
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000dba:	60a5      	str	r5, [r4, #8]
 8000dbc:	f7ff ff34 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8000dc0:	6060      	str	r0, [r4, #4]
      }
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	b003      	add	sp, #12
 8000dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc8:	0801f226 	.word	0x0801f226

08000dcc <main>:
{
 8000dcc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000dd0:	b0c1      	sub	sp, #260	@ 0x104
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd2:	4dcf      	ldr	r5, [pc, #828]	@ (8001110 <main+0x344>)
  HAL_Init();
 8000dd4:	f002 fb5e 	bl	8003494 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2400      	movs	r4, #0
  SystemClock_Config();
 8000dda:	f7ff fdb1 	bl	8000940 <_Z18SystemClock_Configv>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2601      	movs	r6, #1
  PeriphCommonClock_Config();
 8000de0:	f7ff fe38 	bl	8000a54 <_Z24PeriphCommonClock_Configv>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	2214      	movs	r2, #20
 8000de6:	2100      	movs	r1, #0
 8000de8:	a835      	add	r0, sp, #212	@ 0xd4
 8000dea:	f01e f8a5 	bl	801ef38 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dee:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOE, LED_STATUS_Pin|LED_CONTROLLER_Pin|LED_FAULT_Pin|MOTOR_IN1_Pin
 8000df2:	2200      	movs	r2, #0
 8000df4:	f64c 211c 	movw	r1, #51740	@ 0xca1c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df8:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOE, LED_STATUS_Pin|LED_CONTROLLER_Pin|LED_FAULT_Pin|MOTOR_IN1_Pin
 8000dfc:	48c5      	ldr	r0, [pc, #788]	@ (8001114 <main+0x348>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dfe:	f04f 0908 	mov.w	r9, #8
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e02:	2780      	movs	r7, #128	@ 0x80
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e04:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000e08:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e0c:	f003 0310 	and.w	r3, r3, #16
 8000e10:	9307      	str	r3, [sp, #28]
 8000e12:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e14:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e1c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000e20:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e28:	9308      	str	r3, [sp, #32]
 8000e2a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000e38:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e44:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000e50:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	930a      	str	r3, [sp, #40]	@ 0x28
 8000e5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000e68:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000e72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e74:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e78:	f043 0308 	orr.w	r3, r3, #8
 8000e7c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000e80:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	930c      	str	r3, [sp, #48]	@ 0x30
 8000e8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOE, LED_STATUS_Pin|LED_CONTROLLER_Pin|LED_FAULT_Pin|MOTOR_IN1_Pin
 8000e8c:	f005 fe05 	bl	8006a9a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED_USER1_Pin|LED_USER2_Pin|LED_USER3_Pin|LED_UART_FRONT_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f248 01b0 	movw	r1, #32944	@ 0x80b0
 8000e96:	48a0      	ldr	r0, [pc, #640]	@ (8001118 <main+0x34c>)
 8000e98:	f005 fdff 	bl	8006a9a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SHIFTER_EN_GPIO_Port, SHIFTER_EN_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	489e      	ldr	r0, [pc, #632]	@ (800111c <main+0x350>)
 8000ea2:	f005 fdfa 	bl	8006a9a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED_RS485_Pin|LED_UART_BACK_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000eac:	489c      	ldr	r0, [pc, #624]	@ (8001120 <main+0x354>)
 8000eae:	f005 fdf4 	bl	8006a9a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_FDCAN1_GPIO_Port, LED_FDCAN1_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	489b      	ldr	r0, [pc, #620]	@ (8001124 <main+0x358>)
 8000eb8:	f005 fdef 	bl	8006a9a <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	f64c 231c 	movw	r3, #51740	@ 0xca1c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec0:	a935      	add	r1, sp, #212	@ 0xd4
 8000ec2:	4894      	ldr	r0, [pc, #592]	@ (8001114 <main+0x348>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	e9cd 3635 	strd	r3, r6, [sp, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	e9cd 4437 	strd	r4, r4, [sp, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ecc:	f005 fcce 	bl	800686c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_USER1_Pin|LED_USER2_Pin|LED_USER3_Pin|LED_UART_FRONT_Pin;
 8000ed0:	f248 03b0 	movw	r3, #32944	@ 0x80b0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	a935      	add	r1, sp, #212	@ 0xd4
 8000ed6:	4890      	ldr	r0, [pc, #576]	@ (8001118 <main+0x34c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	e9cd 3635 	strd	r3, r6, [sp, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	e9cd 4437 	strd	r4, r4, [sp, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f005 fcc4 	bl	800686c <HAL_GPIO_Init>
  HAL_GPIO_Init(SHIFTER_EN_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	a935      	add	r1, sp, #212	@ 0xd4
 8000ee6:	488d      	ldr	r0, [pc, #564]	@ (800111c <main+0x350>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	e9cd 6635 	strd	r6, r6, [sp, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	e9cd 4437 	strd	r4, r4, [sp, #220]	@ 0xdc
  HAL_GPIO_Init(SHIFTER_EN_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f005 fcbc 	bl	800686c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_RS485_Pin|LED_UART_BACK_Pin;
 8000ef4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef8:	a935      	add	r1, sp, #212	@ 0xd4
 8000efa:	4889      	ldr	r0, [pc, #548]	@ (8001120 <main+0x354>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	e9cd 3635 	strd	r3, r6, [sp, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	e9cd 4437 	strd	r4, r4, [sp, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f04:	f005 fcb2 	bl	800686c <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_FDCAN1_GPIO_Port, &GPIO_InitStruct);
 8000f08:	a935      	add	r1, sp, #212	@ 0xd4
 8000f0a:	4886      	ldr	r0, [pc, #536]	@ (8001124 <main+0x358>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	e9cd 6635 	strd	r6, r6, [sp, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	e9cd 4437 	strd	r4, r4, [sp, #220]	@ 0xdc
  HAL_GPIO_Init(LED_FDCAN1_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f005 fcaa 	bl	800686c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f18:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(WATER_DETECTION_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	a935      	add	r1, sp, #212	@ 0xd4
 8000f1e:	4881      	ldr	r0, [pc, #516]	@ (8001124 <main+0x358>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	9437      	str	r4, [sp, #220]	@ 0xdc
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f22:	e9cd 9335 	strd	r9, r3, [sp, #212]	@ 0xd4
  HAL_GPIO_Init(WATER_DETECTION_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f005 fca1 	bl	800686c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000f2a:	4622      	mov	r2, r4
 8000f2c:	2105      	movs	r1, #5
 8000f2e:	2009      	movs	r0, #9
 8000f30:	f003 fb22 	bl	8004578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f34:	2009      	movs	r0, #9
 8000f36:	f003 fb2f 	bl	8004598 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f3a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000f3e:	4622      	mov	r2, r4
 8000f40:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f42:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000f44:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f46:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8000f4a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8000f4e:	4033      	ands	r3, r6
 8000f50:	9305      	str	r3, [sp, #20]
 8000f52:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f54:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8000f60:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  htim1.Instance = TIM1;
 8000f64:	4d70      	ldr	r5, [pc, #448]	@ (8001128 <main+0x35c>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	9306      	str	r3, [sp, #24]
 8000f6c:	9b06      	ldr	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000f6e:	f003 fb03 	bl	8004578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f72:	200b      	movs	r0, #11
 8000f74:	f003 fb10 	bl	8004598 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000f78:	4622      	mov	r2, r4
 8000f7a:	2105      	movs	r1, #5
 8000f7c:	200c      	movs	r0, #12
 8000f7e:	f003 fafb 	bl	8004578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f82:	200c      	movs	r0, #12
 8000f84:	f003 fb08 	bl	8004598 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000f88:	4622      	mov	r2, r4
 8000f8a:	2105      	movs	r1, #5
 8000f8c:	200d      	movs	r0, #13
 8000f8e:	f003 faf3 	bl	8004578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f92:	200d      	movs	r0, #13
 8000f94:	f003 fb00 	bl	8004598 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000f98:	4622      	mov	r2, r4
 8000f9a:	2105      	movs	r1, #5
 8000f9c:	200e      	movs	r0, #14
 8000f9e:	f003 faeb 	bl	8004578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000fa2:	200e      	movs	r0, #14
 8000fa4:	f003 faf8 	bl	8004598 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000fa8:	4622      	mov	r2, r4
 8000faa:	2105      	movs	r1, #5
 8000fac:	200f      	movs	r0, #15
 8000fae:	f003 fae3 	bl	8004578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000fb2:	200f      	movs	r0, #15
 8000fb4:	f003 faf0 	bl	8004598 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000fb8:	4622      	mov	r2, r4
 8000fba:	2105      	movs	r1, #5
 8000fbc:	2010      	movs	r0, #16
 8000fbe:	f003 fadb 	bl	8004578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fc2:	2010      	movs	r0, #16
 8000fc4:	f003 fae8 	bl	8004598 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000fc8:	4622      	mov	r2, r4
 8000fca:	2105      	movs	r1, #5
 8000fcc:	2011      	movs	r0, #17
 8000fce:	f003 fad3 	bl	8004578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000fd2:	2011      	movs	r0, #17
 8000fd4:	f003 fae0 	bl	8004598 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000fd8:	4622      	mov	r2, r4
 8000fda:	2105      	movs	r1, #5
 8000fdc:	202f      	movs	r0, #47	@ 0x2f
 8000fde:	f003 facb 	bl	8004578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000fe2:	202f      	movs	r0, #47	@ 0x2f
 8000fe4:	f003 fad8 	bl	8004598 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000fe8:	4622      	mov	r2, r4
 8000fea:	2105      	movs	r1, #5
 8000fec:	2038      	movs	r0, #56	@ 0x38
 8000fee:	f003 fac3 	bl	8004578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ff2:	2038      	movs	r0, #56	@ 0x38
 8000ff4:	f003 fad0 	bl	8004598 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000ff8:	4622      	mov	r2, r4
 8000ffa:	2105      	movs	r1, #5
 8000ffc:	2039      	movs	r0, #57	@ 0x39
 8000ffe:	f003 fabb 	bl	8004578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001002:	2039      	movs	r0, #57	@ 0x39
 8001004:	f003 fac8 	bl	8004598 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001008:	4622      	mov	r2, r4
 800100a:	2105      	movs	r1, #5
 800100c:	203a      	movs	r0, #58	@ 0x3a
 800100e:	f003 fab3 	bl	8004578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001012:	203a      	movs	r0, #58	@ 0x3a
 8001014:	f003 fac0 	bl	8004598 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001018:	4622      	mov	r2, r4
 800101a:	2105      	movs	r1, #5
 800101c:	203b      	movs	r0, #59	@ 0x3b
 800101e:	f003 faab 	bl	8004578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001022:	203b      	movs	r0, #59	@ 0x3b
 8001024:	f003 fab8 	bl	8004598 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001028:	4622      	mov	r2, r4
 800102a:	2105      	movs	r1, #5
 800102c:	203c      	movs	r0, #60	@ 0x3c
 800102e:	f003 faa3 	bl	8004578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001032:	203c      	movs	r0, #60	@ 0x3c
 8001034:	f003 fab0 	bl	8004598 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8001038:	4622      	mov	r2, r4
 800103a:	2105      	movs	r1, #5
 800103c:	2044      	movs	r0, #68	@ 0x44
 800103e:	f003 fa9b 	bl	8004578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001042:	2044      	movs	r0, #68	@ 0x44
 8001044:	f003 faa8 	bl	8004598 <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001048:	2210      	movs	r2, #16
 800104a:	4621      	mov	r1, r4
 800104c:	a82a      	add	r0, sp, #168	@ 0xa8
 800104e:	f01d ff73 	bl	801ef38 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001052:	221c      	movs	r2, #28
 8001054:	4621      	mov	r1, r4
 8001056:	a82e      	add	r0, sp, #184	@ 0xb8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	9429      	str	r4, [sp, #164]	@ 0xa4
 800105a:	e9cd 4427 	strd	r4, r4, [sp, #156]	@ 0x9c
  TIM_OC_InitTypeDef sConfigOC = {0};
 800105e:	f01d ff6b 	bl	801ef38 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001062:	222c      	movs	r2, #44	@ 0x2c
 8001064:	4621      	mov	r1, r4
 8001066:	a835      	add	r0, sp, #212	@ 0xd4
 8001068:	f01d ff66 	bl	801ef38 <memset>
  htim1.Instance = TIM1;
 800106c:	4b2f      	ldr	r3, [pc, #188]	@ (800112c <main+0x360>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800106e:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	60ac      	str	r4, [r5, #8]
  htim1.Init.RepetitionCounter = 0;
 8001072:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001074:	61af      	str	r7, [r5, #24]
  htim1.Init.Prescaler = 0;
 8001076:	e9c5 3400 	strd	r3, r4, [r5]
  htim1.Init.Period = 24000;
 800107a:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107e:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001082:	f00a f90f 	bl	800b2a4 <HAL_TIM_Base_Init>
 8001086:	b108      	cbz	r0, 800108c <main+0x2c0>
 8001088:	b672      	cpsid	i
  while (1)
 800108a:	e7fe      	b.n	800108a <main+0x2be>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108c:	f44f 5880 	mov.w	r8, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001090:	a92a      	add	r1, sp, #168	@ 0xa8
 8001092:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001094:	f8cd 80a8 	str.w	r8, [sp, #168]	@ 0xa8
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001098:	f00a fab0 	bl	800b5fc <HAL_TIM_ConfigClockSource>
 800109c:	b108      	cbz	r0, 80010a2 <main+0x2d6>
 800109e:	b672      	cpsid	i
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <main+0x2d4>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010a2:	4628      	mov	r0, r5
 80010a4:	f00a f92e 	bl	800b304 <HAL_TIM_PWM_Init>
 80010a8:	b108      	cbz	r0, 80010ae <main+0x2e2>
 80010aa:	b672      	cpsid	i
  while (1)
 80010ac:	e7fe      	b.n	80010ac <main+0x2e0>
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010ae:	e9cd 0027 	strd	r0, r0, [sp, #156]	@ 0x9c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b2:	9029      	str	r0, [sp, #164]	@ 0xa4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010b4:	a927      	add	r1, sp, #156	@ 0x9c
 80010b6:	4628      	mov	r0, r5
 80010b8:	f00a fc68 	bl	800b98c <HAL_TIMEx_MasterConfigSynchronization>
 80010bc:	b108      	cbz	r0, 80010c2 <main+0x2f6>
 80010be:	b672      	cpsid	i
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <main+0x2f4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c2:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010c4:	9034      	str	r0, [sp, #208]	@ 0xd0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010c6:	464a      	mov	r2, r9
 80010c8:	a92e      	add	r1, sp, #184	@ 0xb8
  sConfigOC.Pulse = 0;
 80010ca:	e9cd 302e 	strd	r3, r0, [sp, #184]	@ 0xb8
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ce:	e9cd 0030 	strd	r0, r0, [sp, #192]	@ 0xc0
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d2:	e9cd 0032 	strd	r0, r0, [sp, #200]	@ 0xc8
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010d6:	4628      	mov	r0, r5
 80010d8:	f00a f9e6 	bl	800b4a8 <HAL_TIM_PWM_ConfigChannel>
 80010dc:	b108      	cbz	r0, 80010e2 <main+0x316>
 80010de:	b672      	cpsid	i
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <main+0x314>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010e6:	9039      	str	r0, [sp, #228]	@ 0xe4
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010e8:	903c      	str	r0, [sp, #240]	@ 0xf0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010ea:	a935      	add	r1, sp, #212	@ 0xd4
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010ec:	903f      	str	r0, [sp, #252]	@ 0xfc
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010ee:	e9cd 303a 	strd	r3, r0, [sp, #232]	@ 0xe8
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010f6:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  sBreakDeadTimeConfig.DeadTime = 0;
 80010fa:	e9cd 0037 	strd	r0, r0, [sp, #220]	@ 0xdc
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010fe:	e9cd 303d 	strd	r3, r0, [sp, #244]	@ 0xf4
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001102:	4628      	mov	r0, r5
 8001104:	f00a fc92 	bl	800ba2c <HAL_TIMEx_ConfigBreakDeadTime>
 8001108:	4604      	mov	r4, r0
 800110a:	b188      	cbz	r0, 8001130 <main+0x364>
 800110c:	b672      	cpsid	i
  while (1)
 800110e:	e7fe      	b.n	800110e <main+0x342>
 8001110:	58024400 	.word	0x58024400
 8001114:	58021000 	.word	0x58021000
 8001118:	58020000 	.word	0x58020000
 800111c:	58020400 	.word	0x58020400
 8001120:	58020800 	.word	0x58020800
 8001124:	58020c00 	.word	0x58020c00
 8001128:	24002324 	.word	0x24002324
 800112c:	40010000 	.word	0x40010000
  HAL_TIM_MspPostInit(&htim1);
 8001130:	4628      	mov	r0, r5
  htim2.Instance = TIM2;
 8001132:	4da9      	ldr	r5, [pc, #676]	@ (80013d8 <main+0x60c>)
  HAL_TIM_MspPostInit(&htim1);
 8001134:	f001 fcb6 	bl	8002aa4 <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001138:	4621      	mov	r1, r4
 800113a:	221c      	movs	r2, #28
 800113c:	a836      	add	r0, sp, #216	@ 0xd8
 800113e:	f01d fefb 	bl	801ef38 <memset>
  htim2.Instance = TIM2;
 8001142:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001146:	a935      	add	r1, sp, #212	@ 0xd4
 8001148:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114a:	9430      	str	r4, [sp, #192]	@ 0xc0
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	60ac      	str	r4, [r5, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800114e:	61af      	str	r7, [r5, #24]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001150:	9637      	str	r6, [sp, #220]	@ 0xdc
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001152:	963b      	str	r6, [sp, #236]	@ 0xec
  htim2.Init.Prescaler = 0;
 8001154:	e9c5 3400 	strd	r3, r4, [r5]
  htim2.Init.Period = 4294967295;
 8001158:	f04f 33ff 	mov.w	r3, #4294967295
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115c:	e9c5 3403 	strd	r3, r4, [r5, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001160:	2303      	movs	r3, #3
 8001162:	9335      	str	r3, [sp, #212]	@ 0xd4
  sConfig.IC1Filter = 10;
 8001164:	230a      	movs	r3, #10
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001166:	e9cd 442e 	strd	r4, r4, [sp, #184]	@ 0xb8
  sConfig.IC1Filter = 10;
 800116a:	9339      	str	r3, [sp, #228]	@ 0xe4
  sConfig.IC2Filter = 10;
 800116c:	933d      	str	r3, [sp, #244]	@ 0xf4
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800116e:	f00a f8f9 	bl	800b364 <HAL_TIM_Encoder_Init>
 8001172:	b108      	cbz	r0, 8001178 <main+0x3ac>
 8001174:	b672      	cpsid	i
  while (1)
 8001176:	e7fe      	b.n	8001176 <main+0x3aa>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001178:	902e      	str	r0, [sp, #184]	@ 0xb8
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800117a:	a92e      	add	r1, sp, #184	@ 0xb8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117c:	9030      	str	r0, [sp, #192]	@ 0xc0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800117e:	4628      	mov	r0, r5
 8001180:	f00a fc04 	bl	800b98c <HAL_TIMEx_MasterConfigSynchronization>
 8001184:	4604      	mov	r4, r0
 8001186:	b108      	cbz	r0, 800118c <main+0x3c0>
 8001188:	b672      	cpsid	i
  while (1)
 800118a:	e7fe      	b.n	800118a <main+0x3be>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118c:	4601      	mov	r1, r0
 800118e:	2210      	movs	r2, #16
 8001190:	a82e      	add	r0, sp, #184	@ 0xb8
  htim3.Instance = TIM3;
 8001192:	4d92      	ldr	r5, [pc, #584]	@ (80013dc <main+0x610>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001194:	f01d fed0 	bl	801ef38 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001198:	221c      	movs	r2, #28
 800119a:	4621      	mov	r1, r4
 800119c:	a835      	add	r0, sp, #212	@ 0xd4
  htim3.Init.Prescaler = 24;
 800119e:	f8df b268 	ldr.w	fp, [pc, #616]	@ 8001408 <main+0x63c>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a2:	942c      	str	r4, [sp, #176]	@ 0xb0
 80011a4:	e9cd 442a 	strd	r4, r4, [sp, #168]	@ 0xa8
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a8:	f01d fec6 	bl	801ef38 <memset>
  htim3.Init.Prescaler = 24;
 80011ac:	2318      	movs	r3, #24
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ae:	4628      	mov	r0, r5
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b0:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011b2:	61af      	str	r7, [r5, #24]
  htim3.Init.Prescaler = 24;
 80011b4:	e9c5 b300 	strd	fp, r3, [r5]
  htim3.Init.Period = 30000;
 80011b8:	f247 5330 	movw	r3, #30000	@ 0x7530
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011c0:	f00a f870 	bl	800b2a4 <HAL_TIM_Base_Init>
 80011c4:	b108      	cbz	r0, 80011ca <main+0x3fe>
 80011c6:	b672      	cpsid	i
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <main+0x3fc>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011ca:	a92e      	add	r1, sp, #184	@ 0xb8
 80011cc:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ce:	f8cd 80b8 	str.w	r8, [sp, #184]	@ 0xb8
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011d2:	f00a fa13 	bl	800b5fc <HAL_TIM_ConfigClockSource>
 80011d6:	b108      	cbz	r0, 80011dc <main+0x410>
 80011d8:	b672      	cpsid	i
  while (1)
 80011da:	e7fe      	b.n	80011da <main+0x40e>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011dc:	487f      	ldr	r0, [pc, #508]	@ (80013dc <main+0x610>)
 80011de:	f00a f891 	bl	800b304 <HAL_TIM_PWM_Init>
 80011e2:	b108      	cbz	r0, 80011e8 <main+0x41c>
 80011e4:	b672      	cpsid	i
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <main+0x41a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e8:	902a      	str	r0, [sp, #168]	@ 0xa8
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ea:	a92a      	add	r1, sp, #168	@ 0xa8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ec:	902c      	str	r0, [sp, #176]	@ 0xb0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ee:	487b      	ldr	r0, [pc, #492]	@ (80013dc <main+0x610>)
 80011f0:	f00a fbcc 	bl	800b98c <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	4602      	mov	r2, r0
 80011f6:	b108      	cbz	r0, 80011fc <main+0x430>
 80011f8:	b672      	cpsid	i
  while (1)
 80011fa:	e7fe      	b.n	80011fa <main+0x42e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011fc:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fe:	9037      	str	r0, [sp, #220]	@ 0xdc
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001200:	9039      	str	r0, [sp, #228]	@ 0xe4
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001202:	a935      	add	r1, sp, #212	@ 0xd4
  sConfigOC.Pulse = 0;
 8001204:	e9cd 3035 	strd	r3, r0, [sp, #212]	@ 0xd4
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001208:	4874      	ldr	r0, [pc, #464]	@ (80013dc <main+0x610>)
 800120a:	f00a f94d 	bl	800b4a8 <HAL_TIM_PWM_ConfigChannel>
 800120e:	b108      	cbz	r0, 8001214 <main+0x448>
 8001210:	b672      	cpsid	i
  while (1)
 8001212:	e7fe      	b.n	8001212 <main+0x446>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001214:	2204      	movs	r2, #4
 8001216:	a935      	add	r1, sp, #212	@ 0xd4
 8001218:	4870      	ldr	r0, [pc, #448]	@ (80013dc <main+0x610>)
 800121a:	f00a f945 	bl	800b4a8 <HAL_TIM_PWM_ConfigChannel>
 800121e:	4605      	mov	r5, r0
 8001220:	b108      	cbz	r0, 8001226 <main+0x45a>
 8001222:	b672      	cpsid	i
  while (1)
 8001224:	e7fe      	b.n	8001224 <main+0x458>
  HAL_TIM_MspPostInit(&htim3);
 8001226:	486d      	ldr	r0, [pc, #436]	@ (80013dc <main+0x610>)
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001228:	2704      	movs	r7, #4
  hadc1.Instance = ADC1;
 800122a:	4c6d      	ldr	r4, [pc, #436]	@ (80013e0 <main+0x614>)
  HAL_TIM_MspPostInit(&htim3);
 800122c:	f001 fc3a 	bl	8002aa4 <HAL_TIM_MspPostInit>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001230:	221c      	movs	r2, #28
 8001232:	4629      	mov	r1, r5
 8001234:	a835      	add	r0, sp, #212	@ 0xd4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001236:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 800140c <main+0x640>
  hadc1.Init.NbrOfConversion = 1;
 800123a:	2601      	movs	r6, #1
  ADC_MultiModeTypeDef multimode = {0};
 800123c:	9530      	str	r5, [sp, #192]	@ 0xc0
 800123e:	e9cd 552e 	strd	r5, r5, [sp, #184]	@ 0xb8
  ADC_ChannelConfTypeDef sConfig = {0};
 8001242:	f01d fe79 	bl	801ef38 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001246:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800124a:	4620      	mov	r0, r4
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800124c:	6127      	str	r7, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800124e:	82a5      	strh	r5, [r4, #20]
  hadc1.Init.NbrOfConversion = 1;
 8001250:	61a6      	str	r6, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001252:	7725      	strb	r5, [r4, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001254:	6365      	str	r5, [r4, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001256:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 800125a:	e9c4 a300 	strd	sl, r3, [r4]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800125e:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001262:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001266:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800126a:	f002 ff0b 	bl	8004084 <HAL_ADC_Init>
 800126e:	b108      	cbz	r0, 8001274 <main+0x4a8>
 8001270:	b672      	cpsid	i
  while (1)
 8001272:	e7fe      	b.n	8001272 <main+0x4a6>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001274:	902e      	str	r0, [sp, #184]	@ 0xb8
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001276:	a92e      	add	r1, sp, #184	@ 0xb8
 8001278:	4620      	mov	r0, r4
 800127a:	f003 f883 	bl	8004384 <HAL_ADCEx_MultiModeConfigChannel>
 800127e:	b108      	cbz	r0, 8001284 <main+0x4b8>
 8001280:	b672      	cpsid	i
  while (1)
 8001282:	e7fe      	b.n	8001282 <main+0x4b6>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001284:	2306      	movs	r3, #6
 8001286:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 8001410 <main+0x644>
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800128a:	2503      	movs	r5, #3
  sConfig.OffsetSignedSaturation = DISABLE;
 800128c:	f88d 00ed 	strb.w	r0, [sp, #237]	@ 0xed
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001290:	a935      	add	r1, sp, #212	@ 0xd4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001292:	e9cd 9335 	strd	r9, r3, [sp, #212]	@ 0xd4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001296:	f240 73ff 	movw	r3, #2047	@ 0x7ff
  sConfig.Offset = 0;
 800129a:	e9cd 7039 	strd	r7, r0, [sp, #228]	@ 0xe4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129e:	4620      	mov	r0, r4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012a0:	e9cd 5337 	strd	r5, r3, [sp, #220]	@ 0xdc
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a4:	f002 fa1a 	bl	80036dc <HAL_ADC_ConfigChannel>
 80012a8:	4602      	mov	r2, r0
 80012aa:	b108      	cbz	r0, 80012b0 <main+0x4e4>
 80012ac:	b672      	cpsid	i
  while (1)
 80012ae:	e7fe      	b.n	80012ae <main+0x4e2>
  hfdcan1.Instance = FDCAN1;
 80012b0:	484c      	ldr	r0, [pc, #304]	@ (80013e4 <main+0x618>)
  hfdcan1.Init.NominalTimeSeg1 = 79;
 80012b2:	f04f 0914 	mov.w	r9, #20
  hfdcan1.Instance = FDCAN1;
 80012b6:	4b4c      	ldr	r3, [pc, #304]	@ (80013e8 <main+0x61c>)
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80012b8:	f04f 080a 	mov.w	r8, #10
 80012bc:	2412      	movs	r4, #18
  hfdcan1.Init.NominalTimeSeg1 = 79;
 80012be:	f04f 0b4f 	mov.w	fp, #79	@ 0x4f
  hfdcan1.Instance = FDCAN1;
 80012c2:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.DataTimeSeg1 = 21;
 80012c4:	f04f 0a15 	mov.w	sl, #21
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80012c8:	f44f 7340 	mov.w	r3, #768	@ 0x300
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80012cc:	8202      	strh	r2, [r0, #16]
  hfdcan1.Init.ProtocolException = DISABLE;
 80012ce:	7482      	strb	r2, [r0, #18]
  hfdcan1.Init.ExtFiltersNbr = 0;
 80012d0:	63c2      	str	r2, [r0, #60]	@ 0x3c
  hfdcan1.Init.NominalPrescaler = 1;
 80012d2:	6146      	str	r6, [r0, #20]
  hfdcan1.Init.DataSyncJumpWidth = 3;
 80012d4:	6285      	str	r5, [r0, #40]	@ 0x28
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 80012d6:	6684      	str	r4, [r0, #104]	@ 0x68
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80012d8:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hfdcan1.Init.StdFiltersNbr = 0;
 80012dc:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80012e0:	e9c0 2712 	strd	r2, r7, [r0, #72]	@ 0x48
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80012e4:	e9c0 2714 	strd	r2, r7, [r0, #80]	@ 0x50
  hfdcan1.Init.TxBuffersNbr = 0;
 80012e8:	e9c0 2216 	strd	r2, r2, [r0, #88]	@ 0x58
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80012ec:	e9c0 8218 	strd	r8, r2, [r0, #96]	@ 0x60
  hfdcan1.Init.NominalTimeSeg1 = 79;
 80012f0:	e9c0 9b06 	strd	r9, fp, [r0, #24]
  hfdcan1.Init.DataPrescaler = 1;
 80012f4:	e9c0 9608 	strd	r9, r6, [r0, #32]
  hfdcan1.Init.DataTimeSeg2 = 3;
 80012f8:	e9c0 a50b 	strd	sl, r5, [r0, #44]	@ 0x2c
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80012fc:	e9c0 8410 	strd	r8, r4, [r0, #64]	@ 0x40
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001300:	f004 fe26 	bl	8005f50 <HAL_FDCAN_Init>
 8001304:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001308:	4602      	mov	r2, r0
 800130a:	b108      	cbz	r0, 8001310 <main+0x544>
 800130c:	b672      	cpsid	i
  while (1)
 800130e:	e7fe      	b.n	800130e <main+0x542>
  hfdcan2.Instance = FDCAN2;
 8001310:	4836      	ldr	r0, [pc, #216]	@ (80013ec <main+0x620>)
 8001312:	4937      	ldr	r1, [pc, #220]	@ (80013f0 <main+0x624>)
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001314:	8202      	strh	r2, [r0, #16]
  hfdcan2.Instance = FDCAN2;
 8001316:	6001      	str	r1, [r0, #0]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001318:	7482      	strb	r2, [r0, #18]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800131a:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hfdcan2.Init.MessageRAMOffset = 360;
 800131e:	f44f 73b4 	mov.w	r3, #360	@ 0x168
  hfdcan2.Init.NominalSyncJumpWidth = 20;
 8001322:	e9c0 6905 	strd	r6, r9, [r0, #20]
  hfdcan2.Init.StdFiltersNbr = 0;
 8001326:	e9c0 320d 	strd	r3, r2, [r0, #52]	@ 0x34
  hfdcan2.Init.NominalTimeSeg2 = 20;
 800132a:	e9c0 b907 	strd	fp, r9, [r0, #28]
  hfdcan2.Init.DataSyncJumpWidth = 3;
 800132e:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  hfdcan2.Init.DataTimeSeg2 = 3;
 8001332:	e9c0 a50b 	strd	sl, r5, [r0, #44]	@ 0x2c
  hfdcan2.Init.RxFifo0ElmtsNbr = 10;
 8001336:	e9c0 280f 	strd	r2, r8, [r0, #60]	@ 0x3c
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800133a:	e9c0 4211 	strd	r4, r2, [r0, #68]	@ 0x44
  hfdcan2.Init.RxBuffersNbr = 0;
 800133e:	e9c0 7213 	strd	r7, r2, [r0, #76]	@ 0x4c
  hfdcan2.Init.TxEventsNbr = 0;
 8001342:	e9c0 7215 	strd	r7, r2, [r0, #84]	@ 0x54
  hfdcan2.Init.TxFifoQueueElmtsNbr = 10;
 8001346:	e9c0 2817 	strd	r2, r8, [r0, #92]	@ 0x5c
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 800134a:	e9c0 2419 	strd	r2, r4, [r0, #100]	@ 0x64
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800134e:	f004 fdff 	bl	8005f50 <HAL_FDCAN_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	b108      	cbz	r0, 800135a <main+0x58e>
 8001356:	b672      	cpsid	i
  while (1)
 8001358:	e7fe      	b.n	8001358 <main+0x58c>
  hi2c1.Instance = I2C1;
 800135a:	4826      	ldr	r0, [pc, #152]	@ (80013f4 <main+0x628>)
  hi2c1.Init.Timing = 0x307075B1;
 800135c:	4a26      	ldr	r2, [pc, #152]	@ (80013f8 <main+0x62c>)
 800135e:	4d27      	ldr	r5, [pc, #156]	@ (80013fc <main+0x630>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001360:	6203      	str	r3, [r0, #32]
  hi2c1.Init.Timing = 0x307075B1;
 8001362:	e9c0 2500 	strd	r2, r5, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001366:	e9c0 3602 	strd	r3, r6, [r0, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800136a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800136e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001372:	f005 fdd9 	bl	8006f28 <HAL_I2C_Init>
 8001376:	b108      	cbz	r0, 800137c <main+0x5b0>
 8001378:	b672      	cpsid	i
  while (1)
 800137a:	e7fe      	b.n	800137a <main+0x5ae>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800137c:	2100      	movs	r1, #0
 800137e:	481d      	ldr	r0, [pc, #116]	@ (80013f4 <main+0x628>)
 8001380:	f007 f9e7 	bl	8008752 <HAL_I2CEx_ConfigAnalogFilter>
 8001384:	4601      	mov	r1, r0
 8001386:	b108      	cbz	r0, 800138c <main+0x5c0>
 8001388:	b672      	cpsid	i
  while (1)
 800138a:	e7fe      	b.n	800138a <main+0x5be>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800138c:	4819      	ldr	r0, [pc, #100]	@ (80013f4 <main+0x628>)
 800138e:	f007 fa0e 	bl	80087ae <HAL_I2CEx_ConfigDigitalFilter>
 8001392:	b108      	cbz	r0, 8001398 <main+0x5cc>
 8001394:	b672      	cpsid	i
  while (1)
 8001396:	e7fe      	b.n	8001396 <main+0x5ca>
  hi2c2.Instance = I2C2;
 8001398:	4c19      	ldr	r4, [pc, #100]	@ (8001400 <main+0x634>)
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800139a:	2601      	movs	r6, #1
  hi2c2.Instance = I2C2;
 800139c:	4b19      	ldr	r3, [pc, #100]	@ (8001404 <main+0x638>)
  hi2c2.Init.OwnAddress1 = 0;
 800139e:	60a0      	str	r0, [r4, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a0:	e9c4 6003 	strd	r6, r0, [r4, #12]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013a4:	e9c4 0005 	strd	r0, r0, [r4, #20]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a8:	e9c4 0007 	strd	r0, r0, [r4, #28]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013ac:	4620      	mov	r0, r4
  hi2c2.Init.Timing = 0x307075B1;
 80013ae:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013b2:	f005 fdb9 	bl	8006f28 <HAL_I2C_Init>
 80013b6:	4601      	mov	r1, r0
 80013b8:	b108      	cbz	r0, 80013be <main+0x5f2>
 80013ba:	b672      	cpsid	i
  while (1)
 80013bc:	e7fe      	b.n	80013bc <main+0x5f0>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013be:	4620      	mov	r0, r4
 80013c0:	f007 f9c7 	bl	8008752 <HAL_I2CEx_ConfigAnalogFilter>
 80013c4:	4601      	mov	r1, r0
 80013c6:	b108      	cbz	r0, 80013cc <main+0x600>
 80013c8:	b672      	cpsid	i
  while (1)
 80013ca:	e7fe      	b.n	80013ca <main+0x5fe>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013cc:	4620      	mov	r0, r4
 80013ce:	f007 f9ee 	bl	80087ae <HAL_I2CEx_ConfigDigitalFilter>
 80013d2:	b1f8      	cbz	r0, 8001414 <main+0x648>
 80013d4:	b672      	cpsid	i
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <main+0x60a>
 80013d8:	240022d8 	.word	0x240022d8
 80013dc:	2400228c 	.word	0x2400228c
 80013e0:	2400292c 	.word	0x2400292c
 80013e4:	240027c4 	.word	0x240027c4
 80013e8:	4000a000 	.word	0x4000a000
 80013ec:	24002724 	.word	0x24002724
 80013f0:	4000a400 	.word	0x4000a400
 80013f4:	240026d8 	.word	0x240026d8
 80013f8:	40005400 	.word	0x40005400
 80013fc:	307075b1 	.word	0x307075b1
 8001400:	2400268c 	.word	0x2400268c
 8001404:	40005800 	.word	0x40005800
 8001408:	40000400 	.word	0x40000400
 800140c:	40022000 	.word	0x40022000
 8001410:	14f00020 	.word	0x14f00020
  hi2c4.Instance = I2C4;
 8001414:	4ca1      	ldr	r4, [pc, #644]	@ (800169c <main+0x8d0>)
 8001416:	4ba2      	ldr	r3, [pc, #648]	@ (80016a0 <main+0x8d4>)
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001418:	6220      	str	r0, [r4, #32]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800141a:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c4.Init.OwnAddress2 = 0;
 800141e:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001422:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001426:	4620      	mov	r0, r4
  hi2c4.Init.Timing = 0x307075B1;
 8001428:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800142c:	f005 fd7c 	bl	8006f28 <HAL_I2C_Init>
 8001430:	4601      	mov	r1, r0
 8001432:	b108      	cbz	r0, 8001438 <main+0x66c>
 8001434:	b672      	cpsid	i
  while (1)
 8001436:	e7fe      	b.n	8001436 <main+0x66a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001438:	4620      	mov	r0, r4
 800143a:	f007 f98a 	bl	8008752 <HAL_I2CEx_ConfigAnalogFilter>
 800143e:	4601      	mov	r1, r0
 8001440:	b108      	cbz	r0, 8001446 <main+0x67a>
 8001442:	b672      	cpsid	i
  while (1)
 8001444:	e7fe      	b.n	8001444 <main+0x678>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001446:	4620      	mov	r0, r4
 8001448:	f007 f9b1 	bl	80087ae <HAL_I2CEx_ConfigDigitalFilter>
 800144c:	b108      	cbz	r0, 8001452 <main+0x686>
 800144e:	b672      	cpsid	i
  while (1)
 8001450:	e7fe      	b.n	8001450 <main+0x684>
  huart5.Instance = UART5;
 8001452:	4c94      	ldr	r4, [pc, #592]	@ (80016a4 <main+0x8d8>)
  huart5.Init.BaudRate = 115200;
 8001454:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001458:	f8df e278 	ldr.w	lr, [pc, #632]	@ 80016d4 <main+0x908>
  huart5.Init.Parity = UART_PARITY_NONE;
 800145c:	6120      	str	r0, [r4, #16]
  huart5.Init.BaudRate = 115200;
 800145e:	e9c4 e300 	strd	lr, r3, [r4]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001462:	230c      	movs	r3, #12
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001464:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001468:	e9c4 3005 	strd	r3, r0, [r4, #20]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800146c:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001470:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001474:	4620      	mov	r0, r4
 8001476:	f00b fa64 	bl	800c942 <HAL_UART_Init>
 800147a:	4601      	mov	r1, r0
 800147c:	b108      	cbz	r0, 8001482 <main+0x6b6>
 800147e:	b672      	cpsid	i
  while (1)
 8001480:	e7fe      	b.n	8001480 <main+0x6b4>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001482:	4620      	mov	r0, r4
 8001484:	f00b fb76 	bl	800cb74 <HAL_UARTEx_SetTxFifoThreshold>
 8001488:	b108      	cbz	r0, 800148e <main+0x6c2>
 800148a:	b672      	cpsid	i
  while (1)
 800148c:	e7fe      	b.n	800148c <main+0x6c0>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800148e:	2100      	movs	r1, #0
 8001490:	4884      	ldr	r0, [pc, #528]	@ (80016a4 <main+0x8d8>)
 8001492:	f00b fb94 	bl	800cbbe <HAL_UARTEx_SetRxFifoThreshold>
 8001496:	b108      	cbz	r0, 800149c <main+0x6d0>
 8001498:	b672      	cpsid	i
  while (1)
 800149a:	e7fe      	b.n	800149a <main+0x6ce>
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800149c:	4881      	ldr	r0, [pc, #516]	@ (80016a4 <main+0x8d8>)
 800149e:	f00b fb4a 	bl	800cb36 <HAL_UARTEx_DisableFifoMode>
 80014a2:	b108      	cbz	r0, 80014a8 <main+0x6dc>
 80014a4:	b672      	cpsid	i
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <main+0x6da>
  huart1.Instance = USART1;
 80014a8:	4c7f      	ldr	r4, [pc, #508]	@ (80016a8 <main+0x8dc>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014aa:	250c      	movs	r5, #12
  huart1.Init.BaudRate = 115200;
 80014ac:	4b7f      	ldr	r3, [pc, #508]	@ (80016ac <main+0x8e0>)
 80014ae:	f44f 36e1 	mov.w	r6, #115200	@ 0x1c200
  huart1.Init.Parity = UART_PARITY_NONE;
 80014b2:	6120      	str	r0, [r4, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014b4:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b8:	e9c4 5005 	strd	r5, r0, [r4, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014bc:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c0:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014c4:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 80014c6:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ca:	f00b fa3a 	bl	800c942 <HAL_UART_Init>
 80014ce:	4601      	mov	r1, r0
 80014d0:	b108      	cbz	r0, 80014d6 <main+0x70a>
 80014d2:	b672      	cpsid	i
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <main+0x708>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d6:	4620      	mov	r0, r4
 80014d8:	f00b fb4c 	bl	800cb74 <HAL_UARTEx_SetTxFifoThreshold>
 80014dc:	4601      	mov	r1, r0
 80014de:	b108      	cbz	r0, 80014e4 <main+0x718>
 80014e0:	b672      	cpsid	i
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <main+0x716>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e4:	4620      	mov	r0, r4
 80014e6:	f00b fb6a 	bl	800cbbe <HAL_UARTEx_SetRxFifoThreshold>
 80014ea:	b108      	cbz	r0, 80014f0 <main+0x724>
 80014ec:	b672      	cpsid	i
  while (1)
 80014ee:	e7fe      	b.n	80014ee <main+0x722>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014f0:	4620      	mov	r0, r4
 80014f2:	f00b fb20 	bl	800cb36 <HAL_UARTEx_DisableFifoMode>
 80014f6:	b108      	cbz	r0, 80014fc <main+0x730>
 80014f8:	b672      	cpsid	i
  while (1)
 80014fa:	e7fe      	b.n	80014fa <main+0x72e>
  huart2.Instance = USART2;
 80014fc:	4c6c      	ldr	r4, [pc, #432]	@ (80016b0 <main+0x8e4>)
 80014fe:	4b6d      	ldr	r3, [pc, #436]	@ (80016b4 <main+0x8e8>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001500:	62a0      	str	r0, [r4, #40]	@ 0x28
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001502:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001506:	e9c4 0504 	strd	r0, r5, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800150a:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800150e:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001512:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 115200;
 8001514:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001518:	f00b fa13 	bl	800c942 <HAL_UART_Init>
 800151c:	4601      	mov	r1, r0
 800151e:	b108      	cbz	r0, 8001524 <main+0x758>
 8001520:	b672      	cpsid	i
  while (1)
 8001522:	e7fe      	b.n	8001522 <main+0x756>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001524:	4620      	mov	r0, r4
 8001526:	f00b fb25 	bl	800cb74 <HAL_UARTEx_SetTxFifoThreshold>
 800152a:	4601      	mov	r1, r0
 800152c:	b108      	cbz	r0, 8001532 <main+0x766>
 800152e:	b672      	cpsid	i
  while (1)
 8001530:	e7fe      	b.n	8001530 <main+0x764>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001532:	4620      	mov	r0, r4
 8001534:	f00b fb43 	bl	800cbbe <HAL_UARTEx_SetRxFifoThreshold>
 8001538:	b108      	cbz	r0, 800153e <main+0x772>
 800153a:	b672      	cpsid	i
  while (1)
 800153c:	e7fe      	b.n	800153c <main+0x770>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800153e:	4620      	mov	r0, r4
 8001540:	f00b faf9 	bl	800cb36 <HAL_UARTEx_DisableFifoMode>
 8001544:	b108      	cbz	r0, 800154a <main+0x77e>
 8001546:	b672      	cpsid	i
  while (1)
 8001548:	e7fe      	b.n	8001548 <main+0x77c>
  __HAL_RCC_BDMA_CLK_ENABLE();
 800154a:	4b5b      	ldr	r3, [pc, #364]	@ (80016b8 <main+0x8ec>)
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 5, 0);
 800154c:	2105      	movs	r1, #5
 800154e:	2081      	movs	r0, #129	@ 0x81
  huart3.Instance = USART3;
 8001550:	4c5a      	ldr	r4, [pc, #360]	@ (80016bc <main+0x8f0>)
  __HAL_RCC_BDMA_CLK_ENABLE();
 8001552:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
  huart3.Init.BaudRate = 115200;
 8001556:	f44f 36e1 	mov.w	r6, #115200	@ 0x1c200
  huart3.Init.Mode = UART_MODE_TX_RX;
 800155a:	250c      	movs	r5, #12
  __HAL_RCC_BDMA_CLK_ENABLE();
 800155c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8001560:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 5, 0);
 8001564:	2200      	movs	r2, #0
  __HAL_RCC_BDMA_CLK_ENABLE();
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800156e:	9304      	str	r3, [sp, #16]
 8001570:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 5, 0);
 8001572:	f003 f801 	bl	8004578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8001576:	2081      	movs	r0, #129	@ 0x81
 8001578:	f003 f80e 	bl	8004598 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 5, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	2105      	movs	r1, #5
 8001580:	2082      	movs	r0, #130	@ 0x82
 8001582:	f002 fff9 	bl	8004578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 8001586:	2082      	movs	r0, #130	@ 0x82
 8001588:	f003 f806 	bl	8004598 <HAL_NVIC_EnableIRQ>
  huart3.Init.BaudRate = 115200;
 800158c:	4b4c      	ldr	r3, [pc, #304]	@ (80016c0 <main+0x8f4>)
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800158e:	4620      	mov	r0, r4
  huart3.Init.BaudRate = 115200;
 8001590:	e9c4 3600 	strd	r3, r6, [r4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001594:	2300      	movs	r3, #0
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001596:	4619      	mov	r1, r3
 8001598:	461a      	mov	r2, r3
  huart3.Init.Parity = UART_PARITY_NONE;
 800159a:	6123      	str	r3, [r4, #16]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800159c:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a0:	e9c4 5305 	strd	r5, r3, [r4, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015a4:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015a8:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80015ac:	f00b fa7c 	bl	800caa8 <HAL_RS485Ex_Init>
 80015b0:	4601      	mov	r1, r0
 80015b2:	b108      	cbz	r0, 80015b8 <main+0x7ec>
 80015b4:	b672      	cpsid	i
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <main+0x7ea>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015b8:	4620      	mov	r0, r4
 80015ba:	f00b fadb 	bl	800cb74 <HAL_UARTEx_SetTxFifoThreshold>
 80015be:	4601      	mov	r1, r0
 80015c0:	b108      	cbz	r0, 80015c6 <main+0x7fa>
 80015c2:	b672      	cpsid	i
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <main+0x7f8>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c6:	4620      	mov	r0, r4
 80015c8:	f00b faf9 	bl	800cbbe <HAL_UARTEx_SetRxFifoThreshold>
 80015cc:	b108      	cbz	r0, 80015d2 <main+0x806>
 80015ce:	b672      	cpsid	i
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <main+0x804>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015d2:	4620      	mov	r0, r4
 80015d4:	f00b faaf 	bl	800cb36 <HAL_UARTEx_DisableFifoMode>
 80015d8:	b108      	cbz	r0, 80015de <main+0x812>
 80015da:	b672      	cpsid	i
  while (1)
 80015dc:	e7fe      	b.n	80015dc <main+0x810>
  huart6.Instance = USART6;
 80015de:	4c39      	ldr	r4, [pc, #228]	@ (80016c4 <main+0x8f8>)
 80015e0:	4b39      	ldr	r3, [pc, #228]	@ (80016c8 <main+0x8fc>)
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e2:	62a0      	str	r0, [r4, #40]	@ 0x28
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015e4:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015e8:	e9c4 0504 	strd	r0, r5, [r4, #16]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ec:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015f0:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015f4:	4620      	mov	r0, r4
  huart6.Init.BaudRate = 115200;
 80015f6:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015fa:	f00b f9a2 	bl	800c942 <HAL_UART_Init>
 80015fe:	4601      	mov	r1, r0
 8001600:	b108      	cbz	r0, 8001606 <main+0x83a>
 8001602:	b672      	cpsid	i
  while (1)
 8001604:	e7fe      	b.n	8001604 <main+0x838>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001606:	4620      	mov	r0, r4
 8001608:	f00b fab4 	bl	800cb74 <HAL_UARTEx_SetTxFifoThreshold>
 800160c:	4601      	mov	r1, r0
 800160e:	b108      	cbz	r0, 8001614 <main+0x848>
 8001610:	b672      	cpsid	i
  while (1)
 8001612:	e7fe      	b.n	8001612 <main+0x846>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001614:	4620      	mov	r0, r4
 8001616:	f00b fad2 	bl	800cbbe <HAL_UARTEx_SetRxFifoThreshold>
 800161a:	b108      	cbz	r0, 8001620 <main+0x854>
 800161c:	b672      	cpsid	i
  while (1)
 800161e:	e7fe      	b.n	800161e <main+0x852>
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001620:	4620      	mov	r0, r4
 8001622:	f00b fa88 	bl	800cb36 <HAL_UARTEx_DisableFifoMode>
 8001626:	4605      	mov	r5, r0
 8001628:	b108      	cbz	r0, 800162e <main+0x862>
 800162a:	b672      	cpsid	i
  while (1)
 800162c:	e7fe      	b.n	800162c <main+0x860>
  ADC_ChannelConfTypeDef sConfig = {0};
 800162e:	4601      	mov	r1, r0
 8001630:	221c      	movs	r2, #28
 8001632:	a835      	add	r0, sp, #212	@ 0xd4
  hadc2.Instance = ADC2;
 8001634:	4c25      	ldr	r4, [pc, #148]	@ (80016cc <main+0x900>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001636:	f01d fc7f 	bl	801ef38 <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 800163a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800163e:	f8df c098 	ldr.w	ip, [pc, #152]	@ 80016d8 <main+0x90c>
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001642:	2604      	movs	r6, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001644:	4620      	mov	r0, r4
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001646:	82a5      	strh	r5, [r4, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001648:	6126      	str	r6, [r4, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800164a:	7725      	strb	r5, [r4, #28]
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800164c:	6365      	str	r5, [r4, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800164e:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001652:	e9c4 c300 	strd	ip, r3, [r4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001656:	2308      	movs	r3, #8
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001658:	e9c4 3502 	strd	r3, r5, [r4, #8]
  hadc2.Init.NbrOfConversion = 1;
 800165c:	2301      	movs	r3, #1
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800165e:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
  hadc2.Init.NbrOfConversion = 1;
 8001662:	61a3      	str	r3, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001664:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001668:	f002 fd0c 	bl	8004084 <HAL_ADC_Init>
 800166c:	b108      	cbz	r0, 8001672 <main+0x8a6>
 800166e:	b672      	cpsid	i
  while (1)
 8001670:	e7fe      	b.n	8001670 <main+0x8a4>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001672:	2306      	movs	r3, #6
 8001674:	4d16      	ldr	r5, [pc, #88]	@ (80016d0 <main+0x904>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001676:	2703      	movs	r7, #3
  sConfig.OffsetSignedSaturation = DISABLE;
 8001678:	f88d 00ed 	strb.w	r0, [sp, #237]	@ 0xed
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800167c:	a935      	add	r1, sp, #212	@ 0xd4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800167e:	e9cd 5335 	strd	r5, r3, [sp, #212]	@ 0xd4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001682:	f240 73ff 	movw	r3, #2047	@ 0x7ff
  sConfig.Offset = 0;
 8001686:	e9cd 6039 	strd	r6, r0, [sp, #228]	@ 0xe4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800168a:	4620      	mov	r0, r4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800168c:	e9cd 7337 	strd	r7, r3, [sp, #220]	@ 0xdc
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001690:	f002 f824 	bl	80036dc <HAL_ADC_ConfigChannel>
 8001694:	b310      	cbz	r0, 80016dc <main+0x910>
 8001696:	b672      	cpsid	i
  while (1)
 8001698:	e7fe      	b.n	8001698 <main+0x8cc>
 800169a:	bf00      	nop
 800169c:	24002640 	.word	0x24002640
 80016a0:	58001c00 	.word	0x58001c00
 80016a4:	240021b0 	.word	0x240021b0
 80016a8:	24002120 	.word	0x24002120
 80016ac:	40011000 	.word	0x40011000
 80016b0:	24002090 	.word	0x24002090
 80016b4:	40004400 	.word	0x40004400
 80016b8:	58024400 	.word	0x58024400
 80016bc:	24002000 	.word	0x24002000
 80016c0:	40004800 	.word	0x40004800
 80016c4:	24001f70 	.word	0x24001f70
 80016c8:	40011400 	.word	0x40011400
 80016cc:	240028c8 	.word	0x240028c8
 80016d0:	21800100 	.word	0x21800100
 80016d4:	40005000 	.word	0x40005000
 80016d8:	40022100 	.word	0x40022100
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016dc:	2210      	movs	r2, #16
 80016de:	2100      	movs	r1, #0
 80016e0:	a835      	add	r0, sp, #212	@ 0xd4
  htim4.Instance = TIM4;
 80016e2:	4c35      	ldr	r4, [pc, #212]	@ (80017b8 <main+0x9ec>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e4:	f01d fc28 	bl	801ef38 <memset>
  htim4.Init.Prescaler = 60000;
 80016e8:	4834      	ldr	r0, [pc, #208]	@ (80017bc <main+0x9f0>)
 80016ea:	f64e 2260 	movw	r2, #60000	@ 0xea60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ee:	2300      	movs	r3, #0
 80016f0:	f10d 08b8 	add.w	r8, sp, #184	@ 0xb8
 80016f4:	932e      	str	r3, [sp, #184]	@ 0xb8
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f6:	60a3      	str	r3, [r4, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f8:	61a3      	str	r3, [r4, #24]
  htim4.Init.Prescaler = 60000;
 80016fa:	e9c4 0200 	strd	r0, r2, [r4]
  htim4.Init.Period = 65535;
 80016fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001702:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001704:	e9c8 3301 	strd	r3, r3, [r8, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001708:	e9c4 2303 	strd	r2, r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800170c:	f009 fdca 	bl	800b2a4 <HAL_TIM_Base_Init>
 8001710:	b108      	cbz	r0, 8001716 <main+0x94a>
 8001712:	b672      	cpsid	i
  while (1)
 8001714:	e7fe      	b.n	8001714 <main+0x948>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800171a:	a935      	add	r1, sp, #212	@ 0xd4
 800171c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171e:	9335      	str	r3, [sp, #212]	@ 0xd4
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001720:	f009 ff6c 	bl	800b5fc <HAL_TIM_ConfigClockSource>
 8001724:	b108      	cbz	r0, 800172a <main+0x95e>
 8001726:	b672      	cpsid	i
  while (1)
 8001728:	e7fe      	b.n	8001728 <main+0x95c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172a:	902e      	str	r0, [sp, #184]	@ 0xb8
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800172c:	4641      	mov	r1, r8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172e:	9030      	str	r0, [sp, #192]	@ 0xc0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001730:	4620      	mov	r0, r4
 8001732:	f00a f92b 	bl	800b98c <HAL_TIMEx_MasterConfigSynchronization>
 8001736:	4604      	mov	r4, r0
 8001738:	b108      	cbz	r0, 800173e <main+0x972>
 800173a:	b672      	cpsid	i
  while (1)
 800173c:	e7fe      	b.n	800173c <main+0x970>
  hadc3.Instance = ADC3;
 800173e:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 80017c8 <main+0x9fc>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001742:	4601      	mov	r1, r0
 8001744:	221c      	movs	r2, #28
 8001746:	a835      	add	r0, sp, #212	@ 0xd4
 8001748:	f01d fbf6 	bl	801ef38 <memset>
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800174c:	f04f 0b08 	mov.w	fp, #8
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001750:	491b      	ldr	r1, [pc, #108]	@ (80017c0 <main+0x9f4>)
 8001752:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001756:	2704      	movs	r7, #4
  hadc3.Init.NbrOfConversion = 1;
 8001758:	2601      	movs	r6, #1
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800175a:	4648      	mov	r0, r9
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800175c:	f8a9 4014 	strh.w	r4, [r9, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001760:	f8c9 7010 	str.w	r7, [r9, #16]
  hadc3.Init.NbrOfConversion = 1;
 8001764:	f8c9 6018 	str.w	r6, [r9, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001768:	f889 401c 	strb.w	r4, [r9, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800176c:	f8c9 4034 	str.w	r4, [r9, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001770:	f889 4038 	strb.w	r4, [r9, #56]	@ 0x38
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001774:	e9c9 1300 	strd	r1, r3, [r9]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001778:	e9c9 b402 	strd	fp, r4, [r9, #8]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800177c:	e9c9 4409 	strd	r4, r4, [r9, #36]	@ 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001780:	e9c9 440b 	strd	r4, r4, [r9, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001784:	f002 fc7e 	bl	8004084 <HAL_ADC_Init>
 8001788:	b108      	cbz	r0, 800178e <main+0x9c2>
 800178a:	b672      	cpsid	i
  while (1)
 800178c:	e7fe      	b.n	800178c <main+0x9c0>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800178e:	4a0d      	ldr	r2, [pc, #52]	@ (80017c4 <main+0x9f8>)
 8001790:	2306      	movs	r3, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001792:	f240 74ff 	movw	r4, #2047	@ 0x7ff
  sConfig.OffsetSignedSaturation = DISABLE;
 8001796:	f88d 00ed 	strb.w	r0, [sp, #237]	@ 0xed
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800179a:	a935      	add	r1, sp, #212	@ 0xd4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800179c:	e9cd 2335 	strd	r2, r3, [sp, #212]	@ 0xd4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017a0:	2303      	movs	r3, #3
  sConfig.Offset = 0;
 80017a2:	e9cd 7039 	strd	r7, r0, [sp, #228]	@ 0xe4
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80017a6:	4648      	mov	r0, r9
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017a8:	e9cd 3437 	strd	r3, r4, [sp, #220]	@ 0xdc
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80017ac:	f001 ff96 	bl	80036dc <HAL_ADC_ConfigChannel>
 80017b0:	4605      	mov	r5, r0
 80017b2:	b158      	cbz	r0, 80017cc <main+0xa00>
 80017b4:	b672      	cpsid	i
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <main+0x9ea>
 80017b8:	24002240 	.word	0x24002240
 80017bc:	40000800 	.word	0x40000800
 80017c0:	58026000 	.word	0x58026000
 80017c4:	cfb80000 	.word	0xcfb80000
 80017c8:	24002864 	.word	0x24002864
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80017cc:	4622      	mov	r2, r4
 80017ce:	4601      	mov	r1, r0
 80017d0:	48ce      	ldr	r0, [pc, #824]	@ (8001b0c <main+0xd40>)
 80017d2:	f002 fd83 	bl	80042dc <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80017d6:	4622      	mov	r2, r4
 80017d8:	4629      	mov	r1, r5
 80017da:	48cd      	ldr	r0, [pc, #820]	@ (8001b10 <main+0xd44>)
 80017dc:	f002 fd7e 	bl	80042dc <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80017e0:	4622      	mov	r2, r4
 80017e2:	4629      	mov	r1, r5
 80017e4:	4648      	mov	r0, r9
  communication.Init(&registers, &services, &subscribers, &leds);					communication.AddRegisters();
 80017e6:	4ccb      	ldr	r4, [pc, #812]	@ (8001b14 <main+0xd48>)
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80017e8:	f002 fd78 	bl	80042dc <HAL_ADCEx_Calibration_Start>
  registers.Init(); 																registers.AddBaseRegisters();
 80017ec:	48ca      	ldr	r0, [pc, #808]	@ (8001b18 <main+0xd4c>)
 80017ee:	f018 f82c 	bl	801984a <_ZN9Registers4InitEv>
 80017f2:	48c9      	ldr	r0, [pc, #804]	@ (8001b18 <main+0xd4c>)
 80017f4:	f018 f8e6 	bl	80199c4 <_ZN9Registers16AddBaseRegistersEv>
  communication.Init(&registers, &services, &subscribers, &leds);					communication.AddRegisters();
 80017f8:	4bc8      	ldr	r3, [pc, #800]	@ (8001b1c <main+0xd50>)
 80017fa:	4ac9      	ldr	r2, [pc, #804]	@ (8001b20 <main+0xd54>)
 80017fc:	49c6      	ldr	r1, [pc, #792]	@ (8001b18 <main+0xd4c>)
 80017fe:	48c9      	ldr	r0, [pc, #804]	@ (8001b24 <main+0xd58>)
 8001800:	9400      	str	r4, [sp, #0]
 8001802:	f00f f814 	bl	801082e <_ZN13Communication4InitEP9RegistersP8ServicesP17MasterSubscribersP4LEDS>
 8001806:	48c7      	ldr	r0, [pc, #796]	@ (8001b24 <main+0xd58>)
 8001808:	f00f faae 	bl	8010d68 <_ZN13Communication12AddRegistersEv>
  services.Init(&registers, &communication, &leds);
 800180c:	4623      	mov	r3, r4
 800180e:	4ac5      	ldr	r2, [pc, #788]	@ (8001b24 <main+0xd58>)
 8001810:	49c1      	ldr	r1, [pc, #772]	@ (8001b18 <main+0xd4c>)
 8001812:	48c3      	ldr	r0, [pc, #780]	@ (8001b20 <main+0xd54>)
 8001814:	f01b fce8 	bl	801d1e8 <_ZN8Services4InitEP9RegistersP13CommunicationP4LEDS>
  publishers.Init(&registers, &communication); 										publishers.AddRegisters();
 8001818:	4ac2      	ldr	r2, [pc, #776]	@ (8001b24 <main+0xd58>)
 800181a:	49bf      	ldr	r1, [pc, #764]	@ (8001b18 <main+0xd4c>)
 800181c:	48c2      	ldr	r0, [pc, #776]	@ (8001b28 <main+0xd5c>)
 800181e:	f016 fca3 	bl	8018168 <_ZN10Publishers4InitEP9RegistersP13Communication>
 8001822:	48c1      	ldr	r0, [pc, #772]	@ (8001b28 <main+0xd5c>)
 8001824:	f017 f99e 	bl	8018b64 <_ZN10Publishers12AddRegistersEv>
  subscribers.Init(&registers, &leds);												subscribers.AddRegisters();
 8001828:	4622      	mov	r2, r4
 800182a:	49bb      	ldr	r1, [pc, #748]	@ (8001b18 <main+0xd4c>)
 800182c:	48bb      	ldr	r0, [pc, #748]	@ (8001b1c <main+0xd50>)
 800182e:	f01b fe6d 	bl	801d50c <_ZN17MasterSubscribers4InitEP9RegistersP4LEDS>
 8001832:	48ba      	ldr	r0, [pc, #744]	@ (8001b1c <main+0xd50>)
 8001834:	f01c f8fe 	bl	801da34 <_ZN17MasterSubscribers12AddRegistersEv>
  sensors.Init(&registers, &publishers, &hardware_delay, &leds);					sensors.AddRegisters();
 8001838:	4bbc      	ldr	r3, [pc, #752]	@ (8001b2c <main+0xd60>)
 800183a:	4abb      	ldr	r2, [pc, #748]	@ (8001b28 <main+0xd5c>)
 800183c:	49b6      	ldr	r1, [pc, #728]	@ (8001b18 <main+0xd4c>)
 800183e:	48bc      	ldr	r0, [pc, #752]	@ (8001b30 <main+0xd64>)
 8001840:	9400      	str	r4, [sp, #0]
 8001842:	f018 fc73 	bl	801a12c <_ZN7Sensors4InitEP9RegistersP10PublishersP13HardwareDelayP4LEDS>
 8001846:	48ba      	ldr	r0, [pc, #744]	@ (8001b30 <main+0xd64>)
 8001848:	f01a fd0e 	bl	801c268 <_ZN7Sensors12AddRegistersEv>
  leds.Init(&registers);															leds.AddRegisters();
 800184c:	49b2      	ldr	r1, [pc, #712]	@ (8001b18 <main+0xd4c>)
 800184e:	4620      	mov	r0, r4
  leds.AddLED(LED_UART_FRONT, GPIO {LED_UART_FRONT_GPIO_Port, LED_UART_FRONT_Pin});
 8001850:	f8df 9318 	ldr.w	r9, [pc, #792]	@ 8001b6c <main+0xda0>
  leds.Init(&registers);															leds.AddRegisters();
 8001854:	f014 fe2a 	bl	80164ac <_ZN4LEDS4InitEP9Registers>
 8001858:	4620      	mov	r0, r4
 800185a:	f015 fa19 	bl	8016c90 <_ZN4LEDS12AddRegistersEv>
  leds.AddLED(LED_UART_FRONT, GPIO {LED_UART_FRONT_GPIO_Port, LED_UART_FRONT_Pin});
 800185e:	f248 0300 	movw	r3, #32768	@ 0x8000
 8001862:	464a      	mov	r2, r9
 8001864:	2102      	movs	r1, #2
 8001866:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
 800186a:	4620      	mov	r0, r4
 800186c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800186e:	f8cd 905c 	str.w	r9, [sp, #92]	@ 0x5c
 8001872:	f015 fb3d 	bl	8016ef0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_UART_RS485, GPIO {LED_RS485_GPIO_Port, LED_RS485_Pin});
 8001876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800187a:	f8df a2f4 	ldr.w	sl, [pc, #756]	@ 8001b70 <main+0xda4>
 800187e:	4639      	mov	r1, r7
 8001880:	4620      	mov	r0, r4
 8001882:	f8ad 3068 	strh.w	r3, [sp, #104]	@ 0x68
 8001886:	4652      	mov	r2, sl
 8001888:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800188a:	f8cd a064 	str.w	sl, [sp, #100]	@ 0x64
 800188e:	f015 fb2f 	bl	8016ef0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_UART_BACK, GPIO {LED_UART_BACK_GPIO_Port, LED_UART_BACK_Pin});
 8001892:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001896:	4652      	mov	r2, sl
 8001898:	2103      	movs	r1, #3
 800189a:	4620      	mov	r0, r4
 800189c:	f8ad 3070 	strh.w	r3, [sp, #112]	@ 0x70
 80018a0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80018a2:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
 80018a6:	f015 fb23 	bl	8016ef0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_CANFD1, GPIO {LED_FDCAN1_GPIO_Port, LED_FDCAN1_Pin});
 80018aa:	4ba2      	ldr	r3, [pc, #648]	@ (8001b34 <main+0xd68>)
 80018ac:	4629      	mov	r1, r5
 80018ae:	f8ad 6078 	strh.w	r6, [sp, #120]	@ 0x78
 80018b2:	4620      	mov	r0, r4
 80018b4:	4a9f      	ldr	r2, [pc, #636]	@ (8001b34 <main+0xd68>)
  leds.AddLED(LED_CANFD2, GPIO {LED_FDCAN2_GPIO_Port, LED_FDCAN2_Pin});
 80018b6:	f50a 6a00 	add.w	sl, sl, #2048	@ 0x800
  leds.AddLED(LED_CANFD1, GPIO {LED_FDCAN1_GPIO_Port, LED_FDCAN1_Pin});
 80018ba:	931d      	str	r3, [sp, #116]	@ 0x74
 80018bc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80018be:	f015 fb17 	bl	8016ef0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_CANFD2, GPIO {LED_FDCAN2_GPIO_Port, LED_FDCAN2_Pin});
 80018c2:	f248 0300 	movw	r3, #32768	@ 0x8000
 80018c6:	4652      	mov	r2, sl
 80018c8:	4631      	mov	r1, r6
 80018ca:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
 80018ce:	4620      	mov	r0, r4
 80018d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80018d2:	f8cd a07c 	str.w	sl, [sp, #124]	@ 0x7c
 80018d6:	f015 fb0b 	bl	8016ef0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_STATUS, GPIO {LED_STATUS_GPIO_Port, LED_STATUS_Pin});
 80018da:	f8ad 7088 	strh.w	r7, [sp, #136]	@ 0x88
 80018de:	4652      	mov	r2, sl
 80018e0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80018e2:	2107      	movs	r1, #7
 80018e4:	4620      	mov	r0, r4
 80018e6:	f8cd a084 	str.w	sl, [sp, #132]	@ 0x84
 80018ea:	f015 fb01 	bl	8016ef0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_CONTROLLER, GPIO {LED_CONTROLLER_GPIO_Port, LED_CONTROLLER_Pin});
 80018ee:	f8ad b090 	strh.w	fp, [sp, #144]	@ 0x90
 80018f2:	4652      	mov	r2, sl
 80018f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80018f6:	4659      	mov	r1, fp
 80018f8:	4620      	mov	r0, r4
 80018fa:	f8cd a08c 	str.w	sl, [sp, #140]	@ 0x8c
 80018fe:	f015 faf7 	bl	8016ef0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_FAULT, GPIO {LED_FAULT_GPIO_Port, LED_FAULT_Pin});
 8001902:	f04f 0310 	mov.w	r3, #16
 8001906:	f8cd a094 	str.w	sl, [sp, #148]	@ 0x94
 800190a:	4a8b      	ldr	r2, [pc, #556]	@ (8001b38 <main+0xd6c>)
 800190c:	2109      	movs	r1, #9
 800190e:	469a      	mov	sl, r3
 8001910:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 8001914:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8001916:	4620      	mov	r0, r4
 8001918:	f015 faea 	bl	8016ef0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER1, GPIO {LED_USER1_GPIO_Port, LED_USER1_Pin});
 800191c:	f8ad a0a0 	strh.w	sl, [sp, #160]	@ 0xa0
 8001920:	464a      	mov	r2, r9
 8001922:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8001924:	210a      	movs	r1, #10
 8001926:	4620      	mov	r0, r4
 8001928:	f8cd 909c 	str.w	r9, [sp, #156]	@ 0x9c
 800192c:	f015 fae0 	bl	8016ef0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER2, GPIO {LED_USER2_GPIO_Port, LED_USER2_Pin});
 8001930:	2320      	movs	r3, #32
 8001932:	464a      	mov	r2, r9
 8001934:	210b      	movs	r1, #11
 8001936:	4620      	mov	r0, r4
 8001938:	f8ad 30ac 	strh.w	r3, [sp, #172]	@ 0xac
  leds.ConfigureTimings(LED_UART_BACK, std::vector<uint8_t>{1}, 2);
 800193c:	f10d 0a0c 	add.w	sl, sp, #12
  leds.AddLED(LED_USER2, GPIO {LED_USER2_GPIO_Port, LED_USER2_Pin});
 8001940:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8001942:	f8cd 90a8 	str.w	r9, [sp, #168]	@ 0xa8
 8001946:	f015 fad3 	bl	8016ef0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 800194a:	2380      	movs	r3, #128	@ 0x80
 800194c:	f8cd 90b8 	str.w	r9, [sp, #184]	@ 0xb8
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 8001950:	f10d 094c 	add.w	r9, sp, #76	@ 0x4c
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 8001954:	210c      	movs	r1, #12
 8001956:	f8ad 30bc 	strh.w	r3, [sp, #188]	@ 0xbc
 800195a:	4620      	mov	r0, r4
 800195c:	e898 000c 	ldmia.w	r8, {r2, r3}
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 8001960:	f10d 0854 	add.w	r8, sp, #84	@ 0x54
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 8001964:	f015 fac4 	bl	8016ef0 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 8001968:	4632      	mov	r2, r6
 800196a:	4649      	mov	r1, r9
 800196c:	4643      	mov	r3, r8
 800196e:	a835      	add	r0, sp, #212	@ 0xd4
 8001970:	f88d 604c 	strb.w	r6, [sp, #76]	@ 0x4c
 8001974:	e9cd 960d 	strd	r9, r6, [sp, #52]	@ 0x34
 8001978:	f7ff fa06 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 800197c:	2302      	movs	r3, #2
 800197e:	aa35      	add	r2, sp, #212	@ 0xd4
 8001980:	4629      	mov	r1, r5
 8001982:	4620      	mov	r0, r4
 8001984:	f015 faf7 	bl	8016f76 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
      }
 8001988:	a835      	add	r0, sp, #212	@ 0xd4
 800198a:	f7ff f8a9 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_CANFD2, std::vector<uint8_t>{1}, 2);
 800198e:	4643      	mov	r3, r8
 8001990:	4632      	mov	r2, r6
 8001992:	4649      	mov	r1, r9
 8001994:	a835      	add	r0, sp, #212	@ 0xd4
 8001996:	f88d 604c 	strb.w	r6, [sp, #76]	@ 0x4c
 800199a:	e9cd 960f 	strd	r9, r6, [sp, #60]	@ 0x3c
 800199e:	f7ff f9f3 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80019a2:	2302      	movs	r3, #2
 80019a4:	aa35      	add	r2, sp, #212	@ 0xd4
 80019a6:	4631      	mov	r1, r6
 80019a8:	4620      	mov	r0, r4
 80019aa:	f015 fae4 	bl	8016f76 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 80019ae:	a835      	add	r0, sp, #212	@ 0xd4
 80019b0:	f7ff f896 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_FRONT, std::vector<uint8_t>{1}, 2);
 80019b4:	4643      	mov	r3, r8
 80019b6:	4632      	mov	r2, r6
 80019b8:	4649      	mov	r1, r9
 80019ba:	a835      	add	r0, sp, #212	@ 0xd4
 80019bc:	f88d 604c 	strb.w	r6, [sp, #76]	@ 0x4c
 80019c0:	e9cd 9611 	strd	r9, r6, [sp, #68]	@ 0x44
 80019c4:	f7ff f9e0 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80019c8:	2302      	movs	r3, #2
 80019ca:	aa35      	add	r2, sp, #212	@ 0xd4
 80019cc:	4620      	mov	r0, r4
 80019ce:	4619      	mov	r1, r3
 80019d0:	f015 fad1 	bl	8016f76 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 80019d4:	a835      	add	r0, sp, #212	@ 0xd4
 80019d6:	f7ff f883 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_BACK, std::vector<uint8_t>{1}, 2);
 80019da:	4643      	mov	r3, r8
 80019dc:	a835      	add	r0, sp, #212	@ 0xd4
 80019de:	f88d 600c 	strb.w	r6, [sp, #12]
 80019e2:	e9cd a613 	strd	sl, r6, [sp, #76]	@ 0x4c
 80019e6:	e899 0006 	ldmia.w	r9, {r1, r2}
 80019ea:	f7ff f9cd 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80019ee:	2302      	movs	r3, #2
 80019f0:	aa35      	add	r2, sp, #212	@ 0xd4
 80019f2:	2103      	movs	r1, #3
 80019f4:	4620      	mov	r0, r4
 80019f6:	f015 fabe 	bl	8016f76 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 80019fa:	a835      	add	r0, sp, #212	@ 0xd4
 80019fc:	f7ff f870 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_RS485, std::vector<uint8_t>{1}, 2);
 8001a00:	ab02      	add	r3, sp, #8
 8001a02:	a835      	add	r0, sp, #212	@ 0xd4
 8001a04:	f88d 6008 	strb.w	r6, [sp, #8]
 8001a08:	e9cd 3615 	strd	r3, r6, [sp, #84]	@ 0x54
 8001a0c:	4653      	mov	r3, sl
 8001a0e:	e898 0006 	ldmia.w	r8, {r1, r2}
 8001a12:	f7ff f9b9 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8001a16:	2302      	movs	r3, #2
 8001a18:	aa35      	add	r2, sp, #212	@ 0xd4
 8001a1a:	4639      	mov	r1, r7
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f015 faaa 	bl	8016f76 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 8001a22:	a835      	add	r0, sp, #212	@ 0xd4
 8001a24:	f7ff f85c 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.TestLEDs();
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f015 f9c6 	bl	8016dba <_ZN4LEDS8TestLEDsEv>
  StartupLEDS(&leds);
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f00d fb36 	bl	800f0a0 <_Z11StartupLEDSP4LEDS>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); 			// Motor PWM
 8001a34:	4659      	mov	r1, fp
 8001a36:	4841      	ldr	r0, [pc, #260]	@ (8001b3c <main+0xd70>)
 8001a38:	f009 fe8c 	bl	800b754 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); 		// Encoder
 8001a3c:	213c      	movs	r1, #60	@ 0x3c
 8001a3e:	4840      	ldr	r0, [pc, #256]	@ (8001b40 <main+0xd74>)
 8001a40:	f009 ff40 	bl	800b8c4 <HAL_TIM_Encoder_Start>
  controller.Init(&registers, &publishers, &leds);
 8001a44:	4623      	mov	r3, r4
 8001a46:	4a38      	ldr	r2, [pc, #224]	@ (8001b28 <main+0xd5c>)
 8001a48:	4933      	ldr	r1, [pc, #204]	@ (8001b18 <main+0xd4c>)
 8001a4a:	483e      	ldr	r0, [pc, #248]	@ (8001b44 <main+0xd78>)
 8001a4c:	f014 f992 	bl	8015d74 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS>
  controller.AddRegisters();
 8001a50:	483c      	ldr	r0, [pc, #240]	@ (8001b44 <main+0xd78>)
 8001a52:	f013 fcdb 	bl	801540c <_ZN10Controller12AddRegistersEv>
  controller.SetupPublisher(PUBLISHER_CONTROLLER_INTERFACE);
 8001a56:	2106      	movs	r1, #6
 8001a58:	483a      	ldr	r0, [pc, #232]	@ (8001b44 <main+0xd78>)
 8001a5a:	f012 fed4 	bl	8014806 <_ZN10Controller14SetupPublisherEh>
  protocol_uart.SetProtocolPayloadMaxLength(256);
 8001a5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a62:	4839      	ldr	r0, [pc, #228]	@ (8001b48 <main+0xd7c>)
 8001a64:	f015 fbae 	bl	80171c4 <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>
  protocol_uart.AddInterface(UART_FRONT, &huart1);
 8001a68:	4a38      	ldr	r2, [pc, #224]	@ (8001b4c <main+0xd80>)
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	4836      	ldr	r0, [pc, #216]	@ (8001b48 <main+0xd7c>)
 8001a6e:	f7ff f8c3 	bl	8000bf8 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  protocol_uart.AddInterface(UART_BACK, &huart6);
 8001a72:	4a37      	ldr	r2, [pc, #220]	@ (8001b50 <main+0xd84>)
 8001a74:	2103      	movs	r1, #3
 8001a76:	4834      	ldr	r0, [pc, #208]	@ (8001b48 <main+0xd7c>)
 8001a78:	f7ff f8be 	bl	8000bf8 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  protocol_uart.AddInterface(UART_PIC, &huart2);
 8001a7c:	4a35      	ldr	r2, [pc, #212]	@ (8001b54 <main+0xd88>)
 8001a7e:	2105      	movs	r1, #5
 8001a80:	4831      	ldr	r0, [pc, #196]	@ (8001b48 <main+0xd7c>)
 8001a82:	f7ff f8b9 	bl	8000bf8 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  communication.AddProtocol(&protocol_uart);
 8001a86:	4930      	ldr	r1, [pc, #192]	@ (8001b48 <main+0xd7c>)
 8001a88:	4826      	ldr	r0, [pc, #152]	@ (8001b24 <main+0xd58>)
 8001a8a:	f00f f82b 	bl	8010ae4 <_ZN13Communication11AddProtocolEP21CommunicationProtocol>
  communication.ActivateReception(UART_FRONT);
 8001a8e:	2102      	movs	r1, #2
 8001a90:	4824      	ldr	r0, [pc, #144]	@ (8001b24 <main+0xd58>)
 8001a92:	f00e ff45 	bl	8010920 <_ZN13Communication17ActivateReceptionEh>
  communication.ActivateReception(UART_BACK);
 8001a96:	2103      	movs	r1, #3
 8001a98:	4822      	ldr	r0, [pc, #136]	@ (8001b24 <main+0xd58>)
 8001a9a:	f00e ff41 	bl	8010920 <_ZN13Communication17ActivateReceptionEh>
  communication.ActivateReception(UART_PIC);
 8001a9e:	2105      	movs	r1, #5
 8001aa0:	4820      	ldr	r0, [pc, #128]	@ (8001b24 <main+0xd58>)
 8001aa2:	f00e ff3d 	bl	8010920 <_ZN13Communication17ActivateReceptionEh>
  protocol_canfd.SetProtocolPayloadMaxLength(62);
 8001aa6:	213e      	movs	r1, #62	@ 0x3e
 8001aa8:	482b      	ldr	r0, [pc, #172]	@ (8001b58 <main+0xd8c>)
 8001aaa:	f015 fb8b 	bl	80171c4 <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>
  protocol_canfd.AddInterface(CANFD1, &hfdcan1);
 8001aae:	4a2b      	ldr	r2, [pc, #172]	@ (8001b5c <main+0xd90>)
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	4829      	ldr	r0, [pc, #164]	@ (8001b58 <main+0xd8c>)
 8001ab4:	f015 fe22 	bl	80176fc <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef>
  protocol_canfd.ConfigureFilters(CANFD1);
 8001ab8:	4629      	mov	r1, r5
 8001aba:	4827      	ldr	r0, [pc, #156]	@ (8001b58 <main+0xd8c>)
 8001abc:	f015 fd7d 	bl	80175ba <_ZN11CANProtocol16ConfigureFiltersEh>
  protocol_canfd.ActivateReception(CANFD1);
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	4825      	ldr	r0, [pc, #148]	@ (8001b58 <main+0xd8c>)
 8001ac4:	f015 fd8c 	bl	80175e0 <_ZN11CANProtocol17ActivateReceptionEh>
  protocol_canfd.Start(CANFD1);
 8001ac8:	4629      	mov	r1, r5
 8001aca:	4823      	ldr	r0, [pc, #140]	@ (8001b58 <main+0xd8c>)
 8001acc:	f015 fd99 	bl	8017602 <_ZN11CANProtocol5StartEh>
  communication.AddProtocol(&protocol_canfd);
 8001ad0:	4921      	ldr	r1, [pc, #132]	@ (8001b58 <main+0xd8c>)
 8001ad2:	4814      	ldr	r0, [pc, #80]	@ (8001b24 <main+0xd58>)
 8001ad4:	f00f f806 	bl	8010ae4 <_ZN13Communication11AddProtocolEP21CommunicationProtocol>
  communication.ActivateReception(CANFD1);
 8001ad8:	4629      	mov	r1, r5
 8001ada:	4812      	ldr	r0, [pc, #72]	@ (8001b24 <main+0xd58>)
 8001adc:	f00e ff20 	bl	8010920 <_ZN13Communication17ActivateReceptionEh>
  platform_sensors.Init(&sensors, &registers, &publishers, &leds);
 8001ae0:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <main+0xd5c>)
 8001ae2:	4a0d      	ldr	r2, [pc, #52]	@ (8001b18 <main+0xd4c>)
 8001ae4:	4912      	ldr	r1, [pc, #72]	@ (8001b30 <main+0xd64>)
 8001ae6:	481e      	ldr	r0, [pc, #120]	@ (8001b60 <main+0xd94>)
 8001ae8:	9400      	str	r4, [sp, #0]
 8001aea:	f00d fcd6 	bl	800f49a <_ZN15PlatformSensors4InitEP7SensorsP9RegistersP10PublishersP4LEDS>
  HAL_Delay(2000); // leave some time to the power PIC to configure the DS2778. This can be optimized by monitoring the PIC and wait until configuration is complete.
 8001aee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001af2:	f001 fd0f 	bl	8003514 <HAL_Delay>
  sensors.AddInterface(I2C1_ID, &hi2c1);
 8001af6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b64 <main+0xd98>)
 8001af8:	2107      	movs	r1, #7
 8001afa:	480d      	ldr	r0, [pc, #52]	@ (8001b30 <main+0xd64>)
 8001afc:	f01b f8c8 	bl	801cc90 <_ZN7Sensors12AddInterfaceEhP19__I2C_HandleTypeDef>
  sensors.AddInterface(I2C2_ID, &hi2c2);
 8001b00:	4a19      	ldr	r2, [pc, #100]	@ (8001b68 <main+0xd9c>)
 8001b02:	4659      	mov	r1, fp
 8001b04:	480a      	ldr	r0, [pc, #40]	@ (8001b30 <main+0xd64>)
 8001b06:	f01b f8c3 	bl	801cc90 <_ZN7Sensors12AddInterfaceEhP19__I2C_HandleTypeDef>
 8001b0a:	e033      	b.n	8001b74 <main+0xda8>
 8001b0c:	2400292c 	.word	0x2400292c
 8001b10:	240028c8 	.word	0x240028c8
 8001b14:	24000380 	.word	0x24000380
 8001b18:	24001a18 	.word	0x24001a18
 8001b1c:	24001938 	.word	0x24001938
 8001b20:	240004b8 	.word	0x240004b8
 8001b24:	240018fc 	.word	0x240018fc
 8001b28:	240004a0 	.word	0x240004a0
 8001b2c:	24000484 	.word	0x24000484
 8001b30:	240003b8 	.word	0x240003b8
 8001b34:	58020c00 	.word	0x58020c00
 8001b38:	58021000 	.word	0x58021000
 8001b3c:	24002324 	.word	0x24002324
 8001b40:	240022d8 	.word	0x240022d8
 8001b44:	24000140 	.word	0x24000140
 8001b48:	240019b0 	.word	0x240019b0
 8001b4c:	24002120 	.word	0x24002120
 8001b50:	24001f70 	.word	0x24001f70
 8001b54:	24002090 	.word	0x24002090
 8001b58:	2400195c 	.word	0x2400195c
 8001b5c:	240027c4 	.word	0x240027c4
 8001b60:	240002f8 	.word	0x240002f8
 8001b64:	240026d8 	.word	0x240026d8
 8001b68:	2400268c 	.word	0x2400268c
 8001b6c:	58020000 	.word	0x58020000
 8001b70:	58020800 	.word	0x58020800
  sensors.AddInterface(INTERNAL, NULL);
 8001b74:	462a      	mov	r2, r5
 8001b76:	210a      	movs	r1, #10
 8001b78:	481f      	ldr	r0, [pc, #124]	@ (8001bf8 <main+0xe2c>)
 8001b7a:	f01b f889 	bl	801cc90 <_ZN7Sensors12AddInterfaceEhP19__I2C_HandleTypeDef>
  platform_sensors.AddMotorSensorRegisters();
 8001b7e:	481f      	ldr	r0, [pc, #124]	@ (8001bfc <main+0xe30>)
 8001b80:	f00e fb48 	bl	8010214 <_ZN15PlatformSensors23AddMotorSensorRegistersEv>
  platform_sensors.AddMotorSensor();
 8001b84:	481d      	ldr	r0, [pc, #116]	@ (8001bfc <main+0xe30>)
 8001b86:	f00d fc8f 	bl	800f4a8 <_ZN15PlatformSensors14AddMotorSensorEv>
  platform_sensors.ActivateMotorSensor();
 8001b8a:	481c      	ldr	r0, [pc, #112]	@ (8001bfc <main+0xe30>)
 8001b8c:	f00d fd04 	bl	800f598 <_ZN15PlatformSensors19ActivateMotorSensorEv>
  platform_sensors.SetupMotorSensorPublisher();
 8001b90:	481a      	ldr	r0, [pc, #104]	@ (8001bfc <main+0xe30>)
 8001b92:	f00d fd2b 	bl	800f5ec <_ZN15PlatformSensors25SetupMotorSensorPublisherEv>
  HAL_Delay(10);
 8001b96:	200a      	movs	r0, #10
 8001b98:	f001 fcbc 	bl	8003514 <HAL_Delay>
  platform_sensors.ConfigureMotorSensor();
 8001b9c:	4817      	ldr	r0, [pc, #92]	@ (8001bfc <main+0xe30>)
 8001b9e:	f00d fd72 	bl	800f686 <_ZN15PlatformSensors20ConfigureMotorSensorEv>
  HAL_Delay(10);
 8001ba2:	200a      	movs	r0, #10
 8001ba4:	f001 fcb6 	bl	8003514 <HAL_Delay>
  user.Init();
 8001ba8:	4815      	ldr	r0, [pc, #84]	@ (8001c00 <main+0xe34>)
 8001baa:	f01c f953 	bl	801de54 <_ZN4User4InitEv>
  osKernelInitialize();
 8001bae:	f00b f865 	bl	800cc7c <osKernelInitialize>
  ControlHandle = osThreadNew(ControlTask, NULL, &Control_attributes);
 8001bb2:	4a14      	ldr	r2, [pc, #80]	@ (8001c04 <main+0xe38>)
 8001bb4:	4629      	mov	r1, r5
 8001bb6:	4814      	ldr	r0, [pc, #80]	@ (8001c08 <main+0xe3c>)
 8001bb8:	f00b f88e 	bl	800ccd8 <osThreadNew>
 8001bbc:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <main+0xe40>)
  SensorsHandle = osThreadNew(SensorsTask, NULL, &Sensors_attributes);
 8001bbe:	4a14      	ldr	r2, [pc, #80]	@ (8001c10 <main+0xe44>)
 8001bc0:	4629      	mov	r1, r5
  ControlHandle = osThreadNew(ControlTask, NULL, &Control_attributes);
 8001bc2:	6018      	str	r0, [r3, #0]
  SensorsHandle = osThreadNew(SensorsTask, NULL, &Sensors_attributes);
 8001bc4:	4813      	ldr	r0, [pc, #76]	@ (8001c14 <main+0xe48>)
 8001bc6:	f00b f887 	bl	800ccd8 <osThreadNew>
 8001bca:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <main+0xe4c>)
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 8001bcc:	4a13      	ldr	r2, [pc, #76]	@ (8001c1c <main+0xe50>)
 8001bce:	4629      	mov	r1, r5
  SensorsHandle = osThreadNew(SensorsTask, NULL, &Sensors_attributes);
 8001bd0:	6018      	str	r0, [r3, #0]
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 8001bd2:	4813      	ldr	r0, [pc, #76]	@ (8001c20 <main+0xe54>)
 8001bd4:	f00b f880 	bl	800ccd8 <osThreadNew>
 8001bd8:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <main+0xe58>)
  LEDsHandle = osThreadNew(LEDsTask, NULL, &LEDs_attributes);
 8001bda:	4a13      	ldr	r2, [pc, #76]	@ (8001c28 <main+0xe5c>)
 8001bdc:	4629      	mov	r1, r5
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 8001bde:	6018      	str	r0, [r3, #0]
  LEDsHandle = osThreadNew(LEDsTask, NULL, &LEDs_attributes);
 8001be0:	4812      	ldr	r0, [pc, #72]	@ (8001c2c <main+0xe60>)
 8001be2:	f00b f879 	bl	800ccd8 <osThreadNew>
 8001be6:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <main+0xe64>)
 8001be8:	6018      	str	r0, [r3, #0]
  user.AddOSThreads();
 8001bea:	4805      	ldr	r0, [pc, #20]	@ (8001c00 <main+0xe34>)
 8001bec:	f01c f934 	bl	801de58 <_ZN4User12AddOSThreadsEv>
  osKernelStart();
 8001bf0:	f00b f856 	bl	800cca0 <osKernelStart>
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <main+0xe28>
 8001bf6:	bf00      	nop
 8001bf8:	240003b8 	.word	0x240003b8
 8001bfc:	240002f8 	.word	0x240002f8
 8001c00:	24000084 	.word	0x24000084
 8001c04:	0801f3c0 	.word	0x0801f3c0
 8001c08:	08000801 	.word	0x08000801
 8001c0c:	24001abc 	.word	0x24001abc
 8001c10:	0801f39c 	.word	0x0801f39c
 8001c14:	08000811 	.word	0x08000811
 8001c18:	24001ab8 	.word	0x24001ab8
 8001c1c:	0801f378 	.word	0x0801f378
 8001c20:	08000821 	.word	0x08000821
 8001c24:	24001ab4 	.word	0x24001ab4
 8001c28:	0801f354 	.word	0x0801f354
 8001c2c:	08000831 	.word	0x08000831
 8001c30:	24001ab0 	.word	0x24001ab0

08001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001c34:	b510      	push	{r4, lr}
	  if (_Num)
 8001c36:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001c38:	4613      	mov	r3, r2
	  if (_Num)
 8001c3a:	d005      	beq.n	8001c48 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001c3c:	4601      	mov	r1, r0
 8001c3e:	4622      	mov	r2, r4
 8001c40:	4618      	mov	r0, r3
 8001c42:	f01d f95f 	bl	801ef04 <memmove>
 8001c46:	4603      	mov	r3, r0
	}
 8001c48:	1918      	adds	r0, r3, r4
 8001c4a:	bd10      	pop	{r4, pc}

08001c4c <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c50:	b08b      	sub	sp, #44	@ 0x2c
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001c52:	2300      	movs	r3, #0
 8001c54:	460c      	mov	r4, r1
	ID = communication.GetID((void*) huart, &success);
 8001c56:	4601      	mov	r1, r0
 8001c58:	f10d 020f 	add.w	r2, sp, #15
 8001c5c:	4852      	ldr	r0, [pc, #328]	@ (8001da8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001c5e:	9306      	str	r3, [sp, #24]
 8001c60:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001c64:	f00e fe22 	bl	80108ac <_ZN13Communication5GetIDEPvPb>
	if (!success) {return;}
 8001c68:	f89d 300f 	ldrb.w	r3, [sp, #15]
	ID = communication.GetID((void*) huart, &success);
 8001c6c:	4605      	mov	r5, r0
	if (!success) {return;}
 8001c6e:	b1a3      	cbz	r3, 8001c9a <HAL_UARTEx_RxEventCallback+0x4e>
	std::vector<uint8_t>* buffer = communication.GetBuffer(ID, &success);
 8001c70:	4601      	mov	r1, r0
 8001c72:	f10d 020f 	add.w	r2, sp, #15
 8001c76:	484c      	ldr	r0, [pc, #304]	@ (8001da8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001c78:	f00e fe2c 	bl	80108d4 <_ZN13Communication9GetBufferEhPb>
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 8001c7c:	f10d 020f 	add.w	r2, sp, #15
	std::vector<uint8_t>* buffer = communication.GetBuffer(ID, &success);
 8001c80:	4607      	mov	r7, r0
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 8001c82:	4629      	mov	r1, r5
 8001c84:	4848      	ldr	r0, [pc, #288]	@ (8001da8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001c86:	f00e fe30 	bl	80108ea <_ZN13Communication14GetBufferIndexEhPb>
	if (!success) {communication.ActivateReception(ID); return;}
 8001c8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 8001c8e:	4680      	mov	r8, r0
	if (!success) {communication.ActivateReception(ID); return;}
 8001c90:	b94b      	cbnz	r3, 8001ca6 <HAL_UARTEx_RxEventCallback+0x5a>
	communication.ActivateReception(ID);
 8001c92:	4629      	mov	r1, r5
 8001c94:	4844      	ldr	r0, [pc, #272]	@ (8001da8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001c96:	f00e fe43 	bl	8010920 <_ZN13Communication17ActivateReceptionEh>
      }
 8001c9a:	a804      	add	r0, sp, #16
 8001c9c:	f7fe ff20 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8001ca0:	b00b      	add	sp, #44	@ 0x2c
 8001ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (Size == *buffer_index) {communication.ActivateReception(ID); return;}
 8001ca6:	8801      	ldrh	r1, [r0, #0]
 8001ca8:	42a1      	cmp	r1, r4
 8001caa:	d0f2      	beq.n	8001c92 <HAL_UARTEx_RxEventCallback+0x46>
      : _M_current(__i) { }
 8001cac:	683a      	ldr	r2, [r7, #0]
		received_data = std::vector<uint8_t>(buffer->begin() + *buffer_index, buffer->begin() + Size);
 8001cae:	ab03      	add	r3, sp, #12
      { return __normal_iterator(_M_current + __n); }
 8001cb0:	4411      	add	r1, r2
	if (Size > *buffer_index)
 8001cb2:	d228      	bcs.n	8001d06 <HAL_UARTEx_RxEventCallback+0xba>
		received_data = std::vector<uint8_t>(buffer->begin() + *buffer_index, buffer->begin() + Size);
 8001cb4:	4422      	add	r2, r4
 8001cb6:	a807      	add	r0, sp, #28
 8001cb8:	f7ff f848 	bl	8000d4c <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_>
 8001cbc:	a804      	add	r0, sp, #16
 8001cbe:	a907      	add	r1, sp, #28
 8001cc0:	f7fe ff18 	bl	8000af4 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8001cc4:	a807      	add	r0, sp, #28
 8001cc6:	f7fe ff0b 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	uint16_t processed_length = communication.Process(ID, received_data, &success);
 8001cca:	a904      	add	r1, sp, #16
 8001ccc:	a807      	add	r0, sp, #28
 8001cce:	f7fe ffb7 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8001cd2:	f10d 030f 	add.w	r3, sp, #15
 8001cd6:	aa07      	add	r2, sp, #28
 8001cd8:	4629      	mov	r1, r5
 8001cda:	4833      	ldr	r0, [pc, #204]	@ (8001da8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001cdc:	f012 fa3c 	bl	8014158 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>
 8001ce0:	4604      	mov	r4, r0
 8001ce2:	a807      	add	r0, sp, #28
 8001ce4:	f7fe fefc 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	*buffer_index += processed_length;
 8001ce8:	f8b8 3000 	ldrh.w	r3, [r8]
 8001cec:	18e0      	adds	r0, r4, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cf2:	b280      	uxth	r0, r0
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	f8a8 0000 	strh.w	r0, [r8]
	if (*buffer_index >= buffer->size())
 8001cfa:	4298      	cmp	r0, r3
		*buffer_index -= buffer->size();
 8001cfc:	bf24      	itt	cs
 8001cfe:	1ac0      	subcs	r0, r0, r3
 8001d00:	f8a8 0000 	strhcs.w	r0, [r8]
 8001d04:	e7c5      	b.n	8001c92 <HAL_UARTEx_RxEventCallback+0x46>
		received_data = std::vector<uint8_t>(buffer->begin() + *buffer_index, buffer->end());
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	a807      	add	r0, sp, #28
 8001d0a:	f7ff f81f 	bl	8000d4c <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_>
 8001d0e:	a907      	add	r1, sp, #28
 8001d10:	a804      	add	r0, sp, #16
 8001d12:	f7fe feef 	bl	8000af4 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8001d16:	a807      	add	r0, sp, #28
 8001d18:	f7fe fee2 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      : _M_current(__i) { }
 8001d1c:	f8d7 9000 	ldr.w	r9, [r7]
      { return __normal_iterator(_M_current + __n); }
 8001d20:	eb09 0b04 	add.w	fp, r9, r4
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
 8001d24:	45cb      	cmp	fp, r9
 8001d26:	d0d0      	beq.n	8001cca <HAL_UARTEx_RxEventCallback+0x7e>
	  {
	    const size_type __n = std::distance(__first, __last);
	    if (size_type(this->_M_impl._M_end_of_storage
 8001d28:	9b06      	ldr	r3, [sp, #24]
      : _M_current(__i) { }
 8001d2a:	e9dd a604 	ldrd	sl, r6, [sp, #16]
			  - this->_M_impl._M_finish) >= __n)
 8001d2e:	1b9a      	subs	r2, r3, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 8001d30:	42a2      	cmp	r2, r4
 8001d32:	d310      	bcc.n	8001d56 <HAL_UARTEx_RxEventCallback+0x10a>
			      _Category>::__copy_m(__first, __last, __result);
 8001d34:	4632      	mov	r2, r6
 8001d36:	4659      	mov	r1, fp
 8001d38:	4648      	mov	r0, r9
 8001d3a:	f7fe ff75 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    std::advance(__mid, __elems_after);
		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		    std::__uninitialized_copy_a(__mid, __last,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
		    this->_M_impl._M_finish += __n - __elems_after;
 8001d3e:	1932      	adds	r2, r6, r4
 8001d40:	4631      	mov	r1, r6
 8001d42:	4630      	mov	r0, r6
 8001d44:	9205      	str	r2, [sp, #20]
 8001d46:	f7ff ff75 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001d4a:	4632      	mov	r2, r6
 8001d4c:	4649      	mov	r1, r9
 8001d4e:	4648      	mov	r0, r9
 8001d50:	f7fe ff6a 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001d54:	e7b9      	b.n	8001cca <HAL_UARTEx_RxEventCallback+0x7e>
		// reachable.
		pointer __old_start = this->_M_impl._M_start;
		pointer __old_finish = this->_M_impl._M_finish;

		const size_type __len =
		  _M_check_len(__n, "vector::_M_range_insert");
 8001d56:	4621      	mov	r1, r4
 8001d58:	4a14      	ldr	r2, [pc, #80]	@ (8001dac <HAL_UARTEx_RxEventCallback+0x160>)
 8001d5a:	a804      	add	r0, sp, #16
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	f7fe fee0 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8001d62:	9000      	str	r0, [sp, #0]
		pointer __new_start(this->_M_allocate(__len));
 8001d64:	f7fe fd9e 	bl	80008a4 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8001d68:	4631      	mov	r1, r6
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	4604      	mov	r4, r0
 8001d6e:	4650      	mov	r0, sl
 8001d70:	f7ff ff60 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001d74:	4659      	mov	r1, fp
 8001d76:	4602      	mov	r2, r0
 8001d78:	4648      	mov	r0, r9
 8001d7a:	f7fe ff55 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001d7e:	4631      	mov	r1, r6
 8001d80:	4602      	mov	r2, r0
 8001d82:	4630      	mov	r0, r6
 8001d84:	f7ff ff56 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001d88:	4606      	mov	r6, r0
	if (__p)
 8001d8a:	f1ba 0f00 	cmp.w	sl, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_UARTEx_RxEventCallback+0x150>
 8001d90:	9b01      	ldr	r3, [sp, #4]
 8001d92:	4650      	mov	r0, sl
 8001d94:	eba3 010a 	sub.w	r1, r3, sl
 8001d98:	f01c f912 	bl	801dfc0 <_ZdlPvj>
		_GLIBCXX_ASAN_ANNOTATE_REINIT;
		_M_deallocate(__old_start,
			      this->_M_impl._M_end_of_storage - __old_start);
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8001d9c:	9b00      	ldr	r3, [sp, #0]
		this->_M_impl._M_finish = __new_finish;
 8001d9e:	e9cd 4604 	strd	r4, r6, [sp, #16]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8001da2:	441c      	add	r4, r3
 8001da4:	9406      	str	r4, [sp, #24]
 8001da6:	e790      	b.n	8001cca <HAL_UARTEx_RxEventCallback+0x7e>
 8001da8:	240018fc 	.word	0x240018fc
 8001dac:	0801f257 	.word	0x0801f257

08001db0 <_ZN23ControllerConfigurationD1Ev>:
#include "Configurations/ControlConfiguration.h"

#include "PlatformLEDs/PlatformLEDs.hpp"

// Controller Configuration Struct
struct ControllerConfiguration {
 8001db0:	b510      	push	{r4, lr}
 8001db2:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001db4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
	if (__p)
 8001db6:	b120      	cbz	r0, 8001dc2 <_ZN23ControllerConfigurationD1Ev+0x12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001db8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001dba:	1a09      	subs	r1, r1, r0
 8001dbc:	1089      	asrs	r1, r1, #2
 8001dbe:	f7fe fd6b 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001dc2:	68a0      	ldr	r0, [r4, #8]
	if (__p)
 8001dc4:	b120      	cbz	r0, 8001dd0 <_ZN23ControllerConfigurationD1Ev+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001dc6:	6921      	ldr	r1, [r4, #16]
 8001dc8:	1a09      	subs	r1, r1, r0
 8001dca:	1089      	asrs	r1, r1, #2
 8001dcc:	f7fe fd64 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	bd10      	pop	{r4, pc}

08001dd4 <_ZN4LEDSD1Ev>:
    uint16_t G_address;
    uint16_t B_address;
};

// LEDS class used to control the LED
class LEDS {
 8001dd4:	b570      	push	{r4, r5, r6, lr}
 8001dd6:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001dd8:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
	if (__p)
 8001dda:	b118      	cbz	r0, 8001de4 <_ZN4LEDSD1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ddc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001dde:	1a09      	subs	r1, r1, r0
 8001de0:	f01c f8ee 	bl	801dfc0 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001de4:	6a20      	ldr	r0, [r4, #32]
	if (__p)
 8001de6:	b120      	cbz	r0, 8001df2 <_ZN4LEDSD1Ev+0x1e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001de8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001dea:	1a09      	subs	r1, r1, r0
 8001dec:	1109      	asrs	r1, r1, #4
 8001dee:	f7fe fd56 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001df2:	6960      	ldr	r0, [r4, #20]
	if (__p)
 8001df4:	b120      	cbz	r0, 8001e00 <_ZN4LEDSD1Ev+0x2c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001df6:	69e1      	ldr	r1, [r4, #28]
 8001df8:	1a09      	subs	r1, r1, r0
 8001dfa:	1109      	asrs	r1, r1, #4
 8001dfc:	f7fe fd4f 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001e00:	e9d4 5602 	ldrd	r5, r6, [r4, #8]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
 8001e04:	42ae      	cmp	r6, r5
 8001e06:	d107      	bne.n	8001e18 <_ZN4LEDSD1Ev+0x44>
	_M_deallocate(_M_impl._M_start,
 8001e08:	68a0      	ldr	r0, [r4, #8]
	if (__p)
 8001e0a:	b118      	cbz	r0, 8001e14 <_ZN4LEDSD1Ev+0x40>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e0c:	6921      	ldr	r1, [r4, #16]
 8001e0e:	1a09      	subs	r1, r1, r0
 8001e10:	f01c f8d6 	bl	801dfc0 <_ZdlPvj>
 8001e14:	4620      	mov	r0, r4
 8001e16:	bd70      	pop	{r4, r5, r6, pc}
      }
 8001e18:	f105 0010 	add.w	r0, r5, #16
 8001e1c:	3520      	adds	r5, #32
 8001e1e:	f7fe fe5f 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001e22:	e7ef      	b.n	8001e04 <_ZN4LEDSD1Ev+0x30>

08001e24 <_ZN13CommunicationD1Ev>:

	std::vector<uint8_t> data; // TODO, set as the register type with template
};

// Communication Class to communication with other modules
class Communication {
 8001e24:	b570      	push	{r4, r5, r6, lr}
 8001e26:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001e28:	e9d0 560c 	ldrd	r5, r6, [r0, #48]	@ 0x30
 8001e2c:	42ae      	cmp	r6, r5
 8001e2e:	d112      	bne.n	8001e56 <_ZN13CommunicationD1Ev+0x32>
	_M_deallocate(_M_impl._M_start,
 8001e30:	6b20      	ldr	r0, [r4, #48]	@ 0x30
	if (__p)
 8001e32:	b118      	cbz	r0, 8001e3c <_ZN13CommunicationD1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e34:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8001e36:	1a09      	subs	r1, r1, r0
 8001e38:	f01c f8c2 	bl	801dfc0 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001e3c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
	if (__p)
 8001e3e:	b120      	cbz	r0, 8001e4a <_ZN13CommunicationD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e40:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001e42:	1a09      	subs	r1, r1, r0
 8001e44:	1089      	asrs	r1, r1, #2
 8001e46:	f7fe fd27 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      }
 8001e4a:	f104 0018 	add.w	r0, r4, #24
 8001e4e:	f7fe fe47 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001e52:	4620      	mov	r0, r4
 8001e54:	bd70      	pop	{r4, r5, r6, pc}
 8001e56:	1d28      	adds	r0, r5, #4
 8001e58:	3514      	adds	r5, #20
 8001e5a:	f7fe fe41 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001e5e:	e7e5      	b.n	8001e2c <_ZN13CommunicationD1Ev+0x8>

08001e60 <_ZN17MasterSubscribersD1Ev>:
	std::vector<SubscriberInterface> interfaces;    // interfaces associated to remote_registers (index by index)
	std::vector<uint8_t> filters;					// list of module address filters
};

// MasterSubscribers class used to receive published data from other modules
class MasterSubscribers {
 8001e60:	b570      	push	{r4, r5, r6, lr}
 8001e62:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001e64:	6980      	ldr	r0, [r0, #24]
	if (__p)
 8001e66:	b120      	cbz	r0, 8001e72 <_ZN17MasterSubscribersD1Ev+0x12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e68:	6a21      	ldr	r1, [r4, #32]
 8001e6a:	1a09      	subs	r1, r1, r0
 8001e6c:	1089      	asrs	r1, r1, #2
 8001e6e:	f7fe fd13 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001e72:	e9d4 5603 	ldrd	r5, r6, [r4, #12]
 8001e76:	42ae      	cmp	r6, r5
 8001e78:	d107      	bne.n	8001e8a <_ZN17MasterSubscribersD1Ev+0x2a>
	_M_deallocate(_M_impl._M_start,
 8001e7a:	68e0      	ldr	r0, [r4, #12]
	if (__p)
 8001e7c:	b118      	cbz	r0, 8001e86 <_ZN17MasterSubscribersD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e7e:	6961      	ldr	r1, [r4, #20]
 8001e80:	1a09      	subs	r1, r1, r0
 8001e82:	f01c f89d 	bl	801dfc0 <_ZdlPvj>
 8001e86:	4620      	mov	r0, r4
 8001e88:	bd70      	pop	{r4, r5, r6, pc}
      }
 8001e8a:	f105 001c 	add.w	r0, r5, #28
 8001e8e:	f7fe fe27 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	_M_deallocate(_M_impl._M_start,
 8001e92:	6928      	ldr	r0, [r5, #16]
	if (__p)
 8001e94:	b118      	cbz	r0, 8001e9e <_ZN17MasterSubscribersD1Ev+0x3e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e96:	69a9      	ldr	r1, [r5, #24]
 8001e98:	1a09      	subs	r1, r1, r0
 8001e9a:	f01c f891 	bl	801dfc0 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001e9e:	6868      	ldr	r0, [r5, #4]
	if (__p)
 8001ea0:	b118      	cbz	r0, 8001eaa <_ZN17MasterSubscribersD1Ev+0x4a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ea2:	68e9      	ldr	r1, [r5, #12]
 8001ea4:	1a09      	subs	r1, r1, r0
 8001ea6:	f01c f88b 	bl	801dfc0 <_ZdlPvj>
 8001eaa:	3528      	adds	r5, #40	@ 0x28
 8001eac:	e7e3      	b.n	8001e76 <_ZN17MasterSubscribersD1Ev+0x16>

08001eae <_ZN9RegistersD1Ev>:
	bool (*write)(void*, uint16_t, T*, uint16_t);	// write callback
	bool (*read)(void*, uint16_t, T**, uint16_t*);	// read callback
};

// Registers class used to interface memory addresses to memory pointers and / or callbacks
class Registers {
 8001eae:	b510      	push	{r4, lr}
 8001eb0:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001eb2:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
	if (__p)
 8001eb6:	b128      	cbz	r0, 8001ec4 <_ZN9RegistersD1Ev+0x16>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001eb8:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8001ebc:	1a09      	subs	r1, r1, r0
 8001ebe:	1109      	asrs	r1, r1, #4
 8001ec0:	f7fe fced 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001ec4:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
	if (__p)
 8001ec8:	b128      	cbz	r0, 8001ed6 <_ZN9RegistersD1Ev+0x28>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001eca:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8001ece:	1a09      	subs	r1, r1, r0
 8001ed0:	1109      	asrs	r1, r1, #4
 8001ed2:	f7fe fce4 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001ed6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
	if (__p)
 8001ed8:	b120      	cbz	r0, 8001ee4 <_ZN9RegistersD1Ev+0x36>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001eda:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8001edc:	1a09      	subs	r1, r1, r0
 8001ede:	1109      	asrs	r1, r1, #4
 8001ee0:	f7fe fcdd 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001ee4:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
	if (__p)
 8001ee6:	b120      	cbz	r0, 8001ef2 <_ZN9RegistersD1Ev+0x44>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ee8:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8001eea:	1a09      	subs	r1, r1, r0
 8001eec:	1109      	asrs	r1, r1, #4
 8001eee:	f7fe fcd6 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001ef2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
	if (__p)
 8001ef4:	b120      	cbz	r0, 8001f00 <_ZN9RegistersD1Ev+0x52>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ef6:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8001ef8:	1a09      	subs	r1, r1, r0
 8001efa:	1109      	asrs	r1, r1, #4
 8001efc:	f7fe fccf 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001f00:	6d20      	ldr	r0, [r4, #80]	@ 0x50
	if (__p)
 8001f02:	b120      	cbz	r0, 8001f0e <_ZN9RegistersD1Ev+0x60>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f04:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8001f06:	1a09      	subs	r1, r1, r0
 8001f08:	1109      	asrs	r1, r1, #4
 8001f0a:	f7fe fcc8 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001f0e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
	if (__p)
 8001f10:	b120      	cbz	r0, 8001f1c <_ZN9RegistersD1Ev+0x6e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f12:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8001f14:	1a09      	subs	r1, r1, r0
 8001f16:	1109      	asrs	r1, r1, #4
 8001f18:	f7fe fcc1 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001f1c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
	if (__p)
 8001f1e:	b120      	cbz	r0, 8001f2a <_ZN9RegistersD1Ev+0x7c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f20:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001f22:	1a09      	subs	r1, r1, r0
 8001f24:	1109      	asrs	r1, r1, #4
 8001f26:	f7fe fcba 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001f2a:	6860      	ldr	r0, [r4, #4]
	if (__p)
 8001f2c:	b120      	cbz	r0, 8001f38 <_ZN9RegistersD1Ev+0x8a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f2e:	68e1      	ldr	r1, [r4, #12]
 8001f30:	1a09      	subs	r1, r1, r0
 8001f32:	1109      	asrs	r1, r1, #4
 8001f34:	f7fe fcb3 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
 8001f38:	4620      	mov	r0, r4
 8001f3a:	bd10      	pop	{r4, pc}

08001f3c <_ZNSt6vectorI9PublisherSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001f3c:	b570      	push	{r4, r5, r6, lr}
 8001f3e:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001f40:	e9d0 5600 	ldrd	r5, r6, [r0]
 8001f44:	42ae      	cmp	r6, r5
 8001f46:	d107      	bne.n	8001f58 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x1c>
	_M_deallocate(_M_impl._M_start,
 8001f48:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8001f4a:	b118      	cbz	r0, 8001f54 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f4c:	68a1      	ldr	r1, [r4, #8]
 8001f4e:	1a09      	subs	r1, r1, r0
 8001f50:	f01c f836 	bl	801dfc0 <_ZdlPvj>
      }
 8001f54:	4620      	mov	r0, r4
 8001f56:	bd70      	pop	{r4, r5, r6, pc}
	_M_deallocate(_M_impl._M_start,
 8001f58:	6968      	ldr	r0, [r5, #20]
	if (__p)
 8001f5a:	b120      	cbz	r0, 8001f66 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x2a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f5c:	69e9      	ldr	r1, [r5, #28]
 8001f5e:	1a09      	subs	r1, r1, r0
 8001f60:	1089      	asrs	r1, r1, #2
 8001f62:	f7fe fc99 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001f66:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8001f68:	b118      	cbz	r0, 8001f72 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x36>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f6a:	6929      	ldr	r1, [r5, #16]
 8001f6c:	1a09      	subs	r1, r1, r0
 8001f6e:	f01c f827 	bl	801dfc0 <_ZdlPvj>
 8001f72:	3520      	adds	r5, #32
 8001f74:	e7e6      	b.n	8001f44 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x8>

08001f76 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001f76:	b570      	push	{r4, r5, r6, lr}
 8001f78:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001f7a:	e9d0 5600 	ldrd	r5, r6, [r0]
 8001f7e:	42ae      	cmp	r6, r5
 8001f80:	d107      	bne.n	8001f92 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x1c>
	_M_deallocate(_M_impl._M_start,
 8001f82:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8001f84:	b118      	cbz	r0, 8001f8e <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f86:	68a1      	ldr	r1, [r4, #8]
 8001f88:	1a09      	subs	r1, r1, r0
 8001f8a:	f01c f819 	bl	801dfc0 <_ZdlPvj>
      }
 8001f8e:	4620      	mov	r0, r4
 8001f90:	bd70      	pop	{r4, r5, r6, pc}
 8001f92:	4628      	mov	r0, r5
 8001f94:	350c      	adds	r5, #12
 8001f96:	f7fe fda3 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001f9a:	e7f0      	b.n	8001f7e <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x8>

08001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001f9c:	b510      	push	{r4, lr}
 8001f9e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001fa0:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8001fa2:	b120      	cbz	r0, 8001fae <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001fa4:	68a1      	ldr	r1, [r4, #8]
 8001fa6:	1a09      	subs	r1, r1, r0
 8001fa8:	1089      	asrs	r1, r1, #2
 8001faa:	f7fe fc75 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      }
 8001fae:	4620      	mov	r0, r4
 8001fb0:	bd10      	pop	{r4, pc}

08001fb2 <_ZNSt12_Vector_baseItSaItEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001fb2:	b510      	push	{r4, lr}
 8001fb4:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001fb6:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8001fb8:	b118      	cbz	r0, 8001fc2 <_ZNSt12_Vector_baseItSaItEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001fba:	68a1      	ldr	r1, [r4, #8]
 8001fbc:	1a09      	subs	r1, r1, r0
 8001fbe:	f01b ffff 	bl	801dfc0 <_ZdlPvj>
      }
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	bd10      	pop	{r4, pc}
	...

08001fc8 <_ZN21CommunicationProtocolD1Ev>:
	uint8_t target_address;
	uint8_t source_address;
};

// CommunicationProtocol class used as a basis to derive custom Protocols
class CommunicationProtocol {
 8001fc8:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <_ZN21CommunicationProtocolD1Ev+0x28>)
 8001fca:	b510      	push	{r4, lr}
 8001fcc:	4604      	mov	r4, r0
 8001fce:	f840 3b2c 	str.w	r3, [r0], #44
      }
 8001fd2:	f7ff ffee 	bl	8001fb2 <_ZNSt12_Vector_baseItSaItEED1Ev>
 8001fd6:	f104 0020 	add.w	r0, r4, #32
 8001fda:	f7ff ffcc 	bl	8001f76 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
 8001fde:	f104 0010 	add.w	r0, r4, #16
 8001fe2:	f7fe fd7d 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001fe6:	1d20      	adds	r0, r4, #4
 8001fe8:	f7ff ffc5 	bl	8001f76 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
 8001fec:	4620      	mov	r0, r4
 8001fee:	bd10      	pop	{r4, pc}
 8001ff0:	0801f4d8 	.word	0x0801f4d8

08001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001ff4:	b510      	push	{r4, lr}
 8001ff6:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001ff8:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8001ffa:	b118      	cbz	r0, 8002004 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ffc:	68a1      	ldr	r1, [r4, #8]
 8001ffe:	1a09      	subs	r1, r1, r0
 8002000:	f01b ffde 	bl	801dfc0 <_ZdlPvj>
      }
 8002004:	4620      	mov	r0, r4
 8002006:	bd10      	pop	{r4, pc}

08002008 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800200c:	4604      	mov	r4, r0
 800200e:	460f      	mov	r7, r1
	  for (; __first != __last; ++__first)
 8002010:	42bc      	cmp	r4, r7
 8002012:	d101      	bne.n	8002018 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x10>
	    std::_Destroy(std::__addressof(*__first));
	}
 8002014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002018:	e9d4 5803 	ldrd	r5, r8, [r4, #12]
	  for (; __first != __last; ++__first)
 800201c:	45a8      	cmp	r8, r5
 800201e:	d107      	bne.n	8002030 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x28>
	_M_deallocate(_M_impl._M_start,
 8002020:	68e0      	ldr	r0, [r4, #12]
	if (__p)
 8002022:	b118      	cbz	r0, 800202c <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x24>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002024:	6961      	ldr	r1, [r4, #20]
 8002026:	1a09      	subs	r1, r1, r0
 8002028:	f01b ffca 	bl	801dfc0 <_ZdlPvj>
 800202c:	3418      	adds	r4, #24
 800202e:	e7ef      	b.n	8002010 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x8>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002030:	e9d5 6905 	ldrd	r6, r9, [r5, #20]
 8002034:	45b1      	cmp	r9, r6
 8002036:	d107      	bne.n	8002048 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x40>
	_M_deallocate(_M_impl._M_start,
 8002038:	6968      	ldr	r0, [r5, #20]
	if (__p)
 800203a:	b118      	cbz	r0, 8002044 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x3c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800203c:	69e9      	ldr	r1, [r5, #28]
 800203e:	1a09      	subs	r1, r1, r0
 8002040:	f01b ffbe 	bl	801dfc0 <_ZdlPvj>
 8002044:	3528      	adds	r5, #40	@ 0x28
 8002046:	e7e9      	b.n	800201c <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x14>
      }
 8002048:	f106 000c 	add.w	r0, r6, #12
 800204c:	3618      	adds	r6, #24
 800204e:	f7ff ffd1 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 8002052:	e7ef      	b.n	8002034 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x2c>

08002054 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002056:	4604      	mov	r4, r0
 8002058:	460e      	mov	r6, r1
	  for (; __first != __last; ++__first)
 800205a:	42b4      	cmp	r4, r6
 800205c:	d100      	bne.n	8002060 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0xc>
	}
 800205e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002060:	e9d4 571c 	ldrd	r5, r7, [r4, #112]	@ 0x70
	  for (; __first != __last; ++__first)
 8002064:	42af      	cmp	r7, r5
 8002066:	d118      	bne.n	800209a <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x46>
	_M_deallocate(_M_impl._M_start,
 8002068:	6f20      	ldr	r0, [r4, #112]	@ 0x70
	if (__p)
 800206a:	b118      	cbz	r0, 8002074 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800206c:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 800206e:	1a09      	subs	r1, r1, r0
 8002070:	f01b ffa6 	bl	801dfc0 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8002074:	6e60      	ldr	r0, [r4, #100]	@ 0x64
	if (__p)
 8002076:	b120      	cbz	r0, 8002082 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x2e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002078:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800207a:	1a09      	subs	r1, r1, r0
 800207c:	1089      	asrs	r1, r1, #2
 800207e:	f7fe fc0b 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8002082:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	@ 0x58
 8002086:	f7ff ffbf 	bl	8002008 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
 800208a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
	if (__p)
 800208c:	b118      	cbz	r0, 8002096 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x42>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800208e:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8002090:	1a09      	subs	r1, r1, r0
 8002092:	f01b ff95 	bl	801dfc0 <_ZdlPvj>
	  for (; __first != __last; ++__first)
 8002096:	347c      	adds	r4, #124	@ 0x7c
 8002098:	e7df      	b.n	800205a <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x6>
      }
 800209a:	f105 0014 	add.w	r0, r5, #20
 800209e:	3520      	adds	r5, #32
 80020a0:	f7ff ffa8 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 80020a4:	e7de      	b.n	8002064 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x10>

080020a6 <_ZN7SensorsD1Ev>:
	std::vector<Sensor*> pending_sensors; 		// vector of pending sensor pointers
	std::vector<ReadRequest> pending_requests;	// vector of read requests
};

// Sensors class to manage reading of I2C and internal sensors. It is compatible with almost every I2C sensor and does optimize the reading time by avoiding waiting times as much as possible.
class Sensors {
 80020a6:	b510      	push	{r4, lr}
 80020a8:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 80020aa:	f8d0 00b0 	ldr.w	r0, [r0, #176]	@ 0xb0
	if (__p)
 80020ae:	b120      	cbz	r0, 80020ba <_ZN7SensorsD1Ev+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020b0:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
 80020b4:	1a09      	subs	r1, r1, r0
 80020b6:	f01b ff83 	bl	801dfc0 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80020ba:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
	if (__p)
 80020be:	b120      	cbz	r0, 80020ca <_ZN7SensorsD1Ev+0x24>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020c0:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 80020c4:	1a09      	subs	r1, r1, r0
 80020c6:	f01b ff7b 	bl	801dfc0 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80020ca:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
	if (__p)
 80020ce:	b120      	cbz	r0, 80020da <_ZN7SensorsD1Ev+0x34>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020d0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 80020d4:	1a09      	subs	r1, r1, r0
 80020d6:	f01b ff73 	bl	801dfc0 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80020da:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
	if (__p)
 80020de:	b120      	cbz	r0, 80020ea <_ZN7SensorsD1Ev+0x44>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020e0:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80020e4:	1a09      	subs	r1, r1, r0
 80020e6:	f01b ff6b 	bl	801dfc0 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80020ea:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
	if (__p)
 80020ee:	b120      	cbz	r0, 80020fa <_ZN7SensorsD1Ev+0x54>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020f0:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 80020f4:	1a09      	subs	r1, r1, r0
 80020f6:	f01b ff63 	bl	801dfc0 <_ZdlPvj>
      }
 80020fa:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 80020fe:	f7ff ff4d 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	_M_deallocate(_M_impl._M_start,
 8002102:	6c20      	ldr	r0, [r4, #64]	@ 0x40
	if (__p)
 8002104:	b118      	cbz	r0, 800210e <_ZN7SensorsD1Ev+0x68>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002106:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002108:	1a09      	subs	r1, r1, r0
 800210a:	f01b ff59 	bl	801dfc0 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 800210e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
	if (__p)
 8002110:	b120      	cbz	r0, 800211c <_ZN7SensorsD1Ev+0x76>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002112:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8002114:	1a09      	subs	r1, r1, r0
 8002116:	1089      	asrs	r1, r1, #2
 8002118:	f7fe fbbe 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      }
 800211c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8002120:	f7ff ff47 	bl	8001fb2 <_ZNSt12_Vector_baseItSaItEED1Ev>
 8002124:	f104 001c 	add.w	r0, r4, #28
 8002128:	f7fe fcda 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	__destroy(__first, __last);
 800212c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8002130:	f7ff ff90 	bl	8002054 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
 8002134:	6920      	ldr	r0, [r4, #16]
	if (__p)
 8002136:	b118      	cbz	r0, 8002140 <_ZN7SensorsD1Ev+0x9a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002138:	69a1      	ldr	r1, [r4, #24]
 800213a:	1a09      	subs	r1, r1, r0
 800213c:	f01b ff40 	bl	801dfc0 <_ZdlPvj>
 8002140:	4620      	mov	r0, r4
 8002142:	bd10      	pop	{r4, pc}

08002144 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8002144:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002148:	e9d0 8a00 	ldrd	r8, sl, [r0]
 800214c:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 800214e:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002152:	ebaa 0208 	sub.w	r2, sl, r8
 8002156:	4607      	mov	r7, r0
 8002158:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 800215a:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800215e:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 8002162:	d102      	bne.n	800216a <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8002164:	481f      	ldr	r0, [pc, #124]	@ (80021e4 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>)
 8002166:	f01c f805 	bl	801e174 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 800216a:	45c2      	cmp	sl, r8
 800216c:	bf14      	ite	ne
 800216e:	4622      	movne	r2, r4
 8002170:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8002172:	eba1 0508 	sub.w	r5, r1, r8
 8002176:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002178:	d22f      	bcs.n	80021da <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800217a:	b384      	cbz	r4, 80021de <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800217c:	429c      	cmp	r4, r3
 800217e:	bf28      	it	cs
 8002180:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8002182:	00a0      	lsls	r0, r4, #2
 8002184:	f01b ff41 	bl	801e00a <_Znwj>
 8002188:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800218a:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 800218e:	2d00      	cmp	r5, #0
 8002190:	5173      	str	r3, [r6, r5]
 8002192:	dd04      	ble.n	800219e <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002194:	462a      	mov	r2, r5
 8002196:	4641      	mov	r1, r8
 8002198:	4630      	mov	r0, r6
 800219a:	f01c feb3 	bl	801ef04 <memmove>
      ptrdiff_t __count = __last - __first;
 800219e:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 80021a2:	3504      	adds	r5, #4
      if (__count > 0)
 80021a4:	f1ba 0f00 	cmp.w	sl, #0
 80021a8:	4435      	add	r5, r6
 80021aa:	dd04      	ble.n	80021b6 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80021ac:	4652      	mov	r2, sl
 80021ae:	4649      	mov	r1, r9
 80021b0:	4628      	mov	r0, r5
 80021b2:	f01c ff9f 	bl	801f0f4 <memcpy>
      return __result + __count;
 80021b6:	4455      	add	r5, sl
	if (__p)
 80021b8:	f1b8 0f00 	cmp.w	r8, #0
 80021bc:	d006      	beq.n	80021cc <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x88>
		    this->_M_impl._M_end_of_storage - __old_start);
 80021be:	68b9      	ldr	r1, [r7, #8]
 80021c0:	4640      	mov	r0, r8
 80021c2:	eba1 0108 	sub.w	r1, r1, r8
 80021c6:	1089      	asrs	r1, r1, #2
 80021c8:	f7fe fb66 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      this->_M_impl._M_finish = __new_finish;
 80021cc:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80021d0:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 80021d4:	60be      	str	r6, [r7, #8]
    }
 80021d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80021da:	461c      	mov	r4, r3
 80021dc:	e7d1      	b.n	8002182 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80021de:	4626      	mov	r6, r4
 80021e0:	e7d3      	b.n	800218a <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 80021e2:	bf00      	nop
 80021e4:	0801f20c 	.word	0x0801f20c

080021e8 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_>:
void TemplateCommunicationProtocol<H>::AddInterface(uint8_t ID, H* interface) {
 80021e8:	b513      	push	{r0, r1, r4, lr}
 80021ea:	4604      	mov	r4, r0
 80021ec:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 80021ee:	f014 ff5d 	bl	80170ac <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 80021f2:	4620      	mov	r0, r4
 80021f4:	f015 f8f4 	bl	80173e0 <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80021f8:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	@ 0x3c
 80021fc:	4299      	cmp	r1, r3
 80021fe:	d005      	beq.n	800220c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_+0x24>
 8002200:	9b01      	ldr	r3, [sp, #4]
 8002202:	f841 3b04 	str.w	r3, [r1], #4
	    ++this->_M_impl._M_finish;
 8002206:	63e1      	str	r1, [r4, #60]	@ 0x3c
}
 8002208:	b002      	add	sp, #8
 800220a:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 800220c:	aa01      	add	r2, sp, #4
 800220e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8002212:	f7ff ff97 	bl	8002144 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 8002216:	e7f7      	b.n	8002208 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_+0x20>

08002218 <_GLOBAL__sub_I_hadc1>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
Registers registers;
 800221c:	4839      	ldr	r0, [pc, #228]	@ (8002304 <_GLOBAL__sub_I_hadc1+0xec>)
}
 800221e:	b091      	sub	sp, #68	@ 0x44
Registers registers;
 8002220:	f017 fadc 	bl	80197dc <_ZN9RegistersC1Ev>
MasterSubscribers subscribers;
 8002224:	4d38      	ldr	r5, [pc, #224]	@ (8002308 <_GLOBAL__sub_I_hadc1+0xf0>)
UARTProtocol protocol_uart;
 8002226:	4839      	ldr	r0, [pc, #228]	@ (800230c <_GLOBAL__sub_I_hadc1+0xf4>)
 8002228:	f015 fd8e 	bl	8017d48 <_ZN12UARTProtocolC1Ev>
Communication communication;
 800222c:	4e38      	ldr	r6, [pc, #224]	@ (8002310 <_GLOBAL__sub_I_hadc1+0xf8>)
CANProtocol protocol_canfd;
 800222e:	4839      	ldr	r0, [pc, #228]	@ (8002314 <_GLOBAL__sub_I_hadc1+0xfc>)
 8002230:	f015 f93a 	bl	80174a8 <_ZN11CANProtocolC1Ev>
Services services;
 8002234:	4c38      	ldr	r4, [pc, #224]	@ (8002318 <_GLOBAL__sub_I_hadc1+0x100>)
MasterSubscribers subscribers;
 8002236:	4628      	mov	r0, r5
Publishers publishers;
 8002238:	4f38      	ldr	r7, [pc, #224]	@ (800231c <_GLOBAL__sub_I_hadc1+0x104>)
MasterSubscribers subscribers;
 800223a:	f01b f95f 	bl	801d4fc <_ZN17MasterSubscribersC1Ev>
Communication communication;
 800223e:	4630      	mov	r0, r6
 8002240:	f00e fae8 	bl	8010814 <_ZN13CommunicationC1Ev>
HardwareDelay hardware_delay(&htim4);
 8002244:	f8df 8100 	ldr.w	r8, [pc, #256]	@ 8002348 <_GLOBAL__sub_I_hadc1+0x130>
Services services;
 8002248:	4620      	mov	r0, r4
Sensors sensors;
 800224a:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 800234c <_GLOBAL__sub_I_hadc1+0x134>
Services services;
 800224e:	f01a fff2 	bl	801d236 <_ZN8ServicesC1Ev>
Publishers publishers;
 8002252:	4638      	mov	r0, r7
 8002254:	f016 f96f 	bl	8018536 <_ZN10PublishersC1Ev>
LEDS leds;
 8002258:	f8df a0f4 	ldr.w	sl, [pc, #244]	@ 8002350 <_GLOBAL__sub_I_hadc1+0x138>
HardwareDelay hardware_delay(&htim4);
 800225c:	4930      	ldr	r1, [pc, #192]	@ (8002320 <_GLOBAL__sub_I_hadc1+0x108>)
 800225e:	4640      	mov	r0, r8
 8002260:	f013 fe9e 	bl	8015fa0 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef>
Sensors sensors;
 8002264:	4648      	mov	r0, r9
 8002266:	f017 fe72 	bl	8019f4e <_ZN7SensorsC1Ev>
LEDS leds;
 800226a:	4650      	mov	r0, sl
 800226c:	f014 f910 	bl	8016490 <_ZN4LEDSC1Ev>
PlatformSensors platform_sensors;
 8002270:	482c      	ldr	r0, [pc, #176]	@ (8002324 <_GLOBAL__sub_I_hadc1+0x10c>)
 8002272:	f00d f911 	bl	800f498 <_ZN15PlatformSensorsC1Ev>
);
 8002276:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800227a:	4b2b      	ldr	r3, [pc, #172]	@ (8002328 <_GLOBAL__sub_I_hadc1+0x110>)
 800227c:	a910      	add	r1, sp, #64	@ 0x40
 800227e:	f8ad 2024 	strh.w	r2, [sp, #36]	@ 0x24
 8002282:	4a2a      	ldr	r2, [pc, #168]	@ (800232c <_GLOBAL__sub_I_hadc1+0x114>)
 8002284:	930e      	str	r3, [sp, #56]	@ 0x38
 8002286:	920a      	str	r2, [sp, #40]	@ 0x28
 8002288:	2201      	movs	r2, #1
 800228a:	930c      	str	r3, [sp, #48]	@ 0x30
 800228c:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8002290:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002294:	f8df b0bc 	ldr.w	fp, [pc, #188]	@ 8002354 <_GLOBAL__sub_I_hadc1+0x13c>
 8002298:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800229c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022a0:	f8ad 203c 	strh.w	r2, [sp, #60]	@ 0x3c
 80022a4:	4a22      	ldr	r2, [pc, #136]	@ (8002330 <_GLOBAL__sub_I_hadc1+0x118>)
 80022a6:	9207      	str	r2, [sp, #28]
 80022a8:	aa05      	add	r2, sp, #20
 80022aa:	e911 0003 	ldmdb	r1, {r0, r1}
 80022ae:	e882 0003 	stmia.w	r2, {r0, r1}
 80022b2:	aa03      	add	r2, sp, #12
 80022b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80022b8:	e882 0003 	stmia.w	r2, {r0, r1}
 80022bc:	aa01      	add	r2, sp, #4
 80022be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80022c2:	e882 0003 	stmia.w	r2, {r0, r1}
 80022c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80022c8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80022cc:	4658      	mov	r0, fp
 80022ce:	9200      	str	r2, [sp, #0]
 80022d0:	4a18      	ldr	r2, [pc, #96]	@ (8002334 <_GLOBAL__sub_I_hadc1+0x11c>)
 80022d2:	f012 fa48 	bl	8014766 <_ZN10ControllerC1EP11TIM_TypeDefPm4GPIOS3_S3_S3_P17ADC_HandleTypeDef>
);
 80022d6:	4b18      	ldr	r3, [pc, #96]	@ (8002338 <_GLOBAL__sub_I_hadc1+0x120>)
 80022d8:	4a18      	ldr	r2, [pc, #96]	@ (800233c <_GLOBAL__sub_I_hadc1+0x124>)
 80022da:	4919      	ldr	r1, [pc, #100]	@ (8002340 <_GLOBAL__sub_I_hadc1+0x128>)
 80022dc:	4618      	mov	r0, r3
 80022de:	f01b f8ab 	bl	801d438 <_ZN11ServomotorsC1EPmS0_>
User user(&registers, &subscribers, &communication, &services, &publishers, &hardware_delay, &sensors, &leds, &controller, &servomotors);
 80022e2:	4b15      	ldr	r3, [pc, #84]	@ (8002338 <_GLOBAL__sub_I_hadc1+0x120>)
 80022e4:	462a      	mov	r2, r5
 80022e6:	4907      	ldr	r1, [pc, #28]	@ (8002304 <_GLOBAL__sub_I_hadc1+0xec>)
 80022e8:	9400      	str	r4, [sp, #0]
 80022ea:	4816      	ldr	r0, [pc, #88]	@ (8002344 <_GLOBAL__sub_I_hadc1+0x12c>)
 80022ec:	e9cd b305 	strd	fp, r3, [sp, #20]
 80022f0:	4633      	mov	r3, r6
 80022f2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80022f6:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80022fa:	f01b fd98 	bl	801de2e <_ZN4UserC1EP9RegistersP17MasterSubscribersP13CommunicationP8ServicesP10PublishersP13HardwareDelayP7SensorsP4LEDSP10ControllerP11Servomotors>
}
 80022fe:	b011      	add	sp, #68	@ 0x44
 8002300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002304:	24001a18 	.word	0x24001a18
 8002308:	24001938 	.word	0x24001938
 800230c:	240019b0 	.word	0x240019b0
 8002310:	240018fc 	.word	0x240018fc
 8002314:	2400195c 	.word	0x2400195c
 8002318:	240004b8 	.word	0x240004b8
 800231c:	240004a0 	.word	0x240004a0
 8002320:	24002240 	.word	0x24002240
 8002324:	240002f8 	.word	0x240002f8
 8002328:	58021000 	.word	0x58021000
 800232c:	58020400 	.word	0x58020400
 8002330:	2400292c 	.word	0x2400292c
 8002334:	4001003c 	.word	0x4001003c
 8002338:	240000ac 	.word	0x240000ac
 800233c:	40000438 	.word	0x40000438
 8002340:	40000434 	.word	0x40000434
 8002344:	24000084 	.word	0x24000084
 8002348:	24000484 	.word	0x24000484
 800234c:	240003b8 	.word	0x240003b8
 8002350:	24000380 	.word	0x24000380
 8002354:	24000140 	.word	0x24000140

08002358 <_GLOBAL__sub_D_hadc1>:
 8002358:	b510      	push	{r4, lr}
      }
 800235a:	482b      	ldr	r0, [pc, #172]	@ (8002408 <_GLOBAL__sub_D_hadc1+0xb0>)
 800235c:	f7ff fe1e 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	float (*model)(std::vector<float*>, std::vector<float>); 			// Function to add a custom model to the controller output
	std::vector<float*> model_variables; 								// Vector of variables used by the custom model
};

// Controller class used to control the motor
class Controller {
 8002360:	482a      	ldr	r0, [pc, #168]	@ (800240c <_GLOBAL__sub_D_hadc1+0xb4>)
 8002362:	f7ff fd25 	bl	8001db0 <_ZN23ControllerConfigurationD1Ev>
 8002366:	482a      	ldr	r0, [pc, #168]	@ (8002410 <_GLOBAL__sub_D_hadc1+0xb8>)
 8002368:	f7ff fd22 	bl	8001db0 <_ZN23ControllerConfigurationD1Ev>
 800236c:	4829      	ldr	r0, [pc, #164]	@ (8002414 <_GLOBAL__sub_D_hadc1+0xbc>)
 800236e:	f7ff fd1f 	bl	8001db0 <_ZN23ControllerConfigurationD1Ev>
LEDS leds;
 8002372:	4829      	ldr	r0, [pc, #164]	@ (8002418 <_GLOBAL__sub_D_hadc1+0xc0>)
 8002374:	f7ff fd2e 	bl	8001dd4 <_ZN4LEDSD1Ev>
Sensors sensors;
 8002378:	4828      	ldr	r0, [pc, #160]	@ (800241c <_GLOBAL__sub_D_hadc1+0xc4>)
 800237a:	f7ff fe94 	bl	80020a6 <_ZN7SensorsD1Ev>
	_M_deallocate(_M_impl._M_start,
 800237e:	4b28      	ldr	r3, [pc, #160]	@ (8002420 <_GLOBAL__sub_D_hadc1+0xc8>)
 8002380:	6918      	ldr	r0, [r3, #16]
	if (__p)
 8002382:	b118      	cbz	r0, 800238c <_GLOBAL__sub_D_hadc1+0x34>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002384:	6999      	ldr	r1, [r3, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8002386:	1a09      	subs	r1, r1, r0
 8002388:	f01b fe1a 	bl	801dfc0 <_ZdlPvj>
	std::vector<PublishInterface> interfaces; 	// links interfaces to the publisher
	std::vector<Topic> topics;					// topics of the publisher
};

// Publishers class used to broadcast registers on the bus
class Publishers {
 800238c:	4825      	ldr	r0, [pc, #148]	@ (8002424 <_GLOBAL__sub_D_hadc1+0xcc>)
 800238e:	f7ff fdd5 	bl	8001f3c <_ZNSt6vectorI9PublisherSaIS0_EED1Ev>
#include <stm32h7xx_hal.h>

#include "Protocols/Communication/Core/TemplateCommunicationProtocol.hpp"

// CANProtocol class used to interface with every CANFD interface
class CANProtocol : public TemplateCommunicationProtocol<FDCAN_HandleTypeDef> {
 8002392:	4c25      	ldr	r4, [pc, #148]	@ (8002428 <_GLOBAL__sub_D_hadc1+0xd0>)
Communication communication;
 8002394:	4825      	ldr	r0, [pc, #148]	@ (800242c <_GLOBAL__sub_D_hadc1+0xd4>)
 8002396:	f7ff fd45 	bl	8001e24 <_ZN13CommunicationD1Ev>
MasterSubscribers subscribers;
 800239a:	4825      	ldr	r0, [pc, #148]	@ (8002430 <_GLOBAL__sub_D_hadc1+0xd8>)
 800239c:	f7ff fd60 	bl	8001e60 <_ZN17MasterSubscribersD1Ev>
 80023a0:	4b24      	ldr	r3, [pc, #144]	@ (8002434 <_GLOBAL__sub_D_hadc1+0xdc>)
	_M_deallocate(_M_impl._M_start,
 80023a2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80023a4:	6023      	str	r3, [r4, #0]
	if (__p)
 80023a6:	b118      	cbz	r0, 80023b0 <_GLOBAL__sub_D_hadc1+0x58>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80023a8:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80023aa:	1a09      	subs	r1, r1, r0
 80023ac:	f01b fe08 	bl	801dfc0 <_ZdlPvj>
class TemplateCommunicationProtocol : public CommunicationProtocol {
 80023b0:	4b21      	ldr	r3, [pc, #132]	@ (8002438 <_GLOBAL__sub_D_hadc1+0xe0>)
	_M_deallocate(_M_impl._M_start,
 80023b2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80023b4:	6023      	str	r3, [r4, #0]
	if (__p)
 80023b6:	b120      	cbz	r0, 80023c2 <_GLOBAL__sub_D_hadc1+0x6a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80023b8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80023ba:	1a09      	subs	r1, r1, r0
 80023bc:	1089      	asrs	r1, r1, #2
 80023be:	f7fe fa6b 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
#include "Protocols/Communication/Core/TemplateCommunicationProtocol.hpp"

#include "Definitions/CommunicationDefinition.h"

// UARTProtocol class used to interface with every UART interface
class UARTProtocol : public TemplateCommunicationProtocol<UART_HandleTypeDef> {
 80023c2:	4c1e      	ldr	r4, [pc, #120]	@ (800243c <_GLOBAL__sub_D_hadc1+0xe4>)
 80023c4:	4818      	ldr	r0, [pc, #96]	@ (8002428 <_GLOBAL__sub_D_hadc1+0xd0>)
 80023c6:	f7ff fdff 	bl	8001fc8 <_ZN21CommunicationProtocolD1Ev>
 80023ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002440 <_GLOBAL__sub_D_hadc1+0xe8>)
 80023cc:	4620      	mov	r0, r4
 80023ce:	f840 3b5c 	str.w	r3, [r0], #92
      }
 80023d2:	f7fe fb85 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80023d6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80023da:	f7fe fb81 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80023de:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 80023e2:	f7fe fb7d 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80023e6:	4b17      	ldr	r3, [pc, #92]	@ (8002444 <_GLOBAL__sub_D_hadc1+0xec>)
	_M_deallocate(_M_impl._M_start,
 80023e8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80023ea:	6023      	str	r3, [r4, #0]
	if (__p)
 80023ec:	b120      	cbz	r0, 80023f8 <_GLOBAL__sub_D_hadc1+0xa0>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80023ee:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80023f0:	1a09      	subs	r1, r1, r0
 80023f2:	1089      	asrs	r1, r1, #2
 80023f4:	f7fe fa50 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
 80023f8:	4810      	ldr	r0, [pc, #64]	@ (800243c <_GLOBAL__sub_D_hadc1+0xe4>)
 80023fa:	f7ff fde5 	bl	8001fc8 <_ZN21CommunicationProtocolD1Ev>
Registers registers;
 80023fe:	4812      	ldr	r0, [pc, #72]	@ (8002448 <_GLOBAL__sub_D_hadc1+0xf0>)
 8002400:	f7ff fd55 	bl	8001eae <_ZN9RegistersD1Ev>
}
 8002404:	bd10      	pop	{r4, pc}
 8002406:	bf00      	nop
 8002408:	24000290 	.word	0x24000290
 800240c:	24000240 	.word	0x24000240
 8002410:	240001fc 	.word	0x240001fc
 8002414:	240001b8 	.word	0x240001b8
 8002418:	24000380 	.word	0x24000380
 800241c:	240003b8 	.word	0x240003b8
 8002420:	24000484 	.word	0x24000484
 8002424:	240004ac 	.word	0x240004ac
 8002428:	2400195c 	.word	0x2400195c
 800242c:	240018fc 	.word	0x240018fc
 8002430:	24001938 	.word	0x24001938
 8002434:	0801f50c 	.word	0x0801f50c
 8002438:	0801f31c 	.word	0x0801f31c
 800243c:	240019b0 	.word	0x240019b0
 8002440:	0801f548 	.word	0x0801f548
 8002444:	0801f300 	.word	0x0801f300
 8002448:	24001a18 	.word	0x24001a18

0800244c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800244c:	b500      	push	{lr}
 800244e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002450:	4b0a      	ldr	r3, [pc, #40]	@ (800247c <HAL_MspInit+0x30>)
 8002452:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8002456:	f042 0202 	orr.w	r2, r2, #2
 800245a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 800245e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	210f      	movs	r1, #15
 800246e:	f06f 0001 	mvn.w	r0, #1
 8002472:	f002 f881 	bl	8004578 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002476:	b003      	add	sp, #12
 8002478:	f85d fb04 	ldr.w	pc, [sp], #4
 800247c:	58024400 	.word	0x58024400

08002480 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002480:	b500      	push	{lr}
 8002482:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	2300      	movs	r3, #0
 8002486:	9305      	str	r3, [sp, #20]
 8002488:	9306      	str	r3, [sp, #24]
 800248a:	9307      	str	r3, [sp, #28]
 800248c:	9308      	str	r3, [sp, #32]
 800248e:	9309      	str	r3, [sp, #36]	@ 0x24
  if(hadc->Instance==ADC1)
 8002490:	6803      	ldr	r3, [r0, #0]
 8002492:	4a37      	ldr	r2, [pc, #220]	@ (8002570 <HAL_ADC_MspInit+0xf0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d008      	beq.n	80024aa <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002498:	4a36      	ldr	r2, [pc, #216]	@ (8002574 <HAL_ADC_MspInit+0xf4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d02f      	beq.n	80024fe <HAL_ADC_MspInit+0x7e>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 800249e:	4a36      	ldr	r2, [pc, #216]	@ (8002578 <HAL_ADC_MspInit+0xf8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d056      	beq.n	8002552 <HAL_ADC_MspInit+0xd2>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80024a4:	b00b      	add	sp, #44	@ 0x2c
 80024a6:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC12_CLK_ENABLED++;
 80024aa:	4a34      	ldr	r2, [pc, #208]	@ (800257c <HAL_ADC_MspInit+0xfc>)
 80024ac:	6813      	ldr	r3, [r2, #0]
 80024ae:	3301      	adds	r3, #1
 80024b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d015      	beq.n	80024e2 <HAL_ADC_MspInit+0x62>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b6:	4b32      	ldr	r3, [pc, #200]	@ (8002580 <HAL_ADC_MspInit+0x100>)
 80024b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80024bc:	f042 0202 	orr.w	r2, r2, #2
 80024c0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80024c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	9301      	str	r3, [sp, #4]
 80024ce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024d0:	2302      	movs	r3, #2
 80024d2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024d4:	2303      	movs	r3, #3
 80024d6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d8:	a905      	add	r1, sp, #20
 80024da:	482a      	ldr	r0, [pc, #168]	@ (8002584 <HAL_ADC_MspInit+0x104>)
 80024dc:	f004 f9c6 	bl	800686c <HAL_GPIO_Init>
 80024e0:	e7e0      	b.n	80024a4 <HAL_ADC_MspInit+0x24>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80024e2:	4b27      	ldr	r3, [pc, #156]	@ (8002580 <HAL_ADC_MspInit+0x100>)
 80024e4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80024e8:	f042 0220 	orr.w	r2, r2, #32
 80024ec:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 80024f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80024f4:	f003 0320 	and.w	r3, r3, #32
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	9b00      	ldr	r3, [sp, #0]
 80024fc:	e7db      	b.n	80024b6 <HAL_ADC_MspInit+0x36>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80024fe:	4a1f      	ldr	r2, [pc, #124]	@ (800257c <HAL_ADC_MspInit+0xfc>)
 8002500:	6813      	ldr	r3, [r2, #0]
 8002502:	3301      	adds	r3, #1
 8002504:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002506:	2b01      	cmp	r3, #1
 8002508:	d015      	beq.n	8002536 <HAL_ADC_MspInit+0xb6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800250a:	4b1d      	ldr	r3, [pc, #116]	@ (8002580 <HAL_ADC_MspInit+0x100>)
 800250c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002510:	f042 0204 	orr.w	r2, r2, #4
 8002514:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	9303      	str	r3, [sp, #12]
 8002522:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002524:	2320      	movs	r3, #32
 8002526:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002528:	2303      	movs	r3, #3
 800252a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800252c:	a905      	add	r1, sp, #20
 800252e:	4816      	ldr	r0, [pc, #88]	@ (8002588 <HAL_ADC_MspInit+0x108>)
 8002530:	f004 f99c 	bl	800686c <HAL_GPIO_Init>
 8002534:	e7b6      	b.n	80024a4 <HAL_ADC_MspInit+0x24>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002536:	4b12      	ldr	r3, [pc, #72]	@ (8002580 <HAL_ADC_MspInit+0x100>)
 8002538:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800253c:	f042 0220 	orr.w	r2, r2, #32
 8002540:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8002544:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002548:	f003 0320 	and.w	r3, r3, #32
 800254c:	9302      	str	r3, [sp, #8]
 800254e:	9b02      	ldr	r3, [sp, #8]
 8002550:	e7db      	b.n	800250a <HAL_ADC_MspInit+0x8a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002552:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <HAL_ADC_MspInit+0x100>)
 8002554:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002558:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800255c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002564:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002568:	9304      	str	r3, [sp, #16]
 800256a:	9b04      	ldr	r3, [sp, #16]
}
 800256c:	e79a      	b.n	80024a4 <HAL_ADC_MspInit+0x24>
 800256e:	bf00      	nop
 8002570:	40022000 	.word	0x40022000
 8002574:	40022100 	.word	0x40022100
 8002578:	58026000 	.word	0x58026000
 800257c:	24002994 	.word	0x24002994
 8002580:	58024400 	.word	0x58024400
 8002584:	58020400 	.word	0x58020400
 8002588:	58020800 	.word	0x58020800

0800258c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800258c:	b500      	push	{lr}
 800258e:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	2300      	movs	r3, #0
 8002592:	9305      	str	r3, [sp, #20]
 8002594:	9306      	str	r3, [sp, #24]
 8002596:	9307      	str	r3, [sp, #28]
 8002598:	9308      	str	r3, [sp, #32]
 800259a:	9309      	str	r3, [sp, #36]	@ 0x24
  if(hfdcan->Instance==FDCAN1)
 800259c:	6803      	ldr	r3, [r0, #0]
 800259e:	4a3b      	ldr	r2, [pc, #236]	@ (800268c <HAL_FDCAN_MspInit+0x100>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d005      	beq.n	80025b0 <HAL_FDCAN_MspInit+0x24>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
  else if(hfdcan->Instance==FDCAN2)
 80025a4:	4a3a      	ldr	r2, [pc, #232]	@ (8002690 <HAL_FDCAN_MspInit+0x104>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d039      	beq.n	800261e <HAL_FDCAN_MspInit+0x92>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80025aa:	b00b      	add	sp, #44	@ 0x2c
 80025ac:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80025b0:	4a38      	ldr	r2, [pc, #224]	@ (8002694 <HAL_FDCAN_MspInit+0x108>)
 80025b2:	6813      	ldr	r3, [r2, #0]
 80025b4:	3301      	adds	r3, #1
 80025b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d022      	beq.n	8002602 <HAL_FDCAN_MspInit+0x76>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025bc:	4b36      	ldr	r3, [pc, #216]	@ (8002698 <HAL_FDCAN_MspInit+0x10c>)
 80025be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80025ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	9302      	str	r3, [sp, #8]
 80025d4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80025d6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80025da:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e0:	2303      	movs	r3, #3
 80025e2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80025e4:	2309      	movs	r3, #9
 80025e6:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e8:	a905      	add	r1, sp, #20
 80025ea:	482c      	ldr	r0, [pc, #176]	@ (800269c <HAL_FDCAN_MspInit+0x110>)
 80025ec:	f004 f93e 	bl	800686c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 80025f0:	2200      	movs	r2, #0
 80025f2:	2105      	movs	r1, #5
 80025f4:	2013      	movs	r0, #19
 80025f6:	f001 ffbf 	bl	8004578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80025fa:	2013      	movs	r0, #19
 80025fc:	f001 ffcc 	bl	8004598 <HAL_NVIC_EnableIRQ>
 8002600:	e7d3      	b.n	80025aa <HAL_FDCAN_MspInit+0x1e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002602:	4b25      	ldr	r3, [pc, #148]	@ (8002698 <HAL_FDCAN_MspInit+0x10c>)
 8002604:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8002608:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800260c:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 8002610:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	9b01      	ldr	r3, [sp, #4]
 800261c:	e7ce      	b.n	80025bc <HAL_FDCAN_MspInit+0x30>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800261e:	4a1d      	ldr	r2, [pc, #116]	@ (8002694 <HAL_FDCAN_MspInit+0x108>)
 8002620:	6813      	ldr	r3, [r2, #0]
 8002622:	3301      	adds	r3, #1
 8002624:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002626:	2b01      	cmp	r3, #1
 8002628:	d021      	beq.n	800266e <HAL_FDCAN_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262a:	4b1b      	ldr	r3, [pc, #108]	@ (8002698 <HAL_FDCAN_MspInit+0x10c>)
 800262c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002630:	f042 0202 	orr.w	r2, r2, #2
 8002634:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	9304      	str	r3, [sp, #16]
 8002642:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002644:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002648:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800264e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002650:	2309      	movs	r3, #9
 8002652:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002654:	a905      	add	r1, sp, #20
 8002656:	4812      	ldr	r0, [pc, #72]	@ (80026a0 <HAL_FDCAN_MspInit+0x114>)
 8002658:	f004 f908 	bl	800686c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 5, 0);
 800265c:	2200      	movs	r2, #0
 800265e:	2105      	movs	r1, #5
 8002660:	2014      	movs	r0, #20
 8002662:	f001 ff89 	bl	8004578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8002666:	2014      	movs	r0, #20
 8002668:	f001 ff96 	bl	8004598 <HAL_NVIC_EnableIRQ>
}
 800266c:	e79d      	b.n	80025aa <HAL_FDCAN_MspInit+0x1e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800266e:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <HAL_FDCAN_MspInit+0x10c>)
 8002670:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8002674:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002678:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 800267c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002684:	9303      	str	r3, [sp, #12]
 8002686:	9b03      	ldr	r3, [sp, #12]
 8002688:	e7cf      	b.n	800262a <HAL_FDCAN_MspInit+0x9e>
 800268a:	bf00      	nop
 800268c:	4000a000 	.word	0x4000a000
 8002690:	4000a400 	.word	0x4000a400
 8002694:	24002990 	.word	0x24002990
 8002698:	58024400 	.word	0x58024400
 800269c:	58020000 	.word	0x58020000
 80026a0:	58020400 	.word	0x58020400

080026a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026a4:	b570      	push	{r4, r5, r6, lr}
 80026a6:	b0ba      	sub	sp, #232	@ 0xe8
 80026a8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026aa:	2100      	movs	r1, #0
 80026ac:	9135      	str	r1, [sp, #212]	@ 0xd4
 80026ae:	9136      	str	r1, [sp, #216]	@ 0xd8
 80026b0:	9137      	str	r1, [sp, #220]	@ 0xdc
 80026b2:	9138      	str	r1, [sp, #224]	@ 0xe0
 80026b4:	9139      	str	r1, [sp, #228]	@ 0xe4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026b6:	22bc      	movs	r2, #188	@ 0xbc
 80026b8:	a806      	add	r0, sp, #24
 80026ba:	f01c fc3d 	bl	801ef38 <memset>
  if(hi2c->Instance==I2C1)
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	4aa6      	ldr	r2, [pc, #664]	@ (800295c <HAL_I2C_MspInit+0x2b8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d008      	beq.n	80026d8 <HAL_I2C_MspInit+0x34>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 80026c6:	4aa6      	ldr	r2, [pc, #664]	@ (8002960 <HAL_I2C_MspInit+0x2bc>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d071      	beq.n	80027b0 <HAL_I2C_MspInit+0x10c>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 80026cc:	4aa5      	ldr	r2, [pc, #660]	@ (8002964 <HAL_I2C_MspInit+0x2c0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	f000 80da 	beq.w	8002888 <HAL_I2C_MspInit+0x1e4>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80026d4:	b03a      	add	sp, #232	@ 0xe8
 80026d6:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80026d8:	2308      	movs	r3, #8
 80026da:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026dc:	a806      	add	r0, sp, #24
 80026de:	f006 ffb7 	bl	8009650 <HAL_RCCEx_PeriphCLKConfig>
 80026e2:	2800      	cmp	r0, #0
 80026e4:	d15b      	bne.n	800279e <HAL_I2C_MspInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e6:	4ea0      	ldr	r6, [pc, #640]	@ (8002968 <HAL_I2C_MspInit+0x2c4>)
 80026e8:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 80026f4:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002700:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002704:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002706:	2312      	movs	r3, #18
 8002708:	9336      	str	r3, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2500      	movs	r5, #0
 800270c:	9537      	str	r5, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270e:	9538      	str	r5, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002710:	2304      	movs	r3, #4
 8002712:	9339      	str	r3, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002714:	a935      	add	r1, sp, #212	@ 0xd4
 8002716:	4895      	ldr	r0, [pc, #596]	@ (800296c <HAL_I2C_MspInit+0x2c8>)
 8002718:	f004 f8a8 	bl	800686c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800271c:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
 8002720:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002724:	f8c6 30e8 	str.w	r3, [r6, #232]	@ 0xe8
 8002728:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
 800272c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002730:	9301      	str	r3, [sp, #4]
 8002732:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c1_tx.Instance = DMA2_Stream0;
 8002734:	488e      	ldr	r0, [pc, #568]	@ (8002970 <HAL_I2C_MspInit+0x2cc>)
 8002736:	4b8f      	ldr	r3, [pc, #572]	@ (8002974 <HAL_I2C_MspInit+0x2d0>)
 8002738:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800273a:	2322      	movs	r3, #34	@ 0x22
 800273c:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800273e:	2340      	movs	r3, #64	@ 0x40
 8002740:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002742:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002744:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002748:	6103      	str	r3, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800274a:	6145      	str	r5, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800274c:	6185      	str	r5, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800274e:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002750:	6205      	str	r5, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002752:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002754:	f002 f936 	bl	80049c4 <HAL_DMA_Init>
 8002758:	bb20      	cbnz	r0, 80027a4 <HAL_I2C_MspInit+0x100>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800275a:	4b85      	ldr	r3, [pc, #532]	@ (8002970 <HAL_I2C_MspInit+0x2cc>)
 800275c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800275e:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_i2c1_rx.Instance = DMA2_Stream1;
 8002760:	4885      	ldr	r0, [pc, #532]	@ (8002978 <HAL_I2C_MspInit+0x2d4>)
 8002762:	4b86      	ldr	r3, [pc, #536]	@ (800297c <HAL_I2C_MspInit+0x2d8>)
 8002764:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002766:	2321      	movs	r3, #33	@ 0x21
 8002768:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800276a:	2300      	movs	r3, #0
 800276c:	6083      	str	r3, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800276e:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002770:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002774:	6102      	str	r2, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002776:	6143      	str	r3, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002778:	6183      	str	r3, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800277a:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800277c:	6203      	str	r3, [r0, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800277e:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002780:	f002 f920 	bl	80049c4 <HAL_DMA_Init>
 8002784:	b988      	cbnz	r0, 80027aa <HAL_I2C_MspInit+0x106>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002786:	4b7c      	ldr	r3, [pc, #496]	@ (8002978 <HAL_I2C_MspInit+0x2d4>)
 8002788:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800278a:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800278c:	2200      	movs	r2, #0
 800278e:	2105      	movs	r1, #5
 8002790:	201f      	movs	r0, #31
 8002792:	f001 fef1 	bl	8004578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002796:	201f      	movs	r0, #31
 8002798:	f001 fefe 	bl	8004598 <HAL_NVIC_EnableIRQ>
 800279c:	e79a      	b.n	80026d4 <HAL_I2C_MspInit+0x30>
      Error_Handler();
 800279e:	f7fe f99d 	bl	8000adc <Error_Handler>
 80027a2:	e7a0      	b.n	80026e6 <HAL_I2C_MspInit+0x42>
      Error_Handler();
 80027a4:	f7fe f99a 	bl	8000adc <Error_Handler>
 80027a8:	e7d7      	b.n	800275a <HAL_I2C_MspInit+0xb6>
      Error_Handler();
 80027aa:	f7fe f997 	bl	8000adc <Error_Handler>
 80027ae:	e7ea      	b.n	8002786 <HAL_I2C_MspInit+0xe2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80027b0:	2308      	movs	r3, #8
 80027b2:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027b4:	a806      	add	r0, sp, #24
 80027b6:	f006 ff4b 	bl	8009650 <HAL_RCCEx_PeriphCLKConfig>
 80027ba:	2800      	cmp	r0, #0
 80027bc:	d15b      	bne.n	8002876 <HAL_I2C_MspInit+0x1d2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027be:	4e6a      	ldr	r6, [pc, #424]	@ (8002968 <HAL_I2C_MspInit+0x2c4>)
 80027c0:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 80027cc:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	9302      	str	r3, [sp, #8]
 80027d6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027d8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80027dc:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027de:	2312      	movs	r3, #18
 80027e0:	9336      	str	r3, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2500      	movs	r5, #0
 80027e4:	9537      	str	r5, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e6:	9538      	str	r5, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80027e8:	2304      	movs	r3, #4
 80027ea:	9339      	str	r3, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ec:	a935      	add	r1, sp, #212	@ 0xd4
 80027ee:	485f      	ldr	r0, [pc, #380]	@ (800296c <HAL_I2C_MspInit+0x2c8>)
 80027f0:	f004 f83c 	bl	800686c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80027f4:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
 80027f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027fc:	f8c6 30e8 	str.w	r3, [r6, #232]	@ 0xe8
 8002800:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
 8002804:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002808:	9303      	str	r3, [sp, #12]
 800280a:	9b03      	ldr	r3, [sp, #12]
    hdma_i2c2_tx.Instance = DMA2_Stream2;
 800280c:	485c      	ldr	r0, [pc, #368]	@ (8002980 <HAL_I2C_MspInit+0x2dc>)
 800280e:	4b5d      	ldr	r3, [pc, #372]	@ (8002984 <HAL_I2C_MspInit+0x2e0>)
 8002810:	6003      	str	r3, [r0, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8002812:	2324      	movs	r3, #36	@ 0x24
 8002814:	6043      	str	r3, [r0, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002816:	2340      	movs	r3, #64	@ 0x40
 8002818:	6083      	str	r3, [r0, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800281a:	60c5      	str	r5, [r0, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800281c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002820:	6103      	str	r3, [r0, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002822:	6145      	str	r5, [r0, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002824:	6185      	str	r5, [r0, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002826:	61c5      	str	r5, [r0, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002828:	6205      	str	r5, [r0, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800282a:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800282c:	f002 f8ca 	bl	80049c4 <HAL_DMA_Init>
 8002830:	bb20      	cbnz	r0, 800287c <HAL_I2C_MspInit+0x1d8>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8002832:	4b53      	ldr	r3, [pc, #332]	@ (8002980 <HAL_I2C_MspInit+0x2dc>)
 8002834:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002836:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_i2c2_rx.Instance = DMA2_Stream3;
 8002838:	4853      	ldr	r0, [pc, #332]	@ (8002988 <HAL_I2C_MspInit+0x2e4>)
 800283a:	4b54      	ldr	r3, [pc, #336]	@ (800298c <HAL_I2C_MspInit+0x2e8>)
 800283c:	6003      	str	r3, [r0, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 800283e:	2323      	movs	r3, #35	@ 0x23
 8002840:	6043      	str	r3, [r0, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002842:	2300      	movs	r3, #0
 8002844:	6083      	str	r3, [r0, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002846:	60c3      	str	r3, [r0, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002848:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800284c:	6102      	str	r2, [r0, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800284e:	6143      	str	r3, [r0, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002850:	6183      	str	r3, [r0, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002852:	61c3      	str	r3, [r0, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002854:	6203      	str	r3, [r0, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002856:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002858:	f002 f8b4 	bl	80049c4 <HAL_DMA_Init>
 800285c:	b988      	cbnz	r0, 8002882 <HAL_I2C_MspInit+0x1de>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 800285e:	4b4a      	ldr	r3, [pc, #296]	@ (8002988 <HAL_I2C_MspInit+0x2e4>)
 8002860:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002862:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8002864:	2200      	movs	r2, #0
 8002866:	2105      	movs	r1, #5
 8002868:	2021      	movs	r0, #33	@ 0x21
 800286a:	f001 fe85 	bl	8004578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800286e:	2021      	movs	r0, #33	@ 0x21
 8002870:	f001 fe92 	bl	8004598 <HAL_NVIC_EnableIRQ>
 8002874:	e72e      	b.n	80026d4 <HAL_I2C_MspInit+0x30>
      Error_Handler();
 8002876:	f7fe f931 	bl	8000adc <Error_Handler>
 800287a:	e7a0      	b.n	80027be <HAL_I2C_MspInit+0x11a>
      Error_Handler();
 800287c:	f7fe f92e 	bl	8000adc <Error_Handler>
 8002880:	e7d7      	b.n	8002832 <HAL_I2C_MspInit+0x18e>
      Error_Handler();
 8002882:	f7fe f92b 	bl	8000adc <Error_Handler>
 8002886:	e7ea      	b.n	800285e <HAL_I2C_MspInit+0x1ba>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002888:	2310      	movs	r3, #16
 800288a:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800288c:	a806      	add	r0, sp, #24
 800288e:	f006 fedf 	bl	8009650 <HAL_RCCEx_PeriphCLKConfig>
 8002892:	2800      	cmp	r0, #0
 8002894:	d158      	bne.n	8002948 <HAL_I2C_MspInit+0x2a4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002896:	4e34      	ldr	r6, [pc, #208]	@ (8002968 <HAL_I2C_MspInit+0x2c4>)
 8002898:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 800289c:	f043 0302 	orr.w	r3, r3, #2
 80028a0:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 80028a4:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	9304      	str	r3, [sp, #16]
 80028ae:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028b0:	23c0      	movs	r3, #192	@ 0xc0
 80028b2:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028b4:	2312      	movs	r3, #18
 80028b6:	9336      	str	r3, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2500      	movs	r5, #0
 80028ba:	9537      	str	r5, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	9538      	str	r5, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 80028be:	2306      	movs	r3, #6
 80028c0:	9339      	str	r3, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c2:	a935      	add	r1, sp, #212	@ 0xd4
 80028c4:	4829      	ldr	r0, [pc, #164]	@ (800296c <HAL_I2C_MspInit+0x2c8>)
 80028c6:	f003 ffd1 	bl	800686c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80028ca:	f8d6 30f4 	ldr.w	r3, [r6, #244]	@ 0xf4
 80028ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028d2:	f8c6 30f4 	str.w	r3, [r6, #244]	@ 0xf4
 80028d6:	f8d6 30f4 	ldr.w	r3, [r6, #244]	@ 0xf4
 80028da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028de:	9305      	str	r3, [sp, #20]
 80028e0:	9b05      	ldr	r3, [sp, #20]
    hdma_i2c4_tx.Instance = BDMA_Channel0;
 80028e2:	482b      	ldr	r0, [pc, #172]	@ (8002990 <HAL_I2C_MspInit+0x2ec>)
 80028e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002994 <HAL_I2C_MspInit+0x2f0>)
 80028e6:	6003      	str	r3, [r0, #0]
    hdma_i2c4_tx.Init.Request = BDMA_REQUEST_I2C4_TX;
 80028e8:	230e      	movs	r3, #14
 80028ea:	6043      	str	r3, [r0, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028ec:	2340      	movs	r3, #64	@ 0x40
 80028ee:	6083      	str	r3, [r0, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028f0:	60c5      	str	r5, [r0, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028f6:	6103      	str	r3, [r0, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028f8:	6145      	str	r5, [r0, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028fa:	6185      	str	r5, [r0, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 80028fc:	61c5      	str	r5, [r0, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028fe:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8002900:	f002 f860 	bl	80049c4 <HAL_DMA_Init>
 8002904:	bb18      	cbnz	r0, 800294e <HAL_I2C_MspInit+0x2aa>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c4_tx);
 8002906:	4b22      	ldr	r3, [pc, #136]	@ (8002990 <HAL_I2C_MspInit+0x2ec>)
 8002908:	63a3      	str	r3, [r4, #56]	@ 0x38
 800290a:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_i2c4_rx.Instance = BDMA_Channel1;
 800290c:	4822      	ldr	r0, [pc, #136]	@ (8002998 <HAL_I2C_MspInit+0x2f4>)
 800290e:	4b23      	ldr	r3, [pc, #140]	@ (800299c <HAL_I2C_MspInit+0x2f8>)
 8002910:	6003      	str	r3, [r0, #0]
    hdma_i2c4_rx.Init.Request = BDMA_REQUEST_I2C4_RX;
 8002912:	230d      	movs	r3, #13
 8002914:	6043      	str	r3, [r0, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002916:	2300      	movs	r3, #0
 8002918:	6083      	str	r3, [r0, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800291a:	60c3      	str	r3, [r0, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800291c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002920:	6102      	str	r2, [r0, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002922:	6143      	str	r3, [r0, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002924:	6183      	str	r3, [r0, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 8002926:	61c3      	str	r3, [r0, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002928:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 800292a:	f002 f84b 	bl	80049c4 <HAL_DMA_Init>
 800292e:	b988      	cbnz	r0, 8002954 <HAL_I2C_MspInit+0x2b0>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c4_rx);
 8002930:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <HAL_I2C_MspInit+0x2f4>)
 8002932:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002934:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	2105      	movs	r1, #5
 800293a:	205f      	movs	r0, #95	@ 0x5f
 800293c:	f001 fe1c 	bl	8004578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8002940:	205f      	movs	r0, #95	@ 0x5f
 8002942:	f001 fe29 	bl	8004598 <HAL_NVIC_EnableIRQ>
}
 8002946:	e6c5      	b.n	80026d4 <HAL_I2C_MspInit+0x30>
      Error_Handler();
 8002948:	f7fe f8c8 	bl	8000adc <Error_Handler>
 800294c:	e7a3      	b.n	8002896 <HAL_I2C_MspInit+0x1f2>
      Error_Handler();
 800294e:	f7fe f8c5 	bl	8000adc <Error_Handler>
 8002952:	e7d8      	b.n	8002906 <HAL_I2C_MspInit+0x262>
      Error_Handler();
 8002954:	f7fe f8c2 	bl	8000adc <Error_Handler>
 8002958:	e7ea      	b.n	8002930 <HAL_I2C_MspInit+0x28c>
 800295a:	bf00      	nop
 800295c:	40005400 	.word	0x40005400
 8002960:	40005800 	.word	0x40005800
 8002964:	58001c00 	.word	0x58001c00
 8002968:	58024400 	.word	0x58024400
 800296c:	58020400 	.word	0x58020400
 8002970:	240025c8 	.word	0x240025c8
 8002974:	40020410 	.word	0x40020410
 8002978:	24002550 	.word	0x24002550
 800297c:	40020428 	.word	0x40020428
 8002980:	240024d8 	.word	0x240024d8
 8002984:	40020440 	.word	0x40020440
 8002988:	24002460 	.word	0x24002460
 800298c:	40020458 	.word	0x40020458
 8002990:	240023e8 	.word	0x240023e8
 8002994:	58025408 	.word	0x58025408
 8002998:	24002370 	.word	0x24002370
 800299c:	5802541c 	.word	0x5802541c

080029a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029a0:	b500      	push	{lr}
 80029a2:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 80029a4:	6803      	ldr	r3, [r0, #0]
 80029a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a24 <HAL_TIM_Base_MspInit+0x84>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d008      	beq.n	80029be <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80029ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002a28 <HAL_TIM_Base_MspInit+0x88>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <HAL_TIM_Base_MspInit+0x3a>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 80029b2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a2c <HAL_TIM_Base_MspInit+0x8c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d01e      	beq.n	80029f6 <HAL_TIM_Base_MspInit+0x56>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80029b8:	b005      	add	sp, #20
 80029ba:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029be:	4b1c      	ldr	r3, [pc, #112]	@ (8002a30 <HAL_TIM_Base_MspInit+0x90>)
 80029c0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80029c4:	f042 0201 	orr.w	r2, r2, #1
 80029c8:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80029cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	9301      	str	r3, [sp, #4]
 80029d6:	9b01      	ldr	r3, [sp, #4]
 80029d8:	e7ee      	b.n	80029b8 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029da:	4b15      	ldr	r3, [pc, #84]	@ (8002a30 <HAL_TIM_Base_MspInit+0x90>)
 80029dc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80029e0:	f042 0202 	orr.w	r2, r2, #2
 80029e4:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80029e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	9302      	str	r3, [sp, #8]
 80029f2:	9b02      	ldr	r3, [sp, #8]
 80029f4:	e7e0      	b.n	80029b8 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a30 <HAL_TIM_Base_MspInit+0x90>)
 80029f8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80029fc:	f042 0204 	orr.w	r2, r2, #4
 8002a00:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002a04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	9303      	str	r3, [sp, #12]
 8002a0e:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002a10:	2200      	movs	r2, #0
 8002a12:	2105      	movs	r1, #5
 8002a14:	201e      	movs	r0, #30
 8002a16:	f001 fdaf 	bl	8004578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a1a:	201e      	movs	r0, #30
 8002a1c:	f001 fdbc 	bl	8004598 <HAL_NVIC_EnableIRQ>
}
 8002a20:	e7ca      	b.n	80029b8 <HAL_TIM_Base_MspInit+0x18>
 8002a22:	bf00      	nop
 8002a24:	40010000 	.word	0x40010000
 8002a28:	40000400 	.word	0x40000400
 8002a2c:	40000800 	.word	0x40000800
 8002a30:	58024400 	.word	0x58024400

08002a34 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a34:	b500      	push	{lr}
 8002a36:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9303      	str	r3, [sp, #12]
 8002a3c:	9304      	str	r3, [sp, #16]
 8002a3e:	9305      	str	r3, [sp, #20]
 8002a40:	9306      	str	r3, [sp, #24]
 8002a42:	9307      	str	r3, [sp, #28]
  if(htim_encoder->Instance==TIM2)
 8002a44:	6803      	ldr	r3, [r0, #0]
 8002a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a4a:	d002      	beq.n	8002a52 <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a4c:	b009      	add	sp, #36	@ 0x24
 8002a4e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a52:	4b12      	ldr	r3, [pc, #72]	@ (8002a9c <HAL_TIM_Encoder_MspInit+0x68>)
 8002a54:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002a58:	f042 0201 	orr.w	r2, r2, #1
 8002a5c:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002a60:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002a64:	f002 0201 	and.w	r2, r2, #1
 8002a68:	9201      	str	r2, [sp, #4]
 8002a6a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	9302      	str	r3, [sp, #8]
 8002a82:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8002a84:	2303      	movs	r3, #3
 8002a86:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a90:	a903      	add	r1, sp, #12
 8002a92:	4803      	ldr	r0, [pc, #12]	@ (8002aa0 <HAL_TIM_Encoder_MspInit+0x6c>)
 8002a94:	f003 feea 	bl	800686c <HAL_GPIO_Init>
}
 8002a98:	e7d8      	b.n	8002a4c <HAL_TIM_Encoder_MspInit+0x18>
 8002a9a:	bf00      	nop
 8002a9c:	58024400 	.word	0x58024400
 8002aa0:	58020000 	.word	0x58020000

08002aa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002aa4:	b500      	push	{lr}
 8002aa6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	9303      	str	r3, [sp, #12]
 8002aac:	9304      	str	r3, [sp, #16]
 8002aae:	9305      	str	r3, [sp, #20]
 8002ab0:	9306      	str	r3, [sp, #24]
 8002ab2:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 8002ab4:	6803      	ldr	r3, [r0, #0]
 8002ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b28 <HAL_TIM_MspPostInit+0x84>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d005      	beq.n	8002ac8 <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8002abc:	4a1b      	ldr	r2, [pc, #108]	@ (8002b2c <HAL_TIM_MspPostInit+0x88>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d01b      	beq.n	8002afa <HAL_TIM_MspPostInit+0x56>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002ac2:	b009      	add	sp, #36	@ 0x24
 8002ac4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ac8:	4b19      	ldr	r3, [pc, #100]	@ (8002b30 <HAL_TIM_MspPostInit+0x8c>)
 8002aca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002ace:	f042 0210 	orr.w	r2, r2, #16
 8002ad2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8002ae2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ae6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002aec:	2301      	movs	r3, #1
 8002aee:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8002af0:	a903      	add	r1, sp, #12
 8002af2:	4810      	ldr	r0, [pc, #64]	@ (8002b34 <HAL_TIM_MspPostInit+0x90>)
 8002af4:	f003 feba 	bl	800686c <HAL_GPIO_Init>
 8002af8:	e7e3      	b.n	8002ac2 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afa:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <HAL_TIM_MspPostInit+0x8c>)
 8002afc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002b00:	f042 0202 	orr.w	r2, r2, #2
 8002b04:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	9302      	str	r3, [sp, #8]
 8002b12:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SERVO1_Pin|SERVO2_Pin;
 8002b14:	2330      	movs	r3, #48	@ 0x30
 8002b16:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b1c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1e:	a903      	add	r1, sp, #12
 8002b20:	4805      	ldr	r0, [pc, #20]	@ (8002b38 <HAL_TIM_MspPostInit+0x94>)
 8002b22:	f003 fea3 	bl	800686c <HAL_GPIO_Init>
}
 8002b26:	e7cc      	b.n	8002ac2 <HAL_TIM_MspPostInit+0x1e>
 8002b28:	40010000 	.word	0x40010000
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	58024400 	.word	0x58024400
 8002b34:	58021000 	.word	0x58021000
 8002b38:	58020400 	.word	0x58020400

08002b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3e:	b0c1      	sub	sp, #260	@ 0x104
 8002b40:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b42:	2100      	movs	r1, #0
 8002b44:	913b      	str	r1, [sp, #236]	@ 0xec
 8002b46:	913c      	str	r1, [sp, #240]	@ 0xf0
 8002b48:	913d      	str	r1, [sp, #244]	@ 0xf4
 8002b4a:	913e      	str	r1, [sp, #248]	@ 0xf8
 8002b4c:	913f      	str	r1, [sp, #252]	@ 0xfc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b4e:	22bc      	movs	r2, #188	@ 0xbc
 8002b50:	a80c      	add	r0, sp, #48	@ 0x30
 8002b52:	f01c f9f1 	bl	801ef38 <memset>
  if(huart->Instance==UART5)
 8002b56:	6823      	ldr	r3, [r4, #0]
 8002b58:	4a7f      	ldr	r2, [pc, #508]	@ (8002d58 <HAL_UART_MspInit+0x21c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d011      	beq.n	8002b82 <HAL_UART_MspInit+0x46>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==USART1)
 8002b5e:	4a7f      	ldr	r2, [pc, #508]	@ (8002d5c <HAL_UART_MspInit+0x220>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	f000 808a 	beq.w	8002c7a <HAL_UART_MspInit+0x13e>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8002b66:	4a7e      	ldr	r2, [pc, #504]	@ (8002d60 <HAL_UART_MspInit+0x224>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	f000 8117 	beq.w	8002d9c <HAL_UART_MspInit+0x260>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8002b6e:	4a7d      	ldr	r2, [pc, #500]	@ (8002d64 <HAL_UART_MspInit+0x228>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	f000 8180 	beq.w	8002e76 <HAL_UART_MspInit+0x33a>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8002b76:	4a7c      	ldr	r2, [pc, #496]	@ (8002d68 <HAL_UART_MspInit+0x22c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	f000 8201 	beq.w	8002f80 <HAL_UART_MspInit+0x444>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002b7e:	b041      	add	sp, #260	@ 0x104
 8002b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002b82:	2302      	movs	r3, #2
 8002b84:	930c      	str	r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b86:	a80c      	add	r0, sp, #48	@ 0x30
 8002b88:	f006 fd62 	bl	8009650 <HAL_RCCEx_PeriphCLKConfig>
 8002b8c:	2800      	cmp	r0, #0
 8002b8e:	d16b      	bne.n	8002c68 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002b90:	4b76      	ldr	r3, [pc, #472]	@ (8002d6c <HAL_UART_MspInit+0x230>)
 8002b92:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002b96:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002b9a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002b9e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002ba2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002ba6:	9200      	str	r2, [sp, #0]
 8002ba8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002baa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002bae:	f042 0204 	orr.w	r2, r2, #4
 8002bb2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002bb6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002bba:	f002 0204 	and.w	r2, r2, #4
 8002bbe:	9201      	str	r2, [sp, #4]
 8002bc0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bc2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002bc6:	f042 0208 	orr.w	r2, r2, #8
 8002bca:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	9302      	str	r3, [sp, #8]
 8002bd8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = TX5_EXT_Pin;
 8002bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bde:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	2702      	movs	r7, #2
 8002be2:	973c      	str	r7, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2500      	movs	r5, #0
 8002be6:	953d      	str	r5, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be8:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002bea:	2608      	movs	r6, #8
 8002bec:	963f      	str	r6, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(TX5_EXT_GPIO_Port, &GPIO_InitStruct);
 8002bee:	a93b      	add	r1, sp, #236	@ 0xec
 8002bf0:	485f      	ldr	r0, [pc, #380]	@ (8002d70 <HAL_UART_MspInit+0x234>)
 8002bf2:	f003 fe3b 	bl	800686c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RX5_EXT_Pin;
 8002bf6:	2304      	movs	r3, #4
 8002bf8:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfa:	973c      	str	r7, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfc:	953d      	str	r5, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c00:	963f      	str	r6, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(RX5_EXT_GPIO_Port, &GPIO_InitStruct);
 8002c02:	a93b      	add	r1, sp, #236	@ 0xec
 8002c04:	485b      	ldr	r0, [pc, #364]	@ (8002d74 <HAL_UART_MspInit+0x238>)
 8002c06:	f003 fe31 	bl	800686c <HAL_GPIO_Init>
    hdma_uart5_tx.Instance = DMA2_Stream4;
 8002c0a:	485b      	ldr	r0, [pc, #364]	@ (8002d78 <HAL_UART_MspInit+0x23c>)
 8002c0c:	4b5b      	ldr	r3, [pc, #364]	@ (8002d7c <HAL_UART_MspInit+0x240>)
 8002c0e:	6003      	str	r3, [r0, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8002c10:	2342      	movs	r3, #66	@ 0x42
 8002c12:	6043      	str	r3, [r0, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c14:	2340      	movs	r3, #64	@ 0x40
 8002c16:	6083      	str	r3, [r0, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c18:	60c5      	str	r5, [r0, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c1e:	6103      	str	r3, [r0, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c20:	6145      	str	r5, [r0, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c22:	6185      	str	r5, [r0, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8002c24:	61c5      	str	r5, [r0, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c26:	6205      	str	r5, [r0, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c28:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002c2a:	f001 fecb 	bl	80049c4 <HAL_DMA_Init>
 8002c2e:	b9f0      	cbnz	r0, 8002c6e <HAL_UART_MspInit+0x132>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8002c30:	4b51      	ldr	r3, [pc, #324]	@ (8002d78 <HAL_UART_MspInit+0x23c>)
 8002c32:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002c34:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_uart5_rx.Instance = DMA2_Stream5;
 8002c36:	4852      	ldr	r0, [pc, #328]	@ (8002d80 <HAL_UART_MspInit+0x244>)
 8002c38:	4b52      	ldr	r3, [pc, #328]	@ (8002d84 <HAL_UART_MspInit+0x248>)
 8002c3a:	6003      	str	r3, [r0, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8002c3c:	2341      	movs	r3, #65	@ 0x41
 8002c3e:	6043      	str	r3, [r0, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c40:	2300      	movs	r3, #0
 8002c42:	6083      	str	r3, [r0, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c44:	60c3      	str	r3, [r0, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c4a:	6102      	str	r2, [r0, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c4c:	6143      	str	r3, [r0, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c4e:	6183      	str	r3, [r0, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002c50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c54:	61c2      	str	r2, [r0, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c56:	6203      	str	r3, [r0, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c58:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002c5a:	f001 feb3 	bl	80049c4 <HAL_DMA_Init>
 8002c5e:	b948      	cbnz	r0, 8002c74 <HAL_UART_MspInit+0x138>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002c60:	4b47      	ldr	r3, [pc, #284]	@ (8002d80 <HAL_UART_MspInit+0x244>)
 8002c62:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002c64:	639c      	str	r4, [r3, #56]	@ 0x38
 8002c66:	e78a      	b.n	8002b7e <HAL_UART_MspInit+0x42>
      Error_Handler();
 8002c68:	f7fd ff38 	bl	8000adc <Error_Handler>
 8002c6c:	e790      	b.n	8002b90 <HAL_UART_MspInit+0x54>
      Error_Handler();
 8002c6e:	f7fd ff35 	bl	8000adc <Error_Handler>
 8002c72:	e7dd      	b.n	8002c30 <HAL_UART_MspInit+0xf4>
      Error_Handler();
 8002c74:	f7fd ff32 	bl	8000adc <Error_Handler>
 8002c78:	e7f2      	b.n	8002c60 <HAL_UART_MspInit+0x124>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	930c      	str	r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c7e:	a80c      	add	r0, sp, #48	@ 0x30
 8002c80:	f006 fce6 	bl	8009650 <HAL_RCCEx_PeriphCLKConfig>
 8002c84:	2800      	cmp	r0, #0
 8002c86:	d15d      	bne.n	8002d44 <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c88:	4b38      	ldr	r3, [pc, #224]	@ (8002d6c <HAL_UART_MspInit+0x230>)
 8002c8a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002c8e:	f042 0210 	orr.w	r2, r2, #16
 8002c92:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8002c96:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002c9a:	f002 0210 	and.w	r2, r2, #16
 8002c9e:	9203      	str	r2, [sp, #12]
 8002ca0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	9304      	str	r3, [sp, #16]
 8002cb8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = TX1_FRONT_Pin|RX1_FRONT_Pin;
 8002cba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002cbe:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	933c      	str	r3, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2500      	movs	r5, #0
 8002cc6:	953d      	str	r5, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc8:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cca:	2307      	movs	r3, #7
 8002ccc:	933f      	str	r3, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cce:	a93b      	add	r1, sp, #236	@ 0xec
 8002cd0:	482d      	ldr	r0, [pc, #180]	@ (8002d88 <HAL_UART_MspInit+0x24c>)
 8002cd2:	f003 fdcb 	bl	800686c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8002cd6:	482d      	ldr	r0, [pc, #180]	@ (8002d8c <HAL_UART_MspInit+0x250>)
 8002cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8002d90 <HAL_UART_MspInit+0x254>)
 8002cda:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002cdc:	232a      	movs	r3, #42	@ 0x2a
 8002cde:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ce0:	2340      	movs	r3, #64	@ 0x40
 8002ce2:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ce4:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ce6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cea:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cec:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cee:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002cf0:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cf2:	6205      	str	r5, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cf4:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002cf6:	f001 fe65 	bl	80049c4 <HAL_DMA_Init>
 8002cfa:	bb30      	cbnz	r0, 8002d4a <HAL_UART_MspInit+0x20e>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002cfc:	4b23      	ldr	r3, [pc, #140]	@ (8002d8c <HAL_UART_MspInit+0x250>)
 8002cfe:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002d00:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart1_rx.Instance = DMA1_Stream1;
 8002d02:	4824      	ldr	r0, [pc, #144]	@ (8002d94 <HAL_UART_MspInit+0x258>)
 8002d04:	4b24      	ldr	r3, [pc, #144]	@ (8002d98 <HAL_UART_MspInit+0x25c>)
 8002d06:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002d08:	2329      	movs	r3, #41	@ 0x29
 8002d0a:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d10:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d16:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d18:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d1a:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002d1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d20:	61c2      	str	r2, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d22:	6203      	str	r3, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d24:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d26:	f001 fe4d 	bl	80049c4 <HAL_DMA_Init>
 8002d2a:	b988      	cbnz	r0, 8002d50 <HAL_UART_MspInit+0x214>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002d2c:	4b19      	ldr	r3, [pc, #100]	@ (8002d94 <HAL_UART_MspInit+0x258>)
 8002d2e:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002d30:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002d32:	2200      	movs	r2, #0
 8002d34:	2105      	movs	r1, #5
 8002d36:	2025      	movs	r0, #37	@ 0x25
 8002d38:	f001 fc1e 	bl	8004578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d3c:	2025      	movs	r0, #37	@ 0x25
 8002d3e:	f001 fc2b 	bl	8004598 <HAL_NVIC_EnableIRQ>
 8002d42:	e71c      	b.n	8002b7e <HAL_UART_MspInit+0x42>
      Error_Handler();
 8002d44:	f7fd feca 	bl	8000adc <Error_Handler>
 8002d48:	e79e      	b.n	8002c88 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8002d4a:	f7fd fec7 	bl	8000adc <Error_Handler>
 8002d4e:	e7d5      	b.n	8002cfc <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8002d50:	f7fd fec4 	bl	8000adc <Error_Handler>
 8002d54:	e7ea      	b.n	8002d2c <HAL_UART_MspInit+0x1f0>
 8002d56:	bf00      	nop
 8002d58:	40005000 	.word	0x40005000
 8002d5c:	40011000 	.word	0x40011000
 8002d60:	40004400 	.word	0x40004400
 8002d64:	40004800 	.word	0x40004800
 8002d68:	40011400 	.word	0x40011400
 8002d6c:	58024400 	.word	0x58024400
 8002d70:	58020800 	.word	0x58020800
 8002d74:	58020c00 	.word	0x58020c00
 8002d78:	24001ef8 	.word	0x24001ef8
 8002d7c:	40020470 	.word	0x40020470
 8002d80:	24001e80 	.word	0x24001e80
 8002d84:	40020488 	.word	0x40020488
 8002d88:	58020000 	.word	0x58020000
 8002d8c:	24001e08 	.word	0x24001e08
 8002d90:	40020010 	.word	0x40020010
 8002d94:	24001d90 	.word	0x24001d90
 8002d98:	40020028 	.word	0x40020028
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	930c      	str	r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002da0:	a80c      	add	r0, sp, #48	@ 0x30
 8002da2:	f006 fc55 	bl	8009650 <HAL_RCCEx_PeriphCLKConfig>
 8002da6:	2800      	cmp	r0, #0
 8002da8:	d15c      	bne.n	8002e64 <HAL_UART_MspInit+0x328>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002daa:	4ba8      	ldr	r3, [pc, #672]	@ (800304c <HAL_UART_MspInit+0x510>)
 8002dac:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002db0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002db4:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002db8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002dbc:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8002dc0:	9205      	str	r2, [sp, #20]
 8002dc2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002dc8:	f042 0201 	orr.w	r2, r2, #1
 8002dcc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	9306      	str	r3, [sp, #24]
 8002dda:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = TX2_PIC_Pin|RX2_PIC_Pin;
 8002ddc:	230c      	movs	r3, #12
 8002dde:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	2302      	movs	r3, #2
 8002de2:	933c      	str	r3, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2500      	movs	r5, #0
 8002de6:	953d      	str	r5, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de8:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dea:	2307      	movs	r3, #7
 8002dec:	933f      	str	r3, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dee:	a93b      	add	r1, sp, #236	@ 0xec
 8002df0:	4897      	ldr	r0, [pc, #604]	@ (8003050 <HAL_UART_MspInit+0x514>)
 8002df2:	f003 fd3b 	bl	800686c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream2;
 8002df6:	4897      	ldr	r0, [pc, #604]	@ (8003054 <HAL_UART_MspInit+0x518>)
 8002df8:	4b97      	ldr	r3, [pc, #604]	@ (8003058 <HAL_UART_MspInit+0x51c>)
 8002dfa:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002dfc:	232c      	movs	r3, #44	@ 0x2c
 8002dfe:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e00:	2340      	movs	r3, #64	@ 0x40
 8002e02:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e04:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e0a:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e0c:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e0e:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002e10:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e12:	6205      	str	r5, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e14:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002e16:	f001 fdd5 	bl	80049c4 <HAL_DMA_Init>
 8002e1a:	bb30      	cbnz	r0, 8002e6a <HAL_UART_MspInit+0x32e>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002e1c:	4b8d      	ldr	r3, [pc, #564]	@ (8003054 <HAL_UART_MspInit+0x518>)
 8002e1e:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002e20:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream3;
 8002e22:	488e      	ldr	r0, [pc, #568]	@ (800305c <HAL_UART_MspInit+0x520>)
 8002e24:	4b8e      	ldr	r3, [pc, #568]	@ (8003060 <HAL_UART_MspInit+0x524>)
 8002e26:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002e28:	232b      	movs	r3, #43	@ 0x2b
 8002e2a:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e30:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e36:	6102      	str	r2, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e38:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e3a:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002e3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e40:	61c2      	str	r2, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e42:	6203      	str	r3, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e44:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002e46:	f001 fdbd 	bl	80049c4 <HAL_DMA_Init>
 8002e4a:	b988      	cbnz	r0, 8002e70 <HAL_UART_MspInit+0x334>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002e4c:	4b83      	ldr	r3, [pc, #524]	@ (800305c <HAL_UART_MspInit+0x520>)
 8002e4e:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002e50:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002e52:	2200      	movs	r2, #0
 8002e54:	2105      	movs	r1, #5
 8002e56:	2026      	movs	r0, #38	@ 0x26
 8002e58:	f001 fb8e 	bl	8004578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e5c:	2026      	movs	r0, #38	@ 0x26
 8002e5e:	f001 fb9b 	bl	8004598 <HAL_NVIC_EnableIRQ>
 8002e62:	e68c      	b.n	8002b7e <HAL_UART_MspInit+0x42>
      Error_Handler();
 8002e64:	f7fd fe3a 	bl	8000adc <Error_Handler>
 8002e68:	e79f      	b.n	8002daa <HAL_UART_MspInit+0x26e>
      Error_Handler();
 8002e6a:	f7fd fe37 	bl	8000adc <Error_Handler>
 8002e6e:	e7d5      	b.n	8002e1c <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 8002e70:	f7fd fe34 	bl	8000adc <Error_Handler>
 8002e74:	e7ea      	b.n	8002e4c <HAL_UART_MspInit+0x310>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e76:	2302      	movs	r3, #2
 8002e78:	930c      	str	r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e7a:	a80c      	add	r0, sp, #48	@ 0x30
 8002e7c:	f006 fbe8 	bl	8009650 <HAL_RCCEx_PeriphCLKConfig>
 8002e80:	2800      	cmp	r0, #0
 8002e82:	d174      	bne.n	8002f6e <HAL_UART_MspInit+0x432>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e84:	4b71      	ldr	r3, [pc, #452]	@ (800304c <HAL_UART_MspInit+0x510>)
 8002e86:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002e8a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002e8e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002e92:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002e96:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8002e9a:	9207      	str	r2, [sp, #28]
 8002e9c:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002ea2:	f042 0202 	orr.w	r2, r2, #2
 8002ea6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002eaa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002eae:	f002 0202 	and.w	r2, r2, #2
 8002eb2:	9208      	str	r2, [sp, #32]
 8002eb4:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eb6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002eba:	f042 0208 	orr.w	r2, r2, #8
 8002ebe:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Pin = DE3_RS485_Pin;
 8002ece:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ed2:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed4:	2702      	movs	r7, #2
 8002ed6:	973c      	str	r7, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2500      	movs	r5, #0
 8002eda:	953d      	str	r5, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002edc:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ede:	2607      	movs	r6, #7
 8002ee0:	963f      	str	r6, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(DE3_RS485_GPIO_Port, &GPIO_InitStruct);
 8002ee2:	a93b      	add	r1, sp, #236	@ 0xec
 8002ee4:	485f      	ldr	r0, [pc, #380]	@ (8003064 <HAL_UART_MspInit+0x528>)
 8002ee6:	f003 fcc1 	bl	800686c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_RS485_Pin|RX3_RS485_Pin;
 8002eea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002eee:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef0:	973c      	str	r7, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	953d      	str	r5, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef4:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ef6:	963f      	str	r6, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ef8:	a93b      	add	r1, sp, #236	@ 0xec
 8002efa:	485b      	ldr	r0, [pc, #364]	@ (8003068 <HAL_UART_MspInit+0x52c>)
 8002efc:	f003 fcb6 	bl	800686c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002f00:	485a      	ldr	r0, [pc, #360]	@ (800306c <HAL_UART_MspInit+0x530>)
 8002f02:	4b5b      	ldr	r3, [pc, #364]	@ (8003070 <HAL_UART_MspInit+0x534>)
 8002f04:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002f06:	232e      	movs	r3, #46	@ 0x2e
 8002f08:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f0a:	2340      	movs	r3, #64	@ 0x40
 8002f0c:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f0e:	60c5      	str	r5, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f14:	6103      	str	r3, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f16:	6145      	str	r5, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f18:	6185      	str	r5, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002f1a:	61c5      	str	r5, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f1c:	6205      	str	r5, [r0, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f1e:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002f20:	f001 fd50 	bl	80049c4 <HAL_DMA_Init>
 8002f24:	bb30      	cbnz	r0, 8002f74 <HAL_UART_MspInit+0x438>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002f26:	4b51      	ldr	r3, [pc, #324]	@ (800306c <HAL_UART_MspInit+0x530>)
 8002f28:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002f2a:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart3_rx.Instance = DMA1_Stream5;
 8002f2c:	4851      	ldr	r0, [pc, #324]	@ (8003074 <HAL_UART_MspInit+0x538>)
 8002f2e:	4b52      	ldr	r3, [pc, #328]	@ (8003078 <HAL_UART_MspInit+0x53c>)
 8002f30:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002f32:	232d      	movs	r3, #45	@ 0x2d
 8002f34:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f36:	2300      	movs	r3, #0
 8002f38:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f3a:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f40:	6102      	str	r2, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f42:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f44:	6183      	str	r3, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002f46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f4a:	61c2      	str	r2, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f4c:	6203      	str	r3, [r0, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f4e:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002f50:	f001 fd38 	bl	80049c4 <HAL_DMA_Init>
 8002f54:	b988      	cbnz	r0, 8002f7a <HAL_UART_MspInit+0x43e>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002f56:	4b47      	ldr	r3, [pc, #284]	@ (8003074 <HAL_UART_MspInit+0x538>)
 8002f58:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002f5a:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2105      	movs	r1, #5
 8002f60:	2027      	movs	r0, #39	@ 0x27
 8002f62:	f001 fb09 	bl	8004578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f66:	2027      	movs	r0, #39	@ 0x27
 8002f68:	f001 fb16 	bl	8004598 <HAL_NVIC_EnableIRQ>
 8002f6c:	e607      	b.n	8002b7e <HAL_UART_MspInit+0x42>
      Error_Handler();
 8002f6e:	f7fd fdb5 	bl	8000adc <Error_Handler>
 8002f72:	e787      	b.n	8002e84 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8002f74:	f7fd fdb2 	bl	8000adc <Error_Handler>
 8002f78:	e7d5      	b.n	8002f26 <HAL_UART_MspInit+0x3ea>
      Error_Handler();
 8002f7a:	f7fd fdaf 	bl	8000adc <Error_Handler>
 8002f7e:	e7ea      	b.n	8002f56 <HAL_UART_MspInit+0x41a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002f80:	2301      	movs	r3, #1
 8002f82:	930c      	str	r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f84:	a80c      	add	r0, sp, #48	@ 0x30
 8002f86:	f006 fb63 	bl	8009650 <HAL_RCCEx_PeriphCLKConfig>
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	f040 8080 	bne.w	8003090 <HAL_UART_MspInit+0x554>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f90:	4b2e      	ldr	r3, [pc, #184]	@ (800304c <HAL_UART_MspInit+0x510>)
 8002f92:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002f96:	f042 0220 	orr.w	r2, r2, #32
 8002f9a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8002f9e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002fa2:	f002 0220 	and.w	r2, r2, #32
 8002fa6:	920a      	str	r2, [sp, #40]	@ 0x28
 8002fa8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002faa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002fae:	f042 0204 	orr.w	r2, r2, #4
 8002fb2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002fc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Pin = TX6_BACK_Pin|RX6_BACK_Pin;
 8002fc2:	23c0      	movs	r3, #192	@ 0xc0
 8002fc4:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	933c      	str	r3, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	2500      	movs	r5, #0
 8002fcc:	953d      	str	r5, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fce:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002fd0:	2307      	movs	r3, #7
 8002fd2:	933f      	str	r3, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd4:	a93b      	add	r1, sp, #236	@ 0xec
 8002fd6:	4829      	ldr	r0, [pc, #164]	@ (800307c <HAL_UART_MspInit+0x540>)
 8002fd8:	f003 fc48 	bl	800686c <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA1_Stream6;
 8002fdc:	4828      	ldr	r0, [pc, #160]	@ (8003080 <HAL_UART_MspInit+0x544>)
 8002fde:	4b29      	ldr	r3, [pc, #164]	@ (8003084 <HAL_UART_MspInit+0x548>)
 8002fe0:	6003      	str	r3, [r0, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 8002fe2:	2348      	movs	r3, #72	@ 0x48
 8002fe4:	6043      	str	r3, [r0, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fe6:	2340      	movs	r3, #64	@ 0x40
 8002fe8:	6083      	str	r3, [r0, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fea:	60c5      	str	r5, [r0, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ff0:	6103      	str	r3, [r0, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ff2:	6145      	str	r5, [r0, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ff4:	6185      	str	r5, [r0, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002ff6:	61c5      	str	r5, [r0, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ff8:	6205      	str	r5, [r0, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ffa:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002ffc:	f001 fce2 	bl	80049c4 <HAL_DMA_Init>
 8003000:	2800      	cmp	r0, #0
 8003002:	d148      	bne.n	8003096 <HAL_UART_MspInit+0x55a>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8003004:	4b1e      	ldr	r3, [pc, #120]	@ (8003080 <HAL_UART_MspInit+0x544>)
 8003006:	67a3      	str	r3, [r4, #120]	@ 0x78
 8003008:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart6_rx.Instance = DMA1_Stream7;
 800300a:	481f      	ldr	r0, [pc, #124]	@ (8003088 <HAL_UART_MspInit+0x54c>)
 800300c:	4b1f      	ldr	r3, [pc, #124]	@ (800308c <HAL_UART_MspInit+0x550>)
 800300e:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8003010:	2347      	movs	r3, #71	@ 0x47
 8003012:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003014:	2300      	movs	r3, #0
 8003016:	6083      	str	r3, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003018:	60c3      	str	r3, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800301a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800301e:	6102      	str	r2, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003020:	6143      	str	r3, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003022:	6183      	str	r3, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003024:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003028:	61c2      	str	r2, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800302a:	6203      	str	r3, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800302c:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800302e:	f001 fcc9 	bl	80049c4 <HAL_DMA_Init>
 8003032:	bb98      	cbnz	r0, 800309c <HAL_UART_MspInit+0x560>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003034:	4b14      	ldr	r3, [pc, #80]	@ (8003088 <HAL_UART_MspInit+0x54c>)
 8003036:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8003038:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800303a:	2200      	movs	r2, #0
 800303c:	2105      	movs	r1, #5
 800303e:	2047      	movs	r0, #71	@ 0x47
 8003040:	f001 fa9a 	bl	8004578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003044:	2047      	movs	r0, #71	@ 0x47
 8003046:	f001 faa7 	bl	8004598 <HAL_NVIC_EnableIRQ>
}
 800304a:	e598      	b.n	8002b7e <HAL_UART_MspInit+0x42>
 800304c:	58024400 	.word	0x58024400
 8003050:	58020000 	.word	0x58020000
 8003054:	24001d18 	.word	0x24001d18
 8003058:	40020040 	.word	0x40020040
 800305c:	24001ca0 	.word	0x24001ca0
 8003060:	40020058 	.word	0x40020058
 8003064:	58020400 	.word	0x58020400
 8003068:	58020c00 	.word	0x58020c00
 800306c:	24001c28 	.word	0x24001c28
 8003070:	40020070 	.word	0x40020070
 8003074:	24001bb0 	.word	0x24001bb0
 8003078:	40020088 	.word	0x40020088
 800307c:	58020800 	.word	0x58020800
 8003080:	24001b38 	.word	0x24001b38
 8003084:	400200a0 	.word	0x400200a0
 8003088:	24001ac0 	.word	0x24001ac0
 800308c:	400200b8 	.word	0x400200b8
      Error_Handler();
 8003090:	f7fd fd24 	bl	8000adc <Error_Handler>
 8003094:	e77c      	b.n	8002f90 <HAL_UART_MspInit+0x454>
      Error_Handler();
 8003096:	f7fd fd21 	bl	8000adc <Error_Handler>
 800309a:	e7b3      	b.n	8003004 <HAL_UART_MspInit+0x4c8>
      Error_Handler();
 800309c:	f7fd fd1e 	bl	8000adc <Error_Handler>
 80030a0:	e7c8      	b.n	8003034 <HAL_UART_MspInit+0x4f8>
 80030a2:	bf00      	nop

080030a4 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM5 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030a4:	280f      	cmp	r0, #15
 80030a6:	d901      	bls.n	80030ac <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80030a8:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim5);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80030aa:	4770      	bx	lr
{
 80030ac:	b510      	push	{r4, lr}
 80030ae:	b08a      	sub	sp, #40	@ 0x28
 80030b0:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0U);
 80030b2:	2200      	movs	r2, #0
 80030b4:	4601      	mov	r1, r0
 80030b6:	2032      	movs	r0, #50	@ 0x32
 80030b8:	f001 fa5e 	bl	8004578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80030bc:	2032      	movs	r0, #50	@ 0x32
 80030be:	f001 fa6b 	bl	8004598 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80030c2:	4b1a      	ldr	r3, [pc, #104]	@ (800312c <HAL_InitTick+0x88>)
 80030c4:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM5_CLK_ENABLE();
 80030c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003130 <HAL_InitTick+0x8c>)
 80030c8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80030cc:	f042 0208 	orr.w	r2, r2, #8
 80030d0:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80030d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030e0:	a901      	add	r1, sp, #4
 80030e2:	a802      	add	r0, sp, #8
 80030e4:	f006 f97e 	bl	80093e4 <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80030e8:	9b07      	ldr	r3, [sp, #28]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80030ea:	b9bb      	cbnz	r3, 800311c <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80030ec:	f006 f956 	bl	800939c <HAL_RCC_GetPCLK1Freq>
 80030f0:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030f2:	4a10      	ldr	r2, [pc, #64]	@ (8003134 <HAL_InitTick+0x90>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	0c9b      	lsrs	r3, r3, #18
 80030fa:	3b01      	subs	r3, #1
  htim5.Instance = TIM5;
 80030fc:	480e      	ldr	r0, [pc, #56]	@ (8003138 <HAL_InitTick+0x94>)
 80030fe:	4a0f      	ldr	r2, [pc, #60]	@ (800313c <HAL_InitTick+0x98>)
 8003100:	6002      	str	r2, [r0, #0]
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8003102:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003106:	60c2      	str	r2, [r0, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8003108:	6043      	str	r3, [r0, #4]
  htim5.Init.ClockDivision = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	6103      	str	r3, [r0, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800310e:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8003110:	f008 f8c8 	bl	800b2a4 <HAL_TIM_Base_Init>
 8003114:	b130      	cbz	r0, 8003124 <HAL_InitTick+0x80>
  return HAL_ERROR;
 8003116:	2001      	movs	r0, #1
}
 8003118:	b00a      	add	sp, #40	@ 0x28
 800311a:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800311c:	f006 f93e 	bl	800939c <HAL_RCC_GetPCLK1Freq>
 8003120:	0043      	lsls	r3, r0, #1
 8003122:	e7e6      	b.n	80030f2 <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim5);
 8003124:	4804      	ldr	r0, [pc, #16]	@ (8003138 <HAL_InitTick+0x94>)
 8003126:	f007 ff07 	bl	800af38 <HAL_TIM_Base_Start_IT>
 800312a:	e7f5      	b.n	8003118 <HAL_InitTick+0x74>
 800312c:	2400000c 	.word	0x2400000c
 8003130:	58024400 	.word	0x58024400
 8003134:	431bde83 	.word	0x431bde83
 8003138:	24002998 	.word	0x24002998
 800313c:	40000c00 	.word	0x40000c00

08003140 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003140:	e7fe      	b.n	8003140 <NMI_Handler>

08003142 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003142:	e7fe      	b.n	8003142 <HardFault_Handler>

08003144 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003144:	e7fe      	b.n	8003144 <MemManage_Handler>

08003146 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003146:	e7fe      	b.n	8003146 <BusFault_Handler>

08003148 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003148:	e7fe      	b.n	8003148 <UsageFault_Handler>

0800314a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800314a:	4770      	bx	lr

0800314c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800314c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WATER_DETECTION_Pin);
 800314e:	2008      	movs	r0, #8
 8003150:	f003 fca9 	bl	8006aa6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003154:	bd08      	pop	{r3, pc}
	...

08003158 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003158:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800315a:	4802      	ldr	r0, [pc, #8]	@ (8003164 <DMA1_Stream0_IRQHandler+0xc>)
 800315c:	f002 fa28 	bl	80055b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003160:	bd08      	pop	{r3, pc}
 8003162:	bf00      	nop
 8003164:	24001e08 	.word	0x24001e08

08003168 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003168:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800316a:	4802      	ldr	r0, [pc, #8]	@ (8003174 <DMA1_Stream1_IRQHandler+0xc>)
 800316c:	f002 fa20 	bl	80055b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003170:	bd08      	pop	{r3, pc}
 8003172:	bf00      	nop
 8003174:	24001d90 	.word	0x24001d90

08003178 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003178:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800317a:	4802      	ldr	r0, [pc, #8]	@ (8003184 <DMA1_Stream2_IRQHandler+0xc>)
 800317c:	f002 fa18 	bl	80055b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003180:	bd08      	pop	{r3, pc}
 8003182:	bf00      	nop
 8003184:	24001d18 	.word	0x24001d18

08003188 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003188:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800318a:	4802      	ldr	r0, [pc, #8]	@ (8003194 <DMA1_Stream3_IRQHandler+0xc>)
 800318c:	f002 fa10 	bl	80055b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003190:	bd08      	pop	{r3, pc}
 8003192:	bf00      	nop
 8003194:	24001ca0 	.word	0x24001ca0

08003198 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003198:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800319a:	4802      	ldr	r0, [pc, #8]	@ (80031a4 <DMA1_Stream4_IRQHandler+0xc>)
 800319c:	f002 fa08 	bl	80055b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80031a0:	bd08      	pop	{r3, pc}
 80031a2:	bf00      	nop
 80031a4:	24001c28 	.word	0x24001c28

080031a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80031a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80031aa:	4802      	ldr	r0, [pc, #8]	@ (80031b4 <DMA1_Stream5_IRQHandler+0xc>)
 80031ac:	f002 fa00 	bl	80055b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80031b0:	bd08      	pop	{r3, pc}
 80031b2:	bf00      	nop
 80031b4:	24001bb0 	.word	0x24001bb0

080031b8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80031b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80031ba:	4802      	ldr	r0, [pc, #8]	@ (80031c4 <DMA1_Stream6_IRQHandler+0xc>)
 80031bc:	f002 f9f8 	bl	80055b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80031c0:	bd08      	pop	{r3, pc}
 80031c2:	bf00      	nop
 80031c4:	24001b38 	.word	0x24001b38

080031c8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80031c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80031ca:	4802      	ldr	r0, [pc, #8]	@ (80031d4 <FDCAN1_IT0_IRQHandler+0xc>)
 80031cc:	f003 f9c0 	bl	8006550 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80031d0:	bd08      	pop	{r3, pc}
 80031d2:	bf00      	nop
 80031d4:	240027c4 	.word	0x240027c4

080031d8 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80031d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80031da:	4802      	ldr	r0, [pc, #8]	@ (80031e4 <FDCAN2_IT0_IRQHandler+0xc>)
 80031dc:	f003 f9b8 	bl	8006550 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80031e0:	bd08      	pop	{r3, pc}
 80031e2:	bf00      	nop
 80031e4:	24002724 	.word	0x24002724

080031e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80031e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80031ea:	4802      	ldr	r0, [pc, #8]	@ (80031f4 <TIM4_IRQHandler+0xc>)
 80031ec:	f007 ff0a 	bl	800b004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80031f0:	bd08      	pop	{r3, pc}
 80031f2:	bf00      	nop
 80031f4:	24002240 	.word	0x24002240

080031f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80031f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80031fa:	4802      	ldr	r0, [pc, #8]	@ (8003204 <I2C1_EV_IRQHandler+0xc>)
 80031fc:	f004 fb3a 	bl	8007874 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003200:	bd08      	pop	{r3, pc}
 8003202:	bf00      	nop
 8003204:	240026d8 	.word	0x240026d8

08003208 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003208:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800320a:	4802      	ldr	r0, [pc, #8]	@ (8003214 <I2C2_EV_IRQHandler+0xc>)
 800320c:	f004 fb32 	bl	8007874 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003210:	bd08      	pop	{r3, pc}
 8003212:	bf00      	nop
 8003214:	2400268c 	.word	0x2400268c

08003218 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003218:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800321a:	4c03      	ldr	r4, [pc, #12]	@ (8003228 <USART1_IRQHandler+0x10>)
 800321c:	4620      	mov	r0, r4
 800321e:	f008 fd65 	bl	800bcec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (huart1.ErrorCode != HAL_UART_ERROR_NONE) {
 8003222:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
//	  UART_Error_Callback(&huart1);
  }
  /* USER CODE END USART1_IRQn 1 */
}
 8003226:	bd10      	pop	{r4, pc}
 8003228:	24002120 	.word	0x24002120

0800322c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800322c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800322e:	4802      	ldr	r0, [pc, #8]	@ (8003238 <USART2_IRQHandler+0xc>)
 8003230:	f008 fd5c 	bl	800bcec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003234:	bd08      	pop	{r3, pc}
 8003236:	bf00      	nop
 8003238:	24002090 	.word	0x24002090

0800323c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800323c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800323e:	4802      	ldr	r0, [pc, #8]	@ (8003248 <USART3_IRQHandler+0xc>)
 8003240:	f008 fd54 	bl	800bcec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003244:	bd08      	pop	{r3, pc}
 8003246:	bf00      	nop
 8003248:	24002000 	.word	0x24002000

0800324c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800324c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800324e:	4802      	ldr	r0, [pc, #8]	@ (8003258 <DMA1_Stream7_IRQHandler+0xc>)
 8003250:	f002 f9ae 	bl	80055b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003254:	bd08      	pop	{r3, pc}
 8003256:	bf00      	nop
 8003258:	24001ac0 	.word	0x24001ac0

0800325c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800325c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800325e:	4802      	ldr	r0, [pc, #8]	@ (8003268 <TIM5_IRQHandler+0xc>)
 8003260:	f007 fed0 	bl	800b004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003264:	bd08      	pop	{r3, pc}
 8003266:	bf00      	nop
 8003268:	24002998 	.word	0x24002998

0800326c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800326c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800326e:	4802      	ldr	r0, [pc, #8]	@ (8003278 <DMA2_Stream0_IRQHandler+0xc>)
 8003270:	f002 f99e 	bl	80055b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003274:	bd08      	pop	{r3, pc}
 8003276:	bf00      	nop
 8003278:	240025c8 	.word	0x240025c8

0800327c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800327c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800327e:	4802      	ldr	r0, [pc, #8]	@ (8003288 <DMA2_Stream1_IRQHandler+0xc>)
 8003280:	f002 f996 	bl	80055b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003284:	bd08      	pop	{r3, pc}
 8003286:	bf00      	nop
 8003288:	24002550 	.word	0x24002550

0800328c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800328c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800328e:	4802      	ldr	r0, [pc, #8]	@ (8003298 <DMA2_Stream2_IRQHandler+0xc>)
 8003290:	f002 f98e 	bl	80055b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003294:	bd08      	pop	{r3, pc}
 8003296:	bf00      	nop
 8003298:	240024d8 	.word	0x240024d8

0800329c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800329c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800329e:	4802      	ldr	r0, [pc, #8]	@ (80032a8 <DMA2_Stream3_IRQHandler+0xc>)
 80032a0:	f002 f986 	bl	80055b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80032a4:	bd08      	pop	{r3, pc}
 80032a6:	bf00      	nop
 80032a8:	24002460 	.word	0x24002460

080032ac <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80032ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80032ae:	4802      	ldr	r0, [pc, #8]	@ (80032b8 <DMA2_Stream4_IRQHandler+0xc>)
 80032b0:	f002 f97e 	bl	80055b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80032b4:	bd08      	pop	{r3, pc}
 80032b6:	bf00      	nop
 80032b8:	24001ef8 	.word	0x24001ef8

080032bc <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80032bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80032be:	4802      	ldr	r0, [pc, #8]	@ (80032c8 <DMA2_Stream5_IRQHandler+0xc>)
 80032c0:	f002 f976 	bl	80055b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80032c4:	bd08      	pop	{r3, pc}
 80032c6:	bf00      	nop
 80032c8:	24001e80 	.word	0x24001e80

080032cc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80032cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80032ce:	4802      	ldr	r0, [pc, #8]	@ (80032d8 <USART6_IRQHandler+0xc>)
 80032d0:	f008 fd0c 	bl	800bcec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80032d4:	bd08      	pop	{r3, pc}
 80032d6:	bf00      	nop
 80032d8:	24001f70 	.word	0x24001f70

080032dc <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 80032dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80032de:	4802      	ldr	r0, [pc, #8]	@ (80032e8 <I2C4_EV_IRQHandler+0xc>)
 80032e0:	f004 fac8 	bl	8007874 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80032e4:	bd08      	pop	{r3, pc}
 80032e6:	bf00      	nop
 80032e8:	24002640 	.word	0x24002640

080032ec <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 80032ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 80032ee:	4802      	ldr	r0, [pc, #8]	@ (80032f8 <BDMA_Channel0_IRQHandler+0xc>)
 80032f0:	f002 f95e 	bl	80055b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 80032f4:	bd08      	pop	{r3, pc}
 80032f6:	bf00      	nop
 80032f8:	240023e8 	.word	0x240023e8

080032fc <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 80032fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 80032fe:	4802      	ldr	r0, [pc, #8]	@ (8003308 <BDMA_Channel1_IRQHandler+0xc>)
 8003300:	f002 f956 	bl	80055b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */

  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 8003304:	bd08      	pop	{r3, pc}
 8003306:	bf00      	nop
 8003308:	24002370 	.word	0x24002370

0800330c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800330c:	2001      	movs	r0, #1
 800330e:	4770      	bx	lr

08003310 <_kill>:

int _kill(int pid, int sig)
{
 8003310:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003312:	f01b fec3 	bl	801f09c <__errno>
 8003316:	2316      	movs	r3, #22
 8003318:	6003      	str	r3, [r0, #0]
	return -1;
}
 800331a:	f04f 30ff 	mov.w	r0, #4294967295
 800331e:	bd08      	pop	{r3, pc}

08003320 <_exit>:

void _exit (int status)
{
 8003320:	b508      	push	{r3, lr}
	_kill(status, -1);
 8003322:	f04f 31ff 	mov.w	r1, #4294967295
 8003326:	f7ff fff3 	bl	8003310 <_kill>
	while (1) {}		/* Make sure we hang here */
 800332a:	e7fe      	b.n	800332a <_exit+0xa>

0800332c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800332c:	b510      	push	{r4, lr}
 800332e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003330:	4a0c      	ldr	r2, [pc, #48]	@ (8003364 <_sbrk+0x38>)
 8003332:	490d      	ldr	r1, [pc, #52]	@ (8003368 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003334:	480d      	ldr	r0, [pc, #52]	@ (800336c <_sbrk+0x40>)
 8003336:	6800      	ldr	r0, [r0, #0]
 8003338:	b140      	cbz	r0, 800334c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800333a:	480c      	ldr	r0, [pc, #48]	@ (800336c <_sbrk+0x40>)
 800333c:	6800      	ldr	r0, [r0, #0]
 800333e:	4403      	add	r3, r0
 8003340:	1a52      	subs	r2, r2, r1
 8003342:	4293      	cmp	r3, r2
 8003344:	d806      	bhi.n	8003354 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003346:	4a09      	ldr	r2, [pc, #36]	@ (800336c <_sbrk+0x40>)
 8003348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800334a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800334c:	4807      	ldr	r0, [pc, #28]	@ (800336c <_sbrk+0x40>)
 800334e:	4c08      	ldr	r4, [pc, #32]	@ (8003370 <_sbrk+0x44>)
 8003350:	6004      	str	r4, [r0, #0]
 8003352:	e7f2      	b.n	800333a <_sbrk+0xe>
    errno = ENOMEM;
 8003354:	f01b fea2 	bl	801f09c <__errno>
 8003358:	230c      	movs	r3, #12
 800335a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800335c:	f04f 30ff 	mov.w	r0, #4294967295
 8003360:	e7f3      	b.n	800334a <_sbrk+0x1e>
 8003362:	bf00      	nop
 8003364:	24080000 	.word	0x24080000
 8003368:	00000400 	.word	0x00000400
 800336c:	240029e4 	.word	0x240029e4
 8003370:	24007550 	.word	0x24007550

08003374 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003374:	4a27      	ldr	r2, [pc, #156]	@ (8003414 <SystemInit+0xa0>)
 8003376:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800337a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800337e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003382:	4b25      	ldr	r3, [pc, #148]	@ (8003418 <SystemInit+0xa4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	2b06      	cmp	r3, #6
 800338c:	d806      	bhi.n	800339c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800338e:	4a22      	ldr	r2, [pc, #136]	@ (8003418 <SystemInit+0xa4>)
 8003390:	6813      	ldr	r3, [r2, #0]
 8003392:	f023 030f 	bic.w	r3, r3, #15
 8003396:	f043 0307 	orr.w	r3, r3, #7
 800339a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800339c:	4b1f      	ldr	r3, [pc, #124]	@ (800341c <SystemInit+0xa8>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	f042 0201 	orr.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80033a6:	2200      	movs	r2, #0
 80033a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80033aa:	6819      	ldr	r1, [r3, #0]
 80033ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003420 <SystemInit+0xac>)
 80033ae:	400a      	ands	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80033b2:	4b19      	ldr	r3, [pc, #100]	@ (8003418 <SystemInit+0xa4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f013 0f08 	tst.w	r3, #8
 80033ba:	d006      	beq.n	80033ca <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80033bc:	4a16      	ldr	r2, [pc, #88]	@ (8003418 <SystemInit+0xa4>)
 80033be:	6813      	ldr	r3, [r2, #0]
 80033c0:	f023 030f 	bic.w	r3, r3, #15
 80033c4:	f043 0307 	orr.w	r3, r3, #7
 80033c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80033ca:	4b14      	ldr	r3, [pc, #80]	@ (800341c <SystemInit+0xa8>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80033d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80033d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80033d4:	4913      	ldr	r1, [pc, #76]	@ (8003424 <SystemInit+0xb0>)
 80033d6:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80033d8:	4913      	ldr	r1, [pc, #76]	@ (8003428 <SystemInit+0xb4>)
 80033da:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80033dc:	4913      	ldr	r1, [pc, #76]	@ (800342c <SystemInit+0xb8>)
 80033de:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80033e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80033e2:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80033e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80033e6:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80033e8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033ea:	6819      	ldr	r1, [r3, #0]
 80033ec:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80033f0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80033f2:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80033f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003430 <SystemInit+0xbc>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003434 <SystemInit+0xc0>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003400:	d203      	bcs.n	800340a <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003402:	4b0d      	ldr	r3, [pc, #52]	@ (8003438 <SystemInit+0xc4>)
 8003404:	2201      	movs	r2, #1
 8003406:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800340a:	4b0c      	ldr	r3, [pc, #48]	@ (800343c <SystemInit+0xc8>)
 800340c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003410:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003412:	4770      	bx	lr
 8003414:	e000ed00 	.word	0xe000ed00
 8003418:	52002000 	.word	0x52002000
 800341c:	58024400 	.word	0x58024400
 8003420:	eaf6ed7f 	.word	0xeaf6ed7f
 8003424:	02020200 	.word	0x02020200
 8003428:	01ff0000 	.word	0x01ff0000
 800342c:	01010280 	.word	0x01010280
 8003430:	5c001000 	.word	0x5c001000
 8003434:	ffff0000 	.word	0xffff0000
 8003438:	51008000 	.word	0x51008000
 800343c:	52004000 	.word	0x52004000

08003440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003440:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003478 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003444:	f7ff ff96 	bl	8003374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003448:	480c      	ldr	r0, [pc, #48]	@ (800347c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800344a:	490d      	ldr	r1, [pc, #52]	@ (8003480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800344c:	4a0d      	ldr	r2, [pc, #52]	@ (8003484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800344e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003450:	e002      	b.n	8003458 <LoopCopyDataInit>

08003452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003456:	3304      	adds	r3, #4

08003458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800345a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800345c:	d3f9      	bcc.n	8003452 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800345e:	4a0a      	ldr	r2, [pc, #40]	@ (8003488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003460:	4c0a      	ldr	r4, [pc, #40]	@ (800348c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003464:	e001      	b.n	800346a <LoopFillZerobss>

08003466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003468:	3204      	adds	r2, #4

0800346a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800346a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800346c:	d3fb      	bcc.n	8003466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800346e:	f01b fe1b 	bl	801f0a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003472:	f7fd fcab 	bl	8000dcc <main>
  bx  lr
 8003476:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003478:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800347c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003480:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8003484:	0801f8d8 	.word	0x0801f8d8
  ldr r2, =_sbss
 8003488:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 800348c:	2400754c 	.word	0x2400754c

08003490 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003490:	e7fe      	b.n	8003490 <ADC3_IRQHandler>
	...

08003494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003494:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003496:	2003      	movs	r0, #3
 8003498:	f001 f85c 	bl	8004554 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800349c:	f005 fd18 	bl	8008ed0 <HAL_RCC_GetSysClockFreq>
 80034a0:	490f      	ldr	r1, [pc, #60]	@ (80034e0 <HAL_Init+0x4c>)
 80034a2:	698b      	ldr	r3, [r1, #24]
 80034a4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80034a8:	4a0e      	ldr	r2, [pc, #56]	@ (80034e4 <HAL_Init+0x50>)
 80034aa:	5cd3      	ldrb	r3, [r2, r3]
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034b2:	698b      	ldr	r3, [r1, #24]
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	5cd3      	ldrb	r3, [r2, r3]
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	fa20 f303 	lsr.w	r3, r0, r3
 80034c2:	4a09      	ldr	r2, [pc, #36]	@ (80034e8 <HAL_Init+0x54>)
 80034c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034c6:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <HAL_Init+0x58>)
 80034c8:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034ca:	2000      	movs	r0, #0
 80034cc:	f7ff fdea 	bl	80030a4 <HAL_InitTick>
 80034d0:	b110      	cbz	r0, 80034d8 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 80034d2:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 80034d4:	4620      	mov	r0, r4
 80034d6:	bd10      	pop	{r4, pc}
 80034d8:	4604      	mov	r4, r0
  HAL_MspInit();
 80034da:	f7fe ffb7 	bl	800244c <HAL_MspInit>
  return HAL_OK;
 80034de:	e7f9      	b.n	80034d4 <HAL_Init+0x40>
 80034e0:	58024400 	.word	0x58024400
 80034e4:	0801f3e4 	.word	0x0801f3e4
 80034e8:	24000000 	.word	0x24000000
 80034ec:	24000004 	.word	0x24000004

080034f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80034f0:	4b03      	ldr	r3, [pc, #12]	@ (8003500 <HAL_IncTick+0x10>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	4a03      	ldr	r2, [pc, #12]	@ (8003504 <HAL_IncTick+0x14>)
 80034f6:	6811      	ldr	r1, [r2, #0]
 80034f8:	440b      	add	r3, r1
 80034fa:	6013      	str	r3, [r2, #0]
}
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	24000008 	.word	0x24000008
 8003504:	240029e8 	.word	0x240029e8

08003508 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003508:	4b01      	ldr	r3, [pc, #4]	@ (8003510 <HAL_GetTick+0x8>)
 800350a:	6818      	ldr	r0, [r3, #0]
}
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	240029e8 	.word	0x240029e8

08003514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003514:	b538      	push	{r3, r4, r5, lr}
 8003516:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003518:	f7ff fff6 	bl	8003508 <HAL_GetTick>
 800351c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800351e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003522:	d002      	beq.n	800352a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003524:	4b04      	ldr	r3, [pc, #16]	@ (8003538 <HAL_Delay+0x24>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800352a:	f7ff ffed 	bl	8003508 <HAL_GetTick>
 800352e:	1b40      	subs	r0, r0, r5
 8003530:	42a0      	cmp	r0, r4
 8003532:	d3fa      	bcc.n	800352a <HAL_Delay+0x16>
  {
  }
}
 8003534:	bd38      	pop	{r3, r4, r5, pc}
 8003536:	bf00      	nop
 8003538:	24000008 	.word	0x24000008

0800353c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800353c:	4b01      	ldr	r3, [pc, #4]	@ (8003544 <HAL_GetREVID+0x8>)
 800353e:	6818      	ldr	r0, [r3, #0]
}
 8003540:	0c00      	lsrs	r0, r0, #16
 8003542:	4770      	bx	lr
 8003544:	5c001000 	.word	0x5c001000

08003548 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003548:	b410      	push	{r4}
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800354a:	3030      	adds	r0, #48	@ 0x30
 800354c:	0a0b      	lsrs	r3, r1, #8
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	f003 030c 	and.w	r3, r3, #12

  MODIFY_REG(*preg,
 8003554:	58c4      	ldr	r4, [r0, r3]
 8003556:	f001 011f 	and.w	r1, r1, #31
 800355a:	f04f 0c1f 	mov.w	ip, #31
 800355e:	fa0c fc01 	lsl.w	ip, ip, r1
 8003562:	ea24 0c0c 	bic.w	ip, r4, ip
 8003566:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800356a:	408a      	lsls	r2, r1
 800356c:	ea4c 0202 	orr.w	r2, ip, r2
 8003570:	50c2      	str	r2, [r0, r3]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003576:	4770      	bx	lr

08003578 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003578:	b410      	push	{r4}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800357a:	3014      	adds	r0, #20
 800357c:	0e4b      	lsrs	r3, r1, #25
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	f003 0304 	and.w	r3, r3, #4

  MODIFY_REG(*preg,
 8003584:	58c4      	ldr	r4, [r0, r3]
 8003586:	f3c1 5104 	ubfx	r1, r1, #20, #5
 800358a:	f04f 0c07 	mov.w	ip, #7
 800358e:	fa0c fc01 	lsl.w	ip, ip, r1
 8003592:	ea24 0c0c 	bic.w	ip, r4, ip
 8003596:	408a      	lsls	r2, r1
 8003598:	ea4c 0202 	orr.w	r2, ip, r2
 800359c:	50c2      	str	r2, [r0, r3]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800359e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80035a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035a8:	4604      	mov	r4, r0
 80035aa:	460e      	mov	r6, r1
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035ac:	6803      	ldr	r3, [r0, #0]
 80035ae:	4946      	ldr	r1, [pc, #280]	@ (80036c8 <HAL_ADC_PollForConversion+0x124>)
 80035b0:	4a46      	ldr	r2, [pc, #280]	@ (80036cc <HAL_ADC_PollForConversion+0x128>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	bf18      	it	ne
 80035b6:	428b      	cmpne	r3, r1
 80035b8:	d115      	bne.n	80035e6 <HAL_ADC_PollForConversion+0x42>
 80035ba:	f501 7140 	add.w	r1, r1, #768	@ 0x300
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80035be:	688f      	ldr	r7, [r1, #8]
 80035c0:	f007 071f 	and.w	r7, r7, #31

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80035c4:	6925      	ldr	r5, [r4, #16]
 80035c6:	2d08      	cmp	r5, #8
 80035c8:	d014      	beq.n	80035f4 <HAL_ADC_PollForConversion+0x50>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035ca:	2f09      	cmp	r7, #9
 80035cc:	d805      	bhi.n	80035da <HAL_ADC_PollForConversion+0x36>
 80035ce:	f240 2221 	movw	r2, #545	@ 0x221
 80035d2:	40fa      	lsrs	r2, r7
 80035d4:	f012 0f01 	tst.w	r2, #1
 80035d8:	d107      	bne.n	80035ea <HAL_ADC_PollForConversion+0x46>
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80035da:	688b      	ldr	r3, [r1, #8]
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80035dc:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 80035e0:	d12d      	bne.n	800363e <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
        return HAL_ERROR;
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80035e2:	2504      	movs	r5, #4
 80035e4:	e006      	b.n	80035f4 <HAL_ADC_PollForConversion+0x50>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035e6:	493a      	ldr	r1, [pc, #232]	@ (80036d0 <HAL_ADC_PollForConversion+0x12c>)
 80035e8:	e7e9      	b.n	80035be <HAL_ADC_PollForConversion+0x1a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f013 0f01 	tst.w	r3, #1
 80035f0:	d11f      	bne.n	8003632 <HAL_ADC_PollForConversion+0x8e>
        tmp_Flag_End = (ADC_FLAG_EOC);
 80035f2:	2504      	movs	r5, #4
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80035f4:	f7ff ff88 	bl	8003508 <HAL_GetTick>
 80035f8:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	422a      	tst	r2, r5
 8003600:	d123      	bne.n	800364a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003602:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003606:	d0f8      	beq.n	80035fa <HAL_ADC_PollForConversion+0x56>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003608:	f7ff ff7e 	bl	8003508 <HAL_GetTick>
 800360c:	eba0 0008 	sub.w	r0, r0, r8
 8003610:	42b0      	cmp	r0, r6
 8003612:	d801      	bhi.n	8003618 <HAL_ADC_PollForConversion+0x74>
 8003614:	2e00      	cmp	r6, #0
 8003616:	d1f0      	bne.n	80035fa <HAL_ADC_PollForConversion+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	422b      	tst	r3, r5
 800361e:	d1ec      	bne.n	80035fa <HAL_ADC_PollForConversion+0x56>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003620:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003622:	f043 0304 	orr.w	r3, r3, #4
 8003626:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003628:	2300      	movs	r3, #0
 800362a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

          return HAL_TIMEOUT;
 800362e:	2003      	movs	r0, #3
 8003630:	e045      	b.n	80036be <HAL_ADC_PollForConversion+0x11a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003632:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003634:	f043 0320 	orr.w	r3, r3, #32
 8003638:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 800363a:	2001      	movs	r0, #1
 800363c:	e03f      	b.n	80036be <HAL_ADC_PollForConversion+0x11a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800363e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003640:	f043 0320 	orr.w	r3, r3, #32
 8003644:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 8003646:	2001      	movs	r0, #1
 8003648:	e039      	b.n	80036be <HAL_ADC_PollForConversion+0x11a>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800364a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800364c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003650:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8003658:	d111      	bne.n	800367e <HAL_ADC_PollForConversion+0xda>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800365a:	7d62      	ldrb	r2, [r4, #21]
 800365c:	b97a      	cbnz	r2, 800367e <HAL_ADC_PollForConversion+0xda>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	f012 0f08 	tst.w	r2, #8
 8003664:	d00b      	beq.n	800367e <HAL_ADC_PollForConversion+0xda>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003666:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003668:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800366c:	6562      	str	r2, [r4, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800366e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003670:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8003674:	d103      	bne.n	800367e <HAL_ADC_PollForConversion+0xda>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003676:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003678:	f042 0201 	orr.w	r2, r2, #1
 800367c:	6562      	str	r2, [r4, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800367e:	4a13      	ldr	r2, [pc, #76]	@ (80036cc <HAL_ADC_PollForConversion+0x128>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00c      	beq.n	800369e <HAL_ADC_PollForConversion+0xfa>
 8003684:	461a      	mov	r2, r3
 8003686:	4293      	cmp	r3, r2
 8003688:	d00c      	beq.n	80036a4 <HAL_ADC_PollForConversion+0x100>
 800368a:	2f09      	cmp	r7, #9
 800368c:	d805      	bhi.n	800369a <HAL_ADC_PollForConversion+0xf6>
 800368e:	f240 2121 	movw	r1, #545	@ 0x221
 8003692:	40f9      	lsrs	r1, r7
 8003694:	f011 0f01 	tst.w	r1, #1
 8003698:	d104      	bne.n	80036a4 <HAL_ADC_PollForConversion+0x100>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800369a:	68d2      	ldr	r2, [r2, #12]
 800369c:	e003      	b.n	80036a6 <HAL_ADC_PollForConversion+0x102>
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800369e:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 80036a2:	e7f0      	b.n	8003686 <HAL_ADC_PollForConversion+0xe2>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80036a4:	68da      	ldr	r2, [r3, #12]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80036a6:	2d08      	cmp	r5, #8
 80036a8:	d006      	beq.n	80036b8 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80036aa:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 80036ae:	d108      	bne.n	80036c2 <HAL_ADC_PollForConversion+0x11e>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80036b0:	220c      	movs	r2, #12
 80036b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80036b4:	2000      	movs	r0, #0
 80036b6:	e002      	b.n	80036be <HAL_ADC_PollForConversion+0x11a>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80036b8:	2208      	movs	r2, #8
 80036ba:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80036bc:	2000      	movs	r0, #0
}
 80036be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80036c2:	2000      	movs	r0, #0
 80036c4:	e7fb      	b.n	80036be <HAL_ADC_PollForConversion+0x11a>
 80036c6:	bf00      	nop
 80036c8:	40022000 	.word	0x40022000
 80036cc:	40022100 	.word	0x40022100
 80036d0:	58026300 	.word	0x58026300

080036d4 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80036d4:	6803      	ldr	r3, [r0, #0]
 80036d6:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 80036d8:	4770      	bx	lr
	...

080036dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	9301      	str	r3, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036e4:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	f000 8224 	beq.w	8003b36 <HAL_ADC_ConfigChannel+0x45a>
 80036ee:	4604      	mov	r4, r0
 80036f0:	460d      	mov	r5, r1
 80036f2:	2301      	movs	r3, #1
 80036f4:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036f8:	6802      	ldr	r2, [r0, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036fa:	6893      	ldr	r3, [r2, #8]
 80036fc:	f013 0f04 	tst.w	r3, #4
 8003700:	d009      	beq.n	8003716 <HAL_ADC_ConfigChannel+0x3a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003702:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003704:	f043 0320 	orr.w	r3, r3, #32
 8003708:	6543      	str	r3, [r0, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800370a:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800370c:	2300      	movs	r3, #0
 800370e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8003712:	b002      	add	sp, #8
 8003714:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003716:	680b      	ldr	r3, [r1, #0]
 8003718:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800371c:	2900      	cmp	r1, #0
 800371e:	d13c      	bne.n	800379a <HAL_ADC_ConfigChannel+0xbe>
 8003720:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8003724:	2101      	movs	r1, #1
 8003726:	4099      	lsls	r1, r3
 8003728:	69d3      	ldr	r3, [r2, #28]
 800372a:	430b      	orrs	r3, r1
 800372c:	61d3      	str	r3, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800372e:	682a      	ldr	r2, [r5, #0]
 8003730:	6869      	ldr	r1, [r5, #4]
 8003732:	6820      	ldr	r0, [r4, #0]
 8003734:	f7ff ff08 	bl	8003548 <LL_ADC_REG_SetSequencerRanks>
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003738:	6820      	ldr	r0, [r4, #0]
 800373a:	6883      	ldr	r3, [r0, #8]
 800373c:	f013 0304 	ands.w	r3, r3, #4
 8003740:	d000      	beq.n	8003744 <HAL_ADC_ConfigChannel+0x68>
 8003742:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003744:	6882      	ldr	r2, [r0, #8]
 8003746:	f012 0208 	ands.w	r2, r2, #8
 800374a:	d000      	beq.n	800374e <HAL_ADC_ConfigChannel+0x72>
 800374c:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800374e:	ea52 0603 	orrs.w	r6, r2, r3
 8003752:	d02e      	beq.n	80037b2 <HAL_ADC_ConfigChannel+0xd6>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003754:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003756:	6893      	ldr	r3, [r2, #8]
 8003758:	f013 0f01 	tst.w	r3, #1
 800375c:	f040 81e7 	bne.w	8003b2e <HAL_ADC_ConfigChannel+0x452>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8003764:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 8003768:	f3c3 0613 	ubfx	r6, r3, #0, #20
 800376c:	ea21 0106 	bic.w	r1, r1, r6
 8003770:	f000 0618 	and.w	r6, r0, #24
 8003774:	48ae      	ldr	r0, [pc, #696]	@ (8003a30 <HAL_ADC_ConfigChannel+0x354>)
 8003776:	40f0      	lsrs	r0, r6
 8003778:	4003      	ands	r3, r0
 800377a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800377e:	430b      	orrs	r3, r1
 8003780:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003784:	68ea      	ldr	r2, [r5, #12]
 8003786:	4bab      	ldr	r3, [pc, #684]	@ (8003a34 <HAL_ADC_ConfigChannel+0x358>)
 8003788:	429a      	cmp	r2, r3
 800378a:	f000 80a1 	beq.w	80038d0 <HAL_ADC_ConfigChannel+0x1f4>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800378e:	682b      	ldr	r3, [r5, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	f2c0 8153 	blt.w	8003a3c <HAL_ADC_ConfigChannel+0x360>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003796:	2000      	movs	r0, #0
 8003798:	e7b8      	b.n	800370c <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800379e:	b133      	cbz	r3, 80037ae <HAL_ADC_ConfigChannel+0xd2>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80037a0:	fab3 f383 	clz	r3, r3
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	2101      	movs	r1, #1
 80037aa:	4099      	lsls	r1, r3
 80037ac:	e7bc      	b.n	8003728 <HAL_ADC_ConfigChannel+0x4c>
    return 32U;
 80037ae:	2320      	movs	r3, #32
 80037b0:	e7f8      	b.n	80037a4 <HAL_ADC_ConfigChannel+0xc8>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80037b2:	68aa      	ldr	r2, [r5, #8]
 80037b4:	6829      	ldr	r1, [r5, #0]
 80037b6:	f7ff fedf 	bl	8003578 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80037ba:	4b9f      	ldr	r3, [pc, #636]	@ (8003a38 <HAL_ADC_ConfigChannel+0x35c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80037c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037c6:	d00b      	beq.n	80037e0 <HAL_ADC_ConfigChannel+0x104>
 80037c8:	6822      	ldr	r2, [r4, #0]
 80037ca:	68d3      	ldr	r3, [r2, #12]
 80037cc:	f013 0f10 	tst.w	r3, #16
 80037d0:	d13b      	bne.n	800384a <HAL_ADC_ConfigChannel+0x16e>
 80037d2:	696b      	ldr	r3, [r5, #20]
 80037d4:	68d2      	ldr	r2, [r2, #12]
 80037d6:	f3c2 0282 	ubfx	r2, r2, #2, #3
 80037da:	0052      	lsls	r2, r2, #1
 80037dc:	4093      	lsls	r3, r2
 80037de:	e006      	b.n	80037ee <HAL_ADC_ConfigChannel+0x112>
 80037e0:	696b      	ldr	r3, [r5, #20]
 80037e2:	6822      	ldr	r2, [r4, #0]
 80037e4:	68d2      	ldr	r2, [r2, #12]
 80037e6:	f3c2 0282 	ubfx	r2, r2, #2, #3
 80037ea:	0052      	lsls	r2, r2, #1
 80037ec:	4093      	lsls	r3, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80037ee:	6929      	ldr	r1, [r5, #16]
 80037f0:	2904      	cmp	r1, #4
 80037f2:	d038      	beq.n	8003866 <HAL_ADC_ConfigChannel+0x18a>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80037f4:	6822      	ldr	r2, [r4, #0]
 80037f6:	6828      	ldr	r0, [r5, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037f8:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 80037fc:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 8003800:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003804:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8003808:	4303      	orrs	r3, r0
 800380a:	4313      	orrs	r3, r2
 800380c:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	6928      	ldr	r0, [r5, #16]
 8003814:	7e6a      	ldrb	r2, [r5, #25]
 8003816:	2a01      	cmp	r2, #1
 8003818:	d01f      	beq.n	800385a <HAL_ADC_ConfigChannel+0x17e>
 800381a:	4631      	mov	r1, r6
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800381c:	3360      	adds	r3, #96	@ 0x60
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800381e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8003822:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003826:	430a      	orrs	r2, r1
 8003828:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800382c:	6821      	ldr	r1, [r4, #0]
 800382e:	692a      	ldr	r2, [r5, #16]
 8003830:	7e2b      	ldrb	r3, [r5, #24]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d014      	beq.n	8003860 <HAL_ADC_ConfigChannel+0x184>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003836:	690b      	ldr	r3, [r1, #16]
 8003838:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 800383c:	f002 021f 	and.w	r2, r2, #31
 8003840:	fa06 f202 	lsl.w	r2, r6, r2
 8003844:	4313      	orrs	r3, r2
 8003846:	610b      	str	r3, [r1, #16]
}
 8003848:	e784      	b.n	8003754 <HAL_ADC_ConfigChannel+0x78>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800384a:	696b      	ldr	r3, [r5, #20]
 800384c:	68d2      	ldr	r2, [r2, #12]
 800384e:	0892      	lsrs	r2, r2, #2
 8003850:	f002 0204 	and.w	r2, r2, #4
 8003854:	0052      	lsls	r2, r2, #1
 8003856:	4093      	lsls	r3, r2
 8003858:	e7c9      	b.n	80037ee <HAL_ADC_ConfigChannel+0x112>
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800385a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800385e:	e7dd      	b.n	800381c <HAL_ADC_ConfigChannel+0x140>
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003860:	f44f 6600 	mov.w	r6, #2048	@ 0x800
 8003864:	e7e7      	b.n	8003836 <HAL_ADC_ConfigChannel+0x15a>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003866:	6822      	ldr	r2, [r4, #0]
 8003868:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800386a:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 800386e:	6829      	ldr	r1, [r5, #0]
 8003870:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8003874:	d01d      	beq.n	80038b2 <HAL_ADC_ConfigChannel+0x1d6>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003876:	6822      	ldr	r2, [r4, #0]
 8003878:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800387a:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 800387e:	6829      	ldr	r1, [r5, #0]
 8003880:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8003884:	d01a      	beq.n	80038bc <HAL_ADC_ConfigChannel+0x1e0>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003886:	6822      	ldr	r2, [r4, #0]
 8003888:	6e93      	ldr	r3, [r2, #104]	@ 0x68
 800388a:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 800388e:	6829      	ldr	r1, [r5, #0]
 8003890:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8003894:	d017      	beq.n	80038c6 <HAL_ADC_ConfigChannel+0x1ea>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003896:	6822      	ldr	r2, [r4, #0]
 8003898:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 800389a:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 800389e:	6829      	ldr	r1, [r5, #0]
 80038a0:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 80038a4:	f47f af56 	bne.w	8003754 <HAL_ADC_ConfigChannel+0x78>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80038a8:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 80038aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038ae:	66d3      	str	r3, [r2, #108]	@ 0x6c
 80038b0:	e750      	b.n	8003754 <HAL_ADC_ConfigChannel+0x78>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80038b2:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80038b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80038ba:	e7dc      	b.n	8003876 <HAL_ADC_ConfigChannel+0x19a>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80038bc:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 80038be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038c2:	6653      	str	r3, [r2, #100]	@ 0x64
 80038c4:	e7df      	b.n	8003886 <HAL_ADC_ConfigChannel+0x1aa>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80038c6:	6e93      	ldr	r3, [r2, #104]	@ 0x68
 80038c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038cc:	6693      	str	r3, [r2, #104]	@ 0x68
 80038ce:	e7e2      	b.n	8003896 <HAL_ADC_ConfigChannel+0x1ba>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038d0:	6820      	ldr	r0, [r4, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038d2:	682b      	ldr	r3, [r5, #0]
 80038d4:	f3c3 0613 	ubfx	r6, r3, #0, #20
 80038d8:	bb3e      	cbnz	r6, 800392a <HAL_ADC_ConfigChannel+0x24e>
 80038da:	0e9a      	lsrs	r2, r3, #26
 80038dc:	3201      	adds	r2, #1
 80038de:	f002 021f 	and.w	r2, r2, #31
 80038e2:	2a09      	cmp	r2, #9
 80038e4:	bf8c      	ite	hi
 80038e6:	2200      	movhi	r2, #0
 80038e8:	2201      	movls	r2, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038ea:	2a00      	cmp	r2, #0
 80038ec:	d055      	beq.n	800399a <HAL_ADC_ConfigChannel+0x2be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038ee:	bb5e      	cbnz	r6, 8003948 <HAL_ADC_ConfigChannel+0x26c>
 80038f0:	0e99      	lsrs	r1, r3, #26
 80038f2:	3101      	adds	r1, #1
 80038f4:	0689      	lsls	r1, r1, #26
 80038f6:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 80038fa:	bb8e      	cbnz	r6, 8003960 <HAL_ADC_ConfigChannel+0x284>
 80038fc:	ea4f 6c93 	mov.w	ip, r3, lsr #26
 8003900:	f10c 0c01 	add.w	ip, ip, #1
 8003904:	f00c 0c1f 	and.w	ip, ip, #31
 8003908:	2201      	movs	r2, #1
 800390a:	fa02 f20c 	lsl.w	r2, r2, ip
 800390e:	4311      	orrs	r1, r2
 8003910:	bbae      	cbnz	r6, 800397e <HAL_ADC_ConfigChannel+0x2a2>
 8003912:	0e9b      	lsrs	r3, r3, #26
 8003914:	3301      	adds	r3, #1
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800391e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003920:	4319      	orrs	r1, r3
 8003922:	68aa      	ldr	r2, [r5, #8]
 8003924:	f7ff fe28 	bl	8003578 <LL_ADC_SetChannelSamplingTime>
 8003928:	e731      	b.n	800378e <HAL_ADC_ConfigChannel+0xb2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392a:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800392e:	b14a      	cbz	r2, 8003944 <HAL_ADC_ConfigChannel+0x268>
  return __builtin_clz(value);
 8003930:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003934:	3201      	adds	r2, #1
 8003936:	f002 021f 	and.w	r2, r2, #31
 800393a:	2a09      	cmp	r2, #9
 800393c:	bf8c      	ite	hi
 800393e:	2200      	movhi	r2, #0
 8003940:	2201      	movls	r2, #1
 8003942:	e7d2      	b.n	80038ea <HAL_ADC_ConfigChannel+0x20e>
    return 32U;
 8003944:	2220      	movs	r2, #32
 8003946:	e7f5      	b.n	8003934 <HAL_ADC_ConfigChannel+0x258>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003948:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 800394c:	b131      	cbz	r1, 800395c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800394e:	fab1 f181 	clz	r1, r1
 8003952:	3101      	adds	r1, #1
 8003954:	0689      	lsls	r1, r1, #26
 8003956:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800395a:	e7ce      	b.n	80038fa <HAL_ADC_ConfigChannel+0x21e>
    return 32U;
 800395c:	2120      	movs	r1, #32
 800395e:	e7f8      	b.n	8003952 <HAL_ADC_ConfigChannel+0x276>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003960:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8003964:	b14a      	cbz	r2, 800397a <HAL_ADC_ConfigChannel+0x29e>
  return __builtin_clz(value);
 8003966:	fab2 f282 	clz	r2, r2
 800396a:	3201      	adds	r2, #1
 800396c:	f002 021f 	and.w	r2, r2, #31
 8003970:	f04f 0c01 	mov.w	ip, #1
 8003974:	fa0c f202 	lsl.w	r2, ip, r2
 8003978:	e7c9      	b.n	800390e <HAL_ADC_ConfigChannel+0x232>
    return 32U;
 800397a:	2220      	movs	r2, #32
 800397c:	e7f5      	b.n	800396a <HAL_ADC_ConfigChannel+0x28e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8003982:	b143      	cbz	r3, 8003996 <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8003984:	fab3 f383 	clz	r3, r3
 8003988:	3301      	adds	r3, #1
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003992:	051b      	lsls	r3, r3, #20
 8003994:	e7c4      	b.n	8003920 <HAL_ADC_ConfigChannel+0x244>
    return 32U;
 8003996:	2320      	movs	r3, #32
 8003998:	e7f6      	b.n	8003988 <HAL_ADC_ConfigChannel+0x2ac>
 800399a:	b9e6      	cbnz	r6, 80039d6 <HAL_ADC_ConfigChannel+0x2fa>
 800399c:	0e99      	lsrs	r1, r3, #26
 800399e:	3101      	adds	r1, #1
 80039a0:	0689      	lsls	r1, r1, #26
 80039a2:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 80039a6:	bb16      	cbnz	r6, 80039ee <HAL_ADC_ConfigChannel+0x312>
 80039a8:	ea4f 6c93 	mov.w	ip, r3, lsr #26
 80039ac:	f10c 0c01 	add.w	ip, ip, #1
 80039b0:	f00c 0c1f 	and.w	ip, ip, #31
 80039b4:	2201      	movs	r2, #1
 80039b6:	fa02 f20c 	lsl.w	r2, r2, ip
 80039ba:	4311      	orrs	r1, r2
 80039bc:	bb36      	cbnz	r6, 8003a0c <HAL_ADC_ConfigChannel+0x330>
 80039be:	0e9b      	lsrs	r3, r3, #26
 80039c0:	3301      	adds	r3, #1
 80039c2:	f003 031f 	and.w	r3, r3, #31
 80039c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80039ca:	3b1e      	subs	r3, #30
 80039cc:	051b      	lsls	r3, r3, #20
 80039ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039d2:	4319      	orrs	r1, r3
 80039d4:	e7a5      	b.n	8003922 <HAL_ADC_ConfigChannel+0x246>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 80039da:	b131      	cbz	r1, 80039ea <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80039dc:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039e0:	3101      	adds	r1, #1
 80039e2:	0689      	lsls	r1, r1, #26
 80039e4:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 80039e8:	e7dd      	b.n	80039a6 <HAL_ADC_ConfigChannel+0x2ca>
    return 32U;
 80039ea:	2120      	movs	r1, #32
 80039ec:	e7f8      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x304>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80039f2:	b14a      	cbz	r2, 8003a08 <HAL_ADC_ConfigChannel+0x32c>
  return __builtin_clz(value);
 80039f4:	fab2 f282 	clz	r2, r2
 80039f8:	3201      	adds	r2, #1
 80039fa:	f002 021f 	and.w	r2, r2, #31
 80039fe:	f04f 0c01 	mov.w	ip, #1
 8003a02:	fa0c f202 	lsl.w	r2, ip, r2
 8003a06:	e7d8      	b.n	80039ba <HAL_ADC_ConfigChannel+0x2de>
    return 32U;
 8003a08:	2220      	movs	r2, #32
 8003a0a:	e7f5      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x31c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0c:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8003a10:	b15b      	cbz	r3, 8003a2a <HAL_ADC_ConfigChannel+0x34e>
  return __builtin_clz(value);
 8003a12:	fab3 f383 	clz	r3, r3
 8003a16:	3301      	adds	r3, #1
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003a20:	3b1e      	subs	r3, #30
 8003a22:	051b      	lsls	r3, r3, #20
 8003a24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a28:	e7d3      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x2f6>
    return 32U;
 8003a2a:	2320      	movs	r3, #32
 8003a2c:	e7f3      	b.n	8003a16 <HAL_ADC_ConfigChannel+0x33a>
 8003a2e:	bf00      	nop
 8003a30:	000fffff 	.word	0x000fffff
 8003a34:	47ff0000 	.word	0x47ff0000
 8003a38:	5c001000 	.word	0x5c001000
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a3c:	6822      	ldr	r2, [r4, #0]
 8003a3e:	493f      	ldr	r1, [pc, #252]	@ (8003b3c <HAL_ADC_ConfigChannel+0x460>)
 8003a40:	483f      	ldr	r0, [pc, #252]	@ (8003b40 <HAL_ADC_ConfigChannel+0x464>)
 8003a42:	4282      	cmp	r2, r0
 8003a44:	bf18      	it	ne
 8003a46:	428a      	cmpne	r2, r1
 8003a48:	bf0c      	ite	eq
 8003a4a:	2101      	moveq	r1, #1
 8003a4c:	2100      	movne	r1, #0
 8003a4e:	d118      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x3a6>
 8003a50:	4e3c      	ldr	r6, [pc, #240]	@ (8003b44 <HAL_ADC_ConfigChannel+0x468>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a52:	68b5      	ldr	r5, [r6, #8]
 8003a54:	f005 7ce0 	and.w	ip, r5, #29360128	@ 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a58:	b1a9      	cbz	r1, 8003a86 <HAL_ADC_ConfigChannel+0x3aa>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a5a:	4938      	ldr	r1, [pc, #224]	@ (8003b3c <HAL_ADC_ConfigChannel+0x460>)
 8003a5c:	6888      	ldr	r0, [r1, #8]
 8003a5e:	f010 0001 	ands.w	r0, r0, #1
 8003a62:	d000      	beq.n	8003a66 <HAL_ADC_ConfigChannel+0x38a>
 8003a64:	2001      	movs	r0, #1
 8003a66:	4936      	ldr	r1, [pc, #216]	@ (8003b40 <HAL_ADC_ConfigChannel+0x464>)
 8003a68:	6889      	ldr	r1, [r1, #8]
 8003a6a:	f011 0101 	ands.w	r1, r1, #1
 8003a6e:	d000      	beq.n	8003a72 <HAL_ADC_ConfigChannel+0x396>
 8003a70:	2101      	movs	r1, #1
 8003a72:	4301      	orrs	r1, r0
 8003a74:	d00c      	beq.n	8003a90 <HAL_ADC_ConfigChannel+0x3b4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a76:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003a78:	f043 0320 	orr.w	r3, r3, #32
 8003a7c:	6563      	str	r3, [r4, #84]	@ 0x54
          tmp_hal_status = HAL_ERROR;
 8003a7e:	2001      	movs	r0, #1
 8003a80:	e644      	b.n	800370c <HAL_ADC_ConfigChannel+0x30>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a82:	4e31      	ldr	r6, [pc, #196]	@ (8003b48 <HAL_ADC_ConfigChannel+0x46c>)
 8003a84:	e7e5      	b.n	8003a52 <HAL_ADC_ConfigChannel+0x376>
 8003a86:	4931      	ldr	r1, [pc, #196]	@ (8003b4c <HAL_ADC_ConfigChannel+0x470>)
 8003a88:	6889      	ldr	r1, [r1, #8]
 8003a8a:	f011 0f01 	tst.w	r1, #1
 8003a8e:	d1f2      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x39a>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a90:	492f      	ldr	r1, [pc, #188]	@ (8003b50 <HAL_ADC_ConfigChannel+0x474>)
 8003a92:	428b      	cmp	r3, r1
 8003a94:	d007      	beq.n	8003aa6 <HAL_ADC_ConfigChannel+0x3ca>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a96:	492f      	ldr	r1, [pc, #188]	@ (8003b54 <HAL_ADC_ConfigChannel+0x478>)
 8003a98:	428b      	cmp	r3, r1
 8003a9a:	d026      	beq.n	8003aea <HAL_ADC_ConfigChannel+0x40e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a9c:	492e      	ldr	r1, [pc, #184]	@ (8003b58 <HAL_ADC_ConfigChannel+0x47c>)
 8003a9e:	428b      	cmp	r3, r1
 8003aa0:	d034      	beq.n	8003b0c <HAL_ADC_ConfigChannel+0x430>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	e632      	b.n	800370c <HAL_ADC_ConfigChannel+0x30>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003aa6:	f415 0f00 	tst.w	r5, #8388608	@ 0x800000
 8003aaa:	d1f4      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x3ba>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003aac:	4b27      	ldr	r3, [pc, #156]	@ (8003b4c <HAL_ADC_ConfigChannel+0x470>)
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d001      	beq.n	8003ab6 <HAL_ADC_ConfigChannel+0x3da>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	e62a      	b.n	800370c <HAL_ADC_ConfigChannel+0x30>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003ab6:	f44c 0300 	orr.w	r3, ip, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003aba:	68b2      	ldr	r2, [r6, #8]
 8003abc:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60b3      	str	r3, [r6, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ac4:	4b25      	ldr	r3, [pc, #148]	@ (8003b5c <HAL_ADC_ConfigChannel+0x480>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	099b      	lsrs	r3, r3, #6
 8003aca:	4a25      	ldr	r2, [pc, #148]	@ (8003b60 <HAL_ADC_ConfigChannel+0x484>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	099b      	lsrs	r3, r3, #6
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8003ad8:	e002      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x404>
                wait_loop_index--;
 8003ada:	9b01      	ldr	r3, [sp, #4]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8003ae0:	9b01      	ldr	r3, [sp, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f9      	bne.n	8003ada <HAL_ADC_ConfigChannel+0x3fe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	e610      	b.n	800370c <HAL_ADC_ConfigChannel+0x30>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003aea:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 8003aee:	d1d5      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x3c0>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003af0:	4b16      	ldr	r3, [pc, #88]	@ (8003b4c <HAL_ADC_ConfigChannel+0x470>)
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d001      	beq.n	8003afa <HAL_ADC_ConfigChannel+0x41e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003af6:	2000      	movs	r0, #0
 8003af8:	e608      	b.n	800370c <HAL_ADC_ConfigChannel+0x30>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003afa:	f04c 7380 	orr.w	r3, ip, #16777216	@ 0x1000000
 8003afe:	68b2      	ldr	r2, [r6, #8]
 8003b00:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60b3      	str	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b08:	2000      	movs	r0, #0
}
 8003b0a:	e5ff      	b.n	800370c <HAL_ADC_ConfigChannel+0x30>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b0c:	f415 0f80 	tst.w	r5, #4194304	@ 0x400000
 8003b10:	d10f      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x456>
            if (ADC_VREFINT_INSTANCE(hadc))
 8003b12:	4b0e      	ldr	r3, [pc, #56]	@ (8003b4c <HAL_ADC_ConfigChannel+0x470>)
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_ADC_ConfigChannel+0x440>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b18:	2000      	movs	r0, #0
 8003b1a:	e5f7      	b.n	800370c <HAL_ADC_ConfigChannel+0x30>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003b1c:	f44c 0380 	orr.w	r3, ip, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b20:	68b2      	ldr	r2, [r6, #8]
 8003b22:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60b3      	str	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b2a:	2000      	movs	r0, #0
}
 8003b2c:	e5ee      	b.n	800370c <HAL_ADC_ConfigChannel+0x30>
 8003b2e:	2000      	movs	r0, #0
 8003b30:	e5ec      	b.n	800370c <HAL_ADC_ConfigChannel+0x30>
 8003b32:	2000      	movs	r0, #0
 8003b34:	e5ea      	b.n	800370c <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8003b36:	2002      	movs	r0, #2
 8003b38:	e5eb      	b.n	8003712 <HAL_ADC_ConfigChannel+0x36>
 8003b3a:	bf00      	nop
 8003b3c:	40022000 	.word	0x40022000
 8003b40:	40022100 	.word	0x40022100
 8003b44:	40022300 	.word	0x40022300
 8003b48:	58026300 	.word	0x58026300
 8003b4c:	58026000 	.word	0x58026000
 8003b50:	cb840000 	.word	0xcb840000
 8003b54:	c7520000 	.word	0xc7520000
 8003b58:	cfb80000 	.word	0xcfb80000
 8003b5c:	24000004 	.word	0x24000004
 8003b60:	053e2d63 	.word	0x053e2d63

08003b64 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003b64:	b570      	push	{r4, r5, r6, lr}
 8003b66:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b68:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b6a:	6882      	ldr	r2, [r0, #8]
 8003b6c:	f012 0204 	ands.w	r2, r2, #4
 8003b70:	d000      	beq.n	8003b74 <ADC_ConversionStop+0x10>
 8003b72:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b74:	6883      	ldr	r3, [r0, #8]
 8003b76:	f013 0308 	ands.w	r3, r3, #8
 8003b7a:	d000      	beq.n	8003b7e <ADC_ConversionStop+0x1a>
 8003b7c:	2301      	movs	r3, #1
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	d069      	beq.n	8003c56 <ADC_ConversionStop+0xf2>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003b82:	68c3      	ldr	r3, [r0, #12]
 8003b84:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003b88:	d004      	beq.n	8003b94 <ADC_ConversionStop+0x30>
        && (hadc->Init.ContinuousConvMode == ENABLE)
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003b8a:	8aa2      	ldrh	r2, [r4, #20]
 8003b8c:	f240 1301 	movw	r3, #257	@ 0x101
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d04a      	beq.n	8003c2a <ADC_ConversionStop+0xc6>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003b94:	2902      	cmp	r1, #2
 8003b96:	d010      	beq.n	8003bba <ADC_ConversionStop+0x56>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003b98:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	f012 0f04 	tst.w	r2, #4
 8003ba0:	d009      	beq.n	8003bb6 <ADC_ConversionStop+0x52>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	f012 0f02 	tst.w	r2, #2
 8003ba8:	d105      	bne.n	8003bb6 <ADC_ConversionStop+0x52>
  MODIFY_REG(ADCx->CR,
 8003baa:	6898      	ldr	r0, [r3, #8]
 8003bac:	4a2b      	ldr	r2, [pc, #172]	@ (8003c5c <ADC_ConversionStop+0xf8>)
 8003bae:	4002      	ands	r2, r0
 8003bb0:	f042 0210 	orr.w	r2, r2, #16
 8003bb4:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003bb6:	2901      	cmp	r1, #1
 8003bb8:	d045      	beq.n	8003c46 <ADC_ConversionStop+0xe2>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003bba:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	f012 0f08 	tst.w	r2, #8
 8003bc2:	d009      	beq.n	8003bd8 <ADC_ConversionStop+0x74>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	f012 0f02 	tst.w	r2, #2
 8003bca:	d105      	bne.n	8003bd8 <ADC_ConversionStop+0x74>
  MODIFY_REG(ADCx->CR,
 8003bcc:	6898      	ldr	r0, [r3, #8]
 8003bce:	4a23      	ldr	r2, [pc, #140]	@ (8003c5c <ADC_ConversionStop+0xf8>)
 8003bd0:	4002      	ands	r2, r0
 8003bd2:	f042 0220 	orr.w	r2, r2, #32
 8003bd6:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003bd8:	2902      	cmp	r1, #2
 8003bda:	d036      	beq.n	8003c4a <ADC_ConversionStop+0xe6>
 8003bdc:	2903      	cmp	r1, #3
 8003bde:	d136      	bne.n	8003c4e <ADC_ConversionStop+0xea>
 8003be0:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003be2:	f7ff fc91 	bl	8003508 <HAL_GetTick>
 8003be6:	4606      	mov	r6, r0

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	422b      	tst	r3, r5
 8003bee:	d030      	beq.n	8003c52 <ADC_ConversionStop+0xee>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003bf0:	f7ff fc8a 	bl	8003508 <HAL_GetTick>
 8003bf4:	1b83      	subs	r3, r0, r6
 8003bf6:	2b05      	cmp	r3, #5
 8003bf8:	d9f6      	bls.n	8003be8 <ADC_ConversionStop+0x84>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	422b      	tst	r3, r5
 8003c00:	d0f2      	beq.n	8003be8 <ADC_ConversionStop+0x84>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c02:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003c04:	f043 0310 	orr.w	r3, r3, #16
 8003c08:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	65a3      	str	r3, [r4, #88]	@ 0x58

          return HAL_ERROR;
 8003c12:	2001      	movs	r0, #1
 8003c14:	e020      	b.n	8003c58 <ADC_ConversionStop+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c16:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003c18:	f043 0310 	orr.w	r3, r3, #16
 8003c1c:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 8003c26:	2001      	movs	r0, #1
 8003c28:	e016      	b.n	8003c58 <ADC_ConversionStop+0xf4>
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003c2a:	2300      	movs	r3, #0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003c2c:	6802      	ldr	r2, [r0, #0]
 8003c2e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003c32:	d104      	bne.n	8003c3e <ADC_ConversionStop+0xda>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003c34:	4a0a      	ldr	r2, [pc, #40]	@ (8003c60 <ADC_ConversionStop+0xfc>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d8ed      	bhi.n	8003c16 <ADC_ConversionStop+0xb2>
        Conversion_Timeout_CPU_cycles ++;
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	e7f6      	b.n	8003c2c <ADC_ConversionStop+0xc8>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003c3e:	2340      	movs	r3, #64	@ 0x40
 8003c40:	6003      	str	r3, [r0, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003c42:	2101      	movs	r1, #1
 8003c44:	e7a8      	b.n	8003b98 <ADC_ConversionStop+0x34>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c46:	2504      	movs	r5, #4
 8003c48:	e7cb      	b.n	8003be2 <ADC_ConversionStop+0x7e>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003c4a:	2508      	movs	r5, #8
 8003c4c:	e7c9      	b.n	8003be2 <ADC_ConversionStop+0x7e>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c4e:	2504      	movs	r5, #4
 8003c50:	e7c7      	b.n	8003be2 <ADC_ConversionStop+0x7e>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003c52:	2000      	movs	r0, #0
 8003c54:	e000      	b.n	8003c58 <ADC_ConversionStop+0xf4>
 8003c56:	2000      	movs	r0, #0
}
 8003c58:	bd70      	pop	{r4, r5, r6, pc}
 8003c5a:	bf00      	nop
 8003c5c:	7fffffc0 	.word	0x7fffffc0
 8003c60:	000cdbff 	.word	0x000cdbff

08003c64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c64:	b538      	push	{r3, r4, r5, lr}

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c66:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	f012 0f01 	tst.w	r2, #1
 8003c6e:	d156      	bne.n	8003d1e <ADC_Enable+0xba>
 8003c70:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003c72:	6899      	ldr	r1, [r3, #8]
 8003c74:	4a2b      	ldr	r2, [pc, #172]	@ (8003d24 <ADC_Enable+0xc0>)
 8003c76:	4211      	tst	r1, r2
 8003c78:	d009      	beq.n	8003c8e <ADC_Enable+0x2a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c7a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003c7c:	f043 0310 	orr.w	r3, r3, #16
 8003c80:	6543      	str	r3, [r0, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c82:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	6583      	str	r3, [r0, #88]	@ 0x58

      return HAL_ERROR;
 8003c8a:	2001      	movs	r0, #1
 8003c8c:	e048      	b.n	8003d20 <ADC_Enable+0xbc>
  MODIFY_REG(ADCx->CR,
 8003c8e:	6899      	ldr	r1, [r3, #8]
 8003c90:	4a25      	ldr	r2, [pc, #148]	@ (8003d28 <ADC_Enable+0xc4>)
 8003c92:	400a      	ands	r2, r1
 8003c94:	f042 0201 	orr.w	r2, r2, #1
 8003c98:	609a      	str	r2, [r3, #8]

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c9a:	f7ff fc35 	bl	8003508 <HAL_GetTick>
 8003c9e:	4605      	mov	r5, r0

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	4922      	ldr	r1, [pc, #136]	@ (8003d2c <ADC_Enable+0xc8>)
 8003ca4:	4a22      	ldr	r2, [pc, #136]	@ (8003d30 <ADC_Enable+0xcc>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	bf18      	it	ne
 8003caa:	428b      	cmpne	r3, r1
 8003cac:	d10d      	bne.n	8003cca <ADC_Enable+0x66>
 8003cae:	f502 7200 	add.w	r2, r2, #512	@ 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003cb2:	6892      	ldr	r2, [r2, #8]
 8003cb4:	f002 021f 	and.w	r2, r2, #31
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cb8:	491d      	ldr	r1, [pc, #116]	@ (8003d30 <ADC_Enable+0xcc>)
 8003cba:	428b      	cmp	r3, r1
 8003cbc:	d007      	beq.n	8003cce <ADC_Enable+0x6a>
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4299      	cmp	r1, r3
 8003cc2:	d007      	beq.n	8003cd4 <ADC_Enable+0x70>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cc4:	b132      	cbz	r2, 8003cd4 <ADC_Enable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	e02a      	b.n	8003d20 <ADC_Enable+0xbc>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cca:	4a1a      	ldr	r2, [pc, #104]	@ (8003d34 <ADC_Enable+0xd0>)
 8003ccc:	e7f1      	b.n	8003cb2 <ADC_Enable+0x4e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cce:	f5a1 7180 	sub.w	r1, r1, #256	@ 0x100
 8003cd2:	e7f5      	b.n	8003cc0 <ADC_Enable+0x5c>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	f012 0f01 	tst.w	r2, #1
 8003cdc:	d11d      	bne.n	8003d1a <ADC_Enable+0xb6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	f012 0f01 	tst.w	r2, #1
 8003ce4:	d105      	bne.n	8003cf2 <ADC_Enable+0x8e>
  MODIFY_REG(ADCx->CR,
 8003ce6:	6899      	ldr	r1, [r3, #8]
 8003ce8:	4a0f      	ldr	r2, [pc, #60]	@ (8003d28 <ADC_Enable+0xc4>)
 8003cea:	400a      	ands	r2, r1
 8003cec:	f042 0201 	orr.w	r2, r2, #1
 8003cf0:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cf2:	f7ff fc09 	bl	8003508 <HAL_GetTick>
 8003cf6:	1b40      	subs	r0, r0, r5
 8003cf8:	2802      	cmp	r0, #2
 8003cfa:	d9eb      	bls.n	8003cd4 <ADC_Enable+0x70>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f013 0f01 	tst.w	r3, #1
 8003d04:	d1e6      	bne.n	8003cd4 <ADC_Enable+0x70>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d06:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003d08:	f043 0310 	orr.w	r3, r3, #16
 8003d0c:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	65a3      	str	r3, [r4, #88]	@ 0x58
            return HAL_ERROR;
 8003d16:	2001      	movs	r0, #1
 8003d18:	e002      	b.n	8003d20 <ADC_Enable+0xbc>
  return HAL_OK;
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	e000      	b.n	8003d20 <ADC_Enable+0xbc>
 8003d1e:	2000      	movs	r0, #0
}
 8003d20:	bd38      	pop	{r3, r4, r5, pc}
 8003d22:	bf00      	nop
 8003d24:	8000003f 	.word	0x8000003f
 8003d28:	7fffffc0 	.word	0x7fffffc0
 8003d2c:	40022000 	.word	0x40022000
 8003d30:	40022100 	.word	0x40022100
 8003d34:	58026300 	.word	0x58026300

08003d38 <HAL_ADC_Start>:
{
 8003d38:	b538      	push	{r3, r4, r5, lr}
 8003d3a:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d3c:	6803      	ldr	r3, [r0, #0]
 8003d3e:	493e      	ldr	r1, [pc, #248]	@ (8003e38 <HAL_ADC_Start+0x100>)
 8003d40:	4a3e      	ldr	r2, [pc, #248]	@ (8003e3c <HAL_ADC_Start+0x104>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	bf18      	it	ne
 8003d46:	428b      	cmpne	r3, r1
 8003d48:	d152      	bne.n	8003df0 <HAL_ADC_Start+0xb8>
 8003d4a:	f502 7200 	add.w	r2, r2, #512	@ 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d4e:	6895      	ldr	r5, [r2, #8]
 8003d50:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f013 0f04 	tst.w	r3, #4
 8003d5a:	d169      	bne.n	8003e30 <HAL_ADC_Start+0xf8>
    __HAL_LOCK(hadc);
 8003d5c:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d067      	beq.n	8003e34 <HAL_ADC_Start+0xfc>
 8003d64:	2301      	movs	r3, #1
 8003d66:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f7ff ff7a 	bl	8003c64 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d159      	bne.n	8003e28 <HAL_ADC_Start+0xf0>
      ADC_STATE_CLR_SET(hadc->State,
 8003d74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003d76:	f6a0 7302 	subw	r3, r0, #3842	@ 0xf02
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d80:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	4a2d      	ldr	r2, [pc, #180]	@ (8003e3c <HAL_ADC_Start+0x104>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d034      	beq.n	8003df4 <HAL_ADC_Start+0xbc>
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d000      	beq.n	8003d92 <HAL_ADC_Start+0x5a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d90:	b91d      	cbnz	r5, 8003d9a <HAL_ADC_Start+0x62>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d92:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003d94:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003d98:	6562      	str	r2, [r4, #84]	@ 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d9a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003d9c:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8003da0:	d02b      	beq.n	8003dfa <HAL_ADC_Start+0xc2>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003da2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003da4:	f022 0206 	bic.w	r2, r2, #6
 8003da8:	65a2      	str	r2, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003daa:	221c      	movs	r2, #28
 8003dac:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 8003dae:	2300      	movs	r3, #0
 8003db0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	4a21      	ldr	r2, [pc, #132]	@ (8003e3c <HAL_ADC_Start+0x104>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d021      	beq.n	8003e00 <HAL_ADC_Start+0xc8>
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d021      	beq.n	8003e06 <HAL_ADC_Start+0xce>
 8003dc2:	2d09      	cmp	r5, #9
 8003dc4:	d805      	bhi.n	8003dd2 <HAL_ADC_Start+0x9a>
 8003dc6:	f240 2121 	movw	r1, #545	@ 0x221
 8003dca:	40e9      	lsrs	r1, r5
 8003dcc:	f011 0f01 	tst.w	r1, #1
 8003dd0:	d119      	bne.n	8003e06 <HAL_ADC_Start+0xce>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003dd2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003dd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dd8:	6563      	str	r3, [r4, #84]	@ 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003dda:	68d3      	ldr	r3, [r2, #12]
 8003ddc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003de0:	d027      	beq.n	8003e32 <HAL_ADC_Start+0xfa>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003de2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003de4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003de8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003dec:	6563      	str	r3, [r4, #84]	@ 0x54
 8003dee:	e020      	b.n	8003e32 <HAL_ADC_Start+0xfa>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003df0:	4a13      	ldr	r2, [pc, #76]	@ (8003e40 <HAL_ADC_Start+0x108>)
 8003df2:	e7ac      	b.n	8003d4e <HAL_ADC_Start+0x16>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003df4:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8003df8:	e7c8      	b.n	8003d8c <HAL_ADC_Start+0x54>
        ADC_CLEAR_ERRORCODE(hadc);
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	65a2      	str	r2, [r4, #88]	@ 0x58
 8003dfe:	e7d4      	b.n	8003daa <HAL_ADC_Start+0x72>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e00:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8003e04:	e7db      	b.n	8003dbe <HAL_ADC_Start+0x86>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8003e0c:	d005      	beq.n	8003e1a <HAL_ADC_Start+0xe2>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e0e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003e10:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003e14:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e18:	6562      	str	r2, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 8003e1a:	6899      	ldr	r1, [r3, #8]
 8003e1c:	4a09      	ldr	r2, [pc, #36]	@ (8003e44 <HAL_ADC_Start+0x10c>)
 8003e1e:	400a      	ands	r2, r1
 8003e20:	f042 0204 	orr.w	r2, r2, #4
 8003e24:	609a      	str	r2, [r3, #8]
}
 8003e26:	e004      	b.n	8003e32 <HAL_ADC_Start+0xfa>
      __HAL_UNLOCK(hadc);
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 8003e2e:	e000      	b.n	8003e32 <HAL_ADC_Start+0xfa>
    tmp_hal_status = HAL_BUSY;
 8003e30:	2002      	movs	r0, #2
}
 8003e32:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 8003e34:	2002      	movs	r0, #2
 8003e36:	e7fc      	b.n	8003e32 <HAL_ADC_Start+0xfa>
 8003e38:	40022000 	.word	0x40022000
 8003e3c:	40022100 	.word	0x40022100
 8003e40:	58026300 	.word	0x58026300
 8003e44:	7fffffc0 	.word	0x7fffffc0

08003e48 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e48:	b538      	push	{r3, r4, r5, lr}
 8003e4a:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e4c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003e4e:	6893      	ldr	r3, [r2, #8]
 8003e50:	f013 0302 	ands.w	r3, r3, #2
 8003e54:	d000      	beq.n	8003e58 <ADC_Disable+0x10>
 8003e56:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e58:	6891      	ldr	r1, [r2, #8]
 8003e5a:	f011 0f01 	tst.w	r1, #1
 8003e5e:	d037      	beq.n	8003ed0 <ADC_Disable+0x88>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d137      	bne.n	8003ed4 <ADC_Disable+0x8c>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e64:	6893      	ldr	r3, [r2, #8]
 8003e66:	f003 030d 	and.w	r3, r3, #13
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d009      	beq.n	8003e82 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e6e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003e70:	f043 0310 	orr.w	r3, r3, #16
 8003e74:	6563      	str	r3, [r4, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e76:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	65a3      	str	r3, [r4, #88]	@ 0x58

      return HAL_ERROR;
 8003e7e:	2001      	movs	r0, #1
 8003e80:	e027      	b.n	8003ed2 <ADC_Disable+0x8a>
  MODIFY_REG(ADCx->CR,
 8003e82:	6891      	ldr	r1, [r2, #8]
 8003e84:	4b14      	ldr	r3, [pc, #80]	@ (8003ed8 <ADC_Disable+0x90>)
 8003e86:	400b      	ands	r3, r1
 8003e88:	f043 0302 	orr.w	r3, r3, #2
 8003e8c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	2203      	movs	r2, #3
 8003e92:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e94:	f7ff fb38 	bl	8003508 <HAL_GetTick>
 8003e98:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f013 0f01 	tst.w	r3, #1
 8003ea2:	d013      	beq.n	8003ecc <ADC_Disable+0x84>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ea4:	f7ff fb30 	bl	8003508 <HAL_GetTick>
 8003ea8:	1b40      	subs	r0, r0, r5
 8003eaa:	2802      	cmp	r0, #2
 8003eac:	d9f5      	bls.n	8003e9a <ADC_Disable+0x52>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f013 0f01 	tst.w	r3, #1
 8003eb6:	d0f0      	beq.n	8003e9a <ADC_Disable+0x52>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003eba:	f043 0310 	orr.w	r3, r3, #16
 8003ebe:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	65a3      	str	r3, [r4, #88]	@ 0x58

          return HAL_ERROR;
 8003ec8:	2001      	movs	r0, #1
 8003eca:	e002      	b.n	8003ed2 <ADC_Disable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ecc:	2000      	movs	r0, #0
 8003ece:	e000      	b.n	8003ed2 <ADC_Disable+0x8a>
 8003ed0:	2000      	movs	r0, #0
}
 8003ed2:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	e7fc      	b.n	8003ed2 <ADC_Disable+0x8a>
 8003ed8:	7fffffc0 	.word	0x7fffffc0

08003edc <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003edc:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d018      	beq.n	8003f16 <HAL_ADC_Stop+0x3a>
{
 8003ee4:	b510      	push	{r4, lr}
 8003ee6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003eee:	2103      	movs	r1, #3
 8003ef0:	f7ff fe38 	bl	8003b64 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003ef4:	b118      	cbz	r0, 8003efe <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8003efc:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003efe:	4620      	mov	r0, r4
 8003f00:	f7ff ffa2 	bl	8003e48 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003f04:	2800      	cmp	r0, #0
 8003f06:	d1f6      	bne.n	8003ef6 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8003f08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003f0a:	4b04      	ldr	r3, [pc, #16]	@ (8003f1c <HAL_ADC_Stop+0x40>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	6563      	str	r3, [r4, #84]	@ 0x54
 8003f14:	e7ef      	b.n	8003ef6 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 8003f16:	2002      	movs	r0, #2
}
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	ffffeefe 	.word	0xffffeefe

08003f20 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003f20:	b538      	push	{r3, r4, r5, lr}
 8003f22:	4604      	mov	r4, r0
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003f24:	6803      	ldr	r3, [r0, #0]
 8003f26:	494f      	ldr	r1, [pc, #316]	@ (8004064 <ADC_ConfigureBoostMode+0x144>)
 8003f28:	4a4f      	ldr	r2, [pc, #316]	@ (8004068 <ADC_ConfigureBoostMode+0x148>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	bf18      	it	ne
 8003f2e:	428b      	cmpne	r3, r1
 8003f30:	d123      	bne.n	8003f7a <ADC_ConfigureBoostMode+0x5a>
 8003f32:	4b4e      	ldr	r3, [pc, #312]	@ (800406c <ADC_ConfigureBoostMode+0x14c>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8003f3a:	bf14      	ite	ne
 8003f3c:	2301      	movne	r3, #1
 8003f3e:	2300      	moveq	r3, #0
 8003f40:	b34b      	cbz	r3, 8003f96 <ADC_ConfigureBoostMode+0x76>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003f42:	f005 fa09 	bl	8009358 <HAL_RCC_GetHCLKFreq>
 8003f46:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8003f48:	6863      	ldr	r3, [r4, #4]
 8003f4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f4e:	d01c      	beq.n	8003f8a <ADC_ConfigureBoostMode+0x6a>
 8003f50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f54:	d01d      	beq.n	8003f92 <ADC_ConfigureBoostMode+0x72>
 8003f56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f5a:	d016      	beq.n	8003f8a <ADC_ConfigureBoostMode+0x6a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003f5c:	f7ff faee 	bl	800353c <HAL_GetREVID>
 8003f60:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003f64:	4298      	cmp	r0, r3
 8003f66:	d857      	bhi.n	8004018 <ADC_ConfigureBoostMode+0xf8>
  {
    if (freq > 20000000UL)
 8003f68:	4b41      	ldr	r3, [pc, #260]	@ (8004070 <ADC_ConfigureBoostMode+0x150>)
 8003f6a:	429d      	cmp	r5, r3
 8003f6c:	d94e      	bls.n	800400c <ADC_ConfigureBoostMode+0xec>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003f6e:	6822      	ldr	r2, [r4, #0]
 8003f70:	6893      	ldr	r3, [r2, #8]
 8003f72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f76:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003f78:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8004074 <ADC_ConfigureBoostMode+0x154>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	e7da      	b.n	8003f40 <ADC_ConfigureBoostMode+0x20>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003f8a:	0c1b      	lsrs	r3, r3, #16
 8003f8c:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8003f90:	e7e4      	b.n	8003f5c <ADC_ConfigureBoostMode+0x3c>
        freq /= 4UL;
 8003f92:	0885      	lsrs	r5, r0, #2
        break;
 8003f94:	e7e2      	b.n	8003f5c <ADC_ConfigureBoostMode+0x3c>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003f96:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003f9a:	f006 fb47 	bl	800a62c <HAL_RCCEx_GetPeriphCLKFreq>
 8003f9e:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8003fa0:	6863      	ldr	r3, [r4, #4]
 8003fa2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003fa6:	d02d      	beq.n	8004004 <ADC_ConfigureBoostMode+0xe4>
 8003fa8:	d822      	bhi.n	8003ff0 <ADC_ConfigureBoostMode+0xd0>
 8003faa:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003fae:	d027      	beq.n	8004000 <ADC_ConfigureBoostMode+0xe0>
 8003fb0:	d904      	bls.n	8003fbc <ADC_ConfigureBoostMode+0x9c>
 8003fb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fb6:	d1d1      	bne.n	8003f5c <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 8003fb8:	0945      	lsrs	r5, r0, #5
        break;
 8003fba:	e7cf      	b.n	8003f5c <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8003fbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fc0:	d00d      	beq.n	8003fde <ADC_ConfigureBoostMode+0xbe>
 8003fc2:	d906      	bls.n	8003fd2 <ADC_ConfigureBoostMode+0xb2>
 8003fc4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003fc8:	d009      	beq.n	8003fde <ADC_ConfigureBoostMode+0xbe>
 8003fca:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003fce:	d006      	beq.n	8003fde <ADC_ConfigureBoostMode+0xbe>
 8003fd0:	e7c4      	b.n	8003f5c <ADC_ConfigureBoostMode+0x3c>
 8003fd2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003fd6:	d002      	beq.n	8003fde <ADC_ConfigureBoostMode+0xbe>
 8003fd8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003fdc:	d104      	bne.n	8003fe8 <ADC_ConfigureBoostMode+0xc8>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003fde:	0c9b      	lsrs	r3, r3, #18
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8003fe6:	e7b9      	b.n	8003f5c <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8003fe8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fec:	d0f7      	beq.n	8003fde <ADC_ConfigureBoostMode+0xbe>
 8003fee:	e7b5      	b.n	8003f5c <ADC_ConfigureBoostMode+0x3c>
 8003ff0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003ff4:	d008      	beq.n	8004008 <ADC_ConfigureBoostMode+0xe8>
 8003ff6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003ffa:	d1af      	bne.n	8003f5c <ADC_ConfigureBoostMode+0x3c>
        freq /= 256UL;
 8003ffc:	0a05      	lsrs	r5, r0, #8
        break;
 8003ffe:	e7ad      	b.n	8003f5c <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 8004000:	0905      	lsrs	r5, r0, #4
        break;
 8004002:	e7ab      	b.n	8003f5c <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 8004004:	0985      	lsrs	r5, r0, #6
        break;
 8004006:	e7a9      	b.n	8003f5c <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 8004008:	09c5      	lsrs	r5, r0, #7
        break;
 800400a:	e7a7      	b.n	8003f5c <ADC_ConfigureBoostMode+0x3c>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800400c:	6822      	ldr	r2, [r4, #0]
 800400e:	6893      	ldr	r3, [r2, #8]
 8004010:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004014:	6093      	str	r3, [r2, #8]
 8004016:	e7af      	b.n	8003f78 <ADC_ConfigureBoostMode+0x58>
    if (freq <= 6250000UL)
 8004018:	4b17      	ldr	r3, [pc, #92]	@ (8004078 <ADC_ConfigureBoostMode+0x158>)
 800401a:	429d      	cmp	r5, r3
 800401c:	d805      	bhi.n	800402a <ADC_ConfigureBoostMode+0x10a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800401e:	6822      	ldr	r2, [r4, #0]
 8004020:	6893      	ldr	r3, [r2, #8]
 8004022:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004026:	6093      	str	r3, [r2, #8]
 8004028:	e7a6      	b.n	8003f78 <ADC_ConfigureBoostMode+0x58>
    else if (freq <= 12500000UL)
 800402a:	4b14      	ldr	r3, [pc, #80]	@ (800407c <ADC_ConfigureBoostMode+0x15c>)
 800402c:	429d      	cmp	r5, r3
 800402e:	d807      	bhi.n	8004040 <ADC_ConfigureBoostMode+0x120>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004030:	6822      	ldr	r2, [r4, #0]
 8004032:	6893      	ldr	r3, [r2, #8]
 8004034:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800403c:	6093      	str	r3, [r2, #8]
 800403e:	e79b      	b.n	8003f78 <ADC_ConfigureBoostMode+0x58>
    else if (freq <= 25000000UL)
 8004040:	4b0f      	ldr	r3, [pc, #60]	@ (8004080 <ADC_ConfigureBoostMode+0x160>)
 8004042:	429d      	cmp	r5, r3
 8004044:	d807      	bhi.n	8004056 <ADC_ConfigureBoostMode+0x136>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004046:	6822      	ldr	r2, [r4, #0]
 8004048:	6893      	ldr	r3, [r2, #8]
 800404a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800404e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004052:	6093      	str	r3, [r2, #8]
 8004054:	e790      	b.n	8003f78 <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004056:	6822      	ldr	r2, [r4, #0]
 8004058:	6893      	ldr	r3, [r2, #8]
 800405a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800405e:	6093      	str	r3, [r2, #8]
}
 8004060:	e78a      	b.n	8003f78 <ADC_ConfigureBoostMode+0x58>
 8004062:	bf00      	nop
 8004064:	40022000 	.word	0x40022000
 8004068:	40022100 	.word	0x40022100
 800406c:	40022300 	.word	0x40022300
 8004070:	01312d00 	.word	0x01312d00
 8004074:	58026300 	.word	0x58026300
 8004078:	00bebc21 	.word	0x00bebc21
 800407c:	017d7841 	.word	0x017d7841
 8004080:	02faf081 	.word	0x02faf081

08004084 <HAL_ADC_Init>:
{
 8004084:	b530      	push	{r4, r5, lr}
 8004086:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8004088:	2300      	movs	r3, #0
 800408a:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 800408c:	2800      	cmp	r0, #0
 800408e:	f000 810a 	beq.w	80042a6 <HAL_ADC_Init+0x222>
 8004092:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004094:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8004096:	b1eb      	cbz	r3, 80040d4 <HAL_ADC_Init+0x50>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004098:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	f012 5f00 	tst.w	r2, #536870912	@ 0x20000000
 80040a0:	d003      	beq.n	80040aa <HAL_ADC_Init+0x26>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80040a2:	6899      	ldr	r1, [r3, #8]
 80040a4:	4a81      	ldr	r2, [pc, #516]	@ (80042ac <HAL_ADC_Init+0x228>)
 80040a6:	400a      	ands	r2, r1
 80040a8:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80040aa:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 80040b2:	d11c      	bne.n	80040ee <HAL_ADC_Init+0x6a>
  MODIFY_REG(ADCx->CR,
 80040b4:	6899      	ldr	r1, [r3, #8]
 80040b6:	4a7e      	ldr	r2, [pc, #504]	@ (80042b0 <HAL_ADC_Init+0x22c>)
 80040b8:	400a      	ands	r2, r1
 80040ba:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80040be:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040c0:	4b7c      	ldr	r3, [pc, #496]	@ (80042b4 <HAL_ADC_Init+0x230>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	099b      	lsrs	r3, r3, #6
 80040c6:	4a7c      	ldr	r2, [pc, #496]	@ (80042b8 <HAL_ADC_Init+0x234>)
 80040c8:	fba2 2303 	umull	r2, r3, r2, r3
 80040cc:	099b      	lsrs	r3, r3, #6
 80040ce:	3301      	adds	r3, #1
 80040d0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80040d2:	e009      	b.n	80040e8 <HAL_ADC_Init+0x64>
    HAL_ADC_MspInit(hadc);
 80040d4:	f7fe f9d4 	bl	8002480 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80040d8:	2300      	movs	r3, #0
 80040da:	65a3      	str	r3, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 80040dc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 80040e0:	e7da      	b.n	8004098 <HAL_ADC_Init+0x14>
      wait_loop_index--;
 80040e2:	9b01      	ldr	r3, [sp, #4]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80040e8:	9b01      	ldr	r3, [sp, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f9      	bne.n	80040e2 <HAL_ADC_Init+0x5e>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80040ee:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80040f0:	6893      	ldr	r3, [r2, #8]
 80040f2:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80040f6:	f040 8099 	bne.w	800422c <HAL_ADC_Init+0x1a8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040fa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80040fc:	f043 0310 	orr.w	r3, r3, #16
 8004100:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004102:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800410a:	2501      	movs	r5, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800410c:	6893      	ldr	r3, [r2, #8]
 800410e:	f013 0304 	ands.w	r3, r3, #4
 8004112:	d000      	beq.n	8004116 <HAL_ADC_Init+0x92>
 8004114:	2301      	movs	r3, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004116:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8004118:	f011 0f10 	tst.w	r1, #16
 800411c:	f040 80bb 	bne.w	8004296 <HAL_ADC_Init+0x212>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004120:	2b00      	cmp	r3, #0
 8004122:	f040 80b8 	bne.w	8004296 <HAL_ADC_Init+0x212>
    ADC_STATE_CLR_SET(hadc->State,
 8004126:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004128:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800412c:	f043 0302 	orr.w	r3, r3, #2
 8004130:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004132:	6893      	ldr	r3, [r2, #8]
 8004134:	f013 0f01 	tst.w	r3, #1
 8004138:	d11e      	bne.n	8004178 <HAL_ADC_Init+0xf4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800413a:	4960      	ldr	r1, [pc, #384]	@ (80042bc <HAL_ADC_Init+0x238>)
 800413c:	4b60      	ldr	r3, [pc, #384]	@ (80042c0 <HAL_ADC_Init+0x23c>)
 800413e:	429a      	cmp	r2, r3
 8004140:	bf18      	it	ne
 8004142:	428a      	cmpne	r2, r1
 8004144:	bf0c      	ite	eq
 8004146:	2201      	moveq	r2, #1
 8004148:	2200      	movne	r2, #0
 800414a:	d171      	bne.n	8004230 <HAL_ADC_Init+0x1ac>
 800414c:	6889      	ldr	r1, [r1, #8]
 800414e:	f011 0101 	ands.w	r1, r1, #1
 8004152:	d000      	beq.n	8004156 <HAL_ADC_Init+0xd2>
 8004154:	2101      	movs	r1, #1
 8004156:	4b5a      	ldr	r3, [pc, #360]	@ (80042c0 <HAL_ADC_Init+0x23c>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f013 0301 	ands.w	r3, r3, #1
 800415e:	d000      	beq.n	8004162 <HAL_ADC_Init+0xde>
 8004160:	2301      	movs	r3, #1
 8004162:	430b      	orrs	r3, r1
 8004164:	d108      	bne.n	8004178 <HAL_ADC_Init+0xf4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004166:	2a00      	cmp	r2, #0
 8004168:	d068      	beq.n	800423c <HAL_ADC_Init+0x1b8>
 800416a:	4956      	ldr	r1, [pc, #344]	@ (80042c4 <HAL_ADC_Init+0x240>)
 800416c:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800416e:	688a      	ldr	r2, [r1, #8]
 8004170:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 8004174:	4313      	orrs	r3, r2
 8004176:	608b      	str	r3, [r1, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004178:	f7ff f9e0 	bl	800353c <HAL_GetREVID>
 800417c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8004180:	4298      	cmp	r0, r3
 8004182:	d902      	bls.n	800418a <HAL_ADC_Init+0x106>
 8004184:	68a3      	ldr	r3, [r4, #8]
 8004186:	2b10      	cmp	r3, #16
 8004188:	d05a      	beq.n	8004240 <HAL_ADC_Init+0x1bc>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800418a:	7d62      	ldrb	r2, [r4, #21]
                  hadc->Init.Overrun                                                    |
 800418c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800418e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                  hadc->Init.Resolution                                                 |
 8004192:	68a2      	ldr	r2, [r4, #8]
                  hadc->Init.Overrun                                                    |
 8004194:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004196:	7f22      	ldrb	r2, [r4, #28]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800419c:	7f22      	ldrb	r2, [r4, #28]
 800419e:	2a01      	cmp	r2, #1
 80041a0:	d059      	beq.n	8004256 <HAL_ADC_Init+0x1d2>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041a2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80041a4:	b122      	cbz	r2, 80041b0 <HAL_ADC_Init+0x12c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041a6:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80041aa:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80041ac:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041ae:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80041b0:	6821      	ldr	r1, [r4, #0]
 80041b2:	68c8      	ldr	r0, [r1, #12]
 80041b4:	4a44      	ldr	r2, [pc, #272]	@ (80042c8 <HAL_ADC_Init+0x244>)
 80041b6:	4002      	ands	r2, r0
 80041b8:	431a      	orrs	r2, r3
 80041ba:	60ca      	str	r2, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041bc:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041be:	688a      	ldr	r2, [r1, #8]
 80041c0:	f012 0204 	ands.w	r2, r2, #4
 80041c4:	d000      	beq.n	80041c8 <HAL_ADC_Init+0x144>
 80041c6:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80041c8:	688b      	ldr	r3, [r1, #8]
 80041ca:	f013 0308 	ands.w	r3, r3, #8
 80041ce:	d000      	beq.n	80041d2 <HAL_ADC_Init+0x14e>
 80041d0:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	d11b      	bne.n	800420e <HAL_ADC_Init+0x18a>
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80041d6:	7d22      	ldrb	r2, [r4, #20]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80041d8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
      tmpCFGR = (
 80041da:	ea43 3282 	orr.w	r2, r3, r2, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80041de:	68c8      	ldr	r0, [r1, #12]
 80041e0:	4b3a      	ldr	r3, [pc, #232]	@ (80042cc <HAL_ADC_Init+0x248>)
 80041e2:	4003      	ands	r3, r0
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60cb      	str	r3, [r1, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80041e8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d037      	beq.n	8004260 <HAL_ADC_Init+0x1dc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80041f0:	6822      	ldr	r2, [r4, #0]
 80041f2:	6913      	ldr	r3, [r2, #16]
 80041f4:	f023 0301 	bic.w	r3, r3, #1
 80041f8:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80041fa:	6822      	ldr	r2, [r4, #0]
 80041fc:	6913      	ldr	r3, [r2, #16]
 80041fe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004202:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004204:	430b      	orrs	r3, r1
 8004206:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8004208:	4620      	mov	r0, r4
 800420a:	f7ff fe89 	bl	8003f20 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800420e:	68e3      	ldr	r3, [r4, #12]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d037      	beq.n	8004284 <HAL_ADC_Init+0x200>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004214:	6822      	ldr	r2, [r4, #0]
 8004216:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004218:	f023 030f 	bic.w	r3, r3, #15
 800421c:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800421e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004220:	f023 0303 	bic.w	r3, r3, #3
 8004224:	f043 0301 	orr.w	r3, r3, #1
 8004228:	6563      	str	r3, [r4, #84]	@ 0x54
 800422a:	e039      	b.n	80042a0 <HAL_ADC_Init+0x21c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800422c:	2500      	movs	r5, #0
 800422e:	e76d      	b.n	800410c <HAL_ADC_Init+0x88>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004230:	4b27      	ldr	r3, [pc, #156]	@ (80042d0 <HAL_ADC_Init+0x24c>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f013 0f01 	tst.w	r3, #1
 8004238:	d19e      	bne.n	8004178 <HAL_ADC_Init+0xf4>
 800423a:	e794      	b.n	8004166 <HAL_ADC_Init+0xe2>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800423c:	4925      	ldr	r1, [pc, #148]	@ (80042d4 <HAL_ADC_Init+0x250>)
 800423e:	e795      	b.n	800416c <HAL_ADC_Init+0xe8>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004240:	7d61      	ldrb	r1, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8004242:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004244:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
                  hadc->Init.Overrun                                                    |
 8004248:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800424a:	7f22      	ldrb	r2, [r4, #28]
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800424c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004250:	f043 030c 	orr.w	r3, r3, #12
 8004254:	e7a2      	b.n	800419c <HAL_ADC_Init+0x118>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004256:	6a22      	ldr	r2, [r4, #32]
 8004258:	3a01      	subs	r2, #1
 800425a:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800425e:	e7a0      	b.n	80041a2 <HAL_ADC_Init+0x11e>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004260:	6820      	ldr	r0, [r4, #0]
 8004262:	6902      	ldr	r2, [r0, #16]
 8004264:	4b1c      	ldr	r3, [pc, #112]	@ (80042d8 <HAL_ADC_Init+0x254>)
 8004266:	4013      	ands	r3, r2
 8004268:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800426a:	1e51      	subs	r1, r2, #1
 800426c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800426e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004272:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004274:	430a      	orrs	r2, r1
 8004276:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004278:	430a      	orrs	r2, r1
 800427a:	4313      	orrs	r3, r2
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	6103      	str	r3, [r0, #16]
 8004282:	e7ba      	b.n	80041fa <HAL_ADC_Init+0x176>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004284:	6821      	ldr	r1, [r4, #0]
 8004286:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8004288:	f023 030f 	bic.w	r3, r3, #15
 800428c:	69a2      	ldr	r2, [r4, #24]
 800428e:	3a01      	subs	r2, #1
 8004290:	4313      	orrs	r3, r2
 8004292:	630b      	str	r3, [r1, #48]	@ 0x30
 8004294:	e7c3      	b.n	800421e <HAL_ADC_Init+0x19a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004296:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004298:	f043 0310 	orr.w	r3, r3, #16
 800429c:	6563      	str	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 800429e:	2501      	movs	r5, #1
}
 80042a0:	4628      	mov	r0, r5
 80042a2:	b003      	add	sp, #12
 80042a4:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80042a6:	2501      	movs	r5, #1
 80042a8:	e7fa      	b.n	80042a0 <HAL_ADC_Init+0x21c>
 80042aa:	bf00      	nop
 80042ac:	5fffffc0 	.word	0x5fffffc0
 80042b0:	6fffffc0 	.word	0x6fffffc0
 80042b4:	24000004 	.word	0x24000004
 80042b8:	053e2d63 	.word	0x053e2d63
 80042bc:	40022000 	.word	0x40022000
 80042c0:	40022100 	.word	0x40022100
 80042c4:	40022300 	.word	0x40022300
 80042c8:	fff0c003 	.word	0xfff0c003
 80042cc:	ffffbffc 	.word	0xffffbffc
 80042d0:	58026000 	.word	0x58026000
 80042d4:	58026300 	.word	0x58026300
 80042d8:	fc00f81e 	.word	0xfc00f81e

080042dc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042e4:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d043      	beq.n	8004374 <HAL_ADCEx_Calibration_Start+0x98>
 80042ec:	4604      	mov	r4, r0
 80042ee:	460d      	mov	r5, r1
 80042f0:	4616      	mov	r6, r2
 80042f2:	2301      	movs	r3, #1
 80042f4:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80042f8:	f7ff fda6 	bl	8003e48 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80042fc:	2800      	cmp	r0, #0
 80042fe:	d130      	bne.n	8004362 <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004300:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004302:	4b1d      	ldr	r3, [pc, #116]	@ (8004378 <HAL_ADCEx_Calibration_Start+0x9c>)
 8004304:	4013      	ands	r3, r2
 8004306:	f043 0302 	orr.w	r3, r3, #2
 800430a:	6563      	str	r3, [r4, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800430c:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800430e:	688a      	ldr	r2, [r1, #8]
 8004310:	4b1a      	ldr	r3, [pc, #104]	@ (800437c <HAL_ADCEx_Calibration_Start+0xa0>)
 8004312:	4013      	ands	r3, r2
 8004314:	f405 3580 	and.w	r5, r5, #65536	@ 0x10000
 8004318:	f006 4680 	and.w	r6, r6, #1073741824	@ 0x40000000
 800431c:	ea45 0206 	orr.w	r2, r5, r6
 8004320:	4313      	orrs	r3, r2
 8004322:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004326:	608b      	str	r3, [r1, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004328:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	db06      	blt.n	800433e <HAL_ADCEx_Calibration_Start+0x62>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004330:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004332:	f023 0303 	bic.w	r3, r3, #3
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	6563      	str	r3, [r4, #84]	@ 0x54
 800433c:	e015      	b.n	800436a <HAL_ADCEx_Calibration_Start+0x8e>
      wait_loop_index++;
 800433e:	9b01      	ldr	r3, [sp, #4]
 8004340:	3301      	adds	r3, #1
 8004342:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004344:	9a01      	ldr	r2, [sp, #4]
 8004346:	4b0e      	ldr	r3, [pc, #56]	@ (8004380 <HAL_ADCEx_Calibration_Start+0xa4>)
 8004348:	429a      	cmp	r2, r3
 800434a:	d3ed      	bcc.n	8004328 <HAL_ADCEx_Calibration_Start+0x4c>
        ADC_STATE_CLR_SET(hadc->State,
 800434c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800434e:	f023 0312 	bic.w	r3, r3, #18
 8004352:	f043 0310 	orr.w	r3, r3, #16
 8004356:	6563      	str	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 8004358:	2300      	movs	r3, #0
 800435a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_ERROR;
 800435e:	2001      	movs	r0, #1
 8004360:	e006      	b.n	8004370 <HAL_ADCEx_Calibration_Start+0x94>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004362:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004364:	f043 0310 	orr.w	r3, r3, #16
 8004368:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800436a:	2300      	movs	r3, #0
 800436c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8004370:	b002      	add	sp, #8
 8004372:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8004374:	2002      	movs	r0, #2
 8004376:	e7fb      	b.n	8004370 <HAL_ADCEx_Calibration_Start+0x94>
 8004378:	ffffeefd 	.word	0xffffeefd
 800437c:	3ffeffc0 	.word	0x3ffeffc0
 8004380:	25c3f800 	.word	0x25c3f800

08004384 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004384:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8004388:	2a01      	cmp	r2, #1
 800438a:	f000 8096 	beq.w	80044ba <HAL_ADCEx_MultiModeConfigChannel+0x136>
{
 800438e:	b430      	push	{r4, r5}
 8004390:	b09a      	sub	sp, #104	@ 0x68
 8004392:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004394:	2201      	movs	r2, #1
 8004396:	f880 2050 	strb.w	r2, [r0, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800439a:	2200      	movs	r2, #0
 800439c:	9216      	str	r2, [sp, #88]	@ 0x58
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800439e:	9217      	str	r2, [sp, #92]	@ 0x5c

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043a0:	6800      	ldr	r0, [r0, #0]
 80043a2:	4a47      	ldr	r2, [pc, #284]	@ (80044c0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80043a4:	4290      	cmp	r0, r2
 80043a6:	d036      	beq.n	8004416 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80043a8:	2200      	movs	r2, #0
 80043aa:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 80043ac:	9a01      	ldr	r2, [sp, #4]
 80043ae:	2a00      	cmp	r2, #0
 80043b0:	d035      	beq.n	800441e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043b2:	6892      	ldr	r2, [r2, #8]
 80043b4:	f012 0204 	ands.w	r2, r2, #4
 80043b8:	d000      	beq.n	80043bc <HAL_ADCEx_MultiModeConfigChannel+0x38>
 80043ba:	2201      	movs	r2, #1
 80043bc:	6884      	ldr	r4, [r0, #8]
 80043be:	f014 0f04 	tst.w	r4, #4
 80043c2:	d16b      	bne.n	800449c <HAL_ADCEx_MultiModeConfigChannel+0x118>
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 80043c4:	2a00      	cmp	r2, #0
 80043c6:	d169      	bne.n	800449c <HAL_ADCEx_MultiModeConfigChannel+0x118>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80043c8:	4c3d      	ldr	r4, [pc, #244]	@ (80044c0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80043ca:	4a3e      	ldr	r2, [pc, #248]	@ (80044c4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80043cc:	4290      	cmp	r0, r2
 80043ce:	bf18      	it	ne
 80043d0:	42a0      	cmpne	r0, r4
 80043d2:	d12d      	bne.n	8004430 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80043d4:	f502 7200 	add.w	r2, r2, #512	@ 0x200

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043d8:	6808      	ldr	r0, [r1, #0]
 80043da:	2800      	cmp	r0, #0
 80043dc:	d039      	beq.n	8004452 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80043de:	6890      	ldr	r0, [r2, #8]
 80043e0:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 80043e4:	684c      	ldr	r4, [r1, #4]
 80043e6:	4320      	orrs	r0, r4
 80043e8:	6090      	str	r0, [r2, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	4d34      	ldr	r5, [pc, #208]	@ (80044c0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80043ee:	4c35      	ldr	r4, [pc, #212]	@ (80044c4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80043f0:	42a0      	cmp	r0, r4
 80043f2:	bf18      	it	ne
 80043f4:	42a8      	cmpne	r0, r5
 80043f6:	d11d      	bne.n	8004434 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043f8:	68ac      	ldr	r4, [r5, #8]
 80043fa:	f014 0401 	ands.w	r4, r4, #1
 80043fe:	d000      	beq.n	8004402 <HAL_ADCEx_MultiModeConfigChannel+0x7e>
 8004400:	2401      	movs	r4, #1
 8004402:	4830      	ldr	r0, [pc, #192]	@ (80044c4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004404:	6880      	ldr	r0, [r0, #8]
 8004406:	f010 0001 	ands.w	r0, r0, #1
 800440a:	d000      	beq.n	800440e <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 800440c:	2001      	movs	r0, #1
 800440e:	4320      	orrs	r0, r4
 8004410:	d015      	beq.n	800443e <HAL_ADCEx_MultiModeConfigChannel+0xba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004412:	2000      	movs	r0, #0
 8004414:	e047      	b.n	80044a6 <HAL_ADCEx_MultiModeConfigChannel+0x122>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004416:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 800441a:	9201      	str	r2, [sp, #4]
 800441c:	e7c6      	b.n	80043ac <HAL_ADCEx_MultiModeConfigChannel+0x28>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800441e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004420:	f042 0220 	orr.w	r2, r2, #32
 8004424:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800442c:	2001      	movs	r0, #1
 800442e:	e03d      	b.n	80044ac <HAL_ADCEx_MultiModeConfigChannel+0x128>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004430:	4a25      	ldr	r2, [pc, #148]	@ (80044c8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004432:	e7d1      	b.n	80043d8 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 8004434:	4825      	ldr	r0, [pc, #148]	@ (80044cc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8004436:	6880      	ldr	r0, [r0, #8]
 8004438:	f010 0f01 	tst.w	r0, #1
 800443c:	d139      	bne.n	80044b2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800443e:	6894      	ldr	r4, [r2, #8]
 8004440:	4823      	ldr	r0, [pc, #140]	@ (80044d0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004442:	4020      	ands	r0, r4
 8004444:	680c      	ldr	r4, [r1, #0]
 8004446:	6889      	ldr	r1, [r1, #8]
 8004448:	4321      	orrs	r1, r4
 800444a:	4308      	orrs	r0, r1
 800444c:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800444e:	2000      	movs	r0, #0
 8004450:	e029      	b.n	80044a6 <HAL_ADCEx_MultiModeConfigChannel+0x122>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004452:	6891      	ldr	r1, [r2, #8]
 8004454:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 8004458:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800445a:	6819      	ldr	r1, [r3, #0]
 800445c:	4c18      	ldr	r4, [pc, #96]	@ (80044c0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800445e:	4819      	ldr	r0, [pc, #100]	@ (80044c4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004460:	4281      	cmp	r1, r0
 8004462:	bf18      	it	ne
 8004464:	42a1      	cmpne	r1, r4
 8004466:	d10e      	bne.n	8004486 <HAL_ADCEx_MultiModeConfigChannel+0x102>
 8004468:	68a0      	ldr	r0, [r4, #8]
 800446a:	f010 0001 	ands.w	r0, r0, #1
 800446e:	d000      	beq.n	8004472 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004470:	2001      	movs	r0, #1
 8004472:	4914      	ldr	r1, [pc, #80]	@ (80044c4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004474:	6889      	ldr	r1, [r1, #8]
 8004476:	f011 0101 	ands.w	r1, r1, #1
 800447a:	d000      	beq.n	800447e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800447c:	2101      	movs	r1, #1
 800447e:	4301      	orrs	r1, r0
 8004480:	d006      	beq.n	8004490 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004482:	2000      	movs	r0, #0
 8004484:	e00f      	b.n	80044a6 <HAL_ADCEx_MultiModeConfigChannel+0x122>
 8004486:	4911      	ldr	r1, [pc, #68]	@ (80044cc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8004488:	6889      	ldr	r1, [r1, #8]
 800448a:	f011 0f01 	tst.w	r1, #1
 800448e:	d112      	bne.n	80044b6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004490:	6890      	ldr	r0, [r2, #8]
 8004492:	490f      	ldr	r1, [pc, #60]	@ (80044d0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004494:	4001      	ands	r1, r0
 8004496:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004498:	2000      	movs	r0, #0
 800449a:	e004      	b.n	80044a6 <HAL_ADCEx_MultiModeConfigChannel+0x122>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800449c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800449e:	f042 0220 	orr.w	r2, r2, #32
 80044a2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80044a4:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80044ac:	b01a      	add	sp, #104	@ 0x68
 80044ae:	bc30      	pop	{r4, r5}
 80044b0:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044b2:	2000      	movs	r0, #0
 80044b4:	e7f7      	b.n	80044a6 <HAL_ADCEx_MultiModeConfigChannel+0x122>
 80044b6:	2000      	movs	r0, #0
 80044b8:	e7f5      	b.n	80044a6 <HAL_ADCEx_MultiModeConfigChannel+0x122>
  __HAL_LOCK(hadc);
 80044ba:	2002      	movs	r0, #2
}
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40022000 	.word	0x40022000
 80044c4:	40022100 	.word	0x40022100
 80044c8:	58026300 	.word	0x58026300
 80044cc:	58026000 	.word	0x58026000
 80044d0:	fffff0e0 	.word	0xfffff0e0

080044d4 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80044d4:	2800      	cmp	r0, #0
 80044d6:	db07      	blt.n	80044e8 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044d8:	f000 021f 	and.w	r2, r0, #31
 80044dc:	0940      	lsrs	r0, r0, #5
 80044de:	2301      	movs	r3, #1
 80044e0:	4093      	lsls	r3, r2
 80044e2:	4a02      	ldr	r2, [pc, #8]	@ (80044ec <__NVIC_EnableIRQ+0x18>)
 80044e4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	e000e100 	.word	0xe000e100

080044f0 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80044f0:	2800      	cmp	r0, #0
 80044f2:	db04      	blt.n	80044fe <__NVIC_SetPriority+0xe>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f4:	0109      	lsls	r1, r1, #4
 80044f6:	b2c9      	uxtb	r1, r1
 80044f8:	4b04      	ldr	r3, [pc, #16]	@ (800450c <__NVIC_SetPriority+0x1c>)
 80044fa:	5419      	strb	r1, [r3, r0]
 80044fc:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044fe:	f000 000f 	and.w	r0, r0, #15
 8004502:	0109      	lsls	r1, r1, #4
 8004504:	b2c9      	uxtb	r1, r1
 8004506:	4b02      	ldr	r3, [pc, #8]	@ (8004510 <__NVIC_SetPriority+0x20>)
 8004508:	5419      	strb	r1, [r3, r0]
  }
}
 800450a:	4770      	bx	lr
 800450c:	e000e400 	.word	0xe000e400
 8004510:	e000ed14 	.word	0xe000ed14

08004514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004514:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004516:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800451a:	f1c0 0c07 	rsb	ip, r0, #7
 800451e:	f1bc 0f04 	cmp.w	ip, #4
 8004522:	bf28      	it	cs
 8004524:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004528:	1d03      	adds	r3, r0, #4
 800452a:	2b06      	cmp	r3, #6
 800452c:	d90f      	bls.n	800454e <NVIC_EncodePriority+0x3a>
 800452e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004530:	f04f 3eff 	mov.w	lr, #4294967295
 8004534:	fa0e f00c 	lsl.w	r0, lr, ip
 8004538:	ea21 0100 	bic.w	r1, r1, r0
 800453c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800453e:	fa0e fe03 	lsl.w	lr, lr, r3
 8004542:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8004546:	ea41 0002 	orr.w	r0, r1, r2
 800454a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800454e:	2300      	movs	r3, #0
 8004550:	e7ee      	b.n	8004530 <NVIC_EncodePriority+0x1c>
	...

08004554 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004554:	4906      	ldr	r1, [pc, #24]	@ (8004570 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8004556:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004558:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800455c:	041b      	lsls	r3, r3, #16
 800455e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004560:	0200      	lsls	r0, r0, #8
 8004562:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004566:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004568:	4a02      	ldr	r2, [pc, #8]	@ (8004574 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800456a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800456c:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800456e:	4770      	bx	lr
 8004570:	e000ed00 	.word	0xe000ed00
 8004574:	05fa0000 	.word	0x05fa0000

08004578 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004578:	b510      	push	{r4, lr}
 800457a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800457c:	4b05      	ldr	r3, [pc, #20]	@ (8004594 <HAL_NVIC_SetPriority+0x1c>)
 800457e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004580:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004584:	f7ff ffc6 	bl	8004514 <NVIC_EncodePriority>
 8004588:	4601      	mov	r1, r0
 800458a:	4620      	mov	r0, r4
 800458c:	f7ff ffb0 	bl	80044f0 <__NVIC_SetPriority>
}
 8004590:	bd10      	pop	{r4, pc}
 8004592:	bf00      	nop
 8004594:	e000ed00 	.word	0xe000ed00

08004598 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004598:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800459a:	f7ff ff9b 	bl	80044d4 <__NVIC_EnableIRQ>
}
 800459e:	bd08      	pop	{r3, pc}

080045a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045a0:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045a2:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045a4:	6804      	ldr	r4, [r0, #0]
 80045a6:	4e66      	ldr	r6, [pc, #408]	@ (8004740 <DMA_SetConfig+0x1a0>)
 80045a8:	4d66      	ldr	r5, [pc, #408]	@ (8004744 <DMA_SetConfig+0x1a4>)
 80045aa:	42ac      	cmp	r4, r5
 80045ac:	bf18      	it	ne
 80045ae:	42b4      	cmpne	r4, r6
 80045b0:	d042      	beq.n	8004638 <DMA_SetConfig+0x98>
 80045b2:	3518      	adds	r5, #24
 80045b4:	42ac      	cmp	r4, r5
 80045b6:	d03f      	beq.n	8004638 <DMA_SetConfig+0x98>
 80045b8:	3518      	adds	r5, #24
 80045ba:	42ac      	cmp	r4, r5
 80045bc:	d03c      	beq.n	8004638 <DMA_SetConfig+0x98>
 80045be:	3518      	adds	r5, #24
 80045c0:	42ac      	cmp	r4, r5
 80045c2:	d039      	beq.n	8004638 <DMA_SetConfig+0x98>
 80045c4:	3518      	adds	r5, #24
 80045c6:	42ac      	cmp	r4, r5
 80045c8:	d036      	beq.n	8004638 <DMA_SetConfig+0x98>
 80045ca:	3518      	adds	r5, #24
 80045cc:	42ac      	cmp	r4, r5
 80045ce:	d033      	beq.n	8004638 <DMA_SetConfig+0x98>
 80045d0:	3518      	adds	r5, #24
 80045d2:	42ac      	cmp	r4, r5
 80045d4:	d030      	beq.n	8004638 <DMA_SetConfig+0x98>
 80045d6:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 80045da:	42ac      	cmp	r4, r5
 80045dc:	d02c      	beq.n	8004638 <DMA_SetConfig+0x98>
 80045de:	3518      	adds	r5, #24
 80045e0:	42ac      	cmp	r4, r5
 80045e2:	d029      	beq.n	8004638 <DMA_SetConfig+0x98>
 80045e4:	3518      	adds	r5, #24
 80045e6:	42ac      	cmp	r4, r5
 80045e8:	d026      	beq.n	8004638 <DMA_SetConfig+0x98>
 80045ea:	3518      	adds	r5, #24
 80045ec:	42ac      	cmp	r4, r5
 80045ee:	d023      	beq.n	8004638 <DMA_SetConfig+0x98>
 80045f0:	3518      	adds	r5, #24
 80045f2:	42ac      	cmp	r4, r5
 80045f4:	d020      	beq.n	8004638 <DMA_SetConfig+0x98>
 80045f6:	3518      	adds	r5, #24
 80045f8:	42ac      	cmp	r4, r5
 80045fa:	d01d      	beq.n	8004638 <DMA_SetConfig+0x98>
 80045fc:	3518      	adds	r5, #24
 80045fe:	42ac      	cmp	r4, r5
 8004600:	d01a      	beq.n	8004638 <DMA_SetConfig+0x98>
 8004602:	3518      	adds	r5, #24
 8004604:	42ac      	cmp	r4, r5
 8004606:	d017      	beq.n	8004638 <DMA_SetConfig+0x98>
 8004608:	4d4f      	ldr	r5, [pc, #316]	@ (8004748 <DMA_SetConfig+0x1a8>)
 800460a:	42ac      	cmp	r4, r5
 800460c:	d014      	beq.n	8004638 <DMA_SetConfig+0x98>
 800460e:	3514      	adds	r5, #20
 8004610:	42ac      	cmp	r4, r5
 8004612:	d011      	beq.n	8004638 <DMA_SetConfig+0x98>
 8004614:	3514      	adds	r5, #20
 8004616:	42ac      	cmp	r4, r5
 8004618:	d00e      	beq.n	8004638 <DMA_SetConfig+0x98>
 800461a:	3514      	adds	r5, #20
 800461c:	42ac      	cmp	r4, r5
 800461e:	d00b      	beq.n	8004638 <DMA_SetConfig+0x98>
 8004620:	3514      	adds	r5, #20
 8004622:	42ac      	cmp	r4, r5
 8004624:	d008      	beq.n	8004638 <DMA_SetConfig+0x98>
 8004626:	3514      	adds	r5, #20
 8004628:	42ac      	cmp	r4, r5
 800462a:	d005      	beq.n	8004638 <DMA_SetConfig+0x98>
 800462c:	3514      	adds	r5, #20
 800462e:	42ac      	cmp	r4, r5
 8004630:	d002      	beq.n	8004638 <DMA_SetConfig+0x98>
 8004632:	3514      	adds	r5, #20
 8004634:	42ac      	cmp	r4, r5
 8004636:	d107      	bne.n	8004648 <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004638:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 800463a:	6e85      	ldr	r5, [r0, #104]	@ 0x68
 800463c:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800463e:	6ec4      	ldr	r4, [r0, #108]	@ 0x6c
 8004640:	b114      	cbz	r4, 8004648 <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004642:	6f04      	ldr	r4, [r0, #112]	@ 0x70
 8004644:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 8004646:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004648:	6804      	ldr	r4, [r0, #0]
 800464a:	4e3d      	ldr	r6, [pc, #244]	@ (8004740 <DMA_SetConfig+0x1a0>)
 800464c:	4d3d      	ldr	r5, [pc, #244]	@ (8004744 <DMA_SetConfig+0x1a4>)
 800464e:	42ac      	cmp	r4, r5
 8004650:	bf18      	it	ne
 8004652:	42b4      	cmpne	r4, r6
 8004654:	d052      	beq.n	80046fc <DMA_SetConfig+0x15c>
 8004656:	3518      	adds	r5, #24
 8004658:	42ac      	cmp	r4, r5
 800465a:	d04f      	beq.n	80046fc <DMA_SetConfig+0x15c>
 800465c:	3518      	adds	r5, #24
 800465e:	42ac      	cmp	r4, r5
 8004660:	d04c      	beq.n	80046fc <DMA_SetConfig+0x15c>
 8004662:	3518      	adds	r5, #24
 8004664:	42ac      	cmp	r4, r5
 8004666:	d049      	beq.n	80046fc <DMA_SetConfig+0x15c>
 8004668:	3518      	adds	r5, #24
 800466a:	42ac      	cmp	r4, r5
 800466c:	d046      	beq.n	80046fc <DMA_SetConfig+0x15c>
 800466e:	3518      	adds	r5, #24
 8004670:	42ac      	cmp	r4, r5
 8004672:	d043      	beq.n	80046fc <DMA_SetConfig+0x15c>
 8004674:	3518      	adds	r5, #24
 8004676:	42ac      	cmp	r4, r5
 8004678:	d040      	beq.n	80046fc <DMA_SetConfig+0x15c>
 800467a:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 800467e:	42ac      	cmp	r4, r5
 8004680:	d03c      	beq.n	80046fc <DMA_SetConfig+0x15c>
 8004682:	3518      	adds	r5, #24
 8004684:	42ac      	cmp	r4, r5
 8004686:	d039      	beq.n	80046fc <DMA_SetConfig+0x15c>
 8004688:	3518      	adds	r5, #24
 800468a:	42ac      	cmp	r4, r5
 800468c:	d036      	beq.n	80046fc <DMA_SetConfig+0x15c>
 800468e:	3518      	adds	r5, #24
 8004690:	42ac      	cmp	r4, r5
 8004692:	d033      	beq.n	80046fc <DMA_SetConfig+0x15c>
 8004694:	3518      	adds	r5, #24
 8004696:	42ac      	cmp	r4, r5
 8004698:	d030      	beq.n	80046fc <DMA_SetConfig+0x15c>
 800469a:	3518      	adds	r5, #24
 800469c:	42ac      	cmp	r4, r5
 800469e:	d02d      	beq.n	80046fc <DMA_SetConfig+0x15c>
 80046a0:	3518      	adds	r5, #24
 80046a2:	42ac      	cmp	r4, r5
 80046a4:	d02a      	beq.n	80046fc <DMA_SetConfig+0x15c>
 80046a6:	3518      	adds	r5, #24
 80046a8:	42ac      	cmp	r4, r5
 80046aa:	d027      	beq.n	80046fc <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80046ac:	4e26      	ldr	r6, [pc, #152]	@ (8004748 <DMA_SetConfig+0x1a8>)
 80046ae:	4d27      	ldr	r5, [pc, #156]	@ (800474c <DMA_SetConfig+0x1ac>)
 80046b0:	42ac      	cmp	r4, r5
 80046b2:	bf18      	it	ne
 80046b4:	42b4      	cmpne	r4, r6
 80046b6:	d011      	beq.n	80046dc <DMA_SetConfig+0x13c>
 80046b8:	4d25      	ldr	r5, [pc, #148]	@ (8004750 <DMA_SetConfig+0x1b0>)
 80046ba:	42ac      	cmp	r4, r5
 80046bc:	d00e      	beq.n	80046dc <DMA_SetConfig+0x13c>
 80046be:	3514      	adds	r5, #20
 80046c0:	42ac      	cmp	r4, r5
 80046c2:	d00b      	beq.n	80046dc <DMA_SetConfig+0x13c>
 80046c4:	3514      	adds	r5, #20
 80046c6:	42ac      	cmp	r4, r5
 80046c8:	d008      	beq.n	80046dc <DMA_SetConfig+0x13c>
 80046ca:	3514      	adds	r5, #20
 80046cc:	42ac      	cmp	r4, r5
 80046ce:	d005      	beq.n	80046dc <DMA_SetConfig+0x13c>
 80046d0:	3514      	adds	r5, #20
 80046d2:	42ac      	cmp	r4, r5
 80046d4:	d002      	beq.n	80046dc <DMA_SetConfig+0x13c>
 80046d6:	3514      	adds	r5, #20
 80046d8:	42ac      	cmp	r4, r5
 80046da:	d124      	bne.n	8004726 <DMA_SetConfig+0x186>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046dc:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 80046de:	f004 051f 	and.w	r5, r4, #31
 80046e2:	2401      	movs	r4, #1
 80046e4:	40ac      	lsls	r4, r5
 80046e6:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80046e8:	6804      	ldr	r4, [r0, #0]
 80046ea:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ec:	6883      	ldr	r3, [r0, #8]
 80046ee:	2b40      	cmp	r3, #64	@ 0x40
 80046f0:	d020      	beq.n	8004734 <DMA_SetConfig+0x194>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80046f2:	6803      	ldr	r3, [r0, #0]
 80046f4:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80046f6:	6803      	ldr	r3, [r0, #0]
 80046f8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80046fa:	e014      	b.n	8004726 <DMA_SetConfig+0x186>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046fc:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 80046fe:	f004 0c1f 	and.w	ip, r4, #31
 8004702:	243f      	movs	r4, #63	@ 0x3f
 8004704:	fa04 f40c 	lsl.w	r4, r4, ip
 8004708:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800470a:	6805      	ldr	r5, [r0, #0]
 800470c:	682c      	ldr	r4, [r5, #0]
 800470e:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8004712:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004714:	6804      	ldr	r4, [r0, #0]
 8004716:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004718:	6883      	ldr	r3, [r0, #8]
 800471a:	2b40      	cmp	r3, #64	@ 0x40
 800471c:	d005      	beq.n	800472a <DMA_SetConfig+0x18a>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800471e:	6803      	ldr	r3, [r0, #0]
 8004720:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004722:	6803      	ldr	r3, [r0, #0]
 8004724:	60da      	str	r2, [r3, #12]
}
 8004726:	bcf0      	pop	{r4, r5, r6, r7}
 8004728:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800472a:	6803      	ldr	r3, [r0, #0]
 800472c:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800472e:	6803      	ldr	r3, [r0, #0]
 8004730:	60d9      	str	r1, [r3, #12]
 8004732:	e7f8      	b.n	8004726 <DMA_SetConfig+0x186>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004734:	6803      	ldr	r3, [r0, #0]
 8004736:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004738:	6803      	ldr	r3, [r0, #0]
 800473a:	60d9      	str	r1, [r3, #12]
 800473c:	e7f3      	b.n	8004726 <DMA_SetConfig+0x186>
 800473e:	bf00      	nop
 8004740:	40020010 	.word	0x40020010
 8004744:	40020028 	.word	0x40020028
 8004748:	58025408 	.word	0x58025408
 800474c:	5802541c 	.word	0x5802541c
 8004750:	58025430 	.word	0x58025430

08004754 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004754:	6803      	ldr	r3, [r0, #0]
 8004756:	4927      	ldr	r1, [pc, #156]	@ (80047f4 <DMA_CalcBaseAndBitshift+0xa0>)
 8004758:	4a27      	ldr	r2, [pc, #156]	@ (80047f8 <DMA_CalcBaseAndBitshift+0xa4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	bf18      	it	ne
 800475e:	428b      	cmpne	r3, r1
 8004760:	d02f      	beq.n	80047c2 <DMA_CalcBaseAndBitshift+0x6e>
 8004762:	3218      	adds	r2, #24
 8004764:	4293      	cmp	r3, r2
 8004766:	d02c      	beq.n	80047c2 <DMA_CalcBaseAndBitshift+0x6e>
 8004768:	3218      	adds	r2, #24
 800476a:	4293      	cmp	r3, r2
 800476c:	d029      	beq.n	80047c2 <DMA_CalcBaseAndBitshift+0x6e>
 800476e:	3218      	adds	r2, #24
 8004770:	4293      	cmp	r3, r2
 8004772:	d026      	beq.n	80047c2 <DMA_CalcBaseAndBitshift+0x6e>
 8004774:	3218      	adds	r2, #24
 8004776:	4293      	cmp	r3, r2
 8004778:	d023      	beq.n	80047c2 <DMA_CalcBaseAndBitshift+0x6e>
 800477a:	3218      	adds	r2, #24
 800477c:	4293      	cmp	r3, r2
 800477e:	d020      	beq.n	80047c2 <DMA_CalcBaseAndBitshift+0x6e>
 8004780:	3218      	adds	r2, #24
 8004782:	4293      	cmp	r3, r2
 8004784:	d01d      	beq.n	80047c2 <DMA_CalcBaseAndBitshift+0x6e>
 8004786:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800478a:	4293      	cmp	r3, r2
 800478c:	d019      	beq.n	80047c2 <DMA_CalcBaseAndBitshift+0x6e>
 800478e:	3218      	adds	r2, #24
 8004790:	4293      	cmp	r3, r2
 8004792:	d016      	beq.n	80047c2 <DMA_CalcBaseAndBitshift+0x6e>
 8004794:	3218      	adds	r2, #24
 8004796:	4293      	cmp	r3, r2
 8004798:	d013      	beq.n	80047c2 <DMA_CalcBaseAndBitshift+0x6e>
 800479a:	3218      	adds	r2, #24
 800479c:	4293      	cmp	r3, r2
 800479e:	d010      	beq.n	80047c2 <DMA_CalcBaseAndBitshift+0x6e>
 80047a0:	3218      	adds	r2, #24
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00d      	beq.n	80047c2 <DMA_CalcBaseAndBitshift+0x6e>
 80047a6:	3218      	adds	r2, #24
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00a      	beq.n	80047c2 <DMA_CalcBaseAndBitshift+0x6e>
 80047ac:	3218      	adds	r2, #24
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d007      	beq.n	80047c2 <DMA_CalcBaseAndBitshift+0x6e>
 80047b2:	3218      	adds	r2, #24
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d004      	beq.n	80047c2 <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80047b8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80047bc:	6583      	str	r3, [r0, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
}
 80047be:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80047c0:	4770      	bx	lr
{
 80047c2:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80047c4:	b2d9      	uxtb	r1, r3
 80047c6:	3910      	subs	r1, #16
 80047c8:	4a0c      	ldr	r2, [pc, #48]	@ (80047fc <DMA_CalcBaseAndBitshift+0xa8>)
 80047ca:	fba2 4201 	umull	r4, r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80047ce:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80047d2:	4c0b      	ldr	r4, [pc, #44]	@ (8004800 <DMA_CalcBaseAndBitshift+0xac>)
 80047d4:	5ca2      	ldrb	r2, [r4, r2]
 80047d6:	65c2      	str	r2, [r0, #92]	@ 0x5c
    if (stream_number > 3U)
 80047d8:	295f      	cmp	r1, #95	@ 0x5f
 80047da:	d907      	bls.n	80047ec <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80047dc:	4a09      	ldr	r2, [pc, #36]	@ (8004804 <DMA_CalcBaseAndBitshift+0xb0>)
 80047de:	401a      	ands	r2, r3
 80047e0:	3204      	adds	r2, #4
 80047e2:	6582      	str	r2, [r0, #88]	@ 0x58
}
 80047e4:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80047e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047ea:	4770      	bx	lr
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80047ec:	4a05      	ldr	r2, [pc, #20]	@ (8004804 <DMA_CalcBaseAndBitshift+0xb0>)
 80047ee:	401a      	ands	r2, r3
 80047f0:	6582      	str	r2, [r0, #88]	@ 0x58
 80047f2:	e7f7      	b.n	80047e4 <DMA_CalcBaseAndBitshift+0x90>
 80047f4:	40020010 	.word	0x40020010
 80047f8:	40020028 	.word	0x40020028
 80047fc:	aaaaaaab 	.word	0xaaaaaaab
 8004800:	0801f3f4 	.word	0x0801f3f4
 8004804:	fffffc00 	.word	0xfffffc00

08004808 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004808:	6983      	ldr	r3, [r0, #24]
 800480a:	b99b      	cbnz	r3, 8004834 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 800480c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800480e:	2b01      	cmp	r3, #1
 8004810:	d00a      	beq.n	8004828 <DMA_CheckFifoParam+0x20>
 8004812:	2b02      	cmp	r3, #2
 8004814:	d002      	beq.n	800481c <DMA_CheckFifoParam+0x14>
 8004816:	b10b      	cbz	r3, 800481c <DMA_CheckFifoParam+0x14>
 8004818:	2000      	movs	r0, #0
 800481a:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800481c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800481e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8004822:	d12a      	bne.n	800487a <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8004824:	2000      	movs	r0, #0
 8004826:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004828:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800482a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800482e:	d026      	beq.n	800487e <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8004830:	2000      	movs	r0, #0
 8004832:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004834:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004838:	d00a      	beq.n	8004850 <DMA_CheckFifoParam+0x48>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800483a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800483c:	2b02      	cmp	r3, #2
 800483e:	d926      	bls.n	800488e <DMA_CheckFifoParam+0x86>
 8004840:	2b03      	cmp	r3, #3
 8004842:	d126      	bne.n	8004892 <DMA_CheckFifoParam+0x8a>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004844:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004846:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800484a:	d124      	bne.n	8004896 <DMA_CheckFifoParam+0x8e>
  HAL_StatusTypeDef status = HAL_OK;
 800484c:	2000      	movs	r0, #0
 800484e:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8004850:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004852:	2b03      	cmp	r3, #3
 8004854:	d803      	bhi.n	800485e <DMA_CheckFifoParam+0x56>
 8004856:	e8df f003 	tbb	[pc, r3]
 800485a:	0414      	.short	0x0414
 800485c:	0a14      	.short	0x0a14
 800485e:	2000      	movs	r0, #0
 8004860:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004862:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004864:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8004868:	d10d      	bne.n	8004886 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800486a:	2000      	movs	r0, #0
 800486c:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800486e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004870:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004874:	d009      	beq.n	800488a <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8004876:	2000      	movs	r0, #0
 8004878:	4770      	bx	lr
          status = HAL_ERROR;
 800487a:	2001      	movs	r0, #1
 800487c:	4770      	bx	lr
          status = HAL_ERROR;
 800487e:	2001      	movs	r0, #1
 8004880:	4770      	bx	lr
        status = HAL_ERROR;
 8004882:	2001      	movs	r0, #1
 8004884:	4770      	bx	lr
          status = HAL_ERROR;
 8004886:	2001      	movs	r0, #1
 8004888:	4770      	bx	lr
          status = HAL_ERROR;
 800488a:	2001      	movs	r0, #1
 800488c:	4770      	bx	lr
        status = HAL_ERROR;
 800488e:	2001      	movs	r0, #1
 8004890:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8004892:	2000      	movs	r0, #0
 8004894:	4770      	bx	lr
        {
          status = HAL_ERROR;
 8004896:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 8004898:	4770      	bx	lr
	...

0800489c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800489c:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800489e:	4921      	ldr	r1, [pc, #132]	@ (8004924 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80048a0:	4a21      	ldr	r2, [pc, #132]	@ (8004928 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	bf18      	it	ne
 80048a6:	428b      	cmpne	r3, r1
 80048a8:	d027      	beq.n	80048fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048aa:	3214      	adds	r2, #20
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d024      	beq.n	80048fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048b0:	3214      	adds	r2, #20
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d021      	beq.n	80048fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048b6:	3214      	adds	r2, #20
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d01e      	beq.n	80048fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048bc:	3214      	adds	r2, #20
 80048be:	4293      	cmp	r3, r2
 80048c0:	d01b      	beq.n	80048fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048c2:	3214      	adds	r2, #20
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d018      	beq.n	80048fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048c8:	3214      	adds	r2, #20
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d015      	beq.n	80048fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	3a10      	subs	r2, #16
 80048d2:	4916      	ldr	r1, [pc, #88]	@ (800492c <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 80048d4:	fba1 1202 	umull	r1, r2, r1, r2
 80048d8:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80048da:	4915      	ldr	r1, [pc, #84]	@ (8004930 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 80048dc:	4419      	add	r1, r3
 80048de:	29a8      	cmp	r1, #168	@ 0xa8
 80048e0:	d91e      	bls.n	8004920 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80048e2:	4b14      	ldr	r3, [pc, #80]	@ (8004934 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 80048e4:	4413      	add	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	6603      	str	r3, [r0, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048ea:	4b13      	ldr	r3, [pc, #76]	@ (8004938 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 80048ec:	6643      	str	r3, [r0, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80048ee:	f002 021f 	and.w	r2, r2, #31
 80048f2:	2301      	movs	r3, #1
 80048f4:	4093      	lsls	r3, r2
 80048f6:	6683      	str	r3, [r0, #104]	@ 0x68
  }
}
 80048f8:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	3b08      	subs	r3, #8
 80048fe:	4a0f      	ldr	r2, [pc, #60]	@ (800493c <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8004900:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004904:	4a0e      	ldr	r2, [pc, #56]	@ (8004940 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8004906:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 800490a:	0092      	lsls	r2, r2, #2
 800490c:	6602      	str	r2, [r0, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800490e:	4a0d      	ldr	r2, [pc, #52]	@ (8004944 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8004910:	6642      	str	r2, [r0, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004912:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8004916:	2201      	movs	r2, #1
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	6683      	str	r3, [r0, #104]	@ 0x68
 800491e:	4770      	bx	lr
      stream_number += 8U;
 8004920:	3208      	adds	r2, #8
 8004922:	e7de      	b.n	80048e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 8004924:	58025408 	.word	0x58025408
 8004928:	5802541c 	.word	0x5802541c
 800492c:	aaaaaaab 	.word	0xaaaaaaab
 8004930:	bffdfbf0 	.word	0xbffdfbf0
 8004934:	10008200 	.word	0x10008200
 8004938:	40020880 	.word	0x40020880
 800493c:	cccccccd 	.word	0xcccccccd
 8004940:	16009600 	.word	0x16009600
 8004944:	58025880 	.word	0x58025880

08004948 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004948:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800494a:	1e4a      	subs	r2, r1, #1
 800494c:	2a07      	cmp	r2, #7
 800494e:	d82b      	bhi.n	80049a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>
{
 8004950:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004952:	6803      	ldr	r3, [r0, #0]
 8004954:	4d15      	ldr	r5, [pc, #84]	@ (80049ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 8004956:	4c16      	ldr	r4, [pc, #88]	@ (80049b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8004958:	42a3      	cmp	r3, r4
 800495a:	bf18      	it	ne
 800495c:	42ab      	cmpne	r3, r5
 800495e:	d018      	beq.n	8004992 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004960:	3414      	adds	r4, #20
 8004962:	42a3      	cmp	r3, r4
 8004964:	d015      	beq.n	8004992 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004966:	3414      	adds	r4, #20
 8004968:	42a3      	cmp	r3, r4
 800496a:	d012      	beq.n	8004992 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 800496c:	3414      	adds	r4, #20
 800496e:	42a3      	cmp	r3, r4
 8004970:	d00f      	beq.n	8004992 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004972:	3414      	adds	r4, #20
 8004974:	42a3      	cmp	r3, r4
 8004976:	d00c      	beq.n	8004992 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004978:	3414      	adds	r4, #20
 800497a:	42a3      	cmp	r3, r4
 800497c:	d009      	beq.n	8004992 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 800497e:	3414      	adds	r4, #20
 8004980:	42a3      	cmp	r3, r4
 8004982:	d006      	beq.n	8004992 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004984:	4b0b      	ldr	r3, [pc, #44]	@ (80049b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8004986:	440b      	add	r3, r1
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	66c3      	str	r3, [r0, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800498c:	4b0a      	ldr	r3, [pc, #40]	@ (80049b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 800498e:	6703      	str	r3, [r0, #112]	@ 0x70
 8004990:	e005      	b.n	800499e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004992:	4b0a      	ldr	r3, [pc, #40]	@ (80049bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 8004994:	440b      	add	r3, r1
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	66c3      	str	r3, [r0, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800499a:	4b09      	ldr	r3, [pc, #36]	@ (80049c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 800499c:	6703      	str	r3, [r0, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800499e:	2301      	movs	r3, #1
 80049a0:	4093      	lsls	r3, r2
 80049a2:	6743      	str	r3, [r0, #116]	@ 0x74
  }
}
 80049a4:	bc30      	pop	{r4, r5}
 80049a6:	4770      	bx	lr
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	58025408 	.word	0x58025408
 80049b0:	5802541c 	.word	0x5802541c
 80049b4:	1000823f 	.word	0x1000823f
 80049b8:	40020940 	.word	0x40020940
 80049bc:	1600963f 	.word	0x1600963f
 80049c0:	58025940 	.word	0x58025940

080049c4 <HAL_DMA_Init>:
{
 80049c4:	b570      	push	{r4, r5, r6, lr}
 80049c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80049c8:	f7fe fd9e 	bl	8003508 <HAL_GetTick>
  if(hdma == NULL)
 80049cc:	2c00      	cmp	r4, #0
 80049ce:	f000 81b6 	beq.w	8004d3e <HAL_DMA_Init+0x37a>
 80049d2:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	4953      	ldr	r1, [pc, #332]	@ (8004b24 <HAL_DMA_Init+0x160>)
 80049d8:	4a53      	ldr	r2, [pc, #332]	@ (8004b28 <HAL_DMA_Init+0x164>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	bf18      	it	ne
 80049de:	428b      	cmpne	r3, r1
 80049e0:	bf0c      	ite	eq
 80049e2:	2101      	moveq	r1, #1
 80049e4:	2100      	movne	r1, #0
 80049e6:	d050      	beq.n	8004a8a <HAL_DMA_Init+0xc6>
 80049e8:	3218      	adds	r2, #24
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d04d      	beq.n	8004a8a <HAL_DMA_Init+0xc6>
 80049ee:	3218      	adds	r2, #24
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d04a      	beq.n	8004a8a <HAL_DMA_Init+0xc6>
 80049f4:	3218      	adds	r2, #24
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d047      	beq.n	8004a8a <HAL_DMA_Init+0xc6>
 80049fa:	3218      	adds	r2, #24
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d044      	beq.n	8004a8a <HAL_DMA_Init+0xc6>
 8004a00:	3218      	adds	r2, #24
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d041      	beq.n	8004a8a <HAL_DMA_Init+0xc6>
 8004a06:	3218      	adds	r2, #24
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d03e      	beq.n	8004a8a <HAL_DMA_Init+0xc6>
 8004a0c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d03a      	beq.n	8004a8a <HAL_DMA_Init+0xc6>
 8004a14:	3218      	adds	r2, #24
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d037      	beq.n	8004a8a <HAL_DMA_Init+0xc6>
 8004a1a:	3218      	adds	r2, #24
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d034      	beq.n	8004a8a <HAL_DMA_Init+0xc6>
 8004a20:	3218      	adds	r2, #24
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d031      	beq.n	8004a8a <HAL_DMA_Init+0xc6>
 8004a26:	3218      	adds	r2, #24
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d02e      	beq.n	8004a8a <HAL_DMA_Init+0xc6>
 8004a2c:	3218      	adds	r2, #24
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d02b      	beq.n	8004a8a <HAL_DMA_Init+0xc6>
 8004a32:	3218      	adds	r2, #24
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d028      	beq.n	8004a8a <HAL_DMA_Init+0xc6>
 8004a38:	3218      	adds	r2, #24
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d025      	beq.n	8004a8a <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a3e:	493b      	ldr	r1, [pc, #236]	@ (8004b2c <HAL_DMA_Init+0x168>)
 8004a40:	4a3b      	ldr	r2, [pc, #236]	@ (8004b30 <HAL_DMA_Init+0x16c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	bf18      	it	ne
 8004a46:	428b      	cmpne	r3, r1
 8004a48:	f000 8131 	beq.w	8004cae <HAL_DMA_Init+0x2ea>
 8004a4c:	4a39      	ldr	r2, [pc, #228]	@ (8004b34 <HAL_DMA_Init+0x170>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	f000 812d 	beq.w	8004cae <HAL_DMA_Init+0x2ea>
 8004a54:	3214      	adds	r2, #20
 8004a56:	4293      	cmp	r3, r2
 8004a58:	f000 8129 	beq.w	8004cae <HAL_DMA_Init+0x2ea>
 8004a5c:	3214      	adds	r2, #20
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	f000 8125 	beq.w	8004cae <HAL_DMA_Init+0x2ea>
 8004a64:	3214      	adds	r2, #20
 8004a66:	4293      	cmp	r3, r2
 8004a68:	f000 8121 	beq.w	8004cae <HAL_DMA_Init+0x2ea>
 8004a6c:	3214      	adds	r2, #20
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	f000 811d 	beq.w	8004cae <HAL_DMA_Init+0x2ea>
 8004a74:	3214      	adds	r2, #20
 8004a76:	4293      	cmp	r3, r2
 8004a78:	f000 8119 	beq.w	8004cae <HAL_DMA_Init+0x2ea>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a7c:	2340      	movs	r3, #64	@ 0x40
 8004a7e:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004a80:	2303      	movs	r3, #3
 8004a82:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8004a86:	2001      	movs	r0, #1
 8004a88:	e04a      	b.n	8004b20 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004a90:	2200      	movs	r2, #0
 8004a92:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 8004a96:	bb79      	cbnz	r1, 8004af8 <HAL_DMA_Init+0x134>
 8004a98:	4a27      	ldr	r2, [pc, #156]	@ (8004b38 <HAL_DMA_Init+0x174>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d02c      	beq.n	8004af8 <HAL_DMA_Init+0x134>
 8004a9e:	3218      	adds	r2, #24
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d029      	beq.n	8004af8 <HAL_DMA_Init+0x134>
 8004aa4:	3218      	adds	r2, #24
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d026      	beq.n	8004af8 <HAL_DMA_Init+0x134>
 8004aaa:	3218      	adds	r2, #24
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d023      	beq.n	8004af8 <HAL_DMA_Init+0x134>
 8004ab0:	3218      	adds	r2, #24
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d020      	beq.n	8004af8 <HAL_DMA_Init+0x134>
 8004ab6:	3218      	adds	r2, #24
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d01d      	beq.n	8004af8 <HAL_DMA_Init+0x134>
 8004abc:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d019      	beq.n	8004af8 <HAL_DMA_Init+0x134>
 8004ac4:	3218      	adds	r2, #24
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d016      	beq.n	8004af8 <HAL_DMA_Init+0x134>
 8004aca:	3218      	adds	r2, #24
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d013      	beq.n	8004af8 <HAL_DMA_Init+0x134>
 8004ad0:	3218      	adds	r2, #24
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d010      	beq.n	8004af8 <HAL_DMA_Init+0x134>
 8004ad6:	3218      	adds	r2, #24
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00d      	beq.n	8004af8 <HAL_DMA_Init+0x134>
 8004adc:	3218      	adds	r2, #24
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00a      	beq.n	8004af8 <HAL_DMA_Init+0x134>
 8004ae2:	3218      	adds	r2, #24
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d007      	beq.n	8004af8 <HAL_DMA_Init+0x134>
 8004ae8:	3218      	adds	r2, #24
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <HAL_DMA_Init+0x134>
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	f022 0201 	bic.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	e003      	b.n	8004b00 <HAL_DMA_Init+0x13c>
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	f022 0201 	bic.w	r2, r2, #1
 8004afe:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	f012 0f01 	tst.w	r2, #1
 8004b08:	d018      	beq.n	8004b3c <HAL_DMA_Init+0x178>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b0a:	f7fe fcfd 	bl	8003508 <HAL_GetTick>
 8004b0e:	1b43      	subs	r3, r0, r5
 8004b10:	2b05      	cmp	r3, #5
 8004b12:	d9f5      	bls.n	8004b00 <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b14:	2320      	movs	r3, #32
 8004b16:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        return HAL_ERROR;
 8004b1e:	2001      	movs	r0, #1
}
 8004b20:	bd70      	pop	{r4, r5, r6, pc}
 8004b22:	bf00      	nop
 8004b24:	40020010 	.word	0x40020010
 8004b28:	40020028 	.word	0x40020028
 8004b2c:	58025408 	.word	0x58025408
 8004b30:	5802541c 	.word	0x5802541c
 8004b34:	58025430 	.word	0x58025430
 8004b38:	40020040 	.word	0x40020040
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004b3c:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b3e:	4981      	ldr	r1, [pc, #516]	@ (8004d44 <HAL_DMA_Init+0x380>)
 8004b40:	4011      	ands	r1, r2
    registerValue |=  hdma->Init.Direction           |
 8004b42:	68a2      	ldr	r2, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b44:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 8004b46:	4302      	orrs	r2, r0
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b48:	6920      	ldr	r0, [r4, #16]
 8004b4a:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b4c:	6960      	ldr	r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b4e:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b50:	69a0      	ldr	r0, [r4, #24]
 8004b52:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b54:	69e0      	ldr	r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b56:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b58:	6a20      	ldr	r0, [r4, #32]
 8004b5a:	4302      	orrs	r2, r0
    registerValue |=  hdma->Init.Direction           |
 8004b5c:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b5e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004b60:	2904      	cmp	r1, #4
 8004b62:	f000 8099 	beq.w	8004c98 <HAL_DMA_Init+0x2d4>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004b66:	4978      	ldr	r1, [pc, #480]	@ (8004d48 <HAL_DMA_Init+0x384>)
 8004b68:	6808      	ldr	r0, [r1, #0]
 8004b6a:	4978      	ldr	r1, [pc, #480]	@ (8004d4c <HAL_DMA_Init+0x388>)
 8004b6c:	4001      	ands	r1, r0
 8004b6e:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8004b72:	d311      	bcc.n	8004b98 <HAL_DMA_Init+0x1d4>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004b74:	6861      	ldr	r1, [r4, #4]
 8004b76:	f1a1 0529 	sub.w	r5, r1, #41	@ 0x29
 8004b7a:	f1a1 003f 	sub.w	r0, r1, #63	@ 0x3f
 8004b7e:	2803      	cmp	r0, #3
 8004b80:	bf88      	it	hi
 8004b82:	2d05      	cmphi	r5, #5
 8004b84:	d906      	bls.n	8004b94 <HAL_DMA_Init+0x1d0>
 8004b86:	f1a1 0047 	sub.w	r0, r1, #71	@ 0x47
 8004b8a:	2801      	cmp	r0, #1
 8004b8c:	d902      	bls.n	8004b94 <HAL_DMA_Init+0x1d0>
 8004b8e:	394f      	subs	r1, #79	@ 0x4f
 8004b90:	2903      	cmp	r1, #3
 8004b92:	d801      	bhi.n	8004b98 <HAL_DMA_Init+0x1d4>
        registerValue |= DMA_SxCR_TRBUFF;
 8004b94:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004b98:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004b9a:	6826      	ldr	r6, [r4, #0]
 8004b9c:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b9e:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 8004ba2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004ba4:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d108      	bne.n	8004bbc <HAL_DMA_Init+0x1f8>
      registerValue |= hdma->Init.FIFOThreshold;
 8004baa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004bac:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004bae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004bb0:	b123      	cbz	r3, 8004bbc <HAL_DMA_Init+0x1f8>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	f7ff fe28 	bl	8004808 <DMA_CheckFifoParam>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d172      	bne.n	8004ca2 <HAL_DMA_Init+0x2de>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004bbc:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f7ff fdc8 	bl	8004754 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004bc4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004bc6:	f003 021f 	and.w	r2, r3, #31
 8004bca:	233f      	movs	r3, #63	@ 0x3f
 8004bcc:	4093      	lsls	r3, r2
 8004bce:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	495f      	ldr	r1, [pc, #380]	@ (8004d50 <HAL_DMA_Init+0x38c>)
 8004bd4:	4a5f      	ldr	r2, [pc, #380]	@ (8004d54 <HAL_DMA_Init+0x390>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	bf18      	it	ne
 8004bda:	428b      	cmpne	r3, r1
 8004bdc:	d042      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004bde:	3218      	adds	r2, #24
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d03f      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004be4:	3218      	adds	r2, #24
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d03c      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004bea:	3218      	adds	r2, #24
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d039      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004bf0:	3218      	adds	r2, #24
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d036      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004bf6:	3218      	adds	r2, #24
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d033      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004bfc:	3218      	adds	r2, #24
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d030      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004c02:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d02c      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004c0a:	3218      	adds	r2, #24
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d029      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004c10:	3218      	adds	r2, #24
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d026      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004c16:	3218      	adds	r2, #24
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d023      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004c1c:	3218      	adds	r2, #24
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d020      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004c22:	3218      	adds	r2, #24
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d01d      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004c28:	3218      	adds	r2, #24
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d01a      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004c2e:	3218      	adds	r2, #24
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d017      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004c34:	4a48      	ldr	r2, [pc, #288]	@ (8004d58 <HAL_DMA_Init+0x394>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d014      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004c3a:	3214      	adds	r2, #20
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d011      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004c40:	3214      	adds	r2, #20
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00e      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004c46:	3214      	adds	r2, #20
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d00b      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004c4c:	3214      	adds	r2, #20
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d008      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004c52:	3214      	adds	r2, #20
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d005      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004c58:	3214      	adds	r2, #20
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d002      	beq.n	8004c64 <HAL_DMA_Init+0x2a0>
 8004c5e:	3214      	adds	r2, #20
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d113      	bne.n	8004c8c <HAL_DMA_Init+0x2c8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c64:	4620      	mov	r0, r4
 8004c66:	f7ff fe19 	bl	800489c <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c6a:	68a3      	ldr	r3, [r4, #8]
 8004c6c:	2b80      	cmp	r3, #128	@ 0x80
 8004c6e:	d059      	beq.n	8004d24 <HAL_DMA_Init+0x360>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c70:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004c72:	7922      	ldrb	r2, [r4, #4]
 8004c74:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c78:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8004c7a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004c7c:	6863      	ldr	r3, [r4, #4]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	2b07      	cmp	r3, #7
 8004c82:	d952      	bls.n	8004d2a <HAL_DMA_Init+0x366>
      hdma->DMAmuxRequestGen = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	66e3      	str	r3, [r4, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004c88:	6723      	str	r3, [r4, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c8a:	6763      	str	r3, [r4, #116]	@ 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004c90:	2301      	movs	r3, #1
 8004c92:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8004c96:	e743      	b.n	8004b20 <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c98:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004c9a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004c9c:	4301      	orrs	r1, r0
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	e761      	b.n	8004b66 <HAL_DMA_Init+0x1a2>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ca2:	2340      	movs	r3, #64	@ 0x40
 8004ca4:	6563      	str	r3, [r4, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
          return HAL_ERROR;
 8004cac:	e738      	b.n	8004b20 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004cba:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004cbc:	4927      	ldr	r1, [pc, #156]	@ (8004d5c <HAL_DMA_Init+0x398>)
 8004cbe:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cc0:	68a2      	ldr	r2, [r4, #8]
 8004cc2:	2a40      	cmp	r2, #64	@ 0x40
 8004cc4:	d02c      	beq.n	8004d20 <HAL_DMA_Init+0x35c>
 8004cc6:	2a80      	cmp	r2, #128	@ 0x80
 8004cc8:	d027      	beq.n	8004d1a <HAL_DMA_Init+0x356>
 8004cca:	2200      	movs	r2, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004ccc:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cce:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004cd2:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004cd4:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004cd8:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004cda:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004cde:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ce0:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ce4:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ce6:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004cea:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004cec:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cf0:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004cf2:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004cf4:	6822      	ldr	r2, [r4, #0]
 8004cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d60 <HAL_DMA_Init+0x39c>)
 8004cf8:	4413      	add	r3, r2
 8004cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8004d64 <HAL_DMA_Init+0x3a0>)
 8004cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004d00:	091b      	lsrs	r3, r3, #4
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	65e3      	str	r3, [r4, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d06:	4620      	mov	r0, r4
 8004d08:	f7ff fd24 	bl	8004754 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d0c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004d0e:	f002 011f 	and.w	r1, r2, #31
 8004d12:	2201      	movs	r2, #1
 8004d14:	408a      	lsls	r2, r1
 8004d16:	6042      	str	r2, [r0, #4]
 8004d18:	e75a      	b.n	8004bd0 <HAL_DMA_Init+0x20c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004d1e:	e7d5      	b.n	8004ccc <HAL_DMA_Init+0x308>
 8004d20:	2210      	movs	r2, #16
 8004d22:	e7d3      	b.n	8004ccc <HAL_DMA_Init+0x308>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d24:	2300      	movs	r3, #0
 8004d26:	6063      	str	r3, [r4, #4]
 8004d28:	e7a2      	b.n	8004c70 <HAL_DMA_Init+0x2ac>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f7ff fe0c 	bl	8004948 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d30:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004d32:	2200      	movs	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d36:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8004d38:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8004d3a:	605a      	str	r2, [r3, #4]
 8004d3c:	e7a6      	b.n	8004c8c <HAL_DMA_Init+0x2c8>
    return HAL_ERROR;
 8004d3e:	2001      	movs	r0, #1
 8004d40:	e6ee      	b.n	8004b20 <HAL_DMA_Init+0x15c>
 8004d42:	bf00      	nop
 8004d44:	fe10803f 	.word	0xfe10803f
 8004d48:	5c001000 	.word	0x5c001000
 8004d4c:	ffff0000 	.word	0xffff0000
 8004d50:	40020010 	.word	0x40020010
 8004d54:	40020028 	.word	0x40020028
 8004d58:	58025408 	.word	0x58025408
 8004d5c:	fffe000f 	.word	0xfffe000f
 8004d60:	a7fdabf8 	.word	0xa7fdabf8
 8004d64:	cccccccd 	.word	0xcccccccd

08004d68 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	f000 813e 	beq.w	8004fea <HAL_DMA_Start_IT+0x282>
{
 8004d6e:	b570      	push	{r4, r5, r6, lr}
 8004d70:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004d72:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8004d76:	2801      	cmp	r0, #1
 8004d78:	f000 8139 	beq.w	8004fee <HAL_DMA_Start_IT+0x286>
 8004d7c:	2001      	movs	r0, #1
 8004d7e:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d82:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8004d86:	b2c0      	uxtb	r0, r0
 8004d88:	2801      	cmp	r0, #1
 8004d8a:	d007      	beq.n	8004d9c <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004d8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d90:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8004d92:	2300      	movs	r3, #0
 8004d94:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_ERROR;
 8004d98:	2001      	movs	r0, #1
}
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d9c:	2002      	movs	r0, #2
 8004d9e:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004da2:	2000      	movs	r0, #0
 8004da4:	6560      	str	r0, [r4, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 8004da6:	6820      	ldr	r0, [r4, #0]
 8004da8:	4e92      	ldr	r6, [pc, #584]	@ (8004ff4 <HAL_DMA_Start_IT+0x28c>)
 8004daa:	4d93      	ldr	r5, [pc, #588]	@ (8004ff8 <HAL_DMA_Start_IT+0x290>)
 8004dac:	42a8      	cmp	r0, r5
 8004dae:	bf18      	it	ne
 8004db0:	42b0      	cmpne	r0, r6
 8004db2:	d02f      	beq.n	8004e14 <HAL_DMA_Start_IT+0xac>
 8004db4:	3518      	adds	r5, #24
 8004db6:	42a8      	cmp	r0, r5
 8004db8:	d02c      	beq.n	8004e14 <HAL_DMA_Start_IT+0xac>
 8004dba:	3518      	adds	r5, #24
 8004dbc:	42a8      	cmp	r0, r5
 8004dbe:	d029      	beq.n	8004e14 <HAL_DMA_Start_IT+0xac>
 8004dc0:	3518      	adds	r5, #24
 8004dc2:	42a8      	cmp	r0, r5
 8004dc4:	d026      	beq.n	8004e14 <HAL_DMA_Start_IT+0xac>
 8004dc6:	3518      	adds	r5, #24
 8004dc8:	42a8      	cmp	r0, r5
 8004dca:	d023      	beq.n	8004e14 <HAL_DMA_Start_IT+0xac>
 8004dcc:	3518      	adds	r5, #24
 8004dce:	42a8      	cmp	r0, r5
 8004dd0:	d020      	beq.n	8004e14 <HAL_DMA_Start_IT+0xac>
 8004dd2:	3518      	adds	r5, #24
 8004dd4:	42a8      	cmp	r0, r5
 8004dd6:	d01d      	beq.n	8004e14 <HAL_DMA_Start_IT+0xac>
 8004dd8:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8004ddc:	42a8      	cmp	r0, r5
 8004dde:	d019      	beq.n	8004e14 <HAL_DMA_Start_IT+0xac>
 8004de0:	3518      	adds	r5, #24
 8004de2:	42a8      	cmp	r0, r5
 8004de4:	d016      	beq.n	8004e14 <HAL_DMA_Start_IT+0xac>
 8004de6:	3518      	adds	r5, #24
 8004de8:	42a8      	cmp	r0, r5
 8004dea:	d013      	beq.n	8004e14 <HAL_DMA_Start_IT+0xac>
 8004dec:	3518      	adds	r5, #24
 8004dee:	42a8      	cmp	r0, r5
 8004df0:	d010      	beq.n	8004e14 <HAL_DMA_Start_IT+0xac>
 8004df2:	3518      	adds	r5, #24
 8004df4:	42a8      	cmp	r0, r5
 8004df6:	d00d      	beq.n	8004e14 <HAL_DMA_Start_IT+0xac>
 8004df8:	3518      	adds	r5, #24
 8004dfa:	42a8      	cmp	r0, r5
 8004dfc:	d00a      	beq.n	8004e14 <HAL_DMA_Start_IT+0xac>
 8004dfe:	3518      	adds	r5, #24
 8004e00:	42a8      	cmp	r0, r5
 8004e02:	d007      	beq.n	8004e14 <HAL_DMA_Start_IT+0xac>
 8004e04:	3518      	adds	r5, #24
 8004e06:	42a8      	cmp	r0, r5
 8004e08:	d004      	beq.n	8004e14 <HAL_DMA_Start_IT+0xac>
 8004e0a:	6805      	ldr	r5, [r0, #0]
 8004e0c:	f025 0501 	bic.w	r5, r5, #1
 8004e10:	6005      	str	r5, [r0, #0]
 8004e12:	e003      	b.n	8004e1c <HAL_DMA_Start_IT+0xb4>
 8004e14:	6805      	ldr	r5, [r0, #0]
 8004e16:	f025 0501 	bic.w	r5, r5, #1
 8004e1a:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	f7ff fbbf 	bl	80045a0 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	4973      	ldr	r1, [pc, #460]	@ (8004ff4 <HAL_DMA_Start_IT+0x28c>)
 8004e26:	4a74      	ldr	r2, [pc, #464]	@ (8004ff8 <HAL_DMA_Start_IT+0x290>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	bf18      	it	ne
 8004e2c:	428b      	cmpne	r3, r1
 8004e2e:	d038      	beq.n	8004ea2 <HAL_DMA_Start_IT+0x13a>
 8004e30:	3218      	adds	r2, #24
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d035      	beq.n	8004ea2 <HAL_DMA_Start_IT+0x13a>
 8004e36:	3218      	adds	r2, #24
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d032      	beq.n	8004ea2 <HAL_DMA_Start_IT+0x13a>
 8004e3c:	3218      	adds	r2, #24
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d02f      	beq.n	8004ea2 <HAL_DMA_Start_IT+0x13a>
 8004e42:	3218      	adds	r2, #24
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d02c      	beq.n	8004ea2 <HAL_DMA_Start_IT+0x13a>
 8004e48:	3218      	adds	r2, #24
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d029      	beq.n	8004ea2 <HAL_DMA_Start_IT+0x13a>
 8004e4e:	3218      	adds	r2, #24
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d026      	beq.n	8004ea2 <HAL_DMA_Start_IT+0x13a>
 8004e54:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d022      	beq.n	8004ea2 <HAL_DMA_Start_IT+0x13a>
 8004e5c:	3218      	adds	r2, #24
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d01f      	beq.n	8004ea2 <HAL_DMA_Start_IT+0x13a>
 8004e62:	3218      	adds	r2, #24
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d01c      	beq.n	8004ea2 <HAL_DMA_Start_IT+0x13a>
 8004e68:	3218      	adds	r2, #24
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d019      	beq.n	8004ea2 <HAL_DMA_Start_IT+0x13a>
 8004e6e:	3218      	adds	r2, #24
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d016      	beq.n	8004ea2 <HAL_DMA_Start_IT+0x13a>
 8004e74:	3218      	adds	r2, #24
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d013      	beq.n	8004ea2 <HAL_DMA_Start_IT+0x13a>
 8004e7a:	3218      	adds	r2, #24
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d010      	beq.n	8004ea2 <HAL_DMA_Start_IT+0x13a>
 8004e80:	3218      	adds	r2, #24
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00d      	beq.n	8004ea2 <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	f022 020e 	bic.w	r2, r2, #14
 8004e8c:	f042 020a 	orr.w	r2, r2, #10
 8004e90:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004e92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e94:	b193      	cbz	r3, 8004ebc <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004e96:	6822      	ldr	r2, [r4, #0]
 8004e98:	6813      	ldr	r3, [r2, #0]
 8004e9a:	f043 0304 	orr.w	r3, r3, #4
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	e00c      	b.n	8004ebc <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	f022 021e 	bic.w	r2, r2, #30
 8004ea8:	f042 0216 	orr.w	r2, r2, #22
 8004eac:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004eae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004eb0:	b123      	cbz	r3, 8004ebc <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004eb2:	6822      	ldr	r2, [r4, #0]
 8004eb4:	6813      	ldr	r3, [r2, #0]
 8004eb6:	f043 0308 	orr.w	r3, r3, #8
 8004eba:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	494d      	ldr	r1, [pc, #308]	@ (8004ff4 <HAL_DMA_Start_IT+0x28c>)
 8004ec0:	4a4d      	ldr	r2, [pc, #308]	@ (8004ff8 <HAL_DMA_Start_IT+0x290>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	bf18      	it	ne
 8004ec6:	428b      	cmpne	r3, r1
 8004ec8:	d042      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004eca:	3218      	adds	r2, #24
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d03f      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004ed0:	3218      	adds	r2, #24
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d03c      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004ed6:	3218      	adds	r2, #24
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d039      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004edc:	3218      	adds	r2, #24
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d036      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004ee2:	3218      	adds	r2, #24
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d033      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004ee8:	3218      	adds	r2, #24
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d030      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004eee:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d02c      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004ef6:	3218      	adds	r2, #24
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d029      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004efc:	3218      	adds	r2, #24
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d026      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004f02:	3218      	adds	r2, #24
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d023      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004f08:	3218      	adds	r2, #24
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d020      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004f0e:	3218      	adds	r2, #24
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d01d      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004f14:	3218      	adds	r2, #24
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d01a      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004f1a:	3218      	adds	r2, #24
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d017      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004f20:	4a36      	ldr	r2, [pc, #216]	@ (8004ffc <HAL_DMA_Start_IT+0x294>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d014      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004f26:	3214      	adds	r2, #20
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d011      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004f2c:	3214      	adds	r2, #20
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00e      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004f32:	3214      	adds	r2, #20
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00b      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004f38:	3214      	adds	r2, #20
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d008      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004f3e:	3214      	adds	r2, #20
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d005      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004f44:	3214      	adds	r2, #20
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d002      	beq.n	8004f50 <HAL_DMA_Start_IT+0x1e8>
 8004f4a:	3214      	adds	r2, #20
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d10e      	bne.n	8004f6e <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f50:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8004f58:	d003      	beq.n	8004f62 <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f60:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8004f62:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004f64:	b11b      	cbz	r3, 8004f6e <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f6c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	4920      	ldr	r1, [pc, #128]	@ (8004ff4 <HAL_DMA_Start_IT+0x28c>)
 8004f72:	4a21      	ldr	r2, [pc, #132]	@ (8004ff8 <HAL_DMA_Start_IT+0x290>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	bf18      	it	ne
 8004f78:	428b      	cmpne	r3, r1
 8004f7a:	d030      	beq.n	8004fde <HAL_DMA_Start_IT+0x276>
 8004f7c:	3218      	adds	r2, #24
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d02d      	beq.n	8004fde <HAL_DMA_Start_IT+0x276>
 8004f82:	3218      	adds	r2, #24
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d02a      	beq.n	8004fde <HAL_DMA_Start_IT+0x276>
 8004f88:	3218      	adds	r2, #24
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d027      	beq.n	8004fde <HAL_DMA_Start_IT+0x276>
 8004f8e:	3218      	adds	r2, #24
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d024      	beq.n	8004fde <HAL_DMA_Start_IT+0x276>
 8004f94:	3218      	adds	r2, #24
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d021      	beq.n	8004fde <HAL_DMA_Start_IT+0x276>
 8004f9a:	3218      	adds	r2, #24
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d01e      	beq.n	8004fde <HAL_DMA_Start_IT+0x276>
 8004fa0:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d01a      	beq.n	8004fde <HAL_DMA_Start_IT+0x276>
 8004fa8:	3218      	adds	r2, #24
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d017      	beq.n	8004fde <HAL_DMA_Start_IT+0x276>
 8004fae:	3218      	adds	r2, #24
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d014      	beq.n	8004fde <HAL_DMA_Start_IT+0x276>
 8004fb4:	3218      	adds	r2, #24
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d011      	beq.n	8004fde <HAL_DMA_Start_IT+0x276>
 8004fba:	3218      	adds	r2, #24
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00e      	beq.n	8004fde <HAL_DMA_Start_IT+0x276>
 8004fc0:	3218      	adds	r2, #24
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00b      	beq.n	8004fde <HAL_DMA_Start_IT+0x276>
 8004fc6:	3218      	adds	r2, #24
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d008      	beq.n	8004fde <HAL_DMA_Start_IT+0x276>
 8004fcc:	3218      	adds	r2, #24
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d005      	beq.n	8004fde <HAL_DMA_Start_IT+0x276>
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	f042 0201 	orr.w	r2, r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fda:	2000      	movs	r0, #0
 8004fdc:	e6dd      	b.n	8004d9a <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	f042 0201 	orr.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004fe8:	e6d7      	b.n	8004d9a <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 8004fea:	2001      	movs	r0, #1
}
 8004fec:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8004fee:	2002      	movs	r0, #2
 8004ff0:	e6d3      	b.n	8004d9a <HAL_DMA_Start_IT+0x32>
 8004ff2:	bf00      	nop
 8004ff4:	40020010 	.word	0x40020010
 8004ff8:	40020028 	.word	0x40020028
 8004ffc:	58025408 	.word	0x58025408

08005000 <HAL_DMA_Abort>:
{
 8005000:	b570      	push	{r4, r5, r6, lr}
 8005002:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005004:	f7fe fa80 	bl	8003508 <HAL_GetTick>
  if(hdma == NULL)
 8005008:	2c00      	cmp	r4, #0
 800500a:	f000 8191 	beq.w	8005330 <HAL_DMA_Abort+0x330>
 800500e:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005010:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d006      	beq.n	8005028 <HAL_DMA_Abort+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800501a:	2380      	movs	r3, #128	@ 0x80
 800501c:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 800501e:	2300      	movs	r3, #0
 8005020:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8005024:	2001      	movs	r0, #1
}
 8005026:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005028:	6823      	ldr	r3, [r4, #0]
 800502a:	498c      	ldr	r1, [pc, #560]	@ (800525c <HAL_DMA_Abort+0x25c>)
 800502c:	4a8c      	ldr	r2, [pc, #560]	@ (8005260 <HAL_DMA_Abort+0x260>)
 800502e:	4293      	cmp	r3, r2
 8005030:	bf18      	it	ne
 8005032:	428b      	cmpne	r3, r1
 8005034:	d030      	beq.n	8005098 <HAL_DMA_Abort+0x98>
 8005036:	3218      	adds	r2, #24
 8005038:	4293      	cmp	r3, r2
 800503a:	d02d      	beq.n	8005098 <HAL_DMA_Abort+0x98>
 800503c:	3218      	adds	r2, #24
 800503e:	4293      	cmp	r3, r2
 8005040:	d02a      	beq.n	8005098 <HAL_DMA_Abort+0x98>
 8005042:	3218      	adds	r2, #24
 8005044:	4293      	cmp	r3, r2
 8005046:	d027      	beq.n	8005098 <HAL_DMA_Abort+0x98>
 8005048:	3218      	adds	r2, #24
 800504a:	4293      	cmp	r3, r2
 800504c:	d024      	beq.n	8005098 <HAL_DMA_Abort+0x98>
 800504e:	3218      	adds	r2, #24
 8005050:	4293      	cmp	r3, r2
 8005052:	d021      	beq.n	8005098 <HAL_DMA_Abort+0x98>
 8005054:	3218      	adds	r2, #24
 8005056:	4293      	cmp	r3, r2
 8005058:	d01e      	beq.n	8005098 <HAL_DMA_Abort+0x98>
 800505a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800505e:	4293      	cmp	r3, r2
 8005060:	d01a      	beq.n	8005098 <HAL_DMA_Abort+0x98>
 8005062:	3218      	adds	r2, #24
 8005064:	4293      	cmp	r3, r2
 8005066:	d017      	beq.n	8005098 <HAL_DMA_Abort+0x98>
 8005068:	3218      	adds	r2, #24
 800506a:	4293      	cmp	r3, r2
 800506c:	d014      	beq.n	8005098 <HAL_DMA_Abort+0x98>
 800506e:	3218      	adds	r2, #24
 8005070:	4293      	cmp	r3, r2
 8005072:	d011      	beq.n	8005098 <HAL_DMA_Abort+0x98>
 8005074:	3218      	adds	r2, #24
 8005076:	4293      	cmp	r3, r2
 8005078:	d00e      	beq.n	8005098 <HAL_DMA_Abort+0x98>
 800507a:	3218      	adds	r2, #24
 800507c:	4293      	cmp	r3, r2
 800507e:	d00b      	beq.n	8005098 <HAL_DMA_Abort+0x98>
 8005080:	3218      	adds	r2, #24
 8005082:	4293      	cmp	r3, r2
 8005084:	d008      	beq.n	8005098 <HAL_DMA_Abort+0x98>
 8005086:	3218      	adds	r2, #24
 8005088:	4293      	cmp	r3, r2
 800508a:	d005      	beq.n	8005098 <HAL_DMA_Abort+0x98>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	f022 020e 	bic.w	r2, r2, #14
 8005092:	601a      	str	r2, [r3, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005094:	6826      	ldr	r6, [r4, #0]
 8005096:	e009      	b.n	80050ac <HAL_DMA_Abort+0xac>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	f022 021e 	bic.w	r2, r2, #30
 800509e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80050a0:	6822      	ldr	r2, [r4, #0]
 80050a2:	6953      	ldr	r3, [r2, #20]
 80050a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050a8:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80050aa:	6826      	ldr	r6, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	496b      	ldr	r1, [pc, #428]	@ (800525c <HAL_DMA_Abort+0x25c>)
 80050b0:	4a6b      	ldr	r2, [pc, #428]	@ (8005260 <HAL_DMA_Abort+0x260>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	bf18      	it	ne
 80050b6:	428b      	cmpne	r3, r1
 80050b8:	d042      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 80050ba:	3218      	adds	r2, #24
 80050bc:	4293      	cmp	r3, r2
 80050be:	d03f      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 80050c0:	3218      	adds	r2, #24
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d03c      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 80050c6:	3218      	adds	r2, #24
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d039      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 80050cc:	3218      	adds	r2, #24
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d036      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 80050d2:	3218      	adds	r2, #24
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d033      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 80050d8:	3218      	adds	r2, #24
 80050da:	4293      	cmp	r3, r2
 80050dc:	d030      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 80050de:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d02c      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 80050e6:	3218      	adds	r2, #24
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d029      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 80050ec:	3218      	adds	r2, #24
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d026      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 80050f2:	3218      	adds	r2, #24
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d023      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 80050f8:	3218      	adds	r2, #24
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d020      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 80050fe:	3218      	adds	r2, #24
 8005100:	4293      	cmp	r3, r2
 8005102:	d01d      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 8005104:	3218      	adds	r2, #24
 8005106:	4293      	cmp	r3, r2
 8005108:	d01a      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 800510a:	3218      	adds	r2, #24
 800510c:	4293      	cmp	r3, r2
 800510e:	d017      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 8005110:	4a54      	ldr	r2, [pc, #336]	@ (8005264 <HAL_DMA_Abort+0x264>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d014      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 8005116:	3214      	adds	r2, #20
 8005118:	4293      	cmp	r3, r2
 800511a:	d011      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 800511c:	3214      	adds	r2, #20
 800511e:	4293      	cmp	r3, r2
 8005120:	d00e      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 8005122:	3214      	adds	r2, #20
 8005124:	4293      	cmp	r3, r2
 8005126:	d00b      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 8005128:	3214      	adds	r2, #20
 800512a:	4293      	cmp	r3, r2
 800512c:	d008      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 800512e:	3214      	adds	r2, #20
 8005130:	4293      	cmp	r3, r2
 8005132:	d005      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 8005134:	3214      	adds	r2, #20
 8005136:	4293      	cmp	r3, r2
 8005138:	d002      	beq.n	8005140 <HAL_DMA_Abort+0x140>
 800513a:	3214      	adds	r2, #20
 800513c:	4293      	cmp	r3, r2
 800513e:	d104      	bne.n	800514a <HAL_DMA_Abort+0x14a>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005140:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005142:	6813      	ldr	r3, [r2, #0]
 8005144:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005148:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	4943      	ldr	r1, [pc, #268]	@ (800525c <HAL_DMA_Abort+0x25c>)
 800514e:	4a44      	ldr	r2, [pc, #272]	@ (8005260 <HAL_DMA_Abort+0x260>)
 8005150:	4293      	cmp	r3, r2
 8005152:	bf18      	it	ne
 8005154:	428b      	cmpne	r3, r1
 8005156:	d02f      	beq.n	80051b8 <HAL_DMA_Abort+0x1b8>
 8005158:	3218      	adds	r2, #24
 800515a:	4293      	cmp	r3, r2
 800515c:	d02c      	beq.n	80051b8 <HAL_DMA_Abort+0x1b8>
 800515e:	3218      	adds	r2, #24
 8005160:	4293      	cmp	r3, r2
 8005162:	d029      	beq.n	80051b8 <HAL_DMA_Abort+0x1b8>
 8005164:	3218      	adds	r2, #24
 8005166:	4293      	cmp	r3, r2
 8005168:	d026      	beq.n	80051b8 <HAL_DMA_Abort+0x1b8>
 800516a:	3218      	adds	r2, #24
 800516c:	4293      	cmp	r3, r2
 800516e:	d023      	beq.n	80051b8 <HAL_DMA_Abort+0x1b8>
 8005170:	3218      	adds	r2, #24
 8005172:	4293      	cmp	r3, r2
 8005174:	d020      	beq.n	80051b8 <HAL_DMA_Abort+0x1b8>
 8005176:	3218      	adds	r2, #24
 8005178:	4293      	cmp	r3, r2
 800517a:	d01d      	beq.n	80051b8 <HAL_DMA_Abort+0x1b8>
 800517c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8005180:	4293      	cmp	r3, r2
 8005182:	d019      	beq.n	80051b8 <HAL_DMA_Abort+0x1b8>
 8005184:	3218      	adds	r2, #24
 8005186:	4293      	cmp	r3, r2
 8005188:	d016      	beq.n	80051b8 <HAL_DMA_Abort+0x1b8>
 800518a:	3218      	adds	r2, #24
 800518c:	4293      	cmp	r3, r2
 800518e:	d013      	beq.n	80051b8 <HAL_DMA_Abort+0x1b8>
 8005190:	3218      	adds	r2, #24
 8005192:	4293      	cmp	r3, r2
 8005194:	d010      	beq.n	80051b8 <HAL_DMA_Abort+0x1b8>
 8005196:	3218      	adds	r2, #24
 8005198:	4293      	cmp	r3, r2
 800519a:	d00d      	beq.n	80051b8 <HAL_DMA_Abort+0x1b8>
 800519c:	3218      	adds	r2, #24
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00a      	beq.n	80051b8 <HAL_DMA_Abort+0x1b8>
 80051a2:	3218      	adds	r2, #24
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d007      	beq.n	80051b8 <HAL_DMA_Abort+0x1b8>
 80051a8:	3218      	adds	r2, #24
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d004      	beq.n	80051b8 <HAL_DMA_Abort+0x1b8>
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	f022 0201 	bic.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	e003      	b.n	80051c0 <HAL_DMA_Abort+0x1c0>
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	f022 0201 	bic.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80051c0:	6833      	ldr	r3, [r6, #0]
 80051c2:	f013 0f01 	tst.w	r3, #1
 80051c6:	d00e      	beq.n	80051e6 <HAL_DMA_Abort+0x1e6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051c8:	f7fe f99e 	bl	8003508 <HAL_GetTick>
 80051cc:	1b43      	subs	r3, r0, r5
 80051ce:	2b05      	cmp	r3, #5
 80051d0:	d9f6      	bls.n	80051c0 <HAL_DMA_Abort+0x1c0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051d2:	2320      	movs	r3, #32
 80051d4:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80051d6:	2303      	movs	r3, #3
 80051d8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80051dc:	2300      	movs	r3, #0
 80051de:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_ERROR;
 80051e2:	2001      	movs	r0, #1
 80051e4:	e71f      	b.n	8005026 <HAL_DMA_Abort+0x26>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	491c      	ldr	r1, [pc, #112]	@ (800525c <HAL_DMA_Abort+0x25c>)
 80051ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005260 <HAL_DMA_Abort+0x260>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	bf18      	it	ne
 80051f0:	428b      	cmpne	r3, r1
 80051f2:	d039      	beq.n	8005268 <HAL_DMA_Abort+0x268>
 80051f4:	3218      	adds	r2, #24
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d036      	beq.n	8005268 <HAL_DMA_Abort+0x268>
 80051fa:	3218      	adds	r2, #24
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d033      	beq.n	8005268 <HAL_DMA_Abort+0x268>
 8005200:	3218      	adds	r2, #24
 8005202:	4293      	cmp	r3, r2
 8005204:	d030      	beq.n	8005268 <HAL_DMA_Abort+0x268>
 8005206:	3218      	adds	r2, #24
 8005208:	4293      	cmp	r3, r2
 800520a:	d02d      	beq.n	8005268 <HAL_DMA_Abort+0x268>
 800520c:	3218      	adds	r2, #24
 800520e:	4293      	cmp	r3, r2
 8005210:	d02a      	beq.n	8005268 <HAL_DMA_Abort+0x268>
 8005212:	3218      	adds	r2, #24
 8005214:	4293      	cmp	r3, r2
 8005216:	d027      	beq.n	8005268 <HAL_DMA_Abort+0x268>
 8005218:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800521c:	4293      	cmp	r3, r2
 800521e:	d023      	beq.n	8005268 <HAL_DMA_Abort+0x268>
 8005220:	3218      	adds	r2, #24
 8005222:	4293      	cmp	r3, r2
 8005224:	d020      	beq.n	8005268 <HAL_DMA_Abort+0x268>
 8005226:	3218      	adds	r2, #24
 8005228:	4293      	cmp	r3, r2
 800522a:	d01d      	beq.n	8005268 <HAL_DMA_Abort+0x268>
 800522c:	3218      	adds	r2, #24
 800522e:	4293      	cmp	r3, r2
 8005230:	d01a      	beq.n	8005268 <HAL_DMA_Abort+0x268>
 8005232:	3218      	adds	r2, #24
 8005234:	4293      	cmp	r3, r2
 8005236:	d017      	beq.n	8005268 <HAL_DMA_Abort+0x268>
 8005238:	3218      	adds	r2, #24
 800523a:	4293      	cmp	r3, r2
 800523c:	d014      	beq.n	8005268 <HAL_DMA_Abort+0x268>
 800523e:	3218      	adds	r2, #24
 8005240:	4293      	cmp	r3, r2
 8005242:	d011      	beq.n	8005268 <HAL_DMA_Abort+0x268>
 8005244:	3218      	adds	r2, #24
 8005246:	4293      	cmp	r3, r2
 8005248:	d00e      	beq.n	8005268 <HAL_DMA_Abort+0x268>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800524a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800524c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800524e:	f003 021f 	and.w	r2, r3, #31
 8005252:	2301      	movs	r3, #1
 8005254:	4093      	lsls	r3, r2
 8005256:	604b      	str	r3, [r1, #4]
 8005258:	e00d      	b.n	8005276 <HAL_DMA_Abort+0x276>
 800525a:	bf00      	nop
 800525c:	40020010 	.word	0x40020010
 8005260:	40020028 	.word	0x40020028
 8005264:	58025408 	.word	0x58025408
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005268:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800526a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800526c:	f003 021f 	and.w	r2, r3, #31
 8005270:	233f      	movs	r3, #63	@ 0x3f
 8005272:	4093      	lsls	r3, r2
 8005274:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	492e      	ldr	r1, [pc, #184]	@ (8005334 <HAL_DMA_Abort+0x334>)
 800527a:	4a2f      	ldr	r2, [pc, #188]	@ (8005338 <HAL_DMA_Abort+0x338>)
 800527c:	4293      	cmp	r3, r2
 800527e:	bf18      	it	ne
 8005280:	428b      	cmpne	r3, r1
 8005282:	d042      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 8005284:	3218      	adds	r2, #24
 8005286:	4293      	cmp	r3, r2
 8005288:	d03f      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 800528a:	3218      	adds	r2, #24
 800528c:	4293      	cmp	r3, r2
 800528e:	d03c      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 8005290:	3218      	adds	r2, #24
 8005292:	4293      	cmp	r3, r2
 8005294:	d039      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 8005296:	3218      	adds	r2, #24
 8005298:	4293      	cmp	r3, r2
 800529a:	d036      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 800529c:	3218      	adds	r2, #24
 800529e:	4293      	cmp	r3, r2
 80052a0:	d033      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 80052a2:	3218      	adds	r2, #24
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d030      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 80052a8:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d02c      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 80052b0:	3218      	adds	r2, #24
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d029      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 80052b6:	3218      	adds	r2, #24
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d026      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 80052bc:	3218      	adds	r2, #24
 80052be:	4293      	cmp	r3, r2
 80052c0:	d023      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 80052c2:	3218      	adds	r2, #24
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d020      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 80052c8:	3218      	adds	r2, #24
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d01d      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 80052ce:	3218      	adds	r2, #24
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d01a      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 80052d4:	3218      	adds	r2, #24
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d017      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 80052da:	4a18      	ldr	r2, [pc, #96]	@ (800533c <HAL_DMA_Abort+0x33c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d014      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 80052e0:	3214      	adds	r2, #20
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d011      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 80052e6:	3214      	adds	r2, #20
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00e      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 80052ec:	3214      	adds	r2, #20
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00b      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 80052f2:	3214      	adds	r2, #20
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d008      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 80052f8:	3214      	adds	r2, #20
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d005      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 80052fe:	3214      	adds	r2, #20
 8005300:	4293      	cmp	r3, r2
 8005302:	d002      	beq.n	800530a <HAL_DMA_Abort+0x30a>
 8005304:	3214      	adds	r2, #20
 8005306:	4293      	cmp	r3, r2
 8005308:	d10b      	bne.n	8005322 <HAL_DMA_Abort+0x322>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800530a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800530c:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800530e:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8005310:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8005312:	b133      	cbz	r3, 8005322 <HAL_DMA_Abort+0x322>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800531a:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800531c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800531e:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8005320:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005322:	2301      	movs	r3, #1
 8005324:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8005328:	2000      	movs	r0, #0
 800532a:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 800532e:	e67a      	b.n	8005026 <HAL_DMA_Abort+0x26>
    return HAL_ERROR;
 8005330:	2001      	movs	r0, #1
 8005332:	e678      	b.n	8005026 <HAL_DMA_Abort+0x26>
 8005334:	40020010 	.word	0x40020010
 8005338:	40020028 	.word	0x40020028
 800533c:	58025408 	.word	0x58025408

08005340 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8005340:	2800      	cmp	r0, #0
 8005342:	f000 8128 	beq.w	8005596 <HAL_DMA_Abort_IT+0x256>
{
 8005346:	b508      	push	{r3, lr}
 8005348:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800534a:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d003      	beq.n	800535c <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005354:	2380      	movs	r3, #128	@ 0x80
 8005356:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8005358:	2001      	movs	r0, #1
}
 800535a:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800535c:	6803      	ldr	r3, [r0, #0]
 800535e:	4890      	ldr	r0, [pc, #576]	@ (80055a0 <HAL_DMA_Abort_IT+0x260>)
 8005360:	4990      	ldr	r1, [pc, #576]	@ (80055a4 <HAL_DMA_Abort_IT+0x264>)
 8005362:	428b      	cmp	r3, r1
 8005364:	bf18      	it	ne
 8005366:	4283      	cmpne	r3, r0
 8005368:	bf0c      	ite	eq
 800536a:	2001      	moveq	r0, #1
 800536c:	2000      	movne	r0, #0
 800536e:	d065      	beq.n	800543c <HAL_DMA_Abort_IT+0xfc>
 8005370:	3118      	adds	r1, #24
 8005372:	428b      	cmp	r3, r1
 8005374:	d062      	beq.n	800543c <HAL_DMA_Abort_IT+0xfc>
 8005376:	3118      	adds	r1, #24
 8005378:	428b      	cmp	r3, r1
 800537a:	d05f      	beq.n	800543c <HAL_DMA_Abort_IT+0xfc>
 800537c:	3118      	adds	r1, #24
 800537e:	428b      	cmp	r3, r1
 8005380:	d05c      	beq.n	800543c <HAL_DMA_Abort_IT+0xfc>
 8005382:	3118      	adds	r1, #24
 8005384:	428b      	cmp	r3, r1
 8005386:	d059      	beq.n	800543c <HAL_DMA_Abort_IT+0xfc>
 8005388:	3118      	adds	r1, #24
 800538a:	428b      	cmp	r3, r1
 800538c:	d056      	beq.n	800543c <HAL_DMA_Abort_IT+0xfc>
 800538e:	3118      	adds	r1, #24
 8005390:	428b      	cmp	r3, r1
 8005392:	d053      	beq.n	800543c <HAL_DMA_Abort_IT+0xfc>
 8005394:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8005398:	428b      	cmp	r3, r1
 800539a:	d04f      	beq.n	800543c <HAL_DMA_Abort_IT+0xfc>
 800539c:	3118      	adds	r1, #24
 800539e:	428b      	cmp	r3, r1
 80053a0:	d04c      	beq.n	800543c <HAL_DMA_Abort_IT+0xfc>
 80053a2:	3118      	adds	r1, #24
 80053a4:	428b      	cmp	r3, r1
 80053a6:	d049      	beq.n	800543c <HAL_DMA_Abort_IT+0xfc>
 80053a8:	3118      	adds	r1, #24
 80053aa:	428b      	cmp	r3, r1
 80053ac:	d046      	beq.n	800543c <HAL_DMA_Abort_IT+0xfc>
 80053ae:	3118      	adds	r1, #24
 80053b0:	428b      	cmp	r3, r1
 80053b2:	d043      	beq.n	800543c <HAL_DMA_Abort_IT+0xfc>
 80053b4:	3118      	adds	r1, #24
 80053b6:	428b      	cmp	r3, r1
 80053b8:	d040      	beq.n	800543c <HAL_DMA_Abort_IT+0xfc>
 80053ba:	3118      	adds	r1, #24
 80053bc:	428b      	cmp	r3, r1
 80053be:	d03d      	beq.n	800543c <HAL_DMA_Abort_IT+0xfc>
 80053c0:	3118      	adds	r1, #24
 80053c2:	428b      	cmp	r3, r1
 80053c4:	d03a      	beq.n	800543c <HAL_DMA_Abort_IT+0xfc>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80053c6:	6819      	ldr	r1, [r3, #0]
 80053c8:	f021 010e 	bic.w	r1, r1, #14
 80053cc:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 80053ce:	6813      	ldr	r3, [r2, #0]
 80053d0:	4873      	ldr	r0, [pc, #460]	@ (80055a0 <HAL_DMA_Abort_IT+0x260>)
 80053d2:	4974      	ldr	r1, [pc, #464]	@ (80055a4 <HAL_DMA_Abort_IT+0x264>)
 80053d4:	428b      	cmp	r3, r1
 80053d6:	bf18      	it	ne
 80053d8:	4283      	cmpne	r3, r0
 80053da:	d06a      	beq.n	80054b2 <HAL_DMA_Abort_IT+0x172>
 80053dc:	4972      	ldr	r1, [pc, #456]	@ (80055a8 <HAL_DMA_Abort_IT+0x268>)
 80053de:	428b      	cmp	r3, r1
 80053e0:	d067      	beq.n	80054b2 <HAL_DMA_Abort_IT+0x172>
 80053e2:	3118      	adds	r1, #24
 80053e4:	428b      	cmp	r3, r1
 80053e6:	d064      	beq.n	80054b2 <HAL_DMA_Abort_IT+0x172>
 80053e8:	3118      	adds	r1, #24
 80053ea:	428b      	cmp	r3, r1
 80053ec:	d061      	beq.n	80054b2 <HAL_DMA_Abort_IT+0x172>
 80053ee:	3118      	adds	r1, #24
 80053f0:	428b      	cmp	r3, r1
 80053f2:	d05e      	beq.n	80054b2 <HAL_DMA_Abort_IT+0x172>
 80053f4:	3118      	adds	r1, #24
 80053f6:	428b      	cmp	r3, r1
 80053f8:	d05b      	beq.n	80054b2 <HAL_DMA_Abort_IT+0x172>
 80053fa:	3118      	adds	r1, #24
 80053fc:	428b      	cmp	r3, r1
 80053fe:	d058      	beq.n	80054b2 <HAL_DMA_Abort_IT+0x172>
 8005400:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8005404:	428b      	cmp	r3, r1
 8005406:	d054      	beq.n	80054b2 <HAL_DMA_Abort_IT+0x172>
 8005408:	3118      	adds	r1, #24
 800540a:	428b      	cmp	r3, r1
 800540c:	d051      	beq.n	80054b2 <HAL_DMA_Abort_IT+0x172>
 800540e:	3118      	adds	r1, #24
 8005410:	428b      	cmp	r3, r1
 8005412:	d04e      	beq.n	80054b2 <HAL_DMA_Abort_IT+0x172>
 8005414:	3118      	adds	r1, #24
 8005416:	428b      	cmp	r3, r1
 8005418:	d04b      	beq.n	80054b2 <HAL_DMA_Abort_IT+0x172>
 800541a:	3118      	adds	r1, #24
 800541c:	428b      	cmp	r3, r1
 800541e:	d048      	beq.n	80054b2 <HAL_DMA_Abort_IT+0x172>
 8005420:	3118      	adds	r1, #24
 8005422:	428b      	cmp	r3, r1
 8005424:	d045      	beq.n	80054b2 <HAL_DMA_Abort_IT+0x172>
 8005426:	3118      	adds	r1, #24
 8005428:	428b      	cmp	r3, r1
 800542a:	d042      	beq.n	80054b2 <HAL_DMA_Abort_IT+0x172>
 800542c:	3118      	adds	r1, #24
 800542e:	428b      	cmp	r3, r1
 8005430:	d03f      	beq.n	80054b2 <HAL_DMA_Abort_IT+0x172>
 8005432:	6819      	ldr	r1, [r3, #0]
 8005434:	f021 0101 	bic.w	r1, r1, #1
 8005438:	6019      	str	r1, [r3, #0]
 800543a:	e03e      	b.n	80054ba <HAL_DMA_Abort_IT+0x17a>
      hdma->State = HAL_DMA_STATE_ABORT;
 800543c:	2104      	movs	r1, #4
 800543e:	f882 1035 	strb.w	r1, [r2, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8005442:	bb80      	cbnz	r0, 80054a6 <HAL_DMA_Abort_IT+0x166>
 8005444:	4a58      	ldr	r2, [pc, #352]	@ (80055a8 <HAL_DMA_Abort_IT+0x268>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d02d      	beq.n	80054a6 <HAL_DMA_Abort_IT+0x166>
 800544a:	3218      	adds	r2, #24
 800544c:	4293      	cmp	r3, r2
 800544e:	d02a      	beq.n	80054a6 <HAL_DMA_Abort_IT+0x166>
 8005450:	3218      	adds	r2, #24
 8005452:	4293      	cmp	r3, r2
 8005454:	d027      	beq.n	80054a6 <HAL_DMA_Abort_IT+0x166>
 8005456:	3218      	adds	r2, #24
 8005458:	4293      	cmp	r3, r2
 800545a:	d024      	beq.n	80054a6 <HAL_DMA_Abort_IT+0x166>
 800545c:	3218      	adds	r2, #24
 800545e:	4293      	cmp	r3, r2
 8005460:	d021      	beq.n	80054a6 <HAL_DMA_Abort_IT+0x166>
 8005462:	3218      	adds	r2, #24
 8005464:	4293      	cmp	r3, r2
 8005466:	d01e      	beq.n	80054a6 <HAL_DMA_Abort_IT+0x166>
 8005468:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800546c:	4293      	cmp	r3, r2
 800546e:	d01a      	beq.n	80054a6 <HAL_DMA_Abort_IT+0x166>
 8005470:	3218      	adds	r2, #24
 8005472:	4293      	cmp	r3, r2
 8005474:	d017      	beq.n	80054a6 <HAL_DMA_Abort_IT+0x166>
 8005476:	3218      	adds	r2, #24
 8005478:	4293      	cmp	r3, r2
 800547a:	d014      	beq.n	80054a6 <HAL_DMA_Abort_IT+0x166>
 800547c:	3218      	adds	r2, #24
 800547e:	4293      	cmp	r3, r2
 8005480:	d011      	beq.n	80054a6 <HAL_DMA_Abort_IT+0x166>
 8005482:	3218      	adds	r2, #24
 8005484:	4293      	cmp	r3, r2
 8005486:	d00e      	beq.n	80054a6 <HAL_DMA_Abort_IT+0x166>
 8005488:	3218      	adds	r2, #24
 800548a:	4293      	cmp	r3, r2
 800548c:	d00b      	beq.n	80054a6 <HAL_DMA_Abort_IT+0x166>
 800548e:	3218      	adds	r2, #24
 8005490:	4293      	cmp	r3, r2
 8005492:	d008      	beq.n	80054a6 <HAL_DMA_Abort_IT+0x166>
 8005494:	3218      	adds	r2, #24
 8005496:	4293      	cmp	r3, r2
 8005498:	d005      	beq.n	80054a6 <HAL_DMA_Abort_IT+0x166>
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	f022 0201 	bic.w	r2, r2, #1
 80054a0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80054a2:	2000      	movs	r0, #0
 80054a4:	e759      	b.n	800535a <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	f022 0201 	bic.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80054ae:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 80054b0:	e753      	b.n	800535a <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 80054b2:	6819      	ldr	r1, [r3, #0]
 80054b4:	f021 0101 	bic.w	r1, r1, #1
 80054b8:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054ba:	6813      	ldr	r3, [r2, #0]
 80054bc:	4838      	ldr	r0, [pc, #224]	@ (80055a0 <HAL_DMA_Abort_IT+0x260>)
 80054be:	4939      	ldr	r1, [pc, #228]	@ (80055a4 <HAL_DMA_Abort_IT+0x264>)
 80054c0:	428b      	cmp	r3, r1
 80054c2:	bf18      	it	ne
 80054c4:	4283      	cmpne	r3, r0
 80054c6:	d042      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 80054c8:	3118      	adds	r1, #24
 80054ca:	428b      	cmp	r3, r1
 80054cc:	d03f      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 80054ce:	3118      	adds	r1, #24
 80054d0:	428b      	cmp	r3, r1
 80054d2:	d03c      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 80054d4:	3118      	adds	r1, #24
 80054d6:	428b      	cmp	r3, r1
 80054d8:	d039      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 80054da:	3118      	adds	r1, #24
 80054dc:	428b      	cmp	r3, r1
 80054de:	d036      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 80054e0:	3118      	adds	r1, #24
 80054e2:	428b      	cmp	r3, r1
 80054e4:	d033      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 80054e6:	3118      	adds	r1, #24
 80054e8:	428b      	cmp	r3, r1
 80054ea:	d030      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 80054ec:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80054f0:	428b      	cmp	r3, r1
 80054f2:	d02c      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 80054f4:	3118      	adds	r1, #24
 80054f6:	428b      	cmp	r3, r1
 80054f8:	d029      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 80054fa:	3118      	adds	r1, #24
 80054fc:	428b      	cmp	r3, r1
 80054fe:	d026      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 8005500:	3118      	adds	r1, #24
 8005502:	428b      	cmp	r3, r1
 8005504:	d023      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 8005506:	3118      	adds	r1, #24
 8005508:	428b      	cmp	r3, r1
 800550a:	d020      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 800550c:	3118      	adds	r1, #24
 800550e:	428b      	cmp	r3, r1
 8005510:	d01d      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 8005512:	3118      	adds	r1, #24
 8005514:	428b      	cmp	r3, r1
 8005516:	d01a      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 8005518:	3118      	adds	r1, #24
 800551a:	428b      	cmp	r3, r1
 800551c:	d017      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 800551e:	4923      	ldr	r1, [pc, #140]	@ (80055ac <HAL_DMA_Abort_IT+0x26c>)
 8005520:	428b      	cmp	r3, r1
 8005522:	d014      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 8005524:	3114      	adds	r1, #20
 8005526:	428b      	cmp	r3, r1
 8005528:	d011      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 800552a:	3114      	adds	r1, #20
 800552c:	428b      	cmp	r3, r1
 800552e:	d00e      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 8005530:	3114      	adds	r1, #20
 8005532:	428b      	cmp	r3, r1
 8005534:	d00b      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 8005536:	3114      	adds	r1, #20
 8005538:	428b      	cmp	r3, r1
 800553a:	d008      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 800553c:	3114      	adds	r1, #20
 800553e:	428b      	cmp	r3, r1
 8005540:	d005      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 8005542:	3114      	adds	r1, #20
 8005544:	428b      	cmp	r3, r1
 8005546:	d002      	beq.n	800554e <HAL_DMA_Abort_IT+0x20e>
 8005548:	3114      	adds	r1, #20
 800554a:	428b      	cmp	r3, r1
 800554c:	d117      	bne.n	800557e <HAL_DMA_Abort_IT+0x23e>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800554e:	6e11      	ldr	r1, [r2, #96]	@ 0x60
 8005550:	680b      	ldr	r3, [r1, #0]
 8005552:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005556:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005558:	6d90      	ldr	r0, [r2, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800555a:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 800555c:	f003 011f 	and.w	r1, r3, #31
 8005560:	2301      	movs	r3, #1
 8005562:	408b      	lsls	r3, r1
 8005564:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005566:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8005568:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 800556a:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800556c:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 800556e:	b133      	cbz	r3, 800557e <HAL_DMA_Abort_IT+0x23e>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005570:	6819      	ldr	r1, [r3, #0]
 8005572:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8005576:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005578:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800557a:	6f51      	ldr	r1, [r2, #116]	@ 0x74
 800557c:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 800557e:	2301      	movs	r3, #1
 8005580:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8005584:	2300      	movs	r3, #0
 8005586:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 800558a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800558c:	b12b      	cbz	r3, 800559a <HAL_DMA_Abort_IT+0x25a>
        hdma->XferAbortCallback(hdma);
 800558e:	4610      	mov	r0, r2
 8005590:	4798      	blx	r3
  return HAL_OK;
 8005592:	2000      	movs	r0, #0
 8005594:	e6e1      	b.n	800535a <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 8005596:	2001      	movs	r0, #1
}
 8005598:	4770      	bx	lr
  return HAL_OK;
 800559a:	2000      	movs	r0, #0
 800559c:	e6dd      	b.n	800535a <HAL_DMA_Abort_IT+0x1a>
 800559e:	bf00      	nop
 80055a0:	40020010 	.word	0x40020010
 80055a4:	40020028 	.word	0x40020028
 80055a8:	40020040 	.word	0x40020040
 80055ac:	58025408 	.word	0x58025408

080055b0 <HAL_DMA_IRQHandler>:
{
 80055b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055b2:	b083      	sub	sp, #12
 80055b4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80055ba:	4b7d      	ldr	r3, [pc, #500]	@ (80057b0 <HAL_DMA_IRQHandler+0x200>)
 80055bc:	681d      	ldr	r5, [r3, #0]
 80055be:	4b7d      	ldr	r3, [pc, #500]	@ (80057b4 <HAL_DMA_IRQHandler+0x204>)
 80055c0:	fba3 3505 	umull	r3, r5, r3, r5
 80055c4:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055c6:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr_dma  = regs_dma->ISR;
 80055c8:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 80055ca:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80055ce:	6803      	ldr	r3, [r0, #0]
 80055d0:	4979      	ldr	r1, [pc, #484]	@ (80057b8 <HAL_DMA_IRQHandler+0x208>)
 80055d2:	487a      	ldr	r0, [pc, #488]	@ (80057bc <HAL_DMA_IRQHandler+0x20c>)
 80055d4:	4283      	cmp	r3, r0
 80055d6:	bf18      	it	ne
 80055d8:	428b      	cmpne	r3, r1
 80055da:	bf0c      	ite	eq
 80055dc:	2001      	moveq	r0, #1
 80055de:	2000      	movne	r0, #0
 80055e0:	d061      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xf6>
 80055e2:	4a77      	ldr	r2, [pc, #476]	@ (80057c0 <HAL_DMA_IRQHandler+0x210>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d05e      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xf6>
 80055e8:	3218      	adds	r2, #24
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d05b      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xf6>
 80055ee:	3218      	adds	r2, #24
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d058      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xf6>
 80055f4:	3218      	adds	r2, #24
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d055      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xf6>
 80055fa:	3218      	adds	r2, #24
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d052      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xf6>
 8005600:	3218      	adds	r2, #24
 8005602:	4293      	cmp	r3, r2
 8005604:	d04f      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xf6>
 8005606:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800560a:	4293      	cmp	r3, r2
 800560c:	d04b      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xf6>
 800560e:	3218      	adds	r2, #24
 8005610:	4293      	cmp	r3, r2
 8005612:	d048      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xf6>
 8005614:	3218      	adds	r2, #24
 8005616:	4293      	cmp	r3, r2
 8005618:	d045      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xf6>
 800561a:	3218      	adds	r2, #24
 800561c:	4293      	cmp	r3, r2
 800561e:	d042      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xf6>
 8005620:	3218      	adds	r2, #24
 8005622:	4293      	cmp	r3, r2
 8005624:	d03f      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xf6>
 8005626:	3218      	adds	r2, #24
 8005628:	4293      	cmp	r3, r2
 800562a:	d03c      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xf6>
 800562c:	3218      	adds	r2, #24
 800562e:	4293      	cmp	r3, r2
 8005630:	d039      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xf6>
 8005632:	3218      	adds	r2, #24
 8005634:	4293      	cmp	r3, r2
 8005636:	d036      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005638:	4962      	ldr	r1, [pc, #392]	@ (80057c4 <HAL_DMA_IRQHandler+0x214>)
 800563a:	4a63      	ldr	r2, [pc, #396]	@ (80057c8 <HAL_DMA_IRQHandler+0x218>)
 800563c:	4293      	cmp	r3, r2
 800563e:	bf18      	it	ne
 8005640:	428b      	cmpne	r3, r1
 8005642:	d012      	beq.n	800566a <HAL_DMA_IRQHandler+0xba>
 8005644:	4a61      	ldr	r2, [pc, #388]	@ (80057cc <HAL_DMA_IRQHandler+0x21c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00f      	beq.n	800566a <HAL_DMA_IRQHandler+0xba>
 800564a:	3214      	adds	r2, #20
 800564c:	4293      	cmp	r3, r2
 800564e:	d00c      	beq.n	800566a <HAL_DMA_IRQHandler+0xba>
 8005650:	3214      	adds	r2, #20
 8005652:	4293      	cmp	r3, r2
 8005654:	d009      	beq.n	800566a <HAL_DMA_IRQHandler+0xba>
 8005656:	3214      	adds	r2, #20
 8005658:	4293      	cmp	r3, r2
 800565a:	d006      	beq.n	800566a <HAL_DMA_IRQHandler+0xba>
 800565c:	3214      	adds	r2, #20
 800565e:	4293      	cmp	r3, r2
 8005660:	d003      	beq.n	800566a <HAL_DMA_IRQHandler+0xba>
 8005662:	3214      	adds	r2, #20
 8005664:	4293      	cmp	r3, r2
 8005666:	f040 8261 	bne.w	8005b2c <HAL_DMA_IRQHandler+0x57c>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800566a:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800566c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800566e:	f001 011f 	and.w	r1, r1, #31
 8005672:	2004      	movs	r0, #4
 8005674:	4088      	lsls	r0, r1
 8005676:	ea10 0f0c 	tst.w	r0, ip
 800567a:	f000 82a7 	beq.w	8005bcc <HAL_DMA_IRQHandler+0x61c>
 800567e:	f012 0f04 	tst.w	r2, #4
 8005682:	f000 82a3 	beq.w	8005bcc <HAL_DMA_IRQHandler+0x61c>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005686:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005688:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800568c:	f000 825a 	beq.w	8005b44 <HAL_DMA_IRQHandler+0x594>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005690:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8005694:	f040 8250 	bne.w	8005b38 <HAL_DMA_IRQHandler+0x588>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005698:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 8246 	beq.w	8005b2c <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1HalfCpltCallback(hdma);
 80056a0:	4620      	mov	r0, r4
 80056a2:	4798      	blx	r3
 80056a4:	e242      	b.n	8005b2c <HAL_DMA_IRQHandler+0x57c>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056a6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80056a8:	f002 011f 	and.w	r1, r2, #31
 80056ac:	2208      	movs	r2, #8
 80056ae:	408a      	lsls	r2, r1
 80056b0:	4232      	tst	r2, r6
 80056b2:	d041      	beq.n	8005738 <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80056b4:	bb70      	cbnz	r0, 8005714 <HAL_DMA_IRQHandler+0x164>
 80056b6:	4a42      	ldr	r2, [pc, #264]	@ (80057c0 <HAL_DMA_IRQHandler+0x210>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d02b      	beq.n	8005714 <HAL_DMA_IRQHandler+0x164>
 80056bc:	3218      	adds	r2, #24
 80056be:	4293      	cmp	r3, r2
 80056c0:	d028      	beq.n	8005714 <HAL_DMA_IRQHandler+0x164>
 80056c2:	3218      	adds	r2, #24
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d025      	beq.n	8005714 <HAL_DMA_IRQHandler+0x164>
 80056c8:	3218      	adds	r2, #24
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d022      	beq.n	8005714 <HAL_DMA_IRQHandler+0x164>
 80056ce:	3218      	adds	r2, #24
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d01f      	beq.n	8005714 <HAL_DMA_IRQHandler+0x164>
 80056d4:	3218      	adds	r2, #24
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d01c      	beq.n	8005714 <HAL_DMA_IRQHandler+0x164>
 80056da:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80056de:	4293      	cmp	r3, r2
 80056e0:	d018      	beq.n	8005714 <HAL_DMA_IRQHandler+0x164>
 80056e2:	3218      	adds	r2, #24
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d015      	beq.n	8005714 <HAL_DMA_IRQHandler+0x164>
 80056e8:	3218      	adds	r2, #24
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d012      	beq.n	8005714 <HAL_DMA_IRQHandler+0x164>
 80056ee:	3218      	adds	r2, #24
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00f      	beq.n	8005714 <HAL_DMA_IRQHandler+0x164>
 80056f4:	3218      	adds	r2, #24
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00c      	beq.n	8005714 <HAL_DMA_IRQHandler+0x164>
 80056fa:	3218      	adds	r2, #24
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d009      	beq.n	8005714 <HAL_DMA_IRQHandler+0x164>
 8005700:	3218      	adds	r2, #24
 8005702:	4293      	cmp	r3, r2
 8005704:	d006      	beq.n	8005714 <HAL_DMA_IRQHandler+0x164>
 8005706:	3218      	adds	r2, #24
 8005708:	4293      	cmp	r3, r2
 800570a:	d003      	beq.n	8005714 <HAL_DMA_IRQHandler+0x164>
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8005712:	e002      	b.n	800571a <HAL_DMA_IRQHandler+0x16a>
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800571a:	b16a      	cbz	r2, 8005738 <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	f022 0204 	bic.w	r2, r2, #4
 8005722:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005724:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005726:	f003 021f 	and.w	r2, r3, #31
 800572a:	2308      	movs	r3, #8
 800572c:	4093      	lsls	r3, r2
 800572e:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005730:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005732:	f043 0301 	orr.w	r3, r3, #1
 8005736:	6563      	str	r3, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005738:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800573a:	f002 021f 	and.w	r2, r2, #31
 800573e:	fa26 f302 	lsr.w	r3, r6, r2
 8005742:	f013 0f01 	tst.w	r3, #1
 8005746:	d047      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	481b      	ldr	r0, [pc, #108]	@ (80057b8 <HAL_DMA_IRQHandler+0x208>)
 800574c:	491b      	ldr	r1, [pc, #108]	@ (80057bc <HAL_DMA_IRQHandler+0x20c>)
 800574e:	428b      	cmp	r3, r1
 8005750:	bf18      	it	ne
 8005752:	4283      	cmpne	r3, r0
 8005754:	d03c      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x220>
 8005756:	3118      	adds	r1, #24
 8005758:	428b      	cmp	r3, r1
 800575a:	d039      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x220>
 800575c:	3118      	adds	r1, #24
 800575e:	428b      	cmp	r3, r1
 8005760:	d036      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x220>
 8005762:	3118      	adds	r1, #24
 8005764:	428b      	cmp	r3, r1
 8005766:	d033      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x220>
 8005768:	3118      	adds	r1, #24
 800576a:	428b      	cmp	r3, r1
 800576c:	d030      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x220>
 800576e:	3118      	adds	r1, #24
 8005770:	428b      	cmp	r3, r1
 8005772:	d02d      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x220>
 8005774:	3118      	adds	r1, #24
 8005776:	428b      	cmp	r3, r1
 8005778:	d02a      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x220>
 800577a:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800577e:	428b      	cmp	r3, r1
 8005780:	d026      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x220>
 8005782:	3118      	adds	r1, #24
 8005784:	428b      	cmp	r3, r1
 8005786:	d023      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x220>
 8005788:	3118      	adds	r1, #24
 800578a:	428b      	cmp	r3, r1
 800578c:	d020      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x220>
 800578e:	3118      	adds	r1, #24
 8005790:	428b      	cmp	r3, r1
 8005792:	d01d      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x220>
 8005794:	3118      	adds	r1, #24
 8005796:	428b      	cmp	r3, r1
 8005798:	d01a      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x220>
 800579a:	3118      	adds	r1, #24
 800579c:	428b      	cmp	r3, r1
 800579e:	d017      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x220>
 80057a0:	3118      	adds	r1, #24
 80057a2:	428b      	cmp	r3, r1
 80057a4:	d014      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x220>
 80057a6:	3118      	adds	r1, #24
 80057a8:	428b      	cmp	r3, r1
 80057aa:	d011      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x220>
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	e013      	b.n	80057d8 <HAL_DMA_IRQHandler+0x228>
 80057b0:	24000004 	.word	0x24000004
 80057b4:	1b4e81b5 	.word	0x1b4e81b5
 80057b8:	40020010 	.word	0x40020010
 80057bc:	40020028 	.word	0x40020028
 80057c0:	40020040 	.word	0x40020040
 80057c4:	58025408 	.word	0x58025408
 80057c8:	5802541c 	.word	0x5802541c
 80057cc:	58025430 	.word	0x58025430
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80057d6:	d13b      	bne.n	8005850 <HAL_DMA_IRQHandler+0x2a0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057d8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	2204      	movs	r2, #4
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	4233      	tst	r3, r6
 80057e6:	d03f      	beq.n	8005868 <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80057e8:	6822      	ldr	r2, [r4, #0]
 80057ea:	4896      	ldr	r0, [pc, #600]	@ (8005a44 <HAL_DMA_IRQHandler+0x494>)
 80057ec:	4996      	ldr	r1, [pc, #600]	@ (8005a48 <HAL_DMA_IRQHandler+0x498>)
 80057ee:	428a      	cmp	r2, r1
 80057f0:	bf18      	it	ne
 80057f2:	4282      	cmpne	r2, r0
 80057f4:	d034      	beq.n	8005860 <HAL_DMA_IRQHandler+0x2b0>
 80057f6:	3118      	adds	r1, #24
 80057f8:	428a      	cmp	r2, r1
 80057fa:	d031      	beq.n	8005860 <HAL_DMA_IRQHandler+0x2b0>
 80057fc:	3118      	adds	r1, #24
 80057fe:	428a      	cmp	r2, r1
 8005800:	d02e      	beq.n	8005860 <HAL_DMA_IRQHandler+0x2b0>
 8005802:	3118      	adds	r1, #24
 8005804:	428a      	cmp	r2, r1
 8005806:	d02b      	beq.n	8005860 <HAL_DMA_IRQHandler+0x2b0>
 8005808:	3118      	adds	r1, #24
 800580a:	428a      	cmp	r2, r1
 800580c:	d028      	beq.n	8005860 <HAL_DMA_IRQHandler+0x2b0>
 800580e:	3118      	adds	r1, #24
 8005810:	428a      	cmp	r2, r1
 8005812:	d025      	beq.n	8005860 <HAL_DMA_IRQHandler+0x2b0>
 8005814:	3118      	adds	r1, #24
 8005816:	428a      	cmp	r2, r1
 8005818:	d022      	beq.n	8005860 <HAL_DMA_IRQHandler+0x2b0>
 800581a:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800581e:	428a      	cmp	r2, r1
 8005820:	d01e      	beq.n	8005860 <HAL_DMA_IRQHandler+0x2b0>
 8005822:	3118      	adds	r1, #24
 8005824:	428a      	cmp	r2, r1
 8005826:	d01b      	beq.n	8005860 <HAL_DMA_IRQHandler+0x2b0>
 8005828:	3118      	adds	r1, #24
 800582a:	428a      	cmp	r2, r1
 800582c:	d018      	beq.n	8005860 <HAL_DMA_IRQHandler+0x2b0>
 800582e:	3118      	adds	r1, #24
 8005830:	428a      	cmp	r2, r1
 8005832:	d015      	beq.n	8005860 <HAL_DMA_IRQHandler+0x2b0>
 8005834:	3118      	adds	r1, #24
 8005836:	428a      	cmp	r2, r1
 8005838:	d012      	beq.n	8005860 <HAL_DMA_IRQHandler+0x2b0>
 800583a:	3118      	adds	r1, #24
 800583c:	428a      	cmp	r2, r1
 800583e:	d00f      	beq.n	8005860 <HAL_DMA_IRQHandler+0x2b0>
 8005840:	3118      	adds	r1, #24
 8005842:	428a      	cmp	r2, r1
 8005844:	d00c      	beq.n	8005860 <HAL_DMA_IRQHandler+0x2b0>
 8005846:	3118      	adds	r1, #24
 8005848:	428a      	cmp	r2, r1
 800584a:	d009      	beq.n	8005860 <HAL_DMA_IRQHandler+0x2b0>
 800584c:	6813      	ldr	r3, [r2, #0]
 800584e:	e00b      	b.n	8005868 <HAL_DMA_IRQHandler+0x2b8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005850:	2301      	movs	r3, #1
 8005852:	4093      	lsls	r3, r2
 8005854:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005856:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005858:	f043 0302 	orr.w	r3, r3, #2
 800585c:	6563      	str	r3, [r4, #84]	@ 0x54
 800585e:	e7bb      	b.n	80057d8 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005860:	6812      	ldr	r2, [r2, #0]
 8005862:	f012 0f02 	tst.w	r2, #2
 8005866:	d13d      	bne.n	80058e4 <HAL_DMA_IRQHandler+0x334>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005868:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800586a:	f003 031f 	and.w	r3, r3, #31
 800586e:	2210      	movs	r2, #16
 8005870:	fa02 f303 	lsl.w	r3, r2, r3
 8005874:	4233      	tst	r3, r6
 8005876:	d05f      	beq.n	8005938 <HAL_DMA_IRQHandler+0x388>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005878:	6822      	ldr	r2, [r4, #0]
 800587a:	4872      	ldr	r0, [pc, #456]	@ (8005a44 <HAL_DMA_IRQHandler+0x494>)
 800587c:	4972      	ldr	r1, [pc, #456]	@ (8005a48 <HAL_DMA_IRQHandler+0x498>)
 800587e:	428a      	cmp	r2, r1
 8005880:	bf18      	it	ne
 8005882:	4282      	cmpne	r2, r0
 8005884:	d034      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x340>
 8005886:	3118      	adds	r1, #24
 8005888:	428a      	cmp	r2, r1
 800588a:	d031      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x340>
 800588c:	3118      	adds	r1, #24
 800588e:	428a      	cmp	r2, r1
 8005890:	d02e      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x340>
 8005892:	3118      	adds	r1, #24
 8005894:	428a      	cmp	r2, r1
 8005896:	d02b      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x340>
 8005898:	3118      	adds	r1, #24
 800589a:	428a      	cmp	r2, r1
 800589c:	d028      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x340>
 800589e:	3118      	adds	r1, #24
 80058a0:	428a      	cmp	r2, r1
 80058a2:	d025      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x340>
 80058a4:	3118      	adds	r1, #24
 80058a6:	428a      	cmp	r2, r1
 80058a8:	d022      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x340>
 80058aa:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80058ae:	428a      	cmp	r2, r1
 80058b0:	d01e      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x340>
 80058b2:	3118      	adds	r1, #24
 80058b4:	428a      	cmp	r2, r1
 80058b6:	d01b      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x340>
 80058b8:	3118      	adds	r1, #24
 80058ba:	428a      	cmp	r2, r1
 80058bc:	d018      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x340>
 80058be:	3118      	adds	r1, #24
 80058c0:	428a      	cmp	r2, r1
 80058c2:	d015      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x340>
 80058c4:	3118      	adds	r1, #24
 80058c6:	428a      	cmp	r2, r1
 80058c8:	d012      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x340>
 80058ca:	3118      	adds	r1, #24
 80058cc:	428a      	cmp	r2, r1
 80058ce:	d00f      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x340>
 80058d0:	3118      	adds	r1, #24
 80058d2:	428a      	cmp	r2, r1
 80058d4:	d00c      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x340>
 80058d6:	3118      	adds	r1, #24
 80058d8:	428a      	cmp	r2, r1
 80058da:	d009      	beq.n	80058f0 <HAL_DMA_IRQHandler+0x340>
 80058dc:	6812      	ldr	r2, [r2, #0]
 80058de:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80058e2:	e008      	b.n	80058f6 <HAL_DMA_IRQHandler+0x346>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058e4:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058e6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80058e8:	f043 0304 	orr.w	r3, r3, #4
 80058ec:	6563      	str	r3, [r4, #84]	@ 0x54
 80058ee:	e7bb      	b.n	8005868 <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80058f0:	6812      	ldr	r2, [r2, #0]
 80058f2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80058f6:	b1fa      	cbz	r2, 8005938 <HAL_DMA_IRQHandler+0x388>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058f8:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8005902:	d00d      	beq.n	8005920 <HAL_DMA_IRQHandler+0x370>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800590a:	d104      	bne.n	8005916 <HAL_DMA_IRQHandler+0x366>
            if(hdma->XferHalfCpltCallback != NULL)
 800590c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800590e:	b19b      	cbz	r3, 8005938 <HAL_DMA_IRQHandler+0x388>
              hdma->XferHalfCpltCallback(hdma);
 8005910:	4620      	mov	r0, r4
 8005912:	4798      	blx	r3
 8005914:	e010      	b.n	8005938 <HAL_DMA_IRQHandler+0x388>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005916:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8005918:	b173      	cbz	r3, 8005938 <HAL_DMA_IRQHandler+0x388>
              hdma->XferM1HalfCpltCallback(hdma);
 800591a:	4620      	mov	r0, r4
 800591c:	4798      	blx	r3
 800591e:	e00b      	b.n	8005938 <HAL_DMA_IRQHandler+0x388>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8005926:	d103      	bne.n	8005930 <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	f022 0208 	bic.w	r2, r2, #8
 800592e:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8005930:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005932:	b10b      	cbz	r3, 8005938 <HAL_DMA_IRQHandler+0x388>
            hdma->XferHalfCpltCallback(hdma);
 8005934:	4620      	mov	r0, r4
 8005936:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005938:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800593a:	f003 031f 	and.w	r3, r3, #31
 800593e:	2220      	movs	r2, #32
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	4233      	tst	r3, r6
 8005946:	f000 8093 	beq.w	8005a70 <HAL_DMA_IRQHandler+0x4c0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800594a:	6822      	ldr	r2, [r4, #0]
 800594c:	483d      	ldr	r0, [pc, #244]	@ (8005a44 <HAL_DMA_IRQHandler+0x494>)
 800594e:	493e      	ldr	r1, [pc, #248]	@ (8005a48 <HAL_DMA_IRQHandler+0x498>)
 8005950:	428a      	cmp	r2, r1
 8005952:	bf18      	it	ne
 8005954:	4282      	cmpne	r2, r0
 8005956:	d02e      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x406>
 8005958:	3118      	adds	r1, #24
 800595a:	428a      	cmp	r2, r1
 800595c:	d02b      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x406>
 800595e:	3118      	adds	r1, #24
 8005960:	428a      	cmp	r2, r1
 8005962:	d028      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x406>
 8005964:	3118      	adds	r1, #24
 8005966:	428a      	cmp	r2, r1
 8005968:	d025      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x406>
 800596a:	3118      	adds	r1, #24
 800596c:	428a      	cmp	r2, r1
 800596e:	d022      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x406>
 8005970:	3118      	adds	r1, #24
 8005972:	428a      	cmp	r2, r1
 8005974:	d01f      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x406>
 8005976:	3118      	adds	r1, #24
 8005978:	428a      	cmp	r2, r1
 800597a:	d01c      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x406>
 800597c:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8005980:	428a      	cmp	r2, r1
 8005982:	d018      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x406>
 8005984:	3118      	adds	r1, #24
 8005986:	428a      	cmp	r2, r1
 8005988:	d015      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x406>
 800598a:	3118      	adds	r1, #24
 800598c:	428a      	cmp	r2, r1
 800598e:	d012      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x406>
 8005990:	3118      	adds	r1, #24
 8005992:	428a      	cmp	r2, r1
 8005994:	d00f      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x406>
 8005996:	3118      	adds	r1, #24
 8005998:	428a      	cmp	r2, r1
 800599a:	d00c      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x406>
 800599c:	3118      	adds	r1, #24
 800599e:	428a      	cmp	r2, r1
 80059a0:	d009      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x406>
 80059a2:	3118      	adds	r1, #24
 80059a4:	428a      	cmp	r2, r1
 80059a6:	d006      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x406>
 80059a8:	3118      	adds	r1, #24
 80059aa:	428a      	cmp	r2, r1
 80059ac:	d003      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x406>
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80059b4:	e002      	b.n	80059bc <HAL_DMA_IRQHandler+0x40c>
 80059b6:	6812      	ldr	r2, [r2, #0]
 80059b8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80059bc:	2a00      	cmp	r2, #0
 80059be:	d057      	beq.n	8005a70 <HAL_DMA_IRQHandler+0x4c0>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059c0:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80059c2:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d00e      	beq.n	80059ea <HAL_DMA_IRQHandler+0x43a>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80059d4:	d03a      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x49c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80059dc:	d12d      	bne.n	8005a3a <HAL_DMA_IRQHandler+0x48a>
            if(hdma->XferM1CpltCallback != NULL)
 80059de:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d045      	beq.n	8005a70 <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferM1CpltCallback(hdma);
 80059e4:	4620      	mov	r0, r4
 80059e6:	4798      	blx	r3
 80059e8:	e042      	b.n	8005a70 <HAL_DMA_IRQHandler+0x4c0>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059ea:	6822      	ldr	r2, [r4, #0]
 80059ec:	6813      	ldr	r3, [r2, #0]
 80059ee:	f023 0316 	bic.w	r3, r3, #22
 80059f2:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80059f4:	6822      	ldr	r2, [r4, #0]
 80059f6:	6953      	ldr	r3, [r2, #20]
 80059f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059fc:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005a00:	b1bb      	cbz	r3, 8005a32 <HAL_DMA_IRQHandler+0x482>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005a02:	6822      	ldr	r2, [r4, #0]
 8005a04:	6813      	ldr	r3, [r2, #0]
 8005a06:	f023 0308 	bic.w	r3, r3, #8
 8005a0a:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a0c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005a0e:	f003 021f 	and.w	r2, r3, #31
 8005a12:	233f      	movs	r3, #63	@ 0x3f
 8005a14:	4093      	lsls	r3, r2
 8005a16:	60bb      	str	r3, [r7, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8005a24:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 8080 	beq.w	8005b2c <HAL_DMA_IRQHandler+0x57c>
            hdma->XferAbortCallback(hdma);
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	4798      	blx	r3
          return;
 8005a30:	e07c      	b.n	8005b2c <HAL_DMA_IRQHandler+0x57c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a32:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1e4      	bne.n	8005a02 <HAL_DMA_IRQHandler+0x452>
 8005a38:	e7e8      	b.n	8005a0c <HAL_DMA_IRQHandler+0x45c>
            if(hdma->XferCpltCallback != NULL)
 8005a3a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005a3c:	b1c3      	cbz	r3, 8005a70 <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferCpltCallback(hdma);
 8005a3e:	4620      	mov	r0, r4
 8005a40:	4798      	blx	r3
 8005a42:	e015      	b.n	8005a70 <HAL_DMA_IRQHandler+0x4c0>
 8005a44:	40020010 	.word	0x40020010
 8005a48:	40020028 	.word	0x40020028
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8005a52:	d109      	bne.n	8005a68 <HAL_DMA_IRQHandler+0x4b8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	f022 0210 	bic.w	r2, r2, #16
 8005a5a:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 8005a62:	2300      	movs	r3, #0
 8005a64:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferCpltCallback != NULL)
 8005a68:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005a6a:	b10b      	cbz	r3, 8005a70 <HAL_DMA_IRQHandler+0x4c0>
            hdma->XferCpltCallback(hdma);
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a70:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d05a      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x57c>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005a76:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005a78:	f013 0f01 	tst.w	r3, #1
 8005a7c:	d052      	beq.n	8005b24 <HAL_DMA_IRQHandler+0x574>
        hdma->State = HAL_DMA_STATE_ABORT;
 8005a7e:	2304      	movs	r3, #4
 8005a80:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_DMA_DISABLE(hdma);
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	4996      	ldr	r1, [pc, #600]	@ (8005ce0 <HAL_DMA_IRQHandler+0x730>)
 8005a88:	4a96      	ldr	r2, [pc, #600]	@ (8005ce4 <HAL_DMA_IRQHandler+0x734>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	bf18      	it	ne
 8005a8e:	428b      	cmpne	r3, r1
 8005a90:	d02f      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x542>
 8005a92:	3218      	adds	r2, #24
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d02c      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x542>
 8005a98:	3218      	adds	r2, #24
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d029      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x542>
 8005a9e:	3218      	adds	r2, #24
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d026      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x542>
 8005aa4:	3218      	adds	r2, #24
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d023      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x542>
 8005aaa:	3218      	adds	r2, #24
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d020      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x542>
 8005ab0:	3218      	adds	r2, #24
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d01d      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x542>
 8005ab6:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d019      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x542>
 8005abe:	3218      	adds	r2, #24
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d016      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x542>
 8005ac4:	3218      	adds	r2, #24
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d013      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x542>
 8005aca:	3218      	adds	r2, #24
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d010      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x542>
 8005ad0:	3218      	adds	r2, #24
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d00d      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x542>
 8005ad6:	3218      	adds	r2, #24
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d00a      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x542>
 8005adc:	3218      	adds	r2, #24
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d007      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x542>
 8005ae2:	3218      	adds	r2, #24
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d004      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x542>
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	f022 0201 	bic.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	e003      	b.n	8005afa <HAL_DMA_IRQHandler+0x54a>
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	f022 0201 	bic.w	r2, r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8005afa:	9b01      	ldr	r3, [sp, #4]
 8005afc:	3301      	adds	r3, #1
 8005afe:	9301      	str	r3, [sp, #4]
 8005b00:	42ab      	cmp	r3, r5
 8005b02:	d804      	bhi.n	8005b0e <HAL_DMA_IRQHandler+0x55e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f013 0f01 	tst.w	r3, #1
 8005b0c:	d1f5      	bne.n	8005afa <HAL_DMA_IRQHandler+0x54a>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b0e:	6823      	ldr	r3, [r4, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f013 0f01 	tst.w	r3, #1
 8005b16:	d00b      	beq.n	8005b30 <HAL_DMA_IRQHandler+0x580>
          hdma->State = HAL_DMA_STATE_ERROR;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 8005b24:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8005b26:	b10b      	cbz	r3, 8005b2c <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 8005b28:	4620      	mov	r0, r4
 8005b2a:	4798      	blx	r3
}
 8005b2c:	b003      	add	sp, #12
 8005b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 8005b30:	2301      	movs	r3, #1
 8005b32:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
 8005b36:	e7f2      	b.n	8005b1e <HAL_DMA_IRQHandler+0x56e>
          if(hdma->XferHalfCpltCallback != NULL)
 8005b38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0f6      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x57c>
            hdma->XferHalfCpltCallback(hdma);
 8005b3e:	4620      	mov	r0, r4
 8005b40:	4798      	blx	r3
 8005b42:	e7f3      	b.n	8005b2c <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b44:	f012 0f20 	tst.w	r2, #32
 8005b48:	d13a      	bne.n	8005bc0 <HAL_DMA_IRQHandler+0x610>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	4964      	ldr	r1, [pc, #400]	@ (8005ce0 <HAL_DMA_IRQHandler+0x730>)
 8005b4e:	4a65      	ldr	r2, [pc, #404]	@ (8005ce4 <HAL_DMA_IRQHandler+0x734>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	bf18      	it	ne
 8005b54:	428b      	cmpne	r3, r1
 8005b56:	d02f      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x608>
 8005b58:	3218      	adds	r2, #24
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d02c      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x608>
 8005b5e:	3218      	adds	r2, #24
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d029      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x608>
 8005b64:	3218      	adds	r2, #24
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d026      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x608>
 8005b6a:	3218      	adds	r2, #24
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d023      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x608>
 8005b70:	3218      	adds	r2, #24
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d020      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x608>
 8005b76:	3218      	adds	r2, #24
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d01d      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x608>
 8005b7c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d019      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x608>
 8005b84:	3218      	adds	r2, #24
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d016      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x608>
 8005b8a:	3218      	adds	r2, #24
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d013      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x608>
 8005b90:	3218      	adds	r2, #24
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d010      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x608>
 8005b96:	3218      	adds	r2, #24
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00d      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x608>
 8005b9c:	3218      	adds	r2, #24
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00a      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x608>
 8005ba2:	3218      	adds	r2, #24
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d007      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x608>
 8005ba8:	3218      	adds	r2, #24
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x608>
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	f022 0204 	bic.w	r2, r2, #4
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	e003      	b.n	8005bc0 <HAL_DMA_IRQHandler+0x610>
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	f022 0208 	bic.w	r2, r2, #8
 8005bbe:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8005bc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0b2      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x57c>
          hdma->XferHalfCpltCallback(hdma);
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	4798      	blx	r3
 8005bca:	e7af      	b.n	8005b2c <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005bcc:	2002      	movs	r0, #2
 8005bce:	4088      	lsls	r0, r1
 8005bd0:	ea10 0f0c 	tst.w	r0, ip
 8005bd4:	d060      	beq.n	8005c98 <HAL_DMA_IRQHandler+0x6e8>
 8005bd6:	f012 0f02 	tst.w	r2, #2
 8005bda:	d05d      	beq.n	8005c98 <HAL_DMA_IRQHandler+0x6e8>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005bdc:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bde:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8005be2:	d00e      	beq.n	8005c02 <HAL_DMA_IRQHandler+0x652>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005be4:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8005be8:	d105      	bne.n	8005bf6 <HAL_DMA_IRQHandler+0x646>
          if(hdma->XferM1CpltCallback != NULL)
 8005bea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d09d      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1CpltCallback(hdma);
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	4798      	blx	r3
 8005bf4:	e79a      	b.n	8005b2c <HAL_DMA_IRQHandler+0x57c>
          if(hdma->XferCpltCallback != NULL)
 8005bf6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d097      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x57c>
            hdma->XferCpltCallback(hdma);
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	4798      	blx	r3
 8005c00:	e794      	b.n	8005b2c <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c02:	f012 0f20 	tst.w	r2, #32
 8005c06:	d140      	bne.n	8005c8a <HAL_DMA_IRQHandler+0x6da>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	4935      	ldr	r1, [pc, #212]	@ (8005ce0 <HAL_DMA_IRQHandler+0x730>)
 8005c0c:	4a35      	ldr	r2, [pc, #212]	@ (8005ce4 <HAL_DMA_IRQHandler+0x734>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	bf18      	it	ne
 8005c12:	428b      	cmpne	r3, r1
 8005c14:	d02f      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x6c6>
 8005c16:	3218      	adds	r2, #24
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d02c      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x6c6>
 8005c1c:	3218      	adds	r2, #24
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d029      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x6c6>
 8005c22:	3218      	adds	r2, #24
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d026      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x6c6>
 8005c28:	3218      	adds	r2, #24
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d023      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x6c6>
 8005c2e:	3218      	adds	r2, #24
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d020      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x6c6>
 8005c34:	3218      	adds	r2, #24
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d01d      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x6c6>
 8005c3a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d019      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x6c6>
 8005c42:	3218      	adds	r2, #24
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d016      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x6c6>
 8005c48:	3218      	adds	r2, #24
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d013      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x6c6>
 8005c4e:	3218      	adds	r2, #24
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d010      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x6c6>
 8005c54:	3218      	adds	r2, #24
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00d      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x6c6>
 8005c5a:	3218      	adds	r2, #24
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d00a      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x6c6>
 8005c60:	3218      	adds	r2, #24
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d007      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x6c6>
 8005c66:	3218      	adds	r2, #24
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d004      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x6c6>
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	f022 020a 	bic.w	r2, r2, #10
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	e003      	b.n	8005c7e <HAL_DMA_IRQHandler+0x6ce>
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	f022 0214 	bic.w	r2, r2, #20
 8005c7c:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8005c84:	2300      	movs	r3, #0
 8005c86:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8005c8a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f43f af4d 	beq.w	8005b2c <HAL_DMA_IRQHandler+0x57c>
          hdma->XferCpltCallback(hdma);
 8005c92:	4620      	mov	r0, r4
 8005c94:	4798      	blx	r3
 8005c96:	e749      	b.n	8005b2c <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005c98:	2008      	movs	r0, #8
 8005c9a:	fa00 f101 	lsl.w	r1, r0, r1
 8005c9e:	ea11 0f0c 	tst.w	r1, ip
 8005ca2:	f43f af43 	beq.w	8005b2c <HAL_DMA_IRQHandler+0x57c>
 8005ca6:	f012 0f08 	tst.w	r2, #8
 8005caa:	f43f af3f 	beq.w	8005b2c <HAL_DMA_IRQHandler+0x57c>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	f022 020e 	bic.w	r2, r2, #14
 8005cb4:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005cb6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005cb8:	f003 031f 	and.w	r3, r3, #31
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc2:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005cc4:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_READY;
 8005cc6:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8005cca:	2300      	movs	r3, #0
 8005ccc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if (hdma->XferErrorCallback != NULL)
 8005cd0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f43f af2a 	beq.w	8005b2c <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 8005cd8:	4620      	mov	r0, r4
 8005cda:	4798      	blx	r3
  }
 8005cdc:	e726      	b.n	8005b2c <HAL_DMA_IRQHandler+0x57c>
 8005cde:	bf00      	nop
 8005ce0:	40020010 	.word	0x40020010
 8005ce4:	40020028 	.word	0x40020028

08005ce8 <HAL_DMA_GetState>:
  return hdma->State;
 8005ce8:	f890 0035 	ldrb.w	r0, [r0, #53]	@ 0x35
}
 8005cec:	4770      	bx	lr

08005cee <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005cee:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 8005cf0:	4770      	bx	lr
	...

08005cf4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005cf4:	b430      	push	{r4, r5}
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005cf6:	6b41      	ldr	r1, [r0, #52]	@ 0x34

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005cf8:	6804      	ldr	r4, [r0, #0]
 8005cfa:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8005cfe:	4a6f      	ldr	r2, [pc, #444]	@ (8005ebc <FDCAN_CalcultateRamBlockAddresses+0x1c8>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8005d06:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005d0a:	6804      	ldr	r4, [r0, #0]
 8005d0c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8005d10:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8005d14:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8005d16:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8005d1a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005d1e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005d20:	440b      	add	r3, r1
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005d22:	6804      	ldr	r4, [r0, #0]
 8005d24:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8005d28:	4011      	ands	r1, r2
 8005d2a:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005d2e:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005d32:	6804      	ldr	r4, [r0, #0]
 8005d34:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8005d38:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 8005d3c:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8005d3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005d42:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005d46:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8005d48:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005d4c:	6804      	ldr	r4, [r0, #0]
 8005d4e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8005d52:	4011      	ands	r1, r2
 8005d54:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005d58:	f8c4 10a0 	str.w	r1, [r4, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005d5c:	6804      	ldr	r4, [r0, #0]
 8005d5e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8005d62:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 8005d66:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8005d68:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005d6c:	f8c4 10a0 	str.w	r1, [r4, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005d70:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8005d72:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005d74:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005d78:	6804      	ldr	r4, [r0, #0]
 8005d7a:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8005d7e:	4011      	ands	r1, r2
 8005d80:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005d84:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005d88:	6804      	ldr	r4, [r0, #0]
 8005d8a:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8005d8e:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 8005d92:	6c85      	ldr	r5, [r0, #72]	@ 0x48
 8005d94:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005d98:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005d9c:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005d9e:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8005da0:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005da4:	6804      	ldr	r4, [r0, #0]
 8005da6:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8005daa:	4011      	ands	r1, r2
 8005dac:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005db0:	f8c4 10ac 	str.w	r1, [r4, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005db4:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8005db6:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8005db8:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005dbc:	6804      	ldr	r4, [r0, #0]
 8005dbe:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 8005dc2:	4011      	ands	r1, r2
 8005dc4:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005dc8:	f8c4 10f0 	str.w	r1, [r4, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005dcc:	6804      	ldr	r4, [r0, #0]
 8005dce:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 8005dd2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
 8005dd6:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8005dd8:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005ddc:	f8c4 10f0 	str.w	r1, [r4, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005de0:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8005de2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005de6:	6804      	ldr	r4, [r0, #0]
 8005de8:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 8005dec:	400a      	ands	r2, r1
 8005dee:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 8005df2:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005df6:	6802      	ldr	r2, [r0, #0]
 8005df8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005dfc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8005e00:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 8005e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005e06:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005e0a:	6802      	ldr	r2, [r0, #0]
 8005e0c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005e10:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8005e14:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 8005e16:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005e1a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005e1e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8005e20:	4a27      	ldr	r2, [pc, #156]	@ (8005ec0 <FDCAN_CalcultateRamBlockAddresses+0x1cc>)
 8005e22:	441a      	add	r2, r3
 8005e24:	0092      	lsls	r2, r2, #2
 8005e26:	66c2      	str	r2, [r0, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005e28:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005e2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005e2e:	6703      	str	r3, [r0, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005e30:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8005e32:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005e36:	6743      	str	r3, [r0, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005e38:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8005e3a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005e3c:	fb04 f101 	mul.w	r1, r4, r1
 8005e40:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005e44:	6783      	str	r3, [r0, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005e46:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005e48:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8005e4a:	fb04 f101 	mul.w	r1, r4, r1
 8005e4e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005e52:	67c3      	str	r3, [r0, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005e54:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8005e56:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8005e58:	fb04 f101 	mul.w	r1, r4, r1
 8005e5c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005e60:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005e64:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8005e66:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005e6a:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e6e:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8005e70:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 8005e72:	fb01 fc04 	mul.w	ip, r1, r4
 8005e76:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8005e7a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e7e:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 8005e80:	fb04 f101 	mul.w	r1, r4, r1
 8005e84:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005e88:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005e8c:	490d      	ldr	r1, [pc, #52]	@ (8005ec4 <FDCAN_CalcultateRamBlockAddresses+0x1d0>)
 8005e8e:	428b      	cmp	r3, r1
 8005e90:	d90d      	bls.n	8005eae <FDCAN_CalcultateRamBlockAddresses+0x1ba>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005e92:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005e96:	f043 0320 	orr.w	r3, r3, #32
 8005e9a:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98

    return HAL_ERROR;
 8005ea4:	2001      	movs	r0, #1
 8005ea6:	e007      	b.n	8005eb8 <FDCAN_CalcultateRamBlockAddresses+0x1c4>
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f842 3b04 	str.w	r3, [r2], #4
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005eae:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d8f8      	bhi.n	8005ea8 <FDCAN_CalcultateRamBlockAddresses+0x1b4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005eb6:	2000      	movs	r0, #0
}
 8005eb8:	bc30      	pop	{r4, r5}
 8005eba:	4770      	bx	lr
 8005ebc:	ffff0003 	.word	0xffff0003
 8005ec0:	10002b00 	.word	0x10002b00
 8005ec4:	4000d3fc 	.word	0x4000d3fc

08005ec8 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8005ec8:	b570      	push	{r4, r5, r6, lr}
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005eca:	684c      	ldr	r4, [r1, #4]
 8005ecc:	b9f4      	cbnz	r4, 8005f0c <FDCAN_CopyMessageToRAM+0x44>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005ece:	690d      	ldr	r5, [r1, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005ed0:	688c      	ldr	r4, [r1, #8]
                   FDCAN_STANDARD_ID |
 8005ed2:	4325      	orrs	r5, r4
                   (pTxHeader->Identifier << 18));
 8005ed4:	680c      	ldr	r4, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005ed6:	ea45 4584 	orr.w	r5, r5, r4, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005eda:	6a0e      	ldr	r6, [r1, #32]
                 pTxHeader->TxEventFifoControl |
 8005edc:	69cc      	ldr	r4, [r1, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005ede:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
                 pTxHeader->FDFormat |
 8005ee2:	698e      	ldr	r6, [r1, #24]
                 pTxHeader->TxEventFifoControl |
 8005ee4:	4334      	orrs	r4, r6
                 pTxHeader->BitRateSwitch |
 8005ee6:	694e      	ldr	r6, [r1, #20]
                 pTxHeader->FDFormat |
 8005ee8:	4334      	orrs	r4, r6
                 pTxHeader->DataLength);
 8005eea:	68ce      	ldr	r6, [r1, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005eec:	4334      	orrs	r4, r6

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005eee:	f8d0 6084 	ldr.w	r6, [r0, #132]	@ 0x84
 8005ef2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8005ef4:	fb00 f303 	mul.w	r3, r0, r3
 8005ef8:	eb06 0e83 	add.w	lr, r6, r3, lsl #2

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005efc:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
  TxAddress++;
  *TxAddress = TxElementW2;
 8005f00:	f8ce 4004 	str.w	r4, [lr, #4]
  TxAddress++;
 8005f04:	f10e 0e08 	add.w	lr, lr, #8

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005f08:	2000      	movs	r0, #0
 8005f0a:	e019      	b.n	8005f40 <FDCAN_CopyMessageToRAM+0x78>
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f0c:	690c      	ldr	r4, [r1, #16]
                   pTxHeader->TxFrameType |
 8005f0e:	688d      	ldr	r5, [r1, #8]
                   FDCAN_EXTENDED_ID |
 8005f10:	4325      	orrs	r5, r4
                   pTxHeader->Identifier);
 8005f12:	680c      	ldr	r4, [r1, #0]
                   pTxHeader->TxFrameType |
 8005f14:	4325      	orrs	r5, r4
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f16:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
 8005f1a:	e7de      	b.n	8005eda <FDCAN_CopyMessageToRAM+0x12>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005f1c:	eb02 0c00 	add.w	ip, r2, r0
 8005f20:	f89c 4003 	ldrb.w	r4, [ip, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005f24:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8005f28:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005f2a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8005f2e:	f89c 4001 	ldrb.w	r4, [ip, #1]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005f32:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                  (uint32_t)pTxData[ByteCounter]);
 8005f36:	5c14      	ldrb	r4, [r2, r0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8005f38:	4323      	orrs	r3, r4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005f3a:	f84e 3b04 	str.w	r3, [lr], #4
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005f3e:	3004      	adds	r0, #4
 8005f40:	89cb      	ldrh	r3, [r1, #14]
 8005f42:	4c02      	ldr	r4, [pc, #8]	@ (8005f4c <FDCAN_CopyMessageToRAM+0x84>)
 8005f44:	5ce3      	ldrb	r3, [r4, r3]
 8005f46:	4283      	cmp	r3, r0
 8005f48:	d8e8      	bhi.n	8005f1c <FDCAN_CopyMessageToRAM+0x54>
    TxAddress++;
  }
}
 8005f4a:	bd70      	pop	{r4, r5, r6, pc}
 8005f4c:	0801f3fc 	.word	0x0801f3fc

08005f50 <HAL_FDCAN_Init>:
{
 8005f50:	b530      	push	{r4, r5, lr}
 8005f52:	b095      	sub	sp, #84	@ 0x54
 8005f54:	4604      	mov	r4, r0
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005f56:	224c      	movs	r2, #76	@ 0x4c
 8005f58:	49a0      	ldr	r1, [pc, #640]	@ (80061dc <HAL_FDCAN_Init+0x28c>)
 8005f5a:	a801      	add	r0, sp, #4
 8005f5c:	f019 f8ca 	bl	801f0f4 <memcpy>
  if (hfdcan == NULL)
 8005f60:	2c00      	cmp	r4, #0
 8005f62:	f000 8138 	beq.w	80061d6 <HAL_FDCAN_Init+0x286>
  if (hfdcan->Instance == FDCAN1)
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	4a9d      	ldr	r2, [pc, #628]	@ (80061e0 <HAL_FDCAN_Init+0x290>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d020      	beq.n	8005fb0 <HAL_FDCAN_Init+0x60>
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005f6e:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8005f72:	b30b      	cbz	r3, 8005fb8 <HAL_FDCAN_Init+0x68>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005f74:	6822      	ldr	r2, [r4, #0]
 8005f76:	6993      	ldr	r3, [r2, #24]
 8005f78:	f023 0310 	bic.w	r3, r3, #16
 8005f7c:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 8005f7e:	f7fd fac3 	bl	8003508 <HAL_GetTick>
 8005f82:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	699a      	ldr	r2, [r3, #24]
 8005f88:	f012 0f08 	tst.w	r2, #8
 8005f8c:	d01a      	beq.n	8005fc4 <HAL_FDCAN_Init+0x74>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005f8e:	f7fd fabb 	bl	8003508 <HAL_GetTick>
 8005f92:	1b43      	subs	r3, r0, r5
 8005f94:	2b0a      	cmp	r3, #10
 8005f96:	d9f5      	bls.n	8005f84 <HAL_FDCAN_Init+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005f98:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005f9c:	f043 0301 	orr.w	r3, r3, #1
 8005fa0:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
      return HAL_ERROR;
 8005faa:	2001      	movs	r0, #1
}
 8005fac:	b015      	add	sp, #84	@ 0x54
 8005fae:	bd30      	pop	{r4, r5, pc}
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005fb0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005fb4:	6063      	str	r3, [r4, #4]
 8005fb6:	e7da      	b.n	8005f6e <HAL_FDCAN_Init+0x1e>
    hfdcan->Lock = HAL_UNLOCKED;
 8005fb8:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
    HAL_FDCAN_MspInit(hfdcan);
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f7fc fae5 	bl	800258c <HAL_FDCAN_MspInit>
 8005fc2:	e7d7      	b.n	8005f74 <HAL_FDCAN_Init+0x24>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005fc4:	699a      	ldr	r2, [r3, #24]
 8005fc6:	f042 0201 	orr.w	r2, r2, #1
 8005fca:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8005fcc:	f7fd fa9c 	bl	8003508 <HAL_GetTick>
 8005fd0:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	699a      	ldr	r2, [r3, #24]
 8005fd6:	f012 0f01 	tst.w	r2, #1
 8005fda:	d10f      	bne.n	8005ffc <HAL_FDCAN_Init+0xac>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005fdc:	f7fd fa94 	bl	8003508 <HAL_GetTick>
 8005fe0:	1b40      	subs	r0, r0, r5
 8005fe2:	280a      	cmp	r0, #10
 8005fe4:	d9f5      	bls.n	8005fd2 <HAL_FDCAN_Init+0x82>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005fe6:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
      return HAL_ERROR;
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	e7d7      	b.n	8005fac <HAL_FDCAN_Init+0x5c>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005ffc:	699a      	ldr	r2, [r3, #24]
 8005ffe:	f042 0202 	orr.w	r2, r2, #2
 8006002:	619a      	str	r2, [r3, #24]
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006004:	7c23      	ldrb	r3, [r4, #16]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d040      	beq.n	800608c <HAL_FDCAN_Init+0x13c>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800600a:	6822      	ldr	r2, [r4, #0]
 800600c:	6993      	ldr	r3, [r2, #24]
 800600e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006012:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006014:	7c63      	ldrb	r3, [r4, #17]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d03e      	beq.n	8006098 <HAL_FDCAN_Init+0x148>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800601a:	6822      	ldr	r2, [r4, #0]
 800601c:	6993      	ldr	r3, [r2, #24]
 800601e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006022:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006024:	7ca3      	ldrb	r3, [r4, #18]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d03c      	beq.n	80060a4 <HAL_FDCAN_Init+0x154>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800602a:	6822      	ldr	r2, [r4, #0]
 800602c:	6993      	ldr	r3, [r2, #24]
 800602e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006032:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006034:	6822      	ldr	r2, [r4, #0]
 8006036:	6993      	ldr	r3, [r2, #24]
 8006038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800603c:	68a1      	ldr	r1, [r4, #8]
 800603e:	430b      	orrs	r3, r1
 8006040:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006042:	6822      	ldr	r2, [r4, #0]
 8006044:	6993      	ldr	r3, [r2, #24]
 8006046:	f023 03a4 	bic.w	r3, r3, #164	@ 0xa4
 800604a:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800604c:	6822      	ldr	r2, [r4, #0]
 800604e:	6913      	ldr	r3, [r2, #16]
 8006050:	f023 0310 	bic.w	r3, r3, #16
 8006054:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006056:	68e3      	ldr	r3, [r4, #12]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d029      	beq.n	80060b0 <HAL_FDCAN_Init+0x160>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800605c:	2b00      	cmp	r3, #0
 800605e:	d02c      	beq.n	80060ba <HAL_FDCAN_Init+0x16a>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006060:	2b02      	cmp	r3, #2
 8006062:	f000 809b 	beq.w	800619c <HAL_FDCAN_Init+0x24c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006066:	6822      	ldr	r2, [r4, #0]
 8006068:	6993      	ldr	r3, [r2, #24]
 800606a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800606e:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006070:	6822      	ldr	r2, [r4, #0]
 8006072:	6913      	ldr	r3, [r2, #16]
 8006074:	f043 0310 	orr.w	r3, r3, #16
 8006078:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800607a:	68e3      	ldr	r3, [r4, #12]
 800607c:	2b03      	cmp	r3, #3
 800607e:	d11c      	bne.n	80060ba <HAL_FDCAN_Init+0x16a>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006080:	6822      	ldr	r2, [r4, #0]
 8006082:	6993      	ldr	r3, [r2, #24]
 8006084:	f043 0320 	orr.w	r3, r3, #32
 8006088:	6193      	str	r3, [r2, #24]
 800608a:	e016      	b.n	80060ba <HAL_FDCAN_Init+0x16a>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800608c:	6822      	ldr	r2, [r4, #0]
 800608e:	6993      	ldr	r3, [r2, #24]
 8006090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006094:	6193      	str	r3, [r2, #24]
 8006096:	e7bd      	b.n	8006014 <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006098:	6822      	ldr	r2, [r4, #0]
 800609a:	6993      	ldr	r3, [r2, #24]
 800609c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060a0:	6193      	str	r3, [r2, #24]
 80060a2:	e7bf      	b.n	8006024 <HAL_FDCAN_Init+0xd4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80060a4:	6822      	ldr	r2, [r4, #0]
 80060a6:	6993      	ldr	r3, [r2, #24]
 80060a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060ac:	6193      	str	r3, [r2, #24]
 80060ae:	e7c1      	b.n	8006034 <HAL_FDCAN_Init+0xe4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80060b0:	6822      	ldr	r2, [r4, #0]
 80060b2:	6993      	ldr	r3, [r2, #24]
 80060b4:	f043 0304 	orr.w	r3, r3, #4
 80060b8:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80060ba:	69a3      	ldr	r3, [r4, #24]
 80060bc:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80060be:	69e3      	ldr	r3, [r4, #28]
 80060c0:	3b01      	subs	r3, #1
 80060c2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80060c4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80060c8:	6a22      	ldr	r2, [r4, #32]
 80060ca:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80060cc:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80060ce:	6962      	ldr	r2, [r4, #20]
 80060d0:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80060d2:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80060d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80060d8:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80060da:	68a3      	ldr	r3, [r4, #8]
 80060dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060e0:	d062      	beq.n	80061a8 <HAL_FDCAN_Init+0x258>
  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80060e2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80060e4:	b133      	cbz	r3, 80060f4 <HAL_FDCAN_Init+0x1a4>
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80060e6:	6822      	ldr	r2, [r4, #0]
 80060e8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80060ec:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80060ee:	430b      	orrs	r3, r1
 80060f0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80060f4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80060f6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80060f8:	42d3      	cmn	r3, r2
 80060fa:	d00d      	beq.n	8006118 <HAL_FDCAN_Init+0x1c8>
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80060fc:	6821      	ldr	r1, [r4, #0]
 80060fe:	f8d1 30c8 	ldr.w	r3, [r1, #200]	@ 0xc8
 8006102:	f023 0307 	bic.w	r3, r3, #7
 8006106:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8006108:	a814      	add	r0, sp, #80	@ 0x50
 800610a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800610e:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006118:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800611a:	b16b      	cbz	r3, 8006138 <HAL_FDCAN_Init+0x1e8>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800611c:	6821      	ldr	r1, [r4, #0]
 800611e:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 8006122:	f023 0307 	bic.w	r3, r3, #7
 8006126:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006128:	a814      	add	r0, sp, #80	@ 0x50
 800612a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800612e:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006132:	4313      	orrs	r3, r2
 8006134:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006138:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800613a:	b173      	cbz	r3, 800615a <HAL_FDCAN_Init+0x20a>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800613c:	6821      	ldr	r1, [r4, #0]
 800613e:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 8006142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006146:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8006148:	a814      	add	r0, sp, #80	@ 0x50
 800614a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800614e:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006152:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006156:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800615a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800615c:	b173      	cbz	r3, 800617c <HAL_FDCAN_Init+0x22c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800615e:	6821      	ldr	r1, [r4, #0]
 8006160:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 8006164:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006168:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800616a:	a814      	add	r0, sp, #80	@ 0x50
 800616c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006170:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006174:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006178:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Instance == FDCAN1)
 800617c:	6822      	ldr	r2, [r4, #0]
 800617e:	4b18      	ldr	r3, [pc, #96]	@ (80061e0 <HAL_FDCAN_Init+0x290>)
 8006180:	429a      	cmp	r2, r3
 8006182:	d022      	beq.n	80061ca <HAL_FDCAN_Init+0x27a>
  hfdcan->LatestTxFifoQRequest = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800618a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800618e:	2301      	movs	r3, #1
 8006190:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006194:	4620      	mov	r0, r4
 8006196:	f7ff fdad 	bl	8005cf4 <FDCAN_CalcultateRamBlockAddresses>
  return status;
 800619a:	e707      	b.n	8005fac <HAL_FDCAN_Init+0x5c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800619c:	6822      	ldr	r2, [r4, #0]
 800619e:	6993      	ldr	r3, [r2, #24]
 80061a0:	f043 0320 	orr.w	r3, r3, #32
 80061a4:	6193      	str	r3, [r2, #24]
 80061a6:	e788      	b.n	80060ba <HAL_FDCAN_Init+0x16a>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80061a8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80061aa:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80061ac:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80061ae:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80061b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80061b4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80061b6:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80061b8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80061bc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80061be:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80061c0:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80061c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80061c6:	60cb      	str	r3, [r1, #12]
 80061c8:	e78b      	b.n	80060e2 <HAL_FDCAN_Init+0x192>
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80061ca:	6862      	ldr	r2, [r4, #4]
 80061cc:	6893      	ldr	r3, [r2, #8]
 80061ce:	f023 0303 	bic.w	r3, r3, #3
 80061d2:	6093      	str	r3, [r2, #8]
 80061d4:	e7d6      	b.n	8006184 <HAL_FDCAN_Init+0x234>
    return HAL_ERROR;
 80061d6:	2001      	movs	r0, #1
 80061d8:	e6e8      	b.n	8005fac <HAL_FDCAN_Init+0x5c>
 80061da:	bf00      	nop
 80061dc:	0801f1c0 	.word	0x0801f1c0
 80061e0:	4000a000 	.word	0x4000a000

080061e4 <HAL_FDCAN_ConfigGlobalFilter>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80061e4:	f890 c098 	ldrb.w	ip, [r0, #152]	@ 0x98
 80061e8:	fa5f fc8c 	uxtb.w	ip, ip
 80061ec:	f1bc 0f01 	cmp.w	ip, #1
 80061f0:	d007      	beq.n	8006202 <HAL_FDCAN_ConfigGlobalFilter+0x1e>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80061f2:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80061f6:	f043 0304 	orr.w	r3, r3, #4
 80061fa:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 80061fe:	2001      	movs	r0, #1
}
 8006200:	4770      	bx	lr
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8006202:	0092      	lsls	r2, r2, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006204:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8006208:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800620c:	6801      	ldr	r1, [r0, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800620e:	9a00      	ldr	r2, [sp, #0]
 8006210:	431a      	orrs	r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006212:	f8c1 2080 	str.w	r2, [r1, #128]	@ 0x80
    return HAL_OK;
 8006216:	2000      	movs	r0, #0
 8006218:	4770      	bx	lr

0800621a <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800621a:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b01      	cmp	r3, #1
 8006222:	d007      	beq.n	8006234 <HAL_FDCAN_Start+0x1a>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006224:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8006228:	f043 0304 	orr.w	r3, r3, #4
 800622c:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8006230:	2001      	movs	r0, #1
}
 8006232:	4770      	bx	lr
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006234:	2302      	movs	r3, #2
 8006236:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800623a:	6802      	ldr	r2, [r0, #0]
 800623c:	6993      	ldr	r3, [r2, #24]
 800623e:	f023 0301 	bic.w	r3, r3, #1
 8006242:	6193      	str	r3, [r2, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006244:	2300      	movs	r3, #0
 8006246:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_OK;
 800624a:	4618      	mov	r0, r3
 800624c:	4770      	bx	lr

0800624e <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 800624e:	b538      	push	{r3, r4, r5, lr}
 8006250:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006252:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b02      	cmp	r3, #2
 800625a:	d12b      	bne.n	80062b4 <HAL_FDCAN_AddMessageToTxFifoQ+0x66>
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800625c:	6803      	ldr	r3, [r0, #0]
 800625e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8006262:	f010 5f7c 	tst.w	r0, #1056964608	@ 0x3f000000
 8006266:	d00c      	beq.n	8006282 <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006268:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800626c:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8006270:	d00f      	beq.n	8006292 <HAL_FDCAN_AddMessageToTxFifoQ+0x44>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006272:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006276:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800627a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      return HAL_ERROR;
 800627e:	2001      	movs	r0, #1
 8006280:	e01f      	b.n	80062c2 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006282:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006286:	f043 0320 	orr.w	r3, r3, #32
 800628a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      return HAL_ERROR;
 800628e:	2001      	movs	r0, #1
 8006290:	e017      	b.n	80062c2 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006292:	f8d3 50c4 	ldr.w	r5, [r3, #196]	@ 0xc4
 8006296:	f3c5 4504 	ubfx	r5, r5, #16, #5
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800629a:	462b      	mov	r3, r5
 800629c:	4620      	mov	r0, r4
 800629e:	f7ff fe13 	bl	8005ec8 <FDCAN_CopyMessageToRAM>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80062a2:	6822      	ldr	r2, [r4, #0]
 80062a4:	2301      	movs	r3, #1
 80062a6:	40ab      	lsls	r3, r5
 80062a8:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80062ac:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    return HAL_OK;
 80062b0:	2000      	movs	r0, #0
 80062b2:	e006      	b.n	80062c2 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80062b4:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80062b8:	f043 0308 	orr.w	r3, r3, #8
 80062bc:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 80062c0:	2001      	movs	r0, #1
}
 80062c2:	bd38      	pop	{r3, r4, r5, pc}

080062c4 <HAL_FDCAN_GetRxMessage>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80062c4:	f890 c098 	ldrb.w	ip, [r0, #152]	@ 0x98
 80062c8:	fa5f fc8c 	uxtb.w	ip, ip
  if (state == HAL_FDCAN_STATE_BUSY)
 80062cc:	f1bc 0f02 	cmp.w	ip, #2
 80062d0:	f040 80db 	bne.w	800648a <HAL_FDCAN_GetRxMessage+0x1c6>
{
 80062d4:	b570      	push	{r4, r5, r6, lr}
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80062d6:	2940      	cmp	r1, #64	@ 0x40
 80062d8:	d00c      	beq.n	80062f4 <HAL_FDCAN_GetRxMessage+0x30>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80062da:	2941      	cmp	r1, #65	@ 0x41
 80062dc:	d03b      	beq.n	8006356 <HAL_FDCAN_GetRxMessage+0x92>
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80062de:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 80062e0:	428c      	cmp	r4, r1
 80062e2:	d869      	bhi.n	80063b8 <HAL_FDCAN_GetRxMessage+0xf4>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80062e4:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80062e8:	f043 0320 	orr.w	r3, r3, #32
 80062ec:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 80062f0:	2001      	movs	r0, #1
 80062f2:	e0bd      	b.n	8006470 <HAL_FDCAN_GetRxMessage+0x1ac>
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80062f4:	6804      	ldr	r4, [r0, #0]
 80062f6:	f8d4 50a0 	ldr.w	r5, [r4, #160]	@ 0xa0
 80062fa:	f415 0ffe 	tst.w	r5, #8323072	@ 0x7f0000
 80062fe:	d00c      	beq.n	800631a <HAL_FDCAN_GetRxMessage+0x56>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006300:	f8d4 50a4 	ldr.w	r5, [r4, #164]	@ 0xa4
 8006304:	f015 0f7f 	tst.w	r5, #127	@ 0x7f
 8006308:	d10f      	bne.n	800632a <HAL_FDCAN_GetRxMessage+0x66>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800630a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800630e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006312:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8006316:	2001      	movs	r0, #1
 8006318:	e0aa      	b.n	8006470 <HAL_FDCAN_GetRxMessage+0x1ac>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800631a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800631e:	f043 0320 	orr.w	r3, r3, #32
 8006322:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8006326:	2001      	movs	r0, #1
 8006328:	e0a2      	b.n	8006470 <HAL_FDCAN_GetRxMessage+0x1ac>
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800632a:	f8d4 50a4 	ldr.w	r5, [r4, #164]	@ 0xa4
 800632e:	f3c5 6600 	ubfx	r6, r5, #24, #1
 8006332:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 8006336:	d002      	beq.n	800633e <HAL_FDCAN_GetRxMessage+0x7a>
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006338:	f8d4 50a0 	ldr.w	r5, [r4, #160]	@ 0xa0
  uint32_t GetIndex = 0;
 800633c:	2600      	movs	r6, #0
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800633e:	f8d4 40a4 	ldr.w	r4, [r4, #164]	@ 0xa4
 8006342:	f3c4 2405 	ubfx	r4, r4, #8, #6
 8006346:	4426      	add	r6, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8006348:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 800634a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800634c:	fb06 f404 	mul.w	r4, r6, r4
 8006350:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
 8006354:	e037      	b.n	80063c6 <HAL_FDCAN_GetRxMessage+0x102>
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8006356:	6804      	ldr	r4, [r0, #0]
 8006358:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
 800635c:	f415 0ffe 	tst.w	r5, #8323072	@ 0x7f0000
 8006360:	d00c      	beq.n	800637c <HAL_FDCAN_GetRxMessage+0xb8>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006362:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8006366:	f015 0f7f 	tst.w	r5, #127	@ 0x7f
 800636a:	d10f      	bne.n	800638c <HAL_FDCAN_GetRxMessage+0xc8>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800636c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8006370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006374:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8006378:	2001      	movs	r0, #1
 800637a:	e079      	b.n	8006470 <HAL_FDCAN_GetRxMessage+0x1ac>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800637c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8006380:	f043 0320 	orr.w	r3, r3, #32
 8006384:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 8006388:	2001      	movs	r0, #1
 800638a:	e071      	b.n	8006470 <HAL_FDCAN_GetRxMessage+0x1ac>
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800638c:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8006390:	f3c5 6600 	ubfx	r6, r5, #24, #1
 8006394:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 8006398:	d002      	beq.n	80063a0 <HAL_FDCAN_GetRxMessage+0xdc>
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800639a:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
  uint32_t GetIndex = 0;
 800639e:	2600      	movs	r6, #0
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80063a0:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 80063a4:	f3c4 2405 	ubfx	r4, r4, #8, #6
 80063a8:	4426      	add	r6, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80063aa:	6f85      	ldr	r5, [r0, #120]	@ 0x78
 80063ac:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 80063ae:	fb06 f404 	mul.w	r4, r6, r4
 80063b2:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
 80063b6:	e006      	b.n	80063c6 <HAL_FDCAN_GetRxMessage+0x102>
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80063b8:	6fc5      	ldr	r5, [r0, #124]	@ 0x7c
 80063ba:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 80063bc:	fb01 f404 	mul.w	r4, r1, r4
 80063c0:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
  uint32_t GetIndex = 0;
 80063c4:	2600      	movs	r6, #0
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80063c6:	f8de 4000 	ldr.w	r4, [lr]
 80063ca:	f004 4480 	and.w	r4, r4, #1073741824	@ 0x40000000
 80063ce:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80063d0:	bb64      	cbnz	r4, 800642c <HAL_FDCAN_GetRxMessage+0x168>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80063d2:	f8de 4000 	ldr.w	r4, [lr]
 80063d6:	f3c4 448a 	ubfx	r4, r4, #18, #11
 80063da:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80063dc:	f8de 4000 	ldr.w	r4, [lr]
 80063e0:	f004 5400 	and.w	r4, r4, #536870912	@ 0x20000000
 80063e4:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80063e6:	f8de 4000 	ldr.w	r4, [lr]
 80063ea:	f004 4400 	and.w	r4, r4, #2147483648	@ 0x80000000
 80063ee:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80063f0:	f8be 4004 	ldrh.w	r4, [lr, #4]
 80063f4:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80063f6:	f8de 4004 	ldr.w	r4, [lr, #4]
 80063fa:	f404 2470 	and.w	r4, r4, #983040	@ 0xf0000
 80063fe:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006400:	f8de 4004 	ldr.w	r4, [lr, #4]
 8006404:	f404 1480 	and.w	r4, r4, #1048576	@ 0x100000
 8006408:	6154      	str	r4, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800640a:	f8de 4004 	ldr.w	r4, [lr, #4]
 800640e:	f404 1400 	and.w	r4, r4, #2097152	@ 0x200000
 8006412:	6194      	str	r4, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8006414:	f89e 4007 	ldrb.w	r4, [lr, #7]
 8006418:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 800641c:	6214      	str	r4, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800641e:	f8de 4004 	ldr.w	r4, [lr, #4]
 8006422:	0fe4      	lsrs	r4, r4, #31
 8006424:	6254      	str	r4, [r2, #36]	@ 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8006426:	f04f 0c00 	mov.w	ip, #0
 800642a:	e00c      	b.n	8006446 <HAL_FDCAN_GetRxMessage+0x182>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800642c:	f8de 4000 	ldr.w	r4, [lr]
 8006430:	f024 4460 	bic.w	r4, r4, #3758096384	@ 0xe0000000
 8006434:	6014      	str	r4, [r2, #0]
 8006436:	e7d1      	b.n	80063dc <HAL_FDCAN_GetRxMessage+0x118>
      pRxData[ByteCounter] = pData[ByteCounter];
 8006438:	eb0e 040c 	add.w	r4, lr, ip
 800643c:	7a24      	ldrb	r4, [r4, #8]
 800643e:	f803 400c 	strb.w	r4, [r3, ip]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8006442:	f10c 0c01 	add.w	ip, ip, #1
 8006446:	89d4      	ldrh	r4, [r2, #14]
 8006448:	4d14      	ldr	r5, [pc, #80]	@ (800649c <HAL_FDCAN_GetRxMessage+0x1d8>)
 800644a:	5d2c      	ldrb	r4, [r5, r4]
 800644c:	4564      	cmp	r4, ip
 800644e:	d8f3      	bhi.n	8006438 <HAL_FDCAN_GetRxMessage+0x174>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006450:	2940      	cmp	r1, #64	@ 0x40
 8006452:	d009      	beq.n	8006468 <HAL_FDCAN_GetRxMessage+0x1a4>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006454:	2941      	cmp	r1, #65	@ 0x41
 8006456:	d00c      	beq.n	8006472 <HAL_FDCAN_GetRxMessage+0x1ae>
      if (RxLocation < FDCAN_RX_BUFFER32)
 8006458:	291f      	cmp	r1, #31
 800645a:	d80e      	bhi.n	800647a <HAL_FDCAN_GetRxMessage+0x1b6>
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800645c:	6802      	ldr	r2, [r0, #0]
 800645e:	2301      	movs	r3, #1
 8006460:	408b      	lsls	r3, r1
 8006462:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8006466:	e002      	b.n	800646e <HAL_FDCAN_GetRxMessage+0x1aa>
      hfdcan->Instance->RXF0A = GetIndex;
 8006468:	6803      	ldr	r3, [r0, #0]
 800646a:	f8c3 60a8 	str.w	r6, [r3, #168]	@ 0xa8
    return HAL_OK;
 800646e:	2000      	movs	r0, #0
}
 8006470:	bd70      	pop	{r4, r5, r6, pc}
      hfdcan->Instance->RXF1A = GetIndex;
 8006472:	6803      	ldr	r3, [r0, #0]
 8006474:	f8c3 60b8 	str.w	r6, [r3, #184]	@ 0xb8
 8006478:	e7f9      	b.n	800646e <HAL_FDCAN_GetRxMessage+0x1aa>
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800647a:	f001 011f 	and.w	r1, r1, #31
 800647e:	6802      	ldr	r2, [r0, #0]
 8006480:	2301      	movs	r3, #1
 8006482:	408b      	lsls	r3, r1
 8006484:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006488:	e7f1      	b.n	800646e <HAL_FDCAN_GetRxMessage+0x1aa>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800648a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800648e:	f043 0308 	orr.w	r3, r3, #8
 8006492:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8006496:	2001      	movs	r0, #1
}
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	0801f3fc 	.word	0x0801f3fc

080064a0 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80064a0:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d907      	bls.n	80064bc <HAL_FDCAN_ActivateNotification+0x1c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80064ac:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80064b0:	f043 0302 	orr.w	r3, r3, #2
 80064b4:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 80064b8:	2001      	movs	r0, #1
}
 80064ba:	4770      	bx	lr
{
 80064bc:	b410      	push	{r4}
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80064be:	6803      	ldr	r3, [r0, #0]
 80064c0:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 80064c2:	420c      	tst	r4, r1
 80064c4:	d124      	bne.n	8006510 <HAL_FDCAN_ActivateNotification+0x70>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80064c6:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 80064c8:	f044 0401 	orr.w	r4, r4, #1
 80064cc:	65dc      	str	r4, [r3, #92]	@ 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80064ce:	f411 7f00 	tst.w	r1, #512	@ 0x200
 80064d2:	d005      	beq.n	80064e0 <HAL_FDCAN_ActivateNotification+0x40>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80064d4:	6804      	ldr	r4, [r0, #0]
 80064d6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80064da:	4313      	orrs	r3, r2
 80064dc:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80064e0:	f411 6f80 	tst.w	r1, #1024	@ 0x400
 80064e4:	d005      	beq.n	80064f2 <HAL_FDCAN_ActivateNotification+0x52>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80064e6:	6804      	ldr	r4, [r0, #0]
 80064e8:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
 80064ec:	4313      	orrs	r3, r2
 80064ee:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80064f2:	6800      	ldr	r0, [r0, #0]
 80064f4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80064f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006528 <HAL_FDCAN_ActivateNotification+0x88>)
 80064f8:	400a      	ands	r2, r1
 80064fa:	4313      	orrs	r3, r2
 80064fc:	6543      	str	r3, [r0, #84]	@ 0x54
 80064fe:	4a0b      	ldr	r2, [pc, #44]	@ (800652c <HAL_FDCAN_ActivateNotification+0x8c>)
 8006500:	6953      	ldr	r3, [r2, #20]
 8006502:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006506:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8006508:	2000      	movs	r0, #0
}
 800650a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800650e:	4770      	bx	lr
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8006510:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8006512:	ea31 0404 	bics.w	r4, r1, r4
 8006516:	d002      	beq.n	800651e <HAL_FDCAN_ActivateNotification+0x7e>
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8006518:	2403      	movs	r4, #3
 800651a:	65dc      	str	r4, [r3, #92]	@ 0x5c
 800651c:	e7d7      	b.n	80064ce <HAL_FDCAN_ActivateNotification+0x2e>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800651e:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 8006520:	f044 0402 	orr.w	r4, r4, #2
 8006524:	65dc      	str	r4, [r3, #92]	@ 0x5c
 8006526:	e7d2      	b.n	80064ce <HAL_FDCAN_ActivateNotification+0x2e>
 8006528:	3fcfffff 	.word	0x3fcfffff
 800652c:	4000a800 	.word	0x4000a800

08006530 <HAL_FDCAN_ClockCalibrationCallback>:
}
 8006530:	4770      	bx	lr

08006532 <HAL_FDCAN_TxEventFifoCallback>:
}
 8006532:	4770      	bx	lr

08006534 <HAL_FDCAN_RxFifo1Callback>:
}
 8006534:	4770      	bx	lr

08006536 <HAL_FDCAN_TxFifoEmptyCallback>:
}
 8006536:	4770      	bx	lr

08006538 <HAL_FDCAN_TxBufferCompleteCallback>:
}
 8006538:	4770      	bx	lr

0800653a <HAL_FDCAN_TxBufferAbortCallback>:
}
 800653a:	4770      	bx	lr

0800653c <HAL_FDCAN_RxBufferNewMessageCallback>:
}
 800653c:	4770      	bx	lr

0800653e <HAL_FDCAN_TimestampWraparoundCallback>:
}
 800653e:	4770      	bx	lr

08006540 <HAL_FDCAN_TimeoutOccurredCallback>:
}
 8006540:	4770      	bx	lr

08006542 <HAL_FDCAN_HighPriorityMessageCallback>:
}
 8006542:	4770      	bx	lr

08006544 <HAL_FDCAN_ErrorStatusCallback>:
}
 8006544:	4770      	bx	lr

08006546 <HAL_FDCAN_TT_ScheduleSyncCallback>:
}
 8006546:	4770      	bx	lr

08006548 <HAL_FDCAN_TT_TimeMarkCallback>:
}
 8006548:	4770      	bx	lr

0800654a <HAL_FDCAN_TT_StopWatchCallback>:
}
 800654a:	4770      	bx	lr

0800654c <HAL_FDCAN_TT_GlobalTimeCallback>:
}
 800654c:	4770      	bx	lr
	...

08006550 <HAL_FDCAN_IRQHandler>:
{
 8006550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006554:	b083      	sub	sp, #12
 8006556:	4604      	mov	r4, r0
  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8006558:	4bb0      	ldr	r3, [pc, #704]	@ (800681c <HAL_FDCAN_IRQHandler+0x2cc>)
 800655a:	691a      	ldr	r2, [r3, #16]
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	079b      	lsls	r3, r3, #30
 8006560:	ea03 7382 	and.w	r3, r3, r2, lsl #30
 8006564:	9301      	str	r3, [sp, #4]
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006566:	6803      	ldr	r3, [r0, #0]
 8006568:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800656a:	f402 4a70 	and.w	sl, r2, #61440	@ 0xf000
  TxEventFifoITs &= hfdcan->Instance->IE;
 800656e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006570:	ea0a 0a02 	and.w	sl, sl, r2
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006574:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006576:	f002 090f 	and.w	r9, r2, #15
  RxFifo0ITs &= hfdcan->Instance->IE;
 800657a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800657c:	ea09 0902 	and.w	r9, r9, r2
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006580:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006582:	f002 08f0 	and.w	r8, r2, #240	@ 0xf0
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006586:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006588:	ea08 0802 	and.w	r8, r8, r2
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800658c:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
 800658e:	f006 5671 	and.w	r6, r6, #1010827264	@ 0x3c400000
  Errors &= hfdcan->Instance->IE;
 8006592:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006594:	4016      	ands	r6, r2
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006596:	6d1f      	ldr	r7, [r3, #80]	@ 0x50
 8006598:	f007 7760 	and.w	r7, r7, #58720256	@ 0x3800000
  ErrorStatusITs &= hfdcan->Instance->IE;
 800659c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800659e:	4017      	ands	r7, r2
  itsourceIE = hfdcan->Instance->IE;
 80065a0:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
  itflagIR = hfdcan->Instance->IR;
 80065a2:	f8d3 b050 	ldr.w	fp, [r3, #80]	@ 0x50
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80065a6:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80065aa:	d002      	beq.n	80065b2 <HAL_FDCAN_IRQHandler+0x62>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80065ac:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 80065b0:	d164      	bne.n	800667c <HAL_FDCAN_IRQHandler+0x12c>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80065b2:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 80065b6:	d002      	beq.n	80065be <HAL_FDCAN_IRQHandler+0x6e>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80065b8:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 80065bc:	d167      	bne.n	800668e <HAL_FDCAN_IRQHandler+0x13e>
  if (ClkCalibrationITs != 0U)
 80065be:	9b01      	ldr	r3, [sp, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d174      	bne.n	80066ae <HAL_FDCAN_IRQHandler+0x15e>
  if (TxEventFifoITs != 0U)
 80065c4:	f1ba 0f00 	cmp.w	sl, #0
 80065c8:	d17c      	bne.n	80066c4 <HAL_FDCAN_IRQHandler+0x174>
  if (RxFifo0ITs != 0U)
 80065ca:	f1b9 0f00 	cmp.w	r9, #0
 80065ce:	f040 8085 	bne.w	80066dc <HAL_FDCAN_IRQHandler+0x18c>
  if (RxFifo1ITs != 0U)
 80065d2:	f1b8 0f00 	cmp.w	r8, #0
 80065d6:	f040 808d 	bne.w	80066f4 <HAL_FDCAN_IRQHandler+0x1a4>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80065da:	f415 6f00 	tst.w	r5, #2048	@ 0x800
 80065de:	d003      	beq.n	80065e8 <HAL_FDCAN_IRQHandler+0x98>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80065e0:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 80065e4:	f040 8092 	bne.w	800670c <HAL_FDCAN_IRQHandler+0x1bc>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80065e8:	f415 7f00 	tst.w	r5, #512	@ 0x200
 80065ec:	d003      	beq.n	80065f6 <HAL_FDCAN_IRQHandler+0xa6>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80065ee:	f41b 7f00 	tst.w	fp, #512	@ 0x200
 80065f2:	f040 8096 	bne.w	8006722 <HAL_FDCAN_IRQHandler+0x1d2>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80065f6:	f415 2f00 	tst.w	r5, #524288	@ 0x80000
 80065fa:	d003      	beq.n	8006604 <HAL_FDCAN_IRQHandler+0xb4>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80065fc:	f41b 2f00 	tst.w	fp, #524288	@ 0x80000
 8006600:	f040 809f 	bne.w	8006742 <HAL_FDCAN_IRQHandler+0x1f2>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006604:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8006608:	d003      	beq.n	8006612 <HAL_FDCAN_IRQHandler+0xc2>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800660a:	f41b 3f80 	tst.w	fp, #65536	@ 0x10000
 800660e:	f040 80a3 	bne.w	8006758 <HAL_FDCAN_IRQHandler+0x208>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006612:	f415 2f80 	tst.w	r5, #262144	@ 0x40000
 8006616:	d003      	beq.n	8006620 <HAL_FDCAN_IRQHandler+0xd0>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006618:	f41b 2f80 	tst.w	fp, #262144	@ 0x40000
 800661c:	f040 80a7 	bne.w	800676e <HAL_FDCAN_IRQHandler+0x21e>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006620:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
 8006624:	d00f      	beq.n	8006646 <HAL_FDCAN_IRQHandler+0xf6>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006626:	f41b 3f00 	tst.w	fp, #131072	@ 0x20000
 800662a:	d00c      	beq.n	8006646 <HAL_FDCAN_IRQHandler+0xf6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006632:	651a      	str	r2, [r3, #80]	@ 0x50
 8006634:	4b79      	ldr	r3, [pc, #484]	@ (800681c <HAL_FDCAN_IRQHandler+0x2cc>)
 8006636:	2200      	movs	r2, #0
 8006638:	611a      	str	r2, [r3, #16]
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800663a:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800663e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006642:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  if (ErrorStatusITs != 0U)
 8006646:	2f00      	cmp	r7, #0
 8006648:	f040 809c 	bne.w	8006784 <HAL_FDCAN_IRQHandler+0x234>
  if (Errors != 0U)
 800664c:	b14e      	cbz	r6, 8006662 <HAL_FDCAN_IRQHandler+0x112>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800664e:	6823      	ldr	r3, [r4, #0]
 8006650:	651e      	str	r6, [r3, #80]	@ 0x50
 8006652:	0fb2      	lsrs	r2, r6, #30
 8006654:	4b71      	ldr	r3, [pc, #452]	@ (800681c <HAL_FDCAN_IRQHandler+0x2cc>)
 8006656:	611a      	str	r2, [r3, #16]
    hfdcan->ErrorCode |= Errors;
 8006658:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800665c:	4333      	orrs	r3, r6
 800665e:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  if (hfdcan->Instance == FDCAN1)
 8006662:	6822      	ldr	r2, [r4, #0]
 8006664:	4b6e      	ldr	r3, [pc, #440]	@ (8006820 <HAL_FDCAN_IRQHandler+0x2d0>)
 8006666:	429a      	cmp	r2, r3
 8006668:	f000 8096 	beq.w	8006798 <HAL_FDCAN_IRQHandler+0x248>
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800666c:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006670:	2b00      	cmp	r3, #0
 8006672:	f040 80f7 	bne.w	8006864 <HAL_FDCAN_IRQHandler+0x314>
}
 8006676:	b003      	add	sp, #12
 8006678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800667c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006680:	651a      	str	r2, [r3, #80]	@ 0x50
 8006682:	4b66      	ldr	r3, [pc, #408]	@ (800681c <HAL_FDCAN_IRQHandler+0x2cc>)
 8006684:	2200      	movs	r2, #0
 8006686:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006688:	f7ff ff5b 	bl	8006542 <HAL_FDCAN_HighPriorityMessageCallback>
 800668c:	e791      	b.n	80065b2 <HAL_FDCAN_IRQHandler+0x62>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006694:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006698:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800669c:	6518      	str	r0, [r3, #80]	@ 0x50
 800669e:	4b5f      	ldr	r3, [pc, #380]	@ (800681c <HAL_FDCAN_IRQHandler+0x2cc>)
 80066a0:	2000      	movs	r0, #0
 80066a2:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80066a4:	4011      	ands	r1, r2
 80066a6:	4620      	mov	r0, r4
 80066a8:	f7ff ff47 	bl	800653a <HAL_FDCAN_TxBufferAbortCallback>
 80066ac:	e787      	b.n	80065be <HAL_FDCAN_IRQHandler+0x6e>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	2200      	movs	r2, #0
 80066b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80066b4:	9901      	ldr	r1, [sp, #4]
 80066b6:	0f8a      	lsrs	r2, r1, #30
 80066b8:	4b58      	ldr	r3, [pc, #352]	@ (800681c <HAL_FDCAN_IRQHandler+0x2cc>)
 80066ba:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80066bc:	4620      	mov	r0, r4
 80066be:	f7ff ff37 	bl	8006530 <HAL_FDCAN_ClockCalibrationCallback>
 80066c2:	e77f      	b.n	80065c4 <HAL_FDCAN_IRQHandler+0x74>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80066c4:	6823      	ldr	r3, [r4, #0]
 80066c6:	f8c3 a050 	str.w	sl, [r3, #80]	@ 0x50
 80066ca:	ea4f 729a 	mov.w	r2, sl, lsr #30
 80066ce:	4b53      	ldr	r3, [pc, #332]	@ (800681c <HAL_FDCAN_IRQHandler+0x2cc>)
 80066d0:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80066d2:	4651      	mov	r1, sl
 80066d4:	4620      	mov	r0, r4
 80066d6:	f7ff ff2c 	bl	8006532 <HAL_FDCAN_TxEventFifoCallback>
 80066da:	e776      	b.n	80065ca <HAL_FDCAN_IRQHandler+0x7a>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	f8c3 9050 	str.w	r9, [r3, #80]	@ 0x50
 80066e2:	ea4f 7299 	mov.w	r2, r9, lsr #30
 80066e6:	4b4d      	ldr	r3, [pc, #308]	@ (800681c <HAL_FDCAN_IRQHandler+0x2cc>)
 80066e8:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80066ea:	4649      	mov	r1, r9
 80066ec:	4620      	mov	r0, r4
 80066ee:	f7fa fac1 	bl	8000c74 <HAL_FDCAN_RxFifo0Callback>
 80066f2:	e76e      	b.n	80065d2 <HAL_FDCAN_IRQHandler+0x82>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80066f4:	6823      	ldr	r3, [r4, #0]
 80066f6:	f8c3 8050 	str.w	r8, [r3, #80]	@ 0x50
 80066fa:	ea4f 7298 	mov.w	r2, r8, lsr #30
 80066fe:	4b47      	ldr	r3, [pc, #284]	@ (800681c <HAL_FDCAN_IRQHandler+0x2cc>)
 8006700:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006702:	4641      	mov	r1, r8
 8006704:	4620      	mov	r0, r4
 8006706:	f7ff ff15 	bl	8006534 <HAL_FDCAN_RxFifo1Callback>
 800670a:	e766      	b.n	80065da <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006712:	651a      	str	r2, [r3, #80]	@ 0x50
 8006714:	4b41      	ldr	r3, [pc, #260]	@ (800681c <HAL_FDCAN_IRQHandler+0x2cc>)
 8006716:	2200      	movs	r2, #0
 8006718:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800671a:	4620      	mov	r0, r4
 800671c:	f7ff ff0b 	bl	8006536 <HAL_FDCAN_TxFifoEmptyCallback>
 8006720:	e762      	b.n	80065e8 <HAL_FDCAN_IRQHandler+0x98>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006728:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800672c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8006730:	6518      	str	r0, [r3, #80]	@ 0x50
 8006732:	4b3a      	ldr	r3, [pc, #232]	@ (800681c <HAL_FDCAN_IRQHandler+0x2cc>)
 8006734:	2000      	movs	r0, #0
 8006736:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006738:	4011      	ands	r1, r2
 800673a:	4620      	mov	r0, r4
 800673c:	f7ff fefc 	bl	8006538 <HAL_FDCAN_TxBufferCompleteCallback>
 8006740:	e759      	b.n	80065f6 <HAL_FDCAN_IRQHandler+0xa6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8006748:	651a      	str	r2, [r3, #80]	@ 0x50
 800674a:	4b34      	ldr	r3, [pc, #208]	@ (800681c <HAL_FDCAN_IRQHandler+0x2cc>)
 800674c:	2200      	movs	r2, #0
 800674e:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006750:	4620      	mov	r0, r4
 8006752:	f7ff fef3 	bl	800653c <HAL_FDCAN_RxBufferNewMessageCallback>
 8006756:	e755      	b.n	8006604 <HAL_FDCAN_IRQHandler+0xb4>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800675e:	651a      	str	r2, [r3, #80]	@ 0x50
 8006760:	4b2e      	ldr	r3, [pc, #184]	@ (800681c <HAL_FDCAN_IRQHandler+0x2cc>)
 8006762:	2200      	movs	r2, #0
 8006764:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006766:	4620      	mov	r0, r4
 8006768:	f7ff fee9 	bl	800653e <HAL_FDCAN_TimestampWraparoundCallback>
 800676c:	e751      	b.n	8006612 <HAL_FDCAN_IRQHandler+0xc2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006774:	651a      	str	r2, [r3, #80]	@ 0x50
 8006776:	4b29      	ldr	r3, [pc, #164]	@ (800681c <HAL_FDCAN_IRQHandler+0x2cc>)
 8006778:	2200      	movs	r2, #0
 800677a:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800677c:	4620      	mov	r0, r4
 800677e:	f7ff fedf 	bl	8006540 <HAL_FDCAN_TimeoutOccurredCallback>
 8006782:	e74d      	b.n	8006620 <HAL_FDCAN_IRQHandler+0xd0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	651f      	str	r7, [r3, #80]	@ 0x50
 8006788:	0fba      	lsrs	r2, r7, #30
 800678a:	4b24      	ldr	r3, [pc, #144]	@ (800681c <HAL_FDCAN_IRQHandler+0x2cc>)
 800678c:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800678e:	4639      	mov	r1, r7
 8006790:	4620      	mov	r0, r4
 8006792:	f7ff fed7 	bl	8006544 <HAL_FDCAN_ErrorStatusCallback>
 8006796:	e759      	b.n	800664c <HAL_FDCAN_IRQHandler+0xfc>
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8006798:	6863      	ldr	r3, [r4, #4]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	f012 0f03 	tst.w	r2, #3
 80067a0:	f43f af64 	beq.w	800666c <HAL_FDCAN_IRQHandler+0x11c>
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80067a4:	6a19      	ldr	r1, [r3, #32]
 80067a6:	f001 010f 	and.w	r1, r1, #15
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80067aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80067ac:	6a18      	ldr	r0, [r3, #32]
 80067ae:	f000 0830 	and.w	r8, r0, #48	@ 0x30
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80067b2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80067b4:	ea08 0800 	and.w	r8, r8, r0
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80067b8:	6a1f      	ldr	r7, [r3, #32]
 80067ba:	f407 77c0 	and.w	r7, r7, #384	@ 0x180
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80067be:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80067c0:	4007      	ands	r7, r0
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80067c2:	6a1e      	ldr	r6, [r3, #32]
 80067c4:	f406 46fc 	and.w	r6, r6, #32256	@ 0x7e00
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80067c8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80067ca:	4006      	ands	r6, r0
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80067cc:	6a1d      	ldr	r5, [r3, #32]
 80067ce:	f405 25f0 	and.w	r5, r5, #491520	@ 0x78000
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80067d2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80067d4:	4005      	ands	r5, r0
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80067d6:	f8d3 9024 	ldr.w	r9, [r3, #36]	@ 0x24
      itflagTTIR = hfdcan->ttcan->TTIR;
 80067da:	f8d3 a020 	ldr.w	sl, [r3, #32]
      if (TTSchedSyncITs != 0U)
 80067de:	4011      	ands	r1, r2
 80067e0:	d120      	bne.n	8006824 <HAL_FDCAN_IRQHandler+0x2d4>
      if (TTTimeMarkITs != 0U)
 80067e2:	f1b8 0f00 	cmp.w	r8, #0
 80067e6:	d122      	bne.n	800682e <HAL_FDCAN_IRQHandler+0x2de>
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80067e8:	f019 0f40 	tst.w	r9, #64	@ 0x40
 80067ec:	d002      	beq.n	80067f4 <HAL_FDCAN_IRQHandler+0x2a4>
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80067ee:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80067f2:	d124      	bne.n	800683e <HAL_FDCAN_IRQHandler+0x2ee>
      if (TTGlobTimeITs != 0U)
 80067f4:	bb7f      	cbnz	r7, 8006856 <HAL_FDCAN_IRQHandler+0x306>
      if (TTDistErrors != 0U)
 80067f6:	b136      	cbz	r6, 8006806 <HAL_FDCAN_IRQHandler+0x2b6>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80067f8:	6863      	ldr	r3, [r4, #4]
 80067fa:	621e      	str	r6, [r3, #32]
        hfdcan->ErrorCode |= TTDistErrors;
 80067fc:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006800:	4333      	orrs	r3, r6
 8006802:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      if (TTFatalErrors != 0U)
 8006806:	2d00      	cmp	r5, #0
 8006808:	f43f af30 	beq.w	800666c <HAL_FDCAN_IRQHandler+0x11c>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800680c:	6863      	ldr	r3, [r4, #4]
 800680e:	621d      	str	r5, [r3, #32]
        hfdcan->ErrorCode |= TTFatalErrors;
 8006810:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006814:	432b      	orrs	r3, r5
 8006816:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800681a:	e727      	b.n	800666c <HAL_FDCAN_IRQHandler+0x11c>
 800681c:	4000a800 	.word	0x4000a800
 8006820:	4000a000 	.word	0x4000a000
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8006824:	6219      	str	r1, [r3, #32]
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8006826:	4620      	mov	r0, r4
 8006828:	f7ff fe8d 	bl	8006546 <HAL_FDCAN_TT_ScheduleSyncCallback>
 800682c:	e7d9      	b.n	80067e2 <HAL_FDCAN_IRQHandler+0x292>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800682e:	6863      	ldr	r3, [r4, #4]
 8006830:	f8c3 8020 	str.w	r8, [r3, #32]
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8006834:	4641      	mov	r1, r8
 8006836:	4620      	mov	r0, r4
 8006838:	f7ff fe86 	bl	8006548 <HAL_FDCAN_TT_TimeMarkCallback>
 800683c:	e7d4      	b.n	80067e8 <HAL_FDCAN_IRQHandler+0x298>
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800683e:	6863      	ldr	r3, [r4, #4]
 8006840:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8006842:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8006844:	2040      	movs	r0, #64	@ 0x40
 8006846:	6218      	str	r0, [r3, #32]
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8006848:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800684c:	0c09      	lsrs	r1, r1, #16
 800684e:	4620      	mov	r0, r4
 8006850:	f7ff fe7b 	bl	800654a <HAL_FDCAN_TT_StopWatchCallback>
 8006854:	e7ce      	b.n	80067f4 <HAL_FDCAN_IRQHandler+0x2a4>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8006856:	6863      	ldr	r3, [r4, #4]
 8006858:	621f      	str	r7, [r3, #32]
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800685a:	4639      	mov	r1, r7
 800685c:	4620      	mov	r0, r4
 800685e:	f7ff fe75 	bl	800654c <HAL_FDCAN_TT_GlobalTimeCallback>
 8006862:	e7c8      	b.n	80067f6 <HAL_FDCAN_IRQHandler+0x2a6>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006864:	4620      	mov	r0, r4
 8006866:	f7fa f845 	bl	80008f4 <HAL_FDCAN_ErrorCallback>
}
 800686a:	e704      	b.n	8006676 <HAL_FDCAN_IRQHandler+0x126>

0800686c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800686c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800686e:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8006870:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006872:	e06b      	b.n	800694c <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006874:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006876:	005e      	lsls	r6, r3, #1
 8006878:	2403      	movs	r4, #3
 800687a:	40b4      	lsls	r4, r6
 800687c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006880:	68cc      	ldr	r4, [r1, #12]
 8006882:	40b4      	lsls	r4, r6
 8006884:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8006886:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006888:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800688a:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800688e:	684c      	ldr	r4, [r1, #4]
 8006890:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8006894:	409c      	lsls	r4, r3
 8006896:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8006898:	6044      	str	r4, [r0, #4]
 800689a:	e069      	b.n	8006970 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800689c:	08dd      	lsrs	r5, r3, #3
 800689e:	3508      	adds	r5, #8
 80068a0:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80068a4:	f003 0c07 	and.w	ip, r3, #7
 80068a8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80068ac:	f04f 0e0f 	mov.w	lr, #15
 80068b0:	fa0e fe0c 	lsl.w	lr, lr, ip
 80068b4:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80068b8:	690c      	ldr	r4, [r1, #16]
 80068ba:	fa04 f40c 	lsl.w	r4, r4, ip
 80068be:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80068c2:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80068c6:	e06b      	b.n	80069a0 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80068c8:	2409      	movs	r4, #9
 80068ca:	e000      	b.n	80068ce <HAL_GPIO_Init+0x62>
 80068cc:	2400      	movs	r4, #0
 80068ce:	fa04 f40e 	lsl.w	r4, r4, lr
 80068d2:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068d4:	f10c 0c02 	add.w	ip, ip, #2
 80068d8:	4d69      	ldr	r5, [pc, #420]	@ (8006a80 <HAL_GPIO_Init+0x214>)
 80068da:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80068de:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 80068e2:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80068e4:	43d4      	mvns	r4, r2
 80068e6:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068ea:	684f      	ldr	r7, [r1, #4]
 80068ec:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 80068f0:	d001      	beq.n	80068f6 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 80068f2:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80068f6:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 80068fa:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80068fc:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80068fe:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006902:	684f      	ldr	r7, [r1, #4]
 8006904:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 8006908:	d001      	beq.n	800690e <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 800690a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800690e:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8006912:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006914:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
        temp &= ~(iocurrent);
 8006918:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800691c:	684f      	ldr	r7, [r1, #4]
 800691e:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8006922:	d001      	beq.n	8006928 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8006924:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006928:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 800692c:	f8c5 6084 	str.w	r6, [r5, #132]	@ 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006930:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
        temp &= ~(iocurrent);
 8006934:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006936:	684e      	ldr	r6, [r1, #4]
 8006938:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 800693c:	d001      	beq.n	8006942 <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 800693e:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006942:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006946:	f8c2 4080 	str.w	r4, [r2, #128]	@ 0x80
      }
    }

    position++;
 800694a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800694c:	680a      	ldr	r2, [r1, #0]
 800694e:	fa32 f403 	lsrs.w	r4, r2, r3
 8006952:	f000 8092 	beq.w	8006a7a <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006956:	f04f 0c01 	mov.w	ip, #1
 800695a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 800695e:	ea1c 0202 	ands.w	r2, ip, r2
 8006962:	d0f2      	beq.n	800694a <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006964:	684c      	ldr	r4, [r1, #4]
 8006966:	f004 0403 	and.w	r4, r4, #3
 800696a:	3c01      	subs	r4, #1
 800696c:	2c01      	cmp	r4, #1
 800696e:	d981      	bls.n	8006874 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006970:	684c      	ldr	r4, [r1, #4]
 8006972:	f004 0403 	and.w	r4, r4, #3
 8006976:	2c03      	cmp	r4, #3
 8006978:	d00c      	beq.n	8006994 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 800697a:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800697c:	005d      	lsls	r5, r3, #1
 800697e:	f04f 0c03 	mov.w	ip, #3
 8006982:	fa0c fc05 	lsl.w	ip, ip, r5
 8006986:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800698a:	688c      	ldr	r4, [r1, #8]
 800698c:	40ac      	lsls	r4, r5
 800698e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 8006992:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006994:	684c      	ldr	r4, [r1, #4]
 8006996:	f004 0403 	and.w	r4, r4, #3
 800699a:	2c02      	cmp	r4, #2
 800699c:	f43f af7e 	beq.w	800689c <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 80069a0:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80069a2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80069a6:	f04f 0c03 	mov.w	ip, #3
 80069aa:	fa0c fc0e 	lsl.w	ip, ip, lr
 80069ae:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069b2:	684c      	ldr	r4, [r1, #4]
 80069b4:	f004 0403 	and.w	r4, r4, #3
 80069b8:	fa04 f40e 	lsl.w	r4, r4, lr
 80069bc:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80069c0:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80069c2:	684c      	ldr	r4, [r1, #4]
 80069c4:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 80069c8:	d0bf      	beq.n	800694a <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069ca:	4c2e      	ldr	r4, [pc, #184]	@ (8006a84 <HAL_GPIO_Init+0x218>)
 80069cc:	f8d4 50f4 	ldr.w	r5, [r4, #244]	@ 0xf4
 80069d0:	f045 0502 	orr.w	r5, r5, #2
 80069d4:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
 80069d8:	f8d4 40f4 	ldr.w	r4, [r4, #244]	@ 0xf4
 80069dc:	f004 0402 	and.w	r4, r4, #2
 80069e0:	9401      	str	r4, [sp, #4]
 80069e2:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80069e4:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80069e8:	f10c 0502 	add.w	r5, ip, #2
 80069ec:	4c24      	ldr	r4, [pc, #144]	@ (8006a80 <HAL_GPIO_Init+0x214>)
 80069ee:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80069f2:	f003 0e03 	and.w	lr, r3, #3
 80069f6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80069fa:	240f      	movs	r4, #15
 80069fc:	fa04 f40e 	lsl.w	r4, r4, lr
 8006a00:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006a04:	4c20      	ldr	r4, [pc, #128]	@ (8006a88 <HAL_GPIO_Init+0x21c>)
 8006a06:	42a0      	cmp	r0, r4
 8006a08:	f43f af60 	beq.w	80068cc <HAL_GPIO_Init+0x60>
 8006a0c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006a10:	42a0      	cmp	r0, r4
 8006a12:	d022      	beq.n	8006a5a <HAL_GPIO_Init+0x1ee>
 8006a14:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006a18:	42a0      	cmp	r0, r4
 8006a1a:	d020      	beq.n	8006a5e <HAL_GPIO_Init+0x1f2>
 8006a1c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006a20:	42a0      	cmp	r0, r4
 8006a22:	d01e      	beq.n	8006a62 <HAL_GPIO_Init+0x1f6>
 8006a24:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006a28:	42a0      	cmp	r0, r4
 8006a2a:	d01c      	beq.n	8006a66 <HAL_GPIO_Init+0x1fa>
 8006a2c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006a30:	42a0      	cmp	r0, r4
 8006a32:	d01a      	beq.n	8006a6a <HAL_GPIO_Init+0x1fe>
 8006a34:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006a38:	42a0      	cmp	r0, r4
 8006a3a:	d018      	beq.n	8006a6e <HAL_GPIO_Init+0x202>
 8006a3c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006a40:	42a0      	cmp	r0, r4
 8006a42:	d016      	beq.n	8006a72 <HAL_GPIO_Init+0x206>
 8006a44:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006a48:	42a0      	cmp	r0, r4
 8006a4a:	d014      	beq.n	8006a76 <HAL_GPIO_Init+0x20a>
 8006a4c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006a50:	42a0      	cmp	r0, r4
 8006a52:	f43f af39 	beq.w	80068c8 <HAL_GPIO_Init+0x5c>
 8006a56:	240a      	movs	r4, #10
 8006a58:	e739      	b.n	80068ce <HAL_GPIO_Init+0x62>
 8006a5a:	2401      	movs	r4, #1
 8006a5c:	e737      	b.n	80068ce <HAL_GPIO_Init+0x62>
 8006a5e:	2402      	movs	r4, #2
 8006a60:	e735      	b.n	80068ce <HAL_GPIO_Init+0x62>
 8006a62:	2403      	movs	r4, #3
 8006a64:	e733      	b.n	80068ce <HAL_GPIO_Init+0x62>
 8006a66:	2404      	movs	r4, #4
 8006a68:	e731      	b.n	80068ce <HAL_GPIO_Init+0x62>
 8006a6a:	2405      	movs	r4, #5
 8006a6c:	e72f      	b.n	80068ce <HAL_GPIO_Init+0x62>
 8006a6e:	2406      	movs	r4, #6
 8006a70:	e72d      	b.n	80068ce <HAL_GPIO_Init+0x62>
 8006a72:	2407      	movs	r4, #7
 8006a74:	e72b      	b.n	80068ce <HAL_GPIO_Init+0x62>
 8006a76:	2408      	movs	r4, #8
 8006a78:	e729      	b.n	80068ce <HAL_GPIO_Init+0x62>
  }
}
 8006a7a:	b003      	add	sp, #12
 8006a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	58000400 	.word	0x58000400
 8006a84:	58024400 	.word	0x58024400
 8006a88:	58020000 	.word	0x58020000

08006a8c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006a8c:	6903      	ldr	r3, [r0, #16]
 8006a8e:	4219      	tst	r1, r3
 8006a90:	d001      	beq.n	8006a96 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8006a92:	2001      	movs	r0, #1
 8006a94:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a96:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8006a98:	4770      	bx	lr

08006a9a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a9a:	b10a      	cbz	r2, 8006aa0 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a9c:	6181      	str	r1, [r0, #24]
 8006a9e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006aa0:	0409      	lsls	r1, r1, #16
 8006aa2:	6181      	str	r1, [r0, #24]
  }
}
 8006aa4:	4770      	bx	lr

08006aa6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006aa6:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ab0:	4203      	tst	r3, r0
 8006ab2:	d100      	bne.n	8006ab6 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8006ab4:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aba:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006abe:	f7f9 ff37 	bl	8000930 <HAL_GPIO_EXTI_Callback>
}
 8006ac2:	e7f7      	b.n	8006ab4 <HAL_GPIO_EXTI_IRQHandler+0xe>

08006ac4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ac4:	6803      	ldr	r3, [r0, #0]
 8006ac6:	699a      	ldr	r2, [r3, #24]
 8006ac8:	f012 0f02 	tst.w	r2, #2
 8006acc:	d001      	beq.n	8006ad2 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006ace:	2200      	movs	r2, #0
 8006ad0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ad2:	6803      	ldr	r3, [r0, #0]
 8006ad4:	699a      	ldr	r2, [r3, #24]
 8006ad6:	f012 0f01 	tst.w	r2, #1
 8006ada:	d103      	bne.n	8006ae4 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	f042 0201 	orr.w	r2, r2, #1
 8006ae2:	619a      	str	r2, [r3, #24]
  }
}
 8006ae4:	4770      	bx	lr

08006ae6 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ae6:	b410      	push	{r4}
 8006ae8:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006aea:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006aee:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006af2:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006af4:	4321      	orrs	r1, r4
 8006af6:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006afa:	6802      	ldr	r2, [r0, #0]
 8006afc:	6853      	ldr	r3, [r2, #4]
 8006afe:	0d64      	lsrs	r4, r4, #21
 8006b00:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 8006b04:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 8006b08:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 8006b0c:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 8006b10:	f044 0403 	orr.w	r4, r4, #3
 8006b14:	ea23 0304 	bic.w	r3, r3, r4
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b20:	4770      	bx	lr
	...

08006b24 <I2C_Enable_IRQ>:
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006b24:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006b26:	4a1a      	ldr	r2, [pc, #104]	@ (8006b90 <I2C_Enable_IRQ+0x6c>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d015      	beq.n	8006b58 <I2C_Enable_IRQ+0x34>
 8006b2c:	4a19      	ldr	r2, [pc, #100]	@ (8006b94 <I2C_Enable_IRQ+0x70>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d012      	beq.n	8006b58 <I2C_Enable_IRQ+0x34>
      tmpisr |= I2C_IT_TCI;
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006b32:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8006b36:	d128      	bne.n	8006b8a <I2C_Enable_IRQ+0x66>
  uint32_t tmpisr = 0U;
 8006b38:	2300      	movs	r3, #0
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006b3a:	f011 0f01 	tst.w	r1, #1
 8006b3e:	d001      	beq.n	8006b44 <I2C_Enable_IRQ+0x20>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006b40:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006b44:	f011 0f02 	tst.w	r1, #2
 8006b48:	d001      	beq.n	8006b4e <I2C_Enable_IRQ+0x2a>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006b4a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b4e:	2920      	cmp	r1, #32
 8006b50:	d10e      	bne.n	8006b70 <I2C_Enable_IRQ+0x4c>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006b52:	f043 0320 	orr.w	r3, r3, #32
 8006b56:	e00b      	b.n	8006b70 <I2C_Enable_IRQ+0x4c>
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006b58:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8006b5c:	d103      	bne.n	8006b66 <I2C_Enable_IRQ+0x42>
    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006b5e:	2910      	cmp	r1, #16
 8006b60:	d00b      	beq.n	8006b7a <I2C_Enable_IRQ+0x56>
  uint32_t tmpisr = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	e000      	b.n	8006b68 <I2C_Enable_IRQ+0x44>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b66:	23b8      	movs	r3, #184	@ 0xb8
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b68:	2920      	cmp	r1, #32
 8006b6a:	d008      	beq.n	8006b7e <I2C_Enable_IRQ+0x5a>
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006b6c:	2940      	cmp	r1, #64	@ 0x40
 8006b6e:	d009      	beq.n	8006b84 <I2C_Enable_IRQ+0x60>
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006b70:	6801      	ldr	r1, [r0, #0]
 8006b72:	680a      	ldr	r2, [r1, #0]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	600b      	str	r3, [r1, #0]
}
 8006b78:	4770      	bx	lr
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006b7a:	2390      	movs	r3, #144	@ 0x90
 8006b7c:	e7f4      	b.n	8006b68 <I2C_Enable_IRQ+0x44>
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006b7e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006b82:	e7f3      	b.n	8006b6c <I2C_Enable_IRQ+0x48>
      tmpisr |= I2C_IT_TCI;
 8006b84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b88:	e7f2      	b.n	8006b70 <I2C_Enable_IRQ+0x4c>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b8a:	23b8      	movs	r3, #184	@ 0xb8
 8006b8c:	e7d5      	b.n	8006b3a <I2C_Enable_IRQ+0x16>
 8006b8e:	bf00      	nop
 8006b90:	08008409 	.word	0x08008409
 8006b94:	080081ed 	.word	0x080081ed

08006b98 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006b98:	f011 0f01 	tst.w	r1, #1
 8006b9c:	d009      	beq.n	8006bb2 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b9e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006ba2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006ba6:	2b28      	cmp	r3, #40	@ 0x28
 8006ba8:	d001      	beq.n	8006bae <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006baa:	23f2      	movs	r3, #242	@ 0xf2
 8006bac:	e002      	b.n	8006bb4 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006bae:	2342      	movs	r3, #66	@ 0x42
 8006bb0:	e000      	b.n	8006bb4 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8006bb2:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006bb4:	f011 0f02 	tst.w	r1, #2
 8006bb8:	d009      	beq.n	8006bce <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006bba:	f043 0c44 	orr.w	ip, r3, #68	@ 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bbe:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8006bc2:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 8006bc6:	2a28      	cmp	r2, #40	@ 0x28
 8006bc8:	d010      	beq.n	8006bec <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006bca:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006bce:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8006bd2:	d10d      	bne.n	8006bf0 <I2C_Disable_IRQ+0x58>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006bd4:	2910      	cmp	r1, #16
 8006bd6:	d00e      	beq.n	8006bf6 <I2C_Disable_IRQ+0x5e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006bd8:	2920      	cmp	r1, #32
 8006bda:	d00f      	beq.n	8006bfc <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006bdc:	2940      	cmp	r1, #64	@ 0x40
 8006bde:	d010      	beq.n	8006c02 <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006be0:	6801      	ldr	r1, [r0, #0]
 8006be2:	680a      	ldr	r2, [r1, #0]
 8006be4:	ea22 0303 	bic.w	r3, r2, r3
 8006be8:	600b      	str	r3, [r1, #0]
}
 8006bea:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006bec:	4663      	mov	r3, ip
 8006bee:	e7ee      	b.n	8006bce <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006bf0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006bf4:	e7ee      	b.n	8006bd4 <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006bf6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006bfa:	e7ed      	b.n	8006bd8 <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
 8006bfc:	f043 0320 	orr.w	r3, r3, #32
 8006c00:	e7ec      	b.n	8006bdc <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
 8006c02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c06:	e7eb      	b.n	8006be0 <I2C_Disable_IRQ+0x48>

08006c08 <I2C_IsErrorOccurred>:
{
 8006c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c0c:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8006c0e:	6803      	ldr	r3, [r0, #0]
 8006c10:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006c12:	f017 0710 	ands.w	r7, r7, #16
 8006c16:	d04e      	beq.n	8006cb6 <I2C_IsErrorOccurred+0xae>
 8006c18:	460e      	mov	r6, r1
 8006c1a:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c1c:	2210      	movs	r2, #16
 8006c1e:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006c20:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	6998      	ldr	r0, [r3, #24]
 8006c26:	f010 0f20 	tst.w	r0, #32
 8006c2a:	d13d      	bne.n	8006ca8 <I2C_IsErrorOccurred+0xa0>
 8006c2c:	2d00      	cmp	r5, #0
 8006c2e:	d13b      	bne.n	8006ca8 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8006c30:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006c34:	d0f5      	beq.n	8006c22 <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006c36:	f7fc fc67 	bl	8003508 <HAL_GetTick>
 8006c3a:	eba0 0008 	sub.w	r0, r0, r8
 8006c3e:	42b0      	cmp	r0, r6
 8006c40:	d801      	bhi.n	8006c46 <I2C_IsErrorOccurred+0x3e>
 8006c42:	2e00      	cmp	r6, #0
 8006c44:	d1ed      	bne.n	8006c22 <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006c46:	6821      	ldr	r1, [r4, #0]
 8006c48:	684a      	ldr	r2, [r1, #4]
 8006c4a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 8006c4e:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8006c52:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006c54:	6988      	ldr	r0, [r1, #24]
 8006c56:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 8006c5a:	d004      	beq.n	8006c66 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 8006c5c:	3b20      	subs	r3, #32
 8006c5e:	bf18      	it	ne
 8006c60:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 8006c62:	b902      	cbnz	r2, 8006c66 <I2C_IsErrorOccurred+0x5e>
 8006c64:	b9c3      	cbnz	r3, 8006c98 <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	f013 0f20 	tst.w	r3, #32
 8006c6e:	d1d8      	bne.n	8006c22 <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006c70:	f7fc fc4a 	bl	8003508 <HAL_GetTick>
 8006c74:	eba0 0008 	sub.w	r0, r0, r8
 8006c78:	2819      	cmp	r0, #25
 8006c7a:	d9f4      	bls.n	8006c66 <I2C_IsErrorOccurred+0x5e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c7c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006c7e:	f043 0320 	orr.w	r3, r3, #32
 8006c82:	6463      	str	r3, [r4, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006c84:	2320      	movs	r3, #32
 8006c86:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
              __HAL_UNLOCK(hi2c);
 8006c90:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
              status = HAL_ERROR;
 8006c94:	2501      	movs	r5, #1
 8006c96:	e7e6      	b.n	8006c66 <I2C_IsErrorOccurred+0x5e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006c98:	684b      	ldr	r3, [r1, #4]
 8006c9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c9e:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8006ca0:	f7fc fc32 	bl	8003508 <HAL_GetTick>
 8006ca4:	4680      	mov	r8, r0
 8006ca6:	e7de      	b.n	8006c66 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8006ca8:	2d00      	cmp	r5, #0
 8006caa:	d140      	bne.n	8006d2e <I2C_IsErrorOccurred+0x126>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cac:	2220      	movs	r2, #32
 8006cae:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8006cb0:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8006cb2:	2501      	movs	r5, #1
 8006cb4:	e000      	b.n	8006cb8 <I2C_IsErrorOccurred+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 8006cb6:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 8006cb8:	6822      	ldr	r2, [r4, #0]
 8006cba:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006cbc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006cc0:	d005      	beq.n	8006cce <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 8006cc2:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006cc6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006cca:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8006ccc:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006cce:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8006cd2:	d006      	beq.n	8006ce2 <I2C_IsErrorOccurred+0xda>
    error_code |= HAL_I2C_ERROR_OVR;
 8006cd4:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006cd8:	6822      	ldr	r2, [r4, #0]
 8006cda:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006cde:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8006ce0:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006ce2:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8006ce6:	d024      	beq.n	8006d32 <I2C_IsErrorOccurred+0x12a>
    error_code |= HAL_I2C_ERROR_ARLO;
 8006ce8:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cf2:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8006cf4:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f7ff fee4 	bl	8006ac4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8006cfc:	6822      	ldr	r2, [r4, #0]
 8006cfe:	6853      	ldr	r3, [r2, #4]
 8006d00:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8006d04:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8006d08:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8006d0c:	f023 0301 	bic.w	r3, r3, #1
 8006d10:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8006d12:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006d14:	433b      	orrs	r3, r7
 8006d16:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006d18:	2320      	movs	r3, #32
 8006d1a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8006d24:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8006d28:	4628      	mov	r0, r5
 8006d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 8006d2e:	2704      	movs	r7, #4
 8006d30:	e7c2      	b.n	8006cb8 <I2C_IsErrorOccurred+0xb0>
  if (status != HAL_OK)
 8006d32:	2d00      	cmp	r5, #0
 8006d34:	d0f8      	beq.n	8006d28 <I2C_IsErrorOccurred+0x120>
 8006d36:	e7de      	b.n	8006cf6 <I2C_IsErrorOccurred+0xee>

08006d38 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8006d38:	b570      	push	{r4, r5, r6, lr}
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	460d      	mov	r5, r1
 8006d3e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	f013 0f02 	tst.w	r3, #2
 8006d48:	d11d      	bne.n	8006d86 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d4a:	4632      	mov	r2, r6
 8006d4c:	4629      	mov	r1, r5
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f7ff ff5a 	bl	8006c08 <I2C_IsErrorOccurred>
 8006d54:	b9c8      	cbnz	r0, 8006d8a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8006d56:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006d5a:	d0f1      	beq.n	8006d40 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d5c:	f7fc fbd4 	bl	8003508 <HAL_GetTick>
 8006d60:	1b80      	subs	r0, r0, r6
 8006d62:	42a8      	cmp	r0, r5
 8006d64:	d801      	bhi.n	8006d6a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8006d66:	2d00      	cmp	r5, #0
 8006d68:	d1ea      	bne.n	8006d40 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d6a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006d6c:	f043 0320 	orr.w	r3, r3, #32
 8006d70:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d72:	2320      	movs	r3, #32
 8006d74:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8006d7e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8006d82:	2001      	movs	r0, #1
 8006d84:	e000      	b.n	8006d88 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8006d86:	2000      	movs	r0, #0
}
 8006d88:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006d8a:	2001      	movs	r0, #1
 8006d8c:	e7fc      	b.n	8006d88 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08006d8e <I2C_WaitOnFlagUntilTimeout>:
{
 8006d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d92:	4606      	mov	r6, r0
 8006d94:	4688      	mov	r8, r1
 8006d96:	4617      	mov	r7, r2
 8006d98:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d9a:	6834      	ldr	r4, [r6, #0]
 8006d9c:	69a4      	ldr	r4, [r4, #24]
 8006d9e:	ea38 0404 	bics.w	r4, r8, r4
 8006da2:	bf0c      	ite	eq
 8006da4:	2401      	moveq	r4, #1
 8006da6:	2400      	movne	r4, #0
 8006da8:	42bc      	cmp	r4, r7
 8006daa:	d118      	bne.n	8006dde <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8006dac:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006db0:	d0f3      	beq.n	8006d9a <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006db2:	f7fc fba9 	bl	8003508 <HAL_GetTick>
 8006db6:	9b06      	ldr	r3, [sp, #24]
 8006db8:	1ac0      	subs	r0, r0, r3
 8006dba:	42a8      	cmp	r0, r5
 8006dbc:	d801      	bhi.n	8006dc2 <I2C_WaitOnFlagUntilTimeout+0x34>
 8006dbe:	2d00      	cmp	r5, #0
 8006dc0:	d1eb      	bne.n	8006d9a <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dc2:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8006dc4:	f043 0320 	orr.w	r3, r3, #32
 8006dc8:	6473      	str	r3, [r6, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006dca:	2320      	movs	r3, #32
 8006dcc:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f886 3042 	strb.w	r3, [r6, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8006dd6:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_ERROR;
 8006dda:	2001      	movs	r0, #1
 8006ddc:	e000      	b.n	8006de0 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8006dde:	2000      	movs	r0, #0
}
 8006de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006de4 <I2C_RequestMemoryWrite>:
{
 8006de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	4604      	mov	r4, r0
 8006dec:	4690      	mov	r8, r2
 8006dee:	461d      	mov	r5, r3
 8006df0:	9e08      	ldr	r6, [sp, #32]
 8006df2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006df4:	4b19      	ldr	r3, [pc, #100]	@ (8006e5c <I2C_RequestMemoryWrite+0x78>)
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006dfc:	b2ea      	uxtb	r2, r5
 8006dfe:	f7ff fe72 	bl	8006ae6 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e02:	463a      	mov	r2, r7
 8006e04:	4631      	mov	r1, r6
 8006e06:	4620      	mov	r0, r4
 8006e08:	f7ff ff96 	bl	8006d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e0c:	b9f8      	cbnz	r0, 8006e4e <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e0e:	2d01      	cmp	r5, #1
 8006e10:	d10e      	bne.n	8006e30 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	fa5f f288 	uxtb.w	r2, r8
 8006e18:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006e1a:	9700      	str	r7, [sp, #0]
 8006e1c:	4633      	mov	r3, r6
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2180      	movs	r1, #128	@ 0x80
 8006e22:	4620      	mov	r0, r4
 8006e24:	f7ff ffb3 	bl	8006d8e <I2C_WaitOnFlagUntilTimeout>
 8006e28:	b9a8      	cbnz	r0, 8006e56 <I2C_RequestMemoryWrite+0x72>
}
 8006e2a:	b002      	add	sp, #8
 8006e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8006e36:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e38:	463a      	mov	r2, r7
 8006e3a:	4631      	mov	r1, r6
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f7ff ff7b 	bl	8006d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e42:	b930      	cbnz	r0, 8006e52 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	fa5f f288 	uxtb.w	r2, r8
 8006e4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e4c:	e7e5      	b.n	8006e1a <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8006e4e:	2001      	movs	r0, #1
 8006e50:	e7eb      	b.n	8006e2a <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8006e52:	2001      	movs	r0, #1
 8006e54:	e7e9      	b.n	8006e2a <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8006e56:	2001      	movs	r0, #1
 8006e58:	e7e7      	b.n	8006e2a <I2C_RequestMemoryWrite+0x46>
 8006e5a:	bf00      	nop
 8006e5c:	80002000 	.word	0x80002000

08006e60 <I2C_RequestMemoryRead>:
{
 8006e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e64:	b082      	sub	sp, #8
 8006e66:	4604      	mov	r4, r0
 8006e68:	4690      	mov	r8, r2
 8006e6a:	461d      	mov	r5, r3
 8006e6c:	9e08      	ldr	r6, [sp, #32]
 8006e6e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006e70:	4b18      	ldr	r3, [pc, #96]	@ (8006ed4 <I2C_RequestMemoryRead+0x74>)
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	2300      	movs	r3, #0
 8006e76:	b2ea      	uxtb	r2, r5
 8006e78:	f7ff fe35 	bl	8006ae6 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e7c:	463a      	mov	r2, r7
 8006e7e:	4631      	mov	r1, r6
 8006e80:	4620      	mov	r0, r4
 8006e82:	f7ff ff59 	bl	8006d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e86:	b9f8      	cbnz	r0, 8006ec8 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e88:	2d01      	cmp	r5, #1
 8006e8a:	d10e      	bne.n	8006eaa <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	fa5f f288 	uxtb.w	r2, r8
 8006e92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006e94:	9700      	str	r7, [sp, #0]
 8006e96:	4633      	mov	r3, r6
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2140      	movs	r1, #64	@ 0x40
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f7ff ff76 	bl	8006d8e <I2C_WaitOnFlagUntilTimeout>
 8006ea2:	b9a8      	cbnz	r0, 8006ed0 <I2C_RequestMemoryRead+0x70>
}
 8006ea4:	b002      	add	sp, #8
 8006ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8006eb0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eb2:	463a      	mov	r2, r7
 8006eb4:	4631      	mov	r1, r6
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f7ff ff3e 	bl	8006d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ebc:	b930      	cbnz	r0, 8006ecc <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	fa5f f288 	uxtb.w	r2, r8
 8006ec4:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ec6:	e7e5      	b.n	8006e94 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8006ec8:	2001      	movs	r0, #1
 8006eca:	e7eb      	b.n	8006ea4 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8006ecc:	2001      	movs	r0, #1
 8006ece:	e7e9      	b.n	8006ea4 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8006ed0:	2001      	movs	r0, #1
 8006ed2:	e7e7      	b.n	8006ea4 <I2C_RequestMemoryRead+0x44>
 8006ed4:	80002000 	.word	0x80002000

08006ed8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	4605      	mov	r5, r0
 8006edc:	460c      	mov	r4, r1
 8006ede:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ee0:	682b      	ldr	r3, [r5, #0]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	f013 0f20 	tst.w	r3, #32
 8006ee8:	d11a      	bne.n	8006f20 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eea:	4632      	mov	r2, r6
 8006eec:	4621      	mov	r1, r4
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f7ff fe8a 	bl	8006c08 <I2C_IsErrorOccurred>
 8006ef4:	b9b0      	cbnz	r0, 8006f24 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ef6:	f7fc fb07 	bl	8003508 <HAL_GetTick>
 8006efa:	1b80      	subs	r0, r0, r6
 8006efc:	42a0      	cmp	r0, r4
 8006efe:	d801      	bhi.n	8006f04 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8006f00:	2c00      	cmp	r4, #0
 8006f02:	d1ed      	bne.n	8006ee0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f04:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8006f06:	f043 0320 	orr.w	r3, r3, #32
 8006f0a:	646b      	str	r3, [r5, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006f0c:	2320      	movs	r3, #32
 8006f0e:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f12:	2300      	movs	r3, #0
 8006f14:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006f18:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 8006f1c:	2001      	movs	r0, #1
}
 8006f1e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8006f20:	2000      	movs	r0, #0
 8006f22:	e7fc      	b.n	8006f1e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8006f24:	2001      	movs	r0, #1
 8006f26:	e7fa      	b.n	8006f1e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08006f28 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	d057      	beq.n	8006fdc <HAL_I2C_Init+0xb4>
{
 8006f2c:	b510      	push	{r4, lr}
 8006f2e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f30:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d041      	beq.n	8006fbc <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f38:	2324      	movs	r3, #36	@ 0x24
 8006f3a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006f3e:	6822      	ldr	r2, [r4, #0]
 8006f40:	6813      	ldr	r3, [r2, #0]
 8006f42:	f023 0301 	bic.w	r3, r3, #1
 8006f46:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f48:	6863      	ldr	r3, [r4, #4]
 8006f4a:	6822      	ldr	r2, [r4, #0]
 8006f4c:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8006f50:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f52:	6822      	ldr	r2, [r4, #0]
 8006f54:	6893      	ldr	r3, [r2, #8]
 8006f56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f5a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f5c:	68e3      	ldr	r3, [r4, #12]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d031      	beq.n	8006fc6 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f62:	68a3      	ldr	r3, [r4, #8]
 8006f64:	6822      	ldr	r2, [r4, #0]
 8006f66:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 8006f6a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f6c:	68e3      	ldr	r3, [r4, #12]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d02f      	beq.n	8006fd2 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f72:	6822      	ldr	r2, [r4, #0]
 8006f74:	6851      	ldr	r1, [r2, #4]
 8006f76:	4b1a      	ldr	r3, [pc, #104]	@ (8006fe0 <HAL_I2C_Init+0xb8>)
 8006f78:	430b      	orrs	r3, r1
 8006f7a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f7c:	6822      	ldr	r2, [r4, #0]
 8006f7e:	68d3      	ldr	r3, [r2, #12]
 8006f80:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f84:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f86:	6923      	ldr	r3, [r4, #16]
 8006f88:	6962      	ldr	r2, [r4, #20]
 8006f8a:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006f8c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f8e:	6822      	ldr	r2, [r4, #0]
 8006f90:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006f94:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006f96:	69e3      	ldr	r3, [r4, #28]
 8006f98:	6a21      	ldr	r1, [r4, #32]
 8006f9a:	6822      	ldr	r2, [r4, #0]
 8006f9c:	430b      	orrs	r3, r1
 8006f9e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006fa0:	6822      	ldr	r2, [r4, #0]
 8006fa2:	6813      	ldr	r3, [r2, #0]
 8006fa4:	f043 0301 	orr.w	r3, r3, #1
 8006fa8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006faa:	2000      	movs	r0, #0
 8006fac:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006fae:	2320      	movs	r3, #32
 8006fb0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fb4:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fb6:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8006fba:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006fbc:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8006fc0:	f7fb fb70 	bl	80026a4 <HAL_I2C_MspInit>
 8006fc4:	e7b8      	b.n	8006f38 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006fc6:	68a3      	ldr	r3, [r4, #8]
 8006fc8:	6822      	ldr	r2, [r4, #0]
 8006fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fce:	6093      	str	r3, [r2, #8]
 8006fd0:	e7cc      	b.n	8006f6c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fd8:	605a      	str	r2, [r3, #4]
 8006fda:	e7ca      	b.n	8006f72 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8006fdc:	2001      	movs	r0, #1
}
 8006fde:	4770      	bx	lr
 8006fe0:	02008000 	.word	0x02008000

08006fe4 <HAL_I2C_Master_Transmit_DMA>:
{
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fea:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8006fee:	b2c0      	uxtb	r0, r0
 8006ff0:	2820      	cmp	r0, #32
 8006ff2:	f040 808d 	bne.w	8007110 <HAL_I2C_Master_Transmit_DMA+0x12c>
 8006ff6:	460d      	mov	r5, r1
 8006ff8:	4611      	mov	r1, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006ffa:	6822      	ldr	r2, [r4, #0]
 8006ffc:	6992      	ldr	r2, [r2, #24]
 8006ffe:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8007002:	f040 8088 	bne.w	8007116 <HAL_I2C_Master_Transmit_DMA+0x132>
    __HAL_LOCK(hi2c);
 8007006:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 800700a:	2a01      	cmp	r2, #1
 800700c:	f000 8085 	beq.w	800711a <HAL_I2C_Master_Transmit_DMA+0x136>
 8007010:	2201      	movs	r2, #1
 8007012:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007016:	2221      	movs	r2, #33	@ 0x21
 8007018:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800701c:	2210      	movs	r2, #16
 800701e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007022:	2200      	movs	r2, #0
 8007024:	6462      	str	r2, [r4, #68]	@ 0x44
    hi2c->pBuffPtr    = pData;
 8007026:	6261      	str	r1, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007028:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800702a:	4b3d      	ldr	r3, [pc, #244]	@ (8007120 <HAL_I2C_Master_Transmit_DMA+0x13c>)
 800702c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800702e:	4b3d      	ldr	r3, [pc, #244]	@ (8007124 <HAL_I2C_Master_Transmit_DMA+0x140>)
 8007030:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007032:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007034:	b29b      	uxth	r3, r3
 8007036:	2bff      	cmp	r3, #255	@ 0xff
 8007038:	d927      	bls.n	800708a <HAL_I2C_Master_Transmit_DMA+0xa6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800703a:	23ff      	movs	r3, #255	@ 0xff
 800703c:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800703e:	f04f 7680 	mov.w	r6, #16777216	@ 0x1000000
    if (hi2c->XferSize > 0U)
 8007042:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8007044:	2a00      	cmp	r2, #0
 8007046:	d04f      	beq.n	80070e8 <HAL_I2C_Master_Transmit_DMA+0x104>
      if (hi2c->hdmatx != NULL)
 8007048:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800704a:	b31b      	cbz	r3, 8007094 <HAL_I2C_Master_Transmit_DMA+0xb0>
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800704c:	4a36      	ldr	r2, [pc, #216]	@ (8007128 <HAL_I2C_Master_Transmit_DMA+0x144>)
 800704e:	63da      	str	r2, [r3, #60]	@ 0x3c
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007050:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007052:	4a36      	ldr	r2, [pc, #216]	@ (800712c <HAL_I2C_Master_Transmit_DMA+0x148>)
 8007054:	64da      	str	r2, [r3, #76]	@ 0x4c
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8007056:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007058:	2300      	movs	r3, #0
 800705a:	6413      	str	r3, [r2, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800705c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800705e:	6513      	str	r3, [r2, #80]	@ 0x50
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8007060:	6822      	ldr	r2, [r4, #0]
 8007062:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8007064:	3228      	adds	r2, #40	@ 0x28
 8007066:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8007068:	f7fd fe7e 	bl	8004d68 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 800706c:	b300      	cbz	r0, 80070b0 <HAL_I2C_Master_Transmit_DMA+0xcc>
        hi2c->State     = HAL_I2C_STATE_READY;
 800706e:	2320      	movs	r3, #32
 8007070:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007074:	2200      	movs	r2, #0
 8007076:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800707a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800707c:	f043 0310 	orr.w	r3, r3, #16
 8007080:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007082:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8007086:	2001      	movs	r0, #1
 8007088:	e043      	b.n	8007112 <HAL_I2C_Master_Transmit_DMA+0x12e>
      hi2c->XferSize = hi2c->XferCount;
 800708a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800708c:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800708e:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8007092:	e7d6      	b.n	8007042 <HAL_I2C_Master_Transmit_DMA+0x5e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007094:	2320      	movs	r3, #32
 8007096:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800709a:	2200      	movs	r2, #0
 800709c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80070a0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80070a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070a6:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80070a8:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        return HAL_ERROR;
 80070ac:	2001      	movs	r0, #1
 80070ae:	e030      	b.n	8007112 <HAL_I2C_Master_Transmit_DMA+0x12e>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80070b0:	4b1f      	ldr	r3, [pc, #124]	@ (8007130 <HAL_I2C_Master_Transmit_DMA+0x14c>)
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	4633      	mov	r3, r6
 80070b6:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 80070ba:	4629      	mov	r1, r5
 80070bc:	4620      	mov	r0, r4
 80070be:	f7ff fd12 	bl	8006ae6 <I2C_TransferConfig>
        hi2c->XferCount -= hi2c->XferSize;
 80070c2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80070c8:	1a9b      	subs	r3, r3, r2
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	8563      	strh	r3, [r4, #42]	@ 0x2a
        __HAL_UNLOCK(hi2c);
 80070ce:	2300      	movs	r3, #0
 80070d0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80070d4:	2110      	movs	r1, #16
 80070d6:	4620      	mov	r0, r4
 80070d8:	f7ff fd24 	bl	8006b24 <I2C_Enable_IRQ>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80070dc:	6822      	ldr	r2, [r4, #0]
 80070de:	6813      	ldr	r3, [r2, #0]
 80070e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	e011      	b.n	800710c <HAL_I2C_Master_Transmit_DMA+0x128>
      hi2c->XferISR = I2C_Master_ISR_IT;
 80070e8:	4b12      	ldr	r3, [pc, #72]	@ (8007134 <HAL_I2C_Master_Transmit_DMA+0x150>)
 80070ea:	6363      	str	r3, [r4, #52]	@ 0x34
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80070ec:	4b10      	ldr	r3, [pc, #64]	@ (8007130 <HAL_I2C_Master_Transmit_DMA+0x14c>)
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80070f4:	b2d2      	uxtb	r2, r2
 80070f6:	4629      	mov	r1, r5
 80070f8:	4620      	mov	r0, r4
 80070fa:	f7ff fcf4 	bl	8006ae6 <I2C_TransferConfig>
      __HAL_UNLOCK(hi2c);
 80070fe:	2300      	movs	r3, #0
 8007100:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007104:	2101      	movs	r1, #1
 8007106:	4620      	mov	r0, r4
 8007108:	f7ff fd0c 	bl	8006b24 <I2C_Enable_IRQ>
    return HAL_OK;
 800710c:	2000      	movs	r0, #0
 800710e:	e000      	b.n	8007112 <HAL_I2C_Master_Transmit_DMA+0x12e>
    return HAL_BUSY;
 8007110:	2002      	movs	r0, #2
}
 8007112:	b002      	add	sp, #8
 8007114:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_BUSY;
 8007116:	2002      	movs	r0, #2
 8007118:	e7fb      	b.n	8007112 <HAL_I2C_Master_Transmit_DMA+0x12e>
    __HAL_LOCK(hi2c);
 800711a:	2002      	movs	r0, #2
 800711c:	e7f9      	b.n	8007112 <HAL_I2C_Master_Transmit_DMA+0x12e>
 800711e:	bf00      	nop
 8007120:	ffff0000 	.word	0xffff0000
 8007124:	08008409 	.word	0x08008409
 8007128:	08008685 	.word	0x08008685
 800712c:	0800854d 	.word	0x0800854d
 8007130:	80002000 	.word	0x80002000
 8007134:	0800806b 	.word	0x0800806b

08007138 <HAL_I2C_Master_Receive_DMA>:
{
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800713e:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8007142:	b2c0      	uxtb	r0, r0
 8007144:	2820      	cmp	r0, #32
 8007146:	f040 808c 	bne.w	8007262 <HAL_I2C_Master_Receive_DMA+0x12a>
 800714a:	460d      	mov	r5, r1
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800714c:	6821      	ldr	r1, [r4, #0]
 800714e:	6989      	ldr	r1, [r1, #24]
 8007150:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8007154:	f040 8088 	bne.w	8007268 <HAL_I2C_Master_Receive_DMA+0x130>
    __HAL_LOCK(hi2c);
 8007158:	f894 1040 	ldrb.w	r1, [r4, #64]	@ 0x40
 800715c:	2901      	cmp	r1, #1
 800715e:	f000 8085 	beq.w	800726c <HAL_I2C_Master_Receive_DMA+0x134>
 8007162:	2101      	movs	r1, #1
 8007164:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007168:	2122      	movs	r1, #34	@ 0x22
 800716a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800716e:	2110      	movs	r1, #16
 8007170:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007174:	2100      	movs	r1, #0
 8007176:	6461      	str	r1, [r4, #68]	@ 0x44
    hi2c->pBuffPtr    = pData;
 8007178:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800717a:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800717c:	4b3c      	ldr	r3, [pc, #240]	@ (8007270 <HAL_I2C_Master_Receive_DMA+0x138>)
 800717e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007180:	4b3c      	ldr	r3, [pc, #240]	@ (8007274 <HAL_I2C_Master_Receive_DMA+0x13c>)
 8007182:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007184:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007186:	b29b      	uxth	r3, r3
 8007188:	2bff      	cmp	r3, #255	@ 0xff
 800718a:	d927      	bls.n	80071dc <HAL_I2C_Master_Receive_DMA+0xa4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800718c:	23ff      	movs	r3, #255	@ 0xff
 800718e:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007190:	f04f 7680 	mov.w	r6, #16777216	@ 0x1000000
    if (hi2c->XferSize > 0U)
 8007194:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8007196:	2900      	cmp	r1, #0
 8007198:	d04f      	beq.n	800723a <HAL_I2C_Master_Receive_DMA+0x102>
      if (hi2c->hdmarx != NULL)
 800719a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800719c:	b31b      	cbz	r3, 80071e6 <HAL_I2C_Master_Receive_DMA+0xae>
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800719e:	4936      	ldr	r1, [pc, #216]	@ (8007278 <HAL_I2C_Master_Receive_DMA+0x140>)
 80071a0:	63d9      	str	r1, [r3, #60]	@ 0x3c
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80071a2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80071a4:	4935      	ldr	r1, [pc, #212]	@ (800727c <HAL_I2C_Master_Receive_DMA+0x144>)
 80071a6:	64d9      	str	r1, [r3, #76]	@ 0x4c
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80071a8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80071aa:	2300      	movs	r3, #0
 80071ac:	640b      	str	r3, [r1, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 80071ae:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80071b0:	650b      	str	r3, [r1, #80]	@ 0x50
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80071b2:	6821      	ldr	r1, [r4, #0]
 80071b4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80071b6:	3124      	adds	r1, #36	@ 0x24
 80071b8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80071ba:	f7fd fdd5 	bl	8004d68 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 80071be:	b300      	cbz	r0, 8007202 <HAL_I2C_Master_Receive_DMA+0xca>
        hi2c->State     = HAL_I2C_STATE_READY;
 80071c0:	2320      	movs	r3, #32
 80071c2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80071c6:	2200      	movs	r2, #0
 80071c8:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80071cc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80071ce:	f043 0310 	orr.w	r3, r3, #16
 80071d2:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80071d4:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        return HAL_ERROR;
 80071d8:	2001      	movs	r0, #1
 80071da:	e043      	b.n	8007264 <HAL_I2C_Master_Receive_DMA+0x12c>
      hi2c->XferSize = hi2c->XferCount;
 80071dc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80071de:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80071e0:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 80071e4:	e7d6      	b.n	8007194 <HAL_I2C_Master_Receive_DMA+0x5c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80071e6:	2320      	movs	r3, #32
 80071e8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80071ec:	2200      	movs	r2, #0
 80071ee:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80071f2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80071f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071f8:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80071fa:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        return HAL_ERROR;
 80071fe:	2001      	movs	r0, #1
 8007200:	e030      	b.n	8007264 <HAL_I2C_Master_Receive_DMA+0x12c>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8007202:	4b1f      	ldr	r3, [pc, #124]	@ (8007280 <HAL_I2C_Master_Receive_DMA+0x148>)
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	4633      	mov	r3, r6
 8007208:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800720c:	4629      	mov	r1, r5
 800720e:	4620      	mov	r0, r4
 8007210:	f7ff fc69 	bl	8006ae6 <I2C_TransferConfig>
        hi2c->XferCount -= hi2c->XferSize;
 8007214:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007216:	b29b      	uxth	r3, r3
 8007218:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800721a:	1a9b      	subs	r3, r3, r2
 800721c:	b29b      	uxth	r3, r3
 800721e:	8563      	strh	r3, [r4, #42]	@ 0x2a
        __HAL_UNLOCK(hi2c);
 8007220:	2300      	movs	r3, #0
 8007222:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007226:	2110      	movs	r1, #16
 8007228:	4620      	mov	r0, r4
 800722a:	f7ff fc7b 	bl	8006b24 <I2C_Enable_IRQ>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800722e:	6822      	ldr	r2, [r4, #0]
 8007230:	6813      	ldr	r3, [r2, #0]
 8007232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	e011      	b.n	800725e <HAL_I2C_Master_Receive_DMA+0x126>
      hi2c->XferISR = I2C_Master_ISR_IT;
 800723a:	4b12      	ldr	r3, [pc, #72]	@ (8007284 <HAL_I2C_Master_Receive_DMA+0x14c>)
 800723c:	6363      	str	r3, [r4, #52]	@ 0x34
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800723e:	4b10      	ldr	r3, [pc, #64]	@ (8007280 <HAL_I2C_Master_Receive_DMA+0x148>)
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007246:	b2ca      	uxtb	r2, r1
 8007248:	4629      	mov	r1, r5
 800724a:	4620      	mov	r0, r4
 800724c:	f7ff fc4b 	bl	8006ae6 <I2C_TransferConfig>
      __HAL_UNLOCK(hi2c);
 8007250:	2300      	movs	r3, #0
 8007252:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007256:	2101      	movs	r1, #1
 8007258:	4620      	mov	r0, r4
 800725a:	f7ff fc63 	bl	8006b24 <I2C_Enable_IRQ>
    return HAL_OK;
 800725e:	2000      	movs	r0, #0
 8007260:	e000      	b.n	8007264 <HAL_I2C_Master_Receive_DMA+0x12c>
    return HAL_BUSY;
 8007262:	2002      	movs	r0, #2
}
 8007264:	b002      	add	sp, #8
 8007266:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_BUSY;
 8007268:	2002      	movs	r0, #2
 800726a:	e7fb      	b.n	8007264 <HAL_I2C_Master_Receive_DMA+0x12c>
    __HAL_LOCK(hi2c);
 800726c:	2002      	movs	r0, #2
 800726e:	e7f9      	b.n	8007264 <HAL_I2C_Master_Receive_DMA+0x12c>
 8007270:	ffff0000 	.word	0xffff0000
 8007274:	08008409 	.word	0x08008409
 8007278:	080086df 	.word	0x080086df
 800727c:	0800854d 	.word	0x0800854d
 8007280:	80002400 	.word	0x80002400
 8007284:	0800806b 	.word	0x0800806b

08007288 <HAL_I2C_Mem_Write>:
{
 8007288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728c:	b083      	sub	sp, #12
 800728e:	460d      	mov	r5, r1
 8007290:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8007294:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007296:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800729a:	b2c9      	uxtb	r1, r1
 800729c:	2920      	cmp	r1, #32
 800729e:	f040 80bc 	bne.w	800741a <HAL_I2C_Mem_Write+0x192>
 80072a2:	4604      	mov	r4, r0
 80072a4:	4690      	mov	r8, r2
 80072a6:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80072a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072aa:	f1ba 0f00 	cmp.w	sl, #0
 80072ae:	bf18      	it	ne
 80072b0:	2b00      	cmpne	r3, #0
 80072b2:	d016      	beq.n	80072e2 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 80072b4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	f000 80b2 	beq.w	8007422 <HAL_I2C_Mem_Write+0x19a>
 80072be:	f04f 0b01 	mov.w	fp, #1
 80072c2:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80072c6:	f7fc f91f 	bl	8003508 <HAL_GetTick>
 80072ca:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072cc:	9000      	str	r0, [sp, #0]
 80072ce:	2319      	movs	r3, #25
 80072d0:	465a      	mov	r2, fp
 80072d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80072d6:	4620      	mov	r0, r4
 80072d8:	f7ff fd59 	bl	8006d8e <I2C_WaitOnFlagUntilTimeout>
 80072dc:	b130      	cbz	r0, 80072ec <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 80072de:	2001      	movs	r0, #1
 80072e0:	e09c      	b.n	800741c <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80072e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072e6:	6443      	str	r3, [r0, #68]	@ 0x44
      return  HAL_ERROR;
 80072e8:	2001      	movs	r0, #1
 80072ea:	e097      	b.n	800741c <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072ec:	2321      	movs	r3, #33	@ 0x21
 80072ee:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072f2:	2340      	movs	r3, #64	@ 0x40
 80072f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072f8:	2300      	movs	r3, #0
 80072fa:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 80072fc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80072fe:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007300:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007304:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007306:	9601      	str	r6, [sp, #4]
 8007308:	9700      	str	r7, [sp, #0]
 800730a:	464b      	mov	r3, r9
 800730c:	4642      	mov	r2, r8
 800730e:	4629      	mov	r1, r5
 8007310:	4620      	mov	r0, r4
 8007312:	f7ff fd67 	bl	8006de4 <I2C_RequestMemoryWrite>
 8007316:	b970      	cbnz	r0, 8007336 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007318:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800731a:	b29b      	uxth	r3, r3
 800731c:	2bff      	cmp	r3, #255	@ 0xff
 800731e:	d90f      	bls.n	8007340 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007320:	22ff      	movs	r2, #255	@ 0xff
 8007322:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007324:	2300      	movs	r3, #0
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800732c:	4629      	mov	r1, r5
 800732e:	4620      	mov	r0, r4
 8007330:	f7ff fbd9 	bl	8006ae6 <I2C_TransferConfig>
 8007334:	e021      	b.n	800737a <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8007336:	2300      	movs	r3, #0
 8007338:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800733c:	4658      	mov	r0, fp
 800733e:	e06d      	b.n	800741c <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8007340:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8007342:	b292      	uxth	r2, r2
 8007344:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007346:	2300      	movs	r3, #0
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800734e:	b2d2      	uxtb	r2, r2
 8007350:	4629      	mov	r1, r5
 8007352:	4620      	mov	r0, r4
 8007354:	f7ff fbc7 	bl	8006ae6 <I2C_TransferConfig>
 8007358:	e00f      	b.n	800737a <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800735a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800735c:	b292      	uxth	r2, r2
 800735e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007360:	2300      	movs	r3, #0
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007368:	b2d2      	uxtb	r2, r2
 800736a:	4629      	mov	r1, r5
 800736c:	4620      	mov	r0, r4
 800736e:	f7ff fbba 	bl	8006ae6 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007372:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007374:	b29b      	uxth	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d033      	beq.n	80073e2 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800737a:	4632      	mov	r2, r6
 800737c:	4639      	mov	r1, r7
 800737e:	4620      	mov	r0, r4
 8007380:	f7ff fcda 	bl	8006d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8007384:	2800      	cmp	r0, #0
 8007386:	d14e      	bne.n	8007426 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007388:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	7812      	ldrb	r2, [r2, #0]
 800738e:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8007390:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007392:	3301      	adds	r3, #1
 8007394:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8007396:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007398:	b29b      	uxth	r3, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	b29b      	uxth	r3, r3
 800739e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80073a0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80073a2:	3b01      	subs	r3, #1
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073a8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80073aa:	b292      	uxth	r2, r2
 80073ac:	2a00      	cmp	r2, #0
 80073ae:	d0e0      	beq.n	8007372 <HAL_I2C_Mem_Write+0xea>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1de      	bne.n	8007372 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073b4:	9600      	str	r6, [sp, #0]
 80073b6:	463b      	mov	r3, r7
 80073b8:	2200      	movs	r2, #0
 80073ba:	2180      	movs	r1, #128	@ 0x80
 80073bc:	4620      	mov	r0, r4
 80073be:	f7ff fce6 	bl	8006d8e <I2C_WaitOnFlagUntilTimeout>
 80073c2:	bb90      	cbnz	r0, 800742a <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073c4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	2bff      	cmp	r3, #255	@ 0xff
 80073ca:	d9c6      	bls.n	800735a <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073cc:	22ff      	movs	r2, #255	@ 0xff
 80073ce:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073d0:	2300      	movs	r3, #0
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073d8:	4629      	mov	r1, r5
 80073da:	4620      	mov	r0, r4
 80073dc:	f7ff fb83 	bl	8006ae6 <I2C_TransferConfig>
 80073e0:	e7c7      	b.n	8007372 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073e2:	4632      	mov	r2, r6
 80073e4:	4639      	mov	r1, r7
 80073e6:	4620      	mov	r0, r4
 80073e8:	f7ff fd76 	bl	8006ed8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80073ec:	b9f8      	cbnz	r0, 800742e <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	2220      	movs	r2, #32
 80073f2:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80073f4:	6821      	ldr	r1, [r4, #0]
 80073f6:	684b      	ldr	r3, [r1, #4]
 80073f8:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80073fc:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8007400:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8007404:	f023 0301 	bic.w	r3, r3, #1
 8007408:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800740a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800740e:	2300      	movs	r3, #0
 8007410:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8007414:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8007418:	e000      	b.n	800741c <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 800741a:	2002      	movs	r0, #2
}
 800741c:	b003      	add	sp, #12
 800741e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007422:	2002      	movs	r0, #2
 8007424:	e7fa      	b.n	800741c <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8007426:	2001      	movs	r0, #1
 8007428:	e7f8      	b.n	800741c <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 800742a:	2001      	movs	r0, #1
 800742c:	e7f6      	b.n	800741c <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 800742e:	2001      	movs	r0, #1
 8007430:	e7f4      	b.n	800741c <HAL_I2C_Mem_Write+0x194>
	...

08007434 <HAL_I2C_Mem_Write_DMA>:
{
 8007434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007438:	b083      	sub	sp, #12
 800743a:	4604      	mov	r4, r0
 800743c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800743e:	f8bd 902c 	ldrh.w	r9, [sp, #44]	@ 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007442:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8007446:	b2c0      	uxtb	r0, r0
 8007448:	2820      	cmp	r0, #32
 800744a:	f040 8097 	bne.w	800757c <HAL_I2C_Mem_Write_DMA+0x148>
 800744e:	460e      	mov	r6, r1
 8007450:	4690      	mov	r8, r2
 8007452:	461f      	mov	r7, r3
    if ((pData == NULL) || (Size == 0U))
 8007454:	f1b9 0f00 	cmp.w	r9, #0
 8007458:	bf18      	it	ne
 800745a:	2d00      	cmpne	r5, #0
 800745c:	d056      	beq.n	800750c <HAL_I2C_Mem_Write_DMA+0xd8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8007466:	f040 808e 	bne.w	8007586 <HAL_I2C_Mem_Write_DMA+0x152>
    __HAL_LOCK(hi2c);
 800746a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800746e:	2b01      	cmp	r3, #1
 8007470:	f000 808b 	beq.w	800758a <HAL_I2C_Mem_Write_DMA+0x156>
 8007474:	2301      	movs	r3, #1
 8007476:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800747a:	f7fc f845 	bl	8003508 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800747e:	2321      	movs	r3, #33	@ 0x21
 8007480:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8007484:	2340      	movs	r3, #64	@ 0x40
 8007486:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800748a:	2300      	movs	r3, #0
 800748c:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr    = pData;
 800748e:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007490:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007494:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8007498:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800749a:	4b3d      	ldr	r3, [pc, #244]	@ (8007590 <HAL_I2C_Mem_Write_DMA+0x15c>)
 800749c:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800749e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	2bff      	cmp	r3, #255	@ 0xff
 80074a4:	d937      	bls.n	8007516 <HAL_I2C_Mem_Write_DMA+0xe2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80074a6:	23ff      	movs	r3, #255	@ 0xff
 80074a8:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80074aa:	f04f 7980 	mov.w	r9, #16777216	@ 0x1000000
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 80074ae:	9001      	str	r0, [sp, #4]
 80074b0:	2319      	movs	r3, #25
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	463b      	mov	r3, r7
 80074b6:	4642      	mov	r2, r8
 80074b8:	4631      	mov	r1, r6
 80074ba:	4620      	mov	r0, r4
 80074bc:	f7ff fc92 	bl	8006de4 <I2C_RequestMemoryWrite>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	d12d      	bne.n	8007520 <HAL_I2C_Mem_Write_DMA+0xec>
    if (hi2c->hdmatx != NULL)
 80074c4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d02f      	beq.n	800752a <HAL_I2C_Mem_Write_DMA+0xf6>
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80074ca:	4a32      	ldr	r2, [pc, #200]	@ (8007594 <HAL_I2C_Mem_Write_DMA+0x160>)
 80074cc:	63da      	str	r2, [r3, #60]	@ 0x3c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80074ce:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80074d0:	4a31      	ldr	r2, [pc, #196]	@ (8007598 <HAL_I2C_Mem_Write_DMA+0x164>)
 80074d2:	64da      	str	r2, [r3, #76]	@ 0x4c
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80074d4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80074d6:	2300      	movs	r3, #0
 80074d8:	6413      	str	r3, [r2, #64]	@ 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 80074da:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80074dc:	6513      	str	r3, [r2, #80]	@ 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80074de:	6822      	ldr	r2, [r4, #0]
 80074e0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80074e2:	3228      	adds	r2, #40	@ 0x28
 80074e4:	4629      	mov	r1, r5
 80074e6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80074e8:	f7fd fc3e 	bl	8004d68 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 80074ec:	4605      	mov	r5, r0
 80074ee:	b350      	cbz	r0, 8007546 <HAL_I2C_Mem_Write_DMA+0x112>
      hi2c->State     = HAL_I2C_STATE_READY;
 80074f0:	2320      	movs	r3, #32
 80074f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80074f6:	2200      	movs	r2, #0
 80074f8:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80074fc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80074fe:	f043 0310 	orr.w	r3, r3, #16
 8007502:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8007504:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007508:	2501      	movs	r5, #1
 800750a:	e038      	b.n	800757e <HAL_I2C_Mem_Write_DMA+0x14a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800750c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007510:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8007512:	2501      	movs	r5, #1
 8007514:	e033      	b.n	800757e <HAL_I2C_Mem_Write_DMA+0x14a>
      hi2c->XferSize = hi2c->XferCount;
 8007516:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007518:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800751a:	f04f 7900 	mov.w	r9, #33554432	@ 0x2000000
 800751e:	e7c6      	b.n	80074ae <HAL_I2C_Mem_Write_DMA+0x7a>
      __HAL_UNLOCK(hi2c);
 8007520:	2300      	movs	r3, #0
 8007522:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007526:	2501      	movs	r5, #1
 8007528:	e029      	b.n	800757e <HAL_I2C_Mem_Write_DMA+0x14a>
      hi2c->State     = HAL_I2C_STATE_READY;
 800752a:	2320      	movs	r3, #32
 800752c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007530:	2200      	movs	r2, #0
 8007532:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007536:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800753c:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800753e:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007542:	2501      	movs	r5, #1
 8007544:	e01b      	b.n	800757e <HAL_I2C_Mem_Write_DMA+0x14a>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007546:	2700      	movs	r7, #0
 8007548:	9700      	str	r7, [sp, #0]
 800754a:	464b      	mov	r3, r9
 800754c:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8007550:	4631      	mov	r1, r6
 8007552:	4620      	mov	r0, r4
 8007554:	f7ff fac7 	bl	8006ae6 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8007558:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800755a:	b29b      	uxth	r3, r3
 800755c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800755e:	1a9b      	subs	r3, r3, r2
 8007560:	b29b      	uxth	r3, r3
 8007562:	8563      	strh	r3, [r4, #42]	@ 0x2a
      __HAL_UNLOCK(hi2c);
 8007564:	f884 7040 	strb.w	r7, [r4, #64]	@ 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007568:	2110      	movs	r1, #16
 800756a:	4620      	mov	r0, r4
 800756c:	f7ff fada 	bl	8006b24 <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007570:	6822      	ldr	r2, [r4, #0]
 8007572:	6813      	ldr	r3, [r2, #0]
 8007574:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007578:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 800757a:	e000      	b.n	800757e <HAL_I2C_Mem_Write_DMA+0x14a>
    return HAL_BUSY;
 800757c:	2502      	movs	r5, #2
}
 800757e:	4628      	mov	r0, r5
 8007580:	b003      	add	sp, #12
 8007582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_BUSY;
 8007586:	2502      	movs	r5, #2
 8007588:	e7f9      	b.n	800757e <HAL_I2C_Mem_Write_DMA+0x14a>
    __HAL_LOCK(hi2c);
 800758a:	2502      	movs	r5, #2
 800758c:	e7f7      	b.n	800757e <HAL_I2C_Mem_Write_DMA+0x14a>
 800758e:	bf00      	nop
 8007590:	08008409 	.word	0x08008409
 8007594:	08008685 	.word	0x08008685
 8007598:	0800854d 	.word	0x0800854d

0800759c <HAL_I2C_Mem_Read_DMA>:
{
 800759c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075a0:	b083      	sub	sp, #12
 80075a2:	4604      	mov	r4, r0
 80075a4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80075a6:	f8bd 902c 	ldrh.w	r9, [sp, #44]	@ 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 80075aa:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 80075ae:	b2c0      	uxtb	r0, r0
 80075b0:	2820      	cmp	r0, #32
 80075b2:	f040 8098 	bne.w	80076e6 <HAL_I2C_Mem_Read_DMA+0x14a>
 80075b6:	460e      	mov	r6, r1
 80075b8:	4690      	mov	r8, r2
 80075ba:	461f      	mov	r7, r3
    if ((pData == NULL) || (Size == 0U))
 80075bc:	f1b9 0f00 	cmp.w	r9, #0
 80075c0:	bf18      	it	ne
 80075c2:	2d00      	cmpne	r5, #0
 80075c4:	d056      	beq.n	8007674 <HAL_I2C_Mem_Read_DMA+0xd8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80075ce:	f040 808f 	bne.w	80076f0 <HAL_I2C_Mem_Read_DMA+0x154>
    __HAL_LOCK(hi2c);
 80075d2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	f000 808c 	beq.w	80076f4 <HAL_I2C_Mem_Read_DMA+0x158>
 80075dc:	2301      	movs	r3, #1
 80075de:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80075e2:	f7fb ff91 	bl	8003508 <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80075e6:	2322      	movs	r3, #34	@ 0x22
 80075e8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80075ec:	2340      	movs	r3, #64	@ 0x40
 80075ee:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80075f2:	2300      	movs	r3, #0
 80075f4:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr    = pData;
 80075f6:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80075f8:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075fc:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8007600:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007602:	4b3d      	ldr	r3, [pc, #244]	@ (80076f8 <HAL_I2C_Mem_Read_DMA+0x15c>)
 8007604:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007606:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007608:	b29b      	uxth	r3, r3
 800760a:	2bff      	cmp	r3, #255	@ 0xff
 800760c:	d937      	bls.n	800767e <HAL_I2C_Mem_Read_DMA+0xe2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800760e:	23ff      	movs	r3, #255	@ 0xff
 8007610:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007612:	f04f 7980 	mov.w	r9, #16777216	@ 0x1000000
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007616:	9001      	str	r0, [sp, #4]
 8007618:	2319      	movs	r3, #25
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	463b      	mov	r3, r7
 800761e:	4642      	mov	r2, r8
 8007620:	4631      	mov	r1, r6
 8007622:	4620      	mov	r0, r4
 8007624:	f7ff fc1c 	bl	8006e60 <I2C_RequestMemoryRead>
 8007628:	2800      	cmp	r0, #0
 800762a:	d12d      	bne.n	8007688 <HAL_I2C_Mem_Read_DMA+0xec>
    if (hi2c->hdmarx != NULL)
 800762c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800762e:	2b00      	cmp	r3, #0
 8007630:	d02f      	beq.n	8007692 <HAL_I2C_Mem_Read_DMA+0xf6>
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8007632:	4a32      	ldr	r2, [pc, #200]	@ (80076fc <HAL_I2C_Mem_Read_DMA+0x160>)
 8007634:	63da      	str	r2, [r3, #60]	@ 0x3c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007636:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007638:	4a31      	ldr	r2, [pc, #196]	@ (8007700 <HAL_I2C_Mem_Read_DMA+0x164>)
 800763a:	64da      	str	r2, [r3, #76]	@ 0x4c
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800763c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800763e:	2300      	movs	r3, #0
 8007640:	6413      	str	r3, [r2, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8007642:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8007644:	6513      	str	r3, [r2, #80]	@ 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007646:	6821      	ldr	r1, [r4, #0]
 8007648:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800764a:	462a      	mov	r2, r5
 800764c:	3124      	adds	r1, #36	@ 0x24
 800764e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007650:	f7fd fb8a 	bl	8004d68 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8007654:	4605      	mov	r5, r0
 8007656:	b350      	cbz	r0, 80076ae <HAL_I2C_Mem_Read_DMA+0x112>
      hi2c->State     = HAL_I2C_STATE_READY;
 8007658:	2320      	movs	r3, #32
 800765a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800765e:	2200      	movs	r2, #0
 8007660:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007664:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007666:	f043 0310 	orr.w	r3, r3, #16
 800766a:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800766c:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007670:	2501      	movs	r5, #1
 8007672:	e039      	b.n	80076e8 <HAL_I2C_Mem_Read_DMA+0x14c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007674:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007678:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800767a:	2501      	movs	r5, #1
 800767c:	e034      	b.n	80076e8 <HAL_I2C_Mem_Read_DMA+0x14c>
      hi2c->XferSize = hi2c->XferCount;
 800767e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007680:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007682:	f04f 7900 	mov.w	r9, #33554432	@ 0x2000000
 8007686:	e7c6      	b.n	8007616 <HAL_I2C_Mem_Read_DMA+0x7a>
      __HAL_UNLOCK(hi2c);
 8007688:	2300      	movs	r3, #0
 800768a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800768e:	2501      	movs	r5, #1
 8007690:	e02a      	b.n	80076e8 <HAL_I2C_Mem_Read_DMA+0x14c>
      hi2c->State     = HAL_I2C_STATE_READY;
 8007692:	2320      	movs	r3, #32
 8007694:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007698:	2200      	movs	r2, #0
 800769a:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800769e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80076a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076a4:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80076a6:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80076aa:	2501      	movs	r5, #1
 80076ac:	e01c      	b.n	80076e8 <HAL_I2C_Mem_Read_DMA+0x14c>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80076ae:	4b15      	ldr	r3, [pc, #84]	@ (8007704 <HAL_I2C_Mem_Read_DMA+0x168>)
 80076b0:	9300      	str	r3, [sp, #0]
 80076b2:	464b      	mov	r3, r9
 80076b4:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 80076b8:	4631      	mov	r1, r6
 80076ba:	4620      	mov	r0, r4
 80076bc:	f7ff fa13 	bl	8006ae6 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 80076c0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80076c6:	1a9b      	subs	r3, r3, r2
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	8563      	strh	r3, [r4, #42]	@ 0x2a
      __HAL_UNLOCK(hi2c);
 80076cc:	2300      	movs	r3, #0
 80076ce:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80076d2:	2110      	movs	r1, #16
 80076d4:	4620      	mov	r0, r4
 80076d6:	f7ff fa25 	bl	8006b24 <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80076da:	6822      	ldr	r2, [r4, #0]
 80076dc:	6813      	ldr	r3, [r2, #0]
 80076de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076e2:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 80076e4:	e000      	b.n	80076e8 <HAL_I2C_Mem_Read_DMA+0x14c>
    return HAL_BUSY;
 80076e6:	2502      	movs	r5, #2
}
 80076e8:	4628      	mov	r0, r5
 80076ea:	b003      	add	sp, #12
 80076ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_BUSY;
 80076f0:	2502      	movs	r5, #2
 80076f2:	e7f9      	b.n	80076e8 <HAL_I2C_Mem_Read_DMA+0x14c>
    __HAL_LOCK(hi2c);
 80076f4:	2502      	movs	r5, #2
 80076f6:	e7f7      	b.n	80076e8 <HAL_I2C_Mem_Read_DMA+0x14c>
 80076f8:	08008409 	.word	0x08008409
 80076fc:	080086df 	.word	0x080086df
 8007700:	0800854d 	.word	0x0800854d
 8007704:	80002400 	.word	0x80002400

08007708 <HAL_I2C_IsDeviceReady>:
{
 8007708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800770c:	b085      	sub	sp, #20
 800770e:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 8007710:	2300      	movs	r3, #0
 8007712:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007714:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b20      	cmp	r3, #32
 800771c:	f040 809c 	bne.w	8007858 <HAL_I2C_IsDeviceReady+0x150>
 8007720:	4606      	mov	r6, r0
 8007722:	4689      	mov	r9, r1
 8007724:	4690      	mov	r8, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007726:	6803      	ldr	r3, [r0, #0]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800772e:	f040 8095 	bne.w	800785c <HAL_I2C_IsDeviceReady+0x154>
    __HAL_LOCK(hi2c);
 8007732:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8007736:	2b01      	cmp	r3, #1
 8007738:	f000 8092 	beq.w	8007860 <HAL_I2C_IsDeviceReady+0x158>
 800773c:	2301      	movs	r3, #1
 800773e:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007742:	2324      	movs	r3, #36	@ 0x24
 8007744:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007748:	2300      	movs	r3, #0
 800774a:	6443      	str	r3, [r0, #68]	@ 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800774c:	68f3      	ldr	r3, [r6, #12]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d010      	beq.n	8007774 <HAL_I2C_IsDeviceReady+0x6c>
 8007752:	f3c9 0309 	ubfx	r3, r9, #0, #10
 8007756:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800775a:	6832      	ldr	r2, [r6, #0]
 800775c:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 800775e:	f7fb fed3 	bl	8003508 <HAL_GetTick>
 8007762:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007764:	6832      	ldr	r2, [r6, #0]
 8007766:	6993      	ldr	r3, [r2, #24]
 8007768:	f3c3 1c40 	ubfx	ip, r3, #5, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800776c:	6993      	ldr	r3, [r2, #24]
 800776e:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007772:	e00b      	b.n	800778c <HAL_I2C_IsDeviceReady+0x84>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007774:	f3c9 0209 	ubfx	r2, r9, #0, #10
 8007778:	4b3d      	ldr	r3, [pc, #244]	@ (8007870 <HAL_I2C_IsDeviceReady+0x168>)
 800777a:	4313      	orrs	r3, r2
 800777c:	e7ed      	b.n	800775a <HAL_I2C_IsDeviceReady+0x52>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800777e:	6833      	ldr	r3, [r6, #0]
 8007780:	699c      	ldr	r4, [r3, #24]
 8007782:	f3c4 1c40 	ubfx	ip, r4, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800778c:	ea5c 0c03 	orrs.w	ip, ip, r3
 8007790:	d117      	bne.n	80077c2 <HAL_I2C_IsDeviceReady+0xba>
        if (Timeout != HAL_MAX_DELAY)
 8007792:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007796:	d0f2      	beq.n	800777e <HAL_I2C_IsDeviceReady+0x76>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007798:	f7fb feb6 	bl	8003508 <HAL_GetTick>
 800779c:	1bc0      	subs	r0, r0, r7
 800779e:	42a8      	cmp	r0, r5
 80077a0:	d801      	bhi.n	80077a6 <HAL_I2C_IsDeviceReady+0x9e>
 80077a2:	2d00      	cmp	r5, #0
 80077a4:	d1eb      	bne.n	800777e <HAL_I2C_IsDeviceReady+0x76>
            hi2c->State = HAL_I2C_STATE_READY;
 80077a6:	2320      	movs	r3, #32
 80077a8:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077ac:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 80077ae:	f043 0320 	orr.w	r3, r3, #32
 80077b2:	6473      	str	r3, [r6, #68]	@ 0x44
            __HAL_UNLOCK(hi2c);
 80077b4:	2300      	movs	r3, #0
 80077b6:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
            return HAL_ERROR;
 80077ba:	2001      	movs	r0, #1
}
 80077bc:	b005      	add	sp, #20
 80077be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80077c2:	6833      	ldr	r3, [r6, #0]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	f013 0f10 	tst.w	r3, #16
 80077ca:	d023      	beq.n	8007814 <HAL_I2C_IsDeviceReady+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80077cc:	9700      	str	r7, [sp, #0]
 80077ce:	462b      	mov	r3, r5
 80077d0:	2200      	movs	r2, #0
 80077d2:	2120      	movs	r1, #32
 80077d4:	4630      	mov	r0, r6
 80077d6:	f7ff fada 	bl	8006d8e <I2C_WaitOnFlagUntilTimeout>
 80077da:	2800      	cmp	r0, #0
 80077dc:	d144      	bne.n	8007868 <HAL_I2C_IsDeviceReady+0x160>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077de:	6833      	ldr	r3, [r6, #0]
 80077e0:	2210      	movs	r2, #16
 80077e2:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077e4:	6833      	ldr	r3, [r6, #0]
 80077e6:	2220      	movs	r2, #32
 80077e8:	61da      	str	r2, [r3, #28]
      if (I2C_Trials == Trials)
 80077ea:	9b03      	ldr	r3, [sp, #12]
 80077ec:	4543      	cmp	r3, r8
 80077ee:	d022      	beq.n	8007836 <HAL_I2C_IsDeviceReady+0x12e>
      I2C_Trials++;
 80077f0:	9b03      	ldr	r3, [sp, #12]
 80077f2:	3301      	adds	r3, #1
 80077f4:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 80077f6:	9b03      	ldr	r3, [sp, #12]
 80077f8:	4543      	cmp	r3, r8
 80077fa:	d3a7      	bcc.n	800774c <HAL_I2C_IsDeviceReady+0x44>
    hi2c->State = HAL_I2C_STATE_READY;
 80077fc:	2320      	movs	r3, #32
 80077fe:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007802:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8007804:	f043 0320 	orr.w	r3, r3, #32
 8007808:	6473      	str	r3, [r6, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 800780a:	2300      	movs	r3, #0
 800780c:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
    return HAL_ERROR;
 8007810:	2001      	movs	r0, #1
 8007812:	e7d3      	b.n	80077bc <HAL_I2C_IsDeviceReady+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007814:	9700      	str	r7, [sp, #0]
 8007816:	462b      	mov	r3, r5
 8007818:	2200      	movs	r2, #0
 800781a:	2120      	movs	r1, #32
 800781c:	4630      	mov	r0, r6
 800781e:	f7ff fab6 	bl	8006d8e <I2C_WaitOnFlagUntilTimeout>
 8007822:	b9f8      	cbnz	r0, 8007864 <HAL_I2C_IsDeviceReady+0x15c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007824:	6832      	ldr	r2, [r6, #0]
 8007826:	2320      	movs	r3, #32
 8007828:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 800782a:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 800782e:	2300      	movs	r3, #0
 8007830:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_OK;
 8007834:	e7c2      	b.n	80077bc <HAL_I2C_IsDeviceReady+0xb4>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007836:	6832      	ldr	r2, [r6, #0]
 8007838:	6853      	ldr	r3, [r2, #4]
 800783a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800783e:	6053      	str	r3, [r2, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007840:	9700      	str	r7, [sp, #0]
 8007842:	462b      	mov	r3, r5
 8007844:	2200      	movs	r2, #0
 8007846:	2120      	movs	r1, #32
 8007848:	4630      	mov	r0, r6
 800784a:	f7ff faa0 	bl	8006d8e <I2C_WaitOnFlagUntilTimeout>
 800784e:	b968      	cbnz	r0, 800786c <HAL_I2C_IsDeviceReady+0x164>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007850:	6833      	ldr	r3, [r6, #0]
 8007852:	2220      	movs	r2, #32
 8007854:	61da      	str	r2, [r3, #28]
 8007856:	e7cb      	b.n	80077f0 <HAL_I2C_IsDeviceReady+0xe8>
    return HAL_BUSY;
 8007858:	2002      	movs	r0, #2
 800785a:	e7af      	b.n	80077bc <HAL_I2C_IsDeviceReady+0xb4>
      return HAL_BUSY;
 800785c:	2002      	movs	r0, #2
 800785e:	e7ad      	b.n	80077bc <HAL_I2C_IsDeviceReady+0xb4>
    __HAL_LOCK(hi2c);
 8007860:	2002      	movs	r0, #2
 8007862:	e7ab      	b.n	80077bc <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 8007864:	2001      	movs	r0, #1
 8007866:	e7a9      	b.n	80077bc <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 8007868:	2001      	movs	r0, #1
 800786a:	e7a7      	b.n	80077bc <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 800786c:	2001      	movs	r0, #1
 800786e:	e7a5      	b.n	80077bc <HAL_I2C_IsDeviceReady+0xb4>
 8007870:	02002000 	.word	0x02002000

08007874 <HAL_I2C_EV_IRQHandler>:
{
 8007874:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007876:	6803      	ldr	r3, [r0, #0]
 8007878:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800787a:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 800787c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800787e:	b103      	cbz	r3, 8007882 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8007880:	4798      	blx	r3
}
 8007882:	bd08      	pop	{r3, pc}

08007884 <I2C_ITMasterSeqCplt>:
{
 8007884:	b538      	push	{r3, r4, r5, lr}
 8007886:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007888:	2300      	movs	r3, #0
 800788a:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800788e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b21      	cmp	r3, #33	@ 0x21
 8007896:	d00f      	beq.n	80078b8 <I2C_ITMasterSeqCplt+0x34>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007898:	2320      	movs	r3, #32
 800789a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800789e:	2312      	movs	r3, #18
 80078a0:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80078a2:	2500      	movs	r5, #0
 80078a4:	6345      	str	r5, [r0, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80078a6:	2102      	movs	r1, #2
 80078a8:	f7ff f976 	bl	8006b98 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80078ac:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80078b0:	4620      	mov	r0, r4
 80078b2:	f7f9 f83b 	bl	800092c <HAL_I2C_MasterRxCpltCallback>
}
 80078b6:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 80078b8:	2320      	movs	r3, #32
 80078ba:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80078be:	2311      	movs	r3, #17
 80078c0:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80078c2:	2500      	movs	r5, #0
 80078c4:	6345      	str	r5, [r0, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80078c6:	2101      	movs	r1, #1
 80078c8:	f7ff f966 	bl	8006b98 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80078cc:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80078d0:	4620      	mov	r0, r4
 80078d2:	f7f9 f823 	bl	800091c <HAL_I2C_MasterTxCpltCallback>
 80078d6:	e7ee      	b.n	80078b6 <I2C_ITMasterSeqCplt+0x32>

080078d8 <HAL_I2C_SlaveTxCpltCallback>:
}
 80078d8:	4770      	bx	lr

080078da <HAL_I2C_SlaveRxCpltCallback>:
}
 80078da:	4770      	bx	lr

080078dc <I2C_ITSlaveSeqCplt>:
{
 80078dc:	b510      	push	{r4, lr}
 80078de:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80078e0:	6803      	ldr	r3, [r0, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078e4:	2100      	movs	r1, #0
 80078e6:	f880 1042 	strb.w	r1, [r0, #66]	@ 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80078ea:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 80078ee:	d00e      	beq.n	800790e <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80078f6:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80078f8:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b29      	cmp	r3, #41	@ 0x29
 8007900:	d00d      	beq.n	800791e <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007902:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b2a      	cmp	r3, #42	@ 0x2a
 800790a:	d018      	beq.n	800793e <I2C_ITSlaveSeqCplt+0x62>
}
 800790c:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800790e:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8007912:	d0f1      	beq.n	80078f8 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	e7ec      	b.n	80078f8 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800791e:	2328      	movs	r3, #40	@ 0x28
 8007920:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007924:	2321      	movs	r3, #33	@ 0x21
 8007926:	6323      	str	r3, [r4, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007928:	2101      	movs	r1, #1
 800792a:	4620      	mov	r0, r4
 800792c:	f7ff f934 	bl	8006b98 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007930:	2300      	movs	r3, #0
 8007932:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007936:	4620      	mov	r0, r4
 8007938:	f7ff ffce 	bl	80078d8 <HAL_I2C_SlaveTxCpltCallback>
 800793c:	e7e6      	b.n	800790c <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800793e:	2328      	movs	r3, #40	@ 0x28
 8007940:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007944:	2322      	movs	r3, #34	@ 0x22
 8007946:	6323      	str	r3, [r4, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007948:	2102      	movs	r1, #2
 800794a:	4620      	mov	r0, r4
 800794c:	f7ff f924 	bl	8006b98 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007950:	2300      	movs	r3, #0
 8007952:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007956:	4620      	mov	r0, r4
 8007958:	f7ff ffbf 	bl	80078da <HAL_I2C_SlaveRxCpltCallback>
}
 800795c:	e7d6      	b.n	800790c <I2C_ITSlaveSeqCplt+0x30>

0800795e <HAL_I2C_AddrCallback>:
}
 800795e:	4770      	bx	lr

08007960 <I2C_ITAddrCplt>:
{
 8007960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007962:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007964:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007968:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800796c:	2b28      	cmp	r3, #40	@ 0x28
 800796e:	d006      	beq.n	800797e <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007970:	6803      	ldr	r3, [r0, #0]
 8007972:	2208      	movs	r2, #8
 8007974:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007976:	2300      	movs	r3, #0
 8007978:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
}
 800797c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 800797e:	6803      	ldr	r3, [r0, #0]
 8007980:	699e      	ldr	r6, [r3, #24]
 8007982:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007986:	699a      	ldr	r2, [r3, #24]
 8007988:	0c12      	lsrs	r2, r2, #16
 800798a:	f002 05fe 	and.w	r5, r2, #254	@ 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800798e:	689a      	ldr	r2, [r3, #8]
 8007990:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007994:	68df      	ldr	r7, [r3, #12]
 8007996:	f007 07fe 	and.w	r7, r7, #254	@ 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800799a:	68c1      	ldr	r1, [r0, #12]
 800799c:	2902      	cmp	r1, #2
 800799e:	d122      	bne.n	80079e6 <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80079a0:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 80079a4:	f015 0f06 	tst.w	r5, #6
 80079a8:	d110      	bne.n	80079cc <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 80079aa:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80079ac:	3101      	adds	r1, #1
 80079ae:	6481      	str	r1, [r0, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80079b0:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80079b2:	2902      	cmp	r1, #2
 80079b4:	d1e2      	bne.n	800797c <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 80079b6:	2100      	movs	r1, #0
 80079b8:	6481      	str	r1, [r0, #72]	@ 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80079ba:	2008      	movs	r0, #8
 80079bc:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 80079be:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80079c2:	4631      	mov	r1, r6
 80079c4:	4620      	mov	r0, r4
 80079c6:	f7ff ffca 	bl	800795e <HAL_I2C_AddrCallback>
 80079ca:	e7d7      	b.n	800797c <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80079cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80079d0:	f7ff f8e2 	bl	8006b98 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80079d4:	2300      	movs	r3, #0
 80079d6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80079da:	463a      	mov	r2, r7
 80079dc:	4631      	mov	r1, r6
 80079de:	4620      	mov	r0, r4
 80079e0:	f7ff ffbd 	bl	800795e <HAL_I2C_AddrCallback>
 80079e4:	e7ca      	b.n	800797c <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80079e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80079ea:	f7ff f8d5 	bl	8006b98 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80079ee:	2300      	movs	r3, #0
 80079f0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80079f4:	462a      	mov	r2, r5
 80079f6:	4631      	mov	r1, r6
 80079f8:	4620      	mov	r0, r4
 80079fa:	f7ff ffb0 	bl	800795e <HAL_I2C_AddrCallback>
 80079fe:	e7bd      	b.n	800797c <I2C_ITAddrCplt+0x1c>

08007a00 <HAL_I2C_ListenCpltCallback>:
}
 8007a00:	4770      	bx	lr
	...

08007a04 <I2C_ITListenCplt>:
{
 8007a04:	b510      	push	{r4, lr}
 8007a06:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a08:	4b17      	ldr	r3, [pc, #92]	@ (8007a68 <I2C_ITListenCplt+0x64>)
 8007a0a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	6303      	str	r3, [r0, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007a10:	2220      	movs	r2, #32
 8007a12:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a16:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007a1a:	6343      	str	r3, [r0, #52]	@ 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007a1c:	f011 0f04 	tst.w	r1, #4
 8007a20:	d013      	beq.n	8007a4a <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a22:	6803      	ldr	r3, [r0, #0]
 8007a24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a26:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007a28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007a2a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	6243      	str	r3, [r0, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 8007a30:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 8007a32:	b153      	cbz	r3, 8007a4a <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8007a34:	3b01      	subs	r3, #1
 8007a36:	8503      	strh	r3, [r0, #40]	@ 0x28
      hi2c->XferCount--;
 8007a38:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	8543      	strh	r3, [r0, #42]	@ 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a42:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007a44:	f043 0304 	orr.w	r3, r3, #4
 8007a48:	6443      	str	r3, [r0, #68]	@ 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007a4a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f7ff f8a2 	bl	8006b98 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	2210      	movs	r2, #16
 8007a58:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8007a60:	4620      	mov	r0, r4
 8007a62:	f7ff ffcd 	bl	8007a00 <HAL_I2C_ListenCpltCallback>
}
 8007a66:	bd10      	pop	{r4, pc}
 8007a68:	ffff0000 	.word	0xffff0000

08007a6c <HAL_I2C_MemTxCpltCallback>:
}
 8007a6c:	4770      	bx	lr

08007a6e <HAL_I2C_ErrorCallback>:
}
 8007a6e:	4770      	bx	lr

08007a70 <HAL_I2C_AbortCpltCallback>:
}
 8007a70:	4770      	bx	lr

08007a72 <I2C_TreatErrorCallback>:
{
 8007a72:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007a74:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b60      	cmp	r3, #96	@ 0x60
 8007a7c:	d006      	beq.n	8007a8c <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	6303      	str	r3, [r0, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007a82:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007a86:	f7ff fff2 	bl	8007a6e <HAL_I2C_ErrorCallback>
}
 8007a8a:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8007a8c:	2320      	movs	r3, #32
 8007a8e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a92:	2300      	movs	r3, #0
 8007a94:	6303      	str	r3, [r0, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007a96:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8007a9a:	f7ff ffe9 	bl	8007a70 <HAL_I2C_AbortCpltCallback>
 8007a9e:	e7f4      	b.n	8007a8a <I2C_TreatErrorCallback+0x18>

08007aa0 <I2C_ITError>:
{
 8007aa0:	b510      	push	{r4, lr}
 8007aa2:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007aa4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007aae:	483b      	ldr	r0, [pc, #236]	@ (8007b9c <I2C_ITError+0xfc>)
 8007ab0:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007ab2:	8562      	strh	r2, [r4, #42]	@ 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8007ab4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8007ab6:	430a      	orrs	r2, r1
 8007ab8:	6462      	str	r2, [r4, #68]	@ 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007aba:	3b28      	subs	r3, #40	@ 0x28
 8007abc:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d82d      	bhi.n	8007b1e <I2C_ITError+0x7e>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007ac2:	2103      	movs	r1, #3
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f7ff f867 	bl	8006b98 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007aca:	2328      	movs	r3, #40	@ 0x28
 8007acc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007ad0:	4b33      	ldr	r3, [pc, #204]	@ (8007ba0 <I2C_ITError+0x100>)
 8007ad2:	6363      	str	r3, [r4, #52]	@ 0x34
  tmppreviousstate = hi2c->PreviousState;
 8007ad4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007ad6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007ad8:	2a00      	cmp	r2, #0
 8007ada:	d034      	beq.n	8007b46 <I2C_ITError+0xa6>
 8007adc:	2b21      	cmp	r3, #33	@ 0x21
 8007ade:	bf18      	it	ne
 8007ae0:	2b11      	cmpne	r3, #17
 8007ae2:	d130      	bne.n	8007b46 <I2C_ITError+0xa6>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8007aec:	d003      	beq.n	8007af6 <I2C_ITError+0x56>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007af4:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007af6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8007af8:	f7fe f8f6 	bl	8005ce8 <HAL_DMA_GetState>
 8007afc:	2801      	cmp	r0, #1
 8007afe:	d01e      	beq.n	8007b3e <I2C_ITError+0x9e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007b00:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007b02:	4a28      	ldr	r2, [pc, #160]	@ (8007ba4 <I2C_ITError+0x104>)
 8007b04:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_UNLOCK(hi2c);
 8007b06:	2300      	movs	r3, #0
 8007b08:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007b0c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8007b0e:	f7fd fc17 	bl	8005340 <HAL_DMA_Abort_IT>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d040      	beq.n	8007b98 <I2C_ITError+0xf8>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007b16:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8007b18:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8007b1a:	4798      	blx	r3
 8007b1c:	e03c      	b.n	8007b98 <I2C_ITError+0xf8>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007b1e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007b22:	4620      	mov	r0, r4
 8007b24:	f7ff f838 	bl	8006b98 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007b28:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b60      	cmp	r3, #96	@ 0x60
 8007b30:	d002      	beq.n	8007b38 <I2C_ITError+0x98>
      hi2c->State         = HAL_I2C_STATE_READY;
 8007b32:	2320      	movs	r3, #32
 8007b34:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->XferISR       = NULL;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b3c:	e7ca      	b.n	8007ad4 <I2C_ITError+0x34>
      I2C_TreatErrorCallback(hi2c);
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f7ff ff97 	bl	8007a72 <I2C_TreatErrorCallback>
 8007b44:	e028      	b.n	8007b98 <I2C_ITError+0xf8>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007b46:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8007b48:	b31a      	cbz	r2, 8007b92 <I2C_ITError+0xf2>
 8007b4a:	2b22      	cmp	r3, #34	@ 0x22
 8007b4c:	bf18      	it	ne
 8007b4e:	2b12      	cmpne	r3, #18
 8007b50:	d11f      	bne.n	8007b92 <I2C_ITError+0xf2>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8007b5a:	d003      	beq.n	8007b64 <I2C_ITError+0xc4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b62:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b64:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007b66:	f7fe f8bf 	bl	8005ce8 <HAL_DMA_GetState>
 8007b6a:	2801      	cmp	r0, #1
 8007b6c:	d00d      	beq.n	8007b8a <I2C_ITError+0xea>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007b6e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007b70:	4a0c      	ldr	r2, [pc, #48]	@ (8007ba4 <I2C_ITError+0x104>)
 8007b72:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_UNLOCK(hi2c);
 8007b74:	2300      	movs	r3, #0
 8007b76:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007b7a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007b7c:	f7fd fbe0 	bl	8005340 <HAL_DMA_Abort_IT>
 8007b80:	b150      	cbz	r0, 8007b98 <I2C_ITError+0xf8>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007b82:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007b84:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8007b86:	4798      	blx	r3
 8007b88:	e006      	b.n	8007b98 <I2C_ITError+0xf8>
      I2C_TreatErrorCallback(hi2c);
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f7ff ff71 	bl	8007a72 <I2C_TreatErrorCallback>
 8007b90:	e002      	b.n	8007b98 <I2C_ITError+0xf8>
    I2C_TreatErrorCallback(hi2c);
 8007b92:	4620      	mov	r0, r4
 8007b94:	f7ff ff6d 	bl	8007a72 <I2C_TreatErrorCallback>
}
 8007b98:	bd10      	pop	{r4, pc}
 8007b9a:	bf00      	nop
 8007b9c:	ffff0000 	.word	0xffff0000
 8007ba0:	08007ded 	.word	0x08007ded
 8007ba4:	08008739 	.word	0x08008739

08007ba8 <I2C_ITSlaveCplt>:
{
 8007ba8:	b570      	push	{r4, r5, r6, lr}
 8007baa:	4604      	mov	r4, r0
 8007bac:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007bae:	6802      	ldr	r2, [r0, #0]
 8007bb0:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007bb2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007bb6:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bb8:	2120      	movs	r1, #32
 8007bba:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007bbc:	2b29      	cmp	r3, #41	@ 0x29
 8007bbe:	bf18      	it	ne
 8007bc0:	2b21      	cmpne	r3, #33	@ 0x21
 8007bc2:	d057      	beq.n	8007c74 <I2C_ITSlaveCplt+0xcc>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007bc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bc6:	bf18      	it	ne
 8007bc8:	2b22      	cmpne	r3, #34	@ 0x22
 8007bca:	d05a      	beq.n	8007c82 <I2C_ITSlaveCplt+0xda>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007bcc:	6822      	ldr	r2, [r4, #0]
 8007bce:	6853      	ldr	r3, [r2, #4]
 8007bd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bd4:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8007bd6:	6822      	ldr	r2, [r4, #0]
 8007bd8:	6853      	ldr	r3, [r2, #4]
 8007bda:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8007bde:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8007be2:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8007be6:	f023 0301 	bic.w	r3, r3, #1
 8007bea:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8007bec:	4620      	mov	r0, r4
 8007bee:	f7fe ff69 	bl	8006ac4 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007bf2:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8007bf6:	f000 8085 	beq.w	8007d04 <I2C_ITSlaveCplt+0x15c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007bfa:	6822      	ldr	r2, [r4, #0]
 8007bfc:	6813      	ldr	r3, [r2, #0]
 8007bfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c02:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8007c04:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d045      	beq.n	8007c96 <I2C_ITSlaveCplt+0xee>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4974      	ldr	r1, [pc, #464]	@ (8007de0 <I2C_ITSlaveCplt+0x238>)
 8007c0e:	4a75      	ldr	r2, [pc, #468]	@ (8007de4 <I2C_ITSlaveCplt+0x23c>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	bf18      	it	ne
 8007c14:	428b      	cmpne	r3, r1
 8007c16:	d03b      	beq.n	8007c90 <I2C_ITSlaveCplt+0xe8>
 8007c18:	3218      	adds	r2, #24
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d038      	beq.n	8007c90 <I2C_ITSlaveCplt+0xe8>
 8007c1e:	3218      	adds	r2, #24
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d035      	beq.n	8007c90 <I2C_ITSlaveCplt+0xe8>
 8007c24:	3218      	adds	r2, #24
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d032      	beq.n	8007c90 <I2C_ITSlaveCplt+0xe8>
 8007c2a:	3218      	adds	r2, #24
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d02f      	beq.n	8007c90 <I2C_ITSlaveCplt+0xe8>
 8007c30:	3218      	adds	r2, #24
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d02c      	beq.n	8007c90 <I2C_ITSlaveCplt+0xe8>
 8007c36:	3218      	adds	r2, #24
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d029      	beq.n	8007c90 <I2C_ITSlaveCplt+0xe8>
 8007c3c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d025      	beq.n	8007c90 <I2C_ITSlaveCplt+0xe8>
 8007c44:	3218      	adds	r2, #24
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d022      	beq.n	8007c90 <I2C_ITSlaveCplt+0xe8>
 8007c4a:	3218      	adds	r2, #24
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d01f      	beq.n	8007c90 <I2C_ITSlaveCplt+0xe8>
 8007c50:	3218      	adds	r2, #24
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d01c      	beq.n	8007c90 <I2C_ITSlaveCplt+0xe8>
 8007c56:	3218      	adds	r2, #24
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d019      	beq.n	8007c90 <I2C_ITSlaveCplt+0xe8>
 8007c5c:	3218      	adds	r2, #24
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d016      	beq.n	8007c90 <I2C_ITSlaveCplt+0xe8>
 8007c62:	3218      	adds	r2, #24
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d013      	beq.n	8007c90 <I2C_ITSlaveCplt+0xe8>
 8007c68:	3218      	adds	r2, #24
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d010      	beq.n	8007c90 <I2C_ITSlaveCplt+0xe8>
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	e00f      	b.n	8007c94 <I2C_ITSlaveCplt+0xec>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007c74:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007c78:	f7fe ff8e 	bl	8006b98 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007c7c:	2321      	movs	r3, #33	@ 0x21
 8007c7e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c80:	e7a4      	b.n	8007bcc <I2C_ITSlaveCplt+0x24>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007c82:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007c86:	f7fe ff87 	bl	8006b98 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007c8a:	2322      	movs	r3, #34	@ 0x22
 8007c8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c8e:	e79d      	b.n	8007bcc <I2C_ITSlaveCplt+0x24>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	8563      	strh	r3, [r4, #42]	@ 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007c96:	f015 0f04 	tst.w	r5, #4
 8007c9a:	d011      	beq.n	8007cc0 <I2C_ITSlaveCplt+0x118>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007c9c:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ca4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007ca6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007ca8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007caa:	3301      	adds	r3, #1
 8007cac:	6263      	str	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 8007cae:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8007cb0:	b133      	cbz	r3, 8007cc0 <I2C_ITSlaveCplt+0x118>
      hi2c->XferSize--;
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8007cb6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	8563      	strh	r3, [r4, #42]	@ 0x2a
  if (hi2c->XferCount != 0U)
 8007cc0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	b11b      	cbz	r3, 8007cce <I2C_ITSlaveCplt+0x126>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007cc6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007cc8:	f043 0304 	orr.w	r3, r3, #4
 8007ccc:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007cd4:	6363      	str	r3, [r4, #52]	@ 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007cd6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d157      	bne.n	8007d8c <I2C_ITSlaveCplt+0x1e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007cdc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007cde:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ce2:	d161      	bne.n	8007da8 <I2C_ITSlaveCplt+0x200>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007ce4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b22      	cmp	r3, #34	@ 0x22
 8007cec:	d06c      	beq.n	8007dc8 <I2C_ITSlaveCplt+0x220>
    hi2c->State = HAL_I2C_STATE_READY;
 8007cee:	2320      	movs	r3, #32
 8007cf0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	6323      	str	r3, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007cf8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f7ff fdeb 	bl	80078d8 <HAL_I2C_SlaveTxCpltCallback>
}
 8007d02:	e060      	b.n	8007dc6 <I2C_ITSlaveCplt+0x21e>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007d04:	f416 4f00 	tst.w	r6, #32768	@ 0x8000
 8007d08:	d0c5      	beq.n	8007c96 <I2C_ITSlaveCplt+0xee>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007d0a:	6822      	ldr	r2, [r4, #0]
 8007d0c:	6813      	ldr	r3, [r2, #0]
 8007d0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d12:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8007d14:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0bd      	beq.n	8007c96 <I2C_ITSlaveCplt+0xee>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4930      	ldr	r1, [pc, #192]	@ (8007de0 <I2C_ITSlaveCplt+0x238>)
 8007d1e:	4a31      	ldr	r2, [pc, #196]	@ (8007de4 <I2C_ITSlaveCplt+0x23c>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	bf18      	it	ne
 8007d24:	428b      	cmpne	r3, r1
 8007d26:	d02d      	beq.n	8007d84 <I2C_ITSlaveCplt+0x1dc>
 8007d28:	3218      	adds	r2, #24
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d02a      	beq.n	8007d84 <I2C_ITSlaveCplt+0x1dc>
 8007d2e:	3218      	adds	r2, #24
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d027      	beq.n	8007d84 <I2C_ITSlaveCplt+0x1dc>
 8007d34:	3218      	adds	r2, #24
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d024      	beq.n	8007d84 <I2C_ITSlaveCplt+0x1dc>
 8007d3a:	3218      	adds	r2, #24
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d021      	beq.n	8007d84 <I2C_ITSlaveCplt+0x1dc>
 8007d40:	3218      	adds	r2, #24
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d01e      	beq.n	8007d84 <I2C_ITSlaveCplt+0x1dc>
 8007d46:	3218      	adds	r2, #24
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d01b      	beq.n	8007d84 <I2C_ITSlaveCplt+0x1dc>
 8007d4c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d017      	beq.n	8007d84 <I2C_ITSlaveCplt+0x1dc>
 8007d54:	3218      	adds	r2, #24
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d014      	beq.n	8007d84 <I2C_ITSlaveCplt+0x1dc>
 8007d5a:	3218      	adds	r2, #24
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d011      	beq.n	8007d84 <I2C_ITSlaveCplt+0x1dc>
 8007d60:	3218      	adds	r2, #24
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d00e      	beq.n	8007d84 <I2C_ITSlaveCplt+0x1dc>
 8007d66:	3218      	adds	r2, #24
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d00b      	beq.n	8007d84 <I2C_ITSlaveCplt+0x1dc>
 8007d6c:	3218      	adds	r2, #24
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d008      	beq.n	8007d84 <I2C_ITSlaveCplt+0x1dc>
 8007d72:	3218      	adds	r2, #24
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d005      	beq.n	8007d84 <I2C_ITSlaveCplt+0x1dc>
 8007d78:	3218      	adds	r2, #24
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d002      	beq.n	8007d84 <I2C_ITSlaveCplt+0x1dc>
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	e001      	b.n	8007d88 <I2C_ITSlaveCplt+0x1e0>
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8007d8a:	e784      	b.n	8007c96 <I2C_ITSlaveCplt+0xee>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007d8c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f7ff fe86 	bl	8007aa0 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007d94:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b28      	cmp	r3, #40	@ 0x28
 8007d9c:	d113      	bne.n	8007dc6 <I2C_ITSlaveCplt+0x21e>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007d9e:	4629      	mov	r1, r5
 8007da0:	4620      	mov	r0, r4
 8007da2:	f7ff fe2f 	bl	8007a04 <I2C_ITListenCplt>
 8007da6:	e00e      	b.n	8007dc6 <I2C_ITSlaveCplt+0x21e>
    I2C_ITSlaveSeqCplt(hi2c);
 8007da8:	4620      	mov	r0, r4
 8007daa:	f7ff fd97 	bl	80078dc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007dae:	4b0e      	ldr	r3, [pc, #56]	@ (8007de8 <I2C_ITSlaveCplt+0x240>)
 8007db0:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007db2:	2320      	movs	r3, #32
 8007db4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007db8:	2300      	movs	r3, #0
 8007dba:	6323      	str	r3, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007dbc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f7ff fe1d 	bl	8007a00 <HAL_I2C_ListenCpltCallback>
}
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8007dc8:	2320      	movs	r3, #32
 8007dca:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	6323      	str	r3, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007dd2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f7ff fd7f 	bl	80078da <HAL_I2C_SlaveRxCpltCallback>
 8007ddc:	e7f3      	b.n	8007dc6 <I2C_ITSlaveCplt+0x21e>
 8007dde:	bf00      	nop
 8007de0:	40020010 	.word	0x40020010
 8007de4:	40020028 	.word	0x40020028
 8007de8:	ffff0000 	.word	0xffff0000

08007dec <I2C_Slave_ISR_IT>:
{
 8007dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8007dee:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
  __HAL_LOCK(hi2c);
 8007df0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	f000 809f 	beq.w	8007f38 <I2C_Slave_ISR_IT+0x14c>
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	460d      	mov	r5, r1
 8007dfe:	4616      	mov	r6, r2
 8007e00:	2301      	movs	r3, #1
 8007e02:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e06:	f011 0f20 	tst.w	r1, #32
 8007e0a:	d002      	beq.n	8007e12 <I2C_Slave_ISR_IT+0x26>
 8007e0c:	f012 0f20 	tst.w	r2, #32
 8007e10:	d119      	bne.n	8007e46 <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007e12:	f015 0f10 	tst.w	r5, #16
 8007e16:	d03f      	beq.n	8007e98 <I2C_Slave_ISR_IT+0xac>
 8007e18:	f016 0f10 	tst.w	r6, #16
 8007e1c:	d03c      	beq.n	8007e98 <I2C_Slave_ISR_IT+0xac>
    if (hi2c->XferCount == 0U)
 8007e1e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	bb43      	cbnz	r3, 8007e76 <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007e24:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b28      	cmp	r3, #40	@ 0x28
 8007e2c:	d00e      	beq.n	8007e4c <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007e2e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b29      	cmp	r3, #41	@ 0x29
 8007e36:	d011      	beq.n	8007e5c <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e38:	6823      	ldr	r3, [r4, #0]
 8007e3a:	2210      	movs	r2, #16
 8007e3c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8007e3e:	2000      	movs	r0, #0
 8007e40:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 8007e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007e46:	f7ff feaf 	bl	8007ba8 <I2C_ITSlaveCplt>
 8007e4a:	e7e2      	b.n	8007e12 <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007e4c:	f1b7 7f00 	cmp.w	r7, #33554432	@ 0x2000000
 8007e50:	d1ed      	bne.n	8007e2e <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007e52:	4629      	mov	r1, r5
 8007e54:	4620      	mov	r0, r4
 8007e56:	f7ff fdd5 	bl	8007a04 <I2C_ITListenCplt>
 8007e5a:	e7f0      	b.n	8007e3e <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007e5c:	f517 3f80 	cmn.w	r7, #65536	@ 0x10000
 8007e60:	d0ea      	beq.n	8007e38 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	2210      	movs	r2, #16
 8007e66:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f7fe fe2b 	bl	8006ac4 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f7ff fd34 	bl	80078dc <I2C_ITSlaveSeqCplt>
 8007e74:	e7e3      	b.n	8007e3e <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	2210      	movs	r2, #16
 8007e7a:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e7c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007e7e:	f043 0304 	orr.w	r3, r3, #4
 8007e82:	6463      	str	r3, [r4, #68]	@ 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007e84:	f1b7 7f80 	cmp.w	r7, #16777216	@ 0x1000000
 8007e88:	bf18      	it	ne
 8007e8a:	2f00      	cmpne	r7, #0
 8007e8c:	d1d7      	bne.n	8007e3e <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007e8e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007e90:	4620      	mov	r0, r4
 8007e92:	f7ff fe05 	bl	8007aa0 <I2C_ITError>
 8007e96:	e7d2      	b.n	8007e3e <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007e98:	f015 0f04 	tst.w	r5, #4
 8007e9c:	d01f      	beq.n	8007ede <I2C_Slave_ISR_IT+0xf2>
 8007e9e:	f016 0f04 	tst.w	r6, #4
 8007ea2:	d01c      	beq.n	8007ede <I2C_Slave_ISR_IT+0xf2>
    if (hi2c->XferCount > 0U)
 8007ea4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	b173      	cbz	r3, 8007ec8 <I2C_Slave_ISR_IT+0xdc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007eae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007eb0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007eb2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8007eb8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8007ebe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && \
 8007ec8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1b6      	bne.n	8007e3e <I2C_Slave_ISR_IT+0x52>
 8007ed0:	f517 3f80 	cmn.w	r7, #65536	@ 0x10000
 8007ed4:	d0b3      	beq.n	8007e3e <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f7ff fd00 	bl	80078dc <I2C_ITSlaveSeqCplt>
 8007edc:	e7af      	b.n	8007e3e <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ede:	f015 0f08 	tst.w	r5, #8
 8007ee2:	d002      	beq.n	8007eea <I2C_Slave_ISR_IT+0xfe>
 8007ee4:	f016 0f08 	tst.w	r6, #8
 8007ee8:	d118      	bne.n	8007f1c <I2C_Slave_ISR_IT+0x130>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007eea:	f015 0f02 	tst.w	r5, #2
 8007eee:	d0a6      	beq.n	8007e3e <I2C_Slave_ISR_IT+0x52>
 8007ef0:	f016 0f02 	tst.w	r6, #2
 8007ef4:	d0a3      	beq.n	8007e3e <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 8007ef6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	b1a3      	cbz	r3, 8007f26 <I2C_Slave_ISR_IT+0x13a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007efc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007efe:	6823      	ldr	r3, [r4, #0]
 8007f00:	7812      	ldrb	r2, [r2, #0]
 8007f02:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8007f04:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007f06:	3301      	adds	r3, #1
 8007f08:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8007f0a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007f14:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8007f16:	3b01      	subs	r3, #1
 8007f18:	8523      	strh	r3, [r4, #40]	@ 0x28
 8007f1a:	e790      	b.n	8007e3e <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f7ff fd1e 	bl	8007960 <I2C_ITAddrCplt>
 8007f24:	e78b      	b.n	8007e3e <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007f26:	2f00      	cmp	r7, #0
 8007f28:	bf18      	it	ne
 8007f2a:	f1b7 7f80 	cmpne.w	r7, #16777216	@ 0x1000000
 8007f2e:	d186      	bne.n	8007e3e <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 8007f30:	4620      	mov	r0, r4
 8007f32:	f7ff fcd3 	bl	80078dc <I2C_ITSlaveSeqCplt>
 8007f36:	e782      	b.n	8007e3e <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8007f38:	2002      	movs	r0, #2
 8007f3a:	e783      	b.n	8007e44 <I2C_Slave_ISR_IT+0x58>

08007f3c <I2C_ITMasterCplt>:
{
 8007f3c:	b530      	push	{r4, r5, lr}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	4604      	mov	r4, r0
 8007f42:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f44:	6803      	ldr	r3, [r0, #0]
 8007f46:	2220      	movs	r2, #32
 8007f48:	61da      	str	r2, [r3, #28]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007f4a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b21      	cmp	r3, #33	@ 0x21
 8007f52:	d033      	beq.n	8007fbc <I2C_ITMasterCplt+0x80>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007f54:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b22      	cmp	r3, #34	@ 0x22
 8007f5c:	d034      	beq.n	8007fc8 <I2C_ITMasterCplt+0x8c>
  I2C_RESET_CR2(hi2c);
 8007f5e:	6822      	ldr	r2, [r4, #0]
 8007f60:	6853      	ldr	r3, [r2, #4]
 8007f62:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8007f66:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8007f6a:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8007f6e:	f023 0301 	bic.w	r3, r3, #1
 8007f72:	6053      	str	r3, [r2, #4]
  hi2c->XferISR       = NULL;
 8007f74:	2300      	movs	r3, #0
 8007f76:	6363      	str	r3, [r4, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007f78:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8007f7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007f7e:	f015 0f10 	tst.w	r5, #16
 8007f82:	d006      	beq.n	8007f92 <I2C_ITMasterCplt+0x56>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	2210      	movs	r2, #16
 8007f88:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f8a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007f8c:	f043 0304 	orr.w	r3, r3, #4
 8007f90:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007f92:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b60      	cmp	r3, #96	@ 0x60
 8007f9a:	d01b      	beq.n	8007fd4 <I2C_ITMasterCplt+0x98>
  I2C_Flush_TXDR(hi2c);
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f7fe fd91 	bl	8006ac4 <I2C_Flush_TXDR>
  tmperror = hi2c->ErrorCode;
 8007fa2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007fa4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b60      	cmp	r3, #96	@ 0x60
 8007fac:	d000      	beq.n	8007fb0 <I2C_ITMasterCplt+0x74>
 8007fae:	b1d2      	cbz	r2, 8007fe6 <I2C_ITMasterCplt+0xaa>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007fb0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f7ff fd74 	bl	8007aa0 <I2C_ITError>
}
 8007fb8:	b003      	add	sp, #12
 8007fba:	bd30      	pop	{r4, r5, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	f7fe fdeb 	bl	8006b98 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007fc2:	2311      	movs	r3, #17
 8007fc4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007fc6:	e7ca      	b.n	8007f5e <I2C_ITMasterCplt+0x22>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007fc8:	2102      	movs	r1, #2
 8007fca:	f7fe fde5 	bl	8006b98 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007fce:	2312      	movs	r3, #18
 8007fd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8007fd2:	e7c4      	b.n	8007f5e <I2C_ITMasterCplt+0x22>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007fd4:	f015 0f04 	tst.w	r5, #4
 8007fd8:	d0e0      	beq.n	8007f9c <I2C_ITMasterCplt+0x60>
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	9301      	str	r3, [sp, #4]
    UNUSED(tmpreg);
 8007fe2:	9b01      	ldr	r3, [sp, #4]
 8007fe4:	e7da      	b.n	8007f9c <I2C_ITMasterCplt+0x60>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007fe6:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b21      	cmp	r3, #33	@ 0x21
 8007fee:	d017      	beq.n	8008020 <I2C_ITMasterCplt+0xe4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007ff0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b22      	cmp	r3, #34	@ 0x22
 8007ff8:	d1de      	bne.n	8007fb8 <I2C_ITMasterCplt+0x7c>
    hi2c->State = HAL_I2C_STATE_READY;
 8007ffa:	2320      	movs	r3, #32
 8007ffc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008000:	2300      	movs	r3, #0
 8008002:	6323      	str	r3, [r4, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008004:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b40      	cmp	r3, #64	@ 0x40
 800800c:	d024      	beq.n	8008058 <I2C_ITMasterCplt+0x11c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800800e:	2300      	movs	r3, #0
 8008010:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008014:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008018:	4620      	mov	r0, r4
 800801a:	f7f8 fc87 	bl	800092c <HAL_I2C_MasterRxCpltCallback>
}
 800801e:	e7cb      	b.n	8007fb8 <I2C_ITMasterCplt+0x7c>
    hi2c->State = HAL_I2C_STATE_READY;
 8008020:	2320      	movs	r3, #32
 8008022:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008026:	2300      	movs	r3, #0
 8008028:	6323      	str	r3, [r4, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800802a:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b40      	cmp	r3, #64	@ 0x40
 8008032:	d008      	beq.n	8008046 <I2C_ITMasterCplt+0x10a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008034:	2300      	movs	r3, #0
 8008036:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800803a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800803e:	4620      	mov	r0, r4
 8008040:	f7f8 fc6c 	bl	800091c <HAL_I2C_MasterTxCpltCallback>
 8008044:	e7b8      	b.n	8007fb8 <I2C_ITMasterCplt+0x7c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008046:	2300      	movs	r3, #0
 8008048:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800804c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008050:	4620      	mov	r0, r4
 8008052:	f7ff fd0b 	bl	8007a6c <HAL_I2C_MemTxCpltCallback>
 8008056:	e7af      	b.n	8007fb8 <I2C_ITMasterCplt+0x7c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008058:	2300      	movs	r3, #0
 800805a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800805e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008062:	4620      	mov	r0, r4
 8008064:	f7f8 fc60 	bl	8000928 <HAL_I2C_MemRxCpltCallback>
 8008068:	e7a6      	b.n	8007fb8 <I2C_ITMasterCplt+0x7c>

0800806a <I2C_Master_ISR_IT>:
  __HAL_LOCK(hi2c);
 800806a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800806e:	2b01      	cmp	r3, #1
 8008070:	f000 80b9 	beq.w	80081e6 <I2C_Master_ISR_IT+0x17c>
{
 8008074:	b570      	push	{r4, r5, r6, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	4604      	mov	r4, r0
 800807a:	460d      	mov	r5, r1
 800807c:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 800807e:	2301      	movs	r3, #1
 8008080:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008084:	f011 0f10 	tst.w	r1, #16
 8008088:	d002      	beq.n	8008090 <I2C_Master_ISR_IT+0x26>
 800808a:	f012 0f10 	tst.w	r2, #16
 800808e:	d122      	bne.n	80080d6 <I2C_Master_ISR_IT+0x6c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008090:	f015 0f04 	tst.w	r5, #4
 8008094:	d029      	beq.n	80080ea <I2C_Master_ISR_IT+0x80>
 8008096:	f016 0f04 	tst.w	r6, #4
 800809a:	d026      	beq.n	80080ea <I2C_Master_ISR_IT+0x80>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800809c:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80080a0:	6823      	ldr	r3, [r4, #0]
 80080a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080a4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80080a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80080a8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80080aa:	3301      	adds	r3, #1
 80080ac:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferSize--;
 80080ae:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80080b0:	3b01      	subs	r3, #1
 80080b2:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferCount--;
 80080b4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	3b01      	subs	r3, #1
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	8563      	strh	r3, [r4, #42]	@ 0x2a
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80080be:	f015 0f20 	tst.w	r5, #32
 80080c2:	d003      	beq.n	80080cc <I2C_Master_ISR_IT+0x62>
 80080c4:	f016 0f20 	tst.w	r6, #32
 80080c8:	f040 8088 	bne.w	80081dc <I2C_Master_ISR_IT+0x172>
  __HAL_UNLOCK(hi2c);
 80080cc:	2000      	movs	r0, #0
 80080ce:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 80080d2:	b002      	add	sp, #8
 80080d4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080d6:	6803      	ldr	r3, [r0, #0]
 80080d8:	2210      	movs	r2, #16
 80080da:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080dc:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80080de:	f043 0304 	orr.w	r3, r3, #4
 80080e2:	6443      	str	r3, [r0, #68]	@ 0x44
    I2C_Flush_TXDR(hi2c);
 80080e4:	f7fe fcee 	bl	8006ac4 <I2C_Flush_TXDR>
 80080e8:	e7e9      	b.n	80080be <I2C_Master_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80080ea:	f015 0f02 	tst.w	r5, #2
 80080ee:	d012      	beq.n	8008116 <I2C_Master_ISR_IT+0xac>
 80080f0:	f016 0f02 	tst.w	r6, #2
 80080f4:	d00f      	beq.n	8008116 <I2C_Master_ISR_IT+0xac>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80080f6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80080f8:	6823      	ldr	r3, [r4, #0]
 80080fa:	7812      	ldrb	r2, [r2, #0]
 80080fc:	629a      	str	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr++;
 80080fe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008100:	3301      	adds	r3, #1
 8008102:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferSize--;
 8008104:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8008106:	3b01      	subs	r3, #1
 8008108:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferCount--;
 800810a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800810c:	b29b      	uxth	r3, r3
 800810e:	3b01      	subs	r3, #1
 8008110:	b29b      	uxth	r3, r3
 8008112:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8008114:	e7d3      	b.n	80080be <I2C_Master_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8008116:	f015 0f80 	tst.w	r5, #128	@ 0x80
 800811a:	d03f      	beq.n	800819c <I2C_Master_ISR_IT+0x132>
 800811c:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8008120:	d03c      	beq.n	800819c <I2C_Master_ISR_IT+0x132>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008122:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008124:	b29b      	uxth	r3, r3
 8008126:	b35b      	cbz	r3, 8008180 <I2C_Master_ISR_IT+0x116>
 8008128:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800812a:	bb4b      	cbnz	r3, 8008180 <I2C_Master_ISR_IT+0x116>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	6859      	ldr	r1, [r3, #4]
 8008130:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008134:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008136:	b29b      	uxth	r3, r3
 8008138:	2bff      	cmp	r3, #255	@ 0xff
 800813a:	d80e      	bhi.n	800815a <I2C_Master_ISR_IT+0xf0>
        hi2c->XferSize = hi2c->XferCount;
 800813c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800813e:	b292      	uxth	r2, r2
 8008140:	8522      	strh	r2, [r4, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008142:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008144:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008148:	d011      	beq.n	800816e <I2C_Master_ISR_IT+0x104>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800814a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800814c:	2000      	movs	r0, #0
 800814e:	9000      	str	r0, [sp, #0]
 8008150:	b2d2      	uxtb	r2, r2
 8008152:	4620      	mov	r0, r4
 8008154:	f7fe fcc7 	bl	8006ae6 <I2C_TransferConfig>
 8008158:	e7b1      	b.n	80080be <I2C_Master_ISR_IT+0x54>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800815a:	22ff      	movs	r2, #255	@ 0xff
 800815c:	8522      	strh	r2, [r4, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800815e:	2300      	movs	r3, #0
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008166:	4620      	mov	r0, r4
 8008168:	f7fe fcbd 	bl	8006ae6 <I2C_TransferConfig>
 800816c:	e7a7      	b.n	80080be <I2C_Master_ISR_IT+0x54>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800816e:	2300      	movs	r3, #0
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008176:	b2d2      	uxtb	r2, r2
 8008178:	4620      	mov	r0, r4
 800817a:	f7fe fcb4 	bl	8006ae6 <I2C_TransferConfig>
 800817e:	e79e      	b.n	80080be <I2C_Master_ISR_IT+0x54>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8008188:	d103      	bne.n	8008192 <I2C_Master_ISR_IT+0x128>
        I2C_ITMasterSeqCplt(hi2c);
 800818a:	4620      	mov	r0, r4
 800818c:	f7ff fb7a 	bl	8007884 <I2C_ITMasterSeqCplt>
 8008190:	e795      	b.n	80080be <I2C_Master_ISR_IT+0x54>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008192:	2140      	movs	r1, #64	@ 0x40
 8008194:	4620      	mov	r0, r4
 8008196:	f7ff fc83 	bl	8007aa0 <I2C_ITError>
 800819a:	e790      	b.n	80080be <I2C_Master_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800819c:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80081a0:	d08d      	beq.n	80080be <I2C_Master_ISR_IT+0x54>
 80081a2:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80081a6:	d08a      	beq.n	80080be <I2C_Master_ISR_IT+0x54>
    if (hi2c->XferCount == 0U)
 80081a8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	b98b      	cbnz	r3, 80081d2 <I2C_Master_ISR_IT+0x168>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80081b6:	d182      	bne.n	80080be <I2C_Master_ISR_IT+0x54>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80081b8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80081ba:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 80081be:	d104      	bne.n	80081ca <I2C_Master_ISR_IT+0x160>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80081c0:	685a      	ldr	r2, [r3, #4]
 80081c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081c6:	605a      	str	r2, [r3, #4]
 80081c8:	e779      	b.n	80080be <I2C_Master_ISR_IT+0x54>
          I2C_ITMasterSeqCplt(hi2c);
 80081ca:	4620      	mov	r0, r4
 80081cc:	f7ff fb5a 	bl	8007884 <I2C_ITMasterSeqCplt>
 80081d0:	e775      	b.n	80080be <I2C_Master_ISR_IT+0x54>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80081d2:	2140      	movs	r1, #64	@ 0x40
 80081d4:	4620      	mov	r0, r4
 80081d6:	f7ff fc63 	bl	8007aa0 <I2C_ITError>
 80081da:	e770      	b.n	80080be <I2C_Master_ISR_IT+0x54>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80081dc:	4629      	mov	r1, r5
 80081de:	4620      	mov	r0, r4
 80081e0:	f7ff feac 	bl	8007f3c <I2C_ITMasterCplt>
 80081e4:	e772      	b.n	80080cc <I2C_Master_ISR_IT+0x62>
  __HAL_LOCK(hi2c);
 80081e6:	2002      	movs	r0, #2
}
 80081e8:	4770      	bx	lr
	...

080081ec <I2C_Slave_ISR_DMA>:
{
 80081ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 80081ee:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
  __HAL_LOCK(hi2c);
 80081f0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	f000 8100 	beq.w	80083fa <I2C_Slave_ISR_DMA+0x20e>
 80081fa:	4604      	mov	r4, r0
 80081fc:	460d      	mov	r5, r1
 80081fe:	4616      	mov	r6, r2
 8008200:	2301      	movs	r3, #1
 8008202:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008206:	f011 0f20 	tst.w	r1, #32
 800820a:	d002      	beq.n	8008212 <I2C_Slave_ISR_DMA+0x26>
 800820c:	f012 0f20 	tst.w	r2, #32
 8008210:	d148      	bne.n	80082a4 <I2C_Slave_ISR_DMA+0xb8>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008212:	f015 0f10 	tst.w	r5, #16
 8008216:	f000 80e1 	beq.w	80083dc <I2C_Slave_ISR_DMA+0x1f0>
 800821a:	f016 0f10 	tst.w	r6, #16
 800821e:	f000 80dd 	beq.w	80083dc <I2C_Slave_ISR_DMA+0x1f0>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008222:	f416 4f40 	tst.w	r6, #49152	@ 0xc000
 8008226:	f000 80d5 	beq.w	80083d4 <I2C_Slave_ISR_DMA+0x1e8>
      if (hi2c->hdmarx != NULL)
 800822a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800822c:	2b00      	cmp	r3, #0
 800822e:	d044      	beq.n	80082ba <I2C_Slave_ISR_DMA+0xce>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008230:	f416 4200 	ands.w	r2, r6, #32768	@ 0x8000
 8008234:	d042      	beq.n	80082bc <I2C_Slave_ISR_DMA+0xd0>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4971      	ldr	r1, [pc, #452]	@ (8008400 <I2C_Slave_ISR_DMA+0x214>)
 800823a:	4a72      	ldr	r2, [pc, #456]	@ (8008404 <I2C_Slave_ISR_DMA+0x218>)
 800823c:	4293      	cmp	r3, r2
 800823e:	bf18      	it	ne
 8008240:	428b      	cmpne	r3, r1
 8008242:	d032      	beq.n	80082aa <I2C_Slave_ISR_DMA+0xbe>
 8008244:	3218      	adds	r2, #24
 8008246:	4293      	cmp	r3, r2
 8008248:	d02f      	beq.n	80082aa <I2C_Slave_ISR_DMA+0xbe>
 800824a:	3218      	adds	r2, #24
 800824c:	4293      	cmp	r3, r2
 800824e:	d02c      	beq.n	80082aa <I2C_Slave_ISR_DMA+0xbe>
 8008250:	3218      	adds	r2, #24
 8008252:	4293      	cmp	r3, r2
 8008254:	d029      	beq.n	80082aa <I2C_Slave_ISR_DMA+0xbe>
 8008256:	3218      	adds	r2, #24
 8008258:	4293      	cmp	r3, r2
 800825a:	d026      	beq.n	80082aa <I2C_Slave_ISR_DMA+0xbe>
 800825c:	3218      	adds	r2, #24
 800825e:	4293      	cmp	r3, r2
 8008260:	d023      	beq.n	80082aa <I2C_Slave_ISR_DMA+0xbe>
 8008262:	3218      	adds	r2, #24
 8008264:	4293      	cmp	r3, r2
 8008266:	d020      	beq.n	80082aa <I2C_Slave_ISR_DMA+0xbe>
 8008268:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800826c:	4293      	cmp	r3, r2
 800826e:	d01c      	beq.n	80082aa <I2C_Slave_ISR_DMA+0xbe>
 8008270:	3218      	adds	r2, #24
 8008272:	4293      	cmp	r3, r2
 8008274:	d019      	beq.n	80082aa <I2C_Slave_ISR_DMA+0xbe>
 8008276:	3218      	adds	r2, #24
 8008278:	4293      	cmp	r3, r2
 800827a:	d016      	beq.n	80082aa <I2C_Slave_ISR_DMA+0xbe>
 800827c:	3218      	adds	r2, #24
 800827e:	4293      	cmp	r3, r2
 8008280:	d013      	beq.n	80082aa <I2C_Slave_ISR_DMA+0xbe>
 8008282:	3218      	adds	r2, #24
 8008284:	4293      	cmp	r3, r2
 8008286:	d010      	beq.n	80082aa <I2C_Slave_ISR_DMA+0xbe>
 8008288:	3218      	adds	r2, #24
 800828a:	4293      	cmp	r3, r2
 800828c:	d00d      	beq.n	80082aa <I2C_Slave_ISR_DMA+0xbe>
 800828e:	3218      	adds	r2, #24
 8008290:	4293      	cmp	r3, r2
 8008292:	d00a      	beq.n	80082aa <I2C_Slave_ISR_DMA+0xbe>
 8008294:	3218      	adds	r2, #24
 8008296:	4293      	cmp	r3, r2
 8008298:	d007      	beq.n	80082aa <I2C_Slave_ISR_DMA+0xbe>
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	fab3 f383 	clz	r3, r3
 80082a0:	095b      	lsrs	r3, r3, #5
 80082a2:	e006      	b.n	80082b2 <I2C_Slave_ISR_DMA+0xc6>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80082a4:	f7ff fc80 	bl	8007ba8 <I2C_ITSlaveCplt>
 80082a8:	e7b3      	b.n	8008212 <I2C_Slave_ISR_DMA+0x26>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	fab3 f383 	clz	r3, r3
 80082b0:	095b      	lsrs	r3, r3, #5
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d13f      	bne.n	8008336 <I2C_Slave_ISR_DMA+0x14a>
  uint32_t treatdmanack = 0U;
 80082b6:	2200      	movs	r2, #0
 80082b8:	e000      	b.n	80082bc <I2C_Slave_ISR_DMA+0xd0>
 80082ba:	2200      	movs	r2, #0
      if (hi2c->hdmatx != NULL)
 80082bc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d040      	beq.n	8008344 <I2C_Slave_ISR_DMA+0x158>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80082c2:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 80082c6:	d03d      	beq.n	8008344 <I2C_Slave_ISR_DMA+0x158>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	484d      	ldr	r0, [pc, #308]	@ (8008400 <I2C_Slave_ISR_DMA+0x214>)
 80082cc:	494d      	ldr	r1, [pc, #308]	@ (8008404 <I2C_Slave_ISR_DMA+0x218>)
 80082ce:	428b      	cmp	r3, r1
 80082d0:	bf18      	it	ne
 80082d2:	4283      	cmpne	r3, r0
 80082d4:	d031      	beq.n	800833a <I2C_Slave_ISR_DMA+0x14e>
 80082d6:	3118      	adds	r1, #24
 80082d8:	428b      	cmp	r3, r1
 80082da:	d02e      	beq.n	800833a <I2C_Slave_ISR_DMA+0x14e>
 80082dc:	3118      	adds	r1, #24
 80082de:	428b      	cmp	r3, r1
 80082e0:	d02b      	beq.n	800833a <I2C_Slave_ISR_DMA+0x14e>
 80082e2:	3118      	adds	r1, #24
 80082e4:	428b      	cmp	r3, r1
 80082e6:	d028      	beq.n	800833a <I2C_Slave_ISR_DMA+0x14e>
 80082e8:	3118      	adds	r1, #24
 80082ea:	428b      	cmp	r3, r1
 80082ec:	d025      	beq.n	800833a <I2C_Slave_ISR_DMA+0x14e>
 80082ee:	3118      	adds	r1, #24
 80082f0:	428b      	cmp	r3, r1
 80082f2:	d022      	beq.n	800833a <I2C_Slave_ISR_DMA+0x14e>
 80082f4:	3118      	adds	r1, #24
 80082f6:	428b      	cmp	r3, r1
 80082f8:	d01f      	beq.n	800833a <I2C_Slave_ISR_DMA+0x14e>
 80082fa:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80082fe:	428b      	cmp	r3, r1
 8008300:	d01b      	beq.n	800833a <I2C_Slave_ISR_DMA+0x14e>
 8008302:	3118      	adds	r1, #24
 8008304:	428b      	cmp	r3, r1
 8008306:	d018      	beq.n	800833a <I2C_Slave_ISR_DMA+0x14e>
 8008308:	3118      	adds	r1, #24
 800830a:	428b      	cmp	r3, r1
 800830c:	d015      	beq.n	800833a <I2C_Slave_ISR_DMA+0x14e>
 800830e:	3118      	adds	r1, #24
 8008310:	428b      	cmp	r3, r1
 8008312:	d012      	beq.n	800833a <I2C_Slave_ISR_DMA+0x14e>
 8008314:	3118      	adds	r1, #24
 8008316:	428b      	cmp	r3, r1
 8008318:	d00f      	beq.n	800833a <I2C_Slave_ISR_DMA+0x14e>
 800831a:	3118      	adds	r1, #24
 800831c:	428b      	cmp	r3, r1
 800831e:	d00c      	beq.n	800833a <I2C_Slave_ISR_DMA+0x14e>
 8008320:	3118      	adds	r1, #24
 8008322:	428b      	cmp	r3, r1
 8008324:	d009      	beq.n	800833a <I2C_Slave_ISR_DMA+0x14e>
 8008326:	3118      	adds	r1, #24
 8008328:	428b      	cmp	r3, r1
 800832a:	d006      	beq.n	800833a <I2C_Slave_ISR_DMA+0x14e>
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	fab3 f383 	clz	r3, r3
 8008332:	095b      	lsrs	r3, r3, #5
 8008334:	e005      	b.n	8008342 <I2C_Slave_ISR_DMA+0x156>
            treatdmanack = 1U;
 8008336:	2201      	movs	r2, #1
 8008338:	e7c0      	b.n	80082bc <I2C_Slave_ISR_DMA+0xd0>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	fab3 f383 	clz	r3, r3
 8008340:	095b      	lsrs	r3, r3, #5
 8008342:	b9d3      	cbnz	r3, 800837a <I2C_Slave_ISR_DMA+0x18e>
      if (treatdmanack == 1U)
 8008344:	2a01      	cmp	r2, #1
 8008346:	d018      	beq.n	800837a <I2C_Slave_ISR_DMA+0x18e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	2210      	movs	r2, #16
 800834c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800834e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008350:	f043 0304 	orr.w	r3, r3, #4
 8008354:	6463      	str	r3, [r4, #68]	@ 0x44
        tmpstate = hi2c->State;
 8008356:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800835a:	b2db      	uxtb	r3, r3
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800835c:	f1b7 7f80 	cmp.w	r7, #16777216	@ 0x1000000
 8008360:	bf18      	it	ne
 8008362:	2f00      	cmpne	r7, #0
 8008364:	d140      	bne.n	80083e8 <I2C_Slave_ISR_DMA+0x1fc>
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008366:	3b21      	subs	r3, #33	@ 0x21
 8008368:	2b09      	cmp	r3, #9
 800836a:	d82b      	bhi.n	80083c4 <I2C_Slave_ISR_DMA+0x1d8>
 800836c:	e8df f003 	tbb	[pc, r3]
 8008370:	2a2a2f28 	.word	0x2a2a2f28
 8008374:	2a2a2a2a 	.word	0x2a2a2a2a
 8008378:	2f28      	.short	0x2f28
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800837a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b28      	cmp	r3, #40	@ 0x28
 8008382:	d008      	beq.n	8008396 <I2C_Slave_ISR_DMA+0x1aa>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008384:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b29      	cmp	r3, #41	@ 0x29
 800838c:	d00b      	beq.n	80083a6 <I2C_Slave_ISR_DMA+0x1ba>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	2210      	movs	r2, #16
 8008392:	61da      	str	r2, [r3, #28]
 8008394:	e028      	b.n	80083e8 <I2C_Slave_ISR_DMA+0x1fc>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008396:	f1b7 7f00 	cmp.w	r7, #33554432	@ 0x2000000
 800839a:	d1f3      	bne.n	8008384 <I2C_Slave_ISR_DMA+0x198>
          I2C_ITListenCplt(hi2c, ITFlags);
 800839c:	4629      	mov	r1, r5
 800839e:	4620      	mov	r0, r4
 80083a0:	f7ff fb30 	bl	8007a04 <I2C_ITListenCplt>
 80083a4:	e020      	b.n	80083e8 <I2C_Slave_ISR_DMA+0x1fc>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80083a6:	f517 3f80 	cmn.w	r7, #65536	@ 0x10000
 80083aa:	d0f0      	beq.n	800838e <I2C_Slave_ISR_DMA+0x1a2>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	2210      	movs	r2, #16
 80083b0:	61da      	str	r2, [r3, #28]
          I2C_Flush_TXDR(hi2c);
 80083b2:	4620      	mov	r0, r4
 80083b4:	f7fe fb86 	bl	8006ac4 <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 80083b8:	4620      	mov	r0, r4
 80083ba:	f7ff fa8f 	bl	80078dc <I2C_ITSlaveSeqCplt>
 80083be:	e013      	b.n	80083e8 <I2C_Slave_ISR_DMA+0x1fc>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80083c0:	2321      	movs	r3, #33	@ 0x21
 80083c2:	6323      	str	r3, [r4, #48]	@ 0x30
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80083c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80083c6:	4620      	mov	r0, r4
 80083c8:	f7ff fb6a 	bl	8007aa0 <I2C_ITError>
 80083cc:	e00c      	b.n	80083e8 <I2C_Slave_ISR_DMA+0x1fc>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80083ce:	2322      	movs	r3, #34	@ 0x22
 80083d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80083d2:	e7f7      	b.n	80083c4 <I2C_Slave_ISR_DMA+0x1d8>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	2210      	movs	r2, #16
 80083d8:	61da      	str	r2, [r3, #28]
 80083da:	e005      	b.n	80083e8 <I2C_Slave_ISR_DMA+0x1fc>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80083dc:	f015 0f08 	tst.w	r5, #8
 80083e0:	d002      	beq.n	80083e8 <I2C_Slave_ISR_DMA+0x1fc>
 80083e2:	f016 0f08 	tst.w	r6, #8
 80083e6:	d103      	bne.n	80083f0 <I2C_Slave_ISR_DMA+0x204>
  __HAL_UNLOCK(hi2c);
 80083e8:	2000      	movs	r0, #0
 80083ea:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 80083ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITAddrCplt(hi2c, ITFlags);
 80083f0:	4629      	mov	r1, r5
 80083f2:	4620      	mov	r0, r4
 80083f4:	f7ff fab4 	bl	8007960 <I2C_ITAddrCplt>
 80083f8:	e7f6      	b.n	80083e8 <I2C_Slave_ISR_DMA+0x1fc>
  __HAL_LOCK(hi2c);
 80083fa:	2002      	movs	r0, #2
 80083fc:	e7f7      	b.n	80083ee <I2C_Slave_ISR_DMA+0x202>
 80083fe:	bf00      	nop
 8008400:	40020010 	.word	0x40020010
 8008404:	40020028 	.word	0x40020028

08008408 <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 8008408:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800840c:	2b01      	cmp	r3, #1
 800840e:	f000 809a 	beq.w	8008546 <I2C_Master_ISR_DMA+0x13e>
{
 8008412:	b510      	push	{r4, lr}
 8008414:	b082      	sub	sp, #8
 8008416:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8008418:	2301      	movs	r3, #1
 800841a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800841e:	f011 0f10 	tst.w	r1, #16
 8008422:	d002      	beq.n	800842a <I2C_Master_ISR_DMA+0x22>
 8008424:	f012 0f10 	tst.w	r2, #16
 8008428:	d132      	bne.n	8008490 <I2C_Master_ISR_DMA+0x88>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800842a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800842e:	d060      	beq.n	80084f2 <I2C_Master_ISR_DMA+0xea>
 8008430:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8008434:	d05d      	beq.n	80084f2 <I2C_Master_ISR_DMA+0xea>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008436:	6822      	ldr	r2, [r4, #0]
 8008438:	6813      	ldr	r3, [r2, #0]
 800843a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800843e:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
 8008440:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008442:	b29b      	uxth	r3, r3
 8008444:	2b00      	cmp	r3, #0
 8008446:	d046      	beq.n	80084d6 <I2C_Master_ISR_DMA+0xce>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008448:	6823      	ldr	r3, [r4, #0]
 800844a:	6859      	ldr	r1, [r3, #4]
 800844c:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008450:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008452:	b29b      	uxth	r3, r3
 8008454:	2bff      	cmp	r3, #255	@ 0xff
 8008456:	d92d      	bls.n	80084b4 <I2C_Master_ISR_DMA+0xac>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008458:	23ff      	movs	r3, #255	@ 0xff
 800845a:	8523      	strh	r3, [r4, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800845c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008460:	2200      	movs	r2, #0
 8008462:	9200      	str	r2, [sp, #0]
 8008464:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8008468:	4620      	mov	r0, r4
 800846a:	f7fe fb3c 	bl	8006ae6 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 800846e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008470:	b29b      	uxth	r3, r3
 8008472:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8008474:	1a9b      	subs	r3, r3, r2
 8008476:	b29b      	uxth	r3, r3
 8008478:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800847a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b22      	cmp	r3, #34	@ 0x22
 8008482:	d022      	beq.n	80084ca <I2C_Master_ISR_DMA+0xc2>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008484:	6822      	ldr	r2, [r4, #0]
 8008486:	6813      	ldr	r3, [r2, #0]
 8008488:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800848c:	6013      	str	r3, [r2, #0]
 800848e:	e00c      	b.n	80084aa <I2C_Master_ISR_DMA+0xa2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008490:	6803      	ldr	r3, [r0, #0]
 8008492:	2210      	movs	r2, #16
 8008494:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008496:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8008498:	f043 0304 	orr.w	r3, r3, #4
 800849c:	6443      	str	r3, [r0, #68]	@ 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800849e:	2120      	movs	r1, #32
 80084a0:	f7fe fb40 	bl	8006b24 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 80084a4:	4620      	mov	r0, r4
 80084a6:	f7fe fb0d 	bl	8006ac4 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 80084aa:	2000      	movs	r0, #0
 80084ac:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 80084b0:	b002      	add	sp, #8
 80084b2:	bd10      	pop	{r4, pc}
        hi2c->XferSize = hi2c->XferCount;
 80084b4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80084b6:	8523      	strh	r3, [r4, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80084b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80084ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80084be:	d001      	beq.n	80084c4 <I2C_Master_ISR_DMA+0xbc>
          xfermode = hi2c->XferOptions;
 80084c0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80084c2:	e7cd      	b.n	8008460 <I2C_Master_ISR_DMA+0x58>
          xfermode = I2C_AUTOEND_MODE;
 80084c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80084c8:	e7ca      	b.n	8008460 <I2C_Master_ISR_DMA+0x58>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80084ca:	6822      	ldr	r2, [r4, #0]
 80084cc:	6813      	ldr	r3, [r2, #0]
 80084ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	e7e9      	b.n	80084aa <I2C_Master_ISR_DMA+0xa2>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80084de:	d103      	bne.n	80084e8 <I2C_Master_ISR_DMA+0xe0>
        I2C_ITMasterSeqCplt(hi2c);
 80084e0:	4620      	mov	r0, r4
 80084e2:	f7ff f9cf 	bl	8007884 <I2C_ITMasterSeqCplt>
 80084e6:	e7e0      	b.n	80084aa <I2C_Master_ISR_DMA+0xa2>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80084e8:	2140      	movs	r1, #64	@ 0x40
 80084ea:	4620      	mov	r0, r4
 80084ec:	f7ff fad8 	bl	8007aa0 <I2C_ITError>
 80084f0:	e7db      	b.n	80084aa <I2C_Master_ISR_DMA+0xa2>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80084f2:	f011 0f40 	tst.w	r1, #64	@ 0x40
 80084f6:	d01c      	beq.n	8008532 <I2C_Master_ISR_DMA+0x12a>
 80084f8:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80084fc:	d019      	beq.n	8008532 <I2C_Master_ISR_DMA+0x12a>
    if (hi2c->XferCount == 0U)
 80084fe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008500:	b29b      	uxth	r3, r3
 8008502:	b98b      	cbnz	r3, 8008528 <I2C_Master_ISR_DMA+0x120>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	685a      	ldr	r2, [r3, #4]
 8008508:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800850c:	d1cd      	bne.n	80084aa <I2C_Master_ISR_DMA+0xa2>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800850e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008510:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8008514:	d104      	bne.n	8008520 <I2C_Master_ISR_DMA+0x118>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008516:	685a      	ldr	r2, [r3, #4]
 8008518:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800851c:	605a      	str	r2, [r3, #4]
 800851e:	e7c4      	b.n	80084aa <I2C_Master_ISR_DMA+0xa2>
          I2C_ITMasterSeqCplt(hi2c);
 8008520:	4620      	mov	r0, r4
 8008522:	f7ff f9af 	bl	8007884 <I2C_ITMasterSeqCplt>
 8008526:	e7c0      	b.n	80084aa <I2C_Master_ISR_DMA+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008528:	2140      	movs	r1, #64	@ 0x40
 800852a:	4620      	mov	r0, r4
 800852c:	f7ff fab8 	bl	8007aa0 <I2C_ITError>
 8008530:	e7bb      	b.n	80084aa <I2C_Master_ISR_DMA+0xa2>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008532:	f011 0f20 	tst.w	r1, #32
 8008536:	d0b8      	beq.n	80084aa <I2C_Master_ISR_DMA+0xa2>
 8008538:	f012 0f20 	tst.w	r2, #32
 800853c:	d0b5      	beq.n	80084aa <I2C_Master_ISR_DMA+0xa2>
    I2C_ITMasterCplt(hi2c, ITFlags);
 800853e:	4620      	mov	r0, r4
 8008540:	f7ff fcfc 	bl	8007f3c <I2C_ITMasterCplt>
 8008544:	e7b1      	b.n	80084aa <I2C_Master_ISR_DMA+0xa2>
  __HAL_LOCK(hi2c);
 8008546:	2002      	movs	r0, #2
}
 8008548:	4770      	bx	lr
	...

0800854c <I2C_DMAError>:
{
 800854c:	b538      	push	{r3, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800854e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if (hi2c->hdmatx != NULL)
 8008550:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008552:	2b00      	cmp	r3, #0
 8008554:	d077      	beq.n	8008646 <I2C_DMAError+0xfa>
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4948      	ldr	r1, [pc, #288]	@ (800867c <I2C_DMAError+0x130>)
 800855a:	4a49      	ldr	r2, [pc, #292]	@ (8008680 <I2C_DMAError+0x134>)
 800855c:	4293      	cmp	r3, r2
 800855e:	bf18      	it	ne
 8008560:	428b      	cmpne	r3, r1
 8008562:	d02f      	beq.n	80085c4 <I2C_DMAError+0x78>
 8008564:	3218      	adds	r2, #24
 8008566:	4293      	cmp	r3, r2
 8008568:	d02c      	beq.n	80085c4 <I2C_DMAError+0x78>
 800856a:	3218      	adds	r2, #24
 800856c:	4293      	cmp	r3, r2
 800856e:	d029      	beq.n	80085c4 <I2C_DMAError+0x78>
 8008570:	3218      	adds	r2, #24
 8008572:	4293      	cmp	r3, r2
 8008574:	d026      	beq.n	80085c4 <I2C_DMAError+0x78>
 8008576:	3218      	adds	r2, #24
 8008578:	4293      	cmp	r3, r2
 800857a:	d023      	beq.n	80085c4 <I2C_DMAError+0x78>
 800857c:	3218      	adds	r2, #24
 800857e:	4293      	cmp	r3, r2
 8008580:	d020      	beq.n	80085c4 <I2C_DMAError+0x78>
 8008582:	3218      	adds	r2, #24
 8008584:	4293      	cmp	r3, r2
 8008586:	d01d      	beq.n	80085c4 <I2C_DMAError+0x78>
 8008588:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800858c:	4293      	cmp	r3, r2
 800858e:	d019      	beq.n	80085c4 <I2C_DMAError+0x78>
 8008590:	3218      	adds	r2, #24
 8008592:	4293      	cmp	r3, r2
 8008594:	d016      	beq.n	80085c4 <I2C_DMAError+0x78>
 8008596:	3218      	adds	r2, #24
 8008598:	4293      	cmp	r3, r2
 800859a:	d013      	beq.n	80085c4 <I2C_DMAError+0x78>
 800859c:	3218      	adds	r2, #24
 800859e:	4293      	cmp	r3, r2
 80085a0:	d010      	beq.n	80085c4 <I2C_DMAError+0x78>
 80085a2:	3218      	adds	r2, #24
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d00d      	beq.n	80085c4 <I2C_DMAError+0x78>
 80085a8:	3218      	adds	r2, #24
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d00a      	beq.n	80085c4 <I2C_DMAError+0x78>
 80085ae:	3218      	adds	r2, #24
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d007      	beq.n	80085c4 <I2C_DMAError+0x78>
 80085b4:	3218      	adds	r2, #24
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d004      	beq.n	80085c4 <I2C_DMAError+0x78>
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	fab3 f383 	clz	r3, r3
 80085c0:	095b      	lsrs	r3, r3, #5
 80085c2:	e003      	b.n	80085cc <I2C_DMAError+0x80>
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	fab3 f383 	clz	r3, r3
 80085ca:	095b      	lsrs	r3, r3, #5
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d13c      	bne.n	800864a <I2C_DMAError+0xfe>
  uint32_t treatdmaerror = 0U;
 80085d0:	2500      	movs	r5, #0
  if (hi2c->hdmarx != NULL)
 80085d2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d040      	beq.n	800865a <I2C_DMAError+0x10e>
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4928      	ldr	r1, [pc, #160]	@ (800867c <I2C_DMAError+0x130>)
 80085dc:	4a28      	ldr	r2, [pc, #160]	@ (8008680 <I2C_DMAError+0x134>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	bf18      	it	ne
 80085e2:	428b      	cmpne	r3, r1
 80085e4:	d033      	beq.n	800864e <I2C_DMAError+0x102>
 80085e6:	3218      	adds	r2, #24
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d030      	beq.n	800864e <I2C_DMAError+0x102>
 80085ec:	3218      	adds	r2, #24
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d02d      	beq.n	800864e <I2C_DMAError+0x102>
 80085f2:	3218      	adds	r2, #24
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d02a      	beq.n	800864e <I2C_DMAError+0x102>
 80085f8:	3218      	adds	r2, #24
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d027      	beq.n	800864e <I2C_DMAError+0x102>
 80085fe:	3218      	adds	r2, #24
 8008600:	4293      	cmp	r3, r2
 8008602:	d024      	beq.n	800864e <I2C_DMAError+0x102>
 8008604:	3218      	adds	r2, #24
 8008606:	4293      	cmp	r3, r2
 8008608:	d021      	beq.n	800864e <I2C_DMAError+0x102>
 800860a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800860e:	4293      	cmp	r3, r2
 8008610:	d01d      	beq.n	800864e <I2C_DMAError+0x102>
 8008612:	3218      	adds	r2, #24
 8008614:	4293      	cmp	r3, r2
 8008616:	d01a      	beq.n	800864e <I2C_DMAError+0x102>
 8008618:	3218      	adds	r2, #24
 800861a:	4293      	cmp	r3, r2
 800861c:	d017      	beq.n	800864e <I2C_DMAError+0x102>
 800861e:	3218      	adds	r2, #24
 8008620:	4293      	cmp	r3, r2
 8008622:	d014      	beq.n	800864e <I2C_DMAError+0x102>
 8008624:	3218      	adds	r2, #24
 8008626:	4293      	cmp	r3, r2
 8008628:	d011      	beq.n	800864e <I2C_DMAError+0x102>
 800862a:	3218      	adds	r2, #24
 800862c:	4293      	cmp	r3, r2
 800862e:	d00e      	beq.n	800864e <I2C_DMAError+0x102>
 8008630:	3218      	adds	r2, #24
 8008632:	4293      	cmp	r3, r2
 8008634:	d00b      	beq.n	800864e <I2C_DMAError+0x102>
 8008636:	3218      	adds	r2, #24
 8008638:	4293      	cmp	r3, r2
 800863a:	d008      	beq.n	800864e <I2C_DMAError+0x102>
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	fab3 f383 	clz	r3, r3
 8008642:	095b      	lsrs	r3, r3, #5
 8008644:	e007      	b.n	8008656 <I2C_DMAError+0x10a>
  uint32_t treatdmaerror = 0U;
 8008646:	2500      	movs	r5, #0
 8008648:	e7c3      	b.n	80085d2 <I2C_DMAError+0x86>
      treatdmaerror = 1U;
 800864a:	2501      	movs	r5, #1
 800864c:	e7c1      	b.n	80085d2 <I2C_DMAError+0x86>
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	fab3 f383 	clz	r3, r3
 8008654:	095b      	lsrs	r3, r3, #5
 8008656:	b103      	cbz	r3, 800865a <I2C_DMAError+0x10e>
      treatdmaerror = 1U;
 8008658:	2501      	movs	r5, #1
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800865a:	f7fd fb48 	bl	8005cee <HAL_DMA_GetError>
 800865e:	2802      	cmp	r0, #2
 8008660:	d000      	beq.n	8008664 <I2C_DMAError+0x118>
 8008662:	b905      	cbnz	r5, 8008666 <I2C_DMAError+0x11a>
}
 8008664:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008666:	6822      	ldr	r2, [r4, #0]
 8008668:	6853      	ldr	r3, [r2, #4]
 800866a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800866e:	6053      	str	r3, [r2, #4]
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008670:	2110      	movs	r1, #16
 8008672:	4620      	mov	r0, r4
 8008674:	f7ff fa14 	bl	8007aa0 <I2C_ITError>
}
 8008678:	e7f4      	b.n	8008664 <I2C_DMAError+0x118>
 800867a:	bf00      	nop
 800867c:	40020010 	.word	0x40020010
 8008680:	40020028 	.word	0x40020028

08008684 <I2C_DMAMasterTransmitCplt>:
{
 8008684:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008686:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008688:	6822      	ldr	r2, [r4, #0]
 800868a:	6813      	ldr	r3, [r2, #0]
 800868c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008690:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 8008692:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008694:	b29b      	uxth	r3, r3
 8008696:	b1ab      	cbz	r3, 80086c4 <I2C_DMAMasterTransmitCplt+0x40>
    hi2c->pBuffPtr += hi2c->XferSize;
 8008698:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800869a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800869c:	4419      	add	r1, r3
 800869e:	6261      	str	r1, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086a0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	2bff      	cmp	r3, #255	@ 0xff
 80086a6:	d912      	bls.n	80086ce <I2C_DMAMasterTransmitCplt+0x4a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80086a8:	23ff      	movs	r3, #255	@ 0xff
 80086aa:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80086ac:	6822      	ldr	r2, [r4, #0]
 80086ae:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80086b0:	3228      	adds	r2, #40	@ 0x28
 80086b2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80086b4:	f7fc fb58 	bl	8004d68 <HAL_DMA_Start_IT>
 80086b8:	b160      	cbz	r0, 80086d4 <I2C_DMAMasterTransmitCplt+0x50>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80086ba:	2110      	movs	r1, #16
 80086bc:	4620      	mov	r0, r4
 80086be:	f7ff f9ef 	bl	8007aa0 <I2C_ITError>
}
 80086c2:	bd10      	pop	{r4, pc}
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80086c4:	2120      	movs	r1, #32
 80086c6:	4620      	mov	r0, r4
 80086c8:	f7fe fa2c 	bl	8006b24 <I2C_Enable_IRQ>
 80086cc:	e7f9      	b.n	80086c2 <I2C_DMAMasterTransmitCplt+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 80086ce:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80086d0:	8523      	strh	r3, [r4, #40]	@ 0x28
 80086d2:	e7eb      	b.n	80086ac <I2C_DMAMasterTransmitCplt+0x28>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80086d4:	2140      	movs	r1, #64	@ 0x40
 80086d6:	4620      	mov	r0, r4
 80086d8:	f7fe fa24 	bl	8006b24 <I2C_Enable_IRQ>
}
 80086dc:	e7f1      	b.n	80086c2 <I2C_DMAMasterTransmitCplt+0x3e>

080086de <I2C_DMAMasterReceiveCplt>:
{
 80086de:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80086e0:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80086e2:	6822      	ldr	r2, [r4, #0]
 80086e4:	6813      	ldr	r3, [r2, #0]
 80086e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80086ea:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 80086ec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	b1ab      	cbz	r3, 800871e <I2C_DMAMasterReceiveCplt+0x40>
    hi2c->pBuffPtr += hi2c->XferSize;
 80086f2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80086f4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80086f6:	441a      	add	r2, r3
 80086f8:	6262      	str	r2, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086fa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	2bff      	cmp	r3, #255	@ 0xff
 8008700:	d912      	bls.n	8008728 <I2C_DMAMasterReceiveCplt+0x4a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008702:	23ff      	movs	r3, #255	@ 0xff
 8008704:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8008706:	6821      	ldr	r1, [r4, #0]
 8008708:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800870a:	3124      	adds	r1, #36	@ 0x24
 800870c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800870e:	f7fc fb2b 	bl	8004d68 <HAL_DMA_Start_IT>
 8008712:	b160      	cbz	r0, 800872e <I2C_DMAMasterReceiveCplt+0x50>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008714:	2110      	movs	r1, #16
 8008716:	4620      	mov	r0, r4
 8008718:	f7ff f9c2 	bl	8007aa0 <I2C_ITError>
}
 800871c:	bd10      	pop	{r4, pc}
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800871e:	2120      	movs	r1, #32
 8008720:	4620      	mov	r0, r4
 8008722:	f7fe f9ff 	bl	8006b24 <I2C_Enable_IRQ>
 8008726:	e7f9      	b.n	800871c <I2C_DMAMasterReceiveCplt+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8008728:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800872a:	8523      	strh	r3, [r4, #40]	@ 0x28
 800872c:	e7eb      	b.n	8008706 <I2C_DMAMasterReceiveCplt+0x28>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800872e:	2140      	movs	r1, #64	@ 0x40
 8008730:	4620      	mov	r0, r4
 8008732:	f7fe f9f7 	bl	8006b24 <I2C_Enable_IRQ>
}
 8008736:	e7f1      	b.n	800871c <I2C_DMAMasterReceiveCplt+0x3e>

08008738 <I2C_DMAAbort>:
{
 8008738:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800873a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hi2c->hdmatx != NULL)
 800873c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800873e:	b10b      	cbz	r3, 8008744 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008740:	2200      	movs	r2, #0
 8008742:	651a      	str	r2, [r3, #80]	@ 0x50
  if (hi2c->hdmarx != NULL)
 8008744:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8008746:	b10b      	cbz	r3, 800874c <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008748:	2200      	movs	r2, #0
 800874a:	651a      	str	r2, [r3, #80]	@ 0x50
  I2C_TreatErrorCallback(hi2c);
 800874c:	f7ff f991 	bl	8007a72 <I2C_TreatErrorCallback>
}
 8008750:	bd08      	pop	{r3, pc}

08008752 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008752:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008754:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8008758:	b2d2      	uxtb	r2, r2
 800875a:	2a20      	cmp	r2, #32
 800875c:	d123      	bne.n	80087a6 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800875e:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8008762:	2a01      	cmp	r2, #1
 8008764:	d021      	beq.n	80087aa <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8008766:	2201      	movs	r2, #1
 8008768:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800876c:	2224      	movs	r2, #36	@ 0x24
 800876e:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008772:	6800      	ldr	r0, [r0, #0]
 8008774:	6802      	ldr	r2, [r0, #0]
 8008776:	f022 0201 	bic.w	r2, r2, #1
 800877a:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800877c:	6818      	ldr	r0, [r3, #0]
 800877e:	6802      	ldr	r2, [r0, #0]
 8008780:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008784:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008786:	6818      	ldr	r0, [r3, #0]
 8008788:	6802      	ldr	r2, [r0, #0]
 800878a:	4311      	orrs	r1, r2
 800878c:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800878e:	6819      	ldr	r1, [r3, #0]
 8008790:	680a      	ldr	r2, [r1, #0]
 8008792:	f042 0201 	orr.w	r2, r2, #1
 8008796:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008798:	2220      	movs	r2, #32
 800879a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800879e:	2000      	movs	r0, #0
 80087a0:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 80087a4:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80087a6:	2002      	movs	r0, #2
 80087a8:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80087aa:	2002      	movs	r0, #2
  }
}
 80087ac:	4770      	bx	lr

080087ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80087ae:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087b0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 80087b4:	b2d2      	uxtb	r2, r2
 80087b6:	2a20      	cmp	r2, #32
 80087b8:	d121      	bne.n	80087fe <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087ba:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80087be:	2a01      	cmp	r2, #1
 80087c0:	d01f      	beq.n	8008802 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80087c2:	2201      	movs	r2, #1
 80087c4:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80087c8:	2224      	movs	r2, #36	@ 0x24
 80087ca:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80087ce:	6800      	ldr	r0, [r0, #0]
 80087d0:	6802      	ldr	r2, [r0, #0]
 80087d2:	f022 0201 	bic.w	r2, r2, #1
 80087d6:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80087d8:	6818      	ldr	r0, [r3, #0]
 80087da:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80087dc:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80087e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80087e4:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80087e6:	6819      	ldr	r1, [r3, #0]
 80087e8:	680a      	ldr	r2, [r1, #0]
 80087ea:	f042 0201 	orr.w	r2, r2, #1
 80087ee:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80087f0:	2220      	movs	r2, #32
 80087f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087f6:	2000      	movs	r0, #0
 80087f8:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 80087fc:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80087fe:	2002      	movs	r0, #2
 8008800:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8008802:	2002      	movs	r0, #2
  }
}
 8008804:	4770      	bx	lr
	...

08008808 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008808:	4b13      	ldr	r3, [pc, #76]	@ (8008858 <HAL_PWREx_ConfigSupply+0x50>)
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	f013 0f04 	tst.w	r3, #4
 8008810:	d107      	bne.n	8008822 <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008812:	4b11      	ldr	r3, [pc, #68]	@ (8008858 <HAL_PWREx_ConfigSupply+0x50>)
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	f003 0307 	and.w	r3, r3, #7
 800881a:	4283      	cmp	r3, r0
 800881c:	d01a      	beq.n	8008854 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800881e:	2001      	movs	r0, #1
 8008820:	4770      	bx	lr
{
 8008822:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008824:	4a0c      	ldr	r2, [pc, #48]	@ (8008858 <HAL_PWREx_ConfigSupply+0x50>)
 8008826:	68d3      	ldr	r3, [r2, #12]
 8008828:	f023 0307 	bic.w	r3, r3, #7
 800882c:	4303      	orrs	r3, r0
 800882e:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008830:	f7fa fe6a 	bl	8003508 <HAL_GetTick>
 8008834:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008836:	4b08      	ldr	r3, [pc, #32]	@ (8008858 <HAL_PWREx_ConfigSupply+0x50>)
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800883e:	d107      	bne.n	8008850 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008840:	f7fa fe62 	bl	8003508 <HAL_GetTick>
 8008844:	1b00      	subs	r0, r0, r4
 8008846:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800884a:	d9f4      	bls.n	8008836 <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 800884c:	2001      	movs	r0, #1
 800884e:	e000      	b.n	8008852 <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008850:	2000      	movs	r0, #0
}
 8008852:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8008854:	2000      	movs	r0, #0
}
 8008856:	4770      	bx	lr
 8008858:	58024800 	.word	0x58024800

0800885c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800885c:	2800      	cmp	r0, #0
 800885e:	f000 8318 	beq.w	8008e92 <HAL_RCC_OscConfig+0x636>
{
 8008862:	b538      	push	{r3, r4, r5, lr}
 8008864:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008866:	6803      	ldr	r3, [r0, #0]
 8008868:	f013 0f01 	tst.w	r3, #1
 800886c:	d025      	beq.n	80088ba <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800886e:	4a94      	ldr	r2, [pc, #592]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 8008870:	6913      	ldr	r3, [r2, #16]
 8008872:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008876:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008878:	2b10      	cmp	r3, #16
 800887a:	d015      	beq.n	80088a8 <HAL_RCC_OscConfig+0x4c>
 800887c:	2b18      	cmp	r3, #24
 800887e:	d00f      	beq.n	80088a0 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008880:	6863      	ldr	r3, [r4, #4]
 8008882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008886:	d03f      	beq.n	8008908 <HAL_RCC_OscConfig+0xac>
 8008888:	2b00      	cmp	r3, #0
 800888a:	d153      	bne.n	8008934 <HAL_RCC_OscConfig+0xd8>
 800888c:	4b8c      	ldr	r3, [pc, #560]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008894:	601a      	str	r2, [r3, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	e038      	b.n	8008912 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80088a0:	f002 0203 	and.w	r2, r2, #3
 80088a4:	2a02      	cmp	r2, #2
 80088a6:	d1eb      	bne.n	8008880 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088a8:	4b85      	ldr	r3, [pc, #532]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80088b0:	d003      	beq.n	80088ba <HAL_RCC_OscConfig+0x5e>
 80088b2:	6863      	ldr	r3, [r4, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 82ee 	beq.w	8008e96 <HAL_RCC_OscConfig+0x63a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	f013 0f02 	tst.w	r3, #2
 80088c0:	f000 80a1 	beq.w	8008a06 <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088c4:	4a7e      	ldr	r2, [pc, #504]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 80088c6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80088c8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80088ca:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 80088ce:	d05a      	beq.n	8008986 <HAL_RCC_OscConfig+0x12a>
 80088d0:	2b18      	cmp	r3, #24
 80088d2:	d055      	beq.n	8008980 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80088d4:	68e3      	ldr	r3, [r4, #12]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f000 80de 	beq.w	8008a98 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80088dc:	4978      	ldr	r1, [pc, #480]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 80088de:	680a      	ldr	r2, [r1, #0]
 80088e0:	f022 0219 	bic.w	r2, r2, #25
 80088e4:	4313      	orrs	r3, r2
 80088e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088e8:	f7fa fe0e 	bl	8003508 <HAL_GetTick>
 80088ec:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088ee:	4b74      	ldr	r3, [pc, #464]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f013 0f04 	tst.w	r3, #4
 80088f6:	f040 80ad 	bne.w	8008a54 <HAL_RCC_OscConfig+0x1f8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088fa:	f7fa fe05 	bl	8003508 <HAL_GetTick>
 80088fe:	1b40      	subs	r0, r0, r5
 8008900:	2802      	cmp	r0, #2
 8008902:	d9f4      	bls.n	80088ee <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8008904:	2003      	movs	r0, #3
 8008906:	e2cd      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008908:	4a6d      	ldr	r2, [pc, #436]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 800890a:	6813      	ldr	r3, [r2, #0]
 800890c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008910:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008912:	6863      	ldr	r3, [r4, #4]
 8008914:	b32b      	cbz	r3, 8008962 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8008916:	f7fa fdf7 	bl	8003508 <HAL_GetTick>
 800891a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800891c:	4b68      	ldr	r3, [pc, #416]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8008924:	d1c9      	bne.n	80088ba <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008926:	f7fa fdef 	bl	8003508 <HAL_GetTick>
 800892a:	1b40      	subs	r0, r0, r5
 800892c:	2864      	cmp	r0, #100	@ 0x64
 800892e:	d9f5      	bls.n	800891c <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8008930:	2003      	movs	r0, #3
 8008932:	e2b7      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008938:	d009      	beq.n	800894e <HAL_RCC_OscConfig+0xf2>
 800893a:	4b61      	ldr	r3, [pc, #388]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008942:	601a      	str	r2, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	e7e1      	b.n	8008912 <HAL_RCC_OscConfig+0xb6>
 800894e:	4b5c      	ldr	r3, [pc, #368]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800895e:	601a      	str	r2, [r3, #0]
 8008960:	e7d7      	b.n	8008912 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8008962:	f7fa fdd1 	bl	8003508 <HAL_GetTick>
 8008966:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008968:	4b55      	ldr	r3, [pc, #340]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8008970:	d0a3      	beq.n	80088ba <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008972:	f7fa fdc9 	bl	8003508 <HAL_GetTick>
 8008976:	1b40      	subs	r0, r0, r5
 8008978:	2864      	cmp	r0, #100	@ 0x64
 800897a:	d9f5      	bls.n	8008968 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 800897c:	2003      	movs	r0, #3
 800897e:	e291      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008980:	f012 0f03 	tst.w	r2, #3
 8008984:	d1a6      	bne.n	80088d4 <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008986:	4b4e      	ldr	r3, [pc, #312]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f013 0f04 	tst.w	r3, #4
 800898e:	d003      	beq.n	8008998 <HAL_RCC_OscConfig+0x13c>
 8008990:	68e3      	ldr	r3, [r4, #12]
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 8281 	beq.w	8008e9a <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008998:	4a49      	ldr	r2, [pc, #292]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 800899a:	6813      	ldr	r3, [r2, #0]
 800899c:	f023 0319 	bic.w	r3, r3, #25
 80089a0:	68e1      	ldr	r1, [r4, #12]
 80089a2:	430b      	orrs	r3, r1
 80089a4:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 80089a6:	f7fa fdaf 	bl	8003508 <HAL_GetTick>
 80089aa:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089ac:	4b44      	ldr	r3, [pc, #272]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f013 0f04 	tst.w	r3, #4
 80089b4:	d106      	bne.n	80089c4 <HAL_RCC_OscConfig+0x168>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089b6:	f7fa fda7 	bl	8003508 <HAL_GetTick>
 80089ba:	1b40      	subs	r0, r0, r5
 80089bc:	2802      	cmp	r0, #2
 80089be:	d9f5      	bls.n	80089ac <HAL_RCC_OscConfig+0x150>
              return HAL_TIMEOUT;
 80089c0:	2003      	movs	r0, #3
 80089c2:	e26f      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089c4:	f7fa fdba 	bl	800353c <HAL_GetREVID>
 80089c8:	f241 0303 	movw	r3, #4099	@ 0x1003
 80089cc:	4298      	cmp	r0, r3
 80089ce:	d812      	bhi.n	80089f6 <HAL_RCC_OscConfig+0x19a>
 80089d0:	6922      	ldr	r2, [r4, #16]
 80089d2:	2a40      	cmp	r2, #64	@ 0x40
 80089d4:	d007      	beq.n	80089e6 <HAL_RCC_OscConfig+0x18a>
 80089d6:	493a      	ldr	r1, [pc, #232]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 80089d8:	684b      	ldr	r3, [r1, #4]
 80089da:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80089de:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80089e2:	604b      	str	r3, [r1, #4]
 80089e4:	e00f      	b.n	8008a06 <HAL_RCC_OscConfig+0x1aa>
 80089e6:	4a36      	ldr	r2, [pc, #216]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 80089e8:	6853      	ldr	r3, [r2, #4]
 80089ea:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80089ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089f2:	6053      	str	r3, [r2, #4]
 80089f4:	e007      	b.n	8008a06 <HAL_RCC_OscConfig+0x1aa>
 80089f6:	4a32      	ldr	r2, [pc, #200]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 80089f8:	6853      	ldr	r3, [r2, #4]
 80089fa:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80089fe:	6921      	ldr	r1, [r4, #16]
 8008a00:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008a04:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	f013 0f10 	tst.w	r3, #16
 8008a0c:	f000 8088 	beq.w	8008b20 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a10:	4a2b      	ldr	r2, [pc, #172]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 8008a12:	6913      	ldr	r3, [r2, #16]
 8008a14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a18:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008a1a:	2b08      	cmp	r3, #8
 8008a1c:	d056      	beq.n	8008acc <HAL_RCC_OscConfig+0x270>
 8008a1e:	2b18      	cmp	r3, #24
 8008a20:	d050      	beq.n	8008ac4 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008a22:	69e3      	ldr	r3, [r4, #28]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f000 80b8 	beq.w	8008b9a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008a2a:	4a25      	ldr	r2, [pc, #148]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 8008a2c:	6813      	ldr	r3, [r2, #0]
 8008a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a34:	f7fa fd68 	bl	8003508 <HAL_GetTick>
 8008a38:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a3a:	4b21      	ldr	r3, [pc, #132]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8008a42:	f040 8088 	bne.w	8008b56 <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008a46:	f7fa fd5f 	bl	8003508 <HAL_GetTick>
 8008a4a:	1b40      	subs	r0, r0, r5
 8008a4c:	2802      	cmp	r0, #2
 8008a4e:	d9f4      	bls.n	8008a3a <HAL_RCC_OscConfig+0x1de>
          {
            return HAL_TIMEOUT;
 8008a50:	2003      	movs	r0, #3
 8008a52:	e227      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a54:	f7fa fd72 	bl	800353c <HAL_GetREVID>
 8008a58:	f241 0303 	movw	r3, #4099	@ 0x1003
 8008a5c:	4298      	cmp	r0, r3
 8008a5e:	d812      	bhi.n	8008a86 <HAL_RCC_OscConfig+0x22a>
 8008a60:	6922      	ldr	r2, [r4, #16]
 8008a62:	2a40      	cmp	r2, #64	@ 0x40
 8008a64:	d007      	beq.n	8008a76 <HAL_RCC_OscConfig+0x21a>
 8008a66:	4916      	ldr	r1, [pc, #88]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 8008a68:	684b      	ldr	r3, [r1, #4]
 8008a6a:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008a6e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008a72:	604b      	str	r3, [r1, #4]
 8008a74:	e7c7      	b.n	8008a06 <HAL_RCC_OscConfig+0x1aa>
 8008a76:	4a12      	ldr	r2, [pc, #72]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 8008a78:	6853      	ldr	r3, [r2, #4]
 8008a7a:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a82:	6053      	str	r3, [r2, #4]
 8008a84:	e7bf      	b.n	8008a06 <HAL_RCC_OscConfig+0x1aa>
 8008a86:	4a0e      	ldr	r2, [pc, #56]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 8008a88:	6853      	ldr	r3, [r2, #4]
 8008a8a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008a8e:	6921      	ldr	r1, [r4, #16]
 8008a90:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008a94:	6053      	str	r3, [r2, #4]
 8008a96:	e7b6      	b.n	8008a06 <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 8008a98:	4a09      	ldr	r2, [pc, #36]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 8008a9a:	6813      	ldr	r3, [r2, #0]
 8008a9c:	f023 0301 	bic.w	r3, r3, #1
 8008aa0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008aa2:	f7fa fd31 	bl	8003508 <HAL_GetTick>
 8008aa6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008aa8:	4b05      	ldr	r3, [pc, #20]	@ (8008ac0 <HAL_RCC_OscConfig+0x264>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f013 0f04 	tst.w	r3, #4
 8008ab0:	d0a9      	beq.n	8008a06 <HAL_RCC_OscConfig+0x1aa>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ab2:	f7fa fd29 	bl	8003508 <HAL_GetTick>
 8008ab6:	1b40      	subs	r0, r0, r5
 8008ab8:	2802      	cmp	r0, #2
 8008aba:	d9f5      	bls.n	8008aa8 <HAL_RCC_OscConfig+0x24c>
            return HAL_TIMEOUT;
 8008abc:	2003      	movs	r0, #3
 8008abe:	e1f1      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
 8008ac0:	58024400 	.word	0x58024400
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008ac4:	f002 0203 	and.w	r2, r2, #3
 8008ac8:	2a01      	cmp	r2, #1
 8008aca:	d1aa      	bne.n	8008a22 <HAL_RCC_OscConfig+0x1c6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008acc:	4ba1      	ldr	r3, [pc, #644]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8008ad4:	d003      	beq.n	8008ade <HAL_RCC_OscConfig+0x282>
 8008ad6:	69e3      	ldr	r3, [r4, #28]
 8008ad8:	2b80      	cmp	r3, #128	@ 0x80
 8008ada:	f040 81e0 	bne.w	8008e9e <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ade:	f7fa fd2d 	bl	800353c <HAL_GetREVID>
 8008ae2:	f241 0303 	movw	r3, #4099	@ 0x1003
 8008ae6:	4298      	cmp	r0, r3
 8008ae8:	d812      	bhi.n	8008b10 <HAL_RCC_OscConfig+0x2b4>
 8008aea:	6a22      	ldr	r2, [r4, #32]
 8008aec:	2a20      	cmp	r2, #32
 8008aee:	d007      	beq.n	8008b00 <HAL_RCC_OscConfig+0x2a4>
 8008af0:	4998      	ldr	r1, [pc, #608]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008af2:	684b      	ldr	r3, [r1, #4]
 8008af4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008af8:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8008afc:	604b      	str	r3, [r1, #4]
 8008afe:	e00f      	b.n	8008b20 <HAL_RCC_OscConfig+0x2c4>
 8008b00:	4a94      	ldr	r2, [pc, #592]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008b02:	6853      	ldr	r3, [r2, #4]
 8008b04:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008b08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b0c:	6053      	str	r3, [r2, #4]
 8008b0e:	e007      	b.n	8008b20 <HAL_RCC_OscConfig+0x2c4>
 8008b10:	4a90      	ldr	r2, [pc, #576]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008b12:	68d3      	ldr	r3, [r2, #12]
 8008b14:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8008b18:	6a21      	ldr	r1, [r4, #32]
 8008b1a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008b1e:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	f013 0f08 	tst.w	r3, #8
 8008b26:	d060      	beq.n	8008bea <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b28:	6963      	ldr	r3, [r4, #20]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d049      	beq.n	8008bc2 <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b2e:	4a89      	ldr	r2, [pc, #548]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008b30:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8008b32:	f043 0301 	orr.w	r3, r3, #1
 8008b36:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b38:	f7fa fce6 	bl	8003508 <HAL_GetTick>
 8008b3c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b3e:	4b85      	ldr	r3, [pc, #532]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b42:	f013 0f02 	tst.w	r3, #2
 8008b46:	d150      	bne.n	8008bea <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b48:	f7fa fcde 	bl	8003508 <HAL_GetTick>
 8008b4c:	1b40      	subs	r0, r0, r5
 8008b4e:	2802      	cmp	r0, #2
 8008b50:	d9f5      	bls.n	8008b3e <HAL_RCC_OscConfig+0x2e2>
        {
          return HAL_TIMEOUT;
 8008b52:	2003      	movs	r0, #3
 8008b54:	e1a6      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b56:	f7fa fcf1 	bl	800353c <HAL_GetREVID>
 8008b5a:	f241 0303 	movw	r3, #4099	@ 0x1003
 8008b5e:	4298      	cmp	r0, r3
 8008b60:	d812      	bhi.n	8008b88 <HAL_RCC_OscConfig+0x32c>
 8008b62:	6a22      	ldr	r2, [r4, #32]
 8008b64:	2a20      	cmp	r2, #32
 8008b66:	d007      	beq.n	8008b78 <HAL_RCC_OscConfig+0x31c>
 8008b68:	497a      	ldr	r1, [pc, #488]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008b6a:	684b      	ldr	r3, [r1, #4]
 8008b6c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008b70:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8008b74:	604b      	str	r3, [r1, #4]
 8008b76:	e7d3      	b.n	8008b20 <HAL_RCC_OscConfig+0x2c4>
 8008b78:	4a76      	ldr	r2, [pc, #472]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008b7a:	6853      	ldr	r3, [r2, #4]
 8008b7c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008b80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b84:	6053      	str	r3, [r2, #4]
 8008b86:	e7cb      	b.n	8008b20 <HAL_RCC_OscConfig+0x2c4>
 8008b88:	4a72      	ldr	r2, [pc, #456]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008b8a:	68d3      	ldr	r3, [r2, #12]
 8008b8c:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8008b90:	6a21      	ldr	r1, [r4, #32]
 8008b92:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008b96:	60d3      	str	r3, [r2, #12]
 8008b98:	e7c2      	b.n	8008b20 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 8008b9a:	4a6e      	ldr	r2, [pc, #440]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008b9c:	6813      	ldr	r3, [r2, #0]
 8008b9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ba2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008ba4:	f7fa fcb0 	bl	8003508 <HAL_GetTick>
 8008ba8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008baa:	4b6a      	ldr	r3, [pc, #424]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8008bb2:	d0b5      	beq.n	8008b20 <HAL_RCC_OscConfig+0x2c4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008bb4:	f7fa fca8 	bl	8003508 <HAL_GetTick>
 8008bb8:	1b40      	subs	r0, r0, r5
 8008bba:	2802      	cmp	r0, #2
 8008bbc:	d9f5      	bls.n	8008baa <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8008bbe:	2003      	movs	r0, #3
 8008bc0:	e170      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008bc2:	4a64      	ldr	r2, [pc, #400]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008bc4:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8008bc6:	f023 0301 	bic.w	r3, r3, #1
 8008bca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bcc:	f7fa fc9c 	bl	8003508 <HAL_GetTick>
 8008bd0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008bd2:	4b60      	ldr	r3, [pc, #384]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bd6:	f013 0f02 	tst.w	r3, #2
 8008bda:	d006      	beq.n	8008bea <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bdc:	f7fa fc94 	bl	8003508 <HAL_GetTick>
 8008be0:	1b40      	subs	r0, r0, r5
 8008be2:	2802      	cmp	r0, #2
 8008be4:	d9f5      	bls.n	8008bd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008be6:	2003      	movs	r0, #3
 8008be8:	e15c      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	f013 0f20 	tst.w	r3, #32
 8008bf0:	d029      	beq.n	8008c46 <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008bf2:	69a3      	ldr	r3, [r4, #24]
 8008bf4:	b19b      	cbz	r3, 8008c1e <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008bf6:	4a57      	ldr	r2, [pc, #348]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008bf8:	6813      	ldr	r3, [r2, #0]
 8008bfa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008bfe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c00:	f7fa fc82 	bl	8003508 <HAL_GetTick>
 8008c04:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c06:	4b53      	ldr	r3, [pc, #332]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8008c0e:	d11a      	bne.n	8008c46 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008c10:	f7fa fc7a 	bl	8003508 <HAL_GetTick>
 8008c14:	1b40      	subs	r0, r0, r5
 8008c16:	2802      	cmp	r0, #2
 8008c18:	d9f5      	bls.n	8008c06 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008c1a:	2003      	movs	r0, #3
 8008c1c:	e142      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c1e:	4a4d      	ldr	r2, [pc, #308]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008c20:	6813      	ldr	r3, [r2, #0]
 8008c22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c28:	f7fa fc6e 	bl	8003508 <HAL_GetTick>
 8008c2c:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c2e:	4b49      	ldr	r3, [pc, #292]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8008c36:	d006      	beq.n	8008c46 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008c38:	f7fa fc66 	bl	8003508 <HAL_GetTick>
 8008c3c:	1b40      	subs	r0, r0, r5
 8008c3e:	2802      	cmp	r0, #2
 8008c40:	d9f5      	bls.n	8008c2e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8008c42:	2003      	movs	r0, #3
 8008c44:	e12e      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	f013 0f04 	tst.w	r3, #4
 8008c4c:	d121      	bne.n	8008c92 <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c4e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 8126 	beq.w	8008ea2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008c56:	4a3f      	ldr	r2, [pc, #252]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008c58:	6912      	ldr	r2, [r2, #16]
 8008c5a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8008c5e:	2a18      	cmp	r2, #24
 8008c60:	f000 80ee 	beq.w	8008e40 <HAL_RCC_OscConfig+0x5e4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d079      	beq.n	8008d5c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c68:	4a3a      	ldr	r2, [pc, #232]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008c6a:	6813      	ldr	r3, [r2, #0]
 8008c6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c72:	f7fa fc49 	bl	8003508 <HAL_GetTick>
 8008c76:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c78:	4b36      	ldr	r3, [pc, #216]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8008c80:	f000 80dc 	beq.w	8008e3c <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c84:	f7fa fc40 	bl	8003508 <HAL_GetTick>
 8008c88:	1b00      	subs	r0, r0, r4
 8008c8a:	2802      	cmp	r0, #2
 8008c8c:	d9f4      	bls.n	8008c78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008c8e:	2003      	movs	r0, #3
 8008c90:	e108      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
    PWR->CR1 |= PWR_CR1_DBP;
 8008c92:	4a31      	ldr	r2, [pc, #196]	@ (8008d58 <HAL_RCC_OscConfig+0x4fc>)
 8008c94:	6813      	ldr	r3, [r2, #0]
 8008c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c9a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008c9c:	f7fa fc34 	bl	8003508 <HAL_GetTick>
 8008ca0:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8008d58 <HAL_RCC_OscConfig+0x4fc>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8008caa:	d106      	bne.n	8008cba <HAL_RCC_OscConfig+0x45e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008cac:	f7fa fc2c 	bl	8003508 <HAL_GetTick>
 8008cb0:	1b40      	subs	r0, r0, r5
 8008cb2:	2864      	cmp	r0, #100	@ 0x64
 8008cb4:	d9f5      	bls.n	8008ca2 <HAL_RCC_OscConfig+0x446>
        return HAL_TIMEOUT;
 8008cb6:	2003      	movs	r0, #3
 8008cb8:	e0f4      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cba:	68a3      	ldr	r3, [r4, #8]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d00a      	beq.n	8008cd6 <HAL_RCC_OscConfig+0x47a>
 8008cc0:	bb0b      	cbnz	r3, 8008d06 <HAL_RCC_OscConfig+0x4aa>
 8008cc2:	4b24      	ldr	r3, [pc, #144]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008cc4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008cc6:	f022 0201 	bic.w	r2, r2, #1
 8008cca:	671a      	str	r2, [r3, #112]	@ 0x70
 8008ccc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008cce:	f022 0204 	bic.w	r2, r2, #4
 8008cd2:	671a      	str	r2, [r3, #112]	@ 0x70
 8008cd4:	e004      	b.n	8008ce0 <HAL_RCC_OscConfig+0x484>
 8008cd6:	4a1f      	ldr	r2, [pc, #124]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008cd8:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8008cda:	f043 0301 	orr.w	r3, r3, #1
 8008cde:	6713      	str	r3, [r2, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ce0:	68a3      	ldr	r3, [r4, #8]
 8008ce2:	b333      	cbz	r3, 8008d32 <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 8008ce4:	f7fa fc10 	bl	8003508 <HAL_GetTick>
 8008ce8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008cea:	4b1a      	ldr	r3, [pc, #104]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cee:	f013 0f02 	tst.w	r3, #2
 8008cf2:	d1ac      	bne.n	8008c4e <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cf4:	f7fa fc08 	bl	8003508 <HAL_GetTick>
 8008cf8:	1b40      	subs	r0, r0, r5
 8008cfa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008cfe:	4298      	cmp	r0, r3
 8008d00:	d9f3      	bls.n	8008cea <HAL_RCC_OscConfig+0x48e>
          return HAL_TIMEOUT;
 8008d02:	2003      	movs	r0, #3
 8008d04:	e0ce      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d06:	2b05      	cmp	r3, #5
 8008d08:	d009      	beq.n	8008d1e <HAL_RCC_OscConfig+0x4c2>
 8008d0a:	4b12      	ldr	r3, [pc, #72]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008d0c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008d0e:	f022 0201 	bic.w	r2, r2, #1
 8008d12:	671a      	str	r2, [r3, #112]	@ 0x70
 8008d14:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008d16:	f022 0204 	bic.w	r2, r2, #4
 8008d1a:	671a      	str	r2, [r3, #112]	@ 0x70
 8008d1c:	e7e0      	b.n	8008ce0 <HAL_RCC_OscConfig+0x484>
 8008d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008d20:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008d22:	f042 0204 	orr.w	r2, r2, #4
 8008d26:	671a      	str	r2, [r3, #112]	@ 0x70
 8008d28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008d2a:	f042 0201 	orr.w	r2, r2, #1
 8008d2e:	671a      	str	r2, [r3, #112]	@ 0x70
 8008d30:	e7d6      	b.n	8008ce0 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 8008d32:	f7fa fbe9 	bl	8003508 <HAL_GetTick>
 8008d36:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d38:	4b06      	ldr	r3, [pc, #24]	@ (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d3c:	f013 0f02 	tst.w	r3, #2
 8008d40:	d085      	beq.n	8008c4e <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d42:	f7fa fbe1 	bl	8003508 <HAL_GetTick>
 8008d46:	1b40      	subs	r0, r0, r5
 8008d48:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008d4c:	4298      	cmp	r0, r3
 8008d4e:	d9f3      	bls.n	8008d38 <HAL_RCC_OscConfig+0x4dc>
          return HAL_TIMEOUT;
 8008d50:	2003      	movs	r0, #3
 8008d52:	e0a7      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
 8008d54:	58024400 	.word	0x58024400
 8008d58:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 8008d5c:	4a59      	ldr	r2, [pc, #356]	@ (8008ec4 <HAL_RCC_OscConfig+0x668>)
 8008d5e:	6813      	ldr	r3, [r2, #0]
 8008d60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d64:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008d66:	f7fa fbcf 	bl	8003508 <HAL_GetTick>
 8008d6a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d6c:	4b55      	ldr	r3, [pc, #340]	@ (8008ec4 <HAL_RCC_OscConfig+0x668>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8008d74:	d006      	beq.n	8008d84 <HAL_RCC_OscConfig+0x528>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d76:	f7fa fbc7 	bl	8003508 <HAL_GetTick>
 8008d7a:	1b40      	subs	r0, r0, r5
 8008d7c:	2802      	cmp	r0, #2
 8008d7e:	d9f5      	bls.n	8008d6c <HAL_RCC_OscConfig+0x510>
            return HAL_TIMEOUT;
 8008d80:	2003      	movs	r0, #3
 8008d82:	e08f      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d84:	4b4f      	ldr	r3, [pc, #316]	@ (8008ec4 <HAL_RCC_OscConfig+0x668>)
 8008d86:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8008d88:	4a4f      	ldr	r2, [pc, #316]	@ (8008ec8 <HAL_RCC_OscConfig+0x66c>)
 8008d8a:	400a      	ands	r2, r1
 8008d8c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8008d8e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008d90:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8008d94:	430a      	orrs	r2, r1
 8008d96:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d98:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8008d9a:	3a01      	subs	r2, #1
 8008d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008da0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008da2:	3901      	subs	r1, #1
 8008da4:	0249      	lsls	r1, r1, #9
 8008da6:	b289      	uxth	r1, r1
 8008da8:	430a      	orrs	r2, r1
 8008daa:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008dac:	3901      	subs	r1, #1
 8008dae:	0409      	lsls	r1, r1, #16
 8008db0:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 8008db4:	430a      	orrs	r2, r1
 8008db6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8008db8:	3901      	subs	r1, #1
 8008dba:	0609      	lsls	r1, r1, #24
 8008dbc:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	631a      	str	r2, [r3, #48]	@ 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8008dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dc6:	f022 0201 	bic.w	r2, r2, #1
 8008dca:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008dcc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008dce:	4a3f      	ldr	r2, [pc, #252]	@ (8008ecc <HAL_RCC_OscConfig+0x670>)
 8008dd0:	400a      	ands	r2, r1
 8008dd2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008dd4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8008dd8:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ddc:	f022 020c 	bic.w	r2, r2, #12
 8008de0:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8008de2:	430a      	orrs	r2, r1
 8008de4:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008de8:	f022 0202 	bic.w	r2, r2, #2
 8008dec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008dee:	430a      	orrs	r2, r1
 8008df0:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008df4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008df8:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dfc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008e00:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e04:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008e08:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8008e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e0c:	f042 0201 	orr.w	r2, r2, #1
 8008e10:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8008e18:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008e1a:	f7fa fb75 	bl	8003508 <HAL_GetTick>
 8008e1e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e20:	4b28      	ldr	r3, [pc, #160]	@ (8008ec4 <HAL_RCC_OscConfig+0x668>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8008e28:	d106      	bne.n	8008e38 <HAL_RCC_OscConfig+0x5dc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e2a:	f7fa fb6d 	bl	8003508 <HAL_GetTick>
 8008e2e:	1b00      	subs	r0, r0, r4
 8008e30:	2802      	cmp	r0, #2
 8008e32:	d9f5      	bls.n	8008e20 <HAL_RCC_OscConfig+0x5c4>
            return HAL_TIMEOUT;
 8008e34:	2003      	movs	r0, #3
 8008e36:	e035      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8008e38:	2000      	movs	r0, #0
 8008e3a:	e033      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	e031      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008e40:	4a20      	ldr	r2, [pc, #128]	@ (8008ec4 <HAL_RCC_OscConfig+0x668>)
 8008e42:	6a91      	ldr	r1, [r2, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008e44:	6b10      	ldr	r0, [r2, #48]	@ 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d02d      	beq.n	8008ea6 <HAL_RCC_OscConfig+0x64a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e4a:	f001 0303 	and.w	r3, r1, #3
 8008e4e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d12a      	bne.n	8008eaa <HAL_RCC_OscConfig+0x64e>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e54:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8008e58:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e5a:	4299      	cmp	r1, r3
 8008e5c:	d127      	bne.n	8008eae <HAL_RCC_OscConfig+0x652>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e5e:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8008e62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008e64:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d123      	bne.n	8008eb2 <HAL_RCC_OscConfig+0x656>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e6a:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8008e6e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e70:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d11f      	bne.n	8008eb6 <HAL_RCC_OscConfig+0x65a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e76:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8008e7a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008e7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d11b      	bne.n	8008eba <HAL_RCC_OscConfig+0x65e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008e82:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8008e86:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008e88:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e8a:	4298      	cmp	r0, r3
 8008e8c:	d117      	bne.n	8008ebe <HAL_RCC_OscConfig+0x662>
  return HAL_OK;
 8008e8e:	2000      	movs	r0, #0
 8008e90:	e008      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
    return HAL_ERROR;
 8008e92:	2001      	movs	r0, #1
}
 8008e94:	4770      	bx	lr
        return HAL_ERROR;
 8008e96:	2001      	movs	r0, #1
 8008e98:	e004      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 8008e9a:	2001      	movs	r0, #1
 8008e9c:	e002      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 8008e9e:	2001      	movs	r0, #1
 8008ea0:	e000      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
  return HAL_OK;
 8008ea2:	2000      	movs	r0, #0
}
 8008ea4:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8008ea6:	2001      	movs	r0, #1
 8008ea8:	e7fc      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
 8008eaa:	2001      	movs	r0, #1
 8008eac:	e7fa      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
 8008eae:	2001      	movs	r0, #1
 8008eb0:	e7f8      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
 8008eb2:	2001      	movs	r0, #1
 8008eb4:	e7f6      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	e7f4      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
 8008eba:	2001      	movs	r0, #1
 8008ebc:	e7f2      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
 8008ebe:	2001      	movs	r0, #1
 8008ec0:	e7f0      	b.n	8008ea4 <HAL_RCC_OscConfig+0x648>
 8008ec2:	bf00      	nop
 8008ec4:	58024400 	.word	0x58024400
 8008ec8:	fffffc0c 	.word	0xfffffc0c
 8008ecc:	ffff0007 	.word	0xffff0007

08008ed0 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ed0:	4b74      	ldr	r3, [pc, #464]	@ (80090a4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ed8:	2b10      	cmp	r3, #16
 8008eda:	f000 80de 	beq.w	800909a <HAL_RCC_GetSysClockFreq+0x1ca>
 8008ede:	2b18      	cmp	r3, #24
 8008ee0:	d00f      	beq.n	8008f02 <HAL_RCC_GetSysClockFreq+0x32>
 8008ee2:	b10b      	cbz	r3, 8008ee8 <HAL_RCC_GetSysClockFreq+0x18>
 8008ee4:	4870      	ldr	r0, [pc, #448]	@ (80090a8 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8008ee6:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ee8:	4b6e      	ldr	r3, [pc, #440]	@ (80090a4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f013 0f20 	tst.w	r3, #32
 8008ef0:	f000 80d5 	beq.w	800909e <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ef4:	4b6b      	ldr	r3, [pc, #428]	@ (80090a4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008efc:	486b      	ldr	r0, [pc, #428]	@ (80090ac <HAL_RCC_GetSysClockFreq+0x1dc>)
 8008efe:	40d8      	lsrs	r0, r3
 8008f00:	4770      	bx	lr
{
 8008f02:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f04:	4b67      	ldr	r3, [pc, #412]	@ (80090a4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008f06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f08:	f002 0203 	and.w	r2, r2, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008f0c:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008f0e:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008f12:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008f14:	f001 0101 	and.w	r1, r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f1a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8008f1e:	fb01 f303 	mul.w	r3, r1, r3
 8008f22:	ee07 3a90 	vmov	s15, r3
 8008f26:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 8008f2a:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
 8008f2e:	f000 8094 	beq.w	800905a <HAL_RCC_GetSysClockFreq+0x18a>
    {
      switch (pllsource)
 8008f32:	2a01      	cmp	r2, #1
 8008f34:	d066      	beq.n	8009004 <HAL_RCC_GetSysClockFreq+0x134>
 8008f36:	2a02      	cmp	r2, #2
 8008f38:	f000 8092 	beq.w	8009060 <HAL_RCC_GetSysClockFreq+0x190>
 8008f3c:	b1e2      	cbz	r2, 8008f78 <HAL_RCC_GetSysClockFreq+0xa8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f3e:	ee07 0a10 	vmov	s14, r0
 8008f42:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008f46:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 80090b0 <HAL_RCC_GetSysClockFreq+0x1e0>
 8008f4a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008f4e:	4b55      	ldr	r3, [pc, #340]	@ (80090a4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f56:	ee06 3a90 	vmov	s13, r3
 8008f5a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008f5e:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 80090b4 <HAL_RCC_GetSysClockFreq+0x1e4>
 8008f62:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f72:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8008f76:	e061      	b.n	800903c <HAL_RCC_GetSysClockFreq+0x16c>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f78:	4b4a      	ldr	r3, [pc, #296]	@ (80090a4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f013 0f20 	tst.w	r3, #32
 8008f80:	d023      	beq.n	8008fca <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f82:	4948      	ldr	r1, [pc, #288]	@ (80090a4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008f84:	680a      	ldr	r2, [r1, #0]
 8008f86:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008f8a:	4b48      	ldr	r3, [pc, #288]	@ (80090ac <HAL_RCC_GetSysClockFreq+0x1dc>)
 8008f8c:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f8e:	ee07 3a10 	vmov	s14, r3
 8008f92:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008f96:	ee07 0a10 	vmov	s14, r0
 8008f9a:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8008f9e:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8008fa2:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8008fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa8:	ee06 3a90 	vmov	s13, r3
 8008fac:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008fb0:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 80090b4 <HAL_RCC_GetSysClockFreq+0x1e4>
 8008fb4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008fb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008fc8:	e038      	b.n	800903c <HAL_RCC_GetSysClockFreq+0x16c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fca:	ee07 0a10 	vmov	s14, r0
 8008fce:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008fd2:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 80090b8 <HAL_RCC_GetSysClockFreq+0x1e8>
 8008fd6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008fda:	4b32      	ldr	r3, [pc, #200]	@ (80090a4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fe2:	ee06 3a90 	vmov	s13, r3
 8008fe6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008fea:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 80090b4 <HAL_RCC_GetSysClockFreq+0x1e4>
 8008fee:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ffe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009002:	e01b      	b.n	800903c <HAL_RCC_GetSysClockFreq+0x16c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009004:	ee07 0a10 	vmov	s14, r0
 8009008:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800900c:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 80090b0 <HAL_RCC_GetSysClockFreq+0x1e0>
 8009010:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8009014:	4b23      	ldr	r3, [pc, #140]	@ (80090a4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8009016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800901c:	ee06 3a90 	vmov	s13, r3
 8009020:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8009024:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 80090b4 <HAL_RCC_GetSysClockFreq+0x1e4>
 8009028:	ee67 7a86 	vmul.f32	s15, s15, s12
 800902c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009030:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009034:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009038:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800903c:	4b19      	ldr	r3, [pc, #100]	@ (80090a4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800903e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009040:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009044:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009046:	ee07 3a90 	vmov	s15, r3
 800904a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009052:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8009056:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800905a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800905e:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009060:	ee07 0a10 	vmov	s14, r0
 8009064:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8009068:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 80090bc <HAL_RCC_GetSysClockFreq+0x1ec>
 800906c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8009070:	4b0c      	ldr	r3, [pc, #48]	@ (80090a4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8009072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009078:	ee06 3a90 	vmov	s13, r3
 800907c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8009080:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 80090b4 <HAL_RCC_GetSysClockFreq+0x1e4>
 8009084:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009088:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800908c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009090:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009094:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8009098:	e7d0      	b.n	800903c <HAL_RCC_GetSysClockFreq+0x16c>
    sysclockfreq = HSE_VALUE;
 800909a:	4809      	ldr	r0, [pc, #36]	@ (80090c0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800909c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800909e:	4803      	ldr	r0, [pc, #12]	@ (80090ac <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	58024400 	.word	0x58024400
 80090a8:	003d0900 	.word	0x003d0900
 80090ac:	03d09000 	.word	0x03d09000
 80090b0:	4a742400 	.word	0x4a742400
 80090b4:	39000000 	.word	0x39000000
 80090b8:	4c742400 	.word	0x4c742400
 80090bc:	4bb71b00 	.word	0x4bb71b00
 80090c0:	016e3600 	.word	0x016e3600

080090c4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80090c4:	2800      	cmp	r0, #0
 80090c6:	f000 8132 	beq.w	800932e <HAL_RCC_ClockConfig+0x26a>
{
 80090ca:	b570      	push	{r4, r5, r6, lr}
 80090cc:	460d      	mov	r5, r1
 80090ce:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80090d0:	4b9b      	ldr	r3, [pc, #620]	@ (8009340 <HAL_RCC_ClockConfig+0x27c>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 030f 	and.w	r3, r3, #15
 80090d8:	428b      	cmp	r3, r1
 80090da:	d20b      	bcs.n	80090f4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090dc:	4a98      	ldr	r2, [pc, #608]	@ (8009340 <HAL_RCC_ClockConfig+0x27c>)
 80090de:	6813      	ldr	r3, [r2, #0]
 80090e0:	f023 030f 	bic.w	r3, r3, #15
 80090e4:	430b      	orrs	r3, r1
 80090e6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090e8:	6813      	ldr	r3, [r2, #0]
 80090ea:	f003 030f 	and.w	r3, r3, #15
 80090ee:	428b      	cmp	r3, r1
 80090f0:	f040 811f 	bne.w	8009332 <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80090f4:	6823      	ldr	r3, [r4, #0]
 80090f6:	f013 0f04 	tst.w	r3, #4
 80090fa:	d00c      	beq.n	8009116 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80090fc:	6922      	ldr	r2, [r4, #16]
 80090fe:	4b91      	ldr	r3, [pc, #580]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009106:	429a      	cmp	r2, r3
 8009108:	d905      	bls.n	8009116 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800910a:	498e      	ldr	r1, [pc, #568]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 800910c:	698b      	ldr	r3, [r1, #24]
 800910e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009112:	431a      	orrs	r2, r3
 8009114:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009116:	6823      	ldr	r3, [r4, #0]
 8009118:	f013 0f08 	tst.w	r3, #8
 800911c:	d00c      	beq.n	8009138 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800911e:	6962      	ldr	r2, [r4, #20]
 8009120:	4b88      	ldr	r3, [pc, #544]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 8009122:	69db      	ldr	r3, [r3, #28]
 8009124:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009128:	429a      	cmp	r2, r3
 800912a:	d905      	bls.n	8009138 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800912c:	4985      	ldr	r1, [pc, #532]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 800912e:	69cb      	ldr	r3, [r1, #28]
 8009130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009134:	431a      	orrs	r2, r3
 8009136:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	f013 0f10 	tst.w	r3, #16
 800913e:	d00c      	beq.n	800915a <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009140:	69a2      	ldr	r2, [r4, #24]
 8009142:	4b80      	ldr	r3, [pc, #512]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 8009144:	69db      	ldr	r3, [r3, #28]
 8009146:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800914a:	429a      	cmp	r2, r3
 800914c:	d905      	bls.n	800915a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800914e:	497d      	ldr	r1, [pc, #500]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 8009150:	69cb      	ldr	r3, [r1, #28]
 8009152:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009156:	431a      	orrs	r2, r3
 8009158:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	f013 0f20 	tst.w	r3, #32
 8009160:	d00c      	beq.n	800917c <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009162:	69e2      	ldr	r2, [r4, #28]
 8009164:	4b77      	ldr	r3, [pc, #476]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 8009166:	6a1b      	ldr	r3, [r3, #32]
 8009168:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800916c:	429a      	cmp	r2, r3
 800916e:	d905      	bls.n	800917c <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009170:	4974      	ldr	r1, [pc, #464]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 8009172:	6a0b      	ldr	r3, [r1, #32]
 8009174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009178:	431a      	orrs	r2, r3
 800917a:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800917c:	6823      	ldr	r3, [r4, #0]
 800917e:	f013 0f02 	tst.w	r3, #2
 8009182:	d00c      	beq.n	800919e <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009184:	68e2      	ldr	r2, [r4, #12]
 8009186:	4b6f      	ldr	r3, [pc, #444]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	f003 030f 	and.w	r3, r3, #15
 800918e:	429a      	cmp	r2, r3
 8009190:	d905      	bls.n	800919e <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009192:	496c      	ldr	r1, [pc, #432]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 8009194:	698b      	ldr	r3, [r1, #24]
 8009196:	f023 030f 	bic.w	r3, r3, #15
 800919a:	431a      	orrs	r2, r3
 800919c:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	f013 0f01 	tst.w	r3, #1
 80091a4:	d041      	beq.n	800922a <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80091a6:	4a67      	ldr	r2, [pc, #412]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 80091a8:	6993      	ldr	r3, [r2, #24]
 80091aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80091ae:	68a1      	ldr	r1, [r4, #8]
 80091b0:	430b      	orrs	r3, r1
 80091b2:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091b4:	6863      	ldr	r3, [r4, #4]
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d00a      	beq.n	80091d0 <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d027      	beq.n	800920e <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d02c      	beq.n	800921c <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80091c2:	4a60      	ldr	r2, [pc, #384]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 80091c4:	6812      	ldr	r2, [r2, #0]
 80091c6:	f012 0f04 	tst.w	r2, #4
 80091ca:	d106      	bne.n	80091da <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80091cc:	2001      	movs	r0, #1
 80091ce:	e0ad      	b.n	800932c <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80091d0:	6812      	ldr	r2, [r2, #0]
 80091d2:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80091d6:	f000 80ae 	beq.w	8009336 <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80091da:	495a      	ldr	r1, [pc, #360]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 80091dc:	690a      	ldr	r2, [r1, #16]
 80091de:	f022 0207 	bic.w	r2, r2, #7
 80091e2:	4313      	orrs	r3, r2
 80091e4:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 80091e6:	f7fa f98f 	bl	8003508 <HAL_GetTick>
 80091ea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091ec:	4b55      	ldr	r3, [pc, #340]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80091f4:	6862      	ldr	r2, [r4, #4]
 80091f6:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80091fa:	d016      	beq.n	800922a <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091fc:	f7fa f984 	bl	8003508 <HAL_GetTick>
 8009200:	1b80      	subs	r0, r0, r6
 8009202:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009206:	4298      	cmp	r0, r3
 8009208:	d9f0      	bls.n	80091ec <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 800920a:	2003      	movs	r0, #3
 800920c:	e08e      	b.n	800932c <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800920e:	4a4d      	ldr	r2, [pc, #308]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 8009210:	6812      	ldr	r2, [r2, #0]
 8009212:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8009216:	d1e0      	bne.n	80091da <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8009218:	2001      	movs	r0, #1
 800921a:	e087      	b.n	800932c <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800921c:	4a49      	ldr	r2, [pc, #292]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 800921e:	6812      	ldr	r2, [r2, #0]
 8009220:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8009224:	d1d9      	bne.n	80091da <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8009226:	2001      	movs	r0, #1
 8009228:	e080      	b.n	800932c <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	f013 0f02 	tst.w	r3, #2
 8009230:	d00c      	beq.n	800924c <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009232:	68e2      	ldr	r2, [r4, #12]
 8009234:	4b43      	ldr	r3, [pc, #268]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	f003 030f 	and.w	r3, r3, #15
 800923c:	429a      	cmp	r2, r3
 800923e:	d205      	bcs.n	800924c <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009240:	4940      	ldr	r1, [pc, #256]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 8009242:	698b      	ldr	r3, [r1, #24]
 8009244:	f023 030f 	bic.w	r3, r3, #15
 8009248:	431a      	orrs	r2, r3
 800924a:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800924c:	4b3c      	ldr	r3, [pc, #240]	@ (8009340 <HAL_RCC_ClockConfig+0x27c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f003 030f 	and.w	r3, r3, #15
 8009254:	42ab      	cmp	r3, r5
 8009256:	d90a      	bls.n	800926e <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009258:	4a39      	ldr	r2, [pc, #228]	@ (8009340 <HAL_RCC_ClockConfig+0x27c>)
 800925a:	6813      	ldr	r3, [r2, #0]
 800925c:	f023 030f 	bic.w	r3, r3, #15
 8009260:	432b      	orrs	r3, r5
 8009262:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009264:	6813      	ldr	r3, [r2, #0]
 8009266:	f003 030f 	and.w	r3, r3, #15
 800926a:	42ab      	cmp	r3, r5
 800926c:	d165      	bne.n	800933a <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800926e:	6823      	ldr	r3, [r4, #0]
 8009270:	f013 0f04 	tst.w	r3, #4
 8009274:	d00c      	beq.n	8009290 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009276:	6922      	ldr	r2, [r4, #16]
 8009278:	4b32      	ldr	r3, [pc, #200]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 800927a:	699b      	ldr	r3, [r3, #24]
 800927c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009280:	429a      	cmp	r2, r3
 8009282:	d205      	bcs.n	8009290 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009284:	492f      	ldr	r1, [pc, #188]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 8009286:	698b      	ldr	r3, [r1, #24]
 8009288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800928c:	431a      	orrs	r2, r3
 800928e:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009290:	6823      	ldr	r3, [r4, #0]
 8009292:	f013 0f08 	tst.w	r3, #8
 8009296:	d00c      	beq.n	80092b2 <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009298:	6962      	ldr	r2, [r4, #20]
 800929a:	4b2a      	ldr	r3, [pc, #168]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 800929c:	69db      	ldr	r3, [r3, #28]
 800929e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d205      	bcs.n	80092b2 <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80092a6:	4927      	ldr	r1, [pc, #156]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 80092a8:	69cb      	ldr	r3, [r1, #28]
 80092aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092ae:	431a      	orrs	r2, r3
 80092b0:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	f013 0f10 	tst.w	r3, #16
 80092b8:	d00c      	beq.n	80092d4 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80092ba:	69a2      	ldr	r2, [r4, #24]
 80092bc:	4b21      	ldr	r3, [pc, #132]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 80092be:	69db      	ldr	r3, [r3, #28]
 80092c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d205      	bcs.n	80092d4 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80092c8:	491e      	ldr	r1, [pc, #120]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 80092ca:	69cb      	ldr	r3, [r1, #28]
 80092cc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80092d0:	431a      	orrs	r2, r3
 80092d2:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80092d4:	6823      	ldr	r3, [r4, #0]
 80092d6:	f013 0f20 	tst.w	r3, #32
 80092da:	d00c      	beq.n	80092f6 <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80092dc:	69e2      	ldr	r2, [r4, #28]
 80092de:	4b19      	ldr	r3, [pc, #100]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d205      	bcs.n	80092f6 <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80092ea:	4916      	ldr	r1, [pc, #88]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 80092ec:	6a0b      	ldr	r3, [r1, #32]
 80092ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092f2:	431a      	orrs	r2, r3
 80092f4:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80092f6:	f7ff fdeb 	bl	8008ed0 <HAL_RCC_GetSysClockFreq>
 80092fa:	4912      	ldr	r1, [pc, #72]	@ (8009344 <HAL_RCC_ClockConfig+0x280>)
 80092fc:	698b      	ldr	r3, [r1, #24]
 80092fe:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8009302:	4a11      	ldr	r2, [pc, #68]	@ (8009348 <HAL_RCC_ClockConfig+0x284>)
 8009304:	5cd3      	ldrb	r3, [r2, r3]
 8009306:	f003 031f 	and.w	r3, r3, #31
 800930a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800930c:	698b      	ldr	r3, [r1, #24]
 800930e:	f003 030f 	and.w	r3, r3, #15
 8009312:	5cd3      	ldrb	r3, [r2, r3]
 8009314:	f003 031f 	and.w	r3, r3, #31
 8009318:	fa20 f303 	lsr.w	r3, r0, r3
 800931c:	4a0b      	ldr	r2, [pc, #44]	@ (800934c <HAL_RCC_ClockConfig+0x288>)
 800931e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8009320:	4b0b      	ldr	r3, [pc, #44]	@ (8009350 <HAL_RCC_ClockConfig+0x28c>)
 8009322:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8009324:	4b0b      	ldr	r3, [pc, #44]	@ (8009354 <HAL_RCC_ClockConfig+0x290>)
 8009326:	6818      	ldr	r0, [r3, #0]
 8009328:	f7f9 febc 	bl	80030a4 <HAL_InitTick>
}
 800932c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800932e:	2001      	movs	r0, #1
}
 8009330:	4770      	bx	lr
      return HAL_ERROR;
 8009332:	2001      	movs	r0, #1
 8009334:	e7fa      	b.n	800932c <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 8009336:	2001      	movs	r0, #1
 8009338:	e7f8      	b.n	800932c <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 800933a:	2001      	movs	r0, #1
 800933c:	e7f6      	b.n	800932c <HAL_RCC_ClockConfig+0x268>
 800933e:	bf00      	nop
 8009340:	52002000 	.word	0x52002000
 8009344:	58024400 	.word	0x58024400
 8009348:	0801f3e4 	.word	0x0801f3e4
 800934c:	24000000 	.word	0x24000000
 8009350:	24000004 	.word	0x24000004
 8009354:	2400000c 	.word	0x2400000c

08009358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009358:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800935a:	f7ff fdb9 	bl	8008ed0 <HAL_RCC_GetSysClockFreq>
 800935e:	4a0b      	ldr	r2, [pc, #44]	@ (800938c <HAL_RCC_GetHCLKFreq+0x34>)
 8009360:	6993      	ldr	r3, [r2, #24]
 8009362:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8009366:	490a      	ldr	r1, [pc, #40]	@ (8009390 <HAL_RCC_GetHCLKFreq+0x38>)
 8009368:	5ccb      	ldrb	r3, [r1, r3]
 800936a:	f003 031f 	and.w	r3, r3, #31
 800936e:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009372:	6992      	ldr	r2, [r2, #24]
 8009374:	f002 020f 	and.w	r2, r2, #15
 8009378:	5c88      	ldrb	r0, [r1, r2]
 800937a:	f000 001f 	and.w	r0, r0, #31
 800937e:	fa23 f000 	lsr.w	r0, r3, r0
 8009382:	4a04      	ldr	r2, [pc, #16]	@ (8009394 <HAL_RCC_GetHCLKFreq+0x3c>)
 8009384:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009386:	4a04      	ldr	r2, [pc, #16]	@ (8009398 <HAL_RCC_GetHCLKFreq+0x40>)
 8009388:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800938a:	bd08      	pop	{r3, pc}
 800938c:	58024400 	.word	0x58024400
 8009390:	0801f3e4 	.word	0x0801f3e4
 8009394:	24000000 	.word	0x24000000
 8009398:	24000004 	.word	0x24000004

0800939c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800939c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800939e:	f7ff ffdb 	bl	8009358 <HAL_RCC_GetHCLKFreq>
 80093a2:	4b05      	ldr	r3, [pc, #20]	@ (80093b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80093a4:	69db      	ldr	r3, [r3, #28]
 80093a6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80093aa:	4a04      	ldr	r2, [pc, #16]	@ (80093bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80093ac:	5cd3      	ldrb	r3, [r2, r3]
 80093ae:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80093b2:	40d8      	lsrs	r0, r3
 80093b4:	bd08      	pop	{r3, pc}
 80093b6:	bf00      	nop
 80093b8:	58024400 	.word	0x58024400
 80093bc:	0801f3e4 	.word	0x0801f3e4

080093c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093c0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80093c2:	f7ff ffc9 	bl	8009358 <HAL_RCC_GetHCLKFreq>
 80093c6:	4b05      	ldr	r3, [pc, #20]	@ (80093dc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80093ce:	4a04      	ldr	r2, [pc, #16]	@ (80093e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80093d0:	5cd3      	ldrb	r3, [r2, r3]
 80093d2:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80093d6:	40d8      	lsrs	r0, r3
 80093d8:	bd08      	pop	{r3, pc}
 80093da:	bf00      	nop
 80093dc:	58024400 	.word	0x58024400
 80093e0:	0801f3e4 	.word	0x0801f3e4

080093e4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80093e4:	233f      	movs	r3, #63	@ 0x3f
 80093e6:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80093e8:	4b11      	ldr	r3, [pc, #68]	@ (8009430 <HAL_RCC_GetClockConfig+0x4c>)
 80093ea:	691a      	ldr	r2, [r3, #16]
 80093ec:	f002 0207 	and.w	r2, r2, #7
 80093f0:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80093f2:	699a      	ldr	r2, [r3, #24]
 80093f4:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 80093f8:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80093fa:	699a      	ldr	r2, [r3, #24]
 80093fc:	f002 020f 	and.w	r2, r2, #15
 8009400:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009402:	699a      	ldr	r2, [r3, #24]
 8009404:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009408:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800940a:	69da      	ldr	r2, [r3, #28]
 800940c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009410:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009412:	69da      	ldr	r2, [r3, #28]
 8009414:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009418:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800941a:	6a1b      	ldr	r3, [r3, #32]
 800941c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009420:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009422:	4b04      	ldr	r3, [pc, #16]	@ (8009434 <HAL_RCC_GetClockConfig+0x50>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 030f 	and.w	r3, r3, #15
 800942a:	600b      	str	r3, [r1, #0]
}
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	58024400 	.word	0x58024400
 8009434:	52002000 	.word	0x52002000

08009438 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009438:	4b40      	ldr	r3, [pc, #256]	@ (800953c <RCCEx_PLL2_Config+0x104>)
 800943a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800943c:	f003 0303 	and.w	r3, r3, #3
 8009440:	2b03      	cmp	r3, #3
 8009442:	d079      	beq.n	8009538 <RCCEx_PLL2_Config+0x100>
{
 8009444:	b570      	push	{r4, r5, r6, lr}
 8009446:	4605      	mov	r5, r0
 8009448:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800944a:	4a3c      	ldr	r2, [pc, #240]	@ (800953c <RCCEx_PLL2_Config+0x104>)
 800944c:	6813      	ldr	r3, [r2, #0]
 800944e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009454:	f7fa f858 	bl	8003508 <HAL_GetTick>
 8009458:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800945a:	4b38      	ldr	r3, [pc, #224]	@ (800953c <RCCEx_PLL2_Config+0x104>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8009462:	d006      	beq.n	8009472 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009464:	f7fa f850 	bl	8003508 <HAL_GetTick>
 8009468:	1b03      	subs	r3, r0, r4
 800946a:	2b02      	cmp	r3, #2
 800946c:	d9f5      	bls.n	800945a <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 800946e:	2003      	movs	r0, #3

  }


  return status;
}
 8009470:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009472:	4b32      	ldr	r3, [pc, #200]	@ (800953c <RCCEx_PLL2_Config+0x104>)
 8009474:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009476:	f422 327c 	bic.w	r2, r2, #258048	@ 0x3f000
 800947a:	6829      	ldr	r1, [r5, #0]
 800947c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8009480:	629a      	str	r2, [r3, #40]	@ 0x28
 8009482:	686a      	ldr	r2, [r5, #4]
 8009484:	3a01      	subs	r2, #1
 8009486:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800948a:	68a9      	ldr	r1, [r5, #8]
 800948c:	3901      	subs	r1, #1
 800948e:	0249      	lsls	r1, r1, #9
 8009490:	b289      	uxth	r1, r1
 8009492:	430a      	orrs	r2, r1
 8009494:	68e9      	ldr	r1, [r5, #12]
 8009496:	3901      	subs	r1, #1
 8009498:	0409      	lsls	r1, r1, #16
 800949a:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 800949e:	430a      	orrs	r2, r1
 80094a0:	6929      	ldr	r1, [r5, #16]
 80094a2:	3901      	subs	r1, #1
 80094a4:	0609      	lsls	r1, r1, #24
 80094a6:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 80094aa:	430a      	orrs	r2, r1
 80094ac:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80094ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094b0:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 80094b4:	6969      	ldr	r1, [r5, #20]
 80094b6:	430a      	orrs	r2, r1
 80094b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80094ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094bc:	f022 0220 	bic.w	r2, r2, #32
 80094c0:	69a9      	ldr	r1, [r5, #24]
 80094c2:	430a      	orrs	r2, r1
 80094c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80094c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094c8:	f022 0210 	bic.w	r2, r2, #16
 80094cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80094ce:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80094d0:	4a1b      	ldr	r2, [pc, #108]	@ (8009540 <RCCEx_PLL2_Config+0x108>)
 80094d2:	400a      	ands	r2, r1
 80094d4:	69e9      	ldr	r1, [r5, #28]
 80094d6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80094da:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 80094dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094de:	f042 0210 	orr.w	r2, r2, #16
 80094e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80094e4:	b9c6      	cbnz	r6, 8009518 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80094e6:	461a      	mov	r2, r3
 80094e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80094ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
    __HAL_RCC_PLL2_ENABLE();
 80094f0:	4a12      	ldr	r2, [pc, #72]	@ (800953c <RCCEx_PLL2_Config+0x104>)
 80094f2:	6813      	ldr	r3, [r2, #0]
 80094f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80094f8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80094fa:	f7fa f805 	bl	8003508 <HAL_GetTick>
 80094fe:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009500:	4b0e      	ldr	r3, [pc, #56]	@ (800953c <RCCEx_PLL2_Config+0x104>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8009508:	d114      	bne.n	8009534 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800950a:	f7f9 fffd 	bl	8003508 <HAL_GetTick>
 800950e:	1b00      	subs	r0, r0, r4
 8009510:	2802      	cmp	r0, #2
 8009512:	d9f5      	bls.n	8009500 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8009514:	2003      	movs	r0, #3
 8009516:	e7ab      	b.n	8009470 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8009518:	2e01      	cmp	r6, #1
 800951a:	d005      	beq.n	8009528 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800951c:	4a07      	ldr	r2, [pc, #28]	@ (800953c <RCCEx_PLL2_Config+0x104>)
 800951e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009520:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009524:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009526:	e7e3      	b.n	80094f0 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009528:	4a04      	ldr	r2, [pc, #16]	@ (800953c <RCCEx_PLL2_Config+0x104>)
 800952a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800952c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009530:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009532:	e7dd      	b.n	80094f0 <RCCEx_PLL2_Config+0xb8>
  return status;
 8009534:	2000      	movs	r0, #0
 8009536:	e79b      	b.n	8009470 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8009538:	2001      	movs	r0, #1
}
 800953a:	4770      	bx	lr
 800953c:	58024400 	.word	0x58024400
 8009540:	ffff0007 	.word	0xffff0007

08009544 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009544:	4b40      	ldr	r3, [pc, #256]	@ (8009648 <RCCEx_PLL3_Config+0x104>)
 8009546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009548:	f003 0303 	and.w	r3, r3, #3
 800954c:	2b03      	cmp	r3, #3
 800954e:	d079      	beq.n	8009644 <RCCEx_PLL3_Config+0x100>
{
 8009550:	b570      	push	{r4, r5, r6, lr}
 8009552:	4605      	mov	r5, r0
 8009554:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009556:	4a3c      	ldr	r2, [pc, #240]	@ (8009648 <RCCEx_PLL3_Config+0x104>)
 8009558:	6813      	ldr	r3, [r2, #0]
 800955a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800955e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009560:	f7f9 ffd2 	bl	8003508 <HAL_GetTick>
 8009564:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009566:	4b38      	ldr	r3, [pc, #224]	@ (8009648 <RCCEx_PLL3_Config+0x104>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800956e:	d006      	beq.n	800957e <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009570:	f7f9 ffca 	bl	8003508 <HAL_GetTick>
 8009574:	1b03      	subs	r3, r0, r4
 8009576:	2b02      	cmp	r3, #2
 8009578:	d9f5      	bls.n	8009566 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 800957a:	2003      	movs	r0, #3

  }


  return status;
}
 800957c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800957e:	4b32      	ldr	r3, [pc, #200]	@ (8009648 <RCCEx_PLL3_Config+0x104>)
 8009580:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009582:	f022 727c 	bic.w	r2, r2, #66060288	@ 0x3f00000
 8009586:	6829      	ldr	r1, [r5, #0]
 8009588:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800958c:	629a      	str	r2, [r3, #40]	@ 0x28
 800958e:	686a      	ldr	r2, [r5, #4]
 8009590:	3a01      	subs	r2, #1
 8009592:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009596:	68a9      	ldr	r1, [r5, #8]
 8009598:	3901      	subs	r1, #1
 800959a:	0249      	lsls	r1, r1, #9
 800959c:	b289      	uxth	r1, r1
 800959e:	430a      	orrs	r2, r1
 80095a0:	68e9      	ldr	r1, [r5, #12]
 80095a2:	3901      	subs	r1, #1
 80095a4:	0409      	lsls	r1, r1, #16
 80095a6:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 80095aa:	430a      	orrs	r2, r1
 80095ac:	6929      	ldr	r1, [r5, #16]
 80095ae:	3901      	subs	r1, #1
 80095b0:	0609      	lsls	r1, r1, #24
 80095b2:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 80095b6:	430a      	orrs	r2, r1
 80095b8:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80095ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095bc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80095c0:	6969      	ldr	r1, [r5, #20]
 80095c2:	430a      	orrs	r2, r1
 80095c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80095c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095c8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80095cc:	69a9      	ldr	r1, [r5, #24]
 80095ce:	430a      	orrs	r2, r1
 80095d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80095d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80095d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80095da:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80095dc:	4a1b      	ldr	r2, [pc, #108]	@ (800964c <RCCEx_PLL3_Config+0x108>)
 80095de:	400a      	ands	r2, r1
 80095e0:	69e9      	ldr	r1, [r5, #28]
 80095e2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80095e6:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 80095e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80095ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80095f0:	b9c6      	cbnz	r6, 8009624 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80095f2:	461a      	mov	r2, r3
 80095f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80095fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
    __HAL_RCC_PLL3_ENABLE();
 80095fc:	4a12      	ldr	r2, [pc, #72]	@ (8009648 <RCCEx_PLL3_Config+0x104>)
 80095fe:	6813      	ldr	r3, [r2, #0]
 8009600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009604:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8009606:	f7f9 ff7f 	bl	8003508 <HAL_GetTick>
 800960a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800960c:	4b0e      	ldr	r3, [pc, #56]	@ (8009648 <RCCEx_PLL3_Config+0x104>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8009614:	d114      	bne.n	8009640 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009616:	f7f9 ff77 	bl	8003508 <HAL_GetTick>
 800961a:	1b00      	subs	r0, r0, r4
 800961c:	2802      	cmp	r0, #2
 800961e:	d9f5      	bls.n	800960c <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8009620:	2003      	movs	r0, #3
 8009622:	e7ab      	b.n	800957c <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8009624:	2e01      	cmp	r6, #1
 8009626:	d005      	beq.n	8009634 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009628:	4a07      	ldr	r2, [pc, #28]	@ (8009648 <RCCEx_PLL3_Config+0x104>)
 800962a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800962c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009630:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009632:	e7e3      	b.n	80095fc <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009634:	4a04      	ldr	r2, [pc, #16]	@ (8009648 <RCCEx_PLL3_Config+0x104>)
 8009636:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009638:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800963c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800963e:	e7dd      	b.n	80095fc <RCCEx_PLL3_Config+0xb8>
  return status;
 8009640:	2000      	movs	r0, #0
 8009642:	e79b      	b.n	800957c <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8009644:	2001      	movs	r0, #1
}
 8009646:	4770      	bx	lr
 8009648:	58024400 	.word	0x58024400
 800964c:	ffff0007 	.word	0xffff0007

08009650 <HAL_RCCEx_PeriphCLKConfig>:
{
 8009650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009652:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009654:	6803      	ldr	r3, [r0, #0]
 8009656:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800965a:	d030      	beq.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800965c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800965e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009662:	d026      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009664:	d80e      	bhi.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8009666:	b1eb      	cbz	r3, 80096a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8009668:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800966c:	d107      	bne.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800966e:	2102      	movs	r1, #2
 8009670:	3004      	adds	r0, #4
 8009672:	f7ff fee1 	bl	8009438 <RCCEx_PLL2_Config>
 8009676:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009678:	b145      	cbz	r5, 800968c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800967a:	462e      	mov	r6, r5
 800967c:	e021      	b.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800967e:	2601      	movs	r6, #1
 8009680:	4635      	mov	r5, r6
 8009682:	e01e      	b.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8009684:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009688:	d109      	bne.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800968a:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800968c:	4a95      	ldr	r2, [pc, #596]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800968e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009690:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009694:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8009696:	430b      	orrs	r3, r1
 8009698:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800969a:	2600      	movs	r6, #0
 800969c:	e011      	b.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800969e:	2601      	movs	r6, #1
 80096a0:	4635      	mov	r5, r6
 80096a2:	e00e      	b.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096a4:	4a8f      	ldr	r2, [pc, #572]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80096a6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80096a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80096ae:	2500      	movs	r5, #0
 80096b0:	e7ec      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096b2:	2102      	movs	r1, #2
 80096b4:	3024      	adds	r0, #36	@ 0x24
 80096b6:	f7ff ff45 	bl	8009544 <RCCEx_PLL3_Config>
 80096ba:	4605      	mov	r5, r0
      break;
 80096bc:	e7dc      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096be:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80096c0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80096c8:	d014      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai1ClockSelection)
 80096ca:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80096cc:	2b04      	cmp	r3, #4
 80096ce:	d830      	bhi.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80096d0:	e8df f003 	tbb	[pc, r3]
 80096d4:	08282203 	.word	0x08282203
 80096d8:	08          	.byte	0x08
 80096d9:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096da:	4a82      	ldr	r2, [pc, #520]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80096dc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80096de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 80096e4:	bb45      	cbnz	r5, 8009738 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80096e6:	4a7f      	ldr	r2, [pc, #508]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80096e8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80096ea:	f023 0307 	bic.w	r3, r3, #7
 80096ee:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80096f0:	430b      	orrs	r3, r1
 80096f2:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80096f4:	6823      	ldr	r3, [r4, #0]
 80096f6:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80096fa:	d02f      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai23ClockSelection)
 80096fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80096fe:	2b80      	cmp	r3, #128	@ 0x80
 8009700:	d049      	beq.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x146>
 8009702:	d81e      	bhi.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8009704:	2b00      	cmp	r3, #0
 8009706:	d040      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8009708:	2b40      	cmp	r3, #64	@ 0x40
 800970a:	d117      	bne.n	800973c <HAL_RCCEx_PeriphCLKConfig+0xec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800970c:	2100      	movs	r1, #0
 800970e:	1d20      	adds	r0, r4, #4
 8009710:	f7ff fe92 	bl	8009438 <RCCEx_PLL2_Config>
 8009714:	4605      	mov	r5, r0
      break;
 8009716:	e019      	b.n	800974c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009718:	2100      	movs	r1, #0
 800971a:	1d20      	adds	r0, r4, #4
 800971c:	f7ff fe8c 	bl	8009438 <RCCEx_PLL2_Config>
 8009720:	4605      	mov	r5, r0
      break;
 8009722:	e7df      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009724:	2100      	movs	r1, #0
 8009726:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800972a:	f7ff ff0b 	bl	8009544 <RCCEx_PLL3_Config>
 800972e:	4605      	mov	r5, r0
      break;
 8009730:	e7d8      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009732:	2601      	movs	r6, #1
 8009734:	4635      	mov	r5, r6
 8009736:	e7dd      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8009738:	462e      	mov	r6, r5
 800973a:	e7db      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai23ClockSelection)
 800973c:	2601      	movs	r6, #1
 800973e:	4635      	mov	r5, r6
 8009740:	e00c      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8009742:	2bc0      	cmp	r3, #192	@ 0xc0
 8009744:	d002      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8009746:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800974a:	d11b      	bne.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 800974c:	bb55      	cbnz	r5, 80097a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800974e:	4a65      	ldr	r2, [pc, #404]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8009750:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009752:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8009756:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8009758:	430b      	orrs	r3, r1
 800975a:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800975c:	6823      	ldr	r3, [r4, #0]
 800975e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8009762:	d045      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8009764:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8009768:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800976c:	d038      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800976e:	d81e      	bhi.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8009770:	b383      	cbz	r3, 80097d4 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8009772:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009776:	d117      	bne.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009778:	2100      	movs	r1, #0
 800977a:	1d20      	adds	r0, r4, #4
 800977c:	f7ff fe5c 	bl	8009438 <RCCEx_PLL2_Config>
 8009780:	4605      	mov	r5, r0
      break;
 8009782:	e01a      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8009784:	2601      	movs	r6, #1
 8009786:	4635      	mov	r5, r6
 8009788:	e7e8      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800978a:	4a56      	ldr	r2, [pc, #344]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800978c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800978e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009792:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 8009794:	e7da      	b.n	800974c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009796:	2100      	movs	r1, #0
 8009798:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800979c:	f7ff fed2 	bl	8009544 <RCCEx_PLL3_Config>
 80097a0:	4605      	mov	r5, r0
      break;
 80097a2:	e7d3      	b.n	800974c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80097a4:	462e      	mov	r6, r5
 80097a6:	e7d9      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai4AClockSelection)
 80097a8:	2601      	movs	r6, #1
 80097aa:	4635      	mov	r5, r6
 80097ac:	e020      	b.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 80097ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80097b2:	d002      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80097b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80097b8:	d109      	bne.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x17e>
    if(ret == HAL_OK)
 80097ba:	b9c5      	cbnz	r5, 80097ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80097bc:	4a49      	ldr	r2, [pc, #292]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80097be:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80097c0:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 80097c4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 80097c8:	430b      	orrs	r3, r1
 80097ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80097cc:	e010      	b.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    switch(PeriphClkInit->Sai4AClockSelection)
 80097ce:	2601      	movs	r6, #1
 80097d0:	4635      	mov	r5, r6
 80097d2:	e00d      	b.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097d4:	4a43      	ldr	r2, [pc, #268]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80097d6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80097d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 80097de:	e7ec      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x16a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80097e0:	2100      	movs	r1, #0
 80097e2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80097e6:	f7ff fead 	bl	8009544 <RCCEx_PLL3_Config>
 80097ea:	4605      	mov	r5, r0
      break;
 80097ec:	e7e5      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80097ee:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80097f0:	6823      	ldr	r3, [r4, #0]
 80097f2:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80097f6:	d023      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->Sai4BClockSelection)
 80097f8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 80097fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009800:	d041      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8009802:	d80d      	bhi.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8009804:	2b00      	cmp	r3, #0
 8009806:	d038      	beq.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009808:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800980c:	d105      	bne.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800980e:	2100      	movs	r1, #0
 8009810:	1d20      	adds	r0, r4, #4
 8009812:	f7ff fe11 	bl	8009438 <RCCEx_PLL2_Config>
 8009816:	4605      	mov	r5, r0
      break;
 8009818:	e008      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch(PeriphClkInit->Sai4BClockSelection)
 800981a:	2601      	movs	r6, #1
 800981c:	4635      	mov	r5, r6
 800981e:	e00f      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8009820:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009824:	d002      	beq.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009826:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800982a:	d123      	bne.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 800982c:	2d00      	cmp	r5, #0
 800982e:	d131      	bne.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009830:	4a2c      	ldr	r2, [pc, #176]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8009832:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009834:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8009838:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 800983c:	430b      	orrs	r3, r1
 800983e:	6593      	str	r3, [r2, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009840:	6823      	ldr	r3, [r4, #0]
 8009842:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8009846:	d02e      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->QspiClockSelection)
 8009848:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800984a:	2b20      	cmp	r3, #32
 800984c:	d03f      	beq.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800984e:	d826      	bhi.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8009850:	b133      	cbz	r3, 8009860 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8009852:	2b10      	cmp	r3, #16
 8009854:	d120      	bne.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009856:	4a23      	ldr	r2, [pc, #140]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8009858:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800985a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800985e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8009860:	2d00      	cmp	r5, #0
 8009862:	d13a      	bne.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x28a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009864:	4a1f      	ldr	r2, [pc, #124]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8009866:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8009868:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800986c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800986e:	430b      	orrs	r3, r1
 8009870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009872:	e018      	b.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->Sai4BClockSelection)
 8009874:	2601      	movs	r6, #1
 8009876:	4635      	mov	r5, r6
 8009878:	e7e2      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800987a:	4a1a      	ldr	r2, [pc, #104]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800987c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800987e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009882:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 8009884:	e7d2      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009886:	2100      	movs	r1, #0
 8009888:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800988c:	f7ff fe5a 	bl	8009544 <RCCEx_PLL3_Config>
 8009890:	4605      	mov	r5, r0
      break;
 8009892:	e7cb      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009894:	462e      	mov	r6, r5
 8009896:	e7d3      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->QspiClockSelection)
 8009898:	2601      	movs	r6, #1
 800989a:	4635      	mov	r5, r6
 800989c:	e003      	b.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800989e:	2b30      	cmp	r3, #48	@ 0x30
 80098a0:	d0de      	beq.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80098a2:	2601      	movs	r6, #1
 80098a4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80098ac:	d02b      	beq.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi123ClockSelection)
 80098ae:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80098b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098b4:	d04c      	beq.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80098b6:	d817      	bhi.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d043      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80098bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098c0:	d10d      	bne.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x28e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098c2:	2100      	movs	r1, #0
 80098c4:	1d20      	adds	r0, r4, #4
 80098c6:	f7ff fdb7 	bl	8009438 <RCCEx_PLL2_Config>
 80098ca:	4605      	mov	r5, r0
      break;
 80098cc:	e012      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098ce:	2102      	movs	r1, #2
 80098d0:	1d20      	adds	r0, r4, #4
 80098d2:	f7ff fdb1 	bl	8009438 <RCCEx_PLL2_Config>
 80098d6:	4605      	mov	r5, r0
      break;
 80098d8:	e7c2      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80098da:	462e      	mov	r6, r5
 80098dc:	e7e3      	b.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->Spi123ClockSelection)
 80098de:	2601      	movs	r6, #1
 80098e0:	4635      	mov	r5, r6
 80098e2:	e010      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 80098e4:	58024400 	.word	0x58024400
 80098e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80098ec:	d002      	beq.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 80098ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098f2:	d124      	bne.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    if(ret == HAL_OK)
 80098f4:	2d00      	cmp	r5, #0
 80098f6:	d132      	bne.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80098f8:	4a75      	ldr	r2, [pc, #468]	@ (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80098fa:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80098fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009900:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8009902:	430b      	orrs	r3, r1
 8009904:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800990c:	d037      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi45ClockSelection)
 800990e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8009910:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009914:	d051      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8009916:	d827      	bhi.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8009918:	b13b      	cbz	r3, 800992a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800991a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800991e:	d120      	bne.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009920:	2101      	movs	r1, #1
 8009922:	1d20      	adds	r0, r4, #4
 8009924:	f7ff fd88 	bl	8009438 <RCCEx_PLL2_Config>
 8009928:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800992a:	2d00      	cmp	r5, #0
 800992c:	d14c      	bne.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800992e:	4a68      	ldr	r2, [pc, #416]	@ (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8009930:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009932:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8009936:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8009938:	430b      	orrs	r3, r1
 800993a:	6513      	str	r3, [r2, #80]	@ 0x50
 800993c:	e01f      	b.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi123ClockSelection)
 800993e:	2601      	movs	r6, #1
 8009940:	4635      	mov	r5, r6
 8009942:	e7e0      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009944:	4a62      	ldr	r2, [pc, #392]	@ (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8009946:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800994c:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 800994e:	e7d1      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009950:	2100      	movs	r1, #0
 8009952:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009956:	f7ff fdf5 	bl	8009544 <RCCEx_PLL3_Config>
 800995a:	4605      	mov	r5, r0
      break;
 800995c:	e7ca      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 800995e:	462e      	mov	r6, r5
 8009960:	e7d1      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009962:	2601      	movs	r6, #1
 8009964:	4635      	mov	r5, r6
 8009966:	e00a      	b.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8009968:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800996c:	d0dd      	beq.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800996e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009972:	d0da      	beq.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009974:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009978:	d0d7      	beq.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800997a:	2601      	movs	r6, #1
 800997c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8009984:	d030      	beq.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009986:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 800998a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800998e:	d044      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8009990:	d81f      	bhi.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009992:	b13b      	cbz	r3, 80099a4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8009994:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009998:	d118      	bne.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800999a:	2101      	movs	r1, #1
 800999c:	1d20      	adds	r0, r4, #4
 800999e:	f7ff fd4b 	bl	8009438 <RCCEx_PLL2_Config>
 80099a2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80099a4:	2d00      	cmp	r5, #0
 80099a6:	d13f      	bne.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80099a8:	4a49      	ldr	r2, [pc, #292]	@ (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80099aa:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80099ac:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 80099b0:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 80099b4:	430b      	orrs	r3, r1
 80099b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80099b8:	e016      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80099ba:	2101      	movs	r1, #1
 80099bc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80099c0:	f7ff fdc0 	bl	8009544 <RCCEx_PLL3_Config>
 80099c4:	4605      	mov	r5, r0
      break;
 80099c6:	e7b0      	b.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80099c8:	462e      	mov	r6, r5
 80099ca:	e7d8      	b.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi6ClockSelection)
 80099cc:	2601      	movs	r6, #1
 80099ce:	4635      	mov	r5, r6
 80099d0:	e00a      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80099d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099d6:	d0e5      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80099d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099dc:	d0e2      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80099de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099e2:	d0df      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80099e4:	2601      	movs	r6, #1
 80099e6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80099e8:	6823      	ldr	r3, [r4, #0]
 80099ea:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80099ee:	d009      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FdcanClockSelection)
 80099f0:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80099f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099f6:	d019      	beq.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 80099f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099fc:	d024      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80099fe:	b1d3      	cbz	r3, 8009a36 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8009a00:	2601      	movs	r6, #1
 8009a02:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009a04:	6823      	ldr	r3, [r4, #0]
 8009a06:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8009a0a:	d032      	beq.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x422>
    switch(PeriphClkInit->FmcClockSelection)
 8009a0c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009a0e:	2b03      	cmp	r3, #3
 8009a10:	d859      	bhi.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009a12:	e8df f003 	tbb	[pc, r3]
 8009a16:	2126      	.short	0x2126
 8009a18:	2652      	.short	0x2652
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a1a:	2101      	movs	r1, #1
 8009a1c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009a20:	f7ff fd90 	bl	8009544 <RCCEx_PLL3_Config>
 8009a24:	4605      	mov	r5, r0
      break;
 8009a26:	e7bd      	b.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8009a28:	462e      	mov	r6, r5
 8009a2a:	e7dd      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a2c:	4a28      	ldr	r2, [pc, #160]	@ (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8009a2e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8009a36:	b96d      	cbnz	r5, 8009a54 <HAL_RCCEx_PeriphCLKConfig+0x404>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009a38:	4a25      	ldr	r2, [pc, #148]	@ (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8009a3a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009a3c:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8009a40:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8009a42:	430b      	orrs	r3, r1
 8009a44:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a46:	e7dd      	b.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a48:	2101      	movs	r1, #1
 8009a4a:	1d20      	adds	r0, r4, #4
 8009a4c:	f7ff fcf4 	bl	8009438 <RCCEx_PLL2_Config>
 8009a50:	4605      	mov	r5, r0
      break;
 8009a52:	e7f0      	b.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8009a54:	462e      	mov	r6, r5
 8009a56:	e7d5      	b.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a58:	4a1d      	ldr	r2, [pc, #116]	@ (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8009a5a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a60:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8009a62:	bb9d      	cbnz	r5, 8009acc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009a64:	4a1a      	ldr	r2, [pc, #104]	@ (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8009a66:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8009a68:	f023 0303 	bic.w	r3, r3, #3
 8009a6c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009a6e:	430b      	orrs	r3, r1
 8009a70:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8009a78:	d12c      	bne.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009a7a:	6823      	ldr	r3, [r4, #0]
 8009a7c:	f013 0f01 	tst.w	r3, #1
 8009a80:	f000 80a3 	beq.w	8009bca <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009a84:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8009a86:	2b28      	cmp	r3, #40	@ 0x28
 8009a88:	f200 809d 	bhi.w	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8009a8c:	e8df f003 	tbb	[pc, r3]
 8009a90:	9b9b9b8b 	.word	0x9b9b9b8b
 8009a94:	9b9b9b9b 	.word	0x9b9b9b9b
 8009a98:	9b9b9b86 	.word	0x9b9b9b86
 8009a9c:	9b9b9b9b 	.word	0x9b9b9b9b
 8009aa0:	9b9b9b94 	.word	0x9b9b9b94
 8009aa4:	9b9b9b9b 	.word	0x9b9b9b9b
 8009aa8:	9b9b9b8b 	.word	0x9b9b9b8b
 8009aac:	9b9b9b9b 	.word	0x9b9b9b9b
 8009ab0:	9b9b9b8b 	.word	0x9b9b9b8b
 8009ab4:	9b9b9b9b 	.word	0x9b9b9b9b
 8009ab8:	8b          	.byte	0x8b
 8009ab9:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009aba:	2102      	movs	r1, #2
 8009abc:	1d20      	adds	r0, r4, #4
 8009abe:	f7ff fcbb 	bl	8009438 <RCCEx_PLL2_Config>
 8009ac2:	4605      	mov	r5, r0
      break;
 8009ac4:	e7cd      	b.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x412>
    switch(PeriphClkInit->FmcClockSelection)
 8009ac6:	2601      	movs	r6, #1
 8009ac8:	4635      	mov	r5, r6
 8009aca:	e7d2      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8009acc:	462e      	mov	r6, r5
 8009ace:	e7d0      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8009ad0:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ad4:	4a8f      	ldr	r2, [pc, #572]	@ (8009d14 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009ad6:	6813      	ldr	r3, [r2, #0]
 8009ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009adc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8009ade:	f7f9 fd13 	bl	8003508 <HAL_GetTick>
 8009ae2:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ae4:	4b8b      	ldr	r3, [pc, #556]	@ (8009d14 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8009aec:	d105      	bne.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009aee:	f7f9 fd0b 	bl	8003508 <HAL_GetTick>
 8009af2:	1bc0      	subs	r0, r0, r7
 8009af4:	2864      	cmp	r0, #100	@ 0x64
 8009af6:	d9f5      	bls.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = HAL_TIMEOUT;
 8009af8:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8009afa:	2d00      	cmp	r5, #0
 8009afc:	d14a      	bne.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x544>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009afe:	4b86      	ldr	r3, [pc, #536]	@ (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b02:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 8009b06:	4053      	eors	r3, r2
 8009b08:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8009b0c:	d00c      	beq.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b0e:	4b82      	ldr	r3, [pc, #520]	@ (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009b10:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009b12:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b16:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009b18:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8009b1c:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009b1e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009b20:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8009b24:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8009b26:	671a      	str	r2, [r3, #112]	@ 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009b28:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8009b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b30:	d015      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x50e>
      if(ret == HAL_OK)
 8009b32:	bb8d      	cbnz	r5, 8009b98 <HAL_RCCEx_PeriphCLKConfig+0x548>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b34:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8009b38:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8009b3c:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8009b40:	d01e      	beq.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x530>
 8009b42:	4a75      	ldr	r2, [pc, #468]	@ (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009b44:	6913      	ldr	r3, [r2, #16]
 8009b46:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009b4a:	6113      	str	r3, [r2, #16]
 8009b4c:	4972      	ldr	r1, [pc, #456]	@ (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009b4e:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8009b50:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 8009b54:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	670b      	str	r3, [r1, #112]	@ 0x70
 8009b5c:	e78d      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x42a>
        tickstart = HAL_GetTick();
 8009b5e:	f7f9 fcd3 	bl	8003508 <HAL_GetTick>
 8009b62:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b64:	4b6c      	ldr	r3, [pc, #432]	@ (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b68:	f013 0f02 	tst.w	r3, #2
 8009b6c:	d1e1      	bne.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b6e:	f7f9 fccb 	bl	8003508 <HAL_GetTick>
 8009b72:	1bc0      	subs	r0, r0, r7
 8009b74:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009b78:	4298      	cmp	r0, r3
 8009b7a:	d9f3      	bls.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x514>
            ret = HAL_TIMEOUT;
 8009b7c:	2503      	movs	r5, #3
 8009b7e:	e7d8      	b.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b80:	4865      	ldr	r0, [pc, #404]	@ (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009b82:	6902      	ldr	r2, [r0, #16]
 8009b84:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8009b88:	4964      	ldr	r1, [pc, #400]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009b8a:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	6103      	str	r3, [r0, #16]
 8009b92:	e7db      	b.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      status = ret;
 8009b94:	462e      	mov	r6, r5
 8009b96:	e770      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x42a>
        status = ret;
 8009b98:	462e      	mov	r6, r5
 8009b9a:	e76e      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x42a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b9c:	2101      	movs	r1, #1
 8009b9e:	1d20      	adds	r0, r4, #4
 8009ba0:	f7ff fc4a 	bl	8009438 <RCCEx_PLL2_Config>
 8009ba4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009ba6:	b9e5      	cbnz	r5, 8009be2 <HAL_RCCEx_PeriphCLKConfig+0x592>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009ba8:	4a5b      	ldr	r2, [pc, #364]	@ (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009baa:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8009bac:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8009bb0:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8009bb2:	430b      	orrs	r3, r1
 8009bb4:	6553      	str	r3, [r2, #84]	@ 0x54
 8009bb6:	e008      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x57a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bb8:	2101      	movs	r1, #1
 8009bba:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009bbe:	f7ff fcc1 	bl	8009544 <RCCEx_PLL3_Config>
 8009bc2:	4605      	mov	r5, r0
      break;
 8009bc4:	e7ef      	b.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009bc6:	2601      	movs	r6, #1
 8009bc8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	f013 0f02 	tst.w	r3, #2
 8009bd0:	d016      	beq.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009bd2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8009bd4:	2b05      	cmp	r3, #5
 8009bd6:	d827      	bhi.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 8009bd8:	e8df f003 	tbb	[pc, r3]
 8009bdc:	0a1f050a 	.word	0x0a1f050a
 8009be0:	0a0a      	.short	0x0a0a
 8009be2:	462e      	mov	r6, r5
 8009be4:	e7f1      	b.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x57a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009be6:	2101      	movs	r1, #1
 8009be8:	1d20      	adds	r0, r4, #4
 8009bea:	f7ff fc25 	bl	8009438 <RCCEx_PLL2_Config>
 8009bee:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009bf0:	b9ed      	cbnz	r5, 8009c2e <HAL_RCCEx_PeriphCLKConfig+0x5de>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009bf2:	4a49      	ldr	r2, [pc, #292]	@ (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009bf4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8009bf6:	f023 0307 	bic.w	r3, r3, #7
 8009bfa:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8009bfc:	430b      	orrs	r3, r1
 8009bfe:	6553      	str	r3, [r2, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009c00:	6823      	ldr	r3, [r4, #0]
 8009c02:	f013 0f04 	tst.w	r3, #4
 8009c06:	d022      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009c08:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009c0c:	2b05      	cmp	r3, #5
 8009c0e:	d843      	bhi.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8009c10:	e8df f003 	tbb	[pc, r3]
 8009c14:	143b0f14 	.word	0x143b0f14
 8009c18:	1414      	.short	0x1414
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c1a:	2101      	movs	r1, #1
 8009c1c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009c20:	f7ff fc90 	bl	8009544 <RCCEx_PLL3_Config>
 8009c24:	4605      	mov	r5, r0
      break;
 8009c26:	e7e3      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009c28:	2601      	movs	r6, #1
 8009c2a:	4635      	mov	r5, r6
 8009c2c:	e7e8      	b.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8009c2e:	462e      	mov	r6, r5
 8009c30:	e7e6      	b.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c32:	2101      	movs	r1, #1
 8009c34:	1d20      	adds	r0, r4, #4
 8009c36:	f7ff fbff 	bl	8009438 <RCCEx_PLL2_Config>
 8009c3a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009c3c:	bb7d      	cbnz	r5, 8009c9e <HAL_RCCEx_PeriphCLKConfig+0x64e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c3e:	4a36      	ldr	r2, [pc, #216]	@ (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009c40:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009c42:	f023 0307 	bic.w	r3, r3, #7
 8009c46:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8009c4a:	430b      	orrs	r3, r1
 8009c4c:	6593      	str	r3, [r2, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c4e:	6823      	ldr	r3, [r4, #0]
 8009c50:	f013 0f20 	tst.w	r3, #32
 8009c54:	d033      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c56:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8009c5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c5e:	d04c      	beq.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8009c60:	d822      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8009c62:	b13b      	cbz	r3, 8009c74 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8009c64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c68:	d11b      	bne.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x652>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	1d20      	adds	r0, r4, #4
 8009c6e:	f7ff fbe3 	bl	8009438 <RCCEx_PLL2_Config>
 8009c72:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009c74:	2d00      	cmp	r5, #0
 8009c76:	d147      	bne.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c78:	4a27      	ldr	r2, [pc, #156]	@ (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009c7a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8009c7c:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8009c80:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8009c84:	430b      	orrs	r3, r1
 8009c86:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c88:	e019      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x66e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c8a:	2101      	movs	r1, #1
 8009c8c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009c90:	f7ff fc58 	bl	8009544 <RCCEx_PLL3_Config>
 8009c94:	4605      	mov	r5, r0
      break;
 8009c96:	e7d1      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009c98:	2601      	movs	r6, #1
 8009c9a:	4635      	mov	r5, r6
 8009c9c:	e7d7      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
 8009c9e:	462e      	mov	r6, r5
 8009ca0:	e7d5      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009ca2:	2601      	movs	r6, #1
 8009ca4:	4635      	mov	r5, r6
 8009ca6:	e00a      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cac:	d0e2      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8009cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009cb2:	d0df      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8009cb4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009cb8:	d0dc      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8009cba:	2601      	movs	r6, #1
 8009cbc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009cbe:	6823      	ldr	r3, [r4, #0]
 8009cc0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009cc4:	d037      	beq.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009cc6:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8009cca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cce:	d052      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8009cd0:	d826      	bhi.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8009cd2:	b13b      	cbz	r3, 8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8009cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cd8:	d118      	bne.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cda:	2100      	movs	r1, #0
 8009cdc:	1d20      	adds	r0, r4, #4
 8009cde:	f7ff fbab 	bl	8009438 <RCCEx_PLL2_Config>
 8009ce2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009ce4:	2d00      	cmp	r5, #0
 8009ce6:	d14d      	bne.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009cea:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009cec:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8009cf0:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8009cf4:	430b      	orrs	r3, r1
 8009cf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8009cf8:	e01d      	b.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009cfa:	2102      	movs	r1, #2
 8009cfc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009d00:	f7ff fc20 	bl	8009544 <RCCEx_PLL3_Config>
 8009d04:	4605      	mov	r5, r0
      break;
 8009d06:	e7b5      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8009d08:	462e      	mov	r6, r5
 8009d0a:	e7d8      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009d0c:	2601      	movs	r6, #1
 8009d0e:	4635      	mov	r5, r6
 8009d10:	e011      	b.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
 8009d12:	bf00      	nop
 8009d14:	58024800 	.word	0x58024800
 8009d18:	58024400 	.word	0x58024400
 8009d1c:	00ffffcf 	.word	0x00ffffcf
 8009d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d24:	d0de      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8009d26:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009d2a:	d0db      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8009d2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d30:	d0d8      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8009d32:	2601      	movs	r6, #1
 8009d34:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009d36:	6823      	ldr	r3, [r4, #0]
 8009d38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d3c:	d032      	beq.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x754>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009d3e:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8009d42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d46:	f000 809d 	beq.w	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8009d4a:	d820      	bhi.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009d4c:	b13b      	cbz	r3, 8009d5e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8009d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d52:	d119      	bne.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x738>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d54:	2100      	movs	r1, #0
 8009d56:	1d20      	adds	r0, r4, #4
 8009d58:	f7ff fb6e 	bl	8009438 <RCCEx_PLL2_Config>
 8009d5c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009d5e:	2d00      	cmp	r5, #0
 8009d60:	f040 8097 	bne.w	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x842>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009d64:	4aa5      	ldr	r2, [pc, #660]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009d66:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009d68:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8009d6c:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8009d70:	430b      	orrs	r3, r1
 8009d72:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d74:	e016      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x754>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d76:	2102      	movs	r1, #2
 8009d78:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009d7c:	f7ff fbe2 	bl	8009544 <RCCEx_PLL3_Config>
 8009d80:	4605      	mov	r5, r0
      break;
 8009d82:	e7af      	b.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8009d84:	462e      	mov	r6, r5
 8009d86:	e7d6      	b.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009d88:	2601      	movs	r6, #1
 8009d8a:	4635      	mov	r5, r6
 8009d8c:	e00a      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8009d8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d92:	d0e4      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8009d94:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009d98:	d0e1      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8009d9a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009d9e:	d0de      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8009da0:	2601      	movs	r6, #1
 8009da2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009da4:	6823      	ldr	r3, [r4, #0]
 8009da6:	f013 0f08 	tst.w	r3, #8
 8009daa:	d00c      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x776>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009dac:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8009db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009db4:	d06f      	beq.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009db6:	4a91      	ldr	r2, [pc, #580]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009db8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8009dba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8009dbe:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8009dc2:	430b      	orrs	r3, r1
 8009dc4:	6553      	str	r3, [r2, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009dc6:	6823      	ldr	r3, [r4, #0]
 8009dc8:	f013 0f10 	tst.w	r3, #16
 8009dcc:	d00c      	beq.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009dce:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8009dd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dd6:	d067      	beq.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x858>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009dd8:	4a88      	ldr	r2, [pc, #544]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009dda:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009ddc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009de0:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8009de4:	430b      	orrs	r3, r1
 8009de6:	6593      	str	r3, [r2, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009de8:	6823      	ldr	r3, [r4, #0]
 8009dea:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8009dee:	d00b      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    switch(PeriphClkInit->AdcClockSelection)
 8009df0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8009df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009df8:	d06e      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8009dfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dfe:	d061      	beq.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x874>
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d05a      	beq.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x86a>
 8009e04:	2601      	movs	r6, #1
 8009e06:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009e08:	6823      	ldr	r3, [r4, #0]
 8009e0a:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8009e0e:	d00c      	beq.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x7da>
    switch(PeriphClkInit->UsbClockSelection)
 8009e10:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8009e14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e18:	d076      	beq.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009e1a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e1e:	d069      	beq.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8009e20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e24:	d061      	beq.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8009e26:	2601      	movs	r6, #1
 8009e28:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8009e30:	d007      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    switch(PeriphClkInit->SdmmcClockSelection)
 8009e32:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d070      	beq.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 8009e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e3c:	d07b      	beq.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8009e3e:	2601      	movs	r6, #1
 8009e40:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009e42:	6823      	ldr	r3, [r4, #0]
 8009e44:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8009e48:	d17d      	bne.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009e4a:	6823      	ldr	r3, [r4, #0]
 8009e4c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009e50:	f000 8086 	beq.w	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x910>
    switch(PeriphClkInit->RngClockSelection)
 8009e54:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8009e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e5a:	f000 80c6 	beq.w	8009fea <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8009e5e:	d97c      	bls.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8009e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e64:	d003      	beq.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8009e66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e6a:	f040 80bc 	bne.w	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x996>
    if(ret == HAL_OK)
 8009e6e:	2d00      	cmp	r5, #0
 8009e70:	f040 80c1 	bne.w	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e74:	4a61      	ldr	r2, [pc, #388]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009e76:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8009e78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e7c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8009e7e:	430b      	orrs	r3, r1
 8009e80:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e82:	e06d      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x910>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009e84:	2102      	movs	r1, #2
 8009e86:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009e8a:	f7ff fb5b 	bl	8009544 <RCCEx_PLL3_Config>
 8009e8e:	4605      	mov	r5, r0
      break;
 8009e90:	e765      	b.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8009e92:	462e      	mov	r6, r5
 8009e94:	e786      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x754>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e96:	2102      	movs	r1, #2
 8009e98:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009e9c:	f7ff fb52 	bl	8009544 <RCCEx_PLL3_Config>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	d088      	beq.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x766>
          status = HAL_ERROR;
 8009ea4:	2601      	movs	r6, #1
 8009ea6:	e786      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x766>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009ea8:	2102      	movs	r1, #2
 8009eaa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009eae:	f7ff fb49 	bl	8009544 <RCCEx_PLL3_Config>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d090      	beq.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x788>
        status = HAL_ERROR;
 8009eb6:	2601      	movs	r6, #1
 8009eb8:	e78e      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x788>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009eba:	2100      	movs	r1, #0
 8009ebc:	1d20      	adds	r0, r4, #4
 8009ebe:	f7ff fabb 	bl	8009438 <RCCEx_PLL2_Config>
 8009ec2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009ec4:	b97d      	cbnz	r5, 8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x896>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009ec6:	4a4d      	ldr	r2, [pc, #308]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009ec8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009eca:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8009ece:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8009ed2:	430b      	orrs	r3, r1
 8009ed4:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ed6:	e797      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ed8:	2102      	movs	r1, #2
 8009eda:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009ede:	f7ff fb31 	bl	8009544 <RCCEx_PLL3_Config>
 8009ee2:	4605      	mov	r5, r0
      break;
 8009ee4:	e7ee      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x874>
 8009ee6:	462e      	mov	r6, r5
 8009ee8:	e78e      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eea:	4a44      	ldr	r2, [pc, #272]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009eec:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ef2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8009ef4:	b97d      	cbnz	r5, 8009f16 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009ef6:	4a41      	ldr	r2, [pc, #260]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009ef8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8009efa:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009efe:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8009f02:	430b      	orrs	r3, r1
 8009f04:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f06:	e790      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x7da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f08:	2101      	movs	r1, #1
 8009f0a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009f0e:	f7ff fb19 	bl	8009544 <RCCEx_PLL3_Config>
 8009f12:	4605      	mov	r5, r0
      break;
 8009f14:	e7ee      	b.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8009f16:	462e      	mov	r6, r5
 8009f18:	e787      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x7da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f1a:	4a38      	ldr	r2, [pc, #224]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009f1c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f22:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8009f24:	b96d      	cbnz	r5, 8009f42 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009f26:	4a35      	ldr	r2, [pc, #212]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009f28:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8009f2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f2e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8009f30:	430b      	orrs	r3, r1
 8009f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009f34:	e785      	b.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009f36:	2102      	movs	r1, #2
 8009f38:	1d20      	adds	r0, r4, #4
 8009f3a:	f7ff fa7d 	bl	8009438 <RCCEx_PLL2_Config>
 8009f3e:	4605      	mov	r5, r0
      break;
 8009f40:	e7f0      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 8009f42:	462e      	mov	r6, r5
 8009f44:	e77d      	b.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009f46:	2102      	movs	r1, #2
 8009f48:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009f4c:	f7ff fafa 	bl	8009544 <RCCEx_PLL3_Config>
 8009f50:	2800      	cmp	r0, #0
 8009f52:	f43f af7a 	beq.w	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x7fa>
      status=HAL_ERROR;
 8009f56:	2601      	movs	r6, #1
 8009f58:	e777      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    switch(PeriphClkInit->RngClockSelection)
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d087      	beq.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8009f5e:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f60:	6823      	ldr	r3, [r4, #0]
 8009f62:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8009f66:	d006      	beq.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x926>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f68:	4a24      	ldr	r2, [pc, #144]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009f6a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009f6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f70:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8009f72:	430b      	orrs	r3, r1
 8009f74:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8009f7c:	d007      	beq.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x93e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009f80:	6913      	ldr	r3, [r2, #16]
 8009f82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009f86:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 8009f8a:	430b      	orrs	r3, r1
 8009f8c:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009f8e:	6823      	ldr	r3, [r4, #0]
 8009f90:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8009f94:	d006      	beq.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x954>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009f96:	4a19      	ldr	r2, [pc, #100]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009f98:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009f9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f9e:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8009fa0:	430b      	orrs	r3, r1
 8009fa2:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009fa4:	6823      	ldr	r3, [r4, #0]
 8009fa6:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009faa:	d009      	beq.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x970>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009fac:	4b13      	ldr	r3, [pc, #76]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009fae:	691a      	ldr	r2, [r3, #16]
 8009fb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009fb4:	611a      	str	r2, [r3, #16]
 8009fb6:	691a      	ldr	r2, [r3, #16]
 8009fb8:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
 8009fbc:	430a      	orrs	r2, r1
 8009fbe:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009fc0:	6823      	ldr	r3, [r4, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	db1c      	blt.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8009fcc:	d007      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x98e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009fce:	4a0b      	ldr	r2, [pc, #44]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009fd0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8009fd2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8009fd6:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8009fda:	430b      	orrs	r3, r1
 8009fdc:	6553      	str	r3, [r2, #84]	@ 0x54
  if (status == HAL_OK)
 8009fde:	b106      	cbz	r6, 8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x992>
  return HAL_ERROR;
 8009fe0:	2601      	movs	r6, #1
}
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 8009fe6:	2601      	movs	r6, #1
 8009fe8:	e7ba      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fea:	4a04      	ldr	r2, [pc, #16]	@ (8009ffc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009fec:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 8009ff4:	e73b      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8009ff6:	462e      	mov	r6, r5
 8009ff8:	e7b2      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8009ffa:	bf00      	nop
 8009ffc:	58024400 	.word	0x58024400
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a000:	4a03      	ldr	r2, [pc, #12]	@ (800a010 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800a002:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a004:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800a008:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800a00a:	430b      	orrs	r3, r1
 800a00c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a00e:	e7da      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800a010:	58024400 	.word	0x58024400

0800a014 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800a014:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a016:	f7ff f99f 	bl	8009358 <HAL_RCC_GetHCLKFreq>
 800a01a:	4b05      	ldr	r3, [pc, #20]	@ (800a030 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800a01c:	6a1b      	ldr	r3, [r3, #32]
 800a01e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a022:	4a04      	ldr	r2, [pc, #16]	@ (800a034 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800a024:	5cd3      	ldrb	r3, [r2, r3]
 800a026:	f003 031f 	and.w	r3, r3, #31
}
 800a02a:	40d8      	lsrs	r0, r3
 800a02c:	bd08      	pop	{r3, pc}
 800a02e:	bf00      	nop
 800a030:	58024400 	.word	0x58024400
 800a034:	0801f3e4 	.word	0x0801f3e4

0800a038 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 800a038:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a03a:	4b78      	ldr	r3, [pc, #480]	@ (800a21c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800a03c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a03e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a040:	f3c4 3c05 	ubfx	ip, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a044:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a046:	f3c1 1100 	ubfx	r1, r1, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a04a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a04c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800a050:	fb01 f303 	mul.w	r3, r1, r3
  if (pll2m != 0U)
 800a054:	f414 3f7c 	tst.w	r4, #258048	@ 0x3f000
 800a058:	f000 80db 	beq.w	800a212 <HAL_RCCEx_GetPLL2ClockFreq+0x1da>
 800a05c:	f002 0203 	and.w	r2, r2, #3
 800a060:	ee07 3a90 	vmov	s15, r3
 800a064:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800a068:	2a01      	cmp	r2, #1
 800a06a:	d066      	beq.n	800a13a <HAL_RCCEx_GetPLL2ClockFreq+0x102>
 800a06c:	2a02      	cmp	r2, #2
 800a06e:	f000 80b3 	beq.w	800a1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a072:	b1e2      	cbz	r2, 800a0ae <HAL_RCCEx_GetPLL2ClockFreq+0x76>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a074:	ee07 ca10 	vmov	s14, ip
 800a078:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a07c:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 800a220 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800a080:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a084:	4b65      	ldr	r3, [pc, #404]	@ (800a21c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800a086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a08c:	ee06 3a90 	vmov	s13, r3
 800a090:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a094:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 800a224 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800a098:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a09c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0a8:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 800a0ac:	e061      	b.n	800a172 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0ae:	4b5b      	ldr	r3, [pc, #364]	@ (800a21c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f013 0f20 	tst.w	r3, #32
 800a0b6:	d023      	beq.n	800a100 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0b8:	4958      	ldr	r1, [pc, #352]	@ (800a21c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800a0ba:	680a      	ldr	r2, [r1, #0]
 800a0bc:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800a0c0:	4b59      	ldr	r3, [pc, #356]	@ (800a228 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 800a0c2:	40d3      	lsrs	r3, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a0c4:	ee07 3a10 	vmov	s14, r3
 800a0c8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a0cc:	ee07 ca10 	vmov	s14, ip
 800a0d0:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800a0d4:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800a0d8:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800a0da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0de:	ee06 3a90 	vmov	s13, r3
 800a0e2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a0e6:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 800a224 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800a0ea:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a0ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0fe:	e038      	b.n	800a172 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a100:	ee07 ca10 	vmov	s14, ip
 800a104:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a108:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 800a22c <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 800a10c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a110:	4b42      	ldr	r3, [pc, #264]	@ (800a21c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800a112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a118:	ee06 3a90 	vmov	s13, r3
 800a11c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a120:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 800a224 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800a124:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a12c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a134:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a138:	e01b      	b.n	800a172 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a13a:	ee07 ca10 	vmov	s14, ip
 800a13e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a142:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800a220 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800a146:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a14a:	4b34      	ldr	r3, [pc, #208]	@ (800a21c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800a14c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a14e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a152:	ee06 3a90 	vmov	s13, r3
 800a156:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a15a:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 800a224 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800a15e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a16a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a16e:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a172:	4a2a      	ldr	r2, [pc, #168]	@ (800a21c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800a174:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800a176:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a17a:	ee07 3a90 	vmov	s15, r3
 800a17e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a18a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800a18e:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800a192:	ed80 6a00 	vstr	s12, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a196:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800a198:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a19c:	ee07 3a90 	vmov	s15, r3
 800a1a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1a8:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800a1ac:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800a1b0:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a1b4:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800a1b6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a1ba:	ee07 3a90 	vmov	s15, r3
 800a1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a1ca:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a1ce:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800a1d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1d6:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1d8:	ee07 ca10 	vmov	s14, ip
 800a1dc:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a1e0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800a230 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 800a1e4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a1e8:	4b0c      	ldr	r3, [pc, #48]	@ (800a21c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800a1ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1f0:	ee06 3a90 	vmov	s13, r3
 800a1f4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a1f8:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 800a224 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800a1fc:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a200:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a204:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a208:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a20c:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 800a210:	e7af      	b.n	800a172 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a212:	2300      	movs	r3, #0
 800a214:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a216:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a218:	6083      	str	r3, [r0, #8]
}
 800a21a:	e7da      	b.n	800a1d2 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 800a21c:	58024400 	.word	0x58024400
 800a220:	4a742400 	.word	0x4a742400
 800a224:	39000000 	.word	0x39000000
 800a228:	03d09000 	.word	0x03d09000
 800a22c:	4c742400 	.word	0x4c742400
 800a230:	4bb71b00 	.word	0x4bb71b00

0800a234 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 800a234:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a236:	4b78      	ldr	r3, [pc, #480]	@ (800a418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800a238:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a23a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a23c:	f3c4 5c05 	ubfx	ip, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a240:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a242:	f3c1 2100 	ubfx	r1, r1, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a248:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800a24c:	fb01 f303 	mul.w	r3, r1, r3
  if (pll3m != 0U)
 800a250:	f014 7f7c 	tst.w	r4, #66060288	@ 0x3f00000
 800a254:	f000 80db 	beq.w	800a40e <HAL_RCCEx_GetPLL3ClockFreq+0x1da>
 800a258:	f002 0203 	and.w	r2, r2, #3
 800a25c:	ee07 3a90 	vmov	s15, r3
 800a260:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800a264:	2a01      	cmp	r2, #1
 800a266:	d066      	beq.n	800a336 <HAL_RCCEx_GetPLL3ClockFreq+0x102>
 800a268:	2a02      	cmp	r2, #2
 800a26a:	f000 80b3 	beq.w	800a3d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a26e:	b1e2      	cbz	r2, 800a2aa <HAL_RCCEx_GetPLL3ClockFreq+0x76>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a270:	ee07 ca10 	vmov	s14, ip
 800a274:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a278:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 800a41c <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800a27c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a280:	4b65      	ldr	r3, [pc, #404]	@ (800a418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800a282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a288:	ee06 3a90 	vmov	s13, r3
 800a28c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a290:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 800a420 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800a294:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a298:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a29c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2a4:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 800a2a8:	e061      	b.n	800a36e <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2aa:	4b5b      	ldr	r3, [pc, #364]	@ (800a418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f013 0f20 	tst.w	r3, #32
 800a2b2:	d023      	beq.n	800a2fc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2b4:	4958      	ldr	r1, [pc, #352]	@ (800a418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800a2b6:	680a      	ldr	r2, [r1, #0]
 800a2b8:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800a2bc:	4b59      	ldr	r3, [pc, #356]	@ (800a424 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 800a2be:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a2c0:	ee07 3a10 	vmov	s14, r3
 800a2c4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a2c8:	ee07 ca10 	vmov	s14, ip
 800a2cc:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800a2d0:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800a2d4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a2d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2da:	ee06 3a90 	vmov	s13, r3
 800a2de:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a2e2:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 800a420 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800a2e6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a2ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2fa:	e038      	b.n	800a36e <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a2fc:	ee07 ca10 	vmov	s14, ip
 800a300:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a304:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 800a428 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 800a308:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a30c:	4b42      	ldr	r3, [pc, #264]	@ (800a418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800a30e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a314:	ee06 3a90 	vmov	s13, r3
 800a318:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a31c:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 800a420 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800a320:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a324:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a328:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a32c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a330:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a334:	e01b      	b.n	800a36e <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a336:	ee07 ca10 	vmov	s14, ip
 800a33a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a33e:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800a41c <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800a342:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a346:	4b34      	ldr	r3, [pc, #208]	@ (800a418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800a348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a34e:	ee06 3a90 	vmov	s13, r3
 800a352:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a356:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 800a420 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800a35a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a35e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a36a:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a36e:	4a2a      	ldr	r2, [pc, #168]	@ (800a418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800a370:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800a372:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a376:	ee07 3a90 	vmov	s15, r3
 800a37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a37e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a386:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800a38a:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800a38e:	ed80 6a00 	vstr	s12, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a392:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800a394:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a398:	ee07 3a90 	vmov	s15, r3
 800a39c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3a4:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800a3a8:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800a3ac:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a3b0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800a3b2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a3b6:	ee07 3a90 	vmov	s15, r3
 800a3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a3c6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a3ca:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800a3ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3d2:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a3d4:	ee07 ca10 	vmov	s14, ip
 800a3d8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a3dc:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800a42c <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 800a3e0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a3e4:	4b0c      	ldr	r3, [pc, #48]	@ (800a418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800a3e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ec:	ee06 3a90 	vmov	s13, r3
 800a3f0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a3f4:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 800a420 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800a3f8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a3fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a400:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a404:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a408:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 800a40c:	e7af      	b.n	800a36e <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a40e:	2300      	movs	r3, #0
 800a410:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a412:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a414:	6083      	str	r3, [r0, #8]
}
 800a416:	e7da      	b.n	800a3ce <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 800a418:	58024400 	.word	0x58024400
 800a41c:	4a742400 	.word	0x4a742400
 800a420:	39000000 	.word	0x39000000
 800a424:	03d09000 	.word	0x03d09000
 800a428:	4c742400 	.word	0x4c742400
 800a42c:	4bb71b00 	.word	0x4bb71b00

0800a430 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 800a430:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a432:	4b78      	ldr	r3, [pc, #480]	@ (800a614 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800a434:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a436:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a438:	f3c4 1c05 	ubfx	ip, r4, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a43c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a43e:	f001 0101 	and.w	r1, r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a444:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800a448:	fb01 f303 	mul.w	r3, r1, r3
  if (pll1m != 0U)
 800a44c:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
 800a450:	f000 80db 	beq.w	800a60a <HAL_RCCEx_GetPLL1ClockFreq+0x1da>
 800a454:	f002 0203 	and.w	r2, r2, #3
 800a458:	ee07 3a90 	vmov	s15, r3
 800a45c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800a460:	2a01      	cmp	r2, #1
 800a462:	d066      	beq.n	800a532 <HAL_RCCEx_GetPLL1ClockFreq+0x102>
 800a464:	2a02      	cmp	r2, #2
 800a466:	f000 80b3 	beq.w	800a5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1a0>
 800a46a:	b1e2      	cbz	r2, 800a4a6 <HAL_RCCEx_GetPLL1ClockFreq+0x76>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a46c:	ee07 ca10 	vmov	s14, ip
 800a470:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a474:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 800a618 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 800a478:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a47c:	4b65      	ldr	r3, [pc, #404]	@ (800a614 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800a47e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a484:	ee06 3a90 	vmov	s13, r3
 800a488:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a48c:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 800a61c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 800a490:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a494:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a498:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a49c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4a0:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 800a4a4:	e061      	b.n	800a56a <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4a6:	4b5b      	ldr	r3, [pc, #364]	@ (800a614 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f013 0f20 	tst.w	r3, #32
 800a4ae:	d023      	beq.n	800a4f8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4b0:	4958      	ldr	r1, [pc, #352]	@ (800a614 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800a4b2:	680a      	ldr	r2, [r1, #0]
 800a4b4:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800a4b8:	4b59      	ldr	r3, [pc, #356]	@ (800a620 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 800a4ba:	40d3      	lsrs	r3, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4bc:	ee07 3a10 	vmov	s14, r3
 800a4c0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a4c4:	ee07 ca10 	vmov	s14, ip
 800a4c8:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800a4cc:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800a4d0:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800a4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4d6:	ee06 3a90 	vmov	s13, r3
 800a4da:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a4de:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 800a61c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 800a4e2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a4e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4f6:	e038      	b.n	800a56a <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4f8:	ee07 ca10 	vmov	s14, ip
 800a4fc:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a500:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800a618 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 800a504:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a508:	4b42      	ldr	r3, [pc, #264]	@ (800a614 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800a50a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a50c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a510:	ee06 3a90 	vmov	s13, r3
 800a514:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a518:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 800a61c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 800a51c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a520:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a524:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a528:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a52c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a530:	e01b      	b.n	800a56a <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a532:	ee07 ca10 	vmov	s14, ip
 800a536:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a53a:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 800a624 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 800a53e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a542:	4b34      	ldr	r3, [pc, #208]	@ (800a614 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800a544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a54a:	ee06 3a90 	vmov	s13, r3
 800a54e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a552:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 800a61c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 800a556:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a55a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a55e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a566:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a56a:	4a2a      	ldr	r2, [pc, #168]	@ (800a614 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800a56c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a56e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a572:	ee07 3a90 	vmov	s15, r3
 800a576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a57a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a57e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a582:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800a586:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800a58a:	ed80 6a00 	vstr	s12, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a58e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a590:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a594:	ee07 3a90 	vmov	s15, r3
 800a598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a59c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5a0:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800a5a4:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800a5a8:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a5ac:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a5ae:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a5b2:	ee07 3a90 	vmov	s15, r3
 800a5b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a5c2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a5c6:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800a5ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5ce:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a5d0:	ee07 ca10 	vmov	s14, ip
 800a5d4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a5d8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800a628 <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 800a5dc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a5e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a614 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800a5e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5e8:	ee06 3a90 	vmov	s13, r3
 800a5ec:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a5f0:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 800a61c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 800a5f4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a5f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a600:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a604:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 800a608:	e7af      	b.n	800a56a <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a60a:	2300      	movs	r3, #0
 800a60c:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a60e:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a610:	6083      	str	r3, [r0, #8]
}
 800a612:	e7da      	b.n	800a5ca <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 800a614:	58024400 	.word	0x58024400
 800a618:	4c742400 	.word	0x4c742400
 800a61c:	39000000 	.word	0x39000000
 800a620:	03d09000 	.word	0x03d09000
 800a624:	4a742400 	.word	0x4a742400
 800a628:	4bb71b00 	.word	0x4bb71b00

0800a62c <HAL_RCCEx_GetPeriphCLKFreq>:
{
 800a62c:	b500      	push	{lr}
 800a62e:	b08b      	sub	sp, #44	@ 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a630:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800a634:	d020      	beq.n	800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a636:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800a63a:	d071      	beq.n	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a63c:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 800a640:	f000 80c8 	beq.w	800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a644:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 800a648:	f000 8121 	beq.w	800a88e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a64c:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800a650:	f000 8182 	beq.w	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a654:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 800a658:	f000 81db 	beq.w	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a65c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a660:	f000 821f 	beq.w	800aaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a664:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 800a668:	f000 8239 	beq.w	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a66c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800a670:	f000 8284 	beq.w	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
      frequency = 0;
 800a674:	2000      	movs	r0, #0
 800a676:	e2b2      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a678:	4b95      	ldr	r3, [pc, #596]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a67a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a67c:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 800a680:	2b04      	cmp	r3, #4
 800a682:	f200 82a3 	bhi.w	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800a686:	e8df f003 	tbb	[pc, r3]
 800a68a:	1005      	.short	0x1005
 800a68c:	031b      	.short	0x031b
 800a68e:	26          	.byte	0x26
 800a68f:	00          	.byte	0x00
 800a690:	4890      	ldr	r0, [pc, #576]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a692:	e2a4      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a694:	4b8e      	ldr	r3, [pc, #568]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a696:	6818      	ldr	r0, [r3, #0]
 800a698:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800a69c:	f000 829f 	beq.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6a0:	a807      	add	r0, sp, #28
 800a6a2:	f7ff fec5 	bl	800a430 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6a6:	9808      	ldr	r0, [sp, #32]
 800a6a8:	e299      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6aa:	4b89      	ldr	r3, [pc, #548]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a6ac:	6818      	ldr	r0, [r3, #0]
 800a6ae:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800a6b2:	f000 8294 	beq.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6b6:	a804      	add	r0, sp, #16
 800a6b8:	f7ff fcbe 	bl	800a038 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6bc:	9804      	ldr	r0, [sp, #16]
 800a6be:	e28e      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6c0:	4b83      	ldr	r3, [pc, #524]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a6c2:	6818      	ldr	r0, [r3, #0]
 800a6c4:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800a6c8:	f000 8289 	beq.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6cc:	a801      	add	r0, sp, #4
 800a6ce:	f7ff fdb1 	bl	800a234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a6d2:	9801      	ldr	r0, [sp, #4]
 800a6d4:	e283      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a6d6:	4a7e      	ldr	r2, [pc, #504]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a6d8:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a6da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6de:	6812      	ldr	r2, [r2, #0]
 800a6e0:	f012 0f04 	tst.w	r2, #4
 800a6e4:	d007      	beq.n	800a6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 800a6e6:	b933      	cbnz	r3, 800a6f6 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a6e8:	4b79      	ldr	r3, [pc, #484]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a6f0:	4879      	ldr	r0, [pc, #484]	@ (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800a6f2:	40d8      	lsrs	r0, r3
 800a6f4:	e273      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6f6:	4a76      	ldr	r2, [pc, #472]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a6f8:	6812      	ldr	r2, [r2, #0]
 800a6fa:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800a6fe:	d003      	beq.n	800a708 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800a700:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a704:	f000 8264 	beq.w	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a708:	4a71      	ldr	r2, [pc, #452]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a70a:	6812      	ldr	r2, [r2, #0]
 800a70c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800a710:	f000 8260 	beq.w	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a714:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a718:	f000 825e 	beq.w	800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
            frequency = 0;
 800a71c:	2000      	movs	r0, #0
 800a71e:	e25e      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a720:	4b6b      	ldr	r3, [pc, #428]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a724:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
      switch (saiclocksource)
 800a728:	2b80      	cmp	r3, #128	@ 0x80
 800a72a:	d033      	beq.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800a72c:	d915      	bls.n	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 800a72e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a730:	f000 8254 	beq.w	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 800a734:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a738:	d11f      	bne.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a73a:	4a65      	ldr	r2, [pc, #404]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a73c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a73e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a742:	6812      	ldr	r2, [r2, #0]
 800a744:	f012 0f04 	tst.w	r2, #4
 800a748:	d02f      	beq.n	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800a74a:	bb73      	cbnz	r3, 800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a74c:	4b60      	ldr	r3, [pc, #384]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a754:	4860      	ldr	r0, [pc, #384]	@ (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800a756:	40d8      	lsrs	r0, r3
 800a758:	e241      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 800a75a:	b183      	cbz	r3, 800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800a75c:	2b40      	cmp	r3, #64	@ 0x40
 800a75e:	d10a      	bne.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a760:	4b5b      	ldr	r3, [pc, #364]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a762:	6818      	ldr	r0, [r3, #0]
 800a764:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800a768:	f000 8239 	beq.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a76c:	a804      	add	r0, sp, #16
 800a76e:	f7ff fc63 	bl	800a038 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a772:	9804      	ldr	r0, [sp, #16]
 800a774:	e233      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 800a776:	2000      	movs	r0, #0
 800a778:	e231      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 800a77a:	2000      	movs	r0, #0
 800a77c:	e22f      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a77e:	4b54      	ldr	r3, [pc, #336]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a780:	6818      	ldr	r0, [r3, #0]
 800a782:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800a786:	f000 822a 	beq.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a78a:	a807      	add	r0, sp, #28
 800a78c:	f7ff fe50 	bl	800a430 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a790:	9808      	ldr	r0, [sp, #32]
 800a792:	e224      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a794:	4b4e      	ldr	r3, [pc, #312]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a796:	6818      	ldr	r0, [r3, #0]
 800a798:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800a79c:	f000 821f 	beq.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7a0:	a801      	add	r0, sp, #4
 800a7a2:	f7ff fd47 	bl	800a234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7a6:	9801      	ldr	r0, [sp, #4]
 800a7a8:	e219      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7aa:	4a49      	ldr	r2, [pc, #292]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a7ac:	6812      	ldr	r2, [r2, #0]
 800a7ae:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800a7b2:	d003      	beq.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800a7b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7b8:	f000 8214 	beq.w	800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7bc:	4a44      	ldr	r2, [pc, #272]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a7be:	6812      	ldr	r2, [r2, #0]
 800a7c0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800a7c4:	f000 8210 	beq.w	800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 800a7c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7cc:	f000 820e 	beq.w	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
            frequency = 0;
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	e204      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a7d4:	4b3e      	ldr	r3, [pc, #248]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a7d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7d8:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
      switch (saiclocksource)
 800a7dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a7e0:	d035      	beq.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 800a7e2:	d916      	bls.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a7e4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a7e8:	f000 8202 	beq.w	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800a7ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a7f0:	d120      	bne.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a7f2:	4a37      	ldr	r2, [pc, #220]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a7f4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a7f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7fa:	6812      	ldr	r2, [r2, #0]
 800a7fc:	f012 0f04 	tst.w	r2, #4
 800a800:	d030      	beq.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 800a802:	bb7b      	cbnz	r3, 800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a804:	4b32      	ldr	r3, [pc, #200]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a80c:	4832      	ldr	r0, [pc, #200]	@ (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800a80e:	40d8      	lsrs	r0, r3
 800a810:	e1e5      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 800a812:	b18b      	cbz	r3, 800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 800a814:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a818:	d10a      	bne.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a81a:	4b2d      	ldr	r3, [pc, #180]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a81c:	6818      	ldr	r0, [r3, #0]
 800a81e:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800a822:	f000 81dc 	beq.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a826:	a804      	add	r0, sp, #16
 800a828:	f7ff fc06 	bl	800a038 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a82c:	9804      	ldr	r0, [sp, #16]
 800a82e:	e1d6      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 800a830:	2000      	movs	r0, #0
 800a832:	e1d4      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 800a834:	2000      	movs	r0, #0
 800a836:	e1d2      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a838:	4b25      	ldr	r3, [pc, #148]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a83a:	6818      	ldr	r0, [r3, #0]
 800a83c:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800a840:	f000 81cd 	beq.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a844:	a807      	add	r0, sp, #28
 800a846:	f7ff fdf3 	bl	800a430 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a84a:	9808      	ldr	r0, [sp, #32]
 800a84c:	e1c7      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a84e:	4b20      	ldr	r3, [pc, #128]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a850:	6818      	ldr	r0, [r3, #0]
 800a852:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800a856:	f000 81c2 	beq.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a85a:	a801      	add	r0, sp, #4
 800a85c:	f7ff fcea 	bl	800a234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a860:	9801      	ldr	r0, [sp, #4]
 800a862:	e1bc      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a864:	4a1a      	ldr	r2, [pc, #104]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a866:	6812      	ldr	r2, [r2, #0]
 800a868:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800a86c:	d003      	beq.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 800a86e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a872:	f000 81bf 	beq.w	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a876:	4a16      	ldr	r2, [pc, #88]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a878:	6812      	ldr	r2, [r2, #0]
 800a87a:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800a87e:	f000 81bb 	beq.w	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a882:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a886:	f000 81b9 	beq.w	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
            frequency = 0;
 800a88a:	2000      	movs	r0, #0
 800a88c:	e1a7      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a88e:	4b10      	ldr	r3, [pc, #64]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a892:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
      switch (saiclocksource)
 800a896:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a89a:	d03d      	beq.n	800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 800a89c:	d91e      	bls.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 800a89e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a8a2:	f000 81ad 	beq.w	800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800a8a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a8aa:	d128      	bne.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a8ac:	4a08      	ldr	r2, [pc, #32]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a8ae:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a8b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8b4:	6812      	ldr	r2, [r2, #0]
 800a8b6:	f012 0f04 	tst.w	r2, #4
 800a8ba:	d038      	beq.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d136      	bne.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a8c0:	4b03      	ldr	r3, [pc, #12]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a8c8:	4803      	ldr	r0, [pc, #12]	@ (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800a8ca:	40d8      	lsrs	r0, r3
 800a8cc:	e187      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 800a8ce:	bf00      	nop
 800a8d0:	58024400 	.word	0x58024400
 800a8d4:	00bb8000 	.word	0x00bb8000
 800a8d8:	03d09000 	.word	0x03d09000
      switch (saiclocksource)
 800a8dc:	b18b      	cbz	r3, 800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800a8de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a8e2:	d10a      	bne.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8e4:	4b99      	ldr	r3, [pc, #612]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a8e6:	6818      	ldr	r0, [r3, #0]
 800a8e8:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800a8ec:	f000 8177 	beq.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8f0:	a804      	add	r0, sp, #16
 800a8f2:	f7ff fba1 	bl	800a038 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8f6:	9804      	ldr	r0, [sp, #16]
 800a8f8:	e171      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	e16f      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 800a8fe:	2000      	movs	r0, #0
 800a900:	e16d      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a902:	4b92      	ldr	r3, [pc, #584]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a904:	6818      	ldr	r0, [r3, #0]
 800a906:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800a90a:	f000 8168 	beq.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a90e:	a807      	add	r0, sp, #28
 800a910:	f7ff fd8e 	bl	800a430 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a914:	9808      	ldr	r0, [sp, #32]
 800a916:	e162      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a918:	4b8c      	ldr	r3, [pc, #560]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a91a:	6818      	ldr	r0, [r3, #0]
 800a91c:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800a920:	f000 815d 	beq.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a924:	a801      	add	r0, sp, #4
 800a926:	f7ff fc85 	bl	800a234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a92a:	9801      	ldr	r0, [sp, #4]
 800a92c:	e157      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a92e:	4a87      	ldr	r2, [pc, #540]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a930:	6812      	ldr	r2, [r2, #0]
 800a932:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800a936:	d003      	beq.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800a938:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a93c:	f000 8162 	beq.w	800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a940:	4a82      	ldr	r2, [pc, #520]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a942:	6812      	ldr	r2, [r2, #0]
 800a944:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800a948:	f000 815e 	beq.w	800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 800a94c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a950:	f000 815c 	beq.w	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
            frequency = 0;
 800a954:	2000      	movs	r0, #0
 800a956:	e142      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a958:	4b7c      	ldr	r3, [pc, #496]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a95a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a95c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
      switch (srcclk)
 800a960:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a964:	d035      	beq.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 800a966:	d916      	bls.n	800a996 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 800a968:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a96c:	f000 8150 	beq.w	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800a970:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a974:	d120      	bne.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a976:	4a75      	ldr	r2, [pc, #468]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a978:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a97a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a97e:	6812      	ldr	r2, [r2, #0]
 800a980:	f012 0f04 	tst.w	r2, #4
 800a984:	d030      	beq.n	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800a986:	bb7b      	cbnz	r3, 800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a988:	4b70      	ldr	r3, [pc, #448]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a990:	486f      	ldr	r0, [pc, #444]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a992:	40d8      	lsrs	r0, r3
 800a994:	e123      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 800a996:	b18b      	cbz	r3, 800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 800a998:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a99c:	d10a      	bne.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a99e:	4b6b      	ldr	r3, [pc, #428]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a9a0:	6818      	ldr	r0, [r3, #0]
 800a9a2:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800a9a6:	f000 811a 	beq.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9aa:	a804      	add	r0, sp, #16
 800a9ac:	f7ff fb44 	bl	800a038 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9b0:	9804      	ldr	r0, [sp, #16]
 800a9b2:	e114      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	e112      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	e110      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9bc:	4b63      	ldr	r3, [pc, #396]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a9be:	6818      	ldr	r0, [r3, #0]
 800a9c0:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800a9c4:	f000 810b 	beq.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9c8:	a807      	add	r0, sp, #28
 800a9ca:	f7ff fd31 	bl	800a430 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9ce:	9808      	ldr	r0, [sp, #32]
 800a9d0:	e105      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9d2:	4b5e      	ldr	r3, [pc, #376]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a9d4:	6818      	ldr	r0, [r3, #0]
 800a9d6:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800a9da:	f000 8100 	beq.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9de:	a801      	add	r0, sp, #4
 800a9e0:	f7ff fc28 	bl	800a234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9e4:	9801      	ldr	r0, [sp, #4]
 800a9e6:	e0fa      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9e8:	4a58      	ldr	r2, [pc, #352]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a9ea:	6812      	ldr	r2, [r2, #0]
 800a9ec:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800a9f0:	d003      	beq.n	800a9fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a9f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9f6:	f000 810d 	beq.w	800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9fa:	4a54      	ldr	r2, [pc, #336]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a9fc:	6812      	ldr	r2, [r2, #0]
 800a9fe:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800aa02:	f000 8109 	beq.w	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 800aa06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa0a:	f000 8107 	beq.w	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            frequency = 0;
 800aa0e:	2000      	movs	r0, #0
 800aa10:	e0e5      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800aa12:	4b4e      	ldr	r3, [pc, #312]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aa14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
      switch (srcclk)
 800aa1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa1e:	d010      	beq.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 800aa20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa24:	d018      	beq.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 800aa26:	b10b      	cbz	r3, 800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x400>
 800aa28:	2000      	movs	r0, #0
 800aa2a:	e0d8      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa2c:	4b47      	ldr	r3, [pc, #284]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aa2e:	6818      	ldr	r0, [r3, #0]
 800aa30:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800aa34:	f000 80d3 	beq.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa38:	a804      	add	r0, sp, #16
 800aa3a:	f7ff fafd 	bl	800a038 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa3e:	9804      	ldr	r0, [sp, #16]
 800aa40:	e0cd      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa42:	4b42      	ldr	r3, [pc, #264]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aa44:	6818      	ldr	r0, [r3, #0]
 800aa46:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800aa4a:	f000 80c8 	beq.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa4e:	a801      	add	r0, sp, #4
 800aa50:	f7ff fbf0 	bl	800a234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aa54:	9803      	ldr	r0, [sp, #12]
 800aa56:	e0c2      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aa58:	4a3c      	ldr	r2, [pc, #240]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aa5a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800aa5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa60:	6812      	ldr	r2, [r2, #0]
 800aa62:	f012 0f04 	tst.w	r2, #4
 800aa66:	d007      	beq.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
 800aa68:	b933      	cbnz	r3, 800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa6a:	4b38      	ldr	r3, [pc, #224]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800aa72:	4837      	ldr	r0, [pc, #220]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa74:	40d8      	lsrs	r0, r3
 800aa76:	e0b2      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa78:	4a34      	ldr	r2, [pc, #208]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aa7a:	6812      	ldr	r2, [r2, #0]
 800aa7c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800aa80:	d003      	beq.n	800aa8a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 800aa82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa86:	f000 80cb 	beq.w	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa8a:	4a30      	ldr	r2, [pc, #192]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aa8c:	6812      	ldr	r2, [r2, #0]
 800aa8e:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800aa92:	f000 80c7 	beq.w	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800aa96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa9a:	f000 80c5 	beq.w	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
            frequency = 0;
 800aa9e:	2000      	movs	r0, #0
 800aaa0:	e09d      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800aaa2:	4b2a      	ldr	r3, [pc, #168]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aaa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      switch (srcclk)
 800aaa6:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 800aaaa:	d002      	beq.n	800aab2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800aaac:	b963      	cbnz	r3, 800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
 800aaae:	2000      	movs	r0, #0
 800aab0:	e095      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aab2:	4b26      	ldr	r3, [pc, #152]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aab4:	6818      	ldr	r0, [r3, #0]
 800aab6:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800aaba:	f000 8090 	beq.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aabe:	a807      	add	r0, sp, #28
 800aac0:	f7ff fcb6 	bl	800a430 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aac4:	9808      	ldr	r0, [sp, #32]
 800aac6:	e08a      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aac8:	4b20      	ldr	r3, [pc, #128]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aaca:	6818      	ldr	r0, [r3, #0]
 800aacc:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800aad0:	f000 8085 	beq.w	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aad4:	a804      	add	r0, sp, #16
 800aad6:	f7ff faaf 	bl	800a038 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aada:	9806      	ldr	r0, [sp, #24]
 800aadc:	e07f      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800aade:	4b1b      	ldr	r3, [pc, #108]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aae2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
      switch (srcclk)
 800aae6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aaea:	d035      	beq.n	800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 800aaec:	d815      	bhi.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800aaee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aaf2:	d021      	beq.n	800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 800aaf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaf8:	d109      	bne.n	800ab0e <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aafa:	4b14      	ldr	r3, [pc, #80]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aafc:	6818      	ldr	r0, [r3, #0]
 800aafe:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800ab02:	d06c      	beq.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab04:	a801      	add	r0, sp, #4
 800ab06:	f7ff fb95 	bl	800a234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ab0a:	9802      	ldr	r0, [sp, #8]
 800ab0c:	e067      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 800ab0e:	b913      	cbnz	r3, 800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ab10:	f7ff fa80 	bl	800a014 <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 800ab14:	e063      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 800ab16:	2000      	movs	r0, #0
 800ab18:	e061      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 800ab1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab1e:	d026      	beq.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0x542>
 800ab20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab24:	d106      	bne.n	800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x508>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab26:	4b09      	ldr	r3, [pc, #36]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800ab28:	6818      	ldr	r0, [r3, #0]
 800ab2a:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800ab2e:	d056      	beq.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 800ab30:	4808      	ldr	r0, [pc, #32]	@ (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ab32:	e054      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 800ab34:	2000      	movs	r0, #0
 800ab36:	e052      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab38:	4b04      	ldr	r3, [pc, #16]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800ab3a:	6818      	ldr	r0, [r3, #0]
 800ab3c:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800ab40:	d04d      	beq.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab42:	a804      	add	r0, sp, #16
 800ab44:	f7ff fa78 	bl	800a038 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab48:	9805      	ldr	r0, [sp, #20]
 800ab4a:	e048      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 800ab4c:	58024400 	.word	0x58024400
 800ab50:	03d09000 	.word	0x03d09000
 800ab54:	016e3600 	.word	0x016e3600
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab58:	4b34      	ldr	r3, [pc, #208]	@ (800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800ab5a:	6818      	ldr	r0, [r3, #0]
 800ab5c:	f010 0004 	ands.w	r0, r0, #4
 800ab60:	d03d      	beq.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ab68:	4831      	ldr	r0, [pc, #196]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800ab6a:	40d8      	lsrs	r0, r3
 800ab6c:	e037      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ab6e:	4b2f      	ldr	r3, [pc, #188]	@ (800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800ab70:	6818      	ldr	r0, [r3, #0]
 800ab72:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 800ab76:	d032      	beq.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = CSI_VALUE;
 800ab78:	482e      	ldr	r0, [pc, #184]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800ab7a:	e030      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800ab7c:	4b2b      	ldr	r3, [pc, #172]	@ (800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800ab7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (srcclk)
 800ab84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab88:	d00c      	beq.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800ab8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab8e:	d013      	beq.n	800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 800ab90:	b10b      	cbz	r3, 800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800ab92:	2000      	movs	r0, #0
  return frequency;
 800ab94:	e023      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab96:	4b25      	ldr	r3, [pc, #148]	@ (800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800ab98:	6818      	ldr	r0, [r3, #0]
 800ab9a:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800ab9e:	d01e      	beq.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 800aba0:	4825      	ldr	r0, [pc, #148]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800aba2:	e01c      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aba4:	4b21      	ldr	r3, [pc, #132]	@ (800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800aba6:	6818      	ldr	r0, [r3, #0]
 800aba8:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800abac:	d017      	beq.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800abae:	a807      	add	r0, sp, #28
 800abb0:	f7ff fc3e 	bl	800a430 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800abb4:	9808      	ldr	r0, [sp, #32]
 800abb6:	e012      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abb8:	4b1c      	ldr	r3, [pc, #112]	@ (800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800abba:	6818      	ldr	r0, [r3, #0]
 800abbc:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800abc0:	d00d      	beq.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abc2:	a804      	add	r0, sp, #16
 800abc4:	f7ff fa38 	bl	800a038 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800abc8:	9805      	ldr	r0, [sp, #20]
 800abca:	e008      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 800abcc:	2000      	movs	r0, #0
 800abce:	e006      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 800abd0:	4818      	ldr	r0, [pc, #96]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800abd2:	e004      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 800abd4:	2000      	movs	r0, #0
 800abd6:	e002      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 800abd8:	4817      	ldr	r0, [pc, #92]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800abda:	e000      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 800abdc:	4817      	ldr	r0, [pc, #92]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
}
 800abde:	b00b      	add	sp, #44	@ 0x2c
 800abe0:	f85d fb04 	ldr.w	pc, [sp], #4
            frequency = CSI_VALUE;
 800abe4:	4813      	ldr	r0, [pc, #76]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800abe6:	e7fa      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 800abe8:	2000      	movs	r0, #0
 800abea:	e7f8      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 800abec:	4812      	ldr	r0, [pc, #72]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800abee:	e7f6      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 800abf0:	4812      	ldr	r0, [pc, #72]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 800abf2:	e7f4      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 800abf4:	480f      	ldr	r0, [pc, #60]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800abf6:	e7f2      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 800abf8:	2000      	movs	r0, #0
 800abfa:	e7f0      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 800abfc:	480e      	ldr	r0, [pc, #56]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800abfe:	e7ee      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 800ac00:	480e      	ldr	r0, [pc, #56]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 800ac02:	e7ec      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 800ac04:	480b      	ldr	r0, [pc, #44]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800ac06:	e7ea      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 800ac08:	2000      	movs	r0, #0
 800ac0a:	e7e8      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 800ac0c:	480a      	ldr	r0, [pc, #40]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800ac0e:	e7e6      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 800ac10:	480a      	ldr	r0, [pc, #40]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 800ac12:	e7e4      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 800ac14:	4807      	ldr	r0, [pc, #28]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800ac16:	e7e2      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 800ac18:	2000      	movs	r0, #0
 800ac1a:	e7e0      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 800ac1c:	4806      	ldr	r0, [pc, #24]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800ac1e:	e7de      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 800ac20:	4804      	ldr	r0, [pc, #16]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800ac22:	e7dc      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 800ac24:	2000      	movs	r0, #0
 800ac26:	e7da      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 800ac28:	4803      	ldr	r0, [pc, #12]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800ac2a:	e7d8      	b.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 800ac2c:	58024400 	.word	0x58024400
 800ac30:	03d09000 	.word	0x03d09000
 800ac34:	003d0900 	.word	0x003d0900
 800ac38:	016e3600 	.word	0x016e3600
 800ac3c:	00bb8000 	.word	0x00bb8000

0800ac40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac40:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac42:	6a03      	ldr	r3, [r0, #32]
 800ac44:	f023 0301 	bic.w	r3, r3, #1
 800ac48:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac4a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac4c:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac4e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac50:	4b1e      	ldr	r3, [pc, #120]	@ (800accc <TIM_OC1_SetConfig+0x8c>)
 800ac52:	4023      	ands	r3, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac54:	680d      	ldr	r5, [r1, #0]
 800ac56:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac58:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac5c:	688b      	ldr	r3, [r1, #8]
 800ac5e:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac60:	4a1b      	ldr	r2, [pc, #108]	@ (800acd0 <TIM_OC1_SetConfig+0x90>)
 800ac62:	4c1c      	ldr	r4, [pc, #112]	@ (800acd4 <TIM_OC1_SetConfig+0x94>)
 800ac64:	42a0      	cmp	r0, r4
 800ac66:	bf18      	it	ne
 800ac68:	4290      	cmpne	r0, r2
 800ac6a:	bf0c      	ite	eq
 800ac6c:	2201      	moveq	r2, #1
 800ac6e:	2200      	movne	r2, #0
 800ac70:	d00c      	beq.n	800ac8c <TIM_OC1_SetConfig+0x4c>
 800ac72:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
 800ac76:	42a0      	cmp	r0, r4
 800ac78:	bf14      	ite	ne
 800ac7a:	2400      	movne	r4, #0
 800ac7c:	2401      	moveq	r4, #1
 800ac7e:	4f16      	ldr	r7, [pc, #88]	@ (800acd8 <TIM_OC1_SetConfig+0x98>)
 800ac80:	42b8      	cmp	r0, r7
 800ac82:	d003      	beq.n	800ac8c <TIM_OC1_SetConfig+0x4c>
 800ac84:	b914      	cbnz	r4, 800ac8c <TIM_OC1_SetConfig+0x4c>
 800ac86:	4c15      	ldr	r4, [pc, #84]	@ (800acdc <TIM_OC1_SetConfig+0x9c>)
 800ac88:	42a0      	cmp	r0, r4
 800ac8a:	d105      	bne.n	800ac98 <TIM_OC1_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac8c:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac90:	68cc      	ldr	r4, [r1, #12]
 800ac92:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac94:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac98:	b95a      	cbnz	r2, 800acb2 <TIM_OC1_SetConfig+0x72>
 800ac9a:	4a11      	ldr	r2, [pc, #68]	@ (800ace0 <TIM_OC1_SetConfig+0xa0>)
 800ac9c:	4290      	cmp	r0, r2
 800ac9e:	bf14      	ite	ne
 800aca0:	2200      	movne	r2, #0
 800aca2:	2201      	moveq	r2, #1
 800aca4:	4c0c      	ldr	r4, [pc, #48]	@ (800acd8 <TIM_OC1_SetConfig+0x98>)
 800aca6:	42a0      	cmp	r0, r4
 800aca8:	d003      	beq.n	800acb2 <TIM_OC1_SetConfig+0x72>
 800acaa:	b912      	cbnz	r2, 800acb2 <TIM_OC1_SetConfig+0x72>
 800acac:	4a0b      	ldr	r2, [pc, #44]	@ (800acdc <TIM_OC1_SetConfig+0x9c>)
 800acae:	4290      	cmp	r0, r2
 800acb0:	d105      	bne.n	800acbe <TIM_OC1_SetConfig+0x7e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800acb2:	f426 7640 	bic.w	r6, r6, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800acb6:	694a      	ldr	r2, [r1, #20]
 800acb8:	4332      	orrs	r2, r6
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800acba:	698e      	ldr	r6, [r1, #24]
 800acbc:	4316      	orrs	r6, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acbe:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acc0:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800acc2:	684a      	ldr	r2, [r1, #4]
 800acc4:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acc6:	6203      	str	r3, [r0, #32]
}
 800acc8:	bcf0      	pop	{r4, r5, r6, r7}
 800acca:	4770      	bx	lr
 800accc:	fffeff8c 	.word	0xfffeff8c
 800acd0:	40010000 	.word	0x40010000
 800acd4:	40010400 	.word	0x40010400
 800acd8:	40014000 	.word	0x40014000
 800acdc:	40014800 	.word	0x40014800
 800ace0:	40014400 	.word	0x40014400

0800ace4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ace4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ace6:	6a03      	ldr	r3, [r0, #32]
 800ace8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acf0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acf2:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800acf4:	4a1a      	ldr	r2, [pc, #104]	@ (800ad60 <TIM_OC3_SetConfig+0x7c>)
 800acf6:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acf8:	680e      	ldr	r6, [r1, #0]
 800acfa:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800acfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad00:	688a      	ldr	r2, [r1, #8]
 800ad02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad06:	4a17      	ldr	r2, [pc, #92]	@ (800ad64 <TIM_OC3_SetConfig+0x80>)
 800ad08:	4c17      	ldr	r4, [pc, #92]	@ (800ad68 <TIM_OC3_SetConfig+0x84>)
 800ad0a:	42a0      	cmp	r0, r4
 800ad0c:	bf18      	it	ne
 800ad0e:	4290      	cmpne	r0, r2
 800ad10:	bf0c      	ite	eq
 800ad12:	2201      	moveq	r2, #1
 800ad14:	2200      	movne	r2, #0
 800ad16:	d106      	bne.n	800ad26 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad1c:	68cc      	ldr	r4, [r1, #12]
 800ad1e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad26:	b95a      	cbnz	r2, 800ad40 <TIM_OC3_SetConfig+0x5c>
 800ad28:	4a10      	ldr	r2, [pc, #64]	@ (800ad6c <TIM_OC3_SetConfig+0x88>)
 800ad2a:	4290      	cmp	r0, r2
 800ad2c:	bf14      	ite	ne
 800ad2e:	2200      	movne	r2, #0
 800ad30:	2201      	moveq	r2, #1
 800ad32:	4c0f      	ldr	r4, [pc, #60]	@ (800ad70 <TIM_OC3_SetConfig+0x8c>)
 800ad34:	42a0      	cmp	r0, r4
 800ad36:	d003      	beq.n	800ad40 <TIM_OC3_SetConfig+0x5c>
 800ad38:	b912      	cbnz	r2, 800ad40 <TIM_OC3_SetConfig+0x5c>
 800ad3a:	4a0e      	ldr	r2, [pc, #56]	@ (800ad74 <TIM_OC3_SetConfig+0x90>)
 800ad3c:	4290      	cmp	r0, r2
 800ad3e:	d107      	bne.n	800ad50 <TIM_OC3_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad40:	f425 5240 	bic.w	r2, r5, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad44:	694c      	ldr	r4, [r1, #20]
 800ad46:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad4a:	698c      	ldr	r4, [r1, #24]
 800ad4c:	ea42 1504 	orr.w	r5, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad50:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad52:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad54:	684a      	ldr	r2, [r1, #4]
 800ad56:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad58:	6203      	str	r3, [r0, #32]
}
 800ad5a:	bc70      	pop	{r4, r5, r6}
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	fffeff8c 	.word	0xfffeff8c
 800ad64:	40010000 	.word	0x40010000
 800ad68:	40010400 	.word	0x40010400
 800ad6c:	40014400 	.word	0x40014400
 800ad70:	40014000 	.word	0x40014000
 800ad74:	40014800 	.word	0x40014800

0800ad78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad78:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad7a:	6a03      	ldr	r3, [r0, #32]
 800ad7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad80:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad82:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad84:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad86:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad88:	4a14      	ldr	r2, [pc, #80]	@ (800addc <TIM_OC4_SetConfig+0x64>)
 800ad8a:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad8c:	680d      	ldr	r5, [r1, #0]
 800ad8e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad96:	688d      	ldr	r5, [r1, #8]
 800ad98:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad9c:	4e10      	ldr	r6, [pc, #64]	@ (800ade0 <TIM_OC4_SetConfig+0x68>)
 800ad9e:	4d11      	ldr	r5, [pc, #68]	@ (800ade4 <TIM_OC4_SetConfig+0x6c>)
 800ada0:	42a8      	cmp	r0, r5
 800ada2:	bf18      	it	ne
 800ada4:	42b0      	cmpne	r0, r6
 800ada6:	d00d      	beq.n	800adc4 <TIM_OC4_SetConfig+0x4c>
 800ada8:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 800adac:	42a8      	cmp	r0, r5
 800adae:	bf14      	ite	ne
 800adb0:	2500      	movne	r5, #0
 800adb2:	2501      	moveq	r5, #1
 800adb4:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 800adb8:	42b0      	cmp	r0, r6
 800adba:	d003      	beq.n	800adc4 <TIM_OC4_SetConfig+0x4c>
 800adbc:	b915      	cbnz	r5, 800adc4 <TIM_OC4_SetConfig+0x4c>
 800adbe:	4d0a      	ldr	r5, [pc, #40]	@ (800ade8 <TIM_OC4_SetConfig+0x70>)
 800adc0:	42a8      	cmp	r0, r5
 800adc2:	d104      	bne.n	800adce <TIM_OC4_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800adc4:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800adc8:	694d      	ldr	r5, [r1, #20]
 800adca:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adce:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800add0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800add2:	684a      	ldr	r2, [r1, #4]
 800add4:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800add6:	6203      	str	r3, [r0, #32]
}
 800add8:	bc70      	pop	{r4, r5, r6}
 800adda:	4770      	bx	lr
 800addc:	feff8cff 	.word	0xfeff8cff
 800ade0:	40010000 	.word	0x40010000
 800ade4:	40010400 	.word	0x40010400
 800ade8:	40014800 	.word	0x40014800

0800adec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800adec:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800adee:	6a03      	ldr	r3, [r0, #32]
 800adf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800adf4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adf6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adf8:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800adfa:	6d45      	ldr	r5, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800adfc:	4e14      	ldr	r6, [pc, #80]	@ (800ae50 <TIM_OC5_SetConfig+0x64>)
 800adfe:	402e      	ands	r6, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae00:	680d      	ldr	r5, [r1, #0]
 800ae02:	432e      	orrs	r6, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ae04:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ae08:	688c      	ldr	r4, [r1, #8]
 800ae0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae0e:	4d11      	ldr	r5, [pc, #68]	@ (800ae54 <TIM_OC5_SetConfig+0x68>)
 800ae10:	4c11      	ldr	r4, [pc, #68]	@ (800ae58 <TIM_OC5_SetConfig+0x6c>)
 800ae12:	42a0      	cmp	r0, r4
 800ae14:	bf18      	it	ne
 800ae16:	42a8      	cmpne	r0, r5
 800ae18:	d00d      	beq.n	800ae36 <TIM_OC5_SetConfig+0x4a>
 800ae1a:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
 800ae1e:	42a0      	cmp	r0, r4
 800ae20:	bf14      	ite	ne
 800ae22:	2400      	movne	r4, #0
 800ae24:	2401      	moveq	r4, #1
 800ae26:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 800ae2a:	42a8      	cmp	r0, r5
 800ae2c:	d003      	beq.n	800ae36 <TIM_OC5_SetConfig+0x4a>
 800ae2e:	b914      	cbnz	r4, 800ae36 <TIM_OC5_SetConfig+0x4a>
 800ae30:	4c0a      	ldr	r4, [pc, #40]	@ (800ae5c <TIM_OC5_SetConfig+0x70>)
 800ae32:	42a0      	cmp	r0, r4
 800ae34:	d104      	bne.n	800ae40 <TIM_OC5_SetConfig+0x54>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ae36:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ae3a:	694c      	ldr	r4, [r1, #20]
 800ae3c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae40:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae42:	6546      	str	r6, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ae44:	684a      	ldr	r2, [r1, #4]
 800ae46:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae48:	6203      	str	r3, [r0, #32]
}
 800ae4a:	bc70      	pop	{r4, r5, r6}
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	fffeff8f 	.word	0xfffeff8f
 800ae54:	40010000 	.word	0x40010000
 800ae58:	40010400 	.word	0x40010400
 800ae5c:	40014800 	.word	0x40014800

0800ae60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ae60:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae62:	6a03      	ldr	r3, [r0, #32]
 800ae64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ae68:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae6a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae6c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae6e:	6d45      	ldr	r5, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ae70:	4a14      	ldr	r2, [pc, #80]	@ (800aec4 <TIM_OC6_SetConfig+0x64>)
 800ae72:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae74:	680d      	ldr	r5, [r1, #0]
 800ae76:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ae7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ae7e:	688d      	ldr	r5, [r1, #8]
 800ae80:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae84:	4e10      	ldr	r6, [pc, #64]	@ (800aec8 <TIM_OC6_SetConfig+0x68>)
 800ae86:	4d11      	ldr	r5, [pc, #68]	@ (800aecc <TIM_OC6_SetConfig+0x6c>)
 800ae88:	42a8      	cmp	r0, r5
 800ae8a:	bf18      	it	ne
 800ae8c:	42b0      	cmpne	r0, r6
 800ae8e:	d00d      	beq.n	800aeac <TIM_OC6_SetConfig+0x4c>
 800ae90:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 800ae94:	42a8      	cmp	r0, r5
 800ae96:	bf14      	ite	ne
 800ae98:	2500      	movne	r5, #0
 800ae9a:	2501      	moveq	r5, #1
 800ae9c:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 800aea0:	42b0      	cmp	r0, r6
 800aea2:	d003      	beq.n	800aeac <TIM_OC6_SetConfig+0x4c>
 800aea4:	b915      	cbnz	r5, 800aeac <TIM_OC6_SetConfig+0x4c>
 800aea6:	4d0a      	ldr	r5, [pc, #40]	@ (800aed0 <TIM_OC6_SetConfig+0x70>)
 800aea8:	42a8      	cmp	r0, r5
 800aeaa:	d104      	bne.n	800aeb6 <TIM_OC6_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aeac:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aeb0:	694d      	ldr	r5, [r1, #20]
 800aeb2:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeb6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aeb8:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aeba:	684a      	ldr	r2, [r1, #4]
 800aebc:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aebe:	6203      	str	r3, [r0, #32]
}
 800aec0:	bc70      	pop	{r4, r5, r6}
 800aec2:	4770      	bx	lr
 800aec4:	feff8fff 	.word	0xfeff8fff
 800aec8:	40010000 	.word	0x40010000
 800aecc:	40010400 	.word	0x40010400
 800aed0:	40014800 	.word	0x40014800

0800aed4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aed4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aed6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aed8:	6a04      	ldr	r4, [r0, #32]
 800aeda:	f024 0401 	bic.w	r4, r4, #1
 800aede:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aee0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aee2:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aee6:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aeea:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800aeee:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aef0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800aef2:	6203      	str	r3, [r0, #32]
}
 800aef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aefa:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aefc:	6a03      	ldr	r3, [r0, #32]
 800aefe:	f023 0310 	bic.w	r3, r3, #16
 800af02:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af04:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800af06:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af08:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af0c:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af10:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800af14:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af18:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800af1a:	6203      	str	r3, [r0, #32]
}
 800af1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af20:	4770      	bx	lr
	...

0800af24 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af24:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af26:	4b03      	ldr	r3, [pc, #12]	@ (800af34 <TIM_ITRx_SetConfig+0x10>)
 800af28:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af2a:	430b      	orrs	r3, r1
 800af2c:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af30:	6083      	str	r3, [r0, #8]
}
 800af32:	4770      	bx	lr
 800af34:	ffcfff8f 	.word	0xffcfff8f

0800af38 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800af38:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d13a      	bne.n	800afb8 <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 800af42:	2302      	movs	r3, #2
 800af44:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800af48:	6802      	ldr	r2, [r0, #0]
 800af4a:	68d3      	ldr	r3, [r2, #12]
 800af4c:	f043 0301 	orr.w	r3, r3, #1
 800af50:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af52:	6803      	ldr	r3, [r0, #0]
 800af54:	4a1a      	ldr	r2, [pc, #104]	@ (800afc0 <HAL_TIM_Base_Start_IT+0x88>)
 800af56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af5a:	bf18      	it	ne
 800af5c:	4293      	cmpne	r3, r2
 800af5e:	d01d      	beq.n	800af9c <HAL_TIM_Base_Start_IT+0x64>
 800af60:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800af64:	4293      	cmp	r3, r2
 800af66:	d019      	beq.n	800af9c <HAL_TIM_Base_Start_IT+0x64>
 800af68:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d015      	beq.n	800af9c <HAL_TIM_Base_Start_IT+0x64>
 800af70:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800af74:	4293      	cmp	r3, r2
 800af76:	d011      	beq.n	800af9c <HAL_TIM_Base_Start_IT+0x64>
 800af78:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d00d      	beq.n	800af9c <HAL_TIM_Base_Start_IT+0x64>
 800af80:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800af84:	4293      	cmp	r3, r2
 800af86:	d009      	beq.n	800af9c <HAL_TIM_Base_Start_IT+0x64>
 800af88:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d005      	beq.n	800af9c <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	f042 0201 	orr.w	r2, r2, #1
 800af96:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800af98:	2000      	movs	r0, #0
 800af9a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af9c:	6899      	ldr	r1, [r3, #8]
 800af9e:	4a09      	ldr	r2, [pc, #36]	@ (800afc4 <HAL_TIM_Base_Start_IT+0x8c>)
 800afa0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afa2:	2a06      	cmp	r2, #6
 800afa4:	bf18      	it	ne
 800afa6:	f5b2 3f80 	cmpne.w	r2, #65536	@ 0x10000
 800afaa:	d007      	beq.n	800afbc <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	f042 0201 	orr.w	r2, r2, #1
 800afb2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800afb4:	2000      	movs	r0, #0
 800afb6:	4770      	bx	lr
    return HAL_ERROR;
 800afb8:	2001      	movs	r0, #1
 800afba:	4770      	bx	lr
  return HAL_OK;
 800afbc:	2000      	movs	r0, #0
}
 800afbe:	4770      	bx	lr
 800afc0:	40010000 	.word	0x40010000
 800afc4:	00010007 	.word	0x00010007

0800afc8 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800afc8:	6802      	ldr	r2, [r0, #0]
 800afca:	68d3      	ldr	r3, [r2, #12]
 800afcc:	f023 0301 	bic.w	r3, r3, #1
 800afd0:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800afd2:	6803      	ldr	r3, [r0, #0]
 800afd4:	6a19      	ldr	r1, [r3, #32]
 800afd6:	f241 1211 	movw	r2, #4369	@ 0x1111
 800afda:	4211      	tst	r1, r2
 800afdc:	d108      	bne.n	800aff0 <HAL_TIM_Base_Stop_IT+0x28>
 800afde:	6a19      	ldr	r1, [r3, #32]
 800afe0:	f240 4244 	movw	r2, #1092	@ 0x444
 800afe4:	4211      	tst	r1, r2
 800afe6:	d103      	bne.n	800aff0 <HAL_TIM_Base_Stop_IT+0x28>
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	f022 0201 	bic.w	r2, r2, #1
 800afee:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800aff0:	2301      	movs	r3, #1
 800aff2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 800aff6:	2000      	movs	r0, #0
 800aff8:	4770      	bx	lr

0800affa <HAL_TIM_PWM_MspInit>:
}
 800affa:	4770      	bx	lr

0800affc <HAL_TIM_OC_DelayElapsedCallback>:
}
 800affc:	4770      	bx	lr

0800affe <HAL_TIM_IC_CaptureCallback>:
}
 800affe:	4770      	bx	lr

0800b000 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800b000:	4770      	bx	lr

0800b002 <HAL_TIM_TriggerCallback>:
}
 800b002:	4770      	bx	lr

0800b004 <HAL_TIM_IRQHandler>:
{
 800b004:	b510      	push	{r4, lr}
 800b006:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b008:	6803      	ldr	r3, [r0, #0]
 800b00a:	691a      	ldr	r2, [r3, #16]
 800b00c:	f012 0f02 	tst.w	r2, #2
 800b010:	d011      	beq.n	800b036 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b012:	68da      	ldr	r2, [r3, #12]
 800b014:	f012 0f02 	tst.w	r2, #2
 800b018:	d00d      	beq.n	800b036 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b01a:	f06f 0202 	mvn.w	r2, #2
 800b01e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b020:	2301      	movs	r3, #1
 800b022:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b024:	6803      	ldr	r3, [r0, #0]
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	f013 0f03 	tst.w	r3, #3
 800b02c:	d079      	beq.n	800b122 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800b02e:	f7ff ffe6 	bl	800affe <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b032:	2300      	movs	r3, #0
 800b034:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b036:	6823      	ldr	r3, [r4, #0]
 800b038:	691a      	ldr	r2, [r3, #16]
 800b03a:	f012 0f04 	tst.w	r2, #4
 800b03e:	d012      	beq.n	800b066 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b040:	68da      	ldr	r2, [r3, #12]
 800b042:	f012 0f04 	tst.w	r2, #4
 800b046:	d00e      	beq.n	800b066 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b048:	f06f 0204 	mvn.w	r2, #4
 800b04c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b04e:	2302      	movs	r3, #2
 800b050:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b052:	6823      	ldr	r3, [r4, #0]
 800b054:	699b      	ldr	r3, [r3, #24]
 800b056:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800b05a:	d068      	beq.n	800b12e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800b05c:	4620      	mov	r0, r4
 800b05e:	f7ff ffce 	bl	800affe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b062:	2300      	movs	r3, #0
 800b064:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b066:	6823      	ldr	r3, [r4, #0]
 800b068:	691a      	ldr	r2, [r3, #16]
 800b06a:	f012 0f08 	tst.w	r2, #8
 800b06e:	d012      	beq.n	800b096 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b070:	68da      	ldr	r2, [r3, #12]
 800b072:	f012 0f08 	tst.w	r2, #8
 800b076:	d00e      	beq.n	800b096 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b078:	f06f 0208 	mvn.w	r2, #8
 800b07c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b07e:	2304      	movs	r3, #4
 800b080:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b082:	6823      	ldr	r3, [r4, #0]
 800b084:	69db      	ldr	r3, [r3, #28]
 800b086:	f013 0f03 	tst.w	r3, #3
 800b08a:	d057      	beq.n	800b13c <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800b08c:	4620      	mov	r0, r4
 800b08e:	f7ff ffb6 	bl	800affe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b092:	2300      	movs	r3, #0
 800b094:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b096:	6823      	ldr	r3, [r4, #0]
 800b098:	691a      	ldr	r2, [r3, #16]
 800b09a:	f012 0f10 	tst.w	r2, #16
 800b09e:	d012      	beq.n	800b0c6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b0a0:	68da      	ldr	r2, [r3, #12]
 800b0a2:	f012 0f10 	tst.w	r2, #16
 800b0a6:	d00e      	beq.n	800b0c6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b0a8:	f06f 0210 	mvn.w	r2, #16
 800b0ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b0ae:	2308      	movs	r3, #8
 800b0b0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	69db      	ldr	r3, [r3, #28]
 800b0b6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800b0ba:	d046      	beq.n	800b14a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800b0bc:	4620      	mov	r0, r4
 800b0be:	f7ff ff9e 	bl	800affe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b0c6:	6823      	ldr	r3, [r4, #0]
 800b0c8:	691a      	ldr	r2, [r3, #16]
 800b0ca:	f012 0f01 	tst.w	r2, #1
 800b0ce:	d003      	beq.n	800b0d8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b0d0:	68da      	ldr	r2, [r3, #12]
 800b0d2:	f012 0f01 	tst.w	r2, #1
 800b0d6:	d13f      	bne.n	800b158 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b0d8:	6823      	ldr	r3, [r4, #0]
 800b0da:	691a      	ldr	r2, [r3, #16]
 800b0dc:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800b0e0:	d003      	beq.n	800b0ea <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0e2:	68da      	ldr	r2, [r3, #12]
 800b0e4:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800b0e8:	d13d      	bne.n	800b166 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b0ea:	6823      	ldr	r3, [r4, #0]
 800b0ec:	691a      	ldr	r2, [r3, #16]
 800b0ee:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800b0f2:	d003      	beq.n	800b0fc <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0f4:	68da      	ldr	r2, [r3, #12]
 800b0f6:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800b0fa:	d13b      	bne.n	800b174 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b0fc:	6823      	ldr	r3, [r4, #0]
 800b0fe:	691a      	ldr	r2, [r3, #16]
 800b100:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800b104:	d003      	beq.n	800b10e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b106:	68da      	ldr	r2, [r3, #12]
 800b108:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800b10c:	d139      	bne.n	800b182 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b10e:	6823      	ldr	r3, [r4, #0]
 800b110:	691a      	ldr	r2, [r3, #16]
 800b112:	f012 0f20 	tst.w	r2, #32
 800b116:	d003      	beq.n	800b120 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b118:	68da      	ldr	r2, [r3, #12]
 800b11a:	f012 0f20 	tst.w	r2, #32
 800b11e:	d137      	bne.n	800b190 <HAL_TIM_IRQHandler+0x18c>
}
 800b120:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b122:	f7ff ff6b 	bl	800affc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b126:	4620      	mov	r0, r4
 800b128:	f7ff ff6a 	bl	800b000 <HAL_TIM_PWM_PulseFinishedCallback>
 800b12c:	e781      	b.n	800b032 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b12e:	4620      	mov	r0, r4
 800b130:	f7ff ff64 	bl	800affc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b134:	4620      	mov	r0, r4
 800b136:	f7ff ff63 	bl	800b000 <HAL_TIM_PWM_PulseFinishedCallback>
 800b13a:	e792      	b.n	800b062 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b13c:	4620      	mov	r0, r4
 800b13e:	f7ff ff5d 	bl	800affc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b142:	4620      	mov	r0, r4
 800b144:	f7ff ff5c 	bl	800b000 <HAL_TIM_PWM_PulseFinishedCallback>
 800b148:	e7a3      	b.n	800b092 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b14a:	4620      	mov	r0, r4
 800b14c:	f7ff ff56 	bl	800affc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b150:	4620      	mov	r0, r4
 800b152:	f7ff ff55 	bl	800b000 <HAL_TIM_PWM_PulseFinishedCallback>
 800b156:	e7b4      	b.n	800b0c2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b158:	f06f 0201 	mvn.w	r2, #1
 800b15c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800b15e:	4620      	mov	r0, r4
 800b160:	f7f5 fca4 	bl	8000aac <HAL_TIM_PeriodElapsedCallback>
 800b164:	e7b8      	b.n	800b0d8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b166:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b16a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800b16c:	4620      	mov	r0, r4
 800b16e:	f000 fca6 	bl	800babe <HAL_TIMEx_BreakCallback>
 800b172:	e7ba      	b.n	800b0ea <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b174:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b178:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800b17a:	4620      	mov	r0, r4
 800b17c:	f000 fca0 	bl	800bac0 <HAL_TIMEx_Break2Callback>
 800b180:	e7bc      	b.n	800b0fc <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b182:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b186:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800b188:	4620      	mov	r0, r4
 800b18a:	f7ff ff3a 	bl	800b002 <HAL_TIM_TriggerCallback>
 800b18e:	e7be      	b.n	800b10e <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b190:	f06f 0220 	mvn.w	r2, #32
 800b194:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800b196:	4620      	mov	r0, r4
 800b198:	f000 fc90 	bl	800babc <HAL_TIMEx_CommutCallback>
}
 800b19c:	e7c0      	b.n	800b120 <HAL_TIM_IRQHandler+0x11c>
	...

0800b1a0 <TIM_Base_SetConfig>:
{
 800b1a0:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 800b1a2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b1a4:	4a39      	ldr	r2, [pc, #228]	@ (800b28c <TIM_Base_SetConfig+0xec>)
 800b1a6:	4290      	cmp	r0, r2
 800b1a8:	bf14      	ite	ne
 800b1aa:	f04f 0e00 	movne.w	lr, #0
 800b1ae:	f04f 0e01 	moveq.w	lr, #1
 800b1b2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800b1b6:	bf14      	ite	ne
 800b1b8:	4672      	movne	r2, lr
 800b1ba:	f04e 0201 	orreq.w	r2, lr, #1
 800b1be:	b9aa      	cbnz	r2, 800b1ec <TIM_Base_SetConfig+0x4c>
 800b1c0:	4c33      	ldr	r4, [pc, #204]	@ (800b290 <TIM_Base_SetConfig+0xf0>)
 800b1c2:	42a0      	cmp	r0, r4
 800b1c4:	bf14      	ite	ne
 800b1c6:	2400      	movne	r4, #0
 800b1c8:	2401      	moveq	r4, #1
 800b1ca:	4d32      	ldr	r5, [pc, #200]	@ (800b294 <TIM_Base_SetConfig+0xf4>)
 800b1cc:	42a8      	cmp	r0, r5
 800b1ce:	d00d      	beq.n	800b1ec <TIM_Base_SetConfig+0x4c>
 800b1d0:	b964      	cbnz	r4, 800b1ec <TIM_Base_SetConfig+0x4c>
 800b1d2:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800b1d6:	f504 3482 	add.w	r4, r4, #66560	@ 0x10400
 800b1da:	42a0      	cmp	r0, r4
 800b1dc:	bf14      	ite	ne
 800b1de:	2400      	movne	r4, #0
 800b1e0:	2401      	moveq	r4, #1
 800b1e2:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800b1e6:	42a8      	cmp	r0, r5
 800b1e8:	d000      	beq.n	800b1ec <TIM_Base_SetConfig+0x4c>
 800b1ea:	b11c      	cbz	r4, 800b1f4 <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800b1f0:	684c      	ldr	r4, [r1, #4]
 800b1f2:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1f4:	bb12      	cbnz	r2, 800b23c <TIM_Base_SetConfig+0x9c>
 800b1f6:	4a26      	ldr	r2, [pc, #152]	@ (800b290 <TIM_Base_SetConfig+0xf0>)
 800b1f8:	4290      	cmp	r0, r2
 800b1fa:	bf14      	ite	ne
 800b1fc:	2200      	movne	r2, #0
 800b1fe:	2201      	moveq	r2, #1
 800b200:	4c24      	ldr	r4, [pc, #144]	@ (800b294 <TIM_Base_SetConfig+0xf4>)
 800b202:	42a0      	cmp	r0, r4
 800b204:	d01a      	beq.n	800b23c <TIM_Base_SetConfig+0x9c>
 800b206:	b9ca      	cbnz	r2, 800b23c <TIM_Base_SetConfig+0x9c>
 800b208:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800b20c:	f502 3282 	add.w	r2, r2, #66560	@ 0x10400
 800b210:	4290      	cmp	r0, r2
 800b212:	bf14      	ite	ne
 800b214:	2200      	movne	r2, #0
 800b216:	2201      	moveq	r2, #1
 800b218:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 800b21c:	42a0      	cmp	r0, r4
 800b21e:	d00d      	beq.n	800b23c <TIM_Base_SetConfig+0x9c>
 800b220:	b962      	cbnz	r2, 800b23c <TIM_Base_SetConfig+0x9c>
 800b222:	4a1d      	ldr	r2, [pc, #116]	@ (800b298 <TIM_Base_SetConfig+0xf8>)
 800b224:	4290      	cmp	r0, r2
 800b226:	bf14      	ite	ne
 800b228:	2200      	movne	r2, #0
 800b22a:	2201      	moveq	r2, #1
 800b22c:	f504 349a 	add.w	r4, r4, #78848	@ 0x13400
 800b230:	42a0      	cmp	r0, r4
 800b232:	d003      	beq.n	800b23c <TIM_Base_SetConfig+0x9c>
 800b234:	b912      	cbnz	r2, 800b23c <TIM_Base_SetConfig+0x9c>
 800b236:	4a19      	ldr	r2, [pc, #100]	@ (800b29c <TIM_Base_SetConfig+0xfc>)
 800b238:	4290      	cmp	r0, r2
 800b23a:	d104      	bne.n	800b246 <TIM_Base_SetConfig+0xa6>
    tmpcr1 &= ~TIM_CR1_CKD;
 800b23c:	f423 7c40 	bic.w	ip, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b240:	68cb      	ldr	r3, [r1, #12]
 800b242:	ea43 030c 	orr.w	r3, r3, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b246:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b24a:	694a      	ldr	r2, [r1, #20]
 800b24c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800b24e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b250:	688a      	ldr	r2, [r1, #8]
 800b252:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b254:	680a      	ldr	r2, [r1, #0]
 800b256:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b258:	4a11      	ldr	r2, [pc, #68]	@ (800b2a0 <TIM_Base_SetConfig+0x100>)
 800b25a:	4290      	cmp	r0, r2
 800b25c:	bf14      	ite	ne
 800b25e:	4673      	movne	r3, lr
 800b260:	f04e 0301 	orreq.w	r3, lr, #1
 800b264:	b963      	cbnz	r3, 800b280 <TIM_Base_SetConfig+0xe0>
 800b266:	4b0c      	ldr	r3, [pc, #48]	@ (800b298 <TIM_Base_SetConfig+0xf8>)
 800b268:	4298      	cmp	r0, r3
 800b26a:	bf14      	ite	ne
 800b26c:	2300      	movne	r3, #0
 800b26e:	2301      	moveq	r3, #1
 800b270:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800b274:	4290      	cmp	r0, r2
 800b276:	d003      	beq.n	800b280 <TIM_Base_SetConfig+0xe0>
 800b278:	b913      	cbnz	r3, 800b280 <TIM_Base_SetConfig+0xe0>
 800b27a:	4b08      	ldr	r3, [pc, #32]	@ (800b29c <TIM_Base_SetConfig+0xfc>)
 800b27c:	4298      	cmp	r0, r3
 800b27e:	d101      	bne.n	800b284 <TIM_Base_SetConfig+0xe4>
    TIMx->RCR = Structure->RepetitionCounter;
 800b280:	690b      	ldr	r3, [r1, #16]
 800b282:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800b284:	2301      	movs	r3, #1
 800b286:	6143      	str	r3, [r0, #20]
}
 800b288:	bd30      	pop	{r4, r5, pc}
 800b28a:	bf00      	nop
 800b28c:	40010000 	.word	0x40010000
 800b290:	40000800 	.word	0x40000800
 800b294:	40000400 	.word	0x40000400
 800b298:	40014400 	.word	0x40014400
 800b29c:	40014800 	.word	0x40014800
 800b2a0:	40010400 	.word	0x40010400

0800b2a4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800b2a4:	b360      	cbz	r0, 800b300 <HAL_TIM_Base_Init+0x5c>
{
 800b2a6:	b510      	push	{r4, lr}
 800b2a8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800b2aa:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b2ae:	b313      	cbz	r3, 800b2f6 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2b6:	4621      	mov	r1, r4
 800b2b8:	f851 0b04 	ldr.w	r0, [r1], #4
 800b2bc:	f7ff ff70 	bl	800b1a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2c6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800b2ca:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800b2ce:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800b2d2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800b2d6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2de:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800b2e2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800b2e6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800b2ea:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800b2ee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800b2f2:	2000      	movs	r0, #0
}
 800b2f4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800b2f6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800b2fa:	f7f7 fb51 	bl	80029a0 <HAL_TIM_Base_MspInit>
 800b2fe:	e7d7      	b.n	800b2b0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800b300:	2001      	movs	r0, #1
}
 800b302:	4770      	bx	lr

0800b304 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800b304:	b360      	cbz	r0, 800b360 <HAL_TIM_PWM_Init+0x5c>
{
 800b306:	b510      	push	{r4, lr}
 800b308:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800b30a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b30e:	b313      	cbz	r3, 800b356 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800b310:	2302      	movs	r3, #2
 800b312:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b316:	4621      	mov	r1, r4
 800b318:	f851 0b04 	ldr.w	r0, [r1], #4
 800b31c:	f7ff ff40 	bl	800b1a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b320:	2301      	movs	r3, #1
 800b322:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b326:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800b32a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800b32e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800b332:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800b336:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b33a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b33e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800b342:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800b346:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800b34a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800b34e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800b352:	2000      	movs	r0, #0
}
 800b354:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800b356:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800b35a:	f7ff fe4e 	bl	800affa <HAL_TIM_PWM_MspInit>
 800b35e:	e7d7      	b.n	800b310 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800b360:	2001      	movs	r0, #1
}
 800b362:	4770      	bx	lr

0800b364 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800b364:	2800      	cmp	r0, #0
 800b366:	d04d      	beq.n	800b404 <HAL_TIM_Encoder_Init+0xa0>
{
 800b368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36a:	460d      	mov	r5, r1
 800b36c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800b36e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b372:	2b00      	cmp	r3, #0
 800b374:	d041      	beq.n	800b3fa <HAL_TIM_Encoder_Init+0x96>
  htim->State = HAL_TIM_STATE_BUSY;
 800b376:	2302      	movs	r3, #2
 800b378:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b37c:	6822      	ldr	r2, [r4, #0]
 800b37e:	6891      	ldr	r1, [r2, #8]
 800b380:	4b21      	ldr	r3, [pc, #132]	@ (800b408 <HAL_TIM_Encoder_Init+0xa4>)
 800b382:	400b      	ands	r3, r1
 800b384:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b386:	4621      	mov	r1, r4
 800b388:	f851 0b04 	ldr.w	r0, [r1], #4
 800b38c:	f7ff ff08 	bl	800b1a0 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800b390:	6821      	ldr	r1, [r4, #0]
 800b392:	688a      	ldr	r2, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800b394:	698b      	ldr	r3, [r1, #24]
  tmpccer = htim->Instance->CCER;
 800b396:	6a0e      	ldr	r6, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 800b398:	6828      	ldr	r0, [r5, #0]
 800b39a:	4310      	orrs	r0, r2
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b39c:	4a1b      	ldr	r2, [pc, #108]	@ (800b40c <HAL_TIM_Encoder_Init+0xa8>)
 800b39e:	401a      	ands	r2, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b3a0:	68ab      	ldr	r3, [r5, #8]
 800b3a2:	69af      	ldr	r7, [r5, #24]
 800b3a4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800b3a8:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b3aa:	4a19      	ldr	r2, [pc, #100]	@ (800b410 <HAL_TIM_Encoder_Init+0xac>)
 800b3ac:	401a      	ands	r2, r3
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b3ae:	68eb      	ldr	r3, [r5, #12]
 800b3b0:	69ef      	ldr	r7, [r5, #28]
 800b3b2:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800b3b6:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b3b8:	6a2b      	ldr	r3, [r5, #32]
 800b3ba:	031b      	lsls	r3, r3, #12
 800b3bc:	692f      	ldr	r7, [r5, #16]
 800b3be:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 800b3c2:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b3c4:	f026 06aa 	bic.w	r6, r6, #170	@ 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b3c8:	686a      	ldr	r2, [r5, #4]
 800b3ca:	696d      	ldr	r5, [r5, #20]
 800b3cc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800b3d0:	4332      	orrs	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 800b3d2:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800b3d4:	6821      	ldr	r1, [r4, #0]
 800b3d6:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 800b3d8:	6823      	ldr	r3, [r4, #0]
 800b3da:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b3e2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b3e6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b3ea:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b3ee:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800b3f2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800b3f6:	2000      	movs	r0, #0
}
 800b3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800b3fa:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800b3fe:	f7f7 fb19 	bl	8002a34 <HAL_TIM_Encoder_MspInit>
 800b402:	e7b8      	b.n	800b376 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 800b404:	2001      	movs	r0, #1
}
 800b406:	4770      	bx	lr
 800b408:	fffebff8 	.word	0xfffebff8
 800b40c:	fffffcfc 	.word	0xfffffcfc
 800b410:	ffff0303 	.word	0xffff0303

0800b414 <TIM_OC2_SetConfig>:
{
 800b414:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b416:	6a03      	ldr	r3, [r0, #32]
 800b418:	f023 0310 	bic.w	r3, r3, #16
 800b41c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800b41e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800b420:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800b422:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b424:	4e1a      	ldr	r6, [pc, #104]	@ (800b490 <TIM_OC2_SetConfig+0x7c>)
 800b426:	4026      	ands	r6, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b428:	680c      	ldr	r4, [r1, #0]
 800b42a:	ea46 2604 	orr.w	r6, r6, r4, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800b42e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b432:	688a      	ldr	r2, [r1, #8]
 800b434:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b438:	4a16      	ldr	r2, [pc, #88]	@ (800b494 <TIM_OC2_SetConfig+0x80>)
 800b43a:	4c17      	ldr	r4, [pc, #92]	@ (800b498 <TIM_OC2_SetConfig+0x84>)
 800b43c:	42a0      	cmp	r0, r4
 800b43e:	bf18      	it	ne
 800b440:	4290      	cmpne	r0, r2
 800b442:	bf0c      	ite	eq
 800b444:	2201      	moveq	r2, #1
 800b446:	2200      	movne	r2, #0
 800b448:	d106      	bne.n	800b458 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 800b44a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b44e:	68cc      	ldr	r4, [r1, #12]
 800b450:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800b454:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b458:	b95a      	cbnz	r2, 800b472 <TIM_OC2_SetConfig+0x5e>
 800b45a:	4a10      	ldr	r2, [pc, #64]	@ (800b49c <TIM_OC2_SetConfig+0x88>)
 800b45c:	4290      	cmp	r0, r2
 800b45e:	bf14      	ite	ne
 800b460:	2200      	movne	r2, #0
 800b462:	2201      	moveq	r2, #1
 800b464:	4c0e      	ldr	r4, [pc, #56]	@ (800b4a0 <TIM_OC2_SetConfig+0x8c>)
 800b466:	42a0      	cmp	r0, r4
 800b468:	d003      	beq.n	800b472 <TIM_OC2_SetConfig+0x5e>
 800b46a:	b912      	cbnz	r2, 800b472 <TIM_OC2_SetConfig+0x5e>
 800b46c:	4a0d      	ldr	r2, [pc, #52]	@ (800b4a4 <TIM_OC2_SetConfig+0x90>)
 800b46e:	4290      	cmp	r0, r2
 800b470:	d107      	bne.n	800b482 <TIM_OC2_SetConfig+0x6e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b472:	f425 6c40 	bic.w	ip, r5, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b476:	694a      	ldr	r2, [r1, #20]
 800b478:	ea4c 0c82 	orr.w	ip, ip, r2, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b47c:	698a      	ldr	r2, [r1, #24]
 800b47e:	ea4c 0582 	orr.w	r5, ip, r2, lsl #2
  TIMx->CR2 = tmpcr2;
 800b482:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800b484:	6186      	str	r6, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800b486:	684a      	ldr	r2, [r1, #4]
 800b488:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800b48a:	6203      	str	r3, [r0, #32]
}
 800b48c:	bc70      	pop	{r4, r5, r6}
 800b48e:	4770      	bx	lr
 800b490:	feff8cff 	.word	0xfeff8cff
 800b494:	40010000 	.word	0x40010000
 800b498:	40010400 	.word	0x40010400
 800b49c:	40014400 	.word	0x40014400
 800b4a0:	40014000 	.word	0x40014000
 800b4a4:	40014800 	.word	0x40014800

0800b4a8 <HAL_TIM_PWM_ConfigChannel>:
{
 800b4a8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800b4aa:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	f000 8095 	beq.w	800b5de <HAL_TIM_PWM_ConfigChannel+0x136>
 800b4b4:	4604      	mov	r4, r0
 800b4b6:	460d      	mov	r5, r1
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800b4be:	2a14      	cmp	r2, #20
 800b4c0:	f200 8088 	bhi.w	800b5d4 <HAL_TIM_PWM_ConfigChannel+0x12c>
 800b4c4:	e8df f002 	tbb	[pc, r2]
 800b4c8:	8686860b 	.word	0x8686860b
 800b4cc:	8686861f 	.word	0x8686861f
 800b4d0:	86868634 	.word	0x86868634
 800b4d4:	86868648 	.word	0x86868648
 800b4d8:	8686865d 	.word	0x8686865d
 800b4dc:	71          	.byte	0x71
 800b4dd:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b4de:	6800      	ldr	r0, [r0, #0]
 800b4e0:	f7ff fbae 	bl	800ac40 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b4e4:	6822      	ldr	r2, [r4, #0]
 800b4e6:	6993      	ldr	r3, [r2, #24]
 800b4e8:	f043 0308 	orr.w	r3, r3, #8
 800b4ec:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b4ee:	6822      	ldr	r2, [r4, #0]
 800b4f0:	6993      	ldr	r3, [r2, #24]
 800b4f2:	f023 0304 	bic.w	r3, r3, #4
 800b4f6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b4f8:	6822      	ldr	r2, [r4, #0]
 800b4fa:	6993      	ldr	r3, [r2, #24]
 800b4fc:	6929      	ldr	r1, [r5, #16]
 800b4fe:	430b      	orrs	r3, r1
 800b500:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800b502:	2000      	movs	r0, #0
      break;
 800b504:	e067      	b.n	800b5d6 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b506:	6800      	ldr	r0, [r0, #0]
 800b508:	f7ff ff84 	bl	800b414 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b50c:	6822      	ldr	r2, [r4, #0]
 800b50e:	6993      	ldr	r3, [r2, #24]
 800b510:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b514:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b516:	6822      	ldr	r2, [r4, #0]
 800b518:	6993      	ldr	r3, [r2, #24]
 800b51a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b51e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b520:	6822      	ldr	r2, [r4, #0]
 800b522:	6993      	ldr	r3, [r2, #24]
 800b524:	6929      	ldr	r1, [r5, #16]
 800b526:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b52a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800b52c:	2000      	movs	r0, #0
      break;
 800b52e:	e052      	b.n	800b5d6 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b530:	6800      	ldr	r0, [r0, #0]
 800b532:	f7ff fbd7 	bl	800ace4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b536:	6822      	ldr	r2, [r4, #0]
 800b538:	69d3      	ldr	r3, [r2, #28]
 800b53a:	f043 0308 	orr.w	r3, r3, #8
 800b53e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b540:	6822      	ldr	r2, [r4, #0]
 800b542:	69d3      	ldr	r3, [r2, #28]
 800b544:	f023 0304 	bic.w	r3, r3, #4
 800b548:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b54a:	6822      	ldr	r2, [r4, #0]
 800b54c:	69d3      	ldr	r3, [r2, #28]
 800b54e:	6929      	ldr	r1, [r5, #16]
 800b550:	430b      	orrs	r3, r1
 800b552:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800b554:	2000      	movs	r0, #0
      break;
 800b556:	e03e      	b.n	800b5d6 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b558:	6800      	ldr	r0, [r0, #0]
 800b55a:	f7ff fc0d 	bl	800ad78 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b55e:	6822      	ldr	r2, [r4, #0]
 800b560:	69d3      	ldr	r3, [r2, #28]
 800b562:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b566:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b568:	6822      	ldr	r2, [r4, #0]
 800b56a:	69d3      	ldr	r3, [r2, #28]
 800b56c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b570:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b572:	6822      	ldr	r2, [r4, #0]
 800b574:	69d3      	ldr	r3, [r2, #28]
 800b576:	6929      	ldr	r1, [r5, #16]
 800b578:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b57c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800b57e:	2000      	movs	r0, #0
      break;
 800b580:	e029      	b.n	800b5d6 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b582:	6800      	ldr	r0, [r0, #0]
 800b584:	f7ff fc32 	bl	800adec <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b588:	6822      	ldr	r2, [r4, #0]
 800b58a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b58c:	f043 0308 	orr.w	r3, r3, #8
 800b590:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b592:	6822      	ldr	r2, [r4, #0]
 800b594:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b596:	f023 0304 	bic.w	r3, r3, #4
 800b59a:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b59c:	6822      	ldr	r2, [r4, #0]
 800b59e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b5a0:	6929      	ldr	r1, [r5, #16]
 800b5a2:	430b      	orrs	r3, r1
 800b5a4:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800b5a6:	2000      	movs	r0, #0
      break;
 800b5a8:	e015      	b.n	800b5d6 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b5aa:	6800      	ldr	r0, [r0, #0]
 800b5ac:	f7ff fc58 	bl	800ae60 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b5b0:	6822      	ldr	r2, [r4, #0]
 800b5b2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b5b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b5b8:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b5ba:	6822      	ldr	r2, [r4, #0]
 800b5bc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b5be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b5c2:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b5c4:	6822      	ldr	r2, [r4, #0]
 800b5c6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b5c8:	6929      	ldr	r1, [r5, #16]
 800b5ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b5ce:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800b5d0:	2000      	movs	r0, #0
      break;
 800b5d2:	e000      	b.n	800b5d6 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 800b5d4:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800b5dc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800b5de:	2002      	movs	r0, #2
 800b5e0:	e7fc      	b.n	800b5dc <HAL_TIM_PWM_ConfigChannel+0x134>

0800b5e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b5e2:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b5e4:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5e6:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b5ea:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800b5ee:	430a      	orrs	r2, r1
 800b5f0:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5f4:	6082      	str	r2, [r0, #8]
}
 800b5f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800b5fc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800b600:	2b01      	cmp	r3, #1
 800b602:	f000 808f 	beq.w	800b724 <HAL_TIM_ConfigClockSource+0x128>
{
 800b606:	b510      	push	{r4, lr}
 800b608:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800b60a:	2301      	movs	r3, #1
 800b60c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800b610:	2302      	movs	r3, #2
 800b612:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800b616:	6802      	ldr	r2, [r0, #0]
 800b618:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b61a:	4b43      	ldr	r3, [pc, #268]	@ (800b728 <HAL_TIM_ConfigClockSource+0x12c>)
 800b61c:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800b61e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800b620:	680b      	ldr	r3, [r1, #0]
 800b622:	2b70      	cmp	r3, #112	@ 0x70
 800b624:	d055      	beq.n	800b6d2 <HAL_TIM_ConfigClockSource+0xd6>
 800b626:	d831      	bhi.n	800b68c <HAL_TIM_ConfigClockSource+0x90>
 800b628:	2b50      	cmp	r3, #80	@ 0x50
 800b62a:	d06c      	beq.n	800b706 <HAL_TIM_ConfigClockSource+0x10a>
 800b62c:	d90c      	bls.n	800b648 <HAL_TIM_ConfigClockSource+0x4c>
 800b62e:	2b60      	cmp	r3, #96	@ 0x60
 800b630:	d12a      	bne.n	800b688 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b632:	68ca      	ldr	r2, [r1, #12]
 800b634:	6849      	ldr	r1, [r1, #4]
 800b636:	6820      	ldr	r0, [r4, #0]
 800b638:	f7ff fc5f 	bl	800aefa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b63c:	2160      	movs	r1, #96	@ 0x60
 800b63e:	6820      	ldr	r0, [r4, #0]
 800b640:	f7ff fc70 	bl	800af24 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800b644:	2000      	movs	r0, #0
      break;
 800b646:	e035      	b.n	800b6b4 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800b648:	2b40      	cmp	r3, #64	@ 0x40
 800b64a:	d10a      	bne.n	800b662 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b64c:	68ca      	ldr	r2, [r1, #12]
 800b64e:	6849      	ldr	r1, [r1, #4]
 800b650:	6820      	ldr	r0, [r4, #0]
 800b652:	f7ff fc3f 	bl	800aed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b656:	2140      	movs	r1, #64	@ 0x40
 800b658:	6820      	ldr	r0, [r4, #0]
 800b65a:	f7ff fc63 	bl	800af24 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800b65e:	2000      	movs	r0, #0
      break;
 800b660:	e028      	b.n	800b6b4 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800b662:	d85b      	bhi.n	800b71c <HAL_TIM_ConfigClockSource+0x120>
 800b664:	2b20      	cmp	r3, #32
 800b666:	d007      	beq.n	800b678 <HAL_TIM_ConfigClockSource+0x7c>
 800b668:	d903      	bls.n	800b672 <HAL_TIM_ConfigClockSource+0x76>
 800b66a:	2b30      	cmp	r3, #48	@ 0x30
 800b66c:	d004      	beq.n	800b678 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800b66e:	2001      	movs	r0, #1
 800b670:	e020      	b.n	800b6b4 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800b672:	b10b      	cbz	r3, 800b678 <HAL_TIM_ConfigClockSource+0x7c>
 800b674:	2b10      	cmp	r3, #16
 800b676:	d105      	bne.n	800b684 <HAL_TIM_ConfigClockSource+0x88>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b678:	4619      	mov	r1, r3
 800b67a:	6820      	ldr	r0, [r4, #0]
 800b67c:	f7ff fc52 	bl	800af24 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800b680:	2000      	movs	r0, #0
      break;
 800b682:	e017      	b.n	800b6b4 <HAL_TIM_ConfigClockSource+0xb8>
      status = HAL_ERROR;
 800b684:	2001      	movs	r0, #1
 800b686:	e015      	b.n	800b6b4 <HAL_TIM_ConfigClockSource+0xb8>
 800b688:	2001      	movs	r0, #1
 800b68a:	e013      	b.n	800b6b4 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800b68c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b690:	d02c      	beq.n	800b6ec <HAL_TIM_ConfigClockSource+0xf0>
 800b692:	d90b      	bls.n	800b6ac <HAL_TIM_ConfigClockSource+0xb0>
 800b694:	4a25      	ldr	r2, [pc, #148]	@ (800b72c <HAL_TIM_ConfigClockSource+0x130>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d0ee      	beq.n	800b678 <HAL_TIM_ConfigClockSource+0x7c>
 800b69a:	d912      	bls.n	800b6c2 <HAL_TIM_ConfigClockSource+0xc6>
 800b69c:	4a24      	ldr	r2, [pc, #144]	@ (800b730 <HAL_TIM_ConfigClockSource+0x134>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d0ea      	beq.n	800b678 <HAL_TIM_ConfigClockSource+0x7c>
 800b6a2:	3210      	adds	r2, #16
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d0e7      	beq.n	800b678 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800b6a8:	2001      	movs	r0, #1
 800b6aa:	e003      	b.n	800b6b4 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800b6ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6b0:	d136      	bne.n	800b720 <HAL_TIM_ConfigClockSource+0x124>
 800b6b2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800b6c0:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800b6c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6c6:	d0d7      	beq.n	800b678 <HAL_TIM_ConfigClockSource+0x7c>
 800b6c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b6cc:	d0d4      	beq.n	800b678 <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800b6ce:	2001      	movs	r0, #1
 800b6d0:	e7f0      	b.n	800b6b4 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_ETR_SetConfig(htim->Instance,
 800b6d2:	68cb      	ldr	r3, [r1, #12]
 800b6d4:	684a      	ldr	r2, [r1, #4]
 800b6d6:	6889      	ldr	r1, [r1, #8]
 800b6d8:	6820      	ldr	r0, [r4, #0]
 800b6da:	f7ff ff82 	bl	800b5e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b6de:	6822      	ldr	r2, [r4, #0]
 800b6e0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b6e2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800b6e6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b6e8:	2000      	movs	r0, #0
      break;
 800b6ea:	e7e3      	b.n	800b6b4 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_ETR_SetConfig(htim->Instance,
 800b6ec:	68cb      	ldr	r3, [r1, #12]
 800b6ee:	684a      	ldr	r2, [r1, #4]
 800b6f0:	6889      	ldr	r1, [r1, #8]
 800b6f2:	6820      	ldr	r0, [r4, #0]
 800b6f4:	f7ff ff75 	bl	800b5e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b6f8:	6822      	ldr	r2, [r4, #0]
 800b6fa:	6893      	ldr	r3, [r2, #8]
 800b6fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b700:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b702:	2000      	movs	r0, #0
      break;
 800b704:	e7d6      	b.n	800b6b4 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b706:	68ca      	ldr	r2, [r1, #12]
 800b708:	6849      	ldr	r1, [r1, #4]
 800b70a:	6820      	ldr	r0, [r4, #0]
 800b70c:	f7ff fbe2 	bl	800aed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b710:	2150      	movs	r1, #80	@ 0x50
 800b712:	6820      	ldr	r0, [r4, #0]
 800b714:	f7ff fc06 	bl	800af24 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800b718:	2000      	movs	r0, #0
      break;
 800b71a:	e7cb      	b.n	800b6b4 <HAL_TIM_ConfigClockSource+0xb8>
      status = HAL_ERROR;
 800b71c:	2001      	movs	r0, #1
 800b71e:	e7c9      	b.n	800b6b4 <HAL_TIM_ConfigClockSource+0xb8>
 800b720:	2001      	movs	r0, #1
 800b722:	e7c7      	b.n	800b6b4 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 800b724:	2002      	movs	r0, #2
}
 800b726:	4770      	bx	lr
 800b728:	ffce0088 	.word	0xffce0088
 800b72c:	00100020 	.word	0x00100020
 800b730:	00100030 	.word	0x00100030

0800b734 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b734:	f001 011f 	and.w	r1, r1, #31
 800b738:	f04f 0c01 	mov.w	ip, #1
 800b73c:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b740:	6a03      	ldr	r3, [r0, #32]
 800b742:	ea23 030c 	bic.w	r3, r3, ip
 800b746:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b748:	6a03      	ldr	r3, [r0, #32]
 800b74a:	408a      	lsls	r2, r1
 800b74c:	4313      	orrs	r3, r2
 800b74e:	6203      	str	r3, [r0, #32]
}
 800b750:	4770      	bx	lr
	...

0800b754 <HAL_TIM_PWM_Start>:
{
 800b754:	b510      	push	{r4, lr}
 800b756:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b758:	2910      	cmp	r1, #16
 800b75a:	d83d      	bhi.n	800b7d8 <HAL_TIM_PWM_Start+0x84>
 800b75c:	e8df f001 	tbb	[pc, r1]
 800b760:	3c3c3c09 	.word	0x3c3c3c09
 800b764:	3c3c3c20 	.word	0x3c3c3c20
 800b768:	3c3c3c27 	.word	0x3c3c3c27
 800b76c:	3c3c3c2e 	.word	0x3c3c3c2e
 800b770:	35          	.byte	0x35
 800b771:	00          	.byte	0x00
 800b772:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800b776:	b2db      	uxtb	r3, r3
 800b778:	3b01      	subs	r3, #1
 800b77a:	bf18      	it	ne
 800b77c:	2301      	movne	r3, #1
 800b77e:	2b00      	cmp	r3, #0
 800b780:	f040 8096 	bne.w	800b8b0 <HAL_TIM_PWM_Start+0x15c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b784:	2910      	cmp	r1, #16
 800b786:	f200 8081 	bhi.w	800b88c <HAL_TIM_PWM_Start+0x138>
 800b78a:	e8df f001 	tbb	[pc, r1]
 800b78e:	7f2c      	.short	0x7f2c
 800b790:	7f6f7f7f 	.word	0x7f6f7f7f
 800b794:	7f737f7f 	.word	0x7f737f7f
 800b798:	7f777f7f 	.word	0x7f777f7f
 800b79c:	7f7f      	.short	0x7f7f
 800b79e:	7b          	.byte	0x7b
 800b79f:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b7a0:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	3b01      	subs	r3, #1
 800b7a8:	bf18      	it	ne
 800b7aa:	2301      	movne	r3, #1
 800b7ac:	e7e7      	b.n	800b77e <HAL_TIM_PWM_Start+0x2a>
 800b7ae:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	bf18      	it	ne
 800b7b8:	2301      	movne	r3, #1
 800b7ba:	e7e0      	b.n	800b77e <HAL_TIM_PWM_Start+0x2a>
 800b7bc:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	3b01      	subs	r3, #1
 800b7c4:	bf18      	it	ne
 800b7c6:	2301      	movne	r3, #1
 800b7c8:	e7d9      	b.n	800b77e <HAL_TIM_PWM_Start+0x2a>
 800b7ca:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	bf18      	it	ne
 800b7d4:	2301      	movne	r3, #1
 800b7d6:	e7d2      	b.n	800b77e <HAL_TIM_PWM_Start+0x2a>
 800b7d8:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	bf18      	it	ne
 800b7e2:	2301      	movne	r3, #1
 800b7e4:	e7cb      	b.n	800b77e <HAL_TIM_PWM_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7e6:	2302      	movs	r3, #2
 800b7e8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	6820      	ldr	r0, [r4, #0]
 800b7f0:	f7ff ffa0 	bl	800b734 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b7f4:	6823      	ldr	r3, [r4, #0]
 800b7f6:	4930      	ldr	r1, [pc, #192]	@ (800b8b8 <HAL_TIM_PWM_Start+0x164>)
 800b7f8:	4a30      	ldr	r2, [pc, #192]	@ (800b8bc <HAL_TIM_PWM_Start+0x168>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	bf18      	it	ne
 800b7fe:	428b      	cmpne	r3, r1
 800b800:	d00b      	beq.n	800b81a <HAL_TIM_PWM_Start+0xc6>
 800b802:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800b806:	4293      	cmp	r3, r2
 800b808:	d007      	beq.n	800b81a <HAL_TIM_PWM_Start+0xc6>
 800b80a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b80e:	4293      	cmp	r3, r2
 800b810:	d003      	beq.n	800b81a <HAL_TIM_PWM_Start+0xc6>
 800b812:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b816:	4293      	cmp	r3, r2
 800b818:	d103      	bne.n	800b822 <HAL_TIM_PWM_Start+0xce>
    __HAL_TIM_MOE_ENABLE(htim);
 800b81a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b81c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b820:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b822:	6823      	ldr	r3, [r4, #0]
 800b824:	4a24      	ldr	r2, [pc, #144]	@ (800b8b8 <HAL_TIM_PWM_Start+0x164>)
 800b826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b82a:	bf18      	it	ne
 800b82c:	4293      	cmpne	r3, r2
 800b82e:	d031      	beq.n	800b894 <HAL_TIM_PWM_Start+0x140>
 800b830:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800b834:	4293      	cmp	r3, r2
 800b836:	d02d      	beq.n	800b894 <HAL_TIM_PWM_Start+0x140>
 800b838:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d029      	beq.n	800b894 <HAL_TIM_PWM_Start+0x140>
 800b840:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b844:	4293      	cmp	r3, r2
 800b846:	d025      	beq.n	800b894 <HAL_TIM_PWM_Start+0x140>
 800b848:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d021      	beq.n	800b894 <HAL_TIM_PWM_Start+0x140>
 800b850:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800b854:	4293      	cmp	r3, r2
 800b856:	d01d      	beq.n	800b894 <HAL_TIM_PWM_Start+0x140>
 800b858:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d019      	beq.n	800b894 <HAL_TIM_PWM_Start+0x140>
    __HAL_TIM_ENABLE(htim);
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	f042 0201 	orr.w	r2, r2, #1
 800b866:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b868:	2000      	movs	r0, #0
 800b86a:	e022      	b.n	800b8b2 <HAL_TIM_PWM_Start+0x15e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b86c:	2302      	movs	r3, #2
 800b86e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800b872:	e7bb      	b.n	800b7ec <HAL_TIM_PWM_Start+0x98>
 800b874:	2302      	movs	r3, #2
 800b876:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800b87a:	e7b7      	b.n	800b7ec <HAL_TIM_PWM_Start+0x98>
 800b87c:	2302      	movs	r3, #2
 800b87e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800b882:	e7b3      	b.n	800b7ec <HAL_TIM_PWM_Start+0x98>
 800b884:	2302      	movs	r3, #2
 800b886:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b88a:	e7af      	b.n	800b7ec <HAL_TIM_PWM_Start+0x98>
 800b88c:	2302      	movs	r3, #2
 800b88e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b892:	e7ab      	b.n	800b7ec <HAL_TIM_PWM_Start+0x98>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b894:	6899      	ldr	r1, [r3, #8]
 800b896:	4a0a      	ldr	r2, [pc, #40]	@ (800b8c0 <HAL_TIM_PWM_Start+0x16c>)
 800b898:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b89a:	2a06      	cmp	r2, #6
 800b89c:	bf18      	it	ne
 800b89e:	f5b2 3f80 	cmpne.w	r2, #65536	@ 0x10000
 800b8a2:	d007      	beq.n	800b8b4 <HAL_TIM_PWM_Start+0x160>
      __HAL_TIM_ENABLE(htim);
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	f042 0201 	orr.w	r2, r2, #1
 800b8aa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	e000      	b.n	800b8b2 <HAL_TIM_PWM_Start+0x15e>
    return HAL_ERROR;
 800b8b0:	2001      	movs	r0, #1
}
 800b8b2:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800b8b4:	2000      	movs	r0, #0
 800b8b6:	e7fc      	b.n	800b8b2 <HAL_TIM_PWM_Start+0x15e>
 800b8b8:	40010000 	.word	0x40010000
 800b8bc:	40010400 	.word	0x40010400
 800b8c0:	00010007 	.word	0x00010007

0800b8c4 <HAL_TIM_Encoder_Start>:
{
 800b8c4:	b538      	push	{r3, r4, r5, lr}
 800b8c6:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b8c8:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800b8cc:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b8ce:	f890 203f 	ldrb.w	r2, [r0, #63]	@ 0x3f
 800b8d2:	fa5f fc82 	uxtb.w	ip, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b8d6:	f890 2044 	ldrb.w	r2, [r0, #68]	@ 0x44
 800b8da:	b2d0      	uxtb	r0, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b8dc:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
  if (Channel == TIM_CHANNEL_1)
 800b8e0:	460d      	mov	r5, r1
 800b8e2:	b9b1      	cbnz	r1, 800b912 <HAL_TIM_Encoder_Start+0x4e>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b8e4:	2801      	cmp	r0, #1
 800b8e6:	bf08      	it	eq
 800b8e8:	2b01      	cmpeq	r3, #1
 800b8ea:	d147      	bne.n	800b97c <HAL_TIM_Encoder_Start+0xb8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8ec:	2302      	movs	r3, #2
 800b8ee:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8f2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
  switch (Channel)
 800b8f6:	b37d      	cbz	r5, 800b958 <HAL_TIM_Encoder_Start+0x94>
 800b8f8:	2d04      	cmp	r5, #4
 800b8fa:	d039      	beq.n	800b970 <HAL_TIM_Encoder_Start+0xac>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	2100      	movs	r1, #0
 800b900:	6820      	ldr	r0, [r4, #0]
 800b902:	f7ff ff17 	bl	800b734 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b906:	2201      	movs	r2, #1
 800b908:	2104      	movs	r1, #4
 800b90a:	6820      	ldr	r0, [r4, #0]
 800b90c:	f7ff ff12 	bl	800b734 <TIM_CCxChannelCmd>
      break;
 800b910:	e027      	b.n	800b962 <HAL_TIM_Encoder_Start+0x9e>
 800b912:	b2d2      	uxtb	r2, r2
  else if (Channel == TIM_CHANNEL_2)
 800b914:	2904      	cmp	r1, #4
 800b916:	d014      	beq.n	800b942 <HAL_TIM_Encoder_Start+0x7e>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b918:	f1bc 0f01 	cmp.w	ip, #1
 800b91c:	bf08      	it	eq
 800b91e:	2b01      	cmpeq	r3, #1
 800b920:	d130      	bne.n	800b984 <HAL_TIM_Encoder_Start+0xc0>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b922:	3a01      	subs	r2, #1
 800b924:	bf18      	it	ne
 800b926:	2201      	movne	r2, #1
 800b928:	2801      	cmp	r0, #1
 800b92a:	d12d      	bne.n	800b988 <HAL_TIM_Encoder_Start+0xc4>
 800b92c:	bb62      	cbnz	r2, 800b988 <HAL_TIM_Encoder_Start+0xc4>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b92e:	2302      	movs	r3, #2
 800b930:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b934:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b938:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b93c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800b940:	e7d9      	b.n	800b8f6 <HAL_TIM_Encoder_Start+0x32>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b942:	2a01      	cmp	r2, #1
 800b944:	bf08      	it	eq
 800b946:	f1bc 0f01 	cmpeq.w	ip, #1
 800b94a:	d119      	bne.n	800b980 <HAL_TIM_Encoder_Start+0xbc>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b94c:	2302      	movs	r3, #2
 800b94e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b952:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800b956:	e7ce      	b.n	800b8f6 <HAL_TIM_Encoder_Start+0x32>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b958:	2201      	movs	r2, #1
 800b95a:	2100      	movs	r1, #0
 800b95c:	6820      	ldr	r0, [r4, #0]
 800b95e:	f7ff fee9 	bl	800b734 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 800b962:	6822      	ldr	r2, [r4, #0]
 800b964:	6813      	ldr	r3, [r2, #0]
 800b966:	f043 0301 	orr.w	r3, r3, #1
 800b96a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800b96c:	2000      	movs	r0, #0
}
 800b96e:	bd38      	pop	{r3, r4, r5, pc}
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b970:	2201      	movs	r2, #1
 800b972:	2104      	movs	r1, #4
 800b974:	6820      	ldr	r0, [r4, #0]
 800b976:	f7ff fedd 	bl	800b734 <TIM_CCxChannelCmd>
      break;
 800b97a:	e7f2      	b.n	800b962 <HAL_TIM_Encoder_Start+0x9e>
      return HAL_ERROR;
 800b97c:	2001      	movs	r0, #1
 800b97e:	e7f6      	b.n	800b96e <HAL_TIM_Encoder_Start+0xaa>
      return HAL_ERROR;
 800b980:	2001      	movs	r0, #1
 800b982:	e7f4      	b.n	800b96e <HAL_TIM_Encoder_Start+0xaa>
      return HAL_ERROR;
 800b984:	2001      	movs	r0, #1
 800b986:	e7f2      	b.n	800b96e <HAL_TIM_Encoder_Start+0xaa>
 800b988:	2001      	movs	r0, #1
 800b98a:	e7f0      	b.n	800b96e <HAL_TIM_Encoder_Start+0xaa>

0800b98c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b98c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800b990:	2a01      	cmp	r2, #1
 800b992:	d045      	beq.n	800ba20 <HAL_TIMEx_MasterConfigSynchronization+0x94>
{
 800b994:	b470      	push	{r4, r5, r6}
 800b996:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800b998:	2201      	movs	r2, #1
 800b99a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b99e:	2202      	movs	r2, #2
 800b9a0:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9a4:	6802      	ldr	r2, [r0, #0]
 800b9a6:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9a8:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b9aa:	4e1e      	ldr	r6, [pc, #120]	@ (800ba24 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800b9ac:	4d1e      	ldr	r5, [pc, #120]	@ (800ba28 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 800b9ae:	42aa      	cmp	r2, r5
 800b9b0:	bf18      	it	ne
 800b9b2:	42b2      	cmpne	r2, r6
 800b9b4:	d103      	bne.n	800b9be <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b9b6:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b9ba:	684d      	ldr	r5, [r1, #4]
 800b9bc:	4328      	orrs	r0, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9be:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b9c2:	680d      	ldr	r5, [r1, #0]
 800b9c4:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b9c6:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	4816      	ldr	r0, [pc, #88]	@ (800ba24 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800b9cc:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800b9d0:	bf18      	it	ne
 800b9d2:	4282      	cmpne	r2, r0
 800b9d4:	d017      	beq.n	800ba06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b9d6:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 800b9da:	4282      	cmp	r2, r0
 800b9dc:	d013      	beq.n	800ba06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b9de:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800b9e2:	4282      	cmp	r2, r0
 800b9e4:	d00f      	beq.n	800ba06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b9e6:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800b9ea:	4282      	cmp	r2, r0
 800b9ec:	d00b      	beq.n	800ba06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b9ee:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 800b9f2:	4282      	cmp	r2, r0
 800b9f4:	d007      	beq.n	800ba06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b9f6:	f5a0 406c 	sub.w	r0, r0, #60416	@ 0xec00
 800b9fa:	4282      	cmp	r2, r0
 800b9fc:	d003      	beq.n	800ba06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b9fe:	f500 3094 	add.w	r0, r0, #75776	@ 0x12800
 800ba02:	4282      	cmp	r2, r0
 800ba04:	d104      	bne.n	800ba10 <HAL_TIMEx_MasterConfigSynchronization+0x84>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba06:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba0a:	6889      	ldr	r1, [r1, #8]
 800ba0c:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba0e:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba10:	2201      	movs	r2, #1
 800ba12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba16:	2000      	movs	r0, #0
 800ba18:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800ba1c:	bc70      	pop	{r4, r5, r6}
 800ba1e:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ba20:	2002      	movs	r0, #2
}
 800ba22:	4770      	bx	lr
 800ba24:	40010000 	.word	0x40010000
 800ba28:	40010400 	.word	0x40010400

0800ba2c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba2c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d03c      	beq.n	800baae <HAL_TIMEx_ConfigBreakDeadTime+0x82>
{
 800ba34:	b430      	push	{r4, r5}
 800ba36:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 800ba38:	2301      	movs	r3, #1
 800ba3a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ba3e:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ba40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba44:	6888      	ldr	r0, [r1, #8]
 800ba46:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ba48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ba4c:	6848      	ldr	r0, [r1, #4]
 800ba4e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ba50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ba54:	6808      	ldr	r0, [r1, #0]
 800ba56:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ba58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba5c:	6908      	ldr	r0, [r1, #16]
 800ba5e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ba60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ba64:	6948      	ldr	r0, [r1, #20]
 800ba66:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ba68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ba6c:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 800ba6e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ba70:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800ba74:	6988      	ldr	r0, [r1, #24]
 800ba76:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ba7a:	6810      	ldr	r0, [r2, #0]
 800ba7c:	4d0d      	ldr	r5, [pc, #52]	@ (800bab4 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 800ba7e:	4c0e      	ldr	r4, [pc, #56]	@ (800bab8 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 800ba80:	42a0      	cmp	r0, r4
 800ba82:	bf18      	it	ne
 800ba84:	42a8      	cmpne	r0, r5
 800ba86:	d10c      	bne.n	800baa2 <HAL_TIMEx_ConfigBreakDeadTime+0x76>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ba88:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ba8c:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800ba8e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ba92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ba96:	69cc      	ldr	r4, [r1, #28]
 800ba98:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ba9a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ba9e:	6a09      	ldr	r1, [r1, #32]
 800baa0:	430b      	orrs	r3, r1
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800baa2:	6443      	str	r3, [r0, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800baa4:	2000      	movs	r0, #0
 800baa6:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 800baaa:	bc30      	pop	{r4, r5}
 800baac:	4770      	bx	lr
  __HAL_LOCK(htim);
 800baae:	2002      	movs	r0, #2
}
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	40010000 	.word	0x40010000
 800bab8:	40010400 	.word	0x40010400

0800babc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800babc:	4770      	bx	lr

0800babe <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800babe:	4770      	bx	lr

0800bac0 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bac0:	4770      	bx	lr

0800bac2 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bac2:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac4:	e852 3f00 	ldrex	r3, [r2]
 800bac8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bacc:	e842 3100 	strex	r1, r3, [r2]
 800bad0:	2900      	cmp	r1, #0
 800bad2:	d1f6      	bne.n	800bac2 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bad4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad6:	f102 0308 	add.w	r3, r2, #8
 800bada:	e853 3f00 	ldrex	r3, [r3]
 800bade:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae2:	3208      	adds	r2, #8
 800bae4:	e842 3100 	strex	r1, r3, [r2]
 800bae8:	2900      	cmp	r1, #0
 800baea:	d1f3      	bne.n	800bad4 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800baec:	2320      	movs	r3, #32
 800baee:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
}
 800baf2:	4770      	bx	lr

0800baf4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800baf4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf6:	e852 3f00 	ldrex	r3, [r2]
 800bafa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafe:	e842 3100 	strex	r1, r3, [r2]
 800bb02:	2900      	cmp	r1, #0
 800bb04:	d1f6      	bne.n	800baf4 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb06:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb08:	f102 0308 	add.w	r3, r2, #8
 800bb0c:	e853 1f00 	ldrex	r1, [r3]
 800bb10:	4b0d      	ldr	r3, [pc, #52]	@ (800bb48 <UART_EndRxTransfer+0x54>)
 800bb12:	400b      	ands	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb14:	3208      	adds	r2, #8
 800bb16:	e842 3100 	strex	r1, r3, [r2]
 800bb1a:	2900      	cmp	r1, #0
 800bb1c:	d1f3      	bne.n	800bb06 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb1e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d006      	beq.n	800bb32 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb24:	2320      	movs	r3, #32
 800bb26:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb2e:	6703      	str	r3, [r0, #112]	@ 0x70
}
 800bb30:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb32:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb34:	e852 3f00 	ldrex	r3, [r2]
 800bb38:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3c:	e842 3100 	strex	r1, r3, [r2]
 800bb40:	2900      	cmp	r1, #0
 800bb42:	d1f6      	bne.n	800bb32 <UART_EndRxTransfer+0x3e>
 800bb44:	e7ee      	b.n	800bb24 <UART_EndRxTransfer+0x30>
 800bb46:	bf00      	nop
 800bb48:	effffffe 	.word	0xeffffffe

0800bb4c <HAL_UART_Transmit_DMA>:
{
 800bb4c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800bb4e:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800bb52:	2a20      	cmp	r2, #32
 800bb54:	d14a      	bne.n	800bbec <HAL_UART_Transmit_DMA+0xa0>
{
 800bb56:	b510      	push	{r4, lr}
 800bb58:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	bf18      	it	ne
 800bb5e:	2900      	cmpne	r1, #0
 800bb60:	d046      	beq.n	800bbf0 <HAL_UART_Transmit_DMA+0xa4>
    __HAL_LOCK(huart);
 800bb62:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 800bb66:	2a01      	cmp	r2, #1
 800bb68:	d044      	beq.n	800bbf4 <HAL_UART_Transmit_DMA+0xa8>
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f880 2080 	strb.w	r2, [r0, #128]	@ 0x80
    huart->pTxBuffPtr  = pData;
 800bb70:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800bb72:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bb76:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb80:	2221      	movs	r2, #33	@ 0x21
 800bb82:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    if (huart->hdmatx != NULL)
 800bb86:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800bb88:	b1e2      	cbz	r2, 800bbc4 <HAL_UART_Transmit_DMA+0x78>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bb8a:	491b      	ldr	r1, [pc, #108]	@ (800bbf8 <HAL_UART_Transmit_DMA+0xac>)
 800bb8c:	63d1      	str	r1, [r2, #60]	@ 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bb8e:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800bb90:	491a      	ldr	r1, [pc, #104]	@ (800bbfc <HAL_UART_Transmit_DMA+0xb0>)
 800bb92:	6411      	str	r1, [r2, #64]	@ 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bb94:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800bb96:	491a      	ldr	r1, [pc, #104]	@ (800bc00 <HAL_UART_Transmit_DMA+0xb4>)
 800bb98:	64d1      	str	r1, [r2, #76]	@ 0x4c
      huart->hdmatx->XferAbortCallback = NULL;
 800bb9a:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	6511      	str	r1, [r2, #80]	@ 0x50
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bba0:	6802      	ldr	r2, [r0, #0]
 800bba2:	3228      	adds	r2, #40	@ 0x28
 800bba4:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800bba6:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 800bba8:	f7f9 f8de 	bl	8004d68 <HAL_DMA_Start_IT>
 800bbac:	b150      	cbz	r0, 800bbc4 <HAL_UART_Transmit_DMA+0x78>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bbae:	2310      	movs	r3, #16
 800bbb0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        __HAL_UNLOCK(huart);
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
        huart->gState = HAL_UART_STATE_READY;
 800bbba:	2320      	movs	r3, #32
 800bbbc:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        return HAL_ERROR;
 800bbc0:	2001      	movs	r0, #1
 800bbc2:	e012      	b.n	800bbea <HAL_UART_Transmit_DMA+0x9e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bbc4:	6823      	ldr	r3, [r4, #0]
 800bbc6:	2240      	movs	r2, #64	@ 0x40
 800bbc8:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800bbca:	2300      	movs	r3, #0
 800bbcc:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bbd0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd2:	f102 0308 	add.w	r3, r2, #8
 800bbd6:	e853 3f00 	ldrex	r3, [r3]
 800bbda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbde:	3208      	adds	r2, #8
 800bbe0:	e842 3100 	strex	r1, r3, [r2]
 800bbe4:	2900      	cmp	r1, #0
 800bbe6:	d1f3      	bne.n	800bbd0 <HAL_UART_Transmit_DMA+0x84>
    return HAL_OK;
 800bbe8:	2000      	movs	r0, #0
}
 800bbea:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800bbec:	2002      	movs	r0, #2
}
 800bbee:	4770      	bx	lr
      return HAL_ERROR;
 800bbf0:	2001      	movs	r0, #1
 800bbf2:	e7fa      	b.n	800bbea <HAL_UART_Transmit_DMA+0x9e>
    __HAL_LOCK(huart);
 800bbf4:	2002      	movs	r0, #2
 800bbf6:	e7f8      	b.n	800bbea <HAL_UART_Transmit_DMA+0x9e>
 800bbf8:	0800bc07 	.word	0x0800bc07
 800bbfc:	0800bc73 	.word	0x0800bc73
 800bc00:	0800bc81 	.word	0x0800bc81

0800bc04 <HAL_UART_TxCpltCallback>:
}
 800bc04:	4770      	bx	lr

0800bc06 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bc06:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc08:	6b81      	ldr	r1, [r0, #56]	@ 0x38

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bc0a:	69c3      	ldr	r3, [r0, #28]
 800bc0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc10:	d018      	beq.n	800bc44 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 800bc12:	2300      	movs	r3, #0
 800bc14:	f8a1 3056 	strh.w	r3, [r1, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bc18:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1a:	f102 0308 	add.w	r3, r2, #8
 800bc1e:	e853 3f00 	ldrex	r3, [r3]
 800bc22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc26:	3208      	adds	r2, #8
 800bc28:	e842 3000 	strex	r0, r3, [r2]
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	d1f3      	bne.n	800bc18 <UART_DMATransmitCplt+0x12>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc30:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc32:	e852 3f00 	ldrex	r3, [r2]
 800bc36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc3a:	e842 3000 	strex	r0, r3, [r2]
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	d1f6      	bne.n	800bc30 <UART_DMATransmitCplt+0x2a>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc42:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800bc44:	4608      	mov	r0, r1
 800bc46:	f7ff ffdd 	bl	800bc04 <HAL_UART_TxCpltCallback>
}
 800bc4a:	e7fa      	b.n	800bc42 <UART_DMATransmitCplt+0x3c>

0800bc4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc4c:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc4e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc50:	e852 3f00 	ldrex	r3, [r2]
 800bc54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc58:	e842 3100 	strex	r1, r3, [r2]
 800bc5c:	2900      	cmp	r1, #0
 800bc5e:	d1f6      	bne.n	800bc4e <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc60:	2320      	movs	r3, #32
 800bc62:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bc66:	2300      	movs	r3, #0
 800bc68:	6743      	str	r3, [r0, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc6a:	f7ff ffcb 	bl	800bc04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc6e:	bd08      	pop	{r3, pc}

0800bc70 <HAL_UART_TxHalfCpltCallback>:
}
 800bc70:	4770      	bx	lr

0800bc72 <UART_DMATxHalfCplt>:
{
 800bc72:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800bc74:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800bc76:	f7ff fffb 	bl	800bc70 <HAL_UART_TxHalfCpltCallback>
}
 800bc7a:	bd08      	pop	{r3, pc}

0800bc7c <HAL_UART_RxCpltCallback>:
}
 800bc7c:	4770      	bx	lr

0800bc7e <HAL_UART_RxHalfCpltCallback>:
}
 800bc7e:	4770      	bx	lr

0800bc80 <UART_DMAError>:
{
 800bc80:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc82:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bc84:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bc88:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bc8c:	6823      	ldr	r3, [r4, #0]
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bc94:	d001      	beq.n	800bc9a <UART_DMAError+0x1a>
 800bc96:	2a21      	cmp	r2, #33	@ 0x21
 800bc98:	d010      	beq.n	800bcbc <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bc9a:	6823      	ldr	r3, [r4, #0]
 800bc9c:	689b      	ldr	r3, [r3, #8]
 800bc9e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800bca2:	d001      	beq.n	800bca8 <UART_DMAError+0x28>
 800bca4:	2d22      	cmp	r5, #34	@ 0x22
 800bca6:	d010      	beq.n	800bcca <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bca8:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800bcac:	f043 0310 	orr.w	r3, r3, #16
 800bcb0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  HAL_UART_ErrorCallback(huart);
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f7f4 fe01 	bl	80008bc <HAL_UART_ErrorCallback>
}
 800bcba:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	f7ff fefd 	bl	800bac2 <UART_EndTxTransfer>
 800bcc8:	e7e7      	b.n	800bc9a <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 800bcca:	2300      	movs	r3, #0
 800bccc:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f7ff ff0f 	bl	800baf4 <UART_EndRxTransfer>
 800bcd6:	e7e7      	b.n	800bca8 <UART_DMAError+0x28>

0800bcd8 <UART_DMAAbortOnError>:
{
 800bcd8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcda:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800bce2:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 800bce6:	f7f4 fde9 	bl	80008bc <HAL_UART_ErrorCallback>
}
 800bcea:	bd08      	pop	{r3, pc}

0800bcec <HAL_UART_IRQHandler>:
{
 800bcec:	b570      	push	{r4, r5, r6, lr}
 800bcee:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bcf0:	6802      	ldr	r2, [r0, #0]
 800bcf2:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bcf4:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bcf6:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800bcf8:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 800bcfc:	ea13 0f0c 	tst.w	r3, ip
 800bd00:	d10d      	bne.n	800bd1e <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bd02:	f013 0f20 	tst.w	r3, #32
 800bd06:	d010      	beq.n	800bd2a <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bd08:	f010 0f20 	tst.w	r0, #32
 800bd0c:	d102      	bne.n	800bd14 <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bd0e:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 800bd12:	d00a      	beq.n	800bd2a <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 800bd14:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800bd16:	b393      	cbz	r3, 800bd7e <HAL_UART_IRQHandler+0x92>
        huart->RxISR(huart);
 800bd18:	4620      	mov	r0, r4
 800bd1a:	4798      	blx	r3
      return;
 800bd1c:	e02f      	b.n	800bd7e <HAL_UART_IRQHandler+0x92>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bd1e:	4d86      	ldr	r5, [pc, #536]	@ (800bf38 <HAL_UART_IRQHandler+0x24c>)
 800bd20:	400d      	ands	r5, r1
 800bd22:	d12d      	bne.n	800bd80 <HAL_UART_IRQHandler+0x94>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bd24:	4e85      	ldr	r6, [pc, #532]	@ (800bf3c <HAL_UART_IRQHandler+0x250>)
 800bd26:	4230      	tst	r0, r6
 800bd28:	d12a      	bne.n	800bd80 <HAL_UART_IRQHandler+0x94>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd2a:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 800bd2c:	2d01      	cmp	r5, #1
 800bd2e:	f000 80bd 	beq.w	800beac <HAL_UART_IRQHandler+0x1c0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bd32:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800bd36:	d003      	beq.n	800bd40 <HAL_UART_IRQHandler+0x54>
 800bd38:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 800bd3c:	f040 818b 	bne.w	800c056 <HAL_UART_IRQHandler+0x36a>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bd40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bd44:	d007      	beq.n	800bd56 <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bd46:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800bd4a:	f040 818b 	bne.w	800c064 <HAL_UART_IRQHandler+0x378>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bd4e:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 800bd52:	f040 8187 	bne.w	800c064 <HAL_UART_IRQHandler+0x378>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bd56:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800bd5a:	d003      	beq.n	800bd64 <HAL_UART_IRQHandler+0x78>
 800bd5c:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800bd60:	f040 8187 	bne.w	800c072 <HAL_UART_IRQHandler+0x386>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bd64:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800bd68:	d003      	beq.n	800bd72 <HAL_UART_IRQHandler+0x86>
 800bd6a:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 800bd6e:	f040 8184 	bne.w	800c07a <HAL_UART_IRQHandler+0x38e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bd72:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800bd76:	d002      	beq.n	800bd7e <HAL_UART_IRQHandler+0x92>
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	f2c0 8182 	blt.w	800c082 <HAL_UART_IRQHandler+0x396>
}
 800bd7e:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bd80:	f013 0f01 	tst.w	r3, #1
 800bd84:	d009      	beq.n	800bd9a <HAL_UART_IRQHandler+0xae>
 800bd86:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800bd8a:	d006      	beq.n	800bd9a <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bd8c:	2601      	movs	r6, #1
 800bd8e:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bd90:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800bd94:	4332      	orrs	r2, r6
 800bd96:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bd9a:	f013 0f02 	tst.w	r3, #2
 800bd9e:	d00b      	beq.n	800bdb8 <HAL_UART_IRQHandler+0xcc>
 800bda0:	f011 0f01 	tst.w	r1, #1
 800bda4:	d008      	beq.n	800bdb8 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bda6:	6822      	ldr	r2, [r4, #0]
 800bda8:	2602      	movs	r6, #2
 800bdaa:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bdac:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800bdb0:	f042 0204 	orr.w	r2, r2, #4
 800bdb4:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bdb8:	f013 0f04 	tst.w	r3, #4
 800bdbc:	d00b      	beq.n	800bdd6 <HAL_UART_IRQHandler+0xea>
 800bdbe:	f011 0f01 	tst.w	r1, #1
 800bdc2:	d008      	beq.n	800bdd6 <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bdc4:	6822      	ldr	r2, [r4, #0]
 800bdc6:	2604      	movs	r6, #4
 800bdc8:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bdca:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800bdce:	f042 0202 	orr.w	r2, r2, #2
 800bdd2:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bdd6:	f013 0f08 	tst.w	r3, #8
 800bdda:	d00b      	beq.n	800bdf4 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bddc:	f010 0f20 	tst.w	r0, #32
 800bde0:	d100      	bne.n	800bde4 <HAL_UART_IRQHandler+0xf8>
 800bde2:	b13d      	cbz	r5, 800bdf4 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bde4:	6822      	ldr	r2, [r4, #0]
 800bde6:	2508      	movs	r5, #8
 800bde8:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bdea:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800bdee:	432a      	orrs	r2, r5
 800bdf0:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bdf4:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800bdf8:	d00c      	beq.n	800be14 <HAL_UART_IRQHandler+0x128>
 800bdfa:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 800bdfe:	d009      	beq.n	800be14 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be00:	6822      	ldr	r2, [r4, #0]
 800be02:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800be06:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800be08:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800be0c:	f042 0220 	orr.w	r2, r2, #32
 800be10:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800be14:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800be18:	2a00      	cmp	r2, #0
 800be1a:	d0b0      	beq.n	800bd7e <HAL_UART_IRQHandler+0x92>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800be1c:	f013 0f20 	tst.w	r3, #32
 800be20:	d009      	beq.n	800be36 <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800be22:	f010 0f20 	tst.w	r0, #32
 800be26:	d102      	bne.n	800be2e <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800be28:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 800be2c:	d003      	beq.n	800be36 <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 800be2e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800be30:	b10b      	cbz	r3, 800be36 <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 800be32:	4620      	mov	r0, r4
 800be34:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800be36:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800be3a:	6823      	ldr	r3, [r4, #0]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800be42:	d102      	bne.n	800be4a <HAL_UART_IRQHandler+0x15e>
 800be44:	f012 0f28 	tst.w	r2, #40	@ 0x28
 800be48:	d029      	beq.n	800be9e <HAL_UART_IRQHandler+0x1b2>
        UART_EndRxTransfer(huart);
 800be4a:	4620      	mov	r0, r4
 800be4c:	f7ff fe52 	bl	800baf4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be50:	6823      	ldr	r3, [r4, #0]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800be58:	d01d      	beq.n	800be96 <HAL_UART_IRQHandler+0x1aa>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be5a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be5c:	f102 0308 	add.w	r3, r2, #8
 800be60:	e853 3f00 	ldrex	r3, [r3]
 800be64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be68:	3208      	adds	r2, #8
 800be6a:	e842 3100 	strex	r1, r3, [r2]
 800be6e:	2900      	cmp	r1, #0
 800be70:	d1f3      	bne.n	800be5a <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 800be72:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800be74:	b15b      	cbz	r3, 800be8e <HAL_UART_IRQHandler+0x1a2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be76:	4a32      	ldr	r2, [pc, #200]	@ (800bf40 <HAL_UART_IRQHandler+0x254>)
 800be78:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be7a:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800be7c:	f7f9 fa60 	bl	8005340 <HAL_DMA_Abort_IT>
 800be80:	2800      	cmp	r0, #0
 800be82:	f43f af7c 	beq.w	800bd7e <HAL_UART_IRQHandler+0x92>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be86:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800be88:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800be8a:	4798      	blx	r3
 800be8c:	e777      	b.n	800bd7e <HAL_UART_IRQHandler+0x92>
            HAL_UART_ErrorCallback(huart);
 800be8e:	4620      	mov	r0, r4
 800be90:	f7f4 fd14 	bl	80008bc <HAL_UART_ErrorCallback>
 800be94:	e773      	b.n	800bd7e <HAL_UART_IRQHandler+0x92>
          HAL_UART_ErrorCallback(huart);
 800be96:	4620      	mov	r0, r4
 800be98:	f7f4 fd10 	bl	80008bc <HAL_UART_ErrorCallback>
 800be9c:	e76f      	b.n	800bd7e <HAL_UART_IRQHandler+0x92>
        HAL_UART_ErrorCallback(huart);
 800be9e:	4620      	mov	r0, r4
 800bea0:	f7f4 fd0c 	bl	80008bc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bea4:	2300      	movs	r3, #0
 800bea6:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    return;
 800beaa:	e768      	b.n	800bd7e <HAL_UART_IRQHandler+0x92>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800beac:	f013 0f10 	tst.w	r3, #16
 800beb0:	f43f af3f 	beq.w	800bd32 <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800beb4:	f010 0f10 	tst.w	r0, #16
 800beb8:	f43f af3b 	beq.w	800bd32 <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bebc:	2310      	movs	r3, #16
 800bebe:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bec0:	6823      	ldr	r3, [r4, #0]
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800bec8:	f000 808d 	beq.w	800bfe6 <HAL_UART_IRQHandler+0x2fa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800becc:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800bece:	6813      	ldr	r3, [r2, #0]
 800bed0:	481c      	ldr	r0, [pc, #112]	@ (800bf44 <HAL_UART_IRQHandler+0x258>)
 800bed2:	491d      	ldr	r1, [pc, #116]	@ (800bf48 <HAL_UART_IRQHandler+0x25c>)
 800bed4:	428b      	cmp	r3, r1
 800bed6:	bf18      	it	ne
 800bed8:	4283      	cmpne	r3, r0
 800beda:	d037      	beq.n	800bf4c <HAL_UART_IRQHandler+0x260>
 800bedc:	3118      	adds	r1, #24
 800bede:	428b      	cmp	r3, r1
 800bee0:	d034      	beq.n	800bf4c <HAL_UART_IRQHandler+0x260>
 800bee2:	3118      	adds	r1, #24
 800bee4:	428b      	cmp	r3, r1
 800bee6:	d031      	beq.n	800bf4c <HAL_UART_IRQHandler+0x260>
 800bee8:	3118      	adds	r1, #24
 800beea:	428b      	cmp	r3, r1
 800beec:	d02e      	beq.n	800bf4c <HAL_UART_IRQHandler+0x260>
 800beee:	3118      	adds	r1, #24
 800bef0:	428b      	cmp	r3, r1
 800bef2:	d02b      	beq.n	800bf4c <HAL_UART_IRQHandler+0x260>
 800bef4:	3118      	adds	r1, #24
 800bef6:	428b      	cmp	r3, r1
 800bef8:	d028      	beq.n	800bf4c <HAL_UART_IRQHandler+0x260>
 800befa:	3118      	adds	r1, #24
 800befc:	428b      	cmp	r3, r1
 800befe:	d025      	beq.n	800bf4c <HAL_UART_IRQHandler+0x260>
 800bf00:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800bf04:	428b      	cmp	r3, r1
 800bf06:	d021      	beq.n	800bf4c <HAL_UART_IRQHandler+0x260>
 800bf08:	3118      	adds	r1, #24
 800bf0a:	428b      	cmp	r3, r1
 800bf0c:	d01e      	beq.n	800bf4c <HAL_UART_IRQHandler+0x260>
 800bf0e:	3118      	adds	r1, #24
 800bf10:	428b      	cmp	r3, r1
 800bf12:	d01b      	beq.n	800bf4c <HAL_UART_IRQHandler+0x260>
 800bf14:	3118      	adds	r1, #24
 800bf16:	428b      	cmp	r3, r1
 800bf18:	d018      	beq.n	800bf4c <HAL_UART_IRQHandler+0x260>
 800bf1a:	3118      	adds	r1, #24
 800bf1c:	428b      	cmp	r3, r1
 800bf1e:	d015      	beq.n	800bf4c <HAL_UART_IRQHandler+0x260>
 800bf20:	3118      	adds	r1, #24
 800bf22:	428b      	cmp	r3, r1
 800bf24:	d012      	beq.n	800bf4c <HAL_UART_IRQHandler+0x260>
 800bf26:	3118      	adds	r1, #24
 800bf28:	428b      	cmp	r3, r1
 800bf2a:	d00f      	beq.n	800bf4c <HAL_UART_IRQHandler+0x260>
 800bf2c:	3118      	adds	r1, #24
 800bf2e:	428b      	cmp	r3, r1
 800bf30:	d00c      	beq.n	800bf4c <HAL_UART_IRQHandler+0x260>
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	e00b      	b.n	800bf50 <HAL_UART_IRQHandler+0x264>
 800bf38:	10000001 	.word	0x10000001
 800bf3c:	04000120 	.word	0x04000120
 800bf40:	0800bcd9 	.word	0x0800bcd9
 800bf44:	40020010 	.word	0x40020010
 800bf48:	40020028 	.word	0x40020028
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	f43f af14 	beq.w	800bd7e <HAL_UART_IRQHandler+0x92>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf56:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800bf5a:	4299      	cmp	r1, r3
 800bf5c:	f67f af0f 	bls.w	800bd7e <HAL_UART_IRQHandler+0x92>
        huart->RxXferCount = nb_remaining_rx_data;
 800bf60:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf64:	69d3      	ldr	r3, [r2, #28]
 800bf66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf6a:	d031      	beq.n	800bfd0 <HAL_UART_IRQHandler+0x2e4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf6c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf6e:	e852 3f00 	ldrex	r3, [r2]
 800bf72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf76:	e842 3100 	strex	r1, r3, [r2]
 800bf7a:	2900      	cmp	r1, #0
 800bf7c:	d1f6      	bne.n	800bf6c <HAL_UART_IRQHandler+0x280>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf7e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf80:	f102 0308 	add.w	r3, r2, #8
 800bf84:	e853 3f00 	ldrex	r3, [r3]
 800bf88:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8c:	3208      	adds	r2, #8
 800bf8e:	e842 3100 	strex	r1, r3, [r2]
 800bf92:	2900      	cmp	r1, #0
 800bf94:	d1f3      	bne.n	800bf7e <HAL_UART_IRQHandler+0x292>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf96:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf98:	f102 0308 	add.w	r3, r2, #8
 800bf9c:	e853 3f00 	ldrex	r3, [r3]
 800bfa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa4:	3208      	adds	r2, #8
 800bfa6:	e842 3100 	strex	r1, r3, [r2]
 800bfaa:	2900      	cmp	r1, #0
 800bfac:	d1f3      	bne.n	800bf96 <HAL_UART_IRQHandler+0x2aa>
          huart->RxState = HAL_UART_STATE_READY;
 800bfae:	2320      	movs	r3, #32
 800bfb0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfb8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfba:	e852 3f00 	ldrex	r3, [r2]
 800bfbe:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc2:	e842 3100 	strex	r1, r3, [r2]
 800bfc6:	2900      	cmp	r1, #0
 800bfc8:	d1f6      	bne.n	800bfb8 <HAL_UART_IRQHandler+0x2cc>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bfca:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800bfcc:	f7f9 f818 	bl	8005000 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bfd0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800bfd4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	1ac9      	subs	r1, r1, r3
 800bfdc:	b289      	uxth	r1, r1
 800bfde:	4620      	mov	r0, r4
 800bfe0:	f7f5 fe34 	bl	8001c4c <HAL_UARTEx_RxEventCallback>
      return;
 800bfe4:	e6cb      	b.n	800bd7e <HAL_UART_IRQHandler+0x92>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bfe6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800bfea:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	1ac9      	subs	r1, r1, r3
 800bff2:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800bff4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f43f aebf 	beq.w	800bd7e <HAL_UART_IRQHandler+0x92>
          && (nb_rx_data > 0U))
 800c000:	2900      	cmp	r1, #0
 800c002:	f43f aebc 	beq.w	800bd7e <HAL_UART_IRQHandler+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c006:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c008:	e852 3f00 	ldrex	r3, [r2]
 800c00c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c010:	e842 3000 	strex	r0, r3, [r2]
 800c014:	2800      	cmp	r0, #0
 800c016:	d1f6      	bne.n	800c006 <HAL_UART_IRQHandler+0x31a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c018:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01a:	f102 0308 	add.w	r3, r2, #8
 800c01e:	e853 0f00 	ldrex	r0, [r3]
 800c022:	4b1a      	ldr	r3, [pc, #104]	@ (800c08c <HAL_UART_IRQHandler+0x3a0>)
 800c024:	4003      	ands	r3, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c026:	3208      	adds	r2, #8
 800c028:	e842 3000 	strex	r0, r3, [r2]
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d1f3      	bne.n	800c018 <HAL_UART_IRQHandler+0x32c>
        huart->RxState = HAL_UART_STATE_READY;
 800c030:	2320      	movs	r3, #32
 800c032:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c036:	2300      	movs	r3, #0
 800c038:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 800c03a:	6723      	str	r3, [r4, #112]	@ 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c03c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c03e:	e852 3f00 	ldrex	r3, [r2]
 800c042:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c046:	e842 3000 	strex	r0, r3, [r2]
 800c04a:	2800      	cmp	r0, #0
 800c04c:	d1f6      	bne.n	800c03c <HAL_UART_IRQHandler+0x350>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c04e:	4620      	mov	r0, r4
 800c050:	f7f5 fdfc 	bl	8001c4c <HAL_UARTEx_RxEventCallback>
      return;
 800c054:	e693      	b.n	800bd7e <HAL_UART_IRQHandler+0x92>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c056:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c05a:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800c05c:	4620      	mov	r0, r4
 800c05e:	f000 fd67 	bl	800cb30 <HAL_UARTEx_WakeupCallback>
    return;
 800c062:	e68c      	b.n	800bd7e <HAL_UART_IRQHandler+0x92>
    if (huart->TxISR != NULL)
 800c064:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800c066:	2b00      	cmp	r3, #0
 800c068:	f43f ae89 	beq.w	800bd7e <HAL_UART_IRQHandler+0x92>
      huart->TxISR(huart);
 800c06c:	4620      	mov	r0, r4
 800c06e:	4798      	blx	r3
    return;
 800c070:	e685      	b.n	800bd7e <HAL_UART_IRQHandler+0x92>
    UART_EndTransmit_IT(huart);
 800c072:	4620      	mov	r0, r4
 800c074:	f7ff fdea 	bl	800bc4c <UART_EndTransmit_IT>
    return;
 800c078:	e681      	b.n	800bd7e <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c07a:	4620      	mov	r0, r4
 800c07c:	f000 fd5a 	bl	800cb34 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800c080:	e67d      	b.n	800bd7e <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c082:	4620      	mov	r0, r4
 800c084:	f000 fd55 	bl	800cb32 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800c088:	e679      	b.n	800bd7e <HAL_UART_IRQHandler+0x92>
 800c08a:	bf00      	nop
 800c08c:	effffffe 	.word	0xeffffffe

0800c090 <UART_DMARxHalfCplt>:
{
 800c090:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c092:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c094:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800c096:	2b01      	cmp	r3, #1
 800c098:	d002      	beq.n	800c0a0 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800c09a:	f7ff fdf0 	bl	800bc7e <HAL_UART_RxHalfCpltCallback>
}
 800c09e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c0a0:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800c0a4:	0849      	lsrs	r1, r1, #1
 800c0a6:	f7f5 fdd1 	bl	8001c4c <HAL_UARTEx_RxEventCallback>
 800c0aa:	e7f8      	b.n	800c09e <UART_DMARxHalfCplt+0xe>

0800c0ac <UART_DMAReceiveCplt>:
{
 800c0ac:	b508      	push	{r3, lr}
 800c0ae:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c0b0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c0b2:	69db      	ldr	r3, [r3, #28]
 800c0b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c0b8:	d029      	beq.n	800c10e <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0c0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c2:	e852 3f00 	ldrex	r3, [r2]
 800c0c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ca:	e842 3100 	strex	r1, r3, [r2]
 800c0ce:	2900      	cmp	r1, #0
 800c0d0:	d1f6      	bne.n	800c0c0 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0d2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d4:	f102 0308 	add.w	r3, r2, #8
 800c0d8:	e853 3f00 	ldrex	r3, [r3]
 800c0dc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e0:	3208      	adds	r2, #8
 800c0e2:	e842 3100 	strex	r1, r3, [r2]
 800c0e6:	2900      	cmp	r1, #0
 800c0e8:	d1f3      	bne.n	800c0d2 <UART_DMAReceiveCplt+0x26>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0ea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ec:	f102 0308 	add.w	r3, r2, #8
 800c0f0:	e853 3f00 	ldrex	r3, [r3]
 800c0f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f8:	3208      	adds	r2, #8
 800c0fa:	e842 3100 	strex	r1, r3, [r2]
 800c0fe:	2900      	cmp	r1, #0
 800c100:	d1f3      	bne.n	800c0ea <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 800c102:	2320      	movs	r3, #32
 800c104:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c108:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d005      	beq.n	800c11a <UART_DMAReceiveCplt+0x6e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c10e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800c110:	2b01      	cmp	r3, #1
 800c112:	d00c      	beq.n	800c12e <UART_DMAReceiveCplt+0x82>
    HAL_UART_RxCpltCallback(huart);
 800c114:	f7ff fdb2 	bl	800bc7c <HAL_UART_RxCpltCallback>
}
 800c118:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c11a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c11c:	e852 3f00 	ldrex	r3, [r2]
 800c120:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c124:	e842 3100 	strex	r1, r3, [r2]
 800c128:	2900      	cmp	r1, #0
 800c12a:	d1f6      	bne.n	800c11a <UART_DMAReceiveCplt+0x6e>
 800c12c:	e7ef      	b.n	800c10e <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c12e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800c132:	f7f5 fd8b 	bl	8001c4c <HAL_UARTEx_RxEventCallback>
 800c136:	e7ef      	b.n	800c118 <UART_DMAReceiveCplt+0x6c>

0800c138 <UART_SetConfig>:
{
 800c138:	b570      	push	{r4, r5, r6, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800c13e:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c140:	6883      	ldr	r3, [r0, #8]
 800c142:	6902      	ldr	r2, [r0, #16]
 800c144:	4313      	orrs	r3, r2
 800c146:	6942      	ldr	r2, [r0, #20]
 800c148:	4313      	orrs	r3, r2
 800c14a:	69c2      	ldr	r2, [r0, #28]
 800c14c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c14e:	6808      	ldr	r0, [r1, #0]
 800c150:	4a88      	ldr	r2, [pc, #544]	@ (800c374 <UART_SetConfig+0x23c>)
 800c152:	4002      	ands	r2, r0
 800c154:	431a      	orrs	r2, r3
 800c156:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c158:	6822      	ldr	r2, [r4, #0]
 800c15a:	6853      	ldr	r3, [r2, #4]
 800c15c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800c160:	68e1      	ldr	r1, [r4, #12]
 800c162:	430b      	orrs	r3, r1
 800c164:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c166:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c168:	6822      	ldr	r2, [r4, #0]
 800c16a:	4b83      	ldr	r3, [pc, #524]	@ (800c378 <UART_SetConfig+0x240>)
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d001      	beq.n	800c174 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 800c170:	6a23      	ldr	r3, [r4, #32]
 800c172:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c174:	6890      	ldr	r0, [r2, #8]
 800c176:	4b81      	ldr	r3, [pc, #516]	@ (800c37c <UART_SetConfig+0x244>)
 800c178:	4003      	ands	r3, r0
 800c17a:	430b      	orrs	r3, r1
 800c17c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c17e:	6822      	ldr	r2, [r4, #0]
 800c180:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c182:	f023 030f 	bic.w	r3, r3, #15
 800c186:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c188:	430b      	orrs	r3, r1
 800c18a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c18c:	6822      	ldr	r2, [r4, #0]
 800c18e:	4b7c      	ldr	r3, [pc, #496]	@ (800c380 <UART_SetConfig+0x248>)
 800c190:	429a      	cmp	r2, r3
 800c192:	d021      	beq.n	800c1d8 <UART_SetConfig+0xa0>
 800c194:	4b7b      	ldr	r3, [pc, #492]	@ (800c384 <UART_SetConfig+0x24c>)
 800c196:	429a      	cmp	r2, r3
 800c198:	f000 808c 	beq.w	800c2b4 <UART_SetConfig+0x17c>
 800c19c:	4b7a      	ldr	r3, [pc, #488]	@ (800c388 <UART_SetConfig+0x250>)
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	f000 80a2 	beq.w	800c2e8 <UART_SetConfig+0x1b0>
 800c1a4:	4b79      	ldr	r3, [pc, #484]	@ (800c38c <UART_SetConfig+0x254>)
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	f000 80b5 	beq.w	800c316 <UART_SetConfig+0x1de>
 800c1ac:	4b78      	ldr	r3, [pc, #480]	@ (800c390 <UART_SetConfig+0x258>)
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	f000 80c8 	beq.w	800c344 <UART_SetConfig+0x20c>
 800c1b4:	4b77      	ldr	r3, [pc, #476]	@ (800c394 <UART_SetConfig+0x25c>)
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	f000 80f4 	beq.w	800c3a4 <UART_SetConfig+0x26c>
 800c1bc:	4b76      	ldr	r3, [pc, #472]	@ (800c398 <UART_SetConfig+0x260>)
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	f000 8119 	beq.w	800c3f6 <UART_SetConfig+0x2be>
 800c1c4:	4b75      	ldr	r3, [pc, #468]	@ (800c39c <UART_SetConfig+0x264>)
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	f000 812c 	beq.w	800c424 <UART_SetConfig+0x2ec>
 800c1cc:	4b6a      	ldr	r3, [pc, #424]	@ (800c378 <UART_SetConfig+0x240>)
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	f000 813f 	beq.w	800c452 <UART_SetConfig+0x31a>
 800c1d4:	2380      	movs	r3, #128	@ 0x80
 800c1d6:	e033      	b.n	800c240 <UART_SetConfig+0x108>
 800c1d8:	4b71      	ldr	r3, [pc, #452]	@ (800c3a0 <UART_SetConfig+0x268>)
 800c1da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c1e0:	2b28      	cmp	r3, #40	@ 0x28
 800c1e2:	d865      	bhi.n	800c2b0 <UART_SetConfig+0x178>
 800c1e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c1e8:	00640029 	.word	0x00640029
 800c1ec:	00640064 	.word	0x00640064
 800c1f0:	00640064 	.word	0x00640064
 800c1f4:	00640064 	.word	0x00640064
 800c1f8:	0064014d 	.word	0x0064014d
 800c1fc:	00640064 	.word	0x00640064
 800c200:	00640064 	.word	0x00640064
 800c204:	00640064 	.word	0x00640064
 800c208:	0064002b 	.word	0x0064002b
 800c20c:	00640064 	.word	0x00640064
 800c210:	00640064 	.word	0x00640064
 800c214:	00640064 	.word	0x00640064
 800c218:	0064005e 	.word	0x0064005e
 800c21c:	00640064 	.word	0x00640064
 800c220:	00640064 	.word	0x00640064
 800c224:	00640064 	.word	0x00640064
 800c228:	00640060 	.word	0x00640060
 800c22c:	00640064 	.word	0x00640064
 800c230:	00640064 	.word	0x00640064
 800c234:	00640064 	.word	0x00640064
 800c238:	0062      	.short	0x0062
 800c23a:	2301      	movs	r3, #1
 800c23c:	e000      	b.n	800c240 <UART_SetConfig+0x108>
 800c23e:	2308      	movs	r3, #8
  if (UART_INSTANCE_LOWPOWER(huart))
 800c240:	494d      	ldr	r1, [pc, #308]	@ (800c378 <UART_SetConfig+0x240>)
 800c242:	428a      	cmp	r2, r1
 800c244:	f000 812f 	beq.w	800c4a6 <UART_SetConfig+0x36e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c248:	69e0      	ldr	r0, [r4, #28]
 800c24a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c24e:	f000 81af 	beq.w	800c5b0 <UART_SetConfig+0x478>
    switch (clocksource)
 800c252:	2b20      	cmp	r3, #32
 800c254:	f200 8207 	bhi.w	800c666 <UART_SetConfig+0x52e>
 800c258:	2b20      	cmp	r3, #32
 800c25a:	f200 8251 	bhi.w	800c700 <UART_SetConfig+0x5c8>
 800c25e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c262:	021e      	.short	0x021e
 800c264:	024f0224 	.word	0x024f0224
 800c268:	0227024f 	.word	0x0227024f
 800c26c:	024f024f 	.word	0x024f024f
 800c270:	022c024f 	.word	0x022c024f
 800c274:	024f024f 	.word	0x024f024f
 800c278:	024f024f 	.word	0x024f024f
 800c27c:	024f024f 	.word	0x024f024f
 800c280:	0231024f 	.word	0x0231024f
 800c284:	024f024f 	.word	0x024f024f
 800c288:	024f024f 	.word	0x024f024f
 800c28c:	024f024f 	.word	0x024f024f
 800c290:	024f024f 	.word	0x024f024f
 800c294:	024f024f 	.word	0x024f024f
 800c298:	024f024f 	.word	0x024f024f
 800c29c:	024f024f 	.word	0x024f024f
 800c2a0:	023d024f 	.word	0x023d024f
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c2a4:	2310      	movs	r3, #16
 800c2a6:	e7cb      	b.n	800c240 <UART_SetConfig+0x108>
 800c2a8:	2320      	movs	r3, #32
 800c2aa:	e7c9      	b.n	800c240 <UART_SetConfig+0x108>
 800c2ac:	2340      	movs	r3, #64	@ 0x40
 800c2ae:	e7c7      	b.n	800c240 <UART_SetConfig+0x108>
 800c2b0:	2380      	movs	r3, #128	@ 0x80
 800c2b2:	e7c5      	b.n	800c240 <UART_SetConfig+0x108>
 800c2b4:	4b3a      	ldr	r3, [pc, #232]	@ (800c3a0 <UART_SetConfig+0x268>)
 800c2b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2b8:	f003 0307 	and.w	r3, r3, #7
 800c2bc:	2b05      	cmp	r3, #5
 800c2be:	d811      	bhi.n	800c2e4 <UART_SetConfig+0x1ac>
 800c2c0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c2c4:	00e10006 	.word	0x00e10006
 800c2c8:	000a0008 	.word	0x000a0008
 800c2cc:	000e000c 	.word	0x000e000c
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	e7b5      	b.n	800c240 <UART_SetConfig+0x108>
 800c2d4:	2308      	movs	r3, #8
 800c2d6:	e7b3      	b.n	800c240 <UART_SetConfig+0x108>
 800c2d8:	2310      	movs	r3, #16
 800c2da:	e7b1      	b.n	800c240 <UART_SetConfig+0x108>
 800c2dc:	2320      	movs	r3, #32
 800c2de:	e7af      	b.n	800c240 <UART_SetConfig+0x108>
 800c2e0:	2340      	movs	r3, #64	@ 0x40
 800c2e2:	e7ad      	b.n	800c240 <UART_SetConfig+0x108>
 800c2e4:	2380      	movs	r3, #128	@ 0x80
 800c2e6:	e7ab      	b.n	800c240 <UART_SetConfig+0x108>
 800c2e8:	4b2d      	ldr	r3, [pc, #180]	@ (800c3a0 <UART_SetConfig+0x268>)
 800c2ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2ec:	f003 0307 	and.w	r3, r3, #7
 800c2f0:	2b05      	cmp	r3, #5
 800c2f2:	d80e      	bhi.n	800c312 <UART_SetConfig+0x1da>
 800c2f4:	e8df f003 	tbb	[pc, r3]
 800c2f8:	0705c903 	.word	0x0705c903
 800c2fc:	0b09      	.short	0x0b09
 800c2fe:	2300      	movs	r3, #0
 800c300:	e79e      	b.n	800c240 <UART_SetConfig+0x108>
 800c302:	2308      	movs	r3, #8
 800c304:	e79c      	b.n	800c240 <UART_SetConfig+0x108>
 800c306:	2310      	movs	r3, #16
 800c308:	e79a      	b.n	800c240 <UART_SetConfig+0x108>
 800c30a:	2320      	movs	r3, #32
 800c30c:	e798      	b.n	800c240 <UART_SetConfig+0x108>
 800c30e:	2340      	movs	r3, #64	@ 0x40
 800c310:	e796      	b.n	800c240 <UART_SetConfig+0x108>
 800c312:	2380      	movs	r3, #128	@ 0x80
 800c314:	e794      	b.n	800c240 <UART_SetConfig+0x108>
 800c316:	4b22      	ldr	r3, [pc, #136]	@ (800c3a0 <UART_SetConfig+0x268>)
 800c318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c31a:	f003 0307 	and.w	r3, r3, #7
 800c31e:	2b05      	cmp	r3, #5
 800c320:	d80e      	bhi.n	800c340 <UART_SetConfig+0x208>
 800c322:	e8df f003 	tbb	[pc, r3]
 800c326:	b403      	.short	0xb403
 800c328:	0b090705 	.word	0x0b090705
 800c32c:	2300      	movs	r3, #0
 800c32e:	e787      	b.n	800c240 <UART_SetConfig+0x108>
 800c330:	2308      	movs	r3, #8
 800c332:	e785      	b.n	800c240 <UART_SetConfig+0x108>
 800c334:	2310      	movs	r3, #16
 800c336:	e783      	b.n	800c240 <UART_SetConfig+0x108>
 800c338:	2320      	movs	r3, #32
 800c33a:	e781      	b.n	800c240 <UART_SetConfig+0x108>
 800c33c:	2340      	movs	r3, #64	@ 0x40
 800c33e:	e77f      	b.n	800c240 <UART_SetConfig+0x108>
 800c340:	2380      	movs	r3, #128	@ 0x80
 800c342:	e77d      	b.n	800c240 <UART_SetConfig+0x108>
 800c344:	4b16      	ldr	r3, [pc, #88]	@ (800c3a0 <UART_SetConfig+0x268>)
 800c346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c348:	f003 0307 	and.w	r3, r3, #7
 800c34c:	2b05      	cmp	r3, #5
 800c34e:	d80e      	bhi.n	800c36e <UART_SetConfig+0x236>
 800c350:	e8df f003 	tbb	[pc, r3]
 800c354:	07059f03 	.word	0x07059f03
 800c358:	0b09      	.short	0x0b09
 800c35a:	2300      	movs	r3, #0
 800c35c:	e770      	b.n	800c240 <UART_SetConfig+0x108>
 800c35e:	2308      	movs	r3, #8
 800c360:	e76e      	b.n	800c240 <UART_SetConfig+0x108>
 800c362:	2310      	movs	r3, #16
 800c364:	e76c      	b.n	800c240 <UART_SetConfig+0x108>
 800c366:	2320      	movs	r3, #32
 800c368:	e76a      	b.n	800c240 <UART_SetConfig+0x108>
 800c36a:	2340      	movs	r3, #64	@ 0x40
 800c36c:	e768      	b.n	800c240 <UART_SetConfig+0x108>
 800c36e:	2380      	movs	r3, #128	@ 0x80
 800c370:	e766      	b.n	800c240 <UART_SetConfig+0x108>
 800c372:	bf00      	nop
 800c374:	cfff69f3 	.word	0xcfff69f3
 800c378:	58000c00 	.word	0x58000c00
 800c37c:	11fff4ff 	.word	0x11fff4ff
 800c380:	40011000 	.word	0x40011000
 800c384:	40004400 	.word	0x40004400
 800c388:	40004800 	.word	0x40004800
 800c38c:	40004c00 	.word	0x40004c00
 800c390:	40005000 	.word	0x40005000
 800c394:	40011400 	.word	0x40011400
 800c398:	40007800 	.word	0x40007800
 800c39c:	40007c00 	.word	0x40007c00
 800c3a0:	58024400 	.word	0x58024400
 800c3a4:	4b7d      	ldr	r3, [pc, #500]	@ (800c59c <UART_SetConfig+0x464>)
 800c3a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c3ac:	2b28      	cmp	r3, #40	@ 0x28
 800c3ae:	d820      	bhi.n	800c3f2 <UART_SetConfig+0x2ba>
 800c3b0:	e8df f003 	tbb	[pc, r3]
 800c3b4:	1f1f1f15 	.word	0x1f1f1f15
 800c3b8:	1f1f1f1f 	.word	0x1f1f1f1f
 800c3bc:	1f1f1f71 	.word	0x1f1f1f71
 800c3c0:	1f1f1f1f 	.word	0x1f1f1f1f
 800c3c4:	1f1f1f17 	.word	0x1f1f1f17
 800c3c8:	1f1f1f1f 	.word	0x1f1f1f1f
 800c3cc:	1f1f1f19 	.word	0x1f1f1f19
 800c3d0:	1f1f1f1f 	.word	0x1f1f1f1f
 800c3d4:	1f1f1f1b 	.word	0x1f1f1f1b
 800c3d8:	1f1f1f1f 	.word	0x1f1f1f1f
 800c3dc:	1d          	.byte	0x1d
 800c3dd:	00          	.byte	0x00
 800c3de:	2301      	movs	r3, #1
 800c3e0:	e72e      	b.n	800c240 <UART_SetConfig+0x108>
 800c3e2:	2308      	movs	r3, #8
 800c3e4:	e72c      	b.n	800c240 <UART_SetConfig+0x108>
 800c3e6:	2310      	movs	r3, #16
 800c3e8:	e72a      	b.n	800c240 <UART_SetConfig+0x108>
 800c3ea:	2320      	movs	r3, #32
 800c3ec:	e728      	b.n	800c240 <UART_SetConfig+0x108>
 800c3ee:	2340      	movs	r3, #64	@ 0x40
 800c3f0:	e726      	b.n	800c240 <UART_SetConfig+0x108>
 800c3f2:	2380      	movs	r3, #128	@ 0x80
 800c3f4:	e724      	b.n	800c240 <UART_SetConfig+0x108>
 800c3f6:	4b69      	ldr	r3, [pc, #420]	@ (800c59c <UART_SetConfig+0x464>)
 800c3f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3fa:	f003 0307 	and.w	r3, r3, #7
 800c3fe:	2b05      	cmp	r3, #5
 800c400:	d80e      	bhi.n	800c420 <UART_SetConfig+0x2e8>
 800c402:	e8df f003 	tbb	[pc, r3]
 800c406:	4a03      	.short	0x4a03
 800c408:	0b090705 	.word	0x0b090705
 800c40c:	2300      	movs	r3, #0
 800c40e:	e717      	b.n	800c240 <UART_SetConfig+0x108>
 800c410:	2308      	movs	r3, #8
 800c412:	e715      	b.n	800c240 <UART_SetConfig+0x108>
 800c414:	2310      	movs	r3, #16
 800c416:	e713      	b.n	800c240 <UART_SetConfig+0x108>
 800c418:	2320      	movs	r3, #32
 800c41a:	e711      	b.n	800c240 <UART_SetConfig+0x108>
 800c41c:	2340      	movs	r3, #64	@ 0x40
 800c41e:	e70f      	b.n	800c240 <UART_SetConfig+0x108>
 800c420:	2380      	movs	r3, #128	@ 0x80
 800c422:	e70d      	b.n	800c240 <UART_SetConfig+0x108>
 800c424:	4b5d      	ldr	r3, [pc, #372]	@ (800c59c <UART_SetConfig+0x464>)
 800c426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c428:	f003 0307 	and.w	r3, r3, #7
 800c42c:	2b05      	cmp	r3, #5
 800c42e:	d80e      	bhi.n	800c44e <UART_SetConfig+0x316>
 800c430:	e8df f003 	tbb	[pc, r3]
 800c434:	07053503 	.word	0x07053503
 800c438:	0b09      	.short	0x0b09
 800c43a:	2300      	movs	r3, #0
 800c43c:	e700      	b.n	800c240 <UART_SetConfig+0x108>
 800c43e:	2308      	movs	r3, #8
 800c440:	e6fe      	b.n	800c240 <UART_SetConfig+0x108>
 800c442:	2310      	movs	r3, #16
 800c444:	e6fc      	b.n	800c240 <UART_SetConfig+0x108>
 800c446:	2320      	movs	r3, #32
 800c448:	e6fa      	b.n	800c240 <UART_SetConfig+0x108>
 800c44a:	2340      	movs	r3, #64	@ 0x40
 800c44c:	e6f8      	b.n	800c240 <UART_SetConfig+0x108>
 800c44e:	2380      	movs	r3, #128	@ 0x80
 800c450:	e6f6      	b.n	800c240 <UART_SetConfig+0x108>
 800c452:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 800c456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c458:	f003 0307 	and.w	r3, r3, #7
 800c45c:	2b05      	cmp	r3, #5
 800c45e:	d80e      	bhi.n	800c47e <UART_SetConfig+0x346>
 800c460:	e8df f003 	tbb	[pc, r3]
 800c464:	07051f03 	.word	0x07051f03
 800c468:	0b09      	.short	0x0b09
 800c46a:	2302      	movs	r3, #2
 800c46c:	e6e8      	b.n	800c240 <UART_SetConfig+0x108>
 800c46e:	2308      	movs	r3, #8
 800c470:	e6e6      	b.n	800c240 <UART_SetConfig+0x108>
 800c472:	2310      	movs	r3, #16
 800c474:	e6e4      	b.n	800c240 <UART_SetConfig+0x108>
 800c476:	2320      	movs	r3, #32
 800c478:	e6e2      	b.n	800c240 <UART_SetConfig+0x108>
 800c47a:	2340      	movs	r3, #64	@ 0x40
 800c47c:	e6e0      	b.n	800c240 <UART_SetConfig+0x108>
 800c47e:	2380      	movs	r3, #128	@ 0x80
 800c480:	e6de      	b.n	800c240 <UART_SetConfig+0x108>
 800c482:	2304      	movs	r3, #4
 800c484:	e6dc      	b.n	800c240 <UART_SetConfig+0x108>
 800c486:	2304      	movs	r3, #4
 800c488:	e6da      	b.n	800c240 <UART_SetConfig+0x108>
 800c48a:	2304      	movs	r3, #4
 800c48c:	e6d8      	b.n	800c240 <UART_SetConfig+0x108>
 800c48e:	2304      	movs	r3, #4
 800c490:	e6d6      	b.n	800c240 <UART_SetConfig+0x108>
 800c492:	2304      	movs	r3, #4
 800c494:	e6d4      	b.n	800c240 <UART_SetConfig+0x108>
 800c496:	2304      	movs	r3, #4
 800c498:	e6d2      	b.n	800c240 <UART_SetConfig+0x108>
 800c49a:	2304      	movs	r3, #4
 800c49c:	e6d0      	b.n	800c240 <UART_SetConfig+0x108>
 800c49e:	2304      	movs	r3, #4
 800c4a0:	e6ce      	b.n	800c240 <UART_SetConfig+0x108>
 800c4a2:	2304      	movs	r3, #4
 800c4a4:	e6cc      	b.n	800c240 <UART_SetConfig+0x108>
    switch (clocksource)
 800c4a6:	2b20      	cmp	r3, #32
 800c4a8:	d827      	bhi.n	800c4fa <UART_SetConfig+0x3c2>
 800c4aa:	2b02      	cmp	r3, #2
 800c4ac:	f0c0 811a 	bcc.w	800c6e4 <UART_SetConfig+0x5ac>
 800c4b0:	3b02      	subs	r3, #2
 800c4b2:	2b1e      	cmp	r3, #30
 800c4b4:	f200 8118 	bhi.w	800c6e8 <UART_SetConfig+0x5b0>
 800c4b8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c4bc:	01160050 	.word	0x01160050
 800c4c0:	01160056 	.word	0x01160056
 800c4c4:	01160116 	.word	0x01160116
 800c4c8:	0116005b 	.word	0x0116005b
 800c4cc:	01160116 	.word	0x01160116
 800c4d0:	01160116 	.word	0x01160116
 800c4d4:	01160116 	.word	0x01160116
 800c4d8:	01160060 	.word	0x01160060
 800c4dc:	01160116 	.word	0x01160116
 800c4e0:	01160116 	.word	0x01160116
 800c4e4:	01160116 	.word	0x01160116
 800c4e8:	01160116 	.word	0x01160116
 800c4ec:	01160116 	.word	0x01160116
 800c4f0:	01160116 	.word	0x01160116
 800c4f4:	01160116 	.word	0x01160116
 800c4f8:	006c      	.short	0x006c
 800c4fa:	2b40      	cmp	r3, #64	@ 0x40
 800c4fc:	d12c      	bne.n	800c558 <UART_SetConfig+0x420>
        pclk = (uint32_t) LSE_VALUE;
 800c4fe:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c502:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c504:	4b26      	ldr	r3, [pc, #152]	@ (800c5a0 <UART_SetConfig+0x468>)
 800c506:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c50a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c50e:	6865      	ldr	r5, [r4, #4]
 800c510:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c514:	4299      	cmp	r1, r3
 800c516:	f200 80e9 	bhi.w	800c6ec <UART_SetConfig+0x5b4>
 800c51a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800c51e:	f200 80e7 	bhi.w	800c6f0 <UART_SetConfig+0x5b8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c522:	2600      	movs	r6, #0
 800c524:	4633      	mov	r3, r6
 800c526:	4631      	mov	r1, r6
 800c528:	f7f3 fff2 	bl	8000510 <__aeabi_uldivmod>
 800c52c:	0209      	lsls	r1, r1, #8
 800c52e:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800c532:	0200      	lsls	r0, r0, #8
 800c534:	086b      	lsrs	r3, r5, #1
 800c536:	18c0      	adds	r0, r0, r3
 800c538:	462a      	mov	r2, r5
 800c53a:	4633      	mov	r3, r6
 800c53c:	f141 0100 	adc.w	r1, r1, #0
 800c540:	f7f3 ffe6 	bl	8000510 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c544:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800c548:	4b16      	ldr	r3, [pc, #88]	@ (800c5a4 <UART_SetConfig+0x46c>)
 800c54a:	429a      	cmp	r2, r3
 800c54c:	f200 80d2 	bhi.w	800c6f4 <UART_SetConfig+0x5bc>
          huart->Instance->BRR = usartdiv;
 800c550:	6823      	ldr	r3, [r4, #0]
 800c552:	60d8      	str	r0, [r3, #12]
 800c554:	4630      	mov	r0, r6
 800c556:	e0d4      	b.n	800c702 <UART_SetConfig+0x5ca>
    switch (clocksource)
 800c558:	2001      	movs	r0, #1
 800c55a:	e0d2      	b.n	800c702 <UART_SetConfig+0x5ca>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c55c:	f7fd fd5a 	bl	800a014 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800c560:	2800      	cmp	r0, #0
 800c562:	d1ce      	bne.n	800c502 <UART_SetConfig+0x3ca>
 800c564:	2000      	movs	r0, #0
 800c566:	e0cc      	b.n	800c702 <UART_SetConfig+0x5ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c568:	a803      	add	r0, sp, #12
 800c56a:	f7fd fd65 	bl	800a038 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c56e:	9804      	ldr	r0, [sp, #16]
        break;
 800c570:	e7f6      	b.n	800c560 <UART_SetConfig+0x428>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c572:	4668      	mov	r0, sp
 800c574:	f7fd fe5e 	bl	800a234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c578:	9801      	ldr	r0, [sp, #4]
        break;
 800c57a:	e7f1      	b.n	800c560 <UART_SetConfig+0x428>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c57c:	4b07      	ldr	r3, [pc, #28]	@ (800c59c <UART_SetConfig+0x464>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f013 0f20 	tst.w	r3, #32
 800c584:	d008      	beq.n	800c598 <UART_SetConfig+0x460>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c586:	4b05      	ldr	r3, [pc, #20]	@ (800c59c <UART_SetConfig+0x464>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c58e:	4806      	ldr	r0, [pc, #24]	@ (800c5a8 <UART_SetConfig+0x470>)
 800c590:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c592:	e7b6      	b.n	800c502 <UART_SetConfig+0x3ca>
    switch (clocksource)
 800c594:	4805      	ldr	r0, [pc, #20]	@ (800c5ac <UART_SetConfig+0x474>)
 800c596:	e7b4      	b.n	800c502 <UART_SetConfig+0x3ca>
          pclk = (uint32_t) HSI_VALUE;
 800c598:	4803      	ldr	r0, [pc, #12]	@ (800c5a8 <UART_SetConfig+0x470>)
 800c59a:	e7b2      	b.n	800c502 <UART_SetConfig+0x3ca>
 800c59c:	58024400 	.word	0x58024400
 800c5a0:	0801f40c 	.word	0x0801f40c
 800c5a4:	000ffcff 	.word	0x000ffcff
 800c5a8:	03d09000 	.word	0x03d09000
 800c5ac:	003d0900 	.word	0x003d0900
    switch (clocksource)
 800c5b0:	2b20      	cmp	r3, #32
 800c5b2:	d815      	bhi.n	800c5e0 <UART_SetConfig+0x4a8>
 800c5b4:	2b20      	cmp	r3, #32
 800c5b6:	f200 809f 	bhi.w	800c6f8 <UART_SetConfig+0x5c0>
 800c5ba:	e8df f003 	tbb	[pc, r3]
 800c5be:	3731      	.short	0x3731
 800c5c0:	9d3a9d9d 	.word	0x9d3a9d9d
 800c5c4:	9d3f9d9d 	.word	0x9d3f9d9d
 800c5c8:	9d9d9d9d 	.word	0x9d9d9d9d
 800c5cc:	9d449d9d 	.word	0x9d449d9d
 800c5d0:	9d9d9d9d 	.word	0x9d9d9d9d
 800c5d4:	9d9d9d9d 	.word	0x9d9d9d9d
 800c5d8:	9d9d9d9d 	.word	0x9d9d9d9d
 800c5dc:	9d9d      	.short	0x9d9d
 800c5de:	50          	.byte	0x50
 800c5df:	00          	.byte	0x00
 800c5e0:	2b40      	cmp	r3, #64	@ 0x40
 800c5e2:	d11b      	bne.n	800c61c <UART_SetConfig+0x4e4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5e4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c5e6:	4b4d      	ldr	r3, [pc, #308]	@ (800c71c <UART_SetConfig+0x5e4>)
 800c5e8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c5ec:	fbb0 f0f3 	udiv	r0, r0, r3
 800c5f0:	6862      	ldr	r2, [r4, #4]
 800c5f2:	0853      	lsrs	r3, r2, #1
 800c5f4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800c5f8:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5fc:	f1a3 0110 	sub.w	r1, r3, #16
 800c600:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800c604:	4291      	cmp	r1, r2
 800c606:	d879      	bhi.n	800c6fc <UART_SetConfig+0x5c4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c608:	b29a      	uxth	r2, r3
 800c60a:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c60e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800c612:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800c614:	6822      	ldr	r2, [r4, #0]
 800c616:	60d3      	str	r3, [r2, #12]
 800c618:	2000      	movs	r0, #0
 800c61a:	e072      	b.n	800c702 <UART_SetConfig+0x5ca>
    switch (clocksource)
 800c61c:	2001      	movs	r0, #1
 800c61e:	e070      	b.n	800c702 <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c620:	f7fc febc 	bl	800939c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c624:	2800      	cmp	r0, #0
 800c626:	d1dd      	bne.n	800c5e4 <UART_SetConfig+0x4ac>
 800c628:	2000      	movs	r0, #0
 800c62a:	e06a      	b.n	800c702 <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c62c:	f7fc fec8 	bl	80093c0 <HAL_RCC_GetPCLK2Freq>
        break;
 800c630:	e7f8      	b.n	800c624 <UART_SetConfig+0x4ec>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c632:	a803      	add	r0, sp, #12
 800c634:	f7fd fd00 	bl	800a038 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c638:	9804      	ldr	r0, [sp, #16]
        break;
 800c63a:	e7f3      	b.n	800c624 <UART_SetConfig+0x4ec>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c63c:	4668      	mov	r0, sp
 800c63e:	f7fd fdf9 	bl	800a234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c642:	9801      	ldr	r0, [sp, #4]
        break;
 800c644:	e7ee      	b.n	800c624 <UART_SetConfig+0x4ec>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c646:	4b36      	ldr	r3, [pc, #216]	@ (800c720 <UART_SetConfig+0x5e8>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f013 0f20 	tst.w	r3, #32
 800c64e:	d008      	beq.n	800c662 <UART_SetConfig+0x52a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c650:	4b33      	ldr	r3, [pc, #204]	@ (800c720 <UART_SetConfig+0x5e8>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c658:	4832      	ldr	r0, [pc, #200]	@ (800c724 <UART_SetConfig+0x5ec>)
 800c65a:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c65c:	e7c2      	b.n	800c5e4 <UART_SetConfig+0x4ac>
    switch (clocksource)
 800c65e:	4832      	ldr	r0, [pc, #200]	@ (800c728 <UART_SetConfig+0x5f0>)
 800c660:	e7c0      	b.n	800c5e4 <UART_SetConfig+0x4ac>
          pclk = (uint32_t) HSI_VALUE;
 800c662:	4830      	ldr	r0, [pc, #192]	@ (800c724 <UART_SetConfig+0x5ec>)
 800c664:	e7be      	b.n	800c5e4 <UART_SetConfig+0x4ac>
    switch (clocksource)
 800c666:	2b40      	cmp	r3, #64	@ 0x40
 800c668:	d117      	bne.n	800c69a <UART_SetConfig+0x562>
        pclk = (uint32_t) LSE_VALUE;
 800c66a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c66e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c670:	4b2a      	ldr	r3, [pc, #168]	@ (800c71c <UART_SetConfig+0x5e4>)
 800c672:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c676:	fbb0 f0f3 	udiv	r0, r0, r3
 800c67a:	6863      	ldr	r3, [r4, #4]
 800c67c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800c680:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c684:	f1a0 0210 	sub.w	r2, r0, #16
 800c688:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d842      	bhi.n	800c716 <UART_SetConfig+0x5de>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c690:	6823      	ldr	r3, [r4, #0]
 800c692:	b280      	uxth	r0, r0
 800c694:	60d8      	str	r0, [r3, #12]
 800c696:	2000      	movs	r0, #0
 800c698:	e033      	b.n	800c702 <UART_SetConfig+0x5ca>
    switch (clocksource)
 800c69a:	2001      	movs	r0, #1
 800c69c:	e031      	b.n	800c702 <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c69e:	f7fc fe7d 	bl	800939c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d1e3      	bne.n	800c66e <UART_SetConfig+0x536>
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	e02b      	b.n	800c702 <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6aa:	f7fc fe89 	bl	80093c0 <HAL_RCC_GetPCLK2Freq>
        break;
 800c6ae:	e7f8      	b.n	800c6a2 <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6b0:	a803      	add	r0, sp, #12
 800c6b2:	f7fd fcc1 	bl	800a038 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6b6:	9804      	ldr	r0, [sp, #16]
        break;
 800c6b8:	e7f3      	b.n	800c6a2 <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6ba:	4668      	mov	r0, sp
 800c6bc:	f7fd fdba 	bl	800a234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c6c0:	9801      	ldr	r0, [sp, #4]
        break;
 800c6c2:	e7ee      	b.n	800c6a2 <UART_SetConfig+0x56a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6c4:	4b16      	ldr	r3, [pc, #88]	@ (800c720 <UART_SetConfig+0x5e8>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f013 0f20 	tst.w	r3, #32
 800c6cc:	d008      	beq.n	800c6e0 <UART_SetConfig+0x5a8>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c6ce:	4b14      	ldr	r3, [pc, #80]	@ (800c720 <UART_SetConfig+0x5e8>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c6d6:	4813      	ldr	r0, [pc, #76]	@ (800c724 <UART_SetConfig+0x5ec>)
 800c6d8:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c6da:	e7c8      	b.n	800c66e <UART_SetConfig+0x536>
    switch (clocksource)
 800c6dc:	4812      	ldr	r0, [pc, #72]	@ (800c728 <UART_SetConfig+0x5f0>)
 800c6de:	e7c6      	b.n	800c66e <UART_SetConfig+0x536>
          pclk = (uint32_t) HSI_VALUE;
 800c6e0:	4810      	ldr	r0, [pc, #64]	@ (800c724 <UART_SetConfig+0x5ec>)
 800c6e2:	e7c4      	b.n	800c66e <UART_SetConfig+0x536>
    switch (clocksource)
 800c6e4:	2001      	movs	r0, #1
 800c6e6:	e00c      	b.n	800c702 <UART_SetConfig+0x5ca>
 800c6e8:	2001      	movs	r0, #1
 800c6ea:	e00a      	b.n	800c702 <UART_SetConfig+0x5ca>
        ret = HAL_ERROR;
 800c6ec:	2001      	movs	r0, #1
 800c6ee:	e008      	b.n	800c702 <UART_SetConfig+0x5ca>
 800c6f0:	2001      	movs	r0, #1
 800c6f2:	e006      	b.n	800c702 <UART_SetConfig+0x5ca>
          ret = HAL_ERROR;
 800c6f4:	2001      	movs	r0, #1
 800c6f6:	e004      	b.n	800c702 <UART_SetConfig+0x5ca>
    switch (clocksource)
 800c6f8:	2001      	movs	r0, #1
 800c6fa:	e002      	b.n	800c702 <UART_SetConfig+0x5ca>
        ret = HAL_ERROR;
 800c6fc:	2001      	movs	r0, #1
 800c6fe:	e000      	b.n	800c702 <UART_SetConfig+0x5ca>
    switch (clocksource)
 800c700:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 800c702:	2301      	movs	r3, #1
 800c704:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c708:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800c70c:	2300      	movs	r3, #0
 800c70e:	6723      	str	r3, [r4, #112]	@ 0x70
  huart->TxISR = NULL;
 800c710:	6763      	str	r3, [r4, #116]	@ 0x74
}
 800c712:	b006      	add	sp, #24
 800c714:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 800c716:	2001      	movs	r0, #1
 800c718:	e7f3      	b.n	800c702 <UART_SetConfig+0x5ca>
 800c71a:	bf00      	nop
 800c71c:	0801f40c 	.word	0x0801f40c
 800c720:	58024400 	.word	0x58024400
 800c724:	03d09000 	.word	0x03d09000
 800c728:	003d0900 	.word	0x003d0900

0800c72c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c72c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c72e:	f013 0f01 	tst.w	r3, #1
 800c732:	d006      	beq.n	800c742 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c734:	6802      	ldr	r2, [r0, #0]
 800c736:	6853      	ldr	r3, [r2, #4]
 800c738:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c73c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800c73e:	430b      	orrs	r3, r1
 800c740:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c742:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c744:	f013 0f02 	tst.w	r3, #2
 800c748:	d006      	beq.n	800c758 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c74a:	6802      	ldr	r2, [r0, #0]
 800c74c:	6853      	ldr	r3, [r2, #4]
 800c74e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c752:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800c754:	430b      	orrs	r3, r1
 800c756:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c758:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c75a:	f013 0f04 	tst.w	r3, #4
 800c75e:	d006      	beq.n	800c76e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c760:	6802      	ldr	r2, [r0, #0]
 800c762:	6853      	ldr	r3, [r2, #4]
 800c764:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c768:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800c76a:	430b      	orrs	r3, r1
 800c76c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c76e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c770:	f013 0f08 	tst.w	r3, #8
 800c774:	d006      	beq.n	800c784 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c776:	6802      	ldr	r2, [r0, #0]
 800c778:	6853      	ldr	r3, [r2, #4]
 800c77a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c77e:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800c780:	430b      	orrs	r3, r1
 800c782:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c784:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c786:	f013 0f10 	tst.w	r3, #16
 800c78a:	d006      	beq.n	800c79a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c78c:	6802      	ldr	r2, [r0, #0]
 800c78e:	6893      	ldr	r3, [r2, #8]
 800c790:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c794:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800c796:	430b      	orrs	r3, r1
 800c798:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c79a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c79c:	f013 0f20 	tst.w	r3, #32
 800c7a0:	d006      	beq.n	800c7b0 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c7a2:	6802      	ldr	r2, [r0, #0]
 800c7a4:	6893      	ldr	r3, [r2, #8]
 800c7a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c7aa:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800c7ac:	430b      	orrs	r3, r1
 800c7ae:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c7b0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c7b2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800c7b6:	d00a      	beq.n	800c7ce <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c7b8:	6802      	ldr	r2, [r0, #0]
 800c7ba:	6853      	ldr	r3, [r2, #4]
 800c7bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c7c0:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800c7c2:	430b      	orrs	r3, r1
 800c7c4:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c7c6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800c7c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c7cc:	d00b      	beq.n	800c7e6 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c7ce:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c7d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c7d4:	d006      	beq.n	800c7e4 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c7d6:	6802      	ldr	r2, [r0, #0]
 800c7d8:	6853      	ldr	r3, [r2, #4]
 800c7da:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800c7de:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800c7e0:	430b      	orrs	r3, r1
 800c7e2:	6053      	str	r3, [r2, #4]
}
 800c7e4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c7e6:	6802      	ldr	r2, [r0, #0]
 800c7e8:	6853      	ldr	r3, [r2, #4]
 800c7ea:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800c7ee:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800c7f0:	430b      	orrs	r3, r1
 800c7f2:	6053      	str	r3, [r2, #4]
 800c7f4:	e7eb      	b.n	800c7ce <UART_AdvFeatureConfig+0xa2>

0800c7f6 <UART_WaitOnFlagUntilTimeout>:
{
 800c7f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7fa:	4605      	mov	r5, r0
 800c7fc:	460f      	mov	r7, r1
 800c7fe:	4616      	mov	r6, r2
 800c800:	4699      	mov	r9, r3
 800c802:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c806:	682b      	ldr	r3, [r5, #0]
 800c808:	69dc      	ldr	r4, [r3, #28]
 800c80a:	ea37 0404 	bics.w	r4, r7, r4
 800c80e:	bf0c      	ite	eq
 800c810:	2401      	moveq	r4, #1
 800c812:	2400      	movne	r4, #0
 800c814:	42b4      	cmp	r4, r6
 800c816:	d157      	bne.n	800c8c8 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 800c818:	f1b8 3fff 	cmp.w	r8, #4294967295
 800c81c:	d0f3      	beq.n	800c806 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c81e:	f7f6 fe73 	bl	8003508 <HAL_GetTick>
 800c822:	eba0 0009 	sub.w	r0, r0, r9
 800c826:	4540      	cmp	r0, r8
 800c828:	d82f      	bhi.n	800c88a <UART_WaitOnFlagUntilTimeout+0x94>
 800c82a:	f1b8 0f00 	cmp.w	r8, #0
 800c82e:	d02c      	beq.n	800c88a <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c830:	682b      	ldr	r3, [r5, #0]
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	f012 0f04 	tst.w	r2, #4
 800c838:	d0e5      	beq.n	800c806 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c83a:	69da      	ldr	r2, [r3, #28]
 800c83c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800c840:	d0e1      	beq.n	800c806 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c842:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c846:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c848:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c84a:	e852 3f00 	ldrex	r3, [r2]
 800c84e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c852:	e842 3100 	strex	r1, r3, [r2]
 800c856:	2900      	cmp	r1, #0
 800c858:	d1f6      	bne.n	800c848 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c85a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c85c:	f102 0308 	add.w	r3, r2, #8
 800c860:	e853 3f00 	ldrex	r3, [r3]
 800c864:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c868:	3208      	adds	r2, #8
 800c86a:	e842 3100 	strex	r1, r3, [r2]
 800c86e:	2900      	cmp	r1, #0
 800c870:	d1f3      	bne.n	800c85a <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 800c872:	2320      	movs	r3, #32
 800c874:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c878:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c87c:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 800c880:	2300      	movs	r3, #0
 800c882:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
          return HAL_TIMEOUT;
 800c886:	2003      	movs	r0, #3
 800c888:	e01f      	b.n	800c8ca <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c88a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c88c:	e852 3f00 	ldrex	r3, [r2]
 800c890:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c894:	e842 3100 	strex	r1, r3, [r2]
 800c898:	2900      	cmp	r1, #0
 800c89a:	d1f6      	bne.n	800c88a <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c89c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c89e:	f102 0308 	add.w	r3, r2, #8
 800c8a2:	e853 3f00 	ldrex	r3, [r3]
 800c8a6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8aa:	3208      	adds	r2, #8
 800c8ac:	e842 3100 	strex	r1, r3, [r2]
 800c8b0:	2900      	cmp	r1, #0
 800c8b2:	d1f3      	bne.n	800c89c <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 800c8b4:	2320      	movs	r3, #32
 800c8b6:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c8ba:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
        __HAL_UNLOCK(huart);
 800c8be:	2300      	movs	r3, #0
 800c8c0:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
        return HAL_TIMEOUT;
 800c8c4:	2003      	movs	r0, #3
 800c8c6:	e000      	b.n	800c8ca <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 800c8c8:	2000      	movs	r0, #0
}
 800c8ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c8ce <UART_CheckIdleState>:
{
 800c8ce:	b530      	push	{r4, r5, lr}
 800c8d0:	b083      	sub	sp, #12
 800c8d2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  tickstart = HAL_GetTick();
 800c8da:	f7f6 fe15 	bl	8003508 <HAL_GetTick>
 800c8de:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c8e0:	6822      	ldr	r2, [r4, #0]
 800c8e2:	6812      	ldr	r2, [r2, #0]
 800c8e4:	f012 0f08 	tst.w	r2, #8
 800c8e8:	d10f      	bne.n	800c90a <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c8ea:	6823      	ldr	r3, [r4, #0]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f013 0f04 	tst.w	r3, #4
 800c8f2:	d118      	bne.n	800c926 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800c8f4:	2320      	movs	r3, #32
 800c8f6:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c8fa:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8fe:	2000      	movs	r0, #0
 800c900:	66e0      	str	r0, [r4, #108]	@ 0x6c
  __HAL_UNLOCK(huart);
 800c902:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 800c906:	b003      	add	sp, #12
 800c908:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c90a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	4603      	mov	r3, r0
 800c912:	2200      	movs	r2, #0
 800c914:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c918:	4620      	mov	r0, r4
 800c91a:	f7ff ff6c 	bl	800c7f6 <UART_WaitOnFlagUntilTimeout>
 800c91e:	2800      	cmp	r0, #0
 800c920:	d0e3      	beq.n	800c8ea <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800c922:	2003      	movs	r0, #3
 800c924:	e7ef      	b.n	800c906 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c926:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c92a:	9300      	str	r3, [sp, #0]
 800c92c:	462b      	mov	r3, r5
 800c92e:	2200      	movs	r2, #0
 800c930:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c934:	4620      	mov	r0, r4
 800c936:	f7ff ff5e 	bl	800c7f6 <UART_WaitOnFlagUntilTimeout>
 800c93a:	2800      	cmp	r0, #0
 800c93c:	d0da      	beq.n	800c8f4 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800c93e:	2003      	movs	r0, #3
 800c940:	e7e1      	b.n	800c906 <UART_CheckIdleState+0x38>

0800c942 <HAL_UART_Init>:
  if (huart == NULL)
 800c942:	b378      	cbz	r0, 800c9a4 <HAL_UART_Init+0x62>
{
 800c944:	b510      	push	{r4, lr}
 800c946:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800c948:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800c94c:	b30b      	cbz	r3, 800c992 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800c94e:	2324      	movs	r3, #36	@ 0x24
 800c950:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 800c954:	6822      	ldr	r2, [r4, #0]
 800c956:	6813      	ldr	r3, [r2, #0]
 800c958:	f023 0301 	bic.w	r3, r3, #1
 800c95c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c95e:	4620      	mov	r0, r4
 800c960:	f7ff fbea 	bl	800c138 <UART_SetConfig>
 800c964:	2801      	cmp	r0, #1
 800c966:	d013      	beq.n	800c990 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c968:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c96a:	b9bb      	cbnz	r3, 800c99c <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c96c:	6822      	ldr	r2, [r4, #0]
 800c96e:	6853      	ldr	r3, [r2, #4]
 800c970:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800c974:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c976:	6822      	ldr	r2, [r4, #0]
 800c978:	6893      	ldr	r3, [r2, #8]
 800c97a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800c97e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800c980:	6822      	ldr	r2, [r4, #0]
 800c982:	6813      	ldr	r3, [r2, #0]
 800c984:	f043 0301 	orr.w	r3, r3, #1
 800c988:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800c98a:	4620      	mov	r0, r4
 800c98c:	f7ff ff9f 	bl	800c8ce <UART_CheckIdleState>
}
 800c990:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800c992:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 800c996:	f7f6 f8d1 	bl	8002b3c <HAL_UART_MspInit>
 800c99a:	e7d8      	b.n	800c94e <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800c99c:	4620      	mov	r0, r4
 800c99e:	f7ff fec5 	bl	800c72c <UART_AdvFeatureConfig>
 800c9a2:	e7e3      	b.n	800c96c <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800c9a4:	2001      	movs	r0, #1
}
 800c9a6:	4770      	bx	lr

0800c9a8 <UART_Start_Receive_DMA>:
{
 800c9a8:	b510      	push	{r4, lr}
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 800c9ae:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c9b0:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c9ba:	2222      	movs	r2, #34	@ 0x22
 800c9bc:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  if (huart->hdmarx != NULL)
 800c9c0:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800c9c2:	b18a      	cbz	r2, 800c9e8 <UART_Start_Receive_DMA+0x40>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c9c4:	4922      	ldr	r1, [pc, #136]	@ (800ca50 <UART_Start_Receive_DMA+0xa8>)
 800c9c6:	63d1      	str	r1, [r2, #60]	@ 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c9c8:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800c9ca:	4922      	ldr	r1, [pc, #136]	@ (800ca54 <UART_Start_Receive_DMA+0xac>)
 800c9cc:	6411      	str	r1, [r2, #64]	@ 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c9ce:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800c9d0:	4921      	ldr	r1, [pc, #132]	@ (800ca58 <UART_Start_Receive_DMA+0xb0>)
 800c9d2:	64d1      	str	r1, [r2, #76]	@ 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 800c9d4:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800c9d6:	2100      	movs	r1, #0
 800c9d8:	6511      	str	r1, [r2, #80]	@ 0x50
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c9da:	6801      	ldr	r1, [r0, #0]
 800c9dc:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800c9de:	3124      	adds	r1, #36	@ 0x24
 800c9e0:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800c9e2:	f7f8 f9c1 	bl	8004d68 <HAL_DMA_Start_IT>
 800c9e6:	bb38      	cbnz	r0, 800ca38 <UART_Start_Receive_DMA+0x90>
  __HAL_UNLOCK(huart);
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c9ee:	6923      	ldr	r3, [r4, #16]
 800c9f0:	b143      	cbz	r3, 800ca04 <UART_Start_Receive_DMA+0x5c>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9f2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9f4:	e852 3f00 	ldrex	r3, [r2]
 800c9f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9fc:	e842 3100 	strex	r1, r3, [r2]
 800ca00:	2900      	cmp	r1, #0
 800ca02:	d1f6      	bne.n	800c9f2 <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca04:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca06:	f102 0308 	add.w	r3, r2, #8
 800ca0a:	e853 3f00 	ldrex	r3, [r3]
 800ca0e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca12:	3208      	adds	r2, #8
 800ca14:	e842 3100 	strex	r1, r3, [r2]
 800ca18:	2900      	cmp	r1, #0
 800ca1a:	d1f3      	bne.n	800ca04 <UART_Start_Receive_DMA+0x5c>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca1c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca1e:	f102 0308 	add.w	r3, r2, #8
 800ca22:	e853 3f00 	ldrex	r3, [r3]
 800ca26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca2a:	3208      	adds	r2, #8
 800ca2c:	e842 3100 	strex	r1, r3, [r2]
 800ca30:	2900      	cmp	r1, #0
 800ca32:	d1f3      	bne.n	800ca1c <UART_Start_Receive_DMA+0x74>
  return HAL_OK;
 800ca34:	2000      	movs	r0, #0
}
 800ca36:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ca38:	2310      	movs	r3, #16
 800ca3a:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_UNLOCK(huart);
 800ca3e:	2300      	movs	r3, #0
 800ca40:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
      huart->RxState = HAL_UART_STATE_READY;
 800ca44:	2320      	movs	r3, #32
 800ca46:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_ERROR;
 800ca4a:	2001      	movs	r0, #1
 800ca4c:	e7f3      	b.n	800ca36 <UART_Start_Receive_DMA+0x8e>
 800ca4e:	bf00      	nop
 800ca50:	0800c0ad 	.word	0x0800c0ad
 800ca54:	0800c091 	.word	0x0800c091
 800ca58:	0800bc81 	.word	0x0800bc81

0800ca5c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ca5c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800ca5e:	b92b      	cbnz	r3, 800ca6c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800ca60:	2301      	movs	r3, #1
 800ca62:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ca66:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 800ca6a:	4770      	bx	lr
{
 800ca6c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ca6e:	6803      	ldr	r3, [r0, #0]
 800ca70:	689a      	ldr	r2, [r3, #8]
 800ca72:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ca76:	6899      	ldr	r1, [r3, #8]
 800ca78:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca7a:	4d09      	ldr	r5, [pc, #36]	@ (800caa0 <UARTEx_SetNbDataToProcess+0x44>)
 800ca7c:	5c6b      	ldrb	r3, [r5, r1]
 800ca7e:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 800ca80:	4c08      	ldr	r4, [pc, #32]	@ (800caa4 <UARTEx_SetNbDataToProcess+0x48>)
 800ca82:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca84:	fb93 f3f1 	sdiv	r3, r3, r1
 800ca88:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca8c:	5cab      	ldrb	r3, [r5, r2]
 800ca8e:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800ca90:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca92:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca96:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 800ca9a:	bc30      	pop	{r4, r5}
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop
 800caa0:	0801f42c 	.word	0x0801f42c
 800caa4:	0801f424 	.word	0x0801f424

0800caa8 <HAL_RS485Ex_Init>:
  if (huart == NULL)
 800caa8:	2800      	cmp	r0, #0
 800caaa:	d03c      	beq.n	800cb26 <HAL_RS485Ex_Init+0x7e>
{
 800caac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caae:	460f      	mov	r7, r1
 800cab0:	4616      	mov	r6, r2
 800cab2:	461d      	mov	r5, r3
 800cab4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800cab6:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800caba:	b35b      	cbz	r3, 800cb14 <HAL_RS485Ex_Init+0x6c>
  huart->gState = HAL_UART_STATE_BUSY;
 800cabc:	2324      	movs	r3, #36	@ 0x24
 800cabe:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 800cac2:	6822      	ldr	r2, [r4, #0]
 800cac4:	6813      	ldr	r3, [r2, #0]
 800cac6:	f023 0301 	bic.w	r3, r3, #1
 800caca:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cacc:	4620      	mov	r0, r4
 800cace:	f7ff fb33 	bl	800c138 <UART_SetConfig>
 800cad2:	2801      	cmp	r0, #1
 800cad4:	d01d      	beq.n	800cb12 <HAL_RS485Ex_Init+0x6a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cad6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800cad8:	bb0b      	cbnz	r3, 800cb1e <HAL_RS485Ex_Init+0x76>
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800cada:	6822      	ldr	r2, [r4, #0]
 800cadc:	6893      	ldr	r3, [r2, #8]
 800cade:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cae2:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800cae4:	6822      	ldr	r2, [r4, #0]
 800cae6:	6893      	ldr	r3, [r2, #8]
 800cae8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800caec:	433b      	orrs	r3, r7
 800caee:	6093      	str	r3, [r2, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800caf0:	042d      	lsls	r5, r5, #16
 800caf2:	ea45 5246 	orr.w	r2, r5, r6, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800caf6:	6821      	ldr	r1, [r4, #0]
 800caf8:	6808      	ldr	r0, [r1, #0]
 800cafa:	4b0c      	ldr	r3, [pc, #48]	@ (800cb2c <HAL_RS485Ex_Init+0x84>)
 800cafc:	4003      	ands	r3, r0
 800cafe:	4313      	orrs	r3, r2
 800cb00:	600b      	str	r3, [r1, #0]
  __HAL_UART_ENABLE(huart);
 800cb02:	6822      	ldr	r2, [r4, #0]
 800cb04:	6813      	ldr	r3, [r2, #0]
 800cb06:	f043 0301 	orr.w	r3, r3, #1
 800cb0a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800cb0c:	4620      	mov	r0, r4
 800cb0e:	f7ff fede 	bl	800c8ce <UART_CheckIdleState>
}
 800cb12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 800cb14:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 800cb18:	f7f6 f810 	bl	8002b3c <HAL_UART_MspInit>
 800cb1c:	e7ce      	b.n	800cabc <HAL_RS485Ex_Init+0x14>
    UART_AdvFeatureConfig(huart);
 800cb1e:	4620      	mov	r0, r4
 800cb20:	f7ff fe04 	bl	800c72c <UART_AdvFeatureConfig>
 800cb24:	e7d9      	b.n	800cada <HAL_RS485Ex_Init+0x32>
    return HAL_ERROR;
 800cb26:	2001      	movs	r0, #1
}
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	fc00ffff 	.word	0xfc00ffff

0800cb30 <HAL_UARTEx_WakeupCallback>:
}
 800cb30:	4770      	bx	lr

0800cb32 <HAL_UARTEx_RxFifoFullCallback>:
}
 800cb32:	4770      	bx	lr

0800cb34 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800cb34:	4770      	bx	lr

0800cb36 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800cb36:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d018      	beq.n	800cb70 <HAL_UARTEx_DisableFifoMode+0x3a>
 800cb3e:	2301      	movs	r3, #1
 800cb40:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800cb44:	2324      	movs	r3, #36	@ 0x24
 800cb46:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb4a:	6803      	ldr	r3, [r0, #0]
 800cb4c:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800cb4e:	6819      	ldr	r1, [r3, #0]
 800cb50:	f021 0101 	bic.w	r1, r1, #1
 800cb54:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cb56:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb5e:	6801      	ldr	r1, [r0, #0]
 800cb60:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800cb62:	2220      	movs	r2, #32
 800cb64:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 800cb68:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  return HAL_OK;
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	4770      	bx	lr
  __HAL_LOCK(huart);
 800cb70:	2002      	movs	r0, #2
}
 800cb72:	4770      	bx	lr

0800cb74 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800cb74:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800cb76:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	d01d      	beq.n	800cbba <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800cb7e:	4604      	mov	r4, r0
 800cb80:	2301      	movs	r3, #1
 800cb82:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800cb86:	2324      	movs	r3, #36	@ 0x24
 800cb88:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb8c:	6803      	ldr	r3, [r0, #0]
 800cb8e:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	f022 0201 	bic.w	r2, r2, #1
 800cb96:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cb98:	6802      	ldr	r2, [r0, #0]
 800cb9a:	6893      	ldr	r3, [r2, #8]
 800cb9c:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800cba0:	4319      	orrs	r1, r3
 800cba2:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800cba4:	f7ff ff5a 	bl	800ca5c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cba8:	6823      	ldr	r3, [r4, #0]
 800cbaa:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800cbac:	2320      	movs	r3, #32
 800cbae:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 800cbb2:	2000      	movs	r0, #0
 800cbb4:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 800cbb8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800cbba:	2002      	movs	r0, #2
 800cbbc:	e7fc      	b.n	800cbb8 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800cbbe <HAL_UARTEx_SetRxFifoThreshold>:
{
 800cbbe:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800cbc0:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d01d      	beq.n	800cc04 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800cbc8:	4604      	mov	r4, r0
 800cbca:	2301      	movs	r3, #1
 800cbcc:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800cbd0:	2324      	movs	r3, #36	@ 0x24
 800cbd2:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cbd6:	6803      	ldr	r3, [r0, #0]
 800cbd8:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	f022 0201 	bic.w	r2, r2, #1
 800cbe0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cbe2:	6802      	ldr	r2, [r0, #0]
 800cbe4:	6893      	ldr	r3, [r2, #8]
 800cbe6:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800cbea:	4319      	orrs	r1, r3
 800cbec:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800cbee:	f7ff ff35 	bl	800ca5c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cbf2:	6823      	ldr	r3, [r4, #0]
 800cbf4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800cbf6:	2320      	movs	r3, #32
 800cbf8:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 800cbfc:	2000      	movs	r0, #0
 800cbfe:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 800cc02:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800cc04:	2002      	movs	r0, #2
 800cc06:	e7fc      	b.n	800cc02 <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800cc08 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800cc08:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800cc0c:	2b20      	cmp	r3, #32
 800cc0e:	d122      	bne.n	800cc56 <HAL_UARTEx_ReceiveToIdle_DMA+0x4e>
{
 800cc10:	b510      	push	{r4, lr}
 800cc12:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800cc14:	2a00      	cmp	r2, #0
 800cc16:	bf18      	it	ne
 800cc18:	2900      	cmpne	r1, #0
 800cc1a:	d01e      	beq.n	800cc5a <HAL_UARTEx_ReceiveToIdle_DMA+0x52>
    __HAL_LOCK(huart);
 800cc1c:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d01c      	beq.n	800cc5e <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
 800cc24:	2301      	movs	r3, #1
 800cc26:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800cc2a:	66c3      	str	r3, [r0, #108]	@ 0x6c
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800cc2c:	f7ff febc 	bl	800c9a8 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800cc30:	b9a0      	cbnz	r0, 800cc5c <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc32:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d001      	beq.n	800cc3c <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
        status = HAL_ERROR;
 800cc38:	2001      	movs	r0, #1
    return status;
 800cc3a:	e00f      	b.n	800cc5c <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cc3c:	6823      	ldr	r3, [r4, #0]
 800cc3e:	2210      	movs	r2, #16
 800cc40:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc42:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc44:	e852 3f00 	ldrex	r3, [r2]
 800cc48:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc4c:	e842 3100 	strex	r1, r3, [r2]
 800cc50:	2900      	cmp	r1, #0
 800cc52:	d1f6      	bne.n	800cc42 <HAL_UARTEx_ReceiveToIdle_DMA+0x3a>
 800cc54:	e002      	b.n	800cc5c <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
    return HAL_BUSY;
 800cc56:	2002      	movs	r0, #2
}
 800cc58:	4770      	bx	lr
      return HAL_ERROR;
 800cc5a:	2001      	movs	r0, #1
}
 800cc5c:	bd10      	pop	{r4, pc}
    __HAL_LOCK(huart);
 800cc5e:	2002      	movs	r0, #2
 800cc60:	e7fc      	b.n	800cc5c <HAL_UARTEx_ReceiveToIdle_DMA+0x54>

0800cc62 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cc62:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800cc64:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cc68:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cc6a:	f001 fbf7 	bl	800e45c <xTaskGetSchedulerState>
 800cc6e:	2801      	cmp	r0, #1
 800cc70:	d100      	bne.n	800cc74 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800cc72:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 800cc74:	f001 fffe 	bl	800ec74 <xPortSysTickHandler>
}
 800cc78:	e7fb      	b.n	800cc72 <SysTick_Handler+0x10>
	...

0800cc7c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc7c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc80:	b92b      	cbnz	r3, 800cc8e <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800cc82:	4b06      	ldr	r3, [pc, #24]	@ (800cc9c <osKernelInitialize+0x20>)
 800cc84:	6818      	ldr	r0, [r3, #0]
 800cc86:	b928      	cbnz	r0, 800cc94 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cc88:	2201      	movs	r2, #1
 800cc8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cc8c:	4770      	bx	lr
    stat = osErrorISR;
 800cc8e:	f06f 0005 	mvn.w	r0, #5
 800cc92:	4770      	bx	lr
    } else {
      stat = osError;
 800cc94:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop
 800cc9c:	2400313c 	.word	0x2400313c

0800cca0 <osKernelStart>:
 800cca0:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800cca4:	b973      	cbnz	r3, 800ccc4 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800cca6:	4b0a      	ldr	r3, [pc, #40]	@ (800ccd0 <osKernelStart+0x30>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d10d      	bne.n	800ccca <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800ccae:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ccb0:	2400      	movs	r4, #0
 800ccb2:	4b08      	ldr	r3, [pc, #32]	@ (800ccd4 <osKernelStart+0x34>)
 800ccb4:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ccb6:	4b06      	ldr	r3, [pc, #24]	@ (800ccd0 <osKernelStart+0x30>)
 800ccb8:	2202      	movs	r2, #2
 800ccba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ccbc:	f001 f91c 	bl	800def8 <vTaskStartScheduler>
      stat = osOK;
 800ccc0:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800ccc2:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800ccc4:	f06f 0005 	mvn.w	r0, #5
 800ccc8:	4770      	bx	lr
      stat = osError;
 800ccca:	f04f 30ff 	mov.w	r0, #4294967295
}
 800ccce:	4770      	bx	lr
 800ccd0:	2400313c 	.word	0x2400313c
 800ccd4:	e000ed00 	.word	0xe000ed00

0800ccd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ccd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccda:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ccdc:	2400      	movs	r4, #0
 800ccde:	9405      	str	r4, [sp, #20]
 800cce0:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800cce4:	bb74      	cbnz	r4, 800cd44 <osThreadNew+0x6c>
 800cce6:	b368      	cbz	r0, 800cd44 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800cce8:	b322      	cbz	r2, 800cd34 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 800ccea:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800ccec:	6993      	ldr	r3, [r2, #24]
 800ccee:	b903      	cbnz	r3, 800ccf2 <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 800ccf0:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ccf2:	1e5c      	subs	r4, r3, #1
 800ccf4:	2c37      	cmp	r4, #55	@ 0x37
 800ccf6:	d849      	bhi.n	800cd8c <osThreadNew+0xb4>
 800ccf8:	6854      	ldr	r4, [r2, #4]
 800ccfa:	f014 0f01 	tst.w	r4, #1
 800ccfe:	d147      	bne.n	800cd90 <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800cd00:	6956      	ldr	r6, [r2, #20]
 800cd02:	b16e      	cbz	r6, 800cd20 <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cd04:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd08:	6894      	ldr	r4, [r2, #8]
 800cd0a:	b12c      	cbz	r4, 800cd18 <osThreadNew+0x40>
 800cd0c:	68d7      	ldr	r7, [r2, #12]
 800cd0e:	2fa7      	cmp	r7, #167	@ 0xa7
 800cd10:	d902      	bls.n	800cd18 <osThreadNew+0x40>
 800cd12:	6917      	ldr	r7, [r2, #16]
 800cd14:	b107      	cbz	r7, 800cd18 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd16:	b9c6      	cbnz	r6, 800cd4a <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cd18:	b12c      	cbz	r4, 800cd26 <osThreadNew+0x4e>
    mem  = -1;
 800cd1a:	f04f 34ff 	mov.w	r4, #4294967295
 800cd1e:	e00e      	b.n	800cd3e <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 800cd20:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 800cd24:	e7f0      	b.n	800cd08 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cd26:	68d4      	ldr	r4, [r2, #12]
 800cd28:	b98c      	cbnz	r4, 800cd4e <osThreadNew+0x76>
 800cd2a:	6914      	ldr	r4, [r2, #16]
 800cd2c:	b194      	cbz	r4, 800cd54 <osThreadNew+0x7c>
    mem  = -1;
 800cd2e:	f04f 34ff 	mov.w	r4, #4294967295
 800cd32:	e004      	b.n	800cd3e <osThreadNew+0x66>
    name = NULL;
 800cd34:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800cd36:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800cd38:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800cd3a:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 800cd3e:	2c01      	cmp	r4, #1
 800cd40:	d00a      	beq.n	800cd58 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800cd42:	b1ac      	cbz	r4, 800cd70 <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cd44:	9805      	ldr	r0, [sp, #20]
}
 800cd46:	b007      	add	sp, #28
 800cd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800cd4a:	2401      	movs	r4, #1
 800cd4c:	e7f7      	b.n	800cd3e <osThreadNew+0x66>
    mem  = -1;
 800cd4e:	f04f 34ff 	mov.w	r4, #4294967295
 800cd52:	e7f4      	b.n	800cd3e <osThreadNew+0x66>
          mem = 0;
 800cd54:	2400      	movs	r4, #0
 800cd56:	e7f2      	b.n	800cd3e <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd58:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cd5a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd5c:	9202      	str	r2, [sp, #8]
 800cd5e:	9401      	str	r4, [sp, #4]
 800cd60:	9300      	str	r3, [sp, #0]
 800cd62:	460b      	mov	r3, r1
 800cd64:	4662      	mov	r2, ip
 800cd66:	4629      	mov	r1, r5
 800cd68:	f001 f858 	bl	800de1c <xTaskCreateStatic>
 800cd6c:	9005      	str	r0, [sp, #20]
 800cd6e:	e7e9      	b.n	800cd44 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cd70:	aa05      	add	r2, sp, #20
 800cd72:	9201      	str	r2, [sp, #4]
 800cd74:	9300      	str	r3, [sp, #0]
 800cd76:	460b      	mov	r3, r1
 800cd78:	fa1f f28c 	uxth.w	r2, ip
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	f001 f888 	bl	800de92 <xTaskCreate>
 800cd82:	2801      	cmp	r0, #1
 800cd84:	d0de      	beq.n	800cd44 <osThreadNew+0x6c>
            hTask = NULL;
 800cd86:	2300      	movs	r3, #0
 800cd88:	9305      	str	r3, [sp, #20]
 800cd8a:	e7db      	b.n	800cd44 <osThreadNew+0x6c>
        return (NULL);
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	e7da      	b.n	800cd46 <osThreadNew+0x6e>
 800cd90:	2000      	movs	r0, #0
 800cd92:	e7d8      	b.n	800cd46 <osThreadNew+0x6e>

0800cd94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cd94:	b508      	push	{r3, lr}
 800cd96:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd9a:	b933      	cbnz	r3, 800cdaa <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800cd9c:	b908      	cbnz	r0, 800cda2 <osDelay+0xe>
    stat = osOK;
 800cd9e:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800cda0:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800cda2:	f001 fa15 	bl	800e1d0 <vTaskDelay>
    stat = osOK;
 800cda6:	2000      	movs	r0, #0
 800cda8:	e7fa      	b.n	800cda0 <osDelay+0xc>
    stat = osErrorISR;
 800cdaa:	f06f 0005 	mvn.w	r0, #5
 800cdae:	e7f7      	b.n	800cda0 <osDelay+0xc>

0800cdb0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cdb0:	b570      	push	{r4, r5, r6, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d14d      	bne.n	800ce58 <osSemaphoreNew+0xa8>
 800cdbc:	460e      	mov	r6, r1
 800cdbe:	4614      	mov	r4, r2
 800cdc0:	4288      	cmp	r0, r1
 800cdc2:	bf34      	ite	cc
 800cdc4:	2300      	movcc	r3, #0
 800cdc6:	2301      	movcs	r3, #1
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	d049      	beq.n	800ce60 <osSemaphoreNew+0xb0>
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d047      	beq.n	800ce60 <osSemaphoreNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 800cdd0:	b14a      	cbz	r2, 800cde6 <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cdd2:	6895      	ldr	r5, [r2, #8]
 800cdd4:	b115      	cbz	r5, 800cddc <osSemaphoreNew+0x2c>
 800cdd6:	68d3      	ldr	r3, [r2, #12]
 800cdd8:	2b4f      	cmp	r3, #79	@ 0x4f
 800cdda:	d814      	bhi.n	800ce06 <osSemaphoreNew+0x56>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cddc:	2d00      	cmp	r5, #0
 800cdde:	d141      	bne.n	800ce64 <osSemaphoreNew+0xb4>
 800cde0:	68e3      	ldr	r3, [r4, #12]
 800cde2:	b10b      	cbz	r3, 800cde8 <osSemaphoreNew+0x38>
 800cde4:	e039      	b.n	800ce5a <osSemaphoreNew+0xaa>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800cde6:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800cde8:	2801      	cmp	r0, #1
 800cdea:	d00e      	beq.n	800ce0a <osSemaphoreNew+0x5a>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 800cdec:	bb73      	cbnz	r3, 800ce4c <osSemaphoreNew+0x9c>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800cdee:	4631      	mov	r1, r6
 800cdf0:	f000 fa90 	bl	800d314 <xQueueCreateCountingSemaphore>
 800cdf4:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800cdf6:	b385      	cbz	r5, 800ce5a <osSemaphoreNew+0xaa>
        if (attr != NULL) {
 800cdf8:	b104      	cbz	r4, 800cdfc <osSemaphoreNew+0x4c>
          name = attr->name;
 800cdfa:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 800cdfc:	4621      	mov	r1, r4
 800cdfe:	4628      	mov	r0, r5
 800ce00:	f000 fe04 	bl	800da0c <vQueueAddToRegistry>
 800ce04:	e029      	b.n	800ce5a <osSemaphoreNew+0xaa>
        mem = 1;
 800ce06:	2301      	movs	r3, #1
 800ce08:	e7ee      	b.n	800cde8 <osSemaphoreNew+0x38>
        if (mem == 1) {
 800ce0a:	b9b3      	cbnz	r3, 800ce3a <osSemaphoreNew+0x8a>
            hSemaphore = xSemaphoreCreateBinary();
 800ce0c:	2203      	movs	r2, #3
 800ce0e:	2100      	movs	r1, #0
 800ce10:	2001      	movs	r0, #1
 800ce12:	f000 fa38 	bl	800d286 <xQueueGenericCreate>
 800ce16:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ce18:	2d00      	cmp	r5, #0
 800ce1a:	bf18      	it	ne
 800ce1c:	2e00      	cmpne	r6, #0
 800ce1e:	d0ea      	beq.n	800cdf6 <osSemaphoreNew+0x46>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ce20:	2300      	movs	r3, #0
 800ce22:	461a      	mov	r2, r3
 800ce24:	4619      	mov	r1, r3
 800ce26:	4628      	mov	r0, r5
 800ce28:	f000 fa92 	bl	800d350 <xQueueGenericSend>
 800ce2c:	2801      	cmp	r0, #1
 800ce2e:	d0e2      	beq.n	800cdf6 <osSemaphoreNew+0x46>
            vSemaphoreDelete (hSemaphore);
 800ce30:	4628      	mov	r0, r5
 800ce32:	f000 fe15 	bl	800da60 <vQueueDelete>
            hSemaphore = NULL;
 800ce36:	2500      	movs	r5, #0
 800ce38:	e00f      	b.n	800ce5a <osSemaphoreNew+0xaa>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ce3a:	68a3      	ldr	r3, [r4, #8]
 800ce3c:	2203      	movs	r2, #3
 800ce3e:	9200      	str	r2, [sp, #0]
 800ce40:	2200      	movs	r2, #0
 800ce42:	4611      	mov	r1, r2
 800ce44:	f000 f9cc 	bl	800d1e0 <xQueueGenericCreateStatic>
 800ce48:	4605      	mov	r5, r0
 800ce4a:	e7e5      	b.n	800ce18 <osSemaphoreNew+0x68>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ce4c:	68a2      	ldr	r2, [r4, #8]
 800ce4e:	4631      	mov	r1, r6
 800ce50:	f000 fa3d 	bl	800d2ce <xQueueCreateCountingSemaphoreStatic>
 800ce54:	4605      	mov	r5, r0
 800ce56:	e7ce      	b.n	800cdf6 <osSemaphoreNew+0x46>
  hSemaphore = NULL;
 800ce58:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800ce5a:	4628      	mov	r0, r5
 800ce5c:	b002      	add	sp, #8
 800ce5e:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 800ce60:	2500      	movs	r5, #0
 800ce62:	e7fa      	b.n	800ce5a <osSemaphoreNew+0xaa>
 800ce64:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 800ce66:	e7f8      	b.n	800ce5a <osSemaphoreNew+0xaa>

0800ce68 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800ce68:	b320      	cbz	r0, 800ceb4 <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ce6a:	b510      	push	{r4, lr}
 800ce6c:	b082      	sub	sp, #8
 800ce6e:	460c      	mov	r4, r1
 800ce70:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800ce74:	b1b3      	cbz	r3, 800cea4 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800ce76:	bb01      	cbnz	r1, 800ceba <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800ce78:	2100      	movs	r1, #0
 800ce7a:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ce7c:	aa01      	add	r2, sp, #4
 800ce7e:	f000 fd6d 	bl	800d95c <xQueueReceiveFromISR>
 800ce82:	2801      	cmp	r0, #1
 800ce84:	d11c      	bne.n	800cec0 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800ce86:	9801      	ldr	r0, [sp, #4]
 800ce88:	b150      	cbz	r0, 800cea0 <osSemaphoreAcquire+0x38>
 800ce8a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ce8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce92:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ce96:	f3bf 8f4f 	dsb	sy
 800ce9a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800ce9e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800cea0:	b002      	add	sp, #8
 800cea2:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800cea4:	f000 fc87 	bl	800d7b6 <xQueueSemaphoreTake>
 800cea8:	2801      	cmp	r0, #1
 800ceaa:	d00c      	beq.n	800cec6 <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 800ceac:	b16c      	cbz	r4, 800ceca <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 800ceae:	f06f 0001 	mvn.w	r0, #1
 800ceb2:	e7f5      	b.n	800cea0 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 800ceb4:	f06f 0003 	mvn.w	r0, #3
}
 800ceb8:	4770      	bx	lr
      stat = osErrorParameter;
 800ceba:	f06f 0003 	mvn.w	r0, #3
 800cebe:	e7ef      	b.n	800cea0 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800cec0:	f06f 0002 	mvn.w	r0, #2
 800cec4:	e7ec      	b.n	800cea0 <osSemaphoreAcquire+0x38>
  stat = osOK;
 800cec6:	2000      	movs	r0, #0
 800cec8:	e7ea      	b.n	800cea0 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800ceca:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800cece:	e7e7      	b.n	800cea0 <osSemaphoreAcquire+0x38>

0800ced0 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800ced0:	b320      	cbz	r0, 800cf1c <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ced2:	b500      	push	{lr}
 800ced4:	b083      	sub	sp, #12
 800ced6:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800ceda:	b1a3      	cbz	r3, 800cf06 <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 800cedc:	2300      	movs	r3, #0
 800cede:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cee0:	a901      	add	r1, sp, #4
 800cee2:	f000 fb60 	bl	800d5a6 <xQueueGiveFromISR>
 800cee6:	2801      	cmp	r0, #1
 800cee8:	d11b      	bne.n	800cf22 <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800ceea:	9801      	ldr	r0, [sp, #4]
 800ceec:	b198      	cbz	r0, 800cf16 <osSemaphoreRelease+0x46>
 800ceee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cef2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cef6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cefa:	f3bf 8f4f 	dsb	sy
 800cefe:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800cf02:	2000      	movs	r0, #0
 800cf04:	e007      	b.n	800cf16 <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cf06:	2300      	movs	r3, #0
 800cf08:	461a      	mov	r2, r3
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	f000 fa20 	bl	800d350 <xQueueGenericSend>
 800cf10:	2801      	cmp	r0, #1
 800cf12:	d109      	bne.n	800cf28 <osSemaphoreRelease+0x58>
  stat = osOK;
 800cf14:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800cf16:	b003      	add	sp, #12
 800cf18:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 800cf1c:	f06f 0003 	mvn.w	r0, #3
}
 800cf20:	4770      	bx	lr
      stat = osErrorResource;
 800cf22:	f06f 0002 	mvn.w	r0, #2
 800cf26:	e7f6      	b.n	800cf16 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800cf28:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800cf2c:	e7f3      	b.n	800cf16 <osSemaphoreRelease+0x46>
	...

0800cf30 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cf30:	4b03      	ldr	r3, [pc, #12]	@ (800cf40 <vApplicationGetIdleTaskMemory+0x10>)
 800cf32:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cf34:	4b03      	ldr	r3, [pc, #12]	@ (800cf44 <vApplicationGetIdleTaskMemory+0x14>)
 800cf36:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cf38:	2380      	movs	r3, #128	@ 0x80
 800cf3a:	6013      	str	r3, [r2, #0]
}
 800cf3c:	4770      	bx	lr
 800cf3e:	bf00      	nop
 800cf40:	24003094 	.word	0x24003094
 800cf44:	24002e94 	.word	0x24002e94

0800cf48 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cf48:	4b03      	ldr	r3, [pc, #12]	@ (800cf58 <vApplicationGetTimerTaskMemory+0x10>)
 800cf4a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cf4c:	4b03      	ldr	r3, [pc, #12]	@ (800cf5c <vApplicationGetTimerTaskMemory+0x14>)
 800cf4e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cf50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cf54:	6013      	str	r3, [r2, #0]
}
 800cf56:	4770      	bx	lr
 800cf58:	24002dec 	.word	0x24002dec
 800cf5c:	240029ec 	.word	0x240029ec

0800cf60 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf60:	f100 0308 	add.w	r3, r0, #8
 800cf64:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cf66:	f04f 32ff 	mov.w	r2, #4294967295
 800cf6a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf6c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf6e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cf70:	2300      	movs	r3, #0
 800cf72:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cf74:	4770      	bx	lr

0800cf76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cf76:	2300      	movs	r3, #0
 800cf78:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cf7a:	4770      	bx	lr

0800cf7c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800cf7c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cf7e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cf80:	689a      	ldr	r2, [r3, #8]
 800cf82:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cf84:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cf86:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cf88:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800cf8a:	6803      	ldr	r3, [r0, #0]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	6003      	str	r3, [r0, #0]
}
 800cf90:	4770      	bx	lr

0800cf92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf92:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cf94:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cf96:	f1b5 3fff 	cmp.w	r5, #4294967295
 800cf9a:	d011      	beq.n	800cfc0 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cf9c:	f100 0308 	add.w	r3, r0, #8
 800cfa0:	461c      	mov	r4, r3
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	42aa      	cmp	r2, r5
 800cfa8:	d9fa      	bls.n	800cfa0 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cfaa:	6863      	ldr	r3, [r4, #4]
 800cfac:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cfae:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cfb0:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800cfb2:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cfb4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800cfb6:	6803      	ldr	r3, [r0, #0]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	6003      	str	r3, [r0, #0]
}
 800cfbc:	bc30      	pop	{r4, r5}
 800cfbe:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800cfc0:	6904      	ldr	r4, [r0, #16]
 800cfc2:	e7f2      	b.n	800cfaa <vListInsert+0x18>

0800cfc4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cfc4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cfc6:	6841      	ldr	r1, [r0, #4]
 800cfc8:	6882      	ldr	r2, [r0, #8]
 800cfca:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cfcc:	6841      	ldr	r1, [r0, #4]
 800cfce:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cfd0:	685a      	ldr	r2, [r3, #4]
 800cfd2:	4282      	cmp	r2, r0
 800cfd4:	d006      	beq.n	800cfe4 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	3a01      	subs	r2, #1
 800cfde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cfe0:	6818      	ldr	r0, [r3, #0]
}
 800cfe2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cfe4:	6882      	ldr	r2, [r0, #8]
 800cfe6:	605a      	str	r2, [r3, #4]
 800cfe8:	e7f5      	b.n	800cfd6 <uxListRemove+0x12>

0800cfea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cfea:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cfec:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800cfee:	b118      	cbz	r0, 800cff8 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cff2:	6818      	ldr	r0, [r3, #0]
 800cff4:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800cff8:	4770      	bx	lr

0800cffa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cffa:	b510      	push	{r4, lr}
 800cffc:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cffe:	f001 fdc9 	bl	800eb94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d002:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d004:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d006:	429a      	cmp	r2, r3
 800d008:	d004      	beq.n	800d014 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800d00a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800d00c:	f001 fde4 	bl	800ebd8 <vPortExitCritical>

	return xReturn;
}
 800d010:	4620      	mov	r0, r4
 800d012:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800d014:	2401      	movs	r4, #1
 800d016:	e7f9      	b.n	800d00c <prvIsQueueFull+0x12>

0800d018 <prvIsQueueEmpty>:
{
 800d018:	b510      	push	{r4, lr}
 800d01a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d01c:	f001 fdba 	bl	800eb94 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d020:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d022:	b923      	cbnz	r3, 800d02e <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800d024:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800d026:	f001 fdd7 	bl	800ebd8 <vPortExitCritical>
}
 800d02a:	4620      	mov	r0, r4
 800d02c:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800d02e:	2400      	movs	r4, #0
 800d030:	e7f9      	b.n	800d026 <prvIsQueueEmpty+0xe>

0800d032 <prvCopyDataToQueue>:
{
 800d032:	b570      	push	{r4, r5, r6, lr}
 800d034:	4604      	mov	r4, r0
 800d036:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d038:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d03a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800d03c:	b95a      	cbnz	r2, 800d056 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d03e:	6803      	ldr	r3, [r0, #0]
 800d040:	b11b      	cbz	r3, 800d04a <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800d042:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d044:	3601      	adds	r6, #1
 800d046:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 800d048:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d04a:	6880      	ldr	r0, [r0, #8]
 800d04c:	f001 fa62 	bl	800e514 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d050:	2300      	movs	r3, #0
 800d052:	60a3      	str	r3, [r4, #8]
 800d054:	e7f6      	b.n	800d044 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800d056:	b96d      	cbnz	r5, 800d074 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d058:	6840      	ldr	r0, [r0, #4]
 800d05a:	f012 f84b 	bl	801f0f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d05e:	6863      	ldr	r3, [r4, #4]
 800d060:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d062:	4413      	add	r3, r2
 800d064:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d066:	68a2      	ldr	r2, [r4, #8]
 800d068:	4293      	cmp	r3, r2
 800d06a:	d319      	bcc.n	800d0a0 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d06c:	6823      	ldr	r3, [r4, #0]
 800d06e:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800d070:	4628      	mov	r0, r5
 800d072:	e7e7      	b.n	800d044 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d074:	68c0      	ldr	r0, [r0, #12]
 800d076:	f012 f83d 	bl	801f0f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d07a:	68e3      	ldr	r3, [r4, #12]
 800d07c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d07e:	4251      	negs	r1, r2
 800d080:	1a9b      	subs	r3, r3, r2
 800d082:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d084:	6822      	ldr	r2, [r4, #0]
 800d086:	4293      	cmp	r3, r2
 800d088:	d202      	bcs.n	800d090 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d08a:	68a3      	ldr	r3, [r4, #8]
 800d08c:	440b      	add	r3, r1
 800d08e:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d090:	2d02      	cmp	r5, #2
 800d092:	d001      	beq.n	800d098 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800d094:	2000      	movs	r0, #0
 800d096:	e7d5      	b.n	800d044 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d098:	b126      	cbz	r6, 800d0a4 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800d09a:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800d09c:	2000      	movs	r0, #0
 800d09e:	e7d1      	b.n	800d044 <prvCopyDataToQueue+0x12>
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	e7cf      	b.n	800d044 <prvCopyDataToQueue+0x12>
 800d0a4:	2000      	movs	r0, #0
 800d0a6:	e7cd      	b.n	800d044 <prvCopyDataToQueue+0x12>

0800d0a8 <prvCopyDataFromQueue>:
{
 800d0a8:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d0aa:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800d0ac:	b16a      	cbz	r2, 800d0ca <prvCopyDataFromQueue+0x22>
{
 800d0ae:	b510      	push	{r4, lr}
 800d0b0:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d0b2:	68d9      	ldr	r1, [r3, #12]
 800d0b4:	4411      	add	r1, r2
 800d0b6:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d0b8:	689c      	ldr	r4, [r3, #8]
 800d0ba:	42a1      	cmp	r1, r4
 800d0bc:	d301      	bcc.n	800d0c2 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d0be:	6819      	ldr	r1, [r3, #0]
 800d0c0:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d0c2:	68d9      	ldr	r1, [r3, #12]
 800d0c4:	f012 f816 	bl	801f0f4 <memcpy>
}
 800d0c8:	bd10      	pop	{r4, pc}
 800d0ca:	4770      	bx	lr

0800d0cc <prvUnlockQueue>:
{
 800d0cc:	b538      	push	{r3, r4, r5, lr}
 800d0ce:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800d0d0:	f001 fd60 	bl	800eb94 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d0d4:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 800d0d8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d0da:	e001      	b.n	800d0e0 <prvUnlockQueue+0x14>
			--cTxLock;
 800d0dc:	3c01      	subs	r4, #1
 800d0de:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d0e0:	2c00      	cmp	r4, #0
 800d0e2:	dd0a      	ble.n	800d0fa <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0e4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800d0e6:	b143      	cbz	r3, 800d0fa <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d0e8:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800d0ec:	f001 f91c 	bl	800e328 <xTaskRemoveFromEventList>
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d0f3      	beq.n	800d0dc <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800d0f4:	f001 f9ac 	bl	800e450 <vTaskMissedYield>
 800d0f8:	e7f0      	b.n	800d0dc <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800d0fa:	23ff      	movs	r3, #255	@ 0xff
 800d0fc:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800d100:	f001 fd6a 	bl	800ebd8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d104:	f001 fd46 	bl	800eb94 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d108:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 800d10c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d10e:	e001      	b.n	800d114 <prvUnlockQueue+0x48>
				--cRxLock;
 800d110:	3c01      	subs	r4, #1
 800d112:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d114:	2c00      	cmp	r4, #0
 800d116:	dd0a      	ble.n	800d12e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d118:	692b      	ldr	r3, [r5, #16]
 800d11a:	b143      	cbz	r3, 800d12e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d11c:	f105 0010 	add.w	r0, r5, #16
 800d120:	f001 f902 	bl	800e328 <xTaskRemoveFromEventList>
 800d124:	2800      	cmp	r0, #0
 800d126:	d0f3      	beq.n	800d110 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800d128:	f001 f992 	bl	800e450 <vTaskMissedYield>
 800d12c:	e7f0      	b.n	800d110 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800d12e:	23ff      	movs	r3, #255	@ 0xff
 800d130:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 800d134:	f001 fd50 	bl	800ebd8 <vPortExitCritical>
}
 800d138:	bd38      	pop	{r3, r4, r5, pc}

0800d13a <xQueueGenericReset>:
{
 800d13a:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800d13c:	b1e0      	cbz	r0, 800d178 <xQueueGenericReset+0x3e>
 800d13e:	460d      	mov	r5, r1
 800d140:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d142:	f001 fd27 	bl	800eb94 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d146:	6823      	ldr	r3, [r4, #0]
 800d148:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800d14a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800d14c:	fb01 3002 	mla	r0, r1, r2, r3
 800d150:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d152:	2000      	movs	r0, #0
 800d154:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d156:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d158:	3a01      	subs	r2, #1
 800d15a:	fb02 3301 	mla	r3, r2, r1, r3
 800d15e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d160:	23ff      	movs	r3, #255	@ 0xff
 800d162:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d166:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800d16a:	b9fd      	cbnz	r5, 800d1ac <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d16c:	6923      	ldr	r3, [r4, #16]
 800d16e:	b963      	cbnz	r3, 800d18a <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800d170:	f001 fd32 	bl	800ebd8 <vPortExitCritical>
}
 800d174:	2001      	movs	r0, #1
 800d176:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d17c:	f383 8811 	msr	BASEPRI, r3
 800d180:	f3bf 8f6f 	isb	sy
 800d184:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800d188:	e7fe      	b.n	800d188 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d18a:	f104 0010 	add.w	r0, r4, #16
 800d18e:	f001 f8cb 	bl	800e328 <xTaskRemoveFromEventList>
 800d192:	2800      	cmp	r0, #0
 800d194:	d0ec      	beq.n	800d170 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800d196:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d19a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d19e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d1a2:	f3bf 8f4f 	dsb	sy
 800d1a6:	f3bf 8f6f 	isb	sy
 800d1aa:	e7e1      	b.n	800d170 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d1ac:	f104 0010 	add.w	r0, r4, #16
 800d1b0:	f7ff fed6 	bl	800cf60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d1b4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d1b8:	f7ff fed2 	bl	800cf60 <vListInitialise>
 800d1bc:	e7d8      	b.n	800d170 <xQueueGenericReset+0x36>

0800d1be <prvInitialiseNewQueue>:
{
 800d1be:	b538      	push	{r3, r4, r5, lr}
 800d1c0:	461d      	mov	r5, r3
 800d1c2:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	b949      	cbnz	r1, 800d1dc <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d1c8:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800d1ca:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d1cc:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d1ce:	2101      	movs	r1, #1
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f7ff ffb2 	bl	800d13a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800d1d6:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 800d1da:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d1dc:	6022      	str	r2, [r4, #0]
 800d1de:	e7f4      	b.n	800d1ca <prvInitialiseNewQueue+0xc>

0800d1e0 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d1e0:	b940      	cbnz	r0, 800d1f4 <xQueueGenericCreateStatic+0x14>
 800d1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1e6:	f383 8811 	msr	BASEPRI, r3
 800d1ea:	f3bf 8f6f 	isb	sy
 800d1ee:	f3bf 8f4f 	dsb	sy
 800d1f2:	e7fe      	b.n	800d1f2 <xQueueGenericCreateStatic+0x12>
	{
 800d1f4:	b510      	push	{r4, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 800d1fa:	b183      	cbz	r3, 800d21e <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d1fc:	1e0b      	subs	r3, r1, #0
 800d1fe:	bf18      	it	ne
 800d200:	2301      	movne	r3, #1
 800d202:	2a00      	cmp	r2, #0
 800d204:	bf08      	it	eq
 800d206:	f043 0301 	orreq.w	r3, r3, #1
 800d20a:	b98b      	cbnz	r3, 800d230 <xQueueGenericCreateStatic+0x50>
 800d20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d210:	f383 8811 	msr	BASEPRI, r3
 800d214:	f3bf 8f6f 	isb	sy
 800d218:	f3bf 8f4f 	dsb	sy
 800d21c:	e7fe      	b.n	800d21c <xQueueGenericCreateStatic+0x3c>
 800d21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d222:	f383 8811 	msr	BASEPRI, r3
 800d226:	f3bf 8f6f 	isb	sy
 800d22a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800d22e:	e7fe      	b.n	800d22e <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d230:	fab1 f381 	clz	r3, r1
 800d234:	095b      	lsrs	r3, r3, #5
 800d236:	2a00      	cmp	r2, #0
 800d238:	bf18      	it	ne
 800d23a:	f043 0301 	orrne.w	r3, r3, #1
 800d23e:	b943      	cbnz	r3, 800d252 <xQueueGenericCreateStatic+0x72>
 800d240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d244:	f383 8811 	msr	BASEPRI, r3
 800d248:	f3bf 8f6f 	isb	sy
 800d24c:	f3bf 8f4f 	dsb	sy
 800d250:	e7fe      	b.n	800d250 <xQueueGenericCreateStatic+0x70>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d252:	2350      	movs	r3, #80	@ 0x50
 800d254:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d256:	9b03      	ldr	r3, [sp, #12]
 800d258:	2b50      	cmp	r3, #80	@ 0x50
 800d25a:	d008      	beq.n	800d26e <xQueueGenericCreateStatic+0x8e>
 800d25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d260:	f383 8811 	msr	BASEPRI, r3
 800d264:	f3bf 8f6f 	isb	sy
 800d268:	f3bf 8f4f 	dsb	sy
 800d26c:	e7fe      	b.n	800d26c <xQueueGenericCreateStatic+0x8c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d26e:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d270:	2301      	movs	r3, #1
 800d272:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d276:	9400      	str	r4, [sp, #0]
 800d278:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800d27c:	f7ff ff9f 	bl	800d1be <prvInitialiseNewQueue>
	}
 800d280:	4620      	mov	r0, r4
 800d282:	b004      	add	sp, #16
 800d284:	bd10      	pop	{r4, pc}

0800d286 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d286:	b940      	cbnz	r0, 800d29a <xQueueGenericCreate+0x14>
 800d288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d28c:	f383 8811 	msr	BASEPRI, r3
 800d290:	f3bf 8f6f 	isb	sy
 800d294:	f3bf 8f4f 	dsb	sy
 800d298:	e7fe      	b.n	800d298 <xQueueGenericCreate+0x12>
	{
 800d29a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d29c:	b083      	sub	sp, #12
 800d29e:	460d      	mov	r5, r1
 800d2a0:	4614      	mov	r4, r2
 800d2a2:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2a4:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d2a8:	3050      	adds	r0, #80	@ 0x50
 800d2aa:	f001 fe2b 	bl	800ef04 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800d2ae:	4607      	mov	r7, r0
 800d2b0:	b150      	cbz	r0, 800d2c8 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d2b8:	9000      	str	r0, [sp, #0]
 800d2ba:	4623      	mov	r3, r4
 800d2bc:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 800d2c0:	4629      	mov	r1, r5
 800d2c2:	4630      	mov	r0, r6
 800d2c4:	f7ff ff7b 	bl	800d1be <prvInitialiseNewQueue>
	}
 800d2c8:	4638      	mov	r0, r7
 800d2ca:	b003      	add	sp, #12
 800d2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d2ce <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 800d2ce:	b940      	cbnz	r0, 800d2e2 <xQueueCreateCountingSemaphoreStatic+0x14>
 800d2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d4:	f383 8811 	msr	BASEPRI, r3
 800d2d8:	f3bf 8f6f 	isb	sy
 800d2dc:	f3bf 8f4f 	dsb	sy
 800d2e0:	e7fe      	b.n	800d2e0 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 800d2e2:	b510      	push	{r4, lr}
 800d2e4:	b082      	sub	sp, #8
 800d2e6:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800d2e8:	4288      	cmp	r0, r1
 800d2ea:	d208      	bcs.n	800d2fe <xQueueCreateCountingSemaphoreStatic+0x30>
 800d2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2f0:	f383 8811 	msr	BASEPRI, r3
 800d2f4:	f3bf 8f6f 	isb	sy
 800d2f8:	f3bf 8f4f 	dsb	sy
 800d2fc:	e7fe      	b.n	800d2fc <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d2fe:	2302      	movs	r3, #2
 800d300:	9300      	str	r3, [sp, #0]
 800d302:	4613      	mov	r3, r2
 800d304:	2200      	movs	r2, #0
 800d306:	4611      	mov	r1, r2
 800d308:	f7ff ff6a 	bl	800d1e0 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800d30c:	b100      	cbz	r0, 800d310 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d30e:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800d310:	b002      	add	sp, #8
 800d312:	bd10      	pop	{r4, pc}

0800d314 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800d314:	b940      	cbnz	r0, 800d328 <xQueueCreateCountingSemaphore+0x14>
 800d316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d31a:	f383 8811 	msr	BASEPRI, r3
 800d31e:	f3bf 8f6f 	isb	sy
 800d322:	f3bf 8f4f 	dsb	sy
 800d326:	e7fe      	b.n	800d326 <xQueueCreateCountingSemaphore+0x12>
	{
 800d328:	b510      	push	{r4, lr}
 800d32a:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800d32c:	4288      	cmp	r0, r1
 800d32e:	d208      	bcs.n	800d342 <xQueueCreateCountingSemaphore+0x2e>
 800d330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d334:	f383 8811 	msr	BASEPRI, r3
 800d338:	f3bf 8f6f 	isb	sy
 800d33c:	f3bf 8f4f 	dsb	sy
 800d340:	e7fe      	b.n	800d340 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d342:	2202      	movs	r2, #2
 800d344:	2100      	movs	r1, #0
 800d346:	f7ff ff9e 	bl	800d286 <xQueueGenericCreate>
		if( xHandle != NULL )
 800d34a:	b100      	cbz	r0, 800d34e <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d34c:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800d34e:	bd10      	pop	{r4, pc}

0800d350 <xQueueGenericSend>:
{
 800d350:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d352:	b085      	sub	sp, #20
 800d354:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800d356:	b188      	cbz	r0, 800d37c <xQueueGenericSend+0x2c>
 800d358:	460f      	mov	r7, r1
 800d35a:	461d      	mov	r5, r3
 800d35c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d35e:	b1b1      	cbz	r1, 800d38e <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d360:	2d02      	cmp	r5, #2
 800d362:	d120      	bne.n	800d3a6 <xQueueGenericSend+0x56>
 800d364:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d366:	2b01      	cmp	r3, #1
 800d368:	d01d      	beq.n	800d3a6 <xQueueGenericSend+0x56>
 800d36a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d36e:	f383 8811 	msr	BASEPRI, r3
 800d372:	f3bf 8f6f 	isb	sy
 800d376:	f3bf 8f4f 	dsb	sy
 800d37a:	e7fe      	b.n	800d37a <xQueueGenericSend+0x2a>
 800d37c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d380:	f383 8811 	msr	BASEPRI, r3
 800d384:	f3bf 8f6f 	isb	sy
 800d388:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800d38c:	e7fe      	b.n	800d38c <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d38e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d390:	2b00      	cmp	r3, #0
 800d392:	d0e5      	beq.n	800d360 <xQueueGenericSend+0x10>
 800d394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d398:	f383 8811 	msr	BASEPRI, r3
 800d39c:	f3bf 8f6f 	isb	sy
 800d3a0:	f3bf 8f4f 	dsb	sy
 800d3a4:	e7fe      	b.n	800d3a4 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d3a6:	f001 f859 	bl	800e45c <xTaskGetSchedulerState>
 800d3aa:	4606      	mov	r6, r0
 800d3ac:	b958      	cbnz	r0, 800d3c6 <xQueueGenericSend+0x76>
 800d3ae:	9b01      	ldr	r3, [sp, #4]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d048      	beq.n	800d446 <xQueueGenericSend+0xf6>
 800d3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b8:	f383 8811 	msr	BASEPRI, r3
 800d3bc:	f3bf 8f6f 	isb	sy
 800d3c0:	f3bf 8f4f 	dsb	sy
 800d3c4:	e7fe      	b.n	800d3c4 <xQueueGenericSend+0x74>
 800d3c6:	2600      	movs	r6, #0
 800d3c8:	e03d      	b.n	800d446 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d3ca:	462a      	mov	r2, r5
 800d3cc:	4639      	mov	r1, r7
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	f7ff fe2f 	bl	800d032 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3d4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d3d6:	b97b      	cbnz	r3, 800d3f8 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800d3d8:	b148      	cbz	r0, 800d3ee <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800d3da:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d3de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3e2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d3e6:	f3bf 8f4f 	dsb	sy
 800d3ea:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800d3ee:	f001 fbf3 	bl	800ebd8 <vPortExitCritical>
				return pdPASS;
 800d3f2:	2001      	movs	r0, #1
}
 800d3f4:	b005      	add	sp, #20
 800d3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3f8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d3fc:	f000 ff94 	bl	800e328 <xTaskRemoveFromEventList>
 800d400:	2800      	cmp	r0, #0
 800d402:	d0f4      	beq.n	800d3ee <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800d404:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d408:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d40c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d410:	f3bf 8f4f 	dsb	sy
 800d414:	f3bf 8f6f 	isb	sy
 800d418:	e7e9      	b.n	800d3ee <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800d41a:	f001 fbdd 	bl	800ebd8 <vPortExitCritical>
					return errQUEUE_FULL;
 800d41e:	2000      	movs	r0, #0
 800d420:	e7e8      	b.n	800d3f4 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d422:	a802      	add	r0, sp, #8
 800d424:	f000 ffc6 	bl	800e3b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d428:	2601      	movs	r6, #1
 800d42a:	e019      	b.n	800d460 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800d42c:	2300      	movs	r3, #0
 800d42e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800d432:	e021      	b.n	800d478 <xQueueGenericSend+0x128>
 800d434:	2300      	movs	r3, #0
 800d436:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800d43a:	e023      	b.n	800d484 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800d43c:	4620      	mov	r0, r4
 800d43e:	f7ff fe45 	bl	800d0cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d442:	f000 fe49 	bl	800e0d8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800d446:	f001 fba5 	bl	800eb94 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d44a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d44c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d44e:	429a      	cmp	r2, r3
 800d450:	d3bb      	bcc.n	800d3ca <xQueueGenericSend+0x7a>
 800d452:	2d02      	cmp	r5, #2
 800d454:	d0b9      	beq.n	800d3ca <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d456:	9b01      	ldr	r3, [sp, #4]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d0de      	beq.n	800d41a <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800d45c:	2e00      	cmp	r6, #0
 800d45e:	d0e0      	beq.n	800d422 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 800d460:	f001 fbba 	bl	800ebd8 <vPortExitCritical>
		vTaskSuspendAll();
 800d464:	f000 fd9e 	bl	800dfa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d468:	f001 fb94 	bl	800eb94 <vPortEnterCritical>
 800d46c:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 800d470:	b252      	sxtb	r2, r2
 800d472:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d476:	d0d9      	beq.n	800d42c <xQueueGenericSend+0xdc>
 800d478:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 800d47c:	b252      	sxtb	r2, r2
 800d47e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d482:	d0d7      	beq.n	800d434 <xQueueGenericSend+0xe4>
 800d484:	f001 fba8 	bl	800ebd8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d488:	a901      	add	r1, sp, #4
 800d48a:	a802      	add	r0, sp, #8
 800d48c:	f000 ff9e 	bl	800e3cc <xTaskCheckForTimeOut>
 800d490:	b9d8      	cbnz	r0, 800d4ca <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d492:	4620      	mov	r0, r4
 800d494:	f7ff fdb1 	bl	800cffa <prvIsQueueFull>
 800d498:	2800      	cmp	r0, #0
 800d49a:	d0cf      	beq.n	800d43c <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d49c:	9901      	ldr	r1, [sp, #4]
 800d49e:	f104 0010 	add.w	r0, r4, #16
 800d4a2:	f000 ff0d 	bl	800e2c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f7ff fe10 	bl	800d0cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d4ac:	f000 fe14 	bl	800e0d8 <xTaskResumeAll>
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	d1c8      	bne.n	800d446 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800d4b4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d4b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d4c0:	f3bf 8f4f 	dsb	sy
 800d4c4:	f3bf 8f6f 	isb	sy
 800d4c8:	e7bd      	b.n	800d446 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	f7ff fdfe 	bl	800d0cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d4d0:	f000 fe02 	bl	800e0d8 <xTaskResumeAll>
			return errQUEUE_FULL;
 800d4d4:	2000      	movs	r0, #0
 800d4d6:	e78d      	b.n	800d3f4 <xQueueGenericSend+0xa4>

0800d4d8 <xQueueGenericSendFromISR>:
{
 800d4d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800d4dc:	b190      	cbz	r0, 800d504 <xQueueGenericSendFromISR+0x2c>
 800d4de:	460f      	mov	r7, r1
 800d4e0:	4616      	mov	r6, r2
 800d4e2:	461c      	mov	r4, r3
 800d4e4:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4e6:	b1b1      	cbz	r1, 800d516 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4e8:	2c02      	cmp	r4, #2
 800d4ea:	d120      	bne.n	800d52e <xQueueGenericSendFromISR+0x56>
 800d4ec:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800d4ee:	2b01      	cmp	r3, #1
 800d4f0:	d01d      	beq.n	800d52e <xQueueGenericSendFromISR+0x56>
 800d4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4f6:	f383 8811 	msr	BASEPRI, r3
 800d4fa:	f3bf 8f6f 	isb	sy
 800d4fe:	f3bf 8f4f 	dsb	sy
 800d502:	e7fe      	b.n	800d502 <xQueueGenericSendFromISR+0x2a>
 800d504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d508:	f383 8811 	msr	BASEPRI, r3
 800d50c:	f3bf 8f6f 	isb	sy
 800d510:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800d514:	e7fe      	b.n	800d514 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d516:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d0e5      	beq.n	800d4e8 <xQueueGenericSendFromISR+0x10>
 800d51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d520:	f383 8811 	msr	BASEPRI, r3
 800d524:	f3bf 8f6f 	isb	sy
 800d528:	f3bf 8f4f 	dsb	sy
 800d52c:	e7fe      	b.n	800d52c <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d52e:	f001 fc57 	bl	800ede0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d532:	f3ef 8811 	mrs	r8, BASEPRI
 800d536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d53a:	f383 8811 	msr	BASEPRI, r3
 800d53e:	f3bf 8f6f 	isb	sy
 800d542:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d546:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 800d548:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d306      	bcc.n	800d55c <xQueueGenericSendFromISR+0x84>
 800d54e:	2c02      	cmp	r4, #2
 800d550:	d004      	beq.n	800d55c <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800d552:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d554:	f388 8811 	msr	BASEPRI, r8
}
 800d558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800d55c:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 800d560:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d564:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d566:	4622      	mov	r2, r4
 800d568:	4639      	mov	r1, r7
 800d56a:	4628      	mov	r0, r5
 800d56c:	f7ff fd61 	bl	800d032 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800d570:	f1b9 3fff 	cmp.w	r9, #4294967295
 800d574:	d006      	beq.n	800d584 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d576:	f109 0301 	add.w	r3, r9, #1
 800d57a:	b25b      	sxtb	r3, r3
 800d57c:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800d580:	2001      	movs	r0, #1
 800d582:	e7e7      	b.n	800d554 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d584:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800d586:	b90b      	cbnz	r3, 800d58c <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800d588:	2001      	movs	r0, #1
 800d58a:	e7e3      	b.n	800d554 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d58c:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800d590:	f000 feca 	bl	800e328 <xTaskRemoveFromEventList>
 800d594:	b118      	cbz	r0, 800d59e <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800d596:	b126      	cbz	r6, 800d5a2 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d598:	2001      	movs	r0, #1
 800d59a:	6030      	str	r0, [r6, #0]
 800d59c:	e7da      	b.n	800d554 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800d59e:	2001      	movs	r0, #1
 800d5a0:	e7d8      	b.n	800d554 <xQueueGenericSendFromISR+0x7c>
 800d5a2:	2001      	movs	r0, #1
 800d5a4:	e7d6      	b.n	800d554 <xQueueGenericSendFromISR+0x7c>

0800d5a6 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800d5a6:	b168      	cbz	r0, 800d5c4 <xQueueGiveFromISR+0x1e>
{
 800d5a8:	b570      	push	{r4, r5, r6, lr}
 800d5aa:	460c      	mov	r4, r1
 800d5ac:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800d5ae:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d5b0:	b18b      	cbz	r3, 800d5d6 <xQueueGiveFromISR+0x30>
	__asm volatile
 800d5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5b6:	f383 8811 	msr	BASEPRI, r3
 800d5ba:	f3bf 8f6f 	isb	sy
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	e7fe      	b.n	800d5c2 <xQueueGiveFromISR+0x1c>
 800d5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c8:	f383 8811 	msr	BASEPRI, r3
 800d5cc:	f3bf 8f6f 	isb	sy
 800d5d0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800d5d4:	e7fe      	b.n	800d5d4 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d5d6:	6803      	ldr	r3, [r0, #0]
 800d5d8:	b1eb      	cbz	r3, 800d616 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d5da:	f001 fc01 	bl	800ede0 <vPortValidateInterruptPriority>
	__asm volatile
 800d5de:	f3ef 8611 	mrs	r6, BASEPRI
 800d5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5e6:	f383 8811 	msr	BASEPRI, r3
 800d5ea:	f3bf 8f6f 	isb	sy
 800d5ee:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5f2:	6baa      	ldr	r2, [r5, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d5f4:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d926      	bls.n	800d648 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800d5fa:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 800d5fe:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d600:	3201      	adds	r2, #1
 800d602:	63aa      	str	r2, [r5, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800d604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d608:	d011      	beq.n	800d62e <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d60a:	3301      	adds	r3, #1
 800d60c:	b25b      	sxtb	r3, r3
 800d60e:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800d612:	2001      	movs	r0, #1
 800d614:	e019      	b.n	800d64a <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d616:	6883      	ldr	r3, [r0, #8]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d0de      	beq.n	800d5da <xQueueGiveFromISR+0x34>
	__asm volatile
 800d61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d620:	f383 8811 	msr	BASEPRI, r3
 800d624:	f3bf 8f6f 	isb	sy
 800d628:	f3bf 8f4f 	dsb	sy
 800d62c:	e7fe      	b.n	800d62c <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d62e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800d630:	b90b      	cbnz	r3, 800d636 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800d632:	2001      	movs	r0, #1
 800d634:	e009      	b.n	800d64a <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d636:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800d63a:	f000 fe75 	bl	800e328 <xTaskRemoveFromEventList>
 800d63e:	b138      	cbz	r0, 800d650 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800d640:	b144      	cbz	r4, 800d654 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d642:	2001      	movs	r0, #1
 800d644:	6020      	str	r0, [r4, #0]
 800d646:	e000      	b.n	800d64a <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800d648:	2000      	movs	r0, #0
	__asm volatile
 800d64a:	f386 8811 	msr	BASEPRI, r6
}
 800d64e:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800d650:	2001      	movs	r0, #1
 800d652:	e7fa      	b.n	800d64a <xQueueGiveFromISR+0xa4>
 800d654:	2001      	movs	r0, #1
 800d656:	e7f8      	b.n	800d64a <xQueueGiveFromISR+0xa4>

0800d658 <xQueueReceive>:
{
 800d658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d65a:	b085      	sub	sp, #20
 800d65c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d65e:	b190      	cbz	r0, 800d686 <xQueueReceive+0x2e>
 800d660:	460f      	mov	r7, r1
 800d662:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d664:	b1c1      	cbz	r1, 800d698 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d666:	f000 fef9 	bl	800e45c <xTaskGetSchedulerState>
 800d66a:	4606      	mov	r6, r0
 800d66c:	bb00      	cbnz	r0, 800d6b0 <xQueueReceive+0x58>
 800d66e:	9b01      	ldr	r3, [sp, #4]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d05e      	beq.n	800d732 <xQueueReceive+0xda>
	__asm volatile
 800d674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d678:	f383 8811 	msr	BASEPRI, r3
 800d67c:	f3bf 8f6f 	isb	sy
 800d680:	f3bf 8f4f 	dsb	sy
 800d684:	e7fe      	b.n	800d684 <xQueueReceive+0x2c>
 800d686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d68a:	f383 8811 	msr	BASEPRI, r3
 800d68e:	f3bf 8f6f 	isb	sy
 800d692:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800d696:	e7fe      	b.n	800d696 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d698:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d0e3      	beq.n	800d666 <xQueueReceive+0xe>
 800d69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a2:	f383 8811 	msr	BASEPRI, r3
 800d6a6:	f3bf 8f6f 	isb	sy
 800d6aa:	f3bf 8f4f 	dsb	sy
 800d6ae:	e7fe      	b.n	800d6ae <xQueueReceive+0x56>
 800d6b0:	2600      	movs	r6, #0
 800d6b2:	e03e      	b.n	800d732 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d6b4:	4639      	mov	r1, r7
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	f7ff fcf6 	bl	800d0a8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d6bc:	3d01      	subs	r5, #1
 800d6be:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6c0:	6923      	ldr	r3, [r4, #16]
 800d6c2:	b923      	cbnz	r3, 800d6ce <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 800d6c4:	f001 fa88 	bl	800ebd8 <vPortExitCritical>
				return pdPASS;
 800d6c8:	2001      	movs	r0, #1
}
 800d6ca:	b005      	add	sp, #20
 800d6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6ce:	f104 0010 	add.w	r0, r4, #16
 800d6d2:	f000 fe29 	bl	800e328 <xTaskRemoveFromEventList>
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	d0f4      	beq.n	800d6c4 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800d6da:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d6de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6e2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d6e6:	f3bf 8f4f 	dsb	sy
 800d6ea:	f3bf 8f6f 	isb	sy
 800d6ee:	e7e9      	b.n	800d6c4 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800d6f0:	f001 fa72 	bl	800ebd8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d6f4:	2000      	movs	r0, #0
 800d6f6:	e7e8      	b.n	800d6ca <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d6f8:	a802      	add	r0, sp, #8
 800d6fa:	f000 fe5b 	bl	800e3b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d6fe:	2601      	movs	r6, #1
 800d700:	e021      	b.n	800d746 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800d702:	2300      	movs	r3, #0
 800d704:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800d708:	e029      	b.n	800d75e <xQueueReceive+0x106>
 800d70a:	2300      	movs	r3, #0
 800d70c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800d710:	e02b      	b.n	800d76a <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800d712:	4620      	mov	r0, r4
 800d714:	f7ff fcda 	bl	800d0cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d718:	f000 fcde 	bl	800e0d8 <xTaskResumeAll>
 800d71c:	e009      	b.n	800d732 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800d71e:	4620      	mov	r0, r4
 800d720:	f7ff fcd4 	bl	800d0cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d724:	f000 fcd8 	bl	800e0d8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d728:	4620      	mov	r0, r4
 800d72a:	f7ff fc75 	bl	800d018 <prvIsQueueEmpty>
 800d72e:	2800      	cmp	r0, #0
 800d730:	d13f      	bne.n	800d7b2 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800d732:	f001 fa2f 	bl	800eb94 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d736:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d738:	2d00      	cmp	r5, #0
 800d73a:	d1bb      	bne.n	800d6b4 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d73c:	9b01      	ldr	r3, [sp, #4]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d0d6      	beq.n	800d6f0 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800d742:	2e00      	cmp	r6, #0
 800d744:	d0d8      	beq.n	800d6f8 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800d746:	f001 fa47 	bl	800ebd8 <vPortExitCritical>
		vTaskSuspendAll();
 800d74a:	f000 fc2b 	bl	800dfa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d74e:	f001 fa21 	bl	800eb94 <vPortEnterCritical>
 800d752:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d756:	b25b      	sxtb	r3, r3
 800d758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d75c:	d0d1      	beq.n	800d702 <xQueueReceive+0xaa>
 800d75e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d762:	b25b      	sxtb	r3, r3
 800d764:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d768:	d0cf      	beq.n	800d70a <xQueueReceive+0xb2>
 800d76a:	f001 fa35 	bl	800ebd8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d76e:	a901      	add	r1, sp, #4
 800d770:	a802      	add	r0, sp, #8
 800d772:	f000 fe2b 	bl	800e3cc <xTaskCheckForTimeOut>
 800d776:	2800      	cmp	r0, #0
 800d778:	d1d1      	bne.n	800d71e <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d77a:	4620      	mov	r0, r4
 800d77c:	f7ff fc4c 	bl	800d018 <prvIsQueueEmpty>
 800d780:	2800      	cmp	r0, #0
 800d782:	d0c6      	beq.n	800d712 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d784:	9901      	ldr	r1, [sp, #4]
 800d786:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d78a:	f000 fd99 	bl	800e2c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d78e:	4620      	mov	r0, r4
 800d790:	f7ff fc9c 	bl	800d0cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d794:	f000 fca0 	bl	800e0d8 <xTaskResumeAll>
 800d798:	2800      	cmp	r0, #0
 800d79a:	d1ca      	bne.n	800d732 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800d79c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d7a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d7a8:	f3bf 8f4f 	dsb	sy
 800d7ac:	f3bf 8f6f 	isb	sy
 800d7b0:	e7bf      	b.n	800d732 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800d7b2:	2000      	movs	r0, #0
 800d7b4:	e789      	b.n	800d6ca <xQueueReceive+0x72>

0800d7b6 <xQueueSemaphoreTake>:
{
 800d7b6:	b570      	push	{r4, r5, r6, lr}
 800d7b8:	b084      	sub	sp, #16
 800d7ba:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d7bc:	b158      	cbz	r0, 800d7d6 <xQueueSemaphoreTake+0x20>
 800d7be:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800d7c0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d7c2:	b18b      	cbz	r3, 800d7e8 <xQueueSemaphoreTake+0x32>
 800d7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7c8:	f383 8811 	msr	BASEPRI, r3
 800d7cc:	f3bf 8f6f 	isb	sy
 800d7d0:	f3bf 8f4f 	dsb	sy
 800d7d4:	e7fe      	b.n	800d7d4 <xQueueSemaphoreTake+0x1e>
 800d7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7da:	f383 8811 	msr	BASEPRI, r3
 800d7de:	f3bf 8f6f 	isb	sy
 800d7e2:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800d7e6:	e7fe      	b.n	800d7e6 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d7e8:	f000 fe38 	bl	800e45c <xTaskGetSchedulerState>
 800d7ec:	4605      	mov	r5, r0
 800d7ee:	b950      	cbnz	r0, 800d806 <xQueueSemaphoreTake+0x50>
 800d7f0:	9b01      	ldr	r3, [sp, #4]
 800d7f2:	b15b      	cbz	r3, 800d80c <xQueueSemaphoreTake+0x56>
 800d7f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7f8:	f383 8811 	msr	BASEPRI, r3
 800d7fc:	f3bf 8f6f 	isb	sy
 800d800:	f3bf 8f4f 	dsb	sy
 800d804:	e7fe      	b.n	800d804 <xQueueSemaphoreTake+0x4e>
 800d806:	2600      	movs	r6, #0
 800d808:	4635      	mov	r5, r6
 800d80a:	e055      	b.n	800d8b8 <xQueueSemaphoreTake+0x102>
 800d80c:	4606      	mov	r6, r0
 800d80e:	e053      	b.n	800d8b8 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d810:	3b01      	subs	r3, #1
 800d812:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d814:	6823      	ldr	r3, [r4, #0]
 800d816:	b13b      	cbz	r3, 800d828 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d818:	6923      	ldr	r3, [r4, #16]
 800d81a:	b94b      	cbnz	r3, 800d830 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800d81c:	f001 f9dc 	bl	800ebd8 <vPortExitCritical>
				return pdPASS;
 800d820:	2601      	movs	r6, #1
}
 800d822:	4630      	mov	r0, r6
 800d824:	b004      	add	sp, #16
 800d826:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d828:	f000 ff0c 	bl	800e644 <pvTaskIncrementMutexHeldCount>
 800d82c:	60a0      	str	r0, [r4, #8]
 800d82e:	e7f3      	b.n	800d818 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d830:	f104 0010 	add.w	r0, r4, #16
 800d834:	f000 fd78 	bl	800e328 <xTaskRemoveFromEventList>
 800d838:	2800      	cmp	r0, #0
 800d83a:	d0ef      	beq.n	800d81c <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800d83c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d840:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d844:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d848:	f3bf 8f4f 	dsb	sy
 800d84c:	f3bf 8f6f 	isb	sy
 800d850:	e7e4      	b.n	800d81c <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d852:	b146      	cbz	r6, 800d866 <xQueueSemaphoreTake+0xb0>
 800d854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d858:	f383 8811 	msr	BASEPRI, r3
 800d85c:	f3bf 8f6f 	isb	sy
 800d860:	f3bf 8f4f 	dsb	sy
 800d864:	e7fe      	b.n	800d864 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 800d866:	f001 f9b7 	bl	800ebd8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d86a:	e7da      	b.n	800d822 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d86c:	a802      	add	r0, sp, #8
 800d86e:	f000 fda1 	bl	800e3b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d872:	2501      	movs	r5, #1
 800d874:	e02a      	b.n	800d8cc <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 800d876:	2300      	movs	r3, #0
 800d878:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800d87c:	e032      	b.n	800d8e4 <xQueueSemaphoreTake+0x12e>
 800d87e:	2300      	movs	r3, #0
 800d880:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800d884:	e034      	b.n	800d8f0 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800d886:	f001 f985 	bl	800eb94 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d88a:	68a0      	ldr	r0, [r4, #8]
 800d88c:	f000 fdf6 	bl	800e47c <xTaskPriorityInherit>
 800d890:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800d892:	f001 f9a1 	bl	800ebd8 <vPortExitCritical>
 800d896:	e03b      	b.n	800d910 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 800d898:	4620      	mov	r0, r4
 800d89a:	f7ff fc17 	bl	800d0cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d89e:	f000 fc1b 	bl	800e0d8 <xTaskResumeAll>
 800d8a2:	e009      	b.n	800d8b8 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f7ff fc11 	bl	800d0cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8aa:	f000 fc15 	bl	800e0d8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	f7ff fbb2 	bl	800d018 <prvIsQueueEmpty>
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	d142      	bne.n	800d93e <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 800d8b8:	f001 f96c 	bl	800eb94 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d8bc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d1a6      	bne.n	800d810 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d8c2:	9b01      	ldr	r3, [sp, #4]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d0c4      	beq.n	800d852 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 800d8c8:	2d00      	cmp	r5, #0
 800d8ca:	d0cf      	beq.n	800d86c <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 800d8cc:	f001 f984 	bl	800ebd8 <vPortExitCritical>
		vTaskSuspendAll();
 800d8d0:	f000 fb68 	bl	800dfa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d8d4:	f001 f95e 	bl	800eb94 <vPortEnterCritical>
 800d8d8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d8dc:	b25b      	sxtb	r3, r3
 800d8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e2:	d0c8      	beq.n	800d876 <xQueueSemaphoreTake+0xc0>
 800d8e4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d8e8:	b25b      	sxtb	r3, r3
 800d8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ee:	d0c6      	beq.n	800d87e <xQueueSemaphoreTake+0xc8>
 800d8f0:	f001 f972 	bl	800ebd8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d8f4:	a901      	add	r1, sp, #4
 800d8f6:	a802      	add	r0, sp, #8
 800d8f8:	f000 fd68 	bl	800e3cc <xTaskCheckForTimeOut>
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	d1d1      	bne.n	800d8a4 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d900:	4620      	mov	r0, r4
 800d902:	f7ff fb89 	bl	800d018 <prvIsQueueEmpty>
 800d906:	2800      	cmp	r0, #0
 800d908:	d0c6      	beq.n	800d898 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d90a:	6823      	ldr	r3, [r4, #0]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d0ba      	beq.n	800d886 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d910:	9901      	ldr	r1, [sp, #4]
 800d912:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d916:	f000 fcd3 	bl	800e2c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d91a:	4620      	mov	r0, r4
 800d91c:	f7ff fbd6 	bl	800d0cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d920:	f000 fbda 	bl	800e0d8 <xTaskResumeAll>
 800d924:	2800      	cmp	r0, #0
 800d926:	d1c7      	bne.n	800d8b8 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 800d928:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d92c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d930:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d934:	f3bf 8f4f 	dsb	sy
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	e7bc      	b.n	800d8b8 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 800d93e:	b90e      	cbnz	r6, 800d944 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 800d940:	2600      	movs	r6, #0
 800d942:	e76e      	b.n	800d822 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800d944:	f001 f926 	bl	800eb94 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d948:	4620      	mov	r0, r4
 800d94a:	f7ff fb4e 	bl	800cfea <prvGetDisinheritPriorityAfterTimeout>
 800d94e:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d950:	68a0      	ldr	r0, [r4, #8]
 800d952:	f000 fe27 	bl	800e5a4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800d956:	f001 f93f 	bl	800ebd8 <vPortExitCritical>
 800d95a:	e7f1      	b.n	800d940 <xQueueSemaphoreTake+0x18a>

0800d95c <xQueueReceiveFromISR>:
{
 800d95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800d960:	b1b0      	cbz	r0, 800d990 <xQueueReceiveFromISR+0x34>
 800d962:	460d      	mov	r5, r1
 800d964:	4690      	mov	r8, r2
 800d966:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d968:	b1d9      	cbz	r1, 800d9a2 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d96a:	f001 fa39 	bl	800ede0 <vPortValidateInterruptPriority>
	__asm volatile
 800d96e:	f3ef 8711 	mrs	r7, BASEPRI
 800d972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d982:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d984:	b9ce      	cbnz	r6, 800d9ba <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800d986:	2000      	movs	r0, #0
	__asm volatile
 800d988:	f387 8811 	msr	BASEPRI, r7
}
 800d98c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800d990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d994:	f383 8811 	msr	BASEPRI, r3
 800d998:	f3bf 8f6f 	isb	sy
 800d99c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800d9a0:	e7fe      	b.n	800d9a0 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d9a2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d0e0      	beq.n	800d96a <xQueueReceiveFromISR+0xe>
 800d9a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ac:	f383 8811 	msr	BASEPRI, r3
 800d9b0:	f3bf 8f6f 	isb	sy
 800d9b4:	f3bf 8f4f 	dsb	sy
 800d9b8:	e7fe      	b.n	800d9b8 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800d9ba:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 800d9be:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d9c2:	4629      	mov	r1, r5
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	f7ff fb6f 	bl	800d0a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d9ca:	1e73      	subs	r3, r6, #1
 800d9cc:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800d9ce:	f1b9 3fff 	cmp.w	r9, #4294967295
 800d9d2:	d006      	beq.n	800d9e2 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d9d4:	f109 0301 	add.w	r3, r9, #1
 800d9d8:	b25b      	sxtb	r3, r3
 800d9da:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 800d9de:	2001      	movs	r0, #1
 800d9e0:	e7d2      	b.n	800d988 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9e2:	6923      	ldr	r3, [r4, #16]
 800d9e4:	b90b      	cbnz	r3, 800d9ea <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800d9e6:	2001      	movs	r0, #1
 800d9e8:	e7ce      	b.n	800d988 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9ea:	f104 0010 	add.w	r0, r4, #16
 800d9ee:	f000 fc9b 	bl	800e328 <xTaskRemoveFromEventList>
 800d9f2:	b130      	cbz	r0, 800da02 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 800d9f4:	f1b8 0f00 	cmp.w	r8, #0
 800d9f8:	d005      	beq.n	800da06 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d9fa:	2001      	movs	r0, #1
 800d9fc:	f8c8 0000 	str.w	r0, [r8]
 800da00:	e7c2      	b.n	800d988 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800da02:	2001      	movs	r0, #1
 800da04:	e7c0      	b.n	800d988 <xQueueReceiveFromISR+0x2c>
 800da06:	2001      	movs	r0, #1
 800da08:	e7be      	b.n	800d988 <xQueueReceiveFromISR+0x2c>
	...

0800da0c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da0c:	2300      	movs	r3, #0
 800da0e:	2b07      	cmp	r3, #7
 800da10:	d80c      	bhi.n	800da2c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800da12:	4a07      	ldr	r2, [pc, #28]	@ (800da30 <vQueueAddToRegistry+0x24>)
 800da14:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800da18:	b10a      	cbz	r2, 800da1e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da1a:	3301      	adds	r3, #1
 800da1c:	e7f7      	b.n	800da0e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800da1e:	4a04      	ldr	r2, [pc, #16]	@ (800da30 <vQueueAddToRegistry+0x24>)
 800da20:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800da24:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800da28:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800da2a:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800da2c:	4770      	bx	lr
 800da2e:	bf00      	nop
 800da30:	24003140 	.word	0x24003140

0800da34 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da34:	2300      	movs	r3, #0
 800da36:	2b07      	cmp	r3, #7
 800da38:	d80f      	bhi.n	800da5a <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800da3a:	4a08      	ldr	r2, [pc, #32]	@ (800da5c <vQueueUnregisterQueue+0x28>)
 800da3c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800da40:	6852      	ldr	r2, [r2, #4]
 800da42:	4282      	cmp	r2, r0
 800da44:	d001      	beq.n	800da4a <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da46:	3301      	adds	r3, #1
 800da48:	e7f5      	b.n	800da36 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800da4a:	4a04      	ldr	r2, [pc, #16]	@ (800da5c <vQueueUnregisterQueue+0x28>)
 800da4c:	2100      	movs	r1, #0
 800da4e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800da52:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800da56:	6051      	str	r1, [r2, #4]
				break;
 800da58:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800da5a:	4770      	bx	lr
 800da5c:	24003140 	.word	0x24003140

0800da60 <vQueueDelete>:
	configASSERT( pxQueue );
 800da60:	b138      	cbz	r0, 800da72 <vQueueDelete+0x12>
{
 800da62:	b510      	push	{r4, lr}
 800da64:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800da66:	f7ff ffe5 	bl	800da34 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800da6a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800da6e:	b14b      	cbz	r3, 800da84 <vQueueDelete+0x24>
}
 800da70:	bd10      	pop	{r4, pc}
 800da72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da76:	f383 8811 	msr	BASEPRI, r3
 800da7a:	f3bf 8f6f 	isb	sy
 800da7e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800da82:	e7fe      	b.n	800da82 <vQueueDelete+0x22>
			vPortFree( pxQueue );
 800da84:	4620      	mov	r0, r4
 800da86:	f001 fabf 	bl	800f008 <vPortFree>
}
 800da8a:	e7f1      	b.n	800da70 <vQueueDelete+0x10>

0800da8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800da8c:	b570      	push	{r4, r5, r6, lr}
 800da8e:	4604      	mov	r4, r0
 800da90:	460d      	mov	r5, r1
 800da92:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800da94:	f001 f87e 	bl	800eb94 <vPortEnterCritical>
 800da98:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800da9c:	b25b      	sxtb	r3, r3
 800da9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daa2:	d00d      	beq.n	800dac0 <vQueueWaitForMessageRestricted+0x34>
 800daa4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800daa8:	b25b      	sxtb	r3, r3
 800daaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daae:	d00b      	beq.n	800dac8 <vQueueWaitForMessageRestricted+0x3c>
 800dab0:	f001 f892 	bl	800ebd8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dab4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800dab6:	b15b      	cbz	r3, 800dad0 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dab8:	4620      	mov	r0, r4
 800daba:	f7ff fb07 	bl	800d0cc <prvUnlockQueue>
	}
 800dabe:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800dac0:	2300      	movs	r3, #0
 800dac2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800dac6:	e7ed      	b.n	800daa4 <vQueueWaitForMessageRestricted+0x18>
 800dac8:	2300      	movs	r3, #0
 800daca:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800dace:	e7ef      	b.n	800dab0 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dad0:	4632      	mov	r2, r6
 800dad2:	4629      	mov	r1, r5
 800dad4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800dad8:	f000 fc0a 	bl	800e2f0 <vTaskPlaceOnEventListRestricted>
 800dadc:	e7ec      	b.n	800dab8 <vQueueWaitForMessageRestricted+0x2c>
	...

0800dae0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dae0:	4b08      	ldr	r3, [pc, #32]	@ (800db04 <prvResetNextTaskUnblockTime+0x24>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	b923      	cbnz	r3, 800daf2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dae8:	4b07      	ldr	r3, [pc, #28]	@ (800db08 <prvResetNextTaskUnblockTime+0x28>)
 800daea:	f04f 32ff 	mov.w	r2, #4294967295
 800daee:	601a      	str	r2, [r3, #0]
 800daf0:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daf2:	4b04      	ldr	r3, [pc, #16]	@ (800db04 <prvResetNextTaskUnblockTime+0x24>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	68db      	ldr	r3, [r3, #12]
 800daf8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dafa:	685a      	ldr	r2, [r3, #4]
 800dafc:	4b02      	ldr	r3, [pc, #8]	@ (800db08 <prvResetNextTaskUnblockTime+0x28>)
 800dafe:	601a      	str	r2, [r3, #0]
	}
}
 800db00:	4770      	bx	lr
 800db02:	bf00      	nop
 800db04:	240031f0 	.word	0x240031f0
 800db08:	24003188 	.word	0x24003188

0800db0c <prvInitialiseNewTask>:
{
 800db0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db10:	4680      	mov	r8, r0
 800db12:	460d      	mov	r5, r1
 800db14:	4617      	mov	r7, r2
 800db16:	4699      	mov	r9, r3
 800db18:	9e08      	ldr	r6, [sp, #32]
 800db1a:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 800db1e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800db20:	0092      	lsls	r2, r2, #2
 800db22:	21a5      	movs	r1, #165	@ 0xa5
 800db24:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800db26:	f011 fa07 	bl	801ef38 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800db2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800db2c:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 800db30:	443a      	add	r2, r7
 800db32:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800db36:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800db3a:	2d00      	cmp	r5, #0
 800db3c:	d042      	beq.n	800dbc4 <prvInitialiseNewTask+0xb8>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db3e:	f04f 0c00 	mov.w	ip, #0
 800db42:	f1bc 0f0f 	cmp.w	ip, #15
 800db46:	d809      	bhi.n	800db5c <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800db48:	f815 300c 	ldrb.w	r3, [r5, ip]
 800db4c:	eb04 020c 	add.w	r2, r4, ip
 800db50:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800db54:	b113      	cbz	r3, 800db5c <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db56:	f10c 0c01 	add.w	ip, ip, #1
 800db5a:	e7f2      	b.n	800db42 <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800db5c:	2300      	movs	r3, #0
 800db5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800db62:	2e37      	cmp	r6, #55	@ 0x37
 800db64:	d900      	bls.n	800db68 <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800db66:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800db68:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800db6a:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800db6c:	2500      	movs	r5, #0
 800db6e:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800db70:	1d20      	adds	r0, r4, #4
 800db72:	f7ff fa00 	bl	800cf76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db76:	f104 0018 	add.w	r0, r4, #24
 800db7a:	f7ff f9fc 	bl	800cf76 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db7e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db80:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 800db84:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800db86:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800db88:	f8c4 50a0 	str.w	r5, [r4, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db8c:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800db90:	224c      	movs	r2, #76	@ 0x4c
 800db92:	4629      	mov	r1, r5
 800db94:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 800db98:	f011 f9ce 	bl	801ef38 <memset>
 800db9c:	4b0b      	ldr	r3, [pc, #44]	@ (800dbcc <prvInitialiseNewTask+0xc0>)
 800db9e:	65a3      	str	r3, [r4, #88]	@ 0x58
 800dba0:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dba4:	65e2      	str	r2, [r4, #92]	@ 0x5c
 800dba6:	33d0      	adds	r3, #208	@ 0xd0
 800dba8:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dbaa:	464a      	mov	r2, r9
 800dbac:	4641      	mov	r1, r8
 800dbae:	4638      	mov	r0, r7
 800dbb0:	f000 ffc4 	bl	800eb3c <pxPortInitialiseStack>
 800dbb4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800dbb6:	f1ba 0f00 	cmp.w	sl, #0
 800dbba:	d001      	beq.n	800dbc0 <prvInitialiseNewTask+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dbbc:	f8ca 4000 	str.w	r4, [sl]
}
 800dbc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800dbca:	e7ca      	b.n	800db62 <prvInitialiseNewTask+0x56>
 800dbcc:	2400740c 	.word	0x2400740c

0800dbd0 <prvInitialiseTaskLists>:
{
 800dbd0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dbd2:	2400      	movs	r4, #0
 800dbd4:	e007      	b.n	800dbe6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dbd6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800dbda:	0093      	lsls	r3, r2, #2
 800dbdc:	480e      	ldr	r0, [pc, #56]	@ (800dc18 <prvInitialiseTaskLists+0x48>)
 800dbde:	4418      	add	r0, r3
 800dbe0:	f7ff f9be 	bl	800cf60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dbe4:	3401      	adds	r4, #1
 800dbe6:	2c37      	cmp	r4, #55	@ 0x37
 800dbe8:	d9f5      	bls.n	800dbd6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800dbea:	4d0c      	ldr	r5, [pc, #48]	@ (800dc1c <prvInitialiseTaskLists+0x4c>)
 800dbec:	4628      	mov	r0, r5
 800dbee:	f7ff f9b7 	bl	800cf60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dbf2:	4c0b      	ldr	r4, [pc, #44]	@ (800dc20 <prvInitialiseTaskLists+0x50>)
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	f7ff f9b3 	bl	800cf60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dbfa:	480a      	ldr	r0, [pc, #40]	@ (800dc24 <prvInitialiseTaskLists+0x54>)
 800dbfc:	f7ff f9b0 	bl	800cf60 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800dc00:	4809      	ldr	r0, [pc, #36]	@ (800dc28 <prvInitialiseTaskLists+0x58>)
 800dc02:	f7ff f9ad 	bl	800cf60 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800dc06:	4809      	ldr	r0, [pc, #36]	@ (800dc2c <prvInitialiseTaskLists+0x5c>)
 800dc08:	f7ff f9aa 	bl	800cf60 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800dc0c:	4b08      	ldr	r3, [pc, #32]	@ (800dc30 <prvInitialiseTaskLists+0x60>)
 800dc0e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dc10:	4b08      	ldr	r3, [pc, #32]	@ (800dc34 <prvInitialiseTaskLists+0x64>)
 800dc12:	601c      	str	r4, [r3, #0]
}
 800dc14:	bd38      	pop	{r3, r4, r5, pc}
 800dc16:	bf00      	nop
 800dc18:	2400321c 	.word	0x2400321c
 800dc1c:	24003208 	.word	0x24003208
 800dc20:	240031f4 	.word	0x240031f4
 800dc24:	240031d8 	.word	0x240031d8
 800dc28:	240031c4 	.word	0x240031c4
 800dc2c:	240031ac 	.word	0x240031ac
 800dc30:	240031f0 	.word	0x240031f0
 800dc34:	240031ec 	.word	0x240031ec

0800dc38 <prvAddNewTaskToReadyList>:
{
 800dc38:	b510      	push	{r4, lr}
 800dc3a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800dc3c:	f000 ffaa 	bl	800eb94 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800dc40:	4a22      	ldr	r2, [pc, #136]	@ (800dccc <prvAddNewTaskToReadyList+0x94>)
 800dc42:	6813      	ldr	r3, [r2, #0]
 800dc44:	3301      	adds	r3, #1
 800dc46:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dc48:	4b21      	ldr	r3, [pc, #132]	@ (800dcd0 <prvAddNewTaskToReadyList+0x98>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	b15b      	cbz	r3, 800dc66 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800dc4e:	4b21      	ldr	r3, [pc, #132]	@ (800dcd4 <prvAddNewTaskToReadyList+0x9c>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	b96b      	cbnz	r3, 800dc70 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc54:	4b1e      	ldr	r3, [pc, #120]	@ (800dcd0 <prvAddNewTaskToReadyList+0x98>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc5a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d807      	bhi.n	800dc70 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800dc60:	4b1b      	ldr	r3, [pc, #108]	@ (800dcd0 <prvAddNewTaskToReadyList+0x98>)
 800dc62:	601c      	str	r4, [r3, #0]
 800dc64:	e004      	b.n	800dc70 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800dc66:	4b1a      	ldr	r3, [pc, #104]	@ (800dcd0 <prvAddNewTaskToReadyList+0x98>)
 800dc68:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dc6a:	6813      	ldr	r3, [r2, #0]
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d029      	beq.n	800dcc4 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800dc70:	4a19      	ldr	r2, [pc, #100]	@ (800dcd8 <prvAddNewTaskToReadyList+0xa0>)
 800dc72:	6813      	ldr	r3, [r2, #0]
 800dc74:	3301      	adds	r3, #1
 800dc76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dc78:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800dc7a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800dc7c:	4b17      	ldr	r3, [pc, #92]	@ (800dcdc <prvAddNewTaskToReadyList+0xa4>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4298      	cmp	r0, r3
 800dc82:	d901      	bls.n	800dc88 <prvAddNewTaskToReadyList+0x50>
 800dc84:	4b15      	ldr	r3, [pc, #84]	@ (800dcdc <prvAddNewTaskToReadyList+0xa4>)
 800dc86:	6018      	str	r0, [r3, #0]
 800dc88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dc8c:	1d21      	adds	r1, r4, #4
 800dc8e:	4b14      	ldr	r3, [pc, #80]	@ (800dce0 <prvAddNewTaskToReadyList+0xa8>)
 800dc90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dc94:	f7ff f972 	bl	800cf7c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800dc98:	f000 ff9e 	bl	800ebd8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800dc9c:	4b0d      	ldr	r3, [pc, #52]	@ (800dcd4 <prvAddNewTaskToReadyList+0x9c>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	b17b      	cbz	r3, 800dcc2 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dca2:	4b0b      	ldr	r3, [pc, #44]	@ (800dcd0 <prvAddNewTaskToReadyList+0x98>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dca8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d209      	bcs.n	800dcc2 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800dcae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dcb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcb6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dcba:	f3bf 8f4f 	dsb	sy
 800dcbe:	f3bf 8f6f 	isb	sy
}
 800dcc2:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800dcc4:	f7ff ff84 	bl	800dbd0 <prvInitialiseTaskLists>
 800dcc8:	e7d2      	b.n	800dc70 <prvAddNewTaskToReadyList+0x38>
 800dcca:	bf00      	nop
 800dccc:	240031a8 	.word	0x240031a8
 800dcd0:	2400367c 	.word	0x2400367c
 800dcd4:	2400319c 	.word	0x2400319c
 800dcd8:	2400318c 	.word	0x2400318c
 800dcdc:	240031a0 	.word	0x240031a0
 800dce0:	2400321c 	.word	0x2400321c

0800dce4 <prvDeleteTCB>:
	{
 800dce4:	b510      	push	{r4, lr}
 800dce6:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dce8:	3054      	adds	r0, #84	@ 0x54
 800dcea:	f011 f95d 	bl	801efa8 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dcee:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 800dcf2:	b163      	cbz	r3, 800dd0e <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d011      	beq.n	800dd1c <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dcf8:	2b02      	cmp	r3, #2
 800dcfa:	d00e      	beq.n	800dd1a <prvDeleteTCB+0x36>
 800dcfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd00:	f383 8811 	msr	BASEPRI, r3
 800dd04:	f3bf 8f6f 	isb	sy
 800dd08:	f3bf 8f4f 	dsb	sy
 800dd0c:	e7fe      	b.n	800dd0c <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800dd0e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800dd10:	f001 f97a 	bl	800f008 <vPortFree>
				vPortFree( pxTCB );
 800dd14:	4620      	mov	r0, r4
 800dd16:	f001 f977 	bl	800f008 <vPortFree>
	}
 800dd1a:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	f001 f973 	bl	800f008 <vPortFree>
 800dd22:	e7fa      	b.n	800dd1a <prvDeleteTCB+0x36>

0800dd24 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd24:	4b0f      	ldr	r3, [pc, #60]	@ (800dd64 <prvCheckTasksWaitingTermination+0x40>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	b1d3      	cbz	r3, 800dd60 <prvCheckTasksWaitingTermination+0x3c>
{
 800dd2a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800dd2c:	f000 ff32 	bl	800eb94 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd30:	4b0d      	ldr	r3, [pc, #52]	@ (800dd68 <prvCheckTasksWaitingTermination+0x44>)
 800dd32:	68db      	ldr	r3, [r3, #12]
 800dd34:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd36:	1d20      	adds	r0, r4, #4
 800dd38:	f7ff f944 	bl	800cfc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dd3c:	4a0b      	ldr	r2, [pc, #44]	@ (800dd6c <prvCheckTasksWaitingTermination+0x48>)
 800dd3e:	6813      	ldr	r3, [r2, #0]
 800dd40:	3b01      	subs	r3, #1
 800dd42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dd44:	4a07      	ldr	r2, [pc, #28]	@ (800dd64 <prvCheckTasksWaitingTermination+0x40>)
 800dd46:	6813      	ldr	r3, [r2, #0]
 800dd48:	3b01      	subs	r3, #1
 800dd4a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800dd4c:	f000 ff44 	bl	800ebd8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800dd50:	4620      	mov	r0, r4
 800dd52:	f7ff ffc7 	bl	800dce4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd56:	4b03      	ldr	r3, [pc, #12]	@ (800dd64 <prvCheckTasksWaitingTermination+0x40>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d1e6      	bne.n	800dd2c <prvCheckTasksWaitingTermination+0x8>
}
 800dd5e:	bd10      	pop	{r4, pc}
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	240031c0 	.word	0x240031c0
 800dd68:	240031c4 	.word	0x240031c4
 800dd6c:	240031a8 	.word	0x240031a8

0800dd70 <prvIdleTask>:
{
 800dd70:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800dd72:	f7ff ffd7 	bl	800dd24 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dd76:	4b07      	ldr	r3, [pc, #28]	@ (800dd94 <prvIdleTask+0x24>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d9f9      	bls.n	800dd72 <prvIdleTask+0x2>
				taskYIELD();
 800dd7e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dd82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd86:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dd8a:	f3bf 8f4f 	dsb	sy
 800dd8e:	f3bf 8f6f 	isb	sy
 800dd92:	e7ee      	b.n	800dd72 <prvIdleTask+0x2>
 800dd94:	2400321c 	.word	0x2400321c

0800dd98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dd98:	b570      	push	{r4, r5, r6, lr}
 800dd9a:	4604      	mov	r4, r0
 800dd9c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dd9e:	4b19      	ldr	r3, [pc, #100]	@ (800de04 <prvAddCurrentTaskToDelayedList+0x6c>)
 800dda0:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dda2:	4b19      	ldr	r3, [pc, #100]	@ (800de08 <prvAddCurrentTaskToDelayedList+0x70>)
 800dda4:	6818      	ldr	r0, [r3, #0]
 800dda6:	3004      	adds	r0, #4
 800dda8:	f7ff f90c 	bl	800cfc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ddac:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ddb0:	bf14      	ite	ne
 800ddb2:	2300      	movne	r3, #0
 800ddb4:	2301      	moveq	r3, #1
 800ddb6:	2d00      	cmp	r5, #0
 800ddb8:	bf08      	it	eq
 800ddba:	2300      	moveq	r3, #0
 800ddbc:	b96b      	cbnz	r3, 800ddda <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ddbe:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ddc0:	4b11      	ldr	r3, [pc, #68]	@ (800de08 <prvAddCurrentTaskToDelayedList+0x70>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800ddc6:	42a6      	cmp	r6, r4
 800ddc8:	d90e      	bls.n	800dde8 <prvAddCurrentTaskToDelayedList+0x50>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddca:	4b10      	ldr	r3, [pc, #64]	@ (800de0c <prvAddCurrentTaskToDelayedList+0x74>)
 800ddcc:	6818      	ldr	r0, [r3, #0]
 800ddce:	4b0e      	ldr	r3, [pc, #56]	@ (800de08 <prvAddCurrentTaskToDelayedList+0x70>)
 800ddd0:	6819      	ldr	r1, [r3, #0]
 800ddd2:	3104      	adds	r1, #4
 800ddd4:	f7ff f8dd 	bl	800cf92 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ddd8:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddda:	4b0b      	ldr	r3, [pc, #44]	@ (800de08 <prvAddCurrentTaskToDelayedList+0x70>)
 800dddc:	6819      	ldr	r1, [r3, #0]
 800ddde:	3104      	adds	r1, #4
 800dde0:	480b      	ldr	r0, [pc, #44]	@ (800de10 <prvAddCurrentTaskToDelayedList+0x78>)
 800dde2:	f7ff f8cb 	bl	800cf7c <vListInsertEnd>
 800dde6:	e7f7      	b.n	800ddd8 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dde8:	4b0a      	ldr	r3, [pc, #40]	@ (800de14 <prvAddCurrentTaskToDelayedList+0x7c>)
 800ddea:	6818      	ldr	r0, [r3, #0]
 800ddec:	4b06      	ldr	r3, [pc, #24]	@ (800de08 <prvAddCurrentTaskToDelayedList+0x70>)
 800ddee:	6819      	ldr	r1, [r3, #0]
 800ddf0:	3104      	adds	r1, #4
 800ddf2:	f7ff f8ce 	bl	800cf92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ddf6:	4b08      	ldr	r3, [pc, #32]	@ (800de18 <prvAddCurrentTaskToDelayedList+0x80>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	42a3      	cmp	r3, r4
 800ddfc:	d9ec      	bls.n	800ddd8 <prvAddCurrentTaskToDelayedList+0x40>
					xNextTaskUnblockTime = xTimeToWake;
 800ddfe:	4b06      	ldr	r3, [pc, #24]	@ (800de18 <prvAddCurrentTaskToDelayedList+0x80>)
 800de00:	601c      	str	r4, [r3, #0]
}
 800de02:	e7e9      	b.n	800ddd8 <prvAddCurrentTaskToDelayedList+0x40>
 800de04:	240031a4 	.word	0x240031a4
 800de08:	2400367c 	.word	0x2400367c
 800de0c:	240031ec 	.word	0x240031ec
 800de10:	240031ac 	.word	0x240031ac
 800de14:	240031f0 	.word	0x240031f0
 800de18:	24003188 	.word	0x24003188

0800de1c <xTaskCreateStatic>:
	{
 800de1c:	b530      	push	{r4, r5, lr}
 800de1e:	b087      	sub	sp, #28
 800de20:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800de22:	b17c      	cbz	r4, 800de44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800de24:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800de26:	b1b5      	cbz	r5, 800de56 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800de28:	25a8      	movs	r5, #168	@ 0xa8
 800de2a:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800de2c:	9d04      	ldr	r5, [sp, #16]
 800de2e:	2da8      	cmp	r5, #168	@ 0xa8
 800de30:	d01a      	beq.n	800de68 <xTaskCreateStatic+0x4c>
 800de32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de36:	f383 8811 	msr	BASEPRI, r3
 800de3a:	f3bf 8f6f 	isb	sy
 800de3e:	f3bf 8f4f 	dsb	sy
 800de42:	e7fe      	b.n	800de42 <xTaskCreateStatic+0x26>
 800de44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de48:	f383 8811 	msr	BASEPRI, r3
 800de4c:	f3bf 8f6f 	isb	sy
 800de50:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800de54:	e7fe      	b.n	800de54 <xTaskCreateStatic+0x38>
 800de56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de5a:	f383 8811 	msr	BASEPRI, r3
 800de5e:	f3bf 8f6f 	isb	sy
 800de62:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800de66:	e7fe      	b.n	800de66 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800de68:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800de6a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800de6c:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de6e:	2402      	movs	r4, #2
 800de70:	f885 40a5 	strb.w	r4, [r5, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de74:	2400      	movs	r4, #0
 800de76:	9403      	str	r4, [sp, #12]
 800de78:	9502      	str	r5, [sp, #8]
 800de7a:	ac05      	add	r4, sp, #20
 800de7c:	9401      	str	r4, [sp, #4]
 800de7e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800de80:	9400      	str	r4, [sp, #0]
 800de82:	f7ff fe43 	bl	800db0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de86:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800de88:	f7ff fed6 	bl	800dc38 <prvAddNewTaskToReadyList>
	}
 800de8c:	9805      	ldr	r0, [sp, #20]
 800de8e:	b007      	add	sp, #28
 800de90:	bd30      	pop	{r4, r5, pc}

0800de92 <xTaskCreate>:
	{
 800de92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de96:	b085      	sub	sp, #20
 800de98:	4607      	mov	r7, r0
 800de9a:	4688      	mov	r8, r1
 800de9c:	4614      	mov	r4, r2
 800de9e:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dea0:	0090      	lsls	r0, r2, #2
 800dea2:	f001 f82f 	bl	800ef04 <pvPortMalloc>
			if( pxStack != NULL )
 800dea6:	b308      	cbz	r0, 800deec <xTaskCreate+0x5a>
 800dea8:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800deaa:	20a8      	movs	r0, #168	@ 0xa8
 800deac:	f001 f82a 	bl	800ef04 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800deb0:	4605      	mov	r5, r0
 800deb2:	b1a8      	cbz	r0, 800dee0 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800deb4:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800deb8:	2300      	movs	r3, #0
 800deba:	f880 30a5 	strb.w	r3, [r0, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800debe:	9303      	str	r3, [sp, #12]
 800dec0:	9002      	str	r0, [sp, #8]
 800dec2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dec4:	9301      	str	r3, [sp, #4]
 800dec6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dec8:	9300      	str	r3, [sp, #0]
 800deca:	4633      	mov	r3, r6
 800decc:	4622      	mov	r2, r4
 800dece:	4641      	mov	r1, r8
 800ded0:	4638      	mov	r0, r7
 800ded2:	f7ff fe1b 	bl	800db0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ded6:	4628      	mov	r0, r5
 800ded8:	f7ff feae 	bl	800dc38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dedc:	2001      	movs	r0, #1
 800dede:	e007      	b.n	800def0 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800dee0:	4648      	mov	r0, r9
 800dee2:	f001 f891 	bl	800f008 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dee6:	f04f 30ff 	mov.w	r0, #4294967295
 800deea:	e001      	b.n	800def0 <xTaskCreate+0x5e>
 800deec:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800def0:	b005      	add	sp, #20
 800def2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800def8 <vTaskStartScheduler>:
{
 800def8:	b510      	push	{r4, lr}
 800defa:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800defc:	2400      	movs	r4, #0
 800defe:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800df00:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800df02:	aa07      	add	r2, sp, #28
 800df04:	a906      	add	r1, sp, #24
 800df06:	a805      	add	r0, sp, #20
 800df08:	f7ff f812 	bl	800cf30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800df0c:	9b05      	ldr	r3, [sp, #20]
 800df0e:	9302      	str	r3, [sp, #8]
 800df10:	9b06      	ldr	r3, [sp, #24]
 800df12:	9301      	str	r3, [sp, #4]
 800df14:	9400      	str	r4, [sp, #0]
 800df16:	4623      	mov	r3, r4
 800df18:	9a07      	ldr	r2, [sp, #28]
 800df1a:	491a      	ldr	r1, [pc, #104]	@ (800df84 <vTaskStartScheduler+0x8c>)
 800df1c:	481a      	ldr	r0, [pc, #104]	@ (800df88 <vTaskStartScheduler+0x90>)
 800df1e:	f7ff ff7d 	bl	800de1c <xTaskCreateStatic>
 800df22:	4b1a      	ldr	r3, [pc, #104]	@ (800df8c <vTaskStartScheduler+0x94>)
 800df24:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800df26:	b1e8      	cbz	r0, 800df64 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 800df28:	f000 fc0a 	bl	800e740 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800df2c:	2801      	cmp	r0, #1
 800df2e:	d11a      	bne.n	800df66 <vTaskStartScheduler+0x6e>
 800df30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df34:	f383 8811 	msr	BASEPRI, r3
 800df38:	f3bf 8f6f 	isb	sy
 800df3c:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df40:	4b13      	ldr	r3, [pc, #76]	@ (800df90 <vTaskStartScheduler+0x98>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	3354      	adds	r3, #84	@ 0x54
 800df46:	4a13      	ldr	r2, [pc, #76]	@ (800df94 <vTaskStartScheduler+0x9c>)
 800df48:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800df4a:	4b13      	ldr	r3, [pc, #76]	@ (800df98 <vTaskStartScheduler+0xa0>)
 800df4c:	f04f 32ff 	mov.w	r2, #4294967295
 800df50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800df52:	4b12      	ldr	r3, [pc, #72]	@ (800df9c <vTaskStartScheduler+0xa4>)
 800df54:	2201      	movs	r2, #1
 800df56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800df58:	4b11      	ldr	r3, [pc, #68]	@ (800dfa0 <vTaskStartScheduler+0xa8>)
 800df5a:	2200      	movs	r2, #0
 800df5c:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800df5e:	f000 feb3 	bl	800ecc8 <xPortStartScheduler>
 800df62:	e003      	b.n	800df6c <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 800df64:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800df66:	f1b0 3fff 	cmp.w	r0, #4294967295
 800df6a:	d001      	beq.n	800df70 <vTaskStartScheduler+0x78>
}
 800df6c:	b008      	add	sp, #32
 800df6e:	bd10      	pop	{r4, pc}
 800df70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df74:	f383 8811 	msr	BASEPRI, r3
 800df78:	f3bf 8f6f 	isb	sy
 800df7c:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800df80:	e7fe      	b.n	800df80 <vTaskStartScheduler+0x88>
 800df82:	bf00      	nop
 800df84:	0801f434 	.word	0x0801f434
 800df88:	0800dd71 	.word	0x0800dd71
 800df8c:	24003184 	.word	0x24003184
 800df90:	2400367c 	.word	0x2400367c
 800df94:	24000014 	.word	0x24000014
 800df98:	24003188 	.word	0x24003188
 800df9c:	2400319c 	.word	0x2400319c
 800dfa0:	240031a4 	.word	0x240031a4

0800dfa4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800dfa4:	4a02      	ldr	r2, [pc, #8]	@ (800dfb0 <vTaskSuspendAll+0xc>)
 800dfa6:	6813      	ldr	r3, [r2, #0]
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	6013      	str	r3, [r2, #0]
}
 800dfac:	4770      	bx	lr
 800dfae:	bf00      	nop
 800dfb0:	24003180 	.word	0x24003180

0800dfb4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800dfb4:	4b01      	ldr	r3, [pc, #4]	@ (800dfbc <xTaskGetTickCount+0x8>)
 800dfb6:	6818      	ldr	r0, [r3, #0]
}
 800dfb8:	4770      	bx	lr
 800dfba:	bf00      	nop
 800dfbc:	240031a4 	.word	0x240031a4

0800dfc0 <xTaskIncrementTick>:
{
 800dfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfc2:	4b3a      	ldr	r3, [pc, #232]	@ (800e0ac <xTaskIncrementTick+0xec>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d169      	bne.n	800e09e <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dfca:	4b39      	ldr	r3, [pc, #228]	@ (800e0b0 <xTaskIncrementTick+0xf0>)
 800dfcc:	681d      	ldr	r5, [r3, #0]
 800dfce:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800dfd0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dfd2:	b9c5      	cbnz	r5, 800e006 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800dfd4:	4b37      	ldr	r3, [pc, #220]	@ (800e0b4 <xTaskIncrementTick+0xf4>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	b143      	cbz	r3, 800dfee <xTaskIncrementTick+0x2e>
 800dfdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfe0:	f383 8811 	msr	BASEPRI, r3
 800dfe4:	f3bf 8f6f 	isb	sy
 800dfe8:	f3bf 8f4f 	dsb	sy
 800dfec:	e7fe      	b.n	800dfec <xTaskIncrementTick+0x2c>
 800dfee:	4a31      	ldr	r2, [pc, #196]	@ (800e0b4 <xTaskIncrementTick+0xf4>)
 800dff0:	6811      	ldr	r1, [r2, #0]
 800dff2:	4b31      	ldr	r3, [pc, #196]	@ (800e0b8 <xTaskIncrementTick+0xf8>)
 800dff4:	6818      	ldr	r0, [r3, #0]
 800dff6:	6010      	str	r0, [r2, #0]
 800dff8:	6019      	str	r1, [r3, #0]
 800dffa:	4a30      	ldr	r2, [pc, #192]	@ (800e0bc <xTaskIncrementTick+0xfc>)
 800dffc:	6813      	ldr	r3, [r2, #0]
 800dffe:	3301      	adds	r3, #1
 800e000:	6013      	str	r3, [r2, #0]
 800e002:	f7ff fd6d 	bl	800dae0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e006:	4b2e      	ldr	r3, [pc, #184]	@ (800e0c0 <xTaskIncrementTick+0x100>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	42ab      	cmp	r3, r5
 800e00c:	d93d      	bls.n	800e08a <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800e00e:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e010:	4b2c      	ldr	r3, [pc, #176]	@ (800e0c4 <xTaskIncrementTick+0x104>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e016:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e01a:	009a      	lsls	r2, r3, #2
 800e01c:	4b2a      	ldr	r3, [pc, #168]	@ (800e0c8 <xTaskIncrementTick+0x108>)
 800e01e:	589b      	ldr	r3, [r3, r2]
 800e020:	2b01      	cmp	r3, #1
 800e022:	d900      	bls.n	800e026 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800e024:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800e026:	4b29      	ldr	r3, [pc, #164]	@ (800e0cc <xTaskIncrementTick+0x10c>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d03c      	beq.n	800e0a8 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800e02e:	2701      	movs	r7, #1
	return xSwitchRequired;
 800e030:	e03a      	b.n	800e0a8 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800e032:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e034:	4b1f      	ldr	r3, [pc, #124]	@ (800e0b4 <xTaskIncrementTick+0xf4>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	b343      	cbz	r3, 800e08e <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e03c:	4b1d      	ldr	r3, [pc, #116]	@ (800e0b4 <xTaskIncrementTick+0xf4>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	68db      	ldr	r3, [r3, #12]
 800e042:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e044:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800e046:	429d      	cmp	r5, r3
 800e048:	d326      	bcc.n	800e098 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e04a:	1d26      	adds	r6, r4, #4
 800e04c:	4630      	mov	r0, r6
 800e04e:	f7fe ffb9 	bl	800cfc4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e052:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e054:	b11b      	cbz	r3, 800e05e <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e056:	f104 0018 	add.w	r0, r4, #24
 800e05a:	f7fe ffb3 	bl	800cfc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e05e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e060:	4a1b      	ldr	r2, [pc, #108]	@ (800e0d0 <xTaskIncrementTick+0x110>)
 800e062:	6812      	ldr	r2, [r2, #0]
 800e064:	4293      	cmp	r3, r2
 800e066:	d901      	bls.n	800e06c <xTaskIncrementTick+0xac>
 800e068:	4a19      	ldr	r2, [pc, #100]	@ (800e0d0 <xTaskIncrementTick+0x110>)
 800e06a:	6013      	str	r3, [r2, #0]
 800e06c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e070:	009a      	lsls	r2, r3, #2
 800e072:	4631      	mov	r1, r6
 800e074:	4814      	ldr	r0, [pc, #80]	@ (800e0c8 <xTaskIncrementTick+0x108>)
 800e076:	4410      	add	r0, r2
 800e078:	f7fe ff80 	bl	800cf7c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e07c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e07e:	4b11      	ldr	r3, [pc, #68]	@ (800e0c4 <xTaskIncrementTick+0x104>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e084:	429a      	cmp	r2, r3
 800e086:	d2d4      	bcs.n	800e032 <xTaskIncrementTick+0x72>
 800e088:	e7d4      	b.n	800e034 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800e08a:	2700      	movs	r7, #0
 800e08c:	e7d2      	b.n	800e034 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e08e:	4b0c      	ldr	r3, [pc, #48]	@ (800e0c0 <xTaskIncrementTick+0x100>)
 800e090:	f04f 32ff 	mov.w	r2, #4294967295
 800e094:	601a      	str	r2, [r3, #0]
					break;
 800e096:	e7bb      	b.n	800e010 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800e098:	4a09      	ldr	r2, [pc, #36]	@ (800e0c0 <xTaskIncrementTick+0x100>)
 800e09a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e09c:	e7b8      	b.n	800e010 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800e09e:	4a0d      	ldr	r2, [pc, #52]	@ (800e0d4 <xTaskIncrementTick+0x114>)
 800e0a0:	6813      	ldr	r3, [r2, #0]
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e0a6:	2700      	movs	r7, #0
}
 800e0a8:	4638      	mov	r0, r7
 800e0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0ac:	24003180 	.word	0x24003180
 800e0b0:	240031a4 	.word	0x240031a4
 800e0b4:	240031f0 	.word	0x240031f0
 800e0b8:	240031ec 	.word	0x240031ec
 800e0bc:	24003190 	.word	0x24003190
 800e0c0:	24003188 	.word	0x24003188
 800e0c4:	2400367c 	.word	0x2400367c
 800e0c8:	2400321c 	.word	0x2400321c
 800e0cc:	24003194 	.word	0x24003194
 800e0d0:	240031a0 	.word	0x240031a0
 800e0d4:	24003198 	.word	0x24003198

0800e0d8 <xTaskResumeAll>:
{
 800e0d8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800e0da:	4b35      	ldr	r3, [pc, #212]	@ (800e1b0 <xTaskResumeAll+0xd8>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	b943      	cbnz	r3, 800e0f2 <xTaskResumeAll+0x1a>
 800e0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0e4:	f383 8811 	msr	BASEPRI, r3
 800e0e8:	f3bf 8f6f 	isb	sy
 800e0ec:	f3bf 8f4f 	dsb	sy
 800e0f0:	e7fe      	b.n	800e0f0 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800e0f2:	f000 fd4f 	bl	800eb94 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e0f6:	4b2e      	ldr	r3, [pc, #184]	@ (800e1b0 <xTaskResumeAll+0xd8>)
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	3a01      	subs	r2, #1
 800e0fc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d14f      	bne.n	800e1a4 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e104:	4b2b      	ldr	r3, [pc, #172]	@ (800e1b4 <xTaskResumeAll+0xdc>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	b90b      	cbnz	r3, 800e10e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800e10a:	2400      	movs	r4, #0
 800e10c:	e04b      	b.n	800e1a6 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800e10e:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e110:	4b29      	ldr	r3, [pc, #164]	@ (800e1b8 <xTaskResumeAll+0xe0>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	b31b      	cbz	r3, 800e15e <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e116:	4b28      	ldr	r3, [pc, #160]	@ (800e1b8 <xTaskResumeAll+0xe0>)
 800e118:	68db      	ldr	r3, [r3, #12]
 800e11a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e11c:	f104 0018 	add.w	r0, r4, #24
 800e120:	f7fe ff50 	bl	800cfc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e124:	1d25      	adds	r5, r4, #4
 800e126:	4628      	mov	r0, r5
 800e128:	f7fe ff4c 	bl	800cfc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e12c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800e12e:	4b23      	ldr	r3, [pc, #140]	@ (800e1bc <xTaskResumeAll+0xe4>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	4298      	cmp	r0, r3
 800e134:	d901      	bls.n	800e13a <xTaskResumeAll+0x62>
 800e136:	4b21      	ldr	r3, [pc, #132]	@ (800e1bc <xTaskResumeAll+0xe4>)
 800e138:	6018      	str	r0, [r3, #0]
 800e13a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e13e:	4629      	mov	r1, r5
 800e140:	4b1f      	ldr	r3, [pc, #124]	@ (800e1c0 <xTaskResumeAll+0xe8>)
 800e142:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e146:	f7fe ff19 	bl	800cf7c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e14a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e14c:	4b1d      	ldr	r3, [pc, #116]	@ (800e1c4 <xTaskResumeAll+0xec>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e152:	429a      	cmp	r2, r3
 800e154:	d3dc      	bcc.n	800e110 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800e156:	4b1c      	ldr	r3, [pc, #112]	@ (800e1c8 <xTaskResumeAll+0xf0>)
 800e158:	2201      	movs	r2, #1
 800e15a:	601a      	str	r2, [r3, #0]
 800e15c:	e7d8      	b.n	800e110 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800e15e:	b10c      	cbz	r4, 800e164 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800e160:	f7ff fcbe 	bl	800dae0 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e164:	4b19      	ldr	r3, [pc, #100]	@ (800e1cc <xTaskResumeAll+0xf4>)
 800e166:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800e168:	b984      	cbnz	r4, 800e18c <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800e16a:	4b17      	ldr	r3, [pc, #92]	@ (800e1c8 <xTaskResumeAll+0xf0>)
 800e16c:	681c      	ldr	r4, [r3, #0]
 800e16e:	b1d4      	cbz	r4, 800e1a6 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800e170:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e174:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e178:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e17c:	f3bf 8f4f 	dsb	sy
 800e180:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800e184:	2401      	movs	r4, #1
 800e186:	e00e      	b.n	800e1a6 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e188:	3c01      	subs	r4, #1
 800e18a:	d007      	beq.n	800e19c <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800e18c:	f7ff ff18 	bl	800dfc0 <xTaskIncrementTick>
 800e190:	2800      	cmp	r0, #0
 800e192:	d0f9      	beq.n	800e188 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800e194:	4b0c      	ldr	r3, [pc, #48]	@ (800e1c8 <xTaskResumeAll+0xf0>)
 800e196:	2201      	movs	r2, #1
 800e198:	601a      	str	r2, [r3, #0]
 800e19a:	e7f5      	b.n	800e188 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800e19c:	4b0b      	ldr	r3, [pc, #44]	@ (800e1cc <xTaskResumeAll+0xf4>)
 800e19e:	2200      	movs	r2, #0
 800e1a0:	601a      	str	r2, [r3, #0]
 800e1a2:	e7e2      	b.n	800e16a <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800e1a4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e1a6:	f000 fd17 	bl	800ebd8 <vPortExitCritical>
}
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	bd38      	pop	{r3, r4, r5, pc}
 800e1ae:	bf00      	nop
 800e1b0:	24003180 	.word	0x24003180
 800e1b4:	240031a8 	.word	0x240031a8
 800e1b8:	240031d8 	.word	0x240031d8
 800e1bc:	240031a0 	.word	0x240031a0
 800e1c0:	2400321c 	.word	0x2400321c
 800e1c4:	2400367c 	.word	0x2400367c
 800e1c8:	24003194 	.word	0x24003194
 800e1cc:	24003198 	.word	0x24003198

0800e1d0 <vTaskDelay>:
	{
 800e1d0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e1d2:	b1a8      	cbz	r0, 800e200 <vTaskDelay+0x30>
 800e1d4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800e1d6:	4b10      	ldr	r3, [pc, #64]	@ (800e218 <vTaskDelay+0x48>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	b143      	cbz	r3, 800e1ee <vTaskDelay+0x1e>
 800e1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e0:	f383 8811 	msr	BASEPRI, r3
 800e1e4:	f3bf 8f6f 	isb	sy
 800e1e8:	f3bf 8f4f 	dsb	sy
 800e1ec:	e7fe      	b.n	800e1ec <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800e1ee:	f7ff fed9 	bl	800dfa4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e1f2:	2100      	movs	r1, #0
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	f7ff fdcf 	bl	800dd98 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e1fa:	f7ff ff6d 	bl	800e0d8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e1fe:	b948      	cbnz	r0, 800e214 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800e200:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e204:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e208:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e20c:	f3bf 8f4f 	dsb	sy
 800e210:	f3bf 8f6f 	isb	sy
	}
 800e214:	bd10      	pop	{r4, pc}
 800e216:	bf00      	nop
 800e218:	24003180 	.word	0x24003180

0800e21c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e21c:	4b22      	ldr	r3, [pc, #136]	@ (800e2a8 <vTaskSwitchContext+0x8c>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	b11b      	cbz	r3, 800e22a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800e222:	4b22      	ldr	r3, [pc, #136]	@ (800e2ac <vTaskSwitchContext+0x90>)
 800e224:	2201      	movs	r2, #1
 800e226:	601a      	str	r2, [r3, #0]
 800e228:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800e22a:	4b20      	ldr	r3, [pc, #128]	@ (800e2ac <vTaskSwitchContext+0x90>)
 800e22c:	2200      	movs	r2, #0
 800e22e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e230:	4b1f      	ldr	r3, [pc, #124]	@ (800e2b0 <vTaskSwitchContext+0x94>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800e238:	008a      	lsls	r2, r1, #2
 800e23a:	491e      	ldr	r1, [pc, #120]	@ (800e2b4 <vTaskSwitchContext+0x98>)
 800e23c:	588a      	ldr	r2, [r1, r2]
 800e23e:	b95a      	cbnz	r2, 800e258 <vTaskSwitchContext+0x3c>
 800e240:	b10b      	cbz	r3, 800e246 <vTaskSwitchContext+0x2a>
 800e242:	3b01      	subs	r3, #1
 800e244:	e7f6      	b.n	800e234 <vTaskSwitchContext+0x18>
 800e246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e24a:	f383 8811 	msr	BASEPRI, r3
 800e24e:	f3bf 8f6f 	isb	sy
 800e252:	f3bf 8f4f 	dsb	sy
 800e256:	e7fe      	b.n	800e256 <vTaskSwitchContext+0x3a>
 800e258:	4608      	mov	r0, r1
 800e25a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800e25e:	008a      	lsls	r2, r1, #2
 800e260:	4402      	add	r2, r0
 800e262:	6851      	ldr	r1, [r2, #4]
 800e264:	6849      	ldr	r1, [r1, #4]
 800e266:	6051      	str	r1, [r2, #4]
 800e268:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800e26c:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800e270:	3208      	adds	r2, #8
 800e272:	4402      	add	r2, r0
 800e274:	4291      	cmp	r1, r2
 800e276:	d00f      	beq.n	800e298 <vTaskSwitchContext+0x7c>
 800e278:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800e27c:	0091      	lsls	r1, r2, #2
 800e27e:	4a0d      	ldr	r2, [pc, #52]	@ (800e2b4 <vTaskSwitchContext+0x98>)
 800e280:	440a      	add	r2, r1
 800e282:	6852      	ldr	r2, [r2, #4]
 800e284:	68d1      	ldr	r1, [r2, #12]
 800e286:	4a0c      	ldr	r2, [pc, #48]	@ (800e2b8 <vTaskSwitchContext+0x9c>)
 800e288:	6011      	str	r1, [r2, #0]
 800e28a:	4909      	ldr	r1, [pc, #36]	@ (800e2b0 <vTaskSwitchContext+0x94>)
 800e28c:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e28e:	6813      	ldr	r3, [r2, #0]
 800e290:	3354      	adds	r3, #84	@ 0x54
 800e292:	4a0a      	ldr	r2, [pc, #40]	@ (800e2bc <vTaskSwitchContext+0xa0>)
 800e294:	6013      	str	r3, [r2, #0]
}
 800e296:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e298:	6848      	ldr	r0, [r1, #4]
 800e29a:	4662      	mov	r2, ip
 800e29c:	0091      	lsls	r1, r2, #2
 800e29e:	4a05      	ldr	r2, [pc, #20]	@ (800e2b4 <vTaskSwitchContext+0x98>)
 800e2a0:	440a      	add	r2, r1
 800e2a2:	6050      	str	r0, [r2, #4]
 800e2a4:	e7e8      	b.n	800e278 <vTaskSwitchContext+0x5c>
 800e2a6:	bf00      	nop
 800e2a8:	24003180 	.word	0x24003180
 800e2ac:	24003194 	.word	0x24003194
 800e2b0:	240031a0 	.word	0x240031a0
 800e2b4:	2400321c 	.word	0x2400321c
 800e2b8:	2400367c 	.word	0x2400367c
 800e2bc:	24000014 	.word	0x24000014

0800e2c0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800e2c0:	b158      	cbz	r0, 800e2da <vTaskPlaceOnEventList+0x1a>
{
 800e2c2:	b510      	push	{r4, lr}
 800e2c4:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2c6:	4a09      	ldr	r2, [pc, #36]	@ (800e2ec <vTaskPlaceOnEventList+0x2c>)
 800e2c8:	6811      	ldr	r1, [r2, #0]
 800e2ca:	3118      	adds	r1, #24
 800e2cc:	f7fe fe61 	bl	800cf92 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e2d0:	2101      	movs	r1, #1
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	f7ff fd60 	bl	800dd98 <prvAddCurrentTaskToDelayedList>
}
 800e2d8:	bd10      	pop	{r4, pc}
 800e2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2de:	f383 8811 	msr	BASEPRI, r3
 800e2e2:	f3bf 8f6f 	isb	sy
 800e2e6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800e2ea:	e7fe      	b.n	800e2ea <vTaskPlaceOnEventList+0x2a>
 800e2ec:	2400367c 	.word	0x2400367c

0800e2f0 <vTaskPlaceOnEventListRestricted>:
	{
 800e2f0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800e2f2:	b170      	cbz	r0, 800e312 <vTaskPlaceOnEventListRestricted+0x22>
 800e2f4:	460d      	mov	r5, r1
 800e2f6:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2f8:	4a0a      	ldr	r2, [pc, #40]	@ (800e324 <vTaskPlaceOnEventListRestricted+0x34>)
 800e2fa:	6811      	ldr	r1, [r2, #0]
 800e2fc:	3118      	adds	r1, #24
 800e2fe:	f7fe fe3d 	bl	800cf7c <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800e302:	b10c      	cbz	r4, 800e308 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800e304:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e308:	4621      	mov	r1, r4
 800e30a:	4628      	mov	r0, r5
 800e30c:	f7ff fd44 	bl	800dd98 <prvAddCurrentTaskToDelayedList>
	}
 800e310:	bd38      	pop	{r3, r4, r5, pc}
 800e312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e316:	f383 8811 	msr	BASEPRI, r3
 800e31a:	f3bf 8f6f 	isb	sy
 800e31e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800e322:	e7fe      	b.n	800e322 <vTaskPlaceOnEventListRestricted+0x32>
 800e324:	2400367c 	.word	0x2400367c

0800e328 <xTaskRemoveFromEventList>:
{
 800e328:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e32a:	68c3      	ldr	r3, [r0, #12]
 800e32c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800e32e:	b324      	cbz	r4, 800e37a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e330:	f104 0518 	add.w	r5, r4, #24
 800e334:	4628      	mov	r0, r5
 800e336:	f7fe fe45 	bl	800cfc4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e33a:	4b18      	ldr	r3, [pc, #96]	@ (800e39c <xTaskRemoveFromEventList+0x74>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	bb2b      	cbnz	r3, 800e38c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e340:	1d25      	adds	r5, r4, #4
 800e342:	4628      	mov	r0, r5
 800e344:	f7fe fe3e 	bl	800cfc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e348:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800e34a:	4b15      	ldr	r3, [pc, #84]	@ (800e3a0 <xTaskRemoveFromEventList+0x78>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	4298      	cmp	r0, r3
 800e350:	d901      	bls.n	800e356 <xTaskRemoveFromEventList+0x2e>
 800e352:	4b13      	ldr	r3, [pc, #76]	@ (800e3a0 <xTaskRemoveFromEventList+0x78>)
 800e354:	6018      	str	r0, [r3, #0]
 800e356:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e35a:	4629      	mov	r1, r5
 800e35c:	4b11      	ldr	r3, [pc, #68]	@ (800e3a4 <xTaskRemoveFromEventList+0x7c>)
 800e35e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e362:	f7fe fe0b 	bl	800cf7c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e366:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e368:	4b0f      	ldr	r3, [pc, #60]	@ (800e3a8 <xTaskRemoveFromEventList+0x80>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e36e:	429a      	cmp	r2, r3
 800e370:	d911      	bls.n	800e396 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800e372:	2001      	movs	r0, #1
 800e374:	4b0d      	ldr	r3, [pc, #52]	@ (800e3ac <xTaskRemoveFromEventList+0x84>)
 800e376:	6018      	str	r0, [r3, #0]
}
 800e378:	bd38      	pop	{r3, r4, r5, pc}
 800e37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e37e:	f383 8811 	msr	BASEPRI, r3
 800e382:	f3bf 8f6f 	isb	sy
 800e386:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800e38a:	e7fe      	b.n	800e38a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e38c:	4629      	mov	r1, r5
 800e38e:	4808      	ldr	r0, [pc, #32]	@ (800e3b0 <xTaskRemoveFromEventList+0x88>)
 800e390:	f7fe fdf4 	bl	800cf7c <vListInsertEnd>
 800e394:	e7e7      	b.n	800e366 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800e396:	2000      	movs	r0, #0
	return xReturn;
 800e398:	e7ee      	b.n	800e378 <xTaskRemoveFromEventList+0x50>
 800e39a:	bf00      	nop
 800e39c:	24003180 	.word	0x24003180
 800e3a0:	240031a0 	.word	0x240031a0
 800e3a4:	2400321c 	.word	0x2400321c
 800e3a8:	2400367c 	.word	0x2400367c
 800e3ac:	24003194 	.word	0x24003194
 800e3b0:	240031d8 	.word	0x240031d8

0800e3b4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e3b4:	4b03      	ldr	r3, [pc, #12]	@ (800e3c4 <vTaskInternalSetTimeOutState+0x10>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e3ba:	4b03      	ldr	r3, [pc, #12]	@ (800e3c8 <vTaskInternalSetTimeOutState+0x14>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	6043      	str	r3, [r0, #4]
}
 800e3c0:	4770      	bx	lr
 800e3c2:	bf00      	nop
 800e3c4:	24003190 	.word	0x24003190
 800e3c8:	240031a4 	.word	0x240031a4

0800e3cc <xTaskCheckForTimeOut>:
{
 800e3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800e3ce:	b1c8      	cbz	r0, 800e404 <xTaskCheckForTimeOut+0x38>
 800e3d0:	460c      	mov	r4, r1
 800e3d2:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800e3d4:	b1f9      	cbz	r1, 800e416 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800e3d6:	f000 fbdd 	bl	800eb94 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800e3da:	4b1b      	ldr	r3, [pc, #108]	@ (800e448 <xTaskCheckForTimeOut+0x7c>)
 800e3dc:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e3de:	686b      	ldr	r3, [r5, #4]
 800e3e0:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800e3e2:	6822      	ldr	r2, [r4, #0]
 800e3e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e3e8:	d026      	beq.n	800e438 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e3ea:	4e18      	ldr	r6, [pc, #96]	@ (800e44c <xTaskCheckForTimeOut+0x80>)
 800e3ec:	6836      	ldr	r6, [r6, #0]
 800e3ee:	682f      	ldr	r7, [r5, #0]
 800e3f0:	42b7      	cmp	r7, r6
 800e3f2:	d001      	beq.n	800e3f8 <xTaskCheckForTimeOut+0x2c>
 800e3f4:	428b      	cmp	r3, r1
 800e3f6:	d924      	bls.n	800e442 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e3f8:	4282      	cmp	r2, r0
 800e3fa:	d815      	bhi.n	800e428 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800e400:	2401      	movs	r4, #1
 800e402:	e01a      	b.n	800e43a <xTaskCheckForTimeOut+0x6e>
 800e404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e408:	f383 8811 	msr	BASEPRI, r3
 800e40c:	f3bf 8f6f 	isb	sy
 800e410:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800e414:	e7fe      	b.n	800e414 <xTaskCheckForTimeOut+0x48>
 800e416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e41a:	f383 8811 	msr	BASEPRI, r3
 800e41e:	f3bf 8f6f 	isb	sy
 800e422:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800e426:	e7fe      	b.n	800e426 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800e428:	1a5b      	subs	r3, r3, r1
 800e42a:	4413      	add	r3, r2
 800e42c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e42e:	4628      	mov	r0, r5
 800e430:	f7ff ffc0 	bl	800e3b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e434:	2400      	movs	r4, #0
 800e436:	e000      	b.n	800e43a <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800e438:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e43a:	f000 fbcd 	bl	800ebd8 <vPortExitCritical>
}
 800e43e:	4620      	mov	r0, r4
 800e440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800e442:	2401      	movs	r4, #1
 800e444:	e7f9      	b.n	800e43a <xTaskCheckForTimeOut+0x6e>
 800e446:	bf00      	nop
 800e448:	240031a4 	.word	0x240031a4
 800e44c:	24003190 	.word	0x24003190

0800e450 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800e450:	4b01      	ldr	r3, [pc, #4]	@ (800e458 <vTaskMissedYield+0x8>)
 800e452:	2201      	movs	r2, #1
 800e454:	601a      	str	r2, [r3, #0]
}
 800e456:	4770      	bx	lr
 800e458:	24003194 	.word	0x24003194

0800e45c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800e45c:	4b05      	ldr	r3, [pc, #20]	@ (800e474 <xTaskGetSchedulerState+0x18>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	b133      	cbz	r3, 800e470 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e462:	4b05      	ldr	r3, [pc, #20]	@ (800e478 <xTaskGetSchedulerState+0x1c>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	b10b      	cbz	r3, 800e46c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800e468:	2000      	movs	r0, #0
	}
 800e46a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800e46c:	2002      	movs	r0, #2
 800e46e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e470:	2001      	movs	r0, #1
 800e472:	4770      	bx	lr
 800e474:	2400319c 	.word	0x2400319c
 800e478:	24003180 	.word	0x24003180

0800e47c <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800e47c:	2800      	cmp	r0, #0
 800e47e:	d03e      	beq.n	800e4fe <xTaskPriorityInherit+0x82>
	{
 800e480:	b538      	push	{r3, r4, r5, lr}
 800e482:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e484:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800e486:	4a20      	ldr	r2, [pc, #128]	@ (800e508 <xTaskPriorityInherit+0x8c>)
 800e488:	6812      	ldr	r2, [r2, #0]
 800e48a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d22e      	bcs.n	800e4ee <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e490:	6982      	ldr	r2, [r0, #24]
 800e492:	2a00      	cmp	r2, #0
 800e494:	db05      	blt.n	800e4a2 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e496:	4a1c      	ldr	r2, [pc, #112]	@ (800e508 <xTaskPriorityInherit+0x8c>)
 800e498:	6812      	ldr	r2, [r2, #0]
 800e49a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e49c:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800e4a0:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e4a2:	6961      	ldr	r1, [r4, #20]
 800e4a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e4a8:	4a18      	ldr	r2, [pc, #96]	@ (800e50c <xTaskPriorityInherit+0x90>)
 800e4aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e4ae:	4299      	cmp	r1, r3
 800e4b0:	d005      	beq.n	800e4be <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e4b2:	4b15      	ldr	r3, [pc, #84]	@ (800e508 <xTaskPriorityInherit+0x8c>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 800e4ba:	2001      	movs	r0, #1
	}
 800e4bc:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4be:	1d25      	adds	r5, r4, #4
 800e4c0:	4628      	mov	r0, r5
 800e4c2:	f7fe fd7f 	bl	800cfc4 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e4c6:	4b10      	ldr	r3, [pc, #64]	@ (800e508 <xTaskPriorityInherit+0x8c>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800e4cc:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e4ce:	4b10      	ldr	r3, [pc, #64]	@ (800e510 <xTaskPriorityInherit+0x94>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	4298      	cmp	r0, r3
 800e4d4:	d901      	bls.n	800e4da <xTaskPriorityInherit+0x5e>
 800e4d6:	4b0e      	ldr	r3, [pc, #56]	@ (800e510 <xTaskPriorityInherit+0x94>)
 800e4d8:	6018      	str	r0, [r3, #0]
 800e4da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e4de:	4629      	mov	r1, r5
 800e4e0:	4b0a      	ldr	r3, [pc, #40]	@ (800e50c <xTaskPriorityInherit+0x90>)
 800e4e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e4e6:	f7fe fd49 	bl	800cf7c <vListInsertEnd>
				xReturn = pdTRUE;
 800e4ea:	2001      	movs	r0, #1
 800e4ec:	e7e6      	b.n	800e4bc <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e4ee:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800e4f0:	4b05      	ldr	r3, [pc, #20]	@ (800e508 <xTaskPriorityInherit+0x8c>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d303      	bcc.n	800e502 <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 800e4fa:	2000      	movs	r0, #0
 800e4fc:	e7de      	b.n	800e4bc <xTaskPriorityInherit+0x40>
 800e4fe:	2000      	movs	r0, #0
	}
 800e500:	4770      	bx	lr
					xReturn = pdTRUE;
 800e502:	2001      	movs	r0, #1
		return xReturn;
 800e504:	e7da      	b.n	800e4bc <xTaskPriorityInherit+0x40>
 800e506:	bf00      	nop
 800e508:	2400367c 	.word	0x2400367c
 800e50c:	2400321c 	.word	0x2400321c
 800e510:	240031a0 	.word	0x240031a0

0800e514 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800e514:	2800      	cmp	r0, #0
 800e516:	d03b      	beq.n	800e590 <xTaskPriorityDisinherit+0x7c>
	{
 800e518:	b538      	push	{r3, r4, r5, lr}
 800e51a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800e51c:	4b1e      	ldr	r3, [pc, #120]	@ (800e598 <xTaskPriorityDisinherit+0x84>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4283      	cmp	r3, r0
 800e522:	d008      	beq.n	800e536 <xTaskPriorityDisinherit+0x22>
 800e524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e528:	f383 8811 	msr	BASEPRI, r3
 800e52c:	f3bf 8f6f 	isb	sy
 800e530:	f3bf 8f4f 	dsb	sy
 800e534:	e7fe      	b.n	800e534 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800e536:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800e538:	b943      	cbnz	r3, 800e54c <xTaskPriorityDisinherit+0x38>
 800e53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e53e:	f383 8811 	msr	BASEPRI, r3
 800e542:	f3bf 8f6f 	isb	sy
 800e546:	f3bf 8f4f 	dsb	sy
 800e54a:	e7fe      	b.n	800e54a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800e54c:	3b01      	subs	r3, #1
 800e54e:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e550:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800e552:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800e554:	4291      	cmp	r1, r2
 800e556:	d01d      	beq.n	800e594 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e558:	b10b      	cbz	r3, 800e55e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800e55a:	2000      	movs	r0, #0
	}
 800e55c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e55e:	1d05      	adds	r5, r0, #4
 800e560:	4628      	mov	r0, r5
 800e562:	f7fe fd2f 	bl	800cfc4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e566:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800e568:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e56a:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 800e56e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800e570:	4b0a      	ldr	r3, [pc, #40]	@ (800e59c <xTaskPriorityDisinherit+0x88>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	4298      	cmp	r0, r3
 800e576:	d901      	bls.n	800e57c <xTaskPriorityDisinherit+0x68>
 800e578:	4b08      	ldr	r3, [pc, #32]	@ (800e59c <xTaskPriorityDisinherit+0x88>)
 800e57a:	6018      	str	r0, [r3, #0]
 800e57c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e580:	4629      	mov	r1, r5
 800e582:	4b07      	ldr	r3, [pc, #28]	@ (800e5a0 <xTaskPriorityDisinherit+0x8c>)
 800e584:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e588:	f7fe fcf8 	bl	800cf7c <vListInsertEnd>
					xReturn = pdTRUE;
 800e58c:	2001      	movs	r0, #1
 800e58e:	e7e5      	b.n	800e55c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800e590:	2000      	movs	r0, #0
	}
 800e592:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800e594:	2000      	movs	r0, #0
 800e596:	e7e1      	b.n	800e55c <xTaskPriorityDisinherit+0x48>
 800e598:	2400367c 	.word	0x2400367c
 800e59c:	240031a0 	.word	0x240031a0
 800e5a0:	2400321c 	.word	0x2400321c

0800e5a4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800e5a4:	2800      	cmp	r0, #0
 800e5a6:	d046      	beq.n	800e636 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800e5a8:	b538      	push	{r3, r4, r5, lr}
 800e5aa:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800e5ac:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800e5ae:	b943      	cbnz	r3, 800e5c2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800e5b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5b4:	f383 8811 	msr	BASEPRI, r3
 800e5b8:	f3bf 8f6f 	isb	sy
 800e5bc:	f3bf 8f4f 	dsb	sy
 800e5c0:	e7fe      	b.n	800e5c0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e5c2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800e5c4:	428a      	cmp	r2, r1
 800e5c6:	d200      	bcs.n	800e5ca <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e5c8:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e5ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e5cc:	4291      	cmp	r1, r2
 800e5ce:	d001      	beq.n	800e5d4 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	d000      	beq.n	800e5d6 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800e5d4:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800e5d6:	4b18      	ldr	r3, [pc, #96]	@ (800e638 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	42a3      	cmp	r3, r4
 800e5dc:	d022      	beq.n	800e624 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800e5de:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e5e0:	69a3      	ldr	r3, [r4, #24]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	db02      	blt.n	800e5ec <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5e6:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800e5ea:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e5ec:	6962      	ldr	r2, [r4, #20]
 800e5ee:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800e5f2:	4b12      	ldr	r3, [pc, #72]	@ (800e63c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800e5f4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d1eb      	bne.n	800e5d4 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5fc:	1d25      	adds	r5, r4, #4
 800e5fe:	4628      	mov	r0, r5
 800e600:	f7fe fce0 	bl	800cfc4 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e604:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800e606:	4b0e      	ldr	r3, [pc, #56]	@ (800e640 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	4298      	cmp	r0, r3
 800e60c:	d901      	bls.n	800e612 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800e60e:	4b0c      	ldr	r3, [pc, #48]	@ (800e640 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800e610:	6018      	str	r0, [r3, #0]
 800e612:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e616:	4629      	mov	r1, r5
 800e618:	4b08      	ldr	r3, [pc, #32]	@ (800e63c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800e61a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e61e:	f7fe fcad 	bl	800cf7c <vListInsertEnd>
	}
 800e622:	e7d7      	b.n	800e5d4 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800e624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e628:	f383 8811 	msr	BASEPRI, r3
 800e62c:	f3bf 8f6f 	isb	sy
 800e630:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800e634:	e7fe      	b.n	800e634 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800e636:	4770      	bx	lr
 800e638:	2400367c 	.word	0x2400367c
 800e63c:	2400321c 	.word	0x2400321c
 800e640:	240031a0 	.word	0x240031a0

0800e644 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800e644:	4b05      	ldr	r3, [pc, #20]	@ (800e65c <pvTaskIncrementMutexHeldCount+0x18>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	b123      	cbz	r3, 800e654 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800e64a:	4b04      	ldr	r3, [pc, #16]	@ (800e65c <pvTaskIncrementMutexHeldCount+0x18>)
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800e650:	3301      	adds	r3, #1
 800e652:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 800e654:	4b01      	ldr	r3, [pc, #4]	@ (800e65c <pvTaskIncrementMutexHeldCount+0x18>)
 800e656:	6818      	ldr	r0, [r3, #0]
	}
 800e658:	4770      	bx	lr
 800e65a:	bf00      	nop
 800e65c:	2400367c 	.word	0x2400367c

0800e660 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e660:	4b06      	ldr	r3, [pc, #24]	@ (800e67c <prvGetNextExpireTime+0x1c>)
 800e662:	681a      	ldr	r2, [r3, #0]
 800e664:	6813      	ldr	r3, [r2, #0]
 800e666:	b92b      	cbnz	r3, 800e674 <prvGetNextExpireTime+0x14>
 800e668:	2301      	movs	r3, #1
 800e66a:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e66c:	b923      	cbnz	r3, 800e678 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e66e:	68d3      	ldr	r3, [r2, #12]
 800e670:	6818      	ldr	r0, [r3, #0]
 800e672:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e674:	2300      	movs	r3, #0
 800e676:	e7f8      	b.n	800e66a <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e678:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800e67a:	4770      	bx	lr
 800e67c:	24003780 	.word	0x24003780

0800e680 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e680:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e682:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e684:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e686:	4291      	cmp	r1, r2
 800e688:	d80c      	bhi.n	800e6a4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e68a:	1ad2      	subs	r2, r2, r3
 800e68c:	6983      	ldr	r3, [r0, #24]
 800e68e:	429a      	cmp	r2, r3
 800e690:	d301      	bcc.n	800e696 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e692:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800e694:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e696:	1d01      	adds	r1, r0, #4
 800e698:	4b0b      	ldr	r3, [pc, #44]	@ (800e6c8 <prvInsertTimerInActiveList+0x48>)
 800e69a:	6818      	ldr	r0, [r3, #0]
 800e69c:	f7fe fc79 	bl	800cf92 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e6a0:	2000      	movs	r0, #0
 800e6a2:	e7f7      	b.n	800e694 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	bf2c      	ite	cs
 800e6a8:	2200      	movcs	r2, #0
 800e6aa:	2201      	movcc	r2, #1
 800e6ac:	4299      	cmp	r1, r3
 800e6ae:	bf38      	it	cc
 800e6b0:	2200      	movcc	r2, #0
 800e6b2:	b10a      	cbz	r2, 800e6b8 <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 800e6b4:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800e6b6:	e7ed      	b.n	800e694 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e6b8:	1d01      	adds	r1, r0, #4
 800e6ba:	4b04      	ldr	r3, [pc, #16]	@ (800e6cc <prvInsertTimerInActiveList+0x4c>)
 800e6bc:	6818      	ldr	r0, [r3, #0]
 800e6be:	f7fe fc68 	bl	800cf92 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e6c2:	2000      	movs	r0, #0
 800e6c4:	e7e6      	b.n	800e694 <prvInsertTimerInActiveList+0x14>
 800e6c6:	bf00      	nop
 800e6c8:	2400377c 	.word	0x2400377c
 800e6cc:	24003780 	.word	0x24003780

0800e6d0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e6d0:	b530      	push	{r4, r5, lr}
 800e6d2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e6d4:	f000 fa5e 	bl	800eb94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e6d8:	4b11      	ldr	r3, [pc, #68]	@ (800e720 <prvCheckForValidListAndQueue+0x50>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	b11b      	cbz	r3, 800e6e6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e6de:	f000 fa7b 	bl	800ebd8 <vPortExitCritical>
}
 800e6e2:	b003      	add	sp, #12
 800e6e4:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800e6e6:	4d0f      	ldr	r5, [pc, #60]	@ (800e724 <prvCheckForValidListAndQueue+0x54>)
 800e6e8:	4628      	mov	r0, r5
 800e6ea:	f7fe fc39 	bl	800cf60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e6ee:	4c0e      	ldr	r4, [pc, #56]	@ (800e728 <prvCheckForValidListAndQueue+0x58>)
 800e6f0:	4620      	mov	r0, r4
 800e6f2:	f7fe fc35 	bl	800cf60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e6f6:	4b0d      	ldr	r3, [pc, #52]	@ (800e72c <prvCheckForValidListAndQueue+0x5c>)
 800e6f8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e6fa:	4b0d      	ldr	r3, [pc, #52]	@ (800e730 <prvCheckForValidListAndQueue+0x60>)
 800e6fc:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e6fe:	2300      	movs	r3, #0
 800e700:	9300      	str	r3, [sp, #0]
 800e702:	4b0c      	ldr	r3, [pc, #48]	@ (800e734 <prvCheckForValidListAndQueue+0x64>)
 800e704:	4a0c      	ldr	r2, [pc, #48]	@ (800e738 <prvCheckForValidListAndQueue+0x68>)
 800e706:	2110      	movs	r1, #16
 800e708:	200a      	movs	r0, #10
 800e70a:	f7fe fd69 	bl	800d1e0 <xQueueGenericCreateStatic>
 800e70e:	4b04      	ldr	r3, [pc, #16]	@ (800e720 <prvCheckForValidListAndQueue+0x50>)
 800e710:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800e712:	2800      	cmp	r0, #0
 800e714:	d0e3      	beq.n	800e6de <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e716:	4909      	ldr	r1, [pc, #36]	@ (800e73c <prvCheckForValidListAndQueue+0x6c>)
 800e718:	f7ff f978 	bl	800da0c <vQueueAddToRegistry>
 800e71c:	e7df      	b.n	800e6de <prvCheckForValidListAndQueue+0xe>
 800e71e:	bf00      	nop
 800e720:	24003778 	.word	0x24003778
 800e724:	24003798 	.word	0x24003798
 800e728:	24003784 	.word	0x24003784
 800e72c:	24003780 	.word	0x24003780
 800e730:	2400377c 	.word	0x2400377c
 800e734:	24003680 	.word	0x24003680
 800e738:	240036d0 	.word	0x240036d0
 800e73c:	0801f43c 	.word	0x0801f43c

0800e740 <xTimerCreateTimerTask>:
{
 800e740:	b510      	push	{r4, lr}
 800e742:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800e744:	f7ff ffc4 	bl	800e6d0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800e748:	4b12      	ldr	r3, [pc, #72]	@ (800e794 <xTimerCreateTimerTask+0x54>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	b1cb      	cbz	r3, 800e782 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e74e:	2400      	movs	r4, #0
 800e750:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e752:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e754:	aa07      	add	r2, sp, #28
 800e756:	a906      	add	r1, sp, #24
 800e758:	a805      	add	r0, sp, #20
 800e75a:	f7fe fbf5 	bl	800cf48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e75e:	9b05      	ldr	r3, [sp, #20]
 800e760:	9302      	str	r3, [sp, #8]
 800e762:	9b06      	ldr	r3, [sp, #24]
 800e764:	9301      	str	r3, [sp, #4]
 800e766:	2302      	movs	r3, #2
 800e768:	9300      	str	r3, [sp, #0]
 800e76a:	4623      	mov	r3, r4
 800e76c:	9a07      	ldr	r2, [sp, #28]
 800e76e:	490a      	ldr	r1, [pc, #40]	@ (800e798 <xTimerCreateTimerTask+0x58>)
 800e770:	480a      	ldr	r0, [pc, #40]	@ (800e79c <xTimerCreateTimerTask+0x5c>)
 800e772:	f7ff fb53 	bl	800de1c <xTaskCreateStatic>
 800e776:	4b0a      	ldr	r3, [pc, #40]	@ (800e7a0 <xTimerCreateTimerTask+0x60>)
 800e778:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800e77a:	b110      	cbz	r0, 800e782 <xTimerCreateTimerTask+0x42>
}
 800e77c:	2001      	movs	r0, #1
 800e77e:	b008      	add	sp, #32
 800e780:	bd10      	pop	{r4, pc}
 800e782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e786:	f383 8811 	msr	BASEPRI, r3
 800e78a:	f3bf 8f6f 	isb	sy
 800e78e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800e792:	e7fe      	b.n	800e792 <xTimerCreateTimerTask+0x52>
 800e794:	24003778 	.word	0x24003778
 800e798:	0801f444 	.word	0x0801f444
 800e79c:	0800eaa9 	.word	0x0800eaa9
 800e7a0:	24003774 	.word	0x24003774

0800e7a4 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800e7a4:	b1b8      	cbz	r0, 800e7d6 <xTimerGenericCommand+0x32>
 800e7a6:	469c      	mov	ip, r3
 800e7a8:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800e7aa:	4818      	ldr	r0, [pc, #96]	@ (800e80c <xTimerGenericCommand+0x68>)
 800e7ac:	6800      	ldr	r0, [r0, #0]
 800e7ae:	b358      	cbz	r0, 800e808 <xTimerGenericCommand+0x64>
{
 800e7b0:	b500      	push	{lr}
 800e7b2:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800e7b4:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e7b6:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e7b8:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e7ba:	2905      	cmp	r1, #5
 800e7bc:	dc1c      	bgt.n	800e7f8 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e7be:	f7ff fe4d 	bl	800e45c <xTaskGetSchedulerState>
 800e7c2:	2802      	cmp	r0, #2
 800e7c4:	d010      	beq.n	800e7e8 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	4669      	mov	r1, sp
 800e7cc:	480f      	ldr	r0, [pc, #60]	@ (800e80c <xTimerGenericCommand+0x68>)
 800e7ce:	6800      	ldr	r0, [r0, #0]
 800e7d0:	f7fe fdbe 	bl	800d350 <xQueueGenericSend>
 800e7d4:	e015      	b.n	800e802 <xTimerGenericCommand+0x5e>
 800e7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7da:	f383 8811 	msr	BASEPRI, r3
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800e7e6:	e7fe      	b.n	800e7e6 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	9a06      	ldr	r2, [sp, #24]
 800e7ec:	4669      	mov	r1, sp
 800e7ee:	4807      	ldr	r0, [pc, #28]	@ (800e80c <xTimerGenericCommand+0x68>)
 800e7f0:	6800      	ldr	r0, [r0, #0]
 800e7f2:	f7fe fdad 	bl	800d350 <xQueueGenericSend>
 800e7f6:	e004      	b.n	800e802 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	4662      	mov	r2, ip
 800e7fc:	4669      	mov	r1, sp
 800e7fe:	f7fe fe6b 	bl	800d4d8 <xQueueGenericSendFromISR>
}
 800e802:	b005      	add	sp, #20
 800e804:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800e808:	2000      	movs	r0, #0
}
 800e80a:	4770      	bx	lr
 800e80c:	24003778 	.word	0x24003778

0800e810 <prvSwitchTimerLists>:
{
 800e810:	b570      	push	{r4, r5, r6, lr}
 800e812:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e814:	4b1b      	ldr	r3, [pc, #108]	@ (800e884 <prvSwitchTimerLists+0x74>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	681a      	ldr	r2, [r3, #0]
 800e81a:	b362      	cbz	r2, 800e876 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e820:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e822:	1d25      	adds	r5, r4, #4
 800e824:	4628      	mov	r0, r5
 800e826:	f7fe fbcd 	bl	800cfc4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e82a:	6a23      	ldr	r3, [r4, #32]
 800e82c:	4620      	mov	r0, r4
 800e82e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e830:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e834:	f013 0f04 	tst.w	r3, #4
 800e838:	d0ec      	beq.n	800e814 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e83a:	69a3      	ldr	r3, [r4, #24]
 800e83c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800e83e:	429e      	cmp	r6, r3
 800e840:	d207      	bcs.n	800e852 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e842:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e844:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e846:	4629      	mov	r1, r5
 800e848:	4b0e      	ldr	r3, [pc, #56]	@ (800e884 <prvSwitchTimerLists+0x74>)
 800e84a:	6818      	ldr	r0, [r3, #0]
 800e84c:	f7fe fba1 	bl	800cf92 <vListInsert>
 800e850:	e7e0      	b.n	800e814 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e852:	2100      	movs	r1, #0
 800e854:	9100      	str	r1, [sp, #0]
 800e856:	460b      	mov	r3, r1
 800e858:	4632      	mov	r2, r6
 800e85a:	4620      	mov	r0, r4
 800e85c:	f7ff ffa2 	bl	800e7a4 <xTimerGenericCommand>
				configASSERT( xResult );
 800e860:	2800      	cmp	r0, #0
 800e862:	d1d7      	bne.n	800e814 <prvSwitchTimerLists+0x4>
 800e864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e868:	f383 8811 	msr	BASEPRI, r3
 800e86c:	f3bf 8f6f 	isb	sy
 800e870:	f3bf 8f4f 	dsb	sy
 800e874:	e7fe      	b.n	800e874 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800e876:	4a04      	ldr	r2, [pc, #16]	@ (800e888 <prvSwitchTimerLists+0x78>)
 800e878:	6810      	ldr	r0, [r2, #0]
 800e87a:	4902      	ldr	r1, [pc, #8]	@ (800e884 <prvSwitchTimerLists+0x74>)
 800e87c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800e87e:	6013      	str	r3, [r2, #0]
}
 800e880:	b002      	add	sp, #8
 800e882:	bd70      	pop	{r4, r5, r6, pc}
 800e884:	24003780 	.word	0x24003780
 800e888:	2400377c 	.word	0x2400377c

0800e88c <prvSampleTimeNow>:
{
 800e88c:	b538      	push	{r3, r4, r5, lr}
 800e88e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800e890:	f7ff fb90 	bl	800dfb4 <xTaskGetTickCount>
 800e894:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800e896:	4b07      	ldr	r3, [pc, #28]	@ (800e8b4 <prvSampleTimeNow+0x28>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	4283      	cmp	r3, r0
 800e89c:	d805      	bhi.n	800e8aa <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800e8a2:	4b04      	ldr	r3, [pc, #16]	@ (800e8b4 <prvSampleTimeNow+0x28>)
 800e8a4:	601c      	str	r4, [r3, #0]
}
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800e8aa:	f7ff ffb1 	bl	800e810 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	602b      	str	r3, [r5, #0]
 800e8b2:	e7f6      	b.n	800e8a2 <prvSampleTimeNow+0x16>
 800e8b4:	24003770 	.word	0x24003770

0800e8b8 <prvProcessExpiredTimer>:
{
 800e8b8:	b570      	push	{r4, r5, r6, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	4606      	mov	r6, r0
 800e8be:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8c0:	4917      	ldr	r1, [pc, #92]	@ (800e920 <prvProcessExpiredTimer+0x68>)
 800e8c2:	6809      	ldr	r1, [r1, #0]
 800e8c4:	68c9      	ldr	r1, [r1, #12]
 800e8c6:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e8c8:	1d20      	adds	r0, r4, #4
 800e8ca:	f7fe fb7b 	bl	800cfc4 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e8ce:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 800e8d2:	f01c 0f04 	tst.w	ip, #4
 800e8d6:	d108      	bne.n	800e8ea <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8d8:	f02c 0c01 	bic.w	ip, ip, #1
 800e8dc:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8e0:	6a23      	ldr	r3, [r4, #32]
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	4798      	blx	r3
}
 800e8e6:	b002      	add	sp, #8
 800e8e8:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e8ea:	69a1      	ldr	r1, [r4, #24]
 800e8ec:	4633      	mov	r3, r6
 800e8ee:	462a      	mov	r2, r5
 800e8f0:	4431      	add	r1, r6
 800e8f2:	4620      	mov	r0, r4
 800e8f4:	f7ff fec4 	bl	800e680 <prvInsertTimerInActiveList>
 800e8f8:	2800      	cmp	r0, #0
 800e8fa:	d0f1      	beq.n	800e8e0 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8fc:	2100      	movs	r1, #0
 800e8fe:	9100      	str	r1, [sp, #0]
 800e900:	460b      	mov	r3, r1
 800e902:	4632      	mov	r2, r6
 800e904:	4620      	mov	r0, r4
 800e906:	f7ff ff4d 	bl	800e7a4 <xTimerGenericCommand>
			configASSERT( xResult );
 800e90a:	2800      	cmp	r0, #0
 800e90c:	d1e8      	bne.n	800e8e0 <prvProcessExpiredTimer+0x28>
 800e90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e912:	f383 8811 	msr	BASEPRI, r3
 800e916:	f3bf 8f6f 	isb	sy
 800e91a:	f3bf 8f4f 	dsb	sy
 800e91e:	e7fe      	b.n	800e91e <prvProcessExpiredTimer+0x66>
 800e920:	24003780 	.word	0x24003780

0800e924 <prvProcessTimerOrBlockTask>:
{
 800e924:	b570      	push	{r4, r5, r6, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	4606      	mov	r6, r0
 800e92a:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800e92c:	f7ff fb3a 	bl	800dfa4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e930:	a801      	add	r0, sp, #4
 800e932:	f7ff ffab 	bl	800e88c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800e936:	9b01      	ldr	r3, [sp, #4]
 800e938:	bb3b      	cbnz	r3, 800e98a <prvProcessTimerOrBlockTask+0x66>
 800e93a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e93c:	42b0      	cmp	r0, r6
 800e93e:	bf28      	it	cs
 800e940:	2c00      	cmpcs	r4, #0
 800e942:	d019      	beq.n	800e978 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 800e944:	b124      	cbz	r4, 800e950 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e946:	4a13      	ldr	r2, [pc, #76]	@ (800e994 <prvProcessTimerOrBlockTask+0x70>)
 800e948:	6812      	ldr	r2, [r2, #0]
 800e94a:	6812      	ldr	r2, [r2, #0]
 800e94c:	b9da      	cbnz	r2, 800e986 <prvProcessTimerOrBlockTask+0x62>
 800e94e:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e950:	4622      	mov	r2, r4
 800e952:	1b71      	subs	r1, r6, r5
 800e954:	4b10      	ldr	r3, [pc, #64]	@ (800e998 <prvProcessTimerOrBlockTask+0x74>)
 800e956:	6818      	ldr	r0, [r3, #0]
 800e958:	f7ff f898 	bl	800da8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e95c:	f7ff fbbc 	bl	800e0d8 <xTaskResumeAll>
 800e960:	b9a8      	cbnz	r0, 800e98e <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 800e962:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e96a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e96e:	f3bf 8f4f 	dsb	sy
 800e972:	f3bf 8f6f 	isb	sy
 800e976:	e00a      	b.n	800e98e <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 800e978:	f7ff fbae 	bl	800e0d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e97c:	4629      	mov	r1, r5
 800e97e:	4630      	mov	r0, r6
 800e980:	f7ff ff9a 	bl	800e8b8 <prvProcessExpiredTimer>
 800e984:	e003      	b.n	800e98e <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e986:	461c      	mov	r4, r3
 800e988:	e7e2      	b.n	800e950 <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 800e98a:	f7ff fba5 	bl	800e0d8 <xTaskResumeAll>
}
 800e98e:	b002      	add	sp, #8
 800e990:	bd70      	pop	{r4, r5, r6, pc}
 800e992:	bf00      	nop
 800e994:	2400377c 	.word	0x2400377c
 800e998:	24003778 	.word	0x24003778

0800e99c <prvProcessReceivedCommands>:
{
 800e99c:	b510      	push	{r4, lr}
 800e99e:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e9a0:	e002      	b.n	800e9a8 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e9a2:	9b04      	ldr	r3, [sp, #16]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	da0f      	bge.n	800e9c8 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	a904      	add	r1, sp, #16
 800e9ac:	4b3d      	ldr	r3, [pc, #244]	@ (800eaa4 <prvProcessReceivedCommands+0x108>)
 800e9ae:	6818      	ldr	r0, [r3, #0]
 800e9b0:	f7fe fe52 	bl	800d658 <xQueueReceive>
 800e9b4:	2800      	cmp	r0, #0
 800e9b6:	d073      	beq.n	800eaa0 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e9b8:	9b04      	ldr	r3, [sp, #16]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	daf1      	bge.n	800e9a2 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e9be:	9907      	ldr	r1, [sp, #28]
 800e9c0:	9806      	ldr	r0, [sp, #24]
 800e9c2:	9b05      	ldr	r3, [sp, #20]
 800e9c4:	4798      	blx	r3
 800e9c6:	e7ec      	b.n	800e9a2 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e9c8:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e9ca:	6963      	ldr	r3, [r4, #20]
 800e9cc:	b113      	cbz	r3, 800e9d4 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e9ce:	1d20      	adds	r0, r4, #4
 800e9d0:	f7fe faf8 	bl	800cfc4 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e9d4:	a803      	add	r0, sp, #12
 800e9d6:	f7ff ff59 	bl	800e88c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800e9da:	9b04      	ldr	r3, [sp, #16]
 800e9dc:	2b09      	cmp	r3, #9
 800e9de:	d8e3      	bhi.n	800e9a8 <prvProcessReceivedCommands+0xc>
 800e9e0:	e8df f003 	tbb	[pc, r3]
 800e9e4:	30050505 	.word	0x30050505
 800e9e8:	05055037 	.word	0x05055037
 800e9ec:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e9ee:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e9f2:	f043 0301 	orr.w	r3, r3, #1
 800e9f6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e9fa:	9b05      	ldr	r3, [sp, #20]
 800e9fc:	69a1      	ldr	r1, [r4, #24]
 800e9fe:	4602      	mov	r2, r0
 800ea00:	4419      	add	r1, r3
 800ea02:	4620      	mov	r0, r4
 800ea04:	f7ff fe3c 	bl	800e680 <prvInsertTimerInActiveList>
 800ea08:	2800      	cmp	r0, #0
 800ea0a:	d0cd      	beq.n	800e9a8 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea0c:	6a23      	ldr	r3, [r4, #32]
 800ea0e:	4620      	mov	r0, r4
 800ea10:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea12:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ea16:	f013 0f04 	tst.w	r3, #4
 800ea1a:	d0c5      	beq.n	800e9a8 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ea1c:	69a2      	ldr	r2, [r4, #24]
 800ea1e:	2100      	movs	r1, #0
 800ea20:	9100      	str	r1, [sp, #0]
 800ea22:	460b      	mov	r3, r1
 800ea24:	9805      	ldr	r0, [sp, #20]
 800ea26:	4402      	add	r2, r0
 800ea28:	4620      	mov	r0, r4
 800ea2a:	f7ff febb 	bl	800e7a4 <xTimerGenericCommand>
							configASSERT( xResult );
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	d1ba      	bne.n	800e9a8 <prvProcessReceivedCommands+0xc>
 800ea32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea36:	f383 8811 	msr	BASEPRI, r3
 800ea3a:	f3bf 8f6f 	isb	sy
 800ea3e:	f3bf 8f4f 	dsb	sy
 800ea42:	e7fe      	b.n	800ea42 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea44:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ea48:	f023 0301 	bic.w	r3, r3, #1
 800ea4c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 800ea50:	e7aa      	b.n	800e9a8 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea52:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ea56:	f043 0301 	orr.w	r3, r3, #1
 800ea5a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ea5e:	9905      	ldr	r1, [sp, #20]
 800ea60:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ea62:	b131      	cbz	r1, 800ea72 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ea64:	4603      	mov	r3, r0
 800ea66:	4602      	mov	r2, r0
 800ea68:	4401      	add	r1, r0
 800ea6a:	4620      	mov	r0, r4
 800ea6c:	f7ff fe08 	bl	800e680 <prvInsertTimerInActiveList>
					break;
 800ea70:	e79a      	b.n	800e9a8 <prvProcessReceivedCommands+0xc>
 800ea72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea76:	f383 8811 	msr	BASEPRI, r3
 800ea7a:	f3bf 8f6f 	isb	sy
 800ea7e:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ea82:	e7fe      	b.n	800ea82 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ea84:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ea88:	f013 0f02 	tst.w	r3, #2
 800ea8c:	d004      	beq.n	800ea98 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea8e:	f023 0301 	bic.w	r3, r3, #1
 800ea92:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800ea96:	e787      	b.n	800e9a8 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800ea98:	4620      	mov	r0, r4
 800ea9a:	f000 fab5 	bl	800f008 <vPortFree>
 800ea9e:	e783      	b.n	800e9a8 <prvProcessReceivedCommands+0xc>
}
 800eaa0:	b008      	add	sp, #32
 800eaa2:	bd10      	pop	{r4, pc}
 800eaa4:	24003778 	.word	0x24003778

0800eaa8 <prvTimerTask>:
{
 800eaa8:	b500      	push	{lr}
 800eaaa:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eaac:	a801      	add	r0, sp, #4
 800eaae:	f7ff fdd7 	bl	800e660 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eab2:	9901      	ldr	r1, [sp, #4]
 800eab4:	f7ff ff36 	bl	800e924 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800eab8:	f7ff ff70 	bl	800e99c <prvProcessReceivedCommands>
	for( ;; )
 800eabc:	e7f6      	b.n	800eaac <prvTimerTask+0x4>
	...

0800eac0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eac0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800eac2:	2300      	movs	r3, #0
 800eac4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eac6:	4b0d      	ldr	r3, [pc, #52]	@ (800eafc <prvTaskExitError+0x3c>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eace:	d008      	beq.n	800eae2 <prvTaskExitError+0x22>
 800ead0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ead4:	f383 8811 	msr	BASEPRI, r3
 800ead8:	f3bf 8f6f 	isb	sy
 800eadc:	f3bf 8f4f 	dsb	sy
 800eae0:	e7fe      	b.n	800eae0 <prvTaskExitError+0x20>
 800eae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eae6:	f383 8811 	msr	BASEPRI, r3
 800eaea:	f3bf 8f6f 	isb	sy
 800eaee:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eaf2:	9b01      	ldr	r3, [sp, #4]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d0fc      	beq.n	800eaf2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eaf8:	b002      	add	sp, #8
 800eafa:	4770      	bx	lr
 800eafc:	24000010 	.word	0x24000010

0800eb00 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eb00:	4808      	ldr	r0, [pc, #32]	@ (800eb24 <prvPortStartFirstTask+0x24>)
 800eb02:	6800      	ldr	r0, [r0, #0]
 800eb04:	6800      	ldr	r0, [r0, #0]
 800eb06:	f380 8808 	msr	MSP, r0
 800eb0a:	f04f 0000 	mov.w	r0, #0
 800eb0e:	f380 8814 	msr	CONTROL, r0
 800eb12:	b662      	cpsie	i
 800eb14:	b661      	cpsie	f
 800eb16:	f3bf 8f4f 	dsb	sy
 800eb1a:	f3bf 8f6f 	isb	sy
 800eb1e:	df00      	svc	0
 800eb20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eb22:	0000      	.short	0x0000
 800eb24:	e000ed08 	.word	0xe000ed08

0800eb28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eb28:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800eb38 <vPortEnableVFP+0x10>
 800eb2c:	6801      	ldr	r1, [r0, #0]
 800eb2e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800eb32:	6001      	str	r1, [r0, #0]
 800eb34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eb36:	0000      	.short	0x0000
 800eb38:	e000ed88 	.word	0xe000ed88

0800eb3c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eb3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eb40:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eb44:	f021 0101 	bic.w	r1, r1, #1
 800eb48:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eb4c:	4b05      	ldr	r3, [pc, #20]	@ (800eb64 <pxPortInitialiseStack+0x28>)
 800eb4e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eb52:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eb56:	f06f 0302 	mvn.w	r3, #2
 800eb5a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800eb5e:	3844      	subs	r0, #68	@ 0x44
 800eb60:	4770      	bx	lr
 800eb62:	bf00      	nop
 800eb64:	0800eac1 	.word	0x0800eac1
	...

0800eb70 <SVC_Handler>:
	__asm volatile (
 800eb70:	4b07      	ldr	r3, [pc, #28]	@ (800eb90 <pxCurrentTCBConst2>)
 800eb72:	6819      	ldr	r1, [r3, #0]
 800eb74:	6808      	ldr	r0, [r1, #0]
 800eb76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb7a:	f380 8809 	msr	PSP, r0
 800eb7e:	f3bf 8f6f 	isb	sy
 800eb82:	f04f 0000 	mov.w	r0, #0
 800eb86:	f380 8811 	msr	BASEPRI, r0
 800eb8a:	4770      	bx	lr
 800eb8c:	f3af 8000 	nop.w

0800eb90 <pxCurrentTCBConst2>:
 800eb90:	2400367c 	.word	0x2400367c

0800eb94 <vPortEnterCritical>:
 800eb94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb98:	f383 8811 	msr	BASEPRI, r3
 800eb9c:	f3bf 8f6f 	isb	sy
 800eba0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800eba4:	4a0b      	ldr	r2, [pc, #44]	@ (800ebd4 <vPortEnterCritical+0x40>)
 800eba6:	6813      	ldr	r3, [r2, #0]
 800eba8:	3301      	adds	r3, #1
 800ebaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800ebac:	2b01      	cmp	r3, #1
 800ebae:	d000      	beq.n	800ebb2 <vPortEnterCritical+0x1e>
}
 800ebb0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ebb2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ebb6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800ebba:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800ebbe:	d0f7      	beq.n	800ebb0 <vPortEnterCritical+0x1c>
 800ebc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebc4:	f383 8811 	msr	BASEPRI, r3
 800ebc8:	f3bf 8f6f 	isb	sy
 800ebcc:	f3bf 8f4f 	dsb	sy
 800ebd0:	e7fe      	b.n	800ebd0 <vPortEnterCritical+0x3c>
 800ebd2:	bf00      	nop
 800ebd4:	24000010 	.word	0x24000010

0800ebd8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800ebd8:	4b09      	ldr	r3, [pc, #36]	@ (800ec00 <vPortExitCritical+0x28>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	b943      	cbnz	r3, 800ebf0 <vPortExitCritical+0x18>
 800ebde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebe2:	f383 8811 	msr	BASEPRI, r3
 800ebe6:	f3bf 8f6f 	isb	sy
 800ebea:	f3bf 8f4f 	dsb	sy
 800ebee:	e7fe      	b.n	800ebee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800ebf0:	3b01      	subs	r3, #1
 800ebf2:	4a03      	ldr	r2, [pc, #12]	@ (800ec00 <vPortExitCritical+0x28>)
 800ebf4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ebf6:	b90b      	cbnz	r3, 800ebfc <vPortExitCritical+0x24>
	__asm volatile
 800ebf8:	f383 8811 	msr	BASEPRI, r3
}
 800ebfc:	4770      	bx	lr
 800ebfe:	bf00      	nop
 800ec00:	24000010 	.word	0x24000010
	...

0800ec10 <PendSV_Handler>:
	__asm volatile
 800ec10:	f3ef 8009 	mrs	r0, PSP
 800ec14:	f3bf 8f6f 	isb	sy
 800ec18:	4b15      	ldr	r3, [pc, #84]	@ (800ec70 <pxCurrentTCBConst>)
 800ec1a:	681a      	ldr	r2, [r3, #0]
 800ec1c:	f01e 0f10 	tst.w	lr, #16
 800ec20:	bf08      	it	eq
 800ec22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ec26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec2a:	6010      	str	r0, [r2, #0]
 800ec2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ec30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ec34:	f380 8811 	msr	BASEPRI, r0
 800ec38:	f3bf 8f4f 	dsb	sy
 800ec3c:	f3bf 8f6f 	isb	sy
 800ec40:	f7ff faec 	bl	800e21c <vTaskSwitchContext>
 800ec44:	f04f 0000 	mov.w	r0, #0
 800ec48:	f380 8811 	msr	BASEPRI, r0
 800ec4c:	bc09      	pop	{r0, r3}
 800ec4e:	6819      	ldr	r1, [r3, #0]
 800ec50:	6808      	ldr	r0, [r1, #0]
 800ec52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec56:	f01e 0f10 	tst.w	lr, #16
 800ec5a:	bf08      	it	eq
 800ec5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ec60:	f380 8809 	msr	PSP, r0
 800ec64:	f3bf 8f6f 	isb	sy
 800ec68:	4770      	bx	lr
 800ec6a:	bf00      	nop
 800ec6c:	f3af 8000 	nop.w

0800ec70 <pxCurrentTCBConst>:
 800ec70:	2400367c 	.word	0x2400367c

0800ec74 <xPortSysTickHandler>:
{
 800ec74:	b508      	push	{r3, lr}
	__asm volatile
 800ec76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec7a:	f383 8811 	msr	BASEPRI, r3
 800ec7e:	f3bf 8f6f 	isb	sy
 800ec82:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800ec86:	f7ff f99b 	bl	800dfc0 <xTaskIncrementTick>
 800ec8a:	b128      	cbz	r0, 800ec98 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ec8c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ec90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec94:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800ec98:	2300      	movs	r3, #0
 800ec9a:	f383 8811 	msr	BASEPRI, r3
}
 800ec9e:	bd08      	pop	{r3, pc}

0800eca0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eca0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800eca4:	2300      	movs	r3, #0
 800eca6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eca8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ecaa:	4b05      	ldr	r3, [pc, #20]	@ (800ecc0 <vPortSetupTimerInterrupt+0x20>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	4905      	ldr	r1, [pc, #20]	@ (800ecc4 <vPortSetupTimerInterrupt+0x24>)
 800ecb0:	fba1 1303 	umull	r1, r3, r1, r3
 800ecb4:	099b      	lsrs	r3, r3, #6
 800ecb6:	3b01      	subs	r3, #1
 800ecb8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ecba:	2307      	movs	r3, #7
 800ecbc:	6113      	str	r3, [r2, #16]
}
 800ecbe:	4770      	bx	lr
 800ecc0:	24000004 	.word	0x24000004
 800ecc4:	10624dd3 	.word	0x10624dd3

0800ecc8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ecc8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800eccc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800ecd0:	4b3d      	ldr	r3, [pc, #244]	@ (800edc8 <xPortStartScheduler+0x100>)
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d01c      	beq.n	800ed10 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ecd6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ecda:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800ecde:	4b3b      	ldr	r3, [pc, #236]	@ (800edcc <xPortStartScheduler+0x104>)
 800ece0:	429a      	cmp	r2, r3
 800ece2:	d01e      	beq.n	800ed22 <xPortStartScheduler+0x5a>
{
 800ece4:	b530      	push	{r4, r5, lr}
 800ece6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ece8:	4b39      	ldr	r3, [pc, #228]	@ (800edd0 <xPortStartScheduler+0x108>)
 800ecea:	781a      	ldrb	r2, [r3, #0]
 800ecec:	b2d2      	uxtb	r2, r2
 800ecee:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ecf0:	22ff      	movs	r2, #255	@ 0xff
 800ecf2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	b2db      	uxtb	r3, r3
 800ecf8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ecfc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ed00:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ed04:	4a33      	ldr	r2, [pc, #204]	@ (800edd4 <xPortStartScheduler+0x10c>)
 800ed06:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ed08:	4b33      	ldr	r3, [pc, #204]	@ (800edd8 <xPortStartScheduler+0x110>)
 800ed0a:	2207      	movs	r2, #7
 800ed0c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed0e:	e01b      	b.n	800ed48 <xPortStartScheduler+0x80>
	__asm volatile
 800ed10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed14:	f383 8811 	msr	BASEPRI, r3
 800ed18:	f3bf 8f6f 	isb	sy
 800ed1c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ed20:	e7fe      	b.n	800ed20 <xPortStartScheduler+0x58>
 800ed22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed26:	f383 8811 	msr	BASEPRI, r3
 800ed2a:	f3bf 8f6f 	isb	sy
 800ed2e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ed32:	e7fe      	b.n	800ed32 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800ed34:	4a28      	ldr	r2, [pc, #160]	@ (800edd8 <xPortStartScheduler+0x110>)
 800ed36:	6813      	ldr	r3, [r2, #0]
 800ed38:	3b01      	subs	r3, #1
 800ed3a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ed3c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ed40:	005b      	lsls	r3, r3, #1
 800ed42:	b2db      	uxtb	r3, r3
 800ed44:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed48:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ed4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ed50:	d1f0      	bne.n	800ed34 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ed52:	4b21      	ldr	r3, [pc, #132]	@ (800edd8 <xPortStartScheduler+0x110>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	2b03      	cmp	r3, #3
 800ed58:	d008      	beq.n	800ed6c <xPortStartScheduler+0xa4>
 800ed5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed5e:	f383 8811 	msr	BASEPRI, r3
 800ed62:	f3bf 8f6f 	isb	sy
 800ed66:	f3bf 8f4f 	dsb	sy
 800ed6a:	e7fe      	b.n	800ed6a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ed6c:	021b      	lsls	r3, r3, #8
 800ed6e:	4a1a      	ldr	r2, [pc, #104]	@ (800edd8 <xPortStartScheduler+0x110>)
 800ed70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ed72:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ed76:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ed78:	9b01      	ldr	r3, [sp, #4]
 800ed7a:	b2db      	uxtb	r3, r3
 800ed7c:	4a14      	ldr	r2, [pc, #80]	@ (800edd0 <xPortStartScheduler+0x108>)
 800ed7e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ed80:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 800ed84:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800ed88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ed8c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ed90:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800ed94:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ed98:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800ed9c:	f7ff ff80 	bl	800eca0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800eda0:	2500      	movs	r5, #0
 800eda2:	4b0e      	ldr	r3, [pc, #56]	@ (800eddc <xPortStartScheduler+0x114>)
 800eda4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800eda6:	f7ff febf 	bl	800eb28 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800edaa:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800edae:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800edb2:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800edb6:	f7ff fea3 	bl	800eb00 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800edba:	f7ff fa2f 	bl	800e21c <vTaskSwitchContext>
	prvTaskExitError();
 800edbe:	f7ff fe7f 	bl	800eac0 <prvTaskExitError>
}
 800edc2:	4628      	mov	r0, r5
 800edc4:	b003      	add	sp, #12
 800edc6:	bd30      	pop	{r4, r5, pc}
 800edc8:	410fc271 	.word	0x410fc271
 800edcc:	410fc270 	.word	0x410fc270
 800edd0:	e000e400 	.word	0xe000e400
 800edd4:	240037b0 	.word	0x240037b0
 800edd8:	240037ac 	.word	0x240037ac
 800eddc:	24000010 	.word	0x24000010

0800ede0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ede0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ede4:	2b0f      	cmp	r3, #15
 800ede6:	d90f      	bls.n	800ee08 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ede8:	4a11      	ldr	r2, [pc, #68]	@ (800ee30 <vPortValidateInterruptPriority+0x50>)
 800edea:	5c9b      	ldrb	r3, [r3, r2]
 800edec:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800edee:	4a11      	ldr	r2, [pc, #68]	@ (800ee34 <vPortValidateInterruptPriority+0x54>)
 800edf0:	7812      	ldrb	r2, [r2, #0]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d908      	bls.n	800ee08 <vPortValidateInterruptPriority+0x28>
 800edf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edfa:	f383 8811 	msr	BASEPRI, r3
 800edfe:	f3bf 8f6f 	isb	sy
 800ee02:	f3bf 8f4f 	dsb	sy
 800ee06:	e7fe      	b.n	800ee06 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ee08:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ee0c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800ee10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ee14:	4a08      	ldr	r2, [pc, #32]	@ (800ee38 <vPortValidateInterruptPriority+0x58>)
 800ee16:	6812      	ldr	r2, [r2, #0]
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d908      	bls.n	800ee2e <vPortValidateInterruptPriority+0x4e>
 800ee1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee20:	f383 8811 	msr	BASEPRI, r3
 800ee24:	f3bf 8f6f 	isb	sy
 800ee28:	f3bf 8f4f 	dsb	sy
 800ee2c:	e7fe      	b.n	800ee2c <vPortValidateInterruptPriority+0x4c>
	}
 800ee2e:	4770      	bx	lr
 800ee30:	e000e3f0 	.word	0xe000e3f0
 800ee34:	240037b0 	.word	0x240037b0
 800ee38:	240037ac 	.word	0x240037ac

0800ee3c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ee3c:	4a12      	ldr	r2, [pc, #72]	@ (800ee88 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ee3e:	f012 0f07 	tst.w	r2, #7
 800ee42:	d01e      	beq.n	800ee82 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ee44:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee46:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ee4a:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 800ee4e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee50:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ee52:	480e      	ldr	r0, [pc, #56]	@ (800ee8c <prvHeapInit+0x50>)
 800ee54:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ee56:	2100      	movs	r1, #0
 800ee58:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ee5a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800ee5c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee5e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800ee62:	480b      	ldr	r0, [pc, #44]	@ (800ee90 <prvHeapInit+0x54>)
 800ee64:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800ee66:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ee68:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ee6a:	1a99      	subs	r1, r3, r2
 800ee6c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ee6e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee70:	4b08      	ldr	r3, [pc, #32]	@ (800ee94 <prvHeapInit+0x58>)
 800ee72:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee74:	4b08      	ldr	r3, [pc, #32]	@ (800ee98 <prvHeapInit+0x5c>)
 800ee76:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ee78:	4b08      	ldr	r3, [pc, #32]	@ (800ee9c <prvHeapInit+0x60>)
 800ee7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ee7e:	601a      	str	r2, [r3, #0]
}
 800ee80:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ee82:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ee86:	e7e4      	b.n	800ee52 <prvHeapInit+0x16>
 800ee88:	240037d4 	.word	0x240037d4
 800ee8c:	240037cc 	.word	0x240037cc
 800ee90:	240037c8 	.word	0x240037c8
 800ee94:	240037c0 	.word	0x240037c0
 800ee98:	240037c4 	.word	0x240037c4
 800ee9c:	240037b4 	.word	0x240037b4

0800eea0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eea0:	4b16      	ldr	r3, [pc, #88]	@ (800eefc <prvInsertBlockIntoFreeList+0x5c>)
 800eea2:	461a      	mov	r2, r3
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	4283      	cmp	r3, r0
 800eea8:	d3fb      	bcc.n	800eea2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eeaa:	6851      	ldr	r1, [r2, #4]
 800eeac:	eb02 0c01 	add.w	ip, r2, r1
 800eeb0:	4584      	cmp	ip, r0
 800eeb2:	d009      	beq.n	800eec8 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eeb4:	6841      	ldr	r1, [r0, #4]
 800eeb6:	eb00 0c01 	add.w	ip, r0, r1
 800eeba:	4563      	cmp	r3, ip
 800eebc:	d009      	beq.n	800eed2 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eebe:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eec0:	4290      	cmp	r0, r2
 800eec2:	d019      	beq.n	800eef8 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eec4:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800eec6:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eec8:	6840      	ldr	r0, [r0, #4]
 800eeca:	4401      	add	r1, r0
 800eecc:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800eece:	4610      	mov	r0, r2
 800eed0:	e7f0      	b.n	800eeb4 <prvInsertBlockIntoFreeList+0x14>
{
 800eed2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eed4:	4c0a      	ldr	r4, [pc, #40]	@ (800ef00 <prvInsertBlockIntoFreeList+0x60>)
 800eed6:	6824      	ldr	r4, [r4, #0]
 800eed8:	42a3      	cmp	r3, r4
 800eeda:	d00b      	beq.n	800eef4 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eedc:	685b      	ldr	r3, [r3, #4]
 800eede:	4419      	add	r1, r3
 800eee0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eee2:	6813      	ldr	r3, [r2, #0]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800eee8:	4290      	cmp	r0, r2
 800eeea:	d000      	beq.n	800eeee <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eeec:	6010      	str	r0, [r2, #0]
	}
}
 800eeee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eef2:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eef4:	6004      	str	r4, [r0, #0]
 800eef6:	e7f7      	b.n	800eee8 <prvInsertBlockIntoFreeList+0x48>
 800eef8:	4770      	bx	lr
 800eefa:	bf00      	nop
 800eefc:	240037cc 	.word	0x240037cc
 800ef00:	240037c8 	.word	0x240037c8

0800ef04 <pvPortMalloc>:
{
 800ef04:	b538      	push	{r3, r4, r5, lr}
 800ef06:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800ef08:	f7ff f84c 	bl	800dfa4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800ef0c:	4b38      	ldr	r3, [pc, #224]	@ (800eff0 <pvPortMalloc+0xec>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	b1b3      	cbz	r3, 800ef40 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ef12:	4b38      	ldr	r3, [pc, #224]	@ (800eff4 <pvPortMalloc+0xf0>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	421c      	tst	r4, r3
 800ef18:	d150      	bne.n	800efbc <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 800ef1a:	2c00      	cmp	r4, #0
 800ef1c:	d050      	beq.n	800efc0 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 800ef1e:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ef22:	f014 0f07 	tst.w	r4, #7
 800ef26:	d002      	beq.n	800ef2e <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ef28:	f022 0207 	bic.w	r2, r2, #7
 800ef2c:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ef2e:	2a00      	cmp	r2, #0
 800ef30:	d055      	beq.n	800efde <pvPortMalloc+0xda>
 800ef32:	4b31      	ldr	r3, [pc, #196]	@ (800eff8 <pvPortMalloc+0xf4>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d353      	bcc.n	800efe2 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 800ef3a:	4930      	ldr	r1, [pc, #192]	@ (800effc <pvPortMalloc+0xf8>)
 800ef3c:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef3e:	e004      	b.n	800ef4a <pvPortMalloc+0x46>
			prvHeapInit();
 800ef40:	f7ff ff7c 	bl	800ee3c <prvHeapInit>
 800ef44:	e7e5      	b.n	800ef12 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800ef46:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800ef48:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef4a:	6863      	ldr	r3, [r4, #4]
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d202      	bcs.n	800ef56 <pvPortMalloc+0x52>
 800ef50:	6823      	ldr	r3, [r4, #0]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d1f7      	bne.n	800ef46 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 800ef56:	4b26      	ldr	r3, [pc, #152]	@ (800eff0 <pvPortMalloc+0xec>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	42a3      	cmp	r3, r4
 800ef5c:	d043      	beq.n	800efe6 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ef5e:	680d      	ldr	r5, [r1, #0]
 800ef60:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ef62:	6823      	ldr	r3, [r4, #0]
 800ef64:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ef66:	6863      	ldr	r3, [r4, #4]
 800ef68:	1a9b      	subs	r3, r3, r2
 800ef6a:	2b10      	cmp	r3, #16
 800ef6c:	d910      	bls.n	800ef90 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ef6e:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef70:	f010 0f07 	tst.w	r0, #7
 800ef74:	d008      	beq.n	800ef88 <pvPortMalloc+0x84>
 800ef76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef7a:	f383 8811 	msr	BASEPRI, r3
 800ef7e:	f3bf 8f6f 	isb	sy
 800ef82:	f3bf 8f4f 	dsb	sy
 800ef86:	e7fe      	b.n	800ef86 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ef88:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ef8a:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ef8c:	f7ff ff88 	bl	800eea0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ef90:	6862      	ldr	r2, [r4, #4]
 800ef92:	4919      	ldr	r1, [pc, #100]	@ (800eff8 <pvPortMalloc+0xf4>)
 800ef94:	680b      	ldr	r3, [r1, #0]
 800ef96:	1a9b      	subs	r3, r3, r2
 800ef98:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ef9a:	4919      	ldr	r1, [pc, #100]	@ (800f000 <pvPortMalloc+0xfc>)
 800ef9c:	6809      	ldr	r1, [r1, #0]
 800ef9e:	428b      	cmp	r3, r1
 800efa0:	d201      	bcs.n	800efa6 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800efa2:	4917      	ldr	r1, [pc, #92]	@ (800f000 <pvPortMalloc+0xfc>)
 800efa4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800efa6:	4b13      	ldr	r3, [pc, #76]	@ (800eff4 <pvPortMalloc+0xf0>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	4313      	orrs	r3, r2
 800efac:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800efae:	2300      	movs	r3, #0
 800efb0:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800efb2:	4a14      	ldr	r2, [pc, #80]	@ (800f004 <pvPortMalloc+0x100>)
 800efb4:	6813      	ldr	r3, [r2, #0]
 800efb6:	3301      	adds	r3, #1
 800efb8:	6013      	str	r3, [r2, #0]
 800efba:	e002      	b.n	800efc2 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 800efbc:	2500      	movs	r5, #0
 800efbe:	e000      	b.n	800efc2 <pvPortMalloc+0xbe>
 800efc0:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 800efc2:	f7ff f889 	bl	800e0d8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800efc6:	f015 0f07 	tst.w	r5, #7
 800efca:	d00e      	beq.n	800efea <pvPortMalloc+0xe6>
 800efcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efd0:	f383 8811 	msr	BASEPRI, r3
 800efd4:	f3bf 8f6f 	isb	sy
 800efd8:	f3bf 8f4f 	dsb	sy
 800efdc:	e7fe      	b.n	800efdc <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 800efde:	2500      	movs	r5, #0
 800efe0:	e7ef      	b.n	800efc2 <pvPortMalloc+0xbe>
 800efe2:	2500      	movs	r5, #0
 800efe4:	e7ed      	b.n	800efc2 <pvPortMalloc+0xbe>
 800efe6:	2500      	movs	r5, #0
 800efe8:	e7eb      	b.n	800efc2 <pvPortMalloc+0xbe>
}
 800efea:	4628      	mov	r0, r5
 800efec:	bd38      	pop	{r3, r4, r5, pc}
 800efee:	bf00      	nop
 800eff0:	240037c8 	.word	0x240037c8
 800eff4:	240037b4 	.word	0x240037b4
 800eff8:	240037c4 	.word	0x240037c4
 800effc:	240037cc 	.word	0x240037cc
 800f000:	240037c0 	.word	0x240037c0
 800f004:	240037bc 	.word	0x240037bc

0800f008 <vPortFree>:
	if( pv != NULL )
 800f008:	2800      	cmp	r0, #0
 800f00a:	d034      	beq.n	800f076 <vPortFree+0x6e>
{
 800f00c:	b538      	push	{r3, r4, r5, lr}
 800f00e:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800f010:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f014:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f018:	4a17      	ldr	r2, [pc, #92]	@ (800f078 <vPortFree+0x70>)
 800f01a:	6812      	ldr	r2, [r2, #0]
 800f01c:	4213      	tst	r3, r2
 800f01e:	d108      	bne.n	800f032 <vPortFree+0x2a>
 800f020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f024:	f383 8811 	msr	BASEPRI, r3
 800f028:	f3bf 8f6f 	isb	sy
 800f02c:	f3bf 8f4f 	dsb	sy
 800f030:	e7fe      	b.n	800f030 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f032:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800f036:	b141      	cbz	r1, 800f04a <vPortFree+0x42>
 800f038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f03c:	f383 8811 	msr	BASEPRI, r3
 800f040:	f3bf 8f6f 	isb	sy
 800f044:	f3bf 8f4f 	dsb	sy
 800f048:	e7fe      	b.n	800f048 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f04a:	ea23 0302 	bic.w	r3, r3, r2
 800f04e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800f052:	f7fe ffa7 	bl	800dfa4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f056:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800f05a:	4a08      	ldr	r2, [pc, #32]	@ (800f07c <vPortFree+0x74>)
 800f05c:	6813      	ldr	r3, [r2, #0]
 800f05e:	440b      	add	r3, r1
 800f060:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f062:	4628      	mov	r0, r5
 800f064:	f7ff ff1c 	bl	800eea0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f068:	4a05      	ldr	r2, [pc, #20]	@ (800f080 <vPortFree+0x78>)
 800f06a:	6813      	ldr	r3, [r2, #0]
 800f06c:	3301      	adds	r3, #1
 800f06e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800f070:	f7ff f832 	bl	800e0d8 <xTaskResumeAll>
}
 800f074:	bd38      	pop	{r3, r4, r5, pc}
 800f076:	4770      	bx	lr
 800f078:	240037b4 	.word	0x240037b4
 800f07c:	240037c4 	.word	0x240037c4
 800f080:	240037b8 	.word	0x240037b8

0800f084 <_Z11IDFoundLEDSP4LEDS>:
 *
 * @param input leds: LEDS instance pointer
 */
void IDFoundLEDS(LEDS* leds) {
#ifdef USE_SMD_LEDs
	leds->SetLED(LED_STATUS, GPIO_PIN_SET);
 800f084:	2201      	movs	r2, #1
 800f086:	2107      	movs	r1, #7
 800f088:	f007 ba68 	b.w	801655c <_ZN4LEDS6SetLEDEh13GPIO_PinState>

0800f08c <_Z17WaterDetectedLEDSP4LEDS>:
 *
 * @param input leds: LEDS instance pointer
 */
void WaterDetectedLEDS(LEDS* leds) {
#ifdef USE_SMD_LEDs
	leds->SetLED(LED_FAULT, GPIO_PIN_SET);
 800f08c:	2201      	movs	r2, #1
 800f08e:	2109      	movs	r1, #9
 800f090:	f007 ba64 	b.w	801655c <_ZN4LEDS6SetLEDEh13GPIO_PinState>

0800f094 <_Z16CommunicationLEDP4LEDSh>:
 * @param input leds: LEDS instance pointer
 * @param input interface_ID: the interface from Communication that asks for a LED single blinking. The ID should be the same than the LED ID
 */
void CommunicationLED(LEDS* leds, uint8_t interface_ID) {
#ifdef USE_SMD_LEDs
	if (interface_ID == UART_PIC || interface_ID == UART_EXTENSION) return; // no LED for these interfaces
 800f094:	1f4b      	subs	r3, r1, #5
 800f096:	2b01      	cmp	r3, #1
 800f098:	d901      	bls.n	800f09e <_Z16CommunicationLEDP4LEDSh+0xa>

	leds->BlinkOnce(interface_ID);
 800f09a:	f007 bac7 	b.w	801662c <_ZN4LEDS9BlinkOnceEh>
#endif
}
 800f09e:	4770      	bx	lr

0800f0a0 <_Z11StartupLEDSP4LEDS>:
void StartupLEDS(LEDS* leds) {
 800f0a0:	b510      	push	{r4, lr}
	leds->ConfigureTimings(LED_STATUS, std::vector<uint8_t>{5}, 10);
 800f0a2:	2305      	movs	r3, #5
void StartupLEDS(LEDS* leds) {
 800f0a4:	b088      	sub	sp, #32
 800f0a6:	4604      	mov	r4, r0
	leds->ConfigureTimings(LED_STATUS, std::vector<uint8_t>{5}, 10);
 800f0a8:	2201      	movs	r2, #1
 800f0aa:	f88d 3004 	strb.w	r3, [sp, #4]
 800f0ae:	ab01      	add	r3, sp, #4
 800f0b0:	a805      	add	r0, sp, #20
 800f0b2:	9303      	str	r3, [sp, #12]
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	9903      	ldr	r1, [sp, #12]
 800f0b8:	9304      	str	r3, [sp, #16]
 800f0ba:	ab02      	add	r3, sp, #8
 800f0bc:	f7f1 fe64 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 800f0c0:	230a      	movs	r3, #10
 800f0c2:	aa05      	add	r2, sp, #20
 800f0c4:	2107      	movs	r1, #7
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	f007 ff55 	bl	8016f76 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
      }
 800f0cc:	a805      	add	r0, sp, #20
 800f0ce:	f7f1 fd07 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	leds->Blink(LED_STATUS); 											// blink until ID allocated
 800f0d2:	2107      	movs	r1, #7
 800f0d4:	4620      	mov	r0, r4
}
 800f0d6:	b008      	add	sp, #32
 800f0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	leds->Blink(LED_STATUS); 											// blink until ID allocated
 800f0dc:	f007 ba83 	b.w	80165e6 <_ZN4LEDS5BlinkEh>

0800f0e0 <_Z19ControllerFaultLEDSP4LEDS>:
void ControllerFaultLEDS(LEDS* leds) {
 800f0e0:	b510      	push	{r4, lr}
 800f0e2:	4604      	mov	r4, r0
 800f0e4:	b088      	sub	sp, #32
	leds->ClearLED(LED_CONTROLLER);
 800f0e6:	2108      	movs	r1, #8
 800f0e8:	f007 fc5d 	bl	80169a6 <_ZN4LEDS8ClearLEDEh>
	if (leds->UnusedLED(LED_FAULT)) {
 800f0ec:	2109      	movs	r1, #9
 800f0ee:	4620      	mov	r0, r4
 800f0f0:	f007 fa55 	bl	801659e <_ZN4LEDS9UnusedLEDEh>
 800f0f4:	b1e0      	cbz	r0, 800f130 <_Z19ControllerFaultLEDSP4LEDS+0x50>
		leds->ConfigureTimings(LED_FAULT, std::vector<uint8_t>{5}, 10);
 800f0f6:	2305      	movs	r3, #5
 800f0f8:	2201      	movs	r2, #1
 800f0fa:	a805      	add	r0, sp, #20
 800f0fc:	f88d 3004 	strb.w	r3, [sp, #4]
 800f100:	ab01      	add	r3, sp, #4
 800f102:	9303      	str	r3, [sp, #12]
 800f104:	2301      	movs	r3, #1
 800f106:	9903      	ldr	r1, [sp, #12]
 800f108:	9304      	str	r3, [sp, #16]
 800f10a:	ab02      	add	r3, sp, #8
 800f10c:	f7f1 fe3c 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 800f110:	230a      	movs	r3, #10
 800f112:	aa05      	add	r2, sp, #20
 800f114:	2109      	movs	r1, #9
 800f116:	4620      	mov	r0, r4
 800f118:	f007 ff2d 	bl	8016f76 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 800f11c:	a805      	add	r0, sp, #20
 800f11e:	f7f1 fcdf 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		leds->Blink(LED_FAULT);
 800f122:	2109      	movs	r1, #9
 800f124:	4620      	mov	r0, r4
}
 800f126:	b008      	add	sp, #32
 800f128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		leds->Blink(LED_FAULT);
 800f12c:	f007 ba5b 	b.w	80165e6 <_ZN4LEDS5BlinkEh>
}
 800f130:	b008      	add	sp, #32
 800f132:	bd10      	pop	{r4, pc}

0800f134 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0>:
 *
 * @param output success: whether successful
 * @return the type ID corresponding to the input template type
 */
template <typename T>
uint8_t Registers::GetTypeID (bool* success) {
 800f134:	b510      	push	{r4, lr}
	uint8_t type = 0;

	if (false) {}
#ifdef USE_UINT8_REGISTER
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f136:	491e      	ldr	r1, [pc, #120]	@ (800f1b0 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 800f138:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f13a:	481e      	ldr	r0, [pc, #120]	@ (800f1b4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 800f13c:	f00e fffc 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f140:	bb40      	cbnz	r0, 800f194 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x60>
#endif
#ifdef USE_UINT16_REGISTER
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f142:	491d      	ldr	r1, [pc, #116]	@ (800f1b8 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x84>)
 800f144:	481b      	ldr	r0, [pc, #108]	@ (800f1b4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 800f146:	f00e fff7 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f14a:	bb28      	cbnz	r0, 800f198 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x64>
#endif
#ifdef USE_UINT32_REGISTER
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f14c:	491b      	ldr	r1, [pc, #108]	@ (800f1bc <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x88>)
 800f14e:	4819      	ldr	r0, [pc, #100]	@ (800f1b4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 800f150:	f00e fff2 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f154:	bb10      	cbnz	r0, 800f19c <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x68>
#endif
#ifdef USE_UINT64_REGISTER
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f156:	4917      	ldr	r1, [pc, #92]	@ (800f1b4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 800f158:	4608      	mov	r0, r1
 800f15a:	f00e ffed 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f15e:	b9f8      	cbnz	r0, 800f1a0 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x6c>
#endif
#ifdef USE_INT8_REGISTER
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f160:	4917      	ldr	r1, [pc, #92]	@ (800f1c0 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x8c>)
 800f162:	4814      	ldr	r0, [pc, #80]	@ (800f1b4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 800f164:	f00e ffe8 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f168:	b9e0      	cbnz	r0, 800f1a4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x70>
#endif
#ifdef USE_INT16_REGISTER
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
#endif
#ifdef USE_INT32_REGISTER
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f16a:	4916      	ldr	r1, [pc, #88]	@ (800f1c4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x90>)
 800f16c:	4811      	ldr	r0, [pc, #68]	@ (800f1b4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 800f16e:	f00e ffe3 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f172:	b9c8      	cbnz	r0, 800f1a8 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x74>
#endif
#ifdef USE_INT64_REGISTER
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
#endif
#ifdef USE_FLOAT_REGISTER
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f174:	4914      	ldr	r1, [pc, #80]	@ (800f1c8 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x94>)
 800f176:	480f      	ldr	r0, [pc, #60]	@ (800f1b4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 800f178:	f00e ffde 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f17c:	b9b0      	cbnz	r0, 800f1ac <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x78>
#endif
#ifdef USE_DOUBLE_REGISTER
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800f17e:	4913      	ldr	r1, [pc, #76]	@ (800f1cc <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x98>)
 800f180:	480c      	ldr	r0, [pc, #48]	@ (800f1b4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 800f182:	f00e ffd9 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
#endif
	else {*success = false; return 0;}
 800f186:	2800      	cmp	r0, #0
 800f188:	bf14      	ite	ne
 800f18a:	2309      	movne	r3, #9
 800f18c:	2300      	moveq	r3, #0
 800f18e:	7020      	strb	r0, [r4, #0]

	*success = true;
	return type;
}
 800f190:	4618      	mov	r0, r3
 800f192:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f194:	2300      	movs	r3, #0
 800f196:	e7fa      	b.n	800f18e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f198:	2301      	movs	r3, #1
 800f19a:	e7f8      	b.n	800f18e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f19c:	2302      	movs	r3, #2
 800f19e:	e7f6      	b.n	800f18e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f1a0:	2303      	movs	r3, #3
 800f1a2:	e7f4      	b.n	800f18e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f1a4:	2304      	movs	r3, #4
 800f1a6:	e7f2      	b.n	800f18e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f1a8:	2306      	movs	r3, #6
 800f1aa:	e7f0      	b.n	800f18e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f1ac:	2308      	movs	r3, #8
 800f1ae:	e7ee      	b.n	800f18e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
 800f1b0:	0801f65c 	.word	0x0801f65c
 800f1b4:	0801f63c 	.word	0x0801f63c
 800f1b8:	0801f654 	.word	0x0801f654
 800f1bc:	0801f644 	.word	0x0801f644
 800f1c0:	0801f664 	.word	0x0801f664
 800f1c4:	0801f64c 	.word	0x0801f64c
 800f1c8:	0801f634 	.word	0x0801f634
 800f1cc:	0801f62c 	.word	0x0801f62c

0800f1d0 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 800f1d0:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f1d2:	491e      	ldr	r1, [pc, #120]	@ (800f24c <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 800f1d4:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f1d6:	481e      	ldr	r0, [pc, #120]	@ (800f250 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x80>)
 800f1d8:	f00e ffae 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f1dc:	bb40      	cbnz	r0, 800f230 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f1de:	491d      	ldr	r1, [pc, #116]	@ (800f254 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x84>)
 800f1e0:	481b      	ldr	r0, [pc, #108]	@ (800f250 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x80>)
 800f1e2:	f00e ffa9 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f1e6:	bb28      	cbnz	r0, 800f234 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f1e8:	491b      	ldr	r1, [pc, #108]	@ (800f258 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x88>)
 800f1ea:	4819      	ldr	r0, [pc, #100]	@ (800f250 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x80>)
 800f1ec:	f00e ffa4 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f1f0:	bb10      	cbnz	r0, 800f238 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f1f2:	491a      	ldr	r1, [pc, #104]	@ (800f25c <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x8c>)
 800f1f4:	4816      	ldr	r0, [pc, #88]	@ (800f250 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x80>)
 800f1f6:	f00e ff9f 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f1fa:	b9f8      	cbnz	r0, 800f23c <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f1fc:	4918      	ldr	r1, [pc, #96]	@ (800f260 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x90>)
 800f1fe:	4814      	ldr	r0, [pc, #80]	@ (800f250 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x80>)
 800f200:	f00e ff9a 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f204:	b9e0      	cbnz	r0, 800f240 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f206:	4917      	ldr	r1, [pc, #92]	@ (800f264 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x94>)
 800f208:	4811      	ldr	r0, [pc, #68]	@ (800f250 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x80>)
 800f20a:	f00e ff95 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f20e:	b9c8      	cbnz	r0, 800f244 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f210:	4915      	ldr	r1, [pc, #84]	@ (800f268 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x98>)
 800f212:	480f      	ldr	r0, [pc, #60]	@ (800f250 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x80>)
 800f214:	f00e ff90 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f218:	b9b0      	cbnz	r0, 800f248 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800f21a:	490d      	ldr	r1, [pc, #52]	@ (800f250 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x80>)
 800f21c:	4608      	mov	r0, r1
 800f21e:	f00e ff8b 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800f222:	2800      	cmp	r0, #0
 800f224:	bf14      	ite	ne
 800f226:	2309      	movne	r3, #9
 800f228:	2300      	moveq	r3, #0
 800f22a:	7020      	strb	r0, [r4, #0]
}
 800f22c:	4618      	mov	r0, r3
 800f22e:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f230:	2300      	movs	r3, #0
 800f232:	e7fa      	b.n	800f22a <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f234:	2301      	movs	r3, #1
 800f236:	e7f8      	b.n	800f22a <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f238:	2302      	movs	r3, #2
 800f23a:	e7f6      	b.n	800f22a <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f23c:	2303      	movs	r3, #3
 800f23e:	e7f4      	b.n	800f22a <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f240:	2304      	movs	r3, #4
 800f242:	e7f2      	b.n	800f22a <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f244:	2306      	movs	r3, #6
 800f246:	e7f0      	b.n	800f22a <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f248:	2308      	movs	r3, #8
 800f24a:	e7ee      	b.n	800f22a <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x5a>
 800f24c:	0801f65c 	.word	0x0801f65c
 800f250:	0801f62c 	.word	0x0801f62c
 800f254:	0801f654 	.word	0x0801f654
 800f258:	0801f644 	.word	0x0801f644
 800f25c:	0801f63c 	.word	0x0801f63c
 800f260:	0801f664 	.word	0x0801f664
 800f264:	0801f64c 	.word	0x0801f64c
 800f268:	0801f634 	.word	0x0801f634

0800f26c <_ZN9Registers9GetTypeIDItEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 800f26c:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f26e:	491e      	ldr	r1, [pc, #120]	@ (800f2e8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 800f270:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f272:	481e      	ldr	r0, [pc, #120]	@ (800f2ec <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 800f274:	f00e ff60 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f278:	bb40      	cbnz	r0, 800f2cc <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f27a:	491c      	ldr	r1, [pc, #112]	@ (800f2ec <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 800f27c:	4608      	mov	r0, r1
 800f27e:	f00e ff5b 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f282:	bb28      	cbnz	r0, 800f2d0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f284:	491a      	ldr	r1, [pc, #104]	@ (800f2f0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x84>)
 800f286:	4819      	ldr	r0, [pc, #100]	@ (800f2ec <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 800f288:	f00e ff56 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f28c:	bb10      	cbnz	r0, 800f2d4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f28e:	4919      	ldr	r1, [pc, #100]	@ (800f2f4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x88>)
 800f290:	4816      	ldr	r0, [pc, #88]	@ (800f2ec <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 800f292:	f00e ff51 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f296:	b9f8      	cbnz	r0, 800f2d8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f298:	4917      	ldr	r1, [pc, #92]	@ (800f2f8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x8c>)
 800f29a:	4814      	ldr	r0, [pc, #80]	@ (800f2ec <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 800f29c:	f00e ff4c 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f2a0:	b9e0      	cbnz	r0, 800f2dc <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f2a2:	4916      	ldr	r1, [pc, #88]	@ (800f2fc <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x90>)
 800f2a4:	4811      	ldr	r0, [pc, #68]	@ (800f2ec <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 800f2a6:	f00e ff47 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f2aa:	b9c8      	cbnz	r0, 800f2e0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f2ac:	4914      	ldr	r1, [pc, #80]	@ (800f300 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x94>)
 800f2ae:	480f      	ldr	r0, [pc, #60]	@ (800f2ec <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 800f2b0:	f00e ff42 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f2b4:	b9b0      	cbnz	r0, 800f2e4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800f2b6:	4913      	ldr	r1, [pc, #76]	@ (800f304 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x98>)
 800f2b8:	480c      	ldr	r0, [pc, #48]	@ (800f2ec <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 800f2ba:	f00e ff3d 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800f2be:	2800      	cmp	r0, #0
 800f2c0:	bf14      	ite	ne
 800f2c2:	2309      	movne	r3, #9
 800f2c4:	2300      	moveq	r3, #0
 800f2c6:	7020      	strb	r0, [r4, #0]
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	e7fa      	b.n	800f2c6 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	e7f8      	b.n	800f2c6 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f2d4:	2302      	movs	r3, #2
 800f2d6:	e7f6      	b.n	800f2c6 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f2d8:	2303      	movs	r3, #3
 800f2da:	e7f4      	b.n	800f2c6 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f2dc:	2304      	movs	r3, #4
 800f2de:	e7f2      	b.n	800f2c6 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f2e0:	2306      	movs	r3, #6
 800f2e2:	e7f0      	b.n	800f2c6 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f2e4:	2308      	movs	r3, #8
 800f2e6:	e7ee      	b.n	800f2c6 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
 800f2e8:	0801f65c 	.word	0x0801f65c
 800f2ec:	0801f654 	.word	0x0801f654
 800f2f0:	0801f644 	.word	0x0801f644
 800f2f4:	0801f63c 	.word	0x0801f63c
 800f2f8:	0801f664 	.word	0x0801f664
 800f2fc:	0801f64c 	.word	0x0801f64c
 800f300:	0801f634 	.word	0x0801f634
 800f304:	0801f62c 	.word	0x0801f62c

0800f308 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 800f308:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f30a:	491e      	ldr	r1, [pc, #120]	@ (800f384 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 800f30c:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f30e:	481e      	ldr	r0, [pc, #120]	@ (800f388 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 800f310:	f00e ff12 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f314:	bb40      	cbnz	r0, 800f368 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f316:	491d      	ldr	r1, [pc, #116]	@ (800f38c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>)
 800f318:	481b      	ldr	r0, [pc, #108]	@ (800f388 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 800f31a:	f00e ff0d 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f31e:	bb28      	cbnz	r0, 800f36c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f320:	4919      	ldr	r1, [pc, #100]	@ (800f388 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 800f322:	4608      	mov	r0, r1
 800f324:	f00e ff08 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f328:	bb10      	cbnz	r0, 800f370 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f32a:	4919      	ldr	r1, [pc, #100]	@ (800f390 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>)
 800f32c:	4816      	ldr	r0, [pc, #88]	@ (800f388 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 800f32e:	f00e ff03 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f332:	b9f8      	cbnz	r0, 800f374 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f334:	4917      	ldr	r1, [pc, #92]	@ (800f394 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>)
 800f336:	4814      	ldr	r0, [pc, #80]	@ (800f388 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 800f338:	f00e fefe 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f33c:	b9e0      	cbnz	r0, 800f378 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f33e:	4916      	ldr	r1, [pc, #88]	@ (800f398 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>)
 800f340:	4811      	ldr	r0, [pc, #68]	@ (800f388 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 800f342:	f00e fef9 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f346:	b9c8      	cbnz	r0, 800f37c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f348:	4914      	ldr	r1, [pc, #80]	@ (800f39c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>)
 800f34a:	480f      	ldr	r0, [pc, #60]	@ (800f388 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 800f34c:	f00e fef4 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f350:	b9b0      	cbnz	r0, 800f380 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800f352:	4913      	ldr	r1, [pc, #76]	@ (800f3a0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>)
 800f354:	480c      	ldr	r0, [pc, #48]	@ (800f388 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 800f356:	f00e feef 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800f35a:	2800      	cmp	r0, #0
 800f35c:	bf14      	ite	ne
 800f35e:	2309      	movne	r3, #9
 800f360:	2300      	moveq	r3, #0
 800f362:	7020      	strb	r0, [r4, #0]
}
 800f364:	4618      	mov	r0, r3
 800f366:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f368:	2300      	movs	r3, #0
 800f36a:	e7fa      	b.n	800f362 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f36c:	2301      	movs	r3, #1
 800f36e:	e7f8      	b.n	800f362 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f370:	2302      	movs	r3, #2
 800f372:	e7f6      	b.n	800f362 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f374:	2303      	movs	r3, #3
 800f376:	e7f4      	b.n	800f362 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f378:	2304      	movs	r3, #4
 800f37a:	e7f2      	b.n	800f362 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f37c:	2306      	movs	r3, #6
 800f37e:	e7f0      	b.n	800f362 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f380:	2308      	movs	r3, #8
 800f382:	e7ee      	b.n	800f362 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
 800f384:	0801f65c 	.word	0x0801f65c
 800f388:	0801f644 	.word	0x0801f644
 800f38c:	0801f654 	.word	0x0801f654
 800f390:	0801f63c 	.word	0x0801f63c
 800f394:	0801f664 	.word	0x0801f664
 800f398:	0801f64c 	.word	0x0801f64c
 800f39c:	0801f634 	.word	0x0801f634
 800f3a0:	0801f62c 	.word	0x0801f62c

0800f3a4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 800f3a4:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f3a6:	491e      	ldr	r1, [pc, #120]	@ (800f420 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 800f3a8:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f3aa:	481e      	ldr	r0, [pc, #120]	@ (800f424 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800f3ac:	f00e fec4 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f3b0:	bb40      	cbnz	r0, 800f404 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f3b2:	491d      	ldr	r1, [pc, #116]	@ (800f428 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>)
 800f3b4:	481b      	ldr	r0, [pc, #108]	@ (800f424 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800f3b6:	f00e febf 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f3ba:	bb28      	cbnz	r0, 800f408 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f3bc:	491b      	ldr	r1, [pc, #108]	@ (800f42c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>)
 800f3be:	4819      	ldr	r0, [pc, #100]	@ (800f424 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800f3c0:	f00e feba 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f3c4:	bb10      	cbnz	r0, 800f40c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f3c6:	491a      	ldr	r1, [pc, #104]	@ (800f430 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>)
 800f3c8:	4816      	ldr	r0, [pc, #88]	@ (800f424 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800f3ca:	f00e feb5 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f3ce:	b9f8      	cbnz	r0, 800f410 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f3d0:	4918      	ldr	r1, [pc, #96]	@ (800f434 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>)
 800f3d2:	4814      	ldr	r0, [pc, #80]	@ (800f424 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800f3d4:	f00e feb0 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f3d8:	b9e0      	cbnz	r0, 800f414 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f3da:	4917      	ldr	r1, [pc, #92]	@ (800f438 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>)
 800f3dc:	4811      	ldr	r0, [pc, #68]	@ (800f424 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800f3de:	f00e feab 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f3e2:	b9c8      	cbnz	r0, 800f418 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f3e4:	490f      	ldr	r1, [pc, #60]	@ (800f424 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800f3e6:	4608      	mov	r0, r1
 800f3e8:	f00e fea6 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 800f3ec:	b9b0      	cbnz	r0, 800f41c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800f3ee:	4913      	ldr	r1, [pc, #76]	@ (800f43c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>)
 800f3f0:	480c      	ldr	r0, [pc, #48]	@ (800f424 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800f3f2:	f00e fea1 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	bf14      	ite	ne
 800f3fa:	2309      	movne	r3, #9
 800f3fc:	2300      	moveq	r3, #0
 800f3fe:	7020      	strb	r0, [r4, #0]
}
 800f400:	4618      	mov	r0, r3
 800f402:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f404:	2300      	movs	r3, #0
 800f406:	e7fa      	b.n	800f3fe <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f408:	2301      	movs	r3, #1
 800f40a:	e7f8      	b.n	800f3fe <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f40c:	2302      	movs	r3, #2
 800f40e:	e7f6      	b.n	800f3fe <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f410:	2303      	movs	r3, #3
 800f412:	e7f4      	b.n	800f3fe <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f414:	2304      	movs	r3, #4
 800f416:	e7f2      	b.n	800f3fe <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f418:	2306      	movs	r3, #6
 800f41a:	e7f0      	b.n	800f3fe <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f41c:	2308      	movs	r3, #8
 800f41e:	e7ee      	b.n	800f3fe <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
 800f420:	0801f65c 	.word	0x0801f65c
 800f424:	0801f634 	.word	0x0801f634
 800f428:	0801f654 	.word	0x0801f654
 800f42c:	0801f644 	.word	0x0801f644
 800f430:	0801f63c 	.word	0x0801f63c
 800f434:	0801f664 	.word	0x0801f664
 800f438:	0801f64c 	.word	0x0801f64c
 800f43c:	0801f62c 	.word	0x0801f62c

0800f440 <_ZN7Sensors13AddSensorDataItEEbhtb.isra.0>:
 * @param input sensor_register: sensor data register address. This address is stored and accessible as a register from Registers. It is a single register by design
 * @param input publishable: if true, add the sensor data register to the sensor group publisher as a topic if it exists. DEFAULT=true
 * @return whether successful
 */
template<typename T>
bool Sensors::AddSensorData(uint8_t sensor_ID, uint16_t sensor_register, bool publishable) {
 800f440:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f442:	b085      	sub	sp, #20
 800f444:	4604      	mov	r4, r0
 800f446:	4616      	mov	r6, r2
 800f448:	461f      	mov	r7, r3
	bool success;
	uint8_t type = registers->GetTypeID<T>(&success);
 800f44a:	f10d 000f 	add.w	r0, sp, #15
bool Sensors::AddSensorData(uint8_t sensor_ID, uint16_t sensor_register, bool publishable) {
 800f44e:	460d      	mov	r5, r1
	uint8_t type = registers->GetTypeID<T>(&success);
 800f450:	f7ff ff0c 	bl	800f26c <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	if (!success) return false;
 800f454:	f89d 200f 	ldrb.w	r2, [sp, #15]
	uint8_t type = registers->GetTypeID<T>(&success);
 800f458:	4603      	mov	r3, r0
	if (!success) return false;
 800f45a:	b12a      	cbz	r2, 800f468 <_ZN7Sensors13AddSensorDataItEEbhtb.isra.0+0x28>

	return AddSensorDataWithType(sensor_ID, sensor_register, type, publishable);
 800f45c:	4632      	mov	r2, r6
 800f45e:	4629      	mov	r1, r5
 800f460:	4620      	mov	r0, r4
 800f462:	9700      	str	r7, [sp, #0]
 800f464:	f00d fcbe 	bl	801cde4 <_ZN7Sensors21AddSensorDataWithTypeEhthb>
}
 800f468:	b005      	add	sp, #20
 800f46a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f46c <_ZN7Sensors13AddSensorDataImEEbhtb.isra.0>:
bool Sensors::AddSensorData(uint8_t sensor_ID, uint16_t sensor_register, bool publishable) {
 800f46c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f46e:	b085      	sub	sp, #20
 800f470:	4604      	mov	r4, r0
 800f472:	4616      	mov	r6, r2
 800f474:	461f      	mov	r7, r3
	uint8_t type = registers->GetTypeID<T>(&success);
 800f476:	f10d 000f 	add.w	r0, sp, #15
bool Sensors::AddSensorData(uint8_t sensor_ID, uint16_t sensor_register, bool publishable) {
 800f47a:	460d      	mov	r5, r1
	uint8_t type = registers->GetTypeID<T>(&success);
 800f47c:	f7ff ff44 	bl	800f308 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) return false;
 800f480:	f89d 200f 	ldrb.w	r2, [sp, #15]
	uint8_t type = registers->GetTypeID<T>(&success);
 800f484:	4603      	mov	r3, r0
	if (!success) return false;
 800f486:	b12a      	cbz	r2, 800f494 <_ZN7Sensors13AddSensorDataImEEbhtb.isra.0+0x28>
	return AddSensorDataWithType(sensor_ID, sensor_register, type, publishable);
 800f488:	4632      	mov	r2, r6
 800f48a:	4629      	mov	r1, r5
 800f48c:	4620      	mov	r0, r4
 800f48e:	9700      	str	r7, [sp, #0]
 800f490:	f00d fca8 	bl	801cde4 <_ZN7Sensors21AddSensorDataWithTypeEhthb>
}
 800f494:	b005      	add	sp, #20
 800f496:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f498 <_ZN15PlatformSensorsC1Ev>:
/**
 * @brief Class constructor
 */
PlatformSensors::PlatformSensors() {

}
 800f498:	4770      	bx	lr

0800f49a <_ZN15PlatformSensors4InitEP7SensorsP9RegistersP10PublishersP4LEDS>:
 * @param input leds_: the LEDS instance
 */
void PlatformSensors::Init(Sensors* sensors_, Registers* registers_, Publishers* publishers_, LEDS* leds_) {
	sensors = sensors_;
	registers = registers_;
	publishers = publishers_;
 800f49a:	6083      	str	r3, [r0, #8]
	leds = leds_;
 800f49c:	9b00      	ldr	r3, [sp, #0]
	registers = registers_;
 800f49e:	e9c0 1200 	strd	r1, r2, [r0]
	leds = leds_;
 800f4a2:	60c3      	str	r3, [r0, #12]
}
 800f4a4:	4770      	bx	lr
	...

0800f4a8 <_ZN15PlatformSensors14AddMotorSensorEv>:
}

/**
 * @brief Add motor sensor and setup reading sequences
 */
void PlatformSensors::AddMotorSensor(void) {
 800f4a8:	b530      	push	{r4, r5, lr}
 800f4aa:	4604      	mov	r4, r0
 800f4ac:	b085      	sub	sp, #20
	// Add sensor group
	sensors->AddSensorGroup(I2C2_ID, MOTOR, true);
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	2203      	movs	r2, #3
 800f4b2:	2108      	movs	r1, #8
 800f4b4:	6800      	ldr	r0, [r0, #0]
 800f4b6:	f00d f9bb 	bl	801c830 <_ZN7Sensors14AddSensorGroupEhhb>

	// Set group prescaler
	sensors->SetSensorGroupPrescaler(MOTOR, MOTOR_PRESCALER);
 800f4ba:	220a      	movs	r2, #10
 800f4bc:	2103      	movs	r1, #3
 800f4be:	6820      	ldr	r0, [r4, #0]
 800f4c0:	f00a ffaf 	bl	801a422 <_ZN7Sensors23SetSensorGroupPrescalerEht>

	// Add sensor
	sensors->AddSensor(MOTOR, ENERGY_MONITORING_LTC2947, LTC2947_ADDRESS);
 800f4c4:	23b8      	movs	r3, #184	@ 0xb8
 800f4c6:	2204      	movs	r2, #4
 800f4c8:	2103      	movs	r1, #3
 800f4ca:	6820      	ldr	r0, [r4, #0]
	sensors->AddSensorData<uint16_t>(ENERGY_MONITORING_LTC2947, REG_MOTOR_VOLTAGE_RAW, true);
	sensors->AddMemoryReadSequence(ENERGY_MONITORING_LTC2947, REG_MOTOR_VOLTAGE_RAW, LTC2947_V, LTC2947_V_SIZE);

	// Add reading of motor raw current
	sensors->AddSensorData<uint32_t>(ENERGY_MONITORING_LTC2947, REG_MOTOR_CURRENT_RAW, true);
	sensors->AddMemoryReadSequence(ENERGY_MONITORING_LTC2947, REG_MOTOR_CURRENT_RAW, LTC2947_I, LTC2947_I_SIZE);
 800f4cc:	2503      	movs	r5, #3
	sensors->AddSensor(MOTOR, ENERGY_MONITORING_LTC2947, LTC2947_ADDRESS);
 800f4ce:	f00d fa5b 	bl	801c988 <_ZN7Sensors9AddSensorEhht>
	sensors->AddSensorData<uint16_t>(ENERGY_MONITORING_LTC2947, REG_MOTOR_VOLTAGE_RAW, true);
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	f240 2223 	movw	r2, #547	@ 0x223
 800f4d8:	2104      	movs	r1, #4
 800f4da:	6820      	ldr	r0, [r4, #0]
 800f4dc:	f7ff ffb0 	bl	800f440 <_ZN7Sensors13AddSensorDataItEEbhtb.isra.0>
	sensors->AddMemoryReadSequence(ENERGY_MONITORING_LTC2947, REG_MOTOR_VOLTAGE_RAW, LTC2947_V, LTC2947_V_SIZE);
 800f4e0:	2302      	movs	r3, #2
 800f4e2:	f240 2223 	movw	r2, #547	@ 0x223
 800f4e6:	2104      	movs	r1, #4
 800f4e8:	9300      	str	r3, [sp, #0]
 800f4ea:	23a0      	movs	r3, #160	@ 0xa0
 800f4ec:	6820      	ldr	r0, [r4, #0]
 800f4ee:	f00c fc7d 	bl	801bdec <_ZN7Sensors21AddMemoryReadSequenceEhttt>
	sensors->AddSensorData<uint32_t>(ENERGY_MONITORING_LTC2947, REG_MOTOR_CURRENT_RAW, true);
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	f44f 7209 	mov.w	r2, #548	@ 0x224
 800f4f8:	2104      	movs	r1, #4
 800f4fa:	6820      	ldr	r0, [r4, #0]
 800f4fc:	f7ff ffb6 	bl	800f46c <_ZN7Sensors13AddSensorDataImEEbhtb.isra.0>
	sensors->AddMemoryReadSequence(ENERGY_MONITORING_LTC2947, REG_MOTOR_CURRENT_RAW, LTC2947_I, LTC2947_I_SIZE);
 800f500:	9500      	str	r5, [sp, #0]
 800f502:	2390      	movs	r3, #144	@ 0x90
 800f504:	f44f 7209 	mov.w	r2, #548	@ 0x224
 800f508:	2104      	movs	r1, #4
 800f50a:	6820      	ldr	r0, [r4, #0]
 800f50c:	f00c fc6e 	bl	801bdec <_ZN7Sensors21AddMemoryReadSequenceEhttt>

	// Add reading of motor raw power
	sensors->AddSensorData<uint32_t>(ENERGY_MONITORING_LTC2947, REG_MOTOR_POWER_RAW, true);
 800f510:	2301      	movs	r3, #1
 800f512:	f240 2225 	movw	r2, #549	@ 0x225
 800f516:	2104      	movs	r1, #4
 800f518:	6820      	ldr	r0, [r4, #0]
 800f51a:	f7ff ffa7 	bl	800f46c <_ZN7Sensors13AddSensorDataImEEbhtb.isra.0>
	sensors->AddMemoryReadSequence(ENERGY_MONITORING_LTC2947, REG_MOTOR_POWER_RAW, LTC2947_P, LTC2947_P_SIZE);
 800f51e:	2393      	movs	r3, #147	@ 0x93
 800f520:	f240 2225 	movw	r2, #549	@ 0x225
 800f524:	9500      	str	r5, [sp, #0]
 800f526:	2104      	movs	r1, #4
 800f528:	6820      	ldr	r0, [r4, #0]
 800f52a:	f00c fc5f 	bl	801bdec <_ZN7Sensors21AddMemoryReadSequenceEhttt>
	uint8_t type = registers->GetTypeID<T>(&success);
 800f52e:	f10d 000f 	add.w	r0, sp, #15

	// Add reading of motor raw energy
	sensors->AddSensorData<uint64_t>(ENERGY_MONITORING_LTC2947, REG_MOTOR_ENERGY_RAW, true);
 800f532:	6825      	ldr	r5, [r4, #0]
 800f534:	f7ff fdfe 	bl	800f134 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0>
	if (!success) return false;
 800f538:	f89d 200f 	ldrb.w	r2, [sp, #15]
	uint8_t type = registers->GetTypeID<T>(&success);
 800f53c:	4603      	mov	r3, r0
	if (!success) return false;
 800f53e:	b13a      	cbz	r2, 800f550 <_ZN15PlatformSensors14AddMotorSensorEv+0xa8>
	return AddSensorDataWithType(sensor_ID, sensor_register, type, publishable);
 800f540:	2201      	movs	r2, #1
 800f542:	2104      	movs	r1, #4
 800f544:	4628      	mov	r0, r5
 800f546:	9200      	str	r2, [sp, #0]
 800f548:	f240 2226 	movw	r2, #550	@ 0x226
 800f54c:	f00d fc4a 	bl	801cde4 <_ZN7Sensors21AddSensorDataWithTypeEhthb>
	sensors->AddMemoryReadSequence(ENERGY_MONITORING_LTC2947, REG_MOTOR_ENERGY_RAW, LTC2947_E1, LTC2947_ENERGY1_SIZE);
 800f550:	2306      	movs	r3, #6
 800f552:	f240 2226 	movw	r2, #550	@ 0x226
 800f556:	2104      	movs	r1, #4
 800f558:	9300      	str	r3, [sp, #0]
 800f55a:	6820      	ldr	r0, [r4, #0]
 800f55c:	f00c fc46 	bl	801bdec <_ZN7Sensors21AddMemoryReadSequenceEhttt>

	// Add reading of sensor raw temperature
	sensors->AddSensorData<uint16_t>(ENERGY_MONITORING_LTC2947, REG_MOTOR_TEMPERATURE_RAW, true);
 800f560:	6820      	ldr	r0, [r4, #0]
 800f562:	2301      	movs	r3, #1
 800f564:	f240 2227 	movw	r2, #551	@ 0x227
 800f568:	2104      	movs	r1, #4
 800f56a:	f7ff ff69 	bl	800f440 <_ZN7Sensors13AddSensorDataItEEbhtb.isra.0>
	sensors->AddMemoryReadSequence(ENERGY_MONITORING_LTC2947, REG_MOTOR_TEMPERATURE_RAW, LTC2947_TEMP, LTC2947_TEMP_SIZE);
 800f56e:	2302      	movs	r3, #2
 800f570:	f240 2227 	movw	r2, #551	@ 0x227
 800f574:	2104      	movs	r1, #4
 800f576:	9300      	str	r3, [sp, #0]
 800f578:	23a2      	movs	r3, #162	@ 0xa2
 800f57a:	6820      	ldr	r0, [r4, #0]
 800f57c:	f00c fc36 	bl	801bdec <_ZN7Sensors21AddMemoryReadSequenceEhttt>

	// Add sensor callback
	sensors->AddSensorCallback(ENERGY_MONITORING_LTC2947, (void*) this,
 800f580:	4b04      	ldr	r3, [pc, #16]	@ (800f594 <_ZN15PlatformSensors14AddMotorSensorEv+0xec>)
 800f582:	4622      	mov	r2, r4
 800f584:	2104      	movs	r1, #4
 800f586:	6820      	ldr	r0, [r4, #0]
				  if (success)
					 self->Tmotor = T_raw * 0.204f + 5.5; // in °C
			  }
		  }
	);
}
 800f588:	b005      	add	sp, #20
 800f58a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	sensors->AddSensorCallback(ENERGY_MONITORING_LTC2947, (void*) this,
 800f58e:	f00a bfe6 	b.w	801a55e <_ZN7Sensors17AddSensorCallbackEhPvPFvS0_E>
 800f592:	bf00      	nop
 800f594:	0800fb29 	.word	0x0800fb29

0800f598 <_ZN15PlatformSensors19ActivateMotorSensorEv>:

/**
 * @brief Activate motor sensor
 */
void PlatformSensors::ActivateMotorSensor(void) {
 800f598:	b510      	push	{r4, lr}
 800f59a:	4604      	mov	r4, r0
	// Activate sensor data
#ifdef MEAS_MOTOR_VOLTAGE_RAW
	sensors->ActivateSensorData(ENERGY_MONITORING_LTC2947, REG_MOTOR_VOLTAGE_RAW);
 800f59c:	f240 2223 	movw	r2, #547	@ 0x223
 800f5a0:	2104      	movs	r1, #4
 800f5a2:	6800      	ldr	r0, [r0, #0]
 800f5a4:	f00b f8d3 	bl	801a74e <_ZN7Sensors18ActivateSensorDataEht>
#endif
#ifdef MEAS_MOTOR_CURRENT_RAW
	sensors->ActivateSensorData(ENERGY_MONITORING_LTC2947, REG_MOTOR_CURRENT_RAW);
 800f5a8:	f44f 7209 	mov.w	r2, #548	@ 0x224
 800f5ac:	2104      	movs	r1, #4
 800f5ae:	6820      	ldr	r0, [r4, #0]
 800f5b0:	f00b f8cd 	bl	801a74e <_ZN7Sensors18ActivateSensorDataEht>
#endif
#ifdef MEAS_MOTOR_POWER_RAW
	sensors->ActivateSensorData(ENERGY_MONITORING_LTC2947, REG_MOTOR_POWER_RAW);
 800f5b4:	f240 2225 	movw	r2, #549	@ 0x225
 800f5b8:	2104      	movs	r1, #4
 800f5ba:	6820      	ldr	r0, [r4, #0]
 800f5bc:	f00b f8c7 	bl	801a74e <_ZN7Sensors18ActivateSensorDataEht>
#endif
#ifdef MEAS_MOTOR_ENERGY_RAW
	sensors->ActivateSensorData(ENERGY_MONITORING_LTC2947, REG_MOTOR_ENERGY_RAW);
 800f5c0:	f240 2226 	movw	r2, #550	@ 0x226
 800f5c4:	2104      	movs	r1, #4
 800f5c6:	6820      	ldr	r0, [r4, #0]
 800f5c8:	f00b f8c1 	bl	801a74e <_ZN7Sensors18ActivateSensorDataEht>
#endif
#ifdef MEAS_MOTOR_TEMPERATURE_RAW
	sensors->ActivateSensorData(ENERGY_MONITORING_LTC2947, REG_MOTOR_TEMPERATURE_RAW);
 800f5cc:	f240 2227 	movw	r2, #551	@ 0x227
 800f5d0:	2104      	movs	r1, #4
 800f5d2:	6820      	ldr	r0, [r4, #0]
 800f5d4:	f00b f8bb 	bl	801a74e <_ZN7Sensors18ActivateSensorDataEht>
#endif

	// Activate sensor
#ifdef ENERGY_MONITORING_LTC2947_ACTIVE
	sensors->ActivateSensor(ENERGY_MONITORING_LTC2947);
 800f5d8:	2104      	movs	r1, #4
 800f5da:	6820      	ldr	r0, [r4, #0]
 800f5dc:	f00a fff3 	bl	801a5c6 <_ZN7Sensors14ActivateSensorEh>
#endif

#ifdef MOTOR_ACTIVE
	// Activate group
	sensors->ActivateSensorGroup(MOTOR);
 800f5e0:	6820      	ldr	r0, [r4, #0]
 800f5e2:	2103      	movs	r1, #3
#endif
}
 800f5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sensors->ActivateSensorGroup(MOTOR);
 800f5e8:	f00a bf5b 	b.w	801a4a2 <_ZN7Sensors19ActivateSensorGroupEh>

0800f5ec <_ZN15PlatformSensors25SetupMotorSensorPublisherEv>:
/**
 * @brief Setup motor sensor publisher
 *
 * @param input interface_ID: interface to publish data on
 */
void PlatformSensors::SetupMotorSensorPublisher(void) {
 800f5ec:	b510      	push	{r4, lr}
 800f5ee:	4604      	mov	r4, r0
	// Link interface to publisher
	publishers->LinkToInterface(MOTOR, PUBLISHER_MOTOR_INTERFACE);
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	2103      	movs	r1, #3
 800f5f4:	6880      	ldr	r0, [r0, #8]
 800f5f6:	f009 f8c7 	bl	8018788 <_ZN10Publishers15LinkToInterfaceEhh>

	// Setup publisher
	publishers->SetPublisherPrescaler(MOTOR, PUBLISHER_MOTOR_PRESCALER);
 800f5fa:	2201      	movs	r2, #1
 800f5fc:	2103      	movs	r1, #3
 800f5fe:	68a0      	ldr	r0, [r4, #8]
 800f600:	f008 fe0b 	bl	801821a <_ZN10Publishers21SetPublisherPrescalerEht>
	publishers->SetPublishAddress(MOTOR, PUBLISHER_MOTOR_INTERFACE, PUBLISHER_MOTOR_ADDRESS);
 800f604:	23ff      	movs	r3, #255	@ 0xff
 800f606:	2200      	movs	r2, #0
 800f608:	2103      	movs	r1, #3
 800f60a:	68a0      	ldr	r0, [r4, #8]
 800f60c:	f008 fee2 	bl	80183d4 <_ZN10Publishers17SetPublishAddressEhhh>

	// Add topics
	publishers->AddTopic(MOTOR, REG_MOTOR_VOLTAGE);
 800f610:	f44f 720a 	mov.w	r2, #552	@ 0x228
 800f614:	2103      	movs	r1, #3
 800f616:	68a0      	ldr	r0, [r4, #8]
 800f618:	f009 f82e 	bl	8018678 <_ZN10Publishers8AddTopicEht>
	publishers->AddTopic(MOTOR, REG_MOTOR_CURRENT);
 800f61c:	f240 2229 	movw	r2, #553	@ 0x229
 800f620:	2103      	movs	r1, #3
 800f622:	68a0      	ldr	r0, [r4, #8]
 800f624:	f009 f828 	bl	8018678 <_ZN10Publishers8AddTopicEht>
	publishers->AddTopic(MOTOR, REG_MOTOR_POWER);
 800f628:	f240 222a 	movw	r2, #554	@ 0x22a
 800f62c:	2103      	movs	r1, #3
 800f62e:	68a0      	ldr	r0, [r4, #8]
 800f630:	f009 f822 	bl	8018678 <_ZN10Publishers8AddTopicEht>
	publishers->AddTopic(MOTOR, REG_MOTOR_ENERGY_DOUBLE);
 800f634:	f240 222b 	movw	r2, #555	@ 0x22b
 800f638:	2103      	movs	r1, #3
 800f63a:	68a0      	ldr	r0, [r4, #8]
 800f63c:	f009 f81c 	bl	8018678 <_ZN10Publishers8AddTopicEht>
	publishers->AddTopic(MOTOR, REG_MOTOR_ENERGY_FLOAT);
 800f640:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 800f644:	2103      	movs	r1, #3
 800f646:	68a0      	ldr	r0, [r4, #8]
 800f648:	f009 f816 	bl	8018678 <_ZN10Publishers8AddTopicEht>
	publishers->AddTopic(MOTOR, REG_MOTOR_TEMPERATURE);
 800f64c:	f240 222d 	movw	r2, #557	@ 0x22d
 800f650:	2103      	movs	r1, #3
 800f652:	68a0      	ldr	r0, [r4, #8]
 800f654:	f009 f810 	bl	8018678 <_ZN10Publishers8AddTopicEht>

	// Activate topics
#ifdef PUBLISH_MOTOR_TIMEBASE
	publishers->ActivateTopic(MOTOR, REG_TIMEBASE);
 800f658:	2200      	movs	r2, #0
 800f65a:	2103      	movs	r1, #3
 800f65c:	68a0      	ldr	r0, [r4, #8]
 800f65e:	f008 fe7f 	bl	8018360 <_ZN10Publishers13ActivateTopicEht>
#endif
#ifdef PUBLISH_MOTOR_TEMPERATURE_RAW
	publishers->ActivateTopic(MOTOR, REG_MOTOR_TEMPERATURE_RAW);
#endif
#ifdef PUBLISH_MOTOR_VOLTAGE
	publishers->ActivateTopic(MOTOR, REG_MOTOR_VOLTAGE);
 800f662:	f44f 720a 	mov.w	r2, #552	@ 0x228
 800f666:	2103      	movs	r1, #3
 800f668:	68a0      	ldr	r0, [r4, #8]
 800f66a:	f008 fe79 	bl	8018360 <_ZN10Publishers13ActivateTopicEht>
#endif
#ifdef PUBLISH_MOTOR_ENERGY_DOUBLE
	publishers->ActivateTopic(MOTOR, REG_MOTOR_ENERGY_DOUBLE);
#endif
#ifdef PUBLISH_MOTOR_ENERGY_FLOAT
	publishers->ActivateTopic(MOTOR, REG_MOTOR_ENERGY_FLOAT);
 800f66e:	2103      	movs	r1, #3
 800f670:	68a0      	ldr	r0, [r4, #8]
 800f672:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 800f676:	f008 fe73 	bl	8018360 <_ZN10Publishers13ActivateTopicEht>
	publishers->ActivateTopic(MOTOR, REG_MOTOR_TEMPERATURE);
#endif

#ifdef PUBLISHER_MOTOR_ACTIVE
	// Activate publisher
	publishers->ActivatePublisher(MOTOR);
 800f67a:	68a0      	ldr	r0, [r4, #8]
 800f67c:	2103      	movs	r1, #3
#endif
}
 800f67e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	publishers->ActivatePublisher(MOTOR);
 800f682:	f008 bdb8 	b.w	80181f6 <_ZN10Publishers17ActivatePublisherEh>

0800f686 <_ZN15PlatformSensors20ConfigureMotorSensorEv>:

/**
 * @brief Configure motor sensor
 */
void PlatformSensors::ConfigureMotorSensor(void) {
 800f686:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Reset the sensor
	sensors->ConfigureSensor(ENERGY_MONITORING_LTC2947, LTC2947_OPCTL, LTC2947_OPCTL_RST, HAL_MAX_DELAY);
 800f688:	f04f 35ff 	mov.w	r5, #4294967295
void PlatformSensors::ConfigureMotorSensor(void) {
 800f68c:	4604      	mov	r4, r0
	sensors->ConfigureSensor(ENERGY_MONITORING_LTC2947, LTC2947_OPCTL, LTC2947_OPCTL_RST, HAL_MAX_DELAY);
 800f68e:	2380      	movs	r3, #128	@ 0x80
 800f690:	22f0      	movs	r2, #240	@ 0xf0
 800f692:	2104      	movs	r1, #4
 800f694:	9500      	str	r5, [sp, #0]
 800f696:	6800      	ldr	r0, [r0, #0]
 800f698:	f00a fff1 	bl	801a67e <_ZN7Sensors15ConfigureSensorEhthm>

	HAL_Delay(100);
 800f69c:	2064      	movs	r0, #100	@ 0x64
 800f69e:	f7f3 ff39 	bl	8003514 <HAL_Delay>

	// Configure sensor
//	sensors->ConfigureSensor(ENERGY_MONITORING_LTC2947, LTC2947_TBCTL, 0xF2, HAL_MAX_DELAY);					// use external oscillator
	sensors->ConfigureSensor(ENERGY_MONITORING_LTC2947, LTC2947_OPCTL, LTC2947_OPCTL_CONT, HAL_MAX_DELAY); 	// continuous reading
 800f6a2:	2308      	movs	r3, #8
 800f6a4:	22f0      	movs	r2, #240	@ 0xf0
 800f6a6:	2104      	movs	r1, #4
 800f6a8:	9500      	str	r5, [sp, #0]
 800f6aa:	6820      	ldr	r0, [r4, #0]
 800f6ac:	f00a ffe7 	bl	801a67e <_ZN7Sensors15ConfigureSensorEhthm>
}
 800f6b0:	b003      	add	sp, #12
 800f6b2:	bd30      	pop	{r4, r5, pc}

0800f6b4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb>:
 * @param output length: output length
 * @param input use_semaphore: false to disable the use of semaphores for this access. DEFAULT=true
 * @return whether successful
 */
template <typename T>
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800f6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b8:	f2ad 4d14 	subw	sp, sp, #1044	@ 0x414
 800f6bc:	4689      	mov	r9, r1
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f6be:	f04f 31ff 	mov.w	r1, #4294967295
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800f6c2:	461f      	mov	r7, r3
 800f6c4:	9000      	str	r0, [sp, #0]
 800f6c6:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f6c8:	6800      	ldr	r0, [r0, #0]
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800f6ca:	f89d b438 	ldrb.w	fp, [sp, #1080]	@ 0x438
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f6ce:	f7fd fbcb 	bl	800ce68 <osSemaphoreAcquire>
	// Find register
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f6d2:	f10d 020f 	add.w	r2, sp, #15
 800f6d6:	4649      	mov	r1, r9
 800f6d8:	9800      	ldr	r0, [sp, #0]
 800f6da:	f00a f8c2 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800f6de:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f6e2:	4604      	mov	r4, r0
	if (!success) {
 800f6e4:	b953      	cbnz	r3, 800f6fc <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x48>
	}

	// Get type ID
	uint8_t registered_type = GetTypeID<T>(&success);
	if (!success) {
		osSemaphoreRelease(RegistersSemaphore);
 800f6e6:	9b00      	ldr	r3, [sp, #0]
		return false;
 800f6e8:	f04f 0a00 	mov.w	sl, #0
		osSemaphoreRelease(RegistersSemaphore);
 800f6ec:	6818      	ldr	r0, [r3, #0]
 800f6ee:	f7fd fbef 	bl	800ced0 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
		return true;
	}
	osSemaphoreRelease(RegistersSemaphore);
	return true;
}
 800f6f2:	4650      	mov	r0, sl
 800f6f4:	f20d 4d14 	addw	sp, sp, #1044	@ 0x414
 800f6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800f6fc:	f10d 000f 	add.w	r0, sp, #15
 800f700:	f7ff fe02 	bl	800f308 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 800f704:	f89d a00f 	ldrb.w	sl, [sp, #15]
 800f708:	f1ba 0f00 	cmp.w	sl, #0
 800f70c:	d0eb      	beq.n	800f6e6 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x32>
	if (target_register->register_info.type != registered_type) {
 800f70e:	7923      	ldrb	r3, [r4, #4]
 800f710:	4283      	cmp	r3, r0
 800f712:	d1e8      	bne.n	800f6e6 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 800f714:	3304      	adds	r3, #4
 800f716:	9a00      	ldr	r2, [sp, #0]
 800f718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d0e2      	beq.n	800f6e6 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x32>
	if (target_register->access.read) {
 800f720:	7a62      	ldrb	r2, [r4, #9]
 800f722:	2a00      	cmp	r2, #0
 800f724:	d05a      	beq.n	800f7dc <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x128>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800f726:	8961      	ldrh	r1, [r4, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 800f728:	2200      	movs	r2, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f72a:	e9d3 0300 	ldrd	r0, r3, [r3]
 800f72e:	f88d 200f 	strb.w	r2, [sp, #15]
 800f732:	1a1b      	subs	r3, r3, r0
	if (__n >= this->size())
 800f734:	ebb1 1f23 	cmp.w	r1, r3, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f738:	ea4f 1223 	mov.w	r2, r3, asr #4
	if (__n >= this->size())
 800f73c:	d302      	bcc.n	800f744 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x90>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800f73e:	4838      	ldr	r0, [pc, #224]	@ (800f820 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x16c>)
 800f740:	f00e fd1b 	bl	801e17a <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 800f744:	010b      	lsls	r3, r1, #4
 800f746:	eb00 1101 	add.w	r1, r0, r1, lsl #4
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800f74a:	f850 8003 	ldr.w	r8, [r0, r3]
 800f74e:	684b      	ldr	r3, [r1, #4]
 800f750:	9301      	str	r3, [sp, #4]
 800f752:	68cb      	ldr	r3, [r1, #12]
 800f754:	461e      	mov	r6, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800f756:	f1bb 0f00 	cmp.w	fp, #0
 800f75a:	d006      	beq.n	800f76a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xb6>
 800f75c:	68e3      	ldr	r3, [r4, #12]
 800f75e:	b123      	cbz	r3, 800f76a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xb6>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 800f760:	f04f 31ff 	mov.w	r1, #4294967295
 800f764:	6818      	ldr	r0, [r3, #0]
 800f766:	f7fd fb7f 	bl	800ce68 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 800f76a:	7863      	ldrb	r3, [r4, #1]
 800f76c:	b1db      	cbz	r3, 800f7a6 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xf2>
			if (output != NULL) {
 800f76e:	2d00      	cmp	r5, #0
 800f770:	d039      	beq.n	800f7e6 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x132>
				*callback_output = output;
 800f772:	462a      	mov	r2, r5
 800f774:	2300      	movs	r3, #0
 800f776:	601a      	str	r2, [r3, #0]
			if (callbacks.read != NULL) {
 800f778:	b1ae      	cbz	r6, 800f7a6 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xf2>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800f77a:	463b      	mov	r3, r7
 800f77c:	2200      	movs	r2, #0
 800f77e:	4649      	mov	r1, r9
 800f780:	9801      	ldr	r0, [sp, #4]
 800f782:	47b0      	blx	r6
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800f784:	7963      	ldrb	r3, [r4, #5]
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800f786:	f88d 000f 	strb.w	r0, [sp, #15]
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800f78a:	b373      	cbz	r3, 800f7ea <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x136>
 800f78c:	88e3      	ldrh	r3, [r4, #6]
 800f78e:	b103      	cbz	r3, 800f792 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xde>
					*length = 1;
 800f790:	803b      	strh	r3, [r7, #0]
				if (*callback_output != output && output != NULL) {
 800f792:	2300      	movs	r3, #0
 800f794:	6819      	ldr	r1, [r3, #0]
 800f796:	42a9      	cmp	r1, r5
 800f798:	d005      	beq.n	800f7a6 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xf2>
 800f79a:	b125      	cbz	r5, 800f7a6 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xf2>
						output[index] = (*callback_output )[index];
 800f79c:	883a      	ldrh	r2, [r7, #0]
 800f79e:	4628      	mov	r0, r5
 800f7a0:	0092      	lsls	r2, r2, #2
 800f7a2:	f00f fca7 	bl	801f0f4 <memcpy>
		if (not success && target_register->mode.pointer) {
 800f7a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800f7aa:	b97b      	cbnz	r3, 800f7cc <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x118>
 800f7ac:	7823      	ldrb	r3, [r4, #0]
 800f7ae:	b16b      	cbz	r3, 800f7cc <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x118>
			success = true;
 800f7b0:	2301      	movs	r3, #1
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800f7b2:	7962      	ldrb	r2, [r4, #5]
			success = true;
 800f7b4:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800f7b8:	b35a      	cbz	r2, 800f812 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x15e>
 800f7ba:	88e2      	ldrh	r2, [r4, #6]
 800f7bc:	bb02      	cbnz	r2, 800f800 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x14c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f7be:	e9d8 1300 	ldrd	r1, r3, [r8]
 800f7c2:	1a5b      	subs	r3, r3, r1
				*length = register_vector->size();
 800f7c4:	f3c3 038f 	ubfx	r3, r3, #2, #16
 800f7c8:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 800f7ca:	b9ad      	cbnz	r5, 800f7f8 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x144>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800f7cc:	f1bb 0f00 	cmp.w	fp, #0
 800f7d0:	d004      	beq.n	800f7dc <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x128>
 800f7d2:	68e3      	ldr	r3, [r4, #12]
 800f7d4:	b113      	cbz	r3, 800f7dc <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x128>
			osSemaphoreRelease(*(target_register->register_semaphore));
 800f7d6:	6818      	ldr	r0, [r3, #0]
 800f7d8:	f7fd fb7a 	bl	800ced0 <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 800f7dc:	9b00      	ldr	r3, [sp, #0]
 800f7de:	6818      	ldr	r0, [r3, #0]
 800f7e0:	f7fd fb76 	bl	800ced0 <osSemaphoreRelease>
	return true;
 800f7e4:	e785      	b.n	800f6f2 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x3e>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 800f7e6:	aa04      	add	r2, sp, #16
 800f7e8:	e7c4      	b.n	800f774 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xc0>
					*length = 1;
 800f7ea:	2301      	movs	r3, #1
 800f7ec:	e7d0      	b.n	800f790 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xdc>
						output[index] = (*register_vector)[index];
 800f7ee:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800f7f2:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
					for (uint16_t index = 0; index < *length; index++) {
 800f7f6:	3201      	adds	r2, #1
 800f7f8:	b290      	uxth	r0, r2
 800f7fa:	4298      	cmp	r0, r3
 800f7fc:	d3f7      	bcc.n	800f7ee <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x13a>
 800f7fe:	e7e5      	b.n	800f7cc <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x118>
				*length = target_register->register_info.length;
 800f800:	803a      	strh	r2, [r7, #0]
				if (output != NULL) {
 800f802:	2d00      	cmp	r5, #0
 800f804:	d0e2      	beq.n	800f7cc <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x118>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800f806:	0092      	lsls	r2, r2, #2
 800f808:	4641      	mov	r1, r8
 800f80a:	4628      	mov	r0, r5
 800f80c:	f00f fb7a 	bl	801ef04 <memmove>
	  return __result + _Num;
 800f810:	e7dc      	b.n	800f7cc <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x118>
				*length = 1;
 800f812:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 800f814:	2d00      	cmp	r5, #0
 800f816:	d0d9      	beq.n	800f7cc <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x118>
					*output = *callbacks.pointer;
 800f818:	f8d8 3000 	ldr.w	r3, [r8]
 800f81c:	602b      	str	r3, [r5, #0]
 800f81e:	e7d5      	b.n	800f7cc <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x118>
 800f820:	0801f44c 	.word	0x0801f44c

0800f824 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb>:
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800f824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f828:	4606      	mov	r6, r0
 800f82a:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 800f82e:	4688      	mov	r8, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f830:	6800      	ldr	r0, [r0, #0]
 800f832:	f04f 31ff 	mov.w	r1, #4294967295
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800f836:	4615      	mov	r5, r2
 800f838:	469b      	mov	fp, r3
 800f83a:	f89d a238 	ldrb.w	sl, [sp, #568]	@ 0x238
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f83e:	f7fd fb13 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f842:	f10d 020f 	add.w	r2, sp, #15
 800f846:	4641      	mov	r1, r8
 800f848:	4630      	mov	r0, r6
 800f84a:	f00a f80a 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800f84e:	f89d 200f 	ldrb.w	r2, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f852:	4604      	mov	r4, r0
	if (!success) {
 800f854:	b94a      	cbnz	r2, 800f86a <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x46>
		return false;
 800f856:	f04f 0900 	mov.w	r9, #0
		osSemaphoreRelease(RegistersSemaphore);
 800f85a:	6830      	ldr	r0, [r6, #0]
 800f85c:	f7fd fb38 	bl	800ced0 <osSemaphoreRelease>
}
 800f860:	4648      	mov	r0, r9
 800f862:	f50d 7d05 	add.w	sp, sp, #532	@ 0x214
 800f866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800f86a:	f10d 000f 	add.w	r0, sp, #15
 800f86e:	f7ff fcfd 	bl	800f26c <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	if (!success) {
 800f872:	f89d 900f 	ldrb.w	r9, [sp, #15]
 800f876:	f1b9 0f00 	cmp.w	r9, #0
 800f87a:	d0ec      	beq.n	800f856 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x32>
	if (target_register->register_info.type != registered_type) {
 800f87c:	7922      	ldrb	r2, [r4, #4]
 800f87e:	4282      	cmp	r2, r0
 800f880:	d1e9      	bne.n	800f856 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 800f882:	3204      	adds	r2, #4
 800f884:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800f888:	2a00      	cmp	r2, #0
 800f88a:	d0e4      	beq.n	800f856 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x32>
	if (target_register->access.read) {
 800f88c:	7a61      	ldrb	r1, [r4, #9]
 800f88e:	2900      	cmp	r1, #0
 800f890:	d057      	beq.n	800f942 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x11e>
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 800f892:	2100      	movs	r1, #0
 800f894:	e9d2 7000 	ldrd	r7, r0, [r2]
 800f898:	f88d 100f 	strb.w	r1, [sp, #15]
 800f89c:	1bc0      	subs	r0, r0, r7
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800f89e:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 800f8a0:	ebb1 1f20 	cmp.w	r1, r0, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f8a4:	ea4f 1220 	mov.w	r2, r0, asr #4
	if (__n >= this->size())
 800f8a8:	d302      	bcc.n	800f8b0 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x8c>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800f8aa:	4840      	ldr	r0, [pc, #256]	@ (800f9ac <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x188>)
 800f8ac:	f00e fc65 	bl	801e17a <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 800f8b0:	010a      	lsls	r2, r1, #4
 800f8b2:	eb07 1101 	add.w	r1, r7, r1, lsl #4
 800f8b6:	58bb      	ldr	r3, [r7, r2]
 800f8b8:	9300      	str	r3, [sp, #0]
 800f8ba:	684b      	ldr	r3, [r1, #4]
 800f8bc:	9301      	str	r3, [sp, #4]
 800f8be:	68cb      	ldr	r3, [r1, #12]
 800f8c0:	461f      	mov	r7, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800f8c2:	f1ba 0f00 	cmp.w	sl, #0
 800f8c6:	d006      	beq.n	800f8d6 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0xb2>
 800f8c8:	68e2      	ldr	r2, [r4, #12]
 800f8ca:	b122      	cbz	r2, 800f8d6 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0xb2>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 800f8cc:	f04f 31ff 	mov.w	r1, #4294967295
 800f8d0:	6810      	ldr	r0, [r2, #0]
 800f8d2:	f7fd fac9 	bl	800ce68 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 800f8d6:	7862      	ldrb	r2, [r4, #1]
 800f8d8:	b1b2      	cbz	r2, 800f908 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0xe4>
			if (output != NULL) {
 800f8da:	2d00      	cmp	r5, #0
 800f8dc:	d035      	beq.n	800f94a <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x126>
				*callback_output = output;
 800f8de:	4629      	mov	r1, r5
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	6011      	str	r1, [r2, #0]
			if (callbacks.read != NULL) {
 800f8e4:	b187      	cbz	r7, 800f908 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0xe4>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800f8e6:	465b      	mov	r3, fp
 800f8e8:	4641      	mov	r1, r8
 800f8ea:	9801      	ldr	r0, [sp, #4]
 800f8ec:	47b8      	blx	r7
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800f8ee:	7962      	ldrb	r2, [r4, #5]
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800f8f0:	f88d 000f 	strb.w	r0, [sp, #15]
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800f8f4:	b35a      	cbz	r2, 800f94e <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x12a>
 800f8f6:	88e2      	ldrh	r2, [r4, #6]
 800f8f8:	b10a      	cbz	r2, 800f8fe <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0xda>
					*length = 1;
 800f8fa:	f8ab 2000 	strh.w	r2, [fp]
				if (*callback_output != output && output != NULL) {
 800f8fe:	2200      	movs	r2, #0
 800f900:	6811      	ldr	r1, [r2, #0]
 800f902:	42a9      	cmp	r1, r5
 800f904:	d000      	beq.n	800f908 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0xe4>
 800f906:	bb85      	cbnz	r5, 800f96a <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x146>
		if (not success && target_register->mode.pointer) {
 800f908:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800f90c:	b98a      	cbnz	r2, 800f932 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x10e>
 800f90e:	7822      	ldrb	r2, [r4, #0]
 800f910:	b17a      	cbz	r2, 800f932 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x10e>
			success = true;
 800f912:	2201      	movs	r2, #1
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800f914:	7961      	ldrb	r1, [r4, #5]
			success = true;
 800f916:	f88d 200f 	strb.w	r2, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800f91a:	2900      	cmp	r1, #0
 800f91c:	d03d      	beq.n	800f99a <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x176>
 800f91e:	88e2      	ldrh	r2, [r4, #6]
 800f920:	bb8a      	cbnz	r2, 800f986 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x162>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f922:	9b00      	ldr	r3, [sp, #0]
 800f924:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f928:	1a09      	subs	r1, r1, r0
 800f92a:	1049      	asrs	r1, r1, #1
				*length = register_vector->size();
 800f92c:	f8ab 1000 	strh.w	r1, [fp]
				if (output != NULL) {
 800f930:	bb1d      	cbnz	r5, 800f97a <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x156>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800f932:	f1ba 0f00 	cmp.w	sl, #0
 800f936:	d004      	beq.n	800f942 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x11e>
 800f938:	68e3      	ldr	r3, [r4, #12]
 800f93a:	b113      	cbz	r3, 800f942 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x11e>
			osSemaphoreRelease(*(target_register->register_semaphore));
 800f93c:	6818      	ldr	r0, [r3, #0]
 800f93e:	f7fd fac7 	bl	800ced0 <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 800f942:	6830      	ldr	r0, [r6, #0]
 800f944:	f7fd fac4 	bl	800ced0 <osSemaphoreRelease>
	return true;
 800f948:	e78a      	b.n	800f860 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x3c>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 800f94a:	a904      	add	r1, sp, #16
 800f94c:	e7c8      	b.n	800f8e0 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0xbc>
					*length = 1;
 800f94e:	2201      	movs	r2, #1
 800f950:	e7d3      	b.n	800f8fa <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0xd6>
						output[index] = (*callback_output )[index];
 800f952:	b290      	uxth	r0, r2
 800f954:	3201      	adds	r2, #1
 800f956:	f831 c010 	ldrh.w	ip, [r1, r0, lsl #1]
 800f95a:	f825 c010 	strh.w	ip, [r5, r0, lsl #1]
					for (uint16_t index = 0; index < *length; index++) {
 800f95e:	f8bb c000 	ldrh.w	ip, [fp]
 800f962:	b290      	uxth	r0, r2
 800f964:	4584      	cmp	ip, r0
 800f966:	d8f4      	bhi.n	800f952 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x12e>
 800f968:	e7ce      	b.n	800f908 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0xe4>
 800f96a:	2200      	movs	r2, #0
 800f96c:	e7f7      	b.n	800f95e <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x13a>
	return *(this->_M_impl._M_start + __n);
 800f96e:	b291      	uxth	r1, r2
 800f970:	3201      	adds	r2, #1
						output[index] = (*register_vector)[index];
 800f972:	f830 7011 	ldrh.w	r7, [r0, r1, lsl #1]
 800f976:	f825 7011 	strh.w	r7, [r5, r1, lsl #1]
					for (uint16_t index = 0; index < *length; index++) {
 800f97a:	f8bb 7000 	ldrh.w	r7, [fp]
 800f97e:	b291      	uxth	r1, r2
 800f980:	428f      	cmp	r7, r1
 800f982:	d8f4      	bhi.n	800f96e <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x14a>
 800f984:	e7d5      	b.n	800f932 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x10e>
				*length = target_register->register_info.length;
 800f986:	f8ab 2000 	strh.w	r2, [fp]
				if (output != NULL) {
 800f98a:	2d00      	cmp	r5, #0
 800f98c:	d0d1      	beq.n	800f932 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x10e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800f98e:	0052      	lsls	r2, r2, #1
 800f990:	9900      	ldr	r1, [sp, #0]
 800f992:	4628      	mov	r0, r5
 800f994:	f00f fab6 	bl	801ef04 <memmove>
	  return __result + _Num;
 800f998:	e7cb      	b.n	800f932 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x10e>
				*length = 1;
 800f99a:	f8ab 2000 	strh.w	r2, [fp]
				if (output != NULL) {
 800f99e:	2d00      	cmp	r5, #0
 800f9a0:	d0c7      	beq.n	800f932 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x10e>
					*output = *callbacks.pointer;
 800f9a2:	9b00      	ldr	r3, [sp, #0]
 800f9a4:	881b      	ldrh	r3, [r3, #0]
 800f9a6:	802b      	strh	r3, [r5, #0]
 800f9a8:	e7c3      	b.n	800f932 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x10e>
 800f9aa:	bf00      	nop
 800f9ac:	0801f44c 	.word	0x0801f44c

0800f9b0 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb>:
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800f9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b4:	f6ad 0d14 	subw	sp, sp, #2068	@ 0x814
 800f9b8:	4689      	mov	r9, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f9ba:	f04f 31ff 	mov.w	r1, #4294967295
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800f9be:	461f      	mov	r7, r3
 800f9c0:	9000      	str	r0, [sp, #0]
 800f9c2:	4614      	mov	r4, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f9c4:	6800      	ldr	r0, [r0, #0]
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800f9c6:	f89d b838 	ldrb.w	fp, [sp, #2104]	@ 0x838
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f9ca:	f7fd fa4d 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f9ce:	f10d 020f 	add.w	r2, sp, #15
 800f9d2:	4649      	mov	r1, r9
 800f9d4:	9800      	ldr	r0, [sp, #0]
 800f9d6:	f009 ff44 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800f9da:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f9de:	4605      	mov	r5, r0
	if (!success) {
 800f9e0:	b953      	cbnz	r3, 800f9f8 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x48>
		osSemaphoreRelease(RegistersSemaphore);
 800f9e2:	9b00      	ldr	r3, [sp, #0]
		return false;
 800f9e4:	f04f 0a00 	mov.w	sl, #0
		osSemaphoreRelease(RegistersSemaphore);
 800f9e8:	6818      	ldr	r0, [r3, #0]
 800f9ea:	f7fd fa71 	bl	800ced0 <osSemaphoreRelease>
}
 800f9ee:	4650      	mov	r0, sl
 800f9f0:	f60d 0d14 	addw	sp, sp, #2068	@ 0x814
 800f9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800f9f8:	f10d 000f 	add.w	r0, sp, #15
 800f9fc:	f7ff fb9a 	bl	800f134 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0>
	if (!success) {
 800fa00:	f89d a00f 	ldrb.w	sl, [sp, #15]
 800fa04:	f1ba 0f00 	cmp.w	sl, #0
 800fa08:	d0eb      	beq.n	800f9e2 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x32>
	if (target_register->register_info.type != registered_type) {
 800fa0a:	792b      	ldrb	r3, [r5, #4]
 800fa0c:	4283      	cmp	r3, r0
 800fa0e:	d1e8      	bne.n	800f9e2 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 800fa10:	3304      	adds	r3, #4
 800fa12:	9a00      	ldr	r2, [sp, #0]
 800fa14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d0e2      	beq.n	800f9e2 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x32>
	if (target_register->access.read) {
 800fa1c:	7a6a      	ldrb	r2, [r5, #9]
 800fa1e:	2a00      	cmp	r2, #0
 800fa20:	d060      	beq.n	800fae4 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x134>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800fa22:	8969      	ldrh	r1, [r5, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 800fa24:	2200      	movs	r2, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fa26:	e9d3 0300 	ldrd	r0, r3, [r3]
 800fa2a:	f88d 200f 	strb.w	r2, [sp, #15]
 800fa2e:	1a1b      	subs	r3, r3, r0
	if (__n >= this->size())
 800fa30:	ebb1 1f23 	cmp.w	r1, r3, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fa34:	ea4f 1223 	mov.w	r2, r3, asr #4
	if (__n >= this->size())
 800fa38:	d302      	bcc.n	800fa40 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x90>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800fa3a:	483a      	ldr	r0, [pc, #232]	@ (800fb24 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x174>)
 800fa3c:	f00e fb9d 	bl	801e17a <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 800fa40:	010b      	lsls	r3, r1, #4
 800fa42:	eb00 1101 	add.w	r1, r0, r1, lsl #4
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800fa46:	f850 8003 	ldr.w	r8, [r0, r3]
 800fa4a:	684b      	ldr	r3, [r1, #4]
 800fa4c:	9301      	str	r3, [sp, #4]
 800fa4e:	68cb      	ldr	r3, [r1, #12]
 800fa50:	461e      	mov	r6, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800fa52:	f1bb 0f00 	cmp.w	fp, #0
 800fa56:	d006      	beq.n	800fa66 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0xb6>
 800fa58:	68eb      	ldr	r3, [r5, #12]
 800fa5a:	b123      	cbz	r3, 800fa66 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0xb6>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 800fa5c:	f04f 31ff 	mov.w	r1, #4294967295
 800fa60:	6818      	ldr	r0, [r3, #0]
 800fa62:	f7fd fa01 	bl	800ce68 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 800fa66:	786b      	ldrb	r3, [r5, #1]
 800fa68:	b1e3      	cbz	r3, 800faa4 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0xf4>
			if (output != NULL) {
 800fa6a:	2c00      	cmp	r4, #0
 800fa6c:	d03f      	beq.n	800faee <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x13e>
				*callback_output = output;
 800fa6e:	4622      	mov	r2, r4
 800fa70:	2300      	movs	r3, #0
 800fa72:	601a      	str	r2, [r3, #0]
			if (callbacks.read != NULL) {
 800fa74:	b1b6      	cbz	r6, 800faa4 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0xf4>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800fa76:	463b      	mov	r3, r7
 800fa78:	2200      	movs	r2, #0
 800fa7a:	4649      	mov	r1, r9
 800fa7c:	9801      	ldr	r0, [sp, #4]
 800fa7e:	47b0      	blx	r6
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800fa80:	796b      	ldrb	r3, [r5, #5]
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800fa82:	f88d 000f 	strb.w	r0, [sp, #15]
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d033      	beq.n	800faf2 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x142>
 800fa8a:	88eb      	ldrh	r3, [r5, #6]
 800fa8c:	b103      	cbz	r3, 800fa90 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0xe0>
					*length = 1;
 800fa8e:	803b      	strh	r3, [r7, #0]
				if (*callback_output != output && output != NULL) {
 800fa90:	2300      	movs	r3, #0
 800fa92:	6819      	ldr	r1, [r3, #0]
 800fa94:	42a1      	cmp	r1, r4
 800fa96:	d005      	beq.n	800faa4 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0xf4>
 800fa98:	b124      	cbz	r4, 800faa4 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0xf4>
						output[index] = (*callback_output )[index];
 800fa9a:	883a      	ldrh	r2, [r7, #0]
 800fa9c:	4620      	mov	r0, r4
 800fa9e:	00d2      	lsls	r2, r2, #3
 800faa0:	f00f fb28 	bl	801f0f4 <memcpy>
		if (not success && target_register->mode.pointer) {
 800faa4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800faa8:	b9a3      	cbnz	r3, 800fad4 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x124>
 800faaa:	782b      	ldrb	r3, [r5, #0]
 800faac:	b193      	cbz	r3, 800fad4 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x124>
			success = true;
 800faae:	2301      	movs	r3, #1
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800fab0:	796a      	ldrb	r2, [r5, #5]
			success = true;
 800fab2:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800fab6:	b362      	cbz	r2, 800fb12 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x162>
 800fab8:	88ea      	ldrh	r2, [r5, #6]
 800faba:	bb0a      	cbnz	r2, 800fb00 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x150>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fabc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fac0:	1a9b      	subs	r3, r3, r2
 800fac2:	10db      	asrs	r3, r3, #3
				*length = register_vector->size();
 800fac4:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 800fac6:	b12c      	cbz	r4, 800fad4 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x124>
 800fac8:	b29b      	uxth	r3, r3
 800faca:	3a08      	subs	r2, #8
 800facc:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
					for (uint16_t index = 0; index < *length; index++) {
 800fad0:	429c      	cmp	r4, r3
 800fad2:	d110      	bne.n	800faf6 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x146>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800fad4:	f1bb 0f00 	cmp.w	fp, #0
 800fad8:	d004      	beq.n	800fae4 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x134>
 800fada:	68eb      	ldr	r3, [r5, #12]
 800fadc:	b113      	cbz	r3, 800fae4 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x134>
			osSemaphoreRelease(*(target_register->register_semaphore));
 800fade:	6818      	ldr	r0, [r3, #0]
 800fae0:	f7fd f9f6 	bl	800ced0 <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 800fae4:	9b00      	ldr	r3, [sp, #0]
 800fae6:	6818      	ldr	r0, [r3, #0]
 800fae8:	f7fd f9f2 	bl	800ced0 <osSemaphoreRelease>
	return true;
 800faec:	e77f      	b.n	800f9ee <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x3e>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 800faee:	aa04      	add	r2, sp, #16
 800faf0:	e7be      	b.n	800fa70 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0xc0>
					*length = 1;
 800faf2:	2301      	movs	r3, #1
 800faf4:	e7cb      	b.n	800fa8e <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0xde>
						output[index] = (*register_vector)[index];
 800faf6:	e9f2 0102 	ldrd	r0, r1, [r2, #8]!
 800fafa:	e8e4 0102 	strd	r0, r1, [r4], #8
					for (uint16_t index = 0; index < *length; index++) {
 800fafe:	e7e7      	b.n	800fad0 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x120>
				*length = target_register->register_info.length;
 800fb00:	803a      	strh	r2, [r7, #0]
				if (output != NULL) {
 800fb02:	2c00      	cmp	r4, #0
 800fb04:	d0e6      	beq.n	800fad4 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x124>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800fb06:	00d2      	lsls	r2, r2, #3
 800fb08:	4641      	mov	r1, r8
 800fb0a:	4620      	mov	r0, r4
 800fb0c:	f00f f9fa 	bl	801ef04 <memmove>
	  return __result + _Num;
 800fb10:	e7e0      	b.n	800fad4 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x124>
				*length = 1;
 800fb12:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 800fb14:	2c00      	cmp	r4, #0
 800fb16:	d0dd      	beq.n	800fad4 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x124>
					*output = *callbacks.pointer;
 800fb18:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fb1c:	e9c4 2300 	strd	r2, r3, [r4]
 800fb20:	e7d8      	b.n	800fad4 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x124>
 800fb22:	bf00      	nop
 800fb24:	0801f44c 	.word	0x0801f44c

0800fb28 <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_>:
		  [](void* context) -> void {
 800fb28:	b510      	push	{r4, lr}
			  if (self->sensors->IsSensorDataActive(ENERGY_MONITORING_LTC2947, REG_MOTOR_VOLTAGE_RAW)) {
 800fb2a:	f240 2223 	movw	r2, #547	@ 0x223
		  [](void* context) -> void {
 800fb2e:	b086      	sub	sp, #24
 800fb30:	4604      	mov	r4, r0
			  if (self->sensors->IsSensorDataActive(ENERGY_MONITORING_LTC2947, REG_MOTOR_VOLTAGE_RAW)) {
 800fb32:	2104      	movs	r1, #4
 800fb34:	6800      	ldr	r0, [r0, #0]
 800fb36:	f00a fde6 	bl	801a706 <_ZN7Sensors18IsSensorDataActiveEht>
 800fb3a:	b1b0      	cbz	r0, 800fb6a <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x42>
				  success = self->registers->ReadRegister<uint16_t>(REG_MOTOR_VOLTAGE_RAW, &V_raw, &length, false);
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	aa04      	add	r2, sp, #16
 800fb40:	f240 2123 	movw	r1, #547	@ 0x223
 800fb44:	9300      	str	r3, [sp, #0]
 800fb46:	f10d 030e 	add.w	r3, sp, #14
 800fb4a:	6860      	ldr	r0, [r4, #4]
 800fb4c:	f7ff fe6a 	bl	800f824 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb>
				  if (success)
 800fb50:	b158      	cbz	r0, 800fb6a <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x42>
					 self->Vmotor = V_raw * 0.002f; // LSB = 2mV
 800fb52:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800fb56:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800fc7c <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x154>
 800fb5a:	ee07 3a90 	vmov	s15, r3
 800fb5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb62:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb66:	edc4 7a14 	vstr	s15, [r4, #80]	@ 0x50
			  if (self->sensors->IsSensorDataActive(ENERGY_MONITORING_LTC2947, REG_MOTOR_CURRENT_RAW)) {
 800fb6a:	f44f 7209 	mov.w	r2, #548	@ 0x224
 800fb6e:	2104      	movs	r1, #4
 800fb70:	6820      	ldr	r0, [r4, #0]
 800fb72:	f00a fdc8 	bl	801a706 <_ZN7Sensors18IsSensorDataActiveEht>
 800fb76:	b1c0      	cbz	r0, 800fbaa <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x82>
				  success = self->registers->ReadRegister<uint32_t>(REG_MOTOR_CURRENT_RAW, &I_raw, &length, false);
 800fb78:	2300      	movs	r3, #0
 800fb7a:	aa04      	add	r2, sp, #16
 800fb7c:	f44f 7109 	mov.w	r1, #548	@ 0x224
 800fb80:	9300      	str	r3, [sp, #0]
 800fb82:	f10d 030e 	add.w	r3, sp, #14
 800fb86:	6860      	ldr	r0, [r4, #4]
 800fb88:	f7ff fd94 	bl	800f6b4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb>
				  if (success)
 800fb8c:	b168      	cbz	r0, 800fbaa <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x82>
					 self->Imotor = I_raw * 0.003f * 0.999f; // LSB = 3mA + correction factor of 0.999 for a 60um copper thickness PCB
 800fb8e:	eddd 7a04 	vldr	s15, [sp, #16]
 800fb92:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800fc80 <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x158>
 800fb96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb9e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800fc84 <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x15c>
 800fba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fba6:	edc4 7a15 	vstr	s15, [r4, #84]	@ 0x54
			  if (self->sensors->IsSensorDataActive(ENERGY_MONITORING_LTC2947, REG_MOTOR_POWER_RAW)) {
 800fbaa:	f240 2225 	movw	r2, #549	@ 0x225
 800fbae:	2104      	movs	r1, #4
 800fbb0:	6820      	ldr	r0, [r4, #0]
 800fbb2:	f00a fda8 	bl	801a706 <_ZN7Sensors18IsSensorDataActiveEht>
 800fbb6:	b1c0      	cbz	r0, 800fbea <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0xc2>
				  success = self->registers->ReadRegister<uint32_t>(REG_MOTOR_POWER_RAW, &P_raw, &length, false);
 800fbb8:	2300      	movs	r3, #0
 800fbba:	aa04      	add	r2, sp, #16
 800fbbc:	f240 2125 	movw	r1, #549	@ 0x225
 800fbc0:	9300      	str	r3, [sp, #0]
 800fbc2:	f10d 030e 	add.w	r3, sp, #14
 800fbc6:	6860      	ldr	r0, [r4, #4]
 800fbc8:	f7ff fd74 	bl	800f6b4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb>
				  if (success)
 800fbcc:	b168      	cbz	r0, 800fbea <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0xc2>
					 self->Pmotor = P_raw * 0.05f * 0.999f; // LSB = 50mW + correction factor of 0.999 for a 60um copper thickness PCB
 800fbce:	eddd 7a04 	vldr	s15, [sp, #16]
 800fbd2:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800fc88 <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x160>
 800fbd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbda:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fbde:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800fc84 <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x15c>
 800fbe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fbe6:	edc4 7a16 	vstr	s15, [r4, #88]	@ 0x58
			  if (self->sensors->IsSensorDataActive(ENERGY_MONITORING_LTC2947, REG_MOTOR_ENERGY_RAW)) {
 800fbea:	f240 2226 	movw	r2, #550	@ 0x226
 800fbee:	2104      	movs	r1, #4
 800fbf0:	6820      	ldr	r0, [r4, #0]
 800fbf2:	f00a fd88 	bl	801a706 <_ZN7Sensors18IsSensorDataActiveEht>
 800fbf6:	b1f0      	cbz	r0, 800fc36 <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x10e>
				  success = self->registers->ReadRegister<uint64_t>(REG_MOTOR_ENERGY_RAW, &E_raw, &length, false);
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	aa04      	add	r2, sp, #16
 800fbfc:	f240 2126 	movw	r1, #550	@ 0x226
 800fc00:	9300      	str	r3, [sp, #0]
 800fc02:	f10d 030e 	add.w	r3, sp, #14
 800fc06:	6860      	ldr	r0, [r4, #4]
 800fc08:	f7ff fed2 	bl	800f9b0 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb>
				  if (success) {
 800fc0c:	b198      	cbz	r0, 800fc36 <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x10e>
					 self->Emotor = E_raw * 0.00001989f * 0.999f; // LSB = 19.89E-06 Ws or 0.6416 * 1/fEXT * 2^PRE * (DIV+1) [Ws] + correction factor of 0.999 for a 60um copper thickness PCB
 800fc0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fc12:	f7f0 fc37 	bl	8000484 <__aeabi_ul2f>
 800fc16:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800fc8c <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x164>
 800fc1a:	ee07 0a90 	vmov	s15, r0
 800fc1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fc22:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800fc84 <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x15c>
 800fc26:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fc2a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
				  	 self->Emotor_float = (float) self->Emotor;
 800fc2e:	edc4 7a1a 	vstr	s15, [r4, #104]	@ 0x68
					 self->Emotor = E_raw * 0.00001989f * 0.999f; // LSB = 19.89E-06 Ws or 0.6416 * 1/fEXT * 2^PRE * (DIV+1) [Ws] + correction factor of 0.999 for a 60um copper thickness PCB
 800fc32:	ed84 6b18 	vstr	d6, [r4, #96]	@ 0x60
			  if (self->sensors->IsSensorDataActive(ENERGY_MONITORING_LTC2947, REG_MOTOR_TEMPERATURE_RAW)) {
 800fc36:	f240 2227 	movw	r2, #551	@ 0x227
 800fc3a:	2104      	movs	r1, #4
 800fc3c:	6820      	ldr	r0, [r4, #0]
 800fc3e:	f00a fd62 	bl	801a706 <_ZN7Sensors18IsSensorDataActiveEht>
 800fc42:	b1c0      	cbz	r0, 800fc76 <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x14e>
				  success = self->registers->ReadRegister<uint16_t>(REG_MOTOR_TEMPERATURE_RAW, &T_raw, &length, false);
 800fc44:	2300      	movs	r3, #0
 800fc46:	aa04      	add	r2, sp, #16
 800fc48:	f240 2127 	movw	r1, #551	@ 0x227
 800fc4c:	9300      	str	r3, [sp, #0]
 800fc4e:	f10d 030e 	add.w	r3, sp, #14
 800fc52:	6860      	ldr	r0, [r4, #4]
 800fc54:	f7ff fde6 	bl	800f824 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb>
				  if (success)
 800fc58:	b168      	cbz	r0, 800fc76 <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x14e>
					 self->Tmotor = T_raw * 0.204f + 5.5; // in °C
 800fc5a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800fc5e:	eef1 7a06 	vmov.f32	s15, #22	@ 0x40b00000  5.5
 800fc62:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800fc90 <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x168>
 800fc66:	ee07 3a10 	vmov	s14, r3
 800fc6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fc6e:	eee7 7a26 	vfma.f32	s15, s14, s13
 800fc72:	edc4 7a1b 	vstr	s15, [r4, #108]	@ 0x6c
		  }
 800fc76:	b006      	add	sp, #24
 800fc78:	bd10      	pop	{r4, pc}
 800fc7a:	bf00      	nop
 800fc7c:	3b03126f 	.word	0x3b03126f
 800fc80:	3b449ba6 	.word	0x3b449ba6
 800fc84:	3f7fbe77 	.word	0x3f7fbe77
 800fc88:	3d4ccccd 	.word	0x3d4ccccd
 800fc8c:	37a6d973 	.word	0x37a6d973
 800fc90:	3e50e560 	.word	0x3e50e560

0800fc94 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>:
      at(size_type __n)
 800fc94:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fc96:	e9d0 5400 	ldrd	r5, r4, [r0]
 800fc9a:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 800fc9c:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fca0:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 800fca4:	d302      	bcc.n	800fcac <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800fca6:	4803      	ldr	r0, [pc, #12]	@ (800fcb4 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj+0x20>)
 800fca8:	f00e fa67 	bl	801e17a <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800fcac:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 800fcb0:	bd38      	pop	{r3, r4, r5, pc}
 800fcb2:	bf00      	nop
 800fcb4:	0801f44c 	.word	0x0801f44c

0800fcb8 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb>:
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800fcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcbc:	f2ad 4d14 	subw	sp, sp, #1044	@ 0x414
 800fcc0:	4689      	mov	r9, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800fcc2:	f04f 31ff 	mov.w	r1, #4294967295
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800fcc6:	461f      	mov	r7, r3
 800fcc8:	9000      	str	r0, [sp, #0]
 800fcca:	4614      	mov	r4, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800fccc:	6800      	ldr	r0, [r0, #0]
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800fcce:	f89d b438 	ldrb.w	fp, [sp, #1080]	@ 0x438
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800fcd2:	f7fd f8c9 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800fcd6:	f10d 020f 	add.w	r2, sp, #15
 800fcda:	4649      	mov	r1, r9
 800fcdc:	9800      	ldr	r0, [sp, #0]
 800fcde:	f009 fdc0 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800fce2:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800fce6:	4605      	mov	r5, r0
	if (!success) {
 800fce8:	b953      	cbnz	r3, 800fd00 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x48>
		osSemaphoreRelease(RegistersSemaphore);
 800fcea:	9b00      	ldr	r3, [sp, #0]
		return false;
 800fcec:	f04f 0a00 	mov.w	sl, #0
		osSemaphoreRelease(RegistersSemaphore);
 800fcf0:	6818      	ldr	r0, [r3, #0]
 800fcf2:	f7fd f8ed 	bl	800ced0 <osSemaphoreRelease>
}
 800fcf6:	4650      	mov	r0, sl
 800fcf8:	f20d 4d14 	addw	sp, sp, #1044	@ 0x414
 800fcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800fd00:	f10d 000f 	add.w	r0, sp, #15
 800fd04:	f7ff fb4e 	bl	800f3a4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 800fd08:	f89d a00f 	ldrb.w	sl, [sp, #15]
 800fd0c:	f1ba 0f00 	cmp.w	sl, #0
 800fd10:	d0eb      	beq.n	800fcea <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x32>
	if (target_register->register_info.type != registered_type) {
 800fd12:	792b      	ldrb	r3, [r5, #4]
 800fd14:	4283      	cmp	r3, r0
 800fd16:	d1e8      	bne.n	800fcea <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 800fd18:	3304      	adds	r3, #4
 800fd1a:	9a00      	ldr	r2, [sp, #0]
 800fd1c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fd20:	2800      	cmp	r0, #0
 800fd22:	d0e2      	beq.n	800fcea <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x32>
	if (target_register->access.read) {
 800fd24:	7a6b      	ldrb	r3, [r5, #9]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d052      	beq.n	800fdd0 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x118>
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 800fd2a:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800fd2c:	8969      	ldrh	r1, [r5, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 800fd2e:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800fd32:	f7ff ffaf 	bl	800fc94 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
 800fd36:	e9d0 8300 	ldrd	r8, r3, [r0]
 800fd3a:	9301      	str	r3, [sp, #4]
 800fd3c:	68c3      	ldr	r3, [r0, #12]
 800fd3e:	461e      	mov	r6, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800fd40:	f1bb 0f00 	cmp.w	fp, #0
 800fd44:	d006      	beq.n	800fd54 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x9c>
 800fd46:	68eb      	ldr	r3, [r5, #12]
 800fd48:	b123      	cbz	r3, 800fd54 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x9c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 800fd4a:	f04f 31ff 	mov.w	r1, #4294967295
 800fd4e:	6818      	ldr	r0, [r3, #0]
 800fd50:	f7fd f88a 	bl	800ce68 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 800fd54:	786b      	ldrb	r3, [r5, #1]
 800fd56:	b1e3      	cbz	r3, 800fd92 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xda>
			if (output != NULL) {
 800fd58:	2c00      	cmp	r4, #0
 800fd5a:	d03e      	beq.n	800fdda <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
				*callback_output = output;
 800fd5c:	4622      	mov	r2, r4
 800fd5e:	2300      	movs	r3, #0
 800fd60:	601a      	str	r2, [r3, #0]
			if (callbacks.read != NULL) {
 800fd62:	b1b6      	cbz	r6, 800fd92 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xda>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800fd64:	463b      	mov	r3, r7
 800fd66:	2200      	movs	r2, #0
 800fd68:	4649      	mov	r1, r9
 800fd6a:	9801      	ldr	r0, [sp, #4]
 800fd6c:	47b0      	blx	r6
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800fd6e:	796b      	ldrb	r3, [r5, #5]
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800fd70:	f88d 000f 	strb.w	r0, [sp, #15]
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d032      	beq.n	800fdde <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x126>
 800fd78:	88eb      	ldrh	r3, [r5, #6]
 800fd7a:	b103      	cbz	r3, 800fd7e <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xc6>
					*length = 1;
 800fd7c:	803b      	strh	r3, [r7, #0]
				if (*callback_output != output && output != NULL) {
 800fd7e:	2300      	movs	r3, #0
 800fd80:	6819      	ldr	r1, [r3, #0]
 800fd82:	42a1      	cmp	r1, r4
 800fd84:	d005      	beq.n	800fd92 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xda>
 800fd86:	b124      	cbz	r4, 800fd92 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xda>
						output[index] = (*callback_output )[index];
 800fd88:	883a      	ldrh	r2, [r7, #0]
 800fd8a:	4620      	mov	r0, r4
 800fd8c:	0092      	lsls	r2, r2, #2
 800fd8e:	f00f f9b1 	bl	801f0f4 <memcpy>
		if (not success && target_register->mode.pointer) {
 800fd92:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800fd96:	b99b      	cbnz	r3, 800fdc0 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x108>
 800fd98:	782b      	ldrb	r3, [r5, #0]
 800fd9a:	b18b      	cbz	r3, 800fdc0 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x108>
			success = true;
 800fd9c:	2301      	movs	r3, #1
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800fd9e:	796a      	ldrb	r2, [r5, #5]
			success = true;
 800fda0:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800fda4:	b35a      	cbz	r2, 800fdfe <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x146>
 800fda6:	88ea      	ldrh	r2, [r5, #6]
 800fda8:	bb02      	cbnz	r2, 800fdec <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x134>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fdaa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fdae:	1a9b      	subs	r3, r3, r2
 800fdb0:	109b      	asrs	r3, r3, #2
				*length = register_vector->size();
 800fdb2:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 800fdb4:	b124      	cbz	r4, 800fdc0 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x108>
 800fdb6:	b29b      	uxth	r3, r3
 800fdb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
					for (uint16_t index = 0; index < *length; index++) {
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d110      	bne.n	800fde2 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x12a>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800fdc0:	f1bb 0f00 	cmp.w	fp, #0
 800fdc4:	d004      	beq.n	800fdd0 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x118>
 800fdc6:	68eb      	ldr	r3, [r5, #12]
 800fdc8:	b113      	cbz	r3, 800fdd0 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x118>
			osSemaphoreRelease(*(target_register->register_semaphore));
 800fdca:	6818      	ldr	r0, [r3, #0]
 800fdcc:	f7fd f880 	bl	800ced0 <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 800fdd0:	9b00      	ldr	r3, [sp, #0]
 800fdd2:	6818      	ldr	r0, [r3, #0]
 800fdd4:	f7fd f87c 	bl	800ced0 <osSemaphoreRelease>
	return true;
 800fdd8:	e78d      	b.n	800fcf6 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x3e>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 800fdda:	aa04      	add	r2, sp, #16
 800fddc:	e7bf      	b.n	800fd5e <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xa6>
					*length = 1;
 800fdde:	2301      	movs	r3, #1
 800fde0:	e7cc      	b.n	800fd7c <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xc4>
						output[index] = (*register_vector)[index];
 800fde2:	f852 1b04 	ldr.w	r1, [r2], #4
 800fde6:	f844 1b04 	str.w	r1, [r4], #4
					for (uint16_t index = 0; index < *length; index++) {
 800fdea:	e7e7      	b.n	800fdbc <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x104>
				*length = target_register->register_info.length;
 800fdec:	803a      	strh	r2, [r7, #0]
				if (output != NULL) {
 800fdee:	2c00      	cmp	r4, #0
 800fdf0:	d0e6      	beq.n	800fdc0 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800fdf2:	0092      	lsls	r2, r2, #2
 800fdf4:	4641      	mov	r1, r8
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	f00f f884 	bl	801ef04 <memmove>
	  return __result + _Num;
 800fdfc:	e7e0      	b.n	800fdc0 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x108>
				*length = 1;
 800fdfe:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 800fe00:	2c00      	cmp	r4, #0
 800fe02:	d0dd      	beq.n	800fdc0 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x108>
					*output = *callbacks.pointer;
 800fe04:	f8d8 3000 	ldr.w	r3, [r8]
 800fe08:	6023      	str	r3, [r4, #0]
 800fe0a:	e7d9      	b.n	800fdc0 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x108>

0800fe0c <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800fe0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe10:	e9d0 9a00 	ldrd	r9, sl, [r0]
 800fe14:	4617      	mov	r7, r2
	if (max_size() - size() < __n)
 800fe16:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fe1a:	ebaa 0209 	sub.w	r2, sl, r9
 800fe1e:	4680      	mov	r8, r0
 800fe20:	468b      	mov	fp, r1
	if (max_size() - size() < __n)
 800fe22:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fe26:	ea4f 1522 	mov.w	r5, r2, asr #4
	if (max_size() - size() < __n)
 800fe2a:	d102      	bne.n	800fe32 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 800fe2c:	4826      	ldr	r0, [pc, #152]	@ (800fec8 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
 800fe2e:	f00e f9a1 	bl	801e174 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 800fe32:	45ca      	cmp	sl, r9
 800fe34:	bf14      	ite	ne
 800fe36:	462a      	movne	r2, r5
 800fe38:	2201      	moveq	r2, #1
 800fe3a:	eba1 0409 	sub.w	r4, r1, r9
 800fe3e:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800fe40:	d232      	bcs.n	800fea8 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fe42:	b39d      	cbz	r5, 800feac <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800fe44:	429d      	cmp	r5, r3
 800fe46:	bf28      	it	cs
 800fe48:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800fe4a:	0128      	lsls	r0, r5, #4
 800fe4c:	f00e f8dd 	bl	801e00a <_Znwj>
 800fe50:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800fe52:	4434      	add	r4, r6
      _ForwardIterator __cur = __result;
 800fe54:	46b4      	mov	ip, r6
 800fe56:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800fe5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fe5e:	464c      	mov	r4, r9
      for (; __first != __last; ++__first, (void)++__cur)
 800fe60:	45a3      	cmp	fp, r4
 800fe62:	f10c 0c10 	add.w	ip, ip, #16
 800fe66:	f104 0710 	add.w	r7, r4, #16
 800fe6a:	d121      	bne.n	800feb0 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>
 800fe6c:	eba7 0709 	sub.w	r7, r7, r9
 800fe70:	46a4      	mov	ip, r4
 800fe72:	4437      	add	r7, r6
 800fe74:	46be      	mov	lr, r7
 800fe76:	4554      	cmp	r4, sl
 800fe78:	f10e 0e10 	add.w	lr, lr, #16
 800fe7c:	d11e      	bne.n	800febc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb0>
 800fe7e:	eba4 040c 	sub.w	r4, r4, ip
 800fe82:	4427      	add	r7, r4
	if (__p)
 800fe84:	f1b9 0f00 	cmp.w	r9, #0
 800fe88:	d006      	beq.n	800fe98 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 800fe8a:	f8d8 1008 	ldr.w	r1, [r8, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800fe8e:	4648      	mov	r0, r9
 800fe90:	eba1 0109 	sub.w	r1, r1, r9
 800fe94:	f00e f894 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800fe98:	e9c8 6700 	strd	r6, r7, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800fe9c:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 800fea0:	f8c8 6008 	str.w	r6, [r8, #8]
    }
 800fea4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800fea8:	461d      	mov	r5, r3
 800feaa:	e7ce      	b.n	800fe4a <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800feac:	462e      	mov	r6, r5
 800feae:	e7d0      	b.n	800fe52 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800feb0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800feb4:	463c      	mov	r4, r7
 800feb6:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 800feba:	e7d1      	b.n	800fe60 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
 800febc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800fec0:	3410      	adds	r4, #16
 800fec2:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
 800fec6:	e7d6      	b.n	800fe76 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
 800fec8:	0801f20c 	.word	0x0801f20c

0800fecc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 800fecc:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800fece:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 800fed2:	4605      	mov	r5, r0
 800fed4:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800fed6:	429c      	cmp	r4, r3
 800fed8:	d005      	beq.n	800fee6 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_+0x1a>
 800feda:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800fedc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 800fee0:	3410      	adds	r4, #16
 800fee2:	606c      	str	r4, [r5, #4]
      }
 800fee4:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 800fee6:	4621      	mov	r1, r4
 800fee8:	f7ff ff90 	bl	800fe0c <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 800feec:	e7fa      	b.n	800fee4 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_+0x18>

0800feee <_ZN9Registers11AddRegisterIfEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 800feee:	b570      	push	{r4, r5, r6, lr}
 800fef0:	4604      	mov	r4, r0
 800fef2:	b086      	sub	sp, #24
 800fef4:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800fef6:	6800      	ldr	r0, [r0, #0]
 800fef8:	f04f 31ff 	mov.w	r1, #4294967295
 800fefc:	f7fc ffb4 	bl	800ce68 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 800ff00:	f10d 0207 	add.w	r2, sp, #7
 800ff04:	4631      	mov	r1, r6
 800ff06:	4620      	mov	r0, r4
 800ff08:	f009 fcab 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 800ff0c:	f89d 5007 	ldrb.w	r5, [sp, #7]
 800ff10:	b125      	cbz	r5, 800ff1c <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 800ff12:	6820      	ldr	r0, [r4, #0]
 800ff14:	f7fc ffdc 	bl	800ced0 <osSemaphoreRelease>
}
 800ff18:	b006      	add	sp, #24
 800ff1a:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 800ff1c:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 800ff20:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 800ff24:	f7ff fa3e 	bl	800f3a4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	configuration_.register_info = register_;
 800ff28:	2301      	movs	r3, #1
 800ff2a:	f8ad 600a 	strh.w	r6, [sp, #10]
 800ff2e:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 800ff32:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 800ff36:	f88d 000c 	strb.w	r0, [sp, #12]
 800ff3a:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 800ff3e:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d0e5      	beq.n	800ff12 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 800ff46:	a902      	add	r1, sp, #8
 800ff48:	1d20      	adds	r0, r4, #4
 800ff4a:	f7ff ffbf 	bl	800fecc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 800ff4e:	e7e0      	b.n	800ff12 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>

0800ff50 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800ff50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ff54:	e9d0 8900 	ldrd	r8, r9, [r0]
 800ff58:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 800ff5a:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ff5e:	eba9 0208 	sub.w	r2, r9, r8
 800ff62:	4607      	mov	r7, r0
 800ff64:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 800ff66:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ff6a:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 800ff6e:	d102      	bne.n	800ff76 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 800ff70:	4820      	ldr	r0, [pc, #128]	@ (800fff4 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 800ff72:	f00e f8ff 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 800ff76:	45c1      	cmp	r9, r8
 800ff78:	bf14      	ite	ne
 800ff7a:	4622      	movne	r2, r4
 800ff7c:	2201      	moveq	r2, #1
 800ff7e:	eba1 0508 	sub.w	r5, r1, r8
 800ff82:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ff84:	d231      	bcs.n	800ffea <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ff86:	b394      	cbz	r4, 800ffee <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ff88:	429c      	cmp	r4, r3
 800ff8a:	bf28      	it	cs
 800ff8c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800ff8e:	0120      	lsls	r0, r4, #4
 800ff90:	f00e f83b 	bl	801e00a <_Znwj>
 800ff94:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ff96:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 800ff9a:	2d00      	cmp	r5, #0
 800ff9c:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800ffa0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800ffa4:	dd04      	ble.n	800ffb0 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800ffa6:	462a      	mov	r2, r5
 800ffa8:	4641      	mov	r1, r8
 800ffaa:	4630      	mov	r0, r6
 800ffac:	f00e ffaa 	bl	801ef04 <memmove>
      ptrdiff_t __count = __last - __first;
 800ffb0:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 800ffb4:	3510      	adds	r5, #16
      if (__count > 0)
 800ffb6:	f1b9 0f00 	cmp.w	r9, #0
 800ffba:	4435      	add	r5, r6
 800ffbc:	dd04      	ble.n	800ffc8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800ffbe:	464a      	mov	r2, r9
 800ffc0:	4651      	mov	r1, sl
 800ffc2:	4628      	mov	r0, r5
 800ffc4:	f00f f896 	bl	801f0f4 <memcpy>
      return __result + __count;
 800ffc8:	444d      	add	r5, r9
	if (__p)
 800ffca:	f1b8 0f00 	cmp.w	r8, #0
 800ffce:	d005      	beq.n	800ffdc <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 800ffd0:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800ffd2:	4640      	mov	r0, r8
 800ffd4:	eba1 0108 	sub.w	r1, r1, r8
 800ffd8:	f00d fff2 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800ffdc:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800ffe0:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 800ffe4:	60be      	str	r6, [r7, #8]
    }
 800ffe6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ffea:	461c      	mov	r4, r3
 800ffec:	e7cf      	b.n	800ff8e <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ffee:	4626      	mov	r6, r4
 800fff0:	e7d1      	b.n	800ff96 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 800fff2:	bf00      	nop
 800fff4:	0801f20c 	.word	0x0801f20c

0800fff8 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 800fff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fffa:	460d      	mov	r5, r1
 800fffc:	b087      	sub	sp, #28
 800fffe:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8010000:	f04f 31ff 	mov.w	r1, #4294967295
 8010004:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 8010006:	4614      	mov	r4, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8010008:	f7fc ff2e 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801000c:	4629      	mov	r1, r5
 801000e:	f10d 0207 	add.w	r2, sp, #7
 8010012:	4630      	mov	r0, r6
 8010014:	f009 fc25 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8010018:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801001c:	4605      	mov	r5, r0
	if (!success) {
 801001e:	b923      	cbnz	r3, 801002a <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 8010020:	6830      	ldr	r0, [r6, #0]
 8010022:	f7fc ff55 	bl	800ced0 <osSemaphoreRelease>
}
 8010026:	b007      	add	sp, #28
 8010028:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801002a:	f10d 0007 	add.w	r0, sp, #7
 801002e:	f7ff f9b9 	bl	800f3a4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 8010032:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d0f2      	beq.n	8010020 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 801003a:	792b      	ldrb	r3, [r5, #4]
 801003c:	4298      	cmp	r0, r3
 801003e:	d1ef      	bne.n	8010020 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 8010040:	3004      	adds	r0, #4
 8010042:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8010046:	2f00      	cmp	r7, #0
 8010048:	d0ea      	beq.n	8010020 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801004a:	782b      	ldrb	r3, [r5, #0]
 801004c:	b9db      	cbnz	r3, 8010086 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x8e>
 801004e:	786b      	ldrb	r3, [r5, #1]
 8010050:	b9cb      	cbnz	r3, 8010086 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x8e>
		callback.pointer = pointer;
 8010052:	9402      	str	r4, [sp, #8]
      size() const _GLIBCXX_NOEXCEPT
 8010054:	aa02      	add	r2, sp, #8
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010056:	e9d7 3400 	ldrd	r3, r4, [r7]
 801005a:	1ae3      	subs	r3, r4, r3
 801005c:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801005e:	816b      	strh	r3, [r5, #10]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	429c      	cmp	r4, r3
 8010064:	d00a      	beq.n	801007c <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x84>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010066:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8010068:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801006c:	3410      	adds	r4, #16
 801006e:	607c      	str	r4, [r7, #4]
	target_register->mode.pointer = true;
 8010070:	2301      	movs	r3, #1
 8010072:	702b      	strb	r3, [r5, #0]
	target_register->access.write = true;
 8010074:	f240 1301 	movw	r3, #257	@ 0x101
 8010078:	812b      	strh	r3, [r5, #8]
 801007a:	e7d1      	b.n	8010020 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	  _M_realloc_insert(end(), __x);
 801007c:	4621      	mov	r1, r4
 801007e:	4638      	mov	r0, r7
 8010080:	f7ff ff66 	bl	800ff50 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8010084:	e7f4      	b.n	8010070 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x78>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8010086:	8969      	ldrh	r1, [r5, #10]
 8010088:	4638      	mov	r0, r7
 801008a:	f7ff fe03 	bl	800fc94 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->pointer = pointer;
 801008e:	6004      	str	r4, [r0, #0]
 8010090:	e7ee      	b.n	8010070 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x78>
	...

08010094 <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8010094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010098:	e9d0 8900 	ldrd	r8, r9, [r0]
 801009c:	4b26      	ldr	r3, [pc, #152]	@ (8010138 <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
 801009e:	4607      	mov	r7, r0
 80100a0:	eba9 0408 	sub.w	r4, r9, r8
 80100a4:	468a      	mov	sl, r1
 80100a6:	4693      	mov	fp, r2
 80100a8:	1124      	asrs	r4, r4, #4
 80100aa:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 80100ac:	4b23      	ldr	r3, [pc, #140]	@ (801013c <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa8>)
 80100ae:	429c      	cmp	r4, r3
 80100b0:	d102      	bne.n	80100b8 <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 80100b2:	4823      	ldr	r0, [pc, #140]	@ (8010140 <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xac>)
 80100b4:	f00e f85e 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 80100b8:	45c1      	cmp	r9, r8
 80100ba:	bf14      	ite	ne
 80100bc:	4622      	movne	r2, r4
 80100be:	2201      	moveq	r2, #1
 80100c0:	eba1 0508 	sub.w	r5, r1, r8
 80100c4:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80100c6:	d232      	bcs.n	801012e <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80100c8:	b39c      	cbz	r4, 8010132 <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80100ca:	429c      	cmp	r4, r3
 80100cc:	bf28      	it	cs
 80100ce:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80100d0:	2050      	movs	r0, #80	@ 0x50
 80100d2:	4360      	muls	r0, r4
 80100d4:	f00d ff99 	bl	801e00a <_Znwj>
 80100d8:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80100da:	2250      	movs	r2, #80	@ 0x50
 80100dc:	4659      	mov	r1, fp
 80100de:	1970      	adds	r0, r6, r5
 80100e0:	f00f f808 	bl	801f0f4 <memcpy>
      if (__count > 0)
 80100e4:	2d00      	cmp	r5, #0
 80100e6:	dd04      	ble.n	80100f2 <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80100e8:	462a      	mov	r2, r5
 80100ea:	4641      	mov	r1, r8
 80100ec:	4630      	mov	r0, r6
 80100ee:	f00e ff09 	bl	801ef04 <memmove>
      ptrdiff_t __count = __last - __first;
 80100f2:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 80100f6:	3550      	adds	r5, #80	@ 0x50
      if (__count > 0)
 80100f8:	f1b9 0f00 	cmp.w	r9, #0
 80100fc:	4435      	add	r5, r6
 80100fe:	dd04      	ble.n	801010a <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x76>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010100:	464a      	mov	r2, r9
 8010102:	4651      	mov	r1, sl
 8010104:	4628      	mov	r0, r5
 8010106:	f00e fff5 	bl	801f0f4 <memcpy>
      return __result + __count;
 801010a:	444d      	add	r5, r9
	if (__p)
 801010c:	f1b8 0f00 	cmp.w	r8, #0
 8010110:	d005      	beq.n	801011e <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8a>
		    this->_M_impl._M_end_of_storage - __old_start);
 8010112:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8010114:	4640      	mov	r0, r8
 8010116:	eba1 0108 	sub.w	r1, r1, r8
 801011a:	f00d ff51 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801011e:	2350      	movs	r3, #80	@ 0x50
      this->_M_impl._M_finish = __new_finish;
 8010120:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010124:	fb03 6604 	mla	r6, r3, r4, r6
 8010128:	60be      	str	r6, [r7, #8]
    }
 801012a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801012e:	461c      	mov	r4, r3
 8010130:	e7ce      	b.n	80100d0 <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010132:	4626      	mov	r6, r4
 8010134:	e7d1      	b.n	80100da <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8010136:	bf00      	nop
 8010138:	cccccccd 	.word	0xcccccccd
 801013c:	01999999 	.word	0x01999999
 8010140:	0801f20c 	.word	0x0801f20c

08010144 <_ZNSt6vectorI9I2CAccessSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8010144:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010146:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
      push_back(const value_type& __x)
 801014a:	4604      	mov	r4, r0
 801014c:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801014e:	42ab      	cmp	r3, r5
 8010150:	d007      	beq.n	8010162 <_ZNSt6vectorI9I2CAccessSaIS0_EE9push_backERKS0_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010152:	4618      	mov	r0, r3
 8010154:	2250      	movs	r2, #80	@ 0x50
 8010156:	f00e ffcd 	bl	801f0f4 <memcpy>
	    ++this->_M_impl._M_finish;
 801015a:	6863      	ldr	r3, [r4, #4]
 801015c:	3350      	adds	r3, #80	@ 0x50
 801015e:	6063      	str	r3, [r4, #4]
      }
 8010160:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 8010162:	4619      	mov	r1, r3
 8010164:	f7ff ff96 	bl	8010094 <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8010168:	e7fa      	b.n	8010160 <_ZNSt6vectorI9I2CAccessSaIS0_EE9push_backERKS0_+0x1c>
	...

0801016c <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801016c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010170:	e9d0 8900 	ldrd	r8, r9, [r0]
 8010174:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8010176:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801017a:	eba9 0208 	sub.w	r2, r9, r8
 801017e:	4607      	mov	r7, r0
 8010180:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 8010182:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010186:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 801018a:	d102      	bne.n	8010192 <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 801018c:	4820      	ldr	r0, [pc, #128]	@ (8010210 <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 801018e:	f00d fff1 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 8010192:	45c1      	cmp	r9, r8
 8010194:	bf14      	ite	ne
 8010196:	4622      	movne	r2, r4
 8010198:	2201      	moveq	r2, #1
 801019a:	eba1 0508 	sub.w	r5, r1, r8
 801019e:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80101a0:	d231      	bcs.n	8010206 <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80101a2:	b394      	cbz	r4, 801020a <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80101a4:	429c      	cmp	r4, r3
 80101a6:	bf28      	it	cs
 80101a8:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80101aa:	0120      	lsls	r0, r4, #4
 80101ac:	f00d ff2d 	bl	801e00a <_Znwj>
 80101b0:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80101b2:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 80101b6:	2d00      	cmp	r5, #0
 80101b8:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80101bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80101c0:	dd04      	ble.n	80101cc <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80101c2:	462a      	mov	r2, r5
 80101c4:	4641      	mov	r1, r8
 80101c6:	4630      	mov	r0, r6
 80101c8:	f00e fe9c 	bl	801ef04 <memmove>
      ptrdiff_t __count = __last - __first;
 80101cc:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 80101d0:	3510      	adds	r5, #16
      if (__count > 0)
 80101d2:	f1b9 0f00 	cmp.w	r9, #0
 80101d6:	4435      	add	r5, r6
 80101d8:	dd04      	ble.n	80101e4 <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80101da:	464a      	mov	r2, r9
 80101dc:	4651      	mov	r1, sl
 80101de:	4628      	mov	r0, r5
 80101e0:	f00e ff88 	bl	801f0f4 <memcpy>
      return __result + __count;
 80101e4:	444d      	add	r5, r9
	if (__p)
 80101e6:	f1b8 0f00 	cmp.w	r8, #0
 80101ea:	d005      	beq.n	80101f8 <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 80101ec:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80101ee:	4640      	mov	r0, r8
 80101f0:	eba1 0108 	sub.w	r1, r1, r8
 80101f4:	f00d fee4 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 80101f8:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80101fc:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8010200:	60be      	str	r6, [r7, #8]
    }
 8010202:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010206:	461c      	mov	r4, r3
 8010208:	e7cf      	b.n	80101aa <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801020a:	4626      	mov	r6, r4
 801020c:	e7d1      	b.n	80101b2 <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 801020e:	bf00      	nop
 8010210:	0801f20c 	.word	0x0801f20c

08010214 <_ZN15PlatformSensors23AddMotorSensorRegistersEv>:
void PlatformSensors::AddMotorSensorRegisters(void) {
 8010214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Vmotor = 0;
 8010218:	f04f 0800 	mov.w	r8, #0
void PlatformSensors::AddMotorSensorRegisters(void) {
 801021c:	4604      	mov	r4, r0
 801021e:	b086      	sub	sp, #24
	registers->AddRegister<float>(REG_MOTOR_VOLTAGE);
 8010220:	f44f 710a 	mov.w	r1, #552	@ 0x228
	Vmotor = 0;
 8010224:	f8c0 8050 	str.w	r8, [r0, #80]	@ 0x50
	registers->AddRegister<float>(REG_MOTOR_VOLTAGE);
 8010228:	6840      	ldr	r0, [r0, #4]
 801022a:	f7ff fe60 	bl	800feee <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_VOLTAGE);
 801022e:	f44f 710a 	mov.w	r1, #552	@ 0x228
 8010232:	6860      	ldr	r0, [r4, #4]
 8010234:	f009 fb4e 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_VOLTAGE, &(sensors->SensorsSemaphore));
 8010238:	6822      	ldr	r2, [r4, #0]
 801023a:	f44f 710a 	mov.w	r1, #552	@ 0x228
 801023e:	6860      	ldr	r0, [r4, #4]
 8010240:	f009 fb2e 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_VOLTAGE, &Vmotor);
 8010244:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010248:	f44f 710a 	mov.w	r1, #552	@ 0x228
 801024c:	6860      	ldr	r0, [r4, #4]
 801024e:	f7ff fed3 	bl	800fff8 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_VOLTAGE, READ_PERMISSION);
 8010252:	2202      	movs	r2, #2
 8010254:	f44f 710a 	mov.w	r1, #552	@ 0x228
 8010258:	6860      	ldr	r0, [r4, #4]
 801025a:	f009 fb76 	bl	801994a <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<float>(REG_MOTOR_CURRENT);
 801025e:	f240 2129 	movw	r1, #553	@ 0x229
 8010262:	6860      	ldr	r0, [r4, #4]
	Imotor = 0;
 8010264:	f8c4 8054 	str.w	r8, [r4, #84]	@ 0x54
	registers->AddRegister<float>(REG_MOTOR_CURRENT);
 8010268:	f7ff fe41 	bl	800feee <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_CURRENT);
 801026c:	f240 2129 	movw	r1, #553	@ 0x229
 8010270:	6860      	ldr	r0, [r4, #4]
 8010272:	f009 fb2f 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_CURRENT, &(sensors->SensorsSemaphore));
 8010276:	6822      	ldr	r2, [r4, #0]
 8010278:	f240 2129 	movw	r1, #553	@ 0x229
 801027c:	6860      	ldr	r0, [r4, #4]
 801027e:	f009 fb0f 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_CURRENT, &Imotor);
 8010282:	f104 0254 	add.w	r2, r4, #84	@ 0x54
 8010286:	f240 2129 	movw	r1, #553	@ 0x229
 801028a:	6860      	ldr	r0, [r4, #4]
 801028c:	f7ff feb4 	bl	800fff8 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_CURRENT, READ_PERMISSION);
 8010290:	2202      	movs	r2, #2
 8010292:	f240 2129 	movw	r1, #553	@ 0x229
 8010296:	6860      	ldr	r0, [r4, #4]
 8010298:	f009 fb57 	bl	801994a <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<float>(REG_MOTOR_POWER);
 801029c:	f240 212a 	movw	r1, #554	@ 0x22a
 80102a0:	6860      	ldr	r0, [r4, #4]
	Pmotor = 0;
 80102a2:	f8c4 8058 	str.w	r8, [r4, #88]	@ 0x58
	registers->AddRegister<float>(REG_MOTOR_POWER);
 80102a6:	f7ff fe22 	bl	800feee <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_POWER);
 80102aa:	f240 212a 	movw	r1, #554	@ 0x22a
 80102ae:	6860      	ldr	r0, [r4, #4]
 80102b0:	f009 fb10 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_POWER, &(sensors->SensorsSemaphore));
 80102b4:	6822      	ldr	r2, [r4, #0]
 80102b6:	f240 212a 	movw	r1, #554	@ 0x22a
 80102ba:	6860      	ldr	r0, [r4, #4]
 80102bc:	f009 faf0 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_POWER, &Pmotor);
 80102c0:	f104 0258 	add.w	r2, r4, #88	@ 0x58
 80102c4:	f240 212a 	movw	r1, #554	@ 0x22a
 80102c8:	6860      	ldr	r0, [r4, #4]
 80102ca:	f7ff fe95 	bl	800fff8 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_POWER, READ_PERMISSION);
 80102ce:	2202      	movs	r2, #2
 80102d0:	f240 212a 	movw	r1, #554	@ 0x22a
 80102d4:	6860      	ldr	r0, [r4, #4]
 80102d6:	f009 fb38 	bl	801994a <_ZN9Registers22SetRegisterPermissionsEth>
	Emotor = 0;
 80102da:	2200      	movs	r2, #0
 80102dc:	2300      	movs	r3, #0
	registers->AddRegister<double>(REG_MOTOR_ENERGY_DOUBLE);
 80102de:	6865      	ldr	r5, [r4, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80102e0:	f04f 31ff 	mov.w	r1, #4294967295
 80102e4:	6828      	ldr	r0, [r5, #0]
	Emotor = 0;
 80102e6:	e9c4 2318 	strd	r2, r3, [r4, #96]	@ 0x60
 80102ea:	f7fc fdbd 	bl	800ce68 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 80102ee:	f10d 0207 	add.w	r2, sp, #7
 80102f2:	f240 212b 	movw	r1, #555	@ 0x22b
 80102f6:	4628      	mov	r0, r5
 80102f8:	f009 fab3 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 80102fc:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8010300:	2e00      	cmp	r6, #0
 8010302:	d069      	beq.n	80103d8 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x1c4>
	osSemaphoreRelease(RegistersSemaphore);
 8010304:	6828      	ldr	r0, [r5, #0]
 8010306:	f7fc fde3 	bl	800ced0 <osSemaphoreRelease>
	registers->SetRegisterAsSingle(REG_MOTOR_ENERGY_DOUBLE);
 801030a:	f240 212b 	movw	r1, #555	@ 0x22b
 801030e:	6860      	ldr	r0, [r4, #4]
 8010310:	f009 fae0 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_ENERGY_DOUBLE, &(sensors->SensorsSemaphore));
 8010314:	6822      	ldr	r2, [r4, #0]
 8010316:	f240 212b 	movw	r1, #555	@ 0x22b
 801031a:	6860      	ldr	r0, [r4, #4]
 801031c:	f009 fac0 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<double>(REG_MOTOR_ENERGY_DOUBLE, &Emotor);
 8010320:	6867      	ldr	r7, [r4, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8010322:	f04f 31ff 	mov.w	r1, #4294967295
 8010326:	6838      	ldr	r0, [r7, #0]
 8010328:	f7fc fd9e 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801032c:	f10d 0207 	add.w	r2, sp, #7
 8010330:	f240 212b 	movw	r1, #555	@ 0x22b
 8010334:	4638      	mov	r0, r7
 8010336:	f009 fa94 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801033a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801033e:	4605      	mov	r5, r0
	if (!success) {
 8010340:	2b00      	cmp	r3, #0
 8010342:	d161      	bne.n	8010408 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x1f4>
	osSemaphoreRelease(RegistersSemaphore);
 8010344:	6838      	ldr	r0, [r7, #0]
 8010346:	f7fc fdc3 	bl	800ced0 <osSemaphoreRelease>
	registers->SetRegisterPermissions(REG_MOTOR_ENERGY_DOUBLE, READ_PERMISSION);
 801034a:	2202      	movs	r2, #2
 801034c:	f240 212b 	movw	r1, #555	@ 0x22b
 8010350:	6860      	ldr	r0, [r4, #4]
 8010352:	f009 fafa 	bl	801994a <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<float>(REG_MOTOR_ENERGY_FLOAT);
 8010356:	6860      	ldr	r0, [r4, #4]
 8010358:	f44f 710b 	mov.w	r1, #556	@ 0x22c
	Emotor_float = 0;
 801035c:	f8c4 8068 	str.w	r8, [r4, #104]	@ 0x68
	registers->AddRegister<float>(REG_MOTOR_ENERGY_FLOAT);
 8010360:	f7ff fdc5 	bl	800feee <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_ENERGY_FLOAT);
 8010364:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 8010368:	6860      	ldr	r0, [r4, #4]
 801036a:	f009 fab3 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_ENERGY_FLOAT, &(sensors->SensorsSemaphore));
 801036e:	6822      	ldr	r2, [r4, #0]
 8010370:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 8010374:	6860      	ldr	r0, [r4, #4]
 8010376:	f009 fa93 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_ENERGY_FLOAT, &Emotor_float);
 801037a:	f104 0268 	add.w	r2, r4, #104	@ 0x68
 801037e:	6860      	ldr	r0, [r4, #4]
 8010380:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 8010384:	f7ff fe38 	bl	800fff8 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_ENERGY_FLOAT, READ_PERMISSION);
 8010388:	2202      	movs	r2, #2
 801038a:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 801038e:	6860      	ldr	r0, [r4, #4]
 8010390:	f009 fadb 	bl	801994a <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<float>(REG_MOTOR_TEMPERATURE);
 8010394:	6860      	ldr	r0, [r4, #4]
 8010396:	f240 212d 	movw	r1, #557	@ 0x22d
	Tmotor = 0;
 801039a:	f8c4 806c 	str.w	r8, [r4, #108]	@ 0x6c
	registers->AddRegister<float>(REG_MOTOR_TEMPERATURE);
 801039e:	f7ff fda6 	bl	800feee <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_TEMPERATURE);
 80103a2:	f240 212d 	movw	r1, #557	@ 0x22d
 80103a6:	6860      	ldr	r0, [r4, #4]
 80103a8:	f009 fa94 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_TEMPERATURE, &(sensors->SensorsSemaphore));
 80103ac:	6822      	ldr	r2, [r4, #0]
 80103ae:	f240 212d 	movw	r1, #557	@ 0x22d
 80103b2:	6860      	ldr	r0, [r4, #4]
 80103b4:	f009 fa74 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_TEMPERATURE, &Tmotor);
 80103b8:	f104 026c 	add.w	r2, r4, #108	@ 0x6c
 80103bc:	6860      	ldr	r0, [r4, #4]
 80103be:	f240 212d 	movw	r1, #557	@ 0x22d
 80103c2:	f7ff fe19 	bl	800fff8 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_TEMPERATURE, READ_PERMISSION);
 80103c6:	2202      	movs	r2, #2
 80103c8:	f240 212d 	movw	r1, #557	@ 0x22d
 80103cc:	6860      	ldr	r0, [r4, #4]
}
 80103ce:	b006      	add	sp, #24
 80103d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	registers->SetRegisterPermissions(REG_MOTOR_TEMPERATURE, READ_PERMISSION);
 80103d4:	f009 bab9 	b.w	801994a <_ZN9Registers22SetRegisterPermissionsEth>
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80103d8:	f10d 0007 	add.w	r0, sp, #7
 80103dc:	f7fe fef8 	bl	800f1d0 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0>
	configuration_.mode = mode;
 80103e0:	4b27      	ldr	r3, [pc, #156]	@ (8010480 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x26c>)
	configuration_.register_info = register_;
 80103e2:	f88d 000c 	strb.w	r0, [sp, #12]
	configuration_.mode = mode;
 80103e6:	9302      	str	r3, [sp, #8]
	configuration_.register_info = register_;
 80103e8:	2301      	movs	r3, #1
 80103ea:	f88d 600d 	strb.w	r6, [sp, #13]
 80103ee:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 80103f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_semaphore = NULL;
 80103f6:	e9cd 6604 	strd	r6, r6, [sp, #16]
	if (success) {
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d082      	beq.n	8010304 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0xf0>
		registers.push_back(configuration_);
 80103fe:	a902      	add	r1, sp, #8
 8010400:	1d28      	adds	r0, r5, #4
 8010402:	f7ff fd63 	bl	800fecc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8010406:	e77d      	b.n	8010304 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0xf0>
	uint8_t registered_type = GetTypeID<T>(&success);
 8010408:	f10d 0007 	add.w	r0, sp, #7
 801040c:	f7fe fee0 	bl	800f1d0 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0>
	if (!success) {
 8010410:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d095      	beq.n	8010344 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x130>
	if (target_register->register_info.type != registered_type) {
 8010418:	792b      	ldrb	r3, [r5, #4]
 801041a:	4298      	cmp	r0, r3
 801041c:	d192      	bne.n	8010344 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x130>
	if (callbacks[target_register->register_info.type] == NULL) {
 801041e:	3004      	adds	r0, #4
 8010420:	f857 c020 	ldr.w	ip, [r7, r0, lsl #2]
 8010424:	f1bc 0f00 	cmp.w	ip, #0
 8010428:	d08c      	beq.n	8010344 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x130>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801042a:	7829      	ldrb	r1, [r5, #0]
	registers->AddRegisterPointer<double>(REG_MOTOR_ENERGY_DOUBLE, &Emotor);
 801042c:	f104 0060 	add.w	r0, r4, #96	@ 0x60
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010430:	e9dc 3600 	ldrd	r3, r6, [ip]
 8010434:	1af2      	subs	r2, r6, r3
 8010436:	1112      	asrs	r2, r2, #4
 8010438:	b9c1      	cbnz	r1, 801046c <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x258>
 801043a:	7869      	ldrb	r1, [r5, #1]
 801043c:	b9b1      	cbnz	r1, 801046c <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x258>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801043e:	f8dc 1008 	ldr.w	r1, [ip, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8010442:	816a      	strh	r2, [r5, #10]
 8010444:	aa02      	add	r2, sp, #8
 8010446:	42b1      	cmp	r1, r6
		callback.pointer = pointer;
 8010448:	9002      	str	r0, [sp, #8]
 801044a:	d00b      	beq.n	8010464 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x250>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801044c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801044e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8010452:	3610      	adds	r6, #16
 8010454:	f8cc 6004 	str.w	r6, [ip, #4]
	target_register->mode.pointer = true;
 8010458:	2301      	movs	r3, #1
 801045a:	702b      	strb	r3, [r5, #0]
	target_register->access.write = true;
 801045c:	f240 1301 	movw	r3, #257	@ 0x101
 8010460:	812b      	strh	r3, [r5, #8]
 8010462:	e76f      	b.n	8010344 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x130>
	  _M_realloc_insert(end(), __x);
 8010464:	4660      	mov	r0, ip
 8010466:	f7ff fe81 	bl	801016c <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 801046a:	e7f5      	b.n	8010458 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x244>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801046c:	8969      	ldrh	r1, [r5, #10]
	if (__n >= this->size())
 801046e:	4291      	cmp	r1, r2
 8010470:	d302      	bcc.n	8010478 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x264>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8010472:	4804      	ldr	r0, [pc, #16]	@ (8010484 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x270>)
 8010474:	f00d fe81 	bl	801e17a <_ZSt24__throw_out_of_range_fmtPKcz>
		callback->pointer = pointer;
 8010478:	0109      	lsls	r1, r1, #4
 801047a:	5058      	str	r0, [r3, r1]
 801047c:	e7ec      	b.n	8010458 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x244>
 801047e:	bf00      	nop
 8010480:	022b0000 	.word	0x022b0000
 8010484:	0801f44c 	.word	0x0801f44c

08010488 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>:
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8010488:	0089      	lsls	r1, r1, #2
 801048a:	f00d bd99 	b.w	801dfc0 <_ZdlPvj>

0801048e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 801048e:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010490:	b170      	cbz	r0, 80104b0 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8010492:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8010496:	d306      	bcc.n	80104a6 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8010498:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801049c:	d301      	bcc.n	80104a2 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 801049e:	f00d fe66 	bl	801e16e <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80104a2:	f00d fe61 	bl	801e168 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80104a6:	0080      	lsls	r0, r0, #2
      }
 80104a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80104ac:	f00d bdad 	b.w	801e00a <_Znwj>
 80104b0:	bd08      	pop	{r3, pc}

080104b2 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80104b2:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 80104b4:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80104b6:	d006      	beq.n	80104c6 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80104b8:	da01      	bge.n	80104be <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 80104ba:	f00d fe55 	bl	801e168 <_ZSt17__throw_bad_allocv>
      }
 80104be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80104c2:	f00d bda2 	b.w	801e00a <_Znwj>
 80104c6:	bd08      	pop	{r3, pc}

080104c8 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 80104c8:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80104ca:	b170      	cbz	r0, 80104ea <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80104cc:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 80104d0:	d306      	bcc.n	80104e0 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80104d2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80104d6:	d301      	bcc.n	80104dc <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 80104d8:	f00d fe49 	bl	801e16e <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80104dc:	f00d fe44 	bl	801e168 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80104e0:	0080      	lsls	r0, r0, #2
      }
 80104e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80104e6:	f00d bd90 	b.w	801e00a <_Znwj>
 80104ea:	bd08      	pop	{r3, pc}

080104ec <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 80104ec:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80104ee:	491e      	ldr	r1, [pc, #120]	@ (8010568 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 80104f0:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80104f2:	481e      	ldr	r0, [pc, #120]	@ (801056c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80104f4:	f00d fe20 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80104f8:	bb40      	cbnz	r0, 801054c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80104fa:	491d      	ldr	r1, [pc, #116]	@ (8010570 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>)
 80104fc:	481b      	ldr	r0, [pc, #108]	@ (801056c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80104fe:	f00d fe1b 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8010502:	bb28      	cbnz	r0, 8010550 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8010504:	491b      	ldr	r1, [pc, #108]	@ (8010574 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>)
 8010506:	4819      	ldr	r0, [pc, #100]	@ (801056c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 8010508:	f00d fe16 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801050c:	bb10      	cbnz	r0, 8010554 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801050e:	491a      	ldr	r1, [pc, #104]	@ (8010578 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>)
 8010510:	4816      	ldr	r0, [pc, #88]	@ (801056c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 8010512:	f00d fe11 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8010516:	b9f8      	cbnz	r0, 8010558 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8010518:	4918      	ldr	r1, [pc, #96]	@ (801057c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>)
 801051a:	4814      	ldr	r0, [pc, #80]	@ (801056c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 801051c:	f00d fe0c 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8010520:	b9e0      	cbnz	r0, 801055c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8010522:	4917      	ldr	r1, [pc, #92]	@ (8010580 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>)
 8010524:	4811      	ldr	r0, [pc, #68]	@ (801056c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 8010526:	f00d fe07 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801052a:	b9c8      	cbnz	r0, 8010560 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801052c:	490f      	ldr	r1, [pc, #60]	@ (801056c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 801052e:	4608      	mov	r0, r1
 8010530:	f00d fe02 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8010534:	b9b0      	cbnz	r0, 8010564 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8010536:	4913      	ldr	r1, [pc, #76]	@ (8010584 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>)
 8010538:	480c      	ldr	r0, [pc, #48]	@ (801056c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 801053a:	f00d fdfd 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801053e:	2800      	cmp	r0, #0
 8010540:	bf14      	ite	ne
 8010542:	2309      	movne	r3, #9
 8010544:	2300      	moveq	r3, #0
 8010546:	7020      	strb	r0, [r4, #0]
}
 8010548:	4618      	mov	r0, r3
 801054a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801054c:	2300      	movs	r3, #0
 801054e:	e7fa      	b.n	8010546 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8010550:	2301      	movs	r3, #1
 8010552:	e7f8      	b.n	8010546 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8010554:	2302      	movs	r3, #2
 8010556:	e7f6      	b.n	8010546 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8010558:	2303      	movs	r3, #3
 801055a:	e7f4      	b.n	8010546 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801055c:	2304      	movs	r3, #4
 801055e:	e7f2      	b.n	8010546 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8010560:	2306      	movs	r3, #6
 8010562:	e7f0      	b.n	8010546 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8010564:	2308      	movs	r3, #8
 8010566:	e7ee      	b.n	8010546 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
 8010568:	0801f65c 	.word	0x0801f65c
 801056c:	0801f634 	.word	0x0801f634
 8010570:	0801f654 	.word	0x0801f654
 8010574:	0801f644 	.word	0x0801f644
 8010578:	0801f63c 	.word	0x0801f63c
 801057c:	0801f664 	.word	0x0801f664
 8010580:	0801f64c 	.word	0x0801f64c
 8010584:	0801f62c 	.word	0x0801f62c

08010588 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8010588:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801058a:	491e      	ldr	r1, [pc, #120]	@ (8010604 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 801058c:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801058e:	481e      	ldr	r0, [pc, #120]	@ (8010608 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 8010590:	f00d fdd2 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8010594:	bb40      	cbnz	r0, 80105e8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8010596:	491d      	ldr	r1, [pc, #116]	@ (801060c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x84>)
 8010598:	481b      	ldr	r0, [pc, #108]	@ (8010608 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 801059a:	f00d fdcd 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801059e:	bb28      	cbnz	r0, 80105ec <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80105a0:	491b      	ldr	r1, [pc, #108]	@ (8010610 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x88>)
 80105a2:	4819      	ldr	r0, [pc, #100]	@ (8010608 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 80105a4:	f00d fdc8 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80105a8:	bb10      	cbnz	r0, 80105f0 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80105aa:	491a      	ldr	r1, [pc, #104]	@ (8010614 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x8c>)
 80105ac:	4816      	ldr	r0, [pc, #88]	@ (8010608 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 80105ae:	f00d fdc3 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80105b2:	b9f8      	cbnz	r0, 80105f4 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80105b4:	4914      	ldr	r1, [pc, #80]	@ (8010608 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 80105b6:	4608      	mov	r0, r1
 80105b8:	f00d fdbe 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80105bc:	b9e0      	cbnz	r0, 80105f8 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80105be:	4916      	ldr	r1, [pc, #88]	@ (8010618 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x90>)
 80105c0:	4811      	ldr	r0, [pc, #68]	@ (8010608 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 80105c2:	f00d fdb9 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80105c6:	b9c8      	cbnz	r0, 80105fc <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80105c8:	4914      	ldr	r1, [pc, #80]	@ (801061c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x94>)
 80105ca:	480f      	ldr	r0, [pc, #60]	@ (8010608 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 80105cc:	f00d fdb4 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80105d0:	b9b0      	cbnz	r0, 8010600 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80105d2:	4913      	ldr	r1, [pc, #76]	@ (8010620 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x98>)
 80105d4:	480c      	ldr	r0, [pc, #48]	@ (8010608 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 80105d6:	f00d fdaf 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80105da:	2800      	cmp	r0, #0
 80105dc:	bf14      	ite	ne
 80105de:	2309      	movne	r3, #9
 80105e0:	2300      	moveq	r3, #0
 80105e2:	7020      	strb	r0, [r4, #0]
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80105e8:	2300      	movs	r3, #0
 80105ea:	e7fa      	b.n	80105e2 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80105ec:	2301      	movs	r3, #1
 80105ee:	e7f8      	b.n	80105e2 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80105f0:	2302      	movs	r3, #2
 80105f2:	e7f6      	b.n	80105e2 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80105f4:	2303      	movs	r3, #3
 80105f6:	e7f4      	b.n	80105e2 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80105f8:	2304      	movs	r3, #4
 80105fa:	e7f2      	b.n	80105e2 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80105fc:	2306      	movs	r3, #6
 80105fe:	e7f0      	b.n	80105e2 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8010600:	2308      	movs	r3, #8
 8010602:	e7ee      	b.n	80105e2 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
 8010604:	0801f65c 	.word	0x0801f65c
 8010608:	0801f664 	.word	0x0801f664
 801060c:	0801f654 	.word	0x0801f654
 8010610:	0801f644 	.word	0x0801f644
 8010614:	0801f63c 	.word	0x0801f63c
 8010618:	0801f64c 	.word	0x0801f64c
 801061c:	0801f634 	.word	0x0801f634
 8010620:	0801f62c 	.word	0x0801f62c

08010624 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8010624:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8010626:	491e      	ldr	r1, [pc, #120]	@ (80106a0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8010628:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801062a:	481e      	ldr	r0, [pc, #120]	@ (80106a4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 801062c:	f00d fd84 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8010630:	bb40      	cbnz	r0, 8010684 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8010632:	491d      	ldr	r1, [pc, #116]	@ (80106a8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>)
 8010634:	481b      	ldr	r0, [pc, #108]	@ (80106a4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8010636:	f00d fd7f 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801063a:	bb28      	cbnz	r0, 8010688 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801063c:	4919      	ldr	r1, [pc, #100]	@ (80106a4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 801063e:	4608      	mov	r0, r1
 8010640:	f00d fd7a 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8010644:	bb10      	cbnz	r0, 801068c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8010646:	4919      	ldr	r1, [pc, #100]	@ (80106ac <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>)
 8010648:	4816      	ldr	r0, [pc, #88]	@ (80106a4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 801064a:	f00d fd75 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801064e:	b9f8      	cbnz	r0, 8010690 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8010650:	4917      	ldr	r1, [pc, #92]	@ (80106b0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>)
 8010652:	4814      	ldr	r0, [pc, #80]	@ (80106a4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8010654:	f00d fd70 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8010658:	b9e0      	cbnz	r0, 8010694 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801065a:	4916      	ldr	r1, [pc, #88]	@ (80106b4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>)
 801065c:	4811      	ldr	r0, [pc, #68]	@ (80106a4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 801065e:	f00d fd6b 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8010662:	b9c8      	cbnz	r0, 8010698 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8010664:	4914      	ldr	r1, [pc, #80]	@ (80106b8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>)
 8010666:	480f      	ldr	r0, [pc, #60]	@ (80106a4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8010668:	f00d fd66 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801066c:	b9b0      	cbnz	r0, 801069c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801066e:	4913      	ldr	r1, [pc, #76]	@ (80106bc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>)
 8010670:	480c      	ldr	r0, [pc, #48]	@ (80106a4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8010672:	f00d fd61 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8010676:	2800      	cmp	r0, #0
 8010678:	bf14      	ite	ne
 801067a:	2309      	movne	r3, #9
 801067c:	2300      	moveq	r3, #0
 801067e:	7020      	strb	r0, [r4, #0]
}
 8010680:	4618      	mov	r0, r3
 8010682:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8010684:	2300      	movs	r3, #0
 8010686:	e7fa      	b.n	801067e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8010688:	2301      	movs	r3, #1
 801068a:	e7f8      	b.n	801067e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801068c:	2302      	movs	r3, #2
 801068e:	e7f6      	b.n	801067e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8010690:	2303      	movs	r3, #3
 8010692:	e7f4      	b.n	801067e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8010694:	2304      	movs	r3, #4
 8010696:	e7f2      	b.n	801067e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8010698:	2306      	movs	r3, #6
 801069a:	e7f0      	b.n	801067e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801069c:	2308      	movs	r3, #8
 801069e:	e7ee      	b.n	801067e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
 80106a0:	0801f65c 	.word	0x0801f65c
 80106a4:	0801f644 	.word	0x0801f644
 80106a8:	0801f654 	.word	0x0801f654
 80106ac:	0801f63c 	.word	0x0801f63c
 80106b0:	0801f664 	.word	0x0801f664
 80106b4:	0801f64c 	.word	0x0801f64c
 80106b8:	0801f634 	.word	0x0801f634
 80106bc:	0801f62c 	.word	0x0801f62c

080106c0 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>:
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80106c0:	e9d0 3000 	ldrd	r3, r0, [r0]
 * @param input start_index: the index to start the extraction
 * @param output success: whether successful
 * @return the typed extracted value
 */
template<typename T>
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 80106c4:	b510      	push	{r4, lr}
 80106c6:	1ac0      	subs	r0, r0, r3
	uint64_t data = 0;
	uint8_t type_length = sizeof(T);

	// Check payload length
	if (payload.size() < start_index + type_length) {
 80106c8:	1d0c      	adds	r4, r1, #4
 80106ca:	42a0      	cmp	r0, r4
 80106cc:	d310      	bcc.n	80106f0 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x30>
 80106ce:	4419      	add	r1, r3
 80106d0:	2018      	movs	r0, #24
	uint64_t data = 0;
 80106d2:	2300      	movs	r3, #0
		return 0;
	}

	// Fill a uint64 variable
	for (uint8_t index = 0; index < type_length; index++) {
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 80106d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80106d8:	4084      	lsls	r4, r0
	for (uint8_t index = 0; index < type_length; index++) {
 80106da:	3808      	subs	r0, #8
 80106dc:	f110 0f08 	cmn.w	r0, #8
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 80106e0:	ea43 0304 	orr.w	r3, r3, r4
	for (uint8_t index = 0; index < type_length; index++) {
 80106e4:	d1f6      	bne.n	80106d4 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x14>
	// Recast to the expected type
    T* reinterpreted_data = reinterpret_cast<T*>(&data);

    // Return data
    *success = true;
	return *reinterpreted_data;
 80106e6:	ee00 3a10 	vmov	s0, r3
 80106ea:	2301      	movs	r3, #1
		*success = false;
 80106ec:	7013      	strb	r3, [r2, #0]
}
 80106ee:	bd10      	pop	{r4, pc}
 80106f0:	2300      	movs	r3, #0
		return 0;
 80106f2:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80106f8 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x38>
 80106f6:	e7f9      	b.n	80106ec <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x2c>
 80106f8:	00000000 	.word	0x00000000

080106fc <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>:
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 80106fc:	b510      	push	{r4, lr}
 80106fe:	e9d0 4300 	ldrd	r4, r3, [r0]
	if (payload.size() < start_index + type_length) {
 8010702:	1c48      	adds	r0, r1, #1
 8010704:	1b1b      	subs	r3, r3, r4
 8010706:	4283      	cmp	r3, r0
		*success = false;
 8010708:	bf33      	iteet	cc
 801070a:	2300      	movcc	r3, #0
    *success = true;
 801070c:	2301      	movcs	r3, #1
	return *reinterpreted_data;
 801070e:	5660      	ldrsbcs	r0, [r4, r1]
		return 0;
 8010710:	4618      	movcc	r0, r3
 8010712:	7013      	strb	r3, [r2, #0]
}
 8010714:	bd10      	pop	{r4, pc}

08010716 <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>:
 8010716:	e9d0 3000 	ldrd	r3, r0, [r0]
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 801071a:	b510      	push	{r4, lr}
 801071c:	1ac0      	subs	r0, r0, r3
	if (payload.size() < start_index + type_length) {
 801071e:	1d0c      	adds	r4, r1, #4
 8010720:	42a0      	cmp	r0, r4
 8010722:	d30e      	bcc.n	8010742 <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0+0x2c>
 8010724:	4419      	add	r1, r3
	uint64_t data = 0;
 8010726:	2000      	movs	r0, #0
	if (payload.size() < start_index + type_length) {
 8010728:	2318      	movs	r3, #24
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 801072a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801072e:	409c      	lsls	r4, r3
	for (uint8_t index = 0; index < type_length; index++) {
 8010730:	3b08      	subs	r3, #8
 8010732:	f113 0f08 	cmn.w	r3, #8
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 8010736:	ea40 0004 	orr.w	r0, r0, r4
	for (uint8_t index = 0; index < type_length; index++) {
 801073a:	d1f6      	bne.n	801072a <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0+0x14>
	return *reinterpreted_data;
 801073c:	2301      	movs	r3, #1
		*success = false;
 801073e:	7013      	strb	r3, [r2, #0]
}
 8010740:	bd10      	pop	{r4, pc}
 8010742:	2300      	movs	r3, #0
		return 0;
 8010744:	4618      	mov	r0, r3
 8010746:	e7fa      	b.n	801073e <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0+0x28>

08010748 <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>:
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 8010748:	b510      	push	{r4, lr}
 801074a:	e9d0 4300 	ldrd	r4, r3, [r0]
	if (payload.size() < start_index + type_length) {
 801074e:	1c48      	adds	r0, r1, #1
 8010750:	1b1b      	subs	r3, r3, r4
 8010752:	4283      	cmp	r3, r0
		*success = false;
 8010754:	bf33      	iteet	cc
 8010756:	2300      	movcc	r3, #0
    *success = true;
 8010758:	2301      	movcs	r3, #1
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 801075a:	5c60      	ldrbcs	r0, [r4, r1]
		return 0;
 801075c:	4618      	movcc	r0, r3
 801075e:	7013      	strb	r3, [r2, #0]
}
 8010760:	bd10      	pop	{r4, pc}

08010762 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010762:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8010764:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010766:	d006      	beq.n	8010776 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8010768:	da01      	bge.n	801076e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 801076a:	f00d fcfd 	bl	801e168 <_ZSt17__throw_bad_allocv>
      }
 801076e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8010772:	f00d bc4a 	b.w	801e00a <_Znwj>
 8010776:	bd08      	pop	{r3, pc}

08010778 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8010778:	491e      	ldr	r1, [pc, #120]	@ (80107f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 801077a:	b510      	push	{r4, lr}
 801077c:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801077e:	4608      	mov	r0, r1
 8010780:	f00d fcda 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8010784:	bb40      	cbnz	r0, 80107d8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8010786:	491c      	ldr	r1, [pc, #112]	@ (80107f8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>)
 8010788:	481a      	ldr	r0, [pc, #104]	@ (80107f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801078a:	f00d fcd5 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801078e:	bb28      	cbnz	r0, 80107dc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8010790:	491a      	ldr	r1, [pc, #104]	@ (80107fc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>)
 8010792:	4818      	ldr	r0, [pc, #96]	@ (80107f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8010794:	f00d fcd0 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8010798:	bb10      	cbnz	r0, 80107e0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801079a:	4919      	ldr	r1, [pc, #100]	@ (8010800 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>)
 801079c:	4815      	ldr	r0, [pc, #84]	@ (80107f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801079e:	f00d fccb 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80107a2:	b9f8      	cbnz	r0, 80107e4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80107a4:	4917      	ldr	r1, [pc, #92]	@ (8010804 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>)
 80107a6:	4813      	ldr	r0, [pc, #76]	@ (80107f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 80107a8:	f00d fcc6 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80107ac:	b9e0      	cbnz	r0, 80107e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80107ae:	4916      	ldr	r1, [pc, #88]	@ (8010808 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>)
 80107b0:	4810      	ldr	r0, [pc, #64]	@ (80107f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 80107b2:	f00d fcc1 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80107b6:	b9c8      	cbnz	r0, 80107ec <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80107b8:	4914      	ldr	r1, [pc, #80]	@ (801080c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>)
 80107ba:	480e      	ldr	r0, [pc, #56]	@ (80107f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 80107bc:	f00d fcbc 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80107c0:	b9b0      	cbnz	r0, 80107f0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80107c2:	4913      	ldr	r1, [pc, #76]	@ (8010810 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>)
 80107c4:	480b      	ldr	r0, [pc, #44]	@ (80107f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 80107c6:	f00d fcb7 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80107ca:	2800      	cmp	r0, #0
 80107cc:	bf14      	ite	ne
 80107ce:	2309      	movne	r3, #9
 80107d0:	2300      	moveq	r3, #0
 80107d2:	7020      	strb	r0, [r4, #0]
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80107d8:	2300      	movs	r3, #0
 80107da:	e7fa      	b.n	80107d2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80107dc:	2301      	movs	r3, #1
 80107de:	e7f8      	b.n	80107d2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80107e0:	2302      	movs	r3, #2
 80107e2:	e7f6      	b.n	80107d2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80107e4:	2303      	movs	r3, #3
 80107e6:	e7f4      	b.n	80107d2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80107e8:	2304      	movs	r3, #4
 80107ea:	e7f2      	b.n	80107d2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80107ec:	2306      	movs	r3, #6
 80107ee:	e7f0      	b.n	80107d2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80107f0:	2308      	movs	r3, #8
 80107f2:	e7ee      	b.n	80107d2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
 80107f4:	0801f65c 	.word	0x0801f65c
 80107f8:	0801f654 	.word	0x0801f654
 80107fc:	0801f644 	.word	0x0801f644
 8010800:	0801f63c 	.word	0x0801f63c
 8010804:	0801f664 	.word	0x0801f664
 8010808:	0801f64c 	.word	0x0801f64c
 801080c:	0801f634 	.word	0x0801f634
 8010810:	0801f62c 	.word	0x0801f62c

08010814 <_ZN13CommunicationC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010814:	2200      	movs	r2, #0
 8010816:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801081a:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801081e:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 8010822:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
 8010826:	6382      	str	r2, [r0, #56]	@ 0x38

/**
 * @brief class Constructor
 */
Communication::Communication() {
	address = UNKNOWN;
 8010828:	22fd      	movs	r2, #253	@ 0xfd
 801082a:	7502      	strb	r2, [r0, #20]
}
 801082c:	4770      	bx	lr

0801082e <_ZN13Communication4InitEP9RegistersP8ServicesP17MasterSubscribersP4LEDS>:
 * @param input registers_: the Registers instance
 * @param input services_: the Services instance
 * @param input subscribers_: the MasterSubscribers instance
 * @param input leds_: the LEDS instance
 */
void Communication::Init(Registers* registers_, Services* services_, MasterSubscribers* subscribers_, LEDS* leds_) {
 801082e:	b510      	push	{r4, lr}
	registers = registers_;
	services = services_;
 8010830:	e9c0 1201 	strd	r1, r2, [r0, #4]
	subscribers = subscribers_;
 8010834:	60c3      	str	r3, [r0, #12]
	leds = leds_;

	CommunicationSemaphore = osSemaphoreNew(1,1,NULL);
 8010836:	2101      	movs	r1, #1
	leds = leds_;
 8010838:	9b02      	ldr	r3, [sp, #8]
void Communication::Init(Registers* registers_, Services* services_, MasterSubscribers* subscribers_, LEDS* leds_) {
 801083a:	4604      	mov	r4, r0
	CommunicationSemaphore = osSemaphoreNew(1,1,NULL);
 801083c:	2200      	movs	r2, #0
	leds = leds_;
 801083e:	6103      	str	r3, [r0, #16]
	CommunicationSemaphore = osSemaphoreNew(1,1,NULL);
 8010840:	4608      	mov	r0, r1
 8010842:	f7fc fab5 	bl	800cdb0 <osSemaphoreNew>
 8010846:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(CommunicationSemaphore);
}
 8010848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(CommunicationSemaphore);
 801084c:	f7fc bb40 	b.w	800ced0 <osSemaphoreRelease>

08010850 <_ZN13Communication12FindProtocolEhPb>:
 *
 * @param input ID: the protocol ID to find
 * @param output success: true if protocol found
 * @return the protocol pointer
 */
CommunicationProtocol* Communication::FindProtocol(uint8_t ID, bool* success) {
 8010850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010854:	460e      	mov	r6, r1
 8010856:	4615      	mov	r5, r2
 8010858:	e9d0 4809 	ldrd	r4, r8, [r0, #36]	@ 0x24
	for (CommunicationProtocol* &protocol : protocols) {
 801085c:	45a0      	cmp	r8, r4
 801085e:	4627      	mov	r7, r4
 8010860:	d102      	bne.n	8010868 <_ZN13Communication12FindProtocolEhPb+0x18>
 8010862:	2300      	movs	r3, #0
			*success = true;
			return protocol_pointer;
		}
	}
	*success = false;
	return NULL;
 8010864:	4618      	mov	r0, r3
 8010866:	e008      	b.n	801087a <_ZN13Communication12FindProtocolEhPb+0x2a>
		if (protocol->InterfaceExists(ID)) {
 8010868:	4631      	mov	r1, r6
 801086a:	6838      	ldr	r0, [r7, #0]
 801086c:	f006 fc79 	bl	8017162 <_ZN21CommunicationProtocol15InterfaceExistsEh>
 8010870:	3404      	adds	r4, #4
 8010872:	4603      	mov	r3, r0
 8010874:	2800      	cmp	r0, #0
 8010876:	d0f1      	beq.n	801085c <_ZN13Communication12FindProtocolEhPb+0xc>
			CommunicationProtocol* protocol_pointer = protocol;
 8010878:	6838      	ldr	r0, [r7, #0]
			*success = true;
 801087a:	702b      	strb	r3, [r5, #0]
}
 801087c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010880 <_ZN13Communication16InGroupAddressesEh>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8010880:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 *
 * @param input address: a 8-bit address
 * @return true if the input adddress is part of the group addresses
 */
bool Communication::InGroupAddresses(uint8_t address) {
	for (uint8_t group_address : group_addresses) {
 8010884:	4293      	cmp	r3, r2
 8010886:	d101      	bne.n	801088c <_ZN13Communication16InGroupAddressesEh+0xc>
		if (group_address == address) return true;
	}
	return false;
 8010888:	2000      	movs	r0, #0
 801088a:	4770      	bx	lr
	for (uint8_t group_address : group_addresses) {
 801088c:	f813 0b01 	ldrb.w	r0, [r3], #1
		if (group_address == address) return true;
 8010890:	4288      	cmp	r0, r1
 8010892:	d1f7      	bne.n	8010884 <_ZN13Communication16InGroupAddressesEh+0x4>
 8010894:	2001      	movs	r0, #1
}
 8010896:	4770      	bx	lr

08010898 <_ZN13Communication13AcceptMessageE13MessageHeader>:
	return (message.target_address == ALL || message.target_address == address || InGroupAddresses(message.target_address));
 8010898:	7c09      	ldrb	r1, [r1, #16]
 801089a:	29ff      	cmp	r1, #255	@ 0xff
 801089c:	d004      	beq.n	80108a8 <_ZN13Communication13AcceptMessageE13MessageHeader+0x10>
 801089e:	7d03      	ldrb	r3, [r0, #20]
 80108a0:	428b      	cmp	r3, r1
 80108a2:	d001      	beq.n	80108a8 <_ZN13Communication13AcceptMessageE13MessageHeader+0x10>
 80108a4:	f7ff bfec 	b.w	8010880 <_ZN13Communication16InGroupAddressesEh>
}
 80108a8:	2001      	movs	r0, #1
 80108aa:	4770      	bx	lr

080108ac <_ZN13Communication5GetIDEPvPb>:
 *
 * @param input handle: base pointer of an hardware interface
 * @param output success: return true if the protocol has been successfully found
 * @return the registered interface ID of the input hardware handle
 */
uint8_t Communication::GetID(void* handle, bool* success) {
 80108ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ae:	460e      	mov	r6, r1
 80108b0:	4614      	mov	r4, r2
 80108b2:	e9d0 5709 	ldrd	r5, r7, [r0, #36]	@ 0x24
	uint8_t ID;
	for (CommunicationProtocol* protocol : protocols) {
 80108b6:	42af      	cmp	r7, r5
 80108b8:	d101      	bne.n	80108be <_ZN13Communication5GetIDEPvPb+0x12>
		ID = protocol->GetID(handle, success);
		if (*success)
			return ID;
	}
	return 0;
 80108ba:	2000      	movs	r0, #0
 80108bc:	e009      	b.n	80108d2 <_ZN13Communication5GetIDEPvPb+0x26>
	for (CommunicationProtocol* protocol : protocols) {
 80108be:	f855 0b04 	ldr.w	r0, [r5], #4
		ID = protocol->GetID(handle, success);
 80108c2:	4622      	mov	r2, r4
 80108c4:	4631      	mov	r1, r6
 80108c6:	6803      	ldr	r3, [r0, #0]
 80108c8:	68db      	ldr	r3, [r3, #12]
 80108ca:	4798      	blx	r3
		if (*success)
 80108cc:	7823      	ldrb	r3, [r4, #0]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d0f1      	beq.n	80108b6 <_ZN13Communication5GetIDEPvPb+0xa>
}
 80108d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080108d4 <_ZN13Communication9GetBufferEhPb>:
 *
 * @param input ID: the interface ID
 * @param output success: return true if the memory pointer successfully found
 * @return the memory pointer allocated to the hardware interface
 */
std::vector<uint8_t>* Communication::GetBuffer(uint8_t ID, bool* success) {
 80108d4:	b538      	push	{r3, r4, r5, lr}
 80108d6:	460c      	mov	r4, r1
 80108d8:	4615      	mov	r5, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 80108da:	f7ff ffb9 	bl	8010850 <_ZN13Communication12FindProtocolEhPb>
	if (*success) {
		std::vector<uint8_t>* buffer = protocol->GetBuffer(ID, success);
 80108de:	462a      	mov	r2, r5
 80108e0:	4621      	mov	r1, r4
		if (*success)
			return buffer;
	}
}
 80108e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		std::vector<uint8_t>* buffer = protocol->GetBuffer(ID, success);
 80108e6:	f006 bc53 	b.w	8017190 <_ZN21CommunicationProtocol9GetBufferEhPb>

080108ea <_ZN13Communication14GetBufferIndexEhPb>:
 *
 * @param input ID: the interface ID
 * @param output success: return true if the index has been successfully found
 * @return the pointer to the index variable
 */
uint16_t* Communication::GetBufferIndex(uint8_t ID, bool* success) {
 80108ea:	b538      	push	{r3, r4, r5, lr}
 80108ec:	4614      	mov	r4, r2
 80108ee:	460d      	mov	r5, r1
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 80108f0:	f7ff ffae 	bl	8010850 <_ZN13Communication12FindProtocolEhPb>
	if (*success) {
 80108f4:	7823      	ldrb	r3, [r4, #0]
 80108f6:	b12b      	cbz	r3, 8010904 <_ZN13Communication14GetBufferIndexEhPb+0x1a>
		uint16_t* buffer_index = protocol->GetBufferIndex(ID, success);
 80108f8:	4622      	mov	r2, r4
 80108fa:	4629      	mov	r1, r5
 80108fc:	f006 fc56 	bl	80171ac <_ZN21CommunicationProtocol14GetBufferIndexEhPb>
		if (*success)
 8010900:	7823      	ldrb	r3, [r4, #0]
 8010902:	b903      	cbnz	r3, 8010906 <_ZN13Communication14GetBufferIndexEhPb+0x1c>
			return buffer_index;
	}
	return NULL;
 8010904:	2000      	movs	r0, #0
}
 8010906:	bd38      	pop	{r3, r4, r5, pc}

08010908 <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb>:
 *
 * @param input ID: the protocol ID
 * @param output success: return true if protocol found
 * @return the maximum payload size of the input protocol
 */
uint16_t Communication::GetProtocolPayloadMaxLength(uint8_t ID, bool* success) {
 8010908:	b510      	push	{r4, lr}
 801090a:	4614      	mov	r4, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 801090c:	f7ff ffa0 	bl	8010850 <_ZN13Communication12FindProtocolEhPb>
	if (not *success)
 8010910:	7823      	ldrb	r3, [r4, #0]
 8010912:	b11b      	cbz	r3, 801091c <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb+0x14>
		return 0;

	return protocol->GetProtocolPayloadMaxLength();
}
 8010914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return protocol->GetProtocolPayloadMaxLength();
 8010918:	f006 bc56 	b.w	80171c8 <_ZN21CommunicationProtocol27GetProtocolPayloadMaxLengthEv>
}
 801091c:	4618      	mov	r0, r3
 801091e:	bd10      	pop	{r4, pc}

08010920 <_ZN13Communication17ActivateReceptionEh>:
 * @brief Activate the hardware reading of the input protocol
 *
 * @param input ID: the protocol ID
 * @return the status of the reading activation request
 */
HAL_StatusTypeDef Communication::ActivateReception(uint8_t ID) {
 8010920:	b513      	push	{r0, r1, r4, lr}
	bool success;
	CommunicationProtocol* protocol = FindProtocol(ID, &success);
 8010922:	f10d 0207 	add.w	r2, sp, #7
HAL_StatusTypeDef Communication::ActivateReception(uint8_t ID) {
 8010926:	460c      	mov	r4, r1
	CommunicationProtocol* protocol = FindProtocol(ID, &success);
 8010928:	f7ff ff92 	bl	8010850 <_ZN13Communication12FindProtocolEhPb>
	if (not success) return HAL_ERROR;
 801092c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010930:	b132      	cbz	r2, 8010940 <_ZN13Communication17ActivateReceptionEh+0x20>
	return protocol->ActivateReception(ID);
 8010932:	6803      	ldr	r3, [r0, #0]
 8010934:	4621      	mov	r1, r4
 8010936:	685b      	ldr	r3, [r3, #4]
}
 8010938:	b002      	add	sp, #8
 801093a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return protocol->ActivateReception(ID);
 801093e:	4718      	bx	r3
}
 8010940:	2001      	movs	r0, #1
 8010942:	b002      	add	sp, #8
 8010944:	bd10      	pop	{r4, pc}

08010946 <_ZN13Communication16SetModuleAddressEh>:
 * @brief Set the module address
 *
 * @param input address_: the new module address
 * @return whether successful
 */
bool Communication::SetModuleAddress(uint8_t address_) {
 8010946:	b538      	push	{r3, r4, r5, lr}
 8010948:	4604      	mov	r4, r0
 801094a:	460d      	mov	r5, r1
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 801094c:	6800      	ldr	r0, [r0, #0]
 801094e:	f04f 31ff 	mov.w	r1, #4294967295
 8010952:	f7fc fa89 	bl	800ce68 <osSemaphoreAcquire>
	address = address_;
	osSemaphoreRelease(CommunicationSemaphore);
 8010956:	6820      	ldr	r0, [r4, #0]
	address = address_;
 8010958:	7525      	strb	r5, [r4, #20]
	osSemaphoreRelease(CommunicationSemaphore);
 801095a:	f7fc fab9 	bl	800ced0 <osSemaphoreRelease>
	return true;
}
 801095e:	2001      	movs	r0, #1
 8010960:	bd38      	pop	{r3, r4, r5, pc}

08010962 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8010962:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8010964:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8010966:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8010968:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 801096a:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 801096e:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8010970:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8010972:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8010974:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8010976:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8010978:	688d      	ldr	r5, [r1, #8]
 801097a:	6085      	str	r5, [r0, #8]
      }
 801097c:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 801097e:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8010980:	e9c1 3300 	strd	r3, r3, [r1]
 8010984:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8010988:	f7f0 f8aa 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      }
 801098c:	b005      	add	sp, #20
 801098e:	bd30      	pop	{r4, r5, pc}

08010990 <_ZNSt6vectorIhSaIhEE5clearEv>:
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8010990:	e9d0 3200 	ldrd	r3, r2, [r0]
 8010994:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
 8010996:	bf18      	it	ne
 8010998:	6043      	strne	r3, [r0, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 801099a:	4770      	bx	lr

0801099c <_ZN13Communication17ClearGroupAddressEv>:
/**
 * @brief Clear the list of group addresses
 *
 * @return whether successful
 */
bool Communication::ClearGroupAddress(void) {
 801099c:	b538      	push	{r3, r4, r5, lr}
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 801099e:	4605      	mov	r5, r0
bool Communication::ClearGroupAddress(void) {
 80109a0:	4604      	mov	r4, r0
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 80109a2:	f04f 31ff 	mov.w	r1, #4294967295
 80109a6:	f855 0b18 	ldr.w	r0, [r5], #24
 80109aa:	f7fc fa5d 	bl	800ce68 <osSemaphoreAcquire>
	group_addresses.clear();
 80109ae:	4628      	mov	r0, r5
 80109b0:	f7ff ffee 	bl	8010990 <_ZNSt6vectorIhSaIhEE5clearEv>
	osSemaphoreRelease(CommunicationSemaphore);
 80109b4:	6820      	ldr	r0, [r4, #0]
 80109b6:	f7fc fa8b 	bl	800ced0 <osSemaphoreRelease>
	return true;
}
 80109ba:	2001      	movs	r0, #1
 80109bc:	bd38      	pop	{r3, r4, r5, pc}

080109be <_ZZN13Communication12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			return self->ClearGroupAddress();
 80109be:	f7ff bfed 	b.w	801099c <_ZN13Communication17ClearGroupAddressEv>
	...

080109c4 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>:
      at(size_type __n)
 80109c4:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80109c6:	e9d0 5400 	ldrd	r5, r4, [r0]
 80109ca:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 80109cc:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80109d0:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 80109d4:	d302      	bcc.n	80109dc <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 80109d6:	4803      	ldr	r0, [pc, #12]	@ (80109e4 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj+0x20>)
 80109d8:	f00d fbcf 	bl	801e17a <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 80109dc:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 80109e0:	bd38      	pop	{r3, r4, r5, pc}
 80109e2:	bf00      	nop
 80109e4:	0801f44c 	.word	0x0801f44c

080109e8 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 80109e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return __normal_iterator(_M_current + __n); }
 80109ea:	f101 0314 	add.w	r3, r1, #20
      : _M_current(__i) { }
 80109ee:	6844      	ldr	r4, [r0, #4]
 80109f0:	4607      	mov	r7, r0
 80109f2:	460e      	mov	r6, r1
      if (__position + 1 != end())
 80109f4:	429c      	cmp	r4, r3
 80109f6:	d008      	beq.n	8010a0a <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x22>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80109f8:	1ae4      	subs	r4, r4, r3
 80109fa:	4b10      	ldr	r3, [pc, #64]	@ (8010a3c <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x54>)
 80109fc:	1d08      	adds	r0, r1, #4
 80109fe:	10a4      	asrs	r4, r4, #2
 8010a00:	435c      	muls	r4, r3
 8010a02:	2c00      	cmp	r4, #0
 8010a04:	f100 0514 	add.w	r5, r0, #20
 8010a08:	dc08      	bgt.n	8010a1c <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x34>
      --this->_M_impl._M_finish;
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	f1a0 0314 	sub.w	r3, r0, #20
      }
 8010a10:	3810      	subs	r0, #16
 8010a12:	607b      	str	r3, [r7, #4]
 8010a14:	f7f0 f864 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
    }
 8010a18:	4630      	mov	r0, r6
 8010a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
struct MessageHeader {
 8010a1c:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8010a20:	4629      	mov	r1, r5
 8010a22:	3c01      	subs	r4, #1
 8010a24:	f805 3c18 	strb.w	r3, [r5, #-24]
 8010a28:	f7ff ff9b 	bl	8010962 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8010a2c:	7b2b      	ldrb	r3, [r5, #12]
 8010a2e:	4628      	mov	r0, r5
 8010a30:	f805 3c08 	strb.w	r3, [r5, #-8]
 8010a34:	7b6b      	ldrb	r3, [r5, #13]
 8010a36:	f805 3c07 	strb.w	r3, [r5, #-7]
 8010a3a:	e7e2      	b.n	8010a02 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x1a>
 8010a3c:	cccccccd 	.word	0xcccccccd

08010a40 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8010a40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010a44:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8010a48:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8010a4a:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010a4e:	ebaa 0208 	sub.w	r2, sl, r8
 8010a52:	4607      	mov	r7, r0
 8010a54:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 8010a56:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010a5a:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 8010a5e:	d102      	bne.n	8010a66 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8010a60:	481f      	ldr	r0, [pc, #124]	@ (8010ae0 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>)
 8010a62:	f00d fb87 	bl	801e174 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8010a66:	45c2      	cmp	sl, r8
 8010a68:	bf14      	ite	ne
 8010a6a:	4622      	movne	r2, r4
 8010a6c:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8010a6e:	eba1 0508 	sub.w	r5, r1, r8
 8010a72:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010a74:	d22f      	bcs.n	8010ad6 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010a76:	b384      	cbz	r4, 8010ada <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010a78:	429c      	cmp	r4, r3
 8010a7a:	bf28      	it	cs
 8010a7c:	461c      	movcs	r4, r3
 8010a7e:	00a0      	lsls	r0, r4, #2
 8010a80:	f00d fac3 	bl	801e00a <_Znwj>
 8010a84:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010a86:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 8010a8a:	2d00      	cmp	r5, #0
 8010a8c:	5173      	str	r3, [r6, r5]
 8010a8e:	dd04      	ble.n	8010a9a <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010a90:	462a      	mov	r2, r5
 8010a92:	4641      	mov	r1, r8
 8010a94:	4630      	mov	r0, r6
 8010a96:	f00e fa35 	bl	801ef04 <memmove>
      ptrdiff_t __count = __last - __first;
 8010a9a:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 8010a9e:	3504      	adds	r5, #4
      if (__count > 0)
 8010aa0:	f1ba 0f00 	cmp.w	sl, #0
 8010aa4:	4435      	add	r5, r6
 8010aa6:	dd04      	ble.n	8010ab2 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010aa8:	4652      	mov	r2, sl
 8010aaa:	4649      	mov	r1, r9
 8010aac:	4628      	mov	r0, r5
 8010aae:	f00e fb21 	bl	801f0f4 <memcpy>
      return __result + __count;
 8010ab2:	4455      	add	r5, sl
	if (__p)
 8010ab4:	f1b8 0f00 	cmp.w	r8, #0
 8010ab8:	d006      	beq.n	8010ac8 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x88>
		    this->_M_impl._M_end_of_storage - __old_start);
 8010aba:	68b9      	ldr	r1, [r7, #8]
 8010abc:	4640      	mov	r0, r8
 8010abe:	eba1 0108 	sub.w	r1, r1, r8
 8010ac2:	1089      	asrs	r1, r1, #2
 8010ac4:	f7ff fce0 	bl	8010488 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
      this->_M_impl._M_finish = __new_finish;
 8010ac8:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010acc:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8010ad0:	60be      	str	r6, [r7, #8]
    }
 8010ad2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010ad6:	461c      	mov	r4, r3
 8010ad8:	e7d1      	b.n	8010a7e <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010ada:	4626      	mov	r6, r4
 8010adc:	e7d3      	b.n	8010a86 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8010ade:	bf00      	nop
 8010ae0:	0801f20c 	.word	0x0801f20c

08010ae4 <_ZN13Communication11AddProtocolEP21CommunicationProtocol>:
void Communication::AddProtocol(CommunicationProtocol* protocol) {
 8010ae4:	b513      	push	{r0, r1, r4, lr}
 8010ae6:	4604      	mov	r4, r0
 8010ae8:	9101      	str	r1, [sp, #4]
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 8010aea:	6800      	ldr	r0, [r0, #0]
 8010aec:	f04f 31ff 	mov.w	r1, #4294967295
 8010af0:	f7fc f9ba 	bl	800ce68 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010af4:	e9d4 130a 	ldrd	r1, r3, [r4, #40]	@ 0x28
 8010af8:	4299      	cmp	r1, r3
 8010afa:	d008      	beq.n	8010b0e <_ZN13Communication11AddProtocolEP21CommunicationProtocol+0x2a>
 8010afc:	9b01      	ldr	r3, [sp, #4]
 8010afe:	f841 3b04 	str.w	r3, [r1], #4
	    ++this->_M_impl._M_finish;
 8010b02:	62a1      	str	r1, [r4, #40]	@ 0x28
	osSemaphoreRelease(CommunicationSemaphore);
 8010b04:	6820      	ldr	r0, [r4, #0]
 8010b06:	f7fc f9e3 	bl	800ced0 <osSemaphoreRelease>
}
 8010b0a:	b002      	add	sp, #8
 8010b0c:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 8010b0e:	aa01      	add	r2, sp, #4
 8010b10:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010b14:	f7ff ff94 	bl	8010a40 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 8010b18:	e7f4      	b.n	8010b04 <_ZN13Communication11AddProtocolEP21CommunicationProtocol+0x20>

08010b1a <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8010b1a:	b570      	push	{r4, r5, r6, lr}
 8010b1c:	4604      	mov	r4, r0
 8010b1e:	b086      	sub	sp, #24
 8010b20:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8010b22:	6800      	ldr	r0, [r0, #0]
 8010b24:	f04f 31ff 	mov.w	r1, #4294967295
 8010b28:	f7fc f99e 	bl	800ce68 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8010b2c:	f10d 0207 	add.w	r2, sp, #7
 8010b30:	4631      	mov	r1, r6
 8010b32:	4620      	mov	r0, r4
 8010b34:	f008 fe95 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8010b38:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8010b3c:	b125      	cbz	r5, 8010b48 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8010b3e:	6820      	ldr	r0, [r4, #0]
 8010b40:	f7fc f9c6 	bl	800ced0 <osSemaphoreRelease>
}
 8010b44:	b006      	add	sp, #24
 8010b46:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8010b48:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8010b4c:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8010b50:	f7ff fe12 	bl	8010778 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 8010b54:	2301      	movs	r3, #1
 8010b56:	f8ad 600a 	strh.w	r6, [sp, #10]
 8010b5a:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8010b5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8010b62:	f88d 000c 	strb.w	r0, [sp, #12]
 8010b66:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8010b6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d0e5      	beq.n	8010b3e <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
      push_back(const value_type& __x)
 8010b72:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010b74:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 8010b78:	429d      	cmp	r5, r3
 8010b7a:	d005      	beq.n	8010b88 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x6e>
 8010b7c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8010b7e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8010b82:	3510      	adds	r5, #16
 8010b84:	60a5      	str	r5, [r4, #8]
 8010b86:	e7da      	b.n	8010b3e <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	  _M_realloc_insert(end(), __x);
 8010b88:	4629      	mov	r1, r5
 8010b8a:	1d20      	adds	r0, r4, #4
 8010b8c:	f7ff f93e 	bl	800fe0c <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8010b90:	e7d5      	b.n	8010b3e <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	...

08010b94 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8010b94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010b98:	e9d0 8900 	ldrd	r8, r9, [r0]
 8010b9c:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8010b9e:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010ba2:	eba9 0208 	sub.w	r2, r9, r8
 8010ba6:	4607      	mov	r7, r0
 8010ba8:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 8010baa:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010bae:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 8010bb2:	d102      	bne.n	8010bba <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8010bb4:	4820      	ldr	r0, [pc, #128]	@ (8010c38 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 8010bb6:	f00d fadd 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 8010bba:	45c1      	cmp	r9, r8
 8010bbc:	bf14      	ite	ne
 8010bbe:	4622      	movne	r2, r4
 8010bc0:	2201      	moveq	r2, #1
 8010bc2:	eba1 0508 	sub.w	r5, r1, r8
 8010bc6:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010bc8:	d231      	bcs.n	8010c2e <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010bca:	b394      	cbz	r4, 8010c32 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010bcc:	429c      	cmp	r4, r3
 8010bce:	bf28      	it	cs
 8010bd0:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8010bd2:	0120      	lsls	r0, r4, #4
 8010bd4:	f00d fa19 	bl	801e00a <_Znwj>
 8010bd8:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010bda:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8010bde:	2d00      	cmp	r5, #0
 8010be0:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8010be4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8010be8:	dd04      	ble.n	8010bf4 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010bea:	462a      	mov	r2, r5
 8010bec:	4641      	mov	r1, r8
 8010bee:	4630      	mov	r0, r6
 8010bf0:	f00e f988 	bl	801ef04 <memmove>
      ptrdiff_t __count = __last - __first;
 8010bf4:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8010bf8:	3510      	adds	r5, #16
      if (__count > 0)
 8010bfa:	f1b9 0f00 	cmp.w	r9, #0
 8010bfe:	4435      	add	r5, r6
 8010c00:	dd04      	ble.n	8010c0c <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010c02:	464a      	mov	r2, r9
 8010c04:	4651      	mov	r1, sl
 8010c06:	4628      	mov	r0, r5
 8010c08:	f00e fa74 	bl	801f0f4 <memcpy>
      return __result + __count;
 8010c0c:	444d      	add	r5, r9
	if (__p)
 8010c0e:	f1b8 0f00 	cmp.w	r8, #0
 8010c12:	d005      	beq.n	8010c20 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 8010c14:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8010c16:	4640      	mov	r0, r8
 8010c18:	eba1 0108 	sub.w	r1, r1, r8
 8010c1c:	f00d f9d0 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8010c20:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010c24:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8010c28:	60be      	str	r6, [r7, #8]
    }
 8010c2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010c2e:	461c      	mov	r4, r3
 8010c30:	e7cf      	b.n	8010bd2 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010c32:	4626      	mov	r6, r4
 8010c34:	e7d1      	b.n	8010bda <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8010c36:	bf00      	nop
 8010c38:	0801f20c 	.word	0x0801f20c

08010c3c <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8010c3c:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010c3e:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 8010c42:	4605      	mov	r5, r0
 8010c44:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010c46:	429c      	cmp	r4, r3
 8010c48:	d005      	beq.n	8010c56 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010c4a:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8010c4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8010c50:	3410      	adds	r4, #16
 8010c52:	606c      	str	r4, [r5, #4]
      }
 8010c54:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 8010c56:	4621      	mov	r1, r4
 8010c58:	f7ff ff9c 	bl	8010b94 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8010c5c:	e7fa      	b.n	8010c54 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_+0x18>

08010c5e <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 8010c5e:	b570      	push	{r4, r5, r6, lr}
 8010c60:	460c      	mov	r4, r1
 8010c62:	b086      	sub	sp, #24
 8010c64:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8010c66:	f04f 31ff 	mov.w	r1, #4294967295
 8010c6a:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 8010c6c:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8010c6e:	f7fc f8fb 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8010c72:	4621      	mov	r1, r4
 8010c74:	f10d 0207 	add.w	r2, sp, #7
 8010c78:	4628      	mov	r0, r5
 8010c7a:	f008 fdf2 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8010c7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8010c82:	4604      	mov	r4, r0
	if (!success) {
 8010c84:	b923      	cbnz	r3, 8010c90 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 8010c86:	6828      	ldr	r0, [r5, #0]
 8010c88:	f7fc f922 	bl	800ced0 <osSemaphoreRelease>
}
 8010c8c:	b006      	add	sp, #24
 8010c8e:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8010c90:	f10d 0007 	add.w	r0, sp, #7
 8010c94:	f7ff fd70 	bl	8010778 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8010c98:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d0f2      	beq.n	8010c86 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 8010ca0:	7923      	ldrb	r3, [r4, #4]
 8010ca2:	4298      	cmp	r0, r3
 8010ca4:	d1ef      	bne.n	8010c86 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 8010ca6:	3004      	adds	r0, #4
 8010ca8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8010cac:	2800      	cmp	r0, #0
 8010cae:	d0ea      	beq.n	8010c86 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8010cb0:	7823      	ldrb	r3, [r4, #0]
 8010cb2:	b983      	cbnz	r3, 8010cd6 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x78>
 8010cb4:	7863      	ldrb	r3, [r4, #1]
 8010cb6:	b973      	cbnz	r3, 8010cd6 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x78>
		target_callback_list->push_back(callback);
 8010cb8:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 8010cba:	9602      	str	r6, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010cbc:	e9d0 2300 	ldrd	r2, r3, [r0]
 8010cc0:	1a9b      	subs	r3, r3, r2
 8010cc2:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8010cc4:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8010cc6:	f7ff ffb9 	bl	8010c3c <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 8010cca:	2301      	movs	r3, #1
 8010ccc:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 8010cce:	f240 1301 	movw	r3, #257	@ 0x101
 8010cd2:	8123      	strh	r3, [r4, #8]
 8010cd4:	e7d7      	b.n	8010c86 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8010cd6:	8961      	ldrh	r1, [r4, #10]
 8010cd8:	f7ff fe74 	bl	80109c4 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->pointer = pointer;
 8010cdc:	6006      	str	r6, [r0, #0]
 8010cde:	e7f4      	b.n	8010cca <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x6c>

08010ce0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8010ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ce2:	460c      	mov	r4, r1
 8010ce4:	b087      	sub	sp, #28
 8010ce6:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8010ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8010cec:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8010cee:	461e      	mov	r6, r3
 8010cf0:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8010cf2:	f7fc f8b9 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8010cf6:	4621      	mov	r1, r4
 8010cf8:	f10d 0207 	add.w	r2, sp, #7
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	f008 fdb0 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8010d02:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8010d06:	4604      	mov	r4, r0
	if (!success) {
 8010d08:	b923      	cbnz	r3, 8010d14 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 8010d0a:	6828      	ldr	r0, [r5, #0]
 8010d0c:	f7fc f8e0 	bl	800ced0 <osSemaphoreRelease>
}
 8010d10:	b007      	add	sp, #28
 8010d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8010d14:	f10d 0007 	add.w	r0, sp, #7
 8010d18:	f7ff fd2e 	bl	8010778 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8010d1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d0f2      	beq.n	8010d0a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 8010d24:	7923      	ldrb	r3, [r4, #4]
 8010d26:	4298      	cmp	r0, r3
 8010d28:	d1ef      	bne.n	8010d0a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 8010d2a:	3004      	adds	r0, #4
 8010d2c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8010d30:	2800      	cmp	r0, #0
 8010d32:	d0ea      	beq.n	8010d0a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8010d34:	7823      	ldrb	r3, [r4, #0]
 8010d36:	b983      	cbnz	r3, 8010d5a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 8010d38:	7863      	ldrb	r3, [r4, #1]
 8010d3a:	b973      	cbnz	r3, 8010d5a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 8010d3c:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 8010d3e:	a902      	add	r1, sp, #8
 8010d40:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 8010d44:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8010d48:	1a9b      	subs	r3, r3, r2
 8010d4a:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8010d4c:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8010d4e:	f7ff ff75 	bl	8010c3c <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8010d52:	2301      	movs	r3, #1
 8010d54:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8010d56:	7223      	strb	r3, [r4, #8]
 8010d58:	e7d7      	b.n	8010d0a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8010d5a:	8961      	ldrh	r1, [r4, #10]
 8010d5c:	f7ff fe32 	bl	80109c4 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 8010d60:	e9c0 7601 	strd	r7, r6, [r0, #4]
 8010d64:	e7f5      	b.n	8010d52 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x72>
	...

08010d68 <_ZN13Communication12AddRegistersEv>:
void Communication::AddRegisters(void) {
 8010d68:	b510      	push	{r4, lr}
 8010d6a:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_COM_ID_PROPAGATION);
 8010d6c:	2101      	movs	r1, #1
 8010d6e:	6840      	ldr	r0, [r0, #4]
 8010d70:	f7ff fed3 	bl	8010b1a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_ID_PROPAGATION);
 8010d74:	2101      	movs	r1, #1
 8010d76:	6860      	ldr	r0, [r4, #4]
 8010d78:	f008 fdac 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_ID_PROPAGATION, (void*) this,
 8010d7c:	4b32      	ldr	r3, [pc, #200]	@ (8010e48 <_ZN13Communication12AddRegistersEv+0xe0>)
 8010d7e:	4622      	mov	r2, r4
 8010d80:	6860      	ldr	r0, [r4, #4]
 8010d82:	2101      	movs	r1, #1
 8010d84:	f7ff ffac 	bl	8010ce0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_ADDRESS);
 8010d88:	6860      	ldr	r0, [r4, #4]
 8010d8a:	2102      	movs	r1, #2
 8010d8c:	f7ff fec5 	bl	8010b1a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_ADDRESS);
 8010d90:	2102      	movs	r1, #2
 8010d92:	6860      	ldr	r0, [r4, #4]
 8010d94:	f008 fd9e 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_COM_ADDRESS, &CommunicationSemaphore);
 8010d98:	4622      	mov	r2, r4
 8010d9a:	2102      	movs	r1, #2
 8010d9c:	6860      	ldr	r0, [r4, #4]
 8010d9e:	f008 fd7f 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer(REG_COM_ADDRESS, &address);
 8010da2:	f104 0214 	add.w	r2, r4, #20
 8010da6:	6860      	ldr	r0, [r4, #4]
 8010da8:	2102      	movs	r1, #2
 8010daa:	f7ff ff58 	bl	8010c5e <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_ADD_GROUP_ADDRESS);
 8010dae:	6860      	ldr	r0, [r4, #4]
 8010db0:	2103      	movs	r1, #3
 8010db2:	f7ff feb2 	bl	8010b1a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_ADD_GROUP_ADDRESS);
 8010db6:	2103      	movs	r1, #3
 8010db8:	6860      	ldr	r0, [r4, #4]
 8010dba:	f008 fd8b 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_ADD_GROUP_ADDRESS, (void*) this,
 8010dbe:	4622      	mov	r2, r4
 8010dc0:	4b22      	ldr	r3, [pc, #136]	@ (8010e4c <_ZN13Communication12AddRegistersEv+0xe4>)
 8010dc2:	2103      	movs	r1, #3
 8010dc4:	6860      	ldr	r0, [r4, #4]
 8010dc6:	f7ff ff8b 	bl	8010ce0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_REMOVE_GROUP_ADDRESS);
 8010dca:	6860      	ldr	r0, [r4, #4]
 8010dcc:	2104      	movs	r1, #4
 8010dce:	f7ff fea4 	bl	8010b1a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_REMOVE_GROUP_ADDRESS);
 8010dd2:	2104      	movs	r1, #4
 8010dd4:	6860      	ldr	r0, [r4, #4]
 8010dd6:	f008 fd7d 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_REMOVE_GROUP_ADDRESS, (void*) this,
 8010dda:	4622      	mov	r2, r4
 8010ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8010e50 <_ZN13Communication12AddRegistersEv+0xe8>)
 8010dde:	2104      	movs	r1, #4
 8010de0:	6860      	ldr	r0, [r4, #4]
 8010de2:	f7ff ff7d 	bl	8010ce0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_CLEAR_GROUP_ADDRESS);
 8010de6:	6860      	ldr	r0, [r4, #4]
 8010de8:	2105      	movs	r1, #5
 8010dea:	f7ff fe96 	bl	8010b1a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_CLEAR_GROUP_ADDRESS);
 8010dee:	2105      	movs	r1, #5
 8010df0:	6860      	ldr	r0, [r4, #4]
 8010df2:	f008 fd6f 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_CLEAR_GROUP_ADDRESS, (void*) this,
 8010df6:	4b17      	ldr	r3, [pc, #92]	@ (8010e54 <_ZN13Communication12AddRegistersEv+0xec>)
 8010df8:	4622      	mov	r2, r4
 8010dfa:	6860      	ldr	r0, [r4, #4]
 8010dfc:	2105      	movs	r1, #5
 8010dfe:	f7ff ff6f 	bl	8010ce0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_GET_GROUP_ADDRESS);
 8010e02:	6860      	ldr	r0, [r4, #4]
 8010e04:	2106      	movs	r1, #6
 8010e06:	f7ff fe88 	bl	8010b1a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsVector(REG_COM_GET_GROUP_ADDRESS);
 8010e0a:	2106      	movs	r1, #6
 8010e0c:	6860      	ldr	r0, [r4, #4]
 8010e0e:	f008 fd99 	bl	8019944 <_ZN9Registers19SetRegisterAsVectorEt>
	return AddRegisterPointer(ID, reinterpreted_pointer);
 8010e12:	f104 0218 	add.w	r2, r4, #24
 8010e16:	6860      	ldr	r0, [r4, #4]
 8010e18:	2106      	movs	r1, #6
 8010e1a:	f7ff ff20 	bl	8010c5e <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_COM_GET_GROUP_ADDRESS, READ_PERMISSION);
 8010e1e:	2202      	movs	r2, #2
 8010e20:	2106      	movs	r1, #6
 8010e22:	6860      	ldr	r0, [r4, #4]
 8010e24:	f008 fd91 	bl	801994a <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<uint8_t>(REG_COM_FORWARD_MESSAGE);
 8010e28:	6860      	ldr	r0, [r4, #4]
 8010e2a:	2107      	movs	r1, #7
 8010e2c:	f7ff fe75 	bl	8010b1a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsVector(REG_COM_FORWARD_MESSAGE);
 8010e30:	2107      	movs	r1, #7
 8010e32:	6860      	ldr	r0, [r4, #4]
 8010e34:	f008 fd86 	bl	8019944 <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_FORWARD_MESSAGE, (void*) this,
 8010e38:	4622      	mov	r2, r4
 8010e3a:	6860      	ldr	r0, [r4, #4]
 8010e3c:	2107      	movs	r1, #7
 8010e3e:	4b06      	ldr	r3, [pc, #24]	@ (8010e58 <_ZN13Communication12AddRegistersEv+0xf0>)
}
 8010e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_COM_FORWARD_MESSAGE, (void*) this,
 8010e44:	f7ff bf4c 	b.w	8010ce0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 8010e48:	08012841 	.word	0x08012841
 8010e4c:	0801101d 	.word	0x0801101d
 8010e50:	08011157 	.word	0x08011157
 8010e54:	080109bf 	.word	0x080109bf
 8010e58:	080124ed 	.word	0x080124ed

08010e5c <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8010e5c:	b510      	push	{r4, lr}
 8010e5e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8010e60:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8010e62:	b120      	cbz	r0, 8010e6e <_ZNSt12_Vector_baseImSaImEED1Ev+0x12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8010e64:	68a1      	ldr	r1, [r4, #8]
 8010e66:	1a09      	subs	r1, r1, r0
 8010e68:	1089      	asrs	r1, r1, #2
 8010e6a:	f7ff fb0d 	bl	8010488 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
      }
 8010e6e:	4620      	mov	r0, r4
 8010e70:	bd10      	pop	{r4, pc}

08010e72 <_ZNSt6vectorImSaImEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8010e72:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8010e74:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8010e76:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8010e78:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8010e7a:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8010e7e:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8010e80:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8010e82:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8010e84:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8010e86:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8010e88:	688d      	ldr	r5, [r1, #8]
 8010e8a:	6085      	str	r5, [r0, #8]
      }
 8010e8c:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8010e8e:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8010e90:	e9c1 3300 	strd	r3, r3, [r1]
 8010e94:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8010e98:	f7ff ffe0 	bl	8010e5c <_ZNSt12_Vector_baseImSaImEED1Ev>
      }
 8010e9c:	b005      	add	sp, #20
 8010e9e:	bd30      	pop	{r4, r5, pc}

08010ea0 <_ZN23SubscriberConfigurationD1Ev>:
struct SubscriberConfiguration {
 8010ea0:	b510      	push	{r4, lr}
 8010ea2:	4604      	mov	r4, r0
      }
 8010ea4:	301c      	adds	r0, #28
 8010ea6:	f7ef fe1b 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	_M_deallocate(_M_impl._M_start,
 8010eaa:	6920      	ldr	r0, [r4, #16]
	if (__p)
 8010eac:	b118      	cbz	r0, 8010eb6 <_ZN23SubscriberConfigurationD1Ev+0x16>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8010eae:	69a1      	ldr	r1, [r4, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8010eb0:	1a09      	subs	r1, r1, r0
 8010eb2:	f00d f885 	bl	801dfc0 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8010eb6:	6860      	ldr	r0, [r4, #4]
	if (__p)
 8010eb8:	b118      	cbz	r0, 8010ec2 <_ZN23SubscriberConfigurationD1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8010eba:	68e1      	ldr	r1, [r4, #12]
 8010ebc:	1a09      	subs	r1, r1, r0
 8010ebe:	f00d f87f 	bl	801dfc0 <_ZdlPvj>
 8010ec2:	4620      	mov	r0, r4
 8010ec4:	bd10      	pop	{r4, pc}

08010ec6 <_ZNSt12_Vector_baseIaSaIaEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8010ec6:	b510      	push	{r4, lr}
 8010ec8:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8010eca:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8010ecc:	b118      	cbz	r0, 8010ed6 <_ZNSt12_Vector_baseIaSaIaEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8010ece:	68a1      	ldr	r1, [r4, #8]
 8010ed0:	1a09      	subs	r1, r1, r0
 8010ed2:	f00d f875 	bl	801dfc0 <_ZdlPvj>
      }
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	bd10      	pop	{r4, pc}

08010eda <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8010eda:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8010edc:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8010ede:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8010ee0:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8010ee2:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8010ee6:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8010ee8:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8010eea:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8010eec:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8010eee:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8010ef0:	688d      	ldr	r5, [r1, #8]
 8010ef2:	6085      	str	r5, [r0, #8]
      }
 8010ef4:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8010ef6:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8010ef8:	e9c1 3300 	strd	r3, r3, [r1]
 8010efc:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8010f00:	f7ff ffe1 	bl	8010ec6 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
      }
 8010f04:	b005      	add	sp, #20
 8010f06:	bd30      	pop	{r4, r5, pc}

08010f08 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8010f08:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8010f0a:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8010f0c:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8010f0e:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8010f10:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8010f14:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8010f16:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8010f18:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8010f1a:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8010f1c:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8010f1e:	688d      	ldr	r5, [r1, #8]
 8010f20:	6085      	str	r5, [r0, #8]
      }
 8010f22:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8010f24:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8010f26:	e9c1 3300 	strd	r3, r3, [r1]
 8010f2a:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8010f2e:	f7f1 f835 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      }
 8010f32:	b005      	add	sp, #20
 8010f34:	bd30      	pop	{r4, r5, pc}
	...

08010f38 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8010f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010f3c:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      vector<_Tp, _Alloc>::
 8010f40:	4605      	mov	r5, r0
 8010f42:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010f44:	429c      	cmp	r4, r3
 8010f46:	d006      	beq.n	8010f56 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010f48:	780b      	ldrb	r3, [r1, #0]
 8010f4a:	7023      	strb	r3, [r4, #0]
	    ++this->_M_impl._M_finish;
 8010f4c:	6843      	ldr	r3, [r0, #4]
 8010f4e:	3301      	adds	r3, #1
 8010f50:	6043      	str	r3, [r0, #4]
      }
 8010f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8010f56:	4a10      	ldr	r2, [pc, #64]	@ (8010f98 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x60>)
 8010f58:	2101      	movs	r1, #1
 8010f5a:	f7ef fde2 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 8010f5e:	682f      	ldr	r7, [r5, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8010f60:	4680      	mov	r8, r0
      pointer __new_start(this->_M_allocate(__len));
 8010f62:	f7ff fbfe 	bl	8010762 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8010f66:	1be4      	subs	r4, r4, r7
 8010f68:	f899 3000 	ldrb.w	r3, [r9]
 8010f6c:	4606      	mov	r6, r0
      if (__count > 0)
 8010f6e:	2c00      	cmp	r4, #0
 8010f70:	5503      	strb	r3, [r0, r4]
 8010f72:	dd03      	ble.n	8010f7c <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x44>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010f74:	4622      	mov	r2, r4
 8010f76:	4639      	mov	r1, r7
 8010f78:	f00d ffc4 	bl	801ef04 <memmove>
	      ++__new_finish;
 8010f7c:	3401      	adds	r4, #1
 8010f7e:	4434      	add	r4, r6
	if (__p)
 8010f80:	b127      	cbz	r7, 8010f8c <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x54>
		    this->_M_impl._M_end_of_storage - __old_start);
 8010f82:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8010f84:	4638      	mov	r0, r7
 8010f86:	1bc9      	subs	r1, r1, r7
 8010f88:	f00d f81a 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8010f8c:	e9c5 6400 	strd	r6, r4, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010f90:	4446      	add	r6, r8
 8010f92:	60ae      	str	r6, [r5, #8]
      }
 8010f94:	e7dd      	b.n	8010f52 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x1a>
 8010f96:	bf00      	nop
 8010f98:	0801f20c 	.word	0x0801f20c

08010f9c <_ZN13Communication15AddGroupAddressEh>:
bool Communication::AddGroupAddress(uint8_t address) {
 8010f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fa0:	4604      	mov	r4, r0
 8010fa2:	4689      	mov	r9, r1
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 8010fa4:	6800      	ldr	r0, [r0, #0]
 8010fa6:	f04f 31ff 	mov.w	r1, #4294967295
 8010faa:	f7fb ff5d 	bl	800ce68 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010fae:	e9d4 5307 	ldrd	r5, r3, [r4, #28]
 8010fb2:	429d      	cmp	r5, r3
 8010fb4:	d00a      	beq.n	8010fcc <_ZN13Communication15AddGroupAddressEh+0x30>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010fb6:	f885 9000 	strb.w	r9, [r5]
	    ++this->_M_impl._M_finish;
 8010fba:	69e3      	ldr	r3, [r4, #28]
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	61e3      	str	r3, [r4, #28]
	osSemaphoreRelease(CommunicationSemaphore);
 8010fc0:	6820      	ldr	r0, [r4, #0]
 8010fc2:	f7fb ff85 	bl	800ced0 <osSemaphoreRelease>
}
 8010fc6:	2001      	movs	r0, #1
 8010fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8010fcc:	4a12      	ldr	r2, [pc, #72]	@ (8011018 <_ZN13Communication15AddGroupAddressEh+0x7c>)
 8010fce:	2101      	movs	r1, #1
 8010fd0:	f104 0018 	add.w	r0, r4, #24
 8010fd4:	f7ef fda5 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 8010fd8:	f8d4 8018 	ldr.w	r8, [r4, #24]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8010fdc:	4607      	mov	r7, r0
      pointer __new_start(this->_M_allocate(__len));
 8010fde:	f7ff fbc0 	bl	8010762 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8010fe2:	eba5 0508 	sub.w	r5, r5, r8
 8010fe6:	4606      	mov	r6, r0
      if (__count > 0)
 8010fe8:	2d00      	cmp	r5, #0
 8010fea:	f800 9005 	strb.w	r9, [r0, r5]
 8010fee:	dd03      	ble.n	8010ff8 <_ZN13Communication15AddGroupAddressEh+0x5c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010ff0:	462a      	mov	r2, r5
 8010ff2:	4641      	mov	r1, r8
 8010ff4:	f00d ff86 	bl	801ef04 <memmove>
	      ++__new_finish;
 8010ff8:	3501      	adds	r5, #1
 8010ffa:	4435      	add	r5, r6
	if (__p)
 8010ffc:	f1b8 0f00 	cmp.w	r8, #0
 8011000:	d005      	beq.n	801100e <_ZN13Communication15AddGroupAddressEh+0x72>
		    this->_M_impl._M_end_of_storage - __old_start);
 8011002:	6a21      	ldr	r1, [r4, #32]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8011004:	4640      	mov	r0, r8
 8011006:	eba1 0108 	sub.w	r1, r1, r8
 801100a:	f00c ffd9 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 801100e:	e9c4 6506 	strd	r6, r5, [r4, #24]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011012:	443e      	add	r6, r7
 8011014:	6226      	str	r6, [r4, #32]
 8011016:	e7d3      	b.n	8010fc0 <_ZN13Communication15AddGroupAddressEh+0x24>
 8011018:	0801f20c 	.word	0x0801f20c

0801101c <_ZZN13Communication12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			return self->AddGroupAddress(*input);
 801101c:	7811      	ldrb	r1, [r2, #0]
 801101e:	f7ff bfbd 	b.w	8010f9c <_ZN13Communication15AddGroupAddressEh>
	...

08011024 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>:
      at(size_type __n)
 8011024:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011026:	e9d0 5400 	ldrd	r5, r4, [r0]
 801102a:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 801102c:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011030:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 8011034:	d302      	bcc.n	801103c <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8011036:	4803      	ldr	r0, [pc, #12]	@ (8011044 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj+0x20>)
 8011038:	f00d f89f 	bl	801e17a <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 801103c:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 8011040:	bd38      	pop	{r3, r4, r5, pc}
 8011042:	bf00      	nop
 8011044:	0801f44c 	.word	0x0801f44c

08011048 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>:
      at(size_type __n)
 8011048:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801104a:	e9d0 5400 	ldrd	r5, r4, [r0]
 801104e:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 8011050:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011054:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 8011058:	d302      	bcc.n	8011060 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801105a:	4803      	ldr	r0, [pc, #12]	@ (8011068 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj+0x20>)
 801105c:	f00d f88d 	bl	801e17a <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8011060:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 8011064:	bd38      	pop	{r3, r4, r5, pc}
 8011066:	bf00      	nop
 8011068:	0801f44c 	.word	0x0801f44c

0801106c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 801106c:	b538      	push	{r3, r4, r5, lr}
 801106e:	4603      	mov	r3, r0
 8011070:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011072:	e9d3 3500 	ldrd	r3, r5, [r3]
 8011076:	1aed      	subs	r5, r5, r3
	if (max_size() - size() < __n)
 8011078:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801107c:	10ac      	asrs	r4, r5, #2
	if (max_size() - size() < __n)
 801107e:	eba3 05a5 	sub.w	r5, r3, r5, asr #2
 8011082:	428d      	cmp	r5, r1
 8011084:	d201      	bcs.n	801108a <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x1e>
	  __throw_length_error(__N(__s));
 8011086:	f00d f875 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 801108a:	42a1      	cmp	r1, r4
 801108c:	bf38      	it	cc
 801108e:	4621      	movcc	r1, r4
 8011090:	1864      	adds	r4, r4, r1
 8011092:	d204      	bcs.n	801109e <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x32>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011094:	429c      	cmp	r4, r3
 8011096:	4620      	mov	r0, r4
 8011098:	bf28      	it	cs
 801109a:	4618      	movcs	r0, r3
      }
 801109c:	bd38      	pop	{r3, r4, r5, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801109e:	4618      	mov	r0, r3
 80110a0:	e7fc      	b.n	801109c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x30>

080110a2 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80110a2:	b510      	push	{r4, lr}
 80110a4:	4604      	mov	r4, r0
 80110a6:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80110a8:	e9d4 2300 	ldrd	r2, r3, [r4]
	if (max_size() - size() < __n)
 80110ac:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80110b0:	1a9b      	subs	r3, r3, r2
	if (max_size() - size() < __n)
 80110b2:	1ae2      	subs	r2, r4, r3
 80110b4:	428a      	cmp	r2, r1
 80110b6:	d201      	bcs.n	80110bc <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc+0x1a>
	  __throw_length_error(__N(__s));
 80110b8:	f00d f85c 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 80110bc:	4299      	cmp	r1, r3
 80110be:	bf38      	it	cc
 80110c0:	4619      	movcc	r1, r3
 80110c2:	185b      	adds	r3, r3, r1
 80110c4:	d204      	bcs.n	80110d0 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc+0x2e>
 80110c6:	42a3      	cmp	r3, r4
 80110c8:	bf28      	it	cs
 80110ca:	4623      	movcs	r3, r4
 80110cc:	4618      	mov	r0, r3
      }
 80110ce:	bd10      	pop	{r4, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80110d0:	4620      	mov	r0, r4
 80110d2:	e7fc      	b.n	80110ce <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc+0x2c>

080110d4 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80110d4:	b538      	push	{r3, r4, r5, lr}
 80110d6:	4603      	mov	r3, r0
 80110d8:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80110da:	e9d3 3500 	ldrd	r3, r5, [r3]
 80110de:	1aed      	subs	r5, r5, r3
	if (max_size() - size() < __n)
 80110e0:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80110e4:	10ac      	asrs	r4, r5, #2
	if (max_size() - size() < __n)
 80110e6:	eba3 05a5 	sub.w	r5, r3, r5, asr #2
 80110ea:	428d      	cmp	r5, r1
 80110ec:	d201      	bcs.n	80110f2 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x1e>
	  __throw_length_error(__N(__s));
 80110ee:	f00d f841 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 80110f2:	42a1      	cmp	r1, r4
 80110f4:	bf38      	it	cc
 80110f6:	4621      	movcc	r1, r4
 80110f8:	1864      	adds	r4, r4, r1
 80110fa:	d204      	bcs.n	8011106 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x32>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80110fc:	429c      	cmp	r4, r3
 80110fe:	4620      	mov	r0, r4
 8011100:	bf28      	it	cs
 8011102:	4618      	movcs	r0, r3
      }
 8011104:	bd38      	pop	{r3, r4, r5, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011106:	4618      	mov	r0, r3
 8011108:	e7fc      	b.n	8011104 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x30>

0801110a <_ZN13Communication18RemoveGroupAddressEh>:
bool Communication::RemoveGroupAddress(uint8_t address_) {
 801110a:	b570      	push	{r4, r5, r6, lr}
 801110c:	4604      	mov	r4, r0
 801110e:	460d      	mov	r5, r1
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 8011110:	6800      	ldr	r0, [r0, #0]
 8011112:	f04f 31ff 	mov.w	r1, #4294967295
 8011116:	f7fb fea7 	bl	800ce68 <osSemaphoreAcquire>
      : _M_current(__i) { }
 801111a:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
	for (uint8_t address : group_addresses) {
 801111e:	4603      	mov	r3, r0
 8011120:	428b      	cmp	r3, r1
 8011122:	d104      	bne.n	801112e <_ZN13Communication18RemoveGroupAddressEh+0x24>
	osSemaphoreRelease(CommunicationSemaphore);
 8011124:	6820      	ldr	r0, [r4, #0]
 8011126:	f7fb fed3 	bl	800ced0 <osSemaphoreRelease>
	return false;
 801112a:	2000      	movs	r0, #0
 801112c:	e010      	b.n	8011150 <_ZN13Communication18RemoveGroupAddressEh+0x46>
 801112e:	461a      	mov	r2, r3
		if (address == address_) {
 8011130:	f812 6b01 	ldrb.w	r6, [r2], #1
 8011134:	42ae      	cmp	r6, r5
 8011136:	d10c      	bne.n	8011152 <_ZN13Communication18RemoveGroupAddressEh+0x48>
      { return __normal_iterator(_M_current + __n); }
 8011138:	1a1a      	subs	r2, r3, r0
 801113a:	fa50 f282 	uxtab	r2, r0, r2
 801113e:	1c50      	adds	r0, r2, #1
      if (__position + 1 != end())
 8011140:	4281      	cmp	r1, r0
 8011142:	d001      	beq.n	8011148 <_ZN13Communication18RemoveGroupAddressEh+0x3e>
			      _Category>::__copy_m(__first, __last, __result);
 8011144:	f7f0 fd76 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      --this->_M_impl._M_finish;
 8011148:	69e3      	ldr	r3, [r4, #28]
			return true;
 801114a:	2001      	movs	r0, #1
 801114c:	3b01      	subs	r3, #1
 801114e:	61e3      	str	r3, [r4, #28]
}
 8011150:	bd70      	pop	{r4, r5, r6, pc}
 8011152:	4613      	mov	r3, r2
 8011154:	e7e4      	b.n	8011120 <_ZN13Communication18RemoveGroupAddressEh+0x16>

08011156 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			return self->RemoveGroupAddress(*input);
 8011156:	7811      	ldrb	r1, [r2, #0]
 8011158:	f7ff bfd7 	b.w	801110a <_ZN13Communication18RemoveGroupAddressEh>

0801115c <_ZN14MessageElementC1ERKS_>:
struct MessageElement {
 801115c:	b510      	push	{r4, lr}
 801115e:	460b      	mov	r3, r1
 8011160:	4604      	mov	r4, r0
 8011162:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011166:	7a1a      	ldrb	r2, [r3, #8]
 8011168:	80a1      	strh	r1, [r4, #4]
 801116a:	88d9      	ldrh	r1, [r3, #6]
 801116c:	6020      	str	r0, [r4, #0]
 801116e:	f104 000c 	add.w	r0, r4, #12
 8011172:	80e1      	strh	r1, [r4, #6]
 8011174:	f103 010c 	add.w	r1, r3, #12
 8011178:	7222      	strb	r2, [r4, #8]
 801117a:	f7ef fd61 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801117e:	4620      	mov	r0, r4
 8011180:	bd10      	pop	{r4, pc}

08011182 <_ZN13MessageHeaderC1ERKS_>:
 8011182:	b538      	push	{r3, r4, r5, lr}
 8011184:	460d      	mov	r5, r1
 8011186:	f811 3b04 	ldrb.w	r3, [r1], #4
 801118a:	4604      	mov	r4, r0
 801118c:	f800 3b04 	strb.w	r3, [r0], #4
 8011190:	f7ef fd56 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011194:	8a2b      	ldrh	r3, [r5, #16]
 8011196:	4620      	mov	r0, r4
 8011198:	8223      	strh	r3, [r4, #16]
 801119a:	bd38      	pop	{r3, r4, r5, pc}

0801119c <_ZN13Communication4SpinEv>:
void Communication::Spin(void) {
 801119c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t index = 0;
 80111a0:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80111a2:	4f29      	ldr	r7, [pc, #164]	@ (8011248 <_ZN13Communication4SpinEv+0xac>)
void Communication::Spin(void) {
 80111a4:	b08d      	sub	sp, #52	@ 0x34
 80111a6:	4604      	mov	r4, r0
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 80111a8:	f04f 31ff 	mov.w	r1, #4294967295
 80111ac:	6800      	ldr	r0, [r0, #0]
 80111ae:	f7fb fe5b 	bl	800ce68 <osSemaphoreAcquire>
 80111b2:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 80111b6:	1a9b      	subs	r3, r3, r2
 80111b8:	109b      	asrs	r3, r3, #2
 80111ba:	437b      	muls	r3, r7
	while (index < pending_messages.size()) {
 80111bc:	429d      	cmp	r5, r3
 80111be:	d308      	bcc.n	80111d2 <_ZN13Communication4SpinEv+0x36>
	osSemaphoreRelease(CommunicationSemaphore);
 80111c0:	6820      	ldr	r0, [r4, #0]
 80111c2:	f7fb fe85 	bl	800ced0 <osSemaphoreRelease>
	osDelay(DEFAULT_COMMUNICATION_PERIOD);
 80111c6:	2064      	movs	r0, #100	@ 0x64
}
 80111c8:	b00d      	add	sp, #52	@ 0x34
 80111ca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	osDelay(DEFAULT_COMMUNICATION_PERIOD);
 80111ce:	f7fb bde1 	b.w	800cd94 <osDelay>
	return *(this->_M_impl._M_start + __n);
 80111d2:	eb05 0185 	add.w	r1, r5, r5, lsl #2
		MessageHeader message = pending_messages[index];
 80111d6:	a802      	add	r0, sp, #8
 80111d8:	ea4f 0881 	mov.w	r8, r1, lsl #2
 80111dc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80111e0:	f7ff ffcf 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
		CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 80111e4:	f10d 0207 	add.w	r2, sp, #7
 80111e8:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80111ec:	4620      	mov	r0, r4
 80111ee:	f7ff fb2f 	bl	8010850 <_ZN13Communication12FindProtocolEhPb>
		if (!success)
 80111f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 80111f6:	4606      	mov	r6, r0
		if (!success)
 80111f8:	b92b      	cbnz	r3, 8011206 <_ZN13Communication4SpinEv+0x6a>
 80111fa:	4620      	mov	r0, r4
 80111fc:	f850 1f30 	ldr.w	r1, [r0, #48]!
      { return _M_erase(begin() + (__position - cbegin())); }
 8011200:	4441      	add	r1, r8
 8011202:	f7ff fbf1 	bl	80109e8 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
		message.source_address = address; // set the source address as the module address
 8011206:	7d23      	ldrb	r3, [r4, #20]
		HAL_StatusTypeDef status = protocol->Send(message);
 8011208:	a902      	add	r1, sp, #8
 801120a:	a807      	add	r0, sp, #28
		message.source_address = address; // set the source address as the module address
 801120c:	f88d 3019 	strb.w	r3, [sp, #25]
		HAL_StatusTypeDef status = protocol->Send(message);
 8011210:	6833      	ldr	r3, [r6, #0]
 8011212:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8011216:	f7ff ffb4 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 801121a:	a907      	add	r1, sp, #28
 801121c:	4630      	mov	r0, r6
 801121e:	47c8      	blx	r9
 8011220:	4606      	mov	r6, r0
      }
 8011222:	a808      	add	r0, sp, #32
 8011224:	f7ef fc5c 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (status == HAL_OK || status == HAL_ERROR)
 8011228:	2e01      	cmp	r6, #1
 801122a:	d809      	bhi.n	8011240 <_ZN13Communication4SpinEv+0xa4>
 801122c:	4620      	mov	r0, r4
 801122e:	f850 1f30 	ldr.w	r1, [r0, #48]!
      { return _M_erase(begin() + (__position - cbegin())); }
 8011232:	4441      	add	r1, r8
 8011234:	f7ff fbd8 	bl	80109e8 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
      }
 8011238:	a803      	add	r0, sp, #12
 801123a:	f7ef fc51 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801123e:	e7b8      	b.n	80111b2 <_ZN13Communication4SpinEv+0x16>
			index++;
 8011240:	3501      	adds	r5, #1
 8011242:	b2ed      	uxtb	r5, r5
 8011244:	e7f8      	b.n	8011238 <_ZN13Communication4SpinEv+0x9c>
 8011246:	bf00      	nop
 8011248:	cccccccd 	.word	0xcccccccd

0801124c <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801124c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011250:	e9d0 7900 	ldrd	r7, r9, [r0]
 8011254:	4b3f      	ldr	r3, [pc, #252]	@ (8011354 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x108>)
 8011256:	4606      	mov	r6, r0
 8011258:	eba9 0507 	sub.w	r5, r9, r7
 801125c:	4688      	mov	r8, r1
 801125e:	4614      	mov	r4, r2
 8011260:	10ad      	asrs	r5, r5, #2
 8011262:	435d      	muls	r5, r3
	if (max_size() - size() < __n)
 8011264:	4b3c      	ldr	r3, [pc, #240]	@ (8011358 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x10c>)
 8011266:	429d      	cmp	r5, r3
 8011268:	d102      	bne.n	8011270 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 801126a:	483c      	ldr	r0, [pc, #240]	@ (801135c <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x110>)
 801126c:	f00c ff82 	bl	801e174 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8011270:	45b9      	cmp	r9, r7
 8011272:	bf14      	ite	ne
 8011274:	462a      	movne	r2, r5
 8011276:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8011278:	eba1 0b07 	sub.w	fp, r1, r7
 801127c:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801127e:	d22d      	bcs.n	80112dc <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011280:	b375      	cbz	r5, 80112e0 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011282:	429d      	cmp	r5, r3
 8011284:	bf28      	it	cs
 8011286:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8011288:	2014      	movs	r0, #20
 801128a:	4368      	muls	r0, r5
 801128c:	f00c febd 	bl	801e00a <_Znwj>
 8011290:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011292:	4621      	mov	r1, r4
 8011294:	eb0a 000b 	add.w	r0, sl, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011298:	463c      	mov	r4, r7
      _ForwardIterator __cur = __result;
 801129a:	46d3      	mov	fp, sl
 801129c:	f7ff ff71 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
      for (; __first != __last; ++__first, (void)++__cur)
 80112a0:	45a0      	cmp	r8, r4
 80112a2:	f04f 0300 	mov.w	r3, #0
 80112a6:	f10b 0b14 	add.w	fp, fp, #20
 80112aa:	d11b      	bne.n	80112e4 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80112ac:	f04f 0800 	mov.w	r8, #0
 80112b0:	454c      	cmp	r4, r9
 80112b2:	465b      	mov	r3, fp
 80112b4:	f10b 0b14 	add.w	fp, fp, #20
 80112b8:	d12f      	bne.n	801131a <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xce>
	if (__p)
 80112ba:	b137      	cbz	r7, 80112ca <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
 80112bc:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80112be:	4638      	mov	r0, r7
 80112c0:	9301      	str	r3, [sp, #4]
 80112c2:	1bc9      	subs	r1, r1, r7
 80112c4:	f00c fe7c 	bl	801dfc0 <_ZdlPvj>
 80112c8:	9b01      	ldr	r3, [sp, #4]
      this->_M_impl._M_finish = __new_finish;
 80112ca:	e9c6 a300 	strd	sl, r3, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80112ce:	2314      	movs	r3, #20
 80112d0:	fb03 a305 	mla	r3, r3, r5, sl
 80112d4:	60b3      	str	r3, [r6, #8]
    }
 80112d6:	b003      	add	sp, #12
 80112d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112dc:	461d      	mov	r5, r3
 80112de:	e7d3      	b.n	8011288 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80112e0:	46aa      	mov	sl, r5
 80112e2:	e7d6      	b.n	8011292 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 80112e4:	7822      	ldrb	r2, [r4, #0]
      }
 80112e6:	1d20      	adds	r0, r4, #4
 80112e8:	f80b 2c14 	strb.w	r2, [fp, #-20]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80112ec:	6862      	ldr	r2, [r4, #4]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80112ee:	6063      	str	r3, [r4, #4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80112f0:	f84b 2c10 	str.w	r2, [fp, #-16]
 80112f4:	68a2      	ldr	r2, [r4, #8]
 80112f6:	f84b 2c0c 	str.w	r2, [fp, #-12]
	  _M_end_of_storage(__x._M_end_of_storage)
 80112fa:	68e2      	ldr	r2, [r4, #12]
 80112fc:	f84b 2c08 	str.w	r2, [fp, #-8]
 8011300:	7c22      	ldrb	r2, [r4, #16]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8011302:	e9c4 3302 	strd	r3, r3, [r4, #8]
 8011306:	f80b 2c04 	strb.w	r2, [fp, #-4]
 801130a:	3414      	adds	r4, #20
 801130c:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 8011310:	f80b 2c03 	strb.w	r2, [fp, #-3]
      }
 8011314:	f7ef fbe4 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011318:	e7c2      	b.n	80112a0 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
 801131a:	7823      	ldrb	r3, [r4, #0]
 801131c:	1d20      	adds	r0, r4, #4
 801131e:	f80b 3c14 	strb.w	r3, [fp, #-20]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8011322:	6863      	ldr	r3, [r4, #4]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8011324:	f8c4 8004 	str.w	r8, [r4, #4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8011328:	f84b 3c10 	str.w	r3, [fp, #-16]
 801132c:	68a3      	ldr	r3, [r4, #8]
 801132e:	f84b 3c0c 	str.w	r3, [fp, #-12]
	  _M_end_of_storage(__x._M_end_of_storage)
 8011332:	68e3      	ldr	r3, [r4, #12]
 8011334:	f84b 3c08 	str.w	r3, [fp, #-8]
 8011338:	7c23      	ldrb	r3, [r4, #16]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801133a:	e9c4 8802 	strd	r8, r8, [r4, #8]
 801133e:	f80b 3c04 	strb.w	r3, [fp, #-4]
 8011342:	3414      	adds	r4, #20
 8011344:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 8011348:	f80b 3c03 	strb.w	r3, [fp, #-3]
      }
 801134c:	f7ef fbc8 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011350:	e7ae      	b.n	80112b0 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x64>
 8011352:	bf00      	nop
 8011354:	cccccccd 	.word	0xcccccccd
 8011358:	06666666 	.word	0x06666666
 801135c:	0801f20c 	.word	0x0801f20c

08011360 <_ZN13Communication4SendE13MessageHeader>:
HAL_StatusTypeDef Communication::Send(MessageHeader message) {
 8011360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011362:	b087      	sub	sp, #28
 8011364:	460d      	mov	r5, r1
	CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 8011366:	7809      	ldrb	r1, [r1, #0]
HAL_StatusTypeDef Communication::Send(MessageHeader message) {
 8011368:	4604      	mov	r4, r0
	CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 801136a:	f10d 0203 	add.w	r2, sp, #3
 801136e:	f7ff fa6f 	bl	8010850 <_ZN13Communication12FindProtocolEhPb>
	if (!success) return HAL_ERROR;
 8011372:	f89d 3003 	ldrb.w	r3, [sp, #3]
	CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 8011376:	4606      	mov	r6, r0
	if (!success) return HAL_ERROR;
 8011378:	2b00      	cmp	r3, #0
 801137a:	d032      	beq.n	80113e2 <_ZN13Communication4SendE13MessageHeader+0x82>
	message.source_address = address; // set the source address as the module address
 801137c:	7d23      	ldrb	r3, [r4, #20]
	CommunicationLED(leds, message.interface);
 801137e:	7829      	ldrb	r1, [r5, #0]
	message.source_address = address; // set the source address as the module address
 8011380:	746b      	strb	r3, [r5, #17]
	CommunicationLED(leds, message.interface);
 8011382:	6920      	ldr	r0, [r4, #16]
 8011384:	f7fd fe86 	bl	800f094 <_Z16CommunicationLEDP4LEDSh>
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 8011388:	f04f 31ff 	mov.w	r1, #4294967295
 801138c:	6820      	ldr	r0, [r4, #0]
 801138e:	f7fb fd6b 	bl	800ce68 <osSemaphoreAcquire>
	HAL_StatusTypeDef status = protocol->Send(message);
 8011392:	6833      	ldr	r3, [r6, #0]
 8011394:	4629      	mov	r1, r5
 8011396:	a801      	add	r0, sp, #4
 8011398:	689f      	ldr	r7, [r3, #8]
 801139a:	f7ff fef2 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 801139e:	a901      	add	r1, sp, #4
 80113a0:	4630      	mov	r0, r6
 80113a2:	47b8      	blx	r7
 80113a4:	4606      	mov	r6, r0
 80113a6:	a802      	add	r0, sp, #8
 80113a8:	f7ef fb9a 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (status == HAL_BUSY || status == HAL_TIMEOUT) {
 80113ac:	1eb3      	subs	r3, r6, #2
 80113ae:	b2db      	uxtb	r3, r3
 80113b0:	2b01      	cmp	r3, #1
 80113b2:	d809      	bhi.n	80113c8 <_ZN13Communication4SendE13MessageHeader+0x68>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80113b4:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	@ 0x34
 80113b8:	4298      	cmp	r0, r3
 80113ba:	d00b      	beq.n	80113d4 <_ZN13Communication4SendE13MessageHeader+0x74>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80113bc:	4629      	mov	r1, r5
 80113be:	f7ff fee0 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
	    ++this->_M_impl._M_finish;
 80113c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80113c4:	3314      	adds	r3, #20
 80113c6:	6363      	str	r3, [r4, #52]	@ 0x34
	osSemaphoreRelease(CommunicationSemaphore);
 80113c8:	6820      	ldr	r0, [r4, #0]
 80113ca:	f7fb fd81 	bl	800ced0 <osSemaphoreRelease>
}
 80113ce:	4630      	mov	r0, r6
 80113d0:	b007      	add	sp, #28
 80113d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  _M_realloc_insert(end(), __x);
 80113d4:	4601      	mov	r1, r0
 80113d6:	462a      	mov	r2, r5
 80113d8:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80113dc:	f7ff ff36 	bl	801124c <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 80113e0:	e7f2      	b.n	80113c8 <_ZN13Communication4SendE13MessageHeader+0x68>
	if (!success) return HAL_ERROR;
 80113e2:	2601      	movs	r6, #1
 80113e4:	e7f3      	b.n	80113ce <_ZN13Communication4SendE13MessageHeader+0x6e>

080113e6 <_ZN23SubscriberConfigurationC1ERKS_>:
 80113e6:	b570      	push	{r4, r5, r6, lr}
 80113e8:	880b      	ldrh	r3, [r1, #0]
 80113ea:	4604      	mov	r4, r0
 80113ec:	460d      	mov	r5, r1
 80113ee:	8003      	strh	r3, [r0, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80113f0:	2300      	movs	r3, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80113f2:	e9d1 2601 	ldrd	r2, r6, [r1, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80113f6:	e9c0 3301 	strd	r3, r3, [r0, #4]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80113fa:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 80113fc:	60c3      	str	r3, [r0, #12]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80113fe:	d043      	beq.n	8011488 <_ZN23SubscriberConfigurationC1ERKS_+0xa2>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8011400:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011404:	429e      	cmp	r6, r3
 8011406:	d301      	bcc.n	801140c <_ZN23SubscriberConfigurationC1ERKS_+0x26>
	      std::__throw_bad_array_new_length();
 8011408:	f00c feb1 	bl	801e16e <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801140c:	4630      	mov	r0, r6
 801140e:	f00c fdfc 	bl	801e00a <_Znwj>
 8011412:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011414:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8011416:	e9c4 3301 	strd	r3, r3, [r4, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801141a:	60e6      	str	r6, [r4, #12]
      : _M_current(__i) { }
 801141c:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
	  if (_Num)
 8011420:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 8011422:	eba2 0601 	sub.w	r6, r2, r1
	  if (_Num)
 8011426:	d004      	beq.n	8011432 <_ZN23SubscriberConfigurationC1ERKS_+0x4c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8011428:	4618      	mov	r0, r3
 801142a:	4632      	mov	r2, r6
 801142c:	f00d fd6a 	bl	801ef04 <memmove>
 8011430:	4603      	mov	r3, r0
	  return __result + _Num;
 8011432:	4433      	add	r3, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011434:	e9d5 2604 	ldrd	r2, r6, [r5, #16]
	this->_M_impl._M_finish =
 8011438:	60a3      	str	r3, [r4, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801143a:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801143c:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 801143e:	61a3      	str	r3, [r4, #24]
 8011440:	e9c4 3304 	strd	r3, r3, [r4, #16]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011444:	d022      	beq.n	801148c <_ZN23SubscriberConfigurationC1ERKS_+0xa6>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8011446:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801144a:	429e      	cmp	r6, r3
 801144c:	d2dc      	bcs.n	8011408 <_ZN23SubscriberConfigurationC1ERKS_+0x22>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801144e:	4630      	mov	r0, r6
 8011450:	f00c fddb 	bl	801e00a <_Znwj>
 8011454:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011456:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8011458:	e9c4 3304 	strd	r3, r3, [r4, #16]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801145c:	61a6      	str	r6, [r4, #24]
 801145e:	e9d5 1204 	ldrd	r1, r2, [r5, #16]
	  if (_Num)
 8011462:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 8011464:	eba2 0601 	sub.w	r6, r2, r1
	  if (_Num)
 8011468:	d004      	beq.n	8011474 <_ZN23SubscriberConfigurationC1ERKS_+0x8e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801146a:	4618      	mov	r0, r3
 801146c:	4632      	mov	r2, r6
 801146e:	f00d fd49 	bl	801ef04 <memmove>
 8011472:	4603      	mov	r3, r0
	  return __result + _Num;
 8011474:	4433      	add	r3, r6
 8011476:	f105 011c 	add.w	r1, r5, #28
 801147a:	f104 001c 	add.w	r0, r4, #28
	this->_M_impl._M_finish =
 801147e:	6163      	str	r3, [r4, #20]
 8011480:	f7ef fbde 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011484:	4620      	mov	r0, r4
 8011486:	bd70      	pop	{r4, r5, r6, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011488:	4633      	mov	r3, r6
 801148a:	e7c3      	b.n	8011414 <_ZN23SubscriberConfigurationC1ERKS_+0x2e>
 801148c:	4633      	mov	r3, r6
 801148e:	e7e2      	b.n	8011456 <_ZN23SubscriberConfigurationC1ERKS_+0x70>

08011490 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_>:
 *
 * @param input information: input register and interface information
 * @param input data: published data for the input register
 */
template<typename T>
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 8011490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011494:	b090      	sub	sp, #64	@ 0x40
 8011496:	4605      	mov	r5, r0
	uint8_t index = 0;
	for (SubscriberConfiguration configuration : configurations) {
 8011498:	2600      	movs	r6, #0
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 801149a:	ac03      	add	r4, sp, #12
 801149c:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 80114a0:	e9d0 7903 	ldrd	r7, r9, [r0, #12]
 80114a4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	for (SubscriberConfiguration configuration : configurations) {
 80114a8:	45b9      	cmp	r9, r7
 80114aa:	d102      	bne.n	80114b2 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x22>
				}
			}
		}
		index++;
	}
}
 80114ac:	b010      	add	sp, #64	@ 0x40
 80114ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (SubscriberConfiguration configuration : configurations) {
 80114b2:	4639      	mov	r1, r7
 80114b4:	a806      	add	r0, sp, #24
 80114b6:	f7ff ff96 	bl	80113e6 <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 80114ba:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80114be:	b363      	cbz	r3, 801151a <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x8a>
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 80114c0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80114c4:	4628      	mov	r0, r5
 80114c6:	f89d a018 	ldrb.w	sl, [sp, #24]
 80114ca:	f8ad 3000 	strh.w	r3, [sp]
 80114ce:	4651      	mov	r1, sl
 80114d0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80114d4:	f00c f92e 	bl	801d734 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 80114d8:	b1f8      	cbz	r0, 801151a <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x8a>
				if (AddressAccepted(configuration.ID, information.interface.address)) {
 80114da:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80114de:	4651      	mov	r1, sl
 80114e0:	4628      	mov	r0, r5
 80114e2:	f00c f879 	bl	801d5d8 <_ZN17MasterSubscribers15AddressAcceptedEhh>
 80114e6:	b1c0      	cbz	r0, 801151a <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x8a>
					CommunicationLED(leds, information.interface.interface);
 80114e8:	f89d 1012 	ldrb.w	r1, [sp, #18]
 80114ec:	6868      	ldr	r0, [r5, #4]
 80114ee:	f7fd fdd1 	bl	800f094 <_Z16CommunicationLEDP4LEDSh>
					switch (information.register_.type) {
 80114f2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80114f6:	2b04      	cmp	r3, #4
 80114f8:	d015      	beq.n	8011526 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x96>
 80114fa:	2b08      	cmp	r3, #8
 80114fc:	d01d      	beq.n	801153a <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0xaa>
 80114fe:	2b02      	cmp	r3, #2
 8011500:	d10b      	bne.n	801151a <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x8a>
	return *(this->_M_impl._M_start + __n);
 8011502:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT32(information, (uint32_t*) data);
 8011504:	69aa      	ldr	r2, [r5, #24]
 8011506:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801150a:	6803      	ldr	r3, [r0, #0]
 801150c:	f8cd 8000 	str.w	r8, [sp]
 8011510:	f8d3 a000 	ldr.w	sl, [r3]
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 8011514:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011518:	47d0      	blx	sl
	for (SubscriberConfiguration configuration : configurations) {
 801151a:	a806      	add	r0, sp, #24
 801151c:	3601      	adds	r6, #1
 801151e:	3728      	adds	r7, #40	@ 0x28
 8011520:	f7ff fcbe 	bl	8010ea0 <_ZN23SubscriberConfigurationD1Ev>
	return *this;
 8011524:	e7c0      	b.n	80114a8 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x18>
 8011526:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveINT8(information, (int8_t*) data);
 8011528:	69aa      	ldr	r2, [r5, #24]
 801152a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801152e:	6803      	ldr	r3, [r0, #0]
 8011530:	f8cd 8000 	str.w	r8, [sp]
 8011534:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8011538:	e7ec      	b.n	8011514 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x84>
 801153a:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 801153c:	69aa      	ldr	r2, [r5, #24]
 801153e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011542:	6803      	ldr	r3, [r0, #0]
 8011544:	f8cd 8000 	str.w	r8, [sp]
 8011548:	f8d3 a008 	ldr.w	sl, [r3, #8]
 801154c:	e7e2      	b.n	8011514 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_+0x84>

0801154e <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_>:
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 801154e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011552:	b090      	sub	sp, #64	@ 0x40
 8011554:	4605      	mov	r5, r0
	for (SubscriberConfiguration configuration : configurations) {
 8011556:	2600      	movs	r6, #0
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 8011558:	ac03      	add	r4, sp, #12
 801155a:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 801155e:	e9d0 7903 	ldrd	r7, r9, [r0, #12]
 8011562:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	for (SubscriberConfiguration configuration : configurations) {
 8011566:	45b9      	cmp	r9, r7
 8011568:	d102      	bne.n	8011570 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x22>
}
 801156a:	b010      	add	sp, #64	@ 0x40
 801156c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (SubscriberConfiguration configuration : configurations) {
 8011570:	4639      	mov	r1, r7
 8011572:	a806      	add	r0, sp, #24
 8011574:	f7ff ff37 	bl	80113e6 <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 8011578:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801157c:	b363      	cbz	r3, 80115d8 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x8a>
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 801157e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011582:	4628      	mov	r0, r5
 8011584:	f89d a018 	ldrb.w	sl, [sp, #24]
 8011588:	f8ad 3000 	strh.w	r3, [sp]
 801158c:	4651      	mov	r1, sl
 801158e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8011592:	f00c f8cf 	bl	801d734 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 8011596:	b1f8      	cbz	r0, 80115d8 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x8a>
				if (AddressAccepted(configuration.ID, information.interface.address)) {
 8011598:	f89d 2013 	ldrb.w	r2, [sp, #19]
 801159c:	4651      	mov	r1, sl
 801159e:	4628      	mov	r0, r5
 80115a0:	f00c f81a 	bl	801d5d8 <_ZN17MasterSubscribers15AddressAcceptedEhh>
 80115a4:	b1c0      	cbz	r0, 80115d8 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x8a>
					CommunicationLED(leds, information.interface.interface);
 80115a6:	f89d 1012 	ldrb.w	r1, [sp, #18]
 80115aa:	6868      	ldr	r0, [r5, #4]
 80115ac:	f7fd fd72 	bl	800f094 <_Z16CommunicationLEDP4LEDSh>
					switch (information.register_.type) {
 80115b0:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80115b4:	2b04      	cmp	r3, #4
 80115b6:	d015      	beq.n	80115e4 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x96>
 80115b8:	2b08      	cmp	r3, #8
 80115ba:	d01d      	beq.n	80115f8 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0xaa>
 80115bc:	2b02      	cmp	r3, #2
 80115be:	d10b      	bne.n	80115d8 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x8a>
 80115c0:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT32(information, (uint32_t*) data);
 80115c2:	69aa      	ldr	r2, [r5, #24]
 80115c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80115c8:	6803      	ldr	r3, [r0, #0]
 80115ca:	f8cd 8000 	str.w	r8, [sp]
 80115ce:	f8d3 a000 	ldr.w	sl, [r3]
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 80115d2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80115d6:	47d0      	blx	sl
	for (SubscriberConfiguration configuration : configurations) {
 80115d8:	a806      	add	r0, sp, #24
 80115da:	3601      	adds	r6, #1
 80115dc:	3728      	adds	r7, #40	@ 0x28
 80115de:	f7ff fc5f 	bl	8010ea0 <_ZN23SubscriberConfigurationD1Ev>
 80115e2:	e7c0      	b.n	8011566 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x18>
 80115e4:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveINT8(information, (int8_t*) data);
 80115e6:	69aa      	ldr	r2, [r5, #24]
 80115e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80115ec:	6803      	ldr	r3, [r0, #0]
 80115ee:	f8cd 8000 	str.w	r8, [sp]
 80115f2:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80115f6:	e7ec      	b.n	80115d2 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x84>
 80115f8:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 80115fa:	69aa      	ldr	r2, [r5, #24]
 80115fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011600:	6803      	ldr	r3, [r0, #0]
 8011602:	f8cd 8000 	str.w	r8, [sp]
 8011606:	f8d3 a008 	ldr.w	sl, [r3, #8]
 801160a:	e7e2      	b.n	80115d2 <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_+0x84>

0801160c <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_>:
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 801160c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011610:	b090      	sub	sp, #64	@ 0x40
 8011612:	4605      	mov	r5, r0
	for (SubscriberConfiguration configuration : configurations) {
 8011614:	2600      	movs	r6, #0
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
 8011616:	ac03      	add	r4, sp, #12
 8011618:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 801161c:	e9d0 7903 	ldrd	r7, r9, [r0, #12]
 8011620:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	for (SubscriberConfiguration configuration : configurations) {
 8011624:	45b9      	cmp	r9, r7
 8011626:	d102      	bne.n	801162e <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x22>
}
 8011628:	b010      	add	sp, #64	@ 0x40
 801162a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (SubscriberConfiguration configuration : configurations) {
 801162e:	4639      	mov	r1, r7
 8011630:	a806      	add	r0, sp, #24
 8011632:	f7ff fed8 	bl	80113e6 <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 8011636:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801163a:	b363      	cbz	r3, 8011696 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x8a>
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 801163c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011640:	4628      	mov	r0, r5
 8011642:	f89d a018 	ldrb.w	sl, [sp, #24]
 8011646:	f8ad 3000 	strh.w	r3, [sp]
 801164a:	4651      	mov	r1, sl
 801164c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8011650:	f00c f870 	bl	801d734 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 8011654:	b1f8      	cbz	r0, 8011696 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x8a>
				if (AddressAccepted(configuration.ID, information.interface.address)) {
 8011656:	f89d 2013 	ldrb.w	r2, [sp, #19]
 801165a:	4651      	mov	r1, sl
 801165c:	4628      	mov	r0, r5
 801165e:	f00b ffbb 	bl	801d5d8 <_ZN17MasterSubscribers15AddressAcceptedEhh>
 8011662:	b1c0      	cbz	r0, 8011696 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x8a>
					CommunicationLED(leds, information.interface.interface);
 8011664:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8011668:	6868      	ldr	r0, [r5, #4]
 801166a:	f7fd fd13 	bl	800f094 <_Z16CommunicationLEDP4LEDSh>
					switch (information.register_.type) {
 801166e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8011672:	2b04      	cmp	r3, #4
 8011674:	d015      	beq.n	80116a2 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x96>
 8011676:	2b08      	cmp	r3, #8
 8011678:	d01d      	beq.n	80116b6 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0xaa>
 801167a:	2b02      	cmp	r3, #2
 801167c:	d10b      	bne.n	8011696 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x8a>
 801167e:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveUINT32(information, (uint32_t*) data);
 8011680:	69aa      	ldr	r2, [r5, #24]
 8011682:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011686:	6803      	ldr	r3, [r0, #0]
 8011688:	f8cd 8000 	str.w	r8, [sp]
 801168c:	f8d3 a000 	ldr.w	sl, [r3]
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 8011690:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011694:	47d0      	blx	sl
	for (SubscriberConfiguration configuration : configurations) {
 8011696:	a806      	add	r0, sp, #24
 8011698:	3601      	adds	r6, #1
 801169a:	3728      	adds	r7, #40	@ 0x28
 801169c:	f7ff fc00 	bl	8010ea0 <_ZN23SubscriberConfigurationD1Ev>
 80116a0:	e7c0      	b.n	8011624 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x18>
 80116a2:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveINT8(information, (int8_t*) data);
 80116a4:	69aa      	ldr	r2, [r5, #24]
 80116a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80116aa:	6803      	ldr	r3, [r0, #0]
 80116ac:	f8cd 8000 	str.w	r8, [sp]
 80116b0:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80116b4:	e7ec      	b.n	8011690 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x84>
 80116b6:	b2f3      	uxtb	r3, r6
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 80116b8:	69aa      	ldr	r2, [r5, #24]
 80116ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80116be:	6803      	ldr	r3, [r0, #0]
 80116c0:	f8cd 8000 	str.w	r8, [sp]
 80116c4:	f8d3 a008 	ldr.w	sl, [r3, #8]
 80116c8:	e7e2      	b.n	8011690 <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_+0x84>
	...

080116cc <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>:
 * @param input length: the number of values to extract
 * @param output success: whether successful
 * @return a vector with extracted values
 */
template<typename T>
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 80116cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 80116d0:	2600      	movs	r6, #0
 80116d2:	4605      	mov	r5, r0
 80116d4:	4688      	mov	r8, r1
 80116d6:	4691      	mov	r9, r2
 80116d8:	ed2d 8b02 	vpush	{d8}
 80116dc:	b087      	sub	sp, #28
 80116de:	6086      	str	r6, [r0, #8]
 80116e0:	9301      	str	r3, [sp, #4]
 80116e2:	e9c0 6600 	strd	r6, r6, [r0]
 80116e6:	b2f4      	uxtb	r4, r6
	std::vector<T> data;
	uint8_t type_length = sizeof(T);

	for (uint8_t index = 0; index < length; index++) {
 80116e8:	9b01      	ldr	r3, [sp, #4]
 80116ea:	429c      	cmp	r4, r3
 80116ec:	db05      	blt.n	80116fa <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x2e>
		if (not *success)
			return data;
		data.push_back(element);
	}
	return data;
}
 80116ee:	4628      	mov	r0, r5
 80116f0:	b007      	add	sp, #28
 80116f2:	ecbd 8b02 	vpop	{d8}
 80116f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 80116fa:	4641      	mov	r1, r8
 80116fc:	a803      	add	r0, sp, #12
 80116fe:	f7ef fa9f 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011702:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011704:	eb09 0184 	add.w	r1, r9, r4, lsl #2
 8011708:	a803      	add	r0, sp, #12
 801170a:	b289      	uxth	r1, r1
 801170c:	f7fe ffd8 	bl	80106c0 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 8011710:	a803      	add	r0, sp, #12
 8011712:	eeb0 8a40 	vmov.f32	s16, s0
 8011716:	f7ef f9e3 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 801171a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801171c:	781b      	ldrb	r3, [r3, #0]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d0e5      	beq.n	80116ee <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x22>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8011722:	e9d5 4301 	ldrd	r4, r3, [r5, #4]
 8011726:	429c      	cmp	r4, r3
 8011728:	d004      	beq.n	8011734 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x68>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801172a:	eca4 8a01 	vstmia	r4!, {s16}
	    ++this->_M_impl._M_finish;
 801172e:	606c      	str	r4, [r5, #4]
	for (uint8_t index = 0; index < length; index++) {
 8011730:	3601      	adds	r6, #1
 8011732:	e7d8      	b.n	80116e6 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x1a>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8011734:	2101      	movs	r1, #1
 8011736:	4a13      	ldr	r2, [pc, #76]	@ (8011784 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xb8>)
 8011738:	4628      	mov	r0, r5
 801173a:	f7ff fccb 	bl	80110d4 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 801173e:	682f      	ldr	r7, [r5, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8011740:	4682      	mov	sl, r0
      pointer __new_start(this->_M_allocate(__len));
 8011742:	f7fe fea4 	bl	801048e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
    { return __lhs.base() - __rhs.base(); }
 8011746:	eba4 0b07 	sub.w	fp, r4, r7
 801174a:	4604      	mov	r4, r0
 801174c:	eb00 010b 	add.w	r1, r0, fp
      if (__count > 0)
 8011750:	f1bb 0f00 	cmp.w	fp, #0
 8011754:	ed81 8a00 	vstr	s16, [r1]
 8011758:	dd03      	ble.n	8011762 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x96>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801175a:	465a      	mov	r2, fp
 801175c:	4639      	mov	r1, r7
 801175e:	f00d fbd1 	bl	801ef04 <memmove>
	      ++__new_finish;
 8011762:	f10b 0204 	add.w	r2, fp, #4
 8011766:	eb04 0b02 	add.w	fp, r4, r2
	if (__p)
 801176a:	b12f      	cbz	r7, 8011778 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xac>
		    this->_M_impl._M_end_of_storage - __old_start);
 801176c:	68a9      	ldr	r1, [r5, #8]
 801176e:	4638      	mov	r0, r7
 8011770:	1bc9      	subs	r1, r1, r7
 8011772:	1089      	asrs	r1, r1, #2
 8011774:	f7fe fe88 	bl	8010488 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
      this->_M_impl._M_finish = __new_finish;
 8011778:	e9c5 4b00 	strd	r4, fp, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801177c:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 8011780:	60ac      	str	r4, [r5, #8]
 8011782:	e7d5      	b.n	8011730 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x64>
 8011784:	0801f20c 	.word	0x0801f20c

08011788 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8011788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801178c:	ed2d 8b02 	vpush	{d8}
 8011790:	b085      	sub	sp, #20
 8011792:	4607      	mov	r7, r0
 8011794:	4688      	mov	r8, r1
 8011796:	4691      	mov	r9, r2
 8011798:	461d      	mov	r5, r3
 801179a:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 801179e:	2600      	movs	r6, #0
 80117a0:	b2f4      	uxtb	r4, r6
	for (uint8_t index = 0; index < length; index++) {
 80117a2:	42ac      	cmp	r4, r5
 80117a4:	db04      	blt.n	80117b0 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x28>
}
 80117a6:	b005      	add	sp, #20
 80117a8:	ecbd 8b02 	vpop	{d8}
 80117ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 80117b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80117b4:	4641      	mov	r1, r8
 80117b6:	eb09 0484 	add.w	r4, r9, r4, lsl #2
 80117ba:	a801      	add	r0, sp, #4
 80117bc:	f7ef fa40 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80117c0:	4652      	mov	r2, sl
 80117c2:	b2a1      	uxth	r1, r4
 80117c4:	a801      	add	r0, sp, #4
 80117c6:	f7fe ff7b 	bl	80106c0 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 80117ca:	a801      	add	r0, sp, #4
 80117cc:	eeb0 8a40 	vmov.f32	s16, s0
 80117d0:	f7ef f986 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 80117d4:	f89a 3000 	ldrb.w	r3, [sl]
 80117d8:	3601      	adds	r6, #1
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d0e3      	beq.n	80117a6 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x1e>
		data[index] = element;
 80117de:	44bb      	add	fp, r7
 80117e0:	ed8b 8a00 	vstr	s16, [fp]
	for (uint8_t index = 0; index < length; index++) {
 80117e4:	e7dc      	b.n	80117a0 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x18>

080117e6 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 80117e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ea:	b08f      	sub	sp, #60	@ 0x3c
 80117ec:	461c      	mov	r4, r3
 80117ee:	4691      	mov	r9, r2
 80117f0:	468a      	mov	sl, r1
	T array_values[element.element_register.length];
 80117f2:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80117f6:	466a      	mov	r2, sp
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 80117f8:	af02      	add	r7, sp, #8
	T array_values[element.element_register.length];
 80117fa:	ea4f 0388 	mov.w	r3, r8, lsl #2
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80117fe:	3104      	adds	r1, #4
 8011800:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 8011804:	f107 060b 	add.w	r6, r7, #11
	T array_values[element.element_register.length];
 8011808:	3307      	adds	r3, #7
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 801180a:	6078      	str	r0, [r7, #4]
	T array_values[element.element_register.length];
 801180c:	08db      	lsrs	r3, r3, #3
 801180e:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8011812:	469d      	mov	sp, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011814:	2300      	movs	r3, #0
 8011816:	e9c7 3303 	strd	r3, r3, [r7, #12]
 801181a:	617b      	str	r3, [r7, #20]
 801181c:	f10d 0b08 	add.w	fp, sp, #8
	if (not element.element_register.isArray) {
 8011820:	f899 3003 	ldrb.w	r3, [r9, #3]
 8011824:	bb93      	cbnz	r3, 801188c <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0xa6>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011826:	4628      	mov	r0, r5
		data = &single_value;
 8011828:	f107 0b18 	add.w	fp, r7, #24
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801182c:	f7ef fa08 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		length_to_extract = 1;
 8011830:	f04f 0801 	mov.w	r8, #1
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011834:	4632      	mov	r2, r6
 8011836:	4621      	mov	r1, r4
 8011838:	4628      	mov	r0, r5
 801183a:	f7fe ff41 	bl	80106c0 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 801183e:	4628      	mov	r0, r5
 8011840:	ed87 0a06 	vstr	s0, [r7, #24]
 8011844:	f7ef f94c 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	subscriber_information.interface.interface = message.interface;
 8011848:	f89a 3000 	ldrb.w	r3, [sl]
	return start_index + sizeof(T) * length_to_extract;
 801184c:	eb04 0488 	add.w	r4, r4, r8, lsl #2
	subscriber_information.length = length_to_extract;
 8011850:	f8a7 802c 	strh.w	r8, [r7, #44]	@ 0x2c
	subscriber_information.interface.interface = message.interface;
 8011854:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	return start_index + sizeof(T) * length_to_extract;
 8011858:	b2a4      	uxth	r4, r4
	subscriber_information.interface.address = message.source_address;
 801185a:	f89a 3011 	ldrb.w	r3, [sl, #17]
	subscriber_information.register_ = element.element_register;
 801185e:	e899 0003 	ldmia.w	r9, {r0, r1}
	subscriber_information.interface.address = message.source_address;
 8011862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	subscriber_information.register_ = element.element_register;
 8011866:	6278      	str	r0, [r7, #36]	@ 0x24
 8011868:	8539      	strh	r1, [r7, #40]	@ 0x28
	subscribers->Receive<T>(subscriber_information, data);
 801186a:	f8cd b000 	str.w	fp, [sp]
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8011874:	68c0      	ldr	r0, [r0, #12]
 8011876:	f7ff fec9 	bl	801160c <_ZN17MasterSubscribers7ReceiveIfEEv15SubscriberInputPT_>
 801187a:	f107 000c 	add.w	r0, r7, #12
 801187e:	f7f0 fb8d 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
}
 8011882:	4620      	mov	r0, r4
 8011884:	3734      	adds	r7, #52	@ 0x34
 8011886:	46bd      	mov	sp, r7
 8011888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 801188c:	f1b8 0f00 	cmp.w	r8, #0
 8011890:	d00d      	beq.n	80118ae <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0xc8>
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8011892:	4628      	mov	r0, r5
 8011894:	f7ef f9d4 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011898:	4658      	mov	r0, fp
 801189a:	4643      	mov	r3, r8
 801189c:	4622      	mov	r2, r4
 801189e:	4629      	mov	r1, r5
 80118a0:	9600      	str	r6, [sp, #0]
 80118a2:	f7ff ff71 	bl	8011788 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 80118a6:	4628      	mov	r0, r5
 80118a8:	f7ef f91a 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = array_values;
 80118ac:	e7cc      	b.n	8011848 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x62>
		length_to_extract = message.payload[start_index];
 80118ae:	f8da 3004 	ldr.w	r3, [sl, #4]
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80118b2:	f107 0018 	add.w	r0, r7, #24
		length_to_extract = message.payload[start_index];
 80118b6:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 80118ba:	3401      	adds	r4, #1
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80118bc:	f7ef f9c0 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80118c0:	f107 0118 	add.w	r1, r7, #24
		start_index++;
 80118c4:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80118c6:	4643      	mov	r3, r8
 80118c8:	4628      	mov	r0, r5
 80118ca:	9600      	str	r6, [sp, #0]
 80118cc:	4622      	mov	r2, r4
 80118ce:	f7ff fefd 	bl	80116cc <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 80118d2:	4629      	mov	r1, r5
 80118d4:	f107 000c 	add.w	r0, r7, #12
 80118d8:	f7ff fb16 	bl	8010f08 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>
 80118dc:	4628      	mov	r0, r5
 80118de:	f7f0 fb5d 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80118e2:	f107 0018 	add.w	r0, r7, #24
 80118e6:	f7ef f8fb 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 80118ea:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 80118ee:	e7ab      	b.n	8011848 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x62>

080118f0 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 80118f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118f4:	b099      	sub	sp, #100	@ 0x64
 80118f6:	468c      	mov	ip, r1
 80118f8:	4682      	mov	sl, r0
 80118fa:	461c      	mov	r4, r3
 80118fc:	af04      	add	r7, sp, #16
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 80118fe:	f89c 3000 	ldrb.w	r3, [ip]
 8011902:	f89c b011 	ldrb.w	fp, [ip, #17]
 8011906:	f107 0544 	add.w	r5, r7, #68	@ 0x44
	service_information.access = element.access;
 801190a:	7a16      	ldrb	r6, [r2, #8]
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 801190c:	617b      	str	r3, [r7, #20]
	service_information.register_ = element.element_register;
 801190e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011912:	6238      	str	r0, [r7, #32]
	if (element.command) {
 8011914:	79d0      	ldrb	r0, [r2, #7]
	service_information.register_ = element.element_register;
 8011916:	84b9      	strh	r1, [r7, #36]	@ 0x24
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8011918:	f10c 0104 	add.w	r1, ip, #4
	if (element.command) {
 801191c:	b340      	cbz	r0, 8011970 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x80>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 801191e:	4628      	mov	r0, r5
 8011920:	f7ef f98e 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011924:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8011928:	4621      	mov	r1, r4
 801192a:	4628      	mov	r0, r5
 801192c:	f7fe ff0c 	bl	8010748 <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8011930:	4680      	mov	r8, r0
      }
 8011932:	4628      	mov	r0, r5
 8011934:	f7ef f8d4 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8011938:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 801193c:	b18b      	cbz	r3, 8011962 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 801193e:	2301      	movs	r3, #1
 8011940:	f887 b029 	strb.w	fp, [r7, #41]	@ 0x29
 8011944:	f887 602a 	strb.w	r6, [r7, #42]	@ 0x2a
 8011948:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801194a:	697b      	ldr	r3, [r7, #20]
 801194c:	f8da 0008 	ldr.w	r0, [sl, #8]
 8011950:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8011954:	f107 0320 	add.w	r3, r7, #32
 8011958:	f8cd 8000 	str.w	r8, [sp]
 801195c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801195e:	f00b fcec 	bl	801d33a <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
		return start_index + 1;
 8011962:	3401      	adds	r4, #1
 8011964:	b2a4      	uxth	r4, r4
}
 8011966:	4620      	mov	r0, r4
 8011968:	3754      	adds	r7, #84	@ 0x54
 801196a:	46bd      	mov	sp, r7
 801196c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (element.access == WRITE) {
 8011970:	bb1e      	cbnz	r6, 80119ba <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0xca>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8011972:	4628      	mov	r0, r5
 8011974:	f7ef f964 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011978:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 801197c:	4621      	mov	r1, r4
 801197e:	4628      	mov	r0, r5
 8011980:	f7fe fee2 	bl	8010748 <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8011984:	4680      	mov	r8, r0
 8011986:	4628      	mov	r0, r5
 8011988:	f7ef f8aa 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 801198c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8011990:	2b00      	cmp	r3, #0
 8011992:	d0e6      	beq.n	8011962 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 8011994:	2301      	movs	r3, #1
 8011996:	f887 b029 	strb.w	fp, [r7, #41]	@ 0x29
 801199a:	f887 602a 	strb.w	r6, [r7, #42]	@ 0x2a
 801199e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80119a0:	697b      	ldr	r3, [r7, #20]
 80119a2:	f8da 0008 	ldr.w	r0, [sl, #8]
 80119a6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80119aa:	f107 0320 	add.w	r3, r7, #32
 80119ae:	f8cd 8000 	str.w	r8, [sp]
 80119b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80119b4:	f00b fc84 	bl	801d2c0 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 80119b8:	e7d3      	b.n	8011962 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x72>
		T array_values[element.element_register.length];
 80119ba:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80119be:	466e      	mov	r6, sp
	}
 80119c0:	f8c7 d008 	str.w	sp, [r7, #8]
		T array_values[element.element_register.length];
 80119c4:	ea4f 0388 	mov.w	r3, r8, lsl #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 80119c8:	6378      	str	r0, [r7, #52]	@ 0x34
 80119ca:	3307      	adds	r3, #7
 80119cc:	08db      	lsrs	r3, r3, #3
 80119ce:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
 80119d2:	f107 061e 	add.w	r6, r7, #30
 80119d6:	469d      	mov	sp, r3
		if (not element.element_register.isArray) {
 80119d8:	78d3      	ldrb	r3, [r2, #3]
		T array_values[element.element_register.length];
 80119da:	f10d 0910 	add.w	r9, sp, #16
 80119de:	e9c7 000b 	strd	r0, r0, [r7, #44]	@ 0x2c
		if (not element.element_register.isArray) {
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d141      	bne.n	8011a6a <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x17a>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80119e6:	4628      	mov	r0, r5
			data = &single_value;
 80119e8:	f107 0938 	add.w	r9, r7, #56	@ 0x38
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80119ec:	f7ef f928 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
			length_to_extract = 1;
 80119f0:	f04f 0801 	mov.w	r8, #1
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80119f4:	4632      	mov	r2, r6
 80119f6:	4621      	mov	r1, r4
 80119f8:	4628      	mov	r0, r5
 80119fa:	f7fe fe61 	bl	80106c0 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 80119fe:	4628      	mov	r0, r5
 8011a00:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
 8011a04:	f7ef f86c 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011a08:	ea4f 0288 	mov.w	r2, r8, lsl #2
		if (success)
 8011a0c:	7fbb      	ldrb	r3, [r7, #30]
 8011a0e:	60fa      	str	r2, [r7, #12]
 8011a10:	b30b      	cbz	r3, 8011a56 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x166>
 8011a12:	697b      	ldr	r3, [r7, #20]
			services->ReceiveRead<T>(service_information, data);
 8011a14:	f8da 6008 	ldr.w	r6, [sl, #8]
 8011a18:	f04f 0a01 	mov.w	sl, #1
 8011a1c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8011a20:	f107 0320 	add.w	r3, r7, #32
 8011a24:	f8a7 8026 	strh.w	r8, [r7, #38]	@ 0x26
 8011a28:	f887 b029 	strb.w	fp, [r7, #41]	@ 0x29
 8011a2c:	f887 a02a 	strb.w	sl, [r7, #42]	@ 0x2a
 * @param input information: the service feedback information
 * @param input data: returned data from the remote module
 */
template<typename T>
void Services::ReceiveRead(ServiceConfiguration information, T* data) {
	bool success = true;
 8011a30:	f887 a01f 	strb.w	sl, [r7, #31]
 8011a34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011a38:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011a3c:	613b      	str	r3, [r7, #16]
void Services::ReceiveRead(ServiceConfiguration information, T* data) {
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	444b      	add	r3, r9
 8011a42:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011a46:	607b      	str	r3, [r7, #4]
	uint8_t start_index = 0;
 8011a48:	2100      	movs	r1, #0
		if (not success) return;

		if (information.length > SERVICES_BUFFER_SIZE) return;

#ifdef USE_COM_LED_SERVICES_RECEPTION
		CommunicationLED(leds, information.interface.interface);
 8011a4a:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 8011a4e:	603b      	str	r3, [r7, #0]
	while (success) {
 8011a50:	7ffb      	ldrb	r3, [r7, #31]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d13b      	bne.n	8011ace <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x1de>
		return start_index + sizeof(T) * length_to_extract;
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8011a5c:	441c      	add	r4, r3
 8011a5e:	f7f0 fa9d 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8011a62:	f8d7 d008 	ldr.w	sp, [r7, #8]
 8011a66:	b2a4      	uxth	r4, r4
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8011a68:	e77d      	b.n	8011966 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x76>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 8011a6a:	f1b8 0f00 	cmp.w	r8, #0
 8011a6e:	d00d      	beq.n	8011a8c <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x19c>
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8011a70:	4628      	mov	r0, r5
 8011a72:	f7ef f8e5 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011a76:	4648      	mov	r0, r9
 8011a78:	4643      	mov	r3, r8
 8011a7a:	4622      	mov	r2, r4
 8011a7c:	4629      	mov	r1, r5
 8011a7e:	9600      	str	r6, [sp, #0]
 8011a80:	f7ff fe82 	bl	8011788 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8011a84:	4628      	mov	r0, r5
 8011a86:	f7ef f82b 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			data = array_values;
 8011a8a:	e7bd      	b.n	8011a08 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x118>
			length_to_extract = message.payload[start_index];
 8011a8c:	f8dc 3004 	ldr.w	r3, [ip, #4]
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011a90:	f107 0038 	add.w	r0, r7, #56	@ 0x38
			length_to_extract = message.payload[start_index];
 8011a94:	f813 8004 	ldrb.w	r8, [r3, r4]
			start_index++;
 8011a98:	3401      	adds	r4, #1
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011a9a:	f7ef f8d1 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011a9e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
			start_index++;
 8011aa2:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011aa4:	4643      	mov	r3, r8
 8011aa6:	4628      	mov	r0, r5
 8011aa8:	9600      	str	r6, [sp, #0]
 8011aaa:	4622      	mov	r2, r4
 8011aac:	f7ff fe0e 	bl	80116cc <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8011ab0:	4629      	mov	r1, r5
 8011ab2:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8011ab6:	f7ff fa27 	bl	8010f08 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>
 8011aba:	4628      	mov	r0, r5
 8011abc:	f7f0 fa6e 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8011ac0:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8011ac4:	f7ef f80c 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8011ac8:	f8d7 902c 	ldr.w	r9, [r7, #44]	@ 0x2c
 8011acc:	e79c      	b.n	8011a08 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x118>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	4630      	mov	r0, r6
 8011ad2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8011ad6:	f107 031f 	add.w	r3, r7, #31
 8011ada:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011ade:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8011ae2:	f8ad 3000 	strh.w	r3, [sp]
 8011ae6:	e895 000c 	ldmia.w	r5, {r2, r3}
 8011aea:	f00b fbaa 	bl	801d242 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 8011aee:	7ffa      	ldrb	r2, [r7, #31]
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8011af0:	4683      	mov	fp, r0
		if (not success) return;
 8011af2:	2a00      	cmp	r2, #0
 8011af4:	d0af      	beq.n	8011a56 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x166>
		if (information.length > SERVICES_BUFFER_SIZE) return;
 8011af6:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 8011afa:	d8ac      	bhi.n	8011a56 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x166>
		CommunicationLED(leds, information.interface.interface);
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	6979      	ldr	r1, [r7, #20]
 8011b00:	f8d3 0440 	ldr.w	r0, [r3, #1088]	@ 0x440
 8011b04:	f7fd fac6 	bl	800f094 <_Z16CommunicationLEDP4LEDSh>
#endif

		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8011b08:	f04f 31ff 	mov.w	r1, #4294967295
 8011b0c:	6830      	ldr	r0, [r6, #0]
 8011b0e:	f7fb f9ab 	bl	800ce68 <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 8011b12:	2218      	movs	r2, #24

		// Transfer data to the service buffer
		switch (information.register_.type) {
 8011b14:	693b      	ldr	r3, [r7, #16]
		services[index].configuration.length = information.length;
 8011b16:	fb02 620b 	mla	r2, r2, fp, r6
 8011b1a:	f8a2 8010 	strh.w	r8, [r2, #16]
		switch (information.register_.type) {
 8011b1e:	2b08      	cmp	r3, #8
 8011b20:	d80e      	bhi.n	8011b40 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x250>
 8011b22:	e8df f003 	tbb	[pc, r3]
 8011b26:	0d05      	.short	0x0d05
 8011b28:	0d1f0d05 	.word	0x0d1f0d05
 8011b2c:	0d0d      	.short	0x0d0d
 8011b2e:	2c          	.byte	0x2c
 8011b2f:	00          	.byte	0x00
			TranferData<uint16_t>((uint16_t*) data, &buffer_uint16[index][0], information.length);
			break;
#endif
#if defined(USE_UINT32_COMMUNICATION) && defined(USE_UINT32_REGISTER)
		case UINT32_TYPE:
			TranferData<uint32_t>((uint32_t*) data, &buffer_uint32[index][0], information.length);
 8011b30:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 8011b34:	2200      	movs	r2, #0
 8011b36:	f501 710e 	add.w	r1, r1, #568	@ 0x238
 * @param output to: base pointer to copy data to
 * @param input length: number of elements to copy
 */
template<typename T>
void Services::TranferData(T* from, T* to, uint16_t length) {
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8011b3a:	b290      	uxth	r0, r2
 8011b3c:	4580      	cmp	r8, r0
 8011b3e:	d80b      	bhi.n	8011b58 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x268>
		services[index].reception_flag = true;
 8011b40:	2218      	movs	r2, #24
		osSemaphoreRelease(ServiceSemaphore);
 8011b42:	6830      	ldr	r0, [r6, #0]
		services[index].reception_flag = true;
 8011b44:	fb02 620b 	mla	r2, r2, fp, r6
 8011b48:	f882 a009 	strb.w	sl, [r2, #9]
		osSemaphoreRelease(ServiceSemaphore);
 8011b4c:	f7fb f9c0 	bl	800ced0 <osSemaphoreRelease>
		start_index = index + 1;
 8011b50:	f10b 0101 	add.w	r1, fp, #1
 8011b54:	b2c9      	uxtb	r1, r1
 8011b56:	e77b      	b.n	8011a50 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x160>
		to[buffer_index] = from[buffer_index];
 8011b58:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
 8011b5c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8011b60:	3201      	adds	r2, #1
 8011b62:	e7ea      	b.n	8011b3a <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x24a>
			TranferData<int8_t>((int8_t*) data, &buffer_int8[index][0], information.length);
 8011b64:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 8011b68:	2200      	movs	r2, #0
 8011b6a:	f601 2138 	addw	r1, r1, #2616	@ 0xa38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8011b6e:	b290      	uxth	r0, r2
 8011b70:	4580      	cmp	r8, r0
 8011b72:	d9e5      	bls.n	8011b40 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x250>
		to[buffer_index] = from[buffer_index];
 8011b74:	f919 0002 	ldrsb.w	r0, [r9, r2]
 8011b78:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8011b7a:	3201      	adds	r2, #1
 8011b7c:	e7f7      	b.n	8011b6e <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x27e>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 8011b7e:	eb06 228b 	add.w	r2, r6, fp, lsl #10
 8011b82:	4649      	mov	r1, r9
 8011b84:	f602 4238 	addw	r2, r2, #3128	@ 0xc38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	4299      	cmp	r1, r3
 8011b8c:	d0d8      	beq.n	8011b40 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x250>
		to[buffer_index] = from[buffer_index];
 8011b8e:	f851 0b04 	ldr.w	r0, [r1], #4
 8011b92:	f842 0b04 	str.w	r0, [r2], #4
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8011b96:	e7f7      	b.n	8011b88 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x298>

08011b98 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>:
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8011b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011b9c:	2600      	movs	r6, #0
 8011b9e:	b087      	sub	sp, #28
 8011ba0:	4604      	mov	r4, r0
 8011ba2:	4691      	mov	r9, r2
 8011ba4:	9100      	str	r1, [sp, #0]
 8011ba6:	9301      	str	r3, [sp, #4]
 8011ba8:	6086      	str	r6, [r0, #8]
 8011baa:	e9c0 6600 	strd	r6, r6, [r0]
 8011bae:	b2f5      	uxtb	r5, r6
	for (uint8_t index = 0; index < length; index++) {
 8011bb0:	9b01      	ldr	r3, [sp, #4]
 8011bb2:	429d      	cmp	r5, r3
 8011bb4:	db03      	blt.n	8011bbe <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x26>
}
 8011bb6:	4620      	mov	r0, r4
 8011bb8:	b007      	add	sp, #28
 8011bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8011bbe:	9900      	ldr	r1, [sp, #0]
 8011bc0:	a803      	add	r0, sp, #12
 8011bc2:	f7ef f83d 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011bc6:	eb05 0109 	add.w	r1, r5, r9
 8011bca:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011bcc:	a803      	add	r0, sp, #12
 8011bce:	b289      	uxth	r1, r1
 8011bd0:	f7fe fd94 	bl	80106fc <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 8011bd4:	4607      	mov	r7, r0
      }
 8011bd6:	a803      	add	r0, sp, #12
 8011bd8:	f7ee ff82 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 8011bdc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011bde:	781b      	ldrb	r3, [r3, #0]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d0e8      	beq.n	8011bb6 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x1e>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8011be4:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
 8011be8:	429d      	cmp	r5, r3
 8011bea:	d005      	beq.n	8011bf8 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x60>
 8011bec:	702f      	strb	r7, [r5, #0]
	    ++this->_M_impl._M_finish;
 8011bee:	6863      	ldr	r3, [r4, #4]
 8011bf0:	3301      	adds	r3, #1
 8011bf2:	6063      	str	r3, [r4, #4]
	for (uint8_t index = 0; index < length; index++) {
 8011bf4:	3601      	adds	r6, #1
 8011bf6:	e7da      	b.n	8011bae <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x16>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8011bf8:	4a13      	ldr	r2, [pc, #76]	@ (8011c48 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xb0>)
 8011bfa:	2101      	movs	r1, #1
 8011bfc:	4620      	mov	r0, r4
 8011bfe:	f7ff fa50 	bl	80110a2 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 8011c02:	f8d4 b000 	ldr.w	fp, [r4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8011c06:	4682      	mov	sl, r0
      pointer __new_start(this->_M_allocate(__len));
 8011c08:	f7fe fc53 	bl	80104b2 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 8011c0c:	eba5 080b 	sub.w	r8, r5, fp
 8011c10:	4605      	mov	r5, r0
      if (__count > 0)
 8011c12:	f1b8 0f00 	cmp.w	r8, #0
 8011c16:	f800 7008 	strb.w	r7, [r0, r8]
 8011c1a:	dd03      	ble.n	8011c24 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x8c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8011c1c:	4642      	mov	r2, r8
 8011c1e:	4659      	mov	r1, fp
 8011c20:	f00d f970 	bl	801ef04 <memmove>
	      ++__new_finish;
 8011c24:	f108 0201 	add.w	r2, r8, #1
 8011c28:	18af      	adds	r7, r5, r2
	if (__p)
 8011c2a:	f1bb 0f00 	cmp.w	fp, #0
 8011c2e:	d005      	beq.n	8011c3c <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xa4>
		    this->_M_impl._M_end_of_storage - __old_start);
 8011c30:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8011c32:	4658      	mov	r0, fp
 8011c34:	eba1 010b 	sub.w	r1, r1, fp
 8011c38:	f00c f9c2 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8011c3c:	e9c4 5700 	strd	r5, r7, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011c40:	4455      	add	r5, sl
 8011c42:	60a5      	str	r5, [r4, #8]
 8011c44:	e7d6      	b.n	8011bf4 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x5c>
 8011c46:	bf00      	nop
 8011c48:	0801f20c 	.word	0x0801f20c

08011c4c <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8011c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c50:	b085      	sub	sp, #20
 8011c52:	4607      	mov	r7, r0
 8011c54:	4688      	mov	r8, r1
 8011c56:	4691      	mov	r9, r2
 8011c58:	461c      	mov	r4, r3
 8011c5a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8011c5e:	2600      	movs	r6, #0
 8011c60:	b2f5      	uxtb	r5, r6
	for (uint8_t index = 0; index < length; index++) {
 8011c62:	42a5      	cmp	r5, r4
 8011c64:	db02      	blt.n	8011c6c <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x20>
}
 8011c66:	b005      	add	sp, #20
 8011c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8011c6c:	4641      	mov	r1, r8
 8011c6e:	a801      	add	r0, sp, #4
 8011c70:	f7ee ffe6 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011c74:	eb05 0109 	add.w	r1, r5, r9
 8011c78:	465a      	mov	r2, fp
 8011c7a:	a801      	add	r0, sp, #4
 8011c7c:	b289      	uxth	r1, r1
		if (not *success)
 8011c7e:	3601      	adds	r6, #1
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8011c80:	f7fe fd3c 	bl	80106fc <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 8011c84:	4682      	mov	sl, r0
      }
 8011c86:	a801      	add	r0, sp, #4
 8011c88:	f7ee ff2a 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 8011c8c:	f89b 3000 	ldrb.w	r3, [fp]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d0e8      	beq.n	8011c66 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x1a>
		data[index] = element;
 8011c94:	f807 a005 	strb.w	sl, [r7, r5]
	for (uint8_t index = 0; index < length; index++) {
 8011c98:	e7e2      	b.n	8011c60 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x14>

08011c9a <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8011c9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c9e:	b08f      	sub	sp, #60	@ 0x3c
 8011ca0:	461c      	mov	r4, r3
 8011ca2:	4691      	mov	r9, r2
 8011ca4:	468a      	mov	sl, r1
	T array_values[element.element_register.length];
 8011ca6:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8011caa:	466a      	mov	r2, sp
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8011cac:	af02      	add	r7, sp, #8
	T array_values[element.element_register.length];
 8011cae:	f108 0307 	add.w	r3, r8, #7
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011cb2:	3104      	adds	r1, #4
 8011cb4:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 8011cb8:	f107 060b 	add.w	r6, r7, #11
	T array_values[element.element_register.length];
 8011cbc:	08db      	lsrs	r3, r3, #3
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8011cbe:	6078      	str	r0, [r7, #4]
	T array_values[element.element_register.length];
 8011cc0:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8011cc4:	469d      	mov	sp, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	e9c7 3303 	strd	r3, r3, [r7, #12]
 8011ccc:	617b      	str	r3, [r7, #20]
 8011cce:	f10d 0b08 	add.w	fp, sp, #8
	if (not element.element_register.isArray) {
 8011cd2:	f899 3003 	ldrb.w	r3, [r9, #3]
 8011cd6:	bb83      	cbnz	r3, 8011d3a <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0xa0>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011cd8:	4628      	mov	r0, r5
		data = &single_value;
 8011cda:	f107 0b18 	add.w	fp, r7, #24
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011cde:	f7ee ffaf 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		length_to_extract = 1;
 8011ce2:	f04f 0801 	mov.w	r8, #1
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011ce6:	4632      	mov	r2, r6
 8011ce8:	4621      	mov	r1, r4
 8011cea:	4628      	mov	r0, r5
 8011cec:	f7fe fd06 	bl	80106fc <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 8011cf0:	7638      	strb	r0, [r7, #24]
      }
 8011cf2:	4628      	mov	r0, r5
 8011cf4:	f7ee fef4 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	subscriber_information.interface.interface = message.interface;
 8011cf8:	f89a 3000 	ldrb.w	r3, [sl]
	return start_index + sizeof(T) * length_to_extract;
 8011cfc:	4444      	add	r4, r8
	subscriber_information.length = length_to_extract;
 8011cfe:	f8a7 802c 	strh.w	r8, [r7, #44]	@ 0x2c
	subscriber_information.interface.interface = message.interface;
 8011d02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	return start_index + sizeof(T) * length_to_extract;
 8011d06:	b2a4      	uxth	r4, r4
	subscriber_information.interface.address = message.source_address;
 8011d08:	f89a 3011 	ldrb.w	r3, [sl, #17]
	subscriber_information.register_ = element.element_register;
 8011d0c:	e899 0003 	ldmia.w	r9, {r0, r1}
	subscriber_information.interface.address = message.source_address;
 8011d10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	subscriber_information.register_ = element.element_register;
 8011d14:	6278      	str	r0, [r7, #36]	@ 0x24
 8011d16:	8539      	strh	r1, [r7, #40]	@ 0x28
	subscribers->Receive<T>(subscriber_information, data);
 8011d18:	f8cd b000 	str.w	fp, [sp]
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8011d22:	68c0      	ldr	r0, [r0, #12]
 8011d24:	f7ff fc13 	bl	801154e <_ZN17MasterSubscribers7ReceiveIaEEv15SubscriberInputPT_>
 8011d28:	f107 000c 	add.w	r0, r7, #12
 8011d2c:	f7ff f8cb 	bl	8010ec6 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
}
 8011d30:	4620      	mov	r0, r4
 8011d32:	3734      	adds	r7, #52	@ 0x34
 8011d34:	46bd      	mov	sp, r7
 8011d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8011d3a:	f1b8 0f00 	cmp.w	r8, #0
 8011d3e:	d00d      	beq.n	8011d5c <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0xc2>
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8011d40:	4628      	mov	r0, r5
 8011d42:	f7ee ff7d 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011d46:	4658      	mov	r0, fp
 8011d48:	4643      	mov	r3, r8
 8011d4a:	4622      	mov	r2, r4
 8011d4c:	4629      	mov	r1, r5
 8011d4e:	9600      	str	r6, [sp, #0]
 8011d50:	f7ff ff7c 	bl	8011c4c <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8011d54:	4628      	mov	r0, r5
 8011d56:	f7ee fec3 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = array_values;
 8011d5a:	e7cd      	b.n	8011cf8 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x5e>
		length_to_extract = message.payload[start_index];
 8011d5c:	f8da 3004 	ldr.w	r3, [sl, #4]
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011d60:	f107 0018 	add.w	r0, r7, #24
		length_to_extract = message.payload[start_index];
 8011d64:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8011d68:	3401      	adds	r4, #1
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011d6a:	f7ee ff69 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011d6e:	f107 0118 	add.w	r1, r7, #24
		start_index++;
 8011d72:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011d74:	4643      	mov	r3, r8
 8011d76:	4628      	mov	r0, r5
 8011d78:	9600      	str	r6, [sp, #0]
 8011d7a:	4622      	mov	r2, r4
 8011d7c:	f7ff ff0c 	bl	8011b98 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8011d80:	4629      	mov	r1, r5
 8011d82:	f107 000c 	add.w	r0, r7, #12
 8011d86:	f7ff f8a8 	bl	8010eda <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>
 8011d8a:	4628      	mov	r0, r5
 8011d8c:	f7ff f89b 	bl	8010ec6 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8011d90:	f107 0018 	add.w	r0, r7, #24
 8011d94:	f7ee fea4 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8011d98:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8011d9c:	e7ac      	b.n	8011cf8 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x5e>

08011d9e <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 8011d9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011da2:	468c      	mov	ip, r1
 8011da4:	b099      	sub	sp, #100	@ 0x64
 8011da6:	461c      	mov	r4, r3
 8011da8:	4682      	mov	sl, r0
 8011daa:	af04      	add	r7, sp, #16
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 8011dac:	f89c 3000 	ldrb.w	r3, [ip]
 8011db0:	f89c b011 	ldrb.w	fp, [ip, #17]
 8011db4:	f107 0544 	add.w	r5, r7, #68	@ 0x44
 8011db8:	617b      	str	r3, [r7, #20]
	if (element.command) {
 8011dba:	79d3      	ldrb	r3, [r2, #7]
	service_information.access = element.access;
 8011dbc:	7a16      	ldrb	r6, [r2, #8]
	service_information.register_ = element.element_register;
 8011dbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011dc2:	84b9      	strh	r1, [r7, #36]	@ 0x24
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8011dc4:	f10c 0104 	add.w	r1, ip, #4
	service_information.register_ = element.element_register;
 8011dc8:	6238      	str	r0, [r7, #32]
	if (element.command) {
 8011dca:	b343      	cbz	r3, 8011e1e <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x80>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8011dcc:	4628      	mov	r0, r5
 8011dce:	f7ee ff37 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011dd2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8011dd6:	4621      	mov	r1, r4
 8011dd8:	4628      	mov	r0, r5
 8011dda:	f7fe fcb5 	bl	8010748 <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8011dde:	4680      	mov	r8, r0
      }
 8011de0:	4628      	mov	r0, r5
 8011de2:	f7ee fe7d 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8011de6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8011dea:	b18b      	cbz	r3, 8011e10 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 8011dec:	2301      	movs	r3, #1
 8011dee:	f887 b029 	strb.w	fp, [r7, #41]	@ 0x29
 8011df2:	f887 602a 	strb.w	r6, [r7, #42]	@ 0x2a
 8011df6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011df8:	697b      	ldr	r3, [r7, #20]
 8011dfa:	f8da 0008 	ldr.w	r0, [sl, #8]
 8011dfe:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8011e02:	f107 0320 	add.w	r3, r7, #32
 8011e06:	f8cd 8000 	str.w	r8, [sp]
 8011e0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e0c:	f00b fa95 	bl	801d33a <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
		return start_index + 1;
 8011e10:	3401      	adds	r4, #1
 8011e12:	b2a4      	uxth	r4, r4
}
 8011e14:	4620      	mov	r0, r4
 8011e16:	3754      	adds	r7, #84	@ 0x54
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (element.access == WRITE) {
 8011e1e:	bb1e      	cbnz	r6, 8011e68 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0xca>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8011e20:	4628      	mov	r0, r5
 8011e22:	f7ee ff0d 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011e26:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8011e2a:	4621      	mov	r1, r4
 8011e2c:	4628      	mov	r0, r5
 8011e2e:	f7fe fc8b 	bl	8010748 <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8011e32:	4680      	mov	r8, r0
 8011e34:	4628      	mov	r0, r5
 8011e36:	f7ee fe53 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8011e3a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d0e6      	beq.n	8011e10 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 8011e42:	2301      	movs	r3, #1
 8011e44:	f887 b029 	strb.w	fp, [r7, #41]	@ 0x29
 8011e48:	f887 602a 	strb.w	r6, [r7, #42]	@ 0x2a
 8011e4c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011e4e:	697b      	ldr	r3, [r7, #20]
 8011e50:	f8da 0008 	ldr.w	r0, [sl, #8]
 8011e54:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8011e58:	f107 0320 	add.w	r3, r7, #32
 8011e5c:	f8cd 8000 	str.w	r8, [sp]
 8011e60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e62:	f00b fa2d 	bl	801d2c0 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 8011e66:	e7d3      	b.n	8011e10 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x72>
		T array_values[element.element_register.length];
 8011e68:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8011e6c:	466e      	mov	r6, sp
	}
 8011e6e:	f8c7 d00c 	str.w	sp, [r7, #12]
		T array_values[element.element_register.length];
 8011e72:	f108 0007 	add.w	r0, r8, #7
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e78:	08c0      	lsrs	r0, r0, #3
 8011e7a:	eba6 00c0 	sub.w	r0, r6, r0, lsl #3
 8011e7e:	f107 061f 	add.w	r6, r7, #31
 8011e82:	4685      	mov	sp, r0
 8011e84:	e9c7 330b 	strd	r3, r3, [r7, #44]	@ 0x2c
		if (not element.element_register.isArray) {
 8011e88:	78d3      	ldrb	r3, [r2, #3]
		T array_values[element.element_register.length];
 8011e8a:	f10d 0910 	add.w	r9, sp, #16
		if (not element.element_register.isArray) {
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d13c      	bne.n	8011f0c <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x16e>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011e92:	4628      	mov	r0, r5
			data = &single_value;
 8011e94:	f107 091e 	add.w	r9, r7, #30
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011e98:	f7ee fed2 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
			length_to_extract = 1;
 8011e9c:	f04f 0801 	mov.w	r8, #1
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011ea0:	4632      	mov	r2, r6
 8011ea2:	4621      	mov	r1, r4
 8011ea4:	4628      	mov	r0, r5
 8011ea6:	f7fe fc29 	bl	80106fc <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 8011eaa:	77b8      	strb	r0, [r7, #30]
      }
 8011eac:	4628      	mov	r0, r5
 8011eae:	f7ee fe17 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8011eb2:	7ffb      	ldrb	r3, [r7, #31]
 8011eb4:	b30b      	cbz	r3, 8011efa <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x15c>
 8011eb6:	697b      	ldr	r3, [r7, #20]
			services->ReceiveRead<T>(service_information, data);
 8011eb8:	f8da 6008 	ldr.w	r6, [sl, #8]
 8011ebc:	f04f 0a01 	mov.w	sl, #1
 8011ec0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8011ec4:	f107 0320 	add.w	r3, r7, #32
 8011ec8:	f8a7 8026 	strh.w	r8, [r7, #38]	@ 0x26
 8011ecc:	f887 b029 	strb.w	fp, [r7, #41]	@ 0x29
 8011ed0:	f887 a02a 	strb.w	sl, [r7, #42]	@ 0x2a
	bool success = true;
 8011ed4:	f887 a038 	strb.w	sl, [r7, #56]	@ 0x38
 8011ed8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011edc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011ee0:	613b      	str	r3, [r7, #16]
void Services::ReceiveRead(ServiceConfiguration information, T* data) {
 8011ee2:	eb09 0388 	add.w	r3, r9, r8, lsl #2
 8011ee6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011eea:	60bb      	str	r3, [r7, #8]
	uint8_t start_index = 0;
 8011eec:	2100      	movs	r1, #0
		CommunicationLED(leds, information.interface.interface);
 8011eee:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 8011ef2:	607b      	str	r3, [r7, #4]
	while (success) {
 8011ef4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8011ef8:	bbd3      	cbnz	r3, 8011f70 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x1d2>
		return start_index + sizeof(T) * length_to_extract;
 8011efa:	4444      	add	r4, r8
 8011efc:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8011f00:	f7fe ffe1 	bl	8010ec6 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8011f04:	f8d7 d00c 	ldr.w	sp, [r7, #12]
 8011f08:	b2a4      	uxth	r4, r4
 8011f0a:	e783      	b.n	8011e14 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x76>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 8011f0c:	f1b8 0f00 	cmp.w	r8, #0
 8011f10:	d00d      	beq.n	8011f2e <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x190>
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8011f12:	4628      	mov	r0, r5
 8011f14:	f7ee fe94 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011f18:	4648      	mov	r0, r9
 8011f1a:	4643      	mov	r3, r8
 8011f1c:	4622      	mov	r2, r4
 8011f1e:	4629      	mov	r1, r5
 8011f20:	9600      	str	r6, [sp, #0]
 8011f22:	f7ff fe93 	bl	8011c4c <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8011f26:	4628      	mov	r0, r5
 8011f28:	f7ee fdda 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			data = array_values;
 8011f2c:	e7c1      	b.n	8011eb2 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x114>
			length_to_extract = message.payload[start_index];
 8011f2e:	f8dc 3004 	ldr.w	r3, [ip, #4]
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011f32:	f107 0038 	add.w	r0, r7, #56	@ 0x38
			length_to_extract = message.payload[start_index];
 8011f36:	f813 8004 	ldrb.w	r8, [r3, r4]
			start_index++;
 8011f3a:	3401      	adds	r4, #1
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011f3c:	f7ee fe80 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011f40:	f107 0138 	add.w	r1, r7, #56	@ 0x38
			start_index++;
 8011f44:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011f46:	4643      	mov	r3, r8
 8011f48:	4628      	mov	r0, r5
 8011f4a:	9600      	str	r6, [sp, #0]
 8011f4c:	4622      	mov	r2, r4
 8011f4e:	f7ff fe23 	bl	8011b98 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8011f52:	4629      	mov	r1, r5
 8011f54:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8011f58:	f7fe ffbf 	bl	8010eda <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>
 8011f5c:	4628      	mov	r0, r5
 8011f5e:	f7fe ffb2 	bl	8010ec6 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8011f62:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8011f66:	f7ee fdbb 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8011f6a:	f8d7 902c 	ldr.w	r9, [r7, #44]	@ 0x2c
 8011f6e:	e7a0      	b.n	8011eb2 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x114>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8011f70:	693b      	ldr	r3, [r7, #16]
 8011f72:	4630      	mov	r0, r6
 8011f74:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8011f78:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8011f7c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011f80:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8011f84:	f8ad 3000 	strh.w	r3, [sp]
 8011f88:	e895 000c 	ldmia.w	r5, {r2, r3}
 8011f8c:	f00b f959 	bl	801d242 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 8011f90:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8011f94:	4683      	mov	fp, r0
		if (not success) return;
 8011f96:	2a00      	cmp	r2, #0
 8011f98:	d0af      	beq.n	8011efa <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x15c>
		if (information.length > SERVICES_BUFFER_SIZE) return;
 8011f9a:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 8011f9e:	d8ac      	bhi.n	8011efa <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x15c>
		CommunicationLED(leds, information.interface.interface);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	6979      	ldr	r1, [r7, #20]
 8011fa4:	f8d3 0440 	ldr.w	r0, [r3, #1088]	@ 0x440
 8011fa8:	f7fd f874 	bl	800f094 <_Z16CommunicationLEDP4LEDSh>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8011fac:	f04f 31ff 	mov.w	r1, #4294967295
 8011fb0:	6830      	ldr	r0, [r6, #0]
 8011fb2:	f7fa ff59 	bl	800ce68 <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 8011fb6:	2218      	movs	r2, #24
		switch (information.register_.type) {
 8011fb8:	693b      	ldr	r3, [r7, #16]
		services[index].configuration.length = information.length;
 8011fba:	fb02 620b 	mla	r2, r2, fp, r6
 8011fbe:	f8a2 8010 	strh.w	r8, [r2, #16]
		switch (information.register_.type) {
 8011fc2:	2b08      	cmp	r3, #8
 8011fc4:	d80e      	bhi.n	8011fe4 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x246>
 8011fc6:	e8df f003 	tbb	[pc, r3]
 8011fca:	0d05      	.short	0x0d05
 8011fcc:	0d1f0d05 	.word	0x0d1f0d05
 8011fd0:	0d0d      	.short	0x0d0d
 8011fd2:	2c          	.byte	0x2c
 8011fd3:	00          	.byte	0x00
			TranferData<uint32_t>((uint32_t*) data, &buffer_uint32[index][0], information.length);
 8011fd4:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 8011fd8:	2200      	movs	r2, #0
 8011fda:	f501 710e 	add.w	r1, r1, #568	@ 0x238
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8011fde:	b290      	uxth	r0, r2
 8011fe0:	4580      	cmp	r8, r0
 8011fe2:	d80b      	bhi.n	8011ffc <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x25e>
		services[index].reception_flag = true;
 8011fe4:	2218      	movs	r2, #24
		osSemaphoreRelease(ServiceSemaphore);
 8011fe6:	6830      	ldr	r0, [r6, #0]
		services[index].reception_flag = true;
 8011fe8:	fb02 620b 	mla	r2, r2, fp, r6
 8011fec:	f882 a009 	strb.w	sl, [r2, #9]
		osSemaphoreRelease(ServiceSemaphore);
 8011ff0:	f7fa ff6e 	bl	800ced0 <osSemaphoreRelease>
		start_index = index + 1;
 8011ff4:	f10b 0101 	add.w	r1, fp, #1
 8011ff8:	b2c9      	uxtb	r1, r1
 8011ffa:	e77b      	b.n	8011ef4 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x156>
		to[buffer_index] = from[buffer_index];
 8011ffc:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
 8012000:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8012004:	3201      	adds	r2, #1
 8012006:	e7ea      	b.n	8011fde <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x240>
			TranferData<int8_t>((int8_t*) data, &buffer_int8[index][0], information.length);
 8012008:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 801200c:	2200      	movs	r2, #0
 801200e:	f601 2138 	addw	r1, r1, #2616	@ 0xa38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8012012:	b290      	uxth	r0, r2
 8012014:	4580      	cmp	r8, r0
 8012016:	d9e5      	bls.n	8011fe4 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x246>
		to[buffer_index] = from[buffer_index];
 8012018:	f919 0002 	ldrsb.w	r0, [r9, r2]
 801201c:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 801201e:	3201      	adds	r2, #1
 8012020:	e7f7      	b.n	8012012 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x274>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 8012022:	eb06 228b 	add.w	r2, r6, fp, lsl #10
 8012026:	4649      	mov	r1, r9
 8012028:	f602 4238 	addw	r2, r2, #3128	@ 0xc38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	4299      	cmp	r1, r3
 8012030:	d0d8      	beq.n	8011fe4 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x246>
		to[buffer_index] = from[buffer_index];
 8012032:	f851 0b04 	ldr.w	r0, [r1], #4
 8012036:	f842 0b04 	str.w	r0, [r2], #4
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 801203a:	e7f7      	b.n	801202c <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x28e>

0801203c <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>:
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 801203c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012040:	2600      	movs	r6, #0
 8012042:	b087      	sub	sp, #28
 8012044:	4605      	mov	r5, r0
 8012046:	4691      	mov	r9, r2
 8012048:	9100      	str	r1, [sp, #0]
 801204a:	9301      	str	r3, [sp, #4]
 801204c:	6086      	str	r6, [r0, #8]
 801204e:	e9c0 6600 	strd	r6, r6, [r0]
 8012052:	b2f4      	uxtb	r4, r6
	for (uint8_t index = 0; index < length; index++) {
 8012054:	9b01      	ldr	r3, [sp, #4]
 8012056:	429c      	cmp	r4, r3
 8012058:	db03      	blt.n	8012062 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x26>
}
 801205a:	4628      	mov	r0, r5
 801205c:	b007      	add	sp, #28
 801205e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8012062:	9900      	ldr	r1, [sp, #0]
 8012064:	a803      	add	r0, sp, #12
 8012066:	f7ee fdeb 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801206a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801206c:	eb09 0184 	add.w	r1, r9, r4, lsl #2
 8012070:	a803      	add	r0, sp, #12
 8012072:	b289      	uxth	r1, r1
 8012074:	f7fe fb4f 	bl	8010716 <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>
 8012078:	4607      	mov	r7, r0
      }
 801207a:	a803      	add	r0, sp, #12
 801207c:	f7ee fd30 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 8012080:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012082:	781b      	ldrb	r3, [r3, #0]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d0e8      	beq.n	801205a <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x1e>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8012088:	e9d5 4301 	ldrd	r4, r3, [r5, #4]
 801208c:	429c      	cmp	r4, r3
 801208e:	d004      	beq.n	801209a <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x5e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8012090:	f844 7b04 	str.w	r7, [r4], #4
	    ++this->_M_impl._M_finish;
 8012094:	606c      	str	r4, [r5, #4]
	for (uint8_t index = 0; index < length; index++) {
 8012096:	3601      	adds	r6, #1
 8012098:	e7db      	b.n	8012052 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x16>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 801209a:	4a14      	ldr	r2, [pc, #80]	@ (80120ec <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xb0>)
 801209c:	2101      	movs	r1, #1
 801209e:	4628      	mov	r0, r5
 80120a0:	f7fe ffe4 	bl	801106c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 80120a4:	f8d5 b000 	ldr.w	fp, [r5]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80120a8:	4682      	mov	sl, r0
      pointer __new_start(this->_M_allocate(__len));
 80120aa:	f7fe fa0d 	bl	80104c8 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 80120ae:	eba4 080b 	sub.w	r8, r4, fp
 80120b2:	4604      	mov	r4, r0
      if (__count > 0)
 80120b4:	f1b8 0f00 	cmp.w	r8, #0
 80120b8:	f840 7008 	str.w	r7, [r0, r8]
 80120bc:	dd03      	ble.n	80120c6 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x8a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80120be:	4642      	mov	r2, r8
 80120c0:	4659      	mov	r1, fp
 80120c2:	f00c ff1f 	bl	801ef04 <memmove>
	      ++__new_finish;
 80120c6:	f108 0204 	add.w	r2, r8, #4
 80120ca:	18a7      	adds	r7, r4, r2
	if (__p)
 80120cc:	f1bb 0f00 	cmp.w	fp, #0
 80120d0:	d006      	beq.n	80120e0 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xa4>
		    this->_M_impl._M_end_of_storage - __old_start);
 80120d2:	68a9      	ldr	r1, [r5, #8]
 80120d4:	4658      	mov	r0, fp
 80120d6:	eba1 010b 	sub.w	r1, r1, fp
 80120da:	1089      	asrs	r1, r1, #2
 80120dc:	f7fe f9d4 	bl	8010488 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
      this->_M_impl._M_finish = __new_finish;
 80120e0:	e9c5 4700 	strd	r4, r7, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80120e4:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 80120e8:	60ac      	str	r4, [r5, #8]
 80120ea:	e7d4      	b.n	8012096 <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x5a>
 80120ec:	0801f20c 	.word	0x0801f20c

080120f0 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 80120f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120f4:	b085      	sub	sp, #20
 80120f6:	4607      	mov	r7, r0
 80120f8:	4688      	mov	r8, r1
 80120fa:	4691      	mov	r9, r2
 80120fc:	461c      	mov	r4, r3
 80120fe:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8012102:	2600      	movs	r6, #0
 8012104:	b2f5      	uxtb	r5, r6
	for (uint8_t index = 0; index < length; index++) {
 8012106:	42a5      	cmp	r5, r4
 8012108:	db02      	blt.n	8012110 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x20>
}
 801210a:	b005      	add	sp, #20
 801210c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8012110:	4641      	mov	r1, r8
 8012112:	a801      	add	r0, sp, #4
 8012114:	f7ee fd94 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012118:	465a      	mov	r2, fp
 801211a:	eb09 0185 	add.w	r1, r9, r5, lsl #2
 801211e:	a801      	add	r0, sp, #4
		if (not *success)
 8012120:	3601      	adds	r6, #1
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8012122:	b289      	uxth	r1, r1
 8012124:	f7fe faf7 	bl	8010716 <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>
 8012128:	4682      	mov	sl, r0
      }
 801212a:	a801      	add	r0, sp, #4
 801212c:	f7ee fcd8 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 8012130:	f89b 3000 	ldrb.w	r3, [fp]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d0e8      	beq.n	801210a <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x1a>
		data[index] = element;
 8012138:	f847 a025 	str.w	sl, [r7, r5, lsl #2]
	for (uint8_t index = 0; index < length; index++) {
 801213c:	e7e2      	b.n	8012104 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x14>

0801213e <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 801213e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012142:	b08f      	sub	sp, #60	@ 0x3c
 8012144:	461c      	mov	r4, r3
 8012146:	4691      	mov	r9, r2
 8012148:	468a      	mov	sl, r1
	T array_values[element.element_register.length];
 801214a:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 801214e:	466a      	mov	r2, sp
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8012150:	af02      	add	r7, sp, #8
	T array_values[element.element_register.length];
 8012152:	ea4f 0388 	mov.w	r3, r8, lsl #2
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8012156:	3104      	adds	r1, #4
 8012158:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 801215c:	f107 060b 	add.w	r6, r7, #11
	T array_values[element.element_register.length];
 8012160:	3307      	adds	r3, #7
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 8012162:	6078      	str	r0, [r7, #4]
	T array_values[element.element_register.length];
 8012164:	08db      	lsrs	r3, r3, #3
 8012166:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 801216a:	469d      	mov	sp, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 801216c:	2300      	movs	r3, #0
 801216e:	e9c7 3303 	strd	r3, r3, [r7, #12]
 8012172:	617b      	str	r3, [r7, #20]
 8012174:	f10d 0b08 	add.w	fp, sp, #8
	if (not element.element_register.isArray) {
 8012178:	f899 3003 	ldrb.w	r3, [r9, #3]
 801217c:	bb8b      	cbnz	r3, 80121e2 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0xa4>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801217e:	4628      	mov	r0, r5
		data = &single_value;
 8012180:	f107 0b18 	add.w	fp, r7, #24
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8012184:	f7ee fd5c 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
		length_to_extract = 1;
 8012188:	f04f 0801 	mov.w	r8, #1
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801218c:	4632      	mov	r2, r6
 801218e:	4621      	mov	r1, r4
 8012190:	4628      	mov	r0, r5
 8012192:	f7fe fac0 	bl	8010716 <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>
 8012196:	61b8      	str	r0, [r7, #24]
      }
 8012198:	4628      	mov	r0, r5
 801219a:	f7ee fca1 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	subscriber_information.interface.interface = message.interface;
 801219e:	f89a 3000 	ldrb.w	r3, [sl]
	return start_index + sizeof(T) * length_to_extract;
 80121a2:	eb04 0488 	add.w	r4, r4, r8, lsl #2
	subscriber_information.length = length_to_extract;
 80121a6:	f8a7 802c 	strh.w	r8, [r7, #44]	@ 0x2c
	subscriber_information.interface.interface = message.interface;
 80121aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	return start_index + sizeof(T) * length_to_extract;
 80121ae:	b2a4      	uxth	r4, r4
	subscriber_information.interface.address = message.source_address;
 80121b0:	f89a 3011 	ldrb.w	r3, [sl, #17]
	subscriber_information.register_ = element.element_register;
 80121b4:	e899 0003 	ldmia.w	r9, {r0, r1}
	subscriber_information.interface.address = message.source_address;
 80121b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	subscriber_information.register_ = element.element_register;
 80121bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80121be:	8539      	strh	r1, [r7, #40]	@ 0x28
	subscribers->Receive<T>(subscriber_information, data);
 80121c0:	f8cd b000 	str.w	fp, [sp]
 80121c4:	6878      	ldr	r0, [r7, #4]
 80121c6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80121ca:	68c0      	ldr	r0, [r0, #12]
 80121cc:	f7ff f960 	bl	8011490 <_ZN17MasterSubscribers7ReceiveImEEv15SubscriberInputPT_>
 80121d0:	f107 000c 	add.w	r0, r7, #12
 80121d4:	f7fe fe42 	bl	8010e5c <_ZNSt12_Vector_baseImSaImEED1Ev>
}
 80121d8:	4620      	mov	r0, r4
 80121da:	3734      	adds	r7, #52	@ 0x34
 80121dc:	46bd      	mov	sp, r7
 80121de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 80121e2:	f1b8 0f00 	cmp.w	r8, #0
 80121e6:	d00d      	beq.n	8012204 <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0xc6>
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 80121e8:	4628      	mov	r0, r5
 80121ea:	f7ee fd29 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80121ee:	4658      	mov	r0, fp
 80121f0:	4643      	mov	r3, r8
 80121f2:	4622      	mov	r2, r4
 80121f4:	4629      	mov	r1, r5
 80121f6:	9600      	str	r6, [sp, #0]
 80121f8:	f7ff ff7a 	bl	80120f0 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 80121fc:	4628      	mov	r0, r5
 80121fe:	f7ee fc6f 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = array_values;
 8012202:	e7cc      	b.n	801219e <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0x60>
		length_to_extract = message.payload[start_index];
 8012204:	f8da 3004 	ldr.w	r3, [sl, #4]
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012208:	f107 0018 	add.w	r0, r7, #24
		length_to_extract = message.payload[start_index];
 801220c:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8012210:	3401      	adds	r4, #1
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012212:	f7ee fd15 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012216:	f107 0118 	add.w	r1, r7, #24
		start_index++;
 801221a:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801221c:	4643      	mov	r3, r8
 801221e:	4628      	mov	r0, r5
 8012220:	9600      	str	r6, [sp, #0]
 8012222:	4622      	mov	r2, r4
 8012224:	f7ff ff0a 	bl	801203c <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8012228:	4629      	mov	r1, r5
 801222a:	f107 000c 	add.w	r0, r7, #12
 801222e:	f7fe fe20 	bl	8010e72 <_ZNSt6vectorImSaImEEaSEOS1_.isra.0>
 8012232:	4628      	mov	r0, r5
 8012234:	f7fe fe12 	bl	8010e5c <_ZNSt12_Vector_baseImSaImEED1Ev>
 8012238:	f107 0018 	add.w	r0, r7, #24
 801223c:	f7ee fc50 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8012240:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8012244:	e7ab      	b.n	801219e <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt+0x60>

08012246 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 8012246:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801224a:	b099      	sub	sp, #100	@ 0x64
 801224c:	468c      	mov	ip, r1
 801224e:	4682      	mov	sl, r0
 8012250:	461c      	mov	r4, r3
 8012252:	af04      	add	r7, sp, #16
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 8012254:	f89c 3000 	ldrb.w	r3, [ip]
 8012258:	f89c b011 	ldrb.w	fp, [ip, #17]
 801225c:	f107 0544 	add.w	r5, r7, #68	@ 0x44
	service_information.access = element.access;
 8012260:	7a16      	ldrb	r6, [r2, #8]
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 8012262:	617b      	str	r3, [r7, #20]
	service_information.register_ = element.element_register;
 8012264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012268:	6238      	str	r0, [r7, #32]
	if (element.command) {
 801226a:	79d0      	ldrb	r0, [r2, #7]
	service_information.register_ = element.element_register;
 801226c:	84b9      	strh	r1, [r7, #36]	@ 0x24
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 801226e:	f10c 0104 	add.w	r1, ip, #4
	if (element.command) {
 8012272:	b340      	cbz	r0, 80122c6 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x80>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8012274:	4628      	mov	r0, r5
 8012276:	f7ee fce3 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801227a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 801227e:	4621      	mov	r1, r4
 8012280:	4628      	mov	r0, r5
 8012282:	f7fe fa61 	bl	8010748 <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8012286:	4680      	mov	r8, r0
      }
 8012288:	4628      	mov	r0, r5
 801228a:	f7ee fc29 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 801228e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8012292:	b18b      	cbz	r3, 80122b8 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 8012294:	2301      	movs	r3, #1
 8012296:	f887 b029 	strb.w	fp, [r7, #41]	@ 0x29
 801229a:	f887 602a 	strb.w	r6, [r7, #42]	@ 0x2a
 801229e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80122a0:	697b      	ldr	r3, [r7, #20]
 80122a2:	f8da 0008 	ldr.w	r0, [sl, #8]
 80122a6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80122aa:	f107 0320 	add.w	r3, r7, #32
 80122ae:	f8cd 8000 	str.w	r8, [sp]
 80122b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80122b4:	f00b f841 	bl	801d33a <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
		return start_index + 1;
 80122b8:	3401      	adds	r4, #1
 80122ba:	b2a4      	uxth	r4, r4
}
 80122bc:	4620      	mov	r0, r4
 80122be:	3754      	adds	r7, #84	@ 0x54
 80122c0:	46bd      	mov	sp, r7
 80122c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (element.access == WRITE) {
 80122c6:	bb1e      	cbnz	r6, 8012310 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0xca>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 80122c8:	4628      	mov	r0, r5
 80122ca:	f7ee fcb9 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80122ce:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80122d2:	4621      	mov	r1, r4
 80122d4:	4628      	mov	r0, r5
 80122d6:	f7fe fa37 	bl	8010748 <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 80122da:	4680      	mov	r8, r0
 80122dc:	4628      	mov	r0, r5
 80122de:	f7ee fbff 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 80122e2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d0e6      	beq.n	80122b8 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 80122ea:	2301      	movs	r3, #1
 80122ec:	f887 b029 	strb.w	fp, [r7, #41]	@ 0x29
 80122f0:	f887 602a 	strb.w	r6, [r7, #42]	@ 0x2a
 80122f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80122f6:	697b      	ldr	r3, [r7, #20]
 80122f8:	f8da 0008 	ldr.w	r0, [sl, #8]
 80122fc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8012300:	f107 0320 	add.w	r3, r7, #32
 8012304:	f8cd 8000 	str.w	r8, [sp]
 8012308:	cb0e      	ldmia	r3, {r1, r2, r3}
 801230a:	f00a ffd9 	bl	801d2c0 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 801230e:	e7d3      	b.n	80122b8 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x72>
		T array_values[element.element_register.length];
 8012310:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8012314:	466e      	mov	r6, sp
	}
 8012316:	f8c7 d008 	str.w	sp, [r7, #8]
		T array_values[element.element_register.length];
 801231a:	ea4f 0388 	mov.w	r3, r8, lsl #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 801231e:	6378      	str	r0, [r7, #52]	@ 0x34
 8012320:	3307      	adds	r3, #7
 8012322:	08db      	lsrs	r3, r3, #3
 8012324:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
 8012328:	f107 061e 	add.w	r6, r7, #30
 801232c:	469d      	mov	sp, r3
		if (not element.element_register.isArray) {
 801232e:	78d3      	ldrb	r3, [r2, #3]
		T array_values[element.element_register.length];
 8012330:	f10d 0910 	add.w	r9, sp, #16
 8012334:	e9c7 000b 	strd	r0, r0, [r7, #44]	@ 0x2c
		if (not element.element_register.isArray) {
 8012338:	2b00      	cmp	r3, #0
 801233a:	d140      	bne.n	80123be <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x178>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801233c:	4628      	mov	r0, r5
			data = &single_value;
 801233e:	f107 0938 	add.w	r9, r7, #56	@ 0x38
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8012342:	f7ee fc7d 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
			length_to_extract = 1;
 8012346:	f04f 0801 	mov.w	r8, #1
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801234a:	4632      	mov	r2, r6
 801234c:	4621      	mov	r1, r4
 801234e:	4628      	mov	r0, r5
 8012350:	f7fe f9e1 	bl	8010716 <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>
 8012354:	63b8      	str	r0, [r7, #56]	@ 0x38
      }
 8012356:	4628      	mov	r0, r5
 8012358:	f7ee fbc2 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801235c:	ea4f 0288 	mov.w	r2, r8, lsl #2
		if (success)
 8012360:	7fbb      	ldrb	r3, [r7, #30]
 8012362:	60fa      	str	r2, [r7, #12]
 8012364:	b30b      	cbz	r3, 80123aa <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x164>
 8012366:	697b      	ldr	r3, [r7, #20]
			services->ReceiveRead<T>(service_information, data);
 8012368:	f8da 6008 	ldr.w	r6, [sl, #8]
 801236c:	f04f 0a01 	mov.w	sl, #1
 8012370:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8012374:	f107 0320 	add.w	r3, r7, #32
 8012378:	f8a7 8026 	strh.w	r8, [r7, #38]	@ 0x26
 801237c:	f887 b029 	strb.w	fp, [r7, #41]	@ 0x29
 8012380:	f887 a02a 	strb.w	sl, [r7, #42]	@ 0x2a
	bool success = true;
 8012384:	f887 a01f 	strb.w	sl, [r7, #31]
 8012388:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801238c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012390:	613b      	str	r3, [r7, #16]
void Services::ReceiveRead(ServiceConfiguration information, T* data) {
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	444b      	add	r3, r9
 8012396:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801239a:	607b      	str	r3, [r7, #4]
	uint8_t start_index = 0;
 801239c:	2100      	movs	r1, #0
		CommunicationLED(leds, information.interface.interface);
 801239e:	f506 5380 	add.w	r3, r6, #4096	@ 0x1000
 80123a2:	603b      	str	r3, [r7, #0]
	while (success) {
 80123a4:	7ffb      	ldrb	r3, [r7, #31]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d13b      	bne.n	8012422 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x1dc>
		return start_index + sizeof(T) * length_to_extract;
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80123b0:	441c      	add	r4, r3
 80123b2:	f7fe fd53 	bl	8010e5c <_ZNSt12_Vector_baseImSaImEED1Ev>
 80123b6:	f8d7 d008 	ldr.w	sp, [r7, #8]
 80123ba:	b2a4      	uxth	r4, r4
 80123bc:	e77e      	b.n	80122bc <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x76>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 80123be:	f1b8 0f00 	cmp.w	r8, #0
 80123c2:	d00d      	beq.n	80123e0 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x19a>
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 80123c4:	4628      	mov	r0, r5
 80123c6:	f7ee fc3b 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80123ca:	4648      	mov	r0, r9
 80123cc:	4643      	mov	r3, r8
 80123ce:	4622      	mov	r2, r4
 80123d0:	4629      	mov	r1, r5
 80123d2:	9600      	str	r6, [sp, #0]
 80123d4:	f7ff fe8c 	bl	80120f0 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 80123d8:	4628      	mov	r0, r5
 80123da:	f7ee fb81 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			data = array_values;
 80123de:	e7bd      	b.n	801235c <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x116>
			length_to_extract = message.payload[start_index];
 80123e0:	f8dc 3004 	ldr.w	r3, [ip, #4]
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80123e4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
			length_to_extract = message.payload[start_index];
 80123e8:	f813 8004 	ldrb.w	r8, [r3, r4]
			start_index++;
 80123ec:	3401      	adds	r4, #1
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80123ee:	f7ee fc27 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80123f2:	f107 0138 	add.w	r1, r7, #56	@ 0x38
			start_index++;
 80123f6:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80123f8:	4643      	mov	r3, r8
 80123fa:	4628      	mov	r0, r5
 80123fc:	9600      	str	r6, [sp, #0]
 80123fe:	4622      	mov	r2, r4
 8012400:	f7ff fe1c 	bl	801203c <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8012404:	4629      	mov	r1, r5
 8012406:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801240a:	f7fe fd32 	bl	8010e72 <_ZNSt6vectorImSaImEEaSEOS1_.isra.0>
 801240e:	4628      	mov	r0, r5
 8012410:	f7fe fd24 	bl	8010e5c <_ZNSt12_Vector_baseImSaImEED1Ev>
 8012414:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8012418:	f7ee fb62 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 801241c:	f8d7 902c 	ldr.w	r9, [r7, #44]	@ 0x2c
 8012420:	e79c      	b.n	801235c <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x116>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8012422:	693b      	ldr	r3, [r7, #16]
 8012424:	4630      	mov	r0, r6
 8012426:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 801242a:	f107 031f 	add.w	r3, r7, #31
 801242e:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012432:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8012436:	f8ad 3000 	strh.w	r3, [sp]
 801243a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801243e:	f00a ff00 	bl	801d242 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 8012442:	7ffa      	ldrb	r2, [r7, #31]
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8012444:	4683      	mov	fp, r0
		if (not success) return;
 8012446:	2a00      	cmp	r2, #0
 8012448:	d0af      	beq.n	80123aa <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x164>
		if (information.length > SERVICES_BUFFER_SIZE) return;
 801244a:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 801244e:	d8ac      	bhi.n	80123aa <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x164>
		CommunicationLED(leds, information.interface.interface);
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	6979      	ldr	r1, [r7, #20]
 8012454:	f8d3 0440 	ldr.w	r0, [r3, #1088]	@ 0x440
 8012458:	f7fc fe1c 	bl	800f094 <_Z16CommunicationLEDP4LEDSh>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801245c:	f04f 31ff 	mov.w	r1, #4294967295
 8012460:	6830      	ldr	r0, [r6, #0]
 8012462:	f7fa fd01 	bl	800ce68 <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 8012466:	2218      	movs	r2, #24
		switch (information.register_.type) {
 8012468:	693b      	ldr	r3, [r7, #16]
		services[index].configuration.length = information.length;
 801246a:	fb02 620b 	mla	r2, r2, fp, r6
 801246e:	f8a2 8010 	strh.w	r8, [r2, #16]
		switch (information.register_.type) {
 8012472:	2b08      	cmp	r3, #8
 8012474:	d80e      	bhi.n	8012494 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x24e>
 8012476:	e8df f003 	tbb	[pc, r3]
 801247a:	0d05      	.short	0x0d05
 801247c:	0d1f0d05 	.word	0x0d1f0d05
 8012480:	0d0d      	.short	0x0d0d
 8012482:	2c          	.byte	0x2c
 8012483:	00          	.byte	0x00
			TranferData<uint32_t>((uint32_t*) data, &buffer_uint32[index][0], information.length);
 8012484:	eb06 218b 	add.w	r1, r6, fp, lsl #10
 8012488:	2200      	movs	r2, #0
 801248a:	f501 710e 	add.w	r1, r1, #568	@ 0x238
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 801248e:	b290      	uxth	r0, r2
 8012490:	4580      	cmp	r8, r0
 8012492:	d80b      	bhi.n	80124ac <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x266>
		services[index].reception_flag = true;
 8012494:	2218      	movs	r2, #24
		osSemaphoreRelease(ServiceSemaphore);
 8012496:	6830      	ldr	r0, [r6, #0]
		services[index].reception_flag = true;
 8012498:	fb02 620b 	mla	r2, r2, fp, r6
 801249c:	f882 a009 	strb.w	sl, [r2, #9]
		osSemaphoreRelease(ServiceSemaphore);
 80124a0:	f7fa fd16 	bl	800ced0 <osSemaphoreRelease>
		start_index = index + 1;
 80124a4:	f10b 0101 	add.w	r1, fp, #1
 80124a8:	b2c9      	uxtb	r1, r1
 80124aa:	e77b      	b.n	80123a4 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x15e>
		to[buffer_index] = from[buffer_index];
 80124ac:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
 80124b0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 80124b4:	3201      	adds	r2, #1
 80124b6:	e7ea      	b.n	801248e <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x248>
			TranferData<int8_t>((int8_t*) data, &buffer_int8[index][0], information.length);
 80124b8:	eb06 210b 	add.w	r1, r6, fp, lsl #8
 80124bc:	2200      	movs	r2, #0
 80124be:	f601 2138 	addw	r1, r1, #2616	@ 0xa38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 80124c2:	b290      	uxth	r0, r2
 80124c4:	4580      	cmp	r8, r0
 80124c6:	d9e5      	bls.n	8012494 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x24e>
		to[buffer_index] = from[buffer_index];
 80124c8:	f919 0002 	ldrsb.w	r0, [r9, r2]
 80124cc:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 80124ce:	3201      	adds	r2, #1
 80124d0:	e7f7      	b.n	80124c2 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x27c>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 80124d2:	eb06 228b 	add.w	r2, r6, fp, lsl #10
 80124d6:	4649      	mov	r1, r9
 80124d8:	f602 4238 	addw	r2, r2, #3128	@ 0xc38
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	4299      	cmp	r1, r3
 80124e0:	d0d8      	beq.n	8012494 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x24e>
		to[buffer_index] = from[buffer_index];
 80124e2:	f851 0b04 	ldr.w	r0, [r1], #4
 80124e6:	f842 0b04 	str.w	r0, [r2], #4
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 80124ea:	e7f7      	b.n	80124dc <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt+0x296>

080124ec <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length < 3) return false;
 80124ec:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80124ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124f0:	4606      	mov	r6, r0
 80124f2:	b08b      	sub	sp, #44	@ 0x2c
 80124f4:	4615      	mov	r5, r2
 80124f6:	f04f 0400 	mov.w	r4, #0
			if (length < 3) return false;
 80124fa:	d92e      	bls.n	801255a <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x6e>
			msg.interface = input[0];
 80124fc:	7812      	ldrb	r2, [r2, #0]
			msg.payload = std::vector<uint8_t> (&input[2], &input[length]);
 80124fe:	18ef      	adds	r7, r5, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012500:	9403      	str	r4, [sp, #12]
			msg.interface = input[0];
 8012502:	f88d 2000 	strb.w	r2, [sp]
			msg.target_address = input[1];
 8012506:	786a      	ldrb	r2, [r5, #1]
 8012508:	e9cd 4401 	strd	r4, r4, [sp, #4]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 801250c:	1e9c      	subs	r4, r3, #2
 801250e:	f88d 2010 	strb.w	r2, [sp, #16]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012512:	4620      	mov	r0, r4
 8012514:	f7fe f925 	bl	8010762 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012518:	4404      	add	r4, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801251a:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
 801251c:	4639      	mov	r1, r7
 801251e:	9005      	str	r0, [sp, #20]
 8012520:	1ca8      	adds	r0, r5, #2
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012522:	9407      	str	r4, [sp, #28]
 8012524:	f7ee fb80 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
			msg.payload = std::vector<uint8_t> (&input[2], &input[length]);
 8012528:	a905      	add	r1, sp, #20
	  this->_M_impl._M_finish =
 801252a:	9006      	str	r0, [sp, #24]
 801252c:	a801      	add	r0, sp, #4
 801252e:	f7fe fa18 	bl	8010962 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8012532:	a805      	add	r0, sp, #20
 8012534:	f7ee fad4 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			return self->Send(msg);
 8012538:	4669      	mov	r1, sp
 801253a:	a805      	add	r0, sp, #20
 801253c:	f7fe fe21 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8012540:	a905      	add	r1, sp, #20
 8012542:	4630      	mov	r0, r6
 8012544:	f7fe ff0c 	bl	8011360 <_ZN13Communication4SendE13MessageHeader>
 8012548:	1e04      	subs	r4, r0, #0
 801254a:	a806      	add	r0, sp, #24
 801254c:	bf18      	it	ne
 801254e:	2401      	movne	r4, #1
 8012550:	f7ee fac6 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012554:	a801      	add	r0, sp, #4
 8012556:	f7ee fac3 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		}
 801255a:	4620      	mov	r0, r4
 801255c:	b00b      	add	sp, #44	@ 0x2c
 801255e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012560 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>:
	insert(const_iterator __position, _InputIterator __first,
 8012560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (__first != __last)
 8012564:	429a      	cmp	r2, r3
      : _M_current(__i) { }
 8012566:	f8d0 a000 	ldr.w	sl, [r0]
 801256a:	4604      	mov	r4, r0
 801256c:	460d      	mov	r5, r1
 801256e:	4617      	mov	r7, r2
 8012570:	4699      	mov	r9, r3
    { return __lhs.base() - __rhs.base(); }
 8012572:	eba1 0b0a 	sub.w	fp, r1, sl
 8012576:	d020      	beq.n	80125ba <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x5a>
 8012578:	eba3 0802 	sub.w	r8, r3, r2
			  - this->_M_impl._M_finish) >= __n)
 801257c:	e9d0 6201 	ldrd	r6, r2, [r0, #4]
 8012580:	1b92      	subs	r2, r2, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 8012582:	4590      	cmp	r8, r2
 8012584:	d836      	bhi.n	80125f4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x94>
 8012586:	eba6 0a01 	sub.w	sl, r6, r1
		if (__elems_after > __n)
 801258a:	45d0      	cmp	r8, sl
 801258c:	d21a      	bcs.n	80125c4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x64>
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 801258e:	eba6 0a08 	sub.w	sl, r6, r8
 8012592:	4632      	mov	r2, r6
 8012594:	4631      	mov	r1, r6
 8012596:	4650      	mov	r0, sl
 8012598:	f7ef fb4c 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n;
 801259c:	6863      	ldr	r3, [r4, #4]
					       is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::value, "type must be assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 801259e:	ebba 0205 	subs.w	r2, sl, r5
 80125a2:	4443      	add	r3, r8
 80125a4:	6063      	str	r3, [r4, #4]
 80125a6:	d003      	beq.n	80125b0 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x50>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80125a8:	4629      	mov	r1, r5
 80125aa:	1ab0      	subs	r0, r6, r2
 80125ac:	f00c fcaa 	bl	801ef04 <memmove>
			      _Category>::__copy_m(__first, __last, __result);
 80125b0:	462a      	mov	r2, r5
 80125b2:	4649      	mov	r1, r9
 80125b4:	4638      	mov	r0, r7
 80125b6:	f7ee fb37 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      { return __normal_iterator(_M_current + __n); }
 80125ba:	6820      	ldr	r0, [r4, #0]
	}
 80125bc:	4458      	add	r0, fp
 80125be:	b003      	add	sp, #12
 80125c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { _M_current += __n; return *this; }
 80125c4:	eb07 030a 	add.w	r3, r7, sl
 80125c8:	4632      	mov	r2, r6
 80125ca:	4649      	mov	r1, r9
		    this->_M_impl._M_finish += __n - __elems_after;
 80125cc:	eba8 080a 	sub.w	r8, r8, sl
 80125d0:	4618      	mov	r0, r3
 80125d2:	9301      	str	r3, [sp, #4]
 80125d4:	f7ee fb28 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80125d8:	6862      	ldr	r2, [r4, #4]
 80125da:	4631      	mov	r1, r6
 80125dc:	4628      	mov	r0, r5
 80125de:	4442      	add	r2, r8
 80125e0:	6062      	str	r2, [r4, #4]
 80125e2:	f7ef fb27 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __elems_after;
 80125e6:	6862      	ldr	r2, [r4, #4]
 80125e8:	9b01      	ldr	r3, [sp, #4]
 80125ea:	4452      	add	r2, sl
 80125ec:	4619      	mov	r1, r3
 80125ee:	6062      	str	r2, [r4, #4]
 80125f0:	462a      	mov	r2, r5
 80125f2:	e7df      	b.n	80125b4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x54>
		  _M_check_len(__n, "vector::_M_range_insert");
 80125f4:	4641      	mov	r1, r8
 80125f6:	4a13      	ldr	r2, [pc, #76]	@ (8012644 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0xe4>)
 80125f8:	f7ee fa93 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80125fc:	9001      	str	r0, [sp, #4]
		pointer __new_start(this->_M_allocate(__len));
 80125fe:	f7fe f8b0 	bl	8010762 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8012602:	4629      	mov	r1, r5
 8012604:	4602      	mov	r2, r0
 8012606:	4680      	mov	r8, r0
 8012608:	4650      	mov	r0, sl
 801260a:	f7ef fb13 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 801260e:	4649      	mov	r1, r9
 8012610:	4602      	mov	r2, r0
 8012612:	4638      	mov	r0, r7
 8012614:	f7ee fb08 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8012618:	4631      	mov	r1, r6
 801261a:	4602      	mov	r2, r0
 801261c:	4628      	mov	r0, r5
 801261e:	f7ef fb09 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8012622:	4605      	mov	r5, r0
	if (__p)
 8012624:	f1ba 0f00 	cmp.w	sl, #0
 8012628:	d005      	beq.n	8012636 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0xd6>
			      this->_M_impl._M_end_of_storage - __old_start);
 801262a:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801262c:	4650      	mov	r0, sl
 801262e:	eba1 010a 	sub.w	r1, r1, sl
 8012632:	f00b fcc5 	bl	801dfc0 <_ZdlPvj>
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8012636:	9b01      	ldr	r3, [sp, #4]
 8012638:	4443      	add	r3, r8
		this->_M_impl._M_finish = __new_finish;
 801263a:	e9c4 8500 	strd	r8, r5, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 801263e:	60a3      	str	r3, [r4, #8]
 8012640:	e7bb      	b.n	80125ba <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x5a>
 8012642:	bf00      	nop
 8012644:	0801f257 	.word	0x0801f257

08012648 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>:
bool Communication::BuildPayload(MessageHeader* message, MessageElement element) {
 8012648:	b5f0      	push	{r4, r5, r6, r7, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 801264a:	2300      	movs	r3, #0
 801264c:	b085      	sub	sp, #20
 801264e:	4614      	mov	r4, r2
 8012650:	4606      	mov	r6, r0
 8012652:	9303      	str	r3, [sp, #12]
 8012654:	460d      	mov	r5, r1
 8012656:	e9cd 3301 	strd	r3, r3, [sp, #4]
	if (element.ack) header|= ACK_MASK;
 801265a:	7993      	ldrb	r3, [r2, #6]
	if (element.command) header|= COMMAND_MASK;
 801265c:	79d2      	ldrb	r2, [r2, #7]
	if (element.ack) header|= ACK_MASK;
 801265e:	01db      	lsls	r3, r3, #7
 8012660:	b2db      	uxtb	r3, r3
	if (element.command) header|= COMMAND_MASK;
 8012662:	b10a      	cbz	r2, 8012668 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x20>
 8012664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
	if (element.access) header|= ACCESS_MASK;
 8012668:	7a22      	ldrb	r2, [r4, #8]
 801266a:	b10a      	cbz	r2, 8012670 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x28>
 801266c:	f043 0320 	orr.w	r3, r3, #32
	coded_element.push_back(header | ((element.element_register.address >> 8) & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)));
 8012670:	8822      	ldrh	r2, [r4, #0]
      { emplace_back(std::move(__x)); }
 8012672:	f10d 0103 	add.w	r1, sp, #3
 8012676:	a801      	add	r0, sp, #4
 8012678:	f3c2 2204 	ubfx	r2, r2, #8, #5
 801267c:	4313      	orrs	r3, r2
 801267e:	f88d 3003 	strb.w	r3, [sp, #3]
 8012682:	f7fe fc59 	bl	8010f38 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	coded_element.push_back(element.element_register.address & 0xFF);
 8012686:	8823      	ldrh	r3, [r4, #0]
 8012688:	f10d 0103 	add.w	r1, sp, #3
 801268c:	a801      	add	r0, sp, #4
 801268e:	f88d 3003 	strb.w	r3, [sp, #3]
 8012692:	f7fe fc51 	bl	8010f38 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	if (element.element_register.isArray && element.element_register.length == 0)
 8012696:	78e3      	ldrb	r3, [r4, #3]
 8012698:	b15b      	cbz	r3, 80126b2 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x6a>
 801269a:	88a3      	ldrh	r3, [r4, #4]
 801269c:	b94b      	cbnz	r3, 80126b2 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x6a>
 801269e:	f10d 0103 	add.w	r1, sp, #3
 80126a2:	a801      	add	r0, sp, #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80126a4:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 80126a8:	1a9b      	subs	r3, r3, r2
		coded_element.push_back(element.data.size());
 80126aa:	f88d 3003 	strb.w	r3, [sp, #3]
      { emplace_back(std::move(__x)); }
 80126ae:	f7fe fc43 	bl	8010f38 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	coded_element.insert(coded_element.end(), element.data.begin(), element.data.end()); // Big-Endian representation, MSB first
 80126b2:	9902      	ldr	r1, [sp, #8]
 80126b4:	a801      	add	r0, sp, #4
 80126b6:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 80126ba:	f7ff ff51 	bl	8012560 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
	uint16_t max_length = GetProtocolPayloadMaxLength(message->interface, &success);
 80126be:	4630      	mov	r0, r6
 80126c0:	f10d 0203 	add.w	r2, sp, #3
 80126c4:	7829      	ldrb	r1, [r5, #0]
 80126c6:	f7fe f91f 	bl	8010908 <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb>
	if (not success) return false;
 80126ca:	f89d 6003 	ldrb.w	r6, [sp, #3]
 80126ce:	b15e      	cbz	r6, 80126e8 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xa0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80126d0:	68a9      	ldr	r1, [r5, #8]
 80126d2:	686c      	ldr	r4, [r5, #4]
 80126d4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80126d8:	1b0c      	subs	r4, r1, r4
 80126da:	1a9f      	subs	r7, r3, r2
	if (message->payload.size() + coded_element.size() > max_length)
 80126dc:	443c      	add	r4, r7
 80126de:	4284      	cmp	r4, r0
 80126e0:	d808      	bhi.n	80126f4 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xac>
	message->payload.insert(message->payload.end(), coded_element.begin(), coded_element.end());
 80126e2:	1d28      	adds	r0, r5, #4
 80126e4:	f7ff ff3c 	bl	8012560 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 80126e8:	a801      	add	r0, sp, #4
 80126ea:	f7ee f9f9 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 80126ee:	4630      	mov	r0, r6
 80126f0:	b005      	add	sp, #20
 80126f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (not success) return false;
 80126f4:	2600      	movs	r6, #0
 80126f6:	e7f7      	b.n	80126e8 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xa0>

080126f8 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement>:
bool Communication::FindRegister(MessageHeader message, MessageHeader* response, MessageElement* element) {
 80126f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80126fc:	461c      	mov	r4, r3
 80126fe:	b097      	sub	sp, #92	@ 0x5c
	uint16_t register_id = element->element_register.address;
 8012700:	f8b3 9000 	ldrh.w	r9, [r3]
bool Communication::FindRegister(MessageHeader message, MessageHeader* response, MessageElement* element) {
 8012704:	4605      	mov	r5, r0
	if (not element->ack && element->command) {
 8012706:	799b      	ldrb	r3, [r3, #6]
bool Communication::FindRegister(MessageHeader message, MessageHeader* response, MessageElement* element) {
 8012708:	4617      	mov	r7, r2
 801270a:	f10d 0820 	add.w	r8, sp, #32
	if (not element->ack && element->command) {
 801270e:	2b00      	cmp	r3, #0
 8012710:	d165      	bne.n	80127de <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0xe6>
 8012712:	79e3      	ldrb	r3, [r4, #7]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d07c      	beq.n	8012812 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x11a>
		if (registers->IsRegistered(register_id))
 8012718:	4649      	mov	r1, r9
 801271a:	6868      	ldr	r0, [r5, #4]
 801271c:	f007 f934 	bl	8019988 <_ZN9Registers12IsRegisteredEt>
 8012720:	4606      	mov	r6, r0
 8012722:	b168      	cbz	r0, 8012740 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x48>
			element->element_register = registers->FindRegister(register_id, &success);
 8012724:	4643      	mov	r3, r8
 8012726:	464a      	mov	r2, r9
 8012728:	6869      	ldr	r1, [r5, #4]
 801272a:	a804      	add	r0, sp, #16
 801272c:	f007 f8aa 	bl	8019884 <_ZN9Registers12FindRegisterEtPb>
		element->element_register = subscribers->FindRemoteRegister(Register{.address=register_id}, SubscriberInterface{.interface=message.interface, .address=message.source_address}, &success);
 8012730:	9804      	ldr	r0, [sp, #16]
	return success;
 8012732:	f89d 6020 	ldrb.w	r6, [sp, #32]
		element->element_register = subscribers->FindRemoteRegister(Register{.address=register_id}, SubscriberInterface{.interface=message.interface, .address=message.source_address}, &success);
 8012736:	6020      	str	r0, [r4, #0]
 8012738:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801273c:	80a3      	strh	r3, [r4, #4]
	return success;
 801273e:	e04a      	b.n	80127d6 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0xde>
			response_content.ack = true;
 8012740:	f240 1301 	movw	r3, #257	@ 0x101
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012744:	900f      	str	r0, [sp, #60]	@ 0x3c
			response_content.element_register.address = register_id;
 8012746:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
			response_content.ack = true;
 801274a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
			response_content.access = element->access;
 801274e:	7a23      	ldrb	r3, [r4, #8]
 8012750:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
			response_content.data = std::vector<uint8_t>{UNKNOWN_REGISTER};
 8012754:	230f      	movs	r3, #15
 8012756:	f88d 3018 	strb.w	r3, [sp, #24]
 801275a:	ab06      	add	r3, sp, #24
 801275c:	9308      	str	r3, [sp, #32]
 801275e:	2301      	movs	r3, #1
 8012760:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 8012764:	9309      	str	r3, [sp, #36]	@ 0x24
 8012766:	a810      	add	r0, sp, #64	@ 0x40
 8012768:	ab07      	add	r3, sp, #28
 801276a:	e898 0006 	ldmia.w	r8, {r1, r2}
 801276e:	f7ee fb0b 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8012772:	a910      	add	r1, sp, #64	@ 0x40
 8012774:	a80d      	add	r0, sp, #52	@ 0x34
 8012776:	f7fe f8f4 	bl	8010962 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 801277a:	a810      	add	r0, sp, #64	@ 0x40
 801277c:	f7ee f9b0 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			if (not BuildPayload(response, response_content)) {
 8012780:	a90a      	add	r1, sp, #40	@ 0x28
 8012782:	a810      	add	r0, sp, #64	@ 0x40
 8012784:	f7fe fcea 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8012788:	aa10      	add	r2, sp, #64	@ 0x40
 801278a:	4639      	mov	r1, r7
 801278c:	4628      	mov	r0, r5
 801278e:	f7ff ff5b 	bl	8012648 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012792:	4604      	mov	r4, r0
 8012794:	a813      	add	r0, sp, #76	@ 0x4c
 8012796:	f7ee f9a3 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801279a:	b9cc      	cbnz	r4, 80127d0 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0xd8>
				Send(*response);
 801279c:	4639      	mov	r1, r7
 801279e:	a810      	add	r0, sp, #64	@ 0x40
 80127a0:	f7fe fcef 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 80127a4:	a910      	add	r1, sp, #64	@ 0x40
 80127a6:	4628      	mov	r0, r5
 80127a8:	f7fe fdda 	bl	8011360 <_ZN13Communication4SendE13MessageHeader>
 80127ac:	a811      	add	r0, sp, #68	@ 0x44
 80127ae:	f7ee f997 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
				response->payload.clear();
 80127b2:	1d38      	adds	r0, r7, #4
 80127b4:	f7fe f8ec 	bl	8010990 <_ZNSt6vectorIhSaIhEE5clearEv>
				BuildPayload(response, response_content);
 80127b8:	a90a      	add	r1, sp, #40	@ 0x28
 80127ba:	a810      	add	r0, sp, #64	@ 0x40
 80127bc:	f7fe fcce 	bl	801115c <_ZN14MessageElementC1ERKS_>
 80127c0:	aa10      	add	r2, sp, #64	@ 0x40
 80127c2:	4639      	mov	r1, r7
 80127c4:	4628      	mov	r0, r5
 80127c6:	f7ff ff3f 	bl	8012648 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80127ca:	a813      	add	r0, sp, #76	@ 0x4c
 80127cc:	f7ee f988 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80127d0:	a80d      	add	r0, sp, #52	@ 0x34
 80127d2:	f7ee f985 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 80127d6:	4630      	mov	r0, r6
 80127d8:	b017      	add	sp, #92	@ 0x5c
 80127da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		element->element_register = services->FindRemoteRegister(Register{.address=register_id}, ServiceInterface{.interface=message.interface, .address=message.source_address}, element->access, &success);
 80127de:	2300      	movs	r3, #0
 80127e0:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 80127e4:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80127e8:	780b      	ldrb	r3, [r1, #0]
 80127ea:	f88d 3018 	strb.w	r3, [sp, #24]
 80127ee:	7c4b      	ldrb	r3, [r1, #17]
 80127f0:	f8cd 8008 	str.w	r8, [sp, #8]
 80127f4:	f88d 3019 	strb.w	r3, [sp, #25]
 80127f8:	7a23      	ldrb	r3, [r4, #8]
 80127fa:	9301      	str	r3, [sp, #4]
 80127fc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8012800:	f8ad 3000 	strh.w	r3, [sp]
 8012804:	6881      	ldr	r1, [r0, #8]
 8012806:	a804      	add	r0, sp, #16
 8012808:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801280c:	f00a fdd7 	bl	801d3be <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb>
 8012810:	e78e      	b.n	8012730 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x38>
		element->element_register = subscribers->FindRemoteRegister(Register{.address=register_id}, SubscriberInterface{.interface=message.interface, .address=message.source_address}, &success);
 8012812:	f8cd 3042 	str.w	r3, [sp, #66]	@ 0x42
 8012816:	a804      	add	r0, sp, #16
 8012818:	780b      	ldrb	r3, [r1, #0]
 801281a:	f8ad 9040 	strh.w	r9, [sp, #64]	@ 0x40
 801281e:	f88d 301c 	strb.w	r3, [sp, #28]
 8012822:	7c4b      	ldrb	r3, [r1, #17]
 8012824:	f8cd 8004 	str.w	r8, [sp, #4]
 8012828:	f88d 301d 	strb.w	r3, [sp, #29]
 801282c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8012830:	f8ad 3000 	strh.w	r3, [sp]
 8012834:	68e9      	ldr	r1, [r5, #12]
 8012836:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801283a:	f00a ff8f 	bl	801d75c <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb>
 801283e:	e777      	b.n	8012730 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x38>

08012840 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8012840:	b530      	push	{r4, r5, lr}
 8012842:	4604      	mov	r4, r0
 8012844:	b093      	sub	sp, #76	@ 0x4c
			self->SetModuleAddress(*input);
 8012846:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8012848:	4615      	mov	r5, r2
			self->SetModuleAddress(*input);
 801284a:	f7fe f87c 	bl	8010946 <_ZN13Communication16SetModuleAddressEh>
			IDFoundLEDS(self->leds);
 801284e:	6920      	ldr	r0, [r4, #16]
 8012850:	f7fc fc18 	bl	800f084 <_Z11IDFoundLEDSP4LEDS>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012854:	2300      	movs	r3, #0
			message.interface = UART_BACK;
 8012856:	2203      	movs	r2, #3
      { emplace_back(std::move(__x)); }
 8012858:	a90c      	add	r1, sp, #48	@ 0x30
	: _M_start(), _M_finish(), _M_end_of_storage()
 801285a:	9304      	str	r3, [sp, #16]
      { emplace_back(std::move(__x)); }
 801285c:	a809      	add	r0, sp, #36	@ 0x24
	: _M_start(), _M_finish(), _M_end_of_storage()
 801285e:	930b      	str	r3, [sp, #44]	@ 0x2c
			element.access = WRITE;
 8012860:	f88d 3020 	strb.w	r3, [sp, #32]
			message.interface = UART_BACK;
 8012864:	f88d 2004 	strb.w	r2, [sp, #4]
			element.ack = false;
 8012868:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801286c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012870:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
			element.data.push_back(*input + 1);
 8012874:	782b      	ldrb	r3, [r5, #0]
			element.ack = false;
 8012876:	f8ad 201e 	strh.w	r2, [sp, #30]
			element.data.push_back(*input + 1);
 801287a:	3301      	adds	r3, #1
 801287c:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
      { emplace_back(std::move(__x)); }
 8012880:	f7fe fb5a 	bl	8010f38 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
			element.element_register = self->registers->FindRegister(REG_COM_ID_PROPAGATION, &success);
 8012884:	f10d 0303 	add.w	r3, sp, #3
 8012888:	2201      	movs	r2, #1
 801288a:	6861      	ldr	r1, [r4, #4]
 801288c:	a806      	add	r0, sp, #24
 801288e:	f006 fff9 	bl	8019884 <_ZN9Registers12FindRegisterEtPb>
			self->BuildPayload(&message, element);
 8012892:	a906      	add	r1, sp, #24
 8012894:	a80c      	add	r0, sp, #48	@ 0x30
 8012896:	f7fe fc61 	bl	801115c <_ZN14MessageElementC1ERKS_>
 801289a:	aa0c      	add	r2, sp, #48	@ 0x30
 801289c:	a901      	add	r1, sp, #4
 801289e:	4620      	mov	r0, r4
 80128a0:	f7ff fed2 	bl	8012648 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
      }
 80128a4:	a80f      	add	r0, sp, #60	@ 0x3c
 80128a6:	f7ee f91b 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			self->Send(message);
 80128aa:	a901      	add	r1, sp, #4
 80128ac:	a80c      	add	r0, sp, #48	@ 0x30
 80128ae:	f7fe fc68 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 80128b2:	a90c      	add	r1, sp, #48	@ 0x30
 80128b4:	4620      	mov	r0, r4
 80128b6:	f7fe fd53 	bl	8011360 <_ZN13Communication4SendE13MessageHeader>
 80128ba:	a80d      	add	r0, sp, #52	@ 0x34
 80128bc:	f7ee f910 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80128c0:	a809      	add	r0, sp, #36	@ 0x24
 80128c2:	f7ee f90d 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80128c6:	a802      	add	r0, sp, #8
 80128c8:	f7ee f90a 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		}
 80128cc:	2001      	movs	r0, #1
 80128ce:	b013      	add	sp, #76	@ 0x4c
 80128d0:	bd30      	pop	{r4, r5, pc}

080128d2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 80128d2:	b538      	push	{r3, r4, r5, lr}
	  if (__n > 0)
 80128d4:	460c      	mov	r4, r1
 80128d6:	b181      	cbz	r1, 80128fa <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_+0x28>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80128d8:	2100      	movs	r1, #0
 80128da:	4605      	mov	r5, r0
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
 80128dc:	3c01      	subs	r4, #1
 80128de:	f845 1b04 	str.w	r1, [r5], #4
 80128e2:	d008      	beq.n	80128f6 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_+0x24>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
 80128e4:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	*__first = __tmp;
 80128e8:	1a24      	subs	r4, r4, r0
 80128ea:	4628      	mov	r0, r5
 80128ec:	3c04      	subs	r4, #4
 80128ee:	4425      	add	r5, r4
 80128f0:	4622      	mov	r2, r4
 80128f2:	f00c fb21 	bl	801ef38 <memset>
	}
 80128f6:	4628      	mov	r0, r5
 80128f8:	bd38      	pop	{r3, r4, r5, pc}
 80128fa:	4605      	mov	r5, r0
	  return __first;
 80128fc:	e7fb      	b.n	80128f6 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_+0x24>
	...

08012900 <_ZNSt6vectorImSaImEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 8012900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012904:	4604      	mov	r4, r0
      if (__n != 0)
 8012906:	460e      	mov	r6, r1
 8012908:	b171      	cbz	r1, 8012928 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x28>
					 - this->_M_impl._M_finish);
 801290a:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801290c:	e9d0 8200 	ldrd	r8, r2, [r0]
 8012910:	1a9b      	subs	r3, r3, r2
 8012912:	eba2 0a08 	sub.w	sl, r2, r8
	  if (__navail >= __n)
 8012916:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 801291a:	ea4f 07aa 	mov.w	r7, sl, asr #2
 801291e:	d805      	bhi.n	801292c <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x2c>
	__uninit_default_n(__first, __n);
 8012920:	4610      	mov	r0, r2
 8012922:	f7ff ffd6 	bl	80128d2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_>
	      this->_M_impl._M_finish =
 8012926:	6060      	str	r0, [r4, #4]
    }
 8012928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		_M_check_len(__n, "vector::_M_default_append");
 801292c:	4a13      	ldr	r2, [pc, #76]	@ (801297c <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x7c>)
 801292e:	f7fe fb9d 	bl	801106c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>
 8012932:	4681      	mov	r9, r0
	      pointer __new_start(this->_M_allocate(__len));
 8012934:	f7fd fdc8 	bl	80104c8 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8012938:	4631      	mov	r1, r6
 801293a:	4605      	mov	r5, r0
 801293c:	4450      	add	r0, sl
 801293e:	f7ff ffc8 	bl	80128d2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPmjEET_S3_T0_>
      if (__count > 0)
 8012942:	f1ba 0f00 	cmp.w	sl, #0
 8012946:	d00c      	beq.n	8012962 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x62>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8012948:	4652      	mov	r2, sl
 801294a:	4641      	mov	r1, r8
 801294c:	4628      	mov	r0, r5
 801294e:	f00c fad9 	bl	801ef04 <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 8012952:	68a1      	ldr	r1, [r4, #8]
 8012954:	4640      	mov	r0, r8
 8012956:	eba1 0108 	sub.w	r1, r1, r8
 801295a:	1089      	asrs	r1, r1, #2
 801295c:	f7fd fd94 	bl	8010488 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
 8012960:	e002      	b.n	8012968 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x68>
	if (__p)
 8012962:	f1b8 0f00 	cmp.w	r8, #0
 8012966:	d1f4      	bne.n	8012952 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x52>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8012968:	4437      	add	r7, r6
	      this->_M_impl._M_start = __new_start;
 801296a:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 801296c:	eb05 0787 	add.w	r7, r5, r7, lsl #2
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8012970:	eb05 0589 	add.w	r5, r5, r9, lsl #2
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8012974:	6067      	str	r7, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8012976:	60a5      	str	r5, [r4, #8]
    }
 8012978:	e7d6      	b.n	8012928 <_ZNSt6vectorImSaImEE17_M_default_appendEj+0x28>
 801297a:	bf00      	nop
 801297c:	0801f496 	.word	0x0801f496

08012980 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>:
	  if (_Num)
 8012980:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8012982:	4613      	mov	r3, r2
 8012984:	b510      	push	{r4, lr}
	  const ptrdiff_t _Num = __last - __first;
 8012986:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
 801298a:	d005      	beq.n	8012998 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801298c:	4601      	mov	r1, r0
 801298e:	4622      	mov	r2, r4
 8012990:	4618      	mov	r0, r3
 8012992:	f00c fab7 	bl	801ef04 <memmove>
 8012996:	4603      	mov	r3, r0
	}
 8012998:	1918      	adds	r0, r3, r4
 801299a:	bd10      	pop	{r4, pc}

0801299c <_ZNSt6vectorImSaImEEC1ERKS1_>:
      vector(const vector& __x)
 801299c:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801299e:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 80129a2:	4604      	mov	r4, r0
 80129a4:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80129a6:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 80129a8:	2300      	movs	r3, #0
 80129aa:	e9c0 3300 	strd	r3, r3, [r0]
 80129ae:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80129b0:	10b0      	asrs	r0, r6, #2
 80129b2:	f7fd fd89 	bl	80104c8 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80129b6:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 80129b8:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80129ba:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80129bc:	e9c4 0000 	strd	r0, r0, [r4]
			      _Category>::__copy_m(__first, __last, __result);
 80129c0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80129c4:	f7ff ffdc 	bl	8012980 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 80129c8:	6060      	str	r0, [r4, #4]
      }
 80129ca:	4620      	mov	r0, r4
 80129cc:	bd70      	pop	{r4, r5, r6, pc}

080129ce <_ZN9Registers13WriteRegisterImEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 80129ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129d2:	b085      	sub	sp, #20
 80129d4:	4606      	mov	r6, r0
 80129d6:	4688      	mov	r8, r1
 80129d8:	461f      	mov	r7, r3
 80129da:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80129de:	f04f 31ff 	mov.w	r1, #4294967295
 80129e2:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 80129e4:	4615      	mov	r5, r2
 80129e6:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80129e8:	f7fa fa3e 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80129ec:	f10d 020f 	add.w	r2, sp, #15
 80129f0:	4641      	mov	r1, r8
 80129f2:	4630      	mov	r0, r6
 80129f4:	f006 ff35 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80129f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80129fc:	4604      	mov	r4, r0
	if (!success) {
 80129fe:	b933      	cbnz	r3, 8012a0e <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x40>
		osSemaphoreRelease(RegistersSemaphore);
 8012a00:	6830      	ldr	r0, [r6, #0]
 8012a02:	f7fa fa65 	bl	800ced0 <osSemaphoreRelease>
		return false;
 8012a06:	2000      	movs	r0, #0
}
 8012a08:	b005      	add	sp, #20
 8012a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8012a0e:	f10d 000f 	add.w	r0, sp, #15
 8012a12:	f7fd fe07 	bl	8010624 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 8012a16:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d0f0      	beq.n	8012a00 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x32>
	if (target_register->register_info.type != registered_type) {
 8012a1e:	7923      	ldrb	r3, [r4, #4]
 8012a20:	4283      	cmp	r3, r0
 8012a22:	d1ed      	bne.n	8012a00 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 8012a24:	3304      	adds	r3, #4
 8012a26:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8012a2a:	2800      	cmp	r0, #0
 8012a2c:	d0e8      	beq.n	8012a00 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x32>
	if (target_register->access.write) {
 8012a2e:	7a23      	ldrb	r3, [r4, #8]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d0e5      	beq.n	8012a00 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x32>
		success = false;
 8012a34:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012a36:	8961      	ldrh	r1, [r4, #10]
		success = false;
 8012a38:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012a3c:	f7fe faf2 	bl	8011024 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012a40:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012a42:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8012a46:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012a4a:	b133      	cbz	r3, 8012a5a <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x8c>
 8012a4c:	68e3      	ldr	r3, [r4, #12]
 8012a4e:	b123      	cbz	r3, 8012a5a <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x8c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8012a50:	f04f 31ff 	mov.w	r1, #4294967295
 8012a54:	6818      	ldr	r0, [r3, #0]
 8012a56:	f7fa fa07 	bl	800ce68 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 8012a5a:	7823      	ldrb	r3, [r4, #0]
 8012a5c:	b1e3      	cbz	r3, 8012a98 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xca>
			success = true;
 8012a5e:	2301      	movs	r3, #1
 8012a60:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8012a64:	7963      	ldrb	r3, [r4, #5]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d04a      	beq.n	8012b00 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x132>
 8012a6a:	88e1      	ldrh	r1, [r4, #6]
 8012a6c:	2900      	cmp	r1, #0
 8012a6e:	d140      	bne.n	8012af2 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x124>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8012a70:	e9db 3100 	ldrd	r3, r1, [fp]
 8012a74:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 8012a76:	bf18      	it	ne
 8012a78:	f8cb 3004 	strne.w	r3, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012a7c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8012a80:	1ac1      	subs	r1, r0, r3
 8012a82:	1089      	asrs	r1, r1, #2
	if (__new_size > size())
 8012a84:	428f      	cmp	r7, r1
 8012a86:	d924      	bls.n	8012ad2 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x104>
	  _M_default_append(__new_size - size());
 8012a88:	1a79      	subs	r1, r7, r1
 8012a8a:	4658      	mov	r0, fp
 8012a8c:	f7ff ff38 	bl	8012900 <_ZNSt6vectorImSaImEE17_M_default_appendEj>
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8012a90:	2300      	movs	r3, #0
				for (uint16_t index = 0; index < length; index++) {
 8012a92:	b299      	uxth	r1, r3
 8012a94:	42b9      	cmp	r1, r7
 8012a96:	d324      	bcc.n	8012ae2 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x114>
		if (target_register->mode.callbacks) {
 8012a98:	7863      	ldrb	r3, [r4, #1]
 8012a9a:	b16b      	cbz	r3, 8012ab8 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xea>
			if (callbacks.write != NULL) {
 8012a9c:	f1b9 0f00 	cmp.w	r9, #0
 8012aa0:	d00a      	beq.n	8012ab8 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xea>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8012aa2:	7963      	ldrb	r3, [r4, #5]
 8012aa4:	b383      	cbz	r3, 8012b08 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x13a>
 8012aa6:	88e3      	ldrh	r3, [r4, #6]
 8012aa8:	b903      	cbnz	r3, 8012aac <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xde>
					success = callbacks.write(callbacks.context, ID, value, length);
 8012aaa:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 8012aac:	462a      	mov	r2, r5
 8012aae:	4641      	mov	r1, r8
 8012ab0:	4650      	mov	r0, sl
 8012ab2:	47c8      	blx	r9
 8012ab4:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012ab8:	9b01      	ldr	r3, [sp, #4]
 8012aba:	b123      	cbz	r3, 8012ac6 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xf8>
 8012abc:	68e3      	ldr	r3, [r4, #12]
 8012abe:	b113      	cbz	r3, 8012ac6 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xf8>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8012ac0:	6818      	ldr	r0, [r3, #0]
 8012ac2:	f7fa fa05 	bl	800ced0 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 8012ac6:	6830      	ldr	r0, [r6, #0]
 8012ac8:	f7fa fa02 	bl	800ced0 <osSemaphoreRelease>
		return success;
 8012acc:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8012ad0:	e79a      	b.n	8012a08 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0x3a>
	else if (__new_size < size())
 8012ad2:	d2dd      	bcs.n	8012a90 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xc2>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8012ad4:	eb03 0387 	add.w	r3, r3, r7, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8012ad8:	4298      	cmp	r0, r3
 8012ada:	d0d9      	beq.n	8012a90 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xc2>
	    this->_M_impl._M_finish = __pos;
 8012adc:	f8cb 3004 	str.w	r3, [fp, #4]
 8012ae0:	e7d6      	b.n	8012a90 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xc2>
					(*register_vector)[index] = value[index];
 8012ae2:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8012ae6:	f8db 1000 	ldr.w	r1, [fp]
 8012aea:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
				for (uint16_t index = 0; index < length; index++) {
 8012aee:	3301      	adds	r3, #1
 8012af0:	e7cf      	b.n	8012a92 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xc4>
 8012af2:	465a      	mov	r2, fp
 8012af4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8012af8:	4628      	mov	r0, r5
 8012afa:	f7ff ff41 	bl	8012980 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8012afe:	e7cb      	b.n	8012a98 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xca>
				*(callbacks.pointer) = *value;
 8012b00:	682b      	ldr	r3, [r5, #0]
 8012b02:	f8cb 3000 	str.w	r3, [fp]
 8012b06:	e7c7      	b.n	8012a98 <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xca>
					success = callbacks.write(callbacks.context, ID, value, 1);
 8012b08:	2301      	movs	r3, #1
 8012b0a:	e7cf      	b.n	8012aac <_ZN9Registers13WriteRegisterImEEbtPT_tb+0xde>

08012b0c <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8012b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b10:	b091      	sub	sp, #68	@ 0x44
 8012b12:	4605      	mov	r5, r0
 8012b14:	4691      	mov	r9, r2
 8012b16:	4608      	mov	r0, r1
 8012b18:	af02      	add	r7, sp, #8
 8012b1a:	469a      	mov	sl, r3
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8012b1c:	3104      	adds	r1, #4
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8012b1e:	f8d7 b060 	ldr.w	fp, [r7, #96]	@ 0x60
 8012b22:	f107 060b 	add.w	r6, r7, #11
 8012b26:	f8b7 4064 	ldrh.w	r4, [r7, #100]	@ 0x64
	if (not element.element_register.isArray) {
 8012b2a:	f89b 8003 	ldrb.w	r8, [fp, #3]
 8012b2e:	f1b8 0f00 	cmp.w	r8, #0
 8012b32:	d176      	bne.n	8012c22 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x116>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8012b34:	f107 0020 	add.w	r0, r7, #32
 8012b38:	f7ee f882 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012b3c:	4632      	mov	r2, r6
 8012b3e:	4621      	mov	r1, r4
 8012b40:	f107 0020 	add.w	r0, r7, #32
 8012b44:	f7fd fde7 	bl	8010716 <_ZN13Communication13ExtractSingleImEET_St6vectorIhSaIhEEtPb.isra.0>
 8012b48:	6178      	str	r0, [r7, #20]
      }
 8012b4a:	f107 0020 	add.w	r0, r7, #32
 8012b4e:	f7ed ffc7 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8012b52:	7afb      	ldrb	r3, [r7, #11]
 8012b54:	b153      	cbz	r3, 8012b6c <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x60>
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 8012b56:	2301      	movs	r3, #1
 8012b58:	f8bb 1000 	ldrh.w	r1, [fp]
 8012b5c:	f107 0214 	add.w	r2, r7, #20
 8012b60:	9300      	str	r3, [sp, #0]
 8012b62:	4643      	mov	r3, r8
 8012b64:	6868      	ldr	r0, [r5, #4]
 8012b66:	f7ff ff32 	bl	80129ce <_ZN9Registers13WriteRegisterImEEbtPT_tb>
 8012b6a:	72f8      	strb	r0, [r7, #11]
		length_to_extract = 1;
 8012b6c:	f04f 0801 	mov.w	r8, #1
	if (success)
 8012b70:	7afb      	ldrb	r3, [r7, #11]
		response_content.data = std::vector<uint8_t>{OK};
 8012b72:	f10a 060c 	add.w	r6, sl, #12
 8012b76:	f107 0214 	add.w	r2, r7, #20
 8012b7a:	f107 010c 	add.w	r1, r7, #12
	if (success)
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	f000 80d0 	beq.w	8012d24 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x218>
		response_content.data = std::vector<uint8_t>{OK};
 8012b84:	2300      	movs	r3, #0
 8012b86:	723b      	strb	r3, [r7, #8]
 8012b88:	f107 0308 	add.w	r3, r7, #8
 8012b8c:	60fb      	str	r3, [r7, #12]
 8012b8e:	2301      	movs	r3, #1
 8012b90:	613b      	str	r3, [r7, #16]
 8012b92:	4613      	mov	r3, r2
 8012b94:	c906      	ldmia	r1, {r1, r2}
		response_content.data = std::vector<uint8_t>{ERROR};
 8012b96:	f107 0020 	add.w	r0, r7, #32
 8012b9a:	f7ee f8f5 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8012b9e:	f107 0120 	add.w	r1, r7, #32
 8012ba2:	4630      	mov	r0, r6
 8012ba4:	f7fd fedd 	bl	8010962 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8012ba8:	f107 0020 	add.w	r0, r7, #32
 8012bac:	f7ed ff98 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content)) {
 8012bb0:	4651      	mov	r1, sl
 8012bb2:	f107 0020 	add.w	r0, r7, #32
 8012bb6:	f7fe fad1 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8012bba:	f107 0220 	add.w	r2, r7, #32
 8012bbe:	4649      	mov	r1, r9
 8012bc0:	4628      	mov	r0, r5
 8012bc2:	f7ff fd41 	bl	8012648 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012bc6:	4606      	mov	r6, r0
 8012bc8:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8012bcc:	f7ed ff88 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012bd0:	bb06      	cbnz	r6, 8012c14 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x108>
		Send(*response);
 8012bd2:	4649      	mov	r1, r9
 8012bd4:	f107 0020 	add.w	r0, r7, #32
 8012bd8:	f7fe fad3 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8012bdc:	f107 0120 	add.w	r1, r7, #32
 8012be0:	4628      	mov	r0, r5
 8012be2:	f7fe fbbd 	bl	8011360 <_ZN13Communication4SendE13MessageHeader>
 8012be6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8012bea:	f7ed ff79 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8012bee:	f109 0004 	add.w	r0, r9, #4
 8012bf2:	f7fd fecd 	bl	8010990 <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8012bf6:	4651      	mov	r1, sl
 8012bf8:	f107 0020 	add.w	r0, r7, #32
 8012bfc:	f7fe faae 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8012c00:	f107 0220 	add.w	r2, r7, #32
 8012c04:	4649      	mov	r1, r9
 8012c06:	4628      	mov	r0, r5
 8012c08:	f7ff fd1e 	bl	8012648 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012c0c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8012c10:	f7ed ff66 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return start_index + sizeof(T) * length_to_extract;
 8012c14:	eb04 0088 	add.w	r0, r4, r8, lsl #2
}
 8012c18:	373c      	adds	r7, #60	@ 0x3c
 8012c1a:	b280      	uxth	r0, r0
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8012c22:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 8012c26:	f1b8 0f00 	cmp.w	r8, #0
 8012c2a:	d02a      	beq.n	8012c82 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x176>
		T values[length_to_extract];
 8012c2c:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8012c30:	466a      	mov	r2, sp
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8012c32:	f8c7 d000 	str.w	sp, [r7]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8012c36:	f107 0020 	add.w	r0, r7, #32
		T values[length_to_extract];
 8012c3a:	3307      	adds	r3, #7
 8012c3c:	08db      	lsrs	r3, r3, #3
 8012c3e:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8012c42:	469d      	mov	sp, r3
 8012c44:	ab02      	add	r3, sp, #8
 8012c46:	607b      	str	r3, [r7, #4]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8012c48:	f7ed fffa 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012c4c:	9600      	str	r6, [sp, #0]
 8012c4e:	4643      	mov	r3, r8
 8012c50:	4622      	mov	r2, r4
 8012c52:	f107 0120 	add.w	r1, r7, #32
 8012c56:	6878      	ldr	r0, [r7, #4]
 8012c58:	f7ff fa4a 	bl	80120f0 <_ZN13Communication12ExtractArrayImEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8012c5c:	f107 0020 	add.w	r0, r7, #32
 8012c60:	f7ed ff3e 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8012c64:	7afb      	ldrb	r3, [r7, #11]
 8012c66:	b14b      	cbz	r3, 8012c7c <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x170>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 8012c68:	2301      	movs	r3, #1
 8012c6a:	f8bb 1000 	ldrh.w	r1, [fp]
 8012c6e:	9300      	str	r3, [sp, #0]
 8012c70:	2300      	movs	r3, #0
 8012c72:	687a      	ldr	r2, [r7, #4]
 8012c74:	6868      	ldr	r0, [r5, #4]
 8012c76:	f7ff feaa 	bl	80129ce <_ZN9Registers13WriteRegisterImEEbtPT_tb>
 8012c7a:	72f8      	strb	r0, [r7, #11]
 8012c7c:	f8d7 d000 	ldr.w	sp, [r7]
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8012c80:	e776      	b.n	8012b70 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
		length_to_extract = message.payload[start_index];
 8012c82:	6843      	ldr	r3, [r0, #4]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012c84:	f107 0020 	add.w	r0, r7, #32
		length_to_extract = message.payload[start_index];
 8012c88:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8012c8c:	3401      	adds	r4, #1
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012c8e:	f7ed ffd7 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012c92:	f107 0120 	add.w	r1, r7, #32
		start_index++;
 8012c96:	b2a4      	uxth	r4, r4
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012c98:	4643      	mov	r3, r8
 8012c9a:	f107 0014 	add.w	r0, r7, #20
 8012c9e:	9600      	str	r6, [sp, #0]
 8012ca0:	4622      	mov	r2, r4
 8012ca2:	f7ff f9cb 	bl	801203c <_ZN13Communication13ExtractVectorImEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8012ca6:	f107 0020 	add.w	r0, r7, #32
 8012caa:	f7ed ff19 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8012cae:	7afb      	ldrb	r3, [r7, #11]
 8012cb0:	b1fb      	cbz	r3, 8012cf2 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e6>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 8012cb2:	686e      	ldr	r6, [r5, #4]
 8012cb4:	f107 0114 	add.w	r1, r7, #20
 8012cb8:	f8bb b000 	ldrh.w	fp, [fp]
 8012cbc:	f107 0020 	add.w	r0, r7, #32
 8012cc0:	f7ff fe6c 	bl	801299c <_ZNSt6vectorImSaImEEC1ERKS1_>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8012cc8:	6830      	ldr	r0, [r6, #0]
 8012cca:	f7fa f8cd 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012cce:	f107 020c 	add.w	r2, r7, #12
 8012cd2:	4659      	mov	r1, fp
 8012cd4:	4630      	mov	r0, r6
 8012cd6:	f006 fdc4 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8012cda:	7b3a      	ldrb	r2, [r7, #12]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012cdc:	4603      	mov	r3, r0
		osSemaphoreRelease(RegistersSemaphore);
 8012cde:	6830      	ldr	r0, [r6, #0]
	if (!success) {
 8012ce0:	b962      	cbnz	r2, 8012cfc <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1f0>
		osSemaphoreRelease(RegistersSemaphore);
 8012ce2:	f7fa f8f5 	bl	800ced0 <osSemaphoreRelease>
		return false;
 8012ce6:	2000      	movs	r0, #0
 8012ce8:	72f8      	strb	r0, [r7, #11]
 8012cea:	f107 0020 	add.w	r0, r7, #32
 8012cee:	f7fe f8b5 	bl	8010e5c <_ZNSt12_Vector_baseImSaImEED1Ev>
 8012cf2:	f107 0014 	add.w	r0, r7, #20
 8012cf6:	f7fe f8b1 	bl	8010e5c <_ZNSt12_Vector_baseImSaImEED1Ev>
 8012cfa:	e739      	b.n	8012b70 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 8012cfc:	795a      	ldrb	r2, [r3, #5]
 8012cfe:	2a00      	cmp	r2, #0
 8012d00:	d0ef      	beq.n	8012ce2 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d6>
 8012d02:	88db      	ldrh	r3, [r3, #6]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d1ec      	bne.n	8012ce2 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d6>
	osSemaphoreRelease(RegistersSemaphore);
 8012d08:	f7fa f8e2 	bl	800ced0 <osSemaphoreRelease>
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 8012d0c:	2101      	movs	r1, #1
 8012d0e:	4630      	mov	r0, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012d10:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012d14:	9100      	str	r1, [sp, #0]
 8012d16:	4659      	mov	r1, fp
 8012d18:	1a9b      	subs	r3, r3, r2
 8012d1a:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8012d1e:	f7ff fe56 	bl	80129ce <_ZN9Registers13WriteRegisterImEEbtPT_tb>
 8012d22:	e7e1      	b.n	8012ce8 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x1dc>
		response_content.data = std::vector<uint8_t>{ERROR};
 8012d24:	23ff      	movs	r3, #255	@ 0xff
 8012d26:	723b      	strb	r3, [r7, #8]
 8012d28:	f107 0308 	add.w	r3, r7, #8
 8012d2c:	617b      	str	r3, [r7, #20]
 8012d2e:	2301      	movs	r3, #1
 8012d30:	61bb      	str	r3, [r7, #24]
 8012d32:	460b      	mov	r3, r1
 8012d34:	ca06      	ldmia	r2, {r1, r2}
 8012d36:	e72e      	b.n	8012b96 <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t+0x8a>

08012d38 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d3c:	468b      	mov	fp, r1
 8012d3e:	b0b1      	sub	sp, #196	@ 0xc4
 8012d40:	4607      	mov	r7, r0
 8012d42:	4698      	mov	r8, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012d44:	2600      	movs	r6, #0
	response_content.ack = true;
 8012d46:	f04f 0a01 	mov.w	sl, #1
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012d4a:	4615      	mov	r5, r2
 8012d4c:	f8bd 90e8 	ldrh.w	r9, [sp, #232]	@ 0xe8
 8012d50:	961d      	str	r6, [sp, #116]	@ 0x74
 8012d52:	ac2a      	add	r4, sp, #168	@ 0xa8
	response_content.ack = true;
 8012d54:	f8ad a066 	strh.w	sl, [sp, #102]	@ 0x66
	response_content.element_register = element.element_register;
 8012d58:	e9d3 0100 	ldrd	r0, r1, [r3]
	response_content.access = element.access;
 8012d5c:	7a1b      	ldrb	r3, [r3, #8]
	response_content.element_register = element.element_register;
 8012d5e:	9018      	str	r0, [sp, #96]	@ 0x60
 8012d60:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
	CommunicationLED(leds, message.interface);
 8012d64:	6938      	ldr	r0, [r7, #16]
 8012d66:	f89b 1000 	ldrb.w	r1, [fp]
	response_content.access = element.access;
 8012d6a:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 8012d6e:	e9cd 661b 	strd	r6, r6, [sp, #108]	@ 0x6c
	CommunicationLED(leds, message.interface);
 8012d72:	f7fc f98f 	bl	800f094 <_Z16CommunicationLEDP4LEDSh>
	if (element.access == WRITE) {
 8012d76:	f898 3008 	ldrb.w	r3, [r8, #8]
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8012d7a:	4659      	mov	r1, fp
	if (element.access == WRITE) {
 8012d7c:	bb1b      	cbnz	r3, 8012dc6 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x8e>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8012d7e:	a81e      	add	r0, sp, #120	@ 0x78
 8012d80:	f7fe f9ff 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8012d84:	a918      	add	r1, sp, #96	@ 0x60
 8012d86:	a824      	add	r0, sp, #144	@ 0x90
 8012d88:	f7fe f9e8 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8012d8c:	4641      	mov	r1, r8
 8012d8e:	4620      	mov	r0, r4
 8012d90:	f7fe f9e4 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8012d94:	ab24      	add	r3, sp, #144	@ 0x90
 8012d96:	462a      	mov	r2, r5
 8012d98:	a91e      	add	r1, sp, #120	@ 0x78
 8012d9a:	4638      	mov	r0, r7
 8012d9c:	e9cd 4900 	strd	r4, r9, [sp]
 8012da0:	f7ff feb4 	bl	8012b0c <_ZN13Communication12ProcessWriteImEEt13MessageHeaderPS1_14MessageElementS3_t>
 8012da4:	4681      	mov	r9, r0
      }
 8012da6:	a82d      	add	r0, sp, #180	@ 0xb4
 8012da8:	f7ed fe9a 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012dac:	a827      	add	r0, sp, #156	@ 0x9c
 8012dae:	f7ed fe97 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012db2:	a81f      	add	r0, sp, #124	@ 0x7c
 8012db4:	f7ed fe94 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012db8:	a81b      	add	r0, sp, #108	@ 0x6c
 8012dba:	f7ed fe91 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8012dbe:	4648      	mov	r0, r9
 8012dc0:	b031      	add	sp, #196	@ 0xc4
 8012dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ProcessRead<T>(message, response, response_content, element, start_index);
 8012dc6:	a813      	add	r0, sp, #76	@ 0x4c
 8012dc8:	f7fe f9db 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8012dcc:	a918      	add	r1, sp, #96	@ 0x60
 8012dce:	a81e      	add	r0, sp, #120	@ 0x78
 8012dd0:	f7fe f9c4 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8012dd4:	4641      	mov	r1, r8
 8012dd6:	a824      	add	r0, sp, #144	@ 0x90
 8012dd8:	f7fe f9c0 	bl	801115c <_ZN14MessageElementC1ERKS_>
std::vector<uint8_t> Communication::ReadElement(MessageElement* element, bool* success) {
	std::vector<uint8_t> data;

	T register_read;
	uint16_t length;
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 8012ddc:	f8cd a000 	str.w	sl, [sp]
 8012de0:	f10d 0316 	add.w	r3, sp, #22
 8012de4:	aa06      	add	r2, sp, #24
 8012de6:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 8012dea:	6878      	ldr	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012dec:	9609      	str	r6, [sp, #36]	@ 0x24
 8012dee:	e9cd 6607 	strd	r6, r6, [sp, #28]
 8012df2:	f7fc fc5f 	bl	800f6b4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb>

	if (not *success)
 8012df6:	4680      	mov	r8, r0
 8012df8:	2800      	cmp	r0, #0
 8012dfa:	d040      	beq.n	8012e7e <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x146>
		return data;

	// Get vector of type T
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8012dfc:	a924      	add	r1, sp, #144	@ 0x90
 8012dfe:	4620      	mov	r0, r4
 8012e00:	f7fe f9ac 	bl	801115c <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 8012e04:	f89d 30ab 	ldrb.w	r3, [sp, #171]	@ 0xab
 8012e08:	960c      	str	r6, [sp, #48]	@ 0x30
 8012e0a:	e9cd 660a 	strd	r6, r6, [sp, #40]	@ 0x28
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	f040 808c 	bne.w	8012f2c <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x1f4>
		vector = std::vector<T>{*data};
 8012e14:	9b06      	ldr	r3, [sp, #24]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012e16:	4650      	mov	r0, sl
 8012e18:	930d      	str	r3, [sp, #52]	@ 0x34
 8012e1a:	f7fd fb55 	bl	80104c8 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 8012e1e:	a90e      	add	r1, sp, #56	@ 0x38
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012e20:	1d03      	adds	r3, r0, #4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012e22:	4602      	mov	r2, r0
 8012e24:	9010      	str	r0, [sp, #64]	@ 0x40
 8012e26:	a80d      	add	r0, sp, #52	@ 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012e28:	9312      	str	r3, [sp, #72]	@ 0x48
 8012e2a:	f7ff fda9 	bl	8012980 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
		vector = std::vector<T>(data, data + element.element_register.length);
 8012e2e:	a910      	add	r1, sp, #64	@ 0x40
	  this->_M_impl._M_finish =
 8012e30:	9011      	str	r0, [sp, #68]	@ 0x44
 8012e32:	a80a      	add	r0, sp, #40	@ 0x28
 8012e34:	f7fe f81d 	bl	8010e72 <_ZNSt6vectorImSaImEEaSEOS1_.isra.0>
      }
 8012e38:	a810      	add	r0, sp, #64	@ 0x40
 8012e3a:	f7fe f80f 	bl	8010e5c <_ZNSt12_Vector_baseImSaImEED1Ev>
 8012e3e:	a82d      	add	r0, sp, #180	@ 0xb4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012e40:	2600      	movs	r6, #0
      }
 8012e42:	f7ed fe4d 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>

	// transform it in vector of uint8_t
	data = BuildVector<T>(register_read_vector_cast);
 8012e46:	a90a      	add	r1, sp, #40	@ 0x28
 8012e48:	a810      	add	r0, sp, #64	@ 0x40
 8012e4a:	f7ff fda7 	bl	801299c <_ZNSt6vectorImSaImEEC1ERKS1_>
      : _M_current(__i) { }
 8012e4e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012e50:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012e54:	960f      	str	r6, [sp, #60]	@ 0x3c
 8012e56:	9302      	str	r3, [sp, #8]
 8012e58:	e9cd 660d 	strd	r6, r6, [sp, #52]	@ 0x34
    for (T input : inputs) {
 8012e5c:	9b02      	ldr	r3, [sp, #8]
 8012e5e:	4553      	cmp	r3, sl
 8012e60:	f040 808e 	bne.w	8012f80 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x248>
	data = BuildVector<T>(register_read_vector_cast);
 8012e64:	a90d      	add	r1, sp, #52	@ 0x34
 8012e66:	a807      	add	r0, sp, #28
 8012e68:	f7fd fd7b 	bl	8010962 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8012e6c:	a80d      	add	r0, sp, #52	@ 0x34
 8012e6e:	f7ed fe37 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012e72:	a810      	add	r0, sp, #64	@ 0x40
 8012e74:	f7fd fff2 	bl	8010e5c <_ZNSt12_Vector_baseImSaImEED1Ev>
 8012e78:	a80a      	add	r0, sp, #40	@ 0x28
 8012e7a:	f7fd ffef 	bl	8010e5c <_ZNSt12_Vector_baseImSaImEED1Ev>
	response_content.data = ReadElement<T>(&element, &success);
 8012e7e:	a821      	add	r0, sp, #132	@ 0x84
 8012e80:	a907      	add	r1, sp, #28
 8012e82:	f7fd fd6e 	bl	8010962 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8012e86:	a807      	add	r0, sp, #28
 8012e88:	f7ed fe2a 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not success) {
 8012e8c:	f1b8 0f00 	cmp.w	r8, #0
 8012e90:	d115      	bne.n	8012ebe <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x186>
		response_content.data = std::vector<uint8_t>{ERROR};
 8012e92:	22ff      	movs	r2, #255	@ 0xff
		response_content.command = true; // this is an error flag for a read ack
 8012e94:	2301      	movs	r3, #1
		response_content.data = std::vector<uint8_t>{ERROR};
 8012e96:	4620      	mov	r0, r4
 8012e98:	f88d 2028 	strb.w	r2, [sp, #40]	@ 0x28
 8012e9c:	aa0a      	add	r2, sp, #40	@ 0x28
		response_content.command = true; // this is an error flag for a read ack
 8012e9e:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
		response_content.data = std::vector<uint8_t>{ERROR};
 8012ea2:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012ea6:	ab0d      	add	r3, sp, #52	@ 0x34
 8012ea8:	2201      	movs	r2, #1
 8012eaa:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8012eac:	f7ed ff6c 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8012eb0:	a821      	add	r0, sp, #132	@ 0x84
 8012eb2:	4621      	mov	r1, r4
 8012eb4:	f7fd fd55 	bl	8010962 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8012eb8:	4620      	mov	r0, r4
 8012eba:	f7ed fe11 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8012ebe:	a91e      	add	r1, sp, #120	@ 0x78
 8012ec0:	4620      	mov	r0, r4
 8012ec2:	f7fe f94b 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8012ec6:	4622      	mov	r2, r4
 8012ec8:	4629      	mov	r1, r5
 8012eca:	4638      	mov	r0, r7
 8012ecc:	f7ff fbbc 	bl	8012648 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012ed0:	2800      	cmp	r0, #0
 8012ed2:	f040 8081 	bne.w	8012fd8 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x2a0>
 8012ed6:	e9d5 3601 	ldrd	r3, r6, [r5, #4]
 8012eda:	1af6      	subs	r6, r6, r3
 8012edc:	bf18      	it	ne
 8012ede:	2601      	movne	r6, #1
 8012ee0:	a82d      	add	r0, sp, #180	@ 0xb4
 8012ee2:	f7ed fdfd 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012ee6:	b1ce      	cbz	r6, 8012f1c <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x1e4>
		Send(*response);
 8012ee8:	4629      	mov	r1, r5
 8012eea:	4620      	mov	r0, r4
 8012eec:	f7fe f949 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8012ef0:	4621      	mov	r1, r4
 8012ef2:	4638      	mov	r0, r7
 8012ef4:	f7fe fa34 	bl	8011360 <_ZN13Communication4SendE13MessageHeader>
 8012ef8:	a82b      	add	r0, sp, #172	@ 0xac
 8012efa:	f7ed fdf1 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8012efe:	1d28      	adds	r0, r5, #4
 8012f00:	f7fd fd46 	bl	8010990 <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8012f04:	a91e      	add	r1, sp, #120	@ 0x78
 8012f06:	4620      	mov	r0, r4
 8012f08:	f7fe f928 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8012f0c:	4622      	mov	r2, r4
 8012f0e:	4629      	mov	r1, r5
 8012f10:	4638      	mov	r0, r7
 8012f12:	f7ff fb99 	bl	8012648 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012f16:	a82d      	add	r0, sp, #180	@ 0xb4
 8012f18:	f7ed fde2 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012f1c:	a827      	add	r0, sp, #156	@ 0x9c
 8012f1e:	f7ed fddf 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012f22:	a821      	add	r0, sp, #132	@ 0x84
 8012f24:	f7ed fddc 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012f28:	a814      	add	r0, sp, #80	@ 0x50
 8012f2a:	e743      	b.n	8012db4 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x7c>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8012f2c:	f8bd 00ac 	ldrh.w	r0, [sp, #172]	@ 0xac
 8012f30:	b150      	cbz	r0, 8012f48 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x210>
		vector = std::vector<T>(data, data + element.element_register.length);
 8012f32:	0086      	lsls	r6, r0, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012f34:	f7fd fac8 	bl	80104c8 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8012f38:	4602      	mov	r2, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012f3a:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012f3c:	9010      	str	r0, [sp, #64]	@ 0x40
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012f3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8012f40:	ab06      	add	r3, sp, #24
 8012f42:	1999      	adds	r1, r3, r6
 8012f44:	4618      	mov	r0, r3
 8012f46:	e770      	b.n	8012e2a <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0xf2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012f48:	e9dd b106 	ldrd	fp, r1, [sp, #24]
	  if (__xlen > capacity())
 8012f4c:	ebb1 0a0b 	subs.w	sl, r1, fp
 8012f50:	d011      	beq.n	8012f76 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x23e>
	  pointer __result = this->_M_allocate(__n);
 8012f52:	ea4f 00aa 	mov.w	r0, sl, asr #2
 8012f56:	9102      	str	r1, [sp, #8]
 8012f58:	f7fd fab6 	bl	80104c8 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8012f5c:	4606      	mov	r6, r0
 8012f5e:	4602      	mov	r2, r0
 8012f60:	9902      	ldr	r1, [sp, #8]
 8012f62:	4658      	mov	r0, fp
 8012f64:	f7ff fd0c 	bl	8012980 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 8012f68:	960a      	str	r6, [sp, #40]	@ 0x28
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8012f6a:	4456      	add	r6, sl
 8012f6c:	960c      	str	r6, [sp, #48]	@ 0x30
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8012f6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012f70:	4453      	add	r3, sl
 8012f72:	930b      	str	r3, [sp, #44]	@ 0x2c
      return *this;
 8012f74:	e763      	b.n	8012e3e <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x106>
 8012f76:	4652      	mov	r2, sl
 8012f78:	4658      	mov	r0, fp
 8012f7a:	f7ff fd01 	bl	8012980 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8012f7e:	e7f6      	b.n	8012f6e <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x236>
    for (T input : inputs) {
 8012f80:	f85a 2b04 	ldr.w	r2, [sl], #4
    std::memcpy(&reinterpreted_input, &input, sizeof(T)); // this is mandatory to get rid of the memory alignment problem. A simple cast can't work here
 8012f84:	f04f 0b18 	mov.w	fp, #24
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012f88:	962c      	str	r6, [sp, #176]	@ 0xb0
 8012f8a:	e9cd 662a 	strd	r6, r6, [sp, #168]	@ 0xa8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8012f8e:	f1cb 0c20 	rsb	ip, fp, #32
 8012f92:	fa22 f10b 	lsr.w	r1, r2, fp
 8012f96:	f1ab 0020 	sub.w	r0, fp, #32
	for (uint8_t index = 0; index < type_length; index++) {
 8012f9a:	f1ab 0b08 	sub.w	fp, fp, #8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8012f9e:	fa06 fc0c 	lsl.w	ip, r6, ip
 8012fa2:	9203      	str	r2, [sp, #12]
 8012fa4:	fa26 f000 	lsr.w	r0, r6, r0
 8012fa8:	ea41 010c 	orr.w	r1, r1, ip
 8012fac:	4301      	orrs	r1, r0
      { emplace_back(std::move(__x)); }
 8012fae:	4620      	mov	r0, r4
 8012fb0:	f88d 1015 	strb.w	r1, [sp, #21]
 8012fb4:	f10d 0115 	add.w	r1, sp, #21
 8012fb8:	f7fd ffbe 	bl	8010f38 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	for (uint8_t index = 0; index < type_length; index++) {
 8012fbc:	f11b 0f08 	cmn.w	fp, #8
 8012fc0:	9a03      	ldr	r2, [sp, #12]
 8012fc2:	d1e4      	bne.n	8012f8e <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x256>
        data.insert(data.end(), single.begin(), single.end());
 8012fc4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012fc6:	a80d      	add	r0, sp, #52	@ 0x34
 8012fc8:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8012fcc:	f7ff fac8 	bl	8012560 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	f7ed fd85 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8012fd6:	e741      	b.n	8012e5c <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x124>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8012fd8:	2600      	movs	r6, #0
 8012fda:	e781      	b.n	8012ee0 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt+0x1a8>

08012fdc <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fde:	461c      	mov	r4, r3
 8012fe0:	b08f      	sub	sp, #60	@ 0x3c
	if (not element.ack && element.command) {
 8012fe2:	799b      	ldrb	r3, [r3, #6]
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012fe4:	4605      	mov	r5, r0
 8012fe6:	4617      	mov	r7, r2
 8012fe8:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
	if (not element.ack && element.command) {
 8012fec:	b9cb      	cbnz	r3, 8013022 <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x46>
 8012fee:	79e3      	ldrb	r3, [r4, #7]
		return ProcessCommand<T>(message, response, element, start_index);
 8012ff0:	a803      	add	r0, sp, #12
	if (not element.ack && element.command) {
 8012ff2:	b323      	cbz	r3, 801303e <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x62>
		return ProcessCommand<T>(message, response, element, start_index);
 8012ff4:	f7fe f8c5 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8012ff8:	4621      	mov	r1, r4
 8012ffa:	a808      	add	r0, sp, #32
 8012ffc:	f7fe f8ae 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8013000:	ab08      	add	r3, sp, #32
 8013002:	463a      	mov	r2, r7
 8013004:	a903      	add	r1, sp, #12
 8013006:	4628      	mov	r0, r5
 8013008:	9600      	str	r6, [sp, #0]
 801300a:	f7ff fe95 	bl	8012d38 <_ZN13Communication14ProcessCommandImEEt13MessageHeaderPS1_14MessageElementt>
		return ProcessSubscriber<T>(message, element, start_index);
 801300e:	4604      	mov	r4, r0
 8013010:	a80b      	add	r0, sp, #44	@ 0x2c
 8013012:	f7ed fd65 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013016:	a804      	add	r0, sp, #16
 8013018:	f7ed fd62 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 801301c:	4620      	mov	r0, r4
 801301e:	b00f      	add	sp, #60	@ 0x3c
 8013020:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ProcessService<T>(message, element, start_index);
 8013022:	a803      	add	r0, sp, #12
 8013024:	f7fe f8ad 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8013028:	4621      	mov	r1, r4
 801302a:	a808      	add	r0, sp, #32
 801302c:	f7fe f896 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8013030:	4633      	mov	r3, r6
 8013032:	aa08      	add	r2, sp, #32
 8013034:	a903      	add	r1, sp, #12
 8013036:	4628      	mov	r0, r5
 8013038:	f7ff f905 	bl	8012246 <_ZN13Communication14ProcessServiceImEEt13MessageHeader14MessageElementt>
 801303c:	e7e7      	b.n	801300e <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x32>
		return ProcessSubscriber<T>(message, element, start_index);
 801303e:	f7fe f8a0 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8013042:	4621      	mov	r1, r4
 8013044:	a808      	add	r0, sp, #32
 8013046:	f7fe f889 	bl	801115c <_ZN14MessageElementC1ERKS_>
 801304a:	4633      	mov	r3, r6
 801304c:	aa08      	add	r2, sp, #32
 801304e:	a903      	add	r1, sp, #12
 8013050:	4628      	mov	r0, r5
 8013052:	f7ff f874 	bl	801213e <_ZN13Communication17ProcessSubscriberImEEt13MessageHeader14MessageElementt>
 8013056:	e7da      	b.n	801300e <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt+0x32>

08013058 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8013058:	b510      	push	{r4, lr}
	  if (__n > 0)
 801305a:	460a      	mov	r2, r1
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 801305c:	4604      	mov	r4, r0
	  if (__n > 0)
 801305e:	b141      	cbz	r1, 8013072 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_+0x1a>
 8013060:	2100      	movs	r1, #0
      if (__n <= 0)
 8013062:	2a01      	cmp	r2, #1
 8013064:	f800 1b01 	strb.w	r1, [r0], #1
 8013068:	d005      	beq.n	8013076 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_+0x1e>
      std::__fill_a(__first, __first + __n, __value);
 801306a:	4414      	add	r4, r2
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 801306c:	3a01      	subs	r2, #1
 801306e:	f00b ff63 	bl	801ef38 <memset>
	}
 8013072:	4620      	mov	r0, r4
 8013074:	bd10      	pop	{r4, pc}
	      ++__first;
 8013076:	4604      	mov	r4, r0
 8013078:	e7fb      	b.n	8013072 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_+0x1a>
	...

0801307c <_ZNSt6vectorIaSaIaEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 801307c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013080:	4604      	mov	r4, r0
      if (__n != 0)
 8013082:	460d      	mov	r5, r1
 8013084:	b159      	cbz	r1, 801309e <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x22>
					 - this->_M_impl._M_finish);
 8013086:	6882      	ldr	r2, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013088:	e9d0 7300 	ldrd	r7, r3, [r0]
 801308c:	1ad2      	subs	r2, r2, r3
 801308e:	eba3 0807 	sub.w	r8, r3, r7
	  if (__navail >= __n)
 8013092:	428a      	cmp	r2, r1
 8013094:	d305      	bcc.n	80130a2 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x26>
	__uninit_default_n(__first, __n);
 8013096:	4618      	mov	r0, r3
 8013098:	f7ff ffde 	bl	8013058 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_>
	      this->_M_impl._M_finish =
 801309c:	6060      	str	r0, [r4, #4]
    }
 801309e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		_M_check_len(__n, "vector::_M_default_append");
 80130a2:	4a11      	ldr	r2, [pc, #68]	@ (80130e8 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x6c>)
 80130a4:	f7fd fffd 	bl	80110a2 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc>
 80130a8:	4681      	mov	r9, r0
	      pointer __new_start(this->_M_allocate(__len));
 80130aa:	f7fd fa02 	bl	80104b2 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 80130ae:	4629      	mov	r1, r5
 80130b0:	4606      	mov	r6, r0
 80130b2:	4440      	add	r0, r8
 80130b4:	f7ff ffd0 	bl	8013058 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_>
      if (__count > 0)
 80130b8:	f1b8 0f00 	cmp.w	r8, #0
 80130bc:	d00a      	beq.n	80130d4 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x58>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80130be:	4642      	mov	r2, r8
 80130c0:	4639      	mov	r1, r7
 80130c2:	4630      	mov	r0, r6
 80130c4:	f00b ff1e 	bl	801ef04 <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 80130c8:	68a1      	ldr	r1, [r4, #8]
 80130ca:	4638      	mov	r0, r7
 80130cc:	1bc9      	subs	r1, r1, r7
 80130ce:	f00a ff77 	bl	801dfc0 <_ZdlPvj>
      { __a.deallocate(__p, __n); }
 80130d2:	e001      	b.n	80130d8 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x5c>
	if (__p)
 80130d4:	2f00      	cmp	r7, #0
 80130d6:	d1f7      	bne.n	80130c8 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x4c>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 80130d8:	4445      	add	r5, r8
	      this->_M_impl._M_start = __new_start;
 80130da:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 80130dc:	4435      	add	r5, r6
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 80130de:	444e      	add	r6, r9
	      this->_M_impl._M_finish = __new_start + __size + __n;
 80130e0:	6065      	str	r5, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 80130e2:	60a6      	str	r6, [r4, #8]
    }
 80130e4:	e7db      	b.n	801309e <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x22>
 80130e6:	bf00      	nop
 80130e8:	0801f496 	.word	0x0801f496

080130ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80130ec:	b510      	push	{r4, lr}
	  if (_Num)
 80130ee:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80130f0:	4613      	mov	r3, r2
	  if (_Num)
 80130f2:	d005      	beq.n	8013100 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80130f4:	4601      	mov	r1, r0
 80130f6:	4622      	mov	r2, r4
 80130f8:	4618      	mov	r0, r3
 80130fa:	f00b ff03 	bl	801ef04 <memmove>
 80130fe:	4603      	mov	r3, r0
	}
 8013100:	1918      	adds	r0, r3, r4
 8013102:	bd10      	pop	{r4, pc}

08013104 <_ZNSt6vectorIaSaIaEEC1ERKS1_>:
      vector(const vector& __x)
 8013104:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013106:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 801310a:	4604      	mov	r4, r0
 801310c:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801310e:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013110:	2300      	movs	r3, #0
 8013112:	e9c0 3300 	strd	r3, r3, [r0]
 8013116:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8013118:	4630      	mov	r0, r6
 801311a:	f7fd f9ca 	bl	80104b2 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801311e:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8013120:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013122:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8013124:	e9c4 0000 	strd	r0, r0, [r4]
			      _Category>::__copy_m(__first, __last, __result);
 8013128:	e9d5 0100 	ldrd	r0, r1, [r5]
 801312c:	f7ff ffde 	bl	80130ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 8013130:	6060      	str	r0, [r4, #4]
      }
 8013132:	4620      	mov	r0, r4
 8013134:	bd70      	pop	{r4, r5, r6, pc}

08013136 <_ZN9Registers13WriteRegisterIaEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8013136:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801313a:	b085      	sub	sp, #20
 801313c:	4606      	mov	r6, r0
 801313e:	4688      	mov	r8, r1
 8013140:	461f      	mov	r7, r3
 8013142:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8013146:	f04f 31ff 	mov.w	r1, #4294967295
 801314a:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 801314c:	4615      	mov	r5, r2
 801314e:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8013150:	f7f9 fe8a 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8013154:	f10d 020f 	add.w	r2, sp, #15
 8013158:	4641      	mov	r1, r8
 801315a:	4630      	mov	r0, r6
 801315c:	f006 fb81 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8013160:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8013164:	4604      	mov	r4, r0
	if (!success) {
 8013166:	b933      	cbnz	r3, 8013176 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x40>
		osSemaphoreRelease(RegistersSemaphore);
 8013168:	6830      	ldr	r0, [r6, #0]
 801316a:	f7f9 feb1 	bl	800ced0 <osSemaphoreRelease>
		return false;
 801316e:	2000      	movs	r0, #0
}
 8013170:	b005      	add	sp, #20
 8013172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8013176:	f10d 000f 	add.w	r0, sp, #15
 801317a:	f7fd fa05 	bl	8010588 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	if (!success) {
 801317e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d0f0      	beq.n	8013168 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
	if (target_register->register_info.type != registered_type) {
 8013186:	7923      	ldrb	r3, [r4, #4]
 8013188:	4283      	cmp	r3, r0
 801318a:	d1ed      	bne.n	8013168 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 801318c:	3304      	adds	r3, #4
 801318e:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8013192:	2800      	cmp	r0, #0
 8013194:	d0e8      	beq.n	8013168 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
	if (target_register->access.write) {
 8013196:	7a23      	ldrb	r3, [r4, #8]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d0e5      	beq.n	8013168 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
		success = false;
 801319c:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801319e:	8961      	ldrh	r1, [r4, #10]
		success = false;
 80131a0:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80131a4:	f7fd ff50 	bl	8011048 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80131a8:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80131aa:	f8d0 9008 	ldr.w	r9, [r0, #8]
 80131ae:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80131b2:	b133      	cbz	r3, 80131c2 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x8c>
 80131b4:	68e3      	ldr	r3, [r4, #12]
 80131b6:	b123      	cbz	r3, 80131c2 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x8c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 80131b8:	f04f 31ff 	mov.w	r1, #4294967295
 80131bc:	6818      	ldr	r0, [r3, #0]
 80131be:	f7f9 fe53 	bl	800ce68 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 80131c2:	7823      	ldrb	r3, [r4, #0]
 80131c4:	b1db      	cbz	r3, 80131fe <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc8>
			success = true;
 80131c6:	2301      	movs	r3, #1
 80131c8:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 80131cc:	7963      	ldrb	r3, [r4, #5]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d045      	beq.n	801325e <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x128>
 80131d2:	88e1      	ldrh	r1, [r4, #6]
 80131d4:	2900      	cmp	r1, #0
 80131d6:	d13c      	bne.n	8013252 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x11c>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80131d8:	e9db 3100 	ldrd	r3, r1, [fp]
 80131dc:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 80131de:	bf18      	it	ne
 80131e0:	f8cb 3004 	strne.w	r3, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80131e4:	f8db 0004 	ldr.w	r0, [fp, #4]
 80131e8:	1ac1      	subs	r1, r0, r3
	if (__new_size > size())
 80131ea:	428f      	cmp	r7, r1
 80131ec:	d924      	bls.n	8013238 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x102>
	  _M_default_append(__new_size - size());
 80131ee:	1a79      	subs	r1, r7, r1
 80131f0:	4658      	mov	r0, fp
 80131f2:	f7ff ff43 	bl	801307c <_ZNSt6vectorIaSaIaEE17_M_default_appendEj>
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 80131f6:	2300      	movs	r3, #0
				for (uint16_t index = 0; index < length; index++) {
 80131f8:	b299      	uxth	r1, r3
 80131fa:	42b9      	cmp	r1, r7
 80131fc:	d323      	bcc.n	8013246 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x110>
		if (target_register->mode.callbacks) {
 80131fe:	7863      	ldrb	r3, [r4, #1]
 8013200:	b16b      	cbz	r3, 801321e <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xe8>
			if (callbacks.write != NULL) {
 8013202:	f1b9 0f00 	cmp.w	r9, #0
 8013206:	d00a      	beq.n	801321e <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xe8>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8013208:	7963      	ldrb	r3, [r4, #5]
 801320a:	b36b      	cbz	r3, 8013268 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x132>
 801320c:	88e3      	ldrh	r3, [r4, #6]
 801320e:	b903      	cbnz	r3, 8013212 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xdc>
					success = callbacks.write(callbacks.context, ID, value, length);
 8013210:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 8013212:	462a      	mov	r2, r5
 8013214:	4641      	mov	r1, r8
 8013216:	4650      	mov	r0, sl
 8013218:	47c8      	blx	r9
 801321a:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801321e:	9b01      	ldr	r3, [sp, #4]
 8013220:	b123      	cbz	r3, 801322c <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xf6>
 8013222:	68e3      	ldr	r3, [r4, #12]
 8013224:	b113      	cbz	r3, 801322c <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xf6>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8013226:	6818      	ldr	r0, [r3, #0]
 8013228:	f7f9 fe52 	bl	800ced0 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 801322c:	6830      	ldr	r0, [r6, #0]
 801322e:	f7f9 fe4f 	bl	800ced0 <osSemaphoreRelease>
		return success;
 8013232:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8013236:	e79b      	b.n	8013170 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x3a>
	else if (__new_size < size())
 8013238:	d2dd      	bcs.n	80131f6 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc0>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 801323a:	443b      	add	r3, r7
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801323c:	4298      	cmp	r0, r3
 801323e:	d0da      	beq.n	80131f6 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc0>
	    this->_M_impl._M_finish = __pos;
 8013240:	f8cb 3004 	str.w	r3, [fp, #4]
 8013244:	e7d7      	b.n	80131f6 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc0>
					(*register_vector)[index] = value[index];
 8013246:	56e8      	ldrsb	r0, [r5, r3]
 8013248:	f8db 1000 	ldr.w	r1, [fp]
 801324c:	54c8      	strb	r0, [r1, r3]
				for (uint16_t index = 0; index < length; index++) {
 801324e:	3301      	adds	r3, #1
 8013250:	e7d2      	b.n	80131f8 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc2>
 8013252:	465a      	mov	r2, fp
 8013254:	4429      	add	r1, r5
 8013256:	4628      	mov	r0, r5
 8013258:	f7ff ff48 	bl	80130ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801325c:	e7cf      	b.n	80131fe <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc8>
				*(callbacks.pointer) = *value;
 801325e:	f995 3000 	ldrsb.w	r3, [r5]
 8013262:	f88b 3000 	strb.w	r3, [fp]
 8013266:	e7ca      	b.n	80131fe <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc8>
					success = callbacks.write(callbacks.context, ID, value, 1);
 8013268:	2301      	movs	r3, #1
 801326a:	e7d2      	b.n	8013212 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xdc>

0801326c <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 801326c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013270:	b091      	sub	sp, #68	@ 0x44
 8013272:	4605      	mov	r5, r0
 8013274:	4691      	mov	r9, r2
 8013276:	4608      	mov	r0, r1
 8013278:	af02      	add	r7, sp, #8
 801327a:	469a      	mov	sl, r3
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 801327c:	3104      	adds	r1, #4
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 801327e:	f8d7 b060 	ldr.w	fp, [r7, #96]	@ 0x60
 8013282:	f107 060b 	add.w	r6, r7, #11
 8013286:	f8b7 4064 	ldrh.w	r4, [r7, #100]	@ 0x64
	if (not element.element_register.isArray) {
 801328a:	f89b 8003 	ldrb.w	r8, [fp, #3]
 801328e:	f1b8 0f00 	cmp.w	r8, #0
 8013292:	d176      	bne.n	8013382 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x116>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8013294:	f107 0020 	add.w	r0, r7, #32
 8013298:	f7ed fcd2 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801329c:	4632      	mov	r2, r6
 801329e:	4621      	mov	r1, r4
 80132a0:	f107 0020 	add.w	r0, r7, #32
 80132a4:	f7fd fa2a 	bl	80106fc <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 80132a8:	7538      	strb	r0, [r7, #20]
      }
 80132aa:	f107 0020 	add.w	r0, r7, #32
 80132ae:	f7ed fc17 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 80132b2:	7afb      	ldrb	r3, [r7, #11]
 80132b4:	b153      	cbz	r3, 80132cc <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x60>
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 80132b6:	2301      	movs	r3, #1
 80132b8:	f8bb 1000 	ldrh.w	r1, [fp]
 80132bc:	f107 0214 	add.w	r2, r7, #20
 80132c0:	9300      	str	r3, [sp, #0]
 80132c2:	4643      	mov	r3, r8
 80132c4:	6868      	ldr	r0, [r5, #4]
 80132c6:	f7ff ff36 	bl	8013136 <_ZN9Registers13WriteRegisterIaEEbtPT_tb>
 80132ca:	72f8      	strb	r0, [r7, #11]
		length_to_extract = 1;
 80132cc:	f04f 0801 	mov.w	r8, #1
	if (success)
 80132d0:	7afb      	ldrb	r3, [r7, #11]
		response_content.data = std::vector<uint8_t>{OK};
 80132d2:	f10a 060c 	add.w	r6, sl, #12
 80132d6:	f107 0214 	add.w	r2, r7, #20
 80132da:	f107 010c 	add.w	r1, r7, #12
	if (success)
 80132de:	2b00      	cmp	r3, #0
 80132e0:	f000 80ce 	beq.w	8013480 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x214>
		response_content.data = std::vector<uint8_t>{OK};
 80132e4:	2300      	movs	r3, #0
 80132e6:	723b      	strb	r3, [r7, #8]
 80132e8:	f107 0308 	add.w	r3, r7, #8
 80132ec:	60fb      	str	r3, [r7, #12]
 80132ee:	2301      	movs	r3, #1
 80132f0:	613b      	str	r3, [r7, #16]
 80132f2:	4613      	mov	r3, r2
 80132f4:	c906      	ldmia	r1, {r1, r2}
		response_content.data = std::vector<uint8_t>{ERROR};
 80132f6:	f107 0020 	add.w	r0, r7, #32
 80132fa:	f7ed fd45 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80132fe:	f107 0120 	add.w	r1, r7, #32
 8013302:	4630      	mov	r0, r6
 8013304:	f7fd fb2d 	bl	8010962 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8013308:	f107 0020 	add.w	r0, r7, #32
 801330c:	f7ed fbe8 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content)) {
 8013310:	4651      	mov	r1, sl
 8013312:	f107 0020 	add.w	r0, r7, #32
 8013316:	f7fd ff21 	bl	801115c <_ZN14MessageElementC1ERKS_>
 801331a:	f107 0220 	add.w	r2, r7, #32
 801331e:	4649      	mov	r1, r9
 8013320:	4628      	mov	r0, r5
 8013322:	f7ff f991 	bl	8012648 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8013326:	4606      	mov	r6, r0
 8013328:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801332c:	f7ed fbd8 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013330:	bb06      	cbnz	r6, 8013374 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x108>
		Send(*response);
 8013332:	4649      	mov	r1, r9
 8013334:	f107 0020 	add.w	r0, r7, #32
 8013338:	f7fd ff23 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 801333c:	f107 0120 	add.w	r1, r7, #32
 8013340:	4628      	mov	r0, r5
 8013342:	f7fe f80d 	bl	8011360 <_ZN13Communication4SendE13MessageHeader>
 8013346:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801334a:	f7ed fbc9 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 801334e:	f109 0004 	add.w	r0, r9, #4
 8013352:	f7fd fb1d 	bl	8010990 <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8013356:	4651      	mov	r1, sl
 8013358:	f107 0020 	add.w	r0, r7, #32
 801335c:	f7fd fefe 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8013360:	f107 0220 	add.w	r2, r7, #32
 8013364:	4649      	mov	r1, r9
 8013366:	4628      	mov	r0, r5
 8013368:	f7ff f96e 	bl	8012648 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 801336c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8013370:	f7ed fbb6 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return start_index + sizeof(T) * length_to_extract;
 8013374:	eb04 0008 	add.w	r0, r4, r8
}
 8013378:	373c      	adds	r7, #60	@ 0x3c
 801337a:	b280      	uxth	r0, r0
 801337c:	46bd      	mov	sp, r7
 801337e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8013382:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 8013386:	f1b8 0f00 	cmp.w	r8, #0
 801338a:	d029      	beq.n	80133e0 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x174>
		T values[length_to_extract];
 801338c:	f108 0307 	add.w	r3, r8, #7
 8013390:	466a      	mov	r2, sp
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8013392:	f8c7 d000 	str.w	sp, [r7]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8013396:	f107 0020 	add.w	r0, r7, #32
		T values[length_to_extract];
 801339a:	08db      	lsrs	r3, r3, #3
 801339c:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 80133a0:	469d      	mov	sp, r3
 80133a2:	ab02      	add	r3, sp, #8
 80133a4:	607b      	str	r3, [r7, #4]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 80133a6:	f7ed fc4b 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80133aa:	9600      	str	r6, [sp, #0]
 80133ac:	4643      	mov	r3, r8
 80133ae:	4622      	mov	r2, r4
 80133b0:	f107 0120 	add.w	r1, r7, #32
 80133b4:	6878      	ldr	r0, [r7, #4]
 80133b6:	f7fe fc49 	bl	8011c4c <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 80133ba:	f107 0020 	add.w	r0, r7, #32
 80133be:	f7ed fb8f 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 80133c2:	7afb      	ldrb	r3, [r7, #11]
 80133c4:	b14b      	cbz	r3, 80133da <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x16e>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 80133c6:	2301      	movs	r3, #1
 80133c8:	f8bb 1000 	ldrh.w	r1, [fp]
 80133cc:	9300      	str	r3, [sp, #0]
 80133ce:	2300      	movs	r3, #0
 80133d0:	687a      	ldr	r2, [r7, #4]
 80133d2:	6868      	ldr	r0, [r5, #4]
 80133d4:	f7ff feaf 	bl	8013136 <_ZN9Registers13WriteRegisterIaEEbtPT_tb>
 80133d8:	72f8      	strb	r0, [r7, #11]
 80133da:	f8d7 d000 	ldr.w	sp, [r7]
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 80133de:	e777      	b.n	80132d0 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
		length_to_extract = message.payload[start_index];
 80133e0:	6843      	ldr	r3, [r0, #4]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80133e2:	f107 0020 	add.w	r0, r7, #32
		length_to_extract = message.payload[start_index];
 80133e6:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 80133ea:	3401      	adds	r4, #1
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80133ec:	f7ed fc28 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80133f0:	f107 0120 	add.w	r1, r7, #32
		start_index++;
 80133f4:	b2a4      	uxth	r4, r4
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80133f6:	4643      	mov	r3, r8
 80133f8:	f107 0014 	add.w	r0, r7, #20
 80133fc:	9600      	str	r6, [sp, #0]
 80133fe:	4622      	mov	r2, r4
 8013400:	f7fe fbca 	bl	8011b98 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8013404:	f107 0020 	add.w	r0, r7, #32
 8013408:	f7ed fb6a 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 801340c:	7afb      	ldrb	r3, [r7, #11]
 801340e:	b1fb      	cbz	r3, 8013450 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e4>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 8013410:	686e      	ldr	r6, [r5, #4]
 8013412:	f107 0114 	add.w	r1, r7, #20
 8013416:	f8bb b000 	ldrh.w	fp, [fp]
 801341a:	f107 0020 	add.w	r0, r7, #32
 801341e:	f7ff fe71 	bl	8013104 <_ZNSt6vectorIaSaIaEEC1ERKS1_>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8013422:	f04f 31ff 	mov.w	r1, #4294967295
 8013426:	6830      	ldr	r0, [r6, #0]
 8013428:	f7f9 fd1e 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801342c:	f107 020c 	add.w	r2, r7, #12
 8013430:	4659      	mov	r1, fp
 8013432:	4630      	mov	r0, r6
 8013434:	f006 fa15 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8013438:	7b3a      	ldrb	r2, [r7, #12]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801343a:	4603      	mov	r3, r0
		osSemaphoreRelease(RegistersSemaphore);
 801343c:	6830      	ldr	r0, [r6, #0]
	if (!success) {
 801343e:	b962      	cbnz	r2, 801345a <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ee>
		osSemaphoreRelease(RegistersSemaphore);
 8013440:	f7f9 fd46 	bl	800ced0 <osSemaphoreRelease>
		return false;
 8013444:	2000      	movs	r0, #0
 8013446:	72f8      	strb	r0, [r7, #11]
 8013448:	f107 0020 	add.w	r0, r7, #32
 801344c:	f7fd fd3b 	bl	8010ec6 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8013450:	f107 0014 	add.w	r0, r7, #20
 8013454:	f7fd fd37 	bl	8010ec6 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8013458:	e73a      	b.n	80132d0 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 801345a:	795a      	ldrb	r2, [r3, #5]
 801345c:	2a00      	cmp	r2, #0
 801345e:	d0ef      	beq.n	8013440 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d4>
 8013460:	88db      	ldrh	r3, [r3, #6]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d1ec      	bne.n	8013440 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d4>
	osSemaphoreRelease(RegistersSemaphore);
 8013466:	f7f9 fd33 	bl	800ced0 <osSemaphoreRelease>
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 801346a:	2101      	movs	r1, #1
 801346c:	4630      	mov	r0, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801346e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8013472:	9100      	str	r1, [sp, #0]
 8013474:	4659      	mov	r1, fp
 8013476:	1a9b      	subs	r3, r3, r2
 8013478:	b29b      	uxth	r3, r3
 801347a:	f7ff fe5c 	bl	8013136 <_ZN9Registers13WriteRegisterIaEEbtPT_tb>
 801347e:	e7e2      	b.n	8013446 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1da>
		response_content.data = std::vector<uint8_t>{ERROR};
 8013480:	23ff      	movs	r3, #255	@ 0xff
 8013482:	723b      	strb	r3, [r7, #8]
 8013484:	f107 0308 	add.w	r3, r7, #8
 8013488:	617b      	str	r3, [r7, #20]
 801348a:	2301      	movs	r3, #1
 801348c:	61bb      	str	r3, [r7, #24]
 801348e:	460b      	mov	r3, r1
 8013490:	ca06      	ldmia	r2, {r1, r2}
 8013492:	e730      	b.n	80132f6 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x8a>

08013494 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8013494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013498:	460f      	mov	r7, r1
 801349a:	b0b1      	sub	sp, #196	@ 0xc4
 801349c:	461c      	mov	r4, r3
 801349e:	4680      	mov	r8, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 80134a0:	f04f 0900 	mov.w	r9, #0
 80134a4:	f8bd a0e8 	ldrh.w	sl, [sp, #232]	@ 0xe8
 80134a8:	9203      	str	r2, [sp, #12]
 80134aa:	ad2a      	add	r5, sp, #168	@ 0xa8
 80134ac:	f8cd 9074 	str.w	r9, [sp, #116]	@ 0x74
	response_content.element_register = element.element_register;
 80134b0:	e9d3 0100 	ldrd	r0, r1, [r3]
	response_content.ack = true;
 80134b4:	2301      	movs	r3, #1
	response_content.element_register = element.element_register;
 80134b6:	9018      	str	r0, [sp, #96]	@ 0x60
	response_content.ack = true;
 80134b8:	f8ad 3066 	strh.w	r3, [sp, #102]	@ 0x66
	response_content.access = element.access;
 80134bc:	7a23      	ldrb	r3, [r4, #8]
	response_content.element_register = element.element_register;
 80134be:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
	CommunicationLED(leds, message.interface);
 80134c2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80134c6:	7839      	ldrb	r1, [r7, #0]
	response_content.access = element.access;
 80134c8:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 80134cc:	e9cd 991b 	strd	r9, r9, [sp, #108]	@ 0x6c
	CommunicationLED(leds, message.interface);
 80134d0:	f7fb fde0 	bl	800f094 <_Z16CommunicationLEDP4LEDSh>
	if (element.access == WRITE) {
 80134d4:	7a23      	ldrb	r3, [r4, #8]
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 80134d6:	4639      	mov	r1, r7
	if (element.access == WRITE) {
 80134d8:	bb1b      	cbnz	r3, 8013522 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x8e>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 80134da:	a81e      	add	r0, sp, #120	@ 0x78
 80134dc:	f7fd fe51 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 80134e0:	a918      	add	r1, sp, #96	@ 0x60
 80134e2:	a824      	add	r0, sp, #144	@ 0x90
 80134e4:	f7fd fe3a 	bl	801115c <_ZN14MessageElementC1ERKS_>
 80134e8:	4621      	mov	r1, r4
 80134ea:	4628      	mov	r0, r5
 80134ec:	f7fd fe36 	bl	801115c <_ZN14MessageElementC1ERKS_>
 80134f0:	ab24      	add	r3, sp, #144	@ 0x90
 80134f2:	9a03      	ldr	r2, [sp, #12]
 80134f4:	a91e      	add	r1, sp, #120	@ 0x78
 80134f6:	4640      	mov	r0, r8
 80134f8:	e9cd 5a00 	strd	r5, sl, [sp]
 80134fc:	f7ff feb6 	bl	801326c <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t>
 8013500:	4682      	mov	sl, r0
      }
 8013502:	a82d      	add	r0, sp, #180	@ 0xb4
 8013504:	f7ed faec 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013508:	a827      	add	r0, sp, #156	@ 0x9c
 801350a:	f7ed fae9 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801350e:	a81f      	add	r0, sp, #124	@ 0x7c
 8013510:	f7ed fae6 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013514:	a81b      	add	r0, sp, #108	@ 0x6c
 8013516:	f7ed fae3 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 801351a:	4650      	mov	r0, sl
 801351c:	b031      	add	sp, #196	@ 0xc4
 801351e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ProcessRead<T>(message, response, response_content, element, start_index);
 8013522:	a813      	add	r0, sp, #76	@ 0x4c
 8013524:	f7fd fe2d 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8013528:	a918      	add	r1, sp, #96	@ 0x60
 801352a:	a81e      	add	r0, sp, #120	@ 0x78
 801352c:	f7fd fe16 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8013530:	4621      	mov	r1, r4
 8013532:	a824      	add	r0, sp, #144	@ 0x90
 8013534:	f7fd fe12 	bl	801115c <_ZN14MessageElementC1ERKS_>
uint16_t Communication::ProcessRead(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8013538:	f8d8 7004 	ldr.w	r7, [r8, #4]
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 801353c:	f8bd b090 	ldrh.w	fp, [sp, #144]	@ 0x90
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8013540:	f04f 31ff 	mov.w	r1, #4294967295
 8013544:	6838      	ldr	r0, [r7, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013546:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 801354a:	e9cd 9907 	strd	r9, r9, [sp, #28]
 801354e:	f7f9 fc8b 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8013552:	462a      	mov	r2, r5
 8013554:	4659      	mov	r1, fp
 8013556:	4638      	mov	r0, r7
 8013558:	f006 f983 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801355c:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8013560:	4604      	mov	r4, r0
	if (!success) {
 8013562:	2b00      	cmp	r3, #0
 8013564:	d15c      	bne.n	8013620 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x18c>
		osSemaphoreRelease(RegistersSemaphore);
 8013566:	6838      	ldr	r0, [r7, #0]
 8013568:	f7f9 fcb2 	bl	800ced0 <osSemaphoreRelease>
		return false;
 801356c:	2300      	movs	r3, #0
 801356e:	9304      	str	r3, [sp, #16]
	response_content.data = ReadElement<T>(&element, &success);
 8013570:	a907      	add	r1, sp, #28
 8013572:	a821      	add	r0, sp, #132	@ 0x84
 8013574:	f7fd f9f5 	bl	8010962 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8013578:	a807      	add	r0, sp, #28
 801357a:	f7ed fab1 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not success) {
 801357e:	9b04      	ldr	r3, [sp, #16]
 8013580:	b9ab      	cbnz	r3, 80135ae <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x11a>
		response_content.data = std::vector<uint8_t>{ERROR};
 8013582:	22ff      	movs	r2, #255	@ 0xff
		response_content.command = true; // this is an error flag for a read ack
 8013584:	2301      	movs	r3, #1
		response_content.data = std::vector<uint8_t>{ERROR};
 8013586:	4628      	mov	r0, r5
 8013588:	f88d 2028 	strb.w	r2, [sp, #40]	@ 0x28
 801358c:	aa0a      	add	r2, sp, #40	@ 0x28
		response_content.command = true; // this is an error flag for a read ack
 801358e:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
		response_content.data = std::vector<uint8_t>{ERROR};
 8013592:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013596:	ab0d      	add	r3, sp, #52	@ 0x34
 8013598:	2201      	movs	r2, #1
 801359a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801359c:	f7ed fbf4 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80135a0:	a821      	add	r0, sp, #132	@ 0x84
 80135a2:	4629      	mov	r1, r5
 80135a4:	f7fd f9dd 	bl	8010962 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 80135a8:	4628      	mov	r0, r5
 80135aa:	f7ed fa99 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 80135ae:	a91e      	add	r1, sp, #120	@ 0x78
 80135b0:	4628      	mov	r0, r5
 80135b2:	f7fd fdd3 	bl	801115c <_ZN14MessageElementC1ERKS_>
 80135b6:	462a      	mov	r2, r5
 80135b8:	9903      	ldr	r1, [sp, #12]
 80135ba:	4640      	mov	r0, r8
 80135bc:	f7ff f844 	bl	8012648 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80135c0:	2800      	cmp	r0, #0
 80135c2:	f040 812e 	bne.w	8013822 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x38e>
 80135c6:	9b03      	ldr	r3, [sp, #12]
 80135c8:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 80135cc:	1ae4      	subs	r4, r4, r3
 80135ce:	bf18      	it	ne
 80135d0:	2401      	movne	r4, #1
 80135d2:	a82d      	add	r0, sp, #180	@ 0xb4
 80135d4:	f7ed fa84 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80135d8:	b1d4      	cbz	r4, 8013610 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x17c>
		Send(*response);
 80135da:	9903      	ldr	r1, [sp, #12]
 80135dc:	a82a      	add	r0, sp, #168	@ 0xa8
 80135de:	f7fd fdd0 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 80135e2:	a92a      	add	r1, sp, #168	@ 0xa8
 80135e4:	4640      	mov	r0, r8
 80135e6:	f7fd febb 	bl	8011360 <_ZN13Communication4SendE13MessageHeader>
 80135ea:	a82b      	add	r0, sp, #172	@ 0xac
 80135ec:	f7ed fa78 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 80135f0:	9b03      	ldr	r3, [sp, #12]
 80135f2:	1d18      	adds	r0, r3, #4
 80135f4:	f7fd f9cc 	bl	8010990 <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 80135f8:	a91e      	add	r1, sp, #120	@ 0x78
 80135fa:	a82a      	add	r0, sp, #168	@ 0xa8
 80135fc:	f7fd fdae 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8013600:	aa2a      	add	r2, sp, #168	@ 0xa8
 8013602:	9903      	ldr	r1, [sp, #12]
 8013604:	4640      	mov	r0, r8
 8013606:	f7ff f81f 	bl	8012648 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 801360a:	a82d      	add	r0, sp, #180	@ 0xb4
 801360c:	f7ed fa68 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013610:	a827      	add	r0, sp, #156	@ 0x9c
 8013612:	f7ed fa65 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013616:	a821      	add	r0, sp, #132	@ 0x84
 8013618:	f7ed fa62 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801361c:	a814      	add	r0, sp, #80	@ 0x50
 801361e:	e777      	b.n	8013510 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x7c>
	uint8_t registered_type = GetTypeID<T>(&success);
 8013620:	4628      	mov	r0, r5
 8013622:	f7fc ffb1 	bl	8010588 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	if (!success) {
 8013626:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 801362a:	9304      	str	r3, [sp, #16]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d09a      	beq.n	8013566 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xd2>
	if (target_register->register_info.type != registered_type) {
 8013630:	7923      	ldrb	r3, [r4, #4]
 8013632:	4298      	cmp	r0, r3
 8013634:	d197      	bne.n	8013566 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xd2>
	if (callbacks[target_register->register_info.type] == NULL) {
 8013636:	3004      	adds	r0, #4
 8013638:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 801363c:	2800      	cmp	r0, #0
 801363e:	d092      	beq.n	8013566 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xd2>
	if (target_register->access.read) {
 8013640:	7a63      	ldrb	r3, [r4, #9]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d031      	beq.n	80136aa <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x216>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8013646:	8961      	ldrh	r1, [r4, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 8013648:	f88d 90a8 	strb.w	r9, [sp, #168]	@ 0xa8
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801364c:	f7fd fcfc 	bl	8011048 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>
 8013650:	e9d0 9300 	ldrd	r9, r3, [r0]
 8013654:	9305      	str	r3, [sp, #20]
 8013656:	68c3      	ldr	r3, [r0, #12]
 8013658:	461e      	mov	r6, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801365a:	68e3      	ldr	r3, [r4, #12]
 801365c:	b123      	cbz	r3, 8013668 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x1d4>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 801365e:	f04f 31ff 	mov.w	r1, #4294967295
 8013662:	6818      	ldr	r0, [r3, #0]
 8013664:	f7f9 fc00 	bl	800ce68 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 8013668:	7863      	ldrb	r3, [r4, #1]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d161      	bne.n	8013732 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x29e>
		if (not success && target_register->mode.pointer) {
 801366e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 8013672:	b9ab      	cbnz	r3, 80136a0 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20c>
 8013674:	7823      	ldrb	r3, [r4, #0]
 8013676:	b19b      	cbz	r3, 80136a0 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20c>
			success = true;
 8013678:	2301      	movs	r3, #1
 801367a:	f88d 30a8 	strb.w	r3, [sp, #168]	@ 0xa8
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 801367e:	7962      	ldrb	r2, [r4, #5]
 8013680:	2a00      	cmp	r2, #0
 8013682:	f000 8088 	beq.w	8013796 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x302>
 8013686:	88e1      	ldrh	r1, [r4, #6]
 8013688:	2900      	cmp	r1, #0
 801368a:	d17c      	bne.n	8013786 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2f2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801368c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013690:	1a9b      	subs	r3, r3, r2
 8013692:	aa06      	add	r2, sp, #24
				*length = register_vector->size();
 8013694:	b29b      	uxth	r3, r3
 8013696:	f8ad 301a 	strh.w	r3, [sp, #26]
					for (uint16_t index = 0; index < *length; index++) {
 801369a:	b288      	uxth	r0, r1
 801369c:	4283      	cmp	r3, r0
 801369e:	d86b      	bhi.n	8013778 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2e4>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80136a0:	68e3      	ldr	r3, [r4, #12]
 80136a2:	b113      	cbz	r3, 80136aa <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x216>
			osSemaphoreRelease(*(target_register->register_semaphore));
 80136a4:	6818      	ldr	r0, [r3, #0]
 80136a6:	f7f9 fc13 	bl	800ced0 <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 80136aa:	6838      	ldr	r0, [r7, #0]
 80136ac:	f7f9 fc10 	bl	800ced0 <osSemaphoreRelease>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 80136b0:	a924      	add	r1, sp, #144	@ 0x90
 80136b2:	4628      	mov	r0, r5
 80136b4:	f7fd fd52 	bl	801115c <_ZN14MessageElementC1ERKS_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 80136b8:	2300      	movs	r3, #0
 80136ba:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 80136be:	930c      	str	r3, [sp, #48]	@ 0x30
	if (not element.element_register.isArray) {
 80136c0:	f89d 30ab 	ldrb.w	r3, [sp, #171]	@ 0xab
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d16d      	bne.n	80137a4 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x310>
		vector = std::vector<T>{*data};
 80136c8:	f89d 3018 	ldrb.w	r3, [sp, #24]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80136cc:	2001      	movs	r0, #1
 80136ce:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80136d2:	f7fc feee 	bl	80104b2 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 80136d6:	f10d 0135 	add.w	r1, sp, #53	@ 0x35
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80136da:	1c43      	adds	r3, r0, #1
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80136dc:	4602      	mov	r2, r0
 80136de:	9010      	str	r0, [sp, #64]	@ 0x40
 80136e0:	a80d      	add	r0, sp, #52	@ 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80136e2:	9312      	str	r3, [sp, #72]	@ 0x48
 80136e4:	f7ff fd02 	bl	80130ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
		vector = std::vector<T>(data, data + element.element_register.length);
 80136e8:	a910      	add	r1, sp, #64	@ 0x40
	  this->_M_impl._M_finish =
 80136ea:	9011      	str	r0, [sp, #68]	@ 0x44
 80136ec:	a80a      	add	r0, sp, #40	@ 0x28
 80136ee:	f7fd fbf4 	bl	8010eda <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>
      }
 80136f2:	a810      	add	r0, sp, #64	@ 0x40
 80136f4:	f7fd fbe7 	bl	8010ec6 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 80136f8:	a82d      	add	r0, sp, #180	@ 0xb4
	: _M_start(), _M_finish(), _M_end_of_storage()
 80136fa:	2400      	movs	r4, #0
      }
 80136fc:	f7ed f9f0 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	data = BuildVector<T>(register_read_vector_cast);
 8013700:	a90a      	add	r1, sp, #40	@ 0x28
 8013702:	a810      	add	r0, sp, #64	@ 0x40
 8013704:	f7ff fcfe 	bl	8013104 <_ZNSt6vectorIaSaIaEEC1ERKS1_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013708:	940f      	str	r4, [sp, #60]	@ 0x3c
      : _M_current(__i) { }
 801370a:	e9dd 7910 	ldrd	r7, r9, [sp, #64]	@ 0x40
 801370e:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
    for (T input : inputs) {
 8013712:	45b9      	cmp	r9, r7
 8013714:	d16f      	bne.n	80137f6 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x362>
	data = BuildVector<T>(register_read_vector_cast);
 8013716:	a90d      	add	r1, sp, #52	@ 0x34
 8013718:	a807      	add	r0, sp, #28
 801371a:	f7fd f922 	bl	8010962 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 801371e:	a80d      	add	r0, sp, #52	@ 0x34
 8013720:	f7ed f9de 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013724:	a810      	add	r0, sp, #64	@ 0x40
 8013726:	f7fd fbce 	bl	8010ec6 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 801372a:	a80a      	add	r0, sp, #40	@ 0x28
 801372c:	f7fd fbcb 	bl	8010ec6 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8013730:	e71e      	b.n	8013570 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xdc>
				*callback_output = output;
 8013732:	2200      	movs	r2, #0
 8013734:	ab06      	add	r3, sp, #24
 8013736:	6013      	str	r3, [r2, #0]
			if (callbacks.read != NULL) {
 8013738:	2e00      	cmp	r6, #0
 801373a:	d098      	beq.n	801366e <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x1da>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 801373c:	f10d 031a 	add.w	r3, sp, #26
 8013740:	4659      	mov	r1, fp
 8013742:	9805      	ldr	r0, [sp, #20]
 8013744:	47b0      	blx	r6
 8013746:	f88d 00a8 	strb.w	r0, [sp, #168]	@ 0xa8
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 801374a:	7963      	ldrb	r3, [r4, #5]
 801374c:	b143      	cbz	r3, 8013760 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2cc>
 801374e:	88e3      	ldrh	r3, [r4, #6]
 8013750:	b10b      	cbz	r3, 8013756 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2c2>
					*length = 1;
 8013752:	f8ad 301a 	strh.w	r3, [sp, #26]
					for (uint16_t index = 0; index < *length; index++) {
 8013756:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801375a:	a906      	add	r1, sp, #24
 801375c:	2300      	movs	r3, #0
 801375e:	e007      	b.n	8013770 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2dc>
					*length = 1;
 8013760:	2301      	movs	r3, #1
 8013762:	e7f6      	b.n	8013752 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2be>
						output[index] = (*callback_output )[index];
 8013764:	2200      	movs	r2, #0
 8013766:	6812      	ldr	r2, [r2, #0]
 8013768:	5cd2      	ldrb	r2, [r2, r3]
 801376a:	3301      	adds	r3, #1
 801376c:	f801 2b01 	strb.w	r2, [r1], #1
					for (uint16_t index = 0; index < *length; index++) {
 8013770:	b29a      	uxth	r2, r3
 8013772:	4290      	cmp	r0, r2
 8013774:	d8f6      	bhi.n	8013764 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2d0>
 8013776:	e77a      	b.n	801366e <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x1da>
						output[index] = (*register_vector)[index];
 8013778:	f8d9 0000 	ldr.w	r0, [r9]
 801377c:	5640      	ldrsb	r0, [r0, r1]
 801377e:	3101      	adds	r1, #1
 8013780:	f802 0b01 	strb.w	r0, [r2], #1
					for (uint16_t index = 0; index < *length; index++) {
 8013784:	e789      	b.n	801369a <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x206>
				*length = target_register->register_info.length;
 8013786:	f8ad 101a 	strh.w	r1, [sp, #26]
 801378a:	aa06      	add	r2, sp, #24
 801378c:	4449      	add	r1, r9
 801378e:	4648      	mov	r0, r9
 8013790:	f7ff fcac 	bl	80130ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8013794:	e784      	b.n	80136a0 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20c>
				*length = 1;
 8013796:	f8ad 301a 	strh.w	r3, [sp, #26]
					*output = *callbacks.pointer;
 801379a:	f999 3000 	ldrsb.w	r3, [r9]
 801379e:	f88d 3018 	strb.w	r3, [sp, #24]
 80137a2:	e77d      	b.n	80136a0 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20c>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 80137a4:	f8bd 40ac 	ldrh.w	r4, [sp, #172]	@ 0xac
 80137a8:	b154      	cbz	r4, 80137c0 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x32c>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80137aa:	4620      	mov	r0, r4
 80137ac:	f7fc fe81 	bl	80104b2 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80137b0:	1903      	adds	r3, r0, r4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80137b2:	4602      	mov	r2, r0
 80137b4:	9010      	str	r0, [sp, #64]	@ 0x40
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80137b6:	9312      	str	r3, [sp, #72]	@ 0x48
			      _Category>::__copy_m(__first, __last, __result);
 80137b8:	ab06      	add	r3, sp, #24
 80137ba:	1919      	adds	r1, r3, r4
 80137bc:	4618      	mov	r0, r3
 80137be:	e791      	b.n	80136e4 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x250>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80137c0:	e9dd 9b06 	ldrd	r9, fp, [sp, #24]
	  if (__xlen > capacity())
 80137c4:	ebbb 0709 	subs.w	r7, fp, r9
 80137c8:	d00f      	beq.n	80137ea <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x356>
	  pointer __result = this->_M_allocate(__n);
 80137ca:	4638      	mov	r0, r7
 80137cc:	f7fc fe71 	bl	80104b2 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 80137d0:	4604      	mov	r4, r0
 80137d2:	4602      	mov	r2, r0
 80137d4:	4659      	mov	r1, fp
 80137d6:	4648      	mov	r0, r9
 80137d8:	f7ff fc88 	bl	80130ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 80137dc:	940a      	str	r4, [sp, #40]	@ 0x28
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80137de:	443c      	add	r4, r7
 80137e0:	940c      	str	r4, [sp, #48]	@ 0x30
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 80137e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80137e4:	443b      	add	r3, r7
 80137e6:	930b      	str	r3, [sp, #44]	@ 0x2c
      return *this;
 80137e8:	e786      	b.n	80136f8 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x264>
 80137ea:	463a      	mov	r2, r7
 80137ec:	4659      	mov	r1, fp
 80137ee:	4648      	mov	r0, r9
 80137f0:	f7ff fc7c 	bl	80130ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80137f4:	e7f5      	b.n	80137e2 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x34e>
    for (T input : inputs) {
 80137f6:	f917 3b01 	ldrsb.w	r3, [r7], #1
      { emplace_back(std::move(__x)); }
 80137fa:	f10d 0119 	add.w	r1, sp, #25
 80137fe:	4628      	mov	r0, r5
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013800:	942c      	str	r4, [sp, #176]	@ 0xb0
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8013802:	f88d 3019 	strb.w	r3, [sp, #25]
 8013806:	e9cd 442a 	strd	r4, r4, [sp, #168]	@ 0xa8
      { emplace_back(std::move(__x)); }
 801380a:	f7fd fb95 	bl	8010f38 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
        data.insert(data.end(), single.begin(), single.end());
 801380e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013810:	a80d      	add	r0, sp, #52	@ 0x34
 8013812:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8013816:	f7fe fea3 	bl	8012560 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 801381a:	4628      	mov	r0, r5
 801381c:	f7ed f960 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8013820:	e777      	b.n	8013712 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x27e>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8013822:	2400      	movs	r4, #0
 8013824:	e6d5      	b.n	80135d2 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x13e>

08013826 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8013826:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013828:	461c      	mov	r4, r3
 801382a:	b08f      	sub	sp, #60	@ 0x3c
	if (not element.ack && element.command) {
 801382c:	799b      	ldrb	r3, [r3, #6]
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 801382e:	4605      	mov	r5, r0
 8013830:	4617      	mov	r7, r2
 8013832:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
	if (not element.ack && element.command) {
 8013836:	b9cb      	cbnz	r3, 801386c <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x46>
 8013838:	79e3      	ldrb	r3, [r4, #7]
		return ProcessCommand<T>(message, response, element, start_index);
 801383a:	a803      	add	r0, sp, #12
	if (not element.ack && element.command) {
 801383c:	b323      	cbz	r3, 8013888 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x62>
		return ProcessCommand<T>(message, response, element, start_index);
 801383e:	f7fd fca0 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8013842:	4621      	mov	r1, r4
 8013844:	a808      	add	r0, sp, #32
 8013846:	f7fd fc89 	bl	801115c <_ZN14MessageElementC1ERKS_>
 801384a:	ab08      	add	r3, sp, #32
 801384c:	463a      	mov	r2, r7
 801384e:	a903      	add	r1, sp, #12
 8013850:	4628      	mov	r0, r5
 8013852:	9600      	str	r6, [sp, #0]
 8013854:	f7ff fe1e 	bl	8013494 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt>
		return ProcessSubscriber<T>(message, element, start_index);
 8013858:	4604      	mov	r4, r0
 801385a:	a80b      	add	r0, sp, #44	@ 0x2c
 801385c:	f7ed f940 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013860:	a804      	add	r0, sp, #16
 8013862:	f7ed f93d 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8013866:	4620      	mov	r0, r4
 8013868:	b00f      	add	sp, #60	@ 0x3c
 801386a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ProcessService<T>(message, element, start_index);
 801386c:	a803      	add	r0, sp, #12
 801386e:	f7fd fc88 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8013872:	4621      	mov	r1, r4
 8013874:	a808      	add	r0, sp, #32
 8013876:	f7fd fc71 	bl	801115c <_ZN14MessageElementC1ERKS_>
 801387a:	4633      	mov	r3, r6
 801387c:	aa08      	add	r2, sp, #32
 801387e:	a903      	add	r1, sp, #12
 8013880:	4628      	mov	r0, r5
 8013882:	f7fe fa8c 	bl	8011d9e <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt>
 8013886:	e7e7      	b.n	8013858 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x32>
		return ProcessSubscriber<T>(message, element, start_index);
 8013888:	f7fd fc7b 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 801388c:	4621      	mov	r1, r4
 801388e:	a808      	add	r0, sp, #32
 8013890:	f7fd fc64 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8013894:	4633      	mov	r3, r6
 8013896:	aa08      	add	r2, sp, #32
 8013898:	a903      	add	r1, sp, #12
 801389a:	4628      	mov	r0, r5
 801389c:	f7fe f9fd 	bl	8011c9a <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt>
 80138a0:	e7da      	b.n	8013858 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x32>

080138a2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_>:
 80138a2:	4603      	mov	r3, r0
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 80138a4:	b510      	push	{r4, lr}
	  if (__n > 0)
 80138a6:	b179      	cbz	r1, 80138c8 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_+0x26>
 80138a8:	2200      	movs	r2, #0
      if (__n <= 0)
 80138aa:	1e4c      	subs	r4, r1, #1
 80138ac:	f843 2b04 	str.w	r2, [r3], #4
 80138b0:	d00a      	beq.n	80138c8 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_+0x26>
      std::__fill_a(__first, __first + __n, __value);
 80138b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	*__first = __tmp;
 80138b6:	2100      	movs	r1, #0
 80138b8:	1a24      	subs	r4, r4, r0
 80138ba:	4618      	mov	r0, r3
 80138bc:	3c04      	subs	r4, #4
 80138be:	4622      	mov	r2, r4
 80138c0:	f00b fb3a 	bl	801ef38 <memset>
 80138c4:	4603      	mov	r3, r0
 80138c6:	4423      	add	r3, r4
	}
 80138c8:	4618      	mov	r0, r3
 80138ca:	bd10      	pop	{r4, pc}

080138cc <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 80138cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138d0:	4604      	mov	r4, r0
      if (__n != 0)
 80138d2:	460e      	mov	r6, r1
 80138d4:	b171      	cbz	r1, 80138f4 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x28>
					 - this->_M_impl._M_finish);
 80138d6:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80138d8:	e9d0 8200 	ldrd	r8, r2, [r0]
 80138dc:	1a9b      	subs	r3, r3, r2
 80138de:	eba2 0a08 	sub.w	sl, r2, r8
	  if (__navail >= __n)
 80138e2:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 80138e6:	ea4f 07aa 	mov.w	r7, sl, asr #2
 80138ea:	d805      	bhi.n	80138f8 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x2c>
	__uninit_default_n(__first, __n);
 80138ec:	4610      	mov	r0, r2
 80138ee:	f7ff ffd8 	bl	80138a2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_>
	      this->_M_impl._M_finish =
 80138f2:	6060      	str	r0, [r4, #4]
    }
 80138f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		_M_check_len(__n, "vector::_M_default_append");
 80138f8:	4a13      	ldr	r2, [pc, #76]	@ (8013948 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x7c>)
 80138fa:	f7fd fbeb 	bl	80110d4 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 80138fe:	4681      	mov	r9, r0
	      pointer __new_start(this->_M_allocate(__len));
 8013900:	f7fc fdc5 	bl	801048e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 8013904:	4631      	mov	r1, r6
 8013906:	4605      	mov	r5, r0
 8013908:	4450      	add	r0, sl
 801390a:	f7ff ffca 	bl	80138a2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_>
      if (__count > 0)
 801390e:	f1ba 0f00 	cmp.w	sl, #0
 8013912:	d00c      	beq.n	801392e <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x62>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013914:	4652      	mov	r2, sl
 8013916:	4641      	mov	r1, r8
 8013918:	4628      	mov	r0, r5
 801391a:	f00b faf3 	bl	801ef04 <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 801391e:	68a1      	ldr	r1, [r4, #8]
 8013920:	4640      	mov	r0, r8
 8013922:	eba1 0108 	sub.w	r1, r1, r8
 8013926:	1089      	asrs	r1, r1, #2
 8013928:	f7fc fdae 	bl	8010488 <_ZNSt12_Vector_baseIP21CommunicationProtocolSaIS1_EE13_M_deallocateEPS1_j.part.0>
 801392c:	e002      	b.n	8013934 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x68>
	if (__p)
 801392e:	f1b8 0f00 	cmp.w	r8, #0
 8013932:	d1f4      	bne.n	801391e <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x52>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8013934:	4437      	add	r7, r6
	      this->_M_impl._M_start = __new_start;
 8013936:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8013938:	eb05 0787 	add.w	r7, r5, r7, lsl #2
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 801393c:	eb05 0589 	add.w	r5, r5, r9, lsl #2
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8013940:	6067      	str	r7, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8013942:	60a5      	str	r5, [r4, #8]
    }
 8013944:	e7d6      	b.n	80138f4 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x28>
 8013946:	bf00      	nop
 8013948:	0801f496 	.word	0x0801f496

0801394c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
 801394c:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801394e:	4613      	mov	r3, r2
 8013950:	b510      	push	{r4, lr}
	  const ptrdiff_t _Num = __last - __first;
 8013952:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
 8013956:	d005      	beq.n	8013964 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8013958:	4601      	mov	r1, r0
 801395a:	4622      	mov	r2, r4
 801395c:	4618      	mov	r0, r3
 801395e:	f00b fad1 	bl	801ef04 <memmove>
 8013962:	4603      	mov	r3, r0
	}
 8013964:	1918      	adds	r0, r3, r4
 8013966:	bd10      	pop	{r4, pc}

08013968 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8013968:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801396a:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 801396e:	4604      	mov	r4, r0
 8013970:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013972:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013974:	2300      	movs	r3, #0
 8013976:	e9c0 3300 	strd	r3, r3, [r0]
 801397a:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 801397c:	10b0      	asrs	r0, r6, #2
 801397e:	f7fc fd86 	bl	801048e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013982:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8013984:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013986:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8013988:	e9c4 0000 	strd	r0, r0, [r4]
			      _Category>::__copy_m(__first, __last, __result);
 801398c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013990:	f7ff ffdc 	bl	801394c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 8013994:	6060      	str	r0, [r4, #4]
      }
 8013996:	4620      	mov	r0, r4
 8013998:	bd70      	pop	{r4, r5, r6, pc}

0801399a <_ZN9Registers13WriteRegisterIfEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 801399a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801399e:	b085      	sub	sp, #20
 80139a0:	4606      	mov	r6, r0
 80139a2:	4688      	mov	r8, r1
 80139a4:	461f      	mov	r7, r3
 80139a6:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80139aa:	f04f 31ff 	mov.w	r1, #4294967295
 80139ae:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 80139b0:	4615      	mov	r5, r2
 80139b2:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80139b4:	f7f9 fa58 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80139b8:	f10d 020f 	add.w	r2, sp, #15
 80139bc:	4641      	mov	r1, r8
 80139be:	4630      	mov	r0, r6
 80139c0:	f005 ff4f 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80139c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80139c8:	4604      	mov	r4, r0
	if (!success) {
 80139ca:	b933      	cbnz	r3, 80139da <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x40>
		osSemaphoreRelease(RegistersSemaphore);
 80139cc:	6830      	ldr	r0, [r6, #0]
 80139ce:	f7f9 fa7f 	bl	800ced0 <osSemaphoreRelease>
		return false;
 80139d2:	2000      	movs	r0, #0
}
 80139d4:	b005      	add	sp, #20
 80139d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 80139da:	f10d 000f 	add.w	r0, sp, #15
 80139de:	f7fc fd85 	bl	80104ec <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 80139e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d0f0      	beq.n	80139cc <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
	if (target_register->register_info.type != registered_type) {
 80139ea:	7923      	ldrb	r3, [r4, #4]
 80139ec:	4283      	cmp	r3, r0
 80139ee:	d1ed      	bne.n	80139cc <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 80139f0:	3304      	adds	r3, #4
 80139f2:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80139f6:	2800      	cmp	r0, #0
 80139f8:	d0e8      	beq.n	80139cc <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
	if (target_register->access.write) {
 80139fa:	7a23      	ldrb	r3, [r4, #8]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d0e5      	beq.n	80139cc <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
		success = false;
 8013a00:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8013a02:	8961      	ldrh	r1, [r4, #10]
		success = false;
 8013a04:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8013a08:	f7fc f944 	bl	800fc94 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8013a0c:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8013a0e:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8013a12:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8013a16:	b133      	cbz	r3, 8013a26 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x8c>
 8013a18:	68e3      	ldr	r3, [r4, #12]
 8013a1a:	b123      	cbz	r3, 8013a26 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x8c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8013a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8013a20:	6818      	ldr	r0, [r3, #0]
 8013a22:	f7f9 fa21 	bl	800ce68 <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 8013a26:	7823      	ldrb	r3, [r4, #0]
 8013a28:	b1eb      	cbz	r3, 8013a66 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xcc>
			success = true;
 8013a2a:	2301      	movs	r3, #1
 8013a2c:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8013a30:	7963      	ldrb	r3, [r4, #5]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d04d      	beq.n	8013ad2 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x138>
 8013a36:	88e1      	ldrh	r1, [r4, #6]
 8013a38:	2900      	cmp	r1, #0
 8013a3a:	d143      	bne.n	8013ac4 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x12a>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8013a3c:	e9db 3100 	ldrd	r3, r1, [fp]
 8013a40:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 8013a42:	bf18      	it	ne
 8013a44:	f8cb 3004 	strne.w	r3, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013a48:	f8db 0004 	ldr.w	r0, [fp, #4]
 8013a4c:	1ac1      	subs	r1, r0, r3
 8013a4e:	1089      	asrs	r1, r1, #2
	if (__new_size > size())
 8013a50:	428f      	cmp	r7, r1
 8013a52:	d925      	bls.n	8013aa0 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x106>
	  _M_default_append(__new_size - size());
 8013a54:	1a79      	subs	r1, r7, r1
 8013a56:	4658      	mov	r0, fp
 8013a58:	f7ff ff38 	bl	80138cc <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>
 8013a5c:	4628      	mov	r0, r5
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8013a5e:	2300      	movs	r3, #0
				for (uint16_t index = 0; index < length; index++) {
 8013a60:	b299      	uxth	r1, r3
 8013a62:	42b9      	cmp	r1, r7
 8013a64:	d324      	bcc.n	8013ab0 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x116>
		if (target_register->mode.callbacks) {
 8013a66:	7863      	ldrb	r3, [r4, #1]
 8013a68:	b16b      	cbz	r3, 8013a86 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xec>
			if (callbacks.write != NULL) {
 8013a6a:	f1b9 0f00 	cmp.w	r9, #0
 8013a6e:	d00a      	beq.n	8013a86 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xec>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8013a70:	7963      	ldrb	r3, [r4, #5]
 8013a72:	b393      	cbz	r3, 8013ada <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x140>
 8013a74:	88e3      	ldrh	r3, [r4, #6]
 8013a76:	b903      	cbnz	r3, 8013a7a <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xe0>
					success = callbacks.write(callbacks.context, ID, value, length);
 8013a78:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 8013a7a:	462a      	mov	r2, r5
 8013a7c:	4641      	mov	r1, r8
 8013a7e:	4650      	mov	r0, sl
 8013a80:	47c8      	blx	r9
 8013a82:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8013a86:	9b01      	ldr	r3, [sp, #4]
 8013a88:	b123      	cbz	r3, 8013a94 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xfa>
 8013a8a:	68e3      	ldr	r3, [r4, #12]
 8013a8c:	b113      	cbz	r3, 8013a94 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xfa>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8013a8e:	6818      	ldr	r0, [r3, #0]
 8013a90:	f7f9 fa1e 	bl	800ced0 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 8013a94:	6830      	ldr	r0, [r6, #0]
 8013a96:	f7f9 fa1b 	bl	800ced0 <osSemaphoreRelease>
		return success;
 8013a9a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8013a9e:	e799      	b.n	80139d4 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x3a>
	else if (__new_size < size())
 8013aa0:	d2dc      	bcs.n	8013a5c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc2>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8013aa2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8013aa6:	4298      	cmp	r0, r3
 8013aa8:	d0d8      	beq.n	8013a5c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc2>
	    this->_M_impl._M_finish = __pos;
 8013aaa:	f8cb 3004 	str.w	r3, [fp, #4]
 8013aae:	e7d5      	b.n	8013a5c <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc2>
					(*register_vector)[index] = value[index];
 8013ab0:	f8db 1000 	ldr.w	r1, [fp]
 8013ab4:	f850 cb04 	ldr.w	ip, [r0], #4
 8013ab8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013abc:	3301      	adds	r3, #1
 8013abe:	f8c1 c000 	str.w	ip, [r1]
				for (uint16_t index = 0; index < length; index++) {
 8013ac2:	e7cd      	b.n	8013a60 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc6>
 8013ac4:	465a      	mov	r2, fp
 8013ac6:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8013aca:	4628      	mov	r0, r5
 8013acc:	f7ff ff3e 	bl	801394c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8013ad0:	e7c9      	b.n	8013a66 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xcc>
				*(callbacks.pointer) = *value;
 8013ad2:	682b      	ldr	r3, [r5, #0]
 8013ad4:	f8cb 3000 	str.w	r3, [fp]
 8013ad8:	e7c5      	b.n	8013a66 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xcc>
					success = callbacks.write(callbacks.context, ID, value, 1);
 8013ada:	2301      	movs	r3, #1
 8013adc:	e7cd      	b.n	8013a7a <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xe0>

08013ade <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8013ade:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ae2:	b091      	sub	sp, #68	@ 0x44
 8013ae4:	4605      	mov	r5, r0
 8013ae6:	4691      	mov	r9, r2
 8013ae8:	4608      	mov	r0, r1
 8013aea:	af02      	add	r7, sp, #8
 8013aec:	469a      	mov	sl, r3
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8013aee:	3104      	adds	r1, #4
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8013af0:	f8d7 b060 	ldr.w	fp, [r7, #96]	@ 0x60
 8013af4:	f107 060b 	add.w	r6, r7, #11
 8013af8:	f8b7 4064 	ldrh.w	r4, [r7, #100]	@ 0x64
	if (not element.element_register.isArray) {
 8013afc:	f89b 8003 	ldrb.w	r8, [fp, #3]
 8013b00:	f1b8 0f00 	cmp.w	r8, #0
 8013b04:	d177      	bne.n	8013bf6 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x118>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8013b06:	f107 0020 	add.w	r0, r7, #32
 8013b0a:	f7ed f899 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8013b0e:	4632      	mov	r2, r6
 8013b10:	4621      	mov	r1, r4
 8013b12:	f107 0020 	add.w	r0, r7, #32
 8013b16:	f7fc fdd3 	bl	80106c0 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 8013b1a:	f107 0020 	add.w	r0, r7, #32
 8013b1e:	ed87 0a05 	vstr	s0, [r7, #20]
 8013b22:	f7ec ffdd 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8013b26:	7afb      	ldrb	r3, [r7, #11]
 8013b28:	b153      	cbz	r3, 8013b40 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x62>
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	f8bb 1000 	ldrh.w	r1, [fp]
 8013b30:	f107 0214 	add.w	r2, r7, #20
 8013b34:	9300      	str	r3, [sp, #0]
 8013b36:	4643      	mov	r3, r8
 8013b38:	6868      	ldr	r0, [r5, #4]
 8013b3a:	f7ff ff2e 	bl	801399a <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 8013b3e:	72f8      	strb	r0, [r7, #11]
		length_to_extract = 1;
 8013b40:	f04f 0801 	mov.w	r8, #1
	if (success)
 8013b44:	7afb      	ldrb	r3, [r7, #11]
		response_content.data = std::vector<uint8_t>{OK};
 8013b46:	f10a 060c 	add.w	r6, sl, #12
 8013b4a:	f107 0214 	add.w	r2, r7, #20
 8013b4e:	f107 010c 	add.w	r1, r7, #12
	if (success)
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	f000 80d0 	beq.w	8013cf8 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x21a>
		response_content.data = std::vector<uint8_t>{OK};
 8013b58:	2300      	movs	r3, #0
 8013b5a:	723b      	strb	r3, [r7, #8]
 8013b5c:	f107 0308 	add.w	r3, r7, #8
 8013b60:	60fb      	str	r3, [r7, #12]
 8013b62:	2301      	movs	r3, #1
 8013b64:	613b      	str	r3, [r7, #16]
 8013b66:	4613      	mov	r3, r2
 8013b68:	c906      	ldmia	r1, {r1, r2}
		response_content.data = std::vector<uint8_t>{ERROR};
 8013b6a:	f107 0020 	add.w	r0, r7, #32
 8013b6e:	f7ed f90b 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8013b72:	f107 0120 	add.w	r1, r7, #32
 8013b76:	4630      	mov	r0, r6
 8013b78:	f7fc fef3 	bl	8010962 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8013b7c:	f107 0020 	add.w	r0, r7, #32
 8013b80:	f7ec ffae 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content)) {
 8013b84:	4651      	mov	r1, sl
 8013b86:	f107 0020 	add.w	r0, r7, #32
 8013b8a:	f7fd fae7 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8013b8e:	f107 0220 	add.w	r2, r7, #32
 8013b92:	4649      	mov	r1, r9
 8013b94:	4628      	mov	r0, r5
 8013b96:	f7fe fd57 	bl	8012648 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8013b9a:	4606      	mov	r6, r0
 8013b9c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8013ba0:	f7ec ff9e 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013ba4:	bb06      	cbnz	r6, 8013be8 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x10a>
		Send(*response);
 8013ba6:	4649      	mov	r1, r9
 8013ba8:	f107 0020 	add.w	r0, r7, #32
 8013bac:	f7fd fae9 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8013bb0:	f107 0120 	add.w	r1, r7, #32
 8013bb4:	4628      	mov	r0, r5
 8013bb6:	f7fd fbd3 	bl	8011360 <_ZN13Communication4SendE13MessageHeader>
 8013bba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8013bbe:	f7ec ff8f 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8013bc2:	f109 0004 	add.w	r0, r9, #4
 8013bc6:	f7fc fee3 	bl	8010990 <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8013bca:	4651      	mov	r1, sl
 8013bcc:	f107 0020 	add.w	r0, r7, #32
 8013bd0:	f7fd fac4 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8013bd4:	f107 0220 	add.w	r2, r7, #32
 8013bd8:	4649      	mov	r1, r9
 8013bda:	4628      	mov	r0, r5
 8013bdc:	f7fe fd34 	bl	8012648 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8013be0:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8013be4:	f7ec ff7c 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return start_index + sizeof(T) * length_to_extract;
 8013be8:	eb04 0088 	add.w	r0, r4, r8, lsl #2
}
 8013bec:	373c      	adds	r7, #60	@ 0x3c
 8013bee:	b280      	uxth	r0, r0
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8013bf6:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 8013bfa:	f1b8 0f00 	cmp.w	r8, #0
 8013bfe:	d02a      	beq.n	8013c56 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x178>
		T values[length_to_extract];
 8013c00:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8013c04:	466a      	mov	r2, sp
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8013c06:	f8c7 d000 	str.w	sp, [r7]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8013c0a:	f107 0020 	add.w	r0, r7, #32
		T values[length_to_extract];
 8013c0e:	3307      	adds	r3, #7
 8013c10:	08db      	lsrs	r3, r3, #3
 8013c12:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8013c16:	469d      	mov	sp, r3
 8013c18:	ab02      	add	r3, sp, #8
 8013c1a:	607b      	str	r3, [r7, #4]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8013c1c:	f7ed f810 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8013c20:	9600      	str	r6, [sp, #0]
 8013c22:	4643      	mov	r3, r8
 8013c24:	4622      	mov	r2, r4
 8013c26:	f107 0120 	add.w	r1, r7, #32
 8013c2a:	6878      	ldr	r0, [r7, #4]
 8013c2c:	f7fd fdac 	bl	8011788 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8013c30:	f107 0020 	add.w	r0, r7, #32
 8013c34:	f7ec ff54 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8013c38:	7afb      	ldrb	r3, [r7, #11]
 8013c3a:	b14b      	cbz	r3, 8013c50 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x172>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 8013c3c:	2301      	movs	r3, #1
 8013c3e:	f8bb 1000 	ldrh.w	r1, [fp]
 8013c42:	9300      	str	r3, [sp, #0]
 8013c44:	2300      	movs	r3, #0
 8013c46:	687a      	ldr	r2, [r7, #4]
 8013c48:	6868      	ldr	r0, [r5, #4]
 8013c4a:	f7ff fea6 	bl	801399a <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 8013c4e:	72f8      	strb	r0, [r7, #11]
 8013c50:	f8d7 d000 	ldr.w	sp, [r7]
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8013c54:	e776      	b.n	8013b44 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x66>
		length_to_extract = message.payload[start_index];
 8013c56:	6843      	ldr	r3, [r0, #4]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8013c58:	f107 0020 	add.w	r0, r7, #32
		length_to_extract = message.payload[start_index];
 8013c5c:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8013c60:	3401      	adds	r4, #1
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8013c62:	f7ec ffed 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8013c66:	f107 0120 	add.w	r1, r7, #32
		start_index++;
 8013c6a:	b2a4      	uxth	r4, r4
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8013c6c:	4643      	mov	r3, r8
 8013c6e:	f107 0014 	add.w	r0, r7, #20
 8013c72:	9600      	str	r6, [sp, #0]
 8013c74:	4622      	mov	r2, r4
 8013c76:	f7fd fd29 	bl	80116cc <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8013c7a:	f107 0020 	add.w	r0, r7, #32
 8013c7e:	f7ec ff2f 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8013c82:	7afb      	ldrb	r3, [r7, #11]
 8013c84:	b1fb      	cbz	r3, 8013cc6 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e8>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 8013c86:	686e      	ldr	r6, [r5, #4]
 8013c88:	f107 0114 	add.w	r1, r7, #20
 8013c8c:	f8bb b000 	ldrh.w	fp, [fp]
 8013c90:	f107 0020 	add.w	r0, r7, #32
 8013c94:	f7ff fe68 	bl	8013968 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8013c98:	f04f 31ff 	mov.w	r1, #4294967295
 8013c9c:	6830      	ldr	r0, [r6, #0]
 8013c9e:	f7f9 f8e3 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8013ca2:	f107 020c 	add.w	r2, r7, #12
 8013ca6:	4659      	mov	r1, fp
 8013ca8:	4630      	mov	r0, r6
 8013caa:	f005 fdda 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8013cae:	7b3a      	ldrb	r2, [r7, #12]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8013cb0:	4603      	mov	r3, r0
		osSemaphoreRelease(RegistersSemaphore);
 8013cb2:	6830      	ldr	r0, [r6, #0]
	if (!success) {
 8013cb4:	b962      	cbnz	r2, 8013cd0 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1f2>
		osSemaphoreRelease(RegistersSemaphore);
 8013cb6:	f7f9 f90b 	bl	800ced0 <osSemaphoreRelease>
		return false;
 8013cba:	2000      	movs	r0, #0
 8013cbc:	72f8      	strb	r0, [r7, #11]
 8013cbe:	f107 0020 	add.w	r0, r7, #32
 8013cc2:	f7ee f96b 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8013cc6:	f107 0014 	add.w	r0, r7, #20
 8013cca:	f7ee f967 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8013cce:	e739      	b.n	8013b44 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x66>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 8013cd0:	795a      	ldrb	r2, [r3, #5]
 8013cd2:	2a00      	cmp	r2, #0
 8013cd4:	d0ef      	beq.n	8013cb6 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d8>
 8013cd6:	88db      	ldrh	r3, [r3, #6]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d1ec      	bne.n	8013cb6 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d8>
	osSemaphoreRelease(RegistersSemaphore);
 8013cdc:	f7f9 f8f8 	bl	800ced0 <osSemaphoreRelease>
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 8013ce0:	2101      	movs	r1, #1
 8013ce2:	4630      	mov	r0, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013ce4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8013ce8:	9100      	str	r1, [sp, #0]
 8013cea:	4659      	mov	r1, fp
 8013cec:	1a9b      	subs	r3, r3, r2
 8013cee:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8013cf2:	f7ff fe52 	bl	801399a <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 8013cf6:	e7e1      	b.n	8013cbc <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1de>
		response_content.data = std::vector<uint8_t>{ERROR};
 8013cf8:	23ff      	movs	r3, #255	@ 0xff
 8013cfa:	723b      	strb	r3, [r7, #8]
 8013cfc:	f107 0308 	add.w	r3, r7, #8
 8013d00:	617b      	str	r3, [r7, #20]
 8013d02:	2301      	movs	r3, #1
 8013d04:	61bb      	str	r3, [r7, #24]
 8013d06:	460b      	mov	r3, r1
 8013d08:	ca06      	ldmia	r2, {r1, r2}
 8013d0a:	e72e      	b.n	8013b6a <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x8c>

08013d0c <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8013d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d10:	468b      	mov	fp, r1
 8013d12:	b0b1      	sub	sp, #196	@ 0xc4
 8013d14:	4607      	mov	r7, r0
 8013d16:	4698      	mov	r8, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013d18:	2600      	movs	r6, #0
	response_content.ack = true;
 8013d1a:	f04f 0a01 	mov.w	sl, #1
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8013d1e:	4615      	mov	r5, r2
 8013d20:	f8bd 90e8 	ldrh.w	r9, [sp, #232]	@ 0xe8
 8013d24:	961d      	str	r6, [sp, #116]	@ 0x74
 8013d26:	ac2a      	add	r4, sp, #168	@ 0xa8
	response_content.ack = true;
 8013d28:	f8ad a066 	strh.w	sl, [sp, #102]	@ 0x66
	response_content.element_register = element.element_register;
 8013d2c:	e9d3 0100 	ldrd	r0, r1, [r3]
	response_content.access = element.access;
 8013d30:	7a1b      	ldrb	r3, [r3, #8]
	response_content.element_register = element.element_register;
 8013d32:	9018      	str	r0, [sp, #96]	@ 0x60
 8013d34:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
	CommunicationLED(leds, message.interface);
 8013d38:	6938      	ldr	r0, [r7, #16]
 8013d3a:	f89b 1000 	ldrb.w	r1, [fp]
	response_content.access = element.access;
 8013d3e:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 8013d42:	e9cd 661b 	strd	r6, r6, [sp, #108]	@ 0x6c
	CommunicationLED(leds, message.interface);
 8013d46:	f7fb f9a5 	bl	800f094 <_Z16CommunicationLEDP4LEDSh>
	if (element.access == WRITE) {
 8013d4a:	f898 3008 	ldrb.w	r3, [r8, #8]
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8013d4e:	4659      	mov	r1, fp
	if (element.access == WRITE) {
 8013d50:	bb1b      	cbnz	r3, 8013d9a <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x8e>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8013d52:	a81e      	add	r0, sp, #120	@ 0x78
 8013d54:	f7fd fa15 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8013d58:	a918      	add	r1, sp, #96	@ 0x60
 8013d5a:	a824      	add	r0, sp, #144	@ 0x90
 8013d5c:	f7fd f9fe 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8013d60:	4641      	mov	r1, r8
 8013d62:	4620      	mov	r0, r4
 8013d64:	f7fd f9fa 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8013d68:	ab24      	add	r3, sp, #144	@ 0x90
 8013d6a:	462a      	mov	r2, r5
 8013d6c:	a91e      	add	r1, sp, #120	@ 0x78
 8013d6e:	4638      	mov	r0, r7
 8013d70:	e9cd 4900 	strd	r4, r9, [sp]
 8013d74:	f7ff feb3 	bl	8013ade <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t>
 8013d78:	4681      	mov	r9, r0
      }
 8013d7a:	a82d      	add	r0, sp, #180	@ 0xb4
 8013d7c:	f7ec feb0 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013d80:	a827      	add	r0, sp, #156	@ 0x9c
 8013d82:	f7ec fead 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013d86:	a81f      	add	r0, sp, #124	@ 0x7c
 8013d88:	f7ec feaa 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013d8c:	a81b      	add	r0, sp, #108	@ 0x6c
 8013d8e:	f7ec fea7 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8013d92:	4648      	mov	r0, r9
 8013d94:	b031      	add	sp, #196	@ 0xc4
 8013d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ProcessRead<T>(message, response, response_content, element, start_index);
 8013d9a:	a813      	add	r0, sp, #76	@ 0x4c
 8013d9c:	f7fd f9f1 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8013da0:	a918      	add	r1, sp, #96	@ 0x60
 8013da2:	a81e      	add	r0, sp, #120	@ 0x78
 8013da4:	f7fd f9da 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8013da8:	4641      	mov	r1, r8
 8013daa:	a824      	add	r0, sp, #144	@ 0x90
 8013dac:	f7fd f9d6 	bl	801115c <_ZN14MessageElementC1ERKS_>
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 8013db0:	f8cd a000 	str.w	sl, [sp]
 8013db4:	f10d 0316 	add.w	r3, sp, #22
 8013db8:	aa06      	add	r2, sp, #24
 8013dba:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 8013dbe:	6878      	ldr	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013dc0:	9609      	str	r6, [sp, #36]	@ 0x24
 8013dc2:	e9cd 6607 	strd	r6, r6, [sp, #28]
 8013dc6:	f7fb ff77 	bl	800fcb8 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb>
	if (not *success)
 8013dca:	4680      	mov	r8, r0
 8013dcc:	2800      	cmp	r0, #0
 8013dce:	d040      	beq.n	8013e52 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x146>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8013dd0:	a924      	add	r1, sp, #144	@ 0x90
 8013dd2:	4620      	mov	r0, r4
 8013dd4:	f7fd f9c2 	bl	801115c <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 8013dd8:	f89d 30ab 	ldrb.w	r3, [sp, #171]	@ 0xab
 8013ddc:	960c      	str	r6, [sp, #48]	@ 0x30
 8013dde:	e9cd 660a 	strd	r6, r6, [sp, #40]	@ 0x28
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	f040 808c 	bne.w	8013f00 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x1f4>
		vector = std::vector<T>{*data};
 8013de8:	9b06      	ldr	r3, [sp, #24]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8013dea:	4650      	mov	r0, sl
 8013dec:	930d      	str	r3, [sp, #52]	@ 0x34
 8013dee:	f7fc fb4e 	bl	801048e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 8013df2:	a90e      	add	r1, sp, #56	@ 0x38
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013df4:	1d03      	adds	r3, r0, #4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8013df6:	4602      	mov	r2, r0
 8013df8:	9010      	str	r0, [sp, #64]	@ 0x40
 8013dfa:	a80d      	add	r0, sp, #52	@ 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013dfc:	9312      	str	r3, [sp, #72]	@ 0x48
 8013dfe:	f7ff fda5 	bl	801394c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
		vector = std::vector<T>(data, data + element.element_register.length);
 8013e02:	a910      	add	r1, sp, #64	@ 0x40
	  this->_M_impl._M_finish =
 8013e04:	9011      	str	r0, [sp, #68]	@ 0x44
 8013e06:	a80a      	add	r0, sp, #40	@ 0x28
 8013e08:	f7fd f87e 	bl	8010f08 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>
      }
 8013e0c:	a810      	add	r0, sp, #64	@ 0x40
 8013e0e:	f7ee f8c5 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8013e12:	a82d      	add	r0, sp, #180	@ 0xb4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013e14:	2600      	movs	r6, #0
      }
 8013e16:	f7ec fe63 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	data = BuildVector<T>(register_read_vector_cast);
 8013e1a:	a90a      	add	r1, sp, #40	@ 0x28
 8013e1c:	a810      	add	r0, sp, #64	@ 0x40
 8013e1e:	f7ff fda3 	bl	8013968 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
      : _M_current(__i) { }
 8013e22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013e24:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013e28:	960f      	str	r6, [sp, #60]	@ 0x3c
 8013e2a:	9302      	str	r3, [sp, #8]
 8013e2c:	e9cd 660d 	strd	r6, r6, [sp, #52]	@ 0x34
    for (T input : inputs) {
 8013e30:	9b02      	ldr	r3, [sp, #8]
 8013e32:	4553      	cmp	r3, sl
 8013e34:	f040 808e 	bne.w	8013f54 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x248>
	data = BuildVector<T>(register_read_vector_cast);
 8013e38:	a90d      	add	r1, sp, #52	@ 0x34
 8013e3a:	a807      	add	r0, sp, #28
 8013e3c:	f7fc fd91 	bl	8010962 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8013e40:	a80d      	add	r0, sp, #52	@ 0x34
 8013e42:	f7ec fe4d 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013e46:	a810      	add	r0, sp, #64	@ 0x40
 8013e48:	f7ee f8a8 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8013e4c:	a80a      	add	r0, sp, #40	@ 0x28
 8013e4e:	f7ee f8a5 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	response_content.data = ReadElement<T>(&element, &success);
 8013e52:	a821      	add	r0, sp, #132	@ 0x84
 8013e54:	a907      	add	r1, sp, #28
 8013e56:	f7fc fd84 	bl	8010962 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8013e5a:	a807      	add	r0, sp, #28
 8013e5c:	f7ec fe40 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not success) {
 8013e60:	f1b8 0f00 	cmp.w	r8, #0
 8013e64:	d115      	bne.n	8013e92 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x186>
		response_content.data = std::vector<uint8_t>{ERROR};
 8013e66:	22ff      	movs	r2, #255	@ 0xff
		response_content.command = true; // this is an error flag for a read ack
 8013e68:	2301      	movs	r3, #1
		response_content.data = std::vector<uint8_t>{ERROR};
 8013e6a:	4620      	mov	r0, r4
 8013e6c:	f88d 2028 	strb.w	r2, [sp, #40]	@ 0x28
 8013e70:	aa0a      	add	r2, sp, #40	@ 0x28
		response_content.command = true; // this is an error flag for a read ack
 8013e72:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
		response_content.data = std::vector<uint8_t>{ERROR};
 8013e76:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013e7a:	ab0d      	add	r3, sp, #52	@ 0x34
 8013e7c:	2201      	movs	r2, #1
 8013e7e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8013e80:	f7ec ff82 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8013e84:	a821      	add	r0, sp, #132	@ 0x84
 8013e86:	4621      	mov	r1, r4
 8013e88:	f7fc fd6b 	bl	8010962 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8013e8c:	4620      	mov	r0, r4
 8013e8e:	f7ec fe27 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8013e92:	a91e      	add	r1, sp, #120	@ 0x78
 8013e94:	4620      	mov	r0, r4
 8013e96:	f7fd f961 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8013e9a:	4622      	mov	r2, r4
 8013e9c:	4629      	mov	r1, r5
 8013e9e:	4638      	mov	r0, r7
 8013ea0:	f7fe fbd2 	bl	8012648 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8013ea4:	2800      	cmp	r0, #0
 8013ea6:	f040 8081 	bne.w	8013fac <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x2a0>
 8013eaa:	e9d5 3601 	ldrd	r3, r6, [r5, #4]
 8013eae:	1af6      	subs	r6, r6, r3
 8013eb0:	bf18      	it	ne
 8013eb2:	2601      	movne	r6, #1
 8013eb4:	a82d      	add	r0, sp, #180	@ 0xb4
 8013eb6:	f7ec fe13 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013eba:	b1ce      	cbz	r6, 8013ef0 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x1e4>
		Send(*response);
 8013ebc:	4629      	mov	r1, r5
 8013ebe:	4620      	mov	r0, r4
 8013ec0:	f7fd f95f 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8013ec4:	4621      	mov	r1, r4
 8013ec6:	4638      	mov	r0, r7
 8013ec8:	f7fd fa4a 	bl	8011360 <_ZN13Communication4SendE13MessageHeader>
 8013ecc:	a82b      	add	r0, sp, #172	@ 0xac
 8013ece:	f7ec fe07 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8013ed2:	1d28      	adds	r0, r5, #4
 8013ed4:	f7fc fd5c 	bl	8010990 <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8013ed8:	a91e      	add	r1, sp, #120	@ 0x78
 8013eda:	4620      	mov	r0, r4
 8013edc:	f7fd f93e 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8013ee0:	4622      	mov	r2, r4
 8013ee2:	4629      	mov	r1, r5
 8013ee4:	4638      	mov	r0, r7
 8013ee6:	f7fe fbaf 	bl	8012648 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8013eea:	a82d      	add	r0, sp, #180	@ 0xb4
 8013eec:	f7ec fdf8 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013ef0:	a827      	add	r0, sp, #156	@ 0x9c
 8013ef2:	f7ec fdf5 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013ef6:	a821      	add	r0, sp, #132	@ 0x84
 8013ef8:	f7ec fdf2 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013efc:	a814      	add	r0, sp, #80	@ 0x50
 8013efe:	e743      	b.n	8013d88 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x7c>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8013f00:	f8bd 00ac 	ldrh.w	r0, [sp, #172]	@ 0xac
 8013f04:	b150      	cbz	r0, 8013f1c <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x210>
		vector = std::vector<T>(data, data + element.element_register.length);
 8013f06:	0086      	lsls	r6, r0, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8013f08:	f7fc fac1 	bl	801048e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 8013f0c:	4602      	mov	r2, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013f0e:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8013f10:	9010      	str	r0, [sp, #64]	@ 0x40
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013f12:	9312      	str	r3, [sp, #72]	@ 0x48
 8013f14:	ab06      	add	r3, sp, #24
 8013f16:	1999      	adds	r1, r3, r6
 8013f18:	4618      	mov	r0, r3
 8013f1a:	e770      	b.n	8013dfe <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0xf2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013f1c:	e9dd b106 	ldrd	fp, r1, [sp, #24]
	  if (__xlen > capacity())
 8013f20:	ebb1 0a0b 	subs.w	sl, r1, fp
 8013f24:	d011      	beq.n	8013f4a <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x23e>
	  pointer __result = this->_M_allocate(__n);
 8013f26:	ea4f 00aa 	mov.w	r0, sl, asr #2
 8013f2a:	9102      	str	r1, [sp, #8]
 8013f2c:	f7fc faaf 	bl	801048e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 8013f30:	4606      	mov	r6, r0
 8013f32:	4602      	mov	r2, r0
 8013f34:	9902      	ldr	r1, [sp, #8]
 8013f36:	4658      	mov	r0, fp
 8013f38:	f7ff fd08 	bl	801394c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 8013f3c:	960a      	str	r6, [sp, #40]	@ 0x28
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8013f3e:	4456      	add	r6, sl
 8013f40:	960c      	str	r6, [sp, #48]	@ 0x30
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8013f42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f44:	4453      	add	r3, sl
 8013f46:	930b      	str	r3, [sp, #44]	@ 0x2c
      return *this;
 8013f48:	e763      	b.n	8013e12 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x106>
 8013f4a:	4652      	mov	r2, sl
 8013f4c:	4658      	mov	r0, fp
 8013f4e:	f7ff fcfd 	bl	801394c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8013f52:	e7f6      	b.n	8013f42 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x236>
    for (T input : inputs) {
 8013f54:	f85a 2b04 	ldr.w	r2, [sl], #4
    std::memcpy(&reinterpreted_input, &input, sizeof(T)); // this is mandatory to get rid of the memory alignment problem. A simple cast can't work here
 8013f58:	f04f 0b18 	mov.w	fp, #24
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013f5c:	962c      	str	r6, [sp, #176]	@ 0xb0
 8013f5e:	e9cd 662a 	strd	r6, r6, [sp, #168]	@ 0xa8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8013f62:	f1cb 0c20 	rsb	ip, fp, #32
 8013f66:	fa22 f10b 	lsr.w	r1, r2, fp
 8013f6a:	f1ab 0020 	sub.w	r0, fp, #32
	for (uint8_t index = 0; index < type_length; index++) {
 8013f6e:	f1ab 0b08 	sub.w	fp, fp, #8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8013f72:	fa06 fc0c 	lsl.w	ip, r6, ip
 8013f76:	9203      	str	r2, [sp, #12]
 8013f78:	fa26 f000 	lsr.w	r0, r6, r0
 8013f7c:	ea41 010c 	orr.w	r1, r1, ip
 8013f80:	4301      	orrs	r1, r0
      { emplace_back(std::move(__x)); }
 8013f82:	4620      	mov	r0, r4
 8013f84:	f88d 1015 	strb.w	r1, [sp, #21]
 8013f88:	f10d 0115 	add.w	r1, sp, #21
 8013f8c:	f7fc ffd4 	bl	8010f38 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	for (uint8_t index = 0; index < type_length; index++) {
 8013f90:	f11b 0f08 	cmn.w	fp, #8
 8013f94:	9a03      	ldr	r2, [sp, #12]
 8013f96:	d1e4      	bne.n	8013f62 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x256>
        data.insert(data.end(), single.begin(), single.end());
 8013f98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013f9a:	a80d      	add	r0, sp, #52	@ 0x34
 8013f9c:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8013fa0:	f7fe fade 	bl	8012560 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 8013fa4:	4620      	mov	r0, r4
 8013fa6:	f7ec fd9b 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8013faa:	e741      	b.n	8013e30 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x124>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8013fac:	2600      	movs	r6, #0
 8013fae:	e781      	b.n	8013eb4 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x1a8>

08013fb0 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8013fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fb2:	461c      	mov	r4, r3
 8013fb4:	b08f      	sub	sp, #60	@ 0x3c
	if (not element.ack && element.command) {
 8013fb6:	799b      	ldrb	r3, [r3, #6]
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8013fb8:	4605      	mov	r5, r0
 8013fba:	4617      	mov	r7, r2
 8013fbc:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
	if (not element.ack && element.command) {
 8013fc0:	b9cb      	cbnz	r3, 8013ff6 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x46>
 8013fc2:	79e3      	ldrb	r3, [r4, #7]
		return ProcessCommand<T>(message, response, element, start_index);
 8013fc4:	a803      	add	r0, sp, #12
	if (not element.ack && element.command) {
 8013fc6:	b323      	cbz	r3, 8014012 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x62>
		return ProcessCommand<T>(message, response, element, start_index);
 8013fc8:	f7fd f8db 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8013fcc:	4621      	mov	r1, r4
 8013fce:	a808      	add	r0, sp, #32
 8013fd0:	f7fd f8c4 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8013fd4:	ab08      	add	r3, sp, #32
 8013fd6:	463a      	mov	r2, r7
 8013fd8:	a903      	add	r1, sp, #12
 8013fda:	4628      	mov	r0, r5
 8013fdc:	9600      	str	r6, [sp, #0]
 8013fde:	f7ff fe95 	bl	8013d0c <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt>
		return ProcessSubscriber<T>(message, element, start_index);
 8013fe2:	4604      	mov	r4, r0
 8013fe4:	a80b      	add	r0, sp, #44	@ 0x2c
 8013fe6:	f7ec fd7b 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013fea:	a804      	add	r0, sp, #16
 8013fec:	f7ec fd78 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8013ff0:	4620      	mov	r0, r4
 8013ff2:	b00f      	add	sp, #60	@ 0x3c
 8013ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ProcessService<T>(message, element, start_index);
 8013ff6:	a803      	add	r0, sp, #12
 8013ff8:	f7fd f8c3 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8013ffc:	4621      	mov	r1, r4
 8013ffe:	a808      	add	r0, sp, #32
 8014000:	f7fd f8ac 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8014004:	4633      	mov	r3, r6
 8014006:	aa08      	add	r2, sp, #32
 8014008:	a903      	add	r1, sp, #12
 801400a:	4628      	mov	r0, r5
 801400c:	f7fd fc70 	bl	80118f0 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt>
 8014010:	e7e7      	b.n	8013fe2 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x32>
		return ProcessSubscriber<T>(message, element, start_index);
 8014012:	f7fd f8b6 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8014016:	4621      	mov	r1, r4
 8014018:	a808      	add	r0, sp, #32
 801401a:	f7fd f89f 	bl	801115c <_ZN14MessageElementC1ERKS_>
 801401e:	4633      	mov	r3, r6
 8014020:	aa08      	add	r2, sp, #32
 8014022:	a903      	add	r1, sp, #12
 8014024:	4628      	mov	r0, r5
 8014026:	f7fd fbde 	bl	80117e6 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt>
 801402a:	e7da      	b.n	8013fe2 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x32>

0801402c <_ZN13Communication12ParseMessageE13MessageHeader>:
void Communication::ParseMessage(MessageHeader message) {
 801402c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801402e:	b099      	sub	sp, #100	@ 0x64
	response.interface = message.interface;
 8014030:	780b      	ldrb	r3, [r1, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014032:	2400      	movs	r4, #0
void Communication::ParseMessage(MessageHeader message) {
 8014034:	4606      	mov	r6, r0
	response.interface = message.interface;
 8014036:	f88d 3008 	strb.w	r3, [sp, #8]
void Communication::ParseMessage(MessageHeader message) {
 801403a:	460d      	mov	r5, r1
	response.target_address = message.source_address;
 801403c:	7c4b      	ldrb	r3, [r1, #17]
 801403e:	9411      	str	r4, [sp, #68]	@ 0x44
 8014040:	9405      	str	r4, [sp, #20]
 8014042:	f88d 3018 	strb.w	r3, [sp, #24]
 8014046:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 801404a:	e9cd 4403 	strd	r4, r4, [sp, #12]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801404e:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8014052:	1a9b      	subs	r3, r3, r2
	while (index < message.payload.size()) {
 8014054:	429c      	cmp	r4, r3
 8014056:	d203      	bcs.n	8014060 <_ZN13Communication12ParseMessageE13MessageHeader+0x34>
		if (index + 1 >= (uint16_t) message.payload.size())
 8014058:	1c60      	adds	r0, r4, #1
 801405a:	b29b      	uxth	r3, r3
 801405c:	4298      	cmp	r0, r3
 801405e:	db0b      	blt.n	8014078 <_ZN13Communication12ParseMessageE13MessageHeader+0x4c>
	if (response.payload.size() > 0)
 8014060:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8014064:	429a      	cmp	r2, r3
 8014066:	d16b      	bne.n	8014140 <_ZN13Communication12ParseMessageE13MessageHeader+0x114>
      }
 8014068:	a803      	add	r0, sp, #12
 801406a:	f7ec fd39 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801406e:	a80f      	add	r0, sp, #60	@ 0x3c
 8014070:	f7ec fd36 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8014074:	b019      	add	sp, #100	@ 0x64
 8014076:	bdf0      	pop	{r4, r5, r6, r7, pc}
		element.ack = message.payload[index] & ACK_MASK;
 8014078:	5d13      	ldrb	r3, [r2, r4]
		element.element_register.address = (message.payload[index] & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)) << 8 | message.payload[index + 1];
 801407a:	5c12      	ldrb	r2, [r2, r0]
		bool success = FindRegister(message, &response, &element);
 801407c:	a812      	add	r0, sp, #72	@ 0x48
		element.ack = message.payload[index] & ACK_MASK;
 801407e:	09d9      	lsrs	r1, r3, #7
 8014080:	f88d 1036 	strb.w	r1, [sp, #54]	@ 0x36
		element.command = message.payload[index] & COMMAND_MASK;
 8014084:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8014088:	f88d 1037 	strb.w	r1, [sp, #55]	@ 0x37
		element.access = message.payload[index] & ACCESS_MASK;
 801408c:	f3c3 1140 	ubfx	r1, r3, #5, #1
		element.element_register.address = (message.payload[index] & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)) << 8 | message.payload[index + 1];
 8014090:	021b      	lsls	r3, r3, #8
		element.access = message.payload[index] & ACCESS_MASK;
 8014092:	f88d 1038 	strb.w	r1, [sp, #56]	@ 0x38
		bool success = FindRegister(message, &response, &element);
 8014096:	4629      	mov	r1, r5
		element.element_register.address = (message.payload[index] & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)) << 8 | message.payload[index + 1];
 8014098:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 801409c:	4313      	orrs	r3, r2
 801409e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
		bool success = FindRegister(message, &response, &element);
 80140a2:	f7fd f86e 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 80140a6:	ab0c      	add	r3, sp, #48	@ 0x30
 80140a8:	aa02      	add	r2, sp, #8
 80140aa:	a912      	add	r1, sp, #72	@ 0x48
 80140ac:	4630      	mov	r0, r6
 80140ae:	f7fe fb23 	bl	80126f8 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement>
 80140b2:	4607      	mov	r7, r0
 80140b4:	a813      	add	r0, sp, #76	@ 0x4c
 80140b6:	f7ec fd13 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not success) break;
 80140ba:	2f00      	cmp	r7, #0
 80140bc:	d0d0      	beq.n	8014060 <_ZN13Communication12ParseMessageE13MessageHeader+0x34>
		switch (element.element_register.type) {
 80140be:	f89d 3032 	ldrb.w	r3, [sp, #50]	@ 0x32
			index = ProcessElement<uint32_t>(message, &response, element, index + 2);
 80140c2:	3402      	adds	r4, #2
		switch (element.element_register.type) {
 80140c4:	2b04      	cmp	r3, #4
			index = ProcessElement<uint32_t>(message, &response, element, index + 2);
 80140c6:	b2a4      	uxth	r4, r4
		switch (element.element_register.type) {
 80140c8:	d01a      	beq.n	8014100 <_ZN13Communication12ParseMessageE13MessageHeader+0xd4>
 80140ca:	2b08      	cmp	r3, #8
 80140cc:	d028      	beq.n	8014120 <_ZN13Communication12ParseMessageE13MessageHeader+0xf4>
 80140ce:	2b02      	cmp	r3, #2
 80140d0:	d1bd      	bne.n	801404e <_ZN13Communication12ParseMessageE13MessageHeader+0x22>
			index = ProcessElement<uint32_t>(message, &response, element, index + 2);
 80140d2:	4629      	mov	r1, r5
 80140d4:	a807      	add	r0, sp, #28
 80140d6:	f7fd f854 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 80140da:	a90c      	add	r1, sp, #48	@ 0x30
 80140dc:	a812      	add	r0, sp, #72	@ 0x48
 80140de:	f7fd f83d 	bl	801115c <_ZN14MessageElementC1ERKS_>
 80140e2:	ab12      	add	r3, sp, #72	@ 0x48
 80140e4:	aa02      	add	r2, sp, #8
 80140e6:	a907      	add	r1, sp, #28
 80140e8:	4630      	mov	r0, r6
 80140ea:	9400      	str	r4, [sp, #0]
 80140ec:	f7fe ff76 	bl	8012fdc <_ZN13Communication14ProcessElementImEEt13MessageHeaderPS1_14MessageElementt>
			index = ProcessElement<float>(message, &response, element, index + 2);
 80140f0:	4604      	mov	r4, r0
 80140f2:	a815      	add	r0, sp, #84	@ 0x54
 80140f4:	f7ec fcf4 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80140f8:	a808      	add	r0, sp, #32
 80140fa:	f7ec fcf1 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			break;
 80140fe:	e7a6      	b.n	801404e <_ZN13Communication12ParseMessageE13MessageHeader+0x22>
			index = ProcessElement<int8_t>(message, &response, element, index + 2);
 8014100:	4629      	mov	r1, r5
 8014102:	a807      	add	r0, sp, #28
 8014104:	f7fd f83d 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8014108:	a90c      	add	r1, sp, #48	@ 0x30
 801410a:	a812      	add	r0, sp, #72	@ 0x48
 801410c:	f7fd f826 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8014110:	ab12      	add	r3, sp, #72	@ 0x48
 8014112:	aa02      	add	r2, sp, #8
 8014114:	a907      	add	r1, sp, #28
 8014116:	4630      	mov	r0, r6
 8014118:	9400      	str	r4, [sp, #0]
 801411a:	f7ff fb84 	bl	8013826 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt>
 801411e:	e7e7      	b.n	80140f0 <_ZN13Communication12ParseMessageE13MessageHeader+0xc4>
			index = ProcessElement<float>(message, &response, element, index + 2);
 8014120:	4629      	mov	r1, r5
 8014122:	a807      	add	r0, sp, #28
 8014124:	f7fd f82d 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8014128:	a90c      	add	r1, sp, #48	@ 0x30
 801412a:	a812      	add	r0, sp, #72	@ 0x48
 801412c:	f7fd f816 	bl	801115c <_ZN14MessageElementC1ERKS_>
 8014130:	ab12      	add	r3, sp, #72	@ 0x48
 8014132:	aa02      	add	r2, sp, #8
 8014134:	a907      	add	r1, sp, #28
 8014136:	4630      	mov	r0, r6
 8014138:	9400      	str	r4, [sp, #0]
 801413a:	f7ff ff39 	bl	8013fb0 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt>
 801413e:	e7d7      	b.n	80140f0 <_ZN13Communication12ParseMessageE13MessageHeader+0xc4>
		Send(response);
 8014140:	a902      	add	r1, sp, #8
 8014142:	a812      	add	r0, sp, #72	@ 0x48
 8014144:	f7fd f81d 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8014148:	a912      	add	r1, sp, #72	@ 0x48
 801414a:	4630      	mov	r0, r6
 801414c:	f7fd f908 	bl	8011360 <_ZN13Communication4SendE13MessageHeader>
 8014150:	a813      	add	r0, sp, #76	@ 0x4c
 8014152:	f7ec fcc5 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8014156:	e787      	b.n	8014068 <_ZN13Communication12ParseMessageE13MessageHeader+0x3c>

08014158 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>:
uint16_t Communication::Process(uint8_t ID, std::vector<uint8_t> data, bool* success) {
 8014158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801415c:	461c      	mov	r4, r3
 801415e:	b08e      	sub	sp, #56	@ 0x38
	uint16_t processed_length = 0;
 8014160:	2300      	movs	r3, #0
uint16_t Communication::Process(uint8_t ID, std::vector<uint8_t> data, bool* success) {
 8014162:	4616      	mov	r6, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 8014164:	4622      	mov	r2, r4
uint16_t Communication::Process(uint8_t ID, std::vector<uint8_t> data, bool* success) {
 8014166:	4605      	mov	r5, r0
 8014168:	4688      	mov	r8, r1
	uint16_t processed_length = 0;
 801416a:	f8ad 300e 	strh.w	r3, [sp, #14]
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 801416e:	f7fc fb6f 	bl	8010850 <_ZN13Communication12FindProtocolEhPb>
 8014172:	4607      	mov	r7, r0
	if (not *success)
 8014174:	7820      	ldrb	r0, [r4, #0]
 8014176:	2800      	cmp	r0, #0
 8014178:	d039      	beq.n	80141ee <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x96>
		MessageHeader message = protocol->DecodeProtocol(ID, data, &processed_length, success);
 801417a:	f10d 0a0e 	add.w	sl, sp, #14
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever); // TODO ADDED
 801417e:	f04f 31ff 	mov.w	r1, #4294967295
 8014182:	6828      	ldr	r0, [r5, #0]
 8014184:	f7f8 fe70 	bl	800ce68 <osSemaphoreAcquire>
	while (processed_length < data.size()) {// && processed_length < data.size()) {
 8014188:	f8bd 200e 	ldrh.w	r2, [sp, #14]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801418c:	e9d6 1300 	ldrd	r1, r3, [r6]
 8014190:	1a5b      	subs	r3, r3, r1
 8014192:	429a      	cmp	r2, r3
 8014194:	d226      	bcs.n	80141e4 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x8c>
		MessageHeader message = protocol->DecodeProtocol(ID, data, &processed_length, success);
 8014196:	683b      	ldr	r3, [r7, #0]
 8014198:	4631      	mov	r1, r6
 801419a:	a809      	add	r0, sp, #36	@ 0x24
 801419c:	f8d3 9000 	ldr.w	r9, [r3]
 80141a0:	f7ec fd4e 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80141a4:	ab09      	add	r3, sp, #36	@ 0x24
 80141a6:	4642      	mov	r2, r8
 80141a8:	4639      	mov	r1, r7
 80141aa:	a804      	add	r0, sp, #16
 80141ac:	e9cd a400 	strd	sl, r4, [sp]
 80141b0:	47c8      	blx	r9
      }
 80141b2:	a809      	add	r0, sp, #36	@ 0x24
 80141b4:	f7ec fc94 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success) break;
 80141b8:	7823      	ldrb	r3, [r4, #0]
 80141ba:	b183      	cbz	r3, 80141de <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x86>
		if (!AcceptMessage(message)) {
 80141bc:	a904      	add	r1, sp, #16
 80141be:	a809      	add	r0, sp, #36	@ 0x24
 80141c0:	f7fc ffdf 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 80141c4:	a909      	add	r1, sp, #36	@ 0x24
 80141c6:	4628      	mov	r0, r5
 80141c8:	f7fc fb66 	bl	8010898 <_ZN13Communication13AcceptMessageE13MessageHeader>
 80141cc:	4681      	mov	r9, r0
 80141ce:	a80a      	add	r0, sp, #40	@ 0x28
 80141d0:	f7ec fc86 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80141d4:	f1b9 0f00 	cmp.w	r9, #0
 80141d8:	d10c      	bne.n	80141f4 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x9c>
			*success = false;
 80141da:	f884 9000 	strb.w	r9, [r4]
 80141de:	a805      	add	r0, sp, #20
 80141e0:	f7ec fc7e 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	osSemaphoreRelease(CommunicationSemaphore);  // TODO ADDED
 80141e4:	6828      	ldr	r0, [r5, #0]
 80141e6:	f7f8 fe73 	bl	800ced0 <osSemaphoreRelease>
	return processed_length;
 80141ea:	f8bd 000e 	ldrh.w	r0, [sp, #14]
}
 80141ee:	b00e      	add	sp, #56	@ 0x38
 80141f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ParseMessage(message);
 80141f4:	a904      	add	r1, sp, #16
 80141f6:	a809      	add	r0, sp, #36	@ 0x24
		message.interface = ID;
 80141f8:	f88d 8010 	strb.w	r8, [sp, #16]
		ParseMessage(message);
 80141fc:	f7fc ffc1 	bl	8011182 <_ZN13MessageHeaderC1ERKS_>
 8014200:	a909      	add	r1, sp, #36	@ 0x24
 8014202:	4628      	mov	r0, r5
 8014204:	f7ff ff12 	bl	801402c <_ZN13Communication12ParseMessageE13MessageHeader>
 8014208:	a80a      	add	r0, sp, #40	@ 0x28
 801420a:	f7ec fc69 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801420e:	a805      	add	r0, sp, #20
 8014210:	f7ec fc66 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8014214:	e7b8      	b.n	8014188 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x30>
	...

08014218 <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlfSt6vectorIfSaIfEEE0_4_FUNEfS8_>:
	// Position control configuration
	positionConfiguration.track = &encoder_position;
	positionConfiguration.selected_filter = DEFAULT_POSITION_FILTER;
	positionConfiguration.input_filters.resize(2);
	positionConfiguration.input_filters[OUTPUT_MOTOR_POSITION_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input * parameters[MOTOR_REDUCTION_RATIO] * parameters[MOTOR_ENCODER_TICK_NUMBER] / 90;}); // motor position input after reductor in °
	positionConfiguration.input_filters[INPUT_MOTOR_POSITION_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input * parameters[MOTOR_ENCODER_TICK_NUMBER] / 90;}); // motor position input in °
 8014218:	6803      	ldr	r3, [r0, #0]
 801421a:	edd3 7a04 	vldr	s15, [r3, #16]
 801421e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014222:	eddf 7a02 	vldr	s15, [pc, #8]	@ 801422c <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlfSt6vectorIfSaIfEEE0_4_FUNEfS8_+0x14>
 8014226:	ee80 0a27 	vdiv.f32	s0, s0, s15
 801422a:	4770      	bx	lr
 801422c:	42b40000 	.word	0x42b40000

08014230 <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlfE1_4_FUNEf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8014230:	eeb0 0ac0 	vabs.f32	s0, s0
	positionConfiguration.P_active = DEFAULT_POSITION_P_ACTIVE;
	positionConfiguration.I_active = DEFAULT_POSITION_I_ACTIVE;
	positionConfiguration.D_active = DEFAULT_POSITION_D_ACTIVE;
	positionConfiguration.S_active = DEFAULT_POSITION_S_ACTIVE;
	positionConfiguration.direction_criteria = &PWM;
	positionConfiguration.PWMAssignement = ([](float val) -> uint32_t {return (uint32_t) (abs(val));});
 8014234:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8014238:	ee17 0a90 	vmov	r0, s15
 801423c:	4770      	bx	lr

0801423e <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlfSt6vectorIfSaIfEEE2_4_FUNEfS8_>:

	// Torque control configuration
	torqueConfiguration.track = &motor_current;
	torqueConfiguration.selected_filter = DEFAULT_TORQUE_FILTER;
	torqueConfiguration.input_filters.resize(3);
	torqueConfiguration.input_filters[CURRENT_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input;}); // motor current input in A
 801423e:	4770      	bx	lr

08014240 <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlfSt6vectorIfSaIfEEE3_4_FUNEfS8_>:
	torqueConfiguration.input_filters[TORQUE_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input * parameters[MOTOR_TORQUE_CONSTANT_INVERSE];}); // motor torque before reductor input in mNm
 8014240:	6803      	ldr	r3, [r0, #0]
 8014242:	edd3 7a03 	vldr	s15, [r3, #12]
 8014246:	ee20 0a27 	vmul.f32	s0, s0, s15
 801424a:	4770      	bx	lr

0801424c <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlfSt6vectorIfSaIfEEE4_4_FUNEfS8_>:
	return *(this->_M_impl._M_start + __n);
 801424c:	6803      	ldr	r3, [r0, #0]
	torqueConfiguration.input_filters[TORQUE_REDUCTOR_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input * parameters[MOTOR_TORQUE_CONSTANT_INVERSE] / parameters[MOTOR_REDUCTION_RATIO];}); // motor torque after reductor input in mNm
 801424e:	edd3 7a03 	vldr	s15, [r3, #12]
 8014252:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014256:	edd3 7a00 	vldr	s15, [r3]
 801425a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 801425e:	4770      	bx	lr

08014260 <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlfE5_4_FUNEf>:
	torqueConfiguration.P_active = DEFAULT_TORQUE_P_ACTIVE;
	torqueConfiguration.I_active = DEFAULT_TORQUE_I_ACTIVE;
	torqueConfiguration.D_active = DEFAULT_TORQUE_D_ACTIVE;
	torqueConfiguration.S_active = DEFAULT_TORQUE_S_ACTIVE;
	torqueConfiguration.direction_criteria = &setpoint;
	torqueConfiguration.PWMAssignement = ([](float val) -> uint32_t {if (val > 0) return (uint32_t) (abs(val)); else return 0;});
 8014260:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014268:	bfc3      	ittte	gt
 801426a:	eeb0 0ac0 	vabsgt.f32	s0, s0
 801426e:	eefc 7ac0 	vcvtgt.u32.f32	s15, s0
 8014272:	ee17 0a90 	vmovgt	r0, s15
 8014276:	2000      	movle	r0, #0
 8014278:	4770      	bx	lr

0801427a <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlSt6vectorIPfSaIS7_EES6_IfSaIfEEE8_4_FUNES9_SB_>:
	PWMConfiguration.direction_criteria = &PWM;
	PWMConfiguration.PWMAssignement = ([](float val) -> uint32_t {return (uint32_t) (abs(val));});
	PWMConfiguration.model_active = true;
	torqueConfiguration.model_variables.resize(1);
	PWMConfiguration.model_variables[0] = &setpoint;
	PWMConfiguration.model = ([](std::vector<float*> variables, std::vector<float> parameters) -> float {return (*(variables[0]));});
 801427a:	6803      	ldr	r3, [r0, #0]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	ed93 0a00 	vldr	s0, [r3]
 8014282:	4770      	bx	lr

08014284 <_ZZN10Controller12AddRegistersEvENUlPvtPPhPtE0_4_FUNES0_tS2_S3_>:
	registers->SetRegisterAsSingle(REG_BRIDGE_STATE);
	registers->AddRegisterSemaphore(REG_BRIDGE_STATE, &ControlSemaphore);
	registers->AddReadCallback<uint8_t>(REG_BRIDGE_STATE, (void*) this,
		[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
			Controller* self = (Controller*) context;
			**output = (uint8_t) self->bridge_active;
 8014284:	6813      	ldr	r3, [r2, #0]
 8014286:	f890 2070 	ldrb.w	r2, [r0, #112]	@ 0x70
			return true;
		}
 801428a:	2001      	movs	r0, #1
			**output = (uint8_t) self->bridge_active;
 801428c:	701a      	strb	r2, [r3, #0]
		}
 801428e:	4770      	bx	lr

08014290 <_ZZN10Controller12AddRegistersEvENUlPvtPPhPtE8_4_FUNES0_tS2_S3_>:
	registers->SetRegisterAsSingle(REG_CONTROLLER_INPUT_FILTER);
	registers->AddRegisterSemaphore(REG_CONTROLLER_INPUT_FILTER, &ControlSemaphore);
	registers->AddReadCallback<uint8_t>(REG_CONTROLLER_INPUT_FILTER, (void*) this,
		[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
			Controller* self = (Controller*) context;
			**output = self->configurations[self->mode]->selected_filter;
 8014290:	6813      	ldr	r3, [r2, #0]
 8014292:	f890 2072 	ldrb.w	r2, [r0, #114]	@ 0x72
 8014296:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801429a:	f8d0 2144 	ldr.w	r2, [r0, #324]	@ 0x144
			return true;
		}
 801429e:	2001      	movs	r0, #1
			**output = self->configurations[self->mode]->selected_filter;
 80142a0:	7912      	ldrb	r2, [r2, #4]
 80142a2:	701a      	strb	r2, [r3, #0]
		}
 80142a4:	4770      	bx	lr

080142a6 <_ZZN10Controller12AddRegistersEvENUlPvtPhtE9_4_FUNES0_tS1_t>:
	);
	registers->AddWriteCallback<uint8_t>(REG_CONTROLLER_INPUT_FILTER, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
			Controller* self = (Controller*) context;
			self->configurations[self->mode]->selected_filter = *input;
 80142a6:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 80142aa:	7812      	ldrb	r2, [r2, #0]
 80142ac:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80142b0:	f8d0 3144 	ldr.w	r3, [r0, #324]	@ 0x144
			return true;
		}
 80142b4:	2001      	movs	r0, #1
			self->configurations[self->mode]->selected_filter = *input;
 80142b6:	711a      	strb	r2, [r3, #4]
		}
 80142b8:	4770      	bx	lr

080142ba <_ZZN10Controller12AddRegistersEvENUlPvtPftE17_4_FUNES0_tS1_t>:
	// Register to start a planned trajectory via the trajectory generator
	registers->AddRegister<uint8_t>(REG_MOTOR_START_TRAJECTORY);
	registers->SetRegisterAsSingle(REG_MOTOR_START_TRAJECTORY);
	registers->AddRegisterSemaphore(REG_MOTOR_START_TRAJECTORY, &ControlSemaphore);
	registers->AddWriteCallback<float>(REG_MOTOR_START_TRAJECTORY, (void*) this,
		[](void* context, uint16_t register_id, float* input, uint16_t length) -> bool {
 80142ba:	b508      	push	{r3, lr}
			Controller* self = (Controller*) context;
			self->trajectory_generator.StartTrajectory();
 80142bc:	f009 fc76 	bl	801dbac <_ZN19TrajectoryGenerator15StartTrajectoryEv>
			return true;
		}
 80142c0:	2001      	movs	r0, #1
 80142c2:	bd08      	pop	{r3, pc}

080142c4 <_ZZN10Controller12AddRegistersEvENUlPvtPftE16_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80142c4:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, float* input, uint16_t length) -> bool {
 80142c6:	b508      	push	{r3, lr}
			if (length != 2) return false;
 80142c8:	d107      	bne.n	80142da <_ZZN10Controller12AddRegistersEvENUlPvtPftE16_4_FUNES0_tS1_t+0x16>
			self->trajectory_generator.PlanTrajectory(input[0], input[1]);
 80142ca:	edd2 0a01 	vldr	s1, [r2, #4]
 80142ce:	ed92 0a00 	vldr	s0, [r2]
 80142d2:	f009 fbf1 	bl	801dab8 <_ZN19TrajectoryGenerator14PlanTrajectoryEff>
 80142d6:	2001      	movs	r0, #1
		}
 80142d8:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 80142da:	2000      	movs	r0, #0
 80142dc:	e7fc      	b.n	80142d8 <_ZZN10Controller12AddRegistersEvENUlPvtPftE16_4_FUNES0_tS1_t+0x14>

080142de <_ZZN10Controller12AddRegistersEvENUlPvtPftE15_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80142de:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, float* input, uint16_t length) -> bool {
 80142e0:	b082      	sub	sp, #8
			if (length != 2) return false;
 80142e2:	d114      	bne.n	801430e <_ZZN10Controller12AddRegistersEvENUlPvtPftE15_4_FUNES0_tS1_t+0x30>
			if ((uint8_t) input[0] >= self->params.size()) return false;
 80142e4:	edd2 7a00 	vldr	s15, [r2]
 80142e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80142ec:	e9d0 3054 	ldrd	r3, r0, [r0, #336]	@ 0x150
 80142f0:	edcd 7a01 	vstr	s15, [sp, #4]
 80142f4:	1ac0      	subs	r0, r0, r3
 80142f6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80142fa:	ebb1 0fa0 	cmp.w	r1, r0, asr #2
 80142fe:	d206      	bcs.n	801430e <_ZZN10Controller12AddRegistersEvENUlPvtPftE15_4_FUNES0_tS1_t+0x30>
			self->params[(uint8_t) input[0]] = input[1];
 8014300:	6852      	ldr	r2, [r2, #4]
 8014302:	eb03 0381 	add.w	r3, r3, r1, lsl #2
			return true;
 8014306:	2001      	movs	r0, #1
			self->params[(uint8_t) input[0]] = input[1];
 8014308:	601a      	str	r2, [r3, #0]
		}
 801430a:	b002      	add	sp, #8
 801430c:	4770      	bx	lr
			if (length != 2) return false;
 801430e:	2000      	movs	r0, #0
 8014310:	e7fb      	b.n	801430a <_ZZN10Controller12AddRegistersEvENUlPvtPftE15_4_FUNES0_tS1_t+0x2c>

08014312 <_ZZN10Controller12AddRegistersEvENUlPvtPPfPtE11_4_FUNES0_tS2_S3_>:
			*output[CONTROLLER_CONFIGURATION_K] = self->configurations[self->mode]->K;
 8014312:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
			*output[CONTROLLER_CONFIGURATION_Ti] = 1 / self->configurations[self->mode]->Ti_inv;
 8014316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
			*output[CONTROLLER_CONFIGURATION_K] = self->configurations[self->mode]->K;
 801431a:	6811      	ldr	r1, [r2, #0]
 801431c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8014320:	f8d0 3144 	ldr.w	r3, [r0, #324]	@ 0x144
 8014324:	6958      	ldr	r0, [r3, #20]
 8014326:	6008      	str	r0, [r1, #0]
			*output[CONTROLLER_CONFIGURATION_Ti] = 1 / self->configurations[self->mode]->Ti_inv;
 8014328:	ed93 7a06 	vldr	s14, [r3, #24]
 801432c:	6851      	ldr	r1, [r2, #4]
 801432e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014332:	edc1 7a00 	vstr	s15, [r1]
			*output[CONTROLLER_CONFIGURATION_Td] = self->configurations[self->mode]->Td;
 8014336:	6891      	ldr	r1, [r2, #8]
 8014338:	69d8      	ldr	r0, [r3, #28]
 801433a:	6008      	str	r0, [r1, #0]
			*output[CONTROLLER_CONFIGURATION_ISAT] = self->configurations[self->mode]->Isaturation;
 801433c:	68d1      	ldr	r1, [r2, #12]
 801433e:	6a18      	ldr	r0, [r3, #32]
 8014340:	6008      	str	r0, [r1, #0]
			*output[CONTROLLER_CONFIGURATION_P_ACTIVE] = self->configurations[self->mode]->P_active;
 8014342:	f893 0024 	ldrb.w	r0, [r3, #36]	@ 0x24
 8014346:	6911      	ldr	r1, [r2, #16]
 8014348:	ee07 0a90 	vmov	s15, r0
			*output[CONTROLLER_CONFIGURATION_I_ACTIVE] = self->configurations[self->mode]->I_active;
 801434c:	f893 0025 	ldrb.w	r0, [r3, #37]	@ 0x25
			*output[CONTROLLER_CONFIGURATION_P_ACTIVE] = self->configurations[self->mode]->P_active;
 8014350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014354:	edc1 7a00 	vstr	s15, [r1]
			*output[CONTROLLER_CONFIGURATION_I_ACTIVE] = self->configurations[self->mode]->I_active;
 8014358:	ee07 0a90 	vmov	s15, r0
 801435c:	6951      	ldr	r1, [r2, #20]
 801435e:	eef8 7a67 	vcvt.f32.u32	s15, s15
			*output[CONTROLLER_CONFIGURATION_D_ACTIVE] = self->configurations[self->mode]->D_active;
 8014362:	f893 0026 	ldrb.w	r0, [r3, #38]	@ 0x26
			*output[CONTROLLER_CONFIGURATION_I_ACTIVE] = self->configurations[self->mode]->I_active;
 8014366:	edc1 7a00 	vstr	s15, [r1]
			*output[CONTROLLER_CONFIGURATION_D_ACTIVE] = self->configurations[self->mode]->D_active;
 801436a:	ee07 0a90 	vmov	s15, r0
 801436e:	6991      	ldr	r1, [r2, #24]
 8014370:	eef8 7a67 	vcvt.f32.u32	s15, s15
			*output[CONTROLLER_CONFIGURATION_S_ACTIVE] = self->configurations[self->mode]->S_active;
 8014374:	f893 0027 	ldrb.w	r0, [r3, #39]	@ 0x27
			*output[CONTROLLER_CONFIGURATION_MODEL_ACTIVE] = self->configurations[self->mode]->model_active;
 8014378:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
			*output[CONTROLLER_CONFIGURATION_D_ACTIVE] = self->configurations[self->mode]->D_active;
 801437c:	edc1 7a00 	vstr	s15, [r1]
			*output[CONTROLLER_CONFIGURATION_S_ACTIVE] = self->configurations[self->mode]->S_active;
 8014380:	ee07 0a90 	vmov	s15, r0
 8014384:	69d1      	ldr	r1, [r2, #28]
		}
 8014386:	2001      	movs	r0, #1
			*output[CONTROLLER_CONFIGURATION_S_ACTIVE] = self->configurations[self->mode]->S_active;
 8014388:	eef8 7a67 	vcvt.f32.u32	s15, s15
			*output[CONTROLLER_CONFIGURATION_MODEL_ACTIVE] = self->configurations[self->mode]->model_active;
 801438c:	6a12      	ldr	r2, [r2, #32]
			*output[CONTROLLER_CONFIGURATION_S_ACTIVE] = self->configurations[self->mode]->S_active;
 801438e:	edc1 7a00 	vstr	s15, [r1]
			*output[CONTROLLER_CONFIGURATION_MODEL_ACTIVE] = self->configurations[self->mode]->model_active;
 8014392:	ee07 3a90 	vmov	s15, r3
 8014396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801439a:	edc2 7a00 	vstr	s15, [r2]
		}
 801439e:	4770      	bx	lr

080143a0 <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80143a0:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, float* input, uint16_t length) -> bool {
 80143a2:	b082      	sub	sp, #8
			if (length != 2) return false;
 80143a4:	f040 8098 	bne.w	80144d8 <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x138>
			switch ((uint8_t) input[0]) {
 80143a8:	edd2 7a00 	vldr	s15, [r2]
 80143ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80143b0:	edcd 7a01 	vstr	s15, [sp, #4]
 80143b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80143b8:	2b08      	cmp	r3, #8
 80143ba:	f200 808d 	bhi.w	80144d8 <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x138>
 80143be:	e8df f003 	tbb	[pc, r3]
 80143c2:	1005      	.short	0x1005
 80143c4:	4331281f 	.word	0x4331281f
 80143c8:	6755      	.short	0x6755
 80143ca:	79          	.byte	0x79
 80143cb:	00          	.byte	0x00
				self->configurations[self->mode]->K = input[1];
 80143cc:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 80143d0:	6852      	ldr	r2, [r2, #4]
 80143d2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80143d6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 80143da:	615a      	str	r2, [r3, #20]
			return true;
 80143dc:	2001      	movs	r0, #1
		}
 80143de:	b002      	add	sp, #8
 80143e0:	4770      	bx	lr
				self->configurations[self->mode]->Ti_inv = 1 / input[1];
 80143e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80143e6:	ed92 7a01 	vldr	s14, [r2, #4]
 80143ea:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 80143ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80143f2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80143f6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 80143fa:	edc3 7a06 	vstr	s15, [r3, #24]
				break;
 80143fe:	e7ed      	b.n	80143dc <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x3c>
				self->configurations[self->mode]->Td = input[1];
 8014400:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 8014404:	6852      	ldr	r2, [r2, #4]
 8014406:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801440a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 801440e:	61da      	str	r2, [r3, #28]
				break;
 8014410:	e7e4      	b.n	80143dc <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x3c>
				self->configurations[self->mode]->Isaturation = input[1];
 8014412:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 8014416:	6852      	ldr	r2, [r2, #4]
 8014418:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801441c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8014420:	621a      	str	r2, [r3, #32]
				break;
 8014422:	e7db      	b.n	80143dc <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x3c>
				self->configurations[self->mode]->P_active = (bool) input[1];
 8014424:	edd2 7a01 	vldr	s15, [r2, #4]
 8014428:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 801442c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014430:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8014434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014438:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 801443c:	bf14      	ite	ne
 801443e:	2201      	movne	r2, #1
 8014440:	2200      	moveq	r2, #0
 8014442:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
				break;
 8014446:	e7c9      	b.n	80143dc <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x3c>
				self->configurations[self->mode]->I_active = (bool) input[1];
 8014448:	edd2 7a01 	vldr	s15, [r2, #4]
 801444c:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 8014450:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014454:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8014458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801445c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8014460:	bf14      	ite	ne
 8014462:	2201      	movne	r2, #1
 8014464:	2200      	moveq	r2, #0
 8014466:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
				break;
 801446a:	e7b7      	b.n	80143dc <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x3c>
				self->configurations[self->mode]->D_active = (bool) input[1];
 801446c:	edd2 7a01 	vldr	s15, [r2, #4]
 8014470:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 8014474:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014478:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801447c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014480:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8014484:	bf14      	ite	ne
 8014486:	2201      	movne	r2, #1
 8014488:	2200      	moveq	r2, #0
 801448a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
				break;
 801448e:	e7a5      	b.n	80143dc <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x3c>
				self->configurations[self->mode]->S_active = (bool) input[1];
 8014490:	edd2 7a01 	vldr	s15, [r2, #4]
 8014494:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 8014498:	eef5 7a40 	vcmp.f32	s15, #0.0
 801449c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80144a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144a4:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 80144a8:	bf14      	ite	ne
 80144aa:	2201      	movne	r2, #1
 80144ac:	2200      	moveq	r2, #0
 80144ae:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
				break;
 80144b2:	e793      	b.n	80143dc <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x3c>
				self->configurations[self->mode]->model_active = (bool) input[1];
 80144b4:	edd2 7a01 	vldr	s15, [r2, #4]
 80144b8:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 80144bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80144c0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80144c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144c8:	f8d0 3144 	ldr.w	r3, [r0, #324]	@ 0x144
 80144cc:	bf14      	ite	ne
 80144ce:	2201      	movne	r2, #1
 80144d0:	2200      	moveq	r2, #0
 80144d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				break;
 80144d6:	e781      	b.n	80143dc <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x3c>
			if (length != 2) return false;
 80144d8:	2000      	movs	r0, #0
 80144da:	e780      	b.n	80143de <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x3e>

080144dc <_ZZN10Controller12AddRegistersEvENUlPvtPPhPtE6_4_FUNES0_tS2_S3_>:
		[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 80144dc:	b538      	push	{r3, r4, r5, lr}
 80144de:	4604      	mov	r4, r0
 80144e0:	4615      	mov	r5, r2
			osSemaphoreAcquire(self->ControlSemaphore, osWaitForever);
 80144e2:	f04f 31ff 	mov.w	r1, #4294967295
 80144e6:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80144e8:	f7f8 fcbe 	bl	800ce68 <osSemaphoreAcquire>
			**output = self->mode;
 80144ec:	682b      	ldr	r3, [r5, #0]
 80144ee:	f894 2072 	ldrb.w	r2, [r4, #114]	@ 0x72
 80144f2:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->ControlSemaphore);
 80144f4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80144f6:	f7f8 fceb 	bl	800ced0 <osSemaphoreRelease>
		}
 80144fa:	2001      	movs	r0, #1
 80144fc:	bd38      	pop	{r3, r4, r5, pc}

080144fe <_ZZN10Controller12AddRegistersEvENUlPvtPPmPtE4_4_FUNES0_tS2_S3_>:
		[](void* context, uint16_t register_id, uint32_t** output, uint16_t* length) -> bool {
 80144fe:	b538      	push	{r3, r4, r5, lr}
 8014500:	4604      	mov	r4, r0
 8014502:	4615      	mov	r5, r2
			osSemaphoreAcquire(self->ControlSemaphore, osWaitForever);
 8014504:	f04f 31ff 	mov.w	r1, #4294967295
 8014508:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801450a:	f7f8 fcad 	bl	800ce68 <osSemaphoreAcquire>
			**output = self->period_ms;
 801450e:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8014510:	682b      	ldr	r3, [r5, #0]
			osSemaphoreRelease(self->ControlSemaphore);
 8014512:	6b60      	ldr	r0, [r4, #52]	@ 0x34
			**output = self->period_ms;
 8014514:	601a      	str	r2, [r3, #0]
			osSemaphoreRelease(self->ControlSemaphore);
 8014516:	f7f8 fcdb 	bl	800ced0 <osSemaphoreRelease>
		}
 801451a:	2001      	movs	r0, #1
 801451c:	bd38      	pop	{r3, r4, r5, pc}

0801451e <_ZZN10Controller12AddRegistersEvENUlPvtPPhPtE2_4_FUNES0_tS2_S3_>:
			[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 801451e:	b538      	push	{r3, r4, r5, lr}
 8014520:	4604      	mov	r4, r0
 8014522:	4615      	mov	r5, r2
			osSemaphoreAcquire(self->ControlSemaphore, osWaitForever);
 8014524:	f04f 31ff 	mov.w	r1, #4294967295
 8014528:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801452a:	f7f8 fc9d 	bl	800ce68 <osSemaphoreAcquire>
			**output = (uint8_t) self->controller_active;
 801452e:	682b      	ldr	r3, [r5, #0]
 8014530:	f894 2071 	ldrb.w	r2, [r4, #113]	@ 0x71
 8014534:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->ControlSemaphore);
 8014536:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8014538:	f7f8 fcca 	bl	800ced0 <osSemaphoreRelease>
		}
 801453c:	2001      	movs	r0, #1
 801453e:	bd38      	pop	{r3, r4, r5, pc}

08014540 <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlfSt6vectorIfSaIfEEE_4_FUNEfS8_>:
	positionConfiguration.input_filters[OUTPUT_MOTOR_POSITION_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input * parameters[MOTOR_REDUCTION_RATIO] * parameters[MOTOR_ENCODER_TICK_NUMBER] / 90;}); // motor position input after reductor in °
 8014540:	6803      	ldr	r3, [r0, #0]
 8014542:	edd3 7a00 	vldr	s15, [r3]
 8014546:	ee20 0a27 	vmul.f32	s0, s0, s15
 801454a:	edd3 7a04 	vldr	s15, [r3, #16]
 801454e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014552:	eddf 7a02 	vldr	s15, [pc, #8]	@ 801455c <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlfSt6vectorIfSaIfEEE_4_FUNEfS8_+0x1c>
 8014556:	ee80 0a27 	vdiv.f32	s0, s0, s15
 801455a:	4770      	bx	lr
 801455c:	42b40000 	.word	0x42b40000

08014560 <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlSt6vectorIPfSaIS7_EES6_IfSaIfEEE6_4_FUNES9_SB_>:
	torqueConfiguration.model = ([](std::vector<float*> variables, std::vector<float> parameters) -> float {return (parameters[MOTOR_ELECTRIC_RESISTOR] * *(variables[0]) + parameters[MOTOR_SPEED_CONSTANT] * *(variables[1]));});
 8014560:	6802      	ldr	r2, [r0, #0]
 8014562:	680b      	ldr	r3, [r1, #0]
 8014564:	e9d2 1200 	ldrd	r1, r2, [r2]
 8014568:	edd3 7a02 	vldr	s15, [r3, #8]
 801456c:	ed92 0a00 	vldr	s0, [r2]
 8014570:	ed93 7a01 	vldr	s14, [r3, #4]
 8014574:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014578:	edd1 7a00 	vldr	s15, [r1]
 801457c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8014580:	4770      	bx	lr
	...

08014584 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8014584:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014586:	491e      	ldr	r1, [pc, #120]	@ (8014600 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8014588:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801458a:	481e      	ldr	r0, [pc, #120]	@ (8014604 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 801458c:	f009 fdd4 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8014590:	bb40      	cbnz	r0, 80145e4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8014592:	491d      	ldr	r1, [pc, #116]	@ (8014608 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>)
 8014594:	481b      	ldr	r0, [pc, #108]	@ (8014604 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 8014596:	f009 fdcf 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801459a:	bb28      	cbnz	r0, 80145e8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801459c:	491b      	ldr	r1, [pc, #108]	@ (801460c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>)
 801459e:	4819      	ldr	r0, [pc, #100]	@ (8014604 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80145a0:	f009 fdca 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80145a4:	bb10      	cbnz	r0, 80145ec <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80145a6:	491a      	ldr	r1, [pc, #104]	@ (8014610 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>)
 80145a8:	4816      	ldr	r0, [pc, #88]	@ (8014604 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80145aa:	f009 fdc5 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80145ae:	b9f8      	cbnz	r0, 80145f0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80145b0:	4918      	ldr	r1, [pc, #96]	@ (8014614 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>)
 80145b2:	4814      	ldr	r0, [pc, #80]	@ (8014604 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80145b4:	f009 fdc0 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80145b8:	b9e0      	cbnz	r0, 80145f4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80145ba:	4917      	ldr	r1, [pc, #92]	@ (8014618 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>)
 80145bc:	4811      	ldr	r0, [pc, #68]	@ (8014604 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80145be:	f009 fdbb 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80145c2:	b9c8      	cbnz	r0, 80145f8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80145c4:	490f      	ldr	r1, [pc, #60]	@ (8014604 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80145c6:	4608      	mov	r0, r1
 80145c8:	f009 fdb6 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80145cc:	b9b0      	cbnz	r0, 80145fc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80145ce:	4913      	ldr	r1, [pc, #76]	@ (801461c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>)
 80145d0:	480c      	ldr	r0, [pc, #48]	@ (8014604 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80145d2:	f009 fdb1 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80145d6:	2800      	cmp	r0, #0
 80145d8:	bf14      	ite	ne
 80145da:	2309      	movne	r3, #9
 80145dc:	2300      	moveq	r3, #0
 80145de:	7020      	strb	r0, [r4, #0]
}
 80145e0:	4618      	mov	r0, r3
 80145e2:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80145e4:	2300      	movs	r3, #0
 80145e6:	e7fa      	b.n	80145de <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80145e8:	2301      	movs	r3, #1
 80145ea:	e7f8      	b.n	80145de <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80145ec:	2302      	movs	r3, #2
 80145ee:	e7f6      	b.n	80145de <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80145f0:	2303      	movs	r3, #3
 80145f2:	e7f4      	b.n	80145de <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80145f4:	2304      	movs	r3, #4
 80145f6:	e7f2      	b.n	80145de <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80145f8:	2306      	movs	r3, #6
 80145fa:	e7f0      	b.n	80145de <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80145fc:	2308      	movs	r3, #8
 80145fe:	e7ee      	b.n	80145de <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
 8014600:	0801f65c 	.word	0x0801f65c
 8014604:	0801f634 	.word	0x0801f634
 8014608:	0801f654 	.word	0x0801f654
 801460c:	0801f644 	.word	0x0801f644
 8014610:	0801f63c 	.word	0x0801f63c
 8014614:	0801f664 	.word	0x0801f664
 8014618:	0801f64c 	.word	0x0801f64c
 801461c:	0801f62c 	.word	0x0801f62c

08014620 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8014620:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014622:	491e      	ldr	r1, [pc, #120]	@ (801469c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8014624:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014626:	481e      	ldr	r0, [pc, #120]	@ (80146a0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8014628:	f009 fd86 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801462c:	bb40      	cbnz	r0, 8014680 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801462e:	491d      	ldr	r1, [pc, #116]	@ (80146a4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>)
 8014630:	481b      	ldr	r0, [pc, #108]	@ (80146a0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8014632:	f009 fd81 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8014636:	bb28      	cbnz	r0, 8014684 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8014638:	4919      	ldr	r1, [pc, #100]	@ (80146a0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 801463a:	4608      	mov	r0, r1
 801463c:	f009 fd7c 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8014640:	bb10      	cbnz	r0, 8014688 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8014642:	4919      	ldr	r1, [pc, #100]	@ (80146a8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>)
 8014644:	4816      	ldr	r0, [pc, #88]	@ (80146a0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8014646:	f009 fd77 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801464a:	b9f8      	cbnz	r0, 801468c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801464c:	4917      	ldr	r1, [pc, #92]	@ (80146ac <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>)
 801464e:	4814      	ldr	r0, [pc, #80]	@ (80146a0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8014650:	f009 fd72 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8014654:	b9e0      	cbnz	r0, 8014690 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8014656:	4916      	ldr	r1, [pc, #88]	@ (80146b0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>)
 8014658:	4811      	ldr	r0, [pc, #68]	@ (80146a0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 801465a:	f009 fd6d 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801465e:	b9c8      	cbnz	r0, 8014694 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8014660:	4914      	ldr	r1, [pc, #80]	@ (80146b4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>)
 8014662:	480f      	ldr	r0, [pc, #60]	@ (80146a0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8014664:	f009 fd68 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8014668:	b9b0      	cbnz	r0, 8014698 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801466a:	4913      	ldr	r1, [pc, #76]	@ (80146b8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>)
 801466c:	480c      	ldr	r0, [pc, #48]	@ (80146a0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 801466e:	f009 fd63 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8014672:	2800      	cmp	r0, #0
 8014674:	bf14      	ite	ne
 8014676:	2309      	movne	r3, #9
 8014678:	2300      	moveq	r3, #0
 801467a:	7020      	strb	r0, [r4, #0]
}
 801467c:	4618      	mov	r0, r3
 801467e:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8014680:	2300      	movs	r3, #0
 8014682:	e7fa      	b.n	801467a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8014684:	2301      	movs	r3, #1
 8014686:	e7f8      	b.n	801467a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8014688:	2302      	movs	r3, #2
 801468a:	e7f6      	b.n	801467a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801468c:	2303      	movs	r3, #3
 801468e:	e7f4      	b.n	801467a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8014690:	2304      	movs	r3, #4
 8014692:	e7f2      	b.n	801467a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8014694:	2306      	movs	r3, #6
 8014696:	e7f0      	b.n	801467a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8014698:	2308      	movs	r3, #8
 801469a:	e7ee      	b.n	801467a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
 801469c:	0801f65c 	.word	0x0801f65c
 80146a0:	0801f644 	.word	0x0801f644
 80146a4:	0801f654 	.word	0x0801f654
 80146a8:	0801f63c 	.word	0x0801f63c
 80146ac:	0801f664 	.word	0x0801f664
 80146b0:	0801f64c 	.word	0x0801f64c
 80146b4:	0801f634 	.word	0x0801f634
 80146b8:	0801f62c 	.word	0x0801f62c

080146bc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80146bc:	491e      	ldr	r1, [pc, #120]	@ (8014738 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 80146be:	b510      	push	{r4, lr}
 80146c0:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80146c2:	4608      	mov	r0, r1
 80146c4:	f009 fd38 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80146c8:	bb40      	cbnz	r0, 801471c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80146ca:	491c      	ldr	r1, [pc, #112]	@ (801473c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>)
 80146cc:	481a      	ldr	r0, [pc, #104]	@ (8014738 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 80146ce:	f009 fd33 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80146d2:	bb28      	cbnz	r0, 8014720 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80146d4:	491a      	ldr	r1, [pc, #104]	@ (8014740 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>)
 80146d6:	4818      	ldr	r0, [pc, #96]	@ (8014738 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 80146d8:	f009 fd2e 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80146dc:	bb10      	cbnz	r0, 8014724 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80146de:	4919      	ldr	r1, [pc, #100]	@ (8014744 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>)
 80146e0:	4815      	ldr	r0, [pc, #84]	@ (8014738 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 80146e2:	f009 fd29 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80146e6:	b9f8      	cbnz	r0, 8014728 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80146e8:	4917      	ldr	r1, [pc, #92]	@ (8014748 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>)
 80146ea:	4813      	ldr	r0, [pc, #76]	@ (8014738 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 80146ec:	f009 fd24 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80146f0:	b9e0      	cbnz	r0, 801472c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80146f2:	4916      	ldr	r1, [pc, #88]	@ (801474c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>)
 80146f4:	4810      	ldr	r0, [pc, #64]	@ (8014738 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 80146f6:	f009 fd1f 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80146fa:	b9c8      	cbnz	r0, 8014730 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80146fc:	4914      	ldr	r1, [pc, #80]	@ (8014750 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>)
 80146fe:	480e      	ldr	r0, [pc, #56]	@ (8014738 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8014700:	f009 fd1a 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8014704:	b9b0      	cbnz	r0, 8014734 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8014706:	4913      	ldr	r1, [pc, #76]	@ (8014754 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>)
 8014708:	480b      	ldr	r0, [pc, #44]	@ (8014738 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801470a:	f009 fd15 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801470e:	2800      	cmp	r0, #0
 8014710:	bf14      	ite	ne
 8014712:	2309      	movne	r3, #9
 8014714:	2300      	moveq	r3, #0
 8014716:	7020      	strb	r0, [r4, #0]
}
 8014718:	4618      	mov	r0, r3
 801471a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801471c:	2300      	movs	r3, #0
 801471e:	e7fa      	b.n	8014716 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8014720:	2301      	movs	r3, #1
 8014722:	e7f8      	b.n	8014716 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8014724:	2302      	movs	r3, #2
 8014726:	e7f6      	b.n	8014716 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8014728:	2303      	movs	r3, #3
 801472a:	e7f4      	b.n	8014716 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801472c:	2304      	movs	r3, #4
 801472e:	e7f2      	b.n	8014716 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8014730:	2306      	movs	r3, #6
 8014732:	e7f0      	b.n	8014716 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8014734:	2308      	movs	r3, #8
 8014736:	e7ee      	b.n	8014716 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
 8014738:	0801f65c 	.word	0x0801f65c
 801473c:	0801f654 	.word	0x0801f654
 8014740:	0801f644 	.word	0x0801f644
 8014744:	0801f63c 	.word	0x0801f63c
 8014748:	0801f664 	.word	0x0801f664
 801474c:	0801f64c 	.word	0x0801f64c
 8014750:	0801f634 	.word	0x0801f634
 8014754:	0801f62c 	.word	0x0801f62c

08014758 <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlfE7_4_FUNEf>:
	PWMConfiguration.PWMAssignement = ([](float val) -> uint32_t {return (uint32_t) (abs(val));});
 8014758:	eeb0 0ac0 	vabs.f32	s0, s0
 801475c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8014760:	ee17 0a90 	vmov	r0, s15
 8014764:	4770      	bx	lr

08014766 <_ZN10ControllerC1EP11TIM_TypeDefPm4GPIOS3_S3_S3_P17ADC_HandleTypeDef>:
Controller::Controller(TIM_TypeDef* timer, uint32_t* pulse_, GPIO EN_, GPIO SHIFTER_, GPIO IN1_, GPIO IN2_, ADC_HandleTypeDef* ADC_){
 8014766:	b082      	sub	sp, #8
 8014768:	b570      	push	{r4, r5, r6, lr}
 801476a:	4604      	mov	r4, r0
 801476c:	460e      	mov	r6, r1
 801476e:	4615      	mov	r5, r2
 8014770:	9305      	str	r3, [sp, #20]
 8014772:	f009 f995 	bl	801daa0 <_ZN19TrajectoryGeneratorC1Ev>
 8014776:	f104 0278 	add.w	r2, r4, #120	@ 0x78
	: _M_start(), _M_finish(), _M_end_of_storage()
 801477a:	2300      	movs	r3, #0
 801477c:	f8c4 2144 	str.w	r2, [r4, #324]	@ 0x144
 8014780:	f104 02bc 	add.w	r2, r4, #188	@ 0xbc
 8014784:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8014788:	f8c4 2148 	str.w	r2, [r4, #328]	@ 0x148
 801478c:	f504 7280 	add.w	r2, r4, #256	@ 0x100
 8014790:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8014794:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
 8014798:	f8c4 30fc 	str.w	r3, [r4, #252]	@ 0xfc
 801479c:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
 80147a0:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
	EN = EN_;
 80147a4:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80147a8:	e9c4 3320 	strd	r3, r3, [r4, #128]	@ 0x80
 80147ac:	e9c4 332c 	strd	r3, r3, [r4, #176]	@ 0xb0
 80147b0:	e9c4 3331 	strd	r3, r3, [r4, #196]	@ 0xc4
 80147b4:	e9c4 333d 	strd	r3, r3, [r4, #244]	@ 0xf4
 80147b8:	e9c4 3342 	strd	r3, r3, [r4, #264]	@ 0x108
 80147bc:	e9c4 334e 	strd	r3, r3, [r4, #312]	@ 0x138
 80147c0:	e9c4 2353 	strd	r2, r3, [r4, #332]	@ 0x14c
 80147c4:	e9c4 3355 	strd	r3, r3, [r4, #340]	@ 0x154
 80147c8:	f104 0350 	add.w	r3, r4, #80	@ 0x50
	pulse = pulse_;
 80147cc:	e9c4 6511 	strd	r6, r5, [r4, #68]	@ 0x44
	EN = EN_;
 80147d0:	e883 0003 	stmia.w	r3, {r0, r1}
	SHIFTER = SHIFTER_;
 80147d4:	f104 0358 	add.w	r3, r4, #88	@ 0x58
 80147d8:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 80147dc:	e883 0003 	stmia.w	r3, {r0, r1}
	IN1 = IN1_;
 80147e0:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 80147e4:	e9dd 0109 	ldrd	r0, r1, [sp, #36]	@ 0x24
 80147e8:	e883 0003 	stmia.w	r3, {r0, r1}
	IN2 = IN2_;
 80147ec:	f104 0368 	add.w	r3, r4, #104	@ 0x68
 80147f0:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	@ 0x2c
 80147f4:	e883 0003 	stmia.w	r3, {r0, r1}
	ADC = ADC_;
 80147f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
}
 80147fa:	4620      	mov	r0, r4
	ADC = ADC_;
 80147fc:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 80147fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014802:	b002      	add	sp, #8
 8014804:	4770      	bx	lr

08014806 <_ZN10Controller14SetupPublisherEh>:
/**
 * @brief Setup the controller publisher
 *
 * @param input interface_ID: the interface ID to publish on
 */
void Controller::SetupPublisher(uint8_t interface_ID) {
 8014806:	b538      	push	{r3, r4, r5, lr}
 8014808:	4604      	mov	r4, r0
 801480a:	460d      	mov	r5, r1
	// Add publisher
	publishers->AddPublisher(PUBLISHER_CONTROLLER);
 801480c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 801480e:	2104      	movs	r1, #4
 8014810:	f004 facc 	bl	8018dac <_ZN10Publishers12AddPublisherEh>

	// Add an interface to the publisher
	publishers->LinkToInterface(PUBLISHER_CONTROLLER, interface_ID);
 8014814:	462a      	mov	r2, r5
 8014816:	2104      	movs	r1, #4
 8014818:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801481a:	f003 ffb5 	bl	8018788 <_ZN10Publishers15LinkToInterfaceEhh>

	// Setup publisher params
	publishers->SetPublisherPrescaler(PUBLISHER_CONTROLLER, PUBLISHER_CONTROLLER_PRESCALER);
 801481e:	2201      	movs	r2, #1
 8014820:	2104      	movs	r1, #4
 8014822:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8014824:	f003 fcf9 	bl	801821a <_ZN10Publishers21SetPublisherPrescalerEht>
	publishers->SetPublishAddress(PUBLISHER_CONTROLLER, interface_ID, PUBLISHER_CONTROLLER_ADDRESS);
 8014828:	23ff      	movs	r3, #255	@ 0xff
 801482a:	462a      	mov	r2, r5
 801482c:	2104      	movs	r1, #4
 801482e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8014830:	f003 fdd0 	bl	80183d4 <_ZN10Publishers17SetPublishAddressEhhh>

	// Add topics
	publishers->AddTopic(PUBLISHER_CONTROLLER, REG_TIMEBASE);
 8014834:	2200      	movs	r2, #0
 8014836:	2104      	movs	r1, #4
 8014838:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801483a:	f003 ff1d 	bl	8018678 <_ZN10Publishers8AddTopicEht>
	publishers->AddTopic(PUBLISHER_CONTROLLER, REG_MOTOR_ENCODER);
 801483e:	f240 120d 	movw	r2, #269	@ 0x10d
 8014842:	2104      	movs	r1, #4
 8014844:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8014846:	f003 ff17 	bl	8018678 <_ZN10Publishers8AddTopicEht>
	publishers->AddTopic(PUBLISHER_CONTROLLER, REG_MOTOR_HBRIDGE_VOLTAGE);
 801484a:	f240 121f 	movw	r2, #287	@ 0x11f
 801484e:	2104      	movs	r1, #4
 8014850:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8014852:	f003 ff11 	bl	8018678 <_ZN10Publishers8AddTopicEht>
	publishers->AddTopic(PUBLISHER_CONTROLLER, REG_MOTOR_HBRIDGE_CURRENT);
 8014856:	f44f 7288 	mov.w	r2, #272	@ 0x110
 801485a:	2104      	movs	r1, #4
 801485c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801485e:	f003 ff0b 	bl	8018678 <_ZN10Publishers8AddTopicEht>
	publishers->AddTopic(PUBLISHER_CONTROLLER, REG_MOTOR_HBRIDGE_POWER);
 8014862:	f240 1211 	movw	r2, #273	@ 0x111
 8014866:	2104      	movs	r1, #4
 8014868:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801486a:	f003 ff05 	bl	8018678 <_ZN10Publishers8AddTopicEht>
	publishers->AddTopic(PUBLISHER_CONTROLLER, REG_MOTOR_SETPOINT);
 801486e:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8014872:	2104      	movs	r1, #4
 8014874:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8014876:	f003 feff 	bl	8018678 <_ZN10Publishers8AddTopicEht>

	// Activate topics
#ifdef PUBLISH_CONTROLLER_TIMEBASE
	publishers->ActivateTopic(PUBLISHER_CONTROLLER, REG_TIMEBASE);
 801487a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801487c:	2200      	movs	r2, #0
 801487e:	2104      	movs	r1, #4

#ifdef PUBLISHER_CONTROLLER_ACTIVE
	// Activate publisher
	publishers->ActivatePublisher(PUBLISHER_CONTROLLER);
#endif
}
 8014880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	publishers->ActivateTopic(PUBLISHER_CONTROLLER, REG_TIMEBASE);
 8014884:	f003 bd6c 	b.w	8018360 <_ZN10Publishers13ActivateTopicEht>

08014888 <_ZN10Controller14ActivateBridgeEv>:

/**
 * @brief Activate the H-bridge and voltage shifter
 */
void Controller::ActivateBridge(void) {
 8014888:	b538      	push	{r3, r4, r5, lr}
	bridge_active = true;
 801488a:	2501      	movs	r5, #1
void Controller::ActivateBridge(void) {
 801488c:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(EN.port, EN.pin, GPIO_PIN_SET);
 801488e:	f8b0 1054 	ldrh.w	r1, [r0, #84]	@ 0x54
 8014892:	462a      	mov	r2, r5
	bridge_active = true;
 8014894:	f880 5070 	strb.w	r5, [r0, #112]	@ 0x70
	HAL_GPIO_WritePin(EN.port, EN.pin, GPIO_PIN_SET);
 8014898:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 801489a:	f7f2 f8fe 	bl	8006a9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SHIFTER.port, SHIFTER.pin, GPIO_PIN_SET);
 801489e:	462a      	mov	r2, r5
 80148a0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80148a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
}
 80148a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(SHIFTER.port, SHIFTER.pin, GPIO_PIN_SET);
 80148aa:	f7f2 b8f6 	b.w	8006a9a <HAL_GPIO_WritePin>

080148ae <_ZN10Controller16DeactivateBridgeEv>:

/**
 * @brief Deactivate the H-bridge and voltage shifter
 */
void Controller::DeactivateBridge(void) {
 80148ae:	b538      	push	{r3, r4, r5, lr}
	bridge_active = false;
 80148b0:	2500      	movs	r5, #0
void Controller::DeactivateBridge(void) {
 80148b2:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(EN.port, EN.pin, GPIO_PIN_RESET);
 80148b4:	f8b0 1054 	ldrh.w	r1, [r0, #84]	@ 0x54
 80148b8:	462a      	mov	r2, r5
	bridge_active = false;
 80148ba:	f880 5070 	strb.w	r5, [r0, #112]	@ 0x70
	HAL_GPIO_WritePin(EN.port, EN.pin, GPIO_PIN_RESET);
 80148be:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 80148c0:	f7f2 f8eb 	bl	8006a9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SHIFTER.port, SHIFTER.pin, GPIO_PIN_RESET);
 80148c4:	462a      	mov	r2, r5
 80148c6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80148ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
}
 80148cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(SHIFTER.port, SHIFTER.pin, GPIO_PIN_RESET);
 80148d0:	f7f2 b8e3 	b.w	8006a9a <HAL_GPIO_WritePin>

080148d4 <_ZZN10Controller12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80148d4:	b508      	push	{r3, lr}
			if (*input > 0)
 80148d6:	7813      	ldrb	r3, [r2, #0]
 80148d8:	b11b      	cbz	r3, 80148e2 <_ZZN10Controller12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t+0xe>
				self->ActivateBridge();
 80148da:	f7ff ffd5 	bl	8014888 <_ZN10Controller14ActivateBridgeEv>
		}
 80148de:	2001      	movs	r0, #1
 80148e0:	bd08      	pop	{r3, pc}
				self->DeactivateBridge();
 80148e2:	f7ff ffe4 	bl	80148ae <_ZN10Controller16DeactivateBridgeEv>
 80148e6:	e7fa      	b.n	80148de <_ZZN10Controller12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t+0xa>

080148e8 <_ZN10Controller18ActivateControllerEv>:

/**
 * @brief Activate the controller. Blinks the controller LED
 */
void Controller::ActivateController(void) {
 80148e8:	b510      	push	{r4, lr}
 80148ea:	4604      	mov	r4, r0
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 80148ec:	f04f 31ff 	mov.w	r1, #4294967295
 80148f0:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80148f2:	f7f8 fab9 	bl	800ce68 <osSemaphoreAcquire>
#if defined(USE_LEDS) && defined(USE_SMD_LEDs)
	leds->Blink(LED_CONTROLLER);
 80148f6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80148f8:	2108      	movs	r1, #8
 80148fa:	f001 fe74 	bl	80165e6 <_ZN4LEDS5BlinkEh>
#endif

	controller_active = true;
 80148fe:	2301      	movs	r3, #1
	osSemaphoreRelease(ControlSemaphore);
 8014900:	6b60      	ldr	r0, [r4, #52]	@ 0x34
	controller_active = true;
 8014902:	f884 3071 	strb.w	r3, [r4, #113]	@ 0x71
}
 8014906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(ControlSemaphore);
 801490a:	f7f8 bae1 	b.w	800ced0 <osSemaphoreRelease>

0801490e <_ZN10Controller20DeactivateControllerEv>:

/**
 * @brief Deactivate the controller. Stop the controller LED
 */
void Controller::DeactivateController(void) {
 801490e:	b510      	push	{r4, lr}
 8014910:	4604      	mov	r4, r0
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 8014912:	f04f 31ff 	mov.w	r1, #4294967295
 8014916:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8014918:	f7f8 faa6 	bl	800ce68 <osSemaphoreAcquire>
#if defined(USE_LEDS) && defined(USE_SMD_LEDs)
	leds->ClearLED(LED_CONTROLLER);
 801491c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 801491e:	2108      	movs	r1, #8
 8014920:	f002 f841 	bl	80169a6 <_ZN4LEDS8ClearLEDEh>
#endif

	controller_active = false;
 8014924:	2300      	movs	r3, #0
	osSemaphoreRelease(ControlSemaphore);
 8014926:	6b60      	ldr	r0, [r4, #52]	@ 0x34
	controller_active = false;
 8014928:	f884 3071 	strb.w	r3, [r4, #113]	@ 0x71
}
 801492c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(ControlSemaphore);
 8014930:	f7f8 bace 	b.w	800ced0 <osSemaphoreRelease>

08014934 <_ZZN10Controller12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8014934:	b508      	push	{r3, lr}
			if (*input > 0)
 8014936:	7813      	ldrb	r3, [r2, #0]
 8014938:	b11b      	cbz	r3, 8014942 <_ZZN10Controller12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xe>
				self->ActivateController();
 801493a:	f7ff ffd5 	bl	80148e8 <_ZN10Controller18ActivateControllerEv>
		}
 801493e:	2001      	movs	r0, #1
 8014940:	bd08      	pop	{r3, pc}
				self->DeactivateController();
 8014942:	f7ff ffe4 	bl	801490e <_ZN10Controller20DeactivateControllerEv>
 8014946:	e7fa      	b.n	801493e <_ZZN10Controller12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xa>

08014948 <_ZN10Controller15ResetControllerEv>:

/**
 * @brief Reset controller and reset controller variables
 */
void Controller::ResetController(void) {
 8014948:	b510      	push	{r4, lr}
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 801494a:	f04f 31ff 	mov.w	r1, #4294967295
void Controller::ResetController(void) {
 801494e:	4604      	mov	r4, r0
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 8014950:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8014952:	f7f8 fa89 	bl	800ce68 <osSemaphoreAcquire>
	PWM = 0;
 8014956:	2300      	movs	r3, #0
	error_history[0] = 0;
	error_history[1] = 0;
	error_history[2] = 0;
	error_integral = 0;
	osSemaphoreRelease(ControlSemaphore);
 8014958:	6b60      	ldr	r0, [r4, #52]	@ 0x34
	PWM = 0;
 801495a:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
	error_history[0] = 0;
 801495e:	f8c4 3184 	str.w	r3, [r4, #388]	@ 0x184
	error_history[1] = 0;
 8014962:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
	error_history[2] = 0;
 8014966:	f8c4 318c 	str.w	r3, [r4, #396]	@ 0x18c
	error_integral = 0;
 801496a:	f8c4 31a0 	str.w	r3, [r4, #416]	@ 0x1a0
}
 801496e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(ControlSemaphore);
 8014972:	f7f8 baad 	b.w	800ced0 <osSemaphoreRelease>

08014976 <_ZZN10Controller12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8014976:	b508      	push	{r3, lr}
			self->ResetController();
 8014978:	f7ff ffe6 	bl	8014948 <_ZN10Controller15ResetControllerEv>
		}
 801497c:	2001      	movs	r0, #1
 801497e:	bd08      	pop	{r3, pc}

08014980 <_ZN10Controller21SetControllerPeriodMsEm>:
/**
 * @brief Set the controller period
 *
 * @param input period: new controller period
 */
void Controller::SetControllerPeriodMs(uint32_t period) {
 8014980:	b538      	push	{r3, r4, r5, lr}
 8014982:	460d      	mov	r5, r1
 8014984:	4604      	mov	r4, r0
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 8014986:	f04f 31ff 	mov.w	r1, #4294967295
 801498a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801498c:	f7f8 fa6c 	bl	800ce68 <osSemaphoreAcquire>
	period_ms = period; // ms
	period_s = period_ms / 1000.0f;
 8014990:	ee07 5a90 	vmov	s15, r5
 8014994:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80149d0 <_ZN10Controller21SetControllerPeriodMsEm+0x50>
	period_s_half = period_s / 2.0f;
	period_s_inv = 1.0f / period_s;
 8014998:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
	period_s = period_ms / 1000.0f;
 801499c:	eef8 7a67 	vcvt.f32.u32	s15, s15
	period_s_double_inv = period_s_inv / 2.0f;
	osSemaphoreRelease(ControlSemaphore);
 80149a0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
	period_ms = period; // ms
 80149a2:	6765      	str	r5, [r4, #116]	@ 0x74
	period_s = period_ms / 1000.0f;
 80149a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	period_s_half = period_s / 2.0f;
 80149a8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80149ac:	ee67 7a26 	vmul.f32	s15, s14, s13
	period_s = period_ms / 1000.0f;
 80149b0:	ed84 7a69 	vstr	s14, [r4, #420]	@ 0x1a4
	period_s_half = period_s / 2.0f;
 80149b4:	edc4 7a6a 	vstr	s15, [r4, #424]	@ 0x1a8
	period_s_inv = 1.0f / period_s;
 80149b8:	eec6 7a07 	vdiv.f32	s15, s12, s14
 80149bc:	edc4 7a6b 	vstr	s15, [r4, #428]	@ 0x1ac
	period_s_double_inv = period_s_inv / 2.0f;
 80149c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80149c4:	edc4 7a6c 	vstr	s15, [r4, #432]	@ 0x1b0
}
 80149c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	osSemaphoreRelease(ControlSemaphore);
 80149cc:	f7f8 ba80 	b.w	800ced0 <osSemaphoreRelease>
 80149d0:	447a0000 	.word	0x447a0000

080149d4 <_ZZN10Controller12AddRegistersEvENUlPvtPhtE5_4_FUNES0_tS1_t>:
			self->SetControllerPeriodMs(*input);
 80149d4:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80149d6:	b508      	push	{r3, lr}
			self->SetControllerPeriodMs(*input);
 80149d8:	f7ff ffd2 	bl	8014980 <_ZN10Controller21SetControllerPeriodMsEm>
		}
 80149dc:	2001      	movs	r0, #1
 80149de:	bd08      	pop	{r3, pc}

080149e0 <_ZN10Controller14SetEncoderZeroEv>:
}

/**
 * @brief Reset the encoder value
 */
void Controller::SetEncoderZero(void) {
 80149e0:	b510      	push	{r4, lr}
 80149e2:	4604      	mov	r4, r0
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 80149e4:	f04f 31ff 	mov.w	r1, #4294967295
 80149e8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80149ea:	f7f8 fa3d 	bl	800ce68 <osSemaphoreAcquire>
	encoder_offset = (int32_t) (encoder->CNT);
 80149ee:	6c63      	ldr	r3, [r4, #68]	@ 0x44
	osSemaphoreRelease(ControlSemaphore);
 80149f0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
	encoder_offset = (int32_t) (encoder->CNT);
 80149f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149f4:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
}
 80149f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(ControlSemaphore);
 80149fc:	f7f8 ba68 	b.w	800ced0 <osSemaphoreRelease>

08014a00 <_ZZN10Controller12AddRegistersEvENUlPvtPhtE14_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_ID, uint8_t* input, uint16_t length) -> bool {
 8014a00:	b508      	push	{r3, lr}
			self->SetEncoderZero();
 8014a02:	f7ff ffed 	bl	80149e0 <_ZN10Controller14SetEncoderZeroEv>
		}
 8014a06:	2001      	movs	r0, #1
 8014a08:	bd08      	pop	{r3, pc}
	...

08014a0c <_ZN10Controller10DerivationEPfh>:
 * @param input values: the value to derive with previous numbers in an array
 * @param input derivation_mode: mode that defines the derivation computation
 * @return the derivated value
 */
float Controller::Derivation(float values[], uint8_t derivation_mode){
	if (derivation_mode == DER_EULER_1T) {
 8014a0c:	b952      	cbnz	r2, 8014a24 <_ZN10Controller10DerivationEPfh+0x18>
		return (values[0] - values[1]) * period_s_inv;
 8014a0e:	edd1 7a01 	vldr	s15, [r1, #4]
 8014a12:	ed91 0a00 	vldr	s0, [r1]
 8014a16:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014a1a:	edd0 7a6b 	vldr	s15, [r0, #428]	@ 0x1ac
	} else if (derivation_mode == DER_EULER_2T) {
		return (values[0] - values[2]) * period_s_double_inv;
 8014a1e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014a22:	4770      	bx	lr
	} else if (derivation_mode == DER_EULER_2T) {
 8014a24:	2a01      	cmp	r2, #1
 8014a26:	d108      	bne.n	8014a3a <_ZN10Controller10DerivationEPfh+0x2e>
		return (values[0] - values[2]) * period_s_double_inv;
 8014a28:	edd1 7a02 	vldr	s15, [r1, #8]
 8014a2c:	ed91 0a00 	vldr	s0, [r1]
 8014a30:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014a34:	edd0 7a6c 	vldr	s15, [r0, #432]	@ 0x1b0
 8014a38:	e7f1      	b.n	8014a1e <_ZN10Controller10DerivationEPfh+0x12>
	}
	return 0;
 8014a3a:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014a40 <_ZN10Controller10DerivationEPfh+0x34>
}
 8014a3e:	4770      	bx	lr
 8014a40:	00000000 	.word	0x00000000

08014a44 <_ZN10Controller11IntegrationEPfS0_bfh>:
 * @param input saturation_active: whether the integration is saturated as of a threshold
 * @param input saturation: saturation threshold to consider if saturation_active true
 * @param input integration_mode: mode that defines the integration computation
 * @return the new integral value (also accessible via the integral param)
 */
float Controller::Integration(float* integral, float values[], bool saturation_active, float saturation, uint8_t integration_mode){
 8014a44:	eef0 7a40 	vmov.f32	s15, s0
	if (saturation_active)
		if (((values[0] > 0) && (*integral > saturation)) || ((values[0] < 0) && (*integral < -saturation)))
 8014a48:	ed91 0a00 	vldr	s0, [r1]
float Controller::Integration(float* integral, float values[], bool saturation_active, float saturation, uint8_t integration_mode){
 8014a4c:	b510      	push	{r4, lr}
 8014a4e:	f89d 4008 	ldrb.w	r4, [sp, #8]
	if (saturation_active)
 8014a52:	b1bb      	cbz	r3, 8014a84 <_ZN10Controller11IntegrationEPfS0_bfh+0x40>
		if (((values[0] > 0) && (*integral > saturation)) || ((values[0] < 0) && (*integral < -saturation)))
 8014a54:	ed92 7a00 	vldr	s14, [r2]
 8014a58:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a60:	dd04      	ble.n	8014a6c <_ZN10Controller11IntegrationEPfS0_bfh+0x28>
 8014a62:	eef4 7ac0 	vcmpe.f32	s15, s0
 8014a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a6a:	d416      	bmi.n	8014a9a <_ZN10Controller11IntegrationEPfS0_bfh+0x56>
 8014a6c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a74:	d506      	bpl.n	8014a84 <_ZN10Controller11IntegrationEPfS0_bfh+0x40>
 8014a76:	eef1 7a67 	vneg.f32	s15, s15
 8014a7a:	eef4 7ac0 	vcmpe.f32	s15, s0
 8014a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a82:	dc0a      	bgt.n	8014a9a <_ZN10Controller11IntegrationEPfS0_bfh+0x56>
			return *integral;

	if (integration_mode == INT_RECT) {
 8014a84:	b954      	cbnz	r4, 8014a9c <_ZN10Controller11IntegrationEPfS0_bfh+0x58>
		*integral += values[0] * period_s;
 8014a86:	ed92 7a00 	vldr	s14, [r2]
 8014a8a:	edd0 7a69 	vldr	s15, [r0, #420]	@ 0x1a4
 8014a8e:	eea7 0a27 	vfma.f32	s0, s14, s15
	} else if (integration_mode == INT_TRAP) {
		*integral += (values[0] + values[1]) * period_s_half;
 8014a92:	ed81 0a00 	vstr	s0, [r1]
	}
	return *integral;
 8014a96:	ed91 0a00 	vldr	s0, [r1]
}
 8014a9a:	bd10      	pop	{r4, pc}
	} else if (integration_mode == INT_TRAP) {
 8014a9c:	2c01      	cmp	r4, #1
 8014a9e:	d1fa      	bne.n	8014a96 <_ZN10Controller11IntegrationEPfS0_bfh+0x52>
		*integral += (values[0] + values[1]) * period_s_half;
 8014aa0:	ed92 7a01 	vldr	s14, [r2, #4]
 8014aa4:	edd2 7a00 	vldr	s15, [r2]
 8014aa8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014aac:	ed90 7a6a 	vldr	s14, [r0, #424]	@ 0x1a8
 8014ab0:	eea7 0a87 	vfma.f32	s0, s15, s14
 8014ab4:	e7ed      	b.n	8014a92 <_ZN10Controller11IntegrationEPfS0_bfh+0x4e>

08014ab6 <_ZN10Controller14MeasureCurrentEv>:

/**
 * @brief Measure H-bridge current
*/
void Controller::MeasureCurrent(void) {
 8014ab6:	b510      	push	{r4, lr}
 8014ab8:	4604      	mov	r4, r0
	HAL_ADC_Start(ADC);
 8014aba:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8014abc:	f7ef f93c 	bl	8003d38 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(ADC, 1) == HAL_OK) {
 8014ac0:	2101      	movs	r1, #1
 8014ac2:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8014ac4:	f7ee fd6e 	bl	80035a4 <HAL_ADC_PollForConversion>
 8014ac8:	b9e8      	cbnz	r0, 8014b06 <_ZN10Controller14MeasureCurrentEv+0x50>
		motor_current = HAL_ADC_GetValue(ADC) * current_conversion * motor_current_compensation;
 8014aca:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8014acc:	f7ee fe02 	bl	80036d4 <HAL_ADC_GetValue>
 8014ad0:	ee07 0a90 	vmov	s15, r0
 8014ad4:	ed94 7a6d 	vldr	s14, [r4, #436]	@ 0x1b4
 8014ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
		if (HAL_GPIO_ReadPin(IN2.port, IN2.pin) == GPIO_PIN_SET)
 8014adc:	f8b4 106c 	ldrh.w	r1, [r4, #108]	@ 0x6c
 8014ae0:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
		motor_current = HAL_ADC_GetValue(ADC) * current_conversion * motor_current_compensation;
 8014ae2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014ae6:	ed94 7a66 	vldr	s14, [r4, #408]	@ 0x198
 8014aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014aee:	edc4 7a65 	vstr	s15, [r4, #404]	@ 0x194
		if (HAL_GPIO_ReadPin(IN2.port, IN2.pin) == GPIO_PIN_SET)
 8014af2:	f7f1 ffcb 	bl	8006a8c <HAL_GPIO_ReadPin>
 8014af6:	2801      	cmp	r0, #1
			motor_current = -motor_current;
 8014af8:	bf02      	ittt	eq
 8014afa:	edd4 7a65 	vldreq	s15, [r4, #404]	@ 0x194
 8014afe:	eef1 7a67 	vnegeq.f32	s15, s15
 8014b02:	edc4 7a65 	vstreq	s15, [r4, #404]	@ 0x194
	}
	HAL_ADC_Stop(ADC);
 8014b06:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
}
 8014b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_Stop(ADC);
 8014b0c:	f7ef b9e6 	b.w	8003edc <HAL_ADC_Stop>

08014b10 <_ZN10Controller20SelectControllerModeEh>:
void Controller::SelectControllerMode(uint8_t mode_) {
 8014b10:	b570      	push	{r4, r5, r6, lr}
 8014b12:	460d      	mov	r5, r1
 8014b14:	b08c      	sub	sp, #48	@ 0x30
 8014b16:	4604      	mov	r4, r0
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 8014b18:	f04f 31ff 	mov.w	r1, #4294967295
 8014b1c:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8014b1e:	f7f8 f9a3 	bl	800ce68 <osSemaphoreAcquire>
	switch (mode_) {
 8014b22:	2d01      	cmp	r5, #1
 8014b24:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8014b26:	a905      	add	r1, sp, #20
 8014b28:	aa07      	add	r2, sp, #28
	mode = mode_;
 8014b2a:	f884 5072 	strb.w	r5, [r4, #114]	@ 0x72
	switch (mode_) {
 8014b2e:	d01b      	beq.n	8014b68 <_ZN10Controller20SelectControllerModeEh+0x58>
 8014b30:	2d02      	cmp	r5, #2
 8014b32:	d026      	beq.n	8014b82 <_ZN10Controller20SelectControllerModeEh+0x72>
 8014b34:	bb7d      	cbnz	r5, 8014b96 <_ZN10Controller20SelectControllerModeEh+0x86>
		leds->ConfigureTimings(LED_CONTROLLER, std::vector<uint8_t>{1}, 10);
 8014b36:	2301      	movs	r3, #1
 8014b38:	f88d 3014 	strb.w	r3, [sp, #20]
 8014b3c:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8014b40:	4613      	mov	r3, r2
 8014b42:	2201      	movs	r2, #1
		leds->ConfigureTimings(LED_CONTROLLER, std::vector<uint8_t>{5}, 10);
 8014b44:	a809      	add	r0, sp, #36	@ 0x24
 8014b46:	f7ec f91f 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8014b4a:	230a      	movs	r3, #10
 8014b4c:	aa09      	add	r2, sp, #36	@ 0x24
 8014b4e:	2108      	movs	r1, #8
 8014b50:	4630      	mov	r0, r6
 8014b52:	f002 fa10 	bl	8016f76 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
      }
 8014b56:	a809      	add	r0, sp, #36	@ 0x24
 8014b58:	f7eb ffc2 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	osSemaphoreRelease(ControlSemaphore);
 8014b5c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
}
 8014b5e:	b00c      	add	sp, #48	@ 0x30
 8014b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	osSemaphoreRelease(ControlSemaphore);
 8014b64:	f7f8 b9b4 	b.w	800ced0 <osSemaphoreRelease>
		leds->ConfigureTimings(LED_CONTROLLER, std::vector<uint8_t>{1,2,3}, 10);
 8014b68:	f240 2301 	movw	r3, #513	@ 0x201
 8014b6c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014b70:	2303      	movs	r3, #3
 8014b72:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8014b76:	f88d 301e 	strb.w	r3, [sp, #30]
 8014b7a:	2203      	movs	r2, #3
 8014b7c:	460b      	mov	r3, r1
 8014b7e:	9903      	ldr	r1, [sp, #12]
 8014b80:	e7e0      	b.n	8014b44 <_ZN10Controller20SelectControllerModeEh+0x34>
		leds->ConfigureTimings(LED_CONTROLLER, std::vector<uint8_t>{1,2,3,4,5}, 10);
 8014b82:	4b0a      	ldr	r3, [pc, #40]	@ (8014bac <_ZN10Controller20SelectControllerModeEh+0x9c>)
 8014b84:	9307      	str	r3, [sp, #28]
 8014b86:	2305      	movs	r3, #5
 8014b88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b8c:	f88d 3020 	strb.w	r3, [sp, #32]
 8014b90:	ab03      	add	r3, sp, #12
 8014b92:	c906      	ldmia	r1, {r1, r2}
 8014b94:	e7d6      	b.n	8014b44 <_ZN10Controller20SelectControllerModeEh+0x34>
		leds->ConfigureTimings(LED_CONTROLLER, std::vector<uint8_t>{5}, 10);
 8014b96:	2305      	movs	r3, #5
 8014b98:	f88d 300c 	strb.w	r3, [sp, #12]
 8014b9c:	ab03      	add	r3, sp, #12
 8014b9e:	9307      	str	r3, [sp, #28]
 8014ba0:	2301      	movs	r3, #1
 8014ba2:	9308      	str	r3, [sp, #32]
 8014ba4:	460b      	mov	r3, r1
 8014ba6:	ca06      	ldmia	r2, {r1, r2}
 8014ba8:	e7cc      	b.n	8014b44 <_ZN10Controller20SelectControllerModeEh+0x34>
 8014baa:	bf00      	nop
 8014bac:	04030201 	.word	0x04030201

08014bb0 <_ZZN10Controller12AddRegistersEvENUlPvtPhtE7_4_FUNES0_tS1_t>:
			self->SelectControllerMode(*input);
 8014bb0:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8014bb2:	b508      	push	{r3, lr}
			self->SelectControllerMode(*input);
 8014bb4:	f7ff ffac 	bl	8014b10 <_ZN10Controller20SelectControllerModeEh>
		}
 8014bb8:	2001      	movs	r0, #1
 8014bba:	bd08      	pop	{r3, pc}

08014bbc <_ZN10Controller10MoveFromToEff>:
void Controller::MoveFromTo(float start, float target) {
 8014bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bc0:	4604      	mov	r4, r0
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 8014bc2:	f04f 31ff 	mov.w	r1, #4294967295
 8014bc6:	6b40      	ldr	r0, [r0, #52]	@ 0x34
void Controller::MoveFromTo(float start, float target) {
 8014bc8:	ed2d 8b02 	vpush	{d8}
 8014bcc:	b084      	sub	sp, #16
 8014bce:	eeb0 8a40 	vmov.f32	s16, s0
 8014bd2:	eef0 8a60 	vmov.f32	s17, s1
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 8014bd6:	f7f8 f947 	bl	800ce68 <osSemaphoreAcquire>
	ControllerConfiguration* configuration = configurations[mode];
 8014bda:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8014bde:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014be2:	f8d3 7144 	ldr.w	r7, [r3, #324]	@ 0x144
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014be6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
	if (configuration->input_filters.size() > 0 && selected_filter < configuration->input_filters.size()) {
 8014bea:	429a      	cmp	r2, r3
 8014bec:	d026      	beq.n	8014c3c <_ZN10Controller10MoveFromToEff+0x80>
	uint8_t selected_filter = configuration->selected_filter;
 8014bee:	793d      	ldrb	r5, [r7, #4]
 8014bf0:	1a9b      	subs	r3, r3, r2
	if (configuration->input_filters.size() > 0 && selected_filter < configuration->input_filters.size()) {
 8014bf2:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
 8014bf6:	d221      	bcs.n	8014c3c <_ZN10Controller10MoveFromToEff+0x80>
		filtered_start = configuration->input_filters[selected_filter](start, params);
 8014bf8:	f504 76a8 	add.w	r6, r4, #336	@ 0x150
	return *(this->_M_impl._M_start + __n);
 8014bfc:	b22d      	sxth	r5, r5
 8014bfe:	a801      	add	r0, sp, #4
 8014c00:	4631      	mov	r1, r6
 8014c02:	f852 8025 	ldr.w	r8, [r2, r5, lsl #2]
 8014c06:	f7fe feaf 	bl	8013968 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8014c0a:	eeb0 0a48 	vmov.f32	s0, s16
 8014c0e:	a801      	add	r0, sp, #4
 8014c10:	47c0      	blx	r8
      }
 8014c12:	a801      	add	r0, sp, #4
 8014c14:	eeb0 8a40 	vmov.f32	s16, s0
 8014c18:	f7ed f9c0 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
		filtered_target = configuration->input_filters[selected_filter](target, params);
 8014c1c:	68bb      	ldr	r3, [r7, #8]
 8014c1e:	4631      	mov	r1, r6
 8014c20:	a801      	add	r0, sp, #4
 8014c22:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8014c26:	f7fe fe9f 	bl	8013968 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8014c2a:	eeb0 0a68 	vmov.f32	s0, s17
 8014c2e:	a801      	add	r0, sp, #4
 8014c30:	47a8      	blx	r5
 8014c32:	a801      	add	r0, sp, #4
 8014c34:	eef0 8a40 	vmov.f32	s17, s0
 8014c38:	f7ed f9b0 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	trajectory_generator.StartTrajectory(filtered_start, filtered_target);
 8014c3c:	4620      	mov	r0, r4
 8014c3e:	eef0 0a68 	vmov.f32	s1, s17
 8014c42:	eeb0 0a48 	vmov.f32	s0, s16
 8014c46:	f008 ffbb 	bl	801dbc0 <_ZN19TrajectoryGenerator15StartTrajectoryEff>
	osSemaphoreRelease(ControlSemaphore);
 8014c4a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
}
 8014c4c:	b004      	add	sp, #16
 8014c4e:	ecbd 8b02 	vpop	{d8}
 8014c52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	osSemaphoreRelease(ControlSemaphore);
 8014c56:	f7f8 b93b 	b.w	800ced0 <osSemaphoreRelease>

08014c5a <_ZZN10Controller12AddRegistersEvENUlPvtPftE12_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8014c5a:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_ID, float* input, uint16_t length) -> bool {
 8014c5c:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8014c5e:	d107      	bne.n	8014c70 <_ZZN10Controller12AddRegistersEvENUlPvtPftE12_4_FUNES0_tS1_t+0x16>
			self->MoveFromTo(input[0], input[1]);
 8014c60:	edd2 0a01 	vldr	s1, [r2, #4]
 8014c64:	ed92 0a00 	vldr	s0, [r2]
 8014c68:	f7ff ffa8 	bl	8014bbc <_ZN10Controller10MoveFromToEff>
 8014c6c:	2001      	movs	r0, #1
		}
 8014c6e:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8014c70:	2000      	movs	r0, #0
 8014c72:	e7fc      	b.n	8014c6e <_ZZN10Controller12AddRegistersEvENUlPvtPftE12_4_FUNES0_tS1_t+0x14>

08014c74 <_ZN10Controller6MoveToEf>:
void Controller::MoveTo(float target) {
 8014c74:	b570      	push	{r4, r5, r6, lr}
 8014c76:	4604      	mov	r4, r0
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 8014c78:	f04f 31ff 	mov.w	r1, #4294967295
 8014c7c:	6b40      	ldr	r0, [r0, #52]	@ 0x34
void Controller::MoveTo(float target) {
 8014c7e:	ed2d 8b02 	vpush	{d8}
 8014c82:	b084      	sub	sp, #16
 8014c84:	eeb0 8a40 	vmov.f32	s16, s0
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 8014c88:	f7f8 f8ee 	bl	800ce68 <osSemaphoreAcquire>
	ControllerConfiguration* configuration = configurations[mode];
 8014c8c:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8014c90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014c94:	f8d3 5144 	ldr.w	r5, [r3, #324]	@ 0x144
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014c98:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
	if (configuration->input_filters.size() > 0 && selected_filter < configuration->input_filters.size()) {
 8014c9c:	429a      	cmp	r2, r3
 8014c9e:	d014      	beq.n	8014cca <_ZN10Controller6MoveToEf+0x56>
	uint8_t selected_filter = configuration->selected_filter;
 8014ca0:	7929      	ldrb	r1, [r5, #4]
 8014ca2:	1a9b      	subs	r3, r3, r2
	if (configuration->input_filters.size() > 0 && selected_filter < configuration->input_filters.size()) {
 8014ca4:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 8014ca8:	d20f      	bcs.n	8014cca <_ZN10Controller6MoveToEf+0x56>
		filtered_target = configuration->input_filters[selected_filter](target, params);
 8014caa:	f852 6021 	ldr.w	r6, [r2, r1, lsl #2]
 8014cae:	a801      	add	r0, sp, #4
 8014cb0:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
 8014cb4:	f7fe fe58 	bl	8013968 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8014cb8:	eeb0 0a48 	vmov.f32	s0, s16
 8014cbc:	a801      	add	r0, sp, #4
 8014cbe:	47b0      	blx	r6
      }
 8014cc0:	a801      	add	r0, sp, #4
 8014cc2:	eeb0 8a40 	vmov.f32	s16, s0
 8014cc6:	f7ed f969 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	trajectory_generator.StartTrajectory(*(configuration->track), filtered_target);
 8014cca:	682b      	ldr	r3, [r5, #0]
 8014ccc:	4620      	mov	r0, r4
 8014cce:	eef0 0a48 	vmov.f32	s1, s16
 8014cd2:	ed93 0a00 	vldr	s0, [r3]
 8014cd6:	f008 ff73 	bl	801dbc0 <_ZN19TrajectoryGenerator15StartTrajectoryEff>
	osSemaphoreRelease(ControlSemaphore);
 8014cda:	6b60      	ldr	r0, [r4, #52]	@ 0x34
}
 8014cdc:	b004      	add	sp, #16
 8014cde:	ecbd 8b02 	vpop	{d8}
 8014ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	osSemaphoreRelease(ControlSemaphore);
 8014ce6:	f7f8 b8f3 	b.w	800ced0 <osSemaphoreRelease>

08014cea <_ZZN10Controller12AddRegistersEvENUlPvtPftE13_4_FUNES0_tS1_t>:
			self->MoveTo(*input);
 8014cea:	ed92 0a00 	vldr	s0, [r2]
		[](void* context, uint16_t register_ID, float* input, uint16_t length) -> bool {
 8014cee:	b508      	push	{r3, lr}
			self->MoveTo(*input);
 8014cf0:	f7ff ffc0 	bl	8014c74 <_ZN10Controller6MoveToEf>
		}
 8014cf4:	2001      	movs	r0, #1
 8014cf6:	bd08      	pop	{r3, pc}

08014cf8 <_ZN10Controller7ControlEv>:
void Controller::Control(void){
 8014cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cfa:	4604      	mov	r4, r0
 8014cfc:	b08b      	sub	sp, #44	@ 0x2c
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 8014cfe:	f04f 31ff 	mov.w	r1, #4294967295
 8014d02:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8014d04:	f7f8 f8b0 	bl	800ce68 <osSemaphoreAcquire>
	encoder_position = ((int32_t) (encoder->CNT)) - encoder_offset;
 8014d08:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8014d0a:	f8d4 2168 	ldr.w	r2, [r4, #360]	@ 0x168
 8014d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d10:	1a9b      	subs	r3, r3, r2
	if (encoder_security_threshold > 0 && (uint32_t) abs((int32_t) encoder_position) > encoder_security_threshold) {
 8014d12:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
	encoder_position = ((int32_t) (encoder->CNT)) - encoder_offset;
 8014d16:	ee07 3a90 	vmov	s15, r3
 8014d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d1e:	edc4 7a5c 	vstr	s15, [r4, #368]	@ 0x170
	if (encoder_security_threshold > 0 && (uint32_t) abs((int32_t) encoder_position) > encoder_security_threshold) {
 8014d22:	b18a      	cbz	r2, 8014d48 <_ZN10Controller7ControlEv+0x50>
 8014d24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014d28:	ee17 3a90 	vmov	r3, s15
  abs(long __i) { return __builtin_labs(__i); }
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	bfb8      	it	lt
 8014d30:	425b      	neglt	r3, r3
 8014d32:	429a      	cmp	r2, r3
 8014d34:	d208      	bcs.n	8014d48 <_ZN10Controller7ControlEv+0x50>
		controller_active = false;
 8014d36:	2300      	movs	r3, #0
		DeactivateBridge();
 8014d38:	4620      	mov	r0, r4
		controller_active = false;
 8014d3a:	f884 3071 	strb.w	r3, [r4, #113]	@ 0x71
		DeactivateBridge();
 8014d3e:	f7ff fdb6 	bl	80148ae <_ZN10Controller16DeactivateBridgeEv>
		ControllerFaultLEDS(leds);
 8014d42:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8014d44:	f7fa f9cc 	bl	800f0e0 <_Z19ControllerFaultLEDSP4LEDS>
	MeasureCurrent();
 8014d48:	4620      	mov	r0, r4
 8014d4a:	f7ff feb4 	bl	8014ab6 <_ZN10Controller14MeasureCurrentEv>
	bool success = registers->ReadRegister<float>(REG_MOTOR_VOLTAGE, &motor_voltage, &length);
 8014d4e:	2301      	movs	r3, #1
 8014d50:	f504 72c8 	add.w	r2, r4, #400	@ 0x190
 8014d54:	f44f 710a 	mov.w	r1, #552	@ 0x228
 8014d58:	9300      	str	r3, [sp, #0]
 8014d5a:	f10d 030e 	add.w	r3, sp, #14
 8014d5e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014d60:	f7fa ffaa 	bl	800fcb8 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb>
	if (success)
 8014d64:	b138      	cbz	r0, 8014d76 <_ZN10Controller7ControlEv+0x7e>
		motor_power = motor_current * motor_voltage;
 8014d66:	edd4 7a65 	vldr	s15, [r4, #404]	@ 0x194
 8014d6a:	ed94 7a64 	vldr	s14, [r4, #400]	@ 0x190
 8014d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d72:	edc4 7a67 	vstr	s15, [r4, #412]	@ 0x19c
	if (controller_active) {
 8014d76:	f894 3071 	ldrb.w	r3, [r4, #113]	@ 0x71
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	f000 80e0 	beq.w	8014f40 <_ZN10Controller7ControlEv+0x248>
		encoder_history[1] = encoder_history[0];
 8014d80:	ed94 7a5d 	vldr	s14, [r4, #372]	@ 0x174
		setpoint = trajectory_generator.GenerateSetPoint();
 8014d84:	4620      	mov	r0, r4
		encoder_history[0] = encoder_position;
 8014d86:	edd4 7a5c 	vldr	s15, [r4, #368]	@ 0x170
		encoder_history[2] = encoder_history[1];
 8014d8a:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
		encoder_history[0] = encoder_position;
 8014d8e:	edc4 7a5d 	vstr	s15, [r4, #372]	@ 0x174
		return (values[0] - values[1]) * period_s_inv;
 8014d92:	ee77 7ac7 	vsub.f32	s15, s15, s14
		encoder_history[1] = encoder_history[0];
 8014d96:	ed84 7a5e 	vstr	s14, [r4, #376]	@ 0x178
		return (values[0] - values[1]) * period_s_inv;
 8014d9a:	ed94 7a6b 	vldr	s14, [r4, #428]	@ 0x1ac
		encoder_history[2] = encoder_history[1];
 8014d9e:	f8c4 317c 	str.w	r3, [r4, #380]	@ 0x17c
		return (values[0] - values[1]) * period_s_inv;
 8014da2:	ee67 7a87 	vmul.f32	s15, s15, s14
		encoder_speed = Derivation(encoder_history, DEFAULT_SPEED_DERIVATION_MODE);
 8014da6:	edc4 7a60 	vstr	s15, [r4, #384]	@ 0x180
		setpoint = trajectory_generator.GenerateSetPoint();
 8014daa:	f008 ffd9 	bl	801dd60 <_ZN19TrajectoryGenerator16GenerateSetPointEv>
		float error = setpoint - *((*configurations[mode]).track);
 8014dae:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
		setpoint = trajectory_generator.GenerateSetPoint();
 8014db2:	ed84 0a58 	vstr	s0, [r4, #352]	@ 0x160
		float error = setpoint - *((*configurations[mode]).track);
 8014db6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014dba:	f8d3 5144 	ldr.w	r5, [r3, #324]	@ 0x144
 8014dbe:	682b      	ldr	r3, [r5, #0]
 8014dc0:	edd3 7a00 	vldr	s15, [r3]
		error_history[2] = error_history[1];
 8014dc4:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
		float error = setpoint - *((*configurations[mode]).track);
 8014dc8:	ee30 0a67 	vsub.f32	s0, s0, s15
		PWM = 0;
 8014dcc:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8014f5c <_ZN10Controller7ControlEv+0x264>
		error_history[2] = error_history[1];
 8014dd0:	f8c4 318c 	str.w	r3, [r4, #396]	@ 0x18c
		error_history[1] = error_history[0];
 8014dd4:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
		PWM = 0;
 8014dd8:	edc4 7a59 	vstr	s15, [r4, #356]	@ 0x164
		error_history[1] = error_history[0];
 8014ddc:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
		if ((*configurations[mode]).P_active) 		PWM += error;
 8014de0:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
		error_history[0] = error;
 8014de4:	ed84 0a61 	vstr	s0, [r4, #388]	@ 0x184
		if ((*configurations[mode]).P_active) 		PWM += error;
 8014de8:	b11b      	cbz	r3, 8014df2 <_ZN10Controller7ControlEv+0xfa>
 8014dea:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014dee:	ed84 0a59 	vstr	s0, [r4, #356]	@ 0x164
		if ((*configurations[mode]).I_active) 		PWM += (*configurations[mode]).Ti_inv * Integration(&error_integral, error_history, (*configurations[mode]).S_active, (*configurations[mode]).Isaturation, integration_type);
 8014df2:	f895 3025 	ldrb.w	r3, [r5, #37]	@ 0x25
 8014df6:	b1ab      	cbz	r3, 8014e24 <_ZN10Controller7ControlEv+0x12c>
 8014df8:	f894 215c 	ldrb.w	r2, [r4, #348]	@ 0x15c
 8014dfc:	f504 71d0 	add.w	r1, r4, #416	@ 0x1a0
 8014e00:	edd5 6a06 	vldr	s13, [r5, #24]
 8014e04:	4620      	mov	r0, r4
 8014e06:	f895 3027 	ldrb.w	r3, [r5, #39]	@ 0x27
 8014e0a:	9200      	str	r2, [sp, #0]
 8014e0c:	f504 72c2 	add.w	r2, r4, #388	@ 0x184
 8014e10:	ed95 0a08 	vldr	s0, [r5, #32]
 8014e14:	f7ff fe16 	bl	8014a44 <_ZN10Controller11IntegrationEPfS0_bfh>
 8014e18:	edd4 7a59 	vldr	s15, [r4, #356]	@ 0x164
 8014e1c:	eee6 7a80 	vfma.f32	s15, s13, s0
 8014e20:	edc4 7a59 	vstr	s15, [r4, #356]	@ 0x164
		if ((*configurations[mode]).D_active) 		PWM += (*configurations[mode]).Td * Derivation(error_history, derivation_type);
 8014e24:	f895 3026 	ldrb.w	r3, [r5, #38]	@ 0x26
 8014e28:	b173      	cbz	r3, 8014e48 <_ZN10Controller7ControlEv+0x150>
 8014e2a:	ed94 7a59 	vldr	s14, [r4, #356]	@ 0x164
 8014e2e:	f504 71c2 	add.w	r1, r4, #388	@ 0x184
 8014e32:	edd5 6a07 	vldr	s13, [r5, #28]
 8014e36:	4620      	mov	r0, r4
 8014e38:	f894 215d 	ldrb.w	r2, [r4, #349]	@ 0x15d
 8014e3c:	f7ff fde6 	bl	8014a0c <_ZN10Controller10DerivationEPfh>
 8014e40:	eea6 7a80 	vfma.f32	s14, s13, s0
 8014e44:	ed84 7a59 	vstr	s14, [r4, #356]	@ 0x164
		PWM = (*configurations[mode]).K * PWM;
 8014e48:	edd4 7a59 	vldr	s15, [r4, #356]	@ 0x164
 8014e4c:	ed95 7a05 	vldr	s14, [r5, #20]
		if ((*configurations[mode]).model_active) 	PWM += (*configurations[mode]).model((*configurations[mode]).model_variables, params);
 8014e50:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
		PWM = (*configurations[mode]).K * PWM;
 8014e54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014e58:	edc4 7a59 	vstr	s15, [r4, #356]	@ 0x164
		if ((*configurations[mode]).model_active) 	PWM += (*configurations[mode]).model((*configurations[mode]).model_variables, params);
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d039      	beq.n	8014ed4 <_ZN10Controller7ControlEv+0x1dc>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014e60:	2300      	movs	r3, #0
 8014e62:	6b6f      	ldr	r7, [r5, #52]	@ 0x34
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014e64:	e9d5 260e 	ldrd	r2, r6, [r5, #56]	@ 0x38
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014e68:	e9cd 3304 	strd	r3, r3, [sp, #16]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014e6c:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8014e6e:	9306      	str	r3, [sp, #24]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014e70:	d072      	beq.n	8014f58 <_ZN10Controller7ControlEv+0x260>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8014e72:	4b3b      	ldr	r3, [pc, #236]	@ (8014f60 <_ZN10Controller7ControlEv+0x268>)
 8014e74:	429e      	cmp	r6, r3
 8014e76:	d901      	bls.n	8014e7c <_ZN10Controller7ControlEv+0x184>
	      std::__throw_bad_array_new_length();
 8014e78:	f009 f979 	bl	801e16e <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8014e7c:	4630      	mov	r0, r6
 8014e7e:	f009 f8c4 	bl	801e00a <_Znwj>
 8014e82:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8014e84:	441e      	add	r6, r3
      : _M_current(__i) { }
 8014e86:	e9d5 120e 	ldrd	r1, r2, [r5, #56]	@ 0x38
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8014e8a:	e9cd 3304 	strd	r3, r3, [sp, #16]
	  if (_Num)
 8014e8e:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 8014e90:	eba2 0501 	sub.w	r5, r2, r1
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8014e94:	9606      	str	r6, [sp, #24]
	  if (_Num)
 8014e96:	d004      	beq.n	8014ea2 <_ZN10Controller7ControlEv+0x1aa>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8014e98:	4618      	mov	r0, r3
 8014e9a:	462a      	mov	r2, r5
 8014e9c:	f00a f832 	bl	801ef04 <memmove>
 8014ea0:	4603      	mov	r3, r0
	  return __result + _Num;
 8014ea2:	442b      	add	r3, r5
 8014ea4:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
 8014ea8:	a807      	add	r0, sp, #28
	this->_M_impl._M_finish =
 8014eaa:	9305      	str	r3, [sp, #20]
 8014eac:	f7fe fd5c 	bl	8013968 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8014eb0:	a907      	add	r1, sp, #28
 8014eb2:	a804      	add	r0, sp, #16
 8014eb4:	47b8      	blx	r7
 8014eb6:	edd4 7a59 	vldr	s15, [r4, #356]	@ 0x164
      }
 8014eba:	a807      	add	r0, sp, #28
 8014ebc:	ee77 7a80 	vadd.f32	s15, s15, s0
 8014ec0:	edc4 7a59 	vstr	s15, [r4, #356]	@ 0x164
 8014ec4:	f7ed f86a 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	_M_deallocate(_M_impl._M_start,
 8014ec8:	9804      	ldr	r0, [sp, #16]
	if (__p)
 8014eca:	b118      	cbz	r0, 8014ed4 <_ZN10Controller7ControlEv+0x1dc>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8014ecc:	9906      	ldr	r1, [sp, #24]
 8014ece:	1a09      	subs	r1, r1, r0
 8014ed0:	f009 f876 	bl	801dfc0 <_ZdlPvj>
		HAL_GPIO_WritePin(IN1.port, IN1.pin, (GPIO_PinState) (*((*configurations[mode]).direction_criteria) > 0));
 8014ed4:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8014ed8:	f8b4 1064 	ldrh.w	r1, [r4, #100]	@ 0x64
 8014edc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014ee0:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8014ee2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8014ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ee8:	edd3 7a00 	vldr	s15, [r3]
 8014eec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ef4:	bfcc      	ite	gt
 8014ef6:	2201      	movgt	r2, #1
 8014ef8:	2200      	movle	r2, #0
 8014efa:	f7f1 fdce 	bl	8006a9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2.port, IN2.pin, (GPIO_PinState) (*((*configurations[mode]).direction_criteria) < 0));
 8014efe:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8014f02:	f8b4 106c 	ldrh.w	r1, [r4, #108]	@ 0x6c
 8014f06:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014f0a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8014f0c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8014f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f12:	edd3 7a00 	vldr	s15, [r3]
 8014f16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f1e:	bf4c      	ite	mi
 8014f20:	2201      	movmi	r2, #1
 8014f22:	2200      	movpl	r2, #0
 8014f24:	f7f1 fdb9 	bl	8006a9a <HAL_GPIO_WritePin>
		*pulse = (*configurations[mode]).PWMAssignement(PWM);
 8014f28:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8014f2c:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8014f2e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014f32:	ed94 0a59 	vldr	s0, [r4, #356]	@ 0x164
 8014f36:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8014f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f3c:	4798      	blx	r3
 8014f3e:	6028      	str	r0, [r5, #0]
	osSemaphoreRelease(ControlSemaphore);
 8014f40:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8014f42:	f7f7 ffc5 	bl	800ced0 <osSemaphoreRelease>
	publishers->SpinPublisher(PUBLISHER_CONTROLLER);
 8014f46:	2104      	movs	r1, #4
 8014f48:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8014f4a:	f004 f8ef 	bl	801912c <_ZN10Publishers13SpinPublisherEh>
	osDelay(period_ms);
 8014f4e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8014f50:	f7f7 ff20 	bl	800cd94 <osDelay>
}
 8014f54:	b00b      	add	sp, #44	@ 0x2c
 8014f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014f58:	4633      	mov	r3, r6
 8014f5a:	e793      	b.n	8014e84 <_ZN10Controller7ControlEv+0x18c>
 8014f5c:	00000000 	.word	0x00000000
 8014f60:	7ffffffc 	.word	0x7ffffffc

08014f64 <_ZN9Registers11AddRegisterIfEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8014f64:	b570      	push	{r4, r5, r6, lr}
 8014f66:	4604      	mov	r4, r0
 8014f68:	b086      	sub	sp, #24
 8014f6a:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014f6c:	6800      	ldr	r0, [r0, #0]
 8014f6e:	f04f 31ff 	mov.w	r1, #4294967295
 8014f72:	f7f7 ff79 	bl	800ce68 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8014f76:	f10d 0207 	add.w	r2, sp, #7
 8014f7a:	4631      	mov	r1, r6
 8014f7c:	4620      	mov	r0, r4
 8014f7e:	f004 fc70 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8014f82:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8014f86:	b125      	cbz	r5, 8014f92 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8014f88:	6820      	ldr	r0, [r4, #0]
 8014f8a:	f7f7 ffa1 	bl	800ced0 <osSemaphoreRelease>
}
 8014f8e:	b006      	add	sp, #24
 8014f90:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014f92:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8014f96:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014f9a:	f7ff faf3 	bl	8014584 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	configuration_.register_info = register_;
 8014f9e:	2301      	movs	r3, #1
 8014fa0:	f8ad 600a 	strh.w	r6, [sp, #10]
 8014fa4:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8014fa8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8014fac:	f88d 000c 	strb.w	r0, [sp, #12]
 8014fb0:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8014fb4:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d0e5      	beq.n	8014f88 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8014fbc:	a902      	add	r1, sp, #8
 8014fbe:	1d20      	adds	r0, r4, #4
 8014fc0:	f7fa ff84 	bl	800fecc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8014fc4:	e7e0      	b.n	8014f88 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>

08014fc6 <_ZN9Registers11AddRegisterImEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8014fc6:	b570      	push	{r4, r5, r6, lr}
 8014fc8:	4604      	mov	r4, r0
 8014fca:	b086      	sub	sp, #24
 8014fcc:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014fce:	6800      	ldr	r0, [r0, #0]
 8014fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8014fd4:	f7f7 ff48 	bl	800ce68 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8014fd8:	f10d 0207 	add.w	r2, sp, #7
 8014fdc:	4631      	mov	r1, r6
 8014fde:	4620      	mov	r0, r4
 8014fe0:	f004 fc3f 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8014fe4:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8014fe8:	b125      	cbz	r5, 8014ff4 <_ZN9Registers11AddRegisterImEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8014fea:	6820      	ldr	r0, [r4, #0]
 8014fec:	f7f7 ff70 	bl	800ced0 <osSemaphoreRelease>
}
 8014ff0:	b006      	add	sp, #24
 8014ff2:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014ff4:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8014ff8:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014ffc:	f7ff fb10 	bl	8014620 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	configuration_.register_info = register_;
 8015000:	2301      	movs	r3, #1
 8015002:	f8ad 600a 	strh.w	r6, [sp, #10]
 8015006:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801500a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 801500e:	f88d 000c 	strb.w	r0, [sp, #12]
 8015012:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8015016:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 801501a:	2b00      	cmp	r3, #0
 801501c:	d0e5      	beq.n	8014fea <_ZN9Registers11AddRegisterImEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 801501e:	a902      	add	r1, sp, #8
 8015020:	1d20      	adds	r0, r4, #4
 8015022:	f7fa ff53 	bl	800fecc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8015026:	e7e0      	b.n	8014fea <_ZN9Registers11AddRegisterImEEbt.isra.0+0x24>

08015028 <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8015028:	b570      	push	{r4, r5, r6, lr}
 801502a:	4604      	mov	r4, r0
 801502c:	b086      	sub	sp, #24
 801502e:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8015030:	6800      	ldr	r0, [r0, #0]
 8015032:	f04f 31ff 	mov.w	r1, #4294967295
 8015036:	f7f7 ff17 	bl	800ce68 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801503a:	f10d 0207 	add.w	r2, sp, #7
 801503e:	4631      	mov	r1, r6
 8015040:	4620      	mov	r0, r4
 8015042:	f004 fc0e 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8015046:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801504a:	b125      	cbz	r5, 8015056 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 801504c:	6820      	ldr	r0, [r4, #0]
 801504e:	f7f7 ff3f 	bl	800ced0 <osSemaphoreRelease>
}
 8015052:	b006      	add	sp, #24
 8015054:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8015056:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 801505a:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801505e:	f7ff fb2d 	bl	80146bc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 8015062:	2301      	movs	r3, #1
 8015064:	f8ad 600a 	strh.w	r6, [sp, #10]
 8015068:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801506c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8015070:	f88d 000c 	strb.w	r0, [sp, #12]
 8015074:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8015078:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 801507c:	2b00      	cmp	r3, #0
 801507e:	d0e5      	beq.n	801504c <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8015080:	a902      	add	r1, sp, #8
 8015082:	1d20      	adds	r0, r4, #4
 8015084:	f7fa ff22 	bl	800fecc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8015088:	e7e0      	b.n	801504c <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

0801508a <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801508a:	b570      	push	{r4, r5, r6, lr}
 801508c:	460c      	mov	r4, r1
 801508e:	b086      	sub	sp, #24
 8015090:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8015092:	f04f 31ff 	mov.w	r1, #4294967295
 8015096:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 8015098:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801509a:	f7f7 fee5 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801509e:	4621      	mov	r1, r4
 80150a0:	f10d 0207 	add.w	r2, sp, #7
 80150a4:	4628      	mov	r0, r5
 80150a6:	f004 fbdc 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80150aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80150ae:	4604      	mov	r4, r0
	if (!success) {
 80150b0:	b923      	cbnz	r3, 80150bc <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 80150b2:	6828      	ldr	r0, [r5, #0]
 80150b4:	f7f7 ff0c 	bl	800ced0 <osSemaphoreRelease>
}
 80150b8:	b006      	add	sp, #24
 80150ba:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 80150bc:	f10d 0007 	add.w	r0, sp, #7
 80150c0:	f7ff fafc 	bl	80146bc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 80150c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d0f2      	beq.n	80150b2 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 80150cc:	7923      	ldrb	r3, [r4, #4]
 80150ce:	4298      	cmp	r0, r3
 80150d0:	d1ef      	bne.n	80150b2 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 80150d2:	3004      	adds	r0, #4
 80150d4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80150d8:	2800      	cmp	r0, #0
 80150da:	d0ea      	beq.n	80150b2 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 80150dc:	7823      	ldrb	r3, [r4, #0]
 80150de:	b983      	cbnz	r3, 8015102 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x78>
 80150e0:	7863      	ldrb	r3, [r4, #1]
 80150e2:	b973      	cbnz	r3, 8015102 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x78>
		target_callback_list->push_back(callback);
 80150e4:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 80150e6:	9602      	str	r6, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80150e8:	e9d0 2300 	ldrd	r2, r3, [r0]
 80150ec:	1a9b      	subs	r3, r3, r2
 80150ee:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 80150f0:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 80150f2:	f7fb fda3 	bl	8010c3c <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 80150f6:	2301      	movs	r3, #1
 80150f8:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 80150fa:	f240 1301 	movw	r3, #257	@ 0x101
 80150fe:	8123      	strh	r3, [r4, #8]
 8015100:	e7d7      	b.n	80150b2 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8015102:	8961      	ldrh	r1, [r4, #10]
 8015104:	f7fb fc5e 	bl	80109c4 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->pointer = pointer;
 8015108:	6006      	str	r6, [r0, #0]
 801510a:	e7f4      	b.n	80150f6 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x6c>

0801510c <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>:
bool Registers::AddReadCallback(uint16_t ID, void* context, bool (*read)(void*, uint16_t, T**, uint16_t*)) {
 801510c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801510e:	460c      	mov	r4, r1
 8015110:	b087      	sub	sp, #28
 8015112:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8015114:	f04f 31ff 	mov.w	r1, #4294967295
 8015118:	6800      	ldr	r0, [r0, #0]
bool Registers::AddReadCallback(uint16_t ID, void* context, bool (*read)(void*, uint16_t, T**, uint16_t*)) {
 801511a:	461e      	mov	r6, r3
 801511c:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801511e:	f7f7 fea3 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8015122:	4621      	mov	r1, r4
 8015124:	f10d 0207 	add.w	r2, sp, #7
 8015128:	4628      	mov	r0, r5
 801512a:	f004 fb9a 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801512e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8015132:	4604      	mov	r4, r0
	if (!success) {
 8015134:	b923      	cbnz	r3, 8015140 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 8015136:	6828      	ldr	r0, [r5, #0]
 8015138:	f7f7 feca 	bl	800ced0 <osSemaphoreRelease>
}
 801513c:	b007      	add	sp, #28
 801513e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8015140:	f10d 0007 	add.w	r0, sp, #7
 8015144:	f7ff faba 	bl	80146bc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8015148:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d0f2      	beq.n	8015136 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 8015150:	7923      	ldrb	r3, [r4, #4]
 8015152:	4298      	cmp	r0, r3
 8015154:	d1ef      	bne.n	8015136 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 8015156:	3004      	adds	r0, #4
 8015158:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801515c:	2800      	cmp	r0, #0
 801515e:	d0ea      	beq.n	8015136 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8015160:	7823      	ldrb	r3, [r4, #0]
 8015162:	b983      	cbnz	r3, 8015186 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x7a>
 8015164:	7863      	ldrb	r3, [r4, #1]
 8015166:	b973      	cbnz	r3, 8015186 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x7a>
		target_callback_list->push_back(callback);
 8015168:	a902      	add	r1, sp, #8
		callback.read = read;
 801516a:	9605      	str	r6, [sp, #20]
		callback.write = NULL;
 801516c:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8015170:	e9d0 2300 	ldrd	r2, r3, [r0]
 8015174:	1a9b      	subs	r3, r3, r2
 8015176:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8015178:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 801517a:	f7fb fd5f 	bl	8010c3c <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 801517e:	2301      	movs	r3, #1
 8015180:	7063      	strb	r3, [r4, #1]
	target_register->access.read = true;
 8015182:	7263      	strb	r3, [r4, #9]
 8015184:	e7d7      	b.n	8015136 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8015186:	8961      	ldrh	r1, [r4, #10]
 8015188:	f7fb fc1c 	bl	80109c4 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->context = context;
 801518c:	6047      	str	r7, [r0, #4]
		callback->read = read;
 801518e:	60c6      	str	r6, [r0, #12]
 8015190:	e7f5      	b.n	801517e <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x72>

08015192 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8015192:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015194:	460c      	mov	r4, r1
 8015196:	b087      	sub	sp, #28
 8015198:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801519a:	f04f 31ff 	mov.w	r1, #4294967295
 801519e:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 80151a0:	461e      	mov	r6, r3
 80151a2:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80151a4:	f7f7 fe60 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80151a8:	4621      	mov	r1, r4
 80151aa:	f10d 0207 	add.w	r2, sp, #7
 80151ae:	4628      	mov	r0, r5
 80151b0:	f004 fb57 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80151b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80151b8:	4604      	mov	r4, r0
	if (!success) {
 80151ba:	b923      	cbnz	r3, 80151c6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 80151bc:	6828      	ldr	r0, [r5, #0]
 80151be:	f7f7 fe87 	bl	800ced0 <osSemaphoreRelease>
}
 80151c2:	b007      	add	sp, #28
 80151c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 80151c6:	f10d 0007 	add.w	r0, sp, #7
 80151ca:	f7ff fa77 	bl	80146bc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 80151ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d0f2      	beq.n	80151bc <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 80151d6:	7923      	ldrb	r3, [r4, #4]
 80151d8:	4298      	cmp	r0, r3
 80151da:	d1ef      	bne.n	80151bc <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 80151dc:	3004      	adds	r0, #4
 80151de:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80151e2:	2800      	cmp	r0, #0
 80151e4:	d0ea      	beq.n	80151bc <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 80151e6:	7823      	ldrb	r3, [r4, #0]
 80151e8:	b983      	cbnz	r3, 801520c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 80151ea:	7863      	ldrb	r3, [r4, #1]
 80151ec:	b973      	cbnz	r3, 801520c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 80151ee:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 80151f0:	a902      	add	r1, sp, #8
 80151f2:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 80151f6:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80151fa:	1a9b      	subs	r3, r3, r2
 80151fc:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 80151fe:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8015200:	f7fb fd1c 	bl	8010c3c <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8015204:	2301      	movs	r3, #1
 8015206:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8015208:	7223      	strb	r3, [r4, #8]
 801520a:	e7d7      	b.n	80151bc <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801520c:	8961      	ldrh	r1, [r4, #10]
 801520e:	f7fb fbd9 	bl	80109c4 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 8015212:	e9c0 7601 	strd	r7, r6, [r0, #4]
 8015216:	e7f5      	b.n	8015204 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x72>

08015218 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8015218:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801521c:	e9d0 8900 	ldrd	r8, r9, [r0]
 8015220:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8015222:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015226:	eba9 0208 	sub.w	r2, r9, r8
 801522a:	4607      	mov	r7, r0
 801522c:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 801522e:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015232:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 8015236:	d102      	bne.n	801523e <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8015238:	4820      	ldr	r0, [pc, #128]	@ (80152bc <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 801523a:	f008 ff9b 	bl	801e174 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 801523e:	45c1      	cmp	r9, r8
 8015240:	bf14      	ite	ne
 8015242:	4622      	movne	r2, r4
 8015244:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8015246:	eba1 0508 	sub.w	r5, r1, r8
 801524a:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801524c:	d231      	bcs.n	80152b2 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801524e:	b394      	cbz	r4, 80152b6 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015250:	429c      	cmp	r4, r3
 8015252:	bf28      	it	cs
 8015254:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8015256:	0120      	lsls	r0, r4, #4
 8015258:	f008 fed7 	bl	801e00a <_Znwj>
 801525c:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801525e:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8015262:	2d00      	cmp	r5, #0
 8015264:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8015268:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 801526c:	dd04      	ble.n	8015278 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801526e:	462a      	mov	r2, r5
 8015270:	4641      	mov	r1, r8
 8015272:	4630      	mov	r0, r6
 8015274:	f009 fe46 	bl	801ef04 <memmove>
      ptrdiff_t __count = __last - __first;
 8015278:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 801527c:	3510      	adds	r5, #16
      if (__count > 0)
 801527e:	f1b9 0f00 	cmp.w	r9, #0
 8015282:	4435      	add	r5, r6
 8015284:	dd04      	ble.n	8015290 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015286:	464a      	mov	r2, r9
 8015288:	4651      	mov	r1, sl
 801528a:	4628      	mov	r0, r5
 801528c:	f009 ff32 	bl	801f0f4 <memcpy>
      return __result + __count;
 8015290:	444d      	add	r5, r9
	if (__p)
 8015292:	f1b8 0f00 	cmp.w	r8, #0
 8015296:	d005      	beq.n	80152a4 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 8015298:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801529a:	4640      	mov	r0, r8
 801529c:	eba1 0108 	sub.w	r1, r1, r8
 80152a0:	f008 fe8e 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 80152a4:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80152a8:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 80152ac:	60be      	str	r6, [r7, #8]
    }
 80152ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80152b2:	461c      	mov	r4, r3
 80152b4:	e7cf      	b.n	8015256 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80152b6:	4626      	mov	r6, r4
 80152b8:	e7d1      	b.n	801525e <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 80152ba:	bf00      	nop
 80152bc:	0801f20c 	.word	0x0801f20c

080152c0 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 80152c0:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80152c2:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 80152c6:	4605      	mov	r5, r0
 80152c8:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80152ca:	429c      	cmp	r4, r3
 80152cc:	d005      	beq.n	80152da <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE9push_backERKS1_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80152ce:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 80152d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 80152d4:	3410      	adds	r4, #16
 80152d6:	606c      	str	r4, [r5, #4]
      }
 80152d8:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 80152da:	4621      	mov	r1, r4
 80152dc:	f7ff ff9c 	bl	8015218 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80152e0:	e7fa      	b.n	80152d8 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE9push_backERKS1_+0x18>

080152e2 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 80152e2:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80152e4:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 80152e8:	4605      	mov	r5, r0
 80152ea:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80152ec:	429c      	cmp	r4, r3
 80152ee:	d005      	beq.n	80152fc <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_+0x1a>
 80152f0:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 80152f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 80152f6:	3410      	adds	r4, #16
 80152f8:	606c      	str	r4, [r5, #4]
      }
 80152fa:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 80152fc:	4621      	mov	r1, r4
 80152fe:	f7fa fe27 	bl	800ff50 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8015302:	e7fa      	b.n	80152fa <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_+0x18>

08015304 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 8015304:	b570      	push	{r4, r5, r6, lr}
 8015306:	460c      	mov	r4, r1
 8015308:	b086      	sub	sp, #24
 801530a:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801530c:	f04f 31ff 	mov.w	r1, #4294967295
 8015310:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 8015312:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8015314:	f7f7 fda8 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8015318:	4621      	mov	r1, r4
 801531a:	f10d 0207 	add.w	r2, sp, #7
 801531e:	4628      	mov	r0, r5
 8015320:	f004 fa9f 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8015324:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8015328:	4604      	mov	r4, r0
	if (!success) {
 801532a:	b923      	cbnz	r3, 8015336 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 801532c:	6828      	ldr	r0, [r5, #0]
 801532e:	f7f7 fdcf 	bl	800ced0 <osSemaphoreRelease>
}
 8015332:	b006      	add	sp, #24
 8015334:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8015336:	f10d 0007 	add.w	r0, sp, #7
 801533a:	f7ff f923 	bl	8014584 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 801533e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d0f2      	beq.n	801532c <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 8015346:	7923      	ldrb	r3, [r4, #4]
 8015348:	4298      	cmp	r0, r3
 801534a:	d1ef      	bne.n	801532c <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 801534c:	3004      	adds	r0, #4
 801534e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8015352:	2800      	cmp	r0, #0
 8015354:	d0ea      	beq.n	801532c <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8015356:	7823      	ldrb	r3, [r4, #0]
 8015358:	b983      	cbnz	r3, 801537c <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x78>
 801535a:	7863      	ldrb	r3, [r4, #1]
 801535c:	b973      	cbnz	r3, 801537c <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x78>
		target_callback_list->push_back(callback);
 801535e:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 8015360:	9602      	str	r6, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015362:	e9d0 2300 	ldrd	r2, r3, [r0]
 8015366:	1a9b      	subs	r3, r3, r2
 8015368:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801536a:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 801536c:	f7ff ffb9 	bl	80152e2 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 8015370:	2301      	movs	r3, #1
 8015372:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 8015374:	f240 1301 	movw	r3, #257	@ 0x101
 8015378:	8123      	strh	r3, [r4, #8]
 801537a:	e7d7      	b.n	801532c <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801537c:	8961      	ldrh	r1, [r4, #10]
 801537e:	f7fa fc89 	bl	800fc94 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->pointer = pointer;
 8015382:	6006      	str	r6, [r0, #0]
 8015384:	e7f4      	b.n	8015370 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x6c>

08015386 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8015386:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015388:	460c      	mov	r4, r1
 801538a:	b087      	sub	sp, #28
 801538c:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801538e:	f04f 31ff 	mov.w	r1, #4294967295
 8015392:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8015394:	461e      	mov	r6, r3
 8015396:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8015398:	f7f7 fd66 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801539c:	4621      	mov	r1, r4
 801539e:	f10d 0207 	add.w	r2, sp, #7
 80153a2:	4628      	mov	r0, r5
 80153a4:	f004 fa5d 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80153a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80153ac:	4604      	mov	r4, r0
	if (!success) {
 80153ae:	b923      	cbnz	r3, 80153ba <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 80153b0:	6828      	ldr	r0, [r5, #0]
 80153b2:	f7f7 fd8d 	bl	800ced0 <osSemaphoreRelease>
}
 80153b6:	b007      	add	sp, #28
 80153b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 80153ba:	f10d 0007 	add.w	r0, sp, #7
 80153be:	f7ff f8e1 	bl	8014584 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 80153c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d0f2      	beq.n	80153b0 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 80153ca:	7923      	ldrb	r3, [r4, #4]
 80153cc:	4298      	cmp	r0, r3
 80153ce:	d1ef      	bne.n	80153b0 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 80153d0:	3004      	adds	r0, #4
 80153d2:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80153d6:	2800      	cmp	r0, #0
 80153d8:	d0ea      	beq.n	80153b0 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 80153da:	7823      	ldrb	r3, [r4, #0]
 80153dc:	b983      	cbnz	r3, 8015400 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 80153de:	7863      	ldrb	r3, [r4, #1]
 80153e0:	b973      	cbnz	r3, 8015400 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 80153e2:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 80153e4:	a902      	add	r1, sp, #8
 80153e6:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 80153ea:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80153ee:	1a9b      	subs	r3, r3, r2
 80153f0:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 80153f2:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 80153f4:	f7ff ff75 	bl	80152e2 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 80153f8:	2301      	movs	r3, #1
 80153fa:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 80153fc:	7223      	strb	r3, [r4, #8]
 80153fe:	e7d7      	b.n	80153b0 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8015400:	8961      	ldrh	r1, [r4, #10]
 8015402:	f7fa fc47 	bl	800fc94 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->write = write;
 8015406:	e9c0 7601 	strd	r7, r6, [r0, #4]
 801540a:	e7f5      	b.n	80153f8 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x72>

0801540c <_ZN10Controller12AddRegistersEv>:
void Controller::AddRegisters(void) {
 801540c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015410:	4604      	mov	r4, r0
 8015412:	b086      	sub	sp, #24
	registers->AddRegister<uint8_t>(REG_CONTROLLER_RESET);
 8015414:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015418:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 801541a:	f7ff fe05 	bl	8015028 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CONTROLLER_RESET);
 801541e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015422:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
	registers->AddRegisterSemaphore(REG_BRIDGE_STATE, &ControlSemaphore);
 8015424:	f104 0534 	add.w	r5, r4, #52	@ 0x34
	registers->SetRegisterAsSingle(REG_CONTROLLER_RESET);
 8015428:	f004 fa54 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_CONTROLLER_RESET, (void*) this,
 801542c:	4b95      	ldr	r3, [pc, #596]	@ (8015684 <_ZN10Controller12AddRegistersEv+0x278>)
 801542e:	4622      	mov	r2, r4
 8015430:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015434:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015436:	f7ff feac 	bl	8015192 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_BRIDGE_STATE);
 801543a:	f240 1101 	movw	r1, #257	@ 0x101
 801543e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015440:	f7ff fdf2 	bl	8015028 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_BRIDGE_STATE);
 8015444:	f240 1101 	movw	r1, #257	@ 0x101
 8015448:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801544a:	f004 fa43 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_BRIDGE_STATE, &ControlSemaphore);
 801544e:	462a      	mov	r2, r5
 8015450:	f240 1101 	movw	r1, #257	@ 0x101
 8015454:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015456:	f004 fa23 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddReadCallback<uint8_t>(REG_BRIDGE_STATE, (void*) this,
 801545a:	4b8b      	ldr	r3, [pc, #556]	@ (8015688 <_ZN10Controller12AddRegistersEv+0x27c>)
 801545c:	4622      	mov	r2, r4
 801545e:	f240 1101 	movw	r1, #257	@ 0x101
 8015462:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015464:	f7ff fe52 	bl	801510c <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddWriteCallback<uint8_t>(REG_BRIDGE_STATE, (void*) this,
 8015468:	4b88      	ldr	r3, [pc, #544]	@ (801568c <_ZN10Controller12AddRegistersEv+0x280>)
 801546a:	4622      	mov	r2, r4
 801546c:	f240 1101 	movw	r1, #257	@ 0x101
 8015470:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015472:	f7ff fe8e 	bl	8015192 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_CONTROLLER_STATE);
 8015476:	f44f 7181 	mov.w	r1, #258	@ 0x102
 801547a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801547c:	f7ff fdd4 	bl	8015028 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CONTROLLER_STATE);
 8015480:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8015484:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015486:	f004 fa25 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddReadCallback<uint8_t>(REG_BRIDGE_STATE, (void*) this,
 801548a:	4b81      	ldr	r3, [pc, #516]	@ (8015690 <_ZN10Controller12AddRegistersEv+0x284>)
 801548c:	4622      	mov	r2, r4
 801548e:	f240 1101 	movw	r1, #257	@ 0x101
 8015492:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015494:	f7ff fe3a 	bl	801510c <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddWriteCallback<uint8_t>(REG_CONTROLLER_STATE, (void*) this,
 8015498:	4b7e      	ldr	r3, [pc, #504]	@ (8015694 <_ZN10Controller12AddRegistersEv+0x288>)
 801549a:	4622      	mov	r2, r4
 801549c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80154a0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80154a2:	f7ff fe76 	bl	8015192 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint32_t>(REG_CONTROLLER_PERIOD);
 80154a6:	f240 1103 	movw	r1, #259	@ 0x103
 80154aa:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80154ac:	f7ff fd8b 	bl	8014fc6 <_ZN9Registers11AddRegisterImEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CONTROLLER_PERIOD);
 80154b0:	f240 1103 	movw	r1, #259	@ 0x103
 80154b4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80154b6:	f004 fa0d 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddReadCallback<uint32_t>(REG_CONTROLLER_PERIOD, (void*) this,
 80154ba:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80154bc:	f04f 31ff 	mov.w	r1, #4294967295
 80154c0:	6838      	ldr	r0, [r7, #0]
 80154c2:	f7f7 fcd1 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80154c6:	f10d 0207 	add.w	r2, sp, #7
 80154ca:	f240 1103 	movw	r1, #259	@ 0x103
 80154ce:	4638      	mov	r0, r7
 80154d0:	f004 f9c7 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80154d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80154d8:	4606      	mov	r6, r0
	if (!success) {
 80154da:	2b00      	cmp	r3, #0
 80154dc:	f040 82b5 	bne.w	8015a4a <_ZN10Controller12AddRegistersEv+0x63e>
	osSemaphoreRelease(RegistersSemaphore);
 80154e0:	6838      	ldr	r0, [r7, #0]
 80154e2:	f7f7 fcf5 	bl	800ced0 <osSemaphoreRelease>
	registers->AddWriteCallback<uint8_t>(REG_CONTROLLER_PERIOD, (void*) this,
 80154e6:	4b6c      	ldr	r3, [pc, #432]	@ (8015698 <_ZN10Controller12AddRegistersEv+0x28c>)
 80154e8:	4622      	mov	r2, r4
 80154ea:	f240 1103 	movw	r1, #259	@ 0x103
 80154ee:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80154f0:	f7ff fe4f 	bl	8015192 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_CONTROLLER_MODE);
 80154f4:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80154f8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80154fa:	f7ff fd95 	bl	8015028 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CONTROLLER_MODE);
 80154fe:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8015502:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015504:	f004 f9e6 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddReadCallback<uint8_t>(REG_CONTROLLER_MODE, (void*) this,
 8015508:	4b64      	ldr	r3, [pc, #400]	@ (801569c <_ZN10Controller12AddRegistersEv+0x290>)
 801550a:	4622      	mov	r2, r4
 801550c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8015510:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015512:	f7ff fdfb 	bl	801510c <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddWriteCallback<uint8_t>(REG_CONTROLLER_MODE, (void*) this,
 8015516:	4b62      	ldr	r3, [pc, #392]	@ (80156a0 <_ZN10Controller12AddRegistersEv+0x294>)
 8015518:	4622      	mov	r2, r4
 801551a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801551e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015520:	f7ff fe37 	bl	8015192 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_CONTROLLER_INPUT_FILTER);
 8015524:	f240 1105 	movw	r1, #261	@ 0x105
 8015528:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801552a:	f7ff fd7d 	bl	8015028 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CONTROLLER_INPUT_FILTER);
 801552e:	f240 1105 	movw	r1, #261	@ 0x105
 8015532:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015534:	f004 f9ce 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_CONTROLLER_INPUT_FILTER, &ControlSemaphore);
 8015538:	462a      	mov	r2, r5
 801553a:	f240 1105 	movw	r1, #261	@ 0x105
 801553e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015540:	f004 f9ae 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddReadCallback<uint8_t>(REG_CONTROLLER_INPUT_FILTER, (void*) this,
 8015544:	4b57      	ldr	r3, [pc, #348]	@ (80156a4 <_ZN10Controller12AddRegistersEv+0x298>)
 8015546:	4622      	mov	r2, r4
 8015548:	f240 1105 	movw	r1, #261	@ 0x105
 801554c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801554e:	f7ff fddd 	bl	801510c <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddWriteCallback<uint8_t>(REG_CONTROLLER_INPUT_FILTER, (void*) this,
 8015552:	4b55      	ldr	r3, [pc, #340]	@ (80156a8 <_ZN10Controller12AddRegistersEv+0x29c>)
 8015554:	4622      	mov	r2, r4
 8015556:	f240 1105 	movw	r1, #261	@ 0x105
 801555a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801555c:	f7ff fe19 	bl	8015192 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_CONTROLLER_SET_CONFIGURATION);
 8015560:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8015564:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015566:	f7ff fcfd 	bl	8014f64 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsArray(REG_CONTROLLER_SET_CONFIGURATION, 2);
 801556a:	2202      	movs	r2, #2
 801556c:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8015570:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015572:	f004 f9cb 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddRegisterSemaphore(REG_CONTROLLER_SET_CONFIGURATION, &ControlSemaphore);
 8015576:	462a      	mov	r2, r5
 8015578:	f44f 7183 	mov.w	r1, #262	@ 0x106
 801557c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801557e:	f004 f98f 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddWriteCallback<float>(REG_CONTROLLER_SET_CONFIGURATION, (void*) this,
 8015582:	4b4a      	ldr	r3, [pc, #296]	@ (80156ac <_ZN10Controller12AddRegistersEv+0x2a0>)
 8015584:	4622      	mov	r2, r4
 8015586:	f44f 7183 	mov.w	r1, #262	@ 0x106
 801558a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801558c:	f7ff fefb 	bl	8015386 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_CONTROLLER_GET_CONFIGURATION);
 8015590:	f240 1107 	movw	r1, #263	@ 0x107
 8015594:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015596:	f7ff fce5 	bl	8014f64 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsArray(REG_CONTROLLER_GET_CONFIGURATION, 9);
 801559a:	2209      	movs	r2, #9
 801559c:	f240 1107 	movw	r1, #263	@ 0x107
 80155a0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80155a2:	f004 f9b3 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddRegisterSemaphore(REG_CONTROLLER_GET_CONFIGURATION, &ControlSemaphore);
 80155a6:	462a      	mov	r2, r5
 80155a8:	f240 1107 	movw	r1, #263	@ 0x107
 80155ac:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80155ae:	f004 f977 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddReadCallback<float>(REG_CONTROLLER_GET_CONFIGURATION, (void*) this,
 80155b2:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80155b4:	f04f 31ff 	mov.w	r1, #4294967295
 80155b8:	6838      	ldr	r0, [r7, #0]
 80155ba:	f7f7 fc55 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80155be:	f10d 0207 	add.w	r2, sp, #7
 80155c2:	f240 1107 	movw	r1, #263	@ 0x107
 80155c6:	4638      	mov	r0, r7
 80155c8:	f004 f94b 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80155cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80155d0:	4606      	mov	r6, r0
	if (!success) {
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	f040 8269 	bne.w	8015aaa <_ZN10Controller12AddRegistersEv+0x69e>
	osSemaphoreRelease(RegistersSemaphore);
 80155d8:	6838      	ldr	r0, [r7, #0]
 80155da:	f7f7 fc79 	bl	800ced0 <osSemaphoreRelease>
	registers->AddRegister<uint8_t>(REG_CONTROLLER_INTEGRATION_MODE);
 80155de:	f44f 7184 	mov.w	r1, #264	@ 0x108
 80155e2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80155e4:	f7ff fd20 	bl	8015028 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CONTROLLER_INTEGRATION_MODE);
 80155e8:	f44f 7184 	mov.w	r1, #264	@ 0x108
 80155ec:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80155ee:	f004 f971 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_CONTROLLER_INTEGRATION_MODE, &ControlSemaphore);
 80155f2:	462a      	mov	r2, r5
 80155f4:	f44f 7184 	mov.w	r1, #264	@ 0x108
 80155f8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80155fa:	f004 f951 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<uint8_t>(REG_CONTROLLER_INTEGRATION_MODE, &integration_type);
 80155fe:	f504 72ae 	add.w	r2, r4, #348	@ 0x15c
 8015602:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8015606:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015608:	f7ff fd3f 	bl	801508a <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->AddRegister<uint8_t>(REG_CONTROLLER_DERIVATION_MODE);
 801560c:	f240 1109 	movw	r1, #265	@ 0x109
 8015610:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015612:	f7ff fd09 	bl	8015028 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CONTROLLER_DERIVATION_MODE);
 8015616:	f240 1109 	movw	r1, #265	@ 0x109
 801561a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801561c:	f004 f95a 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_CONTROLLER_DERIVATION_MODE, &ControlSemaphore);
 8015620:	462a      	mov	r2, r5
 8015622:	f240 1109 	movw	r1, #265	@ 0x109
 8015626:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015628:	f004 f93a 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<uint8_t>(REG_CONTROLLER_DERIVATION_MODE, &derivation_type);
 801562c:	f204 125d 	addw	r2, r4, #349	@ 0x15d
 8015630:	f240 1109 	movw	r1, #265	@ 0x109
 8015634:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015636:	f7ff fd28 	bl	801508a <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->AddRegister<uint32_t>(REG_MOTOR_ENCODER_THRESHOLD_SECURITY);
 801563a:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 801563e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015640:	f7ff fcc1 	bl	8014fc6 <_ZN9Registers11AddRegisterImEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_ENCODER_THRESHOLD_SECURITY);
 8015644:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8015648:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801564a:	f004 f943 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_ENCODER_THRESHOLD_SECURITY, &ControlSemaphore);
 801564e:	462a      	mov	r2, r5
 8015650:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8015654:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015656:	f004 f923 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<uint32_t>(REG_MOTOR_ENCODER_THRESHOLD_SECURITY, &encoder_security_threshold);
 801565a:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801565c:	f04f 31ff 	mov.w	r1, #4294967295
 8015660:	6838      	ldr	r0, [r7, #0]
 8015662:	f7f7 fc01 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8015666:	f10d 0207 	add.w	r2, sp, #7
 801566a:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 801566e:	4638      	mov	r0, r7
 8015670:	f004 f8f7 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8015674:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8015678:	4606      	mov	r6, r0
	if (!success) {
 801567a:	2b00      	cmp	r3, #0
 801567c:	f040 8256 	bne.w	8015b2c <_ZN10Controller12AddRegistersEv+0x720>
 8015680:	e016      	b.n	80156b0 <_ZN10Controller12AddRegistersEv+0x2a4>
 8015682:	bf00      	nop
 8015684:	08014977 	.word	0x08014977
 8015688:	08014285 	.word	0x08014285
 801568c:	080148d5 	.word	0x080148d5
 8015690:	0801451f 	.word	0x0801451f
 8015694:	08014935 	.word	0x08014935
 8015698:	080149d5 	.word	0x080149d5
 801569c:	080144dd 	.word	0x080144dd
 80156a0:	08014bb1 	.word	0x08014bb1
 80156a4:	08014291 	.word	0x08014291
 80156a8:	080142a7 	.word	0x080142a7
 80156ac:	080143a1 	.word	0x080143a1
	osSemaphoreRelease(RegistersSemaphore);
 80156b0:	6838      	ldr	r0, [r7, #0]
 80156b2:	f7f7 fc0d 	bl	800ced0 <osSemaphoreRelease>
	registers->AddRegister<float>(REG_MOTOR_ENCODER);
 80156b6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80156b8:	f240 110d 	movw	r1, #269	@ 0x10d
 80156bc:	f7ff fc52 	bl	8014f64 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_ENCODER);
 80156c0:	f240 110d 	movw	r1, #269	@ 0x10d
 80156c4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80156c6:	f004 f905 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_ENCODER, &ControlSemaphore);
 80156ca:	462a      	mov	r2, r5
 80156cc:	f240 110d 	movw	r1, #269	@ 0x10d
 80156d0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80156d2:	f004 f8e5 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_ENCODER, &encoder_position);
 80156d6:	f504 72b8 	add.w	r2, r4, #368	@ 0x170
 80156da:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80156dc:	f240 110d 	movw	r1, #269	@ 0x10d
 80156e0:	f7ff fe10 	bl	8015304 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_ENCODER, READ_PERMISSION);
 80156e4:	2202      	movs	r2, #2
 80156e6:	f240 110d 	movw	r1, #269	@ 0x10d
 80156ea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80156ec:	f004 f92d 	bl	801994a <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<float>(REG_MOTOR_CURRENT_COMPENSATION);
 80156f0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80156f2:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80156f6:	f7ff fc35 	bl	8014f64 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_CURRENT_COMPENSATION);
 80156fa:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80156fe:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015700:	f004 f8e8 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_CURRENT_COMPENSATION, &ControlSemaphore);
 8015704:	462a      	mov	r2, r5
 8015706:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 801570a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801570c:	f004 f8c8 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_CURRENT_COMPENSATION, &motor_current_compensation);
 8015710:	f504 72cc 	add.w	r2, r4, #408	@ 0x198
 8015714:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015716:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 801571a:	f7ff fdf3 	bl	8015304 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegister<float>(REG_MOTOR_HBRIDGE_CURRENT);
 801571e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015720:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8015724:	f7ff fc1e 	bl	8014f64 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_HBRIDGE_CURRENT);
 8015728:	f44f 7188 	mov.w	r1, #272	@ 0x110
 801572c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801572e:	f004 f8d1 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_HBRIDGE_CURRENT, &ControlSemaphore);
 8015732:	462a      	mov	r2, r5
 8015734:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8015738:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801573a:	f004 f8b1 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_HBRIDGE_CURRENT, &motor_current);
 801573e:	f504 72ca 	add.w	r2, r4, #404	@ 0x194
 8015742:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015744:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8015748:	f7ff fddc 	bl	8015304 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_HBRIDGE_CURRENT, READ_PERMISSION);
 801574c:	2202      	movs	r2, #2
 801574e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8015752:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015754:	f004 f8f9 	bl	801994a <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<float>(REG_MOTOR_HBRIDGE_VOLTAGE);
 8015758:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801575a:	f240 111f 	movw	r1, #287	@ 0x11f
 801575e:	f7ff fc01 	bl	8014f64 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_HBRIDGE_VOLTAGE);
 8015762:	f240 111f 	movw	r1, #287	@ 0x11f
 8015766:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015768:	f004 f8b4 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_HBRIDGE_VOLTAGE, &ControlSemaphore);
 801576c:	462a      	mov	r2, r5
 801576e:	f240 111f 	movw	r1, #287	@ 0x11f
 8015772:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015774:	f004 f894 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_HBRIDGE_VOLTAGE, &motor_voltage);
 8015778:	f504 72c8 	add.w	r2, r4, #400	@ 0x190
 801577c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801577e:	f240 111f 	movw	r1, #287	@ 0x11f
 8015782:	f7ff fdbf 	bl	8015304 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_HBRIDGE_VOLTAGE, READ_PERMISSION);
 8015786:	2202      	movs	r2, #2
 8015788:	f240 111f 	movw	r1, #287	@ 0x11f
 801578c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801578e:	f004 f8dc 	bl	801994a <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<float>(REG_MOTOR_HBRIDGE_POWER);
 8015792:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015794:	f240 1111 	movw	r1, #273	@ 0x111
 8015798:	f7ff fbe4 	bl	8014f64 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_HBRIDGE_POWER);
 801579c:	f240 1111 	movw	r1, #273	@ 0x111
 80157a0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80157a2:	f004 f897 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_HBRIDGE_POWER, &ControlSemaphore);
 80157a6:	462a      	mov	r2, r5
 80157a8:	f240 1111 	movw	r1, #273	@ 0x111
 80157ac:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80157ae:	f004 f877 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_HBRIDGE_POWER, &motor_power);
 80157b2:	f504 72ce 	add.w	r2, r4, #412	@ 0x19c
 80157b6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80157b8:	f240 1111 	movw	r1, #273	@ 0x111
 80157bc:	f7ff fda2 	bl	8015304 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_HBRIDGE_POWER, READ_PERMISSION);
 80157c0:	2202      	movs	r2, #2
 80157c2:	f240 1111 	movw	r1, #273	@ 0x111
 80157c6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80157c8:	f004 f8bf 	bl	801994a <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<float>(REG_MOTOR_SETPOINT);
 80157cc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80157ce:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80157d2:	f7ff fbc7 	bl	8014f64 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_SETPOINT);
 80157d6:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80157da:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80157dc:	f004 f87a 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_SETPOINT, &ControlSemaphore);
 80157e0:	462a      	mov	r2, r5
 80157e2:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80157e6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80157e8:	f004 f85a 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_SETPOINT, &setpoint);
 80157ec:	f504 72b0 	add.w	r2, r4, #352	@ 0x160
 80157f0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80157f2:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80157f6:	f7ff fd85 	bl	8015304 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_SETPOINT, READ_PERMISSION);
 80157fa:	2202      	movs	r2, #2
 80157fc:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8015800:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015802:	f004 f8a2 	bl	801994a <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<float>(REG_MOTOR_MOVEFROMTO);
 8015806:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015808:	f44f 7189 	mov.w	r1, #274	@ 0x112
 801580c:	f7ff fbaa 	bl	8014f64 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsArray(REG_MOTOR_MOVEFROMTO, 2);
 8015810:	2202      	movs	r2, #2
 8015812:	f44f 7189 	mov.w	r1, #274	@ 0x112
 8015816:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015818:	f004 f878 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<float>(REG_MOTOR_MOVEFROMTO, (void*) this,
 801581c:	4622      	mov	r2, r4
 801581e:	4bbb      	ldr	r3, [pc, #748]	@ (8015b0c <_ZN10Controller12AddRegistersEv+0x700>)
 8015820:	f44f 7189 	mov.w	r1, #274	@ 0x112
 8015824:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015826:	f7ff fdae 	bl	8015386 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_MOTOR_MOVETO);
 801582a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801582c:	f240 1113 	movw	r1, #275	@ 0x113
 8015830:	f7ff fb98 	bl	8014f64 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_MOVETO);
 8015834:	f240 1113 	movw	r1, #275	@ 0x113
 8015838:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801583a:	f004 f84b 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<float>(REG_MOTOR_MOVETO, (void*) this,
 801583e:	4622      	mov	r2, r4
 8015840:	4bb3      	ldr	r3, [pc, #716]	@ (8015b10 <_ZN10Controller12AddRegistersEv+0x704>)
 8015842:	f240 1113 	movw	r1, #275	@ 0x113
 8015846:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015848:	f7ff fd9d 	bl	8015386 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_MOTOR_SETZERO);
 801584c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801584e:	f240 110b 	movw	r1, #267	@ 0x10b
 8015852:	f7ff fbe9 	bl	8015028 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_SETZERO);
 8015856:	f240 110b 	movw	r1, #267	@ 0x10b
 801585a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801585c:	f004 f83a 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_MOTOR_SETZERO, (void*) this,
 8015860:	4bac      	ldr	r3, [pc, #688]	@ (8015b14 <_ZN10Controller12AddRegistersEv+0x708>)
 8015862:	4622      	mov	r2, r4
 8015864:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015866:	f240 110b 	movw	r1, #267	@ 0x10b
 801586a:	f7ff fc92 	bl	8015192 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_MOTOR_SET_PARAMETER);
 801586e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015870:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8015874:	f7ff fb76 	bl	8014f64 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsArray(REG_MOTOR_SET_PARAMETER, 2);
 8015878:	2202      	movs	r2, #2
 801587a:	f44f 718a 	mov.w	r1, #276	@ 0x114
 801587e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015880:	f004 f844 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddRegisterSemaphore(REG_MOTOR_SET_PARAMETER, &ControlSemaphore);
 8015884:	462a      	mov	r2, r5
 8015886:	f44f 718a 	mov.w	r1, #276	@ 0x114
 801588a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801588c:	f004 f808 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddWriteCallback<float>(REG_MOTOR_SET_PARAMETER, (void*) this,
 8015890:	4ba1      	ldr	r3, [pc, #644]	@ (8015b18 <_ZN10Controller12AddRegistersEv+0x70c>)
 8015892:	4622      	mov	r2, r4
 8015894:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015896:	f44f 718a 	mov.w	r1, #276	@ 0x114
 801589a:	f7ff fd74 	bl	8015386 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_MOTOR_GET_PARAMETERS);
 801589e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80158a0:	f240 1115 	movw	r1, #277	@ 0x115
 80158a4:	f7ff fb5e 	bl	8014f64 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsVector(REG_MOTOR_GET_PARAMETERS);
 80158a8:	f240 1115 	movw	r1, #277	@ 0x115
 80158ac:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80158ae:	f004 f849 	bl	8019944 <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddRegisterSemaphore(REG_MOTOR_GET_PARAMETERS, &ControlSemaphore);
 80158b2:	462a      	mov	r2, r5
 80158b4:	f240 1115 	movw	r1, #277	@ 0x115
 80158b8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80158ba:	f003 fff1 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	return AddRegisterPointer(ID, reinterpreted_pointer);
 80158be:	f504 72a8 	add.w	r2, r4, #336	@ 0x150
 80158c2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80158c4:	f240 1115 	movw	r1, #277	@ 0x115
 80158c8:	f7ff fd1c 	bl	8015304 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_GET_PARAMETERS, READ_PERMISSION);
 80158cc:	2202      	movs	r2, #2
 80158ce:	f240 1115 	movw	r1, #277	@ 0x115
 80158d2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80158d4:	f004 f839 	bl	801994a <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<uint8_t>(REG_MOTOR_TRAJECTORY_MODE);
 80158d8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80158da:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80158de:	f7ff fba3 	bl	8015028 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_TRAJECTORY_MODE);
 80158e2:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80158e6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80158e8:	f003 fff4 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_TRAJECTORY_MODE, &ControlSemaphore);
 80158ec:	462a      	mov	r2, r5
 80158ee:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80158f2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80158f4:	f003 ffd4 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<uint8_t>(REG_MOTOR_TRAJECTORY_MODE, &(trajectory_generator.mode));
 80158f8:	1c62      	adds	r2, r4, #1
 80158fa:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80158fc:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8015900:	f7ff fbc3 	bl	801508a <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->AddRegister<uint8_t>(REG_MOTOR_TRAJECTORY_CYCLIC);
 8015904:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015906:	f240 1117 	movw	r1, #279	@ 0x117
 801590a:	f7ff fb8d 	bl	8015028 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_TRAJECTORY_CYCLIC);
 801590e:	f240 1117 	movw	r1, #279	@ 0x117
 8015912:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015914:	f003 ffde 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_TRAJECTORY_CYCLIC, &ControlSemaphore);
 8015918:	462a      	mov	r2, r5
 801591a:	f240 1117 	movw	r1, #279	@ 0x117
 801591e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015920:	f003 ffbe 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<uint8_t>(REG_MOTOR_TRAJECTORY_CYCLIC, &(trajectory_generator.cyclic));
 8015924:	4622      	mov	r2, r4
 8015926:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015928:	f240 1117 	movw	r1, #279	@ 0x117
 801592c:	f7ff fbad 	bl	801508a <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->AddRegister<float>(REG_MOTOR_PLAN_TRAJECTORY);
 8015930:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015932:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8015936:	f7ff fb15 	bl	8014f64 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsArray(REG_MOTOR_PLAN_TRAJECTORY, 2);
 801593a:	2202      	movs	r2, #2
 801593c:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8015940:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015942:	f003 ffe3 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddRegisterSemaphore(REG_MOTOR_PLAN_TRAJECTORY, &ControlSemaphore);
 8015946:	462a      	mov	r2, r5
 8015948:	f44f 718c 	mov.w	r1, #280	@ 0x118
 801594c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801594e:	f003 ffa7 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddWriteCallback<float>(REG_MOTOR_PLAN_TRAJECTORY, (void*) this,
 8015952:	4b72      	ldr	r3, [pc, #456]	@ (8015b1c <_ZN10Controller12AddRegistersEv+0x710>)
 8015954:	4622      	mov	r2, r4
 8015956:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015958:	f44f 718c 	mov.w	r1, #280	@ 0x118
 801595c:	f7ff fd13 	bl	8015386 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_MOTOR_START_TRAJECTORY);
 8015960:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015962:	f240 1119 	movw	r1, #281	@ 0x119
 8015966:	f7ff fb5f 	bl	8015028 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_START_TRAJECTORY);
 801596a:	f240 1119 	movw	r1, #281	@ 0x119
 801596e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015970:	f003 ffb0 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_START_TRAJECTORY, &ControlSemaphore);
 8015974:	462a      	mov	r2, r5
 8015976:	f240 1119 	movw	r1, #281	@ 0x119
 801597a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801597c:	f003 ff90 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddWriteCallback<float>(REG_MOTOR_START_TRAJECTORY, (void*) this,
 8015980:	4b67      	ldr	r3, [pc, #412]	@ (8015b20 <_ZN10Controller12AddRegistersEv+0x714>)
 8015982:	4622      	mov	r2, r4
 8015984:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015986:	f240 1119 	movw	r1, #281	@ 0x119
 801598a:	f7ff fcfc 	bl	8015386 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_MOTOR_MAX_SPEED);
 801598e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015990:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8015994:	f7ff fae6 	bl	8014f64 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_MAX_SPEED);
 8015998:	f44f 7190 	mov.w	r1, #288	@ 0x120
 801599c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801599e:	f003 ff99 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_MAX_SPEED, &ControlSemaphore);
 80159a2:	462a      	mov	r2, r5
 80159a4:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80159a8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80159aa:	f003 ff79 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_MAX_SPEED, &(trajectory_generator.speed_max));
 80159ae:	1d22      	adds	r2, r4, #4
 80159b0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80159b2:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80159b6:	f7ff fca5 	bl	8015304 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegister<float>(REG_MOTOR_MAX_ACCELERATION);
 80159ba:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80159bc:	f240 1121 	movw	r1, #289	@ 0x121
 80159c0:	f7ff fad0 	bl	8014f64 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_MAX_ACCELERATION);
 80159c4:	f240 1121 	movw	r1, #289	@ 0x121
 80159c8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80159ca:	f003 ff83 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_MAX_ACCELERATION, &ControlSemaphore);
 80159ce:	462a      	mov	r2, r5
 80159d0:	f240 1121 	movw	r1, #289	@ 0x121
 80159d4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80159d6:	f003 ff63 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_MAX_ACCELERATION, &(trajectory_generator.accel_max));
 80159da:	f104 0208 	add.w	r2, r4, #8
 80159de:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80159e0:	f240 1121 	movw	r1, #289	@ 0x121
 80159e4:	f7ff fc8e 	bl	8015304 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegister<float>(REG_MOTOR_SIN_FREQUENCY);
 80159e8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80159ea:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80159ee:	f7ff fab9 	bl	8014f64 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_SIN_FREQUENCY);
 80159f2:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80159f6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80159f8:	f003 ff6c 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_SIN_FREQUENCY, &ControlSemaphore);
 80159fc:	462a      	mov	r2, r5
 80159fe:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8015a02:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015a04:	f003 ff4c 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_SIN_FREQUENCY, &(trajectory_generator.frequency));
 8015a08:	f104 020c 	add.w	r2, r4, #12
 8015a0c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015a0e:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8015a12:	f7ff fc77 	bl	8015304 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegister<float>(REG_MOTOR_SIN_PHASE);
 8015a16:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015a18:	f240 1123 	movw	r1, #291	@ 0x123
 8015a1c:	f7ff faa2 	bl	8014f64 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_SIN_PHASE);
 8015a20:	f240 1123 	movw	r1, #291	@ 0x123
 8015a24:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015a26:	f003 ff55 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_SIN_PHASE, &ControlSemaphore);
 8015a2a:	462a      	mov	r2, r5
 8015a2c:	f240 1123 	movw	r1, #291	@ 0x123
 8015a30:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015a32:	f003 ff35 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_SIN_PHASE, &(trajectory_generator.phase));
 8015a36:	f104 0210 	add.w	r2, r4, #16
 8015a3a:	f240 1123 	movw	r1, #291	@ 0x123
 8015a3e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
}
 8015a40:	b006      	add	sp, #24
 8015a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	registers->AddRegisterPointer<float>(REG_MOTOR_SIN_PHASE, &(trajectory_generator.phase));
 8015a46:	f7ff bc5d 	b.w	8015304 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	uint8_t registered_type = GetTypeID<T>(&success);
 8015a4a:	f10d 0007 	add.w	r0, sp, #7
 8015a4e:	f7fe fde7 	bl	8014620 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 8015a52:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	f43f ad42 	beq.w	80154e0 <_ZN10Controller12AddRegistersEv+0xd4>
	if (target_register->register_info.type != registered_type) {
 8015a5c:	7933      	ldrb	r3, [r6, #4]
 8015a5e:	4298      	cmp	r0, r3
 8015a60:	f47f ad3e 	bne.w	80154e0 <_ZN10Controller12AddRegistersEv+0xd4>
	if (callbacks[target_register->register_info.type] == NULL) {
 8015a64:	3004      	adds	r0, #4
 8015a66:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8015a6a:	2800      	cmp	r0, #0
 8015a6c:	f43f ad38 	beq.w	80154e0 <_ZN10Controller12AddRegistersEv+0xd4>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8015a70:	7833      	ldrb	r3, [r6, #0]
 8015a72:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8015b24 <_ZN10Controller12AddRegistersEv+0x718>
 8015a76:	b98b      	cbnz	r3, 8015a9c <_ZN10Controller12AddRegistersEv+0x690>
 8015a78:	7873      	ldrb	r3, [r6, #1]
 8015a7a:	b97b      	cbnz	r3, 8015a9c <_ZN10Controller12AddRegistersEv+0x690>
		target_callback_list->push_back(callback);
 8015a7c:	a902      	add	r1, sp, #8
		callback.read = read;
 8015a7e:	f8cd 8014 	str.w	r8, [sp, #20]
		callback.write = NULL;
 8015a82:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8015a86:	e9d0 2300 	ldrd	r2, r3, [r0]
 8015a8a:	1a9b      	subs	r3, r3, r2
 8015a8c:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8015a8e:	8173      	strh	r3, [r6, #10]
		target_callback_list->push_back(callback);
 8015a90:	f7ff fc16 	bl	80152c0 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8015a94:	2301      	movs	r3, #1
 8015a96:	7073      	strb	r3, [r6, #1]
	target_register->access.read = true;
 8015a98:	7273      	strb	r3, [r6, #9]
 8015a9a:	e521      	b.n	80154e0 <_ZN10Controller12AddRegistersEv+0xd4>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8015a9c:	8971      	ldrh	r1, [r6, #10]
 8015a9e:	f7fb fac1 	bl	8011024 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>
		callback->context = context;
 8015aa2:	6044      	str	r4, [r0, #4]
		callback->read = read;
 8015aa4:	f8c0 800c 	str.w	r8, [r0, #12]
 8015aa8:	e7f4      	b.n	8015a94 <_ZN10Controller12AddRegistersEv+0x688>
	uint8_t registered_type = GetTypeID<T>(&success);
 8015aaa:	f10d 0007 	add.w	r0, sp, #7
 8015aae:	f7fe fd69 	bl	8014584 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 8015ab2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	f43f ad8e 	beq.w	80155d8 <_ZN10Controller12AddRegistersEv+0x1cc>
	if (target_register->register_info.type != registered_type) {
 8015abc:	7933      	ldrb	r3, [r6, #4]
 8015abe:	4298      	cmp	r0, r3
 8015ac0:	f47f ad8a 	bne.w	80155d8 <_ZN10Controller12AddRegistersEv+0x1cc>
	if (callbacks[target_register->register_info.type] == NULL) {
 8015ac4:	3004      	adds	r0, #4
 8015ac6:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8015aca:	2800      	cmp	r0, #0
 8015acc:	f43f ad84 	beq.w	80155d8 <_ZN10Controller12AddRegistersEv+0x1cc>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8015ad0:	7833      	ldrb	r3, [r6, #0]
 8015ad2:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 8015b28 <_ZN10Controller12AddRegistersEv+0x71c>
 8015ad6:	b98b      	cbnz	r3, 8015afc <_ZN10Controller12AddRegistersEv+0x6f0>
 8015ad8:	7873      	ldrb	r3, [r6, #1]
 8015ada:	b97b      	cbnz	r3, 8015afc <_ZN10Controller12AddRegistersEv+0x6f0>
		target_callback_list->push_back(callback);
 8015adc:	a902      	add	r1, sp, #8
		callback.read = read;
 8015ade:	f8cd 8014 	str.w	r8, [sp, #20]
		callback.write = NULL;
 8015ae2:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8015ae6:	e9d0 2300 	ldrd	r2, r3, [r0]
 8015aea:	1a9b      	subs	r3, r3, r2
 8015aec:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8015aee:	8173      	strh	r3, [r6, #10]
		target_callback_list->push_back(callback);
 8015af0:	f7ff fbf7 	bl	80152e2 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8015af4:	2301      	movs	r3, #1
 8015af6:	7073      	strb	r3, [r6, #1]
	target_register->access.read = true;
 8015af8:	7273      	strb	r3, [r6, #9]
 8015afa:	e56d      	b.n	80155d8 <_ZN10Controller12AddRegistersEv+0x1cc>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8015afc:	8971      	ldrh	r1, [r6, #10]
 8015afe:	f7fa f8c9 	bl	800fc94 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->context = context;
 8015b02:	6044      	str	r4, [r0, #4]
		callback->read = read;
 8015b04:	f8c0 800c 	str.w	r8, [r0, #12]
 8015b08:	e7f4      	b.n	8015af4 <_ZN10Controller12AddRegistersEv+0x6e8>
 8015b0a:	bf00      	nop
 8015b0c:	08014c5b 	.word	0x08014c5b
 8015b10:	08014ceb 	.word	0x08014ceb
 8015b14:	08014a01 	.word	0x08014a01
 8015b18:	080142df 	.word	0x080142df
 8015b1c:	080142c5 	.word	0x080142c5
 8015b20:	080142bb 	.word	0x080142bb
 8015b24:	080144ff 	.word	0x080144ff
 8015b28:	08014313 	.word	0x08014313
	uint8_t registered_type = GetTypeID<T>(&success);
 8015b2c:	f10d 0007 	add.w	r0, sp, #7
 8015b30:	f7fe fd76 	bl	8014620 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 8015b34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	f43f adb9 	beq.w	80156b0 <_ZN10Controller12AddRegistersEv+0x2a4>
	if (target_register->register_info.type != registered_type) {
 8015b3e:	7933      	ldrb	r3, [r6, #4]
 8015b40:	4298      	cmp	r0, r3
 8015b42:	f47f adb5 	bne.w	80156b0 <_ZN10Controller12AddRegistersEv+0x2a4>
	if (callbacks[target_register->register_info.type] == NULL) {
 8015b46:	3004      	adds	r0, #4
 8015b48:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8015b4c:	2800      	cmp	r0, #0
 8015b4e:	f43f adaf 	beq.w	80156b0 <_ZN10Controller12AddRegistersEv+0x2a4>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8015b52:	7833      	ldrb	r3, [r6, #0]
	registers->AddRegisterPointer<uint32_t>(REG_MOTOR_ENCODER_THRESHOLD_SECURITY, &encoder_security_threshold);
 8015b54:	f504 78b6 	add.w	r8, r4, #364	@ 0x16c
 8015b58:	b98b      	cbnz	r3, 8015b7e <_ZN10Controller12AddRegistersEv+0x772>
 8015b5a:	7873      	ldrb	r3, [r6, #1]
 8015b5c:	b97b      	cbnz	r3, 8015b7e <_ZN10Controller12AddRegistersEv+0x772>
		target_callback_list->push_back(callback);
 8015b5e:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 8015b60:	f8cd 8008 	str.w	r8, [sp, #8]
 8015b64:	e9d0 2300 	ldrd	r2, r3, [r0]
 8015b68:	1a9b      	subs	r3, r3, r2
 8015b6a:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8015b6c:	8173      	strh	r3, [r6, #10]
		target_callback_list->push_back(callback);
 8015b6e:	f7ff fba7 	bl	80152c0 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 8015b72:	2301      	movs	r3, #1
 8015b74:	7033      	strb	r3, [r6, #0]
	target_register->access.write = true;
 8015b76:	f240 1301 	movw	r3, #257	@ 0x101
 8015b7a:	8133      	strh	r3, [r6, #8]
 8015b7c:	e598      	b.n	80156b0 <_ZN10Controller12AddRegistersEv+0x2a4>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8015b7e:	8971      	ldrh	r1, [r6, #10]
 8015b80:	f7fb fa50 	bl	8011024 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>
		callback->pointer = pointer;
 8015b84:	f8c0 8000 	str.w	r8, [r0]
 8015b88:	e7f3      	b.n	8015b72 <_ZN10Controller12AddRegistersEv+0x766>
 8015b8a:	bf00      	nop

08015b8c <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPFffSt6vectorIfSaIfEEEjEET_S8_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8015b8c:	b538      	push	{r3, r4, r5, lr}
	  if (__n > 0)
 8015b8e:	460c      	mov	r4, r1
 8015b90:	b181      	cbz	r1, 8015bb4 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPFffSt6vectorIfSaIfEEEjEET_S8_T0_+0x28>
 8015b92:	2100      	movs	r1, #0
 8015b94:	4605      	mov	r5, r0
      if (__n <= 0)
 8015b96:	3c01      	subs	r4, #1
 8015b98:	f845 1b04 	str.w	r1, [r5], #4
 8015b9c:	d008      	beq.n	8015bb0 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPFffSt6vectorIfSaIfEEEjEET_S8_T0_+0x24>
      std::__fill_a(__first, __first + __n, __value);
 8015b9e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	*__first = __tmp;
 8015ba2:	1a24      	subs	r4, r4, r0
 8015ba4:	4628      	mov	r0, r5
 8015ba6:	3c04      	subs	r4, #4
 8015ba8:	4425      	add	r5, r4
 8015baa:	4622      	mov	r2, r4
 8015bac:	f009 f9c4 	bl	801ef38 <memset>
	}
 8015bb0:	4628      	mov	r0, r5
 8015bb2:	bd38      	pop	{r3, r4, r5, pc}
 8015bb4:	4605      	mov	r5, r0
	  return __first;
 8015bb6:	e7fb      	b.n	8015bb0 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPFffSt6vectorIfSaIfEEEjEET_S8_T0_+0x24>

08015bb8 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 8015bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bbc:	4607      	mov	r7, r0
      if (__n != 0)
 8015bbe:	4689      	mov	r9, r1
 8015bc0:	b189      	cbz	r1, 8015be6 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x2e>
					 - this->_M_impl._M_finish);
 8015bc2:	68ba      	ldr	r2, [r7, #8]
	  if (__size > max_size() || __navail > max_size() - __size)
 8015bc4:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8015bc8:	e9d0 a000 	ldrd	sl, r0, [r0]
					 - this->_M_impl._M_finish);
 8015bcc:	1a12      	subs	r2, r2, r0
 8015bce:	eba0 060a 	sub.w	r6, r0, sl
	  if (__navail >= __n)
 8015bd2:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 8015bd6:	ea4f 08a6 	mov.w	r8, r6, asr #2
	  if (__size > max_size() || __navail > max_size() - __size)
 8015bda:	eba3 04a6 	sub.w	r4, r3, r6, asr #2
	  if (__navail >= __n)
 8015bde:	d804      	bhi.n	8015bea <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x32>
	__uninit_default_n(__first, __n);
 8015be0:	f7ff ffd4 	bl	8015b8c <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPFffSt6vectorIfSaIfEEEjEET_S8_T0_>
	      this->_M_impl._M_finish =
 8015be4:	6078      	str	r0, [r7, #4]
    }
 8015be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (max_size() - size() < __n)
 8015bea:	428c      	cmp	r4, r1
 8015bec:	d202      	bcs.n	8015bf4 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x3c>
	  __throw_length_error(__N(__s));
 8015bee:	481a      	ldr	r0, [pc, #104]	@ (8015c58 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0xa0>)
 8015bf0:	f008 fac0 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 8015bf4:	4588      	cmp	r8, r1
 8015bf6:	4644      	mov	r4, r8
 8015bf8:	bf38      	it	cc
 8015bfa:	460c      	movcc	r4, r1
 8015bfc:	eb18 0404 	adds.w	r4, r8, r4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015c00:	d218      	bcs.n	8015c34 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x7c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015c02:	b1cc      	cbz	r4, 8015c38 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x80>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015c04:	429c      	cmp	r4, r3
 8015c06:	bf28      	it	cs
 8015c08:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8015c0a:	00a0      	lsls	r0, r4, #2
 8015c0c:	f008 f9fd 	bl	801e00a <_Znwj>
 8015c10:	4605      	mov	r5, r0
 8015c12:	4649      	mov	r1, r9
 8015c14:	19a8      	adds	r0, r5, r6
 8015c16:	f7ff ffb9 	bl	8015b8c <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPFffSt6vectorIfSaIfEEEjEET_S8_T0_>
      if (__count > 0)
 8015c1a:	b17e      	cbz	r6, 8015c3c <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x84>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015c1c:	4632      	mov	r2, r6
 8015c1e:	4651      	mov	r1, sl
 8015c20:	4628      	mov	r0, r5
 8015c22:	f009 f96f 	bl	801ef04 <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 8015c26:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8015c28:	4650      	mov	r0, sl
 8015c2a:	eba1 010a 	sub.w	r1, r1, sl
 8015c2e:	f008 f9c7 	bl	801dfc0 <_ZdlPvj>
      }
 8015c32:	e006      	b.n	8015c42 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x8a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015c34:	461c      	mov	r4, r3
 8015c36:	e7e8      	b.n	8015c0a <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x52>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015c38:	4625      	mov	r5, r4
 8015c3a:	e7ea      	b.n	8015c12 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x5a>
	if (__p)
 8015c3c:	f1ba 0f00 	cmp.w	sl, #0
 8015c40:	d1f1      	bne.n	8015c26 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x6e>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8015c42:	eb08 0109 	add.w	r1, r8, r9
	      this->_M_impl._M_start = __new_start;
 8015c46:	603d      	str	r5, [r7, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8015c48:	eb05 0181 	add.w	r1, r5, r1, lsl #2
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015c4c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8015c50:	6079      	str	r1, [r7, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015c52:	60bd      	str	r5, [r7, #8]
    }
 8015c54:	e7c7      	b.n	8015be6 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x2e>
 8015c56:	bf00      	nop
 8015c58:	0801f496 	.word	0x0801f496

08015c5c <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE6resizeEj>:
      resize(size_type __new_size)
 8015c5c:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015c5e:	e9d0 2500 	ldrd	r2, r5, [r0]
 8015c62:	1aac      	subs	r4, r5, r2
 8015c64:	10a4      	asrs	r4, r4, #2
	if (__new_size > size())
 8015c66:	42a1      	cmp	r1, r4
 8015c68:	d903      	bls.n	8015c72 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE6resizeEj+0x16>
	  _M_default_append(__new_size - size());
 8015c6a:	1b09      	subs	r1, r1, r4
 8015c6c:	f7ff ffa4 	bl	8015bb8 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj>
      }
 8015c70:	bd38      	pop	{r3, r4, r5, pc}
	else if (__new_size < size())
 8015c72:	d2fd      	bcs.n	8015c70 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE6resizeEj+0x14>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8015c74:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8015c78:	42aa      	cmp	r2, r5
	    this->_M_impl._M_finish = __pos;
 8015c7a:	bf18      	it	ne
 8015c7c:	6042      	strne	r2, [r0, #4]
      }
 8015c7e:	e7f7      	b.n	8015c70 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE6resizeEj+0x14>

08015c80 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPfjEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8015c80:	b538      	push	{r3, r4, r5, lr}
	  if (__n > 0)
 8015c82:	460c      	mov	r4, r1
 8015c84:	b181      	cbz	r1, 8015ca8 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPfjEET_S4_T0_+0x28>
 8015c86:	2100      	movs	r1, #0
 8015c88:	4605      	mov	r5, r0
      if (__n <= 0)
 8015c8a:	3c01      	subs	r4, #1
 8015c8c:	f845 1b04 	str.w	r1, [r5], #4
 8015c90:	d008      	beq.n	8015ca4 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPfjEET_S4_T0_+0x24>
      std::__fill_a(__first, __first + __n, __value);
 8015c92:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	*__first = __tmp;
 8015c96:	1a24      	subs	r4, r4, r0
 8015c98:	4628      	mov	r0, r5
 8015c9a:	3c04      	subs	r4, #4
 8015c9c:	4425      	add	r5, r4
 8015c9e:	4622      	mov	r2, r4
 8015ca0:	f009 f94a 	bl	801ef38 <memset>
	}
 8015ca4:	4628      	mov	r0, r5
 8015ca6:	bd38      	pop	{r3, r4, r5, pc}
 8015ca8:	4605      	mov	r5, r0
	  return __first;
 8015caa:	e7fb      	b.n	8015ca4 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPfjEET_S4_T0_+0x24>

08015cac <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 8015cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cb0:	4607      	mov	r7, r0
      if (__n != 0)
 8015cb2:	4689      	mov	r9, r1
 8015cb4:	b189      	cbz	r1, 8015cda <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x2e>
					 - this->_M_impl._M_finish);
 8015cb6:	68ba      	ldr	r2, [r7, #8]
	  if (__size > max_size() || __navail > max_size() - __size)
 8015cb8:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015cbc:	e9d0 a000 	ldrd	sl, r0, [r0]
					 - this->_M_impl._M_finish);
 8015cc0:	1a12      	subs	r2, r2, r0
 8015cc2:	eba0 060a 	sub.w	r6, r0, sl
	  if (__navail >= __n)
 8015cc6:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 8015cca:	ea4f 08a6 	mov.w	r8, r6, asr #2
	  if (__size > max_size() || __navail > max_size() - __size)
 8015cce:	eba3 04a6 	sub.w	r4, r3, r6, asr #2
	  if (__navail >= __n)
 8015cd2:	d804      	bhi.n	8015cde <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x32>
	__uninit_default_n(__first, __n);
 8015cd4:	f7ff ffd4 	bl	8015c80 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPfjEET_S4_T0_>
	      this->_M_impl._M_finish =
 8015cd8:	6078      	str	r0, [r7, #4]
    }
 8015cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (max_size() - size() < __n)
 8015cde:	428c      	cmp	r4, r1
 8015ce0:	d202      	bcs.n	8015ce8 <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x3c>
	  __throw_length_error(__N(__s));
 8015ce2:	481a      	ldr	r0, [pc, #104]	@ (8015d4c <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0xa0>)
 8015ce4:	f008 fa46 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 8015ce8:	4588      	cmp	r8, r1
 8015cea:	4644      	mov	r4, r8
 8015cec:	bf38      	it	cc
 8015cee:	460c      	movcc	r4, r1
 8015cf0:	eb18 0404 	adds.w	r4, r8, r4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015cf4:	d218      	bcs.n	8015d28 <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x7c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015cf6:	b1cc      	cbz	r4, 8015d2c <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x80>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015cf8:	429c      	cmp	r4, r3
 8015cfa:	bf28      	it	cs
 8015cfc:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8015cfe:	00a0      	lsls	r0, r4, #2
 8015d00:	f008 f983 	bl	801e00a <_Znwj>
 8015d04:	4605      	mov	r5, r0
 8015d06:	4649      	mov	r1, r9
 8015d08:	19a8      	adds	r0, r5, r6
 8015d0a:	f7ff ffb9 	bl	8015c80 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPfjEET_S4_T0_>
      if (__count > 0)
 8015d0e:	b17e      	cbz	r6, 8015d30 <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x84>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015d10:	4632      	mov	r2, r6
 8015d12:	4651      	mov	r1, sl
 8015d14:	4628      	mov	r0, r5
 8015d16:	f009 f8f5 	bl	801ef04 <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 8015d1a:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8015d1c:	4650      	mov	r0, sl
 8015d1e:	eba1 010a 	sub.w	r1, r1, sl
 8015d22:	f008 f94d 	bl	801dfc0 <_ZdlPvj>
      }
 8015d26:	e006      	b.n	8015d36 <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x8a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015d28:	461c      	mov	r4, r3
 8015d2a:	e7e8      	b.n	8015cfe <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x52>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015d2c:	4625      	mov	r5, r4
 8015d2e:	e7ea      	b.n	8015d06 <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x5a>
	if (__p)
 8015d30:	f1ba 0f00 	cmp.w	sl, #0
 8015d34:	d1f1      	bne.n	8015d1a <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x6e>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8015d36:	eb08 0109 	add.w	r1, r8, r9
	      this->_M_impl._M_start = __new_start;
 8015d3a:	603d      	str	r5, [r7, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8015d3c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015d40:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8015d44:	6079      	str	r1, [r7, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015d46:	60bd      	str	r5, [r7, #8]
    }
 8015d48:	e7c7      	b.n	8015cda <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x2e>
 8015d4a:	bf00      	nop
 8015d4c:	0801f496 	.word	0x0801f496

08015d50 <_ZNSt6vectorIPfSaIS0_EE6resizeEj>:
      resize(size_type __new_size)
 8015d50:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015d52:	e9d0 2500 	ldrd	r2, r5, [r0]
 8015d56:	1aac      	subs	r4, r5, r2
 8015d58:	10a4      	asrs	r4, r4, #2
	if (__new_size > size())
 8015d5a:	42a1      	cmp	r1, r4
 8015d5c:	d903      	bls.n	8015d66 <_ZNSt6vectorIPfSaIS0_EE6resizeEj+0x16>
	  _M_default_append(__new_size - size());
 8015d5e:	1b09      	subs	r1, r1, r4
 8015d60:	f7ff ffa4 	bl	8015cac <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj>
      }
 8015d64:	bd38      	pop	{r3, r4, r5, pc}
	else if (__new_size < size())
 8015d66:	d2fd      	bcs.n	8015d64 <_ZNSt6vectorIPfSaIS0_EE6resizeEj+0x14>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8015d68:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8015d6c:	42aa      	cmp	r2, r5
	    this->_M_impl._M_finish = __pos;
 8015d6e:	bf18      	it	ne
 8015d70:	6042      	strne	r2, [r0, #4]
      }
 8015d72:	e7f7      	b.n	8015d64 <_ZNSt6vectorIPfSaIS0_EE6resizeEj+0x14>

08015d74 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS>:
void Controller::Init(Registers* registers_, Publishers* publishers_, LEDS* leds_){
 8015d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	publishers = publishers_;
 8015d78:	e9c0 120e 	strd	r1, r2, [r0, #56]	@ 0x38
	ControlSemaphore = osSemaphoreNew(1,1,NULL);
 8015d7c:	2101      	movs	r1, #1
void Controller::Init(Registers* registers_, Publishers* publishers_, LEDS* leds_){
 8015d7e:	4604      	mov	r4, r0
	ControlSemaphore = osSemaphoreNew(1,1,NULL);
 8015d80:	2200      	movs	r2, #0
	leds = leds_;
 8015d82:	6403      	str	r3, [r0, #64]	@ 0x40
	ControlSemaphore = osSemaphoreNew(1,1,NULL);
 8015d84:	4608      	mov	r0, r1
	encoder_security_threshold = DEFAULT_ENCODER_SECURITY_THRESHOLD;
 8015d86:	2500      	movs	r5, #0
	ControlSemaphore = osSemaphoreNew(1,1,NULL);
 8015d88:	f7f7 f812 	bl	800cdb0 <osSemaphoreNew>
 8015d8c:	6360      	str	r0, [r4, #52]	@ 0x34
	osSemaphoreRelease(ControlSemaphore);
 8015d8e:	f7f7 f89f 	bl	800ced0 <osSemaphoreRelease>
	ResetController();
 8015d92:	4620      	mov	r0, r4
 8015d94:	f7fe fdd8 	bl	8014948 <_ZN10Controller15ResetControllerEv>
	SetControllerPeriodMs(DEFAULT_CONTROLLER_PERIOD);
 8015d98:	210a      	movs	r1, #10
 8015d9a:	4620      	mov	r0, r4
 8015d9c:	f7fe fdf0 	bl	8014980 <_ZN10Controller21SetControllerPeriodMsEm>
	SelectControllerMode(DEFAULT_CONTROLLER_MODE);
 8015da0:	2100      	movs	r1, #0
 8015da2:	4620      	mov	r0, r4
 8015da4:	f7fe feb4 	bl	8014b10 <_ZN10Controller20SelectControllerModeEh>
	integration_type = DEFAULT_ERROR_INTEGRATION_MODE;
 8015da8:	2301      	movs	r3, #1
	trajectory_generator.SetTrajectoryMode(DEFAULT_MOTOR_TRAJECTORY);
 8015daa:	4629      	mov	r1, r5
 8015dac:	4620      	mov	r0, r4
	integration_type = DEFAULT_ERROR_INTEGRATION_MODE;
 8015dae:	f8a4 315c 	strh.w	r3, [r4, #348]	@ 0x15c
	encoder_security_threshold = DEFAULT_ENCODER_SECURITY_THRESHOLD;
 8015db2:	4b61      	ldr	r3, [pc, #388]	@ (8015f38 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1c4>)
 8015db4:	e9c4 535a 	strd	r5, r3, [r4, #360]	@ 0x168
	current_conversion = DEFAULT_CURRENT_CONVERSION_FACTOR;
 8015db8:	4b60      	ldr	r3, [pc, #384]	@ (8015f3c <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1c8>)
 8015dba:	f8c4 31b4 	str.w	r3, [r4, #436]	@ 0x1b4
	motor_current_compensation = DEFAULT_CURRENT_COMPENSATION_FACTOR;
 8015dbe:	4b60      	ldr	r3, [pc, #384]	@ (8015f40 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1cc>)
 8015dc0:	f8c4 3198 	str.w	r3, [r4, #408]	@ 0x198
	trajectory_generator.SetTrajectoryMode(DEFAULT_MOTOR_TRAJECTORY);
 8015dc4:	f008 f80e 	bl	801dde4 <_ZN19TrajectoryGenerator17SetTrajectoryModeEh>
	trajectory_generator.SetTrajectoryCyclicValue(DEFAULT_MOTOR_CYCLIC);
 8015dc8:	4629      	mov	r1, r5
 8015dca:	4620      	mov	r0, r4
 8015dcc:	f008 f80c 	bl	801dde8 <_ZN19TrajectoryGenerator24SetTrajectoryCyclicValueEb>
	trajectory_generator.SetTrajectoryMaxSpeed(DEFAULT_MOTOR_MAX_SPEED);
 8015dd0:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 8015f44 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1d0>
 8015dd4:	4620      	mov	r0, r4
 8015dd6:	f008 f809 	bl	801ddec <_ZN19TrajectoryGenerator21SetTrajectoryMaxSpeedEf>
	trajectory_generator.SetTrajectoryMaxAcceleration(DEFAULT_MOTOR_ACCEL_SPEED);
 8015dda:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015dde:	4620      	mov	r0, r4
 8015de0:	f008 f807 	bl	801ddf2 <_ZN19TrajectoryGenerator28SetTrajectoryMaxAccelerationEf>
	trajectory_generator.SetTrajectoryFrequency(DEFAULT_MOTOR_FREQUENCY);
 8015de4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015de8:	4620      	mov	r0, r4
 8015dea:	f008 f805 	bl	801ddf8 <_ZN19TrajectoryGenerator22SetTrajectoryFrequencyEf>
	trajectory_generator.SetTrajectoryPhase(DEFAULT_MOTOR_PHASE);
 8015dee:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 8015f48 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1d4>
 8015df2:	4620      	mov	r0, r4
 8015df4:	f008 f803 	bl	801ddfe <_ZN19TrajectoryGenerator18SetTrajectoryPhaseEf>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015df8:	e9d4 3254 	ldrd	r3, r2, [r4, #336]	@ 0x150
 8015dfc:	1ad1      	subs	r1, r2, r3
	if (__new_size > size())
 8015dfe:	2910      	cmp	r1, #16
 8015e00:	f200 8091 	bhi.w	8015f26 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1b2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015e04:	1089      	asrs	r1, r1, #2
	  _M_default_append(__new_size - size());
 8015e06:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 8015e0a:	f1c1 0105 	rsb	r1, r1, #5
 8015e0e:	f7fd fd5d 	bl	80138cc <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>
	return *(this->_M_impl._M_start + __n);
 8015e12:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
	positionConfiguration.selected_filter = DEFAULT_POSITION_FILTER;
 8015e16:	f04f 0800 	mov.w	r8, #0
	params[MOTOR_REDUCTION_RATIO] = DEFAULT_REDUCTION_RATIO; 					// Motor Reduction ratio
 8015e1a:	4a4c      	ldr	r2, [pc, #304]	@ (8015f4c <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1d8>)
	positionConfiguration.input_filters.resize(2);
 8015e1c:	2102      	movs	r1, #2
 8015e1e:	f104 0080 	add.w	r0, r4, #128	@ 0x80
	positionConfiguration.direction_criteria = &PWM;
 8015e22:	f504 77b2 	add.w	r7, r4, #356	@ 0x164
	params[MOTOR_REDUCTION_RATIO] = DEFAULT_REDUCTION_RATIO; 					// Motor Reduction ratio
 8015e26:	601a      	str	r2, [r3, #0]
	torqueConfiguration.selected_filter = DEFAULT_TORQUE_FILTER;
 8015e28:	f04f 0a02 	mov.w	sl, #2
	params[MOTOR_ELECTRIC_RESISTOR] = DEFAULT_EQUIVALENT_ELECTRIC_RESISTANCE; 	// Equivalent Motor Resistor
 8015e2c:	4a48      	ldr	r2, [pc, #288]	@ (8015f50 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1dc>)
	torqueConfiguration.direction_criteria = &setpoint;
 8015e2e:	f504 75b0 	add.w	r5, r4, #352	@ 0x160
	torqueConfiguration.model_active = DEFAULT_TORQUE_MODEL_ACTIVE;
 8015e32:	2601      	movs	r6, #1
	torqueConfiguration.model_variables.resize(2);
 8015e34:	f104 09f4 	add.w	r9, r4, #244	@ 0xf4
	params[MOTOR_ELECTRIC_RESISTOR] = DEFAULT_EQUIVALENT_ELECTRIC_RESISTANCE; 	// Equivalent Motor Resistor
 8015e38:	605a      	str	r2, [r3, #4]
	params[MOTOR_SPEED_CONSTANT] = DEFAULT_EQUIVALENT_SPEED_CONSTANT; 			// Equivalent Motor Speed Constant
 8015e3a:	4a46      	ldr	r2, [pc, #280]	@ (8015f54 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1e0>)
 8015e3c:	609a      	str	r2, [r3, #8]
	params[MOTOR_TORQUE_CONSTANT_INVERSE] = DEFAULT_TORQUE_CONSTANT_INVERSE; 	// Inverse of Motor Torque Constant
 8015e3e:	4a46      	ldr	r2, [pc, #280]	@ (8015f58 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1e4>)
 8015e40:	60da      	str	r2, [r3, #12]
	params[MOTOR_ENCODER_TICK_NUMBER] = DEFAULT_ENCODER_TICK_NUMBER; 			// Motor Encoder Tick Number
 8015e42:	f04f 4289 	mov.w	r2, #1149239296	@ 0x44800000
 8015e46:	611a      	str	r2, [r3, #16]
	positionConfiguration.track = &encoder_position;
 8015e48:	f504 73b8 	add.w	r3, r4, #368	@ 0x170
	positionConfiguration.selected_filter = DEFAULT_POSITION_FILTER;
 8015e4c:	f884 807c 	strb.w	r8, [r4, #124]	@ 0x7c
	positionConfiguration.track = &encoder_position;
 8015e50:	67a3      	str	r3, [r4, #120]	@ 0x78
	positionConfiguration.input_filters.resize(2);
 8015e52:	f7ff ff03 	bl	8015c5c <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE6resizeEj>
 8015e56:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
	positionConfiguration.input_filters[OUTPUT_MOTOR_POSITION_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input * parameters[MOTOR_REDUCTION_RATIO] * parameters[MOTOR_ENCODER_TICK_NUMBER] / 90;}); // motor position input after reductor in °
 8015e5a:	4a40      	ldr	r2, [pc, #256]	@ (8015f5c <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1e8>)
	torqueConfiguration.input_filters.resize(3);
 8015e5c:	2103      	movs	r1, #3
 8015e5e:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
	positionConfiguration.input_filters[OUTPUT_MOTOR_POSITION_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input * parameters[MOTOR_REDUCTION_RATIO] * parameters[MOTOR_ENCODER_TICK_NUMBER] / 90;}); // motor position input after reductor in °
 8015e62:	601a      	str	r2, [r3, #0]
	positionConfiguration.input_filters[INPUT_MOTOR_POSITION_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input * parameters[MOTOR_ENCODER_TICK_NUMBER] / 90;}); // motor position input in °
 8015e64:	4a3e      	ldr	r2, [pc, #248]	@ (8015f60 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1ec>)
 8015e66:	605a      	str	r2, [r3, #4]
	positionConfiguration.K = DEFAULT_POSITION_K;
 8015e68:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
	positionConfiguration.direction_criteria = &PWM;
 8015e6c:	f8c4 70a0 	str.w	r7, [r4, #160]	@ 0xa0
	positionConfiguration.K = DEFAULT_POSITION_K;
 8015e70:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
	positionConfiguration.Ti_inv = DEFAULT_POSITION_Ti_inv;
 8015e74:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
	positionConfiguration.Td = DEFAULT_POSITION_Td;
 8015e78:	4b3a      	ldr	r3, [pc, #232]	@ (8015f64 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1f0>)
	positionConfiguration.model_active = false;
 8015e7a:	f884 80a8 	strb.w	r8, [r4, #168]	@ 0xa8
	positionConfiguration.Td = DEFAULT_POSITION_Td;
 8015e7e:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
	positionConfiguration.Isaturation = DEFAULT_POSITION_Isat / (positionConfiguration.Ti_inv * positionConfiguration.K);
 8015e82:	4b39      	ldr	r3, [pc, #228]	@ (8015f68 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1f4>)
	torqueConfiguration.selected_filter = DEFAULT_TORQUE_FILTER;
 8015e84:	f884 a0c0 	strb.w	sl, [r4, #192]	@ 0xc0
	positionConfiguration.Isaturation = DEFAULT_POSITION_Isat / (positionConfiguration.Ti_inv * positionConfiguration.K);
 8015e88:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
	positionConfiguration.P_active = DEFAULT_POSITION_P_ACTIVE;
 8015e8c:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8015e90:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
	positionConfiguration.PWMAssignement = ([](float val) -> uint32_t {return (uint32_t) (abs(val));});
 8015e94:	4b35      	ldr	r3, [pc, #212]	@ (8015f6c <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1f8>)
 8015e96:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
	torqueConfiguration.track = &motor_current;
 8015e9a:	f504 73ca 	add.w	r3, r4, #404	@ 0x194
 8015e9e:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
	torqueConfiguration.input_filters.resize(3);
 8015ea2:	f7ff fedb 	bl	8015c5c <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE6resizeEj>
 8015ea6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
	torqueConfiguration.input_filters[CURRENT_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input;}); // motor current input in A
 8015eaa:	4a31      	ldr	r2, [pc, #196]	@ (8015f70 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1fc>)
	torqueConfiguration.model_variables.resize(2);
 8015eac:	4651      	mov	r1, sl
 8015eae:	4648      	mov	r0, r9
	torqueConfiguration.input_filters[CURRENT_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input;}); // motor current input in A
 8015eb0:	601a      	str	r2, [r3, #0]
	torqueConfiguration.input_filters[TORQUE_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input * parameters[MOTOR_TORQUE_CONSTANT_INVERSE];}); // motor torque before reductor input in mNm
 8015eb2:	4a30      	ldr	r2, [pc, #192]	@ (8015f74 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x200>)
 8015eb4:	605a      	str	r2, [r3, #4]
	torqueConfiguration.input_filters[TORQUE_REDUCTOR_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input * parameters[MOTOR_TORQUE_CONSTANT_INVERSE] / parameters[MOTOR_REDUCTION_RATIO];}); // motor torque after reductor input in mNm
 8015eb6:	4a30      	ldr	r2, [pc, #192]	@ (8015f78 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x204>)
 8015eb8:	609a      	str	r2, [r3, #8]
	torqueConfiguration.K = DEFAULT_TORQUE_K;
 8015eba:	4b30      	ldr	r3, [pc, #192]	@ (8015f7c <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x208>)
	torqueConfiguration.direction_criteria = &setpoint;
 8015ebc:	f8c4 50e4 	str.w	r5, [r4, #228]	@ 0xe4
	torqueConfiguration.K = DEFAULT_TORQUE_K;
 8015ec0:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
	torqueConfiguration.Ti_inv = DEFAULT_TORQUE_Ti_inv;
 8015ec4:	4b2e      	ldr	r3, [pc, #184]	@ (8015f80 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x20c>)
	torqueConfiguration.model_active = DEFAULT_TORQUE_MODEL_ACTIVE;
 8015ec6:	f884 60ec 	strb.w	r6, [r4, #236]	@ 0xec
	torqueConfiguration.Ti_inv = DEFAULT_TORQUE_Ti_inv;
 8015eca:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
	torqueConfiguration.Td = DEFAULT_TORQUE_Td;
 8015ece:	4b2d      	ldr	r3, [pc, #180]	@ (8015f84 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x210>)
 8015ed0:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
	torqueConfiguration.Isaturation = DEFAULT_TORQUE_Isat / (torqueConfiguration.Ti_inv * torqueConfiguration.K); //24000
 8015ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8015f88 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x214>)
 8015ed6:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
	torqueConfiguration.P_active = DEFAULT_TORQUE_P_ACTIVE;
 8015eda:	4b2c      	ldr	r3, [pc, #176]	@ (8015f8c <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x218>)
 8015edc:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
	torqueConfiguration.PWMAssignement = ([](float val) -> uint32_t {if (val > 0) return (uint32_t) (abs(val)); else return 0;});
 8015ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8015f90 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x21c>)
 8015ee2:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
	torqueConfiguration.model_variables.resize(2);
 8015ee6:	f7ff ff33 	bl	8015d50 <_ZNSt6vectorIPfSaIS0_EE6resizeEj>
 8015eea:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
	torqueConfiguration.model_variables[1] = &encoder_speed;
 8015eee:	f504 72c0 	add.w	r2, r4, #384	@ 0x180
	torqueConfiguration.model_variables.resize(1);
 8015ef2:	4631      	mov	r1, r6
	torqueConfiguration.model_variables[0] = &setpoint;
 8015ef4:	601d      	str	r5, [r3, #0]
	torqueConfiguration.model_variables.resize(1);
 8015ef6:	4648      	mov	r0, r9
	torqueConfiguration.model_variables[1] = &encoder_speed;
 8015ef8:	605a      	str	r2, [r3, #4]
	torqueConfiguration.model = ([](std::vector<float*> variables, std::vector<float> parameters) -> float {return (parameters[MOTOR_ELECTRIC_RESISTOR] * *(variables[0]) + parameters[MOTOR_SPEED_CONSTANT] * *(variables[1]));});
 8015efa:	4b26      	ldr	r3, [pc, #152]	@ (8015f94 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x220>)
	PWMConfiguration.track = &PWM;
 8015efc:	f8c4 7100 	str.w	r7, [r4, #256]	@ 0x100
	torqueConfiguration.model = ([](std::vector<float*> variables, std::vector<float> parameters) -> float {return (parameters[MOTOR_ELECTRIC_RESISTOR] * *(variables[0]) + parameters[MOTOR_SPEED_CONSTANT] * *(variables[1]));});
 8015f00:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
	PWMConfiguration.PWMAssignement = ([](float val) -> uint32_t {return (uint32_t) (abs(val));});
 8015f04:	4b24      	ldr	r3, [pc, #144]	@ (8015f98 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x224>)
	PWMConfiguration.model_active = true;
 8015f06:	f884 6130 	strb.w	r6, [r4, #304]	@ 0x130
	PWMConfiguration.PWMAssignement = ([](float val) -> uint32_t {return (uint32_t) (abs(val));});
 8015f0a:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
	PWMConfiguration.direction_criteria = &PWM;
 8015f0e:	e9c4 8749 	strd	r8, r7, [r4, #292]	@ 0x124
	torqueConfiguration.model_variables.resize(1);
 8015f12:	f7ff ff1d 	bl	8015d50 <_ZNSt6vectorIPfSaIS0_EE6resizeEj>
	PWMConfiguration.model_variables[0] = &setpoint;
 8015f16:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
 8015f1a:	601d      	str	r5, [r3, #0]
	PWMConfiguration.model = ([](std::vector<float*> variables, std::vector<float> parameters) -> float {return (*(variables[0]));});
 8015f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8015f9c <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x228>)
 8015f1e:	f8c4 3134 	str.w	r3, [r4, #308]	@ 0x134
}
 8015f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	else if (__new_size < size())
 8015f26:	2914      	cmp	r1, #20
 8015f28:	f67f af73 	bls.w	8015e12 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x9e>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8015f2c:	3314      	adds	r3, #20
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8015f2e:	429a      	cmp	r2, r3
	    this->_M_impl._M_finish = __pos;
 8015f30:	bf18      	it	ne
 8015f32:	f8c4 3154 	strne.w	r3, [r4, #340]	@ 0x154
 8015f36:	e76c      	b.n	8015e12 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x9e>
 8015f38:	00015f90 	.word	0x00015f90
 8015f3c:	39460000 	.word	0x39460000
 8015f40:	3f82c083 	.word	0x3f82c083
 8015f44:	447a0000 	.word	0x447a0000
 8015f48:	00000000 	.word	0x00000000
 8015f4c:	430a0000 	.word	0x430a0000
 8015f50:	46593000 	.word	0x46593000
 8015f54:	3b83126f 	.word	0x3b83126f
 8015f58:	3e4c6426 	.word	0x3e4c6426
 8015f5c:	08014541 	.word	0x08014541
 8015f60:	08014219 	.word	0x08014219
 8015f64:	3d4ccccd 	.word	0x3d4ccccd
 8015f68:	453b8000 	.word	0x453b8000
 8015f6c:	08014231 	.word	0x08014231
 8015f70:	0801423f 	.word	0x0801423f
 8015f74:	08014241 	.word	0x08014241
 8015f78:	0801424d 	.word	0x0801424d
 8015f7c:	459c4000 	.word	0x459c4000
 8015f80:	40555555 	.word	0x40555555
 8015f84:	3ba3d70a 	.word	0x3ba3d70a
 8015f88:	3f19999a 	.word	0x3f19999a
 8015f8c:	01000101 	.word	0x01000101
 8015f90:	08014261 	.word	0x08014261
 8015f94:	08014561 	.word	0x08014561
 8015f98:	08014759 	.word	0x08014759
 8015f9c:	0801427b 	.word	0x0801427b

08015fa0 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015fa0:	2300      	movs	r3, #0
/**
 * @brief Class constructor
 *
 * @param input timer_: the timer pointer used to generate interrupts
 */
HardwareDelay::HardwareDelay(TIM_HandleTypeDef* timer_) {
 8015fa2:	b570      	push	{r4, r5, r6, lr}
 8015fa4:	4604      	mov	r4, r0
 8015fa6:	6183      	str	r3, [r0, #24]
	timer = timer_;
 8015fa8:	6041      	str	r1, [r0, #4]
 8015faa:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8015fae:	2024      	movs	r0, #36	@ 0x24
 8015fb0:	f008 f82b 	bl	801e00a <_Znwj>
 8015fb4:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 8015fb6:	e9d4 6204 	ldrd	r6, r2, [r4, #16]
 8015fba:	1b92      	subs	r2, r2, r6
      if (__count > 0)
 8015fbc:	2a00      	cmp	r2, #0
 8015fbe:	dd08      	ble.n	8015fd2 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef+0x32>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015fc0:	4631      	mov	r1, r6
 8015fc2:	f008 ff9f 	bl	801ef04 <memmove>
			- this->_M_impl._M_start);
 8015fc6:	69a1      	ldr	r1, [r4, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8015fc8:	4630      	mov	r0, r6
 8015fca:	1b89      	subs	r1, r1, r6
 8015fcc:	f007 fff8 	bl	801dfc0 <_ZdlPvj>
      }
 8015fd0:	e001      	b.n	8015fd6 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef+0x36>
	if (__p)
 8015fd2:	2e00      	cmp	r6, #0
 8015fd4:	d1f7      	bne.n	8015fc6 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef+0x26>

	pending_delays.reserve(DELAY_NUMBER_OF_CHANNELS);
}
 8015fd6:	4620      	mov	r0, r4
	  this->_M_impl._M_finish = __tmp + __old_size;
 8015fd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015fdc:	3524      	adds	r5, #36	@ 0x24
 8015fde:	61a5      	str	r5, [r4, #24]
 8015fe0:	bd70      	pop	{r4, r5, r6, pc}

08015fe2 <_ZN13HardwareDelay13AssignedTimerEP17TIM_HandleTypeDef>:
 * @brief Check that the input timer is registered in the class.
 *
 * @param input timer_: the timer pointer to check
 * @return true if input timer is used by the class
 */
bool HardwareDelay::AssignedTimer(TIM_HandleTypeDef* timer_) {
 8015fe2:	b570      	push	{r4, r5, r6, lr}
 8015fe4:	4604      	mov	r4, r0
 8015fe6:	460e      	mov	r6, r1
	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 8015fe8:	6800      	ldr	r0, [r0, #0]
 8015fea:	f04f 31ff 	mov.w	r1, #4294967295
 8015fee:	f7f6 ff3b 	bl	800ce68 <osSemaphoreAcquire>
	bool result = timer == timer_;
 8015ff2:	6865      	ldr	r5, [r4, #4]
	osSemaphoreRelease(DelaySemaphore);
 8015ff4:	6820      	ldr	r0, [r4, #0]
	bool result = timer == timer_;
 8015ff6:	1bab      	subs	r3, r5, r6
 8015ff8:	425d      	negs	r5, r3
 8015ffa:	415d      	adcs	r5, r3
	osSemaphoreRelease(DelaySemaphore);
 8015ffc:	f7f6 ff68 	bl	800ced0 <osSemaphoreRelease>
	return result;
}
 8016000:	4628      	mov	r0, r5
 8016002:	bd70      	pop	{r4, r5, r6, pc}

08016004 <_ZN13HardwareDelay10StartDelayEv>:
}

/**
 * @brief Setup and start the timer based on the active delay
 */
void HardwareDelay::StartDelay(void) {
 8016004:	4603      	mov	r3, r0
	timer->Instance->CNT = 0;
 8016006:	6840      	ldr	r0, [r0, #4]
 8016008:	2200      	movs	r2, #0
 801600a:	6801      	ldr	r1, [r0, #0]
 801600c:	624a      	str	r2, [r1, #36]	@ 0x24
	return *(this->_M_impl._M_start + __n);
 801600e:	7b1a      	ldrb	r2, [r3, #12]
	timer->Instance->ARR = pending_delays[active_delay].delay;
 8016010:	691b      	ldr	r3, [r3, #16]
 8016012:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016016:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801601a:	885b      	ldrh	r3, [r3, #2]
 801601c:	62cb      	str	r3, [r1, #44]	@ 0x2c
	timer->Instance->SR = ~TIM_IT_UPDATE;
 801601e:	f06f 0301 	mvn.w	r3, #1
 8016022:	610b      	str	r3, [r1, #16]
	HAL_TIM_Base_Start_IT(timer);
 8016024:	f7f4 bf88 	b.w	800af38 <HAL_TIM_Base_Start_IT>

08016028 <_ZN13HardwareDelay14StartNextDelayEv>:
}

/**
 * @brief Active and start the next delay
 */
void HardwareDelay::StartNextDelay(void) {
 8016028:	b5f0      	push	{r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801602a:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
 801602e:	4a1a      	ldr	r2, [pc, #104]	@ (8016098 <_ZN13HardwareDelay14StartNextDelayEv+0x70>)
 8016030:	1b59      	subs	r1, r3, r5
	if (pending_delays.size() == 0) return;
 8016032:	42ab      	cmp	r3, r5
 8016034:	ea4f 01a1 	mov.w	r1, r1, asr #2
 8016038:	fb02 f101 	mul.w	r1, r2, r1
 801603c:	d02b      	beq.n	8016096 <_ZN13HardwareDelay14StartNextDelayEv+0x6e>

	// Find the smallest delay in memory
	uint8_t min_delay = 0;
	for (uint8_t index = 1; index < pending_delays.size(); index++) {
 801603e:	2301      	movs	r3, #1
	uint8_t min_delay = 0;
 8016040:	2400      	movs	r4, #0
	return *(this->_M_impl._M_start + __n);
 8016042:	b222      	sxth	r2, r4
	for (uint8_t index = 1; index < pending_delays.size(); index++) {
 8016044:	428b      	cmp	r3, r1
 8016046:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801604a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 801604e:	d30a      	bcc.n	8016066 <_ZN13HardwareDelay14StartNextDelayEv+0x3e>
			min_delay = index;
	}

	// Update other delays based on the active one
	active_delay = min_delay;
	for (uint8_t index = 0; index < pending_delays.size(); index++) {
 8016050:	2600      	movs	r6, #0
 8016052:	f04f 0c0c 	mov.w	ip, #12
	active_delay = min_delay;
 8016056:	7304      	strb	r4, [r0, #12]
	for (uint8_t index = 0; index < pending_delays.size(); index++) {
 8016058:	b2f3      	uxtb	r3, r6
 801605a:	428b      	cmp	r3, r1
 801605c:	d30f      	bcc.n	801607e <_ZN13HardwareDelay14StartNextDelayEv+0x56>
		}
	}

	// Start the delay
	StartDelay();
}
 801605e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	StartDelay();
 8016062:	f7ff bfcf 	b.w	8016004 <_ZN13HardwareDelay10StartDelayEv>
 8016066:	eb03 0643 	add.w	r6, r3, r3, lsl #1
		if (pending_delays[index].delay < pending_delays[min_delay].delay)
 801606a:	8852      	ldrh	r2, [r2, #2]
 801606c:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8016070:	8876      	ldrh	r6, [r6, #2]
			min_delay = index;
 8016072:	4296      	cmp	r6, r2
 8016074:	bf38      	it	cc
 8016076:	461c      	movcc	r4, r3
	for (uint8_t index = 1; index < pending_delays.size(); index++) {
 8016078:	3301      	adds	r3, #1
 801607a:	b2db      	uxtb	r3, r3
 801607c:	e7e1      	b.n	8016042 <_ZN13HardwareDelay14StartNextDelayEv+0x1a>
		if (index != active_delay) {
 801607e:	429c      	cmp	r4, r3
 8016080:	d007      	beq.n	8016092 <_ZN13HardwareDelay14StartNextDelayEv+0x6a>
 8016082:	fb0c 5303 	mla	r3, ip, r3, r5
			pending_delays[index].delay -= pending_delays[active_delay].delay;
 8016086:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 801608a:	885f      	ldrh	r7, [r3, #2]
 801608c:	eba7 070e 	sub.w	r7, r7, lr
 8016090:	805f      	strh	r7, [r3, #2]
	for (uint8_t index = 0; index < pending_delays.size(); index++) {
 8016092:	3601      	adds	r6, #1
 8016094:	e7e0      	b.n	8016058 <_ZN13HardwareDelay14StartNextDelayEv+0x30>
}
 8016096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016098:	aaaaaaab 	.word	0xaaaaaaab

0801609c <_ZN13HardwareDelay14FindDelayIndexEhPb>:
 *
 * @param input ID: the delay ID to be found
 * @param output success: true if the delay is found
 * @return the delay index in the delay vector
 */
uint8_t HardwareDelay::FindDelayIndex(uint8_t ID, bool* success) {
 801609c:	b570      	push	{r4, r5, r6, lr}
 801609e:	e9d0 3404 	ldrd	r3, r4, [r0, #16]
	uint8_t index = 0;
	for (Delay delay : pending_delays) {
 80160a2:	2000      	movs	r0, #0
 80160a4:	429c      	cmp	r4, r3
 80160a6:	461d      	mov	r5, r3
 80160a8:	d102      	bne.n	80160b0 <_ZN13HardwareDelay14FindDelayIndexEhPb+0x14>
 80160aa:	2300      	movs	r3, #0
			return index;
		}
		index++;
	}
	*success = false;
	return 0;
 80160ac:	4618      	mov	r0, r3
 80160ae:	e006      	b.n	80160be <_ZN13HardwareDelay14FindDelayIndexEhPb+0x22>
		if (delay.ID == ID) {
 80160b0:	782d      	ldrb	r5, [r5, #0]
 80160b2:	1c46      	adds	r6, r0, #1
 80160b4:	330c      	adds	r3, #12
 80160b6:	428d      	cmp	r5, r1
 80160b8:	d103      	bne.n	80160c2 <_ZN13HardwareDelay14FindDelayIndexEhPb+0x26>
 80160ba:	b2c0      	uxtb	r0, r0
 80160bc:	2301      	movs	r3, #1
			*success = true;
 80160be:	7013      	strb	r3, [r2, #0]
}
 80160c0:	bd70      	pop	{r4, r5, r6, pc}
 80160c2:	4630      	mov	r0, r6
 80160c4:	e7ee      	b.n	80160a4 <_ZN13HardwareDelay14FindDelayIndexEhPb+0x8>

080160c6 <_ZN13HardwareDelay17IsDelayRegisteredEh>:
bool HardwareDelay::IsDelayRegistered(uint8_t ID) {
 80160c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80160c8:	4604      	mov	r4, r0
 80160ca:	460d      	mov	r5, r1
	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 80160cc:	6800      	ldr	r0, [r0, #0]
 80160ce:	f04f 31ff 	mov.w	r1, #4294967295
 80160d2:	f7f6 fec9 	bl	800ce68 <osSemaphoreAcquire>
	FindDelayIndex(ID, &success);
 80160d6:	f10d 0207 	add.w	r2, sp, #7
 80160da:	4629      	mov	r1, r5
 80160dc:	4620      	mov	r0, r4
 80160de:	f7ff ffdd 	bl	801609c <_ZN13HardwareDelay14FindDelayIndexEhPb>
	osSemaphoreRelease(DelaySemaphore);
 80160e2:	6820      	ldr	r0, [r4, #0]
 80160e4:	f7f6 fef4 	bl	800ced0 <osSemaphoreRelease>
}
 80160e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80160ec:	b003      	add	sp, #12
 80160ee:	bd30      	pop	{r4, r5, pc}

080160f0 <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80160f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80160f4:	e9d0 8a00 	ldrd	r8, sl, [r0]
 80160f8:	4b26      	ldr	r3, [pc, #152]	@ (8016194 <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
 80160fa:	4607      	mov	r7, r0
 80160fc:	ebaa 0408 	sub.w	r4, sl, r8
 8016100:	4689      	mov	r9, r1
 8016102:	4693      	mov	fp, r2
 8016104:	10a4      	asrs	r4, r4, #2
 8016106:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 8016108:	4b23      	ldr	r3, [pc, #140]	@ (8016198 <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa8>)
 801610a:	429c      	cmp	r4, r3
 801610c:	d102      	bne.n	8016114 <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 801610e:	4823      	ldr	r0, [pc, #140]	@ (801619c <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xac>)
 8016110:	f008 f830 	bl	801e174 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8016114:	45c2      	cmp	sl, r8
 8016116:	bf14      	ite	ne
 8016118:	4622      	movne	r2, r4
 801611a:	2201      	moveq	r2, #1
 801611c:	eba1 0508 	sub.w	r5, r1, r8
 8016120:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016122:	d232      	bcs.n	801618a <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016124:	b39c      	cbz	r4, 801618e <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016126:	429c      	cmp	r4, r3
 8016128:	bf28      	it	cs
 801612a:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801612c:	200c      	movs	r0, #12
 801612e:	4360      	muls	r0, r4
 8016130:	f007 ff6b 	bl	801e00a <_Znwj>
 8016134:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016136:	1973      	adds	r3, r6, r5
      if (__count > 0)
 8016138:	2d00      	cmp	r5, #0
 801613a:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 801613e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016142:	dd04      	ble.n	801614e <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016144:	462a      	mov	r2, r5
 8016146:	4641      	mov	r1, r8
 8016148:	4630      	mov	r0, r6
 801614a:	f008 fedb 	bl	801ef04 <memmove>
      ptrdiff_t __count = __last - __first;
 801614e:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 8016152:	350c      	adds	r5, #12
      if (__count > 0)
 8016154:	f1ba 0f00 	cmp.w	sl, #0
 8016158:	4435      	add	r5, r6
 801615a:	dd04      	ble.n	8016166 <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x76>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801615c:	4652      	mov	r2, sl
 801615e:	4649      	mov	r1, r9
 8016160:	4628      	mov	r0, r5
 8016162:	f008 ffc7 	bl	801f0f4 <memcpy>
      return __result + __count;
 8016166:	4455      	add	r5, sl
	if (__p)
 8016168:	f1b8 0f00 	cmp.w	r8, #0
 801616c:	d005      	beq.n	801617a <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8a>
		    this->_M_impl._M_end_of_storage - __old_start);
 801616e:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8016170:	4640      	mov	r0, r8
 8016172:	eba1 0108 	sub.w	r1, r1, r8
 8016176:	f007 ff23 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801617a:	230c      	movs	r3, #12
      this->_M_impl._M_finish = __new_finish;
 801617c:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016180:	fb03 6604 	mla	r6, r3, r4, r6
 8016184:	60be      	str	r6, [r7, #8]
    }
 8016186:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801618a:	461c      	mov	r4, r3
 801618c:	e7ce      	b.n	801612c <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801618e:	4626      	mov	r6, r4
 8016190:	e7d1      	b.n	8016136 <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8016192:	bf00      	nop
 8016194:	aaaaaaab 	.word	0xaaaaaaab
 8016198:	0aaaaaaa 	.word	0x0aaaaaaa
 801619c:	0801f20c 	.word	0x0801f20c

080161a0 <_ZNSt6vectorI5DelaySaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 80161a0:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80161a2:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
      push_back(const value_type& __x)
 80161a6:	b510      	push	{r4, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80161a8:	428b      	cmp	r3, r1
      push_back(const value_type& __x)
 80161aa:	4604      	mov	r4, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80161ac:	d005      	beq.n	80161ba <_ZNSt6vectorI5DelaySaIS0_EE9push_backERKS0_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80161ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80161b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    ++this->_M_impl._M_finish;
 80161b4:	330c      	adds	r3, #12
 80161b6:	6063      	str	r3, [r4, #4]
      }
 80161b8:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 80161ba:	4619      	mov	r1, r3
 80161bc:	f7ff ff98 	bl	80160f0 <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 80161c0:	e7fa      	b.n	80161b8 <_ZNSt6vectorI5DelaySaIS0_EE9push_backERKS0_+0x18>
	...

080161c4 <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE>:
bool HardwareDelay::AddDelayMS(uint8_t ID, uint16_t delay_ms, void* context, void (*callback)(void*, uint8_t)) {
 80161c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80161c8:	4604      	mov	r4, r0
 80161ca:	460f      	mov	r7, r1
	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 80161cc:	6800      	ldr	r0, [r0, #0]
 80161ce:	f04f 31ff 	mov.w	r1, #4294967295
bool HardwareDelay::AddDelayMS(uint8_t ID, uint16_t delay_ms, void* context, void (*callback)(void*, uint8_t)) {
 80161d2:	4616      	mov	r6, r2
 80161d4:	4698      	mov	r8, r3
	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 80161d6:	f7f6 fe47 	bl	800ce68 <osSemaphoreAcquire>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80161da:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80161de:	1a9b      	subs	r3, r3, r2
	if (pending_delays.size() >= DELAY_NUMBER_OF_CHANNELS) {
 80161e0:	2b18      	cmp	r3, #24
 80161e2:	d906      	bls.n	80161f2 <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0x2e>
		osSemaphoreRelease(DelaySemaphore);
 80161e4:	6820      	ldr	r0, [r4, #0]
 80161e6:	f7f6 fe73 	bl	800ced0 <osSemaphoreRelease>
		return false;
 80161ea:	2000      	movs	r0, #0
}
 80161ec:	b004      	add	sp, #16
 80161ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FindDelayIndex(ID, &success);
 80161f2:	f10d 0203 	add.w	r2, sp, #3
 80161f6:	4639      	mov	r1, r7
 80161f8:	4620      	mov	r0, r4
 80161fa:	f7ff ff4f 	bl	801609c <_ZN13HardwareDelay14FindDelayIndexEhPb>
	if (success) {
 80161fe:	f89d 5003 	ldrb.w	r5, [sp, #3]
 8016202:	2d00      	cmp	r5, #0
 8016204:	d1ee      	bne.n	80161e4 <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0x20>
	HAL_TIM_Base_Stop_IT(timer);
 8016206:	6860      	ldr	r0, [r4, #4]
 8016208:	f7f4 fede 	bl	800afc8 <HAL_TIM_Base_Stop_IT>
 801620c:	6961      	ldr	r1, [r4, #20]
	hardware_delay.delay = delay_ms << 2; // * 4 to get delay in 1/4 ms
 801620e:	00b2      	lsls	r2, r6, #2
 8016210:	4626      	mov	r6, r4
	hardware_delay.callback = callback;
 8016212:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016214:	f856 cf10 	ldr.w	ip, [r6, #16]!
	hardware_delay.delay = delay_ms << 2; // * 4 to get delay in 1/4 ms
 8016218:	b292      	uxth	r2, r2
	hardware_delay.ID = ID;
 801621a:	f88d 7004 	strb.w	r7, [sp, #4]
	if (pending_delays.size() > 0) {
 801621e:	4561      	cmp	r1, ip
	hardware_delay.delay = delay_ms << 2; // * 4 to get delay in 1/4 ms
 8016220:	f8ad 2006 	strh.w	r2, [sp, #6]
	hardware_delay.context = context;
 8016224:	f8cd 8008 	str.w	r8, [sp, #8]
	hardware_delay.callback = callback;
 8016228:	9303      	str	r3, [sp, #12]
	if (pending_delays.size() > 0) {
 801622a:	d01b      	beq.n	8016264 <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0xa0>
		uint16_t remaining_time = timer->Instance->ARR - timer->Instance->CNT;
 801622c:	6860      	ldr	r0, [r4, #4]
 801622e:	6807      	ldr	r7, [r0, #0]
 8016230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016232:	f8d7 8024 	ldr.w	r8, [r7, #36]	@ 0x24
 8016236:	b29b      	uxth	r3, r3
 8016238:	fa1f f888 	uxth.w	r8, r8
 801623c:	eba3 0e08 	sub.w	lr, r3, r8
 8016240:	fa1f fe8e 	uxth.w	lr, lr
		if (hardware_delay.delay < remaining_time) {
 8016244:	4572      	cmp	r2, lr
 8016246:	d22a      	bcs.n	801629e <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0xda>
 8016248:	eba1 010c 	sub.w	r1, r1, ip
 801624c:	4b1b      	ldr	r3, [pc, #108]	@ (80162bc <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0xf8>)
	return *(this->_M_impl._M_start + __n);
 801624e:	f04f 080c 	mov.w	r8, #12
					pending_delays[index].delay += remaining_time - hardware_delay.delay;
 8016252:	ebae 0002 	sub.w	r0, lr, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016256:	1089      	asrs	r1, r1, #2
 8016258:	4359      	muls	r1, r3
 801625a:	fa5f f985 	uxtb.w	r9, r5
			for (uint8_t index = 0; index < pending_delays.size(); index++) {
 801625e:	4549      	cmp	r1, r9
 8016260:	d809      	bhi.n	8016276 <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0xb2>
			active_delay = pending_delays.size();
 8016262:	b2cd      	uxtb	r5, r1
	pending_delays.push_back(hardware_delay);
 8016264:	4630      	mov	r0, r6
 8016266:	a901      	add	r1, sp, #4
			active_delay = pending_delays.size();
 8016268:	7325      	strb	r5, [r4, #12]
	pending_delays.push_back(hardware_delay);
 801626a:	f7ff ff99 	bl	80161a0 <_ZNSt6vectorI5DelaySaIS0_EE9push_backERKS0_>
	StartDelay();
 801626e:	4620      	mov	r0, r4
 8016270:	f7ff fec8 	bl	8016004 <_ZN13HardwareDelay10StartDelayEv>
 8016274:	e01d      	b.n	80162b2 <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0xee>
				if (index == active_delay)
 8016276:	f894 a00c 	ldrb.w	sl, [r4, #12]
	return *(this->_M_impl._M_start + __n);
 801627a:	fb08 ce09 	mla	lr, r8, r9, ip
 801627e:	45ca      	cmp	sl, r9
					pending_delays[index].delay -= timer->Instance->CNT + hardware_delay.delay;
 8016280:	f8be 3002 	ldrh.w	r3, [lr, #2]
				if (index == active_delay)
 8016284:	d109      	bne.n	801629a <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0xd6>
					pending_delays[index].delay -= timer->Instance->CNT + hardware_delay.delay;
 8016286:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 801628a:	4491      	add	r9, r2
 801628c:	eba3 0309 	sub.w	r3, r3, r9
					pending_delays[index].delay += remaining_time - hardware_delay.delay;
 8016290:	b29b      	uxth	r3, r3
 8016292:	3501      	adds	r5, #1
					pending_delays[index].delay -= timer->Instance->CNT + hardware_delay.delay;
 8016294:	f8ae 3002 	strh.w	r3, [lr, #2]
			for (uint8_t index = 0; index < pending_delays.size(); index++) {
 8016298:	e7df      	b.n	801625a <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0x96>
					pending_delays[index].delay += remaining_time - hardware_delay.delay;
 801629a:	4403      	add	r3, r0
 801629c:	e7f8      	b.n	8016290 <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0xcc>
			hardware_delay.delay -= remaining_time;
 801629e:	4442      	add	r2, r8
 80162a0:	1ad2      	subs	r2, r2, r3
 80162a2:	f8ad 2006 	strh.w	r2, [sp, #6]
			HAL_TIM_Base_Start_IT(timer);
 80162a6:	f7f4 fe47 	bl	800af38 <HAL_TIM_Base_Start_IT>
			pending_delays.push_back(hardware_delay);
 80162aa:	a901      	add	r1, sp, #4
 80162ac:	4630      	mov	r0, r6
 80162ae:	f7ff ff77 	bl	80161a0 <_ZNSt6vectorI5DelaySaIS0_EE9push_backERKS0_>
	osSemaphoreRelease(DelaySemaphore);
 80162b2:	6820      	ldr	r0, [r4, #0]
 80162b4:	f7f6 fe0c 	bl	800ced0 <osSemaphoreRelease>
			return true;
 80162b8:	2001      	movs	r0, #1
 80162ba:	e797      	b.n	80161ec <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0x28>
 80162bc:	aaaaaaab 	.word	0xaaaaaaab

080162c0 <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 80162c0:	460b      	mov	r3, r1
      : _M_current(__i) { }
 80162c2:	6842      	ldr	r2, [r0, #4]
      { return __normal_iterator(_M_current + __n); }
 80162c4:	310c      	adds	r1, #12
      if (__position + 1 != end())
 80162c6:	428a      	cmp	r2, r1
    vector<_Tp, _Alloc>::
 80162c8:	b510      	push	{r4, lr}
 80162ca:	4604      	mov	r4, r0
      if (__position + 1 != end())
 80162cc:	d004      	beq.n	80162d8 <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80162ce:	4618      	mov	r0, r3
 80162d0:	1a52      	subs	r2, r2, r1
 80162d2:	f008 fe17 	bl	801ef04 <memmove>
 80162d6:	4603      	mov	r3, r0
      --this->_M_impl._M_finish;
 80162d8:	6862      	ldr	r2, [r4, #4]
    }
 80162da:	4618      	mov	r0, r3
      --this->_M_impl._M_finish;
 80162dc:	3a0c      	subs	r2, #12
 80162de:	6062      	str	r2, [r4, #4]
    }
 80162e0:	bd10      	pop	{r4, pc}
	...

080162e4 <_ZN13HardwareDelay13RemoveDelayMSEh>:
bool HardwareDelay::RemoveDelayMS(uint8_t ID) {
 80162e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80162e6:	460d      	mov	r5, r1
 80162e8:	4604      	mov	r4, r0
	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 80162ea:	f04f 31ff 	mov.w	r1, #4294967295
 80162ee:	6800      	ldr	r0, [r0, #0]
 80162f0:	f7f6 fdba 	bl	800ce68 <osSemaphoreAcquire>
	uint8_t index = FindDelayIndex(ID, &success);
 80162f4:	4629      	mov	r1, r5
 80162f6:	f10d 0207 	add.w	r2, sp, #7
 80162fa:	4620      	mov	r0, r4
 80162fc:	f7ff fece 	bl	801609c <_ZN13HardwareDelay14FindDelayIndexEhPb>
	if (!success) {
 8016300:	f89d 5007 	ldrb.w	r5, [sp, #7]
	uint8_t index = FindDelayIndex(ID, &success);
 8016304:	4606      	mov	r6, r0
	if (!success) {
 8016306:	b92d      	cbnz	r5, 8016314 <_ZN13HardwareDelay13RemoveDelayMSEh+0x30>
	osSemaphoreRelease(DelaySemaphore);
 8016308:	6820      	ldr	r0, [r4, #0]
 801630a:	f7f6 fde1 	bl	800ced0 <osSemaphoreRelease>
}
 801630e:	4628      	mov	r0, r5
 8016310:	b003      	add	sp, #12
 8016312:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_TIM_Base_Stop_IT(timer);
 8016314:	6860      	ldr	r0, [r4, #4]
 8016316:	f7f4 fe57 	bl	800afc8 <HAL_TIM_Base_Stop_IT>
 801631a:	4620      	mov	r0, r4
 801631c:	b231      	sxth	r1, r6
 801631e:	f850 3f10 	ldr.w	r3, [r0, #16]!
 8016322:	eb01 0141 	add.w	r1, r1, r1, lsl #1
      { return _M_erase(begin() + (__position - cbegin())); }
 8016326:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801632a:	f7ff ffc9 	bl	80162c0 <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
	if (active_delay == index) {
 801632e:	7b23      	ldrb	r3, [r4, #12]
 8016330:	42b3      	cmp	r3, r6
 8016332:	d11c      	bne.n	801636e <_ZN13HardwareDelay13RemoveDelayMSEh+0x8a>
		uint16_t remaining_time = timer->Instance->ARR - timer->Instance->CNT;
 8016334:	6863      	ldr	r3, [r4, #4]
		for (uint8_t index = 0; index < pending_delays.size(); index++) {
 8016336:	2000      	movs	r0, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016338:	4a11      	ldr	r2, [pc, #68]	@ (8016380 <_ZN13HardwareDelay13RemoveDelayMSEh+0x9c>)
	return *(this->_M_impl._M_start + __n);
 801633a:	f04f 0c0c 	mov.w	ip, #12
		uint16_t remaining_time = timer->Instance->ARR - timer->Instance->CNT;
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8016342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016344:	1ac9      	subs	r1, r1, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016346:	e9d4 7304 	ldrd	r7, r3, [r4, #16]
 801634a:	b289      	uxth	r1, r1
 801634c:	1bdb      	subs	r3, r3, r7
 801634e:	109b      	asrs	r3, r3, #2
 8016350:	4353      	muls	r3, r2
		for (uint8_t index = 0; index < pending_delays.size(); index++) {
 8016352:	b2c2      	uxtb	r2, r0
 8016354:	3001      	adds	r0, #1
 8016356:	4293      	cmp	r3, r2
 8016358:	d803      	bhi.n	8016362 <_ZN13HardwareDelay13RemoveDelayMSEh+0x7e>
		StartNextDelay();
 801635a:	4620      	mov	r0, r4
 801635c:	f7ff fe64 	bl	8016028 <_ZN13HardwareDelay14StartNextDelayEv>
 8016360:	e7d2      	b.n	8016308 <_ZN13HardwareDelay13RemoveDelayMSEh+0x24>
	return *(this->_M_impl._M_start + __n);
 8016362:	fb0c 7202 	mla	r2, ip, r2, r7
			pending_delays[index].delay += remaining_time;
 8016366:	8856      	ldrh	r6, [r2, #2]
 8016368:	440e      	add	r6, r1
 801636a:	8056      	strh	r6, [r2, #2]
		for (uint8_t index = 0; index < pending_delays.size(); index++) {
 801636c:	e7f1      	b.n	8016352 <_ZN13HardwareDelay13RemoveDelayMSEh+0x6e>
		if (index < active_delay) active_delay--;
 801636e:	bf88      	it	hi
 8016370:	f103 33ff 	addhi.w	r3, r3, #4294967295
		HAL_TIM_Base_Start_IT(timer);
 8016374:	6860      	ldr	r0, [r4, #4]
		if (index < active_delay) active_delay--;
 8016376:	bf88      	it	hi
 8016378:	7323      	strbhi	r3, [r4, #12]
		HAL_TIM_Base_Start_IT(timer);
 801637a:	f7f4 fddd 	bl	800af38 <HAL_TIM_Base_Start_IT>
 801637e:	e7c3      	b.n	8016308 <_ZN13HardwareDelay13RemoveDelayMSEh+0x24>
 8016380:	aaaaaaab 	.word	0xaaaaaaab

08016384 <_ZN13HardwareDelay14TriggeredDelayEv>:
void HardwareDelay::TriggeredDelay(void) {
 8016384:	b510      	push	{r4, lr}
 8016386:	4604      	mov	r4, r0
	HAL_TIM_Base_Stop_IT(timer);
 8016388:	6840      	ldr	r0, [r0, #4]
 801638a:	f7f4 fe1d 	bl	800afc8 <HAL_TIM_Base_Stop_IT>
	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 801638e:	f04f 31ff 	mov.w	r1, #4294967295
 8016392:	6820      	ldr	r0, [r4, #0]
 8016394:	f7f6 fd68 	bl	800ce68 <osSemaphoreAcquire>
	timer->Instance->SR = ~TIM_IT_UPDATE;
 8016398:	6863      	ldr	r3, [r4, #4]
 801639a:	f06f 0201 	mvn.w	r2, #1
 801639e:	6921      	ldr	r1, [r4, #16]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	611a      	str	r2, [r3, #16]
 80163a4:	7b23      	ldrb	r3, [r4, #12]
 80163a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80163aa:	0098      	lsls	r0, r3, #2
 80163ac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	if (pending_delays[active_delay].callback != NULL) {
 80163b0:	689a      	ldr	r2, [r3, #8]
 80163b2:	b112      	cbz	r2, 80163ba <_ZN13HardwareDelay14TriggeredDelayEv+0x36>
		pending_delays[active_delay].callback(pending_delays[active_delay].context, pending_delays[active_delay].ID);
 80163b4:	5c09      	ldrb	r1, [r1, r0]
 80163b6:	6858      	ldr	r0, [r3, #4]
 80163b8:	4790      	blx	r2
 80163ba:	7b21      	ldrb	r1, [r4, #12]
 80163bc:	4620      	mov	r0, r4
 80163be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80163c2:	f850 3f10 	ldr.w	r3, [r0, #16]!
      { return _M_erase(begin() + (__position - cbegin())); }
 80163c6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80163ca:	f7ff ff79 	bl	80162c0 <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
	StartNextDelay();
 80163ce:	4620      	mov	r0, r4
 80163d0:	f7ff fe2a 	bl	8016028 <_ZN13HardwareDelay14StartNextDelayEv>
	osSemaphoreRelease(DelaySemaphore);
 80163d4:	6820      	ldr	r0, [r4, #0]
}
 80163d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(DelaySemaphore);
 80163da:	f7f6 bd79 	b.w	800ced0 <osSemaphoreRelease>

080163de <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80163de:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 80163e0:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80163e2:	d006      	beq.n	80163f2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80163e4:	da01      	bge.n	80163ea <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 80163e6:	f007 febf 	bl	801e168 <_ZSt17__throw_bad_allocv>
      }
 80163ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80163ee:	f007 be0c 	b.w	801e00a <_Znwj>
 80163f2:	bd08      	pop	{r3, pc}

080163f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80163f4:	491e      	ldr	r1, [pc, #120]	@ (8016470 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 80163f6:	b510      	push	{r4, lr}
 80163f8:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80163fa:	4608      	mov	r0, r1
 80163fc:	f007 fe9c 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8016400:	bb40      	cbnz	r0, 8016454 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8016402:	491c      	ldr	r1, [pc, #112]	@ (8016474 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>)
 8016404:	481a      	ldr	r0, [pc, #104]	@ (8016470 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8016406:	f007 fe97 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801640a:	bb28      	cbnz	r0, 8016458 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801640c:	491a      	ldr	r1, [pc, #104]	@ (8016478 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>)
 801640e:	4818      	ldr	r0, [pc, #96]	@ (8016470 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8016410:	f007 fe92 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8016414:	bb10      	cbnz	r0, 801645c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8016416:	4919      	ldr	r1, [pc, #100]	@ (801647c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>)
 8016418:	4815      	ldr	r0, [pc, #84]	@ (8016470 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801641a:	f007 fe8d 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801641e:	b9f8      	cbnz	r0, 8016460 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8016420:	4917      	ldr	r1, [pc, #92]	@ (8016480 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>)
 8016422:	4813      	ldr	r0, [pc, #76]	@ (8016470 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8016424:	f007 fe88 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8016428:	b9e0      	cbnz	r0, 8016464 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801642a:	4916      	ldr	r1, [pc, #88]	@ (8016484 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>)
 801642c:	4810      	ldr	r0, [pc, #64]	@ (8016470 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801642e:	f007 fe83 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8016432:	b9c8      	cbnz	r0, 8016468 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8016434:	4914      	ldr	r1, [pc, #80]	@ (8016488 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>)
 8016436:	480e      	ldr	r0, [pc, #56]	@ (8016470 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8016438:	f007 fe7e 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801643c:	b9b0      	cbnz	r0, 801646c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801643e:	4913      	ldr	r1, [pc, #76]	@ (801648c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>)
 8016440:	480b      	ldr	r0, [pc, #44]	@ (8016470 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8016442:	f007 fe79 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8016446:	2800      	cmp	r0, #0
 8016448:	bf14      	ite	ne
 801644a:	2309      	movne	r3, #9
 801644c:	2300      	moveq	r3, #0
 801644e:	7020      	strb	r0, [r4, #0]
}
 8016450:	4618      	mov	r0, r3
 8016452:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8016454:	2300      	movs	r3, #0
 8016456:	e7fa      	b.n	801644e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8016458:	2301      	movs	r3, #1
 801645a:	e7f8      	b.n	801644e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801645c:	2302      	movs	r3, #2
 801645e:	e7f6      	b.n	801644e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8016460:	2303      	movs	r3, #3
 8016462:	e7f4      	b.n	801644e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8016464:	2304      	movs	r3, #4
 8016466:	e7f2      	b.n	801644e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8016468:	2306      	movs	r3, #6
 801646a:	e7f0      	b.n	801644e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801646c:	2308      	movs	r3, #8
 801646e:	e7ee      	b.n	801644e <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
 8016470:	0801f65c 	.word	0x0801f65c
 8016474:	0801f654 	.word	0x0801f654
 8016478:	0801f644 	.word	0x0801f644
 801647c:	0801f63c 	.word	0x0801f63c
 8016480:	0801f664 	.word	0x0801f664
 8016484:	0801f64c 	.word	0x0801f64c
 8016488:	0801f634 	.word	0x0801f634
 801648c:	0801f62c 	.word	0x0801f62c

08016490 <_ZN4LEDSC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016490:	2200      	movs	r2, #0
 8016492:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8016496:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801649a:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801649e:	e9c0 2208 	strd	r2, r2, [r0, #32]
 80164a2:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 80164a6:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
/**
 * @brief Class constructor
 */
LEDS::LEDS()
{
}
 80164aa:	4770      	bx	lr

080164ac <_ZN4LEDS4InitEP9Registers>:
/**
 * @brief Initialize the class with references to other classes. Set default values.
 *
 * @param input registers_: the Registers instance
 */
void LEDS::Init(Registers* registers_) {
 80164ac:	b510      	push	{r4, lr}
	registers = registers_;
 80164ae:	6001      	str	r1, [r0, #0]

	LEDsSemaphore = osSemaphoreNew(1,1,NULL);
 80164b0:	2101      	movs	r1, #1
void LEDS::Init(Registers* registers_) {
 80164b2:	4604      	mov	r4, r0
	LEDsSemaphore = osSemaphoreNew(1,1,NULL);
 80164b4:	2200      	movs	r2, #0
 80164b6:	4608      	mov	r0, r1
 80164b8:	f7f6 fc7a 	bl	800cdb0 <osSemaphoreNew>
 80164bc:	6060      	str	r0, [r4, #4]
	osSemaphoreRelease(LEDsSemaphore);
}
 80164be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(LEDsSemaphore);
 80164c2:	f7f6 bd05 	b.w	800ced0 <osSemaphoreRelease>

080164c6 <_ZN4LEDS4SpinEv>:
}

/**
 * @brief Function used to process the blinking patterns of SMD LEDs. Called repeatedly in a freeRTOS task
 */
void LEDS::Spin(void) {
 80164c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164c8:	4605      	mov	r5, r0
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80164ca:	f04f 31ff 	mov.w	r1, #4294967295
 80164ce:	6840      	ldr	r0, [r0, #4]
            }
            HAL_GPIO_WritePin(led.gpio.port, led.gpio.pin, (GPIO_PinState) state);

            led.counter++;
            if (led.counter >= led.T) {
                led.counter = 0;
 80164d0:	2700      	movs	r7, #0
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80164d2:	f7f6 fcc9 	bl	800ce68 <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80164d6:	e9d5 4602 	ldrd	r4, r6, [r5, #8]
    for (LED & led : LEDs) {
 80164da:	42a6      	cmp	r6, r4
 80164dc:	d107      	bne.n	80164ee <_ZN4LEDS4SpinEv+0x28>
                if (not led.repeat)
                    led.blink = false;
            }
        }
    }
    osSemaphoreRelease(LEDsSemaphore);
 80164de:	6868      	ldr	r0, [r5, #4]
 80164e0:	f7f6 fcf6 	bl	800ced0 <osSemaphoreRelease>

    osDelay(DEFAULT_LEDS_PERIOD);
 80164e4:	2064      	movs	r0, #100	@ 0x64
}
 80164e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    osDelay(DEFAULT_LEDS_PERIOD);
 80164ea:	f7f6 bc53 	b.w	800cd94 <osDelay>
        if (led.blink) {
 80164ee:	7b22      	ldrb	r2, [r4, #12]
 80164f0:	b1a2      	cbz	r2, 801651c <_ZN4LEDS4SpinEv+0x56>
 80164f2:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
            for(uint8_t t : led.timings) {
 80164f6:	4299      	cmp	r1, r3
 80164f8:	d005      	beq.n	8016506 <_ZN4LEDS4SpinEv+0x40>
 80164fa:	f813 0b01 	ldrb.w	r0, [r3], #1
                if (led.counter < t)
 80164fe:	f894 c00e 	ldrb.w	ip, [r4, #14]
 8016502:	4584      	cmp	ip, r0
 8016504:	d20c      	bcs.n	8016520 <_ZN4LEDS4SpinEv+0x5a>
            HAL_GPIO_WritePin(led.gpio.port, led.gpio.pin, (GPIO_PinState) state);
 8016506:	8921      	ldrh	r1, [r4, #8]
 8016508:	6860      	ldr	r0, [r4, #4]
 801650a:	f7f0 fac6 	bl	8006a9a <HAL_GPIO_WritePin>
            led.counter++;
 801650e:	7ba3      	ldrb	r3, [r4, #14]
            if (led.counter >= led.T) {
 8016510:	7f22      	ldrb	r2, [r4, #28]
            led.counter++;
 8016512:	3301      	adds	r3, #1
 8016514:	b2db      	uxtb	r3, r3
            if (led.counter >= led.T) {
 8016516:	429a      	cmp	r2, r3
            led.counter++;
 8016518:	73a3      	strb	r3, [r4, #14]
            if (led.counter >= led.T) {
 801651a:	d904      	bls.n	8016526 <_ZN4LEDS4SpinEv+0x60>
      operator++() _GLIBCXX_NOEXCEPT
 801651c:	3420      	adds	r4, #32
	return *this;
 801651e:	e7dc      	b.n	80164da <_ZN4LEDS4SpinEv+0x14>
                state =  not state;
 8016520:	f082 0201 	eor.w	r2, r2, #1
 8016524:	e7e7      	b.n	80164f6 <_ZN4LEDS4SpinEv+0x30>
                if (not led.repeat)
 8016526:	7b63      	ldrb	r3, [r4, #13]
                led.counter = 0;
 8016528:	73a7      	strb	r7, [r4, #14]
                if (not led.repeat)
 801652a:	2b00      	cmp	r3, #0
 801652c:	d1f6      	bne.n	801651c <_ZN4LEDS4SpinEv+0x56>
                    led.blink = false;
 801652e:	7323      	strb	r3, [r4, #12]
 8016530:	e7f4      	b.n	801651c <_ZN4LEDS4SpinEv+0x56>

08016532 <_ZN4LEDS6GetLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetLED(uint8_t ID, bool* success) {
 8016532:	b570      	push	{r4, r5, r6, lr}
 8016534:	e9d0 3402 	ldrd	r3, r4, [r0, #8]
    uint8_t index = 0;
    for (LED & led : LEDs) {
 8016538:	2000      	movs	r0, #0
 801653a:	429c      	cmp	r4, r3
 801653c:	461d      	mov	r5, r3
 801653e:	d102      	bne.n	8016546 <_ZN4LEDS6GetLEDEhPb+0x14>
 8016540:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 8016542:	4618      	mov	r0, r3
 8016544:	e006      	b.n	8016554 <_ZN4LEDS6GetLEDEhPb+0x22>
        if (led.ID == ID) {
 8016546:	782d      	ldrb	r5, [r5, #0]
 8016548:	1c46      	adds	r6, r0, #1
 801654a:	3320      	adds	r3, #32
 801654c:	428d      	cmp	r5, r1
 801654e:	d103      	bne.n	8016558 <_ZN4LEDS6GetLEDEhPb+0x26>
 8016550:	b2c0      	uxtb	r0, r0
 8016552:	2301      	movs	r3, #1
            *success = true;
 8016554:	7013      	strb	r3, [r2, #0]
}
 8016556:	bd70      	pop	{r4, r5, r6, pc}
 8016558:	4630      	mov	r0, r6
 801655a:	e7ee      	b.n	801653a <_ZN4LEDS6GetLEDEhPb+0x8>

0801655c <_ZN4LEDS6SetLEDEh13GPIO_PinState>:
bool LEDS::SetLED(uint8_t ID, GPIO_PinState state) {
 801655c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801655e:	4616      	mov	r6, r2
    uint8_t index = GetLED(ID, &success);
 8016560:	f10d 0207 	add.w	r2, sp, #7
bool LEDS::SetLED(uint8_t ID, GPIO_PinState state) {
 8016564:	4604      	mov	r4, r0
    uint8_t index = GetLED(ID, &success);
 8016566:	f7ff ffe4 	bl	8016532 <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 801656a:	f89d 7007 	ldrb.w	r7, [sp, #7]
    uint8_t index = GetLED(ID, &success);
 801656e:	4605      	mov	r5, r0
    if (success) {
 8016570:	b17f      	cbz	r7, 8016592 <_ZN4LEDS6SetLEDEh13GPIO_PinState+0x36>
    	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8016572:	f04f 31ff 	mov.w	r1, #4294967295
 8016576:	6860      	ldr	r0, [r4, #4]
 8016578:	f7f6 fc76 	bl	800ce68 <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 801657c:	68a3      	ldr	r3, [r4, #8]
 801657e:	b22d      	sxth	r5, r5
        LEDs[index].blink = false;
 8016580:	2200      	movs	r2, #0
 8016582:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8016586:	731a      	strb	r2, [r3, #12]
        HAL_GPIO_WritePin(LEDs[index].gpio.port, LEDs[index].gpio.pin, state);
 8016588:	4632      	mov	r2, r6
 801658a:	8919      	ldrh	r1, [r3, #8]
 801658c:	6858      	ldr	r0, [r3, #4]
 801658e:	f7f0 fa84 	bl	8006a9a <HAL_GPIO_WritePin>
    osSemaphoreRelease(LEDsSemaphore);
 8016592:	6860      	ldr	r0, [r4, #4]
 8016594:	f7f6 fc9c 	bl	800ced0 <osSemaphoreRelease>
}
 8016598:	4638      	mov	r0, r7
 801659a:	b003      	add	sp, #12
 801659c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801659e <_ZN4LEDS9UnusedLEDEh>:
bool LEDS::UnusedLED(uint8_t ID) {
 801659e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t index = GetLED(ID, &success);
 80165a0:	f10d 0207 	add.w	r2, sp, #7
bool LEDS::UnusedLED(uint8_t ID) {
 80165a4:	4604      	mov	r4, r0
    uint8_t index = GetLED(ID, &success);
 80165a6:	f7ff ffc4 	bl	8016532 <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 80165aa:	f89d 6007 	ldrb.w	r6, [sp, #7]
    uint8_t index = GetLED(ID, &success);
 80165ae:	4605      	mov	r5, r0
    if (success) {
 80165b0:	b196      	cbz	r6, 80165d8 <_ZN4LEDS9UnusedLEDEh+0x3a>
    	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80165b2:	f04f 31ff 	mov.w	r1, #4294967295
 80165b6:	6860      	ldr	r0, [r4, #4]
 80165b8:	f7f6 fc56 	bl	800ce68 <osSemaphoreAcquire>
 80165bc:	68a3      	ldr	r3, [r4, #8]
 80165be:	b228      	sxth	r0, r5
 80165c0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 80165c4:	0145      	lsls	r5, r0, #5
    	GPIO_PinState pin_state = HAL_GPIO_ReadPin(LEDs[index].gpio.port, LEDs[index].gpio.pin);
 80165c6:	8919      	ldrh	r1, [r3, #8]
 80165c8:	6858      	ldr	r0, [r3, #4]
 80165ca:	f7f0 fa5f 	bl	8006a8c <HAL_GPIO_ReadPin>
    	status = (pin_state == GPIO_PIN_SET) || LEDs[index].blink;
 80165ce:	2801      	cmp	r0, #1
 80165d0:	bf1e      	ittt	ne
 80165d2:	68a3      	ldrne	r3, [r4, #8]
 80165d4:	195b      	addne	r3, r3, r5
 80165d6:	7b1e      	ldrbne	r6, [r3, #12]
    osSemaphoreRelease(LEDsSemaphore);
 80165d8:	6860      	ldr	r0, [r4, #4]
 80165da:	f7f6 fc79 	bl	800ced0 <osSemaphoreRelease>
}
 80165de:	f086 0001 	eor.w	r0, r6, #1
 80165e2:	b002      	add	sp, #8
 80165e4:	bd70      	pop	{r4, r5, r6, pc}

080165e6 <_ZN4LEDS5BlinkEh>:
bool LEDS::Blink(uint8_t ID) {
 80165e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80165e8:	460d      	mov	r5, r1
 80165ea:	4604      	mov	r4, r0
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80165ec:	f04f 31ff 	mov.w	r1, #4294967295
 80165f0:	6840      	ldr	r0, [r0, #4]
 80165f2:	f7f6 fc39 	bl	800ce68 <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 80165f6:	4629      	mov	r1, r5
 80165f8:	f10d 0207 	add.w	r2, sp, #7
 80165fc:	4620      	mov	r0, r4
 80165fe:	f7ff ff98 	bl	8016532 <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8016602:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8016606:	b145      	cbz	r5, 801661a <_ZN4LEDS5BlinkEh+0x34>
 8016608:	68a3      	ldr	r3, [r4, #8]
 801660a:	b200      	sxth	r0, r0
        LEDs[index].blink = true;
 801660c:	f240 1201 	movw	r2, #257	@ 0x101
 8016610:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 8016614:	819a      	strh	r2, [r3, #12]
        LEDs[index].counter = 0;
 8016616:	2200      	movs	r2, #0
 8016618:	739a      	strb	r2, [r3, #14]
    osSemaphoreRelease(LEDsSemaphore);
 801661a:	6860      	ldr	r0, [r4, #4]
 801661c:	f7f6 fc58 	bl	800ced0 <osSemaphoreRelease>
}
 8016620:	4628      	mov	r0, r5
 8016622:	b003      	add	sp, #12
 8016624:	bd30      	pop	{r4, r5, pc}

08016626 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			return self->Blink(*input);
 8016626:	7811      	ldrb	r1, [r2, #0]
 8016628:	f7ff bfdd 	b.w	80165e6 <_ZN4LEDS5BlinkEh>

0801662c <_ZN4LEDS9BlinkOnceEh>:
bool LEDS::BlinkOnce(uint8_t ID) {
 801662c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801662e:	460d      	mov	r5, r1
 8016630:	4604      	mov	r4, r0
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8016632:	f04f 31ff 	mov.w	r1, #4294967295
 8016636:	6840      	ldr	r0, [r0, #4]
 8016638:	f7f6 fc16 	bl	800ce68 <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 801663c:	4629      	mov	r1, r5
 801663e:	f10d 0207 	add.w	r2, sp, #7
 8016642:	4620      	mov	r0, r4
 8016644:	f7ff ff75 	bl	8016532 <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8016648:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801664c:	b13d      	cbz	r5, 801665e <_ZN4LEDS9BlinkOnceEh+0x32>
 801664e:	68a3      	ldr	r3, [r4, #8]
 8016650:	b200      	sxth	r0, r0
        LEDs[index].blink = true;
 8016652:	2201      	movs	r2, #1
 8016654:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 8016658:	819a      	strh	r2, [r3, #12]
        LEDs[index].counter = 0;
 801665a:	2200      	movs	r2, #0
 801665c:	739a      	strb	r2, [r3, #14]
    osSemaphoreRelease(LEDsSemaphore);
 801665e:	6860      	ldr	r0, [r4, #4]
 8016660:	f7f6 fc36 	bl	800ced0 <osSemaphoreRelease>
}
 8016664:	4628      	mov	r0, r5
 8016666:	b003      	add	sp, #12
 8016668:	bd30      	pop	{r4, r5, pc}

0801666a <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			return self->BlinkOnce(*input);
 801666a:	7811      	ldrb	r1, [r2, #0]
 801666c:	f7ff bfde 	b.w	801662c <_ZN4LEDS9BlinkOnceEh>

08016670 <_ZN4LEDS9GetRGBLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetRGBLED(uint8_t ID, bool* success) {
 8016670:	b570      	push	{r4, r5, r6, lr}
 8016672:	e9d0 3405 	ldrd	r3, r4, [r0, #20]
    uint8_t index = 0;
    for (RGBLED & led : RGB_LEDs) {
 8016676:	2000      	movs	r0, #0
 8016678:	429c      	cmp	r4, r3
 801667a:	461d      	mov	r5, r3
 801667c:	d102      	bne.n	8016684 <_ZN4LEDS9GetRGBLEDEhPb+0x14>
 801667e:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 8016680:	4618      	mov	r0, r3
 8016682:	e006      	b.n	8016692 <_ZN4LEDS9GetRGBLEDEhPb+0x22>
        if (led.ID == ID) {
 8016684:	782d      	ldrb	r5, [r5, #0]
 8016686:	1c46      	adds	r6, r0, #1
 8016688:	3310      	adds	r3, #16
 801668a:	428d      	cmp	r5, r1
 801668c:	d103      	bne.n	8016696 <_ZN4LEDS9GetRGBLEDEhPb+0x26>
 801668e:	b2c0      	uxtb	r0, r0
 8016690:	2301      	movs	r3, #1
            *success = true;
 8016692:	7013      	strb	r3, [r2, #0]
}
 8016694:	bd70      	pop	{r4, r5, r6, pc}
 8016696:	4630      	mov	r0, r6
 8016698:	e7ee      	b.n	8016678 <_ZN4LEDS9GetRGBLEDEhPb+0x8>

0801669a <_ZN4LEDS6SetRGBEhhhh>:
bool LEDS::SetRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B) {
 801669a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801669e:	4617      	mov	r7, r2
    uint8_t index = GetRGBLED(ID, &success);
 80166a0:	f10d 0207 	add.w	r2, sp, #7
bool LEDS::SetRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B) {
 80166a4:	4604      	mov	r4, r0
 80166a6:	461e      	mov	r6, r3
    uint8_t index = GetRGBLED(ID, &success);
 80166a8:	f7ff ffe2 	bl	8016670 <_ZN4LEDS9GetRGBLEDEhPb>
    if (success) {
 80166ac:	f89d 8007 	ldrb.w	r8, [sp, #7]
    uint8_t index = GetRGBLED(ID, &success);
 80166b0:	4605      	mov	r5, r0
    if (success) {
 80166b2:	f1b8 0f00 	cmp.w	r8, #0
 80166b6:	d010      	beq.n	80166da <_ZN4LEDS6SetRGBEhhhh+0x40>
    	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80166b8:	f04f 31ff 	mov.w	r1, #4294967295
 80166bc:	6860      	ldr	r0, [r4, #4]
 80166be:	f7f6 fbd3 	bl	800ce68 <osSemaphoreAcquire>
 80166c2:	6961      	ldr	r1, [r4, #20]
 80166c4:	b22d      	sxth	r5, r5
 80166c6:	eb01 1105 	add.w	r1, r1, r5, lsl #4
        RGBLED led = RGB_LEDs[index];
 80166ca:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
        *led.pulse_red = R;
 80166ce:	6849      	ldr	r1, [r1, #4]
 80166d0:	600f      	str	r7, [r1, #0]
        *led.pulse_green = G;
 80166d2:	6016      	str	r6, [r2, #0]
        *led.pulse_blue = B;
 80166d4:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80166d8:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(LEDsSemaphore);
 80166da:	6860      	ldr	r0, [r4, #4]
 80166dc:	f7f6 fbf8 	bl	800ced0 <osSemaphoreRelease>
}
 80166e0:	4640      	mov	r0, r8
 80166e2:	b002      	add	sp, #8
 80166e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080166e8 <_ZN4LEDS9GetI2CLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetI2CLED(uint8_t ID, bool* success) {
 80166e8:	b570      	push	{r4, r5, r6, lr}
 80166ea:	e9d0 3408 	ldrd	r3, r4, [r0, #32]
    uint8_t index = 0;
    for (I2CLED & led : I2C_LEDs) {
 80166ee:	2000      	movs	r0, #0
 80166f0:	429c      	cmp	r4, r3
 80166f2:	461d      	mov	r5, r3
 80166f4:	d102      	bne.n	80166fc <_ZN4LEDS9GetI2CLEDEhPb+0x14>
 80166f6:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 80166f8:	4618      	mov	r0, r3
 80166fa:	e006      	b.n	801670a <_ZN4LEDS9GetI2CLEDEhPb+0x22>
        if (led.ID == ID) {
 80166fc:	782d      	ldrb	r5, [r5, #0]
 80166fe:	1c46      	adds	r6, r0, #1
 8016700:	3310      	adds	r3, #16
 8016702:	428d      	cmp	r5, r1
 8016704:	d103      	bne.n	801670e <_ZN4LEDS9GetI2CLEDEhPb+0x26>
 8016706:	b2c0      	uxtb	r0, r0
 8016708:	2301      	movs	r3, #1
            *success = true;
 801670a:	7013      	strb	r3, [r2, #0]
}
 801670c:	bd70      	pop	{r4, r5, r6, pc}
 801670e:	4630      	mov	r0, r6
 8016710:	e7ee      	b.n	80166f0 <_ZN4LEDS9GetI2CLEDEhPb+0x8>

08016712 <_ZN4LEDS12GetI2CRGBLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetI2CRGBLED(uint8_t ID, bool* success) {
 8016712:	b570      	push	{r4, r5, r6, lr}
 8016714:	e9d0 340b 	ldrd	r3, r4, [r0, #44]	@ 0x2c
    uint8_t index = 0;
    for (I2CRGBLED & led : I2C_RGB_LEDs) {
 8016718:	2000      	movs	r0, #0
 801671a:	429c      	cmp	r4, r3
 801671c:	461d      	mov	r5, r3
 801671e:	d102      	bne.n	8016726 <_ZN4LEDS12GetI2CRGBLEDEhPb+0x14>
 8016720:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 8016722:	4618      	mov	r0, r3
 8016724:	e006      	b.n	8016734 <_ZN4LEDS12GetI2CRGBLEDEhPb+0x22>
        if (led.ID == ID) {
 8016726:	782d      	ldrb	r5, [r5, #0]
 8016728:	1c46      	adds	r6, r0, #1
 801672a:	3314      	adds	r3, #20
 801672c:	428d      	cmp	r5, r1
 801672e:	d103      	bne.n	8016738 <_ZN4LEDS12GetI2CRGBLEDEhPb+0x26>
 8016730:	b2c0      	uxtb	r0, r0
 8016732:	2301      	movs	r3, #1
            *success = true;
 8016734:	7013      	strb	r3, [r2, #0]
}
 8016736:	bd70      	pop	{r4, r5, r6, pc}
 8016738:	4630      	mov	r0, r6
 801673a:	e7ee      	b.n	801671a <_ZN4LEDS12GetI2CRGBLEDEhPb+0x8>

0801673c <_ZN4LEDS15ConfigureI2CLEDEhtPhtm>:
HAL_StatusTypeDef LEDS::ConfigureI2CLED(uint8_t ID, uint16_t memory_address, uint8_t* data, uint16_t size, uint32_t timeout) {
 801673c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016740:	4604      	mov	r4, r0
 8016742:	b089      	sub	sp, #36	@ 0x24
 8016744:	4688      	mov	r8, r1
 8016746:	461f      	mov	r7, r3
 8016748:	9205      	str	r2, [sp, #20]
 801674a:	f8bd b048 	ldrh.w	fp, [sp, #72]	@ 0x48
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 801674e:	f7ec fedb 	bl	8003508 <HAL_GetTick>
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8016752:	f04f 31ff 	mov.w	r1, #4294967295
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 8016756:	4605      	mov	r5, r0
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8016758:	6860      	ldr	r0, [r4, #4]
 801675a:	f7f6 fb85 	bl	800ce68 <osSemaphoreAcquire>
	index = GetI2CRGBLED(ID, &success);
 801675e:	f10d 021f 	add.w	r2, sp, #31
 8016762:	4641      	mov	r1, r8
 8016764:	4620      	mov	r0, r4
 8016766:	f7ff ffd4 	bl	8016712 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (success) {
 801676a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801676e:	b323      	cbz	r3, 80167ba <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x7e>
 8016770:	b200      	sxth	r0, r0
 8016772:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8016774:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016778:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		present = led->present;
 801677c:	785e      	ldrb	r6, [r3, #1]
	osSemaphoreRelease(LEDsSemaphore);
 801677e:	6860      	ldr	r0, [r4, #4]
		interface = led->interface;
 8016780:	f8d3 8004 	ldr.w	r8, [r3, #4]
		device_address = led->device_address;
 8016784:	f8b3 9008 	ldrh.w	r9, [r3, #8]
		memory_address_size = led->memory_address_size;
 8016788:	f8b3 a00a 	ldrh.w	sl, [r3, #10]
	osSemaphoreRelease(LEDsSemaphore);
 801678c:	f7f6 fba0 	bl	800ced0 <osSemaphoreRelease>
	if (present) {
 8016790:	b18e      	cbz	r6, 80167b6 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x7a>
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 8016792:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016794:	441d      	add	r5, r3
			status = HAL_I2C_Mem_Write(interface, device_address, memory_address, memory_address_size, data, size, timeout);
 8016796:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016798:	4649      	mov	r1, r9
 801679a:	9a05      	ldr	r2, [sp, #20]
 801679c:	4640      	mov	r0, r8
 801679e:	9700      	str	r7, [sp, #0]
 80167a0:	e9cd b301 	strd	fp, r3, [sp, #4]
 80167a4:	4653      	mov	r3, sl
 80167a6:	f7f0 fd6f 	bl	8007288 <HAL_I2C_Mem_Write>
		} while ((status == HAL_BUSY) && (HAL_GetTick() < end_timestamp)); // try until the bus is free
 80167aa:	2802      	cmp	r0, #2
 80167ac:	d10f      	bne.n	80167ce <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x92>
 80167ae:	f7ec feab 	bl	8003508 <HAL_GetTick>
 80167b2:	42a8      	cmp	r0, r5
 80167b4:	d3ef      	bcc.n	8016796 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x5a>
	HAL_StatusTypeDef status = HAL_BUSY;
 80167b6:	2002      	movs	r0, #2
 80167b8:	e009      	b.n	80167ce <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x92>
		index = GetI2CLED(ID, &success);
 80167ba:	4620      	mov	r0, r4
 80167bc:	f7ff ff94 	bl	80166e8 <_ZN4LEDS9GetI2CLEDEhPb>
		if (!success) {
 80167c0:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80167c4:	b933      	cbnz	r3, 80167d4 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x98>
			osSemaphoreRelease(LEDsSemaphore);
 80167c6:	6860      	ldr	r0, [r4, #4]
 80167c8:	f7f6 fb82 	bl	800ced0 <osSemaphoreRelease>
			return HAL_ERROR;
 80167cc:	2001      	movs	r0, #1
}
 80167ce:	b009      	add	sp, #36	@ 0x24
 80167d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167d4:	b200      	sxth	r0, r0
 80167d6:	6a23      	ldr	r3, [r4, #32]
 80167d8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80167dc:	e7ce      	b.n	801677c <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x40>

080167de <_ZN4LEDS15ConfigureI2CLEDEhthm>:
HAL_StatusTypeDef LEDS::ConfigureI2CLED(uint8_t ID, uint16_t memory_address, uint8_t data, uint32_t timeout) {
 80167de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buffer = data;
 80167e0:	f88d 300f 	strb.w	r3, [sp, #15]
	return ConfigureI2CLED(ID, memory_address, &buffer, 1, timeout);
 80167e4:	9b06      	ldr	r3, [sp, #24]
 80167e6:	9301      	str	r3, [sp, #4]
 80167e8:	2301      	movs	r3, #1
 80167ea:	9300      	str	r3, [sp, #0]
 80167ec:	f10d 030f 	add.w	r3, sp, #15
 80167f0:	f7ff ffa4 	bl	801673c <_ZN4LEDS15ConfigureI2CLEDEhtPhtm>
}
 80167f4:	b005      	add	sp, #20
 80167f6:	f85d fb04 	ldr.w	pc, [sp], #4

080167fa <_ZN4LEDS6SetLEDEhhm>:
HAL_StatusTypeDef LEDS::SetLED(uint8_t ID, uint8_t value, uint32_t timeout) {
 80167fa:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80167fe:	4604      	mov	r4, r0
 8016800:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8016802:	6840      	ldr	r0, [r0, #4]
 8016804:	f04f 31ff 	mov.w	r1, #4294967295
HAL_StatusTypeDef LEDS::SetLED(uint8_t ID, uint8_t value, uint32_t timeout) {
 8016808:	461f      	mov	r7, r3
 801680a:	4616      	mov	r6, r2
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 801680c:	f7f6 fb2c 	bl	800ce68 <osSemaphoreAcquire>
	uint8_t index = GetI2CLED(ID, &success);
 8016810:	f10d 020f 	add.w	r2, sp, #15
 8016814:	4629      	mov	r1, r5
 8016816:	4620      	mov	r0, r4
 8016818:	f7ff ff66 	bl	80166e8 <_ZN4LEDS9GetI2CLEDEhPb>
	if (!success) {
 801681c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8016820:	b933      	cbnz	r3, 8016830 <_ZN4LEDS6SetLEDEhhm+0x36>
		osSemaphoreRelease(LEDsSemaphore);
 8016822:	6860      	ldr	r0, [r4, #4]
 8016824:	f7f6 fb54 	bl	800ced0 <osSemaphoreRelease>
		return HAL_ERROR;
 8016828:	2001      	movs	r0, #1
}
 801682a:	b004      	add	sp, #16
 801682c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016830:	6a23      	ldr	r3, [r4, #32]
 8016832:	b200      	sxth	r0, r0
 8016834:	eb03 1800 	add.w	r8, r3, r0, lsl #4
	osSemaphoreRelease(LEDsSemaphore);
 8016838:	6860      	ldr	r0, [r4, #4]
 801683a:	f7f6 fb49 	bl	800ced0 <osSemaphoreRelease>
	return ConfigureI2CLED(ID, led->light_address, value, timeout);
 801683e:	4633      	mov	r3, r6
 8016840:	f8b8 200e 	ldrh.w	r2, [r8, #14]
 8016844:	4629      	mov	r1, r5
 8016846:	4620      	mov	r0, r4
 8016848:	9700      	str	r7, [sp, #0]
 801684a:	f7ff ffc8 	bl	80167de <_ZN4LEDS15ConfigureI2CLEDEhthm>
 801684e:	e7ec      	b.n	801682a <_ZN4LEDS6SetLEDEhhm+0x30>

08016850 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8016850:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8016852:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016854:	4604      	mov	r4, r0
 8016856:	4615      	mov	r5, r2
			if (length != 2) return false;
 8016858:	d002      	beq.n	8016860 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x10>
 801685a:	2000      	movs	r0, #0
		}
 801685c:	b003      	add	sp, #12
 801685e:	bd30      	pop	{r4, r5, pc}
			self->GetLED(ID, &success);
 8016860:	f10d 0207 	add.w	r2, sp, #7
 8016864:	7829      	ldrb	r1, [r5, #0]
 8016866:	f7ff fe64 	bl	8016532 <_ZN4LEDS6GetLEDEhPb>
			if (success) {
 801686a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801686e:	b14b      	cbz	r3, 8016884 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x34>
				return self->SetLED(input[0], (input[1] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8016870:	786a      	ldrb	r2, [r5, #1]
 8016872:	4620      	mov	r0, r4
 8016874:	3a00      	subs	r2, #0
 8016876:	bf18      	it	ne
 8016878:	2201      	movne	r2, #1
		}
 801687a:	b003      	add	sp, #12
 801687c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				return self->SetLED(input[0], (input[1] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8016880:	f7ff be6c 	b.w	801655c <_ZN4LEDS6SetLEDEh13GPIO_PinState>
			self->GetI2CLED(ID, &success);
 8016884:	4620      	mov	r0, r4
 8016886:	f7ff ff2f 	bl	80166e8 <_ZN4LEDS9GetI2CLEDEhPb>
			if (success) {
 801688a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801688e:	2b00      	cmp	r3, #0
 8016890:	d0e3      	beq.n	801685a <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0xa>
				return self->SetLED(input[0], input[1]) == HAL_OK;
 8016892:	f04f 33ff 	mov.w	r3, #4294967295
 8016896:	786a      	ldrb	r2, [r5, #1]
 8016898:	4620      	mov	r0, r4
 801689a:	f7ff ffae 	bl	80167fa <_ZN4LEDS6SetLEDEhhm>
 801689e:	fab0 f080 	clz	r0, r0
 80168a2:	0940      	lsrs	r0, r0, #5
 80168a4:	e7da      	b.n	801685c <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0xc>

080168a6 <_ZN4LEDS13SetBrightnessEhhm>:
HAL_StatusTypeDef LEDS::SetBrightness(uint8_t ID, uint8_t brightness, uint32_t timeout) {
 80168a6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80168aa:	4604      	mov	r4, r0
 80168ac:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80168ae:	6840      	ldr	r0, [r0, #4]
 80168b0:	f04f 31ff 	mov.w	r1, #4294967295
HAL_StatusTypeDef LEDS::SetBrightness(uint8_t ID, uint8_t brightness, uint32_t timeout) {
 80168b4:	461f      	mov	r7, r3
 80168b6:	4616      	mov	r6, r2
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80168b8:	f7f6 fad6 	bl	800ce68 <osSemaphoreAcquire>
	uint8_t index = GetI2CRGBLED(ID, &success);
 80168bc:	f10d 020f 	add.w	r2, sp, #15
 80168c0:	4629      	mov	r1, r5
 80168c2:	4620      	mov	r0, r4
 80168c4:	f7ff ff25 	bl	8016712 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (!success) {
 80168c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80168cc:	b933      	cbnz	r3, 80168dc <_ZN4LEDS13SetBrightnessEhhm+0x36>
		osSemaphoreRelease(LEDsSemaphore);
 80168ce:	6860      	ldr	r0, [r4, #4]
 80168d0:	f7f6 fafe 	bl	800ced0 <osSemaphoreRelease>
		return HAL_ERROR;
 80168d4:	2001      	movs	r0, #1
}
 80168d6:	b004      	add	sp, #16
 80168d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168dc:	b200      	sxth	r0, r0
 80168de:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80168e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80168e4:	eb03 0880 	add.w	r8, r3, r0, lsl #2
	osSemaphoreRelease(LEDsSemaphore);
 80168e8:	6860      	ldr	r0, [r4, #4]
 80168ea:	f7f6 faf1 	bl	800ced0 <osSemaphoreRelease>
	return ConfigureI2CLED(ID, led->brightness_address, brightness, timeout);
 80168ee:	4633      	mov	r3, r6
 80168f0:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 80168f4:	4629      	mov	r1, r5
 80168f6:	4620      	mov	r0, r4
 80168f8:	9700      	str	r7, [sp, #0]
 80168fa:	f7ff ff70 	bl	80167de <_ZN4LEDS15ConfigureI2CLEDEhthm>
 80168fe:	e7ea      	b.n	80168d6 <_ZN4LEDS13SetBrightnessEhhm+0x30>

08016900 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8016900:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8016902:	4611      	mov	r1, r2
 8016904:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8016906:	d109      	bne.n	801691c <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x1c>
			return self->SetBrightness(input[0], input[1]) == HAL_OK;
 8016908:	f04f 33ff 	mov.w	r3, #4294967295
 801690c:	7852      	ldrb	r2, [r2, #1]
 801690e:	7809      	ldrb	r1, [r1, #0]
 8016910:	f7ff ffc9 	bl	80168a6 <_ZN4LEDS13SetBrightnessEhhm>
 8016914:	fab0 f080 	clz	r0, r0
 8016918:	0940      	lsrs	r0, r0, #5
		}
 801691a:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 801691c:	2000      	movs	r0, #0
 801691e:	e7fc      	b.n	801691a <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x1a>

08016920 <_ZN4LEDS9SetI2CRGBEhhhhm>:
HAL_StatusTypeDef LEDS::SetI2CRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B, uint32_t timeout) {
 8016920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016924:	4604      	mov	r4, r0
 8016926:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8016928:	6840      	ldr	r0, [r0, #4]
 801692a:	f04f 31ff 	mov.w	r1, #4294967295
HAL_StatusTypeDef LEDS::SetI2CRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B, uint32_t timeout) {
 801692e:	4699      	mov	r9, r3
 8016930:	4692      	mov	sl, r2
 8016932:	f89d 8030 	ldrb.w	r8, [sp, #48]	@ 0x30
 8016936:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8016938:	f7f6 fa96 	bl	800ce68 <osSemaphoreAcquire>
	uint8_t index = GetI2CRGBLED(ID, &success);
 801693c:	f10d 020f 	add.w	r2, sp, #15
 8016940:	4629      	mov	r1, r5
 8016942:	4620      	mov	r0, r4
 8016944:	f7ff fee5 	bl	8016712 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (!success) {
 8016948:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801694c:	b933      	cbnz	r3, 801695c <_ZN4LEDS9SetI2CRGBEhhhhm+0x3c>
		osSemaphoreRelease(LEDsSemaphore);
 801694e:	6860      	ldr	r0, [r4, #4]
 8016950:	f7f6 fabe 	bl	800ced0 <osSemaphoreRelease>
		return HAL_ERROR;
 8016954:	2001      	movs	r0, #1
}
 8016956:	b004      	add	sp, #16
 8016958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801695c:	b200      	sxth	r0, r0
 801695e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016960:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016964:	eb06 0680 	add.w	r6, r6, r0, lsl #2
	osSemaphoreRelease(LEDsSemaphore);
 8016968:	6860      	ldr	r0, [r4, #4]
 801696a:	f7f6 fab1 	bl	800ced0 <osSemaphoreRelease>
	status = ConfigureI2CLED(ID, led->R_address, R, timeout);
 801696e:	4653      	mov	r3, sl
 8016970:	89f2      	ldrh	r2, [r6, #14]
 8016972:	4629      	mov	r1, r5
 8016974:	4620      	mov	r0, r4
 8016976:	9700      	str	r7, [sp, #0]
 8016978:	f7ff ff31 	bl	80167de <_ZN4LEDS15ConfigureI2CLEDEhthm>
	if (status != HAL_OK) return status;
 801697c:	2800      	cmp	r0, #0
 801697e:	d1ea      	bne.n	8016956 <_ZN4LEDS9SetI2CRGBEhhhhm+0x36>
	status = ConfigureI2CLED(ID, led->G_address, G, timeout);
 8016980:	8a32      	ldrh	r2, [r6, #16]
 8016982:	464b      	mov	r3, r9
 8016984:	4629      	mov	r1, r5
 8016986:	4620      	mov	r0, r4
 8016988:	9700      	str	r7, [sp, #0]
 801698a:	f7ff ff28 	bl	80167de <_ZN4LEDS15ConfigureI2CLEDEhthm>
	if (status != HAL_OK) return status;
 801698e:	2800      	cmp	r0, #0
 8016990:	d1e1      	bne.n	8016956 <_ZN4LEDS9SetI2CRGBEhhhhm+0x36>
	status = ConfigureI2CLED(ID, led->B_address, B, timeout);
 8016992:	8a72      	ldrh	r2, [r6, #18]
 8016994:	4643      	mov	r3, r8
 8016996:	4629      	mov	r1, r5
 8016998:	4620      	mov	r0, r4
 801699a:	970c      	str	r7, [sp, #48]	@ 0x30
}
 801699c:	b004      	add	sp, #16
 801699e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	status = ConfigureI2CLED(ID, led->B_address, B, timeout);
 80169a2:	f7ff bf1c 	b.w	80167de <_ZN4LEDS15ConfigureI2CLEDEhthm>

080169a6 <_ZN4LEDS8ClearLEDEh>:
bool LEDS::ClearLED(uint8_t ID) {
 80169a6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80169aa:	4604      	mov	r4, r0
 80169ac:	460d      	mov	r5, r1
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80169ae:	6840      	ldr	r0, [r0, #4]
 80169b0:	f04f 31ff 	mov.w	r1, #4294967295
 80169b4:	f7f6 fa58 	bl	800ce68 <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 80169b8:	f10d 020f 	add.w	r2, sp, #15
 80169bc:	4629      	mov	r1, r5
 80169be:	4620      	mov	r0, r4
 80169c0:	f7ff fdb7 	bl	8016532 <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 80169c4:	f89d 600f 	ldrb.w	r6, [sp, #15]
 80169c8:	b196      	cbz	r6, 80169f0 <_ZN4LEDS8ClearLEDEh+0x4a>
 80169ca:	68a3      	ldr	r3, [r4, #8]
 80169cc:	b200      	sxth	r0, r0
        LEDs[index].blink = false;
 80169ce:	2200      	movs	r2, #0
 80169d0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
        HAL_GPIO_WritePin(LEDs[index].gpio.port, LEDs[index].gpio.pin, GPIO_PIN_RESET);
 80169d4:	6858      	ldr	r0, [r3, #4]
 80169d6:	8919      	ldrh	r1, [r3, #8]
        LEDs[index].blink = false;
 80169d8:	819a      	strh	r2, [r3, #12]
        LEDs[index].counter = 0;
 80169da:	739a      	strb	r2, [r3, #14]
        HAL_GPIO_WritePin(LEDs[index].gpio.port, LEDs[index].gpio.pin, GPIO_PIN_RESET);
 80169dc:	f7f0 f85d 	bl	8006a9a <HAL_GPIO_WritePin>
        osSemaphoreRelease(LEDsSemaphore);
 80169e0:	6860      	ldr	r0, [r4, #4]
 80169e2:	f7f6 fa75 	bl	800ced0 <osSemaphoreRelease>
        return true;
 80169e6:	2601      	movs	r6, #1
}
 80169e8:	4630      	mov	r0, r6
 80169ea:	b004      	add	sp, #16
 80169ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    index = GetRGBLED(ID, &success);
 80169f0:	4620      	mov	r0, r4
 80169f2:	f7ff fe3d 	bl	8016670 <_ZN4LEDS9GetRGBLEDEhPb>
	if (success) {
 80169f6:	f89d 800f 	ldrb.w	r8, [sp, #15]
 80169fa:	f1b8 0f00 	cmp.w	r8, #0
 80169fe:	d00a      	beq.n	8016a16 <_ZN4LEDS8ClearLEDEh+0x70>
		osSemaphoreRelease(LEDsSemaphore);
 8016a00:	6860      	ldr	r0, [r4, #4]
 8016a02:	f7f6 fa65 	bl	800ced0 <osSemaphoreRelease>
		SetRGB(ID, 0, 0, 0);
 8016a06:	4633      	mov	r3, r6
 8016a08:	4632      	mov	r2, r6
 8016a0a:	4629      	mov	r1, r5
 8016a0c:	4620      	mov	r0, r4
 8016a0e:	9600      	str	r6, [sp, #0]
 8016a10:	f7ff fe43 	bl	801669a <_ZN4LEDS6SetRGBEhhhh>
		return true;
 8016a14:	e7e7      	b.n	80169e6 <_ZN4LEDS8ClearLEDEh+0x40>
    index = GetI2CLED(ID, &success);
 8016a16:	4620      	mov	r0, r4
 8016a18:	f7ff fe66 	bl	80166e8 <_ZN4LEDS9GetI2CLEDEhPb>
    if (success) {
 8016a1c:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8016a20:	b157      	cbz	r7, 8016a38 <_ZN4LEDS8ClearLEDEh+0x92>
    	osSemaphoreRelease(LEDsSemaphore);
 8016a22:	6860      	ldr	r0, [r4, #4]
 8016a24:	f7f6 fa54 	bl	800ced0 <osSemaphoreRelease>
    	SetLED(ID, 0);
 8016a28:	f04f 33ff 	mov.w	r3, #4294967295
 8016a2c:	4642      	mov	r2, r8
 8016a2e:	4629      	mov	r1, r5
 8016a30:	4620      	mov	r0, r4
 8016a32:	f7ff fee2 	bl	80167fa <_ZN4LEDS6SetLEDEhhm>
    	return true;
 8016a36:	e7d6      	b.n	80169e6 <_ZN4LEDS8ClearLEDEh+0x40>
    index = GetI2CRGBLED(ID, &success);
 8016a38:	4620      	mov	r0, r4
 8016a3a:	f7ff fe6a 	bl	8016712 <_ZN4LEDS12GetI2CRGBLEDEhPb>
    if (success) {
 8016a3e:	f89d 600f 	ldrb.w	r6, [sp, #15]
    	osSemaphoreRelease(LEDsSemaphore);
 8016a42:	6860      	ldr	r0, [r4, #4]
    if (success) {
 8016a44:	b166      	cbz	r6, 8016a60 <_ZN4LEDS8ClearLEDEh+0xba>
    	osSemaphoreRelease(LEDsSemaphore);
 8016a46:	f7f6 fa43 	bl	800ced0 <osSemaphoreRelease>
		SetI2CRGB(ID, 0, 0, 0);
 8016a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8016a4e:	463a      	mov	r2, r7
 8016a50:	4629      	mov	r1, r5
 8016a52:	4620      	mov	r0, r4
 8016a54:	e9cd 7300 	strd	r7, r3, [sp]
 8016a58:	463b      	mov	r3, r7
 8016a5a:	f7ff ff61 	bl	8016920 <_ZN4LEDS9SetI2CRGBEhhhhm>
		return true;
 8016a5e:	e7c2      	b.n	80169e6 <_ZN4LEDS8ClearLEDEh+0x40>
    osSemaphoreRelease(LEDsSemaphore);
 8016a60:	f7f6 fa36 	bl	800ced0 <osSemaphoreRelease>
    return false;
 8016a64:	e7c0      	b.n	80169e8 <_ZN4LEDS8ClearLEDEh+0x42>

08016a66 <_ZN4LEDS11ExistingLEDEh>:
bool LEDS::ExistingLED(uint8_t ID) {
 8016a66:	b513      	push	{r0, r1, r4, lr}
	GetLED(ID, &success);
 8016a68:	f10d 0207 	add.w	r2, sp, #7
bool LEDS::ExistingLED(uint8_t ID) {
 8016a6c:	4604      	mov	r4, r0
	GetLED(ID, &success);
 8016a6e:	f7ff fd60 	bl	8016532 <_ZN4LEDS6GetLEDEhPb>
	if (success) return true;
 8016a72:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016a76:	b113      	cbz	r3, 8016a7e <_ZN4LEDS11ExistingLEDEh+0x18>
 8016a78:	2001      	movs	r0, #1
}
 8016a7a:	b002      	add	sp, #8
 8016a7c:	bd10      	pop	{r4, pc}
	GetRGBLED(ID, &success);
 8016a7e:	4620      	mov	r0, r4
 8016a80:	f7ff fdf6 	bl	8016670 <_ZN4LEDS9GetRGBLEDEhPb>
	if (success) return true;
 8016a84:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d1f5      	bne.n	8016a78 <_ZN4LEDS11ExistingLEDEh+0x12>
	GetI2CLED(ID, &success);
 8016a8c:	4620      	mov	r0, r4
 8016a8e:	f7ff fe2b 	bl	80166e8 <_ZN4LEDS9GetI2CLEDEhPb>
	if (success) return true;
 8016a92:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d1ee      	bne.n	8016a78 <_ZN4LEDS11ExistingLEDEh+0x12>
	GetI2CRGBLED(ID, &success);
 8016a9a:	4620      	mov	r0, r4
 8016a9c:	f7ff fe39 	bl	8016712 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (success) return true;
 8016aa0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8016aa4:	e7e9      	b.n	8016a7a <_ZN4LEDS11ExistingLEDEh+0x14>

08016aa6 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 4) return false;
 8016aa6:	2b04      	cmp	r3, #4
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8016aa8:	b530      	push	{r4, r5, lr}
 8016aaa:	4605      	mov	r5, r0
 8016aac:	b085      	sub	sp, #20
 8016aae:	4614      	mov	r4, r2
			if (length != 4) return false;
 8016ab0:	d002      	beq.n	8016ab8 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x12>
 8016ab2:	2000      	movs	r0, #0
		}
 8016ab4:	b005      	add	sp, #20
 8016ab6:	bd30      	pop	{r4, r5, pc}
			self->GetRGBLED(ID, &success);
 8016ab8:	f10d 020f 	add.w	r2, sp, #15
 8016abc:	7821      	ldrb	r1, [r4, #0]
 8016abe:	f7ff fdd7 	bl	8016670 <_ZN4LEDS9GetRGBLEDEhPb>
			if (success) {
 8016ac2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8016ac6:	b13b      	cbz	r3, 8016ad8 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x32>
				return self->SetRGB(ID, input[1], input[2], input[3]);
 8016ac8:	78e3      	ldrb	r3, [r4, #3]
 8016aca:	4628      	mov	r0, r5
 8016acc:	9300      	str	r3, [sp, #0]
 8016ace:	78a3      	ldrb	r3, [r4, #2]
 8016ad0:	7862      	ldrb	r2, [r4, #1]
 8016ad2:	f7ff fde2 	bl	801669a <_ZN4LEDS6SetRGBEhhhh>
 8016ad6:	e7ed      	b.n	8016ab4 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xe>
			self->GetI2CRGBLED(ID, &success);
 8016ad8:	4628      	mov	r0, r5
 8016ada:	f7ff fe1a 	bl	8016712 <_ZN4LEDS12GetI2CRGBLEDEhPb>
			if (success) {
 8016ade:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d0e5      	beq.n	8016ab2 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xc>
				return self->SetI2CRGB(ID, input[1], input[2], input[3]) == HAL_OK;
 8016ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8016aea:	4628      	mov	r0, r5
 8016aec:	9301      	str	r3, [sp, #4]
 8016aee:	78e3      	ldrb	r3, [r4, #3]
 8016af0:	9300      	str	r3, [sp, #0]
 8016af2:	78a3      	ldrb	r3, [r4, #2]
 8016af4:	7862      	ldrb	r2, [r4, #1]
 8016af6:	f7ff ff13 	bl	8016920 <_ZN4LEDS9SetI2CRGBEhhhhm>
 8016afa:	fab0 f080 	clz	r0, r0
 8016afe:	0940      	lsrs	r0, r0, #5
 8016b00:	e7d8      	b.n	8016ab4 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xe>

08016b02 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8016b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b04:	4604      	mov	r4, r0
 8016b06:	460e      	mov	r6, r1
 8016b08:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8016b0a:	2700      	movs	r7, #0
      for (; __first != __last; ++__first, (void)++__cur)
 8016b0c:	42b4      	cmp	r4, r6
 8016b0e:	4628      	mov	r0, r5
 8016b10:	f105 0520 	add.w	r5, r5, #32
 8016b14:	d100      	bne.n	8016b18 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x16>
    }
 8016b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
struct LED {
 8016b18:	4622      	mov	r2, r4
 8016b1a:	f812 3b04 	ldrb.w	r3, [r2], #4
 8016b1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016b22:	f805 3c20 	strb.w	r3, [r5, #-32]
 8016b26:	f1a5 031c 	sub.w	r3, r5, #28
 8016b2a:	e883 0003 	stmia.w	r3, {r0, r1}
 8016b2e:	7b23      	ldrb	r3, [r4, #12]
      }
 8016b30:	f104 0010 	add.w	r0, r4, #16
 8016b34:	f805 3c14 	strb.w	r3, [r5, #-20]
 8016b38:	7b63      	ldrb	r3, [r4, #13]
 8016b3a:	f805 3c13 	strb.w	r3, [r5, #-19]
 8016b3e:	7ba3      	ldrb	r3, [r4, #14]
 8016b40:	f805 3c12 	strb.w	r3, [r5, #-18]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8016b44:	6923      	ldr	r3, [r4, #16]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8016b46:	6127      	str	r7, [r4, #16]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8016b48:	f845 3c10 	str.w	r3, [r5, #-16]
 8016b4c:	6963      	ldr	r3, [r4, #20]
 8016b4e:	f845 3c0c 	str.w	r3, [r5, #-12]
	  _M_end_of_storage(__x._M_end_of_storage)
 8016b52:	69a3      	ldr	r3, [r4, #24]
 8016b54:	f845 3c08 	str.w	r3, [r5, #-8]
 8016b58:	7f23      	ldrb	r3, [r4, #28]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8016b5a:	e9c4 7705 	strd	r7, r7, [r4, #20]
 8016b5e:	f805 3c04 	strb.w	r3, [r5, #-4]
      for (; __first != __last; ++__first, (void)++__cur)
 8016b62:	3420      	adds	r4, #32
      }
 8016b64:	f7e9 ffbc 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8016b68:	e7d0      	b.n	8016b0c <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>

08016b6a <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8016b6a:	b570      	push	{r4, r5, r6, lr}
 8016b6c:	4604      	mov	r4, r0
 8016b6e:	b086      	sub	sp, #24
 8016b70:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8016b72:	6800      	ldr	r0, [r0, #0]
 8016b74:	f04f 31ff 	mov.w	r1, #4294967295
 8016b78:	f7f6 f976 	bl	800ce68 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8016b7c:	f10d 0207 	add.w	r2, sp, #7
 8016b80:	4631      	mov	r1, r6
 8016b82:	4620      	mov	r0, r4
 8016b84:	f002 fe6d 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8016b88:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8016b8c:	b125      	cbz	r5, 8016b98 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8016b8e:	6820      	ldr	r0, [r4, #0]
 8016b90:	f7f6 f99e 	bl	800ced0 <osSemaphoreRelease>
}
 8016b94:	b006      	add	sp, #24
 8016b96:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8016b98:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8016b9c:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8016ba0:	f7ff fc28 	bl	80163f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 8016ba4:	2301      	movs	r3, #1
 8016ba6:	f8ad 600a 	strh.w	r6, [sp, #10]
 8016baa:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8016bae:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8016bb2:	f88d 000c 	strb.w	r0, [sp, #12]
 8016bb6:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8016bba:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d0e5      	beq.n	8016b8e <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
      push_back(const value_type& __x)
 8016bc2:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016bc4:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 8016bc8:	429d      	cmp	r5, r3
 8016bca:	d005      	beq.n	8016bd8 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x6e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016bcc:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8016bce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8016bd2:	3510      	adds	r5, #16
 8016bd4:	60a5      	str	r5, [r4, #8]
 8016bd6:	e7da      	b.n	8016b8e <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	  _M_realloc_insert(end(), __x);
 8016bd8:	4629      	mov	r1, r5
 8016bda:	1d20      	adds	r0, r4, #4
 8016bdc:	f7f9 f916 	bl	800fe0c <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8016be0:	e7d5      	b.n	8016b8e <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	...

08016be4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8016be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016be8:	460c      	mov	r4, r1
 8016bea:	b087      	sub	sp, #28
 8016bec:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8016bee:	f04f 31ff 	mov.w	r1, #4294967295
 8016bf2:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8016bf4:	4698      	mov	r8, r3
 8016bf6:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8016bf8:	f7f6 f936 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8016bfc:	4621      	mov	r1, r4
 8016bfe:	f10d 0207 	add.w	r2, sp, #7
 8016c02:	4630      	mov	r0, r6
 8016c04:	f002 fe2d 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8016c08:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8016c0c:	4604      	mov	r4, r0
	if (!success) {
 8016c0e:	b92b      	cbnz	r3, 8016c1c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 8016c10:	6830      	ldr	r0, [r6, #0]
 8016c12:	f7f6 f95d 	bl	800ced0 <osSemaphoreRelease>
}
 8016c16:	b007      	add	sp, #28
 8016c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8016c1c:	f10d 0007 	add.w	r0, sp, #7
 8016c20:	f7ff fbe8 	bl	80163f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8016c24:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d0f1      	beq.n	8016c10 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 8016c2c:	7923      	ldrb	r3, [r4, #4]
 8016c2e:	4298      	cmp	r0, r3
 8016c30:	d1ee      	bne.n	8016c10 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 8016c32:	3004      	adds	r0, #4
 8016c34:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8016c38:	2f00      	cmp	r7, #0
 8016c3a:	d0e9      	beq.n	8016c10 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8016c3c:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016c3e:	e9d7 3500 	ldrd	r3, r5, [r7]
 8016c42:	1aea      	subs	r2, r5, r3
 8016c44:	1112      	asrs	r2, r2, #4
 8016c46:	b9b1      	cbnz	r1, 8016c76 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 8016c48:	7861      	ldrb	r1, [r4, #1]
 8016c4a:	b9a1      	cbnz	r1, 8016c76 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 8016c4c:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016c4e:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8016c50:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 8016c52:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016c54:	42a9      	cmp	r1, r5
		callback.write = write;
 8016c56:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8016c5a:	d008      	beq.n	8016c6e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
 8016c5c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8016c5e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8016c62:	3510      	adds	r5, #16
 8016c64:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 8016c66:	2301      	movs	r3, #1
 8016c68:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8016c6a:	7223      	strb	r3, [r4, #8]
 8016c6c:	e7d0      	b.n	8016c10 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 8016c6e:	4638      	mov	r0, r7
 8016c70:	f7f9 ff90 	bl	8010b94 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8016c74:	e7f7      	b.n	8016c66 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8016c76:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 8016c78:	4291      	cmp	r1, r2
 8016c7a:	d302      	bcc.n	8016c82 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8016c7c:	4803      	ldr	r0, [pc, #12]	@ (8016c8c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 8016c7e:	f007 fa7c 	bl	801e17a <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8016c82:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8016c86:	e9c3 9801 	strd	r9, r8, [r3, #4]
 8016c8a:	e7ec      	b.n	8016c66 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 8016c8c:	0801f44c 	.word	0x0801f44c

08016c90 <_ZN4LEDS12AddRegistersEv>:
void LEDS::AddRegisters(void) {
 8016c90:	b510      	push	{r4, lr}
 8016c92:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_LEDS_SET);
 8016c94:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8016c98:	6800      	ldr	r0, [r0, #0]
 8016c9a:	f7ff ff66 	bl	8016b6a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_LEDS_SET, 2);
 8016c9e:	2202      	movs	r2, #2
 8016ca0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8016ca4:	6820      	ldr	r0, [r4, #0]
 8016ca6:	f002 fe31 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET, (void*) this,
 8016caa:	4622      	mov	r2, r4
 8016cac:	4b2f      	ldr	r3, [pc, #188]	@ (8016d6c <_ZN4LEDS12AddRegistersEv+0xdc>)
 8016cae:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8016cb2:	6820      	ldr	r0, [r4, #0]
 8016cb4:	f7ff ff96 	bl	8016be4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_TIMINGS);
 8016cb8:	6820      	ldr	r0, [r4, #0]
 8016cba:	f240 3101 	movw	r1, #769	@ 0x301
 8016cbe:	f7ff ff54 	bl	8016b6a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsVector(REG_LEDS_TIMINGS);
 8016cc2:	f240 3101 	movw	r1, #769	@ 0x301
 8016cc6:	6820      	ldr	r0, [r4, #0]
 8016cc8:	f002 fe3c 	bl	8019944 <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_TIMINGS, (void*) this,
 8016ccc:	4622      	mov	r2, r4
 8016cce:	4b28      	ldr	r3, [pc, #160]	@ (8016d70 <_ZN4LEDS12AddRegistersEv+0xe0>)
 8016cd0:	f240 3101 	movw	r1, #769	@ 0x301
 8016cd4:	6820      	ldr	r0, [r4, #0]
 8016cd6:	f7ff ff85 	bl	8016be4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_BLINK);
 8016cda:	6820      	ldr	r0, [r4, #0]
 8016cdc:	f240 3102 	movw	r1, #770	@ 0x302
 8016ce0:	f7ff ff43 	bl	8016b6a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_LEDS_BLINK);
 8016ce4:	f240 3102 	movw	r1, #770	@ 0x302
 8016ce8:	6820      	ldr	r0, [r4, #0]
 8016cea:	f002 fdf3 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_BLINK, (void*) this,
 8016cee:	4622      	mov	r2, r4
 8016cf0:	4b20      	ldr	r3, [pc, #128]	@ (8016d74 <_ZN4LEDS12AddRegistersEv+0xe4>)
 8016cf2:	f240 3102 	movw	r1, #770	@ 0x302
 8016cf6:	6820      	ldr	r0, [r4, #0]
 8016cf8:	f7ff ff74 	bl	8016be4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_BLINK_ONCE);
 8016cfc:	6820      	ldr	r0, [r4, #0]
 8016cfe:	f240 3103 	movw	r1, #771	@ 0x303
 8016d02:	f7ff ff32 	bl	8016b6a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_LEDS_BLINK_ONCE);
 8016d06:	f240 3103 	movw	r1, #771	@ 0x303
 8016d0a:	6820      	ldr	r0, [r4, #0]
 8016d0c:	f002 fde2 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_BLINK_ONCE, (void*) this,
 8016d10:	4b19      	ldr	r3, [pc, #100]	@ (8016d78 <_ZN4LEDS12AddRegistersEv+0xe8>)
 8016d12:	4622      	mov	r2, r4
 8016d14:	6820      	ldr	r0, [r4, #0]
 8016d16:	f240 3103 	movw	r1, #771	@ 0x303
 8016d1a:	f7ff ff63 	bl	8016be4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_SET_RGB);
 8016d1e:	6820      	ldr	r0, [r4, #0]
 8016d20:	f44f 7141 	mov.w	r1, #772	@ 0x304
 8016d24:	f7ff ff21 	bl	8016b6a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_LEDS_SET_RGB, 4);
 8016d28:	2204      	movs	r2, #4
 8016d2a:	f44f 7141 	mov.w	r1, #772	@ 0x304
 8016d2e:	6820      	ldr	r0, [r4, #0]
 8016d30:	f002 fdec 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET_RGB, (void*) this,
 8016d34:	4b11      	ldr	r3, [pc, #68]	@ (8016d7c <_ZN4LEDS12AddRegistersEv+0xec>)
 8016d36:	4622      	mov	r2, r4
 8016d38:	6820      	ldr	r0, [r4, #0]
 8016d3a:	f44f 7141 	mov.w	r1, #772	@ 0x304
 8016d3e:	f7ff ff51 	bl	8016be4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_SET_BRIGHNESS);
 8016d42:	6820      	ldr	r0, [r4, #0]
 8016d44:	f240 3105 	movw	r1, #773	@ 0x305
 8016d48:	f7ff ff0f 	bl	8016b6a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_LEDS_SET_BRIGHNESS, 2);
 8016d4c:	2202      	movs	r2, #2
 8016d4e:	f240 3105 	movw	r1, #773	@ 0x305
 8016d52:	6820      	ldr	r0, [r4, #0]
 8016d54:	f002 fdda 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET_BRIGHNESS, (void*) this,
 8016d58:	4622      	mov	r2, r4
 8016d5a:	6820      	ldr	r0, [r4, #0]
 8016d5c:	f240 3105 	movw	r1, #773	@ 0x305
 8016d60:	4b07      	ldr	r3, [pc, #28]	@ (8016d80 <_ZN4LEDS12AddRegistersEv+0xf0>)
}
 8016d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET_BRIGHNESS, (void*) this,
 8016d66:	f7ff bf3d 	b.w	8016be4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 8016d6a:	bf00      	nop
 8016d6c:	08016851 	.word	0x08016851
 8016d70:	08017033 	.word	0x08017033
 8016d74:	08016627 	.word	0x08016627
 8016d78:	0801666b 	.word	0x0801666b
 8016d7c:	08016aa7 	.word	0x08016aa7
 8016d80:	08016901 	.word	0x08016901

08016d84 <_ZN3LEDC1ERKS_>:
 8016d84:	460a      	mov	r2, r1
 8016d86:	b538      	push	{r3, r4, r5, lr}
 8016d88:	460d      	mov	r5, r1
 8016d8a:	4603      	mov	r3, r0
 8016d8c:	f812 1b04 	ldrb.w	r1, [r2], #4
 8016d90:	4604      	mov	r4, r0
 8016d92:	f803 1b04 	strb.w	r1, [r3], #4
 8016d96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016d9a:	89aa      	ldrh	r2, [r5, #12]
 8016d9c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016da0:	7bab      	ldrb	r3, [r5, #14]
 8016da2:	f105 0110 	add.w	r1, r5, #16
 8016da6:	f104 0010 	add.w	r0, r4, #16
 8016daa:	81a2      	strh	r2, [r4, #12]
 8016dac:	73a3      	strb	r3, [r4, #14]
 8016dae:	f7e9 ff47 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8016db2:	7f2b      	ldrb	r3, [r5, #28]
 8016db4:	4620      	mov	r0, r4
 8016db6:	7723      	strb	r3, [r4, #28]
 8016db8:	bd38      	pop	{r3, r4, r5, pc}

08016dba <_ZN4LEDS8TestLEDsEv>:

/**
 * @brief Testing procedure of LEDs. Light them one after the other
 */
void LEDS::TestLEDs(void) {
 8016dba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016dbe:	4604      	mov	r4, r0
 8016dc0:	b08b      	sub	sp, #44	@ 0x2c
 8016dc2:	e9d0 5702 	ldrd	r5, r7, [r0, #8]
#ifdef USE_SMD_LEDs
	for (LED led : LEDs) {
 8016dc6:	42af      	cmp	r7, r5
 8016dc8:	d109      	bne.n	8016dde <_ZN4LEDS8TestLEDsEv+0x24>
		SetLED(led.ID, GPIO_PIN_SET);
		HAL_Delay(100);
		SetLED(led.ID, GPIO_PIN_RESET);
	}
	for (RGBLED led : RGB_LEDs) {
		SetRGB(led.ID, 255, 0, 0);
 8016dca:	2700      	movs	r7, #0
 8016dcc:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 8016dd0:	e9d4 6805 	ldrd	r6, r8, [r4, #20]
	for (RGBLED led : RGB_LEDs) {
 8016dd4:	45b0      	cmp	r8, r6
 8016dd6:	d11a      	bne.n	8016e0e <_ZN4LEDS8TestLEDsEv+0x54>
		SetI2CRGB(led.ID, 0, 0, 255);
		HAL_Delay(100);
		SetI2CRGB(led.ID, 0, 0, 0);
	}
#endif
}
 8016dd8:	b00b      	add	sp, #44	@ 0x2c
 8016dda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (LED led : LEDs) {
 8016dde:	4629      	mov	r1, r5
 8016de0:	a802      	add	r0, sp, #8
 8016de2:	f7ff ffcf 	bl	8016d84 <_ZN3LEDC1ERKS_>
		SetLED(led.ID, GPIO_PIN_SET);
 8016de6:	f89d 6008 	ldrb.w	r6, [sp, #8]
 8016dea:	2201      	movs	r2, #1
 8016dec:	4620      	mov	r0, r4
 8016dee:	4631      	mov	r1, r6
 8016df0:	3520      	adds	r5, #32
 8016df2:	f7ff fbb3 	bl	801655c <_ZN4LEDS6SetLEDEh13GPIO_PinState>
		HAL_Delay(100);
 8016df6:	2064      	movs	r0, #100	@ 0x64
 8016df8:	f7ec fb8c 	bl	8003514 <HAL_Delay>
		SetLED(led.ID, GPIO_PIN_RESET);
 8016dfc:	2200      	movs	r2, #0
 8016dfe:	4631      	mov	r1, r6
 8016e00:	4620      	mov	r0, r4
 8016e02:	f7ff fbab 	bl	801655c <_ZN4LEDS6SetLEDEh13GPIO_PinState>
      }
 8016e06:	a806      	add	r0, sp, #24
 8016e08:	f7e9 fe6a 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8016e0c:	e7db      	b.n	8016dc6 <_ZN4LEDS8TestLEDsEv+0xc>
	for (RGBLED led : RGB_LEDs) {
 8016e0e:	f816 5b10 	ldrb.w	r5, [r6], #16
		SetRGB(led.ID, 255, 0, 0);
 8016e12:	2300      	movs	r3, #0
 8016e14:	22ff      	movs	r2, #255	@ 0xff
 8016e16:	4620      	mov	r0, r4
 8016e18:	4629      	mov	r1, r5
 8016e1a:	9700      	str	r7, [sp, #0]
 8016e1c:	f7ff fc3d 	bl	801669a <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 8016e20:	2064      	movs	r0, #100	@ 0x64
 8016e22:	f7ec fb77 	bl	8003514 <HAL_Delay>
		SetRGB(led.ID, 0, 255, 0);
 8016e26:	4629      	mov	r1, r5
 8016e28:	23ff      	movs	r3, #255	@ 0xff
 8016e2a:	2200      	movs	r2, #0
 8016e2c:	4620      	mov	r0, r4
 8016e2e:	9700      	str	r7, [sp, #0]
 8016e30:	f7ff fc33 	bl	801669a <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 8016e34:	2064      	movs	r0, #100	@ 0x64
 8016e36:	f7ec fb6d 	bl	8003514 <HAL_Delay>
		SetRGB(led.ID, 0, 0, 255);
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	4629      	mov	r1, r5
 8016e3e:	4620      	mov	r0, r4
 8016e40:	461a      	mov	r2, r3
 8016e42:	f8cd 9000 	str.w	r9, [sp]
 8016e46:	f7ff fc28 	bl	801669a <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 8016e4a:	2064      	movs	r0, #100	@ 0x64
 8016e4c:	f7ec fb62 	bl	8003514 <HAL_Delay>
		SetRGB(led.ID, 0, 0, 0);
 8016e50:	2300      	movs	r3, #0
 8016e52:	4629      	mov	r1, r5
 8016e54:	4620      	mov	r0, r4
 8016e56:	461a      	mov	r2, r3
 8016e58:	9700      	str	r7, [sp, #0]
 8016e5a:	f7ff fc1e 	bl	801669a <_ZN4LEDS6SetRGBEhhhh>
 8016e5e:	e7b9      	b.n	8016dd4 <_ZN4LEDS8TestLEDsEv+0x1a>

08016e60 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8016e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016e64:	e9d0 7900 	ldrd	r7, r9, [r0]
 8016e68:	4692      	mov	sl, r2
	if (max_size() - size() < __n)
 8016e6a:	f06f 437c 	mvn.w	r3, #4227858432	@ 0xfc000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016e6e:	eba9 0207 	sub.w	r2, r9, r7
 8016e72:	4606      	mov	r6, r0
 8016e74:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
 8016e76:	ebb3 1f62 	cmp.w	r3, r2, asr #5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016e7a:	ea4f 1462 	mov.w	r4, r2, asr #5
	if (max_size() - size() < __n)
 8016e7e:	d102      	bne.n	8016e86 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8016e80:	481a      	ldr	r0, [pc, #104]	@ (8016eec <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>)
 8016e82:	f007 f977 	bl	801e174 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8016e86:	45b9      	cmp	r9, r7
 8016e88:	bf14      	ite	ne
 8016e8a:	4622      	movne	r2, r4
 8016e8c:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8016e8e:	eba1 0b07 	sub.w	fp, r1, r7
 8016e92:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016e94:	d225      	bcs.n	8016ee2 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016e96:	b334      	cbz	r4, 8016ee6 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016e98:	429c      	cmp	r4, r3
 8016e9a:	bf28      	it	cs
 8016e9c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8016e9e:	0160      	lsls	r0, r4, #5
 8016ea0:	f007 f8b3 	bl	801e00a <_Znwj>
 8016ea4:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016ea6:	4651      	mov	r1, sl
 8016ea8:	eb05 000b 	add.w	r0, r5, fp
 8016eac:	f7ff ff6a 	bl	8016d84 <_ZN3LEDC1ERKS_>
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8016eb0:	4641      	mov	r1, r8
 8016eb2:	462a      	mov	r2, r5
 8016eb4:	4638      	mov	r0, r7
 8016eb6:	f7ff fe24 	bl	8016b02 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 8016eba:	4649      	mov	r1, r9
 8016ebc:	f100 0220 	add.w	r2, r0, #32
 8016ec0:	4640      	mov	r0, r8
 8016ec2:	f7ff fe1e 	bl	8016b02 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 8016ec6:	4680      	mov	r8, r0
	if (__p)
 8016ec8:	b127      	cbz	r7, 8016ed4 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
		    this->_M_impl._M_end_of_storage - __old_start);
 8016eca:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8016ecc:	4638      	mov	r0, r7
 8016ece:	1bc9      	subs	r1, r1, r7
 8016ed0:	f007 f876 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016ed4:	eb05 1444 	add.w	r4, r5, r4, lsl #5
      this->_M_impl._M_finish = __new_finish;
 8016ed8:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016edc:	60b4      	str	r4, [r6, #8]
    }
 8016ede:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016ee2:	461c      	mov	r4, r3
 8016ee4:	e7db      	b.n	8016e9e <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016ee6:	4625      	mov	r5, r4
 8016ee8:	e7dd      	b.n	8016ea6 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8016eea:	bf00      	nop
 8016eec:	0801f20c 	.word	0x0801f20c

08016ef0 <_ZN4LEDS6AddLEDEh4GPIO>:
bool LEDS::AddLED(uint8_t ID, GPIO gpio) {
 8016ef0:	b570      	push	{r4, r5, r6, lr}
 8016ef2:	b08a      	sub	sp, #40	@ 0x28
 8016ef4:	4604      	mov	r4, r0
 8016ef6:	460e      	mov	r6, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8016ef8:	6840      	ldr	r0, [r0, #4]
bool LEDS::AddLED(uint8_t ID, GPIO gpio) {
 8016efa:	466d      	mov	r5, sp
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8016efc:	f04f 31ff 	mov.w	r1, #4294967295
bool LEDS::AddLED(uint8_t ID, GPIO gpio) {
 8016f00:	e885 000c 	stmia.w	r5, {r2, r3}
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8016f04:	f7f5 ffb0 	bl	800ce68 <osSemaphoreAcquire>
	if (ExistingLED(ID)) {
 8016f08:	4631      	mov	r1, r6
 8016f0a:	4620      	mov	r0, r4
 8016f0c:	f7ff fdab 	bl	8016a66 <_ZN4LEDS11ExistingLEDEh>
 8016f10:	4603      	mov	r3, r0
 8016f12:	b128      	cbz	r0, 8016f20 <_ZN4LEDS6AddLEDEh4GPIO+0x30>
		osSemaphoreRelease(LEDsSemaphore);
 8016f14:	6860      	ldr	r0, [r4, #4]
 8016f16:	f7f5 ffdb 	bl	800ced0 <osSemaphoreRelease>
		return false;
 8016f1a:	2000      	movs	r0, #0
}
 8016f1c:	b00a      	add	sp, #40	@ 0x28
 8016f1e:	bd70      	pop	{r4, r5, r6, pc}
    led.gpio = gpio;
 8016f20:	aa03      	add	r2, sp, #12
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016f22:	9008      	str	r0, [sp, #32]
    led.ID = ID;
 8016f24:	f88d 6008 	strb.w	r6, [sp, #8]
 8016f28:	e9cd 0006 	strd	r0, r0, [sp, #24]
    led.gpio = gpio;
 8016f2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016f30:	e882 0003 	stmia.w	r2, {r0, r1}
    led.blink = false;
 8016f34:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016f38:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8016f3c:	4298      	cmp	r0, r3
 8016f3e:	d013      	beq.n	8016f68 <_ZN4LEDS6AddLEDEh4GPIO+0x78>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016f40:	a902      	add	r1, sp, #8
 8016f42:	f7ff ff1f 	bl	8016d84 <_ZN3LEDC1ERKS_>
	    ++this->_M_impl._M_finish;
 8016f46:	68e3      	ldr	r3, [r4, #12]
 8016f48:	3320      	adds	r3, #32
 8016f4a:	60e3      	str	r3, [r4, #12]
    osSemaphoreRelease(LEDsSemaphore);
 8016f4c:	6860      	ldr	r0, [r4, #4]
 8016f4e:	f7f5 ffbf 	bl	800ced0 <osSemaphoreRelease>
    HAL_GPIO_WritePin(led.gpio.port, led.gpio.pin, GPIO_PIN_RESET);
 8016f52:	2200      	movs	r2, #0
 8016f54:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8016f58:	9803      	ldr	r0, [sp, #12]
 8016f5a:	f7ef fd9e 	bl	8006a9a <HAL_GPIO_WritePin>
      }
 8016f5e:	a806      	add	r0, sp, #24
 8016f60:	f7e9 fdbe 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
    return true;
 8016f64:	2001      	movs	r0, #1
 8016f66:	e7d9      	b.n	8016f1c <_ZN4LEDS6AddLEDEh4GPIO+0x2c>
	  _M_realloc_insert(end(), __x);
 8016f68:	4601      	mov	r1, r0
 8016f6a:	aa02      	add	r2, sp, #8
 8016f6c:	f104 0008 	add.w	r0, r4, #8
 8016f70:	f7ff ff76 	bl	8016e60 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8016f74:	e7ea      	b.n	8016f4c <_ZN4LEDS6AddLEDEh4GPIO+0x5c>

08016f76 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>:
bool LEDS::ConfigureTimings(uint8_t ID, std::vector<uint8_t> timings, uint8_t T) {
 8016f76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f7a:	4605      	mov	r5, r0
 8016f7c:	b085      	sub	sp, #20
 8016f7e:	460c      	mov	r4, r1
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8016f80:	6840      	ldr	r0, [r0, #4]
 8016f82:	f04f 31ff 	mov.w	r1, #4294967295
bool LEDS::ConfigureTimings(uint8_t ID, std::vector<uint8_t> timings, uint8_t T) {
 8016f86:	4616      	mov	r6, r2
 8016f88:	461f      	mov	r7, r3
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8016f8a:	f7f5 ff6d 	bl	800ce68 <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 8016f8e:	f10d 020f 	add.w	r2, sp, #15
 8016f92:	4621      	mov	r1, r4
 8016f94:	4628      	mov	r0, r5
 8016f96:	f7ff facc 	bl	8016532 <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8016f9a:	f89d 800f 	ldrb.w	r8, [sp, #15]
 8016f9e:	f1b8 0f00 	cmp.w	r8, #0
 8016fa2:	d02b      	beq.n	8016ffc <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x86>
	return *(this->_M_impl._M_start + __n);
 8016fa4:	b200      	sxth	r0, r0
 8016fa6:	68ac      	ldr	r4, [r5, #8]
 8016fa8:	eb04 1440 	add.w	r4, r4, r0, lsl #5
 8016fac:	ea4f 1940 	mov.w	r9, r0, lsl #5
        LEDs[index].timings = timings;
 8016fb0:	f104 0310 	add.w	r3, r4, #16
      if (std::__addressof(__x) != this)
 8016fb4:	429e      	cmp	r6, r3
 8016fb6:	d01e      	beq.n	8016ff6 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x80>
			 - this->_M_impl._M_start); }
 8016fb8:	6922      	ldr	r2, [r4, #16]
 8016fba:	69a3      	ldr	r3, [r4, #24]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016fbc:	e9d6 b100 	ldrd	fp, r1, [r6]
			 - this->_M_impl._M_start); }
 8016fc0:	1a9b      	subs	r3, r3, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016fc2:	eba1 0a0b 	sub.w	sl, r1, fp
	  if (__xlen > capacity())
 8016fc6:	459a      	cmp	sl, r3
 8016fc8:	d91f      	bls.n	801700a <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x94>
	  pointer __result = this->_M_allocate(__n);
 8016fca:	4650      	mov	r0, sl
 8016fcc:	9101      	str	r1, [sp, #4]
 8016fce:	f7ff fa06 	bl	80163de <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 8016fd2:	9901      	ldr	r1, [sp, #4]
 8016fd4:	4602      	mov	r2, r0
 8016fd6:	4606      	mov	r6, r0
 8016fd8:	4658      	mov	r0, fp
 8016fda:	f7e9 fe25 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8016fde:	6920      	ldr	r0, [r4, #16]
	if (__p)
 8016fe0:	b118      	cbz	r0, 8016fea <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x74>
			    - this->_M_impl._M_start);
 8016fe2:	69a1      	ldr	r1, [r4, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8016fe4:	1a09      	subs	r1, r1, r0
 8016fe6:	f006 ffeb 	bl	801dfc0 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 8016fea:	6126      	str	r6, [r4, #16]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8016fec:	4456      	add	r6, sl
 8016fee:	61a6      	str	r6, [r4, #24]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8016ff0:	6923      	ldr	r3, [r4, #16]
 8016ff2:	4453      	add	r3, sl
 8016ff4:	6163      	str	r3, [r4, #20]
        LEDs[index].T = T;
 8016ff6:	68ab      	ldr	r3, [r5, #8]
 8016ff8:	444b      	add	r3, r9
 8016ffa:	771f      	strb	r7, [r3, #28]
    osSemaphoreRelease(LEDsSemaphore);
 8016ffc:	6868      	ldr	r0, [r5, #4]
 8016ffe:	f7f5 ff67 	bl	800ced0 <osSemaphoreRelease>
}
 8017002:	4640      	mov	r0, r8
 8017004:	b005      	add	sp, #20
 8017006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801700a:	6963      	ldr	r3, [r4, #20]
 801700c:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
 801700e:	459a      	cmp	sl, r3
 8017010:	d803      	bhi.n	801701a <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0xa4>
 8017012:	4658      	mov	r0, fp
 8017014:	f7e9 fe08 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      return std::uninitialized_copy(__first, __last, __result);
 8017018:	e7ea      	b.n	8016ff0 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x7a>
 801701a:	eb0b 0103 	add.w	r1, fp, r3
 801701e:	4658      	mov	r0, fp
 8017020:	f7e9 fe02 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8017024:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8017028:	e9d6 3100 	ldrd	r3, r1, [r6]
 801702c:	1a10      	subs	r0, r2, r0
 801702e:	4418      	add	r0, r3
 8017030:	e7f0      	b.n	8017014 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x9e>

08017032 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			if (length < 3) return false;
 8017032:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8017034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017038:	4606      	mov	r6, r0
 801703a:	b086      	sub	sp, #24
 801703c:	4615      	mov	r5, r2
			if (length < 3) return false;
 801703e:	d925      	bls.n	801708c <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x5a>
			std::vector<uint8_t> timings (&input[1], &input[length-1]);
 8017040:	1e9c      	subs	r4, r3, #2
 8017042:	1e5f      	subs	r7, r3, #1
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017044:	4620      	mov	r0, r4
 8017046:	eb02 0807 	add.w	r8, r2, r7
 801704a:	f7ff f9c8 	bl	80163de <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801704e:	4404      	add	r4, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017050:	4602      	mov	r2, r0
 8017052:	4641      	mov	r1, r8
 8017054:	9000      	str	r0, [sp, #0]
 8017056:	1c68      	adds	r0, r5, #1
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017058:	9402      	str	r4, [sp, #8]
 801705a:	f7e9 fde5 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
			return self->ConfigureTimings(input[0], timings, input[length-1]);
 801705e:	782c      	ldrb	r4, [r5, #0]
 8017060:	4669      	mov	r1, sp
	  this->_M_impl._M_finish =
 8017062:	9001      	str	r0, [sp, #4]
 8017064:	a803      	add	r0, sp, #12
 8017066:	f7e9 fdeb 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801706a:	4621      	mov	r1, r4
 801706c:	5deb      	ldrb	r3, [r5, r7]
 801706e:	aa03      	add	r2, sp, #12
 8017070:	4630      	mov	r0, r6
 8017072:	f7ff ff80 	bl	8016f76 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 8017076:	4604      	mov	r4, r0
      }
 8017078:	a803      	add	r0, sp, #12
 801707a:	f7e9 fd31 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801707e:	4668      	mov	r0, sp
 8017080:	f7e9 fd2e 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		}
 8017084:	4620      	mov	r0, r4
 8017086:	b006      	add	sp, #24
 8017088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (length < 3) return false;
 801708c:	2400      	movs	r4, #0
 801708e:	e7f9      	b.n	8017084 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x52>

08017090 <_ZN21CommunicationProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
 * @param input data: message to decode
 * @param output index: processed length in the data
 * @param output success: true if message decoded
 * @return the decoded and parsed message based on the custom protocol
 */
MessageHeader CommunicationProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> data, uint16_t* index, bool* success) {*success = false; MessageHeader empty_message; return empty_message;}
 8017090:	2200      	movs	r2, #0
 8017092:	9901      	ldr	r1, [sp, #4]
 8017094:	700a      	strb	r2, [r1, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017096:	60c2      	str	r2, [r0, #12]
 8017098:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801709c:	4770      	bx	lr

0801709e <_ZN21CommunicationProtocol17ActivateReceptionEh>:
 * @brief WEAK Activate reception of the associated hardware interface
 *
 * @param input ID: interface ID
 * @return the interface access status
 */
HAL_StatusTypeDef CommunicationProtocol::ActivateReception(uint8_t ID) {return HAL_ERROR;}
 801709e:	2001      	movs	r0, #1
 80170a0:	4770      	bx	lr

080170a2 <_ZN21CommunicationProtocol4SendE13MessageHeader>:
 * @brief WEAK Send a message over an interface with this protocol
 *
 * @param input ID: message to send
 * @return the interface access status
 */
HAL_StatusTypeDef CommunicationProtocol::Send(MessageHeader message) {return HAL_ERROR;}
 80170a2:	2001      	movs	r0, #1
 80170a4:	4770      	bx	lr

080170a6 <_ZN21CommunicationProtocol5GetIDEPvPb>:
 *
 * @param input pointer: the hardware interface handle pointer
 * @param output success: whether successful
 * @return the interface ID associated to the input handle
 */
uint8_t CommunicationProtocol::GetID(void* pointer, bool* success) {*success = false; return 0;}
 80170a6:	2000      	movs	r0, #0
 80170a8:	7010      	strb	r0, [r2, #0]
 80170aa:	4770      	bx	lr

080170ac <_ZN21CommunicationProtocol14AddInterfaceIDEh>:
void CommunicationProtocol::AddInterfaceID(uint8_t ID_) {
 80170ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80170b0:	e9d0 4305 	ldrd	r4, r3, [r0, #20]
 80170b4:	4606      	mov	r6, r0
 80170b6:	4689      	mov	r9, r1
 80170b8:	429c      	cmp	r4, r3
 80170ba:	d005      	beq.n	80170c8 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80170bc:	7021      	strb	r1, [r4, #0]
	    ++this->_M_impl._M_finish;
 80170be:	6943      	ldr	r3, [r0, #20]
 80170c0:	3301      	adds	r3, #1
 80170c2:	6143      	str	r3, [r0, #20]
}
 80170c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80170c8:	f8d0 8010 	ldr.w	r8, [r0, #16]
	if (max_size() - size() < __n)
 80170cc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80170d0:	eba4 0408 	sub.w	r4, r4, r8
	if (max_size() - size() < __n)
 80170d4:	429c      	cmp	r4, r3
 80170d6:	d102      	bne.n	80170de <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x32>
	  __throw_length_error(__N(__s));
 80170d8:	4816      	ldr	r0, [pc, #88]	@ (8017134 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x88>)
 80170da:	f007 f84b 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 80170de:	2c01      	cmp	r4, #1
 80170e0:	4625      	mov	r5, r4
 80170e2:	bf38      	it	cc
 80170e4:	2501      	movcc	r5, #1
 80170e6:	1965      	adds	r5, r4, r5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80170e8:	d220      	bcs.n	801712c <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x80>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80170ea:	b30d      	cbz	r5, 8017130 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x84>
 80170ec:	429d      	cmp	r5, r3
 80170ee:	bf28      	it	cs
 80170f0:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80170f2:	4628      	mov	r0, r5
 80170f4:	f006 ff89 	bl	801e00a <_Znwj>
 80170f8:	4607      	mov	r7, r0
      if (__count > 0)
 80170fa:	2c00      	cmp	r4, #0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80170fc:	f807 9004 	strb.w	r9, [r7, r4]
 8017100:	dd04      	ble.n	801710c <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8017102:	4622      	mov	r2, r4
 8017104:	4641      	mov	r1, r8
 8017106:	4638      	mov	r0, r7
 8017108:	f007 fefc 	bl	801ef04 <memmove>
	      ++__new_finish;
 801710c:	3401      	adds	r4, #1
 801710e:	443c      	add	r4, r7
	if (__p)
 8017110:	f1b8 0f00 	cmp.w	r8, #0
 8017114:	d005      	beq.n	8017122 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x76>
		    this->_M_impl._M_end_of_storage - __old_start);
 8017116:	69b1      	ldr	r1, [r6, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8017118:	4640      	mov	r0, r8
 801711a:	eba1 0108 	sub.w	r1, r1, r8
 801711e:	f006 ff4f 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8017122:	e9c6 7404 	strd	r7, r4, [r6, #16]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8017126:	442f      	add	r7, r5
 8017128:	61b7      	str	r7, [r6, #24]
 801712a:	e7cb      	b.n	80170c4 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x18>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801712c:	461d      	mov	r5, r3
 801712e:	e7e0      	b.n	80170f2 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x46>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017130:	462f      	mov	r7, r5
 8017132:	e7e2      	b.n	80170fa <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x4e>
 8017134:	0801f20c 	.word	0x0801f20c

08017138 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>:
uint8_t CommunicationProtocol::GetInterfaceIndex(uint8_t ID_, bool* success) {
 8017138:	b570      	push	{r4, r5, r6, lr}
 801713a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
	for (uint8_t ID : interfaces_id) {
 801713e:	4620      	mov	r0, r4
 8017140:	42a8      	cmp	r0, r5
 8017142:	d102      	bne.n	801714a <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x12>
 8017144:	2300      	movs	r3, #0
	return 0;
 8017146:	4618      	mov	r0, r3
 8017148:	e007      	b.n	801715a <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x22>
 801714a:	4603      	mov	r3, r0
		if (ID == ID_) {
 801714c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8017150:	428e      	cmp	r6, r1
 8017152:	d104      	bne.n	801715e <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x26>
 8017154:	1b00      	subs	r0, r0, r4
 8017156:	2301      	movs	r3, #1
 8017158:	b2c0      	uxtb	r0, r0
			*success = true;
 801715a:	7013      	strb	r3, [r2, #0]
}
 801715c:	bd70      	pop	{r4, r5, r6, pc}
 801715e:	4618      	mov	r0, r3
 8017160:	e7ee      	b.n	8017140 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x8>

08017162 <_ZN21CommunicationProtocol15InterfaceExistsEh>:
bool CommunicationProtocol::InterfaceExists(uint8_t ID) {
 8017162:	b507      	push	{r0, r1, r2, lr}
	GetInterfaceIndex(ID, &success);
 8017164:	f10d 0207 	add.w	r2, sp, #7
 8017168:	f7ff ffe6 	bl	8017138 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
}
 801716c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8017170:	b003      	add	sp, #12
 8017172:	f85d fb04 	ldr.w	pc, [sp], #4

08017176 <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>:
 *
 * @param input index: interface index in the vector
 * @param output success: whether successful
 * @return the associated interface ID
 */
uint8_t CommunicationProtocol::GetIDFromIndex(uint8_t index, bool* success) {
 8017176:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017178:	e9d0 4304 	ldrd	r4, r3, [r0, #16]
 801717c:	1b1b      	subs	r3, r3, r4
	if (index < interfaces_id.size()) {
 801717e:	4299      	cmp	r1, r3
		*success = true;
 8017180:	bf35      	itete	cc
 8017182:	2301      	movcc	r3, #1
		return interfaces_id[index];
	} else {
		*success = false;
 8017184:	2000      	movcs	r0, #0
		*success = true;
 8017186:	7013      	strbcc	r3, [r2, #0]
		*success = false;
 8017188:	7010      	strbcs	r0, [r2, #0]
		return interfaces_id[index];
 801718a:	bf38      	it	cc
 801718c:	5c60      	ldrbcc	r0, [r4, r1]
		return 0;
	}
}
 801718e:	bd10      	pop	{r4, pc}

08017190 <_ZN21CommunicationProtocol9GetBufferEhPb>:
 *
 * @param input ID: interface ID
 * @param output success: whether successful
 * @return the associated buffer memory base pointer
 */
std::vector<uint8_t>* CommunicationProtocol::GetBuffer(uint8_t ID, bool* success) {
 8017190:	b538      	push	{r3, r4, r5, lr}
 8017192:	4604      	mov	r4, r0
	uint8_t index = GetInterfaceIndex(ID, success);
 8017194:	f7ff ffd0 	bl	8017138 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 8017198:	4603      	mov	r3, r0
	if (*success)
 801719a:	7810      	ldrb	r0, [r2, #0]
 801719c:	b128      	cbz	r0, 80171aa <_ZN21CommunicationProtocol9GetBufferEhPb+0x1a>
	return *(this->_M_impl._M_start + __n);
 801719e:	b21b      	sxth	r3, r3
 80171a0:	6a20      	ldr	r0, [r4, #32]
 80171a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80171a6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
		return &buffers[index];
	return NULL;
}
 80171aa:	bd38      	pop	{r3, r4, r5, pc}

080171ac <_ZN21CommunicationProtocol14GetBufferIndexEhPb>:
 *
 * @param input ID: interface ID
 * @param output success: whether successful
 * @return the associated buffer index pointer
 */
uint16_t* CommunicationProtocol::GetBufferIndex(uint8_t ID, bool* success) {
 80171ac:	b538      	push	{r3, r4, r5, lr}
 80171ae:	4604      	mov	r4, r0
	uint8_t index = GetInterfaceIndex(ID, success);
 80171b0:	f7ff ffc2 	bl	8017138 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 80171b4:	4603      	mov	r3, r0
	if (*success)
 80171b6:	7810      	ldrb	r0, [r2, #0]
 80171b8:	b118      	cbz	r0, 80171c2 <_ZN21CommunicationProtocol14GetBufferIndexEhPb+0x16>
 80171ba:	b21b      	sxth	r3, r3
 80171bc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80171be:	eb00 0043 	add.w	r0, r0, r3, lsl #1
		return &buffers_index[index];
	return NULL;
}
 80171c2:	bd38      	pop	{r3, r4, r5, pc}

080171c4 <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>:
 * @brief Set the maximum payload length for the protocol
 *
 * @param input length: the maximum payload length
 */
void CommunicationProtocol::SetProtocolPayloadMaxLength(uint16_t length) {
	max_payload_length = length;
 80171c4:	8381      	strh	r1, [r0, #28]
}
 80171c6:	4770      	bx	lr

080171c8 <_ZN21CommunicationProtocol27GetProtocolPayloadMaxLengthEv>:
 *
 * @return the maximum payload length of the protocol
 */
uint16_t CommunicationProtocol::GetProtocolPayloadMaxLength(void) {
	return max_payload_length;
}
 80171c8:	8b80      	ldrh	r0, [r0, #28]
 80171ca:	4770      	bx	lr

080171cc <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80171cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80171d0:	e9d0 8a00 	ldrd	r8, sl, [r0]
 80171d4:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 80171d6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80171da:	ebaa 0208 	sub.w	r2, sl, r8
 80171de:	4607      	mov	r7, r0
 80171e0:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 80171e2:	ebb3 0f62 	cmp.w	r3, r2, asr #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80171e6:	ea4f 0462 	mov.w	r4, r2, asr #1
	if (max_size() - size() < __n)
 80171ea:	d102      	bne.n	80171f2 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80171ec:	481e      	ldr	r0, [pc, #120]	@ (8017268 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x9c>)
 80171ee:	f006 ffc1 	bl	801e174 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 80171f2:	45c2      	cmp	sl, r8
 80171f4:	bf14      	ite	ne
 80171f6:	4622      	movne	r2, r4
 80171f8:	2201      	moveq	r2, #1
 80171fa:	eba1 0508 	sub.w	r5, r1, r8
 80171fe:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017200:	d22e      	bcs.n	8017260 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017202:	b37c      	cbz	r4, 8017264 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017204:	429c      	cmp	r4, r3
 8017206:	bf28      	it	cs
 8017208:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801720a:	0060      	lsls	r0, r4, #1
 801720c:	f006 fefd 	bl	801e00a <_Znwj>
 8017210:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017212:	f8bb 3000 	ldrh.w	r3, [fp]
      if (__count > 0)
 8017216:	2d00      	cmp	r5, #0
 8017218:	5373      	strh	r3, [r6, r5]
 801721a:	dd04      	ble.n	8017226 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801721c:	462a      	mov	r2, r5
 801721e:	4641      	mov	r1, r8
 8017220:	4630      	mov	r0, r6
 8017222:	f007 fe6f 	bl	801ef04 <memmove>
      ptrdiff_t __count = __last - __first;
 8017226:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 801722a:	3502      	adds	r5, #2
      if (__count > 0)
 801722c:	f1ba 0f00 	cmp.w	sl, #0
 8017230:	4435      	add	r5, r6
 8017232:	dd04      	ble.n	801723e <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8017234:	4652      	mov	r2, sl
 8017236:	4649      	mov	r1, r9
 8017238:	4628      	mov	r0, r5
 801723a:	f007 ff5b 	bl	801f0f4 <memcpy>
      return __result + __count;
 801723e:	4455      	add	r5, sl
	if (__p)
 8017240:	f1b8 0f00 	cmp.w	r8, #0
 8017244:	d005      	beq.n	8017252 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 8017246:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8017248:	4640      	mov	r0, r8
 801724a:	eba1 0108 	sub.w	r1, r1, r8
 801724e:	f006 feb7 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8017252:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8017256:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 801725a:	60be      	str	r6, [r7, #8]
    }
 801725c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017260:	461c      	mov	r4, r3
 8017262:	e7d2      	b.n	801720a <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017264:	4626      	mov	r6, r4
 8017266:	e7d4      	b.n	8017212 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x46>
 8017268:	0801f20c 	.word	0x0801f20c

0801726c <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 801726c:	b538      	push	{r3, r4, r5, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801726e:	1e0c      	subs	r4, r1, #0
      _M_create_storage(size_t __n)
 8017270:	4605      	mov	r5, r0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017272:	d00a      	beq.n	801728a <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj+0x1e>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8017274:	da01      	bge.n	801727a <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj+0xe>
	    std::__throw_bad_alloc();
 8017276:	f006 ff77 	bl	801e168 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801727a:	4620      	mov	r0, r4
 801727c:	f006 fec5 	bl	801e00a <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8017280:	e9c5 0000 	strd	r0, r0, [r5]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017284:	4420      	add	r0, r4
 8017286:	60a8      	str	r0, [r5, #8]
      }
 8017288:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801728a:	4620      	mov	r0, r4
 801728c:	e7f8      	b.n	8017280 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj+0x14>
	...

08017290 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8017290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8017292:	1e0d      	subs	r5, r1, #0
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8017294:	4604      	mov	r4, r0
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8017296:	da02      	bge.n	801729e <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0xe>
	  __throw_length_error(
 8017298:	480c      	ldr	r0, [pc, #48]	@ (80172cc <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x3c>)
 801729a:	f006 ff6b 	bl	801e174 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
 801729e:	2700      	movs	r7, #0
 80172a0:	e9c0 7700 	strd	r7, r7, [r0]
 80172a4:	6087      	str	r7, [r0, #8]
      { _M_create_storage(__n); }
 80172a6:	f7ff ffe1 	bl	801726c <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 80172aa:	6826      	ldr	r6, [r4, #0]
	  if (__n > 0)
 80172ac:	b14d      	cbz	r5, 80172c2 <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x32>
 80172ae:	4630      	mov	r0, r6
      if (__n <= 0)
 80172b0:	2d01      	cmp	r5, #1
 80172b2:	f800 7b01 	strb.w	r7, [r0], #1
 80172b6:	d007      	beq.n	80172c8 <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x38>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 80172b8:	1e6a      	subs	r2, r5, #1
 80172ba:	4639      	mov	r1, r7
      std::__fill_a(__first, __first + __n, __value);
 80172bc:	442e      	add	r6, r5
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 80172be:	f007 fe3b 	bl	801ef38 <memset>
      { _M_default_initialize(__n); }
 80172c2:	4620      	mov	r0, r4
	this->_M_impl._M_finish =
 80172c4:	6066      	str	r6, [r4, #4]
      { _M_default_initialize(__n); }
 80172c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	      ++__first;
 80172c8:	4606      	mov	r6, r0
 80172ca:	e7fa      	b.n	80172c2 <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x32>
 80172cc:	0801f226 	.word	0x0801f226

080172d0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80172d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80172d4:	e9d0 7900 	ldrd	r7, r9, [r0]
 80172d8:	4b35      	ldr	r3, [pc, #212]	@ (80173b0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe0>)
 80172da:	4606      	mov	r6, r0
 80172dc:	eba9 0507 	sub.w	r5, r9, r7
 80172e0:	4688      	mov	r8, r1
 80172e2:	4614      	mov	r4, r2
 80172e4:	10ad      	asrs	r5, r5, #2
 80172e6:	435d      	muls	r5, r3
	if (max_size() - size() < __n)
 80172e8:	4b32      	ldr	r3, [pc, #200]	@ (80173b4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe4>)
 80172ea:	429d      	cmp	r5, r3
 80172ec:	d102      	bne.n	80172f4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 80172ee:	4832      	ldr	r0, [pc, #200]	@ (80173b8 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe8>)
 80172f0:	f006 ff40 	bl	801e174 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 80172f4:	45b9      	cmp	r9, r7
 80172f6:	bf14      	ite	ne
 80172f8:	462a      	movne	r2, r5
 80172fa:	2201      	moveq	r2, #1
 80172fc:	eba1 0b07 	sub.w	fp, r1, r7
 8017300:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017302:	d22d      	bcs.n	8017360 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x90>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017304:	b375      	cbz	r5, 8017364 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x94>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017306:	429d      	cmp	r5, r3
 8017308:	bf28      	it	cs
 801730a:	461d      	movcs	r5, r3
 801730c:	200c      	movs	r0, #12
 801730e:	4368      	muls	r0, r5
 8017310:	f006 fe7b 	bl	801e00a <_Znwj>
 8017314:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017316:	4621      	mov	r1, r4
 8017318:	eb0a 000b 	add.w	r0, sl, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801731c:	463c      	mov	r4, r7
      _ForwardIterator __cur = __result;
 801731e:	46d3      	mov	fp, sl
 8017320:	f7e9 fc8e 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8017324:	45a0      	cmp	r8, r4
 8017326:	f04f 0300 	mov.w	r3, #0
 801732a:	f10b 0b0c 	add.w	fp, fp, #12
 801732e:	d11b      	bne.n	8017368 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x98>
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8017330:	f04f 0800 	mov.w	r8, #0
 8017334:	454c      	cmp	r4, r9
 8017336:	465b      	mov	r3, fp
 8017338:	f10b 0b0c 	add.w	fp, fp, #12
 801733c:	d125      	bne.n	801738a <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xba>
	if (__p)
 801733e:	b137      	cbz	r7, 801734e <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
 8017340:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8017342:	4638      	mov	r0, r7
 8017344:	9301      	str	r3, [sp, #4]
 8017346:	1bc9      	subs	r1, r1, r7
 8017348:	f006 fe3a 	bl	801dfc0 <_ZdlPvj>
 801734c:	9b01      	ldr	r3, [sp, #4]
      this->_M_impl._M_finish = __new_finish;
 801734e:	e9c6 a300 	strd	sl, r3, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8017352:	230c      	movs	r3, #12
 8017354:	fb03 a305 	mla	r3, r3, r5, sl
 8017358:	60b3      	str	r3, [r6, #8]
    }
 801735a:	b003      	add	sp, #12
 801735c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017360:	461d      	mov	r5, r3
 8017362:	e7d3      	b.n	801730c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017364:	46aa      	mov	sl, r5
 8017366:	e7d6      	b.n	8017316 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8017368:	6822      	ldr	r2, [r4, #0]
      }
 801736a:	4620      	mov	r0, r4
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801736c:	6023      	str	r3, [r4, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801736e:	f84b 2c0c 	str.w	r2, [fp, #-12]
 8017372:	6862      	ldr	r2, [r4, #4]
 8017374:	f84b 2c08 	str.w	r2, [fp, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 8017378:	68a2      	ldr	r2, [r4, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801737a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 801737e:	f84b 2c04 	str.w	r2, [fp, #-4]
 8017382:	340c      	adds	r4, #12
      }
 8017384:	f7e9 fbac 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017388:	e7cc      	b.n	8017324 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x54>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801738a:	6823      	ldr	r3, [r4, #0]
      }
 801738c:	4620      	mov	r0, r4
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801738e:	f8c4 8000 	str.w	r8, [r4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8017392:	f84b 3c0c 	str.w	r3, [fp, #-12]
 8017396:	6863      	ldr	r3, [r4, #4]
 8017398:	f84b 3c08 	str.w	r3, [fp, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 801739c:	68a3      	ldr	r3, [r4, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801739e:	e9c4 8801 	strd	r8, r8, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 80173a2:	f84b 3c04 	str.w	r3, [fp, #-4]
 80173a6:	340c      	adds	r4, #12
      }
 80173a8:	f7e9 fb9a 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80173ac:	e7c2      	b.n	8017334 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x64>
 80173ae:	bf00      	nop
 80173b0:	aaaaaaab 	.word	0xaaaaaaab
 80173b4:	0aaaaaaa 	.word	0x0aaaaaaa
 80173b8:	0801f20c 	.word	0x0801f20c

080173bc <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 80173bc:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80173be:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
      push_back(const value_type& __x)
 80173c2:	4604      	mov	r4, r0
 80173c4:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80173c6:	42ab      	cmp	r3, r5
 80173c8:	d006      	beq.n	80173d8 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80173ca:	4618      	mov	r0, r3
 80173cc:	f7e9 fc38 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
 80173d0:	6863      	ldr	r3, [r4, #4]
 80173d2:	330c      	adds	r3, #12
 80173d4:	6063      	str	r3, [r4, #4]
      }
 80173d6:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 80173d8:	4619      	mov	r1, r3
 80173da:	f7ff ff79 	bl	80172d0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80173de:	e7fa      	b.n	80173d6 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_+0x1a>

080173e0 <_ZN21CommunicationProtocol18AddInterfaceBufferEv>:
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80173e0:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	@ 0x30
void CommunicationProtocol::AddInterfaceBuffer() {
 80173e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	buffers_index.push_back(0);
 80173e6:	2300      	movs	r3, #0
void CommunicationProtocol::AddInterfaceBuffer() {
 80173e8:	b089      	sub	sp, #36	@ 0x24
 80173ea:	4291      	cmp	r1, r2
 80173ec:	4604      	mov	r4, r0
	buffers_index.push_back(0);
 80173ee:	f8ad 3014 	strh.w	r3, [sp, #20]
 80173f2:	d036      	beq.n	8017462 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x82>
 80173f4:	f821 3b02 	strh.w	r3, [r1], #2
	    ++this->_M_impl._M_finish;
 80173f8:	6301      	str	r1, [r0, #48]	@ 0x30
	std::vector<uint8_t> buffer(BUFFER_SIZE);
 80173fa:	aa05      	add	r2, sp, #20
 80173fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017400:	a802      	add	r0, sp, #8
 8017402:	f7ff ff45 	bl	8017290 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>
	buffers.push_back(buffer);
 8017406:	f104 0020 	add.w	r0, r4, #32
 801740a:	a902      	add	r1, sp, #8
 801740c:	f7ff ffd6 	bl	80173bc <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_>
	std::vector<uint8_t> data_to_send(BUFFER_SIZE);
 8017410:	aa01      	add	r2, sp, #4
 8017412:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017416:	a805      	add	r0, sp, #20
 8017418:	f7ff ff3a 	bl	8017290 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>
	buffers_to_transfer.push_back(data_to_send);
 801741c:	1d20      	adds	r0, r4, #4
 801741e:	a905      	add	r1, sp, #20
 8017420:	f7ff ffcc 	bl	80173bc <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_>
      : _M_current(__i) { }
 8017424:	68a4      	ldr	r4, [r4, #8]
			 - this->_M_impl._M_start); }
 8017426:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 801742a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801742e:	1a9b      	subs	r3, r3, r2
      if (this->capacity() < __n)
 8017430:	2bff      	cmp	r3, #255	@ 0xff
 8017432:	d826      	bhi.n	8017482 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0xa2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017434:	f854 6c08 	ldr.w	r6, [r4, #-8]
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8017438:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801743c:	1ab6      	subs	r6, r6, r2
 801743e:	f006 fde4 	bl	801e00a <_Znwj>
 8017442:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 8017444:	e954 7203 	ldrd	r7, r2, [r4, #-12]
 8017448:	1bd2      	subs	r2, r2, r7
      if (__count > 0)
 801744a:	2a00      	cmp	r2, #0
 801744c:	dd0e      	ble.n	801746c <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x8c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801744e:	4639      	mov	r1, r7
 8017450:	f007 fd58 	bl	801ef04 <memmove>
			- this->_M_impl._M_start);
 8017454:	f854 1c04 	ldr.w	r1, [r4, #-4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8017458:	4638      	mov	r0, r7
 801745a:	1bc9      	subs	r1, r1, r7
 801745c:	f006 fdb0 	bl	801dfc0 <_ZdlPvj>
 8017460:	e006      	b.n	8017470 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x90>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8017462:	aa05      	add	r2, sp, #20
 8017464:	302c      	adds	r0, #44	@ 0x2c
 8017466:	f7ff feb1 	bl	80171cc <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>
 801746a:	e7c6      	b.n	80173fa <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x1a>
	if (__p)
 801746c:	2f00      	cmp	r7, #0
 801746e:	d1f1      	bne.n	8017454 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x74>
	  this->_M_impl._M_finish = __tmp + __old_size;
 8017470:	442e      	add	r6, r5
	  this->_M_impl._M_start = __tmp;
 8017472:	f844 5c0c 	str.w	r5, [r4, #-12]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017476:	f505 7580 	add.w	r5, r5, #256	@ 0x100
	  this->_M_impl._M_finish = __tmp + __old_size;
 801747a:	f844 6c08 	str.w	r6, [r4, #-8]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801747e:	f844 5c04 	str.w	r5, [r4, #-4]
      }
 8017482:	a805      	add	r0, sp, #20
 8017484:	f7e9 fb2c 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017488:	a802      	add	r0, sp, #8
 801748a:	f7e9 fb29 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 801748e:	b009      	add	sp, #36	@ 0x24
 8017490:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017492 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017492:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8017494:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017496:	d006      	beq.n	80174a6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8017498:	da01      	bge.n	801749e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 801749a:	f006 fe65 	bl	801e168 <_ZSt17__throw_bad_allocv>
      }
 801749e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80174a2:	f006 bdb2 	b.w	801e00a <_Znwj>
 80174a6:	bd08      	pop	{r3, pc}

080174a8 <_ZN11CANProtocolC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 80174a8:	2200      	movs	r2, #0
#include <Protocols/Communication/FDCAN/CANProtocol.hpp>

/**
 * @brief Class constructor
 */
CANProtocol::CANProtocol() {
 80174aa:	490b      	ldr	r1, [pc, #44]	@ (80174d8 <_ZN11CANProtocolC1Ev+0x30>)
 80174ac:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80174b0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80174b4:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80174b8:	e9c0 2208 	strd	r2, r2, [r0, #32]
 80174bc:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 80174c0:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
 80174c4:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
 80174c8:	6402      	str	r2, [r0, #64]	@ 0x40
 80174ca:	6001      	str	r1, [r0, #0]
 80174cc:	6502      	str	r2, [r0, #80]	@ 0x50
	marker = 0;
 80174ce:	6442      	str	r2, [r0, #68]	@ 0x44
 80174d0:	e9c0 2212 	strd	r2, r2, [r0, #72]	@ 0x48
}
 80174d4:	4770      	bx	lr
 80174d6:	bf00      	nop
 80174d8:	0801f50c 	.word	0x0801f50c

080174dc <_ZN11CANProtocol17GetProtocolLengthEt>:
 *
 * @param input length: the CAN payload length
 * @return the minimum DLC value that fits the given length inside
 */
uint32_t CANProtocol::GetProtocolLength(uint16_t length) {
	if (length <= 0) return FDCAN_DLC_BYTES_0;
 80174dc:	b301      	cbz	r1, 8017520 <_ZN11CANProtocol17GetProtocolLengthEt+0x44>
	if (length <= 1) return FDCAN_DLC_BYTES_1;
 80174de:	2901      	cmp	r1, #1
 80174e0:	d020      	beq.n	8017524 <_ZN11CANProtocol17GetProtocolLengthEt+0x48>
	if (length <= 2) return FDCAN_DLC_BYTES_2;
 80174e2:	2902      	cmp	r1, #2
 80174e4:	d021      	beq.n	801752a <_ZN11CANProtocol17GetProtocolLengthEt+0x4e>
	if (length <= 3) return FDCAN_DLC_BYTES_3;
 80174e6:	2903      	cmp	r1, #3
 80174e8:	d022      	beq.n	8017530 <_ZN11CANProtocol17GetProtocolLengthEt+0x54>
	if (length <= 4) return FDCAN_DLC_BYTES_4;
 80174ea:	2904      	cmp	r1, #4
 80174ec:	d023      	beq.n	8017536 <_ZN11CANProtocol17GetProtocolLengthEt+0x5a>
	if (length <= 5) return FDCAN_DLC_BYTES_5;
 80174ee:	2905      	cmp	r1, #5
 80174f0:	d024      	beq.n	801753c <_ZN11CANProtocol17GetProtocolLengthEt+0x60>
	if (length <= 6) return FDCAN_DLC_BYTES_6;
 80174f2:	2906      	cmp	r1, #6
 80174f4:	d025      	beq.n	8017542 <_ZN11CANProtocol17GetProtocolLengthEt+0x66>
	if (length <= 7) return FDCAN_DLC_BYTES_7;
 80174f6:	2907      	cmp	r1, #7
 80174f8:	d026      	beq.n	8017548 <_ZN11CANProtocol17GetProtocolLengthEt+0x6c>
	if (length <= 8) return FDCAN_DLC_BYTES_8;
 80174fa:	2908      	cmp	r1, #8
 80174fc:	d027      	beq.n	801754e <_ZN11CANProtocol17GetProtocolLengthEt+0x72>
	if (length <= 12) return FDCAN_DLC_BYTES_12;
 80174fe:	290c      	cmp	r1, #12
 8017500:	d928      	bls.n	8017554 <_ZN11CANProtocol17GetProtocolLengthEt+0x78>
	if (length <= 16) return FDCAN_DLC_BYTES_16;
 8017502:	2910      	cmp	r1, #16
 8017504:	d929      	bls.n	801755a <_ZN11CANProtocol17GetProtocolLengthEt+0x7e>
	if (length <= 20) return FDCAN_DLC_BYTES_20;
 8017506:	2914      	cmp	r1, #20
 8017508:	d92a      	bls.n	8017560 <_ZN11CANProtocol17GetProtocolLengthEt+0x84>
	if (length <= 24) return FDCAN_DLC_BYTES_24;
 801750a:	2918      	cmp	r1, #24
 801750c:	d92b      	bls.n	8017566 <_ZN11CANProtocol17GetProtocolLengthEt+0x8a>
	if (length <= 32) return FDCAN_DLC_BYTES_32;
 801750e:	2920      	cmp	r1, #32
 8017510:	d92c      	bls.n	801756c <_ZN11CANProtocol17GetProtocolLengthEt+0x90>
	if (length <= 48) return FDCAN_DLC_BYTES_48;
	if (length <= 64) return FDCAN_DLC_BYTES_64;
 8017512:	2931      	cmp	r1, #49	@ 0x31
 8017514:	bf34      	ite	cc
 8017516:	f44f 2060 	movcc.w	r0, #917504	@ 0xe0000
 801751a:	f44f 2070 	movcs.w	r0, #983040	@ 0xf0000
 801751e:	4770      	bx	lr
	if (length <= 0) return FDCAN_DLC_BYTES_0;
 8017520:	4608      	mov	r0, r1
 8017522:	4770      	bx	lr
	if (length <= 1) return FDCAN_DLC_BYTES_1;
 8017524:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8017528:	4770      	bx	lr
	if (length <= 2) return FDCAN_DLC_BYTES_2;
 801752a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 801752e:	4770      	bx	lr
	if (length <= 3) return FDCAN_DLC_BYTES_3;
 8017530:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8017534:	4770      	bx	lr
	if (length <= 4) return FDCAN_DLC_BYTES_4;
 8017536:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 801753a:	4770      	bx	lr
	if (length <= 5) return FDCAN_DLC_BYTES_5;
 801753c:	f44f 20a0 	mov.w	r0, #327680	@ 0x50000
 8017540:	4770      	bx	lr
	if (length <= 6) return FDCAN_DLC_BYTES_6;
 8017542:	f44f 20c0 	mov.w	r0, #393216	@ 0x60000
 8017546:	4770      	bx	lr
	if (length <= 7) return FDCAN_DLC_BYTES_7;
 8017548:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
 801754c:	4770      	bx	lr
	if (length <= 8) return FDCAN_DLC_BYTES_8;
 801754e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8017552:	4770      	bx	lr
	if (length <= 12) return FDCAN_DLC_BYTES_12;
 8017554:	f44f 2010 	mov.w	r0, #589824	@ 0x90000
 8017558:	4770      	bx	lr
	if (length <= 16) return FDCAN_DLC_BYTES_16;
 801755a:	f44f 2020 	mov.w	r0, #655360	@ 0xa0000
 801755e:	4770      	bx	lr
	if (length <= 20) return FDCAN_DLC_BYTES_20;
 8017560:	f44f 2030 	mov.w	r0, #720896	@ 0xb0000
 8017564:	4770      	bx	lr
	if (length <= 24) return FDCAN_DLC_BYTES_24;
 8017566:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 801756a:	4770      	bx	lr
	if (length <= 32) return FDCAN_DLC_BYTES_32;
 801756c:	f44f 2050 	mov.w	r0, #851968	@ 0xd0000
	return FDCAN_DLC_BYTES_64;
}
 8017570:	4770      	bx	lr

08017572 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      _GLIBCXX20_CONSTEXPR
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 8017572:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8017574:	680d      	ldr	r5, [r1, #0]
      _M_move_assign(vector&& __x, true_type) noexcept
 8017576:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8017578:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 801757a:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 801757e:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8017580:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8017582:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8017584:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8017586:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8017588:	688d      	ldr	r5, [r1, #8]
 801758a:	6085      	str	r5, [r0, #8]
      }
 801758c:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 801758e:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8017590:	e9c1 3300 	strd	r3, r3, [r1]
 8017594:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8017598:	f7e9 faa2 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      {
	vector __tmp(get_allocator());
	this->_M_impl._M_swap_data(__x._M_impl);
	__tmp._M_impl._M_swap_data(__x._M_impl);
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }
 801759c:	b005      	add	sp, #20
 801759e:	bd30      	pop	{r4, r5, pc}

080175a0 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>:
H* TemplateCommunicationProtocol<H>::GetInterface(uint8_t ID, bool* success) {
 80175a0:	b538      	push	{r3, r4, r5, lr}
 80175a2:	4615      	mov	r5, r2
 80175a4:	4604      	mov	r4, r0
	uint8_t index = GetInterfaceIndex(ID, success);
 80175a6:	f7ff fdc7 	bl	8017138 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 80175aa:	4603      	mov	r3, r0
	if (*success) {
 80175ac:	7828      	ldrb	r0, [r5, #0]
 80175ae:	b118      	cbz	r0, 80175b8 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb+0x18>
	return *(this->_M_impl._M_start + __n);
 80175b0:	b21b      	sxth	r3, r3
		return interfaces[index];
 80175b2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80175b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
}
 80175b8:	bd38      	pop	{r3, r4, r5, pc}

080175ba <_ZN11CANProtocol16ConfigureFiltersEh>:
HAL_StatusTypeDef CANProtocol::ConfigureFilters(uint8_t ID) {
 80175ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 80175bc:	f10d 020f 	add.w	r2, sp, #15
 80175c0:	f7ff ffee 	bl	80175a0 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 80175c4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80175c8:	2301      	movs	r3, #1
 80175ca:	b13a      	cbz	r2, 80175dc <_ZN11CANProtocol16ConfigureFiltersEh+0x22>
	return HAL_FDCAN_ConfigGlobalFilter(handle, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 80175cc:	2200      	movs	r2, #0
 80175ce:	9300      	str	r3, [sp, #0]
 80175d0:	4611      	mov	r1, r2
 80175d2:	f7ee fe07 	bl	80061e4 <HAL_FDCAN_ConfigGlobalFilter>
}
 80175d6:	b005      	add	sp, #20
 80175d8:	f85d fb04 	ldr.w	pc, [sp], #4
	if (not success) return HAL_ERROR;
 80175dc:	4618      	mov	r0, r3
 80175de:	e7fa      	b.n	80175d6 <_ZN11CANProtocol16ConfigureFiltersEh+0x1c>

080175e0 <_ZN11CANProtocol17ActivateReceptionEh>:
HAL_StatusTypeDef CANProtocol::ActivateReception(uint8_t ID) {
 80175e0:	b507      	push	{r0, r1, r2, lr}
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 80175e2:	f10d 0207 	add.w	r2, sp, #7
 80175e6:	f7ff ffdb 	bl	80175a0 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 80175ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80175ee:	b133      	cbz	r3, 80175fe <_ZN11CANProtocol17ActivateReceptionEh+0x1e>
	return HAL_FDCAN_ActivateNotification(handle, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80175f0:	2200      	movs	r2, #0
 80175f2:	2101      	movs	r1, #1
 80175f4:	f7ee ff54 	bl	80064a0 <HAL_FDCAN_ActivateNotification>
}
 80175f8:	b003      	add	sp, #12
 80175fa:	f85d fb04 	ldr.w	pc, [sp], #4
	if (not success) return HAL_ERROR;
 80175fe:	2001      	movs	r0, #1
 8017600:	e7fa      	b.n	80175f8 <_ZN11CANProtocol17ActivateReceptionEh+0x18>

08017602 <_ZN11CANProtocol5StartEh>:
HAL_StatusTypeDef CANProtocol::Start(uint8_t ID) {
 8017602:	b507      	push	{r0, r1, r2, lr}
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 8017604:	f10d 0207 	add.w	r2, sp, #7
 8017608:	f7ff ffca 	bl	80175a0 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 801760c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017610:	b123      	cbz	r3, 801761c <_ZN11CANProtocol5StartEh+0x1a>
	return HAL_FDCAN_Start(handle);
 8017612:	f7ee fe02 	bl	800621a <HAL_FDCAN_Start>
}
 8017616:	b003      	add	sp, #12
 8017618:	f85d fb04 	ldr.w	pc, [sp], #4
	if (not success) return HAL_ERROR;
 801761c:	2001      	movs	r0, #1
 801761e:	e7fa      	b.n	8017616 <_ZN11CANProtocol5StartEh+0x14>

08017620 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8017620:	460a      	mov	r2, r1
 8017622:	b510      	push	{r4, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8017624:	e9d0 1401 	ldrd	r1, r4, [r0, #4]
 8017628:	42a1      	cmp	r1, r4
 801762a:	d004      	beq.n	8017636 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_+0x16>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801762c:	6812      	ldr	r2, [r2, #0]
 801762e:	f841 2b04 	str.w	r2, [r1], #4
	    ++this->_M_impl._M_finish;
 8017632:	6041      	str	r1, [r0, #4]
      }
 8017634:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 8017636:	f7ea fd85 	bl	8002144 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 801763a:	e7fb      	b.n	8017634 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_+0x14>

0801763c <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801763c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017640:	e9d0 9a00 	ldrd	r9, sl, [r0]
 8017644:	4b2a      	ldr	r3, [pc, #168]	@ (80176f0 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>)
 8017646:	4680      	mov	r8, r0
 8017648:	ebaa 0409 	sub.w	r4, sl, r9
 801764c:	468b      	mov	fp, r1
 801764e:	4615      	mov	r5, r2
 8017650:	10a4      	asrs	r4, r4, #2
 8017652:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 8017654:	4b27      	ldr	r3, [pc, #156]	@ (80176f4 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb8>)
 8017656:	429c      	cmp	r4, r3
 8017658:	d102      	bne.n	8017660 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 801765a:	4827      	ldr	r0, [pc, #156]	@ (80176f8 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
 801765c:	f006 fd8a 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 8017660:	45ca      	cmp	sl, r9
 8017662:	bf14      	ite	ne
 8017664:	4622      	movne	r2, r4
 8017666:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8017668:	eba1 0609 	sub.w	r6, r1, r9
 801766c:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801766e:	d23a      	bcs.n	80176e6 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017670:	b3dc      	cbz	r4, 80176ea <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xae>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017672:	429c      	cmp	r4, r3
 8017674:	bf28      	it	cs
 8017676:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8017678:	2024      	movs	r0, #36	@ 0x24
 801767a:	4360      	muls	r0, r4
 801767c:	f006 fcc5 	bl	801e00a <_Znwj>
 8017680:	4607      	mov	r7, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017682:	eb07 0c06 	add.w	ip, r7, r6
      if (__count > 0)
 8017686:	2e00      	cmp	r6, #0
 8017688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801768a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801768e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017690:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017694:	682b      	ldr	r3, [r5, #0]
 8017696:	f8cc 3000 	str.w	r3, [ip]
 801769a:	dd04      	ble.n	80176a6 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801769c:	4632      	mov	r2, r6
 801769e:	4649      	mov	r1, r9
 80176a0:	4638      	mov	r0, r7
 80176a2:	f007 fc2f 	bl	801ef04 <memmove>
      ptrdiff_t __count = __last - __first;
 80176a6:	ebaa 0a0b 	sub.w	sl, sl, fp
	      ++__new_finish;
 80176aa:	3624      	adds	r6, #36	@ 0x24
      if (__count > 0)
 80176ac:	f1ba 0f00 	cmp.w	sl, #0
 80176b0:	443e      	add	r6, r7
 80176b2:	dd04      	ble.n	80176be <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80176b4:	4652      	mov	r2, sl
 80176b6:	4659      	mov	r1, fp
 80176b8:	4630      	mov	r0, r6
 80176ba:	f007 fd1b 	bl	801f0f4 <memcpy>
      return __result + __count;
 80176be:	4456      	add	r6, sl
	if (__p)
 80176c0:	f1b9 0f00 	cmp.w	r9, #0
 80176c4:	d006      	beq.n	80176d4 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
		    this->_M_impl._M_end_of_storage - __old_start);
 80176c6:	f8d8 1008 	ldr.w	r1, [r8, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80176ca:	4648      	mov	r0, r9
 80176cc:	eba1 0109 	sub.w	r1, r1, r9
 80176d0:	f006 fc76 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80176d4:	2324      	movs	r3, #36	@ 0x24
      this->_M_impl._M_finish = __new_finish;
 80176d6:	e9c8 7600 	strd	r7, r6, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80176da:	fb03 7704 	mla	r7, r3, r4, r7
 80176de:	f8c8 7008 	str.w	r7, [r8, #8]
    }
 80176e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176e6:	461c      	mov	r4, r3
 80176e8:	e7c6      	b.n	8017678 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80176ea:	4627      	mov	r7, r4
 80176ec:	e7c9      	b.n	8017682 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 80176ee:	bf00      	nop
 80176f0:	38e38e39 	.word	0x38e38e39
 80176f4:	038e38e3 	.word	0x038e38e3
 80176f8:	0801f20c 	.word	0x0801f20c

080176fc <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef>:
void CANProtocol::AddInterface(uint8_t ID, FDCAN_HandleTypeDef* interface) {
 80176fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176fe:	4606      	mov	r6, r0
 8017700:	b08d      	sub	sp, #52	@ 0x34
 8017702:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 8017704:	f7ff fcd2 	bl	80170ac <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 8017708:	4630      	mov	r0, r6
 801770a:	f7ff fe69 	bl	80173e0 <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	interfaces.push_back(interface);
 801770e:	a901      	add	r1, sp, #4
 8017710:	f106 0038 	add.w	r0, r6, #56	@ 0x38
 8017714:	f7ff ff84 	bl	8017620 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_>
	FDCANTxHeader.BitRateSwitch = FDCAN_BRS_ON; 				// FDCAN_BRS_ON FDCAN_BRS_OFF
 8017718:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801771c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
	FDCANTxHeader.IdType = FDCAN_STANDARD_ID; 				// FDCAN_STANDARD_ID or FDCAN_CLASSIC_CAN
 8017720:	2300      	movs	r3, #0
	FDCANTxHeader.BitRateSwitch = FDCAN_BRS_ON; 				// FDCAN_BRS_ON FDCAN_BRS_OFF
 8017722:	e9cd 1207 	strd	r1, r2, [sp, #28]
	FDCANTxHeader.FDFormat = FDCAN_FD_CAN; 					// FDCAN_FD_CAN or FDCAN_CLASSIC_CAN
 8017726:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
	FDCANTxHeader.TxFrameType = FDCAN_DATA_FRAME; 			// FDCAN_DATA_FRAME or FDCAN_REMOTE_FRAME
 801772a:	e9cd 3304 	strd	r3, r3, [sp, #16]
	FDCANTxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS; 	// FDCAN_NO_TX_EVENTS or FDCAN_STORE_TX_EVENTS
 801772e:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8017732:	e9d6 7313 	ldrd	r7, r3, [r6, #76]	@ 0x4c
 8017736:	429f      	cmp	r7, r3
 8017738:	d00b      	beq.n	8017752 <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef+0x56>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801773a:	ad03      	add	r5, sp, #12
 801773c:	463c      	mov	r4, r7
	    ++this->_M_impl._M_finish;
 801773e:	3724      	adds	r7, #36	@ 0x24
 8017740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017748:	682b      	ldr	r3, [r5, #0]
 801774a:	6023      	str	r3, [r4, #0]
 801774c:	64f7      	str	r7, [r6, #76]	@ 0x4c
}
 801774e:	b00d      	add	sp, #52	@ 0x34
 8017750:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  _M_realloc_insert(end(), __x);
 8017752:	aa03      	add	r2, sp, #12
 8017754:	4639      	mov	r1, r7
 8017756:	f106 0048 	add.w	r0, r6, #72	@ 0x48
 801775a:	f7ff ff6f 	bl	801763c <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 801775e:	e7f6      	b.n	801774e <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef+0x52>

08017760 <_ZN11CANProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
 * @param input data: message to decode
 * @param output index: processed length in the data
 * @param output success: true if message decoded
 * @return the decoded and parsed message based on the custom protocol
 */
MessageHeader CANProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> message, uint16_t* index, bool* success) {
 8017760:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8017764:	461d      	mov	r5, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017766:	2300      	movs	r3, #0
 8017768:	4604      	mov	r4, r0
 801776a:	60c3      	str	r3, [r0, #12]
 801776c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	return *(this->_M_impl._M_start + __n);
 8017770:	682b      	ldr	r3, [r5, #0]
	MessageHeader decoded_message;

	decoded_message.target_address = message[0];
 8017772:	781a      	ldrb	r2, [r3, #0]
      { return __normal_iterator(_M_current + __n); }
 8017774:	1cdf      	adds	r7, r3, #3
 8017776:	7402      	strb	r2, [r0, #16]
	decoded_message.source_address = message[1];
 8017778:	785a      	ldrb	r2, [r3, #1]
 801777a:	7442      	strb	r2, [r0, #17]
 801777c:	789e      	ldrb	r6, [r3, #2]
 801777e:	eb07 0806 	add.w	r8, r7, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017782:	4630      	mov	r0, r6
 8017784:	f7ff fe85 	bl	8017492 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017788:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801778a:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
 801778c:	4641      	mov	r1, r8
 801778e:	9001      	str	r0, [sp, #4]
 8017790:	4638      	mov	r0, r7
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017792:	9603      	str	r6, [sp, #12]
 8017794:	f7e9 fa48 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8017798:	a901      	add	r1, sp, #4
	  this->_M_impl._M_finish =
 801779a:	9002      	str	r0, [sp, #8]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 801779c:	1d20      	adds	r0, r4, #4
 801779e:	f7ff fee8 	bl	8017572 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 80177a2:	a801      	add	r0, sp, #4
 80177a4:	f7e9 f99c 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	uint16_t length = message[2];

	// Retrieve payload based on length byte
	decoded_message.payload = std::vector<uint8_t>(message.begin() + 3, message.begin() + 3 + length);

	*success = true;
 80177a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80177aa:	2201      	movs	r2, #1
	*index = message.size();

	return decoded_message;
}
 80177ac:	4620      	mov	r0, r4
	*success = true;
 80177ae:	701a      	strb	r2, [r3, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80177b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80177b4:	1a9b      	subs	r3, r3, r2
	*index = message.size();
 80177b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80177b8:	8013      	strh	r3, [r2, #0]
}
 80177ba:	b004      	add	sp, #16
 80177bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080177c0 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef>:
std::vector<uint8_t> CANProtocol::CodeProtocol(MessageHeader message, FDCAN_TxHeaderTypeDef* TxHeader) {
 80177c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177c4:	4698      	mov	r8, r3
	TxHeader->Identifier = message.target_address;
 80177c6:	7c13      	ldrb	r3, [r2, #16]
std::vector<uint8_t> CANProtocol::CodeProtocol(MessageHeader message, FDCAN_TxHeaderTypeDef* TxHeader) {
 80177c8:	4617      	mov	r7, r2
 80177ca:	4689      	mov	r9, r1
	TxHeader->Identifier = message.target_address;
 80177cc:	f8c8 3000 	str.w	r3, [r8]
std::vector<uint8_t> CANProtocol::CodeProtocol(MessageHeader message, FDCAN_TxHeaderTypeDef* TxHeader) {
 80177d0:	4604      	mov	r4, r0
	TxHeader->MessageMarker = marker;
 80177d2:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
	if (marker >= 4294967295)
 80177d4:	1c5a      	adds	r2, r3, #1
 80177d6:	f04f 0200 	mov.w	r2, #0
	TxHeader->MessageMarker = marker;
 80177da:	f8c8 3020 	str.w	r3, [r8, #32]
		marker = 0;
 80177de:	bf0c      	ite	eq
 80177e0:	4613      	moveq	r3, r2
		marker++;
 80177e2:	3301      	addne	r3, #1
 80177e4:	644b      	str	r3, [r1, #68]	@ 0x44
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80177e6:	2101      	movs	r1, #1
	: _M_start(), _M_finish(), _M_end_of_storage()
 80177e8:	6082      	str	r2, [r0, #8]
 80177ea:	e9c0 2200 	strd	r2, r2, [r0]
 80177ee:	4a41      	ldr	r2, [pc, #260]	@ (80178f4 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x134>)
 80177f0:	f7e9 f997 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80177f4:	4606      	mov	r6, r0
      pointer __new_start(this->_M_allocate(__len));
 80177f6:	f7ff fe4c 	bl	8017492 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 80177fa:	7c7b      	ldrb	r3, [r7, #17]
 80177fc:	4601      	mov	r1, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80177fe:	4406      	add	r6, r0
      pointer __new_start(this->_M_allocate(__len));
 8017800:	4605      	mov	r5, r0
 8017802:	f801 3b01 	strb.w	r3, [r1], #1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8017806:	42b1      	cmp	r1, r6
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8017808:	60a6      	str	r6, [r4, #8]
      this->_M_impl._M_finish = __new_finish;
 801780a:	e9c4 0100 	strd	r0, r1, [r4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801780e:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
 8017812:	eba3 0302 	sub.w	r3, r3, r2
	coded_message.push_back((uint8_t) message.payload.size());
 8017816:	fa5f fa83 	uxtb.w	sl, r3
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801781a:	d02d      	beq.n	8017878 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0xb8>
	    ++this->_M_impl._M_finish;
 801781c:	3502      	adds	r5, #2
 801781e:	f880 a001 	strb.w	sl, [r0, #1]
 8017822:	6065      	str	r5, [r4, #4]
      : _M_current(__i) { }
 8017824:	e9d7 a301 	ldrd	sl, r3, [r7, #4]
	if (__first != __last)
 8017828:	4553      	cmp	r3, sl
 801782a:	d018      	beq.n	801785e <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x9e>
			  - this->_M_impl._M_finish) >= __n)
 801782c:	68a2      	ldr	r2, [r4, #8]
    { return __lhs.base() - __rhs.base(); }
 801782e:	eba3 050a 	sub.w	r5, r3, sl
      : _M_current(__i) { }
 8017832:	e9d4 7600 	ldrd	r7, r6, [r4]
 8017836:	1b92      	subs	r2, r2, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 8017838:	4295      	cmp	r5, r2
 801783a:	d835      	bhi.n	80178a8 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0xe8>
 801783c:	4619      	mov	r1, r3
 801783e:	4632      	mov	r2, r6
 8017840:	4650      	mov	r0, sl
 8017842:	f7e9 f9f1 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n - __elems_after;
 8017846:	6862      	ldr	r2, [r4, #4]
 8017848:	4631      	mov	r1, r6
 801784a:	4630      	mov	r0, r6
 801784c:	442a      	add	r2, r5
 801784e:	6062      	str	r2, [r4, #4]
 8017850:	f7ea f9f0 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8017854:	4632      	mov	r2, r6
 8017856:	4651      	mov	r1, sl
 8017858:	4650      	mov	r0, sl
 801785a:	f7e9 f9e5 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	TxHeader->DataLength = GetProtocolLength(coded_message.size());
 801785e:	4648      	mov	r0, r9
 8017860:	e9d4 3100 	ldrd	r3, r1, [r4]
 8017864:	1ac9      	subs	r1, r1, r3
 8017866:	b289      	uxth	r1, r1
 8017868:	f7ff fe38 	bl	80174dc <_ZN11CANProtocol17GetProtocolLengthEt>
 801786c:	f8c8 000c 	str.w	r0, [r8, #12]
}
 8017870:	4620      	mov	r0, r4
 8017872:	b003      	add	sp, #12
 8017874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8017878:	4a1e      	ldr	r2, [pc, #120]	@ (80178f4 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x134>)
 801787a:	2101      	movs	r1, #1
 801787c:	4620      	mov	r0, r4
 801787e:	f7e9 f950 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8017882:	4683      	mov	fp, r0
      pointer __new_start(this->_M_allocate(__len));
 8017884:	f7ff fe05 	bl	8017492 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8017888:	782b      	ldrb	r3, [r5, #0]
		    this->_M_impl._M_end_of_storage - __old_start);
 801788a:	68a1      	ldr	r1, [r4, #8]
      pointer __new_start(this->_M_allocate(__len));
 801788c:	4606      	mov	r6, r0
 801788e:	7003      	strb	r3, [r0, #0]
 8017890:	f880 a001 	strb.w	sl, [r0, #1]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8017894:	1b49      	subs	r1, r1, r5
 8017896:	4628      	mov	r0, r5
 8017898:	f006 fb92 	bl	801dfc0 <_ZdlPvj>
	      ++__new_finish;
 801789c:	1cb3      	adds	r3, r6, #2
      this->_M_impl._M_start = __new_start;
 801789e:	6026      	str	r6, [r4, #0]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80178a0:	445e      	add	r6, fp
      this->_M_impl._M_finish = __new_finish;
 80178a2:	6063      	str	r3, [r4, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80178a4:	60a6      	str	r6, [r4, #8]
 80178a6:	e7bd      	b.n	8017824 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x64>
		  _M_check_len(__n, "vector::_M_range_insert");
 80178a8:	4629      	mov	r1, r5
 80178aa:	4a13      	ldr	r2, [pc, #76]	@ (80178f8 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x138>)
 80178ac:	4620      	mov	r0, r4
 80178ae:	9301      	str	r3, [sp, #4]
 80178b0:	f7e9 f937 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80178b4:	4683      	mov	fp, r0
		pointer __new_start(this->_M_allocate(__len));
 80178b6:	f7ff fdec 	bl	8017492 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 80178ba:	4631      	mov	r1, r6
 80178bc:	4602      	mov	r2, r0
 80178be:	4605      	mov	r5, r0
 80178c0:	4638      	mov	r0, r7
 80178c2:	f7ea f9b7 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80178c6:	9b01      	ldr	r3, [sp, #4]
 80178c8:	4602      	mov	r2, r0
 80178ca:	4650      	mov	r0, sl
 80178cc:	4619      	mov	r1, r3
 80178ce:	f7e9 f9ab 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80178d2:	4631      	mov	r1, r6
 80178d4:	4602      	mov	r2, r0
 80178d6:	4630      	mov	r0, r6
 80178d8:	f7ea f9ac 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80178dc:	4606      	mov	r6, r0
	if (__p)
 80178de:	b127      	cbz	r7, 80178ea <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x12a>
			      this->_M_impl._M_end_of_storage - __old_start);
 80178e0:	68a1      	ldr	r1, [r4, #8]
 80178e2:	4638      	mov	r0, r7
 80178e4:	1bc9      	subs	r1, r1, r7
 80178e6:	f006 fb6b 	bl	801dfc0 <_ZdlPvj>
		this->_M_impl._M_finish = __new_finish;
 80178ea:	e9c4 5600 	strd	r5, r6, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 80178ee:	445d      	add	r5, fp
 80178f0:	60a5      	str	r5, [r4, #8]
 80178f2:	e7b4      	b.n	801785e <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x9e>
 80178f4:	0801f20c 	.word	0x0801f20c
 80178f8:	0801f257 	.word	0x0801f257

080178fc <_ZN11CANProtocol4SendE13MessageHeader>:
HAL_StatusTypeDef CANProtocol::Send(MessageHeader message) {
 80178fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017900:	b093      	sub	sp, #76	@ 0x4c
 8017902:	460e      	mov	r6, r1
	FDCAN_HandleTypeDef* interface_ = GetInterface(message.interface, &success);
 8017904:	7809      	ldrb	r1, [r1, #0]
HAL_StatusTypeDef CANProtocol::Send(MessageHeader message) {
 8017906:	4680      	mov	r8, r0
	FDCAN_HandleTypeDef* interface_ = GetInterface(message.interface, &success);
 8017908:	f10d 0203 	add.w	r2, sp, #3
 801790c:	f7ff fe48 	bl	80175a0 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (!success) return HAL_ERROR;
 8017910:	f89d 3003 	ldrb.w	r3, [sp, #3]
	FDCAN_HandleTypeDef* interface_ = GetInterface(message.interface, &success);
 8017914:	4681      	mov	r9, r0
	if (!success) return HAL_ERROR;
 8017916:	b91b      	cbnz	r3, 8017920 <_ZN11CANProtocol4SendE13MessageHeader+0x24>
 8017918:	2001      	movs	r0, #1
}
 801791a:	b013      	add	sp, #76	@ 0x4c
 801791c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (interface_->State != HAL_FDCAN_STATE_BUSY) return HAL_ERROR;
 8017920:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8017924:	2b02      	cmp	r3, #2
 8017926:	d1f7      	bne.n	8017918 <_ZN11CANProtocol4SendE13MessageHeader+0x1c>
	uint8_t index = GetInterfaceIndex(message.interface, &success);
 8017928:	f10d 0203 	add.w	r2, sp, #3
 801792c:	7831      	ldrb	r1, [r6, #0]
 801792e:	4640      	mov	r0, r8
	FDCAN_TxHeaderTypeDef TxHeader = FDCANTxHeaders[index];
 8017930:	ad09      	add	r5, sp, #36	@ 0x24
	uint8_t index = GetInterfaceIndex(message.interface, &success);
 8017932:	f7ff fc01 	bl	8017138 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	FDCAN_TxHeaderTypeDef TxHeader = FDCANTxHeaders[index];
 8017936:	f8d8 4048 	ldr.w	r4, [r8, #72]	@ 0x48
	return *(this->_M_impl._M_start + __n);
 801793a:	b207      	sxth	r7, r0
 801793c:	eb07 03c7 	add.w	r3, r7, r7, lsl #3
 8017940:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017944:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8017948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801794a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801794c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801794e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017950:	6823      	ldr	r3, [r4, #0]
 8017952:	602b      	str	r3, [r5, #0]
 8017954:	00bd      	lsls	r5, r7, #2
 8017956:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801795a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801795e:	7833      	ldrb	r3, [r6, #0]
 8017960:	f88d 3010 	strb.w	r3, [sp, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017968:	1ae4      	subs	r4, r4, r3
	this->_M_impl._M_start = this->_M_allocate(__n);
 801796a:	4620      	mov	r0, r4
 801796c:	f7ff fd91 	bl	8017492 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017970:	4404      	add	r4, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8017972:	4602      	mov	r2, r0
 8017974:	9005      	str	r0, [sp, #20]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017976:	9407      	str	r4, [sp, #28]
 8017978:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
 801797c:	f7e9 f954 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8017980:	8a33      	ldrh	r3, [r6, #16]
	buffers_to_transfer[index] = CodeProtocol(message, &TxHeader);
 8017982:	aa04      	add	r2, sp, #16
 8017984:	4641      	mov	r1, r8
	this->_M_impl._M_finish =
 8017986:	9006      	str	r0, [sp, #24]
 8017988:	a801      	add	r0, sp, #4
 801798a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801798e:	ab09      	add	r3, sp, #36	@ 0x24
 8017990:	f7ff ff16 	bl	80177c0 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8017994:	a901      	add	r1, sp, #4
 8017996:	4638      	mov	r0, r7
 8017998:	f7ff fdeb 	bl	8017572 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 801799c:	a801      	add	r0, sp, #4
 801799e:	f7e9 f89f 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80179a2:	a805      	add	r0, sp, #20
 80179a4:	f7e9 f89c 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *(this->_M_impl._M_start + __n);
 80179a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80179ac:	1959      	adds	r1, r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80179ae:	595a      	ldr	r2, [r3, r5]
 80179b0:	684b      	ldr	r3, [r1, #4]
 80179b2:	1a9b      	subs	r3, r3, r2
	if (buffers_to_transfer[index].size() > 64) return HAL_ERROR;
 80179b4:	2b40      	cmp	r3, #64	@ 0x40
 80179b6:	d8af      	bhi.n	8017918 <_ZN11CANProtocol4SendE13MessageHeader+0x1c>
	return HAL_FDCAN_AddMessageToTxFifoQ(interface_, &TxHeader, &(buffers_to_transfer[index])[0]);
 80179b8:	a909      	add	r1, sp, #36	@ 0x24
 80179ba:	4648      	mov	r0, r9
 80179bc:	f7ee fc47 	bl	800624e <HAL_FDCAN_AddMessageToTxFifoQ>
 80179c0:	e7ab      	b.n	801791a <_ZN11CANProtocol4SendE13MessageHeader+0x1e>

080179c2 <_ZN12UARTProtocol17ActivateReceptionEh>:
 * @brief OVERRIDE Activate reception of the associated hardware interface
 *
 * @param input ID: interface ID
 * @return the interface access status
 */
HAL_StatusTypeDef UARTProtocol::ActivateReception(uint8_t ID) {
 80179c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t index = GetInterfaceIndex(ID, success);
 80179c4:	f10d 0207 	add.w	r2, sp, #7
 80179c8:	4604      	mov	r4, r0
 80179ca:	460d      	mov	r5, r1
 80179cc:	f7ff fbb4 	bl	8017138 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	if (*success) {
 80179d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80179d4:	b1d3      	cbz	r3, 8017a0c <_ZN12UARTProtocol17ActivateReceptionEh+0x4a>
	return *(this->_M_impl._M_start + __n);
 80179d6:	b203      	sxth	r3, r0
		return interfaces[index];
 80179d8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
	bool success;
	UART_HandleTypeDef* handle = GetInterface(ID, &success);
	if (not success) return HAL_ERROR;
	std::vector<uint8_t>* buffer = GetBuffer(ID, &success);
 80179da:	4620      	mov	r0, r4
 80179dc:	4629      	mov	r1, r5
 80179de:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80179e2:	f10d 0207 	add.w	r2, sp, #7
 80179e6:	f7ff fbd3 	bl	8017190 <_ZN21CommunicationProtocol9GetBufferEhPb>
	if (not success) return HAL_ERROR;
 80179ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
	std::vector<uint8_t>* buffer = GetBuffer(ID, &success);
 80179ee:	4604      	mov	r4, r0
	if (not success) return HAL_ERROR;
 80179f0:	b163      	cbz	r3, 8017a0c <_ZN12UARTProtocol17ActivateReceptionEh+0x4a>

	HAL_StatusTypeDef status;
	status = UART_CheckIdleState(handle); // to reset UART RxState
 80179f2:	4630      	mov	r0, r6
 80179f4:	f7f4 ff6b 	bl	800c8ce <UART_CheckIdleState>
	do {
		status = HAL_UARTEx_ReceiveToIdle_DMA(handle, buffer->data(), BUFFER_SIZE);
 80179f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80179fc:	6821      	ldr	r1, [r4, #0]
 80179fe:	4630      	mov	r0, r6
 8017a00:	f7f5 f902 	bl	800cc08 <HAL_UARTEx_ReceiveToIdle_DMA>
	} while (status == HAL_BUSY);
 8017a04:	2802      	cmp	r0, #2
 8017a06:	d0f7      	beq.n	80179f8 <_ZN12UARTProtocol17ActivateReceptionEh+0x36>
	return status;
}
 8017a08:	b002      	add	sp, #8
 8017a0a:	bd70      	pop	{r4, r5, r6, pc}
	if (not success) return HAL_ERROR;
 8017a0c:	2001      	movs	r0, #1
 8017a0e:	e7fb      	b.n	8017a08 <_ZN12UARTProtocol17ActivateReceptionEh+0x46>

08017a10 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017a10:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8017a12:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017a14:	d006      	beq.n	8017a24 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8017a16:	da01      	bge.n	8017a1c <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 8017a18:	f006 fba6 	bl	801e168 <_ZSt17__throw_bad_allocv>
      }
 8017a1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8017a20:	f006 baf3 	b.w	801e00a <_Znwj>
 8017a24:	bd08      	pop	{r3, pc}

08017a26 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb>:
 * @param input pattern: patter to detect
 * @param input start_index: the detection of the pattern starts at this index
 * @param output success: whether successful
 * @return the base index of the first iteration of the detected pattern in message
 */
uint16_t UARTProtocol::DetectPattern(std::vector<uint8_t> message, std::vector<uint8_t> pattern, uint16_t start_index, bool* success) {
 8017a26:	b5f0      	push	{r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017a28:	e9d1 5000 	ldrd	r5, r0, [r1]
	uint8_t counter = 0;
 8017a2c:	2100      	movs	r1, #0
 8017a2e:	1b40      	subs	r0, r0, r5
	for (uint16_t index = start_index; index < message.size(); index++) {
 8017a30:	4283      	cmp	r3, r0
 8017a32:	d302      	bcc.n	8017a3a <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x14>
 8017a34:	2300      	movs	r3, #0
			*success = true;
			return index - counter + 1;
		}
	}
	*success = false;
	return 0;
 8017a36:	4618      	mov	r0, r3
 8017a38:	e00e      	b.n	8017a58 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x32>
	return *(this->_M_impl._M_start + __n);
 8017a3a:	6816      	ldr	r6, [r2, #0]
		if (message[index] != pattern[counter]) {
 8017a3c:	5cef      	ldrb	r7, [r5, r3]
 8017a3e:	3301      	adds	r3, #1
 8017a40:	5c74      	ldrb	r4, [r6, r1]
 8017a42:	42a7      	cmp	r7, r4
 8017a44:	d10b      	bne.n	8017a5e <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x38>
		counter++;
 8017a46:	3101      	adds	r1, #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017a48:	6854      	ldr	r4, [r2, #4]
 8017a4a:	b2c9      	uxtb	r1, r1
 8017a4c:	1ba4      	subs	r4, r4, r6
		if (counter >= pattern.size()) {
 8017a4e:	42a1      	cmp	r1, r4
 8017a50:	d306      	bcc.n	8017a60 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x3a>
			return index - counter + 1;
 8017a52:	1a5b      	subs	r3, r3, r1
 8017a54:	b298      	uxth	r0, r3
 8017a56:	2301      	movs	r3, #1
			*success = true;
 8017a58:	9a05      	ldr	r2, [sp, #20]
 8017a5a:	7013      	strb	r3, [r2, #0]
}
 8017a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			counter = 0;
 8017a5e:	2100      	movs	r1, #0
	for (uint16_t index = start_index; index < message.size(); index++) {
 8017a60:	b29b      	uxth	r3, r3
 8017a62:	e7e5      	b.n	8017a30 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0xa>

08017a64 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_>:
 * @param input start_index: the detection of the pattern starts at this index
 * @param input message: message used to find the pattern
 * @param input pattern: patter to detect
 * @param output success: true if pattern detected
 */
bool UARTProtocol::PatternPresentAt(uint16_t start_index, std::vector<uint8_t> message, std::vector<uint8_t> pattern) {
 8017a64:	b570      	push	{r4, r5, r6, lr}
    uint16_t index = start_index;
    for (uint8_t byte : pattern) {
 8017a66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8017a6a:	1ac9      	subs	r1, r1, r3
 8017a6c:	18c8      	adds	r0, r1, r3
 8017a6e:	42a3      	cmp	r3, r4
 8017a70:	b280      	uxth	r0, r0
 8017a72:	d101      	bne.n	8017a78 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x14>
        if (byte != message[index])
            return false;
        index++;
    }
    return true;
 8017a74:	2001      	movs	r0, #1
}
 8017a76:	bd70      	pop	{r4, r5, r6, pc}
        if (byte != message[index])
 8017a78:	6816      	ldr	r6, [r2, #0]
    for (uint8_t byte : pattern) {
 8017a7a:	f813 5b01 	ldrb.w	r5, [r3], #1
        if (byte != message[index])
 8017a7e:	5c30      	ldrb	r0, [r6, r0]
 8017a80:	42a8      	cmp	r0, r5
 8017a82:	d0f3      	beq.n	8017a6c <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x8>
            return false;
 8017a84:	2000      	movs	r0, #0
 8017a86:	e7f6      	b.n	8017a76 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x12>

08017a88 <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE>:
 8017a88:	e9d1 3200 	ldrd	r3, r2, [r1]
 *
 * @param input message: vector of bytes to derive the checksum
 * @return the 1-byte checksum
 */
uint8_t UARTProtocol::GetChecksum(std::vector<uint8_t> message) {
	uint8_t checksum = 0;
 8017a8c:	2000      	movs	r0, #0
	for (uint8_t byte : message)
 8017a8e:	429a      	cmp	r2, r3
 8017a90:	d102      	bne.n	8017a98 <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE+0x10>
		checksum += byte;
	checksum = ~checksum + 1;
 8017a92:	4240      	negs	r0, r0
	return checksum;
}
 8017a94:	b2c0      	uxtb	r0, r0
 8017a96:	4770      	bx	lr
		checksum += byte;
 8017a98:	f813 1b01 	ldrb.w	r1, [r3], #1
 8017a9c:	4408      	add	r0, r1
 8017a9e:	b2c0      	uxtb	r0, r0
	return *this;
 8017aa0:	e7f5      	b.n	8017a8e <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE+0x6>

08017aa2 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE>:
 8017aa2:	e9d3 0300 	ldrd	r0, r3, [r3]
 * @param input start_index: index (included) from which the checksum check is started
 * @param input end_index: index (excluded) from which the checksum check is finished
 * @param input message: byte vector message
 * @return true if the checksum is valid
 */
bool UARTProtocol::Checksum(uint16_t start_index, uint16_t end_index, std::vector<uint8_t> message) {
 8017aa6:	b510      	push	{r4, lr}
 8017aa8:	1a1b      	subs	r3, r3, r0
	uint8_t sum = 0;
	if (start_index > message.size()) return false;
 8017aaa:	4299      	cmp	r1, r3
 8017aac:	d812      	bhi.n	8017ad4 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x32>
	if (end_index > message.size()) return false;
 8017aae:	429a      	cmp	r2, r3
 8017ab0:	d810      	bhi.n	8017ad4 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x32>
	if (start_index > end_index) return false;
 8017ab2:	4291      	cmp	r1, r2
 8017ab4:	d80e      	bhi.n	8017ad4 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x32>
 8017ab6:	1843      	adds	r3, r0, r1
	uint8_t sum = 0;
 8017ab8:	2000      	movs	r0, #0
	for (uint16_t index = start_index; index < end_index; index++) {
 8017aba:	4291      	cmp	r1, r2
 8017abc:	d103      	bne.n	8017ac6 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x24>
		sum += message[index];
	}
	return (sum == 0);
 8017abe:	fab0 f080 	clz	r0, r0
 8017ac2:	0940      	lsrs	r0, r0, #5
}
 8017ac4:	bd10      	pop	{r4, pc}
		sum += message[index];
 8017ac6:	f813 4b01 	ldrb.w	r4, [r3], #1
	for (uint16_t index = start_index; index < end_index; index++) {
 8017aca:	3101      	adds	r1, #1
		sum += message[index];
 8017acc:	4420      	add	r0, r4
	for (uint16_t index = start_index; index < end_index; index++) {
 8017ace:	b289      	uxth	r1, r1
		sum += message[index];
 8017ad0:	b2c0      	uxtb	r0, r0
	for (uint16_t index = start_index; index < end_index; index++) {
 8017ad2:	e7f2      	b.n	8017aba <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x18>
	if (start_index > message.size()) return false;
 8017ad4:	2000      	movs	r0, #0
 8017ad6:	e7f5      	b.n	8017ac4 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x22>

08017ad8 <_ZN12UARTProtocol7IsRS485Eh>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8017ad8:	e9d0 3217 	ldrd	r3, r2, [r0, #92]	@ 0x5c
 *
 * @param input ID: interface ID
 * @return true if interface is RS485
 */
bool UARTProtocol::IsRS485(uint8_t ID) {
	for (uint8_t &RS485_interface : RS485_interfaces) {
 8017adc:	4293      	cmp	r3, r2
 8017ade:	d101      	bne.n	8017ae4 <_ZN12UARTProtocol7IsRS485Eh+0xc>
		if (RS485_interface == ID) return true;
	}
	return false;
 8017ae0:	2000      	movs	r0, #0
 8017ae2:	4770      	bx	lr
		if (RS485_interface == ID) return true;
 8017ae4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017ae8:	4288      	cmp	r0, r1
 8017aea:	d1f7      	bne.n	8017adc <_ZN12UARTProtocol7IsRS485Eh+0x4>
 8017aec:	2001      	movs	r0, #1
}
 8017aee:	4770      	bx	lr

08017af0 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8017af0:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8017af2:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8017af4:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8017af6:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8017af8:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8017afc:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8017afe:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8017b00:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8017b02:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8017b04:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8017b06:	688d      	ldr	r5, [r1, #8]
 8017b08:	6085      	str	r5, [r0, #8]
      }
 8017b0a:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8017b0c:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8017b0e:	e9c1 3300 	strd	r3, r3, [r1]
 8017b12:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8017b16:	f7e8 ffe3 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      }
 8017b1a:	b005      	add	sp, #20
 8017b1c:	bd30      	pop	{r4, r5, pc}
	...

08017b20 <_ZNSt6vectorIhSaIhEE9push_backERKh>:
      push_back(const value_type& __x)
 8017b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8017b24:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 8017b28:	4605      	mov	r5, r0
 8017b2a:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8017b2c:	429c      	cmp	r4, r3
 8017b2e:	d006      	beq.n	8017b3e <_ZNSt6vectorIhSaIhEE9push_backERKh+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017b30:	780b      	ldrb	r3, [r1, #0]
 8017b32:	7023      	strb	r3, [r4, #0]
	    ++this->_M_impl._M_finish;
 8017b34:	6843      	ldr	r3, [r0, #4]
 8017b36:	3301      	adds	r3, #1
 8017b38:	6043      	str	r3, [r0, #4]
      }
 8017b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8017b3e:	4a10      	ldr	r2, [pc, #64]	@ (8017b80 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x60>)
 8017b40:	2101      	movs	r1, #1
 8017b42:	f7e8 ffee 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 8017b46:	682f      	ldr	r7, [r5, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8017b48:	4680      	mov	r8, r0
      pointer __new_start(this->_M_allocate(__len));
 8017b4a:	f7ff ff61 	bl	8017a10 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
    { return __lhs.base() - __rhs.base(); }
 8017b4e:	1be4      	subs	r4, r4, r7
 8017b50:	f899 3000 	ldrb.w	r3, [r9]
 8017b54:	4606      	mov	r6, r0
      if (__count > 0)
 8017b56:	2c00      	cmp	r4, #0
 8017b58:	5503      	strb	r3, [r0, r4]
 8017b5a:	dd03      	ble.n	8017b64 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x44>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8017b5c:	4622      	mov	r2, r4
 8017b5e:	4639      	mov	r1, r7
 8017b60:	f007 f9d0 	bl	801ef04 <memmove>
	      ++__new_finish;
 8017b64:	3401      	adds	r4, #1
 8017b66:	4434      	add	r4, r6
	if (__p)
 8017b68:	b127      	cbz	r7, 8017b74 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x54>
		    this->_M_impl._M_end_of_storage - __old_start);
 8017b6a:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8017b6c:	4638      	mov	r0, r7
 8017b6e:	1bc9      	subs	r1, r1, r7
 8017b70:	f006 fa26 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8017b74:	e9c5 6400 	strd	r6, r4, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8017b78:	4446      	add	r6, r8
 8017b7a:	60ae      	str	r6, [r5, #8]
      }
 8017b7c:	e7dd      	b.n	8017b3a <_ZNSt6vectorIhSaIhEE9push_backERKh+0x1a>
 8017b7e:	bf00      	nop
 8017b80:	0801f20c 	.word	0x0801f20c

08017b84 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
MessageHeader UARTProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> message, uint16_t* index, bool* success) {
 8017b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b88:	460c      	mov	r4, r1
 8017b8a:	469a      	mov	sl, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	b08d      	sub	sp, #52	@ 0x34
	if (IsRS485(ID)) RS485_offset = 1;
 8017b90:	4611      	mov	r1, r2
MessageHeader UARTProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> message, uint16_t* index, bool* success) {
 8017b92:	4605      	mov	r5, r0
 8017b94:	60c3      	str	r3, [r0, #12]
 8017b96:	4616      	mov	r6, r2
 8017b98:	e9c0 3301 	strd	r3, r3, [r0, #4]
	if (IsRS485(ID)) RS485_offset = 1;
 8017b9c:	4620      	mov	r0, r4
 8017b9e:	f7ff ff9b 	bl	8017ad8 <_ZN12UARTProtocol7IsRS485Eh>
	uint16_t start_index = DetectPattern(message, protocol_start, *index, success);
 8017ba2:	4651      	mov	r1, sl
	if (IsRS485(ID)) RS485_offset = 1;
 8017ba4:	4607      	mov	r7, r0
	uint16_t start_index = DetectPattern(message, protocol_start, *index, success);
 8017ba6:	a806      	add	r0, sp, #24
 8017ba8:	f7e9 f84a 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8017bac:	f104 0144 	add.w	r1, r4, #68	@ 0x44
 8017bb0:	a809      	add	r0, sp, #36	@ 0x24
 8017bb2:	f7e9 f845 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8017bb6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017bb8:	aa09      	add	r2, sp, #36	@ 0x24
 8017bba:	a906      	add	r1, sp, #24
 8017bbc:	9300      	str	r3, [sp, #0]
 8017bbe:	4620      	mov	r0, r4
 8017bc0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017bc2:	881b      	ldrh	r3, [r3, #0]
 8017bc4:	f7ff ff2f 	bl	8017a26 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb>
 8017bc8:	4680      	mov	r8, r0
      }
 8017bca:	a809      	add	r0, sp, #36	@ 0x24
 8017bcc:	f7e8 ff88 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017bd0:	a806      	add	r0, sp, #24
 8017bd2:	f7e8 ff85 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (*success) {
 8017bd6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017bd8:	781b      	ldrb	r3, [r3, #0]
 8017bda:	b193      	cbz	r3, 8017c02 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x7e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017bdc:	e9da 3200 	ldrd	r3, r2, [sl]
 8017be0:	1ad2      	subs	r2, r2, r3
 8017be2:	9203      	str	r2, [sp, #12]
 8017be4:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	@ 0x44
 8017be8:	1a52      	subs	r2, r2, r1
		if (message.size() <= start_index + protocol_start.size() + 1 + RS485_offset) {*success = false; return decoded_message;} // Error - discard message
 8017bea:	9903      	ldr	r1, [sp, #12]
 8017bec:	eb02 0b08 	add.w	fp, r2, r8
 8017bf0:	eb0b 0907 	add.w	r9, fp, r7
 8017bf4:	f109 0201 	add.w	r2, r9, #1
 8017bf8:	428a      	cmp	r2, r1
 8017bfa:	d306      	bcc.n	8017c0a <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x86>
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8017c00:	7013      	strb	r3, [r2, #0]
}
 8017c02:	4628      	mov	r0, r5
 8017c04:	b00d      	add	sp, #52	@ 0x34
 8017c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (IsRS485(ID))
 8017c0a:	4631      	mov	r1, r6
 8017c0c:	4620      	mov	r0, r4
 8017c0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017c12:	f7ff ff61 	bl	8017ad8 <_ZN12UARTProtocol7IsRS485Eh>
 8017c16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017c1a:	2800      	cmp	r0, #0
 8017c1c:	d079      	beq.n	8017d12 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x18e>
			decoded_message.target_address = message[start_index + protocol_start.size()];
 8017c1e:	f813 100b 	ldrb.w	r1, [r3, fp]
 8017c22:	7429      	strb	r1, [r5, #16]
		decoded_message.source_address = message[start_index + protocol_start.size() + RS485_offset];
 8017c24:	f813 1009 	ldrb.w	r1, [r3, r9]
 8017c28:	7469      	strb	r1, [r5, #17]
		uint16_t length = message[start_index + protocol_start.size() + 1 + RS485_offset];
 8017c2a:	5c9e      	ldrb	r6, [r3, r2]
 8017c2c:	e9d4 1214 	ldrd	r1, r2, [r4, #80]	@ 0x50
 8017c30:	1a52      	subs	r2, r2, r1
		if (message.size() <= start_index + protocol_start.size() + length + 2 + RS485_offset + protocol_end.size()) {*success = false; return decoded_message;} // Error - discard message
 8017c32:	9903      	ldr	r1, [sp, #12]
 8017c34:	3202      	adds	r2, #2
 8017c36:	443a      	add	r2, r7
 8017c38:	445a      	add	r2, fp
 8017c3a:	4432      	add	r2, r6
 8017c3c:	428a      	cmp	r2, r1
 8017c3e:	d2dd      	bcs.n	8017bfc <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x78>
      { return __normal_iterator(_M_current + __n); }
 8017c40:	f109 0902 	add.w	r9, r9, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017c44:	4630      	mov	r0, r6
 8017c46:	4499      	add	r9, r3
 8017c48:	f7ff fee2 	bl	8017a10 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017c4c:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017c4e:	4602      	mov	r2, r0
 8017c50:	eb09 0b06 	add.w	fp, r9, r6
 8017c54:	9009      	str	r0, [sp, #36]	@ 0x24
 8017c56:	4648      	mov	r0, r9
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017c58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017c5a:	4659      	mov	r1, fp
 8017c5c:	f7e8 ffe4 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		decoded_message.payload = std::vector<uint8_t>(message.begin() + start_index + protocol_start.size() + 2 + RS485_offset, message.begin() + start_index + protocol_start.size() + 2 + RS485_offset + length);
 8017c60:	a909      	add	r1, sp, #36	@ 0x24
	  this->_M_impl._M_finish =
 8017c62:	900a      	str	r0, [sp, #40]	@ 0x28
 8017c64:	1d28      	adds	r0, r5, #4
 8017c66:	f7ff ff43 	bl	8017af0 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8017c6a:	a809      	add	r0, sp, #36	@ 0x24
 8017c6c:	f7e8 ff38 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (!Checksum(start_index, start_index + protocol_start.size() + length + 3 + RS485_offset, message)) {*success = false; return decoded_message;} // Checksum Error - discard message
 8017c70:	4651      	mov	r1, sl
 8017c72:	a809      	add	r0, sp, #36	@ 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017c74:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 8017c78:	eba3 0902 	sub.w	r9, r3, r2
 8017c7c:	f7e8 ffe0 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8017c80:	ab09      	add	r3, sp, #36	@ 0x24
 8017c82:	4641      	mov	r1, r8
 8017c84:	f109 0903 	add.w	r9, r9, #3
 8017c88:	4620      	mov	r0, r4
 8017c8a:	44c1      	add	r9, r8
 8017c8c:	44b9      	add	r9, r7
 8017c8e:	44b1      	add	r9, r6
 8017c90:	fa1f f989 	uxth.w	r9, r9
 8017c94:	464a      	mov	r2, r9
 8017c96:	f7ff ff04 	bl	8017aa2 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE>
 8017c9a:	4681      	mov	r9, r0
      }
 8017c9c:	a809      	add	r0, sp, #36	@ 0x24
 8017c9e:	f7e8 ff1f 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017ca2:	f1b9 0f00 	cmp.w	r9, #0
 8017ca6:	d0a9      	beq.n	8017bfc <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x78>
		if (!PatternPresentAt(start_index + protocol_start.size() + length + 3 + RS485_offset, message, protocol_end)) {*success = false; return decoded_message;} // Checksum Error - discard message
 8017ca8:	4651      	mov	r1, sl
 8017caa:	a806      	add	r0, sp, #24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017cac:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 8017cb0:	eba3 0902 	sub.w	r9, r3, r2
 8017cb4:	f7e8 ffc4 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8017cb8:	f104 0150 	add.w	r1, r4, #80	@ 0x50
 8017cbc:	a809      	add	r0, sp, #36	@ 0x24
 8017cbe:	f109 0903 	add.w	r9, r9, #3
 8017cc2:	f7e8 ffbd 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8017cc6:	ab09      	add	r3, sp, #36	@ 0x24
 8017cc8:	aa06      	add	r2, sp, #24
 8017cca:	44c1      	add	r9, r8
 8017ccc:	4620      	mov	r0, r4
 8017cce:	44b9      	add	r9, r7
 8017cd0:	44b1      	add	r9, r6
 8017cd2:	fa1f f989 	uxth.w	r9, r9
 8017cd6:	4649      	mov	r1, r9
 8017cd8:	f7ff fec4 	bl	8017a64 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_>
 8017cdc:	4681      	mov	r9, r0
      }
 8017cde:	a809      	add	r0, sp, #36	@ 0x24
 8017ce0:	f7e8 fefe 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017ce4:	a806      	add	r0, sp, #24
 8017ce6:	f7e8 fefb 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017cea:	f1b9 0f00 	cmp.w	r9, #0
 8017cee:	d085      	beq.n	8017bfc <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x78>
		*success = true;
 8017cf0:	2301      	movs	r3, #1
 8017cf2:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8017cf4:	7013      	strb	r3, [r2, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017cf6:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 8017cfa:	1a9b      	subs	r3, r3, r2
 8017cfc:	e9d4 1214 	ldrd	r1, r2, [r4, #80]	@ 0x50
 8017d00:	1a52      	subs	r2, r2, r1
		*index = start_index + protocol_start.size() + length + 3 + RS485_offset + protocol_end.size();
 8017d02:	4413      	add	r3, r2
 8017d04:	3303      	adds	r3, #3
 8017d06:	4498      	add	r8, r3
 8017d08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017d0a:	4447      	add	r7, r8
 8017d0c:	443e      	add	r6, r7
 8017d0e:	801e      	strh	r6, [r3, #0]
 8017d10:	e777      	b.n	8017c02 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x7e>
			decoded_message.target_address = ALL;
 8017d12:	21ff      	movs	r1, #255	@ 0xff
 8017d14:	e785      	b.n	8017c22 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x9e>
	...

08017d18 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8017d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8017d1a:	1a57      	subs	r7, r2, r1
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8017d1c:	4604      	mov	r4, r0
 8017d1e:	460d      	mov	r5, r1
 8017d20:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8017d22:	d502      	bpl.n	8017d2a <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0+0x12>
	  __throw_length_error(
 8017d24:	4807      	ldr	r0, [pc, #28]	@ (8017d44 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0+0x2c>)
 8017d26:	f006 fa25 	bl	801e174 <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017d2a:	4638      	mov	r0, r7
 8017d2c:	f7ff fe70 	bl	8017a10 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017d30:	4407      	add	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8017d32:	4602      	mov	r2, r0
 8017d34:	6020      	str	r0, [r4, #0]
 8017d36:	4631      	mov	r1, r6
 8017d38:	4628      	mov	r0, r5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017d3a:	60a7      	str	r7, [r4, #8]
 8017d3c:	f7e8 ff74 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8017d40:	6060      	str	r0, [r4, #4]
	}
 8017d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d44:	0801f226 	.word	0x0801f226

08017d48 <_ZN12UARTProtocolC1Ev>:
UARTProtocol::UARTProtocol() {
 8017d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017d4a:	4b17      	ldr	r3, [pc, #92]	@ (8017da8 <_ZN12UARTProtocolC1Ev+0x60>)
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017d4c:	2500      	movs	r5, #0
	_M_range_initialize(__l.begin(), __l.end(),
 8017d4e:	4a17      	ldr	r2, [pc, #92]	@ (8017dac <_ZN12UARTProtocolC1Ev+0x64>)
 8017d50:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017d52:	6405      	str	r5, [r0, #64]	@ 0x40
 8017d54:	6003      	str	r3, [r0, #0]
	_M_range_initialize(__l.begin(), __l.end(),
 8017d56:	1e91      	subs	r1, r2, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017d58:	64c5      	str	r5, [r0, #76]	@ 0x4c
 8017d5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017d5e:	e9c0 5503 	strd	r5, r5, [r0, #12]
 8017d62:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8017d66:	e9c0 5508 	strd	r5, r5, [r0, #32]
 8017d6a:	e9c0 550a 	strd	r5, r5, [r0, #40]	@ 0x28
 8017d6e:	e9c0 550c 	strd	r5, r5, [r0, #48]	@ 0x30
 8017d72:	e9c0 550e 	strd	r5, r5, [r0, #56]	@ 0x38
 8017d76:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
	_M_range_initialize(__l.begin(), __l.end(),
 8017d7a:	3044      	adds	r0, #68	@ 0x44
 8017d7c:	f7ff ffcc 	bl	8017d18 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>
 8017d80:	23ff      	movs	r3, #255	@ 0xff
 8017d82:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8017d86:	f10d 0205 	add.w	r2, sp, #5
 8017d8a:	a901      	add	r1, sp, #4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017d8c:	65a5      	str	r5, [r4, #88]	@ 0x58
 8017d8e:	f88d 3004 	strb.w	r3, [sp, #4]
 8017d92:	e9c4 5514 	strd	r5, r5, [r4, #80]	@ 0x50
	_M_range_initialize(__l.begin(), __l.end(),
 8017d96:	f7ff ffbf 	bl	8017d18 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>
}
 8017d9a:	4620      	mov	r0, r4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017d9c:	6665      	str	r5, [r4, #100]	@ 0x64
 8017d9e:	e9c4 5517 	strd	r5, r5, [r4, #92]	@ 0x5c
 8017da2:	b003      	add	sp, #12
 8017da4:	bd30      	pop	{r4, r5, pc}
 8017da6:	bf00      	nop
 8017da8:	0801f548 	.word	0x0801f548
 8017dac:	0801f522 	.word	0x0801f522

08017db0 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>:
	if (__first != __last)
 8017db0:	429a      	cmp	r2, r3
	insert(const_iterator __position, _InputIterator __first,
 8017db2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017db6:	4604      	mov	r4, r0
 8017db8:	460d      	mov	r5, r1
 8017dba:	4617      	mov	r7, r2
 8017dbc:	4699      	mov	r9, r3
 8017dbe:	d022      	beq.n	8017e06 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x56>
    { return __lhs.base() - __rhs.base(); }
 8017dc0:	eba3 0802 	sub.w	r8, r3, r2
      : _M_current(__i) { }
 8017dc4:	f8d0 a000 	ldr.w	sl, [r0]
			  - this->_M_impl._M_finish) >= __n)
 8017dc8:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
 8017dcc:	1b9b      	subs	r3, r3, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 8017dce:	4598      	cmp	r8, r3
 8017dd0:	d831      	bhi.n	8017e36 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x86>
    { return __lhs.base() - __rhs.base(); }
 8017dd2:	eba6 0a01 	sub.w	sl, r6, r1
		if (__elems_after > __n)
 8017dd6:	45d0      	cmp	r8, sl
 8017dd8:	d217      	bcs.n	8017e0a <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x5a>
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8017dda:	eba6 0a08 	sub.w	sl, r6, r8
 8017dde:	4632      	mov	r2, r6
 8017de0:	4631      	mov	r1, r6
 8017de2:	4650      	mov	r0, sl
 8017de4:	f7e9 ff26 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n;
 8017de8:	6863      	ldr	r3, [r4, #4]
	  if (_Num)
 8017dea:	ebba 0205 	subs.w	r2, sl, r5
 8017dee:	4443      	add	r3, r8
 8017df0:	6063      	str	r3, [r4, #4]
 8017df2:	d003      	beq.n	8017dfc <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x4c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8017df4:	4629      	mov	r1, r5
 8017df6:	1ab0      	subs	r0, r6, r2
 8017df8:	f007 f884 	bl	801ef04 <memmove>
			      _Category>::__copy_m(__first, __last, __result);
 8017dfc:	462a      	mov	r2, r5
 8017dfe:	4649      	mov	r1, r9
 8017e00:	4638      	mov	r0, r7
 8017e02:	f7e8 ff11 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	}
 8017e06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { _M_current += __n; return *this; }
 8017e0a:	eb02 0b0a 	add.w	fp, r2, sl
 8017e0e:	4649      	mov	r1, r9
 8017e10:	4632      	mov	r2, r6
		    this->_M_impl._M_finish += __n - __elems_after;
 8017e12:	eba8 080a 	sub.w	r8, r8, sl
 8017e16:	4658      	mov	r0, fp
 8017e18:	f7e8 ff06 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8017e1c:	6862      	ldr	r2, [r4, #4]
 8017e1e:	4631      	mov	r1, r6
 8017e20:	4628      	mov	r0, r5
 8017e22:	4442      	add	r2, r8
 8017e24:	6062      	str	r2, [r4, #4]
 8017e26:	f7e9 ff05 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __elems_after;
 8017e2a:	6863      	ldr	r3, [r4, #4]
 8017e2c:	462a      	mov	r2, r5
 8017e2e:	4659      	mov	r1, fp
 8017e30:	4453      	add	r3, sl
 8017e32:	6063      	str	r3, [r4, #4]
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8017e34:	e7e4      	b.n	8017e00 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x50>
		  _M_check_len(__n, "vector::_M_range_insert");
 8017e36:	4641      	mov	r1, r8
 8017e38:	4a12      	ldr	r2, [pc, #72]	@ (8017e84 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0xd4>)
 8017e3a:	f7e8 fe72 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8017e3e:	4683      	mov	fp, r0
		pointer __new_start(this->_M_allocate(__len));
 8017e40:	f7ff fde6 	bl	8017a10 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 8017e44:	4629      	mov	r1, r5
 8017e46:	4602      	mov	r2, r0
 8017e48:	4680      	mov	r8, r0
 8017e4a:	4650      	mov	r0, sl
 8017e4c:	f7e9 fef2 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8017e50:	4649      	mov	r1, r9
 8017e52:	4602      	mov	r2, r0
 8017e54:	4638      	mov	r0, r7
 8017e56:	f7e8 fee7 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8017e5a:	4631      	mov	r1, r6
 8017e5c:	4602      	mov	r2, r0
 8017e5e:	4628      	mov	r0, r5
 8017e60:	f7e9 fee8 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8017e64:	4605      	mov	r5, r0
	if (__p)
 8017e66:	f1ba 0f00 	cmp.w	sl, #0
 8017e6a:	d005      	beq.n	8017e78 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0xc8>
			      this->_M_impl._M_end_of_storage - __old_start);
 8017e6c:	68a1      	ldr	r1, [r4, #8]
 8017e6e:	4650      	mov	r0, sl
 8017e70:	eba1 010a 	sub.w	r1, r1, sl
 8017e74:	f006 f8a4 	bl	801dfc0 <_ZdlPvj>
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8017e78:	eb08 000b 	add.w	r0, r8, fp
		this->_M_impl._M_finish = __new_finish;
 8017e7c:	e9c4 8500 	strd	r8, r5, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8017e80:	60a0      	str	r0, [r4, #8]
	  return begin() + __offset;
 8017e82:	e7c0      	b.n	8017e06 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x56>
 8017e84:	0801f257 	.word	0x0801f257

08017e88 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader>:
std::vector<uint8_t> UARTProtocol::CodeProtocol(MessageHeader message) {
 8017e88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017e8a:	460e      	mov	r6, r1
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017e8c:	2100      	movs	r1, #0
 8017e8e:	4615      	mov	r5, r2
 8017e90:	4604      	mov	r4, r0
 8017e92:	6081      	str	r1, [r0, #8]
 8017e94:	e9c0 1100 	strd	r1, r1, [r0]
	coded_message.insert(coded_message.end(), std::begin(protocol_start), std::end(protocol_start));
 8017e98:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	@ 0x44
 8017e9c:	f7ff ff88 	bl	8017db0 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
	if (IsRS485(message.interface)) coded_message.push_back(message.target_address);
 8017ea0:	7829      	ldrb	r1, [r5, #0]
 8017ea2:	4630      	mov	r0, r6
 8017ea4:	f7ff fe18 	bl	8017ad8 <_ZN12UARTProtocol7IsRS485Eh>
 8017ea8:	b120      	cbz	r0, 8017eb4 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader+0x2c>
 8017eaa:	f105 0110 	add.w	r1, r5, #16
 8017eae:	4620      	mov	r0, r4
 8017eb0:	f7ff fe36 	bl	8017b20 <_ZNSt6vectorIhSaIhEE9push_backERKh>
	coded_message.push_back(message.source_address);
 8017eb4:	f105 0111 	add.w	r1, r5, #17
 8017eb8:	4620      	mov	r0, r4
 8017eba:	f7ff fe31 	bl	8017b20 <_ZNSt6vectorIhSaIhEE9push_backERKh>
      { emplace_back(std::move(__x)); }
 8017ebe:	a901      	add	r1, sp, #4
 8017ec0:	4620      	mov	r0, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017ec2:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8017ec6:	1a9b      	subs	r3, r3, r2
	coded_message.push_back((uint8_t) message.payload.size());
 8017ec8:	f88d 3004 	strb.w	r3, [sp, #4]
      { emplace_back(std::move(__x)); }
 8017ecc:	f7f9 f834 	bl	8010f38 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	coded_message.insert(coded_message.end(), message.payload.begin(), message.payload.end());
 8017ed0:	6861      	ldr	r1, [r4, #4]
 8017ed2:	4620      	mov	r0, r4
 8017ed4:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8017ed8:	f7ff ff6a 	bl	8017db0 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
	coded_message.push_back(GetChecksum(coded_message));
 8017edc:	4621      	mov	r1, r4
 8017ede:	a801      	add	r0, sp, #4
 8017ee0:	f7e8 feae 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8017ee4:	a901      	add	r1, sp, #4
 8017ee6:	4630      	mov	r0, r6
 8017ee8:	f7ff fdce 	bl	8017a88 <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE>
 8017eec:	f10d 0103 	add.w	r1, sp, #3
 8017ef0:	f88d 0003 	strb.w	r0, [sp, #3]
 8017ef4:	4620      	mov	r0, r4
 8017ef6:	f7f9 f81f 	bl	8010f38 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
      }
 8017efa:	a801      	add	r0, sp, #4
 8017efc:	f7e8 fdf0 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	coded_message.insert(coded_message.end(), std::begin(protocol_end), std::end(protocol_end));
 8017f00:	4620      	mov	r0, r4
 8017f02:	6861      	ldr	r1, [r4, #4]
 8017f04:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	@ 0x50
 8017f08:	f7ff ff52 	bl	8017db0 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
}
 8017f0c:	4620      	mov	r0, r4
 8017f0e:	b004      	add	sp, #16
 8017f10:	bd70      	pop	{r4, r5, r6, pc}

08017f12 <_ZN12UARTProtocol4SendE13MessageHeader>:
HAL_StatusTypeDef UARTProtocol::Send(MessageHeader message) {
 8017f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f16:	b08a      	sub	sp, #40	@ 0x28
 8017f18:	460d      	mov	r5, r1
	uint8_t index = GetInterfaceIndex(ID, success);
 8017f1a:	7809      	ldrb	r1, [r1, #0]
 8017f1c:	4604      	mov	r4, r0
 8017f1e:	f10d 0207 	add.w	r2, sp, #7
 8017f22:	f7ff f909 	bl	8017138 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	if (*success) {
 8017f26:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d042      	beq.n	8017fb4 <_ZN12UARTProtocol4SendE13MessageHeader+0xa2>
		return interfaces[index];
 8017f2e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
	return *(this->_M_impl._M_start + __n);
 8017f30:	b200      	sxth	r0, r0
 8017f32:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
	if (interface_->hdmatx->State != HAL_DMA_STATE_READY || interface_->gState != HAL_UART_STATE_READY) return HAL_BUSY;
 8017f36:	6fb3      	ldr	r3, [r6, #120]	@ 0x78
 8017f38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017f3c:	2b01      	cmp	r3, #1
 8017f3e:	d13b      	bne.n	8017fb8 <_ZN12UARTProtocol4SendE13MessageHeader+0xa6>
 8017f40:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
 8017f44:	2b20      	cmp	r3, #32
 8017f46:	d137      	bne.n	8017fb8 <_ZN12UARTProtocol4SendE13MessageHeader+0xa6>
	uint8_t index = GetInterfaceIndex(message.interface, &success);
 8017f48:	f10d 0207 	add.w	r2, sp, #7
 8017f4c:	7829      	ldrb	r1, [r5, #0]
 8017f4e:	4620      	mov	r0, r4
 8017f50:	f7ff f8f2 	bl	8017138 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 8017f54:	4629      	mov	r1, r5
 8017f56:	b200      	sxth	r0, r0
 8017f58:	6867      	ldr	r7, [r4, #4]
 8017f5a:	f811 3b04 	ldrb.w	r3, [r1], #4
 8017f5e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017f62:	f88d 3014 	strb.w	r3, [sp, #20]
 8017f66:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8017f6a:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8017f6e:	a806      	add	r0, sp, #24
 8017f70:	f7e8 fe66 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8017f74:	8a2b      	ldrh	r3, [r5, #16]
	buffers_to_transfer[index] = CodeProtocol(message); //std::vector<uint8_t>
 8017f76:	aa05      	add	r2, sp, #20
 8017f78:	4621      	mov	r1, r4
 8017f7a:	a802      	add	r0, sp, #8
 8017f7c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8017f80:	f7ff ff82 	bl	8017e88 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader>
 8017f84:	a902      	add	r1, sp, #8
 8017f86:	4638      	mov	r0, r7
 8017f88:	f7ff fdb2 	bl	8017af0 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8017f8c:	a802      	add	r0, sp, #8
 8017f8e:	f7e8 fda7 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017f92:	a806      	add	r0, sp, #24
 8017f94:	f7e8 fda4 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *(this->_M_impl._M_start + __n);
 8017f98:	6863      	ldr	r3, [r4, #4]
	return HAL_UART_Transmit_DMA(interface_, &(buffers_to_transfer[index])[0], buffers_to_transfer[index].size());
 8017f9a:	4630      	mov	r0, r6
 8017f9c:	eb03 0208 	add.w	r2, r3, r8
 8017fa0:	f853 1008 	ldr.w	r1, [r3, r8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017fa4:	6852      	ldr	r2, [r2, #4]
 8017fa6:	1a52      	subs	r2, r2, r1
 8017fa8:	b292      	uxth	r2, r2
 8017faa:	f7f3 fdcf 	bl	800bb4c <HAL_UART_Transmit_DMA>
}
 8017fae:	b00a      	add	sp, #40	@ 0x28
 8017fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!success) return HAL_ERROR;
 8017fb4:	2001      	movs	r0, #1
 8017fb6:	e7fa      	b.n	8017fae <_ZN12UARTProtocol4SendE13MessageHeader+0x9c>
	if (interface_->hdmatx->State != HAL_DMA_STATE_READY || interface_->gState != HAL_UART_STATE_READY) return HAL_BUSY;
 8017fb8:	2002      	movs	r0, #2
 8017fba:	e7f8      	b.n	8017fae <_ZN12UARTProtocol4SendE13MessageHeader+0x9c>

08017fbc <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 8017fbc:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017fbe:	b170      	cbz	r0, 8017fde <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8017fc0:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8017fc4:	d306      	bcc.n	8017fd4 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8017fc6:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8017fca:	d301      	bcc.n	8017fd0 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 8017fcc:	f006 f8cf 	bl	801e16e <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8017fd0:	f006 f8ca 	bl	801e168 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8017fd4:	0080      	lsls	r0, r0, #2
      }
 8017fd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017fda:	f006 b816 	b.w	801e00a <_Znwj>
 8017fde:	bd08      	pop	{r3, pc}

08017fe0 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017fe0:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8017fe2:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017fe4:	d006      	beq.n	8017ff4 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8017fe6:	da01      	bge.n	8017fec <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 8017fe8:	f006 f8be 	bl	801e168 <_ZSt17__throw_bad_allocv>
      }
 8017fec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8017ff0:	f006 b80b 	b.w	801e00a <_Znwj>
 8017ff4:	bd08      	pop	{r3, pc}

08017ff6 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 8017ff6:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017ff8:	b170      	cbz	r0, 8018018 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8017ffa:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8017ffe:	d306      	bcc.n	801800e <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8018000:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8018004:	d301      	bcc.n	801800a <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 8018006:	f006 f8b2 	bl	801e16e <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801800a:	f006 f8ad 	bl	801e168 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801800e:	0080      	lsls	r0, r0, #2
      }
 8018010:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018014:	f005 bff9 	b.w	801e00a <_Znwj>
 8018018:	bd08      	pop	{r3, pc}

0801801a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801801a:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 801801c:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801801e:	d006      	beq.n	801802e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8018020:	da01      	bge.n	8018026 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 8018022:	f006 f8a1 	bl	801e168 <_ZSt17__throw_bad_allocv>
      }
 8018026:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801802a:	f005 bfee 	b.w	801e00a <_Znwj>
 801802e:	bd08      	pop	{r3, pc}

08018030 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8018030:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018032:	491e      	ldr	r1, [pc, #120]	@ (80180ac <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8018034:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018036:	481e      	ldr	r0, [pc, #120]	@ (80180b0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8018038:	f006 f87e 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801803c:	bb40      	cbnz	r0, 8018090 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801803e:	491c      	ldr	r1, [pc, #112]	@ (80180b0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8018040:	4608      	mov	r0, r1
 8018042:	f006 f879 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8018046:	bb28      	cbnz	r0, 8018094 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018048:	491a      	ldr	r1, [pc, #104]	@ (80180b4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x84>)
 801804a:	4819      	ldr	r0, [pc, #100]	@ (80180b0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 801804c:	f006 f874 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8018050:	bb10      	cbnz	r0, 8018098 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018052:	4919      	ldr	r1, [pc, #100]	@ (80180b8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x88>)
 8018054:	4816      	ldr	r0, [pc, #88]	@ (80180b0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8018056:	f006 f86f 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801805a:	b9f8      	cbnz	r0, 801809c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801805c:	4917      	ldr	r1, [pc, #92]	@ (80180bc <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x8c>)
 801805e:	4814      	ldr	r0, [pc, #80]	@ (80180b0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8018060:	f006 f86a 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8018064:	b9e0      	cbnz	r0, 80180a0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018066:	4916      	ldr	r1, [pc, #88]	@ (80180c0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x90>)
 8018068:	4811      	ldr	r0, [pc, #68]	@ (80180b0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 801806a:	f006 f865 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801806e:	b9c8      	cbnz	r0, 80180a4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018070:	4914      	ldr	r1, [pc, #80]	@ (80180c4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x94>)
 8018072:	480f      	ldr	r0, [pc, #60]	@ (80180b0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8018074:	f006 f860 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8018078:	b9b0      	cbnz	r0, 80180a8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801807a:	4913      	ldr	r1, [pc, #76]	@ (80180c8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x98>)
 801807c:	480c      	ldr	r0, [pc, #48]	@ (80180b0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 801807e:	f006 f85b 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8018082:	2800      	cmp	r0, #0
 8018084:	bf14      	ite	ne
 8018086:	2309      	movne	r3, #9
 8018088:	2300      	moveq	r3, #0
 801808a:	7020      	strb	r0, [r4, #0]
}
 801808c:	4618      	mov	r0, r3
 801808e:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018090:	2300      	movs	r3, #0
 8018092:	e7fa      	b.n	801808a <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018094:	2301      	movs	r3, #1
 8018096:	e7f8      	b.n	801808a <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018098:	2302      	movs	r3, #2
 801809a:	e7f6      	b.n	801808a <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801809c:	2303      	movs	r3, #3
 801809e:	e7f4      	b.n	801808a <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80180a0:	2304      	movs	r3, #4
 80180a2:	e7f2      	b.n	801808a <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80180a4:	2306      	movs	r3, #6
 80180a6:	e7f0      	b.n	801808a <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80180a8:	2308      	movs	r3, #8
 80180aa:	e7ee      	b.n	801808a <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
 80180ac:	0801f65c 	.word	0x0801f65c
 80180b0:	0801f654 	.word	0x0801f654
 80180b4:	0801f644 	.word	0x0801f644
 80180b8:	0801f63c 	.word	0x0801f63c
 80180bc:	0801f664 	.word	0x0801f664
 80180c0:	0801f64c 	.word	0x0801f64c
 80180c4:	0801f634 	.word	0x0801f634
 80180c8:	0801f62c 	.word	0x0801f62c

080180cc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80180cc:	491e      	ldr	r1, [pc, #120]	@ (8018148 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 80180ce:	b510      	push	{r4, lr}
 80180d0:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80180d2:	4608      	mov	r0, r1
 80180d4:	f006 f830 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80180d8:	bb40      	cbnz	r0, 801812c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80180da:	491c      	ldr	r1, [pc, #112]	@ (801814c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>)
 80180dc:	481a      	ldr	r0, [pc, #104]	@ (8018148 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 80180de:	f006 f82b 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80180e2:	bb28      	cbnz	r0, 8018130 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80180e4:	491a      	ldr	r1, [pc, #104]	@ (8018150 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>)
 80180e6:	4818      	ldr	r0, [pc, #96]	@ (8018148 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 80180e8:	f006 f826 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80180ec:	bb10      	cbnz	r0, 8018134 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80180ee:	4919      	ldr	r1, [pc, #100]	@ (8018154 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>)
 80180f0:	4815      	ldr	r0, [pc, #84]	@ (8018148 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 80180f2:	f006 f821 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 80180f6:	b9f8      	cbnz	r0, 8018138 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80180f8:	4917      	ldr	r1, [pc, #92]	@ (8018158 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>)
 80180fa:	4813      	ldr	r0, [pc, #76]	@ (8018148 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 80180fc:	f006 f81c 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8018100:	b9e0      	cbnz	r0, 801813c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018102:	4916      	ldr	r1, [pc, #88]	@ (801815c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>)
 8018104:	4810      	ldr	r0, [pc, #64]	@ (8018148 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8018106:	f006 f817 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801810a:	b9c8      	cbnz	r0, 8018140 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801810c:	4914      	ldr	r1, [pc, #80]	@ (8018160 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>)
 801810e:	480e      	ldr	r0, [pc, #56]	@ (8018148 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8018110:	f006 f812 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8018114:	b9b0      	cbnz	r0, 8018144 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8018116:	4913      	ldr	r1, [pc, #76]	@ (8018164 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>)
 8018118:	480b      	ldr	r0, [pc, #44]	@ (8018148 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801811a:	f006 f80d 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801811e:	2800      	cmp	r0, #0
 8018120:	bf14      	ite	ne
 8018122:	2309      	movne	r3, #9
 8018124:	2300      	moveq	r3, #0
 8018126:	7020      	strb	r0, [r4, #0]
}
 8018128:	4618      	mov	r0, r3
 801812a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801812c:	2300      	movs	r3, #0
 801812e:	e7fa      	b.n	8018126 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018130:	2301      	movs	r3, #1
 8018132:	e7f8      	b.n	8018126 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018134:	2302      	movs	r3, #2
 8018136:	e7f6      	b.n	8018126 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018138:	2303      	movs	r3, #3
 801813a:	e7f4      	b.n	8018126 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801813c:	2304      	movs	r3, #4
 801813e:	e7f2      	b.n	8018126 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018140:	2306      	movs	r3, #6
 8018142:	e7f0      	b.n	8018126 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018144:	2308      	movs	r3, #8
 8018146:	e7ee      	b.n	8018126 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
 8018148:	0801f65c 	.word	0x0801f65c
 801814c:	0801f654 	.word	0x0801f654
 8018150:	0801f644 	.word	0x0801f644
 8018154:	0801f63c 	.word	0x0801f63c
 8018158:	0801f664 	.word	0x0801f664
 801815c:	0801f64c 	.word	0x0801f64c
 8018160:	0801f634 	.word	0x0801f634
 8018164:	0801f62c 	.word	0x0801f62c

08018168 <_ZN10Publishers4InitEP9RegistersP13Communication>:
 * @brief Initialize the class with references to other classes. Set default values.
 *
 * @param input registers_: the Registers instance
 * @param input communication_: the Communication instance
 */
void Publishers::Init(Registers* registers_, Communication* communication_) {
 8018168:	b510      	push	{r4, lr}
	registers = registers_;
	communication = communication_;
 801816a:	e9c0 1201 	strd	r1, r2, [r0, #4]

	PublishersSemaphore = osSemaphoreNew(1,1,NULL);
 801816e:	2101      	movs	r1, #1
void Publishers::Init(Registers* registers_, Communication* communication_) {
 8018170:	4604      	mov	r4, r0
	PublishersSemaphore = osSemaphoreNew(1,1,NULL);
 8018172:	2200      	movs	r2, #0
 8018174:	4608      	mov	r0, r1
 8018176:	f7f4 fe1b 	bl	800cdb0 <osSemaphoreNew>
 801817a:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(PublishersSemaphore);
}
 801817c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(PublishersSemaphore);
 8018180:	f7f4 bea6 	b.w	800ced0 <osSemaphoreRelease>

08018184 <_ZN10Publishers13FindPublisherEhPb>:
 *
 * @param input ID: the publisher ID
 * @param output success: whether successful
 * @return the publisher pointer
 */
Publisher* Publishers::FindPublisher(uint8_t ID, bool* success) {
 8018184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018186:	4604      	mov	r4, r0
 8018188:	460f      	mov	r7, r1
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801818a:	6800      	ldr	r0, [r0, #0]
 801818c:	f04f 31ff 	mov.w	r1, #4294967295
Publisher* Publishers::FindPublisher(uint8_t ID, bool* success) {
 8018190:	4616      	mov	r6, r2
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8018192:	f7f4 fe69 	bl	800ce68 <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8018196:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
	for (Publisher &publisher : publishers) {
 801819a:	429a      	cmp	r2, r3
 801819c:	461d      	mov	r5, r3
 801819e:	d105      	bne.n	80181ac <_ZN10Publishers13FindPublisherEhPb+0x28>
			osSemaphoreRelease(PublishersSemaphore);
			*success = true;
			return publisher_pointer;
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 80181a0:	6820      	ldr	r0, [r4, #0]
 80181a2:	f7f4 fe95 	bl	800ced0 <osSemaphoreRelease>
	*success = false;
	return NULL;
 80181a6:	2300      	movs	r3, #0
 80181a8:	461d      	mov	r5, r3
 80181aa:	e008      	b.n	80181be <_ZN10Publishers13FindPublisherEhPb+0x3a>
		if (publisher.ID == ID) {
 80181ac:	462b      	mov	r3, r5
 80181ae:	f813 1b20 	ldrb.w	r1, [r3], #32
 80181b2:	42b9      	cmp	r1, r7
 80181b4:	d1f1      	bne.n	801819a <_ZN10Publishers13FindPublisherEhPb+0x16>
			osSemaphoreRelease(PublishersSemaphore);
 80181b6:	6820      	ldr	r0, [r4, #0]
 80181b8:	f7f4 fe8a 	bl	800ced0 <osSemaphoreRelease>
 80181bc:	2301      	movs	r3, #1
}
 80181be:	4628      	mov	r0, r5
			*success = true;
 80181c0:	7033      	strb	r3, [r6, #0]
}
 80181c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080181c4 <_ZN10Publishers18SetPublisherStatusEhb>:
bool Publishers::SetPublisherStatus(uint8_t ID, bool status) {
 80181c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80181c6:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 80181c8:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::SetPublisherStatus(uint8_t ID, bool status) {
 80181cc:	4604      	mov	r4, r0
	Publisher* publisher = FindPublisher(ID, &success);
 80181ce:	f7ff ffd9 	bl	8018184 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 80181d2:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 80181d6:	4605      	mov	r5, r0
	if (!success) return false;
 80181d8:	b157      	cbz	r7, 80181f0 <_ZN10Publishers18SetPublisherStatusEhb+0x2c>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80181da:	f04f 31ff 	mov.w	r1, #4294967295
 80181de:	6820      	ldr	r0, [r4, #0]
 80181e0:	f7f4 fe42 	bl	800ce68 <osSemaphoreAcquire>
	publisher->counter = 0;
 80181e4:	2300      	movs	r3, #0
	osSemaphoreRelease(PublishersSemaphore);
 80181e6:	6820      	ldr	r0, [r4, #0]
	publisher->counter = 0;
 80181e8:	80ab      	strh	r3, [r5, #4]
	publisher->activated = status;
 80181ea:	706e      	strb	r6, [r5, #1]
	osSemaphoreRelease(PublishersSemaphore);
 80181ec:	f7f4 fe70 	bl	800ced0 <osSemaphoreRelease>
}
 80181f0:	4638      	mov	r0, r7
 80181f2:	b003      	add	sp, #12
 80181f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080181f6 <_ZN10Publishers17ActivatePublisherEh>:
	return SetPublisherStatus(ID, true);
 80181f6:	2201      	movs	r2, #1
 80181f8:	f7ff bfe4 	b.w	80181c4 <_ZN10Publishers18SetPublisherStatusEhb>

080181fc <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80181fc:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80181fe:	4611      	mov	r1, r2
 8018200:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8018202:	d108      	bne.n	8018216 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x1a>
			self->SetPublisherStatus(input[0], (bool) input[1]);
 8018204:	7852      	ldrb	r2, [r2, #1]
 8018206:	7809      	ldrb	r1, [r1, #0]
 8018208:	3a00      	subs	r2, #0
 801820a:	bf18      	it	ne
 801820c:	2201      	movne	r2, #1
 801820e:	f7ff ffd9 	bl	80181c4 <_ZN10Publishers18SetPublisherStatusEhb>
			return true;
 8018212:	2001      	movs	r0, #1
		}
 8018214:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8018216:	2000      	movs	r0, #0
 8018218:	e7fc      	b.n	8018214 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x18>

0801821a <_ZN10Publishers21SetPublisherPrescalerEht>:
bool Publishers::SetPublisherPrescaler(uint8_t ID, uint16_t prescaler) {
 801821a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801821c:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 801821e:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::SetPublisherPrescaler(uint8_t ID, uint16_t prescaler) {
 8018222:	4604      	mov	r4, r0
	Publisher* publisher = FindPublisher(ID, &success);
 8018224:	f7ff ffae 	bl	8018184 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 8018228:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 801822c:	4605      	mov	r5, r0
	if (!success) return false;
 801822e:	b147      	cbz	r7, 8018242 <_ZN10Publishers21SetPublisherPrescalerEht+0x28>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8018230:	f04f 31ff 	mov.w	r1, #4294967295
 8018234:	6820      	ldr	r0, [r4, #0]
 8018236:	f7f4 fe17 	bl	800ce68 <osSemaphoreAcquire>
	osSemaphoreRelease(PublishersSemaphore);
 801823a:	6820      	ldr	r0, [r4, #0]
	publisher->prescaler = prescaler;
 801823c:	806e      	strh	r6, [r5, #2]
	osSemaphoreRelease(PublishersSemaphore);
 801823e:	f7f4 fe47 	bl	800ced0 <osSemaphoreRelease>
}
 8018242:	4638      	mov	r0, r7
 8018244:	b003      	add	sp, #12
 8018246:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018248 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE1_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8018248:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 801824a:	4611      	mov	r1, r2
 801824c:	b508      	push	{r3, lr}
			if (length != 2) return false;
 801824e:	d105      	bne.n	801825c <_ZZN10Publishers12AddRegistersEvENUlPvtPttE1_4_FUNES0_tS1_t+0x14>
			self->SetPublisherPrescaler((uint8_t) input[0], input[1]);
 8018250:	8852      	ldrh	r2, [r2, #2]
 8018252:	7809      	ldrb	r1, [r1, #0]
 8018254:	f7ff ffe1 	bl	801821a <_ZN10Publishers21SetPublisherPrescalerEht>
 8018258:	2001      	movs	r0, #1
		}
 801825a:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 801825c:	2000      	movs	r0, #0
 801825e:	e7fc      	b.n	801825a <_ZZN10Publishers12AddRegistersEvENUlPvtPttE1_4_FUNES0_tS1_t+0x12>

08018260 <_ZN10Publishers10StopTopicsEh>:
bool Publishers::StopTopics(uint8_t ID) {
 8018260:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Publisher* publisher = FindPublisher(ID, &success);
 8018262:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::StopTopics(uint8_t ID) {
 8018266:	4604      	mov	r4, r0
	Publisher* publisher = FindPublisher(ID, &success);
 8018268:	f7ff ff8c 	bl	8018184 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 801826c:	f89d 6007 	ldrb.w	r6, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 8018270:	4605      	mov	r5, r0
	if (!success) return false;
 8018272:	b166      	cbz	r6, 801828e <_ZN10Publishers10StopTopicsEh+0x2e>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8018274:	f04f 31ff 	mov.w	r1, #4294967295
 8018278:	6820      	ldr	r0, [r4, #0]
 801827a:	f7f4 fdf5 	bl	800ce68 <osSemaphoreAcquire>
		topic.activated = false;
 801827e:	2100      	movs	r1, #0
 8018280:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
	for (Topic &topic : publisher->topics) {
 8018284:	429a      	cmp	r2, r3
 8018286:	d105      	bne.n	8018294 <_ZN10Publishers10StopTopicsEh+0x34>
	osSemaphoreRelease(PublishersSemaphore);
 8018288:	6820      	ldr	r0, [r4, #0]
 801828a:	f7f4 fe21 	bl	800ced0 <osSemaphoreRelease>
}
 801828e:	4630      	mov	r0, r6
 8018290:	b002      	add	sp, #8
 8018292:	bd70      	pop	{r4, r5, r6, pc}
		topic.activated = false;
 8018294:	f803 1b04 	strb.w	r1, [r3], #4
	return *this;
 8018298:	e7f4      	b.n	8018284 <_ZN10Publishers10StopTopicsEh+0x24>

0801829a <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			self->StopTopics(*input);
 801829a:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801829c:	b508      	push	{r3, lr}
			self->StopTopics(*input);
 801829e:	f7ff ffdf 	bl	8018260 <_ZN10Publishers10StopTopicsEh>
		}
 80182a2:	2001      	movs	r0, #1
 80182a4:	bd08      	pop	{r3, pc}

080182a6 <_ZN10Publishers23UnlinkFromAllInterfacesEh>:
bool Publishers::UnlinkFromAllInterfaces(uint8_t ID) {
 80182a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Publisher* publisher = FindPublisher(ID, &success);
 80182a8:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::UnlinkFromAllInterfaces(uint8_t ID) {
 80182ac:	4605      	mov	r5, r0
	Publisher* publisher = FindPublisher(ID, &success);
 80182ae:	f7ff ff69 	bl	8018184 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 80182b2:	f89d 6007 	ldrb.w	r6, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 80182b6:	4604      	mov	r4, r0
	if (!success) return false;
 80182b8:	b166      	cbz	r6, 80182d4 <_ZN10Publishers23UnlinkFromAllInterfacesEh+0x2e>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80182ba:	f04f 31ff 	mov.w	r1, #4294967295
 80182be:	6828      	ldr	r0, [r5, #0]
 80182c0:	f7f4 fdd2 	bl	800ce68 <osSemaphoreAcquire>
	osSemaphoreRelease(PublishersSemaphore);
 80182c4:	6828      	ldr	r0, [r5, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80182c6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80182ca:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
 80182cc:	bf18      	it	ne
 80182ce:	60e3      	strne	r3, [r4, #12]
 80182d0:	f7f4 fdfe 	bl	800ced0 <osSemaphoreRelease>
}
 80182d4:	4630      	mov	r0, r6
 80182d6:	b002      	add	sp, #8
 80182d8:	bd70      	pop	{r4, r5, r6, pc}

080182da <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE5_4_FUNES0_tS1_t>:
			self->UnlinkFromAllInterfaces(*input);
 80182da:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80182dc:	b508      	push	{r3, lr}
			self->UnlinkFromAllInterfaces(*input);
 80182de:	f7ff ffe2 	bl	80182a6 <_ZN10Publishers23UnlinkFromAllInterfacesEh>
		}
 80182e2:	2001      	movs	r0, #1
 80182e4:	bd08      	pop	{r3, pc}

080182e6 <_ZN10Publishers9FindTopicEhtPb>:
 * @param input ID: the publisher ID
 * @param input topic_ID: the topic ID / register address to find
 * @param output success: whether successful
 * @return the topic pointer
 */
Topic* Publishers::FindTopic(uint8_t ID, uint16_t topic_ID, bool* success) {
 80182e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182e8:	461c      	mov	r4, r3
 80182ea:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, success);
 80182ec:	461a      	mov	r2, r3
Topic* Publishers::FindTopic(uint8_t ID, uint16_t topic_ID, bool* success) {
 80182ee:	4606      	mov	r6, r0
	Publisher* publisher = FindPublisher(ID, success);
 80182f0:	f7ff ff48 	bl	8018184 <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 80182f4:	7823      	ldrb	r3, [r4, #0]
	Publisher* publisher = FindPublisher(ID, success);
 80182f6:	4605      	mov	r5, r0
	if (not *success)
 80182f8:	b173      	cbz	r3, 8018318 <_ZN10Publishers9FindTopicEhtPb+0x32>
		return NULL;

	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80182fa:	f04f 31ff 	mov.w	r1, #4294967295
 80182fe:	6830      	ldr	r0, [r6, #0]
 8018300:	f7f4 fdb2 	bl	800ce68 <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8018304:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
	for (Topic &topic : publisher->topics) {
 8018308:	429a      	cmp	r2, r3
 801830a:	461d      	mov	r5, r3
 801830c:	d106      	bne.n	801831c <_ZN10Publishers9FindTopicEhtPb+0x36>
			osSemaphoreRelease(PublishersSemaphore);
			*success = true;
			return topic_pointer;
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 801830e:	6830      	ldr	r0, [r6, #0]
 8018310:	f7f4 fdde 	bl	800ced0 <osSemaphoreRelease>
	*success = false;
 8018314:	2300      	movs	r3, #0
 8018316:	7023      	strb	r3, [r4, #0]
		return NULL;
 8018318:	2500      	movs	r5, #0
 801831a:	e008      	b.n	801832e <_ZN10Publishers9FindTopicEhtPb+0x48>
		if (topic.ID == topic_ID) {
 801831c:	8869      	ldrh	r1, [r5, #2]
 801831e:	1d2b      	adds	r3, r5, #4
 8018320:	42b9      	cmp	r1, r7
 8018322:	d1f1      	bne.n	8018308 <_ZN10Publishers9FindTopicEhtPb+0x22>
			osSemaphoreRelease(PublishersSemaphore);
 8018324:	6830      	ldr	r0, [r6, #0]
 8018326:	f7f4 fdd3 	bl	800ced0 <osSemaphoreRelease>
			*success = true;
 801832a:	2301      	movs	r3, #1
 801832c:	7023      	strb	r3, [r4, #0]
	return NULL;
}
 801832e:	4628      	mov	r0, r5
 8018330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018332 <_ZN10Publishers14SetTopicStatusEhtb>:
bool Publishers::SetTopicStatus(uint8_t ID, uint16_t topic_ID, bool status) {
 8018332:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018334:	461e      	mov	r6, r3
	Topic* topic = FindTopic(ID, topic_ID, &success);
 8018336:	f10d 0307 	add.w	r3, sp, #7
bool Publishers::SetTopicStatus(uint8_t ID, uint16_t topic_ID, bool status) {
 801833a:	4604      	mov	r4, r0
	Topic* topic = FindTopic(ID, topic_ID, &success);
 801833c:	f7ff ffd3 	bl	80182e6 <_ZN10Publishers9FindTopicEhtPb>
	if (!success) return false;
 8018340:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Topic* topic = FindTopic(ID, topic_ID, &success);
 8018344:	4605      	mov	r5, r0
	if (!success) return false;
 8018346:	b147      	cbz	r7, 801835a <_ZN10Publishers14SetTopicStatusEhtb+0x28>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8018348:	f04f 31ff 	mov.w	r1, #4294967295
 801834c:	6820      	ldr	r0, [r4, #0]
 801834e:	f7f4 fd8b 	bl	800ce68 <osSemaphoreAcquire>
	osSemaphoreRelease(PublishersSemaphore);
 8018352:	6820      	ldr	r0, [r4, #0]
	topic->activated = status;
 8018354:	702e      	strb	r6, [r5, #0]
	osSemaphoreRelease(PublishersSemaphore);
 8018356:	f7f4 fdbb 	bl	800ced0 <osSemaphoreRelease>
}
 801835a:	4638      	mov	r0, r7
 801835c:	b003      	add	sp, #12
 801835e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018360 <_ZN10Publishers13ActivateTopicEht>:
	return SetTopicStatus(ID, topic_ID, true);
 8018360:	2301      	movs	r3, #1
 8018362:	f7ff bfe6 	b.w	8018332 <_ZN10Publishers14SetTopicStatusEhtb>

08018366 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE0_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 8018366:	2b03      	cmp	r3, #3
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 8018368:	4611      	mov	r1, r2
 801836a:	b508      	push	{r3, lr}
			if (length != 3) return false;
 801836c:	d109      	bne.n	8018382 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE0_4_FUNES0_tS1_t+0x1c>
			self->SetTopicStatus((uint8_t) input[0], input[1], (bool) input[2]);
 801836e:	8893      	ldrh	r3, [r2, #4]
 8018370:	7809      	ldrb	r1, [r1, #0]
 8018372:	3b00      	subs	r3, #0
 8018374:	8852      	ldrh	r2, [r2, #2]
 8018376:	bf18      	it	ne
 8018378:	2301      	movne	r3, #1
 801837a:	f7ff ffda 	bl	8018332 <_ZN10Publishers14SetTopicStatusEhtb>
			return true;
 801837e:	2001      	movs	r0, #1
		}
 8018380:	bd08      	pop	{r3, pc}
			if (length != 3) return false;
 8018382:	2000      	movs	r0, #0
 8018384:	e7fc      	b.n	8018380 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE0_4_FUNES0_tS1_t+0x1a>

08018386 <_ZN10Publishers20FindPublishInterfaceEhhPb>:
 * @param input ID: the publisher ID
 * @param input interface_ID: the interface ID to find
 * @param output success: whether successful
 * @return the interface information pointer
 */
PublishInterface* Publishers::FindPublishInterface(uint8_t ID, uint8_t interface_ID, bool* success) {
 8018386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018388:	461c      	mov	r4, r3
 801838a:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, success);
 801838c:	461a      	mov	r2, r3
PublishInterface* Publishers::FindPublishInterface(uint8_t ID, uint8_t interface_ID, bool* success) {
 801838e:	4605      	mov	r5, r0
	Publisher* publisher = FindPublisher(ID, success);
 8018390:	f7ff fef8 	bl	8018184 <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 8018394:	7823      	ldrb	r3, [r4, #0]
	Publisher* publisher = FindPublisher(ID, success);
 8018396:	4606      	mov	r6, r0
	if (not *success)
 8018398:	b173      	cbz	r3, 80183b8 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x32>
		return NULL;

	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801839a:	f04f 31ff 	mov.w	r1, #4294967295
 801839e:	6828      	ldr	r0, [r5, #0]
 80183a0:	f7f4 fd62 	bl	800ce68 <osSemaphoreAcquire>
 80183a4:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
	for (PublishInterface &interface : publisher->interfaces) {
 80183a8:	429a      	cmp	r2, r3
 80183aa:	461e      	mov	r6, r3
 80183ac:	d106      	bne.n	80183bc <_ZN10Publishers20FindPublishInterfaceEhhPb+0x36>
			osSemaphoreRelease(PublishersSemaphore);
			*success = true;
			return publish_interface_pointer;
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 80183ae:	6828      	ldr	r0, [r5, #0]
 80183b0:	f7f4 fd8e 	bl	800ced0 <osSemaphoreRelease>
	*success = false;
 80183b4:	2300      	movs	r3, #0
 80183b6:	7023      	strb	r3, [r4, #0]
		return NULL;
 80183b8:	2600      	movs	r6, #0
 80183ba:	e009      	b.n	80183d0 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x4a>
		if (interface.interface == interface_ID) {
 80183bc:	4633      	mov	r3, r6
 80183be:	f813 1b02 	ldrb.w	r1, [r3], #2
 80183c2:	42b9      	cmp	r1, r7
 80183c4:	d1f0      	bne.n	80183a8 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x22>
			osSemaphoreRelease(PublishersSemaphore);
 80183c6:	6828      	ldr	r0, [r5, #0]
 80183c8:	f7f4 fd82 	bl	800ced0 <osSemaphoreRelease>
			*success = true;
 80183cc:	2301      	movs	r3, #1
 80183ce:	7023      	strb	r3, [r4, #0]
	return NULL;
}
 80183d0:	4630      	mov	r0, r6
 80183d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080183d4 <_ZN10Publishers17SetPublishAddressEhhh>:
bool Publishers::SetPublishAddress(uint8_t ID, uint8_t interface_ID, uint8_t address) {
 80183d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80183d6:	461e      	mov	r6, r3
	PublishInterface* interface = FindPublishInterface(ID, interface_ID, &success);
 80183d8:	f10d 0307 	add.w	r3, sp, #7
bool Publishers::SetPublishAddress(uint8_t ID, uint8_t interface_ID, uint8_t address) {
 80183dc:	4604      	mov	r4, r0
	PublishInterface* interface = FindPublishInterface(ID, interface_ID, &success);
 80183de:	f7ff ffd2 	bl	8018386 <_ZN10Publishers20FindPublishInterfaceEhhPb>
	if (success) return false;
 80183e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	PublishInterface* interface = FindPublishInterface(ID, interface_ID, &success);
 80183e6:	4605      	mov	r5, r0
	if (success) return false;
 80183e8:	b95b      	cbnz	r3, 8018402 <_ZN10Publishers17SetPublishAddressEhhh+0x2e>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80183ea:	f04f 31ff 	mov.w	r1, #4294967295
 80183ee:	6820      	ldr	r0, [r4, #0]
 80183f0:	f7f4 fd3a 	bl	800ce68 <osSemaphoreAcquire>
	interface->address = address;
 80183f4:	706e      	strb	r6, [r5, #1]
	osSemaphoreRelease(PublishersSemaphore);
 80183f6:	6820      	ldr	r0, [r4, #0]
 80183f8:	f7f4 fd6a 	bl	800ced0 <osSemaphoreRelease>
	return true;
 80183fc:	2001      	movs	r0, #1
}
 80183fe:	b002      	add	sp, #8
 8018400:	bd70      	pop	{r4, r5, r6, pc}
	if (success) return false;
 8018402:	2000      	movs	r0, #0
 8018404:	e7fb      	b.n	80183fe <_ZN10Publishers17SetPublishAddressEhhh+0x2a>

08018406 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 8018406:	2b03      	cmp	r3, #3
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8018408:	4611      	mov	r1, r2
 801840a:	b508      	push	{r3, lr}
			if (length != 3) return false;
 801840c:	d106      	bne.n	801841c <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t+0x16>
			self->SetPublishAddress(input[0], input[1], input[2]);
 801840e:	7893      	ldrb	r3, [r2, #2]
 8018410:	7809      	ldrb	r1, [r1, #0]
 8018412:	7852      	ldrb	r2, [r2, #1]
 8018414:	f7ff ffde 	bl	80183d4 <_ZN10Publishers17SetPublishAddressEhhh>
			return true;
 8018418:	2001      	movs	r0, #1
		}
 801841a:	bd08      	pop	{r3, pc}
			if (length != 3) return false;
 801841c:	2000      	movs	r0, #0
 801841e:	e7fc      	b.n	801841a <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t+0x14>

08018420 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb>:
 * @param input ID: the publisher ID
 * @param input interface_ID: the interface ID to find
 * @param output success: whether successful
 * @return the interface information index
 */
uint8_t Publishers::FindPublishInterfaceIndex(uint8_t ID, uint8_t interface_ID, bool* success) {
 8018420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018422:	461d      	mov	r5, r3
 8018424:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, success);
 8018426:	461a      	mov	r2, r3
uint8_t Publishers::FindPublishInterfaceIndex(uint8_t ID, uint8_t interface_ID, bool* success) {
 8018428:	4606      	mov	r6, r0
	Publisher* publisher = FindPublisher(ID, success);
 801842a:	f7ff feab 	bl	8018184 <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 801842e:	782b      	ldrb	r3, [r5, #0]
	Publisher* publisher = FindPublisher(ID, success);
 8018430:	4604      	mov	r4, r0
	if (not *success)
 8018432:	b18b      	cbz	r3, 8018458 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x38>
		return 0;

	uint8_t index = 0;
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8018434:	f04f 31ff 	mov.w	r1, #4294967295
 8018438:	6830      	ldr	r0, [r6, #0]
 801843a:	f7f4 fd15 	bl	800ce68 <osSemaphoreAcquire>
	for (PublishInterface &interface : publisher->interfaces) {
 801843e:	2100      	movs	r1, #0
      : _M_current(__i) { }
 8018440:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
		if (interface.interface == interface_ID) {
 8018444:	1e9c      	subs	r4, r3, #2
	for (PublishInterface &interface : publisher->interfaces) {
 8018446:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801844a:	4290      	cmp	r0, r2
 801844c:	d106      	bne.n	801845c <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x3c>
			*success = true;
			return index;
		}
		index++;
	}
	osSemaphoreRelease(PublishersSemaphore);
 801844e:	6830      	ldr	r0, [r6, #0]
 8018450:	f7f4 fd3e 	bl	800ced0 <osSemaphoreRelease>
	*success = false;
 8018454:	2300      	movs	r3, #0
 8018456:	702b      	strb	r3, [r5, #0]
		return 0;
 8018458:	2400      	movs	r4, #0
 801845a:	e00a      	b.n	8018472 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x52>
		if (interface.interface == interface_ID) {
 801845c:	1c4a      	adds	r2, r1, #1
 801845e:	f814 c012 	ldrb.w	ip, [r4, r2, lsl #1]
 8018462:	45bc      	cmp	ip, r7
 8018464:	d107      	bne.n	8018476 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x56>
			osSemaphoreRelease(PublishersSemaphore);
 8018466:	6830      	ldr	r0, [r6, #0]
 8018468:	b2cc      	uxtb	r4, r1
 801846a:	f7f4 fd31 	bl	800ced0 <osSemaphoreRelease>
			*success = true;
 801846e:	2301      	movs	r3, #1
 8018470:	702b      	strb	r3, [r5, #0]
	return 0;
}
 8018472:	4620      	mov	r0, r4
 8018474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018476:	4611      	mov	r1, r2
 8018478:	e7e5      	b.n	8018446 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x26>

0801847a <_ZN10Publishers19UnlinkFromInterfaceEhh>:
bool Publishers::UnlinkFromInterface(uint8_t ID, uint8_t interface_ID) {
 801847a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801847c:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, &success);
 801847e:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::UnlinkFromInterface(uint8_t ID, uint8_t interface_ID) {
 8018482:	4605      	mov	r5, r0
 8018484:	460e      	mov	r6, r1
	Publisher* publisher = FindPublisher(ID, &success);
 8018486:	f7ff fe7d 	bl	8018184 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 801848a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 801848e:	4604      	mov	r4, r0
	if (!success) return false;
 8018490:	b91b      	cbnz	r3, 801849a <_ZN10Publishers19UnlinkFromInterfaceEhh+0x20>
 8018492:	2700      	movs	r7, #0
}
 8018494:	4638      	mov	r0, r7
 8018496:	b003      	add	sp, #12
 8018498:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t index = FindPublishInterfaceIndex(ID, interface_ID, &success);
 801849a:	463a      	mov	r2, r7
 801849c:	4631      	mov	r1, r6
 801849e:	f10d 0307 	add.w	r3, sp, #7
 80184a2:	4628      	mov	r0, r5
 80184a4:	f7ff ffbc 	bl	8018420 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb>
	if (!success) return false;
 80184a8:	f89d 7007 	ldrb.w	r7, [sp, #7]
	uint8_t index = FindPublishInterfaceIndex(ID, interface_ID, &success);
 80184ac:	4606      	mov	r6, r0
	if (!success) return false;
 80184ae:	2f00      	cmp	r7, #0
 80184b0:	d0ef      	beq.n	8018492 <_ZN10Publishers19UnlinkFromInterfaceEhh+0x18>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80184b2:	f04f 31ff 	mov.w	r1, #4294967295
 80184b6:	6828      	ldr	r0, [r5, #0]
 80184b8:	f7f4 fcd6 	bl	800ce68 <osSemaphoreAcquire>
      { return __normal_iterator(_M_current + __n); }
 80184bc:	68a0      	ldr	r0, [r4, #8]
 80184be:	b236      	sxth	r6, r6
      : _M_current(__i) { }
 80184c0:	68e2      	ldr	r2, [r4, #12]
      { return __normal_iterator(_M_current + __n); }
 80184c2:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80184c6:	1c81      	adds	r1, r0, #2
      if (__position + 1 != end())
 80184c8:	4291      	cmp	r1, r2
 80184ca:	d002      	beq.n	80184d2 <_ZN10Publishers19UnlinkFromInterfaceEhh+0x58>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80184cc:	1a52      	subs	r2, r2, r1
 80184ce:	f006 fd19 	bl	801ef04 <memmove>
      --this->_M_impl._M_finish;
 80184d2:	68e3      	ldr	r3, [r4, #12]
	osSemaphoreRelease(PublishersSemaphore);
 80184d4:	6828      	ldr	r0, [r5, #0]
 80184d6:	3b02      	subs	r3, #2
 80184d8:	60e3      	str	r3, [r4, #12]
 80184da:	f7f4 fcf9 	bl	800ced0 <osSemaphoreRelease>
	return true;
 80184de:	e7d9      	b.n	8018494 <_ZN10Publishers19UnlinkFromInterfaceEhh+0x1a>

080184e0 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80184e0:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80184e2:	4611      	mov	r1, r2
 80184e4:	b508      	push	{r3, lr}
			if (length != 2) return false;
 80184e6:	d105      	bne.n	80184f4 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x14>
			self->UnlinkFromInterface(input[0], input[1]);
 80184e8:	7852      	ldrb	r2, [r2, #1]
 80184ea:	7809      	ldrb	r1, [r1, #0]
 80184ec:	f7ff ffc5 	bl	801847a <_ZN10Publishers19UnlinkFromInterfaceEhh>
 80184f0:	2001      	movs	r0, #1
		}
 80184f2:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 80184f4:	2000      	movs	r0, #0
 80184f6:	e7fc      	b.n	80184f2 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x12>

080184f8 <_ZNSt12_Vector_baseI16PublishInterfaceSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80184f8:	b510      	push	{r4, lr}
 80184fa:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 80184fc:	6800      	ldr	r0, [r0, #0]
	if (__p)
 80184fe:	b118      	cbz	r0, 8018508 <_ZNSt12_Vector_baseI16PublishInterfaceSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8018500:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8018502:	1a09      	subs	r1, r1, r0
 8018504:	f005 fd5c 	bl	801dfc0 <_ZdlPvj>
      }
 8018508:	4620      	mov	r0, r4
 801850a:	bd10      	pop	{r4, pc}

0801850c <_ZNSt12_Vector_baseI5TopicSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 801850c:	b510      	push	{r4, lr}
 801850e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8018510:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8018512:	b118      	cbz	r0, 801851c <_ZNSt12_Vector_baseI5TopicSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8018514:	68a1      	ldr	r1, [r4, #8]
 8018516:	1a09      	subs	r1, r1, r0
 8018518:	f005 fd52 	bl	801dfc0 <_ZdlPvj>
      }
 801851c:	4620      	mov	r0, r4
 801851e:	bd10      	pop	{r4, pc}

08018520 <_ZN9PublisherD1Ev>:
struct Publisher {
 8018520:	b510      	push	{r4, lr}
 8018522:	4604      	mov	r4, r0
      }
 8018524:	3014      	adds	r0, #20
 8018526:	f7ff fff1 	bl	801850c <_ZNSt12_Vector_baseI5TopicSaIS0_EED1Ev>
 801852a:	f104 0008 	add.w	r0, r4, #8
 801852e:	f7ff ffe3 	bl	80184f8 <_ZNSt12_Vector_baseI16PublishInterfaceSaIS0_EED1Ev>
 8018532:	4620      	mov	r0, r4
 8018534:	bd10      	pop	{r4, pc}

08018536 <_ZN10PublishersC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018536:	2200      	movs	r2, #0
 8018538:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801853c:	6142      	str	r2, [r0, #20]
}
 801853e:	4770      	bx	lr

08018540 <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8018540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018542:	4604      	mov	r4, r0
 8018544:	460f      	mov	r7, r1
 8018546:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8018548:	2600      	movs	r6, #0
      for (; __first != __last; ++__first, (void)++__cur)
 801854a:	42bc      	cmp	r4, r7
 801854c:	4628      	mov	r0, r5
 801854e:	f105 0520 	add.w	r5, r5, #32
 8018552:	d100      	bne.n	8018556 <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x16>
    }
 8018554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018556:	7823      	ldrb	r3, [r4, #0]

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8018558:	4620      	mov	r0, r4
 801855a:	f805 3c20 	strb.w	r3, [r5, #-32]
 801855e:	7863      	ldrb	r3, [r4, #1]
 8018560:	f805 3c1f 	strb.w	r3, [r5, #-31]
 8018564:	8863      	ldrh	r3, [r4, #2]
 8018566:	f825 3c1e 	strh.w	r3, [r5, #-30]
 801856a:	88a3      	ldrh	r3, [r4, #4]
 801856c:	f825 3c1c 	strh.w	r3, [r5, #-28]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8018570:	68a3      	ldr	r3, [r4, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8018572:	60a6      	str	r6, [r4, #8]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8018574:	f845 3c18 	str.w	r3, [r5, #-24]
 8018578:	68e3      	ldr	r3, [r4, #12]
 801857a:	f845 3c14 	str.w	r3, [r5, #-20]
	  _M_end_of_storage(__x._M_end_of_storage)
 801857e:	6923      	ldr	r3, [r4, #16]
 8018580:	f845 3c10 	str.w	r3, [r5, #-16]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8018584:	6963      	ldr	r3, [r4, #20]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8018586:	6166      	str	r6, [r4, #20]
 8018588:	e9c4 6603 	strd	r6, r6, [r4, #12]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801858c:	f845 3c0c 	str.w	r3, [r5, #-12]
 8018590:	69a3      	ldr	r3, [r4, #24]
 8018592:	f845 3c08 	str.w	r3, [r5, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 8018596:	69e3      	ldr	r3, [r4, #28]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8018598:	e9c4 6606 	strd	r6, r6, [r4, #24]
	  _M_end_of_storage(__x._M_end_of_storage)
 801859c:	f845 3c04 	str.w	r3, [r5, #-4]
      for (; __first != __last; ++__first, (void)++__cur)
 80185a0:	3420      	adds	r4, #32
 80185a2:	f7ff ffbd 	bl	8018520 <_ZN9PublisherD1Ev>
 80185a6:	e7d0      	b.n	801854a <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>

080185a8 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80185a8:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 80185aa:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80185ac:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 80185ae:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 80185b0:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 80185b4:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 80185b6:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80185b8:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 80185ba:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 80185bc:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80185be:	688d      	ldr	r5, [r1, #8]
 80185c0:	6085      	str	r5, [r0, #8]
      }
 80185c2:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 80185c4:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 80185c6:	e9c1 3300 	strd	r3, r3, [r1]
 80185ca:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 80185ce:	f7e8 fa87 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      }
 80185d2:	b005      	add	sp, #20
 80185d4:	bd30      	pop	{r4, r5, pc}
	...

080185d8 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80185d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80185dc:	e9d0 8a00 	ldrd	r8, sl, [r0]
 80185e0:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 80185e2:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80185e6:	ebaa 0208 	sub.w	r2, sl, r8
 80185ea:	4607      	mov	r7, r0
 80185ec:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 80185ee:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80185f2:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 80185f6:	d102      	bne.n	80185fe <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80185f8:	481e      	ldr	r0, [pc, #120]	@ (8018674 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
 80185fa:	f005 fdbb 	bl	801e174 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 80185fe:	45c2      	cmp	sl, r8
 8018600:	bf14      	ite	ne
 8018602:	4622      	movne	r2, r4
 8018604:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8018606:	eba1 0508 	sub.w	r5, r1, r8
 801860a:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801860c:	d22e      	bcs.n	801866c <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801860e:	b37c      	cbz	r4, 8018670 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8018610:	429c      	cmp	r4, r3
 8018612:	bf28      	it	cs
 8018614:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8018616:	00a0      	lsls	r0, r4, #2
 8018618:	f005 fcf7 	bl	801e00a <_Znwj>
 801861c:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801861e:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 8018622:	2d00      	cmp	r5, #0
 8018624:	5173      	str	r3, [r6, r5]
 8018626:	dd04      	ble.n	8018632 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8018628:	462a      	mov	r2, r5
 801862a:	4641      	mov	r1, r8
 801862c:	4630      	mov	r0, r6
 801862e:	f006 fc69 	bl	801ef04 <memmove>
      ptrdiff_t __count = __last - __first;
 8018632:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 8018636:	3504      	adds	r5, #4
      if (__count > 0)
 8018638:	f1ba 0f00 	cmp.w	sl, #0
 801863c:	4435      	add	r5, r6
 801863e:	dd04      	ble.n	801864a <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8018640:	4652      	mov	r2, sl
 8018642:	4649      	mov	r1, r9
 8018644:	4628      	mov	r0, r5
 8018646:	f006 fd55 	bl	801f0f4 <memcpy>
      return __result + __count;
 801864a:	4455      	add	r5, sl
	if (__p)
 801864c:	f1b8 0f00 	cmp.w	r8, #0
 8018650:	d005      	beq.n	801865e <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 8018652:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8018654:	4640      	mov	r0, r8
 8018656:	eba1 0108 	sub.w	r1, r1, r8
 801865a:	f005 fcb1 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 801865e:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8018662:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8018666:	60be      	str	r6, [r7, #8]
    }
 8018668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801866c:	461c      	mov	r4, r3
 801866e:	e7d2      	b.n	8018616 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018670:	4626      	mov	r6, r4
 8018672:	e7d4      	b.n	801861e <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8018674:	0801f20c 	.word	0x0801f20c

08018678 <_ZN10Publishers8AddTopicEht>:
bool Publishers::AddTopic(uint8_t ID, uint16_t topic_ID) {
 8018678:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801867c:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 801867e:	f10d 0203 	add.w	r2, sp, #3
bool Publishers::AddTopic(uint8_t ID, uint16_t topic_ID) {
 8018682:	4605      	mov	r5, r0
 8018684:	4688      	mov	r8, r1
	Publisher* publisher = FindPublisher(ID, &success);
 8018686:	f7ff fd7d 	bl	8018184 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 801868a:	f89d 7003 	ldrb.w	r7, [sp, #3]
	Publisher* publisher = FindPublisher(ID, &success);
 801868e:	4604      	mov	r4, r0
	if (!success) return false;
 8018690:	b927      	cbnz	r7, 801869c <_ZN10Publishers8AddTopicEht+0x24>
 8018692:	2700      	movs	r7, #0
}
 8018694:	4638      	mov	r0, r7
 8018696:	b002      	add	sp, #8
 8018698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	FindTopic(ID, topic_ID, &success);
 801869c:	f10d 0303 	add.w	r3, sp, #3
 80186a0:	4632      	mov	r2, r6
 80186a2:	4641      	mov	r1, r8
 80186a4:	4628      	mov	r0, r5
 80186a6:	f7ff fe1e 	bl	80182e6 <_ZN10Publishers9FindTopicEhtPb>
	if (success) return false;
 80186aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d1ef      	bne.n	8018692 <_ZN10Publishers8AddTopicEht+0x1a>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80186b2:	f04f 31ff 	mov.w	r1, #4294967295
 80186b6:	6828      	ldr	r0, [r5, #0]
	topic.activated = false;
 80186b8:	f88d 3004 	strb.w	r3, [sp, #4]
	topic.ID = topic_ID;
 80186bc:	f8ad 6006 	strh.w	r6, [sp, #6]
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80186c0:	f7f4 fbd2 	bl	800ce68 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80186c4:	e9d4 1306 	ldrd	r1, r3, [r4, #24]
 80186c8:	4299      	cmp	r1, r3
 80186ca:	d007      	beq.n	80186dc <_ZN10Publishers8AddTopicEht+0x64>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80186cc:	9801      	ldr	r0, [sp, #4]
 80186ce:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
 80186d2:	61a1      	str	r1, [r4, #24]
	osSemaphoreRelease(PublishersSemaphore);
 80186d4:	6828      	ldr	r0, [r5, #0]
 80186d6:	f7f4 fbfb 	bl	800ced0 <osSemaphoreRelease>
	return true;
 80186da:	e7db      	b.n	8018694 <_ZN10Publishers8AddTopicEht+0x1c>
	  _M_realloc_insert(end(), __x);
 80186dc:	aa01      	add	r2, sp, #4
 80186de:	f104 0014 	add.w	r0, r4, #20
 80186e2:	f7ff ff79 	bl	80185d8 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 80186e6:	e7f5      	b.n	80186d4 <_ZN10Publishers8AddTopicEht+0x5c>

080186e8 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80186e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80186ec:	e9d0 8a00 	ldrd	r8, sl, [r0]
 80186f0:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 80186f2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80186f6:	ebaa 0208 	sub.w	r2, sl, r8
 80186fa:	4607      	mov	r7, r0
 80186fc:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 80186fe:	ebb3 0f62 	cmp.w	r3, r2, asr #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018702:	ea4f 0462 	mov.w	r4, r2, asr #1
	if (max_size() - size() < __n)
 8018706:	d102      	bne.n	801870e <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8018708:	481e      	ldr	r0, [pc, #120]	@ (8018784 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
 801870a:	f005 fd33 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 801870e:	45c2      	cmp	sl, r8
 8018710:	bf14      	ite	ne
 8018712:	4622      	movne	r2, r4
 8018714:	2201      	moveq	r2, #1
 8018716:	eba1 0508 	sub.w	r5, r1, r8
 801871a:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801871c:	d22e      	bcs.n	801877c <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801871e:	b37c      	cbz	r4, 8018780 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8018720:	429c      	cmp	r4, r3
 8018722:	bf28      	it	cs
 8018724:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8018726:	0060      	lsls	r0, r4, #1
 8018728:	f005 fc6f 	bl	801e00a <_Znwj>
 801872c:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801872e:	f8bb 3000 	ldrh.w	r3, [fp]
      if (__count > 0)
 8018732:	2d00      	cmp	r5, #0
 8018734:	5373      	strh	r3, [r6, r5]
 8018736:	dd04      	ble.n	8018742 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8018738:	462a      	mov	r2, r5
 801873a:	4641      	mov	r1, r8
 801873c:	4630      	mov	r0, r6
 801873e:	f006 fbe1 	bl	801ef04 <memmove>
      ptrdiff_t __count = __last - __first;
 8018742:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 8018746:	3502      	adds	r5, #2
      if (__count > 0)
 8018748:	f1ba 0f00 	cmp.w	sl, #0
 801874c:	4435      	add	r5, r6
 801874e:	dd04      	ble.n	801875a <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8018750:	4652      	mov	r2, sl
 8018752:	4649      	mov	r1, r9
 8018754:	4628      	mov	r0, r5
 8018756:	f006 fccd 	bl	801f0f4 <memcpy>
      return __result + __count;
 801875a:	4455      	add	r5, sl
	if (__p)
 801875c:	f1b8 0f00 	cmp.w	r8, #0
 8018760:	d005      	beq.n	801876e <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 8018762:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8018764:	4640      	mov	r0, r8
 8018766:	eba1 0108 	sub.w	r1, r1, r8
 801876a:	f005 fc29 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 801876e:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8018772:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 8018776:	60be      	str	r6, [r7, #8]
    }
 8018778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801877c:	461c      	mov	r4, r3
 801877e:	e7d2      	b.n	8018726 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018780:	4626      	mov	r6, r4
 8018782:	e7d4      	b.n	801872e <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8018784:	0801f20c 	.word	0x0801f20c

08018788 <_ZN10Publishers15LinkToInterfaceEhh>:
bool Publishers::LinkToInterface(uint8_t ID, uint8_t interface_ID) {
 8018788:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801878c:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 801878e:	f10d 0203 	add.w	r2, sp, #3
bool Publishers::LinkToInterface(uint8_t ID, uint8_t interface_ID) {
 8018792:	4605      	mov	r5, r0
 8018794:	4688      	mov	r8, r1
	Publisher* publisher = FindPublisher(ID, &success);
 8018796:	f7ff fcf5 	bl	8018184 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 801879a:	f89d 7003 	ldrb.w	r7, [sp, #3]
	Publisher* publisher = FindPublisher(ID, &success);
 801879e:	4604      	mov	r4, r0
	if (!success) return false;
 80187a0:	b927      	cbnz	r7, 80187ac <_ZN10Publishers15LinkToInterfaceEhh+0x24>
 80187a2:	2700      	movs	r7, #0
}
 80187a4:	4638      	mov	r0, r7
 80187a6:	b002      	add	sp, #8
 80187a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	FindPublishInterface(ID, interface_ID, &success);
 80187ac:	f10d 0303 	add.w	r3, sp, #3
 80187b0:	4632      	mov	r2, r6
 80187b2:	4641      	mov	r1, r8
 80187b4:	4628      	mov	r0, r5
 80187b6:	f7ff fde6 	bl	8018386 <_ZN10Publishers20FindPublishInterfaceEhhPb>
	if (success) return false;
 80187ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d1ef      	bne.n	80187a2 <_ZN10Publishers15LinkToInterfaceEhh+0x1a>
	interface.address = ALL;
 80187c2:	23ff      	movs	r3, #255	@ 0xff
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80187c4:	f04f 31ff 	mov.w	r1, #4294967295
 80187c8:	6828      	ldr	r0, [r5, #0]
	interface.address = ALL;
 80187ca:	f88d 3005 	strb.w	r3, [sp, #5]
	interface.interface = interface_ID;
 80187ce:	f88d 6004 	strb.w	r6, [sp, #4]
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80187d2:	f7f4 fb49 	bl	800ce68 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80187d6:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 80187da:	4299      	cmp	r1, r3
 80187dc:	d008      	beq.n	80187f0 <_ZN10Publishers15LinkToInterfaceEhh+0x68>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80187de:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80187e2:	f821 3b02 	strh.w	r3, [r1], #2
	    ++this->_M_impl._M_finish;
 80187e6:	60e1      	str	r1, [r4, #12]
	osSemaphoreRelease(PublishersSemaphore);
 80187e8:	6828      	ldr	r0, [r5, #0]
 80187ea:	f7f4 fb71 	bl	800ced0 <osSemaphoreRelease>
	return true;
 80187ee:	e7d9      	b.n	80187a4 <_ZN10Publishers15LinkToInterfaceEhh+0x1c>
	  _M_realloc_insert(end(), __x);
 80187f0:	aa01      	add	r2, sp, #4
 80187f2:	f104 0008 	add.w	r0, r4, #8
 80187f6:	f7ff ff77 	bl	80186e8 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 80187fa:	e7f5      	b.n	80187e8 <_ZN10Publishers15LinkToInterfaceEhh+0x60>

080187fc <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80187fc:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80187fe:	4611      	mov	r1, r2
 8018800:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8018802:	d105      	bne.n	8018810 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x14>
			self->LinkToInterface(input[0], input[1]);
 8018804:	7852      	ldrb	r2, [r2, #1]
 8018806:	7809      	ldrb	r1, [r1, #0]
 8018808:	f7ff ffbe 	bl	8018788 <_ZN10Publishers15LinkToInterfaceEhh>
 801880c:	2001      	movs	r0, #1
		}
 801880e:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8018810:	2000      	movs	r0, #0
 8018812:	e7fc      	b.n	801880e <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x12>

08018814 <_ZNSt6vectorImSaImEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>:
      _M_move_assign(vector&& __x, true_type) noexcept
 8018814:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8018816:	680d      	ldr	r5, [r1, #0]
      _M_move_assign(vector&& __x, true_type) noexcept
 8018818:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 801881a:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 801881c:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8018820:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8018822:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8018824:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8018826:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8018828:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 801882a:	688d      	ldr	r5, [r1, #8]
 801882c:	6085      	str	r5, [r0, #8]
      }
 801882e:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8018830:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8018832:	e9c1 3300 	strd	r3, r3, [r1]
 8018836:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 801883a:	f7f8 fb0f 	bl	8010e5c <_ZNSt12_Vector_baseImSaImEED1Ev>
      }
 801883e:	b005      	add	sp, #20
 8018840:	bd30      	pop	{r4, r5, pc}

08018842 <_ZNSt6vectorIaSaIaEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>:
      _M_move_assign(vector&& __x, true_type) noexcept
 8018842:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8018844:	680d      	ldr	r5, [r1, #0]
      _M_move_assign(vector&& __x, true_type) noexcept
 8018846:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8018848:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 801884a:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 801884e:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8018850:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8018852:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8018854:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8018856:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8018858:	688d      	ldr	r5, [r1, #8]
 801885a:	6085      	str	r5, [r0, #8]
      }
 801885c:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 801885e:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8018860:	e9c1 3300 	strd	r3, r3, [r1]
 8018864:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8018868:	f7f8 fb2d 	bl	8010ec6 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
      }
 801886c:	b005      	add	sp, #20
 801886e:	bd30      	pop	{r4, r5, pc}

08018870 <_ZNSt6vectorIfSaIfEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>:
      _M_move_assign(vector&& __x, true_type) noexcept
 8018870:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8018872:	680d      	ldr	r5, [r1, #0]
      _M_move_assign(vector&& __x, true_type) noexcept
 8018874:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8018876:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8018878:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 801887c:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 801887e:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8018880:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8018882:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8018884:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8018886:	688d      	ldr	r5, [r1, #8]
 8018888:	6085      	str	r5, [r0, #8]
      }
 801888a:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 801888c:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 801888e:	e9c1 3300 	strd	r3, r3, [r1]
 8018892:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8018896:	f7e9 fb81 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      }
 801889a:	b005      	add	sp, #20
 801889c:	bd30      	pop	{r4, r5, pc}

0801889e <_ZN9Registers11AddRegisterItEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 801889e:	b570      	push	{r4, r5, r6, lr}
 80188a0:	4604      	mov	r4, r0
 80188a2:	b086      	sub	sp, #24
 80188a4:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80188a6:	6800      	ldr	r0, [r0, #0]
 80188a8:	f04f 31ff 	mov.w	r1, #4294967295
 80188ac:	f7f4 fadc 	bl	800ce68 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 80188b0:	f10d 0207 	add.w	r2, sp, #7
 80188b4:	4631      	mov	r1, r6
 80188b6:	4620      	mov	r0, r4
 80188b8:	f000 ffd3 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 80188bc:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80188c0:	b125      	cbz	r5, 80188cc <_ZN9Registers11AddRegisterItEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 80188c2:	6820      	ldr	r0, [r4, #0]
 80188c4:	f7f4 fb04 	bl	800ced0 <osSemaphoreRelease>
}
 80188c8:	b006      	add	sp, #24
 80188ca:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80188cc:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 80188d0:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80188d4:	f7ff fbac 	bl	8018030 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	configuration_.register_info = register_;
 80188d8:	2301      	movs	r3, #1
 80188da:	f8ad 600a 	strh.w	r6, [sp, #10]
 80188de:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 80188e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 80188e6:	f88d 000c 	strb.w	r0, [sp, #12]
 80188ea:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 80188ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d0e5      	beq.n	80188c2 <_ZN9Registers11AddRegisterItEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 80188f6:	a902      	add	r1, sp, #8
 80188f8:	1d20      	adds	r0, r4, #4
 80188fa:	f7f7 fae7 	bl	800fecc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 80188fe:	e7e0      	b.n	80188c2 <_ZN9Registers11AddRegisterItEEbt.isra.0+0x24>

08018900 <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8018900:	b570      	push	{r4, r5, r6, lr}
 8018902:	4604      	mov	r4, r0
 8018904:	b086      	sub	sp, #24
 8018906:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018908:	6800      	ldr	r0, [r0, #0]
 801890a:	f04f 31ff 	mov.w	r1, #4294967295
 801890e:	f7f4 faab 	bl	800ce68 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8018912:	f10d 0207 	add.w	r2, sp, #7
 8018916:	4631      	mov	r1, r6
 8018918:	4620      	mov	r0, r4
 801891a:	f000 ffa2 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801891e:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8018922:	b125      	cbz	r5, 801892e <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8018924:	6820      	ldr	r0, [r4, #0]
 8018926:	f7f4 fad3 	bl	800ced0 <osSemaphoreRelease>
}
 801892a:	b006      	add	sp, #24
 801892c:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801892e:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8018932:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8018936:	f7ff fbc9 	bl	80180cc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 801893a:	2301      	movs	r3, #1
 801893c:	f8ad 600a 	strh.w	r6, [sp, #10]
 8018940:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8018944:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8018948:	f88d 000c 	strb.w	r0, [sp, #12]
 801894c:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8018950:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8018954:	2b00      	cmp	r3, #0
 8018956:	d0e5      	beq.n	8018924 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8018958:	a902      	add	r1, sp, #8
 801895a:	1d20      	adds	r0, r4, #4
 801895c:	f7f7 fab6 	bl	800fecc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8018960:	e7e0      	b.n	8018924 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	...

08018964 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8018964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018968:	460c      	mov	r4, r1
 801896a:	b087      	sub	sp, #28
 801896c:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801896e:	f04f 31ff 	mov.w	r1, #4294967295
 8018972:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8018974:	4698      	mov	r8, r3
 8018976:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018978:	f7f4 fa76 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801897c:	4621      	mov	r1, r4
 801897e:	f10d 0207 	add.w	r2, sp, #7
 8018982:	4630      	mov	r0, r6
 8018984:	f000 ff6d 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8018988:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801898c:	4604      	mov	r4, r0
	if (!success) {
 801898e:	b92b      	cbnz	r3, 801899c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 8018990:	6830      	ldr	r0, [r6, #0]
 8018992:	f7f4 fa9d 	bl	800ced0 <osSemaphoreRelease>
}
 8018996:	b007      	add	sp, #28
 8018998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801899c:	f10d 0007 	add.w	r0, sp, #7
 80189a0:	f7ff fb94 	bl	80180cc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 80189a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d0f1      	beq.n	8018990 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 80189ac:	7923      	ldrb	r3, [r4, #4]
 80189ae:	4298      	cmp	r0, r3
 80189b0:	d1ee      	bne.n	8018990 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 80189b2:	3004      	adds	r0, #4
 80189b4:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 80189b8:	2f00      	cmp	r7, #0
 80189ba:	d0e9      	beq.n	8018990 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 80189bc:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80189be:	e9d7 3500 	ldrd	r3, r5, [r7]
 80189c2:	1aea      	subs	r2, r5, r3
 80189c4:	1112      	asrs	r2, r2, #4
 80189c6:	b9b1      	cbnz	r1, 80189f6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 80189c8:	7861      	ldrb	r1, [r4, #1]
 80189ca:	b9a1      	cbnz	r1, 80189f6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 80189cc:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80189ce:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 80189d0:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 80189d2:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80189d4:	42a9      	cmp	r1, r5
		callback.write = write;
 80189d6:	e9cd 9803 	strd	r9, r8, [sp, #12]
 80189da:	d008      	beq.n	80189ee <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
 80189dc:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80189de:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 80189e2:	3510      	adds	r5, #16
 80189e4:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 80189e6:	2301      	movs	r3, #1
 80189e8:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 80189ea:	7223      	strb	r3, [r4, #8]
 80189ec:	e7d0      	b.n	8018990 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 80189ee:	4638      	mov	r0, r7
 80189f0:	f7f8 f8d0 	bl	8010b94 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 80189f4:	e7f7      	b.n	80189e6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 80189f6:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 80189f8:	4291      	cmp	r1, r2
 80189fa:	d302      	bcc.n	8018a02 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 80189fc:	4803      	ldr	r0, [pc, #12]	@ (8018a0c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 80189fe:	f005 fbbc 	bl	801e17a <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8018a02:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8018a06:	e9c3 9801 	strd	r9, r8, [r3, #4]
 8018a0a:	e7ec      	b.n	80189e6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 8018a0c:	0801f44c 	.word	0x0801f44c

08018a10 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8018a10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018a14:	e9d0 8900 	ldrd	r8, r9, [r0]
 8018a18:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8018a1a:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018a1e:	eba9 0208 	sub.w	r2, r9, r8
 8018a22:	4607      	mov	r7, r0
 8018a24:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 8018a26:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018a2a:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 8018a2e:	d102      	bne.n	8018a36 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8018a30:	4820      	ldr	r0, [pc, #128]	@ (8018ab4 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 8018a32:	f005 fb9f 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 8018a36:	45c1      	cmp	r9, r8
 8018a38:	bf14      	ite	ne
 8018a3a:	4622      	movne	r2, r4
 8018a3c:	2201      	moveq	r2, #1
 8018a3e:	eba1 0508 	sub.w	r5, r1, r8
 8018a42:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8018a44:	d231      	bcs.n	8018aaa <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018a46:	b394      	cbz	r4, 8018aae <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8018a48:	429c      	cmp	r4, r3
 8018a4a:	bf28      	it	cs
 8018a4c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8018a4e:	0120      	lsls	r0, r4, #4
 8018a50:	f005 fadb 	bl	801e00a <_Znwj>
 8018a54:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8018a56:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8018a5a:	2d00      	cmp	r5, #0
 8018a5c:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8018a60:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8018a64:	dd04      	ble.n	8018a70 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8018a66:	462a      	mov	r2, r5
 8018a68:	4641      	mov	r1, r8
 8018a6a:	4630      	mov	r0, r6
 8018a6c:	f006 fa4a 	bl	801ef04 <memmove>
      ptrdiff_t __count = __last - __first;
 8018a70:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8018a74:	3510      	adds	r5, #16
      if (__count > 0)
 8018a76:	f1b9 0f00 	cmp.w	r9, #0
 8018a7a:	4435      	add	r5, r6
 8018a7c:	dd04      	ble.n	8018a88 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8018a7e:	464a      	mov	r2, r9
 8018a80:	4651      	mov	r1, sl
 8018a82:	4628      	mov	r0, r5
 8018a84:	f006 fb36 	bl	801f0f4 <memcpy>
      return __result + __count;
 8018a88:	444d      	add	r5, r9
	if (__p)
 8018a8a:	f1b8 0f00 	cmp.w	r8, #0
 8018a8e:	d005      	beq.n	8018a9c <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 8018a90:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8018a92:	4640      	mov	r0, r8
 8018a94:	eba1 0108 	sub.w	r1, r1, r8
 8018a98:	f005 fa92 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8018a9c:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8018aa0:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8018aa4:	60be      	str	r6, [r7, #8]
    }
 8018aa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8018aaa:	461c      	mov	r4, r3
 8018aac:	e7cf      	b.n	8018a4e <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018aae:	4626      	mov	r6, r4
 8018ab0:	e7d1      	b.n	8018a56 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8018ab2:	bf00      	nop
 8018ab4:	0801f20c 	.word	0x0801f20c

08018ab8 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8018ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018abc:	460c      	mov	r4, r1
 8018abe:	b087      	sub	sp, #28
 8018ac0:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018ac2:	f04f 31ff 	mov.w	r1, #4294967295
 8018ac6:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8018ac8:	4698      	mov	r8, r3
 8018aca:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018acc:	f7f4 f9cc 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018ad0:	4621      	mov	r1, r4
 8018ad2:	f10d 0207 	add.w	r2, sp, #7
 8018ad6:	4630      	mov	r0, r6
 8018ad8:	f000 fec3 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8018adc:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018ae0:	4604      	mov	r4, r0
	if (!success) {
 8018ae2:	b92b      	cbnz	r3, 8018af0 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 8018ae4:	6830      	ldr	r0, [r6, #0]
 8018ae6:	f7f4 f9f3 	bl	800ced0 <osSemaphoreRelease>
}
 8018aea:	b007      	add	sp, #28
 8018aec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8018af0:	f10d 0007 	add.w	r0, sp, #7
 8018af4:	f7ff fa9c 	bl	8018030 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	if (!success) {
 8018af8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d0f1      	beq.n	8018ae4 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 8018b00:	7923      	ldrb	r3, [r4, #4]
 8018b02:	4298      	cmp	r0, r3
 8018b04:	d1ee      	bne.n	8018ae4 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 8018b06:	3004      	adds	r0, #4
 8018b08:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8018b0c:	2f00      	cmp	r7, #0
 8018b0e:	d0e9      	beq.n	8018ae4 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8018b10:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018b12:	e9d7 3500 	ldrd	r3, r5, [r7]
 8018b16:	1aea      	subs	r2, r5, r3
 8018b18:	1112      	asrs	r2, r2, #4
 8018b1a:	b9b1      	cbnz	r1, 8018b4a <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 8018b1c:	7861      	ldrb	r1, [r4, #1]
 8018b1e:	b9a1      	cbnz	r1, 8018b4a <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 8018b20:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8018b22:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8018b24:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 8018b26:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8018b28:	42a9      	cmp	r1, r5
		callback.write = write;
 8018b2a:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8018b2e:	d008      	beq.n	8018b42 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8018b30:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8018b32:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8018b36:	3510      	adds	r5, #16
 8018b38:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 8018b3a:	2301      	movs	r3, #1
 8018b3c:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8018b3e:	7223      	strb	r3, [r4, #8]
 8018b40:	e7d0      	b.n	8018ae4 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 8018b42:	4638      	mov	r0, r7
 8018b44:	f7ff ff64 	bl	8018a10 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8018b48:	e7f7      	b.n	8018b3a <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8018b4a:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 8018b4c:	4291      	cmp	r1, r2
 8018b4e:	d302      	bcc.n	8018b56 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8018b50:	4803      	ldr	r0, [pc, #12]	@ (8018b60 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 8018b52:	f005 fb12 	bl	801e17a <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8018b56:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8018b5a:	e9c3 9801 	strd	r9, r8, [r3, #4]
 8018b5e:	e7ec      	b.n	8018b3a <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 8018b60:	0801f44c 	.word	0x0801f44c

08018b64 <_ZN10Publishers12AddRegistersEv>:
void Publishers::AddRegisters(void) {
 8018b64:	b510      	push	{r4, lr}
 8018b66:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_PUB_SET_STATUS);
 8018b68:	2110      	movs	r1, #16
 8018b6a:	6840      	ldr	r0, [r0, #4]
 8018b6c:	f7ff fec8 	bl	8018900 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_STATUS, 2);
 8018b70:	2202      	movs	r2, #2
 8018b72:	2110      	movs	r1, #16
 8018b74:	6860      	ldr	r0, [r4, #4]
 8018b76:	f000 fec9 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_SET_STATUS, (void*) this,
 8018b7a:	4b37      	ldr	r3, [pc, #220]	@ (8018c58 <_ZN10Publishers12AddRegistersEv+0xf4>)
 8018b7c:	4622      	mov	r2, r4
 8018b7e:	6860      	ldr	r0, [r4, #4]
 8018b80:	2110      	movs	r1, #16
 8018b82:	f7ff feef 	bl	8018964 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_PUB_SET_TOPIC_STATUS);
 8018b86:	6860      	ldr	r0, [r4, #4]
 8018b88:	2111      	movs	r1, #17
 8018b8a:	f7ff fe88 	bl	801889e <_ZN9Registers11AddRegisterItEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_TOPIC_STATUS, 3);
 8018b8e:	2203      	movs	r2, #3
 8018b90:	2111      	movs	r1, #17
 8018b92:	6860      	ldr	r0, [r4, #4]
 8018b94:	f000 feba 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_PUB_SET_TOPIC_STATUS, (void*) this,
 8018b98:	4b30      	ldr	r3, [pc, #192]	@ (8018c5c <_ZN10Publishers12AddRegistersEv+0xf8>)
 8018b9a:	4622      	mov	r2, r4
 8018b9c:	6860      	ldr	r0, [r4, #4]
 8018b9e:	2111      	movs	r1, #17
 8018ba0:	f7ff ff8a 	bl	8018ab8 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_PUB_SET_PRESCALER);
 8018ba4:	6860      	ldr	r0, [r4, #4]
 8018ba6:	2112      	movs	r1, #18
 8018ba8:	f7ff fe79 	bl	801889e <_ZN9Registers11AddRegisterItEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_PRESCALER, 2);
 8018bac:	2202      	movs	r2, #2
 8018bae:	2112      	movs	r1, #18
 8018bb0:	6860      	ldr	r0, [r4, #4]
 8018bb2:	f000 feab 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_PUB_SET_PRESCALER, (void*) this,
 8018bb6:	4622      	mov	r2, r4
 8018bb8:	4b29      	ldr	r3, [pc, #164]	@ (8018c60 <_ZN10Publishers12AddRegistersEv+0xfc>)
 8018bba:	2112      	movs	r1, #18
 8018bbc:	6860      	ldr	r0, [r4, #4]
 8018bbe:	f7ff ff7b 	bl	8018ab8 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_STOP_TOPICS);
 8018bc2:	6860      	ldr	r0, [r4, #4]
 8018bc4:	2113      	movs	r1, #19
 8018bc6:	f7ff fe9b 	bl	8018900 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_PUB_STOP_TOPICS);
 8018bca:	2113      	movs	r1, #19
 8018bcc:	6860      	ldr	r0, [r4, #4]
 8018bce:	f000 fe81 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_STOP_TOPICS, (void*) this,
 8018bd2:	4b24      	ldr	r3, [pc, #144]	@ (8018c64 <_ZN10Publishers12AddRegistersEv+0x100>)
 8018bd4:	4622      	mov	r2, r4
 8018bd6:	6860      	ldr	r0, [r4, #4]
 8018bd8:	2113      	movs	r1, #19
 8018bda:	f7ff fec3 	bl	8018964 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_LINK_INTERFACE);
 8018bde:	6860      	ldr	r0, [r4, #4]
 8018be0:	2114      	movs	r1, #20
 8018be2:	f7ff fe8d 	bl	8018900 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_LINK_INTERFACE, 2);
 8018be6:	2202      	movs	r2, #2
 8018be8:	2114      	movs	r1, #20
 8018bea:	6860      	ldr	r0, [r4, #4]
 8018bec:	f000 fe8e 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_LINK_INTERFACE, (void*) this,
 8018bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8018c68 <_ZN10Publishers12AddRegistersEv+0x104>)
 8018bf2:	4622      	mov	r2, r4
 8018bf4:	6860      	ldr	r0, [r4, #4]
 8018bf6:	2114      	movs	r1, #20
 8018bf8:	f7ff feb4 	bl	8018964 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_UNLINK_INTERFACE);
 8018bfc:	6860      	ldr	r0, [r4, #4]
 8018bfe:	2115      	movs	r1, #21
 8018c00:	f7ff fe7e 	bl	8018900 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_UNLINK_INTERFACE, 2);
 8018c04:	2202      	movs	r2, #2
 8018c06:	2115      	movs	r1, #21
 8018c08:	6860      	ldr	r0, [r4, #4]
 8018c0a:	f000 fe7f 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_UNLINK_INTERFACE, (void*) this,
 8018c0e:	4622      	mov	r2, r4
 8018c10:	4b16      	ldr	r3, [pc, #88]	@ (8018c6c <_ZN10Publishers12AddRegistersEv+0x108>)
 8018c12:	2115      	movs	r1, #21
 8018c14:	6860      	ldr	r0, [r4, #4]
 8018c16:	f7ff fea5 	bl	8018964 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_CLEAR_INTERFACES);
 8018c1a:	6860      	ldr	r0, [r4, #4]
 8018c1c:	2116      	movs	r1, #22
 8018c1e:	f7ff fe6f 	bl	8018900 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_PUB_CLEAR_INTERFACES);
 8018c22:	2116      	movs	r1, #22
 8018c24:	6860      	ldr	r0, [r4, #4]
 8018c26:	f000 fe55 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_CLEAR_INTERFACES, (void*) this,
 8018c2a:	4b11      	ldr	r3, [pc, #68]	@ (8018c70 <_ZN10Publishers12AddRegistersEv+0x10c>)
 8018c2c:	4622      	mov	r2, r4
 8018c2e:	6860      	ldr	r0, [r4, #4]
 8018c30:	2116      	movs	r1, #22
 8018c32:	f7ff fe97 	bl	8018964 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_SET_TARGET_ADDRESS);
 8018c36:	6860      	ldr	r0, [r4, #4]
 8018c38:	2117      	movs	r1, #23
 8018c3a:	f7ff fe61 	bl	8018900 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_TARGET_ADDRESS, 3);
 8018c3e:	2203      	movs	r2, #3
 8018c40:	2117      	movs	r1, #23
 8018c42:	6860      	ldr	r0, [r4, #4]
 8018c44:	f000 fe62 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_SET_TARGET_ADDRESS, (void*) this,
 8018c48:	4622      	mov	r2, r4
 8018c4a:	6860      	ldr	r0, [r4, #4]
 8018c4c:	2117      	movs	r1, #23
 8018c4e:	4b09      	ldr	r3, [pc, #36]	@ (8018c74 <_ZN10Publishers12AddRegistersEv+0x110>)
}
 8018c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_PUB_SET_TARGET_ADDRESS, (void*) this,
 8018c54:	f7ff be86 	b.w	8018964 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 8018c58:	080181fd 	.word	0x080181fd
 8018c5c:	08018367 	.word	0x08018367
 8018c60:	08018249 	.word	0x08018249
 8018c64:	0801829b 	.word	0x0801829b
 8018c68:	080187fd 	.word	0x080187fd
 8018c6c:	080184e1 	.word	0x080184e1
 8018c70:	080182db 	.word	0x080182db
 8018c74:	08018407 	.word	0x08018407

08018c78 <_ZN9PublisherC1ERKS_>:
 8018c78:	b570      	push	{r4, r5, r6, lr}
 8018c7a:	680a      	ldr	r2, [r1, #0]
 8018c7c:	4604      	mov	r4, r0
 8018c7e:	888b      	ldrh	r3, [r1, #4]
 8018c80:	460d      	mov	r5, r1
 8018c82:	6002      	str	r2, [r0, #0]
 8018c84:	8083      	strh	r3, [r0, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018c86:	2300      	movs	r3, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018c88:	e9d1 2602 	ldrd	r2, r6, [r1, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018c8c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018c90:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018c92:	6103      	str	r3, [r0, #16]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018c94:	d03c      	beq.n	8018d10 <_ZN9PublisherC1ERKS_+0x98>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8018c96:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018c9a:	429e      	cmp	r6, r3
 8018c9c:	d301      	bcc.n	8018ca2 <_ZN9PublisherC1ERKS_+0x2a>
	      std::__throw_bad_array_new_length();
 8018c9e:	f005 fa66 	bl	801e16e <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8018ca2:	4630      	mov	r0, r6
 8018ca4:	f005 f9b1 	bl	801e00a <_Znwj>
 8018ca8:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018caa:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8018cac:	e9c4 3302 	strd	r3, r3, [r4, #8]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018cb0:	6126      	str	r6, [r4, #16]
      : _M_current(__i) { }
 8018cb2:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
	  if (_Num)
 8018cb6:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 8018cb8:	eba2 0601 	sub.w	r6, r2, r1
	  if (_Num)
 8018cbc:	d004      	beq.n	8018cc8 <_ZN9PublisherC1ERKS_+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8018cbe:	4618      	mov	r0, r3
 8018cc0:	4632      	mov	r2, r6
 8018cc2:	f006 f91f 	bl	801ef04 <memmove>
 8018cc6:	4603      	mov	r3, r0
	  return __result + _Num;
 8018cc8:	4433      	add	r3, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018cca:	e9d5 2605 	ldrd	r2, r6, [r5, #20]
	this->_M_impl._M_finish =
 8018cce:	60e3      	str	r3, [r4, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018cd0:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018cd2:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018cd4:	61e3      	str	r3, [r4, #28]
 8018cd6:	e9c4 3305 	strd	r3, r3, [r4, #20]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018cda:	d01b      	beq.n	8018d14 <_ZN9PublisherC1ERKS_+0x9c>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8018cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8018d18 <_ZN9PublisherC1ERKS_+0xa0>)
 8018cde:	429e      	cmp	r6, r3
 8018ce0:	d8dd      	bhi.n	8018c9e <_ZN9PublisherC1ERKS_+0x26>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8018ce2:	4630      	mov	r0, r6
 8018ce4:	f005 f991 	bl	801e00a <_Znwj>
 8018ce8:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018cea:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8018cec:	e9c4 3305 	strd	r3, r3, [r4, #20]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018cf0:	61e6      	str	r6, [r4, #28]
 8018cf2:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
	  if (_Num)
 8018cf6:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 8018cf8:	eba2 0501 	sub.w	r5, r2, r1
	  if (_Num)
 8018cfc:	d004      	beq.n	8018d08 <_ZN9PublisherC1ERKS_+0x90>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8018cfe:	4618      	mov	r0, r3
 8018d00:	462a      	mov	r2, r5
 8018d02:	f006 f8ff 	bl	801ef04 <memmove>
 8018d06:	4603      	mov	r3, r0
	  return __result + _Num;
 8018d08:	442b      	add	r3, r5
 8018d0a:	4620      	mov	r0, r4
	this->_M_impl._M_finish =
 8018d0c:	61a3      	str	r3, [r4, #24]
 8018d0e:	bd70      	pop	{r4, r5, r6, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018d10:	4633      	mov	r3, r6
 8018d12:	e7ca      	b.n	8018caa <_ZN9PublisherC1ERKS_+0x32>
 8018d14:	4633      	mov	r3, r6
 8018d16:	e7e8      	b.n	8018cea <_ZN9PublisherC1ERKS_+0x72>
 8018d18:	7ffffffc 	.word	0x7ffffffc

08018d1c <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8018d1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018d20:	e9d0 7900 	ldrd	r7, r9, [r0]
 8018d24:	4692      	mov	sl, r2
	if (max_size() - size() < __n)
 8018d26:	f06f 437c 	mvn.w	r3, #4227858432	@ 0xfc000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018d2a:	eba9 0207 	sub.w	r2, r9, r7
 8018d2e:	4606      	mov	r6, r0
 8018d30:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
 8018d32:	ebb3 1f62 	cmp.w	r3, r2, asr #5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018d36:	ea4f 1462 	mov.w	r4, r2, asr #5
	if (max_size() - size() < __n)
 8018d3a:	d102      	bne.n	8018d42 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8018d3c:	481a      	ldr	r0, [pc, #104]	@ (8018da8 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>)
 8018d3e:	f005 fa19 	bl	801e174 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8018d42:	45b9      	cmp	r9, r7
 8018d44:	bf14      	ite	ne
 8018d46:	4622      	movne	r2, r4
 8018d48:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8018d4a:	eba1 0b07 	sub.w	fp, r1, r7
 8018d4e:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8018d50:	d225      	bcs.n	8018d9e <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018d52:	b334      	cbz	r4, 8018da2 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8018d54:	429c      	cmp	r4, r3
 8018d56:	bf28      	it	cs
 8018d58:	461c      	movcs	r4, r3
 8018d5a:	0160      	lsls	r0, r4, #5
 8018d5c:	f005 f955 	bl	801e00a <_Znwj>
 8018d60:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8018d62:	4651      	mov	r1, sl
 8018d64:	eb05 000b 	add.w	r0, r5, fp
 8018d68:	f7ff ff86 	bl	8018c78 <_ZN9PublisherC1ERKS_>
      return std::__relocate_a_1(std::__niter_base(__first),
 8018d6c:	4641      	mov	r1, r8
 8018d6e:	462a      	mov	r2, r5
 8018d70:	4638      	mov	r0, r7
 8018d72:	f7ff fbe5 	bl	8018540 <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 8018d76:	4649      	mov	r1, r9
 8018d78:	f100 0220 	add.w	r2, r0, #32
 8018d7c:	4640      	mov	r0, r8
 8018d7e:	f7ff fbdf 	bl	8018540 <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 8018d82:	4680      	mov	r8, r0
	if (__p)
 8018d84:	b127      	cbz	r7, 8018d90 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
		    this->_M_impl._M_end_of_storage - __old_start);
 8018d86:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8018d88:	4638      	mov	r0, r7
 8018d8a:	1bc9      	subs	r1, r1, r7
 8018d8c:	f005 f918 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8018d90:	eb05 1444 	add.w	r4, r5, r4, lsl #5
      this->_M_impl._M_finish = __new_finish;
 8018d94:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8018d98:	60b4      	str	r4, [r6, #8]
    }
 8018d9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8018d9e:	461c      	mov	r4, r3
 8018da0:	e7db      	b.n	8018d5a <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018da2:	4625      	mov	r5, r4
 8018da4:	e7dd      	b.n	8018d62 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8018da6:	bf00      	nop
 8018da8:	0801f20c 	.word	0x0801f20c

08018dac <_ZN10Publishers12AddPublisherEh>:
bool Publishers::AddPublisher(uint8_t ID) {
 8018dac:	b530      	push	{r4, r5, lr}
 8018dae:	b08b      	sub	sp, #44	@ 0x2c
 8018db0:	4604      	mov	r4, r0
 8018db2:	460d      	mov	r5, r1
	FindPublisher(ID, &success);
 8018db4:	f10d 0207 	add.w	r2, sp, #7
 8018db8:	f7ff f9e4 	bl	8018184 <_ZN10Publishers13FindPublisherEhPb>
	if (success)
 8018dbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018dc0:	bb6b      	cbnz	r3, 8018e1e <_ZN10Publishers12AddPublisherEh+0x72>
	publisher.prescaler = 1;
 8018dc2:	2201      	movs	r2, #1
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8018dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8018dc8:	6820      	ldr	r0, [r4, #0]
	publisher.activated = false;
 8018dca:	f88d 3009 	strb.w	r3, [sp, #9]
	publisher.counter = 0;
 8018dce:	f8ad 300c 	strh.w	r3, [sp, #12]
	publisher.ID = ID;
 8018dd2:	f88d 5008 	strb.w	r5, [sp, #8]
	publisher.prescaler = 1;
 8018dd6:	f8ad 200a 	strh.w	r2, [sp, #10]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018dda:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8018dde:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8018de2:	e9cd 3308 	strd	r3, r3, [sp, #32]
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8018de6:	f7f4 f83f 	bl	800ce68 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8018dea:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
 8018dee:	4298      	cmp	r0, r3
 8018df0:	d00e      	beq.n	8018e10 <_ZN10Publishers12AddPublisherEh+0x64>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8018df2:	a902      	add	r1, sp, #8
 8018df4:	f7ff ff40 	bl	8018c78 <_ZN9PublisherC1ERKS_>
	    ++this->_M_impl._M_finish;
 8018df8:	6923      	ldr	r3, [r4, #16]
 8018dfa:	3320      	adds	r3, #32
 8018dfc:	6123      	str	r3, [r4, #16]
	osSemaphoreRelease(PublishersSemaphore);
 8018dfe:	6820      	ldr	r0, [r4, #0]
 8018e00:	f7f4 f866 	bl	800ced0 <osSemaphoreRelease>
}
 8018e04:	a802      	add	r0, sp, #8
 8018e06:	f7ff fb8b 	bl	8018520 <_ZN9PublisherD1Ev>
	return true;
 8018e0a:	2001      	movs	r0, #1
}
 8018e0c:	b00b      	add	sp, #44	@ 0x2c
 8018e0e:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 8018e10:	4601      	mov	r1, r0
 8018e12:	aa02      	add	r2, sp, #8
 8018e14:	f104 000c 	add.w	r0, r4, #12
 8018e18:	f7ff ff80 	bl	8018d1c <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8018e1c:	e7ef      	b.n	8018dfe <_ZN10Publishers12AddPublisherEh+0x52>
		return false;
 8018e1e:	2000      	movs	r0, #0
 8018e20:	e7f4      	b.n	8018e0c <_ZN10Publishers12AddPublisherEh+0x60>
	...

08018e24 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb>:
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 8018e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e28:	4680      	mov	r8, r0
 8018e2a:	b0c5      	sub	sp, #276	@ 0x114
 8018e2c:	468a      	mov	sl, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018e2e:	6800      	ldr	r0, [r0, #0]
 8018e30:	f04f 31ff 	mov.w	r1, #4294967295
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 8018e34:	9300      	str	r3, [sp, #0]
 8018e36:	4616      	mov	r6, r2
 8018e38:	f89d b138 	ldrb.w	fp, [sp, #312]	@ 0x138
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018e3c:	f7f4 f814 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018e40:	f10d 020f 	add.w	r2, sp, #15
 8018e44:	4651      	mov	r1, sl
 8018e46:	4640      	mov	r0, r8
 8018e48:	f000 fd0b 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8018e4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018e50:	4605      	mov	r5, r0
	if (!success) {
 8018e52:	b943      	cbnz	r3, 8018e66 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x42>
		return false;
 8018e54:	2400      	movs	r4, #0
		osSemaphoreRelease(RegistersSemaphore);
 8018e56:	f8d8 0000 	ldr.w	r0, [r8]
 8018e5a:	f7f4 f839 	bl	800ced0 <osSemaphoreRelease>
}
 8018e5e:	4620      	mov	r0, r4
 8018e60:	b045      	add	sp, #276	@ 0x114
 8018e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018e66:	4972      	ldr	r1, [pc, #456]	@ (8019030 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x20c>)
 8018e68:	4872      	ldr	r0, [pc, #456]	@ (8019034 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x210>)
 8018e6a:	f005 f965 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8018e6e:	4604      	mov	r4, r0
 8018e70:	2800      	cmp	r0, #0
 8018e72:	d14f      	bne.n	8018f14 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xf0>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018e74:	4970      	ldr	r1, [pc, #448]	@ (8019038 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x214>)
 8018e76:	486f      	ldr	r0, [pc, #444]	@ (8019034 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x210>)
 8018e78:	f005 f95e 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8018e7c:	4604      	mov	r4, r0
 8018e7e:	2800      	cmp	r0, #0
 8018e80:	d14a      	bne.n	8018f18 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xf4>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018e82:	496e      	ldr	r1, [pc, #440]	@ (801903c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x218>)
 8018e84:	486b      	ldr	r0, [pc, #428]	@ (8019034 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x210>)
 8018e86:	f005 f957 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8018e8a:	4604      	mov	r4, r0
 8018e8c:	2800      	cmp	r0, #0
 8018e8e:	d145      	bne.n	8018f1c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xf8>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018e90:	496b      	ldr	r1, [pc, #428]	@ (8019040 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x21c>)
 8018e92:	4868      	ldr	r0, [pc, #416]	@ (8019034 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x210>)
 8018e94:	f005 f950 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8018e98:	4604      	mov	r4, r0
 8018e9a:	2800      	cmp	r0, #0
 8018e9c:	d140      	bne.n	8018f20 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xfc>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018e9e:	4965      	ldr	r1, [pc, #404]	@ (8019034 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x210>)
 8018ea0:	4608      	mov	r0, r1
 8018ea2:	f005 f949 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8018ea6:	4604      	mov	r4, r0
 8018ea8:	2800      	cmp	r0, #0
 8018eaa:	d13b      	bne.n	8018f24 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x100>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018eac:	4965      	ldr	r1, [pc, #404]	@ (8019044 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x220>)
 8018eae:	4861      	ldr	r0, [pc, #388]	@ (8019034 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x210>)
 8018eb0:	f005 f942 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8018eb4:	4604      	mov	r4, r0
 8018eb6:	2800      	cmp	r0, #0
 8018eb8:	d136      	bne.n	8018f28 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x104>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018eba:	4963      	ldr	r1, [pc, #396]	@ (8019048 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x224>)
 8018ebc:	485d      	ldr	r0, [pc, #372]	@ (8019034 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x210>)
 8018ebe:	f005 f93b 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8018ec2:	4604      	mov	r4, r0
 8018ec4:	2800      	cmp	r0, #0
 8018ec6:	d131      	bne.n	8018f2c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x108>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8018ec8:	4960      	ldr	r1, [pc, #384]	@ (801904c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x228>)
 8018eca:	485a      	ldr	r0, [pc, #360]	@ (8019034 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x210>)
 8018ecc:	f005 f934 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8018ed0:	1e04      	subs	r4, r0, #0
 8018ed2:	bf14      	ite	ne
 8018ed4:	2309      	movne	r3, #9
 8018ed6:	2300      	moveq	r3, #0
 8018ed8:	f88d 400f 	strb.w	r4, [sp, #15]
	if (!success) {
 8018edc:	2c00      	cmp	r4, #0
 8018ede:	d0b9      	beq.n	8018e54 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x30>
	if (target_register->register_info.type != registered_type) {
 8018ee0:	792a      	ldrb	r2, [r5, #4]
 8018ee2:	429a      	cmp	r2, r3
 8018ee4:	d1b6      	bne.n	8018e54 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x30>
	if (callbacks[target_register->register_info.type] == NULL) {
 8018ee6:	3304      	adds	r3, #4
 8018ee8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d0b1      	beq.n	8018e54 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x30>
	if (target_register->access.read) {
 8018ef0:	7a6a      	ldrb	r2, [r5, #9]
 8018ef2:	2a00      	cmp	r2, #0
 8018ef4:	d066      	beq.n	8018fc4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1a0>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8018ef6:	8969      	ldrh	r1, [r5, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 8018ef8:	2200      	movs	r2, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018efa:	e9d3 0300 	ldrd	r0, r3, [r3]
 8018efe:	f88d 200f 	strb.w	r2, [sp, #15]
 8018f02:	1a1b      	subs	r3, r3, r0
	if (__n >= this->size())
 8018f04:	ebb1 1f23 	cmp.w	r1, r3, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018f08:	ea4f 1223 	mov.w	r2, r3, asr #4
	if (__n >= this->size())
 8018f0c:	d310      	bcc.n	8018f30 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x10c>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8018f0e:	4850      	ldr	r0, [pc, #320]	@ (8019050 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x22c>)
 8018f10:	f005 f933 	bl	801e17a <_ZSt24__throw_out_of_range_fmtPKcz>
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018f14:	2300      	movs	r3, #0
 8018f16:	e7df      	b.n	8018ed8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xb4>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018f18:	2301      	movs	r3, #1
 8018f1a:	e7dd      	b.n	8018ed8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xb4>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018f1c:	2302      	movs	r3, #2
 8018f1e:	e7db      	b.n	8018ed8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xb4>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018f20:	2303      	movs	r3, #3
 8018f22:	e7d9      	b.n	8018ed8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xb4>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018f24:	2304      	movs	r3, #4
 8018f26:	e7d7      	b.n	8018ed8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xb4>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018f28:	2306      	movs	r3, #6
 8018f2a:	e7d5      	b.n	8018ed8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xb4>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018f2c:	2308      	movs	r3, #8
 8018f2e:	e7d3      	b.n	8018ed8 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xb4>
	return *(this->_M_impl._M_start + __n);
 8018f30:	010b      	lsls	r3, r1, #4
 8018f32:	eb00 1101 	add.w	r1, r0, r1, lsl #4
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8018f36:	f850 9003 	ldr.w	r9, [r0, r3]
 8018f3a:	684b      	ldr	r3, [r1, #4]
 8018f3c:	9301      	str	r3, [sp, #4]
 8018f3e:	68cb      	ldr	r3, [r1, #12]
 8018f40:	461f      	mov	r7, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8018f42:	f1bb 0f00 	cmp.w	fp, #0
 8018f46:	d006      	beq.n	8018f56 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x132>
 8018f48:	68eb      	ldr	r3, [r5, #12]
 8018f4a:	b123      	cbz	r3, 8018f56 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x132>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8018f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8018f50:	6818      	ldr	r0, [r3, #0]
 8018f52:	f7f3 ff89 	bl	800ce68 <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 8018f56:	786b      	ldrb	r3, [r5, #1]
 8018f58:	b1c3      	cbz	r3, 8018f8c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x168>
			if (output != NULL) {
 8018f5a:	2e00      	cmp	r6, #0
 8018f5c:	d037      	beq.n	8018fce <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1aa>
				*callback_output = output;
 8018f5e:	4632      	mov	r2, r6
 8018f60:	2300      	movs	r3, #0
 8018f62:	601a      	str	r2, [r3, #0]
			if (callbacks.read != NULL) {
 8018f64:	b197      	cbz	r7, 8018f8c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x168>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 8018f66:	9b00      	ldr	r3, [sp, #0]
 8018f68:	2200      	movs	r2, #0
 8018f6a:	4651      	mov	r1, sl
 8018f6c:	9801      	ldr	r0, [sp, #4]
 8018f6e:	47b8      	blx	r7
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8018f70:	796b      	ldrb	r3, [r5, #5]
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 8018f72:	f88d 000f 	strb.w	r0, [sp, #15]
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8018f76:	b363      	cbz	r3, 8018fd2 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1ae>
 8018f78:	88eb      	ldrh	r3, [r5, #6]
 8018f7a:	b10b      	cbz	r3, 8018f80 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x15c>
					*length = 1;
 8018f7c:	9a00      	ldr	r2, [sp, #0]
 8018f7e:	8013      	strh	r3, [r2, #0]
				if (*callback_output != output && output != NULL) {
 8018f80:	2300      	movs	r3, #0
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	42b3      	cmp	r3, r6
 8018f86:	d001      	beq.n	8018f8c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x168>
 8018f88:	2e00      	cmp	r6, #0
 8018f8a:	d130      	bne.n	8018fee <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1ca>
		if (not success && target_register->mode.pointer) {
 8018f8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018f90:	b983      	cbnz	r3, 8018fb4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x190>
 8018f92:	782b      	ldrb	r3, [r5, #0]
 8018f94:	b173      	cbz	r3, 8018fb4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x190>
			success = true;
 8018f96:	2301      	movs	r3, #1
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8018f98:	796a      	ldrb	r2, [r5, #5]
			success = true;
 8018f9a:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8018f9e:	2a00      	cmp	r2, #0
 8018fa0:	d03d      	beq.n	801901e <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1fa>
 8018fa2:	88e9      	ldrh	r1, [r5, #6]
 8018fa4:	2900      	cmp	r1, #0
 8018fa6:	d130      	bne.n	801900a <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1e6>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018fa8:	e9d9 2300 	ldrd	r2, r3, [r9]
 8018fac:	1a9b      	subs	r3, r3, r2
				*length = register_vector->size();
 8018fae:	9a00      	ldr	r2, [sp, #0]
 8018fb0:	8013      	strh	r3, [r2, #0]
				if (output != NULL) {
 8018fb2:	bb26      	cbnz	r6, 8018ffe <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1da>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8018fb4:	f1bb 0f00 	cmp.w	fp, #0
 8018fb8:	d004      	beq.n	8018fc4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1a0>
 8018fba:	68eb      	ldr	r3, [r5, #12]
 8018fbc:	b113      	cbz	r3, 8018fc4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1a0>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8018fbe:	6818      	ldr	r0, [r3, #0]
 8018fc0:	f7f3 ff86 	bl	800ced0 <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 8018fc4:	f8d8 0000 	ldr.w	r0, [r8]
 8018fc8:	f7f3 ff82 	bl	800ced0 <osSemaphoreRelease>
	return true;
 8018fcc:	e747      	b.n	8018e5e <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x3a>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 8018fce:	aa04      	add	r2, sp, #16
 8018fd0:	e7c6      	b.n	8018f60 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x13c>
					*length = 1;
 8018fd2:	2301      	movs	r3, #1
 8018fd4:	e7d2      	b.n	8018f7c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x158>
						output[index] = (*callback_output )[index];
 8018fd6:	2300      	movs	r3, #0
 8018fd8:	b291      	uxth	r1, r2
 8018fda:	3201      	adds	r2, #1
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	5c5b      	ldrb	r3, [r3, r1]
 8018fe0:	5473      	strb	r3, [r6, r1]
					for (uint16_t index = 0; index < *length; index++) {
 8018fe2:	9b00      	ldr	r3, [sp, #0]
 8018fe4:	8819      	ldrh	r1, [r3, #0]
 8018fe6:	b293      	uxth	r3, r2
 8018fe8:	4299      	cmp	r1, r3
 8018fea:	d8f4      	bhi.n	8018fd6 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1b2>
 8018fec:	e7ce      	b.n	8018f8c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x168>
 8018fee:	2200      	movs	r2, #0
 8018ff0:	e7f7      	b.n	8018fe2 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1be>
 8018ff2:	b28b      	uxth	r3, r1
						output[index] = (*register_vector)[index];
 8018ff4:	f8d9 2000 	ldr.w	r2, [r9]
 8018ff8:	3101      	adds	r1, #1
 8018ffa:	56d2      	ldrsb	r2, [r2, r3]
 8018ffc:	54f2      	strb	r2, [r6, r3]
					for (uint16_t index = 0; index < *length; index++) {
 8018ffe:	9b00      	ldr	r3, [sp, #0]
 8019000:	881a      	ldrh	r2, [r3, #0]
 8019002:	b28b      	uxth	r3, r1
 8019004:	429a      	cmp	r2, r3
 8019006:	d8f4      	bhi.n	8018ff2 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1ce>
 8019008:	e7d4      	b.n	8018fb4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x190>
				*length = target_register->register_info.length;
 801900a:	9b00      	ldr	r3, [sp, #0]
 801900c:	8019      	strh	r1, [r3, #0]
				if (output != NULL) {
 801900e:	2e00      	cmp	r6, #0
 8019010:	d0d0      	beq.n	8018fb4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x190>
			      _Category>::__copy_m(__first, __last, __result);
 8019012:	4632      	mov	r2, r6
 8019014:	4449      	add	r1, r9
 8019016:	4648      	mov	r0, r9
 8019018:	f7fa f868 	bl	80130ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801901c:	e7ca      	b.n	8018fb4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x190>
				*length = 1;
 801901e:	9a00      	ldr	r2, [sp, #0]
 8019020:	8013      	strh	r3, [r2, #0]
				if (output != NULL) {
 8019022:	2e00      	cmp	r6, #0
 8019024:	d0c6      	beq.n	8018fb4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x190>
					*output = *callbacks.pointer;
 8019026:	f999 3000 	ldrsb.w	r3, [r9]
 801902a:	7033      	strb	r3, [r6, #0]
 801902c:	e7c2      	b.n	8018fb4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x190>
 801902e:	bf00      	nop
 8019030:	0801f65c 	.word	0x0801f65c
 8019034:	0801f664 	.word	0x0801f664
 8019038:	0801f654 	.word	0x0801f654
 801903c:	0801f644 	.word	0x0801f644
 8019040:	0801f63c 	.word	0x0801f63c
 8019044:	0801f64c 	.word	0x0801f64c
 8019048:	0801f634 	.word	0x0801f634
 801904c:	0801f62c 	.word	0x0801f62c
 8019050:	0801f44c 	.word	0x0801f44c

08019054 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>:
	if (__first != __last)
 8019054:	429a      	cmp	r2, r3
	insert(const_iterator __position, _InputIterator __first,
 8019056:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801905a:	4604      	mov	r4, r0
 801905c:	460d      	mov	r5, r1
 801905e:	4617      	mov	r7, r2
 8019060:	4699      	mov	r9, r3
 8019062:	d022      	beq.n	80190aa <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x56>
 8019064:	eba3 0802 	sub.w	r8, r3, r2
      : _M_current(__i) { }
 8019068:	f8d0 a000 	ldr.w	sl, [r0]
			  - this->_M_impl._M_finish) >= __n)
 801906c:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
 8019070:	1b9b      	subs	r3, r3, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 8019072:	4598      	cmp	r8, r3
 8019074:	d831      	bhi.n	80190da <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x86>
    { return __lhs.base() - __rhs.base(); }
 8019076:	eba6 0a01 	sub.w	sl, r6, r1
		if (__elems_after > __n)
 801907a:	45d0      	cmp	r8, sl
 801907c:	d217      	bcs.n	80190ae <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x5a>
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 801907e:	eba6 0a08 	sub.w	sl, r6, r8
			      _Category>::__copy_m(__first, __last, __result);
 8019082:	4632      	mov	r2, r6
 8019084:	4631      	mov	r1, r6
 8019086:	4650      	mov	r0, sl
 8019088:	f7e8 fdd4 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n;
 801908c:	6863      	ldr	r3, [r4, #4]
	  if (_Num)
 801908e:	ebba 0205 	subs.w	r2, sl, r5
 8019092:	4443      	add	r3, r8
 8019094:	6063      	str	r3, [r4, #4]
 8019096:	d003      	beq.n	80190a0 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x4c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8019098:	4629      	mov	r1, r5
 801909a:	1ab0      	subs	r0, r6, r2
 801909c:	f005 ff32 	bl	801ef04 <memmove>
			      _Category>::__copy_m(__first, __last, __result);
 80190a0:	462a      	mov	r2, r5
 80190a2:	4649      	mov	r1, r9
 80190a4:	4638      	mov	r0, r7
 80190a6:	f7e7 fdbf 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	}
 80190aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { _M_current += __n; return *this; }
 80190ae:	eb02 0b0a 	add.w	fp, r2, sl
 80190b2:	4649      	mov	r1, r9
 80190b4:	4632      	mov	r2, r6
		    this->_M_impl._M_finish += __n - __elems_after;
 80190b6:	eba8 080a 	sub.w	r8, r8, sl
 80190ba:	4658      	mov	r0, fp
 80190bc:	f7e7 fdb4 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80190c0:	6862      	ldr	r2, [r4, #4]
 80190c2:	4631      	mov	r1, r6
 80190c4:	4628      	mov	r0, r5
 80190c6:	4442      	add	r2, r8
 80190c8:	6062      	str	r2, [r4, #4]
 80190ca:	f7e8 fdb3 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __elems_after;
 80190ce:	6863      	ldr	r3, [r4, #4]
 80190d0:	462a      	mov	r2, r5
 80190d2:	4659      	mov	r1, fp
 80190d4:	4453      	add	r3, sl
 80190d6:	6063      	str	r3, [r4, #4]
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80190d8:	e7e4      	b.n	80190a4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x50>
		  _M_check_len(__n, "vector::_M_range_insert");
 80190da:	4641      	mov	r1, r8
 80190dc:	4a12      	ldr	r2, [pc, #72]	@ (8019128 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0xd4>)
 80190de:	f7e7 fd20 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80190e2:	4683      	mov	fp, r0
		pointer __new_start(this->_M_allocate(__len));
 80190e4:	f7fe ff99 	bl	801801a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 80190e8:	4629      	mov	r1, r5
 80190ea:	4602      	mov	r2, r0
 80190ec:	4680      	mov	r8, r0
 80190ee:	4650      	mov	r0, sl
 80190f0:	f7e8 fda0 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80190f4:	4649      	mov	r1, r9
 80190f6:	4602      	mov	r2, r0
 80190f8:	4638      	mov	r0, r7
 80190fa:	f7e7 fd95 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80190fe:	4631      	mov	r1, r6
 8019100:	4602      	mov	r2, r0
 8019102:	4628      	mov	r0, r5
 8019104:	f7e8 fd96 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8019108:	4605      	mov	r5, r0
	if (__p)
 801910a:	f1ba 0f00 	cmp.w	sl, #0
 801910e:	d005      	beq.n	801911c <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0xc8>
			      this->_M_impl._M_end_of_storage - __old_start);
 8019110:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8019112:	4650      	mov	r0, sl
 8019114:	eba1 010a 	sub.w	r1, r1, sl
 8019118:	f004 ff52 	bl	801dfc0 <_ZdlPvj>
		this->_M_impl._M_end_of_storage = __new_start + __len;
 801911c:	eb08 000b 	add.w	r0, r8, fp
		this->_M_impl._M_finish = __new_finish;
 8019120:	e9c4 8500 	strd	r8, r5, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8019124:	60a0      	str	r0, [r4, #8]
	  return begin() + __offset;
 8019126:	e7c0      	b.n	80190aa <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x56>
 8019128:	0801f257 	.word	0x0801f257

0801912c <_ZN10Publishers13SpinPublisherEh>:
void Publishers::SpinPublisher(uint8_t ID) {
 801912c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019130:	b0ab      	sub	sp, #172	@ 0xac
 8019132:	4605      	mov	r5, r0
	Publisher* publisher = FindPublisher(ID, &success);
 8019134:	aa06      	add	r2, sp, #24
 8019136:	f7ff f825 	bl	8018184 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return;
 801913a:	f89d 3018 	ldrb.w	r3, [sp, #24]
	Publisher* publisher = FindPublisher(ID, &success);
 801913e:	4606      	mov	r6, r0
	if (!success) return;
 8019140:	b14b      	cbz	r3, 8019156 <_ZN10Publishers13SpinPublisherEh+0x2a>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8019142:	f04f 31ff 	mov.w	r1, #4294967295
 8019146:	6828      	ldr	r0, [r5, #0]
 8019148:	f7f3 fe8e 	bl	800ce68 <osSemaphoreAcquire>
	if (not publisher->activated) {
 801914c:	7873      	ldrb	r3, [r6, #1]
 801914e:	b92b      	cbnz	r3, 801915c <_ZN10Publishers13SpinPublisherEh+0x30>
	osSemaphoreRelease(PublishersSemaphore);
 8019150:	6828      	ldr	r0, [r5, #0]
 8019152:	f7f3 febd 	bl	800ced0 <osSemaphoreRelease>
}
 8019156:	b02b      	add	sp, #172	@ 0xac
 8019158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	publisher->counter += 1;
 801915c:	88b3      	ldrh	r3, [r6, #4]
	if (publisher->counter >= publisher->prescaler) {
 801915e:	8872      	ldrh	r2, [r6, #2]
	publisher->counter += 1;
 8019160:	3301      	adds	r3, #1
 8019162:	b29b      	uxth	r3, r3
	if (publisher->counter >= publisher->prescaler) {
 8019164:	429a      	cmp	r2, r3
	publisher->counter += 1;
 8019166:	80b3      	strh	r3, [r6, #4]
	if (publisher->counter >= publisher->prescaler) {
 8019168:	d8f2      	bhi.n	8019150 <_ZN10Publishers13SpinPublisherEh+0x24>
		publisher->counter = 0;
 801916a:	2400      	movs	r4, #0
      : _M_current(__i) { }
 801916c:	68f3      	ldr	r3, [r6, #12]
 801916e:	f8d6 8008 	ldr.w	r8, [r6, #8]
					Register element_register = registers->FindRegister(topic.ID, &success);
 8019172:	f10d 0a20 	add.w	sl, sp, #32
		publisher->counter = 0;
 8019176:	80b4      	strh	r4, [r6, #4]
 8019178:	9302      	str	r3, [sp, #8]
		for (PublishInterface interface : publisher->interfaces) {
 801917a:	9b02      	ldr	r3, [sp, #8]
 801917c:	4543      	cmp	r3, r8
 801917e:	d0e7      	beq.n	8019150 <_ZN10Publishers13SpinPublisherEh+0x24>
 8019180:	f898 3001 	ldrb.w	r3, [r8, #1]
 8019184:	f898 2000 	ldrb.w	r2, [r8]
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8019188:	f8d6 9014 	ldr.w	r9, [r6, #20]
			message.target_address = interface.address;
 801918c:	f88d 3074 	strb.w	r3, [sp, #116]	@ 0x74
 8019190:	69b3      	ldr	r3, [r6, #24]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8019192:	941c      	str	r4, [sp, #112]	@ 0x70
			message.interface = interface.interface;
 8019194:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 8019198:	9303      	str	r3, [sp, #12]
 801919a:	e9cd 441a 	strd	r4, r4, [sp, #104]	@ 0x68
			for (Topic topic : publisher->topics) {
 801919e:	9b03      	ldr	r3, [sp, #12]
 80191a0:	454b      	cmp	r3, r9
 80191a2:	d11d      	bne.n	80191e0 <_ZN10Publishers13SpinPublisherEh+0xb4>
			if (message.payload.size() > 0) {
 80191a4:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 80191a8:	429a      	cmp	r2, r3
 80191aa:	d013      	beq.n	80191d4 <_ZN10Publishers13SpinPublisherEh+0xa8>
 80191ac:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 80191b0:	a91a      	add	r1, sp, #104	@ 0x68
				communication->Send(message);
 80191b2:	68af      	ldr	r7, [r5, #8]
 80191b4:	a825      	add	r0, sp, #148	@ 0x94
 80191b6:	f88d 3090 	strb.w	r3, [sp, #144]	@ 0x90
 80191ba:	f7e7 fd41 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80191be:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 80191c2:	a924      	add	r1, sp, #144	@ 0x90
 80191c4:	4638      	mov	r0, r7
 80191c6:	f8ad 30a0 	strh.w	r3, [sp, #160]	@ 0xa0
 80191ca:	f7f8 f8c9 	bl	8011360 <_ZN13Communication4SendE13MessageHeader>
      }
 80191ce:	a825      	add	r0, sp, #148	@ 0x94
 80191d0:	f7e7 fc86 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80191d4:	a81a      	add	r0, sp, #104	@ 0x68
 80191d6:	f108 0802 	add.w	r8, r8, #2
 80191da:	f7e7 fc81 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 80191de:	e7cc      	b.n	801917a <_ZN10Publishers13SpinPublisherEh+0x4e>
				if (topic.activated) {
 80191e0:	f899 3000 	ldrb.w	r3, [r9]
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	f000 8093 	beq.w	8019310 <_ZN10Publishers13SpinPublisherEh+0x1e4>
					Register element_register = registers->FindRegister(topic.ID, &success);
 80191ea:	ab06      	add	r3, sp, #24
 80191ec:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 80191f0:	6869      	ldr	r1, [r5, #4]
 80191f2:	4650      	mov	r0, sl
	: _M_start(), _M_finish(), _M_end_of_storage()
 80191f4:	9423      	str	r4, [sp, #140]	@ 0x8c
					element.ack = false;
 80191f6:	f8ad 407e 	strh.w	r4, [sp, #126]	@ 0x7e
					element.access = false;
 80191fa:	f88d 4080 	strb.w	r4, [sp, #128]	@ 0x80
 80191fe:	e9cd 4421 	strd	r4, r4, [sp, #132]	@ 0x84
					Register element_register = registers->FindRegister(topic.ID, &success);
 8019202:	f000 fb3f 	bl	8019884 <_ZN9Registers12FindRegisterEtPb>
					if (not success)
 8019206:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801920a:	2b00      	cmp	r3, #0
 801920c:	d07d      	beq.n	801930a <_ZN10Publishers13SpinPublisherEh+0x1de>
					element.element_register = element_register;
 801920e:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8019212:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 8019216:	901e      	str	r0, [sp, #120]	@ 0x78
					switch (element.element_register.type) {
 8019218:	f3c0 4007 	ubfx	r0, r0, #16, #8
					element.element_register = element_register;
 801921c:	f8ad 107c 	strh.w	r1, [sp, #124]	@ 0x7c
					switch (element.element_register.type) {
 8019220:	2804      	cmp	r0, #4
 8019222:	940c      	str	r4, [sp, #48]	@ 0x30
 8019224:	f000 80ce 	beq.w	80193c4 <_ZN10Publishers13SpinPublisherEh+0x298>
 8019228:	2808      	cmp	r0, #8
 801922a:	f000 816e 	beq.w	801950a <_ZN10Publishers13SpinPublisherEh+0x3de>
 801922e:	2802      	cmp	r0, #2
 8019230:	f040 821f 	bne.w	8019672 <_ZN10Publishers13SpinPublisherEh+0x546>
						register_read = communication->ReadElement<uint32_t>(&element, &success);
 8019234:	68ab      	ldr	r3, [r5, #8]
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 8019236:	2701      	movs	r7, #1
 8019238:	aa07      	add	r2, sp, #28
 801923a:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 801923e:	6858      	ldr	r0, [r3, #4]
 8019240:	f10d 031a 	add.w	r3, sp, #26
 8019244:	9700      	str	r7, [sp, #0]
 8019246:	940f      	str	r4, [sp, #60]	@ 0x3c
 8019248:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
 801924c:	f7f6 fa32 	bl	800f6b4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb>
 8019250:	f88d 0018 	strb.w	r0, [sp, #24]
	if (not *success)
 8019254:	2800      	cmp	r0, #0
 8019256:	d049      	beq.n	80192ec <_ZN10Publishers13SpinPublisherEh+0x1c0>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8019258:	a91e      	add	r1, sp, #120	@ 0x78
 801925a:	a824      	add	r0, sp, #144	@ 0x90
 801925c:	f7f7 ff7e 	bl	801115c <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 8019260:	f89d 3093 	ldrb.w	r3, [sp, #147]	@ 0x93
 8019264:	9412      	str	r4, [sp, #72]	@ 0x48
 8019266:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
 801926a:	2b00      	cmp	r3, #0
 801926c:	d153      	bne.n	8019316 <_ZN10Publishers13SpinPublisherEh+0x1ea>
		vector = std::vector<T>{*data};
 801926e:	9b07      	ldr	r3, [sp, #28]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8019270:	4638      	mov	r0, r7
 8019272:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019274:	f7fe febf 	bl	8017ff6 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8019278:	a914      	add	r1, sp, #80	@ 0x50
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801927a:	1d03      	adds	r3, r0, #4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801927c:	4602      	mov	r2, r0
 801927e:	9016      	str	r0, [sp, #88]	@ 0x58
 8019280:	a813      	add	r0, sp, #76	@ 0x4c
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8019282:	9318      	str	r3, [sp, #96]	@ 0x60
 8019284:	f7f9 fb7c 	bl	8012980 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8019288:	a916      	add	r1, sp, #88	@ 0x58
	  this->_M_impl._M_finish =
 801928a:	9017      	str	r0, [sp, #92]	@ 0x5c
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 801928c:	a810      	add	r0, sp, #64	@ 0x40
 801928e:	f7ff fac1 	bl	8018814 <_ZNSt6vectorImSaImEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 8019292:	a816      	add	r0, sp, #88	@ 0x58
 8019294:	f7f7 fde2 	bl	8010e5c <_ZNSt12_Vector_baseImSaImEED1Ev>
 8019298:	a827      	add	r0, sp, #156	@ 0x9c
 801929a:	f7e7 fc21 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801929e:	e9dd b110 	ldrd	fp, r1, [sp, #64]	@ 0x40
 80192a2:	eba1 030b 	sub.w	r3, r1, fp
 80192a6:	9105      	str	r1, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80192a8:	1098      	asrs	r0, r3, #2
 80192aa:	9304      	str	r3, [sp, #16]
 80192ac:	f7fe fea3 	bl	8017ff6 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80192b0:	9b04      	ldr	r3, [sp, #16]
 80192b2:	4602      	mov	r2, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 80192b4:	9016      	str	r0, [sp, #88]	@ 0x58
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80192b6:	4403      	add	r3, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 80192b8:	4607      	mov	r7, r0
 80192ba:	9905      	ldr	r1, [sp, #20]
 80192bc:	4658      	mov	r0, fp
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80192be:	9318      	str	r3, [sp, #96]	@ 0x60
 80192c0:	f7f9 fb5e 	bl	8012980 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
 80192c4:	4683      	mov	fp, r0
	this->_M_impl._M_finish =
 80192c6:	9017      	str	r0, [sp, #92]	@ 0x5c
	: _M_start(), _M_finish(), _M_end_of_storage()
 80192c8:	9415      	str	r4, [sp, #84]	@ 0x54
 80192ca:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
    for (T input : inputs) {
 80192ce:	45bb      	cmp	fp, r7
 80192d0:	d14c      	bne.n	801936c <_ZN10Publishers13SpinPublisherEh+0x240>
	data = BuildVector<T>(register_read_vector_cast);
 80192d2:	a913      	add	r1, sp, #76	@ 0x4c
 80192d4:	a80d      	add	r0, sp, #52	@ 0x34
 80192d6:	f7ff f967 	bl	80185a8 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 80192da:	a813      	add	r0, sp, #76	@ 0x4c
 80192dc:	f7e7 fc00 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80192e0:	a816      	add	r0, sp, #88	@ 0x58
 80192e2:	f7f7 fdbb 	bl	8010e5c <_ZNSt12_Vector_baseImSaImEED1Ev>
 80192e6:	a810      	add	r0, sp, #64	@ 0x40
 80192e8:	f7f7 fdb8 	bl	8010e5c <_ZNSt12_Vector_baseImSaImEED1Ev>
						register_read = communication->ReadElement<float>(&element, &success);
 80192ec:	a90d      	add	r1, sp, #52	@ 0x34
 80192ee:	a80a      	add	r0, sp, #40	@ 0x28
 80192f0:	f7ff f95a 	bl	80185a8 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 80192f4:	a80d      	add	r0, sp, #52	@ 0x34
 80192f6:	f7e7 fbf3 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
					if (not success)
 80192fa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80192fe:	2b00      	cmp	r3, #0
 8019300:	f040 81ba 	bne.w	8019678 <_ZN10Publishers13SpinPublisherEh+0x54c>
 8019304:	a80a      	add	r0, sp, #40	@ 0x28
 8019306:	f7e7 fbeb 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801930a:	a821      	add	r0, sp, #132	@ 0x84
 801930c:	f7e7 fbe8 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
 8019310:	f109 0904 	add.w	r9, r9, #4
	return *this;
 8019314:	e743      	b.n	801919e <_ZN10Publishers13SpinPublisherEh+0x72>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8019316:	f8bd 0094 	ldrh.w	r0, [sp, #148]	@ 0x94
 801931a:	b150      	cbz	r0, 8019332 <_ZN10Publishers13SpinPublisherEh+0x206>
		vector = std::vector<T>(data, data + element.element_register.length);
 801931c:	0087      	lsls	r7, r0, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801931e:	f7fe fe6a 	bl	8017ff6 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8019322:	4602      	mov	r2, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8019324:	19c3      	adds	r3, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8019326:	9016      	str	r0, [sp, #88]	@ 0x58
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8019328:	9318      	str	r3, [sp, #96]	@ 0x60
 801932a:	ab07      	add	r3, sp, #28
 801932c:	19d9      	adds	r1, r3, r7
 801932e:	4618      	mov	r0, r3
 8019330:	e7a8      	b.n	8019284 <_ZN10Publishers13SpinPublisherEh+0x158>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019332:	e9dd 7107 	ldrd	r7, r1, [sp, #28]
	  if (__xlen > capacity())
 8019336:	ebb1 0b07 	subs.w	fp, r1, r7
 801933a:	d012      	beq.n	8019362 <_ZN10Publishers13SpinPublisherEh+0x236>
	  pointer __result = this->_M_allocate(__n);
 801933c:	ea4f 00ab 	mov.w	r0, fp, asr #2
 8019340:	9105      	str	r1, [sp, #20]
 8019342:	f7fe fe58 	bl	8017ff6 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj.isra.0>
 8019346:	9905      	ldr	r1, [sp, #20]
 8019348:	4602      	mov	r2, r0
 801934a:	9004      	str	r0, [sp, #16]
 801934c:	4638      	mov	r0, r7
 801934e:	f7f9 fb17 	bl	8012980 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 8019352:	9a04      	ldr	r2, [sp, #16]
 8019354:	9210      	str	r2, [sp, #64]	@ 0x40
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8019356:	445a      	add	r2, fp
 8019358:	9212      	str	r2, [sp, #72]	@ 0x48
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 801935a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801935c:	445b      	add	r3, fp
 801935e:	9311      	str	r3, [sp, #68]	@ 0x44
      return *this;
 8019360:	e79a      	b.n	8019298 <_ZN10Publishers13SpinPublisherEh+0x16c>
 8019362:	2200      	movs	r2, #0
 8019364:	4638      	mov	r0, r7
 8019366:	f7f9 fb0b 	bl	8012980 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801936a:	e7f6      	b.n	801935a <_ZN10Publishers13SpinPublisherEh+0x22e>
    for (T input : inputs) {
 801936c:	f857 2b04 	ldr.w	r2, [r7], #4
    std::memcpy(&reinterpreted_input, &input, sizeof(T)); // this is mandatory to get rid of the memory alignment problem. A simple cast can't work here
 8019370:	2318      	movs	r3, #24
	: _M_start(), _M_finish(), _M_end_of_storage()
 8019372:	9426      	str	r4, [sp, #152]	@ 0x98
 8019374:	e9cd 4424 	strd	r4, r4, [sp, #144]	@ 0x90
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8019378:	f1c3 0c20 	rsb	ip, r3, #32
 801937c:	fa22 f103 	lsr.w	r1, r2, r3
 8019380:	f1a3 0020 	sub.w	r0, r3, #32
 8019384:	fa04 fc0c 	lsl.w	ip, r4, ip
 8019388:	fa24 f000 	lsr.w	r0, r4, r0
 801938c:	ea41 010c 	orr.w	r1, r1, ip
 8019390:	4301      	orrs	r1, r0
      { emplace_back(std::move(__x)); }
 8019392:	a824      	add	r0, sp, #144	@ 0x90
 8019394:	f88d 1019 	strb.w	r1, [sp, #25]
 8019398:	f10d 0119 	add.w	r1, sp, #25
 801939c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80193a0:	f7f7 fdca 	bl	8010f38 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	for (uint8_t index = 0; index < type_length; index++) {
 80193a4:	9b05      	ldr	r3, [sp, #20]
 80193a6:	9a04      	ldr	r2, [sp, #16]
 80193a8:	3b08      	subs	r3, #8
 80193aa:	f113 0f08 	cmn.w	r3, #8
 80193ae:	d1e3      	bne.n	8019378 <_ZN10Publishers13SpinPublisherEh+0x24c>
        data.insert(data.end(), single.begin(), single.end());
 80193b0:	a813      	add	r0, sp, #76	@ 0x4c
 80193b2:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80193b4:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	@ 0x90
 80193b8:	f7ff fe4c 	bl	8019054 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
      }
 80193bc:	a824      	add	r0, sp, #144	@ 0x90
 80193be:	f7e7 fb8f 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 80193c2:	e784      	b.n	80192ce <_ZN10Publishers13SpinPublisherEh+0x1a2>
						register_read = communication->ReadElement<int8_t>(&element, &success);
 80193c4:	68ab      	ldr	r3, [r5, #8]
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 80193c6:	2701      	movs	r7, #1
 80193c8:	f10d 0219 	add.w	r2, sp, #25
 80193cc:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 80193d0:	6858      	ldr	r0, [r3, #4]
 80193d2:	ab07      	add	r3, sp, #28
 80193d4:	9700      	str	r7, [sp, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80193d6:	940f      	str	r4, [sp, #60]	@ 0x3c
 80193d8:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
 80193dc:	f7ff fd22 	bl	8018e24 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb>
 80193e0:	f88d 0018 	strb.w	r0, [sp, #24]
	if (not *success)
 80193e4:	2800      	cmp	r0, #0
 80193e6:	d081      	beq.n	80192ec <_ZN10Publishers13SpinPublisherEh+0x1c0>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 80193e8:	a91e      	add	r1, sp, #120	@ 0x78
 80193ea:	a824      	add	r0, sp, #144	@ 0x90
 80193ec:	f7f7 feb6 	bl	801115c <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 80193f0:	f89d 3093 	ldrb.w	r3, [sp, #147]	@ 0x93
 80193f4:	9412      	str	r4, [sp, #72]	@ 0x48
 80193f6:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d142      	bne.n	8019484 <_ZN10Publishers13SpinPublisherEh+0x358>
		vector = std::vector<T>{*data};
 80193fe:	f89d 3019 	ldrb.w	r3, [sp, #25]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8019402:	4638      	mov	r0, r7
 8019404:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8019408:	f7fe fdea 	bl	8017fe0 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 801940c:	f10d 014d 	add.w	r1, sp, #77	@ 0x4d
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8019410:	19c3      	adds	r3, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8019412:	4602      	mov	r2, r0
 8019414:	9016      	str	r0, [sp, #88]	@ 0x58
 8019416:	a813      	add	r0, sp, #76	@ 0x4c
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8019418:	9318      	str	r3, [sp, #96]	@ 0x60
 801941a:	f7f9 fe67 	bl	80130ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 801941e:	a916      	add	r1, sp, #88	@ 0x58
	  this->_M_impl._M_finish =
 8019420:	9017      	str	r0, [sp, #92]	@ 0x5c
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8019422:	a810      	add	r0, sp, #64	@ 0x40
 8019424:	f7ff fa0d 	bl	8018842 <_ZNSt6vectorIaSaIaEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 8019428:	a816      	add	r0, sp, #88	@ 0x58
 801942a:	f7f7 fd4c 	bl	8010ec6 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 801942e:	a827      	add	r0, sp, #156	@ 0x9c
 8019430:	f7e7 fb56 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019434:	e9dd b110 	ldrd	fp, r1, [sp, #64]	@ 0x40
 8019438:	eba1 030b 	sub.w	r3, r1, fp
 801943c:	9105      	str	r1, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 801943e:	4618      	mov	r0, r3
 8019440:	9304      	str	r3, [sp, #16]
 8019442:	f7fe fdcd 	bl	8017fe0 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8019446:	9b04      	ldr	r3, [sp, #16]
 8019448:	4602      	mov	r2, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 801944a:	9016      	str	r0, [sp, #88]	@ 0x58
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801944c:	4403      	add	r3, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 801944e:	4607      	mov	r7, r0
 8019450:	9905      	ldr	r1, [sp, #20]
 8019452:	4658      	mov	r0, fp
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8019454:	9318      	str	r3, [sp, #96]	@ 0x60
 8019456:	f7f9 fe49 	bl	80130ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
 801945a:	4683      	mov	fp, r0
	this->_M_impl._M_finish =
 801945c:	9017      	str	r0, [sp, #92]	@ 0x5c
	: _M_start(), _M_finish(), _M_end_of_storage()
 801945e:	9415      	str	r4, [sp, #84]	@ 0x54
 8019460:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
    for (T input : inputs) {
 8019464:	455f      	cmp	r7, fp
 8019466:	d13a      	bne.n	80194de <_ZN10Publishers13SpinPublisherEh+0x3b2>
	data = BuildVector<T>(register_read_vector_cast);
 8019468:	a913      	add	r1, sp, #76	@ 0x4c
 801946a:	a80d      	add	r0, sp, #52	@ 0x34
 801946c:	f7ff f89c 	bl	80185a8 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8019470:	a813      	add	r0, sp, #76	@ 0x4c
 8019472:	f7e7 fb35 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8019476:	a816      	add	r0, sp, #88	@ 0x58
 8019478:	f7f7 fd25 	bl	8010ec6 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 801947c:	a810      	add	r0, sp, #64	@ 0x40
 801947e:	f7f7 fd22 	bl	8010ec6 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8019482:	e733      	b.n	80192ec <_ZN10Publishers13SpinPublisherEh+0x1c0>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8019484:	f8bd 7094 	ldrh.w	r7, [sp, #148]	@ 0x94
 8019488:	b15f      	cbz	r7, 80194a2 <_ZN10Publishers13SpinPublisherEh+0x376>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801948a:	4638      	mov	r0, r7
 801948c:	f7fe fda8 	bl	8017fe0 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8019490:	19c3      	adds	r3, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8019492:	4602      	mov	r2, r0
 8019494:	9016      	str	r0, [sp, #88]	@ 0x58
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8019496:	9318      	str	r3, [sp, #96]	@ 0x60
 8019498:	f10d 0319 	add.w	r3, sp, #25
 801949c:	19d9      	adds	r1, r3, r7
 801949e:	4618      	mov	r0, r3
 80194a0:	e7bb      	b.n	801941a <_ZN10Publishers13SpinPublisherEh+0x2ee>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80194a2:	f8dd 101d 	ldr.w	r1, [sp, #29]
 80194a6:	f8dd b019 	ldr.w	fp, [sp, #25]
	  if (__xlen > capacity())
 80194aa:	ebb1 070b 	subs.w	r7, r1, fp
 80194ae:	d011      	beq.n	80194d4 <_ZN10Publishers13SpinPublisherEh+0x3a8>
	  pointer __result = this->_M_allocate(__n);
 80194b0:	4638      	mov	r0, r7
 80194b2:	9105      	str	r1, [sp, #20]
 80194b4:	f7fe fd94 	bl	8017fe0 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 80194b8:	9905      	ldr	r1, [sp, #20]
 80194ba:	4602      	mov	r2, r0
 80194bc:	9004      	str	r0, [sp, #16]
 80194be:	4658      	mov	r0, fp
 80194c0:	f7f9 fe14 	bl	80130ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 80194c4:	9a04      	ldr	r2, [sp, #16]
 80194c6:	9210      	str	r2, [sp, #64]	@ 0x40
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80194c8:	443a      	add	r2, r7
 80194ca:	9212      	str	r2, [sp, #72]	@ 0x48
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 80194cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80194ce:	443b      	add	r3, r7
 80194d0:	9311      	str	r3, [sp, #68]	@ 0x44
      return *this;
 80194d2:	e7ac      	b.n	801942e <_ZN10Publishers13SpinPublisherEh+0x302>
 80194d4:	463a      	mov	r2, r7
 80194d6:	4658      	mov	r0, fp
 80194d8:	f7f9 fe08 	bl	80130ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80194dc:	e7f6      	b.n	80194cc <_ZN10Publishers13SpinPublisherEh+0x3a0>
    for (T input : inputs) {
 80194de:	f917 3b01 	ldrsb.w	r3, [r7], #1
      { emplace_back(std::move(__x)); }
 80194e2:	f10d 011a 	add.w	r1, sp, #26
 80194e6:	a824      	add	r0, sp, #144	@ 0x90
	: _M_start(), _M_finish(), _M_end_of_storage()
 80194e8:	9426      	str	r4, [sp, #152]	@ 0x98
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 80194ea:	f88d 301a 	strb.w	r3, [sp, #26]
 80194ee:	e9cd 4424 	strd	r4, r4, [sp, #144]	@ 0x90
      { emplace_back(std::move(__x)); }
 80194f2:	f7f7 fd21 	bl	8010f38 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
        data.insert(data.end(), single.begin(), single.end());
 80194f6:	a813      	add	r0, sp, #76	@ 0x4c
 80194f8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80194fa:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	@ 0x90
 80194fe:	f7ff fda9 	bl	8019054 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
      }
 8019502:	a824      	add	r0, sp, #144	@ 0x90
 8019504:	f7e7 faec 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8019508:	e7ac      	b.n	8019464 <_ZN10Publishers13SpinPublisherEh+0x338>
						register_read = communication->ReadElement<float>(&element, &success);
 801950a:	68ab      	ldr	r3, [r5, #8]
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 801950c:	2701      	movs	r7, #1
 801950e:	aa07      	add	r2, sp, #28
 8019510:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 8019514:	6858      	ldr	r0, [r3, #4]
 8019516:	f10d 031a 	add.w	r3, sp, #26
 801951a:	9700      	str	r7, [sp, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801951c:	940f      	str	r4, [sp, #60]	@ 0x3c
 801951e:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
 8019522:	f7f6 fbc9 	bl	800fcb8 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb>
 8019526:	f88d 0018 	strb.w	r0, [sp, #24]
	if (not *success)
 801952a:	2800      	cmp	r0, #0
 801952c:	f43f aede 	beq.w	80192ec <_ZN10Publishers13SpinPublisherEh+0x1c0>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8019530:	a91e      	add	r1, sp, #120	@ 0x78
 8019532:	a824      	add	r0, sp, #144	@ 0x90
 8019534:	f7f7 fe12 	bl	801115c <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 8019538:	f89d 3093 	ldrb.w	r3, [sp, #147]	@ 0x93
 801953c:	9412      	str	r4, [sp, #72]	@ 0x48
 801953e:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
 8019542:	2b00      	cmp	r3, #0
 8019544:	d13f      	bne.n	80195c6 <_ZN10Publishers13SpinPublisherEh+0x49a>
		vector = std::vector<T>{*data};
 8019546:	9b07      	ldr	r3, [sp, #28]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8019548:	4638      	mov	r0, r7
 801954a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801954c:	f7fe fd36 	bl	8017fbc <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 8019550:	a914      	add	r1, sp, #80	@ 0x50
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8019552:	1d03      	adds	r3, r0, #4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8019554:	4602      	mov	r2, r0
 8019556:	9016      	str	r0, [sp, #88]	@ 0x58
 8019558:	a813      	add	r0, sp, #76	@ 0x4c
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801955a:	9318      	str	r3, [sp, #96]	@ 0x60
 801955c:	f7fa f9f6 	bl	801394c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8019560:	a916      	add	r1, sp, #88	@ 0x58
	  this->_M_impl._M_finish =
 8019562:	9017      	str	r0, [sp, #92]	@ 0x5c
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8019564:	a810      	add	r0, sp, #64	@ 0x40
 8019566:	f7ff f983 	bl	8018870 <_ZNSt6vectorIfSaIfEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 801956a:	a816      	add	r0, sp, #88	@ 0x58
 801956c:	f7e8 fd16 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8019570:	a827      	add	r0, sp, #156	@ 0x9c
 8019572:	f7e7 fab5 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019576:	e9dd b110 	ldrd	fp, r1, [sp, #64]	@ 0x40
 801957a:	eba1 030b 	sub.w	r3, r1, fp
 801957e:	9105      	str	r1, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8019580:	1098      	asrs	r0, r3, #2
 8019582:	9304      	str	r3, [sp, #16]
 8019584:	f7fe fd1a 	bl	8017fbc <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8019588:	9b04      	ldr	r3, [sp, #16]
 801958a:	4602      	mov	r2, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 801958c:	9016      	str	r0, [sp, #88]	@ 0x58
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801958e:	4403      	add	r3, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8019590:	4607      	mov	r7, r0
 8019592:	9905      	ldr	r1, [sp, #20]
 8019594:	4658      	mov	r0, fp
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8019596:	9318      	str	r3, [sp, #96]	@ 0x60
 8019598:	f7fa f9d8 	bl	801394c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 801959c:	4683      	mov	fp, r0
	this->_M_impl._M_finish =
 801959e:	9017      	str	r0, [sp, #92]	@ 0x5c
	: _M_start(), _M_finish(), _M_end_of_storage()
 80195a0:	9415      	str	r4, [sp, #84]	@ 0x54
 80195a2:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
    for (T input : inputs) {
 80195a6:	45bb      	cmp	fp, r7
 80195a8:	d137      	bne.n	801961a <_ZN10Publishers13SpinPublisherEh+0x4ee>
	data = BuildVector<T>(register_read_vector_cast);
 80195aa:	a913      	add	r1, sp, #76	@ 0x4c
 80195ac:	a80d      	add	r0, sp, #52	@ 0x34
 80195ae:	f7fe fffb 	bl	80185a8 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 80195b2:	a813      	add	r0, sp, #76	@ 0x4c
 80195b4:	f7e7 fa94 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80195b8:	a816      	add	r0, sp, #88	@ 0x58
 80195ba:	f7e8 fcef 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80195be:	a810      	add	r0, sp, #64	@ 0x40
 80195c0:	f7e8 fcec 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80195c4:	e692      	b.n	80192ec <_ZN10Publishers13SpinPublisherEh+0x1c0>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 80195c6:	f8bd 0094 	ldrh.w	r0, [sp, #148]	@ 0x94
 80195ca:	b150      	cbz	r0, 80195e2 <_ZN10Publishers13SpinPublisherEh+0x4b6>
		vector = std::vector<T>(data, data + element.element_register.length);
 80195cc:	0087      	lsls	r7, r0, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80195ce:	f7fe fcf5 	bl	8017fbc <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 80195d2:	4602      	mov	r2, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80195d4:	19c3      	adds	r3, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80195d6:	9016      	str	r0, [sp, #88]	@ 0x58
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80195d8:	9318      	str	r3, [sp, #96]	@ 0x60
 80195da:	ab07      	add	r3, sp, #28
 80195dc:	19d9      	adds	r1, r3, r7
 80195de:	4618      	mov	r0, r3
 80195e0:	e7bc      	b.n	801955c <_ZN10Publishers13SpinPublisherEh+0x430>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80195e2:	e9dd b107 	ldrd	fp, r1, [sp, #28]
	  if (__xlen > capacity())
 80195e6:	ebb1 070b 	subs.w	r7, r1, fp
 80195ea:	d011      	beq.n	8019610 <_ZN10Publishers13SpinPublisherEh+0x4e4>
	  pointer __result = this->_M_allocate(__n);
 80195ec:	10b8      	asrs	r0, r7, #2
 80195ee:	9105      	str	r1, [sp, #20]
 80195f0:	f7fe fce4 	bl	8017fbc <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 80195f4:	9905      	ldr	r1, [sp, #20]
 80195f6:	4602      	mov	r2, r0
 80195f8:	9004      	str	r0, [sp, #16]
 80195fa:	4658      	mov	r0, fp
 80195fc:	f7fa f9a6 	bl	801394c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 8019600:	9a04      	ldr	r2, [sp, #16]
 8019602:	9210      	str	r2, [sp, #64]	@ 0x40
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8019604:	443a      	add	r2, r7
 8019606:	9212      	str	r2, [sp, #72]	@ 0x48
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8019608:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801960a:	443b      	add	r3, r7
 801960c:	9311      	str	r3, [sp, #68]	@ 0x44
      return *this;
 801960e:	e7af      	b.n	8019570 <_ZN10Publishers13SpinPublisherEh+0x444>
 8019610:	463a      	mov	r2, r7
 8019612:	4658      	mov	r0, fp
 8019614:	f7fa f99a 	bl	801394c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8019618:	e7f6      	b.n	8019608 <_ZN10Publishers13SpinPublisherEh+0x4dc>
    for (T input : inputs) {
 801961a:	f857 2b04 	ldr.w	r2, [r7], #4
    std::memcpy(&reinterpreted_input, &input, sizeof(T)); // this is mandatory to get rid of the memory alignment problem. A simple cast can't work here
 801961e:	2318      	movs	r3, #24
	: _M_start(), _M_finish(), _M_end_of_storage()
 8019620:	9426      	str	r4, [sp, #152]	@ 0x98
 8019622:	e9cd 4424 	strd	r4, r4, [sp, #144]	@ 0x90
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8019626:	f1c3 0c20 	rsb	ip, r3, #32
 801962a:	fa22 f103 	lsr.w	r1, r2, r3
 801962e:	f1a3 0020 	sub.w	r0, r3, #32
 8019632:	fa04 fc0c 	lsl.w	ip, r4, ip
 8019636:	fa24 f000 	lsr.w	r0, r4, r0
 801963a:	ea41 010c 	orr.w	r1, r1, ip
 801963e:	4301      	orrs	r1, r0
      { emplace_back(std::move(__x)); }
 8019640:	a824      	add	r0, sp, #144	@ 0x90
 8019642:	f88d 1019 	strb.w	r1, [sp, #25]
 8019646:	f10d 0119 	add.w	r1, sp, #25
 801964a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801964e:	f7f7 fc73 	bl	8010f38 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	for (uint8_t index = 0; index < type_length; index++) {
 8019652:	9b05      	ldr	r3, [sp, #20]
 8019654:	9a04      	ldr	r2, [sp, #16]
 8019656:	3b08      	subs	r3, #8
 8019658:	f113 0f08 	cmn.w	r3, #8
 801965c:	d1e3      	bne.n	8019626 <_ZN10Publishers13SpinPublisherEh+0x4fa>
        data.insert(data.end(), single.begin(), single.end());
 801965e:	a813      	add	r0, sp, #76	@ 0x4c
 8019660:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8019662:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	@ 0x90
 8019666:	f7ff fcf5 	bl	8019054 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
      }
 801966a:	a824      	add	r0, sp, #144	@ 0x90
 801966c:	f7e7 fa38 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8019670:	e799      	b.n	80195a6 <_ZN10Publishers13SpinPublisherEh+0x47a>
						success = false;
 8019672:	f88d 4018 	strb.w	r4, [sp, #24]
					if (not success)
 8019676:	e645      	b.n	8019304 <_ZN10Publishers13SpinPublisherEh+0x1d8>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019678:	e9dd b10a 	ldrd	fp, r1, [sp, #40]	@ 0x28
	  if (__xlen > capacity())
 801967c:	ebb1 070b 	subs.w	r7, r1, fp
 8019680:	d04e      	beq.n	8019720 <_ZN10Publishers13SpinPublisherEh+0x5f4>
	  pointer __result = this->_M_allocate(__n);
 8019682:	4638      	mov	r0, r7
 8019684:	9105      	str	r1, [sp, #20]
 8019686:	f7fe fcc8 	bl	801801a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 801968a:	9905      	ldr	r1, [sp, #20]
 801968c:	4602      	mov	r2, r0
 801968e:	9004      	str	r0, [sp, #16]
 8019690:	4658      	mov	r0, fp
 8019692:	f7e7 fac9 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 8019696:	9a04      	ldr	r2, [sp, #16]
 8019698:	9221      	str	r2, [sp, #132]	@ 0x84
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 801969a:	443a      	add	r2, r7
 801969c:	9223      	str	r2, [sp, #140]	@ 0x8c
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 801969e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
					if (not communication->BuildPayload(&message, element) && message.payload.size() > 0) {
 80196a0:	a91e      	add	r1, sp, #120	@ 0x78
 80196a2:	a824      	add	r0, sp, #144	@ 0x90
 80196a4:	443b      	add	r3, r7
 80196a6:	68af      	ldr	r7, [r5, #8]
 80196a8:	9322      	str	r3, [sp, #136]	@ 0x88
 80196aa:	f7f7 fd57 	bl	801115c <_ZN14MessageElementC1ERKS_>
 80196ae:	aa24      	add	r2, sp, #144	@ 0x90
 80196b0:	a919      	add	r1, sp, #100	@ 0x64
 80196b2:	4638      	mov	r0, r7
 80196b4:	f7f8 ffc8 	bl	8012648 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80196b8:	2800      	cmp	r0, #0
 80196ba:	d136      	bne.n	801972a <_ZN10Publishers13SpinPublisherEh+0x5fe>
 80196bc:	e9dd 371a 	ldrd	r3, r7, [sp, #104]	@ 0x68
 80196c0:	1aff      	subs	r7, r7, r3
 80196c2:	bf18      	it	ne
 80196c4:	2701      	movne	r7, #1
      }
 80196c6:	a827      	add	r0, sp, #156	@ 0x9c
 80196c8:	f7e7 fa0a 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80196cc:	2f00      	cmp	r7, #0
 80196ce:	f43f ae19 	beq.w	8019304 <_ZN10Publishers13SpinPublisherEh+0x1d8>
 80196d2:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 80196d6:	a91a      	add	r1, sp, #104	@ 0x68
						communication->Send(message);
 80196d8:	68af      	ldr	r7, [r5, #8]
 80196da:	a825      	add	r0, sp, #148	@ 0x94
 80196dc:	f88d 3090 	strb.w	r3, [sp, #144]	@ 0x90
 80196e0:	f7e7 faae 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80196e4:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 80196e8:	a924      	add	r1, sp, #144	@ 0x90
 80196ea:	4638      	mov	r0, r7
 80196ec:	f8ad 30a0 	strh.w	r3, [sp, #160]	@ 0xa0
 80196f0:	f7f7 fe36 	bl	8011360 <_ZN13Communication4SendE13MessageHeader>
 80196f4:	a825      	add	r0, sp, #148	@ 0x94
 80196f6:	f7e7 f9f3 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
						communication->BuildPayload(&message, element);
 80196fa:	68af      	ldr	r7, [r5, #8]
 80196fc:	a91e      	add	r1, sp, #120	@ 0x78
 80196fe:	a824      	add	r0, sp, #144	@ 0x90
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8019700:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8019704:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
 8019706:	bf18      	it	ne
 8019708:	931b      	strne	r3, [sp, #108]	@ 0x6c
 801970a:	f7f7 fd27 	bl	801115c <_ZN14MessageElementC1ERKS_>
 801970e:	aa24      	add	r2, sp, #144	@ 0x90
 8019710:	a919      	add	r1, sp, #100	@ 0x64
 8019712:	4638      	mov	r0, r7
 8019714:	f7f8 ff98 	bl	8012648 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
      }
 8019718:	a827      	add	r0, sp, #156	@ 0x9c
 801971a:	f7e7 f9e1 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801971e:	e5f1      	b.n	8019304 <_ZN10Publishers13SpinPublisherEh+0x1d8>
 8019720:	463a      	mov	r2, r7
 8019722:	4658      	mov	r0, fp
 8019724:	f7e7 fa80 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8019728:	e7b9      	b.n	801969e <_ZN10Publishers13SpinPublisherEh+0x572>
					if (not communication->BuildPayload(&message, element) && message.payload.size() > 0) {
 801972a:	2700      	movs	r7, #0
 801972c:	e7cb      	b.n	80196c6 <_ZN10Publishers13SpinPublisherEh+0x59a>

0801972e <_ZZN9Registers16AddBaseRegistersEvENUlPvtPPmPtE_4_FUNES0_tS2_S3_>:
void Registers::AddBaseRegisters(void) {
	// Register to get the timestamp in ms
	AddRegister<uint32_t>(REG_TIMEBASE);
	SetRegisterAsSingle(REG_TIMEBASE);
	AddReadCallback<uint32_t>(REG_TIMEBASE, NULL,
		[](void* context, uint16_t register_id, uint32_t** output, uint16_t* length) -> bool {
 801972e:	b538      	push	{r3, r4, r5, lr}
			*length = 1;
 8019730:	2401      	movs	r4, #1
			**output = HAL_GetTick();
 8019732:	6815      	ldr	r5, [r2, #0]
			*length = 1;
 8019734:	801c      	strh	r4, [r3, #0]
			**output = HAL_GetTick();
 8019736:	f7e9 fee7 	bl	8003508 <HAL_GetTick>
 801973a:	6028      	str	r0, [r5, #0]
			return true;
		}
 801973c:	4620      	mov	r0, r4
 801973e:	bd38      	pop	{r3, r4, r5, pc}

08019740 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8019740:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019742:	491e      	ldr	r1, [pc, #120]	@ (80197bc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8019744:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019746:	481e      	ldr	r0, [pc, #120]	@ (80197c0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8019748:	f004 fcf6 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801974c:	bb40      	cbnz	r0, 80197a0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801974e:	491d      	ldr	r1, [pc, #116]	@ (80197c4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>)
 8019750:	481b      	ldr	r0, [pc, #108]	@ (80197c0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8019752:	f004 fcf1 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019756:	bb28      	cbnz	r0, 80197a4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8019758:	4919      	ldr	r1, [pc, #100]	@ (80197c0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 801975a:	4608      	mov	r0, r1
 801975c:	f004 fcec 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019760:	bb10      	cbnz	r0, 80197a8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8019762:	4919      	ldr	r1, [pc, #100]	@ (80197c8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>)
 8019764:	4816      	ldr	r0, [pc, #88]	@ (80197c0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8019766:	f004 fce7 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801976a:	b9f8      	cbnz	r0, 80197ac <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801976c:	4917      	ldr	r1, [pc, #92]	@ (80197cc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>)
 801976e:	4814      	ldr	r0, [pc, #80]	@ (80197c0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8019770:	f004 fce2 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019774:	b9e0      	cbnz	r0, 80197b0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8019776:	4916      	ldr	r1, [pc, #88]	@ (80197d0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>)
 8019778:	4811      	ldr	r0, [pc, #68]	@ (80197c0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 801977a:	f004 fcdd 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801977e:	b9c8      	cbnz	r0, 80197b4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8019780:	4914      	ldr	r1, [pc, #80]	@ (80197d4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>)
 8019782:	480f      	ldr	r0, [pc, #60]	@ (80197c0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8019784:	f004 fcd8 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019788:	b9b0      	cbnz	r0, 80197b8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801978a:	4913      	ldr	r1, [pc, #76]	@ (80197d8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>)
 801978c:	480c      	ldr	r0, [pc, #48]	@ (80197c0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 801978e:	f004 fcd3 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8019792:	2800      	cmp	r0, #0
 8019794:	bf14      	ite	ne
 8019796:	2309      	movne	r3, #9
 8019798:	2300      	moveq	r3, #0
 801979a:	7020      	strb	r0, [r4, #0]
}
 801979c:	4618      	mov	r0, r3
 801979e:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80197a0:	2300      	movs	r3, #0
 80197a2:	e7fa      	b.n	801979a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80197a4:	2301      	movs	r3, #1
 80197a6:	e7f8      	b.n	801979a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80197a8:	2302      	movs	r3, #2
 80197aa:	e7f6      	b.n	801979a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80197ac:	2303      	movs	r3, #3
 80197ae:	e7f4      	b.n	801979a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80197b0:	2304      	movs	r3, #4
 80197b2:	e7f2      	b.n	801979a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80197b4:	2306      	movs	r3, #6
 80197b6:	e7f0      	b.n	801979a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80197b8:	2308      	movs	r3, #8
 80197ba:	e7ee      	b.n	801979a <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
 80197bc:	0801f65c 	.word	0x0801f65c
 80197c0:	0801f644 	.word	0x0801f644
 80197c4:	0801f654 	.word	0x0801f654
 80197c8:	0801f63c 	.word	0x0801f63c
 80197cc:	0801f664 	.word	0x0801f664
 80197d0:	0801f64c 	.word	0x0801f64c
 80197d4:	0801f634 	.word	0x0801f634
 80197d8:	0801f62c 	.word	0x0801f62c

080197dc <_ZN9RegistersC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 80197dc:	2200      	movs	r2, #0
 80197de:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80197e2:	60c2      	str	r2, [r0, #12]
	callbacks[INT16_TYPE] = NULL;
 80197e4:	6242      	str	r2, [r0, #36]	@ 0x24
	callbacks[INT64_TYPE] = NULL;
 80197e6:	62c2      	str	r2, [r0, #44]	@ 0x2c
 80197e8:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
 80197ec:	e9c0 2210 	strd	r2, r2, [r0, #64]	@ 0x40
 80197f0:	e9c0 2212 	strd	r2, r2, [r0, #72]	@ 0x48
 80197f4:	e9c0 2214 	strd	r2, r2, [r0, #80]	@ 0x50
 80197f8:	e9c0 2216 	strd	r2, r2, [r0, #88]	@ 0x58
 80197fc:	e9c0 2218 	strd	r2, r2, [r0, #96]	@ 0x60
 8019800:	e9c0 221a 	strd	r2, r2, [r0, #104]	@ 0x68
 8019804:	e9c0 221c 	strd	r2, r2, [r0, #112]	@ 0x70
 8019808:	e9c0 221e 	strd	r2, r2, [r0, #120]	@ 0x78
 801980c:	e9c0 2220 	strd	r2, r2, [r0, #128]	@ 0x80
 8019810:	e9c0 2222 	strd	r2, r2, [r0, #136]	@ 0x88
 8019814:	e9c0 2224 	strd	r2, r2, [r0, #144]	@ 0x90
Registers::Registers() {
 8019818:	f100 0238 	add.w	r2, r0, #56	@ 0x38
	callbacks[UINT8_TYPE] = &uint8_t_callbacks;
 801981c:	6102      	str	r2, [r0, #16]
Registers::Registers() {
 801981e:	f100 0244 	add.w	r2, r0, #68	@ 0x44
	callbacks[UINT16_TYPE] = &uint16_t_callbacks;
 8019822:	6142      	str	r2, [r0, #20]
Registers::Registers() {
 8019824:	f100 0250 	add.w	r2, r0, #80	@ 0x50
	callbacks[UINT32_TYPE] = &uint32_t_callbacks;
 8019828:	6182      	str	r2, [r0, #24]
Registers::Registers() {
 801982a:	f100 025c 	add.w	r2, r0, #92	@ 0x5c
	callbacks[UINT64_TYPE] = &uint64_t_callbacks;
 801982e:	61c2      	str	r2, [r0, #28]
Registers::Registers() {
 8019830:	f100 0268 	add.w	r2, r0, #104	@ 0x68
	callbacks[INT8_TYPE] = &int8_t_callbacks;
 8019834:	6202      	str	r2, [r0, #32]
Registers::Registers() {
 8019836:	f100 0274 	add.w	r2, r0, #116	@ 0x74
	callbacks[INT32_TYPE] = &int32_t_callbacks;
 801983a:	6282      	str	r2, [r0, #40]	@ 0x28
Registers::Registers() {
 801983c:	f100 0280 	add.w	r2, r0, #128	@ 0x80
	callbacks[FLOAT_TYPE] = &float_callbacks;
 8019840:	6302      	str	r2, [r0, #48]	@ 0x30
Registers::Registers() {
 8019842:	f100 028c 	add.w	r2, r0, #140	@ 0x8c
	callbacks[DOUBLE_TYPE] = &double_callbacks;
 8019846:	6342      	str	r2, [r0, #52]	@ 0x34
}
 8019848:	4770      	bx	lr

0801984a <_ZN9Registers4InitEv>:
	RegistersSemaphore = osSemaphoreNew(1,1,NULL);
 801984a:	2101      	movs	r1, #1
 801984c:	2200      	movs	r2, #0
void Registers::Init(void) {
 801984e:	b510      	push	{r4, lr}
 8019850:	4604      	mov	r4, r0
	RegistersSemaphore = osSemaphoreNew(1,1,NULL);
 8019852:	4608      	mov	r0, r1
 8019854:	f7f3 faac 	bl	800cdb0 <osSemaphoreNew>
 8019858:	6020      	str	r0, [r4, #0]
}
 801985a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(RegistersSemaphore);
 801985e:	f7f3 bb37 	b.w	800ced0 <osSemaphoreRelease>

08019862 <_ZN9Registers25FindRegisterConfigurationEtPb>:
 *
 * @param input ID: register address
 * @param output success: whether successful
 * @return the pointer to the register configuration
 */
RegisterConfiguration* Registers::FindRegisterConfiguration(uint16_t ID, bool* success) {
 8019862:	b530      	push	{r4, r5, lr}
 8019864:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
	for (RegisterConfiguration &register_configuration : registers) {
 8019868:	429c      	cmp	r4, r3
 801986a:	4618      	mov	r0, r3
 801986c:	d103      	bne.n	8019876 <_ZN9Registers25FindRegisterConfigurationEtPb+0x14>
 801986e:	2300      	movs	r3, #0
			*success = true;
			return &register_configuration;
		}
	}
	*success = false;
	return NULL;
 8019870:	4618      	mov	r0, r3
			*success = true;
 8019872:	7013      	strb	r3, [r2, #0]
}
 8019874:	bd30      	pop	{r4, r5, pc}
		if (register_configuration.register_info.address == ID) {
 8019876:	8845      	ldrh	r5, [r0, #2]
 8019878:	f100 0310 	add.w	r3, r0, #16
 801987c:	428d      	cmp	r5, r1
 801987e:	d1f3      	bne.n	8019868 <_ZN9Registers25FindRegisterConfigurationEtPb+0x6>
 8019880:	2301      	movs	r3, #1
 8019882:	e7f6      	b.n	8019872 <_ZN9Registers25FindRegisterConfigurationEtPb+0x10>

08019884 <_ZN9Registers12FindRegisterEtPb>:
Register Registers::FindRegister(uint16_t ID, bool* success) {
 8019884:	b510      	push	{r4, lr}
 8019886:	4604      	mov	r4, r0
 8019888:	4608      	mov	r0, r1
 801988a:	4611      	mov	r1, r2
	RegisterConfiguration* register_configuration = FindRegisterConfiguration(ID, success);
 801988c:	461a      	mov	r2, r3
 801988e:	f7ff ffe8 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	return register_configuration->register_info;
 8019892:	f8d0 3002 	ldr.w	r3, [r0, #2]
 8019896:	6023      	str	r3, [r4, #0]
 8019898:	88c3      	ldrh	r3, [r0, #6]
}
 801989a:	4620      	mov	r0, r4
	return register_configuration->register_info;
 801989c:	80a3      	strh	r3, [r4, #4]
}
 801989e:	bd10      	pop	{r4, pc}

080198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>:
 *
 * @param input ID: register address
 * @param input register_semaphore: pointer to the semaphore to link
 * @return whether successful
 */
bool Registers::AddRegisterSemaphore(uint16_t ID, osSemaphoreId_t* register_semaphore) {
 80198a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80198a2:	460e      	mov	r6, r1
 80198a4:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80198a6:	f04f 31ff 	mov.w	r1, #4294967295
 80198aa:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterSemaphore(uint16_t ID, osSemaphoreId_t* register_semaphore) {
 80198ac:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80198ae:	f7f3 fadb 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80198b2:	4631      	mov	r1, r6
 80198b4:	f10d 0207 	add.w	r2, sp, #7
 80198b8:	4620      	mov	r0, r4
 80198ba:	f7ff ffd2 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80198be:	f89d 6007 	ldrb.w	r6, [sp, #7]
 80198c2:	b92e      	cbnz	r6, 80198d0 <_ZN9Registers20AddRegisterSemaphoreEtPPv+0x30>
		osSemaphoreRelease(RegistersSemaphore);
		return false;
	}

	target_register->register_semaphore = register_semaphore;
	osSemaphoreRelease(RegistersSemaphore);
 80198c4:	6820      	ldr	r0, [r4, #0]
 80198c6:	f7f3 fb03 	bl	800ced0 <osSemaphoreRelease>
	return true;
}
 80198ca:	4630      	mov	r0, r6
 80198cc:	b002      	add	sp, #8
 80198ce:	bd70      	pop	{r4, r5, r6, pc}
	target_register->register_semaphore = register_semaphore;
 80198d0:	60c5      	str	r5, [r0, #12]
 80198d2:	e7f7      	b.n	80198c4 <_ZN9Registers20AddRegisterSemaphoreEtPPv+0x24>

080198d4 <_ZN9Registers19SetRegisterAsSingleEt>:
 * @brief Set the register as a single value (not an array nor a vector)
 *
 * @param input ID: register address
 * @return whether successful
 */
bool Registers::SetRegisterAsSingle(uint16_t ID) {
 80198d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80198d6:	460d      	mov	r5, r1
 80198d8:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80198da:	f04f 31ff 	mov.w	r1, #4294967295
 80198de:	6800      	ldr	r0, [r0, #0]
 80198e0:	f7f3 fac2 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80198e4:	4629      	mov	r1, r5
 80198e6:	f10d 0207 	add.w	r2, sp, #7
 80198ea:	4620      	mov	r0, r4
 80198ec:	f7ff ffb9 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80198f0:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80198f4:	b92d      	cbnz	r5, 8019902 <_ZN9Registers19SetRegisterAsSingleEt+0x2e>
		return false;
	}

	target_register->register_info.isArray = false;
	target_register->register_info.length = 1;
	osSemaphoreRelease(RegistersSemaphore);
 80198f6:	6820      	ldr	r0, [r4, #0]
 80198f8:	f7f3 faea 	bl	800ced0 <osSemaphoreRelease>
	return true;
}
 80198fc:	4628      	mov	r0, r5
 80198fe:	b003      	add	sp, #12
 8019900:	bd30      	pop	{r4, r5, pc}
	target_register->register_info.isArray = false;
 8019902:	2300      	movs	r3, #0
 8019904:	7143      	strb	r3, [r0, #5]
	target_register->register_info.length = 1;
 8019906:	2301      	movs	r3, #1
 8019908:	80c3      	strh	r3, [r0, #6]
 801990a:	e7f4      	b.n	80198f6 <_ZN9Registers19SetRegisterAsSingleEt+0x22>

0801990c <_ZN9Registers18SetRegisterAsArrayEtt>:
 *
 * @param input ID: register address
 * @param input length_: length of the array
 * @return whether successful
 */
bool Registers::SetRegisterAsArray(uint16_t ID, uint16_t length_) {
 801990c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801990e:	460e      	mov	r6, r1
 8019910:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8019912:	f04f 31ff 	mov.w	r1, #4294967295
 8019916:	6800      	ldr	r0, [r0, #0]
bool Registers::SetRegisterAsArray(uint16_t ID, uint16_t length_) {
 8019918:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801991a:	f7f3 faa5 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801991e:	4631      	mov	r1, r6
 8019920:	f10d 0207 	add.w	r2, sp, #7
 8019924:	4620      	mov	r0, r4
 8019926:	f7ff ff9c 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801992a:	f89d 6007 	ldrb.w	r6, [sp, #7]
 801992e:	b92e      	cbnz	r6, 801993c <_ZN9Registers18SetRegisterAsArrayEtt+0x30>
		return false;
	}

	target_register->register_info.isArray = true;
	target_register->register_info.length = length_;
	osSemaphoreRelease(RegistersSemaphore);
 8019930:	6820      	ldr	r0, [r4, #0]
 8019932:	f7f3 facd 	bl	800ced0 <osSemaphoreRelease>
	return true;
}
 8019936:	4630      	mov	r0, r6
 8019938:	b002      	add	sp, #8
 801993a:	bd70      	pop	{r4, r5, r6, pc}
	target_register->register_info.isArray = true;
 801993c:	2301      	movs	r3, #1
	target_register->register_info.length = length_;
 801993e:	80c5      	strh	r5, [r0, #6]
	target_register->register_info.isArray = true;
 8019940:	7143      	strb	r3, [r0, #5]
	target_register->register_info.length = length_;
 8019942:	e7f5      	b.n	8019930 <_ZN9Registers18SetRegisterAsArrayEtt+0x24>

08019944 <_ZN9Registers19SetRegisterAsVectorEt>:
 *
 * @param input ID: register address
 * @return whether successful
 */
bool Registers::SetRegisterAsVector(uint16_t ID) {
	return SetRegisterAsArray(ID, 0);
 8019944:	2200      	movs	r2, #0
 8019946:	f7ff bfe1 	b.w	801990c <_ZN9Registers18SetRegisterAsArrayEtt>

0801994a <_ZN9Registers22SetRegisterPermissionsEth>:
 *
 * @param input ID: register address
 * @param input permissions_: WRITE_PERMISSION or READ_PERMISSION
 * @return whether successful
 */
bool Registers::SetRegisterPermissions(uint16_t ID, uint8_t permissions_) {
 801994a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801994c:	460e      	mov	r6, r1
 801994e:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8019950:	f04f 31ff 	mov.w	r1, #4294967295
 8019954:	6800      	ldr	r0, [r0, #0]
bool Registers::SetRegisterPermissions(uint16_t ID, uint8_t permissions_) {
 8019956:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8019958:	f7f3 fa86 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801995c:	4631      	mov	r1, r6
 801995e:	f10d 0207 	add.w	r2, sp, #7
 8019962:	4620      	mov	r0, r4
 8019964:	f7ff ff7d 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8019968:	f89d 6007 	ldrb.w	r6, [sp, #7]
 801996c:	b92e      	cbnz	r6, 801997a <_ZN9Registers22SetRegisterPermissionsEth+0x30>
		return false;
	}

	target_register->access.write = permissions_ & WRITE_PERMISSION;
	target_register->access.read = permissions_ & READ_PERMISSION;
	osSemaphoreRelease(RegistersSemaphore);
 801996e:	6820      	ldr	r0, [r4, #0]
 8019970:	f7f3 faae 	bl	800ced0 <osSemaphoreRelease>
	return true;
}
 8019974:	4630      	mov	r0, r6
 8019976:	b002      	add	sp, #8
 8019978:	bd70      	pop	{r4, r5, r6, pc}
	target_register->access.write = permissions_ & WRITE_PERMISSION;
 801997a:	f005 0301 	and.w	r3, r5, #1
	target_register->access.read = permissions_ & READ_PERMISSION;
 801997e:	f3c5 0540 	ubfx	r5, r5, #1, #1
	target_register->access.write = permissions_ & WRITE_PERMISSION;
 8019982:	7203      	strb	r3, [r0, #8]
	target_register->access.read = permissions_ & READ_PERMISSION;
 8019984:	7245      	strb	r5, [r0, #9]
 8019986:	e7f2      	b.n	801996e <_ZN9Registers22SetRegisterPermissionsEth+0x24>

08019988 <_ZN9Registers12IsRegisteredEt>:
 * @brief Check the register exists
 *
 * @param input ID: register address to check
 * @return true if the register is found
 */
bool Registers::IsRegistered(uint16_t ID) {
 8019988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801998a:	4604      	mov	r4, r0
 801998c:	460d      	mov	r5, r1
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801998e:	6800      	ldr	r0, [r0, #0]
 8019990:	f04f 31ff 	mov.w	r1, #4294967295
 8019994:	f7f3 fa68 	bl	800ce68 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8019998:	f10d 0207 	add.w	r2, sp, #7
 801999c:	4629      	mov	r1, r5
 801999e:	4620      	mov	r0, r4
 80199a0:	f7ff ff5f 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	osSemaphoreRelease(RegistersSemaphore);
 80199a4:	6820      	ldr	r0, [r4, #0]
 80199a6:	f7f3 fa93 	bl	800ced0 <osSemaphoreRelease>
	return success;
}
 80199aa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80199ae:	b003      	add	sp, #12
 80199b0:	bd30      	pop	{r4, r5, pc}
	...

080199b4 <_ZN9Registers11GetTypeSizeEh>:
 *
 * @param input type: the type ID
 * @return the size in byte of the input type
 */
uint8_t Registers::GetTypeSize(uint8_t type) {
	if (type == UINT8_TYPE || type == INT8_TYPE)
 80199b4:	2909      	cmp	r1, #9
 80199b6:	bf9a      	itte	ls
 80199b8:	4b01      	ldrls	r3, [pc, #4]	@ (80199c0 <_ZN9Registers11GetTypeSizeEh+0xc>)
 80199ba:	5c58      	ldrbls	r0, [r3, r1]
uint8_t Registers::GetTypeSize(uint8_t type) {
 80199bc:	2000      	movhi	r0, #0
		return 4;
	if (type == UINT64_TYPE || type == INT64_TYPE || type == DOUBLE_TYPE)
		return 8;

	return 0;
}
 80199be:	4770      	bx	lr
 80199c0:	0801f55c 	.word	0x0801f55c

080199c4 <_ZN9Registers16AddBaseRegistersEv>:
void Registers::AddBaseRegisters(void) {
 80199c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199c6:	4604      	mov	r4, r0
 80199c8:	b087      	sub	sp, #28
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80199ca:	f04f 31ff 	mov.w	r1, #4294967295
 80199ce:	6800      	ldr	r0, [r0, #0]
 80199d0:	f7f3 fa4a 	bl	800ce68 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 80199d4:	f10d 0207 	add.w	r2, sp, #7
 80199d8:	2100      	movs	r1, #0
 80199da:	4620      	mov	r0, r4
 80199dc:	f7ff ff41 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 80199e0:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80199e4:	b1dd      	cbz	r5, 8019a1e <_ZN9Registers16AddBaseRegistersEv+0x5a>
	osSemaphoreRelease(RegistersSemaphore);
 80199e6:	6820      	ldr	r0, [r4, #0]
 80199e8:	f7f3 fa72 	bl	800ced0 <osSemaphoreRelease>
	SetRegisterAsSingle(REG_TIMEBASE);
 80199ec:	2100      	movs	r1, #0
 80199ee:	4620      	mov	r0, r4
 80199f0:	f7ff ff70 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80199f4:	f04f 31ff 	mov.w	r1, #4294967295
 80199f8:	6820      	ldr	r0, [r4, #0]
 80199fa:	f7f3 fa35 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80199fe:	f10d 0207 	add.w	r2, sp, #7
 8019a02:	2100      	movs	r1, #0
 8019a04:	4620      	mov	r0, r4
 8019a06:	f7ff ff2c 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8019a0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8019a0e:	4605      	mov	r5, r0
	if (!success) {
 8019a10:	bb3b      	cbnz	r3, 8019a62 <_ZN9Registers16AddBaseRegistersEv+0x9e>
	osSemaphoreRelease(RegistersSemaphore);
 8019a12:	6820      	ldr	r0, [r4, #0]
}
 8019a14:	b007      	add	sp, #28
 8019a16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019a1a:	f7f3 ba59 	b.w	800ced0 <osSemaphoreRelease>
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8019a1e:	f10d 0007 	add.w	r0, sp, #7
 8019a22:	f7ff fe8d 	bl	8019740 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	configuration_.register_info = register_;
 8019a26:	2301      	movs	r3, #1
	configuration_.mode = mode;
 8019a28:	9502      	str	r5, [sp, #8]
	configuration_.register_info = register_;
 8019a2a:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8019a2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8019a32:	f88d 000c 	strb.w	r0, [sp, #12]
 8019a36:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8019a3a:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d0d1      	beq.n	80199e6 <_ZN9Registers16AddBaseRegistersEv+0x22>
      push_back(const value_type& __x)
 8019a42:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8019a44:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 8019a48:	429d      	cmp	r5, r3
 8019a4a:	d005      	beq.n	8019a58 <_ZN9Registers16AddBaseRegistersEv+0x94>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8019a4c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8019a4e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8019a52:	3510      	adds	r5, #16
 8019a54:	60a5      	str	r5, [r4, #8]
 8019a56:	e7c6      	b.n	80199e6 <_ZN9Registers16AddBaseRegistersEv+0x22>
	  _M_realloc_insert(end(), __x);
 8019a58:	4629      	mov	r1, r5
 8019a5a:	1d20      	adds	r0, r4, #4
 8019a5c:	f7f6 f9d6 	bl	800fe0c <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8019a60:	e7c1      	b.n	80199e6 <_ZN9Registers16AddBaseRegistersEv+0x22>
	uint8_t registered_type = GetTypeID<T>(&success);
 8019a62:	f10d 0007 	add.w	r0, sp, #7
 8019a66:	f7ff fe6b 	bl	8019740 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 8019a6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d0cf      	beq.n	8019a12 <_ZN9Registers16AddBaseRegistersEv+0x4e>
	if (target_register->register_info.type != registered_type) {
 8019a72:	792b      	ldrb	r3, [r5, #4]
 8019a74:	4298      	cmp	r0, r3
 8019a76:	d1cc      	bne.n	8019a12 <_ZN9Registers16AddBaseRegistersEv+0x4e>
	if (callbacks[target_register->register_info.type] == NULL) {
 8019a78:	3004      	adds	r0, #4
 8019a7a:	f854 7020 	ldr.w	r7, [r4, r0, lsl #2]
 8019a7e:	2f00      	cmp	r7, #0
 8019a80:	d0c7      	beq.n	8019a12 <_ZN9Registers16AddBaseRegistersEv+0x4e>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8019a82:	7829      	ldrb	r1, [r5, #0]
 8019a84:	4814      	ldr	r0, [pc, #80]	@ (8019ad8 <_ZN9Registers16AddBaseRegistersEv+0x114>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019a86:	e9d7 3600 	ldrd	r3, r6, [r7]
 8019a8a:	1af2      	subs	r2, r6, r3
 8019a8c:	1112      	asrs	r2, r2, #4
 8019a8e:	b9b1      	cbnz	r1, 8019abe <_ZN9Registers16AddBaseRegistersEv+0xfa>
 8019a90:	7869      	ldrb	r1, [r5, #1]
 8019a92:	b9a1      	cbnz	r1, 8019abe <_ZN9Registers16AddBaseRegistersEv+0xfa>
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8019a94:	816a      	strh	r2, [r5, #10]
 8019a96:	aa02      	add	r2, sp, #8
		callback.read = read;
 8019a98:	9005      	str	r0, [sp, #20]
		callback.write = NULL;
 8019a9a:	e9cd 1103 	strd	r1, r1, [sp, #12]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8019a9e:	68b9      	ldr	r1, [r7, #8]
 8019aa0:	42b1      	cmp	r1, r6
 8019aa2:	d008      	beq.n	8019ab6 <_ZN9Registers16AddBaseRegistersEv+0xf2>
 8019aa4:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8019aa6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8019aaa:	3610      	adds	r6, #16
 8019aac:	607e      	str	r6, [r7, #4]
	target_register->mode.callbacks = true;
 8019aae:	2301      	movs	r3, #1
 8019ab0:	706b      	strb	r3, [r5, #1]
	target_register->access.read = true;
 8019ab2:	726b      	strb	r3, [r5, #9]
 8019ab4:	e7ad      	b.n	8019a12 <_ZN9Registers16AddBaseRegistersEv+0x4e>
	  _M_realloc_insert(end(), __x);
 8019ab6:	4638      	mov	r0, r7
 8019ab8:	f7fb fbae 	bl	8015218 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8019abc:	e7f7      	b.n	8019aae <_ZN9Registers16AddBaseRegistersEv+0xea>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8019abe:	8969      	ldrh	r1, [r5, #10]
	if (__n >= this->size())
 8019ac0:	4291      	cmp	r1, r2
 8019ac2:	d302      	bcc.n	8019aca <_ZN9Registers16AddBaseRegistersEv+0x106>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8019ac4:	4805      	ldr	r0, [pc, #20]	@ (8019adc <_ZN9Registers16AddBaseRegistersEv+0x118>)
 8019ac6:	f004 fb58 	bl	801e17a <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8019aca:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->context = context;
 8019ace:	2200      	movs	r2, #0
		callback->read = read;
 8019ad0:	60d8      	str	r0, [r3, #12]
		callback->context = context;
 8019ad2:	605a      	str	r2, [r3, #4]
 8019ad4:	e7eb      	b.n	8019aae <_ZN9Registers16AddBaseRegistersEv+0xea>
 8019ad6:	bf00      	nop
 8019ad8:	0801972f 	.word	0x0801972f
 8019adc:	0801f44c 	.word	0x0801f44c

08019ae0 <_ZZN7Sensors12AddRegistersEvENUlPvtPPhPtE_4_FUNES0_tS2_S3_>:
void Sensors::AddRegisters(void) {
	// Register to access the general sensor reading status
	registers->AddRegister<uint8_t>(REG_SENSORS_READING_STATUS);
	registers->SetRegisterAsSingle(REG_SENSORS_READING_STATUS);
	registers->AddReadCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
			[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 8019ae0:	b538      	push	{r3, r4, r5, lr}
 8019ae2:	4604      	mov	r4, r0
 8019ae4:	4615      	mov	r5, r2
			Sensors* self = (Sensors*) context;
			osSemaphoreAcquire(self->SensorsSemaphore, osWaitForever);
 8019ae6:	f04f 31ff 	mov.w	r1, #4294967295
 8019aea:	6800      	ldr	r0, [r0, #0]
 8019aec:	f7f3 f9bc 	bl	800ce68 <osSemaphoreAcquire>
			**output = (uint8_t) self->active;
 8019af0:	682b      	ldr	r3, [r5, #0]
 8019af2:	7922      	ldrb	r2, [r4, #4]
 8019af4:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->SensorsSemaphore);
 8019af6:	6820      	ldr	r0, [r4, #0]
 8019af8:	f7f3 f9ea 	bl	800ced0 <osSemaphoreRelease>
			return true;
		}
 8019afc:	2001      	movs	r0, #1
 8019afe:	bd38      	pop	{r3, r4, r5, pc}

08019b00 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8019b00:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019b02:	491e      	ldr	r1, [pc, #120]	@ (8019b7c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8019b04:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019b06:	481e      	ldr	r0, [pc, #120]	@ (8019b80 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 8019b08:	f004 fb16 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019b0c:	bb40      	cbnz	r0, 8019b60 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8019b0e:	491d      	ldr	r1, [pc, #116]	@ (8019b84 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>)
 8019b10:	481b      	ldr	r0, [pc, #108]	@ (8019b80 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 8019b12:	f004 fb11 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019b16:	bb28      	cbnz	r0, 8019b64 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8019b18:	491b      	ldr	r1, [pc, #108]	@ (8019b88 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>)
 8019b1a:	4819      	ldr	r0, [pc, #100]	@ (8019b80 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 8019b1c:	f004 fb0c 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019b20:	bb10      	cbnz	r0, 8019b68 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8019b22:	491a      	ldr	r1, [pc, #104]	@ (8019b8c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>)
 8019b24:	4816      	ldr	r0, [pc, #88]	@ (8019b80 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 8019b26:	f004 fb07 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019b2a:	b9f8      	cbnz	r0, 8019b6c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8019b2c:	4918      	ldr	r1, [pc, #96]	@ (8019b90 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>)
 8019b2e:	4814      	ldr	r0, [pc, #80]	@ (8019b80 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 8019b30:	f004 fb02 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019b34:	b9e0      	cbnz	r0, 8019b70 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8019b36:	4917      	ldr	r1, [pc, #92]	@ (8019b94 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>)
 8019b38:	4811      	ldr	r0, [pc, #68]	@ (8019b80 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 8019b3a:	f004 fafd 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019b3e:	b9c8      	cbnz	r0, 8019b74 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8019b40:	490f      	ldr	r1, [pc, #60]	@ (8019b80 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 8019b42:	4608      	mov	r0, r1
 8019b44:	f004 faf8 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019b48:	b9b0      	cbnz	r0, 8019b78 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8019b4a:	4913      	ldr	r1, [pc, #76]	@ (8019b98 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>)
 8019b4c:	480c      	ldr	r0, [pc, #48]	@ (8019b80 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 8019b4e:	f004 faf3 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8019b52:	2800      	cmp	r0, #0
 8019b54:	bf14      	ite	ne
 8019b56:	2309      	movne	r3, #9
 8019b58:	2300      	moveq	r3, #0
 8019b5a:	7020      	strb	r0, [r4, #0]
}
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019b60:	2300      	movs	r3, #0
 8019b62:	e7fa      	b.n	8019b5a <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8019b64:	2301      	movs	r3, #1
 8019b66:	e7f8      	b.n	8019b5a <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8019b68:	2302      	movs	r3, #2
 8019b6a:	e7f6      	b.n	8019b5a <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8019b6c:	2303      	movs	r3, #3
 8019b6e:	e7f4      	b.n	8019b5a <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8019b70:	2304      	movs	r3, #4
 8019b72:	e7f2      	b.n	8019b5a <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8019b74:	2306      	movs	r3, #6
 8019b76:	e7f0      	b.n	8019b5a <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8019b78:	2308      	movs	r3, #8
 8019b7a:	e7ee      	b.n	8019b5a <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
 8019b7c:	0801f65c 	.word	0x0801f65c
 8019b80:	0801f634 	.word	0x0801f634
 8019b84:	0801f654 	.word	0x0801f654
 8019b88:	0801f644 	.word	0x0801f644
 8019b8c:	0801f63c 	.word	0x0801f63c
 8019b90:	0801f664 	.word	0x0801f664
 8019b94:	0801f64c 	.word	0x0801f64c
 8019b98:	0801f62c 	.word	0x0801f62c

08019b9c <_ZN9Registers9GetTypeIDIyEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8019b9c:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019b9e:	491e      	ldr	r1, [pc, #120]	@ (8019c18 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8019ba0:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019ba2:	481e      	ldr	r0, [pc, #120]	@ (8019c1c <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 8019ba4:	f004 fac8 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019ba8:	bb40      	cbnz	r0, 8019bfc <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8019baa:	491d      	ldr	r1, [pc, #116]	@ (8019c20 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x84>)
 8019bac:	481b      	ldr	r0, [pc, #108]	@ (8019c1c <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 8019bae:	f004 fac3 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019bb2:	bb28      	cbnz	r0, 8019c00 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8019bb4:	491b      	ldr	r1, [pc, #108]	@ (8019c24 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x88>)
 8019bb6:	4819      	ldr	r0, [pc, #100]	@ (8019c1c <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 8019bb8:	f004 fabe 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019bbc:	bb10      	cbnz	r0, 8019c04 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8019bbe:	4917      	ldr	r1, [pc, #92]	@ (8019c1c <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 8019bc0:	4608      	mov	r0, r1
 8019bc2:	f004 fab9 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019bc6:	b9f8      	cbnz	r0, 8019c08 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8019bc8:	4917      	ldr	r1, [pc, #92]	@ (8019c28 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x8c>)
 8019bca:	4814      	ldr	r0, [pc, #80]	@ (8019c1c <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 8019bcc:	f004 fab4 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019bd0:	b9e0      	cbnz	r0, 8019c0c <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8019bd2:	4916      	ldr	r1, [pc, #88]	@ (8019c2c <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x90>)
 8019bd4:	4811      	ldr	r0, [pc, #68]	@ (8019c1c <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 8019bd6:	f004 faaf 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019bda:	b9c8      	cbnz	r0, 8019c10 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8019bdc:	4914      	ldr	r1, [pc, #80]	@ (8019c30 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x94>)
 8019bde:	480f      	ldr	r0, [pc, #60]	@ (8019c1c <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 8019be0:	f004 faaa 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019be4:	b9b0      	cbnz	r0, 8019c14 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8019be6:	4913      	ldr	r1, [pc, #76]	@ (8019c34 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x98>)
 8019be8:	480c      	ldr	r0, [pc, #48]	@ (8019c1c <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 8019bea:	f004 faa5 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8019bee:	2800      	cmp	r0, #0
 8019bf0:	bf14      	ite	ne
 8019bf2:	2309      	movne	r3, #9
 8019bf4:	2300      	moveq	r3, #0
 8019bf6:	7020      	strb	r0, [r4, #0]
}
 8019bf8:	4618      	mov	r0, r3
 8019bfa:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019bfc:	2300      	movs	r3, #0
 8019bfe:	e7fa      	b.n	8019bf6 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8019c00:	2301      	movs	r3, #1
 8019c02:	e7f8      	b.n	8019bf6 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8019c04:	2302      	movs	r3, #2
 8019c06:	e7f6      	b.n	8019bf6 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8019c08:	2303      	movs	r3, #3
 8019c0a:	e7f4      	b.n	8019bf6 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8019c0c:	2304      	movs	r3, #4
 8019c0e:	e7f2      	b.n	8019bf6 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8019c10:	2306      	movs	r3, #6
 8019c12:	e7f0      	b.n	8019bf6 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8019c14:	2308      	movs	r3, #8
 8019c16:	e7ee      	b.n	8019bf6 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
 8019c18:	0801f65c 	.word	0x0801f65c
 8019c1c:	0801f63c 	.word	0x0801f63c
 8019c20:	0801f654 	.word	0x0801f654
 8019c24:	0801f644 	.word	0x0801f644
 8019c28:	0801f664 	.word	0x0801f664
 8019c2c:	0801f64c 	.word	0x0801f64c
 8019c30:	0801f634 	.word	0x0801f634
 8019c34:	0801f62c 	.word	0x0801f62c

08019c38 <_ZNSt12_Vector_baseIP6SensorSaIS1_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 8019c38:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8019c3a:	b170      	cbz	r0, 8019c5a <_ZNSt12_Vector_baseIP6SensorSaIS1_EE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8019c3c:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8019c40:	d306      	bcc.n	8019c50 <_ZNSt12_Vector_baseIP6SensorSaIS1_EE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8019c42:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8019c46:	d301      	bcc.n	8019c4c <_ZNSt12_Vector_baseIP6SensorSaIS1_EE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 8019c48:	f004 fa91 	bl	801e16e <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8019c4c:	f004 fa8c 	bl	801e168 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8019c50:	0080      	lsls	r0, r0, #2
      }
 8019c52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019c56:	f004 b9d8 	b.w	801e00a <_Znwj>
 8019c5a:	bd08      	pop	{r3, pc}

08019c5c <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8019c5c:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019c5e:	491e      	ldr	r1, [pc, #120]	@ (8019cd8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8019c60:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019c62:	481e      	ldr	r0, [pc, #120]	@ (8019cdc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8019c64:	f004 fa68 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019c68:	bb40      	cbnz	r0, 8019cbc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8019c6a:	491d      	ldr	r1, [pc, #116]	@ (8019ce0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>)
 8019c6c:	481b      	ldr	r0, [pc, #108]	@ (8019cdc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8019c6e:	f004 fa63 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019c72:	bb28      	cbnz	r0, 8019cc0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8019c74:	4919      	ldr	r1, [pc, #100]	@ (8019cdc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8019c76:	4608      	mov	r0, r1
 8019c78:	f004 fa5e 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019c7c:	bb10      	cbnz	r0, 8019cc4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8019c7e:	4919      	ldr	r1, [pc, #100]	@ (8019ce4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>)
 8019c80:	4816      	ldr	r0, [pc, #88]	@ (8019cdc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8019c82:	f004 fa59 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019c86:	b9f8      	cbnz	r0, 8019cc8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8019c88:	4917      	ldr	r1, [pc, #92]	@ (8019ce8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>)
 8019c8a:	4814      	ldr	r0, [pc, #80]	@ (8019cdc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8019c8c:	f004 fa54 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019c90:	b9e0      	cbnz	r0, 8019ccc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8019c92:	4916      	ldr	r1, [pc, #88]	@ (8019cec <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>)
 8019c94:	4811      	ldr	r0, [pc, #68]	@ (8019cdc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8019c96:	f004 fa4f 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019c9a:	b9c8      	cbnz	r0, 8019cd0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8019c9c:	4914      	ldr	r1, [pc, #80]	@ (8019cf0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>)
 8019c9e:	480f      	ldr	r0, [pc, #60]	@ (8019cdc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8019ca0:	f004 fa4a 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019ca4:	b9b0      	cbnz	r0, 8019cd4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8019ca6:	4913      	ldr	r1, [pc, #76]	@ (8019cf4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>)
 8019ca8:	480c      	ldr	r0, [pc, #48]	@ (8019cdc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8019caa:	f004 fa45 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8019cae:	2800      	cmp	r0, #0
 8019cb0:	bf14      	ite	ne
 8019cb2:	2309      	movne	r3, #9
 8019cb4:	2300      	moveq	r3, #0
 8019cb6:	7020      	strb	r0, [r4, #0]
}
 8019cb8:	4618      	mov	r0, r3
 8019cba:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019cbc:	2300      	movs	r3, #0
 8019cbe:	e7fa      	b.n	8019cb6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8019cc0:	2301      	movs	r3, #1
 8019cc2:	e7f8      	b.n	8019cb6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8019cc4:	2302      	movs	r3, #2
 8019cc6:	e7f6      	b.n	8019cb6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8019cc8:	2303      	movs	r3, #3
 8019cca:	e7f4      	b.n	8019cb6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8019ccc:	2304      	movs	r3, #4
 8019cce:	e7f2      	b.n	8019cb6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8019cd0:	2306      	movs	r3, #6
 8019cd2:	e7f0      	b.n	8019cb6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8019cd4:	2308      	movs	r3, #8
 8019cd6:	e7ee      	b.n	8019cb6 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
 8019cd8:	0801f65c 	.word	0x0801f65c
 8019cdc:	0801f644 	.word	0x0801f644
 8019ce0:	0801f654 	.word	0x0801f654
 8019ce4:	0801f63c 	.word	0x0801f63c
 8019ce8:	0801f664 	.word	0x0801f664
 8019cec:	0801f64c 	.word	0x0801f64c
 8019cf0:	0801f634 	.word	0x0801f634
 8019cf4:	0801f62c 	.word	0x0801f62c

08019cf8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8019cf8:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019cfa:	491e      	ldr	r1, [pc, #120]	@ (8019d74 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8019cfc:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019cfe:	481e      	ldr	r0, [pc, #120]	@ (8019d78 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8019d00:	f004 fa1a 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019d04:	bb40      	cbnz	r0, 8019d58 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8019d06:	491c      	ldr	r1, [pc, #112]	@ (8019d78 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8019d08:	4608      	mov	r0, r1
 8019d0a:	f004 fa15 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019d0e:	bb28      	cbnz	r0, 8019d5c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8019d10:	491a      	ldr	r1, [pc, #104]	@ (8019d7c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x84>)
 8019d12:	4819      	ldr	r0, [pc, #100]	@ (8019d78 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8019d14:	f004 fa10 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019d18:	bb10      	cbnz	r0, 8019d60 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8019d1a:	4919      	ldr	r1, [pc, #100]	@ (8019d80 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x88>)
 8019d1c:	4816      	ldr	r0, [pc, #88]	@ (8019d78 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8019d1e:	f004 fa0b 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019d22:	b9f8      	cbnz	r0, 8019d64 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8019d24:	4917      	ldr	r1, [pc, #92]	@ (8019d84 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x8c>)
 8019d26:	4814      	ldr	r0, [pc, #80]	@ (8019d78 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8019d28:	f004 fa06 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019d2c:	b9e0      	cbnz	r0, 8019d68 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8019d2e:	4916      	ldr	r1, [pc, #88]	@ (8019d88 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x90>)
 8019d30:	4811      	ldr	r0, [pc, #68]	@ (8019d78 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8019d32:	f004 fa01 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019d36:	b9c8      	cbnz	r0, 8019d6c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8019d38:	4914      	ldr	r1, [pc, #80]	@ (8019d8c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x94>)
 8019d3a:	480f      	ldr	r0, [pc, #60]	@ (8019d78 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8019d3c:	f004 f9fc 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019d40:	b9b0      	cbnz	r0, 8019d70 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8019d42:	4913      	ldr	r1, [pc, #76]	@ (8019d90 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x98>)
 8019d44:	480c      	ldr	r0, [pc, #48]	@ (8019d78 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8019d46:	f004 f9f7 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8019d4a:	2800      	cmp	r0, #0
 8019d4c:	bf14      	ite	ne
 8019d4e:	2309      	movne	r3, #9
 8019d50:	2300      	moveq	r3, #0
 8019d52:	7020      	strb	r0, [r4, #0]
}
 8019d54:	4618      	mov	r0, r3
 8019d56:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019d58:	2300      	movs	r3, #0
 8019d5a:	e7fa      	b.n	8019d52 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8019d5c:	2301      	movs	r3, #1
 8019d5e:	e7f8      	b.n	8019d52 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8019d60:	2302      	movs	r3, #2
 8019d62:	e7f6      	b.n	8019d52 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8019d64:	2303      	movs	r3, #3
 8019d66:	e7f4      	b.n	8019d52 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8019d68:	2304      	movs	r3, #4
 8019d6a:	e7f2      	b.n	8019d52 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8019d6c:	2306      	movs	r3, #6
 8019d6e:	e7f0      	b.n	8019d52 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8019d70:	2308      	movs	r3, #8
 8019d72:	e7ee      	b.n	8019d52 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
 8019d74:	0801f65c 	.word	0x0801f65c
 8019d78:	0801f654 	.word	0x0801f654
 8019d7c:	0801f644 	.word	0x0801f644
 8019d80:	0801f63c 	.word	0x0801f63c
 8019d84:	0801f664 	.word	0x0801f664
 8019d88:	0801f64c 	.word	0x0801f64c
 8019d8c:	0801f634 	.word	0x0801f634
 8019d90:	0801f62c 	.word	0x0801f62c

08019d94 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019d94:	491e      	ldr	r1, [pc, #120]	@ (8019e10 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8019d96:	b510      	push	{r4, lr}
 8019d98:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019d9a:	4608      	mov	r0, r1
 8019d9c:	f004 f9cc 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019da0:	bb40      	cbnz	r0, 8019df4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8019da2:	491c      	ldr	r1, [pc, #112]	@ (8019e14 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>)
 8019da4:	481a      	ldr	r0, [pc, #104]	@ (8019e10 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8019da6:	f004 f9c7 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019daa:	bb28      	cbnz	r0, 8019df8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8019dac:	491a      	ldr	r1, [pc, #104]	@ (8019e18 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>)
 8019dae:	4818      	ldr	r0, [pc, #96]	@ (8019e10 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8019db0:	f004 f9c2 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019db4:	bb10      	cbnz	r0, 8019dfc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8019db6:	4919      	ldr	r1, [pc, #100]	@ (8019e1c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>)
 8019db8:	4815      	ldr	r0, [pc, #84]	@ (8019e10 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8019dba:	f004 f9bd 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019dbe:	b9f8      	cbnz	r0, 8019e00 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8019dc0:	4917      	ldr	r1, [pc, #92]	@ (8019e20 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>)
 8019dc2:	4813      	ldr	r0, [pc, #76]	@ (8019e10 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8019dc4:	f004 f9b8 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019dc8:	b9e0      	cbnz	r0, 8019e04 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8019dca:	4916      	ldr	r1, [pc, #88]	@ (8019e24 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>)
 8019dcc:	4810      	ldr	r0, [pc, #64]	@ (8019e10 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8019dce:	f004 f9b3 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019dd2:	b9c8      	cbnz	r0, 8019e08 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8019dd4:	4914      	ldr	r1, [pc, #80]	@ (8019e28 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>)
 8019dd6:	480e      	ldr	r0, [pc, #56]	@ (8019e10 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8019dd8:	f004 f9ae 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 8019ddc:	b9b0      	cbnz	r0, 8019e0c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8019dde:	4913      	ldr	r1, [pc, #76]	@ (8019e2c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>)
 8019de0:	480b      	ldr	r0, [pc, #44]	@ (8019e10 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8019de2:	f004 f9a9 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8019de6:	2800      	cmp	r0, #0
 8019de8:	bf14      	ite	ne
 8019dea:	2309      	movne	r3, #9
 8019dec:	2300      	moveq	r3, #0
 8019dee:	7020      	strb	r0, [r4, #0]
}
 8019df0:	4618      	mov	r0, r3
 8019df2:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8019df4:	2300      	movs	r3, #0
 8019df6:	e7fa      	b.n	8019dee <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8019df8:	2301      	movs	r3, #1
 8019dfa:	e7f8      	b.n	8019dee <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8019dfc:	2302      	movs	r3, #2
 8019dfe:	e7f6      	b.n	8019dee <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8019e00:	2303      	movs	r3, #3
 8019e02:	e7f4      	b.n	8019dee <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8019e04:	2304      	movs	r3, #4
 8019e06:	e7f2      	b.n	8019dee <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8019e08:	2306      	movs	r3, #6
 8019e0a:	e7f0      	b.n	8019dee <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8019e0c:	2308      	movs	r3, #8
 8019e0e:	e7ee      	b.n	8019dee <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
 8019e10:	0801f65c 	.word	0x0801f65c
 8019e14:	0801f654 	.word	0x0801f654
 8019e18:	0801f644 	.word	0x0801f644
 8019e1c:	0801f63c 	.word	0x0801f63c
 8019e20:	0801f664 	.word	0x0801f664
 8019e24:	0801f64c 	.word	0x0801f64c
 8019e28:	0801f634 	.word	0x0801f634
 8019e2c:	0801f62c 	.word	0x0801f62c

08019e30 <_ZN7Sensors14TransferBufferIyEEvPT_Pht.isra.0>:
 * @param output memory_address: memory pointer to write to
 * @param input buffer: byte array to append to memory_address
 * @param input size: size in bytes of the input buffer
 */
template<typename T>
void Sensors::TransferBuffer(T* memory_address, uint8_t* buffer, uint16_t size) {
 8019e30:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Get memory_address content into temp
	uint64_t temp = 0;
	std::memcpy(&temp, memory_address, sizeof(T));
 8019e32:	6843      	ldr	r3, [r0, #4]
 8019e34:	6807      	ldr	r7, [r0, #0]

	// Shift left the memory_address content to leave the size of buffer free on LSB
	if (temp != 0)
 8019e36:	ea57 0403 	orrs.w	r4, r7, r3
 8019e3a:	d00c      	beq.n	8019e56 <_ZN7Sensors14TransferBufferIyEEvPT_Pht.isra.0+0x26>
		temp = temp << (size << 3); // * 8 <=> Shift left by 3 to accumulate reads (MSB first)
 8019e3c:	00d4      	lsls	r4, r2, #3
 8019e3e:	f1a4 0620 	sub.w	r6, r4, #32
 8019e42:	f1c4 0520 	rsb	r5, r4, #32
 8019e46:	40a3      	lsls	r3, r4
 8019e48:	fa07 f606 	lsl.w	r6, r7, r6
 8019e4c:	fa27 f505 	lsr.w	r5, r7, r5
 8019e50:	40a7      	lsls	r7, r4
 8019e52:	4333      	orrs	r3, r6
 8019e54:	432b      	orrs	r3, r5
void Sensors::TransferBuffer(T* memory_address, uint8_t* buffer, uint16_t size) {
 8019e56:	2600      	movs	r6, #0

	// Transfer data from buffer to memory_adress LSB
	for (uint8_t index = 0; index < size; index++) {
		temp |= (buffer[index] << ((size - 1 - index) << 3));
 8019e58:	f102 3cff 	add.w	ip, r2, #4294967295
	for (uint8_t index = 0; index < size; index++) {
 8019e5c:	b2f4      	uxtb	r4, r6
 8019e5e:	3601      	adds	r6, #1
 8019e60:	4294      	cmp	r4, r2
 8019e62:	db02      	blt.n	8019e6a <_ZN7Sensors14TransferBufferIyEEvPT_Pht.isra.0+0x3a>

	// Recast temp
	T* reinterpreted_temp = reinterpret_cast<T*>(&temp);

	// Update memory_address content
	*memory_address = *reinterpreted_temp;
 8019e64:	e9c0 7300 	strd	r7, r3, [r0]
}
 8019e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp |= (buffer[index] << ((size - 1 - index) << 3));
 8019e6a:	5d0d      	ldrb	r5, [r1, r4]
 8019e6c:	ebac 0404 	sub.w	r4, ip, r4
 8019e70:	00e4      	lsls	r4, r4, #3
 8019e72:	fa05 f404 	lsl.w	r4, r5, r4
 8019e76:	4327      	orrs	r7, r4
 8019e78:	ea43 73e4 	orr.w	r3, r3, r4, asr #31
	for (uint8_t index = 0; index < size; index++) {
 8019e7c:	e7ee      	b.n	8019e5c <_ZN7Sensors14TransferBufferIyEEvPT_Pht.isra.0+0x2c>

08019e7e <_ZN7Sensors14TransferBufferImEEvPT_Pht.isra.0>:
	std::memcpy(&temp, memory_address, sizeof(T));
 8019e7e:	6803      	ldr	r3, [r0, #0]
void Sensors::TransferBuffer(T* memory_address, uint8_t* buffer, uint16_t size) {
 8019e80:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (temp != 0)
 8019e82:	b10b      	cbz	r3, 8019e88 <_ZN7Sensors14TransferBufferImEEvPT_Pht.isra.0+0xa>
		temp = temp << (size << 3); // * 8 <=> Shift left by 3 to accumulate reads (MSB first)
 8019e84:	00d4      	lsls	r4, r2, #3
 8019e86:	40a3      	lsls	r3, r4
void Sensors::TransferBuffer(T* memory_address, uint8_t* buffer, uint16_t size) {
 8019e88:	2500      	movs	r5, #0
 8019e8a:	461e      	mov	r6, r3
		temp |= (buffer[index] << ((size - 1 - index) << 3));
 8019e8c:	f102 3cff 	add.w	ip, r2, #4294967295
void Sensors::TransferBuffer(T* memory_address, uint8_t* buffer, uint16_t size) {
 8019e90:	462f      	mov	r7, r5
	for (uint8_t index = 0; index < size; index++) {
 8019e92:	b2ec      	uxtb	r4, r5
 8019e94:	3501      	adds	r5, #1
 8019e96:	4294      	cmp	r4, r2
 8019e98:	db04      	blt.n	8019ea4 <_ZN7Sensors14TransferBufferImEEvPT_Pht.isra.0+0x26>
 8019e9a:	2f00      	cmp	r7, #0
 8019e9c:	bf18      	it	ne
 8019e9e:	4633      	movne	r3, r6
	*memory_address = *reinterpreted_temp;
 8019ea0:	6003      	str	r3, [r0, #0]
}
 8019ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp |= (buffer[index] << ((size - 1 - index) << 3));
 8019ea4:	5d0f      	ldrb	r7, [r1, r4]
 8019ea6:	ebac 0404 	sub.w	r4, ip, r4
 8019eaa:	00e4      	lsls	r4, r4, #3
 8019eac:	fa07 f404 	lsl.w	r4, r7, r4
 8019eb0:	2701      	movs	r7, #1
 8019eb2:	4326      	orrs	r6, r4
	for (uint8_t index = 0; index < size; index++) {
 8019eb4:	e7ed      	b.n	8019e92 <_ZN7Sensors14TransferBufferImEEvPT_Pht.isra.0+0x14>

08019eb6 <_ZN7Sensors14TransferBufferItEEvPT_Pht.isra.0>:
	uint64_t temp = 0;
 8019eb6:	2300      	movs	r3, #0
void Sensors::TransferBuffer(T* memory_address, uint8_t* buffer, uint16_t size) {
 8019eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	std::memcpy(&temp, memory_address, sizeof(T));
 8019eba:	8804      	ldrh	r4, [r0, #0]
 8019ebc:	f364 030f 	bfi	r3, r4, #0, #16
	if (temp != 0)
 8019ec0:	b10b      	cbz	r3, 8019ec6 <_ZN7Sensors14TransferBufferItEEvPT_Pht.isra.0+0x10>
		temp = temp << (size << 3); // * 8 <=> Shift left by 3 to accumulate reads (MSB first)
 8019ec2:	00d4      	lsls	r4, r2, #3
 8019ec4:	40a3      	lsls	r3, r4
void Sensors::TransferBuffer(T* memory_address, uint8_t* buffer, uint16_t size) {
 8019ec6:	2500      	movs	r5, #0
 8019ec8:	461e      	mov	r6, r3
		temp |= (buffer[index] << ((size - 1 - index) << 3));
 8019eca:	f102 3cff 	add.w	ip, r2, #4294967295
void Sensors::TransferBuffer(T* memory_address, uint8_t* buffer, uint16_t size) {
 8019ece:	462f      	mov	r7, r5
	for (uint8_t index = 0; index < size; index++) {
 8019ed0:	b2ec      	uxtb	r4, r5
 8019ed2:	3501      	adds	r5, #1
 8019ed4:	4294      	cmp	r4, r2
 8019ed6:	db04      	blt.n	8019ee2 <_ZN7Sensors14TransferBufferItEEvPT_Pht.isra.0+0x2c>
 8019ed8:	2f00      	cmp	r7, #0
 8019eda:	bf18      	it	ne
 8019edc:	4633      	movne	r3, r6
	*memory_address = *reinterpreted_temp;
 8019ede:	8003      	strh	r3, [r0, #0]
}
 8019ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp |= (buffer[index] << ((size - 1 - index) << 3));
 8019ee2:	5d0f      	ldrb	r7, [r1, r4]
 8019ee4:	ebac 0404 	sub.w	r4, ip, r4
 8019ee8:	00e4      	lsls	r4, r4, #3
 8019eea:	fa07 f404 	lsl.w	r4, r7, r4
 8019eee:	2701      	movs	r7, #1
 8019ef0:	4326      	orrs	r6, r4
	for (uint8_t index = 0; index < size; index++) {
 8019ef2:	e7ed      	b.n	8019ed0 <_ZN7Sensors14TransferBufferItEEvPT_Pht.isra.0+0x1a>

08019ef4 <_ZN7Sensors14TransferBufferIhEEvPT_Pht.isra.0>:
	uint64_t temp = 0;
 8019ef4:	2300      	movs	r3, #0
void Sensors::TransferBuffer(T* memory_address, uint8_t* buffer, uint16_t size) {
 8019ef6:	b5f0      	push	{r4, r5, r6, r7, lr}
	std::memcpy(&temp, memory_address, sizeof(T));
 8019ef8:	7804      	ldrb	r4, [r0, #0]
 8019efa:	f364 0307 	bfi	r3, r4, #0, #8
	if (temp != 0)
 8019efe:	b10b      	cbz	r3, 8019f04 <_ZN7Sensors14TransferBufferIhEEvPT_Pht.isra.0+0x10>
		temp = temp << (size << 3); // * 8 <=> Shift left by 3 to accumulate reads (MSB first)
 8019f00:	00d4      	lsls	r4, r2, #3
 8019f02:	40a3      	lsls	r3, r4
void Sensors::TransferBuffer(T* memory_address, uint8_t* buffer, uint16_t size) {
 8019f04:	2500      	movs	r5, #0
 8019f06:	461e      	mov	r6, r3
		temp |= (buffer[index] << ((size - 1 - index) << 3));
 8019f08:	f102 3cff 	add.w	ip, r2, #4294967295
void Sensors::TransferBuffer(T* memory_address, uint8_t* buffer, uint16_t size) {
 8019f0c:	462f      	mov	r7, r5
	for (uint8_t index = 0; index < size; index++) {
 8019f0e:	b2ec      	uxtb	r4, r5
 8019f10:	3501      	adds	r5, #1
 8019f12:	4294      	cmp	r4, r2
 8019f14:	db04      	blt.n	8019f20 <_ZN7Sensors14TransferBufferIhEEvPT_Pht.isra.0+0x2c>
 8019f16:	2f00      	cmp	r7, #0
 8019f18:	bf18      	it	ne
 8019f1a:	4633      	movne	r3, r6
	*memory_address = *reinterpreted_temp;
 8019f1c:	7003      	strb	r3, [r0, #0]
}
 8019f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp |= (buffer[index] << ((size - 1 - index) << 3));
 8019f20:	5d0f      	ldrb	r7, [r1, r4]
 8019f22:	ebac 0404 	sub.w	r4, ip, r4
 8019f26:	00e4      	lsls	r4, r4, #3
 8019f28:	fa07 f404 	lsl.w	r4, r7, r4
 8019f2c:	2701      	movs	r7, #1
 8019f2e:	4326      	orrs	r6, r4
	for (uint8_t index = 0; index < size; index++) {
 8019f30:	e7ed      	b.n	8019f0e <_ZN7Sensors14TransferBufferIhEEvPT_Pht.isra.0+0x1a>

08019f32 <_ZNSt6vectorIP6SensorSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE.isra.0>:
      erase(const_iterator __position)
 8019f32:	b510      	push	{r4, lr}
 8019f34:	4604      	mov	r4, r0
 8019f36:	4608      	mov	r0, r1
      { return __normal_iterator(_M_current + __n); }
 8019f38:	3104      	adds	r1, #4
      : _M_current(__i) { }
 8019f3a:	6862      	ldr	r2, [r4, #4]
      if (__position + 1 != end())
 8019f3c:	4291      	cmp	r1, r2
 8019f3e:	d002      	beq.n	8019f46 <_ZNSt6vectorIP6SensorSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE.isra.0+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8019f40:	1a52      	subs	r2, r2, r1
 8019f42:	f004 ffdf 	bl	801ef04 <memmove>
      --this->_M_impl._M_finish;
 8019f46:	6863      	ldr	r3, [r4, #4]
 8019f48:	3b04      	subs	r3, #4
 8019f4a:	6063      	str	r3, [r4, #4]
      { return _M_erase(begin() + (__position - cbegin())); }
 8019f4c:	bd10      	pop	{r4, pc}

08019f4e <_ZN7SensorsC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8019f4e:	2300      	movs	r3, #0
Sensors::Sensors() {
 8019f50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f54:	4604      	mov	r4, r0
 8019f56:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
 8019f5a:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
 8019f5e:	f100 0a80 	add.w	sl, r0, #128	@ 0x80
 8019f62:	f8c0 30a0 	str.w	r3, [r0, #160]	@ 0xa0
 8019f66:	f100 098c 	add.w	r9, r0, #140	@ 0x8c
 8019f6a:	f8c0 30ac 	str.w	r3, [r0, #172]	@ 0xac
 8019f6e:	f100 0898 	add.w	r8, r0, #152	@ 0x98
 8019f72:	f100 07a4 	add.w	r7, r0, #164	@ 0xa4
 8019f76:	f100 06b0 	add.w	r6, r0, #176	@ 0xb0
 8019f7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019f7e:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8019f82:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8019f86:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8019f8a:	e9c0 330c 	strd	r3, r3, [r0, #48]	@ 0x30
 8019f8e:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
 8019f92:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
 8019f96:	e9c0 3312 	strd	r3, r3, [r0, #72]	@ 0x48
 8019f9a:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
 8019f9e:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8019fa2:	e9c0 3323 	strd	r3, r3, [r0, #140]	@ 0x8c
 8019fa6:	e9c0 3326 	strd	r3, r3, [r0, #152]	@ 0x98
 8019faa:	e9c0 3329 	strd	r3, r3, [r0, #164]	@ 0xa4
 8019fae:	e9c0 332c 	strd	r3, r3, [r0, #176]	@ 0xb0
 8019fb2:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
 8019fb6:	2014      	movs	r0, #20
 8019fb8:	f004 f827 	bl	801e00a <_Znwj>
 8019fbc:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 8019fbe:	e9d4 b207 	ldrd	fp, r2, [r4, #28]
 8019fc2:	eba2 020b 	sub.w	r2, r2, fp
      if (__count > 0)
 8019fc6:	2a00      	cmp	r2, #0
 8019fc8:	dd09      	ble.n	8019fde <_ZN7SensorsC1Ev+0x90>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8019fca:	4659      	mov	r1, fp
 8019fcc:	f004 ff9a 	bl	801ef04 <memmove>
			- this->_M_impl._M_start);
 8019fd0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8019fd2:	4658      	mov	r0, fp
 8019fd4:	eba1 010b 	sub.w	r1, r1, fp
 8019fd8:	f003 fff2 	bl	801dfc0 <_ZdlPvj>
 8019fdc:	e002      	b.n	8019fe4 <_ZN7SensorsC1Ev+0x96>
	if (__p)
 8019fde:	f1bb 0f00 	cmp.w	fp, #0
 8019fe2:	d1f5      	bne.n	8019fd0 <_ZN7SensorsC1Ev+0x82>
			 - this->_M_impl._M_start); }
 8019fe4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8019fe6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019fe8:	1a9b      	subs	r3, r3, r2
	  this->_M_impl._M_finish = __tmp + __old_size;
 8019fea:	e9c4 5507 	strd	r5, r5, [r4, #28]
      if (this->capacity() < __n)
 8019fee:	2b26      	cmp	r3, #38	@ 0x26
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8019ff0:	f105 0514 	add.w	r5, r5, #20
 8019ff4:	6265      	str	r5, [r4, #36]	@ 0x24
      if (this->capacity() < __n)
 8019ff6:	d81e      	bhi.n	801a036 <_ZN7SensorsC1Ev+0xe8>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019ff8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8019ffa:	2028      	movs	r0, #40	@ 0x28
 8019ffc:	eba3 0b02 	sub.w	fp, r3, r2
 801a000:	f004 f803 	bl	801e00a <_Znwj>
 801a004:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 801a006:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	@ 0x28
 801a00a:	1ad2      	subs	r2, r2, r3
      if (__count > 0)
 801a00c:	2a00      	cmp	r2, #0
 801a00e:	dd0a      	ble.n	801a026 <_ZN7SensorsC1Ev+0xd8>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801a010:	4619      	mov	r1, r3
 801a012:	9301      	str	r3, [sp, #4]
 801a014:	f004 ff76 	bl	801ef04 <memmove>
      _M_deallocate(pointer __p, size_t __n)
 801a018:	9b01      	ldr	r3, [sp, #4]
			- this->_M_impl._M_start);
 801a01a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801a01c:	4618      	mov	r0, r3
 801a01e:	1ac9      	subs	r1, r1, r3
 801a020:	f003 ffce 	bl	801dfc0 <_ZdlPvj>
      }
 801a024:	e001      	b.n	801a02a <_ZN7SensorsC1Ev+0xdc>
	if (__p)
 801a026:	2b00      	cmp	r3, #0
 801a028:	d1f7      	bne.n	801a01a <_ZN7SensorsC1Ev+0xcc>
	  this->_M_impl._M_finish = __tmp + __old_size;
 801a02a:	eb05 030b 	add.w	r3, r5, fp
	  this->_M_impl._M_start = __tmp;
 801a02e:	62a5      	str	r5, [r4, #40]	@ 0x28
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801a030:	3528      	adds	r5, #40	@ 0x28
	  this->_M_impl._M_finish = __tmp + __old_size;
 801a032:	62e3      	str	r3, [r4, #44]	@ 0x2c
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801a034:	6325      	str	r5, [r4, #48]	@ 0x30
			 - this->_M_impl._M_start); }
 801a036:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801a038:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801a03a:	1a9b      	subs	r3, r3, r2
      if (this->capacity() < __n)
 801a03c:	2b4c      	cmp	r3, #76	@ 0x4c
 801a03e:	d81e      	bhi.n	801a07e <_ZN7SensorsC1Ev+0x130>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a040:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801a042:	2050      	movs	r0, #80	@ 0x50
 801a044:	eba3 0b02 	sub.w	fp, r3, r2
 801a048:	f003 ffdf 	bl	801e00a <_Znwj>
 801a04c:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 801a04e:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 801a052:	1ad2      	subs	r2, r2, r3
      if (__count > 0)
 801a054:	2a00      	cmp	r2, #0
 801a056:	dd0a      	ble.n	801a06e <_ZN7SensorsC1Ev+0x120>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801a058:	4619      	mov	r1, r3
 801a05a:	9301      	str	r3, [sp, #4]
 801a05c:	f004 ff52 	bl	801ef04 <memmove>
      _M_deallocate(pointer __p, size_t __n)
 801a060:	9b01      	ldr	r3, [sp, #4]
			- this->_M_impl._M_start);
 801a062:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801a064:	4618      	mov	r0, r3
 801a066:	1ac9      	subs	r1, r1, r3
 801a068:	f003 ffaa 	bl	801dfc0 <_ZdlPvj>
      }
 801a06c:	e001      	b.n	801a072 <_ZN7SensorsC1Ev+0x124>
	if (__p)
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d1f7      	bne.n	801a062 <_ZN7SensorsC1Ev+0x114>
	  this->_M_impl._M_finish = __tmp + __old_size;
 801a072:	eb05 030b 	add.w	r3, r5, fp
	  this->_M_impl._M_start = __tmp;
 801a076:	6365      	str	r5, [r4, #52]	@ 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801a078:	3550      	adds	r5, #80	@ 0x50
	  this->_M_impl._M_finish = __tmp + __old_size;
 801a07a:	63a3      	str	r3, [r4, #56]	@ 0x38
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801a07c:	63e5      	str	r5, [r4, #60]	@ 0x3c
			 - this->_M_impl._M_start); }
 801a07e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801a080:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 801a082:	1a9b      	subs	r3, r3, r2
      if (this->capacity() < __n)
 801a084:	2b98      	cmp	r3, #152	@ 0x98
 801a086:	d81e      	bhi.n	801a0c6 <_ZN7SensorsC1Ev+0x178>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a088:	6c63      	ldr	r3, [r4, #68]	@ 0x44
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801a08a:	20a0      	movs	r0, #160	@ 0xa0
 801a08c:	eba3 0b02 	sub.w	fp, r3, r2
 801a090:	f003 ffbb 	bl	801e00a <_Znwj>
 801a094:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 801a096:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 801a09a:	1ad2      	subs	r2, r2, r3
      if (__count > 0)
 801a09c:	2a00      	cmp	r2, #0
 801a09e:	dd0a      	ble.n	801a0b6 <_ZN7SensorsC1Ev+0x168>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801a0a0:	4619      	mov	r1, r3
 801a0a2:	9301      	str	r3, [sp, #4]
 801a0a4:	f004 ff2e 	bl	801ef04 <memmove>
      _M_deallocate(pointer __p, size_t __n)
 801a0a8:	9b01      	ldr	r3, [sp, #4]
			- this->_M_impl._M_start);
 801a0aa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801a0ac:	4618      	mov	r0, r3
 801a0ae:	1ac9      	subs	r1, r1, r3
 801a0b0:	f003 ff86 	bl	801dfc0 <_ZdlPvj>
      }
 801a0b4:	e001      	b.n	801a0ba <_ZN7SensorsC1Ev+0x16c>
	if (__p)
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d1f7      	bne.n	801a0aa <_ZN7SensorsC1Ev+0x15c>
	  this->_M_impl._M_finish = __tmp + __old_size;
 801a0ba:	eb05 030b 	add.w	r3, r5, fp
	  this->_M_impl._M_start = __tmp;
 801a0be:	6425      	str	r5, [r4, #64]	@ 0x40
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801a0c0:	35a0      	adds	r5, #160	@ 0xa0
	  this->_M_impl._M_finish = __tmp + __old_size;
 801a0c2:	6463      	str	r3, [r4, #68]	@ 0x44
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801a0c4:	64a5      	str	r5, [r4, #72]	@ 0x48
			 - this->_M_impl._M_start); }
 801a0c6:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 801a0c8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801a0ca:	1a9b      	subs	r3, r3, r2
      if (this->capacity() < __n)
 801a0cc:	2b4c      	cmp	r3, #76	@ 0x4c
 801a0ce:	d81e      	bhi.n	801a10e <_ZN7SensorsC1Ev+0x1c0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a0d0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801a0d2:	2050      	movs	r0, #80	@ 0x50
 801a0d4:	eba3 0b02 	sub.w	fp, r3, r2
 801a0d8:	f003 ff97 	bl	801e00a <_Znwj>
 801a0dc:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 801a0de:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 801a0e2:	1ad2      	subs	r2, r2, r3
      if (__count > 0)
 801a0e4:	2a00      	cmp	r2, #0
 801a0e6:	dd0a      	ble.n	801a0fe <_ZN7SensorsC1Ev+0x1b0>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801a0e8:	4619      	mov	r1, r3
 801a0ea:	9301      	str	r3, [sp, #4]
 801a0ec:	f004 ff0a 	bl	801ef04 <memmove>
      _M_deallocate(pointer __p, size_t __n)
 801a0f0:	9b01      	ldr	r3, [sp, #4]
			- this->_M_impl._M_start);
 801a0f2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801a0f4:	4618      	mov	r0, r3
 801a0f6:	1ac9      	subs	r1, r1, r3
 801a0f8:	f003 ff62 	bl	801dfc0 <_ZdlPvj>
      }
 801a0fc:	e001      	b.n	801a102 <_ZN7SensorsC1Ev+0x1b4>
	if (__p)
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d1f7      	bne.n	801a0f2 <_ZN7SensorsC1Ev+0x1a4>
	  this->_M_impl._M_finish = __tmp + __old_size;
 801a102:	eb05 030b 	add.w	r3, r5, fp
	  this->_M_impl._M_start = __tmp;
 801a106:	64e5      	str	r5, [r4, #76]	@ 0x4c
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801a108:	3550      	adds	r5, #80	@ 0x50
	  this->_M_impl._M_finish = __tmp + __old_size;
 801a10a:	6523      	str	r3, [r4, #80]	@ 0x50
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801a10c:	6565      	str	r5, [r4, #84]	@ 0x54
	functions[INT8_TYPE] = NULL;
 801a10e:	2300      	movs	r3, #0
}
 801a110:	4620      	mov	r0, r4
	functions[FLOAT_TYPE] = &float_sensor_functions;
 801a112:	67a6      	str	r6, [r4, #120]	@ 0x78
	functions[DOUBLE_TYPE] = NULL;
 801a114:	67e3      	str	r3, [r4, #124]	@ 0x7c
	functions[INT16_TYPE] = NULL;
 801a116:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
	functions[INT64_TYPE] = NULL;
 801a11a:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
	functions[UINT16_TYPE] = &uint16_t_sensor_functions;
 801a11e:	e9c4 a916 	strd	sl, r9, [r4, #88]	@ 0x58
	functions[UINT64_TYPE] = &uint64_t_sensor_functions;
 801a122:	e9c4 8718 	strd	r8, r7, [r4, #96]	@ 0x60
}
 801a126:	b003      	add	sp, #12
 801a128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a12c <_ZN7Sensors4InitEP9RegistersP10PublishersP13HardwareDelayP4LEDS>:
void Sensors::Init(Registers* registers_, Publishers* publishers_, HardwareDelay* hardware_delay_, LEDS* leds_) {
 801a12c:	b510      	push	{r4, lr}
	publishers = publishers_;
 801a12e:	e9c0 122f 	strd	r1, r2, [r0, #188]	@ 0xbc
	hardware_delay = hardware_delay_;
 801a132:	f8c0 30c4 	str.w	r3, [r0, #196]	@ 0xc4
	SensorsSemaphore = osSemaphoreNew(1, 1, NULL);
 801a136:	2101      	movs	r1, #1
	leds = leds_;
 801a138:	9b02      	ldr	r3, [sp, #8]
void Sensors::Init(Registers* registers_, Publishers* publishers_, HardwareDelay* hardware_delay_, LEDS* leds_) {
 801a13a:	4604      	mov	r4, r0
	SensorsSemaphore = osSemaphoreNew(1, 1, NULL);
 801a13c:	2200      	movs	r2, #0
	leds = leds_;
 801a13e:	f8c0 30c8 	str.w	r3, [r0, #200]	@ 0xc8
	SensorsSemaphore = osSemaphoreNew(1, 1, NULL);
 801a142:	4608      	mov	r0, r1
 801a144:	f7f2 fe34 	bl	800cdb0 <osSemaphoreNew>
 801a148:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(SensorsSemaphore);
 801a14a:	f7f2 fec1 	bl	800ced0 <osSemaphoreRelease>
	active = false;
 801a14e:	2300      	movs	r3, #0
 801a150:	7123      	strb	r3, [r4, #4]
	delayed_index = 0;
 801a152:	7363      	strb	r3, [r4, #13]
	period_ms = DEFAULT_SENSORS_PERIOD;
 801a154:	230a      	movs	r3, #10
 801a156:	60a3      	str	r3, [r4, #8]
}
 801a158:	bd10      	pop	{r4, pc}

0801a15a <_ZN7Sensors16SetReadingStatusEb>:
 * @brief Set the reading status of the class
 *
 * @param input status: reading status. true = read sensors
 * @return whether successful
 */
bool Sensors::SetReadingStatus(bool status) {
 801a15a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a15c:	4604      	mov	r4, r0
 801a15e:	460d      	mov	r5, r1
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a160:	6800      	ldr	r0, [r0, #0]
 801a162:	f04f 31ff 	mov.w	r1, #4294967295
 801a166:	f7f2 fe7f 	bl	800ce68 <osSemaphoreAcquire>
	active = status;
 801a16a:	7125      	strb	r5, [r4, #4]

	// Reset all read indexes if reading is stopped to restart a new reading from zero
	if (!status) {
 801a16c:	b91d      	cbnz	r5, 801a176 <_ZN7Sensors16SetReadingStatusEb+0x1c>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801a16e:	e9d4 3004 	ldrd	r3, r0, [r4, #16]
		for (I2CInterface &interface : interfaces) {
 801a172:	4298      	cmp	r0, r3
 801a174:	d104      	bne.n	801a180 <_ZN7Sensors16SetReadingStatusEb+0x26>
				}
			}
		}
	}

	osSemaphoreRelease(SensorsSemaphore);
 801a176:	6820      	ldr	r0, [r4, #0]
 801a178:	f7f2 feaa 	bl	800ced0 <osSemaphoreRelease>
	return true;
}
 801a17c:	2001      	movs	r0, #1
 801a17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			interface.read_index = 0;
 801a180:	e9d3 2616 	ldrd	r2, r6, [r3, #88]	@ 0x58
 801a184:	f883 5055 	strb.w	r5, [r3, #85]	@ 0x55
			for (SensorGroup &sensor_group : interface.sensor_groups) {
 801a188:	4296      	cmp	r6, r2
 801a18a:	d101      	bne.n	801a190 <_ZN7Sensors16SetReadingStatusEb+0x36>
      operator++() _GLIBCXX_NOEXCEPT
 801a18c:	337c      	adds	r3, #124	@ 0x7c
	return *this;
 801a18e:	e7f0      	b.n	801a172 <_ZN7Sensors16SetReadingStatusEb+0x18>
				sensor_group.read_index = 0;
 801a190:	e9d2 1703 	ldrd	r1, r7, [r2, #12]
 801a194:	7215      	strb	r5, [r2, #8]
				for (Sensor &sensor : sensor_group.sensors) {
 801a196:	428f      	cmp	r7, r1
 801a198:	d101      	bne.n	801a19e <_ZN7Sensors16SetReadingStatusEb+0x44>
      operator++() _GLIBCXX_NOEXCEPT
 801a19a:	3218      	adds	r2, #24
	return *this;
 801a19c:	e7f4      	b.n	801a188 <_ZN7Sensors16SetReadingStatusEb+0x2e>
					sensor.read_index = 0;
 801a19e:	740d      	strb	r5, [r1, #16]
      operator++() _GLIBCXX_NOEXCEPT
 801a1a0:	3128      	adds	r1, #40	@ 0x28
	return *this;
 801a1a2:	e7f8      	b.n	801a196 <_ZN7Sensors16SetReadingStatusEb+0x3c>

0801a1a4 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			return self->SetReadingStatus((bool) *input);
 801a1a4:	7811      	ldrb	r1, [r2, #0]
 801a1a6:	3900      	subs	r1, #0
 801a1a8:	bf18      	it	ne
 801a1aa:	2101      	movne	r1, #1
 801a1ac:	f7ff bfd5 	b.w	801a15a <_ZN7Sensors16SetReadingStatusEb>

0801a1b0 <_ZN7Sensors25DeactivateAllSensorGroupsEv>:
/**
 * @brief Deactivate all sensor groups on all interfaces
 *
 * @return whether successful
 */
bool Sensors::DeactivateAllSensorGroups(void) {
 801a1b0:	b538      	push	{r3, r4, r5, lr}
 801a1b2:	4604      	mov	r4, r0
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a1b4:	f04f 31ff 	mov.w	r1, #4294967295
 801a1b8:	6800      	ldr	r0, [r0, #0]
 801a1ba:	f7f2 fe55 	bl	800ce68 <osSemaphoreAcquire>
	for (I2CInterface &interface : interfaces) {
		for (SensorGroup &sensor_group : interface.sensor_groups) {
			sensor_group.active = false;
 801a1be:	2000      	movs	r0, #0
 801a1c0:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
	for (I2CInterface &interface : interfaces) {
 801a1c4:	4299      	cmp	r1, r3
 801a1c6:	d104      	bne.n	801a1d2 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x22>
		}
	}
	osSemaphoreRelease(SensorsSemaphore);
 801a1c8:	6820      	ldr	r0, [r4, #0]
 801a1ca:	f7f2 fe81 	bl	800ced0 <osSemaphoreRelease>
	return true;
}
 801a1ce:	2001      	movs	r0, #1
 801a1d0:	bd38      	pop	{r3, r4, r5, pc}
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801a1d2:	e9d3 2516 	ldrd	r2, r5, [r3, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 801a1d6:	4295      	cmp	r5, r2
 801a1d8:	d101      	bne.n	801a1de <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x2e>
      operator++() _GLIBCXX_NOEXCEPT
 801a1da:	337c      	adds	r3, #124	@ 0x7c
	return *this;
 801a1dc:	e7f2      	b.n	801a1c4 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x14>
			sensor_group.active = false;
 801a1de:	f802 0b18 	strb.w	r0, [r2], #24
 801a1e2:	e7f8      	b.n	801a1d6 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x26>

0801a1e4 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			return self->DeactivateAllSensorGroups();
 801a1e4:	f7ff bfe4 	b.w	801a1b0 <_ZN7Sensors25DeactivateAllSensorGroupsEv>

0801a1e8 <_ZN7Sensors13DetectSensorsEmm>:
 * @brief Force a detection of I2C sensors to update presence flag. Can be useful if a sensor if plugged after creation
 *
 * @param input trials: number of trials used to detect the sensor
 * @param input timeout: maximum time in ms left to detect a sensor
 */
void Sensors::DetectSensors(uint32_t trials, uint32_t timeout) {
 801a1e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1ec:	4605      	mov	r5, r0
 801a1ee:	9101      	str	r1, [sp, #4]
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a1f0:	6800      	ldr	r0, [r0, #0]
 801a1f2:	f04f 31ff 	mov.w	r1, #4294967295
void Sensors::DetectSensors(uint32_t trials, uint32_t timeout) {
 801a1f6:	4690      	mov	r8, r2
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a1f8:	f7f2 fe36 	bl	800ce68 <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801a1fc:	e9d5 4904 	ldrd	r4, r9, [r5, #16]
	HAL_StatusTypeDef status;
	for (I2CInterface &interface : interfaces) {
 801a200:	45a1      	cmp	r9, r4
 801a202:	d105      	bne.n	801a210 <_ZN7Sensors13DetectSensorsEmm+0x28>
					// If not I2C, force presence
					sensor.present = true;
			}
		}
	}
	osSemaphoreRelease(SensorsSemaphore);
 801a204:	6828      	ldr	r0, [r5, #0]
}
 801a206:	b003      	add	sp, #12
 801a208:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	osSemaphoreRelease(SensorsSemaphore);
 801a20c:	f7f2 be60 	b.w	800ced0 <osSemaphoreRelease>
 801a210:	e9d4 6a16 	ldrd	r6, sl, [r4, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 801a214:	45b2      	cmp	sl, r6
 801a216:	d101      	bne.n	801a21c <_ZN7Sensors13DetectSensorsEmm+0x34>
      operator++() _GLIBCXX_NOEXCEPT
 801a218:	347c      	adds	r4, #124	@ 0x7c
	return *this;
 801a21a:	e7f1      	b.n	801a200 <_ZN7Sensors13DetectSensorsEmm+0x18>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801a21c:	e9d6 7b03 	ldrd	r7, fp, [r6, #12]
			for (Sensor &sensor : sensor_group.sensors) {
 801a220:	45bb      	cmp	fp, r7
 801a222:	d101      	bne.n	801a228 <_ZN7Sensors13DetectSensorsEmm+0x40>
      operator++() _GLIBCXX_NOEXCEPT
 801a224:	3618      	adds	r6, #24
	return *this;
 801a226:	e7f5      	b.n	801a214 <_ZN7Sensors13DetectSensorsEmm+0x2c>
				if (interface.ID != INTERNAL) {
 801a228:	7823      	ldrb	r3, [r4, #0]
 801a22a:	2b0a      	cmp	r3, #10
 801a22c:	d00b      	beq.n	801a246 <_ZN7Sensors13DetectSensorsEmm+0x5e>
					status = HAL_I2C_IsDeviceReady(interface.interface, sensor.address, trials, timeout);
 801a22e:	4643      	mov	r3, r8
 801a230:	9a01      	ldr	r2, [sp, #4]
 801a232:	88f9      	ldrh	r1, [r7, #6]
 801a234:	68e0      	ldr	r0, [r4, #12]
 801a236:	f7ed fa67 	bl	8007708 <HAL_I2C_IsDeviceReady>
					sensor.present = (status == HAL_OK);
 801a23a:	fab0 f080 	clz	r0, r0
 801a23e:	0940      	lsrs	r0, r0, #5
 801a240:	70b8      	strb	r0, [r7, #2]
      operator++() _GLIBCXX_NOEXCEPT
 801a242:	3728      	adds	r7, #40	@ 0x28
	return *this;
 801a244:	e7ec      	b.n	801a220 <_ZN7Sensors13DetectSensorsEmm+0x38>
 801a246:	2001      	movs	r0, #1
 801a248:	e7fa      	b.n	801a240 <_ZN7Sensors13DetectSensorsEmm+0x58>

0801a24a <_ZZN7Sensors12AddRegistersEvENUlPvtPmtE8_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801a24a:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint32_t* input, uint16_t length) -> bool {
 801a24c:	b508      	push	{r3, lr}
			if (length != 2) return false;
 801a24e:	d105      	bne.n	801a25c <_ZZN7Sensors12AddRegistersEvENUlPvtPmtE8_4_FUNES0_tS1_t+0x12>
			self->DetectSensors(input[0], input[1]);
 801a250:	e9d2 1200 	ldrd	r1, r2, [r2]
 801a254:	f7ff ffc8 	bl	801a1e8 <_ZN7Sensors13DetectSensorsEmm>
 801a258:	2001      	movs	r0, #1
		}
 801a25a:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 801a25c:	2000      	movs	r0, #0
 801a25e:	e7fc      	b.n	801a25a <_ZZN7Sensors12AddRegistersEvENUlPvtPmtE8_4_FUNES0_tS1_t+0x10>

0801a260 <_ZN10SensorDataC1ERKS_>:
struct SensorData {
 801a260:	b570      	push	{r4, r5, r6, lr}
 801a262:	788b      	ldrb	r3, [r1, #2]
 801a264:	4604      	mov	r4, r0
 801a266:	880a      	ldrh	r2, [r1, #0]
 801a268:	460d      	mov	r5, r1
 801a26a:	7083      	strb	r3, [r0, #2]
 801a26c:	8002      	strh	r2, [r0, #0]
 801a26e:	7a0b      	ldrb	r3, [r1, #8]
 801a270:	684a      	ldr	r2, [r1, #4]
 801a272:	7203      	strb	r3, [r0, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801a274:	2300      	movs	r3, #0
 801a276:	6042      	str	r2, [r0, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a278:	e9d1 2603 	ldrd	r2, r6, [r1, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801a27c:	e9c0 3303 	strd	r3, r3, [r0, #12]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801a280:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 801a282:	6143      	str	r3, [r0, #20]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801a284:	d01b      	beq.n	801a2be <_ZN10SensorDataC1ERKS_+0x5e>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801a286:	4b0f      	ldr	r3, [pc, #60]	@ (801a2c4 <_ZN10SensorDataC1ERKS_+0x64>)
 801a288:	429e      	cmp	r6, r3
 801a28a:	d901      	bls.n	801a290 <_ZN10SensorDataC1ERKS_+0x30>
	      std::__throw_bad_array_new_length();
 801a28c:	f003 ff6f 	bl	801e16e <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801a290:	4630      	mov	r0, r6
 801a292:	f003 feba 	bl	801e00a <_Znwj>
 801a296:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801a298:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801a29a:	e9c4 3303 	strd	r3, r3, [r4, #12]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801a29e:	6166      	str	r6, [r4, #20]
      : _M_current(__i) { }
 801a2a0:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
	  if (_Num)
 801a2a4:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 801a2a6:	eba2 0501 	sub.w	r5, r2, r1
	  if (_Num)
 801a2aa:	d004      	beq.n	801a2b6 <_ZN10SensorDataC1ERKS_+0x56>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801a2ac:	4618      	mov	r0, r3
 801a2ae:	462a      	mov	r2, r5
 801a2b0:	f004 fe28 	bl	801ef04 <memmove>
 801a2b4:	4603      	mov	r3, r0
	  return __result + _Num;
 801a2b6:	442b      	add	r3, r5
 801a2b8:	4620      	mov	r0, r4
	this->_M_impl._M_finish =
 801a2ba:	6123      	str	r3, [r4, #16]
 801a2bc:	bd70      	pop	{r4, r5, r6, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801a2be:	4633      	mov	r3, r6
 801a2c0:	e7ea      	b.n	801a298 <_ZN10SensorDataC1ERKS_+0x38>
 801a2c2:	bf00      	nop
 801a2c4:	7fffffd0 	.word	0x7fffffd0

0801a2c8 <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup>:
 *
 * @param input interface: the interface pointer
 * @param input sensor_group: sensor group to check
 * @return true if no sensor left to read in the regular loop in the sensor group
 */
bool Sensors::RegularGroupTermination(I2CInterface* interface, SensorGroup* sensor_group) {
 801a2c8:	b530      	push	{r4, r5, lr}
	// Check sensor group read index
	if (sensor_group->read_index > 0) return false;
 801a2ca:	7a10      	ldrb	r0, [r2, #8]
 801a2cc:	b9d8      	cbnz	r0, 801a306 <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup+0x3e>
	if (sensor_group->sensors.size() == 0) return true;
 801a2ce:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 801a2d2:	4293      	cmp	r3, r2
 801a2d4:	d015      	beq.n	801a302 <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup+0x3a>

	// Check read index of the first sensor
	Sensor* sensor = &(sensor_group->sensors[0]);
	if (sensor->read_index > 0) return false;
 801a2d6:	7c1a      	ldrb	r2, [r3, #16]
 801a2d8:	b962      	cbnz	r2, 801a2f4 <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup+0x2c>
	if (sensor->data.size() == 0) return true;
 801a2da:	e9d3 0205 	ldrd	r0, r2, [r3, #20]
 801a2de:	4282      	cmp	r2, r0
 801a2e0:	d00f      	beq.n	801a302 <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup+0x3a>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801a2e2:	e9d1 2419 	ldrd	r2, r4, [r1, #100]	@ 0x64

	// Check the sensor is not pending.
	// If it is actually the case, it means that the regular list has been processed. Then, do not check the related data.
	for (Sensor* pending_sensor : interface->pending_sensors) {
 801a2e6:	4294      	cmp	r4, r2
 801a2e8:	4611      	mov	r1, r2
 801a2ea:	d104      	bne.n	801a2f6 <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup+0x2e>
		if (pending_sensor->ID == sensor->ID) return true;
	}

	// Check read index of first data
	SensorData* sensor_data = &(sensor->data[0]);
	if (sensor_data->read_index > 0) return false;
 801a2ec:	7a00      	ldrb	r0, [r0, #8]
 801a2ee:	fab0 f080 	clz	r0, r0
 801a2f2:	0940      	lsrs	r0, r0, #5

	return true;
}
 801a2f4:	bd30      	pop	{r4, r5, pc}
		if (pending_sensor->ID == sensor->ID) return true;
 801a2f6:	6809      	ldr	r1, [r1, #0]
 801a2f8:	3204      	adds	r2, #4
 801a2fa:	790d      	ldrb	r5, [r1, #4]
 801a2fc:	7919      	ldrb	r1, [r3, #4]
 801a2fe:	428d      	cmp	r5, r1
 801a300:	d1f1      	bne.n	801a2e6 <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup+0x1e>
	if (sensor_group->sensors.size() == 0) return true;
 801a302:	2001      	movs	r0, #1
 801a304:	e7f6      	b.n	801a2f4 <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup+0x2c>
	if (sensor_group->read_index > 0) return false;
 801a306:	2000      	movs	r0, #0
 801a308:	e7f4      	b.n	801a2f4 <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup+0x2c>

0801a30a <_ZN7Sensors23PendingGroupTerminationEP12I2CInterfaceP11SensorGroup>:
 801a30a:	e9d1 1019 	ldrd	r1, r0, [r1, #100]	@ 0x64
 *
 * @param input interface: the interface pointer
 * @param input sensor_group: sensor group to check
 * @return true if no sensor left to read in the pending list in the sensor group
 */
bool Sensors::PendingGroupTermination(I2CInterface* interface, SensorGroup* sensor_group) {
 801a30e:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Check that no sensor with the same ID is found in the pending list
	for (Sensor* pending_sensor : interface->pending_sensors) {
 801a310:	4288      	cmp	r0, r1
 801a312:	d101      	bne.n	801a318 <_ZN7Sensors23PendingGroupTerminationEP12I2CInterfaceP11SensorGroup+0xe>
		for (Sensor &registered_sensor : sensor_group->sensors) {
			if (pending_sensor->ID == registered_sensor.ID) return false;
		}
	}
	return true;
 801a314:	2001      	movs	r0, #1
}
 801a316:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (Sensor* pending_sensor : interface->pending_sensors) {
 801a318:	f851 5b04 	ldr.w	r5, [r1], #4
 801a31c:	e9d2 3403 	ldrd	r3, r4, [r2, #12]
		for (Sensor &registered_sensor : sensor_group->sensors) {
 801a320:	429c      	cmp	r4, r3
 801a322:	d0f5      	beq.n	801a310 <_ZN7Sensors23PendingGroupTerminationEP12I2CInterfaceP11SensorGroup+0x6>
			if (pending_sensor->ID == registered_sensor.ID) return false;
 801a324:	792f      	ldrb	r7, [r5, #4]
 801a326:	3328      	adds	r3, #40	@ 0x28
 801a328:	f813 6c24 	ldrb.w	r6, [r3, #-36]
 801a32c:	42b7      	cmp	r7, r6
 801a32e:	d1f7      	bne.n	801a320 <_ZN7Sensors23PendingGroupTerminationEP12I2CInterfaceP11SensorGroup+0x16>
 801a330:	2000      	movs	r0, #0
 801a332:	e7f0      	b.n	801a316 <_ZN7Sensors23PendingGroupTerminationEP12I2CInterfaceP11SensorGroup+0xc>

0801a334 <_ZN7Sensors24ProccessGroupTerminationEP12I2CInterfaceP11SensorGroup>:
void Sensors::ProccessGroupTermination(I2CInterface* interface, SensorGroup* sensor_group) {
 801a334:	b570      	push	{r4, r5, r6, lr}
 801a336:	4604      	mov	r4, r0
 801a338:	460e      	mov	r6, r1
 801a33a:	4615      	mov	r5, r2
	if (RegularGroupTermination(interface, sensor_group) && PendingGroupTermination(interface, sensor_group)) {
 801a33c:	f7ff ffc4 	bl	801a2c8 <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup>
 801a340:	b1c0      	cbz	r0, 801a374 <_ZN7Sensors24ProccessGroupTerminationEP12I2CInterfaceP11SensorGroup+0x40>
 801a342:	462a      	mov	r2, r5
 801a344:	4631      	mov	r1, r6
 801a346:	4620      	mov	r0, r4
 801a348:	f7ff ffdf 	bl	801a30a <_ZN7Sensors23PendingGroupTerminationEP12I2CInterfaceP11SensorGroup>
 801a34c:	b190      	cbz	r0, 801a374 <_ZN7Sensors24ProccessGroupTerminationEP12I2CInterfaceP11SensorGroup+0x40>
		sensor_group->counter = 0;
 801a34e:	2300      	movs	r3, #0
 801a350:	80eb      	strh	r3, [r5, #6]
		if (sensor_group->publishable) {
 801a352:	78eb      	ldrb	r3, [r5, #3]
 801a354:	b173      	cbz	r3, 801a374 <_ZN7Sensors24ProccessGroupTerminationEP12I2CInterfaceP11SensorGroup+0x40>
			osSemaphoreRelease(SensorsSemaphore);
 801a356:	6820      	ldr	r0, [r4, #0]
 801a358:	f7f2 fdba 	bl	800ced0 <osSemaphoreRelease>
			publishers->SpinPublisher(sensor_group->ID);
 801a35c:	78a9      	ldrb	r1, [r5, #2]
 801a35e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 801a362:	f7fe fee3 	bl	801912c <_ZN10Publishers13SpinPublisherEh>
			osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a366:	6820      	ldr	r0, [r4, #0]
 801a368:	f04f 31ff 	mov.w	r1, #4294967295
}
 801a36c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a370:	f7f2 bd7a 	b.w	800ce68 <osSemaphoreAcquire>
}
 801a374:	bd70      	pop	{r4, r5, r6, pc}

0801a376 <_ZN7Sensors18FindInterfaceIndexEhPb>:
 *
 * @param input ID: interface ID to find
 * @param output success: whether successful
 * @return the interface index
 */
uint8_t Sensors::FindInterfaceIndex(uint8_t ID, bool* success) {
 801a376:	b570      	push	{r4, r5, r6, lr}
 801a378:	e9d0 3404 	ldrd	r3, r4, [r0, #16]
	uint8_t index = 0;
	for (I2CInterface &interface : interfaces) {
 801a37c:	2000      	movs	r0, #0
 801a37e:	429c      	cmp	r4, r3
 801a380:	461d      	mov	r5, r3
 801a382:	d102      	bne.n	801a38a <_ZN7Sensors18FindInterfaceIndexEhPb+0x14>
 801a384:	2300      	movs	r3, #0
			return index;
		}
		index++;
	}
	*success = false;
	return 0;
 801a386:	4618      	mov	r0, r3
 801a388:	e006      	b.n	801a398 <_ZN7Sensors18FindInterfaceIndexEhPb+0x22>
		if (interface.ID == ID) {
 801a38a:	782d      	ldrb	r5, [r5, #0]
 801a38c:	1c46      	adds	r6, r0, #1
 801a38e:	337c      	adds	r3, #124	@ 0x7c
 801a390:	428d      	cmp	r5, r1
 801a392:	d103      	bne.n	801a39c <_ZN7Sensors18FindInterfaceIndexEhPb+0x26>
 801a394:	b2c0      	uxtb	r0, r0
 801a396:	2301      	movs	r3, #1
			*success = true;
 801a398:	7013      	strb	r3, [r2, #0]
}
 801a39a:	bd70      	pop	{r4, r5, r6, pc}
 801a39c:	4630      	mov	r0, r6
 801a39e:	e7ee      	b.n	801a37e <_ZN7Sensors18FindInterfaceIndexEhPb+0x8>

0801a3a0 <_ZN7Sensors13FindInterfaceEhPb>:
I2CInterface* Sensors::FindInterface(uint8_t ID, bool* success) {
 801a3a0:	b538      	push	{r3, r4, r5, lr}
 801a3a2:	4604      	mov	r4, r0
	uint8_t index = FindInterfaceIndex(ID, success);
 801a3a4:	f7ff ffe7 	bl	801a376 <_ZN7Sensors18FindInterfaceIndexEhPb>
 801a3a8:	4603      	mov	r3, r0
	if (not *success)
 801a3aa:	7810      	ldrb	r0, [r2, #0]
 801a3ac:	b128      	cbz	r0, 801a3ba <_ZN7Sensors13FindInterfaceEhPb+0x1a>
	return *(this->_M_impl._M_start + __n);
 801a3ae:	b21b      	sxth	r3, r3
 801a3b0:	6920      	ldr	r0, [r4, #16]
 801a3b2:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 801a3b6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
}
 801a3ba:	bd38      	pop	{r3, r4, r5, pc}

0801a3bc <_ZN7Sensors28FindInterfaceIndexWithHandleEP19__I2C_HandleTypeDefPb>:
 *
 * @param input interface: the I2C hardware interface handle to find
 * @param output success: whether successful
 * @return the interface index
 */
uint8_t Sensors::FindInterfaceIndexWithHandle(I2C_HandleTypeDef* interface, bool* success) {
 801a3bc:	b570      	push	{r4, r5, r6, lr}
 801a3be:	e9d0 3404 	ldrd	r3, r4, [r0, #16]
	uint8_t index = 0;
	for (I2CInterface &I2C_interface : interfaces) {
 801a3c2:	2000      	movs	r0, #0
 801a3c4:	429c      	cmp	r4, r3
 801a3c6:	461d      	mov	r5, r3
 801a3c8:	d102      	bne.n	801a3d0 <_ZN7Sensors28FindInterfaceIndexWithHandleEP19__I2C_HandleTypeDefPb+0x14>
 801a3ca:	2300      	movs	r3, #0
			return index;
		}
		index++;
	}
	*success = false;
	return 0;
 801a3cc:	4618      	mov	r0, r3
 801a3ce:	e006      	b.n	801a3de <_ZN7Sensors28FindInterfaceIndexWithHandleEP19__I2C_HandleTypeDefPb+0x22>
		if (I2C_interface.interface == interface) {
 801a3d0:	68ed      	ldr	r5, [r5, #12]
 801a3d2:	1c46      	adds	r6, r0, #1
 801a3d4:	337c      	adds	r3, #124	@ 0x7c
 801a3d6:	428d      	cmp	r5, r1
 801a3d8:	d103      	bne.n	801a3e2 <_ZN7Sensors28FindInterfaceIndexWithHandleEP19__I2C_HandleTypeDefPb+0x26>
 801a3da:	b2c0      	uxtb	r0, r0
 801a3dc:	2301      	movs	r3, #1
			*success = true;
 801a3de:	7013      	strb	r3, [r2, #0]
}
 801a3e0:	bd70      	pop	{r4, r5, r6, pc}
 801a3e2:	4630      	mov	r0, r6
 801a3e4:	e7ee      	b.n	801a3c4 <_ZN7Sensors28FindInterfaceIndexWithHandleEP19__I2C_HandleTypeDefPb+0x8>

0801a3e6 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>:
 * @param input group_ID: the group ID to find
 * @param output interface_: interface linked to the sensor group
 * @param output success: whether successful
 * @return the sensor group pointer
 */
SensorGroup* Sensors::FindSensorGroupPath(uint8_t group_ID, I2CInterface** interface_, bool* success) {
 801a3e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a3e8:	e9d0 4604 	ldrd	r4, r6, [r0, #16]
	for (I2CInterface &interface : interfaces) {
 801a3ec:	42a6      	cmp	r6, r4
 801a3ee:	d102      	bne.n	801a3f6 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x10>
 801a3f0:	2200      	movs	r2, #0
				return sensor_group_pointer;
			}
		}
	}
	*success = false;
	return NULL;
 801a3f2:	4610      	mov	r0, r2
 801a3f4:	e00f      	b.n	801a416 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x30>
 801a3f6:	e9d4 5716 	ldrd	r5, r7, [r4, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 801a3fa:	42bd      	cmp	r5, r7
 801a3fc:	4628      	mov	r0, r5
 801a3fe:	d101      	bne.n	801a404 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x1e>
      operator++() _GLIBCXX_NOEXCEPT
 801a400:	347c      	adds	r4, #124	@ 0x7c
	return *this;
 801a402:	e7f3      	b.n	801a3ec <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x6>
			if (sensor_group.ID == group_ID) {
 801a404:	f890 c002 	ldrb.w	ip, [r0, #2]
 801a408:	f100 0518 	add.w	r5, r0, #24
 801a40c:	458c      	cmp	ip, r1
 801a40e:	d1f4      	bne.n	801a3fa <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x14>
				if (interface_ != NULL) *interface_ = &interface;
 801a410:	b102      	cbz	r2, 801a414 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x2e>
 801a412:	6014      	str	r4, [r2, #0]
SensorGroup* Sensors::FindSensorGroupPath(uint8_t group_ID, I2CInterface** interface_, bool* success) {
 801a414:	2201      	movs	r2, #1
				*success = true;
 801a416:	701a      	strb	r2, [r3, #0]
}
 801a418:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a41a <_ZN7Sensors15FindSensorGroupEhPb>:
SensorGroup* Sensors::FindSensorGroup(uint8_t group_ID, bool* success) {
 801a41a:	4613      	mov	r3, r2
	return FindSensorGroupPath(group_ID, NULL, success);
 801a41c:	2200      	movs	r2, #0
 801a41e:	f7ff bfe2 	b.w	801a3e6 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>

0801a422 <_ZN7Sensors23SetSensorGroupPrescalerEht>:
bool Sensors::SetSensorGroupPrescaler(uint8_t group_ID, uint16_t prescaler) {
 801a422:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a424:	4616      	mov	r6, r2
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 801a426:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::SetSensorGroupPrescaler(uint8_t group_ID, uint16_t prescaler) {
 801a42a:	4604      	mov	r4, r0
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 801a42c:	f7ff fff5 	bl	801a41a <_ZN7Sensors15FindSensorGroupEhPb>
	if (!success) return false;
 801a430:	f89d 7007 	ldrb.w	r7, [sp, #7]
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 801a434:	4605      	mov	r5, r0
	if (!success) return false;
 801a436:	b147      	cbz	r7, 801a44a <_ZN7Sensors23SetSensorGroupPrescalerEht+0x28>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a438:	f04f 31ff 	mov.w	r1, #4294967295
 801a43c:	6820      	ldr	r0, [r4, #0]
 801a43e:	f7f2 fd13 	bl	800ce68 <osSemaphoreAcquire>
	osSemaphoreRelease(SensorsSemaphore);
 801a442:	6820      	ldr	r0, [r4, #0]
	sensor_group->prescaler = prescaler;
 801a444:	80ae      	strh	r6, [r5, #4]
	osSemaphoreRelease(SensorsSemaphore);
 801a446:	f7f2 fd43 	bl	800ced0 <osSemaphoreRelease>
}
 801a44a:	4638      	mov	r0, r7
 801a44c:	b003      	add	sp, #12
 801a44e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a450 <_ZZN7Sensors12AddRegistersEvENUlPvtPttE7_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801a450:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 801a452:	4611      	mov	r1, r2
			if (length != 2) return false;
 801a454:	d103      	bne.n	801a45e <_ZZN7Sensors12AddRegistersEvENUlPvtPttE7_4_FUNES0_tS1_t+0xe>
			return self->SetSensorGroupPrescaler((uint8_t) input[0], input[1]);
 801a456:	8852      	ldrh	r2, [r2, #2]
 801a458:	7809      	ldrb	r1, [r1, #0]
 801a45a:	f7ff bfe2 	b.w	801a422 <_ZN7Sensors23SetSensorGroupPrescalerEht>
		}
 801a45e:	2000      	movs	r0, #0
 801a460:	4770      	bx	lr

0801a462 <_ZN7Sensors20SetSensorGroupStatusEhb>:
bool Sensors::SetSensorGroupStatus(uint8_t group_ID, bool status) {
 801a462:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a464:	4614      	mov	r4, r2
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 801a466:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::SetSensorGroupStatus(uint8_t group_ID, bool status) {
 801a46a:	4606      	mov	r6, r0
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 801a46c:	f7ff ffd5 	bl	801a41a <_ZN7Sensors15FindSensorGroupEhPb>
	if (!success) return false;
 801a470:	f89d 7007 	ldrb.w	r7, [sp, #7]
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 801a474:	4605      	mov	r5, r0
	if (!success) return false;
 801a476:	b14f      	cbz	r7, 801a48c <_ZN7Sensors20SetSensorGroupStatusEhb+0x2a>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a478:	f04f 31ff 	mov.w	r1, #4294967295
 801a47c:	6830      	ldr	r0, [r6, #0]
 801a47e:	f7f2 fcf3 	bl	800ce68 <osSemaphoreAcquire>
	sensor_group->active = status;
 801a482:	702c      	strb	r4, [r5, #0]
	if (!status) {
 801a484:	b12c      	cbz	r4, 801a492 <_ZN7Sensors20SetSensorGroupStatusEhb+0x30>
	osSemaphoreRelease(SensorsSemaphore);
 801a486:	6830      	ldr	r0, [r6, #0]
 801a488:	f7f2 fd22 	bl	800ced0 <osSemaphoreRelease>
}
 801a48c:	4638      	mov	r0, r7
 801a48e:	b003      	add	sp, #12
 801a490:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sensor_group->read_index = 0;
 801a492:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801a496:	722c      	strb	r4, [r5, #8]
		for (Sensor &sensor : sensor_group->sensors) {
 801a498:	429a      	cmp	r2, r3
 801a49a:	d0f4      	beq.n	801a486 <_ZN7Sensors20SetSensorGroupStatusEhb+0x24>
			sensor.read_index = 0;
 801a49c:	741c      	strb	r4, [r3, #16]
      operator++() _GLIBCXX_NOEXCEPT
 801a49e:	3328      	adds	r3, #40	@ 0x28
	return *this;
 801a4a0:	e7fa      	b.n	801a498 <_ZN7Sensors20SetSensorGroupStatusEhb+0x36>

0801a4a2 <_ZN7Sensors19ActivateSensorGroupEh>:
	return SetSensorGroupStatus(group_ID, true);
 801a4a2:	2201      	movs	r2, #1
 801a4a4:	f7ff bfdd 	b.w	801a462 <_ZN7Sensors20SetSensorGroupStatusEhb>

0801a4a8 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801a4a8:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801a4aa:	4611      	mov	r1, r2
			if (length != 2) return false;
 801a4ac:	d106      	bne.n	801a4bc <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t+0x14>
			return self->SetSensorGroupStatus(input[0], (bool) input[1]);
 801a4ae:	7852      	ldrb	r2, [r2, #1]
 801a4b0:	7809      	ldrb	r1, [r1, #0]
 801a4b2:	3a00      	subs	r2, #0
 801a4b4:	bf18      	it	ne
 801a4b6:	2201      	movne	r2, #1
 801a4b8:	f7ff bfd3 	b.w	801a462 <_ZN7Sensors20SetSensorGroupStatusEhb>
		}
 801a4bc:	2000      	movs	r0, #0
 801a4be:	4770      	bx	lr

0801a4c0 <_ZN7Sensors20DeactivateAllSensorsEh>:
bool Sensors::DeactivateAllSensors(uint8_t group_ID) {
 801a4c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 801a4c2:	f10d 0303 	add.w	r3, sp, #3
 801a4c6:	aa01      	add	r2, sp, #4
bool Sensors::DeactivateAllSensors(uint8_t group_ID) {
 801a4c8:	4604      	mov	r4, r0
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 801a4ca:	f7ff ff8c 	bl	801a3e6 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>
	if (!success) return false;
 801a4ce:	f89d 6003 	ldrb.w	r6, [sp, #3]
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 801a4d2:	4605      	mov	r5, r0
	if (!success) return false;
 801a4d4:	b166      	cbz	r6, 801a4f0 <_ZN7Sensors20DeactivateAllSensorsEh+0x30>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a4d6:	f04f 31ff 	mov.w	r1, #4294967295
 801a4da:	6820      	ldr	r0, [r4, #0]
 801a4dc:	f7f2 fcc4 	bl	800ce68 <osSemaphoreAcquire>
		sensor.active = false;
 801a4e0:	2100      	movs	r1, #0
 801a4e2:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
	for (Sensor &sensor : sensor_group->sensors) {
 801a4e6:	429a      	cmp	r2, r3
 801a4e8:	d105      	bne.n	801a4f6 <_ZN7Sensors20DeactivateAllSensorsEh+0x36>
	osSemaphoreRelease(SensorsSemaphore);
 801a4ea:	6820      	ldr	r0, [r4, #0]
 801a4ec:	f7f2 fcf0 	bl	800ced0 <osSemaphoreRelease>
}
 801a4f0:	4630      	mov	r0, r6
 801a4f2:	b002      	add	sp, #8
 801a4f4:	bd70      	pop	{r4, r5, r6, pc}
		sensor.active = false;
 801a4f6:	f803 1b28 	strb.w	r1, [r3], #40
 801a4fa:	e7f4      	b.n	801a4e6 <_ZN7Sensors20DeactivateAllSensorsEh+0x26>

0801a4fc <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			return self->DeactivateAllSensors(*input);
 801a4fc:	7811      	ldrb	r1, [r2, #0]
 801a4fe:	f7ff bfdf 	b.w	801a4c0 <_ZN7Sensors20DeactivateAllSensorsEh>

0801a502 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb>:
 * @param output interface_: interface linked to the sensor
 * @param output sensor_group_: the sensor group linked to the sensor
 * @param output success: whether successful
 * @return the sensor pointer
 */
Sensor* Sensors::FindSensorPath(uint8_t sensor_ID, I2CInterface** interface_, SensorGroup** sensor_group_, bool* success) {
 801a502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a506:	e9d0 4704 	ldrd	r4, r7, [r0, #16]
	for (I2CInterface &interface : interfaces) {
 801a50a:	42a7      	cmp	r7, r4
 801a50c:	d102      	bne.n	801a514 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x12>
 801a50e:	2300      	movs	r3, #0
				}
			}
		}
	}
	*success = false;
	return NULL;
 801a510:	4618      	mov	r0, r3
 801a512:	e017      	b.n	801a544 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x42>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801a514:	e9d4 5c16 	ldrd	r5, ip, [r4, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 801a518:	4565      	cmp	r5, ip
 801a51a:	d101      	bne.n	801a520 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x1e>
      operator++() _GLIBCXX_NOEXCEPT
 801a51c:	347c      	adds	r4, #124	@ 0x7c
	return *this;
 801a51e:	e7f4      	b.n	801a50a <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x8>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801a520:	e9d5 6e03 	ldrd	r6, lr, [r5, #12]
			for (Sensor &sensor : sensor_group.sensors) {
 801a524:	45b6      	cmp	lr, r6
 801a526:	4630      	mov	r0, r6
 801a528:	d101      	bne.n	801a52e <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x2c>
      operator++() _GLIBCXX_NOEXCEPT
 801a52a:	3518      	adds	r5, #24
	return *this;
 801a52c:	e7f4      	b.n	801a518 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x16>
				if (sensor.ID == sensor_ID) {
 801a52e:	f890 8004 	ldrb.w	r8, [r0, #4]
 801a532:	f100 0628 	add.w	r6, r0, #40	@ 0x28
 801a536:	4588      	cmp	r8, r1
 801a538:	d1f4      	bne.n	801a524 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x22>
					if (interface_ != NULL) *interface_ = &interface;
 801a53a:	b102      	cbz	r2, 801a53e <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x3c>
 801a53c:	6014      	str	r4, [r2, #0]
					if (sensor_group_ != NULL) *sensor_group_ = &sensor_group;
 801a53e:	b103      	cbz	r3, 801a542 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x40>
 801a540:	601d      	str	r5, [r3, #0]
Sensor* Sensors::FindSensorPath(uint8_t sensor_ID, I2CInterface** interface_, SensorGroup** sensor_group_, bool* success) {
 801a542:	2301      	movs	r3, #1
					*success = true;
 801a544:	9a06      	ldr	r2, [sp, #24]
 801a546:	7013      	strb	r3, [r2, #0]
}
 801a548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a54c <_ZN7Sensors10FindSensorEhPb>:
	return FindSensorPath(sensor_ID, NULL, NULL, success);
 801a54c:	2300      	movs	r3, #0
Sensor* Sensors::FindSensor(uint8_t sensor_ID, bool* success) {
 801a54e:	b507      	push	{r0, r1, r2, lr}
	return FindSensorPath(sensor_ID, NULL, NULL, success);
 801a550:	9200      	str	r2, [sp, #0]
 801a552:	461a      	mov	r2, r3
 801a554:	f7ff ffd5 	bl	801a502 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb>
}
 801a558:	b003      	add	sp, #12
 801a55a:	f85d fb04 	ldr.w	pc, [sp], #4

0801a55e <_ZN7Sensors17AddSensorCallbackEhPvPFvS0_E>:
bool Sensors::AddSensorCallback(uint8_t sensor_ID, void* context, void (*callback)(void*)) {
 801a55e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801a562:	4617      	mov	r7, r2
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801a564:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::AddSensorCallback(uint8_t sensor_ID, void* context, void (*callback)(void*)) {
 801a568:	4604      	mov	r4, r0
 801a56a:	461e      	mov	r6, r3
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801a56c:	f7ff ffee 	bl	801a54c <_ZN7Sensors10FindSensorEhPb>
	if (!success) return false;
 801a570:	f89d 8007 	ldrb.w	r8, [sp, #7]
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801a574:	4605      	mov	r5, r0
	if (!success) return false;
 801a576:	f1b8 0f00 	cmp.w	r8, #0
 801a57a:	d009      	beq.n	801a590 <_ZN7Sensors17AddSensorCallbackEhPvPFvS0_E+0x32>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a57c:	f04f 31ff 	mov.w	r1, #4294967295
 801a580:	6820      	ldr	r0, [r4, #0]
 801a582:	f7f2 fc71 	bl	800ce68 <osSemaphoreAcquire>
	osSemaphoreRelease(SensorsSemaphore);
 801a586:	6820      	ldr	r0, [r4, #0]
	sensor->callback = callback;
 801a588:	e9c5 7608 	strd	r7, r6, [r5, #32]
	osSemaphoreRelease(SensorsSemaphore);
 801a58c:	f7f2 fca0 	bl	800ced0 <osSemaphoreRelease>
}
 801a590:	4640      	mov	r0, r8
 801a592:	b002      	add	sp, #8
 801a594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a598 <_ZN7Sensors15SetSensorStatusEhb>:
bool Sensors::SetSensorStatus(uint8_t sensor_ID, bool status) {
 801a598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a59a:	4616      	mov	r6, r2
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801a59c:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::SetSensorStatus(uint8_t sensor_ID, bool status) {
 801a5a0:	4604      	mov	r4, r0
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801a5a2:	f7ff ffd3 	bl	801a54c <_ZN7Sensors10FindSensorEhPb>
	if (!success) return false;
 801a5a6:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801a5aa:	4605      	mov	r5, r0
	if (!success) return false;
 801a5ac:	b147      	cbz	r7, 801a5c0 <_ZN7Sensors15SetSensorStatusEhb+0x28>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a5ae:	f04f 31ff 	mov.w	r1, #4294967295
 801a5b2:	6820      	ldr	r0, [r4, #0]
 801a5b4:	f7f2 fc58 	bl	800ce68 <osSemaphoreAcquire>
	osSemaphoreRelease(SensorsSemaphore);
 801a5b8:	6820      	ldr	r0, [r4, #0]
	sensor->active = status;
 801a5ba:	702e      	strb	r6, [r5, #0]
	osSemaphoreRelease(SensorsSemaphore);
 801a5bc:	f7f2 fc88 	bl	800ced0 <osSemaphoreRelease>
}
 801a5c0:	4638      	mov	r0, r7
 801a5c2:	b003      	add	sp, #12
 801a5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a5c6 <_ZN7Sensors14ActivateSensorEh>:
	return SetSensorStatus(sensor_ID, true);
 801a5c6:	2201      	movs	r2, #1
 801a5c8:	f7ff bfe6 	b.w	801a598 <_ZN7Sensors15SetSensorStatusEhb>

0801a5cc <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801a5cc:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801a5ce:	4611      	mov	r1, r2
			if (length != 2) return false;
 801a5d0:	d106      	bne.n	801a5e0 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x14>
			return self->SetSensorStatus(input[0], (bool) input[1]);
 801a5d2:	7852      	ldrb	r2, [r2, #1]
 801a5d4:	7809      	ldrb	r1, [r1, #0]
 801a5d6:	3a00      	subs	r2, #0
 801a5d8:	bf18      	it	ne
 801a5da:	2201      	movne	r2, #1
 801a5dc:	f7ff bfdc 	b.w	801a598 <_ZN7Sensors15SetSensorStatusEhb>
		}
 801a5e0:	2000      	movs	r0, #0
 801a5e2:	4770      	bx	lr

0801a5e4 <_ZN7Sensors15ConfigureSensorEhtPhtm>:
HAL_StatusTypeDef Sensors::ConfigureSensor(uint8_t sensor_ID, uint16_t memory_address, uint8_t* data, uint16_t size, uint32_t timeout) {
 801a5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5e8:	b087      	sub	sp, #28
 801a5ea:	4691      	mov	r9, r2
 801a5ec:	469a      	mov	sl, r3
 801a5ee:	4604      	mov	r4, r0
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801a5f0:	f10d 0217 	add.w	r2, sp, #23
HAL_StatusTypeDef Sensors::ConfigureSensor(uint8_t sensor_ID, uint16_t memory_address, uint8_t* data, uint16_t size, uint32_t timeout) {
 801a5f4:	f8bd b040 	ldrh.w	fp, [sp, #64]	@ 0x40
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801a5f8:	f7ff ffa8 	bl	801a54c <_ZN7Sensors10FindSensorEhPb>
	if (!success) return HAL_ERROR;
 801a5fc:	f89d 3017 	ldrb.w	r3, [sp, #23]
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801a600:	4605      	mov	r5, r0
	if (!success) return HAL_ERROR;
 801a602:	b923      	cbnz	r3, 801a60e <_ZN7Sensors15ConfigureSensorEhtPhtm+0x2a>
 801a604:	2601      	movs	r6, #1
}
 801a606:	4630      	mov	r0, r6
 801a608:	b007      	add	sp, #28
 801a60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!sensor->present) return HAL_ERROR;
 801a60e:	7883      	ldrb	r3, [r0, #2]
 801a610:	2b00      	cmp	r3, #0
 801a612:	d0f7      	beq.n	801a604 <_ZN7Sensors15ConfigureSensorEhtPhtm+0x20>
	SensorGroup* sensor_group = FindSensorGroup(sensor->parent, &success);
 801a614:	7841      	ldrb	r1, [r0, #1]
 801a616:	f10d 0217 	add.w	r2, sp, #23
 801a61a:	4620      	mov	r0, r4
 801a61c:	f7ff fefd 	bl	801a41a <_ZN7Sensors15FindSensorGroupEhPb>
	if (!success) return HAL_ERROR;
 801a620:	f89d 3017 	ldrb.w	r3, [sp, #23]
 801a624:	2b00      	cmp	r3, #0
 801a626:	d0ed      	beq.n	801a604 <_ZN7Sensors15ConfigureSensorEhtPhtm+0x20>
	I2CInterface* interface = FindInterface(sensor_group->parent, &success);
 801a628:	7841      	ldrb	r1, [r0, #1]
 801a62a:	f10d 0217 	add.w	r2, sp, #23
 801a62e:	4620      	mov	r0, r4
 801a630:	f7ff feb6 	bl	801a3a0 <_ZN7Sensors13FindInterfaceEhPb>
	if (!success) return HAL_ERROR;
 801a634:	f89d 3017 	ldrb.w	r3, [sp, #23]
	I2CInterface* interface = FindInterface(sensor_group->parent, &success);
 801a638:	4680      	mov	r8, r0
	if (!success) return HAL_ERROR;
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d0e2      	beq.n	801a604 <_ZN7Sensors15ConfigureSensorEhtPhtm+0x20>
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 801a63e:	f7e8 ff63 	bl	8003508 <HAL_GetTick>
 801a642:	9b11      	ldr	r3, [sp, #68]	@ 0x44
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a644:	f04f 31ff 	mov.w	r1, #4294967295
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 801a648:	18c7      	adds	r7, r0, r3
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a64a:	6820      	ldr	r0, [r4, #0]
 801a64c:	f7f2 fc0c 	bl	800ce68 <osSemaphoreAcquire>
		status = HAL_I2C_Mem_Write(interface->interface, sensor->address, memory_address, sensor->memory_address_size, data, size, timeout);
 801a650:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a652:	892b      	ldrh	r3, [r5, #8]
 801a654:	88e9      	ldrh	r1, [r5, #6]
 801a656:	f8cd a000 	str.w	sl, [sp]
 801a65a:	e9cd b201 	strd	fp, r2, [sp, #4]
 801a65e:	464a      	mov	r2, r9
 801a660:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801a664:	f7ec fe10 	bl	8007288 <HAL_I2C_Mem_Write>
	} while ((status == HAL_BUSY) && (HAL_GetTick() < end_timestamp)); // try until the bus is free
 801a668:	2802      	cmp	r0, #2
		status = HAL_I2C_Mem_Write(interface->interface, sensor->address, memory_address, sensor->memory_address_size, data, size, timeout);
 801a66a:	4606      	mov	r6, r0
	} while ((status == HAL_BUSY) && (HAL_GetTick() < end_timestamp)); // try until the bus is free
 801a66c:	d103      	bne.n	801a676 <_ZN7Sensors15ConfigureSensorEhtPhtm+0x92>
 801a66e:	f7e8 ff4b 	bl	8003508 <HAL_GetTick>
 801a672:	42b8      	cmp	r0, r7
 801a674:	d3ec      	bcc.n	801a650 <_ZN7Sensors15ConfigureSensorEhtPhtm+0x6c>
	osSemaphoreRelease(SensorsSemaphore);
 801a676:	6820      	ldr	r0, [r4, #0]
 801a678:	f7f2 fc2a 	bl	800ced0 <osSemaphoreRelease>
	return status;
 801a67c:	e7c3      	b.n	801a606 <_ZN7Sensors15ConfigureSensorEhtPhtm+0x22>

0801a67e <_ZN7Sensors15ConfigureSensorEhthm>:
HAL_StatusTypeDef Sensors::ConfigureSensor(uint8_t sensor_ID, uint16_t memory_address, uint8_t data, uint32_t timeout) {
 801a67e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buffer = data;
 801a680:	f88d 300f 	strb.w	r3, [sp, #15]
	return ConfigureSensor(sensor_ID, memory_address, &buffer, 1, timeout);
 801a684:	9b06      	ldr	r3, [sp, #24]
 801a686:	9301      	str	r3, [sp, #4]
 801a688:	2301      	movs	r3, #1
 801a68a:	9300      	str	r3, [sp, #0]
 801a68c:	f10d 030f 	add.w	r3, sp, #15
 801a690:	f7ff ffa8 	bl	801a5e4 <_ZN7Sensors15ConfigureSensorEhtPhtm>
}
 801a694:	b005      	add	sp, #20
 801a696:	f85d fb04 	ldr.w	pc, [sp], #4

0801a69a <_ZN7Sensors23DeactivateAllSensorDataEh>:
bool Sensors::DeactivateAllSensorData(uint8_t sensor_ID) {
 801a69a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801a69c:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::DeactivateAllSensorData(uint8_t sensor_ID) {
 801a6a0:	4604      	mov	r4, r0
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801a6a2:	f7ff ff53 	bl	801a54c <_ZN7Sensors10FindSensorEhPb>
	if (!success) return false;
 801a6a6:	f89d 6007 	ldrb.w	r6, [sp, #7]
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801a6aa:	4605      	mov	r5, r0
	if (!success) return false;
 801a6ac:	b166      	cbz	r6, 801a6c8 <_ZN7Sensors23DeactivateAllSensorDataEh+0x2e>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a6ae:	f04f 31ff 	mov.w	r1, #4294967295
 801a6b2:	6820      	ldr	r0, [r4, #0]
 801a6b4:	f7f2 fbd8 	bl	800ce68 <osSemaphoreAcquire>
		data.active = false;
 801a6b8:	2100      	movs	r1, #0
 801a6ba:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
	for (SensorData &data : sensor->data) {
 801a6be:	429a      	cmp	r2, r3
 801a6c0:	d105      	bne.n	801a6ce <_ZN7Sensors23DeactivateAllSensorDataEh+0x34>
	osSemaphoreRelease(SensorsSemaphore);
 801a6c2:	6820      	ldr	r0, [r4, #0]
 801a6c4:	f7f2 fc04 	bl	800ced0 <osSemaphoreRelease>
}
 801a6c8:	4630      	mov	r0, r6
 801a6ca:	b002      	add	sp, #8
 801a6cc:	bd70      	pop	{r4, r5, r6, pc}
		data.active = false;
 801a6ce:	f803 1b18 	strb.w	r1, [r3], #24
 801a6d2:	e7f4      	b.n	801a6be <_ZN7Sensors23DeactivateAllSensorDataEh+0x24>

0801a6d4 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t>:
			return self->DeactivateAllSensorData(*input);
 801a6d4:	7811      	ldrb	r1, [r2, #0]
 801a6d6:	f7ff bfe0 	b.w	801a69a <_ZN7Sensors23DeactivateAllSensorDataEh>

0801a6da <_ZN7Sensors14FindSensorDataEhtPb>:
SensorData* Sensors::FindSensorData(uint8_t sensor_ID, uint16_t sensor_register, bool* success) {
 801a6da:	b538      	push	{r3, r4, r5, lr}
 801a6dc:	461c      	mov	r4, r3
 801a6de:	4615      	mov	r5, r2
	Sensor* sensor = FindSensor(sensor_ID, success);
 801a6e0:	461a      	mov	r2, r3
 801a6e2:	f7ff ff33 	bl	801a54c <_ZN7Sensors10FindSensorEhPb>
	if (not *success) return NULL;
 801a6e6:	7823      	ldrb	r3, [r4, #0]
 801a6e8:	b133      	cbz	r3, 801a6f8 <_ZN7Sensors14FindSensorDataEhtPb+0x1e>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801a6ea:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
	for (SensorData &data : sensor->data) {
 801a6ee:	429a      	cmp	r2, r3
 801a6f0:	4618      	mov	r0, r3
 801a6f2:	d103      	bne.n	801a6fc <_ZN7Sensors14FindSensorDataEhtPb+0x22>
	*success = false;
 801a6f4:	2300      	movs	r3, #0
 801a6f6:	7023      	strb	r3, [r4, #0]
	if (not *success) return NULL;
 801a6f8:	2000      	movs	r0, #0
 801a6fa:	e003      	b.n	801a704 <_ZN7Sensors14FindSensorDataEhtPb+0x2a>
		if (data.register_address == sensor_register) {
 801a6fc:	8899      	ldrh	r1, [r3, #4]
 801a6fe:	3318      	adds	r3, #24
 801a700:	42a9      	cmp	r1, r5
 801a702:	d1f4      	bne.n	801a6ee <_ZN7Sensors14FindSensorDataEhtPb+0x14>
}
 801a704:	bd38      	pop	{r3, r4, r5, pc}

0801a706 <_ZN7Sensors18IsSensorDataActiveEht>:
bool Sensors::IsSensorDataActive(uint8_t sensor_ID, uint16_t sensor_register) {
 801a706:	b507      	push	{r0, r1, r2, lr}
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 801a708:	f10d 0307 	add.w	r3, sp, #7
 801a70c:	f7ff ffe5 	bl	801a6da <_ZN7Sensors14FindSensorDataEhtPb>
 801a710:	4603      	mov	r3, r0
	if (!success) return false;
 801a712:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801a716:	b100      	cbz	r0, 801a71a <_ZN7Sensors18IsSensorDataActiveEht+0x14>
	bool status = sensor_data->active;
 801a718:	7818      	ldrb	r0, [r3, #0]
}
 801a71a:	b003      	add	sp, #12
 801a71c:	f85d fb04 	ldr.w	pc, [sp], #4

0801a720 <_ZN7Sensors19SetSensorDataStatusEhtb>:
bool Sensors::SetSensorDataStatus(uint8_t sensor_ID, uint16_t sensor_register, bool status) {
 801a720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a722:	461e      	mov	r6, r3
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 801a724:	f10d 0307 	add.w	r3, sp, #7
bool Sensors::SetSensorDataStatus(uint8_t sensor_ID, uint16_t sensor_register, bool status) {
 801a728:	4604      	mov	r4, r0
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 801a72a:	f7ff ffd6 	bl	801a6da <_ZN7Sensors14FindSensorDataEhtPb>
	if (!success) return false;
 801a72e:	f89d 7007 	ldrb.w	r7, [sp, #7]
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 801a732:	4605      	mov	r5, r0
	if (!success) return false;
 801a734:	b147      	cbz	r7, 801a748 <_ZN7Sensors19SetSensorDataStatusEhtb+0x28>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a736:	f04f 31ff 	mov.w	r1, #4294967295
 801a73a:	6820      	ldr	r0, [r4, #0]
 801a73c:	f7f2 fb94 	bl	800ce68 <osSemaphoreAcquire>
	osSemaphoreRelease(SensorsSemaphore);
 801a740:	6820      	ldr	r0, [r4, #0]
	sensor_data->active = status;
 801a742:	702e      	strb	r6, [r5, #0]
	osSemaphoreRelease(SensorsSemaphore);
 801a744:	f7f2 fbc4 	bl	800ced0 <osSemaphoreRelease>
}
 801a748:	4638      	mov	r0, r7
 801a74a:	b003      	add	sp, #12
 801a74c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a74e <_ZN7Sensors18ActivateSensorDataEht>:
	return SetSensorDataStatus(sensor_ID, sensor_register, true);
 801a74e:	2301      	movs	r3, #1
 801a750:	f7ff bfe6 	b.w	801a720 <_ZN7Sensors19SetSensorDataStatusEhtb>

0801a754 <_ZZN7Sensors12AddRegistersEvENUlPvtPttE5_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 801a754:	2b03      	cmp	r3, #3
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 801a756:	4611      	mov	r1, r2
			if (length != 3) return false;
 801a758:	d107      	bne.n	801a76a <_ZZN7Sensors12AddRegistersEvENUlPvtPttE5_4_FUNES0_tS1_t+0x16>
			return self->SetSensorDataStatus((uint8_t) input[0], input[1], (bool) input[2]);
 801a75a:	8893      	ldrh	r3, [r2, #4]
 801a75c:	7809      	ldrb	r1, [r1, #0]
 801a75e:	3b00      	subs	r3, #0
 801a760:	8852      	ldrh	r2, [r2, #2]
 801a762:	bf18      	it	ne
 801a764:	2301      	movne	r3, #1
 801a766:	f7ff bfdb 	b.w	801a720 <_ZN7Sensors19SetSensorDataStatusEhtb>
		}
 801a76a:	2000      	movs	r0, #0
 801a76c:	4770      	bx	lr

0801a76e <_ZN7Sensors15IsSensorPendingEP12I2CInterfaceh>:
 *
 * @param input interface: interface linked to the sensor
 * @param input sensor_ID: sensor ID to check
 * @return true if the sensor is part of the pending list
 */
bool Sensors::IsSensorPending(I2CInterface* interface, uint8_t sensor_ID) {
 801a76e:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a770:	e9d1 4319 	ldrd	r4, r3, [r1, #100]	@ 0x64
	for (uint8_t index = 0; index < interface->pending_sensors.size(); index++) {
 801a774:	2100      	movs	r1, #0
 801a776:	1b1b      	subs	r3, r3, r4
 801a778:	109b      	asrs	r3, r3, #2
 801a77a:	b2c8      	uxtb	r0, r1
 801a77c:	4298      	cmp	r0, r3
 801a77e:	d301      	bcc.n	801a784 <_ZN7Sensors15IsSensorPendingEP12I2CInterfaceh+0x16>
		if (interface->pending_sensors[index]->ID == sensor_ID) {
			return true;
		}
	}
	return false;
 801a780:	2000      	movs	r0, #0
}
 801a782:	bd10      	pop	{r4, pc}
		if (interface->pending_sensors[index]->ID == sensor_ID) {
 801a784:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801a788:	3101      	adds	r1, #1
 801a78a:	7900      	ldrb	r0, [r0, #4]
 801a78c:	4290      	cmp	r0, r2
 801a78e:	d1f4      	bne.n	801a77a <_ZN7Sensors15IsSensorPendingEP12I2CInterfaceh+0xc>
			return true;
 801a790:	2001      	movs	r0, #1
 801a792:	e7f6      	b.n	801a782 <_ZN7Sensors15IsSensorPendingEP12I2CInterfaceh+0x14>

0801a794 <_ZN7Sensors17IsSensorRequestedEP12I2CInterfaceh>:
 *
 * @param input interface: interface linked to the sensor
 * @param input sensor_ID: sensor ID to check
 * @return true if there is a data linked to sensor in the request list
 */
bool Sensors::IsSensorRequested(I2CInterface* interface, uint8_t sensor_ID) {
 801a794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a796:	4606      	mov	r6, r0
 801a798:	460c      	mov	r4, r1
 801a79a:	4617      	mov	r7, r2
	bool success;
	for (uint8_t request_index = 0; request_index < interface->pending_requests.size(); request_index++) {
 801a79c:	2500      	movs	r5, #0
 801a79e:	b2ea      	uxtb	r2, r5
 801a7a0:	e9d4 311c 	ldrd	r3, r1, [r4, #112]	@ 0x70
 801a7a4:	1ac9      	subs	r1, r1, r3
 801a7a6:	ebb2 1f61 	cmp.w	r2, r1, asr #5
 801a7aa:	d302      	bcc.n	801a7b2 <_ZN7Sensors17IsSensorRequestedEP12I2CInterfaceh+0x1e>

		if (sensor->ID == sensor_ID) {
			return true;
		}
	}
	return false;
 801a7ac:	2000      	movs	r0, #0
}
 801a7ae:	b003      	add	sp, #12
 801a7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Sensor* sensor = FindSensor(interface->pending_requests[request_index].data.parent, &success);
 801a7b2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801a7b6:	4630      	mov	r0, r6
 801a7b8:	f10d 0207 	add.w	r2, sp, #7
 801a7bc:	7a59      	ldrb	r1, [r3, #9]
 801a7be:	f7ff fec5 	bl	801a54c <_ZN7Sensors10FindSensorEhPb>
 801a7c2:	4603      	mov	r3, r0
		if (!success) continue;
 801a7c4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801a7c8:	b110      	cbz	r0, 801a7d0 <_ZN7Sensors17IsSensorRequestedEP12I2CInterfaceh+0x3c>
		if (sensor->ID == sensor_ID) {
 801a7ca:	791b      	ldrb	r3, [r3, #4]
 801a7cc:	42bb      	cmp	r3, r7
 801a7ce:	d0ee      	beq.n	801a7ae <_ZN7Sensors17IsSensorRequestedEP12I2CInterfaceh+0x1a>
	for (uint8_t request_index = 0; request_index < interface->pending_requests.size(); request_index++) {
 801a7d0:	3501      	adds	r5, #1
 801a7d2:	e7e4      	b.n	801a79e <_ZN7Sensors17IsSensorRequestedEP12I2CInterfaceh+0xa>

0801a7d4 <_ZN7Sensors15MoveToNextGroupEP12I2CInterfaceb>:
 *
 * @param input interface: the interface to select the next group
 * @param input reset: true to reset the interface reading index if interface terminated
 * @return false if no other group left
 */
bool Sensors::MoveToNextGroup(I2CInterface* interface, bool reset) {
 801a7d4:	b510      	push	{r4, lr}
 801a7d6:	e9d1 4316 	ldrd	r4, r3, [r1, #88]	@ 0x58
	interface->read_index += 1;
 801a7da:	f891 0055 	ldrb.w	r0, [r1, #85]	@ 0x55
 801a7de:	1b1b      	subs	r3, r3, r4
 801a7e0:	4c08      	ldr	r4, [pc, #32]	@ (801a804 <_ZN7Sensors15MoveToNextGroupEP12I2CInterfaceb+0x30>)
 801a7e2:	3001      	adds	r0, #1
 801a7e4:	10db      	asrs	r3, r3, #3
 801a7e6:	b2c0      	uxtb	r0, r0
 801a7e8:	4363      	muls	r3, r4
 801a7ea:	f881 0055 	strb.w	r0, [r1, #85]	@ 0x55
	if (interface->read_index < interface->sensor_groups.size())
 801a7ee:	4298      	cmp	r0, r3
 801a7f0:	d306      	bcc.n	801a800 <_ZN7Sensors15MoveToNextGroupEP12I2CInterfaceb+0x2c>
		return true;

	if (reset) interface->read_index = 0;
 801a7f2:	b90a      	cbnz	r2, 801a7f8 <_ZN7Sensors15MoveToNextGroupEP12I2CInterfaceb+0x24>
	return false;
 801a7f4:	2000      	movs	r0, #0
}
 801a7f6:	bd10      	pop	{r4, pc}
	if (reset) interface->read_index = 0;
 801a7f8:	2300      	movs	r3, #0
 801a7fa:	f881 3055 	strb.w	r3, [r1, #85]	@ 0x55
 801a7fe:	e7f9      	b.n	801a7f4 <_ZN7Sensors15MoveToNextGroupEP12I2CInterfaceb+0x20>
		return true;
 801a800:	2001      	movs	r0, #1
 801a802:	e7f8      	b.n	801a7f6 <_ZN7Sensors15MoveToNextGroupEP12I2CInterfaceb+0x22>
 801a804:	aaaaaaab 	.word	0xaaaaaaab

0801a808 <_ZN7Sensors16MoveToNextSensorEP12I2CInterfaceP11SensorGroupb>:
 * @param input interface: the interface
 * @param input sensor_group: the sensor group to select the next sensor
 * @param input reset: true to reset the group reading index and process group termination if group terminated
 * @return false if no other sensor left
 */
bool Sensors::MoveToNextSensor(I2CInterface* interface, SensorGroup* sensor_group, bool reset) {
 801a808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a80a:	e9d2 7503 	ldrd	r7, r5, [r2, #12]
	sensor_group->read_index += 1;
 801a80e:	7a16      	ldrb	r6, [r2, #8]
 801a810:	1bed      	subs	r5, r5, r7
 801a812:	4f08      	ldr	r7, [pc, #32]	@ (801a834 <_ZN7Sensors16MoveToNextSensorEP12I2CInterfaceP11SensorGroupb+0x2c>)
 801a814:	3601      	adds	r6, #1
 801a816:	10ed      	asrs	r5, r5, #3
 801a818:	b2f6      	uxtb	r6, r6
 801a81a:	437d      	muls	r5, r7
 801a81c:	7216      	strb	r6, [r2, #8]
	if (sensor_group->read_index < sensor_group->sensors.size())
 801a81e:	42ae      	cmp	r6, r5
 801a820:	d306      	bcc.n	801a830 <_ZN7Sensors16MoveToNextSensorEP12I2CInterfaceP11SensorGroupb+0x28>
		return true;

	if (reset) {
 801a822:	b11b      	cbz	r3, 801a82c <_ZN7Sensors16MoveToNextSensorEP12I2CInterfaceP11SensorGroupb+0x24>
		sensor_group->read_index = 0;
 801a824:	2300      	movs	r3, #0
 801a826:	7213      	strb	r3, [r2, #8]
		ProccessGroupTermination(interface, sensor_group);
 801a828:	f7ff fd84 	bl	801a334 <_ZN7Sensors24ProccessGroupTerminationEP12I2CInterfaceP11SensorGroup>
		return true;
 801a82c:	2000      	movs	r0, #0
	}
	return false;
}
 801a82e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
 801a830:	2001      	movs	r0, #1
 801a832:	e7fc      	b.n	801a82e <_ZN7Sensors16MoveToNextSensorEP12I2CInterfaceP11SensorGroupb+0x26>
 801a834:	cccccccd 	.word	0xcccccccd

0801a838 <_ZN7Sensors14MoveToNextDataEP6Sensorb>:
 *
 * @param input sensor: the sensor to select the next data
 * @param input reset: true to reset the sensor reading index, stop sensor processing and process sensor callback if sensor terminated
 * @return false if no other sensor data left
 */
bool Sensors::MoveToNextData(Sensor* sensor, bool reset) {
 801a838:	b538      	push	{r3, r4, r5, lr}
	sensor->read_index += 1;
 801a83a:	7c0b      	ldrb	r3, [r1, #16]
bool Sensors::MoveToNextData(Sensor* sensor, bool reset) {
 801a83c:	460c      	mov	r4, r1
 801a83e:	4817      	ldr	r0, [pc, #92]	@ (801a89c <_ZN7Sensors14MoveToNextDataEP6Sensorb+0x64>)
	sensor->read_index += 1;
 801a840:	3301      	adds	r3, #1
 801a842:	b2db      	uxtb	r3, r3
 801a844:	740b      	strb	r3, [r1, #16]
 801a846:	e9d1 5105 	ldrd	r5, r1, [r1, #20]
 801a84a:	1b49      	subs	r1, r1, r5
 801a84c:	10c9      	asrs	r1, r1, #3
 801a84e:	4341      	muls	r1, r0
	if (sensor->read_index < sensor->data.size()) {
 801a850:	428b      	cmp	r3, r1
 801a852:	d217      	bcs.n	801a884 <_ZN7Sensors14MoveToNextDataEP6Sensorb+0x4c>
	return *(this->_M_impl._M_start + __n);
 801a854:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a858:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		SensorData* sensor_data = &(sensor->data[sensor->read_index]);
		if (sensor_data->sequence.size() == 0) return true;
 801a85c:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801a860:	429a      	cmp	r2, r3
 801a862:	d00d      	beq.n	801a880 <_ZN7Sensors14MoveToNextDataEP6Sensorb+0x48>
		I2CAccess* I2C_access = &(sensor_data->sequence[0]);
		if (I2C_access->access_mode == DELAY_MODE)
 801a864:	781b      	ldrb	r3, [r3, #0]
 801a866:	2b04      	cmp	r3, #4
 801a868:	d10a      	bne.n	801a880 <_ZN7Sensors14MoveToNextDataEP6Sensorb+0x48>
			sensor->timestamp = HAL_GetTick() + sensor_data->sequence[sensor_data->read_index].delay;
 801a86a:	f7e8 fe4d 	bl	8003508 <HAL_GetTick>
 801a86e:	7a2b      	ldrb	r3, [r5, #8]
 801a870:	68ea      	ldr	r2, [r5, #12]
 801a872:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a876:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801a87a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a87c:	4403      	add	r3, r0
 801a87e:	60e3      	str	r3, [r4, #12]
		if (sensor_data->sequence.size() == 0) return true;
 801a880:	2001      	movs	r0, #1
 801a882:	e001      	b.n	801a888 <_ZN7Sensors14MoveToNextDataEP6Sensorb+0x50>
		return true;
	}

	if (reset) {
 801a884:	b90a      	cbnz	r2, 801a88a <_ZN7Sensors14MoveToNextDataEP6Sensorb+0x52>
		sensor->read_index = 0;

		// Process the callback
		if (sensor->callback != NULL) sensor->callback(sensor->context);
	}
	return false;
 801a886:	2000      	movs	r0, #0
}
 801a888:	bd38      	pop	{r3, r4, r5, pc}
		sensor->processing = false;
 801a88a:	2300      	movs	r3, #0
 801a88c:	70e3      	strb	r3, [r4, #3]
		sensor->read_index = 0;
 801a88e:	7423      	strb	r3, [r4, #16]
		if (sensor->callback != NULL) sensor->callback(sensor->context);
 801a890:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801a892:	2b00      	cmp	r3, #0
 801a894:	d0f7      	beq.n	801a886 <_ZN7Sensors14MoveToNextDataEP6Sensorb+0x4e>
 801a896:	6a20      	ldr	r0, [r4, #32]
 801a898:	4798      	blx	r3
 801a89a:	e7f4      	b.n	801a886 <_ZN7Sensors14MoveToNextDataEP6Sensorb+0x4e>
 801a89c:	aaaaaaab 	.word	0xaaaaaaab

0801a8a0 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab>:
 *
 * @param input sensor_data: the sensor data to select the next access
 * @param input reset: true to reset the sensor data reading index if sensor data terminated
 * @return false if no other access left
 */
bool Sensors::MoveToNextSequence(SensorData* sensor_data, bool reset) {
 801a8a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sensor_data->read_index += 1;
 801a8a2:	7a0b      	ldrb	r3, [r1, #8]
bool Sensors::MoveToNextSequence(SensorData* sensor_data, bool reset) {
 801a8a4:	460c      	mov	r4, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a8a6:	4e17      	ldr	r6, [pc, #92]	@ (801a904 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab+0x64>)
	sensor_data->read_index += 1;
 801a8a8:	3301      	adds	r3, #1
 801a8aa:	b2db      	uxtb	r3, r3
 801a8ac:	720b      	strb	r3, [r1, #8]
 801a8ae:	e9d1 5103 	ldrd	r5, r1, [r1, #12]
 801a8b2:	1b49      	subs	r1, r1, r5
 801a8b4:	1109      	asrs	r1, r1, #4
 801a8b6:	4371      	muls	r1, r6

	if (sensor_data->read_index < sensor_data->sequence.size()) {
 801a8b8:	428b      	cmp	r3, r1
 801a8ba:	d21b      	bcs.n	801a8f4 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab+0x54>
	return *(this->_M_impl._M_start + __n);
 801a8bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a8c0:	011b      	lsls	r3, r3, #4
		// If the next sequence is a Delay, set the end timestamp
		I2CAccess* I2C_access = &(sensor_data->sequence[sensor_data->read_index]);
		if (I2C_access->access_mode == DELAY_MODE) {
 801a8c2:	5ceb      	ldrb	r3, [r5, r3]
 801a8c4:	2b04      	cmp	r3, #4
 801a8c6:	d113      	bne.n	801a8f0 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab+0x50>
			bool success;
			Sensor* sensor = FindSensor(sensor_data->parent, &success);
 801a8c8:	f10d 0207 	add.w	r2, sp, #7
 801a8cc:	7861      	ldrb	r1, [r4, #1]
 801a8ce:	f7ff fe3d 	bl	801a54c <_ZN7Sensors10FindSensorEhPb>
			if (success)
 801a8d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
			Sensor* sensor = FindSensor(sensor_data->parent, &success);
 801a8d6:	4605      	mov	r5, r0
			if (success)
 801a8d8:	b153      	cbz	r3, 801a8f0 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab+0x50>
				sensor->timestamp = HAL_GetTick() + sensor_data->sequence[sensor_data->read_index].delay;
 801a8da:	f7e8 fe15 	bl	8003508 <HAL_GetTick>
 801a8de:	7a23      	ldrb	r3, [r4, #8]
 801a8e0:	68e2      	ldr	r2, [r4, #12]
 801a8e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a8e6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801a8ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a8ec:	4403      	add	r3, r0
 801a8ee:	60eb      	str	r3, [r5, #12]
		}
		return true;
 801a8f0:	2001      	movs	r0, #1
 801a8f2:	e001      	b.n	801a8f8 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab+0x58>
	}

	if (reset)
 801a8f4:	b912      	cbnz	r2, 801a8fc <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab+0x5c>
		sensor_data->read_index = 0;
	return false;
 801a8f6:	2000      	movs	r0, #0
}
 801a8f8:	b002      	add	sp, #8
 801a8fa:	bd70      	pop	{r4, r5, r6, pc}
		sensor_data->read_index = 0;
 801a8fc:	2300      	movs	r3, #0
 801a8fe:	7223      	strb	r3, [r4, #8]
 801a900:	e7f9      	b.n	801a8f6 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab+0x56>
 801a902:	bf00      	nop
 801a904:	cccccccd 	.word	0xcccccccd

0801a908 <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 801a908:	b570      	push	{r4, r5, r6, lr}
 801a90a:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801a90c:	e9d0 5600 	ldrd	r5, r6, [r0]
	  for (; __first != __last; ++__first)
 801a910:	42ae      	cmp	r6, r5
 801a912:	d107      	bne.n	801a924 <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev+0x1c>
	_M_deallocate(_M_impl._M_start,
 801a914:	6820      	ldr	r0, [r4, #0]
	if (__p)
 801a916:	b118      	cbz	r0, 801a920 <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801a918:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801a91a:	1a09      	subs	r1, r1, r0
 801a91c:	f003 fb50 	bl	801dfc0 <_ZdlPvj>
      }
 801a920:	4620      	mov	r0, r4
 801a922:	bd70      	pop	{r4, r5, r6, pc}
 801a924:	f105 000c 	add.w	r0, r5, #12
 801a928:	3518      	adds	r5, #24
 801a92a:	f7e7 fb63 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 801a92e:	e7ef      	b.n	801a910 <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev+0x8>

0801a930 <_ZNSt6vectorI6SensorSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 801a930:	b570      	push	{r4, r5, r6, lr}
 801a932:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801a934:	e9d0 5600 	ldrd	r5, r6, [r0]
 801a938:	42ae      	cmp	r6, r5
 801a93a:	d107      	bne.n	801a94c <_ZNSt6vectorI6SensorSaIS0_EED1Ev+0x1c>
	_M_deallocate(_M_impl._M_start,
 801a93c:	6820      	ldr	r0, [r4, #0]
	if (__p)
 801a93e:	b118      	cbz	r0, 801a948 <_ZNSt6vectorI6SensorSaIS0_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801a940:	68a1      	ldr	r1, [r4, #8]
 801a942:	1a09      	subs	r1, r1, r0
 801a944:	f003 fb3c 	bl	801dfc0 <_ZdlPvj>
      }
 801a948:	4620      	mov	r0, r4
 801a94a:	bd70      	pop	{r4, r5, r6, pc}
struct Sensor {
 801a94c:	f105 0014 	add.w	r0, r5, #20
 801a950:	3528      	adds	r5, #40	@ 0x28
 801a952:	f7ff ffd9 	bl	801a908 <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev>
 801a956:	e7ef      	b.n	801a938 <_ZNSt6vectorI6SensorSaIS0_EED1Ev+0x8>

0801a958 <_ZN12I2CInterfaceD1Ev>:
struct I2CInterface {
 801a958:	b570      	push	{r4, r5, r6, lr}
 801a95a:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801a95c:	e9d0 561c 	ldrd	r5, r6, [r0, #112]	@ 0x70
 801a960:	42ae      	cmp	r6, r5
 801a962:	d117      	bne.n	801a994 <_ZN12I2CInterfaceD1Ev+0x3c>
	_M_deallocate(_M_impl._M_start,
 801a964:	6f20      	ldr	r0, [r4, #112]	@ 0x70
	if (__p)
 801a966:	b118      	cbz	r0, 801a970 <_ZN12I2CInterfaceD1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801a968:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801a96a:	1a09      	subs	r1, r1, r0
 801a96c:	f003 fb28 	bl	801dfc0 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 801a970:	6e60      	ldr	r0, [r4, #100]	@ 0x64
	if (__p)
 801a972:	b118      	cbz	r0, 801a97c <_ZN12I2CInterfaceD1Ev+0x24>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801a974:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 801a976:	1a09      	subs	r1, r1, r0
 801a978:	f003 fb22 	bl	801dfc0 <_ZdlPvj>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801a97c:	e9d4 5616 	ldrd	r5, r6, [r4, #88]	@ 0x58
 801a980:	42ae      	cmp	r6, r5
 801a982:	d10d      	bne.n	801a9a0 <_ZN12I2CInterfaceD1Ev+0x48>
	_M_deallocate(_M_impl._M_start,
 801a984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
	if (__p)
 801a986:	b118      	cbz	r0, 801a990 <_ZN12I2CInterfaceD1Ev+0x38>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801a988:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 801a98a:	1a09      	subs	r1, r1, r0
 801a98c:	f003 fb18 	bl	801dfc0 <_ZdlPvj>
 801a990:	4620      	mov	r0, r4
 801a992:	bd70      	pop	{r4, r5, r6, pc}
      }
 801a994:	f105 0014 	add.w	r0, r5, #20
 801a998:	3520      	adds	r5, #32
 801a99a:	f7e7 fb2b 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 801a99e:	e7df      	b.n	801a960 <_ZN12I2CInterfaceD1Ev+0x8>
struct SensorGroup {
 801a9a0:	f105 000c 	add.w	r0, r5, #12
 801a9a4:	3518      	adds	r5, #24
 801a9a6:	f7ff ffc3 	bl	801a930 <_ZNSt6vectorI6SensorSaIS0_EED1Ev>
 801a9aa:	e7e9      	b.n	801a980 <_ZN12I2CInterfaceD1Ev+0x28>

0801a9ac <_ZSt14__relocate_a_1IP12I2CInterfaceS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 801a9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a9b0:	4604      	mov	r4, r0
 801a9b2:	4689      	mov	r9, r1
 801a9b4:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801a9b6:	f04f 0800 	mov.w	r8, #0
      for (; __first != __last; ++__first, (void)++__cur)
 801a9ba:	454c      	cmp	r4, r9
 801a9bc:	4628      	mov	r0, r5
 801a9be:	f105 057c 	add.w	r5, r5, #124	@ 0x7c
 801a9c2:	d101      	bne.n	801a9c8 <_ZSt14__relocate_a_1IP12I2CInterfaceS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x1c>
    }
 801a9c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
struct I2CInterface {
 801a9c8:	7823      	ldrb	r3, [r4, #0]
 801a9ca:	f104 0710 	add.w	r7, r4, #16
 801a9ce:	f1a5 066c 	sub.w	r6, r5, #108	@ 0x6c
 801a9d2:	f805 3c7c 	strb.w	r3, [r5, #-124]
 801a9d6:	7863      	ldrb	r3, [r4, #1]
 801a9d8:	f805 3c7b 	strb.w	r3, [r5, #-123]
 801a9dc:	78a3      	ldrb	r3, [r4, #2]
 801a9de:	f805 3c7a 	strb.w	r3, [r5, #-122]
 801a9e2:	6863      	ldr	r3, [r4, #4]
 801a9e4:	f845 3c78 	str.w	r3, [r5, #-120]
 801a9e8:	68a3      	ldr	r3, [r4, #8]
 801a9ea:	f845 3c74 	str.w	r3, [r5, #-116]
 801a9ee:	68e3      	ldr	r3, [r4, #12]
 801a9f0:	f845 3c70 	str.w	r3, [r5, #-112]
 801a9f4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801a9f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801a9f8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801a9fa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801a9fc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801a9fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801aa00:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801aa04:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801aa08:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
	{ __p->~_Up(); }
 801aa0c:	4620      	mov	r0, r4
 801aa0e:	f805 3c2c 	strb.w	r3, [r5, #-44]
 801aa12:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 801aa16:	f805 3c2b 	strb.w	r3, [r5, #-43]
 801aa1a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 801aa1e:	f825 3c2a 	strh.w	r3, [r5, #-42]
 801aa22:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801aa26:	f805 3c28 	strb.w	r3, [r5, #-40]
 801aa2a:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801aa2e:	f805 3c27 	strb.w	r3, [r5, #-39]
 801aa32:	f894 3056 	ldrb.w	r3, [r4, #86]	@ 0x56
 801aa36:	f805 3c26 	strb.w	r3, [r5, #-38]
 801aa3a:	f894 3057 	ldrb.w	r3, [r4, #87]	@ 0x57
 801aa3e:	f805 3c25 	strb.w	r3, [r5, #-37]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801aa42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801aa44:	f845 3c24 	str.w	r3, [r5, #-36]
 801aa48:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801aa4a:	f845 3c20 	str.w	r3, [r5, #-32]
	  _M_end_of_storage(__x._M_end_of_storage)
 801aa4e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801aa50:	f845 3c1c 	str.w	r3, [r5, #-28]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801aa54:	e9c4 8817 	strd	r8, r8, [r4, #92]	@ 0x5c
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801aa58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801aa5a:	f8c4 8058 	str.w	r8, [r4, #88]	@ 0x58
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801aa5e:	f845 3c18 	str.w	r3, [r5, #-24]
 801aa62:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801aa64:	f8c4 8064 	str.w	r8, [r4, #100]	@ 0x64
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801aa68:	f845 3c14 	str.w	r3, [r5, #-20]
	  _M_end_of_storage(__x._M_end_of_storage)
 801aa6c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 801aa6e:	f845 3c10 	str.w	r3, [r5, #-16]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801aa72:	6f23      	ldr	r3, [r4, #112]	@ 0x70
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801aa74:	f8c4 8070 	str.w	r8, [r4, #112]	@ 0x70
 801aa78:	e9c4 881a 	strd	r8, r8, [r4, #104]	@ 0x68
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801aa7c:	f845 3c0c 	str.w	r3, [r5, #-12]
 801aa80:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801aa82:	f845 3c08 	str.w	r3, [r5, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 801aa86:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801aa88:	e9c4 881d 	strd	r8, r8, [r4, #116]	@ 0x74
	  _M_end_of_storage(__x._M_end_of_storage)
 801aa8c:	f845 3c04 	str.w	r3, [r5, #-4]
      for (; __first != __last; ++__first, (void)++__cur)
 801aa90:	347c      	adds	r4, #124	@ 0x7c
 801aa92:	f7ff ff61 	bl	801a958 <_ZN12I2CInterfaceD1Ev>
 801aa96:	e790      	b.n	801a9ba <_ZSt14__relocate_a_1IP12I2CInterfaceS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xe>

0801aa98 <_ZSt14__relocate_a_1IP11SensorGroupS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 801aa98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa9a:	4604      	mov	r4, r0
 801aa9c:	460e      	mov	r6, r1
 801aa9e:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801aaa0:	2700      	movs	r7, #0
      for (; __first != __last; ++__first, (void)++__cur)
 801aaa2:	42b4      	cmp	r4, r6
 801aaa4:	4628      	mov	r0, r5
 801aaa6:	f105 0518 	add.w	r5, r5, #24
 801aaaa:	d100      	bne.n	801aaae <_ZSt14__relocate_a_1IP11SensorGroupS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x16>
    }
 801aaac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
struct SensorGroup {
 801aaae:	7823      	ldrb	r3, [r4, #0]
 801aab0:	4620      	mov	r0, r4
 801aab2:	f805 3c18 	strb.w	r3, [r5, #-24]
 801aab6:	7863      	ldrb	r3, [r4, #1]
 801aab8:	f805 3c17 	strb.w	r3, [r5, #-23]
 801aabc:	78a3      	ldrb	r3, [r4, #2]
 801aabe:	f805 3c16 	strb.w	r3, [r5, #-22]
 801aac2:	78e3      	ldrb	r3, [r4, #3]
 801aac4:	f805 3c15 	strb.w	r3, [r5, #-21]
 801aac8:	88a3      	ldrh	r3, [r4, #4]
 801aaca:	f825 3c14 	strh.w	r3, [r5, #-20]
 801aace:	88e3      	ldrh	r3, [r4, #6]
 801aad0:	f825 3c12 	strh.w	r3, [r5, #-18]
 801aad4:	7a23      	ldrb	r3, [r4, #8]
 801aad6:	f805 3c10 	strb.w	r3, [r5, #-16]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801aada:	68e3      	ldr	r3, [r4, #12]
 801aadc:	f845 3c0c 	str.w	r3, [r5, #-12]
 801aae0:	6923      	ldr	r3, [r4, #16]
 801aae2:	f845 3c08 	str.w	r3, [r5, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 801aae6:	6963      	ldr	r3, [r4, #20]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801aae8:	e9c4 7704 	strd	r7, r7, [r4, #16]
	  _M_end_of_storage(__x._M_end_of_storage)
 801aaec:	f845 3c04 	str.w	r3, [r5, #-4]
      for (; __first != __last; ++__first, (void)++__cur)
 801aaf0:	3418      	adds	r4, #24
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801aaf2:	f840 7f0c 	str.w	r7, [r0, #12]!
 801aaf6:	f7ff ff1b 	bl	801a930 <_ZNSt6vectorI6SensorSaIS0_EED1Ev>
 801aafa:	e7d2      	b.n	801aaa2 <_ZSt14__relocate_a_1IP11SensorGroupS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>

0801aafc <_ZSt14__relocate_a_1IP6SensorS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 801aafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aafe:	4604      	mov	r4, r0
 801ab00:	460e      	mov	r6, r1
 801ab02:	4615      	mov	r5, r2
 801ab04:	2700      	movs	r7, #0
      for (; __first != __last; ++__first, (void)++__cur)
 801ab06:	42b4      	cmp	r4, r6
 801ab08:	4628      	mov	r0, r5
 801ab0a:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 801ab0e:	d100      	bne.n	801ab12 <_ZSt14__relocate_a_1IP6SensorS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x16>
    }
 801ab10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
struct Sensor {
 801ab12:	7823      	ldrb	r3, [r4, #0]
 801ab14:	f104 0014 	add.w	r0, r4, #20
 801ab18:	f805 3c28 	strb.w	r3, [r5, #-40]
 801ab1c:	7863      	ldrb	r3, [r4, #1]
 801ab1e:	f805 3c27 	strb.w	r3, [r5, #-39]
 801ab22:	78a3      	ldrb	r3, [r4, #2]
 801ab24:	f805 3c26 	strb.w	r3, [r5, #-38]
 801ab28:	78e3      	ldrb	r3, [r4, #3]
 801ab2a:	f805 3c25 	strb.w	r3, [r5, #-37]
 801ab2e:	7923      	ldrb	r3, [r4, #4]
 801ab30:	f805 3c24 	strb.w	r3, [r5, #-36]
 801ab34:	88e3      	ldrh	r3, [r4, #6]
 801ab36:	f825 3c22 	strh.w	r3, [r5, #-34]
 801ab3a:	8923      	ldrh	r3, [r4, #8]
 801ab3c:	f825 3c20 	strh.w	r3, [r5, #-32]
 801ab40:	68e3      	ldr	r3, [r4, #12]
 801ab42:	f845 3c1c 	str.w	r3, [r5, #-28]
 801ab46:	7c23      	ldrb	r3, [r4, #16]
 801ab48:	f805 3c18 	strb.w	r3, [r5, #-24]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801ab4c:	6963      	ldr	r3, [r4, #20]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801ab4e:	6167      	str	r7, [r4, #20]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801ab50:	f845 3c14 	str.w	r3, [r5, #-20]
 801ab54:	69a3      	ldr	r3, [r4, #24]
 801ab56:	f845 3c10 	str.w	r3, [r5, #-16]
	  _M_end_of_storage(__x._M_end_of_storage)
 801ab5a:	69e3      	ldr	r3, [r4, #28]
 801ab5c:	f845 3c0c 	str.w	r3, [r5, #-12]
 801ab60:	6a23      	ldr	r3, [r4, #32]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801ab62:	e9c4 7706 	strd	r7, r7, [r4, #24]
 801ab66:	f845 3c08 	str.w	r3, [r5, #-8]
      for (; __first != __last; ++__first, (void)++__cur)
 801ab6a:	3428      	adds	r4, #40	@ 0x28
 801ab6c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801ab70:	f845 3c04 	str.w	r3, [r5, #-4]
 801ab74:	f7ff fec8 	bl	801a908 <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev>
 801ab78:	e7c5      	b.n	801ab06 <_ZSt14__relocate_a_1IP6SensorS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>

0801ab7a <_ZNSt6vectorI11ReadRequestSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE.isra.0>:
      erase(const_iterator __position)
 801ab7a:	b5f0      	push	{r4, r5, r6, r7, lr}
      { return __normal_iterator(_M_current + __n); }
 801ab7c:	f101 0420 	add.w	r4, r1, #32
      : _M_current(__i) { }
 801ab80:	6845      	ldr	r5, [r0, #4]
 801ab82:	b085      	sub	sp, #20
 801ab84:	4606      	mov	r6, r0
      if (__position + 1 != end())
 801ab86:	42ac      	cmp	r4, r5
 801ab88:	d108      	bne.n	801ab9c <_ZNSt6vectorI11ReadRequestSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE.isra.0+0x22>
      --this->_M_impl._M_finish;
 801ab8a:	6870      	ldr	r0, [r6, #4]
 801ab8c:	f1a0 0320 	sub.w	r3, r0, #32
      }
 801ab90:	380c      	subs	r0, #12
 801ab92:	6073      	str	r3, [r6, #4]
 801ab94:	f7e7 fa2e 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
      { return _M_erase(begin() + (__position - cbegin())); }
 801ab98:	b005      	add	sp, #20
 801ab9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801ab9c:	1b2d      	subs	r5, r5, r4
	  _M_start = __x._M_start;
 801ab9e:	2700      	movs	r7, #0
 801aba0:	116d      	asrs	r5, r5, #5
 801aba2:	2d00      	cmp	r5, #0
 801aba4:	f104 0420 	add.w	r4, r4, #32
 801aba8:	ddef      	ble.n	801ab8a <_ZNSt6vectorI11ReadRequestSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE.isra.0+0x10>
struct ReadRequest {
 801abaa:	f814 3c20 	ldrb.w	r3, [r4, #-32]
 801abae:	3d01      	subs	r5, #1
 801abb0:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 801abb4:	f804 3c40 	strb.w	r3, [r4, #-64]
 801abb8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 801abbc:	f844 3c3c 	str.w	r3, [r4, #-60]
struct SensorData {
 801abc0:	f814 3c18 	ldrb.w	r3, [r4, #-24]
 801abc4:	f804 3c38 	strb.w	r3, [r4, #-56]
 801abc8:	f814 3c17 	ldrb.w	r3, [r4, #-23]
 801abcc:	f804 3c37 	strb.w	r3, [r4, #-55]
 801abd0:	f814 3c16 	ldrb.w	r3, [r4, #-22]
 801abd4:	f804 3c36 	strb.w	r3, [r4, #-54]
 801abd8:	f834 3c14 	ldrh.w	r3, [r4, #-20]
 801abdc:	f824 3c34 	strh.w	r3, [r4, #-52]
 801abe0:	f814 3c12 	ldrb.w	r3, [r4, #-18]
 801abe4:	f804 3c32 	strb.w	r3, [r4, #-50]
 801abe8:	f814 3c11 	ldrb.w	r3, [r4, #-17]
	  _M_finish = __x._M_finish;
 801abec:	e954 120b 	ldrd	r1, r2, [r4, #-44]	@ 0x2c
	  _M_start = __x._M_start;
 801abf0:	f844 0c2c 	str.w	r0, [r4, #-44]
	  _M_finish = __x._M_finish;
 801abf4:	f854 0c08 	ldr.w	r0, [r4, #-8]
 801abf8:	f804 3c31 	strb.w	r3, [r4, #-49]
 801abfc:	f814 3c10 	ldrb.w	r3, [r4, #-16]
 801ac00:	f844 0c28 	str.w	r0, [r4, #-40]
	  _M_end_of_storage = __x._M_end_of_storage;
 801ac04:	f854 0c04 	ldr.w	r0, [r4, #-4]
 801ac08:	f804 3c30 	strb.w	r3, [r4, #-48]
 801ac0c:	f854 3c24 	ldr.w	r3, [r4, #-36]
 801ac10:	f844 0c24 	str.w	r0, [r4, #-36]
      }
 801ac14:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 801ac16:	9303      	str	r3, [sp, #12]
	  _M_finish = __x._M_finish;
 801ac18:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801ac1c:	e944 7703 	strd	r7, r7, [r4, #-12]
	  _M_end_of_storage = __x._M_end_of_storage;
 801ac20:	f844 7c04 	str.w	r7, [r4, #-4]
      }
 801ac24:	f7e7 f9e6 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 801ac28:	e7bb      	b.n	801aba2 <_ZNSt6vectorI11ReadRequestSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE.isra.0+0x28>
	...

0801ac2c <_ZNSt6vectorIP6SensorSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 801ac2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801ac30:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
      push_back(const value_type& __x)
 801ac34:	4604      	mov	r4, r0
 801ac36:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801ac38:	4293      	cmp	r3, r2
 801ac3a:	d005      	beq.n	801ac48 <_ZNSt6vectorIP6SensorSaIS1_EE9push_backERKS1_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801ac3c:	680a      	ldr	r2, [r1, #0]
 801ac3e:	f843 2b04 	str.w	r2, [r3], #4
	    ++this->_M_impl._M_finish;
 801ac42:	6043      	str	r3, [r0, #4]
      }
 801ac44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ac48:	f8d0 8000 	ldr.w	r8, [r0]
	if (max_size() - size() < __n)
 801ac4c:	f06f 4760 	mvn.w	r7, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ac50:	eba3 0508 	sub.w	r5, r3, r8
	if (max_size() - size() < __n)
 801ac54:	ebb7 0fa5 	cmp.w	r7, r5, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ac58:	ea4f 02a5 	mov.w	r2, r5, asr #2
	if (max_size() - size() < __n)
 801ac5c:	d102      	bne.n	801ac64 <_ZNSt6vectorIP6SensorSaIS1_EE9push_backERKS1_+0x38>
	  __throw_length_error(__N(__s));
 801ac5e:	4815      	ldr	r0, [pc, #84]	@ (801acb4 <_ZNSt6vectorIP6SensorSaIS1_EE9push_backERKS1_+0x88>)
 801ac60:	f003 fa88 	bl	801e174 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 801ac64:	4543      	cmp	r3, r8
 801ac66:	bf14      	ite	ne
 801ac68:	4611      	movne	r1, r2
 801ac6a:	2101      	moveq	r1, #1
 801ac6c:	1852      	adds	r2, r2, r1
 801ac6e:	d202      	bcs.n	801ac76 <_ZNSt6vectorIP6SensorSaIS1_EE9push_backERKS1_+0x4a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801ac70:	4297      	cmp	r7, r2
 801ac72:	bf28      	it	cs
 801ac74:	4617      	movcs	r7, r2
      pointer __new_start(this->_M_allocate(__len));
 801ac76:	4638      	mov	r0, r7
 801ac78:	f7fe ffde 	bl	8019c38 <_ZNSt12_Vector_baseIP6SensorSaIS1_EE11_M_allocateEj.isra.0>
 801ac7c:	f8d9 3000 	ldr.w	r3, [r9]
      if (__count > 0)
 801ac80:	2d00      	cmp	r5, #0
 801ac82:	4606      	mov	r6, r0
 801ac84:	5143      	str	r3, [r0, r5]
 801ac86:	dd03      	ble.n	801ac90 <_ZNSt6vectorIP6SensorSaIS1_EE9push_backERKS1_+0x64>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801ac88:	462a      	mov	r2, r5
 801ac8a:	4641      	mov	r1, r8
 801ac8c:	f004 f93a 	bl	801ef04 <memmove>
	      ++__new_finish;
 801ac90:	3504      	adds	r5, #4
 801ac92:	4435      	add	r5, r6
	if (__p)
 801ac94:	f1b8 0f00 	cmp.w	r8, #0
 801ac98:	d005      	beq.n	801aca6 <_ZNSt6vectorIP6SensorSaIS1_EE9push_backERKS1_+0x7a>
		    this->_M_impl._M_end_of_storage - __old_start);
 801ac9a:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801ac9c:	4640      	mov	r0, r8
 801ac9e:	eba1 0108 	sub.w	r1, r1, r8
 801aca2:	f003 f98d 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 801aca6:	e9c4 6500 	strd	r6, r5, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801acaa:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 801acae:	60a6      	str	r6, [r4, #8]
      }
 801acb0:	e7c8      	b.n	801ac44 <_ZNSt6vectorIP6SensorSaIS1_EE9push_backERKS1_+0x18>
 801acb2:	bf00      	nop
 801acb4:	0801f20c 	.word	0x0801f20c

0801acb8 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess>:
void Sensors::ProcessAccess(I2CInterface* interface, SensorGroup* sensor_group, Sensor* sensor, SensorData* sensor_data, I2CAccess* I2C_access) {
 801acb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801acbc:	b087      	sub	sp, #28
 801acbe:	4606      	mov	r6, r0
 801acc0:	460d      	mov	r5, r1
 801acc2:	4690      	mov	r8, r2
 801acc4:	af02      	add	r7, sp, #8
 801acc6:	e9d7 940c 	ldrd	r9, r4, [r7, #48]	@ 0x30
 801acca:	607b      	str	r3, [r7, #4]
	if (I2C_access->access_mode == DELAY_MODE) {
 801accc:	7823      	ldrb	r3, [r4, #0]
 801acce:	2b04      	cmp	r3, #4
 801acd0:	d12c      	bne.n	801ad2c <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x74>
		sensor->timestamp = HAL_GetTick() + I2C_access->delay;
 801acd2:	f7e8 fc19 	bl	8003508 <HAL_GetTick>
 801acd6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 801acd8:	687a      	ldr	r2, [r7, #4]
 801acda:	4403      	add	r3, r0
 801acdc:	60d3      	str	r3, [r2, #12]
		if (interface->access_source == REGULAR_ACCESS) {
 801acde:	f895 3054 	ldrb.w	r3, [r5, #84]	@ 0x54
 801ace2:	b9f3      	cbnz	r3, 801ad22 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x6a>
			interface->pending_sensors.push_back(sensor);
 801ace4:	1d39      	adds	r1, r7, #4
 801ace6:	f105 0064 	add.w	r0, r5, #100	@ 0x64
 801acea:	f7ff ff9f 	bl	801ac2c <_ZNSt6vectorIP6SensorSaIS1_EE9push_backERKS1_>
			if (MoveToNextSensor(interface, sensor_group)) {return ReadNextSensor(interface->ID);}
 801acee:	2301      	movs	r3, #1
 801acf0:	4642      	mov	r2, r8
 801acf2:	4629      	mov	r1, r5
 801acf4:	4630      	mov	r0, r6
 801acf6:	f7ff fd87 	bl	801a808 <_ZN7Sensors16MoveToNextSensorEP12I2CInterfaceP11SensorGroupb>
 801acfa:	b138      	cbz	r0, 801ad0c <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x54>
			if (MoveToNextGroup(interface)) {return ReadNextSensor(interface->ID);}
 801acfc:	7829      	ldrb	r1, [r5, #0]
 801acfe:	4630      	mov	r0, r6
 801ad00:	f000 f95e 	bl	801afc0 <_ZN7Sensors14ReadNextSensorEh>
}
 801ad04:	3714      	adds	r7, #20
 801ad06:	46bd      	mov	sp, r7
 801ad08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (MoveToNextGroup(interface)) {return ReadNextSensor(interface->ID);}
 801ad0c:	2201      	movs	r2, #1
 801ad0e:	4629      	mov	r1, r5
 801ad10:	4630      	mov	r0, r6
 801ad12:	f7ff fd5f 	bl	801a7d4 <_ZN7Sensors15MoveToNextGroupEP12I2CInterfaceb>
 801ad16:	2800      	cmp	r0, #0
 801ad18:	d1f0      	bne.n	801acfc <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x44>
			return ExitRegular(interface);
 801ad1a:	4630      	mov	r0, r6
 801ad1c:	f000 fb38 	bl	801b390 <_ZN7Sensors11ExitRegularEP12I2CInterface>
 801ad20:	e7f0      	b.n	801ad04 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x4c>
			return ExitPending(interface);
 801ad22:	4629      	mov	r1, r5
 801ad24:	4630      	mov	r0, r6
 801ad26:	f000 fc3d 	bl	801b5a4 <_ZN7Sensors11ExitPendingEP12I2CInterface>
 801ad2a:	e7eb      	b.n	801ad04 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x4c>
	} else if (I2C_access->access_mode == WRITE_MODE) {
 801ad2c:	2b03      	cmp	r3, #3
 801ad2e:	d838      	bhi.n	801ada2 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0xea>
 801ad30:	e8df f003 	tbb	[pc, r3]
 801ad34:	21022a15 	.word	0x21022a15
		status = HAL_I2C_Master_Transmit_DMA(interface->interface, sensor->address, I2C_access->write_data, I2C_access->size);
 801ad38:	6879      	ldr	r1, [r7, #4]
 801ad3a:	1da2      	adds	r2, r4, #6
 801ad3c:	8863      	ldrh	r3, [r4, #2]
 801ad3e:	88c9      	ldrh	r1, [r1, #6]
 801ad40:	68e8      	ldr	r0, [r5, #12]
 801ad42:	f7ec f94f 	bl	8006fe4 <HAL_I2C_Master_Transmit_DMA>
	if (status == HAL_BUSY)
 801ad46:	2802      	cmp	r0, #2
 801ad48:	f040 8133 	bne.w	801afb2 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x2fa>
		return ProcessAccess(interface, sensor_group, sensor, sensor_data, I2C_access);
 801ad4c:	4642      	mov	r2, r8
 801ad4e:	4629      	mov	r1, r5
 801ad50:	4630      	mov	r0, r6
 801ad52:	e9cd 9400 	strd	r9, r4, [sp]
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	f7ff ffae 	bl	801acb8 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess>
 801ad5c:	e7d2      	b.n	801ad04 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x4c>
		status = HAL_I2C_Mem_Write_DMA(interface->interface, sensor->address, I2C_access->memory_address, sensor->memory_address_size, I2C_access->write_data, I2C_access->size);
 801ad5e:	6879      	ldr	r1, [r7, #4]
 801ad60:	8860      	ldrh	r0, [r4, #2]
 801ad62:	890b      	ldrh	r3, [r1, #8]
 801ad64:	88a2      	ldrh	r2, [r4, #4]
 801ad66:	88c9      	ldrh	r1, [r1, #6]
 801ad68:	9001      	str	r0, [sp, #4]
 801ad6a:	1da0      	adds	r0, r4, #6
 801ad6c:	9000      	str	r0, [sp, #0]
 801ad6e:	68e8      	ldr	r0, [r5, #12]
 801ad70:	f7ec fb60 	bl	8007434 <HAL_I2C_Mem_Write_DMA>
 801ad74:	e7e7      	b.n	801ad46 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x8e>
		status = HAL_I2C_Master_Receive_DMA(interface->interface, sensor->address, interface->buffer, I2C_access->size);
 801ad76:	f101 0210 	add.w	r2, r1, #16
 801ad7a:	6879      	ldr	r1, [r7, #4]
 801ad7c:	8863      	ldrh	r3, [r4, #2]
 801ad7e:	88c9      	ldrh	r1, [r1, #6]
 801ad80:	68e8      	ldr	r0, [r5, #12]
 801ad82:	f7ec f9d9 	bl	8007138 <HAL_I2C_Master_Receive_DMA>
 801ad86:	e7de      	b.n	801ad46 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x8e>
		status = HAL_I2C_Mem_Read_DMA(interface->interface, sensor->address, I2C_access->memory_address, sensor->memory_address_size, interface->buffer, I2C_access->size);
 801ad88:	6879      	ldr	r1, [r7, #4]
 801ad8a:	8860      	ldrh	r0, [r4, #2]
 801ad8c:	890b      	ldrh	r3, [r1, #8]
 801ad8e:	88a2      	ldrh	r2, [r4, #4]
 801ad90:	88c9      	ldrh	r1, [r1, #6]
 801ad92:	9001      	str	r0, [sp, #4]
 801ad94:	f105 0010 	add.w	r0, r5, #16
 801ad98:	9000      	str	r0, [sp, #0]
 801ad9a:	68e8      	ldr	r0, [r5, #12]
 801ad9c:	f7ec fbfe 	bl	800759c <HAL_I2C_Mem_Read_DMA>
 801ada0:	e7d1      	b.n	801ad46 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x8e>
		switch (sensor_data->type) {
 801ada2:	f899 3007 	ldrb.w	r3, [r9, #7]
 801ada6:	2b08      	cmp	r3, #8
 801ada8:	d835      	bhi.n	801ae16 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x15e>
 801adaa:	e8df f003 	tbb	[pc, r3]
 801adae:	3f05      	.short	0x3f05
 801adb0:	34349d6e 	.word	0x34349d6e
 801adb4:	3434      	.short	0x3434
 801adb6:	cf          	.byte	0xcf
 801adb7:	00          	.byte	0x00
 * @param input I2C_access: access to process
 */
template<typename T>
void Sensors::ProcessCode(I2CInterface* interface, SensorData* sensor_data, I2CAccess* I2C_access) {
	// Check that the type is supported by custom functions
	if (functions[sensor_data->type] == NULL)
 801adb8:	6d83      	ldr	r3, [r0, #88]	@ 0x58

	// Transfer to interface buffer. Mirror required
	for (uint8_t index = 0; index < I2C_access->size; index++) {
		interface->buffer[index] = array_output[I2C_access->size - 1 - index];
	}
}
 801adba:	46e8      	mov	r8, sp
	if (functions[sensor_data->type] == NULL)
 801adbc:	b33b      	cbz	r3, 801ae0e <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x156>
	SensorFunction<T> sensor_function = reinterpreted_functions->at(I2C_access->function_index);
 801adbe:	f894 104c 	ldrb.w	r1, [r4, #76]	@ 0x4c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801adc2:	e9d3 0300 	ldrd	r0, r3, [r3]
 801adc6:	1a1b      	subs	r3, r3, r0
	if (__n >= this->size())
 801adc8:	ebb1 0fe3 	cmp.w	r1, r3, asr #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801adcc:	ea4f 02e3 	mov.w	r2, r3, asr #3
	if (__n >= this->size())
 801add0:	d302      	bcc.n	801add8 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x120>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801add2:	487a      	ldr	r0, [pc, #488]	@ (801afbc <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x304>)
 801add4:	f003 f9d1 	bl	801e17a <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 801add8:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	T code_output = sensor_function.function(sensor_function.context);
 801addc:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
 801ade0:	685b      	ldr	r3, [r3, #4]
 801ade2:	4798      	blx	r3
	uint8_t array_output[I2C_access->size];
 801ade4:	8862      	ldrh	r2, [r4, #2]
	std::memcpy(&array_output[0], &code_output, I2C_access->size);
 801ade6:	f107 0108 	add.w	r1, r7, #8
	T code_output = sensor_function.function(sensor_function.context);
 801adea:	7238      	strb	r0, [r7, #8]
	uint8_t array_output[I2C_access->size];
 801adec:	1dd3      	adds	r3, r2, #7
 801adee:	08db      	lsrs	r3, r3, #3
 801adf0:	eba8 03c3 	sub.w	r3, r8, r3, lsl #3
 801adf4:	469d      	mov	sp, r3
 801adf6:	f10d 0908 	add.w	r9, sp, #8
	std::memcpy(&array_output[0], &code_output, I2C_access->size);
 801adfa:	4648      	mov	r0, r9
 801adfc:	f004 f97a 	bl	801f0f4 <memcpy>
	for (uint8_t index = 0; index < I2C_access->size; index++) {
 801ae00:	2100      	movs	r1, #0
 801ae02:	b2ca      	uxtb	r2, r1
 801ae04:	8863      	ldrh	r3, [r4, #2]
 801ae06:	3101      	adds	r1, #1
 801ae08:	4293      	cmp	r3, r2
 801ae0a:	dc08      	bgt.n	801ae1e <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x166>
 801ae0c:	46c5      	mov	sp, r8
		ProccessReceivedData(interface);
 801ae0e:	4629      	mov	r1, r5
 801ae10:	4630      	mov	r0, r6
 801ae12:	f000 fbd7 	bl	801b5c4 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface>
	osSemaphoreRelease(SensorsSemaphore);
 801ae16:	6830      	ldr	r0, [r6, #0]
 801ae18:	f7f2 f85a 	bl	800ced0 <osSemaphoreRelease>
 801ae1c:	e772      	b.n	801ad04 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x4c>
		interface->buffer[index] = array_output[I2C_access->size - 1 - index];
 801ae1e:	3b01      	subs	r3, #1
 801ae20:	18a8      	adds	r0, r5, r2
 801ae22:	1a9b      	subs	r3, r3, r2
 801ae24:	f819 3003 	ldrb.w	r3, [r9, r3]
 801ae28:	7403      	strb	r3, [r0, #16]
	for (uint8_t index = 0; index < I2C_access->size; index++) {
 801ae2a:	e7ea      	b.n	801ae02 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x14a>
	if (functions[sensor_data->type] == NULL)
 801ae2c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
}
 801ae2e:	46e8      	mov	r8, sp
	if (functions[sensor_data->type] == NULL)
 801ae30:	2b00      	cmp	r3, #0
 801ae32:	d0ec      	beq.n	801ae0e <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x156>
	SensorFunction<T> sensor_function = reinterpreted_functions->at(I2C_access->function_index);
 801ae34:	f894 104c 	ldrb.w	r1, [r4, #76]	@ 0x4c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ae38:	e9d3 0300 	ldrd	r0, r3, [r3]
 801ae3c:	1a1b      	subs	r3, r3, r0
	if (__n >= this->size())
 801ae3e:	ebb1 0fe3 	cmp.w	r1, r3, asr #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ae42:	ea4f 02e3 	mov.w	r2, r3, asr #3
	if (__n >= this->size())
 801ae46:	d2c4      	bcs.n	801add2 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x11a>
	return *(this->_M_impl._M_start + __n);
 801ae48:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	T code_output = sensor_function.function(sensor_function.context);
 801ae4c:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
 801ae50:	685b      	ldr	r3, [r3, #4]
 801ae52:	4798      	blx	r3
	uint8_t array_output[I2C_access->size];
 801ae54:	8862      	ldrh	r2, [r4, #2]
	std::memcpy(&array_output[0], &code_output, I2C_access->size);
 801ae56:	f107 0108 	add.w	r1, r7, #8
	T code_output = sensor_function.function(sensor_function.context);
 801ae5a:	8138      	strh	r0, [r7, #8]
	uint8_t array_output[I2C_access->size];
 801ae5c:	1dd3      	adds	r3, r2, #7
 801ae5e:	08db      	lsrs	r3, r3, #3
 801ae60:	eba8 03c3 	sub.w	r3, r8, r3, lsl #3
 801ae64:	469d      	mov	sp, r3
 801ae66:	f10d 0908 	add.w	r9, sp, #8
	std::memcpy(&array_output[0], &code_output, I2C_access->size);
 801ae6a:	4648      	mov	r0, r9
 801ae6c:	f004 f942 	bl	801f0f4 <memcpy>
	for (uint8_t index = 0; index < I2C_access->size; index++) {
 801ae70:	2100      	movs	r1, #0
 801ae72:	b2ca      	uxtb	r2, r1
 801ae74:	8863      	ldrh	r3, [r4, #2]
 801ae76:	3101      	adds	r1, #1
 801ae78:	4293      	cmp	r3, r2
 801ae7a:	ddc7      	ble.n	801ae0c <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x154>
		interface->buffer[index] = array_output[I2C_access->size - 1 - index];
 801ae7c:	3b01      	subs	r3, #1
 801ae7e:	18a8      	adds	r0, r5, r2
 801ae80:	1a9b      	subs	r3, r3, r2
 801ae82:	f819 3003 	ldrb.w	r3, [r9, r3]
 801ae86:	7403      	strb	r3, [r0, #16]
	for (uint8_t index = 0; index < I2C_access->size; index++) {
 801ae88:	e7f3      	b.n	801ae72 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x1ba>
	if (functions[sensor_data->type] == NULL)
 801ae8a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
}
 801ae8c:	46e8      	mov	r8, sp
	if (functions[sensor_data->type] == NULL)
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d0bd      	beq.n	801ae0e <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x156>
	SensorFunction<T> sensor_function = reinterpreted_functions->at(I2C_access->function_index);
 801ae92:	f894 104c 	ldrb.w	r1, [r4, #76]	@ 0x4c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ae96:	e9d3 0300 	ldrd	r0, r3, [r3]
 801ae9a:	1a1b      	subs	r3, r3, r0
	if (__n >= this->size())
 801ae9c:	ebb1 0fe3 	cmp.w	r1, r3, asr #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801aea0:	ea4f 02e3 	mov.w	r2, r3, asr #3
	if (__n >= this->size())
 801aea4:	d295      	bcs.n	801add2 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x11a>
	return *(this->_M_impl._M_start + __n);
 801aea6:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	T code_output = sensor_function.function(sensor_function.context);
 801aeaa:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
 801aeae:	685b      	ldr	r3, [r3, #4]
 801aeb0:	4798      	blx	r3
	uint8_t array_output[I2C_access->size];
 801aeb2:	8862      	ldrh	r2, [r4, #2]
	std::memcpy(&array_output[0], &code_output, I2C_access->size);
 801aeb4:	f107 0108 	add.w	r1, r7, #8
	T code_output = sensor_function.function(sensor_function.context);
 801aeb8:	60b8      	str	r0, [r7, #8]
	uint8_t array_output[I2C_access->size];
 801aeba:	1dd3      	adds	r3, r2, #7
 801aebc:	08db      	lsrs	r3, r3, #3
 801aebe:	eba8 03c3 	sub.w	r3, r8, r3, lsl #3
 801aec2:	469d      	mov	sp, r3
 801aec4:	f10d 0908 	add.w	r9, sp, #8
	std::memcpy(&array_output[0], &code_output, I2C_access->size);
 801aec8:	4648      	mov	r0, r9
 801aeca:	f004 f913 	bl	801f0f4 <memcpy>
	for (uint8_t index = 0; index < I2C_access->size; index++) {
 801aece:	2100      	movs	r1, #0
 801aed0:	b2ca      	uxtb	r2, r1
 801aed2:	8863      	ldrh	r3, [r4, #2]
 801aed4:	3101      	adds	r1, #1
 801aed6:	4293      	cmp	r3, r2
 801aed8:	dd98      	ble.n	801ae0c <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x154>
		interface->buffer[index] = array_output[I2C_access->size - 1 - index];
 801aeda:	3b01      	subs	r3, #1
 801aedc:	18a8      	adds	r0, r5, r2
 801aede:	1a9b      	subs	r3, r3, r2
 801aee0:	f819 3003 	ldrb.w	r3, [r9, r3]
 801aee4:	7403      	strb	r3, [r0, #16]
	for (uint8_t index = 0; index < I2C_access->size; index++) {
 801aee6:	e7f3      	b.n	801aed0 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x218>
	if (functions[sensor_data->type] == NULL)
 801aee8:	6e43      	ldr	r3, [r0, #100]	@ 0x64
}
 801aeea:	46e8      	mov	r8, sp
	if (functions[sensor_data->type] == NULL)
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d08e      	beq.n	801ae0e <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x156>
	SensorFunction<T> sensor_function = reinterpreted_functions->at(I2C_access->function_index);
 801aef0:	f894 104c 	ldrb.w	r1, [r4, #76]	@ 0x4c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801aef4:	e9d3 0300 	ldrd	r0, r3, [r3]
 801aef8:	1a1b      	subs	r3, r3, r0
	if (__n >= this->size())
 801aefa:	ebb1 0fe3 	cmp.w	r1, r3, asr #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801aefe:	ea4f 02e3 	mov.w	r2, r3, asr #3
	if (__n >= this->size())
 801af02:	f4bf af66 	bcs.w	801add2 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x11a>
	return *(this->_M_impl._M_start + __n);
 801af06:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	T code_output = sensor_function.function(sensor_function.context);
 801af0a:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
 801af0e:	685b      	ldr	r3, [r3, #4]
 801af10:	4798      	blx	r3
	uint8_t array_output[I2C_access->size];
 801af12:	8862      	ldrh	r2, [r4, #2]
 801af14:	1dd3      	adds	r3, r2, #7
 801af16:	08db      	lsrs	r3, r3, #3
 801af18:	eba8 03c3 	sub.w	r3, r8, r3, lsl #3
 801af1c:	469d      	mov	sp, r3
 801af1e:	f10d 0908 	add.w	r9, sp, #8
	T code_output = sensor_function.function(sensor_function.context);
 801af22:	e9c7 0102 	strd	r0, r1, [r7, #8]
	std::memcpy(&array_output[0], &code_output, I2C_access->size);
 801af26:	f107 0108 	add.w	r1, r7, #8
 801af2a:	4648      	mov	r0, r9
 801af2c:	f004 f8e2 	bl	801f0f4 <memcpy>
	for (uint8_t index = 0; index < I2C_access->size; index++) {
 801af30:	2100      	movs	r1, #0
 801af32:	b2ca      	uxtb	r2, r1
 801af34:	8863      	ldrh	r3, [r4, #2]
 801af36:	3101      	adds	r1, #1
 801af38:	4293      	cmp	r3, r2
 801af3a:	f77f af67 	ble.w	801ae0c <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x154>
		interface->buffer[index] = array_output[I2C_access->size - 1 - index];
 801af3e:	3b01      	subs	r3, #1
 801af40:	18a8      	adds	r0, r5, r2
 801af42:	1a9b      	subs	r3, r3, r2
 801af44:	f819 3003 	ldrb.w	r3, [r9, r3]
 801af48:	7403      	strb	r3, [r0, #16]
	for (uint8_t index = 0; index < I2C_access->size; index++) {
 801af4a:	e7f2      	b.n	801af32 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x27a>
	if (functions[sensor_data->type] == NULL)
 801af4c:	6f83      	ldr	r3, [r0, #120]	@ 0x78
}
 801af4e:	46e8      	mov	r8, sp
	if (functions[sensor_data->type] == NULL)
 801af50:	2b00      	cmp	r3, #0
 801af52:	f43f af5c 	beq.w	801ae0e <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x156>
	SensorFunction<T> sensor_function = reinterpreted_functions->at(I2C_access->function_index);
 801af56:	f894 104c 	ldrb.w	r1, [r4, #76]	@ 0x4c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801af5a:	e9d3 0300 	ldrd	r0, r3, [r3]
 801af5e:	1a1b      	subs	r3, r3, r0
	if (__n >= this->size())
 801af60:	ebb1 0fe3 	cmp.w	r1, r3, asr #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801af64:	ea4f 02e3 	mov.w	r2, r3, asr #3
	if (__n >= this->size())
 801af68:	f4bf af33 	bcs.w	801add2 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x11a>
	return *(this->_M_impl._M_start + __n);
 801af6c:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	T code_output = sensor_function.function(sensor_function.context);
 801af70:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
 801af74:	685b      	ldr	r3, [r3, #4]
 801af76:	4798      	blx	r3
	uint8_t array_output[I2C_access->size];
 801af78:	8862      	ldrh	r2, [r4, #2]
	std::memcpy(&array_output[0], &code_output, I2C_access->size);
 801af7a:	f107 0108 	add.w	r1, r7, #8
	T code_output = sensor_function.function(sensor_function.context);
 801af7e:	ed87 0a02 	vstr	s0, [r7, #8]
	uint8_t array_output[I2C_access->size];
 801af82:	1dd3      	adds	r3, r2, #7
 801af84:	08db      	lsrs	r3, r3, #3
 801af86:	eba8 03c3 	sub.w	r3, r8, r3, lsl #3
 801af8a:	469d      	mov	sp, r3
 801af8c:	f10d 0908 	add.w	r9, sp, #8
	std::memcpy(&array_output[0], &code_output, I2C_access->size);
 801af90:	4648      	mov	r0, r9
 801af92:	f004 f8af 	bl	801f0f4 <memcpy>
	for (uint8_t index = 0; index < I2C_access->size; index++) {
 801af96:	2100      	movs	r1, #0
 801af98:	b2ca      	uxtb	r2, r1
 801af9a:	8863      	ldrh	r3, [r4, #2]
 801af9c:	3101      	adds	r1, #1
 801af9e:	4293      	cmp	r3, r2
 801afa0:	f77f af34 	ble.w	801ae0c <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x154>
		interface->buffer[index] = array_output[I2C_access->size - 1 - index];
 801afa4:	3b01      	subs	r3, #1
 801afa6:	18a8      	adds	r0, r5, r2
 801afa8:	1a9b      	subs	r3, r3, r2
 801afaa:	f819 3003 	ldrb.w	r3, [r9, r3]
 801afae:	7403      	strb	r3, [r0, #16]
	for (uint8_t index = 0; index < I2C_access->size; index++) {
 801afb0:	e7f2      	b.n	801af98 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x2e0>
	if (status == HAL_ERROR)
 801afb2:	2801      	cmp	r0, #1
		interface->error_flag = true;
 801afb4:	bf08      	it	eq
 801afb6:	70a8      	strbeq	r0, [r5, #2]
 801afb8:	e72d      	b.n	801ae16 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x15e>
 801afba:	bf00      	nop
 801afbc:	0801f44c 	.word	0x0801f44c

0801afc0 <_ZN7Sensors14ReadNextSensorEh>:
void Sensors::ReadNextSensor(uint8_t ID) {
 801afc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afc4:	4605      	mov	r5, r0
 801afc6:	b08b      	sub	sp, #44	@ 0x2c
 801afc8:	9105      	str	r1, [sp, #20]
	uint8_t index = FindInterfaceIndex(ID, &success);
 801afca:	f10d 021f 	add.w	r2, sp, #31
 801afce:	9905      	ldr	r1, [sp, #20]
 801afd0:	4628      	mov	r0, r5
 801afd2:	f7ff f9d0 	bl	801a376 <_ZN7Sensors18FindInterfaceIndexEhPb>
	if (!success) {osSemaphoreRelease(SensorsSemaphore); return;}
 801afd6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801afda:	b92b      	cbnz	r3, 801afe8 <_ZN7Sensors14ReadNextSensorEh+0x28>
		if (interface->sensor_groups.size() == 0) {osSemaphoreRelease(SensorsSemaphore); return;}
 801afdc:	6828      	ldr	r0, [r5, #0]
}
 801afde:	b00b      	add	sp, #44	@ 0x2c
 801afe0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (interface->sensor_groups.size() == 0) {osSemaphoreRelease(SensorsSemaphore); return;}
 801afe4:	f7f1 bf74 	b.w	800ced0 <osSemaphoreRelease>
 801afe8:	b200      	sxth	r0, r0
 801afea:	692c      	ldr	r4, [r5, #16]
 801afec:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 801aff0:	eb04 0480 	add.w	r4, r4, r0, lsl #2
	if (interface->pending_requests.size() > 0) {
 801aff4:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	@ 0x70
 801aff8:	429a      	cmp	r2, r3
 801affa:	f000 809e 	beq.w	801b13a <_ZN7Sensors14ReadNextSensorEh+0x17a>
 801affe:	f04f 0900 	mov.w	r9, #0
				interface->pending_requests[request_index].processing = true;
 801b002:	f04f 0b01 	mov.w	fp, #1
 801b006:	e028      	b.n	801b05a <_ZN7Sensors14ReadNextSensorEh+0x9a>
			Sensor* request_sensor = FindSensorPath(request_data->parent, NULL, &request_group, &success);
 801b008:	f10d 031f 	add.w	r3, sp, #31
 801b00c:	ea4f 1a46 	mov.w	sl, r6, lsl #5
 801b010:	eb08 1646 	add.w	r6, r8, r6, lsl #5
 801b014:	2200      	movs	r2, #0
 801b016:	4628      	mov	r0, r5
 801b018:	7a71      	ldrb	r1, [r6, #9]
 801b01a:	9300      	str	r3, [sp, #0]
 801b01c:	ab08      	add	r3, sp, #32
 801b01e:	f7ff fa70 	bl	801a502 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb>
			if (!success) {osSemaphoreRelease(SensorsSemaphore); return;}
 801b022:	f89d 301f 	ldrb.w	r3, [sp, #31]
			Sensor* request_sensor = FindSensorPath(request_data->parent, NULL, &request_group, &success);
 801b026:	4607      	mov	r7, r0
			if (!success) {osSemaphoreRelease(SensorsSemaphore); return;}
 801b028:	2b00      	cmp	r3, #0
 801b02a:	d0d7      	beq.n	801afdc <_ZN7Sensors14ReadNextSensorEh+0x1c>
			if (!interface->pending_requests[request_index].processing) {
 801b02c:	f818 300a 	ldrb.w	r3, [r8, sl]
 801b030:	2b00      	cmp	r3, #0
 801b032:	d139      	bne.n	801b0a8 <_ZN7Sensors14ReadNextSensorEh+0xe8>
				if (IsSensorPending(interface, request_sensor->ID) || (interface->current_sensor_ID == request_sensor->ID) || IsSensorRequested(interface, request_sensor->ID)) continue; // checks that sensor is not pending nor currently read in nominal loop nor current read by a request
 801b034:	7903      	ldrb	r3, [r0, #4]
 801b036:	4621      	mov	r1, r4
 801b038:	4628      	mov	r0, r5
 801b03a:	461a      	mov	r2, r3
 801b03c:	9303      	str	r3, [sp, #12]
 801b03e:	f7ff fb96 	bl	801a76e <_ZN7Sensors15IsSensorPendingEP12I2CInterfaceh>
 801b042:	b940      	cbnz	r0, 801b056 <_ZN7Sensors14ReadNextSensorEh+0x96>
 801b044:	f894 1051 	ldrb.w	r1, [r4, #81]	@ 0x51
 801b048:	4291      	cmp	r1, r2
 801b04a:	d004      	beq.n	801b056 <_ZN7Sensors14ReadNextSensorEh+0x96>
 801b04c:	4621      	mov	r1, r4
 801b04e:	4628      	mov	r0, r5
 801b050:	f7ff fba0 	bl	801a794 <_ZN7Sensors17IsSensorRequestedEP12I2CInterfaceh>
 801b054:	b1e0      	cbz	r0, 801b090 <_ZN7Sensors14ReadNextSensorEh+0xd0>
		for (uint8_t request_index = 0; request_index < interface->pending_requests.size(); request_index++) {
 801b056:	f109 0901 	add.w	r9, r9, #1
 801b05a:	fa5f f689 	uxtb.w	r6, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b05e:	e9d4 831c 	ldrd	r8, r3, [r4, #112]	@ 0x70
 801b062:	eba3 0308 	sub.w	r3, r3, r8
 801b066:	ebb6 1f63 	cmp.w	r6, r3, asr #5
 801b06a:	d3cd      	bcc.n	801b008 <_ZN7Sensors14ReadNextSensorEh+0x48>
		if (!interface->request_regular_process && RegularInterfaceTermination(interface) && interface->pending_sensors.size() == 0)
 801b06c:	7861      	ldrb	r1, [r4, #1]
 801b06e:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	@ 0x64
 801b072:	2900      	cmp	r1, #0
 801b074:	d161      	bne.n	801b13a <_ZN7Sensors14ReadNextSensorEh+0x17a>
 801b076:	f894 1050 	ldrb.w	r1, [r4, #80]	@ 0x50
 801b07a:	29ff      	cmp	r1, #255	@ 0xff
 801b07c:	d15d      	bne.n	801b13a <_ZN7Sensors14ReadNextSensorEh+0x17a>
 801b07e:	429a      	cmp	r2, r3
 801b080:	d15f      	bne.n	801b142 <_ZN7Sensors14ReadNextSensorEh+0x182>
			return ExitRegular(interface);
 801b082:	4621      	mov	r1, r4
				return ExitRegular(interface);
 801b084:	4628      	mov	r0, r5
}
 801b086:	b00b      	add	sp, #44	@ 0x2c
 801b088:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				return ExitRegular(interface);
 801b08c:	f000 b980 	b.w	801b390 <_ZN7Sensors11ExitRegularEP12I2CInterface>
				if (request_data->sequence[0].access_mode == DELAY_MODE)
 801b090:	6973      	ldr	r3, [r6, #20]
				interface->pending_requests[request_index].processing = true;
 801b092:	f808 b00a 	strb.w	fp, [r8, sl]
				if (request_data->sequence[0].access_mode == DELAY_MODE)
 801b096:	781b      	ldrb	r3, [r3, #0]
 801b098:	2b04      	cmp	r3, #4
 801b09a:	d105      	bne.n	801b0a8 <_ZN7Sensors14ReadNextSensorEh+0xe8>
					request_sensor->timestamp = HAL_GetTick() + request_data->sequence[0].delay;
 801b09c:	f7e8 fa34 	bl	8003508 <HAL_GetTick>
 801b0a0:	6973      	ldr	r3, [r6, #20]
 801b0a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b0a4:	4403      	add	r3, r0
 801b0a6:	60fb      	str	r3, [r7, #12]
	return *(this->_M_impl._M_start + __n);
 801b0a8:	f896 8010 	ldrb.w	r8, [r6, #16]
 801b0ac:	6973      	ldr	r3, [r6, #20]
 801b0ae:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 801b0b2:	ea4f 1208 	mov.w	r2, r8, lsl #4
 801b0b6:	eb03 1808 	add.w	r8, r3, r8, lsl #4
			if ((request_access->access_mode == DELAY_MODE && HAL_GetTick() > request_sensor->timestamp) || request_access->access_mode != DELAY_MODE /*|| (delay_flag && interface->access_source = REQUEST_ACCESS)*/) {
 801b0ba:	5c99      	ldrb	r1, [r3, r2]
 801b0bc:	2904      	cmp	r1, #4
 801b0be:	d10b      	bne.n	801b0d8 <_ZN7Sensors14ReadNextSensorEh+0x118>
 801b0c0:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801b0c4:	f7e8 fa20 	bl	8003508 <HAL_GetTick>
 801b0c8:	68f9      	ldr	r1, [r7, #12]
 801b0ca:	4288      	cmp	r0, r1
 801b0cc:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 801b0d0:	d802      	bhi.n	801b0d8 <_ZN7Sensors14ReadNextSensorEh+0x118>
 801b0d2:	5c99      	ldrb	r1, [r3, r2]
 801b0d4:	2904      	cmp	r1, #4
 801b0d6:	d0be      	beq.n	801b056 <_ZN7Sensors14ReadNextSensorEh+0x96>
				if (request_access->access_mode == DELAY_MODE) {
 801b0d8:	5c9b      	ldrb	r3, [r3, r2]
			SensorData* request_data = &(interface->pending_requests[request_index].data);
 801b0da:	f106 0b08 	add.w	fp, r6, #8
				if (request_access->access_mode == DELAY_MODE) {
 801b0de:	2b04      	cmp	r3, #4
 801b0e0:	d11b      	bne.n	801b11a <_ZN7Sensors14ReadNextSensorEh+0x15a>
					if (!MoveToNextSequence(request_data)) {
 801b0e2:	2201      	movs	r2, #1
 801b0e4:	4659      	mov	r1, fp
 801b0e6:	4628      	mov	r0, r5
 801b0e8:	f7ff fbda 	bl	801a8a0 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab>
 801b0ec:	b978      	cbnz	r0, 801b10e <_ZN7Sensors14ReadNextSensorEh+0x14e>
 801b0ee:	4620      	mov	r0, r4
						*(interface->pending_requests[request_index].flag) = true;
 801b0f0:	2201      	movs	r2, #1
 801b0f2:	f850 1f70 	ldr.w	r1, [r0, #112]!
 801b0f6:	4451      	add	r1, sl
 801b0f8:	684b      	ldr	r3, [r1, #4]
 801b0fa:	701a      	strb	r2, [r3, #0]
						interface->pending_requests.erase(interface->pending_requests.begin() + request_index);
 801b0fc:	f7ff fd3d 	bl	801ab7a <_ZNSt6vectorI11ReadRequestSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE.isra.0>
							return ExitPending(interface);
 801b100:	4621      	mov	r1, r4
 801b102:	4628      	mov	r0, r5
}
 801b104:	b00b      	add	sp, #44	@ 0x2c
 801b106:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
							return ExitPending(interface);
 801b10a:	f000 ba4b 	b.w	801b5a4 <_ZN7Sensors11ExitPendingEP12I2CInterface>
 801b10e:	7c33      	ldrb	r3, [r6, #16]
 801b110:	6972      	ldr	r2, [r6, #20]
 801b112:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801b116:	eb02 1803 	add.w	r8, r2, r3, lsl #4
				interface->access_source = REQUEST_ACCESS;																// Setup the flag to precise the source of the sensor access
 801b11a:	2302      	movs	r3, #2
				return ProcessAccess(interface, request_group, request_sensor, request_data, request_access);
 801b11c:	9a08      	ldr	r2, [sp, #32]
				interface->request_index = request_index;																// Save which request is being processed
 801b11e:	f884 9057 	strb.w	r9, [r4, #87]	@ 0x57
				interface->access_source = REQUEST_ACCESS;																// Setup the flag to precise the source of the sensor access
 801b122:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
				return ProcessAccess(interface, request_group, request_sensor, request_data, request_access);
 801b126:	463b      	mov	r3, r7
 801b128:	e9cd b800 	strd	fp, r8, [sp]
		return ProcessAccess(interface, sensor_group, sensor, sensor_data, I2C_access);
 801b12c:	4621      	mov	r1, r4
 801b12e:	4628      	mov	r0, r5
 801b130:	f7ff fdc2 	bl	801acb8 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess>
}
 801b134:	b00b      	add	sp, #44	@ 0x2c
 801b136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (interface->pending_sensors.size() > 0) {
 801b13a:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	@ 0x64
 801b13e:	429a      	cmp	r2, r3
 801b140:	d04b      	beq.n	801b1da <_ZN7Sensors14ReadNextSensorEh+0x21a>
 801b142:	f04f 0900 	mov.w	r9, #0
 801b146:	e039      	b.n	801b1bc <_ZN7Sensors14ReadNextSensorEh+0x1fc>
 801b148:	009a      	lsls	r2, r3, #2
			Sensor* pending_sensor = interface->pending_sensors[pending_index];
 801b14a:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
			SensorGroup* pending_group = FindSensorGroup(pending_sensor->parent, &success);
 801b14e:	4628      	mov	r0, r5
 801b150:	9204      	str	r2, [sp, #16]
 801b152:	f10d 021f 	add.w	r2, sp, #31
 801b156:	7871      	ldrb	r1, [r6, #1]
 801b158:	f7ff f95f 	bl	801a41a <_ZN7Sensors15FindSensorGroupEhPb>
 801b15c:	7c33      	ldrb	r3, [r6, #16]
 801b15e:	6977      	ldr	r7, [r6, #20]
 801b160:	eb03 0343 	add.w	r3, r3, r3, lsl #1
			if (!success) {osSemaphoreRelease(SensorsSemaphore); return;}
 801b164:	f89d 201f 	ldrb.w	r2, [sp, #31]
			SensorGroup* pending_group = FindSensorGroup(pending_sensor->parent, &success);
 801b168:	9003      	str	r0, [sp, #12]
 801b16a:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 801b16e:	f897 8008 	ldrb.w	r8, [r7, #8]
 801b172:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 801b176:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 801b17a:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 801b17e:	eb0b 1808 	add.w	r8, fp, r8, lsl #4
			if (!success) {osSemaphoreRelease(SensorsSemaphore); return;}
 801b182:	2a00      	cmp	r2, #0
 801b184:	f43f af2a 	beq.w	801afdc <_ZN7Sensors14ReadNextSensorEh+0x1c>
			if (!pending_sensor->processing) {
 801b188:	78f2      	ldrb	r2, [r6, #3]
 801b18a:	b942      	cbnz	r2, 801b19e <_ZN7Sensors14ReadNextSensorEh+0x1de>
				if (IsSensorRequested(interface, pending_sensor->ID)) continue;
 801b18c:	7932      	ldrb	r2, [r6, #4]
 801b18e:	4621      	mov	r1, r4
 801b190:	4628      	mov	r0, r5
 801b192:	f7ff faff 	bl	801a794 <_ZN7Sensors17IsSensorRequestedEP12I2CInterfaceh>
 801b196:	b978      	cbnz	r0, 801b1b8 <_ZN7Sensors14ReadNextSensorEh+0x1f8>
				pending_sensor->processing = true;
 801b198:	f04f 0301 	mov.w	r3, #1
 801b19c:	70f3      	strb	r3, [r6, #3]
			if ((pending_access->access_mode == DELAY_MODE && HAL_GetTick() > pending_sensor->timestamp) || pending_access->access_mode != DELAY_MODE /*|| (delay_flag && interface->access_source = PENDING_ACCESS)*/) {
 801b19e:	f81b 200a 	ldrb.w	r2, [fp, sl]
 801b1a2:	2a04      	cmp	r2, #4
 801b1a4:	d15b      	bne.n	801b25e <_ZN7Sensors14ReadNextSensorEh+0x29e>
 801b1a6:	f7e8 f9af 	bl	8003508 <HAL_GetTick>
 801b1aa:	68f2      	ldr	r2, [r6, #12]
				if (pending_access->access_mode == DELAY_MODE) {
 801b1ac:	f81b 300a 	ldrb.w	r3, [fp, sl]
			if ((pending_access->access_mode == DELAY_MODE && HAL_GetTick() > pending_sensor->timestamp) || pending_access->access_mode != DELAY_MODE /*|| (delay_flag && interface->access_source = PENDING_ACCESS)*/) {
 801b1b0:	4290      	cmp	r0, r2
 801b1b2:	d852      	bhi.n	801b25a <_ZN7Sensors14ReadNextSensorEh+0x29a>
 801b1b4:	2b04      	cmp	r3, #4
 801b1b6:	d152      	bne.n	801b25e <_ZN7Sensors14ReadNextSensorEh+0x29e>
		for (uint8_t pending_index = 0; pending_index < interface->pending_sensors.size(); pending_index++) {
 801b1b8:	f109 0901 	add.w	r9, r9, #1
 801b1bc:	fa5f f389 	uxtb.w	r3, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b1c0:	e9d4 1219 	ldrd	r1, r2, [r4, #100]	@ 0x64
 801b1c4:	1a52      	subs	r2, r2, r1
 801b1c6:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
 801b1ca:	d3bd      	bcc.n	801b148 <_ZN7Sensors14ReadNextSensorEh+0x188>
		if (!interface->request_regular_process && RegularInterfaceTermination(interface))
 801b1cc:	7863      	ldrb	r3, [r4, #1]
 801b1ce:	b923      	cbnz	r3, 801b1da <_ZN7Sensors14ReadNextSensorEh+0x21a>
 801b1d0:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 801b1d4:	2bff      	cmp	r3, #255	@ 0xff
 801b1d6:	f43f af54 	beq.w	801b082 <_ZN7Sensors14ReadNextSensorEh+0xc2>
	if (active) {
 801b1da:	792b      	ldrb	r3, [r5, #4]
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	d0a9      	beq.n	801b134 <_ZN7Sensors14ReadNextSensorEh+0x174>
		interface->request_regular_process = false;	// reset the flag to start a new regular reading loop
 801b1e0:	2300      	movs	r3, #0
 801b1e2:	7063      	strb	r3, [r4, #1]
		interface->pending_index = 0;
 801b1e4:	f884 3056 	strb.w	r3, [r4, #86]	@ 0x56
		if (interface->sensor_groups.size() == 0) {osSemaphoreRelease(SensorsSemaphore); return;}
 801b1e8:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	@ 0x58
 801b1ec:	4293      	cmp	r3, r2
 801b1ee:	f43f aef5 	beq.w	801afdc <_ZN7Sensors14ReadNextSensorEh+0x1c>
	return *(this->_M_impl._M_start + __n);
 801b1f2:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
		if (interface->current_group_ID == UINT8_MAX || sensor_group->ID != interface->current_group_ID) {
 801b1f6:	f894 1050 	ldrb.w	r1, [r4, #80]	@ 0x50
 801b1fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b1fe:	29ff      	cmp	r1, #255	@ 0xff
 801b200:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801b204:	d002      	beq.n	801b20c <_ZN7Sensors14ReadNextSensorEh+0x24c>
 801b206:	78b0      	ldrb	r0, [r6, #2]
 801b208:	4288      	cmp	r0, r1
 801b20a:	d05b      	beq.n	801b2c4 <_ZN7Sensors14ReadNextSensorEh+0x304>
			if (!sensor_group->active || sensor_group->counter < sensor_group->prescaler - 1 || sensor_group->sensors.size() == 0 || (RegularGroupTermination(interface, sensor_group) && !PendingGroupTermination(interface, sensor_group))) {
 801b20c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 801b210:	88f7      	ldrh	r7, [r6, #6]
 801b212:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 801b216:	b1ab      	cbz	r3, 801b244 <_ZN7Sensors14ReadNextSensorEh+0x284>
 801b218:	f108 33ff 	add.w	r3, r8, #4294967295
 801b21c:	429f      	cmp	r7, r3
 801b21e:	db11      	blt.n	801b244 <_ZN7Sensors14ReadNextSensorEh+0x284>
 801b220:	e9d6 3203 	ldrd	r3, r2, [r6, #12]
 801b224:	429a      	cmp	r2, r3
 801b226:	d00d      	beq.n	801b244 <_ZN7Sensors14ReadNextSensorEh+0x284>
 801b228:	4632      	mov	r2, r6
 801b22a:	4621      	mov	r1, r4
 801b22c:	4628      	mov	r0, r5
 801b22e:	f7ff f84b 	bl	801a2c8 <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup>
 801b232:	2800      	cmp	r0, #0
 801b234:	d043      	beq.n	801b2be <_ZN7Sensors14ReadNextSensorEh+0x2fe>
 801b236:	4632      	mov	r2, r6
 801b238:	4621      	mov	r1, r4
 801b23a:	4628      	mov	r0, r5
 801b23c:	f7ff f865 	bl	801a30a <_ZN7Sensors23PendingGroupTerminationEP12I2CInterfaceP11SensorGroup>
 801b240:	2800      	cmp	r0, #0
 801b242:	d13c      	bne.n	801b2be <_ZN7Sensors14ReadNextSensorEh+0x2fe>
				if (sensor_group->counter < sensor_group->prescaler) sensor_group->counter += 1;
 801b244:	4547      	cmp	r7, r8
 801b246:	d36b      	bcc.n	801b320 <_ZN7Sensors14ReadNextSensorEh+0x360>
				if (MoveToNextGroup(interface)) {return ReadNextSensor(ID);}
 801b248:	2201      	movs	r2, #1
 801b24a:	4621      	mov	r1, r4
 801b24c:	4628      	mov	r0, r5
 801b24e:	f7ff fac1 	bl	801a7d4 <_ZN7Sensors15MoveToNextGroupEP12I2CInterfaceb>
 801b252:	2800      	cmp	r0, #0
 801b254:	f47f aeb9 	bne.w	801afca <_ZN7Sensors14ReadNextSensorEh+0xa>
 801b258:	e714      	b.n	801b084 <_ZN7Sensors14ReadNextSensorEh+0xc4>
				if (pending_access->access_mode == DELAY_MODE) {
 801b25a:	2b04      	cmp	r3, #4
 801b25c:	d009      	beq.n	801b272 <_ZN7Sensors14ReadNextSensorEh+0x2b2>
				interface->access_source = PENDING_ACCESS;																// Setup the flag to precise the source of the sensor access
 801b25e:	2301      	movs	r3, #1
				interface->pending_index = pending_index;																// Save which pending sensor is being processed
 801b260:	f884 9056 	strb.w	r9, [r4, #86]	@ 0x56
				return ProcessAccess(interface, pending_group, pending_sensor, pending_data, pending_access);
 801b264:	9a03      	ldr	r2, [sp, #12]
				interface->access_source = PENDING_ACCESS;																// Setup the flag to precise the source of the sensor access
 801b266:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
				return ProcessAccess(interface, pending_group, pending_sensor, pending_data, pending_access);
 801b26a:	4633      	mov	r3, r6
 801b26c:	e9cd 7800 	strd	r7, r8, [sp]
 801b270:	e75c      	b.n	801b12c <_ZN7Sensors14ReadNextSensorEh+0x16c>
					if (!MoveToNextSequence(pending_data)) {
 801b272:	2201      	movs	r2, #1
 801b274:	4639      	mov	r1, r7
 801b276:	4628      	mov	r0, r5
 801b278:	f7ff fb12 	bl	801a8a0 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab>
 801b27c:	b990      	cbnz	r0, 801b2a4 <_ZN7Sensors14ReadNextSensorEh+0x2e4>
						if (!MoveToNextData(pending_sensor)) {
 801b27e:	2201      	movs	r2, #1
 801b280:	4631      	mov	r1, r6
 801b282:	4628      	mov	r0, r5
 801b284:	f7ff fad8 	bl	801a838 <_ZN7Sensors14MoveToNextDataEP6Sensorb>
 801b288:	b960      	cbnz	r0, 801b2a4 <_ZN7Sensors14ReadNextSensorEh+0x2e4>
      { return __normal_iterator(_M_current + __n); }
 801b28a:	4620      	mov	r0, r4
							interface->pending_sensors.erase(interface->pending_sensors.begin() + pending_index);
 801b28c:	9b04      	ldr	r3, [sp, #16]
 801b28e:	f850 1f64 	ldr.w	r1, [r0, #100]!
 801b292:	4419      	add	r1, r3
 801b294:	f7fe fe4d 	bl	8019f32 <_ZNSt6vectorIP6SensorSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE.isra.0>
							ProccessGroupTermination(interface, pending_group);
 801b298:	9a03      	ldr	r2, [sp, #12]
 801b29a:	4621      	mov	r1, r4
 801b29c:	4628      	mov	r0, r5
 801b29e:	f7ff f849 	bl	801a334 <_ZN7Sensors24ProccessGroupTerminationEP12I2CInterfaceP11SensorGroup>
 801b2a2:	e72d      	b.n	801b100 <_ZN7Sensors14ReadNextSensorEh+0x140>
 801b2a4:	7c33      	ldrb	r3, [r6, #16]
 801b2a6:	6977      	ldr	r7, [r6, #20]
 801b2a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b2ac:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 801b2b0:	7a3b      	ldrb	r3, [r7, #8]
 801b2b2:	68fa      	ldr	r2, [r7, #12]
 801b2b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801b2b8:	eb02 1803 	add.w	r8, r2, r3, lsl #4
 801b2bc:	e7cf      	b.n	801b25e <_ZN7Sensors14ReadNextSensorEh+0x29e>
			interface->current_group_ID = sensor_group->ID;
 801b2be:	78b3      	ldrb	r3, [r6, #2]
 801b2c0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 801b2c4:	7a33      	ldrb	r3, [r6, #8]
 801b2c6:	68f2      	ldr	r2, [r6, #12]
 801b2c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		if (interface->current_sensor_ID == UINT8_MAX || sensor->ID != interface->current_sensor_ID) { // avoid checking for sensor validity if already selected
 801b2cc:	f894 1051 	ldrb.w	r1, [r4, #81]	@ 0x51
 801b2d0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801b2d4:	29ff      	cmp	r1, #255	@ 0xff
		Sensor* sensor = &(sensor_group->sensors[sensor_group->read_index]);
 801b2d6:	9709      	str	r7, [sp, #36]	@ 0x24
		if (interface->current_sensor_ID == UINT8_MAX || sensor->ID != interface->current_sensor_ID) { // avoid checking for sensor validity if already selected
 801b2d8:	d002      	beq.n	801b2e0 <_ZN7Sensors14ReadNextSensorEh+0x320>
 801b2da:	7938      	ldrb	r0, [r7, #4]
 801b2dc:	4288      	cmp	r0, r1
 801b2de:	d024      	beq.n	801b32a <_ZN7Sensors14ReadNextSensorEh+0x36a>
			if (!sensor->active || !sensor->present || sensor->data.size() == 0) {
 801b2e0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 801b2e4:	b193      	cbz	r3, 801b30c <_ZN7Sensors14ReadNextSensorEh+0x34c>
 801b2e6:	78bb      	ldrb	r3, [r7, #2]
 801b2e8:	b183      	cbz	r3, 801b30c <_ZN7Sensors14ReadNextSensorEh+0x34c>
 801b2ea:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
 801b2ee:	429a      	cmp	r2, r3
 801b2f0:	d00c      	beq.n	801b30c <_ZN7Sensors14ReadNextSensorEh+0x34c>
			if (IsSensorRequested(interface, sensor->ID)) {
 801b2f2:	f897 8004 	ldrb.w	r8, [r7, #4]
 801b2f6:	4621      	mov	r1, r4
 801b2f8:	4628      	mov	r0, r5
 801b2fa:	4642      	mov	r2, r8
 801b2fc:	f7ff fa4a 	bl	801a794 <_ZN7Sensors17IsSensorRequestedEP12I2CInterfaceh>
 801b300:	b188      	cbz	r0, 801b326 <_ZN7Sensors14ReadNextSensorEh+0x366>
				interface->pending_sensors.push_back(sensor);
 801b302:	a909      	add	r1, sp, #36	@ 0x24
 801b304:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 801b308:	f7ff fc90 	bl	801ac2c <_ZNSt6vectorIP6SensorSaIS1_EE9push_backERKS1_>
				if (MoveToNextSensor(interface, sensor_group)) {return ReadNextSensor(ID);}
 801b30c:	2301      	movs	r3, #1
 801b30e:	4632      	mov	r2, r6
 801b310:	4621      	mov	r1, r4
 801b312:	4628      	mov	r0, r5
 801b314:	f7ff fa78 	bl	801a808 <_ZN7Sensors16MoveToNextSensorEP12I2CInterfaceP11SensorGroupb>
 801b318:	2800      	cmp	r0, #0
 801b31a:	f47f ae56 	bne.w	801afca <_ZN7Sensors14ReadNextSensorEh+0xa>
 801b31e:	e793      	b.n	801b248 <_ZN7Sensors14ReadNextSensorEh+0x288>
				if (sensor_group->counter < sensor_group->prescaler) sensor_group->counter += 1;
 801b320:	3701      	adds	r7, #1
 801b322:	80f7      	strh	r7, [r6, #6]
				if (MoveToNextGroup(interface)) {return ReadNextSensor(ID);}
 801b324:	e790      	b.n	801b248 <_ZN7Sensors14ReadNextSensorEh+0x288>
			interface->current_sensor_ID = sensor->ID;
 801b326:	f884 8051 	strb.w	r8, [r4, #81]	@ 0x51
 801b32a:	7c3a      	ldrb	r2, [r7, #16]
		if (interface->current_data_address == UINT16_MAX || sensor_data->register_address != interface->current_data_address) { // avoid checking for data validity if already selected
 801b32c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801b330:	f8b4 0052 	ldrh.w	r0, [r4, #82]	@ 0x52
 801b334:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b338:	6979      	ldr	r1, [r7, #20]
 801b33a:	4560      	cmp	r0, ip
 801b33c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 801b340:	d003      	beq.n	801b34a <_ZN7Sensors14ReadNextSensorEh+0x38a>
 801b342:	f8b3 c004 	ldrh.w	ip, [r3, #4]
 801b346:	4584      	cmp	ip, r0
 801b348:	d009      	beq.n	801b35e <_ZN7Sensors14ReadNextSensorEh+0x39e>
			if (!sensor_data->active || sensor_data->sequence.size() == 0) {
 801b34a:	f811 2032 	ldrb.w	r2, [r1, r2, lsl #3]
 801b34e:	b1b2      	cbz	r2, 801b37e <_ZN7Sensors14ReadNextSensorEh+0x3be>
 801b350:	e9d3 2103 	ldrd	r2, r1, [r3, #12]
 801b354:	4291      	cmp	r1, r2
 801b356:	d012      	beq.n	801b37e <_ZN7Sensors14ReadNextSensorEh+0x3be>
			interface->current_data_address = sensor_data->register_address;
 801b358:	889a      	ldrh	r2, [r3, #4]
 801b35a:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 801b35e:	7a1a      	ldrb	r2, [r3, #8]
 801b360:	68d9      	ldr	r1, [r3, #12]
 801b362:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801b366:	eb01 1102 	add.w	r1, r1, r2, lsl #4
		interface->access_source = REGULAR_ACCESS;																		// Setup the flag to precise the source of the sensor access
 801b36a:	2200      	movs	r2, #0
 801b36c:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
		sensor->processing = true;																						// Set sensor processing flag to avoid starting a reading request of the sensor
 801b370:	2201      	movs	r2, #1
 801b372:	70fa      	strb	r2, [r7, #3]
		return ProcessAccess(interface, sensor_group, sensor, sensor_data, I2C_access);
 801b374:	4632      	mov	r2, r6
 801b376:	e9cd 3100 	strd	r3, r1, [sp]
 801b37a:	463b      	mov	r3, r7
 801b37c:	e6d6      	b.n	801b12c <_ZN7Sensors14ReadNextSensorEh+0x16c>
				if (MoveToNextData(sensor)) {return ReadNextSensor(ID);}
 801b37e:	2201      	movs	r2, #1
 801b380:	4639      	mov	r1, r7
 801b382:	4628      	mov	r0, r5
 801b384:	f7ff fa58 	bl	801a838 <_ZN7Sensors14MoveToNextDataEP6Sensorb>
 801b388:	2800      	cmp	r0, #0
 801b38a:	f47f ae1e 	bne.w	801afca <_ZN7Sensors14ReadNextSensorEh+0xa>
 801b38e:	e7bd      	b.n	801b30c <_ZN7Sensors14ReadNextSensorEh+0x34c>

0801b390 <_ZN7Sensors11ExitRegularEP12I2CInterface>:
	if (interface->pending_sensors.size() > 0 || interface->pending_requests.size() > 0) {
 801b390:	e9d1 3219 	ldrd	r3, r2, [r1, #100]	@ 0x64
void Sensors::ExitRegular(I2CInterface* interface) {
 801b394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (interface->pending_sensors.size() > 0 || interface->pending_requests.size() > 0) {
 801b398:	429a      	cmp	r2, r3
void Sensors::ExitRegular(I2CInterface* interface) {
 801b39a:	b091      	sub	sp, #68	@ 0x44
 801b39c:	4605      	mov	r5, r0
 801b39e:	460c      	mov	r4, r1
	if (interface->pending_sensors.size() > 0 || interface->pending_requests.size() > 0) {
 801b3a0:	d103      	bne.n	801b3aa <_ZN7Sensors11ExitRegularEP12I2CInterface+0x1a>
 801b3a2:	e9d1 231c 	ldrd	r2, r3, [r1, #112]	@ 0x70
 801b3a6:	429a      	cmp	r2, r3
 801b3a8:	d024      	beq.n	801b3f4 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x64>
		uint32_t current_timestamp = HAL_GetTick();
 801b3aa:	f7e8 f8ad 	bl	8003508 <HAL_GetTick>
		for (uint8_t request_index = 0; request_index < interface->pending_requests.size(); request_index++) {
 801b3ae:	f04f 0900 	mov.w	r9, #0
		uint32_t current_timestamp = HAL_GetTick();
 801b3b2:	4607      	mov	r7, r0
		uint32_t min_remaining_time = UINT32_MAX;
 801b3b4:	f04f 38ff 	mov.w	r8, #4294967295
struct ReadRequest {
 801b3b8:	f04f 0a01 	mov.w	sl, #1
		for (uint8_t request_index = 0; request_index < interface->pending_requests.size(); request_index++) {
 801b3bc:	fa5f f189 	uxtb.w	r1, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b3c0:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	@ 0x70
 801b3c4:	1a9b      	subs	r3, r3, r2
 801b3c6:	ebb1 1f63 	cmp.w	r1, r3, asr #5
 801b3ca:	d31f      	bcc.n	801b40c <_ZN7Sensors11ExitRegularEP12I2CInterface+0x7c>
 801b3cc:	f04f 0b00 	mov.w	fp, #0
		for (uint8_t pending_index = 0; pending_index < interface->pending_sensors.size(); pending_index++) {
 801b3d0:	fa5f f28b 	uxtb.w	r2, fp
 801b3d4:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	@ 0x64
 801b3d8:	1a09      	subs	r1, r1, r0
 801b3da:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
 801b3de:	d371      	bcc.n	801b4c4 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x134>
			hardware_delay->AddDelayMS(interface->ID, min_remaining_time, context, HardwareDelayISR);
 801b3e0:	4b6d      	ldr	r3, [pc, #436]	@ (801b598 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x208>)
 801b3e2:	fa1f f288 	uxth.w	r2, r8
 801b3e6:	9300      	str	r3, [sp, #0]
 801b3e8:	462b      	mov	r3, r5
 801b3ea:	7821      	ldrb	r1, [r4, #0]
 801b3ec:	f8d5 00c4 	ldr.w	r0, [r5, #196]	@ 0xc4
 801b3f0:	f7fa fee8 	bl	80161c4 <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE>
	interface->activity_timestamp = HAL_GetTick();
 801b3f4:	f7e8 f888 	bl	8003508 <HAL_GetTick>
	interface->current_group_ID = UINT8_MAX;
 801b3f8:	f04f 33ff 	mov.w	r3, #4294967295
	interface->activity_timestamp = HAL_GetTick();
 801b3fc:	6060      	str	r0, [r4, #4]
	interface->current_group_ID = UINT8_MAX;
 801b3fe:	6523      	str	r3, [r4, #80]	@ 0x50
	osSemaphoreRelease(SensorsSemaphore);
 801b400:	6828      	ldr	r0, [r5, #0]
}
 801b402:	b011      	add	sp, #68	@ 0x44
 801b404:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	osSemaphoreRelease(SensorsSemaphore);
 801b408:	f7f1 bd62 	b.w	800ced0 <osSemaphoreRelease>
	return *(this->_M_impl._M_start + __n);
 801b40c:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 801b410:	eb02 1141 	add.w	r1, r2, r1, lsl #5
			if (!interface->pending_requests[request_index].processing) continue;
 801b414:	f812 300b 	ldrb.w	r3, [r2, fp]
 801b418:	2b00      	cmp	r3, #0
 801b41a:	d050      	beq.n	801b4be <_ZN7Sensors11ExitRegularEP12I2CInterface+0x12e>
 801b41c:	684b      	ldr	r3, [r1, #4]
 801b41e:	a80a      	add	r0, sp, #40	@ 0x28
 801b420:	3108      	adds	r1, #8
 801b422:	f88d a020 	strb.w	sl, [sp, #32]
 801b426:	9309      	str	r3, [sp, #36]	@ 0x24
 801b428:	f7fe ff1a 	bl	801a260 <_ZN10SensorDataC1ERKS_>
			if (request_data->read_index >= request_data->sequence.size()) continue;
 801b42c:	f89d 6030 	ldrb.w	r6, [sp, #48]	@ 0x30
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b430:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 801b434:	1ad2      	subs	r2, r2, r3
 801b436:	9303      	str	r3, [sp, #12]
 801b438:	4b58      	ldr	r3, [pc, #352]	@ (801b59c <_ZN7Sensors11ExitRegularEP12I2CInterface+0x20c>)
 801b43a:	1112      	asrs	r2, r2, #4
 801b43c:	435a      	muls	r2, r3
 801b43e:	4296      	cmp	r6, r2
 801b440:	d23a      	bcs.n	801b4b8 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x128>
			Sensor* request_sensor = FindSensor(request_data->parent, &success);
 801b442:	f10d 021f 	add.w	r2, sp, #31
 801b446:	f89d 1029 	ldrb.w	r1, [sp, #41]	@ 0x29
 801b44a:	4628      	mov	r0, r5
 801b44c:	f7ff f87e 	bl	801a54c <_ZN7Sensors10FindSensorEhPb>
			if (!success) continue;
 801b450:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801b454:	b382      	cbz	r2, 801b4b8 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x128>
	return *(this->_M_impl._M_start + __n);
 801b456:	eb06 0686 	add.w	r6, r6, r6, lsl #2
			if (request_access->access_mode != DELAY_MODE) {return ReadNextSensor(interface->ID);}
 801b45a:	9b03      	ldr	r3, [sp, #12]
 801b45c:	0136      	lsls	r6, r6, #4
 801b45e:	5d9b      	ldrb	r3, [r3, r6]
 801b460:	2b04      	cmp	r3, #4
 801b462:	d004      	beq.n	801b46e <_ZN7Sensors11ExitRegularEP12I2CInterface+0xde>
				return ReadNextSensor(interface->ID);
 801b464:	7821      	ldrb	r1, [r4, #0]
 801b466:	4628      	mov	r0, r5
 801b468:	f7ff fdaa 	bl	801afc0 <_ZN7Sensors14ReadNextSensorEh>
 801b46c:	e016      	b.n	801b49c <_ZN7Sensors11ExitRegularEP12I2CInterface+0x10c>
			if (request_sensor->timestamp <= current_timestamp) {
 801b46e:	68c3      	ldr	r3, [r0, #12]
 801b470:	42bb      	cmp	r3, r7
 801b472:	d819      	bhi.n	801b4a8 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x118>
				if (!MoveToNextSequence(request_data)) {
 801b474:	2201      	movs	r2, #1
 801b476:	a90a      	add	r1, sp, #40	@ 0x28
 801b478:	4628      	mov	r0, r5
 801b47a:	f7ff fa11 	bl	801a8a0 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab>
 801b47e:	2800      	cmp	r0, #0
 801b480:	d1f0      	bne.n	801b464 <_ZN7Sensors11ExitRegularEP12I2CInterface+0xd4>
 801b482:	4620      	mov	r0, r4
 801b484:	f850 1f70 	ldr.w	r1, [r0, #112]!
 801b488:	4459      	add	r1, fp
					*(interface->pending_requests[request_index].flag) = true;									// flag to exit the blocking request loop from RequestRead
 801b48a:	684b      	ldr	r3, [r1, #4]
 801b48c:	f883 a000 	strb.w	sl, [r3]
					interface->pending_requests.erase(interface->pending_requests.begin() + request_index);
 801b490:	f7ff fb73 	bl	801ab7a <_ZNSt6vectorI11ReadRequestSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE.isra.0>
					return ExitPending(interface);
 801b494:	4621      	mov	r1, r4
 801b496:	4628      	mov	r0, r5
 801b498:	f000 f884 	bl	801b5a4 <_ZN7Sensors11ExitPendingEP12I2CInterface>
      }
 801b49c:	a80d      	add	r0, sp, #52	@ 0x34
 801b49e:	f7e6 fda9 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
}
 801b4a2:	b011      	add	sp, #68	@ 0x44
 801b4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			remaining_time = request_sensor->timestamp - current_timestamp;
 801b4a8:	1bdb      	subs	r3, r3, r7
			if (remaining_time < min_remaining_time) {
 801b4aa:	4598      	cmp	r8, r3
				delay_source = REQUEST_ACCESS;
 801b4ac:	bf81      	itttt	hi
 801b4ae:	2202      	movhi	r2, #2
 801b4b0:	4698      	movhi	r8, r3
				delayed_index = request_index;
 801b4b2:	f885 900d 	strbhi.w	r9, [r5, #13]
				delay_source = REQUEST_ACCESS;
 801b4b6:	732a      	strbhi	r2, [r5, #12]
 801b4b8:	a80d      	add	r0, sp, #52	@ 0x34
 801b4ba:	f7e6 fd9b 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
		for (uint8_t request_index = 0; request_index < interface->pending_requests.size(); request_index++) {
 801b4be:	f109 0901 	add.w	r9, r9, #1
 801b4c2:	e77b      	b.n	801b3bc <_ZN7Sensors11ExitRegularEP12I2CInterface+0x2c>
			if (!interface->pending_sensors[pending_index]->processing) continue;
 801b4c4:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
	return *(this->_M_impl._M_start + __n);
 801b4c8:	0093      	lsls	r3, r2, #2
 801b4ca:	78f2      	ldrb	r2, [r6, #3]
 801b4cc:	9304      	str	r3, [sp, #16]
 801b4ce:	2a00      	cmp	r2, #0
 801b4d0:	d05e      	beq.n	801b590 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x200>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b4d2:	4b33      	ldr	r3, [pc, #204]	@ (801b5a0 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x210>)
			if (pending_sensor->read_index >= pending_sensor->data.size()) continue;
 801b4d4:	7c31      	ldrb	r1, [r6, #16]
 801b4d6:	e9d6 0205 	ldrd	r0, r2, [r6, #20]
 801b4da:	1a12      	subs	r2, r2, r0
 801b4dc:	10d2      	asrs	r2, r2, #3
 801b4de:	435a      	muls	r2, r3
 801b4e0:	4291      	cmp	r1, r2
 801b4e2:	d255      	bcs.n	801b590 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x200>
	return *(this->_M_impl._M_start + __n);
 801b4e4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b4e8:	eb00 09c1 	add.w	r9, r0, r1, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b4ec:	e9d9 3203 	ldrd	r3, r2, [r9, #12]
			if (pending_data->read_index >= pending_data->sequence.size()) continue;
 801b4f0:	f899 a008 	ldrb.w	sl, [r9, #8]
 801b4f4:	1ad2      	subs	r2, r2, r3
 801b4f6:	9305      	str	r3, [sp, #20]
 801b4f8:	4b28      	ldr	r3, [pc, #160]	@ (801b59c <_ZN7Sensors11ExitRegularEP12I2CInterface+0x20c>)
 801b4fa:	1112      	asrs	r2, r2, #4
 801b4fc:	435a      	muls	r2, r3
 801b4fe:	4592      	cmp	sl, r2
 801b500:	d246      	bcs.n	801b590 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x200>
			SensorGroup* pending_group = FindSensorGroup(pending_sensor->parent, &success);
 801b502:	f10d 021f 	add.w	r2, sp, #31
 801b506:	7871      	ldrb	r1, [r6, #1]
 801b508:	4628      	mov	r0, r5
 801b50a:	f7fe ff86 	bl	801a41a <_ZN7Sensors15FindSensorGroupEhPb>
			if (!success) continue;
 801b50e:	f89d 201f 	ldrb.w	r2, [sp, #31]
			SensorGroup* pending_group = FindSensorGroup(pending_sensor->parent, &success);
 801b512:	9003      	str	r0, [sp, #12]
			if (!success) continue;
 801b514:	2a00      	cmp	r2, #0
 801b516:	d03b      	beq.n	801b590 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x200>
	return *(this->_M_impl._M_start + __n);
 801b518:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
			if (pending_access->access_mode != DELAY_MODE) {return ReadNextSensor(interface->ID);}
 801b51c:	9b05      	ldr	r3, [sp, #20]
 801b51e:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 801b522:	f813 200a 	ldrb.w	r2, [r3, sl]
 801b526:	2a04      	cmp	r2, #4
 801b528:	d006      	beq.n	801b538 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x1a8>
				return ReadNextSensor(interface->ID); // if delay and time has already elapsed, process
 801b52a:	7821      	ldrb	r1, [r4, #0]
 801b52c:	4628      	mov	r0, r5
}
 801b52e:	b011      	add	sp, #68	@ 0x44
 801b530:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				return ReadNextSensor(interface->ID); // if delay and time has already elapsed, process
 801b534:	f7ff bd44 	b.w	801afc0 <_ZN7Sensors14ReadNextSensorEh>
			if (pending_sensor->timestamp <= current_timestamp) {
 801b538:	68f2      	ldr	r2, [r6, #12]
 801b53a:	42ba      	cmp	r2, r7
 801b53c:	d820      	bhi.n	801b580 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x1f0>
				if (!MoveToNextSequence(pending_data)) {
 801b53e:	2201      	movs	r2, #1
 801b540:	4649      	mov	r1, r9
 801b542:	4628      	mov	r0, r5
 801b544:	f7ff f9ac 	bl	801a8a0 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab>
 801b548:	2800      	cmp	r0, #0
 801b54a:	d1ee      	bne.n	801b52a <_ZN7Sensors11ExitRegularEP12I2CInterface+0x19a>
					if (!MoveToNextData(pending_sensor)) {
 801b54c:	2201      	movs	r2, #1
 801b54e:	4631      	mov	r1, r6
 801b550:	4628      	mov	r0, r5
 801b552:	f7ff f971 	bl	801a838 <_ZN7Sensors14MoveToNextDataEP6Sensorb>
 801b556:	2800      	cmp	r0, #0
 801b558:	d1e7      	bne.n	801b52a <_ZN7Sensors11ExitRegularEP12I2CInterface+0x19a>
 801b55a:	4620      	mov	r0, r4
						interface->pending_sensors.erase(interface->pending_sensors.begin() + pending_index);
 801b55c:	9b04      	ldr	r3, [sp, #16]
 801b55e:	f850 1f64 	ldr.w	r1, [r0, #100]!
 801b562:	4419      	add	r1, r3
 801b564:	f7fe fce5 	bl	8019f32 <_ZNSt6vectorIP6SensorSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE.isra.0>
						ProccessGroupTermination(interface, pending_group);
 801b568:	4621      	mov	r1, r4
 801b56a:	4628      	mov	r0, r5
 801b56c:	9a03      	ldr	r2, [sp, #12]
 801b56e:	f7fe fee1 	bl	801a334 <_ZN7Sensors24ProccessGroupTerminationEP12I2CInterfaceP11SensorGroup>
						return ExitPending(interface);
 801b572:	4621      	mov	r1, r4
 801b574:	4628      	mov	r0, r5
}
 801b576:	b011      	add	sp, #68	@ 0x44
 801b578:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
						return ExitPending(interface);
 801b57c:	f000 b812 	b.w	801b5a4 <_ZN7Sensors11ExitPendingEP12I2CInterface>
			remaining_time = pending_sensor->timestamp - current_timestamp;
 801b580:	1bd2      	subs	r2, r2, r7
			if (remaining_time < min_remaining_time) {
 801b582:	4590      	cmp	r8, r2
				delay_source = PENDING_ACCESS;
 801b584:	bf81      	itttt	hi
 801b586:	2101      	movhi	r1, #1
 801b588:	4690      	movhi	r8, r2
				delayed_index = pending_index;
 801b58a:	f885 b00d 	strbhi.w	fp, [r5, #13]
				delay_source = PENDING_ACCESS;
 801b58e:	7329      	strbhi	r1, [r5, #12]
		for (uint8_t pending_index = 0; pending_index < interface->pending_sensors.size(); pending_index++) {
 801b590:	f10b 0b01 	add.w	fp, fp, #1
 801b594:	e71c      	b.n	801b3d0 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x40>
 801b596:	bf00      	nop
 801b598:	0801bb41 	.word	0x0801bb41
 801b59c:	cccccccd 	.word	0xcccccccd
 801b5a0:	aaaaaaab 	.word	0xaaaaaaab

0801b5a4 <_ZN7Sensors11ExitPendingEP12I2CInterface>:
void Sensors::ExitPending(I2CInterface* interface) {
 801b5a4:	b538      	push	{r3, r4, r5, lr}
	if (!RegularInterfaceTermination(interface)) ReadNextSensor(interface->ID);
 801b5a6:	f891 3050 	ldrb.w	r3, [r1, #80]	@ 0x50
void Sensors::ExitPending(I2CInterface* interface) {
 801b5aa:	4605      	mov	r5, r0
 801b5ac:	460c      	mov	r4, r1
	if (!RegularInterfaceTermination(interface)) ReadNextSensor(interface->ID);
 801b5ae:	2bff      	cmp	r3, #255	@ 0xff
 801b5b0:	d002      	beq.n	801b5b8 <_ZN7Sensors11ExitPendingEP12I2CInterface+0x14>
 801b5b2:	7809      	ldrb	r1, [r1, #0]
 801b5b4:	f7ff fd04 	bl	801afc0 <_ZN7Sensors14ReadNextSensorEh>
	return ExitRegular(interface);
 801b5b8:	4621      	mov	r1, r4
 801b5ba:	4628      	mov	r0, r5
}
 801b5bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return ExitRegular(interface);
 801b5c0:	f7ff bee6 	b.w	801b390 <_ZN7Sensors11ExitRegularEP12I2CInterface>

0801b5c4 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface>:
void Sensors::ProccessReceivedData(I2CInterface* interface) {
 801b5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (interface->access_source == REQUEST_ACCESS) {
 801b5c8:	f891 3054 	ldrb.w	r3, [r1, #84]	@ 0x54
void Sensors::ProccessReceivedData(I2CInterface* interface) {
 801b5cc:	b085      	sub	sp, #20
 801b5ce:	4604      	mov	r4, r0
 801b5d0:	460d      	mov	r5, r1
	if (interface->access_source == REQUEST_ACCESS) {
 801b5d2:	2b02      	cmp	r3, #2
	uint8_t ID = interface->ID;
 801b5d4:	f891 b000 	ldrb.w	fp, [r1]
	if (interface->access_source == REQUEST_ACCESS) {
 801b5d8:	d126      	bne.n	801b628 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x64>
 801b5da:	f891 2057 	ldrb.w	r2, [r1, #87]	@ 0x57
 801b5de:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 801b5e0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
		sensor = FindSensorPath(sensor_data->parent, NULL, &sensor_group, &success);
 801b5e4:	2200      	movs	r2, #0
 801b5e6:	7a59      	ldrb	r1, [r3, #9]
		sensor_data = &(interface->pending_requests[interface->request_index].data);
 801b5e8:	f103 0608 	add.w	r6, r3, #8
		sensor = FindSensorPath(sensor_data->parent, NULL, &sensor_group, &success);
 801b5ec:	f10d 030b 	add.w	r3, sp, #11
 801b5f0:	9300      	str	r3, [sp, #0]
 801b5f2:	ab03      	add	r3, sp, #12
 801b5f4:	f7fe ff85 	bl	801a502 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb>
 801b5f8:	4607      	mov	r7, r0
	I2C_access = &(sensor_data->sequence[sensor_data->read_index]);
 801b5fa:	7a33      	ldrb	r3, [r6, #8]
 801b5fc:	f8d6 900c 	ldr.w	r9, [r6, #12]
 801b600:	eb03 0883 	add.w	r8, r3, r3, lsl #2
	switch (sensor_data->type) {
 801b604:	79f2      	ldrb	r2, [r6, #7]
 801b606:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 801b60a:	eb09 1808 	add.w	r8, r9, r8, lsl #4
 801b60e:	2a08      	cmp	r2, #8
 801b610:	d86d      	bhi.n	801b6ee <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x12a>
 801b612:	e8df f012 	tbh	[pc, r2, lsl #1]
 801b616:	004c      	.short	0x004c
 801b618:	00a50081 	.word	0x00a50081
 801b61c:	006c00c9 	.word	0x006c00c9
 801b620:	006c006c 	.word	0x006c006c
 801b624:	00f1006c 	.word	0x00f1006c
	} else if (interface->access_source == PENDING_ACCESS) {
 801b628:	2b01      	cmp	r3, #1
 801b62a:	d118      	bne.n	801b65e <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x9a>
 801b62c:	f891 2056 	ldrb.w	r2, [r1, #86]	@ 0x56
		sensor = interface->pending_sensors[interface->pending_index];
 801b630:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 801b632:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
		sensor_group = FindSensorGroup(sensor->parent, &success);
 801b636:	f10d 020b 	add.w	r2, sp, #11
 801b63a:	7879      	ldrb	r1, [r7, #1]
 801b63c:	f7fe feed 	bl	801a41a <_ZN7Sensors15FindSensorGroupEhPb>
		if (sensor->read_index >= sensor->data.size()) {osSemaphoreRelease(SensorsSemaphore); return;}
 801b640:	7c3a      	ldrb	r2, [r7, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b642:	49ba      	ldr	r1, [pc, #744]	@ (801b92c <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x368>)
		sensor_group = FindSensorGroup(sensor->parent, &success);
 801b644:	9003      	str	r0, [sp, #12]
 801b646:	e9d7 6305 	ldrd	r6, r3, [r7, #20]
 801b64a:	1b9b      	subs	r3, r3, r6
 801b64c:	10db      	asrs	r3, r3, #3
 801b64e:	434b      	muls	r3, r1
		if (sensor->read_index >= sensor->data.size()) {osSemaphoreRelease(SensorsSemaphore); return;}
 801b650:	429a      	cmp	r2, r3
 801b652:	d20e      	bcs.n	801b672 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0xae>
	return *(this->_M_impl._M_start + __n);
 801b654:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b658:	eb06 06c2 	add.w	r6, r6, r2, lsl #3
 801b65c:	e7cd      	b.n	801b5fa <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x36>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b65e:	e9d1 3216 	ldrd	r3, r2, [r1, #88]	@ 0x58
		if (interface->read_index >= interface->sensor_groups.size()) {osSemaphoreRelease(SensorsSemaphore); return;}
 801b662:	f891 0055 	ldrb.w	r0, [r1, #85]	@ 0x55
 801b666:	1ad2      	subs	r2, r2, r3
 801b668:	49b0      	ldr	r1, [pc, #704]	@ (801b92c <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x368>)
 801b66a:	10d2      	asrs	r2, r2, #3
 801b66c:	434a      	muls	r2, r1
 801b66e:	4290      	cmp	r0, r2
 801b670:	d305      	bcc.n	801b67e <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0xba>
	osSemaphoreRelease(SensorsSemaphore);
 801b672:	6820      	ldr	r0, [r4, #0]
}
 801b674:	b005      	add	sp, #20
 801b676:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	osSemaphoreRelease(SensorsSemaphore);
 801b67a:	f7f1 bc29 	b.w	800ced0 <osSemaphoreRelease>
	return *(this->_M_impl._M_start + __n);
 801b67e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b682:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b686:	48aa      	ldr	r0, [pc, #680]	@ (801b930 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x36c>)
		if (sensor_group->read_index >= sensor_group->sensors.size()) {osSemaphoreRelease(SensorsSemaphore); return;}
 801b688:	7a1a      	ldrb	r2, [r3, #8]
		sensor_group = &(interface->sensor_groups[interface->read_index]);
 801b68a:	9303      	str	r3, [sp, #12]
 801b68c:	e9d3 7303 	ldrd	r7, r3, [r3, #12]
 801b690:	1bdb      	subs	r3, r3, r7
 801b692:	10db      	asrs	r3, r3, #3
 801b694:	4343      	muls	r3, r0
		if (sensor_group->read_index >= sensor_group->sensors.size()) {osSemaphoreRelease(SensorsSemaphore); return;}
 801b696:	429a      	cmp	r2, r3
 801b698:	d2eb      	bcs.n	801b672 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0xae>
	return *(this->_M_impl._M_start + __n);
 801b69a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801b69e:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b6a2:	e9d7 6305 	ldrd	r6, r3, [r7, #20]
		if (sensor->read_index >= sensor->data.size()) {osSemaphoreRelease(SensorsSemaphore); return;}
 801b6a6:	7c3a      	ldrb	r2, [r7, #16]
 801b6a8:	1b9b      	subs	r3, r3, r6
 801b6aa:	10db      	asrs	r3, r3, #3
 801b6ac:	e7cf      	b.n	801b64e <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x8a>
		if (sensor_data->read_index == 0)
 801b6ae:	b913      	cbnz	r3, 801b6b6 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0xf2>
			sensor_data_uint8[sensor_data->index] = 0; // Clean buffer when start access
 801b6b0:	79b2      	ldrb	r2, [r6, #6]
 801b6b2:	69e1      	ldr	r1, [r4, #28]
 801b6b4:	548b      	strb	r3, [r1, r2]
		if (I2C_access->access_mode == READ_MODE || I2C_access->access_mode == MEM_READ_MODE)
 801b6b6:	f819 300a 	ldrb.w	r3, [r9, sl]
 801b6ba:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 801b6be:	2b01      	cmp	r3, #1
 801b6c0:	d108      	bne.n	801b6d4 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x110>
			TransferBuffer<uint8_t>(&(sensor_data_uint8[sensor_data->index]), interface->buffer, I2C_access->size);
 801b6c2:	79b0      	ldrb	r0, [r6, #6]
 801b6c4:	f105 0110 	add.w	r1, r5, #16
	return *(this->_M_impl._M_start + __n);
 801b6c8:	69e3      	ldr	r3, [r4, #28]
 801b6ca:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 801b6ce:	4418      	add	r0, r3
 801b6d0:	f7fe fc10 	bl	8019ef4 <_ZN7Sensors14TransferBufferIhEEvPT_Pht.isra.0>
		if (I2C_access->access_mode == CODE_MODE)
 801b6d4:	f819 300a 	ldrb.w	r3, [r9, sl]
 801b6d8:	2b05      	cmp	r3, #5
 801b6da:	d108      	bne.n	801b6ee <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x12a>
			TransferBuffer<uint8_t>(&(sensor_data_uint8[sensor_data->index]), interface->buffer, I2C_access->size);
 801b6dc:	79b0      	ldrb	r0, [r6, #6]
 801b6de:	f105 0110 	add.w	r1, r5, #16
 801b6e2:	69e3      	ldr	r3, [r4, #28]
 801b6e4:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 801b6e8:	4418      	add	r0, r3
 801b6ea:	f7fe fc03 	bl	8019ef4 <_ZN7Sensors14TransferBufferIhEEvPT_Pht.isra.0>
	if (interface->access_source == REQUEST_ACCESS) {
 801b6ee:	f895 8054 	ldrb.w	r8, [r5, #84]	@ 0x54
 801b6f2:	f1b8 0f02 	cmp.w	r8, #2
 801b6f6:	f040 80cb 	bne.w	801b890 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x2cc>
		if (MoveToNextSequence(sensor_data)) {return ReadNextSensor(ID);}
 801b6fa:	2201      	movs	r2, #1
 801b6fc:	4631      	mov	r1, r6
 801b6fe:	4620      	mov	r0, r4
 801b700:	f7ff f8ce 	bl	801a8a0 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab>
 801b704:	2800      	cmp	r0, #0
 801b706:	f000 80ac 	beq.w	801b862 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x29e>
		if (MoveToNextGroup(interface)) {return ReadNextSensor(ID);}
 801b70a:	4659      	mov	r1, fp
 801b70c:	4620      	mov	r0, r4
}
 801b70e:	b005      	add	sp, #20
 801b710:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (MoveToNextGroup(interface)) {return ReadNextSensor(ID);}
 801b714:	f7ff bc54 	b.w	801afc0 <_ZN7Sensors14ReadNextSensorEh>
		if (sensor_data->read_index == 0)
 801b718:	b91b      	cbnz	r3, 801b722 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x15e>
 801b71a:	79b1      	ldrb	r1, [r6, #6]
			sensor_data_uint16[sensor_data->index] = 0; // Clean buffer when start access
 801b71c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801b71e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
		if (I2C_access->access_mode == READ_MODE || I2C_access->access_mode == MEM_READ_MODE)
 801b722:	f819 300a 	ldrb.w	r3, [r9, sl]
 801b726:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 801b72a:	2b01      	cmp	r3, #1
 801b72c:	d109      	bne.n	801b742 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x17e>
 801b72e:	79b0      	ldrb	r0, [r6, #6]
			TransferBuffer<uint16_t>(&(sensor_data_uint16[sensor_data->index]), interface->buffer, I2C_access->size);
 801b730:	f105 0110 	add.w	r1, r5, #16
 801b734:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801b736:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 801b73a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 801b73e:	f7fe fbba 	bl	8019eb6 <_ZN7Sensors14TransferBufferItEEvPT_Pht.isra.0>
		if (I2C_access->access_mode == CODE_MODE)
 801b742:	f819 300a 	ldrb.w	r3, [r9, sl]
 801b746:	2b05      	cmp	r3, #5
 801b748:	d1d1      	bne.n	801b6ee <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x12a>
 801b74a:	79b0      	ldrb	r0, [r6, #6]
			TransferBuffer<uint16_t>(&(sensor_data_uint16[sensor_data->index]), interface->buffer, I2C_access->size);
 801b74c:	f105 0110 	add.w	r1, r5, #16
 801b750:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801b752:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 801b756:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 801b75a:	f7fe fbac 	bl	8019eb6 <_ZN7Sensors14TransferBufferItEEvPT_Pht.isra.0>
 801b75e:	e7c6      	b.n	801b6ee <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x12a>
		if (sensor_data->read_index == 0)
 801b760:	b91b      	cbnz	r3, 801b76a <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x1a6>
 801b762:	79b1      	ldrb	r1, [r6, #6]
			sensor_data_uint32[sensor_data->index] = 0; // Clean buffer when start access
 801b764:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801b766:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		if (I2C_access->access_mode == READ_MODE || I2C_access->access_mode == MEM_READ_MODE)
 801b76a:	f819 300a 	ldrb.w	r3, [r9, sl]
 801b76e:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 801b772:	2b01      	cmp	r3, #1
 801b774:	d109      	bne.n	801b78a <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x1c6>
 801b776:	79b0      	ldrb	r0, [r6, #6]
			TransferBuffer<uint32_t>(&(sensor_data_uint32[sensor_data->index]), interface->buffer, I2C_access->size);
 801b778:	f105 0110 	add.w	r1, r5, #16
 801b77c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b77e:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 801b782:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b786:	f7fe fb7a 	bl	8019e7e <_ZN7Sensors14TransferBufferImEEvPT_Pht.isra.0>
		if (I2C_access->access_mode == CODE_MODE)
 801b78a:	f819 300a 	ldrb.w	r3, [r9, sl]
 801b78e:	2b05      	cmp	r3, #5
 801b790:	d1ad      	bne.n	801b6ee <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x12a>
 801b792:	79b0      	ldrb	r0, [r6, #6]
			TransferBuffer<uint32_t>(&(sensor_data_uint32[sensor_data->index]), interface->buffer, I2C_access->size);
 801b794:	f105 0110 	add.w	r1, r5, #16
 801b798:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b79a:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 801b79e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b7a2:	f7fe fb6c 	bl	8019e7e <_ZN7Sensors14TransferBufferImEEvPT_Pht.isra.0>
 801b7a6:	e7a2      	b.n	801b6ee <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x12a>
		if (sensor_data->read_index == 0)
 801b7a8:	b93b      	cbnz	r3, 801b7ba <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x1f6>
 801b7aa:	79b2      	ldrb	r2, [r6, #6]
			sensor_data_uint64[sensor_data->index] = 0; // Clean buffer when start access
 801b7ac:	2000      	movs	r0, #0
 801b7ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b7b0:	2100      	movs	r1, #0
 801b7b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b7b6:	e9c3 0100 	strd	r0, r1, [r3]
		if (I2C_access->access_mode == READ_MODE || I2C_access->access_mode == MEM_READ_MODE)
 801b7ba:	f819 300a 	ldrb.w	r3, [r9, sl]
 801b7be:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 801b7c2:	2b01      	cmp	r3, #1
 801b7c4:	d109      	bne.n	801b7da <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x216>
 801b7c6:	79b0      	ldrb	r0, [r6, #6]
			TransferBuffer<uint64_t>(&(sensor_data_uint64[sensor_data->index]), interface->buffer, I2C_access->size);
 801b7c8:	f105 0110 	add.w	r1, r5, #16
 801b7cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b7ce:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 801b7d2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801b7d6:	f7fe fb2b 	bl	8019e30 <_ZN7Sensors14TransferBufferIyEEvPT_Pht.isra.0>
		if (I2C_access->access_mode == CODE_MODE)
 801b7da:	f819 300a 	ldrb.w	r3, [r9, sl]
 801b7de:	2b05      	cmp	r3, #5
 801b7e0:	d185      	bne.n	801b6ee <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x12a>
 801b7e2:	79b0      	ldrb	r0, [r6, #6]
			TransferBuffer<uint64_t>(&(sensor_data_uint64[sensor_data->index]), interface->buffer, I2C_access->size);
 801b7e4:	f105 0110 	add.w	r1, r5, #16
 801b7e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b7ea:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 801b7ee:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801b7f2:	f7fe fb1d 	bl	8019e30 <_ZN7Sensors14TransferBufferIyEEvPT_Pht.isra.0>
 801b7f6:	e77a      	b.n	801b6ee <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x12a>
		if (sensor_data->read_index == 0)
 801b7f8:	b92b      	cbnz	r3, 801b806 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x242>
 801b7fa:	79b2      	ldrb	r2, [r6, #6]
			sensor_data_float[sensor_data->index] = 0; // Clean buffer when start access
 801b7fc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801b7fe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801b802:	2200      	movs	r2, #0
 801b804:	601a      	str	r2, [r3, #0]
		if (I2C_access->access_mode == CODE_MODE)
 801b806:	f819 300a 	ldrb.w	r3, [r9, sl]
 801b80a:	2b05      	cmp	r3, #5
 801b80c:	f47f af6f 	bne.w	801b6ee <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x12a>
 801b810:	79b2      	ldrb	r2, [r6, #6]
			TransferBuffer<float>(&(sensor_data_float[sensor_data->index]), interface->buffer, I2C_access->size);
 801b812:	f105 0a10 	add.w	sl, r5, #16
 801b816:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801b818:	f8b8 c002 	ldrh.w	ip, [r8, #2]
	std::memcpy(&temp, memory_address, sizeof(T));
 801b81c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b820:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	if (temp != 0)
 801b824:	b111      	cbz	r1, 801b82c <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x268>
		temp = temp << (size << 3); // * 8 <=> Shift left by 3 to accumulate reads (MSB first)
 801b826:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801b82a:	4099      	lsls	r1, r3
void Sensors::ProccessReceivedData(I2CInterface* interface) {
 801b82c:	2000      	movs	r0, #0
 801b82e:	460a      	mov	r2, r1
		temp |= (buffer[index] << ((size - 1 - index) << 3));
 801b830:	f10c 38ff 	add.w	r8, ip, #4294967295
 801b834:	4686      	mov	lr, r0
	for (uint8_t index = 0; index < size; index++) {
 801b836:	b2c3      	uxtb	r3, r0
 801b838:	3001      	adds	r0, #1
 801b83a:	4563      	cmp	r3, ip
 801b83c:	db06      	blt.n	801b84c <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x288>
	*memory_address = *reinterpreted_temp;
 801b83e:	f1be 0f00 	cmp.w	lr, #0
 801b842:	bf08      	it	eq
 801b844:	460a      	moveq	r2, r1
 801b846:	f8c9 2000 	str.w	r2, [r9]
}
 801b84a:	e750      	b.n	801b6ee <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x12a>
		temp |= (buffer[index] << ((size - 1 - index) << 3));
 801b84c:	f81a e003 	ldrb.w	lr, [sl, r3]
 801b850:	eba8 0303 	sub.w	r3, r8, r3
 801b854:	00db      	lsls	r3, r3, #3
 801b856:	fa0e f303 	lsl.w	r3, lr, r3
 801b85a:	f04f 0e01 	mov.w	lr, #1
 801b85e:	431a      	orrs	r2, r3
	for (uint8_t index = 0; index < size; index++) {
 801b860:	e7e9      	b.n	801b836 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x272>
 801b862:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
		*(interface->pending_requests[interface->request_index].flag) = true;
 801b864:	2101      	movs	r1, #1
 801b866:	f895 3057 	ldrb.w	r3, [r5, #87]	@ 0x57
		interface->pending_requests.erase(interface->pending_requests.begin() + interface->request_index);
 801b86a:	f105 0070 	add.w	r0, r5, #112	@ 0x70
		*(interface->pending_requests[interface->request_index].flag) = true;
 801b86e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 801b872:	685b      	ldr	r3, [r3, #4]
 801b874:	7019      	strb	r1, [r3, #0]
 801b876:	f895 1057 	ldrb.w	r1, [r5, #87]	@ 0x57
		interface->pending_requests.erase(interface->pending_requests.begin() + interface->request_index);
 801b87a:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 801b87e:	f7ff f97c 	bl	801ab7a <_ZNSt6vectorI11ReadRequestSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE.isra.0>
		return ExitPending(interface);
 801b882:	4629      	mov	r1, r5
 801b884:	4620      	mov	r0, r4
}
 801b886:	b005      	add	sp, #20
 801b888:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return ExitPending(interface);
 801b88c:	f7ff be8a 	b.w	801b5a4 <_ZN7Sensors11ExitPendingEP12I2CInterface>
	} else if (interface->access_source == PENDING_ACCESS) {
 801b890:	f1b8 0f01 	cmp.w	r8, #1
 801b894:	d11e      	bne.n	801b8d4 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x310>
		if (MoveToNextSequence(sensor_data)) {return ReadNextSensor(ID);}
 801b896:	4642      	mov	r2, r8
 801b898:	4631      	mov	r1, r6
 801b89a:	4620      	mov	r0, r4
 801b89c:	f7ff f800 	bl	801a8a0 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab>
 801b8a0:	2800      	cmp	r0, #0
 801b8a2:	f47f af32 	bne.w	801b70a <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x146>
		if (MoveToNextData(sensor)) {return ReadNextSensor(ID);}
 801b8a6:	4642      	mov	r2, r8
 801b8a8:	4639      	mov	r1, r7
 801b8aa:	4620      	mov	r0, r4
 801b8ac:	f7fe ffc4 	bl	801a838 <_ZN7Sensors14MoveToNextDataEP6Sensorb>
 801b8b0:	2800      	cmp	r0, #0
 801b8b2:	f47f af2a 	bne.w	801b70a <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x146>
 801b8b6:	4628      	mov	r0, r5
 801b8b8:	f895 1056 	ldrb.w	r1, [r5, #86]	@ 0x56
 801b8bc:	f850 3f64 	ldr.w	r3, [r0, #100]!
		interface->pending_sensors.erase(interface->pending_sensors.begin() + interface->pending_index);
 801b8c0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801b8c4:	f7fe fb35 	bl	8019f32 <_ZNSt6vectorIP6SensorSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE.isra.0>
		ProccessGroupTermination(interface, sensor_group);
 801b8c8:	9a03      	ldr	r2, [sp, #12]
 801b8ca:	4629      	mov	r1, r5
 801b8cc:	4620      	mov	r0, r4
 801b8ce:	f7fe fd31 	bl	801a334 <_ZN7Sensors24ProccessGroupTerminationEP12I2CInterfaceP11SensorGroup>
 801b8d2:	e7d6      	b.n	801b882 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x2be>
	} else if (interface->access_source == REGULAR_ACCESS) {
 801b8d4:	f1b8 0f00 	cmp.w	r8, #0
 801b8d8:	f47f aecb 	bne.w	801b672 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0xae>
		if (MoveToNextSequence(sensor_data)) {return ReadNextSensor(ID);}
 801b8dc:	2201      	movs	r2, #1
 801b8de:	4631      	mov	r1, r6
 801b8e0:	4620      	mov	r0, r4
 801b8e2:	f7fe ffdd 	bl	801a8a0 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab>
 801b8e6:	2800      	cmp	r0, #0
 801b8e8:	f47f af0f 	bne.w	801b70a <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x146>
		if (MoveToNextData(sensor)) {return ReadNextSensor(ID);}
 801b8ec:	2201      	movs	r2, #1
 801b8ee:	4639      	mov	r1, r7
 801b8f0:	4620      	mov	r0, r4
 801b8f2:	f7fe ffa1 	bl	801a838 <_ZN7Sensors14MoveToNextDataEP6Sensorb>
 801b8f6:	2800      	cmp	r0, #0
 801b8f8:	f47f af07 	bne.w	801b70a <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x146>
		if (MoveToNextSensor(interface, sensor_group)) {return ReadNextSensor(ID);}
 801b8fc:	2301      	movs	r3, #1
 801b8fe:	9a03      	ldr	r2, [sp, #12]
 801b900:	4629      	mov	r1, r5
 801b902:	4620      	mov	r0, r4
 801b904:	f7fe ff80 	bl	801a808 <_ZN7Sensors16MoveToNextSensorEP12I2CInterfaceP11SensorGroupb>
 801b908:	2800      	cmp	r0, #0
 801b90a:	f47f aefe 	bne.w	801b70a <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x146>
		if (MoveToNextGroup(interface)) {return ReadNextSensor(ID);}
 801b90e:	2201      	movs	r2, #1
 801b910:	4629      	mov	r1, r5
 801b912:	4620      	mov	r0, r4
 801b914:	f7fe ff5e 	bl	801a7d4 <_ZN7Sensors15MoveToNextGroupEP12I2CInterfaceb>
 801b918:	2800      	cmp	r0, #0
 801b91a:	f47f aef6 	bne.w	801b70a <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x146>
		return ExitRegular(interface);
 801b91e:	4620      	mov	r0, r4
}
 801b920:	b005      	add	sp, #20
 801b922:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return ExitRegular(interface);
 801b926:	f7ff bd33 	b.w	801b390 <_ZN7Sensors11ExitRegularEP12I2CInterface>
 801b92a:	bf00      	nop
 801b92c:	aaaaaaab 	.word	0xaaaaaaab
 801b930:	cccccccd 	.word	0xcccccccd

0801b934 <_ZN7Sensors17ReceiveSensorDataEP19__I2C_HandleTypeDef>:
void Sensors::ReceiveSensorData(I2C_HandleTypeDef* harware_interface) {
 801b934:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t ID = FindInterfaceIndexWithHandle(harware_interface, &success);
 801b936:	f10d 0207 	add.w	r2, sp, #7
void Sensors::ReceiveSensorData(I2C_HandleTypeDef* harware_interface) {
 801b93a:	4605      	mov	r5, r0
	uint8_t ID = FindInterfaceIndexWithHandle(harware_interface, &success);
 801b93c:	f7fe fd3e 	bl	801a3bc <_ZN7Sensors28FindInterfaceIndexWithHandleEP19__I2C_HandleTypeDefPb>
	if (!success) return;
 801b940:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t ID = FindInterfaceIndexWithHandle(harware_interface, &success);
 801b944:	4604      	mov	r4, r0
	if (!success) return;
 801b946:	b183      	cbz	r3, 801b96a <_ZN7Sensors17ReceiveSensorDataEP19__I2C_HandleTypeDef+0x36>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801b948:	f04f 31ff 	mov.w	r1, #4294967295
 801b94c:	6828      	ldr	r0, [r5, #0]
 801b94e:	f7f1 fa8b 	bl	800ce68 <osSemaphoreAcquire>
 801b952:	692b      	ldr	r3, [r5, #16]
 801b954:	b221      	sxth	r1, r4
	ProccessReceivedData(interface);
 801b956:	4628      	mov	r0, r5
 801b958:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 801b95c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
}
 801b960:	b003      	add	sp, #12
 801b962:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	ProccessReceivedData(interface);
 801b966:	f7ff be2d 	b.w	801b5c4 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface>
}
 801b96a:	b003      	add	sp, #12
 801b96c:	bd30      	pop	{r4, r5, pc}

0801b96e <_ZN7Sensors4SpinEv>:
void Sensors::Spin(void) {
 801b96e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b970:	4605      	mov	r5, r0
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801b972:	f04f 31ff 	mov.w	r1, #4294967295
 801b976:	6800      	ldr	r0, [r0, #0]
 801b978:	f7f1 fa76 	bl	800ce68 <osSemaphoreAcquire>
	if (active) {
 801b97c:	792b      	ldrb	r3, [r5, #4]
 801b97e:	b93b      	cbnz	r3, 801b990 <_ZN7Sensors4SpinEv+0x22>
	osSemaphoreRelease(SensorsSemaphore);
 801b980:	6828      	ldr	r0, [r5, #0]
 801b982:	f7f1 faa5 	bl	800ced0 <osSemaphoreRelease>
	osDelay(period_ms);
 801b986:	68a8      	ldr	r0, [r5, #8]
}
 801b988:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	osDelay(period_ms);
 801b98c:	f7f1 ba02 	b.w	800cd94 <osDelay>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801b990:	e9d5 4604 	ldrd	r4, r6, [r5, #16]
			interface.request_regular_process = true; // flag to restart a new regular reading loop
 801b994:	2701      	movs	r7, #1
 801b996:	347c      	adds	r4, #124	@ 0x7c
		for (I2CInterface &interface : interfaces) {
 801b998:	f1a4 037c 	sub.w	r3, r4, #124	@ 0x7c
 801b99c:	429e      	cmp	r6, r3
 801b99e:	d0ef      	beq.n	801b980 <_ZN7Sensors4SpinEv+0x12>
			if (RegularInterfaceTermination(&interface)) {
 801b9a0:	f814 3c2c 	ldrb.w	r3, [r4, #-44]
			interface.request_regular_process = true; // flag to restart a new regular reading loop
 801b9a4:	f804 7c7b 	strb.w	r7, [r4, #-123]
			if (RegularInterfaceTermination(&interface)) {
 801b9a8:	2bff      	cmp	r3, #255	@ 0xff
 801b9aa:	d121      	bne.n	801b9f0 <_ZN7Sensors4SpinEv+0x82>
					ReadNextSensor(interface.ID);
 801b9ac:	f814 1c7c 	ldrb.w	r1, [r4, #-124]
				if (interface.pending_requests.size() == 0 && interface.pending_sensors.size() == 0) {
 801b9b0:	e954 3203 	ldrd	r3, r2, [r4, #-12]
 801b9b4:	429a      	cmp	r2, r3
 801b9b6:	d10d      	bne.n	801b9d4 <_ZN7Sensors4SpinEv+0x66>
 801b9b8:	e954 3206 	ldrd	r3, r2, [r4, #-24]
 801b9bc:	429a      	cmp	r2, r3
 801b9be:	d109      	bne.n	801b9d4 <_ZN7Sensors4SpinEv+0x66>
				ReadNextSensor(interface.ID);
 801b9c0:	4628      	mov	r0, r5
 801b9c2:	f7ff fafd 	bl	801afc0 <_ZN7Sensors14ReadNextSensorEh>
				osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801b9c6:	f04f 31ff 	mov.w	r1, #4294967295
 801b9ca:	6828      	ldr	r0, [r5, #0]
 801b9cc:	f7f1 fa4c 	bl	800ce68 <osSemaphoreAcquire>
      operator++() _GLIBCXX_NOEXCEPT
 801b9d0:	347c      	adds	r4, #124	@ 0x7c
	return *this;
 801b9d2:	e7e1      	b.n	801b998 <_ZN7Sensors4SpinEv+0x2a>
				} else if (hardware_delay->IsDelayRegistered(interface.ID)) {
 801b9d4:	f8d5 00c4 	ldr.w	r0, [r5, #196]	@ 0xc4
 801b9d8:	f7fa fb75 	bl	80160c6 <_ZN13HardwareDelay17IsDelayRegisteredEh>
 801b9dc:	b140      	cbz	r0, 801b9f0 <_ZN7Sensors4SpinEv+0x82>
					hardware_delay->RemoveDelayMS(interface.ID);
 801b9de:	f814 1c7c 	ldrb.w	r1, [r4, #-124]
 801b9e2:	f8d5 00c4 	ldr.w	r0, [r5, #196]	@ 0xc4
 801b9e6:	f7fa fc7d 	bl	80162e4 <_ZN13HardwareDelay13RemoveDelayMSEh>
				ReadNextSensor(interface.ID);
 801b9ea:	f814 1c7c 	ldrb.w	r1, [r4, #-124]
 801b9ee:	e7e7      	b.n	801b9c0 <_ZN7Sensors4SpinEv+0x52>
			if (interface.error_flag || HAL_GetTick() > interface.activity_timestamp + interface.timeout) {
 801b9f0:	f814 3c7a 	ldrb.w	r3, [r4, #-122]
 801b9f4:	2b00      	cmp	r3, #0
 801b9f6:	d1f8      	bne.n	801b9ea <_ZN7Sensors4SpinEv+0x7c>
 801b9f8:	f7e7 fd86 	bl	8003508 <HAL_GetTick>
 801b9fc:	e954 321e 	ldrd	r3, r2, [r4, #-120]	@ 0x78
 801ba00:	4413      	add	r3, r2
 801ba02:	4298      	cmp	r0, r3
 801ba04:	d8f1      	bhi.n	801b9ea <_ZN7Sensors4SpinEv+0x7c>
 801ba06:	e7e3      	b.n	801b9d0 <_ZN7Sensors4SpinEv+0x62>

0801ba08 <_ZN7Sensors21ReceiveDelayInterruptEh>:
void Sensors::ReceiveDelayInterrupt(uint8_t ID) {
 801ba08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint8_t index = FindInterfaceIndex(ID, &success);
 801ba0c:	f10d 0207 	add.w	r2, sp, #7
void Sensors::ReceiveDelayInterrupt(uint8_t ID) {
 801ba10:	4604      	mov	r4, r0
	uint8_t index = FindInterfaceIndex(ID, &success);
 801ba12:	f7fe fcb0 	bl	801a376 <_ZN7Sensors18FindInterfaceIndexEhPb>
	if (!success) return;
 801ba16:	f89d 3007 	ldrb.w	r3, [sp, #7]
void Sensors::ReceiveDelayInterrupt(uint8_t ID) {
 801ba1a:	460e      	mov	r6, r1
	if (!success) return;
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	f000 8088 	beq.w	801bb32 <_ZN7Sensors21ReceiveDelayInterruptEh+0x12a>
 801ba22:	b200      	sxth	r0, r0
 801ba24:	6925      	ldr	r5, [r4, #16]
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801ba26:	f04f 31ff 	mov.w	r1, #4294967295
 801ba2a:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 801ba2e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 801ba32:	6820      	ldr	r0, [r4, #0]
 801ba34:	f7f1 fa18 	bl	800ce68 <osSemaphoreAcquire>
	if (delay_source == REQUEST_ACCESS) {
 801ba38:	f894 900c 	ldrb.w	r9, [r4, #12]
 801ba3c:	f1b9 0f02 	cmp.w	r9, #2
 801ba40:	d12b      	bne.n	801ba9a <_ZN7Sensors21ReceiveDelayInterruptEh+0x92>
 801ba42:	7b63      	ldrb	r3, [r4, #13]
 801ba44:	6f29      	ldr	r1, [r5, #112]	@ 0x70
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ba46:	4f3c      	ldr	r7, [pc, #240]	@ (801bb38 <_ZN7Sensors21ReceiveDelayInterruptEh+0x130>)
	return *(this->_M_impl._M_start + __n);
 801ba48:	eb01 1143 	add.w	r1, r1, r3, lsl #5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ba4c:	e9d1 0205 	ldrd	r0, r2, [r1, #20]
		if (request_data->read_index >= request_data->sequence.size()) return;
 801ba50:	7c0b      	ldrb	r3, [r1, #16]
 801ba52:	1a12      	subs	r2, r2, r0
 801ba54:	1112      	asrs	r2, r2, #4
 801ba56:	437a      	muls	r2, r7
 801ba58:	4293      	cmp	r3, r2
 801ba5a:	d26a      	bcs.n	801bb32 <_ZN7Sensors21ReceiveDelayInterruptEh+0x12a>
	return *(this->_M_impl._M_start + __n);
 801ba5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801ba60:	011b      	lsls	r3, r3, #4
		if (request_access->access_mode == DELAY_MODE) {
 801ba62:	5cc3      	ldrb	r3, [r0, r3]
 801ba64:	2b04      	cmp	r3, #4
 801ba66:	d15d      	bne.n	801bb24 <_ZN7Sensors21ReceiveDelayInterruptEh+0x11c>
			if (!MoveToNextSequence(request_data)) {
 801ba68:	2201      	movs	r2, #1
 801ba6a:	3108      	adds	r1, #8
 801ba6c:	4620      	mov	r0, r4
 801ba6e:	f7fe ff17 	bl	801a8a0 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab>
 801ba72:	2800      	cmp	r0, #0
 801ba74:	d156      	bne.n	801bb24 <_ZN7Sensors21ReceiveDelayInterruptEh+0x11c>
 801ba76:	4628      	mov	r0, r5
 801ba78:	7b63      	ldrb	r3, [r4, #13]
				*(interface->pending_requests[delayed_index].flag) = true;
 801ba7a:	2201      	movs	r2, #1
 801ba7c:	f850 1f70 	ldr.w	r1, [r0, #112]!
 801ba80:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 801ba84:	684b      	ldr	r3, [r1, #4]
 801ba86:	701a      	strb	r2, [r3, #0]
				interface->pending_requests.erase(interface->pending_requests.begin() + delayed_index);
 801ba88:	f7ff f877 	bl	801ab7a <_ZNSt6vectorI11ReadRequestSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE.isra.0>
					return ExitPending(interface);
 801ba8c:	4629      	mov	r1, r5
 801ba8e:	4620      	mov	r0, r4
}
 801ba90:	b003      	add	sp, #12
 801ba92:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
					return ExitPending(interface);
 801ba96:	f7ff bd85 	b.w	801b5a4 <_ZN7Sensors11ExitPendingEP12I2CInterface>
	} else if (delay_source == PENDING_ACCESS) {
 801ba9a:	f1b9 0f01 	cmp.w	r9, #1
 801ba9e:	d141      	bne.n	801bb24 <_ZN7Sensors21ReceiveDelayInterruptEh+0x11c>
 801baa0:	7b62      	ldrb	r2, [r4, #13]
		SensorGroup* pending_group = FindSensorGroup(pending_sensor->parent, &success);
 801baa2:	4620      	mov	r0, r4
		Sensor* pending_sensor = interface->pending_sensors[delayed_index];
 801baa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801baa6:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
		SensorGroup* pending_group = FindSensorGroup(pending_sensor->parent, &success);
 801baaa:	f10d 0207 	add.w	r2, sp, #7
 801baae:	7879      	ldrb	r1, [r7, #1]
 801bab0:	f7fe fcb3 	bl	801a41a <_ZN7Sensors15FindSensorGroupEhPb>
 801bab4:	4680      	mov	r8, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bab6:	4821      	ldr	r0, [pc, #132]	@ (801bb3c <_ZN7Sensors21ReceiveDelayInterruptEh+0x134>)
		if (pending_sensor->read_index >= pending_sensor->data.size()) return;
 801bab8:	7c3a      	ldrb	r2, [r7, #16]
 801baba:	e9d7 1305 	ldrd	r1, r3, [r7, #20]
 801babe:	1a5b      	subs	r3, r3, r1
 801bac0:	10db      	asrs	r3, r3, #3
 801bac2:	4343      	muls	r3, r0
 801bac4:	429a      	cmp	r2, r3
 801bac6:	d234      	bcs.n	801bb32 <_ZN7Sensors21ReceiveDelayInterruptEh+0x12a>
	return *(this->_M_impl._M_start + __n);
 801bac8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bacc:	f8df c068 	ldr.w	ip, [pc, #104]	@ 801bb38 <_ZN7Sensors21ReceiveDelayInterruptEh+0x130>
	return *(this->_M_impl._M_start + __n);
 801bad0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bad4:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
		if (pending_data->read_index >= pending_data->sequence.size()) return;
 801bad8:	7a0b      	ldrb	r3, [r1, #8]
 801bada:	1a12      	subs	r2, r2, r0
 801badc:	1112      	asrs	r2, r2, #4
 801bade:	fb0c f202 	mul.w	r2, ip, r2
 801bae2:	4293      	cmp	r3, r2
 801bae4:	d225      	bcs.n	801bb32 <_ZN7Sensors21ReceiveDelayInterruptEh+0x12a>
	return *(this->_M_impl._M_start + __n);
 801bae6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801baea:	011b      	lsls	r3, r3, #4
		if (pending_access->access_mode == DELAY_MODE) {
 801baec:	5cc3      	ldrb	r3, [r0, r3]
 801baee:	2b04      	cmp	r3, #4
 801baf0:	d118      	bne.n	801bb24 <_ZN7Sensors21ReceiveDelayInterruptEh+0x11c>
			if (!MoveToNextSequence(pending_data)) {
 801baf2:	464a      	mov	r2, r9
 801baf4:	4620      	mov	r0, r4
 801baf6:	f7fe fed3 	bl	801a8a0 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab>
 801bafa:	b998      	cbnz	r0, 801bb24 <_ZN7Sensors21ReceiveDelayInterruptEh+0x11c>
				if (!MoveToNextData(pending_sensor)) {
 801bafc:	464a      	mov	r2, r9
 801bafe:	4639      	mov	r1, r7
 801bb00:	4620      	mov	r0, r4
 801bb02:	f7fe fe99 	bl	801a838 <_ZN7Sensors14MoveToNextDataEP6Sensorb>
 801bb06:	b968      	cbnz	r0, 801bb24 <_ZN7Sensors21ReceiveDelayInterruptEh+0x11c>
      { return __normal_iterator(_M_current + __n); }
 801bb08:	4628      	mov	r0, r5
 801bb0a:	7b61      	ldrb	r1, [r4, #13]
 801bb0c:	f850 3f64 	ldr.w	r3, [r0, #100]!
					interface->pending_sensors.erase(interface->pending_sensors.begin() + delayed_index);
 801bb10:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801bb14:	f7fe fa0d 	bl	8019f32 <_ZNSt6vectorIP6SensorSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE.isra.0>
					ProccessGroupTermination(interface, pending_group);
 801bb18:	4642      	mov	r2, r8
 801bb1a:	4629      	mov	r1, r5
 801bb1c:	4620      	mov	r0, r4
 801bb1e:	f7fe fc09 	bl	801a334 <_ZN7Sensors24ProccessGroupTerminationEP12I2CInterfaceP11SensorGroup>
 801bb22:	e7b3      	b.n	801ba8c <_ZN7Sensors21ReceiveDelayInterruptEh+0x84>
	return ReadNextSensor(ID);
 801bb24:	4631      	mov	r1, r6
 801bb26:	4620      	mov	r0, r4
}
 801bb28:	b003      	add	sp, #12
 801bb2a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return ReadNextSensor(ID);
 801bb2e:	f7ff ba47 	b.w	801afc0 <_ZN7Sensors14ReadNextSensorEh>
}
 801bb32:	b003      	add	sp, #12
 801bb34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bb38:	cccccccd 	.word	0xcccccccd
 801bb3c:	aaaaaaab 	.word	0xaaaaaaab

0801bb40 <_ZN7Sensors16HardwareDelayISREPvh>:
void Sensors::HardwareDelayISR(void* context, uint8_t ID) {
 801bb40:	b538      	push	{r3, r4, r5, lr}
 801bb42:	4604      	mov	r4, r0
 801bb44:	460d      	mov	r5, r1
	osSemaphoreAcquire(self->SensorsSemaphore, osWaitForever);
 801bb46:	6800      	ldr	r0, [r0, #0]
 801bb48:	f04f 31ff 	mov.w	r1, #4294967295
 801bb4c:	f7f1 f98c 	bl	800ce68 <osSemaphoreAcquire>
	osSemaphoreRelease(self->SensorsSemaphore);
 801bb50:	6820      	ldr	r0, [r4, #0]
 801bb52:	f7f1 f9bd 	bl	800ced0 <osSemaphoreRelease>
	self->ReceiveDelayInterrupt(ID);
 801bb56:	4629      	mov	r1, r5
 801bb58:	4620      	mov	r0, r4
}
 801bb5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	self->ReceiveDelayInterrupt(ID);
 801bb5e:	f7ff bf53 	b.w	801ba08 <_ZN7Sensors21ReceiveDelayInterruptEh>
	...

0801bb64 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE2atEj>:
      at(size_type __n)
 801bb64:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bb66:	e9d0 5400 	ldrd	r5, r4, [r0]
 801bb6a:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 801bb6c:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bb70:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 801bb74:	d302      	bcc.n	801bb7c <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801bb76:	4803      	ldr	r0, [pc, #12]	@ (801bb84 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE2atEj+0x20>)
 801bb78:	f002 faff 	bl	801e17a <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 801bb7c:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 801bb80:	bd38      	pop	{r3, r4, r5, pc}
 801bb82:	bf00      	nop
 801bb84:	0801f44c 	.word	0x0801f44c

0801bb88 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 801bb88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801bb8c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
      vector<_Tp, _Alloc>::
 801bb90:	4607      	mov	r7, r0
 801bb92:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801bb94:	4293      	cmp	r3, r2
 801bb96:	d005      	beq.n	801bba4 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801bb98:	880a      	ldrh	r2, [r1, #0]
 801bb9a:	f823 2b02 	strh.w	r2, [r3], #2
	    ++this->_M_impl._M_finish;
 801bb9e:	6043      	str	r3, [r0, #4]
      }
 801bba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bba4:	f8d0 8000 	ldr.w	r8, [r0]
	if (max_size() - size() < __n)
 801bba8:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bbac:	eba3 0608 	sub.w	r6, r3, r8
	if (max_size() - size() < __n)
 801bbb0:	ebb2 0f66 	cmp.w	r2, r6, asr #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bbb4:	ea4f 0466 	mov.w	r4, r6, asr #1
	if (max_size() - size() < __n)
 801bbb8:	d102      	bne.n	801bbc0 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x38>
	  __throw_length_error(__N(__s));
 801bbba:	4818      	ldr	r0, [pc, #96]	@ (801bc1c <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x94>)
 801bbbc:	f002 fada 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 801bbc0:	4543      	cmp	r3, r8
 801bbc2:	bf14      	ite	ne
 801bbc4:	4621      	movne	r1, r4
 801bbc6:	2101      	moveq	r1, #1
 801bbc8:	1864      	adds	r4, r4, r1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801bbca:	d222      	bcs.n	801bc12 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x8a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801bbcc:	b31c      	cbz	r4, 801bc16 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x8e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801bbce:	4294      	cmp	r4, r2
 801bbd0:	bf28      	it	cs
 801bbd2:	4614      	movcs	r4, r2
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801bbd4:	0060      	lsls	r0, r4, #1
 801bbd6:	f002 fa18 	bl	801e00a <_Znwj>
 801bbda:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801bbdc:	f8b9 3000 	ldrh.w	r3, [r9]
      if (__count > 0)
 801bbe0:	2e00      	cmp	r6, #0
 801bbe2:	53ab      	strh	r3, [r5, r6]
 801bbe4:	dd04      	ble.n	801bbf0 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x68>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801bbe6:	4632      	mov	r2, r6
 801bbe8:	4641      	mov	r1, r8
 801bbea:	4628      	mov	r0, r5
 801bbec:	f003 f98a 	bl	801ef04 <memmove>
	      ++__new_finish;
 801bbf0:	3602      	adds	r6, #2
 801bbf2:	442e      	add	r6, r5
	if (__p)
 801bbf4:	f1b8 0f00 	cmp.w	r8, #0
 801bbf8:	d005      	beq.n	801bc06 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
 801bbfa:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801bbfc:	4640      	mov	r0, r8
 801bbfe:	eba1 0108 	sub.w	r1, r1, r8
 801bc02:	f002 f9dd 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 801bc06:	e9c7 5600 	strd	r5, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801bc0a:	eb05 0544 	add.w	r5, r5, r4, lsl #1
 801bc0e:	60bd      	str	r5, [r7, #8]
      }
 801bc10:	e7c6      	b.n	801bba0 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x18>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801bc12:	4614      	mov	r4, r2
 801bc14:	e7de      	b.n	801bbd4 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x4c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801bc16:	4625      	mov	r5, r4
 801bc18:	e7e0      	b.n	801bbdc <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x54>
 801bc1a:	bf00      	nop
 801bc1c:	0801f20c 	.word	0x0801f20c

0801bc20 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 801bc20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801bc24:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
      vector<_Tp, _Alloc>::
 801bc28:	4607      	mov	r7, r0
 801bc2a:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801bc2c:	4293      	cmp	r3, r2
 801bc2e:	d005      	beq.n	801bc3c <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801bc30:	680a      	ldr	r2, [r1, #0]
 801bc32:	f843 2b04 	str.w	r2, [r3], #4
	    ++this->_M_impl._M_finish;
 801bc36:	6043      	str	r3, [r0, #4]
      }
 801bc38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bc3c:	f8d0 8000 	ldr.w	r8, [r0]
	if (max_size() - size() < __n)
 801bc40:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bc44:	eba3 0608 	sub.w	r6, r3, r8
	if (max_size() - size() < __n)
 801bc48:	ebb2 0fa6 	cmp.w	r2, r6, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bc4c:	ea4f 04a6 	mov.w	r4, r6, asr #2
	if (max_size() - size() < __n)
 801bc50:	d102      	bne.n	801bc58 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x38>
	  __throw_length_error(__N(__s));
 801bc52:	4818      	ldr	r0, [pc, #96]	@ (801bcb4 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x94>)
 801bc54:	f002 fa8e 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 801bc58:	4543      	cmp	r3, r8
 801bc5a:	bf14      	ite	ne
 801bc5c:	4621      	movne	r1, r4
 801bc5e:	2101      	moveq	r1, #1
 801bc60:	1864      	adds	r4, r4, r1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801bc62:	d222      	bcs.n	801bcaa <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x8a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801bc64:	b31c      	cbz	r4, 801bcae <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x8e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801bc66:	4294      	cmp	r4, r2
 801bc68:	bf28      	it	cs
 801bc6a:	4614      	movcs	r4, r2
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801bc6c:	00a0      	lsls	r0, r4, #2
 801bc6e:	f002 f9cc 	bl	801e00a <_Znwj>
 801bc72:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801bc74:	f8d9 3000 	ldr.w	r3, [r9]
      if (__count > 0)
 801bc78:	2e00      	cmp	r6, #0
 801bc7a:	51ab      	str	r3, [r5, r6]
 801bc7c:	dd04      	ble.n	801bc88 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x68>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801bc7e:	4632      	mov	r2, r6
 801bc80:	4641      	mov	r1, r8
 801bc82:	4628      	mov	r0, r5
 801bc84:	f003 f93e 	bl	801ef04 <memmove>
	      ++__new_finish;
 801bc88:	3604      	adds	r6, #4
 801bc8a:	442e      	add	r6, r5
	if (__p)
 801bc8c:	f1b8 0f00 	cmp.w	r8, #0
 801bc90:	d005      	beq.n	801bc9e <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
 801bc92:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801bc94:	4640      	mov	r0, r8
 801bc96:	eba1 0108 	sub.w	r1, r1, r8
 801bc9a:	f002 f991 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 801bc9e:	e9c7 5600 	strd	r5, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801bca2:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801bca6:	60bd      	str	r5, [r7, #8]
      }
 801bca8:	e7c6      	b.n	801bc38 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x18>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801bcaa:	4614      	mov	r4, r2
 801bcac:	e7de      	b.n	801bc6c <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x4c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801bcae:	4625      	mov	r5, r4
 801bcb0:	e7e0      	b.n	801bc74 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x54>
 801bcb2:	bf00      	nop
 801bcb4:	0801f20c 	.word	0x0801f20c

0801bcb8 <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 801bcb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801bcbc:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
      vector<_Tp, _Alloc>::
 801bcc0:	4607      	mov	r7, r0
 801bcc2:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801bcc4:	4293      	cmp	r3, r2
 801bcc6:	d006      	beq.n	801bcd6 <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801bcc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bccc:	e8e3 0102 	strd	r0, r1, [r3], #8
	    ++this->_M_impl._M_finish;
 801bcd0:	607b      	str	r3, [r7, #4]
      }
 801bcd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bcd6:	f8d0 8000 	ldr.w	r8, [r0]
	if (max_size() - size() < __n)
 801bcda:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bcde:	eba3 0608 	sub.w	r6, r3, r8
	if (max_size() - size() < __n)
 801bce2:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bce6:	ea4f 04e6 	mov.w	r4, r6, asr #3
	if (max_size() - size() < __n)
 801bcea:	d102      	bne.n	801bcf2 <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_+0x3a>
	  __throw_length_error(__N(__s));
 801bcec:	4818      	ldr	r0, [pc, #96]	@ (801bd50 <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_+0x98>)
 801bcee:	f002 fa41 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 801bcf2:	4543      	cmp	r3, r8
 801bcf4:	bf14      	ite	ne
 801bcf6:	4621      	movne	r1, r4
 801bcf8:	2101      	moveq	r1, #1
 801bcfa:	1864      	adds	r4, r4, r1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801bcfc:	d224      	bcs.n	801bd48 <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_+0x90>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801bcfe:	b32c      	cbz	r4, 801bd4c <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_+0x94>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801bd00:	4294      	cmp	r4, r2
 801bd02:	bf28      	it	cs
 801bd04:	4614      	movcs	r4, r2
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801bd06:	00e0      	lsls	r0, r4, #3
 801bd08:	f002 f97f 	bl	801e00a <_Znwj>
 801bd0c:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801bd0e:	19ab      	adds	r3, r5, r6
      if (__count > 0)
 801bd10:	2e00      	cmp	r6, #0
 801bd12:	e9d9 0100 	ldrd	r0, r1, [r9]
 801bd16:	e9c3 0100 	strd	r0, r1, [r3]
 801bd1a:	dd04      	ble.n	801bd26 <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_+0x6e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801bd1c:	4632      	mov	r2, r6
 801bd1e:	4641      	mov	r1, r8
 801bd20:	4628      	mov	r0, r5
 801bd22:	f003 f8ef 	bl	801ef04 <memmove>
	      ++__new_finish;
 801bd26:	3608      	adds	r6, #8
 801bd28:	442e      	add	r6, r5
	if (__p)
 801bd2a:	f1b8 0f00 	cmp.w	r8, #0
 801bd2e:	d005      	beq.n	801bd3c <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_+0x84>
		    this->_M_impl._M_end_of_storage - __old_start);
 801bd30:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801bd32:	4640      	mov	r0, r8
 801bd34:	eba1 0108 	sub.w	r1, r1, r8
 801bd38:	f002 f942 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 801bd3c:	e9c7 5600 	strd	r5, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801bd40:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801bd44:	60bd      	str	r5, [r7, #8]
      }
 801bd46:	e7c4      	b.n	801bcd2 <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_+0x1a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801bd48:	4614      	mov	r4, r2
 801bd4a:	e7dc      	b.n	801bd06 <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_+0x4e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801bd4c:	4625      	mov	r5, r4
 801bd4e:	e7de      	b.n	801bd0e <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_+0x56>
 801bd50:	0801f20c 	.word	0x0801f20c

0801bd54 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 801bd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801bd58:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
      vector<_Tp, _Alloc>::
 801bd5c:	4607      	mov	r7, r0
 801bd5e:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801bd60:	4293      	cmp	r3, r2
 801bd62:	d005      	beq.n	801bd70 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801bd64:	680a      	ldr	r2, [r1, #0]
 801bd66:	f843 2b04 	str.w	r2, [r3], #4
	    ++this->_M_impl._M_finish;
 801bd6a:	6043      	str	r3, [r0, #4]
      }
 801bd6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bd70:	f8d0 8000 	ldr.w	r8, [r0]
	if (max_size() - size() < __n)
 801bd74:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bd78:	eba3 0608 	sub.w	r6, r3, r8
	if (max_size() - size() < __n)
 801bd7c:	ebb2 0fa6 	cmp.w	r2, r6, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bd80:	ea4f 04a6 	mov.w	r4, r6, asr #2
	if (max_size() - size() < __n)
 801bd84:	d102      	bne.n	801bd8c <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x38>
	  __throw_length_error(__N(__s));
 801bd86:	4818      	ldr	r0, [pc, #96]	@ (801bde8 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x94>)
 801bd88:	f002 f9f4 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 801bd8c:	4543      	cmp	r3, r8
 801bd8e:	bf14      	ite	ne
 801bd90:	4621      	movne	r1, r4
 801bd92:	2101      	moveq	r1, #1
 801bd94:	1864      	adds	r4, r4, r1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801bd96:	d223      	bcs.n	801bde0 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x8c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801bd98:	b324      	cbz	r4, 801bde4 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x90>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801bd9a:	4294      	cmp	r4, r2
 801bd9c:	bf28      	it	cs
 801bd9e:	4614      	movcs	r4, r2
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801bda0:	00a0      	lsls	r0, r4, #2
 801bda2:	f002 f932 	bl	801e00a <_Znwj>
 801bda6:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801bda8:	19ab      	adds	r3, r5, r6
 801bdaa:	f8d9 2000 	ldr.w	r2, [r9]
      if (__count > 0)
 801bdae:	2e00      	cmp	r6, #0
 801bdb0:	601a      	str	r2, [r3, #0]
 801bdb2:	dd04      	ble.n	801bdbe <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x6a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801bdb4:	4632      	mov	r2, r6
 801bdb6:	4641      	mov	r1, r8
 801bdb8:	4628      	mov	r0, r5
 801bdba:	f003 f8a3 	bl	801ef04 <memmove>
	      ++__new_finish;
 801bdbe:	3604      	adds	r6, #4
 801bdc0:	442e      	add	r6, r5
	if (__p)
 801bdc2:	f1b8 0f00 	cmp.w	r8, #0
 801bdc6:	d005      	beq.n	801bdd4 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x80>
		    this->_M_impl._M_end_of_storage - __old_start);
 801bdc8:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801bdca:	4640      	mov	r0, r8
 801bdcc:	eba1 0108 	sub.w	r1, r1, r8
 801bdd0:	f002 f8f6 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 801bdd4:	e9c7 5600 	strd	r5, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801bdd8:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801bddc:	60bd      	str	r5, [r7, #8]
      }
 801bdde:	e7c5      	b.n	801bd6c <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x18>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801bde0:	4614      	mov	r4, r2
 801bde2:	e7dd      	b.n	801bda0 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x4c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801bde4:	4625      	mov	r5, r4
 801bde6:	e7df      	b.n	801bda8 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x54>
 801bde8:	0801f20c 	.word	0x0801f20c

0801bdec <_ZN7Sensors21AddMemoryReadSequenceEhttt>:
bool Sensors::AddMemoryReadSequence(uint8_t sensor_ID, uint16_t sensor_register, uint16_t memory_address, uint16_t size) {
 801bdec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bdf0:	b096      	sub	sp, #88	@ 0x58
 801bdf2:	4698      	mov	r8, r3
 801bdf4:	4604      	mov	r4, r0
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 801bdf6:	f10d 0307 	add.w	r3, sp, #7
bool Sensors::AddMemoryReadSequence(uint8_t sensor_ID, uint16_t sensor_register, uint16_t memory_address, uint16_t size) {
 801bdfa:	f8bd 7070 	ldrh.w	r7, [sp, #112]	@ 0x70
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 801bdfe:	f7fe fc6c 	bl	801a6da <_ZN7Sensors14FindSensorDataEhtPb>
	if (!success) return false;
 801be02:	f89d 6007 	ldrb.w	r6, [sp, #7]
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 801be06:	4605      	mov	r5, r0
	if (!success) return false;
 801be08:	b926      	cbnz	r6, 801be14 <_ZN7Sensors21AddMemoryReadSequenceEhttt+0x28>
 801be0a:	2600      	movs	r6, #0
}
 801be0c:	4630      	mov	r0, r6
 801be0e:	b016      	add	sp, #88	@ 0x58
 801be10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (size > SENSOR_BUFFER_SIZE) return false; 								// Check that the sensor read buffer has enough space to save the read value
 801be14:	2f40      	cmp	r7, #64	@ 0x40
 801be16:	d8f8      	bhi.n	801be0a <_ZN7Sensors21AddMemoryReadSequenceEhttt+0x1e>
	if (size > registers->GetTypeSize(sensor_data->type)) return false;			// Check that the size doesn't exceed the register type size
 801be18:	79c1      	ldrb	r1, [r0, #7]
 801be1a:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801be1e:	f7fd fdc9 	bl	80199b4 <_ZN9Registers11GetTypeSizeEh>
 801be22:	42b8      	cmp	r0, r7
 801be24:	d3f1      	bcc.n	801be0a <_ZN7Sensors21AddMemoryReadSequenceEhttt+0x1e>
	I2C_access.access_mode = MEM_READ_MODE;
 801be26:	2301      	movs	r3, #1
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801be28:	f04f 31ff 	mov.w	r1, #4294967295
 801be2c:	6820      	ldr	r0, [r4, #0]
	I2C_access.access_mode = MEM_READ_MODE;
 801be2e:	f88d 3008 	strb.w	r3, [sp, #8]
	I2C_access.memory_address = memory_address;
 801be32:	f8ad 800c 	strh.w	r8, [sp, #12]
	I2C_access.size = size;
 801be36:	f8ad 700a 	strh.w	r7, [sp, #10]
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801be3a:	f7f1 f815 	bl	800ce68 <osSemaphoreAcquire>
	sensor_data->sequence.push_back(I2C_access);
 801be3e:	f105 000c 	add.w	r0, r5, #12
 801be42:	a902      	add	r1, sp, #8
 801be44:	f7f4 f97e 	bl	8010144 <_ZNSt6vectorI9I2CAccessSaIS0_EE9push_backERKS0_>
	osSemaphoreRelease(SensorsSemaphore);
 801be48:	6820      	ldr	r0, [r4, #0]
 801be4a:	f7f1 f841 	bl	800ced0 <osSemaphoreRelease>
	return true;
 801be4e:	e7dd      	b.n	801be0c <_ZN7Sensors21AddMemoryReadSequenceEhttt+0x20>

0801be50 <_ZN9Registers11AddRegisterIhEEbt>:
bool Registers::AddRegister(uint16_t ID) {
 801be50:	b570      	push	{r4, r5, r6, lr}
 801be52:	4604      	mov	r4, r0
 801be54:	b086      	sub	sp, #24
 801be56:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801be58:	6800      	ldr	r0, [r0, #0]
 801be5a:	f04f 31ff 	mov.w	r1, #4294967295
 801be5e:	f7f1 f803 	bl	800ce68 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801be62:	f10d 0207 	add.w	r2, sp, #7
 801be66:	4631      	mov	r1, r6
 801be68:	4620      	mov	r0, r4
 801be6a:	f7fd fcfa 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801be6e:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801be72:	b12d      	cbz	r5, 801be80 <_ZN9Registers11AddRegisterIhEEbt+0x30>
		osSemaphoreRelease(RegistersSemaphore);
 801be74:	6820      	ldr	r0, [r4, #0]
 801be76:	f7f1 f82b 	bl	800ced0 <osSemaphoreRelease>
		return false;
 801be7a:	2000      	movs	r0, #0
}
 801be7c:	b006      	add	sp, #24
 801be7e:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801be80:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 801be84:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801be88:	f7fd ff84 	bl	8019d94 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 801be8c:	2301      	movs	r3, #1
 801be8e:	f8ad 600a 	strh.w	r6, [sp, #10]
 801be92:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801be96:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 801be9a:	f88d 000c 	strb.w	r0, [sp, #12]
 801be9e:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 801bea2:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 801bea6:	b11b      	cbz	r3, 801beb0 <_ZN9Registers11AddRegisterIhEEbt+0x60>
		registers.push_back(configuration_);
 801bea8:	a902      	add	r1, sp, #8
 801beaa:	1d20      	adds	r0, r4, #4
 801beac:	f7f4 f80e 	bl	800fecc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
	osSemaphoreRelease(RegistersSemaphore);
 801beb0:	6820      	ldr	r0, [r4, #0]
 801beb2:	f7f1 f80d 	bl	800ced0 <osSemaphoreRelease>
	return success;
 801beb6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801beba:	e7df      	b.n	801be7c <_ZN9Registers11AddRegisterIhEEbt+0x2c>

0801bebc <_ZN9Registers11AddRegisterItEEbt>:
bool Registers::AddRegister(uint16_t ID) {
 801bebc:	b570      	push	{r4, r5, r6, lr}
 801bebe:	4604      	mov	r4, r0
 801bec0:	b086      	sub	sp, #24
 801bec2:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801bec4:	6800      	ldr	r0, [r0, #0]
 801bec6:	f04f 31ff 	mov.w	r1, #4294967295
 801beca:	f7f0 ffcd 	bl	800ce68 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801bece:	f10d 0207 	add.w	r2, sp, #7
 801bed2:	4631      	mov	r1, r6
 801bed4:	4620      	mov	r0, r4
 801bed6:	f7fd fcc4 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801beda:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801bede:	b12d      	cbz	r5, 801beec <_ZN9Registers11AddRegisterItEEbt+0x30>
		osSemaphoreRelease(RegistersSemaphore);
 801bee0:	6820      	ldr	r0, [r4, #0]
 801bee2:	f7f0 fff5 	bl	800ced0 <osSemaphoreRelease>
		return false;
 801bee6:	2000      	movs	r0, #0
}
 801bee8:	b006      	add	sp, #24
 801beea:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801beec:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 801bef0:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801bef4:	f7fd ff00 	bl	8019cf8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	configuration_.register_info = register_;
 801bef8:	2301      	movs	r3, #1
 801befa:	f8ad 600a 	strh.w	r6, [sp, #10]
 801befe:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801bf02:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 801bf06:	f88d 000c 	strb.w	r0, [sp, #12]
 801bf0a:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 801bf0e:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 801bf12:	b11b      	cbz	r3, 801bf1c <_ZN9Registers11AddRegisterItEEbt+0x60>
		registers.push_back(configuration_);
 801bf14:	a902      	add	r1, sp, #8
 801bf16:	1d20      	adds	r0, r4, #4
 801bf18:	f7f3 ffd8 	bl	800fecc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
	osSemaphoreRelease(RegistersSemaphore);
 801bf1c:	6820      	ldr	r0, [r4, #0]
 801bf1e:	f7f0 ffd7 	bl	800ced0 <osSemaphoreRelease>
	return success;
 801bf22:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801bf26:	e7df      	b.n	801bee8 <_ZN9Registers11AddRegisterItEEbt+0x2c>

0801bf28 <_ZN9Registers11AddRegisterImEEbt>:
bool Registers::AddRegister(uint16_t ID) {
 801bf28:	b570      	push	{r4, r5, r6, lr}
 801bf2a:	4604      	mov	r4, r0
 801bf2c:	b086      	sub	sp, #24
 801bf2e:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801bf30:	6800      	ldr	r0, [r0, #0]
 801bf32:	f04f 31ff 	mov.w	r1, #4294967295
 801bf36:	f7f0 ff97 	bl	800ce68 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801bf3a:	f10d 0207 	add.w	r2, sp, #7
 801bf3e:	4631      	mov	r1, r6
 801bf40:	4620      	mov	r0, r4
 801bf42:	f7fd fc8e 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801bf46:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801bf4a:	b12d      	cbz	r5, 801bf58 <_ZN9Registers11AddRegisterImEEbt+0x30>
		osSemaphoreRelease(RegistersSemaphore);
 801bf4c:	6820      	ldr	r0, [r4, #0]
 801bf4e:	f7f0 ffbf 	bl	800ced0 <osSemaphoreRelease>
		return false;
 801bf52:	2000      	movs	r0, #0
}
 801bf54:	b006      	add	sp, #24
 801bf56:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801bf58:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 801bf5c:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801bf60:	f7fd fe7c 	bl	8019c5c <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	configuration_.register_info = register_;
 801bf64:	2301      	movs	r3, #1
 801bf66:	f8ad 600a 	strh.w	r6, [sp, #10]
 801bf6a:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801bf6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 801bf72:	f88d 000c 	strb.w	r0, [sp, #12]
 801bf76:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 801bf7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 801bf7e:	b11b      	cbz	r3, 801bf88 <_ZN9Registers11AddRegisterImEEbt+0x60>
		registers.push_back(configuration_);
 801bf80:	a902      	add	r1, sp, #8
 801bf82:	1d20      	adds	r0, r4, #4
 801bf84:	f7f3 ffa2 	bl	800fecc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
	osSemaphoreRelease(RegistersSemaphore);
 801bf88:	6820      	ldr	r0, [r4, #0]
 801bf8a:	f7f0 ffa1 	bl	800ced0 <osSemaphoreRelease>
	return success;
 801bf8e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801bf92:	e7df      	b.n	801bf54 <_ZN9Registers11AddRegisterImEEbt+0x2c>

0801bf94 <_ZN9Registers18AddRegisterPointerIhEEbtPT_>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801bf94:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf96:	460c      	mov	r4, r1
 801bf98:	b087      	sub	sp, #28
 801bf9a:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801bf9c:	f04f 31ff 	mov.w	r1, #4294967295
 801bfa0:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801bfa2:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801bfa4:	f7f0 ff60 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801bfa8:	4621      	mov	r1, r4
 801bfaa:	f10d 0207 	add.w	r2, sp, #7
 801bfae:	4628      	mov	r0, r5
 801bfb0:	f7fd fc57 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801bfb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801bfb8:	4604      	mov	r4, r0
	if (!success) {
 801bfba:	b933      	cbnz	r3, 801bfca <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0x36>
		return false;
 801bfbc:	2700      	movs	r7, #0
		osSemaphoreRelease(RegistersSemaphore);
 801bfbe:	6828      	ldr	r0, [r5, #0]
 801bfc0:	f7f0 ff86 	bl	800ced0 <osSemaphoreRelease>
}
 801bfc4:	4638      	mov	r0, r7
 801bfc6:	b007      	add	sp, #28
 801bfc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801bfca:	f10d 0007 	add.w	r0, sp, #7
 801bfce:	f7fd fee1 	bl	8019d94 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 801bfd2:	f89d 7007 	ldrb.w	r7, [sp, #7]
 801bfd6:	2f00      	cmp	r7, #0
 801bfd8:	d0f0      	beq.n	801bfbc <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0x28>
	if (target_register->register_info.type != registered_type) {
 801bfda:	7923      	ldrb	r3, [r4, #4]
 801bfdc:	4283      	cmp	r3, r0
 801bfde:	d1ed      	bne.n	801bfbc <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 801bfe0:	3304      	adds	r3, #4
 801bfe2:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801bfe6:	2800      	cmp	r0, #0
 801bfe8:	d0e8      	beq.n	801bfbc <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801bfea:	7823      	ldrb	r3, [r4, #0]
 801bfec:	b99b      	cbnz	r3, 801c016 <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0x82>
 801bfee:	7863      	ldrb	r3, [r4, #1]
 801bff0:	b98b      	cbnz	r3, 801c016 <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0x82>
		target_callback_list->push_back(callback);
 801bff2:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 801bff4:	9602      	str	r6, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bff6:	e9d0 2300 	ldrd	r2, r3, [r0]
 801bffa:	1a9b      	subs	r3, r3, r2
 801bffc:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801bffe:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 801c000:	f7f4 fe1c 	bl	8010c3c <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 801c004:	2301      	movs	r3, #1
	osSemaphoreRelease(RegistersSemaphore);
 801c006:	6828      	ldr	r0, [r5, #0]
	target_register->mode.pointer = true;
 801c008:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 801c00a:	f240 1301 	movw	r3, #257	@ 0x101
 801c00e:	8123      	strh	r3, [r4, #8]
	osSemaphoreRelease(RegistersSemaphore);
 801c010:	f7f0 ff5e 	bl	800ced0 <osSemaphoreRelease>
	return true;
 801c014:	e7d6      	b.n	801bfc4 <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0x30>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801c016:	8961      	ldrh	r1, [r4, #10]
 801c018:	f7f4 fcd4 	bl	80109c4 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->pointer = pointer;
 801c01c:	6006      	str	r6, [r0, #0]
 801c01e:	e7f1      	b.n	801c004 <_ZN9Registers18AddRegisterPointerIhEEbtPT_+0x70>

0801c020 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801c020:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c022:	460c      	mov	r4, r1
 801c024:	b087      	sub	sp, #28
 801c026:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801c028:	f04f 31ff 	mov.w	r1, #4294967295
 801c02c:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801c02e:	461e      	mov	r6, r3
 801c030:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801c032:	f7f0 ff19 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801c036:	4621      	mov	r1, r4
 801c038:	f10d 0207 	add.w	r2, sp, #7
 801c03c:	4628      	mov	r0, r5
 801c03e:	f7fd fc10 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801c042:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801c046:	4604      	mov	r4, r0
	if (!success) {
 801c048:	b923      	cbnz	r3, 801c054 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 801c04a:	6828      	ldr	r0, [r5, #0]
 801c04c:	f7f0 ff40 	bl	800ced0 <osSemaphoreRelease>
}
 801c050:	b007      	add	sp, #28
 801c052:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801c054:	f10d 0007 	add.w	r0, sp, #7
 801c058:	f7fd fe9c 	bl	8019d94 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 801c05c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801c060:	2b00      	cmp	r3, #0
 801c062:	d0f2      	beq.n	801c04a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 801c064:	7923      	ldrb	r3, [r4, #4]
 801c066:	4298      	cmp	r0, r3
 801c068:	d1ef      	bne.n	801c04a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 801c06a:	3004      	adds	r0, #4
 801c06c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801c070:	2800      	cmp	r0, #0
 801c072:	d0ea      	beq.n	801c04a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801c074:	7823      	ldrb	r3, [r4, #0]
 801c076:	b983      	cbnz	r3, 801c09a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 801c078:	7863      	ldrb	r3, [r4, #1]
 801c07a:	b973      	cbnz	r3, 801c09a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 801c07c:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 801c07e:	a902      	add	r1, sp, #8
 801c080:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 801c084:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801c088:	1a9b      	subs	r3, r3, r2
 801c08a:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801c08c:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 801c08e:	f7f4 fdd5 	bl	8010c3c <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 801c092:	2301      	movs	r3, #1
 801c094:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 801c096:	7223      	strb	r3, [r4, #8]
 801c098:	e7d7      	b.n	801c04a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801c09a:	8961      	ldrh	r1, [r4, #10]
 801c09c:	f7f4 fc92 	bl	80109c4 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 801c0a0:	e9c0 7601 	strd	r7, r6, [r0, #4]
 801c0a4:	e7f5      	b.n	801c092 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x72>

0801c0a6 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 801c0a6:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801c0a8:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 801c0ac:	4605      	mov	r5, r0
 801c0ae:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801c0b0:	429c      	cmp	r4, r3
 801c0b2:	d005      	beq.n	801c0c0 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE9push_backERKS1_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801c0b4:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 801c0b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801c0ba:	3410      	adds	r4, #16
 801c0bc:	606c      	str	r4, [r5, #4]
      }
 801c0be:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 801c0c0:	4621      	mov	r1, r4
 801c0c2:	f7fc fca5 	bl	8018a10 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 801c0c6:	e7fa      	b.n	801c0be <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE9push_backERKS1_+0x18>

0801c0c8 <_ZN9Registers18AddRegisterPointerItEEbtPT_>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801c0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0ca:	460c      	mov	r4, r1
 801c0cc:	b087      	sub	sp, #28
 801c0ce:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801c0d0:	f04f 31ff 	mov.w	r1, #4294967295
 801c0d4:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801c0d6:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801c0d8:	f7f0 fec6 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801c0dc:	4621      	mov	r1, r4
 801c0de:	f10d 0207 	add.w	r2, sp, #7
 801c0e2:	4628      	mov	r0, r5
 801c0e4:	f7fd fbbd 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801c0e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801c0ec:	4604      	mov	r4, r0
	if (!success) {
 801c0ee:	b933      	cbnz	r3, 801c0fe <_ZN9Registers18AddRegisterPointerItEEbtPT_+0x36>
		return false;
 801c0f0:	2700      	movs	r7, #0
		osSemaphoreRelease(RegistersSemaphore);
 801c0f2:	6828      	ldr	r0, [r5, #0]
 801c0f4:	f7f0 feec 	bl	800ced0 <osSemaphoreRelease>
}
 801c0f8:	4638      	mov	r0, r7
 801c0fa:	b007      	add	sp, #28
 801c0fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801c0fe:	f10d 0007 	add.w	r0, sp, #7
 801c102:	f7fd fdf9 	bl	8019cf8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	if (!success) {
 801c106:	f89d 7007 	ldrb.w	r7, [sp, #7]
 801c10a:	2f00      	cmp	r7, #0
 801c10c:	d0f0      	beq.n	801c0f0 <_ZN9Registers18AddRegisterPointerItEEbtPT_+0x28>
	if (target_register->register_info.type != registered_type) {
 801c10e:	7923      	ldrb	r3, [r4, #4]
 801c110:	4283      	cmp	r3, r0
 801c112:	d1ed      	bne.n	801c0f0 <_ZN9Registers18AddRegisterPointerItEEbtPT_+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 801c114:	3304      	adds	r3, #4
 801c116:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801c11a:	2800      	cmp	r0, #0
 801c11c:	d0e8      	beq.n	801c0f0 <_ZN9Registers18AddRegisterPointerItEEbtPT_+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801c11e:	7823      	ldrb	r3, [r4, #0]
 801c120:	b99b      	cbnz	r3, 801c14a <_ZN9Registers18AddRegisterPointerItEEbtPT_+0x82>
 801c122:	7863      	ldrb	r3, [r4, #1]
 801c124:	b98b      	cbnz	r3, 801c14a <_ZN9Registers18AddRegisterPointerItEEbtPT_+0x82>
		target_callback_list->push_back(callback);
 801c126:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 801c128:	9602      	str	r6, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801c12a:	e9d0 2300 	ldrd	r2, r3, [r0]
 801c12e:	1a9b      	subs	r3, r3, r2
 801c130:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801c132:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 801c134:	f7ff ffb7 	bl	801c0a6 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 801c138:	2301      	movs	r3, #1
	osSemaphoreRelease(RegistersSemaphore);
 801c13a:	6828      	ldr	r0, [r5, #0]
	target_register->mode.pointer = true;
 801c13c:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 801c13e:	f240 1301 	movw	r3, #257	@ 0x101
 801c142:	8123      	strh	r3, [r4, #8]
	osSemaphoreRelease(RegistersSemaphore);
 801c144:	f7f0 fec4 	bl	800ced0 <osSemaphoreRelease>
	return true;
 801c148:	e7d6      	b.n	801c0f8 <_ZN9Registers18AddRegisterPointerItEEbtPT_+0x30>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801c14a:	8961      	ldrh	r1, [r4, #10]
 801c14c:	f7ff fd0a 	bl	801bb64 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE2atEj>
		callback->pointer = pointer;
 801c150:	6006      	str	r6, [r0, #0]
 801c152:	e7f1      	b.n	801c138 <_ZN9Registers18AddRegisterPointerItEEbtPT_+0x70>

0801c154 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801c154:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c156:	460c      	mov	r4, r1
 801c158:	b087      	sub	sp, #28
 801c15a:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801c15c:	f04f 31ff 	mov.w	r1, #4294967295
 801c160:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801c162:	461e      	mov	r6, r3
 801c164:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801c166:	f7f0 fe7f 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801c16a:	4621      	mov	r1, r4
 801c16c:	f10d 0207 	add.w	r2, sp, #7
 801c170:	4628      	mov	r0, r5
 801c172:	f7fd fb76 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801c176:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801c17a:	4604      	mov	r4, r0
	if (!success) {
 801c17c:	b923      	cbnz	r3, 801c188 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 801c17e:	6828      	ldr	r0, [r5, #0]
 801c180:	f7f0 fea6 	bl	800ced0 <osSemaphoreRelease>
}
 801c184:	b007      	add	sp, #28
 801c186:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801c188:	f10d 0007 	add.w	r0, sp, #7
 801c18c:	f7fd fdb4 	bl	8019cf8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	if (!success) {
 801c190:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801c194:	2b00      	cmp	r3, #0
 801c196:	d0f2      	beq.n	801c17e <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 801c198:	7923      	ldrb	r3, [r4, #4]
 801c19a:	4298      	cmp	r0, r3
 801c19c:	d1ef      	bne.n	801c17e <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 801c19e:	3004      	adds	r0, #4
 801c1a0:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801c1a4:	2800      	cmp	r0, #0
 801c1a6:	d0ea      	beq.n	801c17e <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801c1a8:	7823      	ldrb	r3, [r4, #0]
 801c1aa:	b983      	cbnz	r3, 801c1ce <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 801c1ac:	7863      	ldrb	r3, [r4, #1]
 801c1ae:	b973      	cbnz	r3, 801c1ce <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 801c1b0:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 801c1b2:	a902      	add	r1, sp, #8
 801c1b4:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 801c1b8:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801c1bc:	1a9b      	subs	r3, r3, r2
 801c1be:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801c1c0:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 801c1c2:	f7ff ff70 	bl	801c0a6 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 801c1c6:	2301      	movs	r3, #1
 801c1c8:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 801c1ca:	7223      	strb	r3, [r4, #8]
 801c1cc:	e7d7      	b.n	801c17e <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801c1ce:	8961      	ldrh	r1, [r4, #10]
 801c1d0:	f7ff fcc8 	bl	801bb64 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE2atEj>
		callback->write = write;
 801c1d4:	e9c0 7601 	strd	r7, r6, [r0, #4]
 801c1d8:	e7f5      	b.n	801c1c6 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x72>

0801c1da <_ZN9Registers18AddRegisterPointerImEEbtPT_>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801c1da:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1dc:	460c      	mov	r4, r1
 801c1de:	b087      	sub	sp, #28
 801c1e0:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801c1e2:	f04f 31ff 	mov.w	r1, #4294967295
 801c1e6:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801c1e8:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801c1ea:	f7f0 fe3d 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801c1ee:	4621      	mov	r1, r4
 801c1f0:	f10d 0207 	add.w	r2, sp, #7
 801c1f4:	4628      	mov	r0, r5
 801c1f6:	f7fd fb34 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801c1fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801c1fe:	4604      	mov	r4, r0
	if (!success) {
 801c200:	b933      	cbnz	r3, 801c210 <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x36>
		return false;
 801c202:	2700      	movs	r7, #0
		osSemaphoreRelease(RegistersSemaphore);
 801c204:	6828      	ldr	r0, [r5, #0]
 801c206:	f7f0 fe63 	bl	800ced0 <osSemaphoreRelease>
}
 801c20a:	4638      	mov	r0, r7
 801c20c:	b007      	add	sp, #28
 801c20e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801c210:	f10d 0007 	add.w	r0, sp, #7
 801c214:	f7fd fd22 	bl	8019c5c <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 801c218:	f89d 7007 	ldrb.w	r7, [sp, #7]
 801c21c:	2f00      	cmp	r7, #0
 801c21e:	d0f0      	beq.n	801c202 <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x28>
	if (target_register->register_info.type != registered_type) {
 801c220:	7923      	ldrb	r3, [r4, #4]
 801c222:	4283      	cmp	r3, r0
 801c224:	d1ed      	bne.n	801c202 <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 801c226:	3304      	adds	r3, #4
 801c228:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801c22c:	2800      	cmp	r0, #0
 801c22e:	d0e8      	beq.n	801c202 <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801c230:	7823      	ldrb	r3, [r4, #0]
 801c232:	b99b      	cbnz	r3, 801c25c <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x82>
 801c234:	7863      	ldrb	r3, [r4, #1]
 801c236:	b98b      	cbnz	r3, 801c25c <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x82>
		target_callback_list->push_back(callback);
 801c238:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 801c23a:	9602      	str	r6, [sp, #8]
 801c23c:	e9d0 2300 	ldrd	r2, r3, [r0]
 801c240:	1a9b      	subs	r3, r3, r2
 801c242:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801c244:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 801c246:	f7f9 f83b 	bl	80152c0 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 801c24a:	2301      	movs	r3, #1
	osSemaphoreRelease(RegistersSemaphore);
 801c24c:	6828      	ldr	r0, [r5, #0]
	target_register->mode.pointer = true;
 801c24e:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 801c250:	f240 1301 	movw	r3, #257	@ 0x101
 801c254:	8123      	strh	r3, [r4, #8]
	osSemaphoreRelease(RegistersSemaphore);
 801c256:	f7f0 fe3b 	bl	800ced0 <osSemaphoreRelease>
	return true;
 801c25a:	e7d6      	b.n	801c20a <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x30>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801c25c:	8961      	ldrh	r1, [r4, #10]
 801c25e:	f7f4 fee1 	bl	8011024 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>
		callback->pointer = pointer;
 801c262:	6006      	str	r6, [r0, #0]
 801c264:	e7f1      	b.n	801c24a <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x70>
	...

0801c268 <_ZN7Sensors12AddRegistersEv>:
void Sensors::AddRegisters(void) {
 801c268:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c26a:	4604      	mov	r4, r0
 801c26c:	b087      	sub	sp, #28
	registers->AddRegister<uint8_t>(REG_SENSORS_READING_STATUS);
 801c26e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c272:	f8d0 00bc 	ldr.w	r0, [r0, #188]	@ 0xbc
 801c276:	f7ff fdeb 	bl	801be50 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_SENSORS_READING_STATUS);
 801c27a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c27e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c282:	f7fd fb27 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddReadCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
 801c286:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801c28a:	f04f 31ff 	mov.w	r1, #4294967295
 801c28e:	6830      	ldr	r0, [r6, #0]
 801c290:	f7f0 fdea 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801c294:	f10d 0207 	add.w	r2, sp, #7
 801c298:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c29c:	4630      	mov	r0, r6
 801c29e:	f7fd fae0 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801c2a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801c2a6:	4605      	mov	r5, r0
	if (!success) {
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	f040 80bf 	bne.w	801c42c <_ZN7Sensors12AddRegistersEv+0x1c4>
	osSemaphoreRelease(RegistersSemaphore);
 801c2ae:	6830      	ldr	r0, [r6, #0]
 801c2b0:	f7f0 fe0e 	bl	800ced0 <osSemaphoreRelease>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
 801c2b4:	4b89      	ldr	r3, [pc, #548]	@ (801c4dc <_ZN7Sensors12AddRegistersEv+0x274>)
 801c2b6:	4622      	mov	r2, r4
 801c2b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c2bc:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c2c0:	f7ff feae 	bl	801c020 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_GROUP_STATUS);
 801c2c4:	f240 2101 	movw	r1, #513	@ 0x201
 801c2c8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c2cc:	f7ff fdc0 	bl	801be50 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsArray(REG_SENSORS_GROUP_STATUS, 2);
 801c2d0:	2202      	movs	r2, #2
 801c2d2:	f240 2101 	movw	r1, #513	@ 0x201
 801c2d6:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c2da:	f7fd fb17 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_GROUP_STATUS, (void*) this,
 801c2de:	4b80      	ldr	r3, [pc, #512]	@ (801c4e0 <_ZN7Sensors12AddRegistersEv+0x278>)
 801c2e0:	4622      	mov	r2, r4
 801c2e2:	f240 2101 	movw	r1, #513	@ 0x201
 801c2e6:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c2ea:	f7ff fe99 	bl	801c020 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_GROUPS);
 801c2ee:	f240 2102 	movw	r1, #514	@ 0x202
 801c2f2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c2f6:	f7ff fdab 	bl	801be50 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_GROUPS);
 801c2fa:	f240 2102 	movw	r1, #514	@ 0x202
 801c2fe:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c302:	f7fd fae7 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_GROUPS, (void*) this,
 801c306:	4b77      	ldr	r3, [pc, #476]	@ (801c4e4 <_ZN7Sensors12AddRegistersEv+0x27c>)
 801c308:	4622      	mov	r2, r4
 801c30a:	f240 2102 	movw	r1, #514	@ 0x202
 801c30e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c312:	f7ff fe85 	bl	801c020 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_SENSOR_STATUS);
 801c316:	f240 2103 	movw	r1, #515	@ 0x203
 801c31a:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c31e:	f7ff fd97 	bl	801be50 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsArray(REG_SENSORS_SENSOR_STATUS, 2);
 801c322:	2202      	movs	r2, #2
 801c324:	f240 2103 	movw	r1, #515	@ 0x203
 801c328:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c32c:	f7fd faee 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_SENSOR_STATUS, (void*) this,
 801c330:	4b6d      	ldr	r3, [pc, #436]	@ (801c4e8 <_ZN7Sensors12AddRegistersEv+0x280>)
 801c332:	4622      	mov	r2, r4
 801c334:	f240 2103 	movw	r1, #515	@ 0x203
 801c338:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c33c:	f7ff fe70 	bl	801c020 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_SENSORS);
 801c340:	f44f 7101 	mov.w	r1, #516	@ 0x204
 801c344:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c348:	f7ff fd82 	bl	801be50 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_SENSORS);
 801c34c:	f44f 7101 	mov.w	r1, #516	@ 0x204
 801c350:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c354:	f7fd fabe 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_SENSORS, (void*) this,
 801c358:	4b64      	ldr	r3, [pc, #400]	@ (801c4ec <_ZN7Sensors12AddRegistersEv+0x284>)
 801c35a:	4622      	mov	r2, r4
 801c35c:	f44f 7101 	mov.w	r1, #516	@ 0x204
 801c360:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c364:	f7ff fe5c 	bl	801c020 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_SENSORS_DATA_STATUS);
 801c368:	f240 2105 	movw	r1, #517	@ 0x205
 801c36c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c370:	f7ff fda4 	bl	801bebc <_ZN9Registers11AddRegisterItEEbt>
	registers->SetRegisterAsArray(REG_SENSORS_DATA_STATUS, 3);
 801c374:	2203      	movs	r2, #3
 801c376:	f240 2105 	movw	r1, #517	@ 0x205
 801c37a:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c37e:	f7fd fac5 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_SENSORS_DATA_STATUS, (void*) this,
 801c382:	4b5b      	ldr	r3, [pc, #364]	@ (801c4f0 <_ZN7Sensors12AddRegistersEv+0x288>)
 801c384:	4622      	mov	r2, r4
 801c386:	f240 2105 	movw	r1, #517	@ 0x205
 801c38a:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c38e:	f7ff fee1 	bl	801c154 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_ALL_DATA);
 801c392:	f240 2106 	movw	r1, #518	@ 0x206
 801c396:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c39a:	f7ff fd59 	bl	801be50 <_ZN9Registers11AddRegisterIhEEbt>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_ALL_DATA);
 801c39e:	f240 2106 	movw	r1, #518	@ 0x206
 801c3a2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c3a6:	f7fd fa95 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_ALL_DATA, (void*) this,
 801c3aa:	4b52      	ldr	r3, [pc, #328]	@ (801c4f4 <_ZN7Sensors12AddRegistersEv+0x28c>)
 801c3ac:	4622      	mov	r2, r4
 801c3ae:	f240 2106 	movw	r1, #518	@ 0x206
 801c3b2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c3b6:	f7ff fe33 	bl	801c020 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_SENSORS_GROUP_PRESCALER);
 801c3ba:	f240 2107 	movw	r1, #519	@ 0x207
 801c3be:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c3c2:	f7ff fd7b 	bl	801bebc <_ZN9Registers11AddRegisterItEEbt>
	registers->SetRegisterAsArray(REG_SENSORS_GROUP_PRESCALER, 2);
 801c3c6:	2202      	movs	r2, #2
 801c3c8:	f240 2107 	movw	r1, #519	@ 0x207
 801c3cc:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c3d0:	f7fd fa9c 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_SENSORS_GROUP_PRESCALER, (void*) this,
 801c3d4:	4b48      	ldr	r3, [pc, #288]	@ (801c4f8 <_ZN7Sensors12AddRegistersEv+0x290>)
 801c3d6:	4622      	mov	r2, r4
 801c3d8:	f240 2107 	movw	r1, #519	@ 0x207
 801c3dc:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c3e0:	f7ff feb8 	bl	801c154 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint32_t>(REG_SENSORS_DETECT_SENSORS);
 801c3e4:	f44f 7102 	mov.w	r1, #520	@ 0x208
 801c3e8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c3ec:	f7ff fd9c 	bl	801bf28 <_ZN9Registers11AddRegisterImEEbt>
	registers->SetRegisterAsArray(REG_SENSORS_DETECT_SENSORS, 2);
 801c3f0:	2202      	movs	r2, #2
 801c3f2:	f44f 7102 	mov.w	r1, #520	@ 0x208
 801c3f6:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801c3fa:	f7fd fa87 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint32_t>(REG_SENSORS_DETECT_SENSORS, (void*) this,
 801c3fe:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801c402:	f04f 31ff 	mov.w	r1, #4294967295
 801c406:	6830      	ldr	r0, [r6, #0]
 801c408:	f7f0 fd2e 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801c40c:	f10d 0207 	add.w	r2, sp, #7
 801c410:	f44f 7102 	mov.w	r1, #520	@ 0x208
 801c414:	4630      	mov	r0, r6
 801c416:	f7fd fa24 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801c41a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801c41e:	4605      	mov	r5, r0
	if (!success) {
 801c420:	bb8b      	cbnz	r3, 801c486 <_ZN7Sensors12AddRegistersEv+0x21e>
	osSemaphoreRelease(RegistersSemaphore);
 801c422:	6830      	ldr	r0, [r6, #0]
 801c424:	f7f0 fd54 	bl	800ced0 <osSemaphoreRelease>
}
 801c428:	b007      	add	sp, #28
 801c42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801c42c:	f10d 0007 	add.w	r0, sp, #7
 801c430:	f7fd fcb0 	bl	8019d94 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 801c434:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801c438:	2b00      	cmp	r3, #0
 801c43a:	f43f af38 	beq.w	801c2ae <_ZN7Sensors12AddRegistersEv+0x46>
	if (target_register->register_info.type != registered_type) {
 801c43e:	792b      	ldrb	r3, [r5, #4]
 801c440:	4298      	cmp	r0, r3
 801c442:	f47f af34 	bne.w	801c2ae <_ZN7Sensors12AddRegistersEv+0x46>
	if (callbacks[target_register->register_info.type] == NULL) {
 801c446:	3004      	adds	r0, #4
 801c448:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801c44c:	2800      	cmp	r0, #0
 801c44e:	f43f af2e 	beq.w	801c2ae <_ZN7Sensors12AddRegistersEv+0x46>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801c452:	782b      	ldrb	r3, [r5, #0]
 801c454:	4f29      	ldr	r7, [pc, #164]	@ (801c4fc <_ZN7Sensors12AddRegistersEv+0x294>)
 801c456:	b983      	cbnz	r3, 801c47a <_ZN7Sensors12AddRegistersEv+0x212>
 801c458:	786b      	ldrb	r3, [r5, #1]
 801c45a:	b973      	cbnz	r3, 801c47a <_ZN7Sensors12AddRegistersEv+0x212>
		target_callback_list->push_back(callback);
 801c45c:	a902      	add	r1, sp, #8
		callback.read = read;
 801c45e:	9705      	str	r7, [sp, #20]
		callback.write = NULL;
 801c460:	e9cd 4303 	strd	r4, r3, [sp, #12]
 801c464:	e9d0 2300 	ldrd	r2, r3, [r0]
 801c468:	1a9b      	subs	r3, r3, r2
 801c46a:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801c46c:	816b      	strh	r3, [r5, #10]
		target_callback_list->push_back(callback);
 801c46e:	f7f4 fbe5 	bl	8010c3c <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 801c472:	2301      	movs	r3, #1
 801c474:	706b      	strb	r3, [r5, #1]
	target_register->access.read = true;
 801c476:	726b      	strb	r3, [r5, #9]
 801c478:	e719      	b.n	801c2ae <_ZN7Sensors12AddRegistersEv+0x46>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801c47a:	8969      	ldrh	r1, [r5, #10]
 801c47c:	f7f4 faa2 	bl	80109c4 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->context = context;
 801c480:	6044      	str	r4, [r0, #4]
		callback->read = read;
 801c482:	60c7      	str	r7, [r0, #12]
 801c484:	e7f5      	b.n	801c472 <_ZN7Sensors12AddRegistersEv+0x20a>
	uint8_t registered_type = GetTypeID<T>(&success);
 801c486:	f10d 0007 	add.w	r0, sp, #7
 801c48a:	f7fd fbe7 	bl	8019c5c <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 801c48e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801c492:	2b00      	cmp	r3, #0
 801c494:	d0c5      	beq.n	801c422 <_ZN7Sensors12AddRegistersEv+0x1ba>
	if (target_register->register_info.type != registered_type) {
 801c496:	792b      	ldrb	r3, [r5, #4]
 801c498:	4298      	cmp	r0, r3
 801c49a:	d1c2      	bne.n	801c422 <_ZN7Sensors12AddRegistersEv+0x1ba>
	if (callbacks[target_register->register_info.type] == NULL) {
 801c49c:	3004      	adds	r0, #4
 801c49e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801c4a2:	2800      	cmp	r0, #0
 801c4a4:	d0bd      	beq.n	801c422 <_ZN7Sensors12AddRegistersEv+0x1ba>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801c4a6:	782b      	ldrb	r3, [r5, #0]
 801c4a8:	4f15      	ldr	r7, [pc, #84]	@ (801c500 <_ZN7Sensors12AddRegistersEv+0x298>)
 801c4aa:	b983      	cbnz	r3, 801c4ce <_ZN7Sensors12AddRegistersEv+0x266>
 801c4ac:	786b      	ldrb	r3, [r5, #1]
 801c4ae:	b973      	cbnz	r3, 801c4ce <_ZN7Sensors12AddRegistersEv+0x266>
		callback.read = NULL;
 801c4b0:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 801c4b2:	a902      	add	r1, sp, #8
 801c4b4:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 801c4b8:	e9cd 4703 	strd	r4, r7, [sp, #12]
 801c4bc:	1a9b      	subs	r3, r3, r2
 801c4be:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801c4c0:	816b      	strh	r3, [r5, #10]
		target_callback_list->push_back(callback);
 801c4c2:	f7f8 fefd 	bl	80152c0 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 801c4c6:	2301      	movs	r3, #1
 801c4c8:	706b      	strb	r3, [r5, #1]
	target_register->access.write = true;
 801c4ca:	722b      	strb	r3, [r5, #8]
 801c4cc:	e7a9      	b.n	801c422 <_ZN7Sensors12AddRegistersEv+0x1ba>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801c4ce:	8969      	ldrh	r1, [r5, #10]
 801c4d0:	f7f4 fda8 	bl	8011024 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>
		callback->write = write;
 801c4d4:	e9c0 4701 	strd	r4, r7, [r0, #4]
 801c4d8:	e7f5      	b.n	801c4c6 <_ZN7Sensors12AddRegistersEv+0x25e>
 801c4da:	bf00      	nop
 801c4dc:	0801a1a5 	.word	0x0801a1a5
 801c4e0:	0801a4a9 	.word	0x0801a4a9
 801c4e4:	0801a1e5 	.word	0x0801a1e5
 801c4e8:	0801a5cd 	.word	0x0801a5cd
 801c4ec:	0801a4fd 	.word	0x0801a4fd
 801c4f0:	0801a755 	.word	0x0801a755
 801c4f4:	0801a6d5 	.word	0x0801a6d5
 801c4f8:	0801a451 	.word	0x0801a451
 801c4fc:	08019ae1 	.word	0x08019ae1
 801c500:	0801a24b 	.word	0x0801a24b

0801c504 <_ZN6SensorC1ERKS_>:
struct Sensor {
 801c504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c508:	790b      	ldrb	r3, [r1, #4]
 801c50a:	4604      	mov	r4, r0
 801c50c:	680a      	ldr	r2, [r1, #0]
 801c50e:	460d      	mov	r5, r1
 801c510:	7103      	strb	r3, [r0, #4]
 801c512:	88cb      	ldrh	r3, [r1, #6]
 801c514:	6002      	str	r2, [r0, #0]
 801c516:	80c3      	strh	r3, [r0, #6]
 801c518:	890b      	ldrh	r3, [r1, #8]
 801c51a:	8103      	strh	r3, [r0, #8]
 801c51c:	68cb      	ldr	r3, [r1, #12]
 801c51e:	60c3      	str	r3, [r0, #12]
 801c520:	7c0b      	ldrb	r3, [r1, #16]
 801c522:	7403      	strb	r3, [r0, #16]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801c524:	2300      	movs	r3, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801c526:	e9d1 2705 	ldrd	r2, r7, [r1, #20]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801c52a:	e9c0 3305 	strd	r3, r3, [r0, #20]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801c52e:	1abf      	subs	r7, r7, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 801c530:	61c3      	str	r3, [r0, #28]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801c532:	d018      	beq.n	801c566 <_ZN6SensorC1ERKS_+0x62>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801c534:	4b10      	ldr	r3, [pc, #64]	@ (801c578 <_ZN6SensorC1ERKS_+0x74>)
 801c536:	429f      	cmp	r7, r3
 801c538:	d901      	bls.n	801c53e <_ZN6SensorC1ERKS_+0x3a>
	      std::__throw_bad_array_new_length();
 801c53a:	f001 fe18 	bl	801e16e <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801c53e:	4638      	mov	r0, r7
 801c540:	f001 fd63 	bl	801e00a <_Znwj>
 801c544:	4606      	mov	r6, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801c546:	4437      	add	r7, r6
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801c548:	e9c4 6605 	strd	r6, r6, [r4, #20]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801c54c:	61e7      	str	r7, [r4, #28]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801c54e:	e9d5 7805 	ldrd	r7, r8, [r5, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 801c552:	45b8      	cmp	r8, r7
 801c554:	d109      	bne.n	801c56a <_ZN6SensorC1ERKS_+0x66>
 801c556:	6a2b      	ldr	r3, [r5, #32]
 801c558:	4620      	mov	r0, r4
	this->_M_impl._M_finish =
 801c55a:	61a6      	str	r6, [r4, #24]
 801c55c:	6223      	str	r3, [r4, #32]
 801c55e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801c560:	6263      	str	r3, [r4, #36]	@ 0x24
 801c562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801c566:	463e      	mov	r6, r7
 801c568:	e7ed      	b.n	801c546 <_ZN6SensorC1ERKS_+0x42>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 801c56a:	4639      	mov	r1, r7
 801c56c:	4630      	mov	r0, r6
 801c56e:	3718      	adds	r7, #24
 801c570:	3618      	adds	r6, #24
 801c572:	f7fd fe75 	bl	801a260 <_ZN10SensorDataC1ERKS_>
 801c576:	e7ec      	b.n	801c552 <_ZN6SensorC1ERKS_+0x4e>
 801c578:	7ffffff8 	.word	0x7ffffff8

0801c57c <_ZN11SensorGroupC1ERKS_>:
struct SensorGroup {
 801c57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c57e:	680a      	ldr	r2, [r1, #0]
 801c580:	4604      	mov	r4, r0
 801c582:	7a0b      	ldrb	r3, [r1, #8]
 801c584:	460e      	mov	r6, r1
 801c586:	6002      	str	r2, [r0, #0]
 801c588:	684a      	ldr	r2, [r1, #4]
 801c58a:	7203      	strb	r3, [r0, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801c58c:	2300      	movs	r3, #0
 801c58e:	6042      	str	r2, [r0, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801c590:	e9d1 2703 	ldrd	r2, r7, [r1, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801c594:	e9c0 3303 	strd	r3, r3, [r0, #12]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801c598:	1abf      	subs	r7, r7, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 801c59a:	6143      	str	r3, [r0, #20]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801c59c:	d013      	beq.n	801c5c6 <_ZN11SensorGroupC1ERKS_+0x4a>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801c59e:	4b0e      	ldr	r3, [pc, #56]	@ (801c5d8 <_ZN11SensorGroupC1ERKS_+0x5c>)
 801c5a0:	429f      	cmp	r7, r3
 801c5a2:	d901      	bls.n	801c5a8 <_ZN11SensorGroupC1ERKS_+0x2c>
	      std::__throw_bad_array_new_length();
 801c5a4:	f001 fde3 	bl	801e16e <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801c5a8:	4638      	mov	r0, r7
 801c5aa:	f001 fd2e 	bl	801e00a <_Znwj>
 801c5ae:	4605      	mov	r5, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801c5b0:	442f      	add	r7, r5
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801c5b2:	e9c4 5503 	strd	r5, r5, [r4, #12]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801c5b6:	6167      	str	r7, [r4, #20]
 801c5b8:	e9d6 6703 	ldrd	r6, r7, [r6, #12]
 801c5bc:	42b7      	cmp	r7, r6
 801c5be:	d104      	bne.n	801c5ca <_ZN11SensorGroupC1ERKS_+0x4e>
 801c5c0:	4620      	mov	r0, r4
	this->_M_impl._M_finish =
 801c5c2:	6125      	str	r5, [r4, #16]
 801c5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801c5c6:	463d      	mov	r5, r7
 801c5c8:	e7f2      	b.n	801c5b0 <_ZN11SensorGroupC1ERKS_+0x34>
 801c5ca:	4631      	mov	r1, r6
 801c5cc:	4628      	mov	r0, r5
 801c5ce:	3628      	adds	r6, #40	@ 0x28
 801c5d0:	3528      	adds	r5, #40	@ 0x28
 801c5d2:	f7ff ff97 	bl	801c504 <_ZN6SensorC1ERKS_>
 801c5d6:	e7f1      	b.n	801c5bc <_ZN11SensorGroupC1ERKS_+0x40>
 801c5d8:	7ffffff8 	.word	0x7ffffff8

0801c5dc <_ZN12I2CInterfaceC1ERKS_>:
struct I2CInterface {
 801c5dc:	788b      	ldrb	r3, [r1, #2]
 801c5de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c5e2:	7083      	strb	r3, [r0, #2]
 801c5e4:	f101 0710 	add.w	r7, r1, #16
 801c5e8:	684b      	ldr	r3, [r1, #4]
 801c5ea:	4604      	mov	r4, r0
 801c5ec:	880a      	ldrh	r2, [r1, #0]
 801c5ee:	460d      	mov	r5, r1
 801c5f0:	6043      	str	r3, [r0, #4]
 801c5f2:	f100 0610 	add.w	r6, r0, #16
 801c5f6:	688b      	ldr	r3, [r1, #8]
 801c5f8:	8002      	strh	r2, [r0, #0]
 801c5fa:	6083      	str	r3, [r0, #8]
 801c5fc:	68cb      	ldr	r3, [r1, #12]
 801c5fe:	60c3      	str	r3, [r0, #12]
 801c600:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801c602:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801c604:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801c606:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801c608:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801c60a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801c60c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801c610:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801c614:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 801c616:	6523      	str	r3, [r4, #80]	@ 0x50
 801c618:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 801c61a:	6563      	str	r3, [r4, #84]	@ 0x54
	: _M_start(), _M_finish(), _M_end_of_storage()
 801c61c:	2300      	movs	r3, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801c61e:	e9d5 2716 	ldrd	r2, r7, [r5, #88]	@ 0x58
	: _M_start(), _M_finish(), _M_end_of_storage()
 801c622:	e9c4 3316 	strd	r3, r3, [r4, #88]	@ 0x58
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801c626:	1abf      	subs	r7, r7, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 801c628:	6623      	str	r3, [r4, #96]	@ 0x60
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801c62a:	d04a      	beq.n	801c6c2 <_ZN12I2CInterfaceC1ERKS_+0xe6>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801c62c:	4b32      	ldr	r3, [pc, #200]	@ (801c6f8 <_ZN12I2CInterfaceC1ERKS_+0x11c>)
 801c62e:	429f      	cmp	r7, r3
 801c630:	d901      	bls.n	801c636 <_ZN12I2CInterfaceC1ERKS_+0x5a>
	      std::__throw_bad_array_new_length();
 801c632:	f001 fd9c 	bl	801e16e <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801c636:	4638      	mov	r0, r7
 801c638:	f001 fce7 	bl	801e00a <_Znwj>
 801c63c:	4606      	mov	r6, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801c63e:	4437      	add	r7, r6
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801c640:	e9c4 6616 	strd	r6, r6, [r4, #88]	@ 0x58
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801c644:	6627      	str	r7, [r4, #96]	@ 0x60
 801c646:	e9d5 7816 	ldrd	r7, r8, [r5, #88]	@ 0x58
 801c64a:	45b8      	cmp	r8, r7
 801c64c:	d13b      	bne.n	801c6c6 <_ZN12I2CInterfaceC1ERKS_+0xea>
	this->_M_impl._M_finish =
 801c64e:	65e6      	str	r6, [r4, #92]	@ 0x5c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801c650:	e9d5 3719 	ldrd	r3, r7, [r5, #100]	@ 0x64
 801c654:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 801c656:	2300      	movs	r3, #0
	this->_M_impl._M_start = this->_M_allocate(__n);
 801c658:	10b8      	asrs	r0, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 801c65a:	66e3      	str	r3, [r4, #108]	@ 0x6c
 801c65c:	e9c4 3319 	strd	r3, r3, [r4, #100]	@ 0x64
	this->_M_impl._M_start = this->_M_allocate(__n);
 801c660:	f7fd faea 	bl	8019c38 <_ZNSt12_Vector_baseIP6SensorSaIS1_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801c664:	4407      	add	r7, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 801c666:	4606      	mov	r6, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801c668:	66e7      	str	r7, [r4, #108]	@ 0x6c
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801c66a:	e9c4 0019 	strd	r0, r0, [r4, #100]	@ 0x64
      : _M_current(__i) { }
 801c66e:	e9d5 1319 	ldrd	r1, r3, [r5, #100]	@ 0x64
	  if (_Num)
 801c672:	4299      	cmp	r1, r3
	  const ptrdiff_t _Num = __last - __first;
 801c674:	eba3 0701 	sub.w	r7, r3, r1
	  if (_Num)
 801c678:	d002      	beq.n	801c680 <_ZN12I2CInterfaceC1ERKS_+0xa4>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801c67a:	463a      	mov	r2, r7
 801c67c:	f002 fc42 	bl	801ef04 <memmove>
	  return __result + _Num;
 801c680:	443e      	add	r6, r7
	: _M_start(), _M_finish(), _M_end_of_storage()
 801c682:	2300      	movs	r3, #0
	this->_M_impl._M_finish =
 801c684:	66a6      	str	r6, [r4, #104]	@ 0x68
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801c686:	e9d5 261c 	ldrd	r2, r6, [r5, #112]	@ 0x70
	: _M_start(), _M_finish(), _M_end_of_storage()
 801c68a:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801c68e:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 801c690:	67a3      	str	r3, [r4, #120]	@ 0x78
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801c692:	d01f      	beq.n	801c6d4 <_ZN12I2CInterfaceC1ERKS_+0xf8>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801c694:	4b19      	ldr	r3, [pc, #100]	@ (801c6fc <_ZN12I2CInterfaceC1ERKS_+0x120>)
 801c696:	429e      	cmp	r6, r3
 801c698:	d8cb      	bhi.n	801c632 <_ZN12I2CInterfaceC1ERKS_+0x56>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801c69a:	4630      	mov	r0, r6
 801c69c:	f001 fcb5 	bl	801e00a <_Znwj>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801c6a0:	4406      	add	r6, r0
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801c6a2:	e9c4 001c 	strd	r0, r0, [r4, #112]	@ 0x70
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801c6a6:	67a6      	str	r6, [r4, #120]	@ 0x78
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801c6a8:	e9d5 571c 	ldrd	r5, r7, [r5, #112]	@ 0x70
 801c6ac:	3508      	adds	r5, #8
 801c6ae:	f1a5 0308 	sub.w	r3, r5, #8
 801c6b2:	f100 0620 	add.w	r6, r0, #32
 801c6b6:	429f      	cmp	r7, r3
 801c6b8:	d10e      	bne.n	801c6d8 <_ZN12I2CInterfaceC1ERKS_+0xfc>
	this->_M_impl._M_finish =
 801c6ba:	6760      	str	r0, [r4, #116]	@ 0x74
 801c6bc:	4620      	mov	r0, r4
 801c6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801c6c2:	463e      	mov	r6, r7
 801c6c4:	e7bb      	b.n	801c63e <_ZN12I2CInterfaceC1ERKS_+0x62>
 801c6c6:	4639      	mov	r1, r7
 801c6c8:	4630      	mov	r0, r6
 801c6ca:	3718      	adds	r7, #24
 801c6cc:	3618      	adds	r6, #24
 801c6ce:	f7ff ff55 	bl	801c57c <_ZN11SensorGroupC1ERKS_>
 801c6d2:	e7ba      	b.n	801c64a <_ZN12I2CInterfaceC1ERKS_+0x6e>
 801c6d4:	4630      	mov	r0, r6
 801c6d6:	e7e3      	b.n	801c6a0 <_ZN12I2CInterfaceC1ERKS_+0xc4>
struct ReadRequest {
 801c6d8:	f815 3c08 	ldrb.w	r3, [r5, #-8]
 801c6dc:	4629      	mov	r1, r5
 801c6de:	3008      	adds	r0, #8
 801c6e0:	3520      	adds	r5, #32
 801c6e2:	f806 3c20 	strb.w	r3, [r6, #-32]
 801c6e6:	f855 3c24 	ldr.w	r3, [r5, #-36]
 801c6ea:	f846 3c1c 	str.w	r3, [r6, #-28]
 801c6ee:	f7fd fdb7 	bl	801a260 <_ZN10SensorDataC1ERKS_>
 801c6f2:	4630      	mov	r0, r6
 801c6f4:	e7db      	b.n	801c6ae <_ZN12I2CInterfaceC1ERKS_+0xd2>
 801c6f6:	bf00      	nop
 801c6f8:	7ffffff8 	.word	0x7ffffff8
 801c6fc:	7fffffe0 	.word	0x7fffffe0

0801c700 <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801c700:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801c704:	e9d0 6800 	ldrd	r6, r8, [r0]
 801c708:	4b20      	ldr	r3, [pc, #128]	@ (801c78c <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>)
 801c70a:	4605      	mov	r5, r0
 801c70c:	eba8 0406 	sub.w	r4, r8, r6
 801c710:	460f      	mov	r7, r1
 801c712:	4691      	mov	r9, r2
 801c714:	10a4      	asrs	r4, r4, #2
 801c716:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 801c718:	4b1d      	ldr	r3, [pc, #116]	@ (801c790 <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>)
 801c71a:	429c      	cmp	r4, r3
 801c71c:	d102      	bne.n	801c724 <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 801c71e:	481d      	ldr	r0, [pc, #116]	@ (801c794 <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>)
 801c720:	f001 fd28 	bl	801e174 <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 801c724:	45b0      	cmp	r8, r6
 801c726:	bf14      	ite	ne
 801c728:	4622      	movne	r2, r4
 801c72a:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 801c72c:	eba1 0b06 	sub.w	fp, r1, r6
 801c730:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801c732:	d227      	bcs.n	801c784 <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x84>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801c734:	b344      	cbz	r4, 801c788 <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x88>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801c736:	429c      	cmp	r4, r3
 801c738:	bf28      	it	cs
 801c73a:	461c      	movcs	r4, r3
 801c73c:	207c      	movs	r0, #124	@ 0x7c
 801c73e:	4360      	muls	r0, r4
 801c740:	f001 fc63 	bl	801e00a <_Znwj>
 801c744:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801c746:	4649      	mov	r1, r9
 801c748:	eb0a 000b 	add.w	r0, sl, fp
 801c74c:	f7ff ff46 	bl	801c5dc <_ZN12I2CInterfaceC1ERKS_>
      return std::__relocate_a_1(std::__niter_base(__first),
 801c750:	4639      	mov	r1, r7
 801c752:	4652      	mov	r2, sl
 801c754:	4630      	mov	r0, r6
 801c756:	f7fe f929 	bl	801a9ac <_ZSt14__relocate_a_1IP12I2CInterfaceS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 801c75a:	4641      	mov	r1, r8
 801c75c:	f100 027c 	add.w	r2, r0, #124	@ 0x7c
 801c760:	4638      	mov	r0, r7
 801c762:	f7fe f923 	bl	801a9ac <_ZSt14__relocate_a_1IP12I2CInterfaceS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 801c766:	4607      	mov	r7, r0
	if (__p)
 801c768:	b126      	cbz	r6, 801c774 <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
		    this->_M_impl._M_end_of_storage - __old_start);
 801c76a:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801c76c:	4630      	mov	r0, r6
 801c76e:	1b89      	subs	r1, r1, r6
 801c770:	f001 fc26 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801c774:	237c      	movs	r3, #124	@ 0x7c
 801c776:	fb03 a304 	mla	r3, r3, r4, sl
      this->_M_impl._M_finish = __new_finish;
 801c77a:	e9c5 a700 	strd	sl, r7, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801c77e:	60ab      	str	r3, [r5, #8]
    }
 801c780:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c784:	461c      	mov	r4, r3
 801c786:	e7d9      	b.n	801c73c <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801c788:	46a2      	mov	sl, r4
 801c78a:	e7dc      	b.n	801c746 <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 801c78c:	bdef7bdf 	.word	0xbdef7bdf
 801c790:	01084210 	.word	0x01084210
 801c794:	0801f20c 	.word	0x0801f20c

0801c798 <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801c798:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801c79c:	e9d0 6800 	ldrd	r6, r8, [r0]
 801c7a0:	4b20      	ldr	r3, [pc, #128]	@ (801c824 <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>)
 801c7a2:	4605      	mov	r5, r0
 801c7a4:	eba8 0406 	sub.w	r4, r8, r6
 801c7a8:	460f      	mov	r7, r1
 801c7aa:	4691      	mov	r9, r2
 801c7ac:	10e4      	asrs	r4, r4, #3
 801c7ae:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 801c7b0:	4b1d      	ldr	r3, [pc, #116]	@ (801c828 <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>)
 801c7b2:	429c      	cmp	r4, r3
 801c7b4:	d102      	bne.n	801c7bc <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 801c7b6:	481d      	ldr	r0, [pc, #116]	@ (801c82c <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>)
 801c7b8:	f001 fcdc 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 801c7bc:	45b0      	cmp	r8, r6
 801c7be:	bf14      	ite	ne
 801c7c0:	4622      	movne	r2, r4
 801c7c2:	2201      	moveq	r2, #1
 801c7c4:	eba1 0b06 	sub.w	fp, r1, r6
 801c7c8:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801c7ca:	d227      	bcs.n	801c81c <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x84>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801c7cc:	b344      	cbz	r4, 801c820 <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x88>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801c7ce:	429c      	cmp	r4, r3
 801c7d0:	bf28      	it	cs
 801c7d2:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801c7d4:	2018      	movs	r0, #24
 801c7d6:	4360      	muls	r0, r4
 801c7d8:	f001 fc17 	bl	801e00a <_Znwj>
 801c7dc:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801c7de:	4649      	mov	r1, r9
 801c7e0:	eb0a 000b 	add.w	r0, sl, fp
 801c7e4:	f7ff feca 	bl	801c57c <_ZN11SensorGroupC1ERKS_>
 801c7e8:	4639      	mov	r1, r7
 801c7ea:	4652      	mov	r2, sl
 801c7ec:	4630      	mov	r0, r6
 801c7ee:	f7fe f953 	bl	801aa98 <_ZSt14__relocate_a_1IP11SensorGroupS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 801c7f2:	4641      	mov	r1, r8
 801c7f4:	f100 0218 	add.w	r2, r0, #24
 801c7f8:	4638      	mov	r0, r7
 801c7fa:	f7fe f94d 	bl	801aa98 <_ZSt14__relocate_a_1IP11SensorGroupS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 801c7fe:	4607      	mov	r7, r0
	if (__p)
 801c800:	b126      	cbz	r6, 801c80c <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
		    this->_M_impl._M_end_of_storage - __old_start);
 801c802:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801c804:	4630      	mov	r0, r6
 801c806:	1b89      	subs	r1, r1, r6
 801c808:	f001 fbda 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801c80c:	2318      	movs	r3, #24
 801c80e:	fb03 a304 	mla	r3, r3, r4, sl
      this->_M_impl._M_finish = __new_finish;
 801c812:	e9c5 a700 	strd	sl, r7, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801c816:	60ab      	str	r3, [r5, #8]
    }
 801c818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c81c:	461c      	mov	r4, r3
 801c81e:	e7d9      	b.n	801c7d4 <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801c820:	46a2      	mov	sl, r4
 801c822:	e7dc      	b.n	801c7de <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 801c824:	aaaaaaab 	.word	0xaaaaaaab
 801c828:	05555555 	.word	0x05555555
 801c82c:	0801f20c 	.word	0x0801f20c

0801c830 <_ZN7Sensors14AddSensorGroupEhhb>:
bool Sensors::AddSensorGroup(uint8_t ID, uint8_t group_ID, bool publishable) {
 801c830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c834:	b089      	sub	sp, #36	@ 0x24
 801c836:	4617      	mov	r7, r2
 801c838:	4606      	mov	r6, r0
 801c83a:	4699      	mov	r9, r3
	I2CInterface* interface = FindInterface(ID, &success);
 801c83c:	f10d 0207 	add.w	r2, sp, #7
 801c840:	f7fd fdae 	bl	801a3a0 <_ZN7Sensors13FindInterfaceEhPb>
	if (!success) return false;
 801c844:	f89d 8007 	ldrb.w	r8, [sp, #7]
	I2CInterface* interface = FindInterface(ID, &success);
 801c848:	4605      	mov	r5, r0
	if (!success) return false;
 801c84a:	f1b8 0f00 	cmp.w	r8, #0
 801c84e:	d104      	bne.n	801c85a <_ZN7Sensors14AddSensorGroupEhhb+0x2a>
 801c850:	2400      	movs	r4, #0
}
 801c852:	4620      	mov	r0, r4
 801c854:	b009      	add	sp, #36	@ 0x24
 801c856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	FindSensorGroup(group_ID, &success);
 801c85a:	4639      	mov	r1, r7
 801c85c:	4630      	mov	r0, r6
 801c85e:	f7fd fddc 	bl	801a41a <_ZN7Sensors15FindSensorGroupEhPb>
	if (success) return false;
 801c862:	f89d 4007 	ldrb.w	r4, [sp, #7]
 801c866:	2c00      	cmp	r4, #0
 801c868:	d1f2      	bne.n	801c850 <_ZN7Sensors14AddSensorGroupEhhb+0x20>
	sensor_group.parent = interface->ID; // interface
 801c86a:	782b      	ldrb	r3, [r5, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801c86c:	9407      	str	r4, [sp, #28]
 801c86e:	f88d 3009 	strb.w	r3, [sp, #9]
	sensor_group.prescaler = 1;
 801c872:	2301      	movs	r3, #1
	sensor_group.active = false;
 801c874:	f88d 4008 	strb.w	r4, [sp, #8]
	sensor_group.ID = group_ID;
 801c878:	f88d 700a 	strb.w	r7, [sp, #10]
	sensor_group.publishable = publishable;
 801c87c:	f88d 900b 	strb.w	r9, [sp, #11]
	sensor_group.prescaler = 1;
 801c880:	9303      	str	r3, [sp, #12]
	sensor_group.read_index = 0;
 801c882:	f88d 4010 	strb.w	r4, [sp, #16]
 801c886:	e9cd 4405 	strd	r4, r4, [sp, #20]
	if (publishable) {
 801c88a:	f1b9 0f00 	cmp.w	r9, #0
 801c88e:	d10f      	bne.n	801c8b0 <_ZN7Sensors14AddSensorGroupEhhb+0x80>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801c890:	f04f 31ff 	mov.w	r1, #4294967295
 801c894:	6830      	ldr	r0, [r6, #0]
 801c896:	f7f0 fae7 	bl	800ce68 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801c89a:	e9d5 0317 	ldrd	r0, r3, [r5, #92]	@ 0x5c
 801c89e:	4298      	cmp	r0, r3
 801c8a0:	d11b      	bne.n	801c8da <_ZN7Sensors14AddSensorGroupEhhb+0xaa>
	  _M_realloc_insert(end(), __x);
 801c8a2:	4601      	mov	r1, r0
 801c8a4:	aa02      	add	r2, sp, #8
 801c8a6:	f105 0058 	add.w	r0, r5, #88	@ 0x58
 801c8aa:	f7ff ff75 	bl	801c798 <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 801c8ae:	e01a      	b.n	801c8e6 <_ZN7Sensors14AddSensorGroupEhhb+0xb6>
		success = publishers->AddPublisher(group_ID);
 801c8b0:	f8d6 00c0 	ldr.w	r0, [r6, #192]	@ 0xc0
 801c8b4:	f7fc fa7a 	bl	8018dac <_ZN10Publishers12AddPublisherEh>
 801c8b8:	f88d 0007 	strb.w	r0, [sp, #7]
		if (!success) return false;  								// TODO Or continue? Simply don't add the topic ?
 801c8bc:	b148      	cbz	r0, 801c8d2 <_ZN7Sensors14AddSensorGroupEhhb+0xa2>
		success = publishers->AddTopic(group_ID, REG_TIMEBASE);
 801c8be:	4622      	mov	r2, r4
 801c8c0:	4639      	mov	r1, r7
 801c8c2:	f8d6 00c0 	ldr.w	r0, [r6, #192]	@ 0xc0
 801c8c6:	f7fb fed7 	bl	8018678 <_ZN10Publishers8AddTopicEht>
 801c8ca:	f88d 0007 	strb.w	r0, [sp, #7]
		if (!success) return false;  								// TODO Or continue, Simply don't add the topic ?
 801c8ce:	2800      	cmp	r0, #0
 801c8d0:	d1de      	bne.n	801c890 <_ZN7Sensors14AddSensorGroupEhhb+0x60>
struct SensorGroup {
 801c8d2:	a805      	add	r0, sp, #20
 801c8d4:	f7fe f82c 	bl	801a930 <_ZNSt6vectorI6SensorSaIS0_EED1Ev>
 801c8d8:	e7bb      	b.n	801c852 <_ZN7Sensors14AddSensorGroupEhhb+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801c8da:	a902      	add	r1, sp, #8
 801c8dc:	f7ff fe4e 	bl	801c57c <_ZN11SensorGroupC1ERKS_>
	    ++this->_M_impl._M_finish;
 801c8e0:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 801c8e2:	3318      	adds	r3, #24
 801c8e4:	65eb      	str	r3, [r5, #92]	@ 0x5c
	osSemaphoreRelease(SensorsSemaphore);
 801c8e6:	6830      	ldr	r0, [r6, #0]
	return true;
 801c8e8:	4644      	mov	r4, r8
	osSemaphoreRelease(SensorsSemaphore);
 801c8ea:	f7f0 faf1 	bl	800ced0 <osSemaphoreRelease>
	return true;
 801c8ee:	e7f0      	b.n	801c8d2 <_ZN7Sensors14AddSensorGroupEhhb+0xa2>

0801c8f0 <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801c8f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801c8f4:	e9d0 6800 	ldrd	r6, r8, [r0]
 801c8f8:	4b20      	ldr	r3, [pc, #128]	@ (801c97c <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>)
 801c8fa:	4605      	mov	r5, r0
 801c8fc:	eba8 0406 	sub.w	r4, r8, r6
 801c900:	460f      	mov	r7, r1
 801c902:	4691      	mov	r9, r2
 801c904:	10e4      	asrs	r4, r4, #3
 801c906:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 801c908:	4b1d      	ldr	r3, [pc, #116]	@ (801c980 <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>)
 801c90a:	429c      	cmp	r4, r3
 801c90c:	d102      	bne.n	801c914 <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 801c90e:	481d      	ldr	r0, [pc, #116]	@ (801c984 <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>)
 801c910:	f001 fc30 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 801c914:	45b0      	cmp	r8, r6
 801c916:	bf14      	ite	ne
 801c918:	4622      	movne	r2, r4
 801c91a:	2201      	moveq	r2, #1
 801c91c:	eba1 0b06 	sub.w	fp, r1, r6
 801c920:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801c922:	d227      	bcs.n	801c974 <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x84>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801c924:	b344      	cbz	r4, 801c978 <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x88>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801c926:	429c      	cmp	r4, r3
 801c928:	bf28      	it	cs
 801c92a:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801c92c:	2028      	movs	r0, #40	@ 0x28
 801c92e:	4360      	muls	r0, r4
 801c930:	f001 fb6b 	bl	801e00a <_Znwj>
 801c934:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801c936:	4649      	mov	r1, r9
 801c938:	eb0a 000b 	add.w	r0, sl, fp
 801c93c:	f7ff fde2 	bl	801c504 <_ZN6SensorC1ERKS_>
 801c940:	4639      	mov	r1, r7
 801c942:	4652      	mov	r2, sl
 801c944:	4630      	mov	r0, r6
 801c946:	f7fe f8d9 	bl	801aafc <_ZSt14__relocate_a_1IP6SensorS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 801c94a:	4641      	mov	r1, r8
 801c94c:	f100 0228 	add.w	r2, r0, #40	@ 0x28
 801c950:	4638      	mov	r0, r7
 801c952:	f7fe f8d3 	bl	801aafc <_ZSt14__relocate_a_1IP6SensorS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 801c956:	4607      	mov	r7, r0
	if (__p)
 801c958:	b126      	cbz	r6, 801c964 <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
		    this->_M_impl._M_end_of_storage - __old_start);
 801c95a:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801c95c:	4630      	mov	r0, r6
 801c95e:	1b89      	subs	r1, r1, r6
 801c960:	f001 fb2e 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801c964:	2328      	movs	r3, #40	@ 0x28
 801c966:	fb03 a304 	mla	r3, r3, r4, sl
      this->_M_impl._M_finish = __new_finish;
 801c96a:	e9c5 a700 	strd	sl, r7, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801c96e:	60ab      	str	r3, [r5, #8]
    }
 801c970:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c974:	461c      	mov	r4, r3
 801c976:	e7d9      	b.n	801c92c <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801c978:	46a2      	mov	sl, r4
 801c97a:	e7dc      	b.n	801c936 <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 801c97c:	cccccccd 	.word	0xcccccccd
 801c980:	03333333 	.word	0x03333333
 801c984:	0801f20c 	.word	0x0801f20c

0801c988 <_ZN7Sensors9AddSensorEhht>:
bool Sensors::AddSensor(uint8_t group_ID, uint8_t sensor_ID, uint16_t address) {
 801c988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c98c:	b08d      	sub	sp, #52	@ 0x34
 801c98e:	4691      	mov	r9, r2
 801c990:	4698      	mov	r8, r3
 801c992:	4606      	mov	r6, r0
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 801c994:	f10d 0303 	add.w	r3, sp, #3
 801c998:	aa01      	add	r2, sp, #4
 801c99a:	f7fd fd24 	bl	801a3e6 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>
	if (!success) return false;
 801c99e:	f89d 7003 	ldrb.w	r7, [sp, #3]
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 801c9a2:	4604      	mov	r4, r0
	if (!success) return false;
 801c9a4:	b927      	cbnz	r7, 801c9b0 <_ZN7Sensors9AddSensorEhht+0x28>
 801c9a6:	2700      	movs	r7, #0
}
 801c9a8:	4638      	mov	r0, r7
 801c9aa:	b00d      	add	sp, #52	@ 0x34
 801c9ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	FindSensor(sensor_ID, &success);
 801c9b0:	f10d 0203 	add.w	r2, sp, #3
 801c9b4:	4649      	mov	r1, r9
 801c9b6:	4630      	mov	r0, r6
 801c9b8:	f7fd fdc8 	bl	801a54c <_ZN7Sensors10FindSensorEhPb>
	if (success) return false;
 801c9bc:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801c9c0:	2800      	cmp	r0, #0
 801c9c2:	d1f0      	bne.n	801c9a6 <_ZN7Sensors9AddSensorEhht+0x1e>
	: _M_start(), _M_finish(), _M_end_of_storage()
 801c9c4:	9009      	str	r0, [sp, #36]	@ 0x24
	sensor.active = false;
 801c9c6:	f88d 0008 	strb.w	r0, [sp, #8]
 801c9ca:	e9cd 0007 	strd	r0, r0, [sp, #28]
	if (interface->ID != INTERNAL) {
 801c9ce:	9801      	ldr	r0, [sp, #4]
 801c9d0:	7803      	ldrb	r3, [r0, #0]
 801c9d2:	2b0a      	cmp	r3, #10
 801c9d4:	d032      	beq.n	801ca3c <_ZN7Sensors9AddSensorEhht+0xb4>
		sensor.present = (HAL_I2C_IsDeviceReady(interface->interface, address, 1, HAL_MAX_DELAY) == HAL_OK);
 801c9d6:	f04f 33ff 	mov.w	r3, #4294967295
 801c9da:	2201      	movs	r2, #1
 801c9dc:	4641      	mov	r1, r8
 801c9de:	68c0      	ldr	r0, [r0, #12]
 801c9e0:	f7ea fe92 	bl	8007708 <HAL_I2C_IsDeviceReady>
 801c9e4:	fab0 f580 	clz	r5, r0
 801c9e8:	096d      	lsrs	r5, r5, #5
	sensor.parent = sensor_group->ID;
 801c9ea:	78a2      	ldrb	r2, [r4, #2]
	sensor.processing = false;
 801c9ec:	2300      	movs	r3, #0
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801c9ee:	f04f 31ff 	mov.w	r1, #4294967295
 801c9f2:	6830      	ldr	r0, [r6, #0]
	sensor.parent = sensor_group->ID;
 801c9f4:	f88d 2009 	strb.w	r2, [sp, #9]
	sensor.memory_address_size = 1;
 801c9f8:	2201      	movs	r2, #1
	sensor.processing = false;
 801c9fa:	f88d 300b 	strb.w	r3, [sp, #11]
	sensor.read_index = 0;
 801c9fe:	f88d 3018 	strb.w	r3, [sp, #24]
		sensor.present = (HAL_I2C_IsDeviceReady(interface->interface, address, 1, HAL_MAX_DELAY) == HAL_OK);
 801ca02:	f88d 500a 	strb.w	r5, [sp, #10]
	sensor.ID = sensor_ID;
 801ca06:	f88d 900c 	strb.w	r9, [sp, #12]
	sensor.address = address;
 801ca0a:	f8ad 800e 	strh.w	r8, [sp, #14]
	sensor.memory_address_size = 1;
 801ca0e:	f8ad 2010 	strh.w	r2, [sp, #16]
	sensor.callback = NULL;
 801ca12:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801ca16:	f7f0 fa27 	bl	800ce68 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801ca1a:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
 801ca1e:	4298      	cmp	r0, r3
 801ca20:	d00e      	beq.n	801ca40 <_ZN7Sensors9AddSensorEhht+0xb8>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801ca22:	a902      	add	r1, sp, #8
 801ca24:	f7ff fd6e 	bl	801c504 <_ZN6SensorC1ERKS_>
	    ++this->_M_impl._M_finish;
 801ca28:	6923      	ldr	r3, [r4, #16]
 801ca2a:	3328      	adds	r3, #40	@ 0x28
 801ca2c:	6123      	str	r3, [r4, #16]
	osSemaphoreRelease(SensorsSemaphore);
 801ca2e:	6830      	ldr	r0, [r6, #0]
 801ca30:	f7f0 fa4e 	bl	800ced0 <osSemaphoreRelease>
struct Sensor {
 801ca34:	a807      	add	r0, sp, #28
 801ca36:	f7fd ff67 	bl	801a908 <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev>
 801ca3a:	e7b5      	b.n	801c9a8 <_ZN7Sensors9AddSensorEhht+0x20>
 801ca3c:	463d      	mov	r5, r7
 801ca3e:	e7d4      	b.n	801c9ea <_ZN7Sensors9AddSensorEhht+0x62>
	  _M_realloc_insert(end(), __x);
 801ca40:	4601      	mov	r1, r0
 801ca42:	aa02      	add	r2, sp, #8
 801ca44:	f104 000c 	add.w	r0, r4, #12
 801ca48:	f7ff ff52 	bl	801c8f0 <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 801ca4c:	e7ef      	b.n	801ca2e <_ZN7Sensors9AddSensorEhht+0xa6>
	...

0801ca50 <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801ca50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ca54:	e9d0 8900 	ldrd	r8, r9, [r0]
 801ca58:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 801ca5a:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ca5e:	eba9 0208 	sub.w	r2, r9, r8
 801ca62:	4607      	mov	r7, r0
 801ca64:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 801ca66:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ca6a:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 801ca6e:	d102      	bne.n	801ca76 <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 801ca70:	4820      	ldr	r0, [pc, #128]	@ (801caf4 <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 801ca72:	f001 fb7f 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 801ca76:	45c1      	cmp	r9, r8
 801ca78:	bf14      	ite	ne
 801ca7a:	4622      	movne	r2, r4
 801ca7c:	2201      	moveq	r2, #1
 801ca7e:	eba1 0508 	sub.w	r5, r1, r8
 801ca82:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801ca84:	d231      	bcs.n	801caea <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801ca86:	b394      	cbz	r4, 801caee <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801ca88:	429c      	cmp	r4, r3
 801ca8a:	bf28      	it	cs
 801ca8c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801ca8e:	0120      	lsls	r0, r4, #4
 801ca90:	f001 fabb 	bl	801e00a <_Znwj>
 801ca94:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801ca96:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 801ca9a:	2d00      	cmp	r5, #0
 801ca9c:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 801caa0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 801caa4:	dd04      	ble.n	801cab0 <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801caa6:	462a      	mov	r2, r5
 801caa8:	4641      	mov	r1, r8
 801caaa:	4630      	mov	r0, r6
 801caac:	f002 fa2a 	bl	801ef04 <memmove>
      ptrdiff_t __count = __last - __first;
 801cab0:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 801cab4:	3510      	adds	r5, #16
      if (__count > 0)
 801cab6:	f1b9 0f00 	cmp.w	r9, #0
 801caba:	4435      	add	r5, r6
 801cabc:	dd04      	ble.n	801cac8 <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801cabe:	464a      	mov	r2, r9
 801cac0:	4651      	mov	r1, sl
 801cac2:	4628      	mov	r0, r5
 801cac4:	f002 fb16 	bl	801f0f4 <memcpy>
      return __result + __count;
 801cac8:	444d      	add	r5, r9
	if (__p)
 801caca:	f1b8 0f00 	cmp.w	r8, #0
 801cace:	d005      	beq.n	801cadc <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 801cad0:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801cad2:	4640      	mov	r0, r8
 801cad4:	eba1 0108 	sub.w	r1, r1, r8
 801cad8:	f001 fa72 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 801cadc:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801cae0:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 801cae4:	60be      	str	r6, [r7, #8]
    }
 801cae6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801caea:	461c      	mov	r4, r3
 801caec:	e7cf      	b.n	801ca8e <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801caee:	4626      	mov	r6, r4
 801caf0:	e7d1      	b.n	801ca96 <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 801caf2:	bf00      	nop
 801caf4:	0801f20c 	.word	0x0801f20c

0801caf8 <_ZN9Registers18AddRegisterPointerIyEEbtPT_>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801caf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cafc:	460c      	mov	r4, r1
 801cafe:	b087      	sub	sp, #28
 801cb00:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801cb02:	f04f 31ff 	mov.w	r1, #4294967295
 801cb06:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801cb08:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801cb0a:	f7f0 f9ad 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801cb0e:	4621      	mov	r1, r4
 801cb10:	f10d 0207 	add.w	r2, sp, #7
 801cb14:	4630      	mov	r0, r6
 801cb16:	f7fc fea4 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801cb1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801cb1e:	4604      	mov	r4, r0
	if (!success) {
 801cb20:	b943      	cbnz	r3, 801cb34 <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0x3c>
		return false;
 801cb22:	f04f 0800 	mov.w	r8, #0
		osSemaphoreRelease(RegistersSemaphore);
 801cb26:	6830      	ldr	r0, [r6, #0]
 801cb28:	f7f0 f9d2 	bl	800ced0 <osSemaphoreRelease>
}
 801cb2c:	4640      	mov	r0, r8
 801cb2e:	b007      	add	sp, #28
 801cb30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801cb34:	f10d 0007 	add.w	r0, sp, #7
 801cb38:	f7fd f830 	bl	8019b9c <_ZN9Registers9GetTypeIDIyEEhPb.isra.0>
	if (!success) {
 801cb3c:	f89d 8007 	ldrb.w	r8, [sp, #7]
 801cb40:	f1b8 0f00 	cmp.w	r8, #0
 801cb44:	d0ed      	beq.n	801cb22 <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0x2a>
	if (target_register->register_info.type != registered_type) {
 801cb46:	7923      	ldrb	r3, [r4, #4]
 801cb48:	4283      	cmp	r3, r0
 801cb4a:	d1ea      	bne.n	801cb22 <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 801cb4c:	3304      	adds	r3, #4
 801cb4e:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
 801cb52:	2f00      	cmp	r7, #0
 801cb54:	d0e5      	beq.n	801cb22 <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801cb56:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801cb58:	e9d7 3500 	ldrd	r3, r5, [r7]
 801cb5c:	1aea      	subs	r2, r5, r3
 801cb5e:	1112      	asrs	r2, r2, #4
 801cb60:	b9d1      	cbnz	r1, 801cb98 <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0xa0>
 801cb62:	7861      	ldrb	r1, [r4, #1]
 801cb64:	b9c1      	cbnz	r1, 801cb98 <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0xa0>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801cb66:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801cb68:	8162      	strh	r2, [r4, #10]
 801cb6a:	aa02      	add	r2, sp, #8
 801cb6c:	42a9      	cmp	r1, r5
		callback.pointer = pointer;
 801cb6e:	f8cd 9008 	str.w	r9, [sp, #8]
 801cb72:	d00d      	beq.n	801cb90 <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0x98>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801cb74:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801cb76:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801cb7a:	3510      	adds	r5, #16
 801cb7c:	607d      	str	r5, [r7, #4]
	target_register->mode.pointer = true;
 801cb7e:	2301      	movs	r3, #1
	osSemaphoreRelease(RegistersSemaphore);
 801cb80:	6830      	ldr	r0, [r6, #0]
	target_register->mode.pointer = true;
 801cb82:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 801cb84:	f240 1301 	movw	r3, #257	@ 0x101
 801cb88:	8123      	strh	r3, [r4, #8]
	osSemaphoreRelease(RegistersSemaphore);
 801cb8a:	f7f0 f9a1 	bl	800ced0 <osSemaphoreRelease>
	return true;
 801cb8e:	e7cd      	b.n	801cb2c <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0x34>
	  _M_realloc_insert(end(), __x);
 801cb90:	4638      	mov	r0, r7
 801cb92:	f7ff ff5d 	bl	801ca50 <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 801cb96:	e7f2      	b.n	801cb7e <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0x86>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801cb98:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 801cb9a:	4291      	cmp	r1, r2
 801cb9c:	d302      	bcc.n	801cba4 <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0xac>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801cb9e:	4803      	ldr	r0, [pc, #12]	@ (801cbac <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0xb4>)
 801cba0:	f001 faeb 	bl	801e17a <_ZSt24__throw_out_of_range_fmtPKcz>
		callback->pointer = pointer;
 801cba4:	0109      	lsls	r1, r1, #4
 801cba6:	f843 9001 	str.w	r9, [r3, r1]
 801cbaa:	e7e8      	b.n	801cb7e <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0x86>
 801cbac:	0801f44c 	.word	0x0801f44c

0801cbb0 <_ZN9Registers18AddRegisterPointerIfEEbtPT_>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801cbb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cbb4:	460c      	mov	r4, r1
 801cbb6:	b087      	sub	sp, #28
 801cbb8:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801cbba:	f04f 31ff 	mov.w	r1, #4294967295
 801cbbe:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801cbc0:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801cbc2:	f7f0 f951 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801cbc6:	4621      	mov	r1, r4
 801cbc8:	f10d 0207 	add.w	r2, sp, #7
 801cbcc:	4630      	mov	r0, r6
 801cbce:	f7fc fe48 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801cbd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801cbd6:	4604      	mov	r4, r0
	if (!success) {
 801cbd8:	b943      	cbnz	r3, 801cbec <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x3c>
		return false;
 801cbda:	f04f 0800 	mov.w	r8, #0
		osSemaphoreRelease(RegistersSemaphore);
 801cbde:	6830      	ldr	r0, [r6, #0]
 801cbe0:	f7f0 f976 	bl	800ced0 <osSemaphoreRelease>
}
 801cbe4:	4640      	mov	r0, r8
 801cbe6:	b007      	add	sp, #28
 801cbe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801cbec:	f10d 0007 	add.w	r0, sp, #7
 801cbf0:	f7fc ff86 	bl	8019b00 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 801cbf4:	f89d 8007 	ldrb.w	r8, [sp, #7]
 801cbf8:	f1b8 0f00 	cmp.w	r8, #0
 801cbfc:	d0ed      	beq.n	801cbda <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x2a>
	if (target_register->register_info.type != registered_type) {
 801cbfe:	7923      	ldrb	r3, [r4, #4]
 801cc00:	4283      	cmp	r3, r0
 801cc02:	d1ea      	bne.n	801cbda <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 801cc04:	3304      	adds	r3, #4
 801cc06:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
 801cc0a:	2f00      	cmp	r7, #0
 801cc0c:	d0e5      	beq.n	801cbda <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801cc0e:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801cc10:	e9d7 3500 	ldrd	r3, r5, [r7]
 801cc14:	1aea      	subs	r2, r5, r3
 801cc16:	1112      	asrs	r2, r2, #4
 801cc18:	b9d1      	cbnz	r1, 801cc50 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0xa0>
 801cc1a:	7861      	ldrb	r1, [r4, #1]
 801cc1c:	b9c1      	cbnz	r1, 801cc50 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0xa0>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801cc1e:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801cc20:	8162      	strh	r2, [r4, #10]
 801cc22:	aa02      	add	r2, sp, #8
 801cc24:	42a9      	cmp	r1, r5
		callback.pointer = pointer;
 801cc26:	f8cd 9008 	str.w	r9, [sp, #8]
 801cc2a:	d00d      	beq.n	801cc48 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x98>
 801cc2c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801cc2e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801cc32:	3510      	adds	r5, #16
 801cc34:	607d      	str	r5, [r7, #4]
	target_register->mode.pointer = true;
 801cc36:	2301      	movs	r3, #1
	osSemaphoreRelease(RegistersSemaphore);
 801cc38:	6830      	ldr	r0, [r6, #0]
	target_register->mode.pointer = true;
 801cc3a:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 801cc3c:	f240 1301 	movw	r3, #257	@ 0x101
 801cc40:	8123      	strh	r3, [r4, #8]
	osSemaphoreRelease(RegistersSemaphore);
 801cc42:	f7f0 f945 	bl	800ced0 <osSemaphoreRelease>
	return true;
 801cc46:	e7cd      	b.n	801cbe4 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x34>
	  _M_realloc_insert(end(), __x);
 801cc48:	4638      	mov	r0, r7
 801cc4a:	f7f3 f981 	bl	800ff50 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 801cc4e:	e7f2      	b.n	801cc36 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x86>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801cc50:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 801cc52:	4291      	cmp	r1, r2
 801cc54:	d302      	bcc.n	801cc5c <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0xac>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801cc56:	4803      	ldr	r0, [pc, #12]	@ (801cc64 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0xb4>)
 801cc58:	f001 fa8f 	bl	801e17a <_ZSt24__throw_out_of_range_fmtPKcz>
		callback->pointer = pointer;
 801cc5c:	0109      	lsls	r1, r1, #4
 801cc5e:	f843 9001 	str.w	r9, [r3, r1]
 801cc62:	e7e8      	b.n	801cc36 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x86>
 801cc64:	0801f44c 	.word	0x0801f44c

0801cc68 <_ZN10SensorDataC1EOS_>:
struct SensorData {
 801cc68:	788a      	ldrb	r2, [r1, #2]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801cc6a:	2300      	movs	r3, #0
 801cc6c:	b510      	push	{r4, lr}
 801cc6e:	880c      	ldrh	r4, [r1, #0]
 801cc70:	7082      	strb	r2, [r0, #2]
 801cc72:	8004      	strh	r4, [r0, #0]
 801cc74:	7a0a      	ldrb	r2, [r1, #8]
 801cc76:	684c      	ldr	r4, [r1, #4]
 801cc78:	7202      	strb	r2, [r0, #8]
 801cc7a:	6044      	str	r4, [r0, #4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801cc7c:	68ca      	ldr	r2, [r1, #12]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801cc7e:	60cb      	str	r3, [r1, #12]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801cc80:	60c2      	str	r2, [r0, #12]
 801cc82:	690a      	ldr	r2, [r1, #16]
 801cc84:	6102      	str	r2, [r0, #16]
	  _M_end_of_storage(__x._M_end_of_storage)
 801cc86:	694a      	ldr	r2, [r1, #20]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801cc88:	e9c1 3304 	strd	r3, r3, [r1, #16]
	  _M_end_of_storage(__x._M_end_of_storage)
 801cc8c:	6142      	str	r2, [r0, #20]
 801cc8e:	bd10      	pop	{r4, pc}

0801cc90 <_ZN7Sensors12AddInterfaceEhP19__I2C_HandleTypeDef>:
bool Sensors::AddInterface(uint8_t ID, I2C_HandleTypeDef* interface) {
 801cc90:	b570      	push	{r4, r5, r6, lr}
 801cc92:	b0a0      	sub	sp, #128	@ 0x80
 801cc94:	4616      	mov	r6, r2
 801cc96:	4604      	mov	r4, r0
	FindInterface(ID, &success);
 801cc98:	f10d 0203 	add.w	r2, sp, #3
 801cc9c:	f7fd fb80 	bl	801a3a0 <_ZN7Sensors13FindInterfaceEhPb>
	if (success) return false;
 801cca0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	d13a      	bne.n	801cd1e <_ZN7Sensors12AddInterfaceEhP19__I2C_HandleTypeDef+0x8e>
	I2Cinterface.timeout = UINT32_MAX;
 801cca8:	f04f 35ff 	mov.w	r5, #4294967295
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801ccac:	2014      	movs	r0, #20
	I2Cinterface.request_regular_process = false;
 801ccae:	f88d 3005 	strb.w	r3, [sp, #5]
	I2Cinterface.error_flag = false;
 801ccb2:	f88d 3006 	strb.w	r3, [sp, #6]
	I2Cinterface.ID = ID;
 801ccb6:	f88d 1004 	strb.w	r1, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801ccba:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
 801ccbe:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
	I2Cinterface.interface = interface;
 801ccc2:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801ccc6:	f001 f9a0 	bl	801e00a <_Znwj>
	  this->_M_impl._M_finish = __tmp + __old_size;
 801ccca:	e9cd 001a 	strd	r0, r0, [sp, #104]	@ 0x68
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801ccce:	3014      	adds	r0, #20
 801ccd0:	901c      	str	r0, [sp, #112]	@ 0x70
 801ccd2:	20a0      	movs	r0, #160	@ 0xa0
 801ccd4:	f001 f999 	bl	801e00a <_Znwj>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801ccd8:	4629      	mov	r1, r5
	I2Cinterface.current_group_ID = UINT8_MAX;
 801ccda:	9515      	str	r5, [sp, #84]	@ 0x54
	  this->_M_impl._M_finish = __tmp + __old_size;
 801ccdc:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801cce0:	30a0      	adds	r0, #160	@ 0xa0
 801cce2:	901f      	str	r0, [sp, #124]	@ 0x7c
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801cce4:	6820      	ldr	r0, [r4, #0]
 801cce6:	f7f0 f8bf 	bl	800ce68 <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801ccea:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
 801ccee:	4298      	cmp	r0, r3
 801ccf0:	d00e      	beq.n	801cd10 <_ZN7Sensors12AddInterfaceEhP19__I2C_HandleTypeDef+0x80>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801ccf2:	a901      	add	r1, sp, #4
 801ccf4:	f7ff fc72 	bl	801c5dc <_ZN12I2CInterfaceC1ERKS_>
	    ++this->_M_impl._M_finish;
 801ccf8:	6963      	ldr	r3, [r4, #20]
 801ccfa:	337c      	adds	r3, #124	@ 0x7c
 801ccfc:	6163      	str	r3, [r4, #20]
	osSemaphoreRelease(SensorsSemaphore);
 801ccfe:	6820      	ldr	r0, [r4, #0]
 801cd00:	f7f0 f8e6 	bl	800ced0 <osSemaphoreRelease>
}
 801cd04:	a801      	add	r0, sp, #4
 801cd06:	f7fd fe27 	bl	801a958 <_ZN12I2CInterfaceD1Ev>
	return true;
 801cd0a:	2001      	movs	r0, #1
}
 801cd0c:	b020      	add	sp, #128	@ 0x80
 801cd0e:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
 801cd10:	4601      	mov	r1, r0
 801cd12:	aa01      	add	r2, sp, #4
 801cd14:	f104 0010 	add.w	r0, r4, #16
 801cd18:	f7ff fcf2 	bl	801c700 <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 801cd1c:	e7ef      	b.n	801ccfe <_ZN7Sensors12AddInterfaceEhP19__I2C_HandleTypeDef+0x6e>
	if (success) return false;
 801cd1e:	2000      	movs	r0, #0
 801cd20:	e7f4      	b.n	801cd0c <_ZN7Sensors12AddInterfaceEhP19__I2C_HandleTypeDef+0x7c>
	...

0801cd24 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801cd24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801cd28:	e9d0 6800 	ldrd	r6, r8, [r0]
 801cd2c:	4b2a      	ldr	r3, [pc, #168]	@ (801cdd8 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>)
 801cd2e:	4605      	mov	r5, r0
 801cd30:	eba8 0406 	sub.w	r4, r8, r6
 801cd34:	460f      	mov	r7, r1
 801cd36:	4691      	mov	r9, r2
 801cd38:	10e4      	asrs	r4, r4, #3
 801cd3a:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 801cd3c:	4b27      	ldr	r3, [pc, #156]	@ (801cddc <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb8>)
 801cd3e:	429c      	cmp	r4, r3
 801cd40:	d102      	bne.n	801cd48 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 801cd42:	4827      	ldr	r0, [pc, #156]	@ (801cde0 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
 801cd44:	f001 fa16 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 801cd48:	45b0      	cmp	r8, r6
 801cd4a:	bf14      	ite	ne
 801cd4c:	4622      	movne	r2, r4
 801cd4e:	2201      	moveq	r2, #1
 801cd50:	eba1 0b06 	sub.w	fp, r1, r6
 801cd54:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801cd56:	d223      	bcs.n	801cda0 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801cd58:	b324      	cbz	r4, 801cda4 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x80>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801cd5a:	429c      	cmp	r4, r3
 801cd5c:	bf28      	it	cs
 801cd5e:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801cd60:	2018      	movs	r0, #24
 801cd62:	4360      	muls	r0, r4
 801cd64:	f001 f951 	bl	801e00a <_Znwj>
 801cd68:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801cd6a:	4649      	mov	r1, r9
 801cd6c:	eb0a 000b 	add.w	r0, sl, fp
 801cd70:	f7fd fa76 	bl	801a260 <_ZN10SensorDataC1ERKS_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801cd74:	46b1      	mov	r9, r6
      _ForwardIterator __cur = __result;
 801cd76:	4650      	mov	r0, sl
      for (; __first != __last; ++__first, (void)++__cur)
 801cd78:	454f      	cmp	r7, r9
 801cd7a:	f100 0b18 	add.w	fp, r0, #24
 801cd7e:	d113      	bne.n	801cda8 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x84>
 801cd80:	45c1      	cmp	r9, r8
 801cd82:	d11c      	bne.n	801cdbe <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	if (__p)
 801cd84:	b126      	cbz	r6, 801cd90 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6c>
		    this->_M_impl._M_end_of_storage - __old_start);
 801cd86:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801cd88:	4630      	mov	r0, r6
 801cd8a:	1b89      	subs	r1, r1, r6
 801cd8c:	f001 f918 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801cd90:	2318      	movs	r3, #24
 801cd92:	fb03 a304 	mla	r3, r3, r4, sl
      this->_M_impl._M_finish = __new_finish;
 801cd96:	e9c5 ab00 	strd	sl, fp, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801cd9a:	60ab      	str	r3, [r5, #8]
    }
 801cd9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cda0:	461c      	mov	r4, r3
 801cda2:	e7dd      	b.n	801cd60 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801cda4:	46a2      	mov	sl, r4
 801cda6:	e7e0      	b.n	801cd6a <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801cda8:	4649      	mov	r1, r9
 801cdaa:	f7ff ff5d 	bl	801cc68 <_ZN10SensorDataC1EOS_>
      }
 801cdae:	f109 000c 	add.w	r0, r9, #12
 801cdb2:	f7e5 f91f 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 801cdb6:	f109 0918 	add.w	r9, r9, #24
 801cdba:	4658      	mov	r0, fp
 801cdbc:	e7dc      	b.n	801cd78 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
 801cdbe:	4649      	mov	r1, r9
 801cdc0:	4658      	mov	r0, fp
 801cdc2:	f7ff ff51 	bl	801cc68 <_ZN10SensorDataC1EOS_>
 801cdc6:	f109 000c 	add.w	r0, r9, #12
 801cdca:	f10b 0b18 	add.w	fp, fp, #24
 801cdce:	f109 0918 	add.w	r9, r9, #24
 801cdd2:	f7e5 f90f 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 801cdd6:	e7d3      	b.n	801cd80 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5c>
 801cdd8:	aaaaaaab 	.word	0xaaaaaaab
 801cddc:	05555555 	.word	0x05555555
 801cde0:	0801f20c 	.word	0x0801f20c

0801cde4 <_ZN7Sensors21AddSensorDataWithTypeEhthb>:
bool Sensors::AddSensorDataWithType(uint8_t sensor_ID, uint16_t sensor_register, uint8_t type, bool publishable) {
 801cde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cde8:	b08f      	sub	sp, #60	@ 0x3c
 801cdea:	4615      	mov	r5, r2
 801cdec:	4604      	mov	r4, r0
 801cdee:	4698      	mov	r8, r3
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801cdf0:	f10d 020e 	add.w	r2, sp, #14
bool Sensors::AddSensorDataWithType(uint8_t sensor_ID, uint16_t sensor_register, uint8_t type, bool publishable) {
 801cdf4:	468b      	mov	fp, r1
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801cdf6:	f7fd fba9 	bl	801a54c <_ZN7Sensors10FindSensorEhPb>
	if (!success) return false;
 801cdfa:	f89d 600e 	ldrb.w	r6, [sp, #14]
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801cdfe:	4607      	mov	r7, r0
	if (!success) return false;
 801ce00:	b926      	cbnz	r6, 801ce0c <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x28>
 801ce02:	2600      	movs	r6, #0
}
 801ce04:	4630      	mov	r0, r6
 801ce06:	b00f      	add	sp, #60	@ 0x3c
 801ce08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SensorGroup* sensor_group = FindSensorGroup(sensor->parent, &success);
 801ce0c:	7841      	ldrb	r1, [r0, #1]
 801ce0e:	f10d 020e 	add.w	r2, sp, #14
 801ce12:	4620      	mov	r0, r4
 801ce14:	f7fd fb01 	bl	801a41a <_ZN7Sensors15FindSensorGroupEhPb>
	if (!success) return HAL_ERROR;
 801ce18:	f89d 300e 	ldrb.w	r3, [sp, #14]
	SensorGroup* sensor_group = FindSensorGroup(sensor->parent, &success);
 801ce1c:	4681      	mov	r9, r0
	if (!success) return HAL_ERROR;
 801ce1e:	2b00      	cmp	r3, #0
 801ce20:	d0f0      	beq.n	801ce04 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x20>
	if (!sensor_group->publishable) publishable = false;
 801ce22:	f890 a003 	ldrb.w	sl, [r0, #3]
	FindSensorData(sensor_ID, sensor_register, &success);
 801ce26:	462a      	mov	r2, r5
	if (!sensor_group->publishable) publishable = false;
 801ce28:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
	FindSensorData(sensor_ID, sensor_register, &success);
 801ce2c:	4659      	mov	r1, fp
	if (!sensor_group->publishable) publishable = false;
 801ce2e:	f1ba 0f00 	cmp.w	sl, #0
	FindSensorData(sensor_ID, sensor_register, &success);
 801ce32:	4620      	mov	r0, r4
	if (!sensor_group->publishable) publishable = false;
 801ce34:	bf18      	it	ne
 801ce36:	469a      	movne	sl, r3
	FindSensorData(sensor_ID, sensor_register, &success);
 801ce38:	f10d 030e 	add.w	r3, sp, #14
 801ce3c:	f7fd fc4d 	bl	801a6da <_ZN7Sensors14FindSensorDataEhtPb>
	if (success) return false;
 801ce40:	f89d 600e 	ldrb.w	r6, [sp, #14]
 801ce44:	2e00      	cmp	r6, #0
 801ce46:	d1dc      	bne.n	801ce02 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x1e>
	data.parent = sensor->ID;
 801ce48:	793b      	ldrb	r3, [r7, #4]
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801ce4a:	f04f 31ff 	mov.w	r1, #4294967295
 801ce4e:	6820      	ldr	r0, [r4, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801ce50:	960d      	str	r6, [sp, #52]	@ 0x34
	data.active = false;
 801ce52:	f88d 6020 	strb.w	r6, [sp, #32]
	data.parent = sensor->ID;
 801ce56:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
	data.register_address = sensor_register;
 801ce5a:	f8ad 5024 	strh.w	r5, [sp, #36]	@ 0x24
	data.type =	type;
 801ce5e:	f88d 8027 	strb.w	r8, [sp, #39]	@ 0x27
	data.read_index = 0;
 801ce62:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 801ce66:	e9cd 660b 	strd	r6, r6, [sp, #44]	@ 0x2c
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801ce6a:	f7ef fffd 	bl	800ce68 <osSemaphoreAcquire>
	switch (data.type) {
 801ce6e:	f1b8 0f08 	cmp.w	r8, #8
 801ce72:	d814      	bhi.n	801ce9e <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xba>
 801ce74:	e8df f018 	tbh	[pc, r8, lsl #1]
 801ce78:	00440009 	.word	0x00440009
 801ce7c:	00b1007b 	.word	0x00b1007b
 801ce80:	00130013 	.word	0x00130013
 801ce84:	00130013 	.word	0x00130013
 801ce88:	011d      	.short	0x011d
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ce8a:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
 801ce8e:	1a9b      	subs	r3, r3, r2
		data.index = sensor_data_uint8.size();
 801ce90:	fa5f f883 	uxtb.w	r8, r3
		if (data.index >= SENSOR_MAX_REGISTER_NB_PER_TYPE) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801ce94:	f1b8 0f13 	cmp.w	r8, #19
		data.index = sensor_data_uint8.size();
 801ce98:	f88d 8026 	strb.w	r8, [sp, #38]	@ 0x26
		if (data.index >= SENSOR_MAX_REGISTER_NB_PER_TYPE) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801ce9c:	d906      	bls.n	801ceac <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xc8>
		if (!success) {osSemaphoreRelease(SensorsSemaphore); return false;} // TODO Or continue? Simply don't add the topic ?
 801ce9e:	6820      	ldr	r0, [r4, #0]
 801cea0:	f7f0 f816 	bl	800ced0 <osSemaphoreRelease>
      }
 801cea4:	a80b      	add	r0, sp, #44	@ 0x2c
 801cea6:	f7e5 f8a5 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 801ceaa:	e7ab      	b.n	801ce04 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x20>
		success = registers->AddRegister<uint8_t>(sensor_register); if (!success) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801ceac:	4629      	mov	r1, r5
 801ceae:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801ceb2:	f7fe ffcd 	bl	801be50 <_ZN9Registers11AddRegisterIhEEbt>
 801ceb6:	f88d 000e 	strb.w	r0, [sp, #14]
 801ceba:	2800      	cmp	r0, #0
 801cebc:	d0ef      	beq.n	801ce9e <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xba>
		sensor_data_uint8.push_back(0);
 801cebe:	2300      	movs	r3, #0
      { emplace_back(std::move(__x)); }
 801cec0:	a904      	add	r1, sp, #16
 801cec2:	f104 001c 	add.w	r0, r4, #28
 801cec6:	f88d 3010 	strb.w	r3, [sp, #16]
 801ceca:	f7f4 f835 	bl	8010f38 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	return *(this->_M_impl._M_start + __n);
 801cece:	69e2      	ldr	r2, [r4, #28]
		success = registers->AddRegisterPointer<uint8_t>(sensor_register, &(sensor_data_uint8[data.index]));
 801ced0:	4629      	mov	r1, r5
 801ced2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801ced6:	4442      	add	r2, r8
 801ced8:	f7ff f85c 	bl	801bf94 <_ZN9Registers18AddRegisterPointerIhEEbtPT_>
 801cedc:	f88d 000e 	strb.w	r0, [sp, #14]
		if (!success) {sensor_data_uint8.erase(sensor_data_uint8.begin() + data.index); osSemaphoreRelease(SensorsSemaphore); return false;}
 801cee0:	2800      	cmp	r0, #0
 801cee2:	f040 814a 	bne.w	801d17a <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x396>
      { return __normal_iterator(_M_current + __n); }
 801cee6:	69e0      	ldr	r0, [r4, #28]
      : _M_current(__i) { }
 801cee8:	6a22      	ldr	r2, [r4, #32]
      { return __normal_iterator(_M_current + __n); }
 801ceea:	4440      	add	r0, r8
 801ceec:	1c41      	adds	r1, r0, #1
      if (__position + 1 != end())
 801ceee:	4291      	cmp	r1, r2
 801cef0:	d002      	beq.n	801cef8 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x114>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801cef2:	1a52      	subs	r2, r2, r1
 801cef4:	f002 f806 	bl	801ef04 <memmove>
      --this->_M_impl._M_finish;
 801cef8:	6a23      	ldr	r3, [r4, #32]
 801cefa:	3b01      	subs	r3, #1
 801cefc:	6223      	str	r3, [r4, #32]
 801cefe:	e7ce      	b.n	801ce9e <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xba>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801cf00:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 801cf04:	1a9b      	subs	r3, r3, r2
		data.index = sensor_data_uint16.size();
 801cf06:	f3c3 0847 	ubfx	r8, r3, #1, #8
		if (data.index >= SENSOR_MAX_REGISTER_NB_PER_TYPE) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801cf0a:	f1b8 0f13 	cmp.w	r8, #19
		data.index = sensor_data_uint16.size();
 801cf0e:	f88d 8026 	strb.w	r8, [sp, #38]	@ 0x26
		if (data.index >= SENSOR_MAX_REGISTER_NB_PER_TYPE) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801cf12:	d8c4      	bhi.n	801ce9e <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xba>
		success = registers->AddRegister<uint16_t>(sensor_register); if (!success) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801cf14:	4629      	mov	r1, r5
 801cf16:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801cf1a:	f7fe ffcf 	bl	801bebc <_ZN9Registers11AddRegisterItEEbt>
 801cf1e:	f88d 000e 	strb.w	r0, [sp, #14]
 801cf22:	2800      	cmp	r0, #0
 801cf24:	d0bb      	beq.n	801ce9e <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xba>
		sensor_data_uint16.push_back(0);
 801cf26:	2300      	movs	r3, #0
      { emplace_back(std::move(__x)); }
 801cf28:	a904      	add	r1, sp, #16
 801cf2a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
	return *(this->_M_impl._M_start + __n);
 801cf2e:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 801cf32:	f8ad 3010 	strh.w	r3, [sp, #16]
      { emplace_back(std::move(__x)); }
 801cf36:	f7fe fe27 	bl	801bb88 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_>
	return *(this->_M_impl._M_start + __n);
 801cf3a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
		success = registers->AddRegisterPointer<uint16_t>(sensor_register, &(sensor_data_uint16[data.index]));
 801cf3c:	4629      	mov	r1, r5
 801cf3e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801cf42:	eb02 0248 	add.w	r2, r2, r8, lsl #1
 801cf46:	f7ff f8bf 	bl	801c0c8 <_ZN9Registers18AddRegisterPointerItEEbtPT_>
 801cf4a:	f88d 000e 	strb.w	r0, [sp, #14]
		if (!success) {sensor_data_uint16.erase(sensor_data_uint16.begin() + data.index); osSemaphoreRelease(SensorsSemaphore); return false;}
 801cf4e:	2800      	cmp	r0, #0
 801cf50:	f040 8113 	bne.w	801d17a <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x396>
 801cf54:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
      : _M_current(__i) { }
 801cf56:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      { return __normal_iterator(_M_current + __n); }
 801cf58:	4458      	add	r0, fp
 801cf5a:	1c81      	adds	r1, r0, #2
      if (__position + 1 != end())
 801cf5c:	4291      	cmp	r1, r2
 801cf5e:	d002      	beq.n	801cf66 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x182>
 801cf60:	1a52      	subs	r2, r2, r1
 801cf62:	f001 ffcf 	bl	801ef04 <memmove>
      --this->_M_impl._M_finish;
 801cf66:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801cf68:	3b02      	subs	r3, #2
 801cf6a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801cf6c:	e797      	b.n	801ce9e <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xba>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801cf6e:	e9d4 230d 	ldrd	r2, r3, [r4, #52]	@ 0x34
 801cf72:	1a9b      	subs	r3, r3, r2
		data.index = sensor_data_uint32.size();
 801cf74:	f3c3 0887 	ubfx	r8, r3, #2, #8
		if (data.index >= SENSOR_MAX_REGISTER_NB_PER_TYPE) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801cf78:	f1b8 0f13 	cmp.w	r8, #19
		data.index = sensor_data_uint32.size();
 801cf7c:	f88d 8026 	strb.w	r8, [sp, #38]	@ 0x26
		if (data.index >= SENSOR_MAX_REGISTER_NB_PER_TYPE) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801cf80:	d88d      	bhi.n	801ce9e <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xba>
		success = registers->AddRegister<uint32_t>(sensor_register); if (!success) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801cf82:	4629      	mov	r1, r5
 801cf84:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801cf88:	f7fe ffce 	bl	801bf28 <_ZN9Registers11AddRegisterImEEbt>
 801cf8c:	f88d 000e 	strb.w	r0, [sp, #14]
 801cf90:	2800      	cmp	r0, #0
 801cf92:	d084      	beq.n	801ce9e <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xba>
		sensor_data_uint32.push_back(0);
 801cf94:	2300      	movs	r3, #0
      { emplace_back(std::move(__x)); }
 801cf96:	a904      	add	r1, sp, #16
 801cf98:	f104 0034 	add.w	r0, r4, #52	@ 0x34
	return *(this->_M_impl._M_start + __n);
 801cf9c:	ea4f 0b88 	mov.w	fp, r8, lsl #2
 801cfa0:	9304      	str	r3, [sp, #16]
      { emplace_back(std::move(__x)); }
 801cfa2:	f7fe fe3d 	bl	801bc20 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_>
	return *(this->_M_impl._M_start + __n);
 801cfa6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
		success = registers->AddRegisterPointer<uint32_t>(sensor_register, &(sensor_data_uint32[data.index]));
 801cfa8:	4629      	mov	r1, r5
 801cfaa:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801cfae:	eb02 0288 	add.w	r2, r2, r8, lsl #2
 801cfb2:	f7ff f912 	bl	801c1da <_ZN9Registers18AddRegisterPointerImEEbtPT_>
 801cfb6:	f88d 000e 	strb.w	r0, [sp, #14]
		if (!success) {sensor_data_uint32.erase(sensor_data_uint32.begin() + data.index); osSemaphoreRelease(SensorsSemaphore); return false;}
 801cfba:	2800      	cmp	r0, #0
 801cfbc:	f040 80dd 	bne.w	801d17a <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x396>
 801cfc0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
      : _M_current(__i) { }
 801cfc2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
      { return __normal_iterator(_M_current + __n); }
 801cfc4:	4458      	add	r0, fp
 801cfc6:	1d01      	adds	r1, r0, #4
      if (__position + 1 != end())
 801cfc8:	4291      	cmp	r1, r2
 801cfca:	d002      	beq.n	801cfd2 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x1ee>
 801cfcc:	1a52      	subs	r2, r2, r1
 801cfce:	f001 ff99 	bl	801ef04 <memmove>
      --this->_M_impl._M_finish;
 801cfd2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801cfd4:	3b04      	subs	r3, #4
 801cfd6:	63a3      	str	r3, [r4, #56]	@ 0x38
 801cfd8:	e761      	b.n	801ce9e <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xba>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801cfda:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	@ 0x40
 801cfde:	1a9b      	subs	r3, r3, r2
		data.index = sensor_data_uint64.size();
 801cfe0:	f3c3 08c7 	ubfx	r8, r3, #3, #8
		if (data.index >= SENSOR_MAX_REGISTER_NB_PER_TYPE) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801cfe4:	f1b8 0f13 	cmp.w	r8, #19
		data.index = sensor_data_uint64.size();
 801cfe8:	f88d 8026 	strb.w	r8, [sp, #38]	@ 0x26
		if (data.index >= SENSOR_MAX_REGISTER_NB_PER_TYPE) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801cfec:	f63f af57 	bhi.w	801ce9e <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xba>
		success = registers->AddRegister<uint64_t>(sensor_register); if (!success) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801cff0:	f8d4 b0bc 	ldr.w	fp, [r4, #188]	@ 0xbc
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801cff4:	f04f 31ff 	mov.w	r1, #4294967295
 801cff8:	f8db 0000 	ldr.w	r0, [fp]
 801cffc:	f7ef ff34 	bl	800ce68 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801d000:	f10d 020f 	add.w	r2, sp, #15
 801d004:	4629      	mov	r1, r5
 801d006:	4658      	mov	r0, fp
 801d008:	f7fc fc2b 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801d00c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801d010:	b123      	cbz	r3, 801d01c <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x238>
		osSemaphoreRelease(RegistersSemaphore);
 801d012:	f8db 0000 	ldr.w	r0, [fp]
 801d016:	f7ef ff5b 	bl	800ced0 <osSemaphoreRelease>
		success = registers->AddRegister<float>(sensor_register); if (!success) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801d01a:	e740      	b.n	801ce9e <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xba>
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801d01c:	f10d 000f 	add.w	r0, sp, #15
	configuration_.mode = mode;
 801d020:	f8ad 3010 	strh.w	r3, [sp, #16]
 801d024:	9301      	str	r3, [sp, #4]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801d026:	f7fc fdb9 	bl	8019b9c <_ZN9Registers9GetTypeIDIyEEhPb.isra.0>
	configuration_.register_info = register_;
 801d02a:	9b01      	ldr	r3, [sp, #4]
 801d02c:	2201      	movs	r2, #1
 801d02e:	f8ad 5012 	strh.w	r5, [sp, #18]
 801d032:	f88d 3015 	strb.w	r3, [sp, #21]
 801d036:	f88d 0014 	strb.w	r0, [sp, #20]
 801d03a:	f8ad 2016 	strh.w	r2, [sp, #22]
	configuration_.register_semaphore = NULL;
 801d03e:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (success) {
 801d042:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801d046:	b123      	cbz	r3, 801d052 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x26e>
		registers.push_back(configuration_);
 801d048:	a904      	add	r1, sp, #16
 801d04a:	f10b 0004 	add.w	r0, fp, #4
 801d04e:	f7f2 ff3d 	bl	800fecc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
	osSemaphoreRelease(RegistersSemaphore);
 801d052:	f8db 0000 	ldr.w	r0, [fp]
 801d056:	f7ef ff3b 	bl	800ced0 <osSemaphoreRelease>
	return success;
 801d05a:	f89d 300f 	ldrb.w	r3, [sp, #15]
		success = registers->AddRegister<uint64_t>(sensor_register); if (!success) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801d05e:	f88d 300e 	strb.w	r3, [sp, #14]
 801d062:	2b00      	cmp	r3, #0
 801d064:	f43f af1b 	beq.w	801ce9e <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xba>
		sensor_data_uint64.push_back(0);
 801d068:	2200      	movs	r2, #0
 801d06a:	2300      	movs	r3, #0
      { emplace_back(std::move(__x)); }
 801d06c:	a904      	add	r1, sp, #16
 801d06e:	f104 0040 	add.w	r0, r4, #64	@ 0x40
	return *(this->_M_impl._M_start + __n);
 801d072:	ea4f 0bc8 	mov.w	fp, r8, lsl #3
 801d076:	e9cd 2304 	strd	r2, r3, [sp, #16]
      { emplace_back(std::move(__x)); }
 801d07a:	f7fe fe1d 	bl	801bcb8 <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_>
	return *(this->_M_impl._M_start + __n);
 801d07e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
		success = registers->AddRegisterPointer<uint64_t>(sensor_register, &(sensor_data_uint64[data.index]));
 801d080:	4629      	mov	r1, r5
 801d082:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801d086:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 801d08a:	f7ff fd35 	bl	801caf8 <_ZN9Registers18AddRegisterPointerIyEEbtPT_>
 801d08e:	f88d 000e 	strb.w	r0, [sp, #14]
		if (!success) {sensor_data_uint64.erase(sensor_data_uint64.begin() + data.index); osSemaphoreRelease(SensorsSemaphore); return false;}
 801d092:	2800      	cmp	r0, #0
 801d094:	d171      	bne.n	801d17a <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x396>
 801d096:	6c20      	ldr	r0, [r4, #64]	@ 0x40
      : _M_current(__i) { }
 801d098:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      { return __normal_iterator(_M_current + __n); }
 801d09a:	4458      	add	r0, fp
 801d09c:	f100 0108 	add.w	r1, r0, #8
      if (__position + 1 != end())
 801d0a0:	4291      	cmp	r1, r2
 801d0a2:	d002      	beq.n	801d0aa <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x2c6>
 801d0a4:	1a52      	subs	r2, r2, r1
 801d0a6:	f001 ff2d 	bl	801ef04 <memmove>
      --this->_M_impl._M_finish;
 801d0aa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801d0ac:	3b08      	subs	r3, #8
 801d0ae:	6463      	str	r3, [r4, #68]	@ 0x44
 801d0b0:	e6f5      	b.n	801ce9e <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xba>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801d0b2:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 801d0b6:	1a9b      	subs	r3, r3, r2
		data.index = sensor_data_float.size();
 801d0b8:	f3c3 0887 	ubfx	r8, r3, #2, #8
		if (data.index >= SENSOR_MAX_REGISTER_NB_PER_TYPE) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801d0bc:	f1b8 0f13 	cmp.w	r8, #19
		data.index = sensor_data_float.size();
 801d0c0:	f88d 8026 	strb.w	r8, [sp, #38]	@ 0x26
		if (data.index >= SENSOR_MAX_REGISTER_NB_PER_TYPE) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801d0c4:	f63f aeeb 	bhi.w	801ce9e <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xba>
		success = registers->AddRegister<float>(sensor_register); if (!success) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801d0c8:	f8d4 b0bc 	ldr.w	fp, [r4, #188]	@ 0xbc
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801d0cc:	f04f 31ff 	mov.w	r1, #4294967295
 801d0d0:	f8db 0000 	ldr.w	r0, [fp]
 801d0d4:	f7ef fec8 	bl	800ce68 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801d0d8:	f10d 020f 	add.w	r2, sp, #15
 801d0dc:	4629      	mov	r1, r5
 801d0de:	4658      	mov	r0, fp
 801d0e0:	f7fc fbbf 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801d0e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801d0e8:	2b00      	cmp	r3, #0
 801d0ea:	d192      	bne.n	801d012 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x22e>
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801d0ec:	f10d 000f 	add.w	r0, sp, #15
	configuration_.mode = mode;
 801d0f0:	f8ad 3010 	strh.w	r3, [sp, #16]
 801d0f4:	9301      	str	r3, [sp, #4]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801d0f6:	f7fc fd03 	bl	8019b00 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	configuration_.register_info = register_;
 801d0fa:	9b01      	ldr	r3, [sp, #4]
 801d0fc:	2201      	movs	r2, #1
 801d0fe:	f8ad 5012 	strh.w	r5, [sp, #18]
 801d102:	f88d 3015 	strb.w	r3, [sp, #21]
 801d106:	f88d 0014 	strb.w	r0, [sp, #20]
 801d10a:	f8ad 2016 	strh.w	r2, [sp, #22]
	configuration_.register_semaphore = NULL;
 801d10e:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (success) {
 801d112:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801d116:	b123      	cbz	r3, 801d122 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x33e>
		registers.push_back(configuration_);
 801d118:	a904      	add	r1, sp, #16
 801d11a:	f10b 0004 	add.w	r0, fp, #4
 801d11e:	f7f2 fed5 	bl	800fecc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
	osSemaphoreRelease(RegistersSemaphore);
 801d122:	f8db 0000 	ldr.w	r0, [fp]
 801d126:	f7ef fed3 	bl	800ced0 <osSemaphoreRelease>
	return success;
 801d12a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801d12e:	f88d 300e 	strb.w	r3, [sp, #14]
 801d132:	2b00      	cmp	r3, #0
 801d134:	f43f aeb3 	beq.w	801ce9e <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xba>
		sensor_data_float.push_back(0);
 801d138:	2300      	movs	r3, #0
      { emplace_back(std::move(__x)); }
 801d13a:	a904      	add	r1, sp, #16
 801d13c:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
	return *(this->_M_impl._M_start + __n);
 801d140:	ea4f 0b88 	mov.w	fp, r8, lsl #2
 801d144:	9304      	str	r3, [sp, #16]
      { emplace_back(std::move(__x)); }
 801d146:	f7fe fe05 	bl	801bd54 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>
	return *(this->_M_impl._M_start + __n);
 801d14a:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
		success = registers->AddRegisterPointer<float>(sensor_register, &(sensor_data_float[data.index]));
 801d14c:	4629      	mov	r1, r5
 801d14e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801d152:	eb02 0288 	add.w	r2, r2, r8, lsl #2
 801d156:	f7ff fd2b 	bl	801cbb0 <_ZN9Registers18AddRegisterPointerIfEEbtPT_>
 801d15a:	f88d 000e 	strb.w	r0, [sp, #14]
		if (!success) {sensor_data_float.erase(sensor_data_float.begin() + data.index); osSemaphoreRelease(SensorsSemaphore); return false;}
 801d15e:	b960      	cbnz	r0, 801d17a <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x396>
 801d160:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
      : _M_current(__i) { }
 801d162:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      { return __normal_iterator(_M_current + __n); }
 801d164:	4458      	add	r0, fp
 801d166:	1d01      	adds	r1, r0, #4
      if (__position + 1 != end())
 801d168:	4291      	cmp	r1, r2
 801d16a:	d002      	beq.n	801d172 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x38e>
 801d16c:	1a52      	subs	r2, r2, r1
 801d16e:	f001 fec9 	bl	801ef04 <memmove>
      --this->_M_impl._M_finish;
 801d172:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801d174:	3b04      	subs	r3, #4
 801d176:	6523      	str	r3, [r4, #80]	@ 0x50
 801d178:	e691      	b.n	801ce9e <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xba>
	success = registers->AddRegisterSemaphore(sensor_register, &SensorsSemaphore);
 801d17a:	4622      	mov	r2, r4
 801d17c:	4629      	mov	r1, r5
 801d17e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801d182:	f7fc fb8d 	bl	80198a0 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	success = registers->SetRegisterPermissions(sensor_register, READ_PERMISSION);
 801d186:	2202      	movs	r2, #2
 801d188:	4629      	mov	r1, r5
 801d18a:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 801d18e:	f7fc fbdc 	bl	801994a <_ZN9Registers22SetRegisterPermissionsEth>
 801d192:	4680      	mov	r8, r0
 801d194:	f88d 000e 	strb.w	r0, [sp, #14]
	if (!success) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801d198:	2800      	cmp	r0, #0
 801d19a:	f43f ae80 	beq.w	801ce9e <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xba>
	if (publishable) {
 801d19e:	f1ba 0f00 	cmp.w	sl, #0
 801d1a2:	d00b      	beq.n	801d1bc <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x3d8>
		success = publishers->AddTopic(sensor_group->ID, sensor_register);
 801d1a4:	462a      	mov	r2, r5
 801d1a6:	f899 1002 	ldrb.w	r1, [r9, #2]
 801d1aa:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 801d1ae:	f7fb fa63 	bl	8018678 <_ZN10Publishers8AddTopicEht>
 801d1b2:	f88d 000e 	strb.w	r0, [sp, #14]
		if (!success) {osSemaphoreRelease(SensorsSemaphore); return false;} // TODO Or continue? Simply don't add the topic ?
 801d1b6:	2800      	cmp	r0, #0
 801d1b8:	f43f ae71 	beq.w	801ce9e <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xba>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801d1bc:	e9d7 0306 	ldrd	r0, r3, [r7, #24]
 801d1c0:	4298      	cmp	r0, r3
 801d1c2:	d00a      	beq.n	801d1da <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x3f6>
 801d1c4:	a908      	add	r1, sp, #32
 801d1c6:	f7fd f84b 	bl	801a260 <_ZN10SensorDataC1ERKS_>
	    ++this->_M_impl._M_finish;
 801d1ca:	69bb      	ldr	r3, [r7, #24]
 801d1cc:	3318      	adds	r3, #24
 801d1ce:	61bb      	str	r3, [r7, #24]
	osSemaphoreRelease(SensorsSemaphore);
 801d1d0:	6820      	ldr	r0, [r4, #0]
	return true;
 801d1d2:	4646      	mov	r6, r8
	osSemaphoreRelease(SensorsSemaphore);
 801d1d4:	f7ef fe7c 	bl	800ced0 <osSemaphoreRelease>
	return true;
 801d1d8:	e664      	b.n	801cea4 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xc0>
	  _M_realloc_insert(end(), __x);
 801d1da:	4601      	mov	r1, r0
 801d1dc:	aa08      	add	r2, sp, #32
 801d1de:	f107 0014 	add.w	r0, r7, #20
 801d1e2:	f7ff fd9f 	bl	801cd24 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 801d1e6:	e7f3      	b.n	801d1d0 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x3ec>

0801d1e8 <_ZN8Services4InitEP9RegistersP13CommunicationP4LEDS>:
 *
 * @param input registers_: the Registers instance
 * @param input communication_: the Communication instance
 * @param input leds_: the LEDS instance
 */
void Services::Init(Registers* registers_, Communication* communication_, LEDS* leds_) {
 801d1e8:	b510      	push	{r4, lr}
 801d1ea:	4604      	mov	r4, r0
	registers = registers_;
 801d1ec:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 801d1f0:	f8c0 1438 	str.w	r1, [r0, #1080]	@ 0x438
	communication = communication_;
	leds = leds_;

	ServiceSemaphore = osSemaphoreNew(1,1,NULL);
 801d1f4:	2101      	movs	r1, #1
	communication = communication_;
 801d1f6:	f8c0 243c 	str.w	r2, [r0, #1084]	@ 0x43c
	ServiceSemaphore = osSemaphoreNew(1,1,NULL);
 801d1fa:	2200      	movs	r2, #0
	leds = leds_;
 801d1fc:	f8c0 3440 	str.w	r3, [r0, #1088]	@ 0x440
	ServiceSemaphore = osSemaphoreNew(1,1,NULL);
 801d200:	4608      	mov	r0, r1
 801d202:	f7ef fdd5 	bl	800cdb0 <osSemaphoreNew>
 801d206:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(ServiceSemaphore);
}
 801d208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(ServiceSemaphore);
 801d20c:	f7ef be60 	b.w	800ced0 <osSemaphoreRelease>

0801d210 <_ZN8Services10ResetQueueEv>:

/**
 * @brief Reset the pending services
 */
void Services::ResetQueue(void) {
 801d210:	b538      	push	{r3, r4, r5, lr}
	queue_size = 0;
 801d212:	2500      	movs	r5, #0
void Services::ResetQueue(void) {
 801d214:	4604      	mov	r4, r0
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801d216:	f04f 31ff 	mov.w	r1, #4294967295
	queue_size = 0;
 801d21a:	7105      	strb	r5, [r0, #4]
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801d21c:	6800      	ldr	r0, [r0, #0]
 801d21e:	f7ef fe23 	bl	800ce68 <osSemaphoreAcquire>
	for (uint8_t index = 0; index < NUMBER_OF_SERVICES; index++) {
		services[index].active = false;
		services[index].reception_flag = false;
		services[index].error = false;
	}
	osSemaphoreRelease(ServiceSemaphore);
 801d222:	6820      	ldr	r0, [r4, #0]
		services[index].active = false;
 801d224:	8125      	strh	r5, [r4, #8]
		services[index].error = false;
 801d226:	7725      	strb	r5, [r4, #28]
		services[index].active = false;
 801d228:	8425      	strh	r5, [r4, #32]
		services[index].error = false;
 801d22a:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
}
 801d22e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	osSemaphoreRelease(ServiceSemaphore);
 801d232:	f7ef be4d 	b.w	800ced0 <osSemaphoreRelease>

0801d236 <_ZN8ServicesC1Ev>:
Services::Services() {
 801d236:	b510      	push	{r4, lr}
 801d238:	4604      	mov	r4, r0
	ResetQueue();
 801d23a:	f7ff ffe9 	bl	801d210 <_ZN8Services10ResetQueueEv>
}
 801d23e:	4620      	mov	r0, r4
 801d240:	bd10      	pop	{r4, pc}

0801d242 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>:
 * @param input interface: the interface from which the data comes from, used to find the service
 * @param input access: whether WRITE or READ
 * @param output success: whether successful
 * @return service index
 */
uint8_t Services::FindQueueIndex(uint8_t start_index, Register remote_register, ServiceInterface interface, bool access, bool* success) {
 801d242:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801d246:	460c      	mov	r4, r1
 801d248:	a902      	add	r1, sp, #8
 801d24a:	4605      	mov	r5, r0
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801d24c:	6800      	ldr	r0, [r0, #0]
uint8_t Services::FindQueueIndex(uint8_t start_index, Register remote_register, ServiceInterface interface, bool access, bool* success) {
 801d24e:	f89d 8024 	ldrb.w	r8, [sp, #36]	@ 0x24
 801d252:	e901 000c 	stmdb	r1, {r2, r3}
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801d256:	f04f 31ff 	mov.w	r1, #4294967295
 801d25a:	f89d 7021 	ldrb.w	r7, [sp, #33]	@ 0x21
 801d25e:	f7ef fe03 	bl	800ce68 <osSemaphoreAcquire>
		if (services[index].active) {
			Register registered_register = services[index].configuration.register_;
			ServiceInterface registered_interface =services[index].configuration.interface;

			// Check register address
			if (remote_register.address == registered_register.address) {
 801d262:	f8bd 1000 	ldrh.w	r1, [sp]
 801d266:	eb04 0344 	add.w	r3, r4, r4, lsl #1
				// Check interface
				if (interface.interface == registered_interface.interface) {
 801d26a:	f89d 0020 	ldrb.w	r0, [sp, #32]
 801d26e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
	for (uint8_t index = start_index; index < NUMBER_OF_SERVICES; index++) {
 801d272:	2c01      	cmp	r4, #1
 801d274:	d905      	bls.n	801d282 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x40>
			}
		}
	}
	osSemaphoreRelease(ServiceSemaphore);
	*success = false;
	return 0;
 801d276:	2400      	movs	r4, #0
	osSemaphoreRelease(ServiceSemaphore);
 801d278:	6828      	ldr	r0, [r5, #0]
 801d27a:	f7ef fe29 	bl	800ced0 <osSemaphoreRelease>
	return 0;
 801d27e:	4626      	mov	r6, r4
 801d280:	e014      	b.n	801d2ac <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x6a>
		if (services[index].active) {
 801d282:	7a1e      	ldrb	r6, [r3, #8]
 801d284:	b1c6      	cbz	r6, 801d2b8 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
			if (remote_register.address == registered_register.address) {
 801d286:	895a      	ldrh	r2, [r3, #10]
 801d288:	428a      	cmp	r2, r1
 801d28a:	d115      	bne.n	801d2b8 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
				if (interface.interface == registered_interface.interface) {
 801d28c:	7c9a      	ldrb	r2, [r3, #18]
 801d28e:	4282      	cmp	r2, r0
 801d290:	d112      	bne.n	801d2b8 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
			ServiceInterface registered_interface =services[index].configuration.interface;
 801d292:	7cda      	ldrb	r2, [r3, #19]
					if (interface.address == registered_interface.address || registered_interface.address == ALL || interface.address == ALL) {
 801d294:	4297      	cmp	r7, r2
 801d296:	d003      	beq.n	801d2a0 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x5e>
 801d298:	2aff      	cmp	r2, #255	@ 0xff
 801d29a:	d001      	beq.n	801d2a0 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x5e>
 801d29c:	2fff      	cmp	r7, #255	@ 0xff
 801d29e:	d10b      	bne.n	801d2b8 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
						if (access == services[index].configuration.access) { // check access type
 801d2a0:	7d1a      	ldrb	r2, [r3, #20]
 801d2a2:	4542      	cmp	r2, r8
 801d2a4:	d108      	bne.n	801d2b8 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
							osSemaphoreRelease(ServiceSemaphore);
 801d2a6:	6828      	ldr	r0, [r5, #0]
 801d2a8:	f7ef fe12 	bl	800ced0 <osSemaphoreRelease>
							*success = true;
 801d2ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
}
 801d2ae:	4620      	mov	r0, r4
							*success = true;
 801d2b0:	701e      	strb	r6, [r3, #0]
}
 801d2b2:	b002      	add	sp, #8
 801d2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint8_t index = start_index; index < NUMBER_OF_SERVICES; index++) {
 801d2b8:	3401      	adds	r4, #1
 801d2ba:	3318      	adds	r3, #24
 801d2bc:	b2e4      	uxtb	r4, r4
 801d2be:	e7d8      	b.n	801d272 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x30>

0801d2c0 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>:
 * @brief Receive a write service access acknowledgment
 *
 * @param input information: service information associated to the write acknowledgment
 * @param input status: value returned by the remote module
 */
void Services::ReceiveWrite(ServiceConfiguration information, uint8_t status) {
 801d2c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d2c4:	b08b      	sub	sp, #44	@ 0x2c
 801d2c6:	4605      	mov	r5, r0
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
		if (not success) return;

		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
		buffer_uint8[index][0] = status;
		services[index].reception_flag = true;
 801d2c8:	f04f 0918 	mov.w	r9, #24
void Services::ReceiveWrite(ServiceConfiguration information, uint8_t status) {
 801d2cc:	ae05      	add	r6, sp, #20
 801d2ce:	f89d 7048 	ldrb.w	r7, [sp, #72]	@ 0x48
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 801d2d2:	f10d 0827 	add.w	r8, sp, #39	@ 0x27
void Services::ReceiveWrite(ServiceConfiguration information, uint8_t status) {
 801d2d6:	e886 000e 	stmia.w	r6, {r1, r2, r3}
	bool success = true;
 801d2da:	2301      	movs	r3, #1
	uint8_t start_index = 0;
 801d2dc:	2100      	movs	r1, #0
	bool success = true;
 801d2de:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
	while (success) {
 801d2e2:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801d2e6:	b913      	cbnz	r3, 801d2ee <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x2e>
		osSemaphoreRelease(ServiceSemaphore);

		start_index = index + 1;
	}
}
 801d2e8:	b00b      	add	sp, #44	@ 0x2c
 801d2ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 801d2ee:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801d2f2:	4628      	mov	r0, r5
 801d2f4:	f8cd 8008 	str.w	r8, [sp, #8]
 801d2f8:	9301      	str	r3, [sp, #4]
 801d2fa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d2fe:	f8ad 3000 	strh.w	r3, [sp]
 801d302:	e896 000c 	ldmia.w	r6, {r2, r3}
 801d306:	f7ff ff9c 	bl	801d242 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 801d30a:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 801d30e:	4604      	mov	r4, r0
		if (not success) return;
 801d310:	2b00      	cmp	r3, #0
 801d312:	d0e9      	beq.n	801d2e8 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x28>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801d314:	f04f 31ff 	mov.w	r1, #4294967295
 801d318:	6828      	ldr	r0, [r5, #0]
 801d31a:	f7ef fda5 	bl	800ce68 <osSemaphoreAcquire>
		services[index].reception_flag = true;
 801d31e:	2201      	movs	r2, #1
		buffer_uint8[index][0] = status;
 801d320:	eb05 2304 	add.w	r3, r5, r4, lsl #8
 801d324:	f883 7038 	strb.w	r7, [r3, #56]	@ 0x38
		services[index].reception_flag = true;
 801d328:	fb09 5304 	mla	r3, r9, r4, r5
		osSemaphoreRelease(ServiceSemaphore);
 801d32c:	6828      	ldr	r0, [r5, #0]
		services[index].reception_flag = true;
 801d32e:	725a      	strb	r2, [r3, #9]
		osSemaphoreRelease(ServiceSemaphore);
 801d330:	f7ef fdce 	bl	800ced0 <osSemaphoreRelease>
		start_index = index + 1;
 801d334:	1c61      	adds	r1, r4, #1
 801d336:	b2c9      	uxtb	r1, r1
 801d338:	e7d3      	b.n	801d2e2 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x22>

0801d33a <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>:
 * @brief Receive an service access error
 *
 * @param input information: service information associated to the acknowledgment
 * @param input error: error flag returned by the remote module
 */
void Services::ReceiveError(ServiceConfiguration information, uint8_t error) {
 801d33a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d33e:	b08a      	sub	sp, #40	@ 0x28
 801d340:	4604      	mov	r4, r0
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
		if (not success) return;

		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
		buffer_uint8[index][0] = error;
		services[index].error = true;
 801d342:	2718      	movs	r7, #24
void Services::ReceiveError(ServiceConfiguration information, uint8_t error) {
 801d344:	ae05      	add	r6, sp, #20
 801d346:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 801d34a:	f10d 0927 	add.w	r9, sp, #39	@ 0x27
void Services::ReceiveError(ServiceConfiguration information, uint8_t error) {
 801d34e:	e886 000e 	stmia.w	r6, {r1, r2, r3}
	bool success = true;
 801d352:	2301      	movs	r3, #1
	uint8_t start_index = 0;
 801d354:	2100      	movs	r1, #0
	bool success = true;
 801d356:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
	while (success) {
 801d35a:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801d35e:	b913      	cbnz	r3, 801d366 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x2c>
		services[index].reception_flag = true;
		osSemaphoreRelease(ServiceSemaphore);

		start_index = index + 1;
	}
}
 801d360:	b00a      	add	sp, #40	@ 0x28
 801d362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 801d366:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801d36a:	4620      	mov	r0, r4
 801d36c:	f8cd 9008 	str.w	r9, [sp, #8]
 801d370:	9301      	str	r3, [sp, #4]
 801d372:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d376:	f8ad 3000 	strh.w	r3, [sp]
 801d37a:	e896 000c 	ldmia.w	r6, {r2, r3}
 801d37e:	f7ff ff60 	bl	801d242 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 801d382:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 801d386:	4605      	mov	r5, r0
		if (not success) return;
 801d388:	2b00      	cmp	r3, #0
 801d38a:	d0e9      	beq.n	801d360 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x26>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801d38c:	f04f 31ff 	mov.w	r1, #4294967295
 801d390:	6820      	ldr	r0, [r4, #0]
 801d392:	f7ef fd69 	bl	800ce68 <osSemaphoreAcquire>
		services[index].error = true;
 801d396:	f105 0a01 	add.w	sl, r5, #1
		buffer_uint8[index][0] = error;
 801d39a:	eb04 2305 	add.w	r3, r4, r5, lsl #8
		services[index].error = true;
 801d39e:	2201      	movs	r2, #1
		buffer_uint8[index][0] = error;
 801d3a0:	f883 8038 	strb.w	r8, [r3, #56]	@ 0x38
		services[index].error = true;
 801d3a4:	fb05 7307 	mla	r3, r5, r7, r7
		osSemaphoreRelease(ServiceSemaphore);
 801d3a8:	6820      	ldr	r0, [r4, #0]
		services[index].reception_flag = true;
 801d3aa:	fb07 4505 	mla	r5, r7, r5, r4
		services[index].error = true;
 801d3ae:	4423      	add	r3, r4
 801d3b0:	711a      	strb	r2, [r3, #4]
		services[index].reception_flag = true;
 801d3b2:	726a      	strb	r2, [r5, #9]
		osSemaphoreRelease(ServiceSemaphore);
 801d3b4:	f7ef fd8c 	bl	800ced0 <osSemaphoreRelease>
		start_index = index + 1;
 801d3b8:	fa5f f18a 	uxtb.w	r1, sl
 801d3bc:	e7cd      	b.n	801d35a <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x20>

0801d3be <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb>:
 * @param input interface: interface associated to the register to find
 * @param input access: access mode of the register to find
 * @param output success: whether successful
 * @return the Register complete configuration (type, isArray, length)
 */
Register Services::FindRemoteRegister(Register remote_register, ServiceInterface interface, bool access, bool* success) {
 801d3be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d3c2:	b087      	sub	sp, #28
 801d3c4:	460d      	mov	r5, r1
 801d3c6:	4604      	mov	r4, r0
 801d3c8:	a904      	add	r1, sp, #16
 801d3ca:	9f10      	ldr	r7, [sp, #64]	@ 0x40
	uint8_t index;
	index = FindQueueIndex(0, remote_register, interface, access, success);
 801d3cc:	4628      	mov	r0, r5
Register Services::FindRemoteRegister(Register remote_register, ServiceInterface interface, bool access, bool* success) {
 801d3ce:	e881 000c 	stmia.w	r1, {r2, r3}
	index = FindQueueIndex(0, remote_register, interface, access, success);
 801d3d2:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 801d3d6:	9702      	str	r7, [sp, #8]
 801d3d8:	9301      	str	r3, [sp, #4]
 801d3da:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801d3de:	f8ad 3000 	strh.w	r3, [sp]
 801d3e2:	e891 000c 	ldmia.w	r1, {r2, r3}
 801d3e6:	2100      	movs	r1, #0
 801d3e8:	f7ff ff2b 	bl	801d242 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
	if (*success) {
 801d3ec:	783b      	ldrb	r3, [r7, #0]
	index = FindQueueIndex(0, remote_register, interface, access, success);
 801d3ee:	4606      	mov	r6, r0
	if (*success) {
 801d3f0:	b1f3      	cbz	r3, 801d430 <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb+0x72>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801d3f2:	f04f 31ff 	mov.w	r1, #4294967295
 801d3f6:	6828      	ldr	r0, [r5, #0]
 801d3f8:	f7ef fd36 	bl	800ce68 <osSemaphoreAcquire>
		Register found_register = services[index].configuration.register_;
 801d3fc:	2318      	movs	r3, #24
 801d3fe:	210a      	movs	r1, #10
		osSemaphoreRelease(ServiceSemaphore);
 801d400:	6828      	ldr	r0, [r5, #0]
		Register found_register = services[index].configuration.register_;
 801d402:	fb03 5206 	mla	r2, r3, r6, r5
 801d406:	fb13 1306 	smlabb	r3, r3, r6, r1
 801d40a:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 801d40e:	442b      	add	r3, r5
 801d410:	f892 800c 	ldrb.w	r8, [r2, #12]
 801d414:	89d6      	ldrh	r6, [r2, #14]
 801d416:	78df      	ldrb	r7, [r3, #3]
		osSemaphoreRelease(ServiceSemaphore);
 801d418:	f7ef fd5a 	bl	800ced0 <osSemaphoreRelease>

		return found_register;
 801d41c:	f8a4 9000 	strh.w	r9, [r4]
 801d420:	f884 8002 	strb.w	r8, [r4, #2]
 801d424:	70e7      	strb	r7, [r4, #3]
 801d426:	80a6      	strh	r6, [r4, #4]
	}

	*success = false;
	return Register();
}
 801d428:	4620      	mov	r0, r4
 801d42a:	b007      	add	sp, #28
 801d42c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return Register();
 801d430:	6023      	str	r3, [r4, #0]
 801d432:	80a3      	strh	r3, [r4, #4]
 801d434:	e7f8      	b.n	801d428 <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb+0x6a>
	...

0801d438 <_ZN11ServomotorsC1EPmS0_>:
 * @brief Class constructor
 *
 * @param input servomotor1_pulse_: timer pulse pointer of the servomotor 1
 * @param input servomotor2_pulse_: timer pulse pointer of the servomotor 2
 */
Servomotors::Servomotors(uint32_t* servomotor1_pulse_, uint32_t* servomotor2_pulse_) {
 801d438:	b570      	push	{r4, r5, r6, lr}
 801d43a:	4604      	mov	r4, r0
 801d43c:	460e      	mov	r6, r1
 801d43e:	4615      	mov	r5, r2
 801d440:	f000 fb2e 	bl	801daa0 <_ZN19TrajectoryGeneratorC1Ev>
 801d444:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 801d448:	f000 fb2a 	bl	801daa0 <_ZN19TrajectoryGeneratorC1Ev>
 801d44c:	4b03      	ldr	r3, [pc, #12]	@ (801d45c <_ZN11ServomotorsC1EPmS0_+0x24>)
	servomotor1_pulse = servomotor1_pulse_;
	servomotor2_pulse = servomotor2_pulse_;
}
 801d44e:	4620      	mov	r0, r4
Servomotors::Servomotors(uint32_t* servomotor1_pulse_, uint32_t* servomotor2_pulse_) {
 801d450:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
	servomotor2_pulse = servomotor2_pulse_;
 801d454:	e9c4 651e 	strd	r6, r5, [r4, #120]	@ 0x78
}
 801d458:	bd70      	pop	{r4, r5, r6, pc}
 801d45a:	bf00      	nop
 801d45c:	42c80000 	.word	0x42c80000

0801d460 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801d460:	491e      	ldr	r1, [pc, #120]	@ (801d4dc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 801d462:	b510      	push	{r4, lr}
 801d464:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801d466:	4608      	mov	r0, r1
 801d468:	f000 fe66 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801d46c:	bb40      	cbnz	r0, 801d4c0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801d46e:	491c      	ldr	r1, [pc, #112]	@ (801d4e0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>)
 801d470:	481a      	ldr	r0, [pc, #104]	@ (801d4dc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801d472:	f000 fe61 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801d476:	bb28      	cbnz	r0, 801d4c4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801d478:	491a      	ldr	r1, [pc, #104]	@ (801d4e4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>)
 801d47a:	4818      	ldr	r0, [pc, #96]	@ (801d4dc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801d47c:	f000 fe5c 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801d480:	bb10      	cbnz	r0, 801d4c8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801d482:	4919      	ldr	r1, [pc, #100]	@ (801d4e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>)
 801d484:	4815      	ldr	r0, [pc, #84]	@ (801d4dc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801d486:	f000 fe57 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801d48a:	b9f8      	cbnz	r0, 801d4cc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801d48c:	4917      	ldr	r1, [pc, #92]	@ (801d4ec <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>)
 801d48e:	4813      	ldr	r0, [pc, #76]	@ (801d4dc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801d490:	f000 fe52 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801d494:	b9e0      	cbnz	r0, 801d4d0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801d496:	4916      	ldr	r1, [pc, #88]	@ (801d4f0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>)
 801d498:	4810      	ldr	r0, [pc, #64]	@ (801d4dc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801d49a:	f000 fe4d 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801d49e:	b9c8      	cbnz	r0, 801d4d4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801d4a0:	4914      	ldr	r1, [pc, #80]	@ (801d4f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>)
 801d4a2:	480e      	ldr	r0, [pc, #56]	@ (801d4dc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801d4a4:	f000 fe48 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801d4a8:	b9b0      	cbnz	r0, 801d4d8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801d4aa:	4913      	ldr	r1, [pc, #76]	@ (801d4f8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>)
 801d4ac:	480b      	ldr	r0, [pc, #44]	@ (801d4dc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801d4ae:	f000 fe43 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801d4b2:	2800      	cmp	r0, #0
 801d4b4:	bf14      	ite	ne
 801d4b6:	2309      	movne	r3, #9
 801d4b8:	2300      	moveq	r3, #0
 801d4ba:	7020      	strb	r0, [r4, #0]
}
 801d4bc:	4618      	mov	r0, r3
 801d4be:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801d4c0:	2300      	movs	r3, #0
 801d4c2:	e7fa      	b.n	801d4ba <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801d4c4:	2301      	movs	r3, #1
 801d4c6:	e7f8      	b.n	801d4ba <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801d4c8:	2302      	movs	r3, #2
 801d4ca:	e7f6      	b.n	801d4ba <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801d4cc:	2303      	movs	r3, #3
 801d4ce:	e7f4      	b.n	801d4ba <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801d4d0:	2304      	movs	r3, #4
 801d4d2:	e7f2      	b.n	801d4ba <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801d4d4:	2306      	movs	r3, #6
 801d4d6:	e7f0      	b.n	801d4ba <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801d4d8:	2308      	movs	r3, #8
 801d4da:	e7ee      	b.n	801d4ba <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
 801d4dc:	0801f65c 	.word	0x0801f65c
 801d4e0:	0801f654 	.word	0x0801f654
 801d4e4:	0801f644 	.word	0x0801f644
 801d4e8:	0801f63c 	.word	0x0801f63c
 801d4ec:	0801f664 	.word	0x0801f664
 801d4f0:	0801f64c 	.word	0x0801f64c
 801d4f4:	0801f634 	.word	0x0801f634
 801d4f8:	0801f62c 	.word	0x0801f62c

0801d4fc <_ZN17MasterSubscribersC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 801d4fc:	2200      	movs	r2, #0
 801d4fe:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801d502:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801d506:	e9c0 2207 	strd	r2, r2, [r0, #28]

/**
 * @brief Class constructor
 */
MasterSubscribers::MasterSubscribers() {
}
 801d50a:	4770      	bx	lr

0801d50c <_ZN17MasterSubscribers4InitEP9RegistersP4LEDS>:
 * @brief Initialize the class with references to other classes. Set default values.
 *
 * @param input registers_: the Registers instance
 * @param input leds_: the LEDS instance
 */
void MasterSubscribers::Init(Registers* registers_, LEDS* leds_) {
 801d50c:	b510      	push	{r4, lr}
	registers = registers_;
	leds = leds_;
 801d50e:	e9c0 1200 	strd	r1, r2, [r0]

	SubscribersSemaphore = osSemaphoreNew(1,1,NULL);
 801d512:	2101      	movs	r1, #1
void MasterSubscribers::Init(Registers* registers_, LEDS* leds_) {
 801d514:	4604      	mov	r4, r0
	SubscribersSemaphore = osSemaphoreNew(1,1,NULL);
 801d516:	2200      	movs	r2, #0
 801d518:	4608      	mov	r0, r1
 801d51a:	f7ef fc49 	bl	800cdb0 <osSemaphoreNew>
 801d51e:	60a0      	str	r0, [r4, #8]
	osSemaphoreRelease(SubscribersSemaphore);
}
 801d520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(SubscribersSemaphore);
 801d524:	f7ef bcd4 	b.w	800ced0 <osSemaphoreRelease>

0801d528 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>:
 *
 * @param input ID: subscriber ID
 * @param output success: whether successful
 * @return the subscriber index
 */
uint8_t MasterSubscribers::FindSubscriberIndex(uint8_t ID, bool* success) {
 801d528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d52a:	4604      	mov	r4, r0
 801d52c:	460d      	mov	r5, r1
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801d52e:	6880      	ldr	r0, [r0, #8]
 801d530:	f04f 31ff 	mov.w	r1, #4294967295
uint8_t MasterSubscribers::FindSubscriberIndex(uint8_t ID, bool* success) {
 801d534:	4616      	mov	r6, r2
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801d536:	f7ef fc97 	bl	800ce68 <osSemaphoreAcquire>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801d53a:	4a10      	ldr	r2, [pc, #64]	@ (801d57c <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x54>)
	for (uint8_t index = 0; index < configurations.size(); index++) {
		if (configurations[index].ID == ID) {
 801d53c:	2728      	movs	r7, #40	@ 0x28
 801d53e:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 801d542:	1a5b      	subs	r3, r3, r1
 801d544:	10db      	asrs	r3, r3, #3
 801d546:	4353      	muls	r3, r2
	for (uint8_t index = 0; index < configurations.size(); index++) {
 801d548:	2200      	movs	r2, #0
 801d54a:	b2d0      	uxtb	r0, r2
 801d54c:	4298      	cmp	r0, r3
 801d54e:	d305      	bcc.n	801d55c <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x34>
			osSemaphoreRelease(SubscribersSemaphore);
			*success = true;
			return index;
		}
	}
	osSemaphoreRelease(SubscribersSemaphore);
 801d550:	68a0      	ldr	r0, [r4, #8]
 801d552:	f7ef fcbd 	bl	800ced0 <osSemaphoreRelease>
	*success = false;
	return 0;
 801d556:	2300      	movs	r3, #0
 801d558:	461d      	mov	r5, r3
 801d55a:	e00b      	b.n	801d574 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x4c>
		if (configurations[index].ID == ID) {
 801d55c:	fb07 fc00 	mul.w	ip, r7, r0
 801d560:	3201      	adds	r2, #1
 801d562:	f811 c00c 	ldrb.w	ip, [r1, ip]
 801d566:	45ac      	cmp	ip, r5
 801d568:	d1ef      	bne.n	801d54a <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x22>
 801d56a:	4605      	mov	r5, r0
			osSemaphoreRelease(SubscribersSemaphore);
 801d56c:	68a0      	ldr	r0, [r4, #8]
 801d56e:	f7ef fcaf 	bl	800ced0 <osSemaphoreRelease>
			return index;
 801d572:	2301      	movs	r3, #1
}
 801d574:	4628      	mov	r0, r5
			*success = true;
 801d576:	7033      	strb	r3, [r6, #0]
}
 801d578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d57a:	bf00      	nop
 801d57c:	cccccccd 	.word	0xcccccccd

0801d580 <_ZN17MasterSubscribers19SetSubscriberStatusEhb>:
bool MasterSubscribers::SetSubscriberStatus(uint8_t ID, bool status) {
 801d580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d582:	4616      	mov	r6, r2
	uint8_t index = FindSubscriberIndex(ID, &success);
 801d584:	f10d 0207 	add.w	r2, sp, #7
bool MasterSubscribers::SetSubscriberStatus(uint8_t ID, bool status) {
 801d588:	4605      	mov	r5, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 801d58a:	f7ff ffcd 	bl	801d528 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 801d58e:	f89d 7007 	ldrb.w	r7, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 801d592:	4604      	mov	r4, r0
	if (!success) return false;
 801d594:	b177      	cbz	r7, 801d5b4 <_ZN17MasterSubscribers19SetSubscriberStatusEhb+0x34>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801d596:	f04f 31ff 	mov.w	r1, #4294967295
 801d59a:	68a8      	ldr	r0, [r5, #8]
 801d59c:	f7ef fc64 	bl	800ce68 <osSemaphoreAcquire>
	configurations[index].activated = status;
 801d5a0:	68e9      	ldr	r1, [r5, #12]
	return *(this->_M_impl._M_start + __n);
 801d5a2:	b223      	sxth	r3, r4
	osSemaphoreRelease(SubscribersSemaphore);
 801d5a4:	68a8      	ldr	r0, [r5, #8]
 801d5a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	configurations[index].activated = status;
 801d5aa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d5ae:	704e      	strb	r6, [r1, #1]
	osSemaphoreRelease(SubscribersSemaphore);
 801d5b0:	f7ef fc8e 	bl	800ced0 <osSemaphoreRelease>
}
 801d5b4:	4638      	mov	r0, r7
 801d5b6:	b003      	add	sp, #12
 801d5b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d5ba <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801d5ba:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801d5bc:	4611      	mov	r1, r2
 801d5be:	b508      	push	{r3, lr}
			if (length != 2) return false;
 801d5c0:	d108      	bne.n	801d5d4 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x1a>
			self->SetSubscriberStatus(input[0], (bool) input[1]);
 801d5c2:	7852      	ldrb	r2, [r2, #1]
 801d5c4:	7809      	ldrb	r1, [r1, #0]
 801d5c6:	3a00      	subs	r2, #0
 801d5c8:	bf18      	it	ne
 801d5ca:	2201      	movne	r2, #1
 801d5cc:	f7ff ffd8 	bl	801d580 <_ZN17MasterSubscribers19SetSubscriberStatusEhb>
			return true;
 801d5d0:	2001      	movs	r0, #1
		}
 801d5d2:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 801d5d4:	2000      	movs	r0, #0
 801d5d6:	e7fc      	b.n	801d5d2 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x18>

0801d5d8 <_ZN17MasterSubscribers15AddressAcceptedEhh>:
bool MasterSubscribers::AddressAccepted(uint8_t ID, uint8_t address) {
 801d5d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d5da:	4616      	mov	r6, r2
	uint8_t index = FindSubscriberIndex(ID, &success);
 801d5dc:	f10d 0207 	add.w	r2, sp, #7
bool MasterSubscribers::AddressAccepted(uint8_t ID, uint8_t address) {
 801d5e0:	4605      	mov	r5, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 801d5e2:	f7ff ffa1 	bl	801d528 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 801d5e6:	f89d 7007 	ldrb.w	r7, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 801d5ea:	4604      	mov	r4, r0
	if (!success) return false;
 801d5ec:	b1ef      	cbz	r7, 801d62a <_ZN17MasterSubscribers15AddressAcceptedEhh+0x52>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801d5ee:	f04f 31ff 	mov.w	r1, #4294967295
 801d5f2:	68a8      	ldr	r0, [r5, #8]
 801d5f4:	f7ef fc38 	bl	800ce68 <osSemaphoreAcquire>
 801d5f8:	68ea      	ldr	r2, [r5, #12]
 801d5fa:	b223      	sxth	r3, r4
 801d5fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d600:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801d604:	e9d3 3207 	ldrd	r3, r2, [r3, #28]
	if (configurations[index].filters.size() == 0) {
 801d608:	429a      	cmp	r2, r3
 801d60a:	d109      	bne.n	801d620 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x48>
		osSemaphoreRelease(SubscribersSemaphore);
 801d60c:	68a8      	ldr	r0, [r5, #8]
 801d60e:	f7ef fc5f 	bl	800ced0 <osSemaphoreRelease>
}
 801d612:	4638      	mov	r0, r7
 801d614:	b003      	add	sp, #12
 801d616:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (uint8_t filtered_address : configurations[index].filters) {
 801d618:	f813 1b01 	ldrb.w	r1, [r3], #1
		if (filtered_address == address) {
 801d61c:	42b1      	cmp	r1, r6
 801d61e:	e7f4      	b.n	801d60a <_ZN17MasterSubscribers15AddressAcceptedEhh+0x32>
	for (uint8_t filtered_address : configurations[index].filters) {
 801d620:	4293      	cmp	r3, r2
 801d622:	d1f9      	bne.n	801d618 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x40>
	osSemaphoreRelease(SubscribersSemaphore);
 801d624:	68a8      	ldr	r0, [r5, #8]
 801d626:	f7ef fc53 	bl	800ced0 <osSemaphoreRelease>
	if (!success) return false;
 801d62a:	2700      	movs	r7, #0
 801d62c:	e7f1      	b.n	801d612 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x3a>

0801d62e <_ZN17MasterSubscribers12ClearFiltersEh>:
bool MasterSubscribers::ClearFilters(uint8_t ID) {
 801d62e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t index = FindSubscriberIndex(ID, &success);
 801d630:	f10d 0207 	add.w	r2, sp, #7
bool MasterSubscribers::ClearFilters(uint8_t ID) {
 801d634:	4605      	mov	r5, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 801d636:	f7ff ff77 	bl	801d528 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 801d63a:	f89d 6007 	ldrb.w	r6, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 801d63e:	4604      	mov	r4, r0
	if (!success) return false;
 801d640:	b196      	cbz	r6, 801d668 <_ZN17MasterSubscribers12ClearFiltersEh+0x3a>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801d642:	f04f 31ff 	mov.w	r1, #4294967295
 801d646:	68a8      	ldr	r0, [r5, #8]
 801d648:	f7ef fc0e 	bl	800ce68 <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 801d64c:	68ea      	ldr	r2, [r5, #12]
 801d64e:	b223      	sxth	r3, r4
	osSemaphoreRelease(SubscribersSemaphore);
 801d650:	68a8      	ldr	r0, [r5, #8]
 801d652:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d656:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801d65a:	e9d3 2107 	ldrd	r2, r1, [r3, #28]
 801d65e:	428a      	cmp	r2, r1
	    this->_M_impl._M_finish = __pos;
 801d660:	bf18      	it	ne
 801d662:	621a      	strne	r2, [r3, #32]
 801d664:	f7ef fc34 	bl	800ced0 <osSemaphoreRelease>
}
 801d668:	4630      	mov	r0, r6
 801d66a:	b002      	add	sp, #8
 801d66c:	bd70      	pop	{r4, r5, r6, pc}

0801d66e <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			self->ClearFilters(*input);
 801d66e:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801d670:	b508      	push	{r3, lr}
			self->ClearFilters(*input);
 801d672:	f7ff ffdc 	bl	801d62e <_ZN17MasterSubscribers12ClearFiltersEh>
		}
 801d676:	2001      	movs	r0, #1
 801d678:	bd08      	pop	{r3, pc}
	...

0801d67c <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>:
 * @param input remote_register: register configuration with only address filled
 * @param input interface: interface from which the published data comes from
 * @param output success: whether successful
 * @return the register configuration index from the subscriber
 */
uint8_t MasterSubscribers::FindRemoteRegisterIndex(uint8_t ID, Register remote_register, SubscriberInterface interface, bool* success) {
 801d67c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801d680:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801d682:	ac02      	add	r4, sp, #8
 801d684:	4605      	mov	r5, r0
 801d686:	e904 000c 	stmdb	r4, {r2, r3}
	uint8_t subscriber_index = FindSubscriberIndex(ID, success);
 801d68a:	4632      	mov	r2, r6
 801d68c:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 801d690:	f89d 7029 	ldrb.w	r7, [sp, #41]	@ 0x29
 801d694:	f7ff ff48 	bl	801d528 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (not *success)
 801d698:	7833      	ldrb	r3, [r6, #0]
	uint8_t subscriber_index = FindSubscriberIndex(ID, success);
 801d69a:	4604      	mov	r4, r0
	if (not *success)
 801d69c:	b1eb      	cbz	r3, 801d6da <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x5e>
		return 0;

	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801d69e:	f04f 31ff 	mov.w	r1, #4294967295
 801d6a2:	68a8      	ldr	r0, [r5, #8]
 801d6a4:	f7ef fbe0 	bl	800ce68 <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 801d6a8:	68ea      	ldr	r2, [r5, #12]
 801d6aa:	b223      	sxth	r3, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801d6ac:	4920      	ldr	r1, [pc, #128]	@ (801d730 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xb4>)
	for (uint8_t index = 0; index < configurations[subscriber_index].remote_registers.size(); index++) {
		Register subscribed_register = configurations[subscriber_index].remote_registers[index];
		SubscriberInterface subscribed_interface = configurations[subscriber_index].interfaces[index];

		if (remote_register.address == subscribed_register.address) {
 801d6ae:	f8bd e000 	ldrh.w	lr, [sp]
		Register subscribed_register = configurations[subscriber_index].remote_registers[index];
 801d6b2:	f04f 0906 	mov.w	r9, #6
	return *(this->_M_impl._M_start + __n);
 801d6b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d6ba:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801d6be:	e9d2 4301 	ldrd	r4, r3, [r2, #4]
 801d6c2:	1b1b      	subs	r3, r3, r4
 801d6c4:	105b      	asrs	r3, r3, #1
 801d6c6:	434b      	muls	r3, r1
	for (uint8_t index = 0; index < configurations[subscriber_index].remote_registers.size(); index++) {
 801d6c8:	2100      	movs	r1, #0
 801d6ca:	b2c8      	uxtb	r0, r1
 801d6cc:	4298      	cmp	r0, r3
 801d6ce:	d306      	bcc.n	801d6de <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x62>
//					}
				}
			}
		}
	}
	osSemaphoreRelease(SubscribersSemaphore);
 801d6d0:	68a8      	ldr	r0, [r5, #8]
 801d6d2:	f7ef fbfd 	bl	800ced0 <osSemaphoreRelease>
	*success = false;
 801d6d6:	2300      	movs	r3, #0
 801d6d8:	7033      	strb	r3, [r6, #0]
		return 0;
 801d6da:	2400      	movs	r4, #0
 801d6dc:	e01d      	b.n	801d71a <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x9e>
		Register subscribed_register = configurations[subscriber_index].remote_registers[index];
 801d6de:	fb09 fc00 	mul.w	ip, r9, r0
		if (remote_register.address == subscribed_register.address) {
 801d6e2:	f834 c00c 	ldrh.w	ip, [r4, ip]
 801d6e6:	45f4      	cmp	ip, lr
 801d6e8:	d120      	bne.n	801d72c <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xb0>
	return *(this->_M_impl._M_start + __n);
 801d6ea:	f8d2 c010 	ldr.w	ip, [r2, #16]
 801d6ee:	eb0c 0a40 	add.w	sl, ip, r0, lsl #1
		SubscriberInterface subscribed_interface = configurations[subscriber_index].interfaces[index];
 801d6f2:	f81c c010 	ldrb.w	ip, [ip, r0, lsl #1]
			if (interface.interface == subscribed_interface.interface || subscribed_interface.interface == ALL_INTERFACES || interface.interface == ALL_INTERFACES) {
 801d6f6:	45c4      	cmp	ip, r8
 801d6f8:	d005      	beq.n	801d706 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x8a>
 801d6fa:	f1bc 0f07 	cmp.w	ip, #7
 801d6fe:	d002      	beq.n	801d706 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x8a>
 801d700:	f1b8 0f07 	cmp.w	r8, #7
 801d704:	d112      	bne.n	801d72c <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xb0>
		SubscriberInterface subscribed_interface = configurations[subscriber_index].interfaces[index];
 801d706:	f89a c001 	ldrb.w	ip, [sl, #1]
				if (interface.address == subscribed_interface.address || subscribed_interface.address == ALL || interface.address == ALL) {
 801d70a:	4567      	cmp	r7, ip
 801d70c:	d109      	bne.n	801d722 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xa6>
 801d70e:	4604      	mov	r4, r0
					osSemaphoreRelease(SubscribersSemaphore);
 801d710:	68a8      	ldr	r0, [r5, #8]
 801d712:	f7ef fbdd 	bl	800ced0 <osSemaphoreRelease>
					*success = true;
 801d716:	2301      	movs	r3, #1
 801d718:	7033      	strb	r3, [r6, #0]
	return 0;

}
 801d71a:	4620      	mov	r0, r4
 801d71c:	b002      	add	sp, #8
 801d71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (interface.address == subscribed_interface.address || subscribed_interface.address == ALL || interface.address == ALL) {
 801d722:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801d726:	d0f2      	beq.n	801d70e <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x92>
 801d728:	2fff      	cmp	r7, #255	@ 0xff
 801d72a:	d0f0      	beq.n	801d70e <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x92>
	for (uint8_t index = 0; index < configurations[subscriber_index].remote_registers.size(); index++) {
 801d72c:	3101      	adds	r1, #1
 801d72e:	e7cc      	b.n	801d6ca <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x4e>
 801d730:	aaaaaaab 	.word	0xaaaaaaab

0801d734 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>:
bool MasterSubscribers::SubscribedToRemoteRegister(uint8_t ID, Register remote_register, SubscriberInterface interface) {
 801d734:	b510      	push	{r4, lr}
 801d736:	b086      	sub	sp, #24
 801d738:	ac02      	add	r4, sp, #8
 801d73a:	e884 000c 	stmia.w	r4, {r2, r3}
	FindRemoteRegisterIndex(ID, remote_register, interface, &success);
 801d73e:	f10d 0317 	add.w	r3, sp, #23
 801d742:	9301      	str	r3, [sp, #4]
 801d744:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d748:	f8ad 3000 	strh.w	r3, [sp]
 801d74c:	e894 000c 	ldmia.w	r4, {r2, r3}
 801d750:	f7ff ff94 	bl	801d67c <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>
}
 801d754:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801d758:	b006      	add	sp, #24
 801d75a:	bd10      	pop	{r4, pc}

0801d75c <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb>:
Register MasterSubscribers::FindRemoteRegister(Register remote_register, SubscriberInterface interface, bool* success) {
 801d75c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d760:	460d      	mov	r5, r1
 801d762:	af02      	add	r7, sp, #8
 801d764:	4604      	mov	r4, r0
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801d766:	f04f 31ff 	mov.w	r1, #4294967295
 801d76a:	68a8      	ldr	r0, [r5, #8]
Register MasterSubscribers::FindRemoteRegister(Register remote_register, SubscriberInterface interface, bool* success) {
 801d76c:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
 801d770:	e887 000c 	stmia.w	r7, {r2, r3}
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801d774:	f7ef fb78 	bl	800ce68 <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801d778:	e9d5 6a03 	ldrd	r6, sl, [r5, #12]
	for (SubscriberConfiguration &configuration : configurations) {
 801d77c:	4556      	cmp	r6, sl
 801d77e:	46b0      	mov	r8, r6
 801d780:	d108      	bne.n	801d794 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x38>
	osSemaphoreRelease(SubscribersSemaphore);
 801d782:	68a8      	ldr	r0, [r5, #8]
 801d784:	f7ef fba4 	bl	800ced0 <osSemaphoreRelease>
	*success = false;
 801d788:	2300      	movs	r3, #0
 801d78a:	f889 3000 	strb.w	r3, [r9]
	return Register();
 801d78e:	6023      	str	r3, [r4, #0]
 801d790:	80a3      	strh	r3, [r4, #4]
 801d792:	e022      	b.n	801d7da <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x7e>
		index = FindRemoteRegisterIndex(configuration.ID, remote_register, interface, success);
 801d794:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801d798:	4628      	mov	r0, r5
 801d79a:	f816 1b28 	ldrb.w	r1, [r6], #40
 801d79e:	f8cd 9004 	str.w	r9, [sp, #4]
 801d7a2:	f8ad 3000 	strh.w	r3, [sp]
 801d7a6:	e897 000c 	ldmia.w	r7, {r2, r3}
 801d7aa:	f7ff ff67 	bl	801d67c <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>
		if (*success) {
 801d7ae:	f899 2000 	ldrb.w	r2, [r9]
 801d7b2:	2a00      	cmp	r2, #0
 801d7b4:	d0e2      	beq.n	801d77c <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x20>
 801d7b6:	b203      	sxth	r3, r0
 801d7b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
			osSemaphoreRelease(SubscribersSemaphore);
 801d7bc:	68a8      	ldr	r0, [r5, #8]
 801d7be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d7c2:	eb01 0243 	add.w	r2, r1, r3, lsl #1
			Register found_register = configuration.remote_registers[index];
 801d7c6:	f831 8013 	ldrh.w	r8, [r1, r3, lsl #1]
 801d7ca:	8896      	ldrh	r6, [r2, #4]
 801d7cc:	8857      	ldrh	r7, [r2, #2]
			osSemaphoreRelease(SubscribersSemaphore);
 801d7ce:	f7ef fb7f 	bl	800ced0 <osSemaphoreRelease>
			return found_register;
 801d7d2:	f8a4 8000 	strh.w	r8, [r4]
 801d7d6:	8067      	strh	r7, [r4, #2]
 801d7d8:	80a6      	strh	r6, [r4, #4]
}
 801d7da:	4620      	mov	r0, r4
 801d7dc:	b004      	add	sp, #16
 801d7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801d7e4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801d7e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801d7e8:	e9d0 8900 	ldrd	r8, r9, [r0]
	if (max_size() - size() < __n)
 801d7ec:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801d7f0:	4607      	mov	r7, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801d7f2:	eba9 0408 	sub.w	r4, r9, r8
 801d7f6:	468a      	mov	sl, r1
 801d7f8:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 801d7fa:	429c      	cmp	r4, r3
 801d7fc:	d102      	bne.n	801d804 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x20>
	  __throw_length_error(__N(__s));
 801d7fe:	481e      	ldr	r0, [pc, #120]	@ (801d878 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x94>)
 801d800:	f000 fcb8 	bl	801e174 <_ZSt20__throw_length_errorPKc>
 801d804:	2c01      	cmp	r4, #1
 801d806:	4622      	mov	r2, r4
    { return __lhs.base() - __rhs.base(); }
 801d808:	eba1 0508 	sub.w	r5, r1, r8
 801d80c:	bf38      	it	cc
 801d80e:	2201      	movcc	r2, #1
 801d810:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801d812:	d22d      	bcs.n	801d870 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x8c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801d814:	b374      	cbz	r4, 801d874 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x90>
 801d816:	429c      	cmp	r4, r3
 801d818:	bf28      	it	cs
 801d81a:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801d81c:	4620      	mov	r0, r4
 801d81e:	f000 fbf4 	bl	801e00a <_Znwj>
 801d822:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801d824:	f89b 3000 	ldrb.w	r3, [fp]
      if (__count > 0)
 801d828:	2d00      	cmp	r5, #0
 801d82a:	5573      	strb	r3, [r6, r5]
 801d82c:	dd04      	ble.n	801d838 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x54>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801d82e:	462a      	mov	r2, r5
 801d830:	4641      	mov	r1, r8
 801d832:	4630      	mov	r0, r6
 801d834:	f001 fb66 	bl	801ef04 <memmove>
      ptrdiff_t __count = __last - __first;
 801d838:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 801d83c:	3501      	adds	r5, #1
      if (__count > 0)
 801d83e:	f1b9 0f00 	cmp.w	r9, #0
 801d842:	4435      	add	r5, r6
 801d844:	dd04      	ble.n	801d850 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x6c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801d846:	464a      	mov	r2, r9
 801d848:	4651      	mov	r1, sl
 801d84a:	4628      	mov	r0, r5
 801d84c:	f001 fc52 	bl	801f0f4 <memcpy>
      return __result + __count;
 801d850:	444d      	add	r5, r9
	if (__p)
 801d852:	f1b8 0f00 	cmp.w	r8, #0
 801d856:	d005      	beq.n	801d864 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x80>
		    this->_M_impl._M_end_of_storage - __old_start);
 801d858:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801d85a:	4640      	mov	r0, r8
 801d85c:	eba1 0108 	sub.w	r1, r1, r8
 801d860:	f000 fbae 	bl	801dfc0 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 801d864:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801d868:	4426      	add	r6, r4
 801d86a:	60be      	str	r6, [r7, #8]
    }
 801d86c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801d870:	461c      	mov	r4, r3
 801d872:	e7d3      	b.n	801d81c <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x38>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801d874:	4626      	mov	r6, r4
 801d876:	e7d5      	b.n	801d824 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x40>
 801d878:	0801f20c 	.word	0x0801f20c

0801d87c <_ZN17MasterSubscribers9AddFilterEhh>:
bool MasterSubscribers::AddFilter(uint8_t ID, uint8_t address) {
 801d87c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801d87e:	f88d 2007 	strb.w	r2, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 801d882:	f10d 020f 	add.w	r2, sp, #15
bool MasterSubscribers::AddFilter(uint8_t ID, uint8_t address) {
 801d886:	4604      	mov	r4, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 801d888:	f7ff fe4e 	bl	801d528 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 801d88c:	f89d 500f 	ldrb.w	r5, [sp, #15]
	uint8_t index = FindSubscriberIndex(ID, &success);
 801d890:	4601      	mov	r1, r0
	if (!success) return false;
 801d892:	b91d      	cbnz	r5, 801d89c <_ZN17MasterSubscribers9AddFilterEhh+0x20>
 801d894:	2500      	movs	r5, #0
}
 801d896:	4628      	mov	r0, r5
 801d898:	b004      	add	sp, #16
 801d89a:	bd70      	pop	{r4, r5, r6, pc}
	return *(this->_M_impl._M_start + __n);
 801d89c:	b203      	sxth	r3, r0
 801d89e:	68e2      	ldr	r2, [r4, #12]
 801d8a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d8a4:	00de      	lsls	r6, r3, #3
 801d8a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (configurations[index].filters.size() > 0 && AddressAccepted(index, address)) // if address already filtered, return
 801d8aa:	e9d3 2307 	ldrd	r2, r3, [r3, #28]
 801d8ae:	429a      	cmp	r2, r3
 801d8b0:	d110      	bne.n	801d8d4 <_ZN17MasterSubscribers9AddFilterEhh+0x58>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801d8b2:	f04f 31ff 	mov.w	r1, #4294967295
 801d8b6:	68a0      	ldr	r0, [r4, #8]
 801d8b8:	f7ef fad6 	bl	800ce68 <osSemaphoreAcquire>
 801d8bc:	68e0      	ldr	r0, [r4, #12]
 801d8be:	4430      	add	r0, r6
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801d8c0:	e9d0 1308 	ldrd	r1, r3, [r0, #32]
 801d8c4:	4299      	cmp	r1, r3
 801d8c6:	d10d      	bne.n	801d8e4 <_ZN17MasterSubscribers9AddFilterEhh+0x68>
	  _M_realloc_insert(end(), __x);
 801d8c8:	f10d 0207 	add.w	r2, sp, #7
 801d8cc:	301c      	adds	r0, #28
 801d8ce:	f7ff ff89 	bl	801d7e4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 801d8d2:	e00d      	b.n	801d8f0 <_ZN17MasterSubscribers9AddFilterEhh+0x74>
	if (configurations[index].filters.size() > 0 && AddressAccepted(index, address)) // if address already filtered, return
 801d8d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801d8d8:	4620      	mov	r0, r4
 801d8da:	f7ff fe7d 	bl	801d5d8 <_ZN17MasterSubscribers15AddressAcceptedEhh>
 801d8de:	2800      	cmp	r0, #0
 801d8e0:	d0e7      	beq.n	801d8b2 <_ZN17MasterSubscribers9AddFilterEhh+0x36>
 801d8e2:	e7d7      	b.n	801d894 <_ZN17MasterSubscribers9AddFilterEhh+0x18>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801d8e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801d8e8:	700b      	strb	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 801d8ea:	6a03      	ldr	r3, [r0, #32]
 801d8ec:	3301      	adds	r3, #1
 801d8ee:	6203      	str	r3, [r0, #32]
	osSemaphoreRelease(SubscribersSemaphore);
 801d8f0:	68a0      	ldr	r0, [r4, #8]
 801d8f2:	f7ef faed 	bl	800ced0 <osSemaphoreRelease>
	return true;
 801d8f6:	e7ce      	b.n	801d896 <_ZN17MasterSubscribers9AddFilterEhh+0x1a>

0801d8f8 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801d8f8:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801d8fa:	4611      	mov	r1, r2
 801d8fc:	b508      	push	{r3, lr}
			if (length != 2) return false;
 801d8fe:	d105      	bne.n	801d90c <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x14>
			self->AddFilter(input[0], input[1]);
 801d900:	7852      	ldrb	r2, [r2, #1]
 801d902:	7809      	ldrb	r1, [r1, #0]
 801d904:	f7ff ffba 	bl	801d87c <_ZN17MasterSubscribers9AddFilterEhh>
 801d908:	2001      	movs	r0, #1
		}
 801d90a:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 801d90c:	2000      	movs	r0, #0
 801d90e:	e7fc      	b.n	801d90a <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x12>

0801d910 <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 801d910:	b570      	push	{r4, r5, r6, lr}
 801d912:	4604      	mov	r4, r0
 801d914:	b086      	sub	sp, #24
 801d916:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801d918:	6800      	ldr	r0, [r0, #0]
 801d91a:	f04f 31ff 	mov.w	r1, #4294967295
 801d91e:	f7ef faa3 	bl	800ce68 <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801d922:	f10d 0207 	add.w	r2, sp, #7
 801d926:	4631      	mov	r1, r6
 801d928:	4620      	mov	r0, r4
 801d92a:	f7fb ff9a 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801d92e:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801d932:	b125      	cbz	r5, 801d93e <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 801d934:	6820      	ldr	r0, [r4, #0]
 801d936:	f7ef facb 	bl	800ced0 <osSemaphoreRelease>
}
 801d93a:	b006      	add	sp, #24
 801d93c:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801d93e:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 801d942:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801d946:	f7ff fd8b 	bl	801d460 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 801d94a:	2301      	movs	r3, #1
 801d94c:	f8ad 600a 	strh.w	r6, [sp, #10]
 801d950:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801d954:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 801d958:	f88d 000c 	strb.w	r0, [sp, #12]
 801d95c:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 801d960:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 801d964:	2b00      	cmp	r3, #0
 801d966:	d0e5      	beq.n	801d934 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
      push_back(const value_type& __x)
 801d968:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801d96a:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 801d96e:	429d      	cmp	r5, r3
 801d970:	d005      	beq.n	801d97e <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x6e>
 801d972:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801d974:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801d978:	3510      	adds	r5, #16
 801d97a:	60a5      	str	r5, [r4, #8]
 801d97c:	e7da      	b.n	801d934 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	  _M_realloc_insert(end(), __x);
 801d97e:	4629      	mov	r1, r5
 801d980:	1d20      	adds	r0, r4, #4
 801d982:	f7f2 fa43 	bl	800fe0c <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 801d986:	e7d5      	b.n	801d934 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

0801d988 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801d988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d98c:	460c      	mov	r4, r1
 801d98e:	b087      	sub	sp, #28
 801d990:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801d992:	f04f 31ff 	mov.w	r1, #4294967295
 801d996:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801d998:	4698      	mov	r8, r3
 801d99a:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801d99c:	f7ef fa64 	bl	800ce68 <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801d9a0:	4621      	mov	r1, r4
 801d9a2:	f10d 0207 	add.w	r2, sp, #7
 801d9a6:	4630      	mov	r0, r6
 801d9a8:	f7fb ff5b 	bl	8019862 <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801d9ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801d9b0:	4604      	mov	r4, r0
	if (!success) {
 801d9b2:	b92b      	cbnz	r3, 801d9c0 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 801d9b4:	6830      	ldr	r0, [r6, #0]
 801d9b6:	f7ef fa8b 	bl	800ced0 <osSemaphoreRelease>
}
 801d9ba:	b007      	add	sp, #28
 801d9bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801d9c0:	f10d 0007 	add.w	r0, sp, #7
 801d9c4:	f7ff fd4c 	bl	801d460 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 801d9c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801d9cc:	2b00      	cmp	r3, #0
 801d9ce:	d0f1      	beq.n	801d9b4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 801d9d0:	7923      	ldrb	r3, [r4, #4]
 801d9d2:	4298      	cmp	r0, r3
 801d9d4:	d1ee      	bne.n	801d9b4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 801d9d6:	3004      	adds	r0, #4
 801d9d8:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 801d9dc:	2f00      	cmp	r7, #0
 801d9de:	d0e9      	beq.n	801d9b4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801d9e0:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801d9e2:	e9d7 3500 	ldrd	r3, r5, [r7]
 801d9e6:	1aea      	subs	r2, r5, r3
 801d9e8:	1112      	asrs	r2, r2, #4
 801d9ea:	b9b1      	cbnz	r1, 801da1a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 801d9ec:	7861      	ldrb	r1, [r4, #1]
 801d9ee:	b9a1      	cbnz	r1, 801da1a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 801d9f0:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801d9f2:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801d9f4:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 801d9f6:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801d9f8:	42a9      	cmp	r1, r5
		callback.write = write;
 801d9fa:	e9cd 9803 	strd	r9, r8, [sp, #12]
 801d9fe:	d008      	beq.n	801da12 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
 801da00:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801da02:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801da06:	3510      	adds	r5, #16
 801da08:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 801da0a:	2301      	movs	r3, #1
 801da0c:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 801da0e:	7223      	strb	r3, [r4, #8]
 801da10:	e7d0      	b.n	801d9b4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 801da12:	4638      	mov	r0, r7
 801da14:	f7f3 f8be 	bl	8010b94 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 801da18:	e7f7      	b.n	801da0a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801da1a:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 801da1c:	4291      	cmp	r1, r2
 801da1e:	d302      	bcc.n	801da26 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801da20:	4803      	ldr	r0, [pc, #12]	@ (801da30 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 801da22:	f000 fbaa 	bl	801e17a <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 801da26:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 801da2a:	e9c3 9801 	strd	r9, r8, [r3, #4]
 801da2e:	e7ec      	b.n	801da0a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 801da30:	0801f44c 	.word	0x0801f44c

0801da34 <_ZN17MasterSubscribers12AddRegistersEv>:
void MasterSubscribers::AddRegisters(void) {
 801da34:	b510      	push	{r4, lr}
 801da36:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_SUB_SET_STATUS);
 801da38:	2120      	movs	r1, #32
 801da3a:	6800      	ldr	r0, [r0, #0]
 801da3c:	f7ff ff68 	bl	801d910 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SUB_SET_STATUS, 2);
 801da40:	2202      	movs	r2, #2
 801da42:	2120      	movs	r1, #32
 801da44:	6820      	ldr	r0, [r4, #0]
 801da46:	f7fb ff61 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_SET_STATUS, (void*) this,
 801da4a:	4b12      	ldr	r3, [pc, #72]	@ (801da94 <_ZN17MasterSubscribers12AddRegistersEv+0x60>)
 801da4c:	4622      	mov	r2, r4
 801da4e:	6820      	ldr	r0, [r4, #0]
 801da50:	2120      	movs	r1, #32
 801da52:	f7ff ff99 	bl	801d988 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SUB_ADD_FILTER);
 801da56:	6820      	ldr	r0, [r4, #0]
 801da58:	2121      	movs	r1, #33	@ 0x21
 801da5a:	f7ff ff59 	bl	801d910 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SUB_ADD_FILTER, 2);
 801da5e:	2202      	movs	r2, #2
 801da60:	2121      	movs	r1, #33	@ 0x21
 801da62:	6820      	ldr	r0, [r4, #0]
 801da64:	f7fb ff52 	bl	801990c <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_ADD_FILTER, (void*) this,
 801da68:	4622      	mov	r2, r4
 801da6a:	4b0b      	ldr	r3, [pc, #44]	@ (801da98 <_ZN17MasterSubscribers12AddRegistersEv+0x64>)
 801da6c:	2121      	movs	r1, #33	@ 0x21
 801da6e:	6820      	ldr	r0, [r4, #0]
 801da70:	f7ff ff8a 	bl	801d988 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SUB_CLEAR_FILTERS);
 801da74:	6820      	ldr	r0, [r4, #0]
 801da76:	2122      	movs	r1, #34	@ 0x22
 801da78:	f7ff ff4a 	bl	801d910 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SUB_CLEAR_FILTERS);
 801da7c:	2122      	movs	r1, #34	@ 0x22
 801da7e:	6820      	ldr	r0, [r4, #0]
 801da80:	f7fb ff28 	bl	80198d4 <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_CLEAR_FILTERS, (void*) this,
 801da84:	4622      	mov	r2, r4
 801da86:	6820      	ldr	r0, [r4, #0]
 801da88:	2122      	movs	r1, #34	@ 0x22
 801da8a:	4b04      	ldr	r3, [pc, #16]	@ (801da9c <_ZN17MasterSubscribers12AddRegistersEv+0x68>)
}
 801da8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_SUB_CLEAR_FILTERS, (void*) this,
 801da90:	f7ff bf7a 	b.w	801d988 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 801da94:	0801d5bb 	.word	0x0801d5bb
 801da98:	0801d8f9 	.word	0x0801d8f9
 801da9c:	0801d66f 	.word	0x0801d66f

0801daa0 <_ZN19TrajectoryGeneratorC1Ev>:

/**
 * @brief Class constructor
 */
TrajectoryGenerator::TrajectoryGenerator() {
	cyclic = false;
 801daa0:	2200      	movs	r2, #0
 801daa2:	8002      	strh	r2, [r0, #0]
	mode = TRAJECTORY_STEP;
	speed_max = 1000.0f; 		// /ms
 801daa4:	4a03      	ldr	r2, [pc, #12]	@ (801dab4 <_ZN19TrajectoryGeneratorC1Ev+0x14>)
 801daa6:	6042      	str	r2, [r0, #4]
	accel_max = 1.0f; 			// /ms^2
 801daa8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801daac:	6082      	str	r2, [r0, #8]
	frequency = 1.0f;
 801daae:	60c2      	str	r2, [r0, #12]
}
 801dab0:	4770      	bx	lr
 801dab2:	bf00      	nop
 801dab4:	447a0000 	.word	0x447a0000

0801dab8 <_ZN19TrajectoryGenerator14PlanTrajectoryEff>:
 */
void TrajectoryGenerator::PlanTrajectory(float start_position_, float end_position_) {
	start_position = start_position_;
	end_position = end_position_;

	(end_position_ > start_position) ? sign = 1 : sign = -1;
 801dab8:	eeb4 0ae0 	vcmpe.f32	s0, s1
	start_position = start_position_;
 801dabc:	ed80 0a09 	vstr	s0, [r0, #36]	@ 0x24
	end_position = end_position_;
 801dac0:	edc0 0a0a 	vstr	s1, [r0, #40]	@ 0x28
	(end_position_ > start_position) ? sign = 1 : sign = -1;
 801dac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dac8:	bf4c      	ite	mi
 801daca:	2301      	movmi	r3, #1
 801dacc:	f04f 33ff 	movpl.w	r3, #4294967295
 801dad0:	7603      	strb	r3, [r0, #24]
}
 801dad2:	4770      	bx	lr

0801dad4 <_ZN19TrajectoryGenerator14ComputeTimingsEv>:
/**
 * @brief Compute the trajectory timings based on the selected trajectory mode
 */
void TrajectoryGenerator::ComputeTimings(void) {
	uint32_t accel_time_no_speed_sat;
	switch (mode) {
 801dad4:	7843      	ldrb	r3, [r0, #1]
void TrajectoryGenerator::ComputeTimings(void) {
 801dad6:	b510      	push	{r4, lr}
 801dad8:	4604      	mov	r4, r0
 801dada:	ed2d 8b02 	vpush	{d8}
	switch (mode) {
 801dade:	2b03      	cmp	r3, #3
 801dae0:	d805      	bhi.n	801daee <_ZN19TrajectoryGenerator14ComputeTimingsEv+0x1a>
 801dae2:	e8df f003 	tbb	[pc, r3]
 801dae6:	0702      	.short	0x0702
 801dae8:	571a      	.short	0x571a
		// STEP
		case 0:
			end_time = start_time;
 801daea:	69c3      	ldr	r3, [r0, #28]
		case 2:
			accel_time_no_speed_sat = sqrt(abs(end_position - start_position) / accel_max);
			accel_time = speed_max / accel_max;
			if (accel_time_no_speed_sat > accel_time)  {
				speed_time = abs(end_position - start_position) / speed_max;
				end_time = start_time + accel_time + speed_time;
 801daec:	6223      	str	r3, [r4, #32]
			end_time = start_time + 1000.0f / (2.0f * frequency);
			break;
		default:
			break;
	}
}
 801daee:	ecbd 8b02 	vpop	{d8}
 801daf2:	bd10      	pop	{r4, pc}
			end_time = start_time + abs(end_position - start_position) / speed_max;
 801daf4:	edd0 7a09 	vldr	s15, [r0, #36]	@ 0x24
 801daf8:	ed90 7a0a 	vldr	s14, [r0, #40]	@ 0x28
 801dafc:	edd0 6a01 	vldr	s13, [r0, #4]
 801db00:	ee37 7a67 	vsub.f32	s14, s14, s15
  { return __builtin_fabsf(__x); }
 801db04:	eeb0 7ac7 	vabs.f32	s14, s14
 801db08:	eec7 7a26 	vdiv.f32	s15, s14, s13
			end_time = start_time + 1000.0f / (2.0f * frequency);
 801db0c:	ed94 7a07 	vldr	s14, [r4, #28]
 801db10:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801db14:	ee77 7a87 	vadd.f32	s15, s15, s14
 801db18:	e037      	b.n	801db8a <_ZN19TrajectoryGenerator14ComputeTimingsEv+0xb6>
			accel_time_no_speed_sat = sqrt(abs(end_position - start_position) / accel_max);
 801db1a:	edd0 7a09 	vldr	s15, [r0, #36]	@ 0x24
 801db1e:	ed90 8a0a 	vldr	s16, [r0, #40]	@ 0x28
 801db22:	edd0 8a02 	vldr	s17, [r0, #8]
 801db26:	ee38 8a67 	vsub.f32	s16, s16, s15
 801db2a:	eeb0 8ac8 	vabs.f32	s16, s16
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 801db2e:	ee88 0a28 	vdiv.f32	s0, s16, s17
 801db32:	f000 fb7d 	bl	801e230 <sqrtf>
			accel_time = speed_max / accel_max;
 801db36:	ed94 7a01 	vldr	s14, [r4, #4]
 801db3a:	69e2      	ldr	r2, [r4, #28]
			accel_time_no_speed_sat = sqrt(abs(end_position - start_position) / accel_max);
 801db3c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801db40:	ee17 1a90 	vmov	r1, s15
			accel_time = speed_max / accel_max;
 801db44:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801db48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801db4c:	ee17 3a90 	vmov	r3, s15
 801db50:	edc4 7a0b 	vstr	s15, [r4, #44]	@ 0x2c
			if (accel_time_no_speed_sat > accel_time)  {
 801db54:	428b      	cmp	r3, r1
 801db56:	d20a      	bcs.n	801db6e <_ZN19TrajectoryGenerator14ComputeTimingsEv+0x9a>
				speed_time = abs(end_position - start_position) / speed_max;
 801db58:	eec8 7a07 	vdiv.f32	s15, s16, s14
				end_time = start_time + accel_time + speed_time;
 801db5c:	4413      	add	r3, r2
				speed_time = abs(end_position - start_position) / speed_max;
 801db5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801db62:	ee17 1a90 	vmov	r1, s15
 801db66:	edc4 7a0c 	vstr	s15, [r4, #48]	@ 0x30
				end_time = start_time + accel_time + speed_time;
 801db6a:	440b      	add	r3, r1
 801db6c:	e7be      	b.n	801daec <_ZN19TrajectoryGenerator14ComputeTimingsEv+0x18>
				end_time = start_time + 2.0f * accel_time_no_speed_sat;
 801db6e:	ee07 1a90 	vmov	s15, r1
 801db72:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801db76:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801db7a:	ee07 2a90 	vmov	s15, r2
 801db7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
				speed_time = accel_time;
 801db82:	e9c4 110b 	strd	r1, r1, [r4, #44]	@ 0x2c
				end_time = start_time + 2.0f * accel_time_no_speed_sat;
 801db86:	eee0 7a07 	vfma.f32	s15, s0, s14
			end_time = start_time + 1000.0f / (2.0f * frequency);
 801db8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801db8e:	edc4 7a08 	vstr	s15, [r4, #32]
}
 801db92:	e7ac      	b.n	801daee <_ZN19TrajectoryGenerator14ComputeTimingsEv+0x1a>
			end_time = start_time + 1000.0f / (2.0f * frequency);
 801db94:	edd0 7a03 	vldr	s15, [r0, #12]
 801db98:	eddf 6a03 	vldr	s13, [pc, #12]	@ 801dba8 <_ZN19TrajectoryGenerator14ComputeTimingsEv+0xd4>
 801db9c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801dba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dba4:	e7b2      	b.n	801db0c <_ZN19TrajectoryGenerator14ComputeTimingsEv+0x38>
 801dba6:	bf00      	nop
 801dba8:	447a0000 	.word	0x447a0000

0801dbac <_ZN19TrajectoryGenerator15StartTrajectoryEv>:
void TrajectoryGenerator::StartTrajectory(void) {
 801dbac:	b510      	push	{r4, lr}
 801dbae:	4604      	mov	r4, r0
	start_time = HAL_GetTick();
 801dbb0:	f7e5 fcaa 	bl	8003508 <HAL_GetTick>
 801dbb4:	61e0      	str	r0, [r4, #28]
	ComputeTimings();
 801dbb6:	4620      	mov	r0, r4
}
 801dbb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ComputeTimings();
 801dbbc:	f7ff bf8a 	b.w	801dad4 <_ZN19TrajectoryGenerator14ComputeTimingsEv>

0801dbc0 <_ZN19TrajectoryGenerator15StartTrajectoryEff>:
	(end_position_ > start_position) ? sign = 1 : sign = -1;
 801dbc0:	eeb4 0ae0 	vcmpe.f32	s0, s1
	start_position = start_position_;
 801dbc4:	ed80 0a09 	vstr	s0, [r0, #36]	@ 0x24
	end_position = end_position_;
 801dbc8:	edc0 0a0a 	vstr	s1, [r0, #40]	@ 0x28
	(end_position_ > start_position) ? sign = 1 : sign = -1;
 801dbcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dbd0:	bf4c      	ite	mi
 801dbd2:	2201      	movmi	r2, #1
 801dbd4:	f04f 32ff 	movpl.w	r2, #4294967295
 801dbd8:	7602      	strb	r2, [r0, #24]
	StartTrajectory();
 801dbda:	f7ff bfe7 	b.w	801dbac <_ZN19TrajectoryGenerator15StartTrajectoryEv>

0801dbde <_ZN19TrajectoryGenerator5SlopeEmmff>:
 * @param input start: start value
 * @param input target: target value
 * @return setpoint
 */
float TrajectoryGenerator::Slope(uint32_t start_time, uint32_t time, float start, float target) {
	if (time < start_time) return start;
 801dbde:	428a      	cmp	r2, r1
 801dbe0:	d310      	bcc.n	801dc04 <_ZN19TrajectoryGenerator5SlopeEmmff+0x26>
	return start + sign * speed_max * (time - start_time);
 801dbe2:	f990 3018 	ldrsb.w	r3, [r0, #24]
 801dbe6:	1a52      	subs	r2, r2, r1
 801dbe8:	edd0 7a01 	vldr	s15, [r0, #4]
 801dbec:	ee07 3a10 	vmov	s14, r3
 801dbf0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dbf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 801dbf8:	ee07 2a90 	vmov	s15, r2
 801dbfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc00:	eea7 0a27 	vfma.f32	s0, s14, s15
}
 801dc04:	4770      	bx	lr

0801dc06 <_ZN19TrajectoryGenerator11TrapezoidalEmmff>:
 * @param input start: start value
 * @param input target: target value
 * @return setpoint
 */
float TrajectoryGenerator::Trapezoidal(uint32_t start_time, uint32_t time, float start, float target) {
	if (time < start_time) return start;
 801dc06:	428a      	cmp	r2, r1
float TrajectoryGenerator::Trapezoidal(uint32_t start_time, uint32_t time, float start, float target) {
 801dc08:	b530      	push	{r4, r5, lr}
	if (time < start_time) return start;
 801dc0a:	d31a      	bcc.n	801dc42 <_ZN19TrajectoryGenerator11TrapezoidalEmmff+0x3c>
	if (time < start_time + accel_time) {
		return sign * 0.5f * accel_max * powf((time  - start_time), 2) + start;
 801dc0c:	1a55      	subs	r5, r2, r1
	if (time < start_time + accel_time) {
 801dc0e:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
		return sign * 0.5f * accel_max * powf((time  - start_time), 2) + start;
 801dc10:	f990 3018 	ldrsb.w	r3, [r0, #24]
 801dc14:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801dc18:	ee07 5a10 	vmov	s14, r5
	if (time < start_time + accel_time) {
 801dc1c:	190d      	adds	r5, r1, r4
		return sign * 0.5f * accel_max * powf((time  - start_time), 2) + start;
 801dc1e:	ee07 3a90 	vmov	s15, r3
	if (time < start_time + accel_time) {
 801dc22:	42aa      	cmp	r2, r5
		return sign * 0.5f * accel_max * powf((time  - start_time), 2) + start;
 801dc24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	if (time < start_time + accel_time) {
 801dc28:	d20c      	bcs.n	801dc44 <_ZN19TrajectoryGenerator11TrapezoidalEmmff+0x3e>
		return sign * 0.5f * accel_max * powf((time  - start_time), 2) + start;
 801dc2a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801dc2e:	edd0 7a02 	vldr	s15, [r0, #8]
 801dc32:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801dc36:	ee27 7a07 	vmul.f32	s14, s14, s14
 801dc3a:	ee66 6aa7 	vmul.f32	s13, s13, s15
	} else if (time < start_time + speed_time) {
		return sign * speed_max * (time - start_time - 0.5f * accel_time) + start;
 801dc3e:	eea6 0a87 	vfma.f32	s0, s13, s14
			return - sign * 0.5f * accel_max * powf((time - start_time - speed_time), 2) + sign * speed_max * (time - start_time - 0.5f * accel_time) + start;
		} else {
			return - sign * 0.5f * accel_max * powf((time - start_time - speed_time), 2) + sign * accel_max * speed_time * (time - start_time - speed_time) + 0.5f * (start + target);
		}
	}
}
 801dc42:	bd30      	pop	{r4, r5, pc}
	} else if (time < start_time + speed_time) {
 801dc44:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 801dc46:	4429      	add	r1, r5
 801dc48:	428a      	cmp	r2, r1
 801dc4a:	d20c      	bcs.n	801dc66 <_ZN19TrajectoryGenerator11TrapezoidalEmmff+0x60>
		return sign * speed_max * (time - start_time - 0.5f * accel_time) + start;
 801dc4c:	edd0 7a01 	vldr	s15, [r0, #4]
 801dc50:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801dc54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801dc58:	ee07 4a90 	vmov	s15, r4
 801dc5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc60:	eea7 7ae5 	vfms.f32	s14, s15, s11
 801dc64:	e7eb      	b.n	801dc3e <_ZN19TrajectoryGenerator11TrapezoidalEmmff+0x38>
			return - sign * 0.5f * accel_max * powf((time - start_time - speed_time), 2) + sign * speed_max * (time - start_time - 0.5f * accel_time) + start;
 801dc66:	425b      	negs	r3, r3
 801dc68:	ee17 2a10 	vmov	r2, s14
		return sign * 0.5f * accel_max * powf((time  - start_time), 2) + start;
 801dc6c:	ed90 6a02 	vldr	s12, [r0, #8]
		if (speed_time > accel_time) {
 801dc70:	42ac      	cmp	r4, r5
			return - sign * 0.5f * accel_max * powf((time - start_time - speed_time), 2) + sign * speed_max * (time - start_time - 0.5f * accel_time) + start;
 801dc72:	ee07 3a90 	vmov	s15, r3
 801dc76:	eba2 0205 	sub.w	r2, r2, r5
 801dc7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dc7e:	ee05 2a10 	vmov	s10, r2
 801dc82:	eeb8 5a45 	vcvt.f32.u32	s10, s10
 801dc86:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801dc8a:	ee65 4a05 	vmul.f32	s9, s10, s10
 801dc8e:	ee67 7a86 	vmul.f32	s15, s15, s12
 801dc92:	ee67 7aa4 	vmul.f32	s15, s15, s9
		if (speed_time > accel_time) {
 801dc96:	d210      	bcs.n	801dcba <_ZN19TrajectoryGenerator11TrapezoidalEmmff+0xb4>
			return - sign * 0.5f * accel_max * powf((time - start_time - speed_time), 2) + sign * speed_max * (time - start_time - 0.5f * accel_time) + start;
 801dc98:	ed90 6a01 	vldr	s12, [r0, #4]
 801dc9c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801dca0:	ee66 6a86 	vmul.f32	s13, s13, s12
 801dca4:	ee06 4a10 	vmov	s12, r4
 801dca8:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 801dcac:	eea6 7a65 	vfms.f32	s14, s12, s11
 801dcb0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801dcb4:	ee30 0a27 	vadd.f32	s0, s0, s15
 801dcb8:	e7c3      	b.n	801dc42 <_ZN19TrajectoryGenerator11TrapezoidalEmmff+0x3c>
			return - sign * 0.5f * accel_max * powf((time - start_time - speed_time), 2) + sign * accel_max * speed_time * (time - start_time - speed_time) + 0.5f * (start + target);
 801dcba:	ee07 5a10 	vmov	s14, r5
 801dcbe:	ee26 6a26 	vmul.f32	s12, s12, s13
 801dcc2:	ee70 0a20 	vadd.f32	s1, s0, s1
 801dcc6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801dcca:	ee26 6a07 	vmul.f32	s12, s12, s14
 801dcce:	eee6 7a05 	vfma.f32	s15, s12, s10
 801dcd2:	eee0 7aa5 	vfma.f32	s15, s1, s11
 801dcd6:	eeb0 0a67 	vmov.f32	s0, s15
 801dcda:	e7b2      	b.n	801dc42 <_ZN19TrajectoryGenerator11TrapezoidalEmmff+0x3c>
 801dcdc:	0000      	movs	r0, r0
	...

0801dce0 <_ZN19TrajectoryGenerator10SinusoidalEmmff>:
 * @param input start: start value
 * @param input target: target value
 * @return setpoint
 */
float TrajectoryGenerator::Sinusoidal(uint32_t start_time, uint32_t time, float start, float target) {
	if (time < start_time) return start;
 801dce0:	428a      	cmp	r2, r1
float TrajectoryGenerator::Sinusoidal(uint32_t start_time, uint32_t time, float start, float target) {
 801dce2:	b508      	push	{r3, lr}
 801dce4:	ed2d 8b04 	vpush	{d8-d9}
	if (time < start_time) return start;
 801dce8:	d32c      	bcc.n	801dd44 <_ZN19TrajectoryGenerator10SinusoidalEmmff+0x64>
	return (int32_t) (start - (target - start) * (cos(2.0f * M_PI * frequency * (time - start_time) * 0.001f + phase) - 1) / 2.0f); // or / 1000.0f instead of * 0.001f but more efficient
 801dcea:	ed90 7a03 	vldr	s14, [r0, #12]
 801dcee:	1a52      	subs	r2, r2, r1
 801dcf0:	ee70 0ac0 	vsub.f32	s1, s1, s0
 801dcf4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801dcf8:	eeb7 9ac0 	vcvt.f64.f32	d9, s0
 801dcfc:	ed90 0a04 	vldr	s0, [r0, #16]
 801dd00:	eeb7 8ae0 	vcvt.f64.f32	d8, s1
 801dd04:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 801dd08:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 801dd50 <_ZN19TrajectoryGenerator10SinusoidalEmmff+0x70>
 801dd0c:	ee27 6b06 	vmul.f64	d6, d7, d6
 801dd10:	ee07 2a90 	vmov	s15, r2
 801dd14:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801dd18:	ee26 7b07 	vmul.f64	d7, d6, d7
 801dd1c:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 801dd58 <_ZN19TrajectoryGenerator10SinusoidalEmmff+0x78>
 801dd20:	eea7 0b06 	vfma.f64	d0, d7, d6
 801dd24:	f000 fa38 	bl	801e198 <cos>
 801dd28:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801dd2c:	ee30 0b47 	vsub.f64	d0, d0, d7
 801dd30:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801dd34:	ee28 8b40 	vnmul.f64	d8, d8, d0
 801dd38:	eea8 9b07 	vfma.f64	d9, d8, d7
 801dd3c:	eebd 9bc9 	vcvt.s32.f64	s18, d9
 801dd40:	eeb8 0ac9 	vcvt.f32.s32	s0, s18
}
 801dd44:	ecbd 8b04 	vpop	{d8-d9}
 801dd48:	bd08      	pop	{r3, pc}
 801dd4a:	bf00      	nop
 801dd4c:	f3af 8000 	nop.w
 801dd50:	54442d18 	.word	0x54442d18
 801dd54:	401921fb 	.word	0x401921fb
 801dd58:	e0000000 	.word	0xe0000000
 801dd5c:	3f50624d 	.word	0x3f50624d

0801dd60 <_ZN19TrajectoryGenerator16GenerateSetPointEv>:
float TrajectoryGenerator::GenerateSetPoint(void) {
 801dd60:	b510      	push	{r4, lr}
	if (mode == TRAJECTORY_STEP) {
 801dd62:	7843      	ldrb	r3, [r0, #1]
float TrajectoryGenerator::GenerateSetPoint(void) {
 801dd64:	4604      	mov	r4, r0
	if (mode == TRAJECTORY_STEP) {
 801dd66:	b923      	cbnz	r3, 801dd72 <_ZN19TrajectoryGenerator16GenerateSetPointEv+0x12>
		setpoint = Step(end_position);
 801dd68:	ed90 0a0a 	vldr	s0, [r0, #40]	@ 0x28
 801dd6c:	ed80 0a05 	vstr	s0, [r0, #20]
}
 801dd70:	bd10      	pop	{r4, pc}
	uint32_t time = HAL_GetTick();
 801dd72:	f7e5 fbc9 	bl	8003508 <HAL_GetTick>
	if (time > end_time) {
 801dd76:	6a23      	ldr	r3, [r4, #32]
	uint32_t time = HAL_GetTick();
 801dd78:	4602      	mov	r2, r0
	if (time > end_time) {
 801dd7a:	4283      	cmp	r3, r0
 801dd7c:	d20c      	bcs.n	801dd98 <_ZN19TrajectoryGenerator16GenerateSetPointEv+0x38>
		if (cyclic) {
 801dd7e:	7823      	ldrb	r3, [r4, #0]
			StartTrajectory(end_position, start_position);
 801dd80:	ed94 0a0a 	vldr	s0, [r4, #40]	@ 0x28
		if (cyclic) {
 801dd84:	2b00      	cmp	r3, #0
 801dd86:	d0f3      	beq.n	801dd70 <_ZN19TrajectoryGenerator16GenerateSetPointEv+0x10>
			StartTrajectory(end_position, start_position);
 801dd88:	edd4 0a09 	vldr	s1, [r4, #36]	@ 0x24
 801dd8c:	4620      	mov	r0, r4
 801dd8e:	f7ff ff17 	bl	801dbc0 <_ZN19TrajectoryGenerator15StartTrajectoryEff>
			return start_position;
 801dd92:	ed94 0a09 	vldr	s0, [r4, #36]	@ 0x24
 801dd96:	e7eb      	b.n	801dd70 <_ZN19TrajectoryGenerator16GenerateSetPointEv+0x10>
	switch (mode) {
 801dd98:	7863      	ldrb	r3, [r4, #1]
 801dd9a:	2b02      	cmp	r3, #2
 801dd9c:	d010      	beq.n	801ddc0 <_ZN19TrajectoryGenerator16GenerateSetPointEv+0x60>
 801dd9e:	2b03      	cmp	r3, #3
 801dda0:	d017      	beq.n	801ddd2 <_ZN19TrajectoryGenerator16GenerateSetPointEv+0x72>
 801dda2:	2b01      	cmp	r3, #1
 801dda4:	d109      	bne.n	801ddba <_ZN19TrajectoryGenerator16GenerateSetPointEv+0x5a>
			setpoint = Slope(start_time, time, start_position, end_position);
 801dda6:	edd4 0a0a 	vldr	s1, [r4, #40]	@ 0x28
 801ddaa:	4620      	mov	r0, r4
 801ddac:	ed94 0a09 	vldr	s0, [r4, #36]	@ 0x24
 801ddb0:	69e1      	ldr	r1, [r4, #28]
 801ddb2:	f7ff ff14 	bl	801dbde <_ZN19TrajectoryGenerator5SlopeEmmff>
			setpoint = Sinusoidal(start_time, time, start_position, end_position);
 801ddb6:	ed84 0a05 	vstr	s0, [r4, #20]
	return setpoint;
 801ddba:	ed94 0a05 	vldr	s0, [r4, #20]
 801ddbe:	e7d7      	b.n	801dd70 <_ZN19TrajectoryGenerator16GenerateSetPointEv+0x10>
			setpoint = Trapezoidal(start_time, time, start_position, end_position);
 801ddc0:	edd4 0a0a 	vldr	s1, [r4, #40]	@ 0x28
 801ddc4:	4620      	mov	r0, r4
 801ddc6:	ed94 0a09 	vldr	s0, [r4, #36]	@ 0x24
 801ddca:	69e1      	ldr	r1, [r4, #28]
 801ddcc:	f7ff ff1b 	bl	801dc06 <_ZN19TrajectoryGenerator11TrapezoidalEmmff>
 801ddd0:	e7f1      	b.n	801ddb6 <_ZN19TrajectoryGenerator16GenerateSetPointEv+0x56>
			setpoint = Sinusoidal(start_time, time, start_position, end_position);
 801ddd2:	edd4 0a0a 	vldr	s1, [r4, #40]	@ 0x28
 801ddd6:	4620      	mov	r0, r4
 801ddd8:	ed94 0a09 	vldr	s0, [r4, #36]	@ 0x24
 801dddc:	69e1      	ldr	r1, [r4, #28]
 801ddde:	f7ff ff7f 	bl	801dce0 <_ZN19TrajectoryGenerator10SinusoidalEmmff>
 801dde2:	e7e8      	b.n	801ddb6 <_ZN19TrajectoryGenerator16GenerateSetPointEv+0x56>

0801dde4 <_ZN19TrajectoryGenerator17SetTrajectoryModeEh>:
 * @brief Set the trajectory mode
 *
 * @param input mode_: the trajectory mode
*/
void TrajectoryGenerator::SetTrajectoryMode(uint8_t mode_) {
	mode = mode_;
 801dde4:	7041      	strb	r1, [r0, #1]
}
 801dde6:	4770      	bx	lr

0801dde8 <_ZN19TrajectoryGenerator24SetTrajectoryCyclicValueEb>:
 * @brief Set the cyclic falg
 *
 * @param input cyclic_: whether the motion is cyclic or not
*/
void TrajectoryGenerator::SetTrajectoryCyclicValue(bool cyclic_) {
	cyclic = cyclic_;
 801dde8:	7001      	strb	r1, [r0, #0]
}
 801ddea:	4770      	bx	lr

0801ddec <_ZN19TrajectoryGenerator21SetTrajectoryMaxSpeedEf>:
 * @brief Set the maximum speed
 *
 * @param input speed_max_: the maximum speed
*/
void TrajectoryGenerator::SetTrajectoryMaxSpeed(float speed_max_) {
	speed_max = speed_max_;
 801ddec:	ed80 0a01 	vstr	s0, [r0, #4]
}
 801ddf0:	4770      	bx	lr

0801ddf2 <_ZN19TrajectoryGenerator28SetTrajectoryMaxAccelerationEf>:
 * @brief Set the maximum acceleration
 *
 * @param input accel_max_: the maximum acceleration
*/
void TrajectoryGenerator::SetTrajectoryMaxAcceleration(float accel_max_) {
	accel_max = accel_max_;
 801ddf2:	ed80 0a02 	vstr	s0, [r0, #8]
}
 801ddf6:	4770      	bx	lr

0801ddf8 <_ZN19TrajectoryGenerator22SetTrajectoryFrequencyEf>:
 * @brief Set the sinusoidal frequency
 *
 * @param input frequency_: the sinusoidal frequency
*/
void TrajectoryGenerator::SetTrajectoryFrequency(float frequency_) {
	frequency = frequency_;
 801ddf8:	ed80 0a03 	vstr	s0, [r0, #12]
}
 801ddfc:	4770      	bx	lr

0801ddfe <_ZN19TrajectoryGenerator18SetTrajectoryPhaseEf>:
 * @brief Set the sinusoidal phase
 *
 * @param input frequency_: the sinusoidal phase
*/
void TrajectoryGenerator::SetTrajectoryPhase(float phase_) {
	phase = phase_;
 801ddfe:	ed80 0a04 	vstr	s0, [r0, #16]
}
 801de02:	4770      	bx	lr

0801de04 <_ZL8UserTaskPv>:
		.priority = (osPriority_t) osPriorityLow,
	};
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
}

static void UserTask(void *argument) {
 801de04:	b510      	push	{r4, lr}
	Communication* communication = class_instances_pointer->communication;
	Services* services = class_instances_pointer->services;
	Publishers* publishers = class_instances_pointer->publishers;
	HardwareDelay* hardware_delay = class_instances_pointer->hardware_delay;
	Sensors* sensors = class_instances_pointer->sensors;
	LEDS* leds = class_instances_pointer->leds;
 801de06:	69c4      	ldr	r4, [r0, #28]
	Controller* controller = class_instances_pointer->controller;
	Servomotors* servomotors = class_instances_pointer->servomotors;

	for(;;) {
		leds->SetLED(LED_USER3, GPIO_PIN_SET);
 801de08:	2201      	movs	r2, #1
 801de0a:	210c      	movs	r1, #12
 801de0c:	4620      	mov	r0, r4
 801de0e:	f7f8 fba5 	bl	801655c <_ZN4LEDS6SetLEDEh13GPIO_PinState>
		osDelay(500);
 801de12:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801de16:	f7ee ffbd 	bl	800cd94 <osDelay>
		leds->SetLED(LED_USER3, GPIO_PIN_RESET);
 801de1a:	2200      	movs	r2, #0
 801de1c:	210c      	movs	r1, #12
 801de1e:	4620      	mov	r0, r4
 801de20:	f7f8 fb9c 	bl	801655c <_ZN4LEDS6SetLEDEh13GPIO_PinState>
		osDelay(500);
 801de24:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801de28:	f7ee ffb4 	bl	800cd94 <osDelay>
	for(;;) {
 801de2c:	e7ec      	b.n	801de08 <_ZL8UserTaskPv+0x4>

0801de2e <_ZN4UserC1EP9RegistersP17MasterSubscribersP13CommunicationP8ServicesP10PublishersP13HardwareDelayP7SensorsP4LEDSP10ControllerP11Servomotors>:
User::User(	Registers* registers_,
 801de2e:	b510      	push	{r4, lr}
	communication = communication_;
 801de30:	6083      	str	r3, [r0, #8]
	services = services_;
 801de32:	9b02      	ldr	r3, [sp, #8]
 801de34:	60c3      	str	r3, [r0, #12]
	publishers = publishers_;
 801de36:	9b03      	ldr	r3, [sp, #12]
 801de38:	6103      	str	r3, [r0, #16]
	hardware_delay = hardware_delay_;
 801de3a:	9b04      	ldr	r3, [sp, #16]
 801de3c:	6143      	str	r3, [r0, #20]
	sensors = sensors_;
 801de3e:	9b05      	ldr	r3, [sp, #20]
 801de40:	6183      	str	r3, [r0, #24]
	leds = leds_;
 801de42:	9b06      	ldr	r3, [sp, #24]
 801de44:	61c3      	str	r3, [r0, #28]
	controller = controller_;
 801de46:	9b07      	ldr	r3, [sp, #28]
 801de48:	6203      	str	r3, [r0, #32]
	servomotors = servomotors_;
 801de4a:	9b08      	ldr	r3, [sp, #32]
	subscribers = subscribers_;
 801de4c:	e9c0 1200 	strd	r1, r2, [r0]
	servomotors = servomotors_;
 801de50:	6243      	str	r3, [r0, #36]	@ 0x24
}
 801de52:	bd10      	pop	{r4, pc}

0801de54 <_ZN4User4InitEv>:
}
 801de54:	4770      	bx	lr
	...

0801de58 <_ZN4User12AddOSThreadsEv>:
void User::AddOSThreads(void) {
 801de58:	b530      	push	{r4, r5, lr}
	};
 801de5a:	4d1b      	ldr	r5, [pc, #108]	@ (801dec8 <_ZN4User12AddOSThreadsEv+0x70>)
void User::AddOSThreads(void) {
 801de5c:	b08b      	sub	sp, #44	@ 0x2c
 801de5e:	4604      	mov	r4, r0
	};
 801de60:	682b      	ldr	r3, [r5, #0]
 801de62:	f3bf 8f5b 	dmb	ish
 801de66:	07d9      	lsls	r1, r3, #31
 801de68:	d41b      	bmi.n	801dea2 <_ZN4User12AddOSThreadsEv+0x4a>
 801de6a:	4628      	mov	r0, r5
 801de6c:	f000 f8be 	bl	801dfec <__cxa_guard_acquire>
 801de70:	b1b8      	cbz	r0, 801dea2 <_ZN4User12AddOSThreadsEv+0x4a>
 801de72:	6822      	ldr	r2, [r4, #0]
 801de74:	4628      	mov	r0, r5
 801de76:	4b15      	ldr	r3, [pc, #84]	@ (801decc <_ZN4User12AddOSThreadsEv+0x74>)
 801de78:	601a      	str	r2, [r3, #0]
 801de7a:	6862      	ldr	r2, [r4, #4]
 801de7c:	605a      	str	r2, [r3, #4]
 801de7e:	68a2      	ldr	r2, [r4, #8]
 801de80:	609a      	str	r2, [r3, #8]
 801de82:	68e2      	ldr	r2, [r4, #12]
 801de84:	60da      	str	r2, [r3, #12]
 801de86:	6922      	ldr	r2, [r4, #16]
 801de88:	611a      	str	r2, [r3, #16]
 801de8a:	6962      	ldr	r2, [r4, #20]
 801de8c:	615a      	str	r2, [r3, #20]
 801de8e:	69a2      	ldr	r2, [r4, #24]
 801de90:	619a      	str	r2, [r3, #24]
 801de92:	69e2      	ldr	r2, [r4, #28]
 801de94:	61da      	str	r2, [r3, #28]
 801de96:	6a22      	ldr	r2, [r4, #32]
 801de98:	621a      	str	r2, [r3, #32]
 801de9a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801de9c:	625a      	str	r2, [r3, #36]	@ 0x24
 801de9e:	f000 f8b1 	bl	801e004 <__cxa_guard_release>
	const osThreadAttr_t UserTask_attributes = {
 801dea2:	2220      	movs	r2, #32
 801dea4:	2100      	movs	r1, #0
 801dea6:	a802      	add	r0, sp, #8
 801dea8:	f001 f846 	bl	801ef38 <memset>
 801deac:	4b08      	ldr	r3, [pc, #32]	@ (801ded0 <_ZN4User12AddOSThreadsEv+0x78>)
 801deae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
 801deb2:	4906      	ldr	r1, [pc, #24]	@ (801decc <_ZN4User12AddOSThreadsEv+0x74>)
	const osThreadAttr_t UserTask_attributes = {
 801deb4:	9301      	str	r3, [sp, #4]
 801deb6:	2308      	movs	r3, #8
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
 801deb8:	4806      	ldr	r0, [pc, #24]	@ (801ded4 <_ZN4User12AddOSThreadsEv+0x7c>)
	const osThreadAttr_t UserTask_attributes = {
 801deba:	e9cd 2306 	strd	r2, r3, [sp, #24]
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
 801debe:	aa01      	add	r2, sp, #4
 801dec0:	f7ee ff0a 	bl	800ccd8 <osThreadNew>
}
 801dec4:	b00b      	add	sp, #44	@ 0x2c
 801dec6:	bd30      	pop	{r4, r5, pc}
 801dec8:	240073d4 	.word	0x240073d4
 801decc:	240073d8 	.word	0x240073d8
 801ded0:	0801f566 	.word	0x0801f566
 801ded4:	0801de05 	.word	0x0801de05

0801ded8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 801ded8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801deda:	2400      	movs	r4, #0
 801dedc:	2310      	movs	r3, #16
 801dede:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801dee2:	6803      	ldr	r3, [r0, #0]
 801dee4:	4615      	mov	r5, r2
 801dee6:	699e      	ldr	r6, [r3, #24]
 801dee8:	6812      	ldr	r2, [r2, #0]
 801deea:	466b      	mov	r3, sp
 801deec:	e9cd 4400 	strd	r4, r4, [sp]
 801def0:	47b0      	blx	r6
 801def2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801def6:	f003 0306 	and.w	r3, r3, #6
 801defa:	2b06      	cmp	r3, #6
 801defc:	bf03      	ittte	eq
 801defe:	9b00      	ldreq	r3, [sp, #0]
 801df00:	602b      	streq	r3, [r5, #0]
 801df02:	2001      	moveq	r0, #1
 801df04:	4620      	movne	r0, r4
 801df06:	b004      	add	sp, #16
 801df08:	bd70      	pop	{r4, r5, r6, pc}

0801df0a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 801df0a:	9800      	ldr	r0, [sp, #0]
 801df0c:	4290      	cmp	r0, r2
 801df0e:	bf0c      	ite	eq
 801df10:	2006      	moveq	r0, #6
 801df12:	2001      	movne	r0, #1
 801df14:	4770      	bx	lr
	...

0801df18 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 801df18:	b510      	push	{r4, lr}
 801df1a:	4b03      	ldr	r3, [pc, #12]	@ (801df28 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 801df1c:	6003      	str	r3, [r0, #0]
 801df1e:	4604      	mov	r4, r0
 801df20:	f000 f905 	bl	801e12e <_ZNSt9type_infoD1Ev>
 801df24:	4620      	mov	r0, r4
 801df26:	bd10      	pop	{r4, pc}
 801df28:	0801f5a4 	.word	0x0801f5a4

0801df2c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 801df2c:	b510      	push	{r4, lr}
 801df2e:	4604      	mov	r4, r0
 801df30:	f7ff fff2 	bl	801df18 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801df34:	4620      	mov	r0, r4
 801df36:	2108      	movs	r1, #8
 801df38:	f000 f842 	bl	801dfc0 <_ZdlPvj>
 801df3c:	4620      	mov	r0, r4
 801df3e:	bd10      	pop	{r4, pc}

0801df40 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 801df40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df44:	461f      	mov	r7, r3
 801df46:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801df4a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801df4e:	4598      	cmp	r8, r3
 801df50:	4606      	mov	r6, r0
 801df52:	4615      	mov	r5, r2
 801df54:	d107      	bne.n	801df66 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801df56:	9907      	ldr	r1, [sp, #28]
 801df58:	f000 f8ee 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801df5c:	b118      	cbz	r0, 801df66 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801df5e:	7165      	strb	r5, [r4, #5]
 801df60:	2000      	movs	r0, #0
 801df62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df66:	4639      	mov	r1, r7
 801df68:	4630      	mov	r0, r6
 801df6a:	f000 f8e5 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801df6e:	2800      	cmp	r0, #0
 801df70:	d0f6      	beq.n	801df60 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 801df72:	2301      	movs	r3, #1
 801df74:	f8c4 8000 	str.w	r8, [r4]
 801df78:	7125      	strb	r5, [r4, #4]
 801df7a:	71a3      	strb	r3, [r4, #6]
 801df7c:	e7f0      	b.n	801df60 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0801df7e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 801df7e:	b538      	push	{r3, r4, r5, lr}
 801df80:	4615      	mov	r5, r2
 801df82:	461c      	mov	r4, r3
 801df84:	f000 f8d8 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801df88:	b120      	cbz	r0, 801df94 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 801df8a:	2308      	movs	r3, #8
 801df8c:	60e3      	str	r3, [r4, #12]
 801df8e:	2306      	movs	r3, #6
 801df90:	6025      	str	r5, [r4, #0]
 801df92:	7123      	strb	r3, [r4, #4]
 801df94:	bd38      	pop	{r3, r4, r5, pc}

0801df96 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 801df96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df9a:	4605      	mov	r5, r0
 801df9c:	460c      	mov	r4, r1
 801df9e:	4616      	mov	r6, r2
 801dfa0:	461f      	mov	r7, r3
 801dfa2:	f000 f8c9 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801dfa6:	b948      	cbnz	r0, 801dfbc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801dfa8:	2f03      	cmp	r7, #3
 801dfaa:	d807      	bhi.n	801dfbc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801dfac:	6823      	ldr	r3, [r4, #0]
 801dfae:	4632      	mov	r2, r6
 801dfb0:	4629      	mov	r1, r5
 801dfb2:	4620      	mov	r0, r4
 801dfb4:	695b      	ldr	r3, [r3, #20]
 801dfb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dfba:	4718      	bx	r3
 801dfbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801dfc0 <_ZdlPvj>:
 801dfc0:	f000 b8df 	b.w	801e182 <_ZdlPv>

0801dfc4 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 801dfc4:	b510      	push	{r4, lr}
 801dfc6:	4b03      	ldr	r3, [pc, #12]	@ (801dfd4 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 801dfc8:	6003      	str	r3, [r0, #0]
 801dfca:	4604      	mov	r4, r0
 801dfcc:	f000 f8af 	bl	801e12e <_ZNSt9type_infoD1Ev>
 801dfd0:	4620      	mov	r0, r4
 801dfd2:	bd10      	pop	{r4, pc}
 801dfd4:	0801f614 	.word	0x0801f614

0801dfd8 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 801dfd8:	b510      	push	{r4, lr}
 801dfda:	4604      	mov	r4, r0
 801dfdc:	f7ff fff2 	bl	801dfc4 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
 801dfe0:	4620      	mov	r0, r4
 801dfe2:	2108      	movs	r1, #8
 801dfe4:	f7ff ffec 	bl	801dfc0 <_ZdlPvj>
 801dfe8:	4620      	mov	r0, r4
 801dfea:	bd10      	pop	{r4, pc}

0801dfec <__cxa_guard_acquire>:
 801dfec:	6802      	ldr	r2, [r0, #0]
 801dfee:	07d2      	lsls	r2, r2, #31
 801dff0:	4603      	mov	r3, r0
 801dff2:	d405      	bmi.n	801e000 <__cxa_guard_acquire+0x14>
 801dff4:	7842      	ldrb	r2, [r0, #1]
 801dff6:	b102      	cbz	r2, 801dffa <__cxa_guard_acquire+0xe>
 801dff8:	deff      	udf	#255	@ 0xff
 801dffa:	2001      	movs	r0, #1
 801dffc:	7058      	strb	r0, [r3, #1]
 801dffe:	4770      	bx	lr
 801e000:	2000      	movs	r0, #0
 801e002:	4770      	bx	lr

0801e004 <__cxa_guard_release>:
 801e004:	2301      	movs	r3, #1
 801e006:	6003      	str	r3, [r0, #0]
 801e008:	4770      	bx	lr

0801e00a <_Znwj>:
 801e00a:	2801      	cmp	r0, #1
 801e00c:	bf38      	it	cc
 801e00e:	2001      	movcc	r0, #1
 801e010:	b510      	push	{r4, lr}
 801e012:	4604      	mov	r4, r0
 801e014:	4620      	mov	r0, r4
 801e016:	f000 feb7 	bl	801ed88 <malloc>
 801e01a:	b100      	cbz	r0, 801e01e <_Znwj+0x14>
 801e01c:	bd10      	pop	{r4, pc}
 801e01e:	f000 f8b3 	bl	801e188 <_ZSt15get_new_handlerv>
 801e022:	b908      	cbnz	r0, 801e028 <_Znwj+0x1e>
 801e024:	f000 fea8 	bl	801ed78 <abort>
 801e028:	4780      	blx	r0
 801e02a:	e7f3      	b.n	801e014 <_Znwj+0xa>

0801e02c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 801e02c:	b510      	push	{r4, lr}
 801e02e:	4b03      	ldr	r3, [pc, #12]	@ (801e03c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 801e030:	6003      	str	r3, [r0, #0]
 801e032:	4604      	mov	r4, r0
 801e034:	f7ff ff70 	bl	801df18 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801e038:	4620      	mov	r0, r4
 801e03a:	bd10      	pop	{r4, pc}
 801e03c:	0801f6a8 	.word	0x0801f6a8

0801e040 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 801e040:	b510      	push	{r4, lr}
 801e042:	4604      	mov	r4, r0
 801e044:	f7ff fff2 	bl	801e02c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 801e048:	4620      	mov	r0, r4
 801e04a:	210c      	movs	r1, #12
 801e04c:	f7ff ffb8 	bl	801dfc0 <_ZdlPvj>
 801e050:	4620      	mov	r0, r4
 801e052:	bd10      	pop	{r4, pc}

0801e054 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 801e054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e058:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801e05c:	4590      	cmp	r8, r2
 801e05e:	4606      	mov	r6, r0
 801e060:	460f      	mov	r7, r1
 801e062:	4615      	mov	r5, r2
 801e064:	461c      	mov	r4, r3
 801e066:	d00b      	beq.n	801e080 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 801e068:	68b0      	ldr	r0, [r6, #8]
 801e06a:	6803      	ldr	r3, [r0, #0]
 801e06c:	f8cd 8018 	str.w	r8, [sp, #24]
 801e070:	6a1e      	ldr	r6, [r3, #32]
 801e072:	462a      	mov	r2, r5
 801e074:	4623      	mov	r3, r4
 801e076:	4639      	mov	r1, r7
 801e078:	46b4      	mov	ip, r6
 801e07a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e07e:	4760      	bx	ip
 801e080:	4619      	mov	r1, r3
 801e082:	f000 f859 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801e086:	2800      	cmp	r0, #0
 801e088:	d0ee      	beq.n	801e068 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 801e08a:	2006      	movs	r0, #6
 801e08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e090 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 801e090:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e094:	460d      	mov	r5, r1
 801e096:	4619      	mov	r1, r3
 801e098:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 801e09c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 801e0a0:	4681      	mov	r9, r0
 801e0a2:	4617      	mov	r7, r2
 801e0a4:	4698      	mov	r8, r3
 801e0a6:	f000 f847 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801e0aa:	b190      	cbz	r0, 801e0d2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 801e0ac:	2d00      	cmp	r5, #0
 801e0ae:	6034      	str	r4, [r6, #0]
 801e0b0:	7137      	strb	r7, [r6, #4]
 801e0b2:	db09      	blt.n	801e0c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 801e0b4:	442c      	add	r4, r5
 801e0b6:	45a2      	cmp	sl, r4
 801e0b8:	bf14      	ite	ne
 801e0ba:	2401      	movne	r4, #1
 801e0bc:	2406      	moveq	r4, #6
 801e0be:	71b4      	strb	r4, [r6, #6]
 801e0c0:	2000      	movs	r0, #0
 801e0c2:	b001      	add	sp, #4
 801e0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0c8:	3502      	adds	r5, #2
 801e0ca:	d1f9      	bne.n	801e0c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801e0cc:	2301      	movs	r3, #1
 801e0ce:	71b3      	strb	r3, [r6, #6]
 801e0d0:	e7f6      	b.n	801e0c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801e0d2:	4554      	cmp	r4, sl
 801e0d4:	d106      	bne.n	801e0e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801e0d6:	4659      	mov	r1, fp
 801e0d8:	4648      	mov	r0, r9
 801e0da:	f000 f82d 	bl	801e138 <_ZNKSt9type_info7__equalERKS_>
 801e0de:	b108      	cbz	r0, 801e0e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801e0e0:	7177      	strb	r7, [r6, #5]
 801e0e2:	e7ed      	b.n	801e0c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801e0e4:	f8d9 0008 	ldr.w	r0, [r9, #8]
 801e0e8:	6803      	ldr	r3, [r0, #0]
 801e0ea:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 801e0ee:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 801e0f2:	69dc      	ldr	r4, [r3, #28]
 801e0f4:	463a      	mov	r2, r7
 801e0f6:	4643      	mov	r3, r8
 801e0f8:	4629      	mov	r1, r5
 801e0fa:	46a4      	mov	ip, r4
 801e0fc:	b001      	add	sp, #4
 801e0fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e102:	4760      	bx	ip

0801e104 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 801e104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e108:	4607      	mov	r7, r0
 801e10a:	460c      	mov	r4, r1
 801e10c:	4615      	mov	r5, r2
 801e10e:	461e      	mov	r6, r3
 801e110:	f7ff ff35 	bl	801df7e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 801e114:	b948      	cbnz	r0, 801e12a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 801e116:	68b8      	ldr	r0, [r7, #8]
 801e118:	6803      	ldr	r3, [r0, #0]
 801e11a:	699f      	ldr	r7, [r3, #24]
 801e11c:	462a      	mov	r2, r5
 801e11e:	4633      	mov	r3, r6
 801e120:	4621      	mov	r1, r4
 801e122:	46bc      	mov	ip, r7
 801e124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e128:	4760      	bx	ip
 801e12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e12e <_ZNSt9type_infoD1Ev>:
 801e12e:	4770      	bx	lr

0801e130 <_ZNKSt9type_info14__is_pointer_pEv>:
 801e130:	2000      	movs	r0, #0
 801e132:	4770      	bx	lr

0801e134 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 801e134:	2000      	movs	r0, #0
 801e136:	4770      	bx	lr

0801e138 <_ZNKSt9type_info7__equalERKS_>:
 801e138:	4281      	cmp	r1, r0
 801e13a:	b508      	push	{r3, lr}
 801e13c:	d00e      	beq.n	801e15c <_ZNKSt9type_info7__equalERKS_+0x24>
 801e13e:	6840      	ldr	r0, [r0, #4]
 801e140:	7803      	ldrb	r3, [r0, #0]
 801e142:	2b2a      	cmp	r3, #42	@ 0x2a
 801e144:	d00c      	beq.n	801e160 <_ZNKSt9type_info7__equalERKS_+0x28>
 801e146:	6849      	ldr	r1, [r1, #4]
 801e148:	780b      	ldrb	r3, [r1, #0]
 801e14a:	2b2a      	cmp	r3, #42	@ 0x2a
 801e14c:	bf08      	it	eq
 801e14e:	3101      	addeq	r1, #1
 801e150:	f7e2 f8c6 	bl	80002e0 <strcmp>
 801e154:	fab0 f080 	clz	r0, r0
 801e158:	0940      	lsrs	r0, r0, #5
 801e15a:	bd08      	pop	{r3, pc}
 801e15c:	2001      	movs	r0, #1
 801e15e:	e7fc      	b.n	801e15a <_ZNKSt9type_info7__equalERKS_+0x22>
 801e160:	2000      	movs	r0, #0
 801e162:	e7fa      	b.n	801e15a <_ZNKSt9type_info7__equalERKS_+0x22>

0801e164 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 801e164:	f7ff bfe8 	b.w	801e138 <_ZNKSt9type_info7__equalERKS_>

0801e168 <_ZSt17__throw_bad_allocv>:
 801e168:	b508      	push	{r3, lr}
 801e16a:	f000 fe05 	bl	801ed78 <abort>

0801e16e <_ZSt28__throw_bad_array_new_lengthv>:
 801e16e:	b508      	push	{r3, lr}
 801e170:	f000 fe02 	bl	801ed78 <abort>

0801e174 <_ZSt20__throw_length_errorPKc>:
 801e174:	b508      	push	{r3, lr}
 801e176:	f000 fdff 	bl	801ed78 <abort>

0801e17a <_ZSt24__throw_out_of_range_fmtPKcz>:
 801e17a:	b40f      	push	{r0, r1, r2, r3}
 801e17c:	b508      	push	{r3, lr}
 801e17e:	f000 fdfb 	bl	801ed78 <abort>

0801e182 <_ZdlPv>:
 801e182:	f000 be09 	b.w	801ed98 <free>
	...

0801e188 <_ZSt15get_new_handlerv>:
 801e188:	4b02      	ldr	r3, [pc, #8]	@ (801e194 <_ZSt15get_new_handlerv+0xc>)
 801e18a:	6818      	ldr	r0, [r3, #0]
 801e18c:	f3bf 8f5b 	dmb	ish
 801e190:	4770      	bx	lr
 801e192:	bf00      	nop
 801e194:	24007400 	.word	0x24007400

0801e198 <cos>:
 801e198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e19a:	eeb0 7b40 	vmov.f64	d7, d0
 801e19e:	ee17 3a90 	vmov	r3, s15
 801e1a2:	4a21      	ldr	r2, [pc, #132]	@ (801e228 <cos+0x90>)
 801e1a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e1a8:	4293      	cmp	r3, r2
 801e1aa:	d806      	bhi.n	801e1ba <cos+0x22>
 801e1ac:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 801e220 <cos+0x88>
 801e1b0:	b005      	add	sp, #20
 801e1b2:	f85d eb04 	ldr.w	lr, [sp], #4
 801e1b6:	f000 b85f 	b.w	801e278 <__kernel_cos>
 801e1ba:	4a1c      	ldr	r2, [pc, #112]	@ (801e22c <cos+0x94>)
 801e1bc:	4293      	cmp	r3, r2
 801e1be:	d904      	bls.n	801e1ca <cos+0x32>
 801e1c0:	ee30 0b40 	vsub.f64	d0, d0, d0
 801e1c4:	b005      	add	sp, #20
 801e1c6:	f85d fb04 	ldr.w	pc, [sp], #4
 801e1ca:	4668      	mov	r0, sp
 801e1cc:	f000 f914 	bl	801e3f8 <__ieee754_rem_pio2>
 801e1d0:	f000 0003 	and.w	r0, r0, #3
 801e1d4:	2801      	cmp	r0, #1
 801e1d6:	d009      	beq.n	801e1ec <cos+0x54>
 801e1d8:	2802      	cmp	r0, #2
 801e1da:	d010      	beq.n	801e1fe <cos+0x66>
 801e1dc:	b9b0      	cbnz	r0, 801e20c <cos+0x74>
 801e1de:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e1e2:	ed9d 0b00 	vldr	d0, [sp]
 801e1e6:	f000 f847 	bl	801e278 <__kernel_cos>
 801e1ea:	e7eb      	b.n	801e1c4 <cos+0x2c>
 801e1ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e1f0:	ed9d 0b00 	vldr	d0, [sp]
 801e1f4:	f000 f8a8 	bl	801e348 <__kernel_sin>
 801e1f8:	eeb1 0b40 	vneg.f64	d0, d0
 801e1fc:	e7e2      	b.n	801e1c4 <cos+0x2c>
 801e1fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e202:	ed9d 0b00 	vldr	d0, [sp]
 801e206:	f000 f837 	bl	801e278 <__kernel_cos>
 801e20a:	e7f5      	b.n	801e1f8 <cos+0x60>
 801e20c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e210:	ed9d 0b00 	vldr	d0, [sp]
 801e214:	2001      	movs	r0, #1
 801e216:	f000 f897 	bl	801e348 <__kernel_sin>
 801e21a:	e7d3      	b.n	801e1c4 <cos+0x2c>
 801e21c:	f3af 8000 	nop.w
	...
 801e228:	3fe921fb 	.word	0x3fe921fb
 801e22c:	7fefffff 	.word	0x7fefffff

0801e230 <sqrtf>:
 801e230:	b508      	push	{r3, lr}
 801e232:	ed2d 8b02 	vpush	{d8}
 801e236:	eeb0 8a40 	vmov.f32	s16, s0
 801e23a:	f000 f817 	bl	801e26c <__ieee754_sqrtf>
 801e23e:	eeb4 8a48 	vcmp.f32	s16, s16
 801e242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e246:	d60c      	bvs.n	801e262 <sqrtf+0x32>
 801e248:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801e268 <sqrtf+0x38>
 801e24c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801e250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e254:	d505      	bpl.n	801e262 <sqrtf+0x32>
 801e256:	f000 ff21 	bl	801f09c <__errno>
 801e25a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801e25e:	2321      	movs	r3, #33	@ 0x21
 801e260:	6003      	str	r3, [r0, #0]
 801e262:	ecbd 8b02 	vpop	{d8}
 801e266:	bd08      	pop	{r3, pc}
 801e268:	00000000 	.word	0x00000000

0801e26c <__ieee754_sqrtf>:
 801e26c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801e270:	4770      	bx	lr
 801e272:	0000      	movs	r0, r0
 801e274:	0000      	movs	r0, r0
	...

0801e278 <__kernel_cos>:
 801e278:	eeb0 5b40 	vmov.f64	d5, d0
 801e27c:	ee15 1a90 	vmov	r1, s11
 801e280:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e284:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801e288:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801e28c:	d204      	bcs.n	801e298 <__kernel_cos+0x20>
 801e28e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 801e292:	ee17 3a90 	vmov	r3, s15
 801e296:	b343      	cbz	r3, 801e2ea <__kernel_cos+0x72>
 801e298:	ee25 6b05 	vmul.f64	d6, d5, d5
 801e29c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 801e2a0:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 801e310 <__kernel_cos+0x98>
 801e2a4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801e318 <__kernel_cos+0xa0>
 801e2a8:	eea6 4b07 	vfma.f64	d4, d6, d7
 801e2ac:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801e320 <__kernel_cos+0xa8>
 801e2b0:	eea4 7b06 	vfma.f64	d7, d4, d6
 801e2b4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801e328 <__kernel_cos+0xb0>
 801e2b8:	eea7 4b06 	vfma.f64	d4, d7, d6
 801e2bc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801e330 <__kernel_cos+0xb8>
 801e2c0:	4b1f      	ldr	r3, [pc, #124]	@ (801e340 <__kernel_cos+0xc8>)
 801e2c2:	eea4 7b06 	vfma.f64	d7, d4, d6
 801e2c6:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801e338 <__kernel_cos+0xc0>
 801e2ca:	4299      	cmp	r1, r3
 801e2cc:	eea7 4b06 	vfma.f64	d4, d7, d6
 801e2d0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801e2d4:	ee24 4b06 	vmul.f64	d4, d4, d6
 801e2d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e2dc:	eea6 1b04 	vfma.f64	d1, d6, d4
 801e2e0:	d804      	bhi.n	801e2ec <__kernel_cos+0x74>
 801e2e2:	ee37 7b41 	vsub.f64	d7, d7, d1
 801e2e6:	ee30 0b47 	vsub.f64	d0, d0, d7
 801e2ea:	4770      	bx	lr
 801e2ec:	4b15      	ldr	r3, [pc, #84]	@ (801e344 <__kernel_cos+0xcc>)
 801e2ee:	4299      	cmp	r1, r3
 801e2f0:	d809      	bhi.n	801e306 <__kernel_cos+0x8e>
 801e2f2:	2200      	movs	r2, #0
 801e2f4:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 801e2f8:	ec43 2b16 	vmov	d6, r2, r3
 801e2fc:	ee30 0b46 	vsub.f64	d0, d0, d6
 801e300:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e304:	e7ed      	b.n	801e2e2 <__kernel_cos+0x6a>
 801e306:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 801e30a:	e7f7      	b.n	801e2fc <__kernel_cos+0x84>
 801e30c:	f3af 8000 	nop.w
 801e310:	be8838d4 	.word	0xbe8838d4
 801e314:	bda8fae9 	.word	0xbda8fae9
 801e318:	bdb4b1c4 	.word	0xbdb4b1c4
 801e31c:	3e21ee9e 	.word	0x3e21ee9e
 801e320:	809c52ad 	.word	0x809c52ad
 801e324:	be927e4f 	.word	0xbe927e4f
 801e328:	19cb1590 	.word	0x19cb1590
 801e32c:	3efa01a0 	.word	0x3efa01a0
 801e330:	16c15177 	.word	0x16c15177
 801e334:	bf56c16c 	.word	0xbf56c16c
 801e338:	5555554c 	.word	0x5555554c
 801e33c:	3fa55555 	.word	0x3fa55555
 801e340:	3fd33332 	.word	0x3fd33332
 801e344:	3fe90000 	.word	0x3fe90000

0801e348 <__kernel_sin>:
 801e348:	ee10 3a90 	vmov	r3, s1
 801e34c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e350:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801e354:	d204      	bcs.n	801e360 <__kernel_sin+0x18>
 801e356:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801e35a:	ee17 3a90 	vmov	r3, s15
 801e35e:	b35b      	cbz	r3, 801e3b8 <__kernel_sin+0x70>
 801e360:	ee20 6b00 	vmul.f64	d6, d0, d0
 801e364:	ee20 5b06 	vmul.f64	d5, d0, d6
 801e368:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 801e3c0 <__kernel_sin+0x78>
 801e36c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801e3c8 <__kernel_sin+0x80>
 801e370:	eea6 4b07 	vfma.f64	d4, d6, d7
 801e374:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801e3d0 <__kernel_sin+0x88>
 801e378:	eea4 7b06 	vfma.f64	d7, d4, d6
 801e37c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801e3d8 <__kernel_sin+0x90>
 801e380:	eea7 4b06 	vfma.f64	d4, d7, d6
 801e384:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801e3e0 <__kernel_sin+0x98>
 801e388:	eea4 7b06 	vfma.f64	d7, d4, d6
 801e38c:	b930      	cbnz	r0, 801e39c <__kernel_sin+0x54>
 801e38e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801e3e8 <__kernel_sin+0xa0>
 801e392:	eea6 4b07 	vfma.f64	d4, d6, d7
 801e396:	eea4 0b05 	vfma.f64	d0, d4, d5
 801e39a:	4770      	bx	lr
 801e39c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801e3a0:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 801e3a4:	eea1 7b04 	vfma.f64	d7, d1, d4
 801e3a8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801e3ac:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801e3f0 <__kernel_sin+0xa8>
 801e3b0:	eea5 1b07 	vfma.f64	d1, d5, d7
 801e3b4:	ee30 0b41 	vsub.f64	d0, d0, d1
 801e3b8:	4770      	bx	lr
 801e3ba:	bf00      	nop
 801e3bc:	f3af 8000 	nop.w
 801e3c0:	5acfd57c 	.word	0x5acfd57c
 801e3c4:	3de5d93a 	.word	0x3de5d93a
 801e3c8:	8a2b9ceb 	.word	0x8a2b9ceb
 801e3cc:	be5ae5e6 	.word	0xbe5ae5e6
 801e3d0:	57b1fe7d 	.word	0x57b1fe7d
 801e3d4:	3ec71de3 	.word	0x3ec71de3
 801e3d8:	19c161d5 	.word	0x19c161d5
 801e3dc:	bf2a01a0 	.word	0xbf2a01a0
 801e3e0:	1110f8a6 	.word	0x1110f8a6
 801e3e4:	3f811111 	.word	0x3f811111
 801e3e8:	55555549 	.word	0x55555549
 801e3ec:	bfc55555 	.word	0xbfc55555
 801e3f0:	55555549 	.word	0x55555549
 801e3f4:	3fc55555 	.word	0x3fc55555

0801e3f8 <__ieee754_rem_pio2>:
 801e3f8:	b570      	push	{r4, r5, r6, lr}
 801e3fa:	eeb0 7b40 	vmov.f64	d7, d0
 801e3fe:	ee17 5a90 	vmov	r5, s15
 801e402:	4b99      	ldr	r3, [pc, #612]	@ (801e668 <__ieee754_rem_pio2+0x270>)
 801e404:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801e408:	429e      	cmp	r6, r3
 801e40a:	b088      	sub	sp, #32
 801e40c:	4604      	mov	r4, r0
 801e40e:	d807      	bhi.n	801e420 <__ieee754_rem_pio2+0x28>
 801e410:	2200      	movs	r2, #0
 801e412:	2300      	movs	r3, #0
 801e414:	ed84 0b00 	vstr	d0, [r4]
 801e418:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e41c:	2000      	movs	r0, #0
 801e41e:	e01b      	b.n	801e458 <__ieee754_rem_pio2+0x60>
 801e420:	4b92      	ldr	r3, [pc, #584]	@ (801e66c <__ieee754_rem_pio2+0x274>)
 801e422:	429e      	cmp	r6, r3
 801e424:	d83b      	bhi.n	801e49e <__ieee754_rem_pio2+0xa6>
 801e426:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801e42a:	2d00      	cmp	r5, #0
 801e42c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 801e628 <__ieee754_rem_pio2+0x230>
 801e430:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 801e434:	dd19      	ble.n	801e46a <__ieee754_rem_pio2+0x72>
 801e436:	ee30 7b46 	vsub.f64	d7, d0, d6
 801e43a:	429e      	cmp	r6, r3
 801e43c:	d00e      	beq.n	801e45c <__ieee754_rem_pio2+0x64>
 801e43e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 801e630 <__ieee754_rem_pio2+0x238>
 801e442:	ee37 6b45 	vsub.f64	d6, d7, d5
 801e446:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e44a:	ed84 6b00 	vstr	d6, [r4]
 801e44e:	ee37 7b45 	vsub.f64	d7, d7, d5
 801e452:	ed84 7b02 	vstr	d7, [r4, #8]
 801e456:	2001      	movs	r0, #1
 801e458:	b008      	add	sp, #32
 801e45a:	bd70      	pop	{r4, r5, r6, pc}
 801e45c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 801e638 <__ieee754_rem_pio2+0x240>
 801e460:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 801e640 <__ieee754_rem_pio2+0x248>
 801e464:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e468:	e7eb      	b.n	801e442 <__ieee754_rem_pio2+0x4a>
 801e46a:	429e      	cmp	r6, r3
 801e46c:	ee30 7b06 	vadd.f64	d7, d0, d6
 801e470:	d00e      	beq.n	801e490 <__ieee754_rem_pio2+0x98>
 801e472:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 801e630 <__ieee754_rem_pio2+0x238>
 801e476:	ee37 6b05 	vadd.f64	d6, d7, d5
 801e47a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e47e:	ed84 6b00 	vstr	d6, [r4]
 801e482:	ee37 7b05 	vadd.f64	d7, d7, d5
 801e486:	f04f 30ff 	mov.w	r0, #4294967295
 801e48a:	ed84 7b02 	vstr	d7, [r4, #8]
 801e48e:	e7e3      	b.n	801e458 <__ieee754_rem_pio2+0x60>
 801e490:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 801e638 <__ieee754_rem_pio2+0x240>
 801e494:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 801e640 <__ieee754_rem_pio2+0x248>
 801e498:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e49c:	e7eb      	b.n	801e476 <__ieee754_rem_pio2+0x7e>
 801e49e:	4b74      	ldr	r3, [pc, #464]	@ (801e670 <__ieee754_rem_pio2+0x278>)
 801e4a0:	429e      	cmp	r6, r3
 801e4a2:	d870      	bhi.n	801e586 <__ieee754_rem_pio2+0x18e>
 801e4a4:	f000 f8ec 	bl	801e680 <fabs>
 801e4a8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801e4ac:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801e648 <__ieee754_rem_pio2+0x250>
 801e4b0:	eea0 7b06 	vfma.f64	d7, d0, d6
 801e4b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801e4b8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801e4bc:	ee17 0a90 	vmov	r0, s15
 801e4c0:	eeb1 4b45 	vneg.f64	d4, d5
 801e4c4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801e628 <__ieee754_rem_pio2+0x230>
 801e4c8:	eea5 0b47 	vfms.f64	d0, d5, d7
 801e4cc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801e630 <__ieee754_rem_pio2+0x238>
 801e4d0:	281f      	cmp	r0, #31
 801e4d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e4d6:	ee30 6b47 	vsub.f64	d6, d0, d7
 801e4da:	dc05      	bgt.n	801e4e8 <__ieee754_rem_pio2+0xf0>
 801e4dc:	4b65      	ldr	r3, [pc, #404]	@ (801e674 <__ieee754_rem_pio2+0x27c>)
 801e4de:	1e42      	subs	r2, r0, #1
 801e4e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e4e4:	42b3      	cmp	r3, r6
 801e4e6:	d109      	bne.n	801e4fc <__ieee754_rem_pio2+0x104>
 801e4e8:	ee16 3a90 	vmov	r3, s13
 801e4ec:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801e4f0:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801e4f4:	2b10      	cmp	r3, #16
 801e4f6:	ea4f 5226 	mov.w	r2, r6, asr #20
 801e4fa:	dc02      	bgt.n	801e502 <__ieee754_rem_pio2+0x10a>
 801e4fc:	ed84 6b00 	vstr	d6, [r4]
 801e500:	e01a      	b.n	801e538 <__ieee754_rem_pio2+0x140>
 801e502:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 801e638 <__ieee754_rem_pio2+0x240>
 801e506:	eeb0 6b40 	vmov.f64	d6, d0
 801e50a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801e50e:	ee30 7b46 	vsub.f64	d7, d0, d6
 801e512:	eea4 7b03 	vfma.f64	d7, d4, d3
 801e516:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 801e640 <__ieee754_rem_pio2+0x248>
 801e51a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801e51e:	ee36 3b47 	vsub.f64	d3, d6, d7
 801e522:	ee13 3a90 	vmov	r3, s7
 801e526:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801e52a:	1ad3      	subs	r3, r2, r3
 801e52c:	2b31      	cmp	r3, #49	@ 0x31
 801e52e:	dc17      	bgt.n	801e560 <__ieee754_rem_pio2+0x168>
 801e530:	eeb0 0b46 	vmov.f64	d0, d6
 801e534:	ed84 3b00 	vstr	d3, [r4]
 801e538:	ed94 6b00 	vldr	d6, [r4]
 801e53c:	2d00      	cmp	r5, #0
 801e53e:	ee30 0b46 	vsub.f64	d0, d0, d6
 801e542:	ee30 0b47 	vsub.f64	d0, d0, d7
 801e546:	ed84 0b02 	vstr	d0, [r4, #8]
 801e54a:	da85      	bge.n	801e458 <__ieee754_rem_pio2+0x60>
 801e54c:	eeb1 6b46 	vneg.f64	d6, d6
 801e550:	eeb1 0b40 	vneg.f64	d0, d0
 801e554:	ed84 6b00 	vstr	d6, [r4]
 801e558:	ed84 0b02 	vstr	d0, [r4, #8]
 801e55c:	4240      	negs	r0, r0
 801e55e:	e77b      	b.n	801e458 <__ieee754_rem_pio2+0x60>
 801e560:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 801e650 <__ieee754_rem_pio2+0x258>
 801e564:	eeb0 0b46 	vmov.f64	d0, d6
 801e568:	eea4 0b07 	vfma.f64	d0, d4, d7
 801e56c:	ee36 6b40 	vsub.f64	d6, d6, d0
 801e570:	eea4 6b07 	vfma.f64	d6, d4, d7
 801e574:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 801e658 <__ieee754_rem_pio2+0x260>
 801e578:	eeb0 7b46 	vmov.f64	d7, d6
 801e57c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801e580:	ee30 6b47 	vsub.f64	d6, d0, d7
 801e584:	e7ba      	b.n	801e4fc <__ieee754_rem_pio2+0x104>
 801e586:	4b3c      	ldr	r3, [pc, #240]	@ (801e678 <__ieee754_rem_pio2+0x280>)
 801e588:	429e      	cmp	r6, r3
 801e58a:	d906      	bls.n	801e59a <__ieee754_rem_pio2+0x1a2>
 801e58c:	ee30 7b40 	vsub.f64	d7, d0, d0
 801e590:	ed80 7b02 	vstr	d7, [r0, #8]
 801e594:	ed80 7b00 	vstr	d7, [r0]
 801e598:	e740      	b.n	801e41c <__ieee754_rem_pio2+0x24>
 801e59a:	ee10 3a10 	vmov	r3, s0
 801e59e:	1532      	asrs	r2, r6, #20
 801e5a0:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 801e5a4:	4618      	mov	r0, r3
 801e5a6:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801e5aa:	ec41 0b17 	vmov	d7, r0, r1
 801e5ae:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801e5b2:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 801e660 <__ieee754_rem_pio2+0x268>
 801e5b6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801e5ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e5be:	ed8d 6b02 	vstr	d6, [sp, #8]
 801e5c2:	ee27 7b05 	vmul.f64	d7, d7, d5
 801e5c6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801e5ca:	a808      	add	r0, sp, #32
 801e5cc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801e5d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e5d4:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e5d8:	ee27 7b05 	vmul.f64	d7, d7, d5
 801e5dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e5e0:	2103      	movs	r1, #3
 801e5e2:	ed30 7b02 	vldmdb	r0!, {d7}
 801e5e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5ee:	460b      	mov	r3, r1
 801e5f0:	f101 31ff 	add.w	r1, r1, #4294967295
 801e5f4:	d0f5      	beq.n	801e5e2 <__ieee754_rem_pio2+0x1ea>
 801e5f6:	4921      	ldr	r1, [pc, #132]	@ (801e67c <__ieee754_rem_pio2+0x284>)
 801e5f8:	9101      	str	r1, [sp, #4]
 801e5fa:	2102      	movs	r1, #2
 801e5fc:	9100      	str	r1, [sp, #0]
 801e5fe:	a802      	add	r0, sp, #8
 801e600:	4621      	mov	r1, r4
 801e602:	f000 f845 	bl	801e690 <__kernel_rem_pio2>
 801e606:	2d00      	cmp	r5, #0
 801e608:	f6bf af26 	bge.w	801e458 <__ieee754_rem_pio2+0x60>
 801e60c:	ed94 7b00 	vldr	d7, [r4]
 801e610:	eeb1 7b47 	vneg.f64	d7, d7
 801e614:	ed84 7b00 	vstr	d7, [r4]
 801e618:	ed94 7b02 	vldr	d7, [r4, #8]
 801e61c:	eeb1 7b47 	vneg.f64	d7, d7
 801e620:	ed84 7b02 	vstr	d7, [r4, #8]
 801e624:	e79a      	b.n	801e55c <__ieee754_rem_pio2+0x164>
 801e626:	bf00      	nop
 801e628:	54400000 	.word	0x54400000
 801e62c:	3ff921fb 	.word	0x3ff921fb
 801e630:	1a626331 	.word	0x1a626331
 801e634:	3dd0b461 	.word	0x3dd0b461
 801e638:	1a600000 	.word	0x1a600000
 801e63c:	3dd0b461 	.word	0x3dd0b461
 801e640:	2e037073 	.word	0x2e037073
 801e644:	3ba3198a 	.word	0x3ba3198a
 801e648:	6dc9c883 	.word	0x6dc9c883
 801e64c:	3fe45f30 	.word	0x3fe45f30
 801e650:	2e000000 	.word	0x2e000000
 801e654:	3ba3198a 	.word	0x3ba3198a
 801e658:	252049c1 	.word	0x252049c1
 801e65c:	397b839a 	.word	0x397b839a
 801e660:	00000000 	.word	0x00000000
 801e664:	41700000 	.word	0x41700000
 801e668:	3fe921fb 	.word	0x3fe921fb
 801e66c:	4002d97b 	.word	0x4002d97b
 801e670:	413921fb 	.word	0x413921fb
 801e674:	0801f6e4 	.word	0x0801f6e4
 801e678:	7fefffff 	.word	0x7fefffff
 801e67c:	0801f764 	.word	0x0801f764

0801e680 <fabs>:
 801e680:	ec51 0b10 	vmov	r0, r1, d0
 801e684:	4602      	mov	r2, r0
 801e686:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e68a:	ec43 2b10 	vmov	d0, r2, r3
 801e68e:	4770      	bx	lr

0801e690 <__kernel_rem_pio2>:
 801e690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e694:	ed2d 8b06 	vpush	{d8-d10}
 801e698:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801e69c:	469b      	mov	fp, r3
 801e69e:	9001      	str	r0, [sp, #4]
 801e6a0:	4bbb      	ldr	r3, [pc, #748]	@ (801e990 <__kernel_rem_pio2+0x300>)
 801e6a2:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 801e6a4:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 801e6a8:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801e6ac:	f112 0f14 	cmn.w	r2, #20
 801e6b0:	bfa8      	it	ge
 801e6b2:	1ed3      	subge	r3, r2, #3
 801e6b4:	f10b 3aff 	add.w	sl, fp, #4294967295
 801e6b8:	bfb8      	it	lt
 801e6ba:	2300      	movlt	r3, #0
 801e6bc:	f06f 0517 	mvn.w	r5, #23
 801e6c0:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 801e978 <__kernel_rem_pio2+0x2e8>
 801e6c4:	bfa4      	itt	ge
 801e6c6:	2018      	movge	r0, #24
 801e6c8:	fb93 f3f0 	sdivge	r3, r3, r0
 801e6cc:	fb03 5505 	mla	r5, r3, r5, r5
 801e6d0:	eba3 040a 	sub.w	r4, r3, sl
 801e6d4:	4415      	add	r5, r2
 801e6d6:	460f      	mov	r7, r1
 801e6d8:	eb09 060a 	add.w	r6, r9, sl
 801e6dc:	a81a      	add	r0, sp, #104	@ 0x68
 801e6de:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801e6e2:	2200      	movs	r2, #0
 801e6e4:	42b2      	cmp	r2, r6
 801e6e6:	dd0e      	ble.n	801e706 <__kernel_rem_pio2+0x76>
 801e6e8:	aa1a      	add	r2, sp, #104	@ 0x68
 801e6ea:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801e6ee:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801e6f2:	2600      	movs	r6, #0
 801e6f4:	454e      	cmp	r6, r9
 801e6f6:	dc25      	bgt.n	801e744 <__kernel_rem_pio2+0xb4>
 801e6f8:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 801e978 <__kernel_rem_pio2+0x2e8>
 801e6fc:	f8dd c004 	ldr.w	ip, [sp, #4]
 801e700:	4614      	mov	r4, r2
 801e702:	2000      	movs	r0, #0
 801e704:	e015      	b.n	801e732 <__kernel_rem_pio2+0xa2>
 801e706:	42d4      	cmn	r4, r2
 801e708:	d409      	bmi.n	801e71e <__kernel_rem_pio2+0x8e>
 801e70a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801e70e:	ee07 1a90 	vmov	s15, r1
 801e712:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e716:	eca0 7b02 	vstmia	r0!, {d7}
 801e71a:	3201      	adds	r2, #1
 801e71c:	e7e2      	b.n	801e6e4 <__kernel_rem_pio2+0x54>
 801e71e:	eeb0 7b46 	vmov.f64	d7, d6
 801e722:	e7f8      	b.n	801e716 <__kernel_rem_pio2+0x86>
 801e724:	ecbc 5b02 	vldmia	ip!, {d5}
 801e728:	ed94 6b00 	vldr	d6, [r4]
 801e72c:	3001      	adds	r0, #1
 801e72e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801e732:	4550      	cmp	r0, sl
 801e734:	f1a4 0408 	sub.w	r4, r4, #8
 801e738:	ddf4      	ble.n	801e724 <__kernel_rem_pio2+0x94>
 801e73a:	ecae 7b02 	vstmia	lr!, {d7}
 801e73e:	3601      	adds	r6, #1
 801e740:	3208      	adds	r2, #8
 801e742:	e7d7      	b.n	801e6f4 <__kernel_rem_pio2+0x64>
 801e744:	aa06      	add	r2, sp, #24
 801e746:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 801e980 <__kernel_rem_pio2+0x2f0>
 801e74a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 801e988 <__kernel_rem_pio2+0x2f8>
 801e74e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801e752:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801e756:	9203      	str	r2, [sp, #12]
 801e758:	9302      	str	r3, [sp, #8]
 801e75a:	464c      	mov	r4, r9
 801e75c:	00e3      	lsls	r3, r4, #3
 801e75e:	9304      	str	r3, [sp, #16]
 801e760:	ab92      	add	r3, sp, #584	@ 0x248
 801e762:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e766:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801e76a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801e76c:	ab06      	add	r3, sp, #24
 801e76e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801e772:	461e      	mov	r6, r3
 801e774:	4620      	mov	r0, r4
 801e776:	2800      	cmp	r0, #0
 801e778:	f1a2 0208 	sub.w	r2, r2, #8
 801e77c:	dc4a      	bgt.n	801e814 <__kernel_rem_pio2+0x184>
 801e77e:	4628      	mov	r0, r5
 801e780:	9305      	str	r3, [sp, #20]
 801e782:	f000 fa01 	bl	801eb88 <scalbn>
 801e786:	eeb0 8b40 	vmov.f64	d8, d0
 801e78a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801e78e:	ee28 0b00 	vmul.f64	d0, d8, d0
 801e792:	f000 fa79 	bl	801ec88 <floor>
 801e796:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801e79a:	eea0 8b47 	vfms.f64	d8, d0, d7
 801e79e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801e7a2:	2d00      	cmp	r5, #0
 801e7a4:	ee17 8a90 	vmov	r8, s15
 801e7a8:	9b05      	ldr	r3, [sp, #20]
 801e7aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e7ae:	ee38 8b47 	vsub.f64	d8, d8, d7
 801e7b2:	dd41      	ble.n	801e838 <__kernel_rem_pio2+0x1a8>
 801e7b4:	1e60      	subs	r0, r4, #1
 801e7b6:	aa06      	add	r2, sp, #24
 801e7b8:	f1c5 0c18 	rsb	ip, r5, #24
 801e7bc:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801e7c0:	fa46 f20c 	asr.w	r2, r6, ip
 801e7c4:	4490      	add	r8, r2
 801e7c6:	fa02 f20c 	lsl.w	r2, r2, ip
 801e7ca:	1ab6      	subs	r6, r6, r2
 801e7cc:	aa06      	add	r2, sp, #24
 801e7ce:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801e7d2:	f1c5 0217 	rsb	r2, r5, #23
 801e7d6:	4116      	asrs	r6, r2
 801e7d8:	2e00      	cmp	r6, #0
 801e7da:	dd3c      	ble.n	801e856 <__kernel_rem_pio2+0x1c6>
 801e7dc:	f04f 0c00 	mov.w	ip, #0
 801e7e0:	f108 0801 	add.w	r8, r8, #1
 801e7e4:	4660      	mov	r0, ip
 801e7e6:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801e7ea:	4564      	cmp	r4, ip
 801e7ec:	dc66      	bgt.n	801e8bc <__kernel_rem_pio2+0x22c>
 801e7ee:	2d00      	cmp	r5, #0
 801e7f0:	dd03      	ble.n	801e7fa <__kernel_rem_pio2+0x16a>
 801e7f2:	2d01      	cmp	r5, #1
 801e7f4:	d072      	beq.n	801e8dc <__kernel_rem_pio2+0x24c>
 801e7f6:	2d02      	cmp	r5, #2
 801e7f8:	d07a      	beq.n	801e8f0 <__kernel_rem_pio2+0x260>
 801e7fa:	2e02      	cmp	r6, #2
 801e7fc:	d12b      	bne.n	801e856 <__kernel_rem_pio2+0x1c6>
 801e7fe:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e802:	ee30 8b48 	vsub.f64	d8, d0, d8
 801e806:	b330      	cbz	r0, 801e856 <__kernel_rem_pio2+0x1c6>
 801e808:	4628      	mov	r0, r5
 801e80a:	f000 f9bd 	bl	801eb88 <scalbn>
 801e80e:	ee38 8b40 	vsub.f64	d8, d8, d0
 801e812:	e020      	b.n	801e856 <__kernel_rem_pio2+0x1c6>
 801e814:	ee20 7b09 	vmul.f64	d7, d0, d9
 801e818:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801e81c:	3801      	subs	r0, #1
 801e81e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801e822:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801e826:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801e82a:	eca6 0a01 	vstmia	r6!, {s0}
 801e82e:	ed92 0b00 	vldr	d0, [r2]
 801e832:	ee37 0b00 	vadd.f64	d0, d7, d0
 801e836:	e79e      	b.n	801e776 <__kernel_rem_pio2+0xe6>
 801e838:	d105      	bne.n	801e846 <__kernel_rem_pio2+0x1b6>
 801e83a:	1e62      	subs	r2, r4, #1
 801e83c:	a906      	add	r1, sp, #24
 801e83e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801e842:	15f6      	asrs	r6, r6, #23
 801e844:	e7c8      	b.n	801e7d8 <__kernel_rem_pio2+0x148>
 801e846:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801e84a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801e84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e852:	da31      	bge.n	801e8b8 <__kernel_rem_pio2+0x228>
 801e854:	2600      	movs	r6, #0
 801e856:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e85e:	f040 809b 	bne.w	801e998 <__kernel_rem_pio2+0x308>
 801e862:	1e62      	subs	r2, r4, #1
 801e864:	2000      	movs	r0, #0
 801e866:	454a      	cmp	r2, r9
 801e868:	da49      	bge.n	801e8fe <__kernel_rem_pio2+0x26e>
 801e86a:	2800      	cmp	r0, #0
 801e86c:	d062      	beq.n	801e934 <__kernel_rem_pio2+0x2a4>
 801e86e:	3c01      	subs	r4, #1
 801e870:	ab06      	add	r3, sp, #24
 801e872:	3d18      	subs	r5, #24
 801e874:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801e878:	2b00      	cmp	r3, #0
 801e87a:	d0f8      	beq.n	801e86e <__kernel_rem_pio2+0x1de>
 801e87c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e880:	4628      	mov	r0, r5
 801e882:	f000 f981 	bl	801eb88 <scalbn>
 801e886:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 801e980 <__kernel_rem_pio2+0x2f0>
 801e88a:	1c62      	adds	r2, r4, #1
 801e88c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801e88e:	00d3      	lsls	r3, r2, #3
 801e890:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801e894:	4622      	mov	r2, r4
 801e896:	2a00      	cmp	r2, #0
 801e898:	f280 80a8 	bge.w	801e9ec <__kernel_rem_pio2+0x35c>
 801e89c:	4622      	mov	r2, r4
 801e89e:	2a00      	cmp	r2, #0
 801e8a0:	f2c0 80c6 	blt.w	801ea30 <__kernel_rem_pio2+0x3a0>
 801e8a4:	a96a      	add	r1, sp, #424	@ 0x1a8
 801e8a6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801e8aa:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 801e978 <__kernel_rem_pio2+0x2e8>
 801e8ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 801e994 <__kernel_rem_pio2+0x304>
 801e8b2:	2000      	movs	r0, #0
 801e8b4:	1aa1      	subs	r1, r4, r2
 801e8b6:	e0b0      	b.n	801ea1a <__kernel_rem_pio2+0x38a>
 801e8b8:	2602      	movs	r6, #2
 801e8ba:	e78f      	b.n	801e7dc <__kernel_rem_pio2+0x14c>
 801e8bc:	f853 2b04 	ldr.w	r2, [r3], #4
 801e8c0:	b948      	cbnz	r0, 801e8d6 <__kernel_rem_pio2+0x246>
 801e8c2:	b122      	cbz	r2, 801e8ce <__kernel_rem_pio2+0x23e>
 801e8c4:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 801e8c8:	f843 2c04 	str.w	r2, [r3, #-4]
 801e8cc:	2201      	movs	r2, #1
 801e8ce:	f10c 0c01 	add.w	ip, ip, #1
 801e8d2:	4610      	mov	r0, r2
 801e8d4:	e789      	b.n	801e7ea <__kernel_rem_pio2+0x15a>
 801e8d6:	ebae 0202 	sub.w	r2, lr, r2
 801e8da:	e7f5      	b.n	801e8c8 <__kernel_rem_pio2+0x238>
 801e8dc:	1e62      	subs	r2, r4, #1
 801e8de:	ab06      	add	r3, sp, #24
 801e8e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e8e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801e8e8:	a906      	add	r1, sp, #24
 801e8ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801e8ee:	e784      	b.n	801e7fa <__kernel_rem_pio2+0x16a>
 801e8f0:	1e62      	subs	r2, r4, #1
 801e8f2:	ab06      	add	r3, sp, #24
 801e8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e8f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801e8fc:	e7f4      	b.n	801e8e8 <__kernel_rem_pio2+0x258>
 801e8fe:	ab06      	add	r3, sp, #24
 801e900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e904:	3a01      	subs	r2, #1
 801e906:	4318      	orrs	r0, r3
 801e908:	e7ad      	b.n	801e866 <__kernel_rem_pio2+0x1d6>
 801e90a:	3301      	adds	r3, #1
 801e90c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801e910:	2800      	cmp	r0, #0
 801e912:	d0fa      	beq.n	801e90a <__kernel_rem_pio2+0x27a>
 801e914:	9a04      	ldr	r2, [sp, #16]
 801e916:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801e91a:	446a      	add	r2, sp
 801e91c:	eb04 000b 	add.w	r0, r4, fp
 801e920:	a91a      	add	r1, sp, #104	@ 0x68
 801e922:	1c66      	adds	r6, r4, #1
 801e924:	3a98      	subs	r2, #152	@ 0x98
 801e926:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801e92a:	4423      	add	r3, r4
 801e92c:	42b3      	cmp	r3, r6
 801e92e:	da04      	bge.n	801e93a <__kernel_rem_pio2+0x2aa>
 801e930:	461c      	mov	r4, r3
 801e932:	e713      	b.n	801e75c <__kernel_rem_pio2+0xcc>
 801e934:	9a03      	ldr	r2, [sp, #12]
 801e936:	2301      	movs	r3, #1
 801e938:	e7e8      	b.n	801e90c <__kernel_rem_pio2+0x27c>
 801e93a:	9902      	ldr	r1, [sp, #8]
 801e93c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801e940:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 801e944:	9104      	str	r1, [sp, #16]
 801e946:	ee07 1a90 	vmov	s15, r1
 801e94a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e94e:	2400      	movs	r4, #0
 801e950:	eca0 7b02 	vstmia	r0!, {d7}
 801e954:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801e978 <__kernel_rem_pio2+0x2e8>
 801e958:	4686      	mov	lr, r0
 801e95a:	4554      	cmp	r4, sl
 801e95c:	dd03      	ble.n	801e966 <__kernel_rem_pio2+0x2d6>
 801e95e:	eca2 7b02 	vstmia	r2!, {d7}
 801e962:	3601      	adds	r6, #1
 801e964:	e7e2      	b.n	801e92c <__kernel_rem_pio2+0x29c>
 801e966:	ecbc 5b02 	vldmia	ip!, {d5}
 801e96a:	ed3e 6b02 	vldmdb	lr!, {d6}
 801e96e:	3401      	adds	r4, #1
 801e970:	eea5 7b06 	vfma.f64	d7, d5, d6
 801e974:	e7f1      	b.n	801e95a <__kernel_rem_pio2+0x2ca>
 801e976:	bf00      	nop
	...
 801e984:	3e700000 	.word	0x3e700000
 801e988:	00000000 	.word	0x00000000
 801e98c:	41700000 	.word	0x41700000
 801e990:	0801f8b0 	.word	0x0801f8b0
 801e994:	0801f870 	.word	0x0801f870
 801e998:	4268      	negs	r0, r5
 801e99a:	eeb0 0b48 	vmov.f64	d0, d8
 801e99e:	f000 f8f3 	bl	801eb88 <scalbn>
 801e9a2:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 801eb70 <__kernel_rem_pio2+0x4e0>
 801e9a6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801e9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9ae:	db17      	blt.n	801e9e0 <__kernel_rem_pio2+0x350>
 801e9b0:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 801eb78 <__kernel_rem_pio2+0x4e8>
 801e9b4:	ee20 7b07 	vmul.f64	d7, d0, d7
 801e9b8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801e9bc:	aa06      	add	r2, sp, #24
 801e9be:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801e9c2:	eea5 0b46 	vfms.f64	d0, d5, d6
 801e9c6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801e9ca:	3518      	adds	r5, #24
 801e9cc:	ee10 3a10 	vmov	r3, s0
 801e9d0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801e9d4:	ee17 3a10 	vmov	r3, s14
 801e9d8:	3401      	adds	r4, #1
 801e9da:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801e9de:	e74d      	b.n	801e87c <__kernel_rem_pio2+0x1ec>
 801e9e0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801e9e4:	aa06      	add	r2, sp, #24
 801e9e6:	ee10 3a10 	vmov	r3, s0
 801e9ea:	e7f6      	b.n	801e9da <__kernel_rem_pio2+0x34a>
 801e9ec:	a806      	add	r0, sp, #24
 801e9ee:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801e9f2:	9001      	str	r0, [sp, #4]
 801e9f4:	ee07 0a90 	vmov	s15, r0
 801e9f8:	3a01      	subs	r2, #1
 801e9fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e9fe:	ee27 7b00 	vmul.f64	d7, d7, d0
 801ea02:	ee20 0b06 	vmul.f64	d0, d0, d6
 801ea06:	ed21 7b02 	vstmdb	r1!, {d7}
 801ea0a:	e744      	b.n	801e896 <__kernel_rem_pio2+0x206>
 801ea0c:	ecbc 5b02 	vldmia	ip!, {d5}
 801ea10:	ecb5 6b02 	vldmia	r5!, {d6}
 801ea14:	3001      	adds	r0, #1
 801ea16:	eea5 7b06 	vfma.f64	d7, d5, d6
 801ea1a:	4548      	cmp	r0, r9
 801ea1c:	dc01      	bgt.n	801ea22 <__kernel_rem_pio2+0x392>
 801ea1e:	4281      	cmp	r1, r0
 801ea20:	daf4      	bge.n	801ea0c <__kernel_rem_pio2+0x37c>
 801ea22:	a842      	add	r0, sp, #264	@ 0x108
 801ea24:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801ea28:	ed81 7b00 	vstr	d7, [r1]
 801ea2c:	3a01      	subs	r2, #1
 801ea2e:	e736      	b.n	801e89e <__kernel_rem_pio2+0x20e>
 801ea30:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801ea32:	2a02      	cmp	r2, #2
 801ea34:	dc0a      	bgt.n	801ea4c <__kernel_rem_pio2+0x3bc>
 801ea36:	2a00      	cmp	r2, #0
 801ea38:	dc2d      	bgt.n	801ea96 <__kernel_rem_pio2+0x406>
 801ea3a:	d046      	beq.n	801eaca <__kernel_rem_pio2+0x43a>
 801ea3c:	f008 0007 	and.w	r0, r8, #7
 801ea40:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801ea44:	ecbd 8b06 	vpop	{d8-d10}
 801ea48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea4c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801ea4e:	2a03      	cmp	r2, #3
 801ea50:	d1f4      	bne.n	801ea3c <__kernel_rem_pio2+0x3ac>
 801ea52:	a942      	add	r1, sp, #264	@ 0x108
 801ea54:	f1a3 0208 	sub.w	r2, r3, #8
 801ea58:	440a      	add	r2, r1
 801ea5a:	4611      	mov	r1, r2
 801ea5c:	4620      	mov	r0, r4
 801ea5e:	2800      	cmp	r0, #0
 801ea60:	f1a1 0108 	sub.w	r1, r1, #8
 801ea64:	dc52      	bgt.n	801eb0c <__kernel_rem_pio2+0x47c>
 801ea66:	4621      	mov	r1, r4
 801ea68:	2901      	cmp	r1, #1
 801ea6a:	f1a2 0208 	sub.w	r2, r2, #8
 801ea6e:	dc5d      	bgt.n	801eb2c <__kernel_rem_pio2+0x49c>
 801ea70:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 801eb80 <__kernel_rem_pio2+0x4f0>
 801ea74:	aa42      	add	r2, sp, #264	@ 0x108
 801ea76:	4413      	add	r3, r2
 801ea78:	2c01      	cmp	r4, #1
 801ea7a:	dc67      	bgt.n	801eb4c <__kernel_rem_pio2+0x4bc>
 801ea7c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 801ea80:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 801ea84:	2e00      	cmp	r6, #0
 801ea86:	d167      	bne.n	801eb58 <__kernel_rem_pio2+0x4c8>
 801ea88:	ed87 5b00 	vstr	d5, [r7]
 801ea8c:	ed87 6b02 	vstr	d6, [r7, #8]
 801ea90:	ed87 7b04 	vstr	d7, [r7, #16]
 801ea94:	e7d2      	b.n	801ea3c <__kernel_rem_pio2+0x3ac>
 801ea96:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 801eb80 <__kernel_rem_pio2+0x4f0>
 801ea9a:	aa42      	add	r2, sp, #264	@ 0x108
 801ea9c:	4413      	add	r3, r2
 801ea9e:	4622      	mov	r2, r4
 801eaa0:	2a00      	cmp	r2, #0
 801eaa2:	da24      	bge.n	801eaee <__kernel_rem_pio2+0x45e>
 801eaa4:	b34e      	cbz	r6, 801eafa <__kernel_rem_pio2+0x46a>
 801eaa6:	eeb1 7b46 	vneg.f64	d7, d6
 801eaaa:	ed87 7b00 	vstr	d7, [r7]
 801eaae:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801eab2:	aa44      	add	r2, sp, #272	@ 0x110
 801eab4:	2301      	movs	r3, #1
 801eab6:	ee37 7b46 	vsub.f64	d7, d7, d6
 801eaba:	429c      	cmp	r4, r3
 801eabc:	da20      	bge.n	801eb00 <__kernel_rem_pio2+0x470>
 801eabe:	b10e      	cbz	r6, 801eac4 <__kernel_rem_pio2+0x434>
 801eac0:	eeb1 7b47 	vneg.f64	d7, d7
 801eac4:	ed87 7b02 	vstr	d7, [r7, #8]
 801eac8:	e7b8      	b.n	801ea3c <__kernel_rem_pio2+0x3ac>
 801eaca:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 801eb80 <__kernel_rem_pio2+0x4f0>
 801eace:	aa42      	add	r2, sp, #264	@ 0x108
 801ead0:	4413      	add	r3, r2
 801ead2:	2c00      	cmp	r4, #0
 801ead4:	da05      	bge.n	801eae2 <__kernel_rem_pio2+0x452>
 801ead6:	b10e      	cbz	r6, 801eadc <__kernel_rem_pio2+0x44c>
 801ead8:	eeb1 7b47 	vneg.f64	d7, d7
 801eadc:	ed87 7b00 	vstr	d7, [r7]
 801eae0:	e7ac      	b.n	801ea3c <__kernel_rem_pio2+0x3ac>
 801eae2:	ed33 6b02 	vldmdb	r3!, {d6}
 801eae6:	3c01      	subs	r4, #1
 801eae8:	ee37 7b06 	vadd.f64	d7, d7, d6
 801eaec:	e7f1      	b.n	801ead2 <__kernel_rem_pio2+0x442>
 801eaee:	ed33 7b02 	vldmdb	r3!, {d7}
 801eaf2:	3a01      	subs	r2, #1
 801eaf4:	ee36 6b07 	vadd.f64	d6, d6, d7
 801eaf8:	e7d2      	b.n	801eaa0 <__kernel_rem_pio2+0x410>
 801eafa:	eeb0 7b46 	vmov.f64	d7, d6
 801eafe:	e7d4      	b.n	801eaaa <__kernel_rem_pio2+0x41a>
 801eb00:	ecb2 6b02 	vldmia	r2!, {d6}
 801eb04:	3301      	adds	r3, #1
 801eb06:	ee37 7b06 	vadd.f64	d7, d7, d6
 801eb0a:	e7d6      	b.n	801eaba <__kernel_rem_pio2+0x42a>
 801eb0c:	ed91 7b00 	vldr	d7, [r1]
 801eb10:	ed91 5b02 	vldr	d5, [r1, #8]
 801eb14:	3801      	subs	r0, #1
 801eb16:	ee37 6b05 	vadd.f64	d6, d7, d5
 801eb1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801eb1e:	ed81 6b00 	vstr	d6, [r1]
 801eb22:	ee37 7b05 	vadd.f64	d7, d7, d5
 801eb26:	ed81 7b02 	vstr	d7, [r1, #8]
 801eb2a:	e798      	b.n	801ea5e <__kernel_rem_pio2+0x3ce>
 801eb2c:	ed92 7b00 	vldr	d7, [r2]
 801eb30:	ed92 5b02 	vldr	d5, [r2, #8]
 801eb34:	3901      	subs	r1, #1
 801eb36:	ee37 6b05 	vadd.f64	d6, d7, d5
 801eb3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801eb3e:	ed82 6b00 	vstr	d6, [r2]
 801eb42:	ee37 7b05 	vadd.f64	d7, d7, d5
 801eb46:	ed82 7b02 	vstr	d7, [r2, #8]
 801eb4a:	e78d      	b.n	801ea68 <__kernel_rem_pio2+0x3d8>
 801eb4c:	ed33 6b02 	vldmdb	r3!, {d6}
 801eb50:	3c01      	subs	r4, #1
 801eb52:	ee37 7b06 	vadd.f64	d7, d7, d6
 801eb56:	e78f      	b.n	801ea78 <__kernel_rem_pio2+0x3e8>
 801eb58:	eeb1 5b45 	vneg.f64	d5, d5
 801eb5c:	eeb1 6b46 	vneg.f64	d6, d6
 801eb60:	ed87 5b00 	vstr	d5, [r7]
 801eb64:	eeb1 7b47 	vneg.f64	d7, d7
 801eb68:	ed87 6b02 	vstr	d6, [r7, #8]
 801eb6c:	e790      	b.n	801ea90 <__kernel_rem_pio2+0x400>
 801eb6e:	bf00      	nop
 801eb70:	00000000 	.word	0x00000000
 801eb74:	41700000 	.word	0x41700000
 801eb78:	00000000 	.word	0x00000000
 801eb7c:	3e700000 	.word	0x3e700000
	...

0801eb88 <scalbn>:
 801eb88:	ee10 1a90 	vmov	r1, s1
 801eb8c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801eb90:	b98b      	cbnz	r3, 801ebb6 <scalbn+0x2e>
 801eb92:	ee10 3a10 	vmov	r3, s0
 801eb96:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801eb9a:	4319      	orrs	r1, r3
 801eb9c:	d00a      	beq.n	801ebb4 <scalbn+0x2c>
 801eb9e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 801ec50 <scalbn+0xc8>
 801eba2:	4b37      	ldr	r3, [pc, #220]	@ (801ec80 <scalbn+0xf8>)
 801eba4:	ee20 0b07 	vmul.f64	d0, d0, d7
 801eba8:	4298      	cmp	r0, r3
 801ebaa:	da0b      	bge.n	801ebc4 <scalbn+0x3c>
 801ebac:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801ec58 <scalbn+0xd0>
 801ebb0:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ebb4:	4770      	bx	lr
 801ebb6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801ebba:	4293      	cmp	r3, r2
 801ebbc:	d107      	bne.n	801ebce <scalbn+0x46>
 801ebbe:	ee30 0b00 	vadd.f64	d0, d0, d0
 801ebc2:	4770      	bx	lr
 801ebc4:	ee10 1a90 	vmov	r1, s1
 801ebc8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ebcc:	3b36      	subs	r3, #54	@ 0x36
 801ebce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801ebd2:	4290      	cmp	r0, r2
 801ebd4:	dd0d      	ble.n	801ebf2 <scalbn+0x6a>
 801ebd6:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801ec60 <scalbn+0xd8>
 801ebda:	ee10 3a90 	vmov	r3, s1
 801ebde:	eeb0 6b47 	vmov.f64	d6, d7
 801ebe2:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 801ec68 <scalbn+0xe0>
 801ebe6:	2b00      	cmp	r3, #0
 801ebe8:	fe27 7b05 	vselge.f64	d7, d7, d5
 801ebec:	ee27 0b06 	vmul.f64	d0, d7, d6
 801ebf0:	4770      	bx	lr
 801ebf2:	4418      	add	r0, r3
 801ebf4:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 801ebf8:	4298      	cmp	r0, r3
 801ebfa:	dcec      	bgt.n	801ebd6 <scalbn+0x4e>
 801ebfc:	2800      	cmp	r0, #0
 801ebfe:	dd0a      	ble.n	801ec16 <scalbn+0x8e>
 801ec00:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801ec04:	ec53 2b10 	vmov	r2, r3, d0
 801ec08:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801ec0c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801ec10:	ec43 2b10 	vmov	d0, r2, r3
 801ec14:	4770      	bx	lr
 801ec16:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801ec1a:	da09      	bge.n	801ec30 <scalbn+0xa8>
 801ec1c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 801ec58 <scalbn+0xd0>
 801ec20:	ee10 3a90 	vmov	r3, s1
 801ec24:	eeb0 6b47 	vmov.f64	d6, d7
 801ec28:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 801ec70 <scalbn+0xe8>
 801ec2c:	2b00      	cmp	r3, #0
 801ec2e:	e7db      	b.n	801ebe8 <scalbn+0x60>
 801ec30:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801ec34:	ec53 2b10 	vmov	r2, r3, d0
 801ec38:	3036      	adds	r0, #54	@ 0x36
 801ec3a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801ec3e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801ec42:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801ec78 <scalbn+0xf0>
 801ec46:	ec43 2b10 	vmov	d0, r2, r3
 801ec4a:	e7b1      	b.n	801ebb0 <scalbn+0x28>
 801ec4c:	f3af 8000 	nop.w
 801ec50:	00000000 	.word	0x00000000
 801ec54:	43500000 	.word	0x43500000
 801ec58:	c2f8f359 	.word	0xc2f8f359
 801ec5c:	01a56e1f 	.word	0x01a56e1f
 801ec60:	8800759c 	.word	0x8800759c
 801ec64:	7e37e43c 	.word	0x7e37e43c
 801ec68:	8800759c 	.word	0x8800759c
 801ec6c:	fe37e43c 	.word	0xfe37e43c
 801ec70:	c2f8f359 	.word	0xc2f8f359
 801ec74:	81a56e1f 	.word	0x81a56e1f
 801ec78:	00000000 	.word	0x00000000
 801ec7c:	3c900000 	.word	0x3c900000
 801ec80:	ffff3cb0 	.word	0xffff3cb0
 801ec84:	00000000 	.word	0x00000000

0801ec88 <floor>:
 801ec88:	ee10 3a90 	vmov	r3, s1
 801ec8c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 801ec90:	ee10 2a10 	vmov	r2, s0
 801ec94:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 801ec98:	2913      	cmp	r1, #19
 801ec9a:	b530      	push	{r4, r5, lr}
 801ec9c:	4615      	mov	r5, r2
 801ec9e:	dc33      	bgt.n	801ed08 <floor+0x80>
 801eca0:	2900      	cmp	r1, #0
 801eca2:	da18      	bge.n	801ecd6 <floor+0x4e>
 801eca4:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 801ed68 <floor+0xe0>
 801eca8:	ee30 0b07 	vadd.f64	d0, d0, d7
 801ecac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ecb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ecb4:	dd0a      	ble.n	801eccc <floor+0x44>
 801ecb6:	2b00      	cmp	r3, #0
 801ecb8:	da50      	bge.n	801ed5c <floor+0xd4>
 801ecba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ecbe:	4313      	orrs	r3, r2
 801ecc0:	2200      	movs	r2, #0
 801ecc2:	4293      	cmp	r3, r2
 801ecc4:	4b2a      	ldr	r3, [pc, #168]	@ (801ed70 <floor+0xe8>)
 801ecc6:	bf08      	it	eq
 801ecc8:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801eccc:	4619      	mov	r1, r3
 801ecce:	4610      	mov	r0, r2
 801ecd0:	ec41 0b10 	vmov	d0, r0, r1
 801ecd4:	e01f      	b.n	801ed16 <floor+0x8e>
 801ecd6:	4827      	ldr	r0, [pc, #156]	@ (801ed74 <floor+0xec>)
 801ecd8:	4108      	asrs	r0, r1
 801ecda:	ea03 0400 	and.w	r4, r3, r0
 801ecde:	4314      	orrs	r4, r2
 801ece0:	d019      	beq.n	801ed16 <floor+0x8e>
 801ece2:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801ed68 <floor+0xe0>
 801ece6:	ee30 0b07 	vadd.f64	d0, d0, d7
 801ecea:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ecee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ecf2:	ddeb      	ble.n	801eccc <floor+0x44>
 801ecf4:	2b00      	cmp	r3, #0
 801ecf6:	bfbe      	ittt	lt
 801ecf8:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801ecfc:	410a      	asrlt	r2, r1
 801ecfe:	189b      	addlt	r3, r3, r2
 801ed00:	ea23 0300 	bic.w	r3, r3, r0
 801ed04:	2200      	movs	r2, #0
 801ed06:	e7e1      	b.n	801eccc <floor+0x44>
 801ed08:	2933      	cmp	r1, #51	@ 0x33
 801ed0a:	dd05      	ble.n	801ed18 <floor+0x90>
 801ed0c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801ed10:	d101      	bne.n	801ed16 <floor+0x8e>
 801ed12:	ee30 0b00 	vadd.f64	d0, d0, d0
 801ed16:	bd30      	pop	{r4, r5, pc}
 801ed18:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801ed1c:	f04f 30ff 	mov.w	r0, #4294967295
 801ed20:	40e0      	lsrs	r0, r4
 801ed22:	4210      	tst	r0, r2
 801ed24:	d0f7      	beq.n	801ed16 <floor+0x8e>
 801ed26:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801ed68 <floor+0xe0>
 801ed2a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801ed2e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ed32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed36:	ddc9      	ble.n	801eccc <floor+0x44>
 801ed38:	2b00      	cmp	r3, #0
 801ed3a:	da02      	bge.n	801ed42 <floor+0xba>
 801ed3c:	2914      	cmp	r1, #20
 801ed3e:	d103      	bne.n	801ed48 <floor+0xc0>
 801ed40:	3301      	adds	r3, #1
 801ed42:	ea22 0200 	bic.w	r2, r2, r0
 801ed46:	e7c1      	b.n	801eccc <floor+0x44>
 801ed48:	2401      	movs	r4, #1
 801ed4a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801ed4e:	fa04 f101 	lsl.w	r1, r4, r1
 801ed52:	440a      	add	r2, r1
 801ed54:	42aa      	cmp	r2, r5
 801ed56:	bf38      	it	cc
 801ed58:	191b      	addcc	r3, r3, r4
 801ed5a:	e7f2      	b.n	801ed42 <floor+0xba>
 801ed5c:	2200      	movs	r2, #0
 801ed5e:	4613      	mov	r3, r2
 801ed60:	e7b4      	b.n	801eccc <floor+0x44>
 801ed62:	bf00      	nop
 801ed64:	f3af 8000 	nop.w
 801ed68:	8800759c 	.word	0x8800759c
 801ed6c:	7e37e43c 	.word	0x7e37e43c
 801ed70:	bff00000 	.word	0xbff00000
 801ed74:	000fffff 	.word	0x000fffff

0801ed78 <abort>:
 801ed78:	b508      	push	{r3, lr}
 801ed7a:	2006      	movs	r0, #6
 801ed7c:	f000 f90c 	bl	801ef98 <raise>
 801ed80:	2001      	movs	r0, #1
 801ed82:	f7e4 facd 	bl	8003320 <_exit>
	...

0801ed88 <malloc>:
 801ed88:	4b02      	ldr	r3, [pc, #8]	@ (801ed94 <malloc+0xc>)
 801ed8a:	4601      	mov	r1, r0
 801ed8c:	6818      	ldr	r0, [r3, #0]
 801ed8e:	f000 b82d 	b.w	801edec <_malloc_r>
 801ed92:	bf00      	nop
 801ed94:	24000014 	.word	0x24000014

0801ed98 <free>:
 801ed98:	4b02      	ldr	r3, [pc, #8]	@ (801eda4 <free+0xc>)
 801ed9a:	4601      	mov	r1, r0
 801ed9c:	6818      	ldr	r0, [r3, #0]
 801ed9e:	f000 b9b7 	b.w	801f110 <_free_r>
 801eda2:	bf00      	nop
 801eda4:	24000014 	.word	0x24000014

0801eda8 <sbrk_aligned>:
 801eda8:	b570      	push	{r4, r5, r6, lr}
 801edaa:	4e0f      	ldr	r6, [pc, #60]	@ (801ede8 <sbrk_aligned+0x40>)
 801edac:	460c      	mov	r4, r1
 801edae:	6831      	ldr	r1, [r6, #0]
 801edb0:	4605      	mov	r5, r0
 801edb2:	b911      	cbnz	r1, 801edba <sbrk_aligned+0x12>
 801edb4:	f000 f962 	bl	801f07c <_sbrk_r>
 801edb8:	6030      	str	r0, [r6, #0]
 801edba:	4621      	mov	r1, r4
 801edbc:	4628      	mov	r0, r5
 801edbe:	f000 f95d 	bl	801f07c <_sbrk_r>
 801edc2:	1c43      	adds	r3, r0, #1
 801edc4:	d103      	bne.n	801edce <sbrk_aligned+0x26>
 801edc6:	f04f 34ff 	mov.w	r4, #4294967295
 801edca:	4620      	mov	r0, r4
 801edcc:	bd70      	pop	{r4, r5, r6, pc}
 801edce:	1cc4      	adds	r4, r0, #3
 801edd0:	f024 0403 	bic.w	r4, r4, #3
 801edd4:	42a0      	cmp	r0, r4
 801edd6:	d0f8      	beq.n	801edca <sbrk_aligned+0x22>
 801edd8:	1a21      	subs	r1, r4, r0
 801edda:	4628      	mov	r0, r5
 801eddc:	f000 f94e 	bl	801f07c <_sbrk_r>
 801ede0:	3001      	adds	r0, #1
 801ede2:	d1f2      	bne.n	801edca <sbrk_aligned+0x22>
 801ede4:	e7ef      	b.n	801edc6 <sbrk_aligned+0x1e>
 801ede6:	bf00      	nop
 801ede8:	24007404 	.word	0x24007404

0801edec <_malloc_r>:
 801edec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801edf0:	1ccd      	adds	r5, r1, #3
 801edf2:	f025 0503 	bic.w	r5, r5, #3
 801edf6:	3508      	adds	r5, #8
 801edf8:	2d0c      	cmp	r5, #12
 801edfa:	bf38      	it	cc
 801edfc:	250c      	movcc	r5, #12
 801edfe:	2d00      	cmp	r5, #0
 801ee00:	4606      	mov	r6, r0
 801ee02:	db01      	blt.n	801ee08 <_malloc_r+0x1c>
 801ee04:	42a9      	cmp	r1, r5
 801ee06:	d904      	bls.n	801ee12 <_malloc_r+0x26>
 801ee08:	230c      	movs	r3, #12
 801ee0a:	6033      	str	r3, [r6, #0]
 801ee0c:	2000      	movs	r0, #0
 801ee0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ee12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801eee8 <_malloc_r+0xfc>
 801ee16:	f000 f869 	bl	801eeec <__malloc_lock>
 801ee1a:	f8d8 3000 	ldr.w	r3, [r8]
 801ee1e:	461c      	mov	r4, r3
 801ee20:	bb44      	cbnz	r4, 801ee74 <_malloc_r+0x88>
 801ee22:	4629      	mov	r1, r5
 801ee24:	4630      	mov	r0, r6
 801ee26:	f7ff ffbf 	bl	801eda8 <sbrk_aligned>
 801ee2a:	1c43      	adds	r3, r0, #1
 801ee2c:	4604      	mov	r4, r0
 801ee2e:	d158      	bne.n	801eee2 <_malloc_r+0xf6>
 801ee30:	f8d8 4000 	ldr.w	r4, [r8]
 801ee34:	4627      	mov	r7, r4
 801ee36:	2f00      	cmp	r7, #0
 801ee38:	d143      	bne.n	801eec2 <_malloc_r+0xd6>
 801ee3a:	2c00      	cmp	r4, #0
 801ee3c:	d04b      	beq.n	801eed6 <_malloc_r+0xea>
 801ee3e:	6823      	ldr	r3, [r4, #0]
 801ee40:	4639      	mov	r1, r7
 801ee42:	4630      	mov	r0, r6
 801ee44:	eb04 0903 	add.w	r9, r4, r3
 801ee48:	f000 f918 	bl	801f07c <_sbrk_r>
 801ee4c:	4581      	cmp	r9, r0
 801ee4e:	d142      	bne.n	801eed6 <_malloc_r+0xea>
 801ee50:	6821      	ldr	r1, [r4, #0]
 801ee52:	1a6d      	subs	r5, r5, r1
 801ee54:	4629      	mov	r1, r5
 801ee56:	4630      	mov	r0, r6
 801ee58:	f7ff ffa6 	bl	801eda8 <sbrk_aligned>
 801ee5c:	3001      	adds	r0, #1
 801ee5e:	d03a      	beq.n	801eed6 <_malloc_r+0xea>
 801ee60:	6823      	ldr	r3, [r4, #0]
 801ee62:	442b      	add	r3, r5
 801ee64:	6023      	str	r3, [r4, #0]
 801ee66:	f8d8 3000 	ldr.w	r3, [r8]
 801ee6a:	685a      	ldr	r2, [r3, #4]
 801ee6c:	bb62      	cbnz	r2, 801eec8 <_malloc_r+0xdc>
 801ee6e:	f8c8 7000 	str.w	r7, [r8]
 801ee72:	e00f      	b.n	801ee94 <_malloc_r+0xa8>
 801ee74:	6822      	ldr	r2, [r4, #0]
 801ee76:	1b52      	subs	r2, r2, r5
 801ee78:	d420      	bmi.n	801eebc <_malloc_r+0xd0>
 801ee7a:	2a0b      	cmp	r2, #11
 801ee7c:	d917      	bls.n	801eeae <_malloc_r+0xc2>
 801ee7e:	1961      	adds	r1, r4, r5
 801ee80:	42a3      	cmp	r3, r4
 801ee82:	6025      	str	r5, [r4, #0]
 801ee84:	bf18      	it	ne
 801ee86:	6059      	strne	r1, [r3, #4]
 801ee88:	6863      	ldr	r3, [r4, #4]
 801ee8a:	bf08      	it	eq
 801ee8c:	f8c8 1000 	streq.w	r1, [r8]
 801ee90:	5162      	str	r2, [r4, r5]
 801ee92:	604b      	str	r3, [r1, #4]
 801ee94:	4630      	mov	r0, r6
 801ee96:	f000 f82f 	bl	801eef8 <__malloc_unlock>
 801ee9a:	f104 000b 	add.w	r0, r4, #11
 801ee9e:	1d23      	adds	r3, r4, #4
 801eea0:	f020 0007 	bic.w	r0, r0, #7
 801eea4:	1ac2      	subs	r2, r0, r3
 801eea6:	bf1c      	itt	ne
 801eea8:	1a1b      	subne	r3, r3, r0
 801eeaa:	50a3      	strne	r3, [r4, r2]
 801eeac:	e7af      	b.n	801ee0e <_malloc_r+0x22>
 801eeae:	6862      	ldr	r2, [r4, #4]
 801eeb0:	42a3      	cmp	r3, r4
 801eeb2:	bf0c      	ite	eq
 801eeb4:	f8c8 2000 	streq.w	r2, [r8]
 801eeb8:	605a      	strne	r2, [r3, #4]
 801eeba:	e7eb      	b.n	801ee94 <_malloc_r+0xa8>
 801eebc:	4623      	mov	r3, r4
 801eebe:	6864      	ldr	r4, [r4, #4]
 801eec0:	e7ae      	b.n	801ee20 <_malloc_r+0x34>
 801eec2:	463c      	mov	r4, r7
 801eec4:	687f      	ldr	r7, [r7, #4]
 801eec6:	e7b6      	b.n	801ee36 <_malloc_r+0x4a>
 801eec8:	461a      	mov	r2, r3
 801eeca:	685b      	ldr	r3, [r3, #4]
 801eecc:	42a3      	cmp	r3, r4
 801eece:	d1fb      	bne.n	801eec8 <_malloc_r+0xdc>
 801eed0:	2300      	movs	r3, #0
 801eed2:	6053      	str	r3, [r2, #4]
 801eed4:	e7de      	b.n	801ee94 <_malloc_r+0xa8>
 801eed6:	230c      	movs	r3, #12
 801eed8:	6033      	str	r3, [r6, #0]
 801eeda:	4630      	mov	r0, r6
 801eedc:	f000 f80c 	bl	801eef8 <__malloc_unlock>
 801eee0:	e794      	b.n	801ee0c <_malloc_r+0x20>
 801eee2:	6005      	str	r5, [r0, #0]
 801eee4:	e7d6      	b.n	801ee94 <_malloc_r+0xa8>
 801eee6:	bf00      	nop
 801eee8:	24007408 	.word	0x24007408

0801eeec <__malloc_lock>:
 801eeec:	4801      	ldr	r0, [pc, #4]	@ (801eef4 <__malloc_lock+0x8>)
 801eeee:	f000 b8ff 	b.w	801f0f0 <__retarget_lock_acquire_recursive>
 801eef2:	bf00      	nop
 801eef4:	24007548 	.word	0x24007548

0801eef8 <__malloc_unlock>:
 801eef8:	4801      	ldr	r0, [pc, #4]	@ (801ef00 <__malloc_unlock+0x8>)
 801eefa:	f000 b8fa 	b.w	801f0f2 <__retarget_lock_release_recursive>
 801eefe:	bf00      	nop
 801ef00:	24007548 	.word	0x24007548

0801ef04 <memmove>:
 801ef04:	4288      	cmp	r0, r1
 801ef06:	b510      	push	{r4, lr}
 801ef08:	eb01 0402 	add.w	r4, r1, r2
 801ef0c:	d902      	bls.n	801ef14 <memmove+0x10>
 801ef0e:	4284      	cmp	r4, r0
 801ef10:	4623      	mov	r3, r4
 801ef12:	d807      	bhi.n	801ef24 <memmove+0x20>
 801ef14:	1e43      	subs	r3, r0, #1
 801ef16:	42a1      	cmp	r1, r4
 801ef18:	d008      	beq.n	801ef2c <memmove+0x28>
 801ef1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ef1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ef22:	e7f8      	b.n	801ef16 <memmove+0x12>
 801ef24:	4402      	add	r2, r0
 801ef26:	4601      	mov	r1, r0
 801ef28:	428a      	cmp	r2, r1
 801ef2a:	d100      	bne.n	801ef2e <memmove+0x2a>
 801ef2c:	bd10      	pop	{r4, pc}
 801ef2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ef32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ef36:	e7f7      	b.n	801ef28 <memmove+0x24>

0801ef38 <memset>:
 801ef38:	4402      	add	r2, r0
 801ef3a:	4603      	mov	r3, r0
 801ef3c:	4293      	cmp	r3, r2
 801ef3e:	d100      	bne.n	801ef42 <memset+0xa>
 801ef40:	4770      	bx	lr
 801ef42:	f803 1b01 	strb.w	r1, [r3], #1
 801ef46:	e7f9      	b.n	801ef3c <memset+0x4>

0801ef48 <_raise_r>:
 801ef48:	291f      	cmp	r1, #31
 801ef4a:	b538      	push	{r3, r4, r5, lr}
 801ef4c:	4605      	mov	r5, r0
 801ef4e:	460c      	mov	r4, r1
 801ef50:	d904      	bls.n	801ef5c <_raise_r+0x14>
 801ef52:	2316      	movs	r3, #22
 801ef54:	6003      	str	r3, [r0, #0]
 801ef56:	f04f 30ff 	mov.w	r0, #4294967295
 801ef5a:	bd38      	pop	{r3, r4, r5, pc}
 801ef5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ef5e:	b112      	cbz	r2, 801ef66 <_raise_r+0x1e>
 801ef60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ef64:	b94b      	cbnz	r3, 801ef7a <_raise_r+0x32>
 801ef66:	4628      	mov	r0, r5
 801ef68:	f000 f886 	bl	801f078 <_getpid_r>
 801ef6c:	4622      	mov	r2, r4
 801ef6e:	4601      	mov	r1, r0
 801ef70:	4628      	mov	r0, r5
 801ef72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ef76:	f000 b86d 	b.w	801f054 <_kill_r>
 801ef7a:	2b01      	cmp	r3, #1
 801ef7c:	d00a      	beq.n	801ef94 <_raise_r+0x4c>
 801ef7e:	1c59      	adds	r1, r3, #1
 801ef80:	d103      	bne.n	801ef8a <_raise_r+0x42>
 801ef82:	2316      	movs	r3, #22
 801ef84:	6003      	str	r3, [r0, #0]
 801ef86:	2001      	movs	r0, #1
 801ef88:	e7e7      	b.n	801ef5a <_raise_r+0x12>
 801ef8a:	2100      	movs	r1, #0
 801ef8c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ef90:	4620      	mov	r0, r4
 801ef92:	4798      	blx	r3
 801ef94:	2000      	movs	r0, #0
 801ef96:	e7e0      	b.n	801ef5a <_raise_r+0x12>

0801ef98 <raise>:
 801ef98:	4b02      	ldr	r3, [pc, #8]	@ (801efa4 <raise+0xc>)
 801ef9a:	4601      	mov	r1, r0
 801ef9c:	6818      	ldr	r0, [r3, #0]
 801ef9e:	f7ff bfd3 	b.w	801ef48 <_raise_r>
 801efa2:	bf00      	nop
 801efa4:	24000014 	.word	0x24000014

0801efa8 <_reclaim_reent>:
 801efa8:	4b29      	ldr	r3, [pc, #164]	@ (801f050 <_reclaim_reent+0xa8>)
 801efaa:	681b      	ldr	r3, [r3, #0]
 801efac:	4283      	cmp	r3, r0
 801efae:	b570      	push	{r4, r5, r6, lr}
 801efb0:	4604      	mov	r4, r0
 801efb2:	d04b      	beq.n	801f04c <_reclaim_reent+0xa4>
 801efb4:	69c3      	ldr	r3, [r0, #28]
 801efb6:	b1ab      	cbz	r3, 801efe4 <_reclaim_reent+0x3c>
 801efb8:	68db      	ldr	r3, [r3, #12]
 801efba:	b16b      	cbz	r3, 801efd8 <_reclaim_reent+0x30>
 801efbc:	2500      	movs	r5, #0
 801efbe:	69e3      	ldr	r3, [r4, #28]
 801efc0:	68db      	ldr	r3, [r3, #12]
 801efc2:	5959      	ldr	r1, [r3, r5]
 801efc4:	2900      	cmp	r1, #0
 801efc6:	d13b      	bne.n	801f040 <_reclaim_reent+0x98>
 801efc8:	3504      	adds	r5, #4
 801efca:	2d80      	cmp	r5, #128	@ 0x80
 801efcc:	d1f7      	bne.n	801efbe <_reclaim_reent+0x16>
 801efce:	69e3      	ldr	r3, [r4, #28]
 801efd0:	4620      	mov	r0, r4
 801efd2:	68d9      	ldr	r1, [r3, #12]
 801efd4:	f000 f89c 	bl	801f110 <_free_r>
 801efd8:	69e3      	ldr	r3, [r4, #28]
 801efda:	6819      	ldr	r1, [r3, #0]
 801efdc:	b111      	cbz	r1, 801efe4 <_reclaim_reent+0x3c>
 801efde:	4620      	mov	r0, r4
 801efe0:	f000 f896 	bl	801f110 <_free_r>
 801efe4:	6961      	ldr	r1, [r4, #20]
 801efe6:	b111      	cbz	r1, 801efee <_reclaim_reent+0x46>
 801efe8:	4620      	mov	r0, r4
 801efea:	f000 f891 	bl	801f110 <_free_r>
 801efee:	69e1      	ldr	r1, [r4, #28]
 801eff0:	b111      	cbz	r1, 801eff8 <_reclaim_reent+0x50>
 801eff2:	4620      	mov	r0, r4
 801eff4:	f000 f88c 	bl	801f110 <_free_r>
 801eff8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801effa:	b111      	cbz	r1, 801f002 <_reclaim_reent+0x5a>
 801effc:	4620      	mov	r0, r4
 801effe:	f000 f887 	bl	801f110 <_free_r>
 801f002:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f004:	b111      	cbz	r1, 801f00c <_reclaim_reent+0x64>
 801f006:	4620      	mov	r0, r4
 801f008:	f000 f882 	bl	801f110 <_free_r>
 801f00c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801f00e:	b111      	cbz	r1, 801f016 <_reclaim_reent+0x6e>
 801f010:	4620      	mov	r0, r4
 801f012:	f000 f87d 	bl	801f110 <_free_r>
 801f016:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801f018:	b111      	cbz	r1, 801f020 <_reclaim_reent+0x78>
 801f01a:	4620      	mov	r0, r4
 801f01c:	f000 f878 	bl	801f110 <_free_r>
 801f020:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801f022:	b111      	cbz	r1, 801f02a <_reclaim_reent+0x82>
 801f024:	4620      	mov	r0, r4
 801f026:	f000 f873 	bl	801f110 <_free_r>
 801f02a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801f02c:	b111      	cbz	r1, 801f034 <_reclaim_reent+0x8c>
 801f02e:	4620      	mov	r0, r4
 801f030:	f000 f86e 	bl	801f110 <_free_r>
 801f034:	6a23      	ldr	r3, [r4, #32]
 801f036:	b14b      	cbz	r3, 801f04c <_reclaim_reent+0xa4>
 801f038:	4620      	mov	r0, r4
 801f03a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f03e:	4718      	bx	r3
 801f040:	680e      	ldr	r6, [r1, #0]
 801f042:	4620      	mov	r0, r4
 801f044:	f000 f864 	bl	801f110 <_free_r>
 801f048:	4631      	mov	r1, r6
 801f04a:	e7bb      	b.n	801efc4 <_reclaim_reent+0x1c>
 801f04c:	bd70      	pop	{r4, r5, r6, pc}
 801f04e:	bf00      	nop
 801f050:	24000014 	.word	0x24000014

0801f054 <_kill_r>:
 801f054:	b538      	push	{r3, r4, r5, lr}
 801f056:	4d07      	ldr	r5, [pc, #28]	@ (801f074 <_kill_r+0x20>)
 801f058:	2300      	movs	r3, #0
 801f05a:	4604      	mov	r4, r0
 801f05c:	4608      	mov	r0, r1
 801f05e:	4611      	mov	r1, r2
 801f060:	602b      	str	r3, [r5, #0]
 801f062:	f7e4 f955 	bl	8003310 <_kill>
 801f066:	1c43      	adds	r3, r0, #1
 801f068:	d102      	bne.n	801f070 <_kill_r+0x1c>
 801f06a:	682b      	ldr	r3, [r5, #0]
 801f06c:	b103      	cbz	r3, 801f070 <_kill_r+0x1c>
 801f06e:	6023      	str	r3, [r4, #0]
 801f070:	bd38      	pop	{r3, r4, r5, pc}
 801f072:	bf00      	nop
 801f074:	24007544 	.word	0x24007544

0801f078 <_getpid_r>:
 801f078:	f7e4 b948 	b.w	800330c <_getpid>

0801f07c <_sbrk_r>:
 801f07c:	b538      	push	{r3, r4, r5, lr}
 801f07e:	4d06      	ldr	r5, [pc, #24]	@ (801f098 <_sbrk_r+0x1c>)
 801f080:	2300      	movs	r3, #0
 801f082:	4604      	mov	r4, r0
 801f084:	4608      	mov	r0, r1
 801f086:	602b      	str	r3, [r5, #0]
 801f088:	f7e4 f950 	bl	800332c <_sbrk>
 801f08c:	1c43      	adds	r3, r0, #1
 801f08e:	d102      	bne.n	801f096 <_sbrk_r+0x1a>
 801f090:	682b      	ldr	r3, [r5, #0]
 801f092:	b103      	cbz	r3, 801f096 <_sbrk_r+0x1a>
 801f094:	6023      	str	r3, [r4, #0]
 801f096:	bd38      	pop	{r3, r4, r5, pc}
 801f098:	24007544 	.word	0x24007544

0801f09c <__errno>:
 801f09c:	4b01      	ldr	r3, [pc, #4]	@ (801f0a4 <__errno+0x8>)
 801f09e:	6818      	ldr	r0, [r3, #0]
 801f0a0:	4770      	bx	lr
 801f0a2:	bf00      	nop
 801f0a4:	24000014 	.word	0x24000014

0801f0a8 <__libc_init_array>:
 801f0a8:	b570      	push	{r4, r5, r6, lr}
 801f0aa:	4d0d      	ldr	r5, [pc, #52]	@ (801f0e0 <__libc_init_array+0x38>)
 801f0ac:	4c0d      	ldr	r4, [pc, #52]	@ (801f0e4 <__libc_init_array+0x3c>)
 801f0ae:	1b64      	subs	r4, r4, r5
 801f0b0:	10a4      	asrs	r4, r4, #2
 801f0b2:	2600      	movs	r6, #0
 801f0b4:	42a6      	cmp	r6, r4
 801f0b6:	d109      	bne.n	801f0cc <__libc_init_array+0x24>
 801f0b8:	4d0b      	ldr	r5, [pc, #44]	@ (801f0e8 <__libc_init_array+0x40>)
 801f0ba:	4c0c      	ldr	r4, [pc, #48]	@ (801f0ec <__libc_init_array+0x44>)
 801f0bc:	f000 f872 	bl	801f1a4 <_init>
 801f0c0:	1b64      	subs	r4, r4, r5
 801f0c2:	10a4      	asrs	r4, r4, #2
 801f0c4:	2600      	movs	r6, #0
 801f0c6:	42a6      	cmp	r6, r4
 801f0c8:	d105      	bne.n	801f0d6 <__libc_init_array+0x2e>
 801f0ca:	bd70      	pop	{r4, r5, r6, pc}
 801f0cc:	f855 3b04 	ldr.w	r3, [r5], #4
 801f0d0:	4798      	blx	r3
 801f0d2:	3601      	adds	r6, #1
 801f0d4:	e7ee      	b.n	801f0b4 <__libc_init_array+0xc>
 801f0d6:	f855 3b04 	ldr.w	r3, [r5], #4
 801f0da:	4798      	blx	r3
 801f0dc:	3601      	adds	r6, #1
 801f0de:	e7f2      	b.n	801f0c6 <__libc_init_array+0x1e>
 801f0e0:	0801f8c8 	.word	0x0801f8c8
 801f0e4:	0801f8c8 	.word	0x0801f8c8
 801f0e8:	0801f8c8 	.word	0x0801f8c8
 801f0ec:	0801f8d0 	.word	0x0801f8d0

0801f0f0 <__retarget_lock_acquire_recursive>:
 801f0f0:	4770      	bx	lr

0801f0f2 <__retarget_lock_release_recursive>:
 801f0f2:	4770      	bx	lr

0801f0f4 <memcpy>:
 801f0f4:	440a      	add	r2, r1
 801f0f6:	4291      	cmp	r1, r2
 801f0f8:	f100 33ff 	add.w	r3, r0, #4294967295
 801f0fc:	d100      	bne.n	801f100 <memcpy+0xc>
 801f0fe:	4770      	bx	lr
 801f100:	b510      	push	{r4, lr}
 801f102:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f106:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f10a:	4291      	cmp	r1, r2
 801f10c:	d1f9      	bne.n	801f102 <memcpy+0xe>
 801f10e:	bd10      	pop	{r4, pc}

0801f110 <_free_r>:
 801f110:	b538      	push	{r3, r4, r5, lr}
 801f112:	4605      	mov	r5, r0
 801f114:	2900      	cmp	r1, #0
 801f116:	d041      	beq.n	801f19c <_free_r+0x8c>
 801f118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f11c:	1f0c      	subs	r4, r1, #4
 801f11e:	2b00      	cmp	r3, #0
 801f120:	bfb8      	it	lt
 801f122:	18e4      	addlt	r4, r4, r3
 801f124:	f7ff fee2 	bl	801eeec <__malloc_lock>
 801f128:	4a1d      	ldr	r2, [pc, #116]	@ (801f1a0 <_free_r+0x90>)
 801f12a:	6813      	ldr	r3, [r2, #0]
 801f12c:	b933      	cbnz	r3, 801f13c <_free_r+0x2c>
 801f12e:	6063      	str	r3, [r4, #4]
 801f130:	6014      	str	r4, [r2, #0]
 801f132:	4628      	mov	r0, r5
 801f134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f138:	f7ff bede 	b.w	801eef8 <__malloc_unlock>
 801f13c:	42a3      	cmp	r3, r4
 801f13e:	d908      	bls.n	801f152 <_free_r+0x42>
 801f140:	6820      	ldr	r0, [r4, #0]
 801f142:	1821      	adds	r1, r4, r0
 801f144:	428b      	cmp	r3, r1
 801f146:	bf01      	itttt	eq
 801f148:	6819      	ldreq	r1, [r3, #0]
 801f14a:	685b      	ldreq	r3, [r3, #4]
 801f14c:	1809      	addeq	r1, r1, r0
 801f14e:	6021      	streq	r1, [r4, #0]
 801f150:	e7ed      	b.n	801f12e <_free_r+0x1e>
 801f152:	461a      	mov	r2, r3
 801f154:	685b      	ldr	r3, [r3, #4]
 801f156:	b10b      	cbz	r3, 801f15c <_free_r+0x4c>
 801f158:	42a3      	cmp	r3, r4
 801f15a:	d9fa      	bls.n	801f152 <_free_r+0x42>
 801f15c:	6811      	ldr	r1, [r2, #0]
 801f15e:	1850      	adds	r0, r2, r1
 801f160:	42a0      	cmp	r0, r4
 801f162:	d10b      	bne.n	801f17c <_free_r+0x6c>
 801f164:	6820      	ldr	r0, [r4, #0]
 801f166:	4401      	add	r1, r0
 801f168:	1850      	adds	r0, r2, r1
 801f16a:	4283      	cmp	r3, r0
 801f16c:	6011      	str	r1, [r2, #0]
 801f16e:	d1e0      	bne.n	801f132 <_free_r+0x22>
 801f170:	6818      	ldr	r0, [r3, #0]
 801f172:	685b      	ldr	r3, [r3, #4]
 801f174:	6053      	str	r3, [r2, #4]
 801f176:	4408      	add	r0, r1
 801f178:	6010      	str	r0, [r2, #0]
 801f17a:	e7da      	b.n	801f132 <_free_r+0x22>
 801f17c:	d902      	bls.n	801f184 <_free_r+0x74>
 801f17e:	230c      	movs	r3, #12
 801f180:	602b      	str	r3, [r5, #0]
 801f182:	e7d6      	b.n	801f132 <_free_r+0x22>
 801f184:	6820      	ldr	r0, [r4, #0]
 801f186:	1821      	adds	r1, r4, r0
 801f188:	428b      	cmp	r3, r1
 801f18a:	bf04      	itt	eq
 801f18c:	6819      	ldreq	r1, [r3, #0]
 801f18e:	685b      	ldreq	r3, [r3, #4]
 801f190:	6063      	str	r3, [r4, #4]
 801f192:	bf04      	itt	eq
 801f194:	1809      	addeq	r1, r1, r0
 801f196:	6021      	streq	r1, [r4, #0]
 801f198:	6054      	str	r4, [r2, #4]
 801f19a:	e7ca      	b.n	801f132 <_free_r+0x22>
 801f19c:	bd38      	pop	{r3, r4, r5, pc}
 801f19e:	bf00      	nop
 801f1a0:	24007408 	.word	0x24007408

0801f1a4 <_init>:
 801f1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1a6:	bf00      	nop
 801f1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f1aa:	bc08      	pop	{r3}
 801f1ac:	469e      	mov	lr, r3
 801f1ae:	4770      	bx	lr

0801f1b0 <_fini>:
 801f1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1b2:	bf00      	nop
 801f1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f1b6:	bc08      	pop	{r3}
 801f1b8:	469e      	mov	lr, r3
 801f1ba:	4770      	bx	lr
